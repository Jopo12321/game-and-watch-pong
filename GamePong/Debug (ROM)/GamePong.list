
GamePong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 ._itcram      00000000  00000100  00000100  000300b0  2**0
                  CONTENTS
  1 ._itcram_hot  00000000  00000100  00000100  000300b0  2**0
                  CONTENTS
  2 ._ram_uc      0004b000  24000000  24000000  00040000  2**4
                  ALLOC
  3 ._ram_exec    00000000  24050000  24050000  000300b0  2**0
                  CONTENTS
  4 ._extflash    00000000  90000000  90000000  000300b0  2**0
                  CONTENTS
  5 ._configflash 00000000  900ff000  900ff000  000300b0  2**0
                  CONTENTS
  6 ._ram         00000000  24050000  24050000  000300b0  2**0
                  CONTENTS
  7 ._ahbram      00005f94  30000000  30000000  00040000  2**4
                  ALLOC
  8 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .text         0001294c  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .rodata       00001a1c  08012bfc  08012bfc  00022bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .init_array   00000004  08014618  08014618  00024618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .fini_array   00000004  0801461c  0801461c  0002461c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .data         000000b0  20000000  08014620  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 ._flash_end   00000000  08014620  08014620  000300b0  2**0
                  CONTENTS
 15 .bss          000006c0  200000b0  200000b0  000300b0  2**2
                  ALLOC
 16 ._persistent  00000000  20000770  20000770  000300b0  2**0
                  CONTENTS
 17 ._user_heap   00008000  20000770  20000770  000300b0  2**0
                  ALLOC
 18 ._user_stack  00017890  20008770  20008770  000300b0  2**0
                  ALLOC
 19 .ARM.attributes 0000002e  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY
 20 .comment      00000043  00000000  00000000  000300de  2**0
                  CONTENTS, READONLY
 21 .debug_info   00028bca  00000000  00000000  00030121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_abbrev 00004e8a  00000000  00000000  00058ceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_aranges 000020e0  00000000  00000000  0005db78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_macro  00039c3a  00000000  00000000  0005fc58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line   0002def6  00000000  00000000  00099892  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_str    0016b546  00000000  00000000  000c7788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_rnglists 00001944  00000000  00000000  00232cce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_frame  0000975c  00000000  00000000  00234614  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_line_str 00000064  00000000  00000000  0023dd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	200000b0 	.word	0x200000b0
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08012be4 	.word	0x08012be4

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	200000b4 	.word	0x200000b4
 80002ec:	08012be4 	.word	0x08012be4

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <game_init>:
int ball_xspeed;
int ball_yspeed;
int ball_x;
int ball_y;

void game_init(void) {
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
	uint16_t *buf = lcd_get_active_buffer();
 8000396:	f002 f96f 	bl	8002678 <lcd_get_active_buffer>
 800039a:	6078      	str	r0, [r7, #4]
	draw_background(buf);
 800039c:	6878      	ldr	r0, [r7, #4]
 800039e:	f000 f863 	bl	8000468 <draw_background>
	ball_xspeed = randsing() * ball_speed;
 80003a2:	f011 fac7 	bl	8011934 <rand>
 80003a6:	4603      	mov	r3, r0
 80003a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80003ac:	db02      	blt.n	80003b4 <game_init+0x24>
 80003ae:	f04f 33ff 	mov.w	r3, #4294967295
 80003b2:	e000      	b.n	80003b6 <game_init+0x26>
 80003b4:	2301      	movs	r3, #1
 80003b6:	2203      	movs	r2, #3
 80003b8:	fb02 f303 	mul.w	r3, r2, r3
 80003bc:	4a18      	ldr	r2, [pc, #96]	; (8000420 <game_init+0x90>)
 80003be:	6013      	str	r3, [r2, #0]
	ball_yspeed = randsing() * ball_speed;
 80003c0:	f011 fab8 	bl	8011934 <rand>
 80003c4:	4603      	mov	r3, r0
 80003c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80003ca:	db02      	blt.n	80003d2 <game_init+0x42>
 80003cc:	f04f 33ff 	mov.w	r3, #4294967295
 80003d0:	e000      	b.n	80003d4 <game_init+0x44>
 80003d2:	2301      	movs	r3, #1
 80003d4:	2203      	movs	r2, #3
 80003d6:	fb02 f303 	mul.w	r3, r2, r3
 80003da:	4a12      	ldr	r2, [pc, #72]	; (8000424 <game_init+0x94>)
 80003dc:	6013      	str	r3, [r2, #0]
	ball_x = 160;
 80003de:	4b12      	ldr	r3, [pc, #72]	; (8000428 <game_init+0x98>)
 80003e0:	22a0      	movs	r2, #160	; 0xa0
 80003e2:	601a      	str	r2, [r3, #0]
	ball_y = randint(190, 70);
 80003e4:	f011 faa6 	bl	8011934 <rand>
 80003e8:	4601      	mov	r1, r0
 80003ea:	4b10      	ldr	r3, [pc, #64]	; (800042c <game_init+0x9c>)
 80003ec:	fb83 2301 	smull	r2, r3, r3, r1
 80003f0:	105a      	asrs	r2, r3, #1
 80003f2:	17cb      	asrs	r3, r1, #31
 80003f4:	1ad2      	subs	r2, r2, r3
 80003f6:	4613      	mov	r3, r2
 80003f8:	011b      	lsls	r3, r3, #4
 80003fa:	1a9b      	subs	r3, r3, r2
 80003fc:	00db      	lsls	r3, r3, #3
 80003fe:	4413      	add	r3, r2
 8000400:	1aca      	subs	r2, r1, r3
 8000402:	f102 0346 	add.w	r3, r2, #70	; 0x46
 8000406:	4a0a      	ldr	r2, [pc, #40]	; (8000430 <game_init+0xa0>)
 8000408:	6013      	str	r3, [r2, #0]
	lcd_sync();
 800040a:	f002 f91d 	bl	8002648 <lcd_sync>
	lcd_swap();
 800040e:	f002 f905 	bl	800261c <lcd_swap>
	lcd_wait_for_vblank();
 8000412:	f002 f95d 	bl	80026d0 <lcd_wait_for_vblank>
}
 8000416:	bf00      	nop
 8000418:	3708      	adds	r7, #8
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	200001e4 	.word	0x200001e4
 8000424:	200001e8 	.word	0x200001e8
 8000428:	200001ec 	.word	0x200001ec
 800042c:	043b3d5b 	.word	0x043b3d5b
 8000430:	200001f0 	.word	0x200001f0

08000434 <game_loop>:

void game_loop(void) {
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
	uint16_t *buf = lcd_get_active_buffer();
 800043a:	f002 f91d 	bl	8002678 <lcd_get_active_buffer>
 800043e:	6078      	str	r0, [r7, #4]
	draw_background(buf);
 8000440:	6878      	ldr	r0, [r7, #4]
 8000442:	f000 f811 	bl	8000468 <draw_background>
	update_player(buf);
 8000446:	6878      	ldr	r0, [r7, #4]
 8000448:	f000 f878 	bl	800053c <update_player>
	update_ai(buf);
 800044c:	6878      	ldr	r0, [r7, #4]
 800044e:	f000 f9e1 	bl	8000814 <update_ai>
	update_ball(buf);
 8000452:	6878      	ldr	r0, [r7, #4]
 8000454:	f000 f8ec 	bl	8000630 <update_ball>
	lcd_swap();
 8000458:	f002 f8e0 	bl	800261c <lcd_swap>
	lcd_wait_for_vblank();
 800045c:	f002 f938 	bl	80026d0 <lcd_wait_for_vblank>
}
 8000460:	bf00      	nop
 8000462:	3708      	adds	r7, #8
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}

08000468 <draw_background>:

void draw_background(uint16_t *buf) {
 8000468:	b590      	push	{r4, r7, lr}
 800046a:	b085      	sub	sp, #20
 800046c:	af02      	add	r7, sp, #8
 800046e:	6078      	str	r0, [r7, #4]
	LCD_Clear(buf, LCD_COLOR_BLACK);
 8000470:	2100      	movs	r1, #0
 8000472:	6878      	ldr	r0, [r7, #4]
 8000474:	f000 fa76 	bl	8000964 <LCD_Clear>
	LCD_DrawRect(buf, 0, 20, LCD_GetXSize() - 1, LCD_GetYSize() - 21,
 8000478:	f000 fa26 	bl	80008c8 <LCD_GetXSize>
 800047c:	4603      	mov	r3, r0
 800047e:	3b01      	subs	r3, #1
 8000480:	b29c      	uxth	r4, r3
 8000482:	f000 fa2a 	bl	80008da <LCD_GetYSize>
 8000486:	4603      	mov	r3, r0
 8000488:	3b15      	subs	r3, #21
 800048a:	b29b      	uxth	r3, r3
 800048c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000490:	9201      	str	r2, [sp, #4]
 8000492:	9300      	str	r3, [sp, #0]
 8000494:	4623      	mov	r3, r4
 8000496:	2214      	movs	r2, #20
 8000498:	2100      	movs	r1, #0
 800049a:	6878      	ldr	r0, [r7, #4]
 800049c:	f000 fba8 	bl	8000bf0 <LCD_DrawRect>
	LCD_COLOR_WHITE);
	draw_score(buf);
 80004a0:	6878      	ldr	r0, [r7, #4]
 80004a2:	f000 f805 	bl	80004b0 <draw_score>
}
 80004a6:	bf00      	nop
 80004a8:	370c      	adds	r7, #12
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd90      	pop	{r4, r7, pc}
	...

080004b0 <draw_score>:

void draw_score(uint16_t *buf) {
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b084      	sub	sp, #16
 80004b4:	af02      	add	r7, sp, #8
 80004b6:	6078      	str	r0, [r7, #4]
	LCD_SetFont(&Font16);
 80004b8:	4818      	ldr	r0, [pc, #96]	; (800051c <draw_score+0x6c>)
 80004ba:	f000 fa17 	bl	80008ec <LCD_SetFont>
	sprintf(score_p1_buf, "%d", score_p1);
 80004be:	4b18      	ldr	r3, [pc, #96]	; (8000520 <draw_score+0x70>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	461a      	mov	r2, r3
 80004c4:	4917      	ldr	r1, [pc, #92]	; (8000524 <draw_score+0x74>)
 80004c6:	4818      	ldr	r0, [pc, #96]	; (8000528 <draw_score+0x78>)
 80004c8:	f011 fbe4 	bl	8011c94 <siprintf>
	LCD_DisplayStringAt(buf, 0, 4, (uint8_t*) score_p1_buf, LEFT_MODE);
 80004cc:	2303      	movs	r3, #3
 80004ce:	9300      	str	r3, [sp, #0]
 80004d0:	4b15      	ldr	r3, [pc, #84]	; (8000528 <draw_score+0x78>)
 80004d2:	2204      	movs	r2, #4
 80004d4:	2100      	movs	r1, #0
 80004d6:	6878      	ldr	r0, [r7, #4]
 80004d8:	f000 fa5e 	bl	8000998 <LCD_DisplayStringAt>
	sprintf(score_p2_buf, "%d", score_p2);
 80004dc:	4b13      	ldr	r3, [pc, #76]	; (800052c <draw_score+0x7c>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	461a      	mov	r2, r3
 80004e2:	4910      	ldr	r1, [pc, #64]	; (8000524 <draw_score+0x74>)
 80004e4:	4812      	ldr	r0, [pc, #72]	; (8000530 <draw_score+0x80>)
 80004e6:	f011 fbd5 	bl	8011c94 <siprintf>
	LCD_DisplayStringAt(buf, 2, 4, (uint8_t*) score_p2_buf, RIGHT_MODE);
 80004ea:	2302      	movs	r3, #2
 80004ec:	9300      	str	r3, [sp, #0]
 80004ee:	4b10      	ldr	r3, [pc, #64]	; (8000530 <draw_score+0x80>)
 80004f0:	2204      	movs	r2, #4
 80004f2:	2102      	movs	r1, #2
 80004f4:	6878      	ldr	r0, [r7, #4]
 80004f6:	f000 fa4f 	bl	8000998 <LCD_DisplayStringAt>
	sprintf(text_buf, "SCORE");
 80004fa:	490e      	ldr	r1, [pc, #56]	; (8000534 <draw_score+0x84>)
 80004fc:	480e      	ldr	r0, [pc, #56]	; (8000538 <draw_score+0x88>)
 80004fe:	f011 fbc9 	bl	8011c94 <siprintf>
	LCD_DisplayStringAt(buf, 1, 4, (uint8_t*) text_buf, CENTER_MODE);
 8000502:	2301      	movs	r3, #1
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <draw_score+0x88>)
 8000508:	2204      	movs	r2, #4
 800050a:	2101      	movs	r1, #1
 800050c:	6878      	ldr	r0, [r7, #4]
 800050e:	f000 fa43 	bl	8000998 <LCD_DisplayStringAt>
}
 8000512:	bf00      	nop
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	20000008 	.word	0x20000008
 8000520:	200000cc 	.word	0x200000cc
 8000524:	08012bfc 	.word	0x08012bfc
 8000528:	200000d4 	.word	0x200000d4
 800052c:	200000d0 	.word	0x200000d0
 8000530:	200000dc 	.word	0x200000dc
 8000534:	08012c00 	.word	0x08012c00
 8000538:	200000e4 	.word	0x200000e4

0800053c <update_player>:

void update_player(uint16_t *buf) {
 800053c:	b590      	push	{r4, r7, lr}
 800053e:	b087      	sub	sp, #28
 8000540:	af02      	add	r7, sp, #8
 8000542:	6078      	str	r0, [r7, #4]
	uint32_t buttons = buttons_get();
 8000544:	f001 f9ce 	bl	80018e4 <buttons_get>
 8000548:	60f8      	str	r0, [r7, #12]
	if (buttons & B_Up) {
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	f003 0302 	and.w	r3, r3, #2
 8000550:	2b00      	cmp	r3, #0
 8000552:	d00c      	beq.n	800056e <update_player+0x32>
		if (p1_y >= 20 + p1_speed + 2) {
 8000554:	2302      	movs	r3, #2
 8000556:	f103 0215 	add.w	r2, r3, #21
 800055a:	4b2f      	ldr	r3, [pc, #188]	; (8000618 <update_player+0xdc>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	429a      	cmp	r2, r3
 8000560:	da05      	bge.n	800056e <update_player+0x32>
			p1_y = p1_y - p1_speed;
 8000562:	4b2d      	ldr	r3, [pc, #180]	; (8000618 <update_player+0xdc>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	2202      	movs	r2, #2
 8000568:	1a9b      	subs	r3, r3, r2
 800056a:	4a2b      	ldr	r2, [pc, #172]	; (8000618 <update_player+0xdc>)
 800056c:	6013      	str	r3, [r2, #0]
		}
	}
	if (buttons & B_Down) {
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	f003 0308 	and.w	r3, r3, #8
 8000574:	2b00      	cmp	r3, #0
 8000576:	d012      	beq.n	800059e <update_player+0x62>
		if (p1_y <= LCD_GetYSize() - p1_height - p1_speed - 2) {
 8000578:	f000 f9af 	bl	80008da <LCD_GetYSize>
 800057c:	4603      	mov	r3, r0
 800057e:	461a      	mov	r2, r3
 8000580:	2328      	movs	r3, #40	; 0x28
 8000582:	1ad3      	subs	r3, r2, r3
 8000584:	2202      	movs	r2, #2
 8000586:	1a9b      	subs	r3, r3, r2
 8000588:	1e5a      	subs	r2, r3, #1
 800058a:	4b23      	ldr	r3, [pc, #140]	; (8000618 <update_player+0xdc>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	429a      	cmp	r2, r3
 8000590:	dd05      	ble.n	800059e <update_player+0x62>
			p1_y = p1_y + p1_speed;
 8000592:	4b21      	ldr	r3, [pc, #132]	; (8000618 <update_player+0xdc>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	2202      	movs	r2, #2
 8000598:	4413      	add	r3, r2
 800059a:	4a1f      	ldr	r2, [pc, #124]	; (8000618 <update_player+0xdc>)
 800059c:	6013      	str	r3, [r2, #0]
		}
	}
	if (buttons & B_GAME) {
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d01a      	beq.n	80005de <update_player+0xa2>
		score_p1 = 0;
 80005a8:	4b1c      	ldr	r3, [pc, #112]	; (800061c <update_player+0xe0>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
		score_p2 = 0;
 80005ae:	4b1c      	ldr	r3, [pc, #112]	; (8000620 <update_player+0xe4>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
		p1_x = 3;
 80005b4:	4b1b      	ldr	r3, [pc, #108]	; (8000624 <update_player+0xe8>)
 80005b6:	2203      	movs	r2, #3
 80005b8:	601a      	str	r2, [r3, #0]
		p1_y = 110;
 80005ba:	4b17      	ldr	r3, [pc, #92]	; (8000618 <update_player+0xdc>)
 80005bc:	226e      	movs	r2, #110	; 0x6e
 80005be:	601a      	str	r2, [r3, #0]
		p2_x = 320 - 3 - p2_width;
 80005c0:	2205      	movs	r2, #5
 80005c2:	f240 133d 	movw	r3, #317	; 0x13d
 80005c6:	1a9b      	subs	r3, r3, r2
 80005c8:	4a17      	ldr	r2, [pc, #92]	; (8000628 <update_player+0xec>)
 80005ca:	6013      	str	r3, [r2, #0]
		p2_y = 110;
 80005cc:	4b17      	ldr	r3, [pc, #92]	; (800062c <update_player+0xf0>)
 80005ce:	226e      	movs	r2, #110	; 0x6e
 80005d0:	601a      	str	r2, [r3, #0]
		HAL_Delay(500);
 80005d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005d6:	f003 fd99 	bl	800410c <HAL_Delay>
		game_init();
 80005da:	f7ff fed9 	bl	8000390 <game_init>
	}
	if (buttons & B_POWER) {
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <update_player+0xb0>
		HAL_NVIC_SystemReset();
 80005e8:	f005 fde5 	bl	80061b6 <HAL_NVIC_SystemReset>
	}
	LCD_FillRect(buf, p1_x, p1_y, p1_width, p1_height, LCD_COLOR_WHITE);
 80005ec:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <update_player+0xe8>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	b299      	uxth	r1, r3
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <update_player+0xdc>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	b29a      	uxth	r2, r3
 80005f8:	2305      	movs	r3, #5
 80005fa:	b298      	uxth	r0, r3
 80005fc:	2328      	movs	r3, #40	; 0x28
 80005fe:	b29b      	uxth	r3, r3
 8000600:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8000604:	9401      	str	r4, [sp, #4]
 8000606:	9300      	str	r3, [sp, #0]
 8000608:	4603      	mov	r3, r0
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f000 fbd4 	bl	8000db8 <LCD_FillRect>
}
 8000610:	bf00      	nop
 8000612:	3714      	adds	r7, #20
 8000614:	46bd      	mov	sp, r7
 8000616:	bd90      	pop	{r4, r7, pc}
 8000618:	20000014 	.word	0x20000014
 800061c:	200000cc 	.word	0x200000cc
 8000620:	200000d0 	.word	0x200000d0
 8000624:	20000010 	.word	0x20000010
 8000628:	20000018 	.word	0x20000018
 800062c:	2000001c 	.word	0x2000001c

08000630 <update_ball>:

void update_ball(uint16_t *buf) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af02      	add	r7, sp, #8
 8000636:	6078      	str	r0, [r7, #4]

	if (ball_x <= ball_r + ball_speed + p1_x + p1_width / 2
 8000638:	2208      	movs	r2, #8
 800063a:	2303      	movs	r3, #3
 800063c:	441a      	add	r2, r3
 800063e:	4b6b      	ldr	r3, [pc, #428]	; (80007ec <update_ball+0x1bc>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	441a      	add	r2, r3
 8000644:	2305      	movs	r3, #5
 8000646:	2b00      	cmp	r3, #0
 8000648:	da00      	bge.n	800064c <update_ball+0x1c>
 800064a:	3301      	adds	r3, #1
 800064c:	105b      	asrs	r3, r3, #1
 800064e:	441a      	add	r2, r3
 8000650:	4b67      	ldr	r3, [pc, #412]	; (80007f0 <update_ball+0x1c0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	429a      	cmp	r2, r3
 8000656:	db38      	blt.n	80006ca <update_ball+0x9a>
			&& ball_xspeed == -ball_speed) {
 8000658:	2303      	movs	r3, #3
 800065a:	425a      	negs	r2, r3
 800065c:	4b65      	ldr	r3, [pc, #404]	; (80007f4 <update_ball+0x1c4>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	429a      	cmp	r2, r3
 8000662:	d132      	bne.n	80006ca <update_ball+0x9a>
		ball_xspeed = ball_speed;
 8000664:	2203      	movs	r2, #3
 8000666:	4b63      	ldr	r3, [pc, #396]	; (80007f4 <update_ball+0x1c4>)
 8000668:	601a      	str	r2, [r3, #0]
		if (ball_y >= p1_y - 2 && ball_y <= p1_y + p1_height + 2) {
 800066a:	4b63      	ldr	r3, [pc, #396]	; (80007f8 <update_ball+0x1c8>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	1e9a      	subs	r2, r3, #2
 8000670:	4b62      	ldr	r3, [pc, #392]	; (80007fc <update_ball+0x1cc>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	429a      	cmp	r2, r3
 8000676:	dc08      	bgt.n	800068a <update_ball+0x5a>
 8000678:	4b5f      	ldr	r3, [pc, #380]	; (80007f8 <update_ball+0x1c8>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2228      	movs	r2, #40	; 0x28
 800067e:	4413      	add	r3, r2
 8000680:	1c9a      	adds	r2, r3, #2
 8000682:	4b5e      	ldr	r3, [pc, #376]	; (80007fc <update_ball+0x1cc>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	429a      	cmp	r2, r3
 8000688:	da1f      	bge.n	80006ca <update_ball+0x9a>

		} else {
			score_p2++;
 800068a:	4b5d      	ldr	r3, [pc, #372]	; (8000800 <update_ball+0x1d0>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	3301      	adds	r3, #1
 8000690:	4a5b      	ldr	r2, [pc, #364]	; (8000800 <update_ball+0x1d0>)
 8000692:	6013      	str	r3, [r2, #0]
			draw_score(buf);
 8000694:	6878      	ldr	r0, [r7, #4]
 8000696:	f7ff ff0b 	bl	80004b0 <draw_score>
			LCD_FillCircle(buf, ball_x, ball_y, ball_r, LCD_COLOR_RED);
 800069a:	4b55      	ldr	r3, [pc, #340]	; (80007f0 <update_ball+0x1c0>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	b299      	uxth	r1, r3
 80006a0:	4b56      	ldr	r3, [pc, #344]	; (80007fc <update_ball+0x1cc>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	b29a      	uxth	r2, r3
 80006a6:	2308      	movs	r3, #8
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80006ae:	9000      	str	r0, [sp, #0]
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f000 fbb2 	bl	8000e1a <LCD_FillCircle>
			lcd_swap();
 80006b6:	f001 ffb1 	bl	800261c <lcd_swap>
			lcd_wait_for_vblank();
 80006ba:	f002 f809 	bl	80026d0 <lcd_wait_for_vblank>
			HAL_Delay(1000);
 80006be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006c2:	f003 fd23 	bl	800410c <HAL_Delay>
			game_init();
 80006c6:	f7ff fe63 	bl	8000390 <game_init>
		}
	}
	if (ball_x >= p2_x + p2_width / 2 - ball_r - ball_speed
 80006ca:	2305      	movs	r3, #5
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	da00      	bge.n	80006d2 <update_ball+0xa2>
 80006d0:	3301      	adds	r3, #1
 80006d2:	105b      	asrs	r3, r3, #1
 80006d4:	461a      	mov	r2, r3
 80006d6:	4b4b      	ldr	r3, [pc, #300]	; (8000804 <update_ball+0x1d4>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4413      	add	r3, r2
 80006dc:	2208      	movs	r2, #8
 80006de:	1a9b      	subs	r3, r3, r2
 80006e0:	2203      	movs	r2, #3
 80006e2:	1a9a      	subs	r2, r3, r2
 80006e4:	4b42      	ldr	r3, [pc, #264]	; (80007f0 <update_ball+0x1c0>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	dc38      	bgt.n	800075e <update_ball+0x12e>
			&& ball_xspeed == ball_speed) {
 80006ec:	4b41      	ldr	r3, [pc, #260]	; (80007f4 <update_ball+0x1c4>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2203      	movs	r2, #3
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d133      	bne.n	800075e <update_ball+0x12e>
		ball_xspeed = -ball_speed;
 80006f6:	2303      	movs	r3, #3
 80006f8:	425b      	negs	r3, r3
 80006fa:	4a3e      	ldr	r2, [pc, #248]	; (80007f4 <update_ball+0x1c4>)
 80006fc:	6013      	str	r3, [r2, #0]
		if (ball_y >= p2_y - 2 && ball_y <= p2_y + p2_height + 2) {
 80006fe:	4b42      	ldr	r3, [pc, #264]	; (8000808 <update_ball+0x1d8>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	1e9a      	subs	r2, r3, #2
 8000704:	4b3d      	ldr	r3, [pc, #244]	; (80007fc <update_ball+0x1cc>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	429a      	cmp	r2, r3
 800070a:	dc08      	bgt.n	800071e <update_ball+0xee>
 800070c:	4b3e      	ldr	r3, [pc, #248]	; (8000808 <update_ball+0x1d8>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2228      	movs	r2, #40	; 0x28
 8000712:	4413      	add	r3, r2
 8000714:	1c9a      	adds	r2, r3, #2
 8000716:	4b39      	ldr	r3, [pc, #228]	; (80007fc <update_ball+0x1cc>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	429a      	cmp	r2, r3
 800071c:	da1f      	bge.n	800075e <update_ball+0x12e>

		} else {
			score_p1++;
 800071e:	4b3b      	ldr	r3, [pc, #236]	; (800080c <update_ball+0x1dc>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	3301      	adds	r3, #1
 8000724:	4a39      	ldr	r2, [pc, #228]	; (800080c <update_ball+0x1dc>)
 8000726:	6013      	str	r3, [r2, #0]
			draw_score(buf);
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f7ff fec1 	bl	80004b0 <draw_score>
			LCD_FillCircle(buf, ball_x, ball_y, ball_r, LCD_COLOR_RED);
 800072e:	4b30      	ldr	r3, [pc, #192]	; (80007f0 <update_ball+0x1c0>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	b299      	uxth	r1, r3
 8000734:	4b31      	ldr	r3, [pc, #196]	; (80007fc <update_ball+0x1cc>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	b29a      	uxth	r2, r3
 800073a:	2308      	movs	r3, #8
 800073c:	b29b      	uxth	r3, r3
 800073e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000742:	9000      	str	r0, [sp, #0]
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f000 fb68 	bl	8000e1a <LCD_FillCircle>
			lcd_swap();
 800074a:	f001 ff67 	bl	800261c <lcd_swap>
			lcd_wait_for_vblank();
 800074e:	f001 ffbf 	bl	80026d0 <lcd_wait_for_vblank>
			HAL_Delay(1000);
 8000752:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000756:	f003 fcd9 	bl	800410c <HAL_Delay>
			game_init();
 800075a:	f7ff fe19 	bl	8000390 <game_init>
		}
	}
	if (ball_y <= 20 + ball_r + ball_speed && ball_yspeed == -ball_speed) {
 800075e:	2308      	movs	r3, #8
 8000760:	3314      	adds	r3, #20
 8000762:	2203      	movs	r2, #3
 8000764:	441a      	add	r2, r3
 8000766:	4b25      	ldr	r3, [pc, #148]	; (80007fc <update_ball+0x1cc>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	429a      	cmp	r2, r3
 800076c:	db08      	blt.n	8000780 <update_ball+0x150>
 800076e:	2303      	movs	r3, #3
 8000770:	425a      	negs	r2, r3
 8000772:	4b27      	ldr	r3, [pc, #156]	; (8000810 <update_ball+0x1e0>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	429a      	cmp	r2, r3
 8000778:	d102      	bne.n	8000780 <update_ball+0x150>
		ball_yspeed = ball_speed;
 800077a:	2203      	movs	r2, #3
 800077c:	4b24      	ldr	r3, [pc, #144]	; (8000810 <update_ball+0x1e0>)
 800077e:	601a      	str	r2, [r3, #0]
	}
	if (ball_y >= LCD_GetYSize() - ball_r - ball_speed
 8000780:	f000 f8ab 	bl	80008da <LCD_GetYSize>
 8000784:	4603      	mov	r3, r0
 8000786:	461a      	mov	r2, r3
 8000788:	2308      	movs	r3, #8
 800078a:	1ad3      	subs	r3, r2, r3
 800078c:	2203      	movs	r2, #3
 800078e:	1a9a      	subs	r2, r3, r2
 8000790:	4b1a      	ldr	r3, [pc, #104]	; (80007fc <update_ball+0x1cc>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	429a      	cmp	r2, r3
 8000796:	dc08      	bgt.n	80007aa <update_ball+0x17a>
			&& ball_yspeed == ball_speed) {
 8000798:	4b1d      	ldr	r3, [pc, #116]	; (8000810 <update_ball+0x1e0>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2203      	movs	r2, #3
 800079e:	4293      	cmp	r3, r2
 80007a0:	d103      	bne.n	80007aa <update_ball+0x17a>
		ball_yspeed = -ball_speed;
 80007a2:	2303      	movs	r3, #3
 80007a4:	425b      	negs	r3, r3
 80007a6:	4a1a      	ldr	r2, [pc, #104]	; (8000810 <update_ball+0x1e0>)
 80007a8:	6013      	str	r3, [r2, #0]
	}
	ball_x = ball_x + ball_xspeed;
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <update_ball+0x1c0>)
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <update_ball+0x1c4>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4413      	add	r3, r2
 80007b4:	4a0e      	ldr	r2, [pc, #56]	; (80007f0 <update_ball+0x1c0>)
 80007b6:	6013      	str	r3, [r2, #0]
	ball_y = ball_y + ball_yspeed;
 80007b8:	4b10      	ldr	r3, [pc, #64]	; (80007fc <update_ball+0x1cc>)
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	4b14      	ldr	r3, [pc, #80]	; (8000810 <update_ball+0x1e0>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4413      	add	r3, r2
 80007c2:	4a0e      	ldr	r2, [pc, #56]	; (80007fc <update_ball+0x1cc>)
 80007c4:	6013      	str	r3, [r2, #0]

	LCD_FillCircle(buf, ball_x, ball_y, ball_r, LCD_COLOR_WHITE);
 80007c6:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <update_ball+0x1c0>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	b299      	uxth	r1, r3
 80007cc:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <update_ball+0x1cc>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	b29a      	uxth	r2, r3
 80007d2:	2308      	movs	r3, #8
 80007d4:	b29b      	uxth	r3, r3
 80007d6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80007da:	9000      	str	r0, [sp, #0]
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f000 fb1c 	bl	8000e1a <LCD_FillCircle>
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000010 	.word	0x20000010
 80007f0:	200001ec 	.word	0x200001ec
 80007f4:	200001e4 	.word	0x200001e4
 80007f8:	20000014 	.word	0x20000014
 80007fc:	200001f0 	.word	0x200001f0
 8000800:	200000d0 	.word	0x200000d0
 8000804:	20000018 	.word	0x20000018
 8000808:	2000001c 	.word	0x2000001c
 800080c:	200000cc 	.word	0x200000cc
 8000810:	200001e8 	.word	0x200001e8

08000814 <update_ai>:

void update_ai(uint16_t *buf) {
 8000814:	b590      	push	{r4, r7, lr}
 8000816:	b085      	sub	sp, #20
 8000818:	af02      	add	r7, sp, #8
 800081a:	6078      	str	r0, [r7, #4]
	if (ball_y < (p2_y + (p2_height / 2))) {
 800081c:	2328      	movs	r3, #40	; 0x28
 800081e:	2b00      	cmp	r3, #0
 8000820:	da00      	bge.n	8000824 <update_ai+0x10>
 8000822:	3301      	adds	r3, #1
 8000824:	105b      	asrs	r3, r3, #1
 8000826:	461a      	mov	r2, r3
 8000828:	4b24      	ldr	r3, [pc, #144]	; (80008bc <update_ai+0xa8>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	441a      	add	r2, r3
 800082e:	4b24      	ldr	r3, [pc, #144]	; (80008c0 <update_ai+0xac>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	429a      	cmp	r2, r3
 8000834:	dd0c      	ble.n	8000850 <update_ai+0x3c>
		if (p2_y >= 20 + p2_speed + 2) {
 8000836:	2302      	movs	r3, #2
 8000838:	f103 0215 	add.w	r2, r3, #21
 800083c:	4b1f      	ldr	r3, [pc, #124]	; (80008bc <update_ai+0xa8>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	429a      	cmp	r2, r3
 8000842:	da05      	bge.n	8000850 <update_ai+0x3c>
			p2_y = p2_y - p2_speed;
 8000844:	4b1d      	ldr	r3, [pc, #116]	; (80008bc <update_ai+0xa8>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2202      	movs	r2, #2
 800084a:	1a9b      	subs	r3, r3, r2
 800084c:	4a1b      	ldr	r2, [pc, #108]	; (80008bc <update_ai+0xa8>)
 800084e:	6013      	str	r3, [r2, #0]
		}
	}
	if (ball_y > (p2_y + (p2_height / 2))) {
 8000850:	2328      	movs	r3, #40	; 0x28
 8000852:	2b00      	cmp	r3, #0
 8000854:	da00      	bge.n	8000858 <update_ai+0x44>
 8000856:	3301      	adds	r3, #1
 8000858:	105b      	asrs	r3, r3, #1
 800085a:	461a      	mov	r2, r3
 800085c:	4b17      	ldr	r3, [pc, #92]	; (80008bc <update_ai+0xa8>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	441a      	add	r2, r3
 8000862:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <update_ai+0xac>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	429a      	cmp	r2, r3
 8000868:	da12      	bge.n	8000890 <update_ai+0x7c>
		if (p2_y <= LCD_GetYSize() - p2_height - p2_speed - 2) {
 800086a:	f000 f836 	bl	80008da <LCD_GetYSize>
 800086e:	4603      	mov	r3, r0
 8000870:	461a      	mov	r2, r3
 8000872:	2328      	movs	r3, #40	; 0x28
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	2202      	movs	r2, #2
 8000878:	1a9b      	subs	r3, r3, r2
 800087a:	1e5a      	subs	r2, r3, #1
 800087c:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <update_ai+0xa8>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	429a      	cmp	r2, r3
 8000882:	dd05      	ble.n	8000890 <update_ai+0x7c>
			p2_y = p2_y + p2_speed;
 8000884:	4b0d      	ldr	r3, [pc, #52]	; (80008bc <update_ai+0xa8>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2202      	movs	r2, #2
 800088a:	4413      	add	r3, r2
 800088c:	4a0b      	ldr	r2, [pc, #44]	; (80008bc <update_ai+0xa8>)
 800088e:	6013      	str	r3, [r2, #0]
		}
	}
	LCD_FillRect(buf, p2_x, p2_y, p2_width, p2_height, LCD_COLOR_WHITE);
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <update_ai+0xb0>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	b299      	uxth	r1, r3
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <update_ai+0xa8>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	b29a      	uxth	r2, r3
 800089c:	2305      	movs	r3, #5
 800089e:	b298      	uxth	r0, r3
 80008a0:	2328      	movs	r3, #40	; 0x28
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80008a8:	9401      	str	r4, [sp, #4]
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	4603      	mov	r3, r0
 80008ae:	6878      	ldr	r0, [r7, #4]
 80008b0:	f000 fa82 	bl	8000db8 <LCD_FillRect>
}
 80008b4:	bf00      	nop
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd90      	pop	{r4, r7, pc}
 80008bc:	2000001c 	.word	0x2000001c
 80008c0:	200001f0 	.word	0x200001f0
 80008c4:	20000018 	.word	0x20000018

080008c8 <LCD_GetXSize>:
/**
 * @brief  Gets the LCD X size.
 * @param  None
 * @retval The used LCD X size
 */
uint16_t LCD_GetXSize(void) {
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
	return GW_LCD_WIDTH;
 80008cc:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr

080008da <LCD_GetYSize>:
/**
 * @brief  Gets the LCD Y size.
 * @param  None
 * @retval The used LCD Y size
 */
uint16_t LCD_GetYSize(void) {
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0
	return GW_LCD_HEIGHT;
 80008de:	23f0      	movs	r3, #240	; 0xf0
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
	...

080008ec <LCD_SetFont>:
/**
 * @brief  Sets the Text Font.
 * @param  pFonts: the layer font to be used
 * @retval None
 */
void LCD_SetFont(sFONT *pFonts) {
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	font = pFonts;
 80008f4:	4a04      	ldr	r2, [pc, #16]	; (8000908 <LCD_SetFont+0x1c>)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6013      	str	r3, [r2, #0]
}
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	20000020 	.word	0x20000020

0800090c <LCD_DrawPixel>:
 * @param  Xpos: the X position
 * @param  Ypos: the Y position
 * @param  RGB_Code: the pixel color in RGB(5-6-5)
 * @retval None
 */
void LCD_DrawPixel(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint16_t pixel) {
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	4608      	mov	r0, r1
 8000916:	4611      	mov	r1, r2
 8000918:	461a      	mov	r2, r3
 800091a:	4603      	mov	r3, r0
 800091c:	817b      	strh	r3, [r7, #10]
 800091e:	460b      	mov	r3, r1
 8000920:	813b      	strh	r3, [r7, #8]
 8000922:	4613      	mov	r3, r2
 8000924:	80fb      	strh	r3, [r7, #6]
	if (PPOS(Xpos, Ypos) > GW_LCD_WIDTH * GW_LCD_HEIGHT) {
 8000926:	893a      	ldrh	r2, [r7, #8]
 8000928:	4613      	mov	r3, r2
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	4413      	add	r3, r2
 800092e:	019b      	lsls	r3, r3, #6
 8000930:	461a      	mov	r2, r3
 8000932:	897b      	ldrh	r3, [r7, #10]
 8000934:	4413      	add	r3, r2
 8000936:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 800093a:	dc0d      	bgt.n	8000958 <LCD_DrawPixel+0x4c>
		return;
	}
	buf[PPOS(Xpos, Ypos)] = pixel;
 800093c:	893a      	ldrh	r2, [r7, #8]
 800093e:	4613      	mov	r3, r2
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	4413      	add	r3, r2
 8000944:	019b      	lsls	r3, r3, #6
 8000946:	461a      	mov	r2, r3
 8000948:	897b      	ldrh	r3, [r7, #10]
 800094a:	4413      	add	r3, r2
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	68fa      	ldr	r2, [r7, #12]
 8000950:	4413      	add	r3, r2
 8000952:	88fa      	ldrh	r2, [r7, #6]
 8000954:	801a      	strh	r2, [r3, #0]
 8000956:	e000      	b.n	800095a <LCD_DrawPixel+0x4e>
		return;
 8000958:	bf00      	nop
}
 800095a:	3714      	adds	r7, #20
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <LCD_Clear>:
/**
 * @brief  Clears the whole LCD.
 * @param  Color: the color of the background
 * @retval None
 */
void LCD_Clear(uint16_t *buf, uint16_t color) {
 8000964:	b590      	push	{r4, r7, lr}
 8000966:	b085      	sub	sp, #20
 8000968:	af02      	add	r7, sp, #8
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	460b      	mov	r3, r1
 800096e:	807b      	strh	r3, [r7, #2]
	FillBuffer((uint32_t*) buf, LCD_GetXSize(), LCD_GetYSize(), 0, color);
 8000970:	f7ff ffaa 	bl	80008c8 <LCD_GetXSize>
 8000974:	4603      	mov	r3, r0
 8000976:	461c      	mov	r4, r3
 8000978:	f7ff ffaf 	bl	80008da <LCD_GetYSize>
 800097c:	4603      	mov	r3, r0
 800097e:	461a      	mov	r2, r3
 8000980:	887b      	ldrh	r3, [r7, #2]
 8000982:	9300      	str	r3, [sp, #0]
 8000984:	2300      	movs	r3, #0
 8000986:	4621      	mov	r1, r4
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f000 fb9f 	bl	80010cc <FillBuffer>
}
 800098e:	bf00      	nop
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	bd90      	pop	{r4, r7, pc}
	...

08000998 <LCD_DisplayStringAt>:
 *                @arg RIGHT_MODE
 *                @arg LEFT_MODE
 * @retval None
 */
void LCD_DisplayStringAt(uint16_t *buf, uint16_t X, uint16_t Y, uint8_t *pText,
		Text_AlignModeTypdef mode) {
 8000998:	b590      	push	{r4, r7, lr}
 800099a:	b08b      	sub	sp, #44	; 0x2c
 800099c:	af00      	add	r7, sp, #0
 800099e:	60f8      	str	r0, [r7, #12]
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	460b      	mov	r3, r1
 80009a4:	817b      	strh	r3, [r7, #10]
 80009a6:	4613      	mov	r3, r2
 80009a8:	813b      	strh	r3, [r7, #8]
	uint16_t refcolumn = 1, i = 0;
 80009aa:	2301      	movs	r3, #1
 80009ac:	84fb      	strh	r3, [r7, #38]	; 0x26
 80009ae:	2300      	movs	r3, #0
 80009b0:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint32_t size = 0, xsize = 0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	623b      	str	r3, [r7, #32]
 80009b6:	2300      	movs	r3, #0
 80009b8:	61bb      	str	r3, [r7, #24]
	uint32_t mod_size = 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	617b      	str	r3, [r7, #20]
	uint8_t *ptr = pText;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	61fb      	str	r3, [r7, #28]
	uint32_t font_width = font->Width * font_scale;
 80009c2:	4b44      	ldr	r3, [pc, #272]	; (8000ad4 <LCD_DisplayStringAt+0x13c>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	889b      	ldrh	r3, [r3, #4]
 80009c8:	461a      	mov	r2, r3
 80009ca:	4b43      	ldr	r3, [pc, #268]	; (8000ad8 <LCD_DisplayStringAt+0x140>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	fb02 f303 	mul.w	r3, r2, r3
 80009d2:	613b      	str	r3, [r7, #16]

	/* Get the text size */
	while (*ptr++)
 80009d4:	e002      	b.n	80009dc <LCD_DisplayStringAt+0x44>
		size++;
 80009d6:	6a3b      	ldr	r3, [r7, #32]
 80009d8:	3301      	adds	r3, #1
 80009da:	623b      	str	r3, [r7, #32]
	while (*ptr++)
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	1c5a      	adds	r2, r3, #1
 80009e0:	61fa      	str	r2, [r7, #28]
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d1f6      	bne.n	80009d6 <LCD_DisplayStringAt+0x3e>

	/* Characters number per line */
	xsize = (LCD_GetXSize() / font_width);
 80009e8:	f7ff ff6e 	bl	80008c8 <LCD_GetXSize>
 80009ec:	4603      	mov	r3, r0
 80009ee:	461a      	mov	r2, r3
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009f6:	61bb      	str	r3, [r7, #24]
	mod_size = LCD_GetXSize() % font_width;
 80009f8:	f7ff ff66 	bl	80008c8 <LCD_GetXSize>
 80009fc:	4603      	mov	r3, r0
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	fbb3 f2f2 	udiv	r2, r3, r2
 8000a04:	6939      	ldr	r1, [r7, #16]
 8000a06:	fb01 f202 	mul.w	r2, r1, r2
 8000a0a:	1a9b      	subs	r3, r3, r2
 8000a0c:	617b      	str	r3, [r7, #20]

	switch (mode) {
 8000a0e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000a12:	2b03      	cmp	r3, #3
 8000a14:	d014      	beq.n	8000a40 <LCD_DisplayStringAt+0xa8>
 8000a16:	2b03      	cmp	r3, #3
 8000a18:	dc26      	bgt.n	8000a68 <LCD_DisplayStringAt+0xd0>
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d002      	beq.n	8000a24 <LCD_DisplayStringAt+0x8c>
 8000a1e:	2b02      	cmp	r3, #2
 8000a20:	d011      	beq.n	8000a46 <LCD_DisplayStringAt+0xae>
 8000a22:	e021      	b.n	8000a68 <LCD_DisplayStringAt+0xd0>
	case CENTER_MODE: {
		refcolumn = X + ((xsize - size) * font_width + mod_size) / 2;
 8000a24:	69ba      	ldr	r2, [r7, #24]
 8000a26:	6a3b      	ldr	r3, [r7, #32]
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	fb03 f202 	mul.w	r2, r3, r2
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	4413      	add	r3, r2
 8000a34:	085b      	lsrs	r3, r3, #1
 8000a36:	b29a      	uxth	r2, r3
 8000a38:	897b      	ldrh	r3, [r7, #10]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	84fb      	strh	r3, [r7, #38]	; 0x26
		break;
 8000a3e:	e016      	b.n	8000a6e <LCD_DisplayStringAt+0xd6>
	}
	case LEFT_MODE: {
		refcolumn = X;
 8000a40:	897b      	ldrh	r3, [r7, #10]
 8000a42:	84fb      	strh	r3, [r7, #38]	; 0x26
		break;
 8000a44:	e013      	b.n	8000a6e <LCD_DisplayStringAt+0xd6>
	}
	case RIGHT_MODE: {
		refcolumn = X + ((xsize - size) * font_width) + mod_size;
 8000a46:	69ba      	ldr	r2, [r7, #24]
 8000a48:	6a3b      	ldr	r3, [r7, #32]
 8000a4a:	1ad3      	subs	r3, r2, r3
 8000a4c:	b29a      	uxth	r2, r3
 8000a4e:	693b      	ldr	r3, [r7, #16]
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	fb12 f303 	smulbb	r3, r2, r3
 8000a56:	b29a      	uxth	r2, r3
 8000a58:	897b      	ldrh	r3, [r7, #10]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	b29a      	uxth	r2, r3
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	b29b      	uxth	r3, r3
 8000a62:	4413      	add	r3, r2
 8000a64:	84fb      	strh	r3, [r7, #38]	; 0x26
		break;
 8000a66:	e002      	b.n	8000a6e <LCD_DisplayStringAt+0xd6>
	}
	default: {
		refcolumn = X;
 8000a68:	897b      	ldrh	r3, [r7, #10]
 8000a6a:	84fb      	strh	r3, [r7, #38]	; 0x26
		break;
 8000a6c:	bf00      	nop
	}
	}

	/* Send the string character by character on LCD */
	while ((*pText != 0)
 8000a6e:	e011      	b.n	8000a94 <LCD_DisplayStringAt+0xfc>
			& (((LCD_GetXSize() - (i * font_width)) & 0xFFFF) >= font_width)) {
		/* Display one character on LCD */
		LCD_DisplayChar(buf, refcolumn, Y, *pText);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	893a      	ldrh	r2, [r7, #8]
 8000a76:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8000a78:	68f8      	ldr	r0, [r7, #12]
 8000a7a:	f000 f82f 	bl	8000adc <LCD_DisplayChar>
		/* Decrement the column position by 16 */
		refcolumn += font_width;
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	b29a      	uxth	r2, r3
 8000a82:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a84:	4413      	add	r3, r2
 8000a86:	84fb      	strh	r3, [r7, #38]	; 0x26
		/* Point on the next character */
		pText++;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	607b      	str	r3, [r7, #4]
		i++;
 8000a8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000a90:	3301      	adds	r3, #1
 8000a92:	84bb      	strh	r3, [r7, #36]	; 0x24
	while ((*pText != 0)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	781b      	ldrb	r3, [r3, #0]
			& (((LCD_GetXSize() - (i * font_width)) & 0xFFFF) >= font_width)) {
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	bf14      	ite	ne
 8000a9c:	2301      	movne	r3, #1
 8000a9e:	2300      	moveq	r3, #0
 8000aa0:	b2dc      	uxtb	r4, r3
 8000aa2:	f7ff ff11 	bl	80008c8 <LCD_GetXSize>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	fb02 f303 	mul.w	r3, r2, r3
 8000ab2:	1acb      	subs	r3, r1, r3
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	bf94      	ite	ls
 8000abc:	2301      	movls	r3, #1
 8000abe:	2300      	movhi	r3, #0
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	4023      	ands	r3, r4
 8000ac4:	b2db      	uxtb	r3, r3
	while ((*pText != 0)
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d1d2      	bne.n	8000a70 <LCD_DisplayStringAt+0xd8>
	}
}
 8000aca:	bf00      	nop
 8000acc:	bf00      	nop
 8000ace:	372c      	adds	r7, #44	; 0x2c
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd90      	pop	{r4, r7, pc}
 8000ad4:	20000020 	.word	0x20000020
 8000ad8:	20000026 	.word	0x20000026

08000adc <LCD_DisplayChar>:
 * @param  Xpos: start column address
 * @param  Ypos: the Line where to display the character shape
 * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
 * @retval None
 */
void LCD_DisplayChar(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint8_t Ascii) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af02      	add	r7, sp, #8
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	4608      	mov	r0, r1
 8000ae6:	4611      	mov	r1, r2
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4603      	mov	r3, r0
 8000aec:	817b      	strh	r3, [r7, #10]
 8000aee:	460b      	mov	r3, r1
 8000af0:	813b      	strh	r3, [r7, #8]
 8000af2:	4613      	mov	r3, r2
 8000af4:	71fb      	strb	r3, [r7, #7]
	DrawChar(buf, Xpos, Ypos,
			&font->table[(Ascii - ' ') * font->Height * ((font->Width + 7) / 8)],
 8000af6:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <LCD_DisplayChar+0x60>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	3b20      	subs	r3, #32
 8000b00:	490e      	ldr	r1, [pc, #56]	; (8000b3c <LCD_DisplayChar+0x60>)
 8000b02:	6809      	ldr	r1, [r1, #0]
 8000b04:	88c9      	ldrh	r1, [r1, #6]
 8000b06:	fb03 f101 	mul.w	r1, r3, r1
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <LCD_DisplayChar+0x60>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	889b      	ldrh	r3, [r3, #4]
 8000b10:	3307      	adds	r3, #7
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	da00      	bge.n	8000b18 <LCD_DisplayChar+0x3c>
 8000b16:	3307      	adds	r3, #7
 8000b18:	10db      	asrs	r3, r3, #3
 8000b1a:	fb01 f303 	mul.w	r3, r1, r3
	DrawChar(buf, Xpos, Ypos,
 8000b1e:	18d0      	adds	r0, r2, r3
 8000b20:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <LCD_DisplayChar+0x64>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	893a      	ldrh	r2, [r7, #8]
 8000b26:	8979      	ldrh	r1, [r7, #10]
 8000b28:	9300      	str	r3, [sp, #0]
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	68f8      	ldr	r0, [r7, #12]
 8000b2e:	f000 fa0b 	bl	8000f48 <DrawChar>
			font_scale);
}
 8000b32:	bf00      	nop
 8000b34:	3710      	adds	r7, #16
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000020 	.word	0x20000020
 8000b40:	20000026 	.word	0x20000026

08000b44 <LCD_DrawHLine>:
 * @param  Ypos: the Y position
 * @param  Length: line length
 * @retval None
 */
void LCD_DrawHLine(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint16_t Length,
		uint16_t color) {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b088      	sub	sp, #32
 8000b48:	af02      	add	r7, sp, #8
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	4608      	mov	r0, r1
 8000b4e:	4611      	mov	r1, r2
 8000b50:	461a      	mov	r2, r3
 8000b52:	4603      	mov	r3, r0
 8000b54:	817b      	strh	r3, [r7, #10]
 8000b56:	460b      	mov	r3, r1
 8000b58:	813b      	strh	r3, [r7, #8]
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	80fb      	strh	r3, [r7, #6]
	uint16_t *xaddress = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	617b      	str	r3, [r7, #20]

	/* Get the line address */
	xaddress = (buf) + (LCD_GetXSize() * Ypos + Xpos);
 8000b62:	f7ff feb1 	bl	80008c8 <LCD_GetXSize>
 8000b66:	4603      	mov	r3, r0
 8000b68:	461a      	mov	r2, r3
 8000b6a:	893b      	ldrh	r3, [r7, #8]
 8000b6c:	fb03 f202 	mul.w	r2, r3, r2
 8000b70:	897b      	ldrh	r3, [r7, #10]
 8000b72:	4413      	add	r3, r2
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	68fa      	ldr	r2, [r7, #12]
 8000b78:	4413      	add	r3, r2
 8000b7a:	617b      	str	r3, [r7, #20]

	/* Write line */
	FillBuffer((uint32_t*) xaddress, Length, 1, 0, color);
 8000b7c:	88f9      	ldrh	r1, [r7, #6]
 8000b7e:	8c3b      	ldrh	r3, [r7, #32]
 8000b80:	9300      	str	r3, [sp, #0]
 8000b82:	2300      	movs	r3, #0
 8000b84:	2201      	movs	r2, #1
 8000b86:	6978      	ldr	r0, [r7, #20]
 8000b88:	f000 faa0 	bl	80010cc <FillBuffer>
}
 8000b8c:	bf00      	nop
 8000b8e:	3718      	adds	r7, #24
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <LCD_DrawVLine>:
 * @param  Ypos: the Y position
 * @param  Length: line length
 * @retval None
 */
void LCD_DrawVLine(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint16_t Length,
		uint16_t color) {
 8000b94:	b590      	push	{r4, r7, lr}
 8000b96:	b089      	sub	sp, #36	; 0x24
 8000b98:	af02      	add	r7, sp, #8
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	4608      	mov	r0, r1
 8000b9e:	4611      	mov	r1, r2
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	817b      	strh	r3, [r7, #10]
 8000ba6:	460b      	mov	r3, r1
 8000ba8:	813b      	strh	r3, [r7, #8]
 8000baa:	4613      	mov	r3, r2
 8000bac:	80fb      	strh	r3, [r7, #6]
	uint16_t *xaddress = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	617b      	str	r3, [r7, #20]

	/* Get the line address */
	xaddress = (buf) + (LCD_GetXSize() * Ypos + Xpos);
 8000bb2:	f7ff fe89 	bl	80008c8 <LCD_GetXSize>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	461a      	mov	r2, r3
 8000bba:	893b      	ldrh	r3, [r7, #8]
 8000bbc:	fb03 f202 	mul.w	r2, r3, r2
 8000bc0:	897b      	ldrh	r3, [r7, #10]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	4413      	add	r3, r2
 8000bca:	617b      	str	r3, [r7, #20]

	/* Write line */
	FillBuffer((uint32_t*) xaddress, 1, Length, (LCD_GetXSize() - 1), color);
 8000bcc:	88fc      	ldrh	r4, [r7, #6]
 8000bce:	f7ff fe7b 	bl	80008c8 <LCD_GetXSize>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000bda:	9300      	str	r3, [sp, #0]
 8000bdc:	4613      	mov	r3, r2
 8000bde:	4622      	mov	r2, r4
 8000be0:	2101      	movs	r1, #1
 8000be2:	6978      	ldr	r0, [r7, #20]
 8000be4:	f000 fa72 	bl	80010cc <FillBuffer>
}
 8000be8:	bf00      	nop
 8000bea:	371c      	adds	r7, #28
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd90      	pop	{r4, r7, pc}

08000bf0 <LCD_DrawRect>:
 * @param  Height: display rectangle height
 * @param  Width: display rectangle width
 * @retval None
 */
void LCD_DrawRect(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint16_t Width,
		uint16_t Height, uint16_t color) {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af02      	add	r7, sp, #8
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	4608      	mov	r0, r1
 8000bfa:	4611      	mov	r1, r2
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4603      	mov	r3, r0
 8000c00:	817b      	strh	r3, [r7, #10]
 8000c02:	460b      	mov	r3, r1
 8000c04:	813b      	strh	r3, [r7, #8]
 8000c06:	4613      	mov	r3, r2
 8000c08:	80fb      	strh	r3, [r7, #6]
	/* Draw horizontal lines */
	LCD_DrawHLine(buf, Xpos, Ypos, Width, color);
 8000c0a:	88f8      	ldrh	r0, [r7, #6]
 8000c0c:	893a      	ldrh	r2, [r7, #8]
 8000c0e:	8979      	ldrh	r1, [r7, #10]
 8000c10:	8bbb      	ldrh	r3, [r7, #28]
 8000c12:	9300      	str	r3, [sp, #0]
 8000c14:	4603      	mov	r3, r0
 8000c16:	68f8      	ldr	r0, [r7, #12]
 8000c18:	f7ff ff94 	bl	8000b44 <LCD_DrawHLine>
	LCD_DrawHLine(buf, Xpos, (Ypos + Height), Width, color);
 8000c1c:	893a      	ldrh	r2, [r7, #8]
 8000c1e:	8b3b      	ldrh	r3, [r7, #24]
 8000c20:	4413      	add	r3, r2
 8000c22:	b29a      	uxth	r2, r3
 8000c24:	88f8      	ldrh	r0, [r7, #6]
 8000c26:	8979      	ldrh	r1, [r7, #10]
 8000c28:	8bbb      	ldrh	r3, [r7, #28]
 8000c2a:	9300      	str	r3, [sp, #0]
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	68f8      	ldr	r0, [r7, #12]
 8000c30:	f7ff ff88 	bl	8000b44 <LCD_DrawHLine>

	/* Draw vertical lines */
	LCD_DrawVLine(buf, Xpos, Ypos, Height, color);
 8000c34:	8b38      	ldrh	r0, [r7, #24]
 8000c36:	893a      	ldrh	r2, [r7, #8]
 8000c38:	8979      	ldrh	r1, [r7, #10]
 8000c3a:	8bbb      	ldrh	r3, [r7, #28]
 8000c3c:	9300      	str	r3, [sp, #0]
 8000c3e:	4603      	mov	r3, r0
 8000c40:	68f8      	ldr	r0, [r7, #12]
 8000c42:	f7ff ffa7 	bl	8000b94 <LCD_DrawVLine>
	LCD_DrawVLine(buf, (Xpos + Width), Ypos, Height, color);
 8000c46:	897a      	ldrh	r2, [r7, #10]
 8000c48:	88fb      	ldrh	r3, [r7, #6]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	b299      	uxth	r1, r3
 8000c4e:	8b38      	ldrh	r0, [r7, #24]
 8000c50:	893a      	ldrh	r2, [r7, #8]
 8000c52:	8bbb      	ldrh	r3, [r7, #28]
 8000c54:	9300      	str	r3, [sp, #0]
 8000c56:	4603      	mov	r3, r0
 8000c58:	68f8      	ldr	r0, [r7, #12]
 8000c5a:	f7ff ff9b 	bl	8000b94 <LCD_DrawVLine>
}
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <LCD_DrawCircle>:
 * @param  Ypos: the Y position
 * @param  Radius: the circle radius
 * @retval None
 */
void LCD_DrawCircle(uint16_t *buf, uint16_t Xpos, uint16_t Ypos,
		uint16_t Radius, uint16_t color) {
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b088      	sub	sp, #32
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	60f8      	str	r0, [r7, #12]
 8000c6e:	4608      	mov	r0, r1
 8000c70:	4611      	mov	r1, r2
 8000c72:	461a      	mov	r2, r3
 8000c74:	4603      	mov	r3, r0
 8000c76:	817b      	strh	r3, [r7, #10]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	813b      	strh	r3, [r7, #8]
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	80fb      	strh	r3, [r7, #6]
	int32_t d;/* Decision Variable */
	uint32_t curx;/* Current X Value */
	uint32_t cury;/* Current Y Value */

	d = 3 - (Radius << 1);
 8000c80:	88fb      	ldrh	r3, [r7, #6]
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	f1c3 0303 	rsb	r3, r3, #3
 8000c88:	61fb      	str	r3, [r7, #28]
	curx = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61bb      	str	r3, [r7, #24]
	cury = Radius;
 8000c8e:	88fb      	ldrh	r3, [r7, #6]
 8000c90:	617b      	str	r3, [r7, #20]

	while (curx <= cury) {
 8000c92:	e087      	b.n	8000da4 <LCD_DrawCircle+0x13e>
		LCD_DrawPixel(buf, (Xpos + curx), (Ypos - cury), color);
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	b29a      	uxth	r2, r3
 8000c98:	897b      	ldrh	r3, [r7, #10]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	b299      	uxth	r1, r3
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	893a      	ldrh	r2, [r7, #8]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	b29a      	uxth	r2, r3
 8000ca8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000caa:	68f8      	ldr	r0, [r7, #12]
 8000cac:	f7ff fe2e 	bl	800090c <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos - curx), (Ypos - cury), color);
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	897a      	ldrh	r2, [r7, #10]
 8000cb6:	1ad3      	subs	r3, r2, r3
 8000cb8:	b299      	uxth	r1, r3
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	893a      	ldrh	r2, [r7, #8]
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	b29a      	uxth	r2, r3
 8000cc4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000cc6:	68f8      	ldr	r0, [r7, #12]
 8000cc8:	f7ff fe20 	bl	800090c <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos + cury), (Ypos - curx), color);
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	b29a      	uxth	r2, r3
 8000cd0:	897b      	ldrh	r3, [r7, #10]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	b299      	uxth	r1, r3
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	893a      	ldrh	r2, [r7, #8]
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000ce2:	68f8      	ldr	r0, [r7, #12]
 8000ce4:	f7ff fe12 	bl	800090c <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos - cury), (Ypos - curx), color);
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	897a      	ldrh	r2, [r7, #10]
 8000cee:	1ad3      	subs	r3, r2, r3
 8000cf0:	b299      	uxth	r1, r3
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	893a      	ldrh	r2, [r7, #8]
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	b29a      	uxth	r2, r3
 8000cfc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000cfe:	68f8      	ldr	r0, [r7, #12]
 8000d00:	f7ff fe04 	bl	800090c <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos + curx), (Ypos + cury), color);
 8000d04:	69bb      	ldr	r3, [r7, #24]
 8000d06:	b29a      	uxth	r2, r3
 8000d08:	897b      	ldrh	r3, [r7, #10]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	b299      	uxth	r1, r3
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	b29a      	uxth	r2, r3
 8000d12:	893b      	ldrh	r3, [r7, #8]
 8000d14:	4413      	add	r3, r2
 8000d16:	b29a      	uxth	r2, r3
 8000d18:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d1a:	68f8      	ldr	r0, [r7, #12]
 8000d1c:	f7ff fdf6 	bl	800090c <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos - curx), (Ypos + cury), color);
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	897a      	ldrh	r2, [r7, #10]
 8000d26:	1ad3      	subs	r3, r2, r3
 8000d28:	b299      	uxth	r1, r3
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	b29a      	uxth	r2, r3
 8000d2e:	893b      	ldrh	r3, [r7, #8]
 8000d30:	4413      	add	r3, r2
 8000d32:	b29a      	uxth	r2, r3
 8000d34:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d36:	68f8      	ldr	r0, [r7, #12]
 8000d38:	f7ff fde8 	bl	800090c <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos + cury), (Ypos + curx), color);
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	897b      	ldrh	r3, [r7, #10]
 8000d42:	4413      	add	r3, r2
 8000d44:	b299      	uxth	r1, r3
 8000d46:	69bb      	ldr	r3, [r7, #24]
 8000d48:	b29a      	uxth	r2, r3
 8000d4a:	893b      	ldrh	r3, [r7, #8]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	b29a      	uxth	r2, r3
 8000d50:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d52:	68f8      	ldr	r0, [r7, #12]
 8000d54:	f7ff fdda 	bl	800090c <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos - cury), (Ypos + curx), color);
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	897a      	ldrh	r2, [r7, #10]
 8000d5e:	1ad3      	subs	r3, r2, r3
 8000d60:	b299      	uxth	r1, r3
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	b29a      	uxth	r2, r3
 8000d66:	893b      	ldrh	r3, [r7, #8]
 8000d68:	4413      	add	r3, r2
 8000d6a:	b29a      	uxth	r2, r3
 8000d6c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d6e:	68f8      	ldr	r0, [r7, #12]
 8000d70:	f7ff fdcc 	bl	800090c <LCD_DrawPixel>

		if (d < 0) {
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	da06      	bge.n	8000d88 <LCD_DrawCircle+0x122>
			d += (curx << 2) + 6;
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	009a      	lsls	r2, r3, #2
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	4413      	add	r3, r2
 8000d82:	3306      	adds	r3, #6
 8000d84:	61fb      	str	r3, [r7, #28]
 8000d86:	e00a      	b.n	8000d9e <LCD_DrawCircle+0x138>
		} else {
			d += ((curx - cury) << 2) + 10;
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	009a      	lsls	r2, r3, #2
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	4413      	add	r3, r2
 8000d94:	330a      	adds	r3, #10
 8000d96:	61fb      	str	r3, [r7, #28]
			cury--;
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	617b      	str	r3, [r7, #20]
		}
		curx++;
 8000d9e:	69bb      	ldr	r3, [r7, #24]
 8000da0:	3301      	adds	r3, #1
 8000da2:	61bb      	str	r3, [r7, #24]
	while (curx <= cury) {
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	f67f af73 	bls.w	8000c94 <LCD_DrawCircle+0x2e>
	}
}
 8000dae:	bf00      	nop
 8000db0:	bf00      	nop
 8000db2:	3720      	adds	r7, #32
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <LCD_FillRect>:
 * @param  Height: rectangle height
 * @param  Width: rectangle width
 * @retval None
 */
void LCD_FillRect(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint16_t Width,
		uint16_t Height, uint16_t color) {
 8000db8:	b5b0      	push	{r4, r5, r7, lr}
 8000dba:	b088      	sub	sp, #32
 8000dbc:	af02      	add	r7, sp, #8
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	4608      	mov	r0, r1
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	817b      	strh	r3, [r7, #10]
 8000dca:	460b      	mov	r3, r1
 8000dcc:	813b      	strh	r3, [r7, #8]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	80fb      	strh	r3, [r7, #6]
	uint16_t *xaddress = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	617b      	str	r3, [r7, #20]

	/* Get the rectangle start address */
	xaddress = (buf) + (LCD_GetXSize() * Ypos + Xpos);
 8000dd6:	f7ff fd77 	bl	80008c8 <LCD_GetXSize>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	461a      	mov	r2, r3
 8000dde:	893b      	ldrh	r3, [r7, #8]
 8000de0:	fb03 f202 	mul.w	r2, r3, r2
 8000de4:	897b      	ldrh	r3, [r7, #10]
 8000de6:	4413      	add	r3, r2
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	4413      	add	r3, r2
 8000dee:	617b      	str	r3, [r7, #20]

	/* Fill the rectangle */
	FillBuffer((uint32_t*) xaddress, Width, Height, (LCD_GetXSize() - Width),
 8000df0:	88fc      	ldrh	r4, [r7, #6]
 8000df2:	8d3d      	ldrh	r5, [r7, #40]	; 0x28
 8000df4:	f7ff fd68 	bl	80008c8 <LCD_GetXSize>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	88fb      	ldrh	r3, [r7, #6]
 8000dfe:	1ad3      	subs	r3, r2, r3
 8000e00:	461a      	mov	r2, r3
 8000e02:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000e04:	9300      	str	r3, [sp, #0]
 8000e06:	4613      	mov	r3, r2
 8000e08:	462a      	mov	r2, r5
 8000e0a:	4621      	mov	r1, r4
 8000e0c:	6978      	ldr	r0, [r7, #20]
 8000e0e:	f000 f95d 	bl	80010cc <FillBuffer>
			color);
}
 8000e12:	bf00      	nop
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bdb0      	pop	{r4, r5, r7, pc}

08000e1a <LCD_FillCircle>:
 * @param  Ypos: the Y position
 * @param  Radius: the circle radius
 * @retval None
 */
void LCD_FillCircle(uint16_t *buf, uint16_t Xpos, uint16_t Ypos,
		uint16_t Radius, uint16_t color) {
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b08a      	sub	sp, #40	; 0x28
 8000e1e:	af02      	add	r7, sp, #8
 8000e20:	60f8      	str	r0, [r7, #12]
 8000e22:	4608      	mov	r0, r1
 8000e24:	4611      	mov	r1, r2
 8000e26:	461a      	mov	r2, r3
 8000e28:	4603      	mov	r3, r0
 8000e2a:	817b      	strh	r3, [r7, #10]
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	813b      	strh	r3, [r7, #8]
 8000e30:	4613      	mov	r3, r2
 8000e32:	80fb      	strh	r3, [r7, #6]
	int32_t d; /* Decision Variable */
	uint32_t curx;/* Current X Value */
	uint32_t cury;/* Current Y Value */

	d = 3 - (Radius << 1);
 8000e34:	88fb      	ldrh	r3, [r7, #6]
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	f1c3 0303 	rsb	r3, r3, #3
 8000e3c:	61fb      	str	r3, [r7, #28]

	curx = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61bb      	str	r3, [r7, #24]
	cury = Radius;
 8000e42:	88fb      	ldrh	r3, [r7, #6]
 8000e44:	617b      	str	r3, [r7, #20]

	while (curx <= cury) {
 8000e46:	e06d      	b.n	8000f24 <LCD_FillCircle+0x10a>
		if (cury > 0) {
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d027      	beq.n	8000e9e <LCD_FillCircle+0x84>
			LCD_DrawHLine(buf, Xpos - cury, Ypos + curx, 2 * cury, color);
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	897a      	ldrh	r2, [r7, #10]
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	b299      	uxth	r1, r3
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	b29a      	uxth	r2, r3
 8000e5c:	893b      	ldrh	r3, [r7, #8]
 8000e5e:	4413      	add	r3, r2
 8000e60:	b29a      	uxth	r2, r3
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	b298      	uxth	r0, r3
 8000e6a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000e6c:	9300      	str	r3, [sp, #0]
 8000e6e:	4603      	mov	r3, r0
 8000e70:	68f8      	ldr	r0, [r7, #12]
 8000e72:	f7ff fe67 	bl	8000b44 <LCD_DrawHLine>
			LCD_DrawHLine(buf, Xpos - cury, Ypos - curx, 2 * cury, color);
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	897a      	ldrh	r2, [r7, #10]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	b299      	uxth	r1, r3
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	893a      	ldrh	r2, [r7, #8]
 8000e86:	1ad3      	subs	r3, r2, r3
 8000e88:	b29a      	uxth	r2, r3
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	b298      	uxth	r0, r3
 8000e92:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000e94:	9300      	str	r3, [sp, #0]
 8000e96:	4603      	mov	r3, r0
 8000e98:	68f8      	ldr	r0, [r7, #12]
 8000e9a:	f7ff fe53 	bl	8000b44 <LCD_DrawHLine>
		}

		if (curx > 0) {
 8000e9e:	69bb      	ldr	r3, [r7, #24]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d027      	beq.n	8000ef4 <LCD_FillCircle+0xda>
			LCD_DrawHLine(buf, Xpos - curx, Ypos - cury, 2 * curx, color);
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	897a      	ldrh	r2, [r7, #10]
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	b299      	uxth	r1, r3
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	893a      	ldrh	r2, [r7, #8]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	b298      	uxth	r0, r3
 8000ec0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000ec2:	9300      	str	r3, [sp, #0]
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	68f8      	ldr	r0, [r7, #12]
 8000ec8:	f7ff fe3c 	bl	8000b44 <LCD_DrawHLine>
			LCD_DrawHLine(buf, Xpos - curx, Ypos + cury, 2 * curx, color);
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	897a      	ldrh	r2, [r7, #10]
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	b299      	uxth	r1, r3
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	b29a      	uxth	r2, r3
 8000eda:	893b      	ldrh	r3, [r7, #8]
 8000edc:	4413      	add	r3, r2
 8000ede:	b29a      	uxth	r2, r3
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	b298      	uxth	r0, r3
 8000ee8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000eea:	9300      	str	r3, [sp, #0]
 8000eec:	4603      	mov	r3, r0
 8000eee:	68f8      	ldr	r0, [r7, #12]
 8000ef0:	f7ff fe28 	bl	8000b44 <LCD_DrawHLine>
		}
		if (d < 0) {
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	da06      	bge.n	8000f08 <LCD_FillCircle+0xee>
			d += (curx << 2) + 6;
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	009a      	lsls	r2, r3, #2
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	4413      	add	r3, r2
 8000f02:	3306      	adds	r3, #6
 8000f04:	61fb      	str	r3, [r7, #28]
 8000f06:	e00a      	b.n	8000f1e <LCD_FillCircle+0x104>
		} else {
			d += ((curx - cury) << 2) + 10;
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	009a      	lsls	r2, r3, #2
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	4413      	add	r3, r2
 8000f14:	330a      	adds	r3, #10
 8000f16:	61fb      	str	r3, [r7, #28]
			cury--;
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	617b      	str	r3, [r7, #20]
		}
		curx++;
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	3301      	adds	r3, #1
 8000f22:	61bb      	str	r3, [r7, #24]
	while (curx <= cury) {
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d98d      	bls.n	8000e48 <LCD_FillCircle+0x2e>
	}
	LCD_DrawCircle(buf, Xpos, Ypos, Radius, color);
 8000f2c:	88f8      	ldrh	r0, [r7, #6]
 8000f2e:	893a      	ldrh	r2, [r7, #8]
 8000f30:	8979      	ldrh	r1, [r7, #10]
 8000f32:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	4603      	mov	r3, r0
 8000f38:	68f8      	ldr	r0, [r7, #12]
 8000f3a:	f7ff fe94 	bl	8000c66 <LCD_DrawCircle>
}
 8000f3e:	bf00      	nop
 8000f40:	3720      	adds	r7, #32
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <DrawChar>:
 * @param  Ypos: start column address
 * @param  c: pointer to the character data
 * @retval None
 */
static void DrawChar(uint16_t *buf, uint16_t Xpos, uint16_t Ypos,
		const uint8_t *c, uint8_t scale) {
 8000f48:	b590      	push	{r4, r7, lr}
 8000f4a:	b08d      	sub	sp, #52	; 0x34
 8000f4c:	af02      	add	r7, sp, #8
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	460b      	mov	r3, r1
 8000f54:	817b      	strh	r3, [r7, #10]
 8000f56:	4613      	mov	r3, r2
 8000f58:	813b      	strh	r3, [r7, #8]
	uint32_t i = 0, j = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f5e:	2300      	movs	r3, #0
 8000f60:	623b      	str	r3, [r7, #32]
	uint16_t height, width;
	uint8_t offset;
	uint8_t *pchar;
	uint32_t line = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]

	height = font->Height;
 8000f66:	4b56      	ldr	r3, [pc, #344]	; (80010c0 <DrawChar+0x178>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	88db      	ldrh	r3, [r3, #6]
 8000f6c:	837b      	strh	r3, [r7, #26]
	width = font->Width;
 8000f6e:	4b54      	ldr	r3, [pc, #336]	; (80010c0 <DrawChar+0x178>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	889b      	ldrh	r3, [r3, #4]
 8000f74:	833b      	strh	r3, [r7, #24]

	offset = 8 * ((width + 7) / 8) - width;
 8000f76:	8b3b      	ldrh	r3, [r7, #24]
 8000f78:	3307      	adds	r3, #7
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	da00      	bge.n	8000f80 <DrawChar+0x38>
 8000f7e:	3307      	adds	r3, #7
 8000f80:	10db      	asrs	r3, r3, #3
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	00db      	lsls	r3, r3, #3
 8000f86:	b2da      	uxtb	r2, r3
 8000f88:	8b3b      	ldrh	r3, [r7, #24]
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	75fb      	strb	r3, [r7, #23]

	for (i = 0; i < height; i++) {
 8000f90:	2300      	movs	r3, #0
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
 8000f94:	e08a      	b.n	80010ac <DrawChar+0x164>
		pchar = ((uint8_t*) c + (width + 7) / 8 * i);
 8000f96:	8b3b      	ldrh	r3, [r7, #24]
 8000f98:	3307      	adds	r3, #7
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	da00      	bge.n	8000fa0 <DrawChar+0x58>
 8000f9e:	3307      	adds	r3, #7
 8000fa0:	10db      	asrs	r3, r3, #3
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa6:	fb02 f303 	mul.w	r3, r2, r3
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	4413      	add	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]

		switch (((width + 7) / 8)) {
 8000fb0:	8b3b      	ldrh	r3, [r7, #24]
 8000fb2:	3307      	adds	r3, #7
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	da00      	bge.n	8000fba <DrawChar+0x72>
 8000fb8:	3307      	adds	r3, #7
 8000fba:	10db      	asrs	r3, r3, #3
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d002      	beq.n	8000fc6 <DrawChar+0x7e>
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d004      	beq.n	8000fce <DrawChar+0x86>
 8000fc4:	e00c      	b.n	8000fe0 <DrawChar+0x98>
		case 1:
			line = pchar[0];
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	61fb      	str	r3, [r7, #28]
			break;
 8000fcc:	e016      	b.n	8000ffc <DrawChar+0xb4>

		case 2:
			line = (pchar[0] << 8) | pchar[1];
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	021b      	lsls	r3, r3, #8
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	3201      	adds	r2, #1
 8000fd8:	7812      	ldrb	r2, [r2, #0]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61fb      	str	r3, [r7, #28]
			break;
 8000fde:	e00d      	b.n	8000ffc <DrawChar+0xb4>

		case 3:
		default:
			line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	041a      	lsls	r2, r3, #16
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	021b      	lsls	r3, r3, #8
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	3202      	adds	r2, #2
 8000ff4:	7812      	ldrb	r2, [r2, #0]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61fb      	str	r3, [r7, #28]
			break;
 8000ffa:	bf00      	nop
		}

		for (j = 0; j < width; j++) {
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	623b      	str	r3, [r7, #32]
 8001000:	e047      	b.n	8001092 <DrawChar+0x14a>
			if (line & (1 << (width - j + offset - 1))) {
 8001002:	8b3a      	ldrh	r2, [r7, #24]
 8001004:	6a3b      	ldr	r3, [r7, #32]
 8001006:	1ad2      	subs	r2, r2, r3
 8001008:	7dfb      	ldrb	r3, [r7, #23]
 800100a:	4413      	add	r3, r2
 800100c:	3b01      	subs	r3, #1
 800100e:	2201      	movs	r2, #1
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	461a      	mov	r2, r3
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	4013      	ands	r3, r2
 800101a:	2b00      	cmp	r3, #0
 800101c:	d01b      	beq.n	8001056 <DrawChar+0x10e>
				//LCD_DrawPixel(buf, (Xpos + j), Ypos, font_color);
				LCD_FillRect(buf, (Xpos + j * scale), Ypos, scale, scale,
 800101e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001022:	b29a      	uxth	r2, r3
 8001024:	6a3b      	ldr	r3, [r7, #32]
 8001026:	b29b      	uxth	r3, r3
 8001028:	fb12 f303 	smulbb	r3, r2, r3
 800102c:	b29a      	uxth	r2, r3
 800102e:	897b      	ldrh	r3, [r7, #10]
 8001030:	4413      	add	r3, r2
 8001032:	b299      	uxth	r1, r3
 8001034:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001038:	b29c      	uxth	r4, r3
 800103a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800103e:	b29b      	uxth	r3, r3
 8001040:	4a20      	ldr	r2, [pc, #128]	; (80010c4 <DrawChar+0x17c>)
 8001042:	8812      	ldrh	r2, [r2, #0]
 8001044:	8938      	ldrh	r0, [r7, #8]
 8001046:	9201      	str	r2, [sp, #4]
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	4623      	mov	r3, r4
 800104c:	4602      	mov	r2, r0
 800104e:	68f8      	ldr	r0, [r7, #12]
 8001050:	f7ff feb2 	bl	8000db8 <LCD_FillRect>
 8001054:	e01a      	b.n	800108c <DrawChar+0x144>
						font_color);
			} else {
				//LCD_DrawPixel(buf, (Xpos + j), Ypos, font_bcolor);
				LCD_FillRect(buf, (Xpos + j * scale), Ypos, scale, scale,
 8001056:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800105a:	b29a      	uxth	r2, r3
 800105c:	6a3b      	ldr	r3, [r7, #32]
 800105e:	b29b      	uxth	r3, r3
 8001060:	fb12 f303 	smulbb	r3, r2, r3
 8001064:	b29a      	uxth	r2, r3
 8001066:	897b      	ldrh	r3, [r7, #10]
 8001068:	4413      	add	r3, r2
 800106a:	b299      	uxth	r1, r3
 800106c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001070:	b29c      	uxth	r4, r3
 8001072:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001076:	b29b      	uxth	r3, r3
 8001078:	4a13      	ldr	r2, [pc, #76]	; (80010c8 <DrawChar+0x180>)
 800107a:	8812      	ldrh	r2, [r2, #0]
 800107c:	8938      	ldrh	r0, [r7, #8]
 800107e:	9201      	str	r2, [sp, #4]
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	4623      	mov	r3, r4
 8001084:	4602      	mov	r2, r0
 8001086:	68f8      	ldr	r0, [r7, #12]
 8001088:	f7ff fe96 	bl	8000db8 <LCD_FillRect>
		for (j = 0; j < width; j++) {
 800108c:	6a3b      	ldr	r3, [r7, #32]
 800108e:	3301      	adds	r3, #1
 8001090:	623b      	str	r3, [r7, #32]
 8001092:	8b3b      	ldrh	r3, [r7, #24]
 8001094:	6a3a      	ldr	r2, [r7, #32]
 8001096:	429a      	cmp	r2, r3
 8001098:	d3b3      	bcc.n	8001002 <DrawChar+0xba>
						font_bcolor);
			}
		}
		Ypos = Ypos + scale;
 800109a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800109e:	b29a      	uxth	r2, r3
 80010a0:	893b      	ldrh	r3, [r7, #8]
 80010a2:	4413      	add	r3, r2
 80010a4:	813b      	strh	r3, [r7, #8]
	for (i = 0; i < height; i++) {
 80010a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a8:	3301      	adds	r3, #1
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
 80010ac:	8b7b      	ldrh	r3, [r7, #26]
 80010ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010b0:	429a      	cmp	r2, r3
 80010b2:	f4ff af70 	bcc.w	8000f96 <DrawChar+0x4e>
	}
}
 80010b6:	bf00      	nop
 80010b8:	bf00      	nop
 80010ba:	372c      	adds	r7, #44	; 0x2c
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd90      	pop	{r4, r7, pc}
 80010c0:	20000020 	.word	0x20000020
 80010c4:	20000024 	.word	0x20000024
 80010c8:	200001f4 	.word	0x200001f4

080010cc <FillBuffer>:
 * @param  OffLine: offset
 * @param  ColorIndex: color Index
 * @retval None
 */
static void FillBuffer(void *pDst, uint32_t xSize, uint32_t ySize,
		uint32_t OffLine, uint16_t ColorIndex) {
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
 80010d8:	603b      	str	r3, [r7, #0]

	DMA2D->CR = DMA2D_R2M;
 80010da:	4b16      	ldr	r3, [pc, #88]	; (8001134 <FillBuffer+0x68>)
 80010dc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80010e0:	601a      	str	r2, [r3, #0]
	DMA2D->OCOLR = 0x0000FFFF & ColorIndex;
 80010e2:	4a14      	ldr	r2, [pc, #80]	; (8001134 <FillBuffer+0x68>)
 80010e4:	8b3b      	ldrh	r3, [r7, #24]
 80010e6:	6393      	str	r3, [r2, #56]	; 0x38
	DMA2D->OMAR = (uint32_t) pDst;
 80010e8:	4a12      	ldr	r2, [pc, #72]	; (8001134 <FillBuffer+0x68>)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	63d3      	str	r3, [r2, #60]	; 0x3c
	DMA2D->OOR = OffLine;
 80010ee:	4a11      	ldr	r2, [pc, #68]	; (8001134 <FillBuffer+0x68>)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	6413      	str	r3, [r2, #64]	; 0x40
	DMA2D->OPFCCR = LTDC_PIXEL_FORMAT_RGB565;
 80010f4:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <FillBuffer+0x68>)
 80010f6:	2202      	movs	r2, #2
 80010f8:	635a      	str	r2, [r3, #52]	; 0x34
	DMA2D->NLR = (uint32_t) (xSize << 16) | (uint16_t) ySize;
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	041b      	lsls	r3, r3, #16
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	b292      	uxth	r2, r2
 8001102:	4611      	mov	r1, r2
 8001104:	4a0b      	ldr	r2, [pc, #44]	; (8001134 <FillBuffer+0x68>)
 8001106:	430b      	orrs	r3, r1
 8001108:	6453      	str	r3, [r2, #68]	; 0x44

	DMA2D->CR |= DMA2D_CR_START;
 800110a:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <FillBuffer+0x68>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a09      	ldr	r2, [pc, #36]	; (8001134 <FillBuffer+0x68>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	6013      	str	r3, [r2, #0]

	while (DMA2D->CR & DMA2D_CR_START) {
 8001116:	bf00      	nop
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <FillBuffer+0x68>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1f9      	bne.n	8001118 <FillBuffer+0x4c>

	}
}
 8001124:	bf00      	nop
 8001126:	bf00      	nop
 8001128:	3714      	adds	r7, #20
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	52001000 	.word	0x52001000

08001138 <gw_audio_init>:
Generator gen3;
Noise noise1;

static uint32_t audio_frame = 0;

void gw_audio_init(void) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
	memset(audiobuffer, 0, sizeof(audiobuffer));
 800113e:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8001142:	2100      	movs	r1, #0
 8001144:	4853      	ldr	r0, [pc, #332]	; (8001294 <gw_audio_init+0x15c>)
 8001146:	f010 fe9d 	bl	8011e84 <memset>
	HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t*) audiobuffer,
 800114a:	f44f 6216 	mov.w	r2, #2400	; 0x960
 800114e:	4951      	ldr	r1, [pc, #324]	; (8001294 <gw_audio_init+0x15c>)
 8001150:	4851      	ldr	r0, [pc, #324]	; (8001298 <gw_audio_init+0x160>)
 8001152:	f00e fd27 	bl	800fba4 <HAL_SAI_Transmit_DMA>
	AUDIO_BUFFER_LENGTH);
	int i;
	for (i = 0; i < AUDIO_PROGRAMMABLE_LENGTH; i++) {
 8001156:	2300      	movs	r3, #0
 8001158:	607b      	str	r3, [r7, #4]
 800115a:	e040      	b.n	80011de <gw_audio_init+0xa6>
		(&gen1)->gen_freq[i] = 0;
 800115c:	4a4f      	ldr	r2, [pc, #316]	; (800129c <gw_audio_init+0x164>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4413      	add	r3, r2
 8001162:	2200      	movs	r2, #0
 8001164:	701a      	strb	r2, [r3, #0]
		(&gen1)->gen_duty[i] = PW_HALF;
 8001166:	4a4d      	ldr	r2, [pc, #308]	; (800129c <gw_audio_init+0x164>)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4413      	add	r3, r2
 800116c:	3350      	adds	r3, #80	; 0x50
 800116e:	2201      	movs	r2, #1
 8001170:	701a      	strb	r2, [r3, #0]
		(&gen1)->gen_vol[i] = (uint8_t) 0;
 8001172:	4a4a      	ldr	r2, [pc, #296]	; (800129c <gw_audio_init+0x164>)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4413      	add	r3, r2
 8001178:	3328      	adds	r3, #40	; 0x28
 800117a:	2200      	movs	r2, #0
 800117c:	701a      	strb	r2, [r3, #0]

		(&gen2)->gen_freq[i] = 0;
 800117e:	4a48      	ldr	r2, [pc, #288]	; (80012a0 <gw_audio_init+0x168>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4413      	add	r3, r2
 8001184:	2200      	movs	r2, #0
 8001186:	701a      	strb	r2, [r3, #0]
		(&gen2)->gen_duty[i] = PW_HALF;
 8001188:	4a45      	ldr	r2, [pc, #276]	; (80012a0 <gw_audio_init+0x168>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4413      	add	r3, r2
 800118e:	3350      	adds	r3, #80	; 0x50
 8001190:	2201      	movs	r2, #1
 8001192:	701a      	strb	r2, [r3, #0]
		(&gen2)->gen_vol[i] = (uint8_t) 0;
 8001194:	4a42      	ldr	r2, [pc, #264]	; (80012a0 <gw_audio_init+0x168>)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4413      	add	r3, r2
 800119a:	3328      	adds	r3, #40	; 0x28
 800119c:	2200      	movs	r2, #0
 800119e:	701a      	strb	r2, [r3, #0]

		(&gen3)->gen_freq[i] = 0;
 80011a0:	4a40      	ldr	r2, [pc, #256]	; (80012a4 <gw_audio_init+0x16c>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4413      	add	r3, r2
 80011a6:	2200      	movs	r2, #0
 80011a8:	701a      	strb	r2, [r3, #0]
		(&gen3)->gen_duty[i] = PW_HALF;
 80011aa:	4a3e      	ldr	r2, [pc, #248]	; (80012a4 <gw_audio_init+0x16c>)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4413      	add	r3, r2
 80011b0:	3350      	adds	r3, #80	; 0x50
 80011b2:	2201      	movs	r2, #1
 80011b4:	701a      	strb	r2, [r3, #0]
		(&gen3)->gen_vol[i] = (uint8_t) 0;
 80011b6:	4a3b      	ldr	r2, [pc, #236]	; (80012a4 <gw_audio_init+0x16c>)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4413      	add	r3, r2
 80011bc:	3328      	adds	r3, #40	; 0x28
 80011be:	2200      	movs	r2, #0
 80011c0:	701a      	strb	r2, [r3, #0]

		(&noise1)->noise_freq[i] = 0;
 80011c2:	4a39      	ldr	r2, [pc, #228]	; (80012a8 <gw_audio_init+0x170>)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4413      	add	r3, r2
 80011c8:	2200      	movs	r2, #0
 80011ca:	701a      	strb	r2, [r3, #0]
		(&noise1)->noise_vol[i] = (uint8_t) 0;
 80011cc:	4a36      	ldr	r2, [pc, #216]	; (80012a8 <gw_audio_init+0x170>)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4413      	add	r3, r2
 80011d2:	3328      	adds	r3, #40	; 0x28
 80011d4:	2200      	movs	r2, #0
 80011d6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < AUDIO_PROGRAMMABLE_LENGTH; i++) {
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3301      	adds	r3, #1
 80011dc:	607b      	str	r3, [r7, #4]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b27      	cmp	r3, #39	; 0x27
 80011e2:	ddbb      	ble.n	800115c <gw_audio_init+0x24>
	}

	(&gen1)->samples_high = 0;
 80011e4:	4b2d      	ldr	r3, [pc, #180]	; (800129c <gw_audio_init+0x164>)
 80011e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011ea:	2200      	movs	r2, #0
 80011ec:	f8a3 2338 	strh.w	r2, [r3, #824]	; 0x338
	(&gen1)->samples_low = 0;
 80011f0:	4b2a      	ldr	r3, [pc, #168]	; (800129c <gw_audio_init+0x164>)
 80011f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011f6:	2200      	movs	r2, #0
 80011f8:	f8a3 233a 	strh.w	r2, [r3, #826]	; 0x33a
	(&gen1)->samples_high = 0;
 80011fc:	4b27      	ldr	r3, [pc, #156]	; (800129c <gw_audio_init+0x164>)
 80011fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001202:	2200      	movs	r2, #0
 8001204:	f8a3 2338 	strh.w	r2, [r3, #824]	; 0x338
	(&gen1)->samples_low = 0;
 8001208:	4b24      	ldr	r3, [pc, #144]	; (800129c <gw_audio_init+0x164>)
 800120a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800120e:	2200      	movs	r2, #0
 8001210:	f8a3 233a 	strh.w	r2, [r3, #826]	; 0x33a
	(&gen1)->samples_high = 0;
 8001214:	4b21      	ldr	r3, [pc, #132]	; (800129c <gw_audio_init+0x164>)
 8001216:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800121a:	2200      	movs	r2, #0
 800121c:	f8a3 2338 	strh.w	r2, [r3, #824]	; 0x338
	(&gen1)->samples_low = 0;
 8001220:	4b1e      	ldr	r3, [pc, #120]	; (800129c <gw_audio_init+0x164>)
 8001222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001226:	2200      	movs	r2, #0
 8001228:	f8a3 233a 	strh.w	r2, [r3, #826]	; 0x33a
	(&noise1)->LFSR = 1;
 800122c:	4b1e      	ldr	r3, [pc, #120]	; (80012a8 <gw_audio_init+0x170>)
 800122e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001232:	2201      	movs	r2, #1
 8001234:	f8a3 2310 	strh.w	r2, [r3, #784]	; 0x310
	(&noise1)->last = 0;
 8001238:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <gw_audio_init+0x170>)
 800123a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800123e:	2200      	movs	r2, #0
 8001240:	f8a3 2312 	strh.w	r2, [r3, #786]	; 0x312

	for (i = 0; i < AUDIO_BUFFER_LENGTH; i++) {
 8001244:	2300      	movs	r3, #0
 8001246:	607b      	str	r3, [r7, #4]
 8001248:	e01a      	b.n	8001280 <gw_audio_init+0x148>
		(&gen1)->audiobuffer[i] = 0;
 800124a:	4a14      	ldr	r2, [pc, #80]	; (800129c <gw_audio_init+0x164>)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	333c      	adds	r3, #60	; 0x3c
 8001250:	2100      	movs	r1, #0
 8001252:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		(&gen2)->audiobuffer[i] = 0;
 8001256:	4a12      	ldr	r2, [pc, #72]	; (80012a0 <gw_audio_init+0x168>)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	333c      	adds	r3, #60	; 0x3c
 800125c:	2100      	movs	r1, #0
 800125e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		(&gen3)->audiobuffer[i] = 0;
 8001262:	4a10      	ldr	r2, [pc, #64]	; (80012a4 <gw_audio_init+0x16c>)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	333c      	adds	r3, #60	; 0x3c
 8001268:	2100      	movs	r1, #0
 800126a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		(&noise1)->audiobuffer[i] = 0;
 800126e:	4a0e      	ldr	r2, [pc, #56]	; (80012a8 <gw_audio_init+0x170>)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3328      	adds	r3, #40	; 0x28
 8001274:	2100      	movs	r1, #0
 8001276:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i = 0; i < AUDIO_BUFFER_LENGTH; i++) {
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	3301      	adds	r3, #1
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8001286:	dbe0      	blt.n	800124a <gw_audio_init+0x112>
	}
}
 8001288:	bf00      	nop
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	30000000 	.word	0x30000000
 8001298:	20000430 	.word	0x20000430
 800129c:	300012c0 	.word	0x300012c0
 80012a0:	30002600 	.word	0x30002600
 80012a4:	30003940 	.word	0x30003940
 80012a8:	30004c80 	.word	0x30004c80

080012ac <HAL_SAI_TxHalfCpltCallback>:

void gw_audio_resume(void) {
	HAL_SAI_DMAResume(&hsai_BlockA1);
}

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	move_generator(&gen1);
 80012b4:	4829      	ldr	r0, [pc, #164]	; (800135c <HAL_SAI_TxHalfCpltCallback+0xb0>)
 80012b6:	f000 f96f 	bl	8001598 <move_generator>
	play_generator(&gen1, 0, AUDIO_BUFFER_LENGTH / 2);
 80012ba:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80012be:	2100      	movs	r1, #0
 80012c0:	4826      	ldr	r0, [pc, #152]	; (800135c <HAL_SAI_TxHalfCpltCallback+0xb0>)
 80012c2:	f000 f8b7 	bl	8001434 <play_generator>
	move_generator(&gen2);
 80012c6:	4826      	ldr	r0, [pc, #152]	; (8001360 <HAL_SAI_TxHalfCpltCallback+0xb4>)
 80012c8:	f000 f966 	bl	8001598 <move_generator>
	play_generator(&gen2, 0, AUDIO_BUFFER_LENGTH / 2);
 80012cc:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80012d0:	2100      	movs	r1, #0
 80012d2:	4823      	ldr	r0, [pc, #140]	; (8001360 <HAL_SAI_TxHalfCpltCallback+0xb4>)
 80012d4:	f000 f8ae 	bl	8001434 <play_generator>
	move_generator(&gen3);
 80012d8:	4822      	ldr	r0, [pc, #136]	; (8001364 <HAL_SAI_TxHalfCpltCallback+0xb8>)
 80012da:	f000 f95d 	bl	8001598 <move_generator>
	play_generator(&gen3, 0, AUDIO_BUFFER_LENGTH / 2);
 80012de:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80012e2:	2100      	movs	r1, #0
 80012e4:	481f      	ldr	r0, [pc, #124]	; (8001364 <HAL_SAI_TxHalfCpltCallback+0xb8>)
 80012e6:	f000 f8a5 	bl	8001434 <play_generator>
	move_noise(&noise1);
 80012ea:	481f      	ldr	r0, [pc, #124]	; (8001368 <HAL_SAI_TxHalfCpltCallback+0xbc>)
 80012ec:	f000 fa51 	bl	8001792 <move_noise>
	play_noise(&noise1, 0, AUDIO_BUFFER_LENGTH / 2);
 80012f0:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80012f4:	2100      	movs	r1, #0
 80012f6:	481c      	ldr	r0, [pc, #112]	; (8001368 <HAL_SAI_TxHalfCpltCallback+0xbc>)
 80012f8:	f000 f9b9 	bl	800166e <play_noise>
	int i;
	for (i = 0; i < AUDIO_BUFFER_LENGTH / 2; i++) {
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	e022      	b.n	8001348 <HAL_SAI_TxHalfCpltCallback+0x9c>
		audiobuffer[i] = 4
				* (gen1.audiobuffer[i] + gen2.audiobuffer[i]
 8001302:	4a16      	ldr	r2, [pc, #88]	; (800135c <HAL_SAI_TxHalfCpltCallback+0xb0>)
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	333c      	adds	r3, #60	; 0x3c
 8001308:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800130c:	4619      	mov	r1, r3
 800130e:	4a14      	ldr	r2, [pc, #80]	; (8001360 <HAL_SAI_TxHalfCpltCallback+0xb4>)
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	333c      	adds	r3, #60	; 0x3c
 8001314:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001318:	440b      	add	r3, r1
						+ gen3.audiobuffer[i] + noise1.audiobuffer[i]);
 800131a:	4912      	ldr	r1, [pc, #72]	; (8001364 <HAL_SAI_TxHalfCpltCallback+0xb8>)
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	323c      	adds	r2, #60	; 0x3c
 8001320:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8001324:	4413      	add	r3, r2
 8001326:	4910      	ldr	r1, [pc, #64]	; (8001368 <HAL_SAI_TxHalfCpltCallback+0xbc>)
 8001328:	68fa      	ldr	r2, [r7, #12]
 800132a:	3228      	adds	r2, #40	; 0x28
 800132c:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8001330:	4413      	add	r3, r2
		audiobuffer[i] = 4
 8001332:	b29b      	uxth	r3, r3
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	b29b      	uxth	r3, r3
 8001338:	b219      	sxth	r1, r3
 800133a:	4a0c      	ldr	r2, [pc, #48]	; (800136c <HAL_SAI_TxHalfCpltCallback+0xc0>)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i = 0; i < AUDIO_BUFFER_LENGTH / 2; i++) {
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	3301      	adds	r3, #1
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800134e:	dbd8      	blt.n	8001302 <HAL_SAI_TxHalfCpltCallback+0x56>
	}
}
 8001350:	bf00      	nop
 8001352:	bf00      	nop
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	300012c0 	.word	0x300012c0
 8001360:	30002600 	.word	0x30002600
 8001364:	30003940 	.word	0x30003940
 8001368:	30004c80 	.word	0x30004c80
 800136c:	30000000 	.word	0x30000000

08001370 <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	audio_frame++;
 8001378:	4b28      	ldr	r3, [pc, #160]	; (800141c <HAL_SAI_TxCpltCallback+0xac>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	3301      	adds	r3, #1
 800137e:	4a27      	ldr	r2, [pc, #156]	; (800141c <HAL_SAI_TxCpltCallback+0xac>)
 8001380:	6013      	str	r3, [r2, #0]
	play_generator(&gen1, AUDIO_BUFFER_LENGTH / 2, AUDIO_BUFFER_LENGTH / 2);
 8001382:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001386:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800138a:	4825      	ldr	r0, [pc, #148]	; (8001420 <HAL_SAI_TxCpltCallback+0xb0>)
 800138c:	f000 f852 	bl	8001434 <play_generator>
	play_generator(&gen2, AUDIO_BUFFER_LENGTH / 2, AUDIO_BUFFER_LENGTH / 2);
 8001390:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001394:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8001398:	4822      	ldr	r0, [pc, #136]	; (8001424 <HAL_SAI_TxCpltCallback+0xb4>)
 800139a:	f000 f84b 	bl	8001434 <play_generator>
	play_generator(&gen3, AUDIO_BUFFER_LENGTH / 2, AUDIO_BUFFER_LENGTH / 2);
 800139e:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80013a2:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80013a6:	4820      	ldr	r0, [pc, #128]	; (8001428 <HAL_SAI_TxCpltCallback+0xb8>)
 80013a8:	f000 f844 	bl	8001434 <play_generator>
	play_noise(&noise1, AUDIO_BUFFER_LENGTH / 2, AUDIO_BUFFER_LENGTH / 2);
 80013ac:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80013b0:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80013b4:	481d      	ldr	r0, [pc, #116]	; (800142c <HAL_SAI_TxCpltCallback+0xbc>)
 80013b6:	f000 f95a 	bl	800166e <play_noise>
	int i;
	for (i = AUDIO_BUFFER_LENGTH / 2; i < AUDIO_BUFFER_LENGTH; i++) {
 80013ba:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	e022      	b.n	8001408 <HAL_SAI_TxCpltCallback+0x98>
		audiobuffer[i] = 2
				* (gen1.audiobuffer[i] + gen2.audiobuffer[i]
 80013c2:	4a17      	ldr	r2, [pc, #92]	; (8001420 <HAL_SAI_TxCpltCallback+0xb0>)
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	333c      	adds	r3, #60	; 0x3c
 80013c8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80013cc:	4619      	mov	r1, r3
 80013ce:	4a15      	ldr	r2, [pc, #84]	; (8001424 <HAL_SAI_TxCpltCallback+0xb4>)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	333c      	adds	r3, #60	; 0x3c
 80013d4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80013d8:	440b      	add	r3, r1
						+ gen3.audiobuffer[i] + noise1.audiobuffer[i]);
 80013da:	4913      	ldr	r1, [pc, #76]	; (8001428 <HAL_SAI_TxCpltCallback+0xb8>)
 80013dc:	68fa      	ldr	r2, [r7, #12]
 80013de:	323c      	adds	r2, #60	; 0x3c
 80013e0:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 80013e4:	4413      	add	r3, r2
 80013e6:	4911      	ldr	r1, [pc, #68]	; (800142c <HAL_SAI_TxCpltCallback+0xbc>)
 80013e8:	68fa      	ldr	r2, [r7, #12]
 80013ea:	3228      	adds	r2, #40	; 0x28
 80013ec:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 80013f0:	4413      	add	r3, r2
		audiobuffer[i] = 2
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	b219      	sxth	r1, r3
 80013fa:	4a0d      	ldr	r2, [pc, #52]	; (8001430 <HAL_SAI_TxCpltCallback+0xc0>)
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i = AUDIO_BUFFER_LENGTH / 2; i < AUDIO_BUFFER_LENGTH; i++) {
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	3301      	adds	r3, #1
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 800140e:	dbd8      	blt.n	80013c2 <HAL_SAI_TxCpltCallback+0x52>
	}
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	200001f8 	.word	0x200001f8
 8001420:	300012c0 	.word	0x300012c0
 8001424:	30002600 	.word	0x30002600
 8001428:	30003940 	.word	0x30003940
 800142c:	30004c80 	.word	0x30004c80
 8001430:	30000000 	.word	0x30000000

08001434 <play_generator>:

void play_generator(Generator *gen, int start, int len) {
 8001434:	b480      	push	{r7}
 8001436:	b089      	sub	sp, #36	; 0x24
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
	int i;
	uint8_t freq = (*gen).gen_freq[0];
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	74fb      	strb	r3, [r7, #19]
	if (freq == 0) {
 8001446:	7cfb      	ldrb	r3, [r7, #19]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d112      	bne.n	8001472 <play_generator+0x3e>
		for (i = start; i < start + len; i++) {
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	61fb      	str	r3, [r7, #28]
 8001450:	e008      	b.n	8001464 <play_generator+0x30>
			gen->audiobuffer[i] = 0;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	69fa      	ldr	r2, [r7, #28]
 8001456:	323c      	adds	r2, #60	; 0x3c
 8001458:	2100      	movs	r1, #0
 800145a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (i = start; i < start + len; i++) {
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3301      	adds	r3, #1
 8001462:	61fb      	str	r3, [r7, #28]
 8001464:	68ba      	ldr	r2, [r7, #8]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4413      	add	r3, r2
 800146a:	69fa      	ldr	r2, [r7, #28]
 800146c:	429a      	cmp	r2, r3
 800146e:	dbf0      	blt.n	8001452 <play_generator+0x1e>
		}
		return;
 8001470:	e08d      	b.n	800158e <play_generator+0x15a>
	}
	uint8_t duty = (*gen).gen_duty[0];
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001478:	74bb      	strb	r3, [r7, #18]
	uint16_t samples_high;
	uint16_t samples_low;
	switch (duty) {
 800147a:	7cbb      	ldrb	r3, [r7, #18]
 800147c:	2b02      	cmp	r3, #2
 800147e:	d018      	beq.n	80014b2 <play_generator+0x7e>
 8001480:	2b02      	cmp	r3, #2
 8001482:	dc1f      	bgt.n	80014c4 <play_generator+0x90>
 8001484:	2b00      	cmp	r3, #0
 8001486:	d002      	beq.n	800148e <play_generator+0x5a>
 8001488:	2b01      	cmp	r3, #1
 800148a:	d009      	beq.n	80014a0 <play_generator+0x6c>
 800148c:	e01a      	b.n	80014c4 <play_generator+0x90>
	case PW_SHORT:
		samples_high = 1 * (uint16_t) freq;
 800148e:	7cfb      	ldrb	r3, [r7, #19]
 8001490:	837b      	strh	r3, [r7, #26]
		samples_low = 3 * (uint16_t) freq;
 8001492:	7cfb      	ldrb	r3, [r7, #19]
 8001494:	b29b      	uxth	r3, r3
 8001496:	461a      	mov	r2, r3
 8001498:	0052      	lsls	r2, r2, #1
 800149a:	4413      	add	r3, r2
 800149c:	833b      	strh	r3, [r7, #24]
		break;
 800149e:	e01a      	b.n	80014d6 <play_generator+0xa2>
	case PW_HALF:
		samples_high = 2 * (uint16_t) freq;
 80014a0:	7cfb      	ldrb	r3, [r7, #19]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	837b      	strh	r3, [r7, #26]
		samples_low = 2 * (uint16_t) freq;
 80014a8:	7cfb      	ldrb	r3, [r7, #19]
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	833b      	strh	r3, [r7, #24]
		break;
 80014b0:	e011      	b.n	80014d6 <play_generator+0xa2>
	case PW_LONG:
		samples_high = 3 * (uint16_t) freq;
 80014b2:	7cfb      	ldrb	r3, [r7, #19]
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	461a      	mov	r2, r3
 80014b8:	0052      	lsls	r2, r2, #1
 80014ba:	4413      	add	r3, r2
 80014bc:	837b      	strh	r3, [r7, #26]
		samples_low = 1 * (uint16_t) freq;
 80014be:	7cfb      	ldrb	r3, [r7, #19]
 80014c0:	833b      	strh	r3, [r7, #24]
		break;
 80014c2:	e008      	b.n	80014d6 <play_generator+0xa2>
	default:
		samples_high = 2 * (uint16_t) freq;
 80014c4:	7cfb      	ldrb	r3, [r7, #19]
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	837b      	strh	r3, [r7, #26]
		samples_low = 2 * (uint16_t) freq;
 80014cc:	7cfb      	ldrb	r3, [r7, #19]
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	833b      	strh	r3, [r7, #24]
		break;
 80014d4:	bf00      	nop
	}
	uint8_t vol = (*gen).gen_vol[0];
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80014dc:	747b      	strb	r3, [r7, #17]
	uint16_t counter_high = (*gen).samples_high;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014e4:	f8b3 3338 	ldrh.w	r3, [r3, #824]	; 0x338
 80014e8:	82fb      	strh	r3, [r7, #22]
	uint16_t counter_low = (*gen).samples_low;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014f0:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80014f4:	82bb      	strh	r3, [r7, #20]

	if (counter_high > samples_high) {
 80014f6:	8afa      	ldrh	r2, [r7, #22]
 80014f8:	8b7b      	ldrh	r3, [r7, #26]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d901      	bls.n	8001502 <play_generator+0xce>
		counter_high = samples_high;
 80014fe:	8b7b      	ldrh	r3, [r7, #26]
 8001500:	82fb      	strh	r3, [r7, #22]
	}
	if (counter_low > samples_low) {
 8001502:	8aba      	ldrh	r2, [r7, #20]
 8001504:	8b3b      	ldrh	r3, [r7, #24]
 8001506:	429a      	cmp	r2, r3
 8001508:	d901      	bls.n	800150e <play_generator+0xda>
		counter_low = samples_low;
 800150a:	8b3b      	ldrh	r3, [r7, #24]
 800150c:	82bb      	strh	r3, [r7, #20]
	}

	for (i = start; i < start + len; i++) {
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	61fb      	str	r3, [r7, #28]
 8001512:	e028      	b.n	8001566 <play_generator+0x132>
		if (counter_high > 0) {
 8001514:	8afb      	ldrh	r3, [r7, #22]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d00a      	beq.n	8001530 <play_generator+0xfc>
			gen->audiobuffer[i] = (int16_t) vol;
 800151a:	7c7b      	ldrb	r3, [r7, #17]
 800151c:	b219      	sxth	r1, r3
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	69fa      	ldr	r2, [r7, #28]
 8001522:	323c      	adds	r2, #60	; 0x3c
 8001524:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			counter_high--;
 8001528:	8afb      	ldrh	r3, [r7, #22]
 800152a:	3b01      	subs	r3, #1
 800152c:	82fb      	strh	r3, [r7, #22]
 800152e:	e017      	b.n	8001560 <play_generator+0x12c>
		} else {
			if (counter_low > 0) {
 8001530:	8abb      	ldrh	r3, [r7, #20]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d00d      	beq.n	8001552 <play_generator+0x11e>
				gen->audiobuffer[i] = -(int16_t) vol;
 8001536:	7c7b      	ldrb	r3, [r7, #17]
 8001538:	b29b      	uxth	r3, r3
 800153a:	425b      	negs	r3, r3
 800153c:	b29b      	uxth	r3, r3
 800153e:	b219      	sxth	r1, r3
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	69fa      	ldr	r2, [r7, #28]
 8001544:	323c      	adds	r2, #60	; 0x3c
 8001546:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				counter_low--;
 800154a:	8abb      	ldrh	r3, [r7, #20]
 800154c:	3b01      	subs	r3, #1
 800154e:	82bb      	strh	r3, [r7, #20]
 8001550:	e006      	b.n	8001560 <play_generator+0x12c>
			} else {
				counter_high = samples_high;
 8001552:	8b7b      	ldrh	r3, [r7, #26]
 8001554:	82fb      	strh	r3, [r7, #22]
				counter_low = samples_low;
 8001556:	8b3b      	ldrh	r3, [r7, #24]
 8001558:	82bb      	strh	r3, [r7, #20]
				i--;
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	3b01      	subs	r3, #1
 800155e:	61fb      	str	r3, [r7, #28]
	for (i = start; i < start + len; i++) {
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	3301      	adds	r3, #1
 8001564:	61fb      	str	r3, [r7, #28]
 8001566:	68ba      	ldr	r2, [r7, #8]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4413      	add	r3, r2
 800156c:	69fa      	ldr	r2, [r7, #28]
 800156e:	429a      	cmp	r2, r3
 8001570:	dbd0      	blt.n	8001514 <play_generator+0xe0>
			}
		}
	}
	gen->samples_high = counter_high;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001578:	461a      	mov	r2, r3
 800157a:	8afb      	ldrh	r3, [r7, #22]
 800157c:	f8a2 3338 	strh.w	r3, [r2, #824]	; 0x338
	gen->samples_low = counter_low;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001586:	461a      	mov	r2, r3
 8001588:	8abb      	ldrh	r3, [r7, #20]
 800158a:	f8a2 333a 	strh.w	r3, [r2, #826]	; 0x33a
}
 800158e:	3724      	adds	r7, #36	; 0x24
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <move_generator>:

void move_generator(Generator *gen) {
 8001598:	b480      	push	{r7}
 800159a:	b087      	sub	sp, #28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
	int i, n = AUDIO_PROGRAMMABLE_LENGTH;
 80015a0:	2328      	movs	r3, #40	; 0x28
 80015a2:	613b      	str	r3, [r7, #16]
	uint8_t *a = gen->gen_freq;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	60fb      	str	r3, [r7, #12]
	uint8_t temp = a[0];
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	72fb      	strb	r3, [r7, #11]
	for (i = 0; i < n - 1; i++) {
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
 80015b2:	e00b      	b.n	80015cc <move_generator+0x34>
		a[i] = a[i + 1];
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	3301      	adds	r3, #1
 80015b8:	68fa      	ldr	r2, [r7, #12]
 80015ba:	441a      	add	r2, r3
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	68f9      	ldr	r1, [r7, #12]
 80015c0:	440b      	add	r3, r1
 80015c2:	7812      	ldrb	r2, [r2, #0]
 80015c4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < n - 1; i++) {
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	3301      	adds	r3, #1
 80015ca:	617b      	str	r3, [r7, #20]
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	697a      	ldr	r2, [r7, #20]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	dbee      	blt.n	80015b4 <move_generator+0x1c>
	}
	a[n - 1] = temp;
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	3b01      	subs	r3, #1
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	4413      	add	r3, r2
 80015de:	7afa      	ldrb	r2, [r7, #11]
 80015e0:	701a      	strb	r2, [r3, #0]
	a = gen->gen_vol;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	3328      	adds	r3, #40	; 0x28
 80015e6:	60fb      	str	r3, [r7, #12]
	temp = a[0];
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	72fb      	strb	r3, [r7, #11]
	for (i = 0; i < n - 1; i++) {
 80015ee:	2300      	movs	r3, #0
 80015f0:	617b      	str	r3, [r7, #20]
 80015f2:	e00b      	b.n	800160c <move_generator+0x74>
		a[i] = a[i + 1];
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	3301      	adds	r3, #1
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	441a      	add	r2, r3
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	68f9      	ldr	r1, [r7, #12]
 8001600:	440b      	add	r3, r1
 8001602:	7812      	ldrb	r2, [r2, #0]
 8001604:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < n - 1; i++) {
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	3301      	adds	r3, #1
 800160a:	617b      	str	r3, [r7, #20]
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	3b01      	subs	r3, #1
 8001610:	697a      	ldr	r2, [r7, #20]
 8001612:	429a      	cmp	r2, r3
 8001614:	dbee      	blt.n	80015f4 <move_generator+0x5c>
	}
	a[n - 1] = temp;
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	3b01      	subs	r3, #1
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	4413      	add	r3, r2
 800161e:	7afa      	ldrb	r2, [r7, #11]
 8001620:	701a      	strb	r2, [r3, #0]
	a = gen->gen_duty;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	3350      	adds	r3, #80	; 0x50
 8001626:	60fb      	str	r3, [r7, #12]
	temp = a[0];
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	72fb      	strb	r3, [r7, #11]
	for (i = 0; i < n - 1; i++) {
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]
 8001632:	e00b      	b.n	800164c <move_generator+0xb4>
		a[i] = a[i + 1];
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	3301      	adds	r3, #1
 8001638:	68fa      	ldr	r2, [r7, #12]
 800163a:	441a      	add	r2, r3
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	68f9      	ldr	r1, [r7, #12]
 8001640:	440b      	add	r3, r1
 8001642:	7812      	ldrb	r2, [r2, #0]
 8001644:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < n - 1; i++) {
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	3301      	adds	r3, #1
 800164a:	617b      	str	r3, [r7, #20]
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	3b01      	subs	r3, #1
 8001650:	697a      	ldr	r2, [r7, #20]
 8001652:	429a      	cmp	r2, r3
 8001654:	dbee      	blt.n	8001634 <move_generator+0x9c>
	}
	a[n - 1] = temp;
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	3b01      	subs	r3, #1
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	4413      	add	r3, r2
 800165e:	7afa      	ldrb	r2, [r7, #11]
 8001660:	701a      	strb	r2, [r3, #0]
}
 8001662:	bf00      	nop
 8001664:	371c      	adds	r7, #28
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <play_noise>:

void play_noise(Noise *noise, int start, int len) {
 800166e:	b480      	push	{r7}
 8001670:	b08b      	sub	sp, #44	; 0x2c
 8001672:	af00      	add	r7, sp, #0
 8001674:	60f8      	str	r0, [r7, #12]
 8001676:	60b9      	str	r1, [r7, #8]
 8001678:	607a      	str	r2, [r7, #4]
	int i;
	uint16_t freq = 4 * (uint16_t) (*noise).noise_freq[0];
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	b29b      	uxth	r3, r3
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	837b      	strh	r3, [r7, #26]
	if (freq == 0) {
 8001684:	8b7b      	ldrh	r3, [r7, #26]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d112      	bne.n	80016b0 <play_noise+0x42>
		for (i = start; i < start + len; i++) {
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
 800168e:	e008      	b.n	80016a2 <play_noise+0x34>
			noise->audiobuffer[i] = 0;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001694:	3228      	adds	r2, #40	; 0x28
 8001696:	2100      	movs	r1, #0
 8001698:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (i = start; i < start + len; i++) {
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	3301      	adds	r3, #1
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
 80016a2:	68ba      	ldr	r2, [r7, #8]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4413      	add	r3, r2
 80016a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016aa:	429a      	cmp	r2, r3
 80016ac:	dbf0      	blt.n	8001690 <play_noise+0x22>
		}
		return;
 80016ae:	e06b      	b.n	8001788 <play_noise+0x11a>
	}
	uint8_t vol = (*noise).noise_vol[0];
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80016b6:	767b      	strb	r3, [r7, #25]
	uint16_t LFSR = (*noise).LFSR;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016be:	f8b3 3310 	ldrh.w	r3, [r3, #784]	; 0x310
 80016c2:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t last = (*noise).last;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016ca:	f8b3 3312 	ldrh.w	r3, [r3, #786]	; 0x312
 80016ce:	843b      	strh	r3, [r7, #32]
	int out = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	61fb      	str	r3, [r7, #28]
	if (last > freq) {
 80016d4:	8c3a      	ldrh	r2, [r7, #32]
 80016d6:	8b7b      	ldrh	r3, [r7, #26]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d901      	bls.n	80016e0 <play_noise+0x72>
		last = freq;
 80016dc:	8b7b      	ldrh	r3, [r7, #26]
 80016de:	843b      	strh	r3, [r7, #32]
	}
	for (i = start; i < start + len; i++) {
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24
 80016e4:	e03c      	b.n	8001760 <play_noise+0xf2>
		if (last > 0) {
 80016e6:	8c3b      	ldrh	r3, [r7, #32]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d013      	beq.n	8001714 <play_noise+0xa6>
			noise->audiobuffer[i] =
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d105      	bne.n	80016fe <play_noise+0x90>
 80016f2:	7e7b      	ldrb	r3, [r7, #25]
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	425b      	negs	r3, r3
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	b21b      	sxth	r3, r3
 80016fc:	e001      	b.n	8001702 <play_noise+0x94>
 80016fe:	7e7b      	ldrb	r3, [r7, #25]
 8001700:	b21b      	sxth	r3, r3
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001706:	3128      	adds	r1, #40	; 0x28
 8001708:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
					(out == 1) ? -1 * (int16_t) vol : (int16_t) vol;
			last--;
 800170c:	8c3b      	ldrh	r3, [r7, #32]
 800170e:	3b01      	subs	r3, #1
 8001710:	843b      	strh	r3, [r7, #32]
 8001712:	e022      	b.n	800175a <play_noise+0xec>
		} else {
			last = freq;
 8001714:	8b7b      	ldrh	r3, [r7, #26]
 8001716:	843b      	strh	r3, [r7, #32]
			i--;
 8001718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171a:	3b01      	subs	r3, #1
 800171c:	627b      	str	r3, [r7, #36]	; 0x24
			uint16_t xor_result = (LFSR & 0b01) ^ ((LFSR & 0b10) >> 1);
 800171e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001720:	105b      	asrs	r3, r3, #1
 8001722:	b21a      	sxth	r2, r3
 8001724:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001728:	4053      	eors	r3, r2
 800172a:	b21b      	sxth	r3, r3
 800172c:	b29b      	uxth	r3, r3
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	82fb      	strh	r3, [r7, #22]
			LFSR = (LFSR >> 1) | (xor_result << 14);
 8001734:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001736:	085b      	lsrs	r3, r3, #1
 8001738:	b29b      	uxth	r3, r3
 800173a:	b21a      	sxth	r2, r3
 800173c:	8afb      	ldrh	r3, [r7, #22]
 800173e:	039b      	lsls	r3, r3, #14
 8001740:	b21b      	sxth	r3, r3
 8001742:	4313      	orrs	r3, r2
 8001744:	b21b      	sxth	r3, r3
 8001746:	847b      	strh	r3, [r7, #34]	; 0x22
			out = ~LFSR & 0x01;
 8001748:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	bf0c      	ite	eq
 8001752:	2301      	moveq	r3, #1
 8001754:	2300      	movne	r3, #0
 8001756:	b2db      	uxtb	r3, r3
 8001758:	61fb      	str	r3, [r7, #28]
	for (i = start; i < start + len; i++) {
 800175a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175c:	3301      	adds	r3, #1
 800175e:	627b      	str	r3, [r7, #36]	; 0x24
 8001760:	68ba      	ldr	r2, [r7, #8]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4413      	add	r3, r2
 8001766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001768:	429a      	cmp	r2, r3
 800176a:	dbbc      	blt.n	80016e6 <play_noise+0x78>
		}
	}
	noise->LFSR = LFSR;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001772:	461a      	mov	r2, r3
 8001774:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001776:	f8a2 3310 	strh.w	r3, [r2, #784]	; 0x310
	noise->last = last;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001780:	461a      	mov	r2, r3
 8001782:	8c3b      	ldrh	r3, [r7, #32]
 8001784:	f8a2 3312 	strh.w	r3, [r2, #786]	; 0x312
}
 8001788:	372c      	adds	r7, #44	; 0x2c
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <move_noise>:

void move_noise(Noise *noise) {
 8001792:	b480      	push	{r7}
 8001794:	b087      	sub	sp, #28
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
	int i, n = AUDIO_PROGRAMMABLE_LENGTH;
 800179a:	2328      	movs	r3, #40	; 0x28
 800179c:	613b      	str	r3, [r7, #16]
	uint8_t *a = noise->noise_freq;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	60fb      	str	r3, [r7, #12]
	uint8_t temp = a[0];
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	72fb      	strb	r3, [r7, #11]
	for (i = 0; i < n - 1; i++) {
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	e00b      	b.n	80017c6 <move_noise+0x34>
		a[i] = a[i + 1];
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	3301      	adds	r3, #1
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	441a      	add	r2, r3
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	68f9      	ldr	r1, [r7, #12]
 80017ba:	440b      	add	r3, r1
 80017bc:	7812      	ldrb	r2, [r2, #0]
 80017be:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < n - 1; i++) {
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	3301      	adds	r3, #1
 80017c4:	617b      	str	r3, [r7, #20]
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	3b01      	subs	r3, #1
 80017ca:	697a      	ldr	r2, [r7, #20]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	dbee      	blt.n	80017ae <move_noise+0x1c>
	}
	a[n - 1] = temp;
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	68fa      	ldr	r2, [r7, #12]
 80017d6:	4413      	add	r3, r2
 80017d8:	7afa      	ldrb	r2, [r7, #11]
 80017da:	701a      	strb	r2, [r3, #0]
	a = noise->noise_vol;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3328      	adds	r3, #40	; 0x28
 80017e0:	60fb      	str	r3, [r7, #12]
	temp = a[0];
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	72fb      	strb	r3, [r7, #11]
	for (i = 0; i < n - 1; i++) {
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]
 80017ec:	e00b      	b.n	8001806 <move_noise+0x74>
		a[i] = a[i + 1];
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	3301      	adds	r3, #1
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	441a      	add	r2, r3
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	68f9      	ldr	r1, [r7, #12]
 80017fa:	440b      	add	r3, r1
 80017fc:	7812      	ldrb	r2, [r2, #0]
 80017fe:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < n - 1; i++) {
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	3301      	adds	r3, #1
 8001804:	617b      	str	r3, [r7, #20]
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	3b01      	subs	r3, #1
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	429a      	cmp	r2, r3
 800180e:	dbee      	blt.n	80017ee <move_noise+0x5c>
	}
	a[n - 1] = temp;
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	3b01      	subs	r3, #1
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	4413      	add	r3, r2
 8001818:	7afa      	ldrb	r2, [r7, #11]
 800181a:	701a      	strb	r2, [r3, #0]
}
 800181c:	bf00      	nop
 800181e:	371c      	adds	r7, #28
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <HAL_ADC_ConvCpltCallback>:
		int percent;
		bq24072_state_t state;
	} last;
} bq24072_data;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
	bq24072_data.value = HAL_ADC_GetValue(hadc);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f003 fb2b 	bl	8004e8c <HAL_ADC_GetValue>
 8001836:	4603      	mov	r3, r0
 8001838:	b29a      	uxth	r2, r3
 800183a:	4b04      	ldr	r3, [pc, #16]	; (800184c <HAL_ADC_ConvCpltCallback+0x24>)
 800183c:	801a      	strh	r2, [r3, #0]

	HAL_ADC_Stop_IT(hadc);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f003 fae8 	bl	8004e14 <HAL_ADC_Stop_IT>
}
 8001844:	bf00      	nop
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	200001fc 	.word	0x200001fc

08001850 <bq24072_init>:

int32_t bq24072_init(void) {
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
	// Read initial states
	bq24072_handle_power_good();
 8001854:	f000 f80c 	bl	8001870 <bq24072_handle_power_good>
	bq24072_handle_charging();
 8001858:	f000 f822 	bl	80018a0 <bq24072_handle_charging>
	bq24072_poll();
 800185c:	f000 f838 	bl	80018d0 <bq24072_poll>

	// Start timer for voltage poll
	HAL_TIM_Base_Start_IT(&htim1);
 8001860:	4802      	ldr	r0, [pc, #8]	; (800186c <bq24072_init+0x1c>)
 8001862:	f00f fac1 	bl	8010de8 <HAL_TIM_Base_Start_IT>

	return 0;
 8001866:	2300      	movs	r3, #0
}
 8001868:	4618      	mov	r0, r3
 800186a:	bd80      	pop	{r7, pc}
 800186c:	200005c8 	.word	0x200005c8

08001870 <bq24072_handle_power_good>:

void bq24072_handle_power_good(void) {
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
	bq24072_data.power_good = !(HAL_GPIO_ReadPin(
			bq_pins[BQ24072_PIN_PGOOD].bank, bq_pins[BQ24072_PIN_PGOOD].pin)
 8001874:	4a08      	ldr	r2, [pc, #32]	; (8001898 <bq24072_handle_power_good+0x28>)
 8001876:	2304      	movs	r3, #4
	bq24072_data.power_good = !(HAL_GPIO_ReadPin(
 8001878:	b29b      	uxth	r3, r3
 800187a:	4619      	mov	r1, r3
 800187c:	4610      	mov	r0, r2
 800187e:	f007 ff7f 	bl	8009780 <HAL_GPIO_ReadPin>
 8001882:	4603      	mov	r3, r0
 8001884:	2b01      	cmp	r3, #1
 8001886:	bf14      	ite	ne
 8001888:	2301      	movne	r3, #1
 800188a:	2300      	moveq	r3, #0
 800188c:	b2da      	uxtb	r2, r3
 800188e:	4b03      	ldr	r3, [pc, #12]	; (800189c <bq24072_handle_power_good+0x2c>)
 8001890:	70da      	strb	r2, [r3, #3]
			== GPIO_PIN_SET);
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	58020000 	.word	0x58020000
 800189c:	200001fc 	.word	0x200001fc

080018a0 <bq24072_handle_charging>:

void bq24072_handle_charging(void) {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
	bq24072_data.charging = !(HAL_GPIO_ReadPin(bq_pins[BQ24072_PIN_CHG].bank,
 80018a4:	4a08      	ldr	r2, [pc, #32]	; (80018c8 <bq24072_handle_charging+0x28>)
			bq_pins[BQ24072_PIN_CHG].pin) == GPIO_PIN_SET);
 80018a6:	2380      	movs	r3, #128	; 0x80
	bq24072_data.charging = !(HAL_GPIO_ReadPin(bq_pins[BQ24072_PIN_CHG].bank,
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	4619      	mov	r1, r3
 80018ac:	4610      	mov	r0, r2
 80018ae:	f007 ff67 	bl	8009780 <HAL_GPIO_ReadPin>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	bf14      	ite	ne
 80018b8:	2301      	movne	r3, #1
 80018ba:	2300      	moveq	r3, #0
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	4b03      	ldr	r3, [pc, #12]	; (80018cc <bq24072_handle_charging+0x2c>)
 80018c0:	709a      	strb	r2, [r3, #2]
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	58021000 	.word	0x58021000
 80018cc:	200001fc 	.word	0x200001fc

080018d0 <bq24072_poll>:
	}

	return percent;
}

void bq24072_poll(void) {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
	HAL_ADC_Start_IT(&hadc1);
 80018d4:	4802      	ldr	r0, [pc, #8]	; (80018e0 <bq24072_poll+0x10>)
 80018d6:	f003 f96f 	bl	8004bb8 <HAL_ADC_Start_IT>
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000210 	.word	0x20000210

080018e4 <buttons_get>:
#include "stm32h7xx_hal.h"
#include "main.h"

#include <stdbool.h>

uint32_t buttons_get() {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
    bool left = HAL_GPIO_ReadPin(BTN_Left_GPIO_Port, BTN_Left_Pin) == GPIO_PIN_RESET;
 80018ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018ee:	4843      	ldr	r0, [pc, #268]	; (80019fc <buttons_get+0x118>)
 80018f0:	f007 ff46 	bl	8009780 <HAL_GPIO_ReadPin>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	bf0c      	ite	eq
 80018fa:	2301      	moveq	r3, #1
 80018fc:	2300      	movne	r3, #0
 80018fe:	73fb      	strb	r3, [r7, #15]
    bool right = HAL_GPIO_ReadPin(BTN_Right_GPIO_Port, BTN_Right_Pin) == GPIO_PIN_RESET;
 8001900:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001904:	483d      	ldr	r0, [pc, #244]	; (80019fc <buttons_get+0x118>)
 8001906:	f007 ff3b 	bl	8009780 <HAL_GPIO_ReadPin>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	bf0c      	ite	eq
 8001910:	2301      	moveq	r3, #1
 8001912:	2300      	movne	r3, #0
 8001914:	73bb      	strb	r3, [r7, #14]
    bool up = HAL_GPIO_ReadPin(BTN_Up_GPIO_Port, BTN_Up_Pin) == GPIO_PIN_RESET ;
 8001916:	2101      	movs	r1, #1
 8001918:	4838      	ldr	r0, [pc, #224]	; (80019fc <buttons_get+0x118>)
 800191a:	f007 ff31 	bl	8009780 <HAL_GPIO_ReadPin>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	bf0c      	ite	eq
 8001924:	2301      	moveq	r3, #1
 8001926:	2300      	movne	r3, #0
 8001928:	737b      	strb	r3, [r7, #13]
    bool down = HAL_GPIO_ReadPin(BTN_Down_GPIO_Port, BTN_Down_Pin) == GPIO_PIN_RESET;
 800192a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800192e:	4833      	ldr	r0, [pc, #204]	; (80019fc <buttons_get+0x118>)
 8001930:	f007 ff26 	bl	8009780 <HAL_GPIO_ReadPin>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	bf0c      	ite	eq
 800193a:	2301      	moveq	r3, #1
 800193c:	2300      	movne	r3, #0
 800193e:	733b      	strb	r3, [r7, #12]
    bool a = HAL_GPIO_ReadPin(BTN_A_GPIO_Port, BTN_A_Pin) == GPIO_PIN_RESET;
 8001940:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001944:	482d      	ldr	r0, [pc, #180]	; (80019fc <buttons_get+0x118>)
 8001946:	f007 ff1b 	bl	8009780 <HAL_GPIO_ReadPin>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	bf0c      	ite	eq
 8001950:	2301      	moveq	r3, #1
 8001952:	2300      	movne	r3, #0
 8001954:	72fb      	strb	r3, [r7, #11]
    bool b = HAL_GPIO_ReadPin(BTN_B_GPIO_Port, BTN_B_Pin) == GPIO_PIN_RESET;
 8001956:	2120      	movs	r1, #32
 8001958:	4828      	ldr	r0, [pc, #160]	; (80019fc <buttons_get+0x118>)
 800195a:	f007 ff11 	bl	8009780 <HAL_GPIO_ReadPin>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	bf0c      	ite	eq
 8001964:	2301      	moveq	r3, #1
 8001966:	2300      	movne	r3, #0
 8001968:	72bb      	strb	r3, [r7, #10]
    bool time = HAL_GPIO_ReadPin(BTN_TIME_GPIO_Port, BTN_TIME_Pin) == GPIO_PIN_RESET;
 800196a:	2120      	movs	r1, #32
 800196c:	4824      	ldr	r0, [pc, #144]	; (8001a00 <buttons_get+0x11c>)
 800196e:	f007 ff07 	bl	8009780 <HAL_GPIO_ReadPin>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	bf0c      	ite	eq
 8001978:	2301      	moveq	r3, #1
 800197a:	2300      	movne	r3, #0
 800197c:	727b      	strb	r3, [r7, #9]
    bool game = HAL_GPIO_ReadPin(BTN_GAME_GPIO_Port, BTN_GAME_Pin) == GPIO_PIN_RESET;
 800197e:	2102      	movs	r1, #2
 8001980:	481f      	ldr	r0, [pc, #124]	; (8001a00 <buttons_get+0x11c>)
 8001982:	f007 fefd 	bl	8009780 <HAL_GPIO_ReadPin>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	bf0c      	ite	eq
 800198c:	2301      	moveq	r3, #1
 800198e:	2300      	movne	r3, #0
 8001990:	723b      	strb	r3, [r7, #8]
    bool pause = HAL_GPIO_ReadPin(BTN_PAUSE_GPIO_Port, BTN_PAUSE_Pin) == GPIO_PIN_RESET;
 8001992:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001996:	481a      	ldr	r0, [pc, #104]	; (8001a00 <buttons_get+0x11c>)
 8001998:	f007 fef2 	bl	8009780 <HAL_GPIO_ReadPin>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	bf0c      	ite	eq
 80019a2:	2301      	moveq	r3, #1
 80019a4:	2300      	movne	r3, #0
 80019a6:	71fb      	strb	r3, [r7, #7]
    bool power = HAL_GPIO_ReadPin(BTN_PWR_GPIO_Port, BTN_PWR_Pin) == GPIO_PIN_RESET;
 80019a8:	2101      	movs	r1, #1
 80019aa:	4816      	ldr	r0, [pc, #88]	; (8001a04 <buttons_get+0x120>)
 80019ac:	f007 fee8 	bl	8009780 <HAL_GPIO_ReadPin>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	bf0c      	ite	eq
 80019b6:	2301      	moveq	r3, #1
 80019b8:	2300      	movne	r3, #0
 80019ba:	71bb      	strb	r3, [r7, #6]

    //bool start = HAL_GPIO_ReadPin(BTN_START_GPIO_Port, BTN_START_Pin) == GPIO_PIN_RESET;
    //bool select = HAL_GPIO_ReadPin(BTN_SELECT_GPIO_Port, BTN_SELECT_Pin) == GPIO_PIN_RESET;

    return (
        left | (up << 1) | (right << 2) | (down << 3) | (a << 4) | (b << 5) |
 80019bc:	7bfa      	ldrb	r2, [r7, #15]
 80019be:	7b7b      	ldrb	r3, [r7, #13]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	431a      	orrs	r2, r3
 80019c4:	7bbb      	ldrb	r3, [r7, #14]
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	431a      	orrs	r2, r3
 80019ca:	7b3b      	ldrb	r3, [r7, #12]
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	431a      	orrs	r2, r3
 80019d0:	7afb      	ldrb	r3, [r7, #11]
 80019d2:	011b      	lsls	r3, r3, #4
 80019d4:	431a      	orrs	r2, r3
 80019d6:	7abb      	ldrb	r3, [r7, #10]
 80019d8:	015b      	lsls	r3, r3, #5
 80019da:	431a      	orrs	r2, r3
        (time << 6) | (game << 7) | (pause << 8) | (power << 9)// | (start << 10) | (select << 11)
 80019dc:	7a7b      	ldrb	r3, [r7, #9]
 80019de:	019b      	lsls	r3, r3, #6
        left | (up << 1) | (right << 2) | (down << 3) | (a << 4) | (b << 5) |
 80019e0:	431a      	orrs	r2, r3
        (time << 6) | (game << 7) | (pause << 8) | (power << 9)// | (start << 10) | (select << 11)
 80019e2:	7a3b      	ldrb	r3, [r7, #8]
 80019e4:	01db      	lsls	r3, r3, #7
 80019e6:	431a      	orrs	r2, r3
 80019e8:	79fb      	ldrb	r3, [r7, #7]
 80019ea:	021b      	lsls	r3, r3, #8
 80019ec:	431a      	orrs	r2, r3
 80019ee:	79bb      	ldrb	r3, [r7, #6]
 80019f0:	025b      	lsls	r3, r3, #9
 80019f2:	4313      	orrs	r3, r2
    );


}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3710      	adds	r7, #16
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	58020c00 	.word	0x58020c00
 8001a00:	58020800 	.word	0x58020800
 8001a04:	58020000 	.word	0x58020000

08001a08 <set_ospi_cmd>:
static void set_ospi_cmd(OSPI_RegularCmdTypeDef *ospi_cmd,
                         const flash_cmd_t *cmd,
                         uint32_t address,
                         uint8_t *data,
                         size_t len)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
 8001a14:	603b      	str	r3, [r7, #0]
    memset(ospi_cmd, 0x0, sizeof(*ospi_cmd));
 8001a16:	2250      	movs	r2, #80	; 0x50
 8001a18:	2100      	movs	r1, #0
 8001a1a:	68f8      	ldr	r0, [r7, #12]
 8001a1c:	f010 fa32 	bl	8011e84 <memset>

    ospi_cmd->OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
    ospi_cmd->FlashId = 0;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	605a      	str	r2, [r3, #4]
    ospi_cmd->Instruction = cmd->cmd;
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	461a      	mov	r2, r3
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	609a      	str	r2, [r3, #8]
    ospi_cmd->InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	611a      	str	r2, [r3, #16]
    ospi_cmd->InstructionMode = instruction_line_map[cmd->instr_lines];
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	785b      	ldrb	r3, [r3, #1]
 8001a40:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	461a      	mov	r2, r3
 8001a48:	4b20      	ldr	r3, [pc, #128]	; (8001acc <set_ospi_cmd+0xc4>)
 8001a4a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	60da      	str	r2, [r3, #12]

    ospi_cmd->AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2200      	movs	r2, #0
 8001a56:	62da      	str	r2, [r3, #44]	; 0x2c
    ospi_cmd->DummyCycles = cmd->dummy;
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	789b      	ldrb	r3, [r3, #2]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	645a      	str	r2, [r3, #68]	; 0x44
    ospi_cmd->DQSMode = HAL_OSPI_DQS_DISABLE;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2200      	movs	r2, #0
 8001a66:	649a      	str	r2, [r3, #72]	; 0x48
    ospi_cmd->SIOOMode = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	64da      	str	r2, [r3, #76]	; 0x4c
    ospi_cmd->InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2200      	movs	r2, #0
 8001a72:	615a      	str	r2, [r3, #20]

    ospi_cmd->Address = address;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	619a      	str	r2, [r3, #24]
    ospi_cmd->AddressSize = address_size_map[cmd->addr_size];
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	785b      	ldrb	r3, [r3, #1]
 8001a7e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	461a      	mov	r2, r3
 8001a86:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <set_ospi_cmd+0xc8>)
 8001a88:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	621a      	str	r2, [r3, #32]
    ospi_cmd->AddressMode = address_line_map[cmd->addr_lines];
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	785b      	ldrb	r3, [r3, #1]
 8001a94:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	4b0d      	ldr	r3, [pc, #52]	; (8001ad4 <set_ospi_cmd+0xcc>)
 8001a9e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	61da      	str	r2, [r3, #28]

    ospi_cmd->NbData = len;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	63da      	str	r2, [r3, #60]	; 0x3c
    ospi_cmd->DataMode = data_line_map[cmd->data_lines];
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	785b      	ldrb	r3, [r3, #1]
 8001ab0:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <set_ospi_cmd+0xd0>)
 8001aba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001ac2:	bf00      	nop
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	08014158 	.word	0x08014158
 8001ad0:	08014170 	.word	0x08014170
 8001ad4:	08014164 	.word	0x08014164
 8001ad8:	08014180 	.word	0x08014180

08001adc <OSPI_ReadBytes>:

static void OSPI_ReadBytes(const flash_cmd_t *cmd,
                           uint32_t address,
                           uint8_t *data,
                           size_t len)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b09c      	sub	sp, #112	; 0x70
 8001ae0:	af02      	add	r7, sp, #8
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
 8001ae8:	603b      	str	r3, [r7, #0]
    OSPI_RegularCmdTypeDef ospi_cmd;

    // DBG("RB %d 0x%08x 0x%08X %d\n", cmd->cmd, address, data, len);

    assert(flash.mem_mapped_enabled == false);
 8001aea:	4b1d      	ldr	r3, [pc, #116]	; (8001b60 <OSPI_ReadBytes+0x84>)
 8001aec:	7c1b      	ldrb	r3, [r3, #16]
 8001aee:	f083 0301 	eor.w	r3, r3, #1
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d106      	bne.n	8001b06 <OSPI_ReadBytes+0x2a>
 8001af8:	4b1a      	ldr	r3, [pc, #104]	; (8001b64 <OSPI_ReadBytes+0x88>)
 8001afa:	4a1b      	ldr	r2, [pc, #108]	; (8001b68 <OSPI_ReadBytes+0x8c>)
 8001afc:	f240 11a3 	movw	r1, #419	; 0x1a3
 8001b00:	481a      	ldr	r0, [pc, #104]	; (8001b6c <OSPI_ReadBytes+0x90>)
 8001b02:	f00f fe17 	bl	8011734 <__assert_func>

    set_ospi_cmd(&ospi_cmd,
 8001b06:	f107 0014 	add.w	r0, r7, #20
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	9300      	str	r3, [sp, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68ba      	ldr	r2, [r7, #8]
 8001b12:	68f9      	ldr	r1, [r7, #12]
 8001b14:	f7ff ff78 	bl	8001a08 <set_ospi_cmd>
                 len);

    //wdog_refresh();

    HAL_StatusTypeDef res;
    res = HAL_OSPI_Command(flash.hospi, &ospi_cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8001b18:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <OSPI_ReadBytes+0x84>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f107 0114 	add.w	r1, r7, #20
 8001b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b24:	4618      	mov	r0, r3
 8001b26:	f008 fc6d 	bl	800a404 <HAL_OSPI_Command>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (res != HAL_OK) {
 8001b30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <OSPI_ReadBytes+0x60>
        Error_Handler();
 8001b38:	f001 fb7e 	bl	8003238 <Error_Handler>
    }

    if (HAL_OSPI_Receive(flash.hospi, data, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8001b3c:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <OSPI_ReadBytes+0x84>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b44:	6879      	ldr	r1, [r7, #4]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f008 fd5c 	bl	800a604 <HAL_OSPI_Receive>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <OSPI_ReadBytes+0x7a>
        Error_Handler();
 8001b52:	f001 fb71 	bl	8003238 <Error_Handler>
    }
}
 8001b56:	bf00      	nop
 8001b58:	3768      	adds	r7, #104	; 0x68
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000028 	.word	0x20000028
 8001b64:	08012cd0 	.word	0x08012cd0
 8001b68:	080144b8 	.word	0x080144b8
 8001b6c:	08012cf4 	.word	0x08012cf4

08001b70 <OSPI_WriteBytes>:

static void OSPI_WriteBytes(const flash_cmd_t *cmd,
                            uint32_t address,
                            const uint8_t *data,
                            size_t len)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b09a      	sub	sp, #104	; 0x68
 8001b74:	af02      	add	r7, sp, #8
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
 8001b7c:	603b      	str	r3, [r7, #0]
    OSPI_RegularCmdTypeDef ospi_cmd;

    // DBG("WB %d 0x%08x 0x%08X %d\n", cmd->cmd, address, data, len);

    assert(flash.mem_mapped_enabled == false);
 8001b7e:	4b1c      	ldr	r3, [pc, #112]	; (8001bf0 <OSPI_WriteBytes+0x80>)
 8001b80:	7c1b      	ldrb	r3, [r3, #16]
 8001b82:	f083 0301 	eor.w	r3, r3, #1
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d106      	bne.n	8001b9a <OSPI_WriteBytes+0x2a>
 8001b8c:	4b19      	ldr	r3, [pc, #100]	; (8001bf4 <OSPI_WriteBytes+0x84>)
 8001b8e:	4a1a      	ldr	r2, [pc, #104]	; (8001bf8 <OSPI_WriteBytes+0x88>)
 8001b90:	f240 11c1 	movw	r1, #449	; 0x1c1
 8001b94:	4819      	ldr	r0, [pc, #100]	; (8001bfc <OSPI_WriteBytes+0x8c>)
 8001b96:	f00f fdcd 	bl	8011734 <__assert_func>

    set_ospi_cmd(&ospi_cmd,
 8001b9a:	f107 0010 	add.w	r0, r7, #16
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68ba      	ldr	r2, [r7, #8]
 8001ba6:	68f9      	ldr	r1, [r7, #12]
 8001ba8:	f7ff ff2e 	bl	8001a08 <set_ospi_cmd>
                 (uint8_t *) data,
                 len);

    //wdog_refresh();

    if (HAL_OSPI_Command(flash.hospi, &ospi_cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8001bac:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <OSPI_WriteBytes+0x80>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f107 0110 	add.w	r1, r7, #16
 8001bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f008 fc23 	bl	800a404 <HAL_OSPI_Command>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <OSPI_WriteBytes+0x58>
        Error_Handler();
 8001bc4:	f001 fb38 	bl	8003238 <Error_Handler>
    }

    if (len > 0) {
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d00c      	beq.n	8001be8 <OSPI_WriteBytes+0x78>
        if (HAL_OSPI_Transmit(flash.hospi, (uint8_t *) data, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8001bce:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <OSPI_WriteBytes+0x80>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f008 fca0 	bl	800a51e <HAL_OSPI_Transmit>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <OSPI_WriteBytes+0x78>
            Error_Handler();
 8001be4:	f001 fb28 	bl	8003238 <Error_Handler>
        }
    }
}
 8001be8:	bf00      	nop
 8001bea:	3760      	adds	r7, #96	; 0x60
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20000028 	.word	0x20000028
 8001bf4:	08012cd0 	.word	0x08012cd0
 8001bf8:	080144c8 	.word	0x080144c8
 8001bfc:	08012cf4 	.word	0x08012cf4

08001c00 <wait_for_status>:

static void wait_for_status(uint8_t mask, uint8_t value, uint32_t timeout)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	603a      	str	r2, [r7, #0]
 8001c0a:	71fb      	strb	r3, [r7, #7]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	71bb      	strb	r3, [r7, #6]
    uint8_t status;

    uint32_t t0 = HAL_GetTick();
 8001c10:	f002 fa70 	bl	80040f4 <HAL_GetTick>
 8001c14:	60f8      	str	r0, [r7, #12]

    do {
        OSPI_ReadBytes(CMD(RDSR), 0, &status, 1);
 8001c16:	4b14      	ldr	r3, [pc, #80]	; (8001c68 <wait_for_status+0x68>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	1cd8      	adds	r0, r3, #3
 8001c1e:	f107 020b 	add.w	r2, r7, #11
 8001c22:	2301      	movs	r3, #1
 8001c24:	2100      	movs	r1, #0
 8001c26:	f7ff ff59 	bl	8001adc <OSPI_ReadBytes>

#if 0
        printf("Status: %02X\n", status);
        HAL_Delay(500);
#endif
        if ((timeout > 0) && (HAL_GetTick() > t0 + timeout)) {
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d00e      	beq.n	8001c4e <wait_for_status+0x4e>
 8001c30:	f002 fa60 	bl	80040f4 <HAL_GetTick>
 8001c34:	4601      	mov	r1, r0
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	4299      	cmp	r1, r3
 8001c3e:	d906      	bls.n	8001c4e <wait_for_status+0x4e>
            assert(!"Status poll timeout!");
 8001c40:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <wait_for_status+0x6c>)
 8001c42:	4a0b      	ldr	r2, [pc, #44]	; (8001c70 <wait_for_status+0x70>)
 8001c44:	f240 11e5 	movw	r1, #485	; 0x1e5
 8001c48:	480a      	ldr	r0, [pc, #40]	; (8001c74 <wait_for_status+0x74>)
 8001c4a:	f00f fd73 	bl	8011734 <__assert_func>
            break;
        }
    } while ((status & mask) != value);
 8001c4e:	7afa      	ldrb	r2, [r7, #11]
 8001c50:	79fb      	ldrb	r3, [r7, #7]
 8001c52:	4013      	ands	r3, r2
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	79ba      	ldrb	r2, [r7, #6]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d1dc      	bne.n	8001c16 <wait_for_status+0x16>
}
 8001c5c:	bf00      	nop
 8001c5e:	bf00      	nop
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000028 	.word	0x20000028
 8001c6c:	08012d18 	.word	0x08012d18
 8001c70:	080144d8 	.word	0x080144d8
 8001c74:	08012cf4 	.word	0x08012cf4

08001c78 <OSPI_EnableMemoryMappedMode>:

void OSPI_EnableMemoryMappedMode(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b09a      	sub	sp, #104	; 0x68
 8001c7c:	af02      	add	r7, sp, #8
    OSPI_MemoryMappedTypeDef sMemMappedCfg;
    OSPI_RegularCmdTypeDef ospi_cmd;
    const flash_cmd_t *cmd = CMD(READ);
 8001c7e:	4b28      	ldr	r3, [pc, #160]	; (8001d20 <OSPI_EnableMemoryMappedMode+0xa8>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	332a      	adds	r3, #42	; 0x2a
 8001c86:	65fb      	str	r3, [r7, #92]	; 0x5c

    assert(flash.mem_mapped_enabled == false);
 8001c88:	4b25      	ldr	r3, [pc, #148]	; (8001d20 <OSPI_EnableMemoryMappedMode+0xa8>)
 8001c8a:	7c1b      	ldrb	r3, [r3, #16]
 8001c8c:	f083 0301 	eor.w	r3, r3, #1
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d106      	bne.n	8001ca4 <OSPI_EnableMemoryMappedMode+0x2c>
 8001c96:	4b23      	ldr	r3, [pc, #140]	; (8001d24 <OSPI_EnableMemoryMappedMode+0xac>)
 8001c98:	4a23      	ldr	r2, [pc, #140]	; (8001d28 <OSPI_EnableMemoryMappedMode+0xb0>)
 8001c9a:	f240 11f1 	movw	r1, #497	; 0x1f1
 8001c9e:	4823      	ldr	r0, [pc, #140]	; (8001d2c <OSPI_EnableMemoryMappedMode+0xb4>)
 8001ca0:	f00f fd48 	bl	8011734 <__assert_func>

    set_ospi_cmd(&ospi_cmd, cmd, 0, NULL, 0);
 8001ca4:	1d38      	adds	r0, r7, #4
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	2300      	movs	r3, #0
 8001cac:	2200      	movs	r2, #0
 8001cae:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001cb0:	f7ff feaa 	bl	8001a08 <set_ospi_cmd>

    // Memory-mapped mode configuration for linear burst read operations
    ospi_cmd.OperationType = HAL_OSPI_OPTYPE_READ_CFG;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	607b      	str	r3, [r7, #4]
    if (HAL_OSPI_Command(flash.hospi, &ospi_cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8001cb8:	4b19      	ldr	r3, [pc, #100]	; (8001d20 <OSPI_EnableMemoryMappedMode+0xa8>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	1d39      	adds	r1, r7, #4
 8001cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f008 fb9e 	bl	800a404 <HAL_OSPI_Command>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <OSPI_EnableMemoryMappedMode+0x5a>
        Error_Handler();
 8001cce:	f001 fab3 	bl	8003238 <Error_Handler>
    }

    // Use read instruction for write (in order to not alter the flash by accident)
    ospi_cmd.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	607b      	str	r3, [r7, #4]
    if (HAL_OSPI_Command(flash.hospi, &ospi_cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8001cd6:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <OSPI_EnableMemoryMappedMode+0xa8>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	1d39      	adds	r1, r7, #4
 8001cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f008 fb8f 	bl	800a404 <HAL_OSPI_Command>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <OSPI_EnableMemoryMappedMode+0x78>
        Error_Handler();
 8001cec:	f001 faa4 	bl	8003238 <Error_Handler>
    }

    // Disable timeout counter for memory mapped mode
    sMemMappedCfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	657b      	str	r3, [r7, #84]	; 0x54
    sMemMappedCfg.TimeOutPeriod = 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	65bb      	str	r3, [r7, #88]	; 0x58

    // Enable memory mapped mode
    if (HAL_OSPI_MemoryMapped(flash.hospi, &sMemMappedCfg) != HAL_OK) {
 8001cf8:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <OSPI_EnableMemoryMappedMode+0xa8>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001d00:	4611      	mov	r1, r2
 8001d02:	4618      	mov	r0, r3
 8001d04:	f008 fd22 	bl	800a74c <HAL_OSPI_MemoryMapped>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <OSPI_EnableMemoryMappedMode+0x9a>
        Error_Handler();
 8001d0e:	f001 fa93 	bl	8003238 <Error_Handler>
    }

    flash.mem_mapped_enabled = true;
 8001d12:	4b03      	ldr	r3, [pc, #12]	; (8001d20 <OSPI_EnableMemoryMappedMode+0xa8>)
 8001d14:	2201      	movs	r2, #1
 8001d16:	741a      	strb	r2, [r3, #16]
}
 8001d18:	bf00      	nop
 8001d1a:	3760      	adds	r7, #96	; 0x60
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20000028 	.word	0x20000028
 8001d24:	08012cd0 	.word	0x08012cd0
 8001d28:	080144e8 	.word	0x080144e8
 8001d2c:	08012cf4 	.word	0x08012cf4

08001d30 <OSPI_NOR_WriteEnable>:
    // Wait for Write In Progress Bit to become zero
    wait_for_status(STATUS_WIP_Msk, 0, TMO_DEFAULT);
}

void OSPI_NOR_WriteEnable(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
    OSPI_WriteBytes(CMD(WREN), 0, NULL, 0);
 8001d34:	4b08      	ldr	r3, [pc, #32]	; (8001d58 <OSPI_NOR_WriteEnable+0x28>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f103 000c 	add.w	r0, r3, #12
 8001d3e:	2300      	movs	r3, #0
 8001d40:	2200      	movs	r2, #0
 8001d42:	2100      	movs	r1, #0
 8001d44:	f7ff ff14 	bl	8001b70 <OSPI_WriteBytes>

    // Wait for Write Enable Latch to be set
    wait_for_status(STATUS_WEL_Msk, STATUS_WEL_Msk, TMO_DEFAULT);
 8001d48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d4c:	2102      	movs	r1, #2
 8001d4e:	2002      	movs	r0, #2
 8001d50:	f7ff ff56 	bl	8001c00 <wait_for_status>
}
 8001d54:	bf00      	nop
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	20000028 	.word	0x20000028

08001d5c <init_mx_issi>:
{
    OSPI_ReadBytes(CMD(RDCR), 0, dest, 1);
}

static void init_mx_issi(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
    // Shared code for both MX and ISSI

    uint8_t rd_status;

    DBG("%s\n", __FUNCTION__);
 8001d62:	481e      	ldr	r0, [pc, #120]	; (8001ddc <init_mx_issi+0x80>)
 8001d64:	f00f ff8e 	bl	8011c84 <puts>

    OSPI_ReadBytes(CMD(RDSR), 0, &rd_status, 1);
 8001d68:	4b1d      	ldr	r3, [pc, #116]	; (8001de0 <init_mx_issi+0x84>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	1cd8      	adds	r0, r3, #3
 8001d70:	1dfa      	adds	r2, r7, #7
 8001d72:	2301      	movs	r3, #1
 8001d74:	2100      	movs	r1, #0
 8001d76:	f7ff feb1 	bl	8001adc <OSPI_ReadBytes>

    if (flash.config->set_quad && ((rd_status & STATUS_QE_Msk) == 0)) {
 8001d7a:	4b19      	ldr	r3, [pc, #100]	; (8001de0 <init_mx_issi+0x84>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	7d1b      	ldrb	r3, [r3, #20]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d027      	beq.n	8001dd4 <init_mx_issi+0x78>
 8001d84:	79fb      	ldrb	r3, [r7, #7]
 8001d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d122      	bne.n	8001dd4 <init_mx_issi+0x78>
        // WRSR - Write Status Register
        // Set Quad Enable bit (6) in status register. Other bits = 0.
        uint8_t wr_status = STATUS_QE_Msk;
 8001d8e:	2340      	movs	r3, #64	; 0x40
 8001d90:	71bb      	strb	r3, [r7, #6]

        DBG("Setting QE bit.\n");
 8001d92:	4814      	ldr	r0, [pc, #80]	; (8001de4 <init_mx_issi+0x88>)
 8001d94:	f00f ff76 	bl	8011c84 <puts>

        // Set the QE bit
        OSPI_NOR_WriteEnable();
 8001d98:	f7ff ffca 	bl	8001d30 <OSPI_NOR_WriteEnable>
        OSPI_WriteBytes(CMD(WRSR), 0, &wr_status, 1);
 8001d9c:	4b10      	ldr	r3, [pc, #64]	; (8001de0 <init_mx_issi+0x84>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	6818      	ldr	r0, [r3, #0]
 8001da2:	1dba      	adds	r2, r7, #6
 8001da4:	2301      	movs	r3, #1
 8001da6:	2100      	movs	r1, #0
 8001da8:	f7ff fee2 	bl	8001b70 <OSPI_WriteBytes>
        wait_for_status(STATUS_WIP_Msk, 0, TMO_DEFAULT);
 8001dac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001db0:	2100      	movs	r1, #0
 8001db2:	2001      	movs	r0, #1
 8001db4:	f7ff ff24 	bl	8001c00 <wait_for_status>

        OSPI_ReadBytes(CMD(RDSR), 0, &rd_status, 1);
 8001db8:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <init_mx_issi+0x84>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	1cd8      	adds	r0, r3, #3
 8001dc0:	1dfa      	adds	r2, r7, #7
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	f7ff fe89 	bl	8001adc <OSPI_ReadBytes>
        DBG("QE bit set. Status: %02X\n", rd_status);
 8001dca:	79fb      	ldrb	r3, [r7, #7]
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4806      	ldr	r0, [pc, #24]	; (8001de8 <init_mx_issi+0x8c>)
 8001dd0:	f00f fef2 	bl	8011bb8 <iprintf>
    }
}
 8001dd4:	bf00      	nop
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	08014504 	.word	0x08014504
 8001de0:	20000028 	.word	0x20000028
 8001de4:	08012e64 	.word	0x08012e64
 8001de8:	08012e74 	.word	0x08012e74

08001dec <init_spansion>:

static void init_spansion(void)
{
 8001dec:	b5b0      	push	{r4, r5, r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af04      	add	r7, sp, #16
    uint8_t rd_cr2;
    uint8_t rd_cr3;
    uint8_t rd_cr4;

    // SR[1-2]V
    OSPI_ReadBytes(CMD(RDSR), 0x00, &rd_sr1, 1);
 8001df2:	4b44      	ldr	r3, [pc, #272]	; (8001f04 <init_spansion+0x118>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	1cd8      	adds	r0, r3, #3
 8001dfa:	1dfa      	adds	r2, r7, #7
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	2100      	movs	r1, #0
 8001e00:	f7ff fe6c 	bl	8001adc <OSPI_ReadBytes>
    OSPI_ReadBytes(CMD(RDAR), 0x00800001, &rd_sr2, 1);
 8001e04:	4b3f      	ldr	r3, [pc, #252]	; (8001f04 <init_spansion+0x118>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f103 0009 	add.w	r0, r3, #9
 8001e0e:	1dba      	adds	r2, r7, #6
 8001e10:	2301      	movs	r3, #1
 8001e12:	493d      	ldr	r1, [pc, #244]	; (8001f08 <init_spansion+0x11c>)
 8001e14:	f7ff fe62 	bl	8001adc <OSPI_ReadBytes>

    // CR[1-4]NV
    OSPI_ReadBytes(CMD(RDCR), 0x00, &rd_cr1, 1);
 8001e18:	4b3a      	ldr	r3, [pc, #232]	; (8001f04 <init_spansion+0x118>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	1d98      	adds	r0, r3, #6
 8001e20:	1d7a      	adds	r2, r7, #5
 8001e22:	2301      	movs	r3, #1
 8001e24:	2100      	movs	r1, #0
 8001e26:	f7ff fe59 	bl	8001adc <OSPI_ReadBytes>
    OSPI_ReadBytes(CMD(RDAR), 0x03, &rd_cr2, 1);
 8001e2a:	4b36      	ldr	r3, [pc, #216]	; (8001f04 <init_spansion+0x118>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f103 0009 	add.w	r0, r3, #9
 8001e34:	1d3a      	adds	r2, r7, #4
 8001e36:	2301      	movs	r3, #1
 8001e38:	2103      	movs	r1, #3
 8001e3a:	f7ff fe4f 	bl	8001adc <OSPI_ReadBytes>
    OSPI_ReadBytes(CMD(RDAR), 0x04, &rd_cr3, 1);
 8001e3e:	4b31      	ldr	r3, [pc, #196]	; (8001f04 <init_spansion+0x118>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f103 0009 	add.w	r0, r3, #9
 8001e48:	1cfa      	adds	r2, r7, #3
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	2104      	movs	r1, #4
 8001e4e:	f7ff fe45 	bl	8001adc <OSPI_ReadBytes>
    OSPI_ReadBytes(CMD(RDAR), 0x05, &rd_cr4, 1);
 8001e52:	4b2c      	ldr	r3, [pc, #176]	; (8001f04 <init_spansion+0x118>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f103 0009 	add.w	r0, r3, #9
 8001e5c:	1cba      	adds	r2, r7, #2
 8001e5e:	2301      	movs	r3, #1
 8001e60:	2105      	movs	r1, #5
 8001e62:	f7ff fe3b 	bl	8001adc <OSPI_ReadBytes>

    DBG("SR1: %02X SR2: %02X CR: %02X %02X %02X %02X\n", rd_sr1, rd_sr2, rd_cr1, rd_cr2, rd_cr3, rd_cr4);
 8001e66:	79fb      	ldrb	r3, [r7, #7]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	79bb      	ldrb	r3, [r7, #6]
 8001e6c:	461c      	mov	r4, r3
 8001e6e:	797b      	ldrb	r3, [r7, #5]
 8001e70:	461d      	mov	r5, r3
 8001e72:	793b      	ldrb	r3, [r7, #4]
 8001e74:	78fa      	ldrb	r2, [r7, #3]
 8001e76:	78b9      	ldrb	r1, [r7, #2]
 8001e78:	9102      	str	r1, [sp, #8]
 8001e7a:	9201      	str	r2, [sp, #4]
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	462b      	mov	r3, r5
 8001e80:	4622      	mov	r2, r4
 8001e82:	4601      	mov	r1, r0
 8001e84:	4821      	ldr	r0, [pc, #132]	; (8001f0c <init_spansion+0x120>)
 8001e86:	f00f fe97 	bl	8011bb8 <iprintf>

    if (flash.config->set_quad && ((rd_cr1 & S_CR_QUAD_Msk) == 0)) {
 8001e8a:	4b1e      	ldr	r3, [pc, #120]	; (8001f04 <init_spansion+0x118>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	7d1b      	ldrb	r3, [r3, #20]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d033      	beq.n	8001efc <init_spansion+0x110>
 8001e94:	797b      	ldrb	r3, [r7, #5]
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d12e      	bne.n	8001efc <init_spansion+0x110>
        // WRSR/WRR writes to {status, config}
        // Clear SR1V and set bit 1 (QUAD) in CR1NV
        uint8_t wr_sr[] = {0x00, S_CR_QUAD_Msk};
 8001e9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ea2:	803b      	strh	r3, [r7, #0]

        DBG("Setting QUAD in CR1V.\n");
 8001ea4:	481a      	ldr	r0, [pc, #104]	; (8001f10 <init_spansion+0x124>)
 8001ea6:	f00f feed 	bl	8011c84 <puts>

        // Enable write to be allowed to change the registers
        OSPI_NOR_WriteEnable();
 8001eaa:	f7ff ff41 	bl	8001d30 <OSPI_NOR_WriteEnable>

        OSPI_WriteBytes(CMD(WRSR), 0, wr_sr, sizeof(wr_sr));
 8001eae:	4b15      	ldr	r3, [pc, #84]	; (8001f04 <init_spansion+0x118>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	6818      	ldr	r0, [r3, #0]
 8001eb4:	463a      	mov	r2, r7
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	2100      	movs	r1, #0
 8001eba:	f7ff fe59 	bl	8001b70 <OSPI_WriteBytes>

        // Wait until WIP bit is cleared
        wait_for_status(STATUS_WIP_Msk, 0, TMO_DEFAULT);
 8001ebe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	f7ff fe9b 	bl	8001c00 <wait_for_status>

        OSPI_ReadBytes(CMD(RDSR), 0, &rd_sr1, 1);
 8001eca:	4b0e      	ldr	r3, [pc, #56]	; (8001f04 <init_spansion+0x118>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	1cd8      	adds	r0, r3, #3
 8001ed2:	1dfa      	adds	r2, r7, #7
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	f7ff fe00 	bl	8001adc <OSPI_ReadBytes>
        OSPI_ReadBytes(CMD(RDCR), 0, &rd_cr1, 1);
 8001edc:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <init_spansion+0x118>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	1d98      	adds	r0, r3, #6
 8001ee4:	1d7a      	adds	r2, r7, #5
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	2100      	movs	r1, #0
 8001eea:	f7ff fdf7 	bl	8001adc <OSPI_ReadBytes>
        DBG("QUAD bit set. SR: %02X CR: %02X\n", rd_sr1, rd_cr1);
 8001eee:	79fb      	ldrb	r3, [r7, #7]
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	797b      	ldrb	r3, [r7, #5]
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4807      	ldr	r0, [pc, #28]	; (8001f14 <init_spansion+0x128>)
 8001ef8:	f00f fe5e 	bl	8011bb8 <iprintf>
    }
}
 8001efc:	bf00      	nop
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bdb0      	pop	{r4, r5, r7, pc}
 8001f04:	20000028 	.word	0x20000028
 8001f08:	00800001 	.word	0x00800001
 8001f0c:	08012e90 	.word	0x08012e90
 8001f10:	08012ec0 	.word	0x08012ec0
 8001f14:	08012ed8 	.word	0x08012ed8

08001f18 <init_winbond>:

static void init_winbond(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
	//                                    cmd   i_lines  a_lines  a_size         d_lines  dummy
	const flash_cmd_t cmd_rdsr2 = CMD_DEF(0x35, LINES_1, LINES_0, ADDR_SIZE_24B, LINES_1, 0);
 8001f1e:	4a7f      	ldr	r2, [pc, #508]	; (800211c <init_winbond+0x204>)
 8001f20:	f107 0314 	add.w	r3, r7, #20
 8001f24:	6812      	ldr	r2, [r2, #0]
 8001f26:	4611      	mov	r1, r2
 8001f28:	8019      	strh	r1, [r3, #0]
 8001f2a:	3302      	adds	r3, #2
 8001f2c:	0c12      	lsrs	r2, r2, #16
 8001f2e:	701a      	strb	r2, [r3, #0]
	const flash_cmd_t cmd_rdsr3 = CMD_DEF(0x15, LINES_1, LINES_0, ADDR_SIZE_24B, LINES_1, 0);
 8001f30:	4a7b      	ldr	r2, [pc, #492]	; (8002120 <init_winbond+0x208>)
 8001f32:	f107 0310 	add.w	r3, r7, #16
 8001f36:	6812      	ldr	r2, [r2, #0]
 8001f38:	4611      	mov	r1, r2
 8001f3a:	8019      	strh	r1, [r3, #0]
 8001f3c:	3302      	adds	r3, #2
 8001f3e:	0c12      	lsrs	r2, r2, #16
 8001f40:	701a      	strb	r2, [r3, #0]
	const flash_cmd_t cmd_wrsr2 = CMD_DEF(0x31, LINES_1, LINES_0, ADDR_SIZE_24B, LINES_1, 0);
 8001f42:	4a78      	ldr	r2, [pc, #480]	; (8002124 <init_winbond+0x20c>)
 8001f44:	f107 030c 	add.w	r3, r7, #12
 8001f48:	6812      	ldr	r2, [r2, #0]
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	8019      	strh	r1, [r3, #0]
 8001f4e:	3302      	adds	r3, #2
 8001f50:	0c12      	lsrs	r2, r2, #16
 8001f52:	701a      	strb	r2, [r3, #0]
	const flash_cmd_t cmd_wrsr3 = CMD_DEF(0x11, LINES_1, LINES_0, ADDR_SIZE_24B, LINES_1, 0);
 8001f54:	4a74      	ldr	r2, [pc, #464]	; (8002128 <init_winbond+0x210>)
 8001f56:	f107 0308 	add.w	r3, r7, #8
 8001f5a:	6812      	ldr	r2, [r2, #0]
 8001f5c:	4611      	mov	r1, r2
 8001f5e:	8019      	strh	r1, [r3, #0]
 8001f60:	3302      	adds	r3, #2
 8001f62:	0c12      	lsrs	r2, r2, #16
 8001f64:	701a      	strb	r2, [r3, #0]

	const bool is_quad = flash.config->set_quad;
 8001f66:	4b71      	ldr	r3, [pc, #452]	; (800212c <init_winbond+0x214>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	7d1b      	ldrb	r3, [r3, #20]
 8001f6c:	75fb      	strb	r3, [r7, #23]

	uint8_t sr1, sr2, sr3;

	OSPI_ReadBytes(CMD(RDSR),  0, &sr1, 1);
 8001f6e:	4b6f      	ldr	r3, [pc, #444]	; (800212c <init_winbond+0x214>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	1cd8      	adds	r0, r3, #3
 8001f76:	1dfa      	adds	r2, r7, #7
 8001f78:	2301      	movs	r3, #1
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	f7ff fdae 	bl	8001adc <OSPI_ReadBytes>
	OSPI_ReadBytes(&cmd_rdsr2, 0, &sr2, 1);
 8001f80:	1dba      	adds	r2, r7, #6
 8001f82:	f107 0014 	add.w	r0, r7, #20
 8001f86:	2301      	movs	r3, #1
 8001f88:	2100      	movs	r1, #0
 8001f8a:	f7ff fda7 	bl	8001adc <OSPI_ReadBytes>
	OSPI_ReadBytes(&cmd_rdsr3, 0, &sr3, 1);
 8001f8e:	1d7a      	adds	r2, r7, #5
 8001f90:	f107 0010 	add.w	r0, r7, #16
 8001f94:	2301      	movs	r3, #1
 8001f96:	2100      	movs	r1, #0
 8001f98:	f7ff fda0 	bl	8001adc <OSPI_ReadBytes>
	DBG("Winbond SR1: %02X SR2: %02X SR3: %02X\n", sr1, sr2, sr3);
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	79bb      	ldrb	r3, [r7, #6]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	797b      	ldrb	r3, [r7, #5]
 8001fa6:	4862      	ldr	r0, [pc, #392]	; (8002130 <init_winbond+0x218>)
 8001fa8:	f00f fe06 	bl	8011bb8 <iprintf>

	// try to clear writeable protect bits if set

	if (sr1 & WB_SR1_PROTECT_Msk) {
 8001fac:	79fb      	ldrb	r3, [r7, #7]
 8001fae:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d027      	beq.n	8002006 <init_winbond+0xee>
		DBG("clearing SR1 protect bits\n");
 8001fb6:	485f      	ldr	r0, [pc, #380]	; (8002134 <init_winbond+0x21c>)
 8001fb8:	f00f fe64 	bl	8011c84 <puts>
		sr1 = 0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	71fb      	strb	r3, [r7, #7]

		OSPI_NOR_WriteEnable();
 8001fc0:	f7ff feb6 	bl	8001d30 <OSPI_NOR_WriteEnable>
		OSPI_WriteBytes(CMD(WRSR), 0, &sr1, 1);
 8001fc4:	4b59      	ldr	r3, [pc, #356]	; (800212c <init_winbond+0x214>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	6818      	ldr	r0, [r3, #0]
 8001fca:	1dfa      	adds	r2, r7, #7
 8001fcc:	2301      	movs	r3, #1
 8001fce:	2100      	movs	r1, #0
 8001fd0:	f7ff fdce 	bl	8001b70 <OSPI_WriteBytes>
		wait_for_status(STATUS_WIP_Msk, 0, TMO_DEFAULT);
 8001fd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fd8:	2100      	movs	r1, #0
 8001fda:	2001      	movs	r0, #1
 8001fdc:	f7ff fe10 	bl	8001c00 <wait_for_status>

		OSPI_ReadBytes(CMD(RDSR), 0, &sr1, 1);
 8001fe0:	4b52      	ldr	r3, [pc, #328]	; (800212c <init_winbond+0x214>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	1cd8      	adds	r0, r3, #3
 8001fe8:	1dfa      	adds	r2, r7, #7
 8001fea:	2301      	movs	r3, #1
 8001fec:	2100      	movs	r1, #0
 8001fee:	f7ff fd75 	bl	8001adc <OSPI_ReadBytes>
		if (sr1 & WB_SR1_PROTECT_Msk)
 8001ff2:	79fb      	ldrb	r3, [r7, #7]
 8001ff4:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d004      	beq.n	8002006 <init_winbond+0xee>
			DBG("SR1: %02X, change failed\n", sr1);
 8001ffc:	79fb      	ldrb	r3, [r7, #7]
 8001ffe:	4619      	mov	r1, r3
 8002000:	484d      	ldr	r0, [pc, #308]	; (8002138 <init_winbond+0x220>)
 8002002:	f00f fdd9 	bl	8011bb8 <iprintf>
	}

	if ((sr2 & WB_SR2_PROTECT_Msk) || (is_quad && !(sr2 & 1<<WB_SR2_QE_Pos))) {
 8002006:	79bb      	ldrb	r3, [r7, #6]
 8002008:	f003 0341 	and.w	r3, r3, #65	; 0x41
 800200c:	2b00      	cmp	r3, #0
 800200e:	d107      	bne.n	8002020 <init_winbond+0x108>
 8002010:	7dfb      	ldrb	r3, [r7, #23]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d039      	beq.n	800208a <init_winbond+0x172>
 8002016:	79bb      	ldrb	r3, [r7, #6]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d134      	bne.n	800208a <init_winbond+0x172>
		DBG("clearing SR2 protect bits\n");
 8002020:	4846      	ldr	r0, [pc, #280]	; (800213c <init_winbond+0x224>)
 8002022:	f00f fe2f 	bl	8011c84 <puts>
		sr2 = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	71bb      	strb	r3, [r7, #6]

		if (is_quad) {
 800202a:	7dfb      	ldrb	r3, [r7, #23]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d004      	beq.n	800203a <init_winbond+0x122>
			DBG("and enabling quad mode\n");
 8002030:	4843      	ldr	r0, [pc, #268]	; (8002140 <init_winbond+0x228>)
 8002032:	f00f fe27 	bl	8011c84 <puts>
			sr2 = 1<<WB_SR2_QE_Pos;
 8002036:	2302      	movs	r3, #2
 8002038:	71bb      	strb	r3, [r7, #6]
		}

		OSPI_NOR_WriteEnable();
 800203a:	f7ff fe79 	bl	8001d30 <OSPI_NOR_WriteEnable>
		OSPI_WriteBytes(&cmd_wrsr2, 0, &sr2, 1);
 800203e:	1dba      	adds	r2, r7, #6
 8002040:	f107 000c 	add.w	r0, r7, #12
 8002044:	2301      	movs	r3, #1
 8002046:	2100      	movs	r1, #0
 8002048:	f7ff fd92 	bl	8001b70 <OSPI_WriteBytes>
		wait_for_status(STATUS_WIP_Msk, 0, TMO_DEFAULT);
 800204c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002050:	2100      	movs	r1, #0
 8002052:	2001      	movs	r0, #1
 8002054:	f7ff fdd4 	bl	8001c00 <wait_for_status>

		OSPI_ReadBytes(&cmd_rdsr2, 0, &sr2, 1);
 8002058:	1dba      	adds	r2, r7, #6
 800205a:	f107 0014 	add.w	r0, r7, #20
 800205e:	2301      	movs	r3, #1
 8002060:	2100      	movs	r1, #0
 8002062:	f7ff fd3b 	bl	8001adc <OSPI_ReadBytes>
		if ((sr2 & WB_SR2_PROTECT_Msk) || (is_quad && !(sr2 & 1<<WB_SR2_QE_Pos)))
 8002066:	79bb      	ldrb	r3, [r7, #6]
 8002068:	f003 0341 	and.w	r3, r3, #65	; 0x41
 800206c:	2b00      	cmp	r3, #0
 800206e:	d107      	bne.n	8002080 <init_winbond+0x168>
 8002070:	7dfb      	ldrb	r3, [r7, #23]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d009      	beq.n	800208a <init_winbond+0x172>
 8002076:	79bb      	ldrb	r3, [r7, #6]
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d104      	bne.n	800208a <init_winbond+0x172>
			DBG("SR2: %02X, change failed\n", sr2);
 8002080:	79bb      	ldrb	r3, [r7, #6]
 8002082:	4619      	mov	r1, r3
 8002084:	482f      	ldr	r0, [pc, #188]	; (8002144 <init_winbond+0x22c>)
 8002086:	f00f fd97 	bl	8011bb8 <iprintf>
	}

	if ((sr3 & WB_SR3_PROTECT_Msk) || ((sr3 & WB_SR3_DRV_Msk) != WB_SR3_DRV_Val_50)) {
 800208a:	797b      	ldrb	r3, [r7, #5]
 800208c:	f003 0304 	and.w	r3, r3, #4
 8002090:	2b00      	cmp	r3, #0
 8002092:	d104      	bne.n	800209e <init_winbond+0x186>
 8002094:	797b      	ldrb	r3, [r7, #5]
 8002096:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800209a:	2b40      	cmp	r3, #64	; 0x40
 800209c:	d029      	beq.n	80020f2 <init_winbond+0x1da>
		DBG("clearing SR3 protect bits, setting drive strength 50%%\n");
 800209e:	482a      	ldr	r0, [pc, #168]	; (8002148 <init_winbond+0x230>)
 80020a0:	f00f fd8a 	bl	8011bb8 <iprintf>
		sr3 = WB_SR3_DRV_Val_50;
 80020a4:	2340      	movs	r3, #64	; 0x40
 80020a6:	717b      	strb	r3, [r7, #5]

		OSPI_NOR_WriteEnable();
 80020a8:	f7ff fe42 	bl	8001d30 <OSPI_NOR_WriteEnable>
		OSPI_WriteBytes(&cmd_wrsr3, 0, &sr3, 1);
 80020ac:	1d7a      	adds	r2, r7, #5
 80020ae:	f107 0008 	add.w	r0, r7, #8
 80020b2:	2301      	movs	r3, #1
 80020b4:	2100      	movs	r1, #0
 80020b6:	f7ff fd5b 	bl	8001b70 <OSPI_WriteBytes>
		wait_for_status(STATUS_WIP_Msk, 0, TMO_DEFAULT);
 80020ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020be:	2100      	movs	r1, #0
 80020c0:	2001      	movs	r0, #1
 80020c2:	f7ff fd9d 	bl	8001c00 <wait_for_status>

		OSPI_ReadBytes(&cmd_rdsr3, 0, &sr3, 1);
 80020c6:	1d7a      	adds	r2, r7, #5
 80020c8:	f107 0010 	add.w	r0, r7, #16
 80020cc:	2301      	movs	r3, #1
 80020ce:	2100      	movs	r1, #0
 80020d0:	f7ff fd04 	bl	8001adc <OSPI_ReadBytes>
		if ((sr3 & WB_SR3_PROTECT_Msk) || ((sr3 & WB_SR3_DRV_Msk) != WB_SR3_DRV_Val_50))
 80020d4:	797b      	ldrb	r3, [r7, #5]
 80020d6:	f003 0304 	and.w	r3, r3, #4
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d104      	bne.n	80020e8 <init_winbond+0x1d0>
 80020de:	797b      	ldrb	r3, [r7, #5]
 80020e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80020e4:	2b40      	cmp	r3, #64	; 0x40
 80020e6:	d004      	beq.n	80020f2 <init_winbond+0x1da>
			DBG("SR3: %02X, change failed\n", sr3);
 80020e8:	797b      	ldrb	r3, [r7, #5]
 80020ea:	4619      	mov	r1, r3
 80020ec:	4817      	ldr	r0, [pc, #92]	; (800214c <init_winbond+0x234>)
 80020ee:	f00f fd63 	bl	8011bb8 <iprintf>
	}

    if (is_quad && !(sr2 & 1<<WB_SR2_QE_Pos)) {
 80020f2:	7dfb      	ldrb	r3, [r7, #23]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00d      	beq.n	8002114 <init_winbond+0x1fc>
 80020f8:	79bb      	ldrb	r3, [r7, #6]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d108      	bne.n	8002114 <init_winbond+0x1fc>
        DBG("Windbond quad mode not enabled, falling back to SPI\n");
 8002102:	4813      	ldr	r0, [pc, #76]	; (8002150 <init_winbond+0x238>)
 8002104:	f00f fdbe 	bl	8011c84 <puts>
        flash.config = &config_spi_24b;
 8002108:	4b08      	ldr	r3, [pc, #32]	; (800212c <init_winbond+0x214>)
 800210a:	4a12      	ldr	r2, [pc, #72]	; (8002154 <init_winbond+0x23c>)
 800210c:	609a      	str	r2, [r3, #8]
        flash.name = "Winbond SPI";
 800210e:	4b07      	ldr	r3, [pc, #28]	; (800212c <init_winbond+0x214>)
 8002110:	4a11      	ldr	r2, [pc, #68]	; (8002158 <init_winbond+0x240>)
 8002112:	60da      	str	r2, [r3, #12]
    }
}
 8002114:	bf00      	nop
 8002116:	3718      	adds	r7, #24
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	08013040 	.word	0x08013040
 8002120:	08013044 	.word	0x08013044
 8002124:	08013048 	.word	0x08013048
 8002128:	0801304c 	.word	0x0801304c
 800212c:	20000028 	.word	0x20000028
 8002130:	08012efc 	.word	0x08012efc
 8002134:	08012f24 	.word	0x08012f24
 8002138:	08012f40 	.word	0x08012f40
 800213c:	08012f5c 	.word	0x08012f5c
 8002140:	08012f78 	.word	0x08012f78
 8002144:	08012f90 	.word	0x08012f90
 8002148:	08012fac 	.word	0x08012fac
 800214c:	08012fe4 	.word	0x08012fe4
 8002150:	08013000 	.word	0x08013000
 8002154:	0801430c 	.word	0x0801430c
 8002158:	08013034 	.word	0x08013034

0800215c <OSPI_Init>:
    // Assumes that erase sizes are sorted: 4 > 3 > 2 > 1.
    return flash.config->erase_sizes[0];
}

void OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
    uint8_t status;

    flash.hospi = hospi;
 8002164:	4a4c      	ldr	r2, [pc, #304]	; (8002298 <OSPI_Init+0x13c>)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6013      	str	r3, [r2, #0]

    // Enable Reset
    OSPI_WriteBytes(CMD(RSTEN), 0, NULL, 0);
 800216a:	4b4b      	ldr	r3, [pc, #300]	; (8002298 <OSPI_Init+0x13c>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f103 0012 	add.w	r0, r3, #18
 8002174:	2300      	movs	r3, #0
 8002176:	2200      	movs	r2, #0
 8002178:	2100      	movs	r1, #0
 800217a:	f7ff fcf9 	bl	8001b70 <OSPI_WriteBytes>
    HAL_Delay(2);
 800217e:	2002      	movs	r0, #2
 8002180:	f001 ffc4 	bl	800410c <HAL_Delay>

    // Reset
    OSPI_WriteBytes(CMD(RST), 0, NULL, 0);
 8002184:	4b44      	ldr	r3, [pc, #272]	; (8002298 <OSPI_Init+0x13c>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f103 0015 	add.w	r0, r3, #21
 800218e:	2300      	movs	r3, #0
 8002190:	2200      	movs	r2, #0
 8002192:	2100      	movs	r1, #0
 8002194:	f7ff fcec 	bl	8001b70 <OSPI_WriteBytes>
    HAL_Delay(20);
 8002198:	2014      	movs	r0, #20
 800219a:	f001 ffb7 	bl	800410c <HAL_Delay>

    // Read ID
    OSPI_ReadBytes(CMD(RDID), 0, &flash.jedec_id.u8[0], 3);
 800219e:	4b3e      	ldr	r3, [pc, #248]	; (8002298 <OSPI_Init+0x13c>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f103 000f 	add.w	r0, r3, #15
 80021a8:	2303      	movs	r3, #3
 80021aa:	4a3c      	ldr	r2, [pc, #240]	; (800229c <OSPI_Init+0x140>)
 80021ac:	2100      	movs	r1, #0
 80021ae:	f7ff fc95 	bl	8001adc <OSPI_ReadBytes>
    DBG("JEDEC_ID: %02X %02X %02X\n", flash.jedec_id.u8[0], flash.jedec_id.u8[1], flash.jedec_id.u8[2]);
 80021b2:	4b39      	ldr	r3, [pc, #228]	; (8002298 <OSPI_Init+0x13c>)
 80021b4:	791b      	ldrb	r3, [r3, #4]
 80021b6:	4619      	mov	r1, r3
 80021b8:	4b37      	ldr	r3, [pc, #220]	; (8002298 <OSPI_Init+0x13c>)
 80021ba:	795b      	ldrb	r3, [r3, #5]
 80021bc:	461a      	mov	r2, r3
 80021be:	4b36      	ldr	r3, [pc, #216]	; (8002298 <OSPI_Init+0x13c>)
 80021c0:	799b      	ldrb	r3, [r3, #6]
 80021c2:	4837      	ldr	r0, [pc, #220]	; (80022a0 <OSPI_Init+0x144>)
 80021c4:	f00f fcf8 	bl	8011bb8 <iprintf>

    // Check for known bad IDs
    if (((flash.jedec_id.u32 & 0xffffff) == 0xffffff) ||
 80021c8:	4b33      	ldr	r3, [pc, #204]	; (8002298 <OSPI_Init+0x13c>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80021d0:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d005      	beq.n	80021e4 <OSPI_Init+0x88>
        ((flash.jedec_id.u32 & 0xffffff) == 0x000000)) {
 80021d8:	4b2f      	ldr	r3, [pc, #188]	; (8002298 <OSPI_Init+0x13c>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    if (((flash.jedec_id.u32 & 0xffffff) == 0xffffff) ||
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d106      	bne.n	80021f2 <OSPI_Init+0x96>
        assert(!"Can't communicate with the external flash! Please check the soldering.");
 80021e4:	4b2f      	ldr	r3, [pc, #188]	; (80022a4 <OSPI_Init+0x148>)
 80021e6:	4a30      	ldr	r2, [pc, #192]	; (80022a8 <OSPI_Init+0x14c>)
 80021e8:	f240 3149 	movw	r1, #841	; 0x349
 80021ec:	482f      	ldr	r0, [pc, #188]	; (80022ac <OSPI_Init+0x150>)
 80021ee:	f00f faa1 	bl	8011734 <__assert_func>
    }

    OSPI_ReadBytes(CMD(RDSR), 0, &status, 1);
 80021f2:	4b29      	ldr	r3, [pc, #164]	; (8002298 <OSPI_Init+0x13c>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	1cd8      	adds	r0, r3, #3
 80021fa:	f107 020b 	add.w	r2, r7, #11
 80021fe:	2301      	movs	r3, #1
 8002200:	2100      	movs	r1, #0
 8002202:	f7ff fc6b 	bl	8001adc <OSPI_ReadBytes>
    DBG("Status: %02X\n", status);
 8002206:	7afb      	ldrb	r3, [r7, #11]
 8002208:	4619      	mov	r1, r3
 800220a:	4829      	ldr	r0, [pc, #164]	; (80022b0 <OSPI_Init+0x154>)
 800220c:	f00f fcd4 	bl	8011bb8 <iprintf>

    for (int i = 0; i < ARRAY_SIZE(jedec_map); i++) {
 8002210:	2300      	movs	r3, #0
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	e02e      	b.n	8002274 <OSPI_Init+0x118>
        if ((flash.jedec_id.u32 & 0xffffff) == (jedec_map[i].jedec_id.u32 & 0xffffff)) {
 8002216:	4b20      	ldr	r3, [pc, #128]	; (8002298 <OSPI_Init+0x13c>)
 8002218:	6859      	ldr	r1, [r3, #4]
 800221a:	4826      	ldr	r0, [pc, #152]	; (80022b4 <OSPI_Init+0x158>)
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	4613      	mov	r3, r2
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	4413      	add	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4403      	add	r3, r0
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	404b      	eors	r3, r1
 800222c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d11c      	bne.n	800226e <OSPI_Init+0x112>
            flash.config = jedec_map[i].config;
 8002234:	491f      	ldr	r1, [pc, #124]	; (80022b4 <OSPI_Init+0x158>)
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	4613      	mov	r3, r2
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	4413      	add	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	440b      	add	r3, r1
 8002242:	3308      	adds	r3, #8
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a14      	ldr	r2, [pc, #80]	; (8002298 <OSPI_Init+0x13c>)
 8002248:	6093      	str	r3, [r2, #8]
            flash.name = jedec_map[i].name;
 800224a:	491a      	ldr	r1, [pc, #104]	; (80022b4 <OSPI_Init+0x158>)
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	4613      	mov	r3, r2
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	4413      	add	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	440b      	add	r3, r1
 8002258:	3304      	adds	r3, #4
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a0e      	ldr	r2, [pc, #56]	; (8002298 <OSPI_Init+0x13c>)
 800225e:	60d3      	str	r3, [r2, #12]
            DBG("Found config: %s\n", flash.name);
 8002260:	4b0d      	ldr	r3, [pc, #52]	; (8002298 <OSPI_Init+0x13c>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	4619      	mov	r1, r3
 8002266:	4814      	ldr	r0, [pc, #80]	; (80022b8 <OSPI_Init+0x15c>)
 8002268:	f00f fca6 	bl	8011bb8 <iprintf>
            break;
 800226c:	e005      	b.n	800227a <OSPI_Init+0x11e>
    for (int i = 0; i < ARRAY_SIZE(jedec_map); i++) {
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	3301      	adds	r3, #1
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2b10      	cmp	r3, #16
 8002278:	d9cd      	bls.n	8002216 <OSPI_Init+0xba>
        }
    }

    if (flash.config->init_fn) {
 800227a:	4b07      	ldr	r3, [pc, #28]	; (8002298 <OSPI_Init+0x13c>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <OSPI_Init+0x130>
        flash.config->init_fn();
 8002284:	4b04      	ldr	r3, [pc, #16]	; (8002298 <OSPI_Init+0x13c>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	4798      	blx	r3
    }

    OSPI_EnableMemoryMappedMode();
 800228c:	f7ff fcf4 	bl	8001c78 <OSPI_EnableMemoryMappedMode>
}
 8002290:	bf00      	nop
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	20000028 	.word	0x20000028
 800229c:	2000002c 	.word	0x2000002c
 80022a0:	08013050 	.word	0x08013050
 80022a4:	0801306c 	.word	0x0801306c
 80022a8:	08014514 	.word	0x08014514
 80022ac:	08012cf4 	.word	0x08012cf4
 80022b0:	080130b8 	.word	0x080130b8
 80022b4:	080143ec 	.word	0x080143ec
 80022b8:	080130c8 	.word	0x080130c8

080022bc <lcd_backlight_set>:
	HAL_DAC_Stop(&hdac1, DAC_CHANNEL_1);
	HAL_DAC_Stop(&hdac1, DAC_CHANNEL_2);
	HAL_DAC_Stop(&hdac2, DAC_CHANNEL_1);
}

void lcd_backlight_set(uint8_t brightness) {
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	71fb      	strb	r3, [r7, #7]
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_8B_R, brightness);
 80022c6:	79fb      	ldrb	r3, [r7, #7]
 80022c8:	2208      	movs	r2, #8
 80022ca:	2100      	movs	r1, #0
 80022cc:	480f      	ldr	r0, [pc, #60]	; (800230c <lcd_backlight_set+0x50>)
 80022ce:	f003 fff6 	bl	80062be <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_8B_R, brightness);
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	2208      	movs	r2, #8
 80022d6:	2110      	movs	r1, #16
 80022d8:	480c      	ldr	r0, [pc, #48]	; (800230c <lcd_backlight_set+0x50>)
 80022da:	f003 fff0 	bl	80062be <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_8B_R, brightness);
 80022de:	79fb      	ldrb	r3, [r7, #7]
 80022e0:	2208      	movs	r2, #8
 80022e2:	2100      	movs	r1, #0
 80022e4:	480a      	ldr	r0, [pc, #40]	; (8002310 <lcd_backlight_set+0x54>)
 80022e6:	f003 ffea 	bl	80062be <HAL_DAC_SetValue>

	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80022ea:	2100      	movs	r1, #0
 80022ec:	4807      	ldr	r0, [pc, #28]	; (800230c <lcd_backlight_set+0x50>)
 80022ee:	f003 ff94 	bl	800621a <HAL_DAC_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 80022f2:	2110      	movs	r1, #16
 80022f4:	4805      	ldr	r0, [pc, #20]	; (800230c <lcd_backlight_set+0x50>)
 80022f6:	f003 ff90 	bl	800621a <HAL_DAC_Start>
	HAL_DAC_Start(&hdac2, DAC_CHANNEL_1);
 80022fa:	2100      	movs	r1, #0
 80022fc:	4804      	ldr	r0, [pc, #16]	; (8002310 <lcd_backlight_set+0x54>)
 80022fe:	f003 ff8c 	bl	800621a <HAL_DAC_Start>
}
 8002302:	bf00      	nop
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	20000274 	.word	0x20000274
 8002310:	20000288 	.word	0x20000288

08002314 <lcd_init>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
	// Pull reset line(?) low. (Flakey without this)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
}

void lcd_init(SPI_HandleTypeDef *spi, LTDC_HandleTypeDef *ltdc) {
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
// Wake
// Enable 3.3v
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 800231e:	2200      	movs	r2, #0
 8002320:	2102      	movs	r1, #2
 8002322:	489c      	ldr	r0, [pc, #624]	; (8002594 <lcd_init+0x280>)
 8002324:	f007 fa44 	bl	80097b0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002328:	2001      	movs	r0, #1
 800232a:	f001 feef 	bl	800410c <HAL_Delay>
	// Enable 1.8V
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 800232e:	2201      	movs	r2, #1
 8002330:	2110      	movs	r1, #16
 8002332:	4898      	ldr	r0, [pc, #608]	; (8002594 <lcd_init+0x280>)
 8002334:	f007 fa3c 	bl	80097b0 <HAL_GPIO_WritePin>
	// also assert CS, not sure where to put this yet
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8002338:	2201      	movs	r2, #1
 800233a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800233e:	4896      	ldr	r0, [pc, #600]	; (8002598 <lcd_init+0x284>)
 8002340:	f007 fa36 	bl	80097b0 <HAL_GPIO_WritePin>
	HAL_Delay(7);
 8002344:	2007      	movs	r0, #7
 8002346:	f001 fee1 	bl	800410c <HAL_Delay>

// HAL_SPI_Transmit(spi, (uint8_t *)"\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55", 10, 100);
	// Lets go, bootup sequence.
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
 800234a:	2201      	movs	r2, #1
 800234c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002350:	4890      	ldr	r0, [pc, #576]	; (8002594 <lcd_init+0x280>)
 8002352:	f007 fa2d 	bl	80097b0 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8002356:	2002      	movs	r0, #2
 8002358:	f001 fed8 	bl	800410c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 800235c:	2200      	movs	r2, #0
 800235e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002362:	488c      	ldr	r0, [pc, #560]	; (8002594 <lcd_init+0x280>)
 8002364:	f007 fa24 	bl	80097b0 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8002368:	2002      	movs	r0, #2
 800236a:	f001 fecf 	bl	800410c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
 800236e:	2201      	movs	r2, #1
 8002370:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002374:	4887      	ldr	r0, [pc, #540]	; (8002594 <lcd_init+0x280>)
 8002376:	f007 fa1b 	bl	80097b0 <HAL_GPIO_WritePin>

	HAL_Delay(10);
 800237a:	200a      	movs	r0, #10
 800237c:	f001 fec6 	bl	800410c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8002380:	2200      	movs	r2, #0
 8002382:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002386:	4884      	ldr	r0, [pc, #528]	; (8002598 <lcd_init+0x284>)
 8002388:	f007 fa12 	bl	80097b0 <HAL_GPIO_WritePin>
	HAL_Delay(45);
 800238c:	202d      	movs	r0, #45	; 0x2d
 800238e:	f001 febd 	bl	800410c <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\x08\x80", 2, 100);
 8002392:	2364      	movs	r3, #100	; 0x64
 8002394:	2202      	movs	r2, #2
 8002396:	4981      	ldr	r1, [pc, #516]	; (800259c <lcd_init+0x288>)
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f00e f9e9 	bl	8010770 <HAL_SPI_Transmit>
	HAL_Delay(2);
 800239e:	2002      	movs	r0, #2
 80023a0:	f001 feb4 	bl	800410c <HAL_Delay>
	//wdog_refresh();

	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80023a4:	2201      	movs	r2, #1
 80023a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023aa:	487b      	ldr	r0, [pc, #492]	; (8002598 <lcd_init+0x284>)
 80023ac:	f007 fa00 	bl	80097b0 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80023b0:	2200      	movs	r2, #0
 80023b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023b6:	4878      	ldr	r0, [pc, #480]	; (8002598 <lcd_init+0x284>)
 80023b8:	f007 f9fa 	bl	80097b0 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80023bc:	2002      	movs	r0, #2
 80023be:	f001 fea5 	bl	800410c <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\x6E\x80", 2, 100);
 80023c2:	2364      	movs	r3, #100	; 0x64
 80023c4:	2202      	movs	r2, #2
 80023c6:	4976      	ldr	r1, [pc, #472]	; (80025a0 <lcd_init+0x28c>)
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f00e f9d1 	bl	8010770 <HAL_SPI_Transmit>
	HAL_Delay(2);
 80023ce:	2002      	movs	r0, #2
 80023d0:	f001 fe9c 	bl	800410c <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80023d4:	2201      	movs	r2, #1
 80023d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023da:	486f      	ldr	r0, [pc, #444]	; (8002598 <lcd_init+0x284>)
 80023dc:	f007 f9e8 	bl	80097b0 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80023e0:	2200      	movs	r2, #0
 80023e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023e6:	486c      	ldr	r0, [pc, #432]	; (8002598 <lcd_init+0x284>)
 80023e8:	f007 f9e2 	bl	80097b0 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80023ec:	2002      	movs	r0, #2
 80023ee:	f001 fe8d 	bl	800410c <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\x80\x80", 2, 100);
 80023f2:	2364      	movs	r3, #100	; 0x64
 80023f4:	2202      	movs	r2, #2
 80023f6:	496b      	ldr	r1, [pc, #428]	; (80025a4 <lcd_init+0x290>)
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f00e f9b9 	bl	8010770 <HAL_SPI_Transmit>

	HAL_Delay(2);
 80023fe:	2002      	movs	r0, #2
 8002400:	f001 fe84 	bl	800410c <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8002404:	2201      	movs	r2, #1
 8002406:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800240a:	4863      	ldr	r0, [pc, #396]	; (8002598 <lcd_init+0x284>)
 800240c:	f007 f9d0 	bl	80097b0 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8002410:	2200      	movs	r2, #0
 8002412:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002416:	4860      	ldr	r0, [pc, #384]	; (8002598 <lcd_init+0x284>)
 8002418:	f007 f9ca 	bl	80097b0 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 800241c:	2002      	movs	r0, #2
 800241e:	f001 fe75 	bl	800410c <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\x68\x00", 2, 100);
 8002422:	2364      	movs	r3, #100	; 0x64
 8002424:	2202      	movs	r2, #2
 8002426:	4960      	ldr	r1, [pc, #384]	; (80025a8 <lcd_init+0x294>)
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f00e f9a1 	bl	8010770 <HAL_SPI_Transmit>
	HAL_Delay(2);
 800242e:	2002      	movs	r0, #2
 8002430:	f001 fe6c 	bl	800410c <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8002434:	2201      	movs	r2, #1
 8002436:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800243a:	4857      	ldr	r0, [pc, #348]	; (8002598 <lcd_init+0x284>)
 800243c:	f007 f9b8 	bl	80097b0 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8002440:	2200      	movs	r2, #0
 8002442:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002446:	4854      	ldr	r0, [pc, #336]	; (8002598 <lcd_init+0x284>)
 8002448:	f007 f9b2 	bl	80097b0 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 800244c:	2002      	movs	r0, #2
 800244e:	f001 fe5d 	bl	800410c <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\xd0\x00", 2, 100);
 8002452:	2364      	movs	r3, #100	; 0x64
 8002454:	2202      	movs	r2, #2
 8002456:	4955      	ldr	r1, [pc, #340]	; (80025ac <lcd_init+0x298>)
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f00e f989 	bl	8010770 <HAL_SPI_Transmit>
	HAL_Delay(2);
 800245e:	2002      	movs	r0, #2
 8002460:	f001 fe54 	bl	800410c <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8002464:	2201      	movs	r2, #1
 8002466:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800246a:	484b      	ldr	r0, [pc, #300]	; (8002598 <lcd_init+0x284>)
 800246c:	f007 f9a0 	bl	80097b0 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8002470:	2200      	movs	r2, #0
 8002472:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002476:	4848      	ldr	r0, [pc, #288]	; (8002598 <lcd_init+0x284>)
 8002478:	f007 f99a 	bl	80097b0 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 800247c:	2002      	movs	r0, #2
 800247e:	f001 fe45 	bl	800410c <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\x1b\x00", 2, 100);
 8002482:	2364      	movs	r3, #100	; 0x64
 8002484:	2202      	movs	r2, #2
 8002486:	494a      	ldr	r1, [pc, #296]	; (80025b0 <lcd_init+0x29c>)
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f00e f971 	bl	8010770 <HAL_SPI_Transmit>

	HAL_Delay(2);
 800248e:	2002      	movs	r0, #2
 8002490:	f001 fe3c 	bl	800410c <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8002494:	2201      	movs	r2, #1
 8002496:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800249a:	483f      	ldr	r0, [pc, #252]	; (8002598 <lcd_init+0x284>)
 800249c:	f007 f988 	bl	80097b0 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80024a0:	2200      	movs	r2, #0
 80024a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024a6:	483c      	ldr	r0, [pc, #240]	; (8002598 <lcd_init+0x284>)
 80024a8:	f007 f982 	bl	80097b0 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80024ac:	2002      	movs	r0, #2
 80024ae:	f001 fe2d 	bl	800410c <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\xe0\x00", 2, 100);
 80024b2:	2364      	movs	r3, #100	; 0x64
 80024b4:	2202      	movs	r2, #2
 80024b6:	493f      	ldr	r1, [pc, #252]	; (80025b4 <lcd_init+0x2a0>)
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f00e f959 	bl	8010770 <HAL_SPI_Transmit>

	HAL_Delay(2);
 80024be:	2002      	movs	r0, #2
 80024c0:	f001 fe24 	bl	800410c <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80024c4:	2201      	movs	r2, #1
 80024c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024ca:	4833      	ldr	r0, [pc, #204]	; (8002598 <lcd_init+0x284>)
 80024cc:	f007 f970 	bl	80097b0 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80024d0:	2200      	movs	r2, #0
 80024d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024d6:	4830      	ldr	r0, [pc, #192]	; (8002598 <lcd_init+0x284>)
 80024d8:	f007 f96a 	bl	80097b0 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80024dc:	2002      	movs	r0, #2
 80024de:	f001 fe15 	bl	800410c <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\x6a\x80", 2, 100);
 80024e2:	2364      	movs	r3, #100	; 0x64
 80024e4:	2202      	movs	r2, #2
 80024e6:	4934      	ldr	r1, [pc, #208]	; (80025b8 <lcd_init+0x2a4>)
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f00e f941 	bl	8010770 <HAL_SPI_Transmit>

	HAL_Delay(2);
 80024ee:	2002      	movs	r0, #2
 80024f0:	f001 fe0c 	bl	800410c <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80024f4:	2201      	movs	r2, #1
 80024f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024fa:	4827      	ldr	r0, [pc, #156]	; (8002598 <lcd_init+0x284>)
 80024fc:	f007 f958 	bl	80097b0 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8002500:	2200      	movs	r2, #0
 8002502:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002506:	4824      	ldr	r0, [pc, #144]	; (8002598 <lcd_init+0x284>)
 8002508:	f007 f952 	bl	80097b0 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 800250c:	2002      	movs	r0, #2
 800250e:	f001 fdfd 	bl	800410c <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\x80\x00", 2, 100);
 8002512:	2364      	movs	r3, #100	; 0x64
 8002514:	2202      	movs	r2, #2
 8002516:	4929      	ldr	r1, [pc, #164]	; (80025bc <lcd_init+0x2a8>)
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f00e f929 	bl	8010770 <HAL_SPI_Transmit>
	HAL_Delay(2);
 800251e:	2002      	movs	r0, #2
 8002520:	f001 fdf4 	bl	800410c <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8002524:	2201      	movs	r2, #1
 8002526:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800252a:	481b      	ldr	r0, [pc, #108]	; (8002598 <lcd_init+0x284>)
 800252c:	f007 f940 	bl	80097b0 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8002530:	2200      	movs	r2, #0
 8002532:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002536:	4818      	ldr	r0, [pc, #96]	; (8002598 <lcd_init+0x284>)
 8002538:	f007 f93a 	bl	80097b0 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 800253c:	2002      	movs	r0, #2
 800253e:	f001 fde5 	bl	800410c <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\x14\x80", 2, 100);
 8002542:	2364      	movs	r3, #100	; 0x64
 8002544:	2202      	movs	r2, #2
 8002546:	491e      	ldr	r1, [pc, #120]	; (80025c0 <lcd_init+0x2ac>)
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f00e f911 	bl	8010770 <HAL_SPI_Transmit>
	HAL_Delay(2);
 800254e:	2002      	movs	r0, #2
 8002550:	f001 fddc 	bl	800410c <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8002554:	2201      	movs	r2, #1
 8002556:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800255a:	480f      	ldr	r0, [pc, #60]	; (8002598 <lcd_init+0x284>)
 800255c:	f007 f928 	bl	80097b0 <HAL_GPIO_WritePin>
	//wdog_refresh();

	HAL_LTDC_SetAddress(ltdc, (uint32_t) &fb1, 0);
 8002560:	4b18      	ldr	r3, [pc, #96]	; (80025c4 <lcd_init+0x2b0>)
 8002562:	2200      	movs	r2, #0
 8002564:	4619      	mov	r1, r3
 8002566:	6838      	ldr	r0, [r7, #0]
 8002568:	f007 fb26 	bl	8009bb8 <HAL_LTDC_SetAddress>

	memset(fb1, 0, sizeof(framebuffer1));
 800256c:	4b15      	ldr	r3, [pc, #84]	; (80025c4 <lcd_init+0x2b0>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f44f 3216 	mov.w	r2, #153600	; 0x25800
 8002574:	2100      	movs	r1, #0
 8002576:	4618      	mov	r0, r3
 8002578:	f00f fc84 	bl	8011e84 <memset>
	memset(fb2, 0, sizeof(framebuffer1));
 800257c:	4b12      	ldr	r3, [pc, #72]	; (80025c8 <lcd_init+0x2b4>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f44f 3216 	mov.w	r2, #153600	; 0x25800
 8002584:	2100      	movs	r1, #0
 8002586:	4618      	mov	r0, r3
 8002588:	f00f fc7c 	bl	8011e84 <memset>
}
 800258c:	bf00      	nop
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	58020c00 	.word	0x58020c00
 8002598:	58020400 	.word	0x58020400
 800259c:	080130dc 	.word	0x080130dc
 80025a0:	080130e0 	.word	0x080130e0
 80025a4:	080130e4 	.word	0x080130e4
 80025a8:	080130e8 	.word	0x080130e8
 80025ac:	080130ec 	.word	0x080130ec
 80025b0:	080130f0 	.word	0x080130f0
 80025b4:	080130f4 	.word	0x080130f4
 80025b8:	080130f8 	.word	0x080130f8
 80025bc:	080130fc 	.word	0x080130fc
 80025c0:	08013100 	.word	0x08013100
 80025c4:	2000003c 	.word	0x2000003c
 80025c8:	20000040 	.word	0x20000040

080025cc <HAL_LTDC_ReloadEventCallback>:

void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc) {
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
	frame_counter++;
 80025d4:	4b0d      	ldr	r3, [pc, #52]	; (800260c <HAL_LTDC_ReloadEventCallback+0x40>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	3301      	adds	r3, #1
 80025da:	4a0c      	ldr	r2, [pc, #48]	; (800260c <HAL_LTDC_ReloadEventCallback+0x40>)
 80025dc:	6013      	str	r3, [r2, #0]
	if (active_framebuffer == 0) {
 80025de:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <HAL_LTDC_ReloadEventCallback+0x44>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d107      	bne.n	80025f6 <HAL_LTDC_ReloadEventCallback+0x2a>
		HAL_LTDC_SetAddress(hltdc, (uint32_t) fb2, 0);
 80025e6:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <HAL_LTDC_ReloadEventCallback+0x48>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2200      	movs	r2, #0
 80025ec:	4619      	mov	r1, r3
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f007 fae2 	bl	8009bb8 <HAL_LTDC_SetAddress>
	} else {
		HAL_LTDC_SetAddress(hltdc, (uint32_t) fb1, 0);
	}
}
 80025f4:	e006      	b.n	8002604 <HAL_LTDC_ReloadEventCallback+0x38>
		HAL_LTDC_SetAddress(hltdc, (uint32_t) fb1, 0);
 80025f6:	4b08      	ldr	r3, [pc, #32]	; (8002618 <HAL_LTDC_ReloadEventCallback+0x4c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2200      	movs	r2, #0
 80025fc:	4619      	mov	r1, r3
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f007 fada 	bl	8009bb8 <HAL_LTDC_SetAddress>
}
 8002604:	bf00      	nop
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	2000020c 	.word	0x2000020c
 8002610:	20000208 	.word	0x20000208
 8002614:	20000040 	.word	0x20000040
 8002618:	2000003c 	.word	0x2000003c

0800261c <lcd_swap>:

uint32_t is_lcd_swap_pending(void) {
	return (uint32_t) ((hltdc.Instance->SRCR) & (LTDC_SRCR_VBR | LTDC_SRCR_IMR));
}

void lcd_swap(void) {
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
	HAL_LTDC_Reload(&hltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 8002620:	2102      	movs	r1, #2
 8002622:	4807      	ldr	r0, [pc, #28]	; (8002640 <lcd_swap+0x24>)
 8002624:	f007 fafe 	bl	8009c24 <HAL_LTDC_Reload>
	active_framebuffer = active_framebuffer ? 0 : 1;
 8002628:	4b06      	ldr	r3, [pc, #24]	; (8002644 <lcd_swap+0x28>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	bf0c      	ite	eq
 8002630:	2301      	moveq	r3, #1
 8002632:	2300      	movne	r3, #0
 8002634:	b2db      	uxtb	r3, r3
 8002636:	461a      	mov	r2, r3
 8002638:	4b02      	ldr	r3, [pc, #8]	; (8002644 <lcd_swap+0x28>)
 800263a:	601a      	str	r2, [r3, #0]
}
 800263c:	bf00      	nop
 800263e:	bd80      	pop	{r7, pc}
 8002640:	20000304 	.word	0x20000304
 8002644:	20000208 	.word	0x20000208

08002648 <lcd_sync>:

void lcd_sync(void) {
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
	void *active = lcd_get_active_buffer();
 800264e:	f000 f813 	bl	8002678 <lcd_get_active_buffer>
 8002652:	6078      	str	r0, [r7, #4]
	void *inactive = lcd_get_inactive_buffer();
 8002654:	f000 f826 	bl	80026a4 <lcd_get_inactive_buffer>
 8002658:	6038      	str	r0, [r7, #0]

	if (active != inactive) {
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	429a      	cmp	r2, r3
 8002660:	d005      	beq.n	800266e <lcd_sync+0x26>
		memcpy(inactive, active, sizeof(framebuffer1));
 8002662:	f44f 3216 	mov.w	r2, #153600	; 0x25800
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	6838      	ldr	r0, [r7, #0]
 800266a:	f00f fc96 	bl	8011f9a <memcpy>
	}
}
 800266e:	bf00      	nop
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
	...

08002678 <lcd_get_active_buffer>:

void* lcd_get_active_buffer(void) {
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
	return active_framebuffer ? fb2 : fb1;
 800267c:	4b06      	ldr	r3, [pc, #24]	; (8002698 <lcd_get_active_buffer+0x20>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d002      	beq.n	800268a <lcd_get_active_buffer+0x12>
 8002684:	4b05      	ldr	r3, [pc, #20]	; (800269c <lcd_get_active_buffer+0x24>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	e001      	b.n	800268e <lcd_get_active_buffer+0x16>
 800268a:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <lcd_get_active_buffer+0x28>)
 800268c:	681b      	ldr	r3, [r3, #0]
}
 800268e:	4618      	mov	r0, r3
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	20000208 	.word	0x20000208
 800269c:	20000040 	.word	0x20000040
 80026a0:	2000003c 	.word	0x2000003c

080026a4 <lcd_get_inactive_buffer>:

void* lcd_get_inactive_buffer(void) {
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
	return active_framebuffer ? fb1 : fb2;
 80026a8:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <lcd_get_inactive_buffer+0x20>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d002      	beq.n	80026b6 <lcd_get_inactive_buffer+0x12>
 80026b0:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <lcd_get_inactive_buffer+0x24>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	e001      	b.n	80026ba <lcd_get_inactive_buffer+0x16>
 80026b6:	4b05      	ldr	r3, [pc, #20]	; (80026cc <lcd_get_inactive_buffer+0x28>)
 80026b8:	681b      	ldr	r3, [r3, #0]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	20000208 	.word	0x20000208
 80026c8:	2000003c 	.word	0x2000003c
 80026cc:	20000040 	.word	0x20000040

080026d0 <lcd_wait_for_vblank>:
void lcd_set_buffers(uint16_t *buf1, uint16_t *buf2) {
	fb1 = buf1;
	fb2 = buf2;
}

void lcd_wait_for_vblank(void) {
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
	uint32_t old_counter = frame_counter;
 80026d6:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <lcd_wait_for_vblank+0x28>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	607b      	str	r3, [r7, #4]
	while (old_counter == frame_counter) {
 80026dc:	e000      	b.n	80026e0 <lcd_wait_for_vblank+0x10>
		__asm("nop");
 80026de:	bf00      	nop
	while (old_counter == frame_counter) {
 80026e0:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <lcd_wait_for_vblank+0x28>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d0f9      	beq.n	80026de <lcd_wait_for_vblank+0xe>
	}
}
 80026ea:	bf00      	nop
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	2000020c 	.word	0x2000020c

080026fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b088      	sub	sp, #32
 8002700:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002702:	f001 fc71 	bl	8003fe8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002706:	f000 f86d 	bl	80027e4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800270a:	f000 f8ed 	bl	80028e8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800270e:	f000 fc93 	bl	8003038 <MX_GPIO_Init>
  MX_DMA_Init();
 8002712:	f000 fc71 	bl	8002ff8 <MX_DMA_Init>
  MX_LTDC_Init();
 8002716:	f000 fa2f 	bl	8002b78 <MX_LTDC_Init>
  MX_SPI2_Init();
 800271a:	f000 fbc3 	bl	8002ea4 <MX_SPI2_Init>
  MX_OCTOSPI1_Init();
 800271e:	f000 faab 	bl	8002c78 <MX_OCTOSPI1_Init>
  MX_SAI1_Init();
 8002722:	f000 fb89 	bl	8002e38 <MX_SAI1_Init>
  MX_RTC_Init();
 8002726:	f000 fb07 	bl	8002d38 <MX_RTC_Init>
  MX_DAC1_Init();
 800272a:	f000 f999 	bl	8002a60 <MX_DAC1_Init>
  MX_DAC2_Init();
 800272e:	f000 f9d3 	bl	8002ad8 <MX_DAC2_Init>
  MX_ADC1_Init();
 8002732:	f000 f91d 	bl	8002970 <MX_ADC1_Init>
  MX_TIM1_Init();
 8002736:	f000 fc0b 	bl	8002f50 <MX_TIM1_Init>
  MX_DMA2D_Init();
 800273a:	f000 f9ff 	bl	8002b3c <MX_DMA2D_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800273e:	f000 f90b 	bl	8002958 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	lcd_init(&hspi2, &hltdc);
 8002742:	4923      	ldr	r1, [pc, #140]	; (80027d0 <main+0xd4>)
 8002744:	4823      	ldr	r0, [pc, #140]	; (80027d4 <main+0xd8>)
 8002746:	f7ff fde5 	bl	8002314 <lcd_init>
	lcd_backlight_set(backlightLevels[6]);
 800274a:	23b2      	movs	r3, #178	; 0xb2
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff fdb5 	bl	80022bc <lcd_backlight_set>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	OSPI_Init(&hospi1);
 8002752:	4821      	ldr	r0, [pc, #132]	; (80027d8 <main+0xdc>)
 8002754:	f7ff fd02 	bl	800215c <OSPI_Init>

	// Sanity check, sometimes this is triggered
	uint32_t add = 0x90000000;
 8002758:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 800275c:	61fb      	str	r3, [r7, #28]
	uint32_t *ptr = (uint32_t*) add;
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	61bb      	str	r3, [r7, #24]
	if (*ptr == 0x88888888) {
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f1b3 3f88 	cmp.w	r3, #2290649224	; 0x88888888
 800276a:	d101      	bne.n	8002770 <main+0x74>
		Error_Handler();
 800276c:	f000 fd64 	bl	8003238 <Error_Handler>
	}

	bq24072_init();
 8002770:	f7ff f86e 	bl	8001850 <bq24072_init>

	gw_audio_init();
 8002774:	f7fe fce0 	bl	8001138 <gw_audio_init>

	RTC_TimeTypeDef sTime = { 0 };
 8002778:	1d3b      	adds	r3, r7, #4
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	605a      	str	r2, [r3, #4]
 8002780:	609a      	str	r2, [r3, #8]
 8002782:	60da      	str	r2, [r3, #12]
 8002784:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 8002786:	2300      	movs	r3, #0
 8002788:	603b      	str	r3, [r7, #0]
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800278a:	1d3b      	adds	r3, r7, #4
 800278c:	2200      	movs	r2, #0
 800278e:	4619      	mov	r1, r3
 8002790:	4812      	ldr	r0, [pc, #72]	; (80027dc <main+0xe0>)
 8002792:	f00c fd39 	bl	800f208 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002796:	463b      	mov	r3, r7
 8002798:	2200      	movs	r2, #0
 800279a:	4619      	mov	r1, r3
 800279c:	480f      	ldr	r0, [pc, #60]	; (80027dc <main+0xe0>)
 800279e:	f00c fe17 	bl	800f3d0 <HAL_RTC_GetDate>
	HAL_ADC_Start(&hadc1);
 80027a2:	480f      	ldr	r0, [pc, #60]	; (80027e0 <main+0xe4>)
 80027a4:	f002 f876 	bl	8004894 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80027a8:	f04f 31ff 	mov.w	r1, #4294967295
 80027ac:	480c      	ldr	r0, [pc, #48]	; (80027e0 <main+0xe4>)
 80027ae:	f002 f92b 	bl	8004a08 <HAL_ADC_PollForConversion>
	srand(HAL_ADC_GetValue(&hadc1) ^ sTime.SubSeconds);
 80027b2:	480b      	ldr	r0, [pc, #44]	; (80027e0 <main+0xe4>)
 80027b4:	f002 fb6a 	bl	8004e8c <HAL_ADC_GetValue>
 80027b8:	4602      	mov	r2, r0
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	4053      	eors	r3, r2
 80027be:	4618      	mov	r0, r3
 80027c0:	f00f f88a 	bl	80118d8 <srand>

	game_init();
 80027c4:	f7fd fde4 	bl	8000390 <game_init>

	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		game_loop();
 80027c8:	f7fd fe34 	bl	8000434 <game_loop>
 80027cc:	e7fc      	b.n	80027c8 <main+0xcc>
 80027ce:	bf00      	nop
 80027d0:	20000304 	.word	0x20000304
 80027d4:	20000540 	.word	0x20000540
 80027d8:	200003ac 	.word	0x200003ac
 80027dc:	20000408 	.word	0x20000408
 80027e0:	20000210 	.word	0x20000210

080027e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b09c      	sub	sp, #112	; 0x70
 80027e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027ee:	224c      	movs	r2, #76	; 0x4c
 80027f0:	2100      	movs	r1, #0
 80027f2:	4618      	mov	r0, r3
 80027f4:	f00f fb46 	bl	8011e84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027f8:	1d3b      	adds	r3, r7, #4
 80027fa:	2220      	movs	r2, #32
 80027fc:	2100      	movs	r1, #0
 80027fe:	4618      	mov	r0, r3
 8002800:	f00f fb40 	bl	8011e84 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8002804:	4b36      	ldr	r3, [pc, #216]	; (80028e0 <SystemClock_Config+0xfc>)
 8002806:	f04f 32ff 	mov.w	r2, #4294967295
 800280a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800280e:	2002      	movs	r0, #2
 8002810:	f008 ffea 	bl	800b7e8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002814:	2300      	movs	r3, #0
 8002816:	603b      	str	r3, [r7, #0]
 8002818:	4b32      	ldr	r3, [pc, #200]	; (80028e4 <SystemClock_Config+0x100>)
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	4a31      	ldr	r2, [pc, #196]	; (80028e4 <SystemClock_Config+0x100>)
 800281e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002822:	6193      	str	r3, [r2, #24]
 8002824:	4b2f      	ldr	r3, [pc, #188]	; (80028e4 <SystemClock_Config+0x100>)
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800282c:	603b      	str	r3, [r7, #0]
 800282e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002830:	bf00      	nop
 8002832:	4b2c      	ldr	r3, [pc, #176]	; (80028e4 <SystemClock_Config+0x100>)
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800283a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800283e:	d1f8      	bne.n	8002832 <SystemClock_Config+0x4e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002840:	f008 ffc2 	bl	800b7c8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002844:	4b26      	ldr	r3, [pc, #152]	; (80028e0 <SystemClock_Config+0xfc>)
 8002846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002848:	4a25      	ldr	r2, [pc, #148]	; (80028e0 <SystemClock_Config+0xfc>)
 800284a:	f023 0318 	bic.w	r3, r3, #24
 800284e:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8002850:	230e      	movs	r3, #14
 8002852:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002854:	2301      	movs	r3, #1
 8002856:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002858:	2301      	movs	r3, #1
 800285a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800285c:	2340      	movs	r3, #64	; 0x40
 800285e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002860:	2301      	movs	r3, #1
 8002862:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002864:	2302      	movs	r3, #2
 8002866:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002868:	2300      	movs	r3, #0
 800286a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800286c:	2310      	movs	r3, #16
 800286e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 140;
 8002870:	238c      	movs	r3, #140	; 0x8c
 8002872:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002874:	2302      	movs	r3, #2
 8002876:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002878:	2302      	movs	r3, #2
 800287a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800287c:	2302      	movs	r3, #2
 800287e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8002880:	2308      	movs	r3, #8
 8002882:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002884:	2300      	movs	r3, #0
 8002886:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002888:	2300      	movs	r3, #0
 800288a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800288c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002890:	4618      	mov	r0, r3
 8002892:	f008 ffe3 	bl	800b85c <HAL_RCC_OscConfig>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800289c:	f000 fccc 	bl	8003238 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028a0:	233f      	movs	r3, #63	; 0x3f
 80028a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028a4:	2303      	movs	r3, #3
 80028a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80028a8:	2300      	movs	r3, #0
 80028aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80028ac:	2300      	movs	r3, #0
 80028ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80028b0:	2340      	movs	r3, #64	; 0x40
 80028b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80028b4:	2340      	movs	r3, #64	; 0x40
 80028b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80028b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028bc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80028be:	2340      	movs	r3, #64	; 0x40
 80028c0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80028c2:	1d3b      	adds	r3, r7, #4
 80028c4:	2106      	movs	r1, #6
 80028c6:	4618      	mov	r0, r3
 80028c8:	f009 fbfa 	bl	800c0c0 <HAL_RCC_ClockConfig>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80028d2:	f000 fcb1 	bl	8003238 <Error_Handler>
  }
}
 80028d6:	bf00      	nop
 80028d8:	3770      	adds	r7, #112	; 0x70
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	58024400 	.word	0x58024400
 80028e4:	58024800 	.word	0x58024800

080028e8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b0b0      	sub	sp, #192	; 0xc0
 80028ec:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028ee:	463b      	mov	r3, r7
 80028f0:	22c0      	movs	r2, #192	; 0xc0
 80028f2:	2100      	movs	r1, #0
 80028f4:	4618      	mov	r0, r3
 80028f6:	f00f fac5 	bl	8011e84 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_CKPER
 80028fa:	4a16      	ldr	r2, [pc, #88]	; (8002954 <PeriphCommonClock_Config+0x6c>)
 80028fc:	f04f 0300 	mov.w	r3, #0
 8002900:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLL3.PLL3M = 4;
 8002904:	2304      	movs	r3, #4
 8002906:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 9;
 8002908:	2309      	movs	r3, #9
 800290a:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 800290c:	2302      	movs	r3, #2
 800290e:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8002910:	2302      	movs	r3, #2
 8002912:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 24;
 8002914:	2318      	movs	r3, #24
 8002916:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8002918:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800291c:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800291e:	2300      	movs	r3, #0
 8002920:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8002922:	2300      	movs	r3, #0
 8002924:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8002926:	2300      	movs	r3, #0
 8002928:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 800292a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800292e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8002932:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002936:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800293a:	463b      	mov	r3, r7
 800293c:	4618      	mov	r0, r3
 800293e:	f009 ff35 	bl	800c7ac <HAL_RCCEx_PeriphCLKConfig>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <PeriphCommonClock_Config+0x64>
  {
    Error_Handler();
 8002948:	f000 fc76 	bl	8003238 <Error_Handler>
  }
}
 800294c:	bf00      	nop
 800294e:	37c0      	adds	r7, #192	; 0xc0
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	a0080000 	.word	0xa0080000

08002958 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* OCTOSPI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 0, 0);
 800295c:	2200      	movs	r2, #0
 800295e:	2100      	movs	r1, #0
 8002960:	205c      	movs	r0, #92	; 0x5c
 8002962:	f003 fc00 	bl	8006166 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 8002966:	205c      	movs	r0, #92	; 0x5c
 8002968:	f003 fc17 	bl	800619a <HAL_NVIC_EnableIRQ>
}
 800296c:	bf00      	nop
 800296e:	bd80      	pop	{r7, pc}

08002970 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b08a      	sub	sp, #40	; 0x28
 8002974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002976:	f107 031c 	add.w	r3, r7, #28
 800297a:	2200      	movs	r2, #0
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	605a      	str	r2, [r3, #4]
 8002980:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002982:	463b      	mov	r3, r7
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	605a      	str	r2, [r3, #4]
 800298a:	609a      	str	r2, [r3, #8]
 800298c:	60da      	str	r2, [r3, #12]
 800298e:	611a      	str	r2, [r3, #16]
 8002990:	615a      	str	r2, [r3, #20]
 8002992:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002994:	4b2f      	ldr	r3, [pc, #188]	; (8002a54 <MX_ADC1_Init+0xe4>)
 8002996:	4a30      	ldr	r2, [pc, #192]	; (8002a58 <MX_ADC1_Init+0xe8>)
 8002998:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800299a:	4b2e      	ldr	r3, [pc, #184]	; (8002a54 <MX_ADC1_Init+0xe4>)
 800299c:	2200      	movs	r2, #0
 800299e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80029a0:	4b2c      	ldr	r3, [pc, #176]	; (8002a54 <MX_ADC1_Init+0xe4>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80029a6:	4b2b      	ldr	r3, [pc, #172]	; (8002a54 <MX_ADC1_Init+0xe4>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80029ac:	4b29      	ldr	r3, [pc, #164]	; (8002a54 <MX_ADC1_Init+0xe4>)
 80029ae:	2204      	movs	r2, #4
 80029b0:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80029b2:	4b28      	ldr	r3, [pc, #160]	; (8002a54 <MX_ADC1_Init+0xe4>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80029b8:	4b26      	ldr	r3, [pc, #152]	; (8002a54 <MX_ADC1_Init+0xe4>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80029be:	4b25      	ldr	r3, [pc, #148]	; (8002a54 <MX_ADC1_Init+0xe4>)
 80029c0:	2201      	movs	r2, #1
 80029c2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80029c4:	4b23      	ldr	r3, [pc, #140]	; (8002a54 <MX_ADC1_Init+0xe4>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80029ca:	4b22      	ldr	r3, [pc, #136]	; (8002a54 <MX_ADC1_Init+0xe4>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80029d0:	4b20      	ldr	r3, [pc, #128]	; (8002a54 <MX_ADC1_Init+0xe4>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80029d6:	4b1f      	ldr	r3, [pc, #124]	; (8002a54 <MX_ADC1_Init+0xe4>)
 80029d8:	2200      	movs	r2, #0
 80029da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80029dc:	4b1d      	ldr	r3, [pc, #116]	; (8002a54 <MX_ADC1_Init+0xe4>)
 80029de:	2200      	movs	r2, #0
 80029e0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80029e2:	4b1c      	ldr	r3, [pc, #112]	; (8002a54 <MX_ADC1_Init+0xe4>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80029e8:	4b1a      	ldr	r3, [pc, #104]	; (8002a54 <MX_ADC1_Init+0xe4>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80029f0:	4818      	ldr	r0, [pc, #96]	; (8002a54 <MX_ADC1_Init+0xe4>)
 80029f2:	f001 fdf5 	bl	80045e0 <HAL_ADC_Init>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80029fc:	f000 fc1c 	bl	8003238 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002a00:	2300      	movs	r3, #0
 8002a02:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002a04:	f107 031c 	add.w	r3, r7, #28
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4812      	ldr	r0, [pc, #72]	; (8002a54 <MX_ADC1_Init+0xe4>)
 8002a0c:	f003 fa1e 	bl	8005e4c <HAL_ADCEx_MultiModeConfigChannel>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8002a16:	f000 fc0f 	bl	8003238 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002a1a:	4b10      	ldr	r3, [pc, #64]	; (8002a5c <MX_ADC1_Init+0xec>)
 8002a1c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002a1e:	2306      	movs	r3, #6
 8002a20:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002a22:	2300      	movs	r3, #0
 8002a24:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002a26:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002a2a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002a2c:	2304      	movs	r3, #4
 8002a2e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002a30:	2300      	movs	r3, #0
 8002a32:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8002a34:	2300      	movs	r3, #0
 8002a36:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a38:	463b      	mov	r3, r7
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	4805      	ldr	r0, [pc, #20]	; (8002a54 <MX_ADC1_Init+0xe4>)
 8002a3e:	f002 fc61 	bl	8005304 <HAL_ADC_ConfigChannel>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8002a48:	f000 fbf6 	bl	8003238 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002a4c:	bf00      	nop
 8002a4e:	3728      	adds	r7, #40	; 0x28
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	20000210 	.word	0x20000210
 8002a58:	40022000 	.word	0x40022000
 8002a5c:	10c00010 	.word	0x10c00010

08002a60 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b08a      	sub	sp, #40	; 0x28
 8002a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002a66:	1d3b      	adds	r3, r7, #4
 8002a68:	2224      	movs	r2, #36	; 0x24
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f00f fa09 	bl	8011e84 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8002a72:	4b17      	ldr	r3, [pc, #92]	; (8002ad0 <MX_DAC1_Init+0x70>)
 8002a74:	4a17      	ldr	r2, [pc, #92]	; (8002ad4 <MX_DAC1_Init+0x74>)
 8002a76:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002a78:	4815      	ldr	r0, [pc, #84]	; (8002ad0 <MX_DAC1_Init+0x70>)
 8002a7a:	f003 fbac 	bl	80061d6 <HAL_DAC_Init>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8002a84:	f000 fbd8 	bl	8003238 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002a90:	2300      	movs	r3, #0
 8002a92:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8002a94:	2301      	movs	r3, #1
 8002a96:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002a9c:	1d3b      	adds	r3, r7, #4
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	480b      	ldr	r0, [pc, #44]	; (8002ad0 <MX_DAC1_Init+0x70>)
 8002aa4:	f003 fc30 	bl	8006308 <HAL_DAC_ConfigChannel>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8002aae:	f000 fbc3 	bl	8003238 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002ab2:	1d3b      	adds	r3, r7, #4
 8002ab4:	2210      	movs	r2, #16
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4805      	ldr	r0, [pc, #20]	; (8002ad0 <MX_DAC1_Init+0x70>)
 8002aba:	f003 fc25 	bl	8006308 <HAL_DAC_ConfigChannel>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8002ac4:	f000 fbb8 	bl	8003238 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8002ac8:	bf00      	nop
 8002aca:	3728      	adds	r7, #40	; 0x28
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	20000274 	.word	0x20000274
 8002ad4:	40007400 	.word	0x40007400

08002ad8 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b08a      	sub	sp, #40	; 0x28
 8002adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002ade:	1d3b      	adds	r3, r7, #4
 8002ae0:	2224      	movs	r2, #36	; 0x24
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f00f f9cd 	bl	8011e84 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8002aea:	4b12      	ldr	r3, [pc, #72]	; (8002b34 <MX_DAC2_Init+0x5c>)
 8002aec:	4a12      	ldr	r2, [pc, #72]	; (8002b38 <MX_DAC2_Init+0x60>)
 8002aee:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8002af0:	4810      	ldr	r0, [pc, #64]	; (8002b34 <MX_DAC2_Init+0x5c>)
 8002af2:	f003 fb70 	bl	80061d6 <HAL_DAC_Init>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8002afc:	f000 fb9c 	bl	8003238 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002b00:	2300      	movs	r3, #0
 8002b02:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002b04:	2300      	movs	r3, #0
 8002b06:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002b10:	2300      	movs	r3, #0
 8002b12:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002b14:	1d3b      	adds	r3, r7, #4
 8002b16:	2200      	movs	r2, #0
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4806      	ldr	r0, [pc, #24]	; (8002b34 <MX_DAC2_Init+0x5c>)
 8002b1c:	f003 fbf4 	bl	8006308 <HAL_DAC_ConfigChannel>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <MX_DAC2_Init+0x52>
  {
    Error_Handler();
 8002b26:	f000 fb87 	bl	8003238 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8002b2a:	bf00      	nop
 8002b2c:	3728      	adds	r7, #40	; 0x28
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	20000288 	.word	0x20000288
 8002b38:	58003400 	.word	0x58003400

08002b3c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8002b40:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <MX_DMA2D_Init+0x34>)
 8002b42:	4a0c      	ldr	r2, [pc, #48]	; (8002b74 <MX_DMA2D_Init+0x38>)
 8002b44:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 8002b46:	4b0a      	ldr	r3, [pc, #40]	; (8002b70 <MX_DMA2D_Init+0x34>)
 8002b48:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002b4c:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8002b4e:	4b08      	ldr	r3, [pc, #32]	; (8002b70 <MX_DMA2D_Init+0x34>)
 8002b50:	2202      	movs	r2, #2
 8002b52:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8002b54:	4b06      	ldr	r3, [pc, #24]	; (8002b70 <MX_DMA2D_Init+0x34>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	60da      	str	r2, [r3, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8002b5a:	4805      	ldr	r0, [pc, #20]	; (8002b70 <MX_DMA2D_Init+0x34>)
 8002b5c:	f006 fbfc 	bl	8009358 <HAL_DMA2D_Init>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <MX_DMA2D_Init+0x2e>
  {
    Error_Handler();
 8002b66:	f000 fb67 	bl	8003238 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8002b6a:	bf00      	nop
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	2000029c 	.word	0x2000029c
 8002b74:	52001000 	.word	0x52001000

08002b78 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b08e      	sub	sp, #56	; 0x38
 8002b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002b7e:	1d3b      	adds	r3, r7, #4
 8002b80:	2234      	movs	r2, #52	; 0x34
 8002b82:	2100      	movs	r1, #0
 8002b84:	4618      	mov	r0, r3
 8002b86:	f00f f97d 	bl	8011e84 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8002b8a:	4b39      	ldr	r3, [pc, #228]	; (8002c70 <MX_LTDC_Init+0xf8>)
 8002b8c:	4a39      	ldr	r2, [pc, #228]	; (8002c74 <MX_LTDC_Init+0xfc>)
 8002b8e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002b90:	4b37      	ldr	r3, [pc, #220]	; (8002c70 <MX_LTDC_Init+0xf8>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002b96:	4b36      	ldr	r3, [pc, #216]	; (8002c70 <MX_LTDC_Init+0xf8>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002b9c:	4b34      	ldr	r3, [pc, #208]	; (8002c70 <MX_LTDC_Init+0xf8>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IIPC;
 8002ba2:	4b33      	ldr	r3, [pc, #204]	; (8002c70 <MX_LTDC_Init+0xf8>)
 8002ba4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ba8:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8002baa:	4b31      	ldr	r3, [pc, #196]	; (8002c70 <MX_LTDC_Init+0xf8>)
 8002bac:	2209      	movs	r2, #9
 8002bae:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8002bb0:	4b2f      	ldr	r3, [pc, #188]	; (8002c70 <MX_LTDC_Init+0xf8>)
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 60;
 8002bb6:	4b2e      	ldr	r3, [pc, #184]	; (8002c70 <MX_LTDC_Init+0xf8>)
 8002bb8:	223c      	movs	r2, #60	; 0x3c
 8002bba:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 7;
 8002bbc:	4b2c      	ldr	r3, [pc, #176]	; (8002c70 <MX_LTDC_Init+0xf8>)
 8002bbe:	2207      	movs	r2, #7
 8002bc0:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 380;
 8002bc2:	4b2b      	ldr	r3, [pc, #172]	; (8002c70 <MX_LTDC_Init+0xf8>)
 8002bc4:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8002bc8:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 247;
 8002bca:	4b29      	ldr	r3, [pc, #164]	; (8002c70 <MX_LTDC_Init+0xf8>)
 8002bcc:	22f7      	movs	r2, #247	; 0xf7
 8002bce:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 392;
 8002bd0:	4b27      	ldr	r3, [pc, #156]	; (8002c70 <MX_LTDC_Init+0xf8>)
 8002bd2:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8002bd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 255;
 8002bd8:	4b25      	ldr	r3, [pc, #148]	; (8002c70 <MX_LTDC_Init+0xf8>)
 8002bda:	22ff      	movs	r2, #255	; 0xff
 8002bdc:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002bde:	4b24      	ldr	r3, [pc, #144]	; (8002c70 <MX_LTDC_Init+0xf8>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002be6:	4b22      	ldr	r3, [pc, #136]	; (8002c70 <MX_LTDC_Init+0xf8>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002bee:	4b20      	ldr	r3, [pc, #128]	; (8002c70 <MX_LTDC_Init+0xf8>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002bf6:	481e      	ldr	r0, [pc, #120]	; (8002c70 <MX_LTDC_Init+0xf8>)
 8002bf8:	f006 fe18 	bl	800982c <HAL_LTDC_Init>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <MX_LTDC_Init+0x8e>
  {
    Error_Handler();
 8002c02:	f000 fb19 	bl	8003238 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002c06:	2300      	movs	r3, #0
 8002c08:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 320;
 8002c0a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002c0e:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8002c10:	2300      	movs	r3, #0
 8002c12:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 240;
 8002c14:	23f0      	movs	r3, #240	; 0xf0
 8002c16:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8002c18:	2302      	movs	r3, #2
 8002c1a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8002c1c:	23ff      	movs	r3, #255	; 0xff
 8002c1e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 255;
 8002c20:	23ff      	movs	r3, #255	; 0xff
 8002c22:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002c24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c28:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002c2a:	2305      	movs	r3, #5
 8002c2c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0x24000000;
 8002c2e:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8002c32:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 320;
 8002c34:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002c38:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 240;
 8002c3a:	23f0      	movs	r3, #240	; 0xf0
 8002c3c:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 255;
 8002c44:	23ff      	movs	r3, #255	; 0xff
 8002c46:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002c50:	1d3b      	adds	r3, r7, #4
 8002c52:	2200      	movs	r2, #0
 8002c54:	4619      	mov	r1, r3
 8002c56:	4806      	ldr	r0, [pc, #24]	; (8002c70 <MX_LTDC_Init+0xf8>)
 8002c58:	f006 ff70 	bl	8009b3c <HAL_LTDC_ConfigLayer>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 8002c62:	f000 fae9 	bl	8003238 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002c66:	bf00      	nop
 8002c68:	3738      	adds	r7, #56	; 0x38
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	20000304 	.word	0x20000304
 8002c74:	50001000 	.word	0x50001000

08002c78 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8002c7e:	463b      	mov	r3, r7
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	605a      	str	r2, [r3, #4]
 8002c86:	609a      	str	r2, [r3, #8]
 8002c88:	60da      	str	r2, [r3, #12]
 8002c8a:	611a      	str	r2, [r3, #16]
 8002c8c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8002c8e:	4b28      	ldr	r3, [pc, #160]	; (8002d30 <MX_OCTOSPI1_Init+0xb8>)
 8002c90:	4a28      	ldr	r2, [pc, #160]	; (8002d34 <MX_OCTOSPI1_Init+0xbc>)
 8002c92:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 4;
 8002c94:	4b26      	ldr	r3, [pc, #152]	; (8002d30 <MX_OCTOSPI1_Init+0xb8>)
 8002c96:	2204      	movs	r2, #4
 8002c98:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8002c9a:	4b25      	ldr	r3, [pc, #148]	; (8002d30 <MX_OCTOSPI1_Init+0xb8>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8002ca0:	4b23      	ldr	r3, [pc, #140]	; (8002d30 <MX_OCTOSPI1_Init+0xb8>)
 8002ca2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ca6:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 24;
 8002ca8:	4b21      	ldr	r3, [pc, #132]	; (8002d30 <MX_OCTOSPI1_Init+0xb8>)
 8002caa:	2218      	movs	r2, #24
 8002cac:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 8002cae:	4b20      	ldr	r3, [pc, #128]	; (8002d30 <MX_OCTOSPI1_Init+0xb8>)
 8002cb0:	2202      	movs	r2, #2
 8002cb2:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8002cb4:	4b1e      	ldr	r3, [pc, #120]	; (8002d30 <MX_OCTOSPI1_Init+0xb8>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8002cba:	4b1d      	ldr	r3, [pc, #116]	; (8002d30 <MX_OCTOSPI1_Init+0xb8>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8002cc0:	4b1b      	ldr	r3, [pc, #108]	; (8002d30 <MX_OCTOSPI1_Init+0xb8>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
 8002cc6:	4b1a      	ldr	r3, [pc, #104]	; (8002d30 <MX_OCTOSPI1_Init+0xb8>)
 8002cc8:	2201      	movs	r2, #1
 8002cca:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8002ccc:	4b18      	ldr	r3, [pc, #96]	; (8002d30 <MX_OCTOSPI1_Init+0xb8>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8002cd2:	4b17      	ldr	r3, [pc, #92]	; (8002d30 <MX_OCTOSPI1_Init+0xb8>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8002cd8:	4b15      	ldr	r3, [pc, #84]	; (8002d30 <MX_OCTOSPI1_Init+0xb8>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8002cde:	4b14      	ldr	r3, [pc, #80]	; (8002d30 <MX_OCTOSPI1_Init+0xb8>)
 8002ce0:	2208      	movs	r2, #8
 8002ce2:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 8002ce4:	4b12      	ldr	r3, [pc, #72]	; (8002d30 <MX_OCTOSPI1_Init+0xb8>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 0;
 8002cea:	4b11      	ldr	r3, [pc, #68]	; (8002d30 <MX_OCTOSPI1_Init+0xb8>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8002cf0:	480f      	ldr	r0, [pc, #60]	; (8002d30 <MX_OCTOSPI1_Init+0xb8>)
 8002cf2:	f007 f989 	bl	800a008 <HAL_OSPI_Init>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <MX_OCTOSPI1_Init+0x88>
  {
    Error_Handler();
 8002cfc:	f000 fa9c 	bl	8003238 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8002d00:	2301      	movs	r3, #1
 8002d02:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.NCSPort = 1;
 8002d04:	2301      	movs	r3, #1
 8002d06:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8002d08:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002d0c:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002d0e:	463b      	mov	r3, r7
 8002d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d14:	4619      	mov	r1, r3
 8002d16:	4806      	ldr	r0, [pc, #24]	; (8002d30 <MX_OCTOSPI1_Init+0xb8>)
 8002d18:	f007 fdc6 	bl	800a8a8 <HAL_OSPIM_Config>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <MX_OCTOSPI1_Init+0xae>
  {
    Error_Handler();
 8002d22:	f000 fa89 	bl	8003238 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8002d26:	bf00      	nop
 8002d28:	3718      	adds	r7, #24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	200003ac 	.word	0x200003ac
 8002d34:	52005000 	.word	0x52005000

08002d38 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002d3e:	1d3b      	adds	r3, r7, #4
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	605a      	str	r2, [r3, #4]
 8002d46:	609a      	str	r2, [r3, #8]
 8002d48:	60da      	str	r2, [r3, #12]
 8002d4a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	603b      	str	r3, [r7, #0]

  /* USER CODE BEGIN RTC_Init 1 */
	hrtc.Instance = RTC;
 8002d50:	4b36      	ldr	r3, [pc, #216]	; (8002e2c <MX_RTC_Init+0xf4>)
 8002d52:	4a37      	ldr	r2, [pc, #220]	; (8002e30 <MX_RTC_Init+0xf8>)
 8002d54:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002d56:	4b35      	ldr	r3, [pc, #212]	; (8002e2c <MX_RTC_Init+0xf4>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8002d5c:	4b33      	ldr	r3, [pc, #204]	; (8002e2c <MX_RTC_Init+0xf4>)
 8002d5e:	227f      	movs	r2, #127	; 0x7f
 8002d60:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8002d62:	4b32      	ldr	r3, [pc, #200]	; (8002e2c <MX_RTC_Init+0xf4>)
 8002d64:	22ff      	movs	r2, #255	; 0xff
 8002d66:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002d68:	4b30      	ldr	r3, [pc, #192]	; (8002e2c <MX_RTC_Init+0xf4>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002d6e:	4b2f      	ldr	r3, [pc, #188]	; (8002e2c <MX_RTC_Init+0xf4>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002d74:	4b2d      	ldr	r3, [pc, #180]	; (8002e2c <MX_RTC_Init+0xf4>)
 8002d76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d7a:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002d7c:	4b2b      	ldr	r3, [pc, #172]	; (8002e2c <MX_RTC_Init+0xf4>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	615a      	str	r2, [r3, #20]
	if ((RCC->BDCR & RCC_BDCR_RTCEN) != 0) {
 8002d82:	4b2c      	ldr	r3, [pc, #176]	; (8002e34 <MX_RTC_Init+0xfc>)
 8002d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d002      	beq.n	8002d94 <MX_RTC_Init+0x5c>
		HAL_PWR_EnableBkUpAccess();
 8002d8e:	f008 fd1b 	bl	800b7c8 <HAL_PWR_EnableBkUpAccess>
 8002d92:	e048      	b.n	8002e26 <MX_RTC_Init+0xee>
	}
  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002d94:	4b25      	ldr	r3, [pc, #148]	; (8002e2c <MX_RTC_Init+0xf4>)
 8002d96:	4a26      	ldr	r2, [pc, #152]	; (8002e30 <MX_RTC_Init+0xf8>)
 8002d98:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002d9a:	4b24      	ldr	r3, [pc, #144]	; (8002e2c <MX_RTC_Init+0xf4>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002da0:	4b22      	ldr	r3, [pc, #136]	; (8002e2c <MX_RTC_Init+0xf4>)
 8002da2:	227f      	movs	r2, #127	; 0x7f
 8002da4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002da6:	4b21      	ldr	r3, [pc, #132]	; (8002e2c <MX_RTC_Init+0xf4>)
 8002da8:	22ff      	movs	r2, #255	; 0xff
 8002daa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002dac:	4b1f      	ldr	r3, [pc, #124]	; (8002e2c <MX_RTC_Init+0xf4>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002db2:	4b1e      	ldr	r3, [pc, #120]	; (8002e2c <MX_RTC_Init+0xf4>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002db8:	4b1c      	ldr	r3, [pc, #112]	; (8002e2c <MX_RTC_Init+0xf4>)
 8002dba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002dbe:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002dc0:	4b1a      	ldr	r3, [pc, #104]	; (8002e2c <MX_RTC_Init+0xf4>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002dc6:	4819      	ldr	r0, [pc, #100]	; (8002e2c <MX_RTC_Init+0xf4>)
 8002dc8:	f00c f8fa 	bl	800efc0 <HAL_RTC_Init>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <MX_RTC_Init+0x9e>
  {
    Error_Handler();
 8002dd2:	f000 fa31 	bl	8003238 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8002dde:	2300      	movs	r3, #0
 8002de0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002de2:	2300      	movs	r3, #0
 8002de4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002de6:	2300      	movs	r3, #0
 8002de8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002dea:	1d3b      	adds	r3, r7, #4
 8002dec:	2200      	movs	r2, #0
 8002dee:	4619      	mov	r1, r3
 8002df0:	480e      	ldr	r0, [pc, #56]	; (8002e2c <MX_RTC_Init+0xf4>)
 8002df2:	f00c f96b 	bl	800f0cc <HAL_RTC_SetTime>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8002dfc:	f000 fa1c 	bl	8003238 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002e00:	2301      	movs	r3, #1
 8002e02:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002e04:	2301      	movs	r3, #1
 8002e06:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002e10:	463b      	mov	r3, r7
 8002e12:	2200      	movs	r2, #0
 8002e14:	4619      	mov	r1, r3
 8002e16:	4805      	ldr	r0, [pc, #20]	; (8002e2c <MX_RTC_Init+0xf4>)
 8002e18:	f00c fa52 	bl	800f2c0 <HAL_RTC_SetDate>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <MX_RTC_Init+0xee>
  {
    Error_Handler();
 8002e22:	f000 fa09 	bl	8003238 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	20000408 	.word	0x20000408
 8002e30:	58004000 	.word	0x58004000
 8002e34:	58024400 	.word	0x58024400

08002e38 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8002e3c:	4b17      	ldr	r3, [pc, #92]	; (8002e9c <MX_SAI1_Init+0x64>)
 8002e3e:	4a18      	ldr	r2, [pc, #96]	; (8002ea0 <MX_SAI1_Init+0x68>)
 8002e40:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8002e42:	4b16      	ldr	r3, [pc, #88]	; (8002e9c <MX_SAI1_Init+0x64>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8002e48:	4b14      	ldr	r3, [pc, #80]	; (8002e9c <MX_SAI1_Init+0x64>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002e4e:	4b13      	ldr	r3, [pc, #76]	; (8002e9c <MX_SAI1_Init+0x64>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002e54:	4b11      	ldr	r3, [pc, #68]	; (8002e9c <MX_SAI1_Init+0x64>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_FULL;
 8002e5a:	4b10      	ldr	r3, [pc, #64]	; (8002e9c <MX_SAI1_Init+0x64>)
 8002e5c:	2204      	movs	r2, #4
 8002e5e:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8002e60:	4b0e      	ldr	r3, [pc, #56]	; (8002e9c <MX_SAI1_Init+0x64>)
 8002e62:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8002e66:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002e68:	4b0c      	ldr	r3, [pc, #48]	; (8002e9c <MX_SAI1_Init+0x64>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_MONOMODE;
 8002e6e:	4b0b      	ldr	r3, [pc, #44]	; (8002e9c <MX_SAI1_Init+0x64>)
 8002e70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e74:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002e76:	4b09      	ldr	r3, [pc, #36]	; (8002e9c <MX_SAI1_Init+0x64>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002e7c:	4b07      	ldr	r3, [pc, #28]	; (8002e9c <MX_SAI1_Init+0x64>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8002e82:	2302      	movs	r3, #2
 8002e84:	2200      	movs	r2, #0
 8002e86:	2100      	movs	r1, #0
 8002e88:	4804      	ldr	r0, [pc, #16]	; (8002e9c <MX_SAI1_Init+0x64>)
 8002e8a:	f00c fbc1 	bl	800f610 <HAL_SAI_InitProtocol>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <MX_SAI1_Init+0x60>
  {
    Error_Handler();
 8002e94:	f000 f9d0 	bl	8003238 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8002e98:	bf00      	nop
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	20000430 	.word	0x20000430
 8002ea0:	40015804 	.word	0x40015804

08002ea4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002ea8:	4b27      	ldr	r3, [pc, #156]	; (8002f48 <MX_SPI2_Init+0xa4>)
 8002eaa:	4a28      	ldr	r2, [pc, #160]	; (8002f4c <MX_SPI2_Init+0xa8>)
 8002eac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002eae:	4b26      	ldr	r3, [pc, #152]	; (8002f48 <MX_SPI2_Init+0xa4>)
 8002eb0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002eb4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8002eb6:	4b24      	ldr	r3, [pc, #144]	; (8002f48 <MX_SPI2_Init+0xa4>)
 8002eb8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ebc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ebe:	4b22      	ldr	r3, [pc, #136]	; (8002f48 <MX_SPI2_Init+0xa4>)
 8002ec0:	2207      	movs	r2, #7
 8002ec2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ec4:	4b20      	ldr	r3, [pc, #128]	; (8002f48 <MX_SPI2_Init+0xa4>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002eca:	4b1f      	ldr	r3, [pc, #124]	; (8002f48 <MX_SPI2_Init+0xa4>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002ed0:	4b1d      	ldr	r3, [pc, #116]	; (8002f48 <MX_SPI2_Init+0xa4>)
 8002ed2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002ed6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002ed8:	4b1b      	ldr	r3, [pc, #108]	; (8002f48 <MX_SPI2_Init+0xa4>)
 8002eda:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8002ede:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ee0:	4b19      	ldr	r3, [pc, #100]	; (8002f48 <MX_SPI2_Init+0xa4>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ee6:	4b18      	ldr	r3, [pc, #96]	; (8002f48 <MX_SPI2_Init+0xa4>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002eec:	4b16      	ldr	r3, [pc, #88]	; (8002f48 <MX_SPI2_Init+0xa4>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002ef2:	4b15      	ldr	r3, [pc, #84]	; (8002f48 <MX_SPI2_Init+0xa4>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002ef8:	4b13      	ldr	r3, [pc, #76]	; (8002f48 <MX_SPI2_Init+0xa4>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002efe:	4b12      	ldr	r3, [pc, #72]	; (8002f48 <MX_SPI2_Init+0xa4>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002f04:	4b10      	ldr	r3, [pc, #64]	; (8002f48 <MX_SPI2_Init+0xa4>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002f0a:	4b0f      	ldr	r3, [pc, #60]	; (8002f48 <MX_SPI2_Init+0xa4>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002f10:	4b0d      	ldr	r3, [pc, #52]	; (8002f48 <MX_SPI2_Init+0xa4>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002f16:	4b0c      	ldr	r3, [pc, #48]	; (8002f48 <MX_SPI2_Init+0xa4>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002f1c:	4b0a      	ldr	r3, [pc, #40]	; (8002f48 <MX_SPI2_Init+0xa4>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002f22:	4b09      	ldr	r3, [pc, #36]	; (8002f48 <MX_SPI2_Init+0xa4>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002f28:	4b07      	ldr	r3, [pc, #28]	; (8002f48 <MX_SPI2_Init+0xa4>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002f2e:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <MX_SPI2_Init+0xa4>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002f34:	4804      	ldr	r0, [pc, #16]	; (8002f48 <MX_SPI2_Init+0xa4>)
 8002f36:	f00d faf7 	bl	8010528 <HAL_SPI_Init>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8002f40:	f000 f97a 	bl	8003238 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002f44:	bf00      	nop
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	20000540 	.word	0x20000540
 8002f4c:	40003800 	.word	0x40003800

08002f50 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b088      	sub	sp, #32
 8002f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f56:	f107 0310 	add.w	r3, r7, #16
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	605a      	str	r2, [r3, #4]
 8002f60:	609a      	str	r2, [r3, #8]
 8002f62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f64:	1d3b      	adds	r3, r7, #4
 8002f66:	2200      	movs	r2, #0
 8002f68:	601a      	str	r2, [r3, #0]
 8002f6a:	605a      	str	r2, [r3, #4]
 8002f6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002f6e:	4b20      	ldr	r3, [pc, #128]	; (8002ff0 <MX_TIM1_Init+0xa0>)
 8002f70:	4a20      	ldr	r2, [pc, #128]	; (8002ff4 <MX_TIM1_Init+0xa4>)
 8002f72:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 14000;
 8002f74:	4b1e      	ldr	r3, [pc, #120]	; (8002ff0 <MX_TIM1_Init+0xa0>)
 8002f76:	f243 62b0 	movw	r2, #14000	; 0x36b0
 8002f7a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f7c:	4b1c      	ldr	r3, [pc, #112]	; (8002ff0 <MX_TIM1_Init+0xa0>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000;
 8002f82:	4b1b      	ldr	r3, [pc, #108]	; (8002ff0 <MX_TIM1_Init+0xa0>)
 8002f84:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002f88:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f8a:	4b19      	ldr	r3, [pc, #100]	; (8002ff0 <MX_TIM1_Init+0xa0>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002f90:	4b17      	ldr	r3, [pc, #92]	; (8002ff0 <MX_TIM1_Init+0xa0>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f96:	4b16      	ldr	r3, [pc, #88]	; (8002ff0 <MX_TIM1_Init+0xa0>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002f9c:	4814      	ldr	r0, [pc, #80]	; (8002ff0 <MX_TIM1_Init+0xa0>)
 8002f9e:	f00d fecc 	bl	8010d3a <HAL_TIM_Base_Init>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8002fa8:	f000 f946 	bl	8003238 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fb0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002fb2:	f107 0310 	add.w	r3, r7, #16
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	480d      	ldr	r0, [pc, #52]	; (8002ff0 <MX_TIM1_Init+0xa0>)
 8002fba:	f00e f8ad 	bl	8011118 <HAL_TIM_ConfigClockSource>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002fc4:	f000 f938 	bl	8003238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002fd4:	1d3b      	adds	r3, r7, #4
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	4805      	ldr	r0, [pc, #20]	; (8002ff0 <MX_TIM1_Init+0xa0>)
 8002fda:	f00e faff 	bl	80115dc <HAL_TIMEx_MasterConfigSynchronization>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002fe4:	f000 f928 	bl	8003238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002fe8:	bf00      	nop
 8002fea:	3720      	adds	r7, #32
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	200005c8 	.word	0x200005c8
 8002ff4:	40010000 	.word	0x40010000

08002ff8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002ffe:	4b0d      	ldr	r3, [pc, #52]	; (8003034 <MX_DMA_Init+0x3c>)
 8003000:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8003004:	4a0b      	ldr	r2, [pc, #44]	; (8003034 <MX_DMA_Init+0x3c>)
 8003006:	f043 0301 	orr.w	r3, r3, #1
 800300a:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 800300e:	4b09      	ldr	r3, [pc, #36]	; (8003034 <MX_DMA_Init+0x3c>)
 8003010:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	607b      	str	r3, [r7, #4]
 800301a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800301c:	2200      	movs	r2, #0
 800301e:	2100      	movs	r1, #0
 8003020:	200b      	movs	r0, #11
 8003022:	f003 f8a0 	bl	8006166 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003026:	200b      	movs	r0, #11
 8003028:	f003 f8b7 	bl	800619a <HAL_NVIC_EnableIRQ>

}
 800302c:	bf00      	nop
 800302e:	3708      	adds	r7, #8
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	58024400 	.word	0x58024400

08003038 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b08a      	sub	sp, #40	; 0x28
 800303c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800303e:	f107 0314 	add.w	r3, r7, #20
 8003042:	2200      	movs	r2, #0
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	605a      	str	r2, [r3, #4]
 8003048:	609a      	str	r2, [r3, #8]
 800304a:	60da      	str	r2, [r3, #12]
 800304c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800304e:	4b74      	ldr	r3, [pc, #464]	; (8003220 <MX_GPIO_Init+0x1e8>)
 8003050:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003054:	4a72      	ldr	r2, [pc, #456]	; (8003220 <MX_GPIO_Init+0x1e8>)
 8003056:	f043 0310 	orr.w	r3, r3, #16
 800305a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800305e:	4b70      	ldr	r3, [pc, #448]	; (8003220 <MX_GPIO_Init+0x1e8>)
 8003060:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003064:	f003 0310 	and.w	r3, r3, #16
 8003068:	613b      	str	r3, [r7, #16]
 800306a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800306c:	4b6c      	ldr	r3, [pc, #432]	; (8003220 <MX_GPIO_Init+0x1e8>)
 800306e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003072:	4a6b      	ldr	r2, [pc, #428]	; (8003220 <MX_GPIO_Init+0x1e8>)
 8003074:	f043 0304 	orr.w	r3, r3, #4
 8003078:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800307c:	4b68      	ldr	r3, [pc, #416]	; (8003220 <MX_GPIO_Init+0x1e8>)
 800307e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003082:	f003 0304 	and.w	r3, r3, #4
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800308a:	4b65      	ldr	r3, [pc, #404]	; (8003220 <MX_GPIO_Init+0x1e8>)
 800308c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003090:	4a63      	ldr	r2, [pc, #396]	; (8003220 <MX_GPIO_Init+0x1e8>)
 8003092:	f043 0301 	orr.w	r3, r3, #1
 8003096:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800309a:	4b61      	ldr	r3, [pc, #388]	; (8003220 <MX_GPIO_Init+0x1e8>)
 800309c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	60bb      	str	r3, [r7, #8]
 80030a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030a8:	4b5d      	ldr	r3, [pc, #372]	; (8003220 <MX_GPIO_Init+0x1e8>)
 80030aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80030ae:	4a5c      	ldr	r2, [pc, #368]	; (8003220 <MX_GPIO_Init+0x1e8>)
 80030b0:	f043 0302 	orr.w	r3, r3, #2
 80030b4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80030b8:	4b59      	ldr	r3, [pc, #356]	; (8003220 <MX_GPIO_Init+0x1e8>)
 80030ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	607b      	str	r3, [r7, #4]
 80030c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80030c6:	4b56      	ldr	r3, [pc, #344]	; (8003220 <MX_GPIO_Init+0x1e8>)
 80030c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80030cc:	4a54      	ldr	r2, [pc, #336]	; (8003220 <MX_GPIO_Init+0x1e8>)
 80030ce:	f043 0308 	orr.w	r3, r3, #8
 80030d2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80030d6:	4b52      	ldr	r3, [pc, #328]	; (8003220 <MX_GPIO_Init+0x1e8>)
 80030d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80030dc:	f003 0308 	and.w	r3, r3, #8
 80030e0:	603b      	str	r3, [r7, #0]
 80030e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_Speaker_enable_GPIO_Port, GPIO_Speaker_enable_Pin, GPIO_PIN_SET);
 80030e4:	2201      	movs	r2, #1
 80030e6:	2108      	movs	r1, #8
 80030e8:	484e      	ldr	r0, [pc, #312]	; (8003224 <MX_GPIO_Init+0x1ec>)
 80030ea:	f006 fb61 	bl	80097b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 80030ee:	2200      	movs	r2, #0
 80030f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030f4:	484b      	ldr	r0, [pc, #300]	; (8003224 <MX_GPIO_Init+0x1ec>)
 80030f6:	f006 fb5b 	bl	80097b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80030fa:	2201      	movs	r2, #1
 80030fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003100:	4849      	ldr	r0, [pc, #292]	; (8003228 <MX_GPIO_Init+0x1f0>)
 8003102:	f006 fb55 	bl	80097b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
 8003106:	2201      	movs	r2, #1
 8003108:	f44f 7180 	mov.w	r1, #256	; 0x100
 800310c:	4847      	ldr	r0, [pc, #284]	; (800322c <MX_GPIO_Init+0x1f4>)
 800310e:	f006 fb4f 	bl	80097b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
 8003112:	2200      	movs	r2, #0
 8003114:	2112      	movs	r1, #18
 8003116:	4845      	ldr	r0, [pc, #276]	; (800322c <MX_GPIO_Init+0x1f4>)
 8003118:	f006 fb4a 	bl	80097b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_Speaker_enable_Pin PE8 */
  GPIO_InitStruct.Pin = GPIO_Speaker_enable_Pin|GPIO_PIN_8;
 800311c:	f44f 7384 	mov.w	r3, #264	; 0x108
 8003120:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003122:	2301      	movs	r3, #1
 8003124:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003126:	2300      	movs	r3, #0
 8003128:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800312a:	2300      	movs	r3, #0
 800312c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800312e:	f107 0314 	add.w	r3, r7, #20
 8003132:	4619      	mov	r1, r3
 8003134:	483b      	ldr	r0, [pc, #236]	; (8003224 <MX_GPIO_Init+0x1ec>)
 8003136:	f006 f973 	bl	8009420 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_PAUSE_Pin BTN_GAME_Pin BTN_TIME_Pin */
  GPIO_InitStruct.Pin = BTN_PAUSE_Pin|BTN_GAME_Pin|BTN_TIME_Pin;
 800313a:	f242 0322 	movw	r3, #8226	; 0x2022
 800313e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003140:	2300      	movs	r3, #0
 8003142:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003144:	2301      	movs	r3, #1
 8003146:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003148:	f107 0314 	add.w	r3, r7, #20
 800314c:	4619      	mov	r1, r3
 800314e:	4838      	ldr	r0, [pc, #224]	; (8003230 <MX_GPIO_Init+0x1f8>)
 8003150:	f006 f966 	bl	8009420 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_PWR_Pin */
  GPIO_InitStruct.Pin = BTN_PWR_Pin;
 8003154:	2301      	movs	r3, #1
 8003156:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003158:	2300      	movs	r3, #0
 800315a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315c:	2300      	movs	r3, #0
 800315e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_PWR_GPIO_Port, &GPIO_InitStruct);
 8003160:	f107 0314 	add.w	r3, r7, #20
 8003164:	4619      	mov	r1, r3
 8003166:	4833      	ldr	r0, [pc, #204]	; (8003234 <MX_GPIO_Init+0x1fc>)
 8003168:	f006 f95a 	bl	8009420 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800316c:	2304      	movs	r3, #4
 800316e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003170:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8003174:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003176:	2300      	movs	r3, #0
 8003178:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800317a:	f107 0314 	add.w	r3, r7, #20
 800317e:	4619      	mov	r1, r3
 8003180:	482c      	ldr	r0, [pc, #176]	; (8003234 <MX_GPIO_Init+0x1fc>)
 8003182:	f006 f94d 	bl	8009420 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003186:	2380      	movs	r3, #128	; 0x80
 8003188:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800318a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800318e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003190:	2300      	movs	r3, #0
 8003192:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003194:	f107 0314 	add.w	r3, r7, #20
 8003198:	4619      	mov	r1, r3
 800319a:	4822      	ldr	r0, [pc, #136]	; (8003224 <MX_GPIO_Init+0x1ec>)
 800319c:	f006 f940 	bl	8009420 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80031a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031a6:	2301      	movs	r3, #1
 80031a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031aa:	2300      	movs	r3, #0
 80031ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ae:	2300      	movs	r3, #0
 80031b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031b2:	f107 0314 	add.w	r3, r7, #20
 80031b6:	4619      	mov	r1, r3
 80031b8:	481b      	ldr	r0, [pc, #108]	; (8003228 <MX_GPIO_Init+0x1f0>)
 80031ba:	f006 f931 	bl	8009420 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD1 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_4;
 80031be:	f44f 7389 	mov.w	r3, #274	; 0x112
 80031c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031c4:	2301      	movs	r3, #1
 80031c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c8:	2300      	movs	r3, #0
 80031ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031cc:	2300      	movs	r3, #0
 80031ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031d0:	f107 0314 	add.w	r3, r7, #20
 80031d4:	4619      	mov	r1, r3
 80031d6:	4815      	ldr	r0, [pc, #84]	; (800322c <MX_GPIO_Init+0x1f4>)
 80031d8:	f006 f922 	bl	8009420 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_A_Pin BTN_Left_Pin BTN_Down_Pin BTN_Right_Pin
                           BTN_Up_Pin BTN_B_Pin */
  GPIO_InitStruct.Pin = BTN_A_Pin|BTN_Left_Pin|BTN_Down_Pin|BTN_Right_Pin
 80031dc:	f64c 2321 	movw	r3, #51745	; 0xca21
 80031e0:	617b      	str	r3, [r7, #20]
                          |BTN_Up_Pin|BTN_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031e2:	2300      	movs	r3, #0
 80031e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031e6:	2301      	movs	r3, #1
 80031e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031ea:	f107 0314 	add.w	r3, r7, #20
 80031ee:	4619      	mov	r1, r3
 80031f0:	480e      	ldr	r0, [pc, #56]	; (800322c <MX_GPIO_Init+0x1f4>)
 80031f2:	f006 f915 	bl	8009420 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80031f6:	2200      	movs	r2, #0
 80031f8:	2100      	movs	r1, #0
 80031fa:	2008      	movs	r0, #8
 80031fc:	f002 ffb3 	bl	8006166 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003200:	2008      	movs	r0, #8
 8003202:	f002 ffca 	bl	800619a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003206:	2200      	movs	r2, #0
 8003208:	2100      	movs	r1, #0
 800320a:	2017      	movs	r0, #23
 800320c:	f002 ffab 	bl	8006166 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003210:	2017      	movs	r0, #23
 8003212:	f002 ffc2 	bl	800619a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003216:	bf00      	nop
 8003218:	3728      	adds	r7, #40	; 0x28
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	58024400 	.word	0x58024400
 8003224:	58021000 	.word	0x58021000
 8003228:	58020400 	.word	0x58020400
 800322c:	58020c00 	.word	0x58020c00
 8003230:	58020800 	.word	0x58020800
 8003234:	58020000 	.word	0x58020000

08003238 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800323c:	b672      	cpsid	i
}
 800323e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003240:	e7fe      	b.n	8003240 <Error_Handler+0x8>
	...

08003244 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800324a:	4b0a      	ldr	r3, [pc, #40]	; (8003274 <HAL_MspInit+0x30>)
 800324c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003250:	4a08      	ldr	r2, [pc, #32]	; (8003274 <HAL_MspInit+0x30>)
 8003252:	f043 0302 	orr.w	r3, r3, #2
 8003256:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800325a:	4b06      	ldr	r3, [pc, #24]	; (8003274 <HAL_MspInit+0x30>)
 800325c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	607b      	str	r3, [r7, #4]
 8003266:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	58024400 	.word	0x58024400

08003278 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b08a      	sub	sp, #40	; 0x28
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003280:	f107 0314 	add.w	r3, r7, #20
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	605a      	str	r2, [r3, #4]
 800328a:	609a      	str	r2, [r3, #8]
 800328c:	60da      	str	r2, [r3, #12]
 800328e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a1c      	ldr	r2, [pc, #112]	; (8003308 <HAL_ADC_MspInit+0x90>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d131      	bne.n	80032fe <HAL_ADC_MspInit+0x86>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800329a:	4b1c      	ldr	r3, [pc, #112]	; (800330c <HAL_ADC_MspInit+0x94>)
 800329c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80032a0:	4a1a      	ldr	r2, [pc, #104]	; (800330c <HAL_ADC_MspInit+0x94>)
 80032a2:	f043 0320 	orr.w	r3, r3, #32
 80032a6:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 80032aa:	4b18      	ldr	r3, [pc, #96]	; (800330c <HAL_ADC_MspInit+0x94>)
 80032ac:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80032b0:	f003 0320 	and.w	r3, r3, #32
 80032b4:	613b      	str	r3, [r7, #16]
 80032b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032b8:	4b14      	ldr	r3, [pc, #80]	; (800330c <HAL_ADC_MspInit+0x94>)
 80032ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80032be:	4a13      	ldr	r2, [pc, #76]	; (800330c <HAL_ADC_MspInit+0x94>)
 80032c0:	f043 0304 	orr.w	r3, r3, #4
 80032c4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80032c8:	4b10      	ldr	r3, [pc, #64]	; (800330c <HAL_ADC_MspInit+0x94>)
 80032ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80032ce:	f003 0304 	and.w	r3, r3, #4
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80032d6:	2310      	movs	r3, #16
 80032d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032da:	2303      	movs	r3, #3
 80032dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032de:	2300      	movs	r3, #0
 80032e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032e2:	f107 0314 	add.w	r3, r7, #20
 80032e6:	4619      	mov	r1, r3
 80032e8:	4809      	ldr	r0, [pc, #36]	; (8003310 <HAL_ADC_MspInit+0x98>)
 80032ea:	f006 f899 	bl	8009420 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80032ee:	2200      	movs	r2, #0
 80032f0:	2100      	movs	r1, #0
 80032f2:	2012      	movs	r0, #18
 80032f4:	f002 ff37 	bl	8006166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80032f8:	2012      	movs	r0, #18
 80032fa:	f002 ff4e 	bl	800619a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80032fe:	bf00      	nop
 8003300:	3728      	adds	r7, #40	; 0x28
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	40022000 	.word	0x40022000
 800330c:	58024400 	.word	0x58024400
 8003310:	58020800 	.word	0x58020800

08003314 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b08c      	sub	sp, #48	; 0x30
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800331c:	f107 031c 	add.w	r3, r7, #28
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	605a      	str	r2, [r3, #4]
 8003326:	609a      	str	r2, [r3, #8]
 8003328:	60da      	str	r2, [r3, #12]
 800332a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a30      	ldr	r2, [pc, #192]	; (80033f4 <HAL_DAC_MspInit+0xe0>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d12a      	bne.n	800338c <HAL_DAC_MspInit+0x78>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8003336:	4b30      	ldr	r3, [pc, #192]	; (80033f8 <HAL_DAC_MspInit+0xe4>)
 8003338:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800333c:	4a2e      	ldr	r2, [pc, #184]	; (80033f8 <HAL_DAC_MspInit+0xe4>)
 800333e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003342:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8003346:	4b2c      	ldr	r3, [pc, #176]	; (80033f8 <HAL_DAC_MspInit+0xe4>)
 8003348:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800334c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003350:	61bb      	str	r3, [r7, #24]
 8003352:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003354:	4b28      	ldr	r3, [pc, #160]	; (80033f8 <HAL_DAC_MspInit+0xe4>)
 8003356:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800335a:	4a27      	ldr	r2, [pc, #156]	; (80033f8 <HAL_DAC_MspInit+0xe4>)
 800335c:	f043 0301 	orr.w	r3, r3, #1
 8003360:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003364:	4b24      	ldr	r3, [pc, #144]	; (80033f8 <HAL_DAC_MspInit+0xe4>)
 8003366:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	617b      	str	r3, [r7, #20]
 8003370:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003372:	2330      	movs	r3, #48	; 0x30
 8003374:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003376:	2303      	movs	r3, #3
 8003378:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337a:	2300      	movs	r3, #0
 800337c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800337e:	f107 031c 	add.w	r3, r7, #28
 8003382:	4619      	mov	r1, r3
 8003384:	481d      	ldr	r0, [pc, #116]	; (80033fc <HAL_DAC_MspInit+0xe8>)
 8003386:	f006 f84b 	bl	8009420 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }

}
 800338a:	e02e      	b.n	80033ea <HAL_DAC_MspInit+0xd6>
  else if(hdac->Instance==DAC2)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a1b      	ldr	r2, [pc, #108]	; (8003400 <HAL_DAC_MspInit+0xec>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d129      	bne.n	80033ea <HAL_DAC_MspInit+0xd6>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8003396:	4b18      	ldr	r3, [pc, #96]	; (80033f8 <HAL_DAC_MspInit+0xe4>)
 8003398:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800339c:	4a16      	ldr	r2, [pc, #88]	; (80033f8 <HAL_DAC_MspInit+0xe4>)
 800339e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80033a2:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80033a6:	4b14      	ldr	r3, [pc, #80]	; (80033f8 <HAL_DAC_MspInit+0xe4>)
 80033a8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80033ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033b0:	613b      	str	r3, [r7, #16]
 80033b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033b4:	4b10      	ldr	r3, [pc, #64]	; (80033f8 <HAL_DAC_MspInit+0xe4>)
 80033b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80033ba:	4a0f      	ldr	r2, [pc, #60]	; (80033f8 <HAL_DAC_MspInit+0xe4>)
 80033bc:	f043 0301 	orr.w	r3, r3, #1
 80033c0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80033c4:	4b0c      	ldr	r3, [pc, #48]	; (80033f8 <HAL_DAC_MspInit+0xe4>)
 80033c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	60fb      	str	r3, [r7, #12]
 80033d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80033d2:	2340      	movs	r3, #64	; 0x40
 80033d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033d6:	2303      	movs	r3, #3
 80033d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033da:	2300      	movs	r3, #0
 80033dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033de:	f107 031c 	add.w	r3, r7, #28
 80033e2:	4619      	mov	r1, r3
 80033e4:	4805      	ldr	r0, [pc, #20]	; (80033fc <HAL_DAC_MspInit+0xe8>)
 80033e6:	f006 f81b 	bl	8009420 <HAL_GPIO_Init>
}
 80033ea:	bf00      	nop
 80033ec:	3730      	adds	r7, #48	; 0x30
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	40007400 	.word	0x40007400
 80033f8:	58024400 	.word	0x58024400
 80033fc:	58020000 	.word	0x58020000
 8003400:	58003400 	.word	0x58003400

08003404 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a0b      	ldr	r2, [pc, #44]	; (8003440 <HAL_DMA2D_MspInit+0x3c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d10e      	bne.n	8003434 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003416:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <HAL_DMA2D_MspInit+0x40>)
 8003418:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800341c:	4a09      	ldr	r2, [pc, #36]	; (8003444 <HAL_DMA2D_MspInit+0x40>)
 800341e:	f043 0310 	orr.w	r3, r3, #16
 8003422:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8003426:	4b07      	ldr	r3, [pc, #28]	; (8003444 <HAL_DMA2D_MspInit+0x40>)
 8003428:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800342c:	f003 0310 	and.w	r3, r3, #16
 8003430:	60fb      	str	r3, [r7, #12]
 8003432:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8003434:	bf00      	nop
 8003436:	3714      	adds	r7, #20
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr
 8003440:	52001000 	.word	0x52001000
 8003444:	58024400 	.word	0x58024400

08003448 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b08e      	sub	sp, #56	; 0x38
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003450:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	605a      	str	r2, [r3, #4]
 800345a:	609a      	str	r2, [r3, #8]
 800345c:	60da      	str	r2, [r3, #12]
 800345e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a90      	ldr	r2, [pc, #576]	; (80036a8 <HAL_LTDC_MspInit+0x260>)
 8003466:	4293      	cmp	r3, r2
 8003468:	f040 8119 	bne.w	800369e <HAL_LTDC_MspInit+0x256>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800346c:	4b8f      	ldr	r3, [pc, #572]	; (80036ac <HAL_LTDC_MspInit+0x264>)
 800346e:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8003472:	4a8e      	ldr	r2, [pc, #568]	; (80036ac <HAL_LTDC_MspInit+0x264>)
 8003474:	f043 0308 	orr.w	r3, r3, #8
 8003478:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 800347c:	4b8b      	ldr	r3, [pc, #556]	; (80036ac <HAL_LTDC_MspInit+0x264>)
 800347e:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8003482:	f003 0308 	and.w	r3, r3, #8
 8003486:	623b      	str	r3, [r7, #32]
 8003488:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800348a:	4b88      	ldr	r3, [pc, #544]	; (80036ac <HAL_LTDC_MspInit+0x264>)
 800348c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003490:	4a86      	ldr	r2, [pc, #536]	; (80036ac <HAL_LTDC_MspInit+0x264>)
 8003492:	f043 0304 	orr.w	r3, r3, #4
 8003496:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800349a:	4b84      	ldr	r3, [pc, #528]	; (80036ac <HAL_LTDC_MspInit+0x264>)
 800349c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80034a0:	f003 0304 	and.w	r3, r3, #4
 80034a4:	61fb      	str	r3, [r7, #28]
 80034a6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a8:	4b80      	ldr	r3, [pc, #512]	; (80036ac <HAL_LTDC_MspInit+0x264>)
 80034aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80034ae:	4a7f      	ldr	r2, [pc, #508]	; (80036ac <HAL_LTDC_MspInit+0x264>)
 80034b0:	f043 0301 	orr.w	r3, r3, #1
 80034b4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80034b8:	4b7c      	ldr	r3, [pc, #496]	; (80036ac <HAL_LTDC_MspInit+0x264>)
 80034ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	61bb      	str	r3, [r7, #24]
 80034c4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034c6:	4b79      	ldr	r3, [pc, #484]	; (80036ac <HAL_LTDC_MspInit+0x264>)
 80034c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80034cc:	4a77      	ldr	r2, [pc, #476]	; (80036ac <HAL_LTDC_MspInit+0x264>)
 80034ce:	f043 0302 	orr.w	r3, r3, #2
 80034d2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80034d6:	4b75      	ldr	r3, [pc, #468]	; (80036ac <HAL_LTDC_MspInit+0x264>)
 80034d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	617b      	str	r3, [r7, #20]
 80034e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80034e4:	4b71      	ldr	r3, [pc, #452]	; (80036ac <HAL_LTDC_MspInit+0x264>)
 80034e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80034ea:	4a70      	ldr	r2, [pc, #448]	; (80036ac <HAL_LTDC_MspInit+0x264>)
 80034ec:	f043 0310 	orr.w	r3, r3, #16
 80034f0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80034f4:	4b6d      	ldr	r3, [pc, #436]	; (80036ac <HAL_LTDC_MspInit+0x264>)
 80034f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80034fa:	f003 0310 	and.w	r3, r3, #16
 80034fe:	613b      	str	r3, [r7, #16]
 8003500:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003502:	4b6a      	ldr	r3, [pc, #424]	; (80036ac <HAL_LTDC_MspInit+0x264>)
 8003504:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003508:	4a68      	ldr	r2, [pc, #416]	; (80036ac <HAL_LTDC_MspInit+0x264>)
 800350a:	f043 0308 	orr.w	r3, r3, #8
 800350e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003512:	4b66      	ldr	r3, [pc, #408]	; (80036ac <HAL_LTDC_MspInit+0x264>)
 8003514:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003518:	f003 0308 	and.w	r3, r3, #8
 800351c:	60fb      	str	r3, [r7, #12]
 800351e:	68fb      	ldr	r3, [r7, #12]
    PD3     ------> LTDC_G7
    PD6     ------> LTDC_B2
    PB5     ------> LTDC_B5
    PB8     ------> LTDC_B6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003520:	2301      	movs	r3, #1
 8003522:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003524:	2302      	movs	r3, #2
 8003526:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003528:	2300      	movs	r3, #0
 800352a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800352c:	2300      	movs	r3, #0
 800352e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 8003530:	230b      	movs	r3, #11
 8003532:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003538:	4619      	mov	r1, r3
 800353a:	485d      	ldr	r0, [pc, #372]	; (80036b0 <HAL_LTDC_MspInit+0x268>)
 800353c:	f005 ff70 	bl	8009420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
 8003540:	f44f 6338 	mov.w	r3, #2944	; 0xb80
 8003544:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003546:	2302      	movs	r3, #2
 8003548:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354a:	2300      	movs	r3, #0
 800354c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800354e:	2300      	movs	r3, #0
 8003550:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003552:	230e      	movs	r3, #14
 8003554:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003556:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800355a:	4619      	mov	r1, r3
 800355c:	4855      	ldr	r0, [pc, #340]	; (80036b4 <HAL_LTDC_MspInit+0x26c>)
 800355e:	f005 ff5f 	bl	8009420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003562:	2301      	movs	r3, #1
 8003564:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003566:	2302      	movs	r3, #2
 8003568:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800356a:	2300      	movs	r3, #0
 800356c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800356e:	2300      	movs	r3, #0
 8003570:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003572:	2309      	movs	r3, #9
 8003574:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003576:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800357a:	4619      	mov	r1, r3
 800357c:	484e      	ldr	r0, [pc, #312]	; (80036b8 <HAL_LTDC_MspInit+0x270>)
 800357e:	f005 ff4f 	bl	8009420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8003582:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003586:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003588:	2302      	movs	r3, #2
 800358a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800358c:	2300      	movs	r3, #0
 800358e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003590:	2300      	movs	r3, #0
 8003592:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003594:	230e      	movs	r3, #14
 8003596:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003598:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800359c:	4619      	mov	r1, r3
 800359e:	4847      	ldr	r0, [pc, #284]	; (80036bc <HAL_LTDC_MspInit+0x274>)
 80035a0:	f005 ff3e 	bl	8009420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_8;
 80035a4:	f44f 439a 	mov.w	r3, #19712	; 0x4d00
 80035a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035aa:	2302      	movs	r3, #2
 80035ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ae:	2300      	movs	r3, #0
 80035b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035b2:	2300      	movs	r3, #0
 80035b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80035b6:	230e      	movs	r3, #14
 80035b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035be:	4619      	mov	r1, r3
 80035c0:	483d      	ldr	r0, [pc, #244]	; (80036b8 <HAL_LTDC_MspInit+0x270>)
 80035c2:	f005 ff2d 	bl	8009420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_6;
 80035c6:	f44f 6389 	mov.w	r3, #1096	; 0x448
 80035ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035cc:	2302      	movs	r3, #2
 80035ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d0:	2300      	movs	r3, #0
 80035d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d4:	2300      	movs	r3, #0
 80035d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80035d8:	230e      	movs	r3, #14
 80035da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035e0:	4619      	mov	r1, r3
 80035e2:	4837      	ldr	r0, [pc, #220]	; (80036c0 <HAL_LTDC_MspInit+0x278>)
 80035e4:	f005 ff1c 	bl	8009420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 80035e8:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80035ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ee:	2302      	movs	r3, #2
 80035f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f2:	2300      	movs	r3, #0
 80035f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f6:	2300      	movs	r3, #0
 80035f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80035fa:	230e      	movs	r3, #14
 80035fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003602:	4619      	mov	r1, r3
 8003604:	482a      	ldr	r0, [pc, #168]	; (80036b0 <HAL_LTDC_MspInit+0x268>)
 8003606:	f005 ff0b 	bl	8009420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800360a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800360e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003610:	2302      	movs	r3, #2
 8003612:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003614:	2300      	movs	r3, #0
 8003616:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003618:	2300      	movs	r3, #0
 800361a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_LTDC;
 800361c:	230a      	movs	r3, #10
 800361e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003620:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003624:	4619      	mov	r1, r3
 8003626:	4822      	ldr	r0, [pc, #136]	; (80036b0 <HAL_LTDC_MspInit+0x268>)
 8003628:	f005 fefa 	bl	8009420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800362c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003630:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003632:	2302      	movs	r3, #2
 8003634:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003636:	2300      	movs	r3, #0
 8003638:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800363a:	2300      	movs	r3, #0
 800363c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF12_LTDC;
 800363e:	230c      	movs	r3, #12
 8003640:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003642:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003646:	4619      	mov	r1, r3
 8003648:	481a      	ldr	r0, [pc, #104]	; (80036b4 <HAL_LTDC_MspInit+0x26c>)
 800364a:	f005 fee9 	bl	8009420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800364e:	2304      	movs	r3, #4
 8003650:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003652:	2302      	movs	r3, #2
 8003654:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003656:	2300      	movs	r3, #0
 8003658:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800365a:	2300      	movs	r3, #0
 800365c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800365e:	2309      	movs	r3, #9
 8003660:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003662:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003666:	4619      	mov	r1, r3
 8003668:	4815      	ldr	r0, [pc, #84]	; (80036c0 <HAL_LTDC_MspInit+0x278>)
 800366a:	f005 fed9 	bl	8009420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800366e:	2320      	movs	r3, #32
 8003670:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003672:	2302      	movs	r3, #2
 8003674:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003676:	2300      	movs	r3, #0
 8003678:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800367a:	2300      	movs	r3, #0
 800367c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 800367e:	230b      	movs	r3, #11
 8003680:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003682:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003686:	4619      	mov	r1, r3
 8003688:	480b      	ldr	r0, [pc, #44]	; (80036b8 <HAL_LTDC_MspInit+0x270>)
 800368a:	f005 fec9 	bl	8009420 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 800368e:	2200      	movs	r2, #0
 8003690:	2100      	movs	r1, #0
 8003692:	2058      	movs	r0, #88	; 0x58
 8003694:	f002 fd67 	bl	8006166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003698:	2058      	movs	r0, #88	; 0x58
 800369a:	f002 fd7e 	bl	800619a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800369e:	bf00      	nop
 80036a0:	3738      	adds	r7, #56	; 0x38
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	50001000 	.word	0x50001000
 80036ac:	58024400 	.word	0x58024400
 80036b0:	58020800 	.word	0x58020800
 80036b4:	58020000 	.word	0x58020000
 80036b8:	58020400 	.word	0x58020400
 80036bc:	58021000 	.word	0x58021000
 80036c0:	58020c00 	.word	0x58020c00

080036c4 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b0be      	sub	sp, #248	; 0xf8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036cc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	605a      	str	r2, [r3, #4]
 80036d6:	609a      	str	r2, [r3, #8]
 80036d8:	60da      	str	r2, [r3, #12]
 80036da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80036dc:	f107 0320 	add.w	r3, r7, #32
 80036e0:	22c0      	movs	r2, #192	; 0xc0
 80036e2:	2100      	movs	r1, #0
 80036e4:	4618      	mov	r0, r3
 80036e6:	f00e fbcd 	bl	8011e84 <memset>
  if(hospi->Instance==OCTOSPI1)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a7a      	ldr	r2, [pc, #488]	; (80038d8 <HAL_OSPI_MspInit+0x214>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	f040 80ec 	bne.w	80038ce <HAL_OSPI_MspInit+0x20a>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80036f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036fa:	f04f 0300 	mov.w	r3, #0
 80036fe:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_CLKP;
 8003702:	2330      	movs	r3, #48	; 0x30
 8003704:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003706:	f107 0320 	add.w	r3, r7, #32
 800370a:	4618      	mov	r0, r3
 800370c:	f009 f84e 	bl	800c7ac <HAL_RCCEx_PeriphCLKConfig>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <HAL_OSPI_MspInit+0x56>
    {
      Error_Handler();
 8003716:	f7ff fd8f 	bl	8003238 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 800371a:	4b70      	ldr	r3, [pc, #448]	; (80038dc <HAL_OSPI_MspInit+0x218>)
 800371c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8003720:	4a6e      	ldr	r2, [pc, #440]	; (80038dc <HAL_OSPI_MspInit+0x218>)
 8003722:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003726:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 800372a:	4b6c      	ldr	r3, [pc, #432]	; (80038dc <HAL_OSPI_MspInit+0x218>)
 800372c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8003730:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003734:	61fb      	str	r3, [r7, #28]
 8003736:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8003738:	4b68      	ldr	r3, [pc, #416]	; (80038dc <HAL_OSPI_MspInit+0x218>)
 800373a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800373e:	4a67      	ldr	r2, [pc, #412]	; (80038dc <HAL_OSPI_MspInit+0x218>)
 8003740:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003744:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8003748:	4b64      	ldr	r3, [pc, #400]	; (80038dc <HAL_OSPI_MspInit+0x218>)
 800374a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800374e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003752:	61bb      	str	r3, [r7, #24]
 8003754:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003756:	4b61      	ldr	r3, [pc, #388]	; (80038dc <HAL_OSPI_MspInit+0x218>)
 8003758:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800375c:	4a5f      	ldr	r2, [pc, #380]	; (80038dc <HAL_OSPI_MspInit+0x218>)
 800375e:	f043 0310 	orr.w	r3, r3, #16
 8003762:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003766:	4b5d      	ldr	r3, [pc, #372]	; (80038dc <HAL_OSPI_MspInit+0x218>)
 8003768:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800376c:	f003 0310 	and.w	r3, r3, #16
 8003770:	617b      	str	r3, [r7, #20]
 8003772:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003774:	4b59      	ldr	r3, [pc, #356]	; (80038dc <HAL_OSPI_MspInit+0x218>)
 8003776:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800377a:	4a58      	ldr	r2, [pc, #352]	; (80038dc <HAL_OSPI_MspInit+0x218>)
 800377c:	f043 0301 	orr.w	r3, r3, #1
 8003780:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003784:	4b55      	ldr	r3, [pc, #340]	; (80038dc <HAL_OSPI_MspInit+0x218>)
 8003786:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	613b      	str	r3, [r7, #16]
 8003790:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003792:	4b52      	ldr	r3, [pc, #328]	; (80038dc <HAL_OSPI_MspInit+0x218>)
 8003794:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003798:	4a50      	ldr	r2, [pc, #320]	; (80038dc <HAL_OSPI_MspInit+0x218>)
 800379a:	f043 0302 	orr.w	r3, r3, #2
 800379e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80037a2:	4b4e      	ldr	r3, [pc, #312]	; (80038dc <HAL_OSPI_MspInit+0x218>)
 80037a4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	60fb      	str	r3, [r7, #12]
 80037ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80037b0:	4b4a      	ldr	r3, [pc, #296]	; (80038dc <HAL_OSPI_MspInit+0x218>)
 80037b2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80037b6:	4a49      	ldr	r2, [pc, #292]	; (80038dc <HAL_OSPI_MspInit+0x218>)
 80037b8:	f043 0308 	orr.w	r3, r3, #8
 80037bc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80037c0:	4b46      	ldr	r3, [pc, #280]	; (80038dc <HAL_OSPI_MspInit+0x218>)
 80037c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80037c6:	f003 0308 	and.w	r3, r3, #8
 80037ca:	60bb      	str	r3, [r7, #8]
 80037cc:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> OCTOSPIM_P1_IO0
    PB2     ------> OCTOSPIM_P1_CLK
    PE11     ------> OCTOSPIM_P1_NCS
    PD12     ------> OCTOSPIM_P1_IO1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80037ce:	2304      	movs	r3, #4
 80037d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037d4:	2302      	movs	r3, #2
 80037d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037da:	2300      	movs	r3, #0
 80037dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037e0:	2303      	movs	r3, #3
 80037e2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80037e6:	2309      	movs	r3, #9
 80037e8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80037ec:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80037f0:	4619      	mov	r1, r3
 80037f2:	483b      	ldr	r0, [pc, #236]	; (80038e0 <HAL_OSPI_MspInit+0x21c>)
 80037f4:	f005 fe14 	bl	8009420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80037f8:	2302      	movs	r3, #2
 80037fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037fe:	2302      	movs	r3, #2
 8003800:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003804:	2300      	movs	r3, #0
 8003806:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800380a:	2303      	movs	r3, #3
 800380c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8003810:	2309      	movs	r3, #9
 8003812:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003816:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800381a:	4619      	mov	r1, r3
 800381c:	4831      	ldr	r0, [pc, #196]	; (80038e4 <HAL_OSPI_MspInit+0x220>)
 800381e:	f005 fdff 	bl	8009420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003822:	2302      	movs	r3, #2
 8003824:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003828:	2302      	movs	r3, #2
 800382a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800382e:	2300      	movs	r3, #0
 8003830:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003834:	2303      	movs	r3, #3
 8003836:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
 800383a:	230b      	movs	r3, #11
 800383c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003840:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003844:	4619      	mov	r1, r3
 8003846:	4828      	ldr	r0, [pc, #160]	; (80038e8 <HAL_OSPI_MspInit+0x224>)
 8003848:	f005 fdea 	bl	8009420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800384c:	2304      	movs	r3, #4
 800384e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003852:	2302      	movs	r3, #2
 8003854:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003858:	2300      	movs	r3, #0
 800385a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800385e:	2303      	movs	r3, #3
 8003860:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8003864:	2309      	movs	r3, #9
 8003866:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800386a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800386e:	4619      	mov	r1, r3
 8003870:	481d      	ldr	r0, [pc, #116]	; (80038e8 <HAL_OSPI_MspInit+0x224>)
 8003872:	f005 fdd5 	bl	8009420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003876:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800387a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800387e:	2302      	movs	r3, #2
 8003880:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003884:	2300      	movs	r3, #0
 8003886:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800388a:	2303      	movs	r3, #3
 800388c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
 8003890:	230b      	movs	r3, #11
 8003892:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003896:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800389a:	4619      	mov	r1, r3
 800389c:	4810      	ldr	r0, [pc, #64]	; (80038e0 <HAL_OSPI_MspInit+0x21c>)
 800389e:	f005 fdbf 	bl	8009420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80038a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038aa:	2302      	movs	r3, #2
 80038ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b0:	2300      	movs	r3, #0
 80038b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038b6:	2303      	movs	r3, #3
 80038b8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80038bc:	2309      	movs	r3, #9
 80038be:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038c2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80038c6:	4619      	mov	r1, r3
 80038c8:	4808      	ldr	r0, [pc, #32]	; (80038ec <HAL_OSPI_MspInit+0x228>)
 80038ca:	f005 fda9 	bl	8009420 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 80038ce:	bf00      	nop
 80038d0:	37f8      	adds	r7, #248	; 0xf8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	52005000 	.word	0x52005000
 80038dc:	58024400 	.word	0x58024400
 80038e0:	58021000 	.word	0x58021000
 80038e4:	58020000 	.word	0x58020000
 80038e8:	58020400 	.word	0x58020400
 80038ec:	58020c00 	.word	0x58020c00

080038f0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b0b2      	sub	sp, #200	; 0xc8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80038f8:	f107 0308 	add.w	r3, r7, #8
 80038fc:	22c0      	movs	r2, #192	; 0xc0
 80038fe:	2100      	movs	r1, #0
 8003900:	4618      	mov	r0, r3
 8003902:	f00e fabf 	bl	8011e84 <memset>
  if(hrtc->Instance==RTC)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a10      	ldr	r2, [pc, #64]	; (800394c <HAL_RTC_MspInit+0x5c>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d119      	bne.n	8003944 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003910:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003914:	f04f 0300 	mov.w	r3, #0
 8003918:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800391c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003920:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003924:	f107 0308 	add.w	r3, r7, #8
 8003928:	4618      	mov	r0, r3
 800392a:	f008 ff3f 	bl	800c7ac <HAL_RCCEx_PeriphCLKConfig>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8003934:	f7ff fc80 	bl	8003238 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003938:	4b05      	ldr	r3, [pc, #20]	; (8003950 <HAL_RTC_MspInit+0x60>)
 800393a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393c:	4a04      	ldr	r2, [pc, #16]	; (8003950 <HAL_RTC_MspInit+0x60>)
 800393e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003942:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003944:	bf00      	nop
 8003946:	37c8      	adds	r7, #200	; 0xc8
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	58004000 	.word	0x58004000
 8003950:	58024400 	.word	0x58024400

08003954 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b0ba      	sub	sp, #232	; 0xe8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800395c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003960:	2200      	movs	r2, #0
 8003962:	601a      	str	r2, [r3, #0]
 8003964:	605a      	str	r2, [r3, #4]
 8003966:	609a      	str	r2, [r3, #8]
 8003968:	60da      	str	r2, [r3, #12]
 800396a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800396c:	f107 0310 	add.w	r3, r7, #16
 8003970:	22c0      	movs	r2, #192	; 0xc0
 8003972:	2100      	movs	r1, #0
 8003974:	4618      	mov	r0, r3
 8003976:	f00e fa85 	bl	8011e84 <memset>
  if(hspi->Instance==SPI2)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a27      	ldr	r2, [pc, #156]	; (8003a1c <HAL_SPI_MspInit+0xc8>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d146      	bne.n	8003a12 <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8003984:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003988:	f04f 0300 	mov.w	r3, #0
 800398c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8003990:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003994:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003996:	f107 0310 	add.w	r3, r7, #16
 800399a:	4618      	mov	r0, r3
 800399c:	f008 ff06 	bl	800c7ac <HAL_RCCEx_PeriphCLKConfig>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80039a6:	f7ff fc47 	bl	8003238 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80039aa:	4b1d      	ldr	r3, [pc, #116]	; (8003a20 <HAL_SPI_MspInit+0xcc>)
 80039ac:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80039b0:	4a1b      	ldr	r2, [pc, #108]	; (8003a20 <HAL_SPI_MspInit+0xcc>)
 80039b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039b6:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80039ba:	4b19      	ldr	r3, [pc, #100]	; (8003a20 <HAL_SPI_MspInit+0xcc>)
 80039bc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80039c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039c4:	60fb      	str	r3, [r7, #12]
 80039c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039c8:	4b15      	ldr	r3, [pc, #84]	; (8003a20 <HAL_SPI_MspInit+0xcc>)
 80039ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80039ce:	4a14      	ldr	r2, [pc, #80]	; (8003a20 <HAL_SPI_MspInit+0xcc>)
 80039d0:	f043 0302 	orr.w	r3, r3, #2
 80039d4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80039d8:	4b11      	ldr	r3, [pc, #68]	; (8003a20 <HAL_SPI_MspInit+0xcc>)
 80039da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	60bb      	str	r3, [r7, #8]
 80039e4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80039e6:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80039ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ee:	2302      	movs	r3, #2
 80039f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f4:	2300      	movs	r3, #0
 80039f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039fa:	2300      	movs	r3, #0
 80039fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003a00:	2305      	movs	r3, #5
 8003a02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a06:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	4805      	ldr	r0, [pc, #20]	; (8003a24 <HAL_SPI_MspInit+0xd0>)
 8003a0e:	f005 fd07 	bl	8009420 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003a12:	bf00      	nop
 8003a14:	37e8      	adds	r7, #232	; 0xe8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	40003800 	.word	0x40003800
 8003a20:	58024400 	.word	0x58024400
 8003a24:	58020400 	.word	0x58020400

08003a28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a0e      	ldr	r2, [pc, #56]	; (8003a70 <HAL_TIM_Base_MspInit+0x48>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d116      	bne.n	8003a68 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003a3a:	4b0e      	ldr	r3, [pc, #56]	; (8003a74 <HAL_TIM_Base_MspInit+0x4c>)
 8003a3c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8003a40:	4a0c      	ldr	r2, [pc, #48]	; (8003a74 <HAL_TIM_Base_MspInit+0x4c>)
 8003a42:	f043 0301 	orr.w	r3, r3, #1
 8003a46:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8003a4a:	4b0a      	ldr	r3, [pc, #40]	; (8003a74 <HAL_TIM_Base_MspInit+0x4c>)
 8003a4c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	60fb      	str	r3, [r7, #12]
 8003a56:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8003a58:	2200      	movs	r2, #0
 8003a5a:	2100      	movs	r1, #0
 8003a5c:	2019      	movs	r0, #25
 8003a5e:	f002 fb82 	bl	8006166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003a62:	2019      	movs	r0, #25
 8003a64:	f002 fb99 	bl	800619a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003a68:	bf00      	nop
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40010000 	.word	0x40010000
 8003a74:	58024400 	.word	0x58024400

08003a78 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_a;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b0ba      	sub	sp, #232	; 0xe8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a80:	f107 0310 	add.w	r3, r7, #16
 8003a84:	22c0      	movs	r2, #192	; 0xc0
 8003a86:	2100      	movs	r1, #0
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f00e f9fb 	bl	8011e84 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a50      	ldr	r2, [pc, #320]	; (8003bd4 <HAL_SAI_MspInit+0x15c>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	f040 8098 	bne.w	8003bca <HAL_SAI_MspInit+0x152>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8003a9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a9e:	f04f 0300 	mov.w	r3, #0
 8003aa2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 25;
 8003aa6:	2319      	movs	r3, #25
 8003aa8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 192;
 8003aaa:	23c0      	movs	r3, #192	; 0xc0
 8003aac:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 5;
 8003aae:	2305      	movs	r3, #5
 8003ab0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 5;
 8003ab6:	2305      	movs	r3, #5
 8003ab8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8003aba:	2340      	movs	r3, #64	; 0x40
 8003abc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003aca:	f107 0310 	add.w	r3, r7, #16
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f008 fe6c 	bl	800c7ac <HAL_RCCEx_PeriphCLKConfig>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <HAL_SAI_MspInit+0x66>
    {
      Error_Handler();
 8003ada:	f7ff fbad 	bl	8003238 <Error_Handler>
    }

    if (SAI1_client == 0)
 8003ade:	4b3e      	ldr	r3, [pc, #248]	; (8003bd8 <HAL_SAI_MspInit+0x160>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d116      	bne.n	8003b14 <HAL_SAI_MspInit+0x9c>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8003ae6:	4b3d      	ldr	r3, [pc, #244]	; (8003bdc <HAL_SAI_MspInit+0x164>)
 8003ae8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8003aec:	4a3b      	ldr	r2, [pc, #236]	; (8003bdc <HAL_SAI_MspInit+0x164>)
 8003aee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003af2:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8003af6:	4b39      	ldr	r3, [pc, #228]	; (8003bdc <HAL_SAI_MspInit+0x164>)
 8003af8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8003afc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b00:	60fb      	str	r3, [r7, #12]
 8003b02:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 8003b04:	2200      	movs	r2, #0
 8003b06:	2100      	movs	r1, #0
 8003b08:	2057      	movs	r0, #87	; 0x57
 8003b0a:	f002 fb2c 	bl	8006166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
 8003b0e:	2057      	movs	r0, #87	; 0x57
 8003b10:	f002 fb43 	bl	800619a <HAL_NVIC_EnableIRQ>
    }
    SAI1_client ++;
 8003b14:	4b30      	ldr	r3, [pc, #192]	; (8003bd8 <HAL_SAI_MspInit+0x160>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	3301      	adds	r3, #1
 8003b1a:	4a2f      	ldr	r2, [pc, #188]	; (8003bd8 <HAL_SAI_MspInit+0x160>)
 8003b1c:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8003b1e:	2370      	movs	r3, #112	; 0x70
 8003b20:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b24:	2302      	movs	r3, #2
 8003b26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b30:	2300      	movs	r3, #0
 8003b32:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8003b36:	2306      	movs	r3, #6
 8003b38:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b3c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003b40:	4619      	mov	r1, r3
 8003b42:	4827      	ldr	r0, [pc, #156]	; (8003be0 <HAL_SAI_MspInit+0x168>)
 8003b44:	f005 fc6c 	bl	8009420 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream0;
 8003b48:	4b26      	ldr	r3, [pc, #152]	; (8003be4 <HAL_SAI_MspInit+0x16c>)
 8003b4a:	4a27      	ldr	r2, [pc, #156]	; (8003be8 <HAL_SAI_MspInit+0x170>)
 8003b4c:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8003b4e:	4b25      	ldr	r3, [pc, #148]	; (8003be4 <HAL_SAI_MspInit+0x16c>)
 8003b50:	2257      	movs	r2, #87	; 0x57
 8003b52:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b54:	4b23      	ldr	r3, [pc, #140]	; (8003be4 <HAL_SAI_MspInit+0x16c>)
 8003b56:	2240      	movs	r2, #64	; 0x40
 8003b58:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b5a:	4b22      	ldr	r3, [pc, #136]	; (8003be4 <HAL_SAI_MspInit+0x16c>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8003b60:	4b20      	ldr	r3, [pc, #128]	; (8003be4 <HAL_SAI_MspInit+0x16c>)
 8003b62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b66:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003b68:	4b1e      	ldr	r3, [pc, #120]	; (8003be4 <HAL_SAI_MspInit+0x16c>)
 8003b6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b6e:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003b70:	4b1c      	ldr	r3, [pc, #112]	; (8003be4 <HAL_SAI_MspInit+0x16c>)
 8003b72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b76:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8003b78:	4b1a      	ldr	r3, [pc, #104]	; (8003be4 <HAL_SAI_MspInit+0x16c>)
 8003b7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b7e:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 8003b80:	4b18      	ldr	r3, [pc, #96]	; (8003be4 <HAL_SAI_MspInit+0x16c>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003b86:	4b17      	ldr	r3, [pc, #92]	; (8003be4 <HAL_SAI_MspInit+0x16c>)
 8003b88:	2204      	movs	r2, #4
 8003b8a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003b8c:	4b15      	ldr	r3, [pc, #84]	; (8003be4 <HAL_SAI_MspInit+0x16c>)
 8003b8e:	2203      	movs	r2, #3
 8003b90:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
 8003b92:	4b14      	ldr	r3, [pc, #80]	; (8003be4 <HAL_SAI_MspInit+0x16c>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003b98:	4b12      	ldr	r3, [pc, #72]	; (8003be4 <HAL_SAI_MspInit+0x16c>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8003b9e:	4811      	ldr	r0, [pc, #68]	; (8003be4 <HAL_SAI_MspInit+0x16c>)
 8003ba0:	f002 fcf0 	bl	8006584 <HAL_DMA_Init>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <HAL_SAI_MspInit+0x136>
    {
      Error_Handler();
 8003baa:	f7ff fb45 	bl	8003238 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a0c      	ldr	r2, [pc, #48]	; (8003be4 <HAL_SAI_MspInit+0x16c>)
 8003bb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8003bb6:	4a0b      	ldr	r2, [pc, #44]	; (8003be4 <HAL_SAI_MspInit+0x16c>)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a09      	ldr	r2, [pc, #36]	; (8003be4 <HAL_SAI_MspInit+0x16c>)
 8003bc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003bc4:	4a07      	ldr	r2, [pc, #28]	; (8003be4 <HAL_SAI_MspInit+0x16c>)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 8003bca:	bf00      	nop
 8003bcc:	37e8      	adds	r7, #232	; 0xe8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	40015804 	.word	0x40015804
 8003bd8:	20000614 	.word	0x20000614
 8003bdc:	58024400 	.word	0x58024400
 8003be0:	58021000 	.word	0x58021000
 8003be4:	200004c8 	.word	0x200004c8
 8003be8:	40020010 	.word	0x40020010

08003bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003bf0:	e7fe      	b.n	8003bf0 <NMI_Handler+0x4>

08003bf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bf6:	e7fe      	b.n	8003bf6 <HardFault_Handler+0x4>

08003bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bfc:	e7fe      	b.n	8003bfc <MemManage_Handler+0x4>

08003bfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c02:	e7fe      	b.n	8003c02 <BusFault_Handler+0x4>

08003c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c08:	e7fe      	b.n	8003c08 <UsageFault_Handler+0x4>

08003c0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c0e:	bf00      	nop
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c1c:	bf00      	nop
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c26:	b480      	push	{r7}
 8003c28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c2a:	bf00      	nop
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c38:	f000 fa48 	bl	80040cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
#if 1
	if (HAL_GPIO_ReadPin(BTN_PWR_GPIO_Port, BTN_PWR_Pin) == 0) // is power button down ?
 8003c3c:	2101      	movs	r1, #1
 8003c3e:	480c      	ldr	r0, [pc, #48]	; (8003c70 <SysTick_Handler+0x3c>)
 8003c40:	f005 fd9e 	bl	8009780 <HAL_GPIO_ReadPin>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10d      	bne.n	8003c66 <SysTick_Handler+0x32>
			{
		g_system_reset_ticks++;
 8003c4a:	4b0a      	ldr	r3, [pc, #40]	; (8003c74 <SysTick_Handler+0x40>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	3301      	adds	r3, #1
 8003c50:	4a08      	ldr	r2, [pc, #32]	; (8003c74 <SysTick_Handler+0x40>)
 8003c52:	6013      	str	r3, [r2, #0]
		if (g_system_reset_ticks >= 5000) {
 8003c54:	4b07      	ldr	r3, [pc, #28]	; (8003c74 <SysTick_Handler+0x40>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f241 3287 	movw	r2, #4999	; 0x1387
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	dd05      	ble.n	8003c6c <SysTick_Handler+0x38>
			HAL_NVIC_SystemReset();
 8003c60:	f002 faa9 	bl	80061b6 <HAL_NVIC_SystemReset>
	} else {
		g_system_reset_ticks = 0;
	}
#endif
  /* USER CODE END SysTick_IRQn 1 */
}
 8003c64:	e002      	b.n	8003c6c <SysTick_Handler+0x38>
		g_system_reset_ticks = 0;
 8003c66:	4b03      	ldr	r3, [pc, #12]	; (8003c74 <SysTick_Handler+0x40>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]
}
 8003c6c:	bf00      	nop
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	58020000 	.word	0x58020000
 8003c74:	20000618 	.word	0x20000618

08003c78 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003c7c:	2004      	movs	r0, #4
 8003c7e:	f005 fdb0 	bl	80097e2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003c82:	bf00      	nop
 8003c84:	bd80      	pop	{r7, pc}
	...

08003c88 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8003c8c:	4802      	ldr	r0, [pc, #8]	; (8003c98 <DMA1_Stream0_IRQHandler+0x10>)
 8003c8e:	f003 ffd5 	bl	8007c3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003c92:	bf00      	nop
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	200004c8 	.word	0x200004c8

08003c9c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003ca0:	4802      	ldr	r0, [pc, #8]	; (8003cac <ADC_IRQHandler+0x10>)
 8003ca2:	f001 f901 	bl	8004ea8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003ca6:	bf00      	nop
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	20000210 	.word	0x20000210

08003cb0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003cb4:	2080      	movs	r0, #128	; 0x80
 8003cb6:	f005 fd94 	bl	80097e2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003cba:	bf00      	nop
 8003cbc:	bd80      	pop	{r7, pc}
	...

08003cc0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003cc4:	4802      	ldr	r0, [pc, #8]	; (8003cd0 <TIM1_UP_IRQHandler+0x10>)
 8003cc6:	f00d f907 	bl	8010ed8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003cca:	bf00      	nop
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	200005c8 	.word	0x200005c8

08003cd4 <SAI1_IRQHandler>:

/**
  * @brief This function handles SAI1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
 8003cd8:	4802      	ldr	r0, [pc, #8]	; (8003ce4 <SAI1_IRQHandler+0x10>)
 8003cda:	f00c f819 	bl	800fd10 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 8003cde:	bf00      	nop
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	20000430 	.word	0x20000430

08003ce8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003cec:	4802      	ldr	r0, [pc, #8]	; (8003cf8 <LTDC_IRQHandler+0x10>)
 8003cee:	f005 fe6d 	bl	80099cc <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003cf2:	bf00      	nop
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	20000304 	.word	0x20000304

08003cfc <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
 8003d00:	4802      	ldr	r0, [pc, #8]	; (8003d0c <OCTOSPI1_IRQHandler+0x10>)
 8003d02:	f006 fa3d 	bl	800a180 <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
 8003d06:	bf00      	nop
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	200003ac 	.word	0x200003ac

08003d10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d10:	b480      	push	{r7}
 8003d12:	af00      	add	r7, sp, #0
	return 1;
 8003d14:	2301      	movs	r3, #1
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <_kill>:

int _kill(int pid, int sig)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003d2a:	f00e f909 	bl	8011f40 <__errno>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2216      	movs	r2, #22
 8003d32:	601a      	str	r2, [r3, #0]
	return -1;
 8003d34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3708      	adds	r7, #8
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <_exit>:

void _exit (int status)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003d48:	f04f 31ff 	mov.w	r1, #4294967295
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f7ff ffe7 	bl	8003d20 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003d52:	e7fe      	b.n	8003d52 <_exit+0x12>

08003d54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d60:	2300      	movs	r3, #0
 8003d62:	617b      	str	r3, [r7, #20]
 8003d64:	e00a      	b.n	8003d7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003d66:	f3af 8000 	nop.w
 8003d6a:	4601      	mov	r1, r0
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	1c5a      	adds	r2, r3, #1
 8003d70:	60ba      	str	r2, [r7, #8]
 8003d72:	b2ca      	uxtb	r2, r1
 8003d74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	617b      	str	r3, [r7, #20]
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	dbf0      	blt.n	8003d66 <_read+0x12>
	}

return len;
 8003d84:	687b      	ldr	r3, [r7, #4]
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3718      	adds	r7, #24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b086      	sub	sp, #24
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	60f8      	str	r0, [r7, #12]
 8003d96:	60b9      	str	r1, [r7, #8]
 8003d98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	617b      	str	r3, [r7, #20]
 8003d9e:	e009      	b.n	8003db4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	1c5a      	adds	r2, r3, #1
 8003da4:	60ba      	str	r2, [r7, #8]
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	3301      	adds	r3, #1
 8003db2:	617b      	str	r3, [r7, #20]
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	dbf1      	blt.n	8003da0 <_write+0x12>
	}
	return len;
 8003dbc:	687b      	ldr	r3, [r7, #4]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <_close>:

int _close(int file)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b083      	sub	sp, #12
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
	return -1;
 8003dce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b083      	sub	sp, #12
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
 8003de6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003dee:	605a      	str	r2, [r3, #4]
	return 0;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <_isatty>:

int _isatty(int file)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
	return 1;
 8003e06:	2301      	movs	r3, #1
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
	return 0;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3714      	adds	r7, #20
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
	...

08003e30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e38:	4a14      	ldr	r2, [pc, #80]	; (8003e8c <_sbrk+0x5c>)
 8003e3a:	4b15      	ldr	r3, [pc, #84]	; (8003e90 <_sbrk+0x60>)
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e44:	4b13      	ldr	r3, [pc, #76]	; (8003e94 <_sbrk+0x64>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d102      	bne.n	8003e52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e4c:	4b11      	ldr	r3, [pc, #68]	; (8003e94 <_sbrk+0x64>)
 8003e4e:	4a12      	ldr	r2, [pc, #72]	; (8003e98 <_sbrk+0x68>)
 8003e50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e52:	4b10      	ldr	r3, [pc, #64]	; (8003e94 <_sbrk+0x64>)
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4413      	add	r3, r2
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d207      	bcs.n	8003e70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e60:	f00e f86e 	bl	8011f40 <__errno>
 8003e64:	4603      	mov	r3, r0
 8003e66:	220c      	movs	r2, #12
 8003e68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e6e:	e009      	b.n	8003e84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e70:	4b08      	ldr	r3, [pc, #32]	; (8003e94 <_sbrk+0x64>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e76:	4b07      	ldr	r3, [pc, #28]	; (8003e94 <_sbrk+0x64>)
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	4a05      	ldr	r2, [pc, #20]	; (8003e94 <_sbrk+0x64>)
 8003e80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e82:	68fb      	ldr	r3, [r7, #12]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3718      	adds	r7, #24
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	20020000 	.word	0x20020000
 8003e90:	00005000 	.word	0x00005000
 8003e94:	2000061c 	.word	0x2000061c
 8003e98:	20000770 	.word	0x20000770

08003e9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003ea0:	4b34      	ldr	r3, [pc, #208]	; (8003f74 <SystemInit+0xd8>)
 8003ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea6:	4a33      	ldr	r2, [pc, #204]	; (8003f74 <SystemInit+0xd8>)
 8003ea8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003eac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003eb0:	4b31      	ldr	r3, [pc, #196]	; (8003f78 <SystemInit+0xdc>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 030f 	and.w	r3, r3, #15
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d807      	bhi.n	8003ecc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003ebc:	4b2e      	ldr	r3, [pc, #184]	; (8003f78 <SystemInit+0xdc>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f023 030f 	bic.w	r3, r3, #15
 8003ec4:	4a2c      	ldr	r2, [pc, #176]	; (8003f78 <SystemInit+0xdc>)
 8003ec6:	f043 0303 	orr.w	r3, r3, #3
 8003eca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003ecc:	4b2b      	ldr	r3, [pc, #172]	; (8003f7c <SystemInit+0xe0>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a2a      	ldr	r2, [pc, #168]	; (8003f7c <SystemInit+0xe0>)
 8003ed2:	f043 0301 	orr.w	r3, r3, #1
 8003ed6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003ed8:	4b28      	ldr	r3, [pc, #160]	; (8003f7c <SystemInit+0xe0>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003ede:	4b27      	ldr	r3, [pc, #156]	; (8003f7c <SystemInit+0xe0>)
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	4926      	ldr	r1, [pc, #152]	; (8003f7c <SystemInit+0xe0>)
 8003ee4:	4b26      	ldr	r3, [pc, #152]	; (8003f80 <SystemInit+0xe4>)
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003eea:	4b23      	ldr	r3, [pc, #140]	; (8003f78 <SystemInit+0xdc>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 030c 	and.w	r3, r3, #12
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d007      	beq.n	8003f06 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003ef6:	4b20      	ldr	r3, [pc, #128]	; (8003f78 <SystemInit+0xdc>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f023 030f 	bic.w	r3, r3, #15
 8003efe:	4a1e      	ldr	r2, [pc, #120]	; (8003f78 <SystemInit+0xdc>)
 8003f00:	f043 0303 	orr.w	r3, r3, #3
 8003f04:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8003f06:	4b1d      	ldr	r3, [pc, #116]	; (8003f7c <SystemInit+0xe0>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8003f0c:	4b1b      	ldr	r3, [pc, #108]	; (8003f7c <SystemInit+0xe0>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8003f12:	4b1a      	ldr	r3, [pc, #104]	; (8003f7c <SystemInit+0xe0>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003f18:	4b18      	ldr	r3, [pc, #96]	; (8003f7c <SystemInit+0xe0>)
 8003f1a:	4a1a      	ldr	r2, [pc, #104]	; (8003f84 <SystemInit+0xe8>)
 8003f1c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003f1e:	4b17      	ldr	r3, [pc, #92]	; (8003f7c <SystemInit+0xe0>)
 8003f20:	4a19      	ldr	r2, [pc, #100]	; (8003f88 <SystemInit+0xec>)
 8003f22:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003f24:	4b15      	ldr	r3, [pc, #84]	; (8003f7c <SystemInit+0xe0>)
 8003f26:	4a19      	ldr	r2, [pc, #100]	; (8003f8c <SystemInit+0xf0>)
 8003f28:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003f2a:	4b14      	ldr	r3, [pc, #80]	; (8003f7c <SystemInit+0xe0>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003f30:	4b12      	ldr	r3, [pc, #72]	; (8003f7c <SystemInit+0xe0>)
 8003f32:	4a16      	ldr	r2, [pc, #88]	; (8003f8c <SystemInit+0xf0>)
 8003f34:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003f36:	4b11      	ldr	r3, [pc, #68]	; (8003f7c <SystemInit+0xe0>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003f3c:	4b0f      	ldr	r3, [pc, #60]	; (8003f7c <SystemInit+0xe0>)
 8003f3e:	4a13      	ldr	r2, [pc, #76]	; (8003f8c <SystemInit+0xf0>)
 8003f40:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003f42:	4b0e      	ldr	r3, [pc, #56]	; (8003f7c <SystemInit+0xe0>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003f48:	4b0c      	ldr	r3, [pc, #48]	; (8003f7c <SystemInit+0xe0>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a0b      	ldr	r2, [pc, #44]	; (8003f7c <SystemInit+0xe0>)
 8003f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f52:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003f54:	4b09      	ldr	r3, [pc, #36]	; (8003f7c <SystemInit+0xe0>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003f5a:	4b0d      	ldr	r3, [pc, #52]	; (8003f90 <SystemInit+0xf4>)
 8003f5c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003f60:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003f62:	4b04      	ldr	r3, [pc, #16]	; (8003f74 <SystemInit+0xd8>)
 8003f64:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f68:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003f6a:	bf00      	nop
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	e000ed00 	.word	0xe000ed00
 8003f78:	52002000 	.word	0x52002000
 8003f7c:	58024400 	.word	0x58024400
 8003f80:	eaf6ed7f 	.word	0xeaf6ed7f
 8003f84:	02020200 	.word	0x02020200
 8003f88:	01ff0000 	.word	0x01ff0000
 8003f8c:	01010280 	.word	0x01010280
 8003f90:	52004000 	.word	0x52004000

08003f94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003f94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003fcc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003f98:	f7ff ff80 	bl	8003e9c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003f9c:	480c      	ldr	r0, [pc, #48]	; (8003fd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003f9e:	490d      	ldr	r1, [pc, #52]	; (8003fd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003fa0:	4a0d      	ldr	r2, [pc, #52]	; (8003fd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003fa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fa4:	e002      	b.n	8003fac <LoopCopyDataInit>

08003fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003faa:	3304      	adds	r3, #4

08003fac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8003fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003fb0:	d3f9      	bcc.n	8003fa6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003fb2:	4a0a      	ldr	r2, [pc, #40]	; (8003fdc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003fb4:	4c0a      	ldr	r4, [pc, #40]	; (8003fe0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003fb8:	e001      	b.n	8003fbe <LoopFillZerobss>

08003fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003fbc:	3204      	adds	r2, #4

08003fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003fc0:	d3fb      	bcc.n	8003fba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003fc2:	f00d ffc3 	bl	8011f4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003fc6:	f7fe fb99 	bl	80026fc <main>
  bx  lr
 8003fca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003fcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003fd4:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8003fd8:	08014620 	.word	0x08014620
  ldr r2, =_sbss
 8003fdc:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8003fe0:	20000770 	.word	0x20000770

08003fe4 <BDMA1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003fe4:	e7fe      	b.n	8003fe4 <BDMA1_IRQHandler>
	...

08003fe8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fee:	2003      	movs	r0, #3
 8003ff0:	f002 f8ae 	bl	8006150 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003ff4:	f008 fa1a 	bl	800c42c <HAL_RCC_GetSysClockFreq>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	4b15      	ldr	r3, [pc, #84]	; (8004050 <HAL_Init+0x68>)
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	0a1b      	lsrs	r3, r3, #8
 8004000:	f003 030f 	and.w	r3, r3, #15
 8004004:	4913      	ldr	r1, [pc, #76]	; (8004054 <HAL_Init+0x6c>)
 8004006:	5ccb      	ldrb	r3, [r1, r3]
 8004008:	f003 031f 	and.w	r3, r3, #31
 800400c:	fa22 f303 	lsr.w	r3, r2, r3
 8004010:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004012:	4b0f      	ldr	r3, [pc, #60]	; (8004050 <HAL_Init+0x68>)
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	f003 030f 	and.w	r3, r3, #15
 800401a:	4a0e      	ldr	r2, [pc, #56]	; (8004054 <HAL_Init+0x6c>)
 800401c:	5cd3      	ldrb	r3, [r2, r3]
 800401e:	f003 031f 	and.w	r3, r3, #31
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	fa22 f303 	lsr.w	r3, r2, r3
 8004028:	4a0b      	ldr	r2, [pc, #44]	; (8004058 <HAL_Init+0x70>)
 800402a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800402c:	4a0b      	ldr	r2, [pc, #44]	; (800405c <HAL_Init+0x74>)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004032:	2000      	movs	r0, #0
 8004034:	f000 f814 	bl	8004060 <HAL_InitTick>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e002      	b.n	8004048 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004042:	f7ff f8ff 	bl	8003244 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3708      	adds	r7, #8
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	58024400 	.word	0x58024400
 8004054:	08014520 	.word	0x08014520
 8004058:	20000048 	.word	0x20000048
 800405c:	20000044 	.word	0x20000044

08004060 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004068:	4b15      	ldr	r3, [pc, #84]	; (80040c0 <HAL_InitTick+0x60>)
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e021      	b.n	80040b8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004074:	4b13      	ldr	r3, [pc, #76]	; (80040c4 <HAL_InitTick+0x64>)
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	4b11      	ldr	r3, [pc, #68]	; (80040c0 <HAL_InitTick+0x60>)
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	4619      	mov	r1, r3
 800407e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004082:	fbb3 f3f1 	udiv	r3, r3, r1
 8004086:	fbb2 f3f3 	udiv	r3, r2, r3
 800408a:	4618      	mov	r0, r3
 800408c:	f002 f897 	bl	80061be <HAL_SYSTICK_Config>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e00e      	b.n	80040b8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b0f      	cmp	r3, #15
 800409e:	d80a      	bhi.n	80040b6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040a0:	2200      	movs	r2, #0
 80040a2:	6879      	ldr	r1, [r7, #4]
 80040a4:	f04f 30ff 	mov.w	r0, #4294967295
 80040a8:	f002 f85d 	bl	8006166 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040ac:	4a06      	ldr	r2, [pc, #24]	; (80040c8 <HAL_InitTick+0x68>)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80040b2:	2300      	movs	r3, #0
 80040b4:	e000      	b.n	80040b8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3708      	adds	r7, #8
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	20000050 	.word	0x20000050
 80040c4:	20000044 	.word	0x20000044
 80040c8:	2000004c 	.word	0x2000004c

080040cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80040d0:	4b06      	ldr	r3, [pc, #24]	; (80040ec <HAL_IncTick+0x20>)
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	461a      	mov	r2, r3
 80040d6:	4b06      	ldr	r3, [pc, #24]	; (80040f0 <HAL_IncTick+0x24>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4413      	add	r3, r2
 80040dc:	4a04      	ldr	r2, [pc, #16]	; (80040f0 <HAL_IncTick+0x24>)
 80040de:	6013      	str	r3, [r2, #0]
}
 80040e0:	bf00      	nop
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	20000050 	.word	0x20000050
 80040f0:	20000620 	.word	0x20000620

080040f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0
  return uwTick;
 80040f8:	4b03      	ldr	r3, [pc, #12]	; (8004108 <HAL_GetTick+0x14>)
 80040fa:	681b      	ldr	r3, [r3, #0]
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	20000620 	.word	0x20000620

0800410c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004114:	f7ff ffee 	bl	80040f4 <HAL_GetTick>
 8004118:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004124:	d005      	beq.n	8004132 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004126:	4b0a      	ldr	r3, [pc, #40]	; (8004150 <HAL_Delay+0x44>)
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	461a      	mov	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	4413      	add	r3, r2
 8004130:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004132:	bf00      	nop
 8004134:	f7ff ffde 	bl	80040f4 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	429a      	cmp	r2, r3
 8004142:	d8f7      	bhi.n	8004134 <HAL_Delay+0x28>
  {
  }
}
 8004144:	bf00      	nop
 8004146:	bf00      	nop
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	20000050 	.word	0x20000050

08004154 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	431a      	orrs	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	609a      	str	r2, [r3, #8]
}
 800416e:	bf00      	nop
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800417a:	b480      	push	{r7}
 800417c:	b083      	sub	sp, #12
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
 8004182:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	431a      	orrs	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	609a      	str	r2, [r3, #8]
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80041bc:	b480      	push	{r7}
 80041be:	b087      	sub	sp, #28
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
 80041c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	3360      	adds	r3, #96	; 0x60
 80041ce:	461a      	mov	r2, r3
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	4413      	add	r3, r2
 80041d6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	430b      	orrs	r3, r1
 80041ea:	431a      	orrs	r2, r3
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80041f0:	bf00      	nop
 80041f2:	371c      	adds	r7, #28
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b085      	sub	sp, #20
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	f003 031f 	and.w	r3, r3, #31
 8004216:	6879      	ldr	r1, [r7, #4]
 8004218:	fa01 f303 	lsl.w	r3, r1, r3
 800421c:	431a      	orrs	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	611a      	str	r2, [r3, #16]
}
 8004222:	bf00      	nop
 8004224:	3714      	adds	r7, #20
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr

0800422e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800422e:	b480      	push	{r7}
 8004230:	b087      	sub	sp, #28
 8004232:	af00      	add	r7, sp, #0
 8004234:	60f8      	str	r0, [r7, #12]
 8004236:	60b9      	str	r1, [r7, #8]
 8004238:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	3360      	adds	r3, #96	; 0x60
 800423e:	461a      	mov	r2, r3
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	4413      	add	r3, r2
 8004246:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	431a      	orrs	r2, r3
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	601a      	str	r2, [r3, #0]
  }
}
 8004258:	bf00      	nop
 800425a:	371c      	adds	r7, #28
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004274:	2b00      	cmp	r3, #0
 8004276:	d101      	bne.n	800427c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004278:	2301      	movs	r3, #1
 800427a:	e000      	b.n	800427e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr

0800428a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800428a:	b480      	push	{r7}
 800428c:	b087      	sub	sp, #28
 800428e:	af00      	add	r7, sp, #0
 8004290:	60f8      	str	r0, [r7, #12]
 8004292:	60b9      	str	r1, [r7, #8]
 8004294:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	3330      	adds	r3, #48	; 0x30
 800429a:	461a      	mov	r2, r3
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	0a1b      	lsrs	r3, r3, #8
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	f003 030c 	and.w	r3, r3, #12
 80042a6:	4413      	add	r3, r2
 80042a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	f003 031f 	and.w	r3, r3, #31
 80042b4:	211f      	movs	r1, #31
 80042b6:	fa01 f303 	lsl.w	r3, r1, r3
 80042ba:	43db      	mvns	r3, r3
 80042bc:	401a      	ands	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	0e9b      	lsrs	r3, r3, #26
 80042c2:	f003 011f 	and.w	r1, r3, #31
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	f003 031f 	and.w	r3, r3, #31
 80042cc:	fa01 f303 	lsl.w	r3, r1, r3
 80042d0:	431a      	orrs	r2, r3
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80042d6:	bf00      	nop
 80042d8:	371c      	adds	r7, #28
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80042e2:	b480      	push	{r7}
 80042e4:	b083      	sub	sp, #12
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ee:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d101      	bne.n	80042fa <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80042f6:	2301      	movs	r3, #1
 80042f8:	e000      	b.n	80042fc <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004308:	b480      	push	{r7}
 800430a:	b087      	sub	sp, #28
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	3314      	adds	r3, #20
 8004318:	461a      	mov	r2, r3
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	0e5b      	lsrs	r3, r3, #25
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	f003 0304 	and.w	r3, r3, #4
 8004324:	4413      	add	r3, r2
 8004326:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	0d1b      	lsrs	r3, r3, #20
 8004330:	f003 031f 	and.w	r3, r3, #31
 8004334:	2107      	movs	r1, #7
 8004336:	fa01 f303 	lsl.w	r3, r1, r3
 800433a:	43db      	mvns	r3, r3
 800433c:	401a      	ands	r2, r3
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	0d1b      	lsrs	r3, r3, #20
 8004342:	f003 031f 	and.w	r3, r3, #31
 8004346:	6879      	ldr	r1, [r7, #4]
 8004348:	fa01 f303 	lsl.w	r3, r1, r3
 800434c:	431a      	orrs	r2, r3
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004352:	bf00      	nop
 8004354:	371c      	adds	r7, #28
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
	...

08004360 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004378:	43db      	mvns	r3, r3
 800437a:	401a      	ands	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f003 0318 	and.w	r3, r3, #24
 8004382:	4908      	ldr	r1, [pc, #32]	; (80043a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004384:	40d9      	lsrs	r1, r3
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	400b      	ands	r3, r1
 800438a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800438e:	431a      	orrs	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8004396:	bf00      	nop
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	000fffff 	.word	0x000fffff

080043a8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f003 031f 	and.w	r3, r3, #31
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	689a      	ldr	r2, [r3, #8]
 80043ec:	4b04      	ldr	r3, [pc, #16]	; (8004400 <LL_ADC_DisableDeepPowerDown+0x20>)
 80043ee:	4013      	ands	r3, r2
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	6093      	str	r3, [r2, #8]
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr
 8004400:	5fffffc0 	.word	0x5fffffc0

08004404 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004414:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004418:	d101      	bne.n	800441e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800441a:	2301      	movs	r3, #1
 800441c:	e000      	b.n	8004420 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689a      	ldr	r2, [r3, #8]
 8004438:	4b05      	ldr	r3, [pc, #20]	; (8004450 <LL_ADC_EnableInternalRegulator+0x24>)
 800443a:	4013      	ands	r3, r2
 800443c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	6fffffc0 	.word	0x6fffffc0

08004454 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004464:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004468:	d101      	bne.n	800446e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800446a:	2301      	movs	r3, #1
 800446c:	e000      	b.n	8004470 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	4b05      	ldr	r3, [pc, #20]	; (80044a0 <LL_ADC_Enable+0x24>)
 800448a:	4013      	ands	r3, r2
 800448c:	f043 0201 	orr.w	r2, r3, #1
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr
 80044a0:	7fffffc0 	.word	0x7fffffc0

080044a4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689a      	ldr	r2, [r3, #8]
 80044b0:	4b05      	ldr	r3, [pc, #20]	; (80044c8 <LL_ADC_Disable+0x24>)
 80044b2:	4013      	ands	r3, r2
 80044b4:	f043 0202 	orr.w	r2, r3, #2
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr
 80044c8:	7fffffc0 	.word	0x7fffffc0

080044cc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d101      	bne.n	80044e4 <LL_ADC_IsEnabled+0x18>
 80044e0:	2301      	movs	r3, #1
 80044e2:	e000      	b.n	80044e6 <LL_ADC_IsEnabled+0x1a>
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b083      	sub	sp, #12
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b02      	cmp	r3, #2
 8004504:	d101      	bne.n	800450a <LL_ADC_IsDisableOngoing+0x18>
 8004506:	2301      	movs	r3, #1
 8004508:	e000      	b.n	800450c <LL_ADC_IsDisableOngoing+0x1a>
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689a      	ldr	r2, [r3, #8]
 8004524:	4b05      	ldr	r3, [pc, #20]	; (800453c <LL_ADC_REG_StartConversion+0x24>)
 8004526:	4013      	ands	r3, r2
 8004528:	f043 0204 	orr.w	r2, r3, #4
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	7fffffc0 	.word	0x7fffffc0

08004540 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689a      	ldr	r2, [r3, #8]
 800454c:	4b05      	ldr	r3, [pc, #20]	; (8004564 <LL_ADC_REG_StopConversion+0x24>)
 800454e:	4013      	ands	r3, r2
 8004550:	f043 0210 	orr.w	r2, r3, #16
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004558:	bf00      	nop
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr
 8004564:	7fffffc0 	.word	0x7fffffc0

08004568 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f003 0304 	and.w	r3, r3, #4
 8004578:	2b04      	cmp	r3, #4
 800457a:	d101      	bne.n	8004580 <LL_ADC_REG_IsConversionOngoing+0x18>
 800457c:	2301      	movs	r3, #1
 800457e:	e000      	b.n	8004582 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
	...

08004590 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689a      	ldr	r2, [r3, #8]
 800459c:	4b05      	ldr	r3, [pc, #20]	; (80045b4 <LL_ADC_INJ_StopConversion+0x24>)
 800459e:	4013      	ands	r3, r2
 80045a0:	f043 0220 	orr.w	r2, r3, #32
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr
 80045b4:	7fffffc0 	.word	0x7fffffc0

080045b8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f003 0308 	and.w	r3, r3, #8
 80045c8:	2b08      	cmp	r3, #8
 80045ca:	d101      	bne.n	80045d0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80045cc:	2301      	movs	r3, #1
 80045ce:	e000      	b.n	80045d2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
	...

080045e0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80045e0:	b590      	push	{r4, r7, lr}
 80045e2:	b089      	sub	sp, #36	; 0x24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045e8:	2300      	movs	r3, #0
 80045ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80045ec:	2300      	movs	r3, #0
 80045ee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e138      	b.n	800486c <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004604:	2b00      	cmp	r3, #0
 8004606:	d109      	bne.n	800461c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f7fe fe35 	bl	8003278 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4618      	mov	r0, r3
 8004622:	f7ff feef 	bl	8004404 <LL_ADC_IsDeepPowerDownEnabled>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d004      	beq.n	8004636 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4618      	mov	r0, r3
 8004632:	f7ff fed5 	bl	80043e0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4618      	mov	r0, r3
 800463c:	f7ff ff0a 	bl	8004454 <LL_ADC_IsInternalRegulatorEnabled>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d114      	bne.n	8004670 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4618      	mov	r0, r3
 800464c:	f7ff feee 	bl	800442c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004650:	4b88      	ldr	r3, [pc, #544]	; (8004874 <HAL_ADC_Init+0x294>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	099b      	lsrs	r3, r3, #6
 8004656:	4a88      	ldr	r2, [pc, #544]	; (8004878 <HAL_ADC_Init+0x298>)
 8004658:	fba2 2303 	umull	r2, r3, r2, r3
 800465c:	099b      	lsrs	r3, r3, #6
 800465e:	3301      	adds	r3, #1
 8004660:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004662:	e002      	b.n	800466a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	3b01      	subs	r3, #1
 8004668:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1f9      	bne.n	8004664 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4618      	mov	r0, r3
 8004676:	f7ff feed 	bl	8004454 <LL_ADC_IsInternalRegulatorEnabled>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d10d      	bne.n	800469c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004684:	f043 0210 	orr.w	r2, r3, #16
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004690:	f043 0201 	orr.w	r2, r3, #1
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4618      	mov	r0, r3
 80046a2:	f7ff ff61 	bl	8004568 <LL_ADC_REG_IsConversionOngoing>
 80046a6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ac:	f003 0310 	and.w	r3, r3, #16
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f040 80d2 	bne.w	800485a <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f040 80ce 	bne.w	800485a <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80046c6:	f043 0202 	orr.w	r2, r3, #2
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7ff fefa 	bl	80044cc <LL_ADC_IsEnabled>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d110      	bne.n	8004700 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80046de:	4867      	ldr	r0, [pc, #412]	; (800487c <HAL_ADC_Init+0x29c>)
 80046e0:	f7ff fef4 	bl	80044cc <LL_ADC_IsEnabled>
 80046e4:	4604      	mov	r4, r0
 80046e6:	4866      	ldr	r0, [pc, #408]	; (8004880 <HAL_ADC_Init+0x2a0>)
 80046e8:	f7ff fef0 	bl	80044cc <LL_ADC_IsEnabled>
 80046ec:	4603      	mov	r3, r0
 80046ee:	4323      	orrs	r3, r4
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d105      	bne.n	8004700 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	4619      	mov	r1, r3
 80046fa:	4862      	ldr	r0, [pc, #392]	; (8004884 <HAL_ADC_Init+0x2a4>)
 80046fc:	f7ff fd2a 	bl	8004154 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	7d5b      	ldrb	r3, [r3, #21]
 8004704:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800470a:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8004710:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	7f1b      	ldrb	r3, [r3, #28]
 8004716:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004718:	4313      	orrs	r3, r2
 800471a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	7f1b      	ldrb	r3, [r3, #28]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d106      	bne.n	8004732 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a1b      	ldr	r3, [r3, #32]
 8004728:	3b01      	subs	r3, #1
 800472a:	045b      	lsls	r3, r3, #17
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	4313      	orrs	r3, r2
 8004730:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004736:	2b00      	cmp	r3, #0
 8004738:	d009      	beq.n	800474e <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004746:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	4313      	orrs	r3, r2
 800474c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68da      	ldr	r2, [r3, #12]
 8004754:	4b4c      	ldr	r3, [pc, #304]	; (8004888 <HAL_ADC_Init+0x2a8>)
 8004756:	4013      	ands	r3, r2
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	6812      	ldr	r2, [r2, #0]
 800475c:	69b9      	ldr	r1, [r7, #24]
 800475e:	430b      	orrs	r3, r1
 8004760:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f7ff fefe 	bl	8004568 <LL_ADC_REG_IsConversionOngoing>
 800476c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4618      	mov	r0, r3
 8004774:	f7ff ff20 	bl	80045b8 <LL_ADC_INJ_IsConversionOngoing>
 8004778:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d14a      	bne.n	8004816 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d147      	bne.n	8004816 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	7d1b      	ldrb	r3, [r3, #20]
 800478a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8004790:	4313      	orrs	r3, r2
 8004792:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68da      	ldr	r2, [r3, #12]
 800479a:	4b3c      	ldr	r3, [pc, #240]	; (800488c <HAL_ADC_Init+0x2ac>)
 800479c:	4013      	ands	r3, r2
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	6812      	ldr	r2, [r2, #0]
 80047a2:	69b9      	ldr	r1, [r7, #24]
 80047a4:	430b      	orrs	r3, r1
 80047a6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d11b      	bne.n	80047ea <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	691a      	ldr	r2, [r3, #16]
 80047be:	4b34      	ldr	r3, [pc, #208]	; (8004890 <HAL_ADC_Init+0x2b0>)
 80047c0:	4013      	ands	r3, r2
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80047c6:	3a01      	subs	r2, #1
 80047c8:	0411      	lsls	r1, r2, #16
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80047ce:	4311      	orrs	r1, r2
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80047d4:	4311      	orrs	r1, r2
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80047da:	430a      	orrs	r2, r1
 80047dc:	431a      	orrs	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f042 0201 	orr.w	r2, r2, #1
 80047e6:	611a      	str	r2, [r3, #16]
 80047e8:	e007      	b.n	80047fa <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	691a      	ldr	r2, [r3, #16]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f022 0201 	bic.w	r2, r2, #1
 80047f8:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	430a      	orrs	r2, r1
 800480e:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f001 f9f5 	bl	8005c00 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d10c      	bne.n	8004838 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004824:	f023 010f 	bic.w	r1, r3, #15
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	1e5a      	subs	r2, r3, #1
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	430a      	orrs	r2, r1
 8004834:	631a      	str	r2, [r3, #48]	; 0x30
 8004836:	e007      	b.n	8004848 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f022 020f 	bic.w	r2, r2, #15
 8004846:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800484c:	f023 0303 	bic.w	r3, r3, #3
 8004850:	f043 0201 	orr.w	r2, r3, #1
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	655a      	str	r2, [r3, #84]	; 0x54
 8004858:	e007      	b.n	800486a <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485e:	f043 0210 	orr.w	r2, r3, #16
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800486a:	7ffb      	ldrb	r3, [r7, #31]
}
 800486c:	4618      	mov	r0, r3
 800486e:	3724      	adds	r7, #36	; 0x24
 8004870:	46bd      	mov	sp, r7
 8004872:	bd90      	pop	{r4, r7, pc}
 8004874:	20000044 	.word	0x20000044
 8004878:	053e2d63 	.word	0x053e2d63
 800487c:	40022000 	.word	0x40022000
 8004880:	40022100 	.word	0x40022100
 8004884:	40022300 	.word	0x40022300
 8004888:	fff0c003 	.word	0xfff0c003
 800488c:	ffffbffc 	.word	0xffffbffc
 8004890:	fc00f81e 	.word	0xfc00f81e

08004894 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800489c:	4856      	ldr	r0, [pc, #344]	; (80049f8 <HAL_ADC_Start+0x164>)
 800489e:	f7ff fd83 	bl	80043a8 <LL_ADC_GetMultimode>
 80048a2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7ff fe5d 	bl	8004568 <LL_ADC_REG_IsConversionOngoing>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f040 809a 	bne.w	80049ea <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d101      	bne.n	80048c4 <HAL_ADC_Start+0x30>
 80048c0:	2302      	movs	r3, #2
 80048c2:	e095      	b.n	80049f0 <HAL_ADC_Start+0x15c>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f001 f8bb 	bl	8005a48 <ADC_Enable>
 80048d2:	4603      	mov	r3, r0
 80048d4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80048d6:	7dfb      	ldrb	r3, [r7, #23]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f040 8081 	bne.w	80049e0 <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048e2:	4b46      	ldr	r3, [pc, #280]	; (80049fc <HAL_ADC_Start+0x168>)
 80048e4:	4013      	ands	r3, r2
 80048e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a43      	ldr	r2, [pc, #268]	; (8004a00 <HAL_ADC_Start+0x16c>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d002      	beq.n	80048fe <HAL_ADC_Start+0x6a>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	e000      	b.n	8004900 <HAL_ADC_Start+0x6c>
 80048fe:	4b41      	ldr	r3, [pc, #260]	; (8004a04 <HAL_ADC_Start+0x170>)
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	6812      	ldr	r2, [r2, #0]
 8004904:	4293      	cmp	r3, r2
 8004906:	d002      	beq.n	800490e <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d105      	bne.n	800491a <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004912:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800491e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004926:	d106      	bne.n	8004936 <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800492c:	f023 0206 	bic.w	r2, r3, #6
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	659a      	str	r2, [r3, #88]	; 0x58
 8004934:	e002      	b.n	800493c <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	221c      	movs	r2, #28
 8004942:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a2b      	ldr	r2, [pc, #172]	; (8004a00 <HAL_ADC_Start+0x16c>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d002      	beq.n	800495c <HAL_ADC_Start+0xc8>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	e000      	b.n	800495e <HAL_ADC_Start+0xca>
 800495c:	4b29      	ldr	r3, [pc, #164]	; (8004a04 <HAL_ADC_Start+0x170>)
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	6812      	ldr	r2, [r2, #0]
 8004962:	4293      	cmp	r3, r2
 8004964:	d008      	beq.n	8004978 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d005      	beq.n	8004978 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	2b05      	cmp	r3, #5
 8004970:	d002      	beq.n	8004978 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	2b09      	cmp	r3, #9
 8004976:	d114      	bne.n	80049a2 <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d007      	beq.n	8004996 <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800498a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800498e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4618      	mov	r0, r3
 800499c:	f7ff fdbc 	bl	8004518 <LL_ADC_REG_StartConversion>
 80049a0:	e025      	b.n	80049ee <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a13      	ldr	r2, [pc, #76]	; (8004a00 <HAL_ADC_Start+0x16c>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d002      	beq.n	80049be <HAL_ADC_Start+0x12a>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	e000      	b.n	80049c0 <HAL_ADC_Start+0x12c>
 80049be:	4b11      	ldr	r3, [pc, #68]	; (8004a04 <HAL_ADC_Start+0x170>)
 80049c0:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00f      	beq.n	80049ee <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80049d6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	655a      	str	r2, [r3, #84]	; 0x54
 80049de:	e006      	b.n	80049ee <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80049e8:	e001      	b.n	80049ee <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80049ea:	2302      	movs	r3, #2
 80049ec:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80049ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3718      	adds	r7, #24
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	40022300 	.word	0x40022300
 80049fc:	fffff0fe 	.word	0xfffff0fe
 8004a00:	40022100 	.word	0x40022100
 8004a04:	40022000 	.word	0x40022000

08004a08 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b088      	sub	sp, #32
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a12:	4866      	ldr	r0, [pc, #408]	; (8004bac <HAL_ADC_PollForConversion+0x1a4>)
 8004a14:	f7ff fcc8 	bl	80043a8 <LL_ADC_GetMultimode>
 8004a18:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	2b08      	cmp	r3, #8
 8004a20:	d102      	bne.n	8004a28 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8004a22:	2308      	movs	r3, #8
 8004a24:	61fb      	str	r3, [r7, #28]
 8004a26:	e02a      	b.n	8004a7e <HAL_ADC_PollForConversion+0x76>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d005      	beq.n	8004a3a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	2b05      	cmp	r3, #5
 8004a32:	d002      	beq.n	8004a3a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	2b09      	cmp	r3, #9
 8004a38:	d111      	bne.n	8004a5e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f003 0301 	and.w	r3, r3, #1
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d007      	beq.n	8004a58 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a4c:	f043 0220 	orr.w	r2, r3, #32
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e0a4      	b.n	8004ba2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004a58:	2304      	movs	r3, #4
 8004a5a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8004a5c:	e00f      	b.n	8004a7e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004a5e:	4853      	ldr	r0, [pc, #332]	; (8004bac <HAL_ADC_PollForConversion+0x1a4>)
 8004a60:	f7ff fcb0 	bl	80043c4 <LL_ADC_GetMultiDMATransfer>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d007      	beq.n	8004a7a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a6e:	f043 0220 	orr.w	r2, r3, #32
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e093      	b.n	8004ba2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004a7a:	2304      	movs	r3, #4
 8004a7c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004a7e:	f7ff fb39 	bl	80040f4 <HAL_GetTick>
 8004a82:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004a84:	e021      	b.n	8004aca <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a8c:	d01d      	beq.n	8004aca <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004a8e:	f7ff fb31 	bl	80040f4 <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d302      	bcc.n	8004aa4 <HAL_ADC_PollForConversion+0x9c>
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d112      	bne.n	8004aca <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	4013      	ands	r3, r2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d10b      	bne.n	8004aca <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab6:	f043 0204 	orr.w	r2, r3, #4
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e06b      	b.n	8004ba2 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d0d6      	beq.n	8004a86 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004adc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7ff fbbb 	bl	8004264 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d01c      	beq.n	8004b2e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	7d5b      	ldrb	r3, [r3, #21]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d118      	bne.n	8004b2e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0308 	and.w	r3, r3, #8
 8004b06:	2b08      	cmp	r3, #8
 8004b08:	d111      	bne.n	8004b2e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d105      	bne.n	8004b2e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b26:	f043 0201 	orr.w	r2, r3, #1
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a1f      	ldr	r2, [pc, #124]	; (8004bb0 <HAL_ADC_PollForConversion+0x1a8>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d002      	beq.n	8004b3e <HAL_ADC_PollForConversion+0x136>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	e000      	b.n	8004b40 <HAL_ADC_PollForConversion+0x138>
 8004b3e:	4b1d      	ldr	r3, [pc, #116]	; (8004bb4 <HAL_ADC_PollForConversion+0x1ac>)
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	6812      	ldr	r2, [r2, #0]
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d008      	beq.n	8004b5a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d005      	beq.n	8004b5a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	2b05      	cmp	r3, #5
 8004b52:	d002      	beq.n	8004b5a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	2b09      	cmp	r3, #9
 8004b58:	d104      	bne.n	8004b64 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	61bb      	str	r3, [r7, #24]
 8004b62:	e00c      	b.n	8004b7e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a11      	ldr	r2, [pc, #68]	; (8004bb0 <HAL_ADC_PollForConversion+0x1a8>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d002      	beq.n	8004b74 <HAL_ADC_PollForConversion+0x16c>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	e000      	b.n	8004b76 <HAL_ADC_PollForConversion+0x16e>
 8004b74:	4b0f      	ldr	r3, [pc, #60]	; (8004bb4 <HAL_ADC_PollForConversion+0x1ac>)
 8004b76:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	2b08      	cmp	r3, #8
 8004b82:	d104      	bne.n	8004b8e <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2208      	movs	r2, #8
 8004b8a:	601a      	str	r2, [r3, #0]
 8004b8c:	e008      	b.n	8004ba0 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d103      	bne.n	8004ba0 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	220c      	movs	r2, #12
 8004b9e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3720      	adds	r7, #32
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	40022300 	.word	0x40022300
 8004bb0:	40022100 	.word	0x40022100
 8004bb4:	40022000 	.word	0x40022000

08004bb8 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004bc0:	4890      	ldr	r0, [pc, #576]	; (8004e04 <HAL_ADC_Start_IT+0x24c>)
 8004bc2:	f7ff fbf1 	bl	80043a8 <LL_ADC_GetMultimode>
 8004bc6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7ff fccb 	bl	8004568 <LL_ADC_REG_IsConversionOngoing>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f040 810e 	bne.w	8004df6 <HAL_ADC_Start_IT+0x23e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d101      	bne.n	8004be8 <HAL_ADC_Start_IT+0x30>
 8004be4:	2302      	movs	r3, #2
 8004be6:	e109      	b.n	8004dfc <HAL_ADC_Start_IT+0x244>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 ff29 	bl	8005a48 <ADC_Enable>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004bfa:	7dfb      	ldrb	r3, [r7, #23]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f040 80f5 	bne.w	8004dec <HAL_ADC_Start_IT+0x234>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c06:	4b80      	ldr	r3, [pc, #512]	; (8004e08 <HAL_ADC_Start_IT+0x250>)
 8004c08:	4013      	ands	r3, r2
 8004c0a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a7d      	ldr	r2, [pc, #500]	; (8004e0c <HAL_ADC_Start_IT+0x254>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d002      	beq.n	8004c22 <HAL_ADC_Start_IT+0x6a>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	e000      	b.n	8004c24 <HAL_ADC_Start_IT+0x6c>
 8004c22:	4b7b      	ldr	r3, [pc, #492]	; (8004e10 <HAL_ADC_Start_IT+0x258>)
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	6812      	ldr	r2, [r2, #0]
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d002      	beq.n	8004c32 <HAL_ADC_Start_IT+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d105      	bne.n	8004c3e <HAL_ADC_Start_IT+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c36:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d006      	beq.n	8004c58 <HAL_ADC_Start_IT+0xa0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c4e:	f023 0206 	bic.w	r2, r3, #6
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	659a      	str	r2, [r3, #88]	; 0x58
 8004c56:	e002      	b.n	8004c5e <HAL_ADC_Start_IT+0xa6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	221c      	movs	r2, #28
 8004c64:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	685a      	ldr	r2, [r3, #4]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f022 021c 	bic.w	r2, r2, #28
 8004c7c:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	2b08      	cmp	r3, #8
 8004c84:	d108      	bne.n	8004c98 <HAL_ADC_Start_IT+0xe0>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685a      	ldr	r2, [r3, #4]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f042 0208 	orr.w	r2, r2, #8
 8004c94:	605a      	str	r2, [r3, #4]
          break;
 8004c96:	e008      	b.n	8004caa <HAL_ADC_Start_IT+0xf2>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f042 0204 	orr.w	r2, r2, #4
 8004ca6:	605a      	str	r2, [r3, #4]
          break;
 8004ca8:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d107      	bne.n	8004cc2 <HAL_ADC_Start_IT+0x10a>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	685a      	ldr	r2, [r3, #4]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f042 0210 	orr.w	r2, r2, #16
 8004cc0:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a51      	ldr	r2, [pc, #324]	; (8004e0c <HAL_ADC_Start_IT+0x254>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d002      	beq.n	8004cd2 <HAL_ADC_Start_IT+0x11a>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	e000      	b.n	8004cd4 <HAL_ADC_Start_IT+0x11c>
 8004cd2:	4b4f      	ldr	r3, [pc, #316]	; (8004e10 <HAL_ADC_Start_IT+0x258>)
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	6812      	ldr	r2, [r2, #0]
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d008      	beq.n	8004cee <HAL_ADC_Start_IT+0x136>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d005      	beq.n	8004cee <HAL_ADC_Start_IT+0x136>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	2b05      	cmp	r3, #5
 8004ce6:	d002      	beq.n	8004cee <HAL_ADC_Start_IT+0x136>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	2b09      	cmp	r3, #9
 8004cec:	d13a      	bne.n	8004d64 <HAL_ADC_Start_IT+0x1ac>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d02d      	beq.n	8004d58 <HAL_ADC_Start_IT+0x1a0>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d00:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004d04:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	2b08      	cmp	r3, #8
 8004d12:	d110      	bne.n	8004d36 <HAL_ADC_Start_IT+0x17e>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	685a      	ldr	r2, [r3, #4]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f022 0220 	bic.w	r2, r2, #32
 8004d22:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	685a      	ldr	r2, [r3, #4]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d32:	605a      	str	r2, [r3, #4]
              break;
 8004d34:	e010      	b.n	8004d58 <HAL_ADC_Start_IT+0x1a0>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	685a      	ldr	r2, [r3, #4]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d44:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	685a      	ldr	r2, [r3, #4]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f042 0220 	orr.w	r2, r2, #32
 8004d54:	605a      	str	r2, [r3, #4]
              break;
 8004d56:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7ff fbdb 	bl	8004518 <LL_ADC_REG_StartConversion>
 8004d62:	e04a      	b.n	8004dfa <HAL_ADC_Start_IT+0x242>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d68:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a25      	ldr	r2, [pc, #148]	; (8004e0c <HAL_ADC_Start_IT+0x254>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d002      	beq.n	8004d80 <HAL_ADC_Start_IT+0x1c8>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	e000      	b.n	8004d82 <HAL_ADC_Start_IT+0x1ca>
 8004d80:	4b23      	ldr	r3, [pc, #140]	; (8004e10 <HAL_ADC_Start_IT+0x258>)
 8004d82:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d034      	beq.n	8004dfa <HAL_ADC_Start_IT+0x242>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d94:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004d98:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	2b08      	cmp	r3, #8
 8004da6:	d110      	bne.n	8004dca <HAL_ADC_Start_IT+0x212>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 0220 	bic.w	r2, r2, #32
 8004db6:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dc6:	605a      	str	r2, [r3, #4]
              break;
 8004dc8:	e017      	b.n	8004dfa <HAL_ADC_Start_IT+0x242>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	685a      	ldr	r2, [r3, #4]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dd8:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	685a      	ldr	r2, [r3, #4]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f042 0220 	orr.w	r2, r2, #32
 8004de8:	605a      	str	r2, [r3, #4]
              break;
 8004dea:	e006      	b.n	8004dfa <HAL_ADC_Start_IT+0x242>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004df4:	e001      	b.n	8004dfa <HAL_ADC_Start_IT+0x242>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004df6:	2302      	movs	r3, #2
 8004df8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004dfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3718      	adds	r7, #24
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	40022300 	.word	0x40022300
 8004e08:	fffff0fe 	.word	0xfffff0fe
 8004e0c:	40022100 	.word	0x40022100
 8004e10:	40022000 	.word	0x40022000

08004e14 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d101      	bne.n	8004e2a <HAL_ADC_Stop_IT+0x16>
 8004e26:	2302      	movs	r3, #2
 8004e28:	e029      	b.n	8004e7e <HAL_ADC_Stop_IT+0x6a>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004e32:	2103      	movs	r1, #3
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 fd4b 	bl	80058d0 <ADC_ConversionStop>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004e3e:	7bfb      	ldrb	r3, [r7, #15]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d117      	bne.n	8004e74 <HAL_ADC_Stop_IT+0x60>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	685a      	ldr	r2, [r3, #4]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f022 021c 	bic.w	r2, r2, #28
 8004e52:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 fe73 	bl	8005b40 <ADC_Disable>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004e5e:	7bfb      	ldrb	r3, [r7, #15]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d107      	bne.n	8004e74 <HAL_ADC_Stop_IT+0x60>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e68:	4b07      	ldr	r3, [pc, #28]	; (8004e88 <HAL_ADC_Stop_IT+0x74>)
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	f043 0201 	orr.w	r2, r3, #1
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	ffffeefe 	.word	0xffffeefe

08004e8c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
	...

08004ea8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b08a      	sub	sp, #40	; 0x28
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ec4:	4882      	ldr	r0, [pc, #520]	; (80050d0 <HAL_ADC_IRQHandler+0x228>)
 8004ec6:	f7ff fa6f 	bl	80043a8 <LL_ADC_GetMultimode>
 8004eca:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d017      	beq.n	8004f06 <HAL_ADC_IRQHandler+0x5e>
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	f003 0302 	and.w	r3, r3, #2
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d012      	beq.n	8004f06 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee4:	f003 0310 	and.w	r3, r3, #16
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d105      	bne.n	8004ef8 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef0:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 ff9d 	bl	8005e38 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2202      	movs	r2, #2
 8004f04:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	f003 0304 	and.w	r3, r3, #4
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d004      	beq.n	8004f1a <HAL_ADC_IRQHandler+0x72>
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	f003 0304 	and.w	r3, r3, #4
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10a      	bne.n	8004f30 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f000 8083 	beq.w	800502c <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	f003 0308 	and.w	r3, r3, #8
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d07d      	beq.n	800502c <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f34:	f003 0310 	and.w	r3, r3, #16
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d105      	bne.n	8004f48 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f40:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f7ff f989 	bl	8004264 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d062      	beq.n	800501e <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a5d      	ldr	r2, [pc, #372]	; (80050d4 <HAL_ADC_IRQHandler+0x22c>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d002      	beq.n	8004f68 <HAL_ADC_IRQHandler+0xc0>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	e000      	b.n	8004f6a <HAL_ADC_IRQHandler+0xc2>
 8004f68:	4b5b      	ldr	r3, [pc, #364]	; (80050d8 <HAL_ADC_IRQHandler+0x230>)
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	6812      	ldr	r2, [r2, #0]
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d008      	beq.n	8004f84 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d005      	beq.n	8004f84 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	2b05      	cmp	r3, #5
 8004f7c:	d002      	beq.n	8004f84 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	2b09      	cmp	r3, #9
 8004f82:	d104      	bne.n	8004f8e <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	623b      	str	r3, [r7, #32]
 8004f8c:	e00c      	b.n	8004fa8 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a50      	ldr	r2, [pc, #320]	; (80050d4 <HAL_ADC_IRQHandler+0x22c>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d002      	beq.n	8004f9e <HAL_ADC_IRQHandler+0xf6>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	e000      	b.n	8004fa0 <HAL_ADC_IRQHandler+0xf8>
 8004f9e:	4b4e      	ldr	r3, [pc, #312]	; (80050d8 <HAL_ADC_IRQHandler+0x230>)
 8004fa0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d135      	bne.n	800501e <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0308 	and.w	r3, r3, #8
 8004fbc:	2b08      	cmp	r3, #8
 8004fbe:	d12e      	bne.n	800501e <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7ff facf 	bl	8004568 <LL_ADC_REG_IsConversionOngoing>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d11a      	bne.n	8005006 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	685a      	ldr	r2, [r3, #4]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f022 020c 	bic.w	r2, r2, #12
 8004fde:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ff0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d112      	bne.n	800501e <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ffc:	f043 0201 	orr.w	r2, r3, #1
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	655a      	str	r2, [r3, #84]	; 0x54
 8005004:	e00b      	b.n	800501e <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800500a:	f043 0210 	orr.w	r2, r3, #16
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005016:	f043 0201 	orr.w	r2, r3, #1
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f7fc fc02 	bl	8001828 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	220c      	movs	r2, #12
 800502a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	f003 0320 	and.w	r3, r3, #32
 8005032:	2b00      	cmp	r3, #0
 8005034:	d004      	beq.n	8005040 <HAL_ADC_IRQHandler+0x198>
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	f003 0320 	and.w	r3, r3, #32
 800503c:	2b00      	cmp	r3, #0
 800503e:	d10b      	bne.n	8005058 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005046:	2b00      	cmp	r3, #0
 8005048:	f000 809f 	beq.w	800518a <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005052:	2b00      	cmp	r3, #0
 8005054:	f000 8099 	beq.w	800518a <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800505c:	f003 0310 	and.w	r3, r3, #16
 8005060:	2b00      	cmp	r3, #0
 8005062:	d105      	bne.n	8005070 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005068:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4618      	mov	r0, r3
 8005076:	f7ff f934 	bl	80042e2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800507a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4618      	mov	r0, r3
 8005082:	f7ff f8ef 	bl	8004264 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005086:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a11      	ldr	r2, [pc, #68]	; (80050d4 <HAL_ADC_IRQHandler+0x22c>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d002      	beq.n	8005098 <HAL_ADC_IRQHandler+0x1f0>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	e000      	b.n	800509a <HAL_ADC_IRQHandler+0x1f2>
 8005098:	4b0f      	ldr	r3, [pc, #60]	; (80050d8 <HAL_ADC_IRQHandler+0x230>)
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	6812      	ldr	r2, [r2, #0]
 800509e:	4293      	cmp	r3, r2
 80050a0:	d008      	beq.n	80050b4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d005      	beq.n	80050b4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	2b06      	cmp	r3, #6
 80050ac:	d002      	beq.n	80050b4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	2b07      	cmp	r3, #7
 80050b2:	d104      	bne.n	80050be <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	623b      	str	r3, [r7, #32]
 80050bc:	e013      	b.n	80050e6 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a04      	ldr	r2, [pc, #16]	; (80050d4 <HAL_ADC_IRQHandler+0x22c>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d009      	beq.n	80050dc <HAL_ADC_IRQHandler+0x234>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	e007      	b.n	80050de <HAL_ADC_IRQHandler+0x236>
 80050ce:	bf00      	nop
 80050d0:	40022300 	.word	0x40022300
 80050d4:	40022100 	.word	0x40022100
 80050d8:	40022000 	.word	0x40022000
 80050dc:	4b7d      	ldr	r3, [pc, #500]	; (80052d4 <HAL_ADC_IRQHandler+0x42c>)
 80050de:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d047      	beq.n	800517c <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80050ec:	6a3b      	ldr	r3, [r7, #32]
 80050ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d007      	beq.n	8005106 <HAL_ADC_IRQHandler+0x25e>
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d03f      	beq.n	800517c <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80050fc:	6a3b      	ldr	r3, [r7, #32]
 80050fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005102:	2b00      	cmp	r3, #0
 8005104:	d13a      	bne.n	800517c <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005110:	2b40      	cmp	r3, #64	; 0x40
 8005112:	d133      	bne.n	800517c <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005114:	6a3b      	ldr	r3, [r7, #32]
 8005116:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d12e      	bne.n	800517c <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4618      	mov	r0, r3
 8005124:	f7ff fa48 	bl	80045b8 <LL_ADC_INJ_IsConversionOngoing>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d11a      	bne.n	8005164 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800513c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005142:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800514e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005152:	2b00      	cmp	r3, #0
 8005154:	d112      	bne.n	800517c <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800515a:	f043 0201 	orr.w	r2, r3, #1
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	655a      	str	r2, [r3, #84]	; 0x54
 8005162:	e00b      	b.n	800517c <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005168:	f043 0210 	orr.w	r2, r3, #16
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005174:	f043 0201 	orr.w	r2, r3, #1
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 fe33 	bl	8005de8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2260      	movs	r2, #96	; 0x60
 8005188:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005190:	2b00      	cmp	r3, #0
 8005192:	d011      	beq.n	80051b8 <HAL_ADC_IRQHandler+0x310>
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00c      	beq.n	80051b8 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f896 	bl	80052dc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2280      	movs	r2, #128	; 0x80
 80051b6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d012      	beq.n	80051e8 <HAL_ADC_IRQHandler+0x340>
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00d      	beq.n	80051e8 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 fe19 	bl	8005e10 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80051e6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d012      	beq.n	8005218 <HAL_ADC_IRQHandler+0x370>
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00d      	beq.n	8005218 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005200:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 fe0b 	bl	8005e24 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005216:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	f003 0310 	and.w	r3, r3, #16
 800521e:	2b00      	cmp	r3, #0
 8005220:	d036      	beq.n	8005290 <HAL_ADC_IRQHandler+0x3e8>
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	f003 0310 	and.w	r3, r3, #16
 8005228:	2b00      	cmp	r3, #0
 800522a:	d031      	beq.n	8005290 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005230:	2b00      	cmp	r3, #0
 8005232:	d102      	bne.n	800523a <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8005234:	2301      	movs	r3, #1
 8005236:	627b      	str	r3, [r7, #36]	; 0x24
 8005238:	e014      	b.n	8005264 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d008      	beq.n	8005252 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005240:	4825      	ldr	r0, [pc, #148]	; (80052d8 <HAL_ADC_IRQHandler+0x430>)
 8005242:	f7ff f8bf 	bl	80043c4 <LL_ADC_GetMultiDMATransfer>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00b      	beq.n	8005264 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800524c:	2301      	movs	r3, #1
 800524e:	627b      	str	r3, [r7, #36]	; 0x24
 8005250:	e008      	b.n	8005264 <HAL_ADC_IRQHandler+0x3bc>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	f003 0303 	and.w	r3, r3, #3
 800525c:	2b00      	cmp	r3, #0
 800525e:	d001      	beq.n	8005264 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8005260:	2301      	movs	r3, #1
 8005262:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8005264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005266:	2b01      	cmp	r3, #1
 8005268:	d10e      	bne.n	8005288 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800526e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800527a:	f043 0202 	orr.w	r2, r3, #2
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 f834 	bl	80052f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2210      	movs	r2, #16
 800528e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005296:	2b00      	cmp	r3, #0
 8005298:	d018      	beq.n	80052cc <HAL_ADC_IRQHandler+0x424>
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d013      	beq.n	80052cc <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b4:	f043 0208 	orr.w	r2, r3, #8
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80052c4:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 fd98 	bl	8005dfc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80052cc:	bf00      	nop
 80052ce:	3728      	adds	r7, #40	; 0x28
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	40022000 	.word	0x40022000
 80052d8:	40022300 	.word	0x40022300

080052dc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80052e4:	bf00      	nop
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005304:	b590      	push	{r4, r7, lr}
 8005306:	b0a1      	sub	sp, #132	; 0x84
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800530e:	2300      	movs	r3, #0
 8005310:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005314:	2300      	movs	r3, #0
 8005316:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	4a9a      	ldr	r2, [pc, #616]	; (8005588 <HAL_ADC_ConfigChannel+0x284>)
 800531e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005326:	2b01      	cmp	r3, #1
 8005328:	d101      	bne.n	800532e <HAL_ADC_ConfigChannel+0x2a>
 800532a:	2302      	movs	r3, #2
 800532c:	e2bc      	b.n	80058a8 <HAL_ADC_ConfigChannel+0x5a4>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2201      	movs	r2, #1
 8005332:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4618      	mov	r0, r3
 800533c:	f7ff f914 	bl	8004568 <LL_ADC_REG_IsConversionOngoing>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	f040 82a1 	bne.w	800588a <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005350:	2b00      	cmp	r3, #0
 8005352:	d108      	bne.n	8005366 <HAL_ADC_ConfigChannel+0x62>
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	0e9b      	lsrs	r3, r3, #26
 800535a:	f003 031f 	and.w	r3, r3, #31
 800535e:	2201      	movs	r2, #1
 8005360:	fa02 f303 	lsl.w	r3, r2, r3
 8005364:	e016      	b.n	8005394 <HAL_ADC_ConfigChannel+0x90>
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800536c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800536e:	fa93 f3a3 	rbit	r3, r3
 8005372:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005374:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005376:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005378:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800537a:	2b00      	cmp	r3, #0
 800537c:	d101      	bne.n	8005382 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800537e:	2320      	movs	r3, #32
 8005380:	e003      	b.n	800538a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8005382:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005384:	fab3 f383 	clz	r3, r3
 8005388:	b2db      	uxtb	r3, r3
 800538a:	f003 031f 	and.w	r3, r3, #31
 800538e:	2201      	movs	r2, #1
 8005390:	fa02 f303 	lsl.w	r3, r2, r3
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	6812      	ldr	r2, [r2, #0]
 8005398:	69d1      	ldr	r1, [r2, #28]
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	6812      	ldr	r2, [r2, #0]
 800539e:	430b      	orrs	r3, r1
 80053a0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6818      	ldr	r0, [r3, #0]
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	6859      	ldr	r1, [r3, #4]
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	461a      	mov	r2, r3
 80053b0:	f7fe ff6b 	bl	800428a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7ff f8d5 	bl	8004568 <LL_ADC_REG_IsConversionOngoing>
 80053be:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4618      	mov	r0, r3
 80053c6:	f7ff f8f7 	bl	80045b8 <LL_ADC_INJ_IsConversionOngoing>
 80053ca:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80053cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	f040 80a0 	bne.w	8005514 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80053d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	f040 809c 	bne.w	8005514 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6818      	ldr	r0, [r3, #0]
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	6819      	ldr	r1, [r3, #0]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	461a      	mov	r2, r3
 80053ea:	f7fe ff8d 	bl	8004308 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	f003 0310 	and.w	r3, r3, #16
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d10b      	bne.n	8005414 <HAL_ADC_ConfigChannel+0x110>
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	695a      	ldr	r2, [r3, #20]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	089b      	lsrs	r3, r3, #2
 8005408:	f003 0307 	and.w	r3, r3, #7
 800540c:	005b      	lsls	r3, r3, #1
 800540e:	fa02 f303 	lsl.w	r3, r2, r3
 8005412:	e00a      	b.n	800542a <HAL_ADC_ConfigChannel+0x126>
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	695a      	ldr	r2, [r3, #20]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	089b      	lsrs	r3, r3, #2
 8005420:	f003 0304 	and.w	r3, r3, #4
 8005424:	005b      	lsls	r3, r3, #1
 8005426:	fa02 f303 	lsl.w	r3, r2, r3
 800542a:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	2b04      	cmp	r3, #4
 8005432:	d027      	beq.n	8005484 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6818      	ldr	r0, [r3, #0]
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	6919      	ldr	r1, [r3, #16]
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005442:	f7fe febb 	bl	80041bc <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6818      	ldr	r0, [r3, #0]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	6919      	ldr	r1, [r3, #16]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	7e5b      	ldrb	r3, [r3, #25]
 8005452:	2b01      	cmp	r3, #1
 8005454:	d102      	bne.n	800545c <HAL_ADC_ConfigChannel+0x158>
 8005456:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800545a:	e000      	b.n	800545e <HAL_ADC_ConfigChannel+0x15a>
 800545c:	2300      	movs	r3, #0
 800545e:	461a      	mov	r2, r3
 8005460:	f7fe fee5 	bl	800422e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6818      	ldr	r0, [r3, #0]
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	6919      	ldr	r1, [r3, #16]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	7e1b      	ldrb	r3, [r3, #24]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d102      	bne.n	800547a <HAL_ADC_ConfigChannel+0x176>
 8005474:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005478:	e000      	b.n	800547c <HAL_ADC_ConfigChannel+0x178>
 800547a:	2300      	movs	r3, #0
 800547c:	461a      	mov	r2, r3
 800547e:	f7fe febd 	bl	80041fc <LL_ADC_SetDataRightShift>
 8005482:	e047      	b.n	8005514 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800548a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	069b      	lsls	r3, r3, #26
 8005494:	429a      	cmp	r2, r3
 8005496:	d107      	bne.n	80054a8 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80054a6:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	069b      	lsls	r3, r3, #26
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d107      	bne.n	80054cc <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80054ca:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	069b      	lsls	r3, r3, #26
 80054dc:	429a      	cmp	r2, r3
 80054de:	d107      	bne.n	80054f0 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80054ee:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	069b      	lsls	r3, r3, #26
 8005500:	429a      	cmp	r2, r3
 8005502:	d107      	bne.n	8005514 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005512:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4618      	mov	r0, r3
 800551a:	f7fe ffd7 	bl	80044cc <LL_ADC_IsEnabled>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	f040 81bb 	bne.w	800589c <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6818      	ldr	r0, [r3, #0]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	6819      	ldr	r1, [r3, #0]
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	461a      	mov	r2, r3
 8005534:	f7fe ff14 	bl	8004360 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	4a12      	ldr	r2, [pc, #72]	; (8005588 <HAL_ADC_ConfigChannel+0x284>)
 800553e:	4293      	cmp	r3, r2
 8005540:	f040 8130 	bne.w	80057a4 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10b      	bne.n	800556c <HAL_ADC_ConfigChannel+0x268>
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	0e9b      	lsrs	r3, r3, #26
 800555a:	3301      	adds	r3, #1
 800555c:	f003 031f 	and.w	r3, r3, #31
 8005560:	2b09      	cmp	r3, #9
 8005562:	bf94      	ite	ls
 8005564:	2301      	movls	r3, #1
 8005566:	2300      	movhi	r3, #0
 8005568:	b2db      	uxtb	r3, r3
 800556a:	e01b      	b.n	80055a4 <HAL_ADC_ConfigChannel+0x2a0>
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005572:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005574:	fa93 f3a3 	rbit	r3, r3
 8005578:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800557a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800557c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800557e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005580:	2b00      	cmp	r3, #0
 8005582:	d103      	bne.n	800558c <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8005584:	2320      	movs	r3, #32
 8005586:	e005      	b.n	8005594 <HAL_ADC_ConfigChannel+0x290>
 8005588:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 800558c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800558e:	fab3 f383 	clz	r3, r3
 8005592:	b2db      	uxtb	r3, r3
 8005594:	3301      	adds	r3, #1
 8005596:	f003 031f 	and.w	r3, r3, #31
 800559a:	2b09      	cmp	r3, #9
 800559c:	bf94      	ite	ls
 800559e:	2301      	movls	r3, #1
 80055a0:	2300      	movhi	r3, #0
 80055a2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d079      	beq.n	800569c <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d107      	bne.n	80055c4 <HAL_ADC_ConfigChannel+0x2c0>
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	0e9b      	lsrs	r3, r3, #26
 80055ba:	3301      	adds	r3, #1
 80055bc:	069b      	lsls	r3, r3, #26
 80055be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80055c2:	e015      	b.n	80055f0 <HAL_ADC_ConfigChannel+0x2ec>
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055cc:	fa93 f3a3 	rbit	r3, r3
 80055d0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80055d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055d4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80055d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d101      	bne.n	80055e0 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 80055dc:	2320      	movs	r3, #32
 80055de:	e003      	b.n	80055e8 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 80055e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055e2:	fab3 f383 	clz	r3, r3
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	3301      	adds	r3, #1
 80055ea:	069b      	lsls	r3, r3, #26
 80055ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d109      	bne.n	8005610 <HAL_ADC_ConfigChannel+0x30c>
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	0e9b      	lsrs	r3, r3, #26
 8005602:	3301      	adds	r3, #1
 8005604:	f003 031f 	and.w	r3, r3, #31
 8005608:	2101      	movs	r1, #1
 800560a:	fa01 f303 	lsl.w	r3, r1, r3
 800560e:	e017      	b.n	8005640 <HAL_ADC_ConfigChannel+0x33c>
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005618:	fa93 f3a3 	rbit	r3, r3
 800561c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800561e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005620:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8005622:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005624:	2b00      	cmp	r3, #0
 8005626:	d101      	bne.n	800562c <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8005628:	2320      	movs	r3, #32
 800562a:	e003      	b.n	8005634 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 800562c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800562e:	fab3 f383 	clz	r3, r3
 8005632:	b2db      	uxtb	r3, r3
 8005634:	3301      	adds	r3, #1
 8005636:	f003 031f 	and.w	r3, r3, #31
 800563a:	2101      	movs	r1, #1
 800563c:	fa01 f303 	lsl.w	r3, r1, r3
 8005640:	ea42 0103 	orr.w	r1, r2, r3
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800564c:	2b00      	cmp	r3, #0
 800564e:	d10a      	bne.n	8005666 <HAL_ADC_ConfigChannel+0x362>
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	0e9b      	lsrs	r3, r3, #26
 8005656:	3301      	adds	r3, #1
 8005658:	f003 021f 	and.w	r2, r3, #31
 800565c:	4613      	mov	r3, r2
 800565e:	005b      	lsls	r3, r3, #1
 8005660:	4413      	add	r3, r2
 8005662:	051b      	lsls	r3, r3, #20
 8005664:	e018      	b.n	8005698 <HAL_ADC_ConfigChannel+0x394>
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800566c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800566e:	fa93 f3a3 	rbit	r3, r3
 8005672:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8005674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005676:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8005678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 800567e:	2320      	movs	r3, #32
 8005680:	e003      	b.n	800568a <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 8005682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005684:	fab3 f383 	clz	r3, r3
 8005688:	b2db      	uxtb	r3, r3
 800568a:	3301      	adds	r3, #1
 800568c:	f003 021f 	and.w	r2, r3, #31
 8005690:	4613      	mov	r3, r2
 8005692:	005b      	lsls	r3, r3, #1
 8005694:	4413      	add	r3, r2
 8005696:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005698:	430b      	orrs	r3, r1
 800569a:	e07e      	b.n	800579a <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d107      	bne.n	80056b8 <HAL_ADC_ConfigChannel+0x3b4>
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	0e9b      	lsrs	r3, r3, #26
 80056ae:	3301      	adds	r3, #1
 80056b0:	069b      	lsls	r3, r3, #26
 80056b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80056b6:	e015      	b.n	80056e4 <HAL_ADC_ConfigChannel+0x3e0>
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c0:	fa93 f3a3 	rbit	r3, r3
 80056c4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80056c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80056ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d101      	bne.n	80056d4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80056d0:	2320      	movs	r3, #32
 80056d2:	e003      	b.n	80056dc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80056d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d6:	fab3 f383 	clz	r3, r3
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	3301      	adds	r3, #1
 80056de:	069b      	lsls	r3, r3, #26
 80056e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d109      	bne.n	8005704 <HAL_ADC_ConfigChannel+0x400>
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	0e9b      	lsrs	r3, r3, #26
 80056f6:	3301      	adds	r3, #1
 80056f8:	f003 031f 	and.w	r3, r3, #31
 80056fc:	2101      	movs	r1, #1
 80056fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005702:	e017      	b.n	8005734 <HAL_ADC_ConfigChannel+0x430>
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	fa93 f3a3 	rbit	r3, r3
 8005710:	61bb      	str	r3, [r7, #24]
  return result;
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005716:	6a3b      	ldr	r3, [r7, #32]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d101      	bne.n	8005720 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 800571c:	2320      	movs	r3, #32
 800571e:	e003      	b.n	8005728 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 8005720:	6a3b      	ldr	r3, [r7, #32]
 8005722:	fab3 f383 	clz	r3, r3
 8005726:	b2db      	uxtb	r3, r3
 8005728:	3301      	adds	r3, #1
 800572a:	f003 031f 	and.w	r3, r3, #31
 800572e:	2101      	movs	r1, #1
 8005730:	fa01 f303 	lsl.w	r3, r1, r3
 8005734:	ea42 0103 	orr.w	r1, r2, r3
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005740:	2b00      	cmp	r3, #0
 8005742:	d10d      	bne.n	8005760 <HAL_ADC_ConfigChannel+0x45c>
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	0e9b      	lsrs	r3, r3, #26
 800574a:	3301      	adds	r3, #1
 800574c:	f003 021f 	and.w	r2, r3, #31
 8005750:	4613      	mov	r3, r2
 8005752:	005b      	lsls	r3, r3, #1
 8005754:	4413      	add	r3, r2
 8005756:	3b1e      	subs	r3, #30
 8005758:	051b      	lsls	r3, r3, #20
 800575a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800575e:	e01b      	b.n	8005798 <HAL_ADC_ConfigChannel+0x494>
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	fa93 f3a3 	rbit	r3, r3
 800576c:	60fb      	str	r3, [r7, #12]
  return result;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d101      	bne.n	800577c <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 8005778:	2320      	movs	r3, #32
 800577a:	e003      	b.n	8005784 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	fab3 f383 	clz	r3, r3
 8005782:	b2db      	uxtb	r3, r3
 8005784:	3301      	adds	r3, #1
 8005786:	f003 021f 	and.w	r2, r3, #31
 800578a:	4613      	mov	r3, r2
 800578c:	005b      	lsls	r3, r3, #1
 800578e:	4413      	add	r3, r2
 8005790:	3b1e      	subs	r3, #30
 8005792:	051b      	lsls	r3, r3, #20
 8005794:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005798:	430b      	orrs	r3, r1
 800579a:	683a      	ldr	r2, [r7, #0]
 800579c:	6892      	ldr	r2, [r2, #8]
 800579e:	4619      	mov	r1, r3
 80057a0:	f7fe fdb2 	bl	8004308 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	da77      	bge.n	800589c <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80057ac:	4840      	ldr	r0, [pc, #256]	; (80058b0 <HAL_ADC_ConfigChannel+0x5ac>)
 80057ae:	f7fe fcf7 	bl	80041a0 <LL_ADC_GetCommonPathInternalCh>
 80057b2:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80057b4:	483f      	ldr	r0, [pc, #252]	; (80058b4 <HAL_ADC_ConfigChannel+0x5b0>)
 80057b6:	f7fe fe89 	bl	80044cc <LL_ADC_IsEnabled>
 80057ba:	4604      	mov	r4, r0
 80057bc:	483e      	ldr	r0, [pc, #248]	; (80058b8 <HAL_ADC_ConfigChannel+0x5b4>)
 80057be:	f7fe fe85 	bl	80044cc <LL_ADC_IsEnabled>
 80057c2:	4603      	mov	r3, r0
 80057c4:	4323      	orrs	r3, r4
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d155      	bne.n	8005876 <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a3b      	ldr	r2, [pc, #236]	; (80058bc <HAL_ADC_ConfigChannel+0x5b8>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d122      	bne.n	800581a <HAL_ADC_ConfigChannel+0x516>
 80057d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d11d      	bne.n	800581a <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a35      	ldr	r2, [pc, #212]	; (80058b8 <HAL_ADC_ConfigChannel+0x5b4>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d159      	bne.n	800589c <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80057e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80057ee:	4619      	mov	r1, r3
 80057f0:	482f      	ldr	r0, [pc, #188]	; (80058b0 <HAL_ADC_ConfigChannel+0x5ac>)
 80057f2:	f7fe fcc2 	bl	800417a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80057f6:	4b32      	ldr	r3, [pc, #200]	; (80058c0 <HAL_ADC_ConfigChannel+0x5bc>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	099b      	lsrs	r3, r3, #6
 80057fc:	4a31      	ldr	r2, [pc, #196]	; (80058c4 <HAL_ADC_ConfigChannel+0x5c0>)
 80057fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005802:	099b      	lsrs	r3, r3, #6
 8005804:	3301      	adds	r3, #1
 8005806:	005b      	lsls	r3, r3, #1
 8005808:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800580a:	e002      	b.n	8005812 <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	3b01      	subs	r3, #1
 8005810:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d1f9      	bne.n	800580c <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005818:	e040      	b.n	800589c <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a2a      	ldr	r2, [pc, #168]	; (80058c8 <HAL_ADC_ConfigChannel+0x5c4>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d111      	bne.n	8005848 <HAL_ADC_ConfigChannel+0x544>
 8005824:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005826:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d10c      	bne.n	8005848 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a21      	ldr	r2, [pc, #132]	; (80058b8 <HAL_ADC_ConfigChannel+0x5b4>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d131      	bne.n	800589c <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005838:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800583a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800583e:	4619      	mov	r1, r3
 8005840:	481b      	ldr	r0, [pc, #108]	; (80058b0 <HAL_ADC_ConfigChannel+0x5ac>)
 8005842:	f7fe fc9a 	bl	800417a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005846:	e029      	b.n	800589c <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a1f      	ldr	r2, [pc, #124]	; (80058cc <HAL_ADC_ConfigChannel+0x5c8>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d124      	bne.n	800589c <HAL_ADC_ConfigChannel+0x598>
 8005852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005854:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d11f      	bne.n	800589c <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a15      	ldr	r2, [pc, #84]	; (80058b8 <HAL_ADC_ConfigChannel+0x5b4>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d11a      	bne.n	800589c <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005868:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800586c:	4619      	mov	r1, r3
 800586e:	4810      	ldr	r0, [pc, #64]	; (80058b0 <HAL_ADC_ConfigChannel+0x5ac>)
 8005870:	f7fe fc83 	bl	800417a <LL_ADC_SetCommonPathInternalCh>
 8005874:	e012      	b.n	800589c <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800587a:	f043 0220 	orr.w	r2, r3, #32
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005888:	e008      	b.n	800589c <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800588e:	f043 0220 	orr.w	r2, r3, #32
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80058a4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3784      	adds	r7, #132	; 0x84
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd90      	pop	{r4, r7, pc}
 80058b0:	40022300 	.word	0x40022300
 80058b4:	40022000 	.word	0x40022000
 80058b8:	40022100 	.word	0x40022100
 80058bc:	cb840000 	.word	0xcb840000
 80058c0:	20000044 	.word	0x20000044
 80058c4:	053e2d63 	.word	0x053e2d63
 80058c8:	bac04000 	.word	0xbac04000
 80058cc:	cfb80000 	.word	0xcfb80000

080058d0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b088      	sub	sp, #32
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80058da:	2300      	movs	r3, #0
 80058dc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f7fe fe3e 	bl	8004568 <LL_ADC_REG_IsConversionOngoing>
 80058ec:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4618      	mov	r0, r3
 80058f4:	f7fe fe60 	bl	80045b8 <LL_ADC_INJ_IsConversionOngoing>
 80058f8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d103      	bne.n	8005908 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2b00      	cmp	r3, #0
 8005904:	f000 8098 	beq.w	8005a38 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d02a      	beq.n	800596c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	7d5b      	ldrb	r3, [r3, #21]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d126      	bne.n	800596c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	7d1b      	ldrb	r3, [r3, #20]
 8005922:	2b01      	cmp	r3, #1
 8005924:	d122      	bne.n	800596c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8005926:	2301      	movs	r3, #1
 8005928:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800592a:	e014      	b.n	8005956 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	4a45      	ldr	r2, [pc, #276]	; (8005a44 <ADC_ConversionStop+0x174>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d90d      	bls.n	8005950 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005938:	f043 0210 	orr.w	r2, r3, #16
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005944:	f043 0201 	orr.w	r2, r3, #1
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e074      	b.n	8005a3a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	3301      	adds	r3, #1
 8005954:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005960:	2b40      	cmp	r3, #64	; 0x40
 8005962:	d1e3      	bne.n	800592c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2240      	movs	r2, #64	; 0x40
 800596a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	2b02      	cmp	r3, #2
 8005970:	d014      	beq.n	800599c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4618      	mov	r0, r3
 8005978:	f7fe fdf6 	bl	8004568 <LL_ADC_REG_IsConversionOngoing>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00c      	beq.n	800599c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4618      	mov	r0, r3
 8005988:	f7fe fdb3 	bl	80044f2 <LL_ADC_IsDisableOngoing>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d104      	bne.n	800599c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4618      	mov	r0, r3
 8005998:	f7fe fdd2 	bl	8004540 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d014      	beq.n	80059cc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4618      	mov	r0, r3
 80059a8:	f7fe fe06 	bl	80045b8 <LL_ADC_INJ_IsConversionOngoing>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00c      	beq.n	80059cc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7fe fd9b 	bl	80044f2 <LL_ADC_IsDisableOngoing>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d104      	bne.n	80059cc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7fe fde2 	bl	8004590 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d005      	beq.n	80059de <ADC_ConversionStop+0x10e>
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	2b03      	cmp	r3, #3
 80059d6:	d105      	bne.n	80059e4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80059d8:	230c      	movs	r3, #12
 80059da:	617b      	str	r3, [r7, #20]
        break;
 80059dc:	e005      	b.n	80059ea <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80059de:	2308      	movs	r3, #8
 80059e0:	617b      	str	r3, [r7, #20]
        break;
 80059e2:	e002      	b.n	80059ea <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80059e4:	2304      	movs	r3, #4
 80059e6:	617b      	str	r3, [r7, #20]
        break;
 80059e8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80059ea:	f7fe fb83 	bl	80040f4 <HAL_GetTick>
 80059ee:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80059f0:	e01b      	b.n	8005a2a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80059f2:	f7fe fb7f 	bl	80040f4 <HAL_GetTick>
 80059f6:	4602      	mov	r2, r0
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	2b05      	cmp	r3, #5
 80059fe:	d914      	bls.n	8005a2a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	689a      	ldr	r2, [r3, #8]
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	4013      	ands	r3, r2
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00d      	beq.n	8005a2a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a12:	f043 0210 	orr.w	r2, r3, #16
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a1e:	f043 0201 	orr.w	r2, r3, #1
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e007      	b.n	8005a3a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	689a      	ldr	r2, [r3, #8]
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	4013      	ands	r3, r2
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d1dc      	bne.n	80059f2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3720      	adds	r7, #32
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	000cdbff 	.word	0x000cdbff

08005a48 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7fe fd39 	bl	80044cc <LL_ADC_IsEnabled>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d161      	bne.n	8005b24 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	689a      	ldr	r2, [r3, #8]
 8005a66:	4b32      	ldr	r3, [pc, #200]	; (8005b30 <ADC_Enable+0xe8>)
 8005a68:	4013      	ands	r3, r2
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00d      	beq.n	8005a8a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a72:	f043 0210 	orr.w	r2, r3, #16
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a7e:	f043 0201 	orr.w	r2, r3, #1
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e04d      	b.n	8005b26 <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7fe fcf4 	bl	800447c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005a94:	f7fe fb2e 	bl	80040f4 <HAL_GetTick>
 8005a98:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005a9a:	4826      	ldr	r0, [pc, #152]	; (8005b34 <ADC_Enable+0xec>)
 8005a9c:	f7fe fc84 	bl	80043a8 <LL_ADC_GetMultimode>
 8005aa0:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a24      	ldr	r2, [pc, #144]	; (8005b38 <ADC_Enable+0xf0>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d002      	beq.n	8005ab2 <ADC_Enable+0x6a>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	e000      	b.n	8005ab4 <ADC_Enable+0x6c>
 8005ab2:	4b22      	ldr	r3, [pc, #136]	; (8005b3c <ADC_Enable+0xf4>)
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	6812      	ldr	r2, [r2, #0]
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d02c      	beq.n	8005b16 <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d130      	bne.n	8005b24 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005ac2:	e028      	b.n	8005b16 <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f7fe fcff 	bl	80044cc <LL_ADC_IsEnabled>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d104      	bne.n	8005ade <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f7fe fccf 	bl	800447c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005ade:	f7fe fb09 	bl	80040f4 <HAL_GetTick>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d914      	bls.n	8005b16 <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0301 	and.w	r3, r3, #1
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d00d      	beq.n	8005b16 <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005afe:	f043 0210 	orr.w	r2, r3, #16
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b0a:	f043 0201 	orr.w	r2, r3, #1
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e007      	b.n	8005b26 <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0301 	and.w	r3, r3, #1
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d1cf      	bne.n	8005ac4 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	8000003f 	.word	0x8000003f
 8005b34:	40022300 	.word	0x40022300
 8005b38:	40022100 	.word	0x40022100
 8005b3c:	40022000 	.word	0x40022000

08005b40 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f7fe fcd0 	bl	80044f2 <LL_ADC_IsDisableOngoing>
 8005b52:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f7fe fcb7 	bl	80044cc <LL_ADC_IsEnabled>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d047      	beq.n	8005bf4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d144      	bne.n	8005bf4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f003 030d 	and.w	r3, r3, #13
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d10c      	bne.n	8005b92 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7fe fc91 	bl	80044a4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2203      	movs	r2, #3
 8005b88:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005b8a:	f7fe fab3 	bl	80040f4 <HAL_GetTick>
 8005b8e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005b90:	e029      	b.n	8005be6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b96:	f043 0210 	orr.w	r2, r3, #16
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ba2:	f043 0201 	orr.w	r2, r3, #1
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e023      	b.n	8005bf6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005bae:	f7fe faa1 	bl	80040f4 <HAL_GetTick>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d914      	bls.n	8005be6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f003 0301 	and.w	r3, r3, #1
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00d      	beq.n	8005be6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bce:	f043 0210 	orr.w	r2, r3, #16
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bda:	f043 0201 	orr.w	r2, r3, #1
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e007      	b.n	8005bf6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	f003 0301 	and.w	r3, r3, #1
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d1dc      	bne.n	8005bae <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
	...

08005c00 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005c08:	4b60      	ldr	r3, [pc, #384]	; (8005d8c <ADC_ConfigureBoostMode+0x18c>)
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d01c      	beq.n	8005c4e <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005c14:	f006 fd84 	bl	800c720 <HAL_RCC_GetHCLKFreq>
 8005c18:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c22:	d010      	beq.n	8005c46 <ADC_ConfigureBoostMode+0x46>
 8005c24:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c28:	d873      	bhi.n	8005d12 <ADC_ConfigureBoostMode+0x112>
 8005c2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c2e:	d002      	beq.n	8005c36 <ADC_ConfigureBoostMode+0x36>
 8005c30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c34:	d16d      	bne.n	8005d12 <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	0c1b      	lsrs	r3, r3, #16
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c42:	60fb      	str	r3, [r7, #12]
        break;
 8005c44:	e068      	b.n	8005d18 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	089b      	lsrs	r3, r3, #2
 8005c4a:	60fb      	str	r3, [r7, #12]
        break;
 8005c4c:	e064      	b.n	8005d18 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005c4e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005c52:	f04f 0100 	mov.w	r1, #0
 8005c56:	f007 ff67 	bl	800db28 <HAL_RCCEx_GetPeriphCLKFreq>
 8005c5a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005c64:	d051      	beq.n	8005d0a <ADC_ConfigureBoostMode+0x10a>
 8005c66:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005c6a:	d854      	bhi.n	8005d16 <ADC_ConfigureBoostMode+0x116>
 8005c6c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005c70:	d047      	beq.n	8005d02 <ADC_ConfigureBoostMode+0x102>
 8005c72:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005c76:	d84e      	bhi.n	8005d16 <ADC_ConfigureBoostMode+0x116>
 8005c78:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005c7c:	d03d      	beq.n	8005cfa <ADC_ConfigureBoostMode+0xfa>
 8005c7e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005c82:	d848      	bhi.n	8005d16 <ADC_ConfigureBoostMode+0x116>
 8005c84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c88:	d033      	beq.n	8005cf2 <ADC_ConfigureBoostMode+0xf2>
 8005c8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c8e:	d842      	bhi.n	8005d16 <ADC_ConfigureBoostMode+0x116>
 8005c90:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005c94:	d029      	beq.n	8005cea <ADC_ConfigureBoostMode+0xea>
 8005c96:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005c9a:	d83c      	bhi.n	8005d16 <ADC_ConfigureBoostMode+0x116>
 8005c9c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005ca0:	d01a      	beq.n	8005cd8 <ADC_ConfigureBoostMode+0xd8>
 8005ca2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005ca6:	d836      	bhi.n	8005d16 <ADC_ConfigureBoostMode+0x116>
 8005ca8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005cac:	d014      	beq.n	8005cd8 <ADC_ConfigureBoostMode+0xd8>
 8005cae:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005cb2:	d830      	bhi.n	8005d16 <ADC_ConfigureBoostMode+0x116>
 8005cb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cb8:	d00e      	beq.n	8005cd8 <ADC_ConfigureBoostMode+0xd8>
 8005cba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cbe:	d82a      	bhi.n	8005d16 <ADC_ConfigureBoostMode+0x116>
 8005cc0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005cc4:	d008      	beq.n	8005cd8 <ADC_ConfigureBoostMode+0xd8>
 8005cc6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005cca:	d824      	bhi.n	8005d16 <ADC_ConfigureBoostMode+0x116>
 8005ccc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005cd0:	d002      	beq.n	8005cd8 <ADC_ConfigureBoostMode+0xd8>
 8005cd2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005cd6:	d11e      	bne.n	8005d16 <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	0c9b      	lsrs	r3, r3, #18
 8005cde:	005b      	lsls	r3, r3, #1
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce6:	60fb      	str	r3, [r7, #12]
        break;
 8005ce8:	e016      	b.n	8005d18 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	091b      	lsrs	r3, r3, #4
 8005cee:	60fb      	str	r3, [r7, #12]
        break;
 8005cf0:	e012      	b.n	8005d18 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	095b      	lsrs	r3, r3, #5
 8005cf6:	60fb      	str	r3, [r7, #12]
        break;
 8005cf8:	e00e      	b.n	8005d18 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	099b      	lsrs	r3, r3, #6
 8005cfe:	60fb      	str	r3, [r7, #12]
        break;
 8005d00:	e00a      	b.n	8005d18 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	09db      	lsrs	r3, r3, #7
 8005d06:	60fb      	str	r3, [r7, #12]
        break;
 8005d08:	e006      	b.n	8005d18 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	0a1b      	lsrs	r3, r3, #8
 8005d0e:	60fb      	str	r3, [r7, #12]
        break;
 8005d10:	e002      	b.n	8005d18 <ADC_ConfigureBoostMode+0x118>
        break;
 8005d12:	bf00      	nop
 8005d14:	e000      	b.n	8005d18 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 8005d16:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	085b      	lsrs	r3, r3, #1
 8005d1c:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	4a1b      	ldr	r2, [pc, #108]	; (8005d90 <ADC_ConfigureBoostMode+0x190>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d808      	bhi.n	8005d38 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	689a      	ldr	r2, [r3, #8]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005d34:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005d36:	e025      	b.n	8005d84 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	4a16      	ldr	r2, [pc, #88]	; (8005d94 <ADC_ConfigureBoostMode+0x194>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d80a      	bhi.n	8005d56 <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d52:	609a      	str	r2, [r3, #8]
}
 8005d54:	e016      	b.n	8005d84 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	4a0f      	ldr	r2, [pc, #60]	; (8005d98 <ADC_ConfigureBoostMode+0x198>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d80a      	bhi.n	8005d74 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d70:	609a      	str	r2, [r3, #8]
}
 8005d72:	e007      	b.n	8005d84 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	689a      	ldr	r2, [r3, #8]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005d82:	609a      	str	r2, [r3, #8]
}
 8005d84:	bf00      	nop
 8005d86:	3710      	adds	r7, #16
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	40022300 	.word	0x40022300
 8005d90:	005f5e10 	.word	0x005f5e10
 8005d94:	00bebc20 	.word	0x00bebc20
 8005d98:	017d7840 	.word	0x017d7840

08005d9c <LL_ADC_IsEnabled>:
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f003 0301 	and.w	r3, r3, #1
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d101      	bne.n	8005db4 <LL_ADC_IsEnabled+0x18>
 8005db0:	2301      	movs	r3, #1
 8005db2:	e000      	b.n	8005db6 <LL_ADC_IsEnabled+0x1a>
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	370c      	adds	r7, #12
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <LL_ADC_REG_IsConversionOngoing>:
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	b083      	sub	sp, #12
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f003 0304 	and.w	r3, r3, #4
 8005dd2:	2b04      	cmp	r3, #4
 8005dd4:	d101      	bne.n	8005dda <LL_ADC_REG_IsConversionOngoing+0x18>
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e000      	b.n	8005ddc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005df0:	bf00      	nop
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005e2c:	bf00      	nop
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005e40:	bf00      	nop
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005e4c:	b590      	push	{r4, r7, lr}
 8005e4e:	b09f      	sub	sp, #124	; 0x7c
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e56:	2300      	movs	r3, #0
 8005e58:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d101      	bne.n	8005e6a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005e66:	2302      	movs	r3, #2
 8005e68:	e080      	b.n	8005f6c <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005e72:	2300      	movs	r3, #0
 8005e74:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005e76:	2300      	movs	r3, #0
 8005e78:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a3d      	ldr	r2, [pc, #244]	; (8005f74 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d102      	bne.n	8005e8a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005e84:	4b3c      	ldr	r3, [pc, #240]	; (8005f78 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8005e86:	60bb      	str	r3, [r7, #8]
 8005e88:	e001      	b.n	8005e8e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d10b      	bne.n	8005eac <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e98:	f043 0220 	orr.w	r2, r3, #32
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e05f      	b.n	8005f6c <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f7ff ff87 	bl	8005dc2 <LL_ADC_REG_IsConversionOngoing>
 8005eb4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7ff ff81 	bl	8005dc2 <LL_ADC_REG_IsConversionOngoing>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d141      	bne.n	8005f4a <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005ec6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d13e      	bne.n	8005f4a <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005ecc:	4b2b      	ldr	r3, [pc, #172]	; (8005f7c <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8005ece:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d020      	beq.n	8005f1a <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005ed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	431a      	orrs	r2, r3
 8005ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ee8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005eea:	4822      	ldr	r0, [pc, #136]	; (8005f74 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8005eec:	f7ff ff56 	bl	8005d9c <LL_ADC_IsEnabled>
 8005ef0:	4604      	mov	r4, r0
 8005ef2:	4821      	ldr	r0, [pc, #132]	; (8005f78 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8005ef4:	f7ff ff52 	bl	8005d9c <LL_ADC_IsEnabled>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	4323      	orrs	r3, r4
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d12e      	bne.n	8005f5e <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005f00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f02:	689a      	ldr	r2, [r3, #8]
 8005f04:	4b1e      	ldr	r3, [pc, #120]	; (8005f80 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8005f06:	4013      	ands	r3, r2
 8005f08:	683a      	ldr	r2, [r7, #0]
 8005f0a:	6811      	ldr	r1, [r2, #0]
 8005f0c:	683a      	ldr	r2, [r7, #0]
 8005f0e:	6892      	ldr	r2, [r2, #8]
 8005f10:	430a      	orrs	r2, r1
 8005f12:	431a      	orrs	r2, r3
 8005f14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f16:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005f18:	e021      	b.n	8005f5e <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005f22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f24:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005f26:	4813      	ldr	r0, [pc, #76]	; (8005f74 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8005f28:	f7ff ff38 	bl	8005d9c <LL_ADC_IsEnabled>
 8005f2c:	4604      	mov	r4, r0
 8005f2e:	4812      	ldr	r0, [pc, #72]	; (8005f78 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8005f30:	f7ff ff34 	bl	8005d9c <LL_ADC_IsEnabled>
 8005f34:	4603      	mov	r3, r0
 8005f36:	4323      	orrs	r3, r4
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d110      	bne.n	8005f5e <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f3e:	689a      	ldr	r2, [r3, #8]
 8005f40:	4b0f      	ldr	r3, [pc, #60]	; (8005f80 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8005f42:	4013      	ands	r3, r2
 8005f44:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005f46:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005f48:	e009      	b.n	8005f5e <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f4e:	f043 0220 	orr.w	r2, r3, #32
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005f5c:	e000      	b.n	8005f60 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005f5e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005f68:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	377c      	adds	r7, #124	; 0x7c
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd90      	pop	{r4, r7, pc}
 8005f74:	40022000 	.word	0x40022000
 8005f78:	40022100 	.word	0x40022100
 8005f7c:	40022300 	.word	0x40022300
 8005f80:	fffff0e0 	.word	0xfffff0e0

08005f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f003 0307 	and.w	r3, r3, #7
 8005f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f94:	4b0b      	ldr	r3, [pc, #44]	; (8005fc4 <__NVIC_SetPriorityGrouping+0x40>)
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f9a:	68ba      	ldr	r2, [r7, #8]
 8005f9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005fac:	4b06      	ldr	r3, [pc, #24]	; (8005fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005fb2:	4a04      	ldr	r2, [pc, #16]	; (8005fc4 <__NVIC_SetPriorityGrouping+0x40>)
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	60d3      	str	r3, [r2, #12]
}
 8005fb8:	bf00      	nop
 8005fba:	3714      	adds	r7, #20
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr
 8005fc4:	e000ed00 	.word	0xe000ed00
 8005fc8:	05fa0000 	.word	0x05fa0000

08005fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005fd0:	4b04      	ldr	r3, [pc, #16]	; (8005fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	0a1b      	lsrs	r3, r3, #8
 8005fd6:	f003 0307 	and.w	r3, r3, #7
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr
 8005fe4:	e000ed00 	.word	0xe000ed00

08005fe8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	4603      	mov	r3, r0
 8005ff0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005ff2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	db0b      	blt.n	8006012 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ffa:	88fb      	ldrh	r3, [r7, #6]
 8005ffc:	f003 021f 	and.w	r2, r3, #31
 8006000:	4907      	ldr	r1, [pc, #28]	; (8006020 <__NVIC_EnableIRQ+0x38>)
 8006002:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006006:	095b      	lsrs	r3, r3, #5
 8006008:	2001      	movs	r0, #1
 800600a:	fa00 f202 	lsl.w	r2, r0, r2
 800600e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006012:	bf00      	nop
 8006014:	370c      	adds	r7, #12
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	e000e100 	.word	0xe000e100

08006024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	4603      	mov	r3, r0
 800602c:	6039      	str	r1, [r7, #0]
 800602e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006030:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006034:	2b00      	cmp	r3, #0
 8006036:	db0a      	blt.n	800604e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	b2da      	uxtb	r2, r3
 800603c:	490c      	ldr	r1, [pc, #48]	; (8006070 <__NVIC_SetPriority+0x4c>)
 800603e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006042:	0112      	lsls	r2, r2, #4
 8006044:	b2d2      	uxtb	r2, r2
 8006046:	440b      	add	r3, r1
 8006048:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800604c:	e00a      	b.n	8006064 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	b2da      	uxtb	r2, r3
 8006052:	4908      	ldr	r1, [pc, #32]	; (8006074 <__NVIC_SetPriority+0x50>)
 8006054:	88fb      	ldrh	r3, [r7, #6]
 8006056:	f003 030f 	and.w	r3, r3, #15
 800605a:	3b04      	subs	r3, #4
 800605c:	0112      	lsls	r2, r2, #4
 800605e:	b2d2      	uxtb	r2, r2
 8006060:	440b      	add	r3, r1
 8006062:	761a      	strb	r2, [r3, #24]
}
 8006064:	bf00      	nop
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr
 8006070:	e000e100 	.word	0xe000e100
 8006074:	e000ed00 	.word	0xe000ed00

08006078 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006078:	b480      	push	{r7}
 800607a:	b089      	sub	sp, #36	; 0x24
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f003 0307 	and.w	r3, r3, #7
 800608a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	f1c3 0307 	rsb	r3, r3, #7
 8006092:	2b04      	cmp	r3, #4
 8006094:	bf28      	it	cs
 8006096:	2304      	movcs	r3, #4
 8006098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	3304      	adds	r3, #4
 800609e:	2b06      	cmp	r3, #6
 80060a0:	d902      	bls.n	80060a8 <NVIC_EncodePriority+0x30>
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	3b03      	subs	r3, #3
 80060a6:	e000      	b.n	80060aa <NVIC_EncodePriority+0x32>
 80060a8:	2300      	movs	r3, #0
 80060aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060ac:	f04f 32ff 	mov.w	r2, #4294967295
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	fa02 f303 	lsl.w	r3, r2, r3
 80060b6:	43da      	mvns	r2, r3
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	401a      	ands	r2, r3
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80060c0:	f04f 31ff 	mov.w	r1, #4294967295
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	fa01 f303 	lsl.w	r3, r1, r3
 80060ca:	43d9      	mvns	r1, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060d0:	4313      	orrs	r3, r2
         );
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3724      	adds	r7, #36	; 0x24
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr
	...

080060e0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80060e0:	b480      	push	{r7}
 80060e2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80060e4:	f3bf 8f4f 	dsb	sy
}
 80060e8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80060ea:	4b06      	ldr	r3, [pc, #24]	; (8006104 <__NVIC_SystemReset+0x24>)
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80060f2:	4904      	ldr	r1, [pc, #16]	; (8006104 <__NVIC_SystemReset+0x24>)
 80060f4:	4b04      	ldr	r3, [pc, #16]	; (8006108 <__NVIC_SystemReset+0x28>)
 80060f6:	4313      	orrs	r3, r2
 80060f8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80060fa:	f3bf 8f4f 	dsb	sy
}
 80060fe:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8006100:	bf00      	nop
 8006102:	e7fd      	b.n	8006100 <__NVIC_SystemReset+0x20>
 8006104:	e000ed00 	.word	0xe000ed00
 8006108:	05fa0004 	.word	0x05fa0004

0800610c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	3b01      	subs	r3, #1
 8006118:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800611c:	d301      	bcc.n	8006122 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800611e:	2301      	movs	r3, #1
 8006120:	e00f      	b.n	8006142 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006122:	4a0a      	ldr	r2, [pc, #40]	; (800614c <SysTick_Config+0x40>)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	3b01      	subs	r3, #1
 8006128:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800612a:	210f      	movs	r1, #15
 800612c:	f04f 30ff 	mov.w	r0, #4294967295
 8006130:	f7ff ff78 	bl	8006024 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006134:	4b05      	ldr	r3, [pc, #20]	; (800614c <SysTick_Config+0x40>)
 8006136:	2200      	movs	r2, #0
 8006138:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800613a:	4b04      	ldr	r3, [pc, #16]	; (800614c <SysTick_Config+0x40>)
 800613c:	2207      	movs	r2, #7
 800613e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3708      	adds	r7, #8
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	e000e010 	.word	0xe000e010

08006150 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f7ff ff13 	bl	8005f84 <__NVIC_SetPriorityGrouping>
}
 800615e:	bf00      	nop
 8006160:	3708      	adds	r7, #8
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b086      	sub	sp, #24
 800616a:	af00      	add	r7, sp, #0
 800616c:	4603      	mov	r3, r0
 800616e:	60b9      	str	r1, [r7, #8]
 8006170:	607a      	str	r2, [r7, #4]
 8006172:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006174:	f7ff ff2a 	bl	8005fcc <__NVIC_GetPriorityGrouping>
 8006178:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	68b9      	ldr	r1, [r7, #8]
 800617e:	6978      	ldr	r0, [r7, #20]
 8006180:	f7ff ff7a 	bl	8006078 <NVIC_EncodePriority>
 8006184:	4602      	mov	r2, r0
 8006186:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800618a:	4611      	mov	r1, r2
 800618c:	4618      	mov	r0, r3
 800618e:	f7ff ff49 	bl	8006024 <__NVIC_SetPriority>
}
 8006192:	bf00      	nop
 8006194:	3718      	adds	r7, #24
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}

0800619a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800619a:	b580      	push	{r7, lr}
 800619c:	b082      	sub	sp, #8
 800619e:	af00      	add	r7, sp, #0
 80061a0:	4603      	mov	r3, r0
 80061a2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80061a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80061a8:	4618      	mov	r0, r3
 80061aa:	f7ff ff1d 	bl	8005fe8 <__NVIC_EnableIRQ>
}
 80061ae:	bf00      	nop
 80061b0:	3708      	adds	r7, #8
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80061b6:	b580      	push	{r7, lr}
 80061b8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80061ba:	f7ff ff91 	bl	80060e0 <__NVIC_SystemReset>

080061be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80061be:	b580      	push	{r7, lr}
 80061c0:	b082      	sub	sp, #8
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f7ff ffa0 	bl	800610c <SysTick_Config>
 80061cc:	4603      	mov	r3, r0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3708      	adds	r7, #8
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b082      	sub	sp, #8
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d101      	bne.n	80061e8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e014      	b.n	8006212 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	791b      	ldrb	r3, [r3, #4]
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d105      	bne.n	80061fe <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f7fd f88b 	bl	8003314 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2202      	movs	r2, #2
 8006202:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2201      	movs	r2, #1
 800620e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	3708      	adds	r7, #8
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}

0800621a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800621a:	b480      	push	{r7}
 800621c:	b083      	sub	sp, #12
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
 8006222:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	795b      	ldrb	r3, [r3, #5]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d101      	bne.n	8006230 <HAL_DAC_Start+0x16>
 800622c:	2302      	movs	r3, #2
 800622e:	e040      	b.n	80062b2 <HAL_DAC_Start+0x98>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2202      	movs	r2, #2
 800623a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	6819      	ldr	r1, [r3, #0]
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	f003 0310 	and.w	r3, r3, #16
 8006248:	2201      	movs	r2, #1
 800624a:	409a      	lsls	r2, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	430a      	orrs	r2, r1
 8006252:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d10f      	bne.n	800627a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8006264:	2b02      	cmp	r3, #2
 8006266:	d11d      	bne.n	80062a4 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	685a      	ldr	r2, [r3, #4]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f042 0201 	orr.w	r2, r2, #1
 8006276:	605a      	str	r2, [r3, #4]
 8006278:	e014      	b.n	80062a4 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	f003 0310 	and.w	r3, r3, #16
 800628a:	2102      	movs	r1, #2
 800628c:	fa01 f303 	lsl.w	r3, r1, r3
 8006290:	429a      	cmp	r2, r3
 8006292:	d107      	bne.n	80062a4 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	685a      	ldr	r2, [r3, #4]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f042 0202 	orr.w	r2, r2, #2
 80062a2:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	370c      	adds	r7, #12
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr

080062be <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80062be:	b480      	push	{r7}
 80062c0:	b087      	sub	sp, #28
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	60f8      	str	r0, [r7, #12]
 80062c6:	60b9      	str	r1, [r7, #8]
 80062c8:	607a      	str	r2, [r7, #4]
 80062ca:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80062cc:	2300      	movs	r3, #0
 80062ce:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d105      	bne.n	80062e8 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80062dc:	697a      	ldr	r2, [r7, #20]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4413      	add	r3, r2
 80062e2:	3308      	adds	r3, #8
 80062e4:	617b      	str	r3, [r7, #20]
 80062e6:	e004      	b.n	80062f2 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80062e8:	697a      	ldr	r2, [r7, #20]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4413      	add	r3, r2
 80062ee:	3314      	adds	r3, #20
 80062f0:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	461a      	mov	r2, r3
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	371c      	adds	r7, #28
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b088      	sub	sp, #32
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	795b      	ldrb	r3, [r3, #5]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d101      	bne.n	8006320 <HAL_DAC_ConfigChannel+0x18>
 800631c:	2302      	movs	r3, #2
 800631e:	e12a      	b.n	8006576 <HAL_DAC_ConfigChannel+0x26e>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2201      	movs	r2, #1
 8006324:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2202      	movs	r2, #2
 800632a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2b04      	cmp	r3, #4
 8006332:	f040 8081 	bne.w	8006438 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8006336:	f7fd fedd 	bl	80040f4 <HAL_GetTick>
 800633a:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d140      	bne.n	80063c4 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006342:	e018      	b.n	8006376 <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006344:	f7fd fed6 	bl	80040f4 <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	2b01      	cmp	r3, #1
 8006350:	d911      	bls.n	8006376 <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006358:	4b89      	ldr	r3, [pc, #548]	; (8006580 <HAL_DAC_ConfigChannel+0x278>)
 800635a:	4013      	ands	r3, r2
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00a      	beq.n	8006376 <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	f043 0208 	orr.w	r2, r3, #8
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2203      	movs	r2, #3
 8006370:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006372:	2303      	movs	r3, #3
 8006374:	e0ff      	b.n	8006576 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800637c:	4b80      	ldr	r3, [pc, #512]	; (8006580 <HAL_DAC_ConfigChannel+0x278>)
 800637e:	4013      	ands	r3, r2
 8006380:	2b00      	cmp	r3, #0
 8006382:	d1df      	bne.n	8006344 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 8006384:	2001      	movs	r0, #1
 8006386:	f7fd fec1 	bl	800410c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68ba      	ldr	r2, [r7, #8]
 8006390:	6992      	ldr	r2, [r2, #24]
 8006392:	641a      	str	r2, [r3, #64]	; 0x40
 8006394:	e023      	b.n	80063de <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006396:	f7fd fead 	bl	80040f4 <HAL_GetTick>
 800639a:	4602      	mov	r2, r0
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d90f      	bls.n	80063c4 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	da0a      	bge.n	80063c4 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	f043 0208 	orr.w	r2, r3, #8
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2203      	movs	r2, #3
 80063be:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80063c0:	2303      	movs	r3, #3
 80063c2:	e0d8      	b.n	8006576 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	dbe3      	blt.n	8006396 <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 80063ce:	2001      	movs	r0, #1
 80063d0:	f7fd fe9c 	bl	800410c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	68ba      	ldr	r2, [r7, #8]
 80063da:	6992      	ldr	r2, [r2, #24]
 80063dc:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f003 0310 	and.w	r3, r3, #16
 80063ea:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80063ee:	fa01 f303 	lsl.w	r3, r1, r3
 80063f2:	43db      	mvns	r3, r3
 80063f4:	ea02 0103 	and.w	r1, r2, r3
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	69da      	ldr	r2, [r3, #28]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f003 0310 	and.w	r3, r3, #16
 8006402:	409a      	lsls	r2, r3
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	430a      	orrs	r2, r1
 800640a:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f003 0310 	and.w	r3, r3, #16
 8006418:	21ff      	movs	r1, #255	; 0xff
 800641a:	fa01 f303 	lsl.w	r3, r1, r3
 800641e:	43db      	mvns	r3, r3
 8006420:	ea02 0103 	and.w	r1, r2, r3
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	6a1a      	ldr	r2, [r3, #32]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f003 0310 	and.w	r3, r3, #16
 800642e:	409a      	lsls	r2, r3
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	430a      	orrs	r2, r1
 8006436:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	2b01      	cmp	r3, #1
 800643e:	d11d      	bne.n	800647c <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006446:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f003 0310 	and.w	r3, r3, #16
 800644e:	221f      	movs	r2, #31
 8006450:	fa02 f303 	lsl.w	r3, r2, r3
 8006454:	43db      	mvns	r3, r3
 8006456:	697a      	ldr	r2, [r7, #20]
 8006458:	4013      	ands	r3, r2
 800645a:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	695b      	ldr	r3, [r3, #20]
 8006460:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f003 0310 	and.w	r3, r3, #16
 8006468:	693a      	ldr	r2, [r7, #16]
 800646a:	fa02 f303 	lsl.w	r3, r2, r3
 800646e:	697a      	ldr	r2, [r7, #20]
 8006470:	4313      	orrs	r3, r2
 8006472:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	697a      	ldr	r2, [r7, #20]
 800647a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006482:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f003 0310 	and.w	r3, r3, #16
 800648a:	2207      	movs	r2, #7
 800648c:	fa02 f303 	lsl.w	r3, r2, r3
 8006490:	43db      	mvns	r3, r3
 8006492:	697a      	ldr	r2, [r7, #20]
 8006494:	4013      	ands	r3, r2
 8006496:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	2b01      	cmp	r3, #1
 800649e:	d102      	bne.n	80064a6 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 80064a0:	2300      	movs	r3, #0
 80064a2:	61fb      	str	r3, [r7, #28]
 80064a4:	e00f      	b.n	80064c6 <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d102      	bne.n	80064b4 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80064ae:	2301      	movs	r3, #1
 80064b0:	61fb      	str	r3, [r7, #28]
 80064b2:	e008      	b.n	80064c6 <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d102      	bne.n	80064c2 <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80064bc:	2301      	movs	r3, #1
 80064be:	61fb      	str	r3, [r7, #28]
 80064c0:	e001      	b.n	80064c6 <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80064c2:	2300      	movs	r3, #0
 80064c4:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	69fa      	ldr	r2, [r7, #28]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f003 0310 	and.w	r3, r3, #16
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	fa02 f303 	lsl.w	r3, r2, r3
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	6819      	ldr	r1, [r3, #0]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f003 0310 	and.w	r3, r3, #16
 80064fc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006500:	fa02 f303 	lsl.w	r3, r2, r3
 8006504:	43da      	mvns	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	400a      	ands	r2, r1
 800650c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f003 0310 	and.w	r3, r3, #16
 800651c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006520:	fa02 f303 	lsl.w	r3, r2, r3
 8006524:	43db      	mvns	r3, r3
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	4013      	ands	r3, r2
 800652a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f003 0310 	and.w	r3, r3, #16
 8006538:	693a      	ldr	r2, [r7, #16]
 800653a:	fa02 f303 	lsl.w	r3, r2, r3
 800653e:	697a      	ldr	r2, [r7, #20]
 8006540:	4313      	orrs	r3, r2
 8006542:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	697a      	ldr	r2, [r7, #20]
 800654a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	6819      	ldr	r1, [r3, #0]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f003 0310 	and.w	r3, r3, #16
 8006558:	22c0      	movs	r2, #192	; 0xc0
 800655a:	fa02 f303 	lsl.w	r3, r2, r3
 800655e:	43da      	mvns	r2, r3
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	400a      	ands	r2, r1
 8006566:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2201      	movs	r2, #1
 800656c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3720      	adds	r7, #32
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	20008000 	.word	0x20008000

08006584 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800658c:	f7fd fdb2 	bl	80040f4 <HAL_GetTick>
 8006590:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d101      	bne.n	800659c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	e37d      	b.n	8006c98 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a66      	ldr	r2, [pc, #408]	; (800673c <HAL_DMA_Init+0x1b8>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d04a      	beq.n	800663c <HAL_DMA_Init+0xb8>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a65      	ldr	r2, [pc, #404]	; (8006740 <HAL_DMA_Init+0x1bc>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d045      	beq.n	800663c <HAL_DMA_Init+0xb8>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a63      	ldr	r2, [pc, #396]	; (8006744 <HAL_DMA_Init+0x1c0>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d040      	beq.n	800663c <HAL_DMA_Init+0xb8>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a62      	ldr	r2, [pc, #392]	; (8006748 <HAL_DMA_Init+0x1c4>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d03b      	beq.n	800663c <HAL_DMA_Init+0xb8>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a60      	ldr	r2, [pc, #384]	; (800674c <HAL_DMA_Init+0x1c8>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d036      	beq.n	800663c <HAL_DMA_Init+0xb8>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a5f      	ldr	r2, [pc, #380]	; (8006750 <HAL_DMA_Init+0x1cc>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d031      	beq.n	800663c <HAL_DMA_Init+0xb8>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a5d      	ldr	r2, [pc, #372]	; (8006754 <HAL_DMA_Init+0x1d0>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d02c      	beq.n	800663c <HAL_DMA_Init+0xb8>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a5c      	ldr	r2, [pc, #368]	; (8006758 <HAL_DMA_Init+0x1d4>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d027      	beq.n	800663c <HAL_DMA_Init+0xb8>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a5a      	ldr	r2, [pc, #360]	; (800675c <HAL_DMA_Init+0x1d8>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d022      	beq.n	800663c <HAL_DMA_Init+0xb8>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a59      	ldr	r2, [pc, #356]	; (8006760 <HAL_DMA_Init+0x1dc>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d01d      	beq.n	800663c <HAL_DMA_Init+0xb8>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a57      	ldr	r2, [pc, #348]	; (8006764 <HAL_DMA_Init+0x1e0>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d018      	beq.n	800663c <HAL_DMA_Init+0xb8>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a56      	ldr	r2, [pc, #344]	; (8006768 <HAL_DMA_Init+0x1e4>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d013      	beq.n	800663c <HAL_DMA_Init+0xb8>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a54      	ldr	r2, [pc, #336]	; (800676c <HAL_DMA_Init+0x1e8>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d00e      	beq.n	800663c <HAL_DMA_Init+0xb8>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a53      	ldr	r2, [pc, #332]	; (8006770 <HAL_DMA_Init+0x1ec>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d009      	beq.n	800663c <HAL_DMA_Init+0xb8>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a51      	ldr	r2, [pc, #324]	; (8006774 <HAL_DMA_Init+0x1f0>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d004      	beq.n	800663c <HAL_DMA_Init+0xb8>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a50      	ldr	r2, [pc, #320]	; (8006778 <HAL_DMA_Init+0x1f4>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d101      	bne.n	8006640 <HAL_DMA_Init+0xbc>
 800663c:	2301      	movs	r3, #1
 800663e:	e000      	b.n	8006642 <HAL_DMA_Init+0xbe>
 8006640:	2300      	movs	r3, #0
 8006642:	2b00      	cmp	r3, #0
 8006644:	f000 813c 	beq.w	80068c0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2202      	movs	r2, #2
 800664c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a37      	ldr	r2, [pc, #220]	; (800673c <HAL_DMA_Init+0x1b8>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d04a      	beq.n	80066f8 <HAL_DMA_Init+0x174>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a36      	ldr	r2, [pc, #216]	; (8006740 <HAL_DMA_Init+0x1bc>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d045      	beq.n	80066f8 <HAL_DMA_Init+0x174>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a34      	ldr	r2, [pc, #208]	; (8006744 <HAL_DMA_Init+0x1c0>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d040      	beq.n	80066f8 <HAL_DMA_Init+0x174>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a33      	ldr	r2, [pc, #204]	; (8006748 <HAL_DMA_Init+0x1c4>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d03b      	beq.n	80066f8 <HAL_DMA_Init+0x174>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a31      	ldr	r2, [pc, #196]	; (800674c <HAL_DMA_Init+0x1c8>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d036      	beq.n	80066f8 <HAL_DMA_Init+0x174>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a30      	ldr	r2, [pc, #192]	; (8006750 <HAL_DMA_Init+0x1cc>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d031      	beq.n	80066f8 <HAL_DMA_Init+0x174>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a2e      	ldr	r2, [pc, #184]	; (8006754 <HAL_DMA_Init+0x1d0>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d02c      	beq.n	80066f8 <HAL_DMA_Init+0x174>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a2d      	ldr	r2, [pc, #180]	; (8006758 <HAL_DMA_Init+0x1d4>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d027      	beq.n	80066f8 <HAL_DMA_Init+0x174>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a2b      	ldr	r2, [pc, #172]	; (800675c <HAL_DMA_Init+0x1d8>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d022      	beq.n	80066f8 <HAL_DMA_Init+0x174>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a2a      	ldr	r2, [pc, #168]	; (8006760 <HAL_DMA_Init+0x1dc>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d01d      	beq.n	80066f8 <HAL_DMA_Init+0x174>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a28      	ldr	r2, [pc, #160]	; (8006764 <HAL_DMA_Init+0x1e0>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d018      	beq.n	80066f8 <HAL_DMA_Init+0x174>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a27      	ldr	r2, [pc, #156]	; (8006768 <HAL_DMA_Init+0x1e4>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d013      	beq.n	80066f8 <HAL_DMA_Init+0x174>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a25      	ldr	r2, [pc, #148]	; (800676c <HAL_DMA_Init+0x1e8>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d00e      	beq.n	80066f8 <HAL_DMA_Init+0x174>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a24      	ldr	r2, [pc, #144]	; (8006770 <HAL_DMA_Init+0x1ec>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d009      	beq.n	80066f8 <HAL_DMA_Init+0x174>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a22      	ldr	r2, [pc, #136]	; (8006774 <HAL_DMA_Init+0x1f0>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d004      	beq.n	80066f8 <HAL_DMA_Init+0x174>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a21      	ldr	r2, [pc, #132]	; (8006778 <HAL_DMA_Init+0x1f4>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d108      	bne.n	800670a <HAL_DMA_Init+0x186>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f022 0201 	bic.w	r2, r2, #1
 8006706:	601a      	str	r2, [r3, #0]
 8006708:	e007      	b.n	800671a <HAL_DMA_Init+0x196>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f022 0201 	bic.w	r2, r2, #1
 8006718:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800671a:	e02f      	b.n	800677c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800671c:	f7fd fcea 	bl	80040f4 <HAL_GetTick>
 8006720:	4602      	mov	r2, r0
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	2b05      	cmp	r3, #5
 8006728:	d928      	bls.n	800677c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2220      	movs	r2, #32
 800672e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2203      	movs	r2, #3
 8006734:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e2ad      	b.n	8006c98 <HAL_DMA_Init+0x714>
 800673c:	40020010 	.word	0x40020010
 8006740:	40020028 	.word	0x40020028
 8006744:	40020040 	.word	0x40020040
 8006748:	40020058 	.word	0x40020058
 800674c:	40020070 	.word	0x40020070
 8006750:	40020088 	.word	0x40020088
 8006754:	400200a0 	.word	0x400200a0
 8006758:	400200b8 	.word	0x400200b8
 800675c:	40020410 	.word	0x40020410
 8006760:	40020428 	.word	0x40020428
 8006764:	40020440 	.word	0x40020440
 8006768:	40020458 	.word	0x40020458
 800676c:	40020470 	.word	0x40020470
 8006770:	40020488 	.word	0x40020488
 8006774:	400204a0 	.word	0x400204a0
 8006778:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0301 	and.w	r3, r3, #1
 8006786:	2b00      	cmp	r3, #0
 8006788:	d1c8      	bne.n	800671c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006792:	697a      	ldr	r2, [r7, #20]
 8006794:	4b73      	ldr	r3, [pc, #460]	; (8006964 <HAL_DMA_Init+0x3e0>)
 8006796:	4013      	ands	r3, r2
 8006798:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80067a2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	691b      	ldr	r3, [r3, #16]
 80067a8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80067ae:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80067ba:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6a1b      	ldr	r3, [r3, #32]
 80067c0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80067c2:	697a      	ldr	r2, [r7, #20]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067cc:	2b04      	cmp	r3, #4
 80067ce:	d107      	bne.n	80067e0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d8:	4313      	orrs	r3, r2
 80067da:	697a      	ldr	r2, [r7, #20]
 80067dc:	4313      	orrs	r3, r2
 80067de:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	2b28      	cmp	r3, #40	; 0x28
 80067e6:	d903      	bls.n	80067f0 <HAL_DMA_Init+0x26c>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	2b2e      	cmp	r3, #46	; 0x2e
 80067ee:	d91f      	bls.n	8006830 <HAL_DMA_Init+0x2ac>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	2b3e      	cmp	r3, #62	; 0x3e
 80067f6:	d903      	bls.n	8006800 <HAL_DMA_Init+0x27c>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	2b42      	cmp	r3, #66	; 0x42
 80067fe:	d917      	bls.n	8006830 <HAL_DMA_Init+0x2ac>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	2b46      	cmp	r3, #70	; 0x46
 8006806:	d903      	bls.n	8006810 <HAL_DMA_Init+0x28c>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	2b48      	cmp	r3, #72	; 0x48
 800680e:	d90f      	bls.n	8006830 <HAL_DMA_Init+0x2ac>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	2b4e      	cmp	r3, #78	; 0x4e
 8006816:	d903      	bls.n	8006820 <HAL_DMA_Init+0x29c>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	2b52      	cmp	r3, #82	; 0x52
 800681e:	d907      	bls.n	8006830 <HAL_DMA_Init+0x2ac>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	2b73      	cmp	r3, #115	; 0x73
 8006826:	d905      	bls.n	8006834 <HAL_DMA_Init+0x2b0>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	2b77      	cmp	r3, #119	; 0x77
 800682e:	d801      	bhi.n	8006834 <HAL_DMA_Init+0x2b0>
 8006830:	2301      	movs	r3, #1
 8006832:	e000      	b.n	8006836 <HAL_DMA_Init+0x2b2>
 8006834:	2300      	movs	r3, #0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d003      	beq.n	8006842 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006840:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	697a      	ldr	r2, [r7, #20]
 8006848:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	695b      	ldr	r3, [r3, #20]
 8006850:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	f023 0307 	bic.w	r3, r3, #7
 8006858:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685e:	697a      	ldr	r2, [r7, #20]
 8006860:	4313      	orrs	r3, r2
 8006862:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006868:	2b04      	cmp	r3, #4
 800686a:	d117      	bne.n	800689c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006870:	697a      	ldr	r2, [r7, #20]
 8006872:	4313      	orrs	r3, r2
 8006874:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00e      	beq.n	800689c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f002 fbe0 	bl	8009044 <DMA_CheckFifoParam>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d008      	beq.n	800689c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2240      	movs	r2, #64	; 0x40
 800688e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	e1fd      	b.n	8006c98 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	697a      	ldr	r2, [r7, #20]
 80068a2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f002 fb1b 	bl	8008ee0 <DMA_CalcBaseAndBitshift>
 80068aa:	4603      	mov	r3, r0
 80068ac:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068b2:	f003 031f 	and.w	r3, r3, #31
 80068b6:	223f      	movs	r2, #63	; 0x3f
 80068b8:	409a      	lsls	r2, r3
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	609a      	str	r2, [r3, #8]
 80068be:	e0fd      	b.n	8006abc <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a28      	ldr	r2, [pc, #160]	; (8006968 <HAL_DMA_Init+0x3e4>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d04a      	beq.n	8006960 <HAL_DMA_Init+0x3dc>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a27      	ldr	r2, [pc, #156]	; (800696c <HAL_DMA_Init+0x3e8>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d045      	beq.n	8006960 <HAL_DMA_Init+0x3dc>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a25      	ldr	r2, [pc, #148]	; (8006970 <HAL_DMA_Init+0x3ec>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d040      	beq.n	8006960 <HAL_DMA_Init+0x3dc>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a24      	ldr	r2, [pc, #144]	; (8006974 <HAL_DMA_Init+0x3f0>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d03b      	beq.n	8006960 <HAL_DMA_Init+0x3dc>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a22      	ldr	r2, [pc, #136]	; (8006978 <HAL_DMA_Init+0x3f4>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d036      	beq.n	8006960 <HAL_DMA_Init+0x3dc>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a21      	ldr	r2, [pc, #132]	; (800697c <HAL_DMA_Init+0x3f8>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d031      	beq.n	8006960 <HAL_DMA_Init+0x3dc>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a1f      	ldr	r2, [pc, #124]	; (8006980 <HAL_DMA_Init+0x3fc>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d02c      	beq.n	8006960 <HAL_DMA_Init+0x3dc>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a1e      	ldr	r2, [pc, #120]	; (8006984 <HAL_DMA_Init+0x400>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d027      	beq.n	8006960 <HAL_DMA_Init+0x3dc>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a1c      	ldr	r2, [pc, #112]	; (8006988 <HAL_DMA_Init+0x404>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d022      	beq.n	8006960 <HAL_DMA_Init+0x3dc>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a1b      	ldr	r2, [pc, #108]	; (800698c <HAL_DMA_Init+0x408>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d01d      	beq.n	8006960 <HAL_DMA_Init+0x3dc>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a19      	ldr	r2, [pc, #100]	; (8006990 <HAL_DMA_Init+0x40c>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d018      	beq.n	8006960 <HAL_DMA_Init+0x3dc>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a18      	ldr	r2, [pc, #96]	; (8006994 <HAL_DMA_Init+0x410>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d013      	beq.n	8006960 <HAL_DMA_Init+0x3dc>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a16      	ldr	r2, [pc, #88]	; (8006998 <HAL_DMA_Init+0x414>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d00e      	beq.n	8006960 <HAL_DMA_Init+0x3dc>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a15      	ldr	r2, [pc, #84]	; (800699c <HAL_DMA_Init+0x418>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d009      	beq.n	8006960 <HAL_DMA_Init+0x3dc>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a13      	ldr	r2, [pc, #76]	; (80069a0 <HAL_DMA_Init+0x41c>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d004      	beq.n	8006960 <HAL_DMA_Init+0x3dc>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a12      	ldr	r2, [pc, #72]	; (80069a4 <HAL_DMA_Init+0x420>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d123      	bne.n	80069a8 <HAL_DMA_Init+0x424>
 8006960:	2301      	movs	r3, #1
 8006962:	e022      	b.n	80069aa <HAL_DMA_Init+0x426>
 8006964:	fe10803f 	.word	0xfe10803f
 8006968:	48022c08 	.word	0x48022c08
 800696c:	48022c1c 	.word	0x48022c1c
 8006970:	48022c30 	.word	0x48022c30
 8006974:	48022c44 	.word	0x48022c44
 8006978:	48022c58 	.word	0x48022c58
 800697c:	48022c6c 	.word	0x48022c6c
 8006980:	48022c80 	.word	0x48022c80
 8006984:	48022c94 	.word	0x48022c94
 8006988:	58025408 	.word	0x58025408
 800698c:	5802541c 	.word	0x5802541c
 8006990:	58025430 	.word	0x58025430
 8006994:	58025444 	.word	0x58025444
 8006998:	58025458 	.word	0x58025458
 800699c:	5802546c 	.word	0x5802546c
 80069a0:	58025480 	.word	0x58025480
 80069a4:	58025494 	.word	0x58025494
 80069a8:	2300      	movs	r3, #0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d07d      	beq.n	8006aaa <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a7f      	ldr	r2, [pc, #508]	; (8006bb0 <HAL_DMA_Init+0x62c>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d021      	beq.n	80069fc <HAL_DMA_Init+0x478>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a7d      	ldr	r2, [pc, #500]	; (8006bb4 <HAL_DMA_Init+0x630>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d01c      	beq.n	80069fc <HAL_DMA_Init+0x478>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a7c      	ldr	r2, [pc, #496]	; (8006bb8 <HAL_DMA_Init+0x634>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d017      	beq.n	80069fc <HAL_DMA_Init+0x478>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a7a      	ldr	r2, [pc, #488]	; (8006bbc <HAL_DMA_Init+0x638>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d012      	beq.n	80069fc <HAL_DMA_Init+0x478>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a79      	ldr	r2, [pc, #484]	; (8006bc0 <HAL_DMA_Init+0x63c>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d00d      	beq.n	80069fc <HAL_DMA_Init+0x478>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a77      	ldr	r2, [pc, #476]	; (8006bc4 <HAL_DMA_Init+0x640>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d008      	beq.n	80069fc <HAL_DMA_Init+0x478>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a76      	ldr	r2, [pc, #472]	; (8006bc8 <HAL_DMA_Init+0x644>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d003      	beq.n	80069fc <HAL_DMA_Init+0x478>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a74      	ldr	r2, [pc, #464]	; (8006bcc <HAL_DMA_Init+0x648>)
 80069fa:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2202      	movs	r2, #2
 8006a00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006a14:	697a      	ldr	r2, [r7, #20]
 8006a16:	4b6e      	ldr	r3, [pc, #440]	; (8006bd0 <HAL_DMA_Init+0x64c>)
 8006a18:	4013      	ands	r3, r2
 8006a1a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	2b40      	cmp	r3, #64	; 0x40
 8006a22:	d008      	beq.n	8006a36 <HAL_DMA_Init+0x4b2>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	2b80      	cmp	r3, #128	; 0x80
 8006a2a:	d102      	bne.n	8006a32 <HAL_DMA_Init+0x4ae>
 8006a2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006a30:	e002      	b.n	8006a38 <HAL_DMA_Init+0x4b4>
 8006a32:	2300      	movs	r3, #0
 8006a34:	e000      	b.n	8006a38 <HAL_DMA_Init+0x4b4>
 8006a36:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	68d2      	ldr	r2, [r2, #12]
 8006a3c:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006a3e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006a46:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	695b      	ldr	r3, [r3, #20]
 8006a4c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006a4e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	699b      	ldr	r3, [r3, #24]
 8006a54:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006a56:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	69db      	ldr	r3, [r3, #28]
 8006a5c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006a5e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a1b      	ldr	r3, [r3, #32]
 8006a64:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006a66:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006a68:	697a      	ldr	r2, [r7, #20]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	697a      	ldr	r2, [r7, #20]
 8006a74:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	4b55      	ldr	r3, [pc, #340]	; (8006bd4 <HAL_DMA_Init+0x650>)
 8006a7e:	4413      	add	r3, r2
 8006a80:	4a55      	ldr	r2, [pc, #340]	; (8006bd8 <HAL_DMA_Init+0x654>)
 8006a82:	fba2 2303 	umull	r2, r3, r2, r3
 8006a86:	091b      	lsrs	r3, r3, #4
 8006a88:	009a      	lsls	r2, r3, #2
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f002 fa26 	bl	8008ee0 <DMA_CalcBaseAndBitshift>
 8006a94:	4603      	mov	r3, r0
 8006a96:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a9c:	f003 031f 	and.w	r3, r3, #31
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	409a      	lsls	r2, r3
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	605a      	str	r2, [r3, #4]
 8006aa8:	e008      	b.n	8006abc <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2240      	movs	r2, #64	; 0x40
 8006aae:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2203      	movs	r2, #3
 8006ab4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e0ed      	b.n	8006c98 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a46      	ldr	r2, [pc, #280]	; (8006bdc <HAL_DMA_Init+0x658>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d072      	beq.n	8006bac <HAL_DMA_Init+0x628>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a45      	ldr	r2, [pc, #276]	; (8006be0 <HAL_DMA_Init+0x65c>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d06d      	beq.n	8006bac <HAL_DMA_Init+0x628>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a43      	ldr	r2, [pc, #268]	; (8006be4 <HAL_DMA_Init+0x660>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d068      	beq.n	8006bac <HAL_DMA_Init+0x628>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a42      	ldr	r2, [pc, #264]	; (8006be8 <HAL_DMA_Init+0x664>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d063      	beq.n	8006bac <HAL_DMA_Init+0x628>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a40      	ldr	r2, [pc, #256]	; (8006bec <HAL_DMA_Init+0x668>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d05e      	beq.n	8006bac <HAL_DMA_Init+0x628>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a3f      	ldr	r2, [pc, #252]	; (8006bf0 <HAL_DMA_Init+0x66c>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d059      	beq.n	8006bac <HAL_DMA_Init+0x628>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a3d      	ldr	r2, [pc, #244]	; (8006bf4 <HAL_DMA_Init+0x670>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d054      	beq.n	8006bac <HAL_DMA_Init+0x628>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a3c      	ldr	r2, [pc, #240]	; (8006bf8 <HAL_DMA_Init+0x674>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d04f      	beq.n	8006bac <HAL_DMA_Init+0x628>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a3a      	ldr	r2, [pc, #232]	; (8006bfc <HAL_DMA_Init+0x678>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d04a      	beq.n	8006bac <HAL_DMA_Init+0x628>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a39      	ldr	r2, [pc, #228]	; (8006c00 <HAL_DMA_Init+0x67c>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d045      	beq.n	8006bac <HAL_DMA_Init+0x628>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a37      	ldr	r2, [pc, #220]	; (8006c04 <HAL_DMA_Init+0x680>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d040      	beq.n	8006bac <HAL_DMA_Init+0x628>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a36      	ldr	r2, [pc, #216]	; (8006c08 <HAL_DMA_Init+0x684>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d03b      	beq.n	8006bac <HAL_DMA_Init+0x628>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a34      	ldr	r2, [pc, #208]	; (8006c0c <HAL_DMA_Init+0x688>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d036      	beq.n	8006bac <HAL_DMA_Init+0x628>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a33      	ldr	r2, [pc, #204]	; (8006c10 <HAL_DMA_Init+0x68c>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d031      	beq.n	8006bac <HAL_DMA_Init+0x628>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a31      	ldr	r2, [pc, #196]	; (8006c14 <HAL_DMA_Init+0x690>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d02c      	beq.n	8006bac <HAL_DMA_Init+0x628>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a30      	ldr	r2, [pc, #192]	; (8006c18 <HAL_DMA_Init+0x694>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d027      	beq.n	8006bac <HAL_DMA_Init+0x628>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a13      	ldr	r2, [pc, #76]	; (8006bb0 <HAL_DMA_Init+0x62c>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d022      	beq.n	8006bac <HAL_DMA_Init+0x628>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a12      	ldr	r2, [pc, #72]	; (8006bb4 <HAL_DMA_Init+0x630>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d01d      	beq.n	8006bac <HAL_DMA_Init+0x628>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a10      	ldr	r2, [pc, #64]	; (8006bb8 <HAL_DMA_Init+0x634>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d018      	beq.n	8006bac <HAL_DMA_Init+0x628>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a0f      	ldr	r2, [pc, #60]	; (8006bbc <HAL_DMA_Init+0x638>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d013      	beq.n	8006bac <HAL_DMA_Init+0x628>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a0d      	ldr	r2, [pc, #52]	; (8006bc0 <HAL_DMA_Init+0x63c>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d00e      	beq.n	8006bac <HAL_DMA_Init+0x628>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a0c      	ldr	r2, [pc, #48]	; (8006bc4 <HAL_DMA_Init+0x640>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d009      	beq.n	8006bac <HAL_DMA_Init+0x628>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a0a      	ldr	r2, [pc, #40]	; (8006bc8 <HAL_DMA_Init+0x644>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d004      	beq.n	8006bac <HAL_DMA_Init+0x628>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a09      	ldr	r2, [pc, #36]	; (8006bcc <HAL_DMA_Init+0x648>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d137      	bne.n	8006c1c <HAL_DMA_Init+0x698>
 8006bac:	2301      	movs	r3, #1
 8006bae:	e036      	b.n	8006c1e <HAL_DMA_Init+0x69a>
 8006bb0:	58025408 	.word	0x58025408
 8006bb4:	5802541c 	.word	0x5802541c
 8006bb8:	58025430 	.word	0x58025430
 8006bbc:	58025444 	.word	0x58025444
 8006bc0:	58025458 	.word	0x58025458
 8006bc4:	5802546c 	.word	0x5802546c
 8006bc8:	58025480 	.word	0x58025480
 8006bcc:	58025494 	.word	0x58025494
 8006bd0:	fffe000f 	.word	0xfffe000f
 8006bd4:	a7fdabf8 	.word	0xa7fdabf8
 8006bd8:	cccccccd 	.word	0xcccccccd
 8006bdc:	40020010 	.word	0x40020010
 8006be0:	40020028 	.word	0x40020028
 8006be4:	40020040 	.word	0x40020040
 8006be8:	40020058 	.word	0x40020058
 8006bec:	40020070 	.word	0x40020070
 8006bf0:	40020088 	.word	0x40020088
 8006bf4:	400200a0 	.word	0x400200a0
 8006bf8:	400200b8 	.word	0x400200b8
 8006bfc:	40020410 	.word	0x40020410
 8006c00:	40020428 	.word	0x40020428
 8006c04:	40020440 	.word	0x40020440
 8006c08:	40020458 	.word	0x40020458
 8006c0c:	40020470 	.word	0x40020470
 8006c10:	40020488 	.word	0x40020488
 8006c14:	400204a0 	.word	0x400204a0
 8006c18:	400204b8 	.word	0x400204b8
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d032      	beq.n	8006c88 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f002 fa8a 	bl	800913c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	2b80      	cmp	r3, #128	; 0x80
 8006c2e:	d102      	bne.n	8006c36 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	685a      	ldr	r2, [r3, #4]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c3e:	b2d2      	uxtb	r2, r2
 8006c40:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006c4a:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d010      	beq.n	8006c76 <HAL_DMA_Init+0x6f2>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	2b08      	cmp	r3, #8
 8006c5a:	d80c      	bhi.n	8006c76 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f002 fb07 	bl	8009270 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c66:	2200      	movs	r2, #0
 8006c68:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006c72:	605a      	str	r2, [r3, #4]
 8006c74:	e008      	b.n	8006c88 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2201      	movs	r2, #1
 8006c92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3718      	adds	r7, #24
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b086      	sub	sp, #24
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	607a      	str	r2, [r7, #4]
 8006cac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d101      	bne.n	8006cbc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	e226      	b.n	800710a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d101      	bne.n	8006cca <HAL_DMA_Start_IT+0x2a>
 8006cc6:	2302      	movs	r3, #2
 8006cc8:	e21f      	b.n	800710a <HAL_DMA_Start_IT+0x46a>
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	f040 820a 	bne.w	80070f4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2202      	movs	r2, #2
 8006ce4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2200      	movs	r2, #0
 8006cec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a68      	ldr	r2, [pc, #416]	; (8006e94 <HAL_DMA_Start_IT+0x1f4>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d04a      	beq.n	8006d8e <HAL_DMA_Start_IT+0xee>
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a66      	ldr	r2, [pc, #408]	; (8006e98 <HAL_DMA_Start_IT+0x1f8>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d045      	beq.n	8006d8e <HAL_DMA_Start_IT+0xee>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a65      	ldr	r2, [pc, #404]	; (8006e9c <HAL_DMA_Start_IT+0x1fc>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d040      	beq.n	8006d8e <HAL_DMA_Start_IT+0xee>
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a63      	ldr	r2, [pc, #396]	; (8006ea0 <HAL_DMA_Start_IT+0x200>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d03b      	beq.n	8006d8e <HAL_DMA_Start_IT+0xee>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a62      	ldr	r2, [pc, #392]	; (8006ea4 <HAL_DMA_Start_IT+0x204>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d036      	beq.n	8006d8e <HAL_DMA_Start_IT+0xee>
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a60      	ldr	r2, [pc, #384]	; (8006ea8 <HAL_DMA_Start_IT+0x208>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d031      	beq.n	8006d8e <HAL_DMA_Start_IT+0xee>
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a5f      	ldr	r2, [pc, #380]	; (8006eac <HAL_DMA_Start_IT+0x20c>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d02c      	beq.n	8006d8e <HAL_DMA_Start_IT+0xee>
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a5d      	ldr	r2, [pc, #372]	; (8006eb0 <HAL_DMA_Start_IT+0x210>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d027      	beq.n	8006d8e <HAL_DMA_Start_IT+0xee>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a5c      	ldr	r2, [pc, #368]	; (8006eb4 <HAL_DMA_Start_IT+0x214>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d022      	beq.n	8006d8e <HAL_DMA_Start_IT+0xee>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a5a      	ldr	r2, [pc, #360]	; (8006eb8 <HAL_DMA_Start_IT+0x218>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d01d      	beq.n	8006d8e <HAL_DMA_Start_IT+0xee>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a59      	ldr	r2, [pc, #356]	; (8006ebc <HAL_DMA_Start_IT+0x21c>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d018      	beq.n	8006d8e <HAL_DMA_Start_IT+0xee>
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a57      	ldr	r2, [pc, #348]	; (8006ec0 <HAL_DMA_Start_IT+0x220>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d013      	beq.n	8006d8e <HAL_DMA_Start_IT+0xee>
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a56      	ldr	r2, [pc, #344]	; (8006ec4 <HAL_DMA_Start_IT+0x224>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d00e      	beq.n	8006d8e <HAL_DMA_Start_IT+0xee>
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a54      	ldr	r2, [pc, #336]	; (8006ec8 <HAL_DMA_Start_IT+0x228>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d009      	beq.n	8006d8e <HAL_DMA_Start_IT+0xee>
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a53      	ldr	r2, [pc, #332]	; (8006ecc <HAL_DMA_Start_IT+0x22c>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d004      	beq.n	8006d8e <HAL_DMA_Start_IT+0xee>
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a51      	ldr	r2, [pc, #324]	; (8006ed0 <HAL_DMA_Start_IT+0x230>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d108      	bne.n	8006da0 <HAL_DMA_Start_IT+0x100>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f022 0201 	bic.w	r2, r2, #1
 8006d9c:	601a      	str	r2, [r3, #0]
 8006d9e:	e007      	b.n	8006db0 <HAL_DMA_Start_IT+0x110>
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f022 0201 	bic.w	r2, r2, #1
 8006dae:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	68b9      	ldr	r1, [r7, #8]
 8006db6:	68f8      	ldr	r0, [r7, #12]
 8006db8:	f001 feae 	bl	8008b18 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a34      	ldr	r2, [pc, #208]	; (8006e94 <HAL_DMA_Start_IT+0x1f4>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d04a      	beq.n	8006e5c <HAL_DMA_Start_IT+0x1bc>
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a33      	ldr	r2, [pc, #204]	; (8006e98 <HAL_DMA_Start_IT+0x1f8>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d045      	beq.n	8006e5c <HAL_DMA_Start_IT+0x1bc>
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a31      	ldr	r2, [pc, #196]	; (8006e9c <HAL_DMA_Start_IT+0x1fc>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d040      	beq.n	8006e5c <HAL_DMA_Start_IT+0x1bc>
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a30      	ldr	r2, [pc, #192]	; (8006ea0 <HAL_DMA_Start_IT+0x200>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d03b      	beq.n	8006e5c <HAL_DMA_Start_IT+0x1bc>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a2e      	ldr	r2, [pc, #184]	; (8006ea4 <HAL_DMA_Start_IT+0x204>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d036      	beq.n	8006e5c <HAL_DMA_Start_IT+0x1bc>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a2d      	ldr	r2, [pc, #180]	; (8006ea8 <HAL_DMA_Start_IT+0x208>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d031      	beq.n	8006e5c <HAL_DMA_Start_IT+0x1bc>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a2b      	ldr	r2, [pc, #172]	; (8006eac <HAL_DMA_Start_IT+0x20c>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d02c      	beq.n	8006e5c <HAL_DMA_Start_IT+0x1bc>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a2a      	ldr	r2, [pc, #168]	; (8006eb0 <HAL_DMA_Start_IT+0x210>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d027      	beq.n	8006e5c <HAL_DMA_Start_IT+0x1bc>
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a28      	ldr	r2, [pc, #160]	; (8006eb4 <HAL_DMA_Start_IT+0x214>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d022      	beq.n	8006e5c <HAL_DMA_Start_IT+0x1bc>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a27      	ldr	r2, [pc, #156]	; (8006eb8 <HAL_DMA_Start_IT+0x218>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d01d      	beq.n	8006e5c <HAL_DMA_Start_IT+0x1bc>
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a25      	ldr	r2, [pc, #148]	; (8006ebc <HAL_DMA_Start_IT+0x21c>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d018      	beq.n	8006e5c <HAL_DMA_Start_IT+0x1bc>
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a24      	ldr	r2, [pc, #144]	; (8006ec0 <HAL_DMA_Start_IT+0x220>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d013      	beq.n	8006e5c <HAL_DMA_Start_IT+0x1bc>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a22      	ldr	r2, [pc, #136]	; (8006ec4 <HAL_DMA_Start_IT+0x224>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d00e      	beq.n	8006e5c <HAL_DMA_Start_IT+0x1bc>
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a21      	ldr	r2, [pc, #132]	; (8006ec8 <HAL_DMA_Start_IT+0x228>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d009      	beq.n	8006e5c <HAL_DMA_Start_IT+0x1bc>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a1f      	ldr	r2, [pc, #124]	; (8006ecc <HAL_DMA_Start_IT+0x22c>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d004      	beq.n	8006e5c <HAL_DMA_Start_IT+0x1bc>
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a1e      	ldr	r2, [pc, #120]	; (8006ed0 <HAL_DMA_Start_IT+0x230>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d101      	bne.n	8006e60 <HAL_DMA_Start_IT+0x1c0>
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e000      	b.n	8006e62 <HAL_DMA_Start_IT+0x1c2>
 8006e60:	2300      	movs	r3, #0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d036      	beq.n	8006ed4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f023 021e 	bic.w	r2, r3, #30
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f042 0216 	orr.w	r2, r2, #22
 8006e78:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d03e      	beq.n	8006f00 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f042 0208 	orr.w	r2, r2, #8
 8006e90:	601a      	str	r2, [r3, #0]
 8006e92:	e035      	b.n	8006f00 <HAL_DMA_Start_IT+0x260>
 8006e94:	40020010 	.word	0x40020010
 8006e98:	40020028 	.word	0x40020028
 8006e9c:	40020040 	.word	0x40020040
 8006ea0:	40020058 	.word	0x40020058
 8006ea4:	40020070 	.word	0x40020070
 8006ea8:	40020088 	.word	0x40020088
 8006eac:	400200a0 	.word	0x400200a0
 8006eb0:	400200b8 	.word	0x400200b8
 8006eb4:	40020410 	.word	0x40020410
 8006eb8:	40020428 	.word	0x40020428
 8006ebc:	40020440 	.word	0x40020440
 8006ec0:	40020458 	.word	0x40020458
 8006ec4:	40020470 	.word	0x40020470
 8006ec8:	40020488 	.word	0x40020488
 8006ecc:	400204a0 	.word	0x400204a0
 8006ed0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f023 020e 	bic.w	r2, r3, #14
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f042 020a 	orr.w	r2, r2, #10
 8006ee6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d007      	beq.n	8006f00 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f042 0204 	orr.w	r2, r2, #4
 8006efe:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a83      	ldr	r2, [pc, #524]	; (8007114 <HAL_DMA_Start_IT+0x474>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d072      	beq.n	8006ff0 <HAL_DMA_Start_IT+0x350>
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a82      	ldr	r2, [pc, #520]	; (8007118 <HAL_DMA_Start_IT+0x478>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d06d      	beq.n	8006ff0 <HAL_DMA_Start_IT+0x350>
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a80      	ldr	r2, [pc, #512]	; (800711c <HAL_DMA_Start_IT+0x47c>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d068      	beq.n	8006ff0 <HAL_DMA_Start_IT+0x350>
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a7f      	ldr	r2, [pc, #508]	; (8007120 <HAL_DMA_Start_IT+0x480>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d063      	beq.n	8006ff0 <HAL_DMA_Start_IT+0x350>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a7d      	ldr	r2, [pc, #500]	; (8007124 <HAL_DMA_Start_IT+0x484>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d05e      	beq.n	8006ff0 <HAL_DMA_Start_IT+0x350>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a7c      	ldr	r2, [pc, #496]	; (8007128 <HAL_DMA_Start_IT+0x488>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d059      	beq.n	8006ff0 <HAL_DMA_Start_IT+0x350>
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a7a      	ldr	r2, [pc, #488]	; (800712c <HAL_DMA_Start_IT+0x48c>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d054      	beq.n	8006ff0 <HAL_DMA_Start_IT+0x350>
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a79      	ldr	r2, [pc, #484]	; (8007130 <HAL_DMA_Start_IT+0x490>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d04f      	beq.n	8006ff0 <HAL_DMA_Start_IT+0x350>
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a77      	ldr	r2, [pc, #476]	; (8007134 <HAL_DMA_Start_IT+0x494>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d04a      	beq.n	8006ff0 <HAL_DMA_Start_IT+0x350>
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a76      	ldr	r2, [pc, #472]	; (8007138 <HAL_DMA_Start_IT+0x498>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d045      	beq.n	8006ff0 <HAL_DMA_Start_IT+0x350>
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a74      	ldr	r2, [pc, #464]	; (800713c <HAL_DMA_Start_IT+0x49c>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d040      	beq.n	8006ff0 <HAL_DMA_Start_IT+0x350>
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a73      	ldr	r2, [pc, #460]	; (8007140 <HAL_DMA_Start_IT+0x4a0>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d03b      	beq.n	8006ff0 <HAL_DMA_Start_IT+0x350>
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a71      	ldr	r2, [pc, #452]	; (8007144 <HAL_DMA_Start_IT+0x4a4>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d036      	beq.n	8006ff0 <HAL_DMA_Start_IT+0x350>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a70      	ldr	r2, [pc, #448]	; (8007148 <HAL_DMA_Start_IT+0x4a8>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d031      	beq.n	8006ff0 <HAL_DMA_Start_IT+0x350>
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a6e      	ldr	r2, [pc, #440]	; (800714c <HAL_DMA_Start_IT+0x4ac>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d02c      	beq.n	8006ff0 <HAL_DMA_Start_IT+0x350>
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a6d      	ldr	r2, [pc, #436]	; (8007150 <HAL_DMA_Start_IT+0x4b0>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d027      	beq.n	8006ff0 <HAL_DMA_Start_IT+0x350>
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a6b      	ldr	r2, [pc, #428]	; (8007154 <HAL_DMA_Start_IT+0x4b4>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d022      	beq.n	8006ff0 <HAL_DMA_Start_IT+0x350>
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a6a      	ldr	r2, [pc, #424]	; (8007158 <HAL_DMA_Start_IT+0x4b8>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d01d      	beq.n	8006ff0 <HAL_DMA_Start_IT+0x350>
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a68      	ldr	r2, [pc, #416]	; (800715c <HAL_DMA_Start_IT+0x4bc>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d018      	beq.n	8006ff0 <HAL_DMA_Start_IT+0x350>
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a67      	ldr	r2, [pc, #412]	; (8007160 <HAL_DMA_Start_IT+0x4c0>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d013      	beq.n	8006ff0 <HAL_DMA_Start_IT+0x350>
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a65      	ldr	r2, [pc, #404]	; (8007164 <HAL_DMA_Start_IT+0x4c4>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d00e      	beq.n	8006ff0 <HAL_DMA_Start_IT+0x350>
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a64      	ldr	r2, [pc, #400]	; (8007168 <HAL_DMA_Start_IT+0x4c8>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d009      	beq.n	8006ff0 <HAL_DMA_Start_IT+0x350>
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a62      	ldr	r2, [pc, #392]	; (800716c <HAL_DMA_Start_IT+0x4cc>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d004      	beq.n	8006ff0 <HAL_DMA_Start_IT+0x350>
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a61      	ldr	r2, [pc, #388]	; (8007170 <HAL_DMA_Start_IT+0x4d0>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d101      	bne.n	8006ff4 <HAL_DMA_Start_IT+0x354>
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e000      	b.n	8006ff6 <HAL_DMA_Start_IT+0x356>
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d01a      	beq.n	8007030 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d007      	beq.n	8007018 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007012:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007016:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800701c:	2b00      	cmp	r3, #0
 800701e:	d007      	beq.n	8007030 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800702a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800702e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a37      	ldr	r2, [pc, #220]	; (8007114 <HAL_DMA_Start_IT+0x474>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d04a      	beq.n	80070d0 <HAL_DMA_Start_IT+0x430>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a36      	ldr	r2, [pc, #216]	; (8007118 <HAL_DMA_Start_IT+0x478>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d045      	beq.n	80070d0 <HAL_DMA_Start_IT+0x430>
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a34      	ldr	r2, [pc, #208]	; (800711c <HAL_DMA_Start_IT+0x47c>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d040      	beq.n	80070d0 <HAL_DMA_Start_IT+0x430>
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a33      	ldr	r2, [pc, #204]	; (8007120 <HAL_DMA_Start_IT+0x480>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d03b      	beq.n	80070d0 <HAL_DMA_Start_IT+0x430>
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a31      	ldr	r2, [pc, #196]	; (8007124 <HAL_DMA_Start_IT+0x484>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d036      	beq.n	80070d0 <HAL_DMA_Start_IT+0x430>
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a30      	ldr	r2, [pc, #192]	; (8007128 <HAL_DMA_Start_IT+0x488>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d031      	beq.n	80070d0 <HAL_DMA_Start_IT+0x430>
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a2e      	ldr	r2, [pc, #184]	; (800712c <HAL_DMA_Start_IT+0x48c>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d02c      	beq.n	80070d0 <HAL_DMA_Start_IT+0x430>
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a2d      	ldr	r2, [pc, #180]	; (8007130 <HAL_DMA_Start_IT+0x490>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d027      	beq.n	80070d0 <HAL_DMA_Start_IT+0x430>
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a2b      	ldr	r2, [pc, #172]	; (8007134 <HAL_DMA_Start_IT+0x494>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d022      	beq.n	80070d0 <HAL_DMA_Start_IT+0x430>
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a2a      	ldr	r2, [pc, #168]	; (8007138 <HAL_DMA_Start_IT+0x498>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d01d      	beq.n	80070d0 <HAL_DMA_Start_IT+0x430>
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a28      	ldr	r2, [pc, #160]	; (800713c <HAL_DMA_Start_IT+0x49c>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d018      	beq.n	80070d0 <HAL_DMA_Start_IT+0x430>
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a27      	ldr	r2, [pc, #156]	; (8007140 <HAL_DMA_Start_IT+0x4a0>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d013      	beq.n	80070d0 <HAL_DMA_Start_IT+0x430>
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a25      	ldr	r2, [pc, #148]	; (8007144 <HAL_DMA_Start_IT+0x4a4>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d00e      	beq.n	80070d0 <HAL_DMA_Start_IT+0x430>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a24      	ldr	r2, [pc, #144]	; (8007148 <HAL_DMA_Start_IT+0x4a8>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d009      	beq.n	80070d0 <HAL_DMA_Start_IT+0x430>
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a22      	ldr	r2, [pc, #136]	; (800714c <HAL_DMA_Start_IT+0x4ac>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d004      	beq.n	80070d0 <HAL_DMA_Start_IT+0x430>
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a21      	ldr	r2, [pc, #132]	; (8007150 <HAL_DMA_Start_IT+0x4b0>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d108      	bne.n	80070e2 <HAL_DMA_Start_IT+0x442>
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f042 0201 	orr.w	r2, r2, #1
 80070de:	601a      	str	r2, [r3, #0]
 80070e0:	e012      	b.n	8007108 <HAL_DMA_Start_IT+0x468>
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f042 0201 	orr.w	r2, r2, #1
 80070f0:	601a      	str	r2, [r3, #0]
 80070f2:	e009      	b.n	8007108 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070fa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2200      	movs	r2, #0
 8007100:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007108:	7dfb      	ldrb	r3, [r7, #23]
}
 800710a:	4618      	mov	r0, r3
 800710c:	3718      	adds	r7, #24
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
 8007112:	bf00      	nop
 8007114:	40020010 	.word	0x40020010
 8007118:	40020028 	.word	0x40020028
 800711c:	40020040 	.word	0x40020040
 8007120:	40020058 	.word	0x40020058
 8007124:	40020070 	.word	0x40020070
 8007128:	40020088 	.word	0x40020088
 800712c:	400200a0 	.word	0x400200a0
 8007130:	400200b8 	.word	0x400200b8
 8007134:	40020410 	.word	0x40020410
 8007138:	40020428 	.word	0x40020428
 800713c:	40020440 	.word	0x40020440
 8007140:	40020458 	.word	0x40020458
 8007144:	40020470 	.word	0x40020470
 8007148:	40020488 	.word	0x40020488
 800714c:	400204a0 	.word	0x400204a0
 8007150:	400204b8 	.word	0x400204b8
 8007154:	58025408 	.word	0x58025408
 8007158:	5802541c 	.word	0x5802541c
 800715c:	58025430 	.word	0x58025430
 8007160:	58025444 	.word	0x58025444
 8007164:	58025458 	.word	0x58025458
 8007168:	5802546c 	.word	0x5802546c
 800716c:	58025480 	.word	0x58025480
 8007170:	58025494 	.word	0x58025494

08007174 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b086      	sub	sp, #24
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800717c:	f7fc ffba 	bl	80040f4 <HAL_GetTick>
 8007180:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d101      	bne.n	800718c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e2dc      	b.n	8007746 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007192:	b2db      	uxtb	r3, r3
 8007194:	2b02      	cmp	r3, #2
 8007196:	d008      	beq.n	80071aa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2280      	movs	r2, #128	; 0x80
 800719c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	e2cd      	b.n	8007746 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a76      	ldr	r2, [pc, #472]	; (8007388 <HAL_DMA_Abort+0x214>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d04a      	beq.n	800724a <HAL_DMA_Abort+0xd6>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a74      	ldr	r2, [pc, #464]	; (800738c <HAL_DMA_Abort+0x218>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d045      	beq.n	800724a <HAL_DMA_Abort+0xd6>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a73      	ldr	r2, [pc, #460]	; (8007390 <HAL_DMA_Abort+0x21c>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d040      	beq.n	800724a <HAL_DMA_Abort+0xd6>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a71      	ldr	r2, [pc, #452]	; (8007394 <HAL_DMA_Abort+0x220>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d03b      	beq.n	800724a <HAL_DMA_Abort+0xd6>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a70      	ldr	r2, [pc, #448]	; (8007398 <HAL_DMA_Abort+0x224>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d036      	beq.n	800724a <HAL_DMA_Abort+0xd6>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a6e      	ldr	r2, [pc, #440]	; (800739c <HAL_DMA_Abort+0x228>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d031      	beq.n	800724a <HAL_DMA_Abort+0xd6>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a6d      	ldr	r2, [pc, #436]	; (80073a0 <HAL_DMA_Abort+0x22c>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d02c      	beq.n	800724a <HAL_DMA_Abort+0xd6>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a6b      	ldr	r2, [pc, #428]	; (80073a4 <HAL_DMA_Abort+0x230>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d027      	beq.n	800724a <HAL_DMA_Abort+0xd6>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a6a      	ldr	r2, [pc, #424]	; (80073a8 <HAL_DMA_Abort+0x234>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d022      	beq.n	800724a <HAL_DMA_Abort+0xd6>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a68      	ldr	r2, [pc, #416]	; (80073ac <HAL_DMA_Abort+0x238>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d01d      	beq.n	800724a <HAL_DMA_Abort+0xd6>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a67      	ldr	r2, [pc, #412]	; (80073b0 <HAL_DMA_Abort+0x23c>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d018      	beq.n	800724a <HAL_DMA_Abort+0xd6>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a65      	ldr	r2, [pc, #404]	; (80073b4 <HAL_DMA_Abort+0x240>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d013      	beq.n	800724a <HAL_DMA_Abort+0xd6>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a64      	ldr	r2, [pc, #400]	; (80073b8 <HAL_DMA_Abort+0x244>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d00e      	beq.n	800724a <HAL_DMA_Abort+0xd6>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a62      	ldr	r2, [pc, #392]	; (80073bc <HAL_DMA_Abort+0x248>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d009      	beq.n	800724a <HAL_DMA_Abort+0xd6>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a61      	ldr	r2, [pc, #388]	; (80073c0 <HAL_DMA_Abort+0x24c>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d004      	beq.n	800724a <HAL_DMA_Abort+0xd6>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a5f      	ldr	r2, [pc, #380]	; (80073c4 <HAL_DMA_Abort+0x250>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d101      	bne.n	800724e <HAL_DMA_Abort+0xda>
 800724a:	2301      	movs	r3, #1
 800724c:	e000      	b.n	8007250 <HAL_DMA_Abort+0xdc>
 800724e:	2300      	movs	r3, #0
 8007250:	2b00      	cmp	r3, #0
 8007252:	d013      	beq.n	800727c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f022 021e 	bic.w	r2, r2, #30
 8007262:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	695a      	ldr	r2, [r3, #20]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007272:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	617b      	str	r3, [r7, #20]
 800727a:	e00a      	b.n	8007292 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f022 020e 	bic.w	r2, r2, #14
 800728a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a3c      	ldr	r2, [pc, #240]	; (8007388 <HAL_DMA_Abort+0x214>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d072      	beq.n	8007382 <HAL_DMA_Abort+0x20e>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a3a      	ldr	r2, [pc, #232]	; (800738c <HAL_DMA_Abort+0x218>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d06d      	beq.n	8007382 <HAL_DMA_Abort+0x20e>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a39      	ldr	r2, [pc, #228]	; (8007390 <HAL_DMA_Abort+0x21c>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d068      	beq.n	8007382 <HAL_DMA_Abort+0x20e>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a37      	ldr	r2, [pc, #220]	; (8007394 <HAL_DMA_Abort+0x220>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d063      	beq.n	8007382 <HAL_DMA_Abort+0x20e>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a36      	ldr	r2, [pc, #216]	; (8007398 <HAL_DMA_Abort+0x224>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d05e      	beq.n	8007382 <HAL_DMA_Abort+0x20e>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a34      	ldr	r2, [pc, #208]	; (800739c <HAL_DMA_Abort+0x228>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d059      	beq.n	8007382 <HAL_DMA_Abort+0x20e>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a33      	ldr	r2, [pc, #204]	; (80073a0 <HAL_DMA_Abort+0x22c>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d054      	beq.n	8007382 <HAL_DMA_Abort+0x20e>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a31      	ldr	r2, [pc, #196]	; (80073a4 <HAL_DMA_Abort+0x230>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d04f      	beq.n	8007382 <HAL_DMA_Abort+0x20e>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a30      	ldr	r2, [pc, #192]	; (80073a8 <HAL_DMA_Abort+0x234>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d04a      	beq.n	8007382 <HAL_DMA_Abort+0x20e>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a2e      	ldr	r2, [pc, #184]	; (80073ac <HAL_DMA_Abort+0x238>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d045      	beq.n	8007382 <HAL_DMA_Abort+0x20e>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a2d      	ldr	r2, [pc, #180]	; (80073b0 <HAL_DMA_Abort+0x23c>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d040      	beq.n	8007382 <HAL_DMA_Abort+0x20e>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a2b      	ldr	r2, [pc, #172]	; (80073b4 <HAL_DMA_Abort+0x240>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d03b      	beq.n	8007382 <HAL_DMA_Abort+0x20e>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a2a      	ldr	r2, [pc, #168]	; (80073b8 <HAL_DMA_Abort+0x244>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d036      	beq.n	8007382 <HAL_DMA_Abort+0x20e>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a28      	ldr	r2, [pc, #160]	; (80073bc <HAL_DMA_Abort+0x248>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d031      	beq.n	8007382 <HAL_DMA_Abort+0x20e>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a27      	ldr	r2, [pc, #156]	; (80073c0 <HAL_DMA_Abort+0x24c>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d02c      	beq.n	8007382 <HAL_DMA_Abort+0x20e>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a25      	ldr	r2, [pc, #148]	; (80073c4 <HAL_DMA_Abort+0x250>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d027      	beq.n	8007382 <HAL_DMA_Abort+0x20e>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a24      	ldr	r2, [pc, #144]	; (80073c8 <HAL_DMA_Abort+0x254>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d022      	beq.n	8007382 <HAL_DMA_Abort+0x20e>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a22      	ldr	r2, [pc, #136]	; (80073cc <HAL_DMA_Abort+0x258>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d01d      	beq.n	8007382 <HAL_DMA_Abort+0x20e>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a21      	ldr	r2, [pc, #132]	; (80073d0 <HAL_DMA_Abort+0x25c>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d018      	beq.n	8007382 <HAL_DMA_Abort+0x20e>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a1f      	ldr	r2, [pc, #124]	; (80073d4 <HAL_DMA_Abort+0x260>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d013      	beq.n	8007382 <HAL_DMA_Abort+0x20e>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a1e      	ldr	r2, [pc, #120]	; (80073d8 <HAL_DMA_Abort+0x264>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d00e      	beq.n	8007382 <HAL_DMA_Abort+0x20e>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a1c      	ldr	r2, [pc, #112]	; (80073dc <HAL_DMA_Abort+0x268>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d009      	beq.n	8007382 <HAL_DMA_Abort+0x20e>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a1b      	ldr	r2, [pc, #108]	; (80073e0 <HAL_DMA_Abort+0x26c>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d004      	beq.n	8007382 <HAL_DMA_Abort+0x20e>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a19      	ldr	r2, [pc, #100]	; (80073e4 <HAL_DMA_Abort+0x270>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d132      	bne.n	80073e8 <HAL_DMA_Abort+0x274>
 8007382:	2301      	movs	r3, #1
 8007384:	e031      	b.n	80073ea <HAL_DMA_Abort+0x276>
 8007386:	bf00      	nop
 8007388:	40020010 	.word	0x40020010
 800738c:	40020028 	.word	0x40020028
 8007390:	40020040 	.word	0x40020040
 8007394:	40020058 	.word	0x40020058
 8007398:	40020070 	.word	0x40020070
 800739c:	40020088 	.word	0x40020088
 80073a0:	400200a0 	.word	0x400200a0
 80073a4:	400200b8 	.word	0x400200b8
 80073a8:	40020410 	.word	0x40020410
 80073ac:	40020428 	.word	0x40020428
 80073b0:	40020440 	.word	0x40020440
 80073b4:	40020458 	.word	0x40020458
 80073b8:	40020470 	.word	0x40020470
 80073bc:	40020488 	.word	0x40020488
 80073c0:	400204a0 	.word	0x400204a0
 80073c4:	400204b8 	.word	0x400204b8
 80073c8:	58025408 	.word	0x58025408
 80073cc:	5802541c 	.word	0x5802541c
 80073d0:	58025430 	.word	0x58025430
 80073d4:	58025444 	.word	0x58025444
 80073d8:	58025458 	.word	0x58025458
 80073dc:	5802546c 	.word	0x5802546c
 80073e0:	58025480 	.word	0x58025480
 80073e4:	58025494 	.word	0x58025494
 80073e8:	2300      	movs	r3, #0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d007      	beq.n	80073fe <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80073fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a6d      	ldr	r2, [pc, #436]	; (80075b8 <HAL_DMA_Abort+0x444>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d04a      	beq.n	800749e <HAL_DMA_Abort+0x32a>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a6b      	ldr	r2, [pc, #428]	; (80075bc <HAL_DMA_Abort+0x448>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d045      	beq.n	800749e <HAL_DMA_Abort+0x32a>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a6a      	ldr	r2, [pc, #424]	; (80075c0 <HAL_DMA_Abort+0x44c>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d040      	beq.n	800749e <HAL_DMA_Abort+0x32a>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a68      	ldr	r2, [pc, #416]	; (80075c4 <HAL_DMA_Abort+0x450>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d03b      	beq.n	800749e <HAL_DMA_Abort+0x32a>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a67      	ldr	r2, [pc, #412]	; (80075c8 <HAL_DMA_Abort+0x454>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d036      	beq.n	800749e <HAL_DMA_Abort+0x32a>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a65      	ldr	r2, [pc, #404]	; (80075cc <HAL_DMA_Abort+0x458>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d031      	beq.n	800749e <HAL_DMA_Abort+0x32a>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a64      	ldr	r2, [pc, #400]	; (80075d0 <HAL_DMA_Abort+0x45c>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d02c      	beq.n	800749e <HAL_DMA_Abort+0x32a>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a62      	ldr	r2, [pc, #392]	; (80075d4 <HAL_DMA_Abort+0x460>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d027      	beq.n	800749e <HAL_DMA_Abort+0x32a>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a61      	ldr	r2, [pc, #388]	; (80075d8 <HAL_DMA_Abort+0x464>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d022      	beq.n	800749e <HAL_DMA_Abort+0x32a>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a5f      	ldr	r2, [pc, #380]	; (80075dc <HAL_DMA_Abort+0x468>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d01d      	beq.n	800749e <HAL_DMA_Abort+0x32a>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a5e      	ldr	r2, [pc, #376]	; (80075e0 <HAL_DMA_Abort+0x46c>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d018      	beq.n	800749e <HAL_DMA_Abort+0x32a>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a5c      	ldr	r2, [pc, #368]	; (80075e4 <HAL_DMA_Abort+0x470>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d013      	beq.n	800749e <HAL_DMA_Abort+0x32a>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a5b      	ldr	r2, [pc, #364]	; (80075e8 <HAL_DMA_Abort+0x474>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d00e      	beq.n	800749e <HAL_DMA_Abort+0x32a>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a59      	ldr	r2, [pc, #356]	; (80075ec <HAL_DMA_Abort+0x478>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d009      	beq.n	800749e <HAL_DMA_Abort+0x32a>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a58      	ldr	r2, [pc, #352]	; (80075f0 <HAL_DMA_Abort+0x47c>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d004      	beq.n	800749e <HAL_DMA_Abort+0x32a>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a56      	ldr	r2, [pc, #344]	; (80075f4 <HAL_DMA_Abort+0x480>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d108      	bne.n	80074b0 <HAL_DMA_Abort+0x33c>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f022 0201 	bic.w	r2, r2, #1
 80074ac:	601a      	str	r2, [r3, #0]
 80074ae:	e007      	b.n	80074c0 <HAL_DMA_Abort+0x34c>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f022 0201 	bic.w	r2, r2, #1
 80074be:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80074c0:	e013      	b.n	80074ea <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80074c2:	f7fc fe17 	bl	80040f4 <HAL_GetTick>
 80074c6:	4602      	mov	r2, r0
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	2b05      	cmp	r3, #5
 80074ce:	d90c      	bls.n	80074ea <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2220      	movs	r2, #32
 80074d4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2203      	movs	r2, #3
 80074da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	e12d      	b.n	8007746 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 0301 	and.w	r3, r3, #1
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d1e5      	bne.n	80074c2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a2f      	ldr	r2, [pc, #188]	; (80075b8 <HAL_DMA_Abort+0x444>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d04a      	beq.n	8007596 <HAL_DMA_Abort+0x422>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a2d      	ldr	r2, [pc, #180]	; (80075bc <HAL_DMA_Abort+0x448>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d045      	beq.n	8007596 <HAL_DMA_Abort+0x422>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a2c      	ldr	r2, [pc, #176]	; (80075c0 <HAL_DMA_Abort+0x44c>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d040      	beq.n	8007596 <HAL_DMA_Abort+0x422>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a2a      	ldr	r2, [pc, #168]	; (80075c4 <HAL_DMA_Abort+0x450>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d03b      	beq.n	8007596 <HAL_DMA_Abort+0x422>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a29      	ldr	r2, [pc, #164]	; (80075c8 <HAL_DMA_Abort+0x454>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d036      	beq.n	8007596 <HAL_DMA_Abort+0x422>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a27      	ldr	r2, [pc, #156]	; (80075cc <HAL_DMA_Abort+0x458>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d031      	beq.n	8007596 <HAL_DMA_Abort+0x422>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a26      	ldr	r2, [pc, #152]	; (80075d0 <HAL_DMA_Abort+0x45c>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d02c      	beq.n	8007596 <HAL_DMA_Abort+0x422>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a24      	ldr	r2, [pc, #144]	; (80075d4 <HAL_DMA_Abort+0x460>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d027      	beq.n	8007596 <HAL_DMA_Abort+0x422>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a23      	ldr	r2, [pc, #140]	; (80075d8 <HAL_DMA_Abort+0x464>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d022      	beq.n	8007596 <HAL_DMA_Abort+0x422>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a21      	ldr	r2, [pc, #132]	; (80075dc <HAL_DMA_Abort+0x468>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d01d      	beq.n	8007596 <HAL_DMA_Abort+0x422>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a20      	ldr	r2, [pc, #128]	; (80075e0 <HAL_DMA_Abort+0x46c>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d018      	beq.n	8007596 <HAL_DMA_Abort+0x422>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a1e      	ldr	r2, [pc, #120]	; (80075e4 <HAL_DMA_Abort+0x470>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d013      	beq.n	8007596 <HAL_DMA_Abort+0x422>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a1d      	ldr	r2, [pc, #116]	; (80075e8 <HAL_DMA_Abort+0x474>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d00e      	beq.n	8007596 <HAL_DMA_Abort+0x422>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a1b      	ldr	r2, [pc, #108]	; (80075ec <HAL_DMA_Abort+0x478>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d009      	beq.n	8007596 <HAL_DMA_Abort+0x422>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a1a      	ldr	r2, [pc, #104]	; (80075f0 <HAL_DMA_Abort+0x47c>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d004      	beq.n	8007596 <HAL_DMA_Abort+0x422>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a18      	ldr	r2, [pc, #96]	; (80075f4 <HAL_DMA_Abort+0x480>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d101      	bne.n	800759a <HAL_DMA_Abort+0x426>
 8007596:	2301      	movs	r3, #1
 8007598:	e000      	b.n	800759c <HAL_DMA_Abort+0x428>
 800759a:	2300      	movs	r3, #0
 800759c:	2b00      	cmp	r3, #0
 800759e:	d02b      	beq.n	80075f8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075a4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075aa:	f003 031f 	and.w	r3, r3, #31
 80075ae:	223f      	movs	r2, #63	; 0x3f
 80075b0:	409a      	lsls	r2, r3
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	609a      	str	r2, [r3, #8]
 80075b6:	e02a      	b.n	800760e <HAL_DMA_Abort+0x49a>
 80075b8:	40020010 	.word	0x40020010
 80075bc:	40020028 	.word	0x40020028
 80075c0:	40020040 	.word	0x40020040
 80075c4:	40020058 	.word	0x40020058
 80075c8:	40020070 	.word	0x40020070
 80075cc:	40020088 	.word	0x40020088
 80075d0:	400200a0 	.word	0x400200a0
 80075d4:	400200b8 	.word	0x400200b8
 80075d8:	40020410 	.word	0x40020410
 80075dc:	40020428 	.word	0x40020428
 80075e0:	40020440 	.word	0x40020440
 80075e4:	40020458 	.word	0x40020458
 80075e8:	40020470 	.word	0x40020470
 80075ec:	40020488 	.word	0x40020488
 80075f0:	400204a0 	.word	0x400204a0
 80075f4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075fc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007602:	f003 031f 	and.w	r3, r3, #31
 8007606:	2201      	movs	r2, #1
 8007608:	409a      	lsls	r2, r3
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a4f      	ldr	r2, [pc, #316]	; (8007750 <HAL_DMA_Abort+0x5dc>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d072      	beq.n	80076fe <HAL_DMA_Abort+0x58a>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a4d      	ldr	r2, [pc, #308]	; (8007754 <HAL_DMA_Abort+0x5e0>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d06d      	beq.n	80076fe <HAL_DMA_Abort+0x58a>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a4c      	ldr	r2, [pc, #304]	; (8007758 <HAL_DMA_Abort+0x5e4>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d068      	beq.n	80076fe <HAL_DMA_Abort+0x58a>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a4a      	ldr	r2, [pc, #296]	; (800775c <HAL_DMA_Abort+0x5e8>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d063      	beq.n	80076fe <HAL_DMA_Abort+0x58a>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a49      	ldr	r2, [pc, #292]	; (8007760 <HAL_DMA_Abort+0x5ec>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d05e      	beq.n	80076fe <HAL_DMA_Abort+0x58a>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a47      	ldr	r2, [pc, #284]	; (8007764 <HAL_DMA_Abort+0x5f0>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d059      	beq.n	80076fe <HAL_DMA_Abort+0x58a>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a46      	ldr	r2, [pc, #280]	; (8007768 <HAL_DMA_Abort+0x5f4>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d054      	beq.n	80076fe <HAL_DMA_Abort+0x58a>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a44      	ldr	r2, [pc, #272]	; (800776c <HAL_DMA_Abort+0x5f8>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d04f      	beq.n	80076fe <HAL_DMA_Abort+0x58a>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a43      	ldr	r2, [pc, #268]	; (8007770 <HAL_DMA_Abort+0x5fc>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d04a      	beq.n	80076fe <HAL_DMA_Abort+0x58a>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a41      	ldr	r2, [pc, #260]	; (8007774 <HAL_DMA_Abort+0x600>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d045      	beq.n	80076fe <HAL_DMA_Abort+0x58a>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a40      	ldr	r2, [pc, #256]	; (8007778 <HAL_DMA_Abort+0x604>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d040      	beq.n	80076fe <HAL_DMA_Abort+0x58a>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a3e      	ldr	r2, [pc, #248]	; (800777c <HAL_DMA_Abort+0x608>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d03b      	beq.n	80076fe <HAL_DMA_Abort+0x58a>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a3d      	ldr	r2, [pc, #244]	; (8007780 <HAL_DMA_Abort+0x60c>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d036      	beq.n	80076fe <HAL_DMA_Abort+0x58a>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a3b      	ldr	r2, [pc, #236]	; (8007784 <HAL_DMA_Abort+0x610>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d031      	beq.n	80076fe <HAL_DMA_Abort+0x58a>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a3a      	ldr	r2, [pc, #232]	; (8007788 <HAL_DMA_Abort+0x614>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d02c      	beq.n	80076fe <HAL_DMA_Abort+0x58a>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a38      	ldr	r2, [pc, #224]	; (800778c <HAL_DMA_Abort+0x618>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d027      	beq.n	80076fe <HAL_DMA_Abort+0x58a>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a37      	ldr	r2, [pc, #220]	; (8007790 <HAL_DMA_Abort+0x61c>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d022      	beq.n	80076fe <HAL_DMA_Abort+0x58a>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a35      	ldr	r2, [pc, #212]	; (8007794 <HAL_DMA_Abort+0x620>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d01d      	beq.n	80076fe <HAL_DMA_Abort+0x58a>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a34      	ldr	r2, [pc, #208]	; (8007798 <HAL_DMA_Abort+0x624>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d018      	beq.n	80076fe <HAL_DMA_Abort+0x58a>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a32      	ldr	r2, [pc, #200]	; (800779c <HAL_DMA_Abort+0x628>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d013      	beq.n	80076fe <HAL_DMA_Abort+0x58a>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a31      	ldr	r2, [pc, #196]	; (80077a0 <HAL_DMA_Abort+0x62c>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d00e      	beq.n	80076fe <HAL_DMA_Abort+0x58a>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a2f      	ldr	r2, [pc, #188]	; (80077a4 <HAL_DMA_Abort+0x630>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d009      	beq.n	80076fe <HAL_DMA_Abort+0x58a>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a2e      	ldr	r2, [pc, #184]	; (80077a8 <HAL_DMA_Abort+0x634>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d004      	beq.n	80076fe <HAL_DMA_Abort+0x58a>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a2c      	ldr	r2, [pc, #176]	; (80077ac <HAL_DMA_Abort+0x638>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d101      	bne.n	8007702 <HAL_DMA_Abort+0x58e>
 80076fe:	2301      	movs	r3, #1
 8007700:	e000      	b.n	8007704 <HAL_DMA_Abort+0x590>
 8007702:	2300      	movs	r3, #0
 8007704:	2b00      	cmp	r3, #0
 8007706:	d015      	beq.n	8007734 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007710:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00c      	beq.n	8007734 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007724:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007728:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007732:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3718      	adds	r7, #24
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
 800774e:	bf00      	nop
 8007750:	40020010 	.word	0x40020010
 8007754:	40020028 	.word	0x40020028
 8007758:	40020040 	.word	0x40020040
 800775c:	40020058 	.word	0x40020058
 8007760:	40020070 	.word	0x40020070
 8007764:	40020088 	.word	0x40020088
 8007768:	400200a0 	.word	0x400200a0
 800776c:	400200b8 	.word	0x400200b8
 8007770:	40020410 	.word	0x40020410
 8007774:	40020428 	.word	0x40020428
 8007778:	40020440 	.word	0x40020440
 800777c:	40020458 	.word	0x40020458
 8007780:	40020470 	.word	0x40020470
 8007784:	40020488 	.word	0x40020488
 8007788:	400204a0 	.word	0x400204a0
 800778c:	400204b8 	.word	0x400204b8
 8007790:	58025408 	.word	0x58025408
 8007794:	5802541c 	.word	0x5802541c
 8007798:	58025430 	.word	0x58025430
 800779c:	58025444 	.word	0x58025444
 80077a0:	58025458 	.word	0x58025458
 80077a4:	5802546c 	.word	0x5802546c
 80077a8:	58025480 	.word	0x58025480
 80077ac:	58025494 	.word	0x58025494

080077b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d101      	bne.n	80077c2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e237      	b.n	8007c32 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	d004      	beq.n	80077d8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2280      	movs	r2, #128	; 0x80
 80077d2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	e22c      	b.n	8007c32 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a5c      	ldr	r2, [pc, #368]	; (8007950 <HAL_DMA_Abort_IT+0x1a0>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d04a      	beq.n	8007878 <HAL_DMA_Abort_IT+0xc8>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a5b      	ldr	r2, [pc, #364]	; (8007954 <HAL_DMA_Abort_IT+0x1a4>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d045      	beq.n	8007878 <HAL_DMA_Abort_IT+0xc8>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a59      	ldr	r2, [pc, #356]	; (8007958 <HAL_DMA_Abort_IT+0x1a8>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d040      	beq.n	8007878 <HAL_DMA_Abort_IT+0xc8>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a58      	ldr	r2, [pc, #352]	; (800795c <HAL_DMA_Abort_IT+0x1ac>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d03b      	beq.n	8007878 <HAL_DMA_Abort_IT+0xc8>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a56      	ldr	r2, [pc, #344]	; (8007960 <HAL_DMA_Abort_IT+0x1b0>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d036      	beq.n	8007878 <HAL_DMA_Abort_IT+0xc8>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a55      	ldr	r2, [pc, #340]	; (8007964 <HAL_DMA_Abort_IT+0x1b4>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d031      	beq.n	8007878 <HAL_DMA_Abort_IT+0xc8>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a53      	ldr	r2, [pc, #332]	; (8007968 <HAL_DMA_Abort_IT+0x1b8>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d02c      	beq.n	8007878 <HAL_DMA_Abort_IT+0xc8>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a52      	ldr	r2, [pc, #328]	; (800796c <HAL_DMA_Abort_IT+0x1bc>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d027      	beq.n	8007878 <HAL_DMA_Abort_IT+0xc8>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a50      	ldr	r2, [pc, #320]	; (8007970 <HAL_DMA_Abort_IT+0x1c0>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d022      	beq.n	8007878 <HAL_DMA_Abort_IT+0xc8>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a4f      	ldr	r2, [pc, #316]	; (8007974 <HAL_DMA_Abort_IT+0x1c4>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d01d      	beq.n	8007878 <HAL_DMA_Abort_IT+0xc8>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a4d      	ldr	r2, [pc, #308]	; (8007978 <HAL_DMA_Abort_IT+0x1c8>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d018      	beq.n	8007878 <HAL_DMA_Abort_IT+0xc8>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a4c      	ldr	r2, [pc, #304]	; (800797c <HAL_DMA_Abort_IT+0x1cc>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d013      	beq.n	8007878 <HAL_DMA_Abort_IT+0xc8>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a4a      	ldr	r2, [pc, #296]	; (8007980 <HAL_DMA_Abort_IT+0x1d0>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d00e      	beq.n	8007878 <HAL_DMA_Abort_IT+0xc8>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a49      	ldr	r2, [pc, #292]	; (8007984 <HAL_DMA_Abort_IT+0x1d4>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d009      	beq.n	8007878 <HAL_DMA_Abort_IT+0xc8>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a47      	ldr	r2, [pc, #284]	; (8007988 <HAL_DMA_Abort_IT+0x1d8>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d004      	beq.n	8007878 <HAL_DMA_Abort_IT+0xc8>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a46      	ldr	r2, [pc, #280]	; (800798c <HAL_DMA_Abort_IT+0x1dc>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d101      	bne.n	800787c <HAL_DMA_Abort_IT+0xcc>
 8007878:	2301      	movs	r3, #1
 800787a:	e000      	b.n	800787e <HAL_DMA_Abort_IT+0xce>
 800787c:	2300      	movs	r3, #0
 800787e:	2b00      	cmp	r3, #0
 8007880:	f000 8086 	beq.w	8007990 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2204      	movs	r2, #4
 8007888:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a2f      	ldr	r2, [pc, #188]	; (8007950 <HAL_DMA_Abort_IT+0x1a0>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d04a      	beq.n	800792c <HAL_DMA_Abort_IT+0x17c>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a2e      	ldr	r2, [pc, #184]	; (8007954 <HAL_DMA_Abort_IT+0x1a4>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d045      	beq.n	800792c <HAL_DMA_Abort_IT+0x17c>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a2c      	ldr	r2, [pc, #176]	; (8007958 <HAL_DMA_Abort_IT+0x1a8>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d040      	beq.n	800792c <HAL_DMA_Abort_IT+0x17c>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a2b      	ldr	r2, [pc, #172]	; (800795c <HAL_DMA_Abort_IT+0x1ac>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d03b      	beq.n	800792c <HAL_DMA_Abort_IT+0x17c>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a29      	ldr	r2, [pc, #164]	; (8007960 <HAL_DMA_Abort_IT+0x1b0>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d036      	beq.n	800792c <HAL_DMA_Abort_IT+0x17c>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a28      	ldr	r2, [pc, #160]	; (8007964 <HAL_DMA_Abort_IT+0x1b4>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d031      	beq.n	800792c <HAL_DMA_Abort_IT+0x17c>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a26      	ldr	r2, [pc, #152]	; (8007968 <HAL_DMA_Abort_IT+0x1b8>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d02c      	beq.n	800792c <HAL_DMA_Abort_IT+0x17c>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a25      	ldr	r2, [pc, #148]	; (800796c <HAL_DMA_Abort_IT+0x1bc>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d027      	beq.n	800792c <HAL_DMA_Abort_IT+0x17c>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a23      	ldr	r2, [pc, #140]	; (8007970 <HAL_DMA_Abort_IT+0x1c0>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d022      	beq.n	800792c <HAL_DMA_Abort_IT+0x17c>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a22      	ldr	r2, [pc, #136]	; (8007974 <HAL_DMA_Abort_IT+0x1c4>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d01d      	beq.n	800792c <HAL_DMA_Abort_IT+0x17c>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a20      	ldr	r2, [pc, #128]	; (8007978 <HAL_DMA_Abort_IT+0x1c8>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d018      	beq.n	800792c <HAL_DMA_Abort_IT+0x17c>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a1f      	ldr	r2, [pc, #124]	; (800797c <HAL_DMA_Abort_IT+0x1cc>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d013      	beq.n	800792c <HAL_DMA_Abort_IT+0x17c>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a1d      	ldr	r2, [pc, #116]	; (8007980 <HAL_DMA_Abort_IT+0x1d0>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d00e      	beq.n	800792c <HAL_DMA_Abort_IT+0x17c>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a1c      	ldr	r2, [pc, #112]	; (8007984 <HAL_DMA_Abort_IT+0x1d4>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d009      	beq.n	800792c <HAL_DMA_Abort_IT+0x17c>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a1a      	ldr	r2, [pc, #104]	; (8007988 <HAL_DMA_Abort_IT+0x1d8>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d004      	beq.n	800792c <HAL_DMA_Abort_IT+0x17c>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a19      	ldr	r2, [pc, #100]	; (800798c <HAL_DMA_Abort_IT+0x1dc>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d108      	bne.n	800793e <HAL_DMA_Abort_IT+0x18e>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f022 0201 	bic.w	r2, r2, #1
 800793a:	601a      	str	r2, [r3, #0]
 800793c:	e178      	b.n	8007c30 <HAL_DMA_Abort_IT+0x480>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f022 0201 	bic.w	r2, r2, #1
 800794c:	601a      	str	r2, [r3, #0]
 800794e:	e16f      	b.n	8007c30 <HAL_DMA_Abort_IT+0x480>
 8007950:	40020010 	.word	0x40020010
 8007954:	40020028 	.word	0x40020028
 8007958:	40020040 	.word	0x40020040
 800795c:	40020058 	.word	0x40020058
 8007960:	40020070 	.word	0x40020070
 8007964:	40020088 	.word	0x40020088
 8007968:	400200a0 	.word	0x400200a0
 800796c:	400200b8 	.word	0x400200b8
 8007970:	40020410 	.word	0x40020410
 8007974:	40020428 	.word	0x40020428
 8007978:	40020440 	.word	0x40020440
 800797c:	40020458 	.word	0x40020458
 8007980:	40020470 	.word	0x40020470
 8007984:	40020488 	.word	0x40020488
 8007988:	400204a0 	.word	0x400204a0
 800798c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f022 020e 	bic.w	r2, r2, #14
 800799e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a6c      	ldr	r2, [pc, #432]	; (8007b58 <HAL_DMA_Abort_IT+0x3a8>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d04a      	beq.n	8007a40 <HAL_DMA_Abort_IT+0x290>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a6b      	ldr	r2, [pc, #428]	; (8007b5c <HAL_DMA_Abort_IT+0x3ac>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d045      	beq.n	8007a40 <HAL_DMA_Abort_IT+0x290>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a69      	ldr	r2, [pc, #420]	; (8007b60 <HAL_DMA_Abort_IT+0x3b0>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d040      	beq.n	8007a40 <HAL_DMA_Abort_IT+0x290>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a68      	ldr	r2, [pc, #416]	; (8007b64 <HAL_DMA_Abort_IT+0x3b4>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d03b      	beq.n	8007a40 <HAL_DMA_Abort_IT+0x290>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a66      	ldr	r2, [pc, #408]	; (8007b68 <HAL_DMA_Abort_IT+0x3b8>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d036      	beq.n	8007a40 <HAL_DMA_Abort_IT+0x290>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a65      	ldr	r2, [pc, #404]	; (8007b6c <HAL_DMA_Abort_IT+0x3bc>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d031      	beq.n	8007a40 <HAL_DMA_Abort_IT+0x290>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a63      	ldr	r2, [pc, #396]	; (8007b70 <HAL_DMA_Abort_IT+0x3c0>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d02c      	beq.n	8007a40 <HAL_DMA_Abort_IT+0x290>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a62      	ldr	r2, [pc, #392]	; (8007b74 <HAL_DMA_Abort_IT+0x3c4>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d027      	beq.n	8007a40 <HAL_DMA_Abort_IT+0x290>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a60      	ldr	r2, [pc, #384]	; (8007b78 <HAL_DMA_Abort_IT+0x3c8>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d022      	beq.n	8007a40 <HAL_DMA_Abort_IT+0x290>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a5f      	ldr	r2, [pc, #380]	; (8007b7c <HAL_DMA_Abort_IT+0x3cc>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d01d      	beq.n	8007a40 <HAL_DMA_Abort_IT+0x290>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a5d      	ldr	r2, [pc, #372]	; (8007b80 <HAL_DMA_Abort_IT+0x3d0>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d018      	beq.n	8007a40 <HAL_DMA_Abort_IT+0x290>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a5c      	ldr	r2, [pc, #368]	; (8007b84 <HAL_DMA_Abort_IT+0x3d4>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d013      	beq.n	8007a40 <HAL_DMA_Abort_IT+0x290>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a5a      	ldr	r2, [pc, #360]	; (8007b88 <HAL_DMA_Abort_IT+0x3d8>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d00e      	beq.n	8007a40 <HAL_DMA_Abort_IT+0x290>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a59      	ldr	r2, [pc, #356]	; (8007b8c <HAL_DMA_Abort_IT+0x3dc>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d009      	beq.n	8007a40 <HAL_DMA_Abort_IT+0x290>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a57      	ldr	r2, [pc, #348]	; (8007b90 <HAL_DMA_Abort_IT+0x3e0>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d004      	beq.n	8007a40 <HAL_DMA_Abort_IT+0x290>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a56      	ldr	r2, [pc, #344]	; (8007b94 <HAL_DMA_Abort_IT+0x3e4>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d108      	bne.n	8007a52 <HAL_DMA_Abort_IT+0x2a2>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f022 0201 	bic.w	r2, r2, #1
 8007a4e:	601a      	str	r2, [r3, #0]
 8007a50:	e007      	b.n	8007a62 <HAL_DMA_Abort_IT+0x2b2>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f022 0201 	bic.w	r2, r2, #1
 8007a60:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a3c      	ldr	r2, [pc, #240]	; (8007b58 <HAL_DMA_Abort_IT+0x3a8>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d072      	beq.n	8007b52 <HAL_DMA_Abort_IT+0x3a2>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a3a      	ldr	r2, [pc, #232]	; (8007b5c <HAL_DMA_Abort_IT+0x3ac>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d06d      	beq.n	8007b52 <HAL_DMA_Abort_IT+0x3a2>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a39      	ldr	r2, [pc, #228]	; (8007b60 <HAL_DMA_Abort_IT+0x3b0>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d068      	beq.n	8007b52 <HAL_DMA_Abort_IT+0x3a2>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a37      	ldr	r2, [pc, #220]	; (8007b64 <HAL_DMA_Abort_IT+0x3b4>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d063      	beq.n	8007b52 <HAL_DMA_Abort_IT+0x3a2>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a36      	ldr	r2, [pc, #216]	; (8007b68 <HAL_DMA_Abort_IT+0x3b8>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d05e      	beq.n	8007b52 <HAL_DMA_Abort_IT+0x3a2>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a34      	ldr	r2, [pc, #208]	; (8007b6c <HAL_DMA_Abort_IT+0x3bc>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d059      	beq.n	8007b52 <HAL_DMA_Abort_IT+0x3a2>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a33      	ldr	r2, [pc, #204]	; (8007b70 <HAL_DMA_Abort_IT+0x3c0>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d054      	beq.n	8007b52 <HAL_DMA_Abort_IT+0x3a2>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a31      	ldr	r2, [pc, #196]	; (8007b74 <HAL_DMA_Abort_IT+0x3c4>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d04f      	beq.n	8007b52 <HAL_DMA_Abort_IT+0x3a2>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a30      	ldr	r2, [pc, #192]	; (8007b78 <HAL_DMA_Abort_IT+0x3c8>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d04a      	beq.n	8007b52 <HAL_DMA_Abort_IT+0x3a2>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a2e      	ldr	r2, [pc, #184]	; (8007b7c <HAL_DMA_Abort_IT+0x3cc>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d045      	beq.n	8007b52 <HAL_DMA_Abort_IT+0x3a2>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a2d      	ldr	r2, [pc, #180]	; (8007b80 <HAL_DMA_Abort_IT+0x3d0>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d040      	beq.n	8007b52 <HAL_DMA_Abort_IT+0x3a2>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a2b      	ldr	r2, [pc, #172]	; (8007b84 <HAL_DMA_Abort_IT+0x3d4>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d03b      	beq.n	8007b52 <HAL_DMA_Abort_IT+0x3a2>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a2a      	ldr	r2, [pc, #168]	; (8007b88 <HAL_DMA_Abort_IT+0x3d8>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d036      	beq.n	8007b52 <HAL_DMA_Abort_IT+0x3a2>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a28      	ldr	r2, [pc, #160]	; (8007b8c <HAL_DMA_Abort_IT+0x3dc>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d031      	beq.n	8007b52 <HAL_DMA_Abort_IT+0x3a2>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a27      	ldr	r2, [pc, #156]	; (8007b90 <HAL_DMA_Abort_IT+0x3e0>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d02c      	beq.n	8007b52 <HAL_DMA_Abort_IT+0x3a2>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a25      	ldr	r2, [pc, #148]	; (8007b94 <HAL_DMA_Abort_IT+0x3e4>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d027      	beq.n	8007b52 <HAL_DMA_Abort_IT+0x3a2>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a24      	ldr	r2, [pc, #144]	; (8007b98 <HAL_DMA_Abort_IT+0x3e8>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d022      	beq.n	8007b52 <HAL_DMA_Abort_IT+0x3a2>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a22      	ldr	r2, [pc, #136]	; (8007b9c <HAL_DMA_Abort_IT+0x3ec>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d01d      	beq.n	8007b52 <HAL_DMA_Abort_IT+0x3a2>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a21      	ldr	r2, [pc, #132]	; (8007ba0 <HAL_DMA_Abort_IT+0x3f0>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d018      	beq.n	8007b52 <HAL_DMA_Abort_IT+0x3a2>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a1f      	ldr	r2, [pc, #124]	; (8007ba4 <HAL_DMA_Abort_IT+0x3f4>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d013      	beq.n	8007b52 <HAL_DMA_Abort_IT+0x3a2>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a1e      	ldr	r2, [pc, #120]	; (8007ba8 <HAL_DMA_Abort_IT+0x3f8>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d00e      	beq.n	8007b52 <HAL_DMA_Abort_IT+0x3a2>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a1c      	ldr	r2, [pc, #112]	; (8007bac <HAL_DMA_Abort_IT+0x3fc>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d009      	beq.n	8007b52 <HAL_DMA_Abort_IT+0x3a2>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a1b      	ldr	r2, [pc, #108]	; (8007bb0 <HAL_DMA_Abort_IT+0x400>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d004      	beq.n	8007b52 <HAL_DMA_Abort_IT+0x3a2>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a19      	ldr	r2, [pc, #100]	; (8007bb4 <HAL_DMA_Abort_IT+0x404>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d132      	bne.n	8007bb8 <HAL_DMA_Abort_IT+0x408>
 8007b52:	2301      	movs	r3, #1
 8007b54:	e031      	b.n	8007bba <HAL_DMA_Abort_IT+0x40a>
 8007b56:	bf00      	nop
 8007b58:	40020010 	.word	0x40020010
 8007b5c:	40020028 	.word	0x40020028
 8007b60:	40020040 	.word	0x40020040
 8007b64:	40020058 	.word	0x40020058
 8007b68:	40020070 	.word	0x40020070
 8007b6c:	40020088 	.word	0x40020088
 8007b70:	400200a0 	.word	0x400200a0
 8007b74:	400200b8 	.word	0x400200b8
 8007b78:	40020410 	.word	0x40020410
 8007b7c:	40020428 	.word	0x40020428
 8007b80:	40020440 	.word	0x40020440
 8007b84:	40020458 	.word	0x40020458
 8007b88:	40020470 	.word	0x40020470
 8007b8c:	40020488 	.word	0x40020488
 8007b90:	400204a0 	.word	0x400204a0
 8007b94:	400204b8 	.word	0x400204b8
 8007b98:	58025408 	.word	0x58025408
 8007b9c:	5802541c 	.word	0x5802541c
 8007ba0:	58025430 	.word	0x58025430
 8007ba4:	58025444 	.word	0x58025444
 8007ba8:	58025458 	.word	0x58025458
 8007bac:	5802546c 	.word	0x5802546c
 8007bb0:	58025480 	.word	0x58025480
 8007bb4:	58025494 	.word	0x58025494
 8007bb8:	2300      	movs	r3, #0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d028      	beq.n	8007c10 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007bcc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bd2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bd8:	f003 031f 	and.w	r3, r3, #31
 8007bdc:	2201      	movs	r2, #1
 8007bde:	409a      	lsls	r2, r3
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007bec:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00c      	beq.n	8007c10 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c04:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007c0e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2201      	movs	r2, #1
 8007c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d003      	beq.n	8007c30 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop

08007c3c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b08a      	sub	sp, #40	; 0x28
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007c44:	2300      	movs	r3, #0
 8007c46:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007c48:	4b67      	ldr	r3, [pc, #412]	; (8007de8 <HAL_DMA_IRQHandler+0x1ac>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a67      	ldr	r2, [pc, #412]	; (8007dec <HAL_DMA_IRQHandler+0x1b0>)
 8007c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c52:	0a9b      	lsrs	r3, r3, #10
 8007c54:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c5a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c60:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007c62:	6a3b      	ldr	r3, [r7, #32]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a5f      	ldr	r2, [pc, #380]	; (8007df0 <HAL_DMA_IRQHandler+0x1b4>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d04a      	beq.n	8007d0e <HAL_DMA_IRQHandler+0xd2>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a5d      	ldr	r2, [pc, #372]	; (8007df4 <HAL_DMA_IRQHandler+0x1b8>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d045      	beq.n	8007d0e <HAL_DMA_IRQHandler+0xd2>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a5c      	ldr	r2, [pc, #368]	; (8007df8 <HAL_DMA_IRQHandler+0x1bc>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d040      	beq.n	8007d0e <HAL_DMA_IRQHandler+0xd2>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a5a      	ldr	r2, [pc, #360]	; (8007dfc <HAL_DMA_IRQHandler+0x1c0>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d03b      	beq.n	8007d0e <HAL_DMA_IRQHandler+0xd2>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a59      	ldr	r2, [pc, #356]	; (8007e00 <HAL_DMA_IRQHandler+0x1c4>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d036      	beq.n	8007d0e <HAL_DMA_IRQHandler+0xd2>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a57      	ldr	r2, [pc, #348]	; (8007e04 <HAL_DMA_IRQHandler+0x1c8>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d031      	beq.n	8007d0e <HAL_DMA_IRQHandler+0xd2>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a56      	ldr	r2, [pc, #344]	; (8007e08 <HAL_DMA_IRQHandler+0x1cc>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d02c      	beq.n	8007d0e <HAL_DMA_IRQHandler+0xd2>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a54      	ldr	r2, [pc, #336]	; (8007e0c <HAL_DMA_IRQHandler+0x1d0>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d027      	beq.n	8007d0e <HAL_DMA_IRQHandler+0xd2>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a53      	ldr	r2, [pc, #332]	; (8007e10 <HAL_DMA_IRQHandler+0x1d4>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d022      	beq.n	8007d0e <HAL_DMA_IRQHandler+0xd2>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a51      	ldr	r2, [pc, #324]	; (8007e14 <HAL_DMA_IRQHandler+0x1d8>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d01d      	beq.n	8007d0e <HAL_DMA_IRQHandler+0xd2>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a50      	ldr	r2, [pc, #320]	; (8007e18 <HAL_DMA_IRQHandler+0x1dc>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d018      	beq.n	8007d0e <HAL_DMA_IRQHandler+0xd2>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a4e      	ldr	r2, [pc, #312]	; (8007e1c <HAL_DMA_IRQHandler+0x1e0>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d013      	beq.n	8007d0e <HAL_DMA_IRQHandler+0xd2>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a4d      	ldr	r2, [pc, #308]	; (8007e20 <HAL_DMA_IRQHandler+0x1e4>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d00e      	beq.n	8007d0e <HAL_DMA_IRQHandler+0xd2>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a4b      	ldr	r2, [pc, #300]	; (8007e24 <HAL_DMA_IRQHandler+0x1e8>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d009      	beq.n	8007d0e <HAL_DMA_IRQHandler+0xd2>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a4a      	ldr	r2, [pc, #296]	; (8007e28 <HAL_DMA_IRQHandler+0x1ec>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d004      	beq.n	8007d0e <HAL_DMA_IRQHandler+0xd2>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a48      	ldr	r2, [pc, #288]	; (8007e2c <HAL_DMA_IRQHandler+0x1f0>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d101      	bne.n	8007d12 <HAL_DMA_IRQHandler+0xd6>
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e000      	b.n	8007d14 <HAL_DMA_IRQHandler+0xd8>
 8007d12:	2300      	movs	r3, #0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	f000 842b 	beq.w	8008570 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d1e:	f003 031f 	and.w	r3, r3, #31
 8007d22:	2208      	movs	r2, #8
 8007d24:	409a      	lsls	r2, r3
 8007d26:	69bb      	ldr	r3, [r7, #24]
 8007d28:	4013      	ands	r3, r2
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	f000 80a2 	beq.w	8007e74 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a2e      	ldr	r2, [pc, #184]	; (8007df0 <HAL_DMA_IRQHandler+0x1b4>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d04a      	beq.n	8007dd0 <HAL_DMA_IRQHandler+0x194>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a2d      	ldr	r2, [pc, #180]	; (8007df4 <HAL_DMA_IRQHandler+0x1b8>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d045      	beq.n	8007dd0 <HAL_DMA_IRQHandler+0x194>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a2b      	ldr	r2, [pc, #172]	; (8007df8 <HAL_DMA_IRQHandler+0x1bc>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d040      	beq.n	8007dd0 <HAL_DMA_IRQHandler+0x194>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a2a      	ldr	r2, [pc, #168]	; (8007dfc <HAL_DMA_IRQHandler+0x1c0>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d03b      	beq.n	8007dd0 <HAL_DMA_IRQHandler+0x194>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a28      	ldr	r2, [pc, #160]	; (8007e00 <HAL_DMA_IRQHandler+0x1c4>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d036      	beq.n	8007dd0 <HAL_DMA_IRQHandler+0x194>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a27      	ldr	r2, [pc, #156]	; (8007e04 <HAL_DMA_IRQHandler+0x1c8>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d031      	beq.n	8007dd0 <HAL_DMA_IRQHandler+0x194>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a25      	ldr	r2, [pc, #148]	; (8007e08 <HAL_DMA_IRQHandler+0x1cc>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d02c      	beq.n	8007dd0 <HAL_DMA_IRQHandler+0x194>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a24      	ldr	r2, [pc, #144]	; (8007e0c <HAL_DMA_IRQHandler+0x1d0>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d027      	beq.n	8007dd0 <HAL_DMA_IRQHandler+0x194>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a22      	ldr	r2, [pc, #136]	; (8007e10 <HAL_DMA_IRQHandler+0x1d4>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d022      	beq.n	8007dd0 <HAL_DMA_IRQHandler+0x194>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a21      	ldr	r2, [pc, #132]	; (8007e14 <HAL_DMA_IRQHandler+0x1d8>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d01d      	beq.n	8007dd0 <HAL_DMA_IRQHandler+0x194>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a1f      	ldr	r2, [pc, #124]	; (8007e18 <HAL_DMA_IRQHandler+0x1dc>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d018      	beq.n	8007dd0 <HAL_DMA_IRQHandler+0x194>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a1e      	ldr	r2, [pc, #120]	; (8007e1c <HAL_DMA_IRQHandler+0x1e0>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d013      	beq.n	8007dd0 <HAL_DMA_IRQHandler+0x194>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a1c      	ldr	r2, [pc, #112]	; (8007e20 <HAL_DMA_IRQHandler+0x1e4>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d00e      	beq.n	8007dd0 <HAL_DMA_IRQHandler+0x194>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a1b      	ldr	r2, [pc, #108]	; (8007e24 <HAL_DMA_IRQHandler+0x1e8>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d009      	beq.n	8007dd0 <HAL_DMA_IRQHandler+0x194>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a19      	ldr	r2, [pc, #100]	; (8007e28 <HAL_DMA_IRQHandler+0x1ec>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d004      	beq.n	8007dd0 <HAL_DMA_IRQHandler+0x194>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a18      	ldr	r2, [pc, #96]	; (8007e2c <HAL_DMA_IRQHandler+0x1f0>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d12f      	bne.n	8007e30 <HAL_DMA_IRQHandler+0x1f4>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f003 0304 	and.w	r3, r3, #4
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	bf14      	ite	ne
 8007dde:	2301      	movne	r3, #1
 8007de0:	2300      	moveq	r3, #0
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	e02e      	b.n	8007e44 <HAL_DMA_IRQHandler+0x208>
 8007de6:	bf00      	nop
 8007de8:	20000044 	.word	0x20000044
 8007dec:	1b4e81b5 	.word	0x1b4e81b5
 8007df0:	40020010 	.word	0x40020010
 8007df4:	40020028 	.word	0x40020028
 8007df8:	40020040 	.word	0x40020040
 8007dfc:	40020058 	.word	0x40020058
 8007e00:	40020070 	.word	0x40020070
 8007e04:	40020088 	.word	0x40020088
 8007e08:	400200a0 	.word	0x400200a0
 8007e0c:	400200b8 	.word	0x400200b8
 8007e10:	40020410 	.word	0x40020410
 8007e14:	40020428 	.word	0x40020428
 8007e18:	40020440 	.word	0x40020440
 8007e1c:	40020458 	.word	0x40020458
 8007e20:	40020470 	.word	0x40020470
 8007e24:	40020488 	.word	0x40020488
 8007e28:	400204a0 	.word	0x400204a0
 8007e2c:	400204b8 	.word	0x400204b8
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 0308 	and.w	r3, r3, #8
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	bf14      	ite	ne
 8007e3e:	2301      	movne	r3, #1
 8007e40:	2300      	moveq	r3, #0
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d015      	beq.n	8007e74 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f022 0204 	bic.w	r2, r2, #4
 8007e56:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e5c:	f003 031f 	and.w	r3, r3, #31
 8007e60:	2208      	movs	r2, #8
 8007e62:	409a      	lsls	r2, r3
 8007e64:	6a3b      	ldr	r3, [r7, #32]
 8007e66:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e6c:	f043 0201 	orr.w	r2, r3, #1
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e78:	f003 031f 	and.w	r3, r3, #31
 8007e7c:	69ba      	ldr	r2, [r7, #24]
 8007e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e82:	f003 0301 	and.w	r3, r3, #1
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d06e      	beq.n	8007f68 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a69      	ldr	r2, [pc, #420]	; (8008034 <HAL_DMA_IRQHandler+0x3f8>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d04a      	beq.n	8007f2a <HAL_DMA_IRQHandler+0x2ee>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a67      	ldr	r2, [pc, #412]	; (8008038 <HAL_DMA_IRQHandler+0x3fc>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d045      	beq.n	8007f2a <HAL_DMA_IRQHandler+0x2ee>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a66      	ldr	r2, [pc, #408]	; (800803c <HAL_DMA_IRQHandler+0x400>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d040      	beq.n	8007f2a <HAL_DMA_IRQHandler+0x2ee>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a64      	ldr	r2, [pc, #400]	; (8008040 <HAL_DMA_IRQHandler+0x404>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d03b      	beq.n	8007f2a <HAL_DMA_IRQHandler+0x2ee>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a63      	ldr	r2, [pc, #396]	; (8008044 <HAL_DMA_IRQHandler+0x408>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d036      	beq.n	8007f2a <HAL_DMA_IRQHandler+0x2ee>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a61      	ldr	r2, [pc, #388]	; (8008048 <HAL_DMA_IRQHandler+0x40c>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d031      	beq.n	8007f2a <HAL_DMA_IRQHandler+0x2ee>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a60      	ldr	r2, [pc, #384]	; (800804c <HAL_DMA_IRQHandler+0x410>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d02c      	beq.n	8007f2a <HAL_DMA_IRQHandler+0x2ee>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a5e      	ldr	r2, [pc, #376]	; (8008050 <HAL_DMA_IRQHandler+0x414>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d027      	beq.n	8007f2a <HAL_DMA_IRQHandler+0x2ee>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a5d      	ldr	r2, [pc, #372]	; (8008054 <HAL_DMA_IRQHandler+0x418>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d022      	beq.n	8007f2a <HAL_DMA_IRQHandler+0x2ee>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a5b      	ldr	r2, [pc, #364]	; (8008058 <HAL_DMA_IRQHandler+0x41c>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d01d      	beq.n	8007f2a <HAL_DMA_IRQHandler+0x2ee>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a5a      	ldr	r2, [pc, #360]	; (800805c <HAL_DMA_IRQHandler+0x420>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d018      	beq.n	8007f2a <HAL_DMA_IRQHandler+0x2ee>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a58      	ldr	r2, [pc, #352]	; (8008060 <HAL_DMA_IRQHandler+0x424>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d013      	beq.n	8007f2a <HAL_DMA_IRQHandler+0x2ee>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a57      	ldr	r2, [pc, #348]	; (8008064 <HAL_DMA_IRQHandler+0x428>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d00e      	beq.n	8007f2a <HAL_DMA_IRQHandler+0x2ee>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a55      	ldr	r2, [pc, #340]	; (8008068 <HAL_DMA_IRQHandler+0x42c>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d009      	beq.n	8007f2a <HAL_DMA_IRQHandler+0x2ee>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a54      	ldr	r2, [pc, #336]	; (800806c <HAL_DMA_IRQHandler+0x430>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d004      	beq.n	8007f2a <HAL_DMA_IRQHandler+0x2ee>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a52      	ldr	r2, [pc, #328]	; (8008070 <HAL_DMA_IRQHandler+0x434>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d10a      	bne.n	8007f40 <HAL_DMA_IRQHandler+0x304>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	695b      	ldr	r3, [r3, #20]
 8007f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	bf14      	ite	ne
 8007f38:	2301      	movne	r3, #1
 8007f3a:	2300      	moveq	r3, #0
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	e003      	b.n	8007f48 <HAL_DMA_IRQHandler+0x30c>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	2300      	movs	r3, #0
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00d      	beq.n	8007f68 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f50:	f003 031f 	and.w	r3, r3, #31
 8007f54:	2201      	movs	r2, #1
 8007f56:	409a      	lsls	r2, r3
 8007f58:	6a3b      	ldr	r3, [r7, #32]
 8007f5a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f60:	f043 0202 	orr.w	r2, r3, #2
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f6c:	f003 031f 	and.w	r3, r3, #31
 8007f70:	2204      	movs	r2, #4
 8007f72:	409a      	lsls	r2, r3
 8007f74:	69bb      	ldr	r3, [r7, #24]
 8007f76:	4013      	ands	r3, r2
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f000 808f 	beq.w	800809c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a2c      	ldr	r2, [pc, #176]	; (8008034 <HAL_DMA_IRQHandler+0x3f8>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d04a      	beq.n	800801e <HAL_DMA_IRQHandler+0x3e2>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a2a      	ldr	r2, [pc, #168]	; (8008038 <HAL_DMA_IRQHandler+0x3fc>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d045      	beq.n	800801e <HAL_DMA_IRQHandler+0x3e2>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a29      	ldr	r2, [pc, #164]	; (800803c <HAL_DMA_IRQHandler+0x400>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d040      	beq.n	800801e <HAL_DMA_IRQHandler+0x3e2>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a27      	ldr	r2, [pc, #156]	; (8008040 <HAL_DMA_IRQHandler+0x404>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d03b      	beq.n	800801e <HAL_DMA_IRQHandler+0x3e2>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a26      	ldr	r2, [pc, #152]	; (8008044 <HAL_DMA_IRQHandler+0x408>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d036      	beq.n	800801e <HAL_DMA_IRQHandler+0x3e2>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a24      	ldr	r2, [pc, #144]	; (8008048 <HAL_DMA_IRQHandler+0x40c>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d031      	beq.n	800801e <HAL_DMA_IRQHandler+0x3e2>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a23      	ldr	r2, [pc, #140]	; (800804c <HAL_DMA_IRQHandler+0x410>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d02c      	beq.n	800801e <HAL_DMA_IRQHandler+0x3e2>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a21      	ldr	r2, [pc, #132]	; (8008050 <HAL_DMA_IRQHandler+0x414>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d027      	beq.n	800801e <HAL_DMA_IRQHandler+0x3e2>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a20      	ldr	r2, [pc, #128]	; (8008054 <HAL_DMA_IRQHandler+0x418>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d022      	beq.n	800801e <HAL_DMA_IRQHandler+0x3e2>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a1e      	ldr	r2, [pc, #120]	; (8008058 <HAL_DMA_IRQHandler+0x41c>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d01d      	beq.n	800801e <HAL_DMA_IRQHandler+0x3e2>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a1d      	ldr	r2, [pc, #116]	; (800805c <HAL_DMA_IRQHandler+0x420>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d018      	beq.n	800801e <HAL_DMA_IRQHandler+0x3e2>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a1b      	ldr	r2, [pc, #108]	; (8008060 <HAL_DMA_IRQHandler+0x424>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d013      	beq.n	800801e <HAL_DMA_IRQHandler+0x3e2>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a1a      	ldr	r2, [pc, #104]	; (8008064 <HAL_DMA_IRQHandler+0x428>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d00e      	beq.n	800801e <HAL_DMA_IRQHandler+0x3e2>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a18      	ldr	r2, [pc, #96]	; (8008068 <HAL_DMA_IRQHandler+0x42c>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d009      	beq.n	800801e <HAL_DMA_IRQHandler+0x3e2>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a17      	ldr	r2, [pc, #92]	; (800806c <HAL_DMA_IRQHandler+0x430>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d004      	beq.n	800801e <HAL_DMA_IRQHandler+0x3e2>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a15      	ldr	r2, [pc, #84]	; (8008070 <HAL_DMA_IRQHandler+0x434>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d12a      	bne.n	8008074 <HAL_DMA_IRQHandler+0x438>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 0302 	and.w	r3, r3, #2
 8008028:	2b00      	cmp	r3, #0
 800802a:	bf14      	ite	ne
 800802c:	2301      	movne	r3, #1
 800802e:	2300      	moveq	r3, #0
 8008030:	b2db      	uxtb	r3, r3
 8008032:	e023      	b.n	800807c <HAL_DMA_IRQHandler+0x440>
 8008034:	40020010 	.word	0x40020010
 8008038:	40020028 	.word	0x40020028
 800803c:	40020040 	.word	0x40020040
 8008040:	40020058 	.word	0x40020058
 8008044:	40020070 	.word	0x40020070
 8008048:	40020088 	.word	0x40020088
 800804c:	400200a0 	.word	0x400200a0
 8008050:	400200b8 	.word	0x400200b8
 8008054:	40020410 	.word	0x40020410
 8008058:	40020428 	.word	0x40020428
 800805c:	40020440 	.word	0x40020440
 8008060:	40020458 	.word	0x40020458
 8008064:	40020470 	.word	0x40020470
 8008068:	40020488 	.word	0x40020488
 800806c:	400204a0 	.word	0x400204a0
 8008070:	400204b8 	.word	0x400204b8
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	2300      	movs	r3, #0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d00d      	beq.n	800809c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008084:	f003 031f 	and.w	r3, r3, #31
 8008088:	2204      	movs	r2, #4
 800808a:	409a      	lsls	r2, r3
 800808c:	6a3b      	ldr	r3, [r7, #32]
 800808e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008094:	f043 0204 	orr.w	r2, r3, #4
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080a0:	f003 031f 	and.w	r3, r3, #31
 80080a4:	2210      	movs	r2, #16
 80080a6:	409a      	lsls	r2, r3
 80080a8:	69bb      	ldr	r3, [r7, #24]
 80080aa:	4013      	ands	r3, r2
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	f000 80a6 	beq.w	80081fe <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a85      	ldr	r2, [pc, #532]	; (80082cc <HAL_DMA_IRQHandler+0x690>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d04a      	beq.n	8008152 <HAL_DMA_IRQHandler+0x516>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a83      	ldr	r2, [pc, #524]	; (80082d0 <HAL_DMA_IRQHandler+0x694>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d045      	beq.n	8008152 <HAL_DMA_IRQHandler+0x516>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a82      	ldr	r2, [pc, #520]	; (80082d4 <HAL_DMA_IRQHandler+0x698>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d040      	beq.n	8008152 <HAL_DMA_IRQHandler+0x516>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a80      	ldr	r2, [pc, #512]	; (80082d8 <HAL_DMA_IRQHandler+0x69c>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d03b      	beq.n	8008152 <HAL_DMA_IRQHandler+0x516>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a7f      	ldr	r2, [pc, #508]	; (80082dc <HAL_DMA_IRQHandler+0x6a0>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d036      	beq.n	8008152 <HAL_DMA_IRQHandler+0x516>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a7d      	ldr	r2, [pc, #500]	; (80082e0 <HAL_DMA_IRQHandler+0x6a4>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d031      	beq.n	8008152 <HAL_DMA_IRQHandler+0x516>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a7c      	ldr	r2, [pc, #496]	; (80082e4 <HAL_DMA_IRQHandler+0x6a8>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d02c      	beq.n	8008152 <HAL_DMA_IRQHandler+0x516>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a7a      	ldr	r2, [pc, #488]	; (80082e8 <HAL_DMA_IRQHandler+0x6ac>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d027      	beq.n	8008152 <HAL_DMA_IRQHandler+0x516>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a79      	ldr	r2, [pc, #484]	; (80082ec <HAL_DMA_IRQHandler+0x6b0>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d022      	beq.n	8008152 <HAL_DMA_IRQHandler+0x516>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a77      	ldr	r2, [pc, #476]	; (80082f0 <HAL_DMA_IRQHandler+0x6b4>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d01d      	beq.n	8008152 <HAL_DMA_IRQHandler+0x516>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a76      	ldr	r2, [pc, #472]	; (80082f4 <HAL_DMA_IRQHandler+0x6b8>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d018      	beq.n	8008152 <HAL_DMA_IRQHandler+0x516>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a74      	ldr	r2, [pc, #464]	; (80082f8 <HAL_DMA_IRQHandler+0x6bc>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d013      	beq.n	8008152 <HAL_DMA_IRQHandler+0x516>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a73      	ldr	r2, [pc, #460]	; (80082fc <HAL_DMA_IRQHandler+0x6c0>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d00e      	beq.n	8008152 <HAL_DMA_IRQHandler+0x516>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a71      	ldr	r2, [pc, #452]	; (8008300 <HAL_DMA_IRQHandler+0x6c4>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d009      	beq.n	8008152 <HAL_DMA_IRQHandler+0x516>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a70      	ldr	r2, [pc, #448]	; (8008304 <HAL_DMA_IRQHandler+0x6c8>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d004      	beq.n	8008152 <HAL_DMA_IRQHandler+0x516>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a6e      	ldr	r2, [pc, #440]	; (8008308 <HAL_DMA_IRQHandler+0x6cc>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d10a      	bne.n	8008168 <HAL_DMA_IRQHandler+0x52c>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f003 0308 	and.w	r3, r3, #8
 800815c:	2b00      	cmp	r3, #0
 800815e:	bf14      	ite	ne
 8008160:	2301      	movne	r3, #1
 8008162:	2300      	moveq	r3, #0
 8008164:	b2db      	uxtb	r3, r3
 8008166:	e009      	b.n	800817c <HAL_DMA_IRQHandler+0x540>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f003 0304 	and.w	r3, r3, #4
 8008172:	2b00      	cmp	r3, #0
 8008174:	bf14      	ite	ne
 8008176:	2301      	movne	r3, #1
 8008178:	2300      	moveq	r3, #0
 800817a:	b2db      	uxtb	r3, r3
 800817c:	2b00      	cmp	r3, #0
 800817e:	d03e      	beq.n	80081fe <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008184:	f003 031f 	and.w	r3, r3, #31
 8008188:	2210      	movs	r2, #16
 800818a:	409a      	lsls	r2, r3
 800818c:	6a3b      	ldr	r3, [r7, #32]
 800818e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800819a:	2b00      	cmp	r3, #0
 800819c:	d018      	beq.n	80081d0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d108      	bne.n	80081be <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d024      	beq.n	80081fe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	4798      	blx	r3
 80081bc:	e01f      	b.n	80081fe <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d01b      	beq.n	80081fe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	4798      	blx	r3
 80081ce:	e016      	b.n	80081fe <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d107      	bne.n	80081ee <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f022 0208 	bic.w	r2, r2, #8
 80081ec:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d003      	beq.n	80081fe <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008202:	f003 031f 	and.w	r3, r3, #31
 8008206:	2220      	movs	r2, #32
 8008208:	409a      	lsls	r2, r3
 800820a:	69bb      	ldr	r3, [r7, #24]
 800820c:	4013      	ands	r3, r2
 800820e:	2b00      	cmp	r3, #0
 8008210:	f000 8110 	beq.w	8008434 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a2c      	ldr	r2, [pc, #176]	; (80082cc <HAL_DMA_IRQHandler+0x690>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d04a      	beq.n	80082b4 <HAL_DMA_IRQHandler+0x678>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a2b      	ldr	r2, [pc, #172]	; (80082d0 <HAL_DMA_IRQHandler+0x694>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d045      	beq.n	80082b4 <HAL_DMA_IRQHandler+0x678>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a29      	ldr	r2, [pc, #164]	; (80082d4 <HAL_DMA_IRQHandler+0x698>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d040      	beq.n	80082b4 <HAL_DMA_IRQHandler+0x678>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a28      	ldr	r2, [pc, #160]	; (80082d8 <HAL_DMA_IRQHandler+0x69c>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d03b      	beq.n	80082b4 <HAL_DMA_IRQHandler+0x678>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a26      	ldr	r2, [pc, #152]	; (80082dc <HAL_DMA_IRQHandler+0x6a0>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d036      	beq.n	80082b4 <HAL_DMA_IRQHandler+0x678>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a25      	ldr	r2, [pc, #148]	; (80082e0 <HAL_DMA_IRQHandler+0x6a4>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d031      	beq.n	80082b4 <HAL_DMA_IRQHandler+0x678>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a23      	ldr	r2, [pc, #140]	; (80082e4 <HAL_DMA_IRQHandler+0x6a8>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d02c      	beq.n	80082b4 <HAL_DMA_IRQHandler+0x678>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a22      	ldr	r2, [pc, #136]	; (80082e8 <HAL_DMA_IRQHandler+0x6ac>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d027      	beq.n	80082b4 <HAL_DMA_IRQHandler+0x678>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a20      	ldr	r2, [pc, #128]	; (80082ec <HAL_DMA_IRQHandler+0x6b0>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d022      	beq.n	80082b4 <HAL_DMA_IRQHandler+0x678>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a1f      	ldr	r2, [pc, #124]	; (80082f0 <HAL_DMA_IRQHandler+0x6b4>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d01d      	beq.n	80082b4 <HAL_DMA_IRQHandler+0x678>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a1d      	ldr	r2, [pc, #116]	; (80082f4 <HAL_DMA_IRQHandler+0x6b8>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d018      	beq.n	80082b4 <HAL_DMA_IRQHandler+0x678>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a1c      	ldr	r2, [pc, #112]	; (80082f8 <HAL_DMA_IRQHandler+0x6bc>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d013      	beq.n	80082b4 <HAL_DMA_IRQHandler+0x678>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a1a      	ldr	r2, [pc, #104]	; (80082fc <HAL_DMA_IRQHandler+0x6c0>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d00e      	beq.n	80082b4 <HAL_DMA_IRQHandler+0x678>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a19      	ldr	r2, [pc, #100]	; (8008300 <HAL_DMA_IRQHandler+0x6c4>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d009      	beq.n	80082b4 <HAL_DMA_IRQHandler+0x678>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a17      	ldr	r2, [pc, #92]	; (8008304 <HAL_DMA_IRQHandler+0x6c8>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d004      	beq.n	80082b4 <HAL_DMA_IRQHandler+0x678>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a16      	ldr	r2, [pc, #88]	; (8008308 <HAL_DMA_IRQHandler+0x6cc>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d12b      	bne.n	800830c <HAL_DMA_IRQHandler+0x6d0>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f003 0310 	and.w	r3, r3, #16
 80082be:	2b00      	cmp	r3, #0
 80082c0:	bf14      	ite	ne
 80082c2:	2301      	movne	r3, #1
 80082c4:	2300      	moveq	r3, #0
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	e02a      	b.n	8008320 <HAL_DMA_IRQHandler+0x6e4>
 80082ca:	bf00      	nop
 80082cc:	40020010 	.word	0x40020010
 80082d0:	40020028 	.word	0x40020028
 80082d4:	40020040 	.word	0x40020040
 80082d8:	40020058 	.word	0x40020058
 80082dc:	40020070 	.word	0x40020070
 80082e0:	40020088 	.word	0x40020088
 80082e4:	400200a0 	.word	0x400200a0
 80082e8:	400200b8 	.word	0x400200b8
 80082ec:	40020410 	.word	0x40020410
 80082f0:	40020428 	.word	0x40020428
 80082f4:	40020440 	.word	0x40020440
 80082f8:	40020458 	.word	0x40020458
 80082fc:	40020470 	.word	0x40020470
 8008300:	40020488 	.word	0x40020488
 8008304:	400204a0 	.word	0x400204a0
 8008308:	400204b8 	.word	0x400204b8
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f003 0302 	and.w	r3, r3, #2
 8008316:	2b00      	cmp	r3, #0
 8008318:	bf14      	ite	ne
 800831a:	2301      	movne	r3, #1
 800831c:	2300      	moveq	r3, #0
 800831e:	b2db      	uxtb	r3, r3
 8008320:	2b00      	cmp	r3, #0
 8008322:	f000 8087 	beq.w	8008434 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800832a:	f003 031f 	and.w	r3, r3, #31
 800832e:	2220      	movs	r2, #32
 8008330:	409a      	lsls	r2, r3
 8008332:	6a3b      	ldr	r3, [r7, #32]
 8008334:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800833c:	b2db      	uxtb	r3, r3
 800833e:	2b04      	cmp	r3, #4
 8008340:	d139      	bne.n	80083b6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	681a      	ldr	r2, [r3, #0]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f022 0216 	bic.w	r2, r2, #22
 8008350:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	695a      	ldr	r2, [r3, #20]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008360:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008366:	2b00      	cmp	r3, #0
 8008368:	d103      	bne.n	8008372 <HAL_DMA_IRQHandler+0x736>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800836e:	2b00      	cmp	r3, #0
 8008370:	d007      	beq.n	8008382 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f022 0208 	bic.w	r2, r2, #8
 8008380:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008386:	f003 031f 	and.w	r3, r3, #31
 800838a:	223f      	movs	r2, #63	; 0x3f
 800838c:	409a      	lsls	r2, r3
 800838e:	6a3b      	ldr	r3, [r7, #32]
 8008390:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2201      	movs	r2, #1
 8008396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	f000 8382 	beq.w	8008ab0 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	4798      	blx	r3
          }
          return;
 80083b4:	e37c      	b.n	8008ab0 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d018      	beq.n	80083f6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d108      	bne.n	80083e4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d02c      	beq.n	8008434 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	4798      	blx	r3
 80083e2:	e027      	b.n	8008434 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d023      	beq.n	8008434 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	4798      	blx	r3
 80083f4:	e01e      	b.n	8008434 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008400:	2b00      	cmp	r3, #0
 8008402:	d10f      	bne.n	8008424 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f022 0210 	bic.w	r2, r2, #16
 8008412:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2201      	movs	r2, #1
 8008418:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2200      	movs	r2, #0
 8008420:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008428:	2b00      	cmp	r3, #0
 800842a:	d003      	beq.n	8008434 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008438:	2b00      	cmp	r3, #0
 800843a:	f000 833e 	beq.w	8008aba <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008442:	f003 0301 	and.w	r3, r3, #1
 8008446:	2b00      	cmp	r3, #0
 8008448:	f000 8088 	beq.w	800855c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2204      	movs	r2, #4
 8008450:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a89      	ldr	r2, [pc, #548]	; (8008680 <HAL_DMA_IRQHandler+0xa44>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d04a      	beq.n	80084f4 <HAL_DMA_IRQHandler+0x8b8>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a88      	ldr	r2, [pc, #544]	; (8008684 <HAL_DMA_IRQHandler+0xa48>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d045      	beq.n	80084f4 <HAL_DMA_IRQHandler+0x8b8>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a86      	ldr	r2, [pc, #536]	; (8008688 <HAL_DMA_IRQHandler+0xa4c>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d040      	beq.n	80084f4 <HAL_DMA_IRQHandler+0x8b8>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a85      	ldr	r2, [pc, #532]	; (800868c <HAL_DMA_IRQHandler+0xa50>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d03b      	beq.n	80084f4 <HAL_DMA_IRQHandler+0x8b8>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a83      	ldr	r2, [pc, #524]	; (8008690 <HAL_DMA_IRQHandler+0xa54>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d036      	beq.n	80084f4 <HAL_DMA_IRQHandler+0x8b8>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a82      	ldr	r2, [pc, #520]	; (8008694 <HAL_DMA_IRQHandler+0xa58>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d031      	beq.n	80084f4 <HAL_DMA_IRQHandler+0x8b8>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a80      	ldr	r2, [pc, #512]	; (8008698 <HAL_DMA_IRQHandler+0xa5c>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d02c      	beq.n	80084f4 <HAL_DMA_IRQHandler+0x8b8>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a7f      	ldr	r2, [pc, #508]	; (800869c <HAL_DMA_IRQHandler+0xa60>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d027      	beq.n	80084f4 <HAL_DMA_IRQHandler+0x8b8>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a7d      	ldr	r2, [pc, #500]	; (80086a0 <HAL_DMA_IRQHandler+0xa64>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d022      	beq.n	80084f4 <HAL_DMA_IRQHandler+0x8b8>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a7c      	ldr	r2, [pc, #496]	; (80086a4 <HAL_DMA_IRQHandler+0xa68>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d01d      	beq.n	80084f4 <HAL_DMA_IRQHandler+0x8b8>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a7a      	ldr	r2, [pc, #488]	; (80086a8 <HAL_DMA_IRQHandler+0xa6c>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d018      	beq.n	80084f4 <HAL_DMA_IRQHandler+0x8b8>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a79      	ldr	r2, [pc, #484]	; (80086ac <HAL_DMA_IRQHandler+0xa70>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d013      	beq.n	80084f4 <HAL_DMA_IRQHandler+0x8b8>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a77      	ldr	r2, [pc, #476]	; (80086b0 <HAL_DMA_IRQHandler+0xa74>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d00e      	beq.n	80084f4 <HAL_DMA_IRQHandler+0x8b8>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a76      	ldr	r2, [pc, #472]	; (80086b4 <HAL_DMA_IRQHandler+0xa78>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d009      	beq.n	80084f4 <HAL_DMA_IRQHandler+0x8b8>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a74      	ldr	r2, [pc, #464]	; (80086b8 <HAL_DMA_IRQHandler+0xa7c>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d004      	beq.n	80084f4 <HAL_DMA_IRQHandler+0x8b8>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a73      	ldr	r2, [pc, #460]	; (80086bc <HAL_DMA_IRQHandler+0xa80>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d108      	bne.n	8008506 <HAL_DMA_IRQHandler+0x8ca>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f022 0201 	bic.w	r2, r2, #1
 8008502:	601a      	str	r2, [r3, #0]
 8008504:	e007      	b.n	8008516 <HAL_DMA_IRQHandler+0x8da>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f022 0201 	bic.w	r2, r2, #1
 8008514:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	3301      	adds	r3, #1
 800851a:	60fb      	str	r3, [r7, #12]
 800851c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800851e:	429a      	cmp	r2, r3
 8008520:	d307      	bcc.n	8008532 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f003 0301 	and.w	r3, r3, #1
 800852c:	2b00      	cmp	r3, #0
 800852e:	d1f2      	bne.n	8008516 <HAL_DMA_IRQHandler+0x8da>
 8008530:	e000      	b.n	8008534 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8008532:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f003 0301 	and.w	r3, r3, #1
 800853e:	2b00      	cmp	r3, #0
 8008540:	d004      	beq.n	800854c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2203      	movs	r2, #3
 8008546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800854a:	e003      	b.n	8008554 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2201      	movs	r2, #1
 8008550:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008560:	2b00      	cmp	r3, #0
 8008562:	f000 82aa 	beq.w	8008aba <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	4798      	blx	r3
 800856e:	e2a4      	b.n	8008aba <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a52      	ldr	r2, [pc, #328]	; (80086c0 <HAL_DMA_IRQHandler+0xa84>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d04a      	beq.n	8008610 <HAL_DMA_IRQHandler+0x9d4>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a51      	ldr	r2, [pc, #324]	; (80086c4 <HAL_DMA_IRQHandler+0xa88>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d045      	beq.n	8008610 <HAL_DMA_IRQHandler+0x9d4>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a4f      	ldr	r2, [pc, #316]	; (80086c8 <HAL_DMA_IRQHandler+0xa8c>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d040      	beq.n	8008610 <HAL_DMA_IRQHandler+0x9d4>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a4e      	ldr	r2, [pc, #312]	; (80086cc <HAL_DMA_IRQHandler+0xa90>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d03b      	beq.n	8008610 <HAL_DMA_IRQHandler+0x9d4>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a4c      	ldr	r2, [pc, #304]	; (80086d0 <HAL_DMA_IRQHandler+0xa94>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d036      	beq.n	8008610 <HAL_DMA_IRQHandler+0x9d4>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a4b      	ldr	r2, [pc, #300]	; (80086d4 <HAL_DMA_IRQHandler+0xa98>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d031      	beq.n	8008610 <HAL_DMA_IRQHandler+0x9d4>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a49      	ldr	r2, [pc, #292]	; (80086d8 <HAL_DMA_IRQHandler+0xa9c>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d02c      	beq.n	8008610 <HAL_DMA_IRQHandler+0x9d4>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a48      	ldr	r2, [pc, #288]	; (80086dc <HAL_DMA_IRQHandler+0xaa0>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d027      	beq.n	8008610 <HAL_DMA_IRQHandler+0x9d4>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a46      	ldr	r2, [pc, #280]	; (80086e0 <HAL_DMA_IRQHandler+0xaa4>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d022      	beq.n	8008610 <HAL_DMA_IRQHandler+0x9d4>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a45      	ldr	r2, [pc, #276]	; (80086e4 <HAL_DMA_IRQHandler+0xaa8>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d01d      	beq.n	8008610 <HAL_DMA_IRQHandler+0x9d4>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a43      	ldr	r2, [pc, #268]	; (80086e8 <HAL_DMA_IRQHandler+0xaac>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d018      	beq.n	8008610 <HAL_DMA_IRQHandler+0x9d4>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a42      	ldr	r2, [pc, #264]	; (80086ec <HAL_DMA_IRQHandler+0xab0>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d013      	beq.n	8008610 <HAL_DMA_IRQHandler+0x9d4>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a40      	ldr	r2, [pc, #256]	; (80086f0 <HAL_DMA_IRQHandler+0xab4>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d00e      	beq.n	8008610 <HAL_DMA_IRQHandler+0x9d4>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a3f      	ldr	r2, [pc, #252]	; (80086f4 <HAL_DMA_IRQHandler+0xab8>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d009      	beq.n	8008610 <HAL_DMA_IRQHandler+0x9d4>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a3d      	ldr	r2, [pc, #244]	; (80086f8 <HAL_DMA_IRQHandler+0xabc>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d004      	beq.n	8008610 <HAL_DMA_IRQHandler+0x9d4>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a3c      	ldr	r2, [pc, #240]	; (80086fc <HAL_DMA_IRQHandler+0xac0>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d101      	bne.n	8008614 <HAL_DMA_IRQHandler+0x9d8>
 8008610:	2301      	movs	r3, #1
 8008612:	e000      	b.n	8008616 <HAL_DMA_IRQHandler+0x9da>
 8008614:	2300      	movs	r3, #0
 8008616:	2b00      	cmp	r3, #0
 8008618:	f000 824f 	beq.w	8008aba <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008628:	f003 031f 	and.w	r3, r3, #31
 800862c:	2204      	movs	r2, #4
 800862e:	409a      	lsls	r2, r3
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	4013      	ands	r3, r2
 8008634:	2b00      	cmp	r3, #0
 8008636:	f000 80dd 	beq.w	80087f4 <HAL_DMA_IRQHandler+0xbb8>
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	f003 0304 	and.w	r3, r3, #4
 8008640:	2b00      	cmp	r3, #0
 8008642:	f000 80d7 	beq.w	80087f4 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800864a:	f003 031f 	and.w	r3, r3, #31
 800864e:	2204      	movs	r2, #4
 8008650:	409a      	lsls	r2, r3
 8008652:	69fb      	ldr	r3, [r7, #28]
 8008654:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800865c:	2b00      	cmp	r3, #0
 800865e:	d059      	beq.n	8008714 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008666:	2b00      	cmp	r3, #0
 8008668:	d14a      	bne.n	8008700 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800866e:	2b00      	cmp	r3, #0
 8008670:	f000 8220 	beq.w	8008ab4 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800867c:	e21a      	b.n	8008ab4 <HAL_DMA_IRQHandler+0xe78>
 800867e:	bf00      	nop
 8008680:	40020010 	.word	0x40020010
 8008684:	40020028 	.word	0x40020028
 8008688:	40020040 	.word	0x40020040
 800868c:	40020058 	.word	0x40020058
 8008690:	40020070 	.word	0x40020070
 8008694:	40020088 	.word	0x40020088
 8008698:	400200a0 	.word	0x400200a0
 800869c:	400200b8 	.word	0x400200b8
 80086a0:	40020410 	.word	0x40020410
 80086a4:	40020428 	.word	0x40020428
 80086a8:	40020440 	.word	0x40020440
 80086ac:	40020458 	.word	0x40020458
 80086b0:	40020470 	.word	0x40020470
 80086b4:	40020488 	.word	0x40020488
 80086b8:	400204a0 	.word	0x400204a0
 80086bc:	400204b8 	.word	0x400204b8
 80086c0:	48022c08 	.word	0x48022c08
 80086c4:	48022c1c 	.word	0x48022c1c
 80086c8:	48022c30 	.word	0x48022c30
 80086cc:	48022c44 	.word	0x48022c44
 80086d0:	48022c58 	.word	0x48022c58
 80086d4:	48022c6c 	.word	0x48022c6c
 80086d8:	48022c80 	.word	0x48022c80
 80086dc:	48022c94 	.word	0x48022c94
 80086e0:	58025408 	.word	0x58025408
 80086e4:	5802541c 	.word	0x5802541c
 80086e8:	58025430 	.word	0x58025430
 80086ec:	58025444 	.word	0x58025444
 80086f0:	58025458 	.word	0x58025458
 80086f4:	5802546c 	.word	0x5802546c
 80086f8:	58025480 	.word	0x58025480
 80086fc:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008704:	2b00      	cmp	r3, #0
 8008706:	f000 81d5 	beq.w	8008ab4 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008712:	e1cf      	b.n	8008ab4 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	f003 0320 	and.w	r3, r3, #32
 800871a:	2b00      	cmp	r3, #0
 800871c:	d160      	bne.n	80087e0 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a7f      	ldr	r2, [pc, #508]	; (8008920 <HAL_DMA_IRQHandler+0xce4>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d04a      	beq.n	80087be <HAL_DMA_IRQHandler+0xb82>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a7d      	ldr	r2, [pc, #500]	; (8008924 <HAL_DMA_IRQHandler+0xce8>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d045      	beq.n	80087be <HAL_DMA_IRQHandler+0xb82>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a7c      	ldr	r2, [pc, #496]	; (8008928 <HAL_DMA_IRQHandler+0xcec>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d040      	beq.n	80087be <HAL_DMA_IRQHandler+0xb82>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a7a      	ldr	r2, [pc, #488]	; (800892c <HAL_DMA_IRQHandler+0xcf0>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d03b      	beq.n	80087be <HAL_DMA_IRQHandler+0xb82>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a79      	ldr	r2, [pc, #484]	; (8008930 <HAL_DMA_IRQHandler+0xcf4>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d036      	beq.n	80087be <HAL_DMA_IRQHandler+0xb82>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a77      	ldr	r2, [pc, #476]	; (8008934 <HAL_DMA_IRQHandler+0xcf8>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d031      	beq.n	80087be <HAL_DMA_IRQHandler+0xb82>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a76      	ldr	r2, [pc, #472]	; (8008938 <HAL_DMA_IRQHandler+0xcfc>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d02c      	beq.n	80087be <HAL_DMA_IRQHandler+0xb82>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a74      	ldr	r2, [pc, #464]	; (800893c <HAL_DMA_IRQHandler+0xd00>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d027      	beq.n	80087be <HAL_DMA_IRQHandler+0xb82>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a73      	ldr	r2, [pc, #460]	; (8008940 <HAL_DMA_IRQHandler+0xd04>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d022      	beq.n	80087be <HAL_DMA_IRQHandler+0xb82>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a71      	ldr	r2, [pc, #452]	; (8008944 <HAL_DMA_IRQHandler+0xd08>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d01d      	beq.n	80087be <HAL_DMA_IRQHandler+0xb82>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a70      	ldr	r2, [pc, #448]	; (8008948 <HAL_DMA_IRQHandler+0xd0c>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d018      	beq.n	80087be <HAL_DMA_IRQHandler+0xb82>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a6e      	ldr	r2, [pc, #440]	; (800894c <HAL_DMA_IRQHandler+0xd10>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d013      	beq.n	80087be <HAL_DMA_IRQHandler+0xb82>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a6d      	ldr	r2, [pc, #436]	; (8008950 <HAL_DMA_IRQHandler+0xd14>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d00e      	beq.n	80087be <HAL_DMA_IRQHandler+0xb82>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a6b      	ldr	r2, [pc, #428]	; (8008954 <HAL_DMA_IRQHandler+0xd18>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d009      	beq.n	80087be <HAL_DMA_IRQHandler+0xb82>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a6a      	ldr	r2, [pc, #424]	; (8008958 <HAL_DMA_IRQHandler+0xd1c>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d004      	beq.n	80087be <HAL_DMA_IRQHandler+0xb82>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a68      	ldr	r2, [pc, #416]	; (800895c <HAL_DMA_IRQHandler+0xd20>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d108      	bne.n	80087d0 <HAL_DMA_IRQHandler+0xb94>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f022 0208 	bic.w	r2, r2, #8
 80087cc:	601a      	str	r2, [r3, #0]
 80087ce:	e007      	b.n	80087e0 <HAL_DMA_IRQHandler+0xba4>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	681a      	ldr	r2, [r3, #0]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f022 0204 	bic.w	r2, r2, #4
 80087de:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	f000 8165 	beq.w	8008ab4 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80087f2:	e15f      	b.n	8008ab4 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087f8:	f003 031f 	and.w	r3, r3, #31
 80087fc:	2202      	movs	r2, #2
 80087fe:	409a      	lsls	r2, r3
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	4013      	ands	r3, r2
 8008804:	2b00      	cmp	r3, #0
 8008806:	f000 80c5 	beq.w	8008994 <HAL_DMA_IRQHandler+0xd58>
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	f003 0302 	and.w	r3, r3, #2
 8008810:	2b00      	cmp	r3, #0
 8008812:	f000 80bf 	beq.w	8008994 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800881a:	f003 031f 	and.w	r3, r3, #31
 800881e:	2202      	movs	r2, #2
 8008820:	409a      	lsls	r2, r3
 8008822:	69fb      	ldr	r3, [r7, #28]
 8008824:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800882c:	2b00      	cmp	r3, #0
 800882e:	d018      	beq.n	8008862 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008836:	2b00      	cmp	r3, #0
 8008838:	d109      	bne.n	800884e <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800883e:	2b00      	cmp	r3, #0
 8008840:	f000 813a 	beq.w	8008ab8 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800884c:	e134      	b.n	8008ab8 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008852:	2b00      	cmp	r3, #0
 8008854:	f000 8130 	beq.w	8008ab8 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008860:	e12a      	b.n	8008ab8 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	f003 0320 	and.w	r3, r3, #32
 8008868:	2b00      	cmp	r3, #0
 800886a:	f040 8089 	bne.w	8008980 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a2b      	ldr	r2, [pc, #172]	; (8008920 <HAL_DMA_IRQHandler+0xce4>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d04a      	beq.n	800890e <HAL_DMA_IRQHandler+0xcd2>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a29      	ldr	r2, [pc, #164]	; (8008924 <HAL_DMA_IRQHandler+0xce8>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d045      	beq.n	800890e <HAL_DMA_IRQHandler+0xcd2>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a28      	ldr	r2, [pc, #160]	; (8008928 <HAL_DMA_IRQHandler+0xcec>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d040      	beq.n	800890e <HAL_DMA_IRQHandler+0xcd2>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a26      	ldr	r2, [pc, #152]	; (800892c <HAL_DMA_IRQHandler+0xcf0>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d03b      	beq.n	800890e <HAL_DMA_IRQHandler+0xcd2>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a25      	ldr	r2, [pc, #148]	; (8008930 <HAL_DMA_IRQHandler+0xcf4>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d036      	beq.n	800890e <HAL_DMA_IRQHandler+0xcd2>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a23      	ldr	r2, [pc, #140]	; (8008934 <HAL_DMA_IRQHandler+0xcf8>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d031      	beq.n	800890e <HAL_DMA_IRQHandler+0xcd2>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a22      	ldr	r2, [pc, #136]	; (8008938 <HAL_DMA_IRQHandler+0xcfc>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d02c      	beq.n	800890e <HAL_DMA_IRQHandler+0xcd2>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a20      	ldr	r2, [pc, #128]	; (800893c <HAL_DMA_IRQHandler+0xd00>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d027      	beq.n	800890e <HAL_DMA_IRQHandler+0xcd2>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a1f      	ldr	r2, [pc, #124]	; (8008940 <HAL_DMA_IRQHandler+0xd04>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d022      	beq.n	800890e <HAL_DMA_IRQHandler+0xcd2>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a1d      	ldr	r2, [pc, #116]	; (8008944 <HAL_DMA_IRQHandler+0xd08>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d01d      	beq.n	800890e <HAL_DMA_IRQHandler+0xcd2>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a1c      	ldr	r2, [pc, #112]	; (8008948 <HAL_DMA_IRQHandler+0xd0c>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d018      	beq.n	800890e <HAL_DMA_IRQHandler+0xcd2>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a1a      	ldr	r2, [pc, #104]	; (800894c <HAL_DMA_IRQHandler+0xd10>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d013      	beq.n	800890e <HAL_DMA_IRQHandler+0xcd2>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a19      	ldr	r2, [pc, #100]	; (8008950 <HAL_DMA_IRQHandler+0xd14>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d00e      	beq.n	800890e <HAL_DMA_IRQHandler+0xcd2>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a17      	ldr	r2, [pc, #92]	; (8008954 <HAL_DMA_IRQHandler+0xd18>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d009      	beq.n	800890e <HAL_DMA_IRQHandler+0xcd2>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a16      	ldr	r2, [pc, #88]	; (8008958 <HAL_DMA_IRQHandler+0xd1c>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d004      	beq.n	800890e <HAL_DMA_IRQHandler+0xcd2>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a14      	ldr	r2, [pc, #80]	; (800895c <HAL_DMA_IRQHandler+0xd20>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d128      	bne.n	8008960 <HAL_DMA_IRQHandler+0xd24>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f022 0214 	bic.w	r2, r2, #20
 800891c:	601a      	str	r2, [r3, #0]
 800891e:	e027      	b.n	8008970 <HAL_DMA_IRQHandler+0xd34>
 8008920:	40020010 	.word	0x40020010
 8008924:	40020028 	.word	0x40020028
 8008928:	40020040 	.word	0x40020040
 800892c:	40020058 	.word	0x40020058
 8008930:	40020070 	.word	0x40020070
 8008934:	40020088 	.word	0x40020088
 8008938:	400200a0 	.word	0x400200a0
 800893c:	400200b8 	.word	0x400200b8
 8008940:	40020410 	.word	0x40020410
 8008944:	40020428 	.word	0x40020428
 8008948:	40020440 	.word	0x40020440
 800894c:	40020458 	.word	0x40020458
 8008950:	40020470 	.word	0x40020470
 8008954:	40020488 	.word	0x40020488
 8008958:	400204a0 	.word	0x400204a0
 800895c:	400204b8 	.word	0x400204b8
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	681a      	ldr	r2, [r3, #0]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f022 020a 	bic.w	r2, r2, #10
 800896e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2201      	movs	r2, #1
 8008974:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2200      	movs	r2, #0
 800897c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008984:	2b00      	cmp	r3, #0
 8008986:	f000 8097 	beq.w	8008ab8 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008992:	e091      	b.n	8008ab8 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008998:	f003 031f 	and.w	r3, r3, #31
 800899c:	2208      	movs	r2, #8
 800899e:	409a      	lsls	r2, r3
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	4013      	ands	r3, r2
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	f000 8088 	beq.w	8008aba <HAL_DMA_IRQHandler+0xe7e>
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	f003 0308 	and.w	r3, r3, #8
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	f000 8082 	beq.w	8008aba <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a41      	ldr	r2, [pc, #260]	; (8008ac0 <HAL_DMA_IRQHandler+0xe84>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d04a      	beq.n	8008a56 <HAL_DMA_IRQHandler+0xe1a>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a3f      	ldr	r2, [pc, #252]	; (8008ac4 <HAL_DMA_IRQHandler+0xe88>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d045      	beq.n	8008a56 <HAL_DMA_IRQHandler+0xe1a>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a3e      	ldr	r2, [pc, #248]	; (8008ac8 <HAL_DMA_IRQHandler+0xe8c>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d040      	beq.n	8008a56 <HAL_DMA_IRQHandler+0xe1a>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a3c      	ldr	r2, [pc, #240]	; (8008acc <HAL_DMA_IRQHandler+0xe90>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d03b      	beq.n	8008a56 <HAL_DMA_IRQHandler+0xe1a>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a3b      	ldr	r2, [pc, #236]	; (8008ad0 <HAL_DMA_IRQHandler+0xe94>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d036      	beq.n	8008a56 <HAL_DMA_IRQHandler+0xe1a>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a39      	ldr	r2, [pc, #228]	; (8008ad4 <HAL_DMA_IRQHandler+0xe98>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d031      	beq.n	8008a56 <HAL_DMA_IRQHandler+0xe1a>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a38      	ldr	r2, [pc, #224]	; (8008ad8 <HAL_DMA_IRQHandler+0xe9c>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d02c      	beq.n	8008a56 <HAL_DMA_IRQHandler+0xe1a>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a36      	ldr	r2, [pc, #216]	; (8008adc <HAL_DMA_IRQHandler+0xea0>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d027      	beq.n	8008a56 <HAL_DMA_IRQHandler+0xe1a>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a35      	ldr	r2, [pc, #212]	; (8008ae0 <HAL_DMA_IRQHandler+0xea4>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d022      	beq.n	8008a56 <HAL_DMA_IRQHandler+0xe1a>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a33      	ldr	r2, [pc, #204]	; (8008ae4 <HAL_DMA_IRQHandler+0xea8>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d01d      	beq.n	8008a56 <HAL_DMA_IRQHandler+0xe1a>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a32      	ldr	r2, [pc, #200]	; (8008ae8 <HAL_DMA_IRQHandler+0xeac>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d018      	beq.n	8008a56 <HAL_DMA_IRQHandler+0xe1a>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a30      	ldr	r2, [pc, #192]	; (8008aec <HAL_DMA_IRQHandler+0xeb0>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d013      	beq.n	8008a56 <HAL_DMA_IRQHandler+0xe1a>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a2f      	ldr	r2, [pc, #188]	; (8008af0 <HAL_DMA_IRQHandler+0xeb4>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d00e      	beq.n	8008a56 <HAL_DMA_IRQHandler+0xe1a>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a2d      	ldr	r2, [pc, #180]	; (8008af4 <HAL_DMA_IRQHandler+0xeb8>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d009      	beq.n	8008a56 <HAL_DMA_IRQHandler+0xe1a>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a2c      	ldr	r2, [pc, #176]	; (8008af8 <HAL_DMA_IRQHandler+0xebc>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d004      	beq.n	8008a56 <HAL_DMA_IRQHandler+0xe1a>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a2a      	ldr	r2, [pc, #168]	; (8008afc <HAL_DMA_IRQHandler+0xec0>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d108      	bne.n	8008a68 <HAL_DMA_IRQHandler+0xe2c>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	681a      	ldr	r2, [r3, #0]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f022 021c 	bic.w	r2, r2, #28
 8008a64:	601a      	str	r2, [r3, #0]
 8008a66:	e007      	b.n	8008a78 <HAL_DMA_IRQHandler+0xe3c>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	681a      	ldr	r2, [r3, #0]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f022 020e 	bic.w	r2, r2, #14
 8008a76:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a7c:	f003 031f 	and.w	r3, r3, #31
 8008a80:	2201      	movs	r2, #1
 8008a82:	409a      	lsls	r2, r3
 8008a84:	69fb      	ldr	r3, [r7, #28]
 8008a86:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2201      	movs	r2, #1
 8008a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d009      	beq.n	8008aba <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	4798      	blx	r3
 8008aae:	e004      	b.n	8008aba <HAL_DMA_IRQHandler+0xe7e>
          return;
 8008ab0:	bf00      	nop
 8008ab2:	e002      	b.n	8008aba <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008ab4:	bf00      	nop
 8008ab6:	e000      	b.n	8008aba <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008ab8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008aba:	3728      	adds	r7, #40	; 0x28
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}
 8008ac0:	40020010 	.word	0x40020010
 8008ac4:	40020028 	.word	0x40020028
 8008ac8:	40020040 	.word	0x40020040
 8008acc:	40020058 	.word	0x40020058
 8008ad0:	40020070 	.word	0x40020070
 8008ad4:	40020088 	.word	0x40020088
 8008ad8:	400200a0 	.word	0x400200a0
 8008adc:	400200b8 	.word	0x400200b8
 8008ae0:	40020410 	.word	0x40020410
 8008ae4:	40020428 	.word	0x40020428
 8008ae8:	40020440 	.word	0x40020440
 8008aec:	40020458 	.word	0x40020458
 8008af0:	40020470 	.word	0x40020470
 8008af4:	40020488 	.word	0x40020488
 8008af8:	400204a0 	.word	0x400204a0
 8008afc:	400204b8 	.word	0x400204b8

08008b00 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b083      	sub	sp, #12
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	370c      	adds	r7, #12
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr

08008b18 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b087      	sub	sp, #28
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	60f8      	str	r0, [r7, #12]
 8008b20:	60b9      	str	r1, [r7, #8]
 8008b22:	607a      	str	r2, [r7, #4]
 8008b24:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b2a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b30:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a7f      	ldr	r2, [pc, #508]	; (8008d34 <DMA_SetConfig+0x21c>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d072      	beq.n	8008c22 <DMA_SetConfig+0x10a>
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a7d      	ldr	r2, [pc, #500]	; (8008d38 <DMA_SetConfig+0x220>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d06d      	beq.n	8008c22 <DMA_SetConfig+0x10a>
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a7c      	ldr	r2, [pc, #496]	; (8008d3c <DMA_SetConfig+0x224>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d068      	beq.n	8008c22 <DMA_SetConfig+0x10a>
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4a7a      	ldr	r2, [pc, #488]	; (8008d40 <DMA_SetConfig+0x228>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d063      	beq.n	8008c22 <DMA_SetConfig+0x10a>
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4a79      	ldr	r2, [pc, #484]	; (8008d44 <DMA_SetConfig+0x22c>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d05e      	beq.n	8008c22 <DMA_SetConfig+0x10a>
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a77      	ldr	r2, [pc, #476]	; (8008d48 <DMA_SetConfig+0x230>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d059      	beq.n	8008c22 <DMA_SetConfig+0x10a>
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4a76      	ldr	r2, [pc, #472]	; (8008d4c <DMA_SetConfig+0x234>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d054      	beq.n	8008c22 <DMA_SetConfig+0x10a>
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a74      	ldr	r2, [pc, #464]	; (8008d50 <DMA_SetConfig+0x238>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d04f      	beq.n	8008c22 <DMA_SetConfig+0x10a>
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a73      	ldr	r2, [pc, #460]	; (8008d54 <DMA_SetConfig+0x23c>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d04a      	beq.n	8008c22 <DMA_SetConfig+0x10a>
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a71      	ldr	r2, [pc, #452]	; (8008d58 <DMA_SetConfig+0x240>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d045      	beq.n	8008c22 <DMA_SetConfig+0x10a>
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a70      	ldr	r2, [pc, #448]	; (8008d5c <DMA_SetConfig+0x244>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d040      	beq.n	8008c22 <DMA_SetConfig+0x10a>
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a6e      	ldr	r2, [pc, #440]	; (8008d60 <DMA_SetConfig+0x248>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d03b      	beq.n	8008c22 <DMA_SetConfig+0x10a>
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a6d      	ldr	r2, [pc, #436]	; (8008d64 <DMA_SetConfig+0x24c>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d036      	beq.n	8008c22 <DMA_SetConfig+0x10a>
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a6b      	ldr	r2, [pc, #428]	; (8008d68 <DMA_SetConfig+0x250>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d031      	beq.n	8008c22 <DMA_SetConfig+0x10a>
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4a6a      	ldr	r2, [pc, #424]	; (8008d6c <DMA_SetConfig+0x254>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d02c      	beq.n	8008c22 <DMA_SetConfig+0x10a>
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a68      	ldr	r2, [pc, #416]	; (8008d70 <DMA_SetConfig+0x258>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d027      	beq.n	8008c22 <DMA_SetConfig+0x10a>
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4a67      	ldr	r2, [pc, #412]	; (8008d74 <DMA_SetConfig+0x25c>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d022      	beq.n	8008c22 <DMA_SetConfig+0x10a>
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a65      	ldr	r2, [pc, #404]	; (8008d78 <DMA_SetConfig+0x260>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d01d      	beq.n	8008c22 <DMA_SetConfig+0x10a>
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a64      	ldr	r2, [pc, #400]	; (8008d7c <DMA_SetConfig+0x264>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d018      	beq.n	8008c22 <DMA_SetConfig+0x10a>
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a62      	ldr	r2, [pc, #392]	; (8008d80 <DMA_SetConfig+0x268>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d013      	beq.n	8008c22 <DMA_SetConfig+0x10a>
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a61      	ldr	r2, [pc, #388]	; (8008d84 <DMA_SetConfig+0x26c>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d00e      	beq.n	8008c22 <DMA_SetConfig+0x10a>
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a5f      	ldr	r2, [pc, #380]	; (8008d88 <DMA_SetConfig+0x270>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d009      	beq.n	8008c22 <DMA_SetConfig+0x10a>
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4a5e      	ldr	r2, [pc, #376]	; (8008d8c <DMA_SetConfig+0x274>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d004      	beq.n	8008c22 <DMA_SetConfig+0x10a>
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a5c      	ldr	r2, [pc, #368]	; (8008d90 <DMA_SetConfig+0x278>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d101      	bne.n	8008c26 <DMA_SetConfig+0x10e>
 8008c22:	2301      	movs	r3, #1
 8008c24:	e000      	b.n	8008c28 <DMA_SetConfig+0x110>
 8008c26:	2300      	movs	r3, #0
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d00d      	beq.n	8008c48 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c30:	68fa      	ldr	r2, [r7, #12]
 8008c32:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008c34:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d004      	beq.n	8008c48 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c42:	68fa      	ldr	r2, [r7, #12]
 8008c44:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008c46:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a39      	ldr	r2, [pc, #228]	; (8008d34 <DMA_SetConfig+0x21c>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d04a      	beq.n	8008ce8 <DMA_SetConfig+0x1d0>
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4a38      	ldr	r2, [pc, #224]	; (8008d38 <DMA_SetConfig+0x220>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d045      	beq.n	8008ce8 <DMA_SetConfig+0x1d0>
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a36      	ldr	r2, [pc, #216]	; (8008d3c <DMA_SetConfig+0x224>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d040      	beq.n	8008ce8 <DMA_SetConfig+0x1d0>
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a35      	ldr	r2, [pc, #212]	; (8008d40 <DMA_SetConfig+0x228>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d03b      	beq.n	8008ce8 <DMA_SetConfig+0x1d0>
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a33      	ldr	r2, [pc, #204]	; (8008d44 <DMA_SetConfig+0x22c>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d036      	beq.n	8008ce8 <DMA_SetConfig+0x1d0>
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a32      	ldr	r2, [pc, #200]	; (8008d48 <DMA_SetConfig+0x230>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d031      	beq.n	8008ce8 <DMA_SetConfig+0x1d0>
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a30      	ldr	r2, [pc, #192]	; (8008d4c <DMA_SetConfig+0x234>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d02c      	beq.n	8008ce8 <DMA_SetConfig+0x1d0>
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a2f      	ldr	r2, [pc, #188]	; (8008d50 <DMA_SetConfig+0x238>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d027      	beq.n	8008ce8 <DMA_SetConfig+0x1d0>
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a2d      	ldr	r2, [pc, #180]	; (8008d54 <DMA_SetConfig+0x23c>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d022      	beq.n	8008ce8 <DMA_SetConfig+0x1d0>
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a2c      	ldr	r2, [pc, #176]	; (8008d58 <DMA_SetConfig+0x240>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d01d      	beq.n	8008ce8 <DMA_SetConfig+0x1d0>
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a2a      	ldr	r2, [pc, #168]	; (8008d5c <DMA_SetConfig+0x244>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d018      	beq.n	8008ce8 <DMA_SetConfig+0x1d0>
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a29      	ldr	r2, [pc, #164]	; (8008d60 <DMA_SetConfig+0x248>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d013      	beq.n	8008ce8 <DMA_SetConfig+0x1d0>
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a27      	ldr	r2, [pc, #156]	; (8008d64 <DMA_SetConfig+0x24c>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d00e      	beq.n	8008ce8 <DMA_SetConfig+0x1d0>
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a26      	ldr	r2, [pc, #152]	; (8008d68 <DMA_SetConfig+0x250>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d009      	beq.n	8008ce8 <DMA_SetConfig+0x1d0>
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a24      	ldr	r2, [pc, #144]	; (8008d6c <DMA_SetConfig+0x254>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d004      	beq.n	8008ce8 <DMA_SetConfig+0x1d0>
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4a23      	ldr	r2, [pc, #140]	; (8008d70 <DMA_SetConfig+0x258>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d101      	bne.n	8008cec <DMA_SetConfig+0x1d4>
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e000      	b.n	8008cee <DMA_SetConfig+0x1d6>
 8008cec:	2300      	movs	r3, #0
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d059      	beq.n	8008da6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cf6:	f003 031f 	and.w	r3, r3, #31
 8008cfa:	223f      	movs	r2, #63	; 0x3f
 8008cfc:	409a      	lsls	r2, r3
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	681a      	ldr	r2, [r3, #0]
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008d10:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	683a      	ldr	r2, [r7, #0]
 8008d18:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	689b      	ldr	r3, [r3, #8]
 8008d1e:	2b40      	cmp	r3, #64	; 0x40
 8008d20:	d138      	bne.n	8008d94 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	68ba      	ldr	r2, [r7, #8]
 8008d30:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008d32:	e0ae      	b.n	8008e92 <DMA_SetConfig+0x37a>
 8008d34:	40020010 	.word	0x40020010
 8008d38:	40020028 	.word	0x40020028
 8008d3c:	40020040 	.word	0x40020040
 8008d40:	40020058 	.word	0x40020058
 8008d44:	40020070 	.word	0x40020070
 8008d48:	40020088 	.word	0x40020088
 8008d4c:	400200a0 	.word	0x400200a0
 8008d50:	400200b8 	.word	0x400200b8
 8008d54:	40020410 	.word	0x40020410
 8008d58:	40020428 	.word	0x40020428
 8008d5c:	40020440 	.word	0x40020440
 8008d60:	40020458 	.word	0x40020458
 8008d64:	40020470 	.word	0x40020470
 8008d68:	40020488 	.word	0x40020488
 8008d6c:	400204a0 	.word	0x400204a0
 8008d70:	400204b8 	.word	0x400204b8
 8008d74:	58025408 	.word	0x58025408
 8008d78:	5802541c 	.word	0x5802541c
 8008d7c:	58025430 	.word	0x58025430
 8008d80:	58025444 	.word	0x58025444
 8008d84:	58025458 	.word	0x58025458
 8008d88:	5802546c 	.word	0x5802546c
 8008d8c:	58025480 	.word	0x58025480
 8008d90:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	68ba      	ldr	r2, [r7, #8]
 8008d9a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	60da      	str	r2, [r3, #12]
}
 8008da4:	e075      	b.n	8008e92 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a3d      	ldr	r2, [pc, #244]	; (8008ea0 <DMA_SetConfig+0x388>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d04a      	beq.n	8008e46 <DMA_SetConfig+0x32e>
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a3b      	ldr	r2, [pc, #236]	; (8008ea4 <DMA_SetConfig+0x38c>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d045      	beq.n	8008e46 <DMA_SetConfig+0x32e>
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a3a      	ldr	r2, [pc, #232]	; (8008ea8 <DMA_SetConfig+0x390>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d040      	beq.n	8008e46 <DMA_SetConfig+0x32e>
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a38      	ldr	r2, [pc, #224]	; (8008eac <DMA_SetConfig+0x394>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d03b      	beq.n	8008e46 <DMA_SetConfig+0x32e>
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a37      	ldr	r2, [pc, #220]	; (8008eb0 <DMA_SetConfig+0x398>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d036      	beq.n	8008e46 <DMA_SetConfig+0x32e>
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a35      	ldr	r2, [pc, #212]	; (8008eb4 <DMA_SetConfig+0x39c>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d031      	beq.n	8008e46 <DMA_SetConfig+0x32e>
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a34      	ldr	r2, [pc, #208]	; (8008eb8 <DMA_SetConfig+0x3a0>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d02c      	beq.n	8008e46 <DMA_SetConfig+0x32e>
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a32      	ldr	r2, [pc, #200]	; (8008ebc <DMA_SetConfig+0x3a4>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d027      	beq.n	8008e46 <DMA_SetConfig+0x32e>
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a31      	ldr	r2, [pc, #196]	; (8008ec0 <DMA_SetConfig+0x3a8>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d022      	beq.n	8008e46 <DMA_SetConfig+0x32e>
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a2f      	ldr	r2, [pc, #188]	; (8008ec4 <DMA_SetConfig+0x3ac>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d01d      	beq.n	8008e46 <DMA_SetConfig+0x32e>
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a2e      	ldr	r2, [pc, #184]	; (8008ec8 <DMA_SetConfig+0x3b0>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d018      	beq.n	8008e46 <DMA_SetConfig+0x32e>
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a2c      	ldr	r2, [pc, #176]	; (8008ecc <DMA_SetConfig+0x3b4>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d013      	beq.n	8008e46 <DMA_SetConfig+0x32e>
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4a2b      	ldr	r2, [pc, #172]	; (8008ed0 <DMA_SetConfig+0x3b8>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d00e      	beq.n	8008e46 <DMA_SetConfig+0x32e>
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a29      	ldr	r2, [pc, #164]	; (8008ed4 <DMA_SetConfig+0x3bc>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d009      	beq.n	8008e46 <DMA_SetConfig+0x32e>
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a28      	ldr	r2, [pc, #160]	; (8008ed8 <DMA_SetConfig+0x3c0>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d004      	beq.n	8008e46 <DMA_SetConfig+0x32e>
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a26      	ldr	r2, [pc, #152]	; (8008edc <DMA_SetConfig+0x3c4>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d101      	bne.n	8008e4a <DMA_SetConfig+0x332>
 8008e46:	2301      	movs	r3, #1
 8008e48:	e000      	b.n	8008e4c <DMA_SetConfig+0x334>
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d020      	beq.n	8008e92 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e54:	f003 031f 	and.w	r3, r3, #31
 8008e58:	2201      	movs	r2, #1
 8008e5a:	409a      	lsls	r2, r3
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	683a      	ldr	r2, [r7, #0]
 8008e66:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	2b40      	cmp	r3, #64	; 0x40
 8008e6e:	d108      	bne.n	8008e82 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	68ba      	ldr	r2, [r7, #8]
 8008e7e:	60da      	str	r2, [r3, #12]
}
 8008e80:	e007      	b.n	8008e92 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	68ba      	ldr	r2, [r7, #8]
 8008e88:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	687a      	ldr	r2, [r7, #4]
 8008e90:	60da      	str	r2, [r3, #12]
}
 8008e92:	bf00      	nop
 8008e94:	371c      	adds	r7, #28
 8008e96:	46bd      	mov	sp, r7
 8008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9c:	4770      	bx	lr
 8008e9e:	bf00      	nop
 8008ea0:	48022c08 	.word	0x48022c08
 8008ea4:	48022c1c 	.word	0x48022c1c
 8008ea8:	48022c30 	.word	0x48022c30
 8008eac:	48022c44 	.word	0x48022c44
 8008eb0:	48022c58 	.word	0x48022c58
 8008eb4:	48022c6c 	.word	0x48022c6c
 8008eb8:	48022c80 	.word	0x48022c80
 8008ebc:	48022c94 	.word	0x48022c94
 8008ec0:	58025408 	.word	0x58025408
 8008ec4:	5802541c 	.word	0x5802541c
 8008ec8:	58025430 	.word	0x58025430
 8008ecc:	58025444 	.word	0x58025444
 8008ed0:	58025458 	.word	0x58025458
 8008ed4:	5802546c 	.word	0x5802546c
 8008ed8:	58025480 	.word	0x58025480
 8008edc:	58025494 	.word	0x58025494

08008ee0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b085      	sub	sp, #20
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4a42      	ldr	r2, [pc, #264]	; (8008ff8 <DMA_CalcBaseAndBitshift+0x118>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d04a      	beq.n	8008f88 <DMA_CalcBaseAndBitshift+0xa8>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a41      	ldr	r2, [pc, #260]	; (8008ffc <DMA_CalcBaseAndBitshift+0x11c>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d045      	beq.n	8008f88 <DMA_CalcBaseAndBitshift+0xa8>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a3f      	ldr	r2, [pc, #252]	; (8009000 <DMA_CalcBaseAndBitshift+0x120>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d040      	beq.n	8008f88 <DMA_CalcBaseAndBitshift+0xa8>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4a3e      	ldr	r2, [pc, #248]	; (8009004 <DMA_CalcBaseAndBitshift+0x124>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d03b      	beq.n	8008f88 <DMA_CalcBaseAndBitshift+0xa8>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4a3c      	ldr	r2, [pc, #240]	; (8009008 <DMA_CalcBaseAndBitshift+0x128>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d036      	beq.n	8008f88 <DMA_CalcBaseAndBitshift+0xa8>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4a3b      	ldr	r2, [pc, #236]	; (800900c <DMA_CalcBaseAndBitshift+0x12c>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d031      	beq.n	8008f88 <DMA_CalcBaseAndBitshift+0xa8>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4a39      	ldr	r2, [pc, #228]	; (8009010 <DMA_CalcBaseAndBitshift+0x130>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d02c      	beq.n	8008f88 <DMA_CalcBaseAndBitshift+0xa8>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4a38      	ldr	r2, [pc, #224]	; (8009014 <DMA_CalcBaseAndBitshift+0x134>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d027      	beq.n	8008f88 <DMA_CalcBaseAndBitshift+0xa8>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a36      	ldr	r2, [pc, #216]	; (8009018 <DMA_CalcBaseAndBitshift+0x138>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d022      	beq.n	8008f88 <DMA_CalcBaseAndBitshift+0xa8>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4a35      	ldr	r2, [pc, #212]	; (800901c <DMA_CalcBaseAndBitshift+0x13c>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d01d      	beq.n	8008f88 <DMA_CalcBaseAndBitshift+0xa8>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4a33      	ldr	r2, [pc, #204]	; (8009020 <DMA_CalcBaseAndBitshift+0x140>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d018      	beq.n	8008f88 <DMA_CalcBaseAndBitshift+0xa8>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4a32      	ldr	r2, [pc, #200]	; (8009024 <DMA_CalcBaseAndBitshift+0x144>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d013      	beq.n	8008f88 <DMA_CalcBaseAndBitshift+0xa8>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a30      	ldr	r2, [pc, #192]	; (8009028 <DMA_CalcBaseAndBitshift+0x148>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d00e      	beq.n	8008f88 <DMA_CalcBaseAndBitshift+0xa8>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4a2f      	ldr	r2, [pc, #188]	; (800902c <DMA_CalcBaseAndBitshift+0x14c>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d009      	beq.n	8008f88 <DMA_CalcBaseAndBitshift+0xa8>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4a2d      	ldr	r2, [pc, #180]	; (8009030 <DMA_CalcBaseAndBitshift+0x150>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d004      	beq.n	8008f88 <DMA_CalcBaseAndBitshift+0xa8>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4a2c      	ldr	r2, [pc, #176]	; (8009034 <DMA_CalcBaseAndBitshift+0x154>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d101      	bne.n	8008f8c <DMA_CalcBaseAndBitshift+0xac>
 8008f88:	2301      	movs	r3, #1
 8008f8a:	e000      	b.n	8008f8e <DMA_CalcBaseAndBitshift+0xae>
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d024      	beq.n	8008fdc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	b2db      	uxtb	r3, r3
 8008f98:	3b10      	subs	r3, #16
 8008f9a:	4a27      	ldr	r2, [pc, #156]	; (8009038 <DMA_CalcBaseAndBitshift+0x158>)
 8008f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8008fa0:	091b      	lsrs	r3, r3, #4
 8008fa2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f003 0307 	and.w	r3, r3, #7
 8008faa:	4a24      	ldr	r2, [pc, #144]	; (800903c <DMA_CalcBaseAndBitshift+0x15c>)
 8008fac:	5cd3      	ldrb	r3, [r2, r3]
 8008fae:	461a      	mov	r2, r3
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2b03      	cmp	r3, #3
 8008fb8:	d908      	bls.n	8008fcc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	4b1f      	ldr	r3, [pc, #124]	; (8009040 <DMA_CalcBaseAndBitshift+0x160>)
 8008fc2:	4013      	ands	r3, r2
 8008fc4:	1d1a      	adds	r2, r3, #4
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	659a      	str	r2, [r3, #88]	; 0x58
 8008fca:	e00d      	b.n	8008fe8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	4b1b      	ldr	r3, [pc, #108]	; (8009040 <DMA_CalcBaseAndBitshift+0x160>)
 8008fd4:	4013      	ands	r3, r2
 8008fd6:	687a      	ldr	r2, [r7, #4]
 8008fd8:	6593      	str	r3, [r2, #88]	; 0x58
 8008fda:	e005      	b.n	8008fe8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3714      	adds	r7, #20
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr
 8008ff8:	40020010 	.word	0x40020010
 8008ffc:	40020028 	.word	0x40020028
 8009000:	40020040 	.word	0x40020040
 8009004:	40020058 	.word	0x40020058
 8009008:	40020070 	.word	0x40020070
 800900c:	40020088 	.word	0x40020088
 8009010:	400200a0 	.word	0x400200a0
 8009014:	400200b8 	.word	0x400200b8
 8009018:	40020410 	.word	0x40020410
 800901c:	40020428 	.word	0x40020428
 8009020:	40020440 	.word	0x40020440
 8009024:	40020458 	.word	0x40020458
 8009028:	40020470 	.word	0x40020470
 800902c:	40020488 	.word	0x40020488
 8009030:	400204a0 	.word	0x400204a0
 8009034:	400204b8 	.word	0x400204b8
 8009038:	aaaaaaab 	.word	0xaaaaaaab
 800903c:	08014530 	.word	0x08014530
 8009040:	fffffc00 	.word	0xfffffc00

08009044 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009044:	b480      	push	{r7}
 8009046:	b085      	sub	sp, #20
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800904c:	2300      	movs	r3, #0
 800904e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	699b      	ldr	r3, [r3, #24]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d120      	bne.n	800909a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800905c:	2b03      	cmp	r3, #3
 800905e:	d858      	bhi.n	8009112 <DMA_CheckFifoParam+0xce>
 8009060:	a201      	add	r2, pc, #4	; (adr r2, 8009068 <DMA_CheckFifoParam+0x24>)
 8009062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009066:	bf00      	nop
 8009068:	08009079 	.word	0x08009079
 800906c:	0800908b 	.word	0x0800908b
 8009070:	08009079 	.word	0x08009079
 8009074:	08009113 	.word	0x08009113
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800907c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009080:	2b00      	cmp	r3, #0
 8009082:	d048      	beq.n	8009116 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009084:	2301      	movs	r3, #1
 8009086:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009088:	e045      	b.n	8009116 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800908e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009092:	d142      	bne.n	800911a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009094:	2301      	movs	r3, #1
 8009096:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009098:	e03f      	b.n	800911a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	699b      	ldr	r3, [r3, #24]
 800909e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090a2:	d123      	bne.n	80090ec <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090a8:	2b03      	cmp	r3, #3
 80090aa:	d838      	bhi.n	800911e <DMA_CheckFifoParam+0xda>
 80090ac:	a201      	add	r2, pc, #4	; (adr r2, 80090b4 <DMA_CheckFifoParam+0x70>)
 80090ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090b2:	bf00      	nop
 80090b4:	080090c5 	.word	0x080090c5
 80090b8:	080090cb 	.word	0x080090cb
 80090bc:	080090c5 	.word	0x080090c5
 80090c0:	080090dd 	.word	0x080090dd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80090c4:	2301      	movs	r3, #1
 80090c6:	73fb      	strb	r3, [r7, #15]
        break;
 80090c8:	e030      	b.n	800912c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d025      	beq.n	8009122 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80090d6:	2301      	movs	r3, #1
 80090d8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80090da:	e022      	b.n	8009122 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80090e4:	d11f      	bne.n	8009126 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80090e6:	2301      	movs	r3, #1
 80090e8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80090ea:	e01c      	b.n	8009126 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090f0:	2b02      	cmp	r3, #2
 80090f2:	d902      	bls.n	80090fa <DMA_CheckFifoParam+0xb6>
 80090f4:	2b03      	cmp	r3, #3
 80090f6:	d003      	beq.n	8009100 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80090f8:	e018      	b.n	800912c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80090fa:	2301      	movs	r3, #1
 80090fc:	73fb      	strb	r3, [r7, #15]
        break;
 80090fe:	e015      	b.n	800912c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009104:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009108:	2b00      	cmp	r3, #0
 800910a:	d00e      	beq.n	800912a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800910c:	2301      	movs	r3, #1
 800910e:	73fb      	strb	r3, [r7, #15]
    break;
 8009110:	e00b      	b.n	800912a <DMA_CheckFifoParam+0xe6>
        break;
 8009112:	bf00      	nop
 8009114:	e00a      	b.n	800912c <DMA_CheckFifoParam+0xe8>
        break;
 8009116:	bf00      	nop
 8009118:	e008      	b.n	800912c <DMA_CheckFifoParam+0xe8>
        break;
 800911a:	bf00      	nop
 800911c:	e006      	b.n	800912c <DMA_CheckFifoParam+0xe8>
        break;
 800911e:	bf00      	nop
 8009120:	e004      	b.n	800912c <DMA_CheckFifoParam+0xe8>
        break;
 8009122:	bf00      	nop
 8009124:	e002      	b.n	800912c <DMA_CheckFifoParam+0xe8>
        break;
 8009126:	bf00      	nop
 8009128:	e000      	b.n	800912c <DMA_CheckFifoParam+0xe8>
    break;
 800912a:	bf00      	nop
    }
  }

  return status;
 800912c:	7bfb      	ldrb	r3, [r7, #15]
}
 800912e:	4618      	mov	r0, r3
 8009130:	3714      	adds	r7, #20
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr
 800913a:	bf00      	nop

0800913c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800913c:	b480      	push	{r7}
 800913e:	b085      	sub	sp, #20
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4a38      	ldr	r2, [pc, #224]	; (8009230 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d022      	beq.n	800919a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4a36      	ldr	r2, [pc, #216]	; (8009234 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d01d      	beq.n	800919a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4a35      	ldr	r2, [pc, #212]	; (8009238 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d018      	beq.n	800919a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a33      	ldr	r2, [pc, #204]	; (800923c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d013      	beq.n	800919a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4a32      	ldr	r2, [pc, #200]	; (8009240 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d00e      	beq.n	800919a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4a30      	ldr	r2, [pc, #192]	; (8009244 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d009      	beq.n	800919a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4a2f      	ldr	r2, [pc, #188]	; (8009248 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d004      	beq.n	800919a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4a2d      	ldr	r2, [pc, #180]	; (800924c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d101      	bne.n	800919e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800919a:	2301      	movs	r3, #1
 800919c:	e000      	b.n	80091a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800919e:	2300      	movs	r3, #0
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d01a      	beq.n	80091da <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	b2db      	uxtb	r3, r3
 80091aa:	3b08      	subs	r3, #8
 80091ac:	4a28      	ldr	r2, [pc, #160]	; (8009250 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80091ae:	fba2 2303 	umull	r2, r3, r2, r3
 80091b2:	091b      	lsrs	r3, r3, #4
 80091b4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80091b6:	68fa      	ldr	r2, [r7, #12]
 80091b8:	4b26      	ldr	r3, [pc, #152]	; (8009254 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80091ba:	4413      	add	r3, r2
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	461a      	mov	r2, r3
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	4a24      	ldr	r2, [pc, #144]	; (8009258 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80091c8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	f003 031f 	and.w	r3, r3, #31
 80091d0:	2201      	movs	r2, #1
 80091d2:	409a      	lsls	r2, r3
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80091d8:	e024      	b.n	8009224 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	b2db      	uxtb	r3, r3
 80091e0:	3b10      	subs	r3, #16
 80091e2:	4a1e      	ldr	r2, [pc, #120]	; (800925c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80091e4:	fba2 2303 	umull	r2, r3, r2, r3
 80091e8:	091b      	lsrs	r3, r3, #4
 80091ea:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	4a1c      	ldr	r2, [pc, #112]	; (8009260 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d806      	bhi.n	8009202 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	4a1b      	ldr	r2, [pc, #108]	; (8009264 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d902      	bls.n	8009202 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	3308      	adds	r3, #8
 8009200:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009202:	68fa      	ldr	r2, [r7, #12]
 8009204:	4b18      	ldr	r3, [pc, #96]	; (8009268 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8009206:	4413      	add	r3, r2
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	461a      	mov	r2, r3
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	4a16      	ldr	r2, [pc, #88]	; (800926c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009214:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	f003 031f 	and.w	r3, r3, #31
 800921c:	2201      	movs	r2, #1
 800921e:	409a      	lsls	r2, r3
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009224:	bf00      	nop
 8009226:	3714      	adds	r7, #20
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr
 8009230:	58025408 	.word	0x58025408
 8009234:	5802541c 	.word	0x5802541c
 8009238:	58025430 	.word	0x58025430
 800923c:	58025444 	.word	0x58025444
 8009240:	58025458 	.word	0x58025458
 8009244:	5802546c 	.word	0x5802546c
 8009248:	58025480 	.word	0x58025480
 800924c:	58025494 	.word	0x58025494
 8009250:	cccccccd 	.word	0xcccccccd
 8009254:	16009600 	.word	0x16009600
 8009258:	58025880 	.word	0x58025880
 800925c:	aaaaaaab 	.word	0xaaaaaaab
 8009260:	400204b8 	.word	0x400204b8
 8009264:	4002040f 	.word	0x4002040f
 8009268:	10008200 	.word	0x10008200
 800926c:	40020880 	.word	0x40020880

08009270 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009270:	b480      	push	{r7}
 8009272:	b085      	sub	sp, #20
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	b2db      	uxtb	r3, r3
 800927e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d04a      	beq.n	800931c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2b08      	cmp	r3, #8
 800928a:	d847      	bhi.n	800931c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4a25      	ldr	r2, [pc, #148]	; (8009328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d022      	beq.n	80092dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4a24      	ldr	r2, [pc, #144]	; (800932c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d01d      	beq.n	80092dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a22      	ldr	r2, [pc, #136]	; (8009330 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d018      	beq.n	80092dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4a21      	ldr	r2, [pc, #132]	; (8009334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d013      	beq.n	80092dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a1f      	ldr	r2, [pc, #124]	; (8009338 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d00e      	beq.n	80092dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	4a1e      	ldr	r2, [pc, #120]	; (800933c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d009      	beq.n	80092dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4a1c      	ldr	r2, [pc, #112]	; (8009340 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d004      	beq.n	80092dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	4a1b      	ldr	r2, [pc, #108]	; (8009344 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d101      	bne.n	80092e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80092dc:	2301      	movs	r3, #1
 80092de:	e000      	b.n	80092e2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80092e0:	2300      	movs	r3, #0
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d00a      	beq.n	80092fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80092e6:	68fa      	ldr	r2, [r7, #12]
 80092e8:	4b17      	ldr	r3, [pc, #92]	; (8009348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80092ea:	4413      	add	r3, r2
 80092ec:	009b      	lsls	r3, r3, #2
 80092ee:	461a      	mov	r2, r3
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	4a15      	ldr	r2, [pc, #84]	; (800934c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80092f8:	671a      	str	r2, [r3, #112]	; 0x70
 80092fa:	e009      	b.n	8009310 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80092fc:	68fa      	ldr	r2, [r7, #12]
 80092fe:	4b14      	ldr	r3, [pc, #80]	; (8009350 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009300:	4413      	add	r3, r2
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	461a      	mov	r2, r3
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	4a11      	ldr	r2, [pc, #68]	; (8009354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800930e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	3b01      	subs	r3, #1
 8009314:	2201      	movs	r2, #1
 8009316:	409a      	lsls	r2, r3
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800931c:	bf00      	nop
 800931e:	3714      	adds	r7, #20
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr
 8009328:	58025408 	.word	0x58025408
 800932c:	5802541c 	.word	0x5802541c
 8009330:	58025430 	.word	0x58025430
 8009334:	58025444 	.word	0x58025444
 8009338:	58025458 	.word	0x58025458
 800933c:	5802546c 	.word	0x5802546c
 8009340:	58025480 	.word	0x58025480
 8009344:	58025494 	.word	0x58025494
 8009348:	1600963f 	.word	0x1600963f
 800934c:	58025940 	.word	0x58025940
 8009350:	1000823f 	.word	0x1000823f
 8009354:	40020940 	.word	0x40020940

08009358 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b082      	sub	sp, #8
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d101      	bne.n	800936a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8009366:	2301      	movs	r3, #1
 8009368:	e04f      	b.n	800940a <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8009370:	b2db      	uxtb	r3, r3
 8009372:	2b00      	cmp	r3, #0
 8009374:	d106      	bne.n	8009384 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2200      	movs	r2, #0
 800937a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f7fa f840 	bl	8003404 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2202      	movs	r2, #2
 8009388:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	4b20      	ldr	r3, [pc, #128]	; (8009414 <HAL_DMA2D_Init+0xbc>)
 8009394:	4013      	ands	r3, r2
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	6851      	ldr	r1, [r2, #4]
 800939a:	687a      	ldr	r2, [r7, #4]
 800939c:	69d2      	ldr	r2, [r2, #28]
 800939e:	4311      	orrs	r1, r2
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	6812      	ldr	r2, [r2, #0]
 80093a4:	430b      	orrs	r3, r1
 80093a6:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093ae:	4b1a      	ldr	r3, [pc, #104]	; (8009418 <HAL_DMA2D_Init+0xc0>)
 80093b0:	4013      	ands	r3, r2
 80093b2:	687a      	ldr	r2, [r7, #4]
 80093b4:	6891      	ldr	r1, [r2, #8]
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	6992      	ldr	r2, [r2, #24]
 80093ba:	4311      	orrs	r1, r2
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	6812      	ldr	r2, [r2, #0]
 80093c0:	430b      	orrs	r3, r1
 80093c2:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80093ca:	4b14      	ldr	r3, [pc, #80]	; (800941c <HAL_DMA2D_Init+0xc4>)
 80093cc:	4013      	ands	r3, r2
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	68d1      	ldr	r1, [r2, #12]
 80093d2:	687a      	ldr	r2, [r7, #4]
 80093d4:	6812      	ldr	r2, [r2, #0]
 80093d6:	430b      	orrs	r3, r1
 80093d8:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093e0:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	691b      	ldr	r3, [r3, #16]
 80093e8:	051a      	lsls	r2, r3, #20
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	695b      	ldr	r3, [r3, #20]
 80093ee:	055b      	lsls	r3, r3, #21
 80093f0:	431a      	orrs	r2, r3
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	430a      	orrs	r2, r1
 80093f8:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2200      	movs	r2, #0
 80093fe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2201      	movs	r2, #1
 8009404:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8009408:	2300      	movs	r3, #0
}
 800940a:	4618      	mov	r0, r3
 800940c:	3708      	adds	r7, #8
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
 8009412:	bf00      	nop
 8009414:	fff8ffbf 	.word	0xfff8ffbf
 8009418:	fffffef8 	.word	0xfffffef8
 800941c:	ffff0000 	.word	0xffff0000

08009420 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009420:	b480      	push	{r7}
 8009422:	b089      	sub	sp, #36	; 0x24
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800942a:	2300      	movs	r3, #0
 800942c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800942e:	4b89      	ldr	r3, [pc, #548]	; (8009654 <HAL_GPIO_Init+0x234>)
 8009430:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009432:	e194      	b.n	800975e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	2101      	movs	r1, #1
 800943a:	69fb      	ldr	r3, [r7, #28]
 800943c:	fa01 f303 	lsl.w	r3, r1, r3
 8009440:	4013      	ands	r3, r2
 8009442:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	2b00      	cmp	r3, #0
 8009448:	f000 8186 	beq.w	8009758 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	f003 0303 	and.w	r3, r3, #3
 8009454:	2b01      	cmp	r3, #1
 8009456:	d005      	beq.n	8009464 <HAL_GPIO_Init+0x44>
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	f003 0303 	and.w	r3, r3, #3
 8009460:	2b02      	cmp	r3, #2
 8009462:	d130      	bne.n	80094c6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	689b      	ldr	r3, [r3, #8]
 8009468:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800946a:	69fb      	ldr	r3, [r7, #28]
 800946c:	005b      	lsls	r3, r3, #1
 800946e:	2203      	movs	r2, #3
 8009470:	fa02 f303 	lsl.w	r3, r2, r3
 8009474:	43db      	mvns	r3, r3
 8009476:	69ba      	ldr	r2, [r7, #24]
 8009478:	4013      	ands	r3, r2
 800947a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	68da      	ldr	r2, [r3, #12]
 8009480:	69fb      	ldr	r3, [r7, #28]
 8009482:	005b      	lsls	r3, r3, #1
 8009484:	fa02 f303 	lsl.w	r3, r2, r3
 8009488:	69ba      	ldr	r2, [r7, #24]
 800948a:	4313      	orrs	r3, r2
 800948c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	69ba      	ldr	r2, [r7, #24]
 8009492:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800949a:	2201      	movs	r2, #1
 800949c:	69fb      	ldr	r3, [r7, #28]
 800949e:	fa02 f303 	lsl.w	r3, r2, r3
 80094a2:	43db      	mvns	r3, r3
 80094a4:	69ba      	ldr	r2, [r7, #24]
 80094a6:	4013      	ands	r3, r2
 80094a8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	091b      	lsrs	r3, r3, #4
 80094b0:	f003 0201 	and.w	r2, r3, #1
 80094b4:	69fb      	ldr	r3, [r7, #28]
 80094b6:	fa02 f303 	lsl.w	r3, r2, r3
 80094ba:	69ba      	ldr	r2, [r7, #24]
 80094bc:	4313      	orrs	r3, r2
 80094be:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	69ba      	ldr	r2, [r7, #24]
 80094c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	f003 0303 	and.w	r3, r3, #3
 80094ce:	2b03      	cmp	r3, #3
 80094d0:	d017      	beq.n	8009502 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	68db      	ldr	r3, [r3, #12]
 80094d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80094d8:	69fb      	ldr	r3, [r7, #28]
 80094da:	005b      	lsls	r3, r3, #1
 80094dc:	2203      	movs	r2, #3
 80094de:	fa02 f303 	lsl.w	r3, r2, r3
 80094e2:	43db      	mvns	r3, r3
 80094e4:	69ba      	ldr	r2, [r7, #24]
 80094e6:	4013      	ands	r3, r2
 80094e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	689a      	ldr	r2, [r3, #8]
 80094ee:	69fb      	ldr	r3, [r7, #28]
 80094f0:	005b      	lsls	r3, r3, #1
 80094f2:	fa02 f303 	lsl.w	r3, r2, r3
 80094f6:	69ba      	ldr	r2, [r7, #24]
 80094f8:	4313      	orrs	r3, r2
 80094fa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	69ba      	ldr	r2, [r7, #24]
 8009500:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	f003 0303 	and.w	r3, r3, #3
 800950a:	2b02      	cmp	r3, #2
 800950c:	d123      	bne.n	8009556 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800950e:	69fb      	ldr	r3, [r7, #28]
 8009510:	08da      	lsrs	r2, r3, #3
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	3208      	adds	r2, #8
 8009516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800951a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800951c:	69fb      	ldr	r3, [r7, #28]
 800951e:	f003 0307 	and.w	r3, r3, #7
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	220f      	movs	r2, #15
 8009526:	fa02 f303 	lsl.w	r3, r2, r3
 800952a:	43db      	mvns	r3, r3
 800952c:	69ba      	ldr	r2, [r7, #24]
 800952e:	4013      	ands	r3, r2
 8009530:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	691a      	ldr	r2, [r3, #16]
 8009536:	69fb      	ldr	r3, [r7, #28]
 8009538:	f003 0307 	and.w	r3, r3, #7
 800953c:	009b      	lsls	r3, r3, #2
 800953e:	fa02 f303 	lsl.w	r3, r2, r3
 8009542:	69ba      	ldr	r2, [r7, #24]
 8009544:	4313      	orrs	r3, r2
 8009546:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009548:	69fb      	ldr	r3, [r7, #28]
 800954a:	08da      	lsrs	r2, r3, #3
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	3208      	adds	r2, #8
 8009550:	69b9      	ldr	r1, [r7, #24]
 8009552:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800955c:	69fb      	ldr	r3, [r7, #28]
 800955e:	005b      	lsls	r3, r3, #1
 8009560:	2203      	movs	r2, #3
 8009562:	fa02 f303 	lsl.w	r3, r2, r3
 8009566:	43db      	mvns	r3, r3
 8009568:	69ba      	ldr	r2, [r7, #24]
 800956a:	4013      	ands	r3, r2
 800956c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	685b      	ldr	r3, [r3, #4]
 8009572:	f003 0203 	and.w	r2, r3, #3
 8009576:	69fb      	ldr	r3, [r7, #28]
 8009578:	005b      	lsls	r3, r3, #1
 800957a:	fa02 f303 	lsl.w	r3, r2, r3
 800957e:	69ba      	ldr	r2, [r7, #24]
 8009580:	4313      	orrs	r3, r2
 8009582:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	69ba      	ldr	r2, [r7, #24]
 8009588:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009592:	2b00      	cmp	r3, #0
 8009594:	f000 80e0 	beq.w	8009758 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009598:	4b2f      	ldr	r3, [pc, #188]	; (8009658 <HAL_GPIO_Init+0x238>)
 800959a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800959e:	4a2e      	ldr	r2, [pc, #184]	; (8009658 <HAL_GPIO_Init+0x238>)
 80095a0:	f043 0302 	orr.w	r3, r3, #2
 80095a4:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80095a8:	4b2b      	ldr	r3, [pc, #172]	; (8009658 <HAL_GPIO_Init+0x238>)
 80095aa:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80095ae:	f003 0302 	and.w	r3, r3, #2
 80095b2:	60fb      	str	r3, [r7, #12]
 80095b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80095b6:	4a29      	ldr	r2, [pc, #164]	; (800965c <HAL_GPIO_Init+0x23c>)
 80095b8:	69fb      	ldr	r3, [r7, #28]
 80095ba:	089b      	lsrs	r3, r3, #2
 80095bc:	3302      	adds	r3, #2
 80095be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80095c4:	69fb      	ldr	r3, [r7, #28]
 80095c6:	f003 0303 	and.w	r3, r3, #3
 80095ca:	009b      	lsls	r3, r3, #2
 80095cc:	220f      	movs	r2, #15
 80095ce:	fa02 f303 	lsl.w	r3, r2, r3
 80095d2:	43db      	mvns	r3, r3
 80095d4:	69ba      	ldr	r2, [r7, #24]
 80095d6:	4013      	ands	r3, r2
 80095d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	4a20      	ldr	r2, [pc, #128]	; (8009660 <HAL_GPIO_Init+0x240>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d052      	beq.n	8009688 <HAL_GPIO_Init+0x268>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	4a1f      	ldr	r2, [pc, #124]	; (8009664 <HAL_GPIO_Init+0x244>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d031      	beq.n	800964e <HAL_GPIO_Init+0x22e>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	4a1e      	ldr	r2, [pc, #120]	; (8009668 <HAL_GPIO_Init+0x248>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d02b      	beq.n	800964a <HAL_GPIO_Init+0x22a>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	4a1d      	ldr	r2, [pc, #116]	; (800966c <HAL_GPIO_Init+0x24c>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d025      	beq.n	8009646 <HAL_GPIO_Init+0x226>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	4a1c      	ldr	r2, [pc, #112]	; (8009670 <HAL_GPIO_Init+0x250>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d01f      	beq.n	8009642 <HAL_GPIO_Init+0x222>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	4a1b      	ldr	r2, [pc, #108]	; (8009674 <HAL_GPIO_Init+0x254>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d019      	beq.n	800963e <HAL_GPIO_Init+0x21e>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	4a1a      	ldr	r2, [pc, #104]	; (8009678 <HAL_GPIO_Init+0x258>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d013      	beq.n	800963a <HAL_GPIO_Init+0x21a>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	4a19      	ldr	r2, [pc, #100]	; (800967c <HAL_GPIO_Init+0x25c>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d00d      	beq.n	8009636 <HAL_GPIO_Init+0x216>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	4a18      	ldr	r2, [pc, #96]	; (8009680 <HAL_GPIO_Init+0x260>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d007      	beq.n	8009632 <HAL_GPIO_Init+0x212>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	4a17      	ldr	r2, [pc, #92]	; (8009684 <HAL_GPIO_Init+0x264>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d101      	bne.n	800962e <HAL_GPIO_Init+0x20e>
 800962a:	2309      	movs	r3, #9
 800962c:	e02d      	b.n	800968a <HAL_GPIO_Init+0x26a>
 800962e:	230a      	movs	r3, #10
 8009630:	e02b      	b.n	800968a <HAL_GPIO_Init+0x26a>
 8009632:	2308      	movs	r3, #8
 8009634:	e029      	b.n	800968a <HAL_GPIO_Init+0x26a>
 8009636:	2307      	movs	r3, #7
 8009638:	e027      	b.n	800968a <HAL_GPIO_Init+0x26a>
 800963a:	2306      	movs	r3, #6
 800963c:	e025      	b.n	800968a <HAL_GPIO_Init+0x26a>
 800963e:	2305      	movs	r3, #5
 8009640:	e023      	b.n	800968a <HAL_GPIO_Init+0x26a>
 8009642:	2304      	movs	r3, #4
 8009644:	e021      	b.n	800968a <HAL_GPIO_Init+0x26a>
 8009646:	2303      	movs	r3, #3
 8009648:	e01f      	b.n	800968a <HAL_GPIO_Init+0x26a>
 800964a:	2302      	movs	r3, #2
 800964c:	e01d      	b.n	800968a <HAL_GPIO_Init+0x26a>
 800964e:	2301      	movs	r3, #1
 8009650:	e01b      	b.n	800968a <HAL_GPIO_Init+0x26a>
 8009652:	bf00      	nop
 8009654:	58000080 	.word	0x58000080
 8009658:	58024400 	.word	0x58024400
 800965c:	58000400 	.word	0x58000400
 8009660:	58020000 	.word	0x58020000
 8009664:	58020400 	.word	0x58020400
 8009668:	58020800 	.word	0x58020800
 800966c:	58020c00 	.word	0x58020c00
 8009670:	58021000 	.word	0x58021000
 8009674:	58021400 	.word	0x58021400
 8009678:	58021800 	.word	0x58021800
 800967c:	58021c00 	.word	0x58021c00
 8009680:	58022000 	.word	0x58022000
 8009684:	58022400 	.word	0x58022400
 8009688:	2300      	movs	r3, #0
 800968a:	69fa      	ldr	r2, [r7, #28]
 800968c:	f002 0203 	and.w	r2, r2, #3
 8009690:	0092      	lsls	r2, r2, #2
 8009692:	4093      	lsls	r3, r2
 8009694:	69ba      	ldr	r2, [r7, #24]
 8009696:	4313      	orrs	r3, r2
 8009698:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800969a:	4938      	ldr	r1, [pc, #224]	; (800977c <HAL_GPIO_Init+0x35c>)
 800969c:	69fb      	ldr	r3, [r7, #28]
 800969e:	089b      	lsrs	r3, r3, #2
 80096a0:	3302      	adds	r3, #2
 80096a2:	69ba      	ldr	r2, [r7, #24]
 80096a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80096a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	43db      	mvns	r3, r3
 80096b4:	69ba      	ldr	r2, [r7, #24]
 80096b6:	4013      	ands	r3, r2
 80096b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d003      	beq.n	80096ce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80096c6:	69ba      	ldr	r2, [r7, #24]
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	4313      	orrs	r3, r2
 80096cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80096ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80096d2:	69bb      	ldr	r3, [r7, #24]
 80096d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80096d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	43db      	mvns	r3, r3
 80096e2:	69ba      	ldr	r2, [r7, #24]
 80096e4:	4013      	ands	r3, r2
 80096e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d003      	beq.n	80096fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80096f4:	69ba      	ldr	r2, [r7, #24]
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	4313      	orrs	r3, r2
 80096fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80096fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009700:	69bb      	ldr	r3, [r7, #24]
 8009702:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	43db      	mvns	r3, r3
 800970e:	69ba      	ldr	r2, [r7, #24]
 8009710:	4013      	ands	r3, r2
 8009712:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	685b      	ldr	r3, [r3, #4]
 8009718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800971c:	2b00      	cmp	r3, #0
 800971e:	d003      	beq.n	8009728 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8009720:	69ba      	ldr	r2, [r7, #24]
 8009722:	693b      	ldr	r3, [r7, #16]
 8009724:	4313      	orrs	r3, r2
 8009726:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	69ba      	ldr	r2, [r7, #24]
 800972c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	43db      	mvns	r3, r3
 8009738:	69ba      	ldr	r2, [r7, #24]
 800973a:	4013      	ands	r3, r2
 800973c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009746:	2b00      	cmp	r3, #0
 8009748:	d003      	beq.n	8009752 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800974a:	69ba      	ldr	r2, [r7, #24]
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	4313      	orrs	r3, r2
 8009750:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	69ba      	ldr	r2, [r7, #24]
 8009756:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009758:	69fb      	ldr	r3, [r7, #28]
 800975a:	3301      	adds	r3, #1
 800975c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	681a      	ldr	r2, [r3, #0]
 8009762:	69fb      	ldr	r3, [r7, #28]
 8009764:	fa22 f303 	lsr.w	r3, r2, r3
 8009768:	2b00      	cmp	r3, #0
 800976a:	f47f ae63 	bne.w	8009434 <HAL_GPIO_Init+0x14>
  }
}
 800976e:	bf00      	nop
 8009770:	bf00      	nop
 8009772:	3724      	adds	r7, #36	; 0x24
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr
 800977c:	58000400 	.word	0x58000400

08009780 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009780:	b480      	push	{r7}
 8009782:	b085      	sub	sp, #20
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	460b      	mov	r3, r1
 800978a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	691a      	ldr	r2, [r3, #16]
 8009790:	887b      	ldrh	r3, [r7, #2]
 8009792:	4013      	ands	r3, r2
 8009794:	2b00      	cmp	r3, #0
 8009796:	d002      	beq.n	800979e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009798:	2301      	movs	r3, #1
 800979a:	73fb      	strb	r3, [r7, #15]
 800979c:	e001      	b.n	80097a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800979e:	2300      	movs	r3, #0
 80097a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80097a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3714      	adds	r7, #20
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr

080097b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b083      	sub	sp, #12
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	460b      	mov	r3, r1
 80097ba:	807b      	strh	r3, [r7, #2]
 80097bc:	4613      	mov	r3, r2
 80097be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80097c0:	787b      	ldrb	r3, [r7, #1]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d003      	beq.n	80097ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80097c6:	887a      	ldrh	r2, [r7, #2]
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80097cc:	e003      	b.n	80097d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80097ce:	887b      	ldrh	r3, [r7, #2]
 80097d0:	041a      	lsls	r2, r3, #16
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	619a      	str	r2, [r3, #24]
}
 80097d6:	bf00      	nop
 80097d8:	370c      	adds	r7, #12
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr

080097e2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80097e2:	b580      	push	{r7, lr}
 80097e4:	b082      	sub	sp, #8
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	4603      	mov	r3, r0
 80097ea:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80097ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097f0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80097f4:	88fb      	ldrh	r3, [r7, #6]
 80097f6:	4013      	ands	r3, r2
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d008      	beq.n	800980e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80097fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009800:	88fb      	ldrh	r3, [r7, #6]
 8009802:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009806:	88fb      	ldrh	r3, [r7, #6]
 8009808:	4618      	mov	r0, r3
 800980a:	f000 f804 	bl	8009816 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800980e:	bf00      	nop
 8009810:	3708      	adds	r7, #8
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}

08009816 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009816:	b480      	push	{r7}
 8009818:	b083      	sub	sp, #12
 800981a:	af00      	add	r7, sp, #0
 800981c:	4603      	mov	r3, r0
 800981e:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8009820:	bf00      	nop
 8009822:	370c      	adds	r7, #12
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr

0800982c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b084      	sub	sp, #16
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d101      	bne.n	800983e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800983a:	2301      	movs	r3, #1
 800983c:	e0bf      	b.n	80099be <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8009844:	b2db      	uxtb	r3, r3
 8009846:	2b00      	cmp	r3, #0
 8009848:	d106      	bne.n	8009858 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2200      	movs	r2, #0
 800984e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f7f9 fdf8 	bl	8003448 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2202      	movs	r2, #2
 800985c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	699a      	ldr	r2, [r3, #24]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800986e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	6999      	ldr	r1, [r3, #24]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	685a      	ldr	r2, [r3, #4]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	689b      	ldr	r3, [r3, #8]
 800987e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009884:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	691b      	ldr	r3, [r3, #16]
 800988a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	430a      	orrs	r2, r1
 8009892:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	6899      	ldr	r1, [r3, #8]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681a      	ldr	r2, [r3, #0]
 800989e:	4b4a      	ldr	r3, [pc, #296]	; (80099c8 <HAL_LTDC_Init+0x19c>)
 80098a0:	400b      	ands	r3, r1
 80098a2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	695b      	ldr	r3, [r3, #20]
 80098a8:	041b      	lsls	r3, r3, #16
 80098aa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	6899      	ldr	r1, [r3, #8]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	699a      	ldr	r2, [r3, #24]
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	431a      	orrs	r2, r3
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	430a      	orrs	r2, r1
 80098c0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	68d9      	ldr	r1, [r3, #12]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681a      	ldr	r2, [r3, #0]
 80098cc:	4b3e      	ldr	r3, [pc, #248]	; (80099c8 <HAL_LTDC_Init+0x19c>)
 80098ce:	400b      	ands	r3, r1
 80098d0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	69db      	ldr	r3, [r3, #28]
 80098d6:	041b      	lsls	r3, r3, #16
 80098d8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	68d9      	ldr	r1, [r3, #12]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6a1a      	ldr	r2, [r3, #32]
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	431a      	orrs	r2, r3
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	430a      	orrs	r2, r1
 80098ee:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	6919      	ldr	r1, [r3, #16]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681a      	ldr	r2, [r3, #0]
 80098fa:	4b33      	ldr	r3, [pc, #204]	; (80099c8 <HAL_LTDC_Init+0x19c>)
 80098fc:	400b      	ands	r3, r1
 80098fe:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009904:	041b      	lsls	r3, r3, #16
 8009906:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	6919      	ldr	r1, [r3, #16]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	431a      	orrs	r2, r3
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	430a      	orrs	r2, r1
 800991c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	6959      	ldr	r1, [r3, #20]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681a      	ldr	r2, [r3, #0]
 8009928:	4b27      	ldr	r3, [pc, #156]	; (80099c8 <HAL_LTDC_Init+0x19c>)
 800992a:	400b      	ands	r3, r1
 800992c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009932:	041b      	lsls	r3, r3, #16
 8009934:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	6959      	ldr	r1, [r3, #20]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	431a      	orrs	r2, r3
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	430a      	orrs	r2, r1
 800994a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009952:	021b      	lsls	r3, r3, #8
 8009954:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800995c:	041b      	lsls	r3, r3, #16
 800995e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800996e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009976:	68ba      	ldr	r2, [r7, #8]
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	4313      	orrs	r3, r2
 800997c:	687a      	ldr	r2, [r7, #4]
 800997e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8009982:	431a      	orrs	r2, r3
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	430a      	orrs	r2, r1
 800998a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f042 0206 	orr.w	r2, r2, #6
 800999a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	699a      	ldr	r2, [r3, #24]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f042 0201 	orr.w	r2, r2, #1
 80099aa:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2200      	movs	r2, #0
 80099b0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2201      	movs	r2, #1
 80099b8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80099bc:	2300      	movs	r3, #0
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3710      	adds	r7, #16
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}
 80099c6:	bf00      	nop
 80099c8:	f000f800 	.word	0xf000f800

080099cc <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b084      	sub	sp, #16
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099da:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099e2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f003 0304 	and.w	r3, r3, #4
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d023      	beq.n	8009a36 <HAL_LTDC_IRQHandler+0x6a>
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	f003 0304 	and.w	r3, r3, #4
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d01e      	beq.n	8009a36 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f022 0204 	bic.w	r2, r2, #4
 8009a06:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	2204      	movs	r2, #4
 8009a0e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009a16:	f043 0201 	orr.w	r2, r3, #1
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2204      	movs	r2, #4
 8009a24:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f000 f86f 	bl	8009b14 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	f003 0302 	and.w	r3, r3, #2
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d023      	beq.n	8009a88 <HAL_LTDC_IRQHandler+0xbc>
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	f003 0302 	and.w	r3, r3, #2
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d01e      	beq.n	8009a88 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f022 0202 	bic.w	r2, r2, #2
 8009a58:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	2202      	movs	r2, #2
 8009a60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009a68:	f043 0202 	orr.w	r2, r3, #2
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2204      	movs	r2, #4
 8009a76:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f000 f846 	bl	8009b14 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f003 0301 	and.w	r3, r3, #1
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d01b      	beq.n	8009aca <HAL_LTDC_IRQHandler+0xfe>
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	f003 0301 	and.w	r3, r3, #1
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d016      	beq.n	8009aca <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f022 0201 	bic.w	r2, r2, #1
 8009aaa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	2201      	movs	r2, #1
 8009ab2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f000 f82f 	bl	8009b28 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	f003 0308 	and.w	r3, r3, #8
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d01b      	beq.n	8009b0c <HAL_LTDC_IRQHandler+0x140>
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	f003 0308 	and.w	r3, r3, #8
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d016      	beq.n	8009b0c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f022 0208 	bic.w	r2, r2, #8
 8009aec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	2208      	movs	r2, #8
 8009af4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2201      	movs	r2, #1
 8009afa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2200      	movs	r2, #0
 8009b02:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f7f8 fd60 	bl	80025cc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8009b0c:	bf00      	nop
 8009b0e:	3710      	adds	r7, #16
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}

08009b14 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b083      	sub	sp, #12
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8009b1c:	bf00      	nop
 8009b1e:	370c      	adds	r7, #12
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr

08009b28 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b083      	sub	sp, #12
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8009b30:	bf00      	nop
 8009b32:	370c      	adds	r7, #12
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr

08009b3c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009b3c:	b5b0      	push	{r4, r5, r7, lr}
 8009b3e:	b084      	sub	sp, #16
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	60f8      	str	r0, [r7, #12]
 8009b44:	60b9      	str	r1, [r7, #8]
 8009b46:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8009b4e:	2b01      	cmp	r3, #1
 8009b50:	d101      	bne.n	8009b56 <HAL_LTDC_ConfigLayer+0x1a>
 8009b52:	2302      	movs	r3, #2
 8009b54:	e02c      	b.n	8009bb0 <HAL_LTDC_ConfigLayer+0x74>
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	2201      	movs	r2, #1
 8009b5a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2202      	movs	r2, #2
 8009b62:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009b66:	68fa      	ldr	r2, [r7, #12]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2134      	movs	r1, #52	; 0x34
 8009b6c:	fb01 f303 	mul.w	r3, r1, r3
 8009b70:	4413      	add	r3, r2
 8009b72:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	4614      	mov	r4, r2
 8009b7a:	461d      	mov	r5, r3
 8009b7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009b7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009b80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009b82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009b84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009b86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009b88:	682b      	ldr	r3, [r5, #0]
 8009b8a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	68b9      	ldr	r1, [r7, #8]
 8009b90:	68f8      	ldr	r0, [r7, #12]
 8009b92:	f000 f877 	bl	8009c84 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	2201      	movs	r2, #1
 8009b9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2201      	movs	r2, #1
 8009ba2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8009bae:	2300      	movs	r3, #0
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3710      	adds	r7, #16
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bdb0      	pop	{r4, r5, r7, pc}

08009bb8 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b086      	sub	sp, #24
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	60f8      	str	r0, [r7, #12]
 8009bc0:	60b9      	str	r1, [r7, #8]
 8009bc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8009bca:	2b01      	cmp	r3, #1
 8009bcc:	d101      	bne.n	8009bd2 <HAL_LTDC_SetAddress+0x1a>
 8009bce:	2302      	movs	r3, #2
 8009bd0:	e024      	b.n	8009c1c <HAL_LTDC_SetAddress+0x64>
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2202      	movs	r2, #2
 8009bde:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2234      	movs	r2, #52	; 0x34
 8009be6:	fb02 f303 	mul.w	r3, r2, r3
 8009bea:	3338      	adds	r3, #56	; 0x38
 8009bec:	68fa      	ldr	r2, [r7, #12]
 8009bee:	4413      	add	r3, r2
 8009bf0:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	68ba      	ldr	r2, [r7, #8]
 8009bf6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009bf8:	687a      	ldr	r2, [r7, #4]
 8009bfa:	6979      	ldr	r1, [r7, #20]
 8009bfc:	68f8      	ldr	r0, [r7, #12]
 8009bfe:	f000 f841 	bl	8009c84 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	2201      	movs	r2, #1
 8009c08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2200      	movs	r2, #0
 8009c16:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8009c1a:	2300      	movs	r3, #0
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3718      	adds	r7, #24
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <HAL_LTDC_Reload>:
  *                      LTDC_RELOAD_VERTICAL_BLANKING  : Reload in the next Vertical Blanking
  * @note   User application may resort to HAL_LTDC_ReloadEventCallback() at reload interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef  HAL_LTDC_Reload(LTDC_HandleTypeDef *hltdc, uint32_t ReloadType)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b083      	sub	sp, #12
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_RELOAD(ReloadType));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8009c34:	2b01      	cmp	r3, #1
 8009c36:	d101      	bne.n	8009c3c <HAL_LTDC_Reload+0x18>
 8009c38:	2302      	movs	r3, #2
 8009c3a:	e01c      	b.n	8009c76 <HAL_LTDC_Reload+0x52>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2201      	movs	r2, #1
 8009c40:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2202      	movs	r2, #2
 8009c48:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable the Reload interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f042 0208 	orr.w	r2, r2, #8
 8009c5a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Apply Reload type */
  hltdc->Instance->SRCR = ReloadType;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	683a      	ldr	r2, [r7, #0]
 8009c62:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2201      	movs	r2, #1
 8009c68:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8009c74:	2300      	movs	r3, #0
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	370c      	adds	r7, #12
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c80:	4770      	bx	lr
	...

08009c84 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b089      	sub	sp, #36	; 0x24
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	60f8      	str	r0, [r7, #12]
 8009c8c:	60b9      	str	r1, [r7, #8]
 8009c8e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	685a      	ldr	r2, [r3, #4]
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	68db      	ldr	r3, [r3, #12]
 8009c9a:	0c1b      	lsrs	r3, r3, #16
 8009c9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ca0:	4413      	add	r3, r2
 8009ca2:	041b      	lsls	r3, r3, #16
 8009ca4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	461a      	mov	r2, r3
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	01db      	lsls	r3, r3, #7
 8009cb0:	4413      	add	r3, r2
 8009cb2:	3384      	adds	r3, #132	; 0x84
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	68fa      	ldr	r2, [r7, #12]
 8009cb8:	6812      	ldr	r2, [r2, #0]
 8009cba:	4611      	mov	r1, r2
 8009cbc:	687a      	ldr	r2, [r7, #4]
 8009cbe:	01d2      	lsls	r2, r2, #7
 8009cc0:	440a      	add	r2, r1
 8009cc2:	3284      	adds	r2, #132	; 0x84
 8009cc4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8009cc8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	68db      	ldr	r3, [r3, #12]
 8009cd4:	0c1b      	lsrs	r3, r3, #16
 8009cd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009cda:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009cdc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	01db      	lsls	r3, r3, #7
 8009ce8:	440b      	add	r3, r1
 8009cea:	3384      	adds	r3, #132	; 0x84
 8009cec:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009cee:	69fb      	ldr	r3, [r7, #28]
 8009cf0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009cf2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	68da      	ldr	r2, [r3, #12]
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	68db      	ldr	r3, [r3, #12]
 8009cfe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009d02:	4413      	add	r3, r2
 8009d04:	041b      	lsls	r3, r3, #16
 8009d06:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	461a      	mov	r2, r3
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	01db      	lsls	r3, r3, #7
 8009d12:	4413      	add	r3, r2
 8009d14:	3384      	adds	r3, #132	; 0x84
 8009d16:	689b      	ldr	r3, [r3, #8]
 8009d18:	68fa      	ldr	r2, [r7, #12]
 8009d1a:	6812      	ldr	r2, [r2, #0]
 8009d1c:	4611      	mov	r1, r2
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	01d2      	lsls	r2, r2, #7
 8009d22:	440a      	add	r2, r1
 8009d24:	3284      	adds	r2, #132	; 0x84
 8009d26:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8009d2a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	689a      	ldr	r2, [r3, #8]
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	68db      	ldr	r3, [r3, #12]
 8009d36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009d3a:	4413      	add	r3, r2
 8009d3c:	1c5a      	adds	r2, r3, #1
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	4619      	mov	r1, r3
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	01db      	lsls	r3, r3, #7
 8009d48:	440b      	add	r3, r1
 8009d4a:	3384      	adds	r3, #132	; 0x84
 8009d4c:	4619      	mov	r1, r3
 8009d4e:	69fb      	ldr	r3, [r7, #28]
 8009d50:	4313      	orrs	r3, r2
 8009d52:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	461a      	mov	r2, r3
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	01db      	lsls	r3, r3, #7
 8009d5e:	4413      	add	r3, r2
 8009d60:	3384      	adds	r3, #132	; 0x84
 8009d62:	691b      	ldr	r3, [r3, #16]
 8009d64:	68fa      	ldr	r2, [r7, #12]
 8009d66:	6812      	ldr	r2, [r2, #0]
 8009d68:	4611      	mov	r1, r2
 8009d6a:	687a      	ldr	r2, [r7, #4]
 8009d6c:	01d2      	lsls	r2, r2, #7
 8009d6e:	440a      	add	r2, r1
 8009d70:	3284      	adds	r2, #132	; 0x84
 8009d72:	f023 0307 	bic.w	r3, r3, #7
 8009d76:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	461a      	mov	r2, r3
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	01db      	lsls	r3, r3, #7
 8009d82:	4413      	add	r3, r2
 8009d84:	3384      	adds	r3, #132	; 0x84
 8009d86:	461a      	mov	r2, r3
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	691b      	ldr	r3, [r3, #16]
 8009d8c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009d94:	021b      	lsls	r3, r3, #8
 8009d96:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009d9e:	041b      	lsls	r3, r3, #16
 8009da0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	699b      	ldr	r3, [r3, #24]
 8009da6:	061b      	lsls	r3, r3, #24
 8009da8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	461a      	mov	r2, r3
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	01db      	lsls	r3, r3, #7
 8009db4:	4413      	add	r3, r2
 8009db6:	3384      	adds	r3, #132	; 0x84
 8009db8:	699b      	ldr	r3, [r3, #24]
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	461a      	mov	r2, r3
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	01db      	lsls	r3, r3, #7
 8009dc4:	4413      	add	r3, r2
 8009dc6:	3384      	adds	r3, #132	; 0x84
 8009dc8:	461a      	mov	r2, r3
 8009dca:	2300      	movs	r3, #0
 8009dcc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009dd4:	461a      	mov	r2, r3
 8009dd6:	69fb      	ldr	r3, [r7, #28]
 8009dd8:	431a      	orrs	r2, r3
 8009dda:	69bb      	ldr	r3, [r7, #24]
 8009ddc:	431a      	orrs	r2, r3
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	4619      	mov	r1, r3
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	01db      	lsls	r3, r3, #7
 8009de8:	440b      	add	r3, r1
 8009dea:	3384      	adds	r3, #132	; 0x84
 8009dec:	4619      	mov	r1, r3
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	4313      	orrs	r3, r2
 8009df2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	461a      	mov	r2, r3
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	01db      	lsls	r3, r3, #7
 8009dfe:	4413      	add	r3, r2
 8009e00:	3384      	adds	r3, #132	; 0x84
 8009e02:	695b      	ldr	r3, [r3, #20]
 8009e04:	68fa      	ldr	r2, [r7, #12]
 8009e06:	6812      	ldr	r2, [r2, #0]
 8009e08:	4611      	mov	r1, r2
 8009e0a:	687a      	ldr	r2, [r7, #4]
 8009e0c:	01d2      	lsls	r2, r2, #7
 8009e0e:	440a      	add	r2, r1
 8009e10:	3284      	adds	r2, #132	; 0x84
 8009e12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009e16:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	01db      	lsls	r3, r3, #7
 8009e22:	4413      	add	r3, r2
 8009e24:	3384      	adds	r3, #132	; 0x84
 8009e26:	461a      	mov	r2, r3
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	695b      	ldr	r3, [r3, #20]
 8009e2c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	461a      	mov	r2, r3
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	01db      	lsls	r3, r3, #7
 8009e38:	4413      	add	r3, r2
 8009e3a:	3384      	adds	r3, #132	; 0x84
 8009e3c:	69da      	ldr	r2, [r3, #28]
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	4619      	mov	r1, r3
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	01db      	lsls	r3, r3, #7
 8009e48:	440b      	add	r3, r1
 8009e4a:	3384      	adds	r3, #132	; 0x84
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	4b58      	ldr	r3, [pc, #352]	; (8009fb0 <LTDC_SetConfig+0x32c>)
 8009e50:	4013      	ands	r3, r2
 8009e52:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	69da      	ldr	r2, [r3, #28]
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	6a1b      	ldr	r3, [r3, #32]
 8009e5c:	68f9      	ldr	r1, [r7, #12]
 8009e5e:	6809      	ldr	r1, [r1, #0]
 8009e60:	4608      	mov	r0, r1
 8009e62:	6879      	ldr	r1, [r7, #4]
 8009e64:	01c9      	lsls	r1, r1, #7
 8009e66:	4401      	add	r1, r0
 8009e68:	3184      	adds	r1, #132	; 0x84
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	461a      	mov	r2, r3
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	01db      	lsls	r3, r3, #7
 8009e78:	4413      	add	r3, r2
 8009e7a:	3384      	adds	r3, #132	; 0x84
 8009e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	461a      	mov	r2, r3
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	01db      	lsls	r3, r3, #7
 8009e88:	4413      	add	r3, r2
 8009e8a:	3384      	adds	r3, #132	; 0x84
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	2300      	movs	r3, #0
 8009e90:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	461a      	mov	r2, r3
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	01db      	lsls	r3, r3, #7
 8009e9c:	4413      	add	r3, r2
 8009e9e:	3384      	adds	r3, #132	; 0x84
 8009ea0:	461a      	mov	r2, r3
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea6:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	691b      	ldr	r3, [r3, #16]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d102      	bne.n	8009eb6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8009eb0:	2304      	movs	r3, #4
 8009eb2:	61fb      	str	r3, [r7, #28]
 8009eb4:	e01b      	b.n	8009eee <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	691b      	ldr	r3, [r3, #16]
 8009eba:	2b01      	cmp	r3, #1
 8009ebc:	d102      	bne.n	8009ec4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8009ebe:	2303      	movs	r3, #3
 8009ec0:	61fb      	str	r3, [r7, #28]
 8009ec2:	e014      	b.n	8009eee <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	691b      	ldr	r3, [r3, #16]
 8009ec8:	2b04      	cmp	r3, #4
 8009eca:	d00b      	beq.n	8009ee4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009ed0:	2b02      	cmp	r3, #2
 8009ed2:	d007      	beq.n	8009ee4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009ed8:	2b03      	cmp	r3, #3
 8009eda:	d003      	beq.n	8009ee4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009ee0:	2b07      	cmp	r3, #7
 8009ee2:	d102      	bne.n	8009eea <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8009ee4:	2302      	movs	r3, #2
 8009ee6:	61fb      	str	r3, [r7, #28]
 8009ee8:	e001      	b.n	8009eee <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8009eea:	2301      	movs	r3, #1
 8009eec:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	461a      	mov	r2, r3
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	01db      	lsls	r3, r3, #7
 8009ef8:	4413      	add	r3, r2
 8009efa:	3384      	adds	r3, #132	; 0x84
 8009efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009efe:	68fa      	ldr	r2, [r7, #12]
 8009f00:	6812      	ldr	r2, [r2, #0]
 8009f02:	4611      	mov	r1, r2
 8009f04:	687a      	ldr	r2, [r7, #4]
 8009f06:	01d2      	lsls	r2, r2, #7
 8009f08:	440a      	add	r2, r1
 8009f0a:	3284      	adds	r2, #132	; 0x84
 8009f0c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8009f10:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f16:	69fa      	ldr	r2, [r7, #28]
 8009f18:	fb02 f303 	mul.w	r3, r2, r3
 8009f1c:	041a      	lsls	r2, r3, #16
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	6859      	ldr	r1, [r3, #4]
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	1acb      	subs	r3, r1, r3
 8009f28:	69f9      	ldr	r1, [r7, #28]
 8009f2a:	fb01 f303 	mul.w	r3, r1, r3
 8009f2e:	3307      	adds	r3, #7
 8009f30:	68f9      	ldr	r1, [r7, #12]
 8009f32:	6809      	ldr	r1, [r1, #0]
 8009f34:	4608      	mov	r0, r1
 8009f36:	6879      	ldr	r1, [r7, #4]
 8009f38:	01c9      	lsls	r1, r1, #7
 8009f3a:	4401      	add	r1, r0
 8009f3c:	3184      	adds	r1, #132	; 0x84
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	461a      	mov	r2, r3
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	01db      	lsls	r3, r3, #7
 8009f4c:	4413      	add	r3, r2
 8009f4e:	3384      	adds	r3, #132	; 0x84
 8009f50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4619      	mov	r1, r3
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	01db      	lsls	r3, r3, #7
 8009f5c:	440b      	add	r3, r1
 8009f5e:	3384      	adds	r3, #132	; 0x84
 8009f60:	4619      	mov	r1, r3
 8009f62:	4b14      	ldr	r3, [pc, #80]	; (8009fb4 <LTDC_SetConfig+0x330>)
 8009f64:	4013      	ands	r3, r2
 8009f66:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	461a      	mov	r2, r3
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	01db      	lsls	r3, r3, #7
 8009f72:	4413      	add	r3, r2
 8009f74:	3384      	adds	r3, #132	; 0x84
 8009f76:	461a      	mov	r2, r3
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f7c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	461a      	mov	r2, r3
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	01db      	lsls	r3, r3, #7
 8009f88:	4413      	add	r3, r2
 8009f8a:	3384      	adds	r3, #132	; 0x84
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	68fa      	ldr	r2, [r7, #12]
 8009f90:	6812      	ldr	r2, [r2, #0]
 8009f92:	4611      	mov	r1, r2
 8009f94:	687a      	ldr	r2, [r7, #4]
 8009f96:	01d2      	lsls	r2, r2, #7
 8009f98:	440a      	add	r2, r1
 8009f9a:	3284      	adds	r2, #132	; 0x84
 8009f9c:	f043 0301 	orr.w	r3, r3, #1
 8009fa0:	6013      	str	r3, [r2, #0]
}
 8009fa2:	bf00      	nop
 8009fa4:	3724      	adds	r7, #36	; 0x24
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fac:	4770      	bx	lr
 8009fae:	bf00      	nop
 8009fb0:	fffff8f8 	.word	0xfffff8f8
 8009fb4:	fffff800 	.word	0xfffff800

08009fb8 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b083      	sub	sp, #12
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d101      	bne.n	8009fca <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	e017      	b.n	8009ffa <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fd0:	b2db      	uxtb	r3, r3
 8009fd2:	2b02      	cmp	r3, #2
 8009fd4:	d004      	beq.n	8009fe0 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2280      	movs	r2, #128	; 0x80
 8009fda:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
 8009fdc:	2301      	movs	r3, #1
 8009fde:	e00c      	b.n	8009ffa <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2204      	movs	r2, #4
 8009fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	68da      	ldr	r2, [r3, #12]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f022 0201 	bic.w	r2, r2, #1
 8009ff6:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 8009ff8:	2300      	movs	r3, #0
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	370c      	adds	r7, #12
 8009ffe:	46bd      	mov	sp, r7
 800a000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a004:	4770      	bx	lr
	...

0800a008 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b086      	sub	sp, #24
 800a00c:	af02      	add	r7, sp, #8
 800a00e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a010:	2300      	movs	r3, #0
 800a012:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800a014:	f7fa f86e 	bl	80040f4 <HAL_GetTick>
 800a018:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d102      	bne.n	800a026 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 800a020:	2301      	movs	r3, #1
 800a022:	73fb      	strb	r3, [r7, #15]
 800a024:	e0a5      	b.n	800a172 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2200      	movs	r2, #0
 800a02a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a030:	2b00      	cmp	r3, #0
 800a032:	f040 809e 	bne.w	800a172 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f7f9 fb44 	bl	80036c4 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 800a03c:	f241 3188 	movw	r1, #5000	; 0x1388
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f000 fc21 	bl	800a888 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	689a      	ldr	r2, [r3, #8]
 800a04c:	4b4b      	ldr	r3, [pc, #300]	; (800a17c <HAL_OSPI_Init+0x174>)
 800a04e:	4013      	ands	r3, r2
 800a050:	687a      	ldr	r2, [r7, #4]
 800a052:	68d1      	ldr	r1, [r2, #12]
 800a054:	687a      	ldr	r2, [r7, #4]
 800a056:	6912      	ldr	r2, [r2, #16]
 800a058:	3a01      	subs	r2, #1
 800a05a:	0412      	lsls	r2, r2, #16
 800a05c:	4311      	orrs	r1, r2
 800a05e:	687a      	ldr	r2, [r7, #4]
 800a060:	6952      	ldr	r2, [r2, #20]
 800a062:	3a01      	subs	r2, #1
 800a064:	0212      	lsls	r2, r2, #8
 800a066:	4311      	orrs	r1, r2
 800a068:	687a      	ldr	r2, [r7, #4]
 800a06a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a06c:	4311      	orrs	r1, r2
 800a06e:	687a      	ldr	r2, [r7, #4]
 800a070:	69d2      	ldr	r2, [r2, #28]
 800a072:	4311      	orrs	r1, r2
 800a074:	687a      	ldr	r2, [r7, #4]
 800a076:	6812      	ldr	r2, [r2, #0]
 800a078:	430b      	orrs	r3, r1
 800a07a:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	68db      	ldr	r3, [r3, #12]
 800a082:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6a1a      	ldr	r2, [r3, #32]
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	430a      	orrs	r2, r1
 800a090:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a096:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	430a      	orrs	r2, r1
 800a0a2:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	687a      	ldr	r2, [r7, #4]
 800a0aa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a0ac:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	685b      	ldr	r3, [r3, #4]
 800a0bc:	3b01      	subs	r3, #1
 800a0be:	021a      	lsls	r2, r3, #8
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	430a      	orrs	r2, r1
 800a0c6:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0cc:	9300      	str	r3, [sp, #0]
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	2120      	movs	r1, #32
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f001 f90b 	bl	800b2f0 <OSPI_WaitFlagStateUntilTimeout>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800a0de:	7bfb      	ldrb	r3, [r7, #15]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d146      	bne.n	800a172 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	68db      	ldr	r3, [r3, #12]
 800a0ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f2:	1e5a      	subs	r2, r3, #1
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	430a      	orrs	r2, r1
 800a0fa:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	689a      	ldr	r2, [r3, #8]
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	430a      	orrs	r2, r1
 800a110:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800a11a:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a126:	431a      	orrs	r2, r3
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	430a      	orrs	r2, r1
 800a12e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	681a      	ldr	r2, [r3, #0]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f042 0201 	orr.w	r2, r2, #1
 800a140:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	699b      	ldr	r3, [r3, #24]
 800a146:	2b02      	cmp	r3, #2
 800a148:	d107      	bne.n	800a15a <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	689a      	ldr	r2, [r3, #8]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f042 0202 	orr.w	r2, r2, #2
 800a158:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	68db      	ldr	r3, [r3, #12]
 800a15e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a162:	d103      	bne.n	800a16c <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2201      	movs	r2, #1
 800a168:	651a      	str	r2, [r3, #80]	; 0x50
 800a16a:	e002      	b.n	800a172 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2202      	movs	r2, #2
 800a170:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 800a172:	7bfb      	ldrb	r3, [r7, #15]
}
 800a174:	4618      	mov	r0, r3
 800a176:	3710      	adds	r7, #16
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}
 800a17c:	f8e0f8f4 	.word	0xf8e0f8f4

0800a180 <HAL_OSPI_IRQHandler>:
  * @brief  Handle OSPI interrupt request.
  * @param  hospi : OSPI handle
  * @retval None
  */
void HAL_OSPI_IRQHandler(OSPI_HandleTypeDef *hospi)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b086      	sub	sp, #24
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	3350      	adds	r3, #80	; 0x50
 800a18e:	617b      	str	r3, [r7, #20]
  uint32_t flag           = hospi->Instance->SR;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	6a1b      	ldr	r3, [r3, #32]
 800a196:	613b      	str	r3, [r7, #16]
  uint32_t itsource       = hospi->Instance->CR;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	60fb      	str	r3, [r7, #12]
  uint32_t currentstate   = hospi->State;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1a4:	60bb      	str	r3, [r7, #8]

  /* OctoSPI fifo threshold interrupt occurred -------------------------------*/
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	f003 0304 	and.w	r3, r3, #4
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d03a      	beq.n	800a226 <HAL_OSPI_IRQHandler+0xa6>
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d035      	beq.n	800a226 <HAL_OSPI_IRQHandler+0xa6>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	2b18      	cmp	r3, #24
 800a1be:	d10f      	bne.n	800a1e0 <HAL_OSPI_IRQHandler+0x60>
    {
      /* Write a data in the fifo */
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1c4:	781a      	ldrb	r2, [r3, #0]
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ce:	1c5a      	adds	r2, r3, #1
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	641a      	str	r2, [r3, #64]	; 0x40
      hospi->XferCount--;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1d8:	1e5a      	subs	r2, r3, #1
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	649a      	str	r2, [r3, #72]	; 0x48
 800a1de:	e012      	b.n	800a206 <HAL_OSPI_IRQHandler+0x86>
    }
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	2b28      	cmp	r3, #40	; 0x28
 800a1e4:	d10f      	bne.n	800a206 <HAL_OSPI_IRQHandler+0x86>
    {
      /* Read a data from the fifo */
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ea:	697a      	ldr	r2, [r7, #20]
 800a1ec:	7812      	ldrb	r2, [r2, #0]
 800a1ee:	b2d2      	uxtb	r2, r2
 800a1f0:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1f6:	1c5a      	adds	r2, r3, #1
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	641a      	str	r2, [r3, #64]	; 0x40
      hospi->XferCount--;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a200:	1e5a      	subs	r2, r3, #1
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	649a      	str	r2, [r3, #72]	; 0x48
    else
    {
      /* Nothing to do */
    }

    if (hospi->XferCount == 0U)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d107      	bne.n	800a21e <HAL_OSPI_IRQHandler+0x9e>
    {
      /* All data have been received or transmitted for the transfer */
      /* Disable fifo threshold interrupt */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	681a      	ldr	r2, [r3, #0]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a21c:	601a      	str	r2, [r3, #0]

    /* Fifo threshold callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->FifoThresholdCallback(hospi);
#else
    HAL_OSPI_FifoThresholdCallback(hospi);
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 faf6 	bl	800a810 <HAL_OSPI_FifoThresholdCallback>
 800a224:	e0e7      	b.n	800a3f6 <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
  /* OctoSPI transfer complete interrupt occurred ----------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	f003 0302 	and.w	r3, r3, #2
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d067      	beq.n	800a300 <HAL_OSPI_IRQHandler+0x180>
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a236:	2b00      	cmp	r3, #0
 800a238:	d062      	beq.n	800a300 <HAL_OSPI_IRQHandler+0x180>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	2b28      	cmp	r3, #40	; 0x28
 800a23e:	d131      	bne.n	800a2a4 <HAL_OSPI_IRQHandler+0x124>
    {
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a244:	2b00      	cmp	r3, #0
 800a246:	d015      	beq.n	800a274 <HAL_OSPI_IRQHandler+0xf4>
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d010      	beq.n	800a274 <HAL_OSPI_IRQHandler+0xf4>
      {
        /* Read the last data received in the fifo */
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a256:	697a      	ldr	r2, [r7, #20]
 800a258:	7812      	ldrb	r2, [r2, #0]
 800a25a:	b2d2      	uxtb	r2, r2
 800a25c:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a262:	1c5a      	adds	r2, r3, #1
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a26c:	1e5a      	subs	r2, r3, #1
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	649a      	str	r2, [r3, #72]	; 0x48
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800a272:	e0bd      	b.n	800a3f0 <HAL_OSPI_IRQHandler+0x270>
      }
      else if(hospi->XferCount == 0U)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a278:	2b00      	cmp	r3, #0
 800a27a:	f040 80b9 	bne.w	800a3f0 <HAL_OSPI_IRQHandler+0x270>
      {
        /* Clear flag */
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	2202      	movs	r2, #2
 800a284:	625a      	str	r2, [r3, #36]	; 0x24

        /* Disable the interrupts */
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	681a      	ldr	r2, [r3, #0]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800a294:	601a      	str	r2, [r3, #0]

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2202      	movs	r2, #2
 800a29a:	651a      	str	r2, [r3, #80]	; 0x50

        /* RX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->RxCpltCallback(hospi);
#else
        HAL_OSPI_RxCpltCallback(hospi);
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f000 facb 	bl	800a838 <HAL_OSPI_RxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800a2a2:	e0a5      	b.n	800a3f0 <HAL_OSPI_IRQHandler+0x270>
      }
    }
    else
    {
      /* Clear flag */
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	2202      	movs	r2, #2
 800a2aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	681a      	ldr	r2, [r3, #0]
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800a2ba:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2202      	movs	r2, #2
 800a2c0:	651a      	str	r2, [r3, #80]	; 0x50

      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	2b18      	cmp	r3, #24
 800a2c6:	d103      	bne.n	800a2d0 <HAL_OSPI_IRQHandler+0x150>
      {
        /* TX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->TxCpltCallback(hospi);
#else
        HAL_OSPI_TxCpltCallback(hospi);
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f000 fabf 	bl	800a84c <HAL_OSPI_TxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800a2ce:	e08f      	b.n	800a3f0 <HAL_OSPI_IRQHandler+0x270>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	2b08      	cmp	r3, #8
 800a2d4:	d103      	bne.n	800a2de <HAL_OSPI_IRQHandler+0x15e>
      {
        /* Command complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->CmdCpltCallback(hospi);
#else
        HAL_OSPI_CmdCpltCallback(hospi);
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f000 faa4 	bl	800a824 <HAL_OSPI_CmdCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800a2dc:	e088      	b.n	800a3f0 <HAL_OSPI_IRQHandler+0x270>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2e4:	f040 8084 	bne.w	800a3f0 <HAL_OSPI_IRQHandler+0x270>
      {
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d103      	bne.n	800a2f8 <HAL_OSPI_IRQHandler+0x178>
          /* Abort called by the user */
          /* Abort complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->AbortCpltCallback(hospi);
#else
          HAL_OSPI_AbortCpltCallback(hospi);
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f000 fa83 	bl	800a7fc <HAL_OSPI_AbortCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800a2f6:	e07b      	b.n	800a3f0 <HAL_OSPI_IRQHandler+0x270>
          /* Abort due to an error (eg : DMA error) */
          /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->ErrorCallback(hospi);
#else
          HAL_OSPI_ErrorCallback(hospi);
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f000 fa75 	bl	800a7e8 <HAL_OSPI_ErrorCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800a2fe:	e077      	b.n	800a3f0 <HAL_OSPI_IRQHandler+0x270>
        /* Nothing to do */
      }
    }
  }
  /* OctoSPI status match interrupt occurred ---------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	f003 0308 	and.w	r3, r3, #8
 800a306:	2b00      	cmp	r3, #0
 800a308:	d01e      	beq.n	800a348 <HAL_OSPI_IRQHandler+0x1c8>
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a310:	2b00      	cmp	r3, #0
 800a312:	d019      	beq.n	800a348 <HAL_OSPI_IRQHandler+0x1c8>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	2208      	movs	r2, #8
 800a31a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Check if automatic poll mode stop is activated */
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a326:	2b00      	cmp	r3, #0
 800a328:	d00a      	beq.n	800a340 <HAL_OSPI_IRQHandler+0x1c0>
    {
      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	681a      	ldr	r2, [r3, #0]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800a338:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2202      	movs	r2, #2
 800a33e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Status match callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->StatusMatchCallback(hospi);
#else
    HAL_OSPI_StatusMatchCallback(hospi);
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f000 fa8d 	bl	800a860 <HAL_OSPI_StatusMatchCallback>
 800a346:	e056      	b.n	800a3f6 <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* OctoSPI transfer error interrupt occurred -------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	f003 0301 	and.w	r3, r3, #1
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d03c      	beq.n	800a3cc <HAL_OSPI_IRQHandler+0x24c>
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d037      	beq.n	800a3cc <HAL_OSPI_IRQHandler+0x24c>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	2201      	movs	r2, #1
 800a362:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable all interrupts */
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	681a      	ldr	r2, [r3, #0]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800a372:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2202      	movs	r2, #2
 800a378:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f003 0304 	and.w	r3, r3, #4
 800a384:	2b00      	cmp	r3, #0
 800a386:	d01a      	beq.n	800a3be <HAL_OSPI_IRQHandler+0x23e>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	681a      	ldr	r2, [r3, #0]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f022 0204 	bic.w	r2, r2, #4
 800a396:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      hospi->hmdma->XferAbortCallback = OSPI_DMAAbortCplt;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a39c:	4a18      	ldr	r2, [pc, #96]	; (800a400 <HAL_OSPI_IRQHandler+0x280>)
 800a39e:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hospi->hmdma) != HAL_OK)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f7ff fe07 	bl	8009fb8 <HAL_MDMA_Abort_IT>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d021      	beq.n	800a3f4 <HAL_OSPI_IRQHandler+0x274>
      {
        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2202      	movs	r2, #2
 800a3b4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->ErrorCallback(hospi);
#else
        HAL_OSPI_ErrorCallback(hospi);
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f000 fa16 	bl	800a7e8 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800a3bc:	e01a      	b.n	800a3f4 <HAL_OSPI_IRQHandler+0x274>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2202      	movs	r2, #2
 800a3c2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
      hospi->ErrorCallback(hospi);
#else
      HAL_OSPI_ErrorCallback(hospi);
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f000 fa0f 	bl	800a7e8 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800a3ca:	e013      	b.n	800a3f4 <HAL_OSPI_IRQHandler+0x274>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
    }
  }
  /* OctoSPI timeout interrupt occurred --------------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	f003 0310 	and.w	r3, r3, #16
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d00f      	beq.n	800a3f6 <HAL_OSPI_IRQHandler+0x276>
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d00a      	beq.n	800a3f6 <HAL_OSPI_IRQHandler+0x276>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	2210      	movs	r2, #16
 800a3e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Timeout callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->TimeOutCallback(hospi);
#else
    HAL_OSPI_TimeOutCallback(hospi);
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f000 fa43 	bl	800a874 <HAL_OSPI_TimeOutCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a3ee:	e002      	b.n	800a3f6 <HAL_OSPI_IRQHandler+0x276>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800a3f0:	bf00      	nop
 800a3f2:	e000      	b.n	800a3f6 <HAL_OSPI_IRQHandler+0x276>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800a3f4:	bf00      	nop
}
 800a3f6:	bf00      	nop
 800a3f8:	3718      	adds	r7, #24
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
 800a3fe:	bf00      	nop
 800a400:	0800b279 	.word	0x0800b279

0800a404 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b08a      	sub	sp, #40	; 0x28
 800a408:	af02      	add	r7, sp, #8
 800a40a:	60f8      	str	r0, [r7, #12]
 800a40c:	60b9      	str	r1, [r7, #8]
 800a40e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 800a410:	f7f9 fe70 	bl	80040f4 <HAL_GetTick>
 800a414:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a41a:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a420:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	2b02      	cmp	r3, #2
 800a426:	d104      	bne.n	800a432 <HAL_OSPI_Command+0x2e>
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	68db      	ldr	r3, [r3, #12]
 800a42c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a430:	d115      	bne.n	800a45e <HAL_OSPI_Command+0x5a>
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	2b14      	cmp	r3, #20
 800a436:	d107      	bne.n	800a448 <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	2b02      	cmp	r3, #2
 800a43e:	d00e      	beq.n	800a45e <HAL_OSPI_Command+0x5a>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	2b03      	cmp	r3, #3
 800a446:	d00a      	beq.n	800a45e <HAL_OSPI_Command+0x5a>
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	2b24      	cmp	r3, #36	; 0x24
 800a44c:	d15b      	bne.n	800a506 <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	2b01      	cmp	r3, #1
 800a454:	d003      	beq.n	800a45e <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 800a45a:	2b03      	cmp	r3, #3
 800a45c:	d153      	bne.n	800a506 <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	9300      	str	r3, [sp, #0]
 800a462:	69bb      	ldr	r3, [r7, #24]
 800a464:	2200      	movs	r2, #0
 800a466:	2120      	movs	r1, #32
 800a468:	68f8      	ldr	r0, [r7, #12]
 800a46a:	f000 ff41 	bl	800b2f0 <OSPI_WaitFlagStateUntilTimeout>
 800a46e:	4603      	mov	r3, r0
 800a470:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800a472:	7ffb      	ldrb	r3, [r7, #31]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d14c      	bne.n	800a512 <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	2200      	movs	r2, #0
 800a47c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 800a47e:	68b9      	ldr	r1, [r7, #8]
 800a480:	68f8      	ldr	r0, [r7, #12]
 800a482:	f000 ff6d 	bl	800b360 <OSPI_ConfigCmd>
 800a486:	4603      	mov	r3, r0
 800a488:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800a48a:	7ffb      	ldrb	r3, [r7, #31]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d140      	bne.n	800a512 <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a494:	2b00      	cmp	r3, #0
 800a496:	d10e      	bne.n	800a4b6 <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	9300      	str	r3, [sp, #0]
 800a49c:	69bb      	ldr	r3, [r7, #24]
 800a49e:	2201      	movs	r2, #1
 800a4a0:	2102      	movs	r1, #2
 800a4a2:	68f8      	ldr	r0, [r7, #12]
 800a4a4:	f000 ff24 	bl	800b2f0 <OSPI_WaitFlagStateUntilTimeout>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	2202      	movs	r2, #2
 800a4b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800a4b4:	e02d      	b.n	800a512 <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d103      	bne.n	800a4c6 <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2204      	movs	r2, #4
 800a4c2:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800a4c4:	e025      	b.n	800a512 <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	2b01      	cmp	r3, #1
 800a4cc:	d10b      	bne.n	800a4e6 <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4d2:	2b24      	cmp	r3, #36	; 0x24
 800a4d4:	d103      	bne.n	800a4de <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2204      	movs	r2, #4
 800a4da:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800a4dc:	e019      	b.n	800a512 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	2214      	movs	r2, #20
 800a4e2:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800a4e4:	e015      	b.n	800a512 <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	2b02      	cmp	r3, #2
 800a4ec:	d111      	bne.n	800a512 <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4f2:	2b14      	cmp	r3, #20
 800a4f4:	d103      	bne.n	800a4fe <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	2204      	movs	r2, #4
 800a4fa:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800a4fc:	e009      	b.n	800a512 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	2224      	movs	r2, #36	; 0x24
 800a502:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800a504:	e005      	b.n	800a512 <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 800a506:	2301      	movs	r3, #1
 800a508:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	2210      	movs	r2, #16
 800a50e:	655a      	str	r2, [r3, #84]	; 0x54
 800a510:	e000      	b.n	800a514 <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 800a512:	bf00      	nop
  }

  /* Return function status */
  return status;
 800a514:	7ffb      	ldrb	r3, [r7, #31]
}
 800a516:	4618      	mov	r0, r3
 800a518:	3720      	adds	r7, #32
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}

0800a51e <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 800a51e:	b580      	push	{r7, lr}
 800a520:	b08a      	sub	sp, #40	; 0x28
 800a522:	af02      	add	r7, sp, #8
 800a524:	60f8      	str	r0, [r7, #12]
 800a526:	60b9      	str	r1, [r7, #8]
 800a528:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a52a:	f7f9 fde3 	bl	80040f4 <HAL_GetTick>
 800a52e:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	3350      	adds	r3, #80	; 0x50
 800a536:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d105      	bne.n	800a54a <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 800a53e:	2301      	movs	r3, #1
 800a540:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2208      	movs	r2, #8
 800a546:	655a      	str	r2, [r3, #84]	; 0x54
 800a548:	e057      	b.n	800a5fa <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a54e:	2b04      	cmp	r3, #4
 800a550:	d14e      	bne.n	800a5f0 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a558:	1c5a      	adds	r2, r3, #1
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	68ba      	ldr	r2, [r7, #8]
 800a56a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	681a      	ldr	r2, [r3, #0]
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a57a:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	9300      	str	r3, [sp, #0]
 800a580:	69bb      	ldr	r3, [r7, #24]
 800a582:	2201      	movs	r2, #1
 800a584:	2104      	movs	r1, #4
 800a586:	68f8      	ldr	r0, [r7, #12]
 800a588:	f000 feb2 	bl	800b2f0 <OSPI_WaitFlagStateUntilTimeout>
 800a58c:	4603      	mov	r3, r0
 800a58e:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800a590:	7ffb      	ldrb	r3, [r7, #31]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d113      	bne.n	800a5be <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a59a:	781a      	ldrb	r2, [r3, #0]
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5a4:	1c5a      	adds	r2, r3, #1
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5ae:	1e5a      	subs	r2, r3, #1
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	649a      	str	r2, [r3, #72]	; 0x48
      } while (hospi->XferCount > 0U);
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d1df      	bne.n	800a57c <HAL_OSPI_Transmit+0x5e>
 800a5bc:	e000      	b.n	800a5c0 <HAL_OSPI_Transmit+0xa2>
          break;
 800a5be:	bf00      	nop

      if (status == HAL_OK)
 800a5c0:	7ffb      	ldrb	r3, [r7, #31]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d119      	bne.n	800a5fa <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	9300      	str	r3, [sp, #0]
 800a5ca:	69bb      	ldr	r3, [r7, #24]
 800a5cc:	2201      	movs	r2, #1
 800a5ce:	2102      	movs	r1, #2
 800a5d0:	68f8      	ldr	r0, [r7, #12]
 800a5d2:	f000 fe8d 	bl	800b2f0 <OSPI_WaitFlagStateUntilTimeout>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800a5da:	7ffb      	ldrb	r3, [r7, #31]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d10c      	bne.n	800a5fa <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	2202      	movs	r2, #2
 800a5e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	2202      	movs	r2, #2
 800a5ec:	651a      	str	r2, [r3, #80]	; 0x50
 800a5ee:	e004      	b.n	800a5fa <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	2210      	movs	r2, #16
 800a5f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 800a5fa:	7ffb      	ldrb	r3, [r7, #31]
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3720      	adds	r7, #32
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}

0800a604 <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b08c      	sub	sp, #48	; 0x30
 800a608:	af02      	add	r7, sp, #8
 800a60a:	60f8      	str	r0, [r7, #12]
 800a60c:	60b9      	str	r1, [r7, #8]
 800a60e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a610:	f7f9 fd70 	bl	80040f4 <HAL_GetTick>
 800a614:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	3350      	adds	r3, #80	; 0x50
 800a61c:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a624:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800a62e:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d106      	bne.n	800a644 <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 800a636:	2301      	movs	r3, #1
 800a638:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2208      	movs	r2, #8
 800a640:	655a      	str	r2, [r3, #84]	; 0x54
 800a642:	e07c      	b.n	800a73e <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a648:	2b04      	cmp	r3, #4
 800a64a:	d172      	bne.n	800a732 <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a652:	1c5a      	adds	r2, r3, #1
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	68ba      	ldr	r2, [r7, #8]
 800a664:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a678:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	68db      	ldr	r3, [r3, #12]
 800a67e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a682:	d104      	bne.n	800a68e <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	69ba      	ldr	r2, [r7, #24]
 800a68a:	649a      	str	r2, [r3, #72]	; 0x48
 800a68c:	e011      	b.n	800a6b2 <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800a696:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d004      	beq.n	800a6a8 <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	69ba      	ldr	r2, [r7, #24]
 800a6a4:	649a      	str	r2, [r3, #72]	; 0x48
 800a6a6:	e004      	b.n	800a6b2 <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	697a      	ldr	r2, [r7, #20]
 800a6ae:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	9300      	str	r3, [sp, #0]
 800a6b6:	6a3b      	ldr	r3, [r7, #32]
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	2106      	movs	r1, #6
 800a6bc:	68f8      	ldr	r0, [r7, #12]
 800a6be:	f000 fe17 	bl	800b2f0 <OSPI_WaitFlagStateUntilTimeout>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 800a6c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d114      	bne.n	800a6fa <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6d4:	69fa      	ldr	r2, [r7, #28]
 800a6d6:	7812      	ldrb	r2, [r2, #0]
 800a6d8:	b2d2      	uxtb	r2, r2
 800a6da:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6e0:	1c5a      	adds	r2, r3, #1
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6ea:	1e5a      	subs	r2, r3, #1
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	649a      	str	r2, [r3, #72]	; 0x48
      } while(hospi->XferCount > 0U);
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d1dc      	bne.n	800a6b2 <HAL_OSPI_Receive+0xae>
 800a6f8:	e000      	b.n	800a6fc <HAL_OSPI_Receive+0xf8>
          break;
 800a6fa:	bf00      	nop

      if (status == HAL_OK)
 800a6fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a700:	2b00      	cmp	r3, #0
 800a702:	d11c      	bne.n	800a73e <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	9300      	str	r3, [sp, #0]
 800a708:	6a3b      	ldr	r3, [r7, #32]
 800a70a:	2201      	movs	r2, #1
 800a70c:	2102      	movs	r1, #2
 800a70e:	68f8      	ldr	r0, [r7, #12]
 800a710:	f000 fdee 	bl	800b2f0 <OSPI_WaitFlagStateUntilTimeout>
 800a714:	4603      	mov	r3, r0
 800a716:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 800a71a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d10d      	bne.n	800a73e <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	2202      	movs	r2, #2
 800a728:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	2202      	movs	r2, #2
 800a72e:	651a      	str	r2, [r3, #80]	; 0x50
 800a730:	e005      	b.n	800a73e <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 800a732:	2301      	movs	r3, #1
 800a734:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2210      	movs	r2, #16
 800a73c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 800a73e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a742:	4618      	mov	r0, r3
 800a744:	3728      	adds	r7, #40	; 0x28
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}
	...

0800a74c <HAL_OSPI_MemoryMapped>:
  * @param  cfg   : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_MemoryMapped(OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b086      	sub	sp, #24
 800a750:	af02      	add	r7, sp, #8
 800a752:	6078      	str	r0, [r7, #4]
 800a754:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a756:	f7f9 fccd 	bl	80040f4 <HAL_GetTick>
 800a75a:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_OSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a760:	2b04      	cmp	r3, #4
 800a762:	d134      	bne.n	800a7ce <HAL_OSPI_MemoryMapped+0x82>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a768:	9300      	str	r3, [sp, #0]
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	2200      	movs	r2, #0
 800a76e:	2120      	movs	r1, #32
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f000 fdbd 	bl	800b2f0 <OSPI_WaitFlagStateUntilTimeout>
 800a776:	4603      	mov	r3, r0
 800a778:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800a77a:	7bfb      	ldrb	r3, [r7, #15]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d12b      	bne.n	800a7d8 <HAL_OSPI_MemoryMapped+0x8c>
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2288      	movs	r2, #136	; 0x88
 800a784:	651a      	str	r2, [r3, #80]	; 0x50

      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	2b08      	cmp	r3, #8
 800a78c:	d111      	bne.n	800a7b2 <HAL_OSPI_MemoryMapped+0x66>
      {
        assert_param(IS_OSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure register */
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	683a      	ldr	r2, [r7, #0]
 800a794:	6852      	ldr	r2, [r2, #4]
 800a796:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	2210      	movs	r2, #16
 800a7a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Enable the timeout interrupt */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	681a      	ldr	r2, [r3, #0]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a7b0:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	681a      	ldr	r2, [r3, #0]
 800a7b8:	4b0a      	ldr	r3, [pc, #40]	; (800a7e4 <HAL_OSPI_MemoryMapped+0x98>)
 800a7ba:	4013      	ands	r3, r2
 800a7bc:	683a      	ldr	r2, [r7, #0]
 800a7be:	6812      	ldr	r2, [r2, #0]
 800a7c0:	431a      	orrs	r2, r3
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800a7ca:	601a      	str	r2, [r3, #0]
 800a7cc:	e004      	b.n	800a7d8 <HAL_OSPI_MemoryMapped+0x8c>
                 (cfg->TimeOutActivation | OSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2210      	movs	r2, #16
 800a7d6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Return function status */
  return status;
 800a7d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	3710      	adds	r7, #16
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}
 800a7e2:	bf00      	nop
 800a7e4:	cffffff7 	.word	0xcffffff7

0800a7e8 <HAL_OSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_ErrorCallback(OSPI_HandleTypeDef *hospi)
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b083      	sub	sp, #12
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_ErrorCallback could be implemented in the user file
   */
}
 800a7f0:	bf00      	nop
 800a7f2:	370c      	adds	r7, #12
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fa:	4770      	bx	lr

0800a7fc <HAL_OSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_AbortCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b083      	sub	sp, #12
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_AbortCpltCallback could be implemented in the user file
   */
}
 800a804:	bf00      	nop
 800a806:	370c      	adds	r7, #12
 800a808:	46bd      	mov	sp, r7
 800a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80e:	4770      	bx	lr

0800a810 <HAL_OSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_FifoThresholdCallback(OSPI_HandleTypeDef *hospi)
{
 800a810:	b480      	push	{r7}
 800a812:	b083      	sub	sp, #12
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 800a818:	bf00      	nop
 800a81a:	370c      	adds	r7, #12
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr

0800a824 <HAL_OSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_CmdCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800a824:	b480      	push	{r7}
 800a826:	b083      	sub	sp, #12
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_CmdCpltCallback could be implemented in the user file
   */
}
 800a82c:	bf00      	nop
 800a82e:	370c      	adds	r7, #12
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr

0800a838 <HAL_OSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_RxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800a838:	b480      	push	{r7}
 800a83a:	b083      	sub	sp, #12
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_RxCpltCallback could be implemented in the user file
   */
}
 800a840:	bf00      	nop
 800a842:	370c      	adds	r7, #12
 800a844:	46bd      	mov	sp, r7
 800a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84a:	4770      	bx	lr

0800a84c <HAL_OSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
 __weak void HAL_OSPI_TxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800a84c:	b480      	push	{r7}
 800a84e:	b083      	sub	sp, #12
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_TxCpltCallback could be implemented in the user file
   */
}
 800a854:	bf00      	nop
 800a856:	370c      	adds	r7, #12
 800a858:	46bd      	mov	sp, r7
 800a85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85e:	4770      	bx	lr

0800a860 <HAL_OSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_StatusMatchCallback(OSPI_HandleTypeDef *hospi)
{
 800a860:	b480      	push	{r7}
 800a862:	b083      	sub	sp, #12
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_StatusMatchCallback could be implemented in the user file
   */
}
 800a868:	bf00      	nop
 800a86a:	370c      	adds	r7, #12
 800a86c:	46bd      	mov	sp, r7
 800a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a872:	4770      	bx	lr

0800a874 <HAL_OSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TimeOutCallback(OSPI_HandleTypeDef *hospi)
{
 800a874:	b480      	push	{r7}
 800a876:	b083      	sub	sp, #12
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_TimeOutCallback could be implemented in the user file
   */
}
 800a87c:	bf00      	nop
 800a87e:	370c      	adds	r7, #12
 800a880:	46bd      	mov	sp, r7
 800a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a886:	4770      	bx	lr

0800a888 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800a888:	b480      	push	{r7}
 800a88a:	b083      	sub	sp, #12
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	683a      	ldr	r2, [r7, #0]
 800a896:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 800a898:	2300      	movs	r3, #0
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	370c      	adds	r7, #12
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a4:	4770      	bx	lr
	...

0800a8a8 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b094      	sub	sp, #80	; 0x50
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	60f8      	str	r0, [r7, #12]
 800a8b0:	60b9      	str	r1, [r7, #8]
 800a8b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	4a9d      	ldr	r2, [pc, #628]	; (800ab3c <HAL_OSPIM_Config+0x294>)
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d105      	bne.n	800a8d6 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800a8d4:	e004      	b.n	800a8e0 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a8e6:	e01d      	b.n	800a924 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 800a8e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a8ec:	3301      	adds	r3, #1
 800a8ee:	b2d8      	uxtb	r0, r3
 800a8f0:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800a8f4:	f107 0114 	add.w	r1, r7, #20
 800a8f8:	4613      	mov	r3, r2
 800a8fa:	005b      	lsls	r3, r3, #1
 800a8fc:	4413      	add	r3, r2
 800a8fe:	00db      	lsls	r3, r3, #3
 800a900:	440b      	add	r3, r1
 800a902:	4619      	mov	r1, r3
 800a904:	f000 fea6 	bl	800b654 <OSPIM_GetConfig>
 800a908:	4603      	mov	r3, r0
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d005      	beq.n	800a91a <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 800a90e:	2301      	movs	r3, #1
 800a910:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	2208      	movs	r2, #8
 800a918:	655a      	str	r2, [r3, #84]	; 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800a91a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a91e:	3301      	adds	r3, #1
 800a920:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a924:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a928:	2b01      	cmp	r3, #1
 800a92a:	d9dd      	bls.n	800a8e8 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 800a92c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a930:	2b00      	cmp	r3, #0
 800a932:	f040 8495 	bne.w	800b260 <HAL_OSPIM_Config+0x9b8>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800a936:	4b81      	ldr	r3, [pc, #516]	; (800ab3c <HAL_OSPIM_Config+0x294>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f003 0301 	and.w	r3, r3, #1
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d00b      	beq.n	800a95a <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800a942:	4b7e      	ldr	r3, [pc, #504]	; (800ab3c <HAL_OSPIM_Config+0x294>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	4a7d      	ldr	r2, [pc, #500]	; (800ab3c <HAL_OSPIM_Config+0x294>)
 800a948:	f023 0301 	bic.w	r3, r3, #1
 800a94c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 800a94e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800a952:	f043 0301 	orr.w	r3, r3, #1
 800a956:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800a95a:	4b79      	ldr	r3, [pc, #484]	; (800ab40 <HAL_OSPIM_Config+0x298>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f003 0301 	and.w	r3, r3, #1
 800a962:	2b00      	cmp	r3, #0
 800a964:	d00b      	beq.n	800a97e <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800a966:	4b76      	ldr	r3, [pc, #472]	; (800ab40 <HAL_OSPIM_Config+0x298>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	4a75      	ldr	r2, [pc, #468]	; (800ab40 <HAL_OSPIM_Config+0x298>)
 800a96c:	f023 0301 	bic.w	r3, r3, #1
 800a970:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800a972:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800a976:	f043 0302 	orr.w	r3, r3, #2
 800a97a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 800a97e:	4971      	ldr	r1, [pc, #452]	; (800ab44 <HAL_OSPIM_Config+0x29c>)
 800a980:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a982:	4613      	mov	r3, r2
 800a984:	005b      	lsls	r3, r3, #1
 800a986:	4413      	add	r3, r2
 800a988:	00db      	lsls	r3, r3, #3
 800a98a:	3350      	adds	r3, #80	; 0x50
 800a98c:	443b      	add	r3, r7
 800a98e:	3b34      	subs	r3, #52	; 0x34
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	3b01      	subs	r3, #1
 800a994:	009b      	lsls	r3, r3, #2
 800a996:	440b      	add	r3, r1
 800a998:	6859      	ldr	r1, [r3, #4]
 800a99a:	486a      	ldr	r0, [pc, #424]	; (800ab44 <HAL_OSPIM_Config+0x29c>)
 800a99c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a99e:	4613      	mov	r3, r2
 800a9a0:	005b      	lsls	r3, r3, #1
 800a9a2:	4413      	add	r3, r2
 800a9a4:	00db      	lsls	r3, r3, #3
 800a9a6:	3350      	adds	r3, #80	; 0x50
 800a9a8:	443b      	add	r3, r7
 800a9aa:	3b34      	subs	r3, #52	; 0x34
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	3b01      	subs	r3, #1
 800a9b0:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800a9b4:	009b      	lsls	r3, r3, #2
 800a9b6:	4403      	add	r3, r0
 800a9b8:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800a9ba:	4b62      	ldr	r3, [pc, #392]	; (800ab44 <HAL_OSPIM_Config+0x29c>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f003 0301 	and.w	r3, r3, #1
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	f000 80c0 	beq.w	800ab48 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 800a9c8:	4b5e      	ldr	r3, [pc, #376]	; (800ab44 <HAL_OSPIM_Config+0x29c>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	4a5d      	ldr	r2, [pc, #372]	; (800ab44 <HAL_OSPIM_Config+0x29c>)
 800a9ce:	f023 0301 	bic.w	r3, r3, #1
 800a9d2:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 800a9d4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	f040 8162 	bne.w	800aca2 <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKSRC);
 800a9de:	4959      	ldr	r1, [pc, #356]	; (800ab44 <HAL_OSPIM_Config+0x29c>)
 800a9e0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a9e4:	4613      	mov	r3, r2
 800a9e6:	005b      	lsls	r3, r3, #1
 800a9e8:	4413      	add	r3, r2
 800a9ea:	00db      	lsls	r3, r3, #3
 800a9ec:	3350      	adds	r3, #80	; 0x50
 800a9ee:	443b      	add	r3, r7
 800a9f0:	3b3c      	subs	r3, #60	; 0x3c
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	3b01      	subs	r3, #1
 800a9f6:	009b      	lsls	r3, r3, #2
 800a9f8:	440b      	add	r3, r1
 800a9fa:	6859      	ldr	r1, [r3, #4]
 800a9fc:	4851      	ldr	r0, [pc, #324]	; (800ab44 <HAL_OSPIM_Config+0x29c>)
 800a9fe:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800aa02:	4613      	mov	r3, r2
 800aa04:	005b      	lsls	r3, r3, #1
 800aa06:	4413      	add	r3, r2
 800aa08:	00db      	lsls	r3, r3, #3
 800aa0a:	3350      	adds	r3, #80	; 0x50
 800aa0c:	443b      	add	r3, r7
 800aa0e:	3b3c      	subs	r3, #60	; 0x3c
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	3b01      	subs	r3, #1
 800aa14:	f041 0202 	orr.w	r2, r1, #2
 800aa18:	009b      	lsls	r3, r3, #2
 800aa1a:	4403      	add	r3, r0
 800aa1c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800aa1e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800aa22:	4613      	mov	r3, r2
 800aa24:	005b      	lsls	r3, r3, #1
 800aa26:	4413      	add	r3, r2
 800aa28:	00db      	lsls	r3, r3, #3
 800aa2a:	3350      	adds	r3, #80	; 0x50
 800aa2c:	443b      	add	r3, r7
 800aa2e:	3b38      	subs	r3, #56	; 0x38
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d01f      	beq.n	800aa76 <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSSRC);
 800aa36:	4943      	ldr	r1, [pc, #268]	; (800ab44 <HAL_OSPIM_Config+0x29c>)
 800aa38:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800aa3c:	4613      	mov	r3, r2
 800aa3e:	005b      	lsls	r3, r3, #1
 800aa40:	4413      	add	r3, r2
 800aa42:	00db      	lsls	r3, r3, #3
 800aa44:	3350      	adds	r3, #80	; 0x50
 800aa46:	443b      	add	r3, r7
 800aa48:	3b38      	subs	r3, #56	; 0x38
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	3b01      	subs	r3, #1
 800aa4e:	009b      	lsls	r3, r3, #2
 800aa50:	440b      	add	r3, r1
 800aa52:	6859      	ldr	r1, [r3, #4]
 800aa54:	483b      	ldr	r0, [pc, #236]	; (800ab44 <HAL_OSPIM_Config+0x29c>)
 800aa56:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800aa5a:	4613      	mov	r3, r2
 800aa5c:	005b      	lsls	r3, r3, #1
 800aa5e:	4413      	add	r3, r2
 800aa60:	00db      	lsls	r3, r3, #3
 800aa62:	3350      	adds	r3, #80	; 0x50
 800aa64:	443b      	add	r3, r7
 800aa66:	3b38      	subs	r3, #56	; 0x38
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	3b01      	subs	r3, #1
 800aa6c:	f041 0220 	orr.w	r2, r1, #32
 800aa70:	009b      	lsls	r3, r3, #2
 800aa72:	4403      	add	r3, r0
 800aa74:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800aa76:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800aa7a:	4613      	mov	r3, r2
 800aa7c:	005b      	lsls	r3, r3, #1
 800aa7e:	4413      	add	r3, r2
 800aa80:	00db      	lsls	r3, r3, #3
 800aa82:	3350      	adds	r3, #80	; 0x50
 800aa84:	443b      	add	r3, r7
 800aa86:	3b30      	subs	r3, #48	; 0x30
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d023      	beq.n	800aad6 <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLSRC_1);
 800aa8e:	492d      	ldr	r1, [pc, #180]	; (800ab44 <HAL_OSPIM_Config+0x29c>)
 800aa90:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800aa94:	4613      	mov	r3, r2
 800aa96:	005b      	lsls	r3, r3, #1
 800aa98:	4413      	add	r3, r2
 800aa9a:	00db      	lsls	r3, r3, #3
 800aa9c:	3350      	adds	r3, #80	; 0x50
 800aa9e:	443b      	add	r3, r7
 800aaa0:	3b30      	subs	r3, #48	; 0x30
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	3b01      	subs	r3, #1
 800aaa6:	f003 0301 	and.w	r3, r3, #1
 800aaaa:	009b      	lsls	r3, r3, #2
 800aaac:	440b      	add	r3, r1
 800aaae:	6859      	ldr	r1, [r3, #4]
 800aab0:	4824      	ldr	r0, [pc, #144]	; (800ab44 <HAL_OSPIM_Config+0x29c>)
 800aab2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800aab6:	4613      	mov	r3, r2
 800aab8:	005b      	lsls	r3, r3, #1
 800aaba:	4413      	add	r3, r2
 800aabc:	00db      	lsls	r3, r3, #3
 800aabe:	3350      	adds	r3, #80	; 0x50
 800aac0:	443b      	add	r3, r7
 800aac2:	3b30      	subs	r3, #48	; 0x30
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	3b01      	subs	r3, #1
 800aac8:	f003 0301 	and.w	r3, r3, #1
 800aacc:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 800aad0:	009b      	lsls	r3, r3, #2
 800aad2:	4403      	add	r3, r0
 800aad4:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800aad6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800aada:	4613      	mov	r3, r2
 800aadc:	005b      	lsls	r3, r3, #1
 800aade:	4413      	add	r3, r2
 800aae0:	00db      	lsls	r3, r3, #3
 800aae2:	3350      	adds	r3, #80	; 0x50
 800aae4:	443b      	add	r3, r7
 800aae6:	3b2c      	subs	r3, #44	; 0x2c
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	f000 80d9 	beq.w	800aca2 <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHSRC_1);
 800aaf0:	4914      	ldr	r1, [pc, #80]	; (800ab44 <HAL_OSPIM_Config+0x29c>)
 800aaf2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800aaf6:	4613      	mov	r3, r2
 800aaf8:	005b      	lsls	r3, r3, #1
 800aafa:	4413      	add	r3, r2
 800aafc:	00db      	lsls	r3, r3, #3
 800aafe:	3350      	adds	r3, #80	; 0x50
 800ab00:	443b      	add	r3, r7
 800ab02:	3b2c      	subs	r3, #44	; 0x2c
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	3b01      	subs	r3, #1
 800ab08:	f003 0301 	and.w	r3, r3, #1
 800ab0c:	009b      	lsls	r3, r3, #2
 800ab0e:	440b      	add	r3, r1
 800ab10:	6859      	ldr	r1, [r3, #4]
 800ab12:	480c      	ldr	r0, [pc, #48]	; (800ab44 <HAL_OSPIM_Config+0x29c>)
 800ab14:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800ab18:	4613      	mov	r3, r2
 800ab1a:	005b      	lsls	r3, r3, #1
 800ab1c:	4413      	add	r3, r2
 800ab1e:	00db      	lsls	r3, r3, #3
 800ab20:	3350      	adds	r3, #80	; 0x50
 800ab22:	443b      	add	r3, r7
 800ab24:	3b2c      	subs	r3, #44	; 0x2c
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	3b01      	subs	r3, #1
 800ab2a:	f003 0301 	and.w	r3, r3, #1
 800ab2e:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 800ab32:	009b      	lsls	r3, r3, #2
 800ab34:	4403      	add	r3, r0
 800ab36:	605a      	str	r2, [r3, #4]
 800ab38:	e0b3      	b.n	800aca2 <HAL_OSPIM_Config+0x3fa>
 800ab3a:	bf00      	nop
 800ab3c:	52005000 	.word	0x52005000
 800ab40:	5200a000 	.word	0x5200a000
 800ab44:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 800ab48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab4a:	4613      	mov	r3, r2
 800ab4c:	005b      	lsls	r3, r3, #1
 800ab4e:	4413      	add	r3, r2
 800ab50:	00db      	lsls	r3, r3, #3
 800ab52:	3350      	adds	r3, #80	; 0x50
 800ab54:	443b      	add	r3, r7
 800ab56:	3b3c      	subs	r3, #60	; 0x3c
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	f000 80a1 	beq.w	800aca2 <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 800ab60:	4993      	ldr	r1, [pc, #588]	; (800adb0 <HAL_OSPIM_Config+0x508>)
 800ab62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab64:	4613      	mov	r3, r2
 800ab66:	005b      	lsls	r3, r3, #1
 800ab68:	4413      	add	r3, r2
 800ab6a:	00db      	lsls	r3, r3, #3
 800ab6c:	3350      	adds	r3, #80	; 0x50
 800ab6e:	443b      	add	r3, r7
 800ab70:	3b3c      	subs	r3, #60	; 0x3c
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	3b01      	subs	r3, #1
 800ab76:	009b      	lsls	r3, r3, #2
 800ab78:	440b      	add	r3, r1
 800ab7a:	6859      	ldr	r1, [r3, #4]
 800ab7c:	488c      	ldr	r0, [pc, #560]	; (800adb0 <HAL_OSPIM_Config+0x508>)
 800ab7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab80:	4613      	mov	r3, r2
 800ab82:	005b      	lsls	r3, r3, #1
 800ab84:	4413      	add	r3, r2
 800ab86:	00db      	lsls	r3, r3, #3
 800ab88:	3350      	adds	r3, #80	; 0x50
 800ab8a:	443b      	add	r3, r7
 800ab8c:	3b3c      	subs	r3, #60	; 0x3c
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	3b01      	subs	r3, #1
 800ab92:	f021 0201 	bic.w	r2, r1, #1
 800ab96:	009b      	lsls	r3, r3, #2
 800ab98:	4403      	add	r3, r0
 800ab9a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 800ab9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab9e:	4613      	mov	r3, r2
 800aba0:	005b      	lsls	r3, r3, #1
 800aba2:	4413      	add	r3, r2
 800aba4:	00db      	lsls	r3, r3, #3
 800aba6:	3350      	adds	r3, #80	; 0x50
 800aba8:	443b      	add	r3, r7
 800abaa:	3b38      	subs	r3, #56	; 0x38
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d01d      	beq.n	800abee <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 800abb2:	497f      	ldr	r1, [pc, #508]	; (800adb0 <HAL_OSPIM_Config+0x508>)
 800abb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800abb6:	4613      	mov	r3, r2
 800abb8:	005b      	lsls	r3, r3, #1
 800abba:	4413      	add	r3, r2
 800abbc:	00db      	lsls	r3, r3, #3
 800abbe:	3350      	adds	r3, #80	; 0x50
 800abc0:	443b      	add	r3, r7
 800abc2:	3b38      	subs	r3, #56	; 0x38
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	3b01      	subs	r3, #1
 800abc8:	009b      	lsls	r3, r3, #2
 800abca:	440b      	add	r3, r1
 800abcc:	6859      	ldr	r1, [r3, #4]
 800abce:	4878      	ldr	r0, [pc, #480]	; (800adb0 <HAL_OSPIM_Config+0x508>)
 800abd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800abd2:	4613      	mov	r3, r2
 800abd4:	005b      	lsls	r3, r3, #1
 800abd6:	4413      	add	r3, r2
 800abd8:	00db      	lsls	r3, r3, #3
 800abda:	3350      	adds	r3, #80	; 0x50
 800abdc:	443b      	add	r3, r7
 800abde:	3b38      	subs	r3, #56	; 0x38
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	3b01      	subs	r3, #1
 800abe4:	f021 0210 	bic.w	r2, r1, #16
 800abe8:	009b      	lsls	r3, r3, #2
 800abea:	4403      	add	r3, r0
 800abec:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800abee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800abf0:	4613      	mov	r3, r2
 800abf2:	005b      	lsls	r3, r3, #1
 800abf4:	4413      	add	r3, r2
 800abf6:	00db      	lsls	r3, r3, #3
 800abf8:	3350      	adds	r3, #80	; 0x50
 800abfa:	443b      	add	r3, r7
 800abfc:	3b30      	subs	r3, #48	; 0x30
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d021      	beq.n	800ac48 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800ac04:	496a      	ldr	r1, [pc, #424]	; (800adb0 <HAL_OSPIM_Config+0x508>)
 800ac06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac08:	4613      	mov	r3, r2
 800ac0a:	005b      	lsls	r3, r3, #1
 800ac0c:	4413      	add	r3, r2
 800ac0e:	00db      	lsls	r3, r3, #3
 800ac10:	3350      	adds	r3, #80	; 0x50
 800ac12:	443b      	add	r3, r7
 800ac14:	3b30      	subs	r3, #48	; 0x30
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	3b01      	subs	r3, #1
 800ac1a:	f003 0301 	and.w	r3, r3, #1
 800ac1e:	009b      	lsls	r3, r3, #2
 800ac20:	440b      	add	r3, r1
 800ac22:	6859      	ldr	r1, [r3, #4]
 800ac24:	4862      	ldr	r0, [pc, #392]	; (800adb0 <HAL_OSPIM_Config+0x508>)
 800ac26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac28:	4613      	mov	r3, r2
 800ac2a:	005b      	lsls	r3, r3, #1
 800ac2c:	4413      	add	r3, r2
 800ac2e:	00db      	lsls	r3, r3, #3
 800ac30:	3350      	adds	r3, #80	; 0x50
 800ac32:	443b      	add	r3, r7
 800ac34:	3b30      	subs	r3, #48	; 0x30
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	3b01      	subs	r3, #1
 800ac3a:	f003 0301 	and.w	r3, r3, #1
 800ac3e:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800ac42:	009b      	lsls	r3, r3, #2
 800ac44:	4403      	add	r3, r0
 800ac46:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800ac48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac4a:	4613      	mov	r3, r2
 800ac4c:	005b      	lsls	r3, r3, #1
 800ac4e:	4413      	add	r3, r2
 800ac50:	00db      	lsls	r3, r3, #3
 800ac52:	3350      	adds	r3, #80	; 0x50
 800ac54:	443b      	add	r3, r7
 800ac56:	3b2c      	subs	r3, #44	; 0x2c
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d021      	beq.n	800aca2 <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 800ac5e:	4954      	ldr	r1, [pc, #336]	; (800adb0 <HAL_OSPIM_Config+0x508>)
 800ac60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac62:	4613      	mov	r3, r2
 800ac64:	005b      	lsls	r3, r3, #1
 800ac66:	4413      	add	r3, r2
 800ac68:	00db      	lsls	r3, r3, #3
 800ac6a:	3350      	adds	r3, #80	; 0x50
 800ac6c:	443b      	add	r3, r7
 800ac6e:	3b2c      	subs	r3, #44	; 0x2c
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	3b01      	subs	r3, #1
 800ac74:	f003 0301 	and.w	r3, r3, #1
 800ac78:	009b      	lsls	r3, r3, #2
 800ac7a:	440b      	add	r3, r1
 800ac7c:	6859      	ldr	r1, [r3, #4]
 800ac7e:	484c      	ldr	r0, [pc, #304]	; (800adb0 <HAL_OSPIM_Config+0x508>)
 800ac80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac82:	4613      	mov	r3, r2
 800ac84:	005b      	lsls	r3, r3, #1
 800ac86:	4413      	add	r3, r2
 800ac88:	00db      	lsls	r3, r3, #3
 800ac8a:	3350      	adds	r3, #80	; 0x50
 800ac8c:	443b      	add	r3, r7
 800ac8e:	3b2c      	subs	r3, #44	; 0x2c
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	3b01      	subs	r3, #1
 800ac94:	f003 0301 	and.w	r3, r3, #1
 800ac98:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800ac9c:	009b      	lsls	r3, r3, #2
 800ac9e:	4403      	add	r3, r0
 800aca0:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	6819      	ldr	r1, [r3, #0]
 800aca6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800acaa:	4613      	mov	r3, r2
 800acac:	005b      	lsls	r3, r3, #1
 800acae:	4413      	add	r3, r2
 800acb0:	00db      	lsls	r3, r3, #3
 800acb2:	3350      	adds	r3, #80	; 0x50
 800acb4:	443b      	add	r3, r7
 800acb6:	3b3c      	subs	r3, #60	; 0x3c
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	4299      	cmp	r1, r3
 800acbc:	d038      	beq.n	800ad30 <HAL_OSPIM_Config+0x488>
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	6859      	ldr	r1, [r3, #4]
 800acc2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800acc6:	4613      	mov	r3, r2
 800acc8:	005b      	lsls	r3, r3, #1
 800acca:	4413      	add	r3, r2
 800accc:	00db      	lsls	r3, r3, #3
 800acce:	3350      	adds	r3, #80	; 0x50
 800acd0:	443b      	add	r3, r7
 800acd2:	3b38      	subs	r3, #56	; 0x38
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	4299      	cmp	r1, r3
 800acd8:	d02a      	beq.n	800ad30 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	6899      	ldr	r1, [r3, #8]
 800acde:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800ace2:	4613      	mov	r3, r2
 800ace4:	005b      	lsls	r3, r3, #1
 800ace6:	4413      	add	r3, r2
 800ace8:	00db      	lsls	r3, r3, #3
 800acea:	3350      	adds	r3, #80	; 0x50
 800acec:	443b      	add	r3, r7
 800acee:	3b34      	subs	r3, #52	; 0x34
 800acf0:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800acf2:	4299      	cmp	r1, r3
 800acf4:	d01c      	beq.n	800ad30 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	68d9      	ldr	r1, [r3, #12]
 800acfa:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800acfe:	4613      	mov	r3, r2
 800ad00:	005b      	lsls	r3, r3, #1
 800ad02:	4413      	add	r3, r2
 800ad04:	00db      	lsls	r3, r3, #3
 800ad06:	3350      	adds	r3, #80	; 0x50
 800ad08:	443b      	add	r3, r7
 800ad0a:	3b30      	subs	r3, #48	; 0x30
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	4299      	cmp	r1, r3
 800ad10:	d00e      	beq.n	800ad30 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	6919      	ldr	r1, [r3, #16]
 800ad16:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800ad1a:	4613      	mov	r3, r2
 800ad1c:	005b      	lsls	r3, r3, #1
 800ad1e:	4413      	add	r3, r2
 800ad20:	00db      	lsls	r3, r3, #3
 800ad22:	3350      	adds	r3, #80	; 0x50
 800ad24:	443b      	add	r3, r7
 800ad26:	3b2c      	subs	r3, #44	; 0x2c
 800ad28:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800ad2a:	4299      	cmp	r1, r3
 800ad2c:	f040 810e 	bne.w	800af4c <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	6819      	ldr	r1, [r3, #0]
 800ad34:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800ad38:	4613      	mov	r3, r2
 800ad3a:	005b      	lsls	r3, r3, #1
 800ad3c:	4413      	add	r3, r2
 800ad3e:	00db      	lsls	r3, r3, #3
 800ad40:	3350      	adds	r3, #80	; 0x50
 800ad42:	443b      	add	r3, r7
 800ad44:	3b3c      	subs	r3, #60	; 0x3c
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	4299      	cmp	r1, r3
 800ad4a:	d133      	bne.n	800adb4 <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	6859      	ldr	r1, [r3, #4]
 800ad50:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800ad54:	4613      	mov	r3, r2
 800ad56:	005b      	lsls	r3, r3, #1
 800ad58:	4413      	add	r3, r2
 800ad5a:	00db      	lsls	r3, r3, #3
 800ad5c:	3350      	adds	r3, #80	; 0x50
 800ad5e:	443b      	add	r3, r7
 800ad60:	3b38      	subs	r3, #56	; 0x38
 800ad62:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800ad64:	4299      	cmp	r1, r3
 800ad66:	d125      	bne.n	800adb4 <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	68d9      	ldr	r1, [r3, #12]
 800ad6c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800ad70:	4613      	mov	r3, r2
 800ad72:	005b      	lsls	r3, r3, #1
 800ad74:	4413      	add	r3, r2
 800ad76:	00db      	lsls	r3, r3, #3
 800ad78:	3350      	adds	r3, #80	; 0x50
 800ad7a:	443b      	add	r3, r7
 800ad7c:	3b30      	subs	r3, #48	; 0x30
 800ad7e:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 800ad80:	4299      	cmp	r1, r3
 800ad82:	d117      	bne.n	800adb4 <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	6919      	ldr	r1, [r3, #16]
 800ad88:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800ad8c:	4613      	mov	r3, r2
 800ad8e:	005b      	lsls	r3, r3, #1
 800ad90:	4413      	add	r3, r2
 800ad92:	00db      	lsls	r3, r3, #3
 800ad94:	3350      	adds	r3, #80	; 0x50
 800ad96:	443b      	add	r3, r7
 800ad98:	3b2c      	subs	r3, #44	; 0x2c
 800ad9a:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 800ad9c:	4299      	cmp	r1, r3
 800ad9e:	d109      	bne.n	800adb4 <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 800ada0:	4b03      	ldr	r3, [pc, #12]	; (800adb0 <HAL_OSPIM_Config+0x508>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	4a02      	ldr	r2, [pc, #8]	; (800adb0 <HAL_OSPIM_Config+0x508>)
 800ada6:	f043 0301 	orr.w	r3, r3, #1
 800adaa:	6013      	str	r3, [r2, #0]
 800adac:	e0ce      	b.n	800af4c <HAL_OSPIM_Config+0x6a4>
 800adae:	bf00      	nop
 800adb0:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 800adb4:	49bb      	ldr	r1, [pc, #748]	; (800b0a4 <HAL_OSPIM_Config+0x7fc>)
 800adb6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800adba:	4613      	mov	r3, r2
 800adbc:	005b      	lsls	r3, r3, #1
 800adbe:	4413      	add	r3, r2
 800adc0:	00db      	lsls	r3, r3, #3
 800adc2:	3350      	adds	r3, #80	; 0x50
 800adc4:	443b      	add	r3, r7
 800adc6:	3b3c      	subs	r3, #60	; 0x3c
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	3b01      	subs	r3, #1
 800adcc:	009b      	lsls	r3, r3, #2
 800adce:	440b      	add	r3, r1
 800add0:	6859      	ldr	r1, [r3, #4]
 800add2:	48b4      	ldr	r0, [pc, #720]	; (800b0a4 <HAL_OSPIM_Config+0x7fc>)
 800add4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800add8:	4613      	mov	r3, r2
 800adda:	005b      	lsls	r3, r3, #1
 800addc:	4413      	add	r3, r2
 800adde:	00db      	lsls	r3, r3, #3
 800ade0:	3350      	adds	r3, #80	; 0x50
 800ade2:	443b      	add	r3, r7
 800ade4:	3b3c      	subs	r3, #60	; 0x3c
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	3b01      	subs	r3, #1
 800adea:	f021 0201 	bic.w	r2, r1, #1
 800adee:	009b      	lsls	r3, r3, #2
 800adf0:	4403      	add	r3, r0
 800adf2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800adf4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800adf8:	4613      	mov	r3, r2
 800adfa:	005b      	lsls	r3, r3, #1
 800adfc:	4413      	add	r3, r2
 800adfe:	00db      	lsls	r3, r3, #3
 800ae00:	3350      	adds	r3, #80	; 0x50
 800ae02:	443b      	add	r3, r7
 800ae04:	3b38      	subs	r3, #56	; 0x38
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d01f      	beq.n	800ae4c <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 800ae0c:	49a5      	ldr	r1, [pc, #660]	; (800b0a4 <HAL_OSPIM_Config+0x7fc>)
 800ae0e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800ae12:	4613      	mov	r3, r2
 800ae14:	005b      	lsls	r3, r3, #1
 800ae16:	4413      	add	r3, r2
 800ae18:	00db      	lsls	r3, r3, #3
 800ae1a:	3350      	adds	r3, #80	; 0x50
 800ae1c:	443b      	add	r3, r7
 800ae1e:	3b38      	subs	r3, #56	; 0x38
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	3b01      	subs	r3, #1
 800ae24:	009b      	lsls	r3, r3, #2
 800ae26:	440b      	add	r3, r1
 800ae28:	6859      	ldr	r1, [r3, #4]
 800ae2a:	489e      	ldr	r0, [pc, #632]	; (800b0a4 <HAL_OSPIM_Config+0x7fc>)
 800ae2c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800ae30:	4613      	mov	r3, r2
 800ae32:	005b      	lsls	r3, r3, #1
 800ae34:	4413      	add	r3, r2
 800ae36:	00db      	lsls	r3, r3, #3
 800ae38:	3350      	adds	r3, #80	; 0x50
 800ae3a:	443b      	add	r3, r7
 800ae3c:	3b38      	subs	r3, #56	; 0x38
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	3b01      	subs	r3, #1
 800ae42:	f021 0210 	bic.w	r2, r1, #16
 800ae46:	009b      	lsls	r3, r3, #2
 800ae48:	4403      	add	r3, r0
 800ae4a:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 800ae4c:	4995      	ldr	r1, [pc, #596]	; (800b0a4 <HAL_OSPIM_Config+0x7fc>)
 800ae4e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800ae52:	4613      	mov	r3, r2
 800ae54:	005b      	lsls	r3, r3, #1
 800ae56:	4413      	add	r3, r2
 800ae58:	00db      	lsls	r3, r3, #3
 800ae5a:	3350      	adds	r3, #80	; 0x50
 800ae5c:	443b      	add	r3, r7
 800ae5e:	3b34      	subs	r3, #52	; 0x34
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	3b01      	subs	r3, #1
 800ae64:	009b      	lsls	r3, r3, #2
 800ae66:	440b      	add	r3, r1
 800ae68:	6859      	ldr	r1, [r3, #4]
 800ae6a:	488e      	ldr	r0, [pc, #568]	; (800b0a4 <HAL_OSPIM_Config+0x7fc>)
 800ae6c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800ae70:	4613      	mov	r3, r2
 800ae72:	005b      	lsls	r3, r3, #1
 800ae74:	4413      	add	r3, r2
 800ae76:	00db      	lsls	r3, r3, #3
 800ae78:	3350      	adds	r3, #80	; 0x50
 800ae7a:	443b      	add	r3, r7
 800ae7c:	3b34      	subs	r3, #52	; 0x34
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	3b01      	subs	r3, #1
 800ae82:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800ae86:	009b      	lsls	r3, r3, #2
 800ae88:	4403      	add	r3, r0
 800ae8a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800ae8c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800ae90:	4613      	mov	r3, r2
 800ae92:	005b      	lsls	r3, r3, #1
 800ae94:	4413      	add	r3, r2
 800ae96:	00db      	lsls	r3, r3, #3
 800ae98:	3350      	adds	r3, #80	; 0x50
 800ae9a:	443b      	add	r3, r7
 800ae9c:	3b30      	subs	r3, #48	; 0x30
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d023      	beq.n	800aeec <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800aea4:	497f      	ldr	r1, [pc, #508]	; (800b0a4 <HAL_OSPIM_Config+0x7fc>)
 800aea6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800aeaa:	4613      	mov	r3, r2
 800aeac:	005b      	lsls	r3, r3, #1
 800aeae:	4413      	add	r3, r2
 800aeb0:	00db      	lsls	r3, r3, #3
 800aeb2:	3350      	adds	r3, #80	; 0x50
 800aeb4:	443b      	add	r3, r7
 800aeb6:	3b30      	subs	r3, #48	; 0x30
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	3b01      	subs	r3, #1
 800aebc:	f003 0301 	and.w	r3, r3, #1
 800aec0:	009b      	lsls	r3, r3, #2
 800aec2:	440b      	add	r3, r1
 800aec4:	6859      	ldr	r1, [r3, #4]
 800aec6:	4877      	ldr	r0, [pc, #476]	; (800b0a4 <HAL_OSPIM_Config+0x7fc>)
 800aec8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800aecc:	4613      	mov	r3, r2
 800aece:	005b      	lsls	r3, r3, #1
 800aed0:	4413      	add	r3, r2
 800aed2:	00db      	lsls	r3, r3, #3
 800aed4:	3350      	adds	r3, #80	; 0x50
 800aed6:	443b      	add	r3, r7
 800aed8:	3b30      	subs	r3, #48	; 0x30
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	3b01      	subs	r3, #1
 800aede:	f003 0301 	and.w	r3, r3, #1
 800aee2:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800aee6:	009b      	lsls	r3, r3, #2
 800aee8:	4403      	add	r3, r0
 800aeea:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800aeec:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800aef0:	4613      	mov	r3, r2
 800aef2:	005b      	lsls	r3, r3, #1
 800aef4:	4413      	add	r3, r2
 800aef6:	00db      	lsls	r3, r3, #3
 800aef8:	3350      	adds	r3, #80	; 0x50
 800aefa:	443b      	add	r3, r7
 800aefc:	3b2c      	subs	r3, #44	; 0x2c
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d023      	beq.n	800af4c <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800af04:	4967      	ldr	r1, [pc, #412]	; (800b0a4 <HAL_OSPIM_Config+0x7fc>)
 800af06:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800af0a:	4613      	mov	r3, r2
 800af0c:	005b      	lsls	r3, r3, #1
 800af0e:	4413      	add	r3, r2
 800af10:	00db      	lsls	r3, r3, #3
 800af12:	3350      	adds	r3, #80	; 0x50
 800af14:	443b      	add	r3, r7
 800af16:	3b2c      	subs	r3, #44	; 0x2c
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	3b01      	subs	r3, #1
 800af1c:	f003 0301 	and.w	r3, r3, #1
 800af20:	009b      	lsls	r3, r3, #2
 800af22:	440b      	add	r3, r1
 800af24:	6859      	ldr	r1, [r3, #4]
 800af26:	485f      	ldr	r0, [pc, #380]	; (800b0a4 <HAL_OSPIM_Config+0x7fc>)
 800af28:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800af2c:	4613      	mov	r3, r2
 800af2e:	005b      	lsls	r3, r3, #1
 800af30:	4413      	add	r3, r2
 800af32:	00db      	lsls	r3, r3, #3
 800af34:	3350      	adds	r3, #80	; 0x50
 800af36:	443b      	add	r3, r7
 800af38:	3b2c      	subs	r3, #44	; 0x2c
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	3b01      	subs	r3, #1
 800af3e:	f003 0301 	and.w	r3, r3, #1
 800af42:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800af46:	009b      	lsls	r3, r3, #2
 800af48:	4403      	add	r3, r0
 800af4a:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 800af4c:	4a55      	ldr	r2, [pc, #340]	; (800b0a4 <HAL_OSPIM_Config+0x7fc>)
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	689b      	ldr	r3, [r3, #8]
 800af52:	3b01      	subs	r3, #1
 800af54:	009b      	lsls	r3, r3, #2
 800af56:	4413      	add	r3, r2
 800af58:	685b      	ldr	r3, [r3, #4]
 800af5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800af5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af60:	025b      	lsls	r3, r3, #9
 800af62:	431a      	orrs	r2, r3
 800af64:	494f      	ldr	r1, [pc, #316]	; (800b0a4 <HAL_OSPIM_Config+0x7fc>)
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	689b      	ldr	r3, [r3, #8]
 800af6a:	3b01      	subs	r3, #1
 800af6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800af70:	009b      	lsls	r3, r3, #2
 800af72:	440b      	add	r3, r1
 800af74:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	695b      	ldr	r3, [r3, #20]
 800af7a:	1e5a      	subs	r2, r3, #1
 800af7c:	4b49      	ldr	r3, [pc, #292]	; (800b0a4 <HAL_OSPIM_Config+0x7fc>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	0c1b      	lsrs	r3, r3, #16
 800af82:	b2db      	uxtb	r3, r3
 800af84:	429a      	cmp	r2, r3
 800af86:	d90a      	bls.n	800af9e <HAL_OSPIM_Config+0x6f6>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 800af88:	4b46      	ldr	r3, [pc, #280]	; (800b0a4 <HAL_OSPIM_Config+0x7fc>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	695b      	ldr	r3, [r3, #20]
 800af94:	3b01      	subs	r3, #1
 800af96:	041b      	lsls	r3, r3, #16
 800af98:	4942      	ldr	r1, [pc, #264]	; (800b0a4 <HAL_OSPIM_Config+0x7fc>)
 800af9a:	4313      	orrs	r3, r2
 800af9c:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800af9e:	4b41      	ldr	r3, [pc, #260]	; (800b0a4 <HAL_OSPIM_Config+0x7fc>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f003 0301 	and.w	r3, r3, #1
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	f000 809a 	beq.w	800b0e0 <HAL_OSPIM_Config+0x838>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 800afac:	4a3d      	ldr	r2, [pc, #244]	; (800b0a4 <HAL_OSPIM_Config+0x7fc>)
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	3b01      	subs	r3, #1
 800afb4:	009b      	lsls	r3, r3, #2
 800afb6:	4413      	add	r3, r2
 800afb8:	685b      	ldr	r3, [r3, #4]
 800afba:	f023 0203 	bic.w	r2, r3, #3
 800afbe:	4939      	ldr	r1, [pc, #228]	; (800b0a4 <HAL_OSPIM_Config+0x7fc>)
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	3b01      	subs	r3, #1
 800afc6:	f042 0201 	orr.w	r2, r2, #1
 800afca:	009b      	lsls	r3, r3, #2
 800afcc:	440b      	add	r3, r1
 800afce:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	685b      	ldr	r3, [r3, #4]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d011      	beq.n	800affc <HAL_OSPIM_Config+0x754>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 800afd8:	4a32      	ldr	r2, [pc, #200]	; (800b0a4 <HAL_OSPIM_Config+0x7fc>)
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	685b      	ldr	r3, [r3, #4]
 800afde:	3b01      	subs	r3, #1
 800afe0:	009b      	lsls	r3, r3, #2
 800afe2:	4413      	add	r3, r2
 800afe4:	685b      	ldr	r3, [r3, #4]
 800afe6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800afea:	492e      	ldr	r1, [pc, #184]	; (800b0a4 <HAL_OSPIM_Config+0x7fc>)
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	685b      	ldr	r3, [r3, #4]
 800aff0:	3b01      	subs	r3, #1
 800aff2:	f042 0210 	orr.w	r2, r2, #16
 800aff6:	009b      	lsls	r3, r3, #2
 800aff8:	440b      	add	r3, r1
 800affa:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	68db      	ldr	r3, [r3, #12]
 800b000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b004:	2b00      	cmp	r3, #0
 800b006:	d016      	beq.n	800b036 <HAL_OSPIM_Config+0x78e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800b008:	4a26      	ldr	r2, [pc, #152]	; (800b0a4 <HAL_OSPIM_Config+0x7fc>)
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	68db      	ldr	r3, [r3, #12]
 800b00e:	3b01      	subs	r3, #1
 800b010:	f003 0301 	and.w	r3, r3, #1
 800b014:	009b      	lsls	r3, r3, #2
 800b016:	4413      	add	r3, r2
 800b018:	685b      	ldr	r3, [r3, #4]
 800b01a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800b01e:	4921      	ldr	r1, [pc, #132]	; (800b0a4 <HAL_OSPIM_Config+0x7fc>)
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	68db      	ldr	r3, [r3, #12]
 800b024:	3b01      	subs	r3, #1
 800b026:	f003 0301 	and.w	r3, r3, #1
 800b02a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b02e:	009b      	lsls	r3, r3, #2
 800b030:	440b      	add	r3, r1
 800b032:	605a      	str	r2, [r3, #4]
 800b034:	e019      	b.n	800b06a <HAL_OSPIM_Config+0x7c2>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	68db      	ldr	r3, [r3, #12]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d015      	beq.n	800b06a <HAL_OSPIM_Config+0x7c2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800b03e:	4a19      	ldr	r2, [pc, #100]	; (800b0a4 <HAL_OSPIM_Config+0x7fc>)
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	68db      	ldr	r3, [r3, #12]
 800b044:	3b01      	subs	r3, #1
 800b046:	f003 0301 	and.w	r3, r3, #1
 800b04a:	009b      	lsls	r3, r3, #2
 800b04c:	4413      	add	r3, r2
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800b054:	4913      	ldr	r1, [pc, #76]	; (800b0a4 <HAL_OSPIM_Config+0x7fc>)
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	68db      	ldr	r3, [r3, #12]
 800b05a:	3b01      	subs	r3, #1
 800b05c:	f003 0301 	and.w	r3, r3, #1
 800b060:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800b064:	009b      	lsls	r3, r3, #2
 800b066:	440b      	add	r3, r1
 800b068:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	691b      	ldr	r3, [r3, #16]
 800b06e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b072:	2b00      	cmp	r3, #0
 800b074:	d018      	beq.n	800b0a8 <HAL_OSPIM_Config+0x800>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800b076:	4a0b      	ldr	r2, [pc, #44]	; (800b0a4 <HAL_OSPIM_Config+0x7fc>)
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	691b      	ldr	r3, [r3, #16]
 800b07c:	3b01      	subs	r3, #1
 800b07e:	f003 0301 	and.w	r3, r3, #1
 800b082:	009b      	lsls	r3, r3, #2
 800b084:	4413      	add	r3, r2
 800b086:	685b      	ldr	r3, [r3, #4]
 800b088:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800b08c:	4905      	ldr	r1, [pc, #20]	; (800b0a4 <HAL_OSPIM_Config+0x7fc>)
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	691b      	ldr	r3, [r3, #16]
 800b092:	3b01      	subs	r3, #1
 800b094:	f003 0301 	and.w	r3, r3, #1
 800b098:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 800b09c:	009b      	lsls	r3, r3, #2
 800b09e:	440b      	add	r3, r1
 800b0a0:	605a      	str	r2, [r3, #4]
 800b0a2:	e0c5      	b.n	800b230 <HAL_OSPIM_Config+0x988>
 800b0a4:	5200b400 	.word	0x5200b400
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	691b      	ldr	r3, [r3, #16]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	f000 80bf 	beq.w	800b230 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800b0b2:	4a6e      	ldr	r2, [pc, #440]	; (800b26c <HAL_OSPIM_Config+0x9c4>)
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	691b      	ldr	r3, [r3, #16]
 800b0b8:	3b01      	subs	r3, #1
 800b0ba:	f003 0301 	and.w	r3, r3, #1
 800b0be:	009b      	lsls	r3, r3, #2
 800b0c0:	4413      	add	r3, r2
 800b0c2:	685b      	ldr	r3, [r3, #4]
 800b0c4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800b0c8:	4968      	ldr	r1, [pc, #416]	; (800b26c <HAL_OSPIM_Config+0x9c4>)
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	691b      	ldr	r3, [r3, #16]
 800b0ce:	3b01      	subs	r3, #1
 800b0d0:	f003 0301 	and.w	r3, r3, #1
 800b0d4:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 800b0d8:	009b      	lsls	r3, r3, #2
 800b0da:	440b      	add	r3, r1
 800b0dc:	605a      	str	r2, [r3, #4]
 800b0de:	e0a7      	b.n	800b230 <HAL_OSPIM_Config+0x988>
         /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 800b0e0:	4a62      	ldr	r2, [pc, #392]	; (800b26c <HAL_OSPIM_Config+0x9c4>)
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	3b01      	subs	r3, #1
 800b0e8:	009b      	lsls	r3, r3, #2
 800b0ea:	4413      	add	r3, r2
 800b0ec:	685b      	ldr	r3, [r3, #4]
 800b0ee:	f023 0203 	bic.w	r2, r3, #3
 800b0f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b0f4:	005b      	lsls	r3, r3, #1
 800b0f6:	431a      	orrs	r2, r3
 800b0f8:	495c      	ldr	r1, [pc, #368]	; (800b26c <HAL_OSPIM_Config+0x9c4>)
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	3b01      	subs	r3, #1
 800b100:	f042 0201 	orr.w	r2, r2, #1
 800b104:	009b      	lsls	r3, r3, #2
 800b106:	440b      	add	r3, r1
 800b108:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 800b10a:	68bb      	ldr	r3, [r7, #8]
 800b10c:	685b      	ldr	r3, [r3, #4]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d014      	beq.n	800b13c <HAL_OSPIM_Config+0x894>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 800b112:	4a56      	ldr	r2, [pc, #344]	; (800b26c <HAL_OSPIM_Config+0x9c4>)
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	685b      	ldr	r3, [r3, #4]
 800b118:	3b01      	subs	r3, #1
 800b11a:	009b      	lsls	r3, r3, #2
 800b11c:	4413      	add	r3, r2
 800b11e:	685b      	ldr	r3, [r3, #4]
 800b120:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b126:	015b      	lsls	r3, r3, #5
 800b128:	431a      	orrs	r2, r3
 800b12a:	4950      	ldr	r1, [pc, #320]	; (800b26c <HAL_OSPIM_Config+0x9c4>)
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	685b      	ldr	r3, [r3, #4]
 800b130:	3b01      	subs	r3, #1
 800b132:	f042 0210 	orr.w	r2, r2, #16
 800b136:	009b      	lsls	r3, r3, #2
 800b138:	440b      	add	r3, r1
 800b13a:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	68db      	ldr	r3, [r3, #12]
 800b140:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b144:	2b00      	cmp	r3, #0
 800b146:	d019      	beq.n	800b17c <HAL_OSPIM_Config+0x8d4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800b148:	4a48      	ldr	r2, [pc, #288]	; (800b26c <HAL_OSPIM_Config+0x9c4>)
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	68db      	ldr	r3, [r3, #12]
 800b14e:	3b01      	subs	r3, #1
 800b150:	f003 0301 	and.w	r3, r3, #1
 800b154:	009b      	lsls	r3, r3, #2
 800b156:	4413      	add	r3, r2
 800b158:	685b      	ldr	r3, [r3, #4]
 800b15a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800b15e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b160:	049b      	lsls	r3, r3, #18
 800b162:	431a      	orrs	r2, r3
 800b164:	4941      	ldr	r1, [pc, #260]	; (800b26c <HAL_OSPIM_Config+0x9c4>)
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	68db      	ldr	r3, [r3, #12]
 800b16a:	3b01      	subs	r3, #1
 800b16c:	f003 0301 	and.w	r3, r3, #1
 800b170:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b174:	009b      	lsls	r3, r3, #2
 800b176:	440b      	add	r3, r1
 800b178:	605a      	str	r2, [r3, #4]
 800b17a:	e01c      	b.n	800b1b6 <HAL_OSPIM_Config+0x90e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	68db      	ldr	r3, [r3, #12]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d018      	beq.n	800b1b6 <HAL_OSPIM_Config+0x90e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800b184:	4a39      	ldr	r2, [pc, #228]	; (800b26c <HAL_OSPIM_Config+0x9c4>)
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	68db      	ldr	r3, [r3, #12]
 800b18a:	3b01      	subs	r3, #1
 800b18c:	f003 0301 	and.w	r3, r3, #1
 800b190:	009b      	lsls	r3, r3, #2
 800b192:	4413      	add	r3, r2
 800b194:	685b      	ldr	r3, [r3, #4]
 800b196:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800b19a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b19c:	069b      	lsls	r3, r3, #26
 800b19e:	431a      	orrs	r2, r3
 800b1a0:	4932      	ldr	r1, [pc, #200]	; (800b26c <HAL_OSPIM_Config+0x9c4>)
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	68db      	ldr	r3, [r3, #12]
 800b1a6:	3b01      	subs	r3, #1
 800b1a8:	f003 0301 	and.w	r3, r3, #1
 800b1ac:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800b1b0:	009b      	lsls	r3, r3, #2
 800b1b2:	440b      	add	r3, r1
 800b1b4:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	691b      	ldr	r3, [r3, #16]
 800b1ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d019      	beq.n	800b1f6 <HAL_OSPIM_Config+0x94e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800b1c2:	4a2a      	ldr	r2, [pc, #168]	; (800b26c <HAL_OSPIM_Config+0x9c4>)
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	691b      	ldr	r3, [r3, #16]
 800b1c8:	3b01      	subs	r3, #1
 800b1ca:	f003 0301 	and.w	r3, r3, #1
 800b1ce:	009b      	lsls	r3, r3, #2
 800b1d0:	4413      	add	r3, r2
 800b1d2:	685b      	ldr	r3, [r3, #4]
 800b1d4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800b1d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1da:	049b      	lsls	r3, r3, #18
 800b1dc:	431a      	orrs	r2, r3
 800b1de:	4923      	ldr	r1, [pc, #140]	; (800b26c <HAL_OSPIM_Config+0x9c4>)
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	691b      	ldr	r3, [r3, #16]
 800b1e4:	3b01      	subs	r3, #1
 800b1e6:	f003 0301 	and.w	r3, r3, #1
 800b1ea:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 800b1ee:	009b      	lsls	r3, r3, #2
 800b1f0:	440b      	add	r3, r1
 800b1f2:	605a      	str	r2, [r3, #4]
 800b1f4:	e01c      	b.n	800b230 <HAL_OSPIM_Config+0x988>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	691b      	ldr	r3, [r3, #16]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d018      	beq.n	800b230 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800b1fe:	4a1b      	ldr	r2, [pc, #108]	; (800b26c <HAL_OSPIM_Config+0x9c4>)
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	691b      	ldr	r3, [r3, #16]
 800b204:	3b01      	subs	r3, #1
 800b206:	f003 0301 	and.w	r3, r3, #1
 800b20a:	009b      	lsls	r3, r3, #2
 800b20c:	4413      	add	r3, r2
 800b20e:	685b      	ldr	r3, [r3, #4]
 800b210:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800b214:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b216:	069b      	lsls	r3, r3, #26
 800b218:	431a      	orrs	r2, r3
 800b21a:	4914      	ldr	r1, [pc, #80]	; (800b26c <HAL_OSPIM_Config+0x9c4>)
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	691b      	ldr	r3, [r3, #16]
 800b220:	3b01      	subs	r3, #1
 800b222:	f003 0301 	and.w	r3, r3, #1
 800b226:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 800b22a:	009b      	lsls	r3, r3, #2
 800b22c:	440b      	add	r3, r1
 800b22e:	605a      	str	r2, [r3, #4]
         /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 800b230:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800b234:	f003 0301 	and.w	r3, r3, #1
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d005      	beq.n	800b248 <HAL_OSPIM_Config+0x9a0>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800b23c:	4b0c      	ldr	r3, [pc, #48]	; (800b270 <HAL_OSPIM_Config+0x9c8>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	4a0b      	ldr	r2, [pc, #44]	; (800b270 <HAL_OSPIM_Config+0x9c8>)
 800b242:	f043 0301 	orr.w	r3, r3, #1
 800b246:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 800b248:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800b24c:	f003 0302 	and.w	r3, r3, #2
 800b250:	2b00      	cmp	r3, #0
 800b252:	d005      	beq.n	800b260 <HAL_OSPIM_Config+0x9b8>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800b254:	4b07      	ldr	r3, [pc, #28]	; (800b274 <HAL_OSPIM_Config+0x9cc>)
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	4a06      	ldr	r2, [pc, #24]	; (800b274 <HAL_OSPIM_Config+0x9cc>)
 800b25a:	f043 0301 	orr.w	r3, r3, #1
 800b25e:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 800b260:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800b264:	4618      	mov	r0, r3
 800b266:	3750      	adds	r7, #80	; 0x50
 800b268:	46bd      	mov	sp, r7
 800b26a:	bd80      	pop	{r7, pc}
 800b26c:	5200b400 	.word	0x5200b400
 800b270:	52005000 	.word	0x52005000
 800b274:	5200a000 	.word	0x5200a000

0800b278 <OSPI_DMAAbortCplt>:
  * @brief  DMA OSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void OSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b084      	sub	sp, #16
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
  OSPI_HandleTypeDef* hospi = ( OSPI_HandleTypeDef* )(hmdma->Parent);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b284:	60fb      	str	r3, [r7, #12]
  hospi->XferCount = 0;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	2200      	movs	r2, #0
 800b28a:	649a      	str	r2, [r3, #72]	; 0x48

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b290:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b294:	d122      	bne.n	800b2dc <OSPI_DMAAbortCplt+0x64>
  {
    /* DMA abort called by OctoSPI abort */
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	6a1b      	ldr	r3, [r3, #32]
 800b29c:	f003 0320 	and.w	r3, r3, #32
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d014      	beq.n	800b2ce <OSPI_DMAAbortCplt+0x56>
    {
      /* Clear transfer complete flag */
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	2202      	movs	r2, #2
 800b2aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enable the transfer complete interrupts */
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	681a      	ldr	r2, [r3, #0]
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800b2ba:	601a      	str	r2, [r3, #0]

      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	681a      	ldr	r2, [r3, #0]
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f042 0202 	orr.w	r2, r2, #2
 800b2ca:	601a      	str	r2, [r3, #0]
    hospi->ErrorCallback(hospi);
#else
    HAL_OSPI_ErrorCallback(hospi);
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
}
 800b2cc:	e00c      	b.n	800b2e8 <OSPI_DMAAbortCplt+0x70>
      hospi->State = HAL_OSPI_STATE_READY;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	2202      	movs	r2, #2
 800b2d2:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_OSPI_AbortCpltCallback(hospi);
 800b2d4:	68f8      	ldr	r0, [r7, #12]
 800b2d6:	f7ff fa91 	bl	800a7fc <HAL_OSPI_AbortCpltCallback>
}
 800b2da:	e005      	b.n	800b2e8 <OSPI_DMAAbortCplt+0x70>
    hospi->State = HAL_OSPI_STATE_READY;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	2202      	movs	r2, #2
 800b2e0:	651a      	str	r2, [r3, #80]	; 0x50
    HAL_OSPI_ErrorCallback(hospi);
 800b2e2:	68f8      	ldr	r0, [r7, #12]
 800b2e4:	f7ff fa80 	bl	800a7e8 <HAL_OSPI_ErrorCallback>
}
 800b2e8:	bf00      	nop
 800b2ea:	3710      	adds	r7, #16
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}

0800b2f0 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b084      	sub	sp, #16
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	60f8      	str	r0, [r7, #12]
 800b2f8:	60b9      	str	r1, [r7, #8]
 800b2fa:	603b      	str	r3, [r7, #0]
 800b2fc:	4613      	mov	r3, r2
 800b2fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800b300:	e01a      	b.n	800b338 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b302:	69bb      	ldr	r3, [r7, #24]
 800b304:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b308:	d016      	beq.n	800b338 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b30a:	f7f8 fef3 	bl	80040f4 <HAL_GetTick>
 800b30e:	4602      	mov	r2, r0
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	1ad3      	subs	r3, r2, r3
 800b314:	69ba      	ldr	r2, [r7, #24]
 800b316:	429a      	cmp	r2, r3
 800b318:	d302      	bcc.n	800b320 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800b31a:	69bb      	ldr	r3, [r7, #24]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d10b      	bne.n	800b338 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b326:	651a      	str	r2, [r3, #80]	; 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b32c:	f043 0201 	orr.w	r2, r3, #1
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	655a      	str	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 800b334:	2301      	movs	r3, #1
 800b336:	e00e      	b.n	800b356 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	6a1a      	ldr	r2, [r3, #32]
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	4013      	ands	r3, r2
 800b342:	2b00      	cmp	r3, #0
 800b344:	bf14      	ite	ne
 800b346:	2301      	movne	r3, #1
 800b348:	2300      	moveq	r3, #0
 800b34a:	b2db      	uxtb	r3, r3
 800b34c:	461a      	mov	r2, r3
 800b34e:	79fb      	ldrb	r3, [r7, #7]
 800b350:	429a      	cmp	r2, r3
 800b352:	d1d6      	bne.n	800b302 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b354:	2300      	movs	r3, #0
}
 800b356:	4618      	mov	r0, r3
 800b358:	3710      	adds	r7, #16
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}
	...

0800b360 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 800b360:	b480      	push	{r7}
 800b362:	b089      	sub	sp, #36	; 0x24
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
 800b368:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b36a:	2300      	movs	r3, #0
 800b36c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	681a      	ldr	r2, [r3, #0]
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800b37c:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	689b      	ldr	r3, [r3, #8]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d10a      	bne.n	800b39c <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	685a      	ldr	r2, [r3, #4]
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	430a      	orrs	r2, r1
 800b39a:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	2b02      	cmp	r3, #2
 800b3a2:	d114      	bne.n	800b3ce <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800b3ac:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800b3b6:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800b3c0:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800b3ca:	60fb      	str	r3, [r7, #12]
 800b3cc:	e02c      	b.n	800b428 <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	2b03      	cmp	r3, #3
 800b3d4:	d114      	bne.n	800b400 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800b3de:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800b3e8:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b3f2:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800b3fc:	60fb      	str	r3, [r7, #12]
 800b3fe:	e013      	b.n	800b428 <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b408:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800b412:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800b41c:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800b426:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b430:	431a      	orrs	r2, r3
 800b432:	69bb      	ldr	r3, [r7, #24]
 800b434:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d012      	beq.n	800b464 <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 800b446:	69bb      	ldr	r3, [r7, #24]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b456:	4319      	orrs	r1, r3
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b45c:	430b      	orrs	r3, r1
 800b45e:	431a      	orrs	r2, r3
 800b460:	69bb      	ldr	r3, [r7, #24]
 800b462:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 800b464:	697b      	ldr	r3, [r7, #20]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	f023 021f 	bic.w	r2, r3, #31
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b470:	431a      	orrs	r2, r3
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d009      	beq.n	800b492 <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d105      	bne.n	800b492 <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	3a01      	subs	r2, #1
 800b490:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	68db      	ldr	r3, [r3, #12]
 800b496:	2b00      	cmp	r3, #0
 800b498:	f000 8095 	beq.w	800b5c6 <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	69db      	ldr	r3, [r3, #28]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d053      	beq.n	800b54c <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d01e      	beq.n	800b4ea <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800b4ac:	69bb      	ldr	r3, [r7, #24]
 800b4ae:	681a      	ldr	r2, [r3, #0]
 800b4b0:	4b64      	ldr	r3, [pc, #400]	; (800b644 <OSPI_ConfigCmd+0x2e4>)
 800b4b2:	4013      	ands	r3, r2
 800b4b4:	683a      	ldr	r2, [r7, #0]
 800b4b6:	68d1      	ldr	r1, [r2, #12]
 800b4b8:	683a      	ldr	r2, [r7, #0]
 800b4ba:	6952      	ldr	r2, [r2, #20]
 800b4bc:	4311      	orrs	r1, r2
 800b4be:	683a      	ldr	r2, [r7, #0]
 800b4c0:	6912      	ldr	r2, [r2, #16]
 800b4c2:	4311      	orrs	r1, r2
 800b4c4:	683a      	ldr	r2, [r7, #0]
 800b4c6:	69d2      	ldr	r2, [r2, #28]
 800b4c8:	4311      	orrs	r1, r2
 800b4ca:	683a      	ldr	r2, [r7, #0]
 800b4cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b4ce:	4311      	orrs	r1, r2
 800b4d0:	683a      	ldr	r2, [r7, #0]
 800b4d2:	6a12      	ldr	r2, [r2, #32]
 800b4d4:	4311      	orrs	r1, r2
 800b4d6:	683a      	ldr	r2, [r7, #0]
 800b4d8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b4da:	4311      	orrs	r1, r2
 800b4dc:	683a      	ldr	r2, [r7, #0]
 800b4de:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b4e0:	430a      	orrs	r2, r1
 800b4e2:	431a      	orrs	r2, r3
 800b4e4:	69bb      	ldr	r3, [r7, #24]
 800b4e6:	601a      	str	r2, [r3, #0]
 800b4e8:	e026      	b.n	800b538 <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800b4ea:	69bb      	ldr	r3, [r7, #24]
 800b4ec:	681a      	ldr	r2, [r3, #0]
 800b4ee:	4b56      	ldr	r3, [pc, #344]	; (800b648 <OSPI_ConfigCmd+0x2e8>)
 800b4f0:	4013      	ands	r3, r2
 800b4f2:	683a      	ldr	r2, [r7, #0]
 800b4f4:	68d1      	ldr	r1, [r2, #12]
 800b4f6:	683a      	ldr	r2, [r7, #0]
 800b4f8:	6952      	ldr	r2, [r2, #20]
 800b4fa:	4311      	orrs	r1, r2
 800b4fc:	683a      	ldr	r2, [r7, #0]
 800b4fe:	6912      	ldr	r2, [r2, #16]
 800b500:	4311      	orrs	r1, r2
 800b502:	683a      	ldr	r2, [r7, #0]
 800b504:	69d2      	ldr	r2, [r2, #28]
 800b506:	4311      	orrs	r1, r2
 800b508:	683a      	ldr	r2, [r7, #0]
 800b50a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b50c:	4311      	orrs	r1, r2
 800b50e:	683a      	ldr	r2, [r7, #0]
 800b510:	6a12      	ldr	r2, [r2, #32]
 800b512:	430a      	orrs	r2, r1
 800b514:	431a      	orrs	r2, r3
 800b516:	69bb      	ldr	r3, [r7, #24]
 800b518:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b51e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b522:	d109      	bne.n	800b538 <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800b528:	2b08      	cmp	r3, #8
 800b52a:	d105      	bne.n	800b538 <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800b52c:	69bb      	ldr	r3, [r7, #24]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b534:	69bb      	ldr	r3, [r7, #24]
 800b536:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	689a      	ldr	r2, [r3, #8]
 800b53c:	693b      	ldr	r3, [r7, #16]
 800b53e:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	683a      	ldr	r2, [r7, #0]
 800b546:	6992      	ldr	r2, [r2, #24]
 800b548:	649a      	str	r2, [r3, #72]	; 0x48
 800b54a:	e074      	b.n	800b636 <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b550:	2b00      	cmp	r3, #0
 800b552:	d015      	beq.n	800b580 <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 800b554:	69bb      	ldr	r3, [r7, #24]
 800b556:	681a      	ldr	r2, [r3, #0]
 800b558:	4b3c      	ldr	r3, [pc, #240]	; (800b64c <OSPI_ConfigCmd+0x2ec>)
 800b55a:	4013      	ands	r3, r2
 800b55c:	683a      	ldr	r2, [r7, #0]
 800b55e:	68d1      	ldr	r1, [r2, #12]
 800b560:	683a      	ldr	r2, [r7, #0]
 800b562:	6952      	ldr	r2, [r2, #20]
 800b564:	4311      	orrs	r1, r2
 800b566:	683a      	ldr	r2, [r7, #0]
 800b568:	6912      	ldr	r2, [r2, #16]
 800b56a:	4311      	orrs	r1, r2
 800b56c:	683a      	ldr	r2, [r7, #0]
 800b56e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b570:	4311      	orrs	r1, r2
 800b572:	683a      	ldr	r2, [r7, #0]
 800b574:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b576:	430a      	orrs	r2, r1
 800b578:	431a      	orrs	r2, r3
 800b57a:	69bb      	ldr	r3, [r7, #24]
 800b57c:	601a      	str	r2, [r3, #0]
 800b57e:	e01d      	b.n	800b5bc <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 800b580:	69bb      	ldr	r3, [r7, #24]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	68d9      	ldr	r1, [r3, #12]
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	695b      	ldr	r3, [r3, #20]
 800b590:	4319      	orrs	r1, r3
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	691b      	ldr	r3, [r3, #16]
 800b596:	430b      	orrs	r3, r1
 800b598:	431a      	orrs	r2, r3
 800b59a:	69bb      	ldr	r3, [r7, #24]
 800b59c:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b5a6:	d109      	bne.n	800b5bc <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800b5ac:	2b08      	cmp	r3, #8
 800b5ae:	d105      	bne.n	800b5bc <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800b5b0:	69bb      	ldr	r3, [r7, #24]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b5b8:	69bb      	ldr	r3, [r7, #24]
 800b5ba:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	689a      	ldr	r2, [r3, #8]
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	601a      	str	r2, [r3, #0]
 800b5c4:	e037      	b.n	800b636 <OSPI_ConfigCmd+0x2d6>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	69db      	ldr	r3, [r3, #28]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d02e      	beq.n	800b62c <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d015      	beq.n	800b602 <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 800b5d6:	69bb      	ldr	r3, [r7, #24]
 800b5d8:	681a      	ldr	r2, [r3, #0]
 800b5da:	4b1d      	ldr	r3, [pc, #116]	; (800b650 <OSPI_ConfigCmd+0x2f0>)
 800b5dc:	4013      	ands	r3, r2
 800b5de:	683a      	ldr	r2, [r7, #0]
 800b5e0:	69d1      	ldr	r1, [r2, #28]
 800b5e2:	683a      	ldr	r2, [r7, #0]
 800b5e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b5e6:	4311      	orrs	r1, r2
 800b5e8:	683a      	ldr	r2, [r7, #0]
 800b5ea:	6a12      	ldr	r2, [r2, #32]
 800b5ec:	4311      	orrs	r1, r2
 800b5ee:	683a      	ldr	r2, [r7, #0]
 800b5f0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b5f2:	4311      	orrs	r1, r2
 800b5f4:	683a      	ldr	r2, [r7, #0]
 800b5f6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b5f8:	430a      	orrs	r2, r1
 800b5fa:	431a      	orrs	r2, r3
 800b5fc:	69bb      	ldr	r3, [r7, #24]
 800b5fe:	601a      	str	r2, [r3, #0]
 800b600:	e00e      	b.n	800b620 <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 800b602:	69bb      	ldr	r3, [r7, #24]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	69d9      	ldr	r1, [r3, #28]
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b612:	4319      	orrs	r1, r3
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	6a1b      	ldr	r3, [r3, #32]
 800b618:	430b      	orrs	r3, r1
 800b61a:	431a      	orrs	r2, r3
 800b61c:	69bb      	ldr	r3, [r7, #24]
 800b61e:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	683a      	ldr	r2, [r7, #0]
 800b626:	6992      	ldr	r2, [r2, #24]
 800b628:	649a      	str	r2, [r3, #72]	; 0x48
 800b62a:	e004      	b.n	800b636 <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 800b62c:	2301      	movs	r3, #1
 800b62e:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2208      	movs	r2, #8
 800b634:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 800b636:	7ffb      	ldrb	r3, [r7, #31]
}
 800b638:	4618      	mov	r0, r3
 800b63a:	3724      	adds	r7, #36	; 0x24
 800b63c:	46bd      	mov	sp, r7
 800b63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b642:	4770      	bx	lr
 800b644:	f0ffc0c0 	.word	0xf0ffc0c0
 800b648:	ffffc0c0 	.word	0xffffc0c0
 800b64c:	f0ffffc0 	.word	0xf0ffffc0
 800b650:	f0ffc0ff 	.word	0xf0ffc0ff

0800b654 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 800b654:	b480      	push	{r7}
 800b656:	b087      	sub	sp, #28
 800b658:	af00      	add	r7, sp, #0
 800b65a:	4603      	mov	r3, r0
 800b65c:	6039      	str	r1, [r7, #0]
 800b65e:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800b660:	2300      	movs	r3, #0
 800b662:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 800b664:	2300      	movs	r3, #0
 800b666:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 800b668:	79fb      	ldrb	r3, [r7, #7]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d005      	beq.n	800b67a <OSPIM_GetConfig+0x26>
 800b66e:	79fb      	ldrb	r3, [r7, #7]
 800b670:	2b02      	cmp	r3, #2
 800b672:	d802      	bhi.n	800b67a <OSPIM_GetConfig+0x26>
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d102      	bne.n	800b680 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800b67a:	2301      	movs	r3, #1
 800b67c:	75fb      	strb	r3, [r7, #23]
 800b67e:	e098      	b.n	800b7b2 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	2200      	movs	r2, #0
 800b684:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	2200      	movs	r2, #0
 800b68a:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	2200      	movs	r2, #0
 800b690:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	2200      	movs	r2, #0
 800b696:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	2200      	movs	r2, #0
 800b69c:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 800b69e:	79fb      	ldrb	r3, [r7, #7]
 800b6a0:	2b02      	cmp	r3, #2
 800b6a2:	d10b      	bne.n	800b6bc <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 800b6a4:	4b46      	ldr	r3, [pc, #280]	; (800b7c0 <OSPIM_GetConfig+0x16c>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f003 0301 	and.w	r3, r3, #1
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d102      	bne.n	800b6b6 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 800b6b0:	4b44      	ldr	r3, [pc, #272]	; (800b7c4 <OSPIM_GetConfig+0x170>)
 800b6b2:	613b      	str	r3, [r7, #16]
 800b6b4:	e002      	b.n	800b6bc <OSPIM_GetConfig+0x68>
               | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 800b6b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b6ba:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800b6bc:	2300      	movs	r3, #0
 800b6be:	60fb      	str	r3, [r7, #12]
 800b6c0:	e074      	b.n	800b7ac <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 800b6c2:	4a3f      	ldr	r2, [pc, #252]	; (800b7c0 <OSPIM_GetConfig+0x16c>)
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	009b      	lsls	r3, r3, #2
 800b6c8:	4413      	add	r3, r2
 800b6ca:	685b      	ldr	r3, [r3, #4]
 800b6cc:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	f003 0301 	and.w	r3, r3, #1
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d00a      	beq.n	800b6ee <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 800b6d8:	68ba      	ldr	r2, [r7, #8]
 800b6da:	693b      	ldr	r3, [r7, #16]
 800b6dc:	4053      	eors	r3, r2
 800b6de:	f003 0302 	and.w	r3, r3, #2
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d103      	bne.n	800b6ee <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	1c5a      	adds	r2, r3, #1
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800b6ee:	68bb      	ldr	r3, [r7, #8]
 800b6f0:	f003 0310 	and.w	r3, r3, #16
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d00a      	beq.n	800b70e <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 800b6f8:	68ba      	ldr	r2, [r7, #8]
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	4053      	eors	r3, r2
 800b6fe:	f003 0320 	and.w	r3, r3, #32
 800b702:	2b00      	cmp	r3, #0
 800b704:	d103      	bne.n	800b70e <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	1c5a      	adds	r2, r3, #1
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b714:	2b00      	cmp	r3, #0
 800b716:	d00a      	beq.n	800b72e <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 800b718:	68ba      	ldr	r2, [r7, #8]
 800b71a:	693b      	ldr	r3, [r7, #16]
 800b71c:	4053      	eors	r3, r2
 800b71e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b722:	2b00      	cmp	r3, #0
 800b724:	d103      	bne.n	800b72e <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	1c5a      	adds	r2, r3, #1
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b734:	2b00      	cmp	r3, #0
 800b736:	d018      	beq.n	800b76a <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 800b738:	68ba      	ldr	r2, [r7, #8]
 800b73a:	693b      	ldr	r3, [r7, #16]
 800b73c:	4053      	eors	r3, r2
 800b73e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b742:	2b00      	cmp	r3, #0
 800b744:	d111      	bne.n	800b76a <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d106      	bne.n	800b75e <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	3301      	adds	r3, #1
 800b754:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	60da      	str	r2, [r3, #12]
 800b75c:	e005      	b.n	800b76a <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	3301      	adds	r3, #1
 800b762:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 800b76a:	68bb      	ldr	r3, [r7, #8]
 800b76c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b770:	2b00      	cmp	r3, #0
 800b772:	d018      	beq.n	800b7a6 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 800b774:	68ba      	ldr	r2, [r7, #8]
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	4053      	eors	r3, r2
 800b77a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d111      	bne.n	800b7a6 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d106      	bne.n	800b79a <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	3301      	adds	r3, #1
 800b790:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	611a      	str	r2, [r3, #16]
 800b798:	e005      	b.n	800b7a6 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	3301      	adds	r3, #1
 800b79e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	3301      	adds	r3, #1
 800b7aa:	60fb      	str	r3, [r7, #12]
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	2b01      	cmp	r3, #1
 800b7b0:	d987      	bls.n	800b6c2 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 800b7b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	371c      	adds	r7, #28
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7be:	4770      	bx	lr
 800b7c0:	5200b400 	.word	0x5200b400
 800b7c4:	04040222 	.word	0x04040222

0800b7c8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 800b7cc:	4b05      	ldr	r3, [pc, #20]	; (800b7e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	4a04      	ldr	r2, [pc, #16]	; (800b7e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b7d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b7d6:	6013      	str	r3, [r2, #0]
}
 800b7d8:	bf00      	nop
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e0:	4770      	bx	lr
 800b7e2:	bf00      	nop
 800b7e4:	58024800 	.word	0x58024800

0800b7e8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b084      	sub	sp, #16
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800b7f0:	4b19      	ldr	r3, [pc, #100]	; (800b858 <HAL_PWREx_ConfigSupply+0x70>)
 800b7f2:	68db      	ldr	r3, [r3, #12]
 800b7f4:	f003 0304 	and.w	r3, r3, #4
 800b7f8:	2b04      	cmp	r3, #4
 800b7fa:	d00a      	beq.n	800b812 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b7fc:	4b16      	ldr	r3, [pc, #88]	; (800b858 <HAL_PWREx_ConfigSupply+0x70>)
 800b7fe:	68db      	ldr	r3, [r3, #12]
 800b800:	f003 0307 	and.w	r3, r3, #7
 800b804:	687a      	ldr	r2, [r7, #4]
 800b806:	429a      	cmp	r2, r3
 800b808:	d001      	beq.n	800b80e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800b80a:	2301      	movs	r3, #1
 800b80c:	e01f      	b.n	800b84e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800b80e:	2300      	movs	r3, #0
 800b810:	e01d      	b.n	800b84e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b812:	4b11      	ldr	r3, [pc, #68]	; (800b858 <HAL_PWREx_ConfigSupply+0x70>)
 800b814:	68db      	ldr	r3, [r3, #12]
 800b816:	f023 0207 	bic.w	r2, r3, #7
 800b81a:	490f      	ldr	r1, [pc, #60]	; (800b858 <HAL_PWREx_ConfigSupply+0x70>)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	4313      	orrs	r3, r2
 800b820:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800b822:	f7f8 fc67 	bl	80040f4 <HAL_GetTick>
 800b826:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b828:	e009      	b.n	800b83e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b82a:	f7f8 fc63 	bl	80040f4 <HAL_GetTick>
 800b82e:	4602      	mov	r2, r0
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	1ad3      	subs	r3, r2, r3
 800b834:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b838:	d901      	bls.n	800b83e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800b83a:	2301      	movs	r3, #1
 800b83c:	e007      	b.n	800b84e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b83e:	4b06      	ldr	r3, [pc, #24]	; (800b858 <HAL_PWREx_ConfigSupply+0x70>)
 800b840:	685b      	ldr	r3, [r3, #4]
 800b842:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b846:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b84a:	d1ee      	bne.n	800b82a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800b84c:	2300      	movs	r3, #0
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3710      	adds	r7, #16
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}
 800b856:	bf00      	nop
 800b858:	58024800 	.word	0x58024800

0800b85c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b08c      	sub	sp, #48	; 0x30
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d102      	bne.n	800b870 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800b86a:	2301      	movs	r3, #1
 800b86c:	f000 bc1f 	b.w	800c0ae <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	f003 0301 	and.w	r3, r3, #1
 800b878:	2b00      	cmp	r3, #0
 800b87a:	f000 80b3 	beq.w	800b9e4 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b87e:	4b95      	ldr	r3, [pc, #596]	; (800bad4 <HAL_RCC_OscConfig+0x278>)
 800b880:	691b      	ldr	r3, [r3, #16]
 800b882:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b886:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b888:	4b92      	ldr	r3, [pc, #584]	; (800bad4 <HAL_RCC_OscConfig+0x278>)
 800b88a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b88c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b890:	2b10      	cmp	r3, #16
 800b892:	d007      	beq.n	800b8a4 <HAL_RCC_OscConfig+0x48>
 800b894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b896:	2b18      	cmp	r3, #24
 800b898:	d112      	bne.n	800b8c0 <HAL_RCC_OscConfig+0x64>
 800b89a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b89c:	f003 0303 	and.w	r3, r3, #3
 800b8a0:	2b02      	cmp	r3, #2
 800b8a2:	d10d      	bne.n	800b8c0 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b8a4:	4b8b      	ldr	r3, [pc, #556]	; (800bad4 <HAL_RCC_OscConfig+0x278>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	f000 8098 	beq.w	800b9e2 <HAL_RCC_OscConfig+0x186>
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	685b      	ldr	r3, [r3, #4]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	f040 8093 	bne.w	800b9e2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800b8bc:	2301      	movs	r3, #1
 800b8be:	e3f6      	b.n	800c0ae <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	685b      	ldr	r3, [r3, #4]
 800b8c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8c8:	d106      	bne.n	800b8d8 <HAL_RCC_OscConfig+0x7c>
 800b8ca:	4b82      	ldr	r3, [pc, #520]	; (800bad4 <HAL_RCC_OscConfig+0x278>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	4a81      	ldr	r2, [pc, #516]	; (800bad4 <HAL_RCC_OscConfig+0x278>)
 800b8d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b8d4:	6013      	str	r3, [r2, #0]
 800b8d6:	e058      	b.n	800b98a <HAL_RCC_OscConfig+0x12e>
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	685b      	ldr	r3, [r3, #4]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d112      	bne.n	800b906 <HAL_RCC_OscConfig+0xaa>
 800b8e0:	4b7c      	ldr	r3, [pc, #496]	; (800bad4 <HAL_RCC_OscConfig+0x278>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	4a7b      	ldr	r2, [pc, #492]	; (800bad4 <HAL_RCC_OscConfig+0x278>)
 800b8e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b8ea:	6013      	str	r3, [r2, #0]
 800b8ec:	4b79      	ldr	r3, [pc, #484]	; (800bad4 <HAL_RCC_OscConfig+0x278>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	4a78      	ldr	r2, [pc, #480]	; (800bad4 <HAL_RCC_OscConfig+0x278>)
 800b8f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b8f6:	6013      	str	r3, [r2, #0]
 800b8f8:	4b76      	ldr	r3, [pc, #472]	; (800bad4 <HAL_RCC_OscConfig+0x278>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	4a75      	ldr	r2, [pc, #468]	; (800bad4 <HAL_RCC_OscConfig+0x278>)
 800b8fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b902:	6013      	str	r3, [r2, #0]
 800b904:	e041      	b.n	800b98a <HAL_RCC_OscConfig+0x12e>
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	685b      	ldr	r3, [r3, #4]
 800b90a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b90e:	d112      	bne.n	800b936 <HAL_RCC_OscConfig+0xda>
 800b910:	4b70      	ldr	r3, [pc, #448]	; (800bad4 <HAL_RCC_OscConfig+0x278>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	4a6f      	ldr	r2, [pc, #444]	; (800bad4 <HAL_RCC_OscConfig+0x278>)
 800b916:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b91a:	6013      	str	r3, [r2, #0]
 800b91c:	4b6d      	ldr	r3, [pc, #436]	; (800bad4 <HAL_RCC_OscConfig+0x278>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	4a6c      	ldr	r2, [pc, #432]	; (800bad4 <HAL_RCC_OscConfig+0x278>)
 800b922:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b926:	6013      	str	r3, [r2, #0]
 800b928:	4b6a      	ldr	r3, [pc, #424]	; (800bad4 <HAL_RCC_OscConfig+0x278>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	4a69      	ldr	r2, [pc, #420]	; (800bad4 <HAL_RCC_OscConfig+0x278>)
 800b92e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b932:	6013      	str	r3, [r2, #0]
 800b934:	e029      	b.n	800b98a <HAL_RCC_OscConfig+0x12e>
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	685b      	ldr	r3, [r3, #4]
 800b93a:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800b93e:	d112      	bne.n	800b966 <HAL_RCC_OscConfig+0x10a>
 800b940:	4b64      	ldr	r3, [pc, #400]	; (800bad4 <HAL_RCC_OscConfig+0x278>)
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	4a63      	ldr	r2, [pc, #396]	; (800bad4 <HAL_RCC_OscConfig+0x278>)
 800b946:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b94a:	6013      	str	r3, [r2, #0]
 800b94c:	4b61      	ldr	r3, [pc, #388]	; (800bad4 <HAL_RCC_OscConfig+0x278>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	4a60      	ldr	r2, [pc, #384]	; (800bad4 <HAL_RCC_OscConfig+0x278>)
 800b952:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b956:	6013      	str	r3, [r2, #0]
 800b958:	4b5e      	ldr	r3, [pc, #376]	; (800bad4 <HAL_RCC_OscConfig+0x278>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	4a5d      	ldr	r2, [pc, #372]	; (800bad4 <HAL_RCC_OscConfig+0x278>)
 800b95e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b962:	6013      	str	r3, [r2, #0]
 800b964:	e011      	b.n	800b98a <HAL_RCC_OscConfig+0x12e>
 800b966:	4b5b      	ldr	r3, [pc, #364]	; (800bad4 <HAL_RCC_OscConfig+0x278>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	4a5a      	ldr	r2, [pc, #360]	; (800bad4 <HAL_RCC_OscConfig+0x278>)
 800b96c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b970:	6013      	str	r3, [r2, #0]
 800b972:	4b58      	ldr	r3, [pc, #352]	; (800bad4 <HAL_RCC_OscConfig+0x278>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	4a57      	ldr	r2, [pc, #348]	; (800bad4 <HAL_RCC_OscConfig+0x278>)
 800b978:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b97c:	6013      	str	r3, [r2, #0]
 800b97e:	4b55      	ldr	r3, [pc, #340]	; (800bad4 <HAL_RCC_OscConfig+0x278>)
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	4a54      	ldr	r2, [pc, #336]	; (800bad4 <HAL_RCC_OscConfig+0x278>)
 800b984:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b988:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	685b      	ldr	r3, [r3, #4]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d013      	beq.n	800b9ba <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b992:	f7f8 fbaf 	bl	80040f4 <HAL_GetTick>
 800b996:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b998:	e008      	b.n	800b9ac <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b99a:	f7f8 fbab 	bl	80040f4 <HAL_GetTick>
 800b99e:	4602      	mov	r2, r0
 800b9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a2:	1ad3      	subs	r3, r2, r3
 800b9a4:	2b64      	cmp	r3, #100	; 0x64
 800b9a6:	d901      	bls.n	800b9ac <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800b9a8:	2303      	movs	r3, #3
 800b9aa:	e380      	b.n	800c0ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b9ac:	4b49      	ldr	r3, [pc, #292]	; (800bad4 <HAL_RCC_OscConfig+0x278>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d0f0      	beq.n	800b99a <HAL_RCC_OscConfig+0x13e>
 800b9b8:	e014      	b.n	800b9e4 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9ba:	f7f8 fb9b 	bl	80040f4 <HAL_GetTick>
 800b9be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b9c0:	e008      	b.n	800b9d4 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b9c2:	f7f8 fb97 	bl	80040f4 <HAL_GetTick>
 800b9c6:	4602      	mov	r2, r0
 800b9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ca:	1ad3      	subs	r3, r2, r3
 800b9cc:	2b64      	cmp	r3, #100	; 0x64
 800b9ce:	d901      	bls.n	800b9d4 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800b9d0:	2303      	movs	r3, #3
 800b9d2:	e36c      	b.n	800c0ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b9d4:	4b3f      	ldr	r3, [pc, #252]	; (800bad4 <HAL_RCC_OscConfig+0x278>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d1f0      	bne.n	800b9c2 <HAL_RCC_OscConfig+0x166>
 800b9e0:	e000      	b.n	800b9e4 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b9e2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	f003 0302 	and.w	r3, r3, #2
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	f000 808c 	beq.w	800bb0a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b9f2:	4b38      	ldr	r3, [pc, #224]	; (800bad4 <HAL_RCC_OscConfig+0x278>)
 800b9f4:	691b      	ldr	r3, [r3, #16]
 800b9f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b9fa:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b9fc:	4b35      	ldr	r3, [pc, #212]	; (800bad4 <HAL_RCC_OscConfig+0x278>)
 800b9fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba00:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800ba02:	6a3b      	ldr	r3, [r7, #32]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d007      	beq.n	800ba18 <HAL_RCC_OscConfig+0x1bc>
 800ba08:	6a3b      	ldr	r3, [r7, #32]
 800ba0a:	2b18      	cmp	r3, #24
 800ba0c:	d137      	bne.n	800ba7e <HAL_RCC_OscConfig+0x222>
 800ba0e:	69fb      	ldr	r3, [r7, #28]
 800ba10:	f003 0303 	and.w	r3, r3, #3
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d132      	bne.n	800ba7e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ba18:	4b2e      	ldr	r3, [pc, #184]	; (800bad4 <HAL_RCC_OscConfig+0x278>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f003 0304 	and.w	r3, r3, #4
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d005      	beq.n	800ba30 <HAL_RCC_OscConfig+0x1d4>
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	68db      	ldr	r3, [r3, #12]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d101      	bne.n	800ba30 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	e33e      	b.n	800c0ae <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ba30:	4b28      	ldr	r3, [pc, #160]	; (800bad4 <HAL_RCC_OscConfig+0x278>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f023 0219 	bic.w	r2, r3, #25
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	68db      	ldr	r3, [r3, #12]
 800ba3c:	4925      	ldr	r1, [pc, #148]	; (800bad4 <HAL_RCC_OscConfig+0x278>)
 800ba3e:	4313      	orrs	r3, r2
 800ba40:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba42:	f7f8 fb57 	bl	80040f4 <HAL_GetTick>
 800ba46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ba48:	e008      	b.n	800ba5c <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ba4a:	f7f8 fb53 	bl	80040f4 <HAL_GetTick>
 800ba4e:	4602      	mov	r2, r0
 800ba50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba52:	1ad3      	subs	r3, r2, r3
 800ba54:	2b02      	cmp	r3, #2
 800ba56:	d901      	bls.n	800ba5c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800ba58:	2303      	movs	r3, #3
 800ba5a:	e328      	b.n	800c0ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ba5c:	4b1d      	ldr	r3, [pc, #116]	; (800bad4 <HAL_RCC_OscConfig+0x278>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	f003 0304 	and.w	r3, r3, #4
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d0f0      	beq.n	800ba4a <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ba68:	4b1a      	ldr	r3, [pc, #104]	; (800bad4 <HAL_RCC_OscConfig+0x278>)
 800ba6a:	685b      	ldr	r3, [r3, #4]
 800ba6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	691b      	ldr	r3, [r3, #16]
 800ba74:	061b      	lsls	r3, r3, #24
 800ba76:	4917      	ldr	r1, [pc, #92]	; (800bad4 <HAL_RCC_OscConfig+0x278>)
 800ba78:	4313      	orrs	r3, r2
 800ba7a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ba7c:	e045      	b.n	800bb0a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	68db      	ldr	r3, [r3, #12]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d028      	beq.n	800bad8 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ba86:	4b13      	ldr	r3, [pc, #76]	; (800bad4 <HAL_RCC_OscConfig+0x278>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f023 0219 	bic.w	r2, r3, #25
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	68db      	ldr	r3, [r3, #12]
 800ba92:	4910      	ldr	r1, [pc, #64]	; (800bad4 <HAL_RCC_OscConfig+0x278>)
 800ba94:	4313      	orrs	r3, r2
 800ba96:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba98:	f7f8 fb2c 	bl	80040f4 <HAL_GetTick>
 800ba9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ba9e:	e008      	b.n	800bab2 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800baa0:	f7f8 fb28 	bl	80040f4 <HAL_GetTick>
 800baa4:	4602      	mov	r2, r0
 800baa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baa8:	1ad3      	subs	r3, r2, r3
 800baaa:	2b02      	cmp	r3, #2
 800baac:	d901      	bls.n	800bab2 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800baae:	2303      	movs	r3, #3
 800bab0:	e2fd      	b.n	800c0ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bab2:	4b08      	ldr	r3, [pc, #32]	; (800bad4 <HAL_RCC_OscConfig+0x278>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f003 0304 	and.w	r3, r3, #4
 800baba:	2b00      	cmp	r3, #0
 800babc:	d0f0      	beq.n	800baa0 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800babe:	4b05      	ldr	r3, [pc, #20]	; (800bad4 <HAL_RCC_OscConfig+0x278>)
 800bac0:	685b      	ldr	r3, [r3, #4]
 800bac2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	691b      	ldr	r3, [r3, #16]
 800baca:	061b      	lsls	r3, r3, #24
 800bacc:	4901      	ldr	r1, [pc, #4]	; (800bad4 <HAL_RCC_OscConfig+0x278>)
 800bace:	4313      	orrs	r3, r2
 800bad0:	604b      	str	r3, [r1, #4]
 800bad2:	e01a      	b.n	800bb0a <HAL_RCC_OscConfig+0x2ae>
 800bad4:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bad8:	4b97      	ldr	r3, [pc, #604]	; (800bd38 <HAL_RCC_OscConfig+0x4dc>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	4a96      	ldr	r2, [pc, #600]	; (800bd38 <HAL_RCC_OscConfig+0x4dc>)
 800bade:	f023 0301 	bic.w	r3, r3, #1
 800bae2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bae4:	f7f8 fb06 	bl	80040f4 <HAL_GetTick>
 800bae8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800baea:	e008      	b.n	800bafe <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800baec:	f7f8 fb02 	bl	80040f4 <HAL_GetTick>
 800baf0:	4602      	mov	r2, r0
 800baf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf4:	1ad3      	subs	r3, r2, r3
 800baf6:	2b02      	cmp	r3, #2
 800baf8:	d901      	bls.n	800bafe <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800bafa:	2303      	movs	r3, #3
 800bafc:	e2d7      	b.n	800c0ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800bafe:	4b8e      	ldr	r3, [pc, #568]	; (800bd38 <HAL_RCC_OscConfig+0x4dc>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	f003 0304 	and.w	r3, r3, #4
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d1f0      	bne.n	800baec <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f003 0310 	and.w	r3, r3, #16
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d06a      	beq.n	800bbec <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bb16:	4b88      	ldr	r3, [pc, #544]	; (800bd38 <HAL_RCC_OscConfig+0x4dc>)
 800bb18:	691b      	ldr	r3, [r3, #16]
 800bb1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bb1e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800bb20:	4b85      	ldr	r3, [pc, #532]	; (800bd38 <HAL_RCC_OscConfig+0x4dc>)
 800bb22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb24:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800bb26:	69bb      	ldr	r3, [r7, #24]
 800bb28:	2b08      	cmp	r3, #8
 800bb2a:	d007      	beq.n	800bb3c <HAL_RCC_OscConfig+0x2e0>
 800bb2c:	69bb      	ldr	r3, [r7, #24]
 800bb2e:	2b18      	cmp	r3, #24
 800bb30:	d11b      	bne.n	800bb6a <HAL_RCC_OscConfig+0x30e>
 800bb32:	697b      	ldr	r3, [r7, #20]
 800bb34:	f003 0303 	and.w	r3, r3, #3
 800bb38:	2b01      	cmp	r3, #1
 800bb3a:	d116      	bne.n	800bb6a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bb3c:	4b7e      	ldr	r3, [pc, #504]	; (800bd38 <HAL_RCC_OscConfig+0x4dc>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d005      	beq.n	800bb54 <HAL_RCC_OscConfig+0x2f8>
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	69db      	ldr	r3, [r3, #28]
 800bb4c:	2b80      	cmp	r3, #128	; 0x80
 800bb4e:	d001      	beq.n	800bb54 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800bb50:	2301      	movs	r3, #1
 800bb52:	e2ac      	b.n	800c0ae <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bb54:	4b78      	ldr	r3, [pc, #480]	; (800bd38 <HAL_RCC_OscConfig+0x4dc>)
 800bb56:	68db      	ldr	r3, [r3, #12]
 800bb58:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	6a1b      	ldr	r3, [r3, #32]
 800bb60:	061b      	lsls	r3, r3, #24
 800bb62:	4975      	ldr	r1, [pc, #468]	; (800bd38 <HAL_RCC_OscConfig+0x4dc>)
 800bb64:	4313      	orrs	r3, r2
 800bb66:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bb68:	e040      	b.n	800bbec <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	69db      	ldr	r3, [r3, #28]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d023      	beq.n	800bbba <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800bb72:	4b71      	ldr	r3, [pc, #452]	; (800bd38 <HAL_RCC_OscConfig+0x4dc>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	4a70      	ldr	r2, [pc, #448]	; (800bd38 <HAL_RCC_OscConfig+0x4dc>)
 800bb78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb7e:	f7f8 fab9 	bl	80040f4 <HAL_GetTick>
 800bb82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bb84:	e008      	b.n	800bb98 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800bb86:	f7f8 fab5 	bl	80040f4 <HAL_GetTick>
 800bb8a:	4602      	mov	r2, r0
 800bb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb8e:	1ad3      	subs	r3, r2, r3
 800bb90:	2b02      	cmp	r3, #2
 800bb92:	d901      	bls.n	800bb98 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800bb94:	2303      	movs	r3, #3
 800bb96:	e28a      	b.n	800c0ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bb98:	4b67      	ldr	r3, [pc, #412]	; (800bd38 <HAL_RCC_OscConfig+0x4dc>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d0f0      	beq.n	800bb86 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bba4:	4b64      	ldr	r3, [pc, #400]	; (800bd38 <HAL_RCC_OscConfig+0x4dc>)
 800bba6:	68db      	ldr	r3, [r3, #12]
 800bba8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	6a1b      	ldr	r3, [r3, #32]
 800bbb0:	061b      	lsls	r3, r3, #24
 800bbb2:	4961      	ldr	r1, [pc, #388]	; (800bd38 <HAL_RCC_OscConfig+0x4dc>)
 800bbb4:	4313      	orrs	r3, r2
 800bbb6:	60cb      	str	r3, [r1, #12]
 800bbb8:	e018      	b.n	800bbec <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800bbba:	4b5f      	ldr	r3, [pc, #380]	; (800bd38 <HAL_RCC_OscConfig+0x4dc>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	4a5e      	ldr	r2, [pc, #376]	; (800bd38 <HAL_RCC_OscConfig+0x4dc>)
 800bbc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bbc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bbc6:	f7f8 fa95 	bl	80040f4 <HAL_GetTick>
 800bbca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800bbcc:	e008      	b.n	800bbe0 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800bbce:	f7f8 fa91 	bl	80040f4 <HAL_GetTick>
 800bbd2:	4602      	mov	r2, r0
 800bbd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd6:	1ad3      	subs	r3, r2, r3
 800bbd8:	2b02      	cmp	r3, #2
 800bbda:	d901      	bls.n	800bbe0 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800bbdc:	2303      	movs	r3, #3
 800bbde:	e266      	b.n	800c0ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800bbe0:	4b55      	ldr	r3, [pc, #340]	; (800bd38 <HAL_RCC_OscConfig+0x4dc>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d1f0      	bne.n	800bbce <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	f003 0308 	and.w	r3, r3, #8
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d036      	beq.n	800bc66 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	695b      	ldr	r3, [r3, #20]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d019      	beq.n	800bc34 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bc00:	4b4d      	ldr	r3, [pc, #308]	; (800bd38 <HAL_RCC_OscConfig+0x4dc>)
 800bc02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc04:	4a4c      	ldr	r2, [pc, #304]	; (800bd38 <HAL_RCC_OscConfig+0x4dc>)
 800bc06:	f043 0301 	orr.w	r3, r3, #1
 800bc0a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bc0c:	f7f8 fa72 	bl	80040f4 <HAL_GetTick>
 800bc10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800bc12:	e008      	b.n	800bc26 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bc14:	f7f8 fa6e 	bl	80040f4 <HAL_GetTick>
 800bc18:	4602      	mov	r2, r0
 800bc1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc1c:	1ad3      	subs	r3, r2, r3
 800bc1e:	2b02      	cmp	r3, #2
 800bc20:	d901      	bls.n	800bc26 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800bc22:	2303      	movs	r3, #3
 800bc24:	e243      	b.n	800c0ae <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800bc26:	4b44      	ldr	r3, [pc, #272]	; (800bd38 <HAL_RCC_OscConfig+0x4dc>)
 800bc28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc2a:	f003 0302 	and.w	r3, r3, #2
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d0f0      	beq.n	800bc14 <HAL_RCC_OscConfig+0x3b8>
 800bc32:	e018      	b.n	800bc66 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bc34:	4b40      	ldr	r3, [pc, #256]	; (800bd38 <HAL_RCC_OscConfig+0x4dc>)
 800bc36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc38:	4a3f      	ldr	r2, [pc, #252]	; (800bd38 <HAL_RCC_OscConfig+0x4dc>)
 800bc3a:	f023 0301 	bic.w	r3, r3, #1
 800bc3e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bc40:	f7f8 fa58 	bl	80040f4 <HAL_GetTick>
 800bc44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800bc46:	e008      	b.n	800bc5a <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bc48:	f7f8 fa54 	bl	80040f4 <HAL_GetTick>
 800bc4c:	4602      	mov	r2, r0
 800bc4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc50:	1ad3      	subs	r3, r2, r3
 800bc52:	2b02      	cmp	r3, #2
 800bc54:	d901      	bls.n	800bc5a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800bc56:	2303      	movs	r3, #3
 800bc58:	e229      	b.n	800c0ae <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800bc5a:	4b37      	ldr	r3, [pc, #220]	; (800bd38 <HAL_RCC_OscConfig+0x4dc>)
 800bc5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc5e:	f003 0302 	and.w	r3, r3, #2
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d1f0      	bne.n	800bc48 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	f003 0320 	and.w	r3, r3, #32
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d036      	beq.n	800bce0 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	699b      	ldr	r3, [r3, #24]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d019      	beq.n	800bcae <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800bc7a:	4b2f      	ldr	r3, [pc, #188]	; (800bd38 <HAL_RCC_OscConfig+0x4dc>)
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	4a2e      	ldr	r2, [pc, #184]	; (800bd38 <HAL_RCC_OscConfig+0x4dc>)
 800bc80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bc84:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800bc86:	f7f8 fa35 	bl	80040f4 <HAL_GetTick>
 800bc8a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800bc8c:	e008      	b.n	800bca0 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bc8e:	f7f8 fa31 	bl	80040f4 <HAL_GetTick>
 800bc92:	4602      	mov	r2, r0
 800bc94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc96:	1ad3      	subs	r3, r2, r3
 800bc98:	2b02      	cmp	r3, #2
 800bc9a:	d901      	bls.n	800bca0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800bc9c:	2303      	movs	r3, #3
 800bc9e:	e206      	b.n	800c0ae <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800bca0:	4b25      	ldr	r3, [pc, #148]	; (800bd38 <HAL_RCC_OscConfig+0x4dc>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d0f0      	beq.n	800bc8e <HAL_RCC_OscConfig+0x432>
 800bcac:	e018      	b.n	800bce0 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800bcae:	4b22      	ldr	r3, [pc, #136]	; (800bd38 <HAL_RCC_OscConfig+0x4dc>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	4a21      	ldr	r2, [pc, #132]	; (800bd38 <HAL_RCC_OscConfig+0x4dc>)
 800bcb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bcb8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800bcba:	f7f8 fa1b 	bl	80040f4 <HAL_GetTick>
 800bcbe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800bcc0:	e008      	b.n	800bcd4 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bcc2:	f7f8 fa17 	bl	80040f4 <HAL_GetTick>
 800bcc6:	4602      	mov	r2, r0
 800bcc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcca:	1ad3      	subs	r3, r2, r3
 800bccc:	2b02      	cmp	r3, #2
 800bcce:	d901      	bls.n	800bcd4 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800bcd0:	2303      	movs	r3, #3
 800bcd2:	e1ec      	b.n	800c0ae <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800bcd4:	4b18      	ldr	r3, [pc, #96]	; (800bd38 <HAL_RCC_OscConfig+0x4dc>)
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d1f0      	bne.n	800bcc2 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	f003 0304 	and.w	r3, r3, #4
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	f000 80af 	beq.w	800be4c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800bcee:	4b13      	ldr	r3, [pc, #76]	; (800bd3c <HAL_RCC_OscConfig+0x4e0>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	4a12      	ldr	r2, [pc, #72]	; (800bd3c <HAL_RCC_OscConfig+0x4e0>)
 800bcf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bcf8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bcfa:	f7f8 f9fb 	bl	80040f4 <HAL_GetTick>
 800bcfe:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bd00:	e008      	b.n	800bd14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bd02:	f7f8 f9f7 	bl	80040f4 <HAL_GetTick>
 800bd06:	4602      	mov	r2, r0
 800bd08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd0a:	1ad3      	subs	r3, r2, r3
 800bd0c:	2b64      	cmp	r3, #100	; 0x64
 800bd0e:	d901      	bls.n	800bd14 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800bd10:	2303      	movs	r3, #3
 800bd12:	e1cc      	b.n	800c0ae <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bd14:	4b09      	ldr	r3, [pc, #36]	; (800bd3c <HAL_RCC_OscConfig+0x4e0>)
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d0f0      	beq.n	800bd02 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	689b      	ldr	r3, [r3, #8]
 800bd24:	2b01      	cmp	r3, #1
 800bd26:	d10b      	bne.n	800bd40 <HAL_RCC_OscConfig+0x4e4>
 800bd28:	4b03      	ldr	r3, [pc, #12]	; (800bd38 <HAL_RCC_OscConfig+0x4dc>)
 800bd2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd2c:	4a02      	ldr	r2, [pc, #8]	; (800bd38 <HAL_RCC_OscConfig+0x4dc>)
 800bd2e:	f043 0301 	orr.w	r3, r3, #1
 800bd32:	6713      	str	r3, [r2, #112]	; 0x70
 800bd34:	e05b      	b.n	800bdee <HAL_RCC_OscConfig+0x592>
 800bd36:	bf00      	nop
 800bd38:	58024400 	.word	0x58024400
 800bd3c:	58024800 	.word	0x58024800
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	689b      	ldr	r3, [r3, #8]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d112      	bne.n	800bd6e <HAL_RCC_OscConfig+0x512>
 800bd48:	4b9d      	ldr	r3, [pc, #628]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800bd4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd4c:	4a9c      	ldr	r2, [pc, #624]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800bd4e:	f023 0301 	bic.w	r3, r3, #1
 800bd52:	6713      	str	r3, [r2, #112]	; 0x70
 800bd54:	4b9a      	ldr	r3, [pc, #616]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800bd56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd58:	4a99      	ldr	r2, [pc, #612]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800bd5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd5e:	6713      	str	r3, [r2, #112]	; 0x70
 800bd60:	4b97      	ldr	r3, [pc, #604]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800bd62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd64:	4a96      	ldr	r2, [pc, #600]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800bd66:	f023 0304 	bic.w	r3, r3, #4
 800bd6a:	6713      	str	r3, [r2, #112]	; 0x70
 800bd6c:	e03f      	b.n	800bdee <HAL_RCC_OscConfig+0x592>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	689b      	ldr	r3, [r3, #8]
 800bd72:	2b05      	cmp	r3, #5
 800bd74:	d112      	bne.n	800bd9c <HAL_RCC_OscConfig+0x540>
 800bd76:	4b92      	ldr	r3, [pc, #584]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800bd78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd7a:	4a91      	ldr	r2, [pc, #580]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800bd7c:	f043 0304 	orr.w	r3, r3, #4
 800bd80:	6713      	str	r3, [r2, #112]	; 0x70
 800bd82:	4b8f      	ldr	r3, [pc, #572]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800bd84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd86:	4a8e      	ldr	r2, [pc, #568]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800bd88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd8c:	6713      	str	r3, [r2, #112]	; 0x70
 800bd8e:	4b8c      	ldr	r3, [pc, #560]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800bd90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd92:	4a8b      	ldr	r2, [pc, #556]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800bd94:	f043 0301 	orr.w	r3, r3, #1
 800bd98:	6713      	str	r3, [r2, #112]	; 0x70
 800bd9a:	e028      	b.n	800bdee <HAL_RCC_OscConfig+0x592>
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	689b      	ldr	r3, [r3, #8]
 800bda0:	2b85      	cmp	r3, #133	; 0x85
 800bda2:	d112      	bne.n	800bdca <HAL_RCC_OscConfig+0x56e>
 800bda4:	4b86      	ldr	r3, [pc, #536]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800bda6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bda8:	4a85      	ldr	r2, [pc, #532]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800bdaa:	f043 0304 	orr.w	r3, r3, #4
 800bdae:	6713      	str	r3, [r2, #112]	; 0x70
 800bdb0:	4b83      	ldr	r3, [pc, #524]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800bdb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdb4:	4a82      	ldr	r2, [pc, #520]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800bdb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdba:	6713      	str	r3, [r2, #112]	; 0x70
 800bdbc:	4b80      	ldr	r3, [pc, #512]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800bdbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdc0:	4a7f      	ldr	r2, [pc, #508]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800bdc2:	f043 0301 	orr.w	r3, r3, #1
 800bdc6:	6713      	str	r3, [r2, #112]	; 0x70
 800bdc8:	e011      	b.n	800bdee <HAL_RCC_OscConfig+0x592>
 800bdca:	4b7d      	ldr	r3, [pc, #500]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800bdcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdce:	4a7c      	ldr	r2, [pc, #496]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800bdd0:	f023 0301 	bic.w	r3, r3, #1
 800bdd4:	6713      	str	r3, [r2, #112]	; 0x70
 800bdd6:	4b7a      	ldr	r3, [pc, #488]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800bdd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdda:	4a79      	ldr	r2, [pc, #484]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800bddc:	f023 0304 	bic.w	r3, r3, #4
 800bde0:	6713      	str	r3, [r2, #112]	; 0x70
 800bde2:	4b77      	ldr	r3, [pc, #476]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800bde4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bde6:	4a76      	ldr	r2, [pc, #472]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800bde8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bdec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	689b      	ldr	r3, [r3, #8]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d015      	beq.n	800be22 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bdf6:	f7f8 f97d 	bl	80040f4 <HAL_GetTick>
 800bdfa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bdfc:	e00a      	b.n	800be14 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bdfe:	f7f8 f979 	bl	80040f4 <HAL_GetTick>
 800be02:	4602      	mov	r2, r0
 800be04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be06:	1ad3      	subs	r3, r2, r3
 800be08:	f241 3288 	movw	r2, #5000	; 0x1388
 800be0c:	4293      	cmp	r3, r2
 800be0e:	d901      	bls.n	800be14 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800be10:	2303      	movs	r3, #3
 800be12:	e14c      	b.n	800c0ae <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800be14:	4b6a      	ldr	r3, [pc, #424]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800be16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be18:	f003 0302 	and.w	r3, r3, #2
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d0ee      	beq.n	800bdfe <HAL_RCC_OscConfig+0x5a2>
 800be20:	e014      	b.n	800be4c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800be22:	f7f8 f967 	bl	80040f4 <HAL_GetTick>
 800be26:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800be28:	e00a      	b.n	800be40 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800be2a:	f7f8 f963 	bl	80040f4 <HAL_GetTick>
 800be2e:	4602      	mov	r2, r0
 800be30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be32:	1ad3      	subs	r3, r2, r3
 800be34:	f241 3288 	movw	r2, #5000	; 0x1388
 800be38:	4293      	cmp	r3, r2
 800be3a:	d901      	bls.n	800be40 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800be3c:	2303      	movs	r3, #3
 800be3e:	e136      	b.n	800c0ae <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800be40:	4b5f      	ldr	r3, [pc, #380]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800be42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be44:	f003 0302 	and.w	r3, r3, #2
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d1ee      	bne.n	800be2a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be50:	2b00      	cmp	r3, #0
 800be52:	f000 812b 	beq.w	800c0ac <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800be56:	4b5a      	ldr	r3, [pc, #360]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800be58:	691b      	ldr	r3, [r3, #16]
 800be5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800be5e:	2b18      	cmp	r3, #24
 800be60:	f000 80bb 	beq.w	800bfda <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be68:	2b02      	cmp	r3, #2
 800be6a:	f040 8095 	bne.w	800bf98 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800be6e:	4b54      	ldr	r3, [pc, #336]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	4a53      	ldr	r2, [pc, #332]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800be74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800be78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be7a:	f7f8 f93b 	bl	80040f4 <HAL_GetTick>
 800be7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800be80:	e008      	b.n	800be94 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800be82:	f7f8 f937 	bl	80040f4 <HAL_GetTick>
 800be86:	4602      	mov	r2, r0
 800be88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be8a:	1ad3      	subs	r3, r2, r3
 800be8c:	2b02      	cmp	r3, #2
 800be8e:	d901      	bls.n	800be94 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800be90:	2303      	movs	r3, #3
 800be92:	e10c      	b.n	800c0ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800be94:	4b4a      	ldr	r3, [pc, #296]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d1f0      	bne.n	800be82 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bea0:	4b47      	ldr	r3, [pc, #284]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800bea2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bea4:	4b47      	ldr	r3, [pc, #284]	; (800bfc4 <HAL_RCC_OscConfig+0x768>)
 800bea6:	4013      	ands	r3, r2
 800bea8:	687a      	ldr	r2, [r7, #4]
 800beaa:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800beac:	687a      	ldr	r2, [r7, #4]
 800beae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800beb0:	0112      	lsls	r2, r2, #4
 800beb2:	430a      	orrs	r2, r1
 800beb4:	4942      	ldr	r1, [pc, #264]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800beb6:	4313      	orrs	r3, r2
 800beb8:	628b      	str	r3, [r1, #40]	; 0x28
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bebe:	3b01      	subs	r3, #1
 800bec0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bec8:	3b01      	subs	r3, #1
 800beca:	025b      	lsls	r3, r3, #9
 800becc:	b29b      	uxth	r3, r3
 800bece:	431a      	orrs	r2, r3
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bed4:	3b01      	subs	r3, #1
 800bed6:	041b      	lsls	r3, r3, #16
 800bed8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bedc:	431a      	orrs	r2, r3
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bee2:	3b01      	subs	r3, #1
 800bee4:	061b      	lsls	r3, r3, #24
 800bee6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800beea:	4935      	ldr	r1, [pc, #212]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800beec:	4313      	orrs	r3, r2
 800beee:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800bef0:	4b33      	ldr	r3, [pc, #204]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800bef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bef4:	4a32      	ldr	r2, [pc, #200]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800bef6:	f023 0301 	bic.w	r3, r3, #1
 800befa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800befc:	4b30      	ldr	r3, [pc, #192]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800befe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bf00:	4b31      	ldr	r3, [pc, #196]	; (800bfc8 <HAL_RCC_OscConfig+0x76c>)
 800bf02:	4013      	ands	r3, r2
 800bf04:	687a      	ldr	r2, [r7, #4]
 800bf06:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800bf08:	00d2      	lsls	r2, r2, #3
 800bf0a:	492d      	ldr	r1, [pc, #180]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800bf0c:	4313      	orrs	r3, r2
 800bf0e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800bf10:	4b2b      	ldr	r3, [pc, #172]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800bf12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf14:	f023 020c 	bic.w	r2, r3, #12
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf1c:	4928      	ldr	r1, [pc, #160]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800bf1e:	4313      	orrs	r3, r2
 800bf20:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800bf22:	4b27      	ldr	r3, [pc, #156]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800bf24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf26:	f023 0202 	bic.w	r2, r3, #2
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf2e:	4924      	ldr	r1, [pc, #144]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800bf30:	4313      	orrs	r3, r2
 800bf32:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bf34:	4b22      	ldr	r3, [pc, #136]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800bf36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf38:	4a21      	ldr	r2, [pc, #132]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800bf3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bf3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf40:	4b1f      	ldr	r3, [pc, #124]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800bf42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf44:	4a1e      	ldr	r2, [pc, #120]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800bf46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bf4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800bf4c:	4b1c      	ldr	r3, [pc, #112]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800bf4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf50:	4a1b      	ldr	r2, [pc, #108]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800bf52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bf56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800bf58:	4b19      	ldr	r3, [pc, #100]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800bf5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf5c:	4a18      	ldr	r2, [pc, #96]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800bf5e:	f043 0301 	orr.w	r3, r3, #1
 800bf62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bf64:	4b16      	ldr	r3, [pc, #88]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	4a15      	ldr	r2, [pc, #84]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800bf6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bf6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf70:	f7f8 f8c0 	bl	80040f4 <HAL_GetTick>
 800bf74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bf76:	e008      	b.n	800bf8a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bf78:	f7f8 f8bc 	bl	80040f4 <HAL_GetTick>
 800bf7c:	4602      	mov	r2, r0
 800bf7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf80:	1ad3      	subs	r3, r2, r3
 800bf82:	2b02      	cmp	r3, #2
 800bf84:	d901      	bls.n	800bf8a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800bf86:	2303      	movs	r3, #3
 800bf88:	e091      	b.n	800c0ae <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bf8a:	4b0d      	ldr	r3, [pc, #52]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d0f0      	beq.n	800bf78 <HAL_RCC_OscConfig+0x71c>
 800bf96:	e089      	b.n	800c0ac <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bf98:	4b09      	ldr	r3, [pc, #36]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	4a08      	ldr	r2, [pc, #32]	; (800bfc0 <HAL_RCC_OscConfig+0x764>)
 800bf9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bfa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bfa4:	f7f8 f8a6 	bl	80040f4 <HAL_GetTick>
 800bfa8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bfaa:	e00f      	b.n	800bfcc <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bfac:	f7f8 f8a2 	bl	80040f4 <HAL_GetTick>
 800bfb0:	4602      	mov	r2, r0
 800bfb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb4:	1ad3      	subs	r3, r2, r3
 800bfb6:	2b02      	cmp	r3, #2
 800bfb8:	d908      	bls.n	800bfcc <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800bfba:	2303      	movs	r3, #3
 800bfbc:	e077      	b.n	800c0ae <HAL_RCC_OscConfig+0x852>
 800bfbe:	bf00      	nop
 800bfc0:	58024400 	.word	0x58024400
 800bfc4:	fffffc0c 	.word	0xfffffc0c
 800bfc8:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bfcc:	4b3a      	ldr	r3, [pc, #232]	; (800c0b8 <HAL_RCC_OscConfig+0x85c>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d1e9      	bne.n	800bfac <HAL_RCC_OscConfig+0x750>
 800bfd8:	e068      	b.n	800c0ac <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800bfda:	4b37      	ldr	r3, [pc, #220]	; (800c0b8 <HAL_RCC_OscConfig+0x85c>)
 800bfdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfde:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800bfe0:	4b35      	ldr	r3, [pc, #212]	; (800c0b8 <HAL_RCC_OscConfig+0x85c>)
 800bfe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfe4:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfea:	2b01      	cmp	r3, #1
 800bfec:	d031      	beq.n	800c052 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bfee:	693b      	ldr	r3, [r7, #16]
 800bff0:	f003 0203 	and.w	r2, r3, #3
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bff8:	429a      	cmp	r2, r3
 800bffa:	d12a      	bne.n	800c052 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800bffc:	693b      	ldr	r3, [r7, #16]
 800bffe:	091b      	lsrs	r3, r3, #4
 800c000:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c008:	429a      	cmp	r2, r3
 800c00a:	d122      	bne.n	800c052 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c016:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c018:	429a      	cmp	r2, r3
 800c01a:	d11a      	bne.n	800c052 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	0a5b      	lsrs	r3, r3, #9
 800c020:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c028:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c02a:	429a      	cmp	r2, r3
 800c02c:	d111      	bne.n	800c052 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	0c1b      	lsrs	r3, r3, #16
 800c032:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c03a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c03c:	429a      	cmp	r2, r3
 800c03e:	d108      	bne.n	800c052 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	0e1b      	lsrs	r3, r3, #24
 800c044:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c04c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c04e:	429a      	cmp	r2, r3
 800c050:	d001      	beq.n	800c056 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800c052:	2301      	movs	r3, #1
 800c054:	e02b      	b.n	800c0ae <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800c056:	4b18      	ldr	r3, [pc, #96]	; (800c0b8 <HAL_RCC_OscConfig+0x85c>)
 800c058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c05a:	08db      	lsrs	r3, r3, #3
 800c05c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c060:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c066:	693a      	ldr	r2, [r7, #16]
 800c068:	429a      	cmp	r2, r3
 800c06a:	d01f      	beq.n	800c0ac <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800c06c:	4b12      	ldr	r3, [pc, #72]	; (800c0b8 <HAL_RCC_OscConfig+0x85c>)
 800c06e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c070:	4a11      	ldr	r2, [pc, #68]	; (800c0b8 <HAL_RCC_OscConfig+0x85c>)
 800c072:	f023 0301 	bic.w	r3, r3, #1
 800c076:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c078:	f7f8 f83c 	bl	80040f4 <HAL_GetTick>
 800c07c:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800c07e:	bf00      	nop
 800c080:	f7f8 f838 	bl	80040f4 <HAL_GetTick>
 800c084:	4602      	mov	r2, r0
 800c086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c088:	4293      	cmp	r3, r2
 800c08a:	d0f9      	beq.n	800c080 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c08c:	4b0a      	ldr	r3, [pc, #40]	; (800c0b8 <HAL_RCC_OscConfig+0x85c>)
 800c08e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c090:	4b0a      	ldr	r3, [pc, #40]	; (800c0bc <HAL_RCC_OscConfig+0x860>)
 800c092:	4013      	ands	r3, r2
 800c094:	687a      	ldr	r2, [r7, #4]
 800c096:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800c098:	00d2      	lsls	r2, r2, #3
 800c09a:	4907      	ldr	r1, [pc, #28]	; (800c0b8 <HAL_RCC_OscConfig+0x85c>)
 800c09c:	4313      	orrs	r3, r2
 800c09e:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800c0a0:	4b05      	ldr	r3, [pc, #20]	; (800c0b8 <HAL_RCC_OscConfig+0x85c>)
 800c0a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0a4:	4a04      	ldr	r2, [pc, #16]	; (800c0b8 <HAL_RCC_OscConfig+0x85c>)
 800c0a6:	f043 0301 	orr.w	r3, r3, #1
 800c0aa:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800c0ac:	2300      	movs	r3, #0
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3730      	adds	r7, #48	; 0x30
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}
 800c0b6:	bf00      	nop
 800c0b8:	58024400 	.word	0x58024400
 800c0bc:	ffff0007 	.word	0xffff0007

0800c0c0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b086      	sub	sp, #24
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
 800c0c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d101      	bne.n	800c0d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	e19c      	b.n	800c40e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c0d4:	4b8a      	ldr	r3, [pc, #552]	; (800c300 <HAL_RCC_ClockConfig+0x240>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	f003 030f 	and.w	r3, r3, #15
 800c0dc:	683a      	ldr	r2, [r7, #0]
 800c0de:	429a      	cmp	r2, r3
 800c0e0:	d910      	bls.n	800c104 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c0e2:	4b87      	ldr	r3, [pc, #540]	; (800c300 <HAL_RCC_ClockConfig+0x240>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	f023 020f 	bic.w	r2, r3, #15
 800c0ea:	4985      	ldr	r1, [pc, #532]	; (800c300 <HAL_RCC_ClockConfig+0x240>)
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	4313      	orrs	r3, r2
 800c0f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c0f2:	4b83      	ldr	r3, [pc, #524]	; (800c300 <HAL_RCC_ClockConfig+0x240>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	f003 030f 	and.w	r3, r3, #15
 800c0fa:	683a      	ldr	r2, [r7, #0]
 800c0fc:	429a      	cmp	r2, r3
 800c0fe:	d001      	beq.n	800c104 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c100:	2301      	movs	r3, #1
 800c102:	e184      	b.n	800c40e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	f003 0304 	and.w	r3, r3, #4
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d010      	beq.n	800c132 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	691a      	ldr	r2, [r3, #16]
 800c114:	4b7b      	ldr	r3, [pc, #492]	; (800c304 <HAL_RCC_ClockConfig+0x244>)
 800c116:	699b      	ldr	r3, [r3, #24]
 800c118:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c11c:	429a      	cmp	r2, r3
 800c11e:	d908      	bls.n	800c132 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c120:	4b78      	ldr	r3, [pc, #480]	; (800c304 <HAL_RCC_ClockConfig+0x244>)
 800c122:	699b      	ldr	r3, [r3, #24]
 800c124:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	691b      	ldr	r3, [r3, #16]
 800c12c:	4975      	ldr	r1, [pc, #468]	; (800c304 <HAL_RCC_ClockConfig+0x244>)
 800c12e:	4313      	orrs	r3, r2
 800c130:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	f003 0308 	and.w	r3, r3, #8
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d010      	beq.n	800c160 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	695a      	ldr	r2, [r3, #20]
 800c142:	4b70      	ldr	r3, [pc, #448]	; (800c304 <HAL_RCC_ClockConfig+0x244>)
 800c144:	69db      	ldr	r3, [r3, #28]
 800c146:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c14a:	429a      	cmp	r2, r3
 800c14c:	d908      	bls.n	800c160 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c14e:	4b6d      	ldr	r3, [pc, #436]	; (800c304 <HAL_RCC_ClockConfig+0x244>)
 800c150:	69db      	ldr	r3, [r3, #28]
 800c152:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	695b      	ldr	r3, [r3, #20]
 800c15a:	496a      	ldr	r1, [pc, #424]	; (800c304 <HAL_RCC_ClockConfig+0x244>)
 800c15c:	4313      	orrs	r3, r2
 800c15e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	f003 0310 	and.w	r3, r3, #16
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d010      	beq.n	800c18e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	699a      	ldr	r2, [r3, #24]
 800c170:	4b64      	ldr	r3, [pc, #400]	; (800c304 <HAL_RCC_ClockConfig+0x244>)
 800c172:	69db      	ldr	r3, [r3, #28]
 800c174:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c178:	429a      	cmp	r2, r3
 800c17a:	d908      	bls.n	800c18e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c17c:	4b61      	ldr	r3, [pc, #388]	; (800c304 <HAL_RCC_ClockConfig+0x244>)
 800c17e:	69db      	ldr	r3, [r3, #28]
 800c180:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	699b      	ldr	r3, [r3, #24]
 800c188:	495e      	ldr	r1, [pc, #376]	; (800c304 <HAL_RCC_ClockConfig+0x244>)
 800c18a:	4313      	orrs	r3, r2
 800c18c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f003 0320 	and.w	r3, r3, #32
 800c196:	2b00      	cmp	r3, #0
 800c198:	d010      	beq.n	800c1bc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	69da      	ldr	r2, [r3, #28]
 800c19e:	4b59      	ldr	r3, [pc, #356]	; (800c304 <HAL_RCC_ClockConfig+0x244>)
 800c1a0:	6a1b      	ldr	r3, [r3, #32]
 800c1a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	d908      	bls.n	800c1bc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c1aa:	4b56      	ldr	r3, [pc, #344]	; (800c304 <HAL_RCC_ClockConfig+0x244>)
 800c1ac:	6a1b      	ldr	r3, [r3, #32]
 800c1ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	69db      	ldr	r3, [r3, #28]
 800c1b6:	4953      	ldr	r1, [pc, #332]	; (800c304 <HAL_RCC_ClockConfig+0x244>)
 800c1b8:	4313      	orrs	r3, r2
 800c1ba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	f003 0302 	and.w	r3, r3, #2
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d010      	beq.n	800c1ea <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	68da      	ldr	r2, [r3, #12]
 800c1cc:	4b4d      	ldr	r3, [pc, #308]	; (800c304 <HAL_RCC_ClockConfig+0x244>)
 800c1ce:	699b      	ldr	r3, [r3, #24]
 800c1d0:	f003 030f 	and.w	r3, r3, #15
 800c1d4:	429a      	cmp	r2, r3
 800c1d6:	d908      	bls.n	800c1ea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c1d8:	4b4a      	ldr	r3, [pc, #296]	; (800c304 <HAL_RCC_ClockConfig+0x244>)
 800c1da:	699b      	ldr	r3, [r3, #24]
 800c1dc:	f023 020f 	bic.w	r2, r3, #15
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	68db      	ldr	r3, [r3, #12]
 800c1e4:	4947      	ldr	r1, [pc, #284]	; (800c304 <HAL_RCC_ClockConfig+0x244>)
 800c1e6:	4313      	orrs	r3, r2
 800c1e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	f003 0301 	and.w	r3, r3, #1
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d055      	beq.n	800c2a2 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800c1f6:	4b43      	ldr	r3, [pc, #268]	; (800c304 <HAL_RCC_ClockConfig+0x244>)
 800c1f8:	699b      	ldr	r3, [r3, #24]
 800c1fa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	689b      	ldr	r3, [r3, #8]
 800c202:	4940      	ldr	r1, [pc, #256]	; (800c304 <HAL_RCC_ClockConfig+0x244>)
 800c204:	4313      	orrs	r3, r2
 800c206:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	685b      	ldr	r3, [r3, #4]
 800c20c:	2b02      	cmp	r3, #2
 800c20e:	d107      	bne.n	800c220 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c210:	4b3c      	ldr	r3, [pc, #240]	; (800c304 <HAL_RCC_ClockConfig+0x244>)
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d121      	bne.n	800c260 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c21c:	2301      	movs	r3, #1
 800c21e:	e0f6      	b.n	800c40e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	685b      	ldr	r3, [r3, #4]
 800c224:	2b03      	cmp	r3, #3
 800c226:	d107      	bne.n	800c238 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c228:	4b36      	ldr	r3, [pc, #216]	; (800c304 <HAL_RCC_ClockConfig+0x244>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c230:	2b00      	cmp	r3, #0
 800c232:	d115      	bne.n	800c260 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c234:	2301      	movs	r3, #1
 800c236:	e0ea      	b.n	800c40e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	685b      	ldr	r3, [r3, #4]
 800c23c:	2b01      	cmp	r3, #1
 800c23e:	d107      	bne.n	800c250 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c240:	4b30      	ldr	r3, [pc, #192]	; (800c304 <HAL_RCC_ClockConfig+0x244>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d109      	bne.n	800c260 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c24c:	2301      	movs	r3, #1
 800c24e:	e0de      	b.n	800c40e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c250:	4b2c      	ldr	r3, [pc, #176]	; (800c304 <HAL_RCC_ClockConfig+0x244>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	f003 0304 	and.w	r3, r3, #4
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d101      	bne.n	800c260 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c25c:	2301      	movs	r3, #1
 800c25e:	e0d6      	b.n	800c40e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c260:	4b28      	ldr	r3, [pc, #160]	; (800c304 <HAL_RCC_ClockConfig+0x244>)
 800c262:	691b      	ldr	r3, [r3, #16]
 800c264:	f023 0207 	bic.w	r2, r3, #7
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	685b      	ldr	r3, [r3, #4]
 800c26c:	4925      	ldr	r1, [pc, #148]	; (800c304 <HAL_RCC_ClockConfig+0x244>)
 800c26e:	4313      	orrs	r3, r2
 800c270:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c272:	f7f7 ff3f 	bl	80040f4 <HAL_GetTick>
 800c276:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c278:	e00a      	b.n	800c290 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c27a:	f7f7 ff3b 	bl	80040f4 <HAL_GetTick>
 800c27e:	4602      	mov	r2, r0
 800c280:	697b      	ldr	r3, [r7, #20]
 800c282:	1ad3      	subs	r3, r2, r3
 800c284:	f241 3288 	movw	r2, #5000	; 0x1388
 800c288:	4293      	cmp	r3, r2
 800c28a:	d901      	bls.n	800c290 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800c28c:	2303      	movs	r3, #3
 800c28e:	e0be      	b.n	800c40e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c290:	4b1c      	ldr	r3, [pc, #112]	; (800c304 <HAL_RCC_ClockConfig+0x244>)
 800c292:	691b      	ldr	r3, [r3, #16]
 800c294:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	685b      	ldr	r3, [r3, #4]
 800c29c:	00db      	lsls	r3, r3, #3
 800c29e:	429a      	cmp	r2, r3
 800c2a0:	d1eb      	bne.n	800c27a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f003 0302 	and.w	r3, r3, #2
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d010      	beq.n	800c2d0 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	68da      	ldr	r2, [r3, #12]
 800c2b2:	4b14      	ldr	r3, [pc, #80]	; (800c304 <HAL_RCC_ClockConfig+0x244>)
 800c2b4:	699b      	ldr	r3, [r3, #24]
 800c2b6:	f003 030f 	and.w	r3, r3, #15
 800c2ba:	429a      	cmp	r2, r3
 800c2bc:	d208      	bcs.n	800c2d0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c2be:	4b11      	ldr	r3, [pc, #68]	; (800c304 <HAL_RCC_ClockConfig+0x244>)
 800c2c0:	699b      	ldr	r3, [r3, #24]
 800c2c2:	f023 020f 	bic.w	r2, r3, #15
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	68db      	ldr	r3, [r3, #12]
 800c2ca:	490e      	ldr	r1, [pc, #56]	; (800c304 <HAL_RCC_ClockConfig+0x244>)
 800c2cc:	4313      	orrs	r3, r2
 800c2ce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c2d0:	4b0b      	ldr	r3, [pc, #44]	; (800c300 <HAL_RCC_ClockConfig+0x240>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	f003 030f 	and.w	r3, r3, #15
 800c2d8:	683a      	ldr	r2, [r7, #0]
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	d214      	bcs.n	800c308 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c2de:	4b08      	ldr	r3, [pc, #32]	; (800c300 <HAL_RCC_ClockConfig+0x240>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	f023 020f 	bic.w	r2, r3, #15
 800c2e6:	4906      	ldr	r1, [pc, #24]	; (800c300 <HAL_RCC_ClockConfig+0x240>)
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	4313      	orrs	r3, r2
 800c2ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c2ee:	4b04      	ldr	r3, [pc, #16]	; (800c300 <HAL_RCC_ClockConfig+0x240>)
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	f003 030f 	and.w	r3, r3, #15
 800c2f6:	683a      	ldr	r2, [r7, #0]
 800c2f8:	429a      	cmp	r2, r3
 800c2fa:	d005      	beq.n	800c308 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	e086      	b.n	800c40e <HAL_RCC_ClockConfig+0x34e>
 800c300:	52002000 	.word	0x52002000
 800c304:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	f003 0304 	and.w	r3, r3, #4
 800c310:	2b00      	cmp	r3, #0
 800c312:	d010      	beq.n	800c336 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	691a      	ldr	r2, [r3, #16]
 800c318:	4b3f      	ldr	r3, [pc, #252]	; (800c418 <HAL_RCC_ClockConfig+0x358>)
 800c31a:	699b      	ldr	r3, [r3, #24]
 800c31c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c320:	429a      	cmp	r2, r3
 800c322:	d208      	bcs.n	800c336 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c324:	4b3c      	ldr	r3, [pc, #240]	; (800c418 <HAL_RCC_ClockConfig+0x358>)
 800c326:	699b      	ldr	r3, [r3, #24]
 800c328:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	691b      	ldr	r3, [r3, #16]
 800c330:	4939      	ldr	r1, [pc, #228]	; (800c418 <HAL_RCC_ClockConfig+0x358>)
 800c332:	4313      	orrs	r3, r2
 800c334:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	f003 0308 	and.w	r3, r3, #8
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d010      	beq.n	800c364 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	695a      	ldr	r2, [r3, #20]
 800c346:	4b34      	ldr	r3, [pc, #208]	; (800c418 <HAL_RCC_ClockConfig+0x358>)
 800c348:	69db      	ldr	r3, [r3, #28]
 800c34a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c34e:	429a      	cmp	r2, r3
 800c350:	d208      	bcs.n	800c364 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c352:	4b31      	ldr	r3, [pc, #196]	; (800c418 <HAL_RCC_ClockConfig+0x358>)
 800c354:	69db      	ldr	r3, [r3, #28]
 800c356:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	695b      	ldr	r3, [r3, #20]
 800c35e:	492e      	ldr	r1, [pc, #184]	; (800c418 <HAL_RCC_ClockConfig+0x358>)
 800c360:	4313      	orrs	r3, r2
 800c362:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	f003 0310 	and.w	r3, r3, #16
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d010      	beq.n	800c392 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	699a      	ldr	r2, [r3, #24]
 800c374:	4b28      	ldr	r3, [pc, #160]	; (800c418 <HAL_RCC_ClockConfig+0x358>)
 800c376:	69db      	ldr	r3, [r3, #28]
 800c378:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c37c:	429a      	cmp	r2, r3
 800c37e:	d208      	bcs.n	800c392 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c380:	4b25      	ldr	r3, [pc, #148]	; (800c418 <HAL_RCC_ClockConfig+0x358>)
 800c382:	69db      	ldr	r3, [r3, #28]
 800c384:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	699b      	ldr	r3, [r3, #24]
 800c38c:	4922      	ldr	r1, [pc, #136]	; (800c418 <HAL_RCC_ClockConfig+0x358>)
 800c38e:	4313      	orrs	r3, r2
 800c390:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	f003 0320 	and.w	r3, r3, #32
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d010      	beq.n	800c3c0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	69da      	ldr	r2, [r3, #28]
 800c3a2:	4b1d      	ldr	r3, [pc, #116]	; (800c418 <HAL_RCC_ClockConfig+0x358>)
 800c3a4:	6a1b      	ldr	r3, [r3, #32]
 800c3a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c3aa:	429a      	cmp	r2, r3
 800c3ac:	d208      	bcs.n	800c3c0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c3ae:	4b1a      	ldr	r3, [pc, #104]	; (800c418 <HAL_RCC_ClockConfig+0x358>)
 800c3b0:	6a1b      	ldr	r3, [r3, #32]
 800c3b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	69db      	ldr	r3, [r3, #28]
 800c3ba:	4917      	ldr	r1, [pc, #92]	; (800c418 <HAL_RCC_ClockConfig+0x358>)
 800c3bc:	4313      	orrs	r3, r2
 800c3be:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800c3c0:	f000 f834 	bl	800c42c <HAL_RCC_GetSysClockFreq>
 800c3c4:	4602      	mov	r2, r0
 800c3c6:	4b14      	ldr	r3, [pc, #80]	; (800c418 <HAL_RCC_ClockConfig+0x358>)
 800c3c8:	699b      	ldr	r3, [r3, #24]
 800c3ca:	0a1b      	lsrs	r3, r3, #8
 800c3cc:	f003 030f 	and.w	r3, r3, #15
 800c3d0:	4912      	ldr	r1, [pc, #72]	; (800c41c <HAL_RCC_ClockConfig+0x35c>)
 800c3d2:	5ccb      	ldrb	r3, [r1, r3]
 800c3d4:	f003 031f 	and.w	r3, r3, #31
 800c3d8:	fa22 f303 	lsr.w	r3, r2, r3
 800c3dc:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800c3de:	4b0e      	ldr	r3, [pc, #56]	; (800c418 <HAL_RCC_ClockConfig+0x358>)
 800c3e0:	699b      	ldr	r3, [r3, #24]
 800c3e2:	f003 030f 	and.w	r3, r3, #15
 800c3e6:	4a0d      	ldr	r2, [pc, #52]	; (800c41c <HAL_RCC_ClockConfig+0x35c>)
 800c3e8:	5cd3      	ldrb	r3, [r2, r3]
 800c3ea:	f003 031f 	and.w	r3, r3, #31
 800c3ee:	693a      	ldr	r2, [r7, #16]
 800c3f0:	fa22 f303 	lsr.w	r3, r2, r3
 800c3f4:	4a0a      	ldr	r2, [pc, #40]	; (800c420 <HAL_RCC_ClockConfig+0x360>)
 800c3f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c3f8:	4a0a      	ldr	r2, [pc, #40]	; (800c424 <HAL_RCC_ClockConfig+0x364>)
 800c3fa:	693b      	ldr	r3, [r7, #16]
 800c3fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800c3fe:	4b0a      	ldr	r3, [pc, #40]	; (800c428 <HAL_RCC_ClockConfig+0x368>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	4618      	mov	r0, r3
 800c404:	f7f7 fe2c 	bl	8004060 <HAL_InitTick>
 800c408:	4603      	mov	r3, r0
 800c40a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800c40c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c40e:	4618      	mov	r0, r3
 800c410:	3718      	adds	r7, #24
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}
 800c416:	bf00      	nop
 800c418:	58024400 	.word	0x58024400
 800c41c:	08014520 	.word	0x08014520
 800c420:	20000048 	.word	0x20000048
 800c424:	20000044 	.word	0x20000044
 800c428:	2000004c 	.word	0x2000004c

0800c42c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c42c:	b480      	push	{r7}
 800c42e:	b089      	sub	sp, #36	; 0x24
 800c430:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c432:	4bb3      	ldr	r3, [pc, #716]	; (800c700 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c434:	691b      	ldr	r3, [r3, #16]
 800c436:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c43a:	2b18      	cmp	r3, #24
 800c43c:	f200 8155 	bhi.w	800c6ea <HAL_RCC_GetSysClockFreq+0x2be>
 800c440:	a201      	add	r2, pc, #4	; (adr r2, 800c448 <HAL_RCC_GetSysClockFreq+0x1c>)
 800c442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c446:	bf00      	nop
 800c448:	0800c4ad 	.word	0x0800c4ad
 800c44c:	0800c6eb 	.word	0x0800c6eb
 800c450:	0800c6eb 	.word	0x0800c6eb
 800c454:	0800c6eb 	.word	0x0800c6eb
 800c458:	0800c6eb 	.word	0x0800c6eb
 800c45c:	0800c6eb 	.word	0x0800c6eb
 800c460:	0800c6eb 	.word	0x0800c6eb
 800c464:	0800c6eb 	.word	0x0800c6eb
 800c468:	0800c4d3 	.word	0x0800c4d3
 800c46c:	0800c6eb 	.word	0x0800c6eb
 800c470:	0800c6eb 	.word	0x0800c6eb
 800c474:	0800c6eb 	.word	0x0800c6eb
 800c478:	0800c6eb 	.word	0x0800c6eb
 800c47c:	0800c6eb 	.word	0x0800c6eb
 800c480:	0800c6eb 	.word	0x0800c6eb
 800c484:	0800c6eb 	.word	0x0800c6eb
 800c488:	0800c4d9 	.word	0x0800c4d9
 800c48c:	0800c6eb 	.word	0x0800c6eb
 800c490:	0800c6eb 	.word	0x0800c6eb
 800c494:	0800c6eb 	.word	0x0800c6eb
 800c498:	0800c6eb 	.word	0x0800c6eb
 800c49c:	0800c6eb 	.word	0x0800c6eb
 800c4a0:	0800c6eb 	.word	0x0800c6eb
 800c4a4:	0800c6eb 	.word	0x0800c6eb
 800c4a8:	0800c4df 	.word	0x0800c4df
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c4ac:	4b94      	ldr	r3, [pc, #592]	; (800c700 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	f003 0320 	and.w	r3, r3, #32
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d009      	beq.n	800c4cc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c4b8:	4b91      	ldr	r3, [pc, #580]	; (800c700 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	08db      	lsrs	r3, r3, #3
 800c4be:	f003 0303 	and.w	r3, r3, #3
 800c4c2:	4a90      	ldr	r2, [pc, #576]	; (800c704 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c4c4:	fa22 f303 	lsr.w	r3, r2, r3
 800c4c8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800c4ca:	e111      	b.n	800c6f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800c4cc:	4b8d      	ldr	r3, [pc, #564]	; (800c704 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c4ce:	61bb      	str	r3, [r7, #24]
      break;
 800c4d0:	e10e      	b.n	800c6f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800c4d2:	4b8d      	ldr	r3, [pc, #564]	; (800c708 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c4d4:	61bb      	str	r3, [r7, #24]
      break;
 800c4d6:	e10b      	b.n	800c6f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800c4d8:	4b8c      	ldr	r3, [pc, #560]	; (800c70c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800c4da:	61bb      	str	r3, [r7, #24]
      break;
 800c4dc:	e108      	b.n	800c6f0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c4de:	4b88      	ldr	r3, [pc, #544]	; (800c700 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c4e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4e2:	f003 0303 	and.w	r3, r3, #3
 800c4e6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800c4e8:	4b85      	ldr	r3, [pc, #532]	; (800c700 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c4ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4ec:	091b      	lsrs	r3, r3, #4
 800c4ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c4f2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c4f4:	4b82      	ldr	r3, [pc, #520]	; (800c700 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c4f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4f8:	f003 0301 	and.w	r3, r3, #1
 800c4fc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c4fe:	4b80      	ldr	r3, [pc, #512]	; (800c700 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c502:	08db      	lsrs	r3, r3, #3
 800c504:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c508:	68fa      	ldr	r2, [r7, #12]
 800c50a:	fb02 f303 	mul.w	r3, r2, r3
 800c50e:	ee07 3a90 	vmov	s15, r3
 800c512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c516:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	f000 80e1 	beq.w	800c6e4 <HAL_RCC_GetSysClockFreq+0x2b8>
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	2b02      	cmp	r3, #2
 800c526:	f000 8083 	beq.w	800c630 <HAL_RCC_GetSysClockFreq+0x204>
 800c52a:	697b      	ldr	r3, [r7, #20]
 800c52c:	2b02      	cmp	r3, #2
 800c52e:	f200 80a1 	bhi.w	800c674 <HAL_RCC_GetSysClockFreq+0x248>
 800c532:	697b      	ldr	r3, [r7, #20]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d003      	beq.n	800c540 <HAL_RCC_GetSysClockFreq+0x114>
 800c538:	697b      	ldr	r3, [r7, #20]
 800c53a:	2b01      	cmp	r3, #1
 800c53c:	d056      	beq.n	800c5ec <HAL_RCC_GetSysClockFreq+0x1c0>
 800c53e:	e099      	b.n	800c674 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c540:	4b6f      	ldr	r3, [pc, #444]	; (800c700 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f003 0320 	and.w	r3, r3, #32
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d02d      	beq.n	800c5a8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c54c:	4b6c      	ldr	r3, [pc, #432]	; (800c700 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	08db      	lsrs	r3, r3, #3
 800c552:	f003 0303 	and.w	r3, r3, #3
 800c556:	4a6b      	ldr	r2, [pc, #428]	; (800c704 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c558:	fa22 f303 	lsr.w	r3, r2, r3
 800c55c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	ee07 3a90 	vmov	s15, r3
 800c564:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c568:	693b      	ldr	r3, [r7, #16]
 800c56a:	ee07 3a90 	vmov	s15, r3
 800c56e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c572:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c576:	4b62      	ldr	r3, [pc, #392]	; (800c700 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c57a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c57e:	ee07 3a90 	vmov	s15, r3
 800c582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c586:	ed97 6a02 	vldr	s12, [r7, #8]
 800c58a:	eddf 5a61 	vldr	s11, [pc, #388]	; 800c710 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c58e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c592:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c596:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c59a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c59e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5a2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800c5a6:	e087      	b.n	800c6b8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c5a8:	693b      	ldr	r3, [r7, #16]
 800c5aa:	ee07 3a90 	vmov	s15, r3
 800c5ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5b2:	eddf 6a58 	vldr	s13, [pc, #352]	; 800c714 <HAL_RCC_GetSysClockFreq+0x2e8>
 800c5b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5ba:	4b51      	ldr	r3, [pc, #324]	; (800c700 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c5bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5c2:	ee07 3a90 	vmov	s15, r3
 800c5c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5ca:	ed97 6a02 	vldr	s12, [r7, #8]
 800c5ce:	eddf 5a50 	vldr	s11, [pc, #320]	; 800c710 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c5d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c5de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c5ea:	e065      	b.n	800c6b8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c5ec:	693b      	ldr	r3, [r7, #16]
 800c5ee:	ee07 3a90 	vmov	s15, r3
 800c5f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5f6:	eddf 6a48 	vldr	s13, [pc, #288]	; 800c718 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c5fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5fe:	4b40      	ldr	r3, [pc, #256]	; (800c700 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c606:	ee07 3a90 	vmov	s15, r3
 800c60a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c60e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c612:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800c710 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c616:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c61a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c61e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c622:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c62a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c62e:	e043      	b.n	800c6b8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c630:	693b      	ldr	r3, [r7, #16]
 800c632:	ee07 3a90 	vmov	s15, r3
 800c636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c63a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800c71c <HAL_RCC_GetSysClockFreq+0x2f0>
 800c63e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c642:	4b2f      	ldr	r3, [pc, #188]	; (800c700 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c64a:	ee07 3a90 	vmov	s15, r3
 800c64e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c652:	ed97 6a02 	vldr	s12, [r7, #8]
 800c656:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800c710 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c65a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c65e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c662:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c666:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c66a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c66e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c672:	e021      	b.n	800c6b8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c674:	693b      	ldr	r3, [r7, #16]
 800c676:	ee07 3a90 	vmov	s15, r3
 800c67a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c67e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800c718 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c686:	4b1e      	ldr	r3, [pc, #120]	; (800c700 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c68a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c68e:	ee07 3a90 	vmov	s15, r3
 800c692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c696:	ed97 6a02 	vldr	s12, [r7, #8]
 800c69a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800c710 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c69e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c6b6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800c6b8:	4b11      	ldr	r3, [pc, #68]	; (800c700 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c6ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6bc:	0a5b      	lsrs	r3, r3, #9
 800c6be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6c2:	3301      	adds	r3, #1
 800c6c4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	ee07 3a90 	vmov	s15, r3
 800c6cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c6d0:	edd7 6a07 	vldr	s13, [r7, #28]
 800c6d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c6d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c6dc:	ee17 3a90 	vmov	r3, s15
 800c6e0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800c6e2:	e005      	b.n	800c6f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	61bb      	str	r3, [r7, #24]
      break;
 800c6e8:	e002      	b.n	800c6f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800c6ea:	4b07      	ldr	r3, [pc, #28]	; (800c708 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c6ec:	61bb      	str	r3, [r7, #24]
      break;
 800c6ee:	bf00      	nop
  }

  return sysclockfreq;
 800c6f0:	69bb      	ldr	r3, [r7, #24]
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3724      	adds	r7, #36	; 0x24
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fc:	4770      	bx	lr
 800c6fe:	bf00      	nop
 800c700:	58024400 	.word	0x58024400
 800c704:	03d09000 	.word	0x03d09000
 800c708:	003d0900 	.word	0x003d0900
 800c70c:	016e3600 	.word	0x016e3600
 800c710:	46000000 	.word	0x46000000
 800c714:	4c742400 	.word	0x4c742400
 800c718:	4a742400 	.word	0x4a742400
 800c71c:	4bb71b00 	.word	0x4bb71b00

0800c720 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b082      	sub	sp, #8
 800c724:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800c726:	f7ff fe81 	bl	800c42c <HAL_RCC_GetSysClockFreq>
 800c72a:	4602      	mov	r2, r0
 800c72c:	4b10      	ldr	r3, [pc, #64]	; (800c770 <HAL_RCC_GetHCLKFreq+0x50>)
 800c72e:	699b      	ldr	r3, [r3, #24]
 800c730:	0a1b      	lsrs	r3, r3, #8
 800c732:	f003 030f 	and.w	r3, r3, #15
 800c736:	490f      	ldr	r1, [pc, #60]	; (800c774 <HAL_RCC_GetHCLKFreq+0x54>)
 800c738:	5ccb      	ldrb	r3, [r1, r3]
 800c73a:	f003 031f 	and.w	r3, r3, #31
 800c73e:	fa22 f303 	lsr.w	r3, r2, r3
 800c742:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800c744:	4b0a      	ldr	r3, [pc, #40]	; (800c770 <HAL_RCC_GetHCLKFreq+0x50>)
 800c746:	699b      	ldr	r3, [r3, #24]
 800c748:	f003 030f 	and.w	r3, r3, #15
 800c74c:	4a09      	ldr	r2, [pc, #36]	; (800c774 <HAL_RCC_GetHCLKFreq+0x54>)
 800c74e:	5cd3      	ldrb	r3, [r2, r3]
 800c750:	f003 031f 	and.w	r3, r3, #31
 800c754:	687a      	ldr	r2, [r7, #4]
 800c756:	fa22 f303 	lsr.w	r3, r2, r3
 800c75a:	4a07      	ldr	r2, [pc, #28]	; (800c778 <HAL_RCC_GetHCLKFreq+0x58>)
 800c75c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c75e:	4a07      	ldr	r2, [pc, #28]	; (800c77c <HAL_RCC_GetHCLKFreq+0x5c>)
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800c764:	4b04      	ldr	r3, [pc, #16]	; (800c778 <HAL_RCC_GetHCLKFreq+0x58>)
 800c766:	681b      	ldr	r3, [r3, #0]
}
 800c768:	4618      	mov	r0, r3
 800c76a:	3708      	adds	r7, #8
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}
 800c770:	58024400 	.word	0x58024400
 800c774:	08014520 	.word	0x08014520
 800c778:	20000048 	.word	0x20000048
 800c77c:	20000044 	.word	0x20000044

0800c780 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800c784:	f7ff ffcc 	bl	800c720 <HAL_RCC_GetHCLKFreq>
 800c788:	4602      	mov	r2, r0
 800c78a:	4b06      	ldr	r3, [pc, #24]	; (800c7a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c78c:	69db      	ldr	r3, [r3, #28]
 800c78e:	091b      	lsrs	r3, r3, #4
 800c790:	f003 0307 	and.w	r3, r3, #7
 800c794:	4904      	ldr	r1, [pc, #16]	; (800c7a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c796:	5ccb      	ldrb	r3, [r1, r3]
 800c798:	f003 031f 	and.w	r3, r3, #31
 800c79c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	bd80      	pop	{r7, pc}
 800c7a4:	58024400 	.word	0x58024400
 800c7a8:	08014520 	.word	0x08014520

0800c7ac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c7ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c7b0:	b0c8      	sub	sp, #288	; 0x120
 800c7b2:	af00      	add	r7, sp, #0
 800c7b4:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c7be:	2300      	movs	r3, #0
 800c7c0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c7c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7cc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800c7d0:	2500      	movs	r5, #0
 800c7d2:	ea54 0305 	orrs.w	r3, r4, r5
 800c7d6:	d049      	beq.n	800c86c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800c7d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c7dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c7e2:	d02f      	beq.n	800c844 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800c7e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c7e8:	d828      	bhi.n	800c83c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c7ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c7ee:	d01a      	beq.n	800c826 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800c7f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c7f4:	d822      	bhi.n	800c83c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d003      	beq.n	800c802 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800c7fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c7fe:	d007      	beq.n	800c810 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c800:	e01c      	b.n	800c83c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c802:	4ba7      	ldr	r3, [pc, #668]	; (800caa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c806:	4aa6      	ldr	r2, [pc, #664]	; (800caa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c80c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c80e:	e01a      	b.n	800c846 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c810:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c814:	3308      	adds	r3, #8
 800c816:	2102      	movs	r1, #2
 800c818:	4618      	mov	r0, r3
 800c81a:	f002 fa6d 	bl	800ecf8 <RCCEx_PLL2_Config>
 800c81e:	4603      	mov	r3, r0
 800c820:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c824:	e00f      	b.n	800c846 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c826:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c82a:	3328      	adds	r3, #40	; 0x28
 800c82c:	2102      	movs	r1, #2
 800c82e:	4618      	mov	r0, r3
 800c830:	f002 fb14 	bl	800ee5c <RCCEx_PLL3_Config>
 800c834:	4603      	mov	r3, r0
 800c836:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c83a:	e004      	b.n	800c846 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c83c:	2301      	movs	r3, #1
 800c83e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c842:	e000      	b.n	800c846 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800c844:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c846:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d10a      	bne.n	800c864 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c84e:	4b94      	ldr	r3, [pc, #592]	; (800caa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c852:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c856:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c85a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c85c:	4a90      	ldr	r2, [pc, #576]	; (800caa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c85e:	430b      	orrs	r3, r1
 800c860:	6513      	str	r3, [r2, #80]	; 0x50
 800c862:	e003      	b.n	800c86c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c864:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c868:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c86c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c874:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800c878:	f04f 0900 	mov.w	r9, #0
 800c87c:	ea58 0309 	orrs.w	r3, r8, r9
 800c880:	d047      	beq.n	800c912 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800c882:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c888:	2b04      	cmp	r3, #4
 800c88a:	d82a      	bhi.n	800c8e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800c88c:	a201      	add	r2, pc, #4	; (adr r2, 800c894 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800c88e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c892:	bf00      	nop
 800c894:	0800c8a9 	.word	0x0800c8a9
 800c898:	0800c8b7 	.word	0x0800c8b7
 800c89c:	0800c8cd 	.word	0x0800c8cd
 800c8a0:	0800c8eb 	.word	0x0800c8eb
 800c8a4:	0800c8eb 	.word	0x0800c8eb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c8a8:	4b7d      	ldr	r3, [pc, #500]	; (800caa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c8aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8ac:	4a7c      	ldr	r2, [pc, #496]	; (800caa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c8ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c8b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c8b4:	e01a      	b.n	800c8ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c8b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c8ba:	3308      	adds	r3, #8
 800c8bc:	2100      	movs	r1, #0
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f002 fa1a 	bl	800ecf8 <RCCEx_PLL2_Config>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c8ca:	e00f      	b.n	800c8ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c8cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c8d0:	3328      	adds	r3, #40	; 0x28
 800c8d2:	2100      	movs	r1, #0
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	f002 fac1 	bl	800ee5c <RCCEx_PLL3_Config>
 800c8da:	4603      	mov	r3, r0
 800c8dc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c8e0:	e004      	b.n	800c8ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c8e8:	e000      	b.n	800c8ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800c8ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c8ec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d10a      	bne.n	800c90a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c8f4:	4b6a      	ldr	r3, [pc, #424]	; (800caa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c8f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8f8:	f023 0107 	bic.w	r1, r3, #7
 800c8fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c902:	4a67      	ldr	r2, [pc, #412]	; (800caa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c904:	430b      	orrs	r3, r1
 800c906:	6513      	str	r3, [r2, #80]	; 0x50
 800c908:	e003      	b.n	800c912 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c90a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c90e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800c912:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c91a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800c91e:	f04f 0b00 	mov.w	fp, #0
 800c922:	ea5a 030b 	orrs.w	r3, sl, fp
 800c926:	d054      	beq.n	800c9d2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800c928:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c92c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c92e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800c932:	d036      	beq.n	800c9a2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800c934:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800c938:	d82f      	bhi.n	800c99a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800c93a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c93e:	d032      	beq.n	800c9a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c944:	d829      	bhi.n	800c99a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800c946:	2bc0      	cmp	r3, #192	; 0xc0
 800c948:	d02f      	beq.n	800c9aa <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800c94a:	2bc0      	cmp	r3, #192	; 0xc0
 800c94c:	d825      	bhi.n	800c99a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800c94e:	2b80      	cmp	r3, #128	; 0x80
 800c950:	d018      	beq.n	800c984 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800c952:	2b80      	cmp	r3, #128	; 0x80
 800c954:	d821      	bhi.n	800c99a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800c956:	2b00      	cmp	r3, #0
 800c958:	d002      	beq.n	800c960 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800c95a:	2b40      	cmp	r3, #64	; 0x40
 800c95c:	d007      	beq.n	800c96e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800c95e:	e01c      	b.n	800c99a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c960:	4b4f      	ldr	r3, [pc, #316]	; (800caa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c964:	4a4e      	ldr	r2, [pc, #312]	; (800caa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c966:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c96a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800c96c:	e01e      	b.n	800c9ac <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c96e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c972:	3308      	adds	r3, #8
 800c974:	2100      	movs	r1, #0
 800c976:	4618      	mov	r0, r3
 800c978:	f002 f9be 	bl	800ecf8 <RCCEx_PLL2_Config>
 800c97c:	4603      	mov	r3, r0
 800c97e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800c982:	e013      	b.n	800c9ac <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c984:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c988:	3328      	adds	r3, #40	; 0x28
 800c98a:	2100      	movs	r1, #0
 800c98c:	4618      	mov	r0, r3
 800c98e:	f002 fa65 	bl	800ee5c <RCCEx_PLL3_Config>
 800c992:	4603      	mov	r3, r0
 800c994:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800c998:	e008      	b.n	800c9ac <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c99a:	2301      	movs	r3, #1
 800c99c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c9a0:	e004      	b.n	800c9ac <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800c9a2:	bf00      	nop
 800c9a4:	e002      	b.n	800c9ac <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800c9a6:	bf00      	nop
 800c9a8:	e000      	b.n	800c9ac <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800c9aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c9ac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d10a      	bne.n	800c9ca <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800c9b4:	4b3a      	ldr	r3, [pc, #232]	; (800caa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c9b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9b8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800c9bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c9c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c9c2:	4a37      	ldr	r2, [pc, #220]	; (800caa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c9c4:	430b      	orrs	r3, r1
 800c9c6:	6513      	str	r3, [r2, #80]	; 0x50
 800c9c8:	e003      	b.n	800c9d2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c9ce:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800c9d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9da:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800c9de:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c9e8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800c9ec:	460b      	mov	r3, r1
 800c9ee:	4313      	orrs	r3, r2
 800c9f0:	d05c      	beq.n	800caac <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800c9f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c9f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c9f8:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800c9fc:	d03b      	beq.n	800ca76 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800c9fe:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800ca02:	d834      	bhi.n	800ca6e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800ca04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ca08:	d037      	beq.n	800ca7a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800ca0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ca0e:	d82e      	bhi.n	800ca6e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800ca10:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ca14:	d033      	beq.n	800ca7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ca16:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ca1a:	d828      	bhi.n	800ca6e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800ca1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca20:	d01a      	beq.n	800ca58 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800ca22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca26:	d822      	bhi.n	800ca6e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d003      	beq.n	800ca34 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800ca2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca30:	d007      	beq.n	800ca42 <HAL_RCCEx_PeriphCLKConfig+0x296>
 800ca32:	e01c      	b.n	800ca6e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ca34:	4b1a      	ldr	r3, [pc, #104]	; (800caa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ca36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca38:	4a19      	ldr	r2, [pc, #100]	; (800caa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ca3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ca3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800ca40:	e01e      	b.n	800ca80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ca42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ca46:	3308      	adds	r3, #8
 800ca48:	2100      	movs	r1, #0
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f002 f954 	bl	800ecf8 <RCCEx_PLL2_Config>
 800ca50:	4603      	mov	r3, r0
 800ca52:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800ca56:	e013      	b.n	800ca80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ca58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ca5c:	3328      	adds	r3, #40	; 0x28
 800ca5e:	2100      	movs	r1, #0
 800ca60:	4618      	mov	r0, r3
 800ca62:	f002 f9fb 	bl	800ee5c <RCCEx_PLL3_Config>
 800ca66:	4603      	mov	r3, r0
 800ca68:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800ca6c:	e008      	b.n	800ca80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ca6e:	2301      	movs	r3, #1
 800ca70:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800ca74:	e004      	b.n	800ca80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800ca76:	bf00      	nop
 800ca78:	e002      	b.n	800ca80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800ca7a:	bf00      	nop
 800ca7c:	e000      	b.n	800ca80 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800ca7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ca80:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d10d      	bne.n	800caa4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800ca88:	4b05      	ldr	r3, [pc, #20]	; (800caa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ca8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca8c:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800ca90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ca94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ca96:	4a02      	ldr	r2, [pc, #8]	; (800caa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ca98:	430b      	orrs	r3, r1
 800ca9a:	6513      	str	r3, [r2, #80]	; 0x50
 800ca9c:	e006      	b.n	800caac <HAL_RCCEx_PeriphCLKConfig+0x300>
 800ca9e:	bf00      	nop
 800caa0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800caa4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800caa8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800caac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800cab8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800cabc:	2300      	movs	r3, #0
 800cabe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800cac2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800cac6:	460b      	mov	r3, r1
 800cac8:	4313      	orrs	r3, r2
 800caca:	d03a      	beq.n	800cb42 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800cacc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cad2:	2b30      	cmp	r3, #48	; 0x30
 800cad4:	d01f      	beq.n	800cb16 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800cad6:	2b30      	cmp	r3, #48	; 0x30
 800cad8:	d819      	bhi.n	800cb0e <HAL_RCCEx_PeriphCLKConfig+0x362>
 800cada:	2b20      	cmp	r3, #32
 800cadc:	d00c      	beq.n	800caf8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800cade:	2b20      	cmp	r3, #32
 800cae0:	d815      	bhi.n	800cb0e <HAL_RCCEx_PeriphCLKConfig+0x362>
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d019      	beq.n	800cb1a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800cae6:	2b10      	cmp	r3, #16
 800cae8:	d111      	bne.n	800cb0e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800caea:	4bae      	ldr	r3, [pc, #696]	; (800cda4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800caec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caee:	4aad      	ldr	r2, [pc, #692]	; (800cda4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800caf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800caf4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800caf6:	e011      	b.n	800cb1c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800caf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cafc:	3308      	adds	r3, #8
 800cafe:	2102      	movs	r1, #2
 800cb00:	4618      	mov	r0, r3
 800cb02:	f002 f8f9 	bl	800ecf8 <RCCEx_PLL2_Config>
 800cb06:	4603      	mov	r3, r0
 800cb08:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800cb0c:	e006      	b.n	800cb1c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800cb0e:	2301      	movs	r3, #1
 800cb10:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800cb14:	e002      	b.n	800cb1c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800cb16:	bf00      	nop
 800cb18:	e000      	b.n	800cb1c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800cb1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cb1c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d10a      	bne.n	800cb3a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800cb24:	4b9f      	ldr	r3, [pc, #636]	; (800cda4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cb26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb28:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800cb2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cb30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb32:	4a9c      	ldr	r2, [pc, #624]	; (800cda4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cb34:	430b      	orrs	r3, r1
 800cb36:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cb38:	e003      	b.n	800cb42 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb3a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cb3e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800cb42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb4a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800cb4e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800cb52:	2300      	movs	r3, #0
 800cb54:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800cb58:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800cb5c:	460b      	mov	r3, r1
 800cb5e:	4313      	orrs	r3, r2
 800cb60:	d051      	beq.n	800cc06 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800cb62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cb66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cb6c:	d035      	beq.n	800cbda <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800cb6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cb72:	d82e      	bhi.n	800cbd2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800cb74:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cb78:	d031      	beq.n	800cbde <HAL_RCCEx_PeriphCLKConfig+0x432>
 800cb7a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cb7e:	d828      	bhi.n	800cbd2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800cb80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cb84:	d01a      	beq.n	800cbbc <HAL_RCCEx_PeriphCLKConfig+0x410>
 800cb86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cb8a:	d822      	bhi.n	800cbd2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d003      	beq.n	800cb98 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800cb90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb94:	d007      	beq.n	800cba6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800cb96:	e01c      	b.n	800cbd2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cb98:	4b82      	ldr	r3, [pc, #520]	; (800cda4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cb9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb9c:	4a81      	ldr	r2, [pc, #516]	; (800cda4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cb9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cba2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800cba4:	e01c      	b.n	800cbe0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cba6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cbaa:	3308      	adds	r3, #8
 800cbac:	2100      	movs	r1, #0
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f002 f8a2 	bl	800ecf8 <RCCEx_PLL2_Config>
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800cbba:	e011      	b.n	800cbe0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cbbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cbc0:	3328      	adds	r3, #40	; 0x28
 800cbc2:	2100      	movs	r1, #0
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f002 f949 	bl	800ee5c <RCCEx_PLL3_Config>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800cbd0:	e006      	b.n	800cbe0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cbd2:	2301      	movs	r3, #1
 800cbd4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800cbd8:	e002      	b.n	800cbe0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800cbda:	bf00      	nop
 800cbdc:	e000      	b.n	800cbe0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800cbde:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cbe0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d10a      	bne.n	800cbfe <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800cbe8:	4b6e      	ldr	r3, [pc, #440]	; (800cda4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cbea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbec:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800cbf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cbf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cbf6:	4a6b      	ldr	r2, [pc, #428]	; (800cda4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cbf8:	430b      	orrs	r3, r1
 800cbfa:	6513      	str	r3, [r2, #80]	; 0x50
 800cbfc:	e003      	b.n	800cc06 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cbfe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cc02:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800cc06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc0e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800cc12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cc16:	2300      	movs	r3, #0
 800cc18:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800cc1c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800cc20:	460b      	mov	r3, r1
 800cc22:	4313      	orrs	r3, r2
 800cc24:	d053      	beq.n	800ccce <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800cc26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cc2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cc2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cc30:	d033      	beq.n	800cc9a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800cc32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cc36:	d82c      	bhi.n	800cc92 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800cc38:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cc3c:	d02f      	beq.n	800cc9e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800cc3e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cc42:	d826      	bhi.n	800cc92 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800cc44:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cc48:	d02b      	beq.n	800cca2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800cc4a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cc4e:	d820      	bhi.n	800cc92 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800cc50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc54:	d012      	beq.n	800cc7c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800cc56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc5a:	d81a      	bhi.n	800cc92 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d022      	beq.n	800cca6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800cc60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc64:	d115      	bne.n	800cc92 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cc66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cc6a:	3308      	adds	r3, #8
 800cc6c:	2101      	movs	r1, #1
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f002 f842 	bl	800ecf8 <RCCEx_PLL2_Config>
 800cc74:	4603      	mov	r3, r0
 800cc76:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800cc7a:	e015      	b.n	800cca8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cc7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cc80:	3328      	adds	r3, #40	; 0x28
 800cc82:	2101      	movs	r1, #1
 800cc84:	4618      	mov	r0, r3
 800cc86:	f002 f8e9 	bl	800ee5c <RCCEx_PLL3_Config>
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800cc90:	e00a      	b.n	800cca8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cc92:	2301      	movs	r3, #1
 800cc94:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800cc98:	e006      	b.n	800cca8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800cc9a:	bf00      	nop
 800cc9c:	e004      	b.n	800cca8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800cc9e:	bf00      	nop
 800cca0:	e002      	b.n	800cca8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800cca2:	bf00      	nop
 800cca4:	e000      	b.n	800cca8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800cca6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cca8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d10a      	bne.n	800ccc6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ccb0:	4b3c      	ldr	r3, [pc, #240]	; (800cda4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ccb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ccb4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800ccb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ccbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ccbe:	4a39      	ldr	r2, [pc, #228]	; (800cda4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ccc0:	430b      	orrs	r3, r1
 800ccc2:	6513      	str	r3, [r2, #80]	; 0x50
 800ccc4:	e003      	b.n	800ccce <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ccc6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ccca:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ccce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ccd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800ccda:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ccde:	2300      	movs	r3, #0
 800cce0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cce4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800cce8:	460b      	mov	r3, r1
 800ccea:	4313      	orrs	r3, r2
 800ccec:	d060      	beq.n	800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800ccee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ccf2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ccf6:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800ccfa:	d039      	beq.n	800cd70 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800ccfc:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800cd00:	d832      	bhi.n	800cd68 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800cd02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cd06:	d035      	beq.n	800cd74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800cd08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cd0c:	d82c      	bhi.n	800cd68 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800cd0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd12:	d031      	beq.n	800cd78 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800cd14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd18:	d826      	bhi.n	800cd68 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800cd1a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cd1e:	d02d      	beq.n	800cd7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800cd20:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cd24:	d820      	bhi.n	800cd68 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800cd26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd2a:	d012      	beq.n	800cd52 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800cd2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd30:	d81a      	bhi.n	800cd68 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d024      	beq.n	800cd80 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800cd36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cd3a:	d115      	bne.n	800cd68 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cd3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cd40:	3308      	adds	r3, #8
 800cd42:	2101      	movs	r1, #1
 800cd44:	4618      	mov	r0, r3
 800cd46:	f001 ffd7 	bl	800ecf8 <RCCEx_PLL2_Config>
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800cd50:	e017      	b.n	800cd82 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cd52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cd56:	3328      	adds	r3, #40	; 0x28
 800cd58:	2101      	movs	r1, #1
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f002 f87e 	bl	800ee5c <RCCEx_PLL3_Config>
 800cd60:	4603      	mov	r3, r0
 800cd62:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800cd66:	e00c      	b.n	800cd82 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800cd68:	2301      	movs	r3, #1
 800cd6a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800cd6e:	e008      	b.n	800cd82 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800cd70:	bf00      	nop
 800cd72:	e006      	b.n	800cd82 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800cd74:	bf00      	nop
 800cd76:	e004      	b.n	800cd82 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800cd78:	bf00      	nop
 800cd7a:	e002      	b.n	800cd82 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800cd7c:	bf00      	nop
 800cd7e:	e000      	b.n	800cd82 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800cd80:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cd82:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d10e      	bne.n	800cda8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800cd8a:	4b06      	ldr	r3, [pc, #24]	; (800cda4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cd8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd8e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800cd92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cd96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cd9a:	4a02      	ldr	r2, [pc, #8]	; (800cda4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cd9c:	430b      	orrs	r3, r1
 800cd9e:	6593      	str	r3, [r2, #88]	; 0x58
 800cda0:	e006      	b.n	800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800cda2:	bf00      	nop
 800cda4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cda8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cdac:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800cdb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cdb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdb8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800cdbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800cdc6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800cdca:	460b      	mov	r3, r1
 800cdcc:	4313      	orrs	r3, r2
 800cdce:	d037      	beq.n	800ce40 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800cdd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cdd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cdd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cdda:	d00e      	beq.n	800cdfa <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800cddc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cde0:	d816      	bhi.n	800ce10 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d018      	beq.n	800ce18 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800cde6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cdea:	d111      	bne.n	800ce10 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cdec:	4bc4      	ldr	r3, [pc, #784]	; (800d100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cdee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdf0:	4ac3      	ldr	r2, [pc, #780]	; (800d100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cdf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cdf6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800cdf8:	e00f      	b.n	800ce1a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cdfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cdfe:	3308      	adds	r3, #8
 800ce00:	2101      	movs	r1, #1
 800ce02:	4618      	mov	r0, r3
 800ce04:	f001 ff78 	bl	800ecf8 <RCCEx_PLL2_Config>
 800ce08:	4603      	mov	r3, r0
 800ce0a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ce0e:	e004      	b.n	800ce1a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ce10:	2301      	movs	r3, #1
 800ce12:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800ce16:	e000      	b.n	800ce1a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800ce18:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ce1a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d10a      	bne.n	800ce38 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ce22:	4bb7      	ldr	r3, [pc, #732]	; (800d100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ce24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce26:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800ce2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ce2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ce30:	4ab3      	ldr	r2, [pc, #716]	; (800d100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ce32:	430b      	orrs	r3, r1
 800ce34:	6513      	str	r3, [r2, #80]	; 0x50
 800ce36:	e003      	b.n	800ce40 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce38:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ce3c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ce40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ce44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce48:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800ce4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ce50:	2300      	movs	r3, #0
 800ce52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ce56:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800ce5a:	460b      	mov	r3, r1
 800ce5c:	4313      	orrs	r3, r2
 800ce5e:	d039      	beq.n	800ced4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800ce60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ce64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce66:	2b03      	cmp	r3, #3
 800ce68:	d81c      	bhi.n	800cea4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800ce6a:	a201      	add	r2, pc, #4	; (adr r2, 800ce70 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800ce6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce70:	0800cead 	.word	0x0800cead
 800ce74:	0800ce81 	.word	0x0800ce81
 800ce78:	0800ce8f 	.word	0x0800ce8f
 800ce7c:	0800cead 	.word	0x0800cead
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ce80:	4b9f      	ldr	r3, [pc, #636]	; (800d100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ce82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce84:	4a9e      	ldr	r2, [pc, #632]	; (800d100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ce86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ce8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ce8c:	e00f      	b.n	800ceae <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ce8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ce92:	3308      	adds	r3, #8
 800ce94:	2102      	movs	r1, #2
 800ce96:	4618      	mov	r0, r3
 800ce98:	f001 ff2e 	bl	800ecf8 <RCCEx_PLL2_Config>
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800cea2:	e004      	b.n	800ceae <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800cea4:	2301      	movs	r3, #1
 800cea6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800ceaa:	e000      	b.n	800ceae <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800ceac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ceae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d10a      	bne.n	800cecc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ceb6:	4b92      	ldr	r3, [pc, #584]	; (800d100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ceb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ceba:	f023 0103 	bic.w	r1, r3, #3
 800cebe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cec4:	4a8e      	ldr	r2, [pc, #568]	; (800d100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cec6:	430b      	orrs	r3, r1
 800cec8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ceca:	e003      	b.n	800ced4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cecc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ced0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ced4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ced8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cedc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800cee0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cee4:	2300      	movs	r3, #0
 800cee6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ceea:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800ceee:	460b      	mov	r3, r1
 800cef0:	4313      	orrs	r3, r2
 800cef2:	f000 8099 	beq.w	800d028 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cef6:	4b83      	ldr	r3, [pc, #524]	; (800d104 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	4a82      	ldr	r2, [pc, #520]	; (800d104 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800cefc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cf00:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800cf02:	f7f7 f8f7 	bl	80040f4 <HAL_GetTick>
 800cf06:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cf0a:	e00b      	b.n	800cf24 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cf0c:	f7f7 f8f2 	bl	80040f4 <HAL_GetTick>
 800cf10:	4602      	mov	r2, r0
 800cf12:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800cf16:	1ad3      	subs	r3, r2, r3
 800cf18:	2b64      	cmp	r3, #100	; 0x64
 800cf1a:	d903      	bls.n	800cf24 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800cf1c:	2303      	movs	r3, #3
 800cf1e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800cf22:	e005      	b.n	800cf30 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cf24:	4b77      	ldr	r3, [pc, #476]	; (800d104 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d0ed      	beq.n	800cf0c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800cf30:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d173      	bne.n	800d020 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800cf38:	4b71      	ldr	r3, [pc, #452]	; (800d100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cf3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cf3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cf40:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800cf44:	4053      	eors	r3, r2
 800cf46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d015      	beq.n	800cf7a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cf4e:	4b6c      	ldr	r3, [pc, #432]	; (800d100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cf50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cf56:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800cf5a:	4b69      	ldr	r3, [pc, #420]	; (800d100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cf5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf5e:	4a68      	ldr	r2, [pc, #416]	; (800d100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cf60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cf64:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800cf66:	4b66      	ldr	r3, [pc, #408]	; (800d100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cf68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf6a:	4a65      	ldr	r2, [pc, #404]	; (800d100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cf6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cf70:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800cf72:	4a63      	ldr	r2, [pc, #396]	; (800d100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cf74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf78:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800cf7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cf7e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800cf82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf86:	d118      	bne.n	800cfba <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf88:	f7f7 f8b4 	bl	80040f4 <HAL_GetTick>
 800cf8c:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cf90:	e00d      	b.n	800cfae <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cf92:	f7f7 f8af 	bl	80040f4 <HAL_GetTick>
 800cf96:	4602      	mov	r2, r0
 800cf98:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800cf9c:	1ad2      	subs	r2, r2, r3
 800cf9e:	f241 3388 	movw	r3, #5000	; 0x1388
 800cfa2:	429a      	cmp	r2, r3
 800cfa4:	d903      	bls.n	800cfae <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800cfa6:	2303      	movs	r3, #3
 800cfa8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 800cfac:	e005      	b.n	800cfba <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cfae:	4b54      	ldr	r3, [pc, #336]	; (800d100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cfb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfb2:	f003 0302 	and.w	r3, r3, #2
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d0eb      	beq.n	800cf92 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800cfba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d129      	bne.n	800d016 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cfc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cfc6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800cfca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cfce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cfd2:	d10e      	bne.n	800cff2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800cfd4:	4b4a      	ldr	r3, [pc, #296]	; (800d100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cfd6:	691b      	ldr	r3, [r3, #16]
 800cfd8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800cfdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cfe0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800cfe4:	091a      	lsrs	r2, r3, #4
 800cfe6:	4b48      	ldr	r3, [pc, #288]	; (800d108 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800cfe8:	4013      	ands	r3, r2
 800cfea:	4a45      	ldr	r2, [pc, #276]	; (800d100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cfec:	430b      	orrs	r3, r1
 800cfee:	6113      	str	r3, [r2, #16]
 800cff0:	e005      	b.n	800cffe <HAL_RCCEx_PeriphCLKConfig+0x852>
 800cff2:	4b43      	ldr	r3, [pc, #268]	; (800d100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cff4:	691b      	ldr	r3, [r3, #16]
 800cff6:	4a42      	ldr	r2, [pc, #264]	; (800d100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cff8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cffc:	6113      	str	r3, [r2, #16]
 800cffe:	4b40      	ldr	r3, [pc, #256]	; (800d100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d000:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800d002:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d006:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d00a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d00e:	4a3c      	ldr	r2, [pc, #240]	; (800d100 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800d010:	430b      	orrs	r3, r1
 800d012:	6713      	str	r3, [r2, #112]	; 0x70
 800d014:	e008      	b.n	800d028 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d016:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d01a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800d01e:	e003      	b.n	800d028 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d020:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d024:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800d028:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d030:	f002 0301 	and.w	r3, r2, #1
 800d034:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d038:	2300      	movs	r3, #0
 800d03a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d03e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800d042:	460b      	mov	r3, r1
 800d044:	4313      	orrs	r3, r2
 800d046:	f000 8090 	beq.w	800d16a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800d04a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d04e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d052:	2b28      	cmp	r3, #40	; 0x28
 800d054:	d870      	bhi.n	800d138 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800d056:	a201      	add	r2, pc, #4	; (adr r2, 800d05c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800d058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d05c:	0800d141 	.word	0x0800d141
 800d060:	0800d139 	.word	0x0800d139
 800d064:	0800d139 	.word	0x0800d139
 800d068:	0800d139 	.word	0x0800d139
 800d06c:	0800d139 	.word	0x0800d139
 800d070:	0800d139 	.word	0x0800d139
 800d074:	0800d139 	.word	0x0800d139
 800d078:	0800d139 	.word	0x0800d139
 800d07c:	0800d10d 	.word	0x0800d10d
 800d080:	0800d139 	.word	0x0800d139
 800d084:	0800d139 	.word	0x0800d139
 800d088:	0800d139 	.word	0x0800d139
 800d08c:	0800d139 	.word	0x0800d139
 800d090:	0800d139 	.word	0x0800d139
 800d094:	0800d139 	.word	0x0800d139
 800d098:	0800d139 	.word	0x0800d139
 800d09c:	0800d123 	.word	0x0800d123
 800d0a0:	0800d139 	.word	0x0800d139
 800d0a4:	0800d139 	.word	0x0800d139
 800d0a8:	0800d139 	.word	0x0800d139
 800d0ac:	0800d139 	.word	0x0800d139
 800d0b0:	0800d139 	.word	0x0800d139
 800d0b4:	0800d139 	.word	0x0800d139
 800d0b8:	0800d139 	.word	0x0800d139
 800d0bc:	0800d141 	.word	0x0800d141
 800d0c0:	0800d139 	.word	0x0800d139
 800d0c4:	0800d139 	.word	0x0800d139
 800d0c8:	0800d139 	.word	0x0800d139
 800d0cc:	0800d139 	.word	0x0800d139
 800d0d0:	0800d139 	.word	0x0800d139
 800d0d4:	0800d139 	.word	0x0800d139
 800d0d8:	0800d139 	.word	0x0800d139
 800d0dc:	0800d141 	.word	0x0800d141
 800d0e0:	0800d139 	.word	0x0800d139
 800d0e4:	0800d139 	.word	0x0800d139
 800d0e8:	0800d139 	.word	0x0800d139
 800d0ec:	0800d139 	.word	0x0800d139
 800d0f0:	0800d139 	.word	0x0800d139
 800d0f4:	0800d139 	.word	0x0800d139
 800d0f8:	0800d139 	.word	0x0800d139
 800d0fc:	0800d141 	.word	0x0800d141
 800d100:	58024400 	.word	0x58024400
 800d104:	58024800 	.word	0x58024800
 800d108:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d10c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d110:	3308      	adds	r3, #8
 800d112:	2101      	movs	r1, #1
 800d114:	4618      	mov	r0, r3
 800d116:	f001 fdef 	bl	800ecf8 <RCCEx_PLL2_Config>
 800d11a:	4603      	mov	r3, r0
 800d11c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800d120:	e00f      	b.n	800d142 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d122:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d126:	3328      	adds	r3, #40	; 0x28
 800d128:	2101      	movs	r1, #1
 800d12a:	4618      	mov	r0, r3
 800d12c:	f001 fe96 	bl	800ee5c <RCCEx_PLL3_Config>
 800d130:	4603      	mov	r3, r0
 800d132:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800d136:	e004      	b.n	800d142 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d138:	2301      	movs	r3, #1
 800d13a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d13e:	e000      	b.n	800d142 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800d140:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d142:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d146:	2b00      	cmp	r3, #0
 800d148:	d10b      	bne.n	800d162 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800d14a:	4bc0      	ldr	r3, [pc, #768]	; (800d44c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800d14c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d14e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800d152:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d156:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d15a:	4abc      	ldr	r2, [pc, #752]	; (800d44c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800d15c:	430b      	orrs	r3, r1
 800d15e:	6553      	str	r3, [r2, #84]	; 0x54
 800d160:	e003      	b.n	800d16a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d162:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d166:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800d16a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d172:	f002 0302 	and.w	r3, r2, #2
 800d176:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d17a:	2300      	movs	r3, #0
 800d17c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d180:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800d184:	460b      	mov	r3, r1
 800d186:	4313      	orrs	r3, r2
 800d188:	d043      	beq.n	800d212 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800d18a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d18e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d192:	2b05      	cmp	r3, #5
 800d194:	d824      	bhi.n	800d1e0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800d196:	a201      	add	r2, pc, #4	; (adr r2, 800d19c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800d198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d19c:	0800d1e9 	.word	0x0800d1e9
 800d1a0:	0800d1b5 	.word	0x0800d1b5
 800d1a4:	0800d1cb 	.word	0x0800d1cb
 800d1a8:	0800d1e9 	.word	0x0800d1e9
 800d1ac:	0800d1e9 	.word	0x0800d1e9
 800d1b0:	0800d1e9 	.word	0x0800d1e9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d1b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d1b8:	3308      	adds	r3, #8
 800d1ba:	2101      	movs	r1, #1
 800d1bc:	4618      	mov	r0, r3
 800d1be:	f001 fd9b 	bl	800ecf8 <RCCEx_PLL2_Config>
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800d1c8:	e00f      	b.n	800d1ea <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d1ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d1ce:	3328      	adds	r3, #40	; 0x28
 800d1d0:	2101      	movs	r1, #1
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f001 fe42 	bl	800ee5c <RCCEx_PLL3_Config>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800d1de:	e004      	b.n	800d1ea <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d1e6:	e000      	b.n	800d1ea <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800d1e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d1ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d10b      	bne.n	800d20a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800d1f2:	4b96      	ldr	r3, [pc, #600]	; (800d44c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800d1f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1f6:	f023 0107 	bic.w	r1, r3, #7
 800d1fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d1fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d202:	4a92      	ldr	r2, [pc, #584]	; (800d44c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800d204:	430b      	orrs	r3, r1
 800d206:	6553      	str	r3, [r2, #84]	; 0x54
 800d208:	e003      	b.n	800d212 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d20a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d20e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d212:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d21a:	f002 0304 	and.w	r3, r2, #4
 800d21e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d222:	2300      	movs	r3, #0
 800d224:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d228:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800d22c:	460b      	mov	r3, r1
 800d22e:	4313      	orrs	r3, r2
 800d230:	d043      	beq.n	800d2ba <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800d232:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d236:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d23a:	2b05      	cmp	r3, #5
 800d23c:	d824      	bhi.n	800d288 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800d23e:	a201      	add	r2, pc, #4	; (adr r2, 800d244 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800d240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d244:	0800d291 	.word	0x0800d291
 800d248:	0800d25d 	.word	0x0800d25d
 800d24c:	0800d273 	.word	0x0800d273
 800d250:	0800d291 	.word	0x0800d291
 800d254:	0800d291 	.word	0x0800d291
 800d258:	0800d291 	.word	0x0800d291
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d25c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d260:	3308      	adds	r3, #8
 800d262:	2101      	movs	r1, #1
 800d264:	4618      	mov	r0, r3
 800d266:	f001 fd47 	bl	800ecf8 <RCCEx_PLL2_Config>
 800d26a:	4603      	mov	r3, r0
 800d26c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d270:	e00f      	b.n	800d292 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d272:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d276:	3328      	adds	r3, #40	; 0x28
 800d278:	2101      	movs	r1, #1
 800d27a:	4618      	mov	r0, r3
 800d27c:	f001 fdee 	bl	800ee5c <RCCEx_PLL3_Config>
 800d280:	4603      	mov	r3, r0
 800d282:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d286:	e004      	b.n	800d292 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d288:	2301      	movs	r3, #1
 800d28a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d28e:	e000      	b.n	800d292 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800d290:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d292:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d296:	2b00      	cmp	r3, #0
 800d298:	d10b      	bne.n	800d2b2 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d29a:	4b6c      	ldr	r3, [pc, #432]	; (800d44c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800d29c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d29e:	f023 0107 	bic.w	r1, r3, #7
 800d2a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d2a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d2aa:	4a68      	ldr	r2, [pc, #416]	; (800d44c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800d2ac:	430b      	orrs	r3, r1
 800d2ae:	6593      	str	r3, [r2, #88]	; 0x58
 800d2b0:	e003      	b.n	800d2ba <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d2b2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d2b6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d2ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2c2:	f002 0320 	and.w	r3, r2, #32
 800d2c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d2d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800d2d4:	460b      	mov	r3, r1
 800d2d6:	4313      	orrs	r3, r2
 800d2d8:	d055      	beq.n	800d386 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800d2da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d2de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d2e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d2e6:	d033      	beq.n	800d350 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800d2e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d2ec:	d82c      	bhi.n	800d348 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800d2ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d2f2:	d02f      	beq.n	800d354 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800d2f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d2f8:	d826      	bhi.n	800d348 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800d2fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d2fe:	d02b      	beq.n	800d358 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800d300:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d304:	d820      	bhi.n	800d348 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800d306:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d30a:	d012      	beq.n	800d332 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800d30c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d310:	d81a      	bhi.n	800d348 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800d312:	2b00      	cmp	r3, #0
 800d314:	d022      	beq.n	800d35c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800d316:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d31a:	d115      	bne.n	800d348 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d31c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d320:	3308      	adds	r3, #8
 800d322:	2100      	movs	r1, #0
 800d324:	4618      	mov	r0, r3
 800d326:	f001 fce7 	bl	800ecf8 <RCCEx_PLL2_Config>
 800d32a:	4603      	mov	r3, r0
 800d32c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d330:	e015      	b.n	800d35e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d332:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d336:	3328      	adds	r3, #40	; 0x28
 800d338:	2102      	movs	r1, #2
 800d33a:	4618      	mov	r0, r3
 800d33c:	f001 fd8e 	bl	800ee5c <RCCEx_PLL3_Config>
 800d340:	4603      	mov	r3, r0
 800d342:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d346:	e00a      	b.n	800d35e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d348:	2301      	movs	r3, #1
 800d34a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d34e:	e006      	b.n	800d35e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800d350:	bf00      	nop
 800d352:	e004      	b.n	800d35e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800d354:	bf00      	nop
 800d356:	e002      	b.n	800d35e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800d358:	bf00      	nop
 800d35a:	e000      	b.n	800d35e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800d35c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d35e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d362:	2b00      	cmp	r3, #0
 800d364:	d10b      	bne.n	800d37e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d366:	4b39      	ldr	r3, [pc, #228]	; (800d44c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800d368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d36a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800d36e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d372:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d376:	4a35      	ldr	r2, [pc, #212]	; (800d44c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800d378:	430b      	orrs	r3, r1
 800d37a:	6553      	str	r3, [r2, #84]	; 0x54
 800d37c:	e003      	b.n	800d386 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d37e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d382:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800d386:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d38e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800d392:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d396:	2300      	movs	r3, #0
 800d398:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d39c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800d3a0:	460b      	mov	r3, r1
 800d3a2:	4313      	orrs	r3, r2
 800d3a4:	d058      	beq.n	800d458 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800d3a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d3aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d3ae:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800d3b2:	d033      	beq.n	800d41c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800d3b4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800d3b8:	d82c      	bhi.n	800d414 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800d3ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d3be:	d02f      	beq.n	800d420 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800d3c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d3c4:	d826      	bhi.n	800d414 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800d3c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d3ca:	d02b      	beq.n	800d424 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800d3cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d3d0:	d820      	bhi.n	800d414 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800d3d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d3d6:	d012      	beq.n	800d3fe <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800d3d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d3dc:	d81a      	bhi.n	800d414 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d022      	beq.n	800d428 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800d3e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d3e6:	d115      	bne.n	800d414 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d3e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d3ec:	3308      	adds	r3, #8
 800d3ee:	2100      	movs	r1, #0
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	f001 fc81 	bl	800ecf8 <RCCEx_PLL2_Config>
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d3fc:	e015      	b.n	800d42a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d3fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d402:	3328      	adds	r3, #40	; 0x28
 800d404:	2102      	movs	r1, #2
 800d406:	4618      	mov	r0, r3
 800d408:	f001 fd28 	bl	800ee5c <RCCEx_PLL3_Config>
 800d40c:	4603      	mov	r3, r0
 800d40e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d412:	e00a      	b.n	800d42a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d414:	2301      	movs	r3, #1
 800d416:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d41a:	e006      	b.n	800d42a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800d41c:	bf00      	nop
 800d41e:	e004      	b.n	800d42a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800d420:	bf00      	nop
 800d422:	e002      	b.n	800d42a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800d424:	bf00      	nop
 800d426:	e000      	b.n	800d42a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800d428:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d42a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d10e      	bne.n	800d450 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d432:	4b06      	ldr	r3, [pc, #24]	; (800d44c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800d434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d436:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800d43a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d43e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d442:	4a02      	ldr	r2, [pc, #8]	; (800d44c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800d444:	430b      	orrs	r3, r1
 800d446:	6593      	str	r3, [r2, #88]	; 0x58
 800d448:	e006      	b.n	800d458 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800d44a:	bf00      	nop
 800d44c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d450:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d454:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800d458:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d460:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800d464:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d468:	2300      	movs	r3, #0
 800d46a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d46e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800d472:	460b      	mov	r3, r1
 800d474:	4313      	orrs	r3, r2
 800d476:	d055      	beq.n	800d524 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800d478:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d47c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d480:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800d484:	d033      	beq.n	800d4ee <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800d486:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800d48a:	d82c      	bhi.n	800d4e6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800d48c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d490:	d02f      	beq.n	800d4f2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800d492:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d496:	d826      	bhi.n	800d4e6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800d498:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800d49c:	d02b      	beq.n	800d4f6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800d49e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800d4a2:	d820      	bhi.n	800d4e6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800d4a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d4a8:	d012      	beq.n	800d4d0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800d4aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d4ae:	d81a      	bhi.n	800d4e6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d022      	beq.n	800d4fa <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800d4b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d4b8:	d115      	bne.n	800d4e6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d4ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d4be:	3308      	adds	r3, #8
 800d4c0:	2100      	movs	r1, #0
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	f001 fc18 	bl	800ecf8 <RCCEx_PLL2_Config>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d4ce:	e015      	b.n	800d4fc <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d4d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d4d4:	3328      	adds	r3, #40	; 0x28
 800d4d6:	2102      	movs	r1, #2
 800d4d8:	4618      	mov	r0, r3
 800d4da:	f001 fcbf 	bl	800ee5c <RCCEx_PLL3_Config>
 800d4de:	4603      	mov	r3, r0
 800d4e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d4e4:	e00a      	b.n	800d4fc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d4e6:	2301      	movs	r3, #1
 800d4e8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d4ec:	e006      	b.n	800d4fc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800d4ee:	bf00      	nop
 800d4f0:	e004      	b.n	800d4fc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800d4f2:	bf00      	nop
 800d4f4:	e002      	b.n	800d4fc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800d4f6:	bf00      	nop
 800d4f8:	e000      	b.n	800d4fc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800d4fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d4fc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d500:	2b00      	cmp	r3, #0
 800d502:	d10b      	bne.n	800d51c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800d504:	4ba1      	ldr	r3, [pc, #644]	; (800d78c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d508:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800d50c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d510:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d514:	4a9d      	ldr	r2, [pc, #628]	; (800d78c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d516:	430b      	orrs	r3, r1
 800d518:	6593      	str	r3, [r2, #88]	; 0x58
 800d51a:	e003      	b.n	800d524 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d51c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d520:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800d524:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d52c:	f002 0308 	and.w	r3, r2, #8
 800d530:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d534:	2300      	movs	r3, #0
 800d536:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d53a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800d53e:	460b      	mov	r3, r1
 800d540:	4313      	orrs	r3, r2
 800d542:	d01e      	beq.n	800d582 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800d544:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d548:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d54c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d550:	d10c      	bne.n	800d56c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d552:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d556:	3328      	adds	r3, #40	; 0x28
 800d558:	2102      	movs	r1, #2
 800d55a:	4618      	mov	r0, r3
 800d55c:	f001 fc7e 	bl	800ee5c <RCCEx_PLL3_Config>
 800d560:	4603      	mov	r3, r0
 800d562:	2b00      	cmp	r3, #0
 800d564:	d002      	beq.n	800d56c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800d566:	2301      	movs	r3, #1
 800d568:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800d56c:	4b87      	ldr	r3, [pc, #540]	; (800d78c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d56e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d570:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d574:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d578:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d57c:	4a83      	ldr	r2, [pc, #524]	; (800d78c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d57e:	430b      	orrs	r3, r1
 800d580:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d582:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d58a:	f002 0310 	and.w	r3, r2, #16
 800d58e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d592:	2300      	movs	r3, #0
 800d594:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d598:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800d59c:	460b      	mov	r3, r1
 800d59e:	4313      	orrs	r3, r2
 800d5a0:	d01e      	beq.n	800d5e0 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800d5a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d5a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d5aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d5ae:	d10c      	bne.n	800d5ca <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d5b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d5b4:	3328      	adds	r3, #40	; 0x28
 800d5b6:	2102      	movs	r1, #2
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	f001 fc4f 	bl	800ee5c <RCCEx_PLL3_Config>
 800d5be:	4603      	mov	r3, r0
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d002      	beq.n	800d5ca <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800d5c4:	2301      	movs	r3, #1
 800d5c6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d5ca:	4b70      	ldr	r3, [pc, #448]	; (800d78c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d5cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d5ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d5d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d5d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d5da:	4a6c      	ldr	r2, [pc, #432]	; (800d78c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d5dc:	430b      	orrs	r3, r1
 800d5de:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d5e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800d5ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d5f6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800d5fa:	460b      	mov	r3, r1
 800d5fc:	4313      	orrs	r3, r2
 800d5fe:	d03e      	beq.n	800d67e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800d600:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d604:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d608:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d60c:	d022      	beq.n	800d654 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800d60e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d612:	d81b      	bhi.n	800d64c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800d614:	2b00      	cmp	r3, #0
 800d616:	d003      	beq.n	800d620 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800d618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d61c:	d00b      	beq.n	800d636 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800d61e:	e015      	b.n	800d64c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d620:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d624:	3308      	adds	r3, #8
 800d626:	2100      	movs	r1, #0
 800d628:	4618      	mov	r0, r3
 800d62a:	f001 fb65 	bl	800ecf8 <RCCEx_PLL2_Config>
 800d62e:	4603      	mov	r3, r0
 800d630:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d634:	e00f      	b.n	800d656 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d636:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d63a:	3328      	adds	r3, #40	; 0x28
 800d63c:	2102      	movs	r1, #2
 800d63e:	4618      	mov	r0, r3
 800d640:	f001 fc0c 	bl	800ee5c <RCCEx_PLL3_Config>
 800d644:	4603      	mov	r3, r0
 800d646:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d64a:	e004      	b.n	800d656 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d64c:	2301      	movs	r3, #1
 800d64e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d652:	e000      	b.n	800d656 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800d654:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d656:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d10b      	bne.n	800d676 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d65e:	4b4b      	ldr	r3, [pc, #300]	; (800d78c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d662:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800d666:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d66a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d66e:	4a47      	ldr	r2, [pc, #284]	; (800d78c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d670:	430b      	orrs	r3, r1
 800d672:	6593      	str	r3, [r2, #88]	; 0x58
 800d674:	e003      	b.n	800d67e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d676:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d67a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800d67e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d682:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d686:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800d68a:	67bb      	str	r3, [r7, #120]	; 0x78
 800d68c:	2300      	movs	r3, #0
 800d68e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d690:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800d694:	460b      	mov	r3, r1
 800d696:	4313      	orrs	r3, r2
 800d698:	d03b      	beq.n	800d712 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800d69a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d69e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d6a6:	d01f      	beq.n	800d6e8 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800d6a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d6ac:	d818      	bhi.n	800d6e0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800d6ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d6b2:	d003      	beq.n	800d6bc <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800d6b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d6b8:	d007      	beq.n	800d6ca <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800d6ba:	e011      	b.n	800d6e0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d6bc:	4b33      	ldr	r3, [pc, #204]	; (800d78c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d6be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6c0:	4a32      	ldr	r2, [pc, #200]	; (800d78c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d6c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d6c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800d6c8:	e00f      	b.n	800d6ea <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d6ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d6ce:	3328      	adds	r3, #40	; 0x28
 800d6d0:	2101      	movs	r1, #1
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	f001 fbc2 	bl	800ee5c <RCCEx_PLL3_Config>
 800d6d8:	4603      	mov	r3, r0
 800d6da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800d6de:	e004      	b.n	800d6ea <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d6e0:	2301      	movs	r3, #1
 800d6e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d6e6:	e000      	b.n	800d6ea <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800d6e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d6ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d10b      	bne.n	800d70a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d6f2:	4b26      	ldr	r3, [pc, #152]	; (800d78c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d6f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6f6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800d6fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d6fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d702:	4a22      	ldr	r2, [pc, #136]	; (800d78c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d704:	430b      	orrs	r3, r1
 800d706:	6553      	str	r3, [r2, #84]	; 0x54
 800d708:	e003      	b.n	800d712 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d70a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d70e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800d712:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d71a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800d71e:	673b      	str	r3, [r7, #112]	; 0x70
 800d720:	2300      	movs	r3, #0
 800d722:	677b      	str	r3, [r7, #116]	; 0x74
 800d724:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800d728:	460b      	mov	r3, r1
 800d72a:	4313      	orrs	r3, r2
 800d72c:	d034      	beq.n	800d798 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800d72e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d734:	2b00      	cmp	r3, #0
 800d736:	d003      	beq.n	800d740 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800d738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d73c:	d007      	beq.n	800d74e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800d73e:	e011      	b.n	800d764 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d740:	4b12      	ldr	r3, [pc, #72]	; (800d78c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d744:	4a11      	ldr	r2, [pc, #68]	; (800d78c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d746:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d74a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d74c:	e00e      	b.n	800d76c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d74e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d752:	3308      	adds	r3, #8
 800d754:	2102      	movs	r1, #2
 800d756:	4618      	mov	r0, r3
 800d758:	f001 face 	bl	800ecf8 <RCCEx_PLL2_Config>
 800d75c:	4603      	mov	r3, r0
 800d75e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d762:	e003      	b.n	800d76c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800d764:	2301      	movs	r3, #1
 800d766:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d76a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d76c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d770:	2b00      	cmp	r3, #0
 800d772:	d10d      	bne.n	800d790 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800d774:	4b05      	ldr	r3, [pc, #20]	; (800d78c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d778:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d77c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d782:	4a02      	ldr	r2, [pc, #8]	; (800d78c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d784:	430b      	orrs	r3, r1
 800d786:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d788:	e006      	b.n	800d798 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800d78a:	bf00      	nop
 800d78c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d790:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d794:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d798:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7a0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800d7a4:	66bb      	str	r3, [r7, #104]	; 0x68
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d7aa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800d7ae:	460b      	mov	r3, r1
 800d7b0:	4313      	orrs	r3, r2
 800d7b2:	d00c      	beq.n	800d7ce <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d7b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d7b8:	3328      	adds	r3, #40	; 0x28
 800d7ba:	2102      	movs	r1, #2
 800d7bc:	4618      	mov	r0, r3
 800d7be:	f001 fb4d 	bl	800ee5c <RCCEx_PLL3_Config>
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d002      	beq.n	800d7ce <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800d7ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7d6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800d7da:	663b      	str	r3, [r7, #96]	; 0x60
 800d7dc:	2300      	movs	r3, #0
 800d7de:	667b      	str	r3, [r7, #100]	; 0x64
 800d7e0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800d7e4:	460b      	mov	r3, r1
 800d7e6:	4313      	orrs	r3, r2
 800d7e8:	d038      	beq.n	800d85c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800d7ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d7ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d7f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d7f6:	d018      	beq.n	800d82a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800d7f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d7fc:	d811      	bhi.n	800d822 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800d7fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d802:	d014      	beq.n	800d82e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800d804:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d808:	d80b      	bhi.n	800d822 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d011      	beq.n	800d832 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800d80e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d812:	d106      	bne.n	800d822 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d814:	4bc3      	ldr	r3, [pc, #780]	; (800db24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d818:	4ac2      	ldr	r2, [pc, #776]	; (800db24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d81a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d81e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800d820:	e008      	b.n	800d834 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d822:	2301      	movs	r3, #1
 800d824:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d828:	e004      	b.n	800d834 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800d82a:	bf00      	nop
 800d82c:	e002      	b.n	800d834 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800d82e:	bf00      	nop
 800d830:	e000      	b.n	800d834 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800d832:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d834:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d10b      	bne.n	800d854 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d83c:	4bb9      	ldr	r3, [pc, #740]	; (800db24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d83e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d840:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d844:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d84c:	4ab5      	ldr	r2, [pc, #724]	; (800db24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d84e:	430b      	orrs	r3, r1
 800d850:	6553      	str	r3, [r2, #84]	; 0x54
 800d852:	e003      	b.n	800d85c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d854:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d858:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d85c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d860:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d864:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800d868:	65bb      	str	r3, [r7, #88]	; 0x58
 800d86a:	2300      	movs	r3, #0
 800d86c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d86e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800d872:	460b      	mov	r3, r1
 800d874:	4313      	orrs	r3, r2
 800d876:	d009      	beq.n	800d88c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d878:	4baa      	ldr	r3, [pc, #680]	; (800db24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d87a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d87c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d880:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d884:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d886:	4aa7      	ldr	r2, [pc, #668]	; (800db24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d888:	430b      	orrs	r3, r1
 800d88a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d88c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d894:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800d898:	653b      	str	r3, [r7, #80]	; 0x50
 800d89a:	2300      	movs	r3, #0
 800d89c:	657b      	str	r3, [r7, #84]	; 0x54
 800d89e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800d8a2:	460b      	mov	r3, r1
 800d8a4:	4313      	orrs	r3, r2
 800d8a6:	d009      	beq.n	800d8bc <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d8a8:	4b9e      	ldr	r3, [pc, #632]	; (800db24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d8aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8ac:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800d8b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d8b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8b6:	4a9b      	ldr	r2, [pc, #620]	; (800db24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d8b8:	430b      	orrs	r3, r1
 800d8ba:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800d8bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8c4:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800d8c8:	64bb      	str	r3, [r7, #72]	; 0x48
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d8ce:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800d8d2:	460b      	mov	r3, r1
 800d8d4:	4313      	orrs	r3, r2
 800d8d6:	d009      	beq.n	800d8ec <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800d8d8:	4b92      	ldr	r3, [pc, #584]	; (800db24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d8da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d8dc:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 800d8e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d8e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8e6:	4a8f      	ldr	r2, [pc, #572]	; (800db24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d8e8:	430b      	orrs	r3, r1
 800d8ea:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800d8ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8f4:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800d8f8:	643b      	str	r3, [r7, #64]	; 0x40
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	647b      	str	r3, [r7, #68]	; 0x44
 800d8fe:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800d902:	460b      	mov	r3, r1
 800d904:	4313      	orrs	r3, r2
 800d906:	d00e      	beq.n	800d926 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d908:	4b86      	ldr	r3, [pc, #536]	; (800db24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d90a:	691b      	ldr	r3, [r3, #16]
 800d90c:	4a85      	ldr	r2, [pc, #532]	; (800db24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d90e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d912:	6113      	str	r3, [r2, #16]
 800d914:	4b83      	ldr	r3, [pc, #524]	; (800db24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d916:	6919      	ldr	r1, [r3, #16]
 800d918:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d91c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800d920:	4a80      	ldr	r2, [pc, #512]	; (800db24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d922:	430b      	orrs	r3, r1
 800d924:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800d926:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d92e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800d932:	63bb      	str	r3, [r7, #56]	; 0x38
 800d934:	2300      	movs	r3, #0
 800d936:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d938:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800d93c:	460b      	mov	r3, r1
 800d93e:	4313      	orrs	r3, r2
 800d940:	d009      	beq.n	800d956 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800d942:	4b78      	ldr	r3, [pc, #480]	; (800db24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d946:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800d94a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d94e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d950:	4a74      	ldr	r2, [pc, #464]	; (800db24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d952:	430b      	orrs	r3, r1
 800d954:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d956:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d95e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800d962:	633b      	str	r3, [r7, #48]	; 0x30
 800d964:	2300      	movs	r3, #0
 800d966:	637b      	str	r3, [r7, #52]	; 0x34
 800d968:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800d96c:	460b      	mov	r3, r1
 800d96e:	4313      	orrs	r3, r2
 800d970:	d00a      	beq.n	800d988 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d972:	4b6c      	ldr	r3, [pc, #432]	; (800db24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d976:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800d97a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d97e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d982:	4a68      	ldr	r2, [pc, #416]	; (800db24 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d984:	430b      	orrs	r3, r1
 800d986:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800d988:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d990:	2100      	movs	r1, #0
 800d992:	62b9      	str	r1, [r7, #40]	; 0x28
 800d994:	f003 0301 	and.w	r3, r3, #1
 800d998:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d99a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800d99e:	460b      	mov	r3, r1
 800d9a0:	4313      	orrs	r3, r2
 800d9a2:	d011      	beq.n	800d9c8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d9a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d9a8:	3308      	adds	r3, #8
 800d9aa:	2100      	movs	r1, #0
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	f001 f9a3 	bl	800ecf8 <RCCEx_PLL2_Config>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800d9b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d003      	beq.n	800d9c8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d9c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d9c4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800d9c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9d0:	2100      	movs	r1, #0
 800d9d2:	6239      	str	r1, [r7, #32]
 800d9d4:	f003 0302 	and.w	r3, r3, #2
 800d9d8:	627b      	str	r3, [r7, #36]	; 0x24
 800d9da:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d9de:	460b      	mov	r3, r1
 800d9e0:	4313      	orrs	r3, r2
 800d9e2:	d011      	beq.n	800da08 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d9e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d9e8:	3308      	adds	r3, #8
 800d9ea:	2101      	movs	r1, #1
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	f001 f983 	bl	800ecf8 <RCCEx_PLL2_Config>
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800d9f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d003      	beq.n	800da08 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800da00:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800da04:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800da08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da10:	2100      	movs	r1, #0
 800da12:	61b9      	str	r1, [r7, #24]
 800da14:	f003 0304 	and.w	r3, r3, #4
 800da18:	61fb      	str	r3, [r7, #28]
 800da1a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800da1e:	460b      	mov	r3, r1
 800da20:	4313      	orrs	r3, r2
 800da22:	d011      	beq.n	800da48 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800da24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da28:	3308      	adds	r3, #8
 800da2a:	2102      	movs	r1, #2
 800da2c:	4618      	mov	r0, r3
 800da2e:	f001 f963 	bl	800ecf8 <RCCEx_PLL2_Config>
 800da32:	4603      	mov	r3, r0
 800da34:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800da38:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d003      	beq.n	800da48 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800da40:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800da44:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800da48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da50:	2100      	movs	r1, #0
 800da52:	6139      	str	r1, [r7, #16]
 800da54:	f003 0308 	and.w	r3, r3, #8
 800da58:	617b      	str	r3, [r7, #20]
 800da5a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800da5e:	460b      	mov	r3, r1
 800da60:	4313      	orrs	r3, r2
 800da62:	d011      	beq.n	800da88 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800da64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da68:	3328      	adds	r3, #40	; 0x28
 800da6a:	2100      	movs	r1, #0
 800da6c:	4618      	mov	r0, r3
 800da6e:	f001 f9f5 	bl	800ee5c <RCCEx_PLL3_Config>
 800da72:	4603      	mov	r3, r0
 800da74:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 800da78:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d003      	beq.n	800da88 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800da80:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800da84:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800da88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da90:	2100      	movs	r1, #0
 800da92:	60b9      	str	r1, [r7, #8]
 800da94:	f003 0310 	and.w	r3, r3, #16
 800da98:	60fb      	str	r3, [r7, #12]
 800da9a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800da9e:	460b      	mov	r3, r1
 800daa0:	4313      	orrs	r3, r2
 800daa2:	d011      	beq.n	800dac8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800daa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800daa8:	3328      	adds	r3, #40	; 0x28
 800daaa:	2101      	movs	r1, #1
 800daac:	4618      	mov	r0, r3
 800daae:	f001 f9d5 	bl	800ee5c <RCCEx_PLL3_Config>
 800dab2:	4603      	mov	r3, r0
 800dab4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800dab8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d003      	beq.n	800dac8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dac0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800dac4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800dac8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dad0:	2100      	movs	r1, #0
 800dad2:	6039      	str	r1, [r7, #0]
 800dad4:	f003 0320 	and.w	r3, r3, #32
 800dad8:	607b      	str	r3, [r7, #4]
 800dada:	e9d7 1200 	ldrd	r1, r2, [r7]
 800dade:	460b      	mov	r3, r1
 800dae0:	4313      	orrs	r3, r2
 800dae2:	d011      	beq.n	800db08 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800dae4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dae8:	3328      	adds	r3, #40	; 0x28
 800daea:	2102      	movs	r1, #2
 800daec:	4618      	mov	r0, r3
 800daee:	f001 f9b5 	bl	800ee5c <RCCEx_PLL3_Config>
 800daf2:	4603      	mov	r3, r0
 800daf4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800daf8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d003      	beq.n	800db08 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800db00:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800db04:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 800db08:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d101      	bne.n	800db14 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800db10:	2300      	movs	r3, #0
 800db12:	e000      	b.n	800db16 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800db14:	2301      	movs	r3, #1
}
 800db16:	4618      	mov	r0, r3
 800db18:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800db1c:	46bd      	mov	sp, r7
 800db1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800db22:	bf00      	nop
 800db24:	58024400 	.word	0x58024400

0800db28 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b090      	sub	sp, #64	; 0x40
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800db32:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db36:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800db3a:	430b      	orrs	r3, r1
 800db3c:	f040 8094 	bne.w	800dc68 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800db40:	4b97      	ldr	r3, [pc, #604]	; (800dda0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800db42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db44:	f003 0307 	and.w	r3, r3, #7
 800db48:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800db4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db4c:	2b04      	cmp	r3, #4
 800db4e:	f200 8087 	bhi.w	800dc60 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800db52:	a201      	add	r2, pc, #4	; (adr r2, 800db58 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800db54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db58:	0800db6d 	.word	0x0800db6d
 800db5c:	0800db95 	.word	0x0800db95
 800db60:	0800dbbd 	.word	0x0800dbbd
 800db64:	0800dc59 	.word	0x0800dc59
 800db68:	0800dbe5 	.word	0x0800dbe5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800db6c:	4b8c      	ldr	r3, [pc, #560]	; (800dda0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800db74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800db78:	d108      	bne.n	800db8c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800db7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800db7e:	4618      	mov	r0, r3
 800db80:	f000 ff68 	bl	800ea54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800db84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800db88:	f000 bc97 	b.w	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800db8c:	2300      	movs	r3, #0
 800db8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db90:	f000 bc93 	b.w	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800db94:	4b82      	ldr	r3, [pc, #520]	; (800dda0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800db9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dba0:	d108      	bne.n	800dbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dba2:	f107 0318 	add.w	r3, r7, #24
 800dba6:	4618      	mov	r0, r3
 800dba8:	f000 fcac 	bl	800e504 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800dbac:	69bb      	ldr	r3, [r7, #24]
 800dbae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dbb0:	f000 bc83 	b.w	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dbb8:	f000 bc7f 	b.w	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800dbbc:	4b78      	ldr	r3, [pc, #480]	; (800dda0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dbc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dbc8:	d108      	bne.n	800dbdc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dbca:	f107 030c 	add.w	r3, r7, #12
 800dbce:	4618      	mov	r0, r3
 800dbd0:	f000 fdec 	bl	800e7ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dbd8:	f000 bc6f 	b.w	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800dbdc:	2300      	movs	r3, #0
 800dbde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dbe0:	f000 bc6b 	b.w	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800dbe4:	4b6e      	ldr	r3, [pc, #440]	; (800dda0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dbe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbe8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800dbec:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800dbee:	4b6c      	ldr	r3, [pc, #432]	; (800dda0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	f003 0304 	and.w	r3, r3, #4
 800dbf6:	2b04      	cmp	r3, #4
 800dbf8:	d10c      	bne.n	800dc14 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800dbfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d109      	bne.n	800dc14 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dc00:	4b67      	ldr	r3, [pc, #412]	; (800dda0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	08db      	lsrs	r3, r3, #3
 800dc06:	f003 0303 	and.w	r3, r3, #3
 800dc0a:	4a66      	ldr	r2, [pc, #408]	; (800dda4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800dc0c:	fa22 f303 	lsr.w	r3, r2, r3
 800dc10:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dc12:	e01f      	b.n	800dc54 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800dc14:	4b62      	ldr	r3, [pc, #392]	; (800dda0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dc20:	d106      	bne.n	800dc30 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800dc22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dc28:	d102      	bne.n	800dc30 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800dc2a:	4b5f      	ldr	r3, [pc, #380]	; (800dda8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800dc2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dc2e:	e011      	b.n	800dc54 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800dc30:	4b5b      	ldr	r3, [pc, #364]	; (800dda0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dc38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dc3c:	d106      	bne.n	800dc4c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800dc3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dc44:	d102      	bne.n	800dc4c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800dc46:	4b59      	ldr	r3, [pc, #356]	; (800ddac <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800dc48:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dc4a:	e003      	b.n	800dc54 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800dc50:	f000 bc33 	b.w	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800dc54:	f000 bc31 	b.w	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800dc58:	4b55      	ldr	r3, [pc, #340]	; (800ddb0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800dc5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc5c:	f000 bc2d 	b.w	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800dc60:	2300      	movs	r3, #0
 800dc62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc64:	f000 bc29 	b.w	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 800dc68:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc6c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800dc70:	430b      	orrs	r3, r1
 800dc72:	f040 809f 	bne.w	800ddb4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 800dc76:	4b4a      	ldr	r3, [pc, #296]	; (800dda0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dc78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc7a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800dc7e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800dc80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dc86:	d04d      	beq.n	800dd24 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800dc88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dc8e:	f200 8084 	bhi.w	800dd9a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800dc92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc94:	2bc0      	cmp	r3, #192	; 0xc0
 800dc96:	d07d      	beq.n	800dd94 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 800dc98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc9a:	2bc0      	cmp	r3, #192	; 0xc0
 800dc9c:	d87d      	bhi.n	800dd9a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800dc9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dca0:	2b80      	cmp	r3, #128	; 0x80
 800dca2:	d02d      	beq.n	800dd00 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 800dca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dca6:	2b80      	cmp	r3, #128	; 0x80
 800dca8:	d877      	bhi.n	800dd9a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800dcaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d003      	beq.n	800dcb8 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 800dcb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcb2:	2b40      	cmp	r3, #64	; 0x40
 800dcb4:	d012      	beq.n	800dcdc <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800dcb6:	e070      	b.n	800dd9a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800dcb8:	4b39      	ldr	r3, [pc, #228]	; (800dda0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dcc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dcc4:	d107      	bne.n	800dcd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dcc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dcca:	4618      	mov	r0, r3
 800dccc:	f000 fec2 	bl	800ea54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800dcd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dcd4:	e3f1      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dcda:	e3ee      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800dcdc:	4b30      	ldr	r3, [pc, #192]	; (800dda0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dce4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dce8:	d107      	bne.n	800dcfa <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dcea:	f107 0318 	add.w	r3, r7, #24
 800dcee:	4618      	mov	r0, r3
 800dcf0:	f000 fc08 	bl	800e504 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800dcf4:	69bb      	ldr	r3, [r7, #24]
 800dcf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dcf8:	e3df      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dcfe:	e3dc      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800dd00:	4b27      	ldr	r3, [pc, #156]	; (800dda0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dd08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dd0c:	d107      	bne.n	800dd1e <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dd0e:	f107 030c 	add.w	r3, r7, #12
 800dd12:	4618      	mov	r0, r3
 800dd14:	f000 fd4a 	bl	800e7ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dd1c:	e3cd      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800dd1e:	2300      	movs	r3, #0
 800dd20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd22:	e3ca      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800dd24:	4b1e      	ldr	r3, [pc, #120]	; (800dda0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dd26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800dd2c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800dd2e:	4b1c      	ldr	r3, [pc, #112]	; (800dda0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	f003 0304 	and.w	r3, r3, #4
 800dd36:	2b04      	cmp	r3, #4
 800dd38:	d10c      	bne.n	800dd54 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 800dd3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d109      	bne.n	800dd54 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dd40:	4b17      	ldr	r3, [pc, #92]	; (800dda0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	08db      	lsrs	r3, r3, #3
 800dd46:	f003 0303 	and.w	r3, r3, #3
 800dd4a:	4a16      	ldr	r2, [pc, #88]	; (800dda4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800dd4c:	fa22 f303 	lsr.w	r3, r2, r3
 800dd50:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dd52:	e01e      	b.n	800dd92 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800dd54:	4b12      	ldr	r3, [pc, #72]	; (800dda0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd60:	d106      	bne.n	800dd70 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 800dd62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dd68:	d102      	bne.n	800dd70 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800dd6a:	4b0f      	ldr	r3, [pc, #60]	; (800dda8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800dd6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dd6e:	e010      	b.n	800dd92 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800dd70:	4b0b      	ldr	r3, [pc, #44]	; (800dda0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dd78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dd7c:	d106      	bne.n	800dd8c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800dd7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dd84:	d102      	bne.n	800dd8c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800dd86:	4b09      	ldr	r3, [pc, #36]	; (800ddac <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800dd88:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dd8a:	e002      	b.n	800dd92 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800dd90:	e393      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800dd92:	e392      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800dd94:	4b06      	ldr	r3, [pc, #24]	; (800ddb0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800dd96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd98:	e38f      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd9e:	e38c      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800dda0:	58024400 	.word	0x58024400
 800dda4:	03d09000 	.word	0x03d09000
 800dda8:	003d0900 	.word	0x003d0900
 800ddac:	016e3600 	.word	0x016e3600
 800ddb0:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 800ddb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ddb8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800ddbc:	430b      	orrs	r3, r1
 800ddbe:	f040 809c 	bne.w	800defa <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 800ddc2:	4b9e      	ldr	r3, [pc, #632]	; (800e03c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ddc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ddc6:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800ddca:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ddcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ddd2:	d054      	beq.n	800de7e <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 800ddd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ddda:	f200 808b 	bhi.w	800def4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800ddde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dde0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800dde4:	f000 8083 	beq.w	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 800dde8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddea:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ddee:	f200 8081 	bhi.w	800def4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800ddf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ddf8:	d02f      	beq.n	800de5a <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800ddfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800de00:	d878      	bhi.n	800def4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800de02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de04:	2b00      	cmp	r3, #0
 800de06:	d004      	beq.n	800de12 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 800de08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de0e:	d012      	beq.n	800de36 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 800de10:	e070      	b.n	800def4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800de12:	4b8a      	ldr	r3, [pc, #552]	; (800e03c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800de1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800de1e:	d107      	bne.n	800de30 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800de20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800de24:	4618      	mov	r0, r3
 800de26:	f000 fe15 	bl	800ea54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800de2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800de2e:	e344      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800de30:	2300      	movs	r3, #0
 800de32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de34:	e341      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800de36:	4b81      	ldr	r3, [pc, #516]	; (800e03c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800de3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800de42:	d107      	bne.n	800de54 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800de44:	f107 0318 	add.w	r3, r7, #24
 800de48:	4618      	mov	r0, r3
 800de4a:	f000 fb5b 	bl	800e504 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800de4e:	69bb      	ldr	r3, [r7, #24]
 800de50:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800de52:	e332      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800de54:	2300      	movs	r3, #0
 800de56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de58:	e32f      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800de5a:	4b78      	ldr	r3, [pc, #480]	; (800e03c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800de62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800de66:	d107      	bne.n	800de78 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800de68:	f107 030c 	add.w	r3, r7, #12
 800de6c:	4618      	mov	r0, r3
 800de6e:	f000 fc9d 	bl	800e7ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800de76:	e320      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800de78:	2300      	movs	r3, #0
 800de7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de7c:	e31d      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800de7e:	4b6f      	ldr	r3, [pc, #444]	; (800e03c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800de80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800de86:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800de88:	4b6c      	ldr	r3, [pc, #432]	; (800e03c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	f003 0304 	and.w	r3, r3, #4
 800de90:	2b04      	cmp	r3, #4
 800de92:	d10c      	bne.n	800deae <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 800de94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de96:	2b00      	cmp	r3, #0
 800de98:	d109      	bne.n	800deae <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800de9a:	4b68      	ldr	r3, [pc, #416]	; (800e03c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	08db      	lsrs	r3, r3, #3
 800dea0:	f003 0303 	and.w	r3, r3, #3
 800dea4:	4a66      	ldr	r2, [pc, #408]	; (800e040 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800dea6:	fa22 f303 	lsr.w	r3, r2, r3
 800deaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800deac:	e01e      	b.n	800deec <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800deae:	4b63      	ldr	r3, [pc, #396]	; (800e03c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800deb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800deba:	d106      	bne.n	800deca <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800debc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800debe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dec2:	d102      	bne.n	800deca <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800dec4:	4b5f      	ldr	r3, [pc, #380]	; (800e044 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800dec6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dec8:	e010      	b.n	800deec <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800deca:	4b5c      	ldr	r3, [pc, #368]	; (800e03c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ded2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ded6:	d106      	bne.n	800dee6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800ded8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800deda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dede:	d102      	bne.n	800dee6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800dee0:	4b59      	ldr	r3, [pc, #356]	; (800e048 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800dee2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dee4:	e002      	b.n	800deec <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800dee6:	2300      	movs	r3, #0
 800dee8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 800deea:	e2e6      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800deec:	e2e5      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800deee:	4b57      	ldr	r3, [pc, #348]	; (800e04c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800def0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800def2:	e2e2      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800def4:	2300      	movs	r3, #0
 800def6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800def8:	e2df      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800defa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800defe:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800df02:	430b      	orrs	r3, r1
 800df04:	f040 80a7 	bne.w	800e056 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800df08:	4b4c      	ldr	r3, [pc, #304]	; (800e03c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800df0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df0c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800df10:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800df12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800df18:	d055      	beq.n	800dfc6 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 800df1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800df20:	f200 8096 	bhi.w	800e050 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800df24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df26:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800df2a:	f000 8084 	beq.w	800e036 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 800df2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df30:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800df34:	f200 808c 	bhi.w	800e050 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800df38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800df3e:	d030      	beq.n	800dfa2 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 800df40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800df46:	f200 8083 	bhi.w	800e050 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800df4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d004      	beq.n	800df5a <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800df50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800df56:	d012      	beq.n	800df7e <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 800df58:	e07a      	b.n	800e050 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800df5a:	4b38      	ldr	r3, [pc, #224]	; (800e03c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800df62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800df66:	d107      	bne.n	800df78 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800df68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800df6c:	4618      	mov	r0, r3
 800df6e:	f000 fd71 	bl	800ea54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800df72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800df76:	e2a0      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800df78:	2300      	movs	r3, #0
 800df7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df7c:	e29d      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800df7e:	4b2f      	ldr	r3, [pc, #188]	; (800e03c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800df86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800df8a:	d107      	bne.n	800df9c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800df8c:	f107 0318 	add.w	r3, r7, #24
 800df90:	4618      	mov	r0, r3
 800df92:	f000 fab7 	bl	800e504 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800df96:	69bb      	ldr	r3, [r7, #24]
 800df98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800df9a:	e28e      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800df9c:	2300      	movs	r3, #0
 800df9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dfa0:	e28b      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800dfa2:	4b26      	ldr	r3, [pc, #152]	; (800e03c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dfaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dfae:	d107      	bne.n	800dfc0 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dfb0:	f107 030c 	add.w	r3, r7, #12
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f000 fbf9 	bl	800e7ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dfbe:	e27c      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dfc4:	e279      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800dfc6:	4b1d      	ldr	r3, [pc, #116]	; (800e03c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800dfc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dfca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800dfce:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800dfd0:	4b1a      	ldr	r3, [pc, #104]	; (800e03c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	f003 0304 	and.w	r3, r3, #4
 800dfd8:	2b04      	cmp	r3, #4
 800dfda:	d10c      	bne.n	800dff6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 800dfdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d109      	bne.n	800dff6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dfe2:	4b16      	ldr	r3, [pc, #88]	; (800e03c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	08db      	lsrs	r3, r3, #3
 800dfe8:	f003 0303 	and.w	r3, r3, #3
 800dfec:	4a14      	ldr	r2, [pc, #80]	; (800e040 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800dfee:	fa22 f303 	lsr.w	r3, r2, r3
 800dff2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dff4:	e01e      	b.n	800e034 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800dff6:	4b11      	ldr	r3, [pc, #68]	; (800e03c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dffe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e002:	d106      	bne.n	800e012 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800e004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e006:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e00a:	d102      	bne.n	800e012 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e00c:	4b0d      	ldr	r3, [pc, #52]	; (800e044 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800e00e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e010:	e010      	b.n	800e034 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e012:	4b0a      	ldr	r3, [pc, #40]	; (800e03c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e01a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e01e:	d106      	bne.n	800e02e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800e020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e022:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e026:	d102      	bne.n	800e02e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e028:	4b07      	ldr	r3, [pc, #28]	; (800e048 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800e02a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e02c:	e002      	b.n	800e034 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e02e:	2300      	movs	r3, #0
 800e030:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e032:	e242      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800e034:	e241      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e036:	4b05      	ldr	r3, [pc, #20]	; (800e04c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800e038:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e03a:	e23e      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800e03c:	58024400 	.word	0x58024400
 800e040:	03d09000 	.word	0x03d09000
 800e044:	003d0900 	.word	0x003d0900
 800e048:	016e3600 	.word	0x016e3600
 800e04c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800e050:	2300      	movs	r3, #0
 800e052:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e054:	e231      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800e056:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e05a:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800e05e:	430b      	orrs	r3, r1
 800e060:	f040 8085 	bne.w	800e16e <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800e064:	4b9c      	ldr	r3, [pc, #624]	; (800e2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e068:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800e06c:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800e06e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e070:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e074:	d06b      	beq.n	800e14e <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800e076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e078:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e07c:	d874      	bhi.n	800e168 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800e07e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e080:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e084:	d056      	beq.n	800e134 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 800e086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e088:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e08c:	d86c      	bhi.n	800e168 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800e08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e090:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e094:	d03b      	beq.n	800e10e <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 800e096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e098:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e09c:	d864      	bhi.n	800e168 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800e09e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e0a4:	d021      	beq.n	800e0ea <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 800e0a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e0ac:	d85c      	bhi.n	800e168 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800e0ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d004      	beq.n	800e0be <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 800e0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e0ba:	d004      	beq.n	800e0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 800e0bc:	e054      	b.n	800e168 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800e0be:	f7fe fb5f 	bl	800c780 <HAL_RCC_GetPCLK1Freq>
 800e0c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e0c4:	e1f9      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e0c6:	4b84      	ldr	r3, [pc, #528]	; (800e2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e0ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e0d2:	d107      	bne.n	800e0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e0d4:	f107 0318 	add.w	r3, r7, #24
 800e0d8:	4618      	mov	r0, r3
 800e0da:	f000 fa13 	bl	800e504 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e0de:	69fb      	ldr	r3, [r7, #28]
 800e0e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e0e2:	e1ea      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0e8:	e1e7      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e0ea:	4b7b      	ldr	r3, [pc, #492]	; (800e2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e0f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e0f6:	d107      	bne.n	800e108 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e0f8:	f107 030c 	add.w	r3, r7, #12
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f000 fb55 	bl	800e7ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e102:	693b      	ldr	r3, [r7, #16]
 800e104:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e106:	e1d8      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800e108:	2300      	movs	r3, #0
 800e10a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e10c:	e1d5      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e10e:	4b72      	ldr	r3, [pc, #456]	; (800e2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	f003 0304 	and.w	r3, r3, #4
 800e116:	2b04      	cmp	r3, #4
 800e118:	d109      	bne.n	800e12e <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e11a:	4b6f      	ldr	r3, [pc, #444]	; (800e2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	08db      	lsrs	r3, r3, #3
 800e120:	f003 0303 	and.w	r3, r3, #3
 800e124:	4a6d      	ldr	r2, [pc, #436]	; (800e2dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800e126:	fa22 f303 	lsr.w	r3, r2, r3
 800e12a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e12c:	e1c5      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800e12e:	2300      	movs	r3, #0
 800e130:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e132:	e1c2      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800e134:	4b68      	ldr	r3, [pc, #416]	; (800e2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e13c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e140:	d102      	bne.n	800e148 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 800e142:	4b67      	ldr	r3, [pc, #412]	; (800e2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800e144:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e146:	e1b8      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800e148:	2300      	movs	r3, #0
 800e14a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e14c:	e1b5      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e14e:	4b62      	ldr	r3, [pc, #392]	; (800e2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e156:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e15a:	d102      	bne.n	800e162 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 800e15c:	4b61      	ldr	r3, [pc, #388]	; (800e2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800e15e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e160:	e1ab      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800e162:	2300      	movs	r3, #0
 800e164:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e166:	e1a8      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800e168:	2300      	movs	r3, #0
 800e16a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e16c:	e1a5      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800e16e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e172:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800e176:	430b      	orrs	r3, r1
 800e178:	d173      	bne.n	800e262 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800e17a:	4b57      	ldr	r3, [pc, #348]	; (800e2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e17c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e17e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800e182:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e186:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e18a:	d02f      	beq.n	800e1ec <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 800e18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e18e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e192:	d863      	bhi.n	800e25c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800e194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e196:	2b00      	cmp	r3, #0
 800e198:	d004      	beq.n	800e1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800e19a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e19c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e1a0:	d012      	beq.n	800e1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 800e1a2:	e05b      	b.n	800e25c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e1a4:	4b4c      	ldr	r3, [pc, #304]	; (800e2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e1ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e1b0:	d107      	bne.n	800e1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e1b2:	f107 0318 	add.w	r3, r7, #24
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f000 f9a4 	bl	800e504 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e1bc:	69bb      	ldr	r3, [r7, #24]
 800e1be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e1c0:	e17b      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1c6:	e178      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e1c8:	4b43      	ldr	r3, [pc, #268]	; (800e2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e1d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e1d4:	d107      	bne.n	800e1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e1d6:	f107 030c 	add.w	r3, r7, #12
 800e1da:	4618      	mov	r0, r3
 800e1dc:	f000 fae6 	bl	800e7ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800e1e0:	697b      	ldr	r3, [r7, #20]
 800e1e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e1e4:	e169      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1ea:	e166      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e1ec:	4b3a      	ldr	r3, [pc, #232]	; (800e2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e1ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e1f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e1f4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e1f6:	4b38      	ldr	r3, [pc, #224]	; (800e2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	f003 0304 	and.w	r3, r3, #4
 800e1fe:	2b04      	cmp	r3, #4
 800e200:	d10c      	bne.n	800e21c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 800e202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e204:	2b00      	cmp	r3, #0
 800e206:	d109      	bne.n	800e21c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e208:	4b33      	ldr	r3, [pc, #204]	; (800e2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	08db      	lsrs	r3, r3, #3
 800e20e:	f003 0303 	and.w	r3, r3, #3
 800e212:	4a32      	ldr	r2, [pc, #200]	; (800e2dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800e214:	fa22 f303 	lsr.w	r3, r2, r3
 800e218:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e21a:	e01e      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e21c:	4b2e      	ldr	r3, [pc, #184]	; (800e2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e224:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e228:	d106      	bne.n	800e238 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 800e22a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e22c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e230:	d102      	bne.n	800e238 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e232:	4b2b      	ldr	r3, [pc, #172]	; (800e2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800e234:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e236:	e010      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e238:	4b27      	ldr	r3, [pc, #156]	; (800e2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e240:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e244:	d106      	bne.n	800e254 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800e246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e248:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e24c:	d102      	bne.n	800e254 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e24e:	4b25      	ldr	r3, [pc, #148]	; (800e2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800e250:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e252:	e002      	b.n	800e25a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e254:	2300      	movs	r3, #0
 800e256:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e258:	e12f      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800e25a:	e12e      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800e25c:	2300      	movs	r3, #0
 800e25e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e260:	e12b      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800e262:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e266:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800e26a:	430b      	orrs	r3, r1
 800e26c:	d13c      	bne.n	800e2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800e26e:	4b1a      	ldr	r3, [pc, #104]	; (800e2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e276:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d004      	beq.n	800e288 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800e27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e284:	d012      	beq.n	800e2ac <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800e286:	e023      	b.n	800e2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e288:	4b13      	ldr	r3, [pc, #76]	; (800e2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e290:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e294:	d107      	bne.n	800e2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e296:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e29a:	4618      	mov	r0, r3
 800e29c:	f000 fbda 	bl	800ea54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e2a4:	e109      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e2aa:	e106      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e2ac:	4b0a      	ldr	r3, [pc, #40]	; (800e2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e2b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e2b8:	d107      	bne.n	800e2ca <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e2ba:	f107 0318 	add.w	r3, r7, #24
 800e2be:	4618      	mov	r0, r3
 800e2c0:	f000 f920 	bl	800e504 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800e2c4:	6a3b      	ldr	r3, [r7, #32]
 800e2c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e2c8:	e0f7      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e2ce:	e0f4      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e2d4:	e0f1      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800e2d6:	bf00      	nop
 800e2d8:	58024400 	.word	0x58024400
 800e2dc:	03d09000 	.word	0x03d09000
 800e2e0:	003d0900 	.word	0x003d0900
 800e2e4:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800e2e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e2ec:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800e2f0:	430b      	orrs	r3, r1
 800e2f2:	f040 8091 	bne.w	800e418 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800e2f6:	4b73      	ldr	r3, [pc, #460]	; (800e4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800e2f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e2fa:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800e2fe:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e302:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800e306:	f000 8081 	beq.w	800e40c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800e30a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e30c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800e310:	d87f      	bhi.n	800e412 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800e312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e314:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e318:	d06b      	beq.n	800e3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800e31a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e31c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e320:	d877      	bhi.n	800e412 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800e322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e328:	d056      	beq.n	800e3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800e32a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e32c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e330:	d86f      	bhi.n	800e412 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800e332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e334:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e338:	d03b      	beq.n	800e3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800e33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e33c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e340:	d867      	bhi.n	800e412 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800e342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e344:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e348:	d021      	beq.n	800e38e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800e34a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e34c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e350:	d85f      	bhi.n	800e412 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800e352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e354:	2b00      	cmp	r3, #0
 800e356:	d004      	beq.n	800e362 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800e358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e35a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e35e:	d004      	beq.n	800e36a <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800e360:	e057      	b.n	800e412 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800e362:	f000 f8b9 	bl	800e4d8 <HAL_RCCEx_GetD3PCLK1Freq>
 800e366:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e368:	e0a7      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e36a:	4b56      	ldr	r3, [pc, #344]	; (800e4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e372:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e376:	d107      	bne.n	800e388 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e378:	f107 0318 	add.w	r3, r7, #24
 800e37c:	4618      	mov	r0, r3
 800e37e:	f000 f8c1 	bl	800e504 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e382:	69fb      	ldr	r3, [r7, #28]
 800e384:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e386:	e098      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800e388:	2300      	movs	r3, #0
 800e38a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e38c:	e095      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e38e:	4b4d      	ldr	r3, [pc, #308]	; (800e4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e396:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e39a:	d107      	bne.n	800e3ac <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e39c:	f107 030c 	add.w	r3, r7, #12
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	f000 fa03 	bl	800e7ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e3a6:	693b      	ldr	r3, [r7, #16]
 800e3a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e3aa:	e086      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3b0:	e083      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e3b2:	4b44      	ldr	r3, [pc, #272]	; (800e4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	f003 0304 	and.w	r3, r3, #4
 800e3ba:	2b04      	cmp	r3, #4
 800e3bc:	d109      	bne.n	800e3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e3be:	4b41      	ldr	r3, [pc, #260]	; (800e4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	08db      	lsrs	r3, r3, #3
 800e3c4:	f003 0303 	and.w	r3, r3, #3
 800e3c8:	4a3f      	ldr	r2, [pc, #252]	; (800e4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800e3ca:	fa22 f303 	lsr.w	r3, r2, r3
 800e3ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e3d0:	e073      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3d6:	e070      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800e3d8:	4b3a      	ldr	r3, [pc, #232]	; (800e4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e3e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e3e4:	d102      	bne.n	800e3ec <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 800e3e6:	4b39      	ldr	r3, [pc, #228]	; (800e4cc <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 800e3e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e3ea:	e066      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3f0:	e063      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e3f2:	4b34      	ldr	r3, [pc, #208]	; (800e4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e3fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e3fe:	d102      	bne.n	800e406 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 800e400:	4b33      	ldr	r3, [pc, #204]	; (800e4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800e402:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e404:	e059      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800e406:	2300      	movs	r3, #0
 800e408:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e40a:	e056      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e40c:	4b31      	ldr	r3, [pc, #196]	; (800e4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 800e40e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e410:	e053      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800e412:	2300      	movs	r3, #0
 800e414:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e416:	e050      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800e418:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e41c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800e420:	430b      	orrs	r3, r1
 800e422:	d148      	bne.n	800e4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800e424:	4b27      	ldr	r3, [pc, #156]	; (800e4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800e426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e428:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e42c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e42e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e430:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e434:	d02a      	beq.n	800e48c <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800e436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e438:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e43c:	d838      	bhi.n	800e4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800e43e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e440:	2b00      	cmp	r3, #0
 800e442:	d004      	beq.n	800e44e <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 800e444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e446:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e44a:	d00d      	beq.n	800e468 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 800e44c:	e030      	b.n	800e4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e44e:	4b1d      	ldr	r3, [pc, #116]	; (800e4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e456:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e45a:	d102      	bne.n	800e462 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 800e45c:	4b1c      	ldr	r3, [pc, #112]	; (800e4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800e45e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e460:	e02b      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800e462:	2300      	movs	r3, #0
 800e464:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e466:	e028      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e468:	4b16      	ldr	r3, [pc, #88]	; (800e4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e470:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e474:	d107      	bne.n	800e486 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e47a:	4618      	mov	r0, r3
 800e47c:	f000 faea 	bl	800ea54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e482:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e484:	e019      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800e486:	2300      	movs	r3, #0
 800e488:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e48a:	e016      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e48c:	4b0d      	ldr	r3, [pc, #52]	; (800e4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e494:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e498:	d107      	bne.n	800e4aa <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e49a:	f107 0318 	add.w	r3, r7, #24
 800e49e:	4618      	mov	r0, r3
 800e4a0:	f000 f830 	bl	800e504 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e4a4:	69fb      	ldr	r3, [r7, #28]
 800e4a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e4a8:	e007      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e4ae:	e004      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e4b4:	e001      	b.n	800e4ba <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800e4ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e4bc:	4618      	mov	r0, r3
 800e4be:	3740      	adds	r7, #64	; 0x40
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	bd80      	pop	{r7, pc}
 800e4c4:	58024400 	.word	0x58024400
 800e4c8:	03d09000 	.word	0x03d09000
 800e4cc:	003d0900 	.word	0x003d0900
 800e4d0:	016e3600 	.word	0x016e3600
 800e4d4:	00bb8000 	.word	0x00bb8000

0800e4d8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800e4dc:	f7fe f920 	bl	800c720 <HAL_RCC_GetHCLKFreq>
 800e4e0:	4602      	mov	r2, r0
 800e4e2:	4b06      	ldr	r3, [pc, #24]	; (800e4fc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800e4e4:	6a1b      	ldr	r3, [r3, #32]
 800e4e6:	091b      	lsrs	r3, r3, #4
 800e4e8:	f003 0307 	and.w	r3, r3, #7
 800e4ec:	4904      	ldr	r1, [pc, #16]	; (800e500 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800e4ee:	5ccb      	ldrb	r3, [r1, r3]
 800e4f0:	f003 031f 	and.w	r3, r3, #31
 800e4f4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	bd80      	pop	{r7, pc}
 800e4fc:	58024400 	.word	0x58024400
 800e500:	08014520 	.word	0x08014520

0800e504 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800e504:	b480      	push	{r7}
 800e506:	b089      	sub	sp, #36	; 0x24
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e50c:	4ba1      	ldr	r3, [pc, #644]	; (800e794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e50e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e510:	f003 0303 	and.w	r3, r3, #3
 800e514:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800e516:	4b9f      	ldr	r3, [pc, #636]	; (800e794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e51a:	0b1b      	lsrs	r3, r3, #12
 800e51c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e520:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800e522:	4b9c      	ldr	r3, [pc, #624]	; (800e794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e526:	091b      	lsrs	r3, r3, #4
 800e528:	f003 0301 	and.w	r3, r3, #1
 800e52c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800e52e:	4b99      	ldr	r3, [pc, #612]	; (800e794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e532:	08db      	lsrs	r3, r3, #3
 800e534:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e538:	693a      	ldr	r2, [r7, #16]
 800e53a:	fb02 f303 	mul.w	r3, r2, r3
 800e53e:	ee07 3a90 	vmov	s15, r3
 800e542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e546:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800e54a:	697b      	ldr	r3, [r7, #20]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	f000 8111 	beq.w	800e774 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800e552:	69bb      	ldr	r3, [r7, #24]
 800e554:	2b02      	cmp	r3, #2
 800e556:	f000 8083 	beq.w	800e660 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800e55a:	69bb      	ldr	r3, [r7, #24]
 800e55c:	2b02      	cmp	r3, #2
 800e55e:	f200 80a1 	bhi.w	800e6a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800e562:	69bb      	ldr	r3, [r7, #24]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d003      	beq.n	800e570 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800e568:	69bb      	ldr	r3, [r7, #24]
 800e56a:	2b01      	cmp	r3, #1
 800e56c:	d056      	beq.n	800e61c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800e56e:	e099      	b.n	800e6a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e570:	4b88      	ldr	r3, [pc, #544]	; (800e794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	f003 0320 	and.w	r3, r3, #32
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d02d      	beq.n	800e5d8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e57c:	4b85      	ldr	r3, [pc, #532]	; (800e794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	08db      	lsrs	r3, r3, #3
 800e582:	f003 0303 	and.w	r3, r3, #3
 800e586:	4a84      	ldr	r2, [pc, #528]	; (800e798 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800e588:	fa22 f303 	lsr.w	r3, r2, r3
 800e58c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e58e:	68bb      	ldr	r3, [r7, #8]
 800e590:	ee07 3a90 	vmov	s15, r3
 800e594:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e598:	697b      	ldr	r3, [r7, #20]
 800e59a:	ee07 3a90 	vmov	s15, r3
 800e59e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e5a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e5a6:	4b7b      	ldr	r3, [pc, #492]	; (800e794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e5a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e5ae:	ee07 3a90 	vmov	s15, r3
 800e5b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e5b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800e5ba:	eddf 5a78 	vldr	s11, [pc, #480]	; 800e79c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e5be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e5c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e5c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e5ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e5ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e5d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e5d6:	e087      	b.n	800e6e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e5d8:	697b      	ldr	r3, [r7, #20]
 800e5da:	ee07 3a90 	vmov	s15, r3
 800e5de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e5e2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800e7a0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800e5e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e5ea:	4b6a      	ldr	r3, [pc, #424]	; (800e794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e5ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e5f2:	ee07 3a90 	vmov	s15, r3
 800e5f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e5fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800e5fe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800e79c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e60a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e60e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e612:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e616:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e61a:	e065      	b.n	800e6e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e61c:	697b      	ldr	r3, [r7, #20]
 800e61e:	ee07 3a90 	vmov	s15, r3
 800e622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e626:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800e7a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800e62a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e62e:	4b59      	ldr	r3, [pc, #356]	; (800e794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e636:	ee07 3a90 	vmov	s15, r3
 800e63a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e63e:	ed97 6a03 	vldr	s12, [r7, #12]
 800e642:	eddf 5a56 	vldr	s11, [pc, #344]	; 800e79c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e64a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e64e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e65a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e65e:	e043      	b.n	800e6e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e660:	697b      	ldr	r3, [r7, #20]
 800e662:	ee07 3a90 	vmov	s15, r3
 800e666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e66a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800e7a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800e66e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e672:	4b48      	ldr	r3, [pc, #288]	; (800e794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e67a:	ee07 3a90 	vmov	s15, r3
 800e67e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e682:	ed97 6a03 	vldr	s12, [r7, #12]
 800e686:	eddf 5a45 	vldr	s11, [pc, #276]	; 800e79c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e68a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e68e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e692:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e69a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e69e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e6a2:	e021      	b.n	800e6e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e6a4:	697b      	ldr	r3, [r7, #20]
 800e6a6:	ee07 3a90 	vmov	s15, r3
 800e6aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e6ae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800e7a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800e6b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e6b6:	4b37      	ldr	r3, [pc, #220]	; (800e794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e6b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e6be:	ee07 3a90 	vmov	s15, r3
 800e6c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e6c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800e6ca:	eddf 5a34 	vldr	s11, [pc, #208]	; 800e79c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e6ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e6d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e6d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e6da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e6de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e6e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e6e6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800e6e8:	4b2a      	ldr	r3, [pc, #168]	; (800e794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e6ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6ec:	0a5b      	lsrs	r3, r3, #9
 800e6ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e6f2:	ee07 3a90 	vmov	s15, r3
 800e6f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e6fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e6fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e702:	edd7 6a07 	vldr	s13, [r7, #28]
 800e706:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e70a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e70e:	ee17 2a90 	vmov	r2, s15
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800e716:	4b1f      	ldr	r3, [pc, #124]	; (800e794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e71a:	0c1b      	lsrs	r3, r3, #16
 800e71c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e720:	ee07 3a90 	vmov	s15, r3
 800e724:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e728:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e72c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e730:	edd7 6a07 	vldr	s13, [r7, #28]
 800e734:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e738:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e73c:	ee17 2a90 	vmov	r2, s15
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800e744:	4b13      	ldr	r3, [pc, #76]	; (800e794 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e748:	0e1b      	lsrs	r3, r3, #24
 800e74a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e74e:	ee07 3a90 	vmov	s15, r3
 800e752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e756:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e75a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e75e:	edd7 6a07 	vldr	s13, [r7, #28]
 800e762:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e766:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e76a:	ee17 2a90 	vmov	r2, s15
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800e772:	e008      	b.n	800e786 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	2200      	movs	r2, #0
 800e778:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	2200      	movs	r2, #0
 800e77e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	2200      	movs	r2, #0
 800e784:	609a      	str	r2, [r3, #8]
}
 800e786:	bf00      	nop
 800e788:	3724      	adds	r7, #36	; 0x24
 800e78a:	46bd      	mov	sp, r7
 800e78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e790:	4770      	bx	lr
 800e792:	bf00      	nop
 800e794:	58024400 	.word	0x58024400
 800e798:	03d09000 	.word	0x03d09000
 800e79c:	46000000 	.word	0x46000000
 800e7a0:	4c742400 	.word	0x4c742400
 800e7a4:	4a742400 	.word	0x4a742400
 800e7a8:	4bb71b00 	.word	0x4bb71b00

0800e7ac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800e7ac:	b480      	push	{r7}
 800e7ae:	b089      	sub	sp, #36	; 0x24
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e7b4:	4ba1      	ldr	r3, [pc, #644]	; (800ea3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e7b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7b8:	f003 0303 	and.w	r3, r3, #3
 800e7bc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800e7be:	4b9f      	ldr	r3, [pc, #636]	; (800ea3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e7c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7c2:	0d1b      	lsrs	r3, r3, #20
 800e7c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e7c8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800e7ca:	4b9c      	ldr	r3, [pc, #624]	; (800ea3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e7cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7ce:	0a1b      	lsrs	r3, r3, #8
 800e7d0:	f003 0301 	and.w	r3, r3, #1
 800e7d4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800e7d6:	4b99      	ldr	r3, [pc, #612]	; (800ea3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e7d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7da:	08db      	lsrs	r3, r3, #3
 800e7dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e7e0:	693a      	ldr	r2, [r7, #16]
 800e7e2:	fb02 f303 	mul.w	r3, r2, r3
 800e7e6:	ee07 3a90 	vmov	s15, r3
 800e7ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e7ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800e7f2:	697b      	ldr	r3, [r7, #20]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	f000 8111 	beq.w	800ea1c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800e7fa:	69bb      	ldr	r3, [r7, #24]
 800e7fc:	2b02      	cmp	r3, #2
 800e7fe:	f000 8083 	beq.w	800e908 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800e802:	69bb      	ldr	r3, [r7, #24]
 800e804:	2b02      	cmp	r3, #2
 800e806:	f200 80a1 	bhi.w	800e94c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800e80a:	69bb      	ldr	r3, [r7, #24]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d003      	beq.n	800e818 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800e810:	69bb      	ldr	r3, [r7, #24]
 800e812:	2b01      	cmp	r3, #1
 800e814:	d056      	beq.n	800e8c4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800e816:	e099      	b.n	800e94c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e818:	4b88      	ldr	r3, [pc, #544]	; (800ea3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	f003 0320 	and.w	r3, r3, #32
 800e820:	2b00      	cmp	r3, #0
 800e822:	d02d      	beq.n	800e880 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e824:	4b85      	ldr	r3, [pc, #532]	; (800ea3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	08db      	lsrs	r3, r3, #3
 800e82a:	f003 0303 	and.w	r3, r3, #3
 800e82e:	4a84      	ldr	r2, [pc, #528]	; (800ea40 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800e830:	fa22 f303 	lsr.w	r3, r2, r3
 800e834:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e836:	68bb      	ldr	r3, [r7, #8]
 800e838:	ee07 3a90 	vmov	s15, r3
 800e83c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e840:	697b      	ldr	r3, [r7, #20]
 800e842:	ee07 3a90 	vmov	s15, r3
 800e846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e84a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e84e:	4b7b      	ldr	r3, [pc, #492]	; (800ea3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e856:	ee07 3a90 	vmov	s15, r3
 800e85a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e85e:	ed97 6a03 	vldr	s12, [r7, #12]
 800e862:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ea44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e86a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e86e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e87a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e87e:	e087      	b.n	800e990 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e880:	697b      	ldr	r3, [r7, #20]
 800e882:	ee07 3a90 	vmov	s15, r3
 800e886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e88a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ea48 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800e88e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e892:	4b6a      	ldr	r3, [pc, #424]	; (800ea3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e89a:	ee07 3a90 	vmov	s15, r3
 800e89e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e8a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800e8a6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ea44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e8aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e8ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e8b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e8b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e8ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e8be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e8c2:	e065      	b.n	800e990 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e8c4:	697b      	ldr	r3, [r7, #20]
 800e8c6:	ee07 3a90 	vmov	s15, r3
 800e8ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e8ce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ea4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800e8d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e8d6:	4b59      	ldr	r3, [pc, #356]	; (800ea3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e8d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8de:	ee07 3a90 	vmov	s15, r3
 800e8e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e8e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800e8ea:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ea44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e8ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e8f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e8f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e8fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e8fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e902:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e906:	e043      	b.n	800e990 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e908:	697b      	ldr	r3, [r7, #20]
 800e90a:	ee07 3a90 	vmov	s15, r3
 800e90e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e912:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ea50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800e916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e91a:	4b48      	ldr	r3, [pc, #288]	; (800ea3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e91c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e91e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e922:	ee07 3a90 	vmov	s15, r3
 800e926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e92a:	ed97 6a03 	vldr	s12, [r7, #12]
 800e92e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ea44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e93a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e93e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e942:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e946:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e94a:	e021      	b.n	800e990 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e94c:	697b      	ldr	r3, [r7, #20]
 800e94e:	ee07 3a90 	vmov	s15, r3
 800e952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e956:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ea4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800e95a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e95e:	4b37      	ldr	r3, [pc, #220]	; (800ea3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e966:	ee07 3a90 	vmov	s15, r3
 800e96a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e96e:	ed97 6a03 	vldr	s12, [r7, #12]
 800e972:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ea44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e97a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e97e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e98a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e98e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800e990:	4b2a      	ldr	r3, [pc, #168]	; (800ea3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e994:	0a5b      	lsrs	r3, r3, #9
 800e996:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e99a:	ee07 3a90 	vmov	s15, r3
 800e99e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e9a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e9a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e9aa:	edd7 6a07 	vldr	s13, [r7, #28]
 800e9ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e9b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e9b6:	ee17 2a90 	vmov	r2, s15
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800e9be:	4b1f      	ldr	r3, [pc, #124]	; (800ea3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e9c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9c2:	0c1b      	lsrs	r3, r3, #16
 800e9c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e9c8:	ee07 3a90 	vmov	s15, r3
 800e9cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e9d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e9d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e9d8:	edd7 6a07 	vldr	s13, [r7, #28]
 800e9dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e9e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e9e4:	ee17 2a90 	vmov	r2, s15
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800e9ec:	4b13      	ldr	r3, [pc, #76]	; (800ea3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e9ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9f0:	0e1b      	lsrs	r3, r3, #24
 800e9f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e9f6:	ee07 3a90 	vmov	s15, r3
 800e9fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e9fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ea02:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ea06:	edd7 6a07 	vldr	s13, [r7, #28]
 800ea0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ea0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ea12:	ee17 2a90 	vmov	r2, s15
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ea1a:	e008      	b.n	800ea2e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	2200      	movs	r2, #0
 800ea20:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	2200      	movs	r2, #0
 800ea26:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	609a      	str	r2, [r3, #8]
}
 800ea2e:	bf00      	nop
 800ea30:	3724      	adds	r7, #36	; 0x24
 800ea32:	46bd      	mov	sp, r7
 800ea34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea38:	4770      	bx	lr
 800ea3a:	bf00      	nop
 800ea3c:	58024400 	.word	0x58024400
 800ea40:	03d09000 	.word	0x03d09000
 800ea44:	46000000 	.word	0x46000000
 800ea48:	4c742400 	.word	0x4c742400
 800ea4c:	4a742400 	.word	0x4a742400
 800ea50:	4bb71b00 	.word	0x4bb71b00

0800ea54 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800ea54:	b480      	push	{r7}
 800ea56:	b089      	sub	sp, #36	; 0x24
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ea5c:	4ba0      	ldr	r3, [pc, #640]	; (800ece0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ea5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea60:	f003 0303 	and.w	r3, r3, #3
 800ea64:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800ea66:	4b9e      	ldr	r3, [pc, #632]	; (800ece0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ea68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea6a:	091b      	lsrs	r3, r3, #4
 800ea6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ea70:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ea72:	4b9b      	ldr	r3, [pc, #620]	; (800ece0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ea74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea76:	f003 0301 	and.w	r3, r3, #1
 800ea7a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ea7c:	4b98      	ldr	r3, [pc, #608]	; (800ece0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ea7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea80:	08db      	lsrs	r3, r3, #3
 800ea82:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ea86:	693a      	ldr	r2, [r7, #16]
 800ea88:	fb02 f303 	mul.w	r3, r2, r3
 800ea8c:	ee07 3a90 	vmov	s15, r3
 800ea90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea94:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ea98:	697b      	ldr	r3, [r7, #20]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	f000 8111 	beq.w	800ecc2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800eaa0:	69bb      	ldr	r3, [r7, #24]
 800eaa2:	2b02      	cmp	r3, #2
 800eaa4:	f000 8083 	beq.w	800ebae <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800eaa8:	69bb      	ldr	r3, [r7, #24]
 800eaaa:	2b02      	cmp	r3, #2
 800eaac:	f200 80a1 	bhi.w	800ebf2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800eab0:	69bb      	ldr	r3, [r7, #24]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d003      	beq.n	800eabe <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800eab6:	69bb      	ldr	r3, [r7, #24]
 800eab8:	2b01      	cmp	r3, #1
 800eaba:	d056      	beq.n	800eb6a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800eabc:	e099      	b.n	800ebf2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eabe:	4b88      	ldr	r3, [pc, #544]	; (800ece0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	f003 0320 	and.w	r3, r3, #32
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d02d      	beq.n	800eb26 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800eaca:	4b85      	ldr	r3, [pc, #532]	; (800ece0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	08db      	lsrs	r3, r3, #3
 800ead0:	f003 0303 	and.w	r3, r3, #3
 800ead4:	4a83      	ldr	r2, [pc, #524]	; (800ece4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800ead6:	fa22 f303 	lsr.w	r3, r2, r3
 800eada:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800eadc:	68bb      	ldr	r3, [r7, #8]
 800eade:	ee07 3a90 	vmov	s15, r3
 800eae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eae6:	697b      	ldr	r3, [r7, #20]
 800eae8:	ee07 3a90 	vmov	s15, r3
 800eaec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eaf0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eaf4:	4b7a      	ldr	r3, [pc, #488]	; (800ece0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800eaf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eaf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eafc:	ee07 3a90 	vmov	s15, r3
 800eb00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eb04:	ed97 6a03 	vldr	s12, [r7, #12]
 800eb08:	eddf 5a77 	vldr	s11, [pc, #476]	; 800ece8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800eb0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800eb10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eb14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eb18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eb1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eb20:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800eb24:	e087      	b.n	800ec36 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800eb26:	697b      	ldr	r3, [r7, #20]
 800eb28:	ee07 3a90 	vmov	s15, r3
 800eb2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eb30:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800ecec <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800eb34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eb38:	4b69      	ldr	r3, [pc, #420]	; (800ece0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800eb3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb40:	ee07 3a90 	vmov	s15, r3
 800eb44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eb48:	ed97 6a03 	vldr	s12, [r7, #12]
 800eb4c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800ece8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800eb50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800eb54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eb58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eb5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eb60:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eb64:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800eb68:	e065      	b.n	800ec36 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800eb6a:	697b      	ldr	r3, [r7, #20]
 800eb6c:	ee07 3a90 	vmov	s15, r3
 800eb70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eb74:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800ecf0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800eb78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eb7c:	4b58      	ldr	r3, [pc, #352]	; (800ece0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800eb7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb84:	ee07 3a90 	vmov	s15, r3
 800eb88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eb8c:	ed97 6a03 	vldr	s12, [r7, #12]
 800eb90:	eddf 5a55 	vldr	s11, [pc, #340]	; 800ece8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800eb94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800eb98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eb9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eba0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eba4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eba8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ebac:	e043      	b.n	800ec36 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ebae:	697b      	ldr	r3, [r7, #20]
 800ebb0:	ee07 3a90 	vmov	s15, r3
 800ebb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ebb8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800ecf4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800ebbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ebc0:	4b47      	ldr	r3, [pc, #284]	; (800ece0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ebc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ebc8:	ee07 3a90 	vmov	s15, r3
 800ebcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ebd0:	ed97 6a03 	vldr	s12, [r7, #12]
 800ebd4:	eddf 5a44 	vldr	s11, [pc, #272]	; 800ece8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ebd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ebdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ebe0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ebe4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ebe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ebec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ebf0:	e021      	b.n	800ec36 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ebf2:	697b      	ldr	r3, [r7, #20]
 800ebf4:	ee07 3a90 	vmov	s15, r3
 800ebf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ebfc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800ecec <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ec00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ec04:	4b36      	ldr	r3, [pc, #216]	; (800ece0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ec06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec0c:	ee07 3a90 	vmov	s15, r3
 800ec10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec14:	ed97 6a03 	vldr	s12, [r7, #12]
 800ec18:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ece8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ec1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ec20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ec24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ec28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ec2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec30:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ec34:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800ec36:	4b2a      	ldr	r3, [pc, #168]	; (800ece0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ec38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec3a:	0a5b      	lsrs	r3, r3, #9
 800ec3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec40:	ee07 3a90 	vmov	s15, r3
 800ec44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ec4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ec50:	edd7 6a07 	vldr	s13, [r7, #28]
 800ec54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ec58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ec5c:	ee17 2a90 	vmov	r2, s15
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800ec64:	4b1e      	ldr	r3, [pc, #120]	; (800ece0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ec66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec68:	0c1b      	lsrs	r3, r3, #16
 800ec6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec6e:	ee07 3a90 	vmov	s15, r3
 800ec72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ec7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ec7e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ec82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ec86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ec8a:	ee17 2a90 	vmov	r2, s15
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800ec92:	4b13      	ldr	r3, [pc, #76]	; (800ece0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ec94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec96:	0e1b      	lsrs	r3, r3, #24
 800ec98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec9c:	ee07 3a90 	vmov	s15, r3
 800eca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eca4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800eca8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ecac:	edd7 6a07 	vldr	s13, [r7, #28]
 800ecb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ecb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ecb8:	ee17 2a90 	vmov	r2, s15
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ecc0:	e008      	b.n	800ecd4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	2200      	movs	r2, #0
 800eccc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	609a      	str	r2, [r3, #8]
}
 800ecd4:	bf00      	nop
 800ecd6:	3724      	adds	r7, #36	; 0x24
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecde:	4770      	bx	lr
 800ece0:	58024400 	.word	0x58024400
 800ece4:	03d09000 	.word	0x03d09000
 800ece8:	46000000 	.word	0x46000000
 800ecec:	4c742400 	.word	0x4c742400
 800ecf0:	4a742400 	.word	0x4a742400
 800ecf4:	4bb71b00 	.word	0x4bb71b00

0800ecf8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b084      	sub	sp, #16
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
 800ed00:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ed02:	2300      	movs	r3, #0
 800ed04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ed06:	4b53      	ldr	r3, [pc, #332]	; (800ee54 <RCCEx_PLL2_Config+0x15c>)
 800ed08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed0a:	f003 0303 	and.w	r3, r3, #3
 800ed0e:	2b03      	cmp	r3, #3
 800ed10:	d101      	bne.n	800ed16 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ed12:	2301      	movs	r3, #1
 800ed14:	e099      	b.n	800ee4a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ed16:	4b4f      	ldr	r3, [pc, #316]	; (800ee54 <RCCEx_PLL2_Config+0x15c>)
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	4a4e      	ldr	r2, [pc, #312]	; (800ee54 <RCCEx_PLL2_Config+0x15c>)
 800ed1c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ed20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ed22:	f7f5 f9e7 	bl	80040f4 <HAL_GetTick>
 800ed26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ed28:	e008      	b.n	800ed3c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ed2a:	f7f5 f9e3 	bl	80040f4 <HAL_GetTick>
 800ed2e:	4602      	mov	r2, r0
 800ed30:	68bb      	ldr	r3, [r7, #8]
 800ed32:	1ad3      	subs	r3, r2, r3
 800ed34:	2b02      	cmp	r3, #2
 800ed36:	d901      	bls.n	800ed3c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ed38:	2303      	movs	r3, #3
 800ed3a:	e086      	b.n	800ee4a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ed3c:	4b45      	ldr	r3, [pc, #276]	; (800ee54 <RCCEx_PLL2_Config+0x15c>)
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d1f0      	bne.n	800ed2a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ed48:	4b42      	ldr	r3, [pc, #264]	; (800ee54 <RCCEx_PLL2_Config+0x15c>)
 800ed4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed4c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	031b      	lsls	r3, r3, #12
 800ed56:	493f      	ldr	r1, [pc, #252]	; (800ee54 <RCCEx_PLL2_Config+0x15c>)
 800ed58:	4313      	orrs	r3, r2
 800ed5a:	628b      	str	r3, [r1, #40]	; 0x28
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	685b      	ldr	r3, [r3, #4]
 800ed60:	3b01      	subs	r3, #1
 800ed62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	689b      	ldr	r3, [r3, #8]
 800ed6a:	3b01      	subs	r3, #1
 800ed6c:	025b      	lsls	r3, r3, #9
 800ed6e:	b29b      	uxth	r3, r3
 800ed70:	431a      	orrs	r2, r3
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	68db      	ldr	r3, [r3, #12]
 800ed76:	3b01      	subs	r3, #1
 800ed78:	041b      	lsls	r3, r3, #16
 800ed7a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ed7e:	431a      	orrs	r2, r3
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	691b      	ldr	r3, [r3, #16]
 800ed84:	3b01      	subs	r3, #1
 800ed86:	061b      	lsls	r3, r3, #24
 800ed88:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ed8c:	4931      	ldr	r1, [pc, #196]	; (800ee54 <RCCEx_PLL2_Config+0x15c>)
 800ed8e:	4313      	orrs	r3, r2
 800ed90:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ed92:	4b30      	ldr	r3, [pc, #192]	; (800ee54 <RCCEx_PLL2_Config+0x15c>)
 800ed94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed96:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	695b      	ldr	r3, [r3, #20]
 800ed9e:	492d      	ldr	r1, [pc, #180]	; (800ee54 <RCCEx_PLL2_Config+0x15c>)
 800eda0:	4313      	orrs	r3, r2
 800eda2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800eda4:	4b2b      	ldr	r3, [pc, #172]	; (800ee54 <RCCEx_PLL2_Config+0x15c>)
 800eda6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eda8:	f023 0220 	bic.w	r2, r3, #32
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	699b      	ldr	r3, [r3, #24]
 800edb0:	4928      	ldr	r1, [pc, #160]	; (800ee54 <RCCEx_PLL2_Config+0x15c>)
 800edb2:	4313      	orrs	r3, r2
 800edb4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800edb6:	4b27      	ldr	r3, [pc, #156]	; (800ee54 <RCCEx_PLL2_Config+0x15c>)
 800edb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edba:	4a26      	ldr	r2, [pc, #152]	; (800ee54 <RCCEx_PLL2_Config+0x15c>)
 800edbc:	f023 0310 	bic.w	r3, r3, #16
 800edc0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800edc2:	4b24      	ldr	r3, [pc, #144]	; (800ee54 <RCCEx_PLL2_Config+0x15c>)
 800edc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800edc6:	4b24      	ldr	r3, [pc, #144]	; (800ee58 <RCCEx_PLL2_Config+0x160>)
 800edc8:	4013      	ands	r3, r2
 800edca:	687a      	ldr	r2, [r7, #4]
 800edcc:	69d2      	ldr	r2, [r2, #28]
 800edce:	00d2      	lsls	r2, r2, #3
 800edd0:	4920      	ldr	r1, [pc, #128]	; (800ee54 <RCCEx_PLL2_Config+0x15c>)
 800edd2:	4313      	orrs	r3, r2
 800edd4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800edd6:	4b1f      	ldr	r3, [pc, #124]	; (800ee54 <RCCEx_PLL2_Config+0x15c>)
 800edd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edda:	4a1e      	ldr	r2, [pc, #120]	; (800ee54 <RCCEx_PLL2_Config+0x15c>)
 800eddc:	f043 0310 	orr.w	r3, r3, #16
 800ede0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d106      	bne.n	800edf6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ede8:	4b1a      	ldr	r3, [pc, #104]	; (800ee54 <RCCEx_PLL2_Config+0x15c>)
 800edea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edec:	4a19      	ldr	r2, [pc, #100]	; (800ee54 <RCCEx_PLL2_Config+0x15c>)
 800edee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800edf2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800edf4:	e00f      	b.n	800ee16 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800edf6:	683b      	ldr	r3, [r7, #0]
 800edf8:	2b01      	cmp	r3, #1
 800edfa:	d106      	bne.n	800ee0a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800edfc:	4b15      	ldr	r3, [pc, #84]	; (800ee54 <RCCEx_PLL2_Config+0x15c>)
 800edfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee00:	4a14      	ldr	r2, [pc, #80]	; (800ee54 <RCCEx_PLL2_Config+0x15c>)
 800ee02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ee06:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ee08:	e005      	b.n	800ee16 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ee0a:	4b12      	ldr	r3, [pc, #72]	; (800ee54 <RCCEx_PLL2_Config+0x15c>)
 800ee0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee0e:	4a11      	ldr	r2, [pc, #68]	; (800ee54 <RCCEx_PLL2_Config+0x15c>)
 800ee10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ee14:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ee16:	4b0f      	ldr	r3, [pc, #60]	; (800ee54 <RCCEx_PLL2_Config+0x15c>)
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	4a0e      	ldr	r2, [pc, #56]	; (800ee54 <RCCEx_PLL2_Config+0x15c>)
 800ee1c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ee20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ee22:	f7f5 f967 	bl	80040f4 <HAL_GetTick>
 800ee26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ee28:	e008      	b.n	800ee3c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ee2a:	f7f5 f963 	bl	80040f4 <HAL_GetTick>
 800ee2e:	4602      	mov	r2, r0
 800ee30:	68bb      	ldr	r3, [r7, #8]
 800ee32:	1ad3      	subs	r3, r2, r3
 800ee34:	2b02      	cmp	r3, #2
 800ee36:	d901      	bls.n	800ee3c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ee38:	2303      	movs	r3, #3
 800ee3a:	e006      	b.n	800ee4a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ee3c:	4b05      	ldr	r3, [pc, #20]	; (800ee54 <RCCEx_PLL2_Config+0x15c>)
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d0f0      	beq.n	800ee2a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ee48:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	3710      	adds	r7, #16
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	bd80      	pop	{r7, pc}
 800ee52:	bf00      	nop
 800ee54:	58024400 	.word	0x58024400
 800ee58:	ffff0007 	.word	0xffff0007

0800ee5c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b084      	sub	sp, #16
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
 800ee64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ee66:	2300      	movs	r3, #0
 800ee68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ee6a:	4b53      	ldr	r3, [pc, #332]	; (800efb8 <RCCEx_PLL3_Config+0x15c>)
 800ee6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee6e:	f003 0303 	and.w	r3, r3, #3
 800ee72:	2b03      	cmp	r3, #3
 800ee74:	d101      	bne.n	800ee7a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ee76:	2301      	movs	r3, #1
 800ee78:	e099      	b.n	800efae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ee7a:	4b4f      	ldr	r3, [pc, #316]	; (800efb8 <RCCEx_PLL3_Config+0x15c>)
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	4a4e      	ldr	r2, [pc, #312]	; (800efb8 <RCCEx_PLL3_Config+0x15c>)
 800ee80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ee84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ee86:	f7f5 f935 	bl	80040f4 <HAL_GetTick>
 800ee8a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ee8c:	e008      	b.n	800eea0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ee8e:	f7f5 f931 	bl	80040f4 <HAL_GetTick>
 800ee92:	4602      	mov	r2, r0
 800ee94:	68bb      	ldr	r3, [r7, #8]
 800ee96:	1ad3      	subs	r3, r2, r3
 800ee98:	2b02      	cmp	r3, #2
 800ee9a:	d901      	bls.n	800eea0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ee9c:	2303      	movs	r3, #3
 800ee9e:	e086      	b.n	800efae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800eea0:	4b45      	ldr	r3, [pc, #276]	; (800efb8 <RCCEx_PLL3_Config+0x15c>)
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d1f0      	bne.n	800ee8e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800eeac:	4b42      	ldr	r3, [pc, #264]	; (800efb8 <RCCEx_PLL3_Config+0x15c>)
 800eeae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eeb0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	051b      	lsls	r3, r3, #20
 800eeba:	493f      	ldr	r1, [pc, #252]	; (800efb8 <RCCEx_PLL3_Config+0x15c>)
 800eebc:	4313      	orrs	r3, r2
 800eebe:	628b      	str	r3, [r1, #40]	; 0x28
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	685b      	ldr	r3, [r3, #4]
 800eec4:	3b01      	subs	r3, #1
 800eec6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	689b      	ldr	r3, [r3, #8]
 800eece:	3b01      	subs	r3, #1
 800eed0:	025b      	lsls	r3, r3, #9
 800eed2:	b29b      	uxth	r3, r3
 800eed4:	431a      	orrs	r2, r3
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	68db      	ldr	r3, [r3, #12]
 800eeda:	3b01      	subs	r3, #1
 800eedc:	041b      	lsls	r3, r3, #16
 800eede:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800eee2:	431a      	orrs	r2, r3
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	691b      	ldr	r3, [r3, #16]
 800eee8:	3b01      	subs	r3, #1
 800eeea:	061b      	lsls	r3, r3, #24
 800eeec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800eef0:	4931      	ldr	r1, [pc, #196]	; (800efb8 <RCCEx_PLL3_Config+0x15c>)
 800eef2:	4313      	orrs	r3, r2
 800eef4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800eef6:	4b30      	ldr	r3, [pc, #192]	; (800efb8 <RCCEx_PLL3_Config+0x15c>)
 800eef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eefa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	695b      	ldr	r3, [r3, #20]
 800ef02:	492d      	ldr	r1, [pc, #180]	; (800efb8 <RCCEx_PLL3_Config+0x15c>)
 800ef04:	4313      	orrs	r3, r2
 800ef06:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ef08:	4b2b      	ldr	r3, [pc, #172]	; (800efb8 <RCCEx_PLL3_Config+0x15c>)
 800ef0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef0c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	699b      	ldr	r3, [r3, #24]
 800ef14:	4928      	ldr	r1, [pc, #160]	; (800efb8 <RCCEx_PLL3_Config+0x15c>)
 800ef16:	4313      	orrs	r3, r2
 800ef18:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ef1a:	4b27      	ldr	r3, [pc, #156]	; (800efb8 <RCCEx_PLL3_Config+0x15c>)
 800ef1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef1e:	4a26      	ldr	r2, [pc, #152]	; (800efb8 <RCCEx_PLL3_Config+0x15c>)
 800ef20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ef24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ef26:	4b24      	ldr	r3, [pc, #144]	; (800efb8 <RCCEx_PLL3_Config+0x15c>)
 800ef28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ef2a:	4b24      	ldr	r3, [pc, #144]	; (800efbc <RCCEx_PLL3_Config+0x160>)
 800ef2c:	4013      	ands	r3, r2
 800ef2e:	687a      	ldr	r2, [r7, #4]
 800ef30:	69d2      	ldr	r2, [r2, #28]
 800ef32:	00d2      	lsls	r2, r2, #3
 800ef34:	4920      	ldr	r1, [pc, #128]	; (800efb8 <RCCEx_PLL3_Config+0x15c>)
 800ef36:	4313      	orrs	r3, r2
 800ef38:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ef3a:	4b1f      	ldr	r3, [pc, #124]	; (800efb8 <RCCEx_PLL3_Config+0x15c>)
 800ef3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef3e:	4a1e      	ldr	r2, [pc, #120]	; (800efb8 <RCCEx_PLL3_Config+0x15c>)
 800ef40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ef44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ef46:	683b      	ldr	r3, [r7, #0]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d106      	bne.n	800ef5a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ef4c:	4b1a      	ldr	r3, [pc, #104]	; (800efb8 <RCCEx_PLL3_Config+0x15c>)
 800ef4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef50:	4a19      	ldr	r2, [pc, #100]	; (800efb8 <RCCEx_PLL3_Config+0x15c>)
 800ef52:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ef56:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ef58:	e00f      	b.n	800ef7a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ef5a:	683b      	ldr	r3, [r7, #0]
 800ef5c:	2b01      	cmp	r3, #1
 800ef5e:	d106      	bne.n	800ef6e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ef60:	4b15      	ldr	r3, [pc, #84]	; (800efb8 <RCCEx_PLL3_Config+0x15c>)
 800ef62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef64:	4a14      	ldr	r2, [pc, #80]	; (800efb8 <RCCEx_PLL3_Config+0x15c>)
 800ef66:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ef6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ef6c:	e005      	b.n	800ef7a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ef6e:	4b12      	ldr	r3, [pc, #72]	; (800efb8 <RCCEx_PLL3_Config+0x15c>)
 800ef70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef72:	4a11      	ldr	r2, [pc, #68]	; (800efb8 <RCCEx_PLL3_Config+0x15c>)
 800ef74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ef78:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ef7a:	4b0f      	ldr	r3, [pc, #60]	; (800efb8 <RCCEx_PLL3_Config+0x15c>)
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	4a0e      	ldr	r2, [pc, #56]	; (800efb8 <RCCEx_PLL3_Config+0x15c>)
 800ef80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ef84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ef86:	f7f5 f8b5 	bl	80040f4 <HAL_GetTick>
 800ef8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ef8c:	e008      	b.n	800efa0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ef8e:	f7f5 f8b1 	bl	80040f4 <HAL_GetTick>
 800ef92:	4602      	mov	r2, r0
 800ef94:	68bb      	ldr	r3, [r7, #8]
 800ef96:	1ad3      	subs	r3, r2, r3
 800ef98:	2b02      	cmp	r3, #2
 800ef9a:	d901      	bls.n	800efa0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ef9c:	2303      	movs	r3, #3
 800ef9e:	e006      	b.n	800efae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800efa0:	4b05      	ldr	r3, [pc, #20]	; (800efb8 <RCCEx_PLL3_Config+0x15c>)
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d0f0      	beq.n	800ef8e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800efac:	7bfb      	ldrb	r3, [r7, #15]
}
 800efae:	4618      	mov	r0, r3
 800efb0:	3710      	adds	r7, #16
 800efb2:	46bd      	mov	sp, r7
 800efb4:	bd80      	pop	{r7, pc}
 800efb6:	bf00      	nop
 800efb8:	58024400 	.word	0x58024400
 800efbc:	ffff0007 	.word	0xffff0007

0800efc0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b084      	sub	sp, #16
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800efc8:	2301      	movs	r3, #1
 800efca:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d074      	beq.n	800f0bc <HAL_RTC_Init+0xfc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800efd8:	b2db      	uxtb	r3, r3
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d106      	bne.n	800efec <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	2200      	movs	r2, #0
 800efe2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800efe6:	6878      	ldr	r0, [r7, #4]
 800efe8:	f7f4 fc82 	bl	80038f0 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	2202      	movs	r2, #2
 800eff0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	68db      	ldr	r3, [r3, #12]
 800effa:	f003 0310 	and.w	r3, r3, #16
 800effe:	2b10      	cmp	r3, #16
 800f000:	d053      	beq.n	800f0aa <HAL_RTC_Init+0xea>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	22ca      	movs	r2, #202	; 0xca
 800f008:	625a      	str	r2, [r3, #36]	; 0x24
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	2253      	movs	r2, #83	; 0x53
 800f010:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800f012:	6878      	ldr	r0, [r7, #4]
 800f014:	f000 fa4e 	bl	800f4b4 <RTC_EnterInitMode>
 800f018:	4603      	mov	r3, r0
 800f01a:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800f01c:	7bfb      	ldrb	r3, [r7, #15]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d124      	bne.n	800f06c <HAL_RTC_Init+0xac>
      {
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	6999      	ldr	r1, [r3, #24]
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	681a      	ldr	r2, [r3, #0]
 800f02c:	4b26      	ldr	r3, [pc, #152]	; (800f0c8 <HAL_RTC_Init+0x108>)
 800f02e:	400b      	ands	r3, r1
 800f030:	6193      	str	r3, [r2, #24]
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	6999      	ldr	r1, [r3, #24]
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	685a      	ldr	r2, [r3, #4]
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	691b      	ldr	r3, [r3, #16]
 800f040:	431a      	orrs	r2, r3
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	699b      	ldr	r3, [r3, #24]
 800f046:	431a      	orrs	r2, r3
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	430a      	orrs	r2, r1
 800f04e:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	689b      	ldr	r3, [r3, #8]
 800f054:	0419      	lsls	r1, r3, #16
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	68da      	ldr	r2, [r3, #12]
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	430a      	orrs	r2, r1
 800f060:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800f062:	6878      	ldr	r0, [r7, #4]
 800f064:	f000 fa5c 	bl	800f520 <RTC_ExitInitMode>
 800f068:	4603      	mov	r3, r0
 800f06a:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800f06c:	7bfb      	ldrb	r3, [r7, #15]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d116      	bne.n	800f0a0 <HAL_RTC_Init+0xe0>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	699a      	ldr	r2, [r3, #24]
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800f080:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	6999      	ldr	r1, [r3, #24]
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	6a1a      	ldr	r2, [r3, #32]
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	69db      	ldr	r3, [r3, #28]
 800f090:	431a      	orrs	r2, r3
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	695b      	ldr	r3, [r3, #20]
 800f096:	431a      	orrs	r2, r3
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	430a      	orrs	r2, r1
 800f09e:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	22ff      	movs	r2, #255	; 0xff
 800f0a6:	625a      	str	r2, [r3, #36]	; 0x24
 800f0a8:	e001      	b.n	800f0ae <HAL_RTC_Init+0xee>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800f0ae:	7bfb      	ldrb	r3, [r7, #15]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d103      	bne.n	800f0bc <HAL_RTC_Init+0xfc>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	2201      	movs	r2, #1
 800f0b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  /* return status */
  return status;
 800f0bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0be:	4618      	mov	r0, r3
 800f0c0:	3710      	adds	r7, #16
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	bd80      	pop	{r7, pc}
 800f0c6:	bf00      	nop
 800f0c8:	fb8fffbf 	.word	0xfb8fffbf

0800f0cc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800f0cc:	b590      	push	{r4, r7, lr}
 800f0ce:	b087      	sub	sp, #28
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	60f8      	str	r0, [r7, #12]
 800f0d4:	60b9      	str	r1, [r7, #8]
 800f0d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f0de:	2b01      	cmp	r3, #1
 800f0e0:	d101      	bne.n	800f0e6 <HAL_RTC_SetTime+0x1a>
 800f0e2:	2302      	movs	r3, #2
 800f0e4:	e089      	b.n	800f1fa <HAL_RTC_SetTime+0x12e>
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	2201      	movs	r2, #1
 800f0ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	2202      	movs	r2, #2
 800f0f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	22ca      	movs	r2, #202	; 0xca
 800f0fc:	625a      	str	r2, [r3, #36]	; 0x24
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	2253      	movs	r2, #83	; 0x53
 800f104:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800f106:	68f8      	ldr	r0, [r7, #12]
 800f108:	f000 f9d4 	bl	800f4b4 <RTC_EnterInitMode>
 800f10c:	4603      	mov	r3, r0
 800f10e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800f110:	7cfb      	ldrb	r3, [r7, #19]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d161      	bne.n	800f1da <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d126      	bne.n	800f16a <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	699b      	ldr	r3, [r3, #24]
 800f122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f126:	2b00      	cmp	r3, #0
 800f128:	d102      	bne.n	800f130 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800f12a:	68bb      	ldr	r3, [r7, #8]
 800f12c:	2200      	movs	r2, #0
 800f12e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800f130:	68bb      	ldr	r3, [r7, #8]
 800f132:	781b      	ldrb	r3, [r3, #0]
 800f134:	4618      	mov	r0, r3
 800f136:	f000 fa31 	bl	800f59c <RTC_ByteToBcd2>
 800f13a:	4603      	mov	r3, r0
 800f13c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800f13e:	68bb      	ldr	r3, [r7, #8]
 800f140:	785b      	ldrb	r3, [r3, #1]
 800f142:	4618      	mov	r0, r3
 800f144:	f000 fa2a 	bl	800f59c <RTC_ByteToBcd2>
 800f148:	4603      	mov	r3, r0
 800f14a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800f14c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800f14e:	68bb      	ldr	r3, [r7, #8]
 800f150:	789b      	ldrb	r3, [r3, #2]
 800f152:	4618      	mov	r0, r3
 800f154:	f000 fa22 	bl	800f59c <RTC_ByteToBcd2>
 800f158:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800f15a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800f15e:	68bb      	ldr	r3, [r7, #8]
 800f160:	78db      	ldrb	r3, [r3, #3]
 800f162:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800f164:	4313      	orrs	r3, r2
 800f166:	617b      	str	r3, [r7, #20]
 800f168:	e018      	b.n	800f19c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	699b      	ldr	r3, [r3, #24]
 800f170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f174:	2b00      	cmp	r3, #0
 800f176:	d102      	bne.n	800f17e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800f178:	68bb      	ldr	r3, [r7, #8]
 800f17a:	2200      	movs	r2, #0
 800f17c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800f17e:	68bb      	ldr	r3, [r7, #8]
 800f180:	781b      	ldrb	r3, [r3, #0]
 800f182:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800f184:	68bb      	ldr	r3, [r7, #8]
 800f186:	785b      	ldrb	r3, [r3, #1]
 800f188:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800f18a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800f18c:	68ba      	ldr	r2, [r7, #8]
 800f18e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800f190:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800f192:	68bb      	ldr	r3, [r7, #8]
 800f194:	78db      	ldrb	r3, [r3, #3]
 800f196:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800f198:	4313      	orrs	r3, r2
 800f19a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	681a      	ldr	r2, [r3, #0]
 800f1a0:	6979      	ldr	r1, [r7, #20]
 800f1a2:	4b18      	ldr	r3, [pc, #96]	; (800f204 <HAL_RTC_SetTime+0x138>)
 800f1a4:	400b      	ands	r3, r1
 800f1a6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	699a      	ldr	r2, [r3, #24]
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f1b6:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	6999      	ldr	r1, [r3, #24]
 800f1be:	68bb      	ldr	r3, [r7, #8]
 800f1c0:	68da      	ldr	r2, [r3, #12]
 800f1c2:	68bb      	ldr	r3, [r7, #8]
 800f1c4:	691b      	ldr	r3, [r3, #16]
 800f1c6:	431a      	orrs	r2, r3
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	430a      	orrs	r2, r1
 800f1ce:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800f1d0:	68f8      	ldr	r0, [r7, #12]
 800f1d2:	f000 f9a5 	bl	800f520 <RTC_ExitInitMode>
 800f1d6:	4603      	mov	r3, r0
 800f1d8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	22ff      	movs	r2, #255	; 0xff
 800f1e0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800f1e2:	7cfb      	ldrb	r3, [r7, #19]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d103      	bne.n	800f1f0 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	2201      	movs	r2, #1
 800f1ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800f1f8:	7cfb      	ldrb	r3, [r7, #19]
}
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	371c      	adds	r7, #28
 800f1fe:	46bd      	mov	sp, r7
 800f200:	bd90      	pop	{r4, r7, pc}
 800f202:	bf00      	nop
 800f204:	007f7f7f 	.word	0x007f7f7f

0800f208 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800f208:	b580      	push	{r7, lr}
 800f20a:	b086      	sub	sp, #24
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	60f8      	str	r0, [r7, #12]
 800f210:	60b9      	str	r1, [r7, #8]
 800f212:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	689a      	ldr	r2, [r3, #8]
 800f21a:	68bb      	ldr	r3, [r7, #8]
 800f21c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	691b      	ldr	r3, [r3, #16]
 800f224:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800f228:	68bb      	ldr	r3, [r7, #8]
 800f22a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	681a      	ldr	r2, [r3, #0]
 800f232:	4b22      	ldr	r3, [pc, #136]	; (800f2bc <HAL_RTC_GetTime+0xb4>)
 800f234:	4013      	ands	r3, r2
 800f236:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800f238:	697b      	ldr	r3, [r7, #20]
 800f23a:	0c1b      	lsrs	r3, r3, #16
 800f23c:	b2db      	uxtb	r3, r3
 800f23e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f242:	b2da      	uxtb	r2, r3
 800f244:	68bb      	ldr	r3, [r7, #8]
 800f246:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800f248:	697b      	ldr	r3, [r7, #20]
 800f24a:	0a1b      	lsrs	r3, r3, #8
 800f24c:	b2db      	uxtb	r3, r3
 800f24e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f252:	b2da      	uxtb	r2, r3
 800f254:	68bb      	ldr	r3, [r7, #8]
 800f256:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800f258:	697b      	ldr	r3, [r7, #20]
 800f25a:	b2db      	uxtb	r3, r3
 800f25c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f260:	b2da      	uxtb	r2, r3
 800f262:	68bb      	ldr	r3, [r7, #8]
 800f264:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800f266:	697b      	ldr	r3, [r7, #20]
 800f268:	0d9b      	lsrs	r3, r3, #22
 800f26a:	b2db      	uxtb	r3, r3
 800f26c:	f003 0301 	and.w	r3, r3, #1
 800f270:	b2da      	uxtb	r2, r3
 800f272:	68bb      	ldr	r3, [r7, #8]
 800f274:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d11a      	bne.n	800f2b2 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800f27c:	68bb      	ldr	r3, [r7, #8]
 800f27e:	781b      	ldrb	r3, [r3, #0]
 800f280:	4618      	mov	r0, r3
 800f282:	f000 f9ab 	bl	800f5dc <RTC_Bcd2ToByte>
 800f286:	4603      	mov	r3, r0
 800f288:	461a      	mov	r2, r3
 800f28a:	68bb      	ldr	r3, [r7, #8]
 800f28c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800f28e:	68bb      	ldr	r3, [r7, #8]
 800f290:	785b      	ldrb	r3, [r3, #1]
 800f292:	4618      	mov	r0, r3
 800f294:	f000 f9a2 	bl	800f5dc <RTC_Bcd2ToByte>
 800f298:	4603      	mov	r3, r0
 800f29a:	461a      	mov	r2, r3
 800f29c:	68bb      	ldr	r3, [r7, #8]
 800f29e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800f2a0:	68bb      	ldr	r3, [r7, #8]
 800f2a2:	789b      	ldrb	r3, [r3, #2]
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	f000 f999 	bl	800f5dc <RTC_Bcd2ToByte>
 800f2aa:	4603      	mov	r3, r0
 800f2ac:	461a      	mov	r2, r3
 800f2ae:	68bb      	ldr	r3, [r7, #8]
 800f2b0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800f2b2:	2300      	movs	r3, #0
}
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	3718      	adds	r7, #24
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	bd80      	pop	{r7, pc}
 800f2bc:	007f7f7f 	.word	0x007f7f7f

0800f2c0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800f2c0:	b590      	push	{r4, r7, lr}
 800f2c2:	b087      	sub	sp, #28
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	60f8      	str	r0, [r7, #12]
 800f2c8:	60b9      	str	r1, [r7, #8]
 800f2ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f2d2:	2b01      	cmp	r3, #1
 800f2d4:	d101      	bne.n	800f2da <HAL_RTC_SetDate+0x1a>
 800f2d6:	2302      	movs	r3, #2
 800f2d8:	e073      	b.n	800f3c2 <HAL_RTC_SetDate+0x102>
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	2201      	movs	r2, #1
 800f2de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	2202      	movs	r2, #2
 800f2e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d10e      	bne.n	800f30e <HAL_RTC_SetDate+0x4e>
 800f2f0:	68bb      	ldr	r3, [r7, #8]
 800f2f2:	785b      	ldrb	r3, [r3, #1]
 800f2f4:	f003 0310 	and.w	r3, r3, #16
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d008      	beq.n	800f30e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800f2fc:	68bb      	ldr	r3, [r7, #8]
 800f2fe:	785b      	ldrb	r3, [r3, #1]
 800f300:	f023 0310 	bic.w	r3, r3, #16
 800f304:	b2db      	uxtb	r3, r3
 800f306:	330a      	adds	r3, #10
 800f308:	b2da      	uxtb	r2, r3
 800f30a:	68bb      	ldr	r3, [r7, #8]
 800f30c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	2b00      	cmp	r3, #0
 800f312:	d11c      	bne.n	800f34e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800f314:	68bb      	ldr	r3, [r7, #8]
 800f316:	78db      	ldrb	r3, [r3, #3]
 800f318:	4618      	mov	r0, r3
 800f31a:	f000 f93f 	bl	800f59c <RTC_ByteToBcd2>
 800f31e:	4603      	mov	r3, r0
 800f320:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800f322:	68bb      	ldr	r3, [r7, #8]
 800f324:	785b      	ldrb	r3, [r3, #1]
 800f326:	4618      	mov	r0, r3
 800f328:	f000 f938 	bl	800f59c <RTC_ByteToBcd2>
 800f32c:	4603      	mov	r3, r0
 800f32e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800f330:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800f332:	68bb      	ldr	r3, [r7, #8]
 800f334:	789b      	ldrb	r3, [r3, #2]
 800f336:	4618      	mov	r0, r3
 800f338:	f000 f930 	bl	800f59c <RTC_ByteToBcd2>
 800f33c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800f33e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800f342:	68bb      	ldr	r3, [r7, #8]
 800f344:	781b      	ldrb	r3, [r3, #0]
 800f346:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800f348:	4313      	orrs	r3, r2
 800f34a:	617b      	str	r3, [r7, #20]
 800f34c:	e00e      	b.n	800f36c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800f34e:	68bb      	ldr	r3, [r7, #8]
 800f350:	78db      	ldrb	r3, [r3, #3]
 800f352:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800f354:	68bb      	ldr	r3, [r7, #8]
 800f356:	785b      	ldrb	r3, [r3, #1]
 800f358:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800f35a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800f35c:	68ba      	ldr	r2, [r7, #8]
 800f35e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800f360:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800f362:	68bb      	ldr	r3, [r7, #8]
 800f364:	781b      	ldrb	r3, [r3, #0]
 800f366:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800f368:	4313      	orrs	r3, r2
 800f36a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	22ca      	movs	r2, #202	; 0xca
 800f372:	625a      	str	r2, [r3, #36]	; 0x24
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	2253      	movs	r2, #83	; 0x53
 800f37a:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800f37c:	68f8      	ldr	r0, [r7, #12]
 800f37e:	f000 f899 	bl	800f4b4 <RTC_EnterInitMode>
 800f382:	4603      	mov	r3, r0
 800f384:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800f386:	7cfb      	ldrb	r3, [r7, #19]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d10a      	bne.n	800f3a2 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	681a      	ldr	r2, [r3, #0]
 800f390:	6979      	ldr	r1, [r7, #20]
 800f392:	4b0e      	ldr	r3, [pc, #56]	; (800f3cc <HAL_RTC_SetDate+0x10c>)
 800f394:	400b      	ands	r3, r1
 800f396:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800f398:	68f8      	ldr	r0, [r7, #12]
 800f39a:	f000 f8c1 	bl	800f520 <RTC_ExitInitMode>
 800f39e:	4603      	mov	r3, r0
 800f3a0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	22ff      	movs	r2, #255	; 0xff
 800f3a8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800f3aa:	7cfb      	ldrb	r3, [r7, #19]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d103      	bne.n	800f3b8 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	2201      	movs	r2, #1
 800f3b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	2200      	movs	r2, #0
 800f3bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800f3c0:	7cfb      	ldrb	r3, [r7, #19]


}
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	371c      	adds	r7, #28
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	bd90      	pop	{r4, r7, pc}
 800f3ca:	bf00      	nop
 800f3cc:	00ffff3f 	.word	0x00ffff3f

0800f3d0 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b086      	sub	sp, #24
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	60f8      	str	r0, [r7, #12]
 800f3d8:	60b9      	str	r1, [r7, #8]
 800f3da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	685a      	ldr	r2, [r3, #4]
 800f3e2:	4b21      	ldr	r3, [pc, #132]	; (800f468 <HAL_RTC_GetDate+0x98>)
 800f3e4:	4013      	ands	r3, r2
 800f3e6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800f3e8:	697b      	ldr	r3, [r7, #20]
 800f3ea:	0c1b      	lsrs	r3, r3, #16
 800f3ec:	b2da      	uxtb	r2, r3
 800f3ee:	68bb      	ldr	r3, [r7, #8]
 800f3f0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800f3f2:	697b      	ldr	r3, [r7, #20]
 800f3f4:	0a1b      	lsrs	r3, r3, #8
 800f3f6:	b2db      	uxtb	r3, r3
 800f3f8:	f003 031f 	and.w	r3, r3, #31
 800f3fc:	b2da      	uxtb	r2, r3
 800f3fe:	68bb      	ldr	r3, [r7, #8]
 800f400:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800f402:	697b      	ldr	r3, [r7, #20]
 800f404:	b2db      	uxtb	r3, r3
 800f406:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f40a:	b2da      	uxtb	r2, r3
 800f40c:	68bb      	ldr	r3, [r7, #8]
 800f40e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800f410:	697b      	ldr	r3, [r7, #20]
 800f412:	0b5b      	lsrs	r3, r3, #13
 800f414:	b2db      	uxtb	r3, r3
 800f416:	f003 0307 	and.w	r3, r3, #7
 800f41a:	b2da      	uxtb	r2, r3
 800f41c:	68bb      	ldr	r3, [r7, #8]
 800f41e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d11a      	bne.n	800f45c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800f426:	68bb      	ldr	r3, [r7, #8]
 800f428:	78db      	ldrb	r3, [r3, #3]
 800f42a:	4618      	mov	r0, r3
 800f42c:	f000 f8d6 	bl	800f5dc <RTC_Bcd2ToByte>
 800f430:	4603      	mov	r3, r0
 800f432:	461a      	mov	r2, r3
 800f434:	68bb      	ldr	r3, [r7, #8]
 800f436:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800f438:	68bb      	ldr	r3, [r7, #8]
 800f43a:	785b      	ldrb	r3, [r3, #1]
 800f43c:	4618      	mov	r0, r3
 800f43e:	f000 f8cd 	bl	800f5dc <RTC_Bcd2ToByte>
 800f442:	4603      	mov	r3, r0
 800f444:	461a      	mov	r2, r3
 800f446:	68bb      	ldr	r3, [r7, #8]
 800f448:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800f44a:	68bb      	ldr	r3, [r7, #8]
 800f44c:	789b      	ldrb	r3, [r3, #2]
 800f44e:	4618      	mov	r0, r3
 800f450:	f000 f8c4 	bl	800f5dc <RTC_Bcd2ToByte>
 800f454:	4603      	mov	r3, r0
 800f456:	461a      	mov	r2, r3
 800f458:	68bb      	ldr	r3, [r7, #8]
 800f45a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800f45c:	2300      	movs	r3, #0
}
 800f45e:	4618      	mov	r0, r3
 800f460:	3718      	adds	r7, #24
 800f462:	46bd      	mov	sp, r7
 800f464:	bd80      	pop	{r7, pc}
 800f466:	bf00      	nop
 800f468:	00ffff3f 	.word	0x00ffff3f

0800f46c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b084      	sub	sp, #16
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	4a0d      	ldr	r2, [pc, #52]	; (800f4b0 <HAL_RTC_WaitForSynchro+0x44>)
 800f47a:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800f47c:	f7f4 fe3a 	bl	80040f4 <HAL_GetTick>
 800f480:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800f482:	e009      	b.n	800f498 <HAL_RTC_WaitForSynchro+0x2c>
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f484:	f7f4 fe36 	bl	80040f4 <HAL_GetTick>
 800f488:	4602      	mov	r2, r0
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	1ad3      	subs	r3, r2, r3
 800f48e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f492:	d901      	bls.n	800f498 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800f494:	2303      	movs	r3, #3
 800f496:	e007      	b.n	800f4a8 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	68db      	ldr	r3, [r3, #12]
 800f49e:	f003 0320 	and.w	r3, r3, #32
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d0ee      	beq.n	800f484 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800f4a6:	2300      	movs	r3, #0
}
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	3710      	adds	r7, #16
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	bd80      	pop	{r7, pc}
 800f4b0:	0001005f 	.word	0x0001005f

0800f4b4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b084      	sub	sp, #16
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f4bc:	2300      	movs	r3, #0
 800f4be:	73fb      	strb	r3, [r7, #15]
  /* Check if the Initialization mode is set */
#if defined(TAMP)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	68db      	ldr	r3, [r3, #12]
 800f4c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d123      	bne.n	800f516 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	68da      	ldr	r2, [r3, #12]
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800f4dc:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800f4de:	f7f4 fe09 	bl	80040f4 <HAL_GetTick>
 800f4e2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800f4e4:	e00d      	b.n	800f502 <RTC_EnterInitMode+0x4e>

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800f4e6:	f7f4 fe05 	bl	80040f4 <HAL_GetTick>
 800f4ea:	4602      	mov	r2, r0
 800f4ec:	68bb      	ldr	r3, [r7, #8]
 800f4ee:	1ad3      	subs	r3, r2, r3
 800f4f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f4f4:	d905      	bls.n	800f502 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800f4f6:	2303      	movs	r3, #3
 800f4f8:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	2203      	movs	r2, #3
 800f4fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	68db      	ldr	r3, [r3, #12]
 800f508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d102      	bne.n	800f516 <RTC_EnterInitMode+0x62>
 800f510:	7bfb      	ldrb	r3, [r7, #15]
 800f512:	2b03      	cmp	r3, #3
 800f514:	d1e7      	bne.n	800f4e6 <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 800f516:	7bfb      	ldrb	r3, [r7, #15]
}
 800f518:	4618      	mov	r0, r3
 800f51a:	3710      	adds	r7, #16
 800f51c:	46bd      	mov	sp, r7
 800f51e:	bd80      	pop	{r7, pc}

0800f520 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800f520:	b580      	push	{r7, lr}
 800f522:	b084      	sub	sp, #16
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f528:	2300      	movs	r3, #0
 800f52a:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800f52c:	4b1a      	ldr	r3, [pc, #104]	; (800f598 <RTC_ExitInitMode+0x78>)
 800f52e:	68db      	ldr	r3, [r3, #12]
 800f530:	4a19      	ldr	r2, [pc, #100]	; (800f598 <RTC_ExitInitMode+0x78>)
 800f532:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f536:	60d3      	str	r3, [r2, #12]
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800f538:	4b17      	ldr	r3, [pc, #92]	; (800f598 <RTC_ExitInitMode+0x78>)
 800f53a:	699b      	ldr	r3, [r3, #24]
 800f53c:	f003 0320 	and.w	r3, r3, #32
 800f540:	2b00      	cmp	r3, #0
 800f542:	d10c      	bne.n	800f55e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800f544:	6878      	ldr	r0, [r7, #4]
 800f546:	f7ff ff91 	bl	800f46c <HAL_RTC_WaitForSynchro>
 800f54a:	4603      	mov	r3, r0
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d01e      	beq.n	800f58e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	2203      	movs	r2, #3
 800f554:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800f558:	2303      	movs	r3, #3
 800f55a:	73fb      	strb	r3, [r7, #15]
 800f55c:	e017      	b.n	800f58e <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800f55e:	4b0e      	ldr	r3, [pc, #56]	; (800f598 <RTC_ExitInitMode+0x78>)
 800f560:	699b      	ldr	r3, [r3, #24]
 800f562:	4a0d      	ldr	r2, [pc, #52]	; (800f598 <RTC_ExitInitMode+0x78>)
 800f564:	f023 0320 	bic.w	r3, r3, #32
 800f568:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800f56a:	6878      	ldr	r0, [r7, #4]
 800f56c:	f7ff ff7e 	bl	800f46c <HAL_RTC_WaitForSynchro>
 800f570:	4603      	mov	r3, r0
 800f572:	2b00      	cmp	r3, #0
 800f574:	d005      	beq.n	800f582 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	2203      	movs	r2, #3
 800f57a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800f57e:	2303      	movs	r3, #3
 800f580:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800f582:	4b05      	ldr	r3, [pc, #20]	; (800f598 <RTC_ExitInitMode+0x78>)
 800f584:	699b      	ldr	r3, [r3, #24]
 800f586:	4a04      	ldr	r2, [pc, #16]	; (800f598 <RTC_ExitInitMode+0x78>)
 800f588:	f043 0320 	orr.w	r3, r3, #32
 800f58c:	6193      	str	r3, [r2, #24]
  }

  return status;
 800f58e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f590:	4618      	mov	r0, r3
 800f592:	3710      	adds	r7, #16
 800f594:	46bd      	mov	sp, r7
 800f596:	bd80      	pop	{r7, pc}
 800f598:	58004000 	.word	0x58004000

0800f59c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800f59c:	b480      	push	{r7}
 800f59e:	b085      	sub	sp, #20
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800f5aa:	79fb      	ldrb	r3, [r7, #7]
 800f5ac:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800f5ae:	e005      	b.n	800f5bc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	3301      	adds	r3, #1
 800f5b4:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800f5b6:	7afb      	ldrb	r3, [r7, #11]
 800f5b8:	3b0a      	subs	r3, #10
 800f5ba:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800f5bc:	7afb      	ldrb	r3, [r7, #11]
 800f5be:	2b09      	cmp	r3, #9
 800f5c0:	d8f6      	bhi.n	800f5b0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	b2db      	uxtb	r3, r3
 800f5c6:	011b      	lsls	r3, r3, #4
 800f5c8:	b2da      	uxtb	r2, r3
 800f5ca:	7afb      	ldrb	r3, [r7, #11]
 800f5cc:	4313      	orrs	r3, r2
 800f5ce:	b2db      	uxtb	r3, r3
}
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	3714      	adds	r7, #20
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5da:	4770      	bx	lr

0800f5dc <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800f5dc:	b480      	push	{r7}
 800f5de:	b085      	sub	sp, #20
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800f5e6:	79fb      	ldrb	r3, [r7, #7]
 800f5e8:	091b      	lsrs	r3, r3, #4
 800f5ea:	b2db      	uxtb	r3, r3
 800f5ec:	461a      	mov	r2, r3
 800f5ee:	0092      	lsls	r2, r2, #2
 800f5f0:	4413      	add	r3, r2
 800f5f2:	005b      	lsls	r3, r3, #1
 800f5f4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800f5f6:	79fb      	ldrb	r3, [r7, #7]
 800f5f8:	f003 030f 	and.w	r3, r3, #15
 800f5fc:	b2da      	uxtb	r2, r3
 800f5fe:	7bfb      	ldrb	r3, [r7, #15]
 800f600:	4413      	add	r3, r2
 800f602:	b2db      	uxtb	r3, r3
}
 800f604:	4618      	mov	r0, r3
 800f606:	3714      	adds	r7, #20
 800f608:	46bd      	mov	sp, r7
 800f60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60e:	4770      	bx	lr

0800f610 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800f610:	b580      	push	{r7, lr}
 800f612:	b086      	sub	sp, #24
 800f614:	af00      	add	r7, sp, #0
 800f616:	60f8      	str	r0, [r7, #12]
 800f618:	60b9      	str	r1, [r7, #8]
 800f61a:	607a      	str	r2, [r7, #4]
 800f61c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800f61e:	68bb      	ldr	r3, [r7, #8]
 800f620:	2b02      	cmp	r3, #2
 800f622:	d904      	bls.n	800f62e <HAL_SAI_InitProtocol+0x1e>
 800f624:	68bb      	ldr	r3, [r7, #8]
 800f626:	3b03      	subs	r3, #3
 800f628:	2b01      	cmp	r3, #1
 800f62a:	d812      	bhi.n	800f652 <HAL_SAI_InitProtocol+0x42>
 800f62c:	e008      	b.n	800f640 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800f62e:	683b      	ldr	r3, [r7, #0]
 800f630:	687a      	ldr	r2, [r7, #4]
 800f632:	68b9      	ldr	r1, [r7, #8]
 800f634:	68f8      	ldr	r0, [r7, #12]
 800f636:	f000 fd2d 	bl	8010094 <SAI_InitI2S>
 800f63a:	4603      	mov	r3, r0
 800f63c:	75fb      	strb	r3, [r7, #23]
      break;
 800f63e:	e00b      	b.n	800f658 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800f640:	683b      	ldr	r3, [r7, #0]
 800f642:	687a      	ldr	r2, [r7, #4]
 800f644:	68b9      	ldr	r1, [r7, #8]
 800f646:	68f8      	ldr	r0, [r7, #12]
 800f648:	f000 fdd6 	bl	80101f8 <SAI_InitPCM>
 800f64c:	4603      	mov	r3, r0
 800f64e:	75fb      	strb	r3, [r7, #23]
      break;
 800f650:	e002      	b.n	800f658 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800f652:	2301      	movs	r3, #1
 800f654:	75fb      	strb	r3, [r7, #23]
      break;
 800f656:	bf00      	nop
  }

  if (status == HAL_OK)
 800f658:	7dfb      	ldrb	r3, [r7, #23]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d104      	bne.n	800f668 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800f65e:	68f8      	ldr	r0, [r7, #12]
 800f660:	f000 f808 	bl	800f674 <HAL_SAI_Init>
 800f664:	4603      	mov	r3, r0
 800f666:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800f668:	7dfb      	ldrb	r3, [r7, #23]
}
 800f66a:	4618      	mov	r0, r3
 800f66c:	3718      	adds	r7, #24
 800f66e:	46bd      	mov	sp, r7
 800f670:	bd80      	pop	{r7, pc}
	...

0800f674 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800f674:	b580      	push	{r7, lr}
 800f676:	b08a      	sub	sp, #40	; 0x28
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d101      	bne.n	800f686 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800f682:	2301      	movs	r3, #1
 800f684:	e1f2      	b.n	800fa6c <HAL_SAI_Init+0x3f8>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f68c:	2b01      	cmp	r3, #1
 800f68e:	d10e      	bne.n	800f6ae <HAL_SAI_Init+0x3a>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
    {
      return HAL_ERROR;
    }
#else
    if ((hsai->Instance != SAI1_Block_A) ||
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	4a94      	ldr	r2, [pc, #592]	; (800f8e8 <HAL_SAI_Init+0x274>)
 800f696:	4293      	cmp	r3, r2
 800f698:	d107      	bne.n	800f6aa <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800f69e:	2b01      	cmp	r3, #1
 800f6a0:	d103      	bne.n	800f6aa <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d001      	beq.n	800f6ae <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800f6aa:	2301      	movs	r3, #1
 800f6ac:	e1de      	b.n	800fa6c <HAL_SAI_Init+0x3f8>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	4a8d      	ldr	r2, [pc, #564]	; (800f8e8 <HAL_SAI_Init+0x274>)
 800f6b4:	4293      	cmp	r3, r2
 800f6b6:	d004      	beq.n	800f6c2 <HAL_SAI_Init+0x4e>
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	4a8b      	ldr	r2, [pc, #556]	; (800f8ec <HAL_SAI_Init+0x278>)
 800f6be:	4293      	cmp	r3, r2
 800f6c0:	d102      	bne.n	800f6c8 <HAL_SAI_Init+0x54>
  {
    SaiBaseAddress = SAI1;
 800f6c2:	4b8b      	ldr	r3, [pc, #556]	; (800f8f0 <HAL_SAI_Init+0x27c>)
 800f6c4:	61bb      	str	r3, [r7, #24]
 800f6c6:	e00e      	b.n	800f6e6 <HAL_SAI_Init+0x72>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	4a89      	ldr	r2, [pc, #548]	; (800f8f4 <HAL_SAI_Init+0x280>)
 800f6ce:	4293      	cmp	r3, r2
 800f6d0:	d004      	beq.n	800f6dc <HAL_SAI_Init+0x68>
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	4a88      	ldr	r2, [pc, #544]	; (800f8f8 <HAL_SAI_Init+0x284>)
 800f6d8:	4293      	cmp	r3, r2
 800f6da:	d102      	bne.n	800f6e2 <HAL_SAI_Init+0x6e>
  {
    SaiBaseAddress = SAI2;
 800f6dc:	4b87      	ldr	r3, [pc, #540]	; (800f8fc <HAL_SAI_Init+0x288>)
 800f6de:	61bb      	str	r3, [r7, #24]
 800f6e0:	e001      	b.n	800f6e6 <HAL_SAI_Init+0x72>
    SaiBaseAddress = SAI4;
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800f6e2:	2301      	movs	r3, #1
 800f6e4:	e1c2      	b.n	800fa6c <HAL_SAI_Init+0x3f8>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800f6ec:	b2db      	uxtb	r3, r3
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d106      	bne.n	800f700 <HAL_SAI_Init+0x8c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	2200      	movs	r2, #0
 800f6f6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800f6fa:	6878      	ldr	r0, [r7, #4]
 800f6fc:	f7f4 f9bc 	bl	8003a78 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800f700:	6878      	ldr	r0, [r7, #4]
 800f702:	f000 fe33 	bl	801036c <SAI_Disable>
 800f706:	4603      	mov	r3, r0
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d001      	beq.n	800f710 <HAL_SAI_Init+0x9c>
  {
    return HAL_ERROR;
 800f70c:	2301      	movs	r3, #1
 800f70e:	e1ad      	b.n	800fa6c <HAL_SAI_Init+0x3f8>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	2202      	movs	r2, #2
 800f714:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	68db      	ldr	r3, [r3, #12]
 800f71c:	2b02      	cmp	r3, #2
 800f71e:	d00c      	beq.n	800f73a <HAL_SAI_Init+0xc6>
 800f720:	2b02      	cmp	r3, #2
 800f722:	d80d      	bhi.n	800f740 <HAL_SAI_Init+0xcc>
 800f724:	2b00      	cmp	r3, #0
 800f726:	d002      	beq.n	800f72e <HAL_SAI_Init+0xba>
 800f728:	2b01      	cmp	r3, #1
 800f72a:	d003      	beq.n	800f734 <HAL_SAI_Init+0xc0>
 800f72c:	e008      	b.n	800f740 <HAL_SAI_Init+0xcc>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800f72e:	2300      	movs	r3, #0
 800f730:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f732:	e008      	b.n	800f746 <HAL_SAI_Init+0xd2>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800f734:	2310      	movs	r3, #16
 800f736:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f738:	e005      	b.n	800f746 <HAL_SAI_Init+0xd2>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800f73a:	2320      	movs	r3, #32
 800f73c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f73e:	e002      	b.n	800f746 <HAL_SAI_Init+0xd2>
    default:
      tmpregisterGCR = 0;
 800f740:	2300      	movs	r3, #0
 800f742:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f744:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	689b      	ldr	r3, [r3, #8]
 800f74a:	2b03      	cmp	r3, #3
 800f74c:	d81d      	bhi.n	800f78a <HAL_SAI_Init+0x116>
 800f74e:	a201      	add	r2, pc, #4	; (adr r2, 800f754 <HAL_SAI_Init+0xe0>)
 800f750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f754:	0800f765 	.word	0x0800f765
 800f758:	0800f76b 	.word	0x0800f76b
 800f75c:	0800f773 	.word	0x0800f773
 800f760:	0800f77b 	.word	0x0800f77b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800f764:	2300      	movs	r3, #0
 800f766:	61fb      	str	r3, [r7, #28]
      break;
 800f768:	e012      	b.n	800f790 <HAL_SAI_Init+0x11c>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800f76a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f76e:	61fb      	str	r3, [r7, #28]
      break;
 800f770:	e00e      	b.n	800f790 <HAL_SAI_Init+0x11c>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800f772:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f776:	61fb      	str	r3, [r7, #28]
      break;
 800f778:	e00a      	b.n	800f790 <HAL_SAI_Init+0x11c>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800f77a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f77e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800f780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f782:	f043 0301 	orr.w	r3, r3, #1
 800f786:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f788:	e002      	b.n	800f790 <HAL_SAI_Init+0x11c>
      syncen_bits = SAI_xCR1_SYNCEN_1;
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
      break;
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800f78a:	2300      	movs	r3, #0
 800f78c:	61fb      	str	r3, [r7, #28]
      break;
 800f78e:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800f790:	69bb      	ldr	r3, [r7, #24]
 800f792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f794:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	6a1b      	ldr	r3, [r3, #32]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	f000 808a 	beq.w	800f8b4 <HAL_SAI_Init+0x240>
  {
    uint32_t freq = 0;
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	4a4f      	ldr	r2, [pc, #316]	; (800f8e8 <HAL_SAI_Init+0x274>)
 800f7aa:	4293      	cmp	r3, r2
 800f7ac:	d004      	beq.n	800f7b8 <HAL_SAI_Init+0x144>
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	4a4e      	ldr	r2, [pc, #312]	; (800f8ec <HAL_SAI_Init+0x278>)
 800f7b4:	4293      	cmp	r3, r2
 800f7b6:	d106      	bne.n	800f7c6 <HAL_SAI_Init+0x152>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800f7b8:	f44f 7080 	mov.w	r0, #256	; 0x100
 800f7bc:	f04f 0100 	mov.w	r1, #0
 800f7c0:	f7fe f9b2 	bl	800db28 <HAL_RCCEx_GetPeriphCLKFreq>
 800f7c4:	6178      	str	r0, [r7, #20]
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
    }
#else
    if (hsai->Instance == SAI2_Block_A)
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	4a4a      	ldr	r2, [pc, #296]	; (800f8f4 <HAL_SAI_Init+0x280>)
 800f7cc:	4293      	cmp	r3, r2
 800f7ce:	d106      	bne.n	800f7de <HAL_SAI_Init+0x16a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2A);
 800f7d0:	f44f 7000 	mov.w	r0, #512	; 0x200
 800f7d4:	f04f 0100 	mov.w	r1, #0
 800f7d8:	f7fe f9a6 	bl	800db28 <HAL_RCCEx_GetPeriphCLKFreq>
 800f7dc:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI2_Block_B)
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	4a45      	ldr	r2, [pc, #276]	; (800f8f8 <HAL_SAI_Init+0x284>)
 800f7e4:	4293      	cmp	r3, r2
 800f7e6:	d106      	bne.n	800f7f6 <HAL_SAI_Init+0x182>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2B);
 800f7e8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800f7ec:	f04f 0100 	mov.w	r1, #0
 800f7f0:	f7fe f99a 	bl	800db28 <HAL_RCCEx_GetPeriphCLKFreq>
 800f7f4:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	699b      	ldr	r3, [r3, #24]
 800f7fa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800f7fe:	d120      	bne.n	800f842 <HAL_SAI_Init+0x1ce>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f804:	2b04      	cmp	r3, #4
 800f806:	d102      	bne.n	800f80e <HAL_SAI_Init+0x19a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800f808:	2340      	movs	r3, #64	; 0x40
 800f80a:	60fb      	str	r3, [r7, #12]
 800f80c:	e00a      	b.n	800f824 <HAL_SAI_Init+0x1b0>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f812:	2b08      	cmp	r3, #8
 800f814:	d103      	bne.n	800f81e <HAL_SAI_Init+0x1aa>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800f816:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f81a:	60fb      	str	r3, [r7, #12]
 800f81c:	e002      	b.n	800f824 <HAL_SAI_Init+0x1b0>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f822:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800f824:	697a      	ldr	r2, [r7, #20]
 800f826:	4613      	mov	r3, r2
 800f828:	009b      	lsls	r3, r3, #2
 800f82a:	4413      	add	r3, r2
 800f82c:	005b      	lsls	r3, r3, #1
 800f82e:	4619      	mov	r1, r3
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	6a1b      	ldr	r3, [r3, #32]
 800f834:	68fa      	ldr	r2, [r7, #12]
 800f836:	fb02 f303 	mul.w	r3, r2, r3
 800f83a:	fbb1 f3f3 	udiv	r3, r1, r3
 800f83e:	613b      	str	r3, [r7, #16]
 800f840:	e017      	b.n	800f872 <HAL_SAI_Init+0x1fe>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f846:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f84a:	d101      	bne.n	800f850 <HAL_SAI_Init+0x1dc>
 800f84c:	2302      	movs	r3, #2
 800f84e:	e000      	b.n	800f852 <HAL_SAI_Init+0x1de>
 800f850:	2301      	movs	r3, #1
 800f852:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800f854:	697a      	ldr	r2, [r7, #20]
 800f856:	4613      	mov	r3, r2
 800f858:	009b      	lsls	r3, r3, #2
 800f85a:	4413      	add	r3, r2
 800f85c:	005b      	lsls	r3, r3, #1
 800f85e:	4619      	mov	r1, r3
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	6a1b      	ldr	r3, [r3, #32]
 800f864:	68ba      	ldr	r2, [r7, #8]
 800f866:	fb02 f303 	mul.w	r3, r2, r3
 800f86a:	021b      	lsls	r3, r3, #8
 800f86c:	fbb1 f3f3 	udiv	r3, r1, r3
 800f870:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800f872:	693b      	ldr	r3, [r7, #16]
 800f874:	4a22      	ldr	r2, [pc, #136]	; (800f900 <HAL_SAI_Init+0x28c>)
 800f876:	fba2 2303 	umull	r2, r3, r2, r3
 800f87a:	08da      	lsrs	r2, r3, #3
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800f880:	6939      	ldr	r1, [r7, #16]
 800f882:	4b1f      	ldr	r3, [pc, #124]	; (800f900 <HAL_SAI_Init+0x28c>)
 800f884:	fba3 2301 	umull	r2, r3, r3, r1
 800f888:	08da      	lsrs	r2, r3, #3
 800f88a:	4613      	mov	r3, r2
 800f88c:	009b      	lsls	r3, r3, #2
 800f88e:	4413      	add	r3, r2
 800f890:	005b      	lsls	r3, r3, #1
 800f892:	1aca      	subs	r2, r1, r3
 800f894:	2a08      	cmp	r2, #8
 800f896:	d904      	bls.n	800f8a2 <HAL_SAI_Init+0x22e>
    {
      hsai->Init.Mckdiv += 1U;
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f89c:	1c5a      	adds	r2, r3, #1
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8a6:	2b04      	cmp	r3, #4
 800f8a8:	d104      	bne.n	800f8b4 <HAL_SAI_Init+0x240>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8ae:	085a      	lsrs	r2, r3, #1
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	685b      	ldr	r3, [r3, #4]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d003      	beq.n	800f8c4 <HAL_SAI_Init+0x250>
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	685b      	ldr	r3, [r3, #4]
 800f8c0:	2b02      	cmp	r3, #2
 800f8c2:	d109      	bne.n	800f8d8 <HAL_SAI_Init+0x264>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f8c8:	2b01      	cmp	r3, #1
 800f8ca:	d101      	bne.n	800f8d0 <HAL_SAI_Init+0x25c>
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	e001      	b.n	800f8d4 <HAL_SAI_Init+0x260>
 800f8d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f8d4:	623b      	str	r3, [r7, #32]
 800f8d6:	e017      	b.n	800f908 <HAL_SAI_Init+0x294>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f8dc:	2b01      	cmp	r3, #1
 800f8de:	d111      	bne.n	800f904 <HAL_SAI_Init+0x290>
 800f8e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f8e4:	e00f      	b.n	800f906 <HAL_SAI_Init+0x292>
 800f8e6:	bf00      	nop
 800f8e8:	40015804 	.word	0x40015804
 800f8ec:	40015824 	.word	0x40015824
 800f8f0:	40015800 	.word	0x40015800
 800f8f4:	40015c04 	.word	0x40015c04
 800f8f8:	40015c24 	.word	0x40015c24
 800f8fc:	40015c00 	.word	0x40015c00
 800f900:	cccccccd 	.word	0xcccccccd
 800f904:	2300      	movs	r3, #0
 800f906:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	6819      	ldr	r1, [r3, #0]
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	681a      	ldr	r2, [r3, #0]
 800f912:	4b58      	ldr	r3, [pc, #352]	; (800fa74 <HAL_SAI_Init+0x400>)
 800f914:	400b      	ands	r3, r1
 800f916:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	6819      	ldr	r1, [r3, #0]
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	685a      	ldr	r2, [r3, #4]
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f926:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f92c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f932:	431a      	orrs	r2, r3
 800f934:	6a3b      	ldr	r3, [r7, #32]
 800f936:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800f938:	69fb      	ldr	r3, [r7, #28]
 800f93a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 800f940:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	695b      	ldr	r3, [r3, #20]
 800f946:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f94c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f952:	051b      	lsls	r3, r3, #20
 800f954:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f95a:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	691b      	ldr	r3, [r3, #16]
 800f960:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	430a      	orrs	r2, r1
 800f968:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	6859      	ldr	r1, [r3, #4]
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	681a      	ldr	r2, [r3, #0]
 800f974:	4b40      	ldr	r3, [pc, #256]	; (800fa78 <HAL_SAI_Init+0x404>)
 800f976:	400b      	ands	r3, r1
 800f978:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	6859      	ldr	r1, [r3, #4]
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	69da      	ldr	r2, [r3, #28]
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f988:	431a      	orrs	r2, r3
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f98e:	431a      	orrs	r2, r3
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	430a      	orrs	r2, r1
 800f996:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	6899      	ldr	r1, [r3, #8]
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	681a      	ldr	r2, [r3, #0]
 800f9a2:	4b36      	ldr	r3, [pc, #216]	; (800fa7c <HAL_SAI_Init+0x408>)
 800f9a4:	400b      	ands	r3, r1
 800f9a6:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	6899      	ldr	r1, [r3, #8]
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f9b2:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800f9b8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800f9be:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800f9c4:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f9ca:	3b01      	subs	r3, #1
 800f9cc:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800f9ce:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	430a      	orrs	r2, r1
 800f9d6:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	68d9      	ldr	r1, [r3, #12]
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	681a      	ldr	r2, [r3, #0]
 800f9e2:	f24f 0320 	movw	r3, #61472	; 0xf020
 800f9e6:	400b      	ands	r3, r1
 800f9e8:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	68d9      	ldr	r1, [r3, #12]
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9f8:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9fe:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800fa00:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa06:	3b01      	subs	r3, #1
 800fa08:	021b      	lsls	r3, r3, #8
 800fa0a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	430a      	orrs	r2, r1
 800fa12:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
#else
  if (hsai->Instance == SAI1_Block_A)
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	4a19      	ldr	r2, [pc, #100]	; (800fa80 <HAL_SAI_Init+0x40c>)
 800fa1a:	4293      	cmp	r3, r2
 800fa1c:	d119      	bne.n	800fa52 <HAL_SAI_Init+0x3de>
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800fa1e:	69bb      	ldr	r3, [r7, #24]
 800fa20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa22:	f023 0201 	bic.w	r2, r3, #1
 800fa26:	69bb      	ldr	r3, [r7, #24]
 800fa28:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fa30:	2b01      	cmp	r3, #1
 800fa32:	d10e      	bne.n	800fa52 <HAL_SAI_Init+0x3de>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa3c:	3b01      	subs	r3, #1
 800fa3e:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800fa40:	431a      	orrs	r2, r3
 800fa42:	69bb      	ldr	r3, [r7, #24]
 800fa44:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800fa46:	69bb      	ldr	r3, [r7, #24]
 800fa48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa4a:	f043 0201 	orr.w	r2, r3, #1
 800fa4e:	69bb      	ldr	r3, [r7, #24]
 800fa50:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	2200      	movs	r2, #0
 800fa56:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	2201      	movs	r2, #1
 800fa5e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	2200      	movs	r2, #0
 800fa66:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800fa6a:	2300      	movs	r3, #0
}
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	3728      	adds	r7, #40	; 0x28
 800fa70:	46bd      	mov	sp, r7
 800fa72:	bd80      	pop	{r7, pc}
 800fa74:	f005c010 	.word	0xf005c010
 800fa78:	ffff1ff0 	.word	0xffff1ff0
 800fa7c:	fff88000 	.word	0xfff88000
 800fa80:	40015804 	.word	0x40015804

0800fa84 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b084      	sub	sp, #16
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800fa96:	2b01      	cmp	r3, #1
 800fa98:	d101      	bne.n	800fa9e <HAL_SAI_Abort+0x1a>
 800fa9a:	2302      	movs	r3, #2
 800fa9c:	e07d      	b.n	800fb9a <HAL_SAI_Abort+0x116>
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	2201      	movs	r2, #1
 800faa2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fab0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fab4:	d14f      	bne.n	800fb56 <HAL_SAI_Abort+0xd2>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	681a      	ldr	r2, [r3, #0]
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800fac4:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX)&& (hsai->hdmatx != NULL))
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800facc:	b2db      	uxtb	r3, r3
 800face:	2b12      	cmp	r3, #18
 800fad0:	d11d      	bne.n	800fb0e <HAL_SAI_Abort+0x8a>
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d018      	beq.n	800fb0e <HAL_SAI_Abort+0x8a>
    {
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fae2:	4618      	mov	r0, r3
 800fae4:	f7f7 fb46 	bl	8007174 <HAL_DMA_Abort>
 800fae8:	4603      	mov	r3, r0
 800faea:	2b00      	cmp	r3, #0
 800faec:	d00f      	beq.n	800fb0e <HAL_SAI_Abort+0x8a>
      {
        /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800faf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800faf6:	2b80      	cmp	r3, #128	; 0x80
 800faf8:	d009      	beq.n	800fb0e <HAL_SAI_Abort+0x8a>
        {
          status = HAL_ERROR;
 800fafa:	2301      	movs	r3, #1
 800fafc:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fb04:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        }
      }
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800fb14:	b2db      	uxtb	r3, r3
 800fb16:	2b22      	cmp	r3, #34	; 0x22
 800fb18:	d11d      	bne.n	800fb56 <HAL_SAI_Abort+0xd2>
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d018      	beq.n	800fb56 <HAL_SAI_Abort+0xd2>
    {
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	f7f7 fb22 	bl	8007174 <HAL_DMA_Abort>
 800fb30:	4603      	mov	r3, r0
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d00f      	beq.n	800fb56 <HAL_SAI_Abort+0xd2>
      {
        /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fb3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb3e:	2b80      	cmp	r3, #128	; 0x80
 800fb40:	d009      	beq.n	800fb56 <HAL_SAI_Abort+0xd2>
        {
          status = HAL_ERROR;
 800fb42:	2301      	movs	r3, #1
 800fb44:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fb4c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      }
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	f04f 32ff 	mov.w	r2, #4294967295
 800fb66:	619a      	str	r2, [r3, #24]

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800fb68:	6878      	ldr	r0, [r7, #4]
 800fb6a:	f000 fbff 	bl	801036c <SAI_Disable>
 800fb6e:	4603      	mov	r3, r0
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d001      	beq.n	800fb78 <HAL_SAI_Abort+0xf4>
  {
    status = HAL_ERROR;
 800fb74:	2301      	movs	r3, #1
 800fb76:	73fb      	strb	r3, [r7, #15]
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	685a      	ldr	r2, [r3, #4]
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	f042 0208 	orr.w	r2, r2, #8
 800fb86:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	2201      	movs	r2, #1
 800fb8c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	2200      	movs	r2, #0
 800fb94:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return status;
 800fb98:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	3710      	adds	r7, #16
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	bd80      	pop	{r7, pc}
	...

0800fba4 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b086      	sub	sp, #24
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	60f8      	str	r0, [r7, #12]
 800fbac:	60b9      	str	r1, [r7, #8]
 800fbae:	4613      	mov	r3, r2
 800fbb0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800fbb2:	f7f4 fa9f 	bl	80040f4 <HAL_GetTick>
 800fbb6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800fbb8:	68bb      	ldr	r3, [r7, #8]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d002      	beq.n	800fbc4 <HAL_SAI_Transmit_DMA+0x20>
 800fbbe:	88fb      	ldrh	r3, [r7, #6]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d101      	bne.n	800fbc8 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800fbc4:	2301      	movs	r3, #1
 800fbc6:	e098      	b.n	800fcfa <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800fbce:	b2db      	uxtb	r3, r3
 800fbd0:	2b01      	cmp	r3, #1
 800fbd2:	f040 8091 	bne.w	800fcf8 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800fbdc:	2b01      	cmp	r3, #1
 800fbde:	d101      	bne.n	800fbe4 <HAL_SAI_Transmit_DMA+0x40>
 800fbe0:	2302      	movs	r3, #2
 800fbe2:	e08a      	b.n	800fcfa <HAL_SAI_Transmit_DMA+0x156>
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	2201      	movs	r2, #1
 800fbe8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	68ba      	ldr	r2, [r7, #8]
 800fbf0:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	88fa      	ldrh	r2, [r7, #6]
 800fbf6:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	88fa      	ldrh	r2, [r7, #6]
 800fbfe:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	2200      	movs	r2, #0
 800fc06:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	2212      	movs	r2, #18
 800fc0e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fc18:	4a3a      	ldr	r2, [pc, #232]	; (800fd04 <HAL_SAI_Transmit_DMA+0x160>)
 800fc1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fc22:	4a39      	ldr	r2, [pc, #228]	; (800fd08 <HAL_SAI_Transmit_DMA+0x164>)
 800fc24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fc2c:	4a37      	ldr	r2, [pc, #220]	; (800fd0c <HAL_SAI_Transmit_DMA+0x168>)
 800fc2e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fc36:	2200      	movs	r2, #0
 800fc38:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fc44:	4619      	mov	r1, r3
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	331c      	adds	r3, #28
 800fc4c:	461a      	mov	r2, r3
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800fc54:	f7f7 f824 	bl	8006ca0 <HAL_DMA_Start_IT>
 800fc58:	4603      	mov	r3, r0
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d005      	beq.n	800fc6a <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	2200      	movs	r2, #0
 800fc62:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800fc66:	2301      	movs	r3, #1
 800fc68:	e047      	b.n	800fcfa <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800fc6a:	2100      	movs	r1, #0
 800fc6c:	68f8      	ldr	r0, [r7, #12]
 800fc6e:	f000 fb45 	bl	80102fc <SAI_InterruptFlag>
 800fc72:	4601      	mov	r1, r0
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	691a      	ldr	r2, [r3, #16]
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	430a      	orrs	r2, r1
 800fc80:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	681a      	ldr	r2, [r3, #0]
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800fc90:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800fc92:	e015      	b.n	800fcc0 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800fc94:	f7f4 fa2e 	bl	80040f4 <HAL_GetTick>
 800fc98:	4602      	mov	r2, r0
 800fc9a:	697b      	ldr	r3, [r7, #20]
 800fc9c:	1ad3      	subs	r3, r2, r3
 800fc9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fca2:	d90d      	bls.n	800fcc0 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fcaa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	2200      	movs	r2, #0
 800fcb8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
 800fcbc:	2303      	movs	r3, #3
 800fcbe:	e01c      	b.n	800fcfa <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	695b      	ldr	r3, [r3, #20]
 800fcc6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d0e2      	beq.n	800fc94 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d107      	bne.n	800fcec <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	681a      	ldr	r2, [r3, #0]
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800fcea:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	2200      	movs	r2, #0
 800fcf0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	e000      	b.n	800fcfa <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 800fcf8:	2302      	movs	r3, #2
  }
}
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	3718      	adds	r7, #24
 800fcfe:	46bd      	mov	sp, r7
 800fd00:	bd80      	pop	{r7, pc}
 800fd02:	bf00      	nop
 800fd04:	08010441 	.word	0x08010441
 800fd08:	080103e1 	.word	0x080103e1
 800fd0c:	0801045d 	.word	0x0801045d

0800fd10 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 800fd10:	b580      	push	{r7, lr}
 800fd12:	b086      	sub	sp, #24
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800fd1e:	b2db      	uxtb	r3, r3
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	f000 81a7 	beq.w	8010074 <HAL_SAI_IRQHandler+0x364>
  {
    uint32_t itflags = hsai->Instance->SR;
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	695b      	ldr	r3, [r3, #20]
 800fd2c:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	691b      	ldr	r3, [r3, #16]
 800fd34:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred ------------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 800fd3e:	697b      	ldr	r3, [r7, #20]
 800fd40:	f003 0308 	and.w	r3, r3, #8
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d00a      	beq.n	800fd5e <HAL_SAI_IRQHandler+0x4e>
 800fd48:	693b      	ldr	r3, [r7, #16]
 800fd4a:	f003 0308 	and.w	r3, r3, #8
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d005      	beq.n	800fd5e <HAL_SAI_IRQHandler+0x4e>
    {
      hsai->InterruptServiceRoutine(hsai);
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fd58:	6878      	ldr	r0, [r7, #4]
 800fd5a:	4798      	blx	r3
 800fd5c:	e18a      	b.n	8010074 <HAL_SAI_IRQHandler+0x364>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 800fd5e:	697b      	ldr	r3, [r7, #20]
 800fd60:	f003 0301 	and.w	r3, r3, #1
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d01e      	beq.n	800fda6 <HAL_SAI_IRQHandler+0x96>
 800fd68:	693b      	ldr	r3, [r7, #16]
 800fd6a:	f003 0301 	and.w	r3, r3, #1
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d019      	beq.n	800fda6 <HAL_SAI_IRQHandler+0x96>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	2201      	movs	r2, #1
 800fd78:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800fd80:	b2db      	uxtb	r3, r3
 800fd82:	2b22      	cmp	r3, #34	; 0x22
 800fd84:	d101      	bne.n	800fd8a <HAL_SAI_IRQHandler+0x7a>
 800fd86:	2301      	movs	r3, #1
 800fd88:	e000      	b.n	800fd8c <HAL_SAI_IRQHandler+0x7c>
 800fd8a:	2302      	movs	r3, #2
 800fd8c:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800fd94:	68bb      	ldr	r3, [r7, #8]
 800fd96:	431a      	orrs	r2, r3
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800fd9e:	6878      	ldr	r0, [r7, #4]
 800fda0:	f000 f96e 	bl	8010080 <HAL_SAI_ErrorCallback>
 800fda4:	e166      	b.n	8010074 <HAL_SAI_IRQHandler+0x364>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 800fda6:	697b      	ldr	r3, [r7, #20]
 800fda8:	f003 0302 	and.w	r3, r3, #2
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d013      	beq.n	800fdd8 <HAL_SAI_IRQHandler+0xc8>
 800fdb0:	693b      	ldr	r3, [r7, #16]
 800fdb2:	f003 0302 	and.w	r3, r3, #2
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d00e      	beq.n	800fdd8 <HAL_SAI_IRQHandler+0xc8>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	2202      	movs	r2, #2
 800fdc0:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	f000 8153 	beq.w	8010074 <HAL_SAI_IRQHandler+0x364>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fdd4:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 800fdd6:	e14d      	b.n	8010074 <HAL_SAI_IRQHandler+0x364>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 800fdd8:	697b      	ldr	r3, [r7, #20]
 800fdda:	f003 0320 	and.w	r3, r3, #32
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d05b      	beq.n	800fe9a <HAL_SAI_IRQHandler+0x18a>
 800fde2:	693b      	ldr	r3, [r7, #16]
 800fde4:	f003 0320 	and.w	r3, r3, #32
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d056      	beq.n	800fe9a <HAL_SAI_IRQHandler+0x18a>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	2220      	movs	r2, #32
 800fdf2:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fdfa:	f043 0204 	orr.w	r2, r3, #4
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d03e      	beq.n	800fe8c <HAL_SAI_IRQHandler+0x17c>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d018      	beq.n	800fe4a <HAL_SAI_IRQHandler+0x13a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fe1e:	4a97      	ldr	r2, [pc, #604]	; (801007c <HAL_SAI_IRQHandler+0x36c>)
 800fe20:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fe28:	4618      	mov	r0, r3
 800fe2a:	f7f7 fcc1 	bl	80077b0 <HAL_DMA_Abort_IT>
 800fe2e:	4603      	mov	r3, r0
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d00a      	beq.n	800fe4a <HAL_SAI_IRQHandler+0x13a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fe3a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800fe44:	6878      	ldr	r0, [r7, #4]
 800fe46:	f000 f91b 	bl	8010080 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	f000 810a 	beq.w	801006a <HAL_SAI_IRQHandler+0x35a>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fe5c:	4a87      	ldr	r2, [pc, #540]	; (801007c <HAL_SAI_IRQHandler+0x36c>)
 800fe5e:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fe66:	4618      	mov	r0, r3
 800fe68:	f7f7 fca2 	bl	80077b0 <HAL_DMA_Abort_IT>
 800fe6c:	4603      	mov	r3, r0
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	f000 80fb 	beq.w	801006a <HAL_SAI_IRQHandler+0x35a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fe7a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800fe84:	6878      	ldr	r0, [r7, #4]
 800fe86:	f000 f8fb 	bl	8010080 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800fe8a:	e0ee      	b.n	801006a <HAL_SAI_IRQHandler+0x35a>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 800fe8c:	6878      	ldr	r0, [r7, #4]
 800fe8e:	f7ff fdf9 	bl	800fa84 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800fe92:	6878      	ldr	r0, [r7, #4]
 800fe94:	f000 f8f4 	bl	8010080 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800fe98:	e0e7      	b.n	801006a <HAL_SAI_IRQHandler+0x35a>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 800fe9a:	697b      	ldr	r3, [r7, #20]
 800fe9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d05b      	beq.n	800ff5c <HAL_SAI_IRQHandler+0x24c>
 800fea4:	693b      	ldr	r3, [r7, #16]
 800fea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d056      	beq.n	800ff5c <HAL_SAI_IRQHandler+0x24c>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	2240      	movs	r2, #64	; 0x40
 800feb4:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800febc:	f043 0208 	orr.w	r2, r3, #8
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d03e      	beq.n	800ff4e <HAL_SAI_IRQHandler+0x23e>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d018      	beq.n	800ff0c <HAL_SAI_IRQHandler+0x1fc>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fee0:	4a66      	ldr	r2, [pc, #408]	; (801007c <HAL_SAI_IRQHandler+0x36c>)
 800fee2:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800feea:	4618      	mov	r0, r3
 800feec:	f7f7 fc60 	bl	80077b0 <HAL_DMA_Abort_IT>
 800fef0:	4603      	mov	r3, r0
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d00a      	beq.n	800ff0c <HAL_SAI_IRQHandler+0x1fc>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fefc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800ff06:	6878      	ldr	r0, [r7, #4]
 800ff08:	f000 f8ba 	bl	8010080 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	f000 80ab 	beq.w	801006e <HAL_SAI_IRQHandler+0x35e>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ff1e:	4a57      	ldr	r2, [pc, #348]	; (801007c <HAL_SAI_IRQHandler+0x36c>)
 800ff20:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ff28:	4618      	mov	r0, r3
 800ff2a:	f7f7 fc41 	bl	80077b0 <HAL_DMA_Abort_IT>
 800ff2e:	4603      	mov	r3, r0
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	f000 809c 	beq.w	801006e <HAL_SAI_IRQHandler+0x35e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ff3c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800ff46:	6878      	ldr	r0, [r7, #4]
 800ff48:	f000 f89a 	bl	8010080 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800ff4c:	e08f      	b.n	801006e <HAL_SAI_IRQHandler+0x35e>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 800ff4e:	6878      	ldr	r0, [r7, #4]
 800ff50:	f7ff fd98 	bl	800fa84 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800ff54:	6878      	ldr	r0, [r7, #4]
 800ff56:	f000 f893 	bl	8010080 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800ff5a:	e088      	b.n	801006e <HAL_SAI_IRQHandler+0x35e>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 800ff5c:	697b      	ldr	r3, [r7, #20]
 800ff5e:	f003 0304 	and.w	r3, r3, #4
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d067      	beq.n	8010036 <HAL_SAI_IRQHandler+0x326>
 800ff66:	693b      	ldr	r3, [r7, #16]
 800ff68:	f003 0304 	and.w	r3, r3, #4
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d062      	beq.n	8010036 <HAL_SAI_IRQHandler+0x326>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	2204      	movs	r2, #4
 800ff76:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ff7e:	f043 0220 	orr.w	r2, r3, #32
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d03c      	beq.n	801000c <HAL_SAI_IRQHandler+0x2fc>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d018      	beq.n	800ffce <HAL_SAI_IRQHandler+0x2be>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ffa2:	4a36      	ldr	r2, [pc, #216]	; (801007c <HAL_SAI_IRQHandler+0x36c>)
 800ffa4:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ffac:	4618      	mov	r0, r3
 800ffae:	f7f7 fbff 	bl	80077b0 <HAL_DMA_Abort_IT>
 800ffb2:	4603      	mov	r3, r0
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d00a      	beq.n	800ffce <HAL_SAI_IRQHandler+0x2be>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ffbe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800ffc8:	6878      	ldr	r0, [r7, #4]
 800ffca:	f000 f859 	bl	8010080 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d04c      	beq.n	8010072 <HAL_SAI_IRQHandler+0x362>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ffde:	4a27      	ldr	r2, [pc, #156]	; (801007c <HAL_SAI_IRQHandler+0x36c>)
 800ffe0:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ffe8:	4618      	mov	r0, r3
 800ffea:	f7f7 fbe1 	bl	80077b0 <HAL_DMA_Abort_IT>
 800ffee:	4603      	mov	r3, r0
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d03e      	beq.n	8010072 <HAL_SAI_IRQHandler+0x362>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fffa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8010004:	6878      	ldr	r0, [r7, #4]
 8010006:	f000 f83b 	bl	8010080 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 801000a:	e032      	b.n	8010072 <HAL_SAI_IRQHandler+0x362>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	2200      	movs	r2, #0
 8010012:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	f04f 32ff 	mov.w	r2, #4294967295
 801001c:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	2201      	movs	r2, #1
 8010022:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	2200      	movs	r2, #0
 801002a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 801002e:	6878      	ldr	r0, [r7, #4]
 8010030:	f000 f826 	bl	8010080 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8010034:	e01d      	b.n	8010072 <HAL_SAI_IRQHandler+0x362>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 8010036:	697b      	ldr	r3, [r7, #20]
 8010038:	f003 0310 	and.w	r3, r3, #16
 801003c:	2b00      	cmp	r3, #0
 801003e:	d019      	beq.n	8010074 <HAL_SAI_IRQHandler+0x364>
 8010040:	693b      	ldr	r3, [r7, #16]
 8010042:	f003 0310 	and.w	r3, r3, #16
 8010046:	2b00      	cmp	r3, #0
 8010048:	d014      	beq.n	8010074 <HAL_SAI_IRQHandler+0x364>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	2210      	movs	r2, #16
 8010050:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010058:	f043 0210 	orr.w	r2, r3, #16
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8010062:	6878      	ldr	r0, [r7, #4]
 8010064:	f000 f80c 	bl	8010080 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 8010068:	e004      	b.n	8010074 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 801006a:	bf00      	nop
 801006c:	e002      	b.n	8010074 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 801006e:	bf00      	nop
 8010070:	e000      	b.n	8010074 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8010072:	bf00      	nop
}
 8010074:	bf00      	nop
 8010076:	3718      	adds	r7, #24
 8010078:	46bd      	mov	sp, r7
 801007a:	bd80      	pop	{r7, pc}
 801007c:	080104bb 	.word	0x080104bb

08010080 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8010080:	b480      	push	{r7}
 8010082:	b083      	sub	sp, #12
 8010084:	af00      	add	r7, sp, #0
 8010086:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8010088:	bf00      	nop
 801008a:	370c      	adds	r7, #12
 801008c:	46bd      	mov	sp, r7
 801008e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010092:	4770      	bx	lr

08010094 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8010094:	b480      	push	{r7}
 8010096:	b087      	sub	sp, #28
 8010098:	af00      	add	r7, sp, #0
 801009a:	60f8      	str	r0, [r7, #12]
 801009c:	60b9      	str	r1, [r7, #8]
 801009e:	607a      	str	r2, [r7, #4]
 80100a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80100a2:	2300      	movs	r3, #0
 80100a4:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	2200      	movs	r2, #0
 80100aa:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	2200      	movs	r2, #0
 80100b0:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	685b      	ldr	r3, [r3, #4]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d003      	beq.n	80100c2 <SAI_InitI2S+0x2e>
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	685b      	ldr	r3, [r3, #4]
 80100be:	2b02      	cmp	r3, #2
 80100c0:	d103      	bne.n	80100ca <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	2200      	movs	r2, #0
 80100c6:	651a      	str	r2, [r3, #80]	; 0x50
 80100c8:	e002      	b.n	80100d0 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	2201      	movs	r2, #1
 80100ce:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80100d6:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80100de:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	2200      	movs	r2, #0
 80100e4:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	683a      	ldr	r2, [r7, #0]
 80100ea:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80100ec:	683b      	ldr	r3, [r7, #0]
 80100ee:	f003 0301 	and.w	r3, r3, #1
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d001      	beq.n	80100fa <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 80100f6:	2301      	movs	r3, #1
 80100f8:	e077      	b.n	80101ea <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 80100fa:	68bb      	ldr	r3, [r7, #8]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d107      	bne.n	8010110 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	2200      	movs	r2, #0
 8010104:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 801010c:	665a      	str	r2, [r3, #100]	; 0x64
 801010e:	e006      	b.n	801011e <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8010116:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	2200      	movs	r2, #0
 801011c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Frame definition */
  switch (datasize)
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	2b03      	cmp	r3, #3
 8010122:	d84f      	bhi.n	80101c4 <SAI_InitI2S+0x130>
 8010124:	a201      	add	r2, pc, #4	; (adr r2, 801012c <SAI_InitI2S+0x98>)
 8010126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801012a:	bf00      	nop
 801012c:	0801013d 	.word	0x0801013d
 8010130:	0801015f 	.word	0x0801015f
 8010134:	08010181 	.word	0x08010181
 8010138:	080101a3 	.word	0x080101a3
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	2280      	movs	r2, #128	; 0x80
 8010140:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8010142:	683b      	ldr	r3, [r7, #0]
 8010144:	085b      	lsrs	r3, r3, #1
 8010146:	015a      	lsls	r2, r3, #5
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 801014c:	683b      	ldr	r3, [r7, #0]
 801014e:	085b      	lsrs	r3, r3, #1
 8010150:	011a      	lsls	r2, r3, #4
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	2240      	movs	r2, #64	; 0x40
 801015a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 801015c:	e035      	b.n	80101ca <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	2280      	movs	r2, #128	; 0x80
 8010162:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8010164:	683b      	ldr	r3, [r7, #0]
 8010166:	085b      	lsrs	r3, r3, #1
 8010168:	019a      	lsls	r2, r3, #6
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 801016e:	683b      	ldr	r3, [r7, #0]
 8010170:	085b      	lsrs	r3, r3, #1
 8010172:	015a      	lsls	r2, r3, #5
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	2280      	movs	r2, #128	; 0x80
 801017c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 801017e:	e024      	b.n	80101ca <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	22c0      	movs	r2, #192	; 0xc0
 8010184:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8010186:	683b      	ldr	r3, [r7, #0]
 8010188:	085b      	lsrs	r3, r3, #1
 801018a:	019a      	lsls	r2, r3, #6
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8010190:	683b      	ldr	r3, [r7, #0]
 8010192:	085b      	lsrs	r3, r3, #1
 8010194:	015a      	lsls	r2, r3, #5
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	2280      	movs	r2, #128	; 0x80
 801019e:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80101a0:	e013      	b.n	80101ca <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	22e0      	movs	r2, #224	; 0xe0
 80101a6:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80101a8:	683b      	ldr	r3, [r7, #0]
 80101aa:	085b      	lsrs	r3, r3, #1
 80101ac:	019a      	lsls	r2, r3, #6
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80101b2:	683b      	ldr	r3, [r7, #0]
 80101b4:	085b      	lsrs	r3, r3, #1
 80101b6:	015a      	lsls	r2, r3, #5
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	2280      	movs	r2, #128	; 0x80
 80101c0:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80101c2:	e002      	b.n	80101ca <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 80101c4:	2301      	movs	r3, #1
 80101c6:	75fb      	strb	r3, [r7, #23]
      break;
 80101c8:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80101ca:	68bb      	ldr	r3, [r7, #8]
 80101cc:	2b02      	cmp	r3, #2
 80101ce:	d10b      	bne.n	80101e8 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	2b01      	cmp	r3, #1
 80101d4:	d102      	bne.n	80101dc <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	2210      	movs	r2, #16
 80101da:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	2b02      	cmp	r3, #2
 80101e0:	d102      	bne.n	80101e8 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	2208      	movs	r2, #8
 80101e6:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 80101e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80101ea:	4618      	mov	r0, r3
 80101ec:	371c      	adds	r7, #28
 80101ee:	46bd      	mov	sp, r7
 80101f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f4:	4770      	bx	lr
 80101f6:	bf00      	nop

080101f8 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80101f8:	b480      	push	{r7}
 80101fa:	b087      	sub	sp, #28
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	60f8      	str	r0, [r7, #12]
 8010200:	60b9      	str	r1, [r7, #8]
 8010202:	607a      	str	r2, [r7, #4]
 8010204:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010206:	2300      	movs	r3, #0
 8010208:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	2200      	movs	r2, #0
 801020e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	2200      	movs	r2, #0
 8010214:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	685b      	ldr	r3, [r3, #4]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d003      	beq.n	8010226 <SAI_InitPCM+0x2e>
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	685b      	ldr	r3, [r3, #4]
 8010222:	2b02      	cmp	r3, #2
 8010224:	d103      	bne.n	801022e <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	2201      	movs	r2, #1
 801022a:	651a      	str	r2, [r3, #80]	; 0x50
 801022c:	e002      	b.n	8010234 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	2200      	movs	r2, #0
 8010232:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	2200      	movs	r2, #0
 8010238:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8010240:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8010248:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	2200      	movs	r2, #0
 801024e:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	683a      	ldr	r2, [r7, #0]
 8010254:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801025c:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 801025e:	68bb      	ldr	r3, [r7, #8]
 8010260:	2b04      	cmp	r3, #4
 8010262:	d103      	bne.n	801026c <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	2201      	movs	r2, #1
 8010268:	659a      	str	r2, [r3, #88]	; 0x58
 801026a:	e002      	b.n	8010272 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	220d      	movs	r2, #13
 8010270:	659a      	str	r2, [r3, #88]	; 0x58
  }

  switch (datasize)
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	2b03      	cmp	r3, #3
 8010276:	d837      	bhi.n	80102e8 <SAI_InitPCM+0xf0>
 8010278:	a201      	add	r2, pc, #4	; (adr r2, 8010280 <SAI_InitPCM+0x88>)
 801027a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801027e:	bf00      	nop
 8010280:	08010291 	.word	0x08010291
 8010284:	080102a7 	.word	0x080102a7
 8010288:	080102bd 	.word	0x080102bd
 801028c:	080102d3 	.word	0x080102d3
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	2280      	movs	r2, #128	; 0x80
 8010294:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8010296:	683b      	ldr	r3, [r7, #0]
 8010298:	011a      	lsls	r2, r3, #4
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	2240      	movs	r2, #64	; 0x40
 80102a2:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80102a4:	e023      	b.n	80102ee <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	2280      	movs	r2, #128	; 0x80
 80102aa:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80102ac:	683b      	ldr	r3, [r7, #0]
 80102ae:	015a      	lsls	r2, r3, #5
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	2280      	movs	r2, #128	; 0x80
 80102b8:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80102ba:	e018      	b.n	80102ee <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	22c0      	movs	r2, #192	; 0xc0
 80102c0:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80102c2:	683b      	ldr	r3, [r7, #0]
 80102c4:	015a      	lsls	r2, r3, #5
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	2280      	movs	r2, #128	; 0x80
 80102ce:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80102d0:	e00d      	b.n	80102ee <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	22e0      	movs	r2, #224	; 0xe0
 80102d6:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 80102d8:	683b      	ldr	r3, [r7, #0]
 80102da:	015a      	lsls	r2, r3, #5
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	2280      	movs	r2, #128	; 0x80
 80102e4:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80102e6:	e002      	b.n	80102ee <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 80102e8:	2301      	movs	r3, #1
 80102ea:	75fb      	strb	r3, [r7, #23]
      break;
 80102ec:	bf00      	nop
  }

  return status;
 80102ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80102f0:	4618      	mov	r0, r3
 80102f2:	371c      	adds	r7, #28
 80102f4:	46bd      	mov	sp, r7
 80102f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102fa:	4770      	bx	lr

080102fc <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 80102fc:	b480      	push	{r7}
 80102fe:	b085      	sub	sp, #20
 8010300:	af00      	add	r7, sp, #0
 8010302:	6078      	str	r0, [r7, #4]
 8010304:	460b      	mov	r3, r1
 8010306:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8010308:	2301      	movs	r3, #1
 801030a:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 801030c:	78fb      	ldrb	r3, [r7, #3]
 801030e:	2b01      	cmp	r3, #1
 8010310:	d103      	bne.n	801031a <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	f043 0308 	orr.w	r3, r3, #8
 8010318:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801031e:	2b08      	cmp	r3, #8
 8010320:	d10b      	bne.n	801033a <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8010326:	2b03      	cmp	r3, #3
 8010328:	d003      	beq.n	8010332 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	685b      	ldr	r3, [r3, #4]
 801032e:	2b01      	cmp	r3, #1
 8010330:	d103      	bne.n	801033a <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	f043 0310 	orr.w	r3, r3, #16
 8010338:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	685b      	ldr	r3, [r3, #4]
 801033e:	2b03      	cmp	r3, #3
 8010340:	d003      	beq.n	801034a <SAI_InterruptFlag+0x4e>
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	685b      	ldr	r3, [r3, #4]
 8010346:	2b02      	cmp	r3, #2
 8010348:	d104      	bne.n	8010354 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8010350:	60fb      	str	r3, [r7, #12]
 8010352:	e003      	b.n	801035c <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	f043 0304 	orr.w	r3, r3, #4
 801035a:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 801035c:	68fb      	ldr	r3, [r7, #12]
}
 801035e:	4618      	mov	r0, r3
 8010360:	3714      	adds	r7, #20
 8010362:	46bd      	mov	sp, r7
 8010364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010368:	4770      	bx	lr
	...

0801036c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 801036c:	b480      	push	{r7}
 801036e:	b085      	sub	sp, #20
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8010374:	4b18      	ldr	r3, [pc, #96]	; (80103d8 <SAI_Disable+0x6c>)
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	4a18      	ldr	r2, [pc, #96]	; (80103dc <SAI_Disable+0x70>)
 801037a:	fba2 2303 	umull	r2, r3, r2, r3
 801037e:	0b1b      	lsrs	r3, r3, #12
 8010380:	009b      	lsls	r3, r3, #2
 8010382:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8010384:	2300      	movs	r3, #0
 8010386:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	681a      	ldr	r2, [r3, #0]
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8010396:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d10a      	bne.n	80103b4 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80103a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 80103ae:	2303      	movs	r3, #3
 80103b0:	72fb      	strb	r3, [r7, #11]
      break;
 80103b2:	e009      	b.n	80103c8 <SAI_Disable+0x5c>
    }
    count--;
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	3b01      	subs	r3, #1
 80103b8:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d1e7      	bne.n	8010398 <SAI_Disable+0x2c>

  return status;
 80103c8:	7afb      	ldrb	r3, [r7, #11]
}
 80103ca:	4618      	mov	r0, r3
 80103cc:	3714      	adds	r7, #20
 80103ce:	46bd      	mov	sp, r7
 80103d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d4:	4770      	bx	lr
 80103d6:	bf00      	nop
 80103d8:	20000044 	.word	0x20000044
 80103dc:	95cbec1b 	.word	0x95cbec1b

080103e0 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80103e0:	b580      	push	{r7, lr}
 80103e2:	b084      	sub	sp, #16
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103ec:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	69db      	ldr	r3, [r3, #28]
 80103f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80103f6:	d01c      	beq.n	8010432 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	2200      	movs	r2, #0
 80103fc:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	681a      	ldr	r2, [r3, #0]
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 801040e:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8010410:	2100      	movs	r1, #0
 8010412:	68f8      	ldr	r0, [r7, #12]
 8010414:	f7ff ff72 	bl	80102fc <SAI_InterruptFlag>
 8010418:	4603      	mov	r3, r0
 801041a:	43d9      	mvns	r1, r3
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	691a      	ldr	r2, [r3, #16]
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	400a      	ands	r2, r1
 8010428:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	2201      	movs	r2, #1
 801042e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8010432:	68f8      	ldr	r0, [r7, #12]
 8010434:	f7f0 ff9c 	bl	8001370 <HAL_SAI_TxCpltCallback>
#endif
}
 8010438:	bf00      	nop
 801043a:	3710      	adds	r7, #16
 801043c:	46bd      	mov	sp, r7
 801043e:	bd80      	pop	{r7, pc}

08010440 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010440:	b580      	push	{r7, lr}
 8010442:	b084      	sub	sp, #16
 8010444:	af00      	add	r7, sp, #0
 8010446:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801044c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 801044e:	68f8      	ldr	r0, [r7, #12]
 8010450:	f7f0 ff2c 	bl	80012ac <HAL_SAI_TxHalfCpltCallback>
#endif
}
 8010454:	bf00      	nop
 8010456:	3710      	adds	r7, #16
 8010458:	46bd      	mov	sp, r7
 801045a:	bd80      	pop	{r7, pc}

0801045c <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 801045c:	b580      	push	{r7, lr}
 801045e:	b084      	sub	sp, #16
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010468:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 801046a:	6878      	ldr	r0, [r7, #4]
 801046c:	f7f8 fb48 	bl	8008b00 <HAL_DMA_GetError>
 8010470:	4603      	mov	r3, r0
 8010472:	2b02      	cmp	r3, #2
 8010474:	d01d      	beq.n	80104b2 <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801047c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	681a      	ldr	r2, [r3, #0]
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8010494:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8010496:	68f8      	ldr	r0, [r7, #12]
 8010498:	f7ff ff68 	bl	801036c <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	2201      	movs	r2, #1
 80104a0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	2200      	movs	r2, #0
 80104a8:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 80104ac:	68f8      	ldr	r0, [r7, #12]
 80104ae:	f7ff fde7 	bl	8010080 <HAL_SAI_ErrorCallback>
#endif
  }
}
 80104b2:	bf00      	nop
 80104b4:	3710      	adds	r7, #16
 80104b6:	46bd      	mov	sp, r7
 80104b8:	bd80      	pop	{r7, pc}

080104ba <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80104ba:	b580      	push	{r7, lr}
 80104bc:	b084      	sub	sp, #16
 80104be:	af00      	add	r7, sp, #0
 80104c0:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104c6:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	681a      	ldr	r2, [r3, #0]
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80104d6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	2200      	movs	r2, #0
 80104de:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	f04f 32ff 	mov.w	r2, #4294967295
 80104e8:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80104f0:	2b20      	cmp	r3, #32
 80104f2:	d00a      	beq.n	801050a <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 80104f4:	68f8      	ldr	r0, [r7, #12]
 80104f6:	f7ff ff39 	bl	801036c <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	685a      	ldr	r2, [r3, #4]
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	f042 0208 	orr.w	r2, r2, #8
 8010508:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	2201      	movs	r2, #1
 801050e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	2200      	movs	r2, #0
 8010516:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 801051a:	68f8      	ldr	r0, [r7, #12]
 801051c:	f7ff fdb0 	bl	8010080 <HAL_SAI_ErrorCallback>
#endif
}
 8010520:	bf00      	nop
 8010522:	3710      	adds	r7, #16
 8010524:	46bd      	mov	sp, r7
 8010526:	bd80      	pop	{r7, pc}

08010528 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010528:	b580      	push	{r7, lr}
 801052a:	b084      	sub	sp, #16
 801052c:	af00      	add	r7, sp, #0
 801052e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d101      	bne.n	801053a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8010536:	2301      	movs	r3, #1
 8010538:	e10f      	b.n	801075a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	2200      	movs	r2, #0
 801053e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	4a87      	ldr	r2, [pc, #540]	; (8010764 <HAL_SPI_Init+0x23c>)
 8010546:	4293      	cmp	r3, r2
 8010548:	d00f      	beq.n	801056a <HAL_SPI_Init+0x42>
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	4a86      	ldr	r2, [pc, #536]	; (8010768 <HAL_SPI_Init+0x240>)
 8010550:	4293      	cmp	r3, r2
 8010552:	d00a      	beq.n	801056a <HAL_SPI_Init+0x42>
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	4a84      	ldr	r2, [pc, #528]	; (801076c <HAL_SPI_Init+0x244>)
 801055a:	4293      	cmp	r3, r2
 801055c:	d005      	beq.n	801056a <HAL_SPI_Init+0x42>
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	68db      	ldr	r3, [r3, #12]
 8010562:	2b0f      	cmp	r3, #15
 8010564:	d901      	bls.n	801056a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8010566:	2301      	movs	r3, #1
 8010568:	e0f7      	b.n	801075a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 801056a:	6878      	ldr	r0, [r7, #4]
 801056c:	f000 fbca 	bl	8010d04 <SPI_GetPacketSize>
 8010570:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	4a7b      	ldr	r2, [pc, #492]	; (8010764 <HAL_SPI_Init+0x23c>)
 8010578:	4293      	cmp	r3, r2
 801057a:	d00c      	beq.n	8010596 <HAL_SPI_Init+0x6e>
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	4a79      	ldr	r2, [pc, #484]	; (8010768 <HAL_SPI_Init+0x240>)
 8010582:	4293      	cmp	r3, r2
 8010584:	d007      	beq.n	8010596 <HAL_SPI_Init+0x6e>
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	4a78      	ldr	r2, [pc, #480]	; (801076c <HAL_SPI_Init+0x244>)
 801058c:	4293      	cmp	r3, r2
 801058e:	d002      	beq.n	8010596 <HAL_SPI_Init+0x6e>
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	2b08      	cmp	r3, #8
 8010594:	d811      	bhi.n	80105ba <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801059a:	4a72      	ldr	r2, [pc, #456]	; (8010764 <HAL_SPI_Init+0x23c>)
 801059c:	4293      	cmp	r3, r2
 801059e:	d009      	beq.n	80105b4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	4a70      	ldr	r2, [pc, #448]	; (8010768 <HAL_SPI_Init+0x240>)
 80105a6:	4293      	cmp	r3, r2
 80105a8:	d004      	beq.n	80105b4 <HAL_SPI_Init+0x8c>
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	4a6f      	ldr	r2, [pc, #444]	; (801076c <HAL_SPI_Init+0x244>)
 80105b0:	4293      	cmp	r3, r2
 80105b2:	d104      	bne.n	80105be <HAL_SPI_Init+0x96>
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	2b10      	cmp	r3, #16
 80105b8:	d901      	bls.n	80105be <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80105ba:	2301      	movs	r3, #1
 80105bc:	e0cd      	b.n	801075a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80105c4:	b2db      	uxtb	r3, r3
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d106      	bne.n	80105d8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	2200      	movs	r2, #0
 80105ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80105d2:	6878      	ldr	r0, [r7, #4]
 80105d4:	f7f3 f9be 	bl	8003954 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	2202      	movs	r2, #2
 80105dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	681a      	ldr	r2, [r3, #0]
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	f022 0201 	bic.w	r2, r2, #1
 80105ee:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	689b      	ldr	r3, [r3, #8]
 80105f6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80105fa:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	699b      	ldr	r3, [r3, #24]
 8010600:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010604:	d119      	bne.n	801063a <HAL_SPI_Init+0x112>
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	685b      	ldr	r3, [r3, #4]
 801060a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801060e:	d103      	bne.n	8010618 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8010614:	2b00      	cmp	r3, #0
 8010616:	d008      	beq.n	801062a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801061c:	2b00      	cmp	r3, #0
 801061e:	d10c      	bne.n	801063a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8010624:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010628:	d107      	bne.n	801063a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	681a      	ldr	r2, [r3, #0]
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8010638:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	685b      	ldr	r3, [r3, #4]
 801063e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010642:	2b00      	cmp	r3, #0
 8010644:	d00f      	beq.n	8010666 <HAL_SPI_Init+0x13e>
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	68db      	ldr	r3, [r3, #12]
 801064a:	2b06      	cmp	r3, #6
 801064c:	d90b      	bls.n	8010666 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	430a      	orrs	r2, r1
 8010662:	601a      	str	r2, [r3, #0]
 8010664:	e007      	b.n	8010676 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	681a      	ldr	r2, [r3, #0]
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010674:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	69da      	ldr	r2, [r3, #28]
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801067e:	431a      	orrs	r2, r3
 8010680:	68bb      	ldr	r3, [r7, #8]
 8010682:	431a      	orrs	r2, r3
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010688:	ea42 0103 	orr.w	r1, r2, r3
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	68da      	ldr	r2, [r3, #12]
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	430a      	orrs	r2, r1
 8010696:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106a0:	431a      	orrs	r2, r3
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106a6:	431a      	orrs	r2, r3
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	699b      	ldr	r3, [r3, #24]
 80106ac:	431a      	orrs	r2, r3
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	691b      	ldr	r3, [r3, #16]
 80106b2:	431a      	orrs	r2, r3
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	695b      	ldr	r3, [r3, #20]
 80106b8:	431a      	orrs	r2, r3
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	6a1b      	ldr	r3, [r3, #32]
 80106be:	431a      	orrs	r2, r3
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	685b      	ldr	r3, [r3, #4]
 80106c4:	431a      	orrs	r2, r3
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80106ca:	431a      	orrs	r2, r3
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	689b      	ldr	r3, [r3, #8]
 80106d0:	431a      	orrs	r2, r3
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80106d6:	ea42 0103 	orr.w	r1, r2, r3
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	430a      	orrs	r2, r1
 80106e4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	685b      	ldr	r3, [r3, #4]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d113      	bne.n	8010716 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	689b      	ldr	r3, [r3, #8]
 80106f4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010700:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	689b      	ldr	r3, [r3, #8]
 8010708:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010714:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	f022 0201 	bic.w	r2, r2, #1
 8010724:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	685b      	ldr	r3, [r3, #4]
 801072a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801072e:	2b00      	cmp	r3, #0
 8010730:	d00a      	beq.n	8010748 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	68db      	ldr	r3, [r3, #12]
 8010738:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	430a      	orrs	r2, r1
 8010746:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	2200      	movs	r2, #0
 801074c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	2201      	movs	r2, #1
 8010754:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8010758:	2300      	movs	r3, #0
}
 801075a:	4618      	mov	r0, r3
 801075c:	3710      	adds	r7, #16
 801075e:	46bd      	mov	sp, r7
 8010760:	bd80      	pop	{r7, pc}
 8010762:	bf00      	nop
 8010764:	40013000 	.word	0x40013000
 8010768:	40003800 	.word	0x40003800
 801076c:	40003c00 	.word	0x40003c00

08010770 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010770:	b580      	push	{r7, lr}
 8010772:	b08a      	sub	sp, #40	; 0x28
 8010774:	af02      	add	r7, sp, #8
 8010776:	60f8      	str	r0, [r7, #12]
 8010778:	60b9      	str	r1, [r7, #8]
 801077a:	603b      	str	r3, [r7, #0]
 801077c:	4613      	mov	r3, r2
 801077e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	3320      	adds	r3, #32
 8010786:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8010788:	2300      	movs	r3, #0
 801078a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010792:	2b01      	cmp	r3, #1
 8010794:	d101      	bne.n	801079a <HAL_SPI_Transmit+0x2a>
 8010796:	2302      	movs	r3, #2
 8010798:	e1e1      	b.n	8010b5e <HAL_SPI_Transmit+0x3ee>
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	2201      	movs	r2, #1
 801079e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80107a2:	f7f3 fca7 	bl	80040f4 <HAL_GetTick>
 80107a6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80107ae:	b2db      	uxtb	r3, r3
 80107b0:	2b01      	cmp	r3, #1
 80107b2:	d007      	beq.n	80107c4 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80107b4:	2302      	movs	r3, #2
 80107b6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	2200      	movs	r2, #0
 80107bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80107c0:	7efb      	ldrb	r3, [r7, #27]
 80107c2:	e1cc      	b.n	8010b5e <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 80107c4:	68bb      	ldr	r3, [r7, #8]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d002      	beq.n	80107d0 <HAL_SPI_Transmit+0x60>
 80107ca:	88fb      	ldrh	r3, [r7, #6]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d107      	bne.n	80107e0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80107d0:	2301      	movs	r3, #1
 80107d2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	2200      	movs	r2, #0
 80107d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80107dc:	7efb      	ldrb	r3, [r7, #27]
 80107de:	e1be      	b.n	8010b5e <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	2203      	movs	r2, #3
 80107e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	2200      	movs	r2, #0
 80107ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	68ba      	ldr	r2, [r7, #8]
 80107f4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	88fa      	ldrh	r2, [r7, #6]
 80107fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	88fa      	ldrh	r2, [r7, #6]
 8010802:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	2200      	movs	r2, #0
 801080a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	2200      	movs	r2, #0
 8010810:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	2200      	movs	r2, #0
 8010818:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	2200      	movs	r2, #0
 8010820:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	2200      	movs	r2, #0
 8010826:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	689b      	ldr	r3, [r3, #8]
 801082c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8010830:	d108      	bne.n	8010844 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	681a      	ldr	r2, [r3, #0]
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010840:	601a      	str	r2, [r3, #0]
 8010842:	e009      	b.n	8010858 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	68db      	ldr	r3, [r3, #12]
 801084a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8010856:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	685a      	ldr	r2, [r3, #4]
 801085e:	4b96      	ldr	r3, [pc, #600]	; (8010ab8 <HAL_SPI_Transmit+0x348>)
 8010860:	4013      	ands	r3, r2
 8010862:	88f9      	ldrh	r1, [r7, #6]
 8010864:	68fa      	ldr	r2, [r7, #12]
 8010866:	6812      	ldr	r2, [r2, #0]
 8010868:	430b      	orrs	r3, r1
 801086a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	681a      	ldr	r2, [r3, #0]
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	f042 0201 	orr.w	r2, r2, #1
 801087a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	685b      	ldr	r3, [r3, #4]
 8010880:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010884:	d107      	bne.n	8010896 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	681a      	ldr	r2, [r3, #0]
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010894:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	68db      	ldr	r3, [r3, #12]
 801089a:	2b0f      	cmp	r3, #15
 801089c:	d947      	bls.n	801092e <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 801089e:	e03f      	b.n	8010920 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	695b      	ldr	r3, [r3, #20]
 80108a6:	f003 0302 	and.w	r3, r3, #2
 80108aa:	2b02      	cmp	r3, #2
 80108ac:	d114      	bne.n	80108d8 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	6812      	ldr	r2, [r2, #0]
 80108b8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80108be:	1d1a      	adds	r2, r3, #4
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80108ca:	b29b      	uxth	r3, r3
 80108cc:	3b01      	subs	r3, #1
 80108ce:	b29a      	uxth	r2, r3
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80108d6:	e023      	b.n	8010920 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80108d8:	f7f3 fc0c 	bl	80040f4 <HAL_GetTick>
 80108dc:	4602      	mov	r2, r0
 80108de:	697b      	ldr	r3, [r7, #20]
 80108e0:	1ad3      	subs	r3, r2, r3
 80108e2:	683a      	ldr	r2, [r7, #0]
 80108e4:	429a      	cmp	r2, r3
 80108e6:	d803      	bhi.n	80108f0 <HAL_SPI_Transmit+0x180>
 80108e8:	683b      	ldr	r3, [r7, #0]
 80108ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108ee:	d102      	bne.n	80108f6 <HAL_SPI_Transmit+0x186>
 80108f0:	683b      	ldr	r3, [r7, #0]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d114      	bne.n	8010920 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80108f6:	68f8      	ldr	r0, [r7, #12]
 80108f8:	f000 f936 	bl	8010b68 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	2200      	movs	r2, #0
 8010900:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801090a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	2201      	movs	r2, #1
 8010918:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 801091c:	2303      	movs	r3, #3
 801091e:	e11e      	b.n	8010b5e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010926:	b29b      	uxth	r3, r3
 8010928:	2b00      	cmp	r3, #0
 801092a:	d1b9      	bne.n	80108a0 <HAL_SPI_Transmit+0x130>
 801092c:	e0f1      	b.n	8010b12 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	68db      	ldr	r3, [r3, #12]
 8010932:	2b07      	cmp	r3, #7
 8010934:	f240 80e6 	bls.w	8010b04 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8010938:	e05d      	b.n	80109f6 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	695b      	ldr	r3, [r3, #20]
 8010940:	f003 0302 	and.w	r3, r3, #2
 8010944:	2b02      	cmp	r3, #2
 8010946:	d132      	bne.n	80109ae <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801094e:	b29b      	uxth	r3, r3
 8010950:	2b01      	cmp	r3, #1
 8010952:	d918      	bls.n	8010986 <HAL_SPI_Transmit+0x216>
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010958:	2b00      	cmp	r3, #0
 801095a:	d014      	beq.n	8010986 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	6812      	ldr	r2, [r2, #0]
 8010966:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801096c:	1d1a      	adds	r2, r3, #4
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010978:	b29b      	uxth	r3, r3
 801097a:	3b02      	subs	r3, #2
 801097c:	b29a      	uxth	r2, r3
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8010984:	e037      	b.n	80109f6 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801098a:	881a      	ldrh	r2, [r3, #0]
 801098c:	69fb      	ldr	r3, [r7, #28]
 801098e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010994:	1c9a      	adds	r2, r3, #2
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80109a0:	b29b      	uxth	r3, r3
 80109a2:	3b01      	subs	r3, #1
 80109a4:	b29a      	uxth	r2, r3
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80109ac:	e023      	b.n	80109f6 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80109ae:	f7f3 fba1 	bl	80040f4 <HAL_GetTick>
 80109b2:	4602      	mov	r2, r0
 80109b4:	697b      	ldr	r3, [r7, #20]
 80109b6:	1ad3      	subs	r3, r2, r3
 80109b8:	683a      	ldr	r2, [r7, #0]
 80109ba:	429a      	cmp	r2, r3
 80109bc:	d803      	bhi.n	80109c6 <HAL_SPI_Transmit+0x256>
 80109be:	683b      	ldr	r3, [r7, #0]
 80109c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109c4:	d102      	bne.n	80109cc <HAL_SPI_Transmit+0x25c>
 80109c6:	683b      	ldr	r3, [r7, #0]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d114      	bne.n	80109f6 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80109cc:	68f8      	ldr	r0, [r7, #12]
 80109ce:	f000 f8cb 	bl	8010b68 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	2200      	movs	r2, #0
 80109d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80109e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	2201      	movs	r2, #1
 80109ee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80109f2:	2303      	movs	r3, #3
 80109f4:	e0b3      	b.n	8010b5e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80109fc:	b29b      	uxth	r3, r3
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d19b      	bne.n	801093a <HAL_SPI_Transmit+0x1ca>
 8010a02:	e086      	b.n	8010b12 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	695b      	ldr	r3, [r3, #20]
 8010a0a:	f003 0302 	and.w	r3, r3, #2
 8010a0e:	2b02      	cmp	r3, #2
 8010a10:	d154      	bne.n	8010abc <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010a18:	b29b      	uxth	r3, r3
 8010a1a:	2b03      	cmp	r3, #3
 8010a1c:	d918      	bls.n	8010a50 <HAL_SPI_Transmit+0x2e0>
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a22:	2b40      	cmp	r3, #64	; 0x40
 8010a24:	d914      	bls.n	8010a50 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	6812      	ldr	r2, [r2, #0]
 8010a30:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a36:	1d1a      	adds	r2, r3, #4
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010a42:	b29b      	uxth	r3, r3
 8010a44:	3b04      	subs	r3, #4
 8010a46:	b29a      	uxth	r2, r3
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8010a4e:	e059      	b.n	8010b04 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010a56:	b29b      	uxth	r3, r3
 8010a58:	2b01      	cmp	r3, #1
 8010a5a:	d917      	bls.n	8010a8c <HAL_SPI_Transmit+0x31c>
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d013      	beq.n	8010a8c <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a68:	881a      	ldrh	r2, [r3, #0]
 8010a6a:	69fb      	ldr	r3, [r7, #28]
 8010a6c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a72:	1c9a      	adds	r2, r3, #2
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010a7e:	b29b      	uxth	r3, r3
 8010a80:	3b02      	subs	r3, #2
 8010a82:	b29a      	uxth	r2, r3
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8010a8a:	e03b      	b.n	8010b04 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	3320      	adds	r3, #32
 8010a96:	7812      	ldrb	r2, [r2, #0]
 8010a98:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a9e:	1c5a      	adds	r2, r3, #1
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010aaa:	b29b      	uxth	r3, r3
 8010aac:	3b01      	subs	r3, #1
 8010aae:	b29a      	uxth	r2, r3
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8010ab6:	e025      	b.n	8010b04 <HAL_SPI_Transmit+0x394>
 8010ab8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010abc:	f7f3 fb1a 	bl	80040f4 <HAL_GetTick>
 8010ac0:	4602      	mov	r2, r0
 8010ac2:	697b      	ldr	r3, [r7, #20]
 8010ac4:	1ad3      	subs	r3, r2, r3
 8010ac6:	683a      	ldr	r2, [r7, #0]
 8010ac8:	429a      	cmp	r2, r3
 8010aca:	d803      	bhi.n	8010ad4 <HAL_SPI_Transmit+0x364>
 8010acc:	683b      	ldr	r3, [r7, #0]
 8010ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ad2:	d102      	bne.n	8010ada <HAL_SPI_Transmit+0x36a>
 8010ad4:	683b      	ldr	r3, [r7, #0]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d114      	bne.n	8010b04 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010ada:	68f8      	ldr	r0, [r7, #12]
 8010adc:	f000 f844 	bl	8010b68 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	2200      	movs	r2, #0
 8010ae4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010aee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	2201      	movs	r2, #1
 8010afc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8010b00:	2303      	movs	r3, #3
 8010b02:	e02c      	b.n	8010b5e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010b0a:	b29b      	uxth	r3, r3
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	f47f af79 	bne.w	8010a04 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8010b12:	697b      	ldr	r3, [r7, #20]
 8010b14:	9300      	str	r3, [sp, #0]
 8010b16:	683b      	ldr	r3, [r7, #0]
 8010b18:	2200      	movs	r2, #0
 8010b1a:	2108      	movs	r1, #8
 8010b1c:	68f8      	ldr	r0, [r7, #12]
 8010b1e:	f000 f8c3 	bl	8010ca8 <SPI_WaitOnFlagUntilTimeout>
 8010b22:	4603      	mov	r3, r0
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d007      	beq.n	8010b38 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010b2e:	f043 0220 	orr.w	r2, r3, #32
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8010b38:	68f8      	ldr	r0, [r7, #12]
 8010b3a:	f000 f815 	bl	8010b68 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	2200      	movs	r2, #0
 8010b42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	2201      	movs	r2, #1
 8010b4a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d001      	beq.n	8010b5c <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 8010b58:	2301      	movs	r3, #1
 8010b5a:	e000      	b.n	8010b5e <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 8010b5c:	7efb      	ldrb	r3, [r7, #27]
}
 8010b5e:	4618      	mov	r0, r3
 8010b60:	3720      	adds	r7, #32
 8010b62:	46bd      	mov	sp, r7
 8010b64:	bd80      	pop	{r7, pc}
 8010b66:	bf00      	nop

08010b68 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8010b68:	b480      	push	{r7}
 8010b6a:	b085      	sub	sp, #20
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	695b      	ldr	r3, [r3, #20]
 8010b76:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	699a      	ldr	r2, [r3, #24]
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	f042 0208 	orr.w	r2, r2, #8
 8010b86:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	699a      	ldr	r2, [r3, #24]
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	f042 0210 	orr.w	r2, r2, #16
 8010b96:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	681a      	ldr	r2, [r3, #0]
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	f022 0201 	bic.w	r2, r2, #1
 8010ba6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	6919      	ldr	r1, [r3, #16]
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	681a      	ldr	r2, [r3, #0]
 8010bb2:	4b3c      	ldr	r3, [pc, #240]	; (8010ca4 <SPI_CloseTransfer+0x13c>)
 8010bb4:	400b      	ands	r3, r1
 8010bb6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	689a      	ldr	r2, [r3, #8]
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8010bc6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010bce:	b2db      	uxtb	r3, r3
 8010bd0:	2b04      	cmp	r3, #4
 8010bd2:	d014      	beq.n	8010bfe <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	f003 0320 	and.w	r3, r3, #32
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d00f      	beq.n	8010bfe <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010be4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	699a      	ldr	r2, [r3, #24]
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	f042 0220 	orr.w	r2, r2, #32
 8010bfc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010c04:	b2db      	uxtb	r3, r3
 8010c06:	2b03      	cmp	r3, #3
 8010c08:	d014      	beq.n	8010c34 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d00f      	beq.n	8010c34 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010c1a:	f043 0204 	orr.w	r2, r3, #4
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	699a      	ldr	r2, [r3, #24]
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010c32:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d00f      	beq.n	8010c5e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010c44:	f043 0201 	orr.w	r2, r3, #1
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	699a      	ldr	r2, [r3, #24]
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010c5c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d00f      	beq.n	8010c88 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010c6e:	f043 0208 	orr.w	r2, r3, #8
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	699a      	ldr	r2, [r3, #24]
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010c86:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	2200      	movs	r2, #0
 8010c8c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	2200      	movs	r2, #0
 8010c94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8010c98:	bf00      	nop
 8010c9a:	3714      	adds	r7, #20
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca2:	4770      	bx	lr
 8010ca4:	fffffc90 	.word	0xfffffc90

08010ca8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b084      	sub	sp, #16
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	60f8      	str	r0, [r7, #12]
 8010cb0:	60b9      	str	r1, [r7, #8]
 8010cb2:	603b      	str	r3, [r7, #0]
 8010cb4:	4613      	mov	r3, r2
 8010cb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8010cb8:	e010      	b.n	8010cdc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010cba:	f7f3 fa1b 	bl	80040f4 <HAL_GetTick>
 8010cbe:	4602      	mov	r2, r0
 8010cc0:	69bb      	ldr	r3, [r7, #24]
 8010cc2:	1ad3      	subs	r3, r2, r3
 8010cc4:	683a      	ldr	r2, [r7, #0]
 8010cc6:	429a      	cmp	r2, r3
 8010cc8:	d803      	bhi.n	8010cd2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8010cca:	683b      	ldr	r3, [r7, #0]
 8010ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cd0:	d102      	bne.n	8010cd8 <SPI_WaitOnFlagUntilTimeout+0x30>
 8010cd2:	683b      	ldr	r3, [r7, #0]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d101      	bne.n	8010cdc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8010cd8:	2303      	movs	r3, #3
 8010cda:	e00f      	b.n	8010cfc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	695a      	ldr	r2, [r3, #20]
 8010ce2:	68bb      	ldr	r3, [r7, #8]
 8010ce4:	4013      	ands	r3, r2
 8010ce6:	68ba      	ldr	r2, [r7, #8]
 8010ce8:	429a      	cmp	r2, r3
 8010cea:	bf0c      	ite	eq
 8010cec:	2301      	moveq	r3, #1
 8010cee:	2300      	movne	r3, #0
 8010cf0:	b2db      	uxtb	r3, r3
 8010cf2:	461a      	mov	r2, r3
 8010cf4:	79fb      	ldrb	r3, [r7, #7]
 8010cf6:	429a      	cmp	r2, r3
 8010cf8:	d0df      	beq.n	8010cba <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8010cfa:	2300      	movs	r3, #0
}
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	3710      	adds	r7, #16
 8010d00:	46bd      	mov	sp, r7
 8010d02:	bd80      	pop	{r7, pc}

08010d04 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8010d04:	b480      	push	{r7}
 8010d06:	b085      	sub	sp, #20
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d10:	095b      	lsrs	r3, r3, #5
 8010d12:	3301      	adds	r3, #1
 8010d14:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	68db      	ldr	r3, [r3, #12]
 8010d1a:	3301      	adds	r3, #1
 8010d1c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8010d1e:	68bb      	ldr	r3, [r7, #8]
 8010d20:	3307      	adds	r3, #7
 8010d22:	08db      	lsrs	r3, r3, #3
 8010d24:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8010d26:	68bb      	ldr	r3, [r7, #8]
 8010d28:	68fa      	ldr	r2, [r7, #12]
 8010d2a:	fb02 f303 	mul.w	r3, r2, r3
}
 8010d2e:	4618      	mov	r0, r3
 8010d30:	3714      	adds	r7, #20
 8010d32:	46bd      	mov	sp, r7
 8010d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d38:	4770      	bx	lr

08010d3a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010d3a:	b580      	push	{r7, lr}
 8010d3c:	b082      	sub	sp, #8
 8010d3e:	af00      	add	r7, sp, #0
 8010d40:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d101      	bne.n	8010d4c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010d48:	2301      	movs	r3, #1
 8010d4a:	e049      	b.n	8010de0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010d52:	b2db      	uxtb	r3, r3
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d106      	bne.n	8010d66 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	2200      	movs	r2, #0
 8010d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010d60:	6878      	ldr	r0, [r7, #4]
 8010d62:	f7f2 fe61 	bl	8003a28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	2202      	movs	r2, #2
 8010d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	681a      	ldr	r2, [r3, #0]
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	3304      	adds	r3, #4
 8010d76:	4619      	mov	r1, r3
 8010d78:	4610      	mov	r0, r2
 8010d7a:	f000 faf7 	bl	801136c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	2201      	movs	r2, #1
 8010d82:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	2201      	movs	r2, #1
 8010d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	2201      	movs	r2, #1
 8010d92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	2201      	movs	r2, #1
 8010d9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	2201      	movs	r2, #1
 8010da2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	2201      	movs	r2, #1
 8010daa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	2201      	movs	r2, #1
 8010db2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	2201      	movs	r2, #1
 8010dba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	2201      	movs	r2, #1
 8010dc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	2201      	movs	r2, #1
 8010dca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	2201      	movs	r2, #1
 8010dd2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	2201      	movs	r2, #1
 8010dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010dde:	2300      	movs	r3, #0
}
 8010de0:	4618      	mov	r0, r3
 8010de2:	3708      	adds	r7, #8
 8010de4:	46bd      	mov	sp, r7
 8010de6:	bd80      	pop	{r7, pc}

08010de8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010de8:	b480      	push	{r7}
 8010dea:	b085      	sub	sp, #20
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010df6:	b2db      	uxtb	r3, r3
 8010df8:	2b01      	cmp	r3, #1
 8010dfa:	d001      	beq.n	8010e00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010dfc:	2301      	movs	r3, #1
 8010dfe:	e054      	b.n	8010eaa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	2202      	movs	r2, #2
 8010e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	68da      	ldr	r2, [r3, #12]
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	f042 0201 	orr.w	r2, r2, #1
 8010e16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	4a26      	ldr	r2, [pc, #152]	; (8010eb8 <HAL_TIM_Base_Start_IT+0xd0>)
 8010e1e:	4293      	cmp	r3, r2
 8010e20:	d022      	beq.n	8010e68 <HAL_TIM_Base_Start_IT+0x80>
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010e2a:	d01d      	beq.n	8010e68 <HAL_TIM_Base_Start_IT+0x80>
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	4a22      	ldr	r2, [pc, #136]	; (8010ebc <HAL_TIM_Base_Start_IT+0xd4>)
 8010e32:	4293      	cmp	r3, r2
 8010e34:	d018      	beq.n	8010e68 <HAL_TIM_Base_Start_IT+0x80>
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	4a21      	ldr	r2, [pc, #132]	; (8010ec0 <HAL_TIM_Base_Start_IT+0xd8>)
 8010e3c:	4293      	cmp	r3, r2
 8010e3e:	d013      	beq.n	8010e68 <HAL_TIM_Base_Start_IT+0x80>
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	4a1f      	ldr	r2, [pc, #124]	; (8010ec4 <HAL_TIM_Base_Start_IT+0xdc>)
 8010e46:	4293      	cmp	r3, r2
 8010e48:	d00e      	beq.n	8010e68 <HAL_TIM_Base_Start_IT+0x80>
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	4a1e      	ldr	r2, [pc, #120]	; (8010ec8 <HAL_TIM_Base_Start_IT+0xe0>)
 8010e50:	4293      	cmp	r3, r2
 8010e52:	d009      	beq.n	8010e68 <HAL_TIM_Base_Start_IT+0x80>
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	4a1c      	ldr	r2, [pc, #112]	; (8010ecc <HAL_TIM_Base_Start_IT+0xe4>)
 8010e5a:	4293      	cmp	r3, r2
 8010e5c:	d004      	beq.n	8010e68 <HAL_TIM_Base_Start_IT+0x80>
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	4a1b      	ldr	r2, [pc, #108]	; (8010ed0 <HAL_TIM_Base_Start_IT+0xe8>)
 8010e64:	4293      	cmp	r3, r2
 8010e66:	d115      	bne.n	8010e94 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	689a      	ldr	r2, [r3, #8]
 8010e6e:	4b19      	ldr	r3, [pc, #100]	; (8010ed4 <HAL_TIM_Base_Start_IT+0xec>)
 8010e70:	4013      	ands	r3, r2
 8010e72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	2b06      	cmp	r3, #6
 8010e78:	d015      	beq.n	8010ea6 <HAL_TIM_Base_Start_IT+0xbe>
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010e80:	d011      	beq.n	8010ea6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	681a      	ldr	r2, [r3, #0]
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	f042 0201 	orr.w	r2, r2, #1
 8010e90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010e92:	e008      	b.n	8010ea6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	681a      	ldr	r2, [r3, #0]
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	f042 0201 	orr.w	r2, r2, #1
 8010ea2:	601a      	str	r2, [r3, #0]
 8010ea4:	e000      	b.n	8010ea8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010ea6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010ea8:	2300      	movs	r3, #0
}
 8010eaa:	4618      	mov	r0, r3
 8010eac:	3714      	adds	r7, #20
 8010eae:	46bd      	mov	sp, r7
 8010eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb4:	4770      	bx	lr
 8010eb6:	bf00      	nop
 8010eb8:	40010000 	.word	0x40010000
 8010ebc:	40000400 	.word	0x40000400
 8010ec0:	40000800 	.word	0x40000800
 8010ec4:	40000c00 	.word	0x40000c00
 8010ec8:	40010400 	.word	0x40010400
 8010ecc:	40001800 	.word	0x40001800
 8010ed0:	40014000 	.word	0x40014000
 8010ed4:	00010007 	.word	0x00010007

08010ed8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	b082      	sub	sp, #8
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	691b      	ldr	r3, [r3, #16]
 8010ee6:	f003 0302 	and.w	r3, r3, #2
 8010eea:	2b02      	cmp	r3, #2
 8010eec:	d122      	bne.n	8010f34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	68db      	ldr	r3, [r3, #12]
 8010ef4:	f003 0302 	and.w	r3, r3, #2
 8010ef8:	2b02      	cmp	r3, #2
 8010efa:	d11b      	bne.n	8010f34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	f06f 0202 	mvn.w	r2, #2
 8010f04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	2201      	movs	r2, #1
 8010f0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	699b      	ldr	r3, [r3, #24]
 8010f12:	f003 0303 	and.w	r3, r3, #3
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d003      	beq.n	8010f22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010f1a:	6878      	ldr	r0, [r7, #4]
 8010f1c:	f000 fa08 	bl	8011330 <HAL_TIM_IC_CaptureCallback>
 8010f20:	e005      	b.n	8010f2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010f22:	6878      	ldr	r0, [r7, #4]
 8010f24:	f000 f9fa 	bl	801131c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010f28:	6878      	ldr	r0, [r7, #4]
 8010f2a:	f000 fa0b 	bl	8011344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	2200      	movs	r2, #0
 8010f32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	691b      	ldr	r3, [r3, #16]
 8010f3a:	f003 0304 	and.w	r3, r3, #4
 8010f3e:	2b04      	cmp	r3, #4
 8010f40:	d122      	bne.n	8010f88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	68db      	ldr	r3, [r3, #12]
 8010f48:	f003 0304 	and.w	r3, r3, #4
 8010f4c:	2b04      	cmp	r3, #4
 8010f4e:	d11b      	bne.n	8010f88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	f06f 0204 	mvn.w	r2, #4
 8010f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	2202      	movs	r2, #2
 8010f5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	699b      	ldr	r3, [r3, #24]
 8010f66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d003      	beq.n	8010f76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010f6e:	6878      	ldr	r0, [r7, #4]
 8010f70:	f000 f9de 	bl	8011330 <HAL_TIM_IC_CaptureCallback>
 8010f74:	e005      	b.n	8010f82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010f76:	6878      	ldr	r0, [r7, #4]
 8010f78:	f000 f9d0 	bl	801131c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010f7c:	6878      	ldr	r0, [r7, #4]
 8010f7e:	f000 f9e1 	bl	8011344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	2200      	movs	r2, #0
 8010f86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	691b      	ldr	r3, [r3, #16]
 8010f8e:	f003 0308 	and.w	r3, r3, #8
 8010f92:	2b08      	cmp	r3, #8
 8010f94:	d122      	bne.n	8010fdc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	68db      	ldr	r3, [r3, #12]
 8010f9c:	f003 0308 	and.w	r3, r3, #8
 8010fa0:	2b08      	cmp	r3, #8
 8010fa2:	d11b      	bne.n	8010fdc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	f06f 0208 	mvn.w	r2, #8
 8010fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	2204      	movs	r2, #4
 8010fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	69db      	ldr	r3, [r3, #28]
 8010fba:	f003 0303 	and.w	r3, r3, #3
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d003      	beq.n	8010fca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010fc2:	6878      	ldr	r0, [r7, #4]
 8010fc4:	f000 f9b4 	bl	8011330 <HAL_TIM_IC_CaptureCallback>
 8010fc8:	e005      	b.n	8010fd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010fca:	6878      	ldr	r0, [r7, #4]
 8010fcc:	f000 f9a6 	bl	801131c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010fd0:	6878      	ldr	r0, [r7, #4]
 8010fd2:	f000 f9b7 	bl	8011344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	2200      	movs	r2, #0
 8010fda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	691b      	ldr	r3, [r3, #16]
 8010fe2:	f003 0310 	and.w	r3, r3, #16
 8010fe6:	2b10      	cmp	r3, #16
 8010fe8:	d122      	bne.n	8011030 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	68db      	ldr	r3, [r3, #12]
 8010ff0:	f003 0310 	and.w	r3, r3, #16
 8010ff4:	2b10      	cmp	r3, #16
 8010ff6:	d11b      	bne.n	8011030 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	f06f 0210 	mvn.w	r2, #16
 8011000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	2208      	movs	r2, #8
 8011006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	69db      	ldr	r3, [r3, #28]
 801100e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011012:	2b00      	cmp	r3, #0
 8011014:	d003      	beq.n	801101e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011016:	6878      	ldr	r0, [r7, #4]
 8011018:	f000 f98a 	bl	8011330 <HAL_TIM_IC_CaptureCallback>
 801101c:	e005      	b.n	801102a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801101e:	6878      	ldr	r0, [r7, #4]
 8011020:	f000 f97c 	bl	801131c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011024:	6878      	ldr	r0, [r7, #4]
 8011026:	f000 f98d 	bl	8011344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	2200      	movs	r2, #0
 801102e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	691b      	ldr	r3, [r3, #16]
 8011036:	f003 0301 	and.w	r3, r3, #1
 801103a:	2b01      	cmp	r3, #1
 801103c:	d10e      	bne.n	801105c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	68db      	ldr	r3, [r3, #12]
 8011044:	f003 0301 	and.w	r3, r3, #1
 8011048:	2b01      	cmp	r3, #1
 801104a:	d107      	bne.n	801105c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	f06f 0201 	mvn.w	r2, #1
 8011054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8011056:	6878      	ldr	r0, [r7, #4]
 8011058:	f000 f956 	bl	8011308 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	691b      	ldr	r3, [r3, #16]
 8011062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011066:	2b80      	cmp	r3, #128	; 0x80
 8011068:	d10e      	bne.n	8011088 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	68db      	ldr	r3, [r3, #12]
 8011070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011074:	2b80      	cmp	r3, #128	; 0x80
 8011076:	d107      	bne.n	8011088 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8011080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8011082:	6878      	ldr	r0, [r7, #4]
 8011084:	f000 fb42 	bl	801170c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	691b      	ldr	r3, [r3, #16]
 801108e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011092:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011096:	d10e      	bne.n	80110b6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	68db      	ldr	r3, [r3, #12]
 801109e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80110a2:	2b80      	cmp	r3, #128	; 0x80
 80110a4:	d107      	bne.n	80110b6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80110ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80110b0:	6878      	ldr	r0, [r7, #4]
 80110b2:	f000 fb35 	bl	8011720 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	691b      	ldr	r3, [r3, #16]
 80110bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80110c0:	2b40      	cmp	r3, #64	; 0x40
 80110c2:	d10e      	bne.n	80110e2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	68db      	ldr	r3, [r3, #12]
 80110ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80110ce:	2b40      	cmp	r3, #64	; 0x40
 80110d0:	d107      	bne.n	80110e2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80110da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80110dc:	6878      	ldr	r0, [r7, #4]
 80110de:	f000 f93b 	bl	8011358 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	691b      	ldr	r3, [r3, #16]
 80110e8:	f003 0320 	and.w	r3, r3, #32
 80110ec:	2b20      	cmp	r3, #32
 80110ee:	d10e      	bne.n	801110e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	68db      	ldr	r3, [r3, #12]
 80110f6:	f003 0320 	and.w	r3, r3, #32
 80110fa:	2b20      	cmp	r3, #32
 80110fc:	d107      	bne.n	801110e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	f06f 0220 	mvn.w	r2, #32
 8011106:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8011108:	6878      	ldr	r0, [r7, #4]
 801110a:	f000 faf5 	bl	80116f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801110e:	bf00      	nop
 8011110:	3708      	adds	r7, #8
 8011112:	46bd      	mov	sp, r7
 8011114:	bd80      	pop	{r7, pc}
	...

08011118 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8011118:	b580      	push	{r7, lr}
 801111a:	b084      	sub	sp, #16
 801111c:	af00      	add	r7, sp, #0
 801111e:	6078      	str	r0, [r7, #4]
 8011120:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011122:	2300      	movs	r3, #0
 8011124:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801112c:	2b01      	cmp	r3, #1
 801112e:	d101      	bne.n	8011134 <HAL_TIM_ConfigClockSource+0x1c>
 8011130:	2302      	movs	r3, #2
 8011132:	e0dc      	b.n	80112ee <HAL_TIM_ConfigClockSource+0x1d6>
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	2201      	movs	r2, #1
 8011138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	2202      	movs	r2, #2
 8011140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	689b      	ldr	r3, [r3, #8]
 801114a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801114c:	68ba      	ldr	r2, [r7, #8]
 801114e:	4b6a      	ldr	r3, [pc, #424]	; (80112f8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8011150:	4013      	ands	r3, r2
 8011152:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011154:	68bb      	ldr	r3, [r7, #8]
 8011156:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801115a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	68ba      	ldr	r2, [r7, #8]
 8011162:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8011164:	683b      	ldr	r3, [r7, #0]
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	4a64      	ldr	r2, [pc, #400]	; (80112fc <HAL_TIM_ConfigClockSource+0x1e4>)
 801116a:	4293      	cmp	r3, r2
 801116c:	f000 80a9 	beq.w	80112c2 <HAL_TIM_ConfigClockSource+0x1aa>
 8011170:	4a62      	ldr	r2, [pc, #392]	; (80112fc <HAL_TIM_ConfigClockSource+0x1e4>)
 8011172:	4293      	cmp	r3, r2
 8011174:	f200 80ae 	bhi.w	80112d4 <HAL_TIM_ConfigClockSource+0x1bc>
 8011178:	4a61      	ldr	r2, [pc, #388]	; (8011300 <HAL_TIM_ConfigClockSource+0x1e8>)
 801117a:	4293      	cmp	r3, r2
 801117c:	f000 80a1 	beq.w	80112c2 <HAL_TIM_ConfigClockSource+0x1aa>
 8011180:	4a5f      	ldr	r2, [pc, #380]	; (8011300 <HAL_TIM_ConfigClockSource+0x1e8>)
 8011182:	4293      	cmp	r3, r2
 8011184:	f200 80a6 	bhi.w	80112d4 <HAL_TIM_ConfigClockSource+0x1bc>
 8011188:	4a5e      	ldr	r2, [pc, #376]	; (8011304 <HAL_TIM_ConfigClockSource+0x1ec>)
 801118a:	4293      	cmp	r3, r2
 801118c:	f000 8099 	beq.w	80112c2 <HAL_TIM_ConfigClockSource+0x1aa>
 8011190:	4a5c      	ldr	r2, [pc, #368]	; (8011304 <HAL_TIM_ConfigClockSource+0x1ec>)
 8011192:	4293      	cmp	r3, r2
 8011194:	f200 809e 	bhi.w	80112d4 <HAL_TIM_ConfigClockSource+0x1bc>
 8011198:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 801119c:	f000 8091 	beq.w	80112c2 <HAL_TIM_ConfigClockSource+0x1aa>
 80111a0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80111a4:	f200 8096 	bhi.w	80112d4 <HAL_TIM_ConfigClockSource+0x1bc>
 80111a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80111ac:	f000 8089 	beq.w	80112c2 <HAL_TIM_ConfigClockSource+0x1aa>
 80111b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80111b4:	f200 808e 	bhi.w	80112d4 <HAL_TIM_ConfigClockSource+0x1bc>
 80111b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80111bc:	d03e      	beq.n	801123c <HAL_TIM_ConfigClockSource+0x124>
 80111be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80111c2:	f200 8087 	bhi.w	80112d4 <HAL_TIM_ConfigClockSource+0x1bc>
 80111c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80111ca:	f000 8086 	beq.w	80112da <HAL_TIM_ConfigClockSource+0x1c2>
 80111ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80111d2:	d87f      	bhi.n	80112d4 <HAL_TIM_ConfigClockSource+0x1bc>
 80111d4:	2b70      	cmp	r3, #112	; 0x70
 80111d6:	d01a      	beq.n	801120e <HAL_TIM_ConfigClockSource+0xf6>
 80111d8:	2b70      	cmp	r3, #112	; 0x70
 80111da:	d87b      	bhi.n	80112d4 <HAL_TIM_ConfigClockSource+0x1bc>
 80111dc:	2b60      	cmp	r3, #96	; 0x60
 80111de:	d050      	beq.n	8011282 <HAL_TIM_ConfigClockSource+0x16a>
 80111e0:	2b60      	cmp	r3, #96	; 0x60
 80111e2:	d877      	bhi.n	80112d4 <HAL_TIM_ConfigClockSource+0x1bc>
 80111e4:	2b50      	cmp	r3, #80	; 0x50
 80111e6:	d03c      	beq.n	8011262 <HAL_TIM_ConfigClockSource+0x14a>
 80111e8:	2b50      	cmp	r3, #80	; 0x50
 80111ea:	d873      	bhi.n	80112d4 <HAL_TIM_ConfigClockSource+0x1bc>
 80111ec:	2b40      	cmp	r3, #64	; 0x40
 80111ee:	d058      	beq.n	80112a2 <HAL_TIM_ConfigClockSource+0x18a>
 80111f0:	2b40      	cmp	r3, #64	; 0x40
 80111f2:	d86f      	bhi.n	80112d4 <HAL_TIM_ConfigClockSource+0x1bc>
 80111f4:	2b30      	cmp	r3, #48	; 0x30
 80111f6:	d064      	beq.n	80112c2 <HAL_TIM_ConfigClockSource+0x1aa>
 80111f8:	2b30      	cmp	r3, #48	; 0x30
 80111fa:	d86b      	bhi.n	80112d4 <HAL_TIM_ConfigClockSource+0x1bc>
 80111fc:	2b20      	cmp	r3, #32
 80111fe:	d060      	beq.n	80112c2 <HAL_TIM_ConfigClockSource+0x1aa>
 8011200:	2b20      	cmp	r3, #32
 8011202:	d867      	bhi.n	80112d4 <HAL_TIM_ConfigClockSource+0x1bc>
 8011204:	2b00      	cmp	r3, #0
 8011206:	d05c      	beq.n	80112c2 <HAL_TIM_ConfigClockSource+0x1aa>
 8011208:	2b10      	cmp	r3, #16
 801120a:	d05a      	beq.n	80112c2 <HAL_TIM_ConfigClockSource+0x1aa>
 801120c:	e062      	b.n	80112d4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8011212:	683b      	ldr	r3, [r7, #0]
 8011214:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8011216:	683b      	ldr	r3, [r7, #0]
 8011218:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801121a:	683b      	ldr	r3, [r7, #0]
 801121c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801121e:	f000 f9bd 	bl	801159c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	689b      	ldr	r3, [r3, #8]
 8011228:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801122a:	68bb      	ldr	r3, [r7, #8]
 801122c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8011230:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	68ba      	ldr	r2, [r7, #8]
 8011238:	609a      	str	r2, [r3, #8]
      break;
 801123a:	e04f      	b.n	80112dc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8011240:	683b      	ldr	r3, [r7, #0]
 8011242:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8011244:	683b      	ldr	r3, [r7, #0]
 8011246:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8011248:	683b      	ldr	r3, [r7, #0]
 801124a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801124c:	f000 f9a6 	bl	801159c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	689a      	ldr	r2, [r3, #8]
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801125e:	609a      	str	r2, [r3, #8]
      break;
 8011260:	e03c      	b.n	80112dc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8011266:	683b      	ldr	r3, [r7, #0]
 8011268:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801126a:	683b      	ldr	r3, [r7, #0]
 801126c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801126e:	461a      	mov	r2, r3
 8011270:	f000 f916 	bl	80114a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	2150      	movs	r1, #80	; 0x50
 801127a:	4618      	mov	r0, r3
 801127c:	f000 f970 	bl	8011560 <TIM_ITRx_SetConfig>
      break;
 8011280:	e02c      	b.n	80112dc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8011286:	683b      	ldr	r3, [r7, #0]
 8011288:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801128a:	683b      	ldr	r3, [r7, #0]
 801128c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801128e:	461a      	mov	r2, r3
 8011290:	f000 f935 	bl	80114fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	2160      	movs	r1, #96	; 0x60
 801129a:	4618      	mov	r0, r3
 801129c:	f000 f960 	bl	8011560 <TIM_ITRx_SetConfig>
      break;
 80112a0:	e01c      	b.n	80112dc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80112a6:	683b      	ldr	r3, [r7, #0]
 80112a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80112aa:	683b      	ldr	r3, [r7, #0]
 80112ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80112ae:	461a      	mov	r2, r3
 80112b0:	f000 f8f6 	bl	80114a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	2140      	movs	r1, #64	; 0x40
 80112ba:	4618      	mov	r0, r3
 80112bc:	f000 f950 	bl	8011560 <TIM_ITRx_SetConfig>
      break;
 80112c0:	e00c      	b.n	80112dc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	681a      	ldr	r2, [r3, #0]
 80112c6:	683b      	ldr	r3, [r7, #0]
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	4619      	mov	r1, r3
 80112cc:	4610      	mov	r0, r2
 80112ce:	f000 f947 	bl	8011560 <TIM_ITRx_SetConfig>
      break;
 80112d2:	e003      	b.n	80112dc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80112d4:	2301      	movs	r3, #1
 80112d6:	73fb      	strb	r3, [r7, #15]
      break;
 80112d8:	e000      	b.n	80112dc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80112da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	2201      	movs	r2, #1
 80112e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	2200      	movs	r2, #0
 80112e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80112ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80112ee:	4618      	mov	r0, r3
 80112f0:	3710      	adds	r7, #16
 80112f2:	46bd      	mov	sp, r7
 80112f4:	bd80      	pop	{r7, pc}
 80112f6:	bf00      	nop
 80112f8:	ffceff88 	.word	0xffceff88
 80112fc:	00100040 	.word	0x00100040
 8011300:	00100030 	.word	0x00100030
 8011304:	00100020 	.word	0x00100020

08011308 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011308:	b480      	push	{r7}
 801130a:	b083      	sub	sp, #12
 801130c:	af00      	add	r7, sp, #0
 801130e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8011310:	bf00      	nop
 8011312:	370c      	adds	r7, #12
 8011314:	46bd      	mov	sp, r7
 8011316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801131a:	4770      	bx	lr

0801131c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801131c:	b480      	push	{r7}
 801131e:	b083      	sub	sp, #12
 8011320:	af00      	add	r7, sp, #0
 8011322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8011324:	bf00      	nop
 8011326:	370c      	adds	r7, #12
 8011328:	46bd      	mov	sp, r7
 801132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801132e:	4770      	bx	lr

08011330 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8011330:	b480      	push	{r7}
 8011332:	b083      	sub	sp, #12
 8011334:	af00      	add	r7, sp, #0
 8011336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8011338:	bf00      	nop
 801133a:	370c      	adds	r7, #12
 801133c:	46bd      	mov	sp, r7
 801133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011342:	4770      	bx	lr

08011344 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8011344:	b480      	push	{r7}
 8011346:	b083      	sub	sp, #12
 8011348:	af00      	add	r7, sp, #0
 801134a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801134c:	bf00      	nop
 801134e:	370c      	adds	r7, #12
 8011350:	46bd      	mov	sp, r7
 8011352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011356:	4770      	bx	lr

08011358 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8011358:	b480      	push	{r7}
 801135a:	b083      	sub	sp, #12
 801135c:	af00      	add	r7, sp, #0
 801135e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8011360:	bf00      	nop
 8011362:	370c      	adds	r7, #12
 8011364:	46bd      	mov	sp, r7
 8011366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801136a:	4770      	bx	lr

0801136c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801136c:	b480      	push	{r7}
 801136e:	b085      	sub	sp, #20
 8011370:	af00      	add	r7, sp, #0
 8011372:	6078      	str	r0, [r7, #4]
 8011374:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	4a40      	ldr	r2, [pc, #256]	; (8011480 <TIM_Base_SetConfig+0x114>)
 8011380:	4293      	cmp	r3, r2
 8011382:	d013      	beq.n	80113ac <TIM_Base_SetConfig+0x40>
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801138a:	d00f      	beq.n	80113ac <TIM_Base_SetConfig+0x40>
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	4a3d      	ldr	r2, [pc, #244]	; (8011484 <TIM_Base_SetConfig+0x118>)
 8011390:	4293      	cmp	r3, r2
 8011392:	d00b      	beq.n	80113ac <TIM_Base_SetConfig+0x40>
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	4a3c      	ldr	r2, [pc, #240]	; (8011488 <TIM_Base_SetConfig+0x11c>)
 8011398:	4293      	cmp	r3, r2
 801139a:	d007      	beq.n	80113ac <TIM_Base_SetConfig+0x40>
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	4a3b      	ldr	r2, [pc, #236]	; (801148c <TIM_Base_SetConfig+0x120>)
 80113a0:	4293      	cmp	r3, r2
 80113a2:	d003      	beq.n	80113ac <TIM_Base_SetConfig+0x40>
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	4a3a      	ldr	r2, [pc, #232]	; (8011490 <TIM_Base_SetConfig+0x124>)
 80113a8:	4293      	cmp	r3, r2
 80113aa:	d108      	bne.n	80113be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80113b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80113b4:	683b      	ldr	r3, [r7, #0]
 80113b6:	685b      	ldr	r3, [r3, #4]
 80113b8:	68fa      	ldr	r2, [r7, #12]
 80113ba:	4313      	orrs	r3, r2
 80113bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	4a2f      	ldr	r2, [pc, #188]	; (8011480 <TIM_Base_SetConfig+0x114>)
 80113c2:	4293      	cmp	r3, r2
 80113c4:	d01f      	beq.n	8011406 <TIM_Base_SetConfig+0x9a>
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80113cc:	d01b      	beq.n	8011406 <TIM_Base_SetConfig+0x9a>
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	4a2c      	ldr	r2, [pc, #176]	; (8011484 <TIM_Base_SetConfig+0x118>)
 80113d2:	4293      	cmp	r3, r2
 80113d4:	d017      	beq.n	8011406 <TIM_Base_SetConfig+0x9a>
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	4a2b      	ldr	r2, [pc, #172]	; (8011488 <TIM_Base_SetConfig+0x11c>)
 80113da:	4293      	cmp	r3, r2
 80113dc:	d013      	beq.n	8011406 <TIM_Base_SetConfig+0x9a>
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	4a2a      	ldr	r2, [pc, #168]	; (801148c <TIM_Base_SetConfig+0x120>)
 80113e2:	4293      	cmp	r3, r2
 80113e4:	d00f      	beq.n	8011406 <TIM_Base_SetConfig+0x9a>
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	4a29      	ldr	r2, [pc, #164]	; (8011490 <TIM_Base_SetConfig+0x124>)
 80113ea:	4293      	cmp	r3, r2
 80113ec:	d00b      	beq.n	8011406 <TIM_Base_SetConfig+0x9a>
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	4a28      	ldr	r2, [pc, #160]	; (8011494 <TIM_Base_SetConfig+0x128>)
 80113f2:	4293      	cmp	r3, r2
 80113f4:	d007      	beq.n	8011406 <TIM_Base_SetConfig+0x9a>
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	4a27      	ldr	r2, [pc, #156]	; (8011498 <TIM_Base_SetConfig+0x12c>)
 80113fa:	4293      	cmp	r3, r2
 80113fc:	d003      	beq.n	8011406 <TIM_Base_SetConfig+0x9a>
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	4a26      	ldr	r2, [pc, #152]	; (801149c <TIM_Base_SetConfig+0x130>)
 8011402:	4293      	cmp	r3, r2
 8011404:	d108      	bne.n	8011418 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801140c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801140e:	683b      	ldr	r3, [r7, #0]
 8011410:	68db      	ldr	r3, [r3, #12]
 8011412:	68fa      	ldr	r2, [r7, #12]
 8011414:	4313      	orrs	r3, r2
 8011416:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801141e:	683b      	ldr	r3, [r7, #0]
 8011420:	695b      	ldr	r3, [r3, #20]
 8011422:	4313      	orrs	r3, r2
 8011424:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	68fa      	ldr	r2, [r7, #12]
 801142a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801142c:	683b      	ldr	r3, [r7, #0]
 801142e:	689a      	ldr	r2, [r3, #8]
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011434:	683b      	ldr	r3, [r7, #0]
 8011436:	681a      	ldr	r2, [r3, #0]
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	4a10      	ldr	r2, [pc, #64]	; (8011480 <TIM_Base_SetConfig+0x114>)
 8011440:	4293      	cmp	r3, r2
 8011442:	d00f      	beq.n	8011464 <TIM_Base_SetConfig+0xf8>
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	4a12      	ldr	r2, [pc, #72]	; (8011490 <TIM_Base_SetConfig+0x124>)
 8011448:	4293      	cmp	r3, r2
 801144a:	d00b      	beq.n	8011464 <TIM_Base_SetConfig+0xf8>
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	4a11      	ldr	r2, [pc, #68]	; (8011494 <TIM_Base_SetConfig+0x128>)
 8011450:	4293      	cmp	r3, r2
 8011452:	d007      	beq.n	8011464 <TIM_Base_SetConfig+0xf8>
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	4a10      	ldr	r2, [pc, #64]	; (8011498 <TIM_Base_SetConfig+0x12c>)
 8011458:	4293      	cmp	r3, r2
 801145a:	d003      	beq.n	8011464 <TIM_Base_SetConfig+0xf8>
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	4a0f      	ldr	r2, [pc, #60]	; (801149c <TIM_Base_SetConfig+0x130>)
 8011460:	4293      	cmp	r3, r2
 8011462:	d103      	bne.n	801146c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011464:	683b      	ldr	r3, [r7, #0]
 8011466:	691a      	ldr	r2, [r3, #16]
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	2201      	movs	r2, #1
 8011470:	615a      	str	r2, [r3, #20]
}
 8011472:	bf00      	nop
 8011474:	3714      	adds	r7, #20
 8011476:	46bd      	mov	sp, r7
 8011478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801147c:	4770      	bx	lr
 801147e:	bf00      	nop
 8011480:	40010000 	.word	0x40010000
 8011484:	40000400 	.word	0x40000400
 8011488:	40000800 	.word	0x40000800
 801148c:	40000c00 	.word	0x40000c00
 8011490:	40010400 	.word	0x40010400
 8011494:	40014000 	.word	0x40014000
 8011498:	40014400 	.word	0x40014400
 801149c:	40014800 	.word	0x40014800

080114a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80114a0:	b480      	push	{r7}
 80114a2:	b087      	sub	sp, #28
 80114a4:	af00      	add	r7, sp, #0
 80114a6:	60f8      	str	r0, [r7, #12]
 80114a8:	60b9      	str	r1, [r7, #8]
 80114aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	6a1b      	ldr	r3, [r3, #32]
 80114b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	6a1b      	ldr	r3, [r3, #32]
 80114b6:	f023 0201 	bic.w	r2, r3, #1
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	699b      	ldr	r3, [r3, #24]
 80114c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80114c4:	693b      	ldr	r3, [r7, #16]
 80114c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80114ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	011b      	lsls	r3, r3, #4
 80114d0:	693a      	ldr	r2, [r7, #16]
 80114d2:	4313      	orrs	r3, r2
 80114d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80114d6:	697b      	ldr	r3, [r7, #20]
 80114d8:	f023 030a 	bic.w	r3, r3, #10
 80114dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80114de:	697a      	ldr	r2, [r7, #20]
 80114e0:	68bb      	ldr	r3, [r7, #8]
 80114e2:	4313      	orrs	r3, r2
 80114e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	693a      	ldr	r2, [r7, #16]
 80114ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	697a      	ldr	r2, [r7, #20]
 80114f0:	621a      	str	r2, [r3, #32]
}
 80114f2:	bf00      	nop
 80114f4:	371c      	adds	r7, #28
 80114f6:	46bd      	mov	sp, r7
 80114f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114fc:	4770      	bx	lr

080114fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80114fe:	b480      	push	{r7}
 8011500:	b087      	sub	sp, #28
 8011502:	af00      	add	r7, sp, #0
 8011504:	60f8      	str	r0, [r7, #12]
 8011506:	60b9      	str	r1, [r7, #8]
 8011508:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	6a1b      	ldr	r3, [r3, #32]
 801150e:	f023 0210 	bic.w	r2, r3, #16
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	699b      	ldr	r3, [r3, #24]
 801151a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	6a1b      	ldr	r3, [r3, #32]
 8011520:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011522:	697b      	ldr	r3, [r7, #20]
 8011524:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8011528:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	031b      	lsls	r3, r3, #12
 801152e:	697a      	ldr	r2, [r7, #20]
 8011530:	4313      	orrs	r3, r2
 8011532:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011534:	693b      	ldr	r3, [r7, #16]
 8011536:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801153a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801153c:	68bb      	ldr	r3, [r7, #8]
 801153e:	011b      	lsls	r3, r3, #4
 8011540:	693a      	ldr	r2, [r7, #16]
 8011542:	4313      	orrs	r3, r2
 8011544:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	697a      	ldr	r2, [r7, #20]
 801154a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	693a      	ldr	r2, [r7, #16]
 8011550:	621a      	str	r2, [r3, #32]
}
 8011552:	bf00      	nop
 8011554:	371c      	adds	r7, #28
 8011556:	46bd      	mov	sp, r7
 8011558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801155c:	4770      	bx	lr
	...

08011560 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8011560:	b480      	push	{r7}
 8011562:	b085      	sub	sp, #20
 8011564:	af00      	add	r7, sp, #0
 8011566:	6078      	str	r0, [r7, #4]
 8011568:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	689b      	ldr	r3, [r3, #8]
 801156e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8011570:	68fa      	ldr	r2, [r7, #12]
 8011572:	4b09      	ldr	r3, [pc, #36]	; (8011598 <TIM_ITRx_SetConfig+0x38>)
 8011574:	4013      	ands	r3, r2
 8011576:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011578:	683a      	ldr	r2, [r7, #0]
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	4313      	orrs	r3, r2
 801157e:	f043 0307 	orr.w	r3, r3, #7
 8011582:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	68fa      	ldr	r2, [r7, #12]
 8011588:	609a      	str	r2, [r3, #8]
}
 801158a:	bf00      	nop
 801158c:	3714      	adds	r7, #20
 801158e:	46bd      	mov	sp, r7
 8011590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011594:	4770      	bx	lr
 8011596:	bf00      	nop
 8011598:	ffcfff8f 	.word	0xffcfff8f

0801159c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801159c:	b480      	push	{r7}
 801159e:	b087      	sub	sp, #28
 80115a0:	af00      	add	r7, sp, #0
 80115a2:	60f8      	str	r0, [r7, #12]
 80115a4:	60b9      	str	r1, [r7, #8]
 80115a6:	607a      	str	r2, [r7, #4]
 80115a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	689b      	ldr	r3, [r3, #8]
 80115ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80115b0:	697b      	ldr	r3, [r7, #20]
 80115b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80115b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80115b8:	683b      	ldr	r3, [r7, #0]
 80115ba:	021a      	lsls	r2, r3, #8
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	431a      	orrs	r2, r3
 80115c0:	68bb      	ldr	r3, [r7, #8]
 80115c2:	4313      	orrs	r3, r2
 80115c4:	697a      	ldr	r2, [r7, #20]
 80115c6:	4313      	orrs	r3, r2
 80115c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	697a      	ldr	r2, [r7, #20]
 80115ce:	609a      	str	r2, [r3, #8]
}
 80115d0:	bf00      	nop
 80115d2:	371c      	adds	r7, #28
 80115d4:	46bd      	mov	sp, r7
 80115d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115da:	4770      	bx	lr

080115dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80115dc:	b480      	push	{r7}
 80115de:	b085      	sub	sp, #20
 80115e0:	af00      	add	r7, sp, #0
 80115e2:	6078      	str	r0, [r7, #4]
 80115e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80115ec:	2b01      	cmp	r3, #1
 80115ee:	d101      	bne.n	80115f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80115f0:	2302      	movs	r3, #2
 80115f2:	e06d      	b.n	80116d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	2201      	movs	r2, #1
 80115f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	2202      	movs	r2, #2
 8011600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	685b      	ldr	r3, [r3, #4]
 801160a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	689b      	ldr	r3, [r3, #8]
 8011612:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	4a30      	ldr	r2, [pc, #192]	; (80116dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801161a:	4293      	cmp	r3, r2
 801161c:	d004      	beq.n	8011628 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	4a2f      	ldr	r2, [pc, #188]	; (80116e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8011624:	4293      	cmp	r3, r2
 8011626:	d108      	bne.n	801163a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801162e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011630:	683b      	ldr	r3, [r7, #0]
 8011632:	685b      	ldr	r3, [r3, #4]
 8011634:	68fa      	ldr	r2, [r7, #12]
 8011636:	4313      	orrs	r3, r2
 8011638:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011640:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011642:	683b      	ldr	r3, [r7, #0]
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	68fa      	ldr	r2, [r7, #12]
 8011648:	4313      	orrs	r3, r2
 801164a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	68fa      	ldr	r2, [r7, #12]
 8011652:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	4a20      	ldr	r2, [pc, #128]	; (80116dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801165a:	4293      	cmp	r3, r2
 801165c:	d022      	beq.n	80116a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011666:	d01d      	beq.n	80116a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	4a1d      	ldr	r2, [pc, #116]	; (80116e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801166e:	4293      	cmp	r3, r2
 8011670:	d018      	beq.n	80116a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	4a1c      	ldr	r2, [pc, #112]	; (80116e8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8011678:	4293      	cmp	r3, r2
 801167a:	d013      	beq.n	80116a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	4a1a      	ldr	r2, [pc, #104]	; (80116ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8011682:	4293      	cmp	r3, r2
 8011684:	d00e      	beq.n	80116a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	4a15      	ldr	r2, [pc, #84]	; (80116e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801168c:	4293      	cmp	r3, r2
 801168e:	d009      	beq.n	80116a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	4a16      	ldr	r2, [pc, #88]	; (80116f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8011696:	4293      	cmp	r3, r2
 8011698:	d004      	beq.n	80116a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	4a15      	ldr	r2, [pc, #84]	; (80116f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80116a0:	4293      	cmp	r3, r2
 80116a2:	d10c      	bne.n	80116be <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80116a4:	68bb      	ldr	r3, [r7, #8]
 80116a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80116aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80116ac:	683b      	ldr	r3, [r7, #0]
 80116ae:	689b      	ldr	r3, [r3, #8]
 80116b0:	68ba      	ldr	r2, [r7, #8]
 80116b2:	4313      	orrs	r3, r2
 80116b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	68ba      	ldr	r2, [r7, #8]
 80116bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	2201      	movs	r2, #1
 80116c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	2200      	movs	r2, #0
 80116ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80116ce:	2300      	movs	r3, #0
}
 80116d0:	4618      	mov	r0, r3
 80116d2:	3714      	adds	r7, #20
 80116d4:	46bd      	mov	sp, r7
 80116d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116da:	4770      	bx	lr
 80116dc:	40010000 	.word	0x40010000
 80116e0:	40010400 	.word	0x40010400
 80116e4:	40000400 	.word	0x40000400
 80116e8:	40000800 	.word	0x40000800
 80116ec:	40000c00 	.word	0x40000c00
 80116f0:	40001800 	.word	0x40001800
 80116f4:	40014000 	.word	0x40014000

080116f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80116f8:	b480      	push	{r7}
 80116fa:	b083      	sub	sp, #12
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011700:	bf00      	nop
 8011702:	370c      	adds	r7, #12
 8011704:	46bd      	mov	sp, r7
 8011706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801170a:	4770      	bx	lr

0801170c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801170c:	b480      	push	{r7}
 801170e:	b083      	sub	sp, #12
 8011710:	af00      	add	r7, sp, #0
 8011712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011714:	bf00      	nop
 8011716:	370c      	adds	r7, #12
 8011718:	46bd      	mov	sp, r7
 801171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801171e:	4770      	bx	lr

08011720 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8011720:	b480      	push	{r7}
 8011722:	b083      	sub	sp, #12
 8011724:	af00      	add	r7, sp, #0
 8011726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8011728:	bf00      	nop
 801172a:	370c      	adds	r7, #12
 801172c:	46bd      	mov	sp, r7
 801172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011732:	4770      	bx	lr

08011734 <__assert_func>:
 8011734:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011736:	4614      	mov	r4, r2
 8011738:	461a      	mov	r2, r3
 801173a:	4b09      	ldr	r3, [pc, #36]	; (8011760 <__assert_func+0x2c>)
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	4605      	mov	r5, r0
 8011740:	68d8      	ldr	r0, [r3, #12]
 8011742:	b14c      	cbz	r4, 8011758 <__assert_func+0x24>
 8011744:	4b07      	ldr	r3, [pc, #28]	; (8011764 <__assert_func+0x30>)
 8011746:	9100      	str	r1, [sp, #0]
 8011748:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801174c:	4906      	ldr	r1, [pc, #24]	; (8011768 <__assert_func+0x34>)
 801174e:	462b      	mov	r3, r5
 8011750:	f000 fa02 	bl	8011b58 <fiprintf>
 8011754:	f000 fc2f 	bl	8011fb6 <abort>
 8011758:	4b04      	ldr	r3, [pc, #16]	; (801176c <__assert_func+0x38>)
 801175a:	461c      	mov	r4, r3
 801175c:	e7f3      	b.n	8011746 <__assert_func+0x12>
 801175e:	bf00      	nop
 8011760:	200000ac 	.word	0x200000ac
 8011764:	08014538 	.word	0x08014538
 8011768:	08014545 	.word	0x08014545
 801176c:	08014573 	.word	0x08014573

08011770 <malloc>:
 8011770:	4b02      	ldr	r3, [pc, #8]	; (801177c <malloc+0xc>)
 8011772:	4601      	mov	r1, r0
 8011774:	6818      	ldr	r0, [r3, #0]
 8011776:	f000 b823 	b.w	80117c0 <_malloc_r>
 801177a:	bf00      	nop
 801177c:	200000ac 	.word	0x200000ac

08011780 <sbrk_aligned>:
 8011780:	b570      	push	{r4, r5, r6, lr}
 8011782:	4e0e      	ldr	r6, [pc, #56]	; (80117bc <sbrk_aligned+0x3c>)
 8011784:	460c      	mov	r4, r1
 8011786:	6831      	ldr	r1, [r6, #0]
 8011788:	4605      	mov	r5, r0
 801178a:	b911      	cbnz	r1, 8011792 <sbrk_aligned+0x12>
 801178c:	f000 fbb6 	bl	8011efc <_sbrk_r>
 8011790:	6030      	str	r0, [r6, #0]
 8011792:	4621      	mov	r1, r4
 8011794:	4628      	mov	r0, r5
 8011796:	f000 fbb1 	bl	8011efc <_sbrk_r>
 801179a:	1c43      	adds	r3, r0, #1
 801179c:	d00a      	beq.n	80117b4 <sbrk_aligned+0x34>
 801179e:	1cc4      	adds	r4, r0, #3
 80117a0:	f024 0403 	bic.w	r4, r4, #3
 80117a4:	42a0      	cmp	r0, r4
 80117a6:	d007      	beq.n	80117b8 <sbrk_aligned+0x38>
 80117a8:	1a21      	subs	r1, r4, r0
 80117aa:	4628      	mov	r0, r5
 80117ac:	f000 fba6 	bl	8011efc <_sbrk_r>
 80117b0:	3001      	adds	r0, #1
 80117b2:	d101      	bne.n	80117b8 <sbrk_aligned+0x38>
 80117b4:	f04f 34ff 	mov.w	r4, #4294967295
 80117b8:	4620      	mov	r0, r4
 80117ba:	bd70      	pop	{r4, r5, r6, pc}
 80117bc:	20000628 	.word	0x20000628

080117c0 <_malloc_r>:
 80117c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80117c4:	1ccd      	adds	r5, r1, #3
 80117c6:	f025 0503 	bic.w	r5, r5, #3
 80117ca:	3508      	adds	r5, #8
 80117cc:	2d0c      	cmp	r5, #12
 80117ce:	bf38      	it	cc
 80117d0:	250c      	movcc	r5, #12
 80117d2:	2d00      	cmp	r5, #0
 80117d4:	4607      	mov	r7, r0
 80117d6:	db01      	blt.n	80117dc <_malloc_r+0x1c>
 80117d8:	42a9      	cmp	r1, r5
 80117da:	d905      	bls.n	80117e8 <_malloc_r+0x28>
 80117dc:	230c      	movs	r3, #12
 80117de:	603b      	str	r3, [r7, #0]
 80117e0:	2600      	movs	r6, #0
 80117e2:	4630      	mov	r0, r6
 80117e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80117e8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80118bc <_malloc_r+0xfc>
 80117ec:	f000 f868 	bl	80118c0 <__malloc_lock>
 80117f0:	f8d8 3000 	ldr.w	r3, [r8]
 80117f4:	461c      	mov	r4, r3
 80117f6:	bb5c      	cbnz	r4, 8011850 <_malloc_r+0x90>
 80117f8:	4629      	mov	r1, r5
 80117fa:	4638      	mov	r0, r7
 80117fc:	f7ff ffc0 	bl	8011780 <sbrk_aligned>
 8011800:	1c43      	adds	r3, r0, #1
 8011802:	4604      	mov	r4, r0
 8011804:	d155      	bne.n	80118b2 <_malloc_r+0xf2>
 8011806:	f8d8 4000 	ldr.w	r4, [r8]
 801180a:	4626      	mov	r6, r4
 801180c:	2e00      	cmp	r6, #0
 801180e:	d145      	bne.n	801189c <_malloc_r+0xdc>
 8011810:	2c00      	cmp	r4, #0
 8011812:	d048      	beq.n	80118a6 <_malloc_r+0xe6>
 8011814:	6823      	ldr	r3, [r4, #0]
 8011816:	4631      	mov	r1, r6
 8011818:	4638      	mov	r0, r7
 801181a:	eb04 0903 	add.w	r9, r4, r3
 801181e:	f000 fb6d 	bl	8011efc <_sbrk_r>
 8011822:	4581      	cmp	r9, r0
 8011824:	d13f      	bne.n	80118a6 <_malloc_r+0xe6>
 8011826:	6821      	ldr	r1, [r4, #0]
 8011828:	1a6d      	subs	r5, r5, r1
 801182a:	4629      	mov	r1, r5
 801182c:	4638      	mov	r0, r7
 801182e:	f7ff ffa7 	bl	8011780 <sbrk_aligned>
 8011832:	3001      	adds	r0, #1
 8011834:	d037      	beq.n	80118a6 <_malloc_r+0xe6>
 8011836:	6823      	ldr	r3, [r4, #0]
 8011838:	442b      	add	r3, r5
 801183a:	6023      	str	r3, [r4, #0]
 801183c:	f8d8 3000 	ldr.w	r3, [r8]
 8011840:	2b00      	cmp	r3, #0
 8011842:	d038      	beq.n	80118b6 <_malloc_r+0xf6>
 8011844:	685a      	ldr	r2, [r3, #4]
 8011846:	42a2      	cmp	r2, r4
 8011848:	d12b      	bne.n	80118a2 <_malloc_r+0xe2>
 801184a:	2200      	movs	r2, #0
 801184c:	605a      	str	r2, [r3, #4]
 801184e:	e00f      	b.n	8011870 <_malloc_r+0xb0>
 8011850:	6822      	ldr	r2, [r4, #0]
 8011852:	1b52      	subs	r2, r2, r5
 8011854:	d41f      	bmi.n	8011896 <_malloc_r+0xd6>
 8011856:	2a0b      	cmp	r2, #11
 8011858:	d917      	bls.n	801188a <_malloc_r+0xca>
 801185a:	1961      	adds	r1, r4, r5
 801185c:	42a3      	cmp	r3, r4
 801185e:	6025      	str	r5, [r4, #0]
 8011860:	bf18      	it	ne
 8011862:	6059      	strne	r1, [r3, #4]
 8011864:	6863      	ldr	r3, [r4, #4]
 8011866:	bf08      	it	eq
 8011868:	f8c8 1000 	streq.w	r1, [r8]
 801186c:	5162      	str	r2, [r4, r5]
 801186e:	604b      	str	r3, [r1, #4]
 8011870:	4638      	mov	r0, r7
 8011872:	f104 060b 	add.w	r6, r4, #11
 8011876:	f000 f829 	bl	80118cc <__malloc_unlock>
 801187a:	f026 0607 	bic.w	r6, r6, #7
 801187e:	1d23      	adds	r3, r4, #4
 8011880:	1af2      	subs	r2, r6, r3
 8011882:	d0ae      	beq.n	80117e2 <_malloc_r+0x22>
 8011884:	1b9b      	subs	r3, r3, r6
 8011886:	50a3      	str	r3, [r4, r2]
 8011888:	e7ab      	b.n	80117e2 <_malloc_r+0x22>
 801188a:	42a3      	cmp	r3, r4
 801188c:	6862      	ldr	r2, [r4, #4]
 801188e:	d1dd      	bne.n	801184c <_malloc_r+0x8c>
 8011890:	f8c8 2000 	str.w	r2, [r8]
 8011894:	e7ec      	b.n	8011870 <_malloc_r+0xb0>
 8011896:	4623      	mov	r3, r4
 8011898:	6864      	ldr	r4, [r4, #4]
 801189a:	e7ac      	b.n	80117f6 <_malloc_r+0x36>
 801189c:	4634      	mov	r4, r6
 801189e:	6876      	ldr	r6, [r6, #4]
 80118a0:	e7b4      	b.n	801180c <_malloc_r+0x4c>
 80118a2:	4613      	mov	r3, r2
 80118a4:	e7cc      	b.n	8011840 <_malloc_r+0x80>
 80118a6:	230c      	movs	r3, #12
 80118a8:	603b      	str	r3, [r7, #0]
 80118aa:	4638      	mov	r0, r7
 80118ac:	f000 f80e 	bl	80118cc <__malloc_unlock>
 80118b0:	e797      	b.n	80117e2 <_malloc_r+0x22>
 80118b2:	6025      	str	r5, [r4, #0]
 80118b4:	e7dc      	b.n	8011870 <_malloc_r+0xb0>
 80118b6:	605b      	str	r3, [r3, #4]
 80118b8:	deff      	udf	#255	; 0xff
 80118ba:	bf00      	nop
 80118bc:	20000624 	.word	0x20000624

080118c0 <__malloc_lock>:
 80118c0:	4801      	ldr	r0, [pc, #4]	; (80118c8 <__malloc_lock+0x8>)
 80118c2:	f000 bb68 	b.w	8011f96 <__retarget_lock_acquire_recursive>
 80118c6:	bf00      	nop
 80118c8:	2000076c 	.word	0x2000076c

080118cc <__malloc_unlock>:
 80118cc:	4801      	ldr	r0, [pc, #4]	; (80118d4 <__malloc_unlock+0x8>)
 80118ce:	f000 bb63 	b.w	8011f98 <__retarget_lock_release_recursive>
 80118d2:	bf00      	nop
 80118d4:	2000076c 	.word	0x2000076c

080118d8 <srand>:
 80118d8:	b538      	push	{r3, r4, r5, lr}
 80118da:	4b10      	ldr	r3, [pc, #64]	; (801191c <srand+0x44>)
 80118dc:	681d      	ldr	r5, [r3, #0]
 80118de:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80118e0:	4604      	mov	r4, r0
 80118e2:	b9b3      	cbnz	r3, 8011912 <srand+0x3a>
 80118e4:	2018      	movs	r0, #24
 80118e6:	f7ff ff43 	bl	8011770 <malloc>
 80118ea:	4602      	mov	r2, r0
 80118ec:	6328      	str	r0, [r5, #48]	; 0x30
 80118ee:	b920      	cbnz	r0, 80118fa <srand+0x22>
 80118f0:	4b0b      	ldr	r3, [pc, #44]	; (8011920 <srand+0x48>)
 80118f2:	480c      	ldr	r0, [pc, #48]	; (8011924 <srand+0x4c>)
 80118f4:	2146      	movs	r1, #70	; 0x46
 80118f6:	f7ff ff1d 	bl	8011734 <__assert_func>
 80118fa:	490b      	ldr	r1, [pc, #44]	; (8011928 <srand+0x50>)
 80118fc:	4b0b      	ldr	r3, [pc, #44]	; (801192c <srand+0x54>)
 80118fe:	e9c0 1300 	strd	r1, r3, [r0]
 8011902:	4b0b      	ldr	r3, [pc, #44]	; (8011930 <srand+0x58>)
 8011904:	6083      	str	r3, [r0, #8]
 8011906:	230b      	movs	r3, #11
 8011908:	8183      	strh	r3, [r0, #12]
 801190a:	2100      	movs	r1, #0
 801190c:	2001      	movs	r0, #1
 801190e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8011912:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8011914:	2200      	movs	r2, #0
 8011916:	611c      	str	r4, [r3, #16]
 8011918:	615a      	str	r2, [r3, #20]
 801191a:	bd38      	pop	{r3, r4, r5, pc}
 801191c:	200000ac 	.word	0x200000ac
 8011920:	08014574 	.word	0x08014574
 8011924:	0801458b 	.word	0x0801458b
 8011928:	abcd330e 	.word	0xabcd330e
 801192c:	e66d1234 	.word	0xe66d1234
 8011930:	0005deec 	.word	0x0005deec

08011934 <rand>:
 8011934:	4b16      	ldr	r3, [pc, #88]	; (8011990 <rand+0x5c>)
 8011936:	b510      	push	{r4, lr}
 8011938:	681c      	ldr	r4, [r3, #0]
 801193a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801193c:	b9b3      	cbnz	r3, 801196c <rand+0x38>
 801193e:	2018      	movs	r0, #24
 8011940:	f7ff ff16 	bl	8011770 <malloc>
 8011944:	4602      	mov	r2, r0
 8011946:	6320      	str	r0, [r4, #48]	; 0x30
 8011948:	b920      	cbnz	r0, 8011954 <rand+0x20>
 801194a:	4b12      	ldr	r3, [pc, #72]	; (8011994 <rand+0x60>)
 801194c:	4812      	ldr	r0, [pc, #72]	; (8011998 <rand+0x64>)
 801194e:	2152      	movs	r1, #82	; 0x52
 8011950:	f7ff fef0 	bl	8011734 <__assert_func>
 8011954:	4911      	ldr	r1, [pc, #68]	; (801199c <rand+0x68>)
 8011956:	4b12      	ldr	r3, [pc, #72]	; (80119a0 <rand+0x6c>)
 8011958:	e9c0 1300 	strd	r1, r3, [r0]
 801195c:	4b11      	ldr	r3, [pc, #68]	; (80119a4 <rand+0x70>)
 801195e:	6083      	str	r3, [r0, #8]
 8011960:	230b      	movs	r3, #11
 8011962:	8183      	strh	r3, [r0, #12]
 8011964:	2100      	movs	r1, #0
 8011966:	2001      	movs	r0, #1
 8011968:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801196c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801196e:	480e      	ldr	r0, [pc, #56]	; (80119a8 <rand+0x74>)
 8011970:	690b      	ldr	r3, [r1, #16]
 8011972:	694c      	ldr	r4, [r1, #20]
 8011974:	4a0d      	ldr	r2, [pc, #52]	; (80119ac <rand+0x78>)
 8011976:	4358      	muls	r0, r3
 8011978:	fb02 0004 	mla	r0, r2, r4, r0
 801197c:	fba3 3202 	umull	r3, r2, r3, r2
 8011980:	3301      	adds	r3, #1
 8011982:	eb40 0002 	adc.w	r0, r0, r2
 8011986:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801198a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801198e:	bd10      	pop	{r4, pc}
 8011990:	200000ac 	.word	0x200000ac
 8011994:	08014574 	.word	0x08014574
 8011998:	0801458b 	.word	0x0801458b
 801199c:	abcd330e 	.word	0xabcd330e
 80119a0:	e66d1234 	.word	0xe66d1234
 80119a4:	0005deec 	.word	0x0005deec
 80119a8:	5851f42d 	.word	0x5851f42d
 80119ac:	4c957f2d 	.word	0x4c957f2d

080119b0 <_realloc_r>:
 80119b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119b4:	4680      	mov	r8, r0
 80119b6:	4614      	mov	r4, r2
 80119b8:	460e      	mov	r6, r1
 80119ba:	b921      	cbnz	r1, 80119c6 <_realloc_r+0x16>
 80119bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80119c0:	4611      	mov	r1, r2
 80119c2:	f7ff befd 	b.w	80117c0 <_malloc_r>
 80119c6:	b92a      	cbnz	r2, 80119d4 <_realloc_r+0x24>
 80119c8:	f000 fafc 	bl	8011fc4 <_free_r>
 80119cc:	4625      	mov	r5, r4
 80119ce:	4628      	mov	r0, r5
 80119d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119d4:	f000 fb42 	bl	801205c <_malloc_usable_size_r>
 80119d8:	4284      	cmp	r4, r0
 80119da:	4607      	mov	r7, r0
 80119dc:	d802      	bhi.n	80119e4 <_realloc_r+0x34>
 80119de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80119e2:	d812      	bhi.n	8011a0a <_realloc_r+0x5a>
 80119e4:	4621      	mov	r1, r4
 80119e6:	4640      	mov	r0, r8
 80119e8:	f7ff feea 	bl	80117c0 <_malloc_r>
 80119ec:	4605      	mov	r5, r0
 80119ee:	2800      	cmp	r0, #0
 80119f0:	d0ed      	beq.n	80119ce <_realloc_r+0x1e>
 80119f2:	42bc      	cmp	r4, r7
 80119f4:	4622      	mov	r2, r4
 80119f6:	4631      	mov	r1, r6
 80119f8:	bf28      	it	cs
 80119fa:	463a      	movcs	r2, r7
 80119fc:	f000 facd 	bl	8011f9a <memcpy>
 8011a00:	4631      	mov	r1, r6
 8011a02:	4640      	mov	r0, r8
 8011a04:	f000 fade 	bl	8011fc4 <_free_r>
 8011a08:	e7e1      	b.n	80119ce <_realloc_r+0x1e>
 8011a0a:	4635      	mov	r5, r6
 8011a0c:	e7df      	b.n	80119ce <_realloc_r+0x1e>
	...

08011a10 <std>:
 8011a10:	2300      	movs	r3, #0
 8011a12:	b510      	push	{r4, lr}
 8011a14:	4604      	mov	r4, r0
 8011a16:	e9c0 3300 	strd	r3, r3, [r0]
 8011a1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011a1e:	6083      	str	r3, [r0, #8]
 8011a20:	8181      	strh	r1, [r0, #12]
 8011a22:	6643      	str	r3, [r0, #100]	; 0x64
 8011a24:	81c2      	strh	r2, [r0, #14]
 8011a26:	6183      	str	r3, [r0, #24]
 8011a28:	4619      	mov	r1, r3
 8011a2a:	2208      	movs	r2, #8
 8011a2c:	305c      	adds	r0, #92	; 0x5c
 8011a2e:	f000 fa29 	bl	8011e84 <memset>
 8011a32:	4b0d      	ldr	r3, [pc, #52]	; (8011a68 <std+0x58>)
 8011a34:	6263      	str	r3, [r4, #36]	; 0x24
 8011a36:	4b0d      	ldr	r3, [pc, #52]	; (8011a6c <std+0x5c>)
 8011a38:	62a3      	str	r3, [r4, #40]	; 0x28
 8011a3a:	4b0d      	ldr	r3, [pc, #52]	; (8011a70 <std+0x60>)
 8011a3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011a3e:	4b0d      	ldr	r3, [pc, #52]	; (8011a74 <std+0x64>)
 8011a40:	6323      	str	r3, [r4, #48]	; 0x30
 8011a42:	4b0d      	ldr	r3, [pc, #52]	; (8011a78 <std+0x68>)
 8011a44:	6224      	str	r4, [r4, #32]
 8011a46:	429c      	cmp	r4, r3
 8011a48:	d006      	beq.n	8011a58 <std+0x48>
 8011a4a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8011a4e:	4294      	cmp	r4, r2
 8011a50:	d002      	beq.n	8011a58 <std+0x48>
 8011a52:	33d0      	adds	r3, #208	; 0xd0
 8011a54:	429c      	cmp	r4, r3
 8011a56:	d105      	bne.n	8011a64 <std+0x54>
 8011a58:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a60:	f000 ba98 	b.w	8011f94 <__retarget_lock_init_recursive>
 8011a64:	bd10      	pop	{r4, pc}
 8011a66:	bf00      	nop
 8011a68:	08011cd5 	.word	0x08011cd5
 8011a6c:	08011cf7 	.word	0x08011cf7
 8011a70:	08011d2f 	.word	0x08011d2f
 8011a74:	08011d53 	.word	0x08011d53
 8011a78:	2000062c 	.word	0x2000062c

08011a7c <stdio_exit_handler>:
 8011a7c:	4a02      	ldr	r2, [pc, #8]	; (8011a88 <stdio_exit_handler+0xc>)
 8011a7e:	4903      	ldr	r1, [pc, #12]	; (8011a8c <stdio_exit_handler+0x10>)
 8011a80:	4803      	ldr	r0, [pc, #12]	; (8011a90 <stdio_exit_handler+0x14>)
 8011a82:	f000 b87b 	b.w	8011b7c <_fwalk_sglue>
 8011a86:	bf00      	nop
 8011a88:	20000054 	.word	0x20000054
 8011a8c:	080129d1 	.word	0x080129d1
 8011a90:	20000060 	.word	0x20000060

08011a94 <cleanup_stdio>:
 8011a94:	6841      	ldr	r1, [r0, #4]
 8011a96:	4b0c      	ldr	r3, [pc, #48]	; (8011ac8 <cleanup_stdio+0x34>)
 8011a98:	4299      	cmp	r1, r3
 8011a9a:	b510      	push	{r4, lr}
 8011a9c:	4604      	mov	r4, r0
 8011a9e:	d001      	beq.n	8011aa4 <cleanup_stdio+0x10>
 8011aa0:	f000 ff96 	bl	80129d0 <_fflush_r>
 8011aa4:	68a1      	ldr	r1, [r4, #8]
 8011aa6:	4b09      	ldr	r3, [pc, #36]	; (8011acc <cleanup_stdio+0x38>)
 8011aa8:	4299      	cmp	r1, r3
 8011aaa:	d002      	beq.n	8011ab2 <cleanup_stdio+0x1e>
 8011aac:	4620      	mov	r0, r4
 8011aae:	f000 ff8f 	bl	80129d0 <_fflush_r>
 8011ab2:	68e1      	ldr	r1, [r4, #12]
 8011ab4:	4b06      	ldr	r3, [pc, #24]	; (8011ad0 <cleanup_stdio+0x3c>)
 8011ab6:	4299      	cmp	r1, r3
 8011ab8:	d004      	beq.n	8011ac4 <cleanup_stdio+0x30>
 8011aba:	4620      	mov	r0, r4
 8011abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ac0:	f000 bf86 	b.w	80129d0 <_fflush_r>
 8011ac4:	bd10      	pop	{r4, pc}
 8011ac6:	bf00      	nop
 8011ac8:	2000062c 	.word	0x2000062c
 8011acc:	20000694 	.word	0x20000694
 8011ad0:	200006fc 	.word	0x200006fc

08011ad4 <global_stdio_init.part.0>:
 8011ad4:	b510      	push	{r4, lr}
 8011ad6:	4b0b      	ldr	r3, [pc, #44]	; (8011b04 <global_stdio_init.part.0+0x30>)
 8011ad8:	4c0b      	ldr	r4, [pc, #44]	; (8011b08 <global_stdio_init.part.0+0x34>)
 8011ada:	4a0c      	ldr	r2, [pc, #48]	; (8011b0c <global_stdio_init.part.0+0x38>)
 8011adc:	601a      	str	r2, [r3, #0]
 8011ade:	4620      	mov	r0, r4
 8011ae0:	2200      	movs	r2, #0
 8011ae2:	2104      	movs	r1, #4
 8011ae4:	f7ff ff94 	bl	8011a10 <std>
 8011ae8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8011aec:	2201      	movs	r2, #1
 8011aee:	2109      	movs	r1, #9
 8011af0:	f7ff ff8e 	bl	8011a10 <std>
 8011af4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8011af8:	2202      	movs	r2, #2
 8011afa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011afe:	2112      	movs	r1, #18
 8011b00:	f7ff bf86 	b.w	8011a10 <std>
 8011b04:	20000764 	.word	0x20000764
 8011b08:	2000062c 	.word	0x2000062c
 8011b0c:	08011a7d 	.word	0x08011a7d

08011b10 <__sfp_lock_acquire>:
 8011b10:	4801      	ldr	r0, [pc, #4]	; (8011b18 <__sfp_lock_acquire+0x8>)
 8011b12:	f000 ba40 	b.w	8011f96 <__retarget_lock_acquire_recursive>
 8011b16:	bf00      	nop
 8011b18:	2000076d 	.word	0x2000076d

08011b1c <__sfp_lock_release>:
 8011b1c:	4801      	ldr	r0, [pc, #4]	; (8011b24 <__sfp_lock_release+0x8>)
 8011b1e:	f000 ba3b 	b.w	8011f98 <__retarget_lock_release_recursive>
 8011b22:	bf00      	nop
 8011b24:	2000076d 	.word	0x2000076d

08011b28 <__sinit>:
 8011b28:	b510      	push	{r4, lr}
 8011b2a:	4604      	mov	r4, r0
 8011b2c:	f7ff fff0 	bl	8011b10 <__sfp_lock_acquire>
 8011b30:	6a23      	ldr	r3, [r4, #32]
 8011b32:	b11b      	cbz	r3, 8011b3c <__sinit+0x14>
 8011b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b38:	f7ff bff0 	b.w	8011b1c <__sfp_lock_release>
 8011b3c:	4b04      	ldr	r3, [pc, #16]	; (8011b50 <__sinit+0x28>)
 8011b3e:	6223      	str	r3, [r4, #32]
 8011b40:	4b04      	ldr	r3, [pc, #16]	; (8011b54 <__sinit+0x2c>)
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d1f5      	bne.n	8011b34 <__sinit+0xc>
 8011b48:	f7ff ffc4 	bl	8011ad4 <global_stdio_init.part.0>
 8011b4c:	e7f2      	b.n	8011b34 <__sinit+0xc>
 8011b4e:	bf00      	nop
 8011b50:	08011a95 	.word	0x08011a95
 8011b54:	20000764 	.word	0x20000764

08011b58 <fiprintf>:
 8011b58:	b40e      	push	{r1, r2, r3}
 8011b5a:	b503      	push	{r0, r1, lr}
 8011b5c:	4601      	mov	r1, r0
 8011b5e:	ab03      	add	r3, sp, #12
 8011b60:	4805      	ldr	r0, [pc, #20]	; (8011b78 <fiprintf+0x20>)
 8011b62:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b66:	6800      	ldr	r0, [r0, #0]
 8011b68:	9301      	str	r3, [sp, #4]
 8011b6a:	f000 fc01 	bl	8012370 <_vfiprintf_r>
 8011b6e:	b002      	add	sp, #8
 8011b70:	f85d eb04 	ldr.w	lr, [sp], #4
 8011b74:	b003      	add	sp, #12
 8011b76:	4770      	bx	lr
 8011b78:	200000ac 	.word	0x200000ac

08011b7c <_fwalk_sglue>:
 8011b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b80:	4607      	mov	r7, r0
 8011b82:	4688      	mov	r8, r1
 8011b84:	4614      	mov	r4, r2
 8011b86:	2600      	movs	r6, #0
 8011b88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011b8c:	f1b9 0901 	subs.w	r9, r9, #1
 8011b90:	d505      	bpl.n	8011b9e <_fwalk_sglue+0x22>
 8011b92:	6824      	ldr	r4, [r4, #0]
 8011b94:	2c00      	cmp	r4, #0
 8011b96:	d1f7      	bne.n	8011b88 <_fwalk_sglue+0xc>
 8011b98:	4630      	mov	r0, r6
 8011b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b9e:	89ab      	ldrh	r3, [r5, #12]
 8011ba0:	2b01      	cmp	r3, #1
 8011ba2:	d907      	bls.n	8011bb4 <_fwalk_sglue+0x38>
 8011ba4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011ba8:	3301      	adds	r3, #1
 8011baa:	d003      	beq.n	8011bb4 <_fwalk_sglue+0x38>
 8011bac:	4629      	mov	r1, r5
 8011bae:	4638      	mov	r0, r7
 8011bb0:	47c0      	blx	r8
 8011bb2:	4306      	orrs	r6, r0
 8011bb4:	3568      	adds	r5, #104	; 0x68
 8011bb6:	e7e9      	b.n	8011b8c <_fwalk_sglue+0x10>

08011bb8 <iprintf>:
 8011bb8:	b40f      	push	{r0, r1, r2, r3}
 8011bba:	b507      	push	{r0, r1, r2, lr}
 8011bbc:	4906      	ldr	r1, [pc, #24]	; (8011bd8 <iprintf+0x20>)
 8011bbe:	ab04      	add	r3, sp, #16
 8011bc0:	6808      	ldr	r0, [r1, #0]
 8011bc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8011bc6:	6881      	ldr	r1, [r0, #8]
 8011bc8:	9301      	str	r3, [sp, #4]
 8011bca:	f000 fbd1 	bl	8012370 <_vfiprintf_r>
 8011bce:	b003      	add	sp, #12
 8011bd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8011bd4:	b004      	add	sp, #16
 8011bd6:	4770      	bx	lr
 8011bd8:	200000ac 	.word	0x200000ac

08011bdc <_puts_r>:
 8011bdc:	6a03      	ldr	r3, [r0, #32]
 8011bde:	b570      	push	{r4, r5, r6, lr}
 8011be0:	6884      	ldr	r4, [r0, #8]
 8011be2:	4605      	mov	r5, r0
 8011be4:	460e      	mov	r6, r1
 8011be6:	b90b      	cbnz	r3, 8011bec <_puts_r+0x10>
 8011be8:	f7ff ff9e 	bl	8011b28 <__sinit>
 8011bec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011bee:	07db      	lsls	r3, r3, #31
 8011bf0:	d405      	bmi.n	8011bfe <_puts_r+0x22>
 8011bf2:	89a3      	ldrh	r3, [r4, #12]
 8011bf4:	0598      	lsls	r0, r3, #22
 8011bf6:	d402      	bmi.n	8011bfe <_puts_r+0x22>
 8011bf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011bfa:	f000 f9cc 	bl	8011f96 <__retarget_lock_acquire_recursive>
 8011bfe:	89a3      	ldrh	r3, [r4, #12]
 8011c00:	0719      	lsls	r1, r3, #28
 8011c02:	d513      	bpl.n	8011c2c <_puts_r+0x50>
 8011c04:	6923      	ldr	r3, [r4, #16]
 8011c06:	b18b      	cbz	r3, 8011c2c <_puts_r+0x50>
 8011c08:	3e01      	subs	r6, #1
 8011c0a:	68a3      	ldr	r3, [r4, #8]
 8011c0c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011c10:	3b01      	subs	r3, #1
 8011c12:	60a3      	str	r3, [r4, #8]
 8011c14:	b9e9      	cbnz	r1, 8011c52 <_puts_r+0x76>
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	da2e      	bge.n	8011c78 <_puts_r+0x9c>
 8011c1a:	4622      	mov	r2, r4
 8011c1c:	210a      	movs	r1, #10
 8011c1e:	4628      	mov	r0, r5
 8011c20:	f000 f89b 	bl	8011d5a <__swbuf_r>
 8011c24:	3001      	adds	r0, #1
 8011c26:	d007      	beq.n	8011c38 <_puts_r+0x5c>
 8011c28:	250a      	movs	r5, #10
 8011c2a:	e007      	b.n	8011c3c <_puts_r+0x60>
 8011c2c:	4621      	mov	r1, r4
 8011c2e:	4628      	mov	r0, r5
 8011c30:	f000 f8d0 	bl	8011dd4 <__swsetup_r>
 8011c34:	2800      	cmp	r0, #0
 8011c36:	d0e7      	beq.n	8011c08 <_puts_r+0x2c>
 8011c38:	f04f 35ff 	mov.w	r5, #4294967295
 8011c3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011c3e:	07da      	lsls	r2, r3, #31
 8011c40:	d405      	bmi.n	8011c4e <_puts_r+0x72>
 8011c42:	89a3      	ldrh	r3, [r4, #12]
 8011c44:	059b      	lsls	r3, r3, #22
 8011c46:	d402      	bmi.n	8011c4e <_puts_r+0x72>
 8011c48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011c4a:	f000 f9a5 	bl	8011f98 <__retarget_lock_release_recursive>
 8011c4e:	4628      	mov	r0, r5
 8011c50:	bd70      	pop	{r4, r5, r6, pc}
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	da04      	bge.n	8011c60 <_puts_r+0x84>
 8011c56:	69a2      	ldr	r2, [r4, #24]
 8011c58:	429a      	cmp	r2, r3
 8011c5a:	dc06      	bgt.n	8011c6a <_puts_r+0x8e>
 8011c5c:	290a      	cmp	r1, #10
 8011c5e:	d004      	beq.n	8011c6a <_puts_r+0x8e>
 8011c60:	6823      	ldr	r3, [r4, #0]
 8011c62:	1c5a      	adds	r2, r3, #1
 8011c64:	6022      	str	r2, [r4, #0]
 8011c66:	7019      	strb	r1, [r3, #0]
 8011c68:	e7cf      	b.n	8011c0a <_puts_r+0x2e>
 8011c6a:	4622      	mov	r2, r4
 8011c6c:	4628      	mov	r0, r5
 8011c6e:	f000 f874 	bl	8011d5a <__swbuf_r>
 8011c72:	3001      	adds	r0, #1
 8011c74:	d1c9      	bne.n	8011c0a <_puts_r+0x2e>
 8011c76:	e7df      	b.n	8011c38 <_puts_r+0x5c>
 8011c78:	6823      	ldr	r3, [r4, #0]
 8011c7a:	250a      	movs	r5, #10
 8011c7c:	1c5a      	adds	r2, r3, #1
 8011c7e:	6022      	str	r2, [r4, #0]
 8011c80:	701d      	strb	r5, [r3, #0]
 8011c82:	e7db      	b.n	8011c3c <_puts_r+0x60>

08011c84 <puts>:
 8011c84:	4b02      	ldr	r3, [pc, #8]	; (8011c90 <puts+0xc>)
 8011c86:	4601      	mov	r1, r0
 8011c88:	6818      	ldr	r0, [r3, #0]
 8011c8a:	f7ff bfa7 	b.w	8011bdc <_puts_r>
 8011c8e:	bf00      	nop
 8011c90:	200000ac 	.word	0x200000ac

08011c94 <siprintf>:
 8011c94:	b40e      	push	{r1, r2, r3}
 8011c96:	b500      	push	{lr}
 8011c98:	b09c      	sub	sp, #112	; 0x70
 8011c9a:	ab1d      	add	r3, sp, #116	; 0x74
 8011c9c:	9002      	str	r0, [sp, #8]
 8011c9e:	9006      	str	r0, [sp, #24]
 8011ca0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011ca4:	4809      	ldr	r0, [pc, #36]	; (8011ccc <siprintf+0x38>)
 8011ca6:	9107      	str	r1, [sp, #28]
 8011ca8:	9104      	str	r1, [sp, #16]
 8011caa:	4909      	ldr	r1, [pc, #36]	; (8011cd0 <siprintf+0x3c>)
 8011cac:	f853 2b04 	ldr.w	r2, [r3], #4
 8011cb0:	9105      	str	r1, [sp, #20]
 8011cb2:	6800      	ldr	r0, [r0, #0]
 8011cb4:	9301      	str	r3, [sp, #4]
 8011cb6:	a902      	add	r1, sp, #8
 8011cb8:	f000 fa32 	bl	8012120 <_svfiprintf_r>
 8011cbc:	9b02      	ldr	r3, [sp, #8]
 8011cbe:	2200      	movs	r2, #0
 8011cc0:	701a      	strb	r2, [r3, #0]
 8011cc2:	b01c      	add	sp, #112	; 0x70
 8011cc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8011cc8:	b003      	add	sp, #12
 8011cca:	4770      	bx	lr
 8011ccc:	200000ac 	.word	0x200000ac
 8011cd0:	ffff0208 	.word	0xffff0208

08011cd4 <__sread>:
 8011cd4:	b510      	push	{r4, lr}
 8011cd6:	460c      	mov	r4, r1
 8011cd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011cdc:	f000 f8fc 	bl	8011ed8 <_read_r>
 8011ce0:	2800      	cmp	r0, #0
 8011ce2:	bfab      	itete	ge
 8011ce4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011ce6:	89a3      	ldrhlt	r3, [r4, #12]
 8011ce8:	181b      	addge	r3, r3, r0
 8011cea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011cee:	bfac      	ite	ge
 8011cf0:	6563      	strge	r3, [r4, #84]	; 0x54
 8011cf2:	81a3      	strhlt	r3, [r4, #12]
 8011cf4:	bd10      	pop	{r4, pc}

08011cf6 <__swrite>:
 8011cf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cfa:	461f      	mov	r7, r3
 8011cfc:	898b      	ldrh	r3, [r1, #12]
 8011cfe:	05db      	lsls	r3, r3, #23
 8011d00:	4605      	mov	r5, r0
 8011d02:	460c      	mov	r4, r1
 8011d04:	4616      	mov	r6, r2
 8011d06:	d505      	bpl.n	8011d14 <__swrite+0x1e>
 8011d08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d0c:	2302      	movs	r3, #2
 8011d0e:	2200      	movs	r2, #0
 8011d10:	f000 f8d0 	bl	8011eb4 <_lseek_r>
 8011d14:	89a3      	ldrh	r3, [r4, #12]
 8011d16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011d1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011d1e:	81a3      	strh	r3, [r4, #12]
 8011d20:	4632      	mov	r2, r6
 8011d22:	463b      	mov	r3, r7
 8011d24:	4628      	mov	r0, r5
 8011d26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011d2a:	f000 b8f7 	b.w	8011f1c <_write_r>

08011d2e <__sseek>:
 8011d2e:	b510      	push	{r4, lr}
 8011d30:	460c      	mov	r4, r1
 8011d32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d36:	f000 f8bd 	bl	8011eb4 <_lseek_r>
 8011d3a:	1c43      	adds	r3, r0, #1
 8011d3c:	89a3      	ldrh	r3, [r4, #12]
 8011d3e:	bf15      	itete	ne
 8011d40:	6560      	strne	r0, [r4, #84]	; 0x54
 8011d42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011d46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011d4a:	81a3      	strheq	r3, [r4, #12]
 8011d4c:	bf18      	it	ne
 8011d4e:	81a3      	strhne	r3, [r4, #12]
 8011d50:	bd10      	pop	{r4, pc}

08011d52 <__sclose>:
 8011d52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d56:	f000 b89d 	b.w	8011e94 <_close_r>

08011d5a <__swbuf_r>:
 8011d5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d5c:	460e      	mov	r6, r1
 8011d5e:	4614      	mov	r4, r2
 8011d60:	4605      	mov	r5, r0
 8011d62:	b118      	cbz	r0, 8011d6c <__swbuf_r+0x12>
 8011d64:	6a03      	ldr	r3, [r0, #32]
 8011d66:	b90b      	cbnz	r3, 8011d6c <__swbuf_r+0x12>
 8011d68:	f7ff fede 	bl	8011b28 <__sinit>
 8011d6c:	69a3      	ldr	r3, [r4, #24]
 8011d6e:	60a3      	str	r3, [r4, #8]
 8011d70:	89a3      	ldrh	r3, [r4, #12]
 8011d72:	071a      	lsls	r2, r3, #28
 8011d74:	d525      	bpl.n	8011dc2 <__swbuf_r+0x68>
 8011d76:	6923      	ldr	r3, [r4, #16]
 8011d78:	b31b      	cbz	r3, 8011dc2 <__swbuf_r+0x68>
 8011d7a:	6823      	ldr	r3, [r4, #0]
 8011d7c:	6922      	ldr	r2, [r4, #16]
 8011d7e:	1a98      	subs	r0, r3, r2
 8011d80:	6963      	ldr	r3, [r4, #20]
 8011d82:	b2f6      	uxtb	r6, r6
 8011d84:	4283      	cmp	r3, r0
 8011d86:	4637      	mov	r7, r6
 8011d88:	dc04      	bgt.n	8011d94 <__swbuf_r+0x3a>
 8011d8a:	4621      	mov	r1, r4
 8011d8c:	4628      	mov	r0, r5
 8011d8e:	f000 fe1f 	bl	80129d0 <_fflush_r>
 8011d92:	b9e0      	cbnz	r0, 8011dce <__swbuf_r+0x74>
 8011d94:	68a3      	ldr	r3, [r4, #8]
 8011d96:	3b01      	subs	r3, #1
 8011d98:	60a3      	str	r3, [r4, #8]
 8011d9a:	6823      	ldr	r3, [r4, #0]
 8011d9c:	1c5a      	adds	r2, r3, #1
 8011d9e:	6022      	str	r2, [r4, #0]
 8011da0:	701e      	strb	r6, [r3, #0]
 8011da2:	6962      	ldr	r2, [r4, #20]
 8011da4:	1c43      	adds	r3, r0, #1
 8011da6:	429a      	cmp	r2, r3
 8011da8:	d004      	beq.n	8011db4 <__swbuf_r+0x5a>
 8011daa:	89a3      	ldrh	r3, [r4, #12]
 8011dac:	07db      	lsls	r3, r3, #31
 8011dae:	d506      	bpl.n	8011dbe <__swbuf_r+0x64>
 8011db0:	2e0a      	cmp	r6, #10
 8011db2:	d104      	bne.n	8011dbe <__swbuf_r+0x64>
 8011db4:	4621      	mov	r1, r4
 8011db6:	4628      	mov	r0, r5
 8011db8:	f000 fe0a 	bl	80129d0 <_fflush_r>
 8011dbc:	b938      	cbnz	r0, 8011dce <__swbuf_r+0x74>
 8011dbe:	4638      	mov	r0, r7
 8011dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011dc2:	4621      	mov	r1, r4
 8011dc4:	4628      	mov	r0, r5
 8011dc6:	f000 f805 	bl	8011dd4 <__swsetup_r>
 8011dca:	2800      	cmp	r0, #0
 8011dcc:	d0d5      	beq.n	8011d7a <__swbuf_r+0x20>
 8011dce:	f04f 37ff 	mov.w	r7, #4294967295
 8011dd2:	e7f4      	b.n	8011dbe <__swbuf_r+0x64>

08011dd4 <__swsetup_r>:
 8011dd4:	b538      	push	{r3, r4, r5, lr}
 8011dd6:	4b2a      	ldr	r3, [pc, #168]	; (8011e80 <__swsetup_r+0xac>)
 8011dd8:	4605      	mov	r5, r0
 8011dda:	6818      	ldr	r0, [r3, #0]
 8011ddc:	460c      	mov	r4, r1
 8011dde:	b118      	cbz	r0, 8011de8 <__swsetup_r+0x14>
 8011de0:	6a03      	ldr	r3, [r0, #32]
 8011de2:	b90b      	cbnz	r3, 8011de8 <__swsetup_r+0x14>
 8011de4:	f7ff fea0 	bl	8011b28 <__sinit>
 8011de8:	89a3      	ldrh	r3, [r4, #12]
 8011dea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011dee:	0718      	lsls	r0, r3, #28
 8011df0:	d422      	bmi.n	8011e38 <__swsetup_r+0x64>
 8011df2:	06d9      	lsls	r1, r3, #27
 8011df4:	d407      	bmi.n	8011e06 <__swsetup_r+0x32>
 8011df6:	2309      	movs	r3, #9
 8011df8:	602b      	str	r3, [r5, #0]
 8011dfa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011dfe:	81a3      	strh	r3, [r4, #12]
 8011e00:	f04f 30ff 	mov.w	r0, #4294967295
 8011e04:	e034      	b.n	8011e70 <__swsetup_r+0x9c>
 8011e06:	0758      	lsls	r0, r3, #29
 8011e08:	d512      	bpl.n	8011e30 <__swsetup_r+0x5c>
 8011e0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011e0c:	b141      	cbz	r1, 8011e20 <__swsetup_r+0x4c>
 8011e0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011e12:	4299      	cmp	r1, r3
 8011e14:	d002      	beq.n	8011e1c <__swsetup_r+0x48>
 8011e16:	4628      	mov	r0, r5
 8011e18:	f000 f8d4 	bl	8011fc4 <_free_r>
 8011e1c:	2300      	movs	r3, #0
 8011e1e:	6363      	str	r3, [r4, #52]	; 0x34
 8011e20:	89a3      	ldrh	r3, [r4, #12]
 8011e22:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011e26:	81a3      	strh	r3, [r4, #12]
 8011e28:	2300      	movs	r3, #0
 8011e2a:	6063      	str	r3, [r4, #4]
 8011e2c:	6923      	ldr	r3, [r4, #16]
 8011e2e:	6023      	str	r3, [r4, #0]
 8011e30:	89a3      	ldrh	r3, [r4, #12]
 8011e32:	f043 0308 	orr.w	r3, r3, #8
 8011e36:	81a3      	strh	r3, [r4, #12]
 8011e38:	6923      	ldr	r3, [r4, #16]
 8011e3a:	b94b      	cbnz	r3, 8011e50 <__swsetup_r+0x7c>
 8011e3c:	89a3      	ldrh	r3, [r4, #12]
 8011e3e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011e42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011e46:	d003      	beq.n	8011e50 <__swsetup_r+0x7c>
 8011e48:	4621      	mov	r1, r4
 8011e4a:	4628      	mov	r0, r5
 8011e4c:	f000 fe0e 	bl	8012a6c <__smakebuf_r>
 8011e50:	89a0      	ldrh	r0, [r4, #12]
 8011e52:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011e56:	f010 0301 	ands.w	r3, r0, #1
 8011e5a:	d00a      	beq.n	8011e72 <__swsetup_r+0x9e>
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	60a3      	str	r3, [r4, #8]
 8011e60:	6963      	ldr	r3, [r4, #20]
 8011e62:	425b      	negs	r3, r3
 8011e64:	61a3      	str	r3, [r4, #24]
 8011e66:	6923      	ldr	r3, [r4, #16]
 8011e68:	b943      	cbnz	r3, 8011e7c <__swsetup_r+0xa8>
 8011e6a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011e6e:	d1c4      	bne.n	8011dfa <__swsetup_r+0x26>
 8011e70:	bd38      	pop	{r3, r4, r5, pc}
 8011e72:	0781      	lsls	r1, r0, #30
 8011e74:	bf58      	it	pl
 8011e76:	6963      	ldrpl	r3, [r4, #20]
 8011e78:	60a3      	str	r3, [r4, #8]
 8011e7a:	e7f4      	b.n	8011e66 <__swsetup_r+0x92>
 8011e7c:	2000      	movs	r0, #0
 8011e7e:	e7f7      	b.n	8011e70 <__swsetup_r+0x9c>
 8011e80:	200000ac 	.word	0x200000ac

08011e84 <memset>:
 8011e84:	4402      	add	r2, r0
 8011e86:	4603      	mov	r3, r0
 8011e88:	4293      	cmp	r3, r2
 8011e8a:	d100      	bne.n	8011e8e <memset+0xa>
 8011e8c:	4770      	bx	lr
 8011e8e:	f803 1b01 	strb.w	r1, [r3], #1
 8011e92:	e7f9      	b.n	8011e88 <memset+0x4>

08011e94 <_close_r>:
 8011e94:	b538      	push	{r3, r4, r5, lr}
 8011e96:	4d06      	ldr	r5, [pc, #24]	; (8011eb0 <_close_r+0x1c>)
 8011e98:	2300      	movs	r3, #0
 8011e9a:	4604      	mov	r4, r0
 8011e9c:	4608      	mov	r0, r1
 8011e9e:	602b      	str	r3, [r5, #0]
 8011ea0:	f7f1 ff91 	bl	8003dc6 <_close>
 8011ea4:	1c43      	adds	r3, r0, #1
 8011ea6:	d102      	bne.n	8011eae <_close_r+0x1a>
 8011ea8:	682b      	ldr	r3, [r5, #0]
 8011eaa:	b103      	cbz	r3, 8011eae <_close_r+0x1a>
 8011eac:	6023      	str	r3, [r4, #0]
 8011eae:	bd38      	pop	{r3, r4, r5, pc}
 8011eb0:	20000768 	.word	0x20000768

08011eb4 <_lseek_r>:
 8011eb4:	b538      	push	{r3, r4, r5, lr}
 8011eb6:	4d07      	ldr	r5, [pc, #28]	; (8011ed4 <_lseek_r+0x20>)
 8011eb8:	4604      	mov	r4, r0
 8011eba:	4608      	mov	r0, r1
 8011ebc:	4611      	mov	r1, r2
 8011ebe:	2200      	movs	r2, #0
 8011ec0:	602a      	str	r2, [r5, #0]
 8011ec2:	461a      	mov	r2, r3
 8011ec4:	f7f1 ffa6 	bl	8003e14 <_lseek>
 8011ec8:	1c43      	adds	r3, r0, #1
 8011eca:	d102      	bne.n	8011ed2 <_lseek_r+0x1e>
 8011ecc:	682b      	ldr	r3, [r5, #0]
 8011ece:	b103      	cbz	r3, 8011ed2 <_lseek_r+0x1e>
 8011ed0:	6023      	str	r3, [r4, #0]
 8011ed2:	bd38      	pop	{r3, r4, r5, pc}
 8011ed4:	20000768 	.word	0x20000768

08011ed8 <_read_r>:
 8011ed8:	b538      	push	{r3, r4, r5, lr}
 8011eda:	4d07      	ldr	r5, [pc, #28]	; (8011ef8 <_read_r+0x20>)
 8011edc:	4604      	mov	r4, r0
 8011ede:	4608      	mov	r0, r1
 8011ee0:	4611      	mov	r1, r2
 8011ee2:	2200      	movs	r2, #0
 8011ee4:	602a      	str	r2, [r5, #0]
 8011ee6:	461a      	mov	r2, r3
 8011ee8:	f7f1 ff34 	bl	8003d54 <_read>
 8011eec:	1c43      	adds	r3, r0, #1
 8011eee:	d102      	bne.n	8011ef6 <_read_r+0x1e>
 8011ef0:	682b      	ldr	r3, [r5, #0]
 8011ef2:	b103      	cbz	r3, 8011ef6 <_read_r+0x1e>
 8011ef4:	6023      	str	r3, [r4, #0]
 8011ef6:	bd38      	pop	{r3, r4, r5, pc}
 8011ef8:	20000768 	.word	0x20000768

08011efc <_sbrk_r>:
 8011efc:	b538      	push	{r3, r4, r5, lr}
 8011efe:	4d06      	ldr	r5, [pc, #24]	; (8011f18 <_sbrk_r+0x1c>)
 8011f00:	2300      	movs	r3, #0
 8011f02:	4604      	mov	r4, r0
 8011f04:	4608      	mov	r0, r1
 8011f06:	602b      	str	r3, [r5, #0]
 8011f08:	f7f1 ff92 	bl	8003e30 <_sbrk>
 8011f0c:	1c43      	adds	r3, r0, #1
 8011f0e:	d102      	bne.n	8011f16 <_sbrk_r+0x1a>
 8011f10:	682b      	ldr	r3, [r5, #0]
 8011f12:	b103      	cbz	r3, 8011f16 <_sbrk_r+0x1a>
 8011f14:	6023      	str	r3, [r4, #0]
 8011f16:	bd38      	pop	{r3, r4, r5, pc}
 8011f18:	20000768 	.word	0x20000768

08011f1c <_write_r>:
 8011f1c:	b538      	push	{r3, r4, r5, lr}
 8011f1e:	4d07      	ldr	r5, [pc, #28]	; (8011f3c <_write_r+0x20>)
 8011f20:	4604      	mov	r4, r0
 8011f22:	4608      	mov	r0, r1
 8011f24:	4611      	mov	r1, r2
 8011f26:	2200      	movs	r2, #0
 8011f28:	602a      	str	r2, [r5, #0]
 8011f2a:	461a      	mov	r2, r3
 8011f2c:	f7f1 ff2f 	bl	8003d8e <_write>
 8011f30:	1c43      	adds	r3, r0, #1
 8011f32:	d102      	bne.n	8011f3a <_write_r+0x1e>
 8011f34:	682b      	ldr	r3, [r5, #0]
 8011f36:	b103      	cbz	r3, 8011f3a <_write_r+0x1e>
 8011f38:	6023      	str	r3, [r4, #0]
 8011f3a:	bd38      	pop	{r3, r4, r5, pc}
 8011f3c:	20000768 	.word	0x20000768

08011f40 <__errno>:
 8011f40:	4b01      	ldr	r3, [pc, #4]	; (8011f48 <__errno+0x8>)
 8011f42:	6818      	ldr	r0, [r3, #0]
 8011f44:	4770      	bx	lr
 8011f46:	bf00      	nop
 8011f48:	200000ac 	.word	0x200000ac

08011f4c <__libc_init_array>:
 8011f4c:	b570      	push	{r4, r5, r6, lr}
 8011f4e:	4d0d      	ldr	r5, [pc, #52]	; (8011f84 <__libc_init_array+0x38>)
 8011f50:	4c0d      	ldr	r4, [pc, #52]	; (8011f88 <__libc_init_array+0x3c>)
 8011f52:	1b64      	subs	r4, r4, r5
 8011f54:	10a4      	asrs	r4, r4, #2
 8011f56:	2600      	movs	r6, #0
 8011f58:	42a6      	cmp	r6, r4
 8011f5a:	d109      	bne.n	8011f70 <__libc_init_array+0x24>
 8011f5c:	4d0b      	ldr	r5, [pc, #44]	; (8011f8c <__libc_init_array+0x40>)
 8011f5e:	4c0c      	ldr	r4, [pc, #48]	; (8011f90 <__libc_init_array+0x44>)
 8011f60:	f000 fe40 	bl	8012be4 <_init>
 8011f64:	1b64      	subs	r4, r4, r5
 8011f66:	10a4      	asrs	r4, r4, #2
 8011f68:	2600      	movs	r6, #0
 8011f6a:	42a6      	cmp	r6, r4
 8011f6c:	d105      	bne.n	8011f7a <__libc_init_array+0x2e>
 8011f6e:	bd70      	pop	{r4, r5, r6, pc}
 8011f70:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f74:	4798      	blx	r3
 8011f76:	3601      	adds	r6, #1
 8011f78:	e7ee      	b.n	8011f58 <__libc_init_array+0xc>
 8011f7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f7e:	4798      	blx	r3
 8011f80:	3601      	adds	r6, #1
 8011f82:	e7f2      	b.n	8011f6a <__libc_init_array+0x1e>
 8011f84:	08014618 	.word	0x08014618
 8011f88:	08014618 	.word	0x08014618
 8011f8c:	08014618 	.word	0x08014618
 8011f90:	0801461c 	.word	0x0801461c

08011f94 <__retarget_lock_init_recursive>:
 8011f94:	4770      	bx	lr

08011f96 <__retarget_lock_acquire_recursive>:
 8011f96:	4770      	bx	lr

08011f98 <__retarget_lock_release_recursive>:
 8011f98:	4770      	bx	lr

08011f9a <memcpy>:
 8011f9a:	440a      	add	r2, r1
 8011f9c:	4291      	cmp	r1, r2
 8011f9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8011fa2:	d100      	bne.n	8011fa6 <memcpy+0xc>
 8011fa4:	4770      	bx	lr
 8011fa6:	b510      	push	{r4, lr}
 8011fa8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011fac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011fb0:	4291      	cmp	r1, r2
 8011fb2:	d1f9      	bne.n	8011fa8 <memcpy+0xe>
 8011fb4:	bd10      	pop	{r4, pc}

08011fb6 <abort>:
 8011fb6:	b508      	push	{r3, lr}
 8011fb8:	2006      	movs	r0, #6
 8011fba:	f000 fdd5 	bl	8012b68 <raise>
 8011fbe:	2001      	movs	r0, #1
 8011fc0:	f7f1 febe 	bl	8003d40 <_exit>

08011fc4 <_free_r>:
 8011fc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011fc6:	2900      	cmp	r1, #0
 8011fc8:	d044      	beq.n	8012054 <_free_r+0x90>
 8011fca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011fce:	9001      	str	r0, [sp, #4]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	f1a1 0404 	sub.w	r4, r1, #4
 8011fd6:	bfb8      	it	lt
 8011fd8:	18e4      	addlt	r4, r4, r3
 8011fda:	f7ff fc71 	bl	80118c0 <__malloc_lock>
 8011fde:	4a1e      	ldr	r2, [pc, #120]	; (8012058 <_free_r+0x94>)
 8011fe0:	9801      	ldr	r0, [sp, #4]
 8011fe2:	6813      	ldr	r3, [r2, #0]
 8011fe4:	b933      	cbnz	r3, 8011ff4 <_free_r+0x30>
 8011fe6:	6063      	str	r3, [r4, #4]
 8011fe8:	6014      	str	r4, [r2, #0]
 8011fea:	b003      	add	sp, #12
 8011fec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011ff0:	f7ff bc6c 	b.w	80118cc <__malloc_unlock>
 8011ff4:	42a3      	cmp	r3, r4
 8011ff6:	d908      	bls.n	801200a <_free_r+0x46>
 8011ff8:	6825      	ldr	r5, [r4, #0]
 8011ffa:	1961      	adds	r1, r4, r5
 8011ffc:	428b      	cmp	r3, r1
 8011ffe:	bf01      	itttt	eq
 8012000:	6819      	ldreq	r1, [r3, #0]
 8012002:	685b      	ldreq	r3, [r3, #4]
 8012004:	1949      	addeq	r1, r1, r5
 8012006:	6021      	streq	r1, [r4, #0]
 8012008:	e7ed      	b.n	8011fe6 <_free_r+0x22>
 801200a:	461a      	mov	r2, r3
 801200c:	685b      	ldr	r3, [r3, #4]
 801200e:	b10b      	cbz	r3, 8012014 <_free_r+0x50>
 8012010:	42a3      	cmp	r3, r4
 8012012:	d9fa      	bls.n	801200a <_free_r+0x46>
 8012014:	6811      	ldr	r1, [r2, #0]
 8012016:	1855      	adds	r5, r2, r1
 8012018:	42a5      	cmp	r5, r4
 801201a:	d10b      	bne.n	8012034 <_free_r+0x70>
 801201c:	6824      	ldr	r4, [r4, #0]
 801201e:	4421      	add	r1, r4
 8012020:	1854      	adds	r4, r2, r1
 8012022:	42a3      	cmp	r3, r4
 8012024:	6011      	str	r1, [r2, #0]
 8012026:	d1e0      	bne.n	8011fea <_free_r+0x26>
 8012028:	681c      	ldr	r4, [r3, #0]
 801202a:	685b      	ldr	r3, [r3, #4]
 801202c:	6053      	str	r3, [r2, #4]
 801202e:	440c      	add	r4, r1
 8012030:	6014      	str	r4, [r2, #0]
 8012032:	e7da      	b.n	8011fea <_free_r+0x26>
 8012034:	d902      	bls.n	801203c <_free_r+0x78>
 8012036:	230c      	movs	r3, #12
 8012038:	6003      	str	r3, [r0, #0]
 801203a:	e7d6      	b.n	8011fea <_free_r+0x26>
 801203c:	6825      	ldr	r5, [r4, #0]
 801203e:	1961      	adds	r1, r4, r5
 8012040:	428b      	cmp	r3, r1
 8012042:	bf04      	itt	eq
 8012044:	6819      	ldreq	r1, [r3, #0]
 8012046:	685b      	ldreq	r3, [r3, #4]
 8012048:	6063      	str	r3, [r4, #4]
 801204a:	bf04      	itt	eq
 801204c:	1949      	addeq	r1, r1, r5
 801204e:	6021      	streq	r1, [r4, #0]
 8012050:	6054      	str	r4, [r2, #4]
 8012052:	e7ca      	b.n	8011fea <_free_r+0x26>
 8012054:	b003      	add	sp, #12
 8012056:	bd30      	pop	{r4, r5, pc}
 8012058:	20000624 	.word	0x20000624

0801205c <_malloc_usable_size_r>:
 801205c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012060:	1f18      	subs	r0, r3, #4
 8012062:	2b00      	cmp	r3, #0
 8012064:	bfbc      	itt	lt
 8012066:	580b      	ldrlt	r3, [r1, r0]
 8012068:	18c0      	addlt	r0, r0, r3
 801206a:	4770      	bx	lr

0801206c <__ssputs_r>:
 801206c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012070:	688e      	ldr	r6, [r1, #8]
 8012072:	461f      	mov	r7, r3
 8012074:	42be      	cmp	r6, r7
 8012076:	680b      	ldr	r3, [r1, #0]
 8012078:	4682      	mov	sl, r0
 801207a:	460c      	mov	r4, r1
 801207c:	4690      	mov	r8, r2
 801207e:	d82c      	bhi.n	80120da <__ssputs_r+0x6e>
 8012080:	898a      	ldrh	r2, [r1, #12]
 8012082:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012086:	d026      	beq.n	80120d6 <__ssputs_r+0x6a>
 8012088:	6965      	ldr	r5, [r4, #20]
 801208a:	6909      	ldr	r1, [r1, #16]
 801208c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012090:	eba3 0901 	sub.w	r9, r3, r1
 8012094:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012098:	1c7b      	adds	r3, r7, #1
 801209a:	444b      	add	r3, r9
 801209c:	106d      	asrs	r5, r5, #1
 801209e:	429d      	cmp	r5, r3
 80120a0:	bf38      	it	cc
 80120a2:	461d      	movcc	r5, r3
 80120a4:	0553      	lsls	r3, r2, #21
 80120a6:	d527      	bpl.n	80120f8 <__ssputs_r+0x8c>
 80120a8:	4629      	mov	r1, r5
 80120aa:	f7ff fb89 	bl	80117c0 <_malloc_r>
 80120ae:	4606      	mov	r6, r0
 80120b0:	b360      	cbz	r0, 801210c <__ssputs_r+0xa0>
 80120b2:	6921      	ldr	r1, [r4, #16]
 80120b4:	464a      	mov	r2, r9
 80120b6:	f7ff ff70 	bl	8011f9a <memcpy>
 80120ba:	89a3      	ldrh	r3, [r4, #12]
 80120bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80120c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80120c4:	81a3      	strh	r3, [r4, #12]
 80120c6:	6126      	str	r6, [r4, #16]
 80120c8:	6165      	str	r5, [r4, #20]
 80120ca:	444e      	add	r6, r9
 80120cc:	eba5 0509 	sub.w	r5, r5, r9
 80120d0:	6026      	str	r6, [r4, #0]
 80120d2:	60a5      	str	r5, [r4, #8]
 80120d4:	463e      	mov	r6, r7
 80120d6:	42be      	cmp	r6, r7
 80120d8:	d900      	bls.n	80120dc <__ssputs_r+0x70>
 80120da:	463e      	mov	r6, r7
 80120dc:	6820      	ldr	r0, [r4, #0]
 80120de:	4632      	mov	r2, r6
 80120e0:	4641      	mov	r1, r8
 80120e2:	f000 fcff 	bl	8012ae4 <memmove>
 80120e6:	68a3      	ldr	r3, [r4, #8]
 80120e8:	1b9b      	subs	r3, r3, r6
 80120ea:	60a3      	str	r3, [r4, #8]
 80120ec:	6823      	ldr	r3, [r4, #0]
 80120ee:	4433      	add	r3, r6
 80120f0:	6023      	str	r3, [r4, #0]
 80120f2:	2000      	movs	r0, #0
 80120f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120f8:	462a      	mov	r2, r5
 80120fa:	f7ff fc59 	bl	80119b0 <_realloc_r>
 80120fe:	4606      	mov	r6, r0
 8012100:	2800      	cmp	r0, #0
 8012102:	d1e0      	bne.n	80120c6 <__ssputs_r+0x5a>
 8012104:	6921      	ldr	r1, [r4, #16]
 8012106:	4650      	mov	r0, sl
 8012108:	f7ff ff5c 	bl	8011fc4 <_free_r>
 801210c:	230c      	movs	r3, #12
 801210e:	f8ca 3000 	str.w	r3, [sl]
 8012112:	89a3      	ldrh	r3, [r4, #12]
 8012114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012118:	81a3      	strh	r3, [r4, #12]
 801211a:	f04f 30ff 	mov.w	r0, #4294967295
 801211e:	e7e9      	b.n	80120f4 <__ssputs_r+0x88>

08012120 <_svfiprintf_r>:
 8012120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012124:	4698      	mov	r8, r3
 8012126:	898b      	ldrh	r3, [r1, #12]
 8012128:	061b      	lsls	r3, r3, #24
 801212a:	b09d      	sub	sp, #116	; 0x74
 801212c:	4607      	mov	r7, r0
 801212e:	460d      	mov	r5, r1
 8012130:	4614      	mov	r4, r2
 8012132:	d50e      	bpl.n	8012152 <_svfiprintf_r+0x32>
 8012134:	690b      	ldr	r3, [r1, #16]
 8012136:	b963      	cbnz	r3, 8012152 <_svfiprintf_r+0x32>
 8012138:	2140      	movs	r1, #64	; 0x40
 801213a:	f7ff fb41 	bl	80117c0 <_malloc_r>
 801213e:	6028      	str	r0, [r5, #0]
 8012140:	6128      	str	r0, [r5, #16]
 8012142:	b920      	cbnz	r0, 801214e <_svfiprintf_r+0x2e>
 8012144:	230c      	movs	r3, #12
 8012146:	603b      	str	r3, [r7, #0]
 8012148:	f04f 30ff 	mov.w	r0, #4294967295
 801214c:	e0d0      	b.n	80122f0 <_svfiprintf_r+0x1d0>
 801214e:	2340      	movs	r3, #64	; 0x40
 8012150:	616b      	str	r3, [r5, #20]
 8012152:	2300      	movs	r3, #0
 8012154:	9309      	str	r3, [sp, #36]	; 0x24
 8012156:	2320      	movs	r3, #32
 8012158:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801215c:	f8cd 800c 	str.w	r8, [sp, #12]
 8012160:	2330      	movs	r3, #48	; 0x30
 8012162:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8012308 <_svfiprintf_r+0x1e8>
 8012166:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801216a:	f04f 0901 	mov.w	r9, #1
 801216e:	4623      	mov	r3, r4
 8012170:	469a      	mov	sl, r3
 8012172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012176:	b10a      	cbz	r2, 801217c <_svfiprintf_r+0x5c>
 8012178:	2a25      	cmp	r2, #37	; 0x25
 801217a:	d1f9      	bne.n	8012170 <_svfiprintf_r+0x50>
 801217c:	ebba 0b04 	subs.w	fp, sl, r4
 8012180:	d00b      	beq.n	801219a <_svfiprintf_r+0x7a>
 8012182:	465b      	mov	r3, fp
 8012184:	4622      	mov	r2, r4
 8012186:	4629      	mov	r1, r5
 8012188:	4638      	mov	r0, r7
 801218a:	f7ff ff6f 	bl	801206c <__ssputs_r>
 801218e:	3001      	adds	r0, #1
 8012190:	f000 80a9 	beq.w	80122e6 <_svfiprintf_r+0x1c6>
 8012194:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012196:	445a      	add	r2, fp
 8012198:	9209      	str	r2, [sp, #36]	; 0x24
 801219a:	f89a 3000 	ldrb.w	r3, [sl]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	f000 80a1 	beq.w	80122e6 <_svfiprintf_r+0x1c6>
 80121a4:	2300      	movs	r3, #0
 80121a6:	f04f 32ff 	mov.w	r2, #4294967295
 80121aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80121ae:	f10a 0a01 	add.w	sl, sl, #1
 80121b2:	9304      	str	r3, [sp, #16]
 80121b4:	9307      	str	r3, [sp, #28]
 80121b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80121ba:	931a      	str	r3, [sp, #104]	; 0x68
 80121bc:	4654      	mov	r4, sl
 80121be:	2205      	movs	r2, #5
 80121c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121c4:	4850      	ldr	r0, [pc, #320]	; (8012308 <_svfiprintf_r+0x1e8>)
 80121c6:	f7ee f893 	bl	80002f0 <memchr>
 80121ca:	9a04      	ldr	r2, [sp, #16]
 80121cc:	b9d8      	cbnz	r0, 8012206 <_svfiprintf_r+0xe6>
 80121ce:	06d0      	lsls	r0, r2, #27
 80121d0:	bf44      	itt	mi
 80121d2:	2320      	movmi	r3, #32
 80121d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80121d8:	0711      	lsls	r1, r2, #28
 80121da:	bf44      	itt	mi
 80121dc:	232b      	movmi	r3, #43	; 0x2b
 80121de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80121e2:	f89a 3000 	ldrb.w	r3, [sl]
 80121e6:	2b2a      	cmp	r3, #42	; 0x2a
 80121e8:	d015      	beq.n	8012216 <_svfiprintf_r+0xf6>
 80121ea:	9a07      	ldr	r2, [sp, #28]
 80121ec:	4654      	mov	r4, sl
 80121ee:	2000      	movs	r0, #0
 80121f0:	f04f 0c0a 	mov.w	ip, #10
 80121f4:	4621      	mov	r1, r4
 80121f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80121fa:	3b30      	subs	r3, #48	; 0x30
 80121fc:	2b09      	cmp	r3, #9
 80121fe:	d94d      	bls.n	801229c <_svfiprintf_r+0x17c>
 8012200:	b1b0      	cbz	r0, 8012230 <_svfiprintf_r+0x110>
 8012202:	9207      	str	r2, [sp, #28]
 8012204:	e014      	b.n	8012230 <_svfiprintf_r+0x110>
 8012206:	eba0 0308 	sub.w	r3, r0, r8
 801220a:	fa09 f303 	lsl.w	r3, r9, r3
 801220e:	4313      	orrs	r3, r2
 8012210:	9304      	str	r3, [sp, #16]
 8012212:	46a2      	mov	sl, r4
 8012214:	e7d2      	b.n	80121bc <_svfiprintf_r+0x9c>
 8012216:	9b03      	ldr	r3, [sp, #12]
 8012218:	1d19      	adds	r1, r3, #4
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	9103      	str	r1, [sp, #12]
 801221e:	2b00      	cmp	r3, #0
 8012220:	bfbb      	ittet	lt
 8012222:	425b      	neglt	r3, r3
 8012224:	f042 0202 	orrlt.w	r2, r2, #2
 8012228:	9307      	strge	r3, [sp, #28]
 801222a:	9307      	strlt	r3, [sp, #28]
 801222c:	bfb8      	it	lt
 801222e:	9204      	strlt	r2, [sp, #16]
 8012230:	7823      	ldrb	r3, [r4, #0]
 8012232:	2b2e      	cmp	r3, #46	; 0x2e
 8012234:	d10c      	bne.n	8012250 <_svfiprintf_r+0x130>
 8012236:	7863      	ldrb	r3, [r4, #1]
 8012238:	2b2a      	cmp	r3, #42	; 0x2a
 801223a:	d134      	bne.n	80122a6 <_svfiprintf_r+0x186>
 801223c:	9b03      	ldr	r3, [sp, #12]
 801223e:	1d1a      	adds	r2, r3, #4
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	9203      	str	r2, [sp, #12]
 8012244:	2b00      	cmp	r3, #0
 8012246:	bfb8      	it	lt
 8012248:	f04f 33ff 	movlt.w	r3, #4294967295
 801224c:	3402      	adds	r4, #2
 801224e:	9305      	str	r3, [sp, #20]
 8012250:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8012318 <_svfiprintf_r+0x1f8>
 8012254:	7821      	ldrb	r1, [r4, #0]
 8012256:	2203      	movs	r2, #3
 8012258:	4650      	mov	r0, sl
 801225a:	f7ee f849 	bl	80002f0 <memchr>
 801225e:	b138      	cbz	r0, 8012270 <_svfiprintf_r+0x150>
 8012260:	9b04      	ldr	r3, [sp, #16]
 8012262:	eba0 000a 	sub.w	r0, r0, sl
 8012266:	2240      	movs	r2, #64	; 0x40
 8012268:	4082      	lsls	r2, r0
 801226a:	4313      	orrs	r3, r2
 801226c:	3401      	adds	r4, #1
 801226e:	9304      	str	r3, [sp, #16]
 8012270:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012274:	4825      	ldr	r0, [pc, #148]	; (801230c <_svfiprintf_r+0x1ec>)
 8012276:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801227a:	2206      	movs	r2, #6
 801227c:	f7ee f838 	bl	80002f0 <memchr>
 8012280:	2800      	cmp	r0, #0
 8012282:	d038      	beq.n	80122f6 <_svfiprintf_r+0x1d6>
 8012284:	4b22      	ldr	r3, [pc, #136]	; (8012310 <_svfiprintf_r+0x1f0>)
 8012286:	bb1b      	cbnz	r3, 80122d0 <_svfiprintf_r+0x1b0>
 8012288:	9b03      	ldr	r3, [sp, #12]
 801228a:	3307      	adds	r3, #7
 801228c:	f023 0307 	bic.w	r3, r3, #7
 8012290:	3308      	adds	r3, #8
 8012292:	9303      	str	r3, [sp, #12]
 8012294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012296:	4433      	add	r3, r6
 8012298:	9309      	str	r3, [sp, #36]	; 0x24
 801229a:	e768      	b.n	801216e <_svfiprintf_r+0x4e>
 801229c:	fb0c 3202 	mla	r2, ip, r2, r3
 80122a0:	460c      	mov	r4, r1
 80122a2:	2001      	movs	r0, #1
 80122a4:	e7a6      	b.n	80121f4 <_svfiprintf_r+0xd4>
 80122a6:	2300      	movs	r3, #0
 80122a8:	3401      	adds	r4, #1
 80122aa:	9305      	str	r3, [sp, #20]
 80122ac:	4619      	mov	r1, r3
 80122ae:	f04f 0c0a 	mov.w	ip, #10
 80122b2:	4620      	mov	r0, r4
 80122b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80122b8:	3a30      	subs	r2, #48	; 0x30
 80122ba:	2a09      	cmp	r2, #9
 80122bc:	d903      	bls.n	80122c6 <_svfiprintf_r+0x1a6>
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d0c6      	beq.n	8012250 <_svfiprintf_r+0x130>
 80122c2:	9105      	str	r1, [sp, #20]
 80122c4:	e7c4      	b.n	8012250 <_svfiprintf_r+0x130>
 80122c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80122ca:	4604      	mov	r4, r0
 80122cc:	2301      	movs	r3, #1
 80122ce:	e7f0      	b.n	80122b2 <_svfiprintf_r+0x192>
 80122d0:	ab03      	add	r3, sp, #12
 80122d2:	9300      	str	r3, [sp, #0]
 80122d4:	462a      	mov	r2, r5
 80122d6:	4b0f      	ldr	r3, [pc, #60]	; (8012314 <_svfiprintf_r+0x1f4>)
 80122d8:	a904      	add	r1, sp, #16
 80122da:	4638      	mov	r0, r7
 80122dc:	f3af 8000 	nop.w
 80122e0:	1c42      	adds	r2, r0, #1
 80122e2:	4606      	mov	r6, r0
 80122e4:	d1d6      	bne.n	8012294 <_svfiprintf_r+0x174>
 80122e6:	89ab      	ldrh	r3, [r5, #12]
 80122e8:	065b      	lsls	r3, r3, #25
 80122ea:	f53f af2d 	bmi.w	8012148 <_svfiprintf_r+0x28>
 80122ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80122f0:	b01d      	add	sp, #116	; 0x74
 80122f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122f6:	ab03      	add	r3, sp, #12
 80122f8:	9300      	str	r3, [sp, #0]
 80122fa:	462a      	mov	r2, r5
 80122fc:	4b05      	ldr	r3, [pc, #20]	; (8012314 <_svfiprintf_r+0x1f4>)
 80122fe:	a904      	add	r1, sp, #16
 8012300:	4638      	mov	r0, r7
 8012302:	f000 f9bd 	bl	8012680 <_printf_i>
 8012306:	e7eb      	b.n	80122e0 <_svfiprintf_r+0x1c0>
 8012308:	080145e3 	.word	0x080145e3
 801230c:	080145ed 	.word	0x080145ed
 8012310:	00000000 	.word	0x00000000
 8012314:	0801206d 	.word	0x0801206d
 8012318:	080145e9 	.word	0x080145e9

0801231c <__sfputc_r>:
 801231c:	6893      	ldr	r3, [r2, #8]
 801231e:	3b01      	subs	r3, #1
 8012320:	2b00      	cmp	r3, #0
 8012322:	b410      	push	{r4}
 8012324:	6093      	str	r3, [r2, #8]
 8012326:	da08      	bge.n	801233a <__sfputc_r+0x1e>
 8012328:	6994      	ldr	r4, [r2, #24]
 801232a:	42a3      	cmp	r3, r4
 801232c:	db01      	blt.n	8012332 <__sfputc_r+0x16>
 801232e:	290a      	cmp	r1, #10
 8012330:	d103      	bne.n	801233a <__sfputc_r+0x1e>
 8012332:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012336:	f7ff bd10 	b.w	8011d5a <__swbuf_r>
 801233a:	6813      	ldr	r3, [r2, #0]
 801233c:	1c58      	adds	r0, r3, #1
 801233e:	6010      	str	r0, [r2, #0]
 8012340:	7019      	strb	r1, [r3, #0]
 8012342:	4608      	mov	r0, r1
 8012344:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012348:	4770      	bx	lr

0801234a <__sfputs_r>:
 801234a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801234c:	4606      	mov	r6, r0
 801234e:	460f      	mov	r7, r1
 8012350:	4614      	mov	r4, r2
 8012352:	18d5      	adds	r5, r2, r3
 8012354:	42ac      	cmp	r4, r5
 8012356:	d101      	bne.n	801235c <__sfputs_r+0x12>
 8012358:	2000      	movs	r0, #0
 801235a:	e007      	b.n	801236c <__sfputs_r+0x22>
 801235c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012360:	463a      	mov	r2, r7
 8012362:	4630      	mov	r0, r6
 8012364:	f7ff ffda 	bl	801231c <__sfputc_r>
 8012368:	1c43      	adds	r3, r0, #1
 801236a:	d1f3      	bne.n	8012354 <__sfputs_r+0xa>
 801236c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012370 <_vfiprintf_r>:
 8012370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012374:	460d      	mov	r5, r1
 8012376:	b09d      	sub	sp, #116	; 0x74
 8012378:	4614      	mov	r4, r2
 801237a:	4698      	mov	r8, r3
 801237c:	4606      	mov	r6, r0
 801237e:	b118      	cbz	r0, 8012388 <_vfiprintf_r+0x18>
 8012380:	6a03      	ldr	r3, [r0, #32]
 8012382:	b90b      	cbnz	r3, 8012388 <_vfiprintf_r+0x18>
 8012384:	f7ff fbd0 	bl	8011b28 <__sinit>
 8012388:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801238a:	07d9      	lsls	r1, r3, #31
 801238c:	d405      	bmi.n	801239a <_vfiprintf_r+0x2a>
 801238e:	89ab      	ldrh	r3, [r5, #12]
 8012390:	059a      	lsls	r2, r3, #22
 8012392:	d402      	bmi.n	801239a <_vfiprintf_r+0x2a>
 8012394:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012396:	f7ff fdfe 	bl	8011f96 <__retarget_lock_acquire_recursive>
 801239a:	89ab      	ldrh	r3, [r5, #12]
 801239c:	071b      	lsls	r3, r3, #28
 801239e:	d501      	bpl.n	80123a4 <_vfiprintf_r+0x34>
 80123a0:	692b      	ldr	r3, [r5, #16]
 80123a2:	b99b      	cbnz	r3, 80123cc <_vfiprintf_r+0x5c>
 80123a4:	4629      	mov	r1, r5
 80123a6:	4630      	mov	r0, r6
 80123a8:	f7ff fd14 	bl	8011dd4 <__swsetup_r>
 80123ac:	b170      	cbz	r0, 80123cc <_vfiprintf_r+0x5c>
 80123ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80123b0:	07dc      	lsls	r4, r3, #31
 80123b2:	d504      	bpl.n	80123be <_vfiprintf_r+0x4e>
 80123b4:	f04f 30ff 	mov.w	r0, #4294967295
 80123b8:	b01d      	add	sp, #116	; 0x74
 80123ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123be:	89ab      	ldrh	r3, [r5, #12]
 80123c0:	0598      	lsls	r0, r3, #22
 80123c2:	d4f7      	bmi.n	80123b4 <_vfiprintf_r+0x44>
 80123c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80123c6:	f7ff fde7 	bl	8011f98 <__retarget_lock_release_recursive>
 80123ca:	e7f3      	b.n	80123b4 <_vfiprintf_r+0x44>
 80123cc:	2300      	movs	r3, #0
 80123ce:	9309      	str	r3, [sp, #36]	; 0x24
 80123d0:	2320      	movs	r3, #32
 80123d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80123d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80123da:	2330      	movs	r3, #48	; 0x30
 80123dc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8012590 <_vfiprintf_r+0x220>
 80123e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80123e4:	f04f 0901 	mov.w	r9, #1
 80123e8:	4623      	mov	r3, r4
 80123ea:	469a      	mov	sl, r3
 80123ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80123f0:	b10a      	cbz	r2, 80123f6 <_vfiprintf_r+0x86>
 80123f2:	2a25      	cmp	r2, #37	; 0x25
 80123f4:	d1f9      	bne.n	80123ea <_vfiprintf_r+0x7a>
 80123f6:	ebba 0b04 	subs.w	fp, sl, r4
 80123fa:	d00b      	beq.n	8012414 <_vfiprintf_r+0xa4>
 80123fc:	465b      	mov	r3, fp
 80123fe:	4622      	mov	r2, r4
 8012400:	4629      	mov	r1, r5
 8012402:	4630      	mov	r0, r6
 8012404:	f7ff ffa1 	bl	801234a <__sfputs_r>
 8012408:	3001      	adds	r0, #1
 801240a:	f000 80a9 	beq.w	8012560 <_vfiprintf_r+0x1f0>
 801240e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012410:	445a      	add	r2, fp
 8012412:	9209      	str	r2, [sp, #36]	; 0x24
 8012414:	f89a 3000 	ldrb.w	r3, [sl]
 8012418:	2b00      	cmp	r3, #0
 801241a:	f000 80a1 	beq.w	8012560 <_vfiprintf_r+0x1f0>
 801241e:	2300      	movs	r3, #0
 8012420:	f04f 32ff 	mov.w	r2, #4294967295
 8012424:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012428:	f10a 0a01 	add.w	sl, sl, #1
 801242c:	9304      	str	r3, [sp, #16]
 801242e:	9307      	str	r3, [sp, #28]
 8012430:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012434:	931a      	str	r3, [sp, #104]	; 0x68
 8012436:	4654      	mov	r4, sl
 8012438:	2205      	movs	r2, #5
 801243a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801243e:	4854      	ldr	r0, [pc, #336]	; (8012590 <_vfiprintf_r+0x220>)
 8012440:	f7ed ff56 	bl	80002f0 <memchr>
 8012444:	9a04      	ldr	r2, [sp, #16]
 8012446:	b9d8      	cbnz	r0, 8012480 <_vfiprintf_r+0x110>
 8012448:	06d1      	lsls	r1, r2, #27
 801244a:	bf44      	itt	mi
 801244c:	2320      	movmi	r3, #32
 801244e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012452:	0713      	lsls	r3, r2, #28
 8012454:	bf44      	itt	mi
 8012456:	232b      	movmi	r3, #43	; 0x2b
 8012458:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801245c:	f89a 3000 	ldrb.w	r3, [sl]
 8012460:	2b2a      	cmp	r3, #42	; 0x2a
 8012462:	d015      	beq.n	8012490 <_vfiprintf_r+0x120>
 8012464:	9a07      	ldr	r2, [sp, #28]
 8012466:	4654      	mov	r4, sl
 8012468:	2000      	movs	r0, #0
 801246a:	f04f 0c0a 	mov.w	ip, #10
 801246e:	4621      	mov	r1, r4
 8012470:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012474:	3b30      	subs	r3, #48	; 0x30
 8012476:	2b09      	cmp	r3, #9
 8012478:	d94d      	bls.n	8012516 <_vfiprintf_r+0x1a6>
 801247a:	b1b0      	cbz	r0, 80124aa <_vfiprintf_r+0x13a>
 801247c:	9207      	str	r2, [sp, #28]
 801247e:	e014      	b.n	80124aa <_vfiprintf_r+0x13a>
 8012480:	eba0 0308 	sub.w	r3, r0, r8
 8012484:	fa09 f303 	lsl.w	r3, r9, r3
 8012488:	4313      	orrs	r3, r2
 801248a:	9304      	str	r3, [sp, #16]
 801248c:	46a2      	mov	sl, r4
 801248e:	e7d2      	b.n	8012436 <_vfiprintf_r+0xc6>
 8012490:	9b03      	ldr	r3, [sp, #12]
 8012492:	1d19      	adds	r1, r3, #4
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	9103      	str	r1, [sp, #12]
 8012498:	2b00      	cmp	r3, #0
 801249a:	bfbb      	ittet	lt
 801249c:	425b      	neglt	r3, r3
 801249e:	f042 0202 	orrlt.w	r2, r2, #2
 80124a2:	9307      	strge	r3, [sp, #28]
 80124a4:	9307      	strlt	r3, [sp, #28]
 80124a6:	bfb8      	it	lt
 80124a8:	9204      	strlt	r2, [sp, #16]
 80124aa:	7823      	ldrb	r3, [r4, #0]
 80124ac:	2b2e      	cmp	r3, #46	; 0x2e
 80124ae:	d10c      	bne.n	80124ca <_vfiprintf_r+0x15a>
 80124b0:	7863      	ldrb	r3, [r4, #1]
 80124b2:	2b2a      	cmp	r3, #42	; 0x2a
 80124b4:	d134      	bne.n	8012520 <_vfiprintf_r+0x1b0>
 80124b6:	9b03      	ldr	r3, [sp, #12]
 80124b8:	1d1a      	adds	r2, r3, #4
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	9203      	str	r2, [sp, #12]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	bfb8      	it	lt
 80124c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80124c6:	3402      	adds	r4, #2
 80124c8:	9305      	str	r3, [sp, #20]
 80124ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80125a0 <_vfiprintf_r+0x230>
 80124ce:	7821      	ldrb	r1, [r4, #0]
 80124d0:	2203      	movs	r2, #3
 80124d2:	4650      	mov	r0, sl
 80124d4:	f7ed ff0c 	bl	80002f0 <memchr>
 80124d8:	b138      	cbz	r0, 80124ea <_vfiprintf_r+0x17a>
 80124da:	9b04      	ldr	r3, [sp, #16]
 80124dc:	eba0 000a 	sub.w	r0, r0, sl
 80124e0:	2240      	movs	r2, #64	; 0x40
 80124e2:	4082      	lsls	r2, r0
 80124e4:	4313      	orrs	r3, r2
 80124e6:	3401      	adds	r4, #1
 80124e8:	9304      	str	r3, [sp, #16]
 80124ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124ee:	4829      	ldr	r0, [pc, #164]	; (8012594 <_vfiprintf_r+0x224>)
 80124f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80124f4:	2206      	movs	r2, #6
 80124f6:	f7ed fefb 	bl	80002f0 <memchr>
 80124fa:	2800      	cmp	r0, #0
 80124fc:	d03f      	beq.n	801257e <_vfiprintf_r+0x20e>
 80124fe:	4b26      	ldr	r3, [pc, #152]	; (8012598 <_vfiprintf_r+0x228>)
 8012500:	bb1b      	cbnz	r3, 801254a <_vfiprintf_r+0x1da>
 8012502:	9b03      	ldr	r3, [sp, #12]
 8012504:	3307      	adds	r3, #7
 8012506:	f023 0307 	bic.w	r3, r3, #7
 801250a:	3308      	adds	r3, #8
 801250c:	9303      	str	r3, [sp, #12]
 801250e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012510:	443b      	add	r3, r7
 8012512:	9309      	str	r3, [sp, #36]	; 0x24
 8012514:	e768      	b.n	80123e8 <_vfiprintf_r+0x78>
 8012516:	fb0c 3202 	mla	r2, ip, r2, r3
 801251a:	460c      	mov	r4, r1
 801251c:	2001      	movs	r0, #1
 801251e:	e7a6      	b.n	801246e <_vfiprintf_r+0xfe>
 8012520:	2300      	movs	r3, #0
 8012522:	3401      	adds	r4, #1
 8012524:	9305      	str	r3, [sp, #20]
 8012526:	4619      	mov	r1, r3
 8012528:	f04f 0c0a 	mov.w	ip, #10
 801252c:	4620      	mov	r0, r4
 801252e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012532:	3a30      	subs	r2, #48	; 0x30
 8012534:	2a09      	cmp	r2, #9
 8012536:	d903      	bls.n	8012540 <_vfiprintf_r+0x1d0>
 8012538:	2b00      	cmp	r3, #0
 801253a:	d0c6      	beq.n	80124ca <_vfiprintf_r+0x15a>
 801253c:	9105      	str	r1, [sp, #20]
 801253e:	e7c4      	b.n	80124ca <_vfiprintf_r+0x15a>
 8012540:	fb0c 2101 	mla	r1, ip, r1, r2
 8012544:	4604      	mov	r4, r0
 8012546:	2301      	movs	r3, #1
 8012548:	e7f0      	b.n	801252c <_vfiprintf_r+0x1bc>
 801254a:	ab03      	add	r3, sp, #12
 801254c:	9300      	str	r3, [sp, #0]
 801254e:	462a      	mov	r2, r5
 8012550:	4b12      	ldr	r3, [pc, #72]	; (801259c <_vfiprintf_r+0x22c>)
 8012552:	a904      	add	r1, sp, #16
 8012554:	4630      	mov	r0, r6
 8012556:	f3af 8000 	nop.w
 801255a:	4607      	mov	r7, r0
 801255c:	1c78      	adds	r0, r7, #1
 801255e:	d1d6      	bne.n	801250e <_vfiprintf_r+0x19e>
 8012560:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012562:	07d9      	lsls	r1, r3, #31
 8012564:	d405      	bmi.n	8012572 <_vfiprintf_r+0x202>
 8012566:	89ab      	ldrh	r3, [r5, #12]
 8012568:	059a      	lsls	r2, r3, #22
 801256a:	d402      	bmi.n	8012572 <_vfiprintf_r+0x202>
 801256c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801256e:	f7ff fd13 	bl	8011f98 <__retarget_lock_release_recursive>
 8012572:	89ab      	ldrh	r3, [r5, #12]
 8012574:	065b      	lsls	r3, r3, #25
 8012576:	f53f af1d 	bmi.w	80123b4 <_vfiprintf_r+0x44>
 801257a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801257c:	e71c      	b.n	80123b8 <_vfiprintf_r+0x48>
 801257e:	ab03      	add	r3, sp, #12
 8012580:	9300      	str	r3, [sp, #0]
 8012582:	462a      	mov	r2, r5
 8012584:	4b05      	ldr	r3, [pc, #20]	; (801259c <_vfiprintf_r+0x22c>)
 8012586:	a904      	add	r1, sp, #16
 8012588:	4630      	mov	r0, r6
 801258a:	f000 f879 	bl	8012680 <_printf_i>
 801258e:	e7e4      	b.n	801255a <_vfiprintf_r+0x1ea>
 8012590:	080145e3 	.word	0x080145e3
 8012594:	080145ed 	.word	0x080145ed
 8012598:	00000000 	.word	0x00000000
 801259c:	0801234b 	.word	0x0801234b
 80125a0:	080145e9 	.word	0x080145e9

080125a4 <_printf_common>:
 80125a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80125a8:	4616      	mov	r6, r2
 80125aa:	4699      	mov	r9, r3
 80125ac:	688a      	ldr	r2, [r1, #8]
 80125ae:	690b      	ldr	r3, [r1, #16]
 80125b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80125b4:	4293      	cmp	r3, r2
 80125b6:	bfb8      	it	lt
 80125b8:	4613      	movlt	r3, r2
 80125ba:	6033      	str	r3, [r6, #0]
 80125bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80125c0:	4607      	mov	r7, r0
 80125c2:	460c      	mov	r4, r1
 80125c4:	b10a      	cbz	r2, 80125ca <_printf_common+0x26>
 80125c6:	3301      	adds	r3, #1
 80125c8:	6033      	str	r3, [r6, #0]
 80125ca:	6823      	ldr	r3, [r4, #0]
 80125cc:	0699      	lsls	r1, r3, #26
 80125ce:	bf42      	ittt	mi
 80125d0:	6833      	ldrmi	r3, [r6, #0]
 80125d2:	3302      	addmi	r3, #2
 80125d4:	6033      	strmi	r3, [r6, #0]
 80125d6:	6825      	ldr	r5, [r4, #0]
 80125d8:	f015 0506 	ands.w	r5, r5, #6
 80125dc:	d106      	bne.n	80125ec <_printf_common+0x48>
 80125de:	f104 0a19 	add.w	sl, r4, #25
 80125e2:	68e3      	ldr	r3, [r4, #12]
 80125e4:	6832      	ldr	r2, [r6, #0]
 80125e6:	1a9b      	subs	r3, r3, r2
 80125e8:	42ab      	cmp	r3, r5
 80125ea:	dc26      	bgt.n	801263a <_printf_common+0x96>
 80125ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80125f0:	1e13      	subs	r3, r2, #0
 80125f2:	6822      	ldr	r2, [r4, #0]
 80125f4:	bf18      	it	ne
 80125f6:	2301      	movne	r3, #1
 80125f8:	0692      	lsls	r2, r2, #26
 80125fa:	d42b      	bmi.n	8012654 <_printf_common+0xb0>
 80125fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012600:	4649      	mov	r1, r9
 8012602:	4638      	mov	r0, r7
 8012604:	47c0      	blx	r8
 8012606:	3001      	adds	r0, #1
 8012608:	d01e      	beq.n	8012648 <_printf_common+0xa4>
 801260a:	6823      	ldr	r3, [r4, #0]
 801260c:	6922      	ldr	r2, [r4, #16]
 801260e:	f003 0306 	and.w	r3, r3, #6
 8012612:	2b04      	cmp	r3, #4
 8012614:	bf02      	ittt	eq
 8012616:	68e5      	ldreq	r5, [r4, #12]
 8012618:	6833      	ldreq	r3, [r6, #0]
 801261a:	1aed      	subeq	r5, r5, r3
 801261c:	68a3      	ldr	r3, [r4, #8]
 801261e:	bf0c      	ite	eq
 8012620:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012624:	2500      	movne	r5, #0
 8012626:	4293      	cmp	r3, r2
 8012628:	bfc4      	itt	gt
 801262a:	1a9b      	subgt	r3, r3, r2
 801262c:	18ed      	addgt	r5, r5, r3
 801262e:	2600      	movs	r6, #0
 8012630:	341a      	adds	r4, #26
 8012632:	42b5      	cmp	r5, r6
 8012634:	d11a      	bne.n	801266c <_printf_common+0xc8>
 8012636:	2000      	movs	r0, #0
 8012638:	e008      	b.n	801264c <_printf_common+0xa8>
 801263a:	2301      	movs	r3, #1
 801263c:	4652      	mov	r2, sl
 801263e:	4649      	mov	r1, r9
 8012640:	4638      	mov	r0, r7
 8012642:	47c0      	blx	r8
 8012644:	3001      	adds	r0, #1
 8012646:	d103      	bne.n	8012650 <_printf_common+0xac>
 8012648:	f04f 30ff 	mov.w	r0, #4294967295
 801264c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012650:	3501      	adds	r5, #1
 8012652:	e7c6      	b.n	80125e2 <_printf_common+0x3e>
 8012654:	18e1      	adds	r1, r4, r3
 8012656:	1c5a      	adds	r2, r3, #1
 8012658:	2030      	movs	r0, #48	; 0x30
 801265a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801265e:	4422      	add	r2, r4
 8012660:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012664:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012668:	3302      	adds	r3, #2
 801266a:	e7c7      	b.n	80125fc <_printf_common+0x58>
 801266c:	2301      	movs	r3, #1
 801266e:	4622      	mov	r2, r4
 8012670:	4649      	mov	r1, r9
 8012672:	4638      	mov	r0, r7
 8012674:	47c0      	blx	r8
 8012676:	3001      	adds	r0, #1
 8012678:	d0e6      	beq.n	8012648 <_printf_common+0xa4>
 801267a:	3601      	adds	r6, #1
 801267c:	e7d9      	b.n	8012632 <_printf_common+0x8e>
	...

08012680 <_printf_i>:
 8012680:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012684:	7e0f      	ldrb	r7, [r1, #24]
 8012686:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012688:	2f78      	cmp	r7, #120	; 0x78
 801268a:	4691      	mov	r9, r2
 801268c:	4680      	mov	r8, r0
 801268e:	460c      	mov	r4, r1
 8012690:	469a      	mov	sl, r3
 8012692:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012696:	d807      	bhi.n	80126a8 <_printf_i+0x28>
 8012698:	2f62      	cmp	r7, #98	; 0x62
 801269a:	d80a      	bhi.n	80126b2 <_printf_i+0x32>
 801269c:	2f00      	cmp	r7, #0
 801269e:	f000 80d4 	beq.w	801284a <_printf_i+0x1ca>
 80126a2:	2f58      	cmp	r7, #88	; 0x58
 80126a4:	f000 80c0 	beq.w	8012828 <_printf_i+0x1a8>
 80126a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80126ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80126b0:	e03a      	b.n	8012728 <_printf_i+0xa8>
 80126b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80126b6:	2b15      	cmp	r3, #21
 80126b8:	d8f6      	bhi.n	80126a8 <_printf_i+0x28>
 80126ba:	a101      	add	r1, pc, #4	; (adr r1, 80126c0 <_printf_i+0x40>)
 80126bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80126c0:	08012719 	.word	0x08012719
 80126c4:	0801272d 	.word	0x0801272d
 80126c8:	080126a9 	.word	0x080126a9
 80126cc:	080126a9 	.word	0x080126a9
 80126d0:	080126a9 	.word	0x080126a9
 80126d4:	080126a9 	.word	0x080126a9
 80126d8:	0801272d 	.word	0x0801272d
 80126dc:	080126a9 	.word	0x080126a9
 80126e0:	080126a9 	.word	0x080126a9
 80126e4:	080126a9 	.word	0x080126a9
 80126e8:	080126a9 	.word	0x080126a9
 80126ec:	08012831 	.word	0x08012831
 80126f0:	08012759 	.word	0x08012759
 80126f4:	080127eb 	.word	0x080127eb
 80126f8:	080126a9 	.word	0x080126a9
 80126fc:	080126a9 	.word	0x080126a9
 8012700:	08012853 	.word	0x08012853
 8012704:	080126a9 	.word	0x080126a9
 8012708:	08012759 	.word	0x08012759
 801270c:	080126a9 	.word	0x080126a9
 8012710:	080126a9 	.word	0x080126a9
 8012714:	080127f3 	.word	0x080127f3
 8012718:	682b      	ldr	r3, [r5, #0]
 801271a:	1d1a      	adds	r2, r3, #4
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	602a      	str	r2, [r5, #0]
 8012720:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012724:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012728:	2301      	movs	r3, #1
 801272a:	e09f      	b.n	801286c <_printf_i+0x1ec>
 801272c:	6820      	ldr	r0, [r4, #0]
 801272e:	682b      	ldr	r3, [r5, #0]
 8012730:	0607      	lsls	r7, r0, #24
 8012732:	f103 0104 	add.w	r1, r3, #4
 8012736:	6029      	str	r1, [r5, #0]
 8012738:	d501      	bpl.n	801273e <_printf_i+0xbe>
 801273a:	681e      	ldr	r6, [r3, #0]
 801273c:	e003      	b.n	8012746 <_printf_i+0xc6>
 801273e:	0646      	lsls	r6, r0, #25
 8012740:	d5fb      	bpl.n	801273a <_printf_i+0xba>
 8012742:	f9b3 6000 	ldrsh.w	r6, [r3]
 8012746:	2e00      	cmp	r6, #0
 8012748:	da03      	bge.n	8012752 <_printf_i+0xd2>
 801274a:	232d      	movs	r3, #45	; 0x2d
 801274c:	4276      	negs	r6, r6
 801274e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012752:	485a      	ldr	r0, [pc, #360]	; (80128bc <_printf_i+0x23c>)
 8012754:	230a      	movs	r3, #10
 8012756:	e012      	b.n	801277e <_printf_i+0xfe>
 8012758:	682b      	ldr	r3, [r5, #0]
 801275a:	6820      	ldr	r0, [r4, #0]
 801275c:	1d19      	adds	r1, r3, #4
 801275e:	6029      	str	r1, [r5, #0]
 8012760:	0605      	lsls	r5, r0, #24
 8012762:	d501      	bpl.n	8012768 <_printf_i+0xe8>
 8012764:	681e      	ldr	r6, [r3, #0]
 8012766:	e002      	b.n	801276e <_printf_i+0xee>
 8012768:	0641      	lsls	r1, r0, #25
 801276a:	d5fb      	bpl.n	8012764 <_printf_i+0xe4>
 801276c:	881e      	ldrh	r6, [r3, #0]
 801276e:	4853      	ldr	r0, [pc, #332]	; (80128bc <_printf_i+0x23c>)
 8012770:	2f6f      	cmp	r7, #111	; 0x6f
 8012772:	bf0c      	ite	eq
 8012774:	2308      	moveq	r3, #8
 8012776:	230a      	movne	r3, #10
 8012778:	2100      	movs	r1, #0
 801277a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801277e:	6865      	ldr	r5, [r4, #4]
 8012780:	60a5      	str	r5, [r4, #8]
 8012782:	2d00      	cmp	r5, #0
 8012784:	bfa2      	ittt	ge
 8012786:	6821      	ldrge	r1, [r4, #0]
 8012788:	f021 0104 	bicge.w	r1, r1, #4
 801278c:	6021      	strge	r1, [r4, #0]
 801278e:	b90e      	cbnz	r6, 8012794 <_printf_i+0x114>
 8012790:	2d00      	cmp	r5, #0
 8012792:	d04b      	beq.n	801282c <_printf_i+0x1ac>
 8012794:	4615      	mov	r5, r2
 8012796:	fbb6 f1f3 	udiv	r1, r6, r3
 801279a:	fb03 6711 	mls	r7, r3, r1, r6
 801279e:	5dc7      	ldrb	r7, [r0, r7]
 80127a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80127a4:	4637      	mov	r7, r6
 80127a6:	42bb      	cmp	r3, r7
 80127a8:	460e      	mov	r6, r1
 80127aa:	d9f4      	bls.n	8012796 <_printf_i+0x116>
 80127ac:	2b08      	cmp	r3, #8
 80127ae:	d10b      	bne.n	80127c8 <_printf_i+0x148>
 80127b0:	6823      	ldr	r3, [r4, #0]
 80127b2:	07de      	lsls	r6, r3, #31
 80127b4:	d508      	bpl.n	80127c8 <_printf_i+0x148>
 80127b6:	6923      	ldr	r3, [r4, #16]
 80127b8:	6861      	ldr	r1, [r4, #4]
 80127ba:	4299      	cmp	r1, r3
 80127bc:	bfde      	ittt	le
 80127be:	2330      	movle	r3, #48	; 0x30
 80127c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80127c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80127c8:	1b52      	subs	r2, r2, r5
 80127ca:	6122      	str	r2, [r4, #16]
 80127cc:	f8cd a000 	str.w	sl, [sp]
 80127d0:	464b      	mov	r3, r9
 80127d2:	aa03      	add	r2, sp, #12
 80127d4:	4621      	mov	r1, r4
 80127d6:	4640      	mov	r0, r8
 80127d8:	f7ff fee4 	bl	80125a4 <_printf_common>
 80127dc:	3001      	adds	r0, #1
 80127de:	d14a      	bne.n	8012876 <_printf_i+0x1f6>
 80127e0:	f04f 30ff 	mov.w	r0, #4294967295
 80127e4:	b004      	add	sp, #16
 80127e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127ea:	6823      	ldr	r3, [r4, #0]
 80127ec:	f043 0320 	orr.w	r3, r3, #32
 80127f0:	6023      	str	r3, [r4, #0]
 80127f2:	4833      	ldr	r0, [pc, #204]	; (80128c0 <_printf_i+0x240>)
 80127f4:	2778      	movs	r7, #120	; 0x78
 80127f6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80127fa:	6823      	ldr	r3, [r4, #0]
 80127fc:	6829      	ldr	r1, [r5, #0]
 80127fe:	061f      	lsls	r7, r3, #24
 8012800:	f851 6b04 	ldr.w	r6, [r1], #4
 8012804:	d402      	bmi.n	801280c <_printf_i+0x18c>
 8012806:	065f      	lsls	r7, r3, #25
 8012808:	bf48      	it	mi
 801280a:	b2b6      	uxthmi	r6, r6
 801280c:	07df      	lsls	r7, r3, #31
 801280e:	bf48      	it	mi
 8012810:	f043 0320 	orrmi.w	r3, r3, #32
 8012814:	6029      	str	r1, [r5, #0]
 8012816:	bf48      	it	mi
 8012818:	6023      	strmi	r3, [r4, #0]
 801281a:	b91e      	cbnz	r6, 8012824 <_printf_i+0x1a4>
 801281c:	6823      	ldr	r3, [r4, #0]
 801281e:	f023 0320 	bic.w	r3, r3, #32
 8012822:	6023      	str	r3, [r4, #0]
 8012824:	2310      	movs	r3, #16
 8012826:	e7a7      	b.n	8012778 <_printf_i+0xf8>
 8012828:	4824      	ldr	r0, [pc, #144]	; (80128bc <_printf_i+0x23c>)
 801282a:	e7e4      	b.n	80127f6 <_printf_i+0x176>
 801282c:	4615      	mov	r5, r2
 801282e:	e7bd      	b.n	80127ac <_printf_i+0x12c>
 8012830:	682b      	ldr	r3, [r5, #0]
 8012832:	6826      	ldr	r6, [r4, #0]
 8012834:	6961      	ldr	r1, [r4, #20]
 8012836:	1d18      	adds	r0, r3, #4
 8012838:	6028      	str	r0, [r5, #0]
 801283a:	0635      	lsls	r5, r6, #24
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	d501      	bpl.n	8012844 <_printf_i+0x1c4>
 8012840:	6019      	str	r1, [r3, #0]
 8012842:	e002      	b.n	801284a <_printf_i+0x1ca>
 8012844:	0670      	lsls	r0, r6, #25
 8012846:	d5fb      	bpl.n	8012840 <_printf_i+0x1c0>
 8012848:	8019      	strh	r1, [r3, #0]
 801284a:	2300      	movs	r3, #0
 801284c:	6123      	str	r3, [r4, #16]
 801284e:	4615      	mov	r5, r2
 8012850:	e7bc      	b.n	80127cc <_printf_i+0x14c>
 8012852:	682b      	ldr	r3, [r5, #0]
 8012854:	1d1a      	adds	r2, r3, #4
 8012856:	602a      	str	r2, [r5, #0]
 8012858:	681d      	ldr	r5, [r3, #0]
 801285a:	6862      	ldr	r2, [r4, #4]
 801285c:	2100      	movs	r1, #0
 801285e:	4628      	mov	r0, r5
 8012860:	f7ed fd46 	bl	80002f0 <memchr>
 8012864:	b108      	cbz	r0, 801286a <_printf_i+0x1ea>
 8012866:	1b40      	subs	r0, r0, r5
 8012868:	6060      	str	r0, [r4, #4]
 801286a:	6863      	ldr	r3, [r4, #4]
 801286c:	6123      	str	r3, [r4, #16]
 801286e:	2300      	movs	r3, #0
 8012870:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012874:	e7aa      	b.n	80127cc <_printf_i+0x14c>
 8012876:	6923      	ldr	r3, [r4, #16]
 8012878:	462a      	mov	r2, r5
 801287a:	4649      	mov	r1, r9
 801287c:	4640      	mov	r0, r8
 801287e:	47d0      	blx	sl
 8012880:	3001      	adds	r0, #1
 8012882:	d0ad      	beq.n	80127e0 <_printf_i+0x160>
 8012884:	6823      	ldr	r3, [r4, #0]
 8012886:	079b      	lsls	r3, r3, #30
 8012888:	d413      	bmi.n	80128b2 <_printf_i+0x232>
 801288a:	68e0      	ldr	r0, [r4, #12]
 801288c:	9b03      	ldr	r3, [sp, #12]
 801288e:	4298      	cmp	r0, r3
 8012890:	bfb8      	it	lt
 8012892:	4618      	movlt	r0, r3
 8012894:	e7a6      	b.n	80127e4 <_printf_i+0x164>
 8012896:	2301      	movs	r3, #1
 8012898:	4632      	mov	r2, r6
 801289a:	4649      	mov	r1, r9
 801289c:	4640      	mov	r0, r8
 801289e:	47d0      	blx	sl
 80128a0:	3001      	adds	r0, #1
 80128a2:	d09d      	beq.n	80127e0 <_printf_i+0x160>
 80128a4:	3501      	adds	r5, #1
 80128a6:	68e3      	ldr	r3, [r4, #12]
 80128a8:	9903      	ldr	r1, [sp, #12]
 80128aa:	1a5b      	subs	r3, r3, r1
 80128ac:	42ab      	cmp	r3, r5
 80128ae:	dcf2      	bgt.n	8012896 <_printf_i+0x216>
 80128b0:	e7eb      	b.n	801288a <_printf_i+0x20a>
 80128b2:	2500      	movs	r5, #0
 80128b4:	f104 0619 	add.w	r6, r4, #25
 80128b8:	e7f5      	b.n	80128a6 <_printf_i+0x226>
 80128ba:	bf00      	nop
 80128bc:	080145f4 	.word	0x080145f4
 80128c0:	08014605 	.word	0x08014605

080128c4 <__sflush_r>:
 80128c4:	898a      	ldrh	r2, [r1, #12]
 80128c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128ca:	4605      	mov	r5, r0
 80128cc:	0710      	lsls	r0, r2, #28
 80128ce:	460c      	mov	r4, r1
 80128d0:	d458      	bmi.n	8012984 <__sflush_r+0xc0>
 80128d2:	684b      	ldr	r3, [r1, #4]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	dc05      	bgt.n	80128e4 <__sflush_r+0x20>
 80128d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80128da:	2b00      	cmp	r3, #0
 80128dc:	dc02      	bgt.n	80128e4 <__sflush_r+0x20>
 80128de:	2000      	movs	r0, #0
 80128e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80128e6:	2e00      	cmp	r6, #0
 80128e8:	d0f9      	beq.n	80128de <__sflush_r+0x1a>
 80128ea:	2300      	movs	r3, #0
 80128ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80128f0:	682f      	ldr	r7, [r5, #0]
 80128f2:	6a21      	ldr	r1, [r4, #32]
 80128f4:	602b      	str	r3, [r5, #0]
 80128f6:	d032      	beq.n	801295e <__sflush_r+0x9a>
 80128f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80128fa:	89a3      	ldrh	r3, [r4, #12]
 80128fc:	075a      	lsls	r2, r3, #29
 80128fe:	d505      	bpl.n	801290c <__sflush_r+0x48>
 8012900:	6863      	ldr	r3, [r4, #4]
 8012902:	1ac0      	subs	r0, r0, r3
 8012904:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012906:	b10b      	cbz	r3, 801290c <__sflush_r+0x48>
 8012908:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801290a:	1ac0      	subs	r0, r0, r3
 801290c:	2300      	movs	r3, #0
 801290e:	4602      	mov	r2, r0
 8012910:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012912:	6a21      	ldr	r1, [r4, #32]
 8012914:	4628      	mov	r0, r5
 8012916:	47b0      	blx	r6
 8012918:	1c43      	adds	r3, r0, #1
 801291a:	89a3      	ldrh	r3, [r4, #12]
 801291c:	d106      	bne.n	801292c <__sflush_r+0x68>
 801291e:	6829      	ldr	r1, [r5, #0]
 8012920:	291d      	cmp	r1, #29
 8012922:	d82b      	bhi.n	801297c <__sflush_r+0xb8>
 8012924:	4a29      	ldr	r2, [pc, #164]	; (80129cc <__sflush_r+0x108>)
 8012926:	410a      	asrs	r2, r1
 8012928:	07d6      	lsls	r6, r2, #31
 801292a:	d427      	bmi.n	801297c <__sflush_r+0xb8>
 801292c:	2200      	movs	r2, #0
 801292e:	6062      	str	r2, [r4, #4]
 8012930:	04d9      	lsls	r1, r3, #19
 8012932:	6922      	ldr	r2, [r4, #16]
 8012934:	6022      	str	r2, [r4, #0]
 8012936:	d504      	bpl.n	8012942 <__sflush_r+0x7e>
 8012938:	1c42      	adds	r2, r0, #1
 801293a:	d101      	bne.n	8012940 <__sflush_r+0x7c>
 801293c:	682b      	ldr	r3, [r5, #0]
 801293e:	b903      	cbnz	r3, 8012942 <__sflush_r+0x7e>
 8012940:	6560      	str	r0, [r4, #84]	; 0x54
 8012942:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012944:	602f      	str	r7, [r5, #0]
 8012946:	2900      	cmp	r1, #0
 8012948:	d0c9      	beq.n	80128de <__sflush_r+0x1a>
 801294a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801294e:	4299      	cmp	r1, r3
 8012950:	d002      	beq.n	8012958 <__sflush_r+0x94>
 8012952:	4628      	mov	r0, r5
 8012954:	f7ff fb36 	bl	8011fc4 <_free_r>
 8012958:	2000      	movs	r0, #0
 801295a:	6360      	str	r0, [r4, #52]	; 0x34
 801295c:	e7c0      	b.n	80128e0 <__sflush_r+0x1c>
 801295e:	2301      	movs	r3, #1
 8012960:	4628      	mov	r0, r5
 8012962:	47b0      	blx	r6
 8012964:	1c41      	adds	r1, r0, #1
 8012966:	d1c8      	bne.n	80128fa <__sflush_r+0x36>
 8012968:	682b      	ldr	r3, [r5, #0]
 801296a:	2b00      	cmp	r3, #0
 801296c:	d0c5      	beq.n	80128fa <__sflush_r+0x36>
 801296e:	2b1d      	cmp	r3, #29
 8012970:	d001      	beq.n	8012976 <__sflush_r+0xb2>
 8012972:	2b16      	cmp	r3, #22
 8012974:	d101      	bne.n	801297a <__sflush_r+0xb6>
 8012976:	602f      	str	r7, [r5, #0]
 8012978:	e7b1      	b.n	80128de <__sflush_r+0x1a>
 801297a:	89a3      	ldrh	r3, [r4, #12]
 801297c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012980:	81a3      	strh	r3, [r4, #12]
 8012982:	e7ad      	b.n	80128e0 <__sflush_r+0x1c>
 8012984:	690f      	ldr	r7, [r1, #16]
 8012986:	2f00      	cmp	r7, #0
 8012988:	d0a9      	beq.n	80128de <__sflush_r+0x1a>
 801298a:	0793      	lsls	r3, r2, #30
 801298c:	680e      	ldr	r6, [r1, #0]
 801298e:	bf08      	it	eq
 8012990:	694b      	ldreq	r3, [r1, #20]
 8012992:	600f      	str	r7, [r1, #0]
 8012994:	bf18      	it	ne
 8012996:	2300      	movne	r3, #0
 8012998:	eba6 0807 	sub.w	r8, r6, r7
 801299c:	608b      	str	r3, [r1, #8]
 801299e:	f1b8 0f00 	cmp.w	r8, #0
 80129a2:	dd9c      	ble.n	80128de <__sflush_r+0x1a>
 80129a4:	6a21      	ldr	r1, [r4, #32]
 80129a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80129a8:	4643      	mov	r3, r8
 80129aa:	463a      	mov	r2, r7
 80129ac:	4628      	mov	r0, r5
 80129ae:	47b0      	blx	r6
 80129b0:	2800      	cmp	r0, #0
 80129b2:	dc06      	bgt.n	80129c2 <__sflush_r+0xfe>
 80129b4:	89a3      	ldrh	r3, [r4, #12]
 80129b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80129ba:	81a3      	strh	r3, [r4, #12]
 80129bc:	f04f 30ff 	mov.w	r0, #4294967295
 80129c0:	e78e      	b.n	80128e0 <__sflush_r+0x1c>
 80129c2:	4407      	add	r7, r0
 80129c4:	eba8 0800 	sub.w	r8, r8, r0
 80129c8:	e7e9      	b.n	801299e <__sflush_r+0xda>
 80129ca:	bf00      	nop
 80129cc:	dfbffffe 	.word	0xdfbffffe

080129d0 <_fflush_r>:
 80129d0:	b538      	push	{r3, r4, r5, lr}
 80129d2:	690b      	ldr	r3, [r1, #16]
 80129d4:	4605      	mov	r5, r0
 80129d6:	460c      	mov	r4, r1
 80129d8:	b913      	cbnz	r3, 80129e0 <_fflush_r+0x10>
 80129da:	2500      	movs	r5, #0
 80129dc:	4628      	mov	r0, r5
 80129de:	bd38      	pop	{r3, r4, r5, pc}
 80129e0:	b118      	cbz	r0, 80129ea <_fflush_r+0x1a>
 80129e2:	6a03      	ldr	r3, [r0, #32]
 80129e4:	b90b      	cbnz	r3, 80129ea <_fflush_r+0x1a>
 80129e6:	f7ff f89f 	bl	8011b28 <__sinit>
 80129ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d0f3      	beq.n	80129da <_fflush_r+0xa>
 80129f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80129f4:	07d0      	lsls	r0, r2, #31
 80129f6:	d404      	bmi.n	8012a02 <_fflush_r+0x32>
 80129f8:	0599      	lsls	r1, r3, #22
 80129fa:	d402      	bmi.n	8012a02 <_fflush_r+0x32>
 80129fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80129fe:	f7ff faca 	bl	8011f96 <__retarget_lock_acquire_recursive>
 8012a02:	4628      	mov	r0, r5
 8012a04:	4621      	mov	r1, r4
 8012a06:	f7ff ff5d 	bl	80128c4 <__sflush_r>
 8012a0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012a0c:	07da      	lsls	r2, r3, #31
 8012a0e:	4605      	mov	r5, r0
 8012a10:	d4e4      	bmi.n	80129dc <_fflush_r+0xc>
 8012a12:	89a3      	ldrh	r3, [r4, #12]
 8012a14:	059b      	lsls	r3, r3, #22
 8012a16:	d4e1      	bmi.n	80129dc <_fflush_r+0xc>
 8012a18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012a1a:	f7ff fabd 	bl	8011f98 <__retarget_lock_release_recursive>
 8012a1e:	e7dd      	b.n	80129dc <_fflush_r+0xc>

08012a20 <__swhatbuf_r>:
 8012a20:	b570      	push	{r4, r5, r6, lr}
 8012a22:	460c      	mov	r4, r1
 8012a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a28:	2900      	cmp	r1, #0
 8012a2a:	b096      	sub	sp, #88	; 0x58
 8012a2c:	4615      	mov	r5, r2
 8012a2e:	461e      	mov	r6, r3
 8012a30:	da0d      	bge.n	8012a4e <__swhatbuf_r+0x2e>
 8012a32:	89a3      	ldrh	r3, [r4, #12]
 8012a34:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012a38:	f04f 0100 	mov.w	r1, #0
 8012a3c:	bf0c      	ite	eq
 8012a3e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8012a42:	2340      	movne	r3, #64	; 0x40
 8012a44:	2000      	movs	r0, #0
 8012a46:	6031      	str	r1, [r6, #0]
 8012a48:	602b      	str	r3, [r5, #0]
 8012a4a:	b016      	add	sp, #88	; 0x58
 8012a4c:	bd70      	pop	{r4, r5, r6, pc}
 8012a4e:	466a      	mov	r2, sp
 8012a50:	f000 f892 	bl	8012b78 <_fstat_r>
 8012a54:	2800      	cmp	r0, #0
 8012a56:	dbec      	blt.n	8012a32 <__swhatbuf_r+0x12>
 8012a58:	9901      	ldr	r1, [sp, #4]
 8012a5a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8012a5e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8012a62:	4259      	negs	r1, r3
 8012a64:	4159      	adcs	r1, r3
 8012a66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012a6a:	e7eb      	b.n	8012a44 <__swhatbuf_r+0x24>

08012a6c <__smakebuf_r>:
 8012a6c:	898b      	ldrh	r3, [r1, #12]
 8012a6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012a70:	079d      	lsls	r5, r3, #30
 8012a72:	4606      	mov	r6, r0
 8012a74:	460c      	mov	r4, r1
 8012a76:	d507      	bpl.n	8012a88 <__smakebuf_r+0x1c>
 8012a78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012a7c:	6023      	str	r3, [r4, #0]
 8012a7e:	6123      	str	r3, [r4, #16]
 8012a80:	2301      	movs	r3, #1
 8012a82:	6163      	str	r3, [r4, #20]
 8012a84:	b002      	add	sp, #8
 8012a86:	bd70      	pop	{r4, r5, r6, pc}
 8012a88:	ab01      	add	r3, sp, #4
 8012a8a:	466a      	mov	r2, sp
 8012a8c:	f7ff ffc8 	bl	8012a20 <__swhatbuf_r>
 8012a90:	9900      	ldr	r1, [sp, #0]
 8012a92:	4605      	mov	r5, r0
 8012a94:	4630      	mov	r0, r6
 8012a96:	f7fe fe93 	bl	80117c0 <_malloc_r>
 8012a9a:	b948      	cbnz	r0, 8012ab0 <__smakebuf_r+0x44>
 8012a9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012aa0:	059a      	lsls	r2, r3, #22
 8012aa2:	d4ef      	bmi.n	8012a84 <__smakebuf_r+0x18>
 8012aa4:	f023 0303 	bic.w	r3, r3, #3
 8012aa8:	f043 0302 	orr.w	r3, r3, #2
 8012aac:	81a3      	strh	r3, [r4, #12]
 8012aae:	e7e3      	b.n	8012a78 <__smakebuf_r+0xc>
 8012ab0:	89a3      	ldrh	r3, [r4, #12]
 8012ab2:	6020      	str	r0, [r4, #0]
 8012ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012ab8:	81a3      	strh	r3, [r4, #12]
 8012aba:	9b00      	ldr	r3, [sp, #0]
 8012abc:	6163      	str	r3, [r4, #20]
 8012abe:	9b01      	ldr	r3, [sp, #4]
 8012ac0:	6120      	str	r0, [r4, #16]
 8012ac2:	b15b      	cbz	r3, 8012adc <__smakebuf_r+0x70>
 8012ac4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012ac8:	4630      	mov	r0, r6
 8012aca:	f000 f867 	bl	8012b9c <_isatty_r>
 8012ace:	b128      	cbz	r0, 8012adc <__smakebuf_r+0x70>
 8012ad0:	89a3      	ldrh	r3, [r4, #12]
 8012ad2:	f023 0303 	bic.w	r3, r3, #3
 8012ad6:	f043 0301 	orr.w	r3, r3, #1
 8012ada:	81a3      	strh	r3, [r4, #12]
 8012adc:	89a3      	ldrh	r3, [r4, #12]
 8012ade:	431d      	orrs	r5, r3
 8012ae0:	81a5      	strh	r5, [r4, #12]
 8012ae2:	e7cf      	b.n	8012a84 <__smakebuf_r+0x18>

08012ae4 <memmove>:
 8012ae4:	4288      	cmp	r0, r1
 8012ae6:	b510      	push	{r4, lr}
 8012ae8:	eb01 0402 	add.w	r4, r1, r2
 8012aec:	d902      	bls.n	8012af4 <memmove+0x10>
 8012aee:	4284      	cmp	r4, r0
 8012af0:	4623      	mov	r3, r4
 8012af2:	d807      	bhi.n	8012b04 <memmove+0x20>
 8012af4:	1e43      	subs	r3, r0, #1
 8012af6:	42a1      	cmp	r1, r4
 8012af8:	d008      	beq.n	8012b0c <memmove+0x28>
 8012afa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012afe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012b02:	e7f8      	b.n	8012af6 <memmove+0x12>
 8012b04:	4402      	add	r2, r0
 8012b06:	4601      	mov	r1, r0
 8012b08:	428a      	cmp	r2, r1
 8012b0a:	d100      	bne.n	8012b0e <memmove+0x2a>
 8012b0c:	bd10      	pop	{r4, pc}
 8012b0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012b12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012b16:	e7f7      	b.n	8012b08 <memmove+0x24>

08012b18 <_raise_r>:
 8012b18:	291f      	cmp	r1, #31
 8012b1a:	b538      	push	{r3, r4, r5, lr}
 8012b1c:	4604      	mov	r4, r0
 8012b1e:	460d      	mov	r5, r1
 8012b20:	d904      	bls.n	8012b2c <_raise_r+0x14>
 8012b22:	2316      	movs	r3, #22
 8012b24:	6003      	str	r3, [r0, #0]
 8012b26:	f04f 30ff 	mov.w	r0, #4294967295
 8012b2a:	bd38      	pop	{r3, r4, r5, pc}
 8012b2c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8012b2e:	b112      	cbz	r2, 8012b36 <_raise_r+0x1e>
 8012b30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012b34:	b94b      	cbnz	r3, 8012b4a <_raise_r+0x32>
 8012b36:	4620      	mov	r0, r4
 8012b38:	f000 f852 	bl	8012be0 <_getpid_r>
 8012b3c:	462a      	mov	r2, r5
 8012b3e:	4601      	mov	r1, r0
 8012b40:	4620      	mov	r0, r4
 8012b42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012b46:	f000 b839 	b.w	8012bbc <_kill_r>
 8012b4a:	2b01      	cmp	r3, #1
 8012b4c:	d00a      	beq.n	8012b64 <_raise_r+0x4c>
 8012b4e:	1c59      	adds	r1, r3, #1
 8012b50:	d103      	bne.n	8012b5a <_raise_r+0x42>
 8012b52:	2316      	movs	r3, #22
 8012b54:	6003      	str	r3, [r0, #0]
 8012b56:	2001      	movs	r0, #1
 8012b58:	e7e7      	b.n	8012b2a <_raise_r+0x12>
 8012b5a:	2400      	movs	r4, #0
 8012b5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012b60:	4628      	mov	r0, r5
 8012b62:	4798      	blx	r3
 8012b64:	2000      	movs	r0, #0
 8012b66:	e7e0      	b.n	8012b2a <_raise_r+0x12>

08012b68 <raise>:
 8012b68:	4b02      	ldr	r3, [pc, #8]	; (8012b74 <raise+0xc>)
 8012b6a:	4601      	mov	r1, r0
 8012b6c:	6818      	ldr	r0, [r3, #0]
 8012b6e:	f7ff bfd3 	b.w	8012b18 <_raise_r>
 8012b72:	bf00      	nop
 8012b74:	200000ac 	.word	0x200000ac

08012b78 <_fstat_r>:
 8012b78:	b538      	push	{r3, r4, r5, lr}
 8012b7a:	4d07      	ldr	r5, [pc, #28]	; (8012b98 <_fstat_r+0x20>)
 8012b7c:	2300      	movs	r3, #0
 8012b7e:	4604      	mov	r4, r0
 8012b80:	4608      	mov	r0, r1
 8012b82:	4611      	mov	r1, r2
 8012b84:	602b      	str	r3, [r5, #0]
 8012b86:	f7f1 f92a 	bl	8003dde <_fstat>
 8012b8a:	1c43      	adds	r3, r0, #1
 8012b8c:	d102      	bne.n	8012b94 <_fstat_r+0x1c>
 8012b8e:	682b      	ldr	r3, [r5, #0]
 8012b90:	b103      	cbz	r3, 8012b94 <_fstat_r+0x1c>
 8012b92:	6023      	str	r3, [r4, #0]
 8012b94:	bd38      	pop	{r3, r4, r5, pc}
 8012b96:	bf00      	nop
 8012b98:	20000768 	.word	0x20000768

08012b9c <_isatty_r>:
 8012b9c:	b538      	push	{r3, r4, r5, lr}
 8012b9e:	4d06      	ldr	r5, [pc, #24]	; (8012bb8 <_isatty_r+0x1c>)
 8012ba0:	2300      	movs	r3, #0
 8012ba2:	4604      	mov	r4, r0
 8012ba4:	4608      	mov	r0, r1
 8012ba6:	602b      	str	r3, [r5, #0]
 8012ba8:	f7f1 f929 	bl	8003dfe <_isatty>
 8012bac:	1c43      	adds	r3, r0, #1
 8012bae:	d102      	bne.n	8012bb6 <_isatty_r+0x1a>
 8012bb0:	682b      	ldr	r3, [r5, #0]
 8012bb2:	b103      	cbz	r3, 8012bb6 <_isatty_r+0x1a>
 8012bb4:	6023      	str	r3, [r4, #0]
 8012bb6:	bd38      	pop	{r3, r4, r5, pc}
 8012bb8:	20000768 	.word	0x20000768

08012bbc <_kill_r>:
 8012bbc:	b538      	push	{r3, r4, r5, lr}
 8012bbe:	4d07      	ldr	r5, [pc, #28]	; (8012bdc <_kill_r+0x20>)
 8012bc0:	2300      	movs	r3, #0
 8012bc2:	4604      	mov	r4, r0
 8012bc4:	4608      	mov	r0, r1
 8012bc6:	4611      	mov	r1, r2
 8012bc8:	602b      	str	r3, [r5, #0]
 8012bca:	f7f1 f8a9 	bl	8003d20 <_kill>
 8012bce:	1c43      	adds	r3, r0, #1
 8012bd0:	d102      	bne.n	8012bd8 <_kill_r+0x1c>
 8012bd2:	682b      	ldr	r3, [r5, #0]
 8012bd4:	b103      	cbz	r3, 8012bd8 <_kill_r+0x1c>
 8012bd6:	6023      	str	r3, [r4, #0]
 8012bd8:	bd38      	pop	{r3, r4, r5, pc}
 8012bda:	bf00      	nop
 8012bdc:	20000768 	.word	0x20000768

08012be0 <_getpid_r>:
 8012be0:	f7f1 b896 	b.w	8003d10 <_getpid>

08012be4 <_init>:
 8012be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012be6:	bf00      	nop
 8012be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012bea:	bc08      	pop	{r3}
 8012bec:	469e      	mov	lr, r3
 8012bee:	4770      	bx	lr

08012bf0 <_fini>:
 8012bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bf2:	bf00      	nop
 8012bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012bf6:	bc08      	pop	{r3}
 8012bf8:	469e      	mov	lr, r3
 8012bfa:	4770      	bx	lr
