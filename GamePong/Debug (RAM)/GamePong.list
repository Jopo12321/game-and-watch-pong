
GamePong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  24000000  24000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 ._itcram      00000000  00000100  00000100  0001c14c  2**0
                  CONTENTS
  2 ._itcram_hot  00000000  00000100  00000100  0001c14c  2**0
                  CONTENTS
  3 ._ram_uc      0004b000  240002b0  240002b0  000012ac  2**4
                  ALLOC
  4 ._ram_exec    00000000  24050000  24050000  0001c14c  2**0
                  CONTENTS
  5 ._extflash    00000000  90000000  90000000  0001c14c  2**0
                  CONTENTS
  6 ._configflash 00000000  900ff000  900ff000  0001c14c  2**0
                  CONTENTS
  7 ._ram         00000000  24050000  24050000  0001c14c  2**0
                  CONTENTS
  8 ._ahbram      00005f94  30000000  30000000  0001d000  2**4
                  ALLOC
  9 .text         0001557c  24050000  24050000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .rodata       000045d4  2406557c  2406557c  0001757c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .ARM          00000008  24069b50  24069b50  0001bb50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .init_array   00000004  24069b58  24069b58  0001bb58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .fini_array   00000004  24069b5c  24069b5c  0001bb5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 .data         0000014c  20000000  24069b60  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 ._flash_end   00000000  24069b60  24069b60  0001c14c  2**0
                  CONTENTS
 16 .bss          00000684  2000014c  2000014c  0000014c  2**2
                  ALLOC
 17 ._persistent  00000000  200007d0  200007d0  0001c14c  2**0
                  CONTENTS
 18 ._user_heap   00008000  200007d0  200007d0  0000014c  2**0
                  ALLOC
 19 ._user_stack  00017830  200087d0  200087d0  0000014c  2**0
                  ALLOC
 20 .ARM.attributes 0000002e  00000000  00000000  0001c14c  2**0
                  CONTENTS, READONLY
 21 .debug_info   0002b9f3  00000000  00000000  0001c17a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_abbrev 00005cf4  00000000  00000000  00047b6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_aranges 00002450  00000000  00000000  0004d868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_macro  0003b7ff  00000000  00000000  0004fcb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line   000330eb  00000000  00000000  0008b4b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_str    0016bfdd  00000000  00000000  000be5a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .comment      00000043  00000000  00000000  0022a57f  2**0
                  CONTENTS, READONLY
 28 .debug_rnglists 00001bb2  00000000  00000000  0022a5c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_frame  0000a424  00000000  00000000  0022c174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_line_str 00000064  00000000  00000000  00236598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

24050000 <__do_global_dtors_aux>:
24050000:	b510      	push	{r4, lr}
24050002:	4c05      	ldr	r4, [pc, #20]	@ (24050018 <__do_global_dtors_aux+0x18>)
24050004:	7823      	ldrb	r3, [r4, #0]
24050006:	b933      	cbnz	r3, 24050016 <__do_global_dtors_aux+0x16>
24050008:	4b04      	ldr	r3, [pc, #16]	@ (2405001c <__do_global_dtors_aux+0x1c>)
2405000a:	b113      	cbz	r3, 24050012 <__do_global_dtors_aux+0x12>
2405000c:	4804      	ldr	r0, [pc, #16]	@ (24050020 <__do_global_dtors_aux+0x20>)
2405000e:	f3af 8000 	nop.w
24050012:	2301      	movs	r3, #1
24050014:	7023      	strb	r3, [r4, #0]
24050016:	bd10      	pop	{r4, pc}
24050018:	2000014c 	.word	0x2000014c
2405001c:	00000000 	.word	0x00000000
24050020:	24065564 	.word	0x24065564

24050024 <frame_dummy>:
24050024:	b508      	push	{r3, lr}
24050026:	4b03      	ldr	r3, [pc, #12]	@ (24050034 <frame_dummy+0x10>)
24050028:	b11b      	cbz	r3, 24050032 <frame_dummy+0xe>
2405002a:	4903      	ldr	r1, [pc, #12]	@ (24050038 <frame_dummy+0x14>)
2405002c:	4803      	ldr	r0, [pc, #12]	@ (2405003c <frame_dummy+0x18>)
2405002e:	f3af 8000 	nop.w
24050032:	bd08      	pop	{r3, pc}
24050034:	00000000 	.word	0x00000000
24050038:	20000150 	.word	0x20000150
2405003c:	24065564 	.word	0x24065564

24050040 <memchr>:
24050040:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
24050044:	2a10      	cmp	r2, #16
24050046:	db2b      	blt.n	240500a0 <memchr+0x60>
24050048:	f010 0f07 	tst.w	r0, #7
2405004c:	d008      	beq.n	24050060 <memchr+0x20>
2405004e:	f810 3b01 	ldrb.w	r3, [r0], #1
24050052:	3a01      	subs	r2, #1
24050054:	428b      	cmp	r3, r1
24050056:	d02d      	beq.n	240500b4 <memchr+0x74>
24050058:	f010 0f07 	tst.w	r0, #7
2405005c:	b342      	cbz	r2, 240500b0 <memchr+0x70>
2405005e:	d1f6      	bne.n	2405004e <memchr+0xe>
24050060:	b4f0      	push	{r4, r5, r6, r7}
24050062:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
24050066:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
2405006a:	f022 0407 	bic.w	r4, r2, #7
2405006e:	f07f 0700 	mvns.w	r7, #0
24050072:	2300      	movs	r3, #0
24050074:	e8f0 5602 	ldrd	r5, r6, [r0], #8
24050078:	3c08      	subs	r4, #8
2405007a:	ea85 0501 	eor.w	r5, r5, r1
2405007e:	ea86 0601 	eor.w	r6, r6, r1
24050082:	fa85 f547 	uadd8	r5, r5, r7
24050086:	faa3 f587 	sel	r5, r3, r7
2405008a:	fa86 f647 	uadd8	r6, r6, r7
2405008e:	faa5 f687 	sel	r6, r5, r7
24050092:	b98e      	cbnz	r6, 240500b8 <memchr+0x78>
24050094:	d1ee      	bne.n	24050074 <memchr+0x34>
24050096:	bcf0      	pop	{r4, r5, r6, r7}
24050098:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
2405009c:	f002 0207 	and.w	r2, r2, #7
240500a0:	b132      	cbz	r2, 240500b0 <memchr+0x70>
240500a2:	f810 3b01 	ldrb.w	r3, [r0], #1
240500a6:	3a01      	subs	r2, #1
240500a8:	ea83 0301 	eor.w	r3, r3, r1
240500ac:	b113      	cbz	r3, 240500b4 <memchr+0x74>
240500ae:	d1f8      	bne.n	240500a2 <memchr+0x62>
240500b0:	2000      	movs	r0, #0
240500b2:	4770      	bx	lr
240500b4:	3801      	subs	r0, #1
240500b6:	4770      	bx	lr
240500b8:	2d00      	cmp	r5, #0
240500ba:	bf06      	itte	eq
240500bc:	4635      	moveq	r5, r6
240500be:	3803      	subeq	r0, #3
240500c0:	3807      	subne	r0, #7
240500c2:	f015 0f01 	tst.w	r5, #1
240500c6:	d107      	bne.n	240500d8 <memchr+0x98>
240500c8:	3001      	adds	r0, #1
240500ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
240500ce:	bf02      	ittt	eq
240500d0:	3001      	addeq	r0, #1
240500d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
240500d6:	3001      	addeq	r0, #1
240500d8:	bcf0      	pop	{r4, r5, r6, r7}
240500da:	3801      	subs	r0, #1
240500dc:	4770      	bx	lr
240500de:	bf00      	nop

240500e0 <game_init>:

static int tim = 0;
int in_game = 0;
int in_demo = 0;

void game_init() {
240500e0:	b580      	push	{r7, lr}
240500e2:	b084      	sub	sp, #16
240500e4:	af04      	add	r7, sp, #16
	if (!in_demo) {
240500e6:	4b91      	ldr	r3, [pc, #580]	@ (2405032c <game_init+0x24c>)
240500e8:	681b      	ldr	r3, [r3, #0]
240500ea:	2b00      	cmp	r3, #0
240500ec:	d125      	bne.n	2405013a <game_init+0x5a>
		restart_game = 0;
240500ee:	4b90      	ldr	r3, [pc, #576]	@ (24050330 <game_init+0x250>)
240500f0:	2200      	movs	r2, #0
240500f2:	601a      	str	r2, [r3, #0]
		in_game = 1;
240500f4:	4b8f      	ldr	r3, [pc, #572]	@ (24050334 <game_init+0x254>)
240500f6:	2201      	movs	r2, #1
240500f8:	601a      	str	r2, [r3, #0]
		switch (difficulty) {
240500fa:	4b8f      	ldr	r3, [pc, #572]	@ (24050338 <game_init+0x258>)
240500fc:	781b      	ldrb	r3, [r3, #0]
240500fe:	2b02      	cmp	r3, #2
24050100:	d014      	beq.n	2405012c <game_init+0x4c>
24050102:	2b02      	cmp	r3, #2
24050104:	dc19      	bgt.n	2405013a <game_init+0x5a>
24050106:	2b00      	cmp	r3, #0
24050108:	d002      	beq.n	24050110 <game_init+0x30>
2405010a:	2b01      	cmp	r3, #1
2405010c:	d007      	beq.n	2405011e <game_init+0x3e>
2405010e:	e014      	b.n	2405013a <game_init+0x5a>
		case EASY:
			offset_x = 240;
24050110:	4b8a      	ldr	r3, [pc, #552]	@ (2405033c <game_init+0x25c>)
24050112:	22f0      	movs	r2, #240	@ 0xf0
24050114:	601a      	str	r2, [r3, #0]
			offset_y = 20;
24050116:	4b8a      	ldr	r3, [pc, #552]	@ (24050340 <game_init+0x260>)
24050118:	2214      	movs	r2, #20
2405011a:	601a      	str	r2, [r3, #0]
			break;
2405011c:	e00d      	b.n	2405013a <game_init+0x5a>
		case MEDIUM:
			offset_x = 220;
2405011e:	4b87      	ldr	r3, [pc, #540]	@ (2405033c <game_init+0x25c>)
24050120:	22dc      	movs	r2, #220	@ 0xdc
24050122:	601a      	str	r2, [r3, #0]
			offset_y = 25;
24050124:	4b86      	ldr	r3, [pc, #536]	@ (24050340 <game_init+0x260>)
24050126:	2219      	movs	r2, #25
24050128:	601a      	str	r2, [r3, #0]
			break;
2405012a:	e006      	b.n	2405013a <game_init+0x5a>
		case HARD:
			offset_x = 200;
2405012c:	4b83      	ldr	r3, [pc, #524]	@ (2405033c <game_init+0x25c>)
2405012e:	22c8      	movs	r2, #200	@ 0xc8
24050130:	601a      	str	r2, [r3, #0]
			offset_y = 35;
24050132:	4b83      	ldr	r3, [pc, #524]	@ (24050340 <game_init+0x260>)
24050134:	2223      	movs	r2, #35	@ 0x23
24050136:	601a      	str	r2, [r3, #0]
			break;
24050138:	bf00      	nop
		}
	}
	score_p1 = 0;
2405013a:	4b82      	ldr	r3, [pc, #520]	@ (24050344 <game_init+0x264>)
2405013c:	2200      	movs	r2, #0
2405013e:	601a      	str	r2, [r3, #0]
	score_p2 = 0;
24050140:	4b81      	ldr	r3, [pc, #516]	@ (24050348 <game_init+0x268>)
24050142:	2200      	movs	r2, #0
24050144:	601a      	str	r2, [r3, #0]
	dir = 0;
24050146:	4b81      	ldr	r3, [pc, #516]	@ (2405034c <game_init+0x26c>)
24050148:	2200      	movs	r2, #0
2405014a:	701a      	strb	r2, [r3, #0]
	ball_xspeed = 1;
2405014c:	4b80      	ldr	r3, [pc, #512]	@ (24050350 <game_init+0x270>)
2405014e:	2201      	movs	r2, #1
24050150:	601a      	str	r2, [r3, #0]
	ball_yspeed = randsing();
24050152:	f014 f8b7 	bl	240642c4 <rand>
24050156:	4603      	mov	r3, r0
24050158:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
2405015c:	db02      	blt.n	24050164 <game_init+0x84>
2405015e:	f04f 33ff 	mov.w	r3, #4294967295
24050162:	e000      	b.n	24050166 <game_init+0x86>
24050164:	2301      	movs	r3, #1
24050166:	4a7b      	ldr	r2, [pc, #492]	@ (24050354 <game_init+0x274>)
24050168:	6013      	str	r3, [r2, #0]
	ball_x = randint(30, 50);
2405016a:	f014 f8ab 	bl	240642c4 <rand>
2405016e:	4601      	mov	r1, r0
24050170:	4b79      	ldr	r3, [pc, #484]	@ (24050358 <game_init+0x278>)
24050172:	fb83 2301 	smull	r2, r3, r3, r1
24050176:	109a      	asrs	r2, r3, #2
24050178:	17cb      	asrs	r3, r1, #31
2405017a:	1ad2      	subs	r2, r2, r3
2405017c:	4613      	mov	r3, r2
2405017e:	005b      	lsls	r3, r3, #1
24050180:	4413      	add	r3, r2
24050182:	00da      	lsls	r2, r3, #3
24050184:	1ad2      	subs	r2, r2, r3
24050186:	1a8a      	subs	r2, r1, r2
24050188:	f102 031e 	add.w	r3, r2, #30
2405018c:	4a73      	ldr	r2, [pc, #460]	@ (2405035c <game_init+0x27c>)
2405018e:	6013      	str	r3, [r2, #0]
	ball_y = randint(100, 140);
24050190:	f014 f898 	bl	240642c4 <rand>
24050194:	4601      	mov	r1, r0
24050196:	4b72      	ldr	r3, [pc, #456]	@ (24050360 <game_init+0x280>)
24050198:	fb83 2301 	smull	r2, r3, r3, r1
2405019c:	111a      	asrs	r2, r3, #4
2405019e:	17cb      	asrs	r3, r1, #31
240501a0:	1ad2      	subs	r2, r2, r3
240501a2:	4613      	mov	r3, r2
240501a4:	009b      	lsls	r3, r3, #2
240501a6:	4413      	add	r3, r2
240501a8:	00db      	lsls	r3, r3, #3
240501aa:	4413      	add	r3, r2
240501ac:	1aca      	subs	r2, r1, r3
240501ae:	f102 0364 	add.w	r3, r2, #100	@ 0x64
240501b2:	4a6c      	ldr	r2, [pc, #432]	@ (24050364 <game_init+0x284>)
240501b4:	6013      	str	r3, [r2, #0]

	pallete[1] = paddle_color;
240501b6:	4b6c      	ldr	r3, [pc, #432]	@ (24050368 <game_init+0x288>)
240501b8:	881a      	ldrh	r2, [r3, #0]
240501ba:	4b6c      	ldr	r3, [pc, #432]	@ (2405036c <game_init+0x28c>)
240501bc:	805a      	strh	r2, [r3, #2]
	pallete[2] = ball_color;
240501be:	4b6c      	ldr	r3, [pc, #432]	@ (24050370 <game_init+0x290>)
240501c0:	881a      	ldrh	r2, [r3, #0]
240501c2:	4b6a      	ldr	r3, [pc, #424]	@ (2405036c <game_init+0x28c>)
240501c4:	809a      	strh	r2, [r3, #4]

	init_sprite(&paddle1, 2, 110, 1, 8, SPRITE_SHOW | 0x05, pallete,
240501c6:	4b6b      	ldr	r3, [pc, #428]	@ (24050374 <game_init+0x294>)
240501c8:	9303      	str	r3, [sp, #12]
240501ca:	4b68      	ldr	r3, [pc, #416]	@ (2405036c <game_init+0x28c>)
240501cc:	9302      	str	r3, [sp, #8]
240501ce:	2315      	movs	r3, #21
240501d0:	9301      	str	r3, [sp, #4]
240501d2:	2308      	movs	r3, #8
240501d4:	9300      	str	r3, [sp, #0]
240501d6:	2301      	movs	r3, #1
240501d8:	226e      	movs	r2, #110	@ 0x6e
240501da:	2102      	movs	r1, #2
240501dc:	4866      	ldr	r0, [pc, #408]	@ (24050378 <game_init+0x298>)
240501de:	f001 fcf3 	bl	24051bc8 <init_sprite>
			paddle_data);
	init_sprite(&paddle2, 313, 110, 1, 8, SPRITE_SHOW | 0x05, pallete,
240501e2:	4b64      	ldr	r3, [pc, #400]	@ (24050374 <game_init+0x294>)
240501e4:	9303      	str	r3, [sp, #12]
240501e6:	4b61      	ldr	r3, [pc, #388]	@ (2405036c <game_init+0x28c>)
240501e8:	9302      	str	r3, [sp, #8]
240501ea:	2315      	movs	r3, #21
240501ec:	9301      	str	r3, [sp, #4]
240501ee:	2308      	movs	r3, #8
240501f0:	9300      	str	r3, [sp, #0]
240501f2:	2301      	movs	r3, #1
240501f4:	226e      	movs	r2, #110	@ 0x6e
240501f6:	f240 1139 	movw	r1, #313	@ 0x139
240501fa:	4860      	ldr	r0, [pc, #384]	@ (2405037c <game_init+0x29c>)
240501fc:	f001 fce4 	bl	24051bc8 <init_sprite>
			paddle_data);

	init_sprite(&ball1, ball_x, ball_y, 8, 8, SPRITE_SHOW | 0x01, pallete,
24050200:	4b56      	ldr	r3, [pc, #344]	@ (2405035c <game_init+0x27c>)
24050202:	681b      	ldr	r3, [r3, #0]
24050204:	b299      	uxth	r1, r3
24050206:	4b57      	ldr	r3, [pc, #348]	@ (24050364 <game_init+0x284>)
24050208:	681b      	ldr	r3, [r3, #0]
2405020a:	b29a      	uxth	r2, r3
2405020c:	4b5c      	ldr	r3, [pc, #368]	@ (24050380 <game_init+0x2a0>)
2405020e:	9303      	str	r3, [sp, #12]
24050210:	4b56      	ldr	r3, [pc, #344]	@ (2405036c <game_init+0x28c>)
24050212:	9302      	str	r3, [sp, #8]
24050214:	2311      	movs	r3, #17
24050216:	9301      	str	r3, [sp, #4]
24050218:	2308      	movs	r3, #8
2405021a:	9300      	str	r3, [sp, #0]
2405021c:	2308      	movs	r3, #8
2405021e:	4859      	ldr	r0, [pc, #356]	@ (24050384 <game_init+0x2a4>)
24050220:	f001 fcd2 	bl	24051bc8 <init_sprite>
			ball_data);
	init_sprite(&ball2, ball_x + 8, ball_y, 8, 8,
24050224:	4b4d      	ldr	r3, [pc, #308]	@ (2405035c <game_init+0x27c>)
24050226:	681b      	ldr	r3, [r3, #0]
24050228:	b29b      	uxth	r3, r3
2405022a:	3308      	adds	r3, #8
2405022c:	b299      	uxth	r1, r3
2405022e:	4b4d      	ldr	r3, [pc, #308]	@ (24050364 <game_init+0x284>)
24050230:	681b      	ldr	r3, [r3, #0]
24050232:	b29a      	uxth	r2, r3
24050234:	4b52      	ldr	r3, [pc, #328]	@ (24050380 <game_init+0x2a0>)
24050236:	9303      	str	r3, [sp, #12]
24050238:	4b4c      	ldr	r3, [pc, #304]	@ (2405036c <game_init+0x28c>)
2405023a:	9302      	str	r3, [sp, #8]
2405023c:	2331      	movs	r3, #49	@ 0x31
2405023e:	9301      	str	r3, [sp, #4]
24050240:	2308      	movs	r3, #8
24050242:	9300      	str	r3, [sp, #0]
24050244:	2308      	movs	r3, #8
24050246:	4850      	ldr	r0, [pc, #320]	@ (24050388 <game_init+0x2a8>)
24050248:	f001 fcbe 	bl	24051bc8 <init_sprite>
	SPRITE_SHOW | SPRITE_FLIP_X | 0x01, pallete, ball_data);
	init_sprite(&ball3, ball_x, ball_y + 8, 8, 8,
2405024c:	4b43      	ldr	r3, [pc, #268]	@ (2405035c <game_init+0x27c>)
2405024e:	681b      	ldr	r3, [r3, #0]
24050250:	b299      	uxth	r1, r3
24050252:	4b44      	ldr	r3, [pc, #272]	@ (24050364 <game_init+0x284>)
24050254:	681b      	ldr	r3, [r3, #0]
24050256:	b29b      	uxth	r3, r3
24050258:	3308      	adds	r3, #8
2405025a:	b29a      	uxth	r2, r3
2405025c:	4b48      	ldr	r3, [pc, #288]	@ (24050380 <game_init+0x2a0>)
2405025e:	9303      	str	r3, [sp, #12]
24050260:	4b42      	ldr	r3, [pc, #264]	@ (2405036c <game_init+0x28c>)
24050262:	9302      	str	r3, [sp, #8]
24050264:	2351      	movs	r3, #81	@ 0x51
24050266:	9301      	str	r3, [sp, #4]
24050268:	2308      	movs	r3, #8
2405026a:	9300      	str	r3, [sp, #0]
2405026c:	2308      	movs	r3, #8
2405026e:	4847      	ldr	r0, [pc, #284]	@ (2405038c <game_init+0x2ac>)
24050270:	f001 fcaa 	bl	24051bc8 <init_sprite>
	SPRITE_SHOW | SPRITE_FLIP_Y | 0x01, pallete, ball_data);
	init_sprite(&ball4, ball_x + 8, ball_y + 8, 8, 8,
24050274:	4b39      	ldr	r3, [pc, #228]	@ (2405035c <game_init+0x27c>)
24050276:	681b      	ldr	r3, [r3, #0]
24050278:	b29b      	uxth	r3, r3
2405027a:	3308      	adds	r3, #8
2405027c:	b299      	uxth	r1, r3
2405027e:	4b39      	ldr	r3, [pc, #228]	@ (24050364 <game_init+0x284>)
24050280:	681b      	ldr	r3, [r3, #0]
24050282:	b29b      	uxth	r3, r3
24050284:	3308      	adds	r3, #8
24050286:	b29a      	uxth	r2, r3
24050288:	4b3d      	ldr	r3, [pc, #244]	@ (24050380 <game_init+0x2a0>)
2405028a:	9303      	str	r3, [sp, #12]
2405028c:	4b37      	ldr	r3, [pc, #220]	@ (2405036c <game_init+0x28c>)
2405028e:	9302      	str	r3, [sp, #8]
24050290:	2371      	movs	r3, #113	@ 0x71
24050292:	9301      	str	r3, [sp, #4]
24050294:	2308      	movs	r3, #8
24050296:	9300      	str	r3, [sp, #0]
24050298:	2308      	movs	r3, #8
2405029a:	483d      	ldr	r0, [pc, #244]	@ (24050390 <game_init+0x2b0>)
2405029c:	f001 fc94 	bl	24051bc8 <init_sprite>
	SPRITE_SHOW | SPRITE_FLIP_X | SPRITE_FLIP_Y | 0x01, pallete, ball_data);

	list = sprites_init_list(&paddle1);
240502a0:	4835      	ldr	r0, [pc, #212]	@ (24050378 <game_init+0x298>)
240502a2:	f001 fdf8 	bl	24051e96 <sprites_init_list>
240502a6:	4603      	mov	r3, r0
240502a8:	4a3a      	ldr	r2, [pc, #232]	@ (24050394 <game_init+0x2b4>)
240502aa:	6013      	str	r3, [r2, #0]
	list = sprites_add_to_list(list, &paddle2);
240502ac:	4b39      	ldr	r3, [pc, #228]	@ (24050394 <game_init+0x2b4>)
240502ae:	681b      	ldr	r3, [r3, #0]
240502b0:	4932      	ldr	r1, [pc, #200]	@ (2405037c <game_init+0x29c>)
240502b2:	4618      	mov	r0, r3
240502b4:	f001 fe04 	bl	24051ec0 <sprites_add_to_list>
240502b8:	4603      	mov	r3, r0
240502ba:	4a36      	ldr	r2, [pc, #216]	@ (24050394 <game_init+0x2b4>)
240502bc:	6013      	str	r3, [r2, #0]
	list = sprites_add_to_list(list, &ball1);
240502be:	4b35      	ldr	r3, [pc, #212]	@ (24050394 <game_init+0x2b4>)
240502c0:	681b      	ldr	r3, [r3, #0]
240502c2:	4930      	ldr	r1, [pc, #192]	@ (24050384 <game_init+0x2a4>)
240502c4:	4618      	mov	r0, r3
240502c6:	f001 fdfb 	bl	24051ec0 <sprites_add_to_list>
240502ca:	4603      	mov	r3, r0
240502cc:	4a31      	ldr	r2, [pc, #196]	@ (24050394 <game_init+0x2b4>)
240502ce:	6013      	str	r3, [r2, #0]
	list = sprites_add_to_list(list, &ball2);
240502d0:	4b30      	ldr	r3, [pc, #192]	@ (24050394 <game_init+0x2b4>)
240502d2:	681b      	ldr	r3, [r3, #0]
240502d4:	492c      	ldr	r1, [pc, #176]	@ (24050388 <game_init+0x2a8>)
240502d6:	4618      	mov	r0, r3
240502d8:	f001 fdf2 	bl	24051ec0 <sprites_add_to_list>
240502dc:	4603      	mov	r3, r0
240502de:	4a2d      	ldr	r2, [pc, #180]	@ (24050394 <game_init+0x2b4>)
240502e0:	6013      	str	r3, [r2, #0]
	list = sprites_add_to_list(list, &ball3);
240502e2:	4b2c      	ldr	r3, [pc, #176]	@ (24050394 <game_init+0x2b4>)
240502e4:	681b      	ldr	r3, [r3, #0]
240502e6:	4929      	ldr	r1, [pc, #164]	@ (2405038c <game_init+0x2ac>)
240502e8:	4618      	mov	r0, r3
240502ea:	f001 fde9 	bl	24051ec0 <sprites_add_to_list>
240502ee:	4603      	mov	r3, r0
240502f0:	4a28      	ldr	r2, [pc, #160]	@ (24050394 <game_init+0x2b4>)
240502f2:	6013      	str	r3, [r2, #0]
	list = sprites_add_to_list(list, &ball4);
240502f4:	4b27      	ldr	r3, [pc, #156]	@ (24050394 <game_init+0x2b4>)
240502f6:	681b      	ldr	r3, [r3, #0]
240502f8:	4925      	ldr	r1, [pc, #148]	@ (24050390 <game_init+0x2b0>)
240502fa:	4618      	mov	r0, r3
240502fc:	f001 fde0 	bl	24051ec0 <sprites_add_to_list>
24050300:	4603      	mov	r3, r0
24050302:	4a24      	ldr	r2, [pc, #144]	@ (24050394 <game_init+0x2b4>)
24050304:	6013      	str	r3, [r2, #0]

	while (in_game) {
24050306:	e001      	b.n	2405030c <game_init+0x22c>
		game_loop();
24050308:	f000 f846 	bl	24050398 <game_loop>
	while (in_game) {
2405030c:	4b09      	ldr	r3, [pc, #36]	@ (24050334 <game_init+0x254>)
2405030e:	681b      	ldr	r3, [r3, #0]
24050310:	2b00      	cmp	r3, #0
24050312:	d1f9      	bne.n	24050308 <game_init+0x228>
	}
	while (in_demo) {
24050314:	e001      	b.n	2405031a <game_init+0x23a>
		demo_loop();
24050316:	f000 f85d 	bl	240503d4 <demo_loop>
	while (in_demo) {
2405031a:	4b04      	ldr	r3, [pc, #16]	@ (2405032c <game_init+0x24c>)
2405031c:	681b      	ldr	r3, [r3, #0]
2405031e:	2b00      	cmp	r3, #0
24050320:	d1f9      	bne.n	24050316 <game_init+0x236>
	}
	//main_menu_init();
}
24050322:	bf00      	nop
24050324:	bf00      	nop
24050326:	46bd      	mov	sp, r7
24050328:	bd80      	pop	{r7, pc}
2405032a:	bf00      	nop
2405032c:	20000200 	.word	0x20000200
24050330:	20000258 	.word	0x20000258
24050334:	200001fc 	.word	0x200001fc
24050338:	20000260 	.word	0x20000260
2405033c:	200001f0 	.word	0x200001f0
24050340:	200001f4 	.word	0x200001f4
24050344:	20000168 	.word	0x20000168
24050348:	2000016c 	.word	0x2000016c
2405034c:	200001ec 	.word	0x200001ec
24050350:	200001e4 	.word	0x200001e4
24050354:	200001e8 	.word	0x200001e8
24050358:	30c30c31 	.word	0x30c30c31
2405035c:	20000068 	.word	0x20000068
24050360:	63e7063f 	.word	0x63e7063f
24050364:	2000006c 	.word	0x2000006c
24050368:	200000b2 	.word	0x200000b2
2405036c:	20000020 	.word	0x20000020
24050370:	200000b4 	.word	0x200000b4
24050374:	20000040 	.word	0x20000040
24050378:	20000180 	.word	0x20000180
2405037c:	20000190 	.word	0x20000190
24050380:	20000044 	.word	0x20000044
24050384:	200001a0 	.word	0x200001a0
24050388:	200001b0 	.word	0x200001b0
2405038c:	200001c0 	.word	0x200001c0
24050390:	200001d0 	.word	0x200001d0
24050394:	200001e0 	.word	0x200001e0

24050398 <game_loop>:

static void game_loop() {
24050398:	b580      	push	{r7, lr}
2405039a:	b082      	sub	sp, #8
2405039c:	af00      	add	r7, sp, #0
	uint16_t *fb = lcd_get_active_buffer();
2405039e:	f003 fda3 	bl	24053ee8 <lcd_get_active_buffer>
240503a2:	6078      	str	r0, [r7, #4]
	draw_background(fb);
240503a4:	6878      	ldr	r0, [r7, #4]
240503a6:	f000 f84b 	bl	24050440 <draw_background>

	render_sprites(fb, list);
240503aa:	4b09      	ldr	r3, [pc, #36]	@ (240503d0 <game_loop+0x38>)
240503ac:	681b      	ldr	r3, [r3, #0]
240503ae:	4619      	mov	r1, r3
240503b0:	6878      	ldr	r0, [r7, #4]
240503b2:	f001 fd4a 	bl	24051e4a <render_sprites>

	process_input();
240503b6:	f000 f89f 	bl	240504f8 <process_input>
	update();
240503ba:	f000 f8e7 	bl	2405058c <update>

	lcd_swap();
240503be:	f003 fd65 	bl	24053e8c <lcd_swap>
	lcd_wait_for_vblank();
240503c2:	f003 fdbd 	bl	24053f40 <lcd_wait_for_vblank>
}
240503c6:	bf00      	nop
240503c8:	3708      	adds	r7, #8
240503ca:	46bd      	mov	sp, r7
240503cc:	bd80      	pop	{r7, pc}
240503ce:	bf00      	nop
240503d0:	200001e0 	.word	0x200001e0

240503d4 <demo_loop>:

static void demo_loop() {
240503d4:	b580      	push	{r7, lr}
240503d6:	b084      	sub	sp, #16
240503d8:	af02      	add	r7, sp, #8
	uint16_t *fb = lcd_get_active_buffer();
240503da:	f003 fd85 	bl	24053ee8 <lcd_get_active_buffer>
240503de:	6078      	str	r0, [r7, #4]
	draw_background(fb);
240503e0:	6878      	ldr	r0, [r7, #4]
240503e2:	f000 f82d 	bl	24050440 <draw_background>

	LCD_SetFont(&Font24);
240503e6:	4813      	ldr	r0, [pc, #76]	@ (24050434 <demo_loop+0x60>)
240503e8:	f000 fefa 	bl	240511e0 <LCD_SetFont>
	LCD_SetFontScale(3);
240503ec:	2003      	movs	r0, #3
240503ee:	f000 ff07 	bl	24051200 <LCD_SetFontScale>
	LCD_SetTextColor(LCD_COLOR_DARKYELLOW);
240503f2:	f44f 4004 	mov.w	r0, #33792	@ 0x8400
240503f6:	f000 fed3 	bl	240511a0 <LCD_SetTextColor>
	LCD_DisplayStringAt(fb, 6, 100, (uint8_t*) "DEMO\0", CENTER_MODE);
240503fa:	2301      	movs	r3, #1
240503fc:	9300      	str	r3, [sp, #0]
240503fe:	4b0e      	ldr	r3, [pc, #56]	@ (24050438 <demo_loop+0x64>)
24050400:	2264      	movs	r2, #100	@ 0x64
24050402:	2106      	movs	r1, #6
24050404:	6878      	ldr	r0, [r7, #4]
24050406:	f000 ff51 	bl	240512ac <LCD_DisplayStringAt>
	LCD_SetFontScale(1);
2405040a:	2001      	movs	r0, #1
2405040c:	f000 fef8 	bl	24051200 <LCD_SetFontScale>

	render_sprites(fb, list);
24050410:	4b0a      	ldr	r3, [pc, #40]	@ (2405043c <demo_loop+0x68>)
24050412:	681b      	ldr	r3, [r3, #0]
24050414:	4619      	mov	r1, r3
24050416:	6878      	ldr	r0, [r7, #4]
24050418:	f001 fd17 	bl	24051e4a <render_sprites>

	process_input_demo();
2405041c:	f000 f898 	bl	24050550 <process_input_demo>
	update_demo();
24050420:	f000 f8dc 	bl	240505dc <update_demo>

	lcd_swap();
24050424:	f003 fd32 	bl	24053e8c <lcd_swap>
	lcd_wait_for_vblank();
24050428:	f003 fd8a 	bl	24053f40 <lcd_wait_for_vblank>
}
2405042c:	bf00      	nop
2405042e:	3708      	adds	r7, #8
24050430:	46bd      	mov	sp, r7
24050432:	bd80      	pop	{r7, pc}
24050434:	20000018 	.word	0x20000018
24050438:	2406557c 	.word	0x2406557c
2405043c:	200001e0 	.word	0x200001e0

24050440 <draw_background>:

static void draw_background(uint16_t *buf) {
24050440:	b590      	push	{r4, r7, lr}
24050442:	b085      	sub	sp, #20
24050444:	af02      	add	r7, sp, #8
24050446:	6078      	str	r0, [r7, #4]
	LCD_Clear(buf, LCD_COLOR_BLACK);
24050448:	2100      	movs	r1, #0
2405044a:	6878      	ldr	r0, [r7, #4]
2405044c:	f000 ff14 	bl	24051278 <LCD_Clear>
	LCD_DrawRect(buf, 0, 20, LCD_GetXSize() - 1, LCD_GetYSize() - 21,
24050450:	f000 fe94 	bl	2405117c <LCD_GetXSize>
24050454:	4603      	mov	r3, r0
24050456:	3b01      	subs	r3, #1
24050458:	b29c      	uxth	r4, r3
2405045a:	f000 fe98 	bl	2405118e <LCD_GetYSize>
2405045e:	4603      	mov	r3, r0
24050460:	3b15      	subs	r3, #21
24050462:	b29b      	uxth	r3, r3
24050464:	f64f 72ff 	movw	r2, #65535	@ 0xffff
24050468:	9201      	str	r2, [sp, #4]
2405046a:	9300      	str	r3, [sp, #0]
2405046c:	4623      	mov	r3, r4
2405046e:	2214      	movs	r2, #20
24050470:	2100      	movs	r1, #0
24050472:	6878      	ldr	r0, [r7, #4]
24050474:	f001 f904 	bl	24051680 <LCD_DrawRect>
	LCD_COLOR_WHITE);
	LCD_SetTextColor(LCD_COLOR_WHITE);
24050478:	f64f 70ff 	movw	r0, #65535	@ 0xffff
2405047c:	f000 fe90 	bl	240511a0 <LCD_SetTextColor>
	LCD_SetFont(&Font16);
24050480:	4816      	ldr	r0, [pc, #88]	@ (240504dc <draw_background+0x9c>)
24050482:	f000 fead 	bl	240511e0 <LCD_SetFont>
	sprintf(score_p1_buf, "%d", score_p1);
24050486:	4b16      	ldr	r3, [pc, #88]	@ (240504e0 <draw_background+0xa0>)
24050488:	681b      	ldr	r3, [r3, #0]
2405048a:	461a      	mov	r2, r3
2405048c:	4915      	ldr	r1, [pc, #84]	@ (240504e4 <draw_background+0xa4>)
2405048e:	4816      	ldr	r0, [pc, #88]	@ (240504e8 <draw_background+0xa8>)
24050490:	f014 f8c8 	bl	24064624 <siprintf>
	LCD_DisplayStringAt(buf, 0, 4, (uint8_t*) score_p1_buf, LEFT_MODE);
24050494:	2303      	movs	r3, #3
24050496:	9300      	str	r3, [sp, #0]
24050498:	4b13      	ldr	r3, [pc, #76]	@ (240504e8 <draw_background+0xa8>)
2405049a:	2204      	movs	r2, #4
2405049c:	2100      	movs	r1, #0
2405049e:	6878      	ldr	r0, [r7, #4]
240504a0:	f000 ff04 	bl	240512ac <LCD_DisplayStringAt>
	sprintf(score_p2_buf, "%d", score_p2);
240504a4:	4b11      	ldr	r3, [pc, #68]	@ (240504ec <draw_background+0xac>)
240504a6:	681b      	ldr	r3, [r3, #0]
240504a8:	461a      	mov	r2, r3
240504aa:	490e      	ldr	r1, [pc, #56]	@ (240504e4 <draw_background+0xa4>)
240504ac:	4810      	ldr	r0, [pc, #64]	@ (240504f0 <draw_background+0xb0>)
240504ae:	f014 f8b9 	bl	24064624 <siprintf>
	LCD_DisplayStringAt(buf, 0, 4, (uint8_t*) score_p2_buf, RIGHT_MODE);
240504b2:	2302      	movs	r3, #2
240504b4:	9300      	str	r3, [sp, #0]
240504b6:	4b0e      	ldr	r3, [pc, #56]	@ (240504f0 <draw_background+0xb0>)
240504b8:	2204      	movs	r2, #4
240504ba:	2100      	movs	r1, #0
240504bc:	6878      	ldr	r0, [r7, #4]
240504be:	f000 fef5 	bl	240512ac <LCD_DisplayStringAt>
	LCD_DisplayStringAt(buf, 1, 4, (uint8_t*) "SCORE\0", CENTER_MODE);
240504c2:	2301      	movs	r3, #1
240504c4:	9300      	str	r3, [sp, #0]
240504c6:	4b0b      	ldr	r3, [pc, #44]	@ (240504f4 <draw_background+0xb4>)
240504c8:	2204      	movs	r2, #4
240504ca:	2101      	movs	r1, #1
240504cc:	6878      	ldr	r0, [r7, #4]
240504ce:	f000 feed 	bl	240512ac <LCD_DisplayStringAt>
}
240504d2:	bf00      	nop
240504d4:	370c      	adds	r7, #12
240504d6:	46bd      	mov	sp, r7
240504d8:	bd90      	pop	{r4, r7, pc}
240504da:	bf00      	nop
240504dc:	20000008 	.word	0x20000008
240504e0:	20000168 	.word	0x20000168
240504e4:	24065584 	.word	0x24065584
240504e8:	20000170 	.word	0x20000170
240504ec:	2000016c 	.word	0x2000016c
240504f0:	20000178 	.word	0x20000178
240504f4:	24065588 	.word	0x24065588

240504f8 <process_input>:

static void process_input() {
240504f8:	b580      	push	{r7, lr}
240504fa:	b082      	sub	sp, #8
240504fc:	af00      	add	r7, sp, #0
	uint32_t buttons = buttons_get();
240504fe:	f002 fe29 	bl	24053154 <buttons_get>
24050502:	6078      	str	r0, [r7, #4]
	if (buttons & B_POWER) {
24050504:	687b      	ldr	r3, [r7, #4]
24050506:	f403 7300 	and.w	r3, r3, #512	@ 0x200
2405050a:	2b00      	cmp	r3, #0
2405050c:	d001      	beq.n	24050512 <process_input+0x1a>
		HAL_NVIC_SystemReset();
2405050e:	f008 fb1c 	bl	24058b4a <HAL_NVIC_SystemReset>
	}
	if (buttons & B_GAME) {
24050512:	687b      	ldr	r3, [r7, #4]
24050514:	f003 0380 	and.w	r3, r3, #128	@ 0x80
24050518:	2b00      	cmp	r3, #0
2405051a:	d003      	beq.n	24050524 <process_input+0x2c>
		lcd_sync();
2405051c:	f003 fccc 	bl	24053eb8 <lcd_sync>
		in_game_menu_init();
24050520:	f000 fc74 	bl	24050e0c <in_game_menu_init>
	}
	if (buttons & B_Up) {
24050524:	687b      	ldr	r3, [r7, #4]
24050526:	f003 0302 	and.w	r3, r3, #2
2405052a:	2b00      	cmp	r3, #0
2405052c:	d002      	beq.n	24050534 <process_input+0x3c>
		dir = -1;
2405052e:	4b07      	ldr	r3, [pc, #28]	@ (2405054c <process_input+0x54>)
24050530:	22ff      	movs	r2, #255	@ 0xff
24050532:	701a      	strb	r2, [r3, #0]
	}
	if (buttons & B_Down) {
24050534:	687b      	ldr	r3, [r7, #4]
24050536:	f003 0308 	and.w	r3, r3, #8
2405053a:	2b00      	cmp	r3, #0
2405053c:	d002      	beq.n	24050544 <process_input+0x4c>
		dir = 1;
2405053e:	4b03      	ldr	r3, [pc, #12]	@ (2405054c <process_input+0x54>)
24050540:	2201      	movs	r2, #1
24050542:	701a      	strb	r2, [r3, #0]
	}
}
24050544:	bf00      	nop
24050546:	3708      	adds	r7, #8
24050548:	46bd      	mov	sp, r7
2405054a:	bd80      	pop	{r7, pc}
2405054c:	200001ec 	.word	0x200001ec

24050550 <process_input_demo>:

static void process_input_demo() {
24050550:	b580      	push	{r7, lr}
24050552:	b082      	sub	sp, #8
24050554:	af00      	add	r7, sp, #0
	uint32_t buttons = buttons_get();
24050556:	f002 fdfd 	bl	24053154 <buttons_get>
2405055a:	6078      	str	r0, [r7, #4]
	if (buttons & B_POWER) {
2405055c:	687b      	ldr	r3, [r7, #4]
2405055e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
24050562:	2b00      	cmp	r3, #0
24050564:	d001      	beq.n	2405056a <process_input_demo+0x1a>
		HAL_NVIC_SystemReset();
24050566:	f008 faf0 	bl	24058b4a <HAL_NVIC_SystemReset>
	}
	if (buttons & ~B_POWER) {
2405056a:	687b      	ldr	r3, [r7, #4]
2405056c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
24050570:	2b00      	cmp	r3, #0
24050572:	d004      	beq.n	2405057e <process_input_demo+0x2e>
		lcd_sync();
24050574:	f003 fca0 	bl	24053eb8 <lcd_sync>
		in_demo = 0;
24050578:	4b03      	ldr	r3, [pc, #12]	@ (24050588 <process_input_demo+0x38>)
2405057a:	2200      	movs	r2, #0
2405057c:	601a      	str	r2, [r3, #0]
	}
}
2405057e:	bf00      	nop
24050580:	3708      	adds	r7, #8
24050582:	46bd      	mov	sp, r7
24050584:	bd80      	pop	{r7, pc}
24050586:	bf00      	nop
24050588:	20000200 	.word	0x20000200

2405058c <update>:

static void update() {
2405058c:	b580      	push	{r7, lr}
2405058e:	af00      	add	r7, sp, #0
	tim++;
24050590:	4b0f      	ldr	r3, [pc, #60]	@ (240505d0 <update+0x44>)
24050592:	681b      	ldr	r3, [r3, #0]
24050594:	3301      	adds	r3, #1
24050596:	4a0e      	ldr	r2, [pc, #56]	@ (240505d0 <update+0x44>)
24050598:	6013      	str	r3, [r2, #0]
	if (score_p1 >= 10) {
2405059a:	4b0e      	ldr	r3, [pc, #56]	@ (240505d4 <update+0x48>)
2405059c:	681b      	ldr	r3, [r3, #0]
2405059e:	2b09      	cmp	r3, #9
240505a0:	dd04      	ble.n	240505ac <update+0x20>
		lcd_sync();
240505a2:	f003 fc89 	bl	24053eb8 <lcd_sync>
		game_over_init(1);
240505a6:	2001      	movs	r0, #1
240505a8:	f000 faac 	bl	24050b04 <game_over_init>
	}
	if (score_p2 >= 10) {
240505ac:	4b0a      	ldr	r3, [pc, #40]	@ (240505d8 <update+0x4c>)
240505ae:	681b      	ldr	r3, [r3, #0]
240505b0:	2b09      	cmp	r3, #9
240505b2:	dd04      	ble.n	240505be <update+0x32>
		lcd_sync();
240505b4:	f003 fc80 	bl	24053eb8 <lcd_sync>
		game_over_init(2);
240505b8:	2002      	movs	r0, #2
240505ba:	f000 faa3 	bl	24050b04 <game_over_init>
	}
	update_player();
240505be:	f000 f81f 	bl	24050600 <update_player>
	update_ai();
240505c2:	f000 f955 	bl	24050870 <update_ai>
	update_ball();
240505c6:	f000 f89f 	bl	24050708 <update_ball>
}
240505ca:	bf00      	nop
240505cc:	bd80      	pop	{r7, pc}
240505ce:	bf00      	nop
240505d0:	200001f8 	.word	0x200001f8
240505d4:	20000168 	.word	0x20000168
240505d8:	2000016c 	.word	0x2000016c

240505dc <update_demo>:

static void update_demo() {
240505dc:	b580      	push	{r7, lr}
240505de:	af00      	add	r7, sp, #0
	tim++;
240505e0:	4b06      	ldr	r3, [pc, #24]	@ (240505fc <update_demo+0x20>)
240505e2:	681b      	ldr	r3, [r3, #0]
240505e4:	3301      	adds	r3, #1
240505e6:	4a05      	ldr	r2, [pc, #20]	@ (240505fc <update_demo+0x20>)
240505e8:	6013      	str	r3, [r2, #0]
	update_player_demo();
240505ea:	f000 f835 	bl	24050658 <update_player_demo>
	update_ai_demo();
240505ee:	f000 f9c3 	bl	24050978 <update_ai_demo>
	update_ball();
240505f2:	f000 f889 	bl	24050708 <update_ball>
}
240505f6:	bf00      	nop
240505f8:	bd80      	pop	{r7, pc}
240505fa:	bf00      	nop
240505fc:	200001f8 	.word	0x200001f8

24050600 <update_player>:

static void update_player() {
24050600:	b480      	push	{r7}
24050602:	af00      	add	r7, sp, #0
	paddle1.y = paddle1.y + dir * p1_speed;
24050604:	4b12      	ldr	r3, [pc, #72]	@ (24050650 <update_player+0x50>)
24050606:	885a      	ldrh	r2, [r3, #2]
24050608:	4b12      	ldr	r3, [pc, #72]	@ (24050654 <update_player+0x54>)
2405060a:	f993 3000 	ldrsb.w	r3, [r3]
2405060e:	b299      	uxth	r1, r3
24050610:	2302      	movs	r3, #2
24050612:	b29b      	uxth	r3, r3
24050614:	fb11 f303 	smulbb	r3, r1, r3
24050618:	b29b      	uxth	r3, r3
2405061a:	4413      	add	r3, r2
2405061c:	b29a      	uxth	r2, r3
2405061e:	4b0c      	ldr	r3, [pc, #48]	@ (24050650 <update_player+0x50>)
24050620:	805a      	strh	r2, [r3, #2]
	if (paddle1.y < 22) {
24050622:	4b0b      	ldr	r3, [pc, #44]	@ (24050650 <update_player+0x50>)
24050624:	885b      	ldrh	r3, [r3, #2]
24050626:	2b15      	cmp	r3, #21
24050628:	d802      	bhi.n	24050630 <update_player+0x30>
		paddle1.y = 22;
2405062a:	4b09      	ldr	r3, [pc, #36]	@ (24050650 <update_player+0x50>)
2405062c:	2216      	movs	r2, #22
2405062e:	805a      	strh	r2, [r3, #2]
	}
	if (paddle1.y > 198) {
24050630:	4b07      	ldr	r3, [pc, #28]	@ (24050650 <update_player+0x50>)
24050632:	885b      	ldrh	r3, [r3, #2]
24050634:	2bc6      	cmp	r3, #198	@ 0xc6
24050636:	d902      	bls.n	2405063e <update_player+0x3e>
		paddle1.y = 198;
24050638:	4b05      	ldr	r3, [pc, #20]	@ (24050650 <update_player+0x50>)
2405063a:	22c6      	movs	r2, #198	@ 0xc6
2405063c:	805a      	strh	r2, [r3, #2]
	}
	dir = 0;
2405063e:	4b05      	ldr	r3, [pc, #20]	@ (24050654 <update_player+0x54>)
24050640:	2200      	movs	r2, #0
24050642:	701a      	strb	r2, [r3, #0]
}
24050644:	bf00      	nop
24050646:	46bd      	mov	sp, r7
24050648:	f85d 7b04 	ldr.w	r7, [sp], #4
2405064c:	4770      	bx	lr
2405064e:	bf00      	nop
24050650:	20000180 	.word	0x20000180
24050654:	200001ec 	.word	0x200001ec

24050658 <update_player_demo>:

static void update_player_demo() {
24050658:	b480      	push	{r7}
2405065a:	af00      	add	r7, sp, #0
	if (ball_xspeed > 0 || ball_x > 100) {
2405065c:	4b26      	ldr	r3, [pc, #152]	@ (240506f8 <update_player_demo+0xa0>)
2405065e:	681b      	ldr	r3, [r3, #0]
24050660:	2b00      	cmp	r3, #0
24050662:	dc03      	bgt.n	2405066c <update_player_demo+0x14>
24050664:	4b25      	ldr	r3, [pc, #148]	@ (240506fc <update_player_demo+0xa4>)
24050666:	681b      	ldr	r3, [r3, #0]
24050668:	2b64      	cmp	r3, #100	@ 0x64
2405066a:	dd15      	ble.n	24050698 <update_player_demo+0x40>
		if (paddle1.y < 108) {
2405066c:	4b24      	ldr	r3, [pc, #144]	@ (24050700 <update_player_demo+0xa8>)
2405066e:	885b      	ldrh	r3, [r3, #2]
24050670:	2b6b      	cmp	r3, #107	@ 0x6b
24050672:	d806      	bhi.n	24050682 <update_player_demo+0x2a>
			paddle1.y = paddle1.y + 3;
24050674:	4b22      	ldr	r3, [pc, #136]	@ (24050700 <update_player_demo+0xa8>)
24050676:	885b      	ldrh	r3, [r3, #2]
24050678:	3303      	adds	r3, #3
2405067a:	b29a      	uxth	r2, r3
2405067c:	4b20      	ldr	r3, [pc, #128]	@ (24050700 <update_player_demo+0xa8>)
2405067e:	805a      	strh	r2, [r3, #2]
		} else if (paddle1.y > 112) {
			paddle1.y = paddle1.y - 3;
		}
		return;
24050680:	e035      	b.n	240506ee <update_player_demo+0x96>
		} else if (paddle1.y > 112) {
24050682:	4b1f      	ldr	r3, [pc, #124]	@ (24050700 <update_player_demo+0xa8>)
24050684:	885b      	ldrh	r3, [r3, #2]
24050686:	2b70      	cmp	r3, #112	@ 0x70
24050688:	d931      	bls.n	240506ee <update_player_demo+0x96>
			paddle1.y = paddle1.y - 3;
2405068a:	4b1d      	ldr	r3, [pc, #116]	@ (24050700 <update_player_demo+0xa8>)
2405068c:	885b      	ldrh	r3, [r3, #2]
2405068e:	3b03      	subs	r3, #3
24050690:	b29a      	uxth	r2, r3
24050692:	4b1b      	ldr	r3, [pc, #108]	@ (24050700 <update_player_demo+0xa8>)
24050694:	805a      	strh	r2, [r3, #2]
		return;
24050696:	e02a      	b.n	240506ee <update_player_demo+0x96>
	}
	if ((ball_y + 8) < (paddle1.y + 20)) {
24050698:	4b19      	ldr	r3, [pc, #100]	@ (24050700 <update_player_demo+0xa8>)
2405069a:	885b      	ldrh	r3, [r3, #2]
2405069c:	f103 020b 	add.w	r2, r3, #11
240506a0:	4b18      	ldr	r3, [pc, #96]	@ (24050704 <update_player_demo+0xac>)
240506a2:	681b      	ldr	r3, [r3, #0]
240506a4:	429a      	cmp	r2, r3
240506a6:	db0c      	blt.n	240506c2 <update_player_demo+0x6a>
		paddle1.y = paddle1.y - 3;
240506a8:	4b15      	ldr	r3, [pc, #84]	@ (24050700 <update_player_demo+0xa8>)
240506aa:	885b      	ldrh	r3, [r3, #2]
240506ac:	3b03      	subs	r3, #3
240506ae:	b29a      	uxth	r2, r3
240506b0:	4b13      	ldr	r3, [pc, #76]	@ (24050700 <update_player_demo+0xa8>)
240506b2:	805a      	strh	r2, [r3, #2]
		if (paddle1.y < 22) {
240506b4:	4b12      	ldr	r3, [pc, #72]	@ (24050700 <update_player_demo+0xa8>)
240506b6:	885b      	ldrh	r3, [r3, #2]
240506b8:	2b15      	cmp	r3, #21
240506ba:	d802      	bhi.n	240506c2 <update_player_demo+0x6a>
			paddle1.y = 22;
240506bc:	4b10      	ldr	r3, [pc, #64]	@ (24050700 <update_player_demo+0xa8>)
240506be:	2216      	movs	r2, #22
240506c0:	805a      	strh	r2, [r3, #2]
		}
	}
	if ((ball_y + 8) > (paddle1.y + 20)) {
240506c2:	4b0f      	ldr	r3, [pc, #60]	@ (24050700 <update_player_demo+0xa8>)
240506c4:	885b      	ldrh	r3, [r3, #2]
240506c6:	f103 020c 	add.w	r2, r3, #12
240506ca:	4b0e      	ldr	r3, [pc, #56]	@ (24050704 <update_player_demo+0xac>)
240506cc:	681b      	ldr	r3, [r3, #0]
240506ce:	429a      	cmp	r2, r3
240506d0:	da0e      	bge.n	240506f0 <update_player_demo+0x98>
		paddle1.y = paddle1.y + 3;
240506d2:	4b0b      	ldr	r3, [pc, #44]	@ (24050700 <update_player_demo+0xa8>)
240506d4:	885b      	ldrh	r3, [r3, #2]
240506d6:	3303      	adds	r3, #3
240506d8:	b29a      	uxth	r2, r3
240506da:	4b09      	ldr	r3, [pc, #36]	@ (24050700 <update_player_demo+0xa8>)
240506dc:	805a      	strh	r2, [r3, #2]
		if (paddle1.y > 198) {
240506de:	4b08      	ldr	r3, [pc, #32]	@ (24050700 <update_player_demo+0xa8>)
240506e0:	885b      	ldrh	r3, [r3, #2]
240506e2:	2bc6      	cmp	r3, #198	@ 0xc6
240506e4:	d904      	bls.n	240506f0 <update_player_demo+0x98>
			paddle1.y = 198;
240506e6:	4b06      	ldr	r3, [pc, #24]	@ (24050700 <update_player_demo+0xa8>)
240506e8:	22c6      	movs	r2, #198	@ 0xc6
240506ea:	805a      	strh	r2, [r3, #2]
240506ec:	e000      	b.n	240506f0 <update_player_demo+0x98>
		return;
240506ee:	bf00      	nop
		}
	}
}
240506f0:	46bd      	mov	sp, r7
240506f2:	f85d 7b04 	ldr.w	r7, [sp], #4
240506f6:	4770      	bx	lr
240506f8:	200001e4 	.word	0x200001e4
240506fc:	20000068 	.word	0x20000068
24050700:	20000180 	.word	0x20000180
24050704:	2000006c 	.word	0x2000006c

24050708 <update_ball>:

static void update_ball() {
24050708:	b580      	push	{r7, lr}
2405070a:	b082      	sub	sp, #8
2405070c:	af00      	add	r7, sp, #0
	int i;
	for (i = 0; i < ball_speed; ++i) {
2405070e:	2300      	movs	r3, #0
24050710:	607b      	str	r3, [r7, #4]
24050712:	e060      	b.n	240507d6 <update_ball+0xce>

		if (ball_x == 7) {
24050714:	4b4c      	ldr	r3, [pc, #304]	@ (24050848 <update_ball+0x140>)
24050716:	681b      	ldr	r3, [r3, #0]
24050718:	2b07      	cmp	r3, #7
2405071a:	d11a      	bne.n	24050752 <update_ball+0x4a>
			if ((paddle1.y - 12 < ball_y) && (paddle1.y + 40 - 4 > ball_y)) {
2405071c:	4b4b      	ldr	r3, [pc, #300]	@ (2405084c <update_ball+0x144>)
2405071e:	885b      	ldrh	r3, [r3, #2]
24050720:	f1a3 020b 	sub.w	r2, r3, #11
24050724:	4b4a      	ldr	r3, [pc, #296]	@ (24050850 <update_ball+0x148>)
24050726:	681b      	ldr	r3, [r3, #0]
24050728:	429a      	cmp	r2, r3
2405072a:	dc0b      	bgt.n	24050744 <update_ball+0x3c>
2405072c:	4b47      	ldr	r3, [pc, #284]	@ (2405084c <update_ball+0x144>)
2405072e:	885b      	ldrh	r3, [r3, #2]
24050730:	f103 0223 	add.w	r2, r3, #35	@ 0x23
24050734:	4b46      	ldr	r3, [pc, #280]	@ (24050850 <update_ball+0x148>)
24050736:	681b      	ldr	r3, [r3, #0]
24050738:	429a      	cmp	r2, r3
2405073a:	db03      	blt.n	24050744 <update_ball+0x3c>
				ball_xspeed = 1;
2405073c:	4b45      	ldr	r3, [pc, #276]	@ (24050854 <update_ball+0x14c>)
2405073e:	2201      	movs	r2, #1
24050740:	601a      	str	r2, [r3, #0]
24050742:	e006      	b.n	24050752 <update_ball+0x4a>
			} else {
				ball_xspeed = 1;
24050744:	4b43      	ldr	r3, [pc, #268]	@ (24050854 <update_ball+0x14c>)
24050746:	2201      	movs	r2, #1
24050748:	601a      	str	r2, [r3, #0]
				update_score(-1);
2405074a:	f04f 30ff 	mov.w	r0, #4294967295
2405074e:	f000 f96b 	bl	24050a28 <update_score>
			}
		}
		if (ball_x == 297) {
24050752:	4b3d      	ldr	r3, [pc, #244]	@ (24050848 <update_ball+0x140>)
24050754:	681b      	ldr	r3, [r3, #0]
24050756:	f240 1229 	movw	r2, #297	@ 0x129
2405075a:	4293      	cmp	r3, r2
2405075c:	d11b      	bne.n	24050796 <update_ball+0x8e>
			if ((paddle2.y - 12 < ball_y) && (paddle2.y + 40 - 4 > ball_y)) {
2405075e:	4b3e      	ldr	r3, [pc, #248]	@ (24050858 <update_ball+0x150>)
24050760:	885b      	ldrh	r3, [r3, #2]
24050762:	f1a3 020b 	sub.w	r2, r3, #11
24050766:	4b3a      	ldr	r3, [pc, #232]	@ (24050850 <update_ball+0x148>)
24050768:	681b      	ldr	r3, [r3, #0]
2405076a:	429a      	cmp	r2, r3
2405076c:	dc0c      	bgt.n	24050788 <update_ball+0x80>
2405076e:	4b3a      	ldr	r3, [pc, #232]	@ (24050858 <update_ball+0x150>)
24050770:	885b      	ldrh	r3, [r3, #2]
24050772:	f103 0223 	add.w	r2, r3, #35	@ 0x23
24050776:	4b36      	ldr	r3, [pc, #216]	@ (24050850 <update_ball+0x148>)
24050778:	681b      	ldr	r3, [r3, #0]
2405077a:	429a      	cmp	r2, r3
2405077c:	db04      	blt.n	24050788 <update_ball+0x80>
				ball_xspeed = -1;
2405077e:	4b35      	ldr	r3, [pc, #212]	@ (24050854 <update_ball+0x14c>)
24050780:	f04f 32ff 	mov.w	r2, #4294967295
24050784:	601a      	str	r2, [r3, #0]
24050786:	e006      	b.n	24050796 <update_ball+0x8e>
			} else {
				ball_xspeed = -1;
24050788:	4b32      	ldr	r3, [pc, #200]	@ (24050854 <update_ball+0x14c>)
2405078a:	f04f 32ff 	mov.w	r2, #4294967295
2405078e:	601a      	str	r2, [r3, #0]
				update_score(1);
24050790:	2001      	movs	r0, #1
24050792:	f000 f949 	bl	24050a28 <update_score>
			}
		}
		if (ball_y == 21) {
24050796:	4b2e      	ldr	r3, [pc, #184]	@ (24050850 <update_ball+0x148>)
24050798:	681b      	ldr	r3, [r3, #0]
2405079a:	2b15      	cmp	r3, #21
2405079c:	d102      	bne.n	240507a4 <update_ball+0x9c>
			ball_yspeed = 1;
2405079e:	4b2f      	ldr	r3, [pc, #188]	@ (2405085c <update_ball+0x154>)
240507a0:	2201      	movs	r2, #1
240507a2:	601a      	str	r2, [r3, #0]
		}
		if (ball_y == 223) {
240507a4:	4b2a      	ldr	r3, [pc, #168]	@ (24050850 <update_ball+0x148>)
240507a6:	681b      	ldr	r3, [r3, #0]
240507a8:	2bdf      	cmp	r3, #223	@ 0xdf
240507aa:	d103      	bne.n	240507b4 <update_ball+0xac>
			ball_yspeed = -1;
240507ac:	4b2b      	ldr	r3, [pc, #172]	@ (2405085c <update_ball+0x154>)
240507ae:	f04f 32ff 	mov.w	r2, #4294967295
240507b2:	601a      	str	r2, [r3, #0]
		}
		ball_x = ball_x + ball_xspeed;
240507b4:	4b24      	ldr	r3, [pc, #144]	@ (24050848 <update_ball+0x140>)
240507b6:	681a      	ldr	r2, [r3, #0]
240507b8:	4b26      	ldr	r3, [pc, #152]	@ (24050854 <update_ball+0x14c>)
240507ba:	681b      	ldr	r3, [r3, #0]
240507bc:	4413      	add	r3, r2
240507be:	4a22      	ldr	r2, [pc, #136]	@ (24050848 <update_ball+0x140>)
240507c0:	6013      	str	r3, [r2, #0]
		ball_y = ball_y + ball_yspeed;
240507c2:	4b23      	ldr	r3, [pc, #140]	@ (24050850 <update_ball+0x148>)
240507c4:	681a      	ldr	r2, [r3, #0]
240507c6:	4b25      	ldr	r3, [pc, #148]	@ (2405085c <update_ball+0x154>)
240507c8:	681b      	ldr	r3, [r3, #0]
240507ca:	4413      	add	r3, r2
240507cc:	4a20      	ldr	r2, [pc, #128]	@ (24050850 <update_ball+0x148>)
240507ce:	6013      	str	r3, [r2, #0]
	for (i = 0; i < ball_speed; ++i) {
240507d0:	687b      	ldr	r3, [r7, #4]
240507d2:	3301      	adds	r3, #1
240507d4:	607b      	str	r3, [r7, #4]
240507d6:	2203      	movs	r2, #3
240507d8:	687b      	ldr	r3, [r7, #4]
240507da:	4293      	cmp	r3, r2
240507dc:	db9a      	blt.n	24050714 <update_ball+0xc>

	}

	ball1.x = ball_x;
240507de:	4b1a      	ldr	r3, [pc, #104]	@ (24050848 <update_ball+0x140>)
240507e0:	681b      	ldr	r3, [r3, #0]
240507e2:	b29a      	uxth	r2, r3
240507e4:	4b1e      	ldr	r3, [pc, #120]	@ (24050860 <update_ball+0x158>)
240507e6:	801a      	strh	r2, [r3, #0]
	ball1.y = ball_y;
240507e8:	4b19      	ldr	r3, [pc, #100]	@ (24050850 <update_ball+0x148>)
240507ea:	681b      	ldr	r3, [r3, #0]
240507ec:	b29a      	uxth	r2, r3
240507ee:	4b1c      	ldr	r3, [pc, #112]	@ (24050860 <update_ball+0x158>)
240507f0:	805a      	strh	r2, [r3, #2]
	ball2.x = ball_x + 8;
240507f2:	4b15      	ldr	r3, [pc, #84]	@ (24050848 <update_ball+0x140>)
240507f4:	681b      	ldr	r3, [r3, #0]
240507f6:	b29b      	uxth	r3, r3
240507f8:	3308      	adds	r3, #8
240507fa:	b29a      	uxth	r2, r3
240507fc:	4b19      	ldr	r3, [pc, #100]	@ (24050864 <update_ball+0x15c>)
240507fe:	801a      	strh	r2, [r3, #0]
	ball2.y = ball_y;
24050800:	4b13      	ldr	r3, [pc, #76]	@ (24050850 <update_ball+0x148>)
24050802:	681b      	ldr	r3, [r3, #0]
24050804:	b29a      	uxth	r2, r3
24050806:	4b17      	ldr	r3, [pc, #92]	@ (24050864 <update_ball+0x15c>)
24050808:	805a      	strh	r2, [r3, #2]
	ball3.x = ball_x;
2405080a:	4b0f      	ldr	r3, [pc, #60]	@ (24050848 <update_ball+0x140>)
2405080c:	681b      	ldr	r3, [r3, #0]
2405080e:	b29a      	uxth	r2, r3
24050810:	4b15      	ldr	r3, [pc, #84]	@ (24050868 <update_ball+0x160>)
24050812:	801a      	strh	r2, [r3, #0]
	ball3.y = ball_y + 8;
24050814:	4b0e      	ldr	r3, [pc, #56]	@ (24050850 <update_ball+0x148>)
24050816:	681b      	ldr	r3, [r3, #0]
24050818:	b29b      	uxth	r3, r3
2405081a:	3308      	adds	r3, #8
2405081c:	b29a      	uxth	r2, r3
2405081e:	4b12      	ldr	r3, [pc, #72]	@ (24050868 <update_ball+0x160>)
24050820:	805a      	strh	r2, [r3, #2]
	ball4.x = ball_x + 8;
24050822:	4b09      	ldr	r3, [pc, #36]	@ (24050848 <update_ball+0x140>)
24050824:	681b      	ldr	r3, [r3, #0]
24050826:	b29b      	uxth	r3, r3
24050828:	3308      	adds	r3, #8
2405082a:	b29a      	uxth	r2, r3
2405082c:	4b0f      	ldr	r3, [pc, #60]	@ (2405086c <update_ball+0x164>)
2405082e:	801a      	strh	r2, [r3, #0]
	ball4.y = ball_y + 8;
24050830:	4b07      	ldr	r3, [pc, #28]	@ (24050850 <update_ball+0x148>)
24050832:	681b      	ldr	r3, [r3, #0]
24050834:	b29b      	uxth	r3, r3
24050836:	3308      	adds	r3, #8
24050838:	b29a      	uxth	r2, r3
2405083a:	4b0c      	ldr	r3, [pc, #48]	@ (2405086c <update_ball+0x164>)
2405083c:	805a      	strh	r2, [r3, #2]
}
2405083e:	bf00      	nop
24050840:	3708      	adds	r7, #8
24050842:	46bd      	mov	sp, r7
24050844:	bd80      	pop	{r7, pc}
24050846:	bf00      	nop
24050848:	20000068 	.word	0x20000068
2405084c:	20000180 	.word	0x20000180
24050850:	2000006c 	.word	0x2000006c
24050854:	200001e4 	.word	0x200001e4
24050858:	20000190 	.word	0x20000190
2405085c:	200001e8 	.word	0x200001e8
24050860:	200001a0 	.word	0x200001a0
24050864:	200001b0 	.word	0x200001b0
24050868:	200001c0 	.word	0x200001c0
2405086c:	200001d0 	.word	0x200001d0

24050870 <update_ai>:

static void update_ai() {
24050870:	b480      	push	{r7}
24050872:	b083      	sub	sp, #12
24050874:	af00      	add	r7, sp, #0
	if (ball_xspeed < 0 || ball_x < offset_x) {
24050876:	4b38      	ldr	r3, [pc, #224]	@ (24050958 <update_ai+0xe8>)
24050878:	681b      	ldr	r3, [r3, #0]
2405087a:	2b00      	cmp	r3, #0
2405087c:	db05      	blt.n	2405088a <update_ai+0x1a>
2405087e:	4b37      	ldr	r3, [pc, #220]	@ (2405095c <update_ai+0xec>)
24050880:	681a      	ldr	r2, [r3, #0]
24050882:	4b37      	ldr	r3, [pc, #220]	@ (24050960 <update_ai+0xf0>)
24050884:	681b      	ldr	r3, [r3, #0]
24050886:	429a      	cmp	r2, r3
24050888:	da1b      	bge.n	240508c2 <update_ai+0x52>
		if (paddle2.y < 108) {
2405088a:	4b36      	ldr	r3, [pc, #216]	@ (24050964 <update_ai+0xf4>)
2405088c:	885b      	ldrh	r3, [r3, #2]
2405088e:	2b6b      	cmp	r3, #107	@ 0x6b
24050890:	d809      	bhi.n	240508a6 <update_ai+0x36>
			paddle2.y = paddle2.y + p2_speed;
24050892:	4b34      	ldr	r3, [pc, #208]	@ (24050964 <update_ai+0xf4>)
24050894:	885a      	ldrh	r2, [r3, #2]
24050896:	4b34      	ldr	r3, [pc, #208]	@ (24050968 <update_ai+0xf8>)
24050898:	681b      	ldr	r3, [r3, #0]
2405089a:	b29b      	uxth	r3, r3
2405089c:	4413      	add	r3, r2
2405089e:	b29a      	uxth	r2, r3
240508a0:	4b30      	ldr	r3, [pc, #192]	@ (24050964 <update_ai+0xf4>)
240508a2:	805a      	strh	r2, [r3, #2]
		} else if (paddle2.y > 112) {
			paddle2.y = paddle2.y - p2_speed;
		}
		return;
240508a4:	e052      	b.n	2405094c <update_ai+0xdc>
		} else if (paddle2.y > 112) {
240508a6:	4b2f      	ldr	r3, [pc, #188]	@ (24050964 <update_ai+0xf4>)
240508a8:	885b      	ldrh	r3, [r3, #2]
240508aa:	2b70      	cmp	r3, #112	@ 0x70
240508ac:	d94e      	bls.n	2405094c <update_ai+0xdc>
			paddle2.y = paddle2.y - p2_speed;
240508ae:	4b2d      	ldr	r3, [pc, #180]	@ (24050964 <update_ai+0xf4>)
240508b0:	885a      	ldrh	r2, [r3, #2]
240508b2:	4b2d      	ldr	r3, [pc, #180]	@ (24050968 <update_ai+0xf8>)
240508b4:	681b      	ldr	r3, [r3, #0]
240508b6:	b29b      	uxth	r3, r3
240508b8:	1ad3      	subs	r3, r2, r3
240508ba:	b29a      	uxth	r2, r3
240508bc:	4b29      	ldr	r3, [pc, #164]	@ (24050964 <update_ai+0xf4>)
240508be:	805a      	strh	r2, [r3, #2]
		return;
240508c0:	e044      	b.n	2405094c <update_ai+0xdc>
	}
	int offset = 0;
240508c2:	2300      	movs	r3, #0
240508c4:	607b      	str	r3, [r7, #4]
	if (ball_yspeed > 0) {
240508c6:	4b29      	ldr	r3, [pc, #164]	@ (2405096c <update_ai+0xfc>)
240508c8:	681b      	ldr	r3, [r3, #0]
240508ca:	2b00      	cmp	r3, #0
240508cc:	dd05      	ble.n	240508da <update_ai+0x6a>
		//offset = 10;
		offset = 40 - offset_y;
240508ce:	4b28      	ldr	r3, [pc, #160]	@ (24050970 <update_ai+0x100>)
240508d0:	681b      	ldr	r3, [r3, #0]
240508d2:	f1c3 0328 	rsb	r3, r3, #40	@ 0x28
240508d6:	607b      	str	r3, [r7, #4]
240508d8:	e002      	b.n	240508e0 <update_ai+0x70>
	} else {
		//offset = 30;
		offset = offset_y;
240508da:	4b25      	ldr	r3, [pc, #148]	@ (24050970 <update_ai+0x100>)
240508dc:	681b      	ldr	r3, [r3, #0]
240508de:	607b      	str	r3, [r7, #4]
	}
	if ((ball_y + 8) < (paddle2.y + offset)) {
240508e0:	4b24      	ldr	r3, [pc, #144]	@ (24050974 <update_ai+0x104>)
240508e2:	681b      	ldr	r3, [r3, #0]
240508e4:	f103 0208 	add.w	r2, r3, #8
240508e8:	4b1e      	ldr	r3, [pc, #120]	@ (24050964 <update_ai+0xf4>)
240508ea:	885b      	ldrh	r3, [r3, #2]
240508ec:	4619      	mov	r1, r3
240508ee:	687b      	ldr	r3, [r7, #4]
240508f0:	440b      	add	r3, r1
240508f2:	429a      	cmp	r2, r3
240508f4:	da0f      	bge.n	24050916 <update_ai+0xa6>
		paddle2.y = paddle2.y - p2_speed;
240508f6:	4b1b      	ldr	r3, [pc, #108]	@ (24050964 <update_ai+0xf4>)
240508f8:	885a      	ldrh	r2, [r3, #2]
240508fa:	4b1b      	ldr	r3, [pc, #108]	@ (24050968 <update_ai+0xf8>)
240508fc:	681b      	ldr	r3, [r3, #0]
240508fe:	b29b      	uxth	r3, r3
24050900:	1ad3      	subs	r3, r2, r3
24050902:	b29a      	uxth	r2, r3
24050904:	4b17      	ldr	r3, [pc, #92]	@ (24050964 <update_ai+0xf4>)
24050906:	805a      	strh	r2, [r3, #2]
		if (paddle2.y < 22) {
24050908:	4b16      	ldr	r3, [pc, #88]	@ (24050964 <update_ai+0xf4>)
2405090a:	885b      	ldrh	r3, [r3, #2]
2405090c:	2b15      	cmp	r3, #21
2405090e:	d802      	bhi.n	24050916 <update_ai+0xa6>
			paddle2.y = 22;
24050910:	4b14      	ldr	r3, [pc, #80]	@ (24050964 <update_ai+0xf4>)
24050912:	2216      	movs	r2, #22
24050914:	805a      	strh	r2, [r3, #2]
		}
	}
	if ((ball_y + 8) > (paddle2.y + offset)) {
24050916:	4b17      	ldr	r3, [pc, #92]	@ (24050974 <update_ai+0x104>)
24050918:	681b      	ldr	r3, [r3, #0]
2405091a:	1dda      	adds	r2, r3, #7
2405091c:	4b11      	ldr	r3, [pc, #68]	@ (24050964 <update_ai+0xf4>)
2405091e:	885b      	ldrh	r3, [r3, #2]
24050920:	4619      	mov	r1, r3
24050922:	687b      	ldr	r3, [r7, #4]
24050924:	440b      	add	r3, r1
24050926:	429a      	cmp	r2, r3
24050928:	db11      	blt.n	2405094e <update_ai+0xde>
		paddle2.y = paddle2.y + p2_speed;
2405092a:	4b0e      	ldr	r3, [pc, #56]	@ (24050964 <update_ai+0xf4>)
2405092c:	885a      	ldrh	r2, [r3, #2]
2405092e:	4b0e      	ldr	r3, [pc, #56]	@ (24050968 <update_ai+0xf8>)
24050930:	681b      	ldr	r3, [r3, #0]
24050932:	b29b      	uxth	r3, r3
24050934:	4413      	add	r3, r2
24050936:	b29a      	uxth	r2, r3
24050938:	4b0a      	ldr	r3, [pc, #40]	@ (24050964 <update_ai+0xf4>)
2405093a:	805a      	strh	r2, [r3, #2]
		if (paddle2.y > 198) {
2405093c:	4b09      	ldr	r3, [pc, #36]	@ (24050964 <update_ai+0xf4>)
2405093e:	885b      	ldrh	r3, [r3, #2]
24050940:	2bc6      	cmp	r3, #198	@ 0xc6
24050942:	d904      	bls.n	2405094e <update_ai+0xde>
			paddle2.y = 198;
24050944:	4b07      	ldr	r3, [pc, #28]	@ (24050964 <update_ai+0xf4>)
24050946:	22c6      	movs	r2, #198	@ 0xc6
24050948:	805a      	strh	r2, [r3, #2]
2405094a:	e000      	b.n	2405094e <update_ai+0xde>
		return;
2405094c:	bf00      	nop
		}
	}
}
2405094e:	370c      	adds	r7, #12
24050950:	46bd      	mov	sp, r7
24050952:	f85d 7b04 	ldr.w	r7, [sp], #4
24050956:	4770      	bx	lr
24050958:	200001e4 	.word	0x200001e4
2405095c:	20000068 	.word	0x20000068
24050960:	200001f0 	.word	0x200001f0
24050964:	20000190 	.word	0x20000190
24050968:	20000064 	.word	0x20000064
2405096c:	200001e8 	.word	0x200001e8
24050970:	200001f4 	.word	0x200001f4
24050974:	2000006c 	.word	0x2000006c

24050978 <update_ai_demo>:

static void update_ai_demo() {
24050978:	b480      	push	{r7}
2405097a:	af00      	add	r7, sp, #0
	if (ball_xspeed < 0 || ball_x < 220) {
2405097c:	4b26      	ldr	r3, [pc, #152]	@ (24050a18 <update_ai_demo+0xa0>)
2405097e:	681b      	ldr	r3, [r3, #0]
24050980:	2b00      	cmp	r3, #0
24050982:	db03      	blt.n	2405098c <update_ai_demo+0x14>
24050984:	4b25      	ldr	r3, [pc, #148]	@ (24050a1c <update_ai_demo+0xa4>)
24050986:	681b      	ldr	r3, [r3, #0]
24050988:	2bdb      	cmp	r3, #219	@ 0xdb
2405098a:	dc15      	bgt.n	240509b8 <update_ai_demo+0x40>
		if (paddle2.y < 108) {
2405098c:	4b24      	ldr	r3, [pc, #144]	@ (24050a20 <update_ai_demo+0xa8>)
2405098e:	885b      	ldrh	r3, [r3, #2]
24050990:	2b6b      	cmp	r3, #107	@ 0x6b
24050992:	d806      	bhi.n	240509a2 <update_ai_demo+0x2a>
			paddle2.y = paddle2.y + 3;
24050994:	4b22      	ldr	r3, [pc, #136]	@ (24050a20 <update_ai_demo+0xa8>)
24050996:	885b      	ldrh	r3, [r3, #2]
24050998:	3303      	adds	r3, #3
2405099a:	b29a      	uxth	r2, r3
2405099c:	4b20      	ldr	r3, [pc, #128]	@ (24050a20 <update_ai_demo+0xa8>)
2405099e:	805a      	strh	r2, [r3, #2]
		} else if (paddle2.y > 112) {
			paddle2.y = paddle2.y - 3;
		}
		return;
240509a0:	e035      	b.n	24050a0e <update_ai_demo+0x96>
		} else if (paddle2.y > 112) {
240509a2:	4b1f      	ldr	r3, [pc, #124]	@ (24050a20 <update_ai_demo+0xa8>)
240509a4:	885b      	ldrh	r3, [r3, #2]
240509a6:	2b70      	cmp	r3, #112	@ 0x70
240509a8:	d931      	bls.n	24050a0e <update_ai_demo+0x96>
			paddle2.y = paddle2.y - 3;
240509aa:	4b1d      	ldr	r3, [pc, #116]	@ (24050a20 <update_ai_demo+0xa8>)
240509ac:	885b      	ldrh	r3, [r3, #2]
240509ae:	3b03      	subs	r3, #3
240509b0:	b29a      	uxth	r2, r3
240509b2:	4b1b      	ldr	r3, [pc, #108]	@ (24050a20 <update_ai_demo+0xa8>)
240509b4:	805a      	strh	r2, [r3, #2]
		return;
240509b6:	e02a      	b.n	24050a0e <update_ai_demo+0x96>
	}
	if ((ball_y + 8) < (paddle2.y + 20)) {
240509b8:	4b19      	ldr	r3, [pc, #100]	@ (24050a20 <update_ai_demo+0xa8>)
240509ba:	885b      	ldrh	r3, [r3, #2]
240509bc:	f103 020b 	add.w	r2, r3, #11
240509c0:	4b18      	ldr	r3, [pc, #96]	@ (24050a24 <update_ai_demo+0xac>)
240509c2:	681b      	ldr	r3, [r3, #0]
240509c4:	429a      	cmp	r2, r3
240509c6:	db0c      	blt.n	240509e2 <update_ai_demo+0x6a>
		paddle2.y = paddle2.y - 3;
240509c8:	4b15      	ldr	r3, [pc, #84]	@ (24050a20 <update_ai_demo+0xa8>)
240509ca:	885b      	ldrh	r3, [r3, #2]
240509cc:	3b03      	subs	r3, #3
240509ce:	b29a      	uxth	r2, r3
240509d0:	4b13      	ldr	r3, [pc, #76]	@ (24050a20 <update_ai_demo+0xa8>)
240509d2:	805a      	strh	r2, [r3, #2]
		if (paddle2.y < 22) {
240509d4:	4b12      	ldr	r3, [pc, #72]	@ (24050a20 <update_ai_demo+0xa8>)
240509d6:	885b      	ldrh	r3, [r3, #2]
240509d8:	2b15      	cmp	r3, #21
240509da:	d802      	bhi.n	240509e2 <update_ai_demo+0x6a>
			paddle2.y = 22;
240509dc:	4b10      	ldr	r3, [pc, #64]	@ (24050a20 <update_ai_demo+0xa8>)
240509de:	2216      	movs	r2, #22
240509e0:	805a      	strh	r2, [r3, #2]
		}
	}
	if ((ball_y + 8) > (paddle2.y + 20)) {
240509e2:	4b0f      	ldr	r3, [pc, #60]	@ (24050a20 <update_ai_demo+0xa8>)
240509e4:	885b      	ldrh	r3, [r3, #2]
240509e6:	f103 020c 	add.w	r2, r3, #12
240509ea:	4b0e      	ldr	r3, [pc, #56]	@ (24050a24 <update_ai_demo+0xac>)
240509ec:	681b      	ldr	r3, [r3, #0]
240509ee:	429a      	cmp	r2, r3
240509f0:	da0e      	bge.n	24050a10 <update_ai_demo+0x98>
		paddle2.y = paddle2.y + 3;
240509f2:	4b0b      	ldr	r3, [pc, #44]	@ (24050a20 <update_ai_demo+0xa8>)
240509f4:	885b      	ldrh	r3, [r3, #2]
240509f6:	3303      	adds	r3, #3
240509f8:	b29a      	uxth	r2, r3
240509fa:	4b09      	ldr	r3, [pc, #36]	@ (24050a20 <update_ai_demo+0xa8>)
240509fc:	805a      	strh	r2, [r3, #2]
		if (paddle2.y > 198) {
240509fe:	4b08      	ldr	r3, [pc, #32]	@ (24050a20 <update_ai_demo+0xa8>)
24050a00:	885b      	ldrh	r3, [r3, #2]
24050a02:	2bc6      	cmp	r3, #198	@ 0xc6
24050a04:	d904      	bls.n	24050a10 <update_ai_demo+0x98>
			paddle2.y = 198;
24050a06:	4b06      	ldr	r3, [pc, #24]	@ (24050a20 <update_ai_demo+0xa8>)
24050a08:	22c6      	movs	r2, #198	@ 0xc6
24050a0a:	805a      	strh	r2, [r3, #2]
24050a0c:	e000      	b.n	24050a10 <update_ai_demo+0x98>
		return;
24050a0e:	bf00      	nop
		}
	}
}
24050a10:	46bd      	mov	sp, r7
24050a12:	f85d 7b04 	ldr.w	r7, [sp], #4
24050a16:	4770      	bx	lr
24050a18:	200001e4 	.word	0x200001e4
24050a1c:	20000068 	.word	0x20000068
24050a20:	20000190 	.word	0x20000190
24050a24:	2000006c 	.word	0x2000006c

24050a28 <update_score>:

static void update_score(int score) {
24050a28:	b580      	push	{r7, lr}
24050a2a:	b082      	sub	sp, #8
24050a2c:	af00      	add	r7, sp, #0
24050a2e:	6078      	str	r0, [r7, #4]
	lcd_sync();
24050a30:	f003 fa42 	bl	24053eb8 <lcd_sync>
	if (score == 1) {
24050a34:	687b      	ldr	r3, [r7, #4]
24050a36:	2b01      	cmp	r3, #1
24050a38:	d104      	bne.n	24050a44 <update_score+0x1c>
		score_p1++;
24050a3a:	4b28      	ldr	r3, [pc, #160]	@ (24050adc <update_score+0xb4>)
24050a3c:	681b      	ldr	r3, [r3, #0]
24050a3e:	3301      	adds	r3, #1
24050a40:	4a26      	ldr	r2, [pc, #152]	@ (24050adc <update_score+0xb4>)
24050a42:	6013      	str	r3, [r2, #0]
	}
	if (score == -1) {
24050a44:	687b      	ldr	r3, [r7, #4]
24050a46:	f1b3 3fff 	cmp.w	r3, #4294967295
24050a4a:	d104      	bne.n	24050a56 <update_score+0x2e>
		score_p2++;
24050a4c:	4b24      	ldr	r3, [pc, #144]	@ (24050ae0 <update_score+0xb8>)
24050a4e:	681b      	ldr	r3, [r3, #0]
24050a50:	3301      	adds	r3, #1
24050a52:	4a23      	ldr	r2, [pc, #140]	@ (24050ae0 <update_score+0xb8>)
24050a54:	6013      	str	r3, [r2, #0]
	}
	HAL_Delay(500);
24050a56:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
24050a5a:	f006 f81d 	bl	24056a98 <HAL_Delay>
	dir = 0;
24050a5e:	4b21      	ldr	r3, [pc, #132]	@ (24050ae4 <update_score+0xbc>)
24050a60:	2200      	movs	r2, #0
24050a62:	701a      	strb	r2, [r3, #0]
	ball_xspeed = 1;
24050a64:	4b20      	ldr	r3, [pc, #128]	@ (24050ae8 <update_score+0xc0>)
24050a66:	2201      	movs	r2, #1
24050a68:	601a      	str	r2, [r3, #0]
	ball_yspeed = randsing();
24050a6a:	f013 fc2b 	bl	240642c4 <rand>
24050a6e:	4603      	mov	r3, r0
24050a70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
24050a74:	db02      	blt.n	24050a7c <update_score+0x54>
24050a76:	f04f 33ff 	mov.w	r3, #4294967295
24050a7a:	e000      	b.n	24050a7e <update_score+0x56>
24050a7c:	2301      	movs	r3, #1
24050a7e:	4a1b      	ldr	r2, [pc, #108]	@ (24050aec <update_score+0xc4>)
24050a80:	6013      	str	r3, [r2, #0]
	ball_x = randint(30, 50);
24050a82:	f013 fc1f 	bl	240642c4 <rand>
24050a86:	4601      	mov	r1, r0
24050a88:	4b19      	ldr	r3, [pc, #100]	@ (24050af0 <update_score+0xc8>)
24050a8a:	fb83 2301 	smull	r2, r3, r3, r1
24050a8e:	109a      	asrs	r2, r3, #2
24050a90:	17cb      	asrs	r3, r1, #31
24050a92:	1ad2      	subs	r2, r2, r3
24050a94:	4613      	mov	r3, r2
24050a96:	005b      	lsls	r3, r3, #1
24050a98:	4413      	add	r3, r2
24050a9a:	00da      	lsls	r2, r3, #3
24050a9c:	1ad2      	subs	r2, r2, r3
24050a9e:	1a8a      	subs	r2, r1, r2
24050aa0:	f102 031e 	add.w	r3, r2, #30
24050aa4:	4a13      	ldr	r2, [pc, #76]	@ (24050af4 <update_score+0xcc>)
24050aa6:	6013      	str	r3, [r2, #0]
	ball_y = randint(100, 140);
24050aa8:	f013 fc0c 	bl	240642c4 <rand>
24050aac:	4601      	mov	r1, r0
24050aae:	4b12      	ldr	r3, [pc, #72]	@ (24050af8 <update_score+0xd0>)
24050ab0:	fb83 2301 	smull	r2, r3, r3, r1
24050ab4:	111a      	asrs	r2, r3, #4
24050ab6:	17cb      	asrs	r3, r1, #31
24050ab8:	1ad2      	subs	r2, r2, r3
24050aba:	4613      	mov	r3, r2
24050abc:	009b      	lsls	r3, r3, #2
24050abe:	4413      	add	r3, r2
24050ac0:	00db      	lsls	r3, r3, #3
24050ac2:	4413      	add	r3, r2
24050ac4:	1aca      	subs	r2, r1, r3
24050ac6:	f102 0364 	add.w	r3, r2, #100	@ 0x64
24050aca:	4a0c      	ldr	r2, [pc, #48]	@ (24050afc <update_score+0xd4>)
24050acc:	6013      	str	r3, [r2, #0]
	paddle2.y = 115;
24050ace:	4b0c      	ldr	r3, [pc, #48]	@ (24050b00 <update_score+0xd8>)
24050ad0:	2273      	movs	r2, #115	@ 0x73
24050ad2:	805a      	strh	r2, [r3, #2]
}
24050ad4:	bf00      	nop
24050ad6:	3708      	adds	r7, #8
24050ad8:	46bd      	mov	sp, r7
24050ada:	bd80      	pop	{r7, pc}
24050adc:	20000168 	.word	0x20000168
24050ae0:	2000016c 	.word	0x2000016c
24050ae4:	200001ec 	.word	0x200001ec
24050ae8:	200001e4 	.word	0x200001e4
24050aec:	200001e8 	.word	0x200001e8
24050af0:	30c30c31 	.word	0x30c30c31
24050af4:	20000068 	.word	0x20000068
24050af8:	63e7063f 	.word	0x63e7063f
24050afc:	2000006c 	.word	0x2000006c
24050b00:	20000190 	.word	0x20000190

24050b04 <game_over_init>:
static int ticks = 0;
static int action_delay = 0;
static uint8_t selected_item = 0;
int winner;

void game_over_init(int player_won) {
24050b04:	b580      	push	{r7, lr}
24050b06:	b082      	sub	sp, #8
24050b08:	af00      	add	r7, sp, #0
24050b0a:	6078      	str	r0, [r7, #4]
	winner = player_won;
24050b0c:	4a11      	ldr	r2, [pc, #68]	@ (24050b54 <game_over_init+0x50>)
24050b0e:	687b      	ldr	r3, [r7, #4]
24050b10:	6013      	str	r3, [r2, #0]
	game_over_menu = 1;
24050b12:	4b11      	ldr	r3, [pc, #68]	@ (24050b58 <game_over_init+0x54>)
24050b14:	2201      	movs	r2, #1
24050b16:	601a      	str	r2, [r3, #0]
	selected_item = 0;
24050b18:	4b10      	ldr	r3, [pc, #64]	@ (24050b5c <game_over_init+0x58>)
24050b1a:	2200      	movs	r2, #0
24050b1c:	701a      	strb	r2, [r3, #0]
	action_delay = 15;
24050b1e:	4b10      	ldr	r3, [pc, #64]	@ (24050b60 <game_over_init+0x5c>)
24050b20:	220f      	movs	r2, #15
24050b22:	601a      	str	r2, [r3, #0]
	LCD_SetTextColor(LCD_COLOR_WHITE);
24050b24:	f64f 70ff 	movw	r0, #65535	@ 0xffff
24050b28:	f000 fb3a 	bl	240511a0 <LCD_SetTextColor>
	LCD_SetFont(&Font24);
24050b2c:	480d      	ldr	r0, [pc, #52]	@ (24050b64 <game_over_init+0x60>)
24050b2e:	f000 fb57 	bl	240511e0 <LCD_SetFont>
	LCD_SetFontScale(1);
24050b32:	2001      	movs	r0, #1
24050b34:	f000 fb64 	bl	24051200 <LCD_SetFontScale>
	while (game_over_menu) {
24050b38:	e001      	b.n	24050b3e <game_over_init+0x3a>
		game_over_loop();
24050b3a:	f000 f815 	bl	24050b68 <game_over_loop>
	while (game_over_menu) {
24050b3e:	4b06      	ldr	r3, [pc, #24]	@ (24050b58 <game_over_init+0x54>)
24050b40:	681b      	ldr	r3, [r3, #0]
24050b42:	2b00      	cmp	r3, #0
24050b44:	d1f9      	bne.n	24050b3a <game_over_init+0x36>
	}
	menu_select();
24050b46:	f000 f93d 	bl	24050dc4 <menu_select>
}
24050b4a:	bf00      	nop
24050b4c:	3708      	adds	r7, #8
24050b4e:	46bd      	mov	sp, r7
24050b50:	bd80      	pop	{r7, pc}
24050b52:	bf00      	nop
24050b54:	20000210 	.word	0x20000210
24050b58:	20000070 	.word	0x20000070
24050b5c:	2000020c 	.word	0x2000020c
24050b60:	20000208 	.word	0x20000208
24050b64:	20000018 	.word	0x20000018

24050b68 <game_over_loop>:

static void game_over_loop() {
24050b68:	b580      	push	{r7, lr}
24050b6a:	b082      	sub	sp, #8
24050b6c:	af00      	add	r7, sp, #0
	uint16_t *fb = lcd_get_active_buffer();
24050b6e:	f003 f9bb 	bl	24053ee8 <lcd_get_active_buffer>
24050b72:	6078      	str	r0, [r7, #4]
	draw_background(fb);
24050b74:	6878      	ldr	r0, [r7, #4]
24050b76:	f000 f861 	bl	24050c3c <draw_background>

	process_input();
24050b7a:	f000 f80b 	bl	24050b94 <process_input>
	update();
24050b7e:	f000 f84f 	bl	24050c20 <update>

	lcd_swap();
24050b82:	f003 f983 	bl	24053e8c <lcd_swap>
	lcd_wait_for_vblank();
24050b86:	f003 f9db 	bl	24053f40 <lcd_wait_for_vblank>
}
24050b8a:	bf00      	nop
24050b8c:	3708      	adds	r7, #8
24050b8e:	46bd      	mov	sp, r7
24050b90:	bd80      	pop	{r7, pc}
	...

24050b94 <process_input>:

static void process_input() {
24050b94:	b580      	push	{r7, lr}
24050b96:	b082      	sub	sp, #8
24050b98:	af00      	add	r7, sp, #0
	uint32_t buttons = buttons_get();
24050b9a:	f002 fadb 	bl	24053154 <buttons_get>
24050b9e:	6078      	str	r0, [r7, #4]
	if (buttons & B_POWER) {
24050ba0:	687b      	ldr	r3, [r7, #4]
24050ba2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
24050ba6:	2b00      	cmp	r3, #0
24050ba8:	d001      	beq.n	24050bae <process_input+0x1a>
		HAL_NVIC_SystemReset();
24050baa:	f007 ffce 	bl	24058b4a <HAL_NVIC_SystemReset>
	}
	if (action_delay <= 0) {
24050bae:	4b19      	ldr	r3, [pc, #100]	@ (24050c14 <process_input+0x80>)
24050bb0:	681b      	ldr	r3, [r3, #0]
24050bb2:	2b00      	cmp	r3, #0
24050bb4:	dc24      	bgt.n	24050c00 <process_input+0x6c>
		if (buttons & B_Up) {
24050bb6:	687b      	ldr	r3, [r7, #4]
24050bb8:	f003 0302 	and.w	r3, r3, #2
24050bbc:	2b00      	cmp	r3, #0
24050bbe:	d008      	beq.n	24050bd2 <process_input+0x3e>
			selected_item--;
24050bc0:	4b15      	ldr	r3, [pc, #84]	@ (24050c18 <process_input+0x84>)
24050bc2:	781b      	ldrb	r3, [r3, #0]
24050bc4:	3b01      	subs	r3, #1
24050bc6:	b2da      	uxtb	r2, r3
24050bc8:	4b13      	ldr	r3, [pc, #76]	@ (24050c18 <process_input+0x84>)
24050bca:	701a      	strb	r2, [r3, #0]
			action_delay = 15;
24050bcc:	4b11      	ldr	r3, [pc, #68]	@ (24050c14 <process_input+0x80>)
24050bce:	220f      	movs	r2, #15
24050bd0:	601a      	str	r2, [r3, #0]
		}
		if (buttons & B_Down) {
24050bd2:	687b      	ldr	r3, [r7, #4]
24050bd4:	f003 0308 	and.w	r3, r3, #8
24050bd8:	2b00      	cmp	r3, #0
24050bda:	d008      	beq.n	24050bee <process_input+0x5a>
			selected_item++;
24050bdc:	4b0e      	ldr	r3, [pc, #56]	@ (24050c18 <process_input+0x84>)
24050bde:	781b      	ldrb	r3, [r3, #0]
24050be0:	3301      	adds	r3, #1
24050be2:	b2da      	uxtb	r2, r3
24050be4:	4b0c      	ldr	r3, [pc, #48]	@ (24050c18 <process_input+0x84>)
24050be6:	701a      	strb	r2, [r3, #0]
			action_delay = 15;
24050be8:	4b0a      	ldr	r3, [pc, #40]	@ (24050c14 <process_input+0x80>)
24050bea:	220f      	movs	r2, #15
24050bec:	601a      	str	r2, [r3, #0]
		}
		if (buttons & B_A) {
24050bee:	687b      	ldr	r3, [r7, #4]
24050bf0:	f003 0310 	and.w	r3, r3, #16
24050bf4:	2b00      	cmp	r3, #0
24050bf6:	d008      	beq.n	24050c0a <process_input+0x76>
			game_over_menu = 0;
24050bf8:	4b08      	ldr	r3, [pc, #32]	@ (24050c1c <process_input+0x88>)
24050bfa:	2200      	movs	r2, #0
24050bfc:	601a      	str	r2, [r3, #0]
		}
	} else {
		action_delay--;
	}
}
24050bfe:	e004      	b.n	24050c0a <process_input+0x76>
		action_delay--;
24050c00:	4b04      	ldr	r3, [pc, #16]	@ (24050c14 <process_input+0x80>)
24050c02:	681b      	ldr	r3, [r3, #0]
24050c04:	3b01      	subs	r3, #1
24050c06:	4a03      	ldr	r2, [pc, #12]	@ (24050c14 <process_input+0x80>)
24050c08:	6013      	str	r3, [r2, #0]
}
24050c0a:	bf00      	nop
24050c0c:	3708      	adds	r7, #8
24050c0e:	46bd      	mov	sp, r7
24050c10:	bd80      	pop	{r7, pc}
24050c12:	bf00      	nop
24050c14:	20000208 	.word	0x20000208
24050c18:	2000020c 	.word	0x2000020c
24050c1c:	20000070 	.word	0x20000070

24050c20 <update>:
static void update() {
24050c20:	b480      	push	{r7}
24050c22:	af00      	add	r7, sp, #0
	ticks++;
24050c24:	4b04      	ldr	r3, [pc, #16]	@ (24050c38 <update+0x18>)
24050c26:	681b      	ldr	r3, [r3, #0]
24050c28:	3301      	adds	r3, #1
24050c2a:	4a03      	ldr	r2, [pc, #12]	@ (24050c38 <update+0x18>)
24050c2c:	6013      	str	r3, [r2, #0]
}
24050c2e:	bf00      	nop
24050c30:	46bd      	mov	sp, r7
24050c32:	f85d 7b04 	ldr.w	r7, [sp], #4
24050c36:	4770      	bx	lr
24050c38:	20000204 	.word	0x20000204

24050c3c <draw_background>:

static void draw_background(uint16_t *buf) {
24050c3c:	b580      	push	{r7, lr}
24050c3e:	b084      	sub	sp, #16
24050c40:	af02      	add	r7, sp, #8
24050c42:	6078      	str	r0, [r7, #4]
	LCD_SetBackColor(LCD_COLOR_GRAY);
24050c44:	f248 4010 	movw	r0, #33808	@ 0x8410
24050c48:	f000 faba 	bl	240511c0 <LCD_SetBackColor>
	LCD_FillCircle(buf, 80, 70, 3, LCD_COLOR_WHITE);
24050c4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
24050c50:	9300      	str	r3, [sp, #0]
24050c52:	2303      	movs	r3, #3
24050c54:	2246      	movs	r2, #70	@ 0x46
24050c56:	2150      	movs	r1, #80	@ 0x50
24050c58:	6878      	ldr	r0, [r7, #4]
24050c5a:	f000 fe26 	bl	240518aa <LCD_FillCircle>
	LCD_FillCircle(buf, 239, 70, 3, LCD_COLOR_WHITE);
24050c5e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
24050c62:	9300      	str	r3, [sp, #0]
24050c64:	2303      	movs	r3, #3
24050c66:	2246      	movs	r2, #70	@ 0x46
24050c68:	21ef      	movs	r1, #239	@ 0xef
24050c6a:	6878      	ldr	r0, [r7, #4]
24050c6c:	f000 fe1d 	bl	240518aa <LCD_FillCircle>
	LCD_FillCircle(buf, 80, 169, 3, LCD_COLOR_WHITE);
24050c70:	f64f 73ff 	movw	r3, #65535	@ 0xffff
24050c74:	9300      	str	r3, [sp, #0]
24050c76:	2303      	movs	r3, #3
24050c78:	22a9      	movs	r2, #169	@ 0xa9
24050c7a:	2150      	movs	r1, #80	@ 0x50
24050c7c:	6878      	ldr	r0, [r7, #4]
24050c7e:	f000 fe14 	bl	240518aa <LCD_FillCircle>
	LCD_FillCircle(buf, 239, 169, 3, LCD_COLOR_WHITE);
24050c82:	f64f 73ff 	movw	r3, #65535	@ 0xffff
24050c86:	9300      	str	r3, [sp, #0]
24050c88:	2303      	movs	r3, #3
24050c8a:	22a9      	movs	r2, #169	@ 0xa9
24050c8c:	21ef      	movs	r1, #239	@ 0xef
24050c8e:	6878      	ldr	r0, [r7, #4]
24050c90:	f000 fe0b 	bl	240518aa <LCD_FillCircle>

	LCD_FillRect(buf, 77, 70, 3, 100, LCD_COLOR_WHITE);
24050c94:	f64f 73ff 	movw	r3, #65535	@ 0xffff
24050c98:	9301      	str	r3, [sp, #4]
24050c9a:	2364      	movs	r3, #100	@ 0x64
24050c9c:	9300      	str	r3, [sp, #0]
24050c9e:	2303      	movs	r3, #3
24050ca0:	2246      	movs	r2, #70	@ 0x46
24050ca2:	214d      	movs	r1, #77	@ 0x4d
24050ca4:	6878      	ldr	r0, [r7, #4]
24050ca6:	f000 fdcf 	bl	24051848 <LCD_FillRect>
	LCD_FillRect(buf, 240, 70, 3, 100, LCD_COLOR_WHITE);
24050caa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
24050cae:	9301      	str	r3, [sp, #4]
24050cb0:	2364      	movs	r3, #100	@ 0x64
24050cb2:	9300      	str	r3, [sp, #0]
24050cb4:	2303      	movs	r3, #3
24050cb6:	2246      	movs	r2, #70	@ 0x46
24050cb8:	21f0      	movs	r1, #240	@ 0xf0
24050cba:	6878      	ldr	r0, [r7, #4]
24050cbc:	f000 fdc4 	bl	24051848 <LCD_FillRect>
	LCD_FillRect(buf, 80, 67, 160, 3, LCD_COLOR_WHITE);
24050cc0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
24050cc4:	9301      	str	r3, [sp, #4]
24050cc6:	2303      	movs	r3, #3
24050cc8:	9300      	str	r3, [sp, #0]
24050cca:	23a0      	movs	r3, #160	@ 0xa0
24050ccc:	2243      	movs	r2, #67	@ 0x43
24050cce:	2150      	movs	r1, #80	@ 0x50
24050cd0:	6878      	ldr	r0, [r7, #4]
24050cd2:	f000 fdb9 	bl	24051848 <LCD_FillRect>
	LCD_FillRect(buf, 80, 170, 160, 3, LCD_COLOR_WHITE);
24050cd6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
24050cda:	9301      	str	r3, [sp, #4]
24050cdc:	2303      	movs	r3, #3
24050cde:	9300      	str	r3, [sp, #0]
24050ce0:	23a0      	movs	r3, #160	@ 0xa0
24050ce2:	22aa      	movs	r2, #170	@ 0xaa
24050ce4:	2150      	movs	r1, #80	@ 0x50
24050ce6:	6878      	ldr	r0, [r7, #4]
24050ce8:	f000 fdae 	bl	24051848 <LCD_FillRect>

	LCD_FillRect(buf, 80, 70, 160, 100, LCD_COLOR_GRAY);
24050cec:	f248 4310 	movw	r3, #33808	@ 0x8410
24050cf0:	9301      	str	r3, [sp, #4]
24050cf2:	2364      	movs	r3, #100	@ 0x64
24050cf4:	9300      	str	r3, [sp, #0]
24050cf6:	23a0      	movs	r3, #160	@ 0xa0
24050cf8:	2246      	movs	r2, #70	@ 0x46
24050cfa:	2150      	movs	r1, #80	@ 0x50
24050cfc:	6878      	ldr	r0, [r7, #4]
24050cfe:	f000 fda3 	bl	24051848 <LCD_FillRect>

	LCD_SetTextColor(LCD_COLOR_DARKRED);
24050d02:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
24050d06:	f000 fa4b 	bl	240511a0 <LCD_SetTextColor>
	if (winner == 1) {
24050d0a:	4b27      	ldr	r3, [pc, #156]	@ (24050da8 <draw_background+0x16c>)
24050d0c:	681b      	ldr	r3, [r3, #0]
24050d0e:	2b01      	cmp	r3, #1
24050d10:	d108      	bne.n	24050d24 <draw_background+0xe8>
		LCD_DisplayStringAt(buf, 0, 80, (uint8_t*) "You win!\0", CENTER_MODE);
24050d12:	2301      	movs	r3, #1
24050d14:	9300      	str	r3, [sp, #0]
24050d16:	4b25      	ldr	r3, [pc, #148]	@ (24050dac <draw_background+0x170>)
24050d18:	2250      	movs	r2, #80	@ 0x50
24050d1a:	2100      	movs	r1, #0
24050d1c:	6878      	ldr	r0, [r7, #4]
24050d1e:	f000 fac5 	bl	240512ac <LCD_DisplayStringAt>
24050d22:	e007      	b.n	24050d34 <draw_background+0xf8>
	} else {
		LCD_DisplayStringAt(buf, 0, 80, (uint8_t*) "You lose!\0", CENTER_MODE);
24050d24:	2301      	movs	r3, #1
24050d26:	9300      	str	r3, [sp, #0]
24050d28:	4b21      	ldr	r3, [pc, #132]	@ (24050db0 <draw_background+0x174>)
24050d2a:	2250      	movs	r2, #80	@ 0x50
24050d2c:	2100      	movs	r1, #0
24050d2e:	6878      	ldr	r0, [r7, #4]
24050d30:	f000 fabc 	bl	240512ac <LCD_DisplayStringAt>
	}
	if (selected_item % 2 == 0) {
24050d34:	4b1f      	ldr	r3, [pc, #124]	@ (24050db4 <draw_background+0x178>)
24050d36:	781b      	ldrb	r3, [r3, #0]
24050d38:	f003 0301 	and.w	r3, r3, #1
24050d3c:	b2db      	uxtb	r3, r3
24050d3e:	2b00      	cmp	r3, #0
24050d40:	d105      	bne.n	24050d4e <draw_background+0x112>
		LCD_SetTextColor(selected_item_color);
24050d42:	4b1d      	ldr	r3, [pc, #116]	@ (24050db8 <draw_background+0x17c>)
24050d44:	881b      	ldrh	r3, [r3, #0]
24050d46:	4618      	mov	r0, r3
24050d48:	f000 fa2a 	bl	240511a0 <LCD_SetTextColor>
24050d4c:	e003      	b.n	24050d56 <draw_background+0x11a>
	} else {
		LCD_SetTextColor(LCD_COLOR_WHITE);
24050d4e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
24050d52:	f000 fa25 	bl	240511a0 <LCD_SetTextColor>
	}
	LCD_DisplayStringAt(buf, 0, 110, (uint8_t*) "Restart\0", CENTER_MODE);
24050d56:	2301      	movs	r3, #1
24050d58:	9300      	str	r3, [sp, #0]
24050d5a:	4b18      	ldr	r3, [pc, #96]	@ (24050dbc <draw_background+0x180>)
24050d5c:	226e      	movs	r2, #110	@ 0x6e
24050d5e:	2100      	movs	r1, #0
24050d60:	6878      	ldr	r0, [r7, #4]
24050d62:	f000 faa3 	bl	240512ac <LCD_DisplayStringAt>
	if (selected_item % 2 == 1) {
24050d66:	4b13      	ldr	r3, [pc, #76]	@ (24050db4 <draw_background+0x178>)
24050d68:	781b      	ldrb	r3, [r3, #0]
24050d6a:	f003 0301 	and.w	r3, r3, #1
24050d6e:	b2db      	uxtb	r3, r3
24050d70:	2b00      	cmp	r3, #0
24050d72:	d005      	beq.n	24050d80 <draw_background+0x144>
		LCD_SetTextColor(selected_item_color);
24050d74:	4b10      	ldr	r3, [pc, #64]	@ (24050db8 <draw_background+0x17c>)
24050d76:	881b      	ldrh	r3, [r3, #0]
24050d78:	4618      	mov	r0, r3
24050d7a:	f000 fa11 	bl	240511a0 <LCD_SetTextColor>
24050d7e:	e003      	b.n	24050d88 <draw_background+0x14c>
	} else {
		LCD_SetTextColor(LCD_COLOR_WHITE);
24050d80:	f64f 70ff 	movw	r0, #65535	@ 0xffff
24050d84:	f000 fa0c 	bl	240511a0 <LCD_SetTextColor>
	}
	LCD_DisplayStringAt(buf, 0, 140, (uint8_t*) "Exit\0", CENTER_MODE);
24050d88:	2301      	movs	r3, #1
24050d8a:	9300      	str	r3, [sp, #0]
24050d8c:	4b0c      	ldr	r3, [pc, #48]	@ (24050dc0 <draw_background+0x184>)
24050d8e:	228c      	movs	r2, #140	@ 0x8c
24050d90:	2100      	movs	r1, #0
24050d92:	6878      	ldr	r0, [r7, #4]
24050d94:	f000 fa8a 	bl	240512ac <LCD_DisplayStringAt>
	LCD_SetBackColor(LCD_COLOR_BLACK);
24050d98:	2000      	movs	r0, #0
24050d9a:	f000 fa11 	bl	240511c0 <LCD_SetBackColor>
}
24050d9e:	bf00      	nop
24050da0:	3708      	adds	r7, #8
24050da2:	46bd      	mov	sp, r7
24050da4:	bd80      	pop	{r7, pc}
24050da6:	bf00      	nop
24050da8:	20000210 	.word	0x20000210
24050dac:	24065590 	.word	0x24065590
24050db0:	2406559c 	.word	0x2406559c
24050db4:	2000020c 	.word	0x2000020c
24050db8:	20000074 	.word	0x20000074
24050dbc:	240655a8 	.word	0x240655a8
24050dc0:	240655b4 	.word	0x240655b4

24050dc4 <menu_select>:

static void menu_select() {
24050dc4:	b480      	push	{r7}
24050dc6:	af00      	add	r7, sp, #0
	if (selected_item % 2 == 0) {
24050dc8:	4b0d      	ldr	r3, [pc, #52]	@ (24050e00 <menu_select+0x3c>)
24050dca:	781b      	ldrb	r3, [r3, #0]
24050dcc:	f003 0301 	and.w	r3, r3, #1
24050dd0:	b2db      	uxtb	r3, r3
24050dd2:	2b00      	cmp	r3, #0
24050dd4:	d105      	bne.n	24050de2 <menu_select+0x1e>
		in_game = 0;
24050dd6:	4b0b      	ldr	r3, [pc, #44]	@ (24050e04 <menu_select+0x40>)
24050dd8:	2200      	movs	r2, #0
24050dda:	601a      	str	r2, [r3, #0]
		restart_game = 1;
24050ddc:	4b0a      	ldr	r3, [pc, #40]	@ (24050e08 <menu_select+0x44>)
24050dde:	2201      	movs	r2, #1
24050de0:	601a      	str	r2, [r3, #0]
	}
	if (selected_item % 2 == 1) {
24050de2:	4b07      	ldr	r3, [pc, #28]	@ (24050e00 <menu_select+0x3c>)
24050de4:	781b      	ldrb	r3, [r3, #0]
24050de6:	f003 0301 	and.w	r3, r3, #1
24050dea:	b2db      	uxtb	r3, r3
24050dec:	2b00      	cmp	r3, #0
24050dee:	d002      	beq.n	24050df6 <menu_select+0x32>
		in_game = 0;
24050df0:	4b04      	ldr	r3, [pc, #16]	@ (24050e04 <menu_select+0x40>)
24050df2:	2200      	movs	r2, #0
24050df4:	601a      	str	r2, [r3, #0]
	}
}
24050df6:	bf00      	nop
24050df8:	46bd      	mov	sp, r7
24050dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
24050dfe:	4770      	bx	lr
24050e00:	2000020c 	.word	0x2000020c
24050e04:	200001fc 	.word	0x200001fc
24050e08:	20000258 	.word	0x20000258

24050e0c <in_game_menu_init>:
static uint16_t selected_item_color = LCD_COLOR_DARKBLUE;
static int ticks = 0;
static int action_delay = 0;
static int8_t selected_item = 0;

void in_game_menu_init() {
24050e0c:	b580      	push	{r7, lr}
24050e0e:	af00      	add	r7, sp, #0
	in_game_menu = 1;
24050e10:	4b0e      	ldr	r3, [pc, #56]	@ (24050e4c <in_game_menu_init+0x40>)
24050e12:	2201      	movs	r2, #1
24050e14:	601a      	str	r2, [r3, #0]
	selected_item = 0;
24050e16:	4b0e      	ldr	r3, [pc, #56]	@ (24050e50 <in_game_menu_init+0x44>)
24050e18:	2200      	movs	r2, #0
24050e1a:	701a      	strb	r2, [r3, #0]
	action_delay = 15;
24050e1c:	4b0d      	ldr	r3, [pc, #52]	@ (24050e54 <in_game_menu_init+0x48>)
24050e1e:	220f      	movs	r2, #15
24050e20:	601a      	str	r2, [r3, #0]
	LCD_SetTextColor(LCD_COLOR_WHITE);
24050e22:	f64f 70ff 	movw	r0, #65535	@ 0xffff
24050e26:	f000 f9bb 	bl	240511a0 <LCD_SetTextColor>
	LCD_SetFont(&Font24);
24050e2a:	480b      	ldr	r0, [pc, #44]	@ (24050e58 <in_game_menu_init+0x4c>)
24050e2c:	f000 f9d8 	bl	240511e0 <LCD_SetFont>
	LCD_SetFontScale(1);
24050e30:	2001      	movs	r0, #1
24050e32:	f000 f9e5 	bl	24051200 <LCD_SetFontScale>
	while (in_game_menu) {
24050e36:	e001      	b.n	24050e3c <in_game_menu_init+0x30>
		in_game_menu_loop();
24050e38:	f000 f810 	bl	24050e5c <in_game_menu_loop>
	while (in_game_menu) {
24050e3c:	4b03      	ldr	r3, [pc, #12]	@ (24050e4c <in_game_menu_init+0x40>)
24050e3e:	681b      	ldr	r3, [r3, #0]
24050e40:	2b00      	cmp	r3, #0
24050e42:	d1f9      	bne.n	24050e38 <in_game_menu_init+0x2c>
	}
	menu_select();
24050e44:	f000 f964 	bl	24051110 <menu_select>
}
24050e48:	bf00      	nop
24050e4a:	bd80      	pop	{r7, pc}
24050e4c:	20000078 	.word	0x20000078
24050e50:	2000021c 	.word	0x2000021c
24050e54:	20000218 	.word	0x20000218
24050e58:	20000018 	.word	0x20000018

24050e5c <in_game_menu_loop>:

static void in_game_menu_loop() {
24050e5c:	b580      	push	{r7, lr}
24050e5e:	b082      	sub	sp, #8
24050e60:	af00      	add	r7, sp, #0
	uint16_t *fb = lcd_get_active_buffer();
24050e62:	f003 f841 	bl	24053ee8 <lcd_get_active_buffer>
24050e66:	6078      	str	r0, [r7, #4]
	draw_background(fb);
24050e68:	6878      	ldr	r0, [r7, #4]
24050e6a:	f000 f877 	bl	24050f5c <draw_background>

	process_input();
24050e6e:	f000 f80b 	bl	24050e88 <process_input>
	update();
24050e72:	f000 f865 	bl	24050f40 <update>

	lcd_swap();
24050e76:	f003 f809 	bl	24053e8c <lcd_swap>
	lcd_wait_for_vblank();
24050e7a:	f003 f861 	bl	24053f40 <lcd_wait_for_vblank>
}
24050e7e:	bf00      	nop
24050e80:	3708      	adds	r7, #8
24050e82:	46bd      	mov	sp, r7
24050e84:	bd80      	pop	{r7, pc}
	...

24050e88 <process_input>:

static void process_input() {
24050e88:	b580      	push	{r7, lr}
24050e8a:	b082      	sub	sp, #8
24050e8c:	af00      	add	r7, sp, #0
	uint32_t buttons = buttons_get();
24050e8e:	f002 f961 	bl	24053154 <buttons_get>
24050e92:	6078      	str	r0, [r7, #4]
	if (buttons & B_POWER) {
24050e94:	687b      	ldr	r3, [r7, #4]
24050e96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
24050e9a:	2b00      	cmp	r3, #0
24050e9c:	d001      	beq.n	24050ea2 <process_input+0x1a>
		HAL_NVIC_SystemReset();
24050e9e:	f007 fe54 	bl	24058b4a <HAL_NVIC_SystemReset>
	}
	if (action_delay <= 0) {
24050ea2:	4b24      	ldr	r3, [pc, #144]	@ (24050f34 <process_input+0xac>)
24050ea4:	681b      	ldr	r3, [r3, #0]
24050ea6:	2b00      	cmp	r3, #0
24050ea8:	dc3a      	bgt.n	24050f20 <process_input+0x98>
		if (buttons & B_Up) {
24050eaa:	687b      	ldr	r3, [r7, #4]
24050eac:	f003 0302 	and.w	r3, r3, #2
24050eb0:	2b00      	cmp	r3, #0
24050eb2:	d013      	beq.n	24050edc <process_input+0x54>
			if (selected_item == 0) {
24050eb4:	4b20      	ldr	r3, [pc, #128]	@ (24050f38 <process_input+0xb0>)
24050eb6:	f993 3000 	ldrsb.w	r3, [r3]
24050eba:	2b00      	cmp	r3, #0
24050ebc:	d102      	bne.n	24050ec4 <process_input+0x3c>
				selected_item = 3;
24050ebe:	4b1e      	ldr	r3, [pc, #120]	@ (24050f38 <process_input+0xb0>)
24050ec0:	2203      	movs	r2, #3
24050ec2:	701a      	strb	r2, [r3, #0]
			}
			selected_item--;
24050ec4:	4b1c      	ldr	r3, [pc, #112]	@ (24050f38 <process_input+0xb0>)
24050ec6:	f993 3000 	ldrsb.w	r3, [r3]
24050eca:	b2db      	uxtb	r3, r3
24050ecc:	3b01      	subs	r3, #1
24050ece:	b2db      	uxtb	r3, r3
24050ed0:	b25a      	sxtb	r2, r3
24050ed2:	4b19      	ldr	r3, [pc, #100]	@ (24050f38 <process_input+0xb0>)
24050ed4:	701a      	strb	r2, [r3, #0]
			action_delay = 15;
24050ed6:	4b17      	ldr	r3, [pc, #92]	@ (24050f34 <process_input+0xac>)
24050ed8:	220f      	movs	r2, #15
24050eda:	601a      	str	r2, [r3, #0]
		}
		if (buttons & B_Down) {
24050edc:	687b      	ldr	r3, [r7, #4]
24050ede:	f003 0308 	and.w	r3, r3, #8
24050ee2:	2b00      	cmp	r3, #0
24050ee4:	d013      	beq.n	24050f0e <process_input+0x86>
			if (selected_item == 2) {
24050ee6:	4b14      	ldr	r3, [pc, #80]	@ (24050f38 <process_input+0xb0>)
24050ee8:	f993 3000 	ldrsb.w	r3, [r3]
24050eec:	2b02      	cmp	r3, #2
24050eee:	d102      	bne.n	24050ef6 <process_input+0x6e>
				selected_item = -1;
24050ef0:	4b11      	ldr	r3, [pc, #68]	@ (24050f38 <process_input+0xb0>)
24050ef2:	22ff      	movs	r2, #255	@ 0xff
24050ef4:	701a      	strb	r2, [r3, #0]
			}
			selected_item++;
24050ef6:	4b10      	ldr	r3, [pc, #64]	@ (24050f38 <process_input+0xb0>)
24050ef8:	f993 3000 	ldrsb.w	r3, [r3]
24050efc:	b2db      	uxtb	r3, r3
24050efe:	3301      	adds	r3, #1
24050f00:	b2db      	uxtb	r3, r3
24050f02:	b25a      	sxtb	r2, r3
24050f04:	4b0c      	ldr	r3, [pc, #48]	@ (24050f38 <process_input+0xb0>)
24050f06:	701a      	strb	r2, [r3, #0]
			action_delay = 15;
24050f08:	4b0a      	ldr	r3, [pc, #40]	@ (24050f34 <process_input+0xac>)
24050f0a:	220f      	movs	r2, #15
24050f0c:	601a      	str	r2, [r3, #0]
		}
		if (buttons & B_A) {
24050f0e:	687b      	ldr	r3, [r7, #4]
24050f10:	f003 0310 	and.w	r3, r3, #16
24050f14:	2b00      	cmp	r3, #0
24050f16:	d008      	beq.n	24050f2a <process_input+0xa2>
			in_game_menu = 0;
24050f18:	4b08      	ldr	r3, [pc, #32]	@ (24050f3c <process_input+0xb4>)
24050f1a:	2200      	movs	r2, #0
24050f1c:	601a      	str	r2, [r3, #0]
		}
	} else {
		action_delay--;
	}
}
24050f1e:	e004      	b.n	24050f2a <process_input+0xa2>
		action_delay--;
24050f20:	4b04      	ldr	r3, [pc, #16]	@ (24050f34 <process_input+0xac>)
24050f22:	681b      	ldr	r3, [r3, #0]
24050f24:	3b01      	subs	r3, #1
24050f26:	4a03      	ldr	r2, [pc, #12]	@ (24050f34 <process_input+0xac>)
24050f28:	6013      	str	r3, [r2, #0]
}
24050f2a:	bf00      	nop
24050f2c:	3708      	adds	r7, #8
24050f2e:	46bd      	mov	sp, r7
24050f30:	bd80      	pop	{r7, pc}
24050f32:	bf00      	nop
24050f34:	20000218 	.word	0x20000218
24050f38:	2000021c 	.word	0x2000021c
24050f3c:	20000078 	.word	0x20000078

24050f40 <update>:
static void update() {
24050f40:	b480      	push	{r7}
24050f42:	af00      	add	r7, sp, #0
	ticks++;
24050f44:	4b04      	ldr	r3, [pc, #16]	@ (24050f58 <update+0x18>)
24050f46:	681b      	ldr	r3, [r3, #0]
24050f48:	3301      	adds	r3, #1
24050f4a:	4a03      	ldr	r2, [pc, #12]	@ (24050f58 <update+0x18>)
24050f4c:	6013      	str	r3, [r2, #0]
}
24050f4e:	bf00      	nop
24050f50:	46bd      	mov	sp, r7
24050f52:	f85d 7b04 	ldr.w	r7, [sp], #4
24050f56:	4770      	bx	lr
24050f58:	20000214 	.word	0x20000214

24050f5c <draw_background>:

static void draw_background(uint16_t *buf) {
24050f5c:	b580      	push	{r7, lr}
24050f5e:	b084      	sub	sp, #16
24050f60:	af02      	add	r7, sp, #8
24050f62:	6078      	str	r0, [r7, #4]
	LCD_SetBackColor(LCD_COLOR_GRAY);
24050f64:	f248 4010 	movw	r0, #33808	@ 0x8410
24050f68:	f000 f92a 	bl	240511c0 <LCD_SetBackColor>
	LCD_FillCircle(buf, 80, 70, 3, LCD_COLOR_WHITE);
24050f6c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
24050f70:	9300      	str	r3, [sp, #0]
24050f72:	2303      	movs	r3, #3
24050f74:	2246      	movs	r2, #70	@ 0x46
24050f76:	2150      	movs	r1, #80	@ 0x50
24050f78:	6878      	ldr	r0, [r7, #4]
24050f7a:	f000 fc96 	bl	240518aa <LCD_FillCircle>
	LCD_FillCircle(buf, 239, 70, 3, LCD_COLOR_WHITE);
24050f7e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
24050f82:	9300      	str	r3, [sp, #0]
24050f84:	2303      	movs	r3, #3
24050f86:	2246      	movs	r2, #70	@ 0x46
24050f88:	21ef      	movs	r1, #239	@ 0xef
24050f8a:	6878      	ldr	r0, [r7, #4]
24050f8c:	f000 fc8d 	bl	240518aa <LCD_FillCircle>
	LCD_FillCircle(buf, 80, 169, 3, LCD_COLOR_WHITE);
24050f90:	f64f 73ff 	movw	r3, #65535	@ 0xffff
24050f94:	9300      	str	r3, [sp, #0]
24050f96:	2303      	movs	r3, #3
24050f98:	22a9      	movs	r2, #169	@ 0xa9
24050f9a:	2150      	movs	r1, #80	@ 0x50
24050f9c:	6878      	ldr	r0, [r7, #4]
24050f9e:	f000 fc84 	bl	240518aa <LCD_FillCircle>
	LCD_FillCircle(buf, 239, 169, 3, LCD_COLOR_WHITE);
24050fa2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
24050fa6:	9300      	str	r3, [sp, #0]
24050fa8:	2303      	movs	r3, #3
24050faa:	22a9      	movs	r2, #169	@ 0xa9
24050fac:	21ef      	movs	r1, #239	@ 0xef
24050fae:	6878      	ldr	r0, [r7, #4]
24050fb0:	f000 fc7b 	bl	240518aa <LCD_FillCircle>

	LCD_FillRect(buf, 77, 70, 3, 100, LCD_COLOR_WHITE);
24050fb4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
24050fb8:	9301      	str	r3, [sp, #4]
24050fba:	2364      	movs	r3, #100	@ 0x64
24050fbc:	9300      	str	r3, [sp, #0]
24050fbe:	2303      	movs	r3, #3
24050fc0:	2246      	movs	r2, #70	@ 0x46
24050fc2:	214d      	movs	r1, #77	@ 0x4d
24050fc4:	6878      	ldr	r0, [r7, #4]
24050fc6:	f000 fc3f 	bl	24051848 <LCD_FillRect>
	LCD_FillRect(buf, 240, 70, 3, 100, LCD_COLOR_WHITE);
24050fca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
24050fce:	9301      	str	r3, [sp, #4]
24050fd0:	2364      	movs	r3, #100	@ 0x64
24050fd2:	9300      	str	r3, [sp, #0]
24050fd4:	2303      	movs	r3, #3
24050fd6:	2246      	movs	r2, #70	@ 0x46
24050fd8:	21f0      	movs	r1, #240	@ 0xf0
24050fda:	6878      	ldr	r0, [r7, #4]
24050fdc:	f000 fc34 	bl	24051848 <LCD_FillRect>
	LCD_FillRect(buf, 80, 67, 160, 3, LCD_COLOR_WHITE);
24050fe0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
24050fe4:	9301      	str	r3, [sp, #4]
24050fe6:	2303      	movs	r3, #3
24050fe8:	9300      	str	r3, [sp, #0]
24050fea:	23a0      	movs	r3, #160	@ 0xa0
24050fec:	2243      	movs	r2, #67	@ 0x43
24050fee:	2150      	movs	r1, #80	@ 0x50
24050ff0:	6878      	ldr	r0, [r7, #4]
24050ff2:	f000 fc29 	bl	24051848 <LCD_FillRect>
	LCD_FillRect(buf, 80, 170, 160, 3, LCD_COLOR_WHITE);
24050ff6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
24050ffa:	9301      	str	r3, [sp, #4]
24050ffc:	2303      	movs	r3, #3
24050ffe:	9300      	str	r3, [sp, #0]
24051000:	23a0      	movs	r3, #160	@ 0xa0
24051002:	22aa      	movs	r2, #170	@ 0xaa
24051004:	2150      	movs	r1, #80	@ 0x50
24051006:	6878      	ldr	r0, [r7, #4]
24051008:	f000 fc1e 	bl	24051848 <LCD_FillRect>

	LCD_FillRect(buf, 80, 70, 160, 100, LCD_COLOR_GRAY);
2405100c:	f248 4310 	movw	r3, #33808	@ 0x8410
24051010:	9301      	str	r3, [sp, #4]
24051012:	2364      	movs	r3, #100	@ 0x64
24051014:	9300      	str	r3, [sp, #0]
24051016:	23a0      	movs	r3, #160	@ 0xa0
24051018:	2246      	movs	r2, #70	@ 0x46
2405101a:	2150      	movs	r1, #80	@ 0x50
2405101c:	6878      	ldr	r0, [r7, #4]
2405101e:	f000 fc13 	bl	24051848 <LCD_FillRect>

	if (selected_item % 3 == 0) {
24051022:	4b35      	ldr	r3, [pc, #212]	@ (240510f8 <draw_background+0x19c>)
24051024:	f993 2000 	ldrsb.w	r2, [r3]
24051028:	4b34      	ldr	r3, [pc, #208]	@ (240510fc <draw_background+0x1a0>)
2405102a:	fb83 3102 	smull	r3, r1, r3, r2
2405102e:	17d3      	asrs	r3, r2, #31
24051030:	1ac9      	subs	r1, r1, r3
24051032:	460b      	mov	r3, r1
24051034:	005b      	lsls	r3, r3, #1
24051036:	440b      	add	r3, r1
24051038:	1ad3      	subs	r3, r2, r3
2405103a:	b25b      	sxtb	r3, r3
2405103c:	2b00      	cmp	r3, #0
2405103e:	d105      	bne.n	2405104c <draw_background+0xf0>
		LCD_SetTextColor(selected_item_color);
24051040:	4b2f      	ldr	r3, [pc, #188]	@ (24051100 <draw_background+0x1a4>)
24051042:	881b      	ldrh	r3, [r3, #0]
24051044:	4618      	mov	r0, r3
24051046:	f000 f8ab 	bl	240511a0 <LCD_SetTextColor>
2405104a:	e003      	b.n	24051054 <draw_background+0xf8>
	} else {
		LCD_SetTextColor(LCD_COLOR_WHITE);
2405104c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
24051050:	f000 f8a6 	bl	240511a0 <LCD_SetTextColor>
	}
	LCD_DisplayStringAt(buf, 0, 80, (uint8_t*) "Resume\0", CENTER_MODE);
24051054:	2301      	movs	r3, #1
24051056:	9300      	str	r3, [sp, #0]
24051058:	4b2a      	ldr	r3, [pc, #168]	@ (24051104 <draw_background+0x1a8>)
2405105a:	2250      	movs	r2, #80	@ 0x50
2405105c:	2100      	movs	r1, #0
2405105e:	6878      	ldr	r0, [r7, #4]
24051060:	f000 f924 	bl	240512ac <LCD_DisplayStringAt>
	if (selected_item % 3 == 1) {
24051064:	4b24      	ldr	r3, [pc, #144]	@ (240510f8 <draw_background+0x19c>)
24051066:	f993 2000 	ldrsb.w	r2, [r3]
2405106a:	4b24      	ldr	r3, [pc, #144]	@ (240510fc <draw_background+0x1a0>)
2405106c:	fb83 3102 	smull	r3, r1, r3, r2
24051070:	17d3      	asrs	r3, r2, #31
24051072:	1ac9      	subs	r1, r1, r3
24051074:	460b      	mov	r3, r1
24051076:	005b      	lsls	r3, r3, #1
24051078:	440b      	add	r3, r1
2405107a:	1ad3      	subs	r3, r2, r3
2405107c:	b25b      	sxtb	r3, r3
2405107e:	2b01      	cmp	r3, #1
24051080:	d105      	bne.n	2405108e <draw_background+0x132>
		LCD_SetTextColor(selected_item_color);
24051082:	4b1f      	ldr	r3, [pc, #124]	@ (24051100 <draw_background+0x1a4>)
24051084:	881b      	ldrh	r3, [r3, #0]
24051086:	4618      	mov	r0, r3
24051088:	f000 f88a 	bl	240511a0 <LCD_SetTextColor>
2405108c:	e003      	b.n	24051096 <draw_background+0x13a>
	} else {
		LCD_SetTextColor(LCD_COLOR_WHITE);
2405108e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
24051092:	f000 f885 	bl	240511a0 <LCD_SetTextColor>
	}
	LCD_DisplayStringAt(buf, 0, 110, (uint8_t*) "Restart\0", CENTER_MODE);
24051096:	2301      	movs	r3, #1
24051098:	9300      	str	r3, [sp, #0]
2405109a:	4b1b      	ldr	r3, [pc, #108]	@ (24051108 <draw_background+0x1ac>)
2405109c:	226e      	movs	r2, #110	@ 0x6e
2405109e:	2100      	movs	r1, #0
240510a0:	6878      	ldr	r0, [r7, #4]
240510a2:	f000 f903 	bl	240512ac <LCD_DisplayStringAt>
	if (selected_item % 3 == 2) {
240510a6:	4b14      	ldr	r3, [pc, #80]	@ (240510f8 <draw_background+0x19c>)
240510a8:	f993 2000 	ldrsb.w	r2, [r3]
240510ac:	4b13      	ldr	r3, [pc, #76]	@ (240510fc <draw_background+0x1a0>)
240510ae:	fb83 3102 	smull	r3, r1, r3, r2
240510b2:	17d3      	asrs	r3, r2, #31
240510b4:	1ac9      	subs	r1, r1, r3
240510b6:	460b      	mov	r3, r1
240510b8:	005b      	lsls	r3, r3, #1
240510ba:	440b      	add	r3, r1
240510bc:	1ad3      	subs	r3, r2, r3
240510be:	b25b      	sxtb	r3, r3
240510c0:	2b02      	cmp	r3, #2
240510c2:	d105      	bne.n	240510d0 <draw_background+0x174>
		LCD_SetTextColor(selected_item_color);
240510c4:	4b0e      	ldr	r3, [pc, #56]	@ (24051100 <draw_background+0x1a4>)
240510c6:	881b      	ldrh	r3, [r3, #0]
240510c8:	4618      	mov	r0, r3
240510ca:	f000 f869 	bl	240511a0 <LCD_SetTextColor>
240510ce:	e003      	b.n	240510d8 <draw_background+0x17c>
	} else {
		LCD_SetTextColor(LCD_COLOR_WHITE);
240510d0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
240510d4:	f000 f864 	bl	240511a0 <LCD_SetTextColor>
	}
	LCD_DisplayStringAt(buf, 0, 140, (uint8_t*) "Exit\0", CENTER_MODE);
240510d8:	2301      	movs	r3, #1
240510da:	9300      	str	r3, [sp, #0]
240510dc:	4b0b      	ldr	r3, [pc, #44]	@ (2405110c <draw_background+0x1b0>)
240510de:	228c      	movs	r2, #140	@ 0x8c
240510e0:	2100      	movs	r1, #0
240510e2:	6878      	ldr	r0, [r7, #4]
240510e4:	f000 f8e2 	bl	240512ac <LCD_DisplayStringAt>
	LCD_SetBackColor(LCD_COLOR_BLACK);
240510e8:	2000      	movs	r0, #0
240510ea:	f000 f869 	bl	240511c0 <LCD_SetBackColor>
}
240510ee:	bf00      	nop
240510f0:	3708      	adds	r7, #8
240510f2:	46bd      	mov	sp, r7
240510f4:	bd80      	pop	{r7, pc}
240510f6:	bf00      	nop
240510f8:	2000021c 	.word	0x2000021c
240510fc:	55555556 	.word	0x55555556
24051100:	2000007c 	.word	0x2000007c
24051104:	240655bc 	.word	0x240655bc
24051108:	240655c4 	.word	0x240655c4
2405110c:	240655d0 	.word	0x240655d0

24051110 <menu_select>:

static void menu_select() {
24051110:	b480      	push	{r7}
24051112:	af00      	add	r7, sp, #0
	if (selected_item % 3 == 1) {
24051114:	4b15      	ldr	r3, [pc, #84]	@ (2405116c <menu_select+0x5c>)
24051116:	f993 2000 	ldrsb.w	r2, [r3]
2405111a:	4b15      	ldr	r3, [pc, #84]	@ (24051170 <menu_select+0x60>)
2405111c:	fb83 3102 	smull	r3, r1, r3, r2
24051120:	17d3      	asrs	r3, r2, #31
24051122:	1ac9      	subs	r1, r1, r3
24051124:	460b      	mov	r3, r1
24051126:	005b      	lsls	r3, r3, #1
24051128:	440b      	add	r3, r1
2405112a:	1ad3      	subs	r3, r2, r3
2405112c:	b25b      	sxtb	r3, r3
2405112e:	2b01      	cmp	r3, #1
24051130:	d105      	bne.n	2405113e <menu_select+0x2e>
		in_game = 0;
24051132:	4b10      	ldr	r3, [pc, #64]	@ (24051174 <menu_select+0x64>)
24051134:	2200      	movs	r2, #0
24051136:	601a      	str	r2, [r3, #0]
		restart_game = 1;
24051138:	4b0f      	ldr	r3, [pc, #60]	@ (24051178 <menu_select+0x68>)
2405113a:	2201      	movs	r2, #1
2405113c:	601a      	str	r2, [r3, #0]
	}
	if (selected_item % 3 == 2) {
2405113e:	4b0b      	ldr	r3, [pc, #44]	@ (2405116c <menu_select+0x5c>)
24051140:	f993 2000 	ldrsb.w	r2, [r3]
24051144:	4b0a      	ldr	r3, [pc, #40]	@ (24051170 <menu_select+0x60>)
24051146:	fb83 3102 	smull	r3, r1, r3, r2
2405114a:	17d3      	asrs	r3, r2, #31
2405114c:	1ac9      	subs	r1, r1, r3
2405114e:	460b      	mov	r3, r1
24051150:	005b      	lsls	r3, r3, #1
24051152:	440b      	add	r3, r1
24051154:	1ad3      	subs	r3, r2, r3
24051156:	b25b      	sxtb	r3, r3
24051158:	2b02      	cmp	r3, #2
2405115a:	d102      	bne.n	24051162 <menu_select+0x52>
		in_game = 0;
2405115c:	4b05      	ldr	r3, [pc, #20]	@ (24051174 <menu_select+0x64>)
2405115e:	2200      	movs	r2, #0
24051160:	601a      	str	r2, [r3, #0]
	}
}
24051162:	bf00      	nop
24051164:	46bd      	mov	sp, r7
24051166:	f85d 7b04 	ldr.w	r7, [sp], #4
2405116a:	4770      	bx	lr
2405116c:	2000021c 	.word	0x2000021c
24051170:	55555556 	.word	0x55555556
24051174:	200001fc 	.word	0x200001fc
24051178:	20000258 	.word	0x20000258

2405117c <LCD_GetXSize>:
/**
 * @brief  Gets the LCD X size.
 * @param  None
 * @retval The used LCD X size
 */
uint16_t LCD_GetXSize(void) {
2405117c:	b480      	push	{r7}
2405117e:	af00      	add	r7, sp, #0
	return GW_LCD_WIDTH;
24051180:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
24051184:	4618      	mov	r0, r3
24051186:	46bd      	mov	sp, r7
24051188:	f85d 7b04 	ldr.w	r7, [sp], #4
2405118c:	4770      	bx	lr

2405118e <LCD_GetYSize>:
/**
 * @brief  Gets the LCD Y size.
 * @param  None
 * @retval The used LCD Y size
 */
uint16_t LCD_GetYSize(void) {
2405118e:	b480      	push	{r7}
24051190:	af00      	add	r7, sp, #0
	return GW_LCD_HEIGHT;
24051192:	23f0      	movs	r3, #240	@ 0xf0
}
24051194:	4618      	mov	r0, r3
24051196:	46bd      	mov	sp, r7
24051198:	f85d 7b04 	ldr.w	r7, [sp], #4
2405119c:	4770      	bx	lr
	...

240511a0 <LCD_SetTextColor>:
/**
 * @brief  Sets the Text color.
 * @param  Color: the Text color code RGB(5-6-5)
 * @retval None
 */
void LCD_SetTextColor(uint16_t Color) {
240511a0:	b480      	push	{r7}
240511a2:	b083      	sub	sp, #12
240511a4:	af00      	add	r7, sp, #0
240511a6:	4603      	mov	r3, r0
240511a8:	80fb      	strh	r3, [r7, #6]
	font_color = Color;
240511aa:	4a04      	ldr	r2, [pc, #16]	@ (240511bc <LCD_SetTextColor+0x1c>)
240511ac:	88fb      	ldrh	r3, [r7, #6]
240511ae:	8013      	strh	r3, [r2, #0]
}
240511b0:	bf00      	nop
240511b2:	370c      	adds	r7, #12
240511b4:	46bd      	mov	sp, r7
240511b6:	f85d 7b04 	ldr.w	r7, [sp], #4
240511ba:	4770      	bx	lr
240511bc:	20000084 	.word	0x20000084

240511c0 <LCD_SetBackColor>:
/**
 * @brief  Sets the Background color.
 * @param  Color: the layer Background color code RGB(5-6-5)
 * @retval None
 */
void LCD_SetBackColor(uint16_t Color) {
240511c0:	b480      	push	{r7}
240511c2:	b083      	sub	sp, #12
240511c4:	af00      	add	r7, sp, #0
240511c6:	4603      	mov	r3, r0
240511c8:	80fb      	strh	r3, [r7, #6]
	font_bcolor = Color;
240511ca:	4a04      	ldr	r2, [pc, #16]	@ (240511dc <LCD_SetBackColor+0x1c>)
240511cc:	88fb      	ldrh	r3, [r7, #6]
240511ce:	8013      	strh	r3, [r2, #0]
}
240511d0:	bf00      	nop
240511d2:	370c      	adds	r7, #12
240511d4:	46bd      	mov	sp, r7
240511d6:	f85d 7b04 	ldr.w	r7, [sp], #4
240511da:	4770      	bx	lr
240511dc:	2000021e 	.word	0x2000021e

240511e0 <LCD_SetFont>:
/**
 * @brief  Sets the Text Font.
 * @param  pFonts: the layer font to be used
 * @retval None
 */
void LCD_SetFont(sFONT *pFonts) {
240511e0:	b480      	push	{r7}
240511e2:	b083      	sub	sp, #12
240511e4:	af00      	add	r7, sp, #0
240511e6:	6078      	str	r0, [r7, #4]
	font = pFonts;
240511e8:	4a04      	ldr	r2, [pc, #16]	@ (240511fc <LCD_SetFont+0x1c>)
240511ea:	687b      	ldr	r3, [r7, #4]
240511ec:	6013      	str	r3, [r2, #0]
}
240511ee:	bf00      	nop
240511f0:	370c      	adds	r7, #12
240511f2:	46bd      	mov	sp, r7
240511f4:	f85d 7b04 	ldr.w	r7, [sp], #4
240511f8:	4770      	bx	lr
240511fa:	bf00      	nop
240511fc:	20000080 	.word	0x20000080

24051200 <LCD_SetFontScale>:
/**
 * @brief  Sets the Text Scale.
 * @param  scale: the scale of font to be used
 * @retval None
 */
void LCD_SetFontScale(uint8_t scale) {
24051200:	b480      	push	{r7}
24051202:	b083      	sub	sp, #12
24051204:	af00      	add	r7, sp, #0
24051206:	4603      	mov	r3, r0
24051208:	71fb      	strb	r3, [r7, #7]
	font_scale = scale;
2405120a:	4a04      	ldr	r2, [pc, #16]	@ (2405121c <LCD_SetFontScale+0x1c>)
2405120c:	79fb      	ldrb	r3, [r7, #7]
2405120e:	7013      	strb	r3, [r2, #0]
}
24051210:	bf00      	nop
24051212:	370c      	adds	r7, #12
24051214:	46bd      	mov	sp, r7
24051216:	f85d 7b04 	ldr.w	r7, [sp], #4
2405121a:	4770      	bx	lr
2405121c:	20000086 	.word	0x20000086

24051220 <LCD_DrawPixel>:
 * @param  Xpos: the X position
 * @param  Ypos: the Y position
 * @param  RGB_Code: the pixel color in RGB(5-6-5)
 * @retval None
 */
void LCD_DrawPixel(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint16_t pixel) {
24051220:	b480      	push	{r7}
24051222:	b085      	sub	sp, #20
24051224:	af00      	add	r7, sp, #0
24051226:	60f8      	str	r0, [r7, #12]
24051228:	4608      	mov	r0, r1
2405122a:	4611      	mov	r1, r2
2405122c:	461a      	mov	r2, r3
2405122e:	4603      	mov	r3, r0
24051230:	817b      	strh	r3, [r7, #10]
24051232:	460b      	mov	r3, r1
24051234:	813b      	strh	r3, [r7, #8]
24051236:	4613      	mov	r3, r2
24051238:	80fb      	strh	r3, [r7, #6]
	if (PPOS(Xpos, Ypos) > GW_LCD_WIDTH * GW_LCD_HEIGHT) {
2405123a:	893a      	ldrh	r2, [r7, #8]
2405123c:	4613      	mov	r3, r2
2405123e:	009b      	lsls	r3, r3, #2
24051240:	4413      	add	r3, r2
24051242:	019b      	lsls	r3, r3, #6
24051244:	461a      	mov	r2, r3
24051246:	897b      	ldrh	r3, [r7, #10]
24051248:	4413      	add	r3, r2
2405124a:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
2405124e:	dc0d      	bgt.n	2405126c <LCD_DrawPixel+0x4c>
		return;
	}
	buf[PPOS(Xpos, Ypos)] = pixel;
24051250:	893a      	ldrh	r2, [r7, #8]
24051252:	4613      	mov	r3, r2
24051254:	009b      	lsls	r3, r3, #2
24051256:	4413      	add	r3, r2
24051258:	019b      	lsls	r3, r3, #6
2405125a:	461a      	mov	r2, r3
2405125c:	897b      	ldrh	r3, [r7, #10]
2405125e:	4413      	add	r3, r2
24051260:	005b      	lsls	r3, r3, #1
24051262:	68fa      	ldr	r2, [r7, #12]
24051264:	4413      	add	r3, r2
24051266:	88fa      	ldrh	r2, [r7, #6]
24051268:	801a      	strh	r2, [r3, #0]
2405126a:	e000      	b.n	2405126e <LCD_DrawPixel+0x4e>
		return;
2405126c:	bf00      	nop
}
2405126e:	3714      	adds	r7, #20
24051270:	46bd      	mov	sp, r7
24051272:	f85d 7b04 	ldr.w	r7, [sp], #4
24051276:	4770      	bx	lr

24051278 <LCD_Clear>:
/**
 * @brief  Clears the whole LCD.
 * @param  Color: the color of the background
 * @retval None
 */
void LCD_Clear(uint16_t *buf, uint16_t color) {
24051278:	b590      	push	{r4, r7, lr}
2405127a:	b085      	sub	sp, #20
2405127c:	af02      	add	r7, sp, #8
2405127e:	6078      	str	r0, [r7, #4]
24051280:	460b      	mov	r3, r1
24051282:	807b      	strh	r3, [r7, #2]
	FillBuffer((uint32_t*) buf, LCD_GetXSize(), LCD_GetYSize(), 0, color);
24051284:	f7ff ff7a 	bl	2405117c <LCD_GetXSize>
24051288:	4603      	mov	r3, r0
2405128a:	461c      	mov	r4, r3
2405128c:	f7ff ff7f 	bl	2405118e <LCD_GetYSize>
24051290:	4603      	mov	r3, r0
24051292:	461a      	mov	r2, r3
24051294:	887b      	ldrh	r3, [r7, #2]
24051296:	9300      	str	r3, [sp, #0]
24051298:	2300      	movs	r3, #0
2405129a:	4621      	mov	r1, r4
2405129c:	6878      	ldr	r0, [r7, #4]
2405129e:	f000 fc5d 	bl	24051b5c <FillBuffer>
}
240512a2:	bf00      	nop
240512a4:	370c      	adds	r7, #12
240512a6:	46bd      	mov	sp, r7
240512a8:	bd90      	pop	{r4, r7, pc}
	...

240512ac <LCD_DisplayStringAt>:
 *                @arg RIGHT_MODE
 *                @arg LEFT_MODE
 * @retval None
 */
void LCD_DisplayStringAt(uint16_t *buf, uint16_t X, uint16_t Y, uint8_t *pText,
		Text_AlignModeTypdef mode) {
240512ac:	b590      	push	{r4, r7, lr}
240512ae:	b08b      	sub	sp, #44	@ 0x2c
240512b0:	af00      	add	r7, sp, #0
240512b2:	60f8      	str	r0, [r7, #12]
240512b4:	607b      	str	r3, [r7, #4]
240512b6:	460b      	mov	r3, r1
240512b8:	817b      	strh	r3, [r7, #10]
240512ba:	4613      	mov	r3, r2
240512bc:	813b      	strh	r3, [r7, #8]
	uint16_t refcolumn = 1, i = 0;
240512be:	2301      	movs	r3, #1
240512c0:	84fb      	strh	r3, [r7, #38]	@ 0x26
240512c2:	2300      	movs	r3, #0
240512c4:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint32_t size = 0, xsize = 0;
240512c6:	2300      	movs	r3, #0
240512c8:	623b      	str	r3, [r7, #32]
240512ca:	2300      	movs	r3, #0
240512cc:	61bb      	str	r3, [r7, #24]
	uint32_t mod_size = 0;
240512ce:	2300      	movs	r3, #0
240512d0:	617b      	str	r3, [r7, #20]
	uint8_t *ptr = pText;
240512d2:	687b      	ldr	r3, [r7, #4]
240512d4:	61fb      	str	r3, [r7, #28]
	uint32_t font_width = font->Width * font_scale;
240512d6:	4b44      	ldr	r3, [pc, #272]	@ (240513e8 <LCD_DisplayStringAt+0x13c>)
240512d8:	681b      	ldr	r3, [r3, #0]
240512da:	889b      	ldrh	r3, [r3, #4]
240512dc:	461a      	mov	r2, r3
240512de:	4b43      	ldr	r3, [pc, #268]	@ (240513ec <LCD_DisplayStringAt+0x140>)
240512e0:	781b      	ldrb	r3, [r3, #0]
240512e2:	fb02 f303 	mul.w	r3, r2, r3
240512e6:	613b      	str	r3, [r7, #16]

	/* Get the text size */
	while (*ptr++)
240512e8:	e002      	b.n	240512f0 <LCD_DisplayStringAt+0x44>
		size++;
240512ea:	6a3b      	ldr	r3, [r7, #32]
240512ec:	3301      	adds	r3, #1
240512ee:	623b      	str	r3, [r7, #32]
	while (*ptr++)
240512f0:	69fb      	ldr	r3, [r7, #28]
240512f2:	1c5a      	adds	r2, r3, #1
240512f4:	61fa      	str	r2, [r7, #28]
240512f6:	781b      	ldrb	r3, [r3, #0]
240512f8:	2b00      	cmp	r3, #0
240512fa:	d1f6      	bne.n	240512ea <LCD_DisplayStringAt+0x3e>

	/* Characters number per line */
	xsize = (LCD_GetXSize() / font_width);
240512fc:	f7ff ff3e 	bl	2405117c <LCD_GetXSize>
24051300:	4603      	mov	r3, r0
24051302:	461a      	mov	r2, r3
24051304:	693b      	ldr	r3, [r7, #16]
24051306:	fbb2 f3f3 	udiv	r3, r2, r3
2405130a:	61bb      	str	r3, [r7, #24]
	mod_size = LCD_GetXSize() % font_width;
2405130c:	f7ff ff36 	bl	2405117c <LCD_GetXSize>
24051310:	4603      	mov	r3, r0
24051312:	693a      	ldr	r2, [r7, #16]
24051314:	fbb3 f2f2 	udiv	r2, r3, r2
24051318:	6939      	ldr	r1, [r7, #16]
2405131a:	fb01 f202 	mul.w	r2, r1, r2
2405131e:	1a9b      	subs	r3, r3, r2
24051320:	617b      	str	r3, [r7, #20]

	switch (mode) {
24051322:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
24051326:	2b03      	cmp	r3, #3
24051328:	d014      	beq.n	24051354 <LCD_DisplayStringAt+0xa8>
2405132a:	2b03      	cmp	r3, #3
2405132c:	dc26      	bgt.n	2405137c <LCD_DisplayStringAt+0xd0>
2405132e:	2b01      	cmp	r3, #1
24051330:	d002      	beq.n	24051338 <LCD_DisplayStringAt+0x8c>
24051332:	2b02      	cmp	r3, #2
24051334:	d011      	beq.n	2405135a <LCD_DisplayStringAt+0xae>
24051336:	e021      	b.n	2405137c <LCD_DisplayStringAt+0xd0>
	case CENTER_MODE: {
		refcolumn = X + ((xsize - size) * font_width + mod_size) / 2;
24051338:	69ba      	ldr	r2, [r7, #24]
2405133a:	6a3b      	ldr	r3, [r7, #32]
2405133c:	1ad3      	subs	r3, r2, r3
2405133e:	693a      	ldr	r2, [r7, #16]
24051340:	fb03 f202 	mul.w	r2, r3, r2
24051344:	697b      	ldr	r3, [r7, #20]
24051346:	4413      	add	r3, r2
24051348:	085b      	lsrs	r3, r3, #1
2405134a:	b29a      	uxth	r2, r3
2405134c:	897b      	ldrh	r3, [r7, #10]
2405134e:	4413      	add	r3, r2
24051350:	84fb      	strh	r3, [r7, #38]	@ 0x26
		break;
24051352:	e016      	b.n	24051382 <LCD_DisplayStringAt+0xd6>
	}
	case LEFT_MODE: {
		refcolumn = X;
24051354:	897b      	ldrh	r3, [r7, #10]
24051356:	84fb      	strh	r3, [r7, #38]	@ 0x26
		break;
24051358:	e013      	b.n	24051382 <LCD_DisplayStringAt+0xd6>
	}
	case RIGHT_MODE: {
		refcolumn = X + ((xsize - size) * font_width) + mod_size;
2405135a:	69ba      	ldr	r2, [r7, #24]
2405135c:	6a3b      	ldr	r3, [r7, #32]
2405135e:	1ad3      	subs	r3, r2, r3
24051360:	b29a      	uxth	r2, r3
24051362:	693b      	ldr	r3, [r7, #16]
24051364:	b29b      	uxth	r3, r3
24051366:	fb12 f303 	smulbb	r3, r2, r3
2405136a:	b29a      	uxth	r2, r3
2405136c:	897b      	ldrh	r3, [r7, #10]
2405136e:	4413      	add	r3, r2
24051370:	b29a      	uxth	r2, r3
24051372:	697b      	ldr	r3, [r7, #20]
24051374:	b29b      	uxth	r3, r3
24051376:	4413      	add	r3, r2
24051378:	84fb      	strh	r3, [r7, #38]	@ 0x26
		break;
2405137a:	e002      	b.n	24051382 <LCD_DisplayStringAt+0xd6>
	}
	default: {
		refcolumn = X;
2405137c:	897b      	ldrh	r3, [r7, #10]
2405137e:	84fb      	strh	r3, [r7, #38]	@ 0x26
		break;
24051380:	bf00      	nop
	}
	}

	/* Send the string character by character on LCD */
	while ((*pText != 0)
24051382:	e011      	b.n	240513a8 <LCD_DisplayStringAt+0xfc>
			& (((LCD_GetXSize() - (i * font_width)) & 0xFFFF) >= font_width)) {
		/* Display one character on LCD */
		LCD_DisplayChar(buf, refcolumn, Y, *pText);
24051384:	687b      	ldr	r3, [r7, #4]
24051386:	781b      	ldrb	r3, [r3, #0]
24051388:	893a      	ldrh	r2, [r7, #8]
2405138a:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
2405138c:	68f8      	ldr	r0, [r7, #12]
2405138e:	f000 f82f 	bl	240513f0 <LCD_DisplayChar>
		/* Decrement the column position by 16 */
		refcolumn += font_width;
24051392:	693b      	ldr	r3, [r7, #16]
24051394:	b29a      	uxth	r2, r3
24051396:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
24051398:	4413      	add	r3, r2
2405139a:	84fb      	strh	r3, [r7, #38]	@ 0x26
		/* Point on the next character */
		pText++;
2405139c:	687b      	ldr	r3, [r7, #4]
2405139e:	3301      	adds	r3, #1
240513a0:	607b      	str	r3, [r7, #4]
		i++;
240513a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
240513a4:	3301      	adds	r3, #1
240513a6:	84bb      	strh	r3, [r7, #36]	@ 0x24
	while ((*pText != 0)
240513a8:	687b      	ldr	r3, [r7, #4]
240513aa:	781b      	ldrb	r3, [r3, #0]
			& (((LCD_GetXSize() - (i * font_width)) & 0xFFFF) >= font_width)) {
240513ac:	2b00      	cmp	r3, #0
240513ae:	bf14      	ite	ne
240513b0:	2301      	movne	r3, #1
240513b2:	2300      	moveq	r3, #0
240513b4:	b2dc      	uxtb	r4, r3
240513b6:	f7ff fee1 	bl	2405117c <LCD_GetXSize>
240513ba:	4603      	mov	r3, r0
240513bc:	4619      	mov	r1, r3
240513be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
240513c0:	693a      	ldr	r2, [r7, #16]
240513c2:	fb02 f303 	mul.w	r3, r2, r3
240513c6:	1acb      	subs	r3, r1, r3
240513c8:	b29b      	uxth	r3, r3
240513ca:	693a      	ldr	r2, [r7, #16]
240513cc:	429a      	cmp	r2, r3
240513ce:	bf94      	ite	ls
240513d0:	2301      	movls	r3, #1
240513d2:	2300      	movhi	r3, #0
240513d4:	b2db      	uxtb	r3, r3
240513d6:	4023      	ands	r3, r4
240513d8:	b2db      	uxtb	r3, r3
	while ((*pText != 0)
240513da:	2b00      	cmp	r3, #0
240513dc:	d1d2      	bne.n	24051384 <LCD_DisplayStringAt+0xd8>
	}
}
240513de:	bf00      	nop
240513e0:	bf00      	nop
240513e2:	372c      	adds	r7, #44	@ 0x2c
240513e4:	46bd      	mov	sp, r7
240513e6:	bd90      	pop	{r4, r7, pc}
240513e8:	20000080 	.word	0x20000080
240513ec:	20000086 	.word	0x20000086

240513f0 <LCD_DisplayChar>:
 * @param  Xpos: start column address
 * @param  Ypos: the Line where to display the character shape
 * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
 * @retval None
 */
void LCD_DisplayChar(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint8_t Ascii) {
240513f0:	b580      	push	{r7, lr}
240513f2:	b086      	sub	sp, #24
240513f4:	af02      	add	r7, sp, #8
240513f6:	60f8      	str	r0, [r7, #12]
240513f8:	4608      	mov	r0, r1
240513fa:	4611      	mov	r1, r2
240513fc:	461a      	mov	r2, r3
240513fe:	4603      	mov	r3, r0
24051400:	817b      	strh	r3, [r7, #10]
24051402:	460b      	mov	r3, r1
24051404:	813b      	strh	r3, [r7, #8]
24051406:	4613      	mov	r3, r2
24051408:	71fb      	strb	r3, [r7, #7]
	DrawChar(buf, Xpos, Ypos,
			&font->table[(Ascii - ' ') * font->Height * ((font->Width + 7) / 8)],
2405140a:	4b11      	ldr	r3, [pc, #68]	@ (24051450 <LCD_DisplayChar+0x60>)
2405140c:	681b      	ldr	r3, [r3, #0]
2405140e:	681a      	ldr	r2, [r3, #0]
24051410:	79fb      	ldrb	r3, [r7, #7]
24051412:	3b20      	subs	r3, #32
24051414:	490e      	ldr	r1, [pc, #56]	@ (24051450 <LCD_DisplayChar+0x60>)
24051416:	6809      	ldr	r1, [r1, #0]
24051418:	88c9      	ldrh	r1, [r1, #6]
2405141a:	fb03 f101 	mul.w	r1, r3, r1
2405141e:	4b0c      	ldr	r3, [pc, #48]	@ (24051450 <LCD_DisplayChar+0x60>)
24051420:	681b      	ldr	r3, [r3, #0]
24051422:	889b      	ldrh	r3, [r3, #4]
24051424:	3307      	adds	r3, #7
24051426:	2b00      	cmp	r3, #0
24051428:	da00      	bge.n	2405142c <LCD_DisplayChar+0x3c>
2405142a:	3307      	adds	r3, #7
2405142c:	10db      	asrs	r3, r3, #3
2405142e:	fb01 f303 	mul.w	r3, r1, r3
	DrawChar(buf, Xpos, Ypos,
24051432:	18d0      	adds	r0, r2, r3
24051434:	4b07      	ldr	r3, [pc, #28]	@ (24051454 <LCD_DisplayChar+0x64>)
24051436:	781b      	ldrb	r3, [r3, #0]
24051438:	893a      	ldrh	r2, [r7, #8]
2405143a:	8979      	ldrh	r1, [r7, #10]
2405143c:	9300      	str	r3, [sp, #0]
2405143e:	4603      	mov	r3, r0
24051440:	68f8      	ldr	r0, [r7, #12]
24051442:	f000 fac9 	bl	240519d8 <DrawChar>
			font_scale);
}
24051446:	bf00      	nop
24051448:	3710      	adds	r7, #16
2405144a:	46bd      	mov	sp, r7
2405144c:	bd80      	pop	{r7, pc}
2405144e:	bf00      	nop
24051450:	20000080 	.word	0x20000080
24051454:	20000086 	.word	0x20000086

24051458 <LCD_DrawHLine>:
 * @param  Ypos: the Y position
 * @param  Length: line length
 * @retval None
 */
void LCD_DrawHLine(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint16_t Length,
		uint16_t color) {
24051458:	b580      	push	{r7, lr}
2405145a:	b088      	sub	sp, #32
2405145c:	af02      	add	r7, sp, #8
2405145e:	60f8      	str	r0, [r7, #12]
24051460:	4608      	mov	r0, r1
24051462:	4611      	mov	r1, r2
24051464:	461a      	mov	r2, r3
24051466:	4603      	mov	r3, r0
24051468:	817b      	strh	r3, [r7, #10]
2405146a:	460b      	mov	r3, r1
2405146c:	813b      	strh	r3, [r7, #8]
2405146e:	4613      	mov	r3, r2
24051470:	80fb      	strh	r3, [r7, #6]
	uint16_t *xaddress = 0;
24051472:	2300      	movs	r3, #0
24051474:	617b      	str	r3, [r7, #20]

	/* Get the line address */
	xaddress = (buf) + (LCD_GetXSize() * Ypos + Xpos);
24051476:	f7ff fe81 	bl	2405117c <LCD_GetXSize>
2405147a:	4603      	mov	r3, r0
2405147c:	461a      	mov	r2, r3
2405147e:	893b      	ldrh	r3, [r7, #8]
24051480:	fb03 f202 	mul.w	r2, r3, r2
24051484:	897b      	ldrh	r3, [r7, #10]
24051486:	4413      	add	r3, r2
24051488:	005b      	lsls	r3, r3, #1
2405148a:	68fa      	ldr	r2, [r7, #12]
2405148c:	4413      	add	r3, r2
2405148e:	617b      	str	r3, [r7, #20]

	/* Write line */
	FillBuffer((uint32_t*) xaddress, Length, 1, 0, color);
24051490:	88f9      	ldrh	r1, [r7, #6]
24051492:	8c3b      	ldrh	r3, [r7, #32]
24051494:	9300      	str	r3, [sp, #0]
24051496:	2300      	movs	r3, #0
24051498:	2201      	movs	r2, #1
2405149a:	6978      	ldr	r0, [r7, #20]
2405149c:	f000 fb5e 	bl	24051b5c <FillBuffer>
}
240514a0:	bf00      	nop
240514a2:	3718      	adds	r7, #24
240514a4:	46bd      	mov	sp, r7
240514a6:	bd80      	pop	{r7, pc}

240514a8 <LCD_DrawVLine>:
 * @param  Ypos: the Y position
 * @param  Length: line length
 * @retval None
 */
void LCD_DrawVLine(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint16_t Length,
		uint16_t color) {
240514a8:	b590      	push	{r4, r7, lr}
240514aa:	b089      	sub	sp, #36	@ 0x24
240514ac:	af02      	add	r7, sp, #8
240514ae:	60f8      	str	r0, [r7, #12]
240514b0:	4608      	mov	r0, r1
240514b2:	4611      	mov	r1, r2
240514b4:	461a      	mov	r2, r3
240514b6:	4603      	mov	r3, r0
240514b8:	817b      	strh	r3, [r7, #10]
240514ba:	460b      	mov	r3, r1
240514bc:	813b      	strh	r3, [r7, #8]
240514be:	4613      	mov	r3, r2
240514c0:	80fb      	strh	r3, [r7, #6]
	uint16_t *xaddress = 0;
240514c2:	2300      	movs	r3, #0
240514c4:	617b      	str	r3, [r7, #20]

	/* Get the line address */
	xaddress = (buf) + (LCD_GetXSize() * Ypos + Xpos);
240514c6:	f7ff fe59 	bl	2405117c <LCD_GetXSize>
240514ca:	4603      	mov	r3, r0
240514cc:	461a      	mov	r2, r3
240514ce:	893b      	ldrh	r3, [r7, #8]
240514d0:	fb03 f202 	mul.w	r2, r3, r2
240514d4:	897b      	ldrh	r3, [r7, #10]
240514d6:	4413      	add	r3, r2
240514d8:	005b      	lsls	r3, r3, #1
240514da:	68fa      	ldr	r2, [r7, #12]
240514dc:	4413      	add	r3, r2
240514de:	617b      	str	r3, [r7, #20]

	/* Write line */
	FillBuffer((uint32_t*) xaddress, 1, Length, (LCD_GetXSize() - 1), color);
240514e0:	88fc      	ldrh	r4, [r7, #6]
240514e2:	f7ff fe4b 	bl	2405117c <LCD_GetXSize>
240514e6:	4603      	mov	r3, r0
240514e8:	3b01      	subs	r3, #1
240514ea:	461a      	mov	r2, r3
240514ec:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
240514ee:	9300      	str	r3, [sp, #0]
240514f0:	4613      	mov	r3, r2
240514f2:	4622      	mov	r2, r4
240514f4:	2101      	movs	r1, #1
240514f6:	6978      	ldr	r0, [r7, #20]
240514f8:	f000 fb30 	bl	24051b5c <FillBuffer>
}
240514fc:	bf00      	nop
240514fe:	371c      	adds	r7, #28
24051500:	46bd      	mov	sp, r7
24051502:	bd90      	pop	{r4, r7, pc}

24051504 <LCD_DrawLine>:
 * @param  X2: the point 2 X position
 * @param  Y2: the point 2 Y position
 * @retval None
 */
void LCD_DrawLine(uint16_t *buf, uint16_t X1, uint16_t Y1, uint16_t X2,
		uint16_t Y2, uint16_t color) {
24051504:	b580      	push	{r7, lr}
24051506:	b08c      	sub	sp, #48	@ 0x30
24051508:	af00      	add	r7, sp, #0
2405150a:	60f8      	str	r0, [r7, #12]
2405150c:	4608      	mov	r0, r1
2405150e:	4611      	mov	r1, r2
24051510:	461a      	mov	r2, r3
24051512:	4603      	mov	r3, r0
24051514:	817b      	strh	r3, [r7, #10]
24051516:	460b      	mov	r3, r1
24051518:	813b      	strh	r3, [r7, #8]
2405151a:	4613      	mov	r3, r2
2405151c:	80fb      	strh	r3, [r7, #6]
	int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, yinc1 =
2405151e:	2300      	movs	r3, #0
24051520:	833b      	strh	r3, [r7, #24]
24051522:	2300      	movs	r3, #0
24051524:	82fb      	strh	r3, [r7, #22]
24051526:	2300      	movs	r3, #0
24051528:	85fb      	strh	r3, [r7, #46]	@ 0x2e
2405152a:	2300      	movs	r3, #0
2405152c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
2405152e:	2300      	movs	r3, #0
24051530:	857b      	strh	r3, [r7, #42]	@ 0x2a
24051532:	2300      	movs	r3, #0
24051534:	853b      	strh	r3, [r7, #40]	@ 0x28
24051536:	2300      	movs	r3, #0
24051538:	84fb      	strh	r3, [r7, #38]	@ 0x26
			0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0,
2405153a:	2300      	movs	r3, #0
2405153c:	84bb      	strh	r3, [r7, #36]	@ 0x24
2405153e:	2300      	movs	r3, #0
24051540:	847b      	strh	r3, [r7, #34]	@ 0x22
24051542:	2300      	movs	r3, #0
24051544:	843b      	strh	r3, [r7, #32]
24051546:	2300      	movs	r3, #0
24051548:	83fb      	strh	r3, [r7, #30]
2405154a:	2300      	movs	r3, #0
2405154c:	83bb      	strh	r3, [r7, #28]
			curpixel = 0;
2405154e:	2300      	movs	r3, #0
24051550:	837b      	strh	r3, [r7, #26]

	deltax = ABS(X2 - X1); /* The difference between the x's */
24051552:	88fa      	ldrh	r2, [r7, #6]
24051554:	897b      	ldrh	r3, [r7, #10]
24051556:	1ad3      	subs	r3, r2, r3
24051558:	2b00      	cmp	r3, #0
2405155a:	bfb8      	it	lt
2405155c:	425b      	neglt	r3, r3
2405155e:	833b      	strh	r3, [r7, #24]
	deltay = ABS(Y2 - Y1); /* The difference between the y's */
24051560:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
24051562:	893b      	ldrh	r3, [r7, #8]
24051564:	1ad3      	subs	r3, r2, r3
24051566:	2b00      	cmp	r3, #0
24051568:	bfb8      	it	lt
2405156a:	425b      	neglt	r3, r3
2405156c:	82fb      	strh	r3, [r7, #22]
	x = X1; /* Start x off at the first pixel */
2405156e:	897b      	ldrh	r3, [r7, #10]
24051570:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	y = Y1; /* Start y off at the first pixel */
24051572:	893b      	ldrh	r3, [r7, #8]
24051574:	85bb      	strh	r3, [r7, #44]	@ 0x2c

	if (X2 >= X1) /* The x-values are increasing */
24051576:	88fa      	ldrh	r2, [r7, #6]
24051578:	897b      	ldrh	r3, [r7, #10]
2405157a:	429a      	cmp	r2, r3
2405157c:	d304      	bcc.n	24051588 <LCD_DrawLine+0x84>
	{
		xinc1 = 1;
2405157e:	2301      	movs	r3, #1
24051580:	857b      	strh	r3, [r7, #42]	@ 0x2a
		xinc2 = 1;
24051582:	2301      	movs	r3, #1
24051584:	853b      	strh	r3, [r7, #40]	@ 0x28
24051586:	e005      	b.n	24051594 <LCD_DrawLine+0x90>
	} else /* The x-values are decreasing */
	{
		xinc1 = -1;
24051588:	f64f 73ff 	movw	r3, #65535	@ 0xffff
2405158c:	857b      	strh	r3, [r7, #42]	@ 0x2a
		xinc2 = -1;
2405158e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
24051592:	853b      	strh	r3, [r7, #40]	@ 0x28
	}

	if (Y2 >= Y1) /* The y-values are increasing */
24051594:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
24051596:	893b      	ldrh	r3, [r7, #8]
24051598:	429a      	cmp	r2, r3
2405159a:	d304      	bcc.n	240515a6 <LCD_DrawLine+0xa2>
	{
		yinc1 = 1;
2405159c:	2301      	movs	r3, #1
2405159e:	84fb      	strh	r3, [r7, #38]	@ 0x26
		yinc2 = 1;
240515a0:	2301      	movs	r3, #1
240515a2:	84bb      	strh	r3, [r7, #36]	@ 0x24
240515a4:	e005      	b.n	240515b2 <LCD_DrawLine+0xae>
	} else /* The y-values are decreasing */
	{
		yinc1 = -1;
240515a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
240515aa:	84fb      	strh	r3, [r7, #38]	@ 0x26
		yinc2 = -1;
240515ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
240515b0:	84bb      	strh	r3, [r7, #36]	@ 0x24
	}

	if (deltax >= deltay) /* There is at least one x-value for every y-value */
240515b2:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
240515b6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
240515ba:	429a      	cmp	r2, r3
240515bc:	db11      	blt.n	240515e2 <LCD_DrawLine+0xde>
	{
		xinc1 = 0; /* Don't change the x when numerator >= denominator */
240515be:	2300      	movs	r3, #0
240515c0:	857b      	strh	r3, [r7, #42]	@ 0x2a
		yinc2 = 0; /* Don't change the y for every iteration */
240515c2:	2300      	movs	r3, #0
240515c4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		den = deltax;
240515c6:	8b3b      	ldrh	r3, [r7, #24]
240515c8:	847b      	strh	r3, [r7, #34]	@ 0x22
		num = deltax / 2;
240515ca:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
240515ce:	2b00      	cmp	r3, #0
240515d0:	da00      	bge.n	240515d4 <LCD_DrawLine+0xd0>
240515d2:	3301      	adds	r3, #1
240515d4:	105b      	asrs	r3, r3, #1
240515d6:	843b      	strh	r3, [r7, #32]
		numadd = deltay;
240515d8:	8afb      	ldrh	r3, [r7, #22]
240515da:	83fb      	strh	r3, [r7, #30]
		numpixels = deltax; /* There are more x-values than y-values */
240515dc:	8b3b      	ldrh	r3, [r7, #24]
240515de:	83bb      	strh	r3, [r7, #28]
240515e0:	e010      	b.n	24051604 <LCD_DrawLine+0x100>
	} else /* There is at least one y-value for every x-value */
	{
		xinc2 = 0; /* Don't change the x for every iteration */
240515e2:	2300      	movs	r3, #0
240515e4:	853b      	strh	r3, [r7, #40]	@ 0x28
		yinc1 = 0; /* Don't change the y when numerator >= denominator */
240515e6:	2300      	movs	r3, #0
240515e8:	84fb      	strh	r3, [r7, #38]	@ 0x26
		den = deltay;
240515ea:	8afb      	ldrh	r3, [r7, #22]
240515ec:	847b      	strh	r3, [r7, #34]	@ 0x22
		num = deltay / 2;
240515ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
240515f2:	2b00      	cmp	r3, #0
240515f4:	da00      	bge.n	240515f8 <LCD_DrawLine+0xf4>
240515f6:	3301      	adds	r3, #1
240515f8:	105b      	asrs	r3, r3, #1
240515fa:	843b      	strh	r3, [r7, #32]
		numadd = deltax;
240515fc:	8b3b      	ldrh	r3, [r7, #24]
240515fe:	83fb      	strh	r3, [r7, #30]
		numpixels = deltay; /* There are more y-values than x-values */
24051600:	8afb      	ldrh	r3, [r7, #22]
24051602:	83bb      	strh	r3, [r7, #28]
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
24051604:	2300      	movs	r3, #0
24051606:	837b      	strh	r3, [r7, #26]
24051608:	e02f      	b.n	2405166a <LCD_DrawLine+0x166>
		LCD_DrawPixel(buf, x, y, color); /* Draw the current pixel */
2405160a:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
2405160c:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
2405160e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
24051610:	68f8      	ldr	r0, [r7, #12]
24051612:	f7ff fe05 	bl	24051220 <LCD_DrawPixel>
		num += numadd; /* Increase the numerator by the top of the fraction */
24051616:	8c3a      	ldrh	r2, [r7, #32]
24051618:	8bfb      	ldrh	r3, [r7, #30]
2405161a:	4413      	add	r3, r2
2405161c:	b29b      	uxth	r3, r3
2405161e:	843b      	strh	r3, [r7, #32]
		if (num >= den) /* Check if numerator >= denominator */
24051620:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
24051624:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
24051628:	429a      	cmp	r2, r3
2405162a:	db0e      	blt.n	2405164a <LCD_DrawLine+0x146>
		{
			num -= den; /* Calculate the new numerator value */
2405162c:	8c3a      	ldrh	r2, [r7, #32]
2405162e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
24051630:	1ad3      	subs	r3, r2, r3
24051632:	b29b      	uxth	r3, r3
24051634:	843b      	strh	r3, [r7, #32]
			x += xinc1; /* Change the x as appropriate */
24051636:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
24051638:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
2405163a:	4413      	add	r3, r2
2405163c:	b29b      	uxth	r3, r3
2405163e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
			y += yinc1; /* Change the y as appropriate */
24051640:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
24051642:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
24051644:	4413      	add	r3, r2
24051646:	b29b      	uxth	r3, r3
24051648:	85bb      	strh	r3, [r7, #44]	@ 0x2c
		}
		x += xinc2; /* Change the x as appropriate */
2405164a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
2405164c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
2405164e:	4413      	add	r3, r2
24051650:	b29b      	uxth	r3, r3
24051652:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		y += yinc2; /* Change the y as appropriate */
24051654:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
24051656:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
24051658:	4413      	add	r3, r2
2405165a:	b29b      	uxth	r3, r3
2405165c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
2405165e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
24051662:	b29b      	uxth	r3, r3
24051664:	3301      	adds	r3, #1
24051666:	b29b      	uxth	r3, r3
24051668:	837b      	strh	r3, [r7, #26]
2405166a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
2405166e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
24051672:	429a      	cmp	r2, r3
24051674:	ddc9      	ble.n	2405160a <LCD_DrawLine+0x106>
	}
}
24051676:	bf00      	nop
24051678:	bf00      	nop
2405167a:	3730      	adds	r7, #48	@ 0x30
2405167c:	46bd      	mov	sp, r7
2405167e:	bd80      	pop	{r7, pc}

24051680 <LCD_DrawRect>:
 * @param  Height: display rectangle height
 * @param  Width: display rectangle width
 * @retval None
 */
void LCD_DrawRect(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint16_t Width,
		uint16_t Height, uint16_t color) {
24051680:	b580      	push	{r7, lr}
24051682:	b086      	sub	sp, #24
24051684:	af02      	add	r7, sp, #8
24051686:	60f8      	str	r0, [r7, #12]
24051688:	4608      	mov	r0, r1
2405168a:	4611      	mov	r1, r2
2405168c:	461a      	mov	r2, r3
2405168e:	4603      	mov	r3, r0
24051690:	817b      	strh	r3, [r7, #10]
24051692:	460b      	mov	r3, r1
24051694:	813b      	strh	r3, [r7, #8]
24051696:	4613      	mov	r3, r2
24051698:	80fb      	strh	r3, [r7, #6]
	/* Draw horizontal lines */
	LCD_DrawHLine(buf, Xpos, Ypos, Width, color);
2405169a:	88f8      	ldrh	r0, [r7, #6]
2405169c:	893a      	ldrh	r2, [r7, #8]
2405169e:	8979      	ldrh	r1, [r7, #10]
240516a0:	8bbb      	ldrh	r3, [r7, #28]
240516a2:	9300      	str	r3, [sp, #0]
240516a4:	4603      	mov	r3, r0
240516a6:	68f8      	ldr	r0, [r7, #12]
240516a8:	f7ff fed6 	bl	24051458 <LCD_DrawHLine>
	LCD_DrawHLine(buf, Xpos, (Ypos + Height), Width, color);
240516ac:	893a      	ldrh	r2, [r7, #8]
240516ae:	8b3b      	ldrh	r3, [r7, #24]
240516b0:	4413      	add	r3, r2
240516b2:	b29a      	uxth	r2, r3
240516b4:	88f8      	ldrh	r0, [r7, #6]
240516b6:	8979      	ldrh	r1, [r7, #10]
240516b8:	8bbb      	ldrh	r3, [r7, #28]
240516ba:	9300      	str	r3, [sp, #0]
240516bc:	4603      	mov	r3, r0
240516be:	68f8      	ldr	r0, [r7, #12]
240516c0:	f7ff feca 	bl	24051458 <LCD_DrawHLine>

	/* Draw vertical lines */
	LCD_DrawVLine(buf, Xpos, Ypos, Height, color);
240516c4:	8b38      	ldrh	r0, [r7, #24]
240516c6:	893a      	ldrh	r2, [r7, #8]
240516c8:	8979      	ldrh	r1, [r7, #10]
240516ca:	8bbb      	ldrh	r3, [r7, #28]
240516cc:	9300      	str	r3, [sp, #0]
240516ce:	4603      	mov	r3, r0
240516d0:	68f8      	ldr	r0, [r7, #12]
240516d2:	f7ff fee9 	bl	240514a8 <LCD_DrawVLine>
	LCD_DrawVLine(buf, (Xpos + Width), Ypos, Height, color);
240516d6:	897a      	ldrh	r2, [r7, #10]
240516d8:	88fb      	ldrh	r3, [r7, #6]
240516da:	4413      	add	r3, r2
240516dc:	b299      	uxth	r1, r3
240516de:	8b38      	ldrh	r0, [r7, #24]
240516e0:	893a      	ldrh	r2, [r7, #8]
240516e2:	8bbb      	ldrh	r3, [r7, #28]
240516e4:	9300      	str	r3, [sp, #0]
240516e6:	4603      	mov	r3, r0
240516e8:	68f8      	ldr	r0, [r7, #12]
240516ea:	f7ff fedd 	bl	240514a8 <LCD_DrawVLine>
}
240516ee:	bf00      	nop
240516f0:	3710      	adds	r7, #16
240516f2:	46bd      	mov	sp, r7
240516f4:	bd80      	pop	{r7, pc}

240516f6 <LCD_DrawCircle>:
 * @param  Ypos: the Y position
 * @param  Radius: the circle radius
 * @retval None
 */
void LCD_DrawCircle(uint16_t *buf, uint16_t Xpos, uint16_t Ypos,
		uint16_t Radius, uint16_t color) {
240516f6:	b580      	push	{r7, lr}
240516f8:	b088      	sub	sp, #32
240516fa:	af00      	add	r7, sp, #0
240516fc:	60f8      	str	r0, [r7, #12]
240516fe:	4608      	mov	r0, r1
24051700:	4611      	mov	r1, r2
24051702:	461a      	mov	r2, r3
24051704:	4603      	mov	r3, r0
24051706:	817b      	strh	r3, [r7, #10]
24051708:	460b      	mov	r3, r1
2405170a:	813b      	strh	r3, [r7, #8]
2405170c:	4613      	mov	r3, r2
2405170e:	80fb      	strh	r3, [r7, #6]
	int32_t d;/* Decision Variable */
	uint32_t curx;/* Current X Value */
	uint32_t cury;/* Current Y Value */

	d = 3 - (Radius << 1);
24051710:	88fb      	ldrh	r3, [r7, #6]
24051712:	005b      	lsls	r3, r3, #1
24051714:	f1c3 0303 	rsb	r3, r3, #3
24051718:	61fb      	str	r3, [r7, #28]
	curx = 0;
2405171a:	2300      	movs	r3, #0
2405171c:	61bb      	str	r3, [r7, #24]
	cury = Radius;
2405171e:	88fb      	ldrh	r3, [r7, #6]
24051720:	617b      	str	r3, [r7, #20]

	while (curx <= cury) {
24051722:	e087      	b.n	24051834 <LCD_DrawCircle+0x13e>
		LCD_DrawPixel(buf, (Xpos + curx), (Ypos - cury), color);
24051724:	69bb      	ldr	r3, [r7, #24]
24051726:	b29a      	uxth	r2, r3
24051728:	897b      	ldrh	r3, [r7, #10]
2405172a:	4413      	add	r3, r2
2405172c:	b299      	uxth	r1, r3
2405172e:	697b      	ldr	r3, [r7, #20]
24051730:	b29b      	uxth	r3, r3
24051732:	893a      	ldrh	r2, [r7, #8]
24051734:	1ad3      	subs	r3, r2, r3
24051736:	b29a      	uxth	r2, r3
24051738:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
2405173a:	68f8      	ldr	r0, [r7, #12]
2405173c:	f7ff fd70 	bl	24051220 <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos - curx), (Ypos - cury), color);
24051740:	69bb      	ldr	r3, [r7, #24]
24051742:	b29b      	uxth	r3, r3
24051744:	897a      	ldrh	r2, [r7, #10]
24051746:	1ad3      	subs	r3, r2, r3
24051748:	b299      	uxth	r1, r3
2405174a:	697b      	ldr	r3, [r7, #20]
2405174c:	b29b      	uxth	r3, r3
2405174e:	893a      	ldrh	r2, [r7, #8]
24051750:	1ad3      	subs	r3, r2, r3
24051752:	b29a      	uxth	r2, r3
24051754:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
24051756:	68f8      	ldr	r0, [r7, #12]
24051758:	f7ff fd62 	bl	24051220 <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos + cury), (Ypos - curx), color);
2405175c:	697b      	ldr	r3, [r7, #20]
2405175e:	b29a      	uxth	r2, r3
24051760:	897b      	ldrh	r3, [r7, #10]
24051762:	4413      	add	r3, r2
24051764:	b299      	uxth	r1, r3
24051766:	69bb      	ldr	r3, [r7, #24]
24051768:	b29b      	uxth	r3, r3
2405176a:	893a      	ldrh	r2, [r7, #8]
2405176c:	1ad3      	subs	r3, r2, r3
2405176e:	b29a      	uxth	r2, r3
24051770:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
24051772:	68f8      	ldr	r0, [r7, #12]
24051774:	f7ff fd54 	bl	24051220 <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos - cury), (Ypos - curx), color);
24051778:	697b      	ldr	r3, [r7, #20]
2405177a:	b29b      	uxth	r3, r3
2405177c:	897a      	ldrh	r2, [r7, #10]
2405177e:	1ad3      	subs	r3, r2, r3
24051780:	b299      	uxth	r1, r3
24051782:	69bb      	ldr	r3, [r7, #24]
24051784:	b29b      	uxth	r3, r3
24051786:	893a      	ldrh	r2, [r7, #8]
24051788:	1ad3      	subs	r3, r2, r3
2405178a:	b29a      	uxth	r2, r3
2405178c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
2405178e:	68f8      	ldr	r0, [r7, #12]
24051790:	f7ff fd46 	bl	24051220 <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos + curx), (Ypos + cury), color);
24051794:	69bb      	ldr	r3, [r7, #24]
24051796:	b29a      	uxth	r2, r3
24051798:	897b      	ldrh	r3, [r7, #10]
2405179a:	4413      	add	r3, r2
2405179c:	b299      	uxth	r1, r3
2405179e:	697b      	ldr	r3, [r7, #20]
240517a0:	b29a      	uxth	r2, r3
240517a2:	893b      	ldrh	r3, [r7, #8]
240517a4:	4413      	add	r3, r2
240517a6:	b29a      	uxth	r2, r3
240517a8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
240517aa:	68f8      	ldr	r0, [r7, #12]
240517ac:	f7ff fd38 	bl	24051220 <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos - curx), (Ypos + cury), color);
240517b0:	69bb      	ldr	r3, [r7, #24]
240517b2:	b29b      	uxth	r3, r3
240517b4:	897a      	ldrh	r2, [r7, #10]
240517b6:	1ad3      	subs	r3, r2, r3
240517b8:	b299      	uxth	r1, r3
240517ba:	697b      	ldr	r3, [r7, #20]
240517bc:	b29a      	uxth	r2, r3
240517be:	893b      	ldrh	r3, [r7, #8]
240517c0:	4413      	add	r3, r2
240517c2:	b29a      	uxth	r2, r3
240517c4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
240517c6:	68f8      	ldr	r0, [r7, #12]
240517c8:	f7ff fd2a 	bl	24051220 <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos + cury), (Ypos + curx), color);
240517cc:	697b      	ldr	r3, [r7, #20]
240517ce:	b29a      	uxth	r2, r3
240517d0:	897b      	ldrh	r3, [r7, #10]
240517d2:	4413      	add	r3, r2
240517d4:	b299      	uxth	r1, r3
240517d6:	69bb      	ldr	r3, [r7, #24]
240517d8:	b29a      	uxth	r2, r3
240517da:	893b      	ldrh	r3, [r7, #8]
240517dc:	4413      	add	r3, r2
240517de:	b29a      	uxth	r2, r3
240517e0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
240517e2:	68f8      	ldr	r0, [r7, #12]
240517e4:	f7ff fd1c 	bl	24051220 <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos - cury), (Ypos + curx), color);
240517e8:	697b      	ldr	r3, [r7, #20]
240517ea:	b29b      	uxth	r3, r3
240517ec:	897a      	ldrh	r2, [r7, #10]
240517ee:	1ad3      	subs	r3, r2, r3
240517f0:	b299      	uxth	r1, r3
240517f2:	69bb      	ldr	r3, [r7, #24]
240517f4:	b29a      	uxth	r2, r3
240517f6:	893b      	ldrh	r3, [r7, #8]
240517f8:	4413      	add	r3, r2
240517fa:	b29a      	uxth	r2, r3
240517fc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
240517fe:	68f8      	ldr	r0, [r7, #12]
24051800:	f7ff fd0e 	bl	24051220 <LCD_DrawPixel>

		if (d < 0) {
24051804:	69fb      	ldr	r3, [r7, #28]
24051806:	2b00      	cmp	r3, #0
24051808:	da06      	bge.n	24051818 <LCD_DrawCircle+0x122>
			d += (curx << 2) + 6;
2405180a:	69bb      	ldr	r3, [r7, #24]
2405180c:	009a      	lsls	r2, r3, #2
2405180e:	69fb      	ldr	r3, [r7, #28]
24051810:	4413      	add	r3, r2
24051812:	3306      	adds	r3, #6
24051814:	61fb      	str	r3, [r7, #28]
24051816:	e00a      	b.n	2405182e <LCD_DrawCircle+0x138>
		} else {
			d += ((curx - cury) << 2) + 10;
24051818:	69ba      	ldr	r2, [r7, #24]
2405181a:	697b      	ldr	r3, [r7, #20]
2405181c:	1ad3      	subs	r3, r2, r3
2405181e:	009a      	lsls	r2, r3, #2
24051820:	69fb      	ldr	r3, [r7, #28]
24051822:	4413      	add	r3, r2
24051824:	330a      	adds	r3, #10
24051826:	61fb      	str	r3, [r7, #28]
			cury--;
24051828:	697b      	ldr	r3, [r7, #20]
2405182a:	3b01      	subs	r3, #1
2405182c:	617b      	str	r3, [r7, #20]
		}
		curx++;
2405182e:	69bb      	ldr	r3, [r7, #24]
24051830:	3301      	adds	r3, #1
24051832:	61bb      	str	r3, [r7, #24]
	while (curx <= cury) {
24051834:	69ba      	ldr	r2, [r7, #24]
24051836:	697b      	ldr	r3, [r7, #20]
24051838:	429a      	cmp	r2, r3
2405183a:	f67f af73 	bls.w	24051724 <LCD_DrawCircle+0x2e>
	}
}
2405183e:	bf00      	nop
24051840:	bf00      	nop
24051842:	3720      	adds	r7, #32
24051844:	46bd      	mov	sp, r7
24051846:	bd80      	pop	{r7, pc}

24051848 <LCD_FillRect>:
 * @param  Height: rectangle height
 * @param  Width: rectangle width
 * @retval None
 */
void LCD_FillRect(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint16_t Width,
		uint16_t Height, uint16_t color) {
24051848:	b5b0      	push	{r4, r5, r7, lr}
2405184a:	b088      	sub	sp, #32
2405184c:	af02      	add	r7, sp, #8
2405184e:	60f8      	str	r0, [r7, #12]
24051850:	4608      	mov	r0, r1
24051852:	4611      	mov	r1, r2
24051854:	461a      	mov	r2, r3
24051856:	4603      	mov	r3, r0
24051858:	817b      	strh	r3, [r7, #10]
2405185a:	460b      	mov	r3, r1
2405185c:	813b      	strh	r3, [r7, #8]
2405185e:	4613      	mov	r3, r2
24051860:	80fb      	strh	r3, [r7, #6]
	uint16_t *xaddress = 0;
24051862:	2300      	movs	r3, #0
24051864:	617b      	str	r3, [r7, #20]

	/* Get the rectangle start address */
	xaddress = (buf) + (LCD_GetXSize() * Ypos + Xpos);
24051866:	f7ff fc89 	bl	2405117c <LCD_GetXSize>
2405186a:	4603      	mov	r3, r0
2405186c:	461a      	mov	r2, r3
2405186e:	893b      	ldrh	r3, [r7, #8]
24051870:	fb03 f202 	mul.w	r2, r3, r2
24051874:	897b      	ldrh	r3, [r7, #10]
24051876:	4413      	add	r3, r2
24051878:	005b      	lsls	r3, r3, #1
2405187a:	68fa      	ldr	r2, [r7, #12]
2405187c:	4413      	add	r3, r2
2405187e:	617b      	str	r3, [r7, #20]

	/* Fill the rectangle */
	FillBuffer((uint32_t*) xaddress, Width, Height, (LCD_GetXSize() - Width),
24051880:	88fc      	ldrh	r4, [r7, #6]
24051882:	8d3d      	ldrh	r5, [r7, #40]	@ 0x28
24051884:	f7ff fc7a 	bl	2405117c <LCD_GetXSize>
24051888:	4603      	mov	r3, r0
2405188a:	461a      	mov	r2, r3
2405188c:	88fb      	ldrh	r3, [r7, #6]
2405188e:	1ad3      	subs	r3, r2, r3
24051890:	461a      	mov	r2, r3
24051892:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
24051894:	9300      	str	r3, [sp, #0]
24051896:	4613      	mov	r3, r2
24051898:	462a      	mov	r2, r5
2405189a:	4621      	mov	r1, r4
2405189c:	6978      	ldr	r0, [r7, #20]
2405189e:	f000 f95d 	bl	24051b5c <FillBuffer>
			color);
}
240518a2:	bf00      	nop
240518a4:	3718      	adds	r7, #24
240518a6:	46bd      	mov	sp, r7
240518a8:	bdb0      	pop	{r4, r5, r7, pc}

240518aa <LCD_FillCircle>:
 * @param  Ypos: the Y position
 * @param  Radius: the circle radius
 * @retval None
 */
void LCD_FillCircle(uint16_t *buf, uint16_t Xpos, uint16_t Ypos,
		uint16_t Radius, uint16_t color) {
240518aa:	b580      	push	{r7, lr}
240518ac:	b08a      	sub	sp, #40	@ 0x28
240518ae:	af02      	add	r7, sp, #8
240518b0:	60f8      	str	r0, [r7, #12]
240518b2:	4608      	mov	r0, r1
240518b4:	4611      	mov	r1, r2
240518b6:	461a      	mov	r2, r3
240518b8:	4603      	mov	r3, r0
240518ba:	817b      	strh	r3, [r7, #10]
240518bc:	460b      	mov	r3, r1
240518be:	813b      	strh	r3, [r7, #8]
240518c0:	4613      	mov	r3, r2
240518c2:	80fb      	strh	r3, [r7, #6]
	int32_t d; /* Decision Variable */
	uint32_t curx;/* Current X Value */
	uint32_t cury;/* Current Y Value */

	d = 3 - (Radius << 1);
240518c4:	88fb      	ldrh	r3, [r7, #6]
240518c6:	005b      	lsls	r3, r3, #1
240518c8:	f1c3 0303 	rsb	r3, r3, #3
240518cc:	61fb      	str	r3, [r7, #28]

	curx = 0;
240518ce:	2300      	movs	r3, #0
240518d0:	61bb      	str	r3, [r7, #24]
	cury = Radius;
240518d2:	88fb      	ldrh	r3, [r7, #6]
240518d4:	617b      	str	r3, [r7, #20]

	while (curx <= cury) {
240518d6:	e06d      	b.n	240519b4 <LCD_FillCircle+0x10a>
		if (cury > 0) {
240518d8:	697b      	ldr	r3, [r7, #20]
240518da:	2b00      	cmp	r3, #0
240518dc:	d027      	beq.n	2405192e <LCD_FillCircle+0x84>
			LCD_DrawHLine(buf, Xpos - cury, Ypos + curx, 2 * cury, color);
240518de:	697b      	ldr	r3, [r7, #20]
240518e0:	b29b      	uxth	r3, r3
240518e2:	897a      	ldrh	r2, [r7, #10]
240518e4:	1ad3      	subs	r3, r2, r3
240518e6:	b299      	uxth	r1, r3
240518e8:	69bb      	ldr	r3, [r7, #24]
240518ea:	b29a      	uxth	r2, r3
240518ec:	893b      	ldrh	r3, [r7, #8]
240518ee:	4413      	add	r3, r2
240518f0:	b29a      	uxth	r2, r3
240518f2:	697b      	ldr	r3, [r7, #20]
240518f4:	b29b      	uxth	r3, r3
240518f6:	005b      	lsls	r3, r3, #1
240518f8:	b298      	uxth	r0, r3
240518fa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
240518fc:	9300      	str	r3, [sp, #0]
240518fe:	4603      	mov	r3, r0
24051900:	68f8      	ldr	r0, [r7, #12]
24051902:	f7ff fda9 	bl	24051458 <LCD_DrawHLine>
			LCD_DrawHLine(buf, Xpos - cury, Ypos - curx, 2 * cury, color);
24051906:	697b      	ldr	r3, [r7, #20]
24051908:	b29b      	uxth	r3, r3
2405190a:	897a      	ldrh	r2, [r7, #10]
2405190c:	1ad3      	subs	r3, r2, r3
2405190e:	b299      	uxth	r1, r3
24051910:	69bb      	ldr	r3, [r7, #24]
24051912:	b29b      	uxth	r3, r3
24051914:	893a      	ldrh	r2, [r7, #8]
24051916:	1ad3      	subs	r3, r2, r3
24051918:	b29a      	uxth	r2, r3
2405191a:	697b      	ldr	r3, [r7, #20]
2405191c:	b29b      	uxth	r3, r3
2405191e:	005b      	lsls	r3, r3, #1
24051920:	b298      	uxth	r0, r3
24051922:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
24051924:	9300      	str	r3, [sp, #0]
24051926:	4603      	mov	r3, r0
24051928:	68f8      	ldr	r0, [r7, #12]
2405192a:	f7ff fd95 	bl	24051458 <LCD_DrawHLine>
		}

		if (curx > 0) {
2405192e:	69bb      	ldr	r3, [r7, #24]
24051930:	2b00      	cmp	r3, #0
24051932:	d027      	beq.n	24051984 <LCD_FillCircle+0xda>
			LCD_DrawHLine(buf, Xpos - curx, Ypos - cury, 2 * curx, color);
24051934:	69bb      	ldr	r3, [r7, #24]
24051936:	b29b      	uxth	r3, r3
24051938:	897a      	ldrh	r2, [r7, #10]
2405193a:	1ad3      	subs	r3, r2, r3
2405193c:	b299      	uxth	r1, r3
2405193e:	697b      	ldr	r3, [r7, #20]
24051940:	b29b      	uxth	r3, r3
24051942:	893a      	ldrh	r2, [r7, #8]
24051944:	1ad3      	subs	r3, r2, r3
24051946:	b29a      	uxth	r2, r3
24051948:	69bb      	ldr	r3, [r7, #24]
2405194a:	b29b      	uxth	r3, r3
2405194c:	005b      	lsls	r3, r3, #1
2405194e:	b298      	uxth	r0, r3
24051950:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
24051952:	9300      	str	r3, [sp, #0]
24051954:	4603      	mov	r3, r0
24051956:	68f8      	ldr	r0, [r7, #12]
24051958:	f7ff fd7e 	bl	24051458 <LCD_DrawHLine>
			LCD_DrawHLine(buf, Xpos - curx, Ypos + cury, 2 * curx, color);
2405195c:	69bb      	ldr	r3, [r7, #24]
2405195e:	b29b      	uxth	r3, r3
24051960:	897a      	ldrh	r2, [r7, #10]
24051962:	1ad3      	subs	r3, r2, r3
24051964:	b299      	uxth	r1, r3
24051966:	697b      	ldr	r3, [r7, #20]
24051968:	b29a      	uxth	r2, r3
2405196a:	893b      	ldrh	r3, [r7, #8]
2405196c:	4413      	add	r3, r2
2405196e:	b29a      	uxth	r2, r3
24051970:	69bb      	ldr	r3, [r7, #24]
24051972:	b29b      	uxth	r3, r3
24051974:	005b      	lsls	r3, r3, #1
24051976:	b298      	uxth	r0, r3
24051978:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
2405197a:	9300      	str	r3, [sp, #0]
2405197c:	4603      	mov	r3, r0
2405197e:	68f8      	ldr	r0, [r7, #12]
24051980:	f7ff fd6a 	bl	24051458 <LCD_DrawHLine>
		}
		if (d < 0) {
24051984:	69fb      	ldr	r3, [r7, #28]
24051986:	2b00      	cmp	r3, #0
24051988:	da06      	bge.n	24051998 <LCD_FillCircle+0xee>
			d += (curx << 2) + 6;
2405198a:	69bb      	ldr	r3, [r7, #24]
2405198c:	009a      	lsls	r2, r3, #2
2405198e:	69fb      	ldr	r3, [r7, #28]
24051990:	4413      	add	r3, r2
24051992:	3306      	adds	r3, #6
24051994:	61fb      	str	r3, [r7, #28]
24051996:	e00a      	b.n	240519ae <LCD_FillCircle+0x104>
		} else {
			d += ((curx - cury) << 2) + 10;
24051998:	69ba      	ldr	r2, [r7, #24]
2405199a:	697b      	ldr	r3, [r7, #20]
2405199c:	1ad3      	subs	r3, r2, r3
2405199e:	009a      	lsls	r2, r3, #2
240519a0:	69fb      	ldr	r3, [r7, #28]
240519a2:	4413      	add	r3, r2
240519a4:	330a      	adds	r3, #10
240519a6:	61fb      	str	r3, [r7, #28]
			cury--;
240519a8:	697b      	ldr	r3, [r7, #20]
240519aa:	3b01      	subs	r3, #1
240519ac:	617b      	str	r3, [r7, #20]
		}
		curx++;
240519ae:	69bb      	ldr	r3, [r7, #24]
240519b0:	3301      	adds	r3, #1
240519b2:	61bb      	str	r3, [r7, #24]
	while (curx <= cury) {
240519b4:	69ba      	ldr	r2, [r7, #24]
240519b6:	697b      	ldr	r3, [r7, #20]
240519b8:	429a      	cmp	r2, r3
240519ba:	d98d      	bls.n	240518d8 <LCD_FillCircle+0x2e>
	}
	LCD_DrawCircle(buf, Xpos, Ypos, Radius, color);
240519bc:	88f8      	ldrh	r0, [r7, #6]
240519be:	893a      	ldrh	r2, [r7, #8]
240519c0:	8979      	ldrh	r1, [r7, #10]
240519c2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
240519c4:	9300      	str	r3, [sp, #0]
240519c6:	4603      	mov	r3, r0
240519c8:	68f8      	ldr	r0, [r7, #12]
240519ca:	f7ff fe94 	bl	240516f6 <LCD_DrawCircle>
}
240519ce:	bf00      	nop
240519d0:	3720      	adds	r7, #32
240519d2:	46bd      	mov	sp, r7
240519d4:	bd80      	pop	{r7, pc}
	...

240519d8 <DrawChar>:
 * @param  Ypos: start column address
 * @param  c: pointer to the character data
 * @retval None
 */
static void DrawChar(uint16_t *buf, uint16_t Xpos, uint16_t Ypos,
		const uint8_t *c, uint8_t scale) {
240519d8:	b590      	push	{r4, r7, lr}
240519da:	b08d      	sub	sp, #52	@ 0x34
240519dc:	af02      	add	r7, sp, #8
240519de:	60f8      	str	r0, [r7, #12]
240519e0:	607b      	str	r3, [r7, #4]
240519e2:	460b      	mov	r3, r1
240519e4:	817b      	strh	r3, [r7, #10]
240519e6:	4613      	mov	r3, r2
240519e8:	813b      	strh	r3, [r7, #8]
	uint32_t i = 0, j = 0;
240519ea:	2300      	movs	r3, #0
240519ec:	627b      	str	r3, [r7, #36]	@ 0x24
240519ee:	2300      	movs	r3, #0
240519f0:	623b      	str	r3, [r7, #32]
	uint16_t height, width;
	uint8_t offset;
	uint8_t *pchar;
	uint32_t line = 0;
240519f2:	2300      	movs	r3, #0
240519f4:	61fb      	str	r3, [r7, #28]

	height = font->Height;
240519f6:	4b56      	ldr	r3, [pc, #344]	@ (24051b50 <DrawChar+0x178>)
240519f8:	681b      	ldr	r3, [r3, #0]
240519fa:	88db      	ldrh	r3, [r3, #6]
240519fc:	837b      	strh	r3, [r7, #26]
	width = font->Width;
240519fe:	4b54      	ldr	r3, [pc, #336]	@ (24051b50 <DrawChar+0x178>)
24051a00:	681b      	ldr	r3, [r3, #0]
24051a02:	889b      	ldrh	r3, [r3, #4]
24051a04:	833b      	strh	r3, [r7, #24]

	offset = 8 * ((width + 7) / 8) - width;
24051a06:	8b3b      	ldrh	r3, [r7, #24]
24051a08:	3307      	adds	r3, #7
24051a0a:	2b00      	cmp	r3, #0
24051a0c:	da00      	bge.n	24051a10 <DrawChar+0x38>
24051a0e:	3307      	adds	r3, #7
24051a10:	10db      	asrs	r3, r3, #3
24051a12:	b2db      	uxtb	r3, r3
24051a14:	00db      	lsls	r3, r3, #3
24051a16:	b2da      	uxtb	r2, r3
24051a18:	8b3b      	ldrh	r3, [r7, #24]
24051a1a:	b2db      	uxtb	r3, r3
24051a1c:	1ad3      	subs	r3, r2, r3
24051a1e:	75fb      	strb	r3, [r7, #23]

	for (i = 0; i < height; i++) {
24051a20:	2300      	movs	r3, #0
24051a22:	627b      	str	r3, [r7, #36]	@ 0x24
24051a24:	e08a      	b.n	24051b3c <DrawChar+0x164>
		pchar = ((uint8_t*) c + (width + 7) / 8 * i);
24051a26:	8b3b      	ldrh	r3, [r7, #24]
24051a28:	3307      	adds	r3, #7
24051a2a:	2b00      	cmp	r3, #0
24051a2c:	da00      	bge.n	24051a30 <DrawChar+0x58>
24051a2e:	3307      	adds	r3, #7
24051a30:	10db      	asrs	r3, r3, #3
24051a32:	461a      	mov	r2, r3
24051a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
24051a36:	fb02 f303 	mul.w	r3, r2, r3
24051a3a:	687a      	ldr	r2, [r7, #4]
24051a3c:	4413      	add	r3, r2
24051a3e:	613b      	str	r3, [r7, #16]

		switch (((width + 7) / 8)) {
24051a40:	8b3b      	ldrh	r3, [r7, #24]
24051a42:	3307      	adds	r3, #7
24051a44:	2b00      	cmp	r3, #0
24051a46:	da00      	bge.n	24051a4a <DrawChar+0x72>
24051a48:	3307      	adds	r3, #7
24051a4a:	10db      	asrs	r3, r3, #3
24051a4c:	2b01      	cmp	r3, #1
24051a4e:	d002      	beq.n	24051a56 <DrawChar+0x7e>
24051a50:	2b02      	cmp	r3, #2
24051a52:	d004      	beq.n	24051a5e <DrawChar+0x86>
24051a54:	e00c      	b.n	24051a70 <DrawChar+0x98>
		case 1:
			line = pchar[0];
24051a56:	693b      	ldr	r3, [r7, #16]
24051a58:	781b      	ldrb	r3, [r3, #0]
24051a5a:	61fb      	str	r3, [r7, #28]
			break;
24051a5c:	e016      	b.n	24051a8c <DrawChar+0xb4>

		case 2:
			line = (pchar[0] << 8) | pchar[1];
24051a5e:	693b      	ldr	r3, [r7, #16]
24051a60:	781b      	ldrb	r3, [r3, #0]
24051a62:	021b      	lsls	r3, r3, #8
24051a64:	693a      	ldr	r2, [r7, #16]
24051a66:	3201      	adds	r2, #1
24051a68:	7812      	ldrb	r2, [r2, #0]
24051a6a:	4313      	orrs	r3, r2
24051a6c:	61fb      	str	r3, [r7, #28]
			break;
24051a6e:	e00d      	b.n	24051a8c <DrawChar+0xb4>

		case 3:
		default:
			line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
24051a70:	693b      	ldr	r3, [r7, #16]
24051a72:	781b      	ldrb	r3, [r3, #0]
24051a74:	041a      	lsls	r2, r3, #16
24051a76:	693b      	ldr	r3, [r7, #16]
24051a78:	3301      	adds	r3, #1
24051a7a:	781b      	ldrb	r3, [r3, #0]
24051a7c:	021b      	lsls	r3, r3, #8
24051a7e:	4313      	orrs	r3, r2
24051a80:	693a      	ldr	r2, [r7, #16]
24051a82:	3202      	adds	r2, #2
24051a84:	7812      	ldrb	r2, [r2, #0]
24051a86:	4313      	orrs	r3, r2
24051a88:	61fb      	str	r3, [r7, #28]
			break;
24051a8a:	bf00      	nop
		}

		for (j = 0; j < width; j++) {
24051a8c:	2300      	movs	r3, #0
24051a8e:	623b      	str	r3, [r7, #32]
24051a90:	e047      	b.n	24051b22 <DrawChar+0x14a>
			if (line & (1 << (width - j + offset - 1))) {
24051a92:	8b3a      	ldrh	r2, [r7, #24]
24051a94:	6a3b      	ldr	r3, [r7, #32]
24051a96:	1ad2      	subs	r2, r2, r3
24051a98:	7dfb      	ldrb	r3, [r7, #23]
24051a9a:	4413      	add	r3, r2
24051a9c:	3b01      	subs	r3, #1
24051a9e:	2201      	movs	r2, #1
24051aa0:	fa02 f303 	lsl.w	r3, r2, r3
24051aa4:	461a      	mov	r2, r3
24051aa6:	69fb      	ldr	r3, [r7, #28]
24051aa8:	4013      	ands	r3, r2
24051aaa:	2b00      	cmp	r3, #0
24051aac:	d01b      	beq.n	24051ae6 <DrawChar+0x10e>
				//LCD_DrawPixel(buf, (Xpos + j), Ypos, font_color);
				LCD_FillRect(buf, (Xpos + j * scale), Ypos, scale, scale,
24051aae:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
24051ab2:	b29a      	uxth	r2, r3
24051ab4:	6a3b      	ldr	r3, [r7, #32]
24051ab6:	b29b      	uxth	r3, r3
24051ab8:	fb12 f303 	smulbb	r3, r2, r3
24051abc:	b29a      	uxth	r2, r3
24051abe:	897b      	ldrh	r3, [r7, #10]
24051ac0:	4413      	add	r3, r2
24051ac2:	b299      	uxth	r1, r3
24051ac4:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
24051ac8:	b29c      	uxth	r4, r3
24051aca:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
24051ace:	b29b      	uxth	r3, r3
24051ad0:	4a20      	ldr	r2, [pc, #128]	@ (24051b54 <DrawChar+0x17c>)
24051ad2:	8812      	ldrh	r2, [r2, #0]
24051ad4:	8938      	ldrh	r0, [r7, #8]
24051ad6:	9201      	str	r2, [sp, #4]
24051ad8:	9300      	str	r3, [sp, #0]
24051ada:	4623      	mov	r3, r4
24051adc:	4602      	mov	r2, r0
24051ade:	68f8      	ldr	r0, [r7, #12]
24051ae0:	f7ff feb2 	bl	24051848 <LCD_FillRect>
24051ae4:	e01a      	b.n	24051b1c <DrawChar+0x144>
						font_color);
			} else {
				//LCD_DrawPixel(buf, (Xpos + j), Ypos, font_bcolor);
				LCD_FillRect(buf, (Xpos + j * scale), Ypos, scale, scale,
24051ae6:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
24051aea:	b29a      	uxth	r2, r3
24051aec:	6a3b      	ldr	r3, [r7, #32]
24051aee:	b29b      	uxth	r3, r3
24051af0:	fb12 f303 	smulbb	r3, r2, r3
24051af4:	b29a      	uxth	r2, r3
24051af6:	897b      	ldrh	r3, [r7, #10]
24051af8:	4413      	add	r3, r2
24051afa:	b299      	uxth	r1, r3
24051afc:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
24051b00:	b29c      	uxth	r4, r3
24051b02:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
24051b06:	b29b      	uxth	r3, r3
24051b08:	4a13      	ldr	r2, [pc, #76]	@ (24051b58 <DrawChar+0x180>)
24051b0a:	8812      	ldrh	r2, [r2, #0]
24051b0c:	8938      	ldrh	r0, [r7, #8]
24051b0e:	9201      	str	r2, [sp, #4]
24051b10:	9300      	str	r3, [sp, #0]
24051b12:	4623      	mov	r3, r4
24051b14:	4602      	mov	r2, r0
24051b16:	68f8      	ldr	r0, [r7, #12]
24051b18:	f7ff fe96 	bl	24051848 <LCD_FillRect>
		for (j = 0; j < width; j++) {
24051b1c:	6a3b      	ldr	r3, [r7, #32]
24051b1e:	3301      	adds	r3, #1
24051b20:	623b      	str	r3, [r7, #32]
24051b22:	8b3b      	ldrh	r3, [r7, #24]
24051b24:	6a3a      	ldr	r2, [r7, #32]
24051b26:	429a      	cmp	r2, r3
24051b28:	d3b3      	bcc.n	24051a92 <DrawChar+0xba>
						font_bcolor);
			}
		}
		Ypos = Ypos + scale;
24051b2a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
24051b2e:	b29a      	uxth	r2, r3
24051b30:	893b      	ldrh	r3, [r7, #8]
24051b32:	4413      	add	r3, r2
24051b34:	813b      	strh	r3, [r7, #8]
	for (i = 0; i < height; i++) {
24051b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
24051b38:	3301      	adds	r3, #1
24051b3a:	627b      	str	r3, [r7, #36]	@ 0x24
24051b3c:	8b7b      	ldrh	r3, [r7, #26]
24051b3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
24051b40:	429a      	cmp	r2, r3
24051b42:	f4ff af70 	bcc.w	24051a26 <DrawChar+0x4e>
	}
}
24051b46:	bf00      	nop
24051b48:	bf00      	nop
24051b4a:	372c      	adds	r7, #44	@ 0x2c
24051b4c:	46bd      	mov	sp, r7
24051b4e:	bd90      	pop	{r4, r7, pc}
24051b50:	20000080 	.word	0x20000080
24051b54:	20000084 	.word	0x20000084
24051b58:	2000021e 	.word	0x2000021e

24051b5c <FillBuffer>:
 * @param  OffLine: offset
 * @param  ColorIndex: color Index
 * @retval None
 */
static void FillBuffer(void *pDst, uint32_t xSize, uint32_t ySize,
		uint32_t OffLine, uint16_t ColorIndex) {
24051b5c:	b480      	push	{r7}
24051b5e:	b085      	sub	sp, #20
24051b60:	af00      	add	r7, sp, #0
24051b62:	60f8      	str	r0, [r7, #12]
24051b64:	60b9      	str	r1, [r7, #8]
24051b66:	607a      	str	r2, [r7, #4]
24051b68:	603b      	str	r3, [r7, #0]

	DMA2D->CR = DMA2D_R2M;
24051b6a:	4b16      	ldr	r3, [pc, #88]	@ (24051bc4 <FillBuffer+0x68>)
24051b6c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
24051b70:	601a      	str	r2, [r3, #0]
	DMA2D->OCOLR = 0x0000FFFF & ColorIndex;
24051b72:	4a14      	ldr	r2, [pc, #80]	@ (24051bc4 <FillBuffer+0x68>)
24051b74:	8b3b      	ldrh	r3, [r7, #24]
24051b76:	6393      	str	r3, [r2, #56]	@ 0x38
	DMA2D->OMAR = (uint32_t) pDst;
24051b78:	4a12      	ldr	r2, [pc, #72]	@ (24051bc4 <FillBuffer+0x68>)
24051b7a:	68fb      	ldr	r3, [r7, #12]
24051b7c:	63d3      	str	r3, [r2, #60]	@ 0x3c
	DMA2D->OOR = OffLine;
24051b7e:	4a11      	ldr	r2, [pc, #68]	@ (24051bc4 <FillBuffer+0x68>)
24051b80:	683b      	ldr	r3, [r7, #0]
24051b82:	6413      	str	r3, [r2, #64]	@ 0x40
	DMA2D->OPFCCR = LTDC_PIXEL_FORMAT_RGB565;
24051b84:	4b0f      	ldr	r3, [pc, #60]	@ (24051bc4 <FillBuffer+0x68>)
24051b86:	2202      	movs	r2, #2
24051b88:	635a      	str	r2, [r3, #52]	@ 0x34
	DMA2D->NLR = (uint32_t) (xSize << 16) | (uint16_t) ySize;
24051b8a:	68bb      	ldr	r3, [r7, #8]
24051b8c:	041b      	lsls	r3, r3, #16
24051b8e:	687a      	ldr	r2, [r7, #4]
24051b90:	b292      	uxth	r2, r2
24051b92:	4611      	mov	r1, r2
24051b94:	4a0b      	ldr	r2, [pc, #44]	@ (24051bc4 <FillBuffer+0x68>)
24051b96:	430b      	orrs	r3, r1
24051b98:	6453      	str	r3, [r2, #68]	@ 0x44

	DMA2D->CR |= DMA2D_CR_START;
24051b9a:	4b0a      	ldr	r3, [pc, #40]	@ (24051bc4 <FillBuffer+0x68>)
24051b9c:	681b      	ldr	r3, [r3, #0]
24051b9e:	4a09      	ldr	r2, [pc, #36]	@ (24051bc4 <FillBuffer+0x68>)
24051ba0:	f043 0301 	orr.w	r3, r3, #1
24051ba4:	6013      	str	r3, [r2, #0]

	while (DMA2D->CR & DMA2D_CR_START) {
24051ba6:	bf00      	nop
24051ba8:	4b06      	ldr	r3, [pc, #24]	@ (24051bc4 <FillBuffer+0x68>)
24051baa:	681b      	ldr	r3, [r3, #0]
24051bac:	f003 0301 	and.w	r3, r3, #1
24051bb0:	2b00      	cmp	r3, #0
24051bb2:	d1f9      	bne.n	24051ba8 <FillBuffer+0x4c>

	}
}
24051bb4:	bf00      	nop
24051bb6:	bf00      	nop
24051bb8:	3714      	adds	r7, #20
24051bba:	46bd      	mov	sp, r7
24051bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
24051bc0:	4770      	bx	lr
24051bc2:	bf00      	nop
24051bc4:	52001000 	.word	0x52001000

24051bc8 <init_sprite>:
static void _draw_sprite_xy_t(uint16_t *buf, uint16_t x, uint16_t y,
		uint8_t width, uint8_t height, uint8_t scale, uint16_t *pallete,
		uint8_t *data);

void init_sprite(Sprite *sprite, uint16_t x, uint16_t y, uint8_t width,
		uint8_t height, uint8_t settings, uint16_t *pallete, uint8_t *data) {
24051bc8:	b480      	push	{r7}
24051bca:	b085      	sub	sp, #20
24051bcc:	af00      	add	r7, sp, #0
24051bce:	60f8      	str	r0, [r7, #12]
24051bd0:	4608      	mov	r0, r1
24051bd2:	4611      	mov	r1, r2
24051bd4:	461a      	mov	r2, r3
24051bd6:	4603      	mov	r3, r0
24051bd8:	817b      	strh	r3, [r7, #10]
24051bda:	460b      	mov	r3, r1
24051bdc:	813b      	strh	r3, [r7, #8]
24051bde:	4613      	mov	r3, r2
24051be0:	71fb      	strb	r3, [r7, #7]
	sprite->x = x;
24051be2:	68fb      	ldr	r3, [r7, #12]
24051be4:	897a      	ldrh	r2, [r7, #10]
24051be6:	801a      	strh	r2, [r3, #0]
	sprite->y = y;
24051be8:	68fb      	ldr	r3, [r7, #12]
24051bea:	893a      	ldrh	r2, [r7, #8]
24051bec:	805a      	strh	r2, [r3, #2]
	sprite->width = width;
24051bee:	68fb      	ldr	r3, [r7, #12]
24051bf0:	79fa      	ldrb	r2, [r7, #7]
24051bf2:	711a      	strb	r2, [r3, #4]
	sprite->height = height;
24051bf4:	68fb      	ldr	r3, [r7, #12]
24051bf6:	7e3a      	ldrb	r2, [r7, #24]
24051bf8:	715a      	strb	r2, [r3, #5]
	sprite->settings = settings;
24051bfa:	68fb      	ldr	r3, [r7, #12]
24051bfc:	7f3a      	ldrb	r2, [r7, #28]
24051bfe:	719a      	strb	r2, [r3, #6]
	sprite->pallete = pallete;
24051c00:	68fb      	ldr	r3, [r7, #12]
24051c02:	6a3a      	ldr	r2, [r7, #32]
24051c04:	609a      	str	r2, [r3, #8]
	sprite->data = data;
24051c06:	68fb      	ldr	r3, [r7, #12]
24051c08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
24051c0a:	60da      	str	r2, [r3, #12]
}
24051c0c:	bf00      	nop
24051c0e:	3714      	adds	r7, #20
24051c10:	46bd      	mov	sp, r7
24051c12:	f85d 7b04 	ldr.w	r7, [sp], #4
24051c16:	4770      	bx	lr

24051c18 <set_sprite_flip_x>:
			(show == 0) ?
					(*sprite).settings & ~SPRITE_SHOW :
					(*sprite).settings | SPRITE_SHOW;
}

void set_sprite_flip_x(Sprite *sprite, int flip_x) {
24051c18:	b480      	push	{r7}
24051c1a:	b083      	sub	sp, #12
24051c1c:	af00      	add	r7, sp, #0
24051c1e:	6078      	str	r0, [r7, #4]
24051c20:	6039      	str	r1, [r7, #0]
	sprite->settings =
24051c22:	683b      	ldr	r3, [r7, #0]
24051c24:	2b00      	cmp	r3, #0
24051c26:	d105      	bne.n	24051c34 <set_sprite_flip_x+0x1c>
			(flip_x == 0) ?
					(*sprite).settings & ~SPRITE_FLIP_X :
24051c28:	687b      	ldr	r3, [r7, #4]
24051c2a:	799b      	ldrb	r3, [r3, #6]
	sprite->settings =
24051c2c:	f023 0320 	bic.w	r3, r3, #32
24051c30:	b2db      	uxtb	r3, r3
24051c32:	e004      	b.n	24051c3e <set_sprite_flip_x+0x26>
					(*sprite).settings | SPRITE_FLIP_X;
24051c34:	687b      	ldr	r3, [r7, #4]
24051c36:	799b      	ldrb	r3, [r3, #6]
	sprite->settings =
24051c38:	f043 0320 	orr.w	r3, r3, #32
24051c3c:	b2db      	uxtb	r3, r3
24051c3e:	687a      	ldr	r2, [r7, #4]
24051c40:	7193      	strb	r3, [r2, #6]
}
24051c42:	bf00      	nop
24051c44:	370c      	adds	r7, #12
24051c46:	46bd      	mov	sp, r7
24051c48:	f85d 7b04 	ldr.w	r7, [sp], #4
24051c4c:	4770      	bx	lr

24051c4e <render_sprite>:

void set_sprite_data(Sprite *sprite, uint8_t *data) {
	sprite->data = data;
}

void render_sprite(uint16_t *buf, Sprite sprite) {
24051c4e:	b084      	sub	sp, #16
24051c50:	b580      	push	{r7, lr}
24051c52:	b08a      	sub	sp, #40	@ 0x28
24051c54:	af04      	add	r7, sp, #16
24051c56:	6078      	str	r0, [r7, #4]
24051c58:	f107 0024 	add.w	r0, r7, #36	@ 0x24
24051c5c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (!(sprite.settings & SPRITE_SHOW) || !(sprite.settings & SPRITE_SCALE)) {
24051c60:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
24051c64:	f003 0310 	and.w	r3, r3, #16
24051c68:	2b00      	cmp	r3, #0
24051c6a:	f000 80e7 	beq.w	24051e3c <render_sprite+0x1ee>
24051c6e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
24051c72:	f003 030f 	and.w	r3, r3, #15
24051c76:	2b00      	cmp	r3, #0
24051c78:	f000 80e0 	beq.w	24051e3c <render_sprite+0x1ee>
		return;
	}
	uint16_t x = sprite.x;
24051c7c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
24051c7e:	82fb      	strh	r3, [r7, #22]
	uint16_t y = sprite.y;
24051c80:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
24051c82:	82bb      	strh	r3, [r7, #20]
	uint8_t width = sprite.width;
24051c84:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
24051c88:	74fb      	strb	r3, [r7, #19]
	uint8_t height = sprite.height;
24051c8a:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
24051c8e:	74bb      	strb	r3, [r7, #18]
	uint8_t scale = (sprite.settings & SPRITE_SCALE);
24051c90:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
24051c94:	f003 030f 	and.w	r3, r3, #15
24051c98:	747b      	strb	r3, [r7, #17]
	uint16_t *pallete = sprite.pallete;
24051c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
24051c9c:	60fb      	str	r3, [r7, #12]
	uint8_t *data = sprite.data;
24051c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
24051ca0:	60bb      	str	r3, [r7, #8]
	if ((sprite.settings & SPRITE_TRANSPOSE)) {
24051ca2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
24051ca6:	b25b      	sxtb	r3, r3
24051ca8:	2b00      	cmp	r3, #0
24051caa:	da63      	bge.n	24051d74 <render_sprite+0x126>
		if ((sprite.settings & SPRITE_FLIP_X)
24051cac:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
24051cb0:	f003 0320 	and.w	r3, r3, #32
24051cb4:	2b00      	cmp	r3, #0
24051cb6:	d015      	beq.n	24051ce4 <render_sprite+0x96>
				&& (sprite.settings & SPRITE_FLIP_Y)) {
24051cb8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
24051cbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
24051cc0:	2b00      	cmp	r3, #0
24051cc2:	d00f      	beq.n	24051ce4 <render_sprite+0x96>
			_draw_sprite_xy_t(buf, x, y, width, height, scale, pallete, data);
24051cc4:	7cf8      	ldrb	r0, [r7, #19]
24051cc6:	8aba      	ldrh	r2, [r7, #20]
24051cc8:	8af9      	ldrh	r1, [r7, #22]
24051cca:	68bb      	ldr	r3, [r7, #8]
24051ccc:	9303      	str	r3, [sp, #12]
24051cce:	68fb      	ldr	r3, [r7, #12]
24051cd0:	9302      	str	r3, [sp, #8]
24051cd2:	7c7b      	ldrb	r3, [r7, #17]
24051cd4:	9301      	str	r3, [sp, #4]
24051cd6:	7cbb      	ldrb	r3, [r7, #18]
24051cd8:	9300      	str	r3, [sp, #0]
24051cda:	4603      	mov	r3, r0
24051cdc:	6878      	ldr	r0, [r7, #4]
24051cde:	f000 fdbb 	bl	24052858 <_draw_sprite_xy_t>
24051ce2:	e0ac      	b.n	24051e3e <render_sprite+0x1f0>
		} else if (!(sprite.settings & SPRITE_FLIP_X)
24051ce4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
24051ce8:	f003 0320 	and.w	r3, r3, #32
24051cec:	2b00      	cmp	r3, #0
24051cee:	d115      	bne.n	24051d1c <render_sprite+0xce>
				&& (sprite.settings & SPRITE_FLIP_Y)) {
24051cf0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
24051cf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
24051cf8:	2b00      	cmp	r3, #0
24051cfa:	d00f      	beq.n	24051d1c <render_sprite+0xce>
			_draw_sprite_y_t(buf, x, y, width, height, scale, pallete, data);
24051cfc:	7cf8      	ldrb	r0, [r7, #19]
24051cfe:	8aba      	ldrh	r2, [r7, #20]
24051d00:	8af9      	ldrh	r1, [r7, #22]
24051d02:	68bb      	ldr	r3, [r7, #8]
24051d04:	9303      	str	r3, [sp, #12]
24051d06:	68fb      	ldr	r3, [r7, #12]
24051d08:	9302      	str	r3, [sp, #8]
24051d0a:	7c7b      	ldrb	r3, [r7, #17]
24051d0c:	9301      	str	r3, [sp, #4]
24051d0e:	7cbb      	ldrb	r3, [r7, #18]
24051d10:	9300      	str	r3, [sp, #0]
24051d12:	4603      	mov	r3, r0
24051d14:	6878      	ldr	r0, [r7, #4]
24051d16:	f000 fcfb 	bl	24052710 <_draw_sprite_y_t>
24051d1a:	e090      	b.n	24051e3e <render_sprite+0x1f0>
		} else if ((sprite.settings & SPRITE_FLIP_X)
24051d1c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
24051d20:	f003 0320 	and.w	r3, r3, #32
24051d24:	2b00      	cmp	r3, #0
24051d26:	d015      	beq.n	24051d54 <render_sprite+0x106>
				&& !(sprite.settings & SPRITE_FLIP_Y)) {
24051d28:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
24051d2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
24051d30:	2b00      	cmp	r3, #0
24051d32:	d10f      	bne.n	24051d54 <render_sprite+0x106>
			_draw_sprite_x_t(buf, x, y, width, height, scale, pallete, data);
24051d34:	7cf8      	ldrb	r0, [r7, #19]
24051d36:	8aba      	ldrh	r2, [r7, #20]
24051d38:	8af9      	ldrh	r1, [r7, #22]
24051d3a:	68bb      	ldr	r3, [r7, #8]
24051d3c:	9303      	str	r3, [sp, #12]
24051d3e:	68fb      	ldr	r3, [r7, #12]
24051d40:	9302      	str	r3, [sp, #8]
24051d42:	7c7b      	ldrb	r3, [r7, #17]
24051d44:	9301      	str	r3, [sp, #4]
24051d46:	7cbb      	ldrb	r3, [r7, #18]
24051d48:	9300      	str	r3, [sp, #0]
24051d4a:	4603      	mov	r3, r0
24051d4c:	6878      	ldr	r0, [r7, #4]
24051d4e:	f000 fc3c 	bl	240525ca <_draw_sprite_x_t>
24051d52:	e074      	b.n	24051e3e <render_sprite+0x1f0>
		} else {
			_draw_sprite_no_t(buf, x, y, width, height, scale, pallete, data);
24051d54:	7cf8      	ldrb	r0, [r7, #19]
24051d56:	8aba      	ldrh	r2, [r7, #20]
24051d58:	8af9      	ldrh	r1, [r7, #22]
24051d5a:	68bb      	ldr	r3, [r7, #8]
24051d5c:	9303      	str	r3, [sp, #12]
24051d5e:	68fb      	ldr	r3, [r7, #12]
24051d60:	9302      	str	r3, [sp, #8]
24051d62:	7c7b      	ldrb	r3, [r7, #17]
24051d64:	9301      	str	r3, [sp, #4]
24051d66:	7cbb      	ldrb	r3, [r7, #18]
24051d68:	9300      	str	r3, [sp, #0]
24051d6a:	4603      	mov	r3, r0
24051d6c:	6878      	ldr	r0, [r7, #4]
24051d6e:	f000 fb8d 	bl	2405248c <_draw_sprite_no_t>
24051d72:	e064      	b.n	24051e3e <render_sprite+0x1f0>
		}
	} else {
		if ((sprite.settings & SPRITE_FLIP_X)
24051d74:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
24051d78:	f003 0320 	and.w	r3, r3, #32
24051d7c:	2b00      	cmp	r3, #0
24051d7e:	d015      	beq.n	24051dac <render_sprite+0x15e>
				&& (sprite.settings & SPRITE_FLIP_Y)) {
24051d80:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
24051d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
24051d88:	2b00      	cmp	r3, #0
24051d8a:	d00f      	beq.n	24051dac <render_sprite+0x15e>
			_draw_sprite_xy(buf, x, y, width, height, scale, pallete, data);
24051d8c:	7cf8      	ldrb	r0, [r7, #19]
24051d8e:	8aba      	ldrh	r2, [r7, #20]
24051d90:	8af9      	ldrh	r1, [r7, #22]
24051d92:	68bb      	ldr	r3, [r7, #8]
24051d94:	9303      	str	r3, [sp, #12]
24051d96:	68fb      	ldr	r3, [r7, #12]
24051d98:	9302      	str	r3, [sp, #8]
24051d9a:	7c7b      	ldrb	r3, [r7, #17]
24051d9c:	9301      	str	r3, [sp, #4]
24051d9e:	7cbb      	ldrb	r3, [r7, #18]
24051da0:	9300      	str	r3, [sp, #0]
24051da2:	4603      	mov	r3, r0
24051da4:	6878      	ldr	r0, [r7, #4]
24051da6:	f000 faca 	bl	2405233e <_draw_sprite_xy>
24051daa:	e048      	b.n	24051e3e <render_sprite+0x1f0>
		} else if (!(sprite.settings & SPRITE_FLIP_X)
24051dac:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
24051db0:	f003 0320 	and.w	r3, r3, #32
24051db4:	2b00      	cmp	r3, #0
24051db6:	d115      	bne.n	24051de4 <render_sprite+0x196>
				&& (sprite.settings & SPRITE_FLIP_Y)) {
24051db8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
24051dbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
24051dc0:	2b00      	cmp	r3, #0
24051dc2:	d00f      	beq.n	24051de4 <render_sprite+0x196>
			_draw_sprite_y(buf, x, y, width, height, scale, pallete, data);
24051dc4:	7cf8      	ldrb	r0, [r7, #19]
24051dc6:	8aba      	ldrh	r2, [r7, #20]
24051dc8:	8af9      	ldrh	r1, [r7, #22]
24051dca:	68bb      	ldr	r3, [r7, #8]
24051dcc:	9303      	str	r3, [sp, #12]
24051dce:	68fb      	ldr	r3, [r7, #12]
24051dd0:	9302      	str	r3, [sp, #8]
24051dd2:	7c7b      	ldrb	r3, [r7, #17]
24051dd4:	9301      	str	r3, [sp, #4]
24051dd6:	7cbb      	ldrb	r3, [r7, #18]
24051dd8:	9300      	str	r3, [sp, #0]
24051dda:	4603      	mov	r3, r0
24051ddc:	6878      	ldr	r0, [r7, #4]
24051dde:	f000 fa0a 	bl	240521f6 <_draw_sprite_y>
24051de2:	e02c      	b.n	24051e3e <render_sprite+0x1f0>
		} else if ((sprite.settings & SPRITE_FLIP_X)
24051de4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
24051de8:	f003 0320 	and.w	r3, r3, #32
24051dec:	2b00      	cmp	r3, #0
24051dee:	d015      	beq.n	24051e1c <render_sprite+0x1ce>
				&& !(sprite.settings & SPRITE_FLIP_Y)) {
24051df0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
24051df4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
24051df8:	2b00      	cmp	r3, #0
24051dfa:	d10f      	bne.n	24051e1c <render_sprite+0x1ce>
			_draw_sprite_x(buf, x, y, width, height, scale, pallete, data);
24051dfc:	7cf8      	ldrb	r0, [r7, #19]
24051dfe:	8aba      	ldrh	r2, [r7, #20]
24051e00:	8af9      	ldrh	r1, [r7, #22]
24051e02:	68bb      	ldr	r3, [r7, #8]
24051e04:	9303      	str	r3, [sp, #12]
24051e06:	68fb      	ldr	r3, [r7, #12]
24051e08:	9302      	str	r3, [sp, #8]
24051e0a:	7c7b      	ldrb	r3, [r7, #17]
24051e0c:	9301      	str	r3, [sp, #4]
24051e0e:	7cbb      	ldrb	r3, [r7, #18]
24051e10:	9300      	str	r3, [sp, #0]
24051e12:	4603      	mov	r3, r0
24051e14:	6878      	ldr	r0, [r7, #4]
24051e16:	f000 f94b 	bl	240520b0 <_draw_sprite_x>
24051e1a:	e010      	b.n	24051e3e <render_sprite+0x1f0>
		} else {
			_draw_sprite_no(buf, x, y, width, height, scale, pallete, data);
24051e1c:	7cf8      	ldrb	r0, [r7, #19]
24051e1e:	8aba      	ldrh	r2, [r7, #20]
24051e20:	8af9      	ldrh	r1, [r7, #22]
24051e22:	68bb      	ldr	r3, [r7, #8]
24051e24:	9303      	str	r3, [sp, #12]
24051e26:	68fb      	ldr	r3, [r7, #12]
24051e28:	9302      	str	r3, [sp, #8]
24051e2a:	7c7b      	ldrb	r3, [r7, #17]
24051e2c:	9301      	str	r3, [sp, #4]
24051e2e:	7cbb      	ldrb	r3, [r7, #18]
24051e30:	9300      	str	r3, [sp, #0]
24051e32:	4603      	mov	r3, r0
24051e34:	6878      	ldr	r0, [r7, #4]
24051e36:	f000 f89c 	bl	24051f72 <_draw_sprite_no>
24051e3a:	e000      	b.n	24051e3e <render_sprite+0x1f0>
		return;
24051e3c:	bf00      	nop
		}
	}
}
24051e3e:	3718      	adds	r7, #24
24051e40:	46bd      	mov	sp, r7
24051e42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
24051e46:	b004      	add	sp, #16
24051e48:	4770      	bx	lr

24051e4a <render_sprites>:

void render_sprites(uint16_t *buf, Sprite **list) {
24051e4a:	b580      	push	{r7, lr}
24051e4c:	b086      	sub	sp, #24
24051e4e:	af02      	add	r7, sp, #8
24051e50:	6078      	str	r0, [r7, #4]
24051e52:	6039      	str	r1, [r7, #0]
	int i;
	int length = get_sprite_list_length(list);
24051e54:	6838      	ldr	r0, [r7, #0]
24051e56:	f000 f874 	bl	24051f42 <get_sprite_list_length>
24051e5a:	60b8      	str	r0, [r7, #8]
	for (i = 0; i < length; i++) {
24051e5c:	2300      	movs	r3, #0
24051e5e:	60fb      	str	r3, [r7, #12]
24051e60:	e010      	b.n	24051e84 <render_sprites+0x3a>

		render_sprite(buf, (*list[(length - 1) - i]));
24051e62:	68bb      	ldr	r3, [r7, #8]
24051e64:	1e5a      	subs	r2, r3, #1
24051e66:	68fb      	ldr	r3, [r7, #12]
24051e68:	1ad3      	subs	r3, r2, r3
24051e6a:	009b      	lsls	r3, r3, #2
24051e6c:	683a      	ldr	r2, [r7, #0]
24051e6e:	4413      	add	r3, r2
24051e70:	681b      	ldr	r3, [r3, #0]
24051e72:	68da      	ldr	r2, [r3, #12]
24051e74:	9200      	str	r2, [sp, #0]
24051e76:	cb0e      	ldmia	r3, {r1, r2, r3}
24051e78:	6878      	ldr	r0, [r7, #4]
24051e7a:	f7ff fee8 	bl	24051c4e <render_sprite>
	for (i = 0; i < length; i++) {
24051e7e:	68fb      	ldr	r3, [r7, #12]
24051e80:	3301      	adds	r3, #1
24051e82:	60fb      	str	r3, [r7, #12]
24051e84:	68fa      	ldr	r2, [r7, #12]
24051e86:	68bb      	ldr	r3, [r7, #8]
24051e88:	429a      	cmp	r2, r3
24051e8a:	dbea      	blt.n	24051e62 <render_sprites+0x18>
	}
}
24051e8c:	bf00      	nop
24051e8e:	bf00      	nop
24051e90:	3710      	adds	r7, #16
24051e92:	46bd      	mov	sp, r7
24051e94:	bd80      	pop	{r7, pc}

24051e96 <sprites_init_list>:

Sprite** sprites_init_list(Sprite *first_sprite) {
24051e96:	b580      	push	{r7, lr}
24051e98:	b084      	sub	sp, #16
24051e9a:	af00      	add	r7, sp, #0
24051e9c:	6078      	str	r0, [r7, #4]
	Sprite **list = (Sprite**) malloc(sizeof(Sprite*) * 2);
24051e9e:	2008      	movs	r0, #8
24051ea0:	f012 f924 	bl	240640ec <malloc>
24051ea4:	4603      	mov	r3, r0
24051ea6:	60fb      	str	r3, [r7, #12]
	list[0] = first_sprite;
24051ea8:	68fb      	ldr	r3, [r7, #12]
24051eaa:	687a      	ldr	r2, [r7, #4]
24051eac:	601a      	str	r2, [r3, #0]
	list[1] = (Sprite*) NULL;
24051eae:	68fb      	ldr	r3, [r7, #12]
24051eb0:	3304      	adds	r3, #4
24051eb2:	2200      	movs	r2, #0
24051eb4:	601a      	str	r2, [r3, #0]
	return list;
24051eb6:	68fb      	ldr	r3, [r7, #12]
}
24051eb8:	4618      	mov	r0, r3
24051eba:	3710      	adds	r7, #16
24051ebc:	46bd      	mov	sp, r7
24051ebe:	bd80      	pop	{r7, pc}

24051ec0 <sprites_add_to_list>:

Sprite** sprites_add_to_list(Sprite **list, Sprite *sprite) {
24051ec0:	b580      	push	{r7, lr}
24051ec2:	b086      	sub	sp, #24
24051ec4:	af00      	add	r7, sp, #0
24051ec6:	6078      	str	r0, [r7, #4]
24051ec8:	6039      	str	r1, [r7, #0]
	int i;
	int length = get_sprite_list_length(list);
24051eca:	6878      	ldr	r0, [r7, #4]
24051ecc:	f000 f839 	bl	24051f42 <get_sprite_list_length>
24051ed0:	6138      	str	r0, [r7, #16]
	Sprite **new_list = (Sprite**) malloc(sizeof(Sprite*) * (length + 2));
24051ed2:	693b      	ldr	r3, [r7, #16]
24051ed4:	3302      	adds	r3, #2
24051ed6:	009b      	lsls	r3, r3, #2
24051ed8:	4618      	mov	r0, r3
24051eda:	f012 f907 	bl	240640ec <malloc>
24051ede:	4603      	mov	r3, r0
24051ee0:	60fb      	str	r3, [r7, #12]
	if (new_list == NULL) {
24051ee2:	68fb      	ldr	r3, [r7, #12]
24051ee4:	2b00      	cmp	r3, #0
24051ee6:	d101      	bne.n	24051eec <sprites_add_to_list+0x2c>
		Error_Handler();
24051ee8:	f003 fe66 	bl	24055bb8 <Error_Handler>
	}
	for (i = 0; i < length; i++) {
24051eec:	2300      	movs	r3, #0
24051eee:	617b      	str	r3, [r7, #20]
24051ef0:	e00c      	b.n	24051f0c <sprites_add_to_list+0x4c>
		new_list[i] = list[i];
24051ef2:	697b      	ldr	r3, [r7, #20]
24051ef4:	009b      	lsls	r3, r3, #2
24051ef6:	687a      	ldr	r2, [r7, #4]
24051ef8:	441a      	add	r2, r3
24051efa:	697b      	ldr	r3, [r7, #20]
24051efc:	009b      	lsls	r3, r3, #2
24051efe:	68f9      	ldr	r1, [r7, #12]
24051f00:	440b      	add	r3, r1
24051f02:	6812      	ldr	r2, [r2, #0]
24051f04:	601a      	str	r2, [r3, #0]
	for (i = 0; i < length; i++) {
24051f06:	697b      	ldr	r3, [r7, #20]
24051f08:	3301      	adds	r3, #1
24051f0a:	617b      	str	r3, [r7, #20]
24051f0c:	697a      	ldr	r2, [r7, #20]
24051f0e:	693b      	ldr	r3, [r7, #16]
24051f10:	429a      	cmp	r2, r3
24051f12:	dbee      	blt.n	24051ef2 <sprites_add_to_list+0x32>
	}
	new_list[i] = sprite;
24051f14:	697b      	ldr	r3, [r7, #20]
24051f16:	009b      	lsls	r3, r3, #2
24051f18:	68fa      	ldr	r2, [r7, #12]
24051f1a:	4413      	add	r3, r2
24051f1c:	683a      	ldr	r2, [r7, #0]
24051f1e:	601a      	str	r2, [r3, #0]
	new_list[i + 1] = (Sprite*) NULL;
24051f20:	697b      	ldr	r3, [r7, #20]
24051f22:	3301      	adds	r3, #1
24051f24:	009b      	lsls	r3, r3, #2
24051f26:	68fa      	ldr	r2, [r7, #12]
24051f28:	4413      	add	r3, r2
24051f2a:	2200      	movs	r2, #0
24051f2c:	601a      	str	r2, [r3, #0]
	free((void*) list);
24051f2e:	6878      	ldr	r0, [r7, #4]
24051f30:	f012 f8e4 	bl	240640fc <free>
	list = NULL;
24051f34:	2300      	movs	r3, #0
24051f36:	607b      	str	r3, [r7, #4]
	return new_list;
24051f38:	68fb      	ldr	r3, [r7, #12]
}
24051f3a:	4618      	mov	r0, r3
24051f3c:	3718      	adds	r7, #24
24051f3e:	46bd      	mov	sp, r7
24051f40:	bd80      	pop	{r7, pc}

24051f42 <get_sprite_list_length>:
		return 1;
	}
	return 0;
}

int get_sprite_list_length(Sprite **list) {
24051f42:	b480      	push	{r7}
24051f44:	b085      	sub	sp, #20
24051f46:	af00      	add	r7, sp, #0
24051f48:	6078      	str	r0, [r7, #4]
	int i = 0;
24051f4a:	2300      	movs	r3, #0
24051f4c:	60fb      	str	r3, [r7, #12]
	while (list[i] != NULL) {
24051f4e:	e002      	b.n	24051f56 <get_sprite_list_length+0x14>
		i++;
24051f50:	68fb      	ldr	r3, [r7, #12]
24051f52:	3301      	adds	r3, #1
24051f54:	60fb      	str	r3, [r7, #12]
	while (list[i] != NULL) {
24051f56:	68fb      	ldr	r3, [r7, #12]
24051f58:	009b      	lsls	r3, r3, #2
24051f5a:	687a      	ldr	r2, [r7, #4]
24051f5c:	4413      	add	r3, r2
24051f5e:	681b      	ldr	r3, [r3, #0]
24051f60:	2b00      	cmp	r3, #0
24051f62:	d1f5      	bne.n	24051f50 <get_sprite_list_length+0xe>
	}
	return i;
24051f64:	68fb      	ldr	r3, [r7, #12]
}
24051f66:	4618      	mov	r0, r3
24051f68:	3714      	adds	r7, #20
24051f6a:	46bd      	mov	sp, r7
24051f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
24051f70:	4770      	bx	lr

24051f72 <_draw_sprite_no>:

static void _draw_sprite_no(uint16_t *buf, uint16_t x, uint16_t y,
		uint8_t width, uint8_t height, uint8_t scale, uint16_t *pallete,
		uint8_t *data) {
24051f72:	b580      	push	{r7, lr}
24051f74:	b08a      	sub	sp, #40	@ 0x28
24051f76:	af00      	add	r7, sp, #0
24051f78:	60f8      	str	r0, [r7, #12]
24051f7a:	4608      	mov	r0, r1
24051f7c:	4611      	mov	r1, r2
24051f7e:	461a      	mov	r2, r3
24051f80:	4603      	mov	r3, r0
24051f82:	817b      	strh	r3, [r7, #10]
24051f84:	460b      	mov	r3, r1
24051f86:	813b      	strh	r3, [r7, #8]
24051f88:	4613      	mov	r3, r2
24051f8a:	71fb      	strb	r3, [r7, #7]
	int k;
	int l;
	uint16_t color;
	uint16_t Xpos;
	uint16_t Ypos;
	for (i = 0; i < width; ++i) {
24051f8c:	2300      	movs	r3, #0
24051f8e:	627b      	str	r3, [r7, #36]	@ 0x24
24051f90:	e084      	b.n	2405209c <_draw_sprite_no+0x12a>
		for (j = 0; j < height; ++j) {
24051f92:	2300      	movs	r3, #0
24051f94:	623b      	str	r3, [r7, #32]
24051f96:	e079      	b.n	2405208c <_draw_sprite_no+0x11a>
			color = pallete[
					(i % 2 == 0) ?
24051f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
24051f9a:	f003 0301 	and.w	r3, r3, #1
			color = pallete[
24051f9e:	2b00      	cmp	r3, #0
24051fa0:	d116      	bne.n	24051fd0 <_draw_sprite_no+0x5e>
							(((data[(j * width / 2) + i / 2]) & 0xF0) >> 4) :
24051fa2:	79fb      	ldrb	r3, [r7, #7]
24051fa4:	6a3a      	ldr	r2, [r7, #32]
24051fa6:	fb02 f303 	mul.w	r3, r2, r3
24051faa:	2b00      	cmp	r3, #0
24051fac:	da00      	bge.n	24051fb0 <_draw_sprite_no+0x3e>
24051fae:	3301      	adds	r3, #1
24051fb0:	105b      	asrs	r3, r3, #1
24051fb2:	461a      	mov	r2, r3
24051fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
24051fb6:	2b00      	cmp	r3, #0
24051fb8:	da00      	bge.n	24051fbc <_draw_sprite_no+0x4a>
24051fba:	3301      	adds	r3, #1
24051fbc:	105b      	asrs	r3, r3, #1
24051fbe:	4413      	add	r3, r2
24051fc0:	461a      	mov	r2, r3
24051fc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
24051fc4:	4413      	add	r3, r2
24051fc6:	781b      	ldrb	r3, [r3, #0]
24051fc8:	091b      	lsrs	r3, r3, #4
24051fca:	b2db      	uxtb	r3, r3
			color = pallete[
24051fcc:	005b      	lsls	r3, r3, #1
24051fce:	e015      	b.n	24051ffc <_draw_sprite_no+0x8a>
							((data[(j * width / 2) + i / 2]) & 0x0F)];
24051fd0:	79fb      	ldrb	r3, [r7, #7]
24051fd2:	6a3a      	ldr	r2, [r7, #32]
24051fd4:	fb02 f303 	mul.w	r3, r2, r3
24051fd8:	2b00      	cmp	r3, #0
24051fda:	da00      	bge.n	24051fde <_draw_sprite_no+0x6c>
24051fdc:	3301      	adds	r3, #1
24051fde:	105b      	asrs	r3, r3, #1
24051fe0:	461a      	mov	r2, r3
24051fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
24051fe4:	2b00      	cmp	r3, #0
24051fe6:	da00      	bge.n	24051fea <_draw_sprite_no+0x78>
24051fe8:	3301      	adds	r3, #1
24051fea:	105b      	asrs	r3, r3, #1
24051fec:	4413      	add	r3, r2
24051fee:	461a      	mov	r2, r3
24051ff0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
24051ff2:	4413      	add	r3, r2
24051ff4:	781b      	ldrb	r3, [r3, #0]
							(((data[(j * width / 2) + i / 2]) & 0xF0) >> 4) :
24051ff6:	f003 030f 	and.w	r3, r3, #15
			color = pallete[
24051ffa:	005b      	lsls	r3, r3, #1
24051ffc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
24051ffe:	4413      	add	r3, r2
24052000:	881b      	ldrh	r3, [r3, #0]
24052002:	82fb      	strh	r3, [r7, #22]
			for (k = 0; k < scale; ++k) {
24052004:	2300      	movs	r3, #0
24052006:	61fb      	str	r3, [r7, #28]
24052008:	e036      	b.n	24052078 <_draw_sprite_no+0x106>
				if (color == pallete[0]) {
2405200a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
2405200c:	881b      	ldrh	r3, [r3, #0]
2405200e:	8afa      	ldrh	r2, [r7, #22]
24052010:	429a      	cmp	r2, r3
24052012:	d037      	beq.n	24052084 <_draw_sprite_no+0x112>
					break;
				}
				Xpos = x + i * scale + k;
24052014:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
24052018:	b29a      	uxth	r2, r3
2405201a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2405201c:	b29b      	uxth	r3, r3
2405201e:	fb12 f303 	smulbb	r3, r2, r3
24052022:	b29a      	uxth	r2, r3
24052024:	897b      	ldrh	r3, [r7, #10]
24052026:	4413      	add	r3, r2
24052028:	b29a      	uxth	r2, r3
2405202a:	69fb      	ldr	r3, [r7, #28]
2405202c:	b29b      	uxth	r3, r3
2405202e:	4413      	add	r3, r2
24052030:	82bb      	strh	r3, [r7, #20]
				for (l = 0; l < scale; ++l) {
24052032:	2300      	movs	r3, #0
24052034:	61bb      	str	r3, [r7, #24]
24052036:	e017      	b.n	24052068 <_draw_sprite_no+0xf6>
					Ypos = y + j * scale + l;
24052038:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
2405203c:	b29a      	uxth	r2, r3
2405203e:	6a3b      	ldr	r3, [r7, #32]
24052040:	b29b      	uxth	r3, r3
24052042:	fb12 f303 	smulbb	r3, r2, r3
24052046:	b29a      	uxth	r2, r3
24052048:	893b      	ldrh	r3, [r7, #8]
2405204a:	4413      	add	r3, r2
2405204c:	b29a      	uxth	r2, r3
2405204e:	69bb      	ldr	r3, [r7, #24]
24052050:	b29b      	uxth	r3, r3
24052052:	4413      	add	r3, r2
24052054:	827b      	strh	r3, [r7, #18]
					LCD_DrawPixel(buf, Xpos, Ypos, color);
24052056:	8afb      	ldrh	r3, [r7, #22]
24052058:	8a7a      	ldrh	r2, [r7, #18]
2405205a:	8ab9      	ldrh	r1, [r7, #20]
2405205c:	68f8      	ldr	r0, [r7, #12]
2405205e:	f7ff f8df 	bl	24051220 <LCD_DrawPixel>
				for (l = 0; l < scale; ++l) {
24052062:	69bb      	ldr	r3, [r7, #24]
24052064:	3301      	adds	r3, #1
24052066:	61bb      	str	r3, [r7, #24]
24052068:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
2405206c:	69ba      	ldr	r2, [r7, #24]
2405206e:	429a      	cmp	r2, r3
24052070:	dbe2      	blt.n	24052038 <_draw_sprite_no+0xc6>
			for (k = 0; k < scale; ++k) {
24052072:	69fb      	ldr	r3, [r7, #28]
24052074:	3301      	adds	r3, #1
24052076:	61fb      	str	r3, [r7, #28]
24052078:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
2405207c:	69fa      	ldr	r2, [r7, #28]
2405207e:	429a      	cmp	r2, r3
24052080:	dbc3      	blt.n	2405200a <_draw_sprite_no+0x98>
24052082:	e000      	b.n	24052086 <_draw_sprite_no+0x114>
					break;
24052084:	bf00      	nop
		for (j = 0; j < height; ++j) {
24052086:	6a3b      	ldr	r3, [r7, #32]
24052088:	3301      	adds	r3, #1
2405208a:	623b      	str	r3, [r7, #32]
2405208c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
24052090:	6a3a      	ldr	r2, [r7, #32]
24052092:	429a      	cmp	r2, r3
24052094:	db80      	blt.n	24051f98 <_draw_sprite_no+0x26>
	for (i = 0; i < width; ++i) {
24052096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
24052098:	3301      	adds	r3, #1
2405209a:	627b      	str	r3, [r7, #36]	@ 0x24
2405209c:	79fb      	ldrb	r3, [r7, #7]
2405209e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
240520a0:	429a      	cmp	r2, r3
240520a2:	f6ff af76 	blt.w	24051f92 <_draw_sprite_no+0x20>
				}

			}
		}
	}
}
240520a6:	bf00      	nop
240520a8:	bf00      	nop
240520aa:	3728      	adds	r7, #40	@ 0x28
240520ac:	46bd      	mov	sp, r7
240520ae:	bd80      	pop	{r7, pc}

240520b0 <_draw_sprite_x>:
static void _draw_sprite_x(uint16_t *buf, uint16_t x, uint16_t y, uint8_t width,
		uint8_t height, uint8_t scale, uint16_t *pallete, uint8_t *data) {
240520b0:	b580      	push	{r7, lr}
240520b2:	b08a      	sub	sp, #40	@ 0x28
240520b4:	af00      	add	r7, sp, #0
240520b6:	60f8      	str	r0, [r7, #12]
240520b8:	4608      	mov	r0, r1
240520ba:	4611      	mov	r1, r2
240520bc:	461a      	mov	r2, r3
240520be:	4603      	mov	r3, r0
240520c0:	817b      	strh	r3, [r7, #10]
240520c2:	460b      	mov	r3, r1
240520c4:	813b      	strh	r3, [r7, #8]
240520c6:	4613      	mov	r3, r2
240520c8:	71fb      	strb	r3, [r7, #7]
	int k;
	int l;
	uint16_t color;
	uint16_t Xpos;
	uint16_t Ypos;
	for (i = 0; i < width; ++i) {
240520ca:	2300      	movs	r3, #0
240520cc:	627b      	str	r3, [r7, #36]	@ 0x24
240520ce:	e088      	b.n	240521e2 <_draw_sprite_x+0x132>
		for (j = 0; j < height; ++j) {
240520d0:	2300      	movs	r3, #0
240520d2:	623b      	str	r3, [r7, #32]
240520d4:	e07c      	b.n	240521d0 <_draw_sprite_x+0x120>
			color = pallete[
					(i % 2 == 0) ?
240520d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
240520d8:	f003 0301 	and.w	r3, r3, #1
			color = pallete[
240520dc:	2b00      	cmp	r3, #0
240520de:	d116      	bne.n	2405210e <_draw_sprite_x+0x5e>
							(((data[(j * width / 2) + i / 2]) & 0xF0) >> 4) :
240520e0:	79fb      	ldrb	r3, [r7, #7]
240520e2:	6a3a      	ldr	r2, [r7, #32]
240520e4:	fb02 f303 	mul.w	r3, r2, r3
240520e8:	2b00      	cmp	r3, #0
240520ea:	da00      	bge.n	240520ee <_draw_sprite_x+0x3e>
240520ec:	3301      	adds	r3, #1
240520ee:	105b      	asrs	r3, r3, #1
240520f0:	461a      	mov	r2, r3
240520f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
240520f4:	2b00      	cmp	r3, #0
240520f6:	da00      	bge.n	240520fa <_draw_sprite_x+0x4a>
240520f8:	3301      	adds	r3, #1
240520fa:	105b      	asrs	r3, r3, #1
240520fc:	4413      	add	r3, r2
240520fe:	461a      	mov	r2, r3
24052100:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
24052102:	4413      	add	r3, r2
24052104:	781b      	ldrb	r3, [r3, #0]
24052106:	091b      	lsrs	r3, r3, #4
24052108:	b2db      	uxtb	r3, r3
			color = pallete[
2405210a:	005b      	lsls	r3, r3, #1
2405210c:	e015      	b.n	2405213a <_draw_sprite_x+0x8a>
							((data[(j * width / 2) + i / 2]) & 0x0F)];
2405210e:	79fb      	ldrb	r3, [r7, #7]
24052110:	6a3a      	ldr	r2, [r7, #32]
24052112:	fb02 f303 	mul.w	r3, r2, r3
24052116:	2b00      	cmp	r3, #0
24052118:	da00      	bge.n	2405211c <_draw_sprite_x+0x6c>
2405211a:	3301      	adds	r3, #1
2405211c:	105b      	asrs	r3, r3, #1
2405211e:	461a      	mov	r2, r3
24052120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
24052122:	2b00      	cmp	r3, #0
24052124:	da00      	bge.n	24052128 <_draw_sprite_x+0x78>
24052126:	3301      	adds	r3, #1
24052128:	105b      	asrs	r3, r3, #1
2405212a:	4413      	add	r3, r2
2405212c:	461a      	mov	r2, r3
2405212e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
24052130:	4413      	add	r3, r2
24052132:	781b      	ldrb	r3, [r3, #0]
							(((data[(j * width / 2) + i / 2]) & 0xF0) >> 4) :
24052134:	f003 030f 	and.w	r3, r3, #15
			color = pallete[
24052138:	005b      	lsls	r3, r3, #1
2405213a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
2405213c:	4413      	add	r3, r2
2405213e:	881b      	ldrh	r3, [r3, #0]
24052140:	82fb      	strh	r3, [r7, #22]
			for (k = 0; k < scale; ++k) {
24052142:	2300      	movs	r3, #0
24052144:	61fb      	str	r3, [r7, #28]
24052146:	e039      	b.n	240521bc <_draw_sprite_x+0x10c>
				if (color == pallete[0]) {
24052148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
2405214a:	881b      	ldrh	r3, [r3, #0]
2405214c:	8afa      	ldrh	r2, [r7, #22]
2405214e:	429a      	cmp	r2, r3
24052150:	d03a      	beq.n	240521c8 <_draw_sprite_x+0x118>
					break;
				}
				Xpos = x + ((width - 1) - i) * scale + k;
24052152:	79fb      	ldrb	r3, [r7, #7]
24052154:	1e5a      	subs	r2, r3, #1
24052156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
24052158:	1ad3      	subs	r3, r2, r3
2405215a:	b29a      	uxth	r2, r3
2405215c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
24052160:	b29b      	uxth	r3, r3
24052162:	fb12 f303 	smulbb	r3, r2, r3
24052166:	b29a      	uxth	r2, r3
24052168:	897b      	ldrh	r3, [r7, #10]
2405216a:	4413      	add	r3, r2
2405216c:	b29a      	uxth	r2, r3
2405216e:	69fb      	ldr	r3, [r7, #28]
24052170:	b29b      	uxth	r3, r3
24052172:	4413      	add	r3, r2
24052174:	82bb      	strh	r3, [r7, #20]
				for (l = 0; l < scale; ++l) {
24052176:	2300      	movs	r3, #0
24052178:	61bb      	str	r3, [r7, #24]
2405217a:	e017      	b.n	240521ac <_draw_sprite_x+0xfc>
					Ypos = y + j * scale + l;
2405217c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
24052180:	b29a      	uxth	r2, r3
24052182:	6a3b      	ldr	r3, [r7, #32]
24052184:	b29b      	uxth	r3, r3
24052186:	fb12 f303 	smulbb	r3, r2, r3
2405218a:	b29a      	uxth	r2, r3
2405218c:	893b      	ldrh	r3, [r7, #8]
2405218e:	4413      	add	r3, r2
24052190:	b29a      	uxth	r2, r3
24052192:	69bb      	ldr	r3, [r7, #24]
24052194:	b29b      	uxth	r3, r3
24052196:	4413      	add	r3, r2
24052198:	827b      	strh	r3, [r7, #18]
					LCD_DrawPixel(buf, Xpos, Ypos, color);
2405219a:	8afb      	ldrh	r3, [r7, #22]
2405219c:	8a7a      	ldrh	r2, [r7, #18]
2405219e:	8ab9      	ldrh	r1, [r7, #20]
240521a0:	68f8      	ldr	r0, [r7, #12]
240521a2:	f7ff f83d 	bl	24051220 <LCD_DrawPixel>
				for (l = 0; l < scale; ++l) {
240521a6:	69bb      	ldr	r3, [r7, #24]
240521a8:	3301      	adds	r3, #1
240521aa:	61bb      	str	r3, [r7, #24]
240521ac:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
240521b0:	69ba      	ldr	r2, [r7, #24]
240521b2:	429a      	cmp	r2, r3
240521b4:	dbe2      	blt.n	2405217c <_draw_sprite_x+0xcc>
			for (k = 0; k < scale; ++k) {
240521b6:	69fb      	ldr	r3, [r7, #28]
240521b8:	3301      	adds	r3, #1
240521ba:	61fb      	str	r3, [r7, #28]
240521bc:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
240521c0:	69fa      	ldr	r2, [r7, #28]
240521c2:	429a      	cmp	r2, r3
240521c4:	dbc0      	blt.n	24052148 <_draw_sprite_x+0x98>
240521c6:	e000      	b.n	240521ca <_draw_sprite_x+0x11a>
					break;
240521c8:	bf00      	nop
		for (j = 0; j < height; ++j) {
240521ca:	6a3b      	ldr	r3, [r7, #32]
240521cc:	3301      	adds	r3, #1
240521ce:	623b      	str	r3, [r7, #32]
240521d0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
240521d4:	6a3a      	ldr	r2, [r7, #32]
240521d6:	429a      	cmp	r2, r3
240521d8:	f6ff af7d 	blt.w	240520d6 <_draw_sprite_x+0x26>
	for (i = 0; i < width; ++i) {
240521dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
240521de:	3301      	adds	r3, #1
240521e0:	627b      	str	r3, [r7, #36]	@ 0x24
240521e2:	79fb      	ldrb	r3, [r7, #7]
240521e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
240521e6:	429a      	cmp	r2, r3
240521e8:	f6ff af72 	blt.w	240520d0 <_draw_sprite_x+0x20>
				}

			}
		}
	}
}
240521ec:	bf00      	nop
240521ee:	bf00      	nop
240521f0:	3728      	adds	r7, #40	@ 0x28
240521f2:	46bd      	mov	sp, r7
240521f4:	bd80      	pop	{r7, pc}

240521f6 <_draw_sprite_y>:
static void _draw_sprite_y(uint16_t *buf, uint16_t x, uint16_t y, uint8_t width,
		uint8_t height, uint8_t scale, uint16_t *pallete, uint8_t *data) {
240521f6:	b580      	push	{r7, lr}
240521f8:	b08a      	sub	sp, #40	@ 0x28
240521fa:	af00      	add	r7, sp, #0
240521fc:	60f8      	str	r0, [r7, #12]
240521fe:	4608      	mov	r0, r1
24052200:	4611      	mov	r1, r2
24052202:	461a      	mov	r2, r3
24052204:	4603      	mov	r3, r0
24052206:	817b      	strh	r3, [r7, #10]
24052208:	460b      	mov	r3, r1
2405220a:	813b      	strh	r3, [r7, #8]
2405220c:	4613      	mov	r3, r2
2405220e:	71fb      	strb	r3, [r7, #7]
	int k;
	int l;
	uint16_t color;
	uint16_t Xpos;
	uint16_t Ypos;
	for (i = 0; i < width; ++i) {
24052210:	2300      	movs	r3, #0
24052212:	627b      	str	r3, [r7, #36]	@ 0x24
24052214:	e089      	b.n	2405232a <_draw_sprite_y+0x134>
		for (j = 0; j < height; ++j) {
24052216:	2300      	movs	r3, #0
24052218:	623b      	str	r3, [r7, #32]
2405221a:	e07d      	b.n	24052318 <_draw_sprite_y+0x122>
			color = pallete[
					(i % 2 == 0) ?
2405221c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2405221e:	f003 0301 	and.w	r3, r3, #1
			color = pallete[
24052222:	2b00      	cmp	r3, #0
24052224:	d116      	bne.n	24052254 <_draw_sprite_y+0x5e>
							(((data[(j * width / 2) + i / 2]) & 0xF0) >> 4) :
24052226:	79fb      	ldrb	r3, [r7, #7]
24052228:	6a3a      	ldr	r2, [r7, #32]
2405222a:	fb02 f303 	mul.w	r3, r2, r3
2405222e:	2b00      	cmp	r3, #0
24052230:	da00      	bge.n	24052234 <_draw_sprite_y+0x3e>
24052232:	3301      	adds	r3, #1
24052234:	105b      	asrs	r3, r3, #1
24052236:	461a      	mov	r2, r3
24052238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2405223a:	2b00      	cmp	r3, #0
2405223c:	da00      	bge.n	24052240 <_draw_sprite_y+0x4a>
2405223e:	3301      	adds	r3, #1
24052240:	105b      	asrs	r3, r3, #1
24052242:	4413      	add	r3, r2
24052244:	461a      	mov	r2, r3
24052246:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
24052248:	4413      	add	r3, r2
2405224a:	781b      	ldrb	r3, [r3, #0]
2405224c:	091b      	lsrs	r3, r3, #4
2405224e:	b2db      	uxtb	r3, r3
			color = pallete[
24052250:	005b      	lsls	r3, r3, #1
24052252:	e015      	b.n	24052280 <_draw_sprite_y+0x8a>
							((data[(j * width / 2) + i / 2]) & 0x0F)];
24052254:	79fb      	ldrb	r3, [r7, #7]
24052256:	6a3a      	ldr	r2, [r7, #32]
24052258:	fb02 f303 	mul.w	r3, r2, r3
2405225c:	2b00      	cmp	r3, #0
2405225e:	da00      	bge.n	24052262 <_draw_sprite_y+0x6c>
24052260:	3301      	adds	r3, #1
24052262:	105b      	asrs	r3, r3, #1
24052264:	461a      	mov	r2, r3
24052266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
24052268:	2b00      	cmp	r3, #0
2405226a:	da00      	bge.n	2405226e <_draw_sprite_y+0x78>
2405226c:	3301      	adds	r3, #1
2405226e:	105b      	asrs	r3, r3, #1
24052270:	4413      	add	r3, r2
24052272:	461a      	mov	r2, r3
24052274:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
24052276:	4413      	add	r3, r2
24052278:	781b      	ldrb	r3, [r3, #0]
							(((data[(j * width / 2) + i / 2]) & 0xF0) >> 4) :
2405227a:	f003 030f 	and.w	r3, r3, #15
			color = pallete[
2405227e:	005b      	lsls	r3, r3, #1
24052280:	6bba      	ldr	r2, [r7, #56]	@ 0x38
24052282:	4413      	add	r3, r2
24052284:	881b      	ldrh	r3, [r3, #0]
24052286:	82fb      	strh	r3, [r7, #22]
			for (k = 0; k < scale; ++k) {
24052288:	2300      	movs	r3, #0
2405228a:	61fb      	str	r3, [r7, #28]
2405228c:	e03a      	b.n	24052304 <_draw_sprite_y+0x10e>
				if (color == pallete[0]) {
2405228e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24052290:	881b      	ldrh	r3, [r3, #0]
24052292:	8afa      	ldrh	r2, [r7, #22]
24052294:	429a      	cmp	r2, r3
24052296:	d03b      	beq.n	24052310 <_draw_sprite_y+0x11a>
					break;
				}
				Xpos = x + i * scale + k;
24052298:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
2405229c:	b29a      	uxth	r2, r3
2405229e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
240522a0:	b29b      	uxth	r3, r3
240522a2:	fb12 f303 	smulbb	r3, r2, r3
240522a6:	b29a      	uxth	r2, r3
240522a8:	897b      	ldrh	r3, [r7, #10]
240522aa:	4413      	add	r3, r2
240522ac:	b29a      	uxth	r2, r3
240522ae:	69fb      	ldr	r3, [r7, #28]
240522b0:	b29b      	uxth	r3, r3
240522b2:	4413      	add	r3, r2
240522b4:	82bb      	strh	r3, [r7, #20]
				for (l = 0; l < scale; ++l) {
240522b6:	2300      	movs	r3, #0
240522b8:	61bb      	str	r3, [r7, #24]
240522ba:	e01b      	b.n	240522f4 <_draw_sprite_y+0xfe>
					Ypos = y + ((height - 1) - j) * scale + l;
240522bc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
240522c0:	1e5a      	subs	r2, r3, #1
240522c2:	6a3b      	ldr	r3, [r7, #32]
240522c4:	1ad3      	subs	r3, r2, r3
240522c6:	b29a      	uxth	r2, r3
240522c8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
240522cc:	b29b      	uxth	r3, r3
240522ce:	fb12 f303 	smulbb	r3, r2, r3
240522d2:	b29a      	uxth	r2, r3
240522d4:	893b      	ldrh	r3, [r7, #8]
240522d6:	4413      	add	r3, r2
240522d8:	b29a      	uxth	r2, r3
240522da:	69bb      	ldr	r3, [r7, #24]
240522dc:	b29b      	uxth	r3, r3
240522de:	4413      	add	r3, r2
240522e0:	827b      	strh	r3, [r7, #18]
					LCD_DrawPixel(buf, Xpos, Ypos, color);
240522e2:	8afb      	ldrh	r3, [r7, #22]
240522e4:	8a7a      	ldrh	r2, [r7, #18]
240522e6:	8ab9      	ldrh	r1, [r7, #20]
240522e8:	68f8      	ldr	r0, [r7, #12]
240522ea:	f7fe ff99 	bl	24051220 <LCD_DrawPixel>
				for (l = 0; l < scale; ++l) {
240522ee:	69bb      	ldr	r3, [r7, #24]
240522f0:	3301      	adds	r3, #1
240522f2:	61bb      	str	r3, [r7, #24]
240522f4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
240522f8:	69ba      	ldr	r2, [r7, #24]
240522fa:	429a      	cmp	r2, r3
240522fc:	dbde      	blt.n	240522bc <_draw_sprite_y+0xc6>
			for (k = 0; k < scale; ++k) {
240522fe:	69fb      	ldr	r3, [r7, #28]
24052300:	3301      	adds	r3, #1
24052302:	61fb      	str	r3, [r7, #28]
24052304:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
24052308:	69fa      	ldr	r2, [r7, #28]
2405230a:	429a      	cmp	r2, r3
2405230c:	dbbf      	blt.n	2405228e <_draw_sprite_y+0x98>
2405230e:	e000      	b.n	24052312 <_draw_sprite_y+0x11c>
					break;
24052310:	bf00      	nop
		for (j = 0; j < height; ++j) {
24052312:	6a3b      	ldr	r3, [r7, #32]
24052314:	3301      	adds	r3, #1
24052316:	623b      	str	r3, [r7, #32]
24052318:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
2405231c:	6a3a      	ldr	r2, [r7, #32]
2405231e:	429a      	cmp	r2, r3
24052320:	f6ff af7c 	blt.w	2405221c <_draw_sprite_y+0x26>
	for (i = 0; i < width; ++i) {
24052324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
24052326:	3301      	adds	r3, #1
24052328:	627b      	str	r3, [r7, #36]	@ 0x24
2405232a:	79fb      	ldrb	r3, [r7, #7]
2405232c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
2405232e:	429a      	cmp	r2, r3
24052330:	f6ff af71 	blt.w	24052216 <_draw_sprite_y+0x20>
				}

			}
		}
	}
}
24052334:	bf00      	nop
24052336:	bf00      	nop
24052338:	3728      	adds	r7, #40	@ 0x28
2405233a:	46bd      	mov	sp, r7
2405233c:	bd80      	pop	{r7, pc}

2405233e <_draw_sprite_xy>:
static void _draw_sprite_xy(uint16_t *buf, uint16_t x, uint16_t y,
		uint8_t width, uint8_t height, uint8_t scale, uint16_t *pallete,
		uint8_t *data) {
2405233e:	b580      	push	{r7, lr}
24052340:	b08a      	sub	sp, #40	@ 0x28
24052342:	af00      	add	r7, sp, #0
24052344:	60f8      	str	r0, [r7, #12]
24052346:	4608      	mov	r0, r1
24052348:	4611      	mov	r1, r2
2405234a:	461a      	mov	r2, r3
2405234c:	4603      	mov	r3, r0
2405234e:	817b      	strh	r3, [r7, #10]
24052350:	460b      	mov	r3, r1
24052352:	813b      	strh	r3, [r7, #8]
24052354:	4613      	mov	r3, r2
24052356:	71fb      	strb	r3, [r7, #7]
	int k;
	int l;
	uint16_t color;
	uint16_t Xpos;
	uint16_t Ypos;
	for (i = 0; i < width; ++i) {
24052358:	2300      	movs	r3, #0
2405235a:	627b      	str	r3, [r7, #36]	@ 0x24
2405235c:	e08c      	b.n	24052478 <_draw_sprite_xy+0x13a>
		for (j = 0; j < height; ++j) {
2405235e:	2300      	movs	r3, #0
24052360:	623b      	str	r3, [r7, #32]
24052362:	e080      	b.n	24052466 <_draw_sprite_xy+0x128>
			color = pallete[
					(i % 2 == 0) ?
24052364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
24052366:	f003 0301 	and.w	r3, r3, #1
			color = pallete[
2405236a:	2b00      	cmp	r3, #0
2405236c:	d116      	bne.n	2405239c <_draw_sprite_xy+0x5e>
							(((data[(j * width / 2) + i / 2]) & 0xF0) >> 4) :
2405236e:	79fb      	ldrb	r3, [r7, #7]
24052370:	6a3a      	ldr	r2, [r7, #32]
24052372:	fb02 f303 	mul.w	r3, r2, r3
24052376:	2b00      	cmp	r3, #0
24052378:	da00      	bge.n	2405237c <_draw_sprite_xy+0x3e>
2405237a:	3301      	adds	r3, #1
2405237c:	105b      	asrs	r3, r3, #1
2405237e:	461a      	mov	r2, r3
24052380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
24052382:	2b00      	cmp	r3, #0
24052384:	da00      	bge.n	24052388 <_draw_sprite_xy+0x4a>
24052386:	3301      	adds	r3, #1
24052388:	105b      	asrs	r3, r3, #1
2405238a:	4413      	add	r3, r2
2405238c:	461a      	mov	r2, r3
2405238e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
24052390:	4413      	add	r3, r2
24052392:	781b      	ldrb	r3, [r3, #0]
24052394:	091b      	lsrs	r3, r3, #4
24052396:	b2db      	uxtb	r3, r3
			color = pallete[
24052398:	005b      	lsls	r3, r3, #1
2405239a:	e015      	b.n	240523c8 <_draw_sprite_xy+0x8a>
							((data[(j * width / 2) + i / 2]) & 0x0F)];
2405239c:	79fb      	ldrb	r3, [r7, #7]
2405239e:	6a3a      	ldr	r2, [r7, #32]
240523a0:	fb02 f303 	mul.w	r3, r2, r3
240523a4:	2b00      	cmp	r3, #0
240523a6:	da00      	bge.n	240523aa <_draw_sprite_xy+0x6c>
240523a8:	3301      	adds	r3, #1
240523aa:	105b      	asrs	r3, r3, #1
240523ac:	461a      	mov	r2, r3
240523ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
240523b0:	2b00      	cmp	r3, #0
240523b2:	da00      	bge.n	240523b6 <_draw_sprite_xy+0x78>
240523b4:	3301      	adds	r3, #1
240523b6:	105b      	asrs	r3, r3, #1
240523b8:	4413      	add	r3, r2
240523ba:	461a      	mov	r2, r3
240523bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
240523be:	4413      	add	r3, r2
240523c0:	781b      	ldrb	r3, [r3, #0]
							(((data[(j * width / 2) + i / 2]) & 0xF0) >> 4) :
240523c2:	f003 030f 	and.w	r3, r3, #15
			color = pallete[
240523c6:	005b      	lsls	r3, r3, #1
240523c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
240523ca:	4413      	add	r3, r2
240523cc:	881b      	ldrh	r3, [r3, #0]
240523ce:	82fb      	strh	r3, [r7, #22]
			for (k = 0; k < scale; ++k) {
240523d0:	2300      	movs	r3, #0
240523d2:	61fb      	str	r3, [r7, #28]
240523d4:	e03d      	b.n	24052452 <_draw_sprite_xy+0x114>
				if (color == pallete[0]) {
240523d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
240523d8:	881b      	ldrh	r3, [r3, #0]
240523da:	8afa      	ldrh	r2, [r7, #22]
240523dc:	429a      	cmp	r2, r3
240523de:	d03e      	beq.n	2405245e <_draw_sprite_xy+0x120>
					break;
				}
				Xpos = x + ((width - 1) - i) * scale + k;
240523e0:	79fb      	ldrb	r3, [r7, #7]
240523e2:	1e5a      	subs	r2, r3, #1
240523e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
240523e6:	1ad3      	subs	r3, r2, r3
240523e8:	b29a      	uxth	r2, r3
240523ea:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
240523ee:	b29b      	uxth	r3, r3
240523f0:	fb12 f303 	smulbb	r3, r2, r3
240523f4:	b29a      	uxth	r2, r3
240523f6:	897b      	ldrh	r3, [r7, #10]
240523f8:	4413      	add	r3, r2
240523fa:	b29a      	uxth	r2, r3
240523fc:	69fb      	ldr	r3, [r7, #28]
240523fe:	b29b      	uxth	r3, r3
24052400:	4413      	add	r3, r2
24052402:	82bb      	strh	r3, [r7, #20]
				for (l = 0; l < scale; ++l) {
24052404:	2300      	movs	r3, #0
24052406:	61bb      	str	r3, [r7, #24]
24052408:	e01b      	b.n	24052442 <_draw_sprite_xy+0x104>
					Ypos = y + ((height - 1) - j) * scale + l;
2405240a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
2405240e:	1e5a      	subs	r2, r3, #1
24052410:	6a3b      	ldr	r3, [r7, #32]
24052412:	1ad3      	subs	r3, r2, r3
24052414:	b29a      	uxth	r2, r3
24052416:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
2405241a:	b29b      	uxth	r3, r3
2405241c:	fb12 f303 	smulbb	r3, r2, r3
24052420:	b29a      	uxth	r2, r3
24052422:	893b      	ldrh	r3, [r7, #8]
24052424:	4413      	add	r3, r2
24052426:	b29a      	uxth	r2, r3
24052428:	69bb      	ldr	r3, [r7, #24]
2405242a:	b29b      	uxth	r3, r3
2405242c:	4413      	add	r3, r2
2405242e:	827b      	strh	r3, [r7, #18]
					LCD_DrawPixel(buf, Xpos, Ypos, color);
24052430:	8afb      	ldrh	r3, [r7, #22]
24052432:	8a7a      	ldrh	r2, [r7, #18]
24052434:	8ab9      	ldrh	r1, [r7, #20]
24052436:	68f8      	ldr	r0, [r7, #12]
24052438:	f7fe fef2 	bl	24051220 <LCD_DrawPixel>
				for (l = 0; l < scale; ++l) {
2405243c:	69bb      	ldr	r3, [r7, #24]
2405243e:	3301      	adds	r3, #1
24052440:	61bb      	str	r3, [r7, #24]
24052442:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
24052446:	69ba      	ldr	r2, [r7, #24]
24052448:	429a      	cmp	r2, r3
2405244a:	dbde      	blt.n	2405240a <_draw_sprite_xy+0xcc>
			for (k = 0; k < scale; ++k) {
2405244c:	69fb      	ldr	r3, [r7, #28]
2405244e:	3301      	adds	r3, #1
24052450:	61fb      	str	r3, [r7, #28]
24052452:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
24052456:	69fa      	ldr	r2, [r7, #28]
24052458:	429a      	cmp	r2, r3
2405245a:	dbbc      	blt.n	240523d6 <_draw_sprite_xy+0x98>
2405245c:	e000      	b.n	24052460 <_draw_sprite_xy+0x122>
					break;
2405245e:	bf00      	nop
		for (j = 0; j < height; ++j) {
24052460:	6a3b      	ldr	r3, [r7, #32]
24052462:	3301      	adds	r3, #1
24052464:	623b      	str	r3, [r7, #32]
24052466:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
2405246a:	6a3a      	ldr	r2, [r7, #32]
2405246c:	429a      	cmp	r2, r3
2405246e:	f6ff af79 	blt.w	24052364 <_draw_sprite_xy+0x26>
	for (i = 0; i < width; ++i) {
24052472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
24052474:	3301      	adds	r3, #1
24052476:	627b      	str	r3, [r7, #36]	@ 0x24
24052478:	79fb      	ldrb	r3, [r7, #7]
2405247a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
2405247c:	429a      	cmp	r2, r3
2405247e:	f6ff af6e 	blt.w	2405235e <_draw_sprite_xy+0x20>
				}

			}
		}
	}
}
24052482:	bf00      	nop
24052484:	bf00      	nop
24052486:	3728      	adds	r7, #40	@ 0x28
24052488:	46bd      	mov	sp, r7
2405248a:	bd80      	pop	{r7, pc}

2405248c <_draw_sprite_no_t>:

static void _draw_sprite_no_t(uint16_t *buf, uint16_t x, uint16_t y,
		uint8_t width, uint8_t height, uint8_t scale, uint16_t *pallete,
		uint8_t *data) {
2405248c:	b580      	push	{r7, lr}
2405248e:	b08a      	sub	sp, #40	@ 0x28
24052490:	af00      	add	r7, sp, #0
24052492:	60f8      	str	r0, [r7, #12]
24052494:	4608      	mov	r0, r1
24052496:	4611      	mov	r1, r2
24052498:	461a      	mov	r2, r3
2405249a:	4603      	mov	r3, r0
2405249c:	817b      	strh	r3, [r7, #10]
2405249e:	460b      	mov	r3, r1
240524a0:	813b      	strh	r3, [r7, #8]
240524a2:	4613      	mov	r3, r2
240524a4:	71fb      	strb	r3, [r7, #7]
	int k;
	int l;
	uint16_t color;
	uint16_t Xpos;
	uint16_t Ypos;
	for (i = 0; i < width; ++i) {
240524a6:	2300      	movs	r3, #0
240524a8:	627b      	str	r3, [r7, #36]	@ 0x24
240524aa:	e084      	b.n	240525b6 <_draw_sprite_no_t+0x12a>
		for (j = 0; j < height; ++j) {
240524ac:	2300      	movs	r3, #0
240524ae:	623b      	str	r3, [r7, #32]
240524b0:	e079      	b.n	240525a6 <_draw_sprite_no_t+0x11a>
			color = pallete[
					(i % 2 == 0) ?
240524b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
240524b4:	f003 0301 	and.w	r3, r3, #1
			color = pallete[
240524b8:	2b00      	cmp	r3, #0
240524ba:	d116      	bne.n	240524ea <_draw_sprite_no_t+0x5e>
							(((data[(j * width / 2) + i / 2]) & 0xF0) >> 4) :
240524bc:	79fb      	ldrb	r3, [r7, #7]
240524be:	6a3a      	ldr	r2, [r7, #32]
240524c0:	fb02 f303 	mul.w	r3, r2, r3
240524c4:	2b00      	cmp	r3, #0
240524c6:	da00      	bge.n	240524ca <_draw_sprite_no_t+0x3e>
240524c8:	3301      	adds	r3, #1
240524ca:	105b      	asrs	r3, r3, #1
240524cc:	461a      	mov	r2, r3
240524ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
240524d0:	2b00      	cmp	r3, #0
240524d2:	da00      	bge.n	240524d6 <_draw_sprite_no_t+0x4a>
240524d4:	3301      	adds	r3, #1
240524d6:	105b      	asrs	r3, r3, #1
240524d8:	4413      	add	r3, r2
240524da:	461a      	mov	r2, r3
240524dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
240524de:	4413      	add	r3, r2
240524e0:	781b      	ldrb	r3, [r3, #0]
240524e2:	091b      	lsrs	r3, r3, #4
240524e4:	b2db      	uxtb	r3, r3
			color = pallete[
240524e6:	005b      	lsls	r3, r3, #1
240524e8:	e015      	b.n	24052516 <_draw_sprite_no_t+0x8a>
							((data[(j * width / 2) + i / 2]) & 0x0F)];
240524ea:	79fb      	ldrb	r3, [r7, #7]
240524ec:	6a3a      	ldr	r2, [r7, #32]
240524ee:	fb02 f303 	mul.w	r3, r2, r3
240524f2:	2b00      	cmp	r3, #0
240524f4:	da00      	bge.n	240524f8 <_draw_sprite_no_t+0x6c>
240524f6:	3301      	adds	r3, #1
240524f8:	105b      	asrs	r3, r3, #1
240524fa:	461a      	mov	r2, r3
240524fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
240524fe:	2b00      	cmp	r3, #0
24052500:	da00      	bge.n	24052504 <_draw_sprite_no_t+0x78>
24052502:	3301      	adds	r3, #1
24052504:	105b      	asrs	r3, r3, #1
24052506:	4413      	add	r3, r2
24052508:	461a      	mov	r2, r3
2405250a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
2405250c:	4413      	add	r3, r2
2405250e:	781b      	ldrb	r3, [r3, #0]
							(((data[(j * width / 2) + i / 2]) & 0xF0) >> 4) :
24052510:	f003 030f 	and.w	r3, r3, #15
			color = pallete[
24052514:	005b      	lsls	r3, r3, #1
24052516:	6bba      	ldr	r2, [r7, #56]	@ 0x38
24052518:	4413      	add	r3, r2
2405251a:	881b      	ldrh	r3, [r3, #0]
2405251c:	82fb      	strh	r3, [r7, #22]
			for (k = 0; k < scale; ++k) {
2405251e:	2300      	movs	r3, #0
24052520:	61fb      	str	r3, [r7, #28]
24052522:	e036      	b.n	24052592 <_draw_sprite_no_t+0x106>
				if (color == pallete[0]) {
24052524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24052526:	881b      	ldrh	r3, [r3, #0]
24052528:	8afa      	ldrh	r2, [r7, #22]
2405252a:	429a      	cmp	r2, r3
2405252c:	d037      	beq.n	2405259e <_draw_sprite_no_t+0x112>
					break;
				}
				Xpos = x + i * scale + k;
2405252e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
24052532:	b29a      	uxth	r2, r3
24052534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
24052536:	b29b      	uxth	r3, r3
24052538:	fb12 f303 	smulbb	r3, r2, r3
2405253c:	b29a      	uxth	r2, r3
2405253e:	897b      	ldrh	r3, [r7, #10]
24052540:	4413      	add	r3, r2
24052542:	b29a      	uxth	r2, r3
24052544:	69fb      	ldr	r3, [r7, #28]
24052546:	b29b      	uxth	r3, r3
24052548:	4413      	add	r3, r2
2405254a:	82bb      	strh	r3, [r7, #20]
				for (l = 0; l < scale; ++l) {
2405254c:	2300      	movs	r3, #0
2405254e:	61bb      	str	r3, [r7, #24]
24052550:	e017      	b.n	24052582 <_draw_sprite_no_t+0xf6>
					Ypos = y + j * scale + l;
24052552:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
24052556:	b29a      	uxth	r2, r3
24052558:	6a3b      	ldr	r3, [r7, #32]
2405255a:	b29b      	uxth	r3, r3
2405255c:	fb12 f303 	smulbb	r3, r2, r3
24052560:	b29a      	uxth	r2, r3
24052562:	893b      	ldrh	r3, [r7, #8]
24052564:	4413      	add	r3, r2
24052566:	b29a      	uxth	r2, r3
24052568:	69bb      	ldr	r3, [r7, #24]
2405256a:	b29b      	uxth	r3, r3
2405256c:	4413      	add	r3, r2
2405256e:	827b      	strh	r3, [r7, #18]
					LCD_DrawPixel(buf, Ypos, Xpos, color);
24052570:	8afb      	ldrh	r3, [r7, #22]
24052572:	8aba      	ldrh	r2, [r7, #20]
24052574:	8a79      	ldrh	r1, [r7, #18]
24052576:	68f8      	ldr	r0, [r7, #12]
24052578:	f7fe fe52 	bl	24051220 <LCD_DrawPixel>
				for (l = 0; l < scale; ++l) {
2405257c:	69bb      	ldr	r3, [r7, #24]
2405257e:	3301      	adds	r3, #1
24052580:	61bb      	str	r3, [r7, #24]
24052582:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
24052586:	69ba      	ldr	r2, [r7, #24]
24052588:	429a      	cmp	r2, r3
2405258a:	dbe2      	blt.n	24052552 <_draw_sprite_no_t+0xc6>
			for (k = 0; k < scale; ++k) {
2405258c:	69fb      	ldr	r3, [r7, #28]
2405258e:	3301      	adds	r3, #1
24052590:	61fb      	str	r3, [r7, #28]
24052592:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
24052596:	69fa      	ldr	r2, [r7, #28]
24052598:	429a      	cmp	r2, r3
2405259a:	dbc3      	blt.n	24052524 <_draw_sprite_no_t+0x98>
2405259c:	e000      	b.n	240525a0 <_draw_sprite_no_t+0x114>
					break;
2405259e:	bf00      	nop
		for (j = 0; j < height; ++j) {
240525a0:	6a3b      	ldr	r3, [r7, #32]
240525a2:	3301      	adds	r3, #1
240525a4:	623b      	str	r3, [r7, #32]
240525a6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
240525aa:	6a3a      	ldr	r2, [r7, #32]
240525ac:	429a      	cmp	r2, r3
240525ae:	db80      	blt.n	240524b2 <_draw_sprite_no_t+0x26>
	for (i = 0; i < width; ++i) {
240525b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
240525b2:	3301      	adds	r3, #1
240525b4:	627b      	str	r3, [r7, #36]	@ 0x24
240525b6:	79fb      	ldrb	r3, [r7, #7]
240525b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
240525ba:	429a      	cmp	r2, r3
240525bc:	f6ff af76 	blt.w	240524ac <_draw_sprite_no_t+0x20>
				}

			}
		}
	}
}
240525c0:	bf00      	nop
240525c2:	bf00      	nop
240525c4:	3728      	adds	r7, #40	@ 0x28
240525c6:	46bd      	mov	sp, r7
240525c8:	bd80      	pop	{r7, pc}

240525ca <_draw_sprite_x_t>:

static void _draw_sprite_x_t(uint16_t *buf, uint16_t x, uint16_t y,
		uint8_t width, uint8_t height, uint8_t scale, uint16_t *pallete,
		uint8_t *data) {
240525ca:	b580      	push	{r7, lr}
240525cc:	b08a      	sub	sp, #40	@ 0x28
240525ce:	af00      	add	r7, sp, #0
240525d0:	60f8      	str	r0, [r7, #12]
240525d2:	4608      	mov	r0, r1
240525d4:	4611      	mov	r1, r2
240525d6:	461a      	mov	r2, r3
240525d8:	4603      	mov	r3, r0
240525da:	817b      	strh	r3, [r7, #10]
240525dc:	460b      	mov	r3, r1
240525de:	813b      	strh	r3, [r7, #8]
240525e0:	4613      	mov	r3, r2
240525e2:	71fb      	strb	r3, [r7, #7]
	int k;
	int l;
	uint16_t color;
	uint16_t Xpos;
	uint16_t Ypos;
	for (i = 0; i < width; ++i) {
240525e4:	2300      	movs	r3, #0
240525e6:	627b      	str	r3, [r7, #36]	@ 0x24
240525e8:	e088      	b.n	240526fc <_draw_sprite_x_t+0x132>
		for (j = 0; j < height; ++j) {
240525ea:	2300      	movs	r3, #0
240525ec:	623b      	str	r3, [r7, #32]
240525ee:	e07c      	b.n	240526ea <_draw_sprite_x_t+0x120>
			color = pallete[
					(i % 2 == 0) ?
240525f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
240525f2:	f003 0301 	and.w	r3, r3, #1
			color = pallete[
240525f6:	2b00      	cmp	r3, #0
240525f8:	d116      	bne.n	24052628 <_draw_sprite_x_t+0x5e>
							(((data[(j * width / 2) + i / 2]) & 0xF0) >> 4) :
240525fa:	79fb      	ldrb	r3, [r7, #7]
240525fc:	6a3a      	ldr	r2, [r7, #32]
240525fe:	fb02 f303 	mul.w	r3, r2, r3
24052602:	2b00      	cmp	r3, #0
24052604:	da00      	bge.n	24052608 <_draw_sprite_x_t+0x3e>
24052606:	3301      	adds	r3, #1
24052608:	105b      	asrs	r3, r3, #1
2405260a:	461a      	mov	r2, r3
2405260c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2405260e:	2b00      	cmp	r3, #0
24052610:	da00      	bge.n	24052614 <_draw_sprite_x_t+0x4a>
24052612:	3301      	adds	r3, #1
24052614:	105b      	asrs	r3, r3, #1
24052616:	4413      	add	r3, r2
24052618:	461a      	mov	r2, r3
2405261a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
2405261c:	4413      	add	r3, r2
2405261e:	781b      	ldrb	r3, [r3, #0]
24052620:	091b      	lsrs	r3, r3, #4
24052622:	b2db      	uxtb	r3, r3
			color = pallete[
24052624:	005b      	lsls	r3, r3, #1
24052626:	e015      	b.n	24052654 <_draw_sprite_x_t+0x8a>
							((data[(j * width / 2) + i / 2]) & 0x0F)];
24052628:	79fb      	ldrb	r3, [r7, #7]
2405262a:	6a3a      	ldr	r2, [r7, #32]
2405262c:	fb02 f303 	mul.w	r3, r2, r3
24052630:	2b00      	cmp	r3, #0
24052632:	da00      	bge.n	24052636 <_draw_sprite_x_t+0x6c>
24052634:	3301      	adds	r3, #1
24052636:	105b      	asrs	r3, r3, #1
24052638:	461a      	mov	r2, r3
2405263a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2405263c:	2b00      	cmp	r3, #0
2405263e:	da00      	bge.n	24052642 <_draw_sprite_x_t+0x78>
24052640:	3301      	adds	r3, #1
24052642:	105b      	asrs	r3, r3, #1
24052644:	4413      	add	r3, r2
24052646:	461a      	mov	r2, r3
24052648:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
2405264a:	4413      	add	r3, r2
2405264c:	781b      	ldrb	r3, [r3, #0]
							(((data[(j * width / 2) + i / 2]) & 0xF0) >> 4) :
2405264e:	f003 030f 	and.w	r3, r3, #15
			color = pallete[
24052652:	005b      	lsls	r3, r3, #1
24052654:	6bba      	ldr	r2, [r7, #56]	@ 0x38
24052656:	4413      	add	r3, r2
24052658:	881b      	ldrh	r3, [r3, #0]
2405265a:	82fb      	strh	r3, [r7, #22]
			for (k = 0; k < scale; ++k) {
2405265c:	2300      	movs	r3, #0
2405265e:	61fb      	str	r3, [r7, #28]
24052660:	e039      	b.n	240526d6 <_draw_sprite_x_t+0x10c>
				if (color == pallete[0]) {
24052662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24052664:	881b      	ldrh	r3, [r3, #0]
24052666:	8afa      	ldrh	r2, [r7, #22]
24052668:	429a      	cmp	r2, r3
2405266a:	d03a      	beq.n	240526e2 <_draw_sprite_x_t+0x118>
					break;
				}
				Xpos = x + ((width - 1) - i) * scale + k;
2405266c:	79fb      	ldrb	r3, [r7, #7]
2405266e:	1e5a      	subs	r2, r3, #1
24052670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
24052672:	1ad3      	subs	r3, r2, r3
24052674:	b29a      	uxth	r2, r3
24052676:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
2405267a:	b29b      	uxth	r3, r3
2405267c:	fb12 f303 	smulbb	r3, r2, r3
24052680:	b29a      	uxth	r2, r3
24052682:	897b      	ldrh	r3, [r7, #10]
24052684:	4413      	add	r3, r2
24052686:	b29a      	uxth	r2, r3
24052688:	69fb      	ldr	r3, [r7, #28]
2405268a:	b29b      	uxth	r3, r3
2405268c:	4413      	add	r3, r2
2405268e:	82bb      	strh	r3, [r7, #20]
				for (l = 0; l < scale; ++l) {
24052690:	2300      	movs	r3, #0
24052692:	61bb      	str	r3, [r7, #24]
24052694:	e017      	b.n	240526c6 <_draw_sprite_x_t+0xfc>
					Ypos = y + j * scale + l;
24052696:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
2405269a:	b29a      	uxth	r2, r3
2405269c:	6a3b      	ldr	r3, [r7, #32]
2405269e:	b29b      	uxth	r3, r3
240526a0:	fb12 f303 	smulbb	r3, r2, r3
240526a4:	b29a      	uxth	r2, r3
240526a6:	893b      	ldrh	r3, [r7, #8]
240526a8:	4413      	add	r3, r2
240526aa:	b29a      	uxth	r2, r3
240526ac:	69bb      	ldr	r3, [r7, #24]
240526ae:	b29b      	uxth	r3, r3
240526b0:	4413      	add	r3, r2
240526b2:	827b      	strh	r3, [r7, #18]
					LCD_DrawPixel(buf, Ypos, Xpos, color);
240526b4:	8afb      	ldrh	r3, [r7, #22]
240526b6:	8aba      	ldrh	r2, [r7, #20]
240526b8:	8a79      	ldrh	r1, [r7, #18]
240526ba:	68f8      	ldr	r0, [r7, #12]
240526bc:	f7fe fdb0 	bl	24051220 <LCD_DrawPixel>
				for (l = 0; l < scale; ++l) {
240526c0:	69bb      	ldr	r3, [r7, #24]
240526c2:	3301      	adds	r3, #1
240526c4:	61bb      	str	r3, [r7, #24]
240526c6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
240526ca:	69ba      	ldr	r2, [r7, #24]
240526cc:	429a      	cmp	r2, r3
240526ce:	dbe2      	blt.n	24052696 <_draw_sprite_x_t+0xcc>
			for (k = 0; k < scale; ++k) {
240526d0:	69fb      	ldr	r3, [r7, #28]
240526d2:	3301      	adds	r3, #1
240526d4:	61fb      	str	r3, [r7, #28]
240526d6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
240526da:	69fa      	ldr	r2, [r7, #28]
240526dc:	429a      	cmp	r2, r3
240526de:	dbc0      	blt.n	24052662 <_draw_sprite_x_t+0x98>
240526e0:	e000      	b.n	240526e4 <_draw_sprite_x_t+0x11a>
					break;
240526e2:	bf00      	nop
		for (j = 0; j < height; ++j) {
240526e4:	6a3b      	ldr	r3, [r7, #32]
240526e6:	3301      	adds	r3, #1
240526e8:	623b      	str	r3, [r7, #32]
240526ea:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
240526ee:	6a3a      	ldr	r2, [r7, #32]
240526f0:	429a      	cmp	r2, r3
240526f2:	f6ff af7d 	blt.w	240525f0 <_draw_sprite_x_t+0x26>
	for (i = 0; i < width; ++i) {
240526f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
240526f8:	3301      	adds	r3, #1
240526fa:	627b      	str	r3, [r7, #36]	@ 0x24
240526fc:	79fb      	ldrb	r3, [r7, #7]
240526fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
24052700:	429a      	cmp	r2, r3
24052702:	f6ff af72 	blt.w	240525ea <_draw_sprite_x_t+0x20>
				}

			}
		}
	}
}
24052706:	bf00      	nop
24052708:	bf00      	nop
2405270a:	3728      	adds	r7, #40	@ 0x28
2405270c:	46bd      	mov	sp, r7
2405270e:	bd80      	pop	{r7, pc}

24052710 <_draw_sprite_y_t>:

static void _draw_sprite_y_t(uint16_t *buf, uint16_t x, uint16_t y,
		uint8_t width, uint8_t height, uint8_t scale, uint16_t *pallete,
		uint8_t *data) {
24052710:	b580      	push	{r7, lr}
24052712:	b08a      	sub	sp, #40	@ 0x28
24052714:	af00      	add	r7, sp, #0
24052716:	60f8      	str	r0, [r7, #12]
24052718:	4608      	mov	r0, r1
2405271a:	4611      	mov	r1, r2
2405271c:	461a      	mov	r2, r3
2405271e:	4603      	mov	r3, r0
24052720:	817b      	strh	r3, [r7, #10]
24052722:	460b      	mov	r3, r1
24052724:	813b      	strh	r3, [r7, #8]
24052726:	4613      	mov	r3, r2
24052728:	71fb      	strb	r3, [r7, #7]
	int k;
	int l;
	uint16_t color;
	uint16_t Xpos;
	uint16_t Ypos;
	for (i = 0; i < width; ++i) {
2405272a:	2300      	movs	r3, #0
2405272c:	627b      	str	r3, [r7, #36]	@ 0x24
2405272e:	e089      	b.n	24052844 <_draw_sprite_y_t+0x134>
		for (j = 0; j < height; ++j) {
24052730:	2300      	movs	r3, #0
24052732:	623b      	str	r3, [r7, #32]
24052734:	e07d      	b.n	24052832 <_draw_sprite_y_t+0x122>
			color = pallete[
					(i % 2 == 0) ?
24052736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
24052738:	f003 0301 	and.w	r3, r3, #1
			color = pallete[
2405273c:	2b00      	cmp	r3, #0
2405273e:	d116      	bne.n	2405276e <_draw_sprite_y_t+0x5e>
							(((data[(j * width / 2) + i / 2]) & 0xF0) >> 4) :
24052740:	79fb      	ldrb	r3, [r7, #7]
24052742:	6a3a      	ldr	r2, [r7, #32]
24052744:	fb02 f303 	mul.w	r3, r2, r3
24052748:	2b00      	cmp	r3, #0
2405274a:	da00      	bge.n	2405274e <_draw_sprite_y_t+0x3e>
2405274c:	3301      	adds	r3, #1
2405274e:	105b      	asrs	r3, r3, #1
24052750:	461a      	mov	r2, r3
24052752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
24052754:	2b00      	cmp	r3, #0
24052756:	da00      	bge.n	2405275a <_draw_sprite_y_t+0x4a>
24052758:	3301      	adds	r3, #1
2405275a:	105b      	asrs	r3, r3, #1
2405275c:	4413      	add	r3, r2
2405275e:	461a      	mov	r2, r3
24052760:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
24052762:	4413      	add	r3, r2
24052764:	781b      	ldrb	r3, [r3, #0]
24052766:	091b      	lsrs	r3, r3, #4
24052768:	b2db      	uxtb	r3, r3
			color = pallete[
2405276a:	005b      	lsls	r3, r3, #1
2405276c:	e015      	b.n	2405279a <_draw_sprite_y_t+0x8a>
							((data[(j * width / 2) + i / 2]) & 0x0F)];
2405276e:	79fb      	ldrb	r3, [r7, #7]
24052770:	6a3a      	ldr	r2, [r7, #32]
24052772:	fb02 f303 	mul.w	r3, r2, r3
24052776:	2b00      	cmp	r3, #0
24052778:	da00      	bge.n	2405277c <_draw_sprite_y_t+0x6c>
2405277a:	3301      	adds	r3, #1
2405277c:	105b      	asrs	r3, r3, #1
2405277e:	461a      	mov	r2, r3
24052780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
24052782:	2b00      	cmp	r3, #0
24052784:	da00      	bge.n	24052788 <_draw_sprite_y_t+0x78>
24052786:	3301      	adds	r3, #1
24052788:	105b      	asrs	r3, r3, #1
2405278a:	4413      	add	r3, r2
2405278c:	461a      	mov	r2, r3
2405278e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
24052790:	4413      	add	r3, r2
24052792:	781b      	ldrb	r3, [r3, #0]
							(((data[(j * width / 2) + i / 2]) & 0xF0) >> 4) :
24052794:	f003 030f 	and.w	r3, r3, #15
			color = pallete[
24052798:	005b      	lsls	r3, r3, #1
2405279a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
2405279c:	4413      	add	r3, r2
2405279e:	881b      	ldrh	r3, [r3, #0]
240527a0:	82fb      	strh	r3, [r7, #22]
			for (k = 0; k < scale; ++k) {
240527a2:	2300      	movs	r3, #0
240527a4:	61fb      	str	r3, [r7, #28]
240527a6:	e03a      	b.n	2405281e <_draw_sprite_y_t+0x10e>
				if (color == pallete[0]) {
240527a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
240527aa:	881b      	ldrh	r3, [r3, #0]
240527ac:	8afa      	ldrh	r2, [r7, #22]
240527ae:	429a      	cmp	r2, r3
240527b0:	d03b      	beq.n	2405282a <_draw_sprite_y_t+0x11a>
					break;
				}
				Xpos = x + i * scale + k;
240527b2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
240527b6:	b29a      	uxth	r2, r3
240527b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
240527ba:	b29b      	uxth	r3, r3
240527bc:	fb12 f303 	smulbb	r3, r2, r3
240527c0:	b29a      	uxth	r2, r3
240527c2:	897b      	ldrh	r3, [r7, #10]
240527c4:	4413      	add	r3, r2
240527c6:	b29a      	uxth	r2, r3
240527c8:	69fb      	ldr	r3, [r7, #28]
240527ca:	b29b      	uxth	r3, r3
240527cc:	4413      	add	r3, r2
240527ce:	82bb      	strh	r3, [r7, #20]
				for (l = 0; l < scale; ++l) {
240527d0:	2300      	movs	r3, #0
240527d2:	61bb      	str	r3, [r7, #24]
240527d4:	e01b      	b.n	2405280e <_draw_sprite_y_t+0xfe>
					Ypos = y + ((height - 1) - j) * scale + l;
240527d6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
240527da:	1e5a      	subs	r2, r3, #1
240527dc:	6a3b      	ldr	r3, [r7, #32]
240527de:	1ad3      	subs	r3, r2, r3
240527e0:	b29a      	uxth	r2, r3
240527e2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
240527e6:	b29b      	uxth	r3, r3
240527e8:	fb12 f303 	smulbb	r3, r2, r3
240527ec:	b29a      	uxth	r2, r3
240527ee:	893b      	ldrh	r3, [r7, #8]
240527f0:	4413      	add	r3, r2
240527f2:	b29a      	uxth	r2, r3
240527f4:	69bb      	ldr	r3, [r7, #24]
240527f6:	b29b      	uxth	r3, r3
240527f8:	4413      	add	r3, r2
240527fa:	827b      	strh	r3, [r7, #18]
					LCD_DrawPixel(buf, Ypos, Xpos, color);
240527fc:	8afb      	ldrh	r3, [r7, #22]
240527fe:	8aba      	ldrh	r2, [r7, #20]
24052800:	8a79      	ldrh	r1, [r7, #18]
24052802:	68f8      	ldr	r0, [r7, #12]
24052804:	f7fe fd0c 	bl	24051220 <LCD_DrawPixel>
				for (l = 0; l < scale; ++l) {
24052808:	69bb      	ldr	r3, [r7, #24]
2405280a:	3301      	adds	r3, #1
2405280c:	61bb      	str	r3, [r7, #24]
2405280e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
24052812:	69ba      	ldr	r2, [r7, #24]
24052814:	429a      	cmp	r2, r3
24052816:	dbde      	blt.n	240527d6 <_draw_sprite_y_t+0xc6>
			for (k = 0; k < scale; ++k) {
24052818:	69fb      	ldr	r3, [r7, #28]
2405281a:	3301      	adds	r3, #1
2405281c:	61fb      	str	r3, [r7, #28]
2405281e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
24052822:	69fa      	ldr	r2, [r7, #28]
24052824:	429a      	cmp	r2, r3
24052826:	dbbf      	blt.n	240527a8 <_draw_sprite_y_t+0x98>
24052828:	e000      	b.n	2405282c <_draw_sprite_y_t+0x11c>
					break;
2405282a:	bf00      	nop
		for (j = 0; j < height; ++j) {
2405282c:	6a3b      	ldr	r3, [r7, #32]
2405282e:	3301      	adds	r3, #1
24052830:	623b      	str	r3, [r7, #32]
24052832:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
24052836:	6a3a      	ldr	r2, [r7, #32]
24052838:	429a      	cmp	r2, r3
2405283a:	f6ff af7c 	blt.w	24052736 <_draw_sprite_y_t+0x26>
	for (i = 0; i < width; ++i) {
2405283e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
24052840:	3301      	adds	r3, #1
24052842:	627b      	str	r3, [r7, #36]	@ 0x24
24052844:	79fb      	ldrb	r3, [r7, #7]
24052846:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
24052848:	429a      	cmp	r2, r3
2405284a:	f6ff af71 	blt.w	24052730 <_draw_sprite_y_t+0x20>
				}

			}
		}
	}
}
2405284e:	bf00      	nop
24052850:	bf00      	nop
24052852:	3728      	adds	r7, #40	@ 0x28
24052854:	46bd      	mov	sp, r7
24052856:	bd80      	pop	{r7, pc}

24052858 <_draw_sprite_xy_t>:

static void _draw_sprite_xy_t(uint16_t *buf, uint16_t x, uint16_t y,
		uint8_t width, uint8_t height, uint8_t scale, uint16_t *pallete,
		uint8_t *data) {
24052858:	b580      	push	{r7, lr}
2405285a:	b08a      	sub	sp, #40	@ 0x28
2405285c:	af00      	add	r7, sp, #0
2405285e:	60f8      	str	r0, [r7, #12]
24052860:	4608      	mov	r0, r1
24052862:	4611      	mov	r1, r2
24052864:	461a      	mov	r2, r3
24052866:	4603      	mov	r3, r0
24052868:	817b      	strh	r3, [r7, #10]
2405286a:	460b      	mov	r3, r1
2405286c:	813b      	strh	r3, [r7, #8]
2405286e:	4613      	mov	r3, r2
24052870:	71fb      	strb	r3, [r7, #7]
	int k;
	int l;
	uint16_t color;
	uint16_t Xpos;
	uint16_t Ypos;
	for (i = 0; i < width; ++i) {
24052872:	2300      	movs	r3, #0
24052874:	627b      	str	r3, [r7, #36]	@ 0x24
24052876:	e08c      	b.n	24052992 <_draw_sprite_xy_t+0x13a>
		for (j = 0; j < height; ++j) {
24052878:	2300      	movs	r3, #0
2405287a:	623b      	str	r3, [r7, #32]
2405287c:	e080      	b.n	24052980 <_draw_sprite_xy_t+0x128>
			color = pallete[
					(i % 2 == 0) ?
2405287e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
24052880:	f003 0301 	and.w	r3, r3, #1
			color = pallete[
24052884:	2b00      	cmp	r3, #0
24052886:	d116      	bne.n	240528b6 <_draw_sprite_xy_t+0x5e>
							(((data[(j * width / 2) + i / 2]) & 0xF0) >> 4) :
24052888:	79fb      	ldrb	r3, [r7, #7]
2405288a:	6a3a      	ldr	r2, [r7, #32]
2405288c:	fb02 f303 	mul.w	r3, r2, r3
24052890:	2b00      	cmp	r3, #0
24052892:	da00      	bge.n	24052896 <_draw_sprite_xy_t+0x3e>
24052894:	3301      	adds	r3, #1
24052896:	105b      	asrs	r3, r3, #1
24052898:	461a      	mov	r2, r3
2405289a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2405289c:	2b00      	cmp	r3, #0
2405289e:	da00      	bge.n	240528a2 <_draw_sprite_xy_t+0x4a>
240528a0:	3301      	adds	r3, #1
240528a2:	105b      	asrs	r3, r3, #1
240528a4:	4413      	add	r3, r2
240528a6:	461a      	mov	r2, r3
240528a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
240528aa:	4413      	add	r3, r2
240528ac:	781b      	ldrb	r3, [r3, #0]
240528ae:	091b      	lsrs	r3, r3, #4
240528b0:	b2db      	uxtb	r3, r3
			color = pallete[
240528b2:	005b      	lsls	r3, r3, #1
240528b4:	e015      	b.n	240528e2 <_draw_sprite_xy_t+0x8a>
							((data[(j * width / 2) + i / 2]) & 0x0F)];
240528b6:	79fb      	ldrb	r3, [r7, #7]
240528b8:	6a3a      	ldr	r2, [r7, #32]
240528ba:	fb02 f303 	mul.w	r3, r2, r3
240528be:	2b00      	cmp	r3, #0
240528c0:	da00      	bge.n	240528c4 <_draw_sprite_xy_t+0x6c>
240528c2:	3301      	adds	r3, #1
240528c4:	105b      	asrs	r3, r3, #1
240528c6:	461a      	mov	r2, r3
240528c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
240528ca:	2b00      	cmp	r3, #0
240528cc:	da00      	bge.n	240528d0 <_draw_sprite_xy_t+0x78>
240528ce:	3301      	adds	r3, #1
240528d0:	105b      	asrs	r3, r3, #1
240528d2:	4413      	add	r3, r2
240528d4:	461a      	mov	r2, r3
240528d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
240528d8:	4413      	add	r3, r2
240528da:	781b      	ldrb	r3, [r3, #0]
							(((data[(j * width / 2) + i / 2]) & 0xF0) >> 4) :
240528dc:	f003 030f 	and.w	r3, r3, #15
			color = pallete[
240528e0:	005b      	lsls	r3, r3, #1
240528e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
240528e4:	4413      	add	r3, r2
240528e6:	881b      	ldrh	r3, [r3, #0]
240528e8:	82fb      	strh	r3, [r7, #22]
			for (k = 0; k < scale; ++k) {
240528ea:	2300      	movs	r3, #0
240528ec:	61fb      	str	r3, [r7, #28]
240528ee:	e03d      	b.n	2405296c <_draw_sprite_xy_t+0x114>
				if (color == pallete[0]) {
240528f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
240528f2:	881b      	ldrh	r3, [r3, #0]
240528f4:	8afa      	ldrh	r2, [r7, #22]
240528f6:	429a      	cmp	r2, r3
240528f8:	d03e      	beq.n	24052978 <_draw_sprite_xy_t+0x120>
					break;
				}
				Xpos = x + ((width - 1) - i) * scale + k;
240528fa:	79fb      	ldrb	r3, [r7, #7]
240528fc:	1e5a      	subs	r2, r3, #1
240528fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
24052900:	1ad3      	subs	r3, r2, r3
24052902:	b29a      	uxth	r2, r3
24052904:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
24052908:	b29b      	uxth	r3, r3
2405290a:	fb12 f303 	smulbb	r3, r2, r3
2405290e:	b29a      	uxth	r2, r3
24052910:	897b      	ldrh	r3, [r7, #10]
24052912:	4413      	add	r3, r2
24052914:	b29a      	uxth	r2, r3
24052916:	69fb      	ldr	r3, [r7, #28]
24052918:	b29b      	uxth	r3, r3
2405291a:	4413      	add	r3, r2
2405291c:	82bb      	strh	r3, [r7, #20]
				for (l = 0; l < scale; ++l) {
2405291e:	2300      	movs	r3, #0
24052920:	61bb      	str	r3, [r7, #24]
24052922:	e01b      	b.n	2405295c <_draw_sprite_xy_t+0x104>
					Ypos = y + ((height - 1) - j) * scale + l;
24052924:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
24052928:	1e5a      	subs	r2, r3, #1
2405292a:	6a3b      	ldr	r3, [r7, #32]
2405292c:	1ad3      	subs	r3, r2, r3
2405292e:	b29a      	uxth	r2, r3
24052930:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
24052934:	b29b      	uxth	r3, r3
24052936:	fb12 f303 	smulbb	r3, r2, r3
2405293a:	b29a      	uxth	r2, r3
2405293c:	893b      	ldrh	r3, [r7, #8]
2405293e:	4413      	add	r3, r2
24052940:	b29a      	uxth	r2, r3
24052942:	69bb      	ldr	r3, [r7, #24]
24052944:	b29b      	uxth	r3, r3
24052946:	4413      	add	r3, r2
24052948:	827b      	strh	r3, [r7, #18]
					LCD_DrawPixel(buf, Ypos, Xpos, color);
2405294a:	8afb      	ldrh	r3, [r7, #22]
2405294c:	8aba      	ldrh	r2, [r7, #20]
2405294e:	8a79      	ldrh	r1, [r7, #18]
24052950:	68f8      	ldr	r0, [r7, #12]
24052952:	f7fe fc65 	bl	24051220 <LCD_DrawPixel>
				for (l = 0; l < scale; ++l) {
24052956:	69bb      	ldr	r3, [r7, #24]
24052958:	3301      	adds	r3, #1
2405295a:	61bb      	str	r3, [r7, #24]
2405295c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
24052960:	69ba      	ldr	r2, [r7, #24]
24052962:	429a      	cmp	r2, r3
24052964:	dbde      	blt.n	24052924 <_draw_sprite_xy_t+0xcc>
			for (k = 0; k < scale; ++k) {
24052966:	69fb      	ldr	r3, [r7, #28]
24052968:	3301      	adds	r3, #1
2405296a:	61fb      	str	r3, [r7, #28]
2405296c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
24052970:	69fa      	ldr	r2, [r7, #28]
24052972:	429a      	cmp	r2, r3
24052974:	dbbc      	blt.n	240528f0 <_draw_sprite_xy_t+0x98>
24052976:	e000      	b.n	2405297a <_draw_sprite_xy_t+0x122>
					break;
24052978:	bf00      	nop
		for (j = 0; j < height; ++j) {
2405297a:	6a3b      	ldr	r3, [r7, #32]
2405297c:	3301      	adds	r3, #1
2405297e:	623b      	str	r3, [r7, #32]
24052980:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
24052984:	6a3a      	ldr	r2, [r7, #32]
24052986:	429a      	cmp	r2, r3
24052988:	f6ff af79 	blt.w	2405287e <_draw_sprite_xy_t+0x26>
	for (i = 0; i < width; ++i) {
2405298c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2405298e:	3301      	adds	r3, #1
24052990:	627b      	str	r3, [r7, #36]	@ 0x24
24052992:	79fb      	ldrb	r3, [r7, #7]
24052994:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
24052996:	429a      	cmp	r2, r3
24052998:	f6ff af6e 	blt.w	24052878 <_draw_sprite_xy_t+0x20>
				}

			}
		}
	}
}
2405299c:	bf00      	nop
2405299e:	bf00      	nop
240529a0:	3728      	adds	r7, #40	@ 0x28
240529a2:	46bd      	mov	sp, r7
240529a4:	bd80      	pop	{r7, pc}
	...

240529a8 <gw_audio_init>:
Generator gen3;
Noise noise1;

static uint32_t audio_frame = 0;

void gw_audio_init(void) {
240529a8:	b580      	push	{r7, lr}
240529aa:	b082      	sub	sp, #8
240529ac:	af00      	add	r7, sp, #0
	memset(audiobuffer, 0, sizeof(audiobuffer));
240529ae:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
240529b2:	2100      	movs	r1, #0
240529b4:	4853      	ldr	r0, [pc, #332]	@ (24052b04 <gw_audio_init+0x15c>)
240529b6:	f011 ff2d 	bl	24064814 <memset>
	HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t*) audiobuffer,
240529ba:	f44f 6216 	mov.w	r2, #2400	@ 0x960
240529be:	4951      	ldr	r1, [pc, #324]	@ (24052b04 <gw_audio_init+0x15c>)
240529c0:	4851      	ldr	r0, [pc, #324]	@ (24052b08 <gw_audio_init+0x160>)
240529c2:	f00f fdc7 	bl	24062554 <HAL_SAI_Transmit_DMA>
	AUDIO_BUFFER_LENGTH);
	int i;
	for (i = 0; i < AUDIO_PROGRAMMABLE_LENGTH; i++) {
240529c6:	2300      	movs	r3, #0
240529c8:	607b      	str	r3, [r7, #4]
240529ca:	e040      	b.n	24052a4e <gw_audio_init+0xa6>
		(&gen1)->gen_freq[i] = 0;
240529cc:	4a4f      	ldr	r2, [pc, #316]	@ (24052b0c <gw_audio_init+0x164>)
240529ce:	687b      	ldr	r3, [r7, #4]
240529d0:	4413      	add	r3, r2
240529d2:	2200      	movs	r2, #0
240529d4:	701a      	strb	r2, [r3, #0]
		(&gen1)->gen_duty[i] = PW_HALF;
240529d6:	4a4d      	ldr	r2, [pc, #308]	@ (24052b0c <gw_audio_init+0x164>)
240529d8:	687b      	ldr	r3, [r7, #4]
240529da:	4413      	add	r3, r2
240529dc:	3350      	adds	r3, #80	@ 0x50
240529de:	2201      	movs	r2, #1
240529e0:	701a      	strb	r2, [r3, #0]
		(&gen1)->gen_vol[i] = (uint8_t) 0;
240529e2:	4a4a      	ldr	r2, [pc, #296]	@ (24052b0c <gw_audio_init+0x164>)
240529e4:	687b      	ldr	r3, [r7, #4]
240529e6:	4413      	add	r3, r2
240529e8:	3328      	adds	r3, #40	@ 0x28
240529ea:	2200      	movs	r2, #0
240529ec:	701a      	strb	r2, [r3, #0]

		(&gen2)->gen_freq[i] = 0;
240529ee:	4a48      	ldr	r2, [pc, #288]	@ (24052b10 <gw_audio_init+0x168>)
240529f0:	687b      	ldr	r3, [r7, #4]
240529f2:	4413      	add	r3, r2
240529f4:	2200      	movs	r2, #0
240529f6:	701a      	strb	r2, [r3, #0]
		(&gen2)->gen_duty[i] = PW_HALF;
240529f8:	4a45      	ldr	r2, [pc, #276]	@ (24052b10 <gw_audio_init+0x168>)
240529fa:	687b      	ldr	r3, [r7, #4]
240529fc:	4413      	add	r3, r2
240529fe:	3350      	adds	r3, #80	@ 0x50
24052a00:	2201      	movs	r2, #1
24052a02:	701a      	strb	r2, [r3, #0]
		(&gen2)->gen_vol[i] = (uint8_t) 0;
24052a04:	4a42      	ldr	r2, [pc, #264]	@ (24052b10 <gw_audio_init+0x168>)
24052a06:	687b      	ldr	r3, [r7, #4]
24052a08:	4413      	add	r3, r2
24052a0a:	3328      	adds	r3, #40	@ 0x28
24052a0c:	2200      	movs	r2, #0
24052a0e:	701a      	strb	r2, [r3, #0]

		(&gen3)->gen_freq[i] = 0;
24052a10:	4a40      	ldr	r2, [pc, #256]	@ (24052b14 <gw_audio_init+0x16c>)
24052a12:	687b      	ldr	r3, [r7, #4]
24052a14:	4413      	add	r3, r2
24052a16:	2200      	movs	r2, #0
24052a18:	701a      	strb	r2, [r3, #0]
		(&gen3)->gen_duty[i] = PW_HALF;
24052a1a:	4a3e      	ldr	r2, [pc, #248]	@ (24052b14 <gw_audio_init+0x16c>)
24052a1c:	687b      	ldr	r3, [r7, #4]
24052a1e:	4413      	add	r3, r2
24052a20:	3350      	adds	r3, #80	@ 0x50
24052a22:	2201      	movs	r2, #1
24052a24:	701a      	strb	r2, [r3, #0]
		(&gen3)->gen_vol[i] = (uint8_t) 0;
24052a26:	4a3b      	ldr	r2, [pc, #236]	@ (24052b14 <gw_audio_init+0x16c>)
24052a28:	687b      	ldr	r3, [r7, #4]
24052a2a:	4413      	add	r3, r2
24052a2c:	3328      	adds	r3, #40	@ 0x28
24052a2e:	2200      	movs	r2, #0
24052a30:	701a      	strb	r2, [r3, #0]

		(&noise1)->noise_freq[i] = 0;
24052a32:	4a39      	ldr	r2, [pc, #228]	@ (24052b18 <gw_audio_init+0x170>)
24052a34:	687b      	ldr	r3, [r7, #4]
24052a36:	4413      	add	r3, r2
24052a38:	2200      	movs	r2, #0
24052a3a:	701a      	strb	r2, [r3, #0]
		(&noise1)->noise_vol[i] = (uint8_t) 0;
24052a3c:	4a36      	ldr	r2, [pc, #216]	@ (24052b18 <gw_audio_init+0x170>)
24052a3e:	687b      	ldr	r3, [r7, #4]
24052a40:	4413      	add	r3, r2
24052a42:	3328      	adds	r3, #40	@ 0x28
24052a44:	2200      	movs	r2, #0
24052a46:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < AUDIO_PROGRAMMABLE_LENGTH; i++) {
24052a48:	687b      	ldr	r3, [r7, #4]
24052a4a:	3301      	adds	r3, #1
24052a4c:	607b      	str	r3, [r7, #4]
24052a4e:	687b      	ldr	r3, [r7, #4]
24052a50:	2b27      	cmp	r3, #39	@ 0x27
24052a52:	ddbb      	ble.n	240529cc <gw_audio_init+0x24>
	}

	(&gen1)->samples_high = 0;
24052a54:	4b2d      	ldr	r3, [pc, #180]	@ (24052b0c <gw_audio_init+0x164>)
24052a56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
24052a5a:	2200      	movs	r2, #0
24052a5c:	f8a3 2338 	strh.w	r2, [r3, #824]	@ 0x338
	(&gen1)->samples_low = 0;
24052a60:	4b2a      	ldr	r3, [pc, #168]	@ (24052b0c <gw_audio_init+0x164>)
24052a62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
24052a66:	2200      	movs	r2, #0
24052a68:	f8a3 233a 	strh.w	r2, [r3, #826]	@ 0x33a
	(&gen1)->samples_high = 0;
24052a6c:	4b27      	ldr	r3, [pc, #156]	@ (24052b0c <gw_audio_init+0x164>)
24052a6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
24052a72:	2200      	movs	r2, #0
24052a74:	f8a3 2338 	strh.w	r2, [r3, #824]	@ 0x338
	(&gen1)->samples_low = 0;
24052a78:	4b24      	ldr	r3, [pc, #144]	@ (24052b0c <gw_audio_init+0x164>)
24052a7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
24052a7e:	2200      	movs	r2, #0
24052a80:	f8a3 233a 	strh.w	r2, [r3, #826]	@ 0x33a
	(&gen1)->samples_high = 0;
24052a84:	4b21      	ldr	r3, [pc, #132]	@ (24052b0c <gw_audio_init+0x164>)
24052a86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
24052a8a:	2200      	movs	r2, #0
24052a8c:	f8a3 2338 	strh.w	r2, [r3, #824]	@ 0x338
	(&gen1)->samples_low = 0;
24052a90:	4b1e      	ldr	r3, [pc, #120]	@ (24052b0c <gw_audio_init+0x164>)
24052a92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
24052a96:	2200      	movs	r2, #0
24052a98:	f8a3 233a 	strh.w	r2, [r3, #826]	@ 0x33a
	(&noise1)->LFSR = 1;
24052a9c:	4b1e      	ldr	r3, [pc, #120]	@ (24052b18 <gw_audio_init+0x170>)
24052a9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
24052aa2:	2201      	movs	r2, #1
24052aa4:	f8a3 2310 	strh.w	r2, [r3, #784]	@ 0x310
	(&noise1)->last = 0;
24052aa8:	4b1b      	ldr	r3, [pc, #108]	@ (24052b18 <gw_audio_init+0x170>)
24052aaa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
24052aae:	2200      	movs	r2, #0
24052ab0:	f8a3 2312 	strh.w	r2, [r3, #786]	@ 0x312

	for (i = 0; i < AUDIO_BUFFER_LENGTH; i++) {
24052ab4:	2300      	movs	r3, #0
24052ab6:	607b      	str	r3, [r7, #4]
24052ab8:	e01a      	b.n	24052af0 <gw_audio_init+0x148>
		(&gen1)->audiobuffer[i] = 0;
24052aba:	4a14      	ldr	r2, [pc, #80]	@ (24052b0c <gw_audio_init+0x164>)
24052abc:	687b      	ldr	r3, [r7, #4]
24052abe:	333c      	adds	r3, #60	@ 0x3c
24052ac0:	2100      	movs	r1, #0
24052ac2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		(&gen2)->audiobuffer[i] = 0;
24052ac6:	4a12      	ldr	r2, [pc, #72]	@ (24052b10 <gw_audio_init+0x168>)
24052ac8:	687b      	ldr	r3, [r7, #4]
24052aca:	333c      	adds	r3, #60	@ 0x3c
24052acc:	2100      	movs	r1, #0
24052ace:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		(&gen3)->audiobuffer[i] = 0;
24052ad2:	4a10      	ldr	r2, [pc, #64]	@ (24052b14 <gw_audio_init+0x16c>)
24052ad4:	687b      	ldr	r3, [r7, #4]
24052ad6:	333c      	adds	r3, #60	@ 0x3c
24052ad8:	2100      	movs	r1, #0
24052ada:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		(&noise1)->audiobuffer[i] = 0;
24052ade:	4a0e      	ldr	r2, [pc, #56]	@ (24052b18 <gw_audio_init+0x170>)
24052ae0:	687b      	ldr	r3, [r7, #4]
24052ae2:	3328      	adds	r3, #40	@ 0x28
24052ae4:	2100      	movs	r1, #0
24052ae6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i = 0; i < AUDIO_BUFFER_LENGTH; i++) {
24052aea:	687b      	ldr	r3, [r7, #4]
24052aec:	3301      	adds	r3, #1
24052aee:	607b      	str	r3, [r7, #4]
24052af0:	687b      	ldr	r3, [r7, #4]
24052af2:	f5b3 6f16 	cmp.w	r3, #2400	@ 0x960
24052af6:	dbe0      	blt.n	24052aba <gw_audio_init+0x112>
	}
}
24052af8:	bf00      	nop
24052afa:	bf00      	nop
24052afc:	3708      	adds	r7, #8
24052afe:	46bd      	mov	sp, r7
24052b00:	bd80      	pop	{r7, pc}
24052b02:	bf00      	nop
24052b04:	30000000 	.word	0x30000000
24052b08:	20000490 	.word	0x20000490
24052b0c:	300012c0 	.word	0x300012c0
24052b10:	30002600 	.word	0x30002600
24052b14:	30003940 	.word	0x30003940
24052b18:	30004c80 	.word	0x30004c80

24052b1c <HAL_SAI_TxHalfCpltCallback>:

void gw_audio_resume(void) {
	HAL_SAI_DMAResume(&hsai_BlockA1);
}

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
24052b1c:	b580      	push	{r7, lr}
24052b1e:	b084      	sub	sp, #16
24052b20:	af00      	add	r7, sp, #0
24052b22:	6078      	str	r0, [r7, #4]
	move_generator(&gen1);
24052b24:	4829      	ldr	r0, [pc, #164]	@ (24052bcc <HAL_SAI_TxHalfCpltCallback+0xb0>)
24052b26:	f000 f96f 	bl	24052e08 <move_generator>
	play_generator(&gen1, 0, AUDIO_BUFFER_LENGTH / 2);
24052b2a:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
24052b2e:	2100      	movs	r1, #0
24052b30:	4826      	ldr	r0, [pc, #152]	@ (24052bcc <HAL_SAI_TxHalfCpltCallback+0xb0>)
24052b32:	f000 f8b7 	bl	24052ca4 <play_generator>
	move_generator(&gen2);
24052b36:	4826      	ldr	r0, [pc, #152]	@ (24052bd0 <HAL_SAI_TxHalfCpltCallback+0xb4>)
24052b38:	f000 f966 	bl	24052e08 <move_generator>
	play_generator(&gen2, 0, AUDIO_BUFFER_LENGTH / 2);
24052b3c:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
24052b40:	2100      	movs	r1, #0
24052b42:	4823      	ldr	r0, [pc, #140]	@ (24052bd0 <HAL_SAI_TxHalfCpltCallback+0xb4>)
24052b44:	f000 f8ae 	bl	24052ca4 <play_generator>
	move_generator(&gen3);
24052b48:	4822      	ldr	r0, [pc, #136]	@ (24052bd4 <HAL_SAI_TxHalfCpltCallback+0xb8>)
24052b4a:	f000 f95d 	bl	24052e08 <move_generator>
	play_generator(&gen3, 0, AUDIO_BUFFER_LENGTH / 2);
24052b4e:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
24052b52:	2100      	movs	r1, #0
24052b54:	481f      	ldr	r0, [pc, #124]	@ (24052bd4 <HAL_SAI_TxHalfCpltCallback+0xb8>)
24052b56:	f000 f8a5 	bl	24052ca4 <play_generator>
	move_noise(&noise1);
24052b5a:	481f      	ldr	r0, [pc, #124]	@ (24052bd8 <HAL_SAI_TxHalfCpltCallback+0xbc>)
24052b5c:	f000 fa50 	bl	24053000 <move_noise>
	play_noise(&noise1, 0, AUDIO_BUFFER_LENGTH / 2);
24052b60:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
24052b64:	2100      	movs	r1, #0
24052b66:	481c      	ldr	r0, [pc, #112]	@ (24052bd8 <HAL_SAI_TxHalfCpltCallback+0xbc>)
24052b68:	f000 f9b9 	bl	24052ede <play_noise>
	int i;
	for (i = 0; i < AUDIO_BUFFER_LENGTH / 2; i++) {
24052b6c:	2300      	movs	r3, #0
24052b6e:	60fb      	str	r3, [r7, #12]
24052b70:	e022      	b.n	24052bb8 <HAL_SAI_TxHalfCpltCallback+0x9c>
		audiobuffer[i] = 4
				* (gen1.audiobuffer[i] + gen2.audiobuffer[i]
24052b72:	4a16      	ldr	r2, [pc, #88]	@ (24052bcc <HAL_SAI_TxHalfCpltCallback+0xb0>)
24052b74:	68fb      	ldr	r3, [r7, #12]
24052b76:	333c      	adds	r3, #60	@ 0x3c
24052b78:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
24052b7c:	4619      	mov	r1, r3
24052b7e:	4a14      	ldr	r2, [pc, #80]	@ (24052bd0 <HAL_SAI_TxHalfCpltCallback+0xb4>)
24052b80:	68fb      	ldr	r3, [r7, #12]
24052b82:	333c      	adds	r3, #60	@ 0x3c
24052b84:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
24052b88:	440b      	add	r3, r1
						+ gen3.audiobuffer[i] + noise1.audiobuffer[i]);
24052b8a:	4912      	ldr	r1, [pc, #72]	@ (24052bd4 <HAL_SAI_TxHalfCpltCallback+0xb8>)
24052b8c:	68fa      	ldr	r2, [r7, #12]
24052b8e:	323c      	adds	r2, #60	@ 0x3c
24052b90:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
24052b94:	4413      	add	r3, r2
24052b96:	4910      	ldr	r1, [pc, #64]	@ (24052bd8 <HAL_SAI_TxHalfCpltCallback+0xbc>)
24052b98:	68fa      	ldr	r2, [r7, #12]
24052b9a:	3228      	adds	r2, #40	@ 0x28
24052b9c:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
24052ba0:	4413      	add	r3, r2
		audiobuffer[i] = 4
24052ba2:	b29b      	uxth	r3, r3
24052ba4:	009b      	lsls	r3, r3, #2
24052ba6:	b29b      	uxth	r3, r3
24052ba8:	b219      	sxth	r1, r3
24052baa:	4a0c      	ldr	r2, [pc, #48]	@ (24052bdc <HAL_SAI_TxHalfCpltCallback+0xc0>)
24052bac:	68fb      	ldr	r3, [r7, #12]
24052bae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i = 0; i < AUDIO_BUFFER_LENGTH / 2; i++) {
24052bb2:	68fb      	ldr	r3, [r7, #12]
24052bb4:	3301      	adds	r3, #1
24052bb6:	60fb      	str	r3, [r7, #12]
24052bb8:	68fb      	ldr	r3, [r7, #12]
24052bba:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
24052bbe:	dbd8      	blt.n	24052b72 <HAL_SAI_TxHalfCpltCallback+0x56>
	}
}
24052bc0:	bf00      	nop
24052bc2:	bf00      	nop
24052bc4:	3710      	adds	r7, #16
24052bc6:	46bd      	mov	sp, r7
24052bc8:	bd80      	pop	{r7, pc}
24052bca:	bf00      	nop
24052bcc:	300012c0 	.word	0x300012c0
24052bd0:	30002600 	.word	0x30002600
24052bd4:	30003940 	.word	0x30003940
24052bd8:	30004c80 	.word	0x30004c80
24052bdc:	30000000 	.word	0x30000000

24052be0 <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai) {
24052be0:	b580      	push	{r7, lr}
24052be2:	b084      	sub	sp, #16
24052be4:	af00      	add	r7, sp, #0
24052be6:	6078      	str	r0, [r7, #4]
	audio_frame++;
24052be8:	4b28      	ldr	r3, [pc, #160]	@ (24052c8c <HAL_SAI_TxCpltCallback+0xac>)
24052bea:	681b      	ldr	r3, [r3, #0]
24052bec:	3301      	adds	r3, #1
24052bee:	4a27      	ldr	r2, [pc, #156]	@ (24052c8c <HAL_SAI_TxCpltCallback+0xac>)
24052bf0:	6013      	str	r3, [r2, #0]
	play_generator(&gen1, AUDIO_BUFFER_LENGTH / 2, AUDIO_BUFFER_LENGTH / 2);
24052bf2:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
24052bf6:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
24052bfa:	4825      	ldr	r0, [pc, #148]	@ (24052c90 <HAL_SAI_TxCpltCallback+0xb0>)
24052bfc:	f000 f852 	bl	24052ca4 <play_generator>
	play_generator(&gen2, AUDIO_BUFFER_LENGTH / 2, AUDIO_BUFFER_LENGTH / 2);
24052c00:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
24052c04:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
24052c08:	4822      	ldr	r0, [pc, #136]	@ (24052c94 <HAL_SAI_TxCpltCallback+0xb4>)
24052c0a:	f000 f84b 	bl	24052ca4 <play_generator>
	play_generator(&gen3, AUDIO_BUFFER_LENGTH / 2, AUDIO_BUFFER_LENGTH / 2);
24052c0e:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
24052c12:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
24052c16:	4820      	ldr	r0, [pc, #128]	@ (24052c98 <HAL_SAI_TxCpltCallback+0xb8>)
24052c18:	f000 f844 	bl	24052ca4 <play_generator>
	play_noise(&noise1, AUDIO_BUFFER_LENGTH / 2, AUDIO_BUFFER_LENGTH / 2);
24052c1c:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
24052c20:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
24052c24:	481d      	ldr	r0, [pc, #116]	@ (24052c9c <HAL_SAI_TxCpltCallback+0xbc>)
24052c26:	f000 f95a 	bl	24052ede <play_noise>
	int i;
	for (i = AUDIO_BUFFER_LENGTH / 2; i < AUDIO_BUFFER_LENGTH; i++) {
24052c2a:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
24052c2e:	60fb      	str	r3, [r7, #12]
24052c30:	e022      	b.n	24052c78 <HAL_SAI_TxCpltCallback+0x98>
		audiobuffer[i] = 2
				* (gen1.audiobuffer[i] + gen2.audiobuffer[i]
24052c32:	4a17      	ldr	r2, [pc, #92]	@ (24052c90 <HAL_SAI_TxCpltCallback+0xb0>)
24052c34:	68fb      	ldr	r3, [r7, #12]
24052c36:	333c      	adds	r3, #60	@ 0x3c
24052c38:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
24052c3c:	4619      	mov	r1, r3
24052c3e:	4a15      	ldr	r2, [pc, #84]	@ (24052c94 <HAL_SAI_TxCpltCallback+0xb4>)
24052c40:	68fb      	ldr	r3, [r7, #12]
24052c42:	333c      	adds	r3, #60	@ 0x3c
24052c44:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
24052c48:	440b      	add	r3, r1
						+ gen3.audiobuffer[i] + noise1.audiobuffer[i]);
24052c4a:	4913      	ldr	r1, [pc, #76]	@ (24052c98 <HAL_SAI_TxCpltCallback+0xb8>)
24052c4c:	68fa      	ldr	r2, [r7, #12]
24052c4e:	323c      	adds	r2, #60	@ 0x3c
24052c50:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
24052c54:	4413      	add	r3, r2
24052c56:	4911      	ldr	r1, [pc, #68]	@ (24052c9c <HAL_SAI_TxCpltCallback+0xbc>)
24052c58:	68fa      	ldr	r2, [r7, #12]
24052c5a:	3228      	adds	r2, #40	@ 0x28
24052c5c:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
24052c60:	4413      	add	r3, r2
		audiobuffer[i] = 2
24052c62:	b29b      	uxth	r3, r3
24052c64:	005b      	lsls	r3, r3, #1
24052c66:	b29b      	uxth	r3, r3
24052c68:	b219      	sxth	r1, r3
24052c6a:	4a0d      	ldr	r2, [pc, #52]	@ (24052ca0 <HAL_SAI_TxCpltCallback+0xc0>)
24052c6c:	68fb      	ldr	r3, [r7, #12]
24052c6e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i = AUDIO_BUFFER_LENGTH / 2; i < AUDIO_BUFFER_LENGTH; i++) {
24052c72:	68fb      	ldr	r3, [r7, #12]
24052c74:	3301      	adds	r3, #1
24052c76:	60fb      	str	r3, [r7, #12]
24052c78:	68fb      	ldr	r3, [r7, #12]
24052c7a:	f5b3 6f16 	cmp.w	r3, #2400	@ 0x960
24052c7e:	dbd8      	blt.n	24052c32 <HAL_SAI_TxCpltCallback+0x52>
	}
}
24052c80:	bf00      	nop
24052c82:	bf00      	nop
24052c84:	3710      	adds	r7, #16
24052c86:	46bd      	mov	sp, r7
24052c88:	bd80      	pop	{r7, pc}
24052c8a:	bf00      	nop
24052c8c:	20000220 	.word	0x20000220
24052c90:	300012c0 	.word	0x300012c0
24052c94:	30002600 	.word	0x30002600
24052c98:	30003940 	.word	0x30003940
24052c9c:	30004c80 	.word	0x30004c80
24052ca0:	30000000 	.word	0x30000000

24052ca4 <play_generator>:

void play_generator(Generator *gen, int start, int len) {
24052ca4:	b480      	push	{r7}
24052ca6:	b089      	sub	sp, #36	@ 0x24
24052ca8:	af00      	add	r7, sp, #0
24052caa:	60f8      	str	r0, [r7, #12]
24052cac:	60b9      	str	r1, [r7, #8]
24052cae:	607a      	str	r2, [r7, #4]
	int i;
	uint8_t freq = (*gen).gen_freq[0];
24052cb0:	68fb      	ldr	r3, [r7, #12]
24052cb2:	781b      	ldrb	r3, [r3, #0]
24052cb4:	74fb      	strb	r3, [r7, #19]
	if (freq == 0) {
24052cb6:	7cfb      	ldrb	r3, [r7, #19]
24052cb8:	2b00      	cmp	r3, #0
24052cba:	d112      	bne.n	24052ce2 <play_generator+0x3e>
		for (i = start; i < start + len; i++) {
24052cbc:	68bb      	ldr	r3, [r7, #8]
24052cbe:	61fb      	str	r3, [r7, #28]
24052cc0:	e008      	b.n	24052cd4 <play_generator+0x30>
			gen->audiobuffer[i] = 0;
24052cc2:	68fb      	ldr	r3, [r7, #12]
24052cc4:	69fa      	ldr	r2, [r7, #28]
24052cc6:	323c      	adds	r2, #60	@ 0x3c
24052cc8:	2100      	movs	r1, #0
24052cca:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (i = start; i < start + len; i++) {
24052cce:	69fb      	ldr	r3, [r7, #28]
24052cd0:	3301      	adds	r3, #1
24052cd2:	61fb      	str	r3, [r7, #28]
24052cd4:	68ba      	ldr	r2, [r7, #8]
24052cd6:	687b      	ldr	r3, [r7, #4]
24052cd8:	4413      	add	r3, r2
24052cda:	69fa      	ldr	r2, [r7, #28]
24052cdc:	429a      	cmp	r2, r3
24052cde:	dbf0      	blt.n	24052cc2 <play_generator+0x1e>
		}
		return;
24052ce0:	e08d      	b.n	24052dfe <play_generator+0x15a>
	}
	uint8_t duty = (*gen).gen_duty[0];
24052ce2:	68fb      	ldr	r3, [r7, #12]
24052ce4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
24052ce8:	74bb      	strb	r3, [r7, #18]
	uint16_t samples_high;
	uint16_t samples_low;
	switch (duty) {
24052cea:	7cbb      	ldrb	r3, [r7, #18]
24052cec:	2b02      	cmp	r3, #2
24052cee:	d018      	beq.n	24052d22 <play_generator+0x7e>
24052cf0:	2b02      	cmp	r3, #2
24052cf2:	dc1f      	bgt.n	24052d34 <play_generator+0x90>
24052cf4:	2b00      	cmp	r3, #0
24052cf6:	d002      	beq.n	24052cfe <play_generator+0x5a>
24052cf8:	2b01      	cmp	r3, #1
24052cfa:	d009      	beq.n	24052d10 <play_generator+0x6c>
24052cfc:	e01a      	b.n	24052d34 <play_generator+0x90>
	case PW_SHORT:
		samples_high = 1 * (uint16_t) freq;
24052cfe:	7cfb      	ldrb	r3, [r7, #19]
24052d00:	837b      	strh	r3, [r7, #26]
		samples_low = 3 * (uint16_t) freq;
24052d02:	7cfb      	ldrb	r3, [r7, #19]
24052d04:	b29b      	uxth	r3, r3
24052d06:	461a      	mov	r2, r3
24052d08:	0052      	lsls	r2, r2, #1
24052d0a:	4413      	add	r3, r2
24052d0c:	833b      	strh	r3, [r7, #24]
		break;
24052d0e:	e01a      	b.n	24052d46 <play_generator+0xa2>
	case PW_HALF:
		samples_high = 2 * (uint16_t) freq;
24052d10:	7cfb      	ldrb	r3, [r7, #19]
24052d12:	b29b      	uxth	r3, r3
24052d14:	005b      	lsls	r3, r3, #1
24052d16:	837b      	strh	r3, [r7, #26]
		samples_low = 2 * (uint16_t) freq;
24052d18:	7cfb      	ldrb	r3, [r7, #19]
24052d1a:	b29b      	uxth	r3, r3
24052d1c:	005b      	lsls	r3, r3, #1
24052d1e:	833b      	strh	r3, [r7, #24]
		break;
24052d20:	e011      	b.n	24052d46 <play_generator+0xa2>
	case PW_LONG:
		samples_high = 3 * (uint16_t) freq;
24052d22:	7cfb      	ldrb	r3, [r7, #19]
24052d24:	b29b      	uxth	r3, r3
24052d26:	461a      	mov	r2, r3
24052d28:	0052      	lsls	r2, r2, #1
24052d2a:	4413      	add	r3, r2
24052d2c:	837b      	strh	r3, [r7, #26]
		samples_low = 1 * (uint16_t) freq;
24052d2e:	7cfb      	ldrb	r3, [r7, #19]
24052d30:	833b      	strh	r3, [r7, #24]
		break;
24052d32:	e008      	b.n	24052d46 <play_generator+0xa2>
	default:
		samples_high = 2 * (uint16_t) freq;
24052d34:	7cfb      	ldrb	r3, [r7, #19]
24052d36:	b29b      	uxth	r3, r3
24052d38:	005b      	lsls	r3, r3, #1
24052d3a:	837b      	strh	r3, [r7, #26]
		samples_low = 2 * (uint16_t) freq;
24052d3c:	7cfb      	ldrb	r3, [r7, #19]
24052d3e:	b29b      	uxth	r3, r3
24052d40:	005b      	lsls	r3, r3, #1
24052d42:	833b      	strh	r3, [r7, #24]
		break;
24052d44:	bf00      	nop
	}
	uint8_t vol = (*gen).gen_vol[0];
24052d46:	68fb      	ldr	r3, [r7, #12]
24052d48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
24052d4c:	747b      	strb	r3, [r7, #17]
	uint16_t counter_high = (*gen).samples_high;
24052d4e:	68fb      	ldr	r3, [r7, #12]
24052d50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
24052d54:	f8b3 3338 	ldrh.w	r3, [r3, #824]	@ 0x338
24052d58:	82fb      	strh	r3, [r7, #22]
	uint16_t counter_low = (*gen).samples_low;
24052d5a:	68fb      	ldr	r3, [r7, #12]
24052d5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
24052d60:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
24052d64:	82bb      	strh	r3, [r7, #20]

	if (counter_high > samples_high) {
24052d66:	8afa      	ldrh	r2, [r7, #22]
24052d68:	8b7b      	ldrh	r3, [r7, #26]
24052d6a:	429a      	cmp	r2, r3
24052d6c:	d901      	bls.n	24052d72 <play_generator+0xce>
		counter_high = samples_high;
24052d6e:	8b7b      	ldrh	r3, [r7, #26]
24052d70:	82fb      	strh	r3, [r7, #22]
	}
	if (counter_low > samples_low) {
24052d72:	8aba      	ldrh	r2, [r7, #20]
24052d74:	8b3b      	ldrh	r3, [r7, #24]
24052d76:	429a      	cmp	r2, r3
24052d78:	d901      	bls.n	24052d7e <play_generator+0xda>
		counter_low = samples_low;
24052d7a:	8b3b      	ldrh	r3, [r7, #24]
24052d7c:	82bb      	strh	r3, [r7, #20]
	}

	for (i = start; i < start + len; i++) {
24052d7e:	68bb      	ldr	r3, [r7, #8]
24052d80:	61fb      	str	r3, [r7, #28]
24052d82:	e028      	b.n	24052dd6 <play_generator+0x132>
		if (counter_high > 0) {
24052d84:	8afb      	ldrh	r3, [r7, #22]
24052d86:	2b00      	cmp	r3, #0
24052d88:	d00a      	beq.n	24052da0 <play_generator+0xfc>
			gen->audiobuffer[i] = (int16_t) vol;
24052d8a:	7c7b      	ldrb	r3, [r7, #17]
24052d8c:	b219      	sxth	r1, r3
24052d8e:	68fb      	ldr	r3, [r7, #12]
24052d90:	69fa      	ldr	r2, [r7, #28]
24052d92:	323c      	adds	r2, #60	@ 0x3c
24052d94:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			counter_high--;
24052d98:	8afb      	ldrh	r3, [r7, #22]
24052d9a:	3b01      	subs	r3, #1
24052d9c:	82fb      	strh	r3, [r7, #22]
24052d9e:	e017      	b.n	24052dd0 <play_generator+0x12c>
		} else {
			if (counter_low > 0) {
24052da0:	8abb      	ldrh	r3, [r7, #20]
24052da2:	2b00      	cmp	r3, #0
24052da4:	d00d      	beq.n	24052dc2 <play_generator+0x11e>
				gen->audiobuffer[i] = -(int16_t) vol;
24052da6:	7c7b      	ldrb	r3, [r7, #17]
24052da8:	b29b      	uxth	r3, r3
24052daa:	425b      	negs	r3, r3
24052dac:	b29b      	uxth	r3, r3
24052dae:	b219      	sxth	r1, r3
24052db0:	68fb      	ldr	r3, [r7, #12]
24052db2:	69fa      	ldr	r2, [r7, #28]
24052db4:	323c      	adds	r2, #60	@ 0x3c
24052db6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				counter_low--;
24052dba:	8abb      	ldrh	r3, [r7, #20]
24052dbc:	3b01      	subs	r3, #1
24052dbe:	82bb      	strh	r3, [r7, #20]
24052dc0:	e006      	b.n	24052dd0 <play_generator+0x12c>
			} else {
				counter_high = samples_high;
24052dc2:	8b7b      	ldrh	r3, [r7, #26]
24052dc4:	82fb      	strh	r3, [r7, #22]
				counter_low = samples_low;
24052dc6:	8b3b      	ldrh	r3, [r7, #24]
24052dc8:	82bb      	strh	r3, [r7, #20]
				i--;
24052dca:	69fb      	ldr	r3, [r7, #28]
24052dcc:	3b01      	subs	r3, #1
24052dce:	61fb      	str	r3, [r7, #28]
	for (i = start; i < start + len; i++) {
24052dd0:	69fb      	ldr	r3, [r7, #28]
24052dd2:	3301      	adds	r3, #1
24052dd4:	61fb      	str	r3, [r7, #28]
24052dd6:	68ba      	ldr	r2, [r7, #8]
24052dd8:	687b      	ldr	r3, [r7, #4]
24052dda:	4413      	add	r3, r2
24052ddc:	69fa      	ldr	r2, [r7, #28]
24052dde:	429a      	cmp	r2, r3
24052de0:	dbd0      	blt.n	24052d84 <play_generator+0xe0>
			}
		}
	}
	gen->samples_high = counter_high;
24052de2:	68fb      	ldr	r3, [r7, #12]
24052de4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
24052de8:	461a      	mov	r2, r3
24052dea:	8afb      	ldrh	r3, [r7, #22]
24052dec:	f8a2 3338 	strh.w	r3, [r2, #824]	@ 0x338
	gen->samples_low = counter_low;
24052df0:	68fb      	ldr	r3, [r7, #12]
24052df2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
24052df6:	461a      	mov	r2, r3
24052df8:	8abb      	ldrh	r3, [r7, #20]
24052dfa:	f8a2 333a 	strh.w	r3, [r2, #826]	@ 0x33a
}
24052dfe:	3724      	adds	r7, #36	@ 0x24
24052e00:	46bd      	mov	sp, r7
24052e02:	f85d 7b04 	ldr.w	r7, [sp], #4
24052e06:	4770      	bx	lr

24052e08 <move_generator>:

void move_generator(Generator *gen) {
24052e08:	b480      	push	{r7}
24052e0a:	b087      	sub	sp, #28
24052e0c:	af00      	add	r7, sp, #0
24052e0e:	6078      	str	r0, [r7, #4]
	int i, n = AUDIO_PROGRAMMABLE_LENGTH;
24052e10:	2328      	movs	r3, #40	@ 0x28
24052e12:	613b      	str	r3, [r7, #16]
	uint8_t *a = gen->gen_freq;
24052e14:	687b      	ldr	r3, [r7, #4]
24052e16:	60fb      	str	r3, [r7, #12]
	uint8_t temp = a[0];
24052e18:	68fb      	ldr	r3, [r7, #12]
24052e1a:	781b      	ldrb	r3, [r3, #0]
24052e1c:	72fb      	strb	r3, [r7, #11]
	for (i = 0; i < n - 1; i++) {
24052e1e:	2300      	movs	r3, #0
24052e20:	617b      	str	r3, [r7, #20]
24052e22:	e00b      	b.n	24052e3c <move_generator+0x34>
		a[i] = a[i + 1];
24052e24:	697b      	ldr	r3, [r7, #20]
24052e26:	3301      	adds	r3, #1
24052e28:	68fa      	ldr	r2, [r7, #12]
24052e2a:	441a      	add	r2, r3
24052e2c:	697b      	ldr	r3, [r7, #20]
24052e2e:	68f9      	ldr	r1, [r7, #12]
24052e30:	440b      	add	r3, r1
24052e32:	7812      	ldrb	r2, [r2, #0]
24052e34:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < n - 1; i++) {
24052e36:	697b      	ldr	r3, [r7, #20]
24052e38:	3301      	adds	r3, #1
24052e3a:	617b      	str	r3, [r7, #20]
24052e3c:	693b      	ldr	r3, [r7, #16]
24052e3e:	3b01      	subs	r3, #1
24052e40:	697a      	ldr	r2, [r7, #20]
24052e42:	429a      	cmp	r2, r3
24052e44:	dbee      	blt.n	24052e24 <move_generator+0x1c>
	}
	a[n - 1] = temp;
24052e46:	693b      	ldr	r3, [r7, #16]
24052e48:	3b01      	subs	r3, #1
24052e4a:	68fa      	ldr	r2, [r7, #12]
24052e4c:	4413      	add	r3, r2
24052e4e:	7afa      	ldrb	r2, [r7, #11]
24052e50:	701a      	strb	r2, [r3, #0]
	a = gen->gen_vol;
24052e52:	687b      	ldr	r3, [r7, #4]
24052e54:	3328      	adds	r3, #40	@ 0x28
24052e56:	60fb      	str	r3, [r7, #12]
	temp = a[0];
24052e58:	68fb      	ldr	r3, [r7, #12]
24052e5a:	781b      	ldrb	r3, [r3, #0]
24052e5c:	72fb      	strb	r3, [r7, #11]
	for (i = 0; i < n - 1; i++) {
24052e5e:	2300      	movs	r3, #0
24052e60:	617b      	str	r3, [r7, #20]
24052e62:	e00b      	b.n	24052e7c <move_generator+0x74>
		a[i] = a[i + 1];
24052e64:	697b      	ldr	r3, [r7, #20]
24052e66:	3301      	adds	r3, #1
24052e68:	68fa      	ldr	r2, [r7, #12]
24052e6a:	441a      	add	r2, r3
24052e6c:	697b      	ldr	r3, [r7, #20]
24052e6e:	68f9      	ldr	r1, [r7, #12]
24052e70:	440b      	add	r3, r1
24052e72:	7812      	ldrb	r2, [r2, #0]
24052e74:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < n - 1; i++) {
24052e76:	697b      	ldr	r3, [r7, #20]
24052e78:	3301      	adds	r3, #1
24052e7a:	617b      	str	r3, [r7, #20]
24052e7c:	693b      	ldr	r3, [r7, #16]
24052e7e:	3b01      	subs	r3, #1
24052e80:	697a      	ldr	r2, [r7, #20]
24052e82:	429a      	cmp	r2, r3
24052e84:	dbee      	blt.n	24052e64 <move_generator+0x5c>
	}
	a[n - 1] = temp;
24052e86:	693b      	ldr	r3, [r7, #16]
24052e88:	3b01      	subs	r3, #1
24052e8a:	68fa      	ldr	r2, [r7, #12]
24052e8c:	4413      	add	r3, r2
24052e8e:	7afa      	ldrb	r2, [r7, #11]
24052e90:	701a      	strb	r2, [r3, #0]
	a = gen->gen_duty;
24052e92:	687b      	ldr	r3, [r7, #4]
24052e94:	3350      	adds	r3, #80	@ 0x50
24052e96:	60fb      	str	r3, [r7, #12]
	temp = a[0];
24052e98:	68fb      	ldr	r3, [r7, #12]
24052e9a:	781b      	ldrb	r3, [r3, #0]
24052e9c:	72fb      	strb	r3, [r7, #11]
	for (i = 0; i < n - 1; i++) {
24052e9e:	2300      	movs	r3, #0
24052ea0:	617b      	str	r3, [r7, #20]
24052ea2:	e00b      	b.n	24052ebc <move_generator+0xb4>
		a[i] = a[i + 1];
24052ea4:	697b      	ldr	r3, [r7, #20]
24052ea6:	3301      	adds	r3, #1
24052ea8:	68fa      	ldr	r2, [r7, #12]
24052eaa:	441a      	add	r2, r3
24052eac:	697b      	ldr	r3, [r7, #20]
24052eae:	68f9      	ldr	r1, [r7, #12]
24052eb0:	440b      	add	r3, r1
24052eb2:	7812      	ldrb	r2, [r2, #0]
24052eb4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < n - 1; i++) {
24052eb6:	697b      	ldr	r3, [r7, #20]
24052eb8:	3301      	adds	r3, #1
24052eba:	617b      	str	r3, [r7, #20]
24052ebc:	693b      	ldr	r3, [r7, #16]
24052ebe:	3b01      	subs	r3, #1
24052ec0:	697a      	ldr	r2, [r7, #20]
24052ec2:	429a      	cmp	r2, r3
24052ec4:	dbee      	blt.n	24052ea4 <move_generator+0x9c>
	}
	a[n - 1] = temp;
24052ec6:	693b      	ldr	r3, [r7, #16]
24052ec8:	3b01      	subs	r3, #1
24052eca:	68fa      	ldr	r2, [r7, #12]
24052ecc:	4413      	add	r3, r2
24052ece:	7afa      	ldrb	r2, [r7, #11]
24052ed0:	701a      	strb	r2, [r3, #0]
}
24052ed2:	bf00      	nop
24052ed4:	371c      	adds	r7, #28
24052ed6:	46bd      	mov	sp, r7
24052ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
24052edc:	4770      	bx	lr

24052ede <play_noise>:

void play_noise(Noise *noise, int start, int len) {
24052ede:	b480      	push	{r7}
24052ee0:	b08b      	sub	sp, #44	@ 0x2c
24052ee2:	af00      	add	r7, sp, #0
24052ee4:	60f8      	str	r0, [r7, #12]
24052ee6:	60b9      	str	r1, [r7, #8]
24052ee8:	607a      	str	r2, [r7, #4]
	int i;
	uint16_t freq = 4 * (uint16_t) (*noise).noise_freq[0];
24052eea:	68fb      	ldr	r3, [r7, #12]
24052eec:	781b      	ldrb	r3, [r3, #0]
24052eee:	009b      	lsls	r3, r3, #2
24052ef0:	837b      	strh	r3, [r7, #26]
	if (freq == 0) {
24052ef2:	8b7b      	ldrh	r3, [r7, #26]
24052ef4:	2b00      	cmp	r3, #0
24052ef6:	d112      	bne.n	24052f1e <play_noise+0x40>
		for (i = start; i < start + len; i++) {
24052ef8:	68bb      	ldr	r3, [r7, #8]
24052efa:	627b      	str	r3, [r7, #36]	@ 0x24
24052efc:	e008      	b.n	24052f10 <play_noise+0x32>
			noise->audiobuffer[i] = 0;
24052efe:	68fb      	ldr	r3, [r7, #12]
24052f00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
24052f02:	3228      	adds	r2, #40	@ 0x28
24052f04:	2100      	movs	r1, #0
24052f06:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (i = start; i < start + len; i++) {
24052f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
24052f0c:	3301      	adds	r3, #1
24052f0e:	627b      	str	r3, [r7, #36]	@ 0x24
24052f10:	68ba      	ldr	r2, [r7, #8]
24052f12:	687b      	ldr	r3, [r7, #4]
24052f14:	4413      	add	r3, r2
24052f16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
24052f18:	429a      	cmp	r2, r3
24052f1a:	dbf0      	blt.n	24052efe <play_noise+0x20>
		}
		return;
24052f1c:	e06b      	b.n	24052ff6 <play_noise+0x118>
	}
	uint8_t vol = (*noise).noise_vol[0];
24052f1e:	68fb      	ldr	r3, [r7, #12]
24052f20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
24052f24:	767b      	strb	r3, [r7, #25]
	uint16_t LFSR = (*noise).LFSR;
24052f26:	68fb      	ldr	r3, [r7, #12]
24052f28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
24052f2c:	f8b3 3310 	ldrh.w	r3, [r3, #784]	@ 0x310
24052f30:	847b      	strh	r3, [r7, #34]	@ 0x22
	uint16_t last = (*noise).last;
24052f32:	68fb      	ldr	r3, [r7, #12]
24052f34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
24052f38:	f8b3 3312 	ldrh.w	r3, [r3, #786]	@ 0x312
24052f3c:	843b      	strh	r3, [r7, #32]
	int out = 0;
24052f3e:	2300      	movs	r3, #0
24052f40:	61fb      	str	r3, [r7, #28]
	if (last > freq) {
24052f42:	8c3a      	ldrh	r2, [r7, #32]
24052f44:	8b7b      	ldrh	r3, [r7, #26]
24052f46:	429a      	cmp	r2, r3
24052f48:	d901      	bls.n	24052f4e <play_noise+0x70>
		last = freq;
24052f4a:	8b7b      	ldrh	r3, [r7, #26]
24052f4c:	843b      	strh	r3, [r7, #32]
	}
	for (i = start; i < start + len; i++) {
24052f4e:	68bb      	ldr	r3, [r7, #8]
24052f50:	627b      	str	r3, [r7, #36]	@ 0x24
24052f52:	e03c      	b.n	24052fce <play_noise+0xf0>
		if (last > 0) {
24052f54:	8c3b      	ldrh	r3, [r7, #32]
24052f56:	2b00      	cmp	r3, #0
24052f58:	d013      	beq.n	24052f82 <play_noise+0xa4>
			noise->audiobuffer[i] =
24052f5a:	69fb      	ldr	r3, [r7, #28]
24052f5c:	2b01      	cmp	r3, #1
24052f5e:	d105      	bne.n	24052f6c <play_noise+0x8e>
24052f60:	7e7b      	ldrb	r3, [r7, #25]
24052f62:	b29b      	uxth	r3, r3
24052f64:	425b      	negs	r3, r3
24052f66:	b29b      	uxth	r3, r3
24052f68:	b21b      	sxth	r3, r3
24052f6a:	e001      	b.n	24052f70 <play_noise+0x92>
24052f6c:	7e7b      	ldrb	r3, [r7, #25]
24052f6e:	b21b      	sxth	r3, r3
24052f70:	68fa      	ldr	r2, [r7, #12]
24052f72:	6a79      	ldr	r1, [r7, #36]	@ 0x24
24052f74:	3128      	adds	r1, #40	@ 0x28
24052f76:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
					(out == 1) ? -1 * (int16_t) vol : (int16_t) vol;
			last--;
24052f7a:	8c3b      	ldrh	r3, [r7, #32]
24052f7c:	3b01      	subs	r3, #1
24052f7e:	843b      	strh	r3, [r7, #32]
24052f80:	e022      	b.n	24052fc8 <play_noise+0xea>
		} else {
			last = freq;
24052f82:	8b7b      	ldrh	r3, [r7, #26]
24052f84:	843b      	strh	r3, [r7, #32]
			i--;
24052f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
24052f88:	3b01      	subs	r3, #1
24052f8a:	627b      	str	r3, [r7, #36]	@ 0x24
			uint16_t xor_result = (LFSR & 0b01) ^ ((LFSR & 0b10) >> 1);
24052f8c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
24052f8e:	105b      	asrs	r3, r3, #1
24052f90:	b21a      	sxth	r2, r3
24052f92:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
24052f96:	4053      	eors	r3, r2
24052f98:	b21b      	sxth	r3, r3
24052f9a:	b29b      	uxth	r3, r3
24052f9c:	f003 0301 	and.w	r3, r3, #1
24052fa0:	82fb      	strh	r3, [r7, #22]
			LFSR = (LFSR >> 1) | (xor_result << 14);
24052fa2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
24052fa4:	085b      	lsrs	r3, r3, #1
24052fa6:	b29b      	uxth	r3, r3
24052fa8:	b21a      	sxth	r2, r3
24052faa:	8afb      	ldrh	r3, [r7, #22]
24052fac:	039b      	lsls	r3, r3, #14
24052fae:	b21b      	sxth	r3, r3
24052fb0:	4313      	orrs	r3, r2
24052fb2:	b21b      	sxth	r3, r3
24052fb4:	847b      	strh	r3, [r7, #34]	@ 0x22
			out = ~LFSR & 0x01;
24052fb6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
24052fb8:	f003 0301 	and.w	r3, r3, #1
24052fbc:	2b00      	cmp	r3, #0
24052fbe:	bf0c      	ite	eq
24052fc0:	2301      	moveq	r3, #1
24052fc2:	2300      	movne	r3, #0
24052fc4:	b2db      	uxtb	r3, r3
24052fc6:	61fb      	str	r3, [r7, #28]
	for (i = start; i < start + len; i++) {
24052fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
24052fca:	3301      	adds	r3, #1
24052fcc:	627b      	str	r3, [r7, #36]	@ 0x24
24052fce:	68ba      	ldr	r2, [r7, #8]
24052fd0:	687b      	ldr	r3, [r7, #4]
24052fd2:	4413      	add	r3, r2
24052fd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
24052fd6:	429a      	cmp	r2, r3
24052fd8:	dbbc      	blt.n	24052f54 <play_noise+0x76>
		}
	}
	noise->LFSR = LFSR;
24052fda:	68fb      	ldr	r3, [r7, #12]
24052fdc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
24052fe0:	461a      	mov	r2, r3
24052fe2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
24052fe4:	f8a2 3310 	strh.w	r3, [r2, #784]	@ 0x310
	noise->last = last;
24052fe8:	68fb      	ldr	r3, [r7, #12]
24052fea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
24052fee:	461a      	mov	r2, r3
24052ff0:	8c3b      	ldrh	r3, [r7, #32]
24052ff2:	f8a2 3312 	strh.w	r3, [r2, #786]	@ 0x312
}
24052ff6:	372c      	adds	r7, #44	@ 0x2c
24052ff8:	46bd      	mov	sp, r7
24052ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
24052ffe:	4770      	bx	lr

24053000 <move_noise>:

void move_noise(Noise *noise) {
24053000:	b480      	push	{r7}
24053002:	b087      	sub	sp, #28
24053004:	af00      	add	r7, sp, #0
24053006:	6078      	str	r0, [r7, #4]
	int i, n = AUDIO_PROGRAMMABLE_LENGTH;
24053008:	2328      	movs	r3, #40	@ 0x28
2405300a:	613b      	str	r3, [r7, #16]
	uint8_t *a = noise->noise_freq;
2405300c:	687b      	ldr	r3, [r7, #4]
2405300e:	60fb      	str	r3, [r7, #12]
	uint8_t temp = a[0];
24053010:	68fb      	ldr	r3, [r7, #12]
24053012:	781b      	ldrb	r3, [r3, #0]
24053014:	72fb      	strb	r3, [r7, #11]
	for (i = 0; i < n - 1; i++) {
24053016:	2300      	movs	r3, #0
24053018:	617b      	str	r3, [r7, #20]
2405301a:	e00b      	b.n	24053034 <move_noise+0x34>
		a[i] = a[i + 1];
2405301c:	697b      	ldr	r3, [r7, #20]
2405301e:	3301      	adds	r3, #1
24053020:	68fa      	ldr	r2, [r7, #12]
24053022:	441a      	add	r2, r3
24053024:	697b      	ldr	r3, [r7, #20]
24053026:	68f9      	ldr	r1, [r7, #12]
24053028:	440b      	add	r3, r1
2405302a:	7812      	ldrb	r2, [r2, #0]
2405302c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < n - 1; i++) {
2405302e:	697b      	ldr	r3, [r7, #20]
24053030:	3301      	adds	r3, #1
24053032:	617b      	str	r3, [r7, #20]
24053034:	693b      	ldr	r3, [r7, #16]
24053036:	3b01      	subs	r3, #1
24053038:	697a      	ldr	r2, [r7, #20]
2405303a:	429a      	cmp	r2, r3
2405303c:	dbee      	blt.n	2405301c <move_noise+0x1c>
	}
	a[n - 1] = temp;
2405303e:	693b      	ldr	r3, [r7, #16]
24053040:	3b01      	subs	r3, #1
24053042:	68fa      	ldr	r2, [r7, #12]
24053044:	4413      	add	r3, r2
24053046:	7afa      	ldrb	r2, [r7, #11]
24053048:	701a      	strb	r2, [r3, #0]
	a = noise->noise_vol;
2405304a:	687b      	ldr	r3, [r7, #4]
2405304c:	3328      	adds	r3, #40	@ 0x28
2405304e:	60fb      	str	r3, [r7, #12]
	temp = a[0];
24053050:	68fb      	ldr	r3, [r7, #12]
24053052:	781b      	ldrb	r3, [r3, #0]
24053054:	72fb      	strb	r3, [r7, #11]
	for (i = 0; i < n - 1; i++) {
24053056:	2300      	movs	r3, #0
24053058:	617b      	str	r3, [r7, #20]
2405305a:	e00b      	b.n	24053074 <move_noise+0x74>
		a[i] = a[i + 1];
2405305c:	697b      	ldr	r3, [r7, #20]
2405305e:	3301      	adds	r3, #1
24053060:	68fa      	ldr	r2, [r7, #12]
24053062:	441a      	add	r2, r3
24053064:	697b      	ldr	r3, [r7, #20]
24053066:	68f9      	ldr	r1, [r7, #12]
24053068:	440b      	add	r3, r1
2405306a:	7812      	ldrb	r2, [r2, #0]
2405306c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < n - 1; i++) {
2405306e:	697b      	ldr	r3, [r7, #20]
24053070:	3301      	adds	r3, #1
24053072:	617b      	str	r3, [r7, #20]
24053074:	693b      	ldr	r3, [r7, #16]
24053076:	3b01      	subs	r3, #1
24053078:	697a      	ldr	r2, [r7, #20]
2405307a:	429a      	cmp	r2, r3
2405307c:	dbee      	blt.n	2405305c <move_noise+0x5c>
	}
	a[n - 1] = temp;
2405307e:	693b      	ldr	r3, [r7, #16]
24053080:	3b01      	subs	r3, #1
24053082:	68fa      	ldr	r2, [r7, #12]
24053084:	4413      	add	r3, r2
24053086:	7afa      	ldrb	r2, [r7, #11]
24053088:	701a      	strb	r2, [r3, #0]
}
2405308a:	bf00      	nop
2405308c:	371c      	adds	r7, #28
2405308e:	46bd      	mov	sp, r7
24053090:	f85d 7b04 	ldr.w	r7, [sp], #4
24053094:	4770      	bx	lr
	...

24053098 <HAL_ADC_ConvCpltCallback>:
		int percent;
		bq24072_state_t state;
	} last;
} bq24072_data;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
24053098:	b580      	push	{r7, lr}
2405309a:	b082      	sub	sp, #8
2405309c:	af00      	add	r7, sp, #0
2405309e:	6078      	str	r0, [r7, #4]
	bq24072_data.value = HAL_ADC_GetValue(hadc);
240530a0:	6878      	ldr	r0, [r7, #4]
240530a2:	f004 fbb9 	bl	24057818 <HAL_ADC_GetValue>
240530a6:	4603      	mov	r3, r0
240530a8:	b29a      	uxth	r2, r3
240530aa:	4b04      	ldr	r3, [pc, #16]	@ (240530bc <HAL_ADC_ConvCpltCallback+0x24>)
240530ac:	801a      	strh	r2, [r3, #0]

	HAL_ADC_Stop_IT(hadc);
240530ae:	6878      	ldr	r0, [r7, #4]
240530b0:	f004 fb76 	bl	240577a0 <HAL_ADC_Stop_IT>
}
240530b4:	bf00      	nop
240530b6:	3708      	adds	r7, #8
240530b8:	46bd      	mov	sp, r7
240530ba:	bd80      	pop	{r7, pc}
240530bc:	20000224 	.word	0x20000224

240530c0 <bq24072_init>:

int32_t bq24072_init(void) {
240530c0:	b580      	push	{r7, lr}
240530c2:	af00      	add	r7, sp, #0
	// Read initial states
	bq24072_handle_power_good();
240530c4:	f000 f80c 	bl	240530e0 <bq24072_handle_power_good>
	bq24072_handle_charging();
240530c8:	f000 f822 	bl	24053110 <bq24072_handle_charging>
	bq24072_poll();
240530cc:	f000 f838 	bl	24053140 <bq24072_poll>

	// Start timer for voltage poll
	HAL_TIM_Base_Start_IT(&htim1);
240530d0:	4802      	ldr	r0, [pc, #8]	@ (240530dc <bq24072_init+0x1c>)
240530d2:	f010 fb53 	bl	2406377c <HAL_TIM_Base_Start_IT>

	return 0;
240530d6:	2300      	movs	r3, #0
}
240530d8:	4618      	mov	r0, r3
240530da:	bd80      	pop	{r7, pc}
240530dc:	20000628 	.word	0x20000628

240530e0 <bq24072_handle_power_good>:

void bq24072_handle_power_good(void) {
240530e0:	b580      	push	{r7, lr}
240530e2:	af00      	add	r7, sp, #0
	bq24072_data.power_good = !(HAL_GPIO_ReadPin(
			bq_pins[BQ24072_PIN_PGOOD].bank, bq_pins[BQ24072_PIN_PGOOD].pin)
240530e4:	4a08      	ldr	r2, [pc, #32]	@ (24053108 <bq24072_handle_power_good+0x28>)
240530e6:	2304      	movs	r3, #4
	bq24072_data.power_good = !(HAL_GPIO_ReadPin(
240530e8:	b29b      	uxth	r3, r3
240530ea:	4619      	mov	r1, r3
240530ec:	4610      	mov	r0, r2
240530ee:	f009 f81f 	bl	2405c130 <HAL_GPIO_ReadPin>
240530f2:	4603      	mov	r3, r0
240530f4:	2b01      	cmp	r3, #1
240530f6:	bf14      	ite	ne
240530f8:	2301      	movne	r3, #1
240530fa:	2300      	moveq	r3, #0
240530fc:	b2da      	uxtb	r2, r3
240530fe:	4b03      	ldr	r3, [pc, #12]	@ (2405310c <bq24072_handle_power_good+0x2c>)
24053100:	70da      	strb	r2, [r3, #3]
			== GPIO_PIN_SET);
}
24053102:	bf00      	nop
24053104:	bd80      	pop	{r7, pc}
24053106:	bf00      	nop
24053108:	58020000 	.word	0x58020000
2405310c:	20000224 	.word	0x20000224

24053110 <bq24072_handle_charging>:

void bq24072_handle_charging(void) {
24053110:	b580      	push	{r7, lr}
24053112:	af00      	add	r7, sp, #0
	bq24072_data.charging = !(HAL_GPIO_ReadPin(bq_pins[BQ24072_PIN_CHG].bank,
24053114:	4a08      	ldr	r2, [pc, #32]	@ (24053138 <bq24072_handle_charging+0x28>)
			bq_pins[BQ24072_PIN_CHG].pin) == GPIO_PIN_SET);
24053116:	2380      	movs	r3, #128	@ 0x80
	bq24072_data.charging = !(HAL_GPIO_ReadPin(bq_pins[BQ24072_PIN_CHG].bank,
24053118:	b29b      	uxth	r3, r3
2405311a:	4619      	mov	r1, r3
2405311c:	4610      	mov	r0, r2
2405311e:	f009 f807 	bl	2405c130 <HAL_GPIO_ReadPin>
24053122:	4603      	mov	r3, r0
24053124:	2b01      	cmp	r3, #1
24053126:	bf14      	ite	ne
24053128:	2301      	movne	r3, #1
2405312a:	2300      	moveq	r3, #0
2405312c:	b2da      	uxtb	r2, r3
2405312e:	4b03      	ldr	r3, [pc, #12]	@ (2405313c <bq24072_handle_charging+0x2c>)
24053130:	709a      	strb	r2, [r3, #2]
}
24053132:	bf00      	nop
24053134:	bd80      	pop	{r7, pc}
24053136:	bf00      	nop
24053138:	58021000 	.word	0x58021000
2405313c:	20000224 	.word	0x20000224

24053140 <bq24072_poll>:
	}

	return percent;
}

void bq24072_poll(void) {
24053140:	b580      	push	{r7, lr}
24053142:	af00      	add	r7, sp, #0
	HAL_ADC_Start_IT(&hadc1);
24053144:	4802      	ldr	r0, [pc, #8]	@ (24053150 <bq24072_poll+0x10>)
24053146:	f004 f9fd 	bl	24057544 <HAL_ADC_Start_IT>
}
2405314a:	bf00      	nop
2405314c:	bd80      	pop	{r7, pc}
2405314e:	bf00      	nop
24053150:	20000270 	.word	0x20000270

24053154 <buttons_get>:
#include "stm32h7xx_hal.h"
#include "main.h"

#include <stdbool.h>

uint32_t buttons_get() {
24053154:	b580      	push	{r7, lr}
24053156:	b084      	sub	sp, #16
24053158:	af00      	add	r7, sp, #0
    bool left = HAL_GPIO_ReadPin(BTN_Left_GPIO_Port, BTN_Left_Pin) == GPIO_PIN_RESET;
2405315a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
2405315e:	4843      	ldr	r0, [pc, #268]	@ (2405326c <buttons_get+0x118>)
24053160:	f008 ffe6 	bl	2405c130 <HAL_GPIO_ReadPin>
24053164:	4603      	mov	r3, r0
24053166:	2b00      	cmp	r3, #0
24053168:	bf0c      	ite	eq
2405316a:	2301      	moveq	r3, #1
2405316c:	2300      	movne	r3, #0
2405316e:	73fb      	strb	r3, [r7, #15]
    bool right = HAL_GPIO_ReadPin(BTN_Right_GPIO_Port, BTN_Right_Pin) == GPIO_PIN_RESET;
24053170:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
24053174:	483d      	ldr	r0, [pc, #244]	@ (2405326c <buttons_get+0x118>)
24053176:	f008 ffdb 	bl	2405c130 <HAL_GPIO_ReadPin>
2405317a:	4603      	mov	r3, r0
2405317c:	2b00      	cmp	r3, #0
2405317e:	bf0c      	ite	eq
24053180:	2301      	moveq	r3, #1
24053182:	2300      	movne	r3, #0
24053184:	73bb      	strb	r3, [r7, #14]
    bool up = HAL_GPIO_ReadPin(BTN_Up_GPIO_Port, BTN_Up_Pin) == GPIO_PIN_RESET ;
24053186:	2101      	movs	r1, #1
24053188:	4838      	ldr	r0, [pc, #224]	@ (2405326c <buttons_get+0x118>)
2405318a:	f008 ffd1 	bl	2405c130 <HAL_GPIO_ReadPin>
2405318e:	4603      	mov	r3, r0
24053190:	2b00      	cmp	r3, #0
24053192:	bf0c      	ite	eq
24053194:	2301      	moveq	r3, #1
24053196:	2300      	movne	r3, #0
24053198:	737b      	strb	r3, [r7, #13]
    bool down = HAL_GPIO_ReadPin(BTN_Down_GPIO_Port, BTN_Down_Pin) == GPIO_PIN_RESET;
2405319a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
2405319e:	4833      	ldr	r0, [pc, #204]	@ (2405326c <buttons_get+0x118>)
240531a0:	f008 ffc6 	bl	2405c130 <HAL_GPIO_ReadPin>
240531a4:	4603      	mov	r3, r0
240531a6:	2b00      	cmp	r3, #0
240531a8:	bf0c      	ite	eq
240531aa:	2301      	moveq	r3, #1
240531ac:	2300      	movne	r3, #0
240531ae:	733b      	strb	r3, [r7, #12]
    bool a = HAL_GPIO_ReadPin(BTN_A_GPIO_Port, BTN_A_Pin) == GPIO_PIN_RESET;
240531b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
240531b4:	482d      	ldr	r0, [pc, #180]	@ (2405326c <buttons_get+0x118>)
240531b6:	f008 ffbb 	bl	2405c130 <HAL_GPIO_ReadPin>
240531ba:	4603      	mov	r3, r0
240531bc:	2b00      	cmp	r3, #0
240531be:	bf0c      	ite	eq
240531c0:	2301      	moveq	r3, #1
240531c2:	2300      	movne	r3, #0
240531c4:	72fb      	strb	r3, [r7, #11]
    bool b = HAL_GPIO_ReadPin(BTN_B_GPIO_Port, BTN_B_Pin) == GPIO_PIN_RESET;
240531c6:	2120      	movs	r1, #32
240531c8:	4828      	ldr	r0, [pc, #160]	@ (2405326c <buttons_get+0x118>)
240531ca:	f008 ffb1 	bl	2405c130 <HAL_GPIO_ReadPin>
240531ce:	4603      	mov	r3, r0
240531d0:	2b00      	cmp	r3, #0
240531d2:	bf0c      	ite	eq
240531d4:	2301      	moveq	r3, #1
240531d6:	2300      	movne	r3, #0
240531d8:	72bb      	strb	r3, [r7, #10]
    bool time = HAL_GPIO_ReadPin(BTN_TIME_GPIO_Port, BTN_TIME_Pin) == GPIO_PIN_RESET;
240531da:	2120      	movs	r1, #32
240531dc:	4824      	ldr	r0, [pc, #144]	@ (24053270 <buttons_get+0x11c>)
240531de:	f008 ffa7 	bl	2405c130 <HAL_GPIO_ReadPin>
240531e2:	4603      	mov	r3, r0
240531e4:	2b00      	cmp	r3, #0
240531e6:	bf0c      	ite	eq
240531e8:	2301      	moveq	r3, #1
240531ea:	2300      	movne	r3, #0
240531ec:	727b      	strb	r3, [r7, #9]
    bool game = HAL_GPIO_ReadPin(BTN_GAME_GPIO_Port, BTN_GAME_Pin) == GPIO_PIN_RESET;
240531ee:	2102      	movs	r1, #2
240531f0:	481f      	ldr	r0, [pc, #124]	@ (24053270 <buttons_get+0x11c>)
240531f2:	f008 ff9d 	bl	2405c130 <HAL_GPIO_ReadPin>
240531f6:	4603      	mov	r3, r0
240531f8:	2b00      	cmp	r3, #0
240531fa:	bf0c      	ite	eq
240531fc:	2301      	moveq	r3, #1
240531fe:	2300      	movne	r3, #0
24053200:	723b      	strb	r3, [r7, #8]
    bool pause = HAL_GPIO_ReadPin(BTN_PAUSE_GPIO_Port, BTN_PAUSE_Pin) == GPIO_PIN_RESET;
24053202:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
24053206:	481a      	ldr	r0, [pc, #104]	@ (24053270 <buttons_get+0x11c>)
24053208:	f008 ff92 	bl	2405c130 <HAL_GPIO_ReadPin>
2405320c:	4603      	mov	r3, r0
2405320e:	2b00      	cmp	r3, #0
24053210:	bf0c      	ite	eq
24053212:	2301      	moveq	r3, #1
24053214:	2300      	movne	r3, #0
24053216:	71fb      	strb	r3, [r7, #7]
    bool power = HAL_GPIO_ReadPin(BTN_PWR_GPIO_Port, BTN_PWR_Pin) == GPIO_PIN_RESET;
24053218:	2101      	movs	r1, #1
2405321a:	4816      	ldr	r0, [pc, #88]	@ (24053274 <buttons_get+0x120>)
2405321c:	f008 ff88 	bl	2405c130 <HAL_GPIO_ReadPin>
24053220:	4603      	mov	r3, r0
24053222:	2b00      	cmp	r3, #0
24053224:	bf0c      	ite	eq
24053226:	2301      	moveq	r3, #1
24053228:	2300      	movne	r3, #0
2405322a:	71bb      	strb	r3, [r7, #6]

    //bool start = HAL_GPIO_ReadPin(BTN_START_GPIO_Port, BTN_START_Pin) == GPIO_PIN_RESET;
    //bool select = HAL_GPIO_ReadPin(BTN_SELECT_GPIO_Port, BTN_SELECT_Pin) == GPIO_PIN_RESET;

    return (
        left | (up << 1) | (right << 2) | (down << 3) | (a << 4) | (b << 5) |
2405322c:	7bfa      	ldrb	r2, [r7, #15]
2405322e:	7b7b      	ldrb	r3, [r7, #13]
24053230:	005b      	lsls	r3, r3, #1
24053232:	431a      	orrs	r2, r3
24053234:	7bbb      	ldrb	r3, [r7, #14]
24053236:	009b      	lsls	r3, r3, #2
24053238:	431a      	orrs	r2, r3
2405323a:	7b3b      	ldrb	r3, [r7, #12]
2405323c:	00db      	lsls	r3, r3, #3
2405323e:	431a      	orrs	r2, r3
24053240:	7afb      	ldrb	r3, [r7, #11]
24053242:	011b      	lsls	r3, r3, #4
24053244:	431a      	orrs	r2, r3
24053246:	7abb      	ldrb	r3, [r7, #10]
24053248:	015b      	lsls	r3, r3, #5
2405324a:	431a      	orrs	r2, r3
        (time << 6) | (game << 7) | (pause << 8) | (power << 9)// | (start << 10) | (select << 11)
2405324c:	7a7b      	ldrb	r3, [r7, #9]
2405324e:	019b      	lsls	r3, r3, #6
        left | (up << 1) | (right << 2) | (down << 3) | (a << 4) | (b << 5) |
24053250:	431a      	orrs	r2, r3
        (time << 6) | (game << 7) | (pause << 8) | (power << 9)// | (start << 10) | (select << 11)
24053252:	7a3b      	ldrb	r3, [r7, #8]
24053254:	01db      	lsls	r3, r3, #7
24053256:	431a      	orrs	r2, r3
24053258:	79fb      	ldrb	r3, [r7, #7]
2405325a:	021b      	lsls	r3, r3, #8
2405325c:	431a      	orrs	r2, r3
2405325e:	79bb      	ldrb	r3, [r7, #6]
24053260:	025b      	lsls	r3, r3, #9
24053262:	4313      	orrs	r3, r2
    );


}
24053264:	4618      	mov	r0, r3
24053266:	3710      	adds	r7, #16
24053268:	46bd      	mov	sp, r7
2405326a:	bd80      	pop	{r7, pc}
2405326c:	58020c00 	.word	0x58020c00
24053270:	58020800 	.word	0x58020800
24053274:	58020000 	.word	0x58020000

24053278 <set_ospi_cmd>:
static void set_ospi_cmd(OSPI_RegularCmdTypeDef *ospi_cmd,
                         const flash_cmd_t *cmd,
                         uint32_t address,
                         uint8_t *data,
                         size_t len)
{
24053278:	b580      	push	{r7, lr}
2405327a:	b084      	sub	sp, #16
2405327c:	af00      	add	r7, sp, #0
2405327e:	60f8      	str	r0, [r7, #12]
24053280:	60b9      	str	r1, [r7, #8]
24053282:	607a      	str	r2, [r7, #4]
24053284:	603b      	str	r3, [r7, #0]
    memset(ospi_cmd, 0x0, sizeof(*ospi_cmd));
24053286:	2250      	movs	r2, #80	@ 0x50
24053288:	2100      	movs	r1, #0
2405328a:	68f8      	ldr	r0, [r7, #12]
2405328c:	f011 fac2 	bl	24064814 <memset>

    ospi_cmd->OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
24053290:	68fb      	ldr	r3, [r7, #12]
24053292:	2200      	movs	r2, #0
24053294:	601a      	str	r2, [r3, #0]
    ospi_cmd->FlashId = 0;
24053296:	68fb      	ldr	r3, [r7, #12]
24053298:	2200      	movs	r2, #0
2405329a:	605a      	str	r2, [r3, #4]
    ospi_cmd->Instruction = cmd->cmd;
2405329c:	68bb      	ldr	r3, [r7, #8]
2405329e:	781b      	ldrb	r3, [r3, #0]
240532a0:	461a      	mov	r2, r3
240532a2:	68fb      	ldr	r3, [r7, #12]
240532a4:	609a      	str	r2, [r3, #8]
    ospi_cmd->InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
240532a6:	68fb      	ldr	r3, [r7, #12]
240532a8:	2200      	movs	r2, #0
240532aa:	611a      	str	r2, [r3, #16]
    ospi_cmd->InstructionMode = instruction_line_map[cmd->instr_lines];
240532ac:	68bb      	ldr	r3, [r7, #8]
240532ae:	785b      	ldrb	r3, [r3, #1]
240532b0:	f3c3 0301 	ubfx	r3, r3, #0, #2
240532b4:	b2db      	uxtb	r3, r3
240532b6:	461a      	mov	r2, r3
240532b8:	4b20      	ldr	r3, [pc, #128]	@ (2405333c <set_ospi_cmd+0xc4>)
240532ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
240532be:	68fb      	ldr	r3, [r7, #12]
240532c0:	60da      	str	r2, [r3, #12]

    ospi_cmd->AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
240532c2:	68fb      	ldr	r3, [r7, #12]
240532c4:	2200      	movs	r2, #0
240532c6:	62da      	str	r2, [r3, #44]	@ 0x2c
    ospi_cmd->DummyCycles = cmd->dummy;
240532c8:	68bb      	ldr	r3, [r7, #8]
240532ca:	789b      	ldrb	r3, [r3, #2]
240532cc:	461a      	mov	r2, r3
240532ce:	68fb      	ldr	r3, [r7, #12]
240532d0:	645a      	str	r2, [r3, #68]	@ 0x44
    ospi_cmd->DQSMode = HAL_OSPI_DQS_DISABLE;
240532d2:	68fb      	ldr	r3, [r7, #12]
240532d4:	2200      	movs	r2, #0
240532d6:	649a      	str	r2, [r3, #72]	@ 0x48
    ospi_cmd->SIOOMode = HAL_OSPI_SIOO_INST_EVERY_CMD;
240532d8:	68fb      	ldr	r3, [r7, #12]
240532da:	2200      	movs	r2, #0
240532dc:	64da      	str	r2, [r3, #76]	@ 0x4c
    ospi_cmd->InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
240532de:	68fb      	ldr	r3, [r7, #12]
240532e0:	2200      	movs	r2, #0
240532e2:	615a      	str	r2, [r3, #20]

    ospi_cmd->Address = address;
240532e4:	68fb      	ldr	r3, [r7, #12]
240532e6:	687a      	ldr	r2, [r7, #4]
240532e8:	619a      	str	r2, [r3, #24]
    ospi_cmd->AddressSize = address_size_map[cmd->addr_size];
240532ea:	68bb      	ldr	r3, [r7, #8]
240532ec:	785b      	ldrb	r3, [r3, #1]
240532ee:	f3c3 1301 	ubfx	r3, r3, #4, #2
240532f2:	b2db      	uxtb	r3, r3
240532f4:	461a      	mov	r2, r3
240532f6:	4b12      	ldr	r3, [pc, #72]	@ (24053340 <set_ospi_cmd+0xc8>)
240532f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
240532fc:	68fb      	ldr	r3, [r7, #12]
240532fe:	621a      	str	r2, [r3, #32]
    ospi_cmd->AddressMode = address_line_map[cmd->addr_lines];
24053300:	68bb      	ldr	r3, [r7, #8]
24053302:	785b      	ldrb	r3, [r3, #1]
24053304:	f3c3 0381 	ubfx	r3, r3, #2, #2
24053308:	b2db      	uxtb	r3, r3
2405330a:	461a      	mov	r2, r3
2405330c:	4b0d      	ldr	r3, [pc, #52]	@ (24053344 <set_ospi_cmd+0xcc>)
2405330e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
24053312:	68fb      	ldr	r3, [r7, #12]
24053314:	61da      	str	r2, [r3, #28]

    ospi_cmd->NbData = len;
24053316:	68fb      	ldr	r3, [r7, #12]
24053318:	69ba      	ldr	r2, [r7, #24]
2405331a:	63da      	str	r2, [r3, #60]	@ 0x3c
    ospi_cmd->DataMode = data_line_map[cmd->data_lines];
2405331c:	68bb      	ldr	r3, [r7, #8]
2405331e:	785b      	ldrb	r3, [r3, #1]
24053320:	f3c3 1381 	ubfx	r3, r3, #6, #2
24053324:	b2db      	uxtb	r3, r3
24053326:	461a      	mov	r2, r3
24053328:	4b07      	ldr	r3, [pc, #28]	@ (24053348 <set_ospi_cmd+0xd0>)
2405332a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
2405332e:	68fb      	ldr	r3, [r7, #12]
24053330:	639a      	str	r2, [r3, #56]	@ 0x38
}
24053332:	bf00      	nop
24053334:	3710      	adds	r7, #16
24053336:	46bd      	mov	sp, r7
24053338:	bd80      	pop	{r7, pc}
2405333a:	bf00      	nop
2405333c:	24069690 	.word	0x24069690
24053340:	240696a8 	.word	0x240696a8
24053344:	2406969c 	.word	0x2406969c
24053348:	240696b8 	.word	0x240696b8

2405334c <OSPI_ReadBytes>:

static void OSPI_ReadBytes(const flash_cmd_t *cmd,
                           uint32_t address,
                           uint8_t *data,
                           size_t len)
{
2405334c:	b580      	push	{r7, lr}
2405334e:	b09c      	sub	sp, #112	@ 0x70
24053350:	af02      	add	r7, sp, #8
24053352:	60f8      	str	r0, [r7, #12]
24053354:	60b9      	str	r1, [r7, #8]
24053356:	607a      	str	r2, [r7, #4]
24053358:	603b      	str	r3, [r7, #0]
    OSPI_RegularCmdTypeDef ospi_cmd;

    // DBG("RB %d 0x%08x 0x%08X %d\n", cmd->cmd, address, data, len);

    assert(flash.mem_mapped_enabled == false);
2405335a:	4b1d      	ldr	r3, [pc, #116]	@ (240533d0 <OSPI_ReadBytes+0x84>)
2405335c:	7c1b      	ldrb	r3, [r3, #16]
2405335e:	f083 0301 	eor.w	r3, r3, #1
24053362:	b2db      	uxtb	r3, r3
24053364:	2b00      	cmp	r3, #0
24053366:	d106      	bne.n	24053376 <OSPI_ReadBytes+0x2a>
24053368:	4b1a      	ldr	r3, [pc, #104]	@ (240533d4 <OSPI_ReadBytes+0x88>)
2405336a:	4a1b      	ldr	r2, [pc, #108]	@ (240533d8 <OSPI_ReadBytes+0x8c>)
2405336c:	f240 11a3 	movw	r1, #419	@ 0x1a3
24053370:	481a      	ldr	r0, [pc, #104]	@ (240533dc <OSPI_ReadBytes+0x90>)
24053372:	f010 fe9d 	bl	240640b0 <__assert_func>

    set_ospi_cmd(&ospi_cmd,
24053376:	f107 0014 	add.w	r0, r7, #20
2405337a:	683b      	ldr	r3, [r7, #0]
2405337c:	9300      	str	r3, [sp, #0]
2405337e:	687b      	ldr	r3, [r7, #4]
24053380:	68ba      	ldr	r2, [r7, #8]
24053382:	68f9      	ldr	r1, [r7, #12]
24053384:	f7ff ff78 	bl	24053278 <set_ospi_cmd>
                 len);

    //wdog_refresh();

    HAL_StatusTypeDef res;
    res = HAL_OSPI_Command(flash.hospi, &ospi_cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
24053388:	4b11      	ldr	r3, [pc, #68]	@ (240533d0 <OSPI_ReadBytes+0x84>)
2405338a:	681b      	ldr	r3, [r3, #0]
2405338c:	f107 0114 	add.w	r1, r7, #20
24053390:	f241 3288 	movw	r2, #5000	@ 0x1388
24053394:	4618      	mov	r0, r3
24053396:	f009 fd0d 	bl	2405cdb4 <HAL_OSPI_Command>
2405339a:	4603      	mov	r3, r0
2405339c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    if (res != HAL_OK) {
240533a0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
240533a4:	2b00      	cmp	r3, #0
240533a6:	d001      	beq.n	240533ac <OSPI_ReadBytes+0x60>
        Error_Handler();
240533a8:	f002 fc06 	bl	24055bb8 <Error_Handler>
    }

    if (HAL_OSPI_Receive(flash.hospi, data, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
240533ac:	4b08      	ldr	r3, [pc, #32]	@ (240533d0 <OSPI_ReadBytes+0x84>)
240533ae:	681b      	ldr	r3, [r3, #0]
240533b0:	f241 3288 	movw	r2, #5000	@ 0x1388
240533b4:	6879      	ldr	r1, [r7, #4]
240533b6:	4618      	mov	r0, r3
240533b8:	f009 fdfc 	bl	2405cfb4 <HAL_OSPI_Receive>
240533bc:	4603      	mov	r3, r0
240533be:	2b00      	cmp	r3, #0
240533c0:	d001      	beq.n	240533c6 <OSPI_ReadBytes+0x7a>
        Error_Handler();
240533c2:	f002 fbf9 	bl	24055bb8 <Error_Handler>
    }
}
240533c6:	bf00      	nop
240533c8:	3768      	adds	r7, #104	@ 0x68
240533ca:	46bd      	mov	sp, r7
240533cc:	bd80      	pop	{r7, pc}
240533ce:	bf00      	nop
240533d0:	20000088 	.word	0x20000088
240533d4:	240656a0 	.word	0x240656a0
240533d8:	240699f0 	.word	0x240699f0
240533dc:	240656c4 	.word	0x240656c4

240533e0 <OSPI_WriteBytes>:

static void OSPI_WriteBytes(const flash_cmd_t *cmd,
                            uint32_t address,
                            const uint8_t *data,
                            size_t len)
{
240533e0:	b580      	push	{r7, lr}
240533e2:	b09a      	sub	sp, #104	@ 0x68
240533e4:	af02      	add	r7, sp, #8
240533e6:	60f8      	str	r0, [r7, #12]
240533e8:	60b9      	str	r1, [r7, #8]
240533ea:	607a      	str	r2, [r7, #4]
240533ec:	603b      	str	r3, [r7, #0]
    OSPI_RegularCmdTypeDef ospi_cmd;

    // DBG("WB %d 0x%08x 0x%08X %d\n", cmd->cmd, address, data, len);

    assert(flash.mem_mapped_enabled == false);
240533ee:	4b1c      	ldr	r3, [pc, #112]	@ (24053460 <OSPI_WriteBytes+0x80>)
240533f0:	7c1b      	ldrb	r3, [r3, #16]
240533f2:	f083 0301 	eor.w	r3, r3, #1
240533f6:	b2db      	uxtb	r3, r3
240533f8:	2b00      	cmp	r3, #0
240533fa:	d106      	bne.n	2405340a <OSPI_WriteBytes+0x2a>
240533fc:	4b19      	ldr	r3, [pc, #100]	@ (24053464 <OSPI_WriteBytes+0x84>)
240533fe:	4a1a      	ldr	r2, [pc, #104]	@ (24053468 <OSPI_WriteBytes+0x88>)
24053400:	f240 11c1 	movw	r1, #449	@ 0x1c1
24053404:	4819      	ldr	r0, [pc, #100]	@ (2405346c <OSPI_WriteBytes+0x8c>)
24053406:	f010 fe53 	bl	240640b0 <__assert_func>

    set_ospi_cmd(&ospi_cmd,
2405340a:	f107 0010 	add.w	r0, r7, #16
2405340e:	683b      	ldr	r3, [r7, #0]
24053410:	9300      	str	r3, [sp, #0]
24053412:	687b      	ldr	r3, [r7, #4]
24053414:	68ba      	ldr	r2, [r7, #8]
24053416:	68f9      	ldr	r1, [r7, #12]
24053418:	f7ff ff2e 	bl	24053278 <set_ospi_cmd>
                 (uint8_t *) data,
                 len);

    //wdog_refresh();

    if (HAL_OSPI_Command(flash.hospi, &ospi_cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
2405341c:	4b10      	ldr	r3, [pc, #64]	@ (24053460 <OSPI_WriteBytes+0x80>)
2405341e:	681b      	ldr	r3, [r3, #0]
24053420:	f107 0110 	add.w	r1, r7, #16
24053424:	f241 3288 	movw	r2, #5000	@ 0x1388
24053428:	4618      	mov	r0, r3
2405342a:	f009 fcc3 	bl	2405cdb4 <HAL_OSPI_Command>
2405342e:	4603      	mov	r3, r0
24053430:	2b00      	cmp	r3, #0
24053432:	d001      	beq.n	24053438 <OSPI_WriteBytes+0x58>
        Error_Handler();
24053434:	f002 fbc0 	bl	24055bb8 <Error_Handler>
    }

    if (len > 0) {
24053438:	683b      	ldr	r3, [r7, #0]
2405343a:	2b00      	cmp	r3, #0
2405343c:	d00c      	beq.n	24053458 <OSPI_WriteBytes+0x78>
        if (HAL_OSPI_Transmit(flash.hospi, (uint8_t *) data, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
2405343e:	4b08      	ldr	r3, [pc, #32]	@ (24053460 <OSPI_WriteBytes+0x80>)
24053440:	681b      	ldr	r3, [r3, #0]
24053442:	f241 3288 	movw	r2, #5000	@ 0x1388
24053446:	6879      	ldr	r1, [r7, #4]
24053448:	4618      	mov	r0, r3
2405344a:	f009 fd40 	bl	2405cece <HAL_OSPI_Transmit>
2405344e:	4603      	mov	r3, r0
24053450:	2b00      	cmp	r3, #0
24053452:	d001      	beq.n	24053458 <OSPI_WriteBytes+0x78>
            Error_Handler();
24053454:	f002 fbb0 	bl	24055bb8 <Error_Handler>
        }
    }
}
24053458:	bf00      	nop
2405345a:	3760      	adds	r7, #96	@ 0x60
2405345c:	46bd      	mov	sp, r7
2405345e:	bd80      	pop	{r7, pc}
24053460:	20000088 	.word	0x20000088
24053464:	240656a0 	.word	0x240656a0
24053468:	24069a00 	.word	0x24069a00
2405346c:	240656c4 	.word	0x240656c4

24053470 <wait_for_status>:

static void wait_for_status(uint8_t mask, uint8_t value, uint32_t timeout)
{
24053470:	b580      	push	{r7, lr}
24053472:	b084      	sub	sp, #16
24053474:	af00      	add	r7, sp, #0
24053476:	4603      	mov	r3, r0
24053478:	603a      	str	r2, [r7, #0]
2405347a:	71fb      	strb	r3, [r7, #7]
2405347c:	460b      	mov	r3, r1
2405347e:	71bb      	strb	r3, [r7, #6]
    uint8_t status;

    uint32_t t0 = HAL_GetTick();
24053480:	f003 fafe 	bl	24056a80 <HAL_GetTick>
24053484:	60f8      	str	r0, [r7, #12]

    do {
        OSPI_ReadBytes(CMD(RDSR), 0, &status, 1);
24053486:	4b14      	ldr	r3, [pc, #80]	@ (240534d8 <wait_for_status+0x68>)
24053488:	689b      	ldr	r3, [r3, #8]
2405348a:	681b      	ldr	r3, [r3, #0]
2405348c:	1cd8      	adds	r0, r3, #3
2405348e:	f107 020b 	add.w	r2, r7, #11
24053492:	2301      	movs	r3, #1
24053494:	2100      	movs	r1, #0
24053496:	f7ff ff59 	bl	2405334c <OSPI_ReadBytes>

#if 0
        printf("Status: %02X\n", status);
        HAL_Delay(500);
#endif
        if ((timeout > 0) && (HAL_GetTick() > t0 + timeout)) {
2405349a:	683b      	ldr	r3, [r7, #0]
2405349c:	2b00      	cmp	r3, #0
2405349e:	d00e      	beq.n	240534be <wait_for_status+0x4e>
240534a0:	f003 faee 	bl	24056a80 <HAL_GetTick>
240534a4:	4601      	mov	r1, r0
240534a6:	68fa      	ldr	r2, [r7, #12]
240534a8:	683b      	ldr	r3, [r7, #0]
240534aa:	4413      	add	r3, r2
240534ac:	4299      	cmp	r1, r3
240534ae:	d906      	bls.n	240534be <wait_for_status+0x4e>
            assert(!"Status poll timeout!");
240534b0:	4b0a      	ldr	r3, [pc, #40]	@ (240534dc <wait_for_status+0x6c>)
240534b2:	4a0b      	ldr	r2, [pc, #44]	@ (240534e0 <wait_for_status+0x70>)
240534b4:	f240 11e5 	movw	r1, #485	@ 0x1e5
240534b8:	480a      	ldr	r0, [pc, #40]	@ (240534e4 <wait_for_status+0x74>)
240534ba:	f010 fdf9 	bl	240640b0 <__assert_func>
            break;
        }
    } while ((status & mask) != value);
240534be:	7afa      	ldrb	r2, [r7, #11]
240534c0:	79fb      	ldrb	r3, [r7, #7]
240534c2:	4013      	ands	r3, r2
240534c4:	b2db      	uxtb	r3, r3
240534c6:	79ba      	ldrb	r2, [r7, #6]
240534c8:	429a      	cmp	r2, r3
240534ca:	d1dc      	bne.n	24053486 <wait_for_status+0x16>
}
240534cc:	bf00      	nop
240534ce:	bf00      	nop
240534d0:	3710      	adds	r7, #16
240534d2:	46bd      	mov	sp, r7
240534d4:	bd80      	pop	{r7, pc}
240534d6:	bf00      	nop
240534d8:	20000088 	.word	0x20000088
240534dc:	240656e8 	.word	0x240656e8
240534e0:	24069a10 	.word	0x24069a10
240534e4:	240656c4 	.word	0x240656c4

240534e8 <OSPI_EnableMemoryMappedMode>:

void OSPI_EnableMemoryMappedMode(void)
{
240534e8:	b580      	push	{r7, lr}
240534ea:	b09a      	sub	sp, #104	@ 0x68
240534ec:	af02      	add	r7, sp, #8
    OSPI_MemoryMappedTypeDef sMemMappedCfg;
    OSPI_RegularCmdTypeDef ospi_cmd;
    const flash_cmd_t *cmd = CMD(READ);
240534ee:	4b28      	ldr	r3, [pc, #160]	@ (24053590 <OSPI_EnableMemoryMappedMode+0xa8>)
240534f0:	689b      	ldr	r3, [r3, #8]
240534f2:	681b      	ldr	r3, [r3, #0]
240534f4:	332a      	adds	r3, #42	@ 0x2a
240534f6:	65fb      	str	r3, [r7, #92]	@ 0x5c

    assert(flash.mem_mapped_enabled == false);
240534f8:	4b25      	ldr	r3, [pc, #148]	@ (24053590 <OSPI_EnableMemoryMappedMode+0xa8>)
240534fa:	7c1b      	ldrb	r3, [r3, #16]
240534fc:	f083 0301 	eor.w	r3, r3, #1
24053500:	b2db      	uxtb	r3, r3
24053502:	2b00      	cmp	r3, #0
24053504:	d106      	bne.n	24053514 <OSPI_EnableMemoryMappedMode+0x2c>
24053506:	4b23      	ldr	r3, [pc, #140]	@ (24053594 <OSPI_EnableMemoryMappedMode+0xac>)
24053508:	4a23      	ldr	r2, [pc, #140]	@ (24053598 <OSPI_EnableMemoryMappedMode+0xb0>)
2405350a:	f240 11f1 	movw	r1, #497	@ 0x1f1
2405350e:	4823      	ldr	r0, [pc, #140]	@ (2405359c <OSPI_EnableMemoryMappedMode+0xb4>)
24053510:	f010 fdce 	bl	240640b0 <__assert_func>

    set_ospi_cmd(&ospi_cmd, cmd, 0, NULL, 0);
24053514:	1d38      	adds	r0, r7, #4
24053516:	2300      	movs	r3, #0
24053518:	9300      	str	r3, [sp, #0]
2405351a:	2300      	movs	r3, #0
2405351c:	2200      	movs	r2, #0
2405351e:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
24053520:	f7ff feaa 	bl	24053278 <set_ospi_cmd>

    // Memory-mapped mode configuration for linear burst read operations
    ospi_cmd.OperationType = HAL_OSPI_OPTYPE_READ_CFG;
24053524:	2301      	movs	r3, #1
24053526:	607b      	str	r3, [r7, #4]
    if (HAL_OSPI_Command(flash.hospi, &ospi_cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
24053528:	4b19      	ldr	r3, [pc, #100]	@ (24053590 <OSPI_EnableMemoryMappedMode+0xa8>)
2405352a:	681b      	ldr	r3, [r3, #0]
2405352c:	1d39      	adds	r1, r7, #4
2405352e:	f241 3288 	movw	r2, #5000	@ 0x1388
24053532:	4618      	mov	r0, r3
24053534:	f009 fc3e 	bl	2405cdb4 <HAL_OSPI_Command>
24053538:	4603      	mov	r3, r0
2405353a:	2b00      	cmp	r3, #0
2405353c:	d001      	beq.n	24053542 <OSPI_EnableMemoryMappedMode+0x5a>
        Error_Handler();
2405353e:	f002 fb3b 	bl	24055bb8 <Error_Handler>
    }

    // Use read instruction for write (in order to not alter the flash by accident)
    ospi_cmd.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
24053542:	2302      	movs	r3, #2
24053544:	607b      	str	r3, [r7, #4]
    if (HAL_OSPI_Command(flash.hospi, &ospi_cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
24053546:	4b12      	ldr	r3, [pc, #72]	@ (24053590 <OSPI_EnableMemoryMappedMode+0xa8>)
24053548:	681b      	ldr	r3, [r3, #0]
2405354a:	1d39      	adds	r1, r7, #4
2405354c:	f241 3288 	movw	r2, #5000	@ 0x1388
24053550:	4618      	mov	r0, r3
24053552:	f009 fc2f 	bl	2405cdb4 <HAL_OSPI_Command>
24053556:	4603      	mov	r3, r0
24053558:	2b00      	cmp	r3, #0
2405355a:	d001      	beq.n	24053560 <OSPI_EnableMemoryMappedMode+0x78>
        Error_Handler();
2405355c:	f002 fb2c 	bl	24055bb8 <Error_Handler>
    }

    // Disable timeout counter for memory mapped mode
    sMemMappedCfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
24053560:	2300      	movs	r3, #0
24053562:	657b      	str	r3, [r7, #84]	@ 0x54
    sMemMappedCfg.TimeOutPeriod = 0;
24053564:	2300      	movs	r3, #0
24053566:	65bb      	str	r3, [r7, #88]	@ 0x58

    // Enable memory mapped mode
    if (HAL_OSPI_MemoryMapped(flash.hospi, &sMemMappedCfg) != HAL_OK) {
24053568:	4b09      	ldr	r3, [pc, #36]	@ (24053590 <OSPI_EnableMemoryMappedMode+0xa8>)
2405356a:	681b      	ldr	r3, [r3, #0]
2405356c:	f107 0254 	add.w	r2, r7, #84	@ 0x54
24053570:	4611      	mov	r1, r2
24053572:	4618      	mov	r0, r3
24053574:	f009 fdc2 	bl	2405d0fc <HAL_OSPI_MemoryMapped>
24053578:	4603      	mov	r3, r0
2405357a:	2b00      	cmp	r3, #0
2405357c:	d001      	beq.n	24053582 <OSPI_EnableMemoryMappedMode+0x9a>
        Error_Handler();
2405357e:	f002 fb1b 	bl	24055bb8 <Error_Handler>
    }

    flash.mem_mapped_enabled = true;
24053582:	4b03      	ldr	r3, [pc, #12]	@ (24053590 <OSPI_EnableMemoryMappedMode+0xa8>)
24053584:	2201      	movs	r2, #1
24053586:	741a      	strb	r2, [r3, #16]
}
24053588:	bf00      	nop
2405358a:	3760      	adds	r7, #96	@ 0x60
2405358c:	46bd      	mov	sp, r7
2405358e:	bd80      	pop	{r7, pc}
24053590:	20000088 	.word	0x20000088
24053594:	240656a0 	.word	0x240656a0
24053598:	24069a20 	.word	0x24069a20
2405359c:	240656c4 	.word	0x240656c4

240535a0 <OSPI_NOR_WriteEnable>:
    // Wait for Write In Progress Bit to become zero
    wait_for_status(STATUS_WIP_Msk, 0, TMO_DEFAULT);
}

void OSPI_NOR_WriteEnable(void)
{
240535a0:	b580      	push	{r7, lr}
240535a2:	af00      	add	r7, sp, #0
    OSPI_WriteBytes(CMD(WREN), 0, NULL, 0);
240535a4:	4b08      	ldr	r3, [pc, #32]	@ (240535c8 <OSPI_NOR_WriteEnable+0x28>)
240535a6:	689b      	ldr	r3, [r3, #8]
240535a8:	681b      	ldr	r3, [r3, #0]
240535aa:	f103 000c 	add.w	r0, r3, #12
240535ae:	2300      	movs	r3, #0
240535b0:	2200      	movs	r2, #0
240535b2:	2100      	movs	r1, #0
240535b4:	f7ff ff14 	bl	240533e0 <OSPI_WriteBytes>

    // Wait for Write Enable Latch to be set
    wait_for_status(STATUS_WEL_Msk, STATUS_WEL_Msk, TMO_DEFAULT);
240535b8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
240535bc:	2102      	movs	r1, #2
240535be:	2002      	movs	r0, #2
240535c0:	f7ff ff56 	bl	24053470 <wait_for_status>
}
240535c4:	bf00      	nop
240535c6:	bd80      	pop	{r7, pc}
240535c8:	20000088 	.word	0x20000088

240535cc <init_mx_issi>:
{
    OSPI_ReadBytes(CMD(RDCR), 0, dest, 1);
}

static void init_mx_issi(void)
{
240535cc:	b580      	push	{r7, lr}
240535ce:	b082      	sub	sp, #8
240535d0:	af00      	add	r7, sp, #0
    // Shared code for both MX and ISSI

    uint8_t rd_status;

    DBG("%s\n", __FUNCTION__);
240535d2:	481e      	ldr	r0, [pc, #120]	@ (2405364c <init_mx_issi+0x80>)
240535d4:	f011 f81e 	bl	24064614 <puts>

    OSPI_ReadBytes(CMD(RDSR), 0, &rd_status, 1);
240535d8:	4b1d      	ldr	r3, [pc, #116]	@ (24053650 <init_mx_issi+0x84>)
240535da:	689b      	ldr	r3, [r3, #8]
240535dc:	681b      	ldr	r3, [r3, #0]
240535de:	1cd8      	adds	r0, r3, #3
240535e0:	1dfa      	adds	r2, r7, #7
240535e2:	2301      	movs	r3, #1
240535e4:	2100      	movs	r1, #0
240535e6:	f7ff feb1 	bl	2405334c <OSPI_ReadBytes>

    if (flash.config->set_quad && ((rd_status & STATUS_QE_Msk) == 0)) {
240535ea:	4b19      	ldr	r3, [pc, #100]	@ (24053650 <init_mx_issi+0x84>)
240535ec:	689b      	ldr	r3, [r3, #8]
240535ee:	7d1b      	ldrb	r3, [r3, #20]
240535f0:	2b00      	cmp	r3, #0
240535f2:	d027      	beq.n	24053644 <init_mx_issi+0x78>
240535f4:	79fb      	ldrb	r3, [r7, #7]
240535f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
240535fa:	2b00      	cmp	r3, #0
240535fc:	d122      	bne.n	24053644 <init_mx_issi+0x78>
        // WRSR - Write Status Register
        // Set Quad Enable bit (6) in status register. Other bits = 0.
        uint8_t wr_status = STATUS_QE_Msk;
240535fe:	2340      	movs	r3, #64	@ 0x40
24053600:	71bb      	strb	r3, [r7, #6]

        DBG("Setting QE bit.\n");
24053602:	4814      	ldr	r0, [pc, #80]	@ (24053654 <init_mx_issi+0x88>)
24053604:	f011 f806 	bl	24064614 <puts>

        // Set the QE bit
        OSPI_NOR_WriteEnable();
24053608:	f7ff ffca 	bl	240535a0 <OSPI_NOR_WriteEnable>
        OSPI_WriteBytes(CMD(WRSR), 0, &wr_status, 1);
2405360c:	4b10      	ldr	r3, [pc, #64]	@ (24053650 <init_mx_issi+0x84>)
2405360e:	689b      	ldr	r3, [r3, #8]
24053610:	6818      	ldr	r0, [r3, #0]
24053612:	1dba      	adds	r2, r7, #6
24053614:	2301      	movs	r3, #1
24053616:	2100      	movs	r1, #0
24053618:	f7ff fee2 	bl	240533e0 <OSPI_WriteBytes>
        wait_for_status(STATUS_WIP_Msk, 0, TMO_DEFAULT);
2405361c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
24053620:	2100      	movs	r1, #0
24053622:	2001      	movs	r0, #1
24053624:	f7ff ff24 	bl	24053470 <wait_for_status>

        OSPI_ReadBytes(CMD(RDSR), 0, &rd_status, 1);
24053628:	4b09      	ldr	r3, [pc, #36]	@ (24053650 <init_mx_issi+0x84>)
2405362a:	689b      	ldr	r3, [r3, #8]
2405362c:	681b      	ldr	r3, [r3, #0]
2405362e:	1cd8      	adds	r0, r3, #3
24053630:	1dfa      	adds	r2, r7, #7
24053632:	2301      	movs	r3, #1
24053634:	2100      	movs	r1, #0
24053636:	f7ff fe89 	bl	2405334c <OSPI_ReadBytes>
        DBG("QE bit set. Status: %02X\n", rd_status);
2405363a:	79fb      	ldrb	r3, [r7, #7]
2405363c:	4619      	mov	r1, r3
2405363e:	4806      	ldr	r0, [pc, #24]	@ (24053658 <init_mx_issi+0x8c>)
24053640:	f010 ff80 	bl	24064544 <iprintf>
    }
}
24053644:	bf00      	nop
24053646:	3708      	adds	r7, #8
24053648:	46bd      	mov	sp, r7
2405364a:	bd80      	pop	{r7, pc}
2405364c:	24069a3c 	.word	0x24069a3c
24053650:	20000088 	.word	0x20000088
24053654:	24065834 	.word	0x24065834
24053658:	24065844 	.word	0x24065844

2405365c <init_spansion>:

static void init_spansion(void)
{
2405365c:	b5b0      	push	{r4, r5, r7, lr}
2405365e:	b086      	sub	sp, #24
24053660:	af04      	add	r7, sp, #16
    uint8_t rd_cr2;
    uint8_t rd_cr3;
    uint8_t rd_cr4;

    // SR[1-2]V
    OSPI_ReadBytes(CMD(RDSR), 0x00, &rd_sr1, 1);
24053662:	4b44      	ldr	r3, [pc, #272]	@ (24053774 <init_spansion+0x118>)
24053664:	689b      	ldr	r3, [r3, #8]
24053666:	681b      	ldr	r3, [r3, #0]
24053668:	1cd8      	adds	r0, r3, #3
2405366a:	1dfa      	adds	r2, r7, #7
2405366c:	2301      	movs	r3, #1
2405366e:	2100      	movs	r1, #0
24053670:	f7ff fe6c 	bl	2405334c <OSPI_ReadBytes>
    OSPI_ReadBytes(CMD(RDAR), 0x00800001, &rd_sr2, 1);
24053674:	4b3f      	ldr	r3, [pc, #252]	@ (24053774 <init_spansion+0x118>)
24053676:	689b      	ldr	r3, [r3, #8]
24053678:	681b      	ldr	r3, [r3, #0]
2405367a:	f103 0009 	add.w	r0, r3, #9
2405367e:	1dba      	adds	r2, r7, #6
24053680:	2301      	movs	r3, #1
24053682:	493d      	ldr	r1, [pc, #244]	@ (24053778 <init_spansion+0x11c>)
24053684:	f7ff fe62 	bl	2405334c <OSPI_ReadBytes>

    // CR[1-4]NV
    OSPI_ReadBytes(CMD(RDCR), 0x00, &rd_cr1, 1);
24053688:	4b3a      	ldr	r3, [pc, #232]	@ (24053774 <init_spansion+0x118>)
2405368a:	689b      	ldr	r3, [r3, #8]
2405368c:	681b      	ldr	r3, [r3, #0]
2405368e:	1d98      	adds	r0, r3, #6
24053690:	1d7a      	adds	r2, r7, #5
24053692:	2301      	movs	r3, #1
24053694:	2100      	movs	r1, #0
24053696:	f7ff fe59 	bl	2405334c <OSPI_ReadBytes>
    OSPI_ReadBytes(CMD(RDAR), 0x03, &rd_cr2, 1);
2405369a:	4b36      	ldr	r3, [pc, #216]	@ (24053774 <init_spansion+0x118>)
2405369c:	689b      	ldr	r3, [r3, #8]
2405369e:	681b      	ldr	r3, [r3, #0]
240536a0:	f103 0009 	add.w	r0, r3, #9
240536a4:	1d3a      	adds	r2, r7, #4
240536a6:	2301      	movs	r3, #1
240536a8:	2103      	movs	r1, #3
240536aa:	f7ff fe4f 	bl	2405334c <OSPI_ReadBytes>
    OSPI_ReadBytes(CMD(RDAR), 0x04, &rd_cr3, 1);
240536ae:	4b31      	ldr	r3, [pc, #196]	@ (24053774 <init_spansion+0x118>)
240536b0:	689b      	ldr	r3, [r3, #8]
240536b2:	681b      	ldr	r3, [r3, #0]
240536b4:	f103 0009 	add.w	r0, r3, #9
240536b8:	1cfa      	adds	r2, r7, #3
240536ba:	2301      	movs	r3, #1
240536bc:	2104      	movs	r1, #4
240536be:	f7ff fe45 	bl	2405334c <OSPI_ReadBytes>
    OSPI_ReadBytes(CMD(RDAR), 0x05, &rd_cr4, 1);
240536c2:	4b2c      	ldr	r3, [pc, #176]	@ (24053774 <init_spansion+0x118>)
240536c4:	689b      	ldr	r3, [r3, #8]
240536c6:	681b      	ldr	r3, [r3, #0]
240536c8:	f103 0009 	add.w	r0, r3, #9
240536cc:	1cba      	adds	r2, r7, #2
240536ce:	2301      	movs	r3, #1
240536d0:	2105      	movs	r1, #5
240536d2:	f7ff fe3b 	bl	2405334c <OSPI_ReadBytes>

    DBG("SR1: %02X SR2: %02X CR: %02X %02X %02X %02X\n", rd_sr1, rd_sr2, rd_cr1, rd_cr2, rd_cr3, rd_cr4);
240536d6:	79fb      	ldrb	r3, [r7, #7]
240536d8:	4618      	mov	r0, r3
240536da:	79bb      	ldrb	r3, [r7, #6]
240536dc:	461c      	mov	r4, r3
240536de:	797b      	ldrb	r3, [r7, #5]
240536e0:	461d      	mov	r5, r3
240536e2:	793b      	ldrb	r3, [r7, #4]
240536e4:	78fa      	ldrb	r2, [r7, #3]
240536e6:	78b9      	ldrb	r1, [r7, #2]
240536e8:	9102      	str	r1, [sp, #8]
240536ea:	9201      	str	r2, [sp, #4]
240536ec:	9300      	str	r3, [sp, #0]
240536ee:	462b      	mov	r3, r5
240536f0:	4622      	mov	r2, r4
240536f2:	4601      	mov	r1, r0
240536f4:	4821      	ldr	r0, [pc, #132]	@ (2405377c <init_spansion+0x120>)
240536f6:	f010 ff25 	bl	24064544 <iprintf>

    if (flash.config->set_quad && ((rd_cr1 & S_CR_QUAD_Msk) == 0)) {
240536fa:	4b1e      	ldr	r3, [pc, #120]	@ (24053774 <init_spansion+0x118>)
240536fc:	689b      	ldr	r3, [r3, #8]
240536fe:	7d1b      	ldrb	r3, [r3, #20]
24053700:	2b00      	cmp	r3, #0
24053702:	d033      	beq.n	2405376c <init_spansion+0x110>
24053704:	797b      	ldrb	r3, [r7, #5]
24053706:	f003 0302 	and.w	r3, r3, #2
2405370a:	2b00      	cmp	r3, #0
2405370c:	d12e      	bne.n	2405376c <init_spansion+0x110>
        // WRSR/WRR writes to {status, config}
        // Clear SR1V and set bit 1 (QUAD) in CR1NV
        uint8_t wr_sr[] = {0x00, S_CR_QUAD_Msk};
2405370e:	f44f 7300 	mov.w	r3, #512	@ 0x200
24053712:	803b      	strh	r3, [r7, #0]

        DBG("Setting QUAD in CR1V.\n");
24053714:	481a      	ldr	r0, [pc, #104]	@ (24053780 <init_spansion+0x124>)
24053716:	f010 ff7d 	bl	24064614 <puts>

        // Enable write to be allowed to change the registers
        OSPI_NOR_WriteEnable();
2405371a:	f7ff ff41 	bl	240535a0 <OSPI_NOR_WriteEnable>

        OSPI_WriteBytes(CMD(WRSR), 0, wr_sr, sizeof(wr_sr));
2405371e:	4b15      	ldr	r3, [pc, #84]	@ (24053774 <init_spansion+0x118>)
24053720:	689b      	ldr	r3, [r3, #8]
24053722:	6818      	ldr	r0, [r3, #0]
24053724:	463a      	mov	r2, r7
24053726:	2302      	movs	r3, #2
24053728:	2100      	movs	r1, #0
2405372a:	f7ff fe59 	bl	240533e0 <OSPI_WriteBytes>

        // Wait until WIP bit is cleared
        wait_for_status(STATUS_WIP_Msk, 0, TMO_DEFAULT);
2405372e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
24053732:	2100      	movs	r1, #0
24053734:	2001      	movs	r0, #1
24053736:	f7ff fe9b 	bl	24053470 <wait_for_status>

        OSPI_ReadBytes(CMD(RDSR), 0, &rd_sr1, 1);
2405373a:	4b0e      	ldr	r3, [pc, #56]	@ (24053774 <init_spansion+0x118>)
2405373c:	689b      	ldr	r3, [r3, #8]
2405373e:	681b      	ldr	r3, [r3, #0]
24053740:	1cd8      	adds	r0, r3, #3
24053742:	1dfa      	adds	r2, r7, #7
24053744:	2301      	movs	r3, #1
24053746:	2100      	movs	r1, #0
24053748:	f7ff fe00 	bl	2405334c <OSPI_ReadBytes>
        OSPI_ReadBytes(CMD(RDCR), 0, &rd_cr1, 1);
2405374c:	4b09      	ldr	r3, [pc, #36]	@ (24053774 <init_spansion+0x118>)
2405374e:	689b      	ldr	r3, [r3, #8]
24053750:	681b      	ldr	r3, [r3, #0]
24053752:	1d98      	adds	r0, r3, #6
24053754:	1d7a      	adds	r2, r7, #5
24053756:	2301      	movs	r3, #1
24053758:	2100      	movs	r1, #0
2405375a:	f7ff fdf7 	bl	2405334c <OSPI_ReadBytes>
        DBG("QUAD bit set. SR: %02X CR: %02X\n", rd_sr1, rd_cr1);
2405375e:	79fb      	ldrb	r3, [r7, #7]
24053760:	4619      	mov	r1, r3
24053762:	797b      	ldrb	r3, [r7, #5]
24053764:	461a      	mov	r2, r3
24053766:	4807      	ldr	r0, [pc, #28]	@ (24053784 <init_spansion+0x128>)
24053768:	f010 feec 	bl	24064544 <iprintf>
    }
}
2405376c:	bf00      	nop
2405376e:	3708      	adds	r7, #8
24053770:	46bd      	mov	sp, r7
24053772:	bdb0      	pop	{r4, r5, r7, pc}
24053774:	20000088 	.word	0x20000088
24053778:	00800001 	.word	0x00800001
2405377c:	24065860 	.word	0x24065860
24053780:	24065890 	.word	0x24065890
24053784:	240658a8 	.word	0x240658a8

24053788 <init_winbond>:

static void init_winbond(void)
{
24053788:	b580      	push	{r7, lr}
2405378a:	b086      	sub	sp, #24
2405378c:	af00      	add	r7, sp, #0
	//                                    cmd   i_lines  a_lines  a_size         d_lines  dummy
	const flash_cmd_t cmd_rdsr2 = CMD_DEF(0x35, LINES_1, LINES_0, ADDR_SIZE_24B, LINES_1, 0);
2405378e:	4a7f      	ldr	r2, [pc, #508]	@ (2405398c <init_winbond+0x204>)
24053790:	f107 0314 	add.w	r3, r7, #20
24053794:	6812      	ldr	r2, [r2, #0]
24053796:	4611      	mov	r1, r2
24053798:	8019      	strh	r1, [r3, #0]
2405379a:	3302      	adds	r3, #2
2405379c:	0c12      	lsrs	r2, r2, #16
2405379e:	701a      	strb	r2, [r3, #0]
	const flash_cmd_t cmd_rdsr3 = CMD_DEF(0x15, LINES_1, LINES_0, ADDR_SIZE_24B, LINES_1, 0);
240537a0:	4a7b      	ldr	r2, [pc, #492]	@ (24053990 <init_winbond+0x208>)
240537a2:	f107 0310 	add.w	r3, r7, #16
240537a6:	6812      	ldr	r2, [r2, #0]
240537a8:	4611      	mov	r1, r2
240537aa:	8019      	strh	r1, [r3, #0]
240537ac:	3302      	adds	r3, #2
240537ae:	0c12      	lsrs	r2, r2, #16
240537b0:	701a      	strb	r2, [r3, #0]
	const flash_cmd_t cmd_wrsr2 = CMD_DEF(0x31, LINES_1, LINES_0, ADDR_SIZE_24B, LINES_1, 0);
240537b2:	4a78      	ldr	r2, [pc, #480]	@ (24053994 <init_winbond+0x20c>)
240537b4:	f107 030c 	add.w	r3, r7, #12
240537b8:	6812      	ldr	r2, [r2, #0]
240537ba:	4611      	mov	r1, r2
240537bc:	8019      	strh	r1, [r3, #0]
240537be:	3302      	adds	r3, #2
240537c0:	0c12      	lsrs	r2, r2, #16
240537c2:	701a      	strb	r2, [r3, #0]
	const flash_cmd_t cmd_wrsr3 = CMD_DEF(0x11, LINES_1, LINES_0, ADDR_SIZE_24B, LINES_1, 0);
240537c4:	4a74      	ldr	r2, [pc, #464]	@ (24053998 <init_winbond+0x210>)
240537c6:	f107 0308 	add.w	r3, r7, #8
240537ca:	6812      	ldr	r2, [r2, #0]
240537cc:	4611      	mov	r1, r2
240537ce:	8019      	strh	r1, [r3, #0]
240537d0:	3302      	adds	r3, #2
240537d2:	0c12      	lsrs	r2, r2, #16
240537d4:	701a      	strb	r2, [r3, #0]

	const bool is_quad = flash.config->set_quad;
240537d6:	4b71      	ldr	r3, [pc, #452]	@ (2405399c <init_winbond+0x214>)
240537d8:	689b      	ldr	r3, [r3, #8]
240537da:	7d1b      	ldrb	r3, [r3, #20]
240537dc:	75fb      	strb	r3, [r7, #23]

	uint8_t sr1, sr2, sr3;

	OSPI_ReadBytes(CMD(RDSR),  0, &sr1, 1);
240537de:	4b6f      	ldr	r3, [pc, #444]	@ (2405399c <init_winbond+0x214>)
240537e0:	689b      	ldr	r3, [r3, #8]
240537e2:	681b      	ldr	r3, [r3, #0]
240537e4:	1cd8      	adds	r0, r3, #3
240537e6:	1dfa      	adds	r2, r7, #7
240537e8:	2301      	movs	r3, #1
240537ea:	2100      	movs	r1, #0
240537ec:	f7ff fdae 	bl	2405334c <OSPI_ReadBytes>
	OSPI_ReadBytes(&cmd_rdsr2, 0, &sr2, 1);
240537f0:	1dba      	adds	r2, r7, #6
240537f2:	f107 0014 	add.w	r0, r7, #20
240537f6:	2301      	movs	r3, #1
240537f8:	2100      	movs	r1, #0
240537fa:	f7ff fda7 	bl	2405334c <OSPI_ReadBytes>
	OSPI_ReadBytes(&cmd_rdsr3, 0, &sr3, 1);
240537fe:	1d7a      	adds	r2, r7, #5
24053800:	f107 0010 	add.w	r0, r7, #16
24053804:	2301      	movs	r3, #1
24053806:	2100      	movs	r1, #0
24053808:	f7ff fda0 	bl	2405334c <OSPI_ReadBytes>
	DBG("Winbond SR1: %02X SR2: %02X SR3: %02X\n", sr1, sr2, sr3);
2405380c:	79fb      	ldrb	r3, [r7, #7]
2405380e:	4619      	mov	r1, r3
24053810:	79bb      	ldrb	r3, [r7, #6]
24053812:	461a      	mov	r2, r3
24053814:	797b      	ldrb	r3, [r7, #5]
24053816:	4862      	ldr	r0, [pc, #392]	@ (240539a0 <init_winbond+0x218>)
24053818:	f010 fe94 	bl	24064544 <iprintf>

	// try to clear writeable protect bits if set

	if (sr1 & WB_SR1_PROTECT_Msk) {
2405381c:	79fb      	ldrb	r3, [r7, #7]
2405381e:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
24053822:	2b00      	cmp	r3, #0
24053824:	d027      	beq.n	24053876 <init_winbond+0xee>
		DBG("clearing SR1 protect bits\n");
24053826:	485f      	ldr	r0, [pc, #380]	@ (240539a4 <init_winbond+0x21c>)
24053828:	f010 fef4 	bl	24064614 <puts>
		sr1 = 0;
2405382c:	2300      	movs	r3, #0
2405382e:	71fb      	strb	r3, [r7, #7]

		OSPI_NOR_WriteEnable();
24053830:	f7ff feb6 	bl	240535a0 <OSPI_NOR_WriteEnable>
		OSPI_WriteBytes(CMD(WRSR), 0, &sr1, 1);
24053834:	4b59      	ldr	r3, [pc, #356]	@ (2405399c <init_winbond+0x214>)
24053836:	689b      	ldr	r3, [r3, #8]
24053838:	6818      	ldr	r0, [r3, #0]
2405383a:	1dfa      	adds	r2, r7, #7
2405383c:	2301      	movs	r3, #1
2405383e:	2100      	movs	r1, #0
24053840:	f7ff fdce 	bl	240533e0 <OSPI_WriteBytes>
		wait_for_status(STATUS_WIP_Msk, 0, TMO_DEFAULT);
24053844:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
24053848:	2100      	movs	r1, #0
2405384a:	2001      	movs	r0, #1
2405384c:	f7ff fe10 	bl	24053470 <wait_for_status>

		OSPI_ReadBytes(CMD(RDSR), 0, &sr1, 1);
24053850:	4b52      	ldr	r3, [pc, #328]	@ (2405399c <init_winbond+0x214>)
24053852:	689b      	ldr	r3, [r3, #8]
24053854:	681b      	ldr	r3, [r3, #0]
24053856:	1cd8      	adds	r0, r3, #3
24053858:	1dfa      	adds	r2, r7, #7
2405385a:	2301      	movs	r3, #1
2405385c:	2100      	movs	r1, #0
2405385e:	f7ff fd75 	bl	2405334c <OSPI_ReadBytes>
		if (sr1 & WB_SR1_PROTECT_Msk)
24053862:	79fb      	ldrb	r3, [r7, #7]
24053864:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
24053868:	2b00      	cmp	r3, #0
2405386a:	d004      	beq.n	24053876 <init_winbond+0xee>
			DBG("SR1: %02X, change failed\n", sr1);
2405386c:	79fb      	ldrb	r3, [r7, #7]
2405386e:	4619      	mov	r1, r3
24053870:	484d      	ldr	r0, [pc, #308]	@ (240539a8 <init_winbond+0x220>)
24053872:	f010 fe67 	bl	24064544 <iprintf>
	}

	if ((sr2 & WB_SR2_PROTECT_Msk) || (is_quad && !(sr2 & 1<<WB_SR2_QE_Pos))) {
24053876:	79bb      	ldrb	r3, [r7, #6]
24053878:	f003 0341 	and.w	r3, r3, #65	@ 0x41
2405387c:	2b00      	cmp	r3, #0
2405387e:	d107      	bne.n	24053890 <init_winbond+0x108>
24053880:	7dfb      	ldrb	r3, [r7, #23]
24053882:	2b00      	cmp	r3, #0
24053884:	d039      	beq.n	240538fa <init_winbond+0x172>
24053886:	79bb      	ldrb	r3, [r7, #6]
24053888:	f003 0302 	and.w	r3, r3, #2
2405388c:	2b00      	cmp	r3, #0
2405388e:	d134      	bne.n	240538fa <init_winbond+0x172>
		DBG("clearing SR2 protect bits\n");
24053890:	4846      	ldr	r0, [pc, #280]	@ (240539ac <init_winbond+0x224>)
24053892:	f010 febf 	bl	24064614 <puts>
		sr2 = 0;
24053896:	2300      	movs	r3, #0
24053898:	71bb      	strb	r3, [r7, #6]

		if (is_quad) {
2405389a:	7dfb      	ldrb	r3, [r7, #23]
2405389c:	2b00      	cmp	r3, #0
2405389e:	d004      	beq.n	240538aa <init_winbond+0x122>
			DBG("and enabling quad mode\n");
240538a0:	4843      	ldr	r0, [pc, #268]	@ (240539b0 <init_winbond+0x228>)
240538a2:	f010 feb7 	bl	24064614 <puts>
			sr2 = 1<<WB_SR2_QE_Pos;
240538a6:	2302      	movs	r3, #2
240538a8:	71bb      	strb	r3, [r7, #6]
		}

		OSPI_NOR_WriteEnable();
240538aa:	f7ff fe79 	bl	240535a0 <OSPI_NOR_WriteEnable>
		OSPI_WriteBytes(&cmd_wrsr2, 0, &sr2, 1);
240538ae:	1dba      	adds	r2, r7, #6
240538b0:	f107 000c 	add.w	r0, r7, #12
240538b4:	2301      	movs	r3, #1
240538b6:	2100      	movs	r1, #0
240538b8:	f7ff fd92 	bl	240533e0 <OSPI_WriteBytes>
		wait_for_status(STATUS_WIP_Msk, 0, TMO_DEFAULT);
240538bc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
240538c0:	2100      	movs	r1, #0
240538c2:	2001      	movs	r0, #1
240538c4:	f7ff fdd4 	bl	24053470 <wait_for_status>

		OSPI_ReadBytes(&cmd_rdsr2, 0, &sr2, 1);
240538c8:	1dba      	adds	r2, r7, #6
240538ca:	f107 0014 	add.w	r0, r7, #20
240538ce:	2301      	movs	r3, #1
240538d0:	2100      	movs	r1, #0
240538d2:	f7ff fd3b 	bl	2405334c <OSPI_ReadBytes>
		if ((sr2 & WB_SR2_PROTECT_Msk) || (is_quad && !(sr2 & 1<<WB_SR2_QE_Pos)))
240538d6:	79bb      	ldrb	r3, [r7, #6]
240538d8:	f003 0341 	and.w	r3, r3, #65	@ 0x41
240538dc:	2b00      	cmp	r3, #0
240538de:	d107      	bne.n	240538f0 <init_winbond+0x168>
240538e0:	7dfb      	ldrb	r3, [r7, #23]
240538e2:	2b00      	cmp	r3, #0
240538e4:	d009      	beq.n	240538fa <init_winbond+0x172>
240538e6:	79bb      	ldrb	r3, [r7, #6]
240538e8:	f003 0302 	and.w	r3, r3, #2
240538ec:	2b00      	cmp	r3, #0
240538ee:	d104      	bne.n	240538fa <init_winbond+0x172>
			DBG("SR2: %02X, change failed\n", sr2);
240538f0:	79bb      	ldrb	r3, [r7, #6]
240538f2:	4619      	mov	r1, r3
240538f4:	482f      	ldr	r0, [pc, #188]	@ (240539b4 <init_winbond+0x22c>)
240538f6:	f010 fe25 	bl	24064544 <iprintf>
	}

	if ((sr3 & WB_SR3_PROTECT_Msk) || ((sr3 & WB_SR3_DRV_Msk) != WB_SR3_DRV_Val_50)) {
240538fa:	797b      	ldrb	r3, [r7, #5]
240538fc:	f003 0304 	and.w	r3, r3, #4
24053900:	2b00      	cmp	r3, #0
24053902:	d104      	bne.n	2405390e <init_winbond+0x186>
24053904:	797b      	ldrb	r3, [r7, #5]
24053906:	f003 0360 	and.w	r3, r3, #96	@ 0x60
2405390a:	2b40      	cmp	r3, #64	@ 0x40
2405390c:	d029      	beq.n	24053962 <init_winbond+0x1da>
		DBG("clearing SR3 protect bits, setting drive strength 50%%\n");
2405390e:	482a      	ldr	r0, [pc, #168]	@ (240539b8 <init_winbond+0x230>)
24053910:	f010 fe18 	bl	24064544 <iprintf>
		sr3 = WB_SR3_DRV_Val_50;
24053914:	2340      	movs	r3, #64	@ 0x40
24053916:	717b      	strb	r3, [r7, #5]

		OSPI_NOR_WriteEnable();
24053918:	f7ff fe42 	bl	240535a0 <OSPI_NOR_WriteEnable>
		OSPI_WriteBytes(&cmd_wrsr3, 0, &sr3, 1);
2405391c:	1d7a      	adds	r2, r7, #5
2405391e:	f107 0008 	add.w	r0, r7, #8
24053922:	2301      	movs	r3, #1
24053924:	2100      	movs	r1, #0
24053926:	f7ff fd5b 	bl	240533e0 <OSPI_WriteBytes>
		wait_for_status(STATUS_WIP_Msk, 0, TMO_DEFAULT);
2405392a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
2405392e:	2100      	movs	r1, #0
24053930:	2001      	movs	r0, #1
24053932:	f7ff fd9d 	bl	24053470 <wait_for_status>

		OSPI_ReadBytes(&cmd_rdsr3, 0, &sr3, 1);
24053936:	1d7a      	adds	r2, r7, #5
24053938:	f107 0010 	add.w	r0, r7, #16
2405393c:	2301      	movs	r3, #1
2405393e:	2100      	movs	r1, #0
24053940:	f7ff fd04 	bl	2405334c <OSPI_ReadBytes>
		if ((sr3 & WB_SR3_PROTECT_Msk) || ((sr3 & WB_SR3_DRV_Msk) != WB_SR3_DRV_Val_50))
24053944:	797b      	ldrb	r3, [r7, #5]
24053946:	f003 0304 	and.w	r3, r3, #4
2405394a:	2b00      	cmp	r3, #0
2405394c:	d104      	bne.n	24053958 <init_winbond+0x1d0>
2405394e:	797b      	ldrb	r3, [r7, #5]
24053950:	f003 0360 	and.w	r3, r3, #96	@ 0x60
24053954:	2b40      	cmp	r3, #64	@ 0x40
24053956:	d004      	beq.n	24053962 <init_winbond+0x1da>
			DBG("SR3: %02X, change failed\n", sr3);
24053958:	797b      	ldrb	r3, [r7, #5]
2405395a:	4619      	mov	r1, r3
2405395c:	4817      	ldr	r0, [pc, #92]	@ (240539bc <init_winbond+0x234>)
2405395e:	f010 fdf1 	bl	24064544 <iprintf>
	}

    if (is_quad && !(sr2 & 1<<WB_SR2_QE_Pos)) {
24053962:	7dfb      	ldrb	r3, [r7, #23]
24053964:	2b00      	cmp	r3, #0
24053966:	d00d      	beq.n	24053984 <init_winbond+0x1fc>
24053968:	79bb      	ldrb	r3, [r7, #6]
2405396a:	f003 0302 	and.w	r3, r3, #2
2405396e:	2b00      	cmp	r3, #0
24053970:	d108      	bne.n	24053984 <init_winbond+0x1fc>
        DBG("Windbond quad mode not enabled, falling back to SPI\n");
24053972:	4813      	ldr	r0, [pc, #76]	@ (240539c0 <init_winbond+0x238>)
24053974:	f010 fe4e 	bl	24064614 <puts>
        flash.config = &config_spi_24b;
24053978:	4b08      	ldr	r3, [pc, #32]	@ (2405399c <init_winbond+0x214>)
2405397a:	4a12      	ldr	r2, [pc, #72]	@ (240539c4 <init_winbond+0x23c>)
2405397c:	609a      	str	r2, [r3, #8]
        flash.name = "Winbond SPI";
2405397e:	4b07      	ldr	r3, [pc, #28]	@ (2405399c <init_winbond+0x214>)
24053980:	4a11      	ldr	r2, [pc, #68]	@ (240539c8 <init_winbond+0x240>)
24053982:	60da      	str	r2, [r3, #12]
    }
}
24053984:	bf00      	nop
24053986:	3718      	adds	r7, #24
24053988:	46bd      	mov	sp, r7
2405398a:	bd80      	pop	{r7, pc}
2405398c:	24065a10 	.word	0x24065a10
24053990:	24065a14 	.word	0x24065a14
24053994:	24065a18 	.word	0x24065a18
24053998:	24065a1c 	.word	0x24065a1c
2405399c:	20000088 	.word	0x20000088
240539a0:	240658cc 	.word	0x240658cc
240539a4:	240658f4 	.word	0x240658f4
240539a8:	24065910 	.word	0x24065910
240539ac:	2406592c 	.word	0x2406592c
240539b0:	24065948 	.word	0x24065948
240539b4:	24065960 	.word	0x24065960
240539b8:	2406597c 	.word	0x2406597c
240539bc:	240659b4 	.word	0x240659b4
240539c0:	240659d0 	.word	0x240659d0
240539c4:	24069844 	.word	0x24069844
240539c8:	24065a04 	.word	0x24065a04

240539cc <OSPI_Init>:
    // Assumes that erase sizes are sorted: 4 > 3 > 2 > 1.
    return flash.config->erase_sizes[0];
}

void OSPI_Init(OSPI_HandleTypeDef *hospi)
{
240539cc:	b580      	push	{r7, lr}
240539ce:	b084      	sub	sp, #16
240539d0:	af00      	add	r7, sp, #0
240539d2:	6078      	str	r0, [r7, #4]
    uint8_t status;

    flash.hospi = hospi;
240539d4:	4a4c      	ldr	r2, [pc, #304]	@ (24053b08 <OSPI_Init+0x13c>)
240539d6:	687b      	ldr	r3, [r7, #4]
240539d8:	6013      	str	r3, [r2, #0]

    // Enable Reset
    OSPI_WriteBytes(CMD(RSTEN), 0, NULL, 0);
240539da:	4b4b      	ldr	r3, [pc, #300]	@ (24053b08 <OSPI_Init+0x13c>)
240539dc:	689b      	ldr	r3, [r3, #8]
240539de:	681b      	ldr	r3, [r3, #0]
240539e0:	f103 0012 	add.w	r0, r3, #18
240539e4:	2300      	movs	r3, #0
240539e6:	2200      	movs	r2, #0
240539e8:	2100      	movs	r1, #0
240539ea:	f7ff fcf9 	bl	240533e0 <OSPI_WriteBytes>
    HAL_Delay(2);
240539ee:	2002      	movs	r0, #2
240539f0:	f003 f852 	bl	24056a98 <HAL_Delay>

    // Reset
    OSPI_WriteBytes(CMD(RST), 0, NULL, 0);
240539f4:	4b44      	ldr	r3, [pc, #272]	@ (24053b08 <OSPI_Init+0x13c>)
240539f6:	689b      	ldr	r3, [r3, #8]
240539f8:	681b      	ldr	r3, [r3, #0]
240539fa:	f103 0015 	add.w	r0, r3, #21
240539fe:	2300      	movs	r3, #0
24053a00:	2200      	movs	r2, #0
24053a02:	2100      	movs	r1, #0
24053a04:	f7ff fcec 	bl	240533e0 <OSPI_WriteBytes>
    HAL_Delay(20);
24053a08:	2014      	movs	r0, #20
24053a0a:	f003 f845 	bl	24056a98 <HAL_Delay>

    // Read ID
    OSPI_ReadBytes(CMD(RDID), 0, &flash.jedec_id.u8[0], 3);
24053a0e:	4b3e      	ldr	r3, [pc, #248]	@ (24053b08 <OSPI_Init+0x13c>)
24053a10:	689b      	ldr	r3, [r3, #8]
24053a12:	681b      	ldr	r3, [r3, #0]
24053a14:	f103 000f 	add.w	r0, r3, #15
24053a18:	2303      	movs	r3, #3
24053a1a:	4a3c      	ldr	r2, [pc, #240]	@ (24053b0c <OSPI_Init+0x140>)
24053a1c:	2100      	movs	r1, #0
24053a1e:	f7ff fc95 	bl	2405334c <OSPI_ReadBytes>
    DBG("JEDEC_ID: %02X %02X %02X\n", flash.jedec_id.u8[0], flash.jedec_id.u8[1], flash.jedec_id.u8[2]);
24053a22:	4b39      	ldr	r3, [pc, #228]	@ (24053b08 <OSPI_Init+0x13c>)
24053a24:	791b      	ldrb	r3, [r3, #4]
24053a26:	4619      	mov	r1, r3
24053a28:	4b37      	ldr	r3, [pc, #220]	@ (24053b08 <OSPI_Init+0x13c>)
24053a2a:	795b      	ldrb	r3, [r3, #5]
24053a2c:	461a      	mov	r2, r3
24053a2e:	4b36      	ldr	r3, [pc, #216]	@ (24053b08 <OSPI_Init+0x13c>)
24053a30:	799b      	ldrb	r3, [r3, #6]
24053a32:	4837      	ldr	r0, [pc, #220]	@ (24053b10 <OSPI_Init+0x144>)
24053a34:	f010 fd86 	bl	24064544 <iprintf>

    // Check for known bad IDs
    if (((flash.jedec_id.u32 & 0xffffff) == 0xffffff) ||
24053a38:	4b33      	ldr	r3, [pc, #204]	@ (24053b08 <OSPI_Init+0x13c>)
24053a3a:	685b      	ldr	r3, [r3, #4]
24053a3c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
24053a40:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
24053a44:	4293      	cmp	r3, r2
24053a46:	d005      	beq.n	24053a54 <OSPI_Init+0x88>
        ((flash.jedec_id.u32 & 0xffffff) == 0x000000)) {
24053a48:	4b2f      	ldr	r3, [pc, #188]	@ (24053b08 <OSPI_Init+0x13c>)
24053a4a:	685b      	ldr	r3, [r3, #4]
24053a4c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
    if (((flash.jedec_id.u32 & 0xffffff) == 0xffffff) ||
24053a50:	2b00      	cmp	r3, #0
24053a52:	d106      	bne.n	24053a62 <OSPI_Init+0x96>
        assert(!"Can't communicate with the external flash! Please check the soldering.");
24053a54:	4b2f      	ldr	r3, [pc, #188]	@ (24053b14 <OSPI_Init+0x148>)
24053a56:	4a30      	ldr	r2, [pc, #192]	@ (24053b18 <OSPI_Init+0x14c>)
24053a58:	f240 3149 	movw	r1, #841	@ 0x349
24053a5c:	482f      	ldr	r0, [pc, #188]	@ (24053b1c <OSPI_Init+0x150>)
24053a5e:	f010 fb27 	bl	240640b0 <__assert_func>
    }

    OSPI_ReadBytes(CMD(RDSR), 0, &status, 1);
24053a62:	4b29      	ldr	r3, [pc, #164]	@ (24053b08 <OSPI_Init+0x13c>)
24053a64:	689b      	ldr	r3, [r3, #8]
24053a66:	681b      	ldr	r3, [r3, #0]
24053a68:	1cd8      	adds	r0, r3, #3
24053a6a:	f107 020b 	add.w	r2, r7, #11
24053a6e:	2301      	movs	r3, #1
24053a70:	2100      	movs	r1, #0
24053a72:	f7ff fc6b 	bl	2405334c <OSPI_ReadBytes>
    DBG("Status: %02X\n", status);
24053a76:	7afb      	ldrb	r3, [r7, #11]
24053a78:	4619      	mov	r1, r3
24053a7a:	4829      	ldr	r0, [pc, #164]	@ (24053b20 <OSPI_Init+0x154>)
24053a7c:	f010 fd62 	bl	24064544 <iprintf>

    for (int i = 0; i < ARRAY_SIZE(jedec_map); i++) {
24053a80:	2300      	movs	r3, #0
24053a82:	60fb      	str	r3, [r7, #12]
24053a84:	e02e      	b.n	24053ae4 <OSPI_Init+0x118>
        if ((flash.jedec_id.u32 & 0xffffff) == (jedec_map[i].jedec_id.u32 & 0xffffff)) {
24053a86:	4b20      	ldr	r3, [pc, #128]	@ (24053b08 <OSPI_Init+0x13c>)
24053a88:	6859      	ldr	r1, [r3, #4]
24053a8a:	4826      	ldr	r0, [pc, #152]	@ (24053b24 <OSPI_Init+0x158>)
24053a8c:	68fa      	ldr	r2, [r7, #12]
24053a8e:	4613      	mov	r3, r2
24053a90:	005b      	lsls	r3, r3, #1
24053a92:	4413      	add	r3, r2
24053a94:	009b      	lsls	r3, r3, #2
24053a96:	4403      	add	r3, r0
24053a98:	681b      	ldr	r3, [r3, #0]
24053a9a:	404b      	eors	r3, r1
24053a9c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
24053aa0:	2b00      	cmp	r3, #0
24053aa2:	d11c      	bne.n	24053ade <OSPI_Init+0x112>
            flash.config = jedec_map[i].config;
24053aa4:	491f      	ldr	r1, [pc, #124]	@ (24053b24 <OSPI_Init+0x158>)
24053aa6:	68fa      	ldr	r2, [r7, #12]
24053aa8:	4613      	mov	r3, r2
24053aaa:	005b      	lsls	r3, r3, #1
24053aac:	4413      	add	r3, r2
24053aae:	009b      	lsls	r3, r3, #2
24053ab0:	440b      	add	r3, r1
24053ab2:	3308      	adds	r3, #8
24053ab4:	681b      	ldr	r3, [r3, #0]
24053ab6:	4a14      	ldr	r2, [pc, #80]	@ (24053b08 <OSPI_Init+0x13c>)
24053ab8:	6093      	str	r3, [r2, #8]
            flash.name = jedec_map[i].name;
24053aba:	491a      	ldr	r1, [pc, #104]	@ (24053b24 <OSPI_Init+0x158>)
24053abc:	68fa      	ldr	r2, [r7, #12]
24053abe:	4613      	mov	r3, r2
24053ac0:	005b      	lsls	r3, r3, #1
24053ac2:	4413      	add	r3, r2
24053ac4:	009b      	lsls	r3, r3, #2
24053ac6:	440b      	add	r3, r1
24053ac8:	3304      	adds	r3, #4
24053aca:	681b      	ldr	r3, [r3, #0]
24053acc:	4a0e      	ldr	r2, [pc, #56]	@ (24053b08 <OSPI_Init+0x13c>)
24053ace:	60d3      	str	r3, [r2, #12]
            DBG("Found config: %s\n", flash.name);
24053ad0:	4b0d      	ldr	r3, [pc, #52]	@ (24053b08 <OSPI_Init+0x13c>)
24053ad2:	68db      	ldr	r3, [r3, #12]
24053ad4:	4619      	mov	r1, r3
24053ad6:	4814      	ldr	r0, [pc, #80]	@ (24053b28 <OSPI_Init+0x15c>)
24053ad8:	f010 fd34 	bl	24064544 <iprintf>
            break;
24053adc:	e005      	b.n	24053aea <OSPI_Init+0x11e>
    for (int i = 0; i < ARRAY_SIZE(jedec_map); i++) {
24053ade:	68fb      	ldr	r3, [r7, #12]
24053ae0:	3301      	adds	r3, #1
24053ae2:	60fb      	str	r3, [r7, #12]
24053ae4:	68fb      	ldr	r3, [r7, #12]
24053ae6:	2b10      	cmp	r3, #16
24053ae8:	d9cd      	bls.n	24053a86 <OSPI_Init+0xba>
        }
    }

    if (flash.config->init_fn) {
24053aea:	4b07      	ldr	r3, [pc, #28]	@ (24053b08 <OSPI_Init+0x13c>)
24053aec:	689b      	ldr	r3, [r3, #8]
24053aee:	699b      	ldr	r3, [r3, #24]
24053af0:	2b00      	cmp	r3, #0
24053af2:	d003      	beq.n	24053afc <OSPI_Init+0x130>
        flash.config->init_fn();
24053af4:	4b04      	ldr	r3, [pc, #16]	@ (24053b08 <OSPI_Init+0x13c>)
24053af6:	689b      	ldr	r3, [r3, #8]
24053af8:	699b      	ldr	r3, [r3, #24]
24053afa:	4798      	blx	r3
    }

    OSPI_EnableMemoryMappedMode();
24053afc:	f7ff fcf4 	bl	240534e8 <OSPI_EnableMemoryMappedMode>
}
24053b00:	bf00      	nop
24053b02:	3710      	adds	r7, #16
24053b04:	46bd      	mov	sp, r7
24053b06:	bd80      	pop	{r7, pc}
24053b08:	20000088 	.word	0x20000088
24053b0c:	2000008c 	.word	0x2000008c
24053b10:	24065a20 	.word	0x24065a20
24053b14:	24065a3c 	.word	0x24065a3c
24053b18:	24069a4c 	.word	0x24069a4c
24053b1c:	240656c4 	.word	0x240656c4
24053b20:	24065a88 	.word	0x24065a88
24053b24:	24069924 	.word	0x24069924
24053b28:	24065a98 	.word	0x24065a98

24053b2c <lcd_backlight_set>:
	HAL_DAC_Stop(&hdac1, DAC_CHANNEL_1);
	HAL_DAC_Stop(&hdac1, DAC_CHANNEL_2);
	HAL_DAC_Stop(&hdac2, DAC_CHANNEL_1);
}

void lcd_backlight_set(uint8_t brightness) {
24053b2c:	b580      	push	{r7, lr}
24053b2e:	b082      	sub	sp, #8
24053b30:	af00      	add	r7, sp, #0
24053b32:	4603      	mov	r3, r0
24053b34:	71fb      	strb	r3, [r7, #7]
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_8B_R, brightness);
24053b36:	79fb      	ldrb	r3, [r7, #7]
24053b38:	2208      	movs	r2, #8
24053b3a:	2100      	movs	r1, #0
24053b3c:	480f      	ldr	r0, [pc, #60]	@ (24053b7c <lcd_backlight_set+0x50>)
24053b3e:	f005 f88d 	bl	24058c5c <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_8B_R, brightness);
24053b42:	79fb      	ldrb	r3, [r7, #7]
24053b44:	2208      	movs	r2, #8
24053b46:	2110      	movs	r1, #16
24053b48:	480c      	ldr	r0, [pc, #48]	@ (24053b7c <lcd_backlight_set+0x50>)
24053b4a:	f005 f887 	bl	24058c5c <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_8B_R, brightness);
24053b4e:	79fb      	ldrb	r3, [r7, #7]
24053b50:	2208      	movs	r2, #8
24053b52:	2100      	movs	r1, #0
24053b54:	480a      	ldr	r0, [pc, #40]	@ (24053b80 <lcd_backlight_set+0x54>)
24053b56:	f005 f881 	bl	24058c5c <HAL_DAC_SetValue>

	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
24053b5a:	2100      	movs	r1, #0
24053b5c:	4807      	ldr	r0, [pc, #28]	@ (24053b7c <lcd_backlight_set+0x50>)
24053b5e:	f005 f826 	bl	24058bae <HAL_DAC_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
24053b62:	2110      	movs	r1, #16
24053b64:	4805      	ldr	r0, [pc, #20]	@ (24053b7c <lcd_backlight_set+0x50>)
24053b66:	f005 f822 	bl	24058bae <HAL_DAC_Start>
	HAL_DAC_Start(&hdac2, DAC_CHANNEL_1);
24053b6a:	2100      	movs	r1, #0
24053b6c:	4804      	ldr	r0, [pc, #16]	@ (24053b80 <lcd_backlight_set+0x54>)
24053b6e:	f005 f81e 	bl	24058bae <HAL_DAC_Start>
}
24053b72:	bf00      	nop
24053b74:	3708      	adds	r7, #8
24053b76:	46bd      	mov	sp, r7
24053b78:	bd80      	pop	{r7, pc}
24053b7a:	bf00      	nop
24053b7c:	200002d4 	.word	0x200002d4
24053b80:	200002e8 	.word	0x200002e8

24053b84 <lcd_init>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
	// Pull reset line(?) low. (Flakey without this)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
}

void lcd_init(SPI_HandleTypeDef *spi, LTDC_HandleTypeDef *ltdc) {
24053b84:	b580      	push	{r7, lr}
24053b86:	b082      	sub	sp, #8
24053b88:	af00      	add	r7, sp, #0
24053b8a:	6078      	str	r0, [r7, #4]
24053b8c:	6039      	str	r1, [r7, #0]
// Wake
// Enable 3.3v
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
24053b8e:	2200      	movs	r2, #0
24053b90:	2102      	movs	r1, #2
24053b92:	489c      	ldr	r0, [pc, #624]	@ (24053e04 <lcd_init+0x280>)
24053b94:	f008 fae4 	bl	2405c160 <HAL_GPIO_WritePin>
	HAL_Delay(1);
24053b98:	2001      	movs	r0, #1
24053b9a:	f002 ff7d 	bl	24056a98 <HAL_Delay>
	// Enable 1.8V
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
24053b9e:	2201      	movs	r2, #1
24053ba0:	2110      	movs	r1, #16
24053ba2:	4898      	ldr	r0, [pc, #608]	@ (24053e04 <lcd_init+0x280>)
24053ba4:	f008 fadc 	bl	2405c160 <HAL_GPIO_WritePin>
	// also assert CS, not sure where to put this yet
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
24053ba8:	2201      	movs	r2, #1
24053baa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
24053bae:	4896      	ldr	r0, [pc, #600]	@ (24053e08 <lcd_init+0x284>)
24053bb0:	f008 fad6 	bl	2405c160 <HAL_GPIO_WritePin>
	HAL_Delay(7);
24053bb4:	2007      	movs	r0, #7
24053bb6:	f002 ff6f 	bl	24056a98 <HAL_Delay>

// HAL_SPI_Transmit(spi, (uint8_t *)"\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55", 10, 100);
	// Lets go, bootup sequence.
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
24053bba:	2201      	movs	r2, #1
24053bbc:	f44f 7180 	mov.w	r1, #256	@ 0x100
24053bc0:	4890      	ldr	r0, [pc, #576]	@ (24053e04 <lcd_init+0x280>)
24053bc2:	f008 facd 	bl	2405c160 <HAL_GPIO_WritePin>
	HAL_Delay(2);
24053bc6:	2002      	movs	r0, #2
24053bc8:	f002 ff66 	bl	24056a98 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
24053bcc:	2200      	movs	r2, #0
24053bce:	f44f 7180 	mov.w	r1, #256	@ 0x100
24053bd2:	488c      	ldr	r0, [pc, #560]	@ (24053e04 <lcd_init+0x280>)
24053bd4:	f008 fac4 	bl	2405c160 <HAL_GPIO_WritePin>
	HAL_Delay(2);
24053bd8:	2002      	movs	r0, #2
24053bda:	f002 ff5d 	bl	24056a98 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
24053bde:	2201      	movs	r2, #1
24053be0:	f44f 7180 	mov.w	r1, #256	@ 0x100
24053be4:	4887      	ldr	r0, [pc, #540]	@ (24053e04 <lcd_init+0x280>)
24053be6:	f008 fabb 	bl	2405c160 <HAL_GPIO_WritePin>

	HAL_Delay(10);
24053bea:	200a      	movs	r0, #10
24053bec:	f002 ff54 	bl	24056a98 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
24053bf0:	2200      	movs	r2, #0
24053bf2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
24053bf6:	4884      	ldr	r0, [pc, #528]	@ (24053e08 <lcd_init+0x284>)
24053bf8:	f008 fab2 	bl	2405c160 <HAL_GPIO_WritePin>
	HAL_Delay(45);
24053bfc:	202d      	movs	r0, #45	@ 0x2d
24053bfe:	f002 ff4b 	bl	24056a98 <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\x08\x80", 2, 100);
24053c02:	2364      	movs	r3, #100	@ 0x64
24053c04:	2202      	movs	r2, #2
24053c06:	4981      	ldr	r1, [pc, #516]	@ (24053e0c <lcd_init+0x288>)
24053c08:	6878      	ldr	r0, [r7, #4]
24053c0a:	f00f fa89 	bl	24063120 <HAL_SPI_Transmit>
	HAL_Delay(2);
24053c0e:	2002      	movs	r0, #2
24053c10:	f002 ff42 	bl	24056a98 <HAL_Delay>
	//wdog_refresh();

	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
24053c14:	2201      	movs	r2, #1
24053c16:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
24053c1a:	487b      	ldr	r0, [pc, #492]	@ (24053e08 <lcd_init+0x284>)
24053c1c:	f008 faa0 	bl	2405c160 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
24053c20:	2200      	movs	r2, #0
24053c22:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
24053c26:	4878      	ldr	r0, [pc, #480]	@ (24053e08 <lcd_init+0x284>)
24053c28:	f008 fa9a 	bl	2405c160 <HAL_GPIO_WritePin>
	HAL_Delay(2);
24053c2c:	2002      	movs	r0, #2
24053c2e:	f002 ff33 	bl	24056a98 <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\x6E\x80", 2, 100);
24053c32:	2364      	movs	r3, #100	@ 0x64
24053c34:	2202      	movs	r2, #2
24053c36:	4976      	ldr	r1, [pc, #472]	@ (24053e10 <lcd_init+0x28c>)
24053c38:	6878      	ldr	r0, [r7, #4]
24053c3a:	f00f fa71 	bl	24063120 <HAL_SPI_Transmit>
	HAL_Delay(2);
24053c3e:	2002      	movs	r0, #2
24053c40:	f002 ff2a 	bl	24056a98 <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
24053c44:	2201      	movs	r2, #1
24053c46:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
24053c4a:	486f      	ldr	r0, [pc, #444]	@ (24053e08 <lcd_init+0x284>)
24053c4c:	f008 fa88 	bl	2405c160 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
24053c50:	2200      	movs	r2, #0
24053c52:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
24053c56:	486c      	ldr	r0, [pc, #432]	@ (24053e08 <lcd_init+0x284>)
24053c58:	f008 fa82 	bl	2405c160 <HAL_GPIO_WritePin>
	HAL_Delay(2);
24053c5c:	2002      	movs	r0, #2
24053c5e:	f002 ff1b 	bl	24056a98 <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\x80\x80", 2, 100);
24053c62:	2364      	movs	r3, #100	@ 0x64
24053c64:	2202      	movs	r2, #2
24053c66:	496b      	ldr	r1, [pc, #428]	@ (24053e14 <lcd_init+0x290>)
24053c68:	6878      	ldr	r0, [r7, #4]
24053c6a:	f00f fa59 	bl	24063120 <HAL_SPI_Transmit>

	HAL_Delay(2);
24053c6e:	2002      	movs	r0, #2
24053c70:	f002 ff12 	bl	24056a98 <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
24053c74:	2201      	movs	r2, #1
24053c76:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
24053c7a:	4863      	ldr	r0, [pc, #396]	@ (24053e08 <lcd_init+0x284>)
24053c7c:	f008 fa70 	bl	2405c160 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
24053c80:	2200      	movs	r2, #0
24053c82:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
24053c86:	4860      	ldr	r0, [pc, #384]	@ (24053e08 <lcd_init+0x284>)
24053c88:	f008 fa6a 	bl	2405c160 <HAL_GPIO_WritePin>
	HAL_Delay(2);
24053c8c:	2002      	movs	r0, #2
24053c8e:	f002 ff03 	bl	24056a98 <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\x68\x00", 2, 100);
24053c92:	2364      	movs	r3, #100	@ 0x64
24053c94:	2202      	movs	r2, #2
24053c96:	4960      	ldr	r1, [pc, #384]	@ (24053e18 <lcd_init+0x294>)
24053c98:	6878      	ldr	r0, [r7, #4]
24053c9a:	f00f fa41 	bl	24063120 <HAL_SPI_Transmit>
	HAL_Delay(2);
24053c9e:	2002      	movs	r0, #2
24053ca0:	f002 fefa 	bl	24056a98 <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
24053ca4:	2201      	movs	r2, #1
24053ca6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
24053caa:	4857      	ldr	r0, [pc, #348]	@ (24053e08 <lcd_init+0x284>)
24053cac:	f008 fa58 	bl	2405c160 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
24053cb0:	2200      	movs	r2, #0
24053cb2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
24053cb6:	4854      	ldr	r0, [pc, #336]	@ (24053e08 <lcd_init+0x284>)
24053cb8:	f008 fa52 	bl	2405c160 <HAL_GPIO_WritePin>
	HAL_Delay(2);
24053cbc:	2002      	movs	r0, #2
24053cbe:	f002 feeb 	bl	24056a98 <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\xd0\x00", 2, 100);
24053cc2:	2364      	movs	r3, #100	@ 0x64
24053cc4:	2202      	movs	r2, #2
24053cc6:	4955      	ldr	r1, [pc, #340]	@ (24053e1c <lcd_init+0x298>)
24053cc8:	6878      	ldr	r0, [r7, #4]
24053cca:	f00f fa29 	bl	24063120 <HAL_SPI_Transmit>
	HAL_Delay(2);
24053cce:	2002      	movs	r0, #2
24053cd0:	f002 fee2 	bl	24056a98 <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
24053cd4:	2201      	movs	r2, #1
24053cd6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
24053cda:	484b      	ldr	r0, [pc, #300]	@ (24053e08 <lcd_init+0x284>)
24053cdc:	f008 fa40 	bl	2405c160 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
24053ce0:	2200      	movs	r2, #0
24053ce2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
24053ce6:	4848      	ldr	r0, [pc, #288]	@ (24053e08 <lcd_init+0x284>)
24053ce8:	f008 fa3a 	bl	2405c160 <HAL_GPIO_WritePin>
	HAL_Delay(2);
24053cec:	2002      	movs	r0, #2
24053cee:	f002 fed3 	bl	24056a98 <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\x1b\x00", 2, 100);
24053cf2:	2364      	movs	r3, #100	@ 0x64
24053cf4:	2202      	movs	r2, #2
24053cf6:	494a      	ldr	r1, [pc, #296]	@ (24053e20 <lcd_init+0x29c>)
24053cf8:	6878      	ldr	r0, [r7, #4]
24053cfa:	f00f fa11 	bl	24063120 <HAL_SPI_Transmit>

	HAL_Delay(2);
24053cfe:	2002      	movs	r0, #2
24053d00:	f002 feca 	bl	24056a98 <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
24053d04:	2201      	movs	r2, #1
24053d06:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
24053d0a:	483f      	ldr	r0, [pc, #252]	@ (24053e08 <lcd_init+0x284>)
24053d0c:	f008 fa28 	bl	2405c160 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
24053d10:	2200      	movs	r2, #0
24053d12:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
24053d16:	483c      	ldr	r0, [pc, #240]	@ (24053e08 <lcd_init+0x284>)
24053d18:	f008 fa22 	bl	2405c160 <HAL_GPIO_WritePin>
	HAL_Delay(2);
24053d1c:	2002      	movs	r0, #2
24053d1e:	f002 febb 	bl	24056a98 <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\xe0\x00", 2, 100);
24053d22:	2364      	movs	r3, #100	@ 0x64
24053d24:	2202      	movs	r2, #2
24053d26:	493f      	ldr	r1, [pc, #252]	@ (24053e24 <lcd_init+0x2a0>)
24053d28:	6878      	ldr	r0, [r7, #4]
24053d2a:	f00f f9f9 	bl	24063120 <HAL_SPI_Transmit>

	HAL_Delay(2);
24053d2e:	2002      	movs	r0, #2
24053d30:	f002 feb2 	bl	24056a98 <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
24053d34:	2201      	movs	r2, #1
24053d36:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
24053d3a:	4833      	ldr	r0, [pc, #204]	@ (24053e08 <lcd_init+0x284>)
24053d3c:	f008 fa10 	bl	2405c160 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
24053d40:	2200      	movs	r2, #0
24053d42:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
24053d46:	4830      	ldr	r0, [pc, #192]	@ (24053e08 <lcd_init+0x284>)
24053d48:	f008 fa0a 	bl	2405c160 <HAL_GPIO_WritePin>
	HAL_Delay(2);
24053d4c:	2002      	movs	r0, #2
24053d4e:	f002 fea3 	bl	24056a98 <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\x6a\x80", 2, 100);
24053d52:	2364      	movs	r3, #100	@ 0x64
24053d54:	2202      	movs	r2, #2
24053d56:	4934      	ldr	r1, [pc, #208]	@ (24053e28 <lcd_init+0x2a4>)
24053d58:	6878      	ldr	r0, [r7, #4]
24053d5a:	f00f f9e1 	bl	24063120 <HAL_SPI_Transmit>

	HAL_Delay(2);
24053d5e:	2002      	movs	r0, #2
24053d60:	f002 fe9a 	bl	24056a98 <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
24053d64:	2201      	movs	r2, #1
24053d66:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
24053d6a:	4827      	ldr	r0, [pc, #156]	@ (24053e08 <lcd_init+0x284>)
24053d6c:	f008 f9f8 	bl	2405c160 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
24053d70:	2200      	movs	r2, #0
24053d72:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
24053d76:	4824      	ldr	r0, [pc, #144]	@ (24053e08 <lcd_init+0x284>)
24053d78:	f008 f9f2 	bl	2405c160 <HAL_GPIO_WritePin>
	HAL_Delay(2);
24053d7c:	2002      	movs	r0, #2
24053d7e:	f002 fe8b 	bl	24056a98 <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\x80\x00", 2, 100);
24053d82:	2364      	movs	r3, #100	@ 0x64
24053d84:	2202      	movs	r2, #2
24053d86:	4929      	ldr	r1, [pc, #164]	@ (24053e2c <lcd_init+0x2a8>)
24053d88:	6878      	ldr	r0, [r7, #4]
24053d8a:	f00f f9c9 	bl	24063120 <HAL_SPI_Transmit>
	HAL_Delay(2);
24053d8e:	2002      	movs	r0, #2
24053d90:	f002 fe82 	bl	24056a98 <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
24053d94:	2201      	movs	r2, #1
24053d96:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
24053d9a:	481b      	ldr	r0, [pc, #108]	@ (24053e08 <lcd_init+0x284>)
24053d9c:	f008 f9e0 	bl	2405c160 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
24053da0:	2200      	movs	r2, #0
24053da2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
24053da6:	4818      	ldr	r0, [pc, #96]	@ (24053e08 <lcd_init+0x284>)
24053da8:	f008 f9da 	bl	2405c160 <HAL_GPIO_WritePin>
	HAL_Delay(2);
24053dac:	2002      	movs	r0, #2
24053dae:	f002 fe73 	bl	24056a98 <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\x14\x80", 2, 100);
24053db2:	2364      	movs	r3, #100	@ 0x64
24053db4:	2202      	movs	r2, #2
24053db6:	491e      	ldr	r1, [pc, #120]	@ (24053e30 <lcd_init+0x2ac>)
24053db8:	6878      	ldr	r0, [r7, #4]
24053dba:	f00f f9b1 	bl	24063120 <HAL_SPI_Transmit>
	HAL_Delay(2);
24053dbe:	2002      	movs	r0, #2
24053dc0:	f002 fe6a 	bl	24056a98 <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
24053dc4:	2201      	movs	r2, #1
24053dc6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
24053dca:	480f      	ldr	r0, [pc, #60]	@ (24053e08 <lcd_init+0x284>)
24053dcc:	f008 f9c8 	bl	2405c160 <HAL_GPIO_WritePin>
	//wdog_refresh();

	HAL_LTDC_SetAddress(ltdc, (uint32_t) &fb1, 0);
24053dd0:	4b18      	ldr	r3, [pc, #96]	@ (24053e34 <lcd_init+0x2b0>)
24053dd2:	2200      	movs	r2, #0
24053dd4:	4619      	mov	r1, r3
24053dd6:	6838      	ldr	r0, [r7, #0]
24053dd8:	f008 fbc6 	bl	2405c568 <HAL_LTDC_SetAddress>

	memset(fb1, 0, sizeof(framebuffer1));
24053ddc:	4b15      	ldr	r3, [pc, #84]	@ (24053e34 <lcd_init+0x2b0>)
24053dde:	681b      	ldr	r3, [r3, #0]
24053de0:	f44f 3216 	mov.w	r2, #153600	@ 0x25800
24053de4:	2100      	movs	r1, #0
24053de6:	4618      	mov	r0, r3
24053de8:	f010 fd14 	bl	24064814 <memset>
	memset(fb2, 0, sizeof(framebuffer1));
24053dec:	4b12      	ldr	r3, [pc, #72]	@ (24053e38 <lcd_init+0x2b4>)
24053dee:	681b      	ldr	r3, [r3, #0]
24053df0:	f44f 3216 	mov.w	r2, #153600	@ 0x25800
24053df4:	2100      	movs	r1, #0
24053df6:	4618      	mov	r0, r3
24053df8:	f010 fd0c 	bl	24064814 <memset>
}
24053dfc:	bf00      	nop
24053dfe:	3708      	adds	r7, #8
24053e00:	46bd      	mov	sp, r7
24053e02:	bd80      	pop	{r7, pc}
24053e04:	58020c00 	.word	0x58020c00
24053e08:	58020400 	.word	0x58020400
24053e0c:	24065aac 	.word	0x24065aac
24053e10:	24065ab0 	.word	0x24065ab0
24053e14:	24065ab4 	.word	0x24065ab4
24053e18:	24065ab8 	.word	0x24065ab8
24053e1c:	24065abc 	.word	0x24065abc
24053e20:	24065ac0 	.word	0x24065ac0
24053e24:	24065ac4 	.word	0x24065ac4
24053e28:	24065ac8 	.word	0x24065ac8
24053e2c:	24065acc 	.word	0x24065acc
24053e30:	24065ad0 	.word	0x24065ad0
24053e34:	2000009c 	.word	0x2000009c
24053e38:	200000a0 	.word	0x200000a0

24053e3c <HAL_LTDC_ReloadEventCallback>:

void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc) {
24053e3c:	b580      	push	{r7, lr}
24053e3e:	b082      	sub	sp, #8
24053e40:	af00      	add	r7, sp, #0
24053e42:	6078      	str	r0, [r7, #4]
	frame_counter++;
24053e44:	4b0d      	ldr	r3, [pc, #52]	@ (24053e7c <HAL_LTDC_ReloadEventCallback+0x40>)
24053e46:	681b      	ldr	r3, [r3, #0]
24053e48:	3301      	adds	r3, #1
24053e4a:	4a0c      	ldr	r2, [pc, #48]	@ (24053e7c <HAL_LTDC_ReloadEventCallback+0x40>)
24053e4c:	6013      	str	r3, [r2, #0]
	if (active_framebuffer == 0) {
24053e4e:	4b0c      	ldr	r3, [pc, #48]	@ (24053e80 <HAL_LTDC_ReloadEventCallback+0x44>)
24053e50:	681b      	ldr	r3, [r3, #0]
24053e52:	2b00      	cmp	r3, #0
24053e54:	d107      	bne.n	24053e66 <HAL_LTDC_ReloadEventCallback+0x2a>
		HAL_LTDC_SetAddress(hltdc, (uint32_t) fb2, 0);
24053e56:	4b0b      	ldr	r3, [pc, #44]	@ (24053e84 <HAL_LTDC_ReloadEventCallback+0x48>)
24053e58:	681b      	ldr	r3, [r3, #0]
24053e5a:	2200      	movs	r2, #0
24053e5c:	4619      	mov	r1, r3
24053e5e:	6878      	ldr	r0, [r7, #4]
24053e60:	f008 fb82 	bl	2405c568 <HAL_LTDC_SetAddress>
	} else {
		HAL_LTDC_SetAddress(hltdc, (uint32_t) fb1, 0);
	}
}
24053e64:	e006      	b.n	24053e74 <HAL_LTDC_ReloadEventCallback+0x38>
		HAL_LTDC_SetAddress(hltdc, (uint32_t) fb1, 0);
24053e66:	4b08      	ldr	r3, [pc, #32]	@ (24053e88 <HAL_LTDC_ReloadEventCallback+0x4c>)
24053e68:	681b      	ldr	r3, [r3, #0]
24053e6a:	2200      	movs	r2, #0
24053e6c:	4619      	mov	r1, r3
24053e6e:	6878      	ldr	r0, [r7, #4]
24053e70:	f008 fb7a 	bl	2405c568 <HAL_LTDC_SetAddress>
}
24053e74:	bf00      	nop
24053e76:	3708      	adds	r7, #8
24053e78:	46bd      	mov	sp, r7
24053e7a:	bd80      	pop	{r7, pc}
24053e7c:	20000234 	.word	0x20000234
24053e80:	20000230 	.word	0x20000230
24053e84:	200000a0 	.word	0x200000a0
24053e88:	2000009c 	.word	0x2000009c

24053e8c <lcd_swap>:

uint32_t is_lcd_swap_pending(void) {
	return (uint32_t) ((hltdc.Instance->SRCR) & (LTDC_SRCR_VBR | LTDC_SRCR_IMR));
}

void lcd_swap(void) {
24053e8c:	b580      	push	{r7, lr}
24053e8e:	af00      	add	r7, sp, #0
	HAL_LTDC_Reload(&hltdc, LTDC_RELOAD_VERTICAL_BLANKING);
24053e90:	2102      	movs	r1, #2
24053e92:	4807      	ldr	r0, [pc, #28]	@ (24053eb0 <lcd_swap+0x24>)
24053e94:	f008 fb9e 	bl	2405c5d4 <HAL_LTDC_Reload>
	active_framebuffer = active_framebuffer ? 0 : 1;
24053e98:	4b06      	ldr	r3, [pc, #24]	@ (24053eb4 <lcd_swap+0x28>)
24053e9a:	681b      	ldr	r3, [r3, #0]
24053e9c:	2b00      	cmp	r3, #0
24053e9e:	bf0c      	ite	eq
24053ea0:	2301      	moveq	r3, #1
24053ea2:	2300      	movne	r3, #0
24053ea4:	b2db      	uxtb	r3, r3
24053ea6:	461a      	mov	r2, r3
24053ea8:	4b02      	ldr	r3, [pc, #8]	@ (24053eb4 <lcd_swap+0x28>)
24053eaa:	601a      	str	r2, [r3, #0]
}
24053eac:	bf00      	nop
24053eae:	bd80      	pop	{r7, pc}
24053eb0:	20000364 	.word	0x20000364
24053eb4:	20000230 	.word	0x20000230

24053eb8 <lcd_sync>:

void lcd_sync(void) {
24053eb8:	b580      	push	{r7, lr}
24053eba:	b082      	sub	sp, #8
24053ebc:	af00      	add	r7, sp, #0
	void *active = lcd_get_active_buffer();
24053ebe:	f000 f813 	bl	24053ee8 <lcd_get_active_buffer>
24053ec2:	6078      	str	r0, [r7, #4]
	void *inactive = lcd_get_inactive_buffer();
24053ec4:	f000 f826 	bl	24053f14 <lcd_get_inactive_buffer>
24053ec8:	6038      	str	r0, [r7, #0]

	if (active != inactive) {
24053eca:	687a      	ldr	r2, [r7, #4]
24053ecc:	683b      	ldr	r3, [r7, #0]
24053ece:	429a      	cmp	r2, r3
24053ed0:	d005      	beq.n	24053ede <lcd_sync+0x26>
		memcpy(inactive, active, sizeof(framebuffer1));
24053ed2:	f44f 3216 	mov.w	r2, #153600	@ 0x25800
24053ed6:	6879      	ldr	r1, [r7, #4]
24053ed8:	6838      	ldr	r0, [r7, #0]
24053eda:	f010 fd26 	bl	2406492a <memcpy>
	}
}
24053ede:	bf00      	nop
24053ee0:	3708      	adds	r7, #8
24053ee2:	46bd      	mov	sp, r7
24053ee4:	bd80      	pop	{r7, pc}
	...

24053ee8 <lcd_get_active_buffer>:

void* lcd_get_active_buffer(void) {
24053ee8:	b480      	push	{r7}
24053eea:	af00      	add	r7, sp, #0
	return active_framebuffer ? fb2 : fb1;
24053eec:	4b06      	ldr	r3, [pc, #24]	@ (24053f08 <lcd_get_active_buffer+0x20>)
24053eee:	681b      	ldr	r3, [r3, #0]
24053ef0:	2b00      	cmp	r3, #0
24053ef2:	d002      	beq.n	24053efa <lcd_get_active_buffer+0x12>
24053ef4:	4b05      	ldr	r3, [pc, #20]	@ (24053f0c <lcd_get_active_buffer+0x24>)
24053ef6:	681b      	ldr	r3, [r3, #0]
24053ef8:	e001      	b.n	24053efe <lcd_get_active_buffer+0x16>
24053efa:	4b05      	ldr	r3, [pc, #20]	@ (24053f10 <lcd_get_active_buffer+0x28>)
24053efc:	681b      	ldr	r3, [r3, #0]
}
24053efe:	4618      	mov	r0, r3
24053f00:	46bd      	mov	sp, r7
24053f02:	f85d 7b04 	ldr.w	r7, [sp], #4
24053f06:	4770      	bx	lr
24053f08:	20000230 	.word	0x20000230
24053f0c:	200000a0 	.word	0x200000a0
24053f10:	2000009c 	.word	0x2000009c

24053f14 <lcd_get_inactive_buffer>:

void* lcd_get_inactive_buffer(void) {
24053f14:	b480      	push	{r7}
24053f16:	af00      	add	r7, sp, #0
	return active_framebuffer ? fb1 : fb2;
24053f18:	4b06      	ldr	r3, [pc, #24]	@ (24053f34 <lcd_get_inactive_buffer+0x20>)
24053f1a:	681b      	ldr	r3, [r3, #0]
24053f1c:	2b00      	cmp	r3, #0
24053f1e:	d002      	beq.n	24053f26 <lcd_get_inactive_buffer+0x12>
24053f20:	4b05      	ldr	r3, [pc, #20]	@ (24053f38 <lcd_get_inactive_buffer+0x24>)
24053f22:	681b      	ldr	r3, [r3, #0]
24053f24:	e001      	b.n	24053f2a <lcd_get_inactive_buffer+0x16>
24053f26:	4b05      	ldr	r3, [pc, #20]	@ (24053f3c <lcd_get_inactive_buffer+0x28>)
24053f28:	681b      	ldr	r3, [r3, #0]
}
24053f2a:	4618      	mov	r0, r3
24053f2c:	46bd      	mov	sp, r7
24053f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
24053f32:	4770      	bx	lr
24053f34:	20000230 	.word	0x20000230
24053f38:	2000009c 	.word	0x2000009c
24053f3c:	200000a0 	.word	0x200000a0

24053f40 <lcd_wait_for_vblank>:
void lcd_set_buffers(uint16_t *buf1, uint16_t *buf2) {
	fb1 = buf1;
	fb2 = buf2;
}

void lcd_wait_for_vblank(void) {
24053f40:	b480      	push	{r7}
24053f42:	b083      	sub	sp, #12
24053f44:	af00      	add	r7, sp, #0
	uint32_t old_counter = frame_counter;
24053f46:	4b08      	ldr	r3, [pc, #32]	@ (24053f68 <lcd_wait_for_vblank+0x28>)
24053f48:	681b      	ldr	r3, [r3, #0]
24053f4a:	607b      	str	r3, [r7, #4]
	while (old_counter == frame_counter) {
24053f4c:	e000      	b.n	24053f50 <lcd_wait_for_vblank+0x10>
		__asm("nop");
24053f4e:	bf00      	nop
	while (old_counter == frame_counter) {
24053f50:	4b05      	ldr	r3, [pc, #20]	@ (24053f68 <lcd_wait_for_vblank+0x28>)
24053f52:	681b      	ldr	r3, [r3, #0]
24053f54:	687a      	ldr	r2, [r7, #4]
24053f56:	429a      	cmp	r2, r3
24053f58:	d0f9      	beq.n	24053f4e <lcd_wait_for_vblank+0xe>
	}
}
24053f5a:	bf00      	nop
24053f5c:	bf00      	nop
24053f5e:	370c      	adds	r7, #12
24053f60:	46bd      	mov	sp, r7
24053f62:	f85d 7b04 	ldr.w	r7, [sp], #4
24053f66:	4770      	bx	lr
24053f68:	20000234 	.word	0x20000234

24053f6c <about_menu_init>:

static int ticks = 0;
static int action_delay = 0;
int in_about_menu = 1;

void about_menu_init() {
24053f6c:	b580      	push	{r7, lr}
24053f6e:	af00      	add	r7, sp, #0
	in_about_menu = 1;
24053f70:	4b0b      	ldr	r3, [pc, #44]	@ (24053fa0 <about_menu_init+0x34>)
24053f72:	2201      	movs	r2, #1
24053f74:	601a      	str	r2, [r3, #0]
	LCD_SetTextColor(LCD_COLOR_WHITE);
24053f76:	f64f 70ff 	movw	r0, #65535	@ 0xffff
24053f7a:	f7fd f911 	bl	240511a0 <LCD_SetTextColor>
	LCD_SetFont(&Font24);
24053f7e:	4809      	ldr	r0, [pc, #36]	@ (24053fa4 <about_menu_init+0x38>)
24053f80:	f7fd f92e 	bl	240511e0 <LCD_SetFont>
	LCD_SetFontScale(1);
24053f84:	2001      	movs	r0, #1
24053f86:	f7fd f93b 	bl	24051200 <LCD_SetFontScale>
	while (in_about_menu) {
24053f8a:	e001      	b.n	24053f90 <about_menu_init+0x24>
		about_menu_loop();
24053f8c:	f000 f80c 	bl	24053fa8 <about_menu_loop>
	while (in_about_menu) {
24053f90:	4b03      	ldr	r3, [pc, #12]	@ (24053fa0 <about_menu_init+0x34>)
24053f92:	681b      	ldr	r3, [r3, #0]
24053f94:	2b00      	cmp	r3, #0
24053f96:	d1f9      	bne.n	24053f8c <about_menu_init+0x20>
	}
	//main_menu_init();
}
24053f98:	bf00      	nop
24053f9a:	bf00      	nop
24053f9c:	bd80      	pop	{r7, pc}
24053f9e:	bf00      	nop
24053fa0:	200000a4 	.word	0x200000a4
24053fa4:	20000018 	.word	0x20000018

24053fa8 <about_menu_loop>:
static void about_menu_loop() {
24053fa8:	b580      	push	{r7, lr}
24053faa:	b082      	sub	sp, #8
24053fac:	af00      	add	r7, sp, #0
	uint16_t *fb = lcd_get_active_buffer();
24053fae:	f7ff ff9b 	bl	24053ee8 <lcd_get_active_buffer>
24053fb2:	6078      	str	r0, [r7, #4]
	draw_background(fb);
24053fb4:	6878      	ldr	r0, [r7, #4]
24053fb6:	f000 f863 	bl	24054080 <draw_background>

	process_input();
24053fba:	f000 f80b 	bl	24053fd4 <process_input>
	update();
24053fbe:	f000 f851 	bl	24054064 <update>

	lcd_swap();
24053fc2:	f7ff ff63 	bl	24053e8c <lcd_swap>
	lcd_wait_for_vblank();
24053fc6:	f7ff ffbb 	bl	24053f40 <lcd_wait_for_vblank>
}
24053fca:	bf00      	nop
24053fcc:	3708      	adds	r7, #8
24053fce:	46bd      	mov	sp, r7
24053fd0:	bd80      	pop	{r7, pc}
	...

24053fd4 <process_input>:

static void process_input() {
24053fd4:	b580      	push	{r7, lr}
24053fd6:	b082      	sub	sp, #8
24053fd8:	af00      	add	r7, sp, #0
	uint32_t buttons = buttons_get();
24053fda:	f7ff f8bb 	bl	24053154 <buttons_get>
24053fde:	6078      	str	r0, [r7, #4]
	if (buttons & B_POWER) {
24053fe0:	687b      	ldr	r3, [r7, #4]
24053fe2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
24053fe6:	2b00      	cmp	r3, #0
24053fe8:	d001      	beq.n	24053fee <process_input+0x1a>
		HAL_NVIC_SystemReset();
24053fea:	f004 fdae 	bl	24058b4a <HAL_NVIC_SystemReset>
	}
	if (action_delay <= 0) {
24053fee:	4b1a      	ldr	r3, [pc, #104]	@ (24054058 <process_input+0x84>)
24053ff0:	681b      	ldr	r3, [r3, #0]
24053ff2:	2b00      	cmp	r3, #0
24053ff4:	dc08      	bgt.n	24054008 <process_input+0x34>
		if (buttons & B_B) {
24053ff6:	687b      	ldr	r3, [r7, #4]
24053ff8:	f003 0320 	and.w	r3, r3, #32
24053ffc:	2b00      	cmp	r3, #0
24053ffe:	d008      	beq.n	24054012 <process_input+0x3e>
			in_about_menu = 0;
24054000:	4b16      	ldr	r3, [pc, #88]	@ (2405405c <process_input+0x88>)
24054002:	2200      	movs	r2, #0
24054004:	601a      	str	r2, [r3, #0]
24054006:	e004      	b.n	24054012 <process_input+0x3e>
		}
	} else {
		action_delay--;
24054008:	4b13      	ldr	r3, [pc, #76]	@ (24054058 <process_input+0x84>)
2405400a:	681b      	ldr	r3, [r3, #0]
2405400c:	3b01      	subs	r3, #1
2405400e:	4a12      	ldr	r2, [pc, #72]	@ (24054058 <process_input+0x84>)
24054010:	6013      	str	r3, [r2, #0]
	}
	if (buttons & B_Up) {
24054012:	687b      	ldr	r3, [r7, #4]
24054014:	f003 0302 	and.w	r3, r3, #2
24054018:	2b00      	cmp	r3, #0
2405401a:	d002      	beq.n	24054022 <process_input+0x4e>
		secret_data1 = 1;
2405401c:	4b10      	ldr	r3, [pc, #64]	@ (24054060 <process_input+0x8c>)
2405401e:	2201      	movs	r2, #1
24054020:	601a      	str	r2, [r3, #0]
	}
	if (buttons & B_Down && secret_data1) {
24054022:	687b      	ldr	r3, [r7, #4]
24054024:	f003 0308 	and.w	r3, r3, #8
24054028:	2b00      	cmp	r3, #0
2405402a:	d008      	beq.n	2405403e <process_input+0x6a>
2405402c:	4b0c      	ldr	r3, [pc, #48]	@ (24054060 <process_input+0x8c>)
2405402e:	681b      	ldr	r3, [r3, #0]
24054030:	2b00      	cmp	r3, #0
24054032:	d004      	beq.n	2405403e <process_input+0x6a>
		secret_function();
24054034:	f000 f8de 	bl	240541f4 <secret_function>
		action_delay = 15;
24054038:	4b07      	ldr	r3, [pc, #28]	@ (24054058 <process_input+0x84>)
2405403a:	220f      	movs	r2, #15
2405403c:	601a      	str	r2, [r3, #0]
	}
	if (buttons & ~B_Up) {
2405403e:	687b      	ldr	r3, [r7, #4]
24054040:	f023 0302 	bic.w	r3, r3, #2
24054044:	2b00      	cmp	r3, #0
24054046:	d002      	beq.n	2405404e <process_input+0x7a>
		secret_data1 = 0;
24054048:	4b05      	ldr	r3, [pc, #20]	@ (24054060 <process_input+0x8c>)
2405404a:	2200      	movs	r2, #0
2405404c:	601a      	str	r2, [r3, #0]
	}
}
2405404e:	bf00      	nop
24054050:	3708      	adds	r7, #8
24054052:	46bd      	mov	sp, r7
24054054:	bd80      	pop	{r7, pc}
24054056:	bf00      	nop
24054058:	20000240 	.word	0x20000240
2405405c:	200000a4 	.word	0x200000a4
24054060:	20000238 	.word	0x20000238

24054064 <update>:

static void update() {
24054064:	b480      	push	{r7}
24054066:	af00      	add	r7, sp, #0
	ticks++;
24054068:	4b04      	ldr	r3, [pc, #16]	@ (2405407c <update+0x18>)
2405406a:	681b      	ldr	r3, [r3, #0]
2405406c:	3301      	adds	r3, #1
2405406e:	4a03      	ldr	r2, [pc, #12]	@ (2405407c <update+0x18>)
24054070:	6013      	str	r3, [r2, #0]
}
24054072:	bf00      	nop
24054074:	46bd      	mov	sp, r7
24054076:	f85d 7b04 	ldr.w	r7, [sp], #4
2405407a:	4770      	bx	lr
2405407c:	2000023c 	.word	0x2000023c

24054080 <draw_background>:

static void draw_background(uint16_t *buf) {
24054080:	b580      	push	{r7, lr}
24054082:	b084      	sub	sp, #16
24054084:	af02      	add	r7, sp, #8
24054086:	6078      	str	r0, [r7, #4]
	LCD_Clear(buf, LCD_COLOR_BLACK);
24054088:	2100      	movs	r1, #0
2405408a:	6878      	ldr	r0, [r7, #4]
2405408c:	f7fd f8f4 	bl	24051278 <LCD_Clear>

	LCD_SetFontScale(3);
24054090:	2003      	movs	r0, #3
24054092:	f7fd f8b5 	bl	24051200 <LCD_SetFontScale>
	LCD_SetTextColor(LCD_COLOR_WHITE);
24054096:	f64f 70ff 	movw	r0, #65535	@ 0xffff
2405409a:	f7fd f881 	bl	240511a0 <LCD_SetTextColor>
	LCD_SetFont(&Font24);
2405409e:	484d      	ldr	r0, [pc, #308]	@ (240541d4 <draw_background+0x154>)
240540a0:	f7fd f89e 	bl	240511e0 <LCD_SetFont>
	LCD_SetTextColor(LCD_COLOR_DARKGREEN);
240540a4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
240540a8:	f7fd f87a 	bl	240511a0 <LCD_SetTextColor>
	LCD_DisplayChar(buf, 40, 20, 'P');
240540ac:	2350      	movs	r3, #80	@ 0x50
240540ae:	2214      	movs	r2, #20
240540b0:	2128      	movs	r1, #40	@ 0x28
240540b2:	6878      	ldr	r0, [r7, #4]
240540b4:	f7fd f99c 	bl	240513f0 <LCD_DisplayChar>
	LCD_SetTextColor(LCD_COLOR_ORANGE);
240540b8:	f64f 5080 	movw	r0, #64896	@ 0xfd80
240540bc:	f7fd f870 	bl	240511a0 <LCD_SetTextColor>
	LCD_DisplayChar(buf, 80, 20, 'o');
240540c0:	236f      	movs	r3, #111	@ 0x6f
240540c2:	2214      	movs	r2, #20
240540c4:	2150      	movs	r1, #80	@ 0x50
240540c6:	6878      	ldr	r0, [r7, #4]
240540c8:	f7fd f992 	bl	240513f0 <LCD_DisplayChar>
	LCD_SetTextColor(LCD_COLOR_DARKBLUE);
240540cc:	2010      	movs	r0, #16
240540ce:	f7fd f867 	bl	240511a0 <LCD_SetTextColor>
	LCD_DisplayChar(buf, 120, 20, 'n');
240540d2:	236e      	movs	r3, #110	@ 0x6e
240540d4:	2214      	movs	r2, #20
240540d6:	2178      	movs	r1, #120	@ 0x78
240540d8:	6878      	ldr	r0, [r7, #4]
240540da:	f7fd f989 	bl	240513f0 <LCD_DisplayChar>
	LCD_SetTextColor(LCD_COLOR_RED);
240540de:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
240540e2:	f7fd f85d 	bl	240511a0 <LCD_SetTextColor>
	LCD_DisplayChar(buf, 160, 20, 'g');
240540e6:	2367      	movs	r3, #103	@ 0x67
240540e8:	2214      	movs	r2, #20
240540ea:	21a0      	movs	r1, #160	@ 0xa0
240540ec:	6878      	ldr	r0, [r7, #4]
240540ee:	f7fd f97f 	bl	240513f0 <LCD_DisplayChar>
	LCD_SetFontScale(1);
240540f2:	2001      	movs	r0, #1
240540f4:	f7fd f884 	bl	24051200 <LCD_SetFontScale>

	LCD_FillRect(buf, 220, 64, 50, 8, LCD_COLOR_WHITE);
240540f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
240540fc:	9301      	str	r3, [sp, #4]
240540fe:	2308      	movs	r3, #8
24054100:	9300      	str	r3, [sp, #0]
24054102:	2332      	movs	r3, #50	@ 0x32
24054104:	2240      	movs	r2, #64	@ 0x40
24054106:	21dc      	movs	r1, #220	@ 0xdc
24054108:	6878      	ldr	r0, [r7, #4]
2405410a:	f7fd fb9d 	bl	24051848 <LCD_FillRect>
	LCD_FillCircle(buf, 270, 40, 10, LCD_COLOR_WHITE);
2405410e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
24054112:	9300      	str	r3, [sp, #0]
24054114:	230a      	movs	r3, #10
24054116:	2228      	movs	r2, #40	@ 0x28
24054118:	f44f 7187 	mov.w	r1, #270	@ 0x10e
2405411c:	6878      	ldr	r0, [r7, #4]
2405411e:	f7fd fbc4 	bl	240518aa <LCD_FillCircle>
	LCD_DrawLine(buf, 221, 40, 245, 64, LCD_COLOR_WHITE);
24054122:	f64f 73ff 	movw	r3, #65535	@ 0xffff
24054126:	9301      	str	r3, [sp, #4]
24054128:	2340      	movs	r3, #64	@ 0x40
2405412a:	9300      	str	r3, [sp, #0]
2405412c:	23f5      	movs	r3, #245	@ 0xf5
2405412e:	2228      	movs	r2, #40	@ 0x28
24054130:	21dd      	movs	r1, #221	@ 0xdd
24054132:	6878      	ldr	r0, [r7, #4]
24054134:	f7fd f9e6 	bl	24051504 <LCD_DrawLine>
	LCD_DrawLine(buf, 269, 40, 245, 64, LCD_COLOR_WHITE);
24054138:	f64f 73ff 	movw	r3, #65535	@ 0xffff
2405413c:	9301      	str	r3, [sp, #4]
2405413e:	2340      	movs	r3, #64	@ 0x40
24054140:	9300      	str	r3, [sp, #0]
24054142:	23f5      	movs	r3, #245	@ 0xf5
24054144:	2228      	movs	r2, #40	@ 0x28
24054146:	f240 110d 	movw	r1, #269	@ 0x10d
2405414a:	6878      	ldr	r0, [r7, #4]
2405414c:	f7fd f9da 	bl	24051504 <LCD_DrawLine>

	LCD_SetTextColor(LCD_COLOR_WHITE);
24054150:	f64f 70ff 	movw	r0, #65535	@ 0xffff
24054154:	f7fd f824 	bl	240511a0 <LCD_SetTextColor>
	LCD_SetFont(&Font20);
24054158:	481f      	ldr	r0, [pc, #124]	@ (240541d8 <draw_background+0x158>)
2405415a:	f7fd f841 	bl	240511e0 <LCD_SetFont>
	LCD_DisplayStringAt(buf, 0, 110, (uint8_t*) "Developed by:\0", CENTER_MODE);
2405415e:	2301      	movs	r3, #1
24054160:	9300      	str	r3, [sp, #0]
24054162:	4b1e      	ldr	r3, [pc, #120]	@ (240541dc <draw_background+0x15c>)
24054164:	226e      	movs	r2, #110	@ 0x6e
24054166:	2100      	movs	r1, #0
24054168:	6878      	ldr	r0, [r7, #4]
2405416a:	f7fd f89f 	bl	240512ac <LCD_DisplayStringAt>
	LCD_SetFont(&Font24);
2405416e:	4819      	ldr	r0, [pc, #100]	@ (240541d4 <draw_background+0x154>)
24054170:	f7fd f836 	bl	240511e0 <LCD_SetFont>
	LCD_SetTextColor(LCD_COLOR_DARKYELLOW);
24054174:	f44f 4004 	mov.w	r0, #33792	@ 0x8400
24054178:	f7fd f812 	bl	240511a0 <LCD_SetTextColor>
	LCD_DisplayStringAt(buf, 0, 140, (uint8_t*) "Jopo12321\0", CENTER_MODE);
2405417c:	2301      	movs	r3, #1
2405417e:	9300      	str	r3, [sp, #0]
24054180:	4b17      	ldr	r3, [pc, #92]	@ (240541e0 <draw_background+0x160>)
24054182:	228c      	movs	r2, #140	@ 0x8c
24054184:	2100      	movs	r1, #0
24054186:	6878      	ldr	r0, [r7, #4]
24054188:	f7fd f890 	bl	240512ac <LCD_DisplayStringAt>
	LCD_SetTextColor(LCD_COLOR_WHITE);
2405418c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
24054190:	f7fd f806 	bl	240511a0 <LCD_SetTextColor>
	LCD_SetFont(&Font12);
24054194:	4813      	ldr	r0, [pc, #76]	@ (240541e4 <draw_background+0x164>)
24054196:	f7fd f823 	bl	240511e0 <LCD_SetFont>
	LCD_DisplayStringAt(buf, 0, 175, (uint8_t*) "jozef.kromka22@gmail.com\0",
2405419a:	2301      	movs	r3, #1
2405419c:	9300      	str	r3, [sp, #0]
2405419e:	4b12      	ldr	r3, [pc, #72]	@ (240541e8 <draw_background+0x168>)
240541a0:	22af      	movs	r2, #175	@ 0xaf
240541a2:	2100      	movs	r1, #0
240541a4:	6878      	ldr	r0, [r7, #4]
240541a6:	f7fd f881 	bl	240512ac <LCD_DisplayStringAt>
			CENTER_MODE);
	LCD_DisplayStringAt(buf, 0, 200,
240541aa:	2301      	movs	r3, #1
240541ac:	9300      	str	r3, [sp, #0]
240541ae:	4b0f      	ldr	r3, [pc, #60]	@ (240541ec <draw_background+0x16c>)
240541b0:	22c8      	movs	r2, #200	@ 0xc8
240541b2:	2100      	movs	r1, #0
240541b4:	6878      	ldr	r0, [r7, #4]
240541b6:	f7fd f879 	bl	240512ac <LCD_DisplayStringAt>
			(uint8_t*) "https://github.com/Jopo12321/\0", CENTER_MODE);
	LCD_DisplayStringAt(buf, 0, 212, (uint8_t*) "game-and-watch-pong\0",
240541ba:	2301      	movs	r3, #1
240541bc:	9300      	str	r3, [sp, #0]
240541be:	4b0c      	ldr	r3, [pc, #48]	@ (240541f0 <draw_background+0x170>)
240541c0:	22d4      	movs	r2, #212	@ 0xd4
240541c2:	2100      	movs	r1, #0
240541c4:	6878      	ldr	r0, [r7, #4]
240541c6:	f7fd f871 	bl	240512ac <LCD_DisplayStringAt>
			CENTER_MODE);
}
240541ca:	bf00      	nop
240541cc:	3708      	adds	r7, #8
240541ce:	46bd      	mov	sp, r7
240541d0:	bd80      	pop	{r7, pc}
240541d2:	bf00      	nop
240541d4:	20000018 	.word	0x20000018
240541d8:	20000010 	.word	0x20000010
240541dc:	24065ad4 	.word	0x24065ad4
240541e0:	24065ae4 	.word	0x24065ae4
240541e4:	20000000 	.word	0x20000000
240541e8:	24065af0 	.word	0x24065af0
240541ec:	24065b0c 	.word	0x24065b0c
240541f0:	24065b2c 	.word	0x24065b2c

240541f4 <secret_function>:

static void secret_function() {
240541f4:	b5b0      	push	{r4, r5, r7, lr}
240541f6:	f5ad 7d2a 	sub.w	sp, sp, #680	@ 0x2a8
240541fa:	af04      	add	r7, sp, #16
	int i, j;
	uint8_t secret_data2[] = { 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFE,
240541fc:	4bc9      	ldr	r3, [pc, #804]	@ (24054524 <secret_function+0x330>)
240541fe:	f507 7414 	add.w	r4, r7, #592	@ 0x250
24054202:	461d      	mov	r5, r3
24054204:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
24054206:	c40f      	stmia	r4!, {r0, r1, r2, r3}
24054208:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
2405420c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			0xFF, 0xFF, 0xFF, 0xFE, 0xEE, 0xEE, 0xEE, 0xEE, 0xFF, 0xFE, 0xFF,
			0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xEE, 0xEE,
			0xEE, 0xEE };
	uint8_t secret_data6[] = { 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0D,
24054210:	4bc5      	ldr	r3, [pc, #788]	@ (24054528 <secret_function+0x334>)
24054212:	f507 7404 	add.w	r4, r7, #528	@ 0x210
24054216:	461d      	mov	r5, r3
24054218:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
2405421a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
2405421c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
2405421e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
24054220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
24054222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
24054224:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
24054228:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

			0x00, 0x0D, 0xDD, 0xDD, 0x00, 0x0D, 0xDD, 0xD0, 0x00, 0xDD, 0xD0,
			0x00, 0x00, 0xDD, 0x00, 0x00 };
	Sprite secret_data3;
	Sprite secret_data7;
	uint16_t x[] = { 304, 288, 288, 0, 96, 192, 192, 96, 144, 288, 144, 0, 144,
2405422c:	4bbf      	ldr	r3, [pc, #764]	@ (2405452c <secret_function+0x338>)
2405422e:	f507 74e8 	add.w	r4, r7, #464	@ 0x1d0
24054232:	461d      	mov	r5, r3
24054234:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
24054236:	c40f      	stmia	r4!, {r0, r1, r2, r3}
24054238:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
2405423c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			288, 144, 0 };
	uint16_t y[] = { 224, 0, 208, 208, 104, 104, 104, 104, 0, 104, 208, 104, 0,
24054240:	4bbb      	ldr	r3, [pc, #748]	@ (24054530 <secret_function+0x33c>)
24054242:	f507 74d8 	add.w	r4, r7, #432	@ 0x1b0
24054246:	461d      	mov	r5, r3
24054248:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
2405424a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
2405424c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
24054250:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			104, 208, 104 };
	int8_t x_speed[] =
24054254:	4bb7      	ldr	r3, [pc, #732]	@ (24054534 <secret_function+0x340>)
24054256:	f507 74d0 	add.w	r4, r7, #416	@ 0x1a0
2405425a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
2405425c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{ 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, 1, 1 };
	int8_t y_speed[] =
24054260:	f507 7326 	add.w	r3, r7, #664	@ 0x298
24054264:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
24054268:	4ab3      	ldr	r2, [pc, #716]	@ (24054538 <secret_function+0x344>)
2405426a:	461c      	mov	r4, r3
2405426c:	4613      	mov	r3, r2
2405426e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
24054270:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{ 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, 1 };
	int secret_data8 = 16;
24054274:	2310      	movs	r3, #16
24054276:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
	uint16_t secret_data9[100];
	uint16_t secret_dataA[100];
	for (i = 0; i < 100; ++i) {
2405427a:	2300      	movs	r3, #0
2405427c:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
24054280:	e033      	b.n	240542ea <secret_function+0xf6>
		secret_data9[i] = randint(0, 319);
24054282:	f010 f81f 	bl	240642c4 <rand>
24054286:	4602      	mov	r2, r0
24054288:	4bac      	ldr	r3, [pc, #688]	@ (2405453c <secret_function+0x348>)
2405428a:	fb83 1302 	smull	r1, r3, r3, r2
2405428e:	11d9      	asrs	r1, r3, #7
24054290:	17d3      	asrs	r3, r2, #31
24054292:	1ac9      	subs	r1, r1, r3
24054294:	460b      	mov	r3, r1
24054296:	009b      	lsls	r3, r3, #2
24054298:	440b      	add	r3, r1
2405429a:	019b      	lsls	r3, r3, #6
2405429c:	1ad1      	subs	r1, r2, r3
2405429e:	b289      	uxth	r1, r1
240542a0:	f507 7326 	add.w	r3, r7, #664	@ 0x298
240542a4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
240542a8:	f8d7 2294 	ldr.w	r2, [r7, #660]	@ 0x294
240542ac:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		secret_dataA[i] = randint(0, 239);
240542b0:	f010 f808 	bl	240642c4 <rand>
240542b4:	4602      	mov	r2, r0
240542b6:	4ba2      	ldr	r3, [pc, #648]	@ (24054540 <secret_function+0x34c>)
240542b8:	fb83 1302 	smull	r1, r3, r3, r2
240542bc:	4413      	add	r3, r2
240542be:	11d9      	asrs	r1, r3, #7
240542c0:	17d3      	asrs	r3, r2, #31
240542c2:	1ac9      	subs	r1, r1, r3
240542c4:	460b      	mov	r3, r1
240542c6:	011b      	lsls	r3, r3, #4
240542c8:	1a5b      	subs	r3, r3, r1
240542ca:	011b      	lsls	r3, r3, #4
240542cc:	1ad1      	subs	r1, r2, r3
240542ce:	b289      	uxth	r1, r1
240542d0:	f507 7326 	add.w	r3, r7, #664	@ 0x298
240542d4:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
240542d8:	f8d7 2294 	ldr.w	r2, [r7, #660]	@ 0x294
240542dc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (i = 0; i < 100; ++i) {
240542e0:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
240542e4:	3301      	adds	r3, #1
240542e6:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
240542ea:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
240542ee:	2b63      	cmp	r3, #99	@ 0x63
240542f0:	ddc7      	ble.n	24054282 <secret_function+0x8e>
	}
	uint16_t max_x = 304;
240542f2:	f44f 7398 	mov.w	r3, #304	@ 0x130
240542f6:	f8a7 328e 	strh.w	r3, [r7, #654]	@ 0x28e
	uint16_t min_x = 0;
240542fa:	2300      	movs	r3, #0
240542fc:	f8a7 328c 	strh.w	r3, [r7, #652]	@ 0x28c
	uint16_t max_y = 224;
24054300:	23e0      	movs	r3, #224	@ 0xe0
24054302:	f8a7 328a 	strh.w	r3, [r7, #650]	@ 0x28a
	uint16_t min_y = 0;
24054306:	2300      	movs	r3, #0
24054308:	f8a7 3288 	strh.w	r3, [r7, #648]	@ 0x288
	uint8_t delay = 30;
2405430c:	231e      	movs	r3, #30
2405430e:	f887 3287 	strb.w	r3, [r7, #647]	@ 0x287
	uint8_t dir = 0;
24054312:	2300      	movs	r3, #0
24054314:	f887 3286 	strb.w	r3, [r7, #646]	@ 0x286
	init_sprite(&secret_data3, x[0], y[0], 8, 8, SPRITE_SHOW | 0x01, pallete,
24054318:	f8b7 11d0 	ldrh.w	r1, [r7, #464]	@ 0x1d0
2405431c:	f8b7 21b0 	ldrh.w	r2, [r7, #432]	@ 0x1b0
24054320:	f507 7000 	add.w	r0, r7, #512	@ 0x200
24054324:	f507 7314 	add.w	r3, r7, #592	@ 0x250
24054328:	9303      	str	r3, [sp, #12]
2405432a:	4b86      	ldr	r3, [pc, #536]	@ (24054544 <secret_function+0x350>)
2405432c:	9302      	str	r3, [sp, #8]
2405432e:	2311      	movs	r3, #17
24054330:	9301      	str	r3, [sp, #4]
24054332:	2308      	movs	r3, #8
24054334:	9300      	str	r3, [sp, #0]
24054336:	2308      	movs	r3, #8
24054338:	f7fd fc46 	bl	24051bc8 <init_sprite>
			secret_data2);
	init_sprite(&secret_data7, x[1], y[1], 8, 16, SPRITE_SHOW | 0x02, pallete,
2405433c:	f8b7 11d2 	ldrh.w	r1, [r7, #466]	@ 0x1d2
24054340:	f8b7 21b2 	ldrh.w	r2, [r7, #434]	@ 0x1b2
24054344:	f507 70f8 	add.w	r0, r7, #496	@ 0x1f0
24054348:	f507 7304 	add.w	r3, r7, #528	@ 0x210
2405434c:	9303      	str	r3, [sp, #12]
2405434e:	4b7d      	ldr	r3, [pc, #500]	@ (24054544 <secret_function+0x350>)
24054350:	9302      	str	r3, [sp, #8]
24054352:	2312      	movs	r3, #18
24054354:	9301      	str	r3, [sp, #4]
24054356:	2310      	movs	r3, #16
24054358:	9300      	str	r3, [sp, #0]
2405435a:	2308      	movs	r3, #8
2405435c:	f7fd fc34 	bl	24051bc8 <init_sprite>
			secret_data6);
	int secret_data4 = 1;
24054360:	2301      	movs	r3, #1
24054362:	f8c7 3280 	str.w	r3, [r7, #640]	@ 0x280
	int secret_data5 = 1;
24054366:	2301      	movs	r3, #1
24054368:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
	while (secret_data4) {
2405436c:	e227      	b.n	240547be <secret_function+0x5ca>
		uint16_t *fb = lcd_get_active_buffer();
2405436e:	f7ff fdbb 	bl	24053ee8 <lcd_get_active_buffer>
24054372:	f8c7 0274 	str.w	r0, [r7, #628]	@ 0x274

		if (secret_data5) {
24054376:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
2405437a:	2b00      	cmp	r3, #0
2405437c:	f000 80c4 	beq.w	24054508 <secret_function+0x314>
			secret_data3.x = x[0];
24054380:	f8b7 31d0 	ldrh.w	r3, [r7, #464]	@ 0x1d0
24054384:	f8a7 3200 	strh.w	r3, [r7, #512]	@ 0x200
			secret_data3.y = y[0];
24054388:	f8b7 31b0 	ldrh.w	r3, [r7, #432]	@ 0x1b0
2405438c:	f8a7 3202 	strh.w	r3, [r7, #514]	@ 0x202
			render_sprite(fb, secret_data3);
24054390:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
24054394:	9300      	str	r3, [sp, #0]
24054396:	f507 7300 	add.w	r3, r7, #512	@ 0x200
2405439a:	cb0e      	ldmia	r3, {r1, r2, r3}
2405439c:	f8d7 0274 	ldr.w	r0, [r7, #628]	@ 0x274
240543a0:	f7fd fc55 	bl	24051c4e <render_sprite>
			secret_data3.x = x[0] + 8;
240543a4:	f8b7 31d0 	ldrh.w	r3, [r7, #464]	@ 0x1d0
240543a8:	3308      	adds	r3, #8
240543aa:	b29b      	uxth	r3, r3
240543ac:	f8a7 3200 	strh.w	r3, [r7, #512]	@ 0x200
			render_sprite(fb, secret_data3);
240543b0:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
240543b4:	9300      	str	r3, [sp, #0]
240543b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
240543ba:	cb0e      	ldmia	r3, {r1, r2, r3}
240543bc:	f8d7 0274 	ldr.w	r0, [r7, #628]	@ 0x274
240543c0:	f7fd fc45 	bl	24051c4e <render_sprite>
			secret_data3.y = y[0] + 8;
240543c4:	f8b7 31b0 	ldrh.w	r3, [r7, #432]	@ 0x1b0
240543c8:	3308      	adds	r3, #8
240543ca:	b29b      	uxth	r3, r3
240543cc:	f8a7 3202 	strh.w	r3, [r7, #514]	@ 0x202
			render_sprite(fb, secret_data3);
240543d0:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
240543d4:	9300      	str	r3, [sp, #0]
240543d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
240543da:	cb0e      	ldmia	r3, {r1, r2, r3}
240543dc:	f8d7 0274 	ldr.w	r0, [r7, #628]	@ 0x274
240543e0:	f7fd fc35 	bl	24051c4e <render_sprite>
			secret_data3.x = x[0];
240543e4:	f8b7 31d0 	ldrh.w	r3, [r7, #464]	@ 0x1d0
240543e8:	f8a7 3200 	strh.w	r3, [r7, #512]	@ 0x200
			render_sprite(fb, secret_data3);
240543ec:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
240543f0:	9300      	str	r3, [sp, #0]
240543f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
240543f6:	cb0e      	ldmia	r3, {r1, r2, r3}
240543f8:	f8d7 0274 	ldr.w	r0, [r7, #628]	@ 0x274
240543fc:	f7fd fc27 	bl	24051c4e <render_sprite>
			if (x[0] == 112 && y[0] == 112) {
24054400:	f8b7 31d0 	ldrh.w	r3, [r7, #464]	@ 0x1d0
24054404:	2b70      	cmp	r3, #112	@ 0x70
24054406:	d112      	bne.n	2405442e <secret_function+0x23a>
24054408:	f8b7 31b0 	ldrh.w	r3, [r7, #432]	@ 0x1b0
2405440c:	2b70      	cmp	r3, #112	@ 0x70
2405440e:	d10e      	bne.n	2405442e <secret_function+0x23a>
				secret_data5 = 0;
24054410:	2300      	movs	r3, #0
24054412:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
				delay = 30;
24054416:	231e      	movs	r3, #30
24054418:	f887 3287 	strb.w	r3, [r7, #647]	@ 0x287
				x[0] = 0;
2405441c:	2300      	movs	r3, #0
2405441e:	f8a7 31d0 	strh.w	r3, [r7, #464]	@ 0x1d0
				y[0] = 0;
24054422:	2300      	movs	r3, #0
24054424:	f8a7 31b0 	strh.w	r3, [r7, #432]	@ 0x1b0
				dir = 5;
24054428:	2305      	movs	r3, #5
2405442a:	f887 3286 	strb.w	r3, [r7, #646]	@ 0x286
			}
			switch (dir) {
2405442e:	f897 3286 	ldrb.w	r3, [r7, #646]	@ 0x286
24054432:	2b03      	cmp	r3, #3
24054434:	d865      	bhi.n	24054502 <secret_function+0x30e>
24054436:	a201      	add	r2, pc, #4	@ (adr r2, 2405443c <secret_function+0x248>)
24054438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2405443c:	2405444d 	.word	0x2405444d
24054440:	24054477 	.word	0x24054477
24054444:	240544a1 	.word	0x240544a1
24054448:	240544cb 	.word	0x240544cb
			case 0:
				x[0] = x[0] - 16;
2405444c:	f8b7 31d0 	ldrh.w	r3, [r7, #464]	@ 0x1d0
24054450:	3b10      	subs	r3, #16
24054452:	b29b      	uxth	r3, r3
24054454:	f8a7 31d0 	strh.w	r3, [r7, #464]	@ 0x1d0
				if (x[0] == min_x) {
24054458:	f8b7 31d0 	ldrh.w	r3, [r7, #464]	@ 0x1d0
2405445c:	f8b7 228c 	ldrh.w	r2, [r7, #652]	@ 0x28c
24054460:	429a      	cmp	r2, r3
24054462:	d147      	bne.n	240544f4 <secret_function+0x300>
					dir = 1;
24054464:	2301      	movs	r3, #1
24054466:	f887 3286 	strb.w	r3, [r7, #646]	@ 0x286
					max_y = max_y - 16;
2405446a:	f8b7 328a 	ldrh.w	r3, [r7, #650]	@ 0x28a
2405446e:	3b10      	subs	r3, #16
24054470:	f8a7 328a 	strh.w	r3, [r7, #650]	@ 0x28a
				}
				break;
24054474:	e03e      	b.n	240544f4 <secret_function+0x300>
			case 1:
				y[0] = y[0] - 16;
24054476:	f8b7 31b0 	ldrh.w	r3, [r7, #432]	@ 0x1b0
2405447a:	3b10      	subs	r3, #16
2405447c:	b29b      	uxth	r3, r3
2405447e:	f8a7 31b0 	strh.w	r3, [r7, #432]	@ 0x1b0
				if (y[0] == min_y) {
24054482:	f8b7 31b0 	ldrh.w	r3, [r7, #432]	@ 0x1b0
24054486:	f8b7 2288 	ldrh.w	r2, [r7, #648]	@ 0x288
2405448a:	429a      	cmp	r2, r3
2405448c:	d134      	bne.n	240544f8 <secret_function+0x304>
					dir = 2;
2405448e:	2302      	movs	r3, #2
24054490:	f887 3286 	strb.w	r3, [r7, #646]	@ 0x286
					min_x = min_x + 16;
24054494:	f8b7 328c 	ldrh.w	r3, [r7, #652]	@ 0x28c
24054498:	3310      	adds	r3, #16
2405449a:	f8a7 328c 	strh.w	r3, [r7, #652]	@ 0x28c
				}
				break;
2405449e:	e02b      	b.n	240544f8 <secret_function+0x304>
			case 2:
				x[0] = x[0] + 16;
240544a0:	f8b7 31d0 	ldrh.w	r3, [r7, #464]	@ 0x1d0
240544a4:	3310      	adds	r3, #16
240544a6:	b29b      	uxth	r3, r3
240544a8:	f8a7 31d0 	strh.w	r3, [r7, #464]	@ 0x1d0
				if (x[0] == max_x) {
240544ac:	f8b7 31d0 	ldrh.w	r3, [r7, #464]	@ 0x1d0
240544b0:	f8b7 228e 	ldrh.w	r2, [r7, #654]	@ 0x28e
240544b4:	429a      	cmp	r2, r3
240544b6:	d121      	bne.n	240544fc <secret_function+0x308>
					dir = 3;
240544b8:	2303      	movs	r3, #3
240544ba:	f887 3286 	strb.w	r3, [r7, #646]	@ 0x286
					min_y = min_y + 16;
240544be:	f8b7 3288 	ldrh.w	r3, [r7, #648]	@ 0x288
240544c2:	3310      	adds	r3, #16
240544c4:	f8a7 3288 	strh.w	r3, [r7, #648]	@ 0x288
				}
				break;
240544c8:	e018      	b.n	240544fc <secret_function+0x308>
			case 3:
				y[0] = y[0] + 16;
240544ca:	f8b7 31b0 	ldrh.w	r3, [r7, #432]	@ 0x1b0
240544ce:	3310      	adds	r3, #16
240544d0:	b29b      	uxth	r3, r3
240544d2:	f8a7 31b0 	strh.w	r3, [r7, #432]	@ 0x1b0
				if (y[0] == max_y) {
240544d6:	f8b7 31b0 	ldrh.w	r3, [r7, #432]	@ 0x1b0
240544da:	f8b7 228a 	ldrh.w	r2, [r7, #650]	@ 0x28a
240544de:	429a      	cmp	r2, r3
240544e0:	d10e      	bne.n	24054500 <secret_function+0x30c>
					dir = 0;
240544e2:	2300      	movs	r3, #0
240544e4:	f887 3286 	strb.w	r3, [r7, #646]	@ 0x286
					max_x = max_x - 16;
240544e8:	f8b7 328e 	ldrh.w	r3, [r7, #654]	@ 0x28e
240544ec:	3b10      	subs	r3, #16
240544ee:	f8a7 328e 	strh.w	r3, [r7, #654]	@ 0x28e
				}
				break;
240544f2:	e005      	b.n	24054500 <secret_function+0x30c>
				break;
240544f4:	bf00      	nop
240544f6:	e004      	b.n	24054502 <secret_function+0x30e>
				break;
240544f8:	bf00      	nop
240544fa:	e002      	b.n	24054502 <secret_function+0x30e>
				break;
240544fc:	bf00      	nop
240544fe:	e000      	b.n	24054502 <secret_function+0x30e>
				break;
24054500:	bf00      	nop
			}
			lcd_sync();
24054502:	f7ff fcd9 	bl	24053eb8 <lcd_sync>
24054506:	e137      	b.n	24054778 <secret_function+0x584>
		} else {
			if (delay <= 0) {
24054508:	f897 3287 	ldrb.w	r3, [r7, #647]	@ 0x287
2405450c:	2b00      	cmp	r3, #0
2405450e:	f040 8133 	bne.w	24054778 <secret_function+0x584>
				LCD_Clear(fb, LCD_COLOR_BLACK);
24054512:	2100      	movs	r1, #0
24054514:	f8d7 0274 	ldr.w	r0, [r7, #628]	@ 0x274
24054518:	f7fc feae 	bl	24051278 <LCD_Clear>
				for (i = 0; i < 100; ++i) {
2405451c:	2300      	movs	r3, #0
2405451e:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
24054522:	e02c      	b.n	2405457e <secret_function+0x38a>
24054524:	24065b60 	.word	0x24065b60
24054528:	24065b80 	.word	0x24065b80
2405452c:	24065bc0 	.word	0x24065bc0
24054530:	24065be0 	.word	0x24065be0
24054534:	24065c00 	.word	0x24065c00
24054538:	24065c10 	.word	0x24065c10
2405453c:	66666667 	.word	0x66666667
24054540:	88888889 	.word	0x88888889
24054544:	20000020 	.word	0x20000020
					LCD_DrawPixel(fb, secret_data9[i], secret_dataA[i],
24054548:	f507 7326 	add.w	r3, r7, #664	@ 0x298
2405454c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
24054550:	f8d7 2294 	ldr.w	r2, [r7, #660]	@ 0x294
24054554:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
24054558:	f507 7326 	add.w	r3, r7, #664	@ 0x298
2405455c:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
24054560:	f8d7 2294 	ldr.w	r2, [r7, #660]	@ 0x294
24054564:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
24054568:	f64f 73ff 	movw	r3, #65535	@ 0xffff
2405456c:	f8d7 0274 	ldr.w	r0, [r7, #628]	@ 0x274
24054570:	f7fc fe56 	bl	24051220 <LCD_DrawPixel>
				for (i = 0; i < 100; ++i) {
24054574:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
24054578:	3301      	adds	r3, #1
2405457a:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
2405457e:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
24054582:	2b63      	cmp	r3, #99	@ 0x63
24054584:	dde0      	ble.n	24054548 <secret_function+0x354>
							LCD_COLOR_WHITE);
				}
				LCD_SetBackColor(LCD_COLOR_BLACK);
24054586:	2000      	movs	r0, #0
24054588:	f7fc fe1a 	bl	240511c0 <LCD_SetBackColor>
				LCD_SetTextColor(LCD_COLOR_ORANGE);
2405458c:	f64f 5080 	movw	r0, #64896	@ 0xfd80
24054590:	f7fc fe06 	bl	240511a0 <LCD_SetTextColor>
				LCD_SetFont(&Font24);
24054594:	488f      	ldr	r0, [pc, #572]	@ (240547d4 <secret_function+0x5e0>)
24054596:	f7fc fe23 	bl	240511e0 <LCD_SetFont>
				LCD_DisplayStringAt(fb, 0, 96, (uint8_t*) "Thank you for\0",
2405459a:	2301      	movs	r3, #1
2405459c:	9300      	str	r3, [sp, #0]
2405459e:	4b8e      	ldr	r3, [pc, #568]	@ (240547d8 <secret_function+0x5e4>)
240545a0:	2260      	movs	r2, #96	@ 0x60
240545a2:	2100      	movs	r1, #0
240545a4:	f8d7 0274 	ldr.w	r0, [r7, #628]	@ 0x274
240545a8:	f7fc fe80 	bl	240512ac <LCD_DisplayStringAt>
						CENTER_MODE);
				LCD_DisplayStringAt(fb, 0, 120, (uint8_t*) "playing!\0",
240545ac:	2301      	movs	r3, #1
240545ae:	9300      	str	r3, [sp, #0]
240545b0:	4b8a      	ldr	r3, [pc, #552]	@ (240547dc <secret_function+0x5e8>)
240545b2:	2278      	movs	r2, #120	@ 0x78
240545b4:	2100      	movs	r1, #0
240545b6:	f8d7 0274 	ldr.w	r0, [r7, #628]	@ 0x274
240545ba:	f7fc fe77 	bl	240512ac <LCD_DisplayStringAt>
						CENTER_MODE);
				for (i = 0; i < secret_data8; ++i) {
240545be:	2300      	movs	r3, #0
240545c0:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
240545c4:	e0d1      	b.n	2405476a <secret_function+0x576>
					set_sprite_flip_x(&secret_data7, 0);
240545c6:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
240545ca:	2100      	movs	r1, #0
240545cc:	4618      	mov	r0, r3
240545ce:	f7fd fb23 	bl	24051c18 <set_sprite_flip_x>
					secret_data7.x = x[i];
240545d2:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
240545d6:	005b      	lsls	r3, r3, #1
240545d8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
240545dc:	443b      	add	r3, r7
240545de:	f833 3cc8 	ldrh.w	r3, [r3, #-200]
240545e2:	f8a7 31f0 	strh.w	r3, [r7, #496]	@ 0x1f0
					secret_data7.y = y[i];
240545e6:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
240545ea:	005b      	lsls	r3, r3, #1
240545ec:	f503 7326 	add.w	r3, r3, #664	@ 0x298
240545f0:	443b      	add	r3, r7
240545f2:	f833 3ce8 	ldrh.w	r3, [r3, #-232]
240545f6:	f8a7 31f2 	strh.w	r3, [r7, #498]	@ 0x1f2
					render_sprite(fb, secret_data7);
240545fa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
240545fe:	9300      	str	r3, [sp, #0]
24054600:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
24054604:	cb0e      	ldmia	r3, {r1, r2, r3}
24054606:	f8d7 0274 	ldr.w	r0, [r7, #628]	@ 0x274
2405460a:	f7fd fb20 	bl	24051c4e <render_sprite>
					secret_data7.x = x[i] + 16;
2405460e:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
24054612:	005b      	lsls	r3, r3, #1
24054614:	f503 7326 	add.w	r3, r3, #664	@ 0x298
24054618:	443b      	add	r3, r7
2405461a:	f833 3cc8 	ldrh.w	r3, [r3, #-200]
2405461e:	3310      	adds	r3, #16
24054620:	b29b      	uxth	r3, r3
24054622:	f8a7 31f0 	strh.w	r3, [r7, #496]	@ 0x1f0
					set_sprite_flip_x(&secret_data7, 1);
24054626:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
2405462a:	2101      	movs	r1, #1
2405462c:	4618      	mov	r0, r3
2405462e:	f7fd faf3 	bl	24051c18 <set_sprite_flip_x>
					render_sprite(fb, secret_data7);
24054632:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
24054636:	9300      	str	r3, [sp, #0]
24054638:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
2405463c:	cb0e      	ldmia	r3, {r1, r2, r3}
2405463e:	f8d7 0274 	ldr.w	r0, [r7, #628]	@ 0x274
24054642:	f7fd fb04 	bl	24051c4e <render_sprite>
					for (j = 0; j < 3; ++j) {
24054646:	2300      	movs	r3, #0
24054648:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
2405464c:	e083      	b.n	24054756 <secret_function+0x562>
						if (y[i] == 0) {
2405464e:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
24054652:	005b      	lsls	r3, r3, #1
24054654:	f503 7326 	add.w	r3, r3, #664	@ 0x298
24054658:	443b      	add	r3, r7
2405465a:	f833 3ce8 	ldrh.w	r3, [r3, #-232]
2405465e:	2b00      	cmp	r3, #0
24054660:	d108      	bne.n	24054674 <secret_function+0x480>
							y_speed[i] = 1;
24054662:	f507 7326 	add.w	r3, r7, #664	@ 0x298
24054666:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
2405466a:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
2405466e:	4413      	add	r3, r2
24054670:	2201      	movs	r2, #1
24054672:	701a      	strb	r2, [r3, #0]
						}
						if (y[i] == 208) {
24054674:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
24054678:	005b      	lsls	r3, r3, #1
2405467a:	f503 7326 	add.w	r3, r3, #664	@ 0x298
2405467e:	443b      	add	r3, r7
24054680:	f833 3ce8 	ldrh.w	r3, [r3, #-232]
24054684:	2bd0      	cmp	r3, #208	@ 0xd0
24054686:	d108      	bne.n	2405469a <secret_function+0x4a6>
							y_speed[i] = -1;
24054688:	f507 7326 	add.w	r3, r7, #664	@ 0x298
2405468c:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
24054690:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
24054694:	4413      	add	r3, r2
24054696:	22ff      	movs	r2, #255	@ 0xff
24054698:	701a      	strb	r2, [r3, #0]
						}
						if (x[i] == 0) {
2405469a:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
2405469e:	005b      	lsls	r3, r3, #1
240546a0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
240546a4:	443b      	add	r3, r7
240546a6:	f833 3cc8 	ldrh.w	r3, [r3, #-200]
240546aa:	2b00      	cmp	r3, #0
240546ac:	d106      	bne.n	240546bc <secret_function+0x4c8>
							x_speed[i] = 1;
240546ae:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
240546b2:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
240546b6:	4413      	add	r3, r2
240546b8:	2201      	movs	r2, #1
240546ba:	701a      	strb	r2, [r3, #0]
						}
						if (x[i] == 288) {
240546bc:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
240546c0:	005b      	lsls	r3, r3, #1
240546c2:	f503 7326 	add.w	r3, r3, #664	@ 0x298
240546c6:	443b      	add	r3, r7
240546c8:	f833 3cc8 	ldrh.w	r3, [r3, #-200]
240546cc:	f5b3 7f90 	cmp.w	r3, #288	@ 0x120
240546d0:	d106      	bne.n	240546e0 <secret_function+0x4ec>
							x_speed[i] = -1;
240546d2:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
240546d6:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
240546da:	4413      	add	r3, r2
240546dc:	22ff      	movs	r2, #255	@ 0xff
240546de:	701a      	strb	r2, [r3, #0]
						}
						x[i] = x[i] + x_speed[i];
240546e0:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
240546e4:	005b      	lsls	r3, r3, #1
240546e6:	f503 7326 	add.w	r3, r3, #664	@ 0x298
240546ea:	443b      	add	r3, r7
240546ec:	f833 2cc8 	ldrh.w	r2, [r3, #-200]
240546f0:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
240546f4:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
240546f8:	440b      	add	r3, r1
240546fa:	f993 3000 	ldrsb.w	r3, [r3]
240546fe:	b29b      	uxth	r3, r3
24054700:	4413      	add	r3, r2
24054702:	b29a      	uxth	r2, r3
24054704:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
24054708:	005b      	lsls	r3, r3, #1
2405470a:	f503 7326 	add.w	r3, r3, #664	@ 0x298
2405470e:	443b      	add	r3, r7
24054710:	f823 2cc8 	strh.w	r2, [r3, #-200]
						y[i] = y[i] + y_speed[i];
24054714:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
24054718:	005b      	lsls	r3, r3, #1
2405471a:	f503 7326 	add.w	r3, r3, #664	@ 0x298
2405471e:	443b      	add	r3, r7
24054720:	f833 2ce8 	ldrh.w	r2, [r3, #-232]
24054724:	f507 7326 	add.w	r3, r7, #664	@ 0x298
24054728:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
2405472c:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
24054730:	440b      	add	r3, r1
24054732:	f993 3000 	ldrsb.w	r3, [r3]
24054736:	b29b      	uxth	r3, r3
24054738:	4413      	add	r3, r2
2405473a:	b29a      	uxth	r2, r3
2405473c:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
24054740:	005b      	lsls	r3, r3, #1
24054742:	f503 7326 	add.w	r3, r3, #664	@ 0x298
24054746:	443b      	add	r3, r7
24054748:	f823 2ce8 	strh.w	r2, [r3, #-232]
					for (j = 0; j < 3; ++j) {
2405474c:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
24054750:	3301      	adds	r3, #1
24054752:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
24054756:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
2405475a:	2b02      	cmp	r3, #2
2405475c:	f77f af77 	ble.w	2405464e <secret_function+0x45a>
				for (i = 0; i < secret_data8; ++i) {
24054760:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
24054764:	3301      	adds	r3, #1
24054766:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
2405476a:	f8d7 2294 	ldr.w	r2, [r7, #660]	@ 0x294
2405476e:	f8d7 3278 	ldr.w	r3, [r7, #632]	@ 0x278
24054772:	429a      	cmp	r2, r3
24054774:	f6ff af27 	blt.w	240545c6 <secret_function+0x3d2>
					}
				}
			}
		}

		uint32_t buttons = buttons_get();
24054778:	f7fe fcec 	bl	24053154 <buttons_get>
2405477c:	f8c7 0270 	str.w	r0, [r7, #624]	@ 0x270
		if (buttons & B_POWER) {
24054780:	f8d7 3270 	ldr.w	r3, [r7, #624]	@ 0x270
24054784:	f403 7300 	and.w	r3, r3, #512	@ 0x200
24054788:	2b00      	cmp	r3, #0
2405478a:	d001      	beq.n	24054790 <secret_function+0x59c>
			HAL_NVIC_SystemReset();
2405478c:	f004 f9dd 	bl	24058b4a <HAL_NVIC_SystemReset>
		}
		if (delay <= 0) {
24054790:	f897 3287 	ldrb.w	r3, [r7, #647]	@ 0x287
24054794:	2b00      	cmp	r3, #0
24054796:	d109      	bne.n	240547ac <secret_function+0x5b8>
			if (buttons & ~B_POWER) {
24054798:	f8d7 3270 	ldr.w	r3, [r7, #624]	@ 0x270
2405479c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
240547a0:	2b00      	cmp	r3, #0
240547a2:	d008      	beq.n	240547b6 <secret_function+0x5c2>
				secret_data4 = 0;
240547a4:	2300      	movs	r3, #0
240547a6:	f8c7 3280 	str.w	r3, [r7, #640]	@ 0x280
240547aa:	e004      	b.n	240547b6 <secret_function+0x5c2>
			}
		} else {
			delay--;
240547ac:	f897 3287 	ldrb.w	r3, [r7, #647]	@ 0x287
240547b0:	3b01      	subs	r3, #1
240547b2:	f887 3287 	strb.w	r3, [r7, #647]	@ 0x287
		}

		lcd_swap();
240547b6:	f7ff fb69 	bl	24053e8c <lcd_swap>
		lcd_wait_for_vblank();
240547ba:	f7ff fbc1 	bl	24053f40 <lcd_wait_for_vblank>
	while (secret_data4) {
240547be:	f8d7 3280 	ldr.w	r3, [r7, #640]	@ 0x280
240547c2:	2b00      	cmp	r3, #0
240547c4:	f47f add3 	bne.w	2405436e <secret_function+0x17a>
	}
}
240547c8:	bf00      	nop
240547ca:	bf00      	nop
240547cc:	f507 7726 	add.w	r7, r7, #664	@ 0x298
240547d0:	46bd      	mov	sp, r7
240547d2:	bdb0      	pop	{r4, r5, r7, pc}
240547d4:	20000018 	.word	0x20000018
240547d8:	24065b44 	.word	0x24065b44
240547dc:	24065b54 	.word	0x24065b54

240547e0 <main_menu_init>:
int demo_ticks = 0;

int restart_game;
int in_main_menu;

void main_menu_init() {
240547e0:	b580      	push	{r7, lr}
240547e2:	af00      	add	r7, sp, #0
	if (restart_game) {
240547e4:	4b13      	ldr	r3, [pc, #76]	@ (24054834 <main_menu_init+0x54>)
240547e6:	681b      	ldr	r3, [r3, #0]
240547e8:	2b00      	cmp	r3, #0
240547ea:	d002      	beq.n	240547f2 <main_menu_init+0x12>
		game_init();
240547ec:	f7fb fc78 	bl	240500e0 <game_init>
		return;
240547f0:	e01e      	b.n	24054830 <main_menu_init+0x50>
	}
	demo_ticks = 0;
240547f2:	4b11      	ldr	r3, [pc, #68]	@ (24054838 <main_menu_init+0x58>)
240547f4:	2200      	movs	r2, #0
240547f6:	601a      	str	r2, [r3, #0]
	in_main_menu = 1;
240547f8:	4b10      	ldr	r3, [pc, #64]	@ (2405483c <main_menu_init+0x5c>)
240547fa:	2201      	movs	r2, #1
240547fc:	601a      	str	r2, [r3, #0]
	action_delay = 20;
240547fe:	4b10      	ldr	r3, [pc, #64]	@ (24054840 <main_menu_init+0x60>)
24054800:	2214      	movs	r2, #20
24054802:	601a      	str	r2, [r3, #0]
	title_pallete_idx = 0;
24054804:	4b0f      	ldr	r3, [pc, #60]	@ (24054844 <main_menu_init+0x64>)
24054806:	2200      	movs	r2, #0
24054808:	701a      	strb	r2, [r3, #0]
	LCD_SetTextColor(LCD_COLOR_WHITE);
2405480a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
2405480e:	f7fc fcc7 	bl	240511a0 <LCD_SetTextColor>
	LCD_SetFont(&Font24);
24054812:	480d      	ldr	r0, [pc, #52]	@ (24054848 <main_menu_init+0x68>)
24054814:	f7fc fce4 	bl	240511e0 <LCD_SetFont>
	LCD_SetFontScale(1);
24054818:	2001      	movs	r0, #1
2405481a:	f7fc fcf1 	bl	24051200 <LCD_SetFontScale>
	while (in_main_menu) {
2405481e:	e001      	b.n	24054824 <main_menu_init+0x44>
		main_menu_loop();
24054820:	f000 f814 	bl	2405484c <main_menu_loop>
	while (in_main_menu) {
24054824:	4b05      	ldr	r3, [pc, #20]	@ (2405483c <main_menu_init+0x5c>)
24054826:	681b      	ldr	r3, [r3, #0]
24054828:	2b00      	cmp	r3, #0
2405482a:	d1f9      	bne.n	24054820 <main_menu_init+0x40>
	}
	menu_select();
2405482c:	f000 f9ba 	bl	24054ba4 <menu_select>
}
24054830:	bd80      	pop	{r7, pc}
24054832:	bf00      	nop
24054834:	20000258 	.word	0x20000258
24054838:	20000254 	.word	0x20000254
2405483c:	2000025c 	.word	0x2000025c
24054840:	2000024c 	.word	0x2000024c
24054844:	20000244 	.word	0x20000244
24054848:	20000018 	.word	0x20000018

2405484c <main_menu_loop>:

static void main_menu_loop() {
2405484c:	b580      	push	{r7, lr}
2405484e:	b082      	sub	sp, #8
24054850:	af00      	add	r7, sp, #0
	uint16_t *fb = lcd_get_active_buffer();
24054852:	f7ff fb49 	bl	24053ee8 <lcd_get_active_buffer>
24054856:	6078      	str	r0, [r7, #4]
	draw_background(fb);
24054858:	6878      	ldr	r0, [r7, #4]
2405485a:	f000 f80d 	bl	24054878 <draw_background>

	process_input();
2405485e:	f000 f92d 	bl	24054abc <process_input>
	update();
24054862:	f000 f97b 	bl	24054b5c <update>

	lcd_swap();
24054866:	f7ff fb11 	bl	24053e8c <lcd_swap>
	lcd_wait_for_vblank();
2405486a:	f7ff fb69 	bl	24053f40 <lcd_wait_for_vblank>
}
2405486e:	bf00      	nop
24054870:	3708      	adds	r7, #8
24054872:	46bd      	mov	sp, r7
24054874:	bd80      	pop	{r7, pc}
	...

24054878 <draw_background>:

static void draw_background(uint16_t *buf) {
24054878:	b580      	push	{r7, lr}
2405487a:	b084      	sub	sp, #16
2405487c:	af02      	add	r7, sp, #8
2405487e:	6078      	str	r0, [r7, #4]
	LCD_Clear(buf, LCD_COLOR_BLACK);
24054880:	2100      	movs	r1, #0
24054882:	6878      	ldr	r0, [r7, #4]
24054884:	f7fc fcf8 	bl	24051278 <LCD_Clear>

	if (ticks % 10 == 0) {
24054888:	4b81      	ldr	r3, [pc, #516]	@ (24054a90 <draw_background+0x218>)
2405488a:	6819      	ldr	r1, [r3, #0]
2405488c:	4b81      	ldr	r3, [pc, #516]	@ (24054a94 <draw_background+0x21c>)
2405488e:	fb83 2301 	smull	r2, r3, r3, r1
24054892:	109a      	asrs	r2, r3, #2
24054894:	17cb      	asrs	r3, r1, #31
24054896:	1ad2      	subs	r2, r2, r3
24054898:	4613      	mov	r3, r2
2405489a:	009b      	lsls	r3, r3, #2
2405489c:	4413      	add	r3, r2
2405489e:	005b      	lsls	r3, r3, #1
240548a0:	1aca      	subs	r2, r1, r3
240548a2:	2a00      	cmp	r2, #0
240548a4:	d105      	bne.n	240548b2 <draw_background+0x3a>
		title_pallete_idx--;
240548a6:	4b7c      	ldr	r3, [pc, #496]	@ (24054a98 <draw_background+0x220>)
240548a8:	781b      	ldrb	r3, [r3, #0]
240548aa:	3b01      	subs	r3, #1
240548ac:	b2da      	uxtb	r2, r3
240548ae:	4b7a      	ldr	r3, [pc, #488]	@ (24054a98 <draw_background+0x220>)
240548b0:	701a      	strb	r2, [r3, #0]
	}

	LCD_SetFontScale(3);
240548b2:	2003      	movs	r0, #3
240548b4:	f7fc fca4 	bl	24051200 <LCD_SetFontScale>
	LCD_SetFont(&Font24);
240548b8:	4878      	ldr	r0, [pc, #480]	@ (24054a9c <draw_background+0x224>)
240548ba:	f7fc fc91 	bl	240511e0 <LCD_SetFont>
	LCD_SetTextColor(title_pallete[(title_pallete_idx + 0) % 4]);
240548be:	4b76      	ldr	r3, [pc, #472]	@ (24054a98 <draw_background+0x220>)
240548c0:	781b      	ldrb	r3, [r3, #0]
240548c2:	f003 0303 	and.w	r3, r3, #3
240548c6:	4a76      	ldr	r2, [pc, #472]	@ (24054aa0 <draw_background+0x228>)
240548c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
240548cc:	4618      	mov	r0, r3
240548ce:	f7fc fc67 	bl	240511a0 <LCD_SetTextColor>
	LCD_DisplayChar(buf, 40, 20, 'P');
240548d2:	2350      	movs	r3, #80	@ 0x50
240548d4:	2214      	movs	r2, #20
240548d6:	2128      	movs	r1, #40	@ 0x28
240548d8:	6878      	ldr	r0, [r7, #4]
240548da:	f7fc fd89 	bl	240513f0 <LCD_DisplayChar>
	LCD_SetTextColor(title_pallete[(title_pallete_idx + 1) % 4]);
240548de:	4b6e      	ldr	r3, [pc, #440]	@ (24054a98 <draw_background+0x220>)
240548e0:	781b      	ldrb	r3, [r3, #0]
240548e2:	3301      	adds	r3, #1
240548e4:	425a      	negs	r2, r3
240548e6:	f003 0303 	and.w	r3, r3, #3
240548ea:	f002 0203 	and.w	r2, r2, #3
240548ee:	bf58      	it	pl
240548f0:	4253      	negpl	r3, r2
240548f2:	4a6b      	ldr	r2, [pc, #428]	@ (24054aa0 <draw_background+0x228>)
240548f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
240548f8:	4618      	mov	r0, r3
240548fa:	f7fc fc51 	bl	240511a0 <LCD_SetTextColor>
	LCD_DisplayChar(buf, 80, 20, 'o');
240548fe:	236f      	movs	r3, #111	@ 0x6f
24054900:	2214      	movs	r2, #20
24054902:	2150      	movs	r1, #80	@ 0x50
24054904:	6878      	ldr	r0, [r7, #4]
24054906:	f7fc fd73 	bl	240513f0 <LCD_DisplayChar>
	LCD_SetTextColor(title_pallete[(title_pallete_idx + 2) % 4]);
2405490a:	4b63      	ldr	r3, [pc, #396]	@ (24054a98 <draw_background+0x220>)
2405490c:	781b      	ldrb	r3, [r3, #0]
2405490e:	3302      	adds	r3, #2
24054910:	425a      	negs	r2, r3
24054912:	f003 0303 	and.w	r3, r3, #3
24054916:	f002 0203 	and.w	r2, r2, #3
2405491a:	bf58      	it	pl
2405491c:	4253      	negpl	r3, r2
2405491e:	4a60      	ldr	r2, [pc, #384]	@ (24054aa0 <draw_background+0x228>)
24054920:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
24054924:	4618      	mov	r0, r3
24054926:	f7fc fc3b 	bl	240511a0 <LCD_SetTextColor>
	LCD_DisplayChar(buf, 120, 20, 'n');
2405492a:	236e      	movs	r3, #110	@ 0x6e
2405492c:	2214      	movs	r2, #20
2405492e:	2178      	movs	r1, #120	@ 0x78
24054930:	6878      	ldr	r0, [r7, #4]
24054932:	f7fc fd5d 	bl	240513f0 <LCD_DisplayChar>
	LCD_SetTextColor(title_pallete[(title_pallete_idx + 3) % 4]);
24054936:	4b58      	ldr	r3, [pc, #352]	@ (24054a98 <draw_background+0x220>)
24054938:	781b      	ldrb	r3, [r3, #0]
2405493a:	3303      	adds	r3, #3
2405493c:	425a      	negs	r2, r3
2405493e:	f003 0303 	and.w	r3, r3, #3
24054942:	f002 0203 	and.w	r2, r2, #3
24054946:	bf58      	it	pl
24054948:	4253      	negpl	r3, r2
2405494a:	4a55      	ldr	r2, [pc, #340]	@ (24054aa0 <draw_background+0x228>)
2405494c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
24054950:	4618      	mov	r0, r3
24054952:	f7fc fc25 	bl	240511a0 <LCD_SetTextColor>
	LCD_DisplayChar(buf, 160, 20, 'g');
24054956:	2367      	movs	r3, #103	@ 0x67
24054958:	2214      	movs	r2, #20
2405495a:	21a0      	movs	r1, #160	@ 0xa0
2405495c:	6878      	ldr	r0, [r7, #4]
2405495e:	f7fc fd47 	bl	240513f0 <LCD_DisplayChar>
	LCD_SetFontScale(1);
24054962:	2001      	movs	r0, #1
24054964:	f7fc fc4c 	bl	24051200 <LCD_SetFontScale>

	LCD_FillRect(buf, 220, 64, 50, 8, LCD_COLOR_WHITE);
24054968:	f64f 73ff 	movw	r3, #65535	@ 0xffff
2405496c:	9301      	str	r3, [sp, #4]
2405496e:	2308      	movs	r3, #8
24054970:	9300      	str	r3, [sp, #0]
24054972:	2332      	movs	r3, #50	@ 0x32
24054974:	2240      	movs	r2, #64	@ 0x40
24054976:	21dc      	movs	r1, #220	@ 0xdc
24054978:	6878      	ldr	r0, [r7, #4]
2405497a:	f7fc ff65 	bl	24051848 <LCD_FillRect>
	LCD_FillCircle(buf, 270, 40, 10, LCD_COLOR_WHITE);
2405497e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
24054982:	9300      	str	r3, [sp, #0]
24054984:	230a      	movs	r3, #10
24054986:	2228      	movs	r2, #40	@ 0x28
24054988:	f44f 7187 	mov.w	r1, #270	@ 0x10e
2405498c:	6878      	ldr	r0, [r7, #4]
2405498e:	f7fc ff8c 	bl	240518aa <LCD_FillCircle>
	LCD_DrawLine(buf, 221, 40, 245, 64, LCD_COLOR_WHITE);
24054992:	f64f 73ff 	movw	r3, #65535	@ 0xffff
24054996:	9301      	str	r3, [sp, #4]
24054998:	2340      	movs	r3, #64	@ 0x40
2405499a:	9300      	str	r3, [sp, #0]
2405499c:	23f5      	movs	r3, #245	@ 0xf5
2405499e:	2228      	movs	r2, #40	@ 0x28
240549a0:	21dd      	movs	r1, #221	@ 0xdd
240549a2:	6878      	ldr	r0, [r7, #4]
240549a4:	f7fc fdae 	bl	24051504 <LCD_DrawLine>
	LCD_DrawLine(buf, 269, 40, 245, 64, LCD_COLOR_WHITE);
240549a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
240549ac:	9301      	str	r3, [sp, #4]
240549ae:	2340      	movs	r3, #64	@ 0x40
240549b0:	9300      	str	r3, [sp, #0]
240549b2:	23f5      	movs	r3, #245	@ 0xf5
240549b4:	2228      	movs	r2, #40	@ 0x28
240549b6:	f240 110d 	movw	r1, #269	@ 0x10d
240549ba:	6878      	ldr	r0, [r7, #4]
240549bc:	f7fc fda2 	bl	24051504 <LCD_DrawLine>

	if (selected_item % 4 == 0) {
240549c0:	4b38      	ldr	r3, [pc, #224]	@ (24054aa4 <draw_background+0x22c>)
240549c2:	781b      	ldrb	r3, [r3, #0]
240549c4:	f003 0303 	and.w	r3, r3, #3
240549c8:	b2db      	uxtb	r3, r3
240549ca:	2b00      	cmp	r3, #0
240549cc:	d105      	bne.n	240549da <draw_background+0x162>
		LCD_SetTextColor(selected_item_color);
240549ce:	4b36      	ldr	r3, [pc, #216]	@ (24054aa8 <draw_background+0x230>)
240549d0:	881b      	ldrh	r3, [r3, #0]
240549d2:	4618      	mov	r0, r3
240549d4:	f7fc fbe4 	bl	240511a0 <LCD_SetTextColor>
240549d8:	e003      	b.n	240549e2 <draw_background+0x16a>
	} else {
		LCD_SetTextColor(LCD_COLOR_WHITE);
240549da:	f64f 70ff 	movw	r0, #65535	@ 0xffff
240549de:	f7fc fbdf 	bl	240511a0 <LCD_SetTextColor>
	}
	LCD_DisplayStringAt(buf, 0, 110, (uint8_t*) "Start\0", CENTER_MODE);
240549e2:	2301      	movs	r3, #1
240549e4:	9300      	str	r3, [sp, #0]
240549e6:	4b31      	ldr	r3, [pc, #196]	@ (24054aac <draw_background+0x234>)
240549e8:	226e      	movs	r2, #110	@ 0x6e
240549ea:	2100      	movs	r1, #0
240549ec:	6878      	ldr	r0, [r7, #4]
240549ee:	f7fc fc5d 	bl	240512ac <LCD_DisplayStringAt>
	if (selected_item % 4 == 1) {
240549f2:	4b2c      	ldr	r3, [pc, #176]	@ (24054aa4 <draw_background+0x22c>)
240549f4:	781b      	ldrb	r3, [r3, #0]
240549f6:	f003 0303 	and.w	r3, r3, #3
240549fa:	b2db      	uxtb	r3, r3
240549fc:	2b01      	cmp	r3, #1
240549fe:	d105      	bne.n	24054a0c <draw_background+0x194>
		LCD_SetTextColor(selected_item_color);
24054a00:	4b29      	ldr	r3, [pc, #164]	@ (24054aa8 <draw_background+0x230>)
24054a02:	881b      	ldrh	r3, [r3, #0]
24054a04:	4618      	mov	r0, r3
24054a06:	f7fc fbcb 	bl	240511a0 <LCD_SetTextColor>
24054a0a:	e003      	b.n	24054a14 <draw_background+0x19c>
	} else {
		LCD_SetTextColor(LCD_COLOR_WHITE);
24054a0c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
24054a10:	f7fc fbc6 	bl	240511a0 <LCD_SetTextColor>
	}
	LCD_DisplayStringAt(buf, 0, 140, (uint8_t*) "Settings\0", CENTER_MODE);
24054a14:	2301      	movs	r3, #1
24054a16:	9300      	str	r3, [sp, #0]
24054a18:	4b25      	ldr	r3, [pc, #148]	@ (24054ab0 <draw_background+0x238>)
24054a1a:	228c      	movs	r2, #140	@ 0x8c
24054a1c:	2100      	movs	r1, #0
24054a1e:	6878      	ldr	r0, [r7, #4]
24054a20:	f7fc fc44 	bl	240512ac <LCD_DisplayStringAt>
	if (selected_item % 4 == 2) {
24054a24:	4b1f      	ldr	r3, [pc, #124]	@ (24054aa4 <draw_background+0x22c>)
24054a26:	781b      	ldrb	r3, [r3, #0]
24054a28:	f003 0303 	and.w	r3, r3, #3
24054a2c:	b2db      	uxtb	r3, r3
24054a2e:	2b02      	cmp	r3, #2
24054a30:	d105      	bne.n	24054a3e <draw_background+0x1c6>
		LCD_SetTextColor(selected_item_color);
24054a32:	4b1d      	ldr	r3, [pc, #116]	@ (24054aa8 <draw_background+0x230>)
24054a34:	881b      	ldrh	r3, [r3, #0]
24054a36:	4618      	mov	r0, r3
24054a38:	f7fc fbb2 	bl	240511a0 <LCD_SetTextColor>
24054a3c:	e003      	b.n	24054a46 <draw_background+0x1ce>
	} else {
		LCD_SetTextColor(LCD_COLOR_WHITE);
24054a3e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
24054a42:	f7fc fbad 	bl	240511a0 <LCD_SetTextColor>
	}
	LCD_DisplayStringAt(buf, 0, 170, (uint8_t*) "About\0", CENTER_MODE);
24054a46:	2301      	movs	r3, #1
24054a48:	9300      	str	r3, [sp, #0]
24054a4a:	4b1a      	ldr	r3, [pc, #104]	@ (24054ab4 <draw_background+0x23c>)
24054a4c:	22aa      	movs	r2, #170	@ 0xaa
24054a4e:	2100      	movs	r1, #0
24054a50:	6878      	ldr	r0, [r7, #4]
24054a52:	f7fc fc2b 	bl	240512ac <LCD_DisplayStringAt>
	if (selected_item % 4 == 3) {
24054a56:	4b13      	ldr	r3, [pc, #76]	@ (24054aa4 <draw_background+0x22c>)
24054a58:	781b      	ldrb	r3, [r3, #0]
24054a5a:	f003 0303 	and.w	r3, r3, #3
24054a5e:	b2db      	uxtb	r3, r3
24054a60:	2b03      	cmp	r3, #3
24054a62:	d105      	bne.n	24054a70 <draw_background+0x1f8>
		LCD_SetTextColor(selected_item_color);
24054a64:	4b10      	ldr	r3, [pc, #64]	@ (24054aa8 <draw_background+0x230>)
24054a66:	881b      	ldrh	r3, [r3, #0]
24054a68:	4618      	mov	r0, r3
24054a6a:	f7fc fb99 	bl	240511a0 <LCD_SetTextColor>
24054a6e:	e003      	b.n	24054a78 <draw_background+0x200>
	} else {
		LCD_SetTextColor(LCD_COLOR_WHITE);
24054a70:	f64f 70ff 	movw	r0, #65535	@ 0xffff
24054a74:	f7fc fb94 	bl	240511a0 <LCD_SetTextColor>
	}
	LCD_DisplayStringAt(buf, 0, 200, (uint8_t*) "Exit\0", CENTER_MODE);
24054a78:	2301      	movs	r3, #1
24054a7a:	9300      	str	r3, [sp, #0]
24054a7c:	4b0e      	ldr	r3, [pc, #56]	@ (24054ab8 <draw_background+0x240>)
24054a7e:	22c8      	movs	r2, #200	@ 0xc8
24054a80:	2100      	movs	r1, #0
24054a82:	6878      	ldr	r0, [r7, #4]
24054a84:	f7fc fc12 	bl	240512ac <LCD_DisplayStringAt>
}
24054a88:	bf00      	nop
24054a8a:	3708      	adds	r7, #8
24054a8c:	46bd      	mov	sp, r7
24054a8e:	bd80      	pop	{r7, pc}
24054a90:	20000248 	.word	0x20000248
24054a94:	66666667 	.word	0x66666667
24054a98:	20000244 	.word	0x20000244
24054a9c:	20000018 	.word	0x20000018
24054aa0:	200000a8 	.word	0x200000a8
24054aa4:	20000250 	.word	0x20000250
24054aa8:	200000b0 	.word	0x200000b0
24054aac:	24065c20 	.word	0x24065c20
24054ab0:	24065c28 	.word	0x24065c28
24054ab4:	24065c34 	.word	0x24065c34
24054ab8:	24065c3c 	.word	0x24065c3c

24054abc <process_input>:

static void process_input() {
24054abc:	b580      	push	{r7, lr}
24054abe:	b082      	sub	sp, #8
24054ac0:	af00      	add	r7, sp, #0
	uint32_t buttons = buttons_get();
24054ac2:	f7fe fb47 	bl	24053154 <buttons_get>
24054ac6:	6078      	str	r0, [r7, #4]
	if (buttons & B_POWER) {
24054ac8:	687b      	ldr	r3, [r7, #4]
24054aca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
24054ace:	2b00      	cmp	r3, #0
24054ad0:	d001      	beq.n	24054ad6 <process_input+0x1a>
		HAL_NVIC_SystemReset();
24054ad2:	f004 f83a 	bl	24058b4a <HAL_NVIC_SystemReset>
	}
	if (buttons & ~B_POWER) {
24054ad6:	687b      	ldr	r3, [r7, #4]
24054ad8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
24054adc:	2b00      	cmp	r3, #0
24054ade:	d002      	beq.n	24054ae6 <process_input+0x2a>
		demo_ticks = 0;
24054ae0:	4b1a      	ldr	r3, [pc, #104]	@ (24054b4c <process_input+0x90>)
24054ae2:	2200      	movs	r2, #0
24054ae4:	601a      	str	r2, [r3, #0]
	}
	if (action_delay <= 0) {
24054ae6:	4b1a      	ldr	r3, [pc, #104]	@ (24054b50 <process_input+0x94>)
24054ae8:	681b      	ldr	r3, [r3, #0]
24054aea:	2b00      	cmp	r3, #0
24054aec:	dc24      	bgt.n	24054b38 <process_input+0x7c>
		if (buttons & B_Up) {
24054aee:	687b      	ldr	r3, [r7, #4]
24054af0:	f003 0302 	and.w	r3, r3, #2
24054af4:	2b00      	cmp	r3, #0
24054af6:	d008      	beq.n	24054b0a <process_input+0x4e>
			selected_item--;
24054af8:	4b16      	ldr	r3, [pc, #88]	@ (24054b54 <process_input+0x98>)
24054afa:	781b      	ldrb	r3, [r3, #0]
24054afc:	3b01      	subs	r3, #1
24054afe:	b2da      	uxtb	r2, r3
24054b00:	4b14      	ldr	r3, [pc, #80]	@ (24054b54 <process_input+0x98>)
24054b02:	701a      	strb	r2, [r3, #0]
			action_delay = 10;
24054b04:	4b12      	ldr	r3, [pc, #72]	@ (24054b50 <process_input+0x94>)
24054b06:	220a      	movs	r2, #10
24054b08:	601a      	str	r2, [r3, #0]
		}
		if (buttons & B_Down) {
24054b0a:	687b      	ldr	r3, [r7, #4]
24054b0c:	f003 0308 	and.w	r3, r3, #8
24054b10:	2b00      	cmp	r3, #0
24054b12:	d008      	beq.n	24054b26 <process_input+0x6a>
			selected_item++;
24054b14:	4b0f      	ldr	r3, [pc, #60]	@ (24054b54 <process_input+0x98>)
24054b16:	781b      	ldrb	r3, [r3, #0]
24054b18:	3301      	adds	r3, #1
24054b1a:	b2da      	uxtb	r2, r3
24054b1c:	4b0d      	ldr	r3, [pc, #52]	@ (24054b54 <process_input+0x98>)
24054b1e:	701a      	strb	r2, [r3, #0]
			action_delay = 10;
24054b20:	4b0b      	ldr	r3, [pc, #44]	@ (24054b50 <process_input+0x94>)
24054b22:	220a      	movs	r2, #10
24054b24:	601a      	str	r2, [r3, #0]
		}
		if (buttons & B_A) {
24054b26:	687b      	ldr	r3, [r7, #4]
24054b28:	f003 0310 	and.w	r3, r3, #16
24054b2c:	2b00      	cmp	r3, #0
24054b2e:	d008      	beq.n	24054b42 <process_input+0x86>
			in_main_menu = 0;
24054b30:	4b09      	ldr	r3, [pc, #36]	@ (24054b58 <process_input+0x9c>)
24054b32:	2200      	movs	r2, #0
24054b34:	601a      	str	r2, [r3, #0]
		}
	} else {
		action_delay--;
	}
}
24054b36:	e004      	b.n	24054b42 <process_input+0x86>
		action_delay--;
24054b38:	4b05      	ldr	r3, [pc, #20]	@ (24054b50 <process_input+0x94>)
24054b3a:	681b      	ldr	r3, [r3, #0]
24054b3c:	3b01      	subs	r3, #1
24054b3e:	4a04      	ldr	r2, [pc, #16]	@ (24054b50 <process_input+0x94>)
24054b40:	6013      	str	r3, [r2, #0]
}
24054b42:	bf00      	nop
24054b44:	3708      	adds	r7, #8
24054b46:	46bd      	mov	sp, r7
24054b48:	bd80      	pop	{r7, pc}
24054b4a:	bf00      	nop
24054b4c:	20000254 	.word	0x20000254
24054b50:	2000024c 	.word	0x2000024c
24054b54:	20000250 	.word	0x20000250
24054b58:	2000025c 	.word	0x2000025c

24054b5c <update>:

static void update() {
24054b5c:	b580      	push	{r7, lr}
24054b5e:	af00      	add	r7, sp, #0
	ticks++;
24054b60:	4b0c      	ldr	r3, [pc, #48]	@ (24054b94 <update+0x38>)
24054b62:	681b      	ldr	r3, [r3, #0]
24054b64:	3301      	adds	r3, #1
24054b66:	4a0b      	ldr	r2, [pc, #44]	@ (24054b94 <update+0x38>)
24054b68:	6013      	str	r3, [r2, #0]
	demo_ticks++;
24054b6a:	4b0b      	ldr	r3, [pc, #44]	@ (24054b98 <update+0x3c>)
24054b6c:	681b      	ldr	r3, [r3, #0]
24054b6e:	3301      	adds	r3, #1
24054b70:	4a09      	ldr	r2, [pc, #36]	@ (24054b98 <update+0x3c>)
24054b72:	6013      	str	r3, [r2, #0]
	if (demo_ticks > 1000) {
24054b74:	4b08      	ldr	r3, [pc, #32]	@ (24054b98 <update+0x3c>)
24054b76:	681b      	ldr	r3, [r3, #0]
24054b78:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
24054b7c:	dd07      	ble.n	24054b8e <update+0x32>
		in_demo = 1;
24054b7e:	4b07      	ldr	r3, [pc, #28]	@ (24054b9c <update+0x40>)
24054b80:	2201      	movs	r2, #1
24054b82:	601a      	str	r2, [r3, #0]
		game_init();
24054b84:	f7fb faac 	bl	240500e0 <game_init>
		action_delay = 20;
24054b88:	4b05      	ldr	r3, [pc, #20]	@ (24054ba0 <update+0x44>)
24054b8a:	2214      	movs	r2, #20
24054b8c:	601a      	str	r2, [r3, #0]
	}
}
24054b8e:	bf00      	nop
24054b90:	bd80      	pop	{r7, pc}
24054b92:	bf00      	nop
24054b94:	20000248 	.word	0x20000248
24054b98:	20000254 	.word	0x20000254
24054b9c:	20000200 	.word	0x20000200
24054ba0:	2000024c 	.word	0x2000024c

24054ba4 <menu_select>:

static void menu_select() {
24054ba4:	b580      	push	{r7, lr}
24054ba6:	af00      	add	r7, sp, #0
	switch (selected_item % 4) {
24054ba8:	4b10      	ldr	r3, [pc, #64]	@ (24054bec <menu_select+0x48>)
24054baa:	781b      	ldrb	r3, [r3, #0]
24054bac:	f003 0303 	and.w	r3, r3, #3
24054bb0:	2b03      	cmp	r3, #3
24054bb2:	d817      	bhi.n	24054be4 <menu_select+0x40>
24054bb4:	a201      	add	r2, pc, #4	@ (adr r2, 24054bbc <menu_select+0x18>)
24054bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24054bba:	bf00      	nop
24054bbc:	24054bcd 	.word	0x24054bcd
24054bc0:	24054bd3 	.word	0x24054bd3
24054bc4:	24054bd9 	.word	0x24054bd9
24054bc8:	24054bdf 	.word	0x24054bdf
	case 0:
		game_init();
24054bcc:	f7fb fa88 	bl	240500e0 <game_init>
		break;
24054bd0:	e009      	b.n	24054be6 <menu_select+0x42>
	case 1:
		settings_menu_init();
24054bd2:	f000 f80d 	bl	24054bf0 <settings_menu_init>
		break;
24054bd6:	e006      	b.n	24054be6 <menu_select+0x42>
	case 2:
		about_menu_init();
24054bd8:	f7ff f9c8 	bl	24053f6c <about_menu_init>
		break;
24054bdc:	e003      	b.n	24054be6 <menu_select+0x42>
	case 3:
		HAL_NVIC_SystemReset();
24054bde:	f003 ffb4 	bl	24058b4a <HAL_NVIC_SystemReset>
		break;
24054be2:	e000      	b.n	24054be6 <menu_select+0x42>
	default:
		break;
24054be4:	bf00      	nop
	}
}
24054be6:	bf00      	nop
24054be8:	bd80      	pop	{r7, pc}
24054bea:	bf00      	nop
24054bec:	20000250 	.word	0x20000250

24054bf0 <settings_menu_init>:
LCD_COLOR_MAGENTA, LCD_COLOR_BROWN, LCD_COLOR_ORANGE,
LCD_COLOR_LIGHTRED, LCD_COLOR_LIGHTGREEN, LCD_COLOR_LIGHTBLUE,
LCD_COLOR_LIGHTMAGENTA, LCD_COLOR_DARKRED, LCD_COLOR_DARKGREEN,
LCD_COLOR_DARKBLUE, LCD_COLOR_DARKMAGENTA };

void settings_menu_init() {
24054bf0:	b580      	push	{r7, lr}
24054bf2:	af00      	add	r7, sp, #0
	action_delay = 10;
24054bf4:	4b0e      	ldr	r3, [pc, #56]	@ (24054c30 <settings_menu_init+0x40>)
24054bf6:	220a      	movs	r2, #10
24054bf8:	601a      	str	r2, [r3, #0]
	selected_item = 0;
24054bfa:	4b0e      	ldr	r3, [pc, #56]	@ (24054c34 <settings_menu_init+0x44>)
24054bfc:	2200      	movs	r2, #0
24054bfe:	701a      	strb	r2, [r3, #0]
	in_settings_menu = 1;
24054c00:	4b0d      	ldr	r3, [pc, #52]	@ (24054c38 <settings_menu_init+0x48>)
24054c02:	2201      	movs	r2, #1
24054c04:	601a      	str	r2, [r3, #0]
	LCD_SetTextColor(LCD_COLOR_WHITE);
24054c06:	f64f 70ff 	movw	r0, #65535	@ 0xffff
24054c0a:	f7fc fac9 	bl	240511a0 <LCD_SetTextColor>
	LCD_SetFont(&Font24);
24054c0e:	480b      	ldr	r0, [pc, #44]	@ (24054c3c <settings_menu_init+0x4c>)
24054c10:	f7fc fae6 	bl	240511e0 <LCD_SetFont>
	LCD_SetFontScale(1);
24054c14:	2001      	movs	r0, #1
24054c16:	f7fc faf3 	bl	24051200 <LCD_SetFontScale>
	while (in_settings_menu) {
24054c1a:	e001      	b.n	24054c20 <settings_menu_init+0x30>
		settings_menu_loop();
24054c1c:	f000 f810 	bl	24054c40 <settings_menu_loop>
	while (in_settings_menu) {
24054c20:	4b05      	ldr	r3, [pc, #20]	@ (24054c38 <settings_menu_init+0x48>)
24054c22:	681b      	ldr	r3, [r3, #0]
24054c24:	2b00      	cmp	r3, #0
24054c26:	d1f9      	bne.n	24054c1c <settings_menu_init+0x2c>
	}
	//main_menu_init();
}
24054c28:	bf00      	nop
24054c2a:	bf00      	nop
24054c2c:	bd80      	pop	{r7, pc}
24054c2e:	bf00      	nop
24054c30:	20000268 	.word	0x20000268
24054c34:	2000026c 	.word	0x2000026c
24054c38:	200000b8 	.word	0x200000b8
24054c3c:	20000018 	.word	0x20000018

24054c40 <settings_menu_loop>:
static void settings_menu_loop() {
24054c40:	b580      	push	{r7, lr}
24054c42:	b082      	sub	sp, #8
24054c44:	af00      	add	r7, sp, #0
	uint16_t *fb = lcd_get_active_buffer();
24054c46:	f7ff f94f 	bl	24053ee8 <lcd_get_active_buffer>
24054c4a:	6078      	str	r0, [r7, #4]
	draw_background(fb);
24054c4c:	6878      	ldr	r0, [r7, #4]
24054c4e:	f000 f883 	bl	24054d58 <draw_background>

	process_input();
24054c52:	f000 f80b 	bl	24054c6c <process_input>
	update();
24054c56:	f000 f871 	bl	24054d3c <update>

	lcd_swap();
24054c5a:	f7ff f917 	bl	24053e8c <lcd_swap>
	lcd_wait_for_vblank();
24054c5e:	f7ff f96f 	bl	24053f40 <lcd_wait_for_vblank>
}
24054c62:	bf00      	nop
24054c64:	3708      	adds	r7, #8
24054c66:	46bd      	mov	sp, r7
24054c68:	bd80      	pop	{r7, pc}
	...

24054c6c <process_input>:

static void process_input() {
24054c6c:	b580      	push	{r7, lr}
24054c6e:	b082      	sub	sp, #8
24054c70:	af00      	add	r7, sp, #0
	uint32_t buttons = buttons_get();
24054c72:	f7fe fa6f 	bl	24053154 <buttons_get>
24054c76:	6078      	str	r0, [r7, #4]
	if (buttons & B_POWER) {
24054c78:	687b      	ldr	r3, [r7, #4]
24054c7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
24054c7e:	2b00      	cmp	r3, #0
24054c80:	d001      	beq.n	24054c86 <process_input+0x1a>
		HAL_NVIC_SystemReset();
24054c82:	f003 ff62 	bl	24058b4a <HAL_NVIC_SystemReset>
	}
	if (action_delay <= 0) {
24054c86:	4b2a      	ldr	r3, [pc, #168]	@ (24054d30 <process_input+0xc4>)
24054c88:	681b      	ldr	r3, [r3, #0]
24054c8a:	2b00      	cmp	r3, #0
24054c8c:	dc3e      	bgt.n	24054d0c <process_input+0xa0>
		if (buttons & B_Up) {
24054c8e:	687b      	ldr	r3, [r7, #4]
24054c90:	f003 0302 	and.w	r3, r3, #2
24054c94:	2b00      	cmp	r3, #0
24054c96:	d008      	beq.n	24054caa <process_input+0x3e>
			selected_item--;
24054c98:	4b26      	ldr	r3, [pc, #152]	@ (24054d34 <process_input+0xc8>)
24054c9a:	781b      	ldrb	r3, [r3, #0]
24054c9c:	3b01      	subs	r3, #1
24054c9e:	b2da      	uxtb	r2, r3
24054ca0:	4b24      	ldr	r3, [pc, #144]	@ (24054d34 <process_input+0xc8>)
24054ca2:	701a      	strb	r2, [r3, #0]
			action_delay = 10;
24054ca4:	4b22      	ldr	r3, [pc, #136]	@ (24054d30 <process_input+0xc4>)
24054ca6:	220a      	movs	r2, #10
24054ca8:	601a      	str	r2, [r3, #0]
		}
		if (buttons & B_Down) {
24054caa:	687b      	ldr	r3, [r7, #4]
24054cac:	f003 0308 	and.w	r3, r3, #8
24054cb0:	2b00      	cmp	r3, #0
24054cb2:	d008      	beq.n	24054cc6 <process_input+0x5a>
			selected_item++;
24054cb4:	4b1f      	ldr	r3, [pc, #124]	@ (24054d34 <process_input+0xc8>)
24054cb6:	781b      	ldrb	r3, [r3, #0]
24054cb8:	3301      	adds	r3, #1
24054cba:	b2da      	uxtb	r2, r3
24054cbc:	4b1d      	ldr	r3, [pc, #116]	@ (24054d34 <process_input+0xc8>)
24054cbe:	701a      	strb	r2, [r3, #0]
			action_delay = 10;
24054cc0:	4b1b      	ldr	r3, [pc, #108]	@ (24054d30 <process_input+0xc4>)
24054cc2:	220a      	movs	r2, #10
24054cc4:	601a      	str	r2, [r3, #0]
		}
		if (buttons & B_Left) {
24054cc6:	687b      	ldr	r3, [r7, #4]
24054cc8:	f003 0301 	and.w	r3, r3, #1
24054ccc:	2b00      	cmp	r3, #0
24054cce:	d006      	beq.n	24054cde <process_input+0x72>
			action_delay = 10;
24054cd0:	4b17      	ldr	r3, [pc, #92]	@ (24054d30 <process_input+0xc4>)
24054cd2:	220a      	movs	r2, #10
24054cd4:	601a      	str	r2, [r3, #0]
			change_settings(-1);
24054cd6:	f04f 30ff 	mov.w	r0, #4294967295
24054cda:	f000 f931 	bl	24054f40 <change_settings>
		}
		if (buttons & B_Right) {
24054cde:	687b      	ldr	r3, [r7, #4]
24054ce0:	f003 0304 	and.w	r3, r3, #4
24054ce4:	2b00      	cmp	r3, #0
24054ce6:	d005      	beq.n	24054cf4 <process_input+0x88>
			action_delay = 10;
24054ce8:	4b11      	ldr	r3, [pc, #68]	@ (24054d30 <process_input+0xc4>)
24054cea:	220a      	movs	r2, #10
24054cec:	601a      	str	r2, [r3, #0]
			change_settings(1);
24054cee:	2001      	movs	r0, #1
24054cf0:	f000 f926 	bl	24054f40 <change_settings>
		}
		if (buttons & B_A) {
24054cf4:	687b      	ldr	r3, [r7, #4]
24054cf6:	f003 0310 	and.w	r3, r3, #16
24054cfa:	2b00      	cmp	r3, #0
24054cfc:	d00b      	beq.n	24054d16 <process_input+0xaa>
			action_delay = 10;
24054cfe:	4b0c      	ldr	r3, [pc, #48]	@ (24054d30 <process_input+0xc4>)
24054d00:	220a      	movs	r2, #10
24054d02:	601a      	str	r2, [r3, #0]
			change_settings(1);
24054d04:	2001      	movs	r0, #1
24054d06:	f000 f91b 	bl	24054f40 <change_settings>
24054d0a:	e004      	b.n	24054d16 <process_input+0xaa>
		}
	} else {
		action_delay--;
24054d0c:	4b08      	ldr	r3, [pc, #32]	@ (24054d30 <process_input+0xc4>)
24054d0e:	681b      	ldr	r3, [r3, #0]
24054d10:	3b01      	subs	r3, #1
24054d12:	4a07      	ldr	r2, [pc, #28]	@ (24054d30 <process_input+0xc4>)
24054d14:	6013      	str	r3, [r2, #0]
	}
	if (buttons & B_B) {
24054d16:	687b      	ldr	r3, [r7, #4]
24054d18:	f003 0320 	and.w	r3, r3, #32
24054d1c:	2b00      	cmp	r3, #0
24054d1e:	d002      	beq.n	24054d26 <process_input+0xba>
		in_settings_menu = 0;
24054d20:	4b05      	ldr	r3, [pc, #20]	@ (24054d38 <process_input+0xcc>)
24054d22:	2200      	movs	r2, #0
24054d24:	601a      	str	r2, [r3, #0]
	}
}
24054d26:	bf00      	nop
24054d28:	3708      	adds	r7, #8
24054d2a:	46bd      	mov	sp, r7
24054d2c:	bd80      	pop	{r7, pc}
24054d2e:	bf00      	nop
24054d30:	20000268 	.word	0x20000268
24054d34:	2000026c 	.word	0x2000026c
24054d38:	200000b8 	.word	0x200000b8

24054d3c <update>:

static void update() {
24054d3c:	b480      	push	{r7}
24054d3e:	af00      	add	r7, sp, #0
	ticks++;
24054d40:	4b04      	ldr	r3, [pc, #16]	@ (24054d54 <update+0x18>)
24054d42:	681b      	ldr	r3, [r3, #0]
24054d44:	3301      	adds	r3, #1
24054d46:	4a03      	ldr	r2, [pc, #12]	@ (24054d54 <update+0x18>)
24054d48:	6013      	str	r3, [r2, #0]
}
24054d4a:	bf00      	nop
24054d4c:	46bd      	mov	sp, r7
24054d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
24054d52:	4770      	bx	lr
24054d54:	20000264 	.word	0x20000264

24054d58 <draw_background>:

static void draw_background(uint16_t *buf) {
24054d58:	b580      	push	{r7, lr}
24054d5a:	b084      	sub	sp, #16
24054d5c:	af02      	add	r7, sp, #8
24054d5e:	6078      	str	r0, [r7, #4]
	LCD_Clear(buf, LCD_COLOR_BLACK);
24054d60:	2100      	movs	r1, #0
24054d62:	6878      	ldr	r0, [r7, #4]
24054d64:	f7fc fa88 	bl	24051278 <LCD_Clear>

	LCD_SetTextColor(LCD_COLOR_WHITE);
24054d68:	f64f 70ff 	movw	r0, #65535	@ 0xffff
24054d6c:	f7fc fa18 	bl	240511a0 <LCD_SetTextColor>
	LCD_SetFontScale(2);
24054d70:	2002      	movs	r0, #2
24054d72:	f7fc fa45 	bl	24051200 <LCD_SetFontScale>
	LCD_DisplayChar(buf, 40, 20, 'S');
24054d76:	2353      	movs	r3, #83	@ 0x53
24054d78:	2214      	movs	r2, #20
24054d7a:	2128      	movs	r1, #40	@ 0x28
24054d7c:	6878      	ldr	r0, [r7, #4]
24054d7e:	f7fc fb37 	bl	240513f0 <LCD_DisplayChar>
	LCD_DisplayChar(buf, 70, 20, 'e');
24054d82:	2365      	movs	r3, #101	@ 0x65
24054d84:	2214      	movs	r2, #20
24054d86:	2146      	movs	r1, #70	@ 0x46
24054d88:	6878      	ldr	r0, [r7, #4]
24054d8a:	f7fc fb31 	bl	240513f0 <LCD_DisplayChar>
	LCD_DisplayChar(buf, 100, 20, 't');
24054d8e:	2374      	movs	r3, #116	@ 0x74
24054d90:	2214      	movs	r2, #20
24054d92:	2164      	movs	r1, #100	@ 0x64
24054d94:	6878      	ldr	r0, [r7, #4]
24054d96:	f7fc fb2b 	bl	240513f0 <LCD_DisplayChar>
	LCD_DisplayChar(buf, 130, 20, 't');
24054d9a:	2374      	movs	r3, #116	@ 0x74
24054d9c:	2214      	movs	r2, #20
24054d9e:	2182      	movs	r1, #130	@ 0x82
24054da0:	6878      	ldr	r0, [r7, #4]
24054da2:	f7fc fb25 	bl	240513f0 <LCD_DisplayChar>
	LCD_DisplayChar(buf, 160, 20, 'i');
24054da6:	2369      	movs	r3, #105	@ 0x69
24054da8:	2214      	movs	r2, #20
24054daa:	21a0      	movs	r1, #160	@ 0xa0
24054dac:	6878      	ldr	r0, [r7, #4]
24054dae:	f7fc fb1f 	bl	240513f0 <LCD_DisplayChar>
	LCD_DisplayChar(buf, 190, 20, 'n');
24054db2:	236e      	movs	r3, #110	@ 0x6e
24054db4:	2214      	movs	r2, #20
24054db6:	21be      	movs	r1, #190	@ 0xbe
24054db8:	6878      	ldr	r0, [r7, #4]
24054dba:	f7fc fb19 	bl	240513f0 <LCD_DisplayChar>
	LCD_DisplayChar(buf, 220, 20, 'g');
24054dbe:	2367      	movs	r3, #103	@ 0x67
24054dc0:	2214      	movs	r2, #20
24054dc2:	21dc      	movs	r1, #220	@ 0xdc
24054dc4:	6878      	ldr	r0, [r7, #4]
24054dc6:	f7fc fb13 	bl	240513f0 <LCD_DisplayChar>
	LCD_DisplayChar(buf, 250, 20, 's');
24054dca:	2373      	movs	r3, #115	@ 0x73
24054dcc:	2214      	movs	r2, #20
24054dce:	21fa      	movs	r1, #250	@ 0xfa
24054dd0:	6878      	ldr	r0, [r7, #4]
24054dd2:	f7fc fb0d 	bl	240513f0 <LCD_DisplayChar>
	LCD_SetFontScale(1);
24054dd6:	2001      	movs	r0, #1
24054dd8:	f7fc fa12 	bl	24051200 <LCD_SetFontScale>

	if (selected_item % 4 == 0) {
24054ddc:	4b4d      	ldr	r3, [pc, #308]	@ (24054f14 <draw_background+0x1bc>)
24054dde:	781b      	ldrb	r3, [r3, #0]
24054de0:	f003 0303 	and.w	r3, r3, #3
24054de4:	b2db      	uxtb	r3, r3
24054de6:	2b00      	cmp	r3, #0
24054de8:	d105      	bne.n	24054df6 <draw_background+0x9e>
		LCD_SetTextColor(selected_item_color);
24054dea:	4b4b      	ldr	r3, [pc, #300]	@ (24054f18 <draw_background+0x1c0>)
24054dec:	881b      	ldrh	r3, [r3, #0]
24054dee:	4618      	mov	r0, r3
24054df0:	f7fc f9d6 	bl	240511a0 <LCD_SetTextColor>
24054df4:	e003      	b.n	24054dfe <draw_background+0xa6>
	} else {
		LCD_SetTextColor(LCD_COLOR_WHITE);
24054df6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
24054dfa:	f7fc f9d1 	bl	240511a0 <LCD_SetTextColor>
	}
	switch (difficulty) {
24054dfe:	4b47      	ldr	r3, [pc, #284]	@ (24054f1c <draw_background+0x1c4>)
24054e00:	781b      	ldrb	r3, [r3, #0]
24054e02:	2b02      	cmp	r3, #2
24054e04:	d018      	beq.n	24054e38 <draw_background+0xe0>
24054e06:	2b02      	cmp	r3, #2
24054e08:	dc1f      	bgt.n	24054e4a <draw_background+0xf2>
24054e0a:	2b00      	cmp	r3, #0
24054e0c:	d002      	beq.n	24054e14 <draw_background+0xbc>
24054e0e:	2b01      	cmp	r3, #1
24054e10:	d009      	beq.n	24054e26 <draw_background+0xce>
	case HARD:
		LCD_DisplayStringAt(buf, 0, 110, (uint8_t*) "Difficulty: HARD\0",
				CENTER_MODE);
		break;
	default:
		break;
24054e12:	e01a      	b.n	24054e4a <draw_background+0xf2>
		LCD_DisplayStringAt(buf, 0, 110, (uint8_t*) "Difficulty: EASY\0",
24054e14:	2301      	movs	r3, #1
24054e16:	9300      	str	r3, [sp, #0]
24054e18:	4b41      	ldr	r3, [pc, #260]	@ (24054f20 <draw_background+0x1c8>)
24054e1a:	226e      	movs	r2, #110	@ 0x6e
24054e1c:	2100      	movs	r1, #0
24054e1e:	6878      	ldr	r0, [r7, #4]
24054e20:	f7fc fa44 	bl	240512ac <LCD_DisplayStringAt>
		break;
24054e24:	e012      	b.n	24054e4c <draw_background+0xf4>
		LCD_DisplayStringAt(buf, 0, 110, (uint8_t*) "Difficulty: MEDIUM\0",
24054e26:	2301      	movs	r3, #1
24054e28:	9300      	str	r3, [sp, #0]
24054e2a:	4b3e      	ldr	r3, [pc, #248]	@ (24054f24 <draw_background+0x1cc>)
24054e2c:	226e      	movs	r2, #110	@ 0x6e
24054e2e:	2100      	movs	r1, #0
24054e30:	6878      	ldr	r0, [r7, #4]
24054e32:	f7fc fa3b 	bl	240512ac <LCD_DisplayStringAt>
		break;
24054e36:	e009      	b.n	24054e4c <draw_background+0xf4>
		LCD_DisplayStringAt(buf, 0, 110, (uint8_t*) "Difficulty: HARD\0",
24054e38:	2301      	movs	r3, #1
24054e3a:	9300      	str	r3, [sp, #0]
24054e3c:	4b3a      	ldr	r3, [pc, #232]	@ (24054f28 <draw_background+0x1d0>)
24054e3e:	226e      	movs	r2, #110	@ 0x6e
24054e40:	2100      	movs	r1, #0
24054e42:	6878      	ldr	r0, [r7, #4]
24054e44:	f7fc fa32 	bl	240512ac <LCD_DisplayStringAt>
		break;
24054e48:	e000      	b.n	24054e4c <draw_background+0xf4>
		break;
24054e4a:	bf00      	nop
	}
	if (selected_item % 4 == 1) {
24054e4c:	4b31      	ldr	r3, [pc, #196]	@ (24054f14 <draw_background+0x1bc>)
24054e4e:	781b      	ldrb	r3, [r3, #0]
24054e50:	f003 0303 	and.w	r3, r3, #3
24054e54:	b2db      	uxtb	r3, r3
24054e56:	2b01      	cmp	r3, #1
24054e58:	d105      	bne.n	24054e66 <draw_background+0x10e>
		LCD_SetTextColor(selected_item_color);
24054e5a:	4b2f      	ldr	r3, [pc, #188]	@ (24054f18 <draw_background+0x1c0>)
24054e5c:	881b      	ldrh	r3, [r3, #0]
24054e5e:	4618      	mov	r0, r3
24054e60:	f7fc f99e 	bl	240511a0 <LCD_SetTextColor>
24054e64:	e003      	b.n	24054e6e <draw_background+0x116>
	} else {
		LCD_SetTextColor(LCD_COLOR_WHITE);
24054e66:	f64f 70ff 	movw	r0, #65535	@ 0xffff
24054e6a:	f7fc f999 	bl	240511a0 <LCD_SetTextColor>
	}
	LCD_DisplayStringAt(buf, 0, 140, (uint8_t*) "Paddle color:   \0",
24054e6e:	2301      	movs	r3, #1
24054e70:	9300      	str	r3, [sp, #0]
24054e72:	4b2e      	ldr	r3, [pc, #184]	@ (24054f2c <draw_background+0x1d4>)
24054e74:	228c      	movs	r2, #140	@ 0x8c
24054e76:	2100      	movs	r1, #0
24054e78:	6878      	ldr	r0, [r7, #4]
24054e7a:	f7fc fa17 	bl	240512ac <LCD_DisplayStringAt>
			CENTER_MODE);
	LCD_FillRect(buf, 250, 150, 50, 8, paddle_color);
24054e7e:	4b2c      	ldr	r3, [pc, #176]	@ (24054f30 <draw_background+0x1d8>)
24054e80:	881b      	ldrh	r3, [r3, #0]
24054e82:	9301      	str	r3, [sp, #4]
24054e84:	2308      	movs	r3, #8
24054e86:	9300      	str	r3, [sp, #0]
24054e88:	2332      	movs	r3, #50	@ 0x32
24054e8a:	2296      	movs	r2, #150	@ 0x96
24054e8c:	21fa      	movs	r1, #250	@ 0xfa
24054e8e:	6878      	ldr	r0, [r7, #4]
24054e90:	f7fc fcda 	bl	24051848 <LCD_FillRect>
	if (selected_item % 4 == 2) {
24054e94:	4b1f      	ldr	r3, [pc, #124]	@ (24054f14 <draw_background+0x1bc>)
24054e96:	781b      	ldrb	r3, [r3, #0]
24054e98:	f003 0303 	and.w	r3, r3, #3
24054e9c:	b2db      	uxtb	r3, r3
24054e9e:	2b02      	cmp	r3, #2
24054ea0:	d105      	bne.n	24054eae <draw_background+0x156>
		LCD_SetTextColor(selected_item_color);
24054ea2:	4b1d      	ldr	r3, [pc, #116]	@ (24054f18 <draw_background+0x1c0>)
24054ea4:	881b      	ldrh	r3, [r3, #0]
24054ea6:	4618      	mov	r0, r3
24054ea8:	f7fc f97a 	bl	240511a0 <LCD_SetTextColor>
24054eac:	e003      	b.n	24054eb6 <draw_background+0x15e>
	} else {
		LCD_SetTextColor(LCD_COLOR_WHITE);
24054eae:	f64f 70ff 	movw	r0, #65535	@ 0xffff
24054eb2:	f7fc f975 	bl	240511a0 <LCD_SetTextColor>
	}
	LCD_DisplayStringAt(buf, 0, 170, (uint8_t*) "Ball color: \0", CENTER_MODE);
24054eb6:	2301      	movs	r3, #1
24054eb8:	9300      	str	r3, [sp, #0]
24054eba:	4b1e      	ldr	r3, [pc, #120]	@ (24054f34 <draw_background+0x1dc>)
24054ebc:	22aa      	movs	r2, #170	@ 0xaa
24054ebe:	2100      	movs	r1, #0
24054ec0:	6878      	ldr	r0, [r7, #4]
24054ec2:	f7fc f9f3 	bl	240512ac <LCD_DisplayStringAt>
	LCD_FillCircle(buf, 275, 180, 10, ball_color);
24054ec6:	4b1c      	ldr	r3, [pc, #112]	@ (24054f38 <draw_background+0x1e0>)
24054ec8:	881b      	ldrh	r3, [r3, #0]
24054eca:	9300      	str	r3, [sp, #0]
24054ecc:	230a      	movs	r3, #10
24054ece:	22b4      	movs	r2, #180	@ 0xb4
24054ed0:	f240 1113 	movw	r1, #275	@ 0x113
24054ed4:	6878      	ldr	r0, [r7, #4]
24054ed6:	f7fc fce8 	bl	240518aa <LCD_FillCircle>
	if (selected_item % 4 == 3) {
24054eda:	4b0e      	ldr	r3, [pc, #56]	@ (24054f14 <draw_background+0x1bc>)
24054edc:	781b      	ldrb	r3, [r3, #0]
24054ede:	f003 0303 	and.w	r3, r3, #3
24054ee2:	b2db      	uxtb	r3, r3
24054ee4:	2b03      	cmp	r3, #3
24054ee6:	d105      	bne.n	24054ef4 <draw_background+0x19c>
		LCD_SetTextColor(selected_item_color);
24054ee8:	4b0b      	ldr	r3, [pc, #44]	@ (24054f18 <draw_background+0x1c0>)
24054eea:	881b      	ldrh	r3, [r3, #0]
24054eec:	4618      	mov	r0, r3
24054eee:	f7fc f957 	bl	240511a0 <LCD_SetTextColor>
24054ef2:	e003      	b.n	24054efc <draw_background+0x1a4>
	} else {
		LCD_SetTextColor(LCD_COLOR_WHITE);
24054ef4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
24054ef8:	f7fc f952 	bl	240511a0 <LCD_SetTextColor>
	}
	LCD_DisplayStringAt(buf, 0, 200, (uint8_t*) "Back\0", CENTER_MODE);
24054efc:	2301      	movs	r3, #1
24054efe:	9300      	str	r3, [sp, #0]
24054f00:	4b0e      	ldr	r3, [pc, #56]	@ (24054f3c <draw_background+0x1e4>)
24054f02:	22c8      	movs	r2, #200	@ 0xc8
24054f04:	2100      	movs	r1, #0
24054f06:	6878      	ldr	r0, [r7, #4]
24054f08:	f7fc f9d0 	bl	240512ac <LCD_DisplayStringAt>
}
24054f0c:	bf00      	nop
24054f0e:	3708      	adds	r7, #8
24054f10:	46bd      	mov	sp, r7
24054f12:	bd80      	pop	{r7, pc}
24054f14:	2000026c 	.word	0x2000026c
24054f18:	200000bc 	.word	0x200000bc
24054f1c:	20000260 	.word	0x20000260
24054f20:	24065c44 	.word	0x24065c44
24054f24:	24065c58 	.word	0x24065c58
24054f28:	24065c6c 	.word	0x24065c6c
24054f2c:	24065c80 	.word	0x24065c80
24054f30:	200000b2 	.word	0x200000b2
24054f34:	24065c94 	.word	0x24065c94
24054f38:	200000b4 	.word	0x200000b4
24054f3c:	24065ca4 	.word	0x24065ca4

24054f40 <change_settings>:

static void change_settings(int dir) {
24054f40:	b480      	push	{r7}
24054f42:	b083      	sub	sp, #12
24054f44:	af00      	add	r7, sp, #0
24054f46:	6078      	str	r0, [r7, #4]
	switch (selected_item % 4) {
24054f48:	4b45      	ldr	r3, [pc, #276]	@ (24055060 <change_settings+0x120>)
24054f4a:	781b      	ldrb	r3, [r3, #0]
24054f4c:	f003 0303 	and.w	r3, r3, #3
24054f50:	2b03      	cmp	r3, #3
24054f52:	d87d      	bhi.n	24055050 <change_settings+0x110>
24054f54:	a201      	add	r2, pc, #4	@ (adr r2, 24054f5c <change_settings+0x1c>)
24054f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24054f5a:	bf00      	nop
24054f5c:	24054f6d 	.word	0x24054f6d
24054f60:	24054fc9 	.word	0x24054fc9
24054f64:	24055009 	.word	0x24055009
24054f68:	24055049 	.word	0x24055049
	case 0:
		switch (difficulty) {
24054f6c:	4b3d      	ldr	r3, [pc, #244]	@ (24055064 <change_settings+0x124>)
24054f6e:	781b      	ldrb	r3, [r3, #0]
24054f70:	2b02      	cmp	r3, #2
24054f72:	d01c      	beq.n	24054fae <change_settings+0x6e>
24054f74:	2b02      	cmp	r3, #2
24054f76:	dc25      	bgt.n	24054fc4 <change_settings+0x84>
24054f78:	2b00      	cmp	r3, #0
24054f7a:	d002      	beq.n	24054f82 <change_settings+0x42>
24054f7c:	2b01      	cmp	r3, #1
24054f7e:	d00b      	beq.n	24054f98 <change_settings+0x58>
			} else {
				difficulty = MEDIUM;
			}
			break;
		default:
			break;
24054f80:	e020      	b.n	24054fc4 <change_settings+0x84>
			if (dir > 0) {
24054f82:	687b      	ldr	r3, [r7, #4]
24054f84:	2b00      	cmp	r3, #0
24054f86:	dd03      	ble.n	24054f90 <change_settings+0x50>
				difficulty = MEDIUM;
24054f88:	4b36      	ldr	r3, [pc, #216]	@ (24055064 <change_settings+0x124>)
24054f8a:	2201      	movs	r2, #1
24054f8c:	701a      	strb	r2, [r3, #0]
			break;
24054f8e:	e01a      	b.n	24054fc6 <change_settings+0x86>
				difficulty = HARD;
24054f90:	4b34      	ldr	r3, [pc, #208]	@ (24055064 <change_settings+0x124>)
24054f92:	2202      	movs	r2, #2
24054f94:	701a      	strb	r2, [r3, #0]
			break;
24054f96:	e016      	b.n	24054fc6 <change_settings+0x86>
			if (dir > 0) {
24054f98:	687b      	ldr	r3, [r7, #4]
24054f9a:	2b00      	cmp	r3, #0
24054f9c:	dd03      	ble.n	24054fa6 <change_settings+0x66>
				difficulty = HARD;
24054f9e:	4b31      	ldr	r3, [pc, #196]	@ (24055064 <change_settings+0x124>)
24054fa0:	2202      	movs	r2, #2
24054fa2:	701a      	strb	r2, [r3, #0]
			break;
24054fa4:	e00f      	b.n	24054fc6 <change_settings+0x86>
				difficulty = EASY;
24054fa6:	4b2f      	ldr	r3, [pc, #188]	@ (24055064 <change_settings+0x124>)
24054fa8:	2200      	movs	r2, #0
24054faa:	701a      	strb	r2, [r3, #0]
			break;
24054fac:	e00b      	b.n	24054fc6 <change_settings+0x86>
			if (dir > 0) {
24054fae:	687b      	ldr	r3, [r7, #4]
24054fb0:	2b00      	cmp	r3, #0
24054fb2:	dd03      	ble.n	24054fbc <change_settings+0x7c>
				difficulty = EASY;
24054fb4:	4b2b      	ldr	r3, [pc, #172]	@ (24055064 <change_settings+0x124>)
24054fb6:	2200      	movs	r2, #0
24054fb8:	701a      	strb	r2, [r3, #0]
			break;
24054fba:	e004      	b.n	24054fc6 <change_settings+0x86>
				difficulty = MEDIUM;
24054fbc:	4b29      	ldr	r3, [pc, #164]	@ (24055064 <change_settings+0x124>)
24054fbe:	2201      	movs	r2, #1
24054fc0:	701a      	strb	r2, [r3, #0]
			break;
24054fc2:	e000      	b.n	24054fc6 <change_settings+0x86>
			break;
24054fc4:	bf00      	nop
		}
		break;
24054fc6:	e044      	b.n	24055052 <change_settings+0x112>
	case 1:
		if (dir > 0) {
24054fc8:	687b      	ldr	r3, [r7, #4]
24054fca:	2b00      	cmp	r3, #0
24054fcc:	dd06      	ble.n	24054fdc <change_settings+0x9c>
			paddle_color_idx++;
24054fce:	4b26      	ldr	r3, [pc, #152]	@ (24055068 <change_settings+0x128>)
24054fd0:	781b      	ldrb	r3, [r3, #0]
24054fd2:	3301      	adds	r3, #1
24054fd4:	b2da      	uxtb	r2, r3
24054fd6:	4b24      	ldr	r3, [pc, #144]	@ (24055068 <change_settings+0x128>)
24054fd8:	701a      	strb	r2, [r3, #0]
24054fda:	e005      	b.n	24054fe8 <change_settings+0xa8>
		} else {
			paddle_color_idx--;
24054fdc:	4b22      	ldr	r3, [pc, #136]	@ (24055068 <change_settings+0x128>)
24054fde:	781b      	ldrb	r3, [r3, #0]
24054fe0:	3b01      	subs	r3, #1
24054fe2:	b2da      	uxtb	r2, r3
24054fe4:	4b20      	ldr	r3, [pc, #128]	@ (24055068 <change_settings+0x128>)
24054fe6:	701a      	strb	r2, [r3, #0]
		}
		paddle_color_idx = paddle_color_idx % 16;
24054fe8:	4b1f      	ldr	r3, [pc, #124]	@ (24055068 <change_settings+0x128>)
24054fea:	781b      	ldrb	r3, [r3, #0]
24054fec:	f003 030f 	and.w	r3, r3, #15
24054ff0:	b2da      	uxtb	r2, r3
24054ff2:	4b1d      	ldr	r3, [pc, #116]	@ (24055068 <change_settings+0x128>)
24054ff4:	701a      	strb	r2, [r3, #0]
		paddle_color = settings_color_pallete[paddle_color_idx];
24054ff6:	4b1c      	ldr	r3, [pc, #112]	@ (24055068 <change_settings+0x128>)
24054ff8:	781b      	ldrb	r3, [r3, #0]
24054ffa:	461a      	mov	r2, r3
24054ffc:	4b1b      	ldr	r3, [pc, #108]	@ (2405506c <change_settings+0x12c>)
24054ffe:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
24055002:	4b1b      	ldr	r3, [pc, #108]	@ (24055070 <change_settings+0x130>)
24055004:	801a      	strh	r2, [r3, #0]
		break;
24055006:	e024      	b.n	24055052 <change_settings+0x112>
	case 2:
		if (dir > 0) {
24055008:	687b      	ldr	r3, [r7, #4]
2405500a:	2b00      	cmp	r3, #0
2405500c:	dd06      	ble.n	2405501c <change_settings+0xdc>
			ball_color_idx++;
2405500e:	4b19      	ldr	r3, [pc, #100]	@ (24055074 <change_settings+0x134>)
24055010:	781b      	ldrb	r3, [r3, #0]
24055012:	3301      	adds	r3, #1
24055014:	b2da      	uxtb	r2, r3
24055016:	4b17      	ldr	r3, [pc, #92]	@ (24055074 <change_settings+0x134>)
24055018:	701a      	strb	r2, [r3, #0]
2405501a:	e005      	b.n	24055028 <change_settings+0xe8>
		} else {
			ball_color_idx--;
2405501c:	4b15      	ldr	r3, [pc, #84]	@ (24055074 <change_settings+0x134>)
2405501e:	781b      	ldrb	r3, [r3, #0]
24055020:	3b01      	subs	r3, #1
24055022:	b2da      	uxtb	r2, r3
24055024:	4b13      	ldr	r3, [pc, #76]	@ (24055074 <change_settings+0x134>)
24055026:	701a      	strb	r2, [r3, #0]
		}
		ball_color_idx = ball_color_idx % 16;
24055028:	4b12      	ldr	r3, [pc, #72]	@ (24055074 <change_settings+0x134>)
2405502a:	781b      	ldrb	r3, [r3, #0]
2405502c:	f003 030f 	and.w	r3, r3, #15
24055030:	b2da      	uxtb	r2, r3
24055032:	4b10      	ldr	r3, [pc, #64]	@ (24055074 <change_settings+0x134>)
24055034:	701a      	strb	r2, [r3, #0]
		ball_color = settings_color_pallete[ball_color_idx];
24055036:	4b0f      	ldr	r3, [pc, #60]	@ (24055074 <change_settings+0x134>)
24055038:	781b      	ldrb	r3, [r3, #0]
2405503a:	461a      	mov	r2, r3
2405503c:	4b0b      	ldr	r3, [pc, #44]	@ (2405506c <change_settings+0x12c>)
2405503e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
24055042:	4b0d      	ldr	r3, [pc, #52]	@ (24055078 <change_settings+0x138>)
24055044:	801a      	strh	r2, [r3, #0]
		break;
24055046:	e004      	b.n	24055052 <change_settings+0x112>
	case 3:
		in_settings_menu = 0;
24055048:	4b0c      	ldr	r3, [pc, #48]	@ (2405507c <change_settings+0x13c>)
2405504a:	2200      	movs	r2, #0
2405504c:	601a      	str	r2, [r3, #0]
		break;
2405504e:	e000      	b.n	24055052 <change_settings+0x112>
	default:
		break;
24055050:	bf00      	nop
	}
}
24055052:	bf00      	nop
24055054:	370c      	adds	r7, #12
24055056:	46bd      	mov	sp, r7
24055058:	f85d 7b04 	ldr.w	r7, [sp], #4
2405505c:	4770      	bx	lr
2405505e:	bf00      	nop
24055060:	2000026c 	.word	0x2000026c
24055064:	20000260 	.word	0x20000260
24055068:	2000026d 	.word	0x2000026d
2405506c:	200000c0 	.word	0x200000c0
24055070:	200000b2 	.word	0x200000b2
24055074:	2000026e 	.word	0x2000026e
24055078:	200000b4 	.word	0x200000b4
2405507c:	200000b8 	.word	0x200000b8

24055080 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
24055080:	b580      	push	{r7, lr}
24055082:	b088      	sub	sp, #32
24055084:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
24055086:	f001 fc75 	bl	24056974 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
2405508a:	f000 f86b 	bl	24055164 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
2405508e:	f000 f8eb 	bl	24055268 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
24055092:	f000 fc91 	bl	240559b8 <MX_GPIO_Init>
  MX_DMA_Init();
24055096:	f000 fc6f 	bl	24055978 <MX_DMA_Init>
  MX_LTDC_Init();
2405509a:	f000 fa2d 	bl	240554f8 <MX_LTDC_Init>
  MX_SPI2_Init();
2405509e:	f000 fbc1 	bl	24055824 <MX_SPI2_Init>
  MX_OCTOSPI1_Init();
240550a2:	f000 faa9 	bl	240555f8 <MX_OCTOSPI1_Init>
  MX_SAI1_Init();
240550a6:	f000 fb87 	bl	240557b8 <MX_SAI1_Init>
  MX_RTC_Init();
240550aa:	f000 fb05 	bl	240556b8 <MX_RTC_Init>
  MX_DAC1_Init();
240550ae:	f000 f997 	bl	240553e0 <MX_DAC1_Init>
  MX_DAC2_Init();
240550b2:	f000 f9d1 	bl	24055458 <MX_DAC2_Init>
  MX_ADC1_Init();
240550b6:	f000 f91b 	bl	240552f0 <MX_ADC1_Init>
  MX_TIM1_Init();
240550ba:	f000 fc09 	bl	240558d0 <MX_TIM1_Init>
  MX_DMA2D_Init();
240550be:	f000 f9fd 	bl	240554bc <MX_DMA2D_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
240550c2:	f000 f909 	bl	240552d8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	lcd_init(&hspi2, &hltdc);
240550c6:	4922      	ldr	r1, [pc, #136]	@ (24055150 <main+0xd0>)
240550c8:	4822      	ldr	r0, [pc, #136]	@ (24055154 <main+0xd4>)
240550ca:	f7fe fd5b 	bl	24053b84 <lcd_init>
	lcd_backlight_set(backlightLevels[6]);
240550ce:	23b2      	movs	r3, #178	@ 0xb2
240550d0:	4618      	mov	r0, r3
240550d2:	f7fe fd2b 	bl	24053b2c <lcd_backlight_set>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	OSPI_Init(&hospi1);
240550d6:	4820      	ldr	r0, [pc, #128]	@ (24055158 <main+0xd8>)
240550d8:	f7fe fc78 	bl	240539cc <OSPI_Init>

	// Sanity check, sometimes this is triggered
	uint32_t add = 0x90000000;
240550dc:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
240550e0:	61fb      	str	r3, [r7, #28]
	uint32_t *ptr = (uint32_t*) add;
240550e2:	69fb      	ldr	r3, [r7, #28]
240550e4:	61bb      	str	r3, [r7, #24]
	if (*ptr == 0x88888888) {
240550e6:	69bb      	ldr	r3, [r7, #24]
240550e8:	681b      	ldr	r3, [r3, #0]
240550ea:	f1b3 3f88 	cmp.w	r3, #2290649224	@ 0x88888888
240550ee:	d101      	bne.n	240550f4 <main+0x74>
		Error_Handler();
240550f0:	f000 fd62 	bl	24055bb8 <Error_Handler>
	}

	bq24072_init();
240550f4:	f7fd ffe4 	bl	240530c0 <bq24072_init>

	gw_audio_init();
240550f8:	f7fd fc56 	bl	240529a8 <gw_audio_init>

	RTC_TimeTypeDef sTime = { 0 };
240550fc:	1d3b      	adds	r3, r7, #4
240550fe:	2200      	movs	r2, #0
24055100:	601a      	str	r2, [r3, #0]
24055102:	605a      	str	r2, [r3, #4]
24055104:	609a      	str	r2, [r3, #8]
24055106:	60da      	str	r2, [r3, #12]
24055108:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
2405510a:	2300      	movs	r3, #0
2405510c:	603b      	str	r3, [r7, #0]
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
2405510e:	1d3b      	adds	r3, r7, #4
24055110:	2200      	movs	r2, #0
24055112:	4619      	mov	r1, r3
24055114:	4811      	ldr	r0, [pc, #68]	@ (2405515c <main+0xdc>)
24055116:	f00c fd4f 	bl	24061bb8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
2405511a:	463b      	mov	r3, r7
2405511c:	2200      	movs	r2, #0
2405511e:	4619      	mov	r1, r3
24055120:	480e      	ldr	r0, [pc, #56]	@ (2405515c <main+0xdc>)
24055122:	f00c fe2d 	bl	24061d80 <HAL_RTC_GetDate>
	HAL_ADC_Start(&hadc1);
24055126:	480e      	ldr	r0, [pc, #56]	@ (24055160 <main+0xe0>)
24055128:	f002 f87a 	bl	24057220 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
2405512c:	f04f 31ff 	mov.w	r1, #4294967295
24055130:	480b      	ldr	r0, [pc, #44]	@ (24055160 <main+0xe0>)
24055132:	f002 f92f 	bl	24057394 <HAL_ADC_PollForConversion>
	srand(HAL_ADC_GetValue(&hadc1) ^ sTime.SubSeconds);
24055136:	480a      	ldr	r0, [pc, #40]	@ (24055160 <main+0xe0>)
24055138:	f002 fb6e 	bl	24057818 <HAL_ADC_GetValue>
2405513c:	4602      	mov	r2, r0
2405513e:	68bb      	ldr	r3, [r7, #8]
24055140:	4053      	eors	r3, r2
24055142:	4618      	mov	r0, r3
24055144:	f00f f890 	bl	24064268 <srand>

	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		main_menu_init();
24055148:	f7ff fb4a 	bl	240547e0 <main_menu_init>
2405514c:	e7fc      	b.n	24055148 <main+0xc8>
2405514e:	bf00      	nop
24055150:	20000364 	.word	0x20000364
24055154:	200005a0 	.word	0x200005a0
24055158:	2000040c 	.word	0x2000040c
2405515c:	20000468 	.word	0x20000468
24055160:	20000270 	.word	0x20000270

24055164 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
24055164:	b580      	push	{r7, lr}
24055166:	b09c      	sub	sp, #112	@ 0x70
24055168:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
2405516a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
2405516e:	224c      	movs	r2, #76	@ 0x4c
24055170:	2100      	movs	r1, #0
24055172:	4618      	mov	r0, r3
24055174:	f00f fb4e 	bl	24064814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
24055178:	1d3b      	adds	r3, r7, #4
2405517a:	2220      	movs	r2, #32
2405517c:	2100      	movs	r1, #0
2405517e:	4618      	mov	r0, r3
24055180:	f00f fb48 	bl	24064814 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
24055184:	4b36      	ldr	r3, [pc, #216]	@ (24055260 <SystemClock_Config+0xfc>)
24055186:	f04f 32ff 	mov.w	r2, #4294967295
2405518a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
2405518e:	2002      	movs	r0, #2
24055190:	f009 f802 	bl	2405e198 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
24055194:	2300      	movs	r3, #0
24055196:	603b      	str	r3, [r7, #0]
24055198:	4b32      	ldr	r3, [pc, #200]	@ (24055264 <SystemClock_Config+0x100>)
2405519a:	699b      	ldr	r3, [r3, #24]
2405519c:	4a31      	ldr	r2, [pc, #196]	@ (24055264 <SystemClock_Config+0x100>)
2405519e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
240551a2:	6193      	str	r3, [r2, #24]
240551a4:	4b2f      	ldr	r3, [pc, #188]	@ (24055264 <SystemClock_Config+0x100>)
240551a6:	699b      	ldr	r3, [r3, #24]
240551a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
240551ac:	603b      	str	r3, [r7, #0]
240551ae:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
240551b0:	bf00      	nop
240551b2:	4b2c      	ldr	r3, [pc, #176]	@ (24055264 <SystemClock_Config+0x100>)
240551b4:	699b      	ldr	r3, [r3, #24]
240551b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
240551ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
240551be:	d1f8      	bne.n	240551b2 <SystemClock_Config+0x4e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
240551c0:	f008 ffda 	bl	2405e178 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
240551c4:	4b26      	ldr	r3, [pc, #152]	@ (24055260 <SystemClock_Config+0xfc>)
240551c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
240551c8:	4a25      	ldr	r2, [pc, #148]	@ (24055260 <SystemClock_Config+0xfc>)
240551ca:	f023 0318 	bic.w	r3, r3, #24
240551ce:	6713      	str	r3, [r2, #112]	@ 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
240551d0:	230e      	movs	r3, #14
240551d2:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
240551d4:	2301      	movs	r3, #1
240551d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
240551d8:	2301      	movs	r3, #1
240551da:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
240551dc:	2340      	movs	r3, #64	@ 0x40
240551de:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
240551e0:	2301      	movs	r3, #1
240551e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
240551e4:	2302      	movs	r3, #2
240551e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
240551e8:	2300      	movs	r3, #0
240551ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 16;
240551ec:	2310      	movs	r3, #16
240551ee:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 140;
240551f0:	238c      	movs	r3, #140	@ 0x8c
240551f2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
240551f4:	2302      	movs	r3, #2
240551f6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
240551f8:	2302      	movs	r3, #2
240551fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
240551fc:	2302      	movs	r3, #2
240551fe:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
24055200:	2308      	movs	r3, #8
24055202:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
24055204:	2300      	movs	r3, #0
24055206:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
24055208:	2300      	movs	r3, #0
2405520a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
2405520c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
24055210:	4618      	mov	r0, r3
24055212:	f008 fffb 	bl	2405e20c <HAL_RCC_OscConfig>
24055216:	4603      	mov	r3, r0
24055218:	2b00      	cmp	r3, #0
2405521a:	d001      	beq.n	24055220 <SystemClock_Config+0xbc>
  {
    Error_Handler();
2405521c:	f000 fccc 	bl	24055bb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
24055220:	233f      	movs	r3, #63	@ 0x3f
24055222:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
24055224:	2303      	movs	r3, #3
24055226:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
24055228:	2300      	movs	r3, #0
2405522a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
2405522c:	2300      	movs	r3, #0
2405522e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
24055230:	2340      	movs	r3, #64	@ 0x40
24055232:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
24055234:	2340      	movs	r3, #64	@ 0x40
24055236:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
24055238:	f44f 6380 	mov.w	r3, #1024	@ 0x400
2405523c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
2405523e:	2340      	movs	r3, #64	@ 0x40
24055240:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
24055242:	1d3b      	adds	r3, r7, #4
24055244:	2106      	movs	r1, #6
24055246:	4618      	mov	r0, r3
24055248:	f009 fc12 	bl	2405ea70 <HAL_RCC_ClockConfig>
2405524c:	4603      	mov	r3, r0
2405524e:	2b00      	cmp	r3, #0
24055250:	d001      	beq.n	24055256 <SystemClock_Config+0xf2>
  {
    Error_Handler();
24055252:	f000 fcb1 	bl	24055bb8 <Error_Handler>
  }
}
24055256:	bf00      	nop
24055258:	3770      	adds	r7, #112	@ 0x70
2405525a:	46bd      	mov	sp, r7
2405525c:	bd80      	pop	{r7, pc}
2405525e:	bf00      	nop
24055260:	58024400 	.word	0x58024400
24055264:	58024800 	.word	0x58024800

24055268 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
24055268:	b580      	push	{r7, lr}
2405526a:	b0b0      	sub	sp, #192	@ 0xc0
2405526c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
2405526e:	463b      	mov	r3, r7
24055270:	22c0      	movs	r2, #192	@ 0xc0
24055272:	2100      	movs	r1, #0
24055274:	4618      	mov	r0, r3
24055276:	f00f facd 	bl	24064814 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_CKPER
2405527a:	4a16      	ldr	r2, [pc, #88]	@ (240552d4 <PeriphCommonClock_Config+0x6c>)
2405527c:	f04f 0300 	mov.w	r3, #0
24055280:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLL3.PLL3M = 4;
24055284:	2304      	movs	r3, #4
24055286:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 9;
24055288:	2309      	movs	r3, #9
2405528a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
2405528c:	2302      	movs	r3, #2
2405528e:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
24055290:	2302      	movs	r3, #2
24055292:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 24;
24055294:	2318      	movs	r3, #24
24055296:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
24055298:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
2405529c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
2405529e:	2300      	movs	r3, #0
240552a0:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
240552a2:	2300      	movs	r3, #0
240552a4:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
240552a6:	2300      	movs	r3, #0
240552a8:	657b      	str	r3, [r7, #84]	@ 0x54
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
240552aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
240552ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
240552b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
240552b6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
240552ba:	463b      	mov	r3, r7
240552bc:	4618      	mov	r0, r3
240552be:	f009 ff4d 	bl	2405f15c <HAL_RCCEx_PeriphCLKConfig>
240552c2:	4603      	mov	r3, r0
240552c4:	2b00      	cmp	r3, #0
240552c6:	d001      	beq.n	240552cc <PeriphCommonClock_Config+0x64>
  {
    Error_Handler();
240552c8:	f000 fc76 	bl	24055bb8 <Error_Handler>
  }
}
240552cc:	bf00      	nop
240552ce:	37c0      	adds	r7, #192	@ 0xc0
240552d0:	46bd      	mov	sp, r7
240552d2:	bd80      	pop	{r7, pc}
240552d4:	a0080000 	.word	0xa0080000

240552d8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
240552d8:	b580      	push	{r7, lr}
240552da:	af00      	add	r7, sp, #0
  /* OCTOSPI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 0, 0);
240552dc:	2200      	movs	r2, #0
240552de:	2100      	movs	r1, #0
240552e0:	205c      	movs	r0, #92	@ 0x5c
240552e2:	f003 fc0a 	bl	24058afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
240552e6:	205c      	movs	r0, #92	@ 0x5c
240552e8:	f003 fc21 	bl	24058b2e <HAL_NVIC_EnableIRQ>
}
240552ec:	bf00      	nop
240552ee:	bd80      	pop	{r7, pc}

240552f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
240552f0:	b580      	push	{r7, lr}
240552f2:	b08a      	sub	sp, #40	@ 0x28
240552f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
240552f6:	f107 031c 	add.w	r3, r7, #28
240552fa:	2200      	movs	r2, #0
240552fc:	601a      	str	r2, [r3, #0]
240552fe:	605a      	str	r2, [r3, #4]
24055300:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
24055302:	463b      	mov	r3, r7
24055304:	2200      	movs	r2, #0
24055306:	601a      	str	r2, [r3, #0]
24055308:	605a      	str	r2, [r3, #4]
2405530a:	609a      	str	r2, [r3, #8]
2405530c:	60da      	str	r2, [r3, #12]
2405530e:	611a      	str	r2, [r3, #16]
24055310:	615a      	str	r2, [r3, #20]
24055312:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
24055314:	4b2f      	ldr	r3, [pc, #188]	@ (240553d4 <MX_ADC1_Init+0xe4>)
24055316:	4a30      	ldr	r2, [pc, #192]	@ (240553d8 <MX_ADC1_Init+0xe8>)
24055318:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
2405531a:	4b2e      	ldr	r3, [pc, #184]	@ (240553d4 <MX_ADC1_Init+0xe4>)
2405531c:	2200      	movs	r2, #0
2405531e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
24055320:	4b2c      	ldr	r3, [pc, #176]	@ (240553d4 <MX_ADC1_Init+0xe4>)
24055322:	2200      	movs	r2, #0
24055324:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
24055326:	4b2b      	ldr	r3, [pc, #172]	@ (240553d4 <MX_ADC1_Init+0xe4>)
24055328:	2200      	movs	r2, #0
2405532a:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
2405532c:	4b29      	ldr	r3, [pc, #164]	@ (240553d4 <MX_ADC1_Init+0xe4>)
2405532e:	2204      	movs	r2, #4
24055330:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
24055332:	4b28      	ldr	r3, [pc, #160]	@ (240553d4 <MX_ADC1_Init+0xe4>)
24055334:	2200      	movs	r2, #0
24055336:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
24055338:	4b26      	ldr	r3, [pc, #152]	@ (240553d4 <MX_ADC1_Init+0xe4>)
2405533a:	2200      	movs	r2, #0
2405533c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
2405533e:	4b25      	ldr	r3, [pc, #148]	@ (240553d4 <MX_ADC1_Init+0xe4>)
24055340:	2201      	movs	r2, #1
24055342:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
24055344:	4b23      	ldr	r3, [pc, #140]	@ (240553d4 <MX_ADC1_Init+0xe4>)
24055346:	2200      	movs	r2, #0
24055348:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
2405534a:	4b22      	ldr	r3, [pc, #136]	@ (240553d4 <MX_ADC1_Init+0xe4>)
2405534c:	2200      	movs	r2, #0
2405534e:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
24055350:	4b20      	ldr	r3, [pc, #128]	@ (240553d4 <MX_ADC1_Init+0xe4>)
24055352:	2200      	movs	r2, #0
24055354:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
24055356:	4b1f      	ldr	r3, [pc, #124]	@ (240553d4 <MX_ADC1_Init+0xe4>)
24055358:	2200      	movs	r2, #0
2405535a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
2405535c:	4b1d      	ldr	r3, [pc, #116]	@ (240553d4 <MX_ADC1_Init+0xe4>)
2405535e:	2200      	movs	r2, #0
24055360:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
24055362:	4b1c      	ldr	r3, [pc, #112]	@ (240553d4 <MX_ADC1_Init+0xe4>)
24055364:	2200      	movs	r2, #0
24055366:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
24055368:	4b1a      	ldr	r3, [pc, #104]	@ (240553d4 <MX_ADC1_Init+0xe4>)
2405536a:	2200      	movs	r2, #0
2405536c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
24055370:	4818      	ldr	r0, [pc, #96]	@ (240553d4 <MX_ADC1_Init+0xe4>)
24055372:	f001 fdfb 	bl	24056f6c <HAL_ADC_Init>
24055376:	4603      	mov	r3, r0
24055378:	2b00      	cmp	r3, #0
2405537a:	d001      	beq.n	24055380 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
2405537c:	f000 fc1c 	bl	24055bb8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
24055380:	2300      	movs	r3, #0
24055382:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
24055384:	f107 031c 	add.w	r3, r7, #28
24055388:	4619      	mov	r1, r3
2405538a:	4812      	ldr	r0, [pc, #72]	@ (240553d4 <MX_ADC1_Init+0xe4>)
2405538c:	f003 fa28 	bl	240587e0 <HAL_ADCEx_MultiModeConfigChannel>
24055390:	4603      	mov	r3, r0
24055392:	2b00      	cmp	r3, #0
24055394:	d001      	beq.n	2405539a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
24055396:	f000 fc0f 	bl	24055bb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
2405539a:	4b10      	ldr	r3, [pc, #64]	@ (240553dc <MX_ADC1_Init+0xec>)
2405539c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
2405539e:	2306      	movs	r3, #6
240553a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
240553a2:	2300      	movs	r3, #0
240553a4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
240553a6:	f240 73ff 	movw	r3, #2047	@ 0x7ff
240553aa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
240553ac:	2304      	movs	r3, #4
240553ae:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
240553b0:	2300      	movs	r3, #0
240553b2:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
240553b4:	2300      	movs	r3, #0
240553b6:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
240553b8:	463b      	mov	r3, r7
240553ba:	4619      	mov	r1, r3
240553bc:	4805      	ldr	r0, [pc, #20]	@ (240553d4 <MX_ADC1_Init+0xe4>)
240553be:	f002 fc67 	bl	24057c90 <HAL_ADC_ConfigChannel>
240553c2:	4603      	mov	r3, r0
240553c4:	2b00      	cmp	r3, #0
240553c6:	d001      	beq.n	240553cc <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
240553c8:	f000 fbf6 	bl	24055bb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
240553cc:	bf00      	nop
240553ce:	3728      	adds	r7, #40	@ 0x28
240553d0:	46bd      	mov	sp, r7
240553d2:	bd80      	pop	{r7, pc}
240553d4:	20000270 	.word	0x20000270
240553d8:	40022000 	.word	0x40022000
240553dc:	10c00010 	.word	0x10c00010

240553e0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
240553e0:	b580      	push	{r7, lr}
240553e2:	b08a      	sub	sp, #40	@ 0x28
240553e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
240553e6:	1d3b      	adds	r3, r7, #4
240553e8:	2224      	movs	r2, #36	@ 0x24
240553ea:	2100      	movs	r1, #0
240553ec:	4618      	mov	r0, r3
240553ee:	f00f fa11 	bl	24064814 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
240553f2:	4b17      	ldr	r3, [pc, #92]	@ (24055450 <MX_DAC1_Init+0x70>)
240553f4:	4a17      	ldr	r2, [pc, #92]	@ (24055454 <MX_DAC1_Init+0x74>)
240553f6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
240553f8:	4815      	ldr	r0, [pc, #84]	@ (24055450 <MX_DAC1_Init+0x70>)
240553fa:	f003 fbb6 	bl	24058b6a <HAL_DAC_Init>
240553fe:	4603      	mov	r3, r0
24055400:	2b00      	cmp	r3, #0
24055402:	d001      	beq.n	24055408 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
24055404:	f000 fbd8 	bl	24055bb8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
24055408:	2300      	movs	r3, #0
2405540a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
2405540c:	2300      	movs	r3, #0
2405540e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
24055410:	2300      	movs	r3, #0
24055412:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
24055414:	2301      	movs	r3, #1
24055416:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
24055418:	2300      	movs	r3, #0
2405541a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
2405541c:	1d3b      	adds	r3, r7, #4
2405541e:	2200      	movs	r2, #0
24055420:	4619      	mov	r1, r3
24055422:	480b      	ldr	r0, [pc, #44]	@ (24055450 <MX_DAC1_Init+0x70>)
24055424:	f003 fc44 	bl	24058cb0 <HAL_DAC_ConfigChannel>
24055428:	4603      	mov	r3, r0
2405542a:	2b00      	cmp	r3, #0
2405542c:	d001      	beq.n	24055432 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
2405542e:	f000 fbc3 	bl	24055bb8 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
24055432:	1d3b      	adds	r3, r7, #4
24055434:	2210      	movs	r2, #16
24055436:	4619      	mov	r1, r3
24055438:	4805      	ldr	r0, [pc, #20]	@ (24055450 <MX_DAC1_Init+0x70>)
2405543a:	f003 fc39 	bl	24058cb0 <HAL_DAC_ConfigChannel>
2405543e:	4603      	mov	r3, r0
24055440:	2b00      	cmp	r3, #0
24055442:	d001      	beq.n	24055448 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
24055444:	f000 fbb8 	bl	24055bb8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
24055448:	bf00      	nop
2405544a:	3728      	adds	r7, #40	@ 0x28
2405544c:	46bd      	mov	sp, r7
2405544e:	bd80      	pop	{r7, pc}
24055450:	200002d4 	.word	0x200002d4
24055454:	40007400 	.word	0x40007400

24055458 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
24055458:	b580      	push	{r7, lr}
2405545a:	b08a      	sub	sp, #40	@ 0x28
2405545c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
2405545e:	1d3b      	adds	r3, r7, #4
24055460:	2224      	movs	r2, #36	@ 0x24
24055462:	2100      	movs	r1, #0
24055464:	4618      	mov	r0, r3
24055466:	f00f f9d5 	bl	24064814 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
2405546a:	4b12      	ldr	r3, [pc, #72]	@ (240554b4 <MX_DAC2_Init+0x5c>)
2405546c:	4a12      	ldr	r2, [pc, #72]	@ (240554b8 <MX_DAC2_Init+0x60>)
2405546e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
24055470:	4810      	ldr	r0, [pc, #64]	@ (240554b4 <MX_DAC2_Init+0x5c>)
24055472:	f003 fb7a 	bl	24058b6a <HAL_DAC_Init>
24055476:	4603      	mov	r3, r0
24055478:	2b00      	cmp	r3, #0
2405547a:	d001      	beq.n	24055480 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
2405547c:	f000 fb9c 	bl	24055bb8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
24055480:	2300      	movs	r3, #0
24055482:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
24055484:	2300      	movs	r3, #0
24055486:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
24055488:	2300      	movs	r3, #0
2405548a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
2405548c:	2301      	movs	r3, #1
2405548e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
24055490:	2300      	movs	r3, #0
24055492:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
24055494:	1d3b      	adds	r3, r7, #4
24055496:	2200      	movs	r2, #0
24055498:	4619      	mov	r1, r3
2405549a:	4806      	ldr	r0, [pc, #24]	@ (240554b4 <MX_DAC2_Init+0x5c>)
2405549c:	f003 fc08 	bl	24058cb0 <HAL_DAC_ConfigChannel>
240554a0:	4603      	mov	r3, r0
240554a2:	2b00      	cmp	r3, #0
240554a4:	d001      	beq.n	240554aa <MX_DAC2_Init+0x52>
  {
    Error_Handler();
240554a6:	f000 fb87 	bl	24055bb8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
240554aa:	bf00      	nop
240554ac:	3728      	adds	r7, #40	@ 0x28
240554ae:	46bd      	mov	sp, r7
240554b0:	bd80      	pop	{r7, pc}
240554b2:	bf00      	nop
240554b4:	200002e8 	.word	0x200002e8
240554b8:	58003400 	.word	0x58003400

240554bc <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
240554bc:	b580      	push	{r7, lr}
240554be:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
240554c0:	4b0b      	ldr	r3, [pc, #44]	@ (240554f0 <MX_DMA2D_Init+0x34>)
240554c2:	4a0c      	ldr	r2, [pc, #48]	@ (240554f4 <MX_DMA2D_Init+0x38>)
240554c4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
240554c6:	4b0a      	ldr	r3, [pc, #40]	@ (240554f0 <MX_DMA2D_Init+0x34>)
240554c8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
240554cc:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
240554ce:	4b08      	ldr	r3, [pc, #32]	@ (240554f0 <MX_DMA2D_Init+0x34>)
240554d0:	2202      	movs	r2, #2
240554d2:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
240554d4:	4b06      	ldr	r3, [pc, #24]	@ (240554f0 <MX_DMA2D_Init+0x34>)
240554d6:	2200      	movs	r2, #0
240554d8:	60da      	str	r2, [r3, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
240554da:	4805      	ldr	r0, [pc, #20]	@ (240554f0 <MX_DMA2D_Init+0x34>)
240554dc:	f006 fc14 	bl	2405bd08 <HAL_DMA2D_Init>
240554e0:	4603      	mov	r3, r0
240554e2:	2b00      	cmp	r3, #0
240554e4:	d001      	beq.n	240554ea <MX_DMA2D_Init+0x2e>
  {
    Error_Handler();
240554e6:	f000 fb67 	bl	24055bb8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
240554ea:	bf00      	nop
240554ec:	bd80      	pop	{r7, pc}
240554ee:	bf00      	nop
240554f0:	200002fc 	.word	0x200002fc
240554f4:	52001000 	.word	0x52001000

240554f8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
240554f8:	b580      	push	{r7, lr}
240554fa:	b08e      	sub	sp, #56	@ 0x38
240554fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
240554fe:	1d3b      	adds	r3, r7, #4
24055500:	2234      	movs	r2, #52	@ 0x34
24055502:	2100      	movs	r1, #0
24055504:	4618      	mov	r0, r3
24055506:	f00f f985 	bl	24064814 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
2405550a:	4b39      	ldr	r3, [pc, #228]	@ (240555f0 <MX_LTDC_Init+0xf8>)
2405550c:	4a39      	ldr	r2, [pc, #228]	@ (240555f4 <MX_LTDC_Init+0xfc>)
2405550e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
24055510:	4b37      	ldr	r3, [pc, #220]	@ (240555f0 <MX_LTDC_Init+0xf8>)
24055512:	2200      	movs	r2, #0
24055514:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
24055516:	4b36      	ldr	r3, [pc, #216]	@ (240555f0 <MX_LTDC_Init+0xf8>)
24055518:	2200      	movs	r2, #0
2405551a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
2405551c:	4b34      	ldr	r3, [pc, #208]	@ (240555f0 <MX_LTDC_Init+0xf8>)
2405551e:	2200      	movs	r2, #0
24055520:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IIPC;
24055522:	4b33      	ldr	r3, [pc, #204]	@ (240555f0 <MX_LTDC_Init+0xf8>)
24055524:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
24055528:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
2405552a:	4b31      	ldr	r3, [pc, #196]	@ (240555f0 <MX_LTDC_Init+0xf8>)
2405552c:	2209      	movs	r2, #9
2405552e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
24055530:	4b2f      	ldr	r3, [pc, #188]	@ (240555f0 <MX_LTDC_Init+0xf8>)
24055532:	2201      	movs	r2, #1
24055534:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 60;
24055536:	4b2e      	ldr	r3, [pc, #184]	@ (240555f0 <MX_LTDC_Init+0xf8>)
24055538:	223c      	movs	r2, #60	@ 0x3c
2405553a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 7;
2405553c:	4b2c      	ldr	r3, [pc, #176]	@ (240555f0 <MX_LTDC_Init+0xf8>)
2405553e:	2207      	movs	r2, #7
24055540:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 380;
24055542:	4b2b      	ldr	r3, [pc, #172]	@ (240555f0 <MX_LTDC_Init+0xf8>)
24055544:	f44f 72be 	mov.w	r2, #380	@ 0x17c
24055548:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 247;
2405554a:	4b29      	ldr	r3, [pc, #164]	@ (240555f0 <MX_LTDC_Init+0xf8>)
2405554c:	22f7      	movs	r2, #247	@ 0xf7
2405554e:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 392;
24055550:	4b27      	ldr	r3, [pc, #156]	@ (240555f0 <MX_LTDC_Init+0xf8>)
24055552:	f44f 72c4 	mov.w	r2, #392	@ 0x188
24055556:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 255;
24055558:	4b25      	ldr	r3, [pc, #148]	@ (240555f0 <MX_LTDC_Init+0xf8>)
2405555a:	22ff      	movs	r2, #255	@ 0xff
2405555c:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
2405555e:	4b24      	ldr	r3, [pc, #144]	@ (240555f0 <MX_LTDC_Init+0xf8>)
24055560:	2200      	movs	r2, #0
24055562:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
24055566:	4b22      	ldr	r3, [pc, #136]	@ (240555f0 <MX_LTDC_Init+0xf8>)
24055568:	2200      	movs	r2, #0
2405556a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
2405556e:	4b20      	ldr	r3, [pc, #128]	@ (240555f0 <MX_LTDC_Init+0xf8>)
24055570:	2200      	movs	r2, #0
24055572:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
24055576:	481e      	ldr	r0, [pc, #120]	@ (240555f0 <MX_LTDC_Init+0xf8>)
24055578:	f006 fe30 	bl	2405c1dc <HAL_LTDC_Init>
2405557c:	4603      	mov	r3, r0
2405557e:	2b00      	cmp	r3, #0
24055580:	d001      	beq.n	24055586 <MX_LTDC_Init+0x8e>
  {
    Error_Handler();
24055582:	f000 fb19 	bl	24055bb8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
24055586:	2300      	movs	r3, #0
24055588:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 320;
2405558a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
2405558e:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
24055590:	2300      	movs	r3, #0
24055592:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 240;
24055594:	23f0      	movs	r3, #240	@ 0xf0
24055596:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
24055598:	2302      	movs	r3, #2
2405559a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
2405559c:	23ff      	movs	r3, #255	@ 0xff
2405559e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 255;
240555a0:	23ff      	movs	r3, #255	@ 0xff
240555a2:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
240555a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
240555a8:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
240555aa:	2305      	movs	r3, #5
240555ac:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0x24000000;
240555ae:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
240555b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 320;
240555b4:	f44f 73a0 	mov.w	r3, #320	@ 0x140
240555b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 240;
240555ba:	23f0      	movs	r3, #240	@ 0xf0
240555bc:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
240555be:	2300      	movs	r3, #0
240555c0:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 255;
240555c4:	23ff      	movs	r3, #255	@ 0xff
240555c6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
240555ca:	2300      	movs	r3, #0
240555cc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
240555d0:	1d3b      	adds	r3, r7, #4
240555d2:	2200      	movs	r2, #0
240555d4:	4619      	mov	r1, r3
240555d6:	4806      	ldr	r0, [pc, #24]	@ (240555f0 <MX_LTDC_Init+0xf8>)
240555d8:	f006 ff88 	bl	2405c4ec <HAL_LTDC_ConfigLayer>
240555dc:	4603      	mov	r3, r0
240555de:	2b00      	cmp	r3, #0
240555e0:	d001      	beq.n	240555e6 <MX_LTDC_Init+0xee>
  {
    Error_Handler();
240555e2:	f000 fae9 	bl	24055bb8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
240555e6:	bf00      	nop
240555e8:	3738      	adds	r7, #56	@ 0x38
240555ea:	46bd      	mov	sp, r7
240555ec:	bd80      	pop	{r7, pc}
240555ee:	bf00      	nop
240555f0:	20000364 	.word	0x20000364
240555f4:	50001000 	.word	0x50001000

240555f8 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
240555f8:	b580      	push	{r7, lr}
240555fa:	b086      	sub	sp, #24
240555fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
240555fe:	463b      	mov	r3, r7
24055600:	2200      	movs	r2, #0
24055602:	601a      	str	r2, [r3, #0]
24055604:	605a      	str	r2, [r3, #4]
24055606:	609a      	str	r2, [r3, #8]
24055608:	60da      	str	r2, [r3, #12]
2405560a:	611a      	str	r2, [r3, #16]
2405560c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
2405560e:	4b28      	ldr	r3, [pc, #160]	@ (240556b0 <MX_OCTOSPI1_Init+0xb8>)
24055610:	4a28      	ldr	r2, [pc, #160]	@ (240556b4 <MX_OCTOSPI1_Init+0xbc>)
24055612:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 4;
24055614:	4b26      	ldr	r3, [pc, #152]	@ (240556b0 <MX_OCTOSPI1_Init+0xb8>)
24055616:	2204      	movs	r2, #4
24055618:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
2405561a:	4b25      	ldr	r3, [pc, #148]	@ (240556b0 <MX_OCTOSPI1_Init+0xb8>)
2405561c:	2200      	movs	r2, #0
2405561e:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
24055620:	4b23      	ldr	r3, [pc, #140]	@ (240556b0 <MX_OCTOSPI1_Init+0xb8>)
24055622:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
24055626:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 24;
24055628:	4b21      	ldr	r3, [pc, #132]	@ (240556b0 <MX_OCTOSPI1_Init+0xb8>)
2405562a:	2218      	movs	r2, #24
2405562c:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 2;
2405562e:	4b20      	ldr	r3, [pc, #128]	@ (240556b0 <MX_OCTOSPI1_Init+0xb8>)
24055630:	2202      	movs	r2, #2
24055632:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
24055634:	4b1e      	ldr	r3, [pc, #120]	@ (240556b0 <MX_OCTOSPI1_Init+0xb8>)
24055636:	2200      	movs	r2, #0
24055638:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
2405563a:	4b1d      	ldr	r3, [pc, #116]	@ (240556b0 <MX_OCTOSPI1_Init+0xb8>)
2405563c:	2200      	movs	r2, #0
2405563e:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
24055640:	4b1b      	ldr	r3, [pc, #108]	@ (240556b0 <MX_OCTOSPI1_Init+0xb8>)
24055642:	2200      	movs	r2, #0
24055644:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
24055646:	4b1a      	ldr	r3, [pc, #104]	@ (240556b0 <MX_OCTOSPI1_Init+0xb8>)
24055648:	2201      	movs	r2, #1
2405564a:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
2405564c:	4b18      	ldr	r3, [pc, #96]	@ (240556b0 <MX_OCTOSPI1_Init+0xb8>)
2405564e:	2200      	movs	r2, #0
24055650:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
24055652:	4b17      	ldr	r3, [pc, #92]	@ (240556b0 <MX_OCTOSPI1_Init+0xb8>)
24055654:	2200      	movs	r2, #0
24055656:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
24055658:	4b15      	ldr	r3, [pc, #84]	@ (240556b0 <MX_OCTOSPI1_Init+0xb8>)
2405565a:	2200      	movs	r2, #0
2405565c:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
2405565e:	4b14      	ldr	r3, [pc, #80]	@ (240556b0 <MX_OCTOSPI1_Init+0xb8>)
24055660:	2208      	movs	r2, #8
24055662:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
24055664:	4b12      	ldr	r3, [pc, #72]	@ (240556b0 <MX_OCTOSPI1_Init+0xb8>)
24055666:	2200      	movs	r2, #0
24055668:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
2405566a:	4b11      	ldr	r3, [pc, #68]	@ (240556b0 <MX_OCTOSPI1_Init+0xb8>)
2405566c:	2200      	movs	r2, #0
2405566e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
24055670:	480f      	ldr	r0, [pc, #60]	@ (240556b0 <MX_OCTOSPI1_Init+0xb8>)
24055672:	f007 f9a1 	bl	2405c9b8 <HAL_OSPI_Init>
24055676:	4603      	mov	r3, r0
24055678:	2b00      	cmp	r3, #0
2405567a:	d001      	beq.n	24055680 <MX_OCTOSPI1_Init+0x88>
  {
    Error_Handler();
2405567c:	f000 fa9c 	bl	24055bb8 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
24055680:	2301      	movs	r3, #1
24055682:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.NCSPort = 1;
24055684:	2301      	movs	r3, #1
24055686:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
24055688:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
2405568c:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
2405568e:	463b      	mov	r3, r7
24055690:	f241 3288 	movw	r2, #5000	@ 0x1388
24055694:	4619      	mov	r1, r3
24055696:	4806      	ldr	r0, [pc, #24]	@ (240556b0 <MX_OCTOSPI1_Init+0xb8>)
24055698:	f007 fdde 	bl	2405d258 <HAL_OSPIM_Config>
2405569c:	4603      	mov	r3, r0
2405569e:	2b00      	cmp	r3, #0
240556a0:	d001      	beq.n	240556a6 <MX_OCTOSPI1_Init+0xae>
  {
    Error_Handler();
240556a2:	f000 fa89 	bl	24055bb8 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
240556a6:	bf00      	nop
240556a8:	3718      	adds	r7, #24
240556aa:	46bd      	mov	sp, r7
240556ac:	bd80      	pop	{r7, pc}
240556ae:	bf00      	nop
240556b0:	2000040c 	.word	0x2000040c
240556b4:	52005000 	.word	0x52005000

240556b8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
240556b8:	b580      	push	{r7, lr}
240556ba:	b086      	sub	sp, #24
240556bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
240556be:	1d3b      	adds	r3, r7, #4
240556c0:	2200      	movs	r2, #0
240556c2:	601a      	str	r2, [r3, #0]
240556c4:	605a      	str	r2, [r3, #4]
240556c6:	609a      	str	r2, [r3, #8]
240556c8:	60da      	str	r2, [r3, #12]
240556ca:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
240556cc:	2300      	movs	r3, #0
240556ce:	603b      	str	r3, [r7, #0]

  /* USER CODE BEGIN RTC_Init 1 */
	hrtc.Instance = RTC;
240556d0:	4b36      	ldr	r3, [pc, #216]	@ (240557ac <MX_RTC_Init+0xf4>)
240556d2:	4a37      	ldr	r2, [pc, #220]	@ (240557b0 <MX_RTC_Init+0xf8>)
240556d4:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
240556d6:	4b35      	ldr	r3, [pc, #212]	@ (240557ac <MX_RTC_Init+0xf4>)
240556d8:	2200      	movs	r2, #0
240556da:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
240556dc:	4b33      	ldr	r3, [pc, #204]	@ (240557ac <MX_RTC_Init+0xf4>)
240556de:	227f      	movs	r2, #127	@ 0x7f
240556e0:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
240556e2:	4b32      	ldr	r3, [pc, #200]	@ (240557ac <MX_RTC_Init+0xf4>)
240556e4:	22ff      	movs	r2, #255	@ 0xff
240556e6:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
240556e8:	4b30      	ldr	r3, [pc, #192]	@ (240557ac <MX_RTC_Init+0xf4>)
240556ea:	2200      	movs	r2, #0
240556ec:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
240556ee:	4b2f      	ldr	r3, [pc, #188]	@ (240557ac <MX_RTC_Init+0xf4>)
240556f0:	2200      	movs	r2, #0
240556f2:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
240556f4:	4b2d      	ldr	r3, [pc, #180]	@ (240557ac <MX_RTC_Init+0xf4>)
240556f6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
240556fa:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
240556fc:	4b2b      	ldr	r3, [pc, #172]	@ (240557ac <MX_RTC_Init+0xf4>)
240556fe:	2200      	movs	r2, #0
24055700:	615a      	str	r2, [r3, #20]
	if ((RCC->BDCR & RCC_BDCR_RTCEN) != 0) {
24055702:	4b2c      	ldr	r3, [pc, #176]	@ (240557b4 <MX_RTC_Init+0xfc>)
24055704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
24055706:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
2405570a:	2b00      	cmp	r3, #0
2405570c:	d002      	beq.n	24055714 <MX_RTC_Init+0x5c>
		HAL_PWR_EnableBkUpAccess();
2405570e:	f008 fd33 	bl	2405e178 <HAL_PWR_EnableBkUpAccess>
24055712:	e048      	b.n	240557a6 <MX_RTC_Init+0xee>
	}
  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
24055714:	4b25      	ldr	r3, [pc, #148]	@ (240557ac <MX_RTC_Init+0xf4>)
24055716:	4a26      	ldr	r2, [pc, #152]	@ (240557b0 <MX_RTC_Init+0xf8>)
24055718:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
2405571a:	4b24      	ldr	r3, [pc, #144]	@ (240557ac <MX_RTC_Init+0xf4>)
2405571c:	2200      	movs	r2, #0
2405571e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
24055720:	4b22      	ldr	r3, [pc, #136]	@ (240557ac <MX_RTC_Init+0xf4>)
24055722:	227f      	movs	r2, #127	@ 0x7f
24055724:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
24055726:	4b21      	ldr	r3, [pc, #132]	@ (240557ac <MX_RTC_Init+0xf4>)
24055728:	22ff      	movs	r2, #255	@ 0xff
2405572a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
2405572c:	4b1f      	ldr	r3, [pc, #124]	@ (240557ac <MX_RTC_Init+0xf4>)
2405572e:	2200      	movs	r2, #0
24055730:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
24055732:	4b1e      	ldr	r3, [pc, #120]	@ (240557ac <MX_RTC_Init+0xf4>)
24055734:	2200      	movs	r2, #0
24055736:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
24055738:	4b1c      	ldr	r3, [pc, #112]	@ (240557ac <MX_RTC_Init+0xf4>)
2405573a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
2405573e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
24055740:	4b1a      	ldr	r3, [pc, #104]	@ (240557ac <MX_RTC_Init+0xf4>)
24055742:	2200      	movs	r2, #0
24055744:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
24055746:	4819      	ldr	r0, [pc, #100]	@ (240557ac <MX_RTC_Init+0xf4>)
24055748:	f00c f912 	bl	24061970 <HAL_RTC_Init>
2405574c:	4603      	mov	r3, r0
2405574e:	2b00      	cmp	r3, #0
24055750:	d001      	beq.n	24055756 <MX_RTC_Init+0x9e>
  {
    Error_Handler();
24055752:	f000 fa31 	bl	24055bb8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
24055756:	2300      	movs	r3, #0
24055758:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
2405575a:	2300      	movs	r3, #0
2405575c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
2405575e:	2300      	movs	r3, #0
24055760:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
24055762:	2300      	movs	r3, #0
24055764:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
24055766:	2300      	movs	r3, #0
24055768:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
2405576a:	1d3b      	adds	r3, r7, #4
2405576c:	2200      	movs	r2, #0
2405576e:	4619      	mov	r1, r3
24055770:	480e      	ldr	r0, [pc, #56]	@ (240557ac <MX_RTC_Init+0xf4>)
24055772:	f00c f983 	bl	24061a7c <HAL_RTC_SetTime>
24055776:	4603      	mov	r3, r0
24055778:	2b00      	cmp	r3, #0
2405577a:	d001      	beq.n	24055780 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
2405577c:	f000 fa1c 	bl	24055bb8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
24055780:	2301      	movs	r3, #1
24055782:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
24055784:	2301      	movs	r3, #1
24055786:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
24055788:	2301      	movs	r3, #1
2405578a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
2405578c:	2300      	movs	r3, #0
2405578e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
24055790:	463b      	mov	r3, r7
24055792:	2200      	movs	r2, #0
24055794:	4619      	mov	r1, r3
24055796:	4805      	ldr	r0, [pc, #20]	@ (240557ac <MX_RTC_Init+0xf4>)
24055798:	f00c fa6a 	bl	24061c70 <HAL_RTC_SetDate>
2405579c:	4603      	mov	r3, r0
2405579e:	2b00      	cmp	r3, #0
240557a0:	d001      	beq.n	240557a6 <MX_RTC_Init+0xee>
  {
    Error_Handler();
240557a2:	f000 fa09 	bl	24055bb8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
240557a6:	3718      	adds	r7, #24
240557a8:	46bd      	mov	sp, r7
240557aa:	bd80      	pop	{r7, pc}
240557ac:	20000468 	.word	0x20000468
240557b0:	58004000 	.word	0x58004000
240557b4:	58024400 	.word	0x58024400

240557b8 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
240557b8:	b580      	push	{r7, lr}
240557ba:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
240557bc:	4b17      	ldr	r3, [pc, #92]	@ (2405581c <MX_SAI1_Init+0x64>)
240557be:	4a18      	ldr	r2, [pc, #96]	@ (24055820 <MX_SAI1_Init+0x68>)
240557c0:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
240557c2:	4b16      	ldr	r3, [pc, #88]	@ (2405581c <MX_SAI1_Init+0x64>)
240557c4:	2200      	movs	r2, #0
240557c6:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
240557c8:	4b14      	ldr	r3, [pc, #80]	@ (2405581c <MX_SAI1_Init+0x64>)
240557ca:	2200      	movs	r2, #0
240557cc:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
240557ce:	4b13      	ldr	r3, [pc, #76]	@ (2405581c <MX_SAI1_Init+0x64>)
240557d0:	2200      	movs	r2, #0
240557d2:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
240557d4:	4b11      	ldr	r3, [pc, #68]	@ (2405581c <MX_SAI1_Init+0x64>)
240557d6:	2200      	movs	r2, #0
240557d8:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_FULL;
240557da:	4b10      	ldr	r3, [pc, #64]	@ (2405581c <MX_SAI1_Init+0x64>)
240557dc:	2204      	movs	r2, #4
240557de:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
240557e0:	4b0e      	ldr	r3, [pc, #56]	@ (2405581c <MX_SAI1_Init+0x64>)
240557e2:	f64b 3280 	movw	r2, #48000	@ 0xbb80
240557e6:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
240557e8:	4b0c      	ldr	r3, [pc, #48]	@ (2405581c <MX_SAI1_Init+0x64>)
240557ea:	2200      	movs	r2, #0
240557ec:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_MONOMODE;
240557ee:	4b0b      	ldr	r3, [pc, #44]	@ (2405581c <MX_SAI1_Init+0x64>)
240557f0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
240557f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
240557f6:	4b09      	ldr	r3, [pc, #36]	@ (2405581c <MX_SAI1_Init+0x64>)
240557f8:	2200      	movs	r2, #0
240557fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
240557fc:	4b07      	ldr	r3, [pc, #28]	@ (2405581c <MX_SAI1_Init+0x64>)
240557fe:	2200      	movs	r2, #0
24055800:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
24055802:	2302      	movs	r3, #2
24055804:	2200      	movs	r2, #0
24055806:	2100      	movs	r1, #0
24055808:	4804      	ldr	r0, [pc, #16]	@ (2405581c <MX_SAI1_Init+0x64>)
2405580a:	f00c fbd9 	bl	24061fc0 <HAL_SAI_InitProtocol>
2405580e:	4603      	mov	r3, r0
24055810:	2b00      	cmp	r3, #0
24055812:	d001      	beq.n	24055818 <MX_SAI1_Init+0x60>
  {
    Error_Handler();
24055814:	f000 f9d0 	bl	24055bb8 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
24055818:	bf00      	nop
2405581a:	bd80      	pop	{r7, pc}
2405581c:	20000490 	.word	0x20000490
24055820:	40015804 	.word	0x40015804

24055824 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
24055824:	b580      	push	{r7, lr}
24055826:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
24055828:	4b27      	ldr	r3, [pc, #156]	@ (240558c8 <MX_SPI2_Init+0xa4>)
2405582a:	4a28      	ldr	r2, [pc, #160]	@ (240558cc <MX_SPI2_Init+0xa8>)
2405582c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
2405582e:	4b26      	ldr	r3, [pc, #152]	@ (240558c8 <MX_SPI2_Init+0xa4>)
24055830:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
24055834:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
24055836:	4b24      	ldr	r3, [pc, #144]	@ (240558c8 <MX_SPI2_Init+0xa4>)
24055838:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
2405583c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
2405583e:	4b22      	ldr	r3, [pc, #136]	@ (240558c8 <MX_SPI2_Init+0xa4>)
24055840:	2207      	movs	r2, #7
24055842:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
24055844:	4b20      	ldr	r3, [pc, #128]	@ (240558c8 <MX_SPI2_Init+0xa4>)
24055846:	2200      	movs	r2, #0
24055848:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
2405584a:	4b1f      	ldr	r3, [pc, #124]	@ (240558c8 <MX_SPI2_Init+0xa4>)
2405584c:	2200      	movs	r2, #0
2405584e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
24055850:	4b1d      	ldr	r3, [pc, #116]	@ (240558c8 <MX_SPI2_Init+0xa4>)
24055852:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
24055856:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
24055858:	4b1b      	ldr	r3, [pc, #108]	@ (240558c8 <MX_SPI2_Init+0xa4>)
2405585a:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
2405585e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
24055860:	4b19      	ldr	r3, [pc, #100]	@ (240558c8 <MX_SPI2_Init+0xa4>)
24055862:	2200      	movs	r2, #0
24055864:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
24055866:	4b18      	ldr	r3, [pc, #96]	@ (240558c8 <MX_SPI2_Init+0xa4>)
24055868:	2200      	movs	r2, #0
2405586a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
2405586c:	4b16      	ldr	r3, [pc, #88]	@ (240558c8 <MX_SPI2_Init+0xa4>)
2405586e:	2200      	movs	r2, #0
24055870:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
24055872:	4b15      	ldr	r3, [pc, #84]	@ (240558c8 <MX_SPI2_Init+0xa4>)
24055874:	2200      	movs	r2, #0
24055876:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
24055878:	4b13      	ldr	r3, [pc, #76]	@ (240558c8 <MX_SPI2_Init+0xa4>)
2405587a:	2200      	movs	r2, #0
2405587c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
2405587e:	4b12      	ldr	r3, [pc, #72]	@ (240558c8 <MX_SPI2_Init+0xa4>)
24055880:	2200      	movs	r2, #0
24055882:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
24055884:	4b10      	ldr	r3, [pc, #64]	@ (240558c8 <MX_SPI2_Init+0xa4>)
24055886:	2200      	movs	r2, #0
24055888:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
2405588a:	4b0f      	ldr	r3, [pc, #60]	@ (240558c8 <MX_SPI2_Init+0xa4>)
2405588c:	2200      	movs	r2, #0
2405588e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
24055890:	4b0d      	ldr	r3, [pc, #52]	@ (240558c8 <MX_SPI2_Init+0xa4>)
24055892:	2200      	movs	r2, #0
24055894:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
24055896:	4b0c      	ldr	r3, [pc, #48]	@ (240558c8 <MX_SPI2_Init+0xa4>)
24055898:	2200      	movs	r2, #0
2405589a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
2405589c:	4b0a      	ldr	r3, [pc, #40]	@ (240558c8 <MX_SPI2_Init+0xa4>)
2405589e:	2200      	movs	r2, #0
240558a0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
240558a2:	4b09      	ldr	r3, [pc, #36]	@ (240558c8 <MX_SPI2_Init+0xa4>)
240558a4:	2200      	movs	r2, #0
240558a6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
240558a8:	4b07      	ldr	r3, [pc, #28]	@ (240558c8 <MX_SPI2_Init+0xa4>)
240558aa:	2200      	movs	r2, #0
240558ac:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
240558ae:	4b06      	ldr	r3, [pc, #24]	@ (240558c8 <MX_SPI2_Init+0xa4>)
240558b0:	2200      	movs	r2, #0
240558b2:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
240558b4:	4804      	ldr	r0, [pc, #16]	@ (240558c8 <MX_SPI2_Init+0xa4>)
240558b6:	f00d fb0f 	bl	24062ed8 <HAL_SPI_Init>
240558ba:	4603      	mov	r3, r0
240558bc:	2b00      	cmp	r3, #0
240558be:	d001      	beq.n	240558c4 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
240558c0:	f000 f97a 	bl	24055bb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
240558c4:	bf00      	nop
240558c6:	bd80      	pop	{r7, pc}
240558c8:	200005a0 	.word	0x200005a0
240558cc:	40003800 	.word	0x40003800

240558d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
240558d0:	b580      	push	{r7, lr}
240558d2:	b088      	sub	sp, #32
240558d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
240558d6:	f107 0310 	add.w	r3, r7, #16
240558da:	2200      	movs	r2, #0
240558dc:	601a      	str	r2, [r3, #0]
240558de:	605a      	str	r2, [r3, #4]
240558e0:	609a      	str	r2, [r3, #8]
240558e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
240558e4:	1d3b      	adds	r3, r7, #4
240558e6:	2200      	movs	r2, #0
240558e8:	601a      	str	r2, [r3, #0]
240558ea:	605a      	str	r2, [r3, #4]
240558ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
240558ee:	4b20      	ldr	r3, [pc, #128]	@ (24055970 <MX_TIM1_Init+0xa0>)
240558f0:	4a20      	ldr	r2, [pc, #128]	@ (24055974 <MX_TIM1_Init+0xa4>)
240558f2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 14000;
240558f4:	4b1e      	ldr	r3, [pc, #120]	@ (24055970 <MX_TIM1_Init+0xa0>)
240558f6:	f243 62b0 	movw	r2, #14000	@ 0x36b0
240558fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
240558fc:	4b1c      	ldr	r3, [pc, #112]	@ (24055970 <MX_TIM1_Init+0xa0>)
240558fe:	2200      	movs	r2, #0
24055900:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000;
24055902:	4b1b      	ldr	r3, [pc, #108]	@ (24055970 <MX_TIM1_Init+0xa0>)
24055904:	f24c 3250 	movw	r2, #50000	@ 0xc350
24055908:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
2405590a:	4b19      	ldr	r3, [pc, #100]	@ (24055970 <MX_TIM1_Init+0xa0>)
2405590c:	2200      	movs	r2, #0
2405590e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
24055910:	4b17      	ldr	r3, [pc, #92]	@ (24055970 <MX_TIM1_Init+0xa0>)
24055912:	2200      	movs	r2, #0
24055914:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
24055916:	4b16      	ldr	r3, [pc, #88]	@ (24055970 <MX_TIM1_Init+0xa0>)
24055918:	2200      	movs	r2, #0
2405591a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
2405591c:	4814      	ldr	r0, [pc, #80]	@ (24055970 <MX_TIM1_Init+0xa0>)
2405591e:	f00d fed6 	bl	240636ce <HAL_TIM_Base_Init>
24055922:	4603      	mov	r3, r0
24055924:	2b00      	cmp	r3, #0
24055926:	d001      	beq.n	2405592c <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
24055928:	f000 f946 	bl	24055bb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
2405592c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
24055930:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
24055932:	f107 0310 	add.w	r3, r7, #16
24055936:	4619      	mov	r1, r3
24055938:	480d      	ldr	r0, [pc, #52]	@ (24055970 <MX_TIM1_Init+0xa0>)
2405593a:	f00e f89f 	bl	24063a7c <HAL_TIM_ConfigClockSource>
2405593e:	4603      	mov	r3, r0
24055940:	2b00      	cmp	r3, #0
24055942:	d001      	beq.n	24055948 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
24055944:	f000 f938 	bl	24055bb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
24055948:	2300      	movs	r3, #0
2405594a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
2405594c:	2300      	movs	r3, #0
2405594e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
24055950:	2300      	movs	r3, #0
24055952:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
24055954:	1d3b      	adds	r3, r7, #4
24055956:	4619      	mov	r1, r3
24055958:	4805      	ldr	r0, [pc, #20]	@ (24055970 <MX_TIM1_Init+0xa0>)
2405595a:	f00e fafd 	bl	24063f58 <HAL_TIMEx_MasterConfigSynchronization>
2405595e:	4603      	mov	r3, r0
24055960:	2b00      	cmp	r3, #0
24055962:	d001      	beq.n	24055968 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
24055964:	f000 f928 	bl	24055bb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
24055968:	bf00      	nop
2405596a:	3720      	adds	r7, #32
2405596c:	46bd      	mov	sp, r7
2405596e:	bd80      	pop	{r7, pc}
24055970:	20000628 	.word	0x20000628
24055974:	40010000 	.word	0x40010000

24055978 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
24055978:	b580      	push	{r7, lr}
2405597a:	b082      	sub	sp, #8
2405597c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
2405597e:	4b0d      	ldr	r3, [pc, #52]	@ (240559b4 <MX_DMA_Init+0x3c>)
24055980:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
24055984:	4a0b      	ldr	r2, [pc, #44]	@ (240559b4 <MX_DMA_Init+0x3c>)
24055986:	f043 0301 	orr.w	r3, r3, #1
2405598a:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
2405598e:	4b09      	ldr	r3, [pc, #36]	@ (240559b4 <MX_DMA_Init+0x3c>)
24055990:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
24055994:	f003 0301 	and.w	r3, r3, #1
24055998:	607b      	str	r3, [r7, #4]
2405599a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
2405599c:	2200      	movs	r2, #0
2405599e:	2100      	movs	r1, #0
240559a0:	200b      	movs	r0, #11
240559a2:	f003 f8aa 	bl	24058afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
240559a6:	200b      	movs	r0, #11
240559a8:	f003 f8c1 	bl	24058b2e <HAL_NVIC_EnableIRQ>

}
240559ac:	bf00      	nop
240559ae:	3708      	adds	r7, #8
240559b0:	46bd      	mov	sp, r7
240559b2:	bd80      	pop	{r7, pc}
240559b4:	58024400 	.word	0x58024400

240559b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
240559b8:	b580      	push	{r7, lr}
240559ba:	b08a      	sub	sp, #40	@ 0x28
240559bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
240559be:	f107 0314 	add.w	r3, r7, #20
240559c2:	2200      	movs	r2, #0
240559c4:	601a      	str	r2, [r3, #0]
240559c6:	605a      	str	r2, [r3, #4]
240559c8:	609a      	str	r2, [r3, #8]
240559ca:	60da      	str	r2, [r3, #12]
240559cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
240559ce:	4b74      	ldr	r3, [pc, #464]	@ (24055ba0 <MX_GPIO_Init+0x1e8>)
240559d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
240559d4:	4a72      	ldr	r2, [pc, #456]	@ (24055ba0 <MX_GPIO_Init+0x1e8>)
240559d6:	f043 0310 	orr.w	r3, r3, #16
240559da:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
240559de:	4b70      	ldr	r3, [pc, #448]	@ (24055ba0 <MX_GPIO_Init+0x1e8>)
240559e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
240559e4:	f003 0310 	and.w	r3, r3, #16
240559e8:	613b      	str	r3, [r7, #16]
240559ea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
240559ec:	4b6c      	ldr	r3, [pc, #432]	@ (24055ba0 <MX_GPIO_Init+0x1e8>)
240559ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
240559f2:	4a6b      	ldr	r2, [pc, #428]	@ (24055ba0 <MX_GPIO_Init+0x1e8>)
240559f4:	f043 0304 	orr.w	r3, r3, #4
240559f8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
240559fc:	4b68      	ldr	r3, [pc, #416]	@ (24055ba0 <MX_GPIO_Init+0x1e8>)
240559fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
24055a02:	f003 0304 	and.w	r3, r3, #4
24055a06:	60fb      	str	r3, [r7, #12]
24055a08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
24055a0a:	4b65      	ldr	r3, [pc, #404]	@ (24055ba0 <MX_GPIO_Init+0x1e8>)
24055a0c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
24055a10:	4a63      	ldr	r2, [pc, #396]	@ (24055ba0 <MX_GPIO_Init+0x1e8>)
24055a12:	f043 0301 	orr.w	r3, r3, #1
24055a16:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
24055a1a:	4b61      	ldr	r3, [pc, #388]	@ (24055ba0 <MX_GPIO_Init+0x1e8>)
24055a1c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
24055a20:	f003 0301 	and.w	r3, r3, #1
24055a24:	60bb      	str	r3, [r7, #8]
24055a26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
24055a28:	4b5d      	ldr	r3, [pc, #372]	@ (24055ba0 <MX_GPIO_Init+0x1e8>)
24055a2a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
24055a2e:	4a5c      	ldr	r2, [pc, #368]	@ (24055ba0 <MX_GPIO_Init+0x1e8>)
24055a30:	f043 0302 	orr.w	r3, r3, #2
24055a34:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
24055a38:	4b59      	ldr	r3, [pc, #356]	@ (24055ba0 <MX_GPIO_Init+0x1e8>)
24055a3a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
24055a3e:	f003 0302 	and.w	r3, r3, #2
24055a42:	607b      	str	r3, [r7, #4]
24055a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
24055a46:	4b56      	ldr	r3, [pc, #344]	@ (24055ba0 <MX_GPIO_Init+0x1e8>)
24055a48:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
24055a4c:	4a54      	ldr	r2, [pc, #336]	@ (24055ba0 <MX_GPIO_Init+0x1e8>)
24055a4e:	f043 0308 	orr.w	r3, r3, #8
24055a52:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
24055a56:	4b52      	ldr	r3, [pc, #328]	@ (24055ba0 <MX_GPIO_Init+0x1e8>)
24055a58:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
24055a5c:	f003 0308 	and.w	r3, r3, #8
24055a60:	603b      	str	r3, [r7, #0]
24055a62:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_Speaker_enable_GPIO_Port, GPIO_Speaker_enable_Pin, GPIO_PIN_SET);
24055a64:	2201      	movs	r2, #1
24055a66:	2108      	movs	r1, #8
24055a68:	484e      	ldr	r0, [pc, #312]	@ (24055ba4 <MX_GPIO_Init+0x1ec>)
24055a6a:	f006 fb79 	bl	2405c160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
24055a6e:	2200      	movs	r2, #0
24055a70:	f44f 7180 	mov.w	r1, #256	@ 0x100
24055a74:	484b      	ldr	r0, [pc, #300]	@ (24055ba4 <MX_GPIO_Init+0x1ec>)
24055a76:	f006 fb73 	bl	2405c160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
24055a7a:	2201      	movs	r2, #1
24055a7c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
24055a80:	4849      	ldr	r0, [pc, #292]	@ (24055ba8 <MX_GPIO_Init+0x1f0>)
24055a82:	f006 fb6d 	bl	2405c160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
24055a86:	2201      	movs	r2, #1
24055a88:	f44f 7180 	mov.w	r1, #256	@ 0x100
24055a8c:	4847      	ldr	r0, [pc, #284]	@ (24055bac <MX_GPIO_Init+0x1f4>)
24055a8e:	f006 fb67 	bl	2405c160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
24055a92:	2200      	movs	r2, #0
24055a94:	2112      	movs	r1, #18
24055a96:	4845      	ldr	r0, [pc, #276]	@ (24055bac <MX_GPIO_Init+0x1f4>)
24055a98:	f006 fb62 	bl	2405c160 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_Speaker_enable_Pin PE8 */
  GPIO_InitStruct.Pin = GPIO_Speaker_enable_Pin|GPIO_PIN_8;
24055a9c:	f44f 7384 	mov.w	r3, #264	@ 0x108
24055aa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
24055aa2:	2301      	movs	r3, #1
24055aa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24055aa6:	2300      	movs	r3, #0
24055aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24055aaa:	2300      	movs	r3, #0
24055aac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24055aae:	f107 0314 	add.w	r3, r7, #20
24055ab2:	4619      	mov	r1, r3
24055ab4:	483b      	ldr	r0, [pc, #236]	@ (24055ba4 <MX_GPIO_Init+0x1ec>)
24055ab6:	f006 f98b 	bl	2405bdd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_PAUSE_Pin BTN_GAME_Pin BTN_TIME_Pin */
  GPIO_InitStruct.Pin = BTN_PAUSE_Pin|BTN_GAME_Pin|BTN_TIME_Pin;
24055aba:	f242 0322 	movw	r3, #8226	@ 0x2022
24055abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
24055ac0:	2300      	movs	r3, #0
24055ac2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
24055ac4:	2301      	movs	r3, #1
24055ac6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24055ac8:	f107 0314 	add.w	r3, r7, #20
24055acc:	4619      	mov	r1, r3
24055ace:	4838      	ldr	r0, [pc, #224]	@ (24055bb0 <MX_GPIO_Init+0x1f8>)
24055ad0:	f006 f97e 	bl	2405bdd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_PWR_Pin */
  GPIO_InitStruct.Pin = BTN_PWR_Pin;
24055ad4:	2301      	movs	r3, #1
24055ad6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
24055ad8:	2300      	movs	r3, #0
24055ada:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24055adc:	2300      	movs	r3, #0
24055ade:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_PWR_GPIO_Port, &GPIO_InitStruct);
24055ae0:	f107 0314 	add.w	r3, r7, #20
24055ae4:	4619      	mov	r1, r3
24055ae6:	4833      	ldr	r0, [pc, #204]	@ (24055bb4 <MX_GPIO_Init+0x1fc>)
24055ae8:	f006 f972 	bl	2405bdd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
24055aec:	2304      	movs	r3, #4
24055aee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
24055af0:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
24055af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24055af6:	2300      	movs	r3, #0
24055af8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24055afa:	f107 0314 	add.w	r3, r7, #20
24055afe:	4619      	mov	r1, r3
24055b00:	482c      	ldr	r0, [pc, #176]	@ (24055bb4 <MX_GPIO_Init+0x1fc>)
24055b02:	f006 f965 	bl	2405bdd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
24055b06:	2380      	movs	r3, #128	@ 0x80
24055b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
24055b0a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
24055b0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24055b10:	2300      	movs	r3, #0
24055b12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24055b14:	f107 0314 	add.w	r3, r7, #20
24055b18:	4619      	mov	r1, r3
24055b1a:	4822      	ldr	r0, [pc, #136]	@ (24055ba4 <MX_GPIO_Init+0x1ec>)
24055b1c:	f006 f958 	bl	2405bdd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
24055b20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
24055b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
24055b26:	2301      	movs	r3, #1
24055b28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24055b2a:	2300      	movs	r3, #0
24055b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24055b2e:	2300      	movs	r3, #0
24055b30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24055b32:	f107 0314 	add.w	r3, r7, #20
24055b36:	4619      	mov	r1, r3
24055b38:	481b      	ldr	r0, [pc, #108]	@ (24055ba8 <MX_GPIO_Init+0x1f0>)
24055b3a:	f006 f949 	bl	2405bdd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD1 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_4;
24055b3e:	f44f 7389 	mov.w	r3, #274	@ 0x112
24055b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
24055b44:	2301      	movs	r3, #1
24055b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24055b48:	2300      	movs	r3, #0
24055b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24055b4c:	2300      	movs	r3, #0
24055b4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24055b50:	f107 0314 	add.w	r3, r7, #20
24055b54:	4619      	mov	r1, r3
24055b56:	4815      	ldr	r0, [pc, #84]	@ (24055bac <MX_GPIO_Init+0x1f4>)
24055b58:	f006 f93a 	bl	2405bdd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_A_Pin BTN_Left_Pin BTN_Down_Pin BTN_Right_Pin
                           BTN_Up_Pin BTN_B_Pin */
  GPIO_InitStruct.Pin = BTN_A_Pin|BTN_Left_Pin|BTN_Down_Pin|BTN_Right_Pin
24055b5c:	f64c 2321 	movw	r3, #51745	@ 0xca21
24055b60:	617b      	str	r3, [r7, #20]
                          |BTN_Up_Pin|BTN_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
24055b62:	2300      	movs	r3, #0
24055b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
24055b66:	2301      	movs	r3, #1
24055b68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24055b6a:	f107 0314 	add.w	r3, r7, #20
24055b6e:	4619      	mov	r1, r3
24055b70:	480e      	ldr	r0, [pc, #56]	@ (24055bac <MX_GPIO_Init+0x1f4>)
24055b72:	f006 f92d 	bl	2405bdd0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
24055b76:	2200      	movs	r2, #0
24055b78:	2100      	movs	r1, #0
24055b7a:	2008      	movs	r0, #8
24055b7c:	f002 ffbd 	bl	24058afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
24055b80:	2008      	movs	r0, #8
24055b82:	f002 ffd4 	bl	24058b2e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
24055b86:	2200      	movs	r2, #0
24055b88:	2100      	movs	r1, #0
24055b8a:	2017      	movs	r0, #23
24055b8c:	f002 ffb5 	bl	24058afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
24055b90:	2017      	movs	r0, #23
24055b92:	f002 ffcc 	bl	24058b2e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
24055b96:	bf00      	nop
24055b98:	3728      	adds	r7, #40	@ 0x28
24055b9a:	46bd      	mov	sp, r7
24055b9c:	bd80      	pop	{r7, pc}
24055b9e:	bf00      	nop
24055ba0:	58024400 	.word	0x58024400
24055ba4:	58021000 	.word	0x58021000
24055ba8:	58020400 	.word	0x58020400
24055bac:	58020c00 	.word	0x58020c00
24055bb0:	58020800 	.word	0x58020800
24055bb4:	58020000 	.word	0x58020000

24055bb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
24055bb8:	b480      	push	{r7}
24055bba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
24055bbc:	b672      	cpsid	i
}
24055bbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
24055bc0:	bf00      	nop
24055bc2:	e7fd      	b.n	24055bc0 <Error_Handler+0x8>

24055bc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
24055bc4:	b480      	push	{r7}
24055bc6:	b083      	sub	sp, #12
24055bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
24055bca:	4b0a      	ldr	r3, [pc, #40]	@ (24055bf4 <HAL_MspInit+0x30>)
24055bcc:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
24055bd0:	4a08      	ldr	r2, [pc, #32]	@ (24055bf4 <HAL_MspInit+0x30>)
24055bd2:	f043 0302 	orr.w	r3, r3, #2
24055bd6:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
24055bda:	4b06      	ldr	r3, [pc, #24]	@ (24055bf4 <HAL_MspInit+0x30>)
24055bdc:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
24055be0:	f003 0302 	and.w	r3, r3, #2
24055be4:	607b      	str	r3, [r7, #4]
24055be6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
24055be8:	bf00      	nop
24055bea:	370c      	adds	r7, #12
24055bec:	46bd      	mov	sp, r7
24055bee:	f85d 7b04 	ldr.w	r7, [sp], #4
24055bf2:	4770      	bx	lr
24055bf4:	58024400 	.word	0x58024400

24055bf8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
24055bf8:	b580      	push	{r7, lr}
24055bfa:	b08a      	sub	sp, #40	@ 0x28
24055bfc:	af00      	add	r7, sp, #0
24055bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24055c00:	f107 0314 	add.w	r3, r7, #20
24055c04:	2200      	movs	r2, #0
24055c06:	601a      	str	r2, [r3, #0]
24055c08:	605a      	str	r2, [r3, #4]
24055c0a:	609a      	str	r2, [r3, #8]
24055c0c:	60da      	str	r2, [r3, #12]
24055c0e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
24055c10:	687b      	ldr	r3, [r7, #4]
24055c12:	681b      	ldr	r3, [r3, #0]
24055c14:	4a1c      	ldr	r2, [pc, #112]	@ (24055c88 <HAL_ADC_MspInit+0x90>)
24055c16:	4293      	cmp	r3, r2
24055c18:	d131      	bne.n	24055c7e <HAL_ADC_MspInit+0x86>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
24055c1a:	4b1c      	ldr	r3, [pc, #112]	@ (24055c8c <HAL_ADC_MspInit+0x94>)
24055c1c:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
24055c20:	4a1a      	ldr	r2, [pc, #104]	@ (24055c8c <HAL_ADC_MspInit+0x94>)
24055c22:	f043 0320 	orr.w	r3, r3, #32
24055c26:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
24055c2a:	4b18      	ldr	r3, [pc, #96]	@ (24055c8c <HAL_ADC_MspInit+0x94>)
24055c2c:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
24055c30:	f003 0320 	and.w	r3, r3, #32
24055c34:	613b      	str	r3, [r7, #16]
24055c36:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
24055c38:	4b14      	ldr	r3, [pc, #80]	@ (24055c8c <HAL_ADC_MspInit+0x94>)
24055c3a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
24055c3e:	4a13      	ldr	r2, [pc, #76]	@ (24055c8c <HAL_ADC_MspInit+0x94>)
24055c40:	f043 0304 	orr.w	r3, r3, #4
24055c44:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
24055c48:	4b10      	ldr	r3, [pc, #64]	@ (24055c8c <HAL_ADC_MspInit+0x94>)
24055c4a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
24055c4e:	f003 0304 	and.w	r3, r3, #4
24055c52:	60fb      	str	r3, [r7, #12]
24055c54:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
24055c56:	2310      	movs	r3, #16
24055c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
24055c5a:	2303      	movs	r3, #3
24055c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24055c5e:	2300      	movs	r3, #0
24055c60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24055c62:	f107 0314 	add.w	r3, r7, #20
24055c66:	4619      	mov	r1, r3
24055c68:	4809      	ldr	r0, [pc, #36]	@ (24055c90 <HAL_ADC_MspInit+0x98>)
24055c6a:	f006 f8b1 	bl	2405bdd0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
24055c6e:	2200      	movs	r2, #0
24055c70:	2100      	movs	r1, #0
24055c72:	2012      	movs	r0, #18
24055c74:	f002 ff41 	bl	24058afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
24055c78:	2012      	movs	r0, #18
24055c7a:	f002 ff58 	bl	24058b2e <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
24055c7e:	bf00      	nop
24055c80:	3728      	adds	r7, #40	@ 0x28
24055c82:	46bd      	mov	sp, r7
24055c84:	bd80      	pop	{r7, pc}
24055c86:	bf00      	nop
24055c88:	40022000 	.word	0x40022000
24055c8c:	58024400 	.word	0x58024400
24055c90:	58020800 	.word	0x58020800

24055c94 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
24055c94:	b580      	push	{r7, lr}
24055c96:	b08c      	sub	sp, #48	@ 0x30
24055c98:	af00      	add	r7, sp, #0
24055c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24055c9c:	f107 031c 	add.w	r3, r7, #28
24055ca0:	2200      	movs	r2, #0
24055ca2:	601a      	str	r2, [r3, #0]
24055ca4:	605a      	str	r2, [r3, #4]
24055ca6:	609a      	str	r2, [r3, #8]
24055ca8:	60da      	str	r2, [r3, #12]
24055caa:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
24055cac:	687b      	ldr	r3, [r7, #4]
24055cae:	681b      	ldr	r3, [r3, #0]
24055cb0:	4a30      	ldr	r2, [pc, #192]	@ (24055d74 <HAL_DAC_MspInit+0xe0>)
24055cb2:	4293      	cmp	r3, r2
24055cb4:	d12a      	bne.n	24055d0c <HAL_DAC_MspInit+0x78>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
24055cb6:	4b30      	ldr	r3, [pc, #192]	@ (24055d78 <HAL_DAC_MspInit+0xe4>)
24055cb8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
24055cbc:	4a2e      	ldr	r2, [pc, #184]	@ (24055d78 <HAL_DAC_MspInit+0xe4>)
24055cbe:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
24055cc2:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
24055cc6:	4b2c      	ldr	r3, [pc, #176]	@ (24055d78 <HAL_DAC_MspInit+0xe4>)
24055cc8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
24055ccc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
24055cd0:	61bb      	str	r3, [r7, #24]
24055cd2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
24055cd4:	4b28      	ldr	r3, [pc, #160]	@ (24055d78 <HAL_DAC_MspInit+0xe4>)
24055cd6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
24055cda:	4a27      	ldr	r2, [pc, #156]	@ (24055d78 <HAL_DAC_MspInit+0xe4>)
24055cdc:	f043 0301 	orr.w	r3, r3, #1
24055ce0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
24055ce4:	4b24      	ldr	r3, [pc, #144]	@ (24055d78 <HAL_DAC_MspInit+0xe4>)
24055ce6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
24055cea:	f003 0301 	and.w	r3, r3, #1
24055cee:	617b      	str	r3, [r7, #20]
24055cf0:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
24055cf2:	2330      	movs	r3, #48	@ 0x30
24055cf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
24055cf6:	2303      	movs	r3, #3
24055cf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24055cfa:	2300      	movs	r3, #0
24055cfc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24055cfe:	f107 031c 	add.w	r3, r7, #28
24055d02:	4619      	mov	r1, r3
24055d04:	481d      	ldr	r0, [pc, #116]	@ (24055d7c <HAL_DAC_MspInit+0xe8>)
24055d06:	f006 f863 	bl	2405bdd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }

}
24055d0a:	e02e      	b.n	24055d6a <HAL_DAC_MspInit+0xd6>
  else if(hdac->Instance==DAC2)
24055d0c:	687b      	ldr	r3, [r7, #4]
24055d0e:	681b      	ldr	r3, [r3, #0]
24055d10:	4a1b      	ldr	r2, [pc, #108]	@ (24055d80 <HAL_DAC_MspInit+0xec>)
24055d12:	4293      	cmp	r3, r2
24055d14:	d129      	bne.n	24055d6a <HAL_DAC_MspInit+0xd6>
    __HAL_RCC_DAC2_CLK_ENABLE();
24055d16:	4b18      	ldr	r3, [pc, #96]	@ (24055d78 <HAL_DAC_MspInit+0xe4>)
24055d18:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
24055d1c:	4a16      	ldr	r2, [pc, #88]	@ (24055d78 <HAL_DAC_MspInit+0xe4>)
24055d1e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
24055d22:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
24055d26:	4b14      	ldr	r3, [pc, #80]	@ (24055d78 <HAL_DAC_MspInit+0xe4>)
24055d28:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
24055d2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
24055d30:	613b      	str	r3, [r7, #16]
24055d32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
24055d34:	4b10      	ldr	r3, [pc, #64]	@ (24055d78 <HAL_DAC_MspInit+0xe4>)
24055d36:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
24055d3a:	4a0f      	ldr	r2, [pc, #60]	@ (24055d78 <HAL_DAC_MspInit+0xe4>)
24055d3c:	f043 0301 	orr.w	r3, r3, #1
24055d40:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
24055d44:	4b0c      	ldr	r3, [pc, #48]	@ (24055d78 <HAL_DAC_MspInit+0xe4>)
24055d46:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
24055d4a:	f003 0301 	and.w	r3, r3, #1
24055d4e:	60fb      	str	r3, [r7, #12]
24055d50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
24055d52:	2340      	movs	r3, #64	@ 0x40
24055d54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
24055d56:	2303      	movs	r3, #3
24055d58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24055d5a:	2300      	movs	r3, #0
24055d5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24055d5e:	f107 031c 	add.w	r3, r7, #28
24055d62:	4619      	mov	r1, r3
24055d64:	4805      	ldr	r0, [pc, #20]	@ (24055d7c <HAL_DAC_MspInit+0xe8>)
24055d66:	f006 f833 	bl	2405bdd0 <HAL_GPIO_Init>
}
24055d6a:	bf00      	nop
24055d6c:	3730      	adds	r7, #48	@ 0x30
24055d6e:	46bd      	mov	sp, r7
24055d70:	bd80      	pop	{r7, pc}
24055d72:	bf00      	nop
24055d74:	40007400 	.word	0x40007400
24055d78:	58024400 	.word	0x58024400
24055d7c:	58020000 	.word	0x58020000
24055d80:	58003400 	.word	0x58003400

24055d84 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
24055d84:	b480      	push	{r7}
24055d86:	b085      	sub	sp, #20
24055d88:	af00      	add	r7, sp, #0
24055d8a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
24055d8c:	687b      	ldr	r3, [r7, #4]
24055d8e:	681b      	ldr	r3, [r3, #0]
24055d90:	4a0b      	ldr	r2, [pc, #44]	@ (24055dc0 <HAL_DMA2D_MspInit+0x3c>)
24055d92:	4293      	cmp	r3, r2
24055d94:	d10e      	bne.n	24055db4 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
24055d96:	4b0b      	ldr	r3, [pc, #44]	@ (24055dc4 <HAL_DMA2D_MspInit+0x40>)
24055d98:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
24055d9c:	4a09      	ldr	r2, [pc, #36]	@ (24055dc4 <HAL_DMA2D_MspInit+0x40>)
24055d9e:	f043 0310 	orr.w	r3, r3, #16
24055da2:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
24055da6:	4b07      	ldr	r3, [pc, #28]	@ (24055dc4 <HAL_DMA2D_MspInit+0x40>)
24055da8:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
24055dac:	f003 0310 	and.w	r3, r3, #16
24055db0:	60fb      	str	r3, [r7, #12]
24055db2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
24055db4:	bf00      	nop
24055db6:	3714      	adds	r7, #20
24055db8:	46bd      	mov	sp, r7
24055dba:	f85d 7b04 	ldr.w	r7, [sp], #4
24055dbe:	4770      	bx	lr
24055dc0:	52001000 	.word	0x52001000
24055dc4:	58024400 	.word	0x58024400

24055dc8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
24055dc8:	b580      	push	{r7, lr}
24055dca:	b08e      	sub	sp, #56	@ 0x38
24055dcc:	af00      	add	r7, sp, #0
24055dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24055dd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
24055dd4:	2200      	movs	r2, #0
24055dd6:	601a      	str	r2, [r3, #0]
24055dd8:	605a      	str	r2, [r3, #4]
24055dda:	609a      	str	r2, [r3, #8]
24055ddc:	60da      	str	r2, [r3, #12]
24055dde:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
24055de0:	687b      	ldr	r3, [r7, #4]
24055de2:	681b      	ldr	r3, [r3, #0]
24055de4:	4a90      	ldr	r2, [pc, #576]	@ (24056028 <HAL_LTDC_MspInit+0x260>)
24055de6:	4293      	cmp	r3, r2
24055de8:	f040 8119 	bne.w	2405601e <HAL_LTDC_MspInit+0x256>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
24055dec:	4b8f      	ldr	r3, [pc, #572]	@ (2405602c <HAL_LTDC_MspInit+0x264>)
24055dee:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
24055df2:	4a8e      	ldr	r2, [pc, #568]	@ (2405602c <HAL_LTDC_MspInit+0x264>)
24055df4:	f043 0308 	orr.w	r3, r3, #8
24055df8:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
24055dfc:	4b8b      	ldr	r3, [pc, #556]	@ (2405602c <HAL_LTDC_MspInit+0x264>)
24055dfe:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
24055e02:	f003 0308 	and.w	r3, r3, #8
24055e06:	623b      	str	r3, [r7, #32]
24055e08:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
24055e0a:	4b88      	ldr	r3, [pc, #544]	@ (2405602c <HAL_LTDC_MspInit+0x264>)
24055e0c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
24055e10:	4a86      	ldr	r2, [pc, #536]	@ (2405602c <HAL_LTDC_MspInit+0x264>)
24055e12:	f043 0304 	orr.w	r3, r3, #4
24055e16:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
24055e1a:	4b84      	ldr	r3, [pc, #528]	@ (2405602c <HAL_LTDC_MspInit+0x264>)
24055e1c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
24055e20:	f003 0304 	and.w	r3, r3, #4
24055e24:	61fb      	str	r3, [r7, #28]
24055e26:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
24055e28:	4b80      	ldr	r3, [pc, #512]	@ (2405602c <HAL_LTDC_MspInit+0x264>)
24055e2a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
24055e2e:	4a7f      	ldr	r2, [pc, #508]	@ (2405602c <HAL_LTDC_MspInit+0x264>)
24055e30:	f043 0301 	orr.w	r3, r3, #1
24055e34:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
24055e38:	4b7c      	ldr	r3, [pc, #496]	@ (2405602c <HAL_LTDC_MspInit+0x264>)
24055e3a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
24055e3e:	f003 0301 	and.w	r3, r3, #1
24055e42:	61bb      	str	r3, [r7, #24]
24055e44:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
24055e46:	4b79      	ldr	r3, [pc, #484]	@ (2405602c <HAL_LTDC_MspInit+0x264>)
24055e48:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
24055e4c:	4a77      	ldr	r2, [pc, #476]	@ (2405602c <HAL_LTDC_MspInit+0x264>)
24055e4e:	f043 0302 	orr.w	r3, r3, #2
24055e52:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
24055e56:	4b75      	ldr	r3, [pc, #468]	@ (2405602c <HAL_LTDC_MspInit+0x264>)
24055e58:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
24055e5c:	f003 0302 	and.w	r3, r3, #2
24055e60:	617b      	str	r3, [r7, #20]
24055e62:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
24055e64:	4b71      	ldr	r3, [pc, #452]	@ (2405602c <HAL_LTDC_MspInit+0x264>)
24055e66:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
24055e6a:	4a70      	ldr	r2, [pc, #448]	@ (2405602c <HAL_LTDC_MspInit+0x264>)
24055e6c:	f043 0310 	orr.w	r3, r3, #16
24055e70:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
24055e74:	4b6d      	ldr	r3, [pc, #436]	@ (2405602c <HAL_LTDC_MspInit+0x264>)
24055e76:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
24055e7a:	f003 0310 	and.w	r3, r3, #16
24055e7e:	613b      	str	r3, [r7, #16]
24055e80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
24055e82:	4b6a      	ldr	r3, [pc, #424]	@ (2405602c <HAL_LTDC_MspInit+0x264>)
24055e84:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
24055e88:	4a68      	ldr	r2, [pc, #416]	@ (2405602c <HAL_LTDC_MspInit+0x264>)
24055e8a:	f043 0308 	orr.w	r3, r3, #8
24055e8e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
24055e92:	4b66      	ldr	r3, [pc, #408]	@ (2405602c <HAL_LTDC_MspInit+0x264>)
24055e94:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
24055e98:	f003 0308 	and.w	r3, r3, #8
24055e9c:	60fb      	str	r3, [r7, #12]
24055e9e:	68fb      	ldr	r3, [r7, #12]
    PD3     ------> LTDC_G7
    PD6     ------> LTDC_B2
    PB5     ------> LTDC_B5
    PB8     ------> LTDC_B6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
24055ea0:	2301      	movs	r3, #1
24055ea2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24055ea4:	2302      	movs	r3, #2
24055ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24055ea8:	2300      	movs	r3, #0
24055eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24055eac:	2300      	movs	r3, #0
24055eae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
24055eb0:	230b      	movs	r3, #11
24055eb2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24055eb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
24055eb8:	4619      	mov	r1, r3
24055eba:	485d      	ldr	r0, [pc, #372]	@ (24056030 <HAL_LTDC_MspInit+0x268>)
24055ebc:	f005 ff88 	bl	2405bdd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
24055ec0:	f44f 6338 	mov.w	r3, #2944	@ 0xb80
24055ec4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24055ec6:	2302      	movs	r3, #2
24055ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24055eca:	2300      	movs	r3, #0
24055ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24055ece:	2300      	movs	r3, #0
24055ed0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
24055ed2:	230e      	movs	r3, #14
24055ed4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24055ed6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
24055eda:	4619      	mov	r1, r3
24055edc:	4855      	ldr	r0, [pc, #340]	@ (24056034 <HAL_LTDC_MspInit+0x26c>)
24055ede:	f005 ff77 	bl	2405bdd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
24055ee2:	2301      	movs	r3, #1
24055ee4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24055ee6:	2302      	movs	r3, #2
24055ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24055eea:	2300      	movs	r3, #0
24055eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24055eee:	2300      	movs	r3, #0
24055ef0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
24055ef2:	2309      	movs	r3, #9
24055ef4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24055ef6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
24055efa:	4619      	mov	r1, r3
24055efc:	484e      	ldr	r0, [pc, #312]	@ (24056038 <HAL_LTDC_MspInit+0x270>)
24055efe:	f005 ff67 	bl	2405bdd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
24055f02:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
24055f06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24055f08:	2302      	movs	r3, #2
24055f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24055f0c:	2300      	movs	r3, #0
24055f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24055f10:	2300      	movs	r3, #0
24055f12:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
24055f14:	230e      	movs	r3, #14
24055f16:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24055f18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
24055f1c:	4619      	mov	r1, r3
24055f1e:	4847      	ldr	r0, [pc, #284]	@ (2405603c <HAL_LTDC_MspInit+0x274>)
24055f20:	f005 ff56 	bl	2405bdd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_8;
24055f24:	f44f 439a 	mov.w	r3, #19712	@ 0x4d00
24055f28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24055f2a:	2302      	movs	r3, #2
24055f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24055f2e:	2300      	movs	r3, #0
24055f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24055f32:	2300      	movs	r3, #0
24055f34:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
24055f36:	230e      	movs	r3, #14
24055f38:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24055f3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
24055f3e:	4619      	mov	r1, r3
24055f40:	483d      	ldr	r0, [pc, #244]	@ (24056038 <HAL_LTDC_MspInit+0x270>)
24055f42:	f005 ff45 	bl	2405bdd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_6;
24055f46:	f44f 6389 	mov.w	r3, #1096	@ 0x448
24055f4a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24055f4c:	2302      	movs	r3, #2
24055f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24055f50:	2300      	movs	r3, #0
24055f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24055f54:	2300      	movs	r3, #0
24055f56:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
24055f58:	230e      	movs	r3, #14
24055f5a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24055f5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
24055f60:	4619      	mov	r1, r3
24055f62:	4837      	ldr	r0, [pc, #220]	@ (24056040 <HAL_LTDC_MspInit+0x278>)
24055f64:	f005 ff34 	bl	2405bdd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
24055f68:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
24055f6c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24055f6e:	2302      	movs	r3, #2
24055f70:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24055f72:	2300      	movs	r3, #0
24055f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24055f76:	2300      	movs	r3, #0
24055f78:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
24055f7a:	230e      	movs	r3, #14
24055f7c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24055f7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
24055f82:	4619      	mov	r1, r3
24055f84:	482a      	ldr	r0, [pc, #168]	@ (24056030 <HAL_LTDC_MspInit+0x268>)
24055f86:	f005 ff23 	bl	2405bdd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
24055f8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
24055f8e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24055f90:	2302      	movs	r3, #2
24055f92:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24055f94:	2300      	movs	r3, #0
24055f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24055f98:	2300      	movs	r3, #0
24055f9a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_LTDC;
24055f9c:	230a      	movs	r3, #10
24055f9e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24055fa0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
24055fa4:	4619      	mov	r1, r3
24055fa6:	4822      	ldr	r0, [pc, #136]	@ (24056030 <HAL_LTDC_MspInit+0x268>)
24055fa8:	f005 ff12 	bl	2405bdd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
24055fac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
24055fb0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24055fb2:	2302      	movs	r3, #2
24055fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24055fb6:	2300      	movs	r3, #0
24055fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24055fba:	2300      	movs	r3, #0
24055fbc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF12_LTDC;
24055fbe:	230c      	movs	r3, #12
24055fc0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24055fc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
24055fc6:	4619      	mov	r1, r3
24055fc8:	481a      	ldr	r0, [pc, #104]	@ (24056034 <HAL_LTDC_MspInit+0x26c>)
24055fca:	f005 ff01 	bl	2405bdd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
24055fce:	2304      	movs	r3, #4
24055fd0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24055fd2:	2302      	movs	r3, #2
24055fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24055fd6:	2300      	movs	r3, #0
24055fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24055fda:	2300      	movs	r3, #0
24055fdc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
24055fde:	2309      	movs	r3, #9
24055fe0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24055fe2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
24055fe6:	4619      	mov	r1, r3
24055fe8:	4815      	ldr	r0, [pc, #84]	@ (24056040 <HAL_LTDC_MspInit+0x278>)
24055fea:	f005 fef1 	bl	2405bdd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
24055fee:	2320      	movs	r3, #32
24055ff0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24055ff2:	2302      	movs	r3, #2
24055ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24055ff6:	2300      	movs	r3, #0
24055ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24055ffa:	2300      	movs	r3, #0
24055ffc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
24055ffe:	230b      	movs	r3, #11
24056000:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24056002:	f107 0324 	add.w	r3, r7, #36	@ 0x24
24056006:	4619      	mov	r1, r3
24056008:	480b      	ldr	r0, [pc, #44]	@ (24056038 <HAL_LTDC_MspInit+0x270>)
2405600a:	f005 fee1 	bl	2405bdd0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
2405600e:	2200      	movs	r2, #0
24056010:	2100      	movs	r1, #0
24056012:	2058      	movs	r0, #88	@ 0x58
24056014:	f002 fd71 	bl	24058afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
24056018:	2058      	movs	r0, #88	@ 0x58
2405601a:	f002 fd88 	bl	24058b2e <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
2405601e:	bf00      	nop
24056020:	3738      	adds	r7, #56	@ 0x38
24056022:	46bd      	mov	sp, r7
24056024:	bd80      	pop	{r7, pc}
24056026:	bf00      	nop
24056028:	50001000 	.word	0x50001000
2405602c:	58024400 	.word	0x58024400
24056030:	58020800 	.word	0x58020800
24056034:	58020000 	.word	0x58020000
24056038:	58020400 	.word	0x58020400
2405603c:	58021000 	.word	0x58021000
24056040:	58020c00 	.word	0x58020c00

24056044 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
24056044:	b580      	push	{r7, lr}
24056046:	b0be      	sub	sp, #248	@ 0xf8
24056048:	af00      	add	r7, sp, #0
2405604a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
2405604c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
24056050:	2200      	movs	r2, #0
24056052:	601a      	str	r2, [r3, #0]
24056054:	605a      	str	r2, [r3, #4]
24056056:	609a      	str	r2, [r3, #8]
24056058:	60da      	str	r2, [r3, #12]
2405605a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
2405605c:	f107 0320 	add.w	r3, r7, #32
24056060:	22c0      	movs	r2, #192	@ 0xc0
24056062:	2100      	movs	r1, #0
24056064:	4618      	mov	r0, r3
24056066:	f00e fbd5 	bl	24064814 <memset>
  if(hospi->Instance==OCTOSPI1)
2405606a:	687b      	ldr	r3, [r7, #4]
2405606c:	681b      	ldr	r3, [r3, #0]
2405606e:	4a7a      	ldr	r2, [pc, #488]	@ (24056258 <HAL_OSPI_MspInit+0x214>)
24056070:	4293      	cmp	r3, r2
24056072:	f040 80ec 	bne.w	2405624e <HAL_OSPI_MspInit+0x20a>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
24056076:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
2405607a:	f04f 0300 	mov.w	r3, #0
2405607e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_CLKP;
24056082:	2330      	movs	r3, #48	@ 0x30
24056084:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24056086:	f107 0320 	add.w	r3, r7, #32
2405608a:	4618      	mov	r0, r3
2405608c:	f009 f866 	bl	2405f15c <HAL_RCCEx_PeriphCLKConfig>
24056090:	4603      	mov	r3, r0
24056092:	2b00      	cmp	r3, #0
24056094:	d001      	beq.n	2405609a <HAL_OSPI_MspInit+0x56>
    {
      Error_Handler();
24056096:	f7ff fd8f 	bl	24055bb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
2405609a:	4b70      	ldr	r3, [pc, #448]	@ (2405625c <HAL_OSPI_MspInit+0x218>)
2405609c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
240560a0:	4a6e      	ldr	r2, [pc, #440]	@ (2405625c <HAL_OSPI_MspInit+0x218>)
240560a2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
240560a6:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
240560aa:	4b6c      	ldr	r3, [pc, #432]	@ (2405625c <HAL_OSPI_MspInit+0x218>)
240560ac:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
240560b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
240560b4:	61fb      	str	r3, [r7, #28]
240560b6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_OSPI1_CLK_ENABLE();
240560b8:	4b68      	ldr	r3, [pc, #416]	@ (2405625c <HAL_OSPI_MspInit+0x218>)
240560ba:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
240560be:	4a67      	ldr	r2, [pc, #412]	@ (2405625c <HAL_OSPI_MspInit+0x218>)
240560c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
240560c4:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
240560c8:	4b64      	ldr	r3, [pc, #400]	@ (2405625c <HAL_OSPI_MspInit+0x218>)
240560ca:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
240560ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
240560d2:	61bb      	str	r3, [r7, #24]
240560d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
240560d6:	4b61      	ldr	r3, [pc, #388]	@ (2405625c <HAL_OSPI_MspInit+0x218>)
240560d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
240560dc:	4a5f      	ldr	r2, [pc, #380]	@ (2405625c <HAL_OSPI_MspInit+0x218>)
240560de:	f043 0310 	orr.w	r3, r3, #16
240560e2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
240560e6:	4b5d      	ldr	r3, [pc, #372]	@ (2405625c <HAL_OSPI_MspInit+0x218>)
240560e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
240560ec:	f003 0310 	and.w	r3, r3, #16
240560f0:	617b      	str	r3, [r7, #20]
240560f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
240560f4:	4b59      	ldr	r3, [pc, #356]	@ (2405625c <HAL_OSPI_MspInit+0x218>)
240560f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
240560fa:	4a58      	ldr	r2, [pc, #352]	@ (2405625c <HAL_OSPI_MspInit+0x218>)
240560fc:	f043 0301 	orr.w	r3, r3, #1
24056100:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
24056104:	4b55      	ldr	r3, [pc, #340]	@ (2405625c <HAL_OSPI_MspInit+0x218>)
24056106:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
2405610a:	f003 0301 	and.w	r3, r3, #1
2405610e:	613b      	str	r3, [r7, #16]
24056110:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
24056112:	4b52      	ldr	r3, [pc, #328]	@ (2405625c <HAL_OSPI_MspInit+0x218>)
24056114:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
24056118:	4a50      	ldr	r2, [pc, #320]	@ (2405625c <HAL_OSPI_MspInit+0x218>)
2405611a:	f043 0302 	orr.w	r3, r3, #2
2405611e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
24056122:	4b4e      	ldr	r3, [pc, #312]	@ (2405625c <HAL_OSPI_MspInit+0x218>)
24056124:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
24056128:	f003 0302 	and.w	r3, r3, #2
2405612c:	60fb      	str	r3, [r7, #12]
2405612e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
24056130:	4b4a      	ldr	r3, [pc, #296]	@ (2405625c <HAL_OSPI_MspInit+0x218>)
24056132:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
24056136:	4a49      	ldr	r2, [pc, #292]	@ (2405625c <HAL_OSPI_MspInit+0x218>)
24056138:	f043 0308 	orr.w	r3, r3, #8
2405613c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
24056140:	4b46      	ldr	r3, [pc, #280]	@ (2405625c <HAL_OSPI_MspInit+0x218>)
24056142:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
24056146:	f003 0308 	and.w	r3, r3, #8
2405614a:	60bb      	str	r3, [r7, #8]
2405614c:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> OCTOSPIM_P1_IO0
    PB2     ------> OCTOSPIM_P1_CLK
    PE11     ------> OCTOSPIM_P1_NCS
    PD12     ------> OCTOSPIM_P1_IO1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
2405614e:	2304      	movs	r3, #4
24056150:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24056154:	2302      	movs	r3, #2
24056156:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2405615a:	2300      	movs	r3, #0
2405615c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24056160:	2303      	movs	r3, #3
24056162:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
24056166:	2309      	movs	r3, #9
24056168:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
2405616c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
24056170:	4619      	mov	r1, r3
24056172:	483b      	ldr	r0, [pc, #236]	@ (24056260 <HAL_OSPI_MspInit+0x21c>)
24056174:	f005 fe2c 	bl	2405bdd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
24056178:	2302      	movs	r3, #2
2405617a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2405617e:	2302      	movs	r3, #2
24056180:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24056184:	2300      	movs	r3, #0
24056186:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
2405618a:	2303      	movs	r3, #3
2405618c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
24056190:	2309      	movs	r3, #9
24056192:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24056196:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
2405619a:	4619      	mov	r1, r3
2405619c:	4831      	ldr	r0, [pc, #196]	@ (24056264 <HAL_OSPI_MspInit+0x220>)
2405619e:	f005 fe17 	bl	2405bdd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
240561a2:	2302      	movs	r3, #2
240561a4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240561a8:	2302      	movs	r3, #2
240561aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
240561ae:	2300      	movs	r3, #0
240561b0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
240561b4:	2303      	movs	r3, #3
240561b6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
240561ba:	230b      	movs	r3, #11
240561bc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240561c0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
240561c4:	4619      	mov	r1, r3
240561c6:	4828      	ldr	r0, [pc, #160]	@ (24056268 <HAL_OSPI_MspInit+0x224>)
240561c8:	f005 fe02 	bl	2405bdd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
240561cc:	2304      	movs	r3, #4
240561ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240561d2:	2302      	movs	r3, #2
240561d4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
240561d8:	2300      	movs	r3, #0
240561da:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
240561de:	2303      	movs	r3, #3
240561e0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
240561e4:	2309      	movs	r3, #9
240561e6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240561ea:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
240561ee:	4619      	mov	r1, r3
240561f0:	481d      	ldr	r0, [pc, #116]	@ (24056268 <HAL_OSPI_MspInit+0x224>)
240561f2:	f005 fded 	bl	2405bdd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
240561f6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
240561fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240561fe:	2302      	movs	r3, #2
24056200:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24056204:	2300      	movs	r3, #0
24056206:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
2405620a:	2303      	movs	r3, #3
2405620c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
24056210:	230b      	movs	r3, #11
24056212:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24056216:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
2405621a:	4619      	mov	r1, r3
2405621c:	4810      	ldr	r0, [pc, #64]	@ (24056260 <HAL_OSPI_MspInit+0x21c>)
2405621e:	f005 fdd7 	bl	2405bdd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
24056222:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
24056226:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2405622a:	2302      	movs	r3, #2
2405622c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24056230:	2300      	movs	r3, #0
24056232:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24056236:	2303      	movs	r3, #3
24056238:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
2405623c:	2309      	movs	r3, #9
2405623e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24056242:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
24056246:	4619      	mov	r1, r3
24056248:	4808      	ldr	r0, [pc, #32]	@ (2405626c <HAL_OSPI_MspInit+0x228>)
2405624a:	f005 fdc1 	bl	2405bdd0 <HAL_GPIO_Init>

  /* USER CODE END OCTOSPI1_MspInit 1 */

  }

}
2405624e:	bf00      	nop
24056250:	37f8      	adds	r7, #248	@ 0xf8
24056252:	46bd      	mov	sp, r7
24056254:	bd80      	pop	{r7, pc}
24056256:	bf00      	nop
24056258:	52005000 	.word	0x52005000
2405625c:	58024400 	.word	0x58024400
24056260:	58021000 	.word	0x58021000
24056264:	58020000 	.word	0x58020000
24056268:	58020400 	.word	0x58020400
2405626c:	58020c00 	.word	0x58020c00

24056270 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
24056270:	b580      	push	{r7, lr}
24056272:	b0b2      	sub	sp, #200	@ 0xc8
24056274:	af00      	add	r7, sp, #0
24056276:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24056278:	f107 0308 	add.w	r3, r7, #8
2405627c:	22c0      	movs	r2, #192	@ 0xc0
2405627e:	2100      	movs	r1, #0
24056280:	4618      	mov	r0, r3
24056282:	f00e fac7 	bl	24064814 <memset>
  if(hrtc->Instance==RTC)
24056286:	687b      	ldr	r3, [r7, #4]
24056288:	681b      	ldr	r3, [r3, #0]
2405628a:	4a10      	ldr	r2, [pc, #64]	@ (240562cc <HAL_RTC_MspInit+0x5c>)
2405628c:	4293      	cmp	r3, r2
2405628e:	d119      	bne.n	240562c4 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
24056290:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
24056294:	f04f 0300 	mov.w	r3, #0
24056298:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
2405629c:	f44f 7380 	mov.w	r3, #256	@ 0x100
240562a0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
240562a4:	f107 0308 	add.w	r3, r7, #8
240562a8:	4618      	mov	r0, r3
240562aa:	f008 ff57 	bl	2405f15c <HAL_RCCEx_PeriphCLKConfig>
240562ae:	4603      	mov	r3, r0
240562b0:	2b00      	cmp	r3, #0
240562b2:	d001      	beq.n	240562b8 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
240562b4:	f7ff fc80 	bl	24055bb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
240562b8:	4b05      	ldr	r3, [pc, #20]	@ (240562d0 <HAL_RTC_MspInit+0x60>)
240562ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
240562bc:	4a04      	ldr	r2, [pc, #16]	@ (240562d0 <HAL_RTC_MspInit+0x60>)
240562be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
240562c2:	6713      	str	r3, [r2, #112]	@ 0x70

  /* USER CODE END RTC_MspInit 1 */

  }

}
240562c4:	bf00      	nop
240562c6:	37c8      	adds	r7, #200	@ 0xc8
240562c8:	46bd      	mov	sp, r7
240562ca:	bd80      	pop	{r7, pc}
240562cc:	58004000 	.word	0x58004000
240562d0:	58024400 	.word	0x58024400

240562d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
240562d4:	b580      	push	{r7, lr}
240562d6:	b0ba      	sub	sp, #232	@ 0xe8
240562d8:	af00      	add	r7, sp, #0
240562da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
240562dc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
240562e0:	2200      	movs	r2, #0
240562e2:	601a      	str	r2, [r3, #0]
240562e4:	605a      	str	r2, [r3, #4]
240562e6:	609a      	str	r2, [r3, #8]
240562e8:	60da      	str	r2, [r3, #12]
240562ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
240562ec:	f107 0310 	add.w	r3, r7, #16
240562f0:	22c0      	movs	r2, #192	@ 0xc0
240562f2:	2100      	movs	r1, #0
240562f4:	4618      	mov	r0, r3
240562f6:	f00e fa8d 	bl	24064814 <memset>
  if(hspi->Instance==SPI2)
240562fa:	687b      	ldr	r3, [r7, #4]
240562fc:	681b      	ldr	r3, [r3, #0]
240562fe:	4a27      	ldr	r2, [pc, #156]	@ (2405639c <HAL_SPI_MspInit+0xc8>)
24056300:	4293      	cmp	r3, r2
24056302:	d146      	bne.n	24056392 <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
24056304:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
24056308:	f04f 0300 	mov.w	r3, #0
2405630c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
24056310:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
24056314:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24056316:	f107 0310 	add.w	r3, r7, #16
2405631a:	4618      	mov	r0, r3
2405631c:	f008 ff1e 	bl	2405f15c <HAL_RCCEx_PeriphCLKConfig>
24056320:	4603      	mov	r3, r0
24056322:	2b00      	cmp	r3, #0
24056324:	d001      	beq.n	2405632a <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
24056326:	f7ff fc47 	bl	24055bb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
2405632a:	4b1d      	ldr	r3, [pc, #116]	@ (240563a0 <HAL_SPI_MspInit+0xcc>)
2405632c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
24056330:	4a1b      	ldr	r2, [pc, #108]	@ (240563a0 <HAL_SPI_MspInit+0xcc>)
24056332:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
24056336:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
2405633a:	4b19      	ldr	r3, [pc, #100]	@ (240563a0 <HAL_SPI_MspInit+0xcc>)
2405633c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
24056340:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
24056344:	60fb      	str	r3, [r7, #12]
24056346:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
24056348:	4b15      	ldr	r3, [pc, #84]	@ (240563a0 <HAL_SPI_MspInit+0xcc>)
2405634a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
2405634e:	4a14      	ldr	r2, [pc, #80]	@ (240563a0 <HAL_SPI_MspInit+0xcc>)
24056350:	f043 0302 	orr.w	r3, r3, #2
24056354:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
24056358:	4b11      	ldr	r3, [pc, #68]	@ (240563a0 <HAL_SPI_MspInit+0xcc>)
2405635a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
2405635e:	f003 0302 	and.w	r3, r3, #2
24056362:	60bb      	str	r3, [r7, #8]
24056364:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
24056366:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
2405636a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2405636e:	2302      	movs	r3, #2
24056370:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24056374:	2300      	movs	r3, #0
24056376:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
2405637a:	2300      	movs	r3, #0
2405637c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
24056380:	2305      	movs	r3, #5
24056382:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24056386:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
2405638a:	4619      	mov	r1, r3
2405638c:	4805      	ldr	r0, [pc, #20]	@ (240563a4 <HAL_SPI_MspInit+0xd0>)
2405638e:	f005 fd1f 	bl	2405bdd0 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
24056392:	bf00      	nop
24056394:	37e8      	adds	r7, #232	@ 0xe8
24056396:	46bd      	mov	sp, r7
24056398:	bd80      	pop	{r7, pc}
2405639a:	bf00      	nop
2405639c:	40003800 	.word	0x40003800
240563a0:	58024400 	.word	0x58024400
240563a4:	58020400 	.word	0x58020400

240563a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
240563a8:	b580      	push	{r7, lr}
240563aa:	b084      	sub	sp, #16
240563ac:	af00      	add	r7, sp, #0
240563ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
240563b0:	687b      	ldr	r3, [r7, #4]
240563b2:	681b      	ldr	r3, [r3, #0]
240563b4:	4a0e      	ldr	r2, [pc, #56]	@ (240563f0 <HAL_TIM_Base_MspInit+0x48>)
240563b6:	4293      	cmp	r3, r2
240563b8:	d116      	bne.n	240563e8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
240563ba:	4b0e      	ldr	r3, [pc, #56]	@ (240563f4 <HAL_TIM_Base_MspInit+0x4c>)
240563bc:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
240563c0:	4a0c      	ldr	r2, [pc, #48]	@ (240563f4 <HAL_TIM_Base_MspInit+0x4c>)
240563c2:	f043 0301 	orr.w	r3, r3, #1
240563c6:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
240563ca:	4b0a      	ldr	r3, [pc, #40]	@ (240563f4 <HAL_TIM_Base_MspInit+0x4c>)
240563cc:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
240563d0:	f003 0301 	and.w	r3, r3, #1
240563d4:	60fb      	str	r3, [r7, #12]
240563d6:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
240563d8:	2200      	movs	r2, #0
240563da:	2100      	movs	r1, #0
240563dc:	2019      	movs	r0, #25
240563de:	f002 fb8c 	bl	24058afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
240563e2:	2019      	movs	r0, #25
240563e4:	f002 fba3 	bl	24058b2e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
240563e8:	bf00      	nop
240563ea:	3710      	adds	r7, #16
240563ec:	46bd      	mov	sp, r7
240563ee:	bd80      	pop	{r7, pc}
240563f0:	40010000 	.word	0x40010000
240563f4:	58024400 	.word	0x58024400

240563f8 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_a;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
240563f8:	b580      	push	{r7, lr}
240563fa:	b0ba      	sub	sp, #232	@ 0xe8
240563fc:	af00      	add	r7, sp, #0
240563fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24056400:	f107 0310 	add.w	r3, r7, #16
24056404:	22c0      	movs	r2, #192	@ 0xc0
24056406:	2100      	movs	r1, #0
24056408:	4618      	mov	r0, r3
2405640a:	f00e fa03 	bl	24064814 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
2405640e:	687b      	ldr	r3, [r7, #4]
24056410:	681b      	ldr	r3, [r3, #0]
24056412:	4a50      	ldr	r2, [pc, #320]	@ (24056554 <HAL_SAI_MspInit+0x15c>)
24056414:	4293      	cmp	r3, r2
24056416:	f040 8098 	bne.w	2405654a <HAL_SAI_MspInit+0x152>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
2405641a:	f44f 7280 	mov.w	r2, #256	@ 0x100
2405641e:	f04f 0300 	mov.w	r3, #0
24056422:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 25;
24056426:	2319      	movs	r3, #25
24056428:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 192;
2405642a:	23c0      	movs	r3, #192	@ 0xc0
2405642c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 5;
2405642e:	2305      	movs	r3, #5
24056430:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
24056432:	2302      	movs	r3, #2
24056434:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 5;
24056436:	2305      	movs	r3, #5
24056438:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
2405643a:	2340      	movs	r3, #64	@ 0x40
2405643c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
2405643e:	2300      	movs	r3, #0
24056440:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
24056442:	2300      	movs	r3, #0
24056444:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
24056446:	2301      	movs	r3, #1
24056448:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
2405644a:	f107 0310 	add.w	r3, r7, #16
2405644e:	4618      	mov	r0, r3
24056450:	f008 fe84 	bl	2405f15c <HAL_RCCEx_PeriphCLKConfig>
24056454:	4603      	mov	r3, r0
24056456:	2b00      	cmp	r3, #0
24056458:	d001      	beq.n	2405645e <HAL_SAI_MspInit+0x66>
    {
      Error_Handler();
2405645a:	f7ff fbad 	bl	24055bb8 <Error_Handler>
    }

    if (SAI1_client == 0)
2405645e:	4b3e      	ldr	r3, [pc, #248]	@ (24056558 <HAL_SAI_MspInit+0x160>)
24056460:	681b      	ldr	r3, [r3, #0]
24056462:	2b00      	cmp	r3, #0
24056464:	d116      	bne.n	24056494 <HAL_SAI_MspInit+0x9c>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
24056466:	4b3d      	ldr	r3, [pc, #244]	@ (2405655c <HAL_SAI_MspInit+0x164>)
24056468:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
2405646c:	4a3b      	ldr	r2, [pc, #236]	@ (2405655c <HAL_SAI_MspInit+0x164>)
2405646e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
24056472:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
24056476:	4b39      	ldr	r3, [pc, #228]	@ (2405655c <HAL_SAI_MspInit+0x164>)
24056478:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
2405647c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
24056480:	60fb      	str	r3, [r7, #12]
24056482:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
24056484:	2200      	movs	r2, #0
24056486:	2100      	movs	r1, #0
24056488:	2057      	movs	r0, #87	@ 0x57
2405648a:	f002 fb36 	bl	24058afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
2405648e:	2057      	movs	r0, #87	@ 0x57
24056490:	f002 fb4d 	bl	24058b2e <HAL_NVIC_EnableIRQ>
    }
    SAI1_client ++;
24056494:	4b30      	ldr	r3, [pc, #192]	@ (24056558 <HAL_SAI_MspInit+0x160>)
24056496:	681b      	ldr	r3, [r3, #0]
24056498:	3301      	adds	r3, #1
2405649a:	4a2f      	ldr	r2, [pc, #188]	@ (24056558 <HAL_SAI_MspInit+0x160>)
2405649c:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
2405649e:	2370      	movs	r3, #112	@ 0x70
240564a0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240564a4:	2302      	movs	r3, #2
240564a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
240564aa:	2300      	movs	r3, #0
240564ac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
240564b0:	2300      	movs	r3, #0
240564b2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
240564b6:	2306      	movs	r3, #6
240564b8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
240564bc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
240564c0:	4619      	mov	r1, r3
240564c2:	4827      	ldr	r0, [pc, #156]	@ (24056560 <HAL_SAI_MspInit+0x168>)
240564c4:	f005 fc84 	bl	2405bdd0 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream0;
240564c8:	4b26      	ldr	r3, [pc, #152]	@ (24056564 <HAL_SAI_MspInit+0x16c>)
240564ca:	4a27      	ldr	r2, [pc, #156]	@ (24056568 <HAL_SAI_MspInit+0x170>)
240564cc:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
240564ce:	4b25      	ldr	r3, [pc, #148]	@ (24056564 <HAL_SAI_MspInit+0x16c>)
240564d0:	2257      	movs	r2, #87	@ 0x57
240564d2:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
240564d4:	4b23      	ldr	r3, [pc, #140]	@ (24056564 <HAL_SAI_MspInit+0x16c>)
240564d6:	2240      	movs	r2, #64	@ 0x40
240564d8:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
240564da:	4b22      	ldr	r3, [pc, #136]	@ (24056564 <HAL_SAI_MspInit+0x16c>)
240564dc:	2200      	movs	r2, #0
240564de:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
240564e0:	4b20      	ldr	r3, [pc, #128]	@ (24056564 <HAL_SAI_MspInit+0x16c>)
240564e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
240564e6:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
240564e8:	4b1e      	ldr	r3, [pc, #120]	@ (24056564 <HAL_SAI_MspInit+0x16c>)
240564ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
240564ee:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
240564f0:	4b1c      	ldr	r3, [pc, #112]	@ (24056564 <HAL_SAI_MspInit+0x16c>)
240564f2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
240564f6:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
240564f8:	4b1a      	ldr	r3, [pc, #104]	@ (24056564 <HAL_SAI_MspInit+0x16c>)
240564fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
240564fe:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
24056500:	4b18      	ldr	r3, [pc, #96]	@ (24056564 <HAL_SAI_MspInit+0x16c>)
24056502:	2200      	movs	r2, #0
24056504:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
24056506:	4b17      	ldr	r3, [pc, #92]	@ (24056564 <HAL_SAI_MspInit+0x16c>)
24056508:	2204      	movs	r2, #4
2405650a:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
2405650c:	4b15      	ldr	r3, [pc, #84]	@ (24056564 <HAL_SAI_MspInit+0x16c>)
2405650e:	2203      	movs	r2, #3
24056510:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
24056512:	4b14      	ldr	r3, [pc, #80]	@ (24056564 <HAL_SAI_MspInit+0x16c>)
24056514:	2200      	movs	r2, #0
24056516:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
24056518:	4b12      	ldr	r3, [pc, #72]	@ (24056564 <HAL_SAI_MspInit+0x16c>)
2405651a:	2200      	movs	r2, #0
2405651c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
2405651e:	4811      	ldr	r0, [pc, #68]	@ (24056564 <HAL_SAI_MspInit+0x16c>)
24056520:	f002 fd08 	bl	24058f34 <HAL_DMA_Init>
24056524:	4603      	mov	r3, r0
24056526:	2b00      	cmp	r3, #0
24056528:	d001      	beq.n	2405652e <HAL_SAI_MspInit+0x136>
    {
      Error_Handler();
2405652a:	f7ff fb45 	bl	24055bb8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
2405652e:	687b      	ldr	r3, [r7, #4]
24056530:	4a0c      	ldr	r2, [pc, #48]	@ (24056564 <HAL_SAI_MspInit+0x16c>)
24056532:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
24056536:	4a0b      	ldr	r2, [pc, #44]	@ (24056564 <HAL_SAI_MspInit+0x16c>)
24056538:	687b      	ldr	r3, [r7, #4]
2405653a:	6393      	str	r3, [r2, #56]	@ 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
2405653c:	687b      	ldr	r3, [r7, #4]
2405653e:	4a09      	ldr	r2, [pc, #36]	@ (24056564 <HAL_SAI_MspInit+0x16c>)
24056540:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
24056544:	4a07      	ldr	r2, [pc, #28]	@ (24056564 <HAL_SAI_MspInit+0x16c>)
24056546:	687b      	ldr	r3, [r7, #4]
24056548:	6393      	str	r3, [r2, #56]	@ 0x38

    }
}
2405654a:	bf00      	nop
2405654c:	37e8      	adds	r7, #232	@ 0xe8
2405654e:	46bd      	mov	sp, r7
24056550:	bd80      	pop	{r7, pc}
24056552:	bf00      	nop
24056554:	40015804 	.word	0x40015804
24056558:	20000674 	.word	0x20000674
2405655c:	58024400 	.word	0x58024400
24056560:	58021000 	.word	0x58021000
24056564:	20000528 	.word	0x20000528
24056568:	40020010 	.word	0x40020010

2405656c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
2405656c:	b480      	push	{r7}
2405656e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
24056570:	bf00      	nop
24056572:	e7fd      	b.n	24056570 <NMI_Handler+0x4>

24056574 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
24056574:	b480      	push	{r7}
24056576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
24056578:	bf00      	nop
2405657a:	e7fd      	b.n	24056578 <HardFault_Handler+0x4>

2405657c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
2405657c:	b480      	push	{r7}
2405657e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
24056580:	bf00      	nop
24056582:	e7fd      	b.n	24056580 <MemManage_Handler+0x4>

24056584 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
24056584:	b480      	push	{r7}
24056586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
24056588:	bf00      	nop
2405658a:	e7fd      	b.n	24056588 <BusFault_Handler+0x4>

2405658c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
2405658c:	b480      	push	{r7}
2405658e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
24056590:	bf00      	nop
24056592:	e7fd      	b.n	24056590 <UsageFault_Handler+0x4>

24056594 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
24056594:	b480      	push	{r7}
24056596:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
24056598:	bf00      	nop
2405659a:	46bd      	mov	sp, r7
2405659c:	f85d 7b04 	ldr.w	r7, [sp], #4
240565a0:	4770      	bx	lr

240565a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
240565a2:	b480      	push	{r7}
240565a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
240565a6:	bf00      	nop
240565a8:	46bd      	mov	sp, r7
240565aa:	f85d 7b04 	ldr.w	r7, [sp], #4
240565ae:	4770      	bx	lr

240565b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
240565b0:	b480      	push	{r7}
240565b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
240565b4:	bf00      	nop
240565b6:	46bd      	mov	sp, r7
240565b8:	f85d 7b04 	ldr.w	r7, [sp], #4
240565bc:	4770      	bx	lr
	...

240565c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
240565c0:	b580      	push	{r7, lr}
240565c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
240565c4:	f000 fa48 	bl	24056a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
#if 1
	if (HAL_GPIO_ReadPin(BTN_PWR_GPIO_Port, BTN_PWR_Pin) == 0) // is power button down ?
240565c8:	2101      	movs	r1, #1
240565ca:	480c      	ldr	r0, [pc, #48]	@ (240565fc <SysTick_Handler+0x3c>)
240565cc:	f005 fdb0 	bl	2405c130 <HAL_GPIO_ReadPin>
240565d0:	4603      	mov	r3, r0
240565d2:	2b00      	cmp	r3, #0
240565d4:	d10d      	bne.n	240565f2 <SysTick_Handler+0x32>
			{
		g_system_reset_ticks++;
240565d6:	4b0a      	ldr	r3, [pc, #40]	@ (24056600 <SysTick_Handler+0x40>)
240565d8:	681b      	ldr	r3, [r3, #0]
240565da:	3301      	adds	r3, #1
240565dc:	4a08      	ldr	r2, [pc, #32]	@ (24056600 <SysTick_Handler+0x40>)
240565de:	6013      	str	r3, [r2, #0]
		if (g_system_reset_ticks >= 5000) {
240565e0:	4b07      	ldr	r3, [pc, #28]	@ (24056600 <SysTick_Handler+0x40>)
240565e2:	681b      	ldr	r3, [r3, #0]
240565e4:	f241 3287 	movw	r2, #4999	@ 0x1387
240565e8:	4293      	cmp	r3, r2
240565ea:	dd05      	ble.n	240565f8 <SysTick_Handler+0x38>
			HAL_NVIC_SystemReset();
240565ec:	f002 faad 	bl	24058b4a <HAL_NVIC_SystemReset>
	} else {
		g_system_reset_ticks = 0;
	}
#endif
  /* USER CODE END SysTick_IRQn 1 */
}
240565f0:	e002      	b.n	240565f8 <SysTick_Handler+0x38>
		g_system_reset_ticks = 0;
240565f2:	4b03      	ldr	r3, [pc, #12]	@ (24056600 <SysTick_Handler+0x40>)
240565f4:	2200      	movs	r2, #0
240565f6:	601a      	str	r2, [r3, #0]
}
240565f8:	bf00      	nop
240565fa:	bd80      	pop	{r7, pc}
240565fc:	58020000 	.word	0x58020000
24056600:	20000678 	.word	0x20000678

24056604 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
24056604:	b580      	push	{r7, lr}
24056606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
24056608:	2004      	movs	r0, #4
2405660a:	f005 fdc2 	bl	2405c192 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
2405660e:	bf00      	nop
24056610:	bd80      	pop	{r7, pc}
	...

24056614 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
24056614:	b580      	push	{r7, lr}
24056616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
24056618:	4802      	ldr	r0, [pc, #8]	@ (24056624 <DMA1_Stream0_IRQHandler+0x10>)
2405661a:	f003 ffe7 	bl	2405a5ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
2405661e:	bf00      	nop
24056620:	bd80      	pop	{r7, pc}
24056622:	bf00      	nop
24056624:	20000528 	.word	0x20000528

24056628 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
24056628:	b580      	push	{r7, lr}
2405662a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
2405662c:	4802      	ldr	r0, [pc, #8]	@ (24056638 <ADC_IRQHandler+0x10>)
2405662e:	f001 f901 	bl	24057834 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
24056632:	bf00      	nop
24056634:	bd80      	pop	{r7, pc}
24056636:	bf00      	nop
24056638:	20000270 	.word	0x20000270

2405663c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
2405663c:	b580      	push	{r7, lr}
2405663e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
24056640:	2080      	movs	r0, #128	@ 0x80
24056642:	f005 fda6 	bl	2405c192 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
24056646:	bf00      	nop
24056648:	bd80      	pop	{r7, pc}
	...

2405664c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
2405664c:	b580      	push	{r7, lr}
2405664e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
24056650:	4802      	ldr	r0, [pc, #8]	@ (2405665c <TIM1_UP_IRQHandler+0x10>)
24056652:	f00d f90b 	bl	2406386c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
24056656:	bf00      	nop
24056658:	bd80      	pop	{r7, pc}
2405665a:	bf00      	nop
2405665c:	20000628 	.word	0x20000628

24056660 <SAI1_IRQHandler>:

/**
  * @brief This function handles SAI1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
24056660:	b580      	push	{r7, lr}
24056662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
24056664:	4802      	ldr	r0, [pc, #8]	@ (24056670 <SAI1_IRQHandler+0x10>)
24056666:	f00c f82b 	bl	240626c0 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
2405666a:	bf00      	nop
2405666c:	bd80      	pop	{r7, pc}
2405666e:	bf00      	nop
24056670:	20000490 	.word	0x20000490

24056674 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
24056674:	b580      	push	{r7, lr}
24056676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
24056678:	4802      	ldr	r0, [pc, #8]	@ (24056684 <LTDC_IRQHandler+0x10>)
2405667a:	f005 fe7f 	bl	2405c37c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
2405667e:	bf00      	nop
24056680:	bd80      	pop	{r7, pc}
24056682:	bf00      	nop
24056684:	20000364 	.word	0x20000364

24056688 <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
24056688:	b580      	push	{r7, lr}
2405668a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
2405668c:	4802      	ldr	r0, [pc, #8]	@ (24056698 <OCTOSPI1_IRQHandler+0x10>)
2405668e:	f006 fa4f 	bl	2405cb30 <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
24056692:	bf00      	nop
24056694:	bd80      	pop	{r7, pc}
24056696:	bf00      	nop
24056698:	2000040c 	.word	0x2000040c

2405669c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
2405669c:	b480      	push	{r7}
2405669e:	af00      	add	r7, sp, #0
	return 1;
240566a0:	2301      	movs	r3, #1
}
240566a2:	4618      	mov	r0, r3
240566a4:	46bd      	mov	sp, r7
240566a6:	f85d 7b04 	ldr.w	r7, [sp], #4
240566aa:	4770      	bx	lr

240566ac <_kill>:

int _kill(int pid, int sig)
{
240566ac:	b580      	push	{r7, lr}
240566ae:	b082      	sub	sp, #8
240566b0:	af00      	add	r7, sp, #0
240566b2:	6078      	str	r0, [r7, #4]
240566b4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
240566b6:	f00e f90b 	bl	240648d0 <__errno>
240566ba:	4603      	mov	r3, r0
240566bc:	2216      	movs	r2, #22
240566be:	601a      	str	r2, [r3, #0]
	return -1;
240566c0:	f04f 33ff 	mov.w	r3, #4294967295
}
240566c4:	4618      	mov	r0, r3
240566c6:	3708      	adds	r7, #8
240566c8:	46bd      	mov	sp, r7
240566ca:	bd80      	pop	{r7, pc}

240566cc <_exit>:

void _exit (int status)
{
240566cc:	b580      	push	{r7, lr}
240566ce:	b082      	sub	sp, #8
240566d0:	af00      	add	r7, sp, #0
240566d2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
240566d4:	f04f 31ff 	mov.w	r1, #4294967295
240566d8:	6878      	ldr	r0, [r7, #4]
240566da:	f7ff ffe7 	bl	240566ac <_kill>
	while (1) {}		/* Make sure we hang here */
240566de:	bf00      	nop
240566e0:	e7fd      	b.n	240566de <_exit+0x12>

240566e2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
240566e2:	b580      	push	{r7, lr}
240566e4:	b086      	sub	sp, #24
240566e6:	af00      	add	r7, sp, #0
240566e8:	60f8      	str	r0, [r7, #12]
240566ea:	60b9      	str	r1, [r7, #8]
240566ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
240566ee:	2300      	movs	r3, #0
240566f0:	617b      	str	r3, [r7, #20]
240566f2:	e00a      	b.n	2405670a <_read+0x28>
	{
		*ptr++ = __io_getchar();
240566f4:	f3af 8000 	nop.w
240566f8:	4601      	mov	r1, r0
240566fa:	68bb      	ldr	r3, [r7, #8]
240566fc:	1c5a      	adds	r2, r3, #1
240566fe:	60ba      	str	r2, [r7, #8]
24056700:	b2ca      	uxtb	r2, r1
24056702:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
24056704:	697b      	ldr	r3, [r7, #20]
24056706:	3301      	adds	r3, #1
24056708:	617b      	str	r3, [r7, #20]
2405670a:	697a      	ldr	r2, [r7, #20]
2405670c:	687b      	ldr	r3, [r7, #4]
2405670e:	429a      	cmp	r2, r3
24056710:	dbf0      	blt.n	240566f4 <_read+0x12>
	}

return len;
24056712:	687b      	ldr	r3, [r7, #4]
}
24056714:	4618      	mov	r0, r3
24056716:	3718      	adds	r7, #24
24056718:	46bd      	mov	sp, r7
2405671a:	bd80      	pop	{r7, pc}

2405671c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
2405671c:	b580      	push	{r7, lr}
2405671e:	b086      	sub	sp, #24
24056720:	af00      	add	r7, sp, #0
24056722:	60f8      	str	r0, [r7, #12]
24056724:	60b9      	str	r1, [r7, #8]
24056726:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
24056728:	2300      	movs	r3, #0
2405672a:	617b      	str	r3, [r7, #20]
2405672c:	e009      	b.n	24056742 <_write+0x26>
	{
		__io_putchar(*ptr++);
2405672e:	68bb      	ldr	r3, [r7, #8]
24056730:	1c5a      	adds	r2, r3, #1
24056732:	60ba      	str	r2, [r7, #8]
24056734:	781b      	ldrb	r3, [r3, #0]
24056736:	4618      	mov	r0, r3
24056738:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
2405673c:	697b      	ldr	r3, [r7, #20]
2405673e:	3301      	adds	r3, #1
24056740:	617b      	str	r3, [r7, #20]
24056742:	697a      	ldr	r2, [r7, #20]
24056744:	687b      	ldr	r3, [r7, #4]
24056746:	429a      	cmp	r2, r3
24056748:	dbf1      	blt.n	2405672e <_write+0x12>
	}
	return len;
2405674a:	687b      	ldr	r3, [r7, #4]
}
2405674c:	4618      	mov	r0, r3
2405674e:	3718      	adds	r7, #24
24056750:	46bd      	mov	sp, r7
24056752:	bd80      	pop	{r7, pc}

24056754 <_close>:

int _close(int file)
{
24056754:	b480      	push	{r7}
24056756:	b083      	sub	sp, #12
24056758:	af00      	add	r7, sp, #0
2405675a:	6078      	str	r0, [r7, #4]
	return -1;
2405675c:	f04f 33ff 	mov.w	r3, #4294967295
}
24056760:	4618      	mov	r0, r3
24056762:	370c      	adds	r7, #12
24056764:	46bd      	mov	sp, r7
24056766:	f85d 7b04 	ldr.w	r7, [sp], #4
2405676a:	4770      	bx	lr

2405676c <_fstat>:


int _fstat(int file, struct stat *st)
{
2405676c:	b480      	push	{r7}
2405676e:	b083      	sub	sp, #12
24056770:	af00      	add	r7, sp, #0
24056772:	6078      	str	r0, [r7, #4]
24056774:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
24056776:	683b      	ldr	r3, [r7, #0]
24056778:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
2405677c:	605a      	str	r2, [r3, #4]
	return 0;
2405677e:	2300      	movs	r3, #0
}
24056780:	4618      	mov	r0, r3
24056782:	370c      	adds	r7, #12
24056784:	46bd      	mov	sp, r7
24056786:	f85d 7b04 	ldr.w	r7, [sp], #4
2405678a:	4770      	bx	lr

2405678c <_isatty>:

int _isatty(int file)
{
2405678c:	b480      	push	{r7}
2405678e:	b083      	sub	sp, #12
24056790:	af00      	add	r7, sp, #0
24056792:	6078      	str	r0, [r7, #4]
	return 1;
24056794:	2301      	movs	r3, #1
}
24056796:	4618      	mov	r0, r3
24056798:	370c      	adds	r7, #12
2405679a:	46bd      	mov	sp, r7
2405679c:	f85d 7b04 	ldr.w	r7, [sp], #4
240567a0:	4770      	bx	lr

240567a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
240567a2:	b480      	push	{r7}
240567a4:	b085      	sub	sp, #20
240567a6:	af00      	add	r7, sp, #0
240567a8:	60f8      	str	r0, [r7, #12]
240567aa:	60b9      	str	r1, [r7, #8]
240567ac:	607a      	str	r2, [r7, #4]
	return 0;
240567ae:	2300      	movs	r3, #0
}
240567b0:	4618      	mov	r0, r3
240567b2:	3714      	adds	r7, #20
240567b4:	46bd      	mov	sp, r7
240567b6:	f85d 7b04 	ldr.w	r7, [sp], #4
240567ba:	4770      	bx	lr

240567bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
240567bc:	b580      	push	{r7, lr}
240567be:	b086      	sub	sp, #24
240567c0:	af00      	add	r7, sp, #0
240567c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
240567c4:	4a14      	ldr	r2, [pc, #80]	@ (24056818 <_sbrk+0x5c>)
240567c6:	4b15      	ldr	r3, [pc, #84]	@ (2405681c <_sbrk+0x60>)
240567c8:	1ad3      	subs	r3, r2, r3
240567ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
240567cc:	697b      	ldr	r3, [r7, #20]
240567ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
240567d0:	4b13      	ldr	r3, [pc, #76]	@ (24056820 <_sbrk+0x64>)
240567d2:	681b      	ldr	r3, [r3, #0]
240567d4:	2b00      	cmp	r3, #0
240567d6:	d102      	bne.n	240567de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
240567d8:	4b11      	ldr	r3, [pc, #68]	@ (24056820 <_sbrk+0x64>)
240567da:	4a12      	ldr	r2, [pc, #72]	@ (24056824 <_sbrk+0x68>)
240567dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
240567de:	4b10      	ldr	r3, [pc, #64]	@ (24056820 <_sbrk+0x64>)
240567e0:	681a      	ldr	r2, [r3, #0]
240567e2:	687b      	ldr	r3, [r7, #4]
240567e4:	4413      	add	r3, r2
240567e6:	693a      	ldr	r2, [r7, #16]
240567e8:	429a      	cmp	r2, r3
240567ea:	d207      	bcs.n	240567fc <_sbrk+0x40>
  {
    errno = ENOMEM;
240567ec:	f00e f870 	bl	240648d0 <__errno>
240567f0:	4603      	mov	r3, r0
240567f2:	220c      	movs	r2, #12
240567f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
240567f6:	f04f 33ff 	mov.w	r3, #4294967295
240567fa:	e009      	b.n	24056810 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
240567fc:	4b08      	ldr	r3, [pc, #32]	@ (24056820 <_sbrk+0x64>)
240567fe:	681b      	ldr	r3, [r3, #0]
24056800:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
24056802:	4b07      	ldr	r3, [pc, #28]	@ (24056820 <_sbrk+0x64>)
24056804:	681a      	ldr	r2, [r3, #0]
24056806:	687b      	ldr	r3, [r7, #4]
24056808:	4413      	add	r3, r2
2405680a:	4a05      	ldr	r2, [pc, #20]	@ (24056820 <_sbrk+0x64>)
2405680c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
2405680e:	68fb      	ldr	r3, [r7, #12]
}
24056810:	4618      	mov	r0, r3
24056812:	3718      	adds	r7, #24
24056814:	46bd      	mov	sp, r7
24056816:	bd80      	pop	{r7, pc}
24056818:	20020000 	.word	0x20020000
2405681c:	00005000 	.word	0x00005000
24056820:	2000067c 	.word	0x2000067c
24056824:	200007d0 	.word	0x200007d0

24056828 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
24056828:	b480      	push	{r7}
2405682a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
2405682c:	4b34      	ldr	r3, [pc, #208]	@ (24056900 <SystemInit+0xd8>)
2405682e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
24056832:	4a33      	ldr	r2, [pc, #204]	@ (24056900 <SystemInit+0xd8>)
24056834:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
24056838:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
2405683c:	4b31      	ldr	r3, [pc, #196]	@ (24056904 <SystemInit+0xdc>)
2405683e:	681b      	ldr	r3, [r3, #0]
24056840:	f003 030f 	and.w	r3, r3, #15
24056844:	2b02      	cmp	r3, #2
24056846:	d807      	bhi.n	24056858 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
24056848:	4b2e      	ldr	r3, [pc, #184]	@ (24056904 <SystemInit+0xdc>)
2405684a:	681b      	ldr	r3, [r3, #0]
2405684c:	f023 030f 	bic.w	r3, r3, #15
24056850:	4a2c      	ldr	r2, [pc, #176]	@ (24056904 <SystemInit+0xdc>)
24056852:	f043 0303 	orr.w	r3, r3, #3
24056856:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
24056858:	4b2b      	ldr	r3, [pc, #172]	@ (24056908 <SystemInit+0xe0>)
2405685a:	681b      	ldr	r3, [r3, #0]
2405685c:	4a2a      	ldr	r2, [pc, #168]	@ (24056908 <SystemInit+0xe0>)
2405685e:	f043 0301 	orr.w	r3, r3, #1
24056862:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
24056864:	4b28      	ldr	r3, [pc, #160]	@ (24056908 <SystemInit+0xe0>)
24056866:	2200      	movs	r2, #0
24056868:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
2405686a:	4b27      	ldr	r3, [pc, #156]	@ (24056908 <SystemInit+0xe0>)
2405686c:	681a      	ldr	r2, [r3, #0]
2405686e:	4926      	ldr	r1, [pc, #152]	@ (24056908 <SystemInit+0xe0>)
24056870:	4b26      	ldr	r3, [pc, #152]	@ (2405690c <SystemInit+0xe4>)
24056872:	4013      	ands	r3, r2
24056874:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
24056876:	4b23      	ldr	r3, [pc, #140]	@ (24056904 <SystemInit+0xdc>)
24056878:	681b      	ldr	r3, [r3, #0]
2405687a:	f003 030c 	and.w	r3, r3, #12
2405687e:	2b00      	cmp	r3, #0
24056880:	d007      	beq.n	24056892 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
24056882:	4b20      	ldr	r3, [pc, #128]	@ (24056904 <SystemInit+0xdc>)
24056884:	681b      	ldr	r3, [r3, #0]
24056886:	f023 030f 	bic.w	r3, r3, #15
2405688a:	4a1e      	ldr	r2, [pc, #120]	@ (24056904 <SystemInit+0xdc>)
2405688c:	f043 0303 	orr.w	r3, r3, #3
24056890:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
24056892:	4b1d      	ldr	r3, [pc, #116]	@ (24056908 <SystemInit+0xe0>)
24056894:	2200      	movs	r2, #0
24056896:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
24056898:	4b1b      	ldr	r3, [pc, #108]	@ (24056908 <SystemInit+0xe0>)
2405689a:	2200      	movs	r2, #0
2405689c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
2405689e:	4b1a      	ldr	r3, [pc, #104]	@ (24056908 <SystemInit+0xe0>)
240568a0:	2200      	movs	r2, #0
240568a2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
240568a4:	4b18      	ldr	r3, [pc, #96]	@ (24056908 <SystemInit+0xe0>)
240568a6:	4a1a      	ldr	r2, [pc, #104]	@ (24056910 <SystemInit+0xe8>)
240568a8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
240568aa:	4b17      	ldr	r3, [pc, #92]	@ (24056908 <SystemInit+0xe0>)
240568ac:	4a19      	ldr	r2, [pc, #100]	@ (24056914 <SystemInit+0xec>)
240568ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
240568b0:	4b15      	ldr	r3, [pc, #84]	@ (24056908 <SystemInit+0xe0>)
240568b2:	4a19      	ldr	r2, [pc, #100]	@ (24056918 <SystemInit+0xf0>)
240568b4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
240568b6:	4b14      	ldr	r3, [pc, #80]	@ (24056908 <SystemInit+0xe0>)
240568b8:	2200      	movs	r2, #0
240568ba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
240568bc:	4b12      	ldr	r3, [pc, #72]	@ (24056908 <SystemInit+0xe0>)
240568be:	4a16      	ldr	r2, [pc, #88]	@ (24056918 <SystemInit+0xf0>)
240568c0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
240568c2:	4b11      	ldr	r3, [pc, #68]	@ (24056908 <SystemInit+0xe0>)
240568c4:	2200      	movs	r2, #0
240568c6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
240568c8:	4b0f      	ldr	r3, [pc, #60]	@ (24056908 <SystemInit+0xe0>)
240568ca:	4a13      	ldr	r2, [pc, #76]	@ (24056918 <SystemInit+0xf0>)
240568cc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
240568ce:	4b0e      	ldr	r3, [pc, #56]	@ (24056908 <SystemInit+0xe0>)
240568d0:	2200      	movs	r2, #0
240568d2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
240568d4:	4b0c      	ldr	r3, [pc, #48]	@ (24056908 <SystemInit+0xe0>)
240568d6:	681b      	ldr	r3, [r3, #0]
240568d8:	4a0b      	ldr	r2, [pc, #44]	@ (24056908 <SystemInit+0xe0>)
240568da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
240568de:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
240568e0:	4b09      	ldr	r3, [pc, #36]	@ (24056908 <SystemInit+0xe0>)
240568e2:	2200      	movs	r2, #0
240568e4:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
240568e6:	4b0d      	ldr	r3, [pc, #52]	@ (2405691c <SystemInit+0xf4>)
240568e8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
240568ec:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
240568ee:	4b04      	ldr	r3, [pc, #16]	@ (24056900 <SystemInit+0xd8>)
240568f0:	f04f 5210 	mov.w	r2, #603979776	@ 0x24000000
240568f4:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
240568f6:	bf00      	nop
240568f8:	46bd      	mov	sp, r7
240568fa:	f85d 7b04 	ldr.w	r7, [sp], #4
240568fe:	4770      	bx	lr
24056900:	e000ed00 	.word	0xe000ed00
24056904:	52002000 	.word	0x52002000
24056908:	58024400 	.word	0x58024400
2405690c:	eaf6ed7f 	.word	0xeaf6ed7f
24056910:	02020200 	.word	0x02020200
24056914:	01ff0000 	.word	0x01ff0000
24056918:	01010280 	.word	0x01010280
2405691c:	52004000 	.word	0x52004000

24056920 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
24056920:	f8df d034 	ldr.w	sp, [pc, #52]	@ 24056958 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
24056924:	f7ff ff80 	bl	24056828 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
24056928:	480c      	ldr	r0, [pc, #48]	@ (2405695c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
2405692a:	490d      	ldr	r1, [pc, #52]	@ (24056960 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
2405692c:	4a0d      	ldr	r2, [pc, #52]	@ (24056964 <LoopFillZerobss+0x1a>)
  movs r3, #0
2405692e:	2300      	movs	r3, #0
  b LoopCopyDataInit
24056930:	e002      	b.n	24056938 <LoopCopyDataInit>

24056932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
24056932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
24056934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
24056936:	3304      	adds	r3, #4

24056938 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
24056938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
2405693a:	428c      	cmp	r4, r1
  bcc CopyDataInit
2405693c:	d3f9      	bcc.n	24056932 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
2405693e:	4a0a      	ldr	r2, [pc, #40]	@ (24056968 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
24056940:	4c0a      	ldr	r4, [pc, #40]	@ (2405696c <LoopFillZerobss+0x22>)
  movs r3, #0
24056942:	2300      	movs	r3, #0
  b LoopFillZerobss
24056944:	e001      	b.n	2405694a <LoopFillZerobss>

24056946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
24056946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
24056948:	3204      	adds	r2, #4

2405694a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
2405694a:	42a2      	cmp	r2, r4
  bcc FillZerobss
2405694c:	d3fb      	bcc.n	24056946 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
2405694e:	f00d ffc5 	bl	240648dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
24056952:	f7fe fb95 	bl	24055080 <main>
  bx  lr
24056956:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
24056958:	20020000 	.word	0x20020000
  ldr r0, =_sdata
2405695c:	20000000 	.word	0x20000000
  ldr r1, =_edata
24056960:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
24056964:	24069b60 	.word	0x24069b60
  ldr r2, =_sbss
24056968:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
2405696c:	200007d0 	.word	0x200007d0

24056970 <BDMA1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
24056970:	e7fe      	b.n	24056970 <BDMA1_IRQHandler>
	...

24056974 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
24056974:	b580      	push	{r7, lr}
24056976:	b082      	sub	sp, #8
24056978:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
2405697a:	2003      	movs	r0, #3
2405697c:	f002 f8b2 	bl	24058ae4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
24056980:	f008 fa2c 	bl	2405eddc <HAL_RCC_GetSysClockFreq>
24056984:	4602      	mov	r2, r0
24056986:	4b15      	ldr	r3, [pc, #84]	@ (240569dc <HAL_Init+0x68>)
24056988:	699b      	ldr	r3, [r3, #24]
2405698a:	0a1b      	lsrs	r3, r3, #8
2405698c:	f003 030f 	and.w	r3, r3, #15
24056990:	4913      	ldr	r1, [pc, #76]	@ (240569e0 <HAL_Init+0x6c>)
24056992:	5ccb      	ldrb	r3, [r1, r3]
24056994:	f003 031f 	and.w	r3, r3, #31
24056998:	fa22 f303 	lsr.w	r3, r2, r3
2405699c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
2405699e:	4b0f      	ldr	r3, [pc, #60]	@ (240569dc <HAL_Init+0x68>)
240569a0:	699b      	ldr	r3, [r3, #24]
240569a2:	f003 030f 	and.w	r3, r3, #15
240569a6:	4a0e      	ldr	r2, [pc, #56]	@ (240569e0 <HAL_Init+0x6c>)
240569a8:	5cd3      	ldrb	r3, [r2, r3]
240569aa:	f003 031f 	and.w	r3, r3, #31
240569ae:	687a      	ldr	r2, [r7, #4]
240569b0:	fa22 f303 	lsr.w	r3, r2, r3
240569b4:	4a0b      	ldr	r2, [pc, #44]	@ (240569e4 <HAL_Init+0x70>)
240569b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
240569b8:	4a0b      	ldr	r2, [pc, #44]	@ (240569e8 <HAL_Init+0x74>)
240569ba:	687b      	ldr	r3, [r7, #4]
240569bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
240569be:	2000      	movs	r0, #0
240569c0:	f000 f814 	bl	240569ec <HAL_InitTick>
240569c4:	4603      	mov	r3, r0
240569c6:	2b00      	cmp	r3, #0
240569c8:	d001      	beq.n	240569ce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
240569ca:	2301      	movs	r3, #1
240569cc:	e002      	b.n	240569d4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
240569ce:	f7ff f8f9 	bl	24055bc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
240569d2:	2300      	movs	r3, #0
}
240569d4:	4618      	mov	r0, r3
240569d6:	3708      	adds	r7, #8
240569d8:	46bd      	mov	sp, r7
240569da:	bd80      	pop	{r7, pc}
240569dc:	58024400 	.word	0x58024400
240569e0:	24069a58 	.word	0x24069a58
240569e4:	200000e4 	.word	0x200000e4
240569e8:	200000e0 	.word	0x200000e0

240569ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
240569ec:	b580      	push	{r7, lr}
240569ee:	b082      	sub	sp, #8
240569f0:	af00      	add	r7, sp, #0
240569f2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
240569f4:	4b15      	ldr	r3, [pc, #84]	@ (24056a4c <HAL_InitTick+0x60>)
240569f6:	781b      	ldrb	r3, [r3, #0]
240569f8:	2b00      	cmp	r3, #0
240569fa:	d101      	bne.n	24056a00 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
240569fc:	2301      	movs	r3, #1
240569fe:	e021      	b.n	24056a44 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
24056a00:	4b13      	ldr	r3, [pc, #76]	@ (24056a50 <HAL_InitTick+0x64>)
24056a02:	681a      	ldr	r2, [r3, #0]
24056a04:	4b11      	ldr	r3, [pc, #68]	@ (24056a4c <HAL_InitTick+0x60>)
24056a06:	781b      	ldrb	r3, [r3, #0]
24056a08:	4619      	mov	r1, r3
24056a0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
24056a0e:	fbb3 f3f1 	udiv	r3, r3, r1
24056a12:	fbb2 f3f3 	udiv	r3, r2, r3
24056a16:	4618      	mov	r0, r3
24056a18:	f002 f89b 	bl	24058b52 <HAL_SYSTICK_Config>
24056a1c:	4603      	mov	r3, r0
24056a1e:	2b00      	cmp	r3, #0
24056a20:	d001      	beq.n	24056a26 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
24056a22:	2301      	movs	r3, #1
24056a24:	e00e      	b.n	24056a44 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
24056a26:	687b      	ldr	r3, [r7, #4]
24056a28:	2b0f      	cmp	r3, #15
24056a2a:	d80a      	bhi.n	24056a42 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
24056a2c:	2200      	movs	r2, #0
24056a2e:	6879      	ldr	r1, [r7, #4]
24056a30:	f04f 30ff 	mov.w	r0, #4294967295
24056a34:	f002 f861 	bl	24058afa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
24056a38:	4a06      	ldr	r2, [pc, #24]	@ (24056a54 <HAL_InitTick+0x68>)
24056a3a:	687b      	ldr	r3, [r7, #4]
24056a3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
24056a3e:	2300      	movs	r3, #0
24056a40:	e000      	b.n	24056a44 <HAL_InitTick+0x58>
    return HAL_ERROR;
24056a42:	2301      	movs	r3, #1
}
24056a44:	4618      	mov	r0, r3
24056a46:	3708      	adds	r7, #8
24056a48:	46bd      	mov	sp, r7
24056a4a:	bd80      	pop	{r7, pc}
24056a4c:	200000ec 	.word	0x200000ec
24056a50:	200000e0 	.word	0x200000e0
24056a54:	200000e8 	.word	0x200000e8

24056a58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
24056a58:	b480      	push	{r7}
24056a5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
24056a5c:	4b06      	ldr	r3, [pc, #24]	@ (24056a78 <HAL_IncTick+0x20>)
24056a5e:	781b      	ldrb	r3, [r3, #0]
24056a60:	461a      	mov	r2, r3
24056a62:	4b06      	ldr	r3, [pc, #24]	@ (24056a7c <HAL_IncTick+0x24>)
24056a64:	681b      	ldr	r3, [r3, #0]
24056a66:	4413      	add	r3, r2
24056a68:	4a04      	ldr	r2, [pc, #16]	@ (24056a7c <HAL_IncTick+0x24>)
24056a6a:	6013      	str	r3, [r2, #0]
}
24056a6c:	bf00      	nop
24056a6e:	46bd      	mov	sp, r7
24056a70:	f85d 7b04 	ldr.w	r7, [sp], #4
24056a74:	4770      	bx	lr
24056a76:	bf00      	nop
24056a78:	200000ec 	.word	0x200000ec
24056a7c:	20000680 	.word	0x20000680

24056a80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
24056a80:	b480      	push	{r7}
24056a82:	af00      	add	r7, sp, #0
  return uwTick;
24056a84:	4b03      	ldr	r3, [pc, #12]	@ (24056a94 <HAL_GetTick+0x14>)
24056a86:	681b      	ldr	r3, [r3, #0]
}
24056a88:	4618      	mov	r0, r3
24056a8a:	46bd      	mov	sp, r7
24056a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
24056a90:	4770      	bx	lr
24056a92:	bf00      	nop
24056a94:	20000680 	.word	0x20000680

24056a98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
24056a98:	b580      	push	{r7, lr}
24056a9a:	b084      	sub	sp, #16
24056a9c:	af00      	add	r7, sp, #0
24056a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
24056aa0:	f7ff ffee 	bl	24056a80 <HAL_GetTick>
24056aa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
24056aa6:	687b      	ldr	r3, [r7, #4]
24056aa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
24056aaa:	68fb      	ldr	r3, [r7, #12]
24056aac:	f1b3 3fff 	cmp.w	r3, #4294967295
24056ab0:	d005      	beq.n	24056abe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
24056ab2:	4b0a      	ldr	r3, [pc, #40]	@ (24056adc <HAL_Delay+0x44>)
24056ab4:	781b      	ldrb	r3, [r3, #0]
24056ab6:	461a      	mov	r2, r3
24056ab8:	68fb      	ldr	r3, [r7, #12]
24056aba:	4413      	add	r3, r2
24056abc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
24056abe:	bf00      	nop
24056ac0:	f7ff ffde 	bl	24056a80 <HAL_GetTick>
24056ac4:	4602      	mov	r2, r0
24056ac6:	68bb      	ldr	r3, [r7, #8]
24056ac8:	1ad3      	subs	r3, r2, r3
24056aca:	68fa      	ldr	r2, [r7, #12]
24056acc:	429a      	cmp	r2, r3
24056ace:	d8f7      	bhi.n	24056ac0 <HAL_Delay+0x28>
  {
  }
}
24056ad0:	bf00      	nop
24056ad2:	bf00      	nop
24056ad4:	3710      	adds	r7, #16
24056ad6:	46bd      	mov	sp, r7
24056ad8:	bd80      	pop	{r7, pc}
24056ada:	bf00      	nop
24056adc:	200000ec 	.word	0x200000ec

24056ae0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
24056ae0:	b480      	push	{r7}
24056ae2:	b083      	sub	sp, #12
24056ae4:	af00      	add	r7, sp, #0
24056ae6:	6078      	str	r0, [r7, #4]
24056ae8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
24056aea:	687b      	ldr	r3, [r7, #4]
24056aec:	689b      	ldr	r3, [r3, #8]
24056aee:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
24056af2:	683b      	ldr	r3, [r7, #0]
24056af4:	431a      	orrs	r2, r3
24056af6:	687b      	ldr	r3, [r7, #4]
24056af8:	609a      	str	r2, [r3, #8]
}
24056afa:	bf00      	nop
24056afc:	370c      	adds	r7, #12
24056afe:	46bd      	mov	sp, r7
24056b00:	f85d 7b04 	ldr.w	r7, [sp], #4
24056b04:	4770      	bx	lr

24056b06 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
24056b06:	b480      	push	{r7}
24056b08:	b083      	sub	sp, #12
24056b0a:	af00      	add	r7, sp, #0
24056b0c:	6078      	str	r0, [r7, #4]
24056b0e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
24056b10:	687b      	ldr	r3, [r7, #4]
24056b12:	689b      	ldr	r3, [r3, #8]
24056b14:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
24056b18:	683b      	ldr	r3, [r7, #0]
24056b1a:	431a      	orrs	r2, r3
24056b1c:	687b      	ldr	r3, [r7, #4]
24056b1e:	609a      	str	r2, [r3, #8]
}
24056b20:	bf00      	nop
24056b22:	370c      	adds	r7, #12
24056b24:	46bd      	mov	sp, r7
24056b26:	f85d 7b04 	ldr.w	r7, [sp], #4
24056b2a:	4770      	bx	lr

24056b2c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
24056b2c:	b480      	push	{r7}
24056b2e:	b083      	sub	sp, #12
24056b30:	af00      	add	r7, sp, #0
24056b32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
24056b34:	687b      	ldr	r3, [r7, #4]
24056b36:	689b      	ldr	r3, [r3, #8]
24056b38:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
24056b3c:	4618      	mov	r0, r3
24056b3e:	370c      	adds	r7, #12
24056b40:	46bd      	mov	sp, r7
24056b42:	f85d 7b04 	ldr.w	r7, [sp], #4
24056b46:	4770      	bx	lr

24056b48 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
24056b48:	b480      	push	{r7}
24056b4a:	b087      	sub	sp, #28
24056b4c:	af00      	add	r7, sp, #0
24056b4e:	60f8      	str	r0, [r7, #12]
24056b50:	60b9      	str	r1, [r7, #8]
24056b52:	607a      	str	r2, [r7, #4]
24056b54:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
24056b56:	68fb      	ldr	r3, [r7, #12]
24056b58:	3360      	adds	r3, #96	@ 0x60
24056b5a:	461a      	mov	r2, r3
24056b5c:	68bb      	ldr	r3, [r7, #8]
24056b5e:	009b      	lsls	r3, r3, #2
24056b60:	4413      	add	r3, r2
24056b62:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
24056b64:	697b      	ldr	r3, [r7, #20]
24056b66:	681b      	ldr	r3, [r3, #0]
24056b68:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
24056b6c:	687b      	ldr	r3, [r7, #4]
24056b6e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
24056b72:	683b      	ldr	r3, [r7, #0]
24056b74:	430b      	orrs	r3, r1
24056b76:	431a      	orrs	r2, r3
24056b78:	697b      	ldr	r3, [r7, #20]
24056b7a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
24056b7c:	bf00      	nop
24056b7e:	371c      	adds	r7, #28
24056b80:	46bd      	mov	sp, r7
24056b82:	f85d 7b04 	ldr.w	r7, [sp], #4
24056b86:	4770      	bx	lr

24056b88 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
24056b88:	b480      	push	{r7}
24056b8a:	b085      	sub	sp, #20
24056b8c:	af00      	add	r7, sp, #0
24056b8e:	60f8      	str	r0, [r7, #12]
24056b90:	60b9      	str	r1, [r7, #8]
24056b92:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
24056b94:	68fb      	ldr	r3, [r7, #12]
24056b96:	691b      	ldr	r3, [r3, #16]
24056b98:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
24056b9c:	68bb      	ldr	r3, [r7, #8]
24056b9e:	f003 031f 	and.w	r3, r3, #31
24056ba2:	6879      	ldr	r1, [r7, #4]
24056ba4:	fa01 f303 	lsl.w	r3, r1, r3
24056ba8:	431a      	orrs	r2, r3
24056baa:	68fb      	ldr	r3, [r7, #12]
24056bac:	611a      	str	r2, [r3, #16]
}
24056bae:	bf00      	nop
24056bb0:	3714      	adds	r7, #20
24056bb2:	46bd      	mov	sp, r7
24056bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
24056bb8:	4770      	bx	lr

24056bba <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
24056bba:	b480      	push	{r7}
24056bbc:	b087      	sub	sp, #28
24056bbe:	af00      	add	r7, sp, #0
24056bc0:	60f8      	str	r0, [r7, #12]
24056bc2:	60b9      	str	r1, [r7, #8]
24056bc4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
24056bc6:	68fb      	ldr	r3, [r7, #12]
24056bc8:	3360      	adds	r3, #96	@ 0x60
24056bca:	461a      	mov	r2, r3
24056bcc:	68bb      	ldr	r3, [r7, #8]
24056bce:	009b      	lsls	r3, r3, #2
24056bd0:	4413      	add	r3, r2
24056bd2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
24056bd4:	697b      	ldr	r3, [r7, #20]
24056bd6:	681b      	ldr	r3, [r3, #0]
24056bd8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
24056bdc:	687b      	ldr	r3, [r7, #4]
24056bde:	431a      	orrs	r2, r3
24056be0:	697b      	ldr	r3, [r7, #20]
24056be2:	601a      	str	r2, [r3, #0]
  }
}
24056be4:	bf00      	nop
24056be6:	371c      	adds	r7, #28
24056be8:	46bd      	mov	sp, r7
24056bea:	f85d 7b04 	ldr.w	r7, [sp], #4
24056bee:	4770      	bx	lr

24056bf0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
24056bf0:	b480      	push	{r7}
24056bf2:	b083      	sub	sp, #12
24056bf4:	af00      	add	r7, sp, #0
24056bf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
24056bf8:	687b      	ldr	r3, [r7, #4]
24056bfa:	68db      	ldr	r3, [r3, #12]
24056bfc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
24056c00:	2b00      	cmp	r3, #0
24056c02:	d101      	bne.n	24056c08 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
24056c04:	2301      	movs	r3, #1
24056c06:	e000      	b.n	24056c0a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
24056c08:	2300      	movs	r3, #0
}
24056c0a:	4618      	mov	r0, r3
24056c0c:	370c      	adds	r7, #12
24056c0e:	46bd      	mov	sp, r7
24056c10:	f85d 7b04 	ldr.w	r7, [sp], #4
24056c14:	4770      	bx	lr

24056c16 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
24056c16:	b480      	push	{r7}
24056c18:	b087      	sub	sp, #28
24056c1a:	af00      	add	r7, sp, #0
24056c1c:	60f8      	str	r0, [r7, #12]
24056c1e:	60b9      	str	r1, [r7, #8]
24056c20:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
24056c22:	68fb      	ldr	r3, [r7, #12]
24056c24:	3330      	adds	r3, #48	@ 0x30
24056c26:	461a      	mov	r2, r3
24056c28:	68bb      	ldr	r3, [r7, #8]
24056c2a:	0a1b      	lsrs	r3, r3, #8
24056c2c:	009b      	lsls	r3, r3, #2
24056c2e:	f003 030c 	and.w	r3, r3, #12
24056c32:	4413      	add	r3, r2
24056c34:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
24056c36:	697b      	ldr	r3, [r7, #20]
24056c38:	681a      	ldr	r2, [r3, #0]
24056c3a:	68bb      	ldr	r3, [r7, #8]
24056c3c:	f003 031f 	and.w	r3, r3, #31
24056c40:	211f      	movs	r1, #31
24056c42:	fa01 f303 	lsl.w	r3, r1, r3
24056c46:	43db      	mvns	r3, r3
24056c48:	401a      	ands	r2, r3
24056c4a:	687b      	ldr	r3, [r7, #4]
24056c4c:	0e9b      	lsrs	r3, r3, #26
24056c4e:	f003 011f 	and.w	r1, r3, #31
24056c52:	68bb      	ldr	r3, [r7, #8]
24056c54:	f003 031f 	and.w	r3, r3, #31
24056c58:	fa01 f303 	lsl.w	r3, r1, r3
24056c5c:	431a      	orrs	r2, r3
24056c5e:	697b      	ldr	r3, [r7, #20]
24056c60:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
24056c62:	bf00      	nop
24056c64:	371c      	adds	r7, #28
24056c66:	46bd      	mov	sp, r7
24056c68:	f85d 7b04 	ldr.w	r7, [sp], #4
24056c6c:	4770      	bx	lr

24056c6e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
24056c6e:	b480      	push	{r7}
24056c70:	b083      	sub	sp, #12
24056c72:	af00      	add	r7, sp, #0
24056c74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
24056c76:	687b      	ldr	r3, [r7, #4]
24056c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
24056c7a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
24056c7e:	2b00      	cmp	r3, #0
24056c80:	d101      	bne.n	24056c86 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
24056c82:	2301      	movs	r3, #1
24056c84:	e000      	b.n	24056c88 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
24056c86:	2300      	movs	r3, #0
}
24056c88:	4618      	mov	r0, r3
24056c8a:	370c      	adds	r7, #12
24056c8c:	46bd      	mov	sp, r7
24056c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
24056c92:	4770      	bx	lr

24056c94 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
24056c94:	b480      	push	{r7}
24056c96:	b087      	sub	sp, #28
24056c98:	af00      	add	r7, sp, #0
24056c9a:	60f8      	str	r0, [r7, #12]
24056c9c:	60b9      	str	r1, [r7, #8]
24056c9e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
24056ca0:	68fb      	ldr	r3, [r7, #12]
24056ca2:	3314      	adds	r3, #20
24056ca4:	461a      	mov	r2, r3
24056ca6:	68bb      	ldr	r3, [r7, #8]
24056ca8:	0e5b      	lsrs	r3, r3, #25
24056caa:	009b      	lsls	r3, r3, #2
24056cac:	f003 0304 	and.w	r3, r3, #4
24056cb0:	4413      	add	r3, r2
24056cb2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
24056cb4:	697b      	ldr	r3, [r7, #20]
24056cb6:	681a      	ldr	r2, [r3, #0]
24056cb8:	68bb      	ldr	r3, [r7, #8]
24056cba:	0d1b      	lsrs	r3, r3, #20
24056cbc:	f003 031f 	and.w	r3, r3, #31
24056cc0:	2107      	movs	r1, #7
24056cc2:	fa01 f303 	lsl.w	r3, r1, r3
24056cc6:	43db      	mvns	r3, r3
24056cc8:	401a      	ands	r2, r3
24056cca:	68bb      	ldr	r3, [r7, #8]
24056ccc:	0d1b      	lsrs	r3, r3, #20
24056cce:	f003 031f 	and.w	r3, r3, #31
24056cd2:	6879      	ldr	r1, [r7, #4]
24056cd4:	fa01 f303 	lsl.w	r3, r1, r3
24056cd8:	431a      	orrs	r2, r3
24056cda:	697b      	ldr	r3, [r7, #20]
24056cdc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
24056cde:	bf00      	nop
24056ce0:	371c      	adds	r7, #28
24056ce2:	46bd      	mov	sp, r7
24056ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
24056ce8:	4770      	bx	lr
	...

24056cec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
24056cec:	b480      	push	{r7}
24056cee:	b085      	sub	sp, #20
24056cf0:	af00      	add	r7, sp, #0
24056cf2:	60f8      	str	r0, [r7, #12]
24056cf4:	60b9      	str	r1, [r7, #8]
24056cf6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
24056cf8:	68fb      	ldr	r3, [r7, #12]
24056cfa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
24056cfe:	68bb      	ldr	r3, [r7, #8]
24056d00:	f3c3 0313 	ubfx	r3, r3, #0, #20
24056d04:	43db      	mvns	r3, r3
24056d06:	401a      	ands	r2, r3
24056d08:	687b      	ldr	r3, [r7, #4]
24056d0a:	f003 0318 	and.w	r3, r3, #24
24056d0e:	4908      	ldr	r1, [pc, #32]	@ (24056d30 <LL_ADC_SetChannelSingleDiff+0x44>)
24056d10:	40d9      	lsrs	r1, r3
24056d12:	68bb      	ldr	r3, [r7, #8]
24056d14:	400b      	ands	r3, r1
24056d16:	f3c3 0313 	ubfx	r3, r3, #0, #20
24056d1a:	431a      	orrs	r2, r3
24056d1c:	68fb      	ldr	r3, [r7, #12]
24056d1e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
24056d22:	bf00      	nop
24056d24:	3714      	adds	r7, #20
24056d26:	46bd      	mov	sp, r7
24056d28:	f85d 7b04 	ldr.w	r7, [sp], #4
24056d2c:	4770      	bx	lr
24056d2e:	bf00      	nop
24056d30:	000fffff 	.word	0x000fffff

24056d34 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
24056d34:	b480      	push	{r7}
24056d36:	b083      	sub	sp, #12
24056d38:	af00      	add	r7, sp, #0
24056d3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
24056d3c:	687b      	ldr	r3, [r7, #4]
24056d3e:	689b      	ldr	r3, [r3, #8]
24056d40:	f003 031f 	and.w	r3, r3, #31
}
24056d44:	4618      	mov	r0, r3
24056d46:	370c      	adds	r7, #12
24056d48:	46bd      	mov	sp, r7
24056d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
24056d4e:	4770      	bx	lr

24056d50 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
24056d50:	b480      	push	{r7}
24056d52:	b083      	sub	sp, #12
24056d54:	af00      	add	r7, sp, #0
24056d56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
24056d58:	687b      	ldr	r3, [r7, #4]
24056d5a:	689b      	ldr	r3, [r3, #8]
24056d5c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
24056d60:	4618      	mov	r0, r3
24056d62:	370c      	adds	r7, #12
24056d64:	46bd      	mov	sp, r7
24056d66:	f85d 7b04 	ldr.w	r7, [sp], #4
24056d6a:	4770      	bx	lr

24056d6c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
24056d6c:	b480      	push	{r7}
24056d6e:	b083      	sub	sp, #12
24056d70:	af00      	add	r7, sp, #0
24056d72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
24056d74:	687b      	ldr	r3, [r7, #4]
24056d76:	689a      	ldr	r2, [r3, #8]
24056d78:	4b04      	ldr	r3, [pc, #16]	@ (24056d8c <LL_ADC_DisableDeepPowerDown+0x20>)
24056d7a:	4013      	ands	r3, r2
24056d7c:	687a      	ldr	r2, [r7, #4]
24056d7e:	6093      	str	r3, [r2, #8]
}
24056d80:	bf00      	nop
24056d82:	370c      	adds	r7, #12
24056d84:	46bd      	mov	sp, r7
24056d86:	f85d 7b04 	ldr.w	r7, [sp], #4
24056d8a:	4770      	bx	lr
24056d8c:	5fffffc0 	.word	0x5fffffc0

24056d90 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
24056d90:	b480      	push	{r7}
24056d92:	b083      	sub	sp, #12
24056d94:	af00      	add	r7, sp, #0
24056d96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
24056d98:	687b      	ldr	r3, [r7, #4]
24056d9a:	689b      	ldr	r3, [r3, #8]
24056d9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
24056da0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
24056da4:	d101      	bne.n	24056daa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
24056da6:	2301      	movs	r3, #1
24056da8:	e000      	b.n	24056dac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
24056daa:	2300      	movs	r3, #0
}
24056dac:	4618      	mov	r0, r3
24056dae:	370c      	adds	r7, #12
24056db0:	46bd      	mov	sp, r7
24056db2:	f85d 7b04 	ldr.w	r7, [sp], #4
24056db6:	4770      	bx	lr

24056db8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
24056db8:	b480      	push	{r7}
24056dba:	b083      	sub	sp, #12
24056dbc:	af00      	add	r7, sp, #0
24056dbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
24056dc0:	687b      	ldr	r3, [r7, #4]
24056dc2:	689a      	ldr	r2, [r3, #8]
24056dc4:	4b05      	ldr	r3, [pc, #20]	@ (24056ddc <LL_ADC_EnableInternalRegulator+0x24>)
24056dc6:	4013      	ands	r3, r2
24056dc8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
24056dcc:	687b      	ldr	r3, [r7, #4]
24056dce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
24056dd0:	bf00      	nop
24056dd2:	370c      	adds	r7, #12
24056dd4:	46bd      	mov	sp, r7
24056dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
24056dda:	4770      	bx	lr
24056ddc:	6fffffc0 	.word	0x6fffffc0

24056de0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
24056de0:	b480      	push	{r7}
24056de2:	b083      	sub	sp, #12
24056de4:	af00      	add	r7, sp, #0
24056de6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
24056de8:	687b      	ldr	r3, [r7, #4]
24056dea:	689b      	ldr	r3, [r3, #8]
24056dec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
24056df0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
24056df4:	d101      	bne.n	24056dfa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
24056df6:	2301      	movs	r3, #1
24056df8:	e000      	b.n	24056dfc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
24056dfa:	2300      	movs	r3, #0
}
24056dfc:	4618      	mov	r0, r3
24056dfe:	370c      	adds	r7, #12
24056e00:	46bd      	mov	sp, r7
24056e02:	f85d 7b04 	ldr.w	r7, [sp], #4
24056e06:	4770      	bx	lr

24056e08 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
24056e08:	b480      	push	{r7}
24056e0a:	b083      	sub	sp, #12
24056e0c:	af00      	add	r7, sp, #0
24056e0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
24056e10:	687b      	ldr	r3, [r7, #4]
24056e12:	689a      	ldr	r2, [r3, #8]
24056e14:	4b05      	ldr	r3, [pc, #20]	@ (24056e2c <LL_ADC_Enable+0x24>)
24056e16:	4013      	ands	r3, r2
24056e18:	f043 0201 	orr.w	r2, r3, #1
24056e1c:	687b      	ldr	r3, [r7, #4]
24056e1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
24056e20:	bf00      	nop
24056e22:	370c      	adds	r7, #12
24056e24:	46bd      	mov	sp, r7
24056e26:	f85d 7b04 	ldr.w	r7, [sp], #4
24056e2a:	4770      	bx	lr
24056e2c:	7fffffc0 	.word	0x7fffffc0

24056e30 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
24056e30:	b480      	push	{r7}
24056e32:	b083      	sub	sp, #12
24056e34:	af00      	add	r7, sp, #0
24056e36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
24056e38:	687b      	ldr	r3, [r7, #4]
24056e3a:	689a      	ldr	r2, [r3, #8]
24056e3c:	4b05      	ldr	r3, [pc, #20]	@ (24056e54 <LL_ADC_Disable+0x24>)
24056e3e:	4013      	ands	r3, r2
24056e40:	f043 0202 	orr.w	r2, r3, #2
24056e44:	687b      	ldr	r3, [r7, #4]
24056e46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
24056e48:	bf00      	nop
24056e4a:	370c      	adds	r7, #12
24056e4c:	46bd      	mov	sp, r7
24056e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
24056e52:	4770      	bx	lr
24056e54:	7fffffc0 	.word	0x7fffffc0

24056e58 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
24056e58:	b480      	push	{r7}
24056e5a:	b083      	sub	sp, #12
24056e5c:	af00      	add	r7, sp, #0
24056e5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
24056e60:	687b      	ldr	r3, [r7, #4]
24056e62:	689b      	ldr	r3, [r3, #8]
24056e64:	f003 0301 	and.w	r3, r3, #1
24056e68:	2b01      	cmp	r3, #1
24056e6a:	d101      	bne.n	24056e70 <LL_ADC_IsEnabled+0x18>
24056e6c:	2301      	movs	r3, #1
24056e6e:	e000      	b.n	24056e72 <LL_ADC_IsEnabled+0x1a>
24056e70:	2300      	movs	r3, #0
}
24056e72:	4618      	mov	r0, r3
24056e74:	370c      	adds	r7, #12
24056e76:	46bd      	mov	sp, r7
24056e78:	f85d 7b04 	ldr.w	r7, [sp], #4
24056e7c:	4770      	bx	lr

24056e7e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
24056e7e:	b480      	push	{r7}
24056e80:	b083      	sub	sp, #12
24056e82:	af00      	add	r7, sp, #0
24056e84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
24056e86:	687b      	ldr	r3, [r7, #4]
24056e88:	689b      	ldr	r3, [r3, #8]
24056e8a:	f003 0302 	and.w	r3, r3, #2
24056e8e:	2b02      	cmp	r3, #2
24056e90:	d101      	bne.n	24056e96 <LL_ADC_IsDisableOngoing+0x18>
24056e92:	2301      	movs	r3, #1
24056e94:	e000      	b.n	24056e98 <LL_ADC_IsDisableOngoing+0x1a>
24056e96:	2300      	movs	r3, #0
}
24056e98:	4618      	mov	r0, r3
24056e9a:	370c      	adds	r7, #12
24056e9c:	46bd      	mov	sp, r7
24056e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
24056ea2:	4770      	bx	lr

24056ea4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
24056ea4:	b480      	push	{r7}
24056ea6:	b083      	sub	sp, #12
24056ea8:	af00      	add	r7, sp, #0
24056eaa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
24056eac:	687b      	ldr	r3, [r7, #4]
24056eae:	689a      	ldr	r2, [r3, #8]
24056eb0:	4b05      	ldr	r3, [pc, #20]	@ (24056ec8 <LL_ADC_REG_StartConversion+0x24>)
24056eb2:	4013      	ands	r3, r2
24056eb4:	f043 0204 	orr.w	r2, r3, #4
24056eb8:	687b      	ldr	r3, [r7, #4]
24056eba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
24056ebc:	bf00      	nop
24056ebe:	370c      	adds	r7, #12
24056ec0:	46bd      	mov	sp, r7
24056ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
24056ec6:	4770      	bx	lr
24056ec8:	7fffffc0 	.word	0x7fffffc0

24056ecc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
24056ecc:	b480      	push	{r7}
24056ece:	b083      	sub	sp, #12
24056ed0:	af00      	add	r7, sp, #0
24056ed2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
24056ed4:	687b      	ldr	r3, [r7, #4]
24056ed6:	689a      	ldr	r2, [r3, #8]
24056ed8:	4b05      	ldr	r3, [pc, #20]	@ (24056ef0 <LL_ADC_REG_StopConversion+0x24>)
24056eda:	4013      	ands	r3, r2
24056edc:	f043 0210 	orr.w	r2, r3, #16
24056ee0:	687b      	ldr	r3, [r7, #4]
24056ee2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
24056ee4:	bf00      	nop
24056ee6:	370c      	adds	r7, #12
24056ee8:	46bd      	mov	sp, r7
24056eea:	f85d 7b04 	ldr.w	r7, [sp], #4
24056eee:	4770      	bx	lr
24056ef0:	7fffffc0 	.word	0x7fffffc0

24056ef4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
24056ef4:	b480      	push	{r7}
24056ef6:	b083      	sub	sp, #12
24056ef8:	af00      	add	r7, sp, #0
24056efa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
24056efc:	687b      	ldr	r3, [r7, #4]
24056efe:	689b      	ldr	r3, [r3, #8]
24056f00:	f003 0304 	and.w	r3, r3, #4
24056f04:	2b04      	cmp	r3, #4
24056f06:	d101      	bne.n	24056f0c <LL_ADC_REG_IsConversionOngoing+0x18>
24056f08:	2301      	movs	r3, #1
24056f0a:	e000      	b.n	24056f0e <LL_ADC_REG_IsConversionOngoing+0x1a>
24056f0c:	2300      	movs	r3, #0
}
24056f0e:	4618      	mov	r0, r3
24056f10:	370c      	adds	r7, #12
24056f12:	46bd      	mov	sp, r7
24056f14:	f85d 7b04 	ldr.w	r7, [sp], #4
24056f18:	4770      	bx	lr
	...

24056f1c <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
24056f1c:	b480      	push	{r7}
24056f1e:	b083      	sub	sp, #12
24056f20:	af00      	add	r7, sp, #0
24056f22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
24056f24:	687b      	ldr	r3, [r7, #4]
24056f26:	689a      	ldr	r2, [r3, #8]
24056f28:	4b05      	ldr	r3, [pc, #20]	@ (24056f40 <LL_ADC_INJ_StopConversion+0x24>)
24056f2a:	4013      	ands	r3, r2
24056f2c:	f043 0220 	orr.w	r2, r3, #32
24056f30:	687b      	ldr	r3, [r7, #4]
24056f32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
24056f34:	bf00      	nop
24056f36:	370c      	adds	r7, #12
24056f38:	46bd      	mov	sp, r7
24056f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
24056f3e:	4770      	bx	lr
24056f40:	7fffffc0 	.word	0x7fffffc0

24056f44 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
24056f44:	b480      	push	{r7}
24056f46:	b083      	sub	sp, #12
24056f48:	af00      	add	r7, sp, #0
24056f4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
24056f4c:	687b      	ldr	r3, [r7, #4]
24056f4e:	689b      	ldr	r3, [r3, #8]
24056f50:	f003 0308 	and.w	r3, r3, #8
24056f54:	2b08      	cmp	r3, #8
24056f56:	d101      	bne.n	24056f5c <LL_ADC_INJ_IsConversionOngoing+0x18>
24056f58:	2301      	movs	r3, #1
24056f5a:	e000      	b.n	24056f5e <LL_ADC_INJ_IsConversionOngoing+0x1a>
24056f5c:	2300      	movs	r3, #0
}
24056f5e:	4618      	mov	r0, r3
24056f60:	370c      	adds	r7, #12
24056f62:	46bd      	mov	sp, r7
24056f64:	f85d 7b04 	ldr.w	r7, [sp], #4
24056f68:	4770      	bx	lr
	...

24056f6c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
24056f6c:	b590      	push	{r4, r7, lr}
24056f6e:	b089      	sub	sp, #36	@ 0x24
24056f70:	af00      	add	r7, sp, #0
24056f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
24056f74:	2300      	movs	r3, #0
24056f76:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
24056f78:	2300      	movs	r3, #0
24056f7a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
24056f7c:	687b      	ldr	r3, [r7, #4]
24056f7e:	2b00      	cmp	r3, #0
24056f80:	d101      	bne.n	24056f86 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
24056f82:	2301      	movs	r3, #1
24056f84:	e138      	b.n	240571f8 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
24056f86:	687b      	ldr	r3, [r7, #4]
24056f88:	68db      	ldr	r3, [r3, #12]
24056f8a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
24056f8c:	687b      	ldr	r3, [r7, #4]
24056f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24056f90:	2b00      	cmp	r3, #0
24056f92:	d109      	bne.n	24056fa8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
24056f94:	6878      	ldr	r0, [r7, #4]
24056f96:	f7fe fe2f 	bl	24055bf8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
24056f9a:	687b      	ldr	r3, [r7, #4]
24056f9c:	2200      	movs	r2, #0
24056f9e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
24056fa0:	687b      	ldr	r3, [r7, #4]
24056fa2:	2200      	movs	r2, #0
24056fa4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
24056fa8:	687b      	ldr	r3, [r7, #4]
24056faa:	681b      	ldr	r3, [r3, #0]
24056fac:	4618      	mov	r0, r3
24056fae:	f7ff feef 	bl	24056d90 <LL_ADC_IsDeepPowerDownEnabled>
24056fb2:	4603      	mov	r3, r0
24056fb4:	2b00      	cmp	r3, #0
24056fb6:	d004      	beq.n	24056fc2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
24056fb8:	687b      	ldr	r3, [r7, #4]
24056fba:	681b      	ldr	r3, [r3, #0]
24056fbc:	4618      	mov	r0, r3
24056fbe:	f7ff fed5 	bl	24056d6c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
24056fc2:	687b      	ldr	r3, [r7, #4]
24056fc4:	681b      	ldr	r3, [r3, #0]
24056fc6:	4618      	mov	r0, r3
24056fc8:	f7ff ff0a 	bl	24056de0 <LL_ADC_IsInternalRegulatorEnabled>
24056fcc:	4603      	mov	r3, r0
24056fce:	2b00      	cmp	r3, #0
24056fd0:	d114      	bne.n	24056ffc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
24056fd2:	687b      	ldr	r3, [r7, #4]
24056fd4:	681b      	ldr	r3, [r3, #0]
24056fd6:	4618      	mov	r0, r3
24056fd8:	f7ff feee 	bl	24056db8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
24056fdc:	4b88      	ldr	r3, [pc, #544]	@ (24057200 <HAL_ADC_Init+0x294>)
24056fde:	681b      	ldr	r3, [r3, #0]
24056fe0:	099b      	lsrs	r3, r3, #6
24056fe2:	4a88      	ldr	r2, [pc, #544]	@ (24057204 <HAL_ADC_Init+0x298>)
24056fe4:	fba2 2303 	umull	r2, r3, r2, r3
24056fe8:	099b      	lsrs	r3, r3, #6
24056fea:	3301      	adds	r3, #1
24056fec:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
24056fee:	e002      	b.n	24056ff6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
24056ff0:	68bb      	ldr	r3, [r7, #8]
24056ff2:	3b01      	subs	r3, #1
24056ff4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
24056ff6:	68bb      	ldr	r3, [r7, #8]
24056ff8:	2b00      	cmp	r3, #0
24056ffa:	d1f9      	bne.n	24056ff0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
24056ffc:	687b      	ldr	r3, [r7, #4]
24056ffe:	681b      	ldr	r3, [r3, #0]
24057000:	4618      	mov	r0, r3
24057002:	f7ff feed 	bl	24056de0 <LL_ADC_IsInternalRegulatorEnabled>
24057006:	4603      	mov	r3, r0
24057008:	2b00      	cmp	r3, #0
2405700a:	d10d      	bne.n	24057028 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
2405700c:	687b      	ldr	r3, [r7, #4]
2405700e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24057010:	f043 0210 	orr.w	r2, r3, #16
24057014:	687b      	ldr	r3, [r7, #4]
24057016:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
24057018:	687b      	ldr	r3, [r7, #4]
2405701a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
2405701c:	f043 0201 	orr.w	r2, r3, #1
24057020:	687b      	ldr	r3, [r7, #4]
24057022:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
24057024:	2301      	movs	r3, #1
24057026:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
24057028:	687b      	ldr	r3, [r7, #4]
2405702a:	681b      	ldr	r3, [r3, #0]
2405702c:	4618      	mov	r0, r3
2405702e:	f7ff ff61 	bl	24056ef4 <LL_ADC_REG_IsConversionOngoing>
24057032:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
24057034:	687b      	ldr	r3, [r7, #4]
24057036:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24057038:	f003 0310 	and.w	r3, r3, #16
2405703c:	2b00      	cmp	r3, #0
2405703e:	f040 80d2 	bne.w	240571e6 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
24057042:	697b      	ldr	r3, [r7, #20]
24057044:	2b00      	cmp	r3, #0
24057046:	f040 80ce 	bne.w	240571e6 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
2405704a:	687b      	ldr	r3, [r7, #4]
2405704c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
2405704e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
24057052:	f043 0202 	orr.w	r2, r3, #2
24057056:	687b      	ldr	r3, [r7, #4]
24057058:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
2405705a:	687b      	ldr	r3, [r7, #4]
2405705c:	681b      	ldr	r3, [r3, #0]
2405705e:	4618      	mov	r0, r3
24057060:	f7ff fefa 	bl	24056e58 <LL_ADC_IsEnabled>
24057064:	4603      	mov	r3, r0
24057066:	2b00      	cmp	r3, #0
24057068:	d110      	bne.n	2405708c <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
2405706a:	4867      	ldr	r0, [pc, #412]	@ (24057208 <HAL_ADC_Init+0x29c>)
2405706c:	f7ff fef4 	bl	24056e58 <LL_ADC_IsEnabled>
24057070:	4604      	mov	r4, r0
24057072:	4866      	ldr	r0, [pc, #408]	@ (2405720c <HAL_ADC_Init+0x2a0>)
24057074:	f7ff fef0 	bl	24056e58 <LL_ADC_IsEnabled>
24057078:	4603      	mov	r3, r0
2405707a:	4323      	orrs	r3, r4
2405707c:	2b00      	cmp	r3, #0
2405707e:	d105      	bne.n	2405708c <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
24057080:	687b      	ldr	r3, [r7, #4]
24057082:	685b      	ldr	r3, [r3, #4]
24057084:	4619      	mov	r1, r3
24057086:	4862      	ldr	r0, [pc, #392]	@ (24057210 <HAL_ADC_Init+0x2a4>)
24057088:	f7ff fd2a 	bl	24056ae0 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
2405708c:	687b      	ldr	r3, [r7, #4]
2405708e:	7d5b      	ldrb	r3, [r3, #21]
24057090:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
24057092:	687b      	ldr	r3, [r7, #4]
24057094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
24057096:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
24057098:	687b      	ldr	r3, [r7, #4]
2405709a:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
2405709c:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
2405709e:	687b      	ldr	r3, [r7, #4]
240570a0:	7f1b      	ldrb	r3, [r3, #28]
240570a2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
240570a4:	4313      	orrs	r3, r2
240570a6:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
240570a8:	687b      	ldr	r3, [r7, #4]
240570aa:	7f1b      	ldrb	r3, [r3, #28]
240570ac:	2b01      	cmp	r3, #1
240570ae:	d106      	bne.n	240570be <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
240570b0:	687b      	ldr	r3, [r7, #4]
240570b2:	6a1b      	ldr	r3, [r3, #32]
240570b4:	3b01      	subs	r3, #1
240570b6:	045b      	lsls	r3, r3, #17
240570b8:	69ba      	ldr	r2, [r7, #24]
240570ba:	4313      	orrs	r3, r2
240570bc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
240570be:	687b      	ldr	r3, [r7, #4]
240570c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
240570c2:	2b00      	cmp	r3, #0
240570c4:	d009      	beq.n	240570da <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
240570c6:	687b      	ldr	r3, [r7, #4]
240570c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
240570ca:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
240570ce:	687b      	ldr	r3, [r7, #4]
240570d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
240570d2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
240570d4:	69ba      	ldr	r2, [r7, #24]
240570d6:	4313      	orrs	r3, r2
240570d8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
240570da:	687b      	ldr	r3, [r7, #4]
240570dc:	681b      	ldr	r3, [r3, #0]
240570de:	68da      	ldr	r2, [r3, #12]
240570e0:	4b4c      	ldr	r3, [pc, #304]	@ (24057214 <HAL_ADC_Init+0x2a8>)
240570e2:	4013      	ands	r3, r2
240570e4:	687a      	ldr	r2, [r7, #4]
240570e6:	6812      	ldr	r2, [r2, #0]
240570e8:	69b9      	ldr	r1, [r7, #24]
240570ea:	430b      	orrs	r3, r1
240570ec:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
240570ee:	687b      	ldr	r3, [r7, #4]
240570f0:	681b      	ldr	r3, [r3, #0]
240570f2:	4618      	mov	r0, r3
240570f4:	f7ff fefe 	bl	24056ef4 <LL_ADC_REG_IsConversionOngoing>
240570f8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
240570fa:	687b      	ldr	r3, [r7, #4]
240570fc:	681b      	ldr	r3, [r3, #0]
240570fe:	4618      	mov	r0, r3
24057100:	f7ff ff20 	bl	24056f44 <LL_ADC_INJ_IsConversionOngoing>
24057104:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
24057106:	693b      	ldr	r3, [r7, #16]
24057108:	2b00      	cmp	r3, #0
2405710a:	d14a      	bne.n	240571a2 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
2405710c:	68fb      	ldr	r3, [r7, #12]
2405710e:	2b00      	cmp	r3, #0
24057110:	d147      	bne.n	240571a2 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
24057112:	687b      	ldr	r3, [r7, #4]
24057114:	7d1b      	ldrb	r3, [r3, #20]
24057116:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
24057118:	687b      	ldr	r3, [r7, #4]
2405711a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
2405711c:	4313      	orrs	r3, r2
2405711e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
24057120:	687b      	ldr	r3, [r7, #4]
24057122:	681b      	ldr	r3, [r3, #0]
24057124:	68da      	ldr	r2, [r3, #12]
24057126:	4b3c      	ldr	r3, [pc, #240]	@ (24057218 <HAL_ADC_Init+0x2ac>)
24057128:	4013      	ands	r3, r2
2405712a:	687a      	ldr	r2, [r7, #4]
2405712c:	6812      	ldr	r2, [r2, #0]
2405712e:	69b9      	ldr	r1, [r7, #24]
24057130:	430b      	orrs	r3, r1
24057132:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
24057134:	687b      	ldr	r3, [r7, #4]
24057136:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
2405713a:	2b01      	cmp	r3, #1
2405713c:	d11b      	bne.n	24057176 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
2405713e:	687b      	ldr	r3, [r7, #4]
24057140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
24057142:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
24057144:	687b      	ldr	r3, [r7, #4]
24057146:	681b      	ldr	r3, [r3, #0]
24057148:	691a      	ldr	r2, [r3, #16]
2405714a:	4b34      	ldr	r3, [pc, #208]	@ (2405721c <HAL_ADC_Init+0x2b0>)
2405714c:	4013      	ands	r3, r2
2405714e:	687a      	ldr	r2, [r7, #4]
24057150:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
24057152:	3a01      	subs	r2, #1
24057154:	0411      	lsls	r1, r2, #16
24057156:	687a      	ldr	r2, [r7, #4]
24057158:	6c12      	ldr	r2, [r2, #64]	@ 0x40
2405715a:	4311      	orrs	r1, r2
2405715c:	687a      	ldr	r2, [r7, #4]
2405715e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
24057160:	4311      	orrs	r1, r2
24057162:	687a      	ldr	r2, [r7, #4]
24057164:	6c92      	ldr	r2, [r2, #72]	@ 0x48
24057166:	430a      	orrs	r2, r1
24057168:	431a      	orrs	r2, r3
2405716a:	687b      	ldr	r3, [r7, #4]
2405716c:	681b      	ldr	r3, [r3, #0]
2405716e:	f042 0201 	orr.w	r2, r2, #1
24057172:	611a      	str	r2, [r3, #16]
24057174:	e007      	b.n	24057186 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
24057176:	687b      	ldr	r3, [r7, #4]
24057178:	681b      	ldr	r3, [r3, #0]
2405717a:	691a      	ldr	r2, [r3, #16]
2405717c:	687b      	ldr	r3, [r7, #4]
2405717e:	681b      	ldr	r3, [r3, #0]
24057180:	f022 0201 	bic.w	r2, r2, #1
24057184:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
24057186:	687b      	ldr	r3, [r7, #4]
24057188:	681b      	ldr	r3, [r3, #0]
2405718a:	691b      	ldr	r3, [r3, #16]
2405718c:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
24057190:	687b      	ldr	r3, [r7, #4]
24057192:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
24057194:	687b      	ldr	r3, [r7, #4]
24057196:	681b      	ldr	r3, [r3, #0]
24057198:	430a      	orrs	r2, r1
2405719a:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
2405719c:	6878      	ldr	r0, [r7, #4]
2405719e:	f001 f9f9 	bl	24058594 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
240571a2:	687b      	ldr	r3, [r7, #4]
240571a4:	68db      	ldr	r3, [r3, #12]
240571a6:	2b01      	cmp	r3, #1
240571a8:	d10c      	bne.n	240571c4 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
240571aa:	687b      	ldr	r3, [r7, #4]
240571ac:	681b      	ldr	r3, [r3, #0]
240571ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
240571b0:	f023 010f 	bic.w	r1, r3, #15
240571b4:	687b      	ldr	r3, [r7, #4]
240571b6:	699b      	ldr	r3, [r3, #24]
240571b8:	1e5a      	subs	r2, r3, #1
240571ba:	687b      	ldr	r3, [r7, #4]
240571bc:	681b      	ldr	r3, [r3, #0]
240571be:	430a      	orrs	r2, r1
240571c0:	631a      	str	r2, [r3, #48]	@ 0x30
240571c2:	e007      	b.n	240571d4 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
240571c4:	687b      	ldr	r3, [r7, #4]
240571c6:	681b      	ldr	r3, [r3, #0]
240571c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
240571ca:	687b      	ldr	r3, [r7, #4]
240571cc:	681b      	ldr	r3, [r3, #0]
240571ce:	f022 020f 	bic.w	r2, r2, #15
240571d2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
240571d4:	687b      	ldr	r3, [r7, #4]
240571d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
240571d8:	f023 0303 	bic.w	r3, r3, #3
240571dc:	f043 0201 	orr.w	r2, r3, #1
240571e0:	687b      	ldr	r3, [r7, #4]
240571e2:	655a      	str	r2, [r3, #84]	@ 0x54
240571e4:	e007      	b.n	240571f6 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
240571e6:	687b      	ldr	r3, [r7, #4]
240571e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
240571ea:	f043 0210 	orr.w	r2, r3, #16
240571ee:	687b      	ldr	r3, [r7, #4]
240571f0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
240571f2:	2301      	movs	r3, #1
240571f4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
240571f6:	7ffb      	ldrb	r3, [r7, #31]
}
240571f8:	4618      	mov	r0, r3
240571fa:	3724      	adds	r7, #36	@ 0x24
240571fc:	46bd      	mov	sp, r7
240571fe:	bd90      	pop	{r4, r7, pc}
24057200:	200000e0 	.word	0x200000e0
24057204:	053e2d63 	.word	0x053e2d63
24057208:	40022000 	.word	0x40022000
2405720c:	40022100 	.word	0x40022100
24057210:	40022300 	.word	0x40022300
24057214:	fff0c003 	.word	0xfff0c003
24057218:	ffffbffc 	.word	0xffffbffc
2405721c:	fc00f81e 	.word	0xfc00f81e

24057220 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
24057220:	b580      	push	{r7, lr}
24057222:	b086      	sub	sp, #24
24057224:	af00      	add	r7, sp, #0
24057226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
24057228:	4856      	ldr	r0, [pc, #344]	@ (24057384 <HAL_ADC_Start+0x164>)
2405722a:	f7ff fd83 	bl	24056d34 <LL_ADC_GetMultimode>
2405722e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
24057230:	687b      	ldr	r3, [r7, #4]
24057232:	681b      	ldr	r3, [r3, #0]
24057234:	4618      	mov	r0, r3
24057236:	f7ff fe5d 	bl	24056ef4 <LL_ADC_REG_IsConversionOngoing>
2405723a:	4603      	mov	r3, r0
2405723c:	2b00      	cmp	r3, #0
2405723e:	f040 809a 	bne.w	24057376 <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
24057242:	687b      	ldr	r3, [r7, #4]
24057244:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
24057248:	2b01      	cmp	r3, #1
2405724a:	d101      	bne.n	24057250 <HAL_ADC_Start+0x30>
2405724c:	2302      	movs	r3, #2
2405724e:	e095      	b.n	2405737c <HAL_ADC_Start+0x15c>
24057250:	687b      	ldr	r3, [r7, #4]
24057252:	2201      	movs	r2, #1
24057254:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
24057258:	6878      	ldr	r0, [r7, #4]
2405725a:	f001 f8bf 	bl	240583dc <ADC_Enable>
2405725e:	4603      	mov	r3, r0
24057260:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
24057262:	7dfb      	ldrb	r3, [r7, #23]
24057264:	2b00      	cmp	r3, #0
24057266:	f040 8081 	bne.w	2405736c <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
2405726a:	687b      	ldr	r3, [r7, #4]
2405726c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
2405726e:	4b46      	ldr	r3, [pc, #280]	@ (24057388 <HAL_ADC_Start+0x168>)
24057270:	4013      	ands	r3, r2
24057272:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
24057276:	687b      	ldr	r3, [r7, #4]
24057278:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
2405727a:	687b      	ldr	r3, [r7, #4]
2405727c:	681b      	ldr	r3, [r3, #0]
2405727e:	4a43      	ldr	r2, [pc, #268]	@ (2405738c <HAL_ADC_Start+0x16c>)
24057280:	4293      	cmp	r3, r2
24057282:	d002      	beq.n	2405728a <HAL_ADC_Start+0x6a>
24057284:	687b      	ldr	r3, [r7, #4]
24057286:	681b      	ldr	r3, [r3, #0]
24057288:	e000      	b.n	2405728c <HAL_ADC_Start+0x6c>
2405728a:	4b41      	ldr	r3, [pc, #260]	@ (24057390 <HAL_ADC_Start+0x170>)
2405728c:	687a      	ldr	r2, [r7, #4]
2405728e:	6812      	ldr	r2, [r2, #0]
24057290:	4293      	cmp	r3, r2
24057292:	d002      	beq.n	2405729a <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
24057294:	693b      	ldr	r3, [r7, #16]
24057296:	2b00      	cmp	r3, #0
24057298:	d105      	bne.n	240572a6 <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
2405729a:	687b      	ldr	r3, [r7, #4]
2405729c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
2405729e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
240572a2:	687b      	ldr	r3, [r7, #4]
240572a4:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
240572a6:	687b      	ldr	r3, [r7, #4]
240572a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
240572aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
240572ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
240572b2:	d106      	bne.n	240572c2 <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
240572b4:	687b      	ldr	r3, [r7, #4]
240572b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
240572b8:	f023 0206 	bic.w	r2, r3, #6
240572bc:	687b      	ldr	r3, [r7, #4]
240572be:	659a      	str	r2, [r3, #88]	@ 0x58
240572c0:	e002      	b.n	240572c8 <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
240572c2:	687b      	ldr	r3, [r7, #4]
240572c4:	2200      	movs	r2, #0
240572c6:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
240572c8:	687b      	ldr	r3, [r7, #4]
240572ca:	681b      	ldr	r3, [r3, #0]
240572cc:	221c      	movs	r2, #28
240572ce:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
240572d0:	687b      	ldr	r3, [r7, #4]
240572d2:	2200      	movs	r2, #0
240572d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
240572d8:	687b      	ldr	r3, [r7, #4]
240572da:	681b      	ldr	r3, [r3, #0]
240572dc:	4a2b      	ldr	r2, [pc, #172]	@ (2405738c <HAL_ADC_Start+0x16c>)
240572de:	4293      	cmp	r3, r2
240572e0:	d002      	beq.n	240572e8 <HAL_ADC_Start+0xc8>
240572e2:	687b      	ldr	r3, [r7, #4]
240572e4:	681b      	ldr	r3, [r3, #0]
240572e6:	e000      	b.n	240572ea <HAL_ADC_Start+0xca>
240572e8:	4b29      	ldr	r3, [pc, #164]	@ (24057390 <HAL_ADC_Start+0x170>)
240572ea:	687a      	ldr	r2, [r7, #4]
240572ec:	6812      	ldr	r2, [r2, #0]
240572ee:	4293      	cmp	r3, r2
240572f0:	d008      	beq.n	24057304 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
240572f2:	693b      	ldr	r3, [r7, #16]
240572f4:	2b00      	cmp	r3, #0
240572f6:	d005      	beq.n	24057304 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
240572f8:	693b      	ldr	r3, [r7, #16]
240572fa:	2b05      	cmp	r3, #5
240572fc:	d002      	beq.n	24057304 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
240572fe:	693b      	ldr	r3, [r7, #16]
24057300:	2b09      	cmp	r3, #9
24057302:	d114      	bne.n	2405732e <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
24057304:	687b      	ldr	r3, [r7, #4]
24057306:	681b      	ldr	r3, [r3, #0]
24057308:	68db      	ldr	r3, [r3, #12]
2405730a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
2405730e:	2b00      	cmp	r3, #0
24057310:	d007      	beq.n	24057322 <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
24057312:	687b      	ldr	r3, [r7, #4]
24057314:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24057316:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
2405731a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
2405731e:	687b      	ldr	r3, [r7, #4]
24057320:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
24057322:	687b      	ldr	r3, [r7, #4]
24057324:	681b      	ldr	r3, [r3, #0]
24057326:	4618      	mov	r0, r3
24057328:	f7ff fdbc 	bl	24056ea4 <LL_ADC_REG_StartConversion>
2405732c:	e025      	b.n	2405737a <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
2405732e:	687b      	ldr	r3, [r7, #4]
24057330:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24057332:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
24057336:	687b      	ldr	r3, [r7, #4]
24057338:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
2405733a:	687b      	ldr	r3, [r7, #4]
2405733c:	681b      	ldr	r3, [r3, #0]
2405733e:	4a13      	ldr	r2, [pc, #76]	@ (2405738c <HAL_ADC_Start+0x16c>)
24057340:	4293      	cmp	r3, r2
24057342:	d002      	beq.n	2405734a <HAL_ADC_Start+0x12a>
24057344:	687b      	ldr	r3, [r7, #4]
24057346:	681b      	ldr	r3, [r3, #0]
24057348:	e000      	b.n	2405734c <HAL_ADC_Start+0x12c>
2405734a:	4b11      	ldr	r3, [pc, #68]	@ (24057390 <HAL_ADC_Start+0x170>)
2405734c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
2405734e:	68fb      	ldr	r3, [r7, #12]
24057350:	68db      	ldr	r3, [r3, #12]
24057352:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
24057356:	2b00      	cmp	r3, #0
24057358:	d00f      	beq.n	2405737a <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
2405735a:	687b      	ldr	r3, [r7, #4]
2405735c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
2405735e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
24057362:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
24057366:	687b      	ldr	r3, [r7, #4]
24057368:	655a      	str	r2, [r3, #84]	@ 0x54
2405736a:	e006      	b.n	2405737a <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
2405736c:	687b      	ldr	r3, [r7, #4]
2405736e:	2200      	movs	r2, #0
24057370:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
24057374:	e001      	b.n	2405737a <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
24057376:	2302      	movs	r3, #2
24057378:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
2405737a:	7dfb      	ldrb	r3, [r7, #23]
}
2405737c:	4618      	mov	r0, r3
2405737e:	3718      	adds	r7, #24
24057380:	46bd      	mov	sp, r7
24057382:	bd80      	pop	{r7, pc}
24057384:	40022300 	.word	0x40022300
24057388:	fffff0fe 	.word	0xfffff0fe
2405738c:	40022100 	.word	0x40022100
24057390:	40022000 	.word	0x40022000

24057394 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
24057394:	b580      	push	{r7, lr}
24057396:	b088      	sub	sp, #32
24057398:	af00      	add	r7, sp, #0
2405739a:	6078      	str	r0, [r7, #4]
2405739c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
2405739e:	4866      	ldr	r0, [pc, #408]	@ (24057538 <HAL_ADC_PollForConversion+0x1a4>)
240573a0:	f7ff fcc8 	bl	24056d34 <LL_ADC_GetMultimode>
240573a4:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
240573a6:	687b      	ldr	r3, [r7, #4]
240573a8:	691b      	ldr	r3, [r3, #16]
240573aa:	2b08      	cmp	r3, #8
240573ac:	d102      	bne.n	240573b4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
240573ae:	2308      	movs	r3, #8
240573b0:	61fb      	str	r3, [r7, #28]
240573b2:	e02a      	b.n	2405740a <HAL_ADC_PollForConversion+0x76>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
240573b4:	697b      	ldr	r3, [r7, #20]
240573b6:	2b00      	cmp	r3, #0
240573b8:	d005      	beq.n	240573c6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
240573ba:	697b      	ldr	r3, [r7, #20]
240573bc:	2b05      	cmp	r3, #5
240573be:	d002      	beq.n	240573c6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
240573c0:	697b      	ldr	r3, [r7, #20]
240573c2:	2b09      	cmp	r3, #9
240573c4:	d111      	bne.n	240573ea <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
240573c6:	687b      	ldr	r3, [r7, #4]
240573c8:	681b      	ldr	r3, [r3, #0]
240573ca:	68db      	ldr	r3, [r3, #12]
240573cc:	f003 0301 	and.w	r3, r3, #1
240573d0:	2b00      	cmp	r3, #0
240573d2:	d007      	beq.n	240573e4 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
240573d4:	687b      	ldr	r3, [r7, #4]
240573d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
240573d8:	f043 0220 	orr.w	r2, r3, #32
240573dc:	687b      	ldr	r3, [r7, #4]
240573de:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
240573e0:	2301      	movs	r3, #1
240573e2:	e0a4      	b.n	2405752e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
240573e4:	2304      	movs	r3, #4
240573e6:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
240573e8:	e00f      	b.n	2405740a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
240573ea:	4853      	ldr	r0, [pc, #332]	@ (24057538 <HAL_ADC_PollForConversion+0x1a4>)
240573ec:	f7ff fcb0 	bl	24056d50 <LL_ADC_GetMultiDMATransfer>
240573f0:	4603      	mov	r3, r0
240573f2:	2b00      	cmp	r3, #0
240573f4:	d007      	beq.n	24057406 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
240573f6:	687b      	ldr	r3, [r7, #4]
240573f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
240573fa:	f043 0220 	orr.w	r2, r3, #32
240573fe:	687b      	ldr	r3, [r7, #4]
24057400:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
24057402:	2301      	movs	r3, #1
24057404:	e093      	b.n	2405752e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
24057406:	2304      	movs	r3, #4
24057408:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
2405740a:	f7ff fb39 	bl	24056a80 <HAL_GetTick>
2405740e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
24057410:	e021      	b.n	24057456 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
24057412:	683b      	ldr	r3, [r7, #0]
24057414:	f1b3 3fff 	cmp.w	r3, #4294967295
24057418:	d01d      	beq.n	24057456 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
2405741a:	f7ff fb31 	bl	24056a80 <HAL_GetTick>
2405741e:	4602      	mov	r2, r0
24057420:	693b      	ldr	r3, [r7, #16]
24057422:	1ad3      	subs	r3, r2, r3
24057424:	683a      	ldr	r2, [r7, #0]
24057426:	429a      	cmp	r2, r3
24057428:	d302      	bcc.n	24057430 <HAL_ADC_PollForConversion+0x9c>
2405742a:	683b      	ldr	r3, [r7, #0]
2405742c:	2b00      	cmp	r3, #0
2405742e:	d112      	bne.n	24057456 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
24057430:	687b      	ldr	r3, [r7, #4]
24057432:	681b      	ldr	r3, [r3, #0]
24057434:	681a      	ldr	r2, [r3, #0]
24057436:	69fb      	ldr	r3, [r7, #28]
24057438:	4013      	ands	r3, r2
2405743a:	2b00      	cmp	r3, #0
2405743c:	d10b      	bne.n	24057456 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
2405743e:	687b      	ldr	r3, [r7, #4]
24057440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24057442:	f043 0204 	orr.w	r2, r3, #4
24057446:	687b      	ldr	r3, [r7, #4]
24057448:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
2405744a:	687b      	ldr	r3, [r7, #4]
2405744c:	2200      	movs	r2, #0
2405744e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
24057452:	2303      	movs	r3, #3
24057454:	e06b      	b.n	2405752e <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
24057456:	687b      	ldr	r3, [r7, #4]
24057458:	681b      	ldr	r3, [r3, #0]
2405745a:	681a      	ldr	r2, [r3, #0]
2405745c:	69fb      	ldr	r3, [r7, #28]
2405745e:	4013      	ands	r3, r2
24057460:	2b00      	cmp	r3, #0
24057462:	d0d6      	beq.n	24057412 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
24057464:	687b      	ldr	r3, [r7, #4]
24057466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24057468:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
2405746c:	687b      	ldr	r3, [r7, #4]
2405746e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
24057470:	687b      	ldr	r3, [r7, #4]
24057472:	681b      	ldr	r3, [r3, #0]
24057474:	4618      	mov	r0, r3
24057476:	f7ff fbbb 	bl	24056bf0 <LL_ADC_REG_IsTriggerSourceSWStart>
2405747a:	4603      	mov	r3, r0
2405747c:	2b00      	cmp	r3, #0
2405747e:	d01c      	beq.n	240574ba <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
24057480:	687b      	ldr	r3, [r7, #4]
24057482:	7d5b      	ldrb	r3, [r3, #21]
24057484:	2b00      	cmp	r3, #0
24057486:	d118      	bne.n	240574ba <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
24057488:	687b      	ldr	r3, [r7, #4]
2405748a:	681b      	ldr	r3, [r3, #0]
2405748c:	681b      	ldr	r3, [r3, #0]
2405748e:	f003 0308 	and.w	r3, r3, #8
24057492:	2b08      	cmp	r3, #8
24057494:	d111      	bne.n	240574ba <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
24057496:	687b      	ldr	r3, [r7, #4]
24057498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
2405749a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
2405749e:	687b      	ldr	r3, [r7, #4]
240574a0:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
240574a2:	687b      	ldr	r3, [r7, #4]
240574a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
240574a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
240574aa:	2b00      	cmp	r3, #0
240574ac:	d105      	bne.n	240574ba <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
240574ae:	687b      	ldr	r3, [r7, #4]
240574b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
240574b2:	f043 0201 	orr.w	r2, r3, #1
240574b6:	687b      	ldr	r3, [r7, #4]
240574b8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
240574ba:	687b      	ldr	r3, [r7, #4]
240574bc:	681b      	ldr	r3, [r3, #0]
240574be:	4a1f      	ldr	r2, [pc, #124]	@ (2405753c <HAL_ADC_PollForConversion+0x1a8>)
240574c0:	4293      	cmp	r3, r2
240574c2:	d002      	beq.n	240574ca <HAL_ADC_PollForConversion+0x136>
240574c4:	687b      	ldr	r3, [r7, #4]
240574c6:	681b      	ldr	r3, [r3, #0]
240574c8:	e000      	b.n	240574cc <HAL_ADC_PollForConversion+0x138>
240574ca:	4b1d      	ldr	r3, [pc, #116]	@ (24057540 <HAL_ADC_PollForConversion+0x1ac>)
240574cc:	687a      	ldr	r2, [r7, #4]
240574ce:	6812      	ldr	r2, [r2, #0]
240574d0:	4293      	cmp	r3, r2
240574d2:	d008      	beq.n	240574e6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
240574d4:	697b      	ldr	r3, [r7, #20]
240574d6:	2b00      	cmp	r3, #0
240574d8:	d005      	beq.n	240574e6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
240574da:	697b      	ldr	r3, [r7, #20]
240574dc:	2b05      	cmp	r3, #5
240574de:	d002      	beq.n	240574e6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
240574e0:	697b      	ldr	r3, [r7, #20]
240574e2:	2b09      	cmp	r3, #9
240574e4:	d104      	bne.n	240574f0 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
240574e6:	687b      	ldr	r3, [r7, #4]
240574e8:	681b      	ldr	r3, [r3, #0]
240574ea:	68db      	ldr	r3, [r3, #12]
240574ec:	61bb      	str	r3, [r7, #24]
240574ee:	e00c      	b.n	2405750a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
240574f0:	687b      	ldr	r3, [r7, #4]
240574f2:	681b      	ldr	r3, [r3, #0]
240574f4:	4a11      	ldr	r2, [pc, #68]	@ (2405753c <HAL_ADC_PollForConversion+0x1a8>)
240574f6:	4293      	cmp	r3, r2
240574f8:	d002      	beq.n	24057500 <HAL_ADC_PollForConversion+0x16c>
240574fa:	687b      	ldr	r3, [r7, #4]
240574fc:	681b      	ldr	r3, [r3, #0]
240574fe:	e000      	b.n	24057502 <HAL_ADC_PollForConversion+0x16e>
24057500:	4b0f      	ldr	r3, [pc, #60]	@ (24057540 <HAL_ADC_PollForConversion+0x1ac>)
24057502:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
24057504:	68fb      	ldr	r3, [r7, #12]
24057506:	68db      	ldr	r3, [r3, #12]
24057508:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
2405750a:	69fb      	ldr	r3, [r7, #28]
2405750c:	2b08      	cmp	r3, #8
2405750e:	d104      	bne.n	2405751a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
24057510:	687b      	ldr	r3, [r7, #4]
24057512:	681b      	ldr	r3, [r3, #0]
24057514:	2208      	movs	r2, #8
24057516:	601a      	str	r2, [r3, #0]
24057518:	e008      	b.n	2405752c <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
2405751a:	69bb      	ldr	r3, [r7, #24]
2405751c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
24057520:	2b00      	cmp	r3, #0
24057522:	d103      	bne.n	2405752c <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
24057524:	687b      	ldr	r3, [r7, #4]
24057526:	681b      	ldr	r3, [r3, #0]
24057528:	220c      	movs	r2, #12
2405752a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
2405752c:	2300      	movs	r3, #0
}
2405752e:	4618      	mov	r0, r3
24057530:	3720      	adds	r7, #32
24057532:	46bd      	mov	sp, r7
24057534:	bd80      	pop	{r7, pc}
24057536:	bf00      	nop
24057538:	40022300 	.word	0x40022300
2405753c:	40022100 	.word	0x40022100
24057540:	40022000 	.word	0x40022000

24057544 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
24057544:	b580      	push	{r7, lr}
24057546:	b086      	sub	sp, #24
24057548:	af00      	add	r7, sp, #0
2405754a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
2405754c:	4890      	ldr	r0, [pc, #576]	@ (24057790 <HAL_ADC_Start_IT+0x24c>)
2405754e:	f7ff fbf1 	bl	24056d34 <LL_ADC_GetMultimode>
24057552:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
24057554:	687b      	ldr	r3, [r7, #4]
24057556:	681b      	ldr	r3, [r3, #0]
24057558:	4618      	mov	r0, r3
2405755a:	f7ff fccb 	bl	24056ef4 <LL_ADC_REG_IsConversionOngoing>
2405755e:	4603      	mov	r3, r0
24057560:	2b00      	cmp	r3, #0
24057562:	f040 810e 	bne.w	24057782 <HAL_ADC_Start_IT+0x23e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
24057566:	687b      	ldr	r3, [r7, #4]
24057568:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
2405756c:	2b01      	cmp	r3, #1
2405756e:	d101      	bne.n	24057574 <HAL_ADC_Start_IT+0x30>
24057570:	2302      	movs	r3, #2
24057572:	e109      	b.n	24057788 <HAL_ADC_Start_IT+0x244>
24057574:	687b      	ldr	r3, [r7, #4]
24057576:	2201      	movs	r2, #1
24057578:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
2405757c:	6878      	ldr	r0, [r7, #4]
2405757e:	f000 ff2d 	bl	240583dc <ADC_Enable>
24057582:	4603      	mov	r3, r0
24057584:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
24057586:	7dfb      	ldrb	r3, [r7, #23]
24057588:	2b00      	cmp	r3, #0
2405758a:	f040 80f5 	bne.w	24057778 <HAL_ADC_Start_IT+0x234>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
2405758e:	687b      	ldr	r3, [r7, #4]
24057590:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
24057592:	4b80      	ldr	r3, [pc, #512]	@ (24057794 <HAL_ADC_Start_IT+0x250>)
24057594:	4013      	ands	r3, r2
24057596:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
2405759a:	687b      	ldr	r3, [r7, #4]
2405759c:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
2405759e:	687b      	ldr	r3, [r7, #4]
240575a0:	681b      	ldr	r3, [r3, #0]
240575a2:	4a7d      	ldr	r2, [pc, #500]	@ (24057798 <HAL_ADC_Start_IT+0x254>)
240575a4:	4293      	cmp	r3, r2
240575a6:	d002      	beq.n	240575ae <HAL_ADC_Start_IT+0x6a>
240575a8:	687b      	ldr	r3, [r7, #4]
240575aa:	681b      	ldr	r3, [r3, #0]
240575ac:	e000      	b.n	240575b0 <HAL_ADC_Start_IT+0x6c>
240575ae:	4b7b      	ldr	r3, [pc, #492]	@ (2405779c <HAL_ADC_Start_IT+0x258>)
240575b0:	687a      	ldr	r2, [r7, #4]
240575b2:	6812      	ldr	r2, [r2, #0]
240575b4:	4293      	cmp	r3, r2
240575b6:	d002      	beq.n	240575be <HAL_ADC_Start_IT+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
240575b8:	693b      	ldr	r3, [r7, #16]
240575ba:	2b00      	cmp	r3, #0
240575bc:	d105      	bne.n	240575ca <HAL_ADC_Start_IT+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
240575be:	687b      	ldr	r3, [r7, #4]
240575c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
240575c2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
240575c6:	687b      	ldr	r3, [r7, #4]
240575c8:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
240575ca:	687b      	ldr	r3, [r7, #4]
240575cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
240575ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
240575d2:	2b00      	cmp	r3, #0
240575d4:	d006      	beq.n	240575e4 <HAL_ADC_Start_IT+0xa0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
240575d6:	687b      	ldr	r3, [r7, #4]
240575d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
240575da:	f023 0206 	bic.w	r2, r3, #6
240575de:	687b      	ldr	r3, [r7, #4]
240575e0:	659a      	str	r2, [r3, #88]	@ 0x58
240575e2:	e002      	b.n	240575ea <HAL_ADC_Start_IT+0xa6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
240575e4:	687b      	ldr	r3, [r7, #4]
240575e6:	2200      	movs	r2, #0
240575e8:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
240575ea:	687b      	ldr	r3, [r7, #4]
240575ec:	681b      	ldr	r3, [r3, #0]
240575ee:	221c      	movs	r2, #28
240575f0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
240575f2:	687b      	ldr	r3, [r7, #4]
240575f4:	2200      	movs	r2, #0
240575f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
240575fa:	687b      	ldr	r3, [r7, #4]
240575fc:	681b      	ldr	r3, [r3, #0]
240575fe:	685a      	ldr	r2, [r3, #4]
24057600:	687b      	ldr	r3, [r7, #4]
24057602:	681b      	ldr	r3, [r3, #0]
24057604:	f022 021c 	bic.w	r2, r2, #28
24057608:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
2405760a:	687b      	ldr	r3, [r7, #4]
2405760c:	691b      	ldr	r3, [r3, #16]
2405760e:	2b08      	cmp	r3, #8
24057610:	d108      	bne.n	24057624 <HAL_ADC_Start_IT+0xe0>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
24057612:	687b      	ldr	r3, [r7, #4]
24057614:	681b      	ldr	r3, [r3, #0]
24057616:	685a      	ldr	r2, [r3, #4]
24057618:	687b      	ldr	r3, [r7, #4]
2405761a:	681b      	ldr	r3, [r3, #0]
2405761c:	f042 0208 	orr.w	r2, r2, #8
24057620:	605a      	str	r2, [r3, #4]
          break;
24057622:	e008      	b.n	24057636 <HAL_ADC_Start_IT+0xf2>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
24057624:	687b      	ldr	r3, [r7, #4]
24057626:	681b      	ldr	r3, [r3, #0]
24057628:	685a      	ldr	r2, [r3, #4]
2405762a:	687b      	ldr	r3, [r7, #4]
2405762c:	681b      	ldr	r3, [r3, #0]
2405762e:	f042 0204 	orr.w	r2, r2, #4
24057632:	605a      	str	r2, [r3, #4]
          break;
24057634:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
24057636:	687b      	ldr	r3, [r7, #4]
24057638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2405763a:	2b00      	cmp	r3, #0
2405763c:	d107      	bne.n	2405764e <HAL_ADC_Start_IT+0x10a>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
2405763e:	687b      	ldr	r3, [r7, #4]
24057640:	681b      	ldr	r3, [r3, #0]
24057642:	685a      	ldr	r2, [r3, #4]
24057644:	687b      	ldr	r3, [r7, #4]
24057646:	681b      	ldr	r3, [r3, #0]
24057648:	f042 0210 	orr.w	r2, r2, #16
2405764c:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
2405764e:	687b      	ldr	r3, [r7, #4]
24057650:	681b      	ldr	r3, [r3, #0]
24057652:	4a51      	ldr	r2, [pc, #324]	@ (24057798 <HAL_ADC_Start_IT+0x254>)
24057654:	4293      	cmp	r3, r2
24057656:	d002      	beq.n	2405765e <HAL_ADC_Start_IT+0x11a>
24057658:	687b      	ldr	r3, [r7, #4]
2405765a:	681b      	ldr	r3, [r3, #0]
2405765c:	e000      	b.n	24057660 <HAL_ADC_Start_IT+0x11c>
2405765e:	4b4f      	ldr	r3, [pc, #316]	@ (2405779c <HAL_ADC_Start_IT+0x258>)
24057660:	687a      	ldr	r2, [r7, #4]
24057662:	6812      	ldr	r2, [r2, #0]
24057664:	4293      	cmp	r3, r2
24057666:	d008      	beq.n	2405767a <HAL_ADC_Start_IT+0x136>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
24057668:	693b      	ldr	r3, [r7, #16]
2405766a:	2b00      	cmp	r3, #0
2405766c:	d005      	beq.n	2405767a <HAL_ADC_Start_IT+0x136>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
2405766e:	693b      	ldr	r3, [r7, #16]
24057670:	2b05      	cmp	r3, #5
24057672:	d002      	beq.n	2405767a <HAL_ADC_Start_IT+0x136>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
24057674:	693b      	ldr	r3, [r7, #16]
24057676:	2b09      	cmp	r3, #9
24057678:	d13a      	bne.n	240576f0 <HAL_ADC_Start_IT+0x1ac>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
2405767a:	687b      	ldr	r3, [r7, #4]
2405767c:	681b      	ldr	r3, [r3, #0]
2405767e:	68db      	ldr	r3, [r3, #12]
24057680:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
24057684:	2b00      	cmp	r3, #0
24057686:	d02d      	beq.n	240576e4 <HAL_ADC_Start_IT+0x1a0>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
24057688:	687b      	ldr	r3, [r7, #4]
2405768a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
2405768c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
24057690:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
24057694:	687b      	ldr	r3, [r7, #4]
24057696:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
24057698:	687b      	ldr	r3, [r7, #4]
2405769a:	691b      	ldr	r3, [r3, #16]
2405769c:	2b08      	cmp	r3, #8
2405769e:	d110      	bne.n	240576c2 <HAL_ADC_Start_IT+0x17e>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
240576a0:	687b      	ldr	r3, [r7, #4]
240576a2:	681b      	ldr	r3, [r3, #0]
240576a4:	685a      	ldr	r2, [r3, #4]
240576a6:	687b      	ldr	r3, [r7, #4]
240576a8:	681b      	ldr	r3, [r3, #0]
240576aa:	f022 0220 	bic.w	r2, r2, #32
240576ae:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
240576b0:	687b      	ldr	r3, [r7, #4]
240576b2:	681b      	ldr	r3, [r3, #0]
240576b4:	685a      	ldr	r2, [r3, #4]
240576b6:	687b      	ldr	r3, [r7, #4]
240576b8:	681b      	ldr	r3, [r3, #0]
240576ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
240576be:	605a      	str	r2, [r3, #4]
              break;
240576c0:	e010      	b.n	240576e4 <HAL_ADC_Start_IT+0x1a0>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
240576c2:	687b      	ldr	r3, [r7, #4]
240576c4:	681b      	ldr	r3, [r3, #0]
240576c6:	685a      	ldr	r2, [r3, #4]
240576c8:	687b      	ldr	r3, [r7, #4]
240576ca:	681b      	ldr	r3, [r3, #0]
240576cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
240576d0:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
240576d2:	687b      	ldr	r3, [r7, #4]
240576d4:	681b      	ldr	r3, [r3, #0]
240576d6:	685a      	ldr	r2, [r3, #4]
240576d8:	687b      	ldr	r3, [r7, #4]
240576da:	681b      	ldr	r3, [r3, #0]
240576dc:	f042 0220 	orr.w	r2, r2, #32
240576e0:	605a      	str	r2, [r3, #4]
              break;
240576e2:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
240576e4:	687b      	ldr	r3, [r7, #4]
240576e6:	681b      	ldr	r3, [r3, #0]
240576e8:	4618      	mov	r0, r3
240576ea:	f7ff fbdb 	bl	24056ea4 <LL_ADC_REG_StartConversion>
240576ee:	e04a      	b.n	24057786 <HAL_ADC_Start_IT+0x242>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
240576f0:	687b      	ldr	r3, [r7, #4]
240576f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
240576f4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
240576f8:	687b      	ldr	r3, [r7, #4]
240576fa:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
240576fc:	687b      	ldr	r3, [r7, #4]
240576fe:	681b      	ldr	r3, [r3, #0]
24057700:	4a25      	ldr	r2, [pc, #148]	@ (24057798 <HAL_ADC_Start_IT+0x254>)
24057702:	4293      	cmp	r3, r2
24057704:	d002      	beq.n	2405770c <HAL_ADC_Start_IT+0x1c8>
24057706:	687b      	ldr	r3, [r7, #4]
24057708:	681b      	ldr	r3, [r3, #0]
2405770a:	e000      	b.n	2405770e <HAL_ADC_Start_IT+0x1ca>
2405770c:	4b23      	ldr	r3, [pc, #140]	@ (2405779c <HAL_ADC_Start_IT+0x258>)
2405770e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
24057710:	68fb      	ldr	r3, [r7, #12]
24057712:	68db      	ldr	r3, [r3, #12]
24057714:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
24057718:	2b00      	cmp	r3, #0
2405771a:	d034      	beq.n	24057786 <HAL_ADC_Start_IT+0x242>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
2405771c:	687b      	ldr	r3, [r7, #4]
2405771e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24057720:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
24057724:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
24057728:	687b      	ldr	r3, [r7, #4]
2405772a:	655a      	str	r2, [r3, #84]	@ 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
2405772c:	687b      	ldr	r3, [r7, #4]
2405772e:	691b      	ldr	r3, [r3, #16]
24057730:	2b08      	cmp	r3, #8
24057732:	d110      	bne.n	24057756 <HAL_ADC_Start_IT+0x212>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
24057734:	687b      	ldr	r3, [r7, #4]
24057736:	681b      	ldr	r3, [r3, #0]
24057738:	685a      	ldr	r2, [r3, #4]
2405773a:	687b      	ldr	r3, [r7, #4]
2405773c:	681b      	ldr	r3, [r3, #0]
2405773e:	f022 0220 	bic.w	r2, r2, #32
24057742:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
24057744:	687b      	ldr	r3, [r7, #4]
24057746:	681b      	ldr	r3, [r3, #0]
24057748:	685a      	ldr	r2, [r3, #4]
2405774a:	687b      	ldr	r3, [r7, #4]
2405774c:	681b      	ldr	r3, [r3, #0]
2405774e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
24057752:	605a      	str	r2, [r3, #4]
              break;
24057754:	e017      	b.n	24057786 <HAL_ADC_Start_IT+0x242>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
24057756:	687b      	ldr	r3, [r7, #4]
24057758:	681b      	ldr	r3, [r3, #0]
2405775a:	685a      	ldr	r2, [r3, #4]
2405775c:	687b      	ldr	r3, [r7, #4]
2405775e:	681b      	ldr	r3, [r3, #0]
24057760:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
24057764:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
24057766:	687b      	ldr	r3, [r7, #4]
24057768:	681b      	ldr	r3, [r3, #0]
2405776a:	685a      	ldr	r2, [r3, #4]
2405776c:	687b      	ldr	r3, [r7, #4]
2405776e:	681b      	ldr	r3, [r3, #0]
24057770:	f042 0220 	orr.w	r2, r2, #32
24057774:	605a      	str	r2, [r3, #4]
              break;
24057776:	e006      	b.n	24057786 <HAL_ADC_Start_IT+0x242>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
24057778:	687b      	ldr	r3, [r7, #4]
2405777a:	2200      	movs	r2, #0
2405777c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
24057780:	e001      	b.n	24057786 <HAL_ADC_Start_IT+0x242>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
24057782:	2302      	movs	r3, #2
24057784:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
24057786:	7dfb      	ldrb	r3, [r7, #23]
}
24057788:	4618      	mov	r0, r3
2405778a:	3718      	adds	r7, #24
2405778c:	46bd      	mov	sp, r7
2405778e:	bd80      	pop	{r7, pc}
24057790:	40022300 	.word	0x40022300
24057794:	fffff0fe 	.word	0xfffff0fe
24057798:	40022100 	.word	0x40022100
2405779c:	40022000 	.word	0x40022000

240577a0 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
240577a0:	b580      	push	{r7, lr}
240577a2:	b084      	sub	sp, #16
240577a4:	af00      	add	r7, sp, #0
240577a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
240577a8:	687b      	ldr	r3, [r7, #4]
240577aa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
240577ae:	2b01      	cmp	r3, #1
240577b0:	d101      	bne.n	240577b6 <HAL_ADC_Stop_IT+0x16>
240577b2:	2302      	movs	r3, #2
240577b4:	e029      	b.n	2405780a <HAL_ADC_Stop_IT+0x6a>
240577b6:	687b      	ldr	r3, [r7, #4]
240577b8:	2201      	movs	r2, #1
240577ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
240577be:	2103      	movs	r1, #3
240577c0:	6878      	ldr	r0, [r7, #4]
240577c2:	f000 fd4f 	bl	24058264 <ADC_ConversionStop>
240577c6:	4603      	mov	r3, r0
240577c8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
240577ca:	7bfb      	ldrb	r3, [r7, #15]
240577cc:	2b00      	cmp	r3, #0
240577ce:	d117      	bne.n	24057800 <HAL_ADC_Stop_IT+0x60>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
240577d0:	687b      	ldr	r3, [r7, #4]
240577d2:	681b      	ldr	r3, [r3, #0]
240577d4:	685a      	ldr	r2, [r3, #4]
240577d6:	687b      	ldr	r3, [r7, #4]
240577d8:	681b      	ldr	r3, [r3, #0]
240577da:	f022 021c 	bic.w	r2, r2, #28
240577de:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
240577e0:	6878      	ldr	r0, [r7, #4]
240577e2:	f000 fe77 	bl	240584d4 <ADC_Disable>
240577e6:	4603      	mov	r3, r0
240577e8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
240577ea:	7bfb      	ldrb	r3, [r7, #15]
240577ec:	2b00      	cmp	r3, #0
240577ee:	d107      	bne.n	24057800 <HAL_ADC_Stop_IT+0x60>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
240577f0:	687b      	ldr	r3, [r7, #4]
240577f2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
240577f4:	4b07      	ldr	r3, [pc, #28]	@ (24057814 <HAL_ADC_Stop_IT+0x74>)
240577f6:	4013      	ands	r3, r2
240577f8:	f043 0201 	orr.w	r2, r3, #1
240577fc:	687b      	ldr	r3, [r7, #4]
240577fe:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
24057800:	687b      	ldr	r3, [r7, #4]
24057802:	2200      	movs	r2, #0
24057804:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
24057808:	7bfb      	ldrb	r3, [r7, #15]
}
2405780a:	4618      	mov	r0, r3
2405780c:	3710      	adds	r7, #16
2405780e:	46bd      	mov	sp, r7
24057810:	bd80      	pop	{r7, pc}
24057812:	bf00      	nop
24057814:	ffffeefe 	.word	0xffffeefe

24057818 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
24057818:	b480      	push	{r7}
2405781a:	b083      	sub	sp, #12
2405781c:	af00      	add	r7, sp, #0
2405781e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
24057820:	687b      	ldr	r3, [r7, #4]
24057822:	681b      	ldr	r3, [r3, #0]
24057824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
24057826:	4618      	mov	r0, r3
24057828:	370c      	adds	r7, #12
2405782a:	46bd      	mov	sp, r7
2405782c:	f85d 7b04 	ldr.w	r7, [sp], #4
24057830:	4770      	bx	lr
	...

24057834 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
24057834:	b580      	push	{r7, lr}
24057836:	b08a      	sub	sp, #40	@ 0x28
24057838:	af00      	add	r7, sp, #0
2405783a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
2405783c:	2300      	movs	r3, #0
2405783e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
24057840:	687b      	ldr	r3, [r7, #4]
24057842:	681b      	ldr	r3, [r3, #0]
24057844:	681b      	ldr	r3, [r3, #0]
24057846:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
24057848:	687b      	ldr	r3, [r7, #4]
2405784a:	681b      	ldr	r3, [r3, #0]
2405784c:	685b      	ldr	r3, [r3, #4]
2405784e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
24057850:	4882      	ldr	r0, [pc, #520]	@ (24057a5c <HAL_ADC_IRQHandler+0x228>)
24057852:	f7ff fa6f 	bl	24056d34 <LL_ADC_GetMultimode>
24057856:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
24057858:	69fb      	ldr	r3, [r7, #28]
2405785a:	f003 0302 	and.w	r3, r3, #2
2405785e:	2b00      	cmp	r3, #0
24057860:	d017      	beq.n	24057892 <HAL_ADC_IRQHandler+0x5e>
24057862:	69bb      	ldr	r3, [r7, #24]
24057864:	f003 0302 	and.w	r3, r3, #2
24057868:	2b00      	cmp	r3, #0
2405786a:	d012      	beq.n	24057892 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
2405786c:	687b      	ldr	r3, [r7, #4]
2405786e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24057870:	f003 0310 	and.w	r3, r3, #16
24057874:	2b00      	cmp	r3, #0
24057876:	d105      	bne.n	24057884 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
24057878:	687b      	ldr	r3, [r7, #4]
2405787a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
2405787c:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
24057880:	687b      	ldr	r3, [r7, #4]
24057882:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
24057884:	6878      	ldr	r0, [r7, #4]
24057886:	f000 ffa1 	bl	240587cc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
2405788a:	687b      	ldr	r3, [r7, #4]
2405788c:	681b      	ldr	r3, [r3, #0]
2405788e:	2202      	movs	r2, #2
24057890:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
24057892:	69fb      	ldr	r3, [r7, #28]
24057894:	f003 0304 	and.w	r3, r3, #4
24057898:	2b00      	cmp	r3, #0
2405789a:	d004      	beq.n	240578a6 <HAL_ADC_IRQHandler+0x72>
2405789c:	69bb      	ldr	r3, [r7, #24]
2405789e:	f003 0304 	and.w	r3, r3, #4
240578a2:	2b00      	cmp	r3, #0
240578a4:	d10a      	bne.n	240578bc <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
240578a6:	69fb      	ldr	r3, [r7, #28]
240578a8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
240578ac:	2b00      	cmp	r3, #0
240578ae:	f000 8083 	beq.w	240579b8 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
240578b2:	69bb      	ldr	r3, [r7, #24]
240578b4:	f003 0308 	and.w	r3, r3, #8
240578b8:	2b00      	cmp	r3, #0
240578ba:	d07d      	beq.n	240579b8 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
240578bc:	687b      	ldr	r3, [r7, #4]
240578be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
240578c0:	f003 0310 	and.w	r3, r3, #16
240578c4:	2b00      	cmp	r3, #0
240578c6:	d105      	bne.n	240578d4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
240578c8:	687b      	ldr	r3, [r7, #4]
240578ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
240578cc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
240578d0:	687b      	ldr	r3, [r7, #4]
240578d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
240578d4:	687b      	ldr	r3, [r7, #4]
240578d6:	681b      	ldr	r3, [r3, #0]
240578d8:	4618      	mov	r0, r3
240578da:	f7ff f989 	bl	24056bf0 <LL_ADC_REG_IsTriggerSourceSWStart>
240578de:	4603      	mov	r3, r0
240578e0:	2b00      	cmp	r3, #0
240578e2:	d062      	beq.n	240579aa <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
240578e4:	687b      	ldr	r3, [r7, #4]
240578e6:	681b      	ldr	r3, [r3, #0]
240578e8:	4a5d      	ldr	r2, [pc, #372]	@ (24057a60 <HAL_ADC_IRQHandler+0x22c>)
240578ea:	4293      	cmp	r3, r2
240578ec:	d002      	beq.n	240578f4 <HAL_ADC_IRQHandler+0xc0>
240578ee:	687b      	ldr	r3, [r7, #4]
240578f0:	681b      	ldr	r3, [r3, #0]
240578f2:	e000      	b.n	240578f6 <HAL_ADC_IRQHandler+0xc2>
240578f4:	4b5b      	ldr	r3, [pc, #364]	@ (24057a64 <HAL_ADC_IRQHandler+0x230>)
240578f6:	687a      	ldr	r2, [r7, #4]
240578f8:	6812      	ldr	r2, [r2, #0]
240578fa:	4293      	cmp	r3, r2
240578fc:	d008      	beq.n	24057910 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
240578fe:	697b      	ldr	r3, [r7, #20]
24057900:	2b00      	cmp	r3, #0
24057902:	d005      	beq.n	24057910 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
24057904:	697b      	ldr	r3, [r7, #20]
24057906:	2b05      	cmp	r3, #5
24057908:	d002      	beq.n	24057910 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
2405790a:	697b      	ldr	r3, [r7, #20]
2405790c:	2b09      	cmp	r3, #9
2405790e:	d104      	bne.n	2405791a <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
24057910:	687b      	ldr	r3, [r7, #4]
24057912:	681b      	ldr	r3, [r3, #0]
24057914:	68db      	ldr	r3, [r3, #12]
24057916:	623b      	str	r3, [r7, #32]
24057918:	e00c      	b.n	24057934 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
2405791a:	687b      	ldr	r3, [r7, #4]
2405791c:	681b      	ldr	r3, [r3, #0]
2405791e:	4a50      	ldr	r2, [pc, #320]	@ (24057a60 <HAL_ADC_IRQHandler+0x22c>)
24057920:	4293      	cmp	r3, r2
24057922:	d002      	beq.n	2405792a <HAL_ADC_IRQHandler+0xf6>
24057924:	687b      	ldr	r3, [r7, #4]
24057926:	681b      	ldr	r3, [r3, #0]
24057928:	e000      	b.n	2405792c <HAL_ADC_IRQHandler+0xf8>
2405792a:	4b4e      	ldr	r3, [pc, #312]	@ (24057a64 <HAL_ADC_IRQHandler+0x230>)
2405792c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
2405792e:	693b      	ldr	r3, [r7, #16]
24057930:	68db      	ldr	r3, [r3, #12]
24057932:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
24057934:	6a3b      	ldr	r3, [r7, #32]
24057936:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
2405793a:	2b00      	cmp	r3, #0
2405793c:	d135      	bne.n	240579aa <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
2405793e:	687b      	ldr	r3, [r7, #4]
24057940:	681b      	ldr	r3, [r3, #0]
24057942:	681b      	ldr	r3, [r3, #0]
24057944:	f003 0308 	and.w	r3, r3, #8
24057948:	2b08      	cmp	r3, #8
2405794a:	d12e      	bne.n	240579aa <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
2405794c:	687b      	ldr	r3, [r7, #4]
2405794e:	681b      	ldr	r3, [r3, #0]
24057950:	4618      	mov	r0, r3
24057952:	f7ff facf 	bl	24056ef4 <LL_ADC_REG_IsConversionOngoing>
24057956:	4603      	mov	r3, r0
24057958:	2b00      	cmp	r3, #0
2405795a:	d11a      	bne.n	24057992 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
2405795c:	687b      	ldr	r3, [r7, #4]
2405795e:	681b      	ldr	r3, [r3, #0]
24057960:	685a      	ldr	r2, [r3, #4]
24057962:	687b      	ldr	r3, [r7, #4]
24057964:	681b      	ldr	r3, [r3, #0]
24057966:	f022 020c 	bic.w	r2, r2, #12
2405796a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
2405796c:	687b      	ldr	r3, [r7, #4]
2405796e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24057970:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
24057974:	687b      	ldr	r3, [r7, #4]
24057976:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
24057978:	687b      	ldr	r3, [r7, #4]
2405797a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
2405797c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
24057980:	2b00      	cmp	r3, #0
24057982:	d112      	bne.n	240579aa <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
24057984:	687b      	ldr	r3, [r7, #4]
24057986:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24057988:	f043 0201 	orr.w	r2, r3, #1
2405798c:	687b      	ldr	r3, [r7, #4]
2405798e:	655a      	str	r2, [r3, #84]	@ 0x54
24057990:	e00b      	b.n	240579aa <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
24057992:	687b      	ldr	r3, [r7, #4]
24057994:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24057996:	f043 0210 	orr.w	r2, r3, #16
2405799a:	687b      	ldr	r3, [r7, #4]
2405799c:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2405799e:	687b      	ldr	r3, [r7, #4]
240579a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
240579a2:	f043 0201 	orr.w	r2, r3, #1
240579a6:	687b      	ldr	r3, [r7, #4]
240579a8:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
240579aa:	6878      	ldr	r0, [r7, #4]
240579ac:	f7fb fb74 	bl	24053098 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
240579b0:	687b      	ldr	r3, [r7, #4]
240579b2:	681b      	ldr	r3, [r3, #0]
240579b4:	220c      	movs	r2, #12
240579b6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
240579b8:	69fb      	ldr	r3, [r7, #28]
240579ba:	f003 0320 	and.w	r3, r3, #32
240579be:	2b00      	cmp	r3, #0
240579c0:	d004      	beq.n	240579cc <HAL_ADC_IRQHandler+0x198>
240579c2:	69bb      	ldr	r3, [r7, #24]
240579c4:	f003 0320 	and.w	r3, r3, #32
240579c8:	2b00      	cmp	r3, #0
240579ca:	d10b      	bne.n	240579e4 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
240579cc:	69fb      	ldr	r3, [r7, #28]
240579ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
240579d2:	2b00      	cmp	r3, #0
240579d4:	f000 809f 	beq.w	24057b16 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
240579d8:	69bb      	ldr	r3, [r7, #24]
240579da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
240579de:	2b00      	cmp	r3, #0
240579e0:	f000 8099 	beq.w	24057b16 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
240579e4:	687b      	ldr	r3, [r7, #4]
240579e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
240579e8:	f003 0310 	and.w	r3, r3, #16
240579ec:	2b00      	cmp	r3, #0
240579ee:	d105      	bne.n	240579fc <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
240579f0:	687b      	ldr	r3, [r7, #4]
240579f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
240579f4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
240579f8:	687b      	ldr	r3, [r7, #4]
240579fa:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
240579fc:	687b      	ldr	r3, [r7, #4]
240579fe:	681b      	ldr	r3, [r3, #0]
24057a00:	4618      	mov	r0, r3
24057a02:	f7ff f934 	bl	24056c6e <LL_ADC_INJ_IsTriggerSourceSWStart>
24057a06:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
24057a08:	687b      	ldr	r3, [r7, #4]
24057a0a:	681b      	ldr	r3, [r3, #0]
24057a0c:	4618      	mov	r0, r3
24057a0e:	f7ff f8ef 	bl	24056bf0 <LL_ADC_REG_IsTriggerSourceSWStart>
24057a12:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
24057a14:	687b      	ldr	r3, [r7, #4]
24057a16:	681b      	ldr	r3, [r3, #0]
24057a18:	4a11      	ldr	r2, [pc, #68]	@ (24057a60 <HAL_ADC_IRQHandler+0x22c>)
24057a1a:	4293      	cmp	r3, r2
24057a1c:	d002      	beq.n	24057a24 <HAL_ADC_IRQHandler+0x1f0>
24057a1e:	687b      	ldr	r3, [r7, #4]
24057a20:	681b      	ldr	r3, [r3, #0]
24057a22:	e000      	b.n	24057a26 <HAL_ADC_IRQHandler+0x1f2>
24057a24:	4b0f      	ldr	r3, [pc, #60]	@ (24057a64 <HAL_ADC_IRQHandler+0x230>)
24057a26:	687a      	ldr	r2, [r7, #4]
24057a28:	6812      	ldr	r2, [r2, #0]
24057a2a:	4293      	cmp	r3, r2
24057a2c:	d008      	beq.n	24057a40 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
24057a2e:	697b      	ldr	r3, [r7, #20]
24057a30:	2b00      	cmp	r3, #0
24057a32:	d005      	beq.n	24057a40 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
24057a34:	697b      	ldr	r3, [r7, #20]
24057a36:	2b06      	cmp	r3, #6
24057a38:	d002      	beq.n	24057a40 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
24057a3a:	697b      	ldr	r3, [r7, #20]
24057a3c:	2b07      	cmp	r3, #7
24057a3e:	d104      	bne.n	24057a4a <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
24057a40:	687b      	ldr	r3, [r7, #4]
24057a42:	681b      	ldr	r3, [r3, #0]
24057a44:	68db      	ldr	r3, [r3, #12]
24057a46:	623b      	str	r3, [r7, #32]
24057a48:	e013      	b.n	24057a72 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
24057a4a:	687b      	ldr	r3, [r7, #4]
24057a4c:	681b      	ldr	r3, [r3, #0]
24057a4e:	4a04      	ldr	r2, [pc, #16]	@ (24057a60 <HAL_ADC_IRQHandler+0x22c>)
24057a50:	4293      	cmp	r3, r2
24057a52:	d009      	beq.n	24057a68 <HAL_ADC_IRQHandler+0x234>
24057a54:	687b      	ldr	r3, [r7, #4]
24057a56:	681b      	ldr	r3, [r3, #0]
24057a58:	e007      	b.n	24057a6a <HAL_ADC_IRQHandler+0x236>
24057a5a:	bf00      	nop
24057a5c:	40022300 	.word	0x40022300
24057a60:	40022100 	.word	0x40022100
24057a64:	40022000 	.word	0x40022000
24057a68:	4b7d      	ldr	r3, [pc, #500]	@ (24057c60 <HAL_ADC_IRQHandler+0x42c>)
24057a6a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
24057a6c:	693b      	ldr	r3, [r7, #16]
24057a6e:	68db      	ldr	r3, [r3, #12]
24057a70:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
24057a72:	68fb      	ldr	r3, [r7, #12]
24057a74:	2b00      	cmp	r3, #0
24057a76:	d047      	beq.n	24057b08 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
24057a78:	6a3b      	ldr	r3, [r7, #32]
24057a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
24057a7e:	2b00      	cmp	r3, #0
24057a80:	d007      	beq.n	24057a92 <HAL_ADC_IRQHandler+0x25e>
24057a82:	68bb      	ldr	r3, [r7, #8]
24057a84:	2b00      	cmp	r3, #0
24057a86:	d03f      	beq.n	24057b08 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
24057a88:	6a3b      	ldr	r3, [r7, #32]
24057a8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
24057a8e:	2b00      	cmp	r3, #0
24057a90:	d13a      	bne.n	24057b08 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
24057a92:	687b      	ldr	r3, [r7, #4]
24057a94:	681b      	ldr	r3, [r3, #0]
24057a96:	681b      	ldr	r3, [r3, #0]
24057a98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
24057a9c:	2b40      	cmp	r3, #64	@ 0x40
24057a9e:	d133      	bne.n	24057b08 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
24057aa0:	6a3b      	ldr	r3, [r7, #32]
24057aa2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
24057aa6:	2b00      	cmp	r3, #0
24057aa8:	d12e      	bne.n	24057b08 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
24057aaa:	687b      	ldr	r3, [r7, #4]
24057aac:	681b      	ldr	r3, [r3, #0]
24057aae:	4618      	mov	r0, r3
24057ab0:	f7ff fa48 	bl	24056f44 <LL_ADC_INJ_IsConversionOngoing>
24057ab4:	4603      	mov	r3, r0
24057ab6:	2b00      	cmp	r3, #0
24057ab8:	d11a      	bne.n	24057af0 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
24057aba:	687b      	ldr	r3, [r7, #4]
24057abc:	681b      	ldr	r3, [r3, #0]
24057abe:	685a      	ldr	r2, [r3, #4]
24057ac0:	687b      	ldr	r3, [r7, #4]
24057ac2:	681b      	ldr	r3, [r3, #0]
24057ac4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
24057ac8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
24057aca:	687b      	ldr	r3, [r7, #4]
24057acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24057ace:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
24057ad2:	687b      	ldr	r3, [r7, #4]
24057ad4:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
24057ad6:	687b      	ldr	r3, [r7, #4]
24057ad8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24057ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
24057ade:	2b00      	cmp	r3, #0
24057ae0:	d112      	bne.n	24057b08 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
24057ae2:	687b      	ldr	r3, [r7, #4]
24057ae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24057ae6:	f043 0201 	orr.w	r2, r3, #1
24057aea:	687b      	ldr	r3, [r7, #4]
24057aec:	655a      	str	r2, [r3, #84]	@ 0x54
24057aee:	e00b      	b.n	24057b08 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
24057af0:	687b      	ldr	r3, [r7, #4]
24057af2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24057af4:	f043 0210 	orr.w	r2, r3, #16
24057af8:	687b      	ldr	r3, [r7, #4]
24057afa:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
24057afc:	687b      	ldr	r3, [r7, #4]
24057afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
24057b00:	f043 0201 	orr.w	r2, r3, #1
24057b04:	687b      	ldr	r3, [r7, #4]
24057b06:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
24057b08:	6878      	ldr	r0, [r7, #4]
24057b0a:	f000 fe37 	bl	2405877c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
24057b0e:	687b      	ldr	r3, [r7, #4]
24057b10:	681b      	ldr	r3, [r3, #0]
24057b12:	2260      	movs	r2, #96	@ 0x60
24057b14:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
24057b16:	69fb      	ldr	r3, [r7, #28]
24057b18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
24057b1c:	2b00      	cmp	r3, #0
24057b1e:	d011      	beq.n	24057b44 <HAL_ADC_IRQHandler+0x310>
24057b20:	69bb      	ldr	r3, [r7, #24]
24057b22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
24057b26:	2b00      	cmp	r3, #0
24057b28:	d00c      	beq.n	24057b44 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
24057b2a:	687b      	ldr	r3, [r7, #4]
24057b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24057b2e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
24057b32:	687b      	ldr	r3, [r7, #4]
24057b34:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
24057b36:	6878      	ldr	r0, [r7, #4]
24057b38:	f000 f896 	bl	24057c68 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
24057b3c:	687b      	ldr	r3, [r7, #4]
24057b3e:	681b      	ldr	r3, [r3, #0]
24057b40:	2280      	movs	r2, #128	@ 0x80
24057b42:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
24057b44:	69fb      	ldr	r3, [r7, #28]
24057b46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
24057b4a:	2b00      	cmp	r3, #0
24057b4c:	d012      	beq.n	24057b74 <HAL_ADC_IRQHandler+0x340>
24057b4e:	69bb      	ldr	r3, [r7, #24]
24057b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
24057b54:	2b00      	cmp	r3, #0
24057b56:	d00d      	beq.n	24057b74 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
24057b58:	687b      	ldr	r3, [r7, #4]
24057b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24057b5c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
24057b60:	687b      	ldr	r3, [r7, #4]
24057b62:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
24057b64:	6878      	ldr	r0, [r7, #4]
24057b66:	f000 fe1d 	bl	240587a4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
24057b6a:	687b      	ldr	r3, [r7, #4]
24057b6c:	681b      	ldr	r3, [r3, #0]
24057b6e:	f44f 7280 	mov.w	r2, #256	@ 0x100
24057b72:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
24057b74:	69fb      	ldr	r3, [r7, #28]
24057b76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
24057b7a:	2b00      	cmp	r3, #0
24057b7c:	d012      	beq.n	24057ba4 <HAL_ADC_IRQHandler+0x370>
24057b7e:	69bb      	ldr	r3, [r7, #24]
24057b80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
24057b84:	2b00      	cmp	r3, #0
24057b86:	d00d      	beq.n	24057ba4 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
24057b88:	687b      	ldr	r3, [r7, #4]
24057b8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24057b8c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
24057b90:	687b      	ldr	r3, [r7, #4]
24057b92:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
24057b94:	6878      	ldr	r0, [r7, #4]
24057b96:	f000 fe0f 	bl	240587b8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
24057b9a:	687b      	ldr	r3, [r7, #4]
24057b9c:	681b      	ldr	r3, [r3, #0]
24057b9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
24057ba2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
24057ba4:	69fb      	ldr	r3, [r7, #28]
24057ba6:	f003 0310 	and.w	r3, r3, #16
24057baa:	2b00      	cmp	r3, #0
24057bac:	d036      	beq.n	24057c1c <HAL_ADC_IRQHandler+0x3e8>
24057bae:	69bb      	ldr	r3, [r7, #24]
24057bb0:	f003 0310 	and.w	r3, r3, #16
24057bb4:	2b00      	cmp	r3, #0
24057bb6:	d031      	beq.n	24057c1c <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
24057bb8:	687b      	ldr	r3, [r7, #4]
24057bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
24057bbc:	2b00      	cmp	r3, #0
24057bbe:	d102      	bne.n	24057bc6 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
24057bc0:	2301      	movs	r3, #1
24057bc2:	627b      	str	r3, [r7, #36]	@ 0x24
24057bc4:	e014      	b.n	24057bf0 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
24057bc6:	697b      	ldr	r3, [r7, #20]
24057bc8:	2b00      	cmp	r3, #0
24057bca:	d008      	beq.n	24057bde <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
24057bcc:	4825      	ldr	r0, [pc, #148]	@ (24057c64 <HAL_ADC_IRQHandler+0x430>)
24057bce:	f7ff f8bf 	bl	24056d50 <LL_ADC_GetMultiDMATransfer>
24057bd2:	4603      	mov	r3, r0
24057bd4:	2b00      	cmp	r3, #0
24057bd6:	d00b      	beq.n	24057bf0 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
24057bd8:	2301      	movs	r3, #1
24057bda:	627b      	str	r3, [r7, #36]	@ 0x24
24057bdc:	e008      	b.n	24057bf0 <HAL_ADC_IRQHandler+0x3bc>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
24057bde:	687b      	ldr	r3, [r7, #4]
24057be0:	681b      	ldr	r3, [r3, #0]
24057be2:	68db      	ldr	r3, [r3, #12]
24057be4:	f003 0303 	and.w	r3, r3, #3
24057be8:	2b00      	cmp	r3, #0
24057bea:	d001      	beq.n	24057bf0 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
24057bec:	2301      	movs	r3, #1
24057bee:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
24057bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
24057bf2:	2b01      	cmp	r3, #1
24057bf4:	d10e      	bne.n	24057c14 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
24057bf6:	687b      	ldr	r3, [r7, #4]
24057bf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24057bfa:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
24057bfe:	687b      	ldr	r3, [r7, #4]
24057c00:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
24057c02:	687b      	ldr	r3, [r7, #4]
24057c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
24057c06:	f043 0202 	orr.w	r2, r3, #2
24057c0a:	687b      	ldr	r3, [r7, #4]
24057c0c:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
24057c0e:	6878      	ldr	r0, [r7, #4]
24057c10:	f000 f834 	bl	24057c7c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
24057c14:	687b      	ldr	r3, [r7, #4]
24057c16:	681b      	ldr	r3, [r3, #0]
24057c18:	2210      	movs	r2, #16
24057c1a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
24057c1c:	69fb      	ldr	r3, [r7, #28]
24057c1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
24057c22:	2b00      	cmp	r3, #0
24057c24:	d018      	beq.n	24057c58 <HAL_ADC_IRQHandler+0x424>
24057c26:	69bb      	ldr	r3, [r7, #24]
24057c28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
24057c2c:	2b00      	cmp	r3, #0
24057c2e:	d013      	beq.n	24057c58 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
24057c30:	687b      	ldr	r3, [r7, #4]
24057c32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24057c34:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
24057c38:	687b      	ldr	r3, [r7, #4]
24057c3a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
24057c3c:	687b      	ldr	r3, [r7, #4]
24057c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
24057c40:	f043 0208 	orr.w	r2, r3, #8
24057c44:	687b      	ldr	r3, [r7, #4]
24057c46:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
24057c48:	687b      	ldr	r3, [r7, #4]
24057c4a:	681b      	ldr	r3, [r3, #0]
24057c4c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
24057c50:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
24057c52:	6878      	ldr	r0, [r7, #4]
24057c54:	f000 fd9c 	bl	24058790 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
24057c58:	bf00      	nop
24057c5a:	3728      	adds	r7, #40	@ 0x28
24057c5c:	46bd      	mov	sp, r7
24057c5e:	bd80      	pop	{r7, pc}
24057c60:	40022000 	.word	0x40022000
24057c64:	40022300 	.word	0x40022300

24057c68 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
24057c68:	b480      	push	{r7}
24057c6a:	b083      	sub	sp, #12
24057c6c:	af00      	add	r7, sp, #0
24057c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
24057c70:	bf00      	nop
24057c72:	370c      	adds	r7, #12
24057c74:	46bd      	mov	sp, r7
24057c76:	f85d 7b04 	ldr.w	r7, [sp], #4
24057c7a:	4770      	bx	lr

24057c7c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
24057c7c:	b480      	push	{r7}
24057c7e:	b083      	sub	sp, #12
24057c80:	af00      	add	r7, sp, #0
24057c82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
24057c84:	bf00      	nop
24057c86:	370c      	adds	r7, #12
24057c88:	46bd      	mov	sp, r7
24057c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
24057c8e:	4770      	bx	lr

24057c90 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
24057c90:	b590      	push	{r4, r7, lr}
24057c92:	b0a1      	sub	sp, #132	@ 0x84
24057c94:	af00      	add	r7, sp, #0
24057c96:	6078      	str	r0, [r7, #4]
24057c98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
24057c9a:	2300      	movs	r3, #0
24057c9c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
24057ca0:	2300      	movs	r3, #0
24057ca2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
24057ca4:	683b      	ldr	r3, [r7, #0]
24057ca6:	68db      	ldr	r3, [r3, #12]
24057ca8:	4a95      	ldr	r2, [pc, #596]	@ (24057f00 <HAL_ADC_ConfigChannel+0x270>)
24057caa:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
24057cac:	687b      	ldr	r3, [r7, #4]
24057cae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
24057cb2:	2b01      	cmp	r3, #1
24057cb4:	d101      	bne.n	24057cba <HAL_ADC_ConfigChannel+0x2a>
24057cb6:	2302      	movs	r3, #2
24057cb8:	e2c0      	b.n	2405823c <HAL_ADC_ConfigChannel+0x5ac>
24057cba:	687b      	ldr	r3, [r7, #4]
24057cbc:	2201      	movs	r2, #1
24057cbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
24057cc2:	687b      	ldr	r3, [r7, #4]
24057cc4:	681b      	ldr	r3, [r3, #0]
24057cc6:	4618      	mov	r0, r3
24057cc8:	f7ff f914 	bl	24056ef4 <LL_ADC_REG_IsConversionOngoing>
24057ccc:	4603      	mov	r3, r0
24057cce:	2b00      	cmp	r3, #0
24057cd0:	f040 82a5 	bne.w	2405821e <HAL_ADC_ConfigChannel+0x58e>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
24057cd4:	683b      	ldr	r3, [r7, #0]
24057cd6:	681b      	ldr	r3, [r3, #0]
24057cd8:	2b00      	cmp	r3, #0
24057cda:	db2c      	blt.n	24057d36 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
24057cdc:	683b      	ldr	r3, [r7, #0]
24057cde:	681b      	ldr	r3, [r3, #0]
24057ce0:	f3c3 0313 	ubfx	r3, r3, #0, #20
24057ce4:	2b00      	cmp	r3, #0
24057ce6:	d108      	bne.n	24057cfa <HAL_ADC_ConfigChannel+0x6a>
24057ce8:	683b      	ldr	r3, [r7, #0]
24057cea:	681b      	ldr	r3, [r3, #0]
24057cec:	0e9b      	lsrs	r3, r3, #26
24057cee:	f003 031f 	and.w	r3, r3, #31
24057cf2:	2201      	movs	r2, #1
24057cf4:	fa02 f303 	lsl.w	r3, r2, r3
24057cf8:	e016      	b.n	24057d28 <HAL_ADC_ConfigChannel+0x98>
24057cfa:	683b      	ldr	r3, [r7, #0]
24057cfc:	681b      	ldr	r3, [r3, #0]
24057cfe:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
24057d00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
24057d02:	fa93 f3a3 	rbit	r3, r3
24057d06:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
24057d08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
24057d0a:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
24057d0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
24057d0e:	2b00      	cmp	r3, #0
24057d10:	d101      	bne.n	24057d16 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
24057d12:	2320      	movs	r3, #32
24057d14:	e003      	b.n	24057d1e <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
24057d16:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
24057d18:	fab3 f383 	clz	r3, r3
24057d1c:	b2db      	uxtb	r3, r3
24057d1e:	f003 031f 	and.w	r3, r3, #31
24057d22:	2201      	movs	r2, #1
24057d24:	fa02 f303 	lsl.w	r3, r2, r3
24057d28:	687a      	ldr	r2, [r7, #4]
24057d2a:	6812      	ldr	r2, [r2, #0]
24057d2c:	69d1      	ldr	r1, [r2, #28]
24057d2e:	687a      	ldr	r2, [r7, #4]
24057d30:	6812      	ldr	r2, [r2, #0]
24057d32:	430b      	orrs	r3, r1
24057d34:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
24057d36:	687b      	ldr	r3, [r7, #4]
24057d38:	6818      	ldr	r0, [r3, #0]
24057d3a:	683b      	ldr	r3, [r7, #0]
24057d3c:	6859      	ldr	r1, [r3, #4]
24057d3e:	683b      	ldr	r3, [r7, #0]
24057d40:	681b      	ldr	r3, [r3, #0]
24057d42:	461a      	mov	r2, r3
24057d44:	f7fe ff67 	bl	24056c16 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
24057d48:	687b      	ldr	r3, [r7, #4]
24057d4a:	681b      	ldr	r3, [r3, #0]
24057d4c:	4618      	mov	r0, r3
24057d4e:	f7ff f8d1 	bl	24056ef4 <LL_ADC_REG_IsConversionOngoing>
24057d52:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
24057d54:	687b      	ldr	r3, [r7, #4]
24057d56:	681b      	ldr	r3, [r3, #0]
24057d58:	4618      	mov	r0, r3
24057d5a:	f7ff f8f3 	bl	24056f44 <LL_ADC_INJ_IsConversionOngoing>
24057d5e:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
24057d60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
24057d62:	2b00      	cmp	r3, #0
24057d64:	f040 80a0 	bne.w	24057ea8 <HAL_ADC_ConfigChannel+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
24057d68:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
24057d6a:	2b00      	cmp	r3, #0
24057d6c:	f040 809c 	bne.w	24057ea8 <HAL_ADC_ConfigChannel+0x218>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
24057d70:	687b      	ldr	r3, [r7, #4]
24057d72:	6818      	ldr	r0, [r3, #0]
24057d74:	683b      	ldr	r3, [r7, #0]
24057d76:	6819      	ldr	r1, [r3, #0]
24057d78:	683b      	ldr	r3, [r7, #0]
24057d7a:	689b      	ldr	r3, [r3, #8]
24057d7c:	461a      	mov	r2, r3
24057d7e:	f7fe ff89 	bl	24056c94 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
24057d82:	687b      	ldr	r3, [r7, #4]
24057d84:	681b      	ldr	r3, [r3, #0]
24057d86:	68db      	ldr	r3, [r3, #12]
24057d88:	f003 0310 	and.w	r3, r3, #16
24057d8c:	2b00      	cmp	r3, #0
24057d8e:	d10b      	bne.n	24057da8 <HAL_ADC_ConfigChannel+0x118>
24057d90:	683b      	ldr	r3, [r7, #0]
24057d92:	695a      	ldr	r2, [r3, #20]
24057d94:	687b      	ldr	r3, [r7, #4]
24057d96:	681b      	ldr	r3, [r3, #0]
24057d98:	68db      	ldr	r3, [r3, #12]
24057d9a:	089b      	lsrs	r3, r3, #2
24057d9c:	f003 0307 	and.w	r3, r3, #7
24057da0:	005b      	lsls	r3, r3, #1
24057da2:	fa02 f303 	lsl.w	r3, r2, r3
24057da6:	e00a      	b.n	24057dbe <HAL_ADC_ConfigChannel+0x12e>
24057da8:	683b      	ldr	r3, [r7, #0]
24057daa:	695a      	ldr	r2, [r3, #20]
24057dac:	687b      	ldr	r3, [r7, #4]
24057dae:	681b      	ldr	r3, [r3, #0]
24057db0:	68db      	ldr	r3, [r3, #12]
24057db2:	089b      	lsrs	r3, r3, #2
24057db4:	f003 0304 	and.w	r3, r3, #4
24057db8:	005b      	lsls	r3, r3, #1
24057dba:	fa02 f303 	lsl.w	r3, r2, r3
24057dbe:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
24057dc0:	683b      	ldr	r3, [r7, #0]
24057dc2:	691b      	ldr	r3, [r3, #16]
24057dc4:	2b04      	cmp	r3, #4
24057dc6:	d027      	beq.n	24057e18 <HAL_ADC_ConfigChannel+0x188>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
24057dc8:	687b      	ldr	r3, [r7, #4]
24057dca:	6818      	ldr	r0, [r3, #0]
24057dcc:	683b      	ldr	r3, [r7, #0]
24057dce:	6919      	ldr	r1, [r3, #16]
24057dd0:	683b      	ldr	r3, [r7, #0]
24057dd2:	681a      	ldr	r2, [r3, #0]
24057dd4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
24057dd6:	f7fe feb7 	bl	24056b48 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
24057dda:	687b      	ldr	r3, [r7, #4]
24057ddc:	6818      	ldr	r0, [r3, #0]
24057dde:	683b      	ldr	r3, [r7, #0]
24057de0:	6919      	ldr	r1, [r3, #16]
24057de2:	683b      	ldr	r3, [r7, #0]
24057de4:	7e5b      	ldrb	r3, [r3, #25]
24057de6:	2b01      	cmp	r3, #1
24057de8:	d102      	bne.n	24057df0 <HAL_ADC_ConfigChannel+0x160>
24057dea:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
24057dee:	e000      	b.n	24057df2 <HAL_ADC_ConfigChannel+0x162>
24057df0:	2300      	movs	r3, #0
24057df2:	461a      	mov	r2, r3
24057df4:	f7fe fee1 	bl	24056bba <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
24057df8:	687b      	ldr	r3, [r7, #4]
24057dfa:	6818      	ldr	r0, [r3, #0]
24057dfc:	683b      	ldr	r3, [r7, #0]
24057dfe:	6919      	ldr	r1, [r3, #16]
24057e00:	683b      	ldr	r3, [r7, #0]
24057e02:	7e1b      	ldrb	r3, [r3, #24]
24057e04:	2b01      	cmp	r3, #1
24057e06:	d102      	bne.n	24057e0e <HAL_ADC_ConfigChannel+0x17e>
24057e08:	f44f 6300 	mov.w	r3, #2048	@ 0x800
24057e0c:	e000      	b.n	24057e10 <HAL_ADC_ConfigChannel+0x180>
24057e0e:	2300      	movs	r3, #0
24057e10:	461a      	mov	r2, r3
24057e12:	f7fe feb9 	bl	24056b88 <LL_ADC_SetDataRightShift>
24057e16:	e047      	b.n	24057ea8 <HAL_ADC_ConfigChannel+0x218>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
24057e18:	687b      	ldr	r3, [r7, #4]
24057e1a:	681b      	ldr	r3, [r3, #0]
24057e1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
24057e1e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
24057e22:	683b      	ldr	r3, [r7, #0]
24057e24:	681b      	ldr	r3, [r3, #0]
24057e26:	069b      	lsls	r3, r3, #26
24057e28:	429a      	cmp	r2, r3
24057e2a:	d107      	bne.n	24057e3c <HAL_ADC_ConfigChannel+0x1ac>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
24057e2c:	687b      	ldr	r3, [r7, #4]
24057e2e:	681b      	ldr	r3, [r3, #0]
24057e30:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
24057e32:	687b      	ldr	r3, [r7, #4]
24057e34:	681b      	ldr	r3, [r3, #0]
24057e36:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
24057e3a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
24057e3c:	687b      	ldr	r3, [r7, #4]
24057e3e:	681b      	ldr	r3, [r3, #0]
24057e40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
24057e42:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
24057e46:	683b      	ldr	r3, [r7, #0]
24057e48:	681b      	ldr	r3, [r3, #0]
24057e4a:	069b      	lsls	r3, r3, #26
24057e4c:	429a      	cmp	r2, r3
24057e4e:	d107      	bne.n	24057e60 <HAL_ADC_ConfigChannel+0x1d0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
24057e50:	687b      	ldr	r3, [r7, #4]
24057e52:	681b      	ldr	r3, [r3, #0]
24057e54:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
24057e56:	687b      	ldr	r3, [r7, #4]
24057e58:	681b      	ldr	r3, [r3, #0]
24057e5a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
24057e5e:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
24057e60:	687b      	ldr	r3, [r7, #4]
24057e62:	681b      	ldr	r3, [r3, #0]
24057e64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
24057e66:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
24057e6a:	683b      	ldr	r3, [r7, #0]
24057e6c:	681b      	ldr	r3, [r3, #0]
24057e6e:	069b      	lsls	r3, r3, #26
24057e70:	429a      	cmp	r2, r3
24057e72:	d107      	bne.n	24057e84 <HAL_ADC_ConfigChannel+0x1f4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
24057e74:	687b      	ldr	r3, [r7, #4]
24057e76:	681b      	ldr	r3, [r3, #0]
24057e78:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
24057e7a:	687b      	ldr	r3, [r7, #4]
24057e7c:	681b      	ldr	r3, [r3, #0]
24057e7e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
24057e82:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
24057e84:	687b      	ldr	r3, [r7, #4]
24057e86:	681b      	ldr	r3, [r3, #0]
24057e88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
24057e8a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
24057e8e:	683b      	ldr	r3, [r7, #0]
24057e90:	681b      	ldr	r3, [r3, #0]
24057e92:	069b      	lsls	r3, r3, #26
24057e94:	429a      	cmp	r2, r3
24057e96:	d107      	bne.n	24057ea8 <HAL_ADC_ConfigChannel+0x218>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
24057e98:	687b      	ldr	r3, [r7, #4]
24057e9a:	681b      	ldr	r3, [r3, #0]
24057e9c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
24057e9e:	687b      	ldr	r3, [r7, #4]
24057ea0:	681b      	ldr	r3, [r3, #0]
24057ea2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
24057ea6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
24057ea8:	687b      	ldr	r3, [r7, #4]
24057eaa:	681b      	ldr	r3, [r3, #0]
24057eac:	4618      	mov	r0, r3
24057eae:	f7fe ffd3 	bl	24056e58 <LL_ADC_IsEnabled>
24057eb2:	4603      	mov	r3, r0
24057eb4:	2b00      	cmp	r3, #0
24057eb6:	f040 81bb 	bne.w	24058230 <HAL_ADC_ConfigChannel+0x5a0>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
24057eba:	687b      	ldr	r3, [r7, #4]
24057ebc:	6818      	ldr	r0, [r3, #0]
24057ebe:	683b      	ldr	r3, [r7, #0]
24057ec0:	6819      	ldr	r1, [r3, #0]
24057ec2:	683b      	ldr	r3, [r7, #0]
24057ec4:	68db      	ldr	r3, [r3, #12]
24057ec6:	461a      	mov	r2, r3
24057ec8:	f7fe ff10 	bl	24056cec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
24057ecc:	683b      	ldr	r3, [r7, #0]
24057ece:	68db      	ldr	r3, [r3, #12]
24057ed0:	4a0b      	ldr	r2, [pc, #44]	@ (24057f00 <HAL_ADC_ConfigChannel+0x270>)
24057ed2:	4293      	cmp	r3, r2
24057ed4:	f040 8130 	bne.w	24058138 <HAL_ADC_ConfigChannel+0x4a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
24057ed8:	687b      	ldr	r3, [r7, #4]
24057eda:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
24057edc:	683b      	ldr	r3, [r7, #0]
24057ede:	681b      	ldr	r3, [r3, #0]
24057ee0:	f3c3 0313 	ubfx	r3, r3, #0, #20
24057ee4:	2b00      	cmp	r3, #0
24057ee6:	d10d      	bne.n	24057f04 <HAL_ADC_ConfigChannel+0x274>
24057ee8:	683b      	ldr	r3, [r7, #0]
24057eea:	681b      	ldr	r3, [r3, #0]
24057eec:	0e9b      	lsrs	r3, r3, #26
24057eee:	3301      	adds	r3, #1
24057ef0:	f003 031f 	and.w	r3, r3, #31
24057ef4:	2b09      	cmp	r3, #9
24057ef6:	bf94      	ite	ls
24057ef8:	2301      	movls	r3, #1
24057efa:	2300      	movhi	r3, #0
24057efc:	b2db      	uxtb	r3, r3
24057efe:	e01b      	b.n	24057f38 <HAL_ADC_ConfigChannel+0x2a8>
24057f00:	47ff0000 	.word	0x47ff0000
24057f04:	683b      	ldr	r3, [r7, #0]
24057f06:	681b      	ldr	r3, [r3, #0]
24057f08:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
24057f0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
24057f0c:	fa93 f3a3 	rbit	r3, r3
24057f10:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
24057f12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
24057f14:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
24057f16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
24057f18:	2b00      	cmp	r3, #0
24057f1a:	d101      	bne.n	24057f20 <HAL_ADC_ConfigChannel+0x290>
    return 32U;
24057f1c:	2320      	movs	r3, #32
24057f1e:	e003      	b.n	24057f28 <HAL_ADC_ConfigChannel+0x298>
  return __builtin_clz(value);
24057f20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
24057f22:	fab3 f383 	clz	r3, r3
24057f26:	b2db      	uxtb	r3, r3
24057f28:	3301      	adds	r3, #1
24057f2a:	f003 031f 	and.w	r3, r3, #31
24057f2e:	2b09      	cmp	r3, #9
24057f30:	bf94      	ite	ls
24057f32:	2301      	movls	r3, #1
24057f34:	2300      	movhi	r3, #0
24057f36:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
24057f38:	2b00      	cmp	r3, #0
24057f3a:	d079      	beq.n	24058030 <HAL_ADC_ConfigChannel+0x3a0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
24057f3c:	683b      	ldr	r3, [r7, #0]
24057f3e:	681b      	ldr	r3, [r3, #0]
24057f40:	f3c3 0313 	ubfx	r3, r3, #0, #20
24057f44:	2b00      	cmp	r3, #0
24057f46:	d107      	bne.n	24057f58 <HAL_ADC_ConfigChannel+0x2c8>
24057f48:	683b      	ldr	r3, [r7, #0]
24057f4a:	681b      	ldr	r3, [r3, #0]
24057f4c:	0e9b      	lsrs	r3, r3, #26
24057f4e:	3301      	adds	r3, #1
24057f50:	069b      	lsls	r3, r3, #26
24057f52:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
24057f56:	e015      	b.n	24057f84 <HAL_ADC_ConfigChannel+0x2f4>
24057f58:	683b      	ldr	r3, [r7, #0]
24057f5a:	681b      	ldr	r3, [r3, #0]
24057f5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
24057f5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
24057f60:	fa93 f3a3 	rbit	r3, r3
24057f64:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
24057f66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
24057f68:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
24057f6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
24057f6c:	2b00      	cmp	r3, #0
24057f6e:	d101      	bne.n	24057f74 <HAL_ADC_ConfigChannel+0x2e4>
    return 32U;
24057f70:	2320      	movs	r3, #32
24057f72:	e003      	b.n	24057f7c <HAL_ADC_ConfigChannel+0x2ec>
  return __builtin_clz(value);
24057f74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
24057f76:	fab3 f383 	clz	r3, r3
24057f7a:	b2db      	uxtb	r3, r3
24057f7c:	3301      	adds	r3, #1
24057f7e:	069b      	lsls	r3, r3, #26
24057f80:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
24057f84:	683b      	ldr	r3, [r7, #0]
24057f86:	681b      	ldr	r3, [r3, #0]
24057f88:	f3c3 0313 	ubfx	r3, r3, #0, #20
24057f8c:	2b00      	cmp	r3, #0
24057f8e:	d109      	bne.n	24057fa4 <HAL_ADC_ConfigChannel+0x314>
24057f90:	683b      	ldr	r3, [r7, #0]
24057f92:	681b      	ldr	r3, [r3, #0]
24057f94:	0e9b      	lsrs	r3, r3, #26
24057f96:	3301      	adds	r3, #1
24057f98:	f003 031f 	and.w	r3, r3, #31
24057f9c:	2101      	movs	r1, #1
24057f9e:	fa01 f303 	lsl.w	r3, r1, r3
24057fa2:	e017      	b.n	24057fd4 <HAL_ADC_ConfigChannel+0x344>
24057fa4:	683b      	ldr	r3, [r7, #0]
24057fa6:	681b      	ldr	r3, [r3, #0]
24057fa8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
24057faa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
24057fac:	fa93 f3a3 	rbit	r3, r3
24057fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
24057fb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
24057fb4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
24057fb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
24057fb8:	2b00      	cmp	r3, #0
24057fba:	d101      	bne.n	24057fc0 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
24057fbc:	2320      	movs	r3, #32
24057fbe:	e003      	b.n	24057fc8 <HAL_ADC_ConfigChannel+0x338>
  return __builtin_clz(value);
24057fc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
24057fc2:	fab3 f383 	clz	r3, r3
24057fc6:	b2db      	uxtb	r3, r3
24057fc8:	3301      	adds	r3, #1
24057fca:	f003 031f 	and.w	r3, r3, #31
24057fce:	2101      	movs	r1, #1
24057fd0:	fa01 f303 	lsl.w	r3, r1, r3
24057fd4:	ea42 0103 	orr.w	r1, r2, r3
24057fd8:	683b      	ldr	r3, [r7, #0]
24057fda:	681b      	ldr	r3, [r3, #0]
24057fdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
24057fe0:	2b00      	cmp	r3, #0
24057fe2:	d10a      	bne.n	24057ffa <HAL_ADC_ConfigChannel+0x36a>
24057fe4:	683b      	ldr	r3, [r7, #0]
24057fe6:	681b      	ldr	r3, [r3, #0]
24057fe8:	0e9b      	lsrs	r3, r3, #26
24057fea:	3301      	adds	r3, #1
24057fec:	f003 021f 	and.w	r2, r3, #31
24057ff0:	4613      	mov	r3, r2
24057ff2:	005b      	lsls	r3, r3, #1
24057ff4:	4413      	add	r3, r2
24057ff6:	051b      	lsls	r3, r3, #20
24057ff8:	e018      	b.n	2405802c <HAL_ADC_ConfigChannel+0x39c>
24057ffa:	683b      	ldr	r3, [r7, #0]
24057ffc:	681b      	ldr	r3, [r3, #0]
24057ffe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
24058000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
24058002:	fa93 f3a3 	rbit	r3, r3
24058006:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
24058008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
2405800a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
2405800c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
2405800e:	2b00      	cmp	r3, #0
24058010:	d101      	bne.n	24058016 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
24058012:	2320      	movs	r3, #32
24058014:	e003      	b.n	2405801e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
24058016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24058018:	fab3 f383 	clz	r3, r3
2405801c:	b2db      	uxtb	r3, r3
2405801e:	3301      	adds	r3, #1
24058020:	f003 021f 	and.w	r2, r3, #31
24058024:	4613      	mov	r3, r2
24058026:	005b      	lsls	r3, r3, #1
24058028:	4413      	add	r3, r2
2405802a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
2405802c:	430b      	orrs	r3, r1
2405802e:	e07e      	b.n	2405812e <HAL_ADC_ConfigChannel+0x49e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
24058030:	683b      	ldr	r3, [r7, #0]
24058032:	681b      	ldr	r3, [r3, #0]
24058034:	f3c3 0313 	ubfx	r3, r3, #0, #20
24058038:	2b00      	cmp	r3, #0
2405803a:	d107      	bne.n	2405804c <HAL_ADC_ConfigChannel+0x3bc>
2405803c:	683b      	ldr	r3, [r7, #0]
2405803e:	681b      	ldr	r3, [r3, #0]
24058040:	0e9b      	lsrs	r3, r3, #26
24058042:	3301      	adds	r3, #1
24058044:	069b      	lsls	r3, r3, #26
24058046:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
2405804a:	e015      	b.n	24058078 <HAL_ADC_ConfigChannel+0x3e8>
2405804c:	683b      	ldr	r3, [r7, #0]
2405804e:	681b      	ldr	r3, [r3, #0]
24058050:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
24058052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
24058054:	fa93 f3a3 	rbit	r3, r3
24058058:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
2405805a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2405805c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
2405805e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
24058060:	2b00      	cmp	r3, #0
24058062:	d101      	bne.n	24058068 <HAL_ADC_ConfigChannel+0x3d8>
    return 32U;
24058064:	2320      	movs	r3, #32
24058066:	e003      	b.n	24058070 <HAL_ADC_ConfigChannel+0x3e0>
  return __builtin_clz(value);
24058068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
2405806a:	fab3 f383 	clz	r3, r3
2405806e:	b2db      	uxtb	r3, r3
24058070:	3301      	adds	r3, #1
24058072:	069b      	lsls	r3, r3, #26
24058074:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
24058078:	683b      	ldr	r3, [r7, #0]
2405807a:	681b      	ldr	r3, [r3, #0]
2405807c:	f3c3 0313 	ubfx	r3, r3, #0, #20
24058080:	2b00      	cmp	r3, #0
24058082:	d109      	bne.n	24058098 <HAL_ADC_ConfigChannel+0x408>
24058084:	683b      	ldr	r3, [r7, #0]
24058086:	681b      	ldr	r3, [r3, #0]
24058088:	0e9b      	lsrs	r3, r3, #26
2405808a:	3301      	adds	r3, #1
2405808c:	f003 031f 	and.w	r3, r3, #31
24058090:	2101      	movs	r1, #1
24058092:	fa01 f303 	lsl.w	r3, r1, r3
24058096:	e017      	b.n	240580c8 <HAL_ADC_ConfigChannel+0x438>
24058098:	683b      	ldr	r3, [r7, #0]
2405809a:	681b      	ldr	r3, [r3, #0]
2405809c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
2405809e:	69fb      	ldr	r3, [r7, #28]
240580a0:	fa93 f3a3 	rbit	r3, r3
240580a4:	61bb      	str	r3, [r7, #24]
  return result;
240580a6:	69bb      	ldr	r3, [r7, #24]
240580a8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
240580aa:	6a3b      	ldr	r3, [r7, #32]
240580ac:	2b00      	cmp	r3, #0
240580ae:	d101      	bne.n	240580b4 <HAL_ADC_ConfigChannel+0x424>
    return 32U;
240580b0:	2320      	movs	r3, #32
240580b2:	e003      	b.n	240580bc <HAL_ADC_ConfigChannel+0x42c>
  return __builtin_clz(value);
240580b4:	6a3b      	ldr	r3, [r7, #32]
240580b6:	fab3 f383 	clz	r3, r3
240580ba:	b2db      	uxtb	r3, r3
240580bc:	3301      	adds	r3, #1
240580be:	f003 031f 	and.w	r3, r3, #31
240580c2:	2101      	movs	r1, #1
240580c4:	fa01 f303 	lsl.w	r3, r1, r3
240580c8:	ea42 0103 	orr.w	r1, r2, r3
240580cc:	683b      	ldr	r3, [r7, #0]
240580ce:	681b      	ldr	r3, [r3, #0]
240580d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
240580d4:	2b00      	cmp	r3, #0
240580d6:	d10d      	bne.n	240580f4 <HAL_ADC_ConfigChannel+0x464>
240580d8:	683b      	ldr	r3, [r7, #0]
240580da:	681b      	ldr	r3, [r3, #0]
240580dc:	0e9b      	lsrs	r3, r3, #26
240580de:	3301      	adds	r3, #1
240580e0:	f003 021f 	and.w	r2, r3, #31
240580e4:	4613      	mov	r3, r2
240580e6:	005b      	lsls	r3, r3, #1
240580e8:	4413      	add	r3, r2
240580ea:	3b1e      	subs	r3, #30
240580ec:	051b      	lsls	r3, r3, #20
240580ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
240580f2:	e01b      	b.n	2405812c <HAL_ADC_ConfigChannel+0x49c>
240580f4:	683b      	ldr	r3, [r7, #0]
240580f6:	681b      	ldr	r3, [r3, #0]
240580f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
240580fa:	693b      	ldr	r3, [r7, #16]
240580fc:	fa93 f3a3 	rbit	r3, r3
24058100:	60fb      	str	r3, [r7, #12]
  return result;
24058102:	68fb      	ldr	r3, [r7, #12]
24058104:	617b      	str	r3, [r7, #20]
  if (value == 0U)
24058106:	697b      	ldr	r3, [r7, #20]
24058108:	2b00      	cmp	r3, #0
2405810a:	d101      	bne.n	24058110 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
2405810c:	2320      	movs	r3, #32
2405810e:	e003      	b.n	24058118 <HAL_ADC_ConfigChannel+0x488>
  return __builtin_clz(value);
24058110:	697b      	ldr	r3, [r7, #20]
24058112:	fab3 f383 	clz	r3, r3
24058116:	b2db      	uxtb	r3, r3
24058118:	3301      	adds	r3, #1
2405811a:	f003 021f 	and.w	r2, r3, #31
2405811e:	4613      	mov	r3, r2
24058120:	005b      	lsls	r3, r3, #1
24058122:	4413      	add	r3, r2
24058124:	3b1e      	subs	r3, #30
24058126:	051b      	lsls	r3, r3, #20
24058128:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
2405812c:	430b      	orrs	r3, r1
2405812e:	683a      	ldr	r2, [r7, #0]
24058130:	6892      	ldr	r2, [r2, #8]
24058132:	4619      	mov	r1, r3
24058134:	f7fe fdae 	bl	24056c94 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
24058138:	683b      	ldr	r3, [r7, #0]
2405813a:	681b      	ldr	r3, [r3, #0]
2405813c:	2b00      	cmp	r3, #0
2405813e:	da77      	bge.n	24058230 <HAL_ADC_ConfigChannel+0x5a0>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
24058140:	4840      	ldr	r0, [pc, #256]	@ (24058244 <HAL_ADC_ConfigChannel+0x5b4>)
24058142:	f7fe fcf3 	bl	24056b2c <LL_ADC_GetCommonPathInternalCh>
24058146:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
24058148:	483f      	ldr	r0, [pc, #252]	@ (24058248 <HAL_ADC_ConfigChannel+0x5b8>)
2405814a:	f7fe fe85 	bl	24056e58 <LL_ADC_IsEnabled>
2405814e:	4604      	mov	r4, r0
24058150:	483e      	ldr	r0, [pc, #248]	@ (2405824c <HAL_ADC_ConfigChannel+0x5bc>)
24058152:	f7fe fe81 	bl	24056e58 <LL_ADC_IsEnabled>
24058156:	4603      	mov	r3, r0
24058158:	4323      	orrs	r3, r4
2405815a:	2b00      	cmp	r3, #0
2405815c:	d155      	bne.n	2405820a <HAL_ADC_ConfigChannel+0x57a>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
2405815e:	683b      	ldr	r3, [r7, #0]
24058160:	681b      	ldr	r3, [r3, #0]
24058162:	4a3b      	ldr	r2, [pc, #236]	@ (24058250 <HAL_ADC_ConfigChannel+0x5c0>)
24058164:	4293      	cmp	r3, r2
24058166:	d122      	bne.n	240581ae <HAL_ADC_ConfigChannel+0x51e>
24058168:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
2405816a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
2405816e:	2b00      	cmp	r3, #0
24058170:	d11d      	bne.n	240581ae <HAL_ADC_ConfigChannel+0x51e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
24058172:	687b      	ldr	r3, [r7, #4]
24058174:	681b      	ldr	r3, [r3, #0]
24058176:	4a35      	ldr	r2, [pc, #212]	@ (2405824c <HAL_ADC_ConfigChannel+0x5bc>)
24058178:	4293      	cmp	r3, r2
2405817a:	d159      	bne.n	24058230 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
2405817c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
2405817e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
24058182:	4619      	mov	r1, r3
24058184:	482f      	ldr	r0, [pc, #188]	@ (24058244 <HAL_ADC_ConfigChannel+0x5b4>)
24058186:	f7fe fcbe 	bl	24056b06 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
2405818a:	4b32      	ldr	r3, [pc, #200]	@ (24058254 <HAL_ADC_ConfigChannel+0x5c4>)
2405818c:	681b      	ldr	r3, [r3, #0]
2405818e:	099b      	lsrs	r3, r3, #6
24058190:	4a31      	ldr	r2, [pc, #196]	@ (24058258 <HAL_ADC_ConfigChannel+0x5c8>)
24058192:	fba2 2303 	umull	r2, r3, r2, r3
24058196:	099b      	lsrs	r3, r3, #6
24058198:	3301      	adds	r3, #1
2405819a:	005b      	lsls	r3, r3, #1
2405819c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
2405819e:	e002      	b.n	240581a6 <HAL_ADC_ConfigChannel+0x516>
              {
                wait_loop_index--;
240581a0:	68bb      	ldr	r3, [r7, #8]
240581a2:	3b01      	subs	r3, #1
240581a4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
240581a6:	68bb      	ldr	r3, [r7, #8]
240581a8:	2b00      	cmp	r3, #0
240581aa:	d1f9      	bne.n	240581a0 <HAL_ADC_ConfigChannel+0x510>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
240581ac:	e040      	b.n	24058230 <HAL_ADC_ConfigChannel+0x5a0>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
240581ae:	683b      	ldr	r3, [r7, #0]
240581b0:	681b      	ldr	r3, [r3, #0]
240581b2:	4a2a      	ldr	r2, [pc, #168]	@ (2405825c <HAL_ADC_ConfigChannel+0x5cc>)
240581b4:	4293      	cmp	r3, r2
240581b6:	d111      	bne.n	240581dc <HAL_ADC_ConfigChannel+0x54c>
240581b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
240581ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
240581be:	2b00      	cmp	r3, #0
240581c0:	d10c      	bne.n	240581dc <HAL_ADC_ConfigChannel+0x54c>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
240581c2:	687b      	ldr	r3, [r7, #4]
240581c4:	681b      	ldr	r3, [r3, #0]
240581c6:	4a21      	ldr	r2, [pc, #132]	@ (2405824c <HAL_ADC_ConfigChannel+0x5bc>)
240581c8:	4293      	cmp	r3, r2
240581ca:	d131      	bne.n	24058230 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
240581cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
240581ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
240581d2:	4619      	mov	r1, r3
240581d4:	481b      	ldr	r0, [pc, #108]	@ (24058244 <HAL_ADC_ConfigChannel+0x5b4>)
240581d6:	f7fe fc96 	bl	24056b06 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
240581da:	e029      	b.n	24058230 <HAL_ADC_ConfigChannel+0x5a0>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
240581dc:	683b      	ldr	r3, [r7, #0]
240581de:	681b      	ldr	r3, [r3, #0]
240581e0:	4a1f      	ldr	r2, [pc, #124]	@ (24058260 <HAL_ADC_ConfigChannel+0x5d0>)
240581e2:	4293      	cmp	r3, r2
240581e4:	d124      	bne.n	24058230 <HAL_ADC_ConfigChannel+0x5a0>
240581e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
240581e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
240581ec:	2b00      	cmp	r3, #0
240581ee:	d11f      	bne.n	24058230 <HAL_ADC_ConfigChannel+0x5a0>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
240581f0:	687b      	ldr	r3, [r7, #4]
240581f2:	681b      	ldr	r3, [r3, #0]
240581f4:	4a15      	ldr	r2, [pc, #84]	@ (2405824c <HAL_ADC_ConfigChannel+0x5bc>)
240581f6:	4293      	cmp	r3, r2
240581f8:	d11a      	bne.n	24058230 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
240581fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
240581fc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
24058200:	4619      	mov	r1, r3
24058202:	4810      	ldr	r0, [pc, #64]	@ (24058244 <HAL_ADC_ConfigChannel+0x5b4>)
24058204:	f7fe fc7f 	bl	24056b06 <LL_ADC_SetCommonPathInternalCh>
24058208:	e012      	b.n	24058230 <HAL_ADC_ConfigChannel+0x5a0>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
2405820a:	687b      	ldr	r3, [r7, #4]
2405820c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
2405820e:	f043 0220 	orr.w	r2, r3, #32
24058212:	687b      	ldr	r3, [r7, #4]
24058214:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
24058216:	2301      	movs	r3, #1
24058218:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
2405821c:	e008      	b.n	24058230 <HAL_ADC_ConfigChannel+0x5a0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
2405821e:	687b      	ldr	r3, [r7, #4]
24058220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24058222:	f043 0220 	orr.w	r2, r3, #32
24058226:	687b      	ldr	r3, [r7, #4]
24058228:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
2405822a:	2301      	movs	r3, #1
2405822c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
24058230:	687b      	ldr	r3, [r7, #4]
24058232:	2200      	movs	r2, #0
24058234:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
24058238:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
2405823c:	4618      	mov	r0, r3
2405823e:	3784      	adds	r7, #132	@ 0x84
24058240:	46bd      	mov	sp, r7
24058242:	bd90      	pop	{r4, r7, pc}
24058244:	40022300 	.word	0x40022300
24058248:	40022000 	.word	0x40022000
2405824c:	40022100 	.word	0x40022100
24058250:	cb840000 	.word	0xcb840000
24058254:	200000e0 	.word	0x200000e0
24058258:	053e2d63 	.word	0x053e2d63
2405825c:	bac04000 	.word	0xbac04000
24058260:	cfb80000 	.word	0xcfb80000

24058264 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
24058264:	b580      	push	{r7, lr}
24058266:	b088      	sub	sp, #32
24058268:	af00      	add	r7, sp, #0
2405826a:	6078      	str	r0, [r7, #4]
2405826c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
2405826e:	2300      	movs	r3, #0
24058270:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
24058272:	683b      	ldr	r3, [r7, #0]
24058274:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
24058276:	687b      	ldr	r3, [r7, #4]
24058278:	681b      	ldr	r3, [r3, #0]
2405827a:	4618      	mov	r0, r3
2405827c:	f7fe fe3a 	bl	24056ef4 <LL_ADC_REG_IsConversionOngoing>
24058280:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
24058282:	687b      	ldr	r3, [r7, #4]
24058284:	681b      	ldr	r3, [r3, #0]
24058286:	4618      	mov	r0, r3
24058288:	f7fe fe5c 	bl	24056f44 <LL_ADC_INJ_IsConversionOngoing>
2405828c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
2405828e:	693b      	ldr	r3, [r7, #16]
24058290:	2b00      	cmp	r3, #0
24058292:	d103      	bne.n	2405829c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
24058294:	68fb      	ldr	r3, [r7, #12]
24058296:	2b00      	cmp	r3, #0
24058298:	f000 8098 	beq.w	240583cc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
2405829c:	687b      	ldr	r3, [r7, #4]
2405829e:	681b      	ldr	r3, [r3, #0]
240582a0:	68db      	ldr	r3, [r3, #12]
240582a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
240582a6:	2b00      	cmp	r3, #0
240582a8:	d02a      	beq.n	24058300 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
240582aa:	687b      	ldr	r3, [r7, #4]
240582ac:	7d5b      	ldrb	r3, [r3, #21]
240582ae:	2b01      	cmp	r3, #1
240582b0:	d126      	bne.n	24058300 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
240582b2:	687b      	ldr	r3, [r7, #4]
240582b4:	7d1b      	ldrb	r3, [r3, #20]
240582b6:	2b01      	cmp	r3, #1
240582b8:	d122      	bne.n	24058300 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
240582ba:	2301      	movs	r3, #1
240582bc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
240582be:	e014      	b.n	240582ea <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
240582c0:	69fb      	ldr	r3, [r7, #28]
240582c2:	4a45      	ldr	r2, [pc, #276]	@ (240583d8 <ADC_ConversionStop+0x174>)
240582c4:	4293      	cmp	r3, r2
240582c6:	d90d      	bls.n	240582e4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
240582c8:	687b      	ldr	r3, [r7, #4]
240582ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
240582cc:	f043 0210 	orr.w	r2, r3, #16
240582d0:	687b      	ldr	r3, [r7, #4]
240582d2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
240582d4:	687b      	ldr	r3, [r7, #4]
240582d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
240582d8:	f043 0201 	orr.w	r2, r3, #1
240582dc:	687b      	ldr	r3, [r7, #4]
240582de:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
240582e0:	2301      	movs	r3, #1
240582e2:	e074      	b.n	240583ce <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
240582e4:	69fb      	ldr	r3, [r7, #28]
240582e6:	3301      	adds	r3, #1
240582e8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
240582ea:	687b      	ldr	r3, [r7, #4]
240582ec:	681b      	ldr	r3, [r3, #0]
240582ee:	681b      	ldr	r3, [r3, #0]
240582f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
240582f4:	2b40      	cmp	r3, #64	@ 0x40
240582f6:	d1e3      	bne.n	240582c0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
240582f8:	687b      	ldr	r3, [r7, #4]
240582fa:	681b      	ldr	r3, [r3, #0]
240582fc:	2240      	movs	r2, #64	@ 0x40
240582fe:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
24058300:	69bb      	ldr	r3, [r7, #24]
24058302:	2b02      	cmp	r3, #2
24058304:	d014      	beq.n	24058330 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
24058306:	687b      	ldr	r3, [r7, #4]
24058308:	681b      	ldr	r3, [r3, #0]
2405830a:	4618      	mov	r0, r3
2405830c:	f7fe fdf2 	bl	24056ef4 <LL_ADC_REG_IsConversionOngoing>
24058310:	4603      	mov	r3, r0
24058312:	2b00      	cmp	r3, #0
24058314:	d00c      	beq.n	24058330 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
24058316:	687b      	ldr	r3, [r7, #4]
24058318:	681b      	ldr	r3, [r3, #0]
2405831a:	4618      	mov	r0, r3
2405831c:	f7fe fdaf 	bl	24056e7e <LL_ADC_IsDisableOngoing>
24058320:	4603      	mov	r3, r0
24058322:	2b00      	cmp	r3, #0
24058324:	d104      	bne.n	24058330 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
24058326:	687b      	ldr	r3, [r7, #4]
24058328:	681b      	ldr	r3, [r3, #0]
2405832a:	4618      	mov	r0, r3
2405832c:	f7fe fdce 	bl	24056ecc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
24058330:	69bb      	ldr	r3, [r7, #24]
24058332:	2b01      	cmp	r3, #1
24058334:	d014      	beq.n	24058360 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
24058336:	687b      	ldr	r3, [r7, #4]
24058338:	681b      	ldr	r3, [r3, #0]
2405833a:	4618      	mov	r0, r3
2405833c:	f7fe fe02 	bl	24056f44 <LL_ADC_INJ_IsConversionOngoing>
24058340:	4603      	mov	r3, r0
24058342:	2b00      	cmp	r3, #0
24058344:	d00c      	beq.n	24058360 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
24058346:	687b      	ldr	r3, [r7, #4]
24058348:	681b      	ldr	r3, [r3, #0]
2405834a:	4618      	mov	r0, r3
2405834c:	f7fe fd97 	bl	24056e7e <LL_ADC_IsDisableOngoing>
24058350:	4603      	mov	r3, r0
24058352:	2b00      	cmp	r3, #0
24058354:	d104      	bne.n	24058360 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
24058356:	687b      	ldr	r3, [r7, #4]
24058358:	681b      	ldr	r3, [r3, #0]
2405835a:	4618      	mov	r0, r3
2405835c:	f7fe fdde 	bl	24056f1c <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
24058360:	69bb      	ldr	r3, [r7, #24]
24058362:	2b02      	cmp	r3, #2
24058364:	d005      	beq.n	24058372 <ADC_ConversionStop+0x10e>
24058366:	69bb      	ldr	r3, [r7, #24]
24058368:	2b03      	cmp	r3, #3
2405836a:	d105      	bne.n	24058378 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
2405836c:	230c      	movs	r3, #12
2405836e:	617b      	str	r3, [r7, #20]
        break;
24058370:	e005      	b.n	2405837e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
24058372:	2308      	movs	r3, #8
24058374:	617b      	str	r3, [r7, #20]
        break;
24058376:	e002      	b.n	2405837e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
24058378:	2304      	movs	r3, #4
2405837a:	617b      	str	r3, [r7, #20]
        break;
2405837c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
2405837e:	f7fe fb7f 	bl	24056a80 <HAL_GetTick>
24058382:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
24058384:	e01b      	b.n	240583be <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
24058386:	f7fe fb7b 	bl	24056a80 <HAL_GetTick>
2405838a:	4602      	mov	r2, r0
2405838c:	68bb      	ldr	r3, [r7, #8]
2405838e:	1ad3      	subs	r3, r2, r3
24058390:	2b05      	cmp	r3, #5
24058392:	d914      	bls.n	240583be <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
24058394:	687b      	ldr	r3, [r7, #4]
24058396:	681b      	ldr	r3, [r3, #0]
24058398:	689a      	ldr	r2, [r3, #8]
2405839a:	697b      	ldr	r3, [r7, #20]
2405839c:	4013      	ands	r3, r2
2405839e:	2b00      	cmp	r3, #0
240583a0:	d00d      	beq.n	240583be <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
240583a2:	687b      	ldr	r3, [r7, #4]
240583a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
240583a6:	f043 0210 	orr.w	r2, r3, #16
240583aa:	687b      	ldr	r3, [r7, #4]
240583ac:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
240583ae:	687b      	ldr	r3, [r7, #4]
240583b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
240583b2:	f043 0201 	orr.w	r2, r3, #1
240583b6:	687b      	ldr	r3, [r7, #4]
240583b8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
240583ba:	2301      	movs	r3, #1
240583bc:	e007      	b.n	240583ce <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
240583be:	687b      	ldr	r3, [r7, #4]
240583c0:	681b      	ldr	r3, [r3, #0]
240583c2:	689a      	ldr	r2, [r3, #8]
240583c4:	697b      	ldr	r3, [r7, #20]
240583c6:	4013      	ands	r3, r2
240583c8:	2b00      	cmp	r3, #0
240583ca:	d1dc      	bne.n	24058386 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
240583cc:	2300      	movs	r3, #0
}
240583ce:	4618      	mov	r0, r3
240583d0:	3720      	adds	r7, #32
240583d2:	46bd      	mov	sp, r7
240583d4:	bd80      	pop	{r7, pc}
240583d6:	bf00      	nop
240583d8:	000cdbff 	.word	0x000cdbff

240583dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
240583dc:	b580      	push	{r7, lr}
240583de:	b084      	sub	sp, #16
240583e0:	af00      	add	r7, sp, #0
240583e2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
240583e4:	687b      	ldr	r3, [r7, #4]
240583e6:	681b      	ldr	r3, [r3, #0]
240583e8:	4618      	mov	r0, r3
240583ea:	f7fe fd35 	bl	24056e58 <LL_ADC_IsEnabled>
240583ee:	4603      	mov	r3, r0
240583f0:	2b00      	cmp	r3, #0
240583f2:	d161      	bne.n	240584b8 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
240583f4:	687b      	ldr	r3, [r7, #4]
240583f6:	681b      	ldr	r3, [r3, #0]
240583f8:	689a      	ldr	r2, [r3, #8]
240583fa:	4b32      	ldr	r3, [pc, #200]	@ (240584c4 <ADC_Enable+0xe8>)
240583fc:	4013      	ands	r3, r2
240583fe:	2b00      	cmp	r3, #0
24058400:	d00d      	beq.n	2405841e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
24058402:	687b      	ldr	r3, [r7, #4]
24058404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24058406:	f043 0210 	orr.w	r2, r3, #16
2405840a:	687b      	ldr	r3, [r7, #4]
2405840c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2405840e:	687b      	ldr	r3, [r7, #4]
24058410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
24058412:	f043 0201 	orr.w	r2, r3, #1
24058416:	687b      	ldr	r3, [r7, #4]
24058418:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
2405841a:	2301      	movs	r3, #1
2405841c:	e04d      	b.n	240584ba <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
2405841e:	687b      	ldr	r3, [r7, #4]
24058420:	681b      	ldr	r3, [r3, #0]
24058422:	4618      	mov	r0, r3
24058424:	f7fe fcf0 	bl	24056e08 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
24058428:	f7fe fb2a 	bl	24056a80 <HAL_GetTick>
2405842c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
2405842e:	4826      	ldr	r0, [pc, #152]	@ (240584c8 <ADC_Enable+0xec>)
24058430:	f7fe fc80 	bl	24056d34 <LL_ADC_GetMultimode>
24058434:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
24058436:	687b      	ldr	r3, [r7, #4]
24058438:	681b      	ldr	r3, [r3, #0]
2405843a:	4a24      	ldr	r2, [pc, #144]	@ (240584cc <ADC_Enable+0xf0>)
2405843c:	4293      	cmp	r3, r2
2405843e:	d002      	beq.n	24058446 <ADC_Enable+0x6a>
24058440:	687b      	ldr	r3, [r7, #4]
24058442:	681b      	ldr	r3, [r3, #0]
24058444:	e000      	b.n	24058448 <ADC_Enable+0x6c>
24058446:	4b22      	ldr	r3, [pc, #136]	@ (240584d0 <ADC_Enable+0xf4>)
24058448:	687a      	ldr	r2, [r7, #4]
2405844a:	6812      	ldr	r2, [r2, #0]
2405844c:	4293      	cmp	r3, r2
2405844e:	d02c      	beq.n	240584aa <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
24058450:	68bb      	ldr	r3, [r7, #8]
24058452:	2b00      	cmp	r3, #0
24058454:	d130      	bne.n	240584b8 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
24058456:	e028      	b.n	240584aa <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
24058458:	687b      	ldr	r3, [r7, #4]
2405845a:	681b      	ldr	r3, [r3, #0]
2405845c:	4618      	mov	r0, r3
2405845e:	f7fe fcfb 	bl	24056e58 <LL_ADC_IsEnabled>
24058462:	4603      	mov	r3, r0
24058464:	2b00      	cmp	r3, #0
24058466:	d104      	bne.n	24058472 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
24058468:	687b      	ldr	r3, [r7, #4]
2405846a:	681b      	ldr	r3, [r3, #0]
2405846c:	4618      	mov	r0, r3
2405846e:	f7fe fccb 	bl	24056e08 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
24058472:	f7fe fb05 	bl	24056a80 <HAL_GetTick>
24058476:	4602      	mov	r2, r0
24058478:	68fb      	ldr	r3, [r7, #12]
2405847a:	1ad3      	subs	r3, r2, r3
2405847c:	2b02      	cmp	r3, #2
2405847e:	d914      	bls.n	240584aa <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
24058480:	687b      	ldr	r3, [r7, #4]
24058482:	681b      	ldr	r3, [r3, #0]
24058484:	681b      	ldr	r3, [r3, #0]
24058486:	f003 0301 	and.w	r3, r3, #1
2405848a:	2b01      	cmp	r3, #1
2405848c:	d00d      	beq.n	240584aa <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
2405848e:	687b      	ldr	r3, [r7, #4]
24058490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24058492:	f043 0210 	orr.w	r2, r3, #16
24058496:	687b      	ldr	r3, [r7, #4]
24058498:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2405849a:	687b      	ldr	r3, [r7, #4]
2405849c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
2405849e:	f043 0201 	orr.w	r2, r3, #1
240584a2:	687b      	ldr	r3, [r7, #4]
240584a4:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
240584a6:	2301      	movs	r3, #1
240584a8:	e007      	b.n	240584ba <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
240584aa:	687b      	ldr	r3, [r7, #4]
240584ac:	681b      	ldr	r3, [r3, #0]
240584ae:	681b      	ldr	r3, [r3, #0]
240584b0:	f003 0301 	and.w	r3, r3, #1
240584b4:	2b01      	cmp	r3, #1
240584b6:	d1cf      	bne.n	24058458 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
240584b8:	2300      	movs	r3, #0
}
240584ba:	4618      	mov	r0, r3
240584bc:	3710      	adds	r7, #16
240584be:	46bd      	mov	sp, r7
240584c0:	bd80      	pop	{r7, pc}
240584c2:	bf00      	nop
240584c4:	8000003f 	.word	0x8000003f
240584c8:	40022300 	.word	0x40022300
240584cc:	40022100 	.word	0x40022100
240584d0:	40022000 	.word	0x40022000

240584d4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
240584d4:	b580      	push	{r7, lr}
240584d6:	b084      	sub	sp, #16
240584d8:	af00      	add	r7, sp, #0
240584da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
240584dc:	687b      	ldr	r3, [r7, #4]
240584de:	681b      	ldr	r3, [r3, #0]
240584e0:	4618      	mov	r0, r3
240584e2:	f7fe fccc 	bl	24056e7e <LL_ADC_IsDisableOngoing>
240584e6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
240584e8:	687b      	ldr	r3, [r7, #4]
240584ea:	681b      	ldr	r3, [r3, #0]
240584ec:	4618      	mov	r0, r3
240584ee:	f7fe fcb3 	bl	24056e58 <LL_ADC_IsEnabled>
240584f2:	4603      	mov	r3, r0
240584f4:	2b00      	cmp	r3, #0
240584f6:	d047      	beq.n	24058588 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
240584f8:	68fb      	ldr	r3, [r7, #12]
240584fa:	2b00      	cmp	r3, #0
240584fc:	d144      	bne.n	24058588 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
240584fe:	687b      	ldr	r3, [r7, #4]
24058500:	681b      	ldr	r3, [r3, #0]
24058502:	689b      	ldr	r3, [r3, #8]
24058504:	f003 030d 	and.w	r3, r3, #13
24058508:	2b01      	cmp	r3, #1
2405850a:	d10c      	bne.n	24058526 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
2405850c:	687b      	ldr	r3, [r7, #4]
2405850e:	681b      	ldr	r3, [r3, #0]
24058510:	4618      	mov	r0, r3
24058512:	f7fe fc8d 	bl	24056e30 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
24058516:	687b      	ldr	r3, [r7, #4]
24058518:	681b      	ldr	r3, [r3, #0]
2405851a:	2203      	movs	r2, #3
2405851c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
2405851e:	f7fe faaf 	bl	24056a80 <HAL_GetTick>
24058522:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
24058524:	e029      	b.n	2405857a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
24058526:	687b      	ldr	r3, [r7, #4]
24058528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
2405852a:	f043 0210 	orr.w	r2, r3, #16
2405852e:	687b      	ldr	r3, [r7, #4]
24058530:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
24058532:	687b      	ldr	r3, [r7, #4]
24058534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
24058536:	f043 0201 	orr.w	r2, r3, #1
2405853a:	687b      	ldr	r3, [r7, #4]
2405853c:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
2405853e:	2301      	movs	r3, #1
24058540:	e023      	b.n	2405858a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
24058542:	f7fe fa9d 	bl	24056a80 <HAL_GetTick>
24058546:	4602      	mov	r2, r0
24058548:	68bb      	ldr	r3, [r7, #8]
2405854a:	1ad3      	subs	r3, r2, r3
2405854c:	2b02      	cmp	r3, #2
2405854e:	d914      	bls.n	2405857a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
24058550:	687b      	ldr	r3, [r7, #4]
24058552:	681b      	ldr	r3, [r3, #0]
24058554:	689b      	ldr	r3, [r3, #8]
24058556:	f003 0301 	and.w	r3, r3, #1
2405855a:	2b00      	cmp	r3, #0
2405855c:	d00d      	beq.n	2405857a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
2405855e:	687b      	ldr	r3, [r7, #4]
24058560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24058562:	f043 0210 	orr.w	r2, r3, #16
24058566:	687b      	ldr	r3, [r7, #4]
24058568:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2405856a:	687b      	ldr	r3, [r7, #4]
2405856c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
2405856e:	f043 0201 	orr.w	r2, r3, #1
24058572:	687b      	ldr	r3, [r7, #4]
24058574:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
24058576:	2301      	movs	r3, #1
24058578:	e007      	b.n	2405858a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
2405857a:	687b      	ldr	r3, [r7, #4]
2405857c:	681b      	ldr	r3, [r3, #0]
2405857e:	689b      	ldr	r3, [r3, #8]
24058580:	f003 0301 	and.w	r3, r3, #1
24058584:	2b00      	cmp	r3, #0
24058586:	d1dc      	bne.n	24058542 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
24058588:	2300      	movs	r3, #0
}
2405858a:	4618      	mov	r0, r3
2405858c:	3710      	adds	r7, #16
2405858e:	46bd      	mov	sp, r7
24058590:	bd80      	pop	{r7, pc}
	...

24058594 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
24058594:	b580      	push	{r7, lr}
24058596:	b084      	sub	sp, #16
24058598:	af00      	add	r7, sp, #0
2405859a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
2405859c:	4b60      	ldr	r3, [pc, #384]	@ (24058720 <ADC_ConfigureBoostMode+0x18c>)
2405859e:	689b      	ldr	r3, [r3, #8]
240585a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
240585a4:	2b00      	cmp	r3, #0
240585a6:	d01c      	beq.n	240585e2 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
240585a8:	f006 fd92 	bl	2405f0d0 <HAL_RCC_GetHCLKFreq>
240585ac:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
240585ae:	687b      	ldr	r3, [r7, #4]
240585b0:	685b      	ldr	r3, [r3, #4]
240585b2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
240585b6:	d010      	beq.n	240585da <ADC_ConfigureBoostMode+0x46>
240585b8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
240585bc:	d873      	bhi.n	240586a6 <ADC_ConfigureBoostMode+0x112>
240585be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
240585c2:	d002      	beq.n	240585ca <ADC_ConfigureBoostMode+0x36>
240585c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
240585c8:	d16d      	bne.n	240586a6 <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
240585ca:	687b      	ldr	r3, [r7, #4]
240585cc:	685b      	ldr	r3, [r3, #4]
240585ce:	0c1b      	lsrs	r3, r3, #16
240585d0:	68fa      	ldr	r2, [r7, #12]
240585d2:	fbb2 f3f3 	udiv	r3, r2, r3
240585d6:	60fb      	str	r3, [r7, #12]
        break;
240585d8:	e068      	b.n	240586ac <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
240585da:	68fb      	ldr	r3, [r7, #12]
240585dc:	089b      	lsrs	r3, r3, #2
240585de:	60fb      	str	r3, [r7, #12]
        break;
240585e0:	e064      	b.n	240586ac <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
240585e2:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
240585e6:	f04f 0100 	mov.w	r1, #0
240585ea:	f007 ff75 	bl	240604d8 <HAL_RCCEx_GetPeriphCLKFreq>
240585ee:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
240585f0:	687b      	ldr	r3, [r7, #4]
240585f2:	685b      	ldr	r3, [r3, #4]
240585f4:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
240585f8:	d051      	beq.n	2405869e <ADC_ConfigureBoostMode+0x10a>
240585fa:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
240585fe:	d854      	bhi.n	240586aa <ADC_ConfigureBoostMode+0x116>
24058600:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
24058604:	d047      	beq.n	24058696 <ADC_ConfigureBoostMode+0x102>
24058606:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
2405860a:	d84e      	bhi.n	240586aa <ADC_ConfigureBoostMode+0x116>
2405860c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
24058610:	d03d      	beq.n	2405868e <ADC_ConfigureBoostMode+0xfa>
24058612:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
24058616:	d848      	bhi.n	240586aa <ADC_ConfigureBoostMode+0x116>
24058618:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
2405861c:	d033      	beq.n	24058686 <ADC_ConfigureBoostMode+0xf2>
2405861e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
24058622:	d842      	bhi.n	240586aa <ADC_ConfigureBoostMode+0x116>
24058624:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
24058628:	d029      	beq.n	2405867e <ADC_ConfigureBoostMode+0xea>
2405862a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
2405862e:	d83c      	bhi.n	240586aa <ADC_ConfigureBoostMode+0x116>
24058630:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
24058634:	d01a      	beq.n	2405866c <ADC_ConfigureBoostMode+0xd8>
24058636:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
2405863a:	d836      	bhi.n	240586aa <ADC_ConfigureBoostMode+0x116>
2405863c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
24058640:	d014      	beq.n	2405866c <ADC_ConfigureBoostMode+0xd8>
24058642:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
24058646:	d830      	bhi.n	240586aa <ADC_ConfigureBoostMode+0x116>
24058648:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
2405864c:	d00e      	beq.n	2405866c <ADC_ConfigureBoostMode+0xd8>
2405864e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
24058652:	d82a      	bhi.n	240586aa <ADC_ConfigureBoostMode+0x116>
24058654:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
24058658:	d008      	beq.n	2405866c <ADC_ConfigureBoostMode+0xd8>
2405865a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
2405865e:	d824      	bhi.n	240586aa <ADC_ConfigureBoostMode+0x116>
24058660:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
24058664:	d002      	beq.n	2405866c <ADC_ConfigureBoostMode+0xd8>
24058666:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
2405866a:	d11e      	bne.n	240586aa <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
2405866c:	687b      	ldr	r3, [r7, #4]
2405866e:	685b      	ldr	r3, [r3, #4]
24058670:	0c9b      	lsrs	r3, r3, #18
24058672:	005b      	lsls	r3, r3, #1
24058674:	68fa      	ldr	r2, [r7, #12]
24058676:	fbb2 f3f3 	udiv	r3, r2, r3
2405867a:	60fb      	str	r3, [r7, #12]
        break;
2405867c:	e016      	b.n	240586ac <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
2405867e:	68fb      	ldr	r3, [r7, #12]
24058680:	091b      	lsrs	r3, r3, #4
24058682:	60fb      	str	r3, [r7, #12]
        break;
24058684:	e012      	b.n	240586ac <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
24058686:	68fb      	ldr	r3, [r7, #12]
24058688:	095b      	lsrs	r3, r3, #5
2405868a:	60fb      	str	r3, [r7, #12]
        break;
2405868c:	e00e      	b.n	240586ac <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
2405868e:	68fb      	ldr	r3, [r7, #12]
24058690:	099b      	lsrs	r3, r3, #6
24058692:	60fb      	str	r3, [r7, #12]
        break;
24058694:	e00a      	b.n	240586ac <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
24058696:	68fb      	ldr	r3, [r7, #12]
24058698:	09db      	lsrs	r3, r3, #7
2405869a:	60fb      	str	r3, [r7, #12]
        break;
2405869c:	e006      	b.n	240586ac <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
2405869e:	68fb      	ldr	r3, [r7, #12]
240586a0:	0a1b      	lsrs	r3, r3, #8
240586a2:	60fb      	str	r3, [r7, #12]
        break;
240586a4:	e002      	b.n	240586ac <ADC_ConfigureBoostMode+0x118>
        break;
240586a6:	bf00      	nop
240586a8:	e000      	b.n	240586ac <ADC_ConfigureBoostMode+0x118>
      default:
        break;
240586aa:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
240586ac:	68fb      	ldr	r3, [r7, #12]
240586ae:	085b      	lsrs	r3, r3, #1
240586b0:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
240586b2:	68fb      	ldr	r3, [r7, #12]
240586b4:	4a1b      	ldr	r2, [pc, #108]	@ (24058724 <ADC_ConfigureBoostMode+0x190>)
240586b6:	4293      	cmp	r3, r2
240586b8:	d808      	bhi.n	240586cc <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
240586ba:	687b      	ldr	r3, [r7, #4]
240586bc:	681b      	ldr	r3, [r3, #0]
240586be:	689a      	ldr	r2, [r3, #8]
240586c0:	687b      	ldr	r3, [r7, #4]
240586c2:	681b      	ldr	r3, [r3, #0]
240586c4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
240586c8:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
240586ca:	e025      	b.n	24058718 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
240586cc:	68fb      	ldr	r3, [r7, #12]
240586ce:	4a16      	ldr	r2, [pc, #88]	@ (24058728 <ADC_ConfigureBoostMode+0x194>)
240586d0:	4293      	cmp	r3, r2
240586d2:	d80a      	bhi.n	240586ea <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
240586d4:	687b      	ldr	r3, [r7, #4]
240586d6:	681b      	ldr	r3, [r3, #0]
240586d8:	689b      	ldr	r3, [r3, #8]
240586da:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
240586de:	687b      	ldr	r3, [r7, #4]
240586e0:	681b      	ldr	r3, [r3, #0]
240586e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
240586e6:	609a      	str	r2, [r3, #8]
}
240586e8:	e016      	b.n	24058718 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
240586ea:	68fb      	ldr	r3, [r7, #12]
240586ec:	4a0f      	ldr	r2, [pc, #60]	@ (2405872c <ADC_ConfigureBoostMode+0x198>)
240586ee:	4293      	cmp	r3, r2
240586f0:	d80a      	bhi.n	24058708 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
240586f2:	687b      	ldr	r3, [r7, #4]
240586f4:	681b      	ldr	r3, [r3, #0]
240586f6:	689b      	ldr	r3, [r3, #8]
240586f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
240586fc:	687b      	ldr	r3, [r7, #4]
240586fe:	681b      	ldr	r3, [r3, #0]
24058700:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
24058704:	609a      	str	r2, [r3, #8]
}
24058706:	e007      	b.n	24058718 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
24058708:	687b      	ldr	r3, [r7, #4]
2405870a:	681b      	ldr	r3, [r3, #0]
2405870c:	689a      	ldr	r2, [r3, #8]
2405870e:	687b      	ldr	r3, [r7, #4]
24058710:	681b      	ldr	r3, [r3, #0]
24058712:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
24058716:	609a      	str	r2, [r3, #8]
}
24058718:	bf00      	nop
2405871a:	3710      	adds	r7, #16
2405871c:	46bd      	mov	sp, r7
2405871e:	bd80      	pop	{r7, pc}
24058720:	40022300 	.word	0x40022300
24058724:	005f5e10 	.word	0x005f5e10
24058728:	00bebc20 	.word	0x00bebc20
2405872c:	017d7840 	.word	0x017d7840

24058730 <LL_ADC_IsEnabled>:
{
24058730:	b480      	push	{r7}
24058732:	b083      	sub	sp, #12
24058734:	af00      	add	r7, sp, #0
24058736:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
24058738:	687b      	ldr	r3, [r7, #4]
2405873a:	689b      	ldr	r3, [r3, #8]
2405873c:	f003 0301 	and.w	r3, r3, #1
24058740:	2b01      	cmp	r3, #1
24058742:	d101      	bne.n	24058748 <LL_ADC_IsEnabled+0x18>
24058744:	2301      	movs	r3, #1
24058746:	e000      	b.n	2405874a <LL_ADC_IsEnabled+0x1a>
24058748:	2300      	movs	r3, #0
}
2405874a:	4618      	mov	r0, r3
2405874c:	370c      	adds	r7, #12
2405874e:	46bd      	mov	sp, r7
24058750:	f85d 7b04 	ldr.w	r7, [sp], #4
24058754:	4770      	bx	lr

24058756 <LL_ADC_REG_IsConversionOngoing>:
{
24058756:	b480      	push	{r7}
24058758:	b083      	sub	sp, #12
2405875a:	af00      	add	r7, sp, #0
2405875c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
2405875e:	687b      	ldr	r3, [r7, #4]
24058760:	689b      	ldr	r3, [r3, #8]
24058762:	f003 0304 	and.w	r3, r3, #4
24058766:	2b04      	cmp	r3, #4
24058768:	d101      	bne.n	2405876e <LL_ADC_REG_IsConversionOngoing+0x18>
2405876a:	2301      	movs	r3, #1
2405876c:	e000      	b.n	24058770 <LL_ADC_REG_IsConversionOngoing+0x1a>
2405876e:	2300      	movs	r3, #0
}
24058770:	4618      	mov	r0, r3
24058772:	370c      	adds	r7, #12
24058774:	46bd      	mov	sp, r7
24058776:	f85d 7b04 	ldr.w	r7, [sp], #4
2405877a:	4770      	bx	lr

2405877c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
2405877c:	b480      	push	{r7}
2405877e:	b083      	sub	sp, #12
24058780:	af00      	add	r7, sp, #0
24058782:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
24058784:	bf00      	nop
24058786:	370c      	adds	r7, #12
24058788:	46bd      	mov	sp, r7
2405878a:	f85d 7b04 	ldr.w	r7, [sp], #4
2405878e:	4770      	bx	lr

24058790 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
24058790:	b480      	push	{r7}
24058792:	b083      	sub	sp, #12
24058794:	af00      	add	r7, sp, #0
24058796:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
24058798:	bf00      	nop
2405879a:	370c      	adds	r7, #12
2405879c:	46bd      	mov	sp, r7
2405879e:	f85d 7b04 	ldr.w	r7, [sp], #4
240587a2:	4770      	bx	lr

240587a4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
240587a4:	b480      	push	{r7}
240587a6:	b083      	sub	sp, #12
240587a8:	af00      	add	r7, sp, #0
240587aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
240587ac:	bf00      	nop
240587ae:	370c      	adds	r7, #12
240587b0:	46bd      	mov	sp, r7
240587b2:	f85d 7b04 	ldr.w	r7, [sp], #4
240587b6:	4770      	bx	lr

240587b8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
240587b8:	b480      	push	{r7}
240587ba:	b083      	sub	sp, #12
240587bc:	af00      	add	r7, sp, #0
240587be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
240587c0:	bf00      	nop
240587c2:	370c      	adds	r7, #12
240587c4:	46bd      	mov	sp, r7
240587c6:	f85d 7b04 	ldr.w	r7, [sp], #4
240587ca:	4770      	bx	lr

240587cc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
240587cc:	b480      	push	{r7}
240587ce:	b083      	sub	sp, #12
240587d0:	af00      	add	r7, sp, #0
240587d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
240587d4:	bf00      	nop
240587d6:	370c      	adds	r7, #12
240587d8:	46bd      	mov	sp, r7
240587da:	f85d 7b04 	ldr.w	r7, [sp], #4
240587de:	4770      	bx	lr

240587e0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
240587e0:	b590      	push	{r4, r7, lr}
240587e2:	b09f      	sub	sp, #124	@ 0x7c
240587e4:	af00      	add	r7, sp, #0
240587e6:	6078      	str	r0, [r7, #4]
240587e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
240587ea:	2300      	movs	r3, #0
240587ec:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
240587f0:	687b      	ldr	r3, [r7, #4]
240587f2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
240587f6:	2b01      	cmp	r3, #1
240587f8:	d101      	bne.n	240587fe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
240587fa:	2302      	movs	r3, #2
240587fc:	e080      	b.n	24058900 <HAL_ADCEx_MultiModeConfigChannel+0x120>
240587fe:	687b      	ldr	r3, [r7, #4]
24058800:	2201      	movs	r2, #1
24058802:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
24058806:	2300      	movs	r3, #0
24058808:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
2405880a:	2300      	movs	r3, #0
2405880c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
2405880e:	687b      	ldr	r3, [r7, #4]
24058810:	681b      	ldr	r3, [r3, #0]
24058812:	4a3d      	ldr	r2, [pc, #244]	@ (24058908 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
24058814:	4293      	cmp	r3, r2
24058816:	d102      	bne.n	2405881e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
24058818:	4b3c      	ldr	r3, [pc, #240]	@ (2405890c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
2405881a:	60bb      	str	r3, [r7, #8]
2405881c:	e001      	b.n	24058822 <HAL_ADCEx_MultiModeConfigChannel+0x42>
2405881e:	2300      	movs	r3, #0
24058820:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
24058822:	68bb      	ldr	r3, [r7, #8]
24058824:	2b00      	cmp	r3, #0
24058826:	d10b      	bne.n	24058840 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
24058828:	687b      	ldr	r3, [r7, #4]
2405882a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
2405882c:	f043 0220 	orr.w	r2, r3, #32
24058830:	687b      	ldr	r3, [r7, #4]
24058832:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
24058834:	687b      	ldr	r3, [r7, #4]
24058836:	2200      	movs	r2, #0
24058838:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
2405883c:	2301      	movs	r3, #1
2405883e:	e05f      	b.n	24058900 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
24058840:	68bb      	ldr	r3, [r7, #8]
24058842:	4618      	mov	r0, r3
24058844:	f7ff ff87 	bl	24058756 <LL_ADC_REG_IsConversionOngoing>
24058848:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
2405884a:	687b      	ldr	r3, [r7, #4]
2405884c:	681b      	ldr	r3, [r3, #0]
2405884e:	4618      	mov	r0, r3
24058850:	f7ff ff81 	bl	24058756 <LL_ADC_REG_IsConversionOngoing>
24058854:	4603      	mov	r3, r0
24058856:	2b00      	cmp	r3, #0
24058858:	d141      	bne.n	240588de <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
2405885a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
2405885c:	2b00      	cmp	r3, #0
2405885e:	d13e      	bne.n	240588de <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
24058860:	4b2b      	ldr	r3, [pc, #172]	@ (24058910 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
24058862:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
24058864:	683b      	ldr	r3, [r7, #0]
24058866:	681b      	ldr	r3, [r3, #0]
24058868:	2b00      	cmp	r3, #0
2405886a:	d020      	beq.n	240588ae <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
2405886c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
2405886e:	689b      	ldr	r3, [r3, #8]
24058870:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
24058874:	683b      	ldr	r3, [r7, #0]
24058876:	685b      	ldr	r3, [r3, #4]
24058878:	431a      	orrs	r2, r3
2405887a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
2405887c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
2405887e:	4822      	ldr	r0, [pc, #136]	@ (24058908 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
24058880:	f7ff ff56 	bl	24058730 <LL_ADC_IsEnabled>
24058884:	4604      	mov	r4, r0
24058886:	4821      	ldr	r0, [pc, #132]	@ (2405890c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
24058888:	f7ff ff52 	bl	24058730 <LL_ADC_IsEnabled>
2405888c:	4603      	mov	r3, r0
2405888e:	4323      	orrs	r3, r4
24058890:	2b00      	cmp	r3, #0
24058892:	d12e      	bne.n	240588f2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
24058894:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
24058896:	689a      	ldr	r2, [r3, #8]
24058898:	4b1e      	ldr	r3, [pc, #120]	@ (24058914 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
2405889a:	4013      	ands	r3, r2
2405889c:	683a      	ldr	r2, [r7, #0]
2405889e:	6811      	ldr	r1, [r2, #0]
240588a0:	683a      	ldr	r2, [r7, #0]
240588a2:	6892      	ldr	r2, [r2, #8]
240588a4:	430a      	orrs	r2, r1
240588a6:	431a      	orrs	r2, r3
240588a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
240588aa:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
240588ac:	e021      	b.n	240588f2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
240588ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
240588b0:	689b      	ldr	r3, [r3, #8]
240588b2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
240588b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
240588b8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
240588ba:	4813      	ldr	r0, [pc, #76]	@ (24058908 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
240588bc:	f7ff ff38 	bl	24058730 <LL_ADC_IsEnabled>
240588c0:	4604      	mov	r4, r0
240588c2:	4812      	ldr	r0, [pc, #72]	@ (2405890c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
240588c4:	f7ff ff34 	bl	24058730 <LL_ADC_IsEnabled>
240588c8:	4603      	mov	r3, r0
240588ca:	4323      	orrs	r3, r4
240588cc:	2b00      	cmp	r3, #0
240588ce:	d110      	bne.n	240588f2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
240588d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
240588d2:	689a      	ldr	r2, [r3, #8]
240588d4:	4b0f      	ldr	r3, [pc, #60]	@ (24058914 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
240588d6:	4013      	ands	r3, r2
240588d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
240588da:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
240588dc:	e009      	b.n	240588f2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
240588de:	687b      	ldr	r3, [r7, #4]
240588e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
240588e2:	f043 0220 	orr.w	r2, r3, #32
240588e6:	687b      	ldr	r3, [r7, #4]
240588e8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
240588ea:	2301      	movs	r3, #1
240588ec:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
240588f0:	e000      	b.n	240588f4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
240588f2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
240588f4:	687b      	ldr	r3, [r7, #4]
240588f6:	2200      	movs	r2, #0
240588f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
240588fc:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
24058900:	4618      	mov	r0, r3
24058902:	377c      	adds	r7, #124	@ 0x7c
24058904:	46bd      	mov	sp, r7
24058906:	bd90      	pop	{r4, r7, pc}
24058908:	40022000 	.word	0x40022000
2405890c:	40022100 	.word	0x40022100
24058910:	40022300 	.word	0x40022300
24058914:	fffff0e0 	.word	0xfffff0e0

24058918 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
24058918:	b480      	push	{r7}
2405891a:	b085      	sub	sp, #20
2405891c:	af00      	add	r7, sp, #0
2405891e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
24058920:	687b      	ldr	r3, [r7, #4]
24058922:	f003 0307 	and.w	r3, r3, #7
24058926:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
24058928:	4b0b      	ldr	r3, [pc, #44]	@ (24058958 <__NVIC_SetPriorityGrouping+0x40>)
2405892a:	68db      	ldr	r3, [r3, #12]
2405892c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
2405892e:	68ba      	ldr	r2, [r7, #8]
24058930:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
24058934:	4013      	ands	r3, r2
24058936:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
24058938:	68fb      	ldr	r3, [r7, #12]
2405893a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
2405893c:	68bb      	ldr	r3, [r7, #8]
2405893e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
24058940:	4b06      	ldr	r3, [pc, #24]	@ (2405895c <__NVIC_SetPriorityGrouping+0x44>)
24058942:	4313      	orrs	r3, r2
24058944:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
24058946:	4a04      	ldr	r2, [pc, #16]	@ (24058958 <__NVIC_SetPriorityGrouping+0x40>)
24058948:	68bb      	ldr	r3, [r7, #8]
2405894a:	60d3      	str	r3, [r2, #12]
}
2405894c:	bf00      	nop
2405894e:	3714      	adds	r7, #20
24058950:	46bd      	mov	sp, r7
24058952:	f85d 7b04 	ldr.w	r7, [sp], #4
24058956:	4770      	bx	lr
24058958:	e000ed00 	.word	0xe000ed00
2405895c:	05fa0000 	.word	0x05fa0000

24058960 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
24058960:	b480      	push	{r7}
24058962:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
24058964:	4b04      	ldr	r3, [pc, #16]	@ (24058978 <__NVIC_GetPriorityGrouping+0x18>)
24058966:	68db      	ldr	r3, [r3, #12]
24058968:	0a1b      	lsrs	r3, r3, #8
2405896a:	f003 0307 	and.w	r3, r3, #7
}
2405896e:	4618      	mov	r0, r3
24058970:	46bd      	mov	sp, r7
24058972:	f85d 7b04 	ldr.w	r7, [sp], #4
24058976:	4770      	bx	lr
24058978:	e000ed00 	.word	0xe000ed00

2405897c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
2405897c:	b480      	push	{r7}
2405897e:	b083      	sub	sp, #12
24058980:	af00      	add	r7, sp, #0
24058982:	4603      	mov	r3, r0
24058984:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
24058986:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
2405898a:	2b00      	cmp	r3, #0
2405898c:	db0b      	blt.n	240589a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
2405898e:	88fb      	ldrh	r3, [r7, #6]
24058990:	f003 021f 	and.w	r2, r3, #31
24058994:	4907      	ldr	r1, [pc, #28]	@ (240589b4 <__NVIC_EnableIRQ+0x38>)
24058996:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
2405899a:	095b      	lsrs	r3, r3, #5
2405899c:	2001      	movs	r0, #1
2405899e:	fa00 f202 	lsl.w	r2, r0, r2
240589a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
240589a6:	bf00      	nop
240589a8:	370c      	adds	r7, #12
240589aa:	46bd      	mov	sp, r7
240589ac:	f85d 7b04 	ldr.w	r7, [sp], #4
240589b0:	4770      	bx	lr
240589b2:	bf00      	nop
240589b4:	e000e100 	.word	0xe000e100

240589b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
240589b8:	b480      	push	{r7}
240589ba:	b083      	sub	sp, #12
240589bc:	af00      	add	r7, sp, #0
240589be:	4603      	mov	r3, r0
240589c0:	6039      	str	r1, [r7, #0]
240589c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
240589c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
240589c8:	2b00      	cmp	r3, #0
240589ca:	db0a      	blt.n	240589e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
240589cc:	683b      	ldr	r3, [r7, #0]
240589ce:	b2da      	uxtb	r2, r3
240589d0:	490c      	ldr	r1, [pc, #48]	@ (24058a04 <__NVIC_SetPriority+0x4c>)
240589d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
240589d6:	0112      	lsls	r2, r2, #4
240589d8:	b2d2      	uxtb	r2, r2
240589da:	440b      	add	r3, r1
240589dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
240589e0:	e00a      	b.n	240589f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
240589e2:	683b      	ldr	r3, [r7, #0]
240589e4:	b2da      	uxtb	r2, r3
240589e6:	4908      	ldr	r1, [pc, #32]	@ (24058a08 <__NVIC_SetPriority+0x50>)
240589e8:	88fb      	ldrh	r3, [r7, #6]
240589ea:	f003 030f 	and.w	r3, r3, #15
240589ee:	3b04      	subs	r3, #4
240589f0:	0112      	lsls	r2, r2, #4
240589f2:	b2d2      	uxtb	r2, r2
240589f4:	440b      	add	r3, r1
240589f6:	761a      	strb	r2, [r3, #24]
}
240589f8:	bf00      	nop
240589fa:	370c      	adds	r7, #12
240589fc:	46bd      	mov	sp, r7
240589fe:	f85d 7b04 	ldr.w	r7, [sp], #4
24058a02:	4770      	bx	lr
24058a04:	e000e100 	.word	0xe000e100
24058a08:	e000ed00 	.word	0xe000ed00

24058a0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
24058a0c:	b480      	push	{r7}
24058a0e:	b089      	sub	sp, #36	@ 0x24
24058a10:	af00      	add	r7, sp, #0
24058a12:	60f8      	str	r0, [r7, #12]
24058a14:	60b9      	str	r1, [r7, #8]
24058a16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
24058a18:	68fb      	ldr	r3, [r7, #12]
24058a1a:	f003 0307 	and.w	r3, r3, #7
24058a1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
24058a20:	69fb      	ldr	r3, [r7, #28]
24058a22:	f1c3 0307 	rsb	r3, r3, #7
24058a26:	2b04      	cmp	r3, #4
24058a28:	bf28      	it	cs
24058a2a:	2304      	movcs	r3, #4
24058a2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
24058a2e:	69fb      	ldr	r3, [r7, #28]
24058a30:	3304      	adds	r3, #4
24058a32:	2b06      	cmp	r3, #6
24058a34:	d902      	bls.n	24058a3c <NVIC_EncodePriority+0x30>
24058a36:	69fb      	ldr	r3, [r7, #28]
24058a38:	3b03      	subs	r3, #3
24058a3a:	e000      	b.n	24058a3e <NVIC_EncodePriority+0x32>
24058a3c:	2300      	movs	r3, #0
24058a3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
24058a40:	f04f 32ff 	mov.w	r2, #4294967295
24058a44:	69bb      	ldr	r3, [r7, #24]
24058a46:	fa02 f303 	lsl.w	r3, r2, r3
24058a4a:	43da      	mvns	r2, r3
24058a4c:	68bb      	ldr	r3, [r7, #8]
24058a4e:	401a      	ands	r2, r3
24058a50:	697b      	ldr	r3, [r7, #20]
24058a52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
24058a54:	f04f 31ff 	mov.w	r1, #4294967295
24058a58:	697b      	ldr	r3, [r7, #20]
24058a5a:	fa01 f303 	lsl.w	r3, r1, r3
24058a5e:	43d9      	mvns	r1, r3
24058a60:	687b      	ldr	r3, [r7, #4]
24058a62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
24058a64:	4313      	orrs	r3, r2
         );
}
24058a66:	4618      	mov	r0, r3
24058a68:	3724      	adds	r7, #36	@ 0x24
24058a6a:	46bd      	mov	sp, r7
24058a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
24058a70:	4770      	bx	lr
	...

24058a74 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
24058a74:	b480      	push	{r7}
24058a76:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
24058a78:	f3bf 8f4f 	dsb	sy
}
24058a7c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
24058a7e:	4b06      	ldr	r3, [pc, #24]	@ (24058a98 <__NVIC_SystemReset+0x24>)
24058a80:	68db      	ldr	r3, [r3, #12]
24058a82:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
24058a86:	4904      	ldr	r1, [pc, #16]	@ (24058a98 <__NVIC_SystemReset+0x24>)
24058a88:	4b04      	ldr	r3, [pc, #16]	@ (24058a9c <__NVIC_SystemReset+0x28>)
24058a8a:	4313      	orrs	r3, r2
24058a8c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
24058a8e:	f3bf 8f4f 	dsb	sy
}
24058a92:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
24058a94:	bf00      	nop
24058a96:	e7fd      	b.n	24058a94 <__NVIC_SystemReset+0x20>
24058a98:	e000ed00 	.word	0xe000ed00
24058a9c:	05fa0004 	.word	0x05fa0004

24058aa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
24058aa0:	b580      	push	{r7, lr}
24058aa2:	b082      	sub	sp, #8
24058aa4:	af00      	add	r7, sp, #0
24058aa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
24058aa8:	687b      	ldr	r3, [r7, #4]
24058aaa:	3b01      	subs	r3, #1
24058aac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
24058ab0:	d301      	bcc.n	24058ab6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
24058ab2:	2301      	movs	r3, #1
24058ab4:	e00f      	b.n	24058ad6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
24058ab6:	4a0a      	ldr	r2, [pc, #40]	@ (24058ae0 <SysTick_Config+0x40>)
24058ab8:	687b      	ldr	r3, [r7, #4]
24058aba:	3b01      	subs	r3, #1
24058abc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
24058abe:	210f      	movs	r1, #15
24058ac0:	f04f 30ff 	mov.w	r0, #4294967295
24058ac4:	f7ff ff78 	bl	240589b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
24058ac8:	4b05      	ldr	r3, [pc, #20]	@ (24058ae0 <SysTick_Config+0x40>)
24058aca:	2200      	movs	r2, #0
24058acc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
24058ace:	4b04      	ldr	r3, [pc, #16]	@ (24058ae0 <SysTick_Config+0x40>)
24058ad0:	2207      	movs	r2, #7
24058ad2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
24058ad4:	2300      	movs	r3, #0
}
24058ad6:	4618      	mov	r0, r3
24058ad8:	3708      	adds	r7, #8
24058ada:	46bd      	mov	sp, r7
24058adc:	bd80      	pop	{r7, pc}
24058ade:	bf00      	nop
24058ae0:	e000e010 	.word	0xe000e010

24058ae4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
24058ae4:	b580      	push	{r7, lr}
24058ae6:	b082      	sub	sp, #8
24058ae8:	af00      	add	r7, sp, #0
24058aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
24058aec:	6878      	ldr	r0, [r7, #4]
24058aee:	f7ff ff13 	bl	24058918 <__NVIC_SetPriorityGrouping>
}
24058af2:	bf00      	nop
24058af4:	3708      	adds	r7, #8
24058af6:	46bd      	mov	sp, r7
24058af8:	bd80      	pop	{r7, pc}

24058afa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
24058afa:	b580      	push	{r7, lr}
24058afc:	b086      	sub	sp, #24
24058afe:	af00      	add	r7, sp, #0
24058b00:	4603      	mov	r3, r0
24058b02:	60b9      	str	r1, [r7, #8]
24058b04:	607a      	str	r2, [r7, #4]
24058b06:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
24058b08:	f7ff ff2a 	bl	24058960 <__NVIC_GetPriorityGrouping>
24058b0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
24058b0e:	687a      	ldr	r2, [r7, #4]
24058b10:	68b9      	ldr	r1, [r7, #8]
24058b12:	6978      	ldr	r0, [r7, #20]
24058b14:	f7ff ff7a 	bl	24058a0c <NVIC_EncodePriority>
24058b18:	4602      	mov	r2, r0
24058b1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
24058b1e:	4611      	mov	r1, r2
24058b20:	4618      	mov	r0, r3
24058b22:	f7ff ff49 	bl	240589b8 <__NVIC_SetPriority>
}
24058b26:	bf00      	nop
24058b28:	3718      	adds	r7, #24
24058b2a:	46bd      	mov	sp, r7
24058b2c:	bd80      	pop	{r7, pc}

24058b2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
24058b2e:	b580      	push	{r7, lr}
24058b30:	b082      	sub	sp, #8
24058b32:	af00      	add	r7, sp, #0
24058b34:	4603      	mov	r3, r0
24058b36:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
24058b38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24058b3c:	4618      	mov	r0, r3
24058b3e:	f7ff ff1d 	bl	2405897c <__NVIC_EnableIRQ>
}
24058b42:	bf00      	nop
24058b44:	3708      	adds	r7, #8
24058b46:	46bd      	mov	sp, r7
24058b48:	bd80      	pop	{r7, pc}

24058b4a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
24058b4a:	b580      	push	{r7, lr}
24058b4c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
24058b4e:	f7ff ff91 	bl	24058a74 <__NVIC_SystemReset>

24058b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
24058b52:	b580      	push	{r7, lr}
24058b54:	b082      	sub	sp, #8
24058b56:	af00      	add	r7, sp, #0
24058b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
24058b5a:	6878      	ldr	r0, [r7, #4]
24058b5c:	f7ff ffa0 	bl	24058aa0 <SysTick_Config>
24058b60:	4603      	mov	r3, r0
}
24058b62:	4618      	mov	r0, r3
24058b64:	3708      	adds	r7, #8
24058b66:	46bd      	mov	sp, r7
24058b68:	bd80      	pop	{r7, pc}

24058b6a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
24058b6a:	b580      	push	{r7, lr}
24058b6c:	b082      	sub	sp, #8
24058b6e:	af00      	add	r7, sp, #0
24058b70:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
24058b72:	687b      	ldr	r3, [r7, #4]
24058b74:	2b00      	cmp	r3, #0
24058b76:	d101      	bne.n	24058b7c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
24058b78:	2301      	movs	r3, #1
24058b7a:	e014      	b.n	24058ba6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
24058b7c:	687b      	ldr	r3, [r7, #4]
24058b7e:	791b      	ldrb	r3, [r3, #4]
24058b80:	b2db      	uxtb	r3, r3
24058b82:	2b00      	cmp	r3, #0
24058b84:	d105      	bne.n	24058b92 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
24058b86:	687b      	ldr	r3, [r7, #4]
24058b88:	2200      	movs	r2, #0
24058b8a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
24058b8c:	6878      	ldr	r0, [r7, #4]
24058b8e:	f7fd f881 	bl	24055c94 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
24058b92:	687b      	ldr	r3, [r7, #4]
24058b94:	2202      	movs	r2, #2
24058b96:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
24058b98:	687b      	ldr	r3, [r7, #4]
24058b9a:	2200      	movs	r2, #0
24058b9c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
24058b9e:	687b      	ldr	r3, [r7, #4]
24058ba0:	2201      	movs	r2, #1
24058ba2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
24058ba4:	2300      	movs	r3, #0
}
24058ba6:	4618      	mov	r0, r3
24058ba8:	3708      	adds	r7, #8
24058baa:	46bd      	mov	sp, r7
24058bac:	bd80      	pop	{r7, pc}

24058bae <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
24058bae:	b480      	push	{r7}
24058bb0:	b083      	sub	sp, #12
24058bb2:	af00      	add	r7, sp, #0
24058bb4:	6078      	str	r0, [r7, #4]
24058bb6:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
24058bb8:	687b      	ldr	r3, [r7, #4]
24058bba:	2b00      	cmp	r3, #0
24058bbc:	d101      	bne.n	24058bc2 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
24058bbe:	2301      	movs	r3, #1
24058bc0:	e046      	b.n	24058c50 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
24058bc2:	687b      	ldr	r3, [r7, #4]
24058bc4:	795b      	ldrb	r3, [r3, #5]
24058bc6:	2b01      	cmp	r3, #1
24058bc8:	d101      	bne.n	24058bce <HAL_DAC_Start+0x20>
24058bca:	2302      	movs	r3, #2
24058bcc:	e040      	b.n	24058c50 <HAL_DAC_Start+0xa2>
24058bce:	687b      	ldr	r3, [r7, #4]
24058bd0:	2201      	movs	r2, #1
24058bd2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
24058bd4:	687b      	ldr	r3, [r7, #4]
24058bd6:	2202      	movs	r2, #2
24058bd8:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
24058bda:	687b      	ldr	r3, [r7, #4]
24058bdc:	681b      	ldr	r3, [r3, #0]
24058bde:	6819      	ldr	r1, [r3, #0]
24058be0:	683b      	ldr	r3, [r7, #0]
24058be2:	f003 0310 	and.w	r3, r3, #16
24058be6:	2201      	movs	r2, #1
24058be8:	409a      	lsls	r2, r3
24058bea:	687b      	ldr	r3, [r7, #4]
24058bec:	681b      	ldr	r3, [r3, #0]
24058bee:	430a      	orrs	r2, r1
24058bf0:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
24058bf2:	683b      	ldr	r3, [r7, #0]
24058bf4:	2b00      	cmp	r3, #0
24058bf6:	d10f      	bne.n	24058c18 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
24058bf8:	687b      	ldr	r3, [r7, #4]
24058bfa:	681b      	ldr	r3, [r3, #0]
24058bfc:	681b      	ldr	r3, [r3, #0]
24058bfe:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
24058c02:	2b02      	cmp	r3, #2
24058c04:	d11d      	bne.n	24058c42 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
24058c06:	687b      	ldr	r3, [r7, #4]
24058c08:	681b      	ldr	r3, [r3, #0]
24058c0a:	685a      	ldr	r2, [r3, #4]
24058c0c:	687b      	ldr	r3, [r7, #4]
24058c0e:	681b      	ldr	r3, [r3, #0]
24058c10:	f042 0201 	orr.w	r2, r2, #1
24058c14:	605a      	str	r2, [r3, #4]
24058c16:	e014      	b.n	24058c42 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
24058c18:	687b      	ldr	r3, [r7, #4]
24058c1a:	681b      	ldr	r3, [r3, #0]
24058c1c:	681b      	ldr	r3, [r3, #0]
24058c1e:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
24058c22:	683b      	ldr	r3, [r7, #0]
24058c24:	f003 0310 	and.w	r3, r3, #16
24058c28:	2102      	movs	r1, #2
24058c2a:	fa01 f303 	lsl.w	r3, r1, r3
24058c2e:	429a      	cmp	r2, r3
24058c30:	d107      	bne.n	24058c42 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
24058c32:	687b      	ldr	r3, [r7, #4]
24058c34:	681b      	ldr	r3, [r3, #0]
24058c36:	685a      	ldr	r2, [r3, #4]
24058c38:	687b      	ldr	r3, [r7, #4]
24058c3a:	681b      	ldr	r3, [r3, #0]
24058c3c:	f042 0202 	orr.w	r2, r2, #2
24058c40:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
24058c42:	687b      	ldr	r3, [r7, #4]
24058c44:	2201      	movs	r2, #1
24058c46:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
24058c48:	687b      	ldr	r3, [r7, #4]
24058c4a:	2200      	movs	r2, #0
24058c4c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
24058c4e:	2300      	movs	r3, #0
}
24058c50:	4618      	mov	r0, r3
24058c52:	370c      	adds	r7, #12
24058c54:	46bd      	mov	sp, r7
24058c56:	f85d 7b04 	ldr.w	r7, [sp], #4
24058c5a:	4770      	bx	lr

24058c5c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
24058c5c:	b480      	push	{r7}
24058c5e:	b087      	sub	sp, #28
24058c60:	af00      	add	r7, sp, #0
24058c62:	60f8      	str	r0, [r7, #12]
24058c64:	60b9      	str	r1, [r7, #8]
24058c66:	607a      	str	r2, [r7, #4]
24058c68:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
24058c6a:	2300      	movs	r3, #0
24058c6c:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
24058c6e:	68fb      	ldr	r3, [r7, #12]
24058c70:	2b00      	cmp	r3, #0
24058c72:	d101      	bne.n	24058c78 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
24058c74:	2301      	movs	r3, #1
24058c76:	e015      	b.n	24058ca4 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
24058c78:	68fb      	ldr	r3, [r7, #12]
24058c7a:	681b      	ldr	r3, [r3, #0]
24058c7c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
24058c7e:	68bb      	ldr	r3, [r7, #8]
24058c80:	2b00      	cmp	r3, #0
24058c82:	d105      	bne.n	24058c90 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
24058c84:	697a      	ldr	r2, [r7, #20]
24058c86:	687b      	ldr	r3, [r7, #4]
24058c88:	4413      	add	r3, r2
24058c8a:	3308      	adds	r3, #8
24058c8c:	617b      	str	r3, [r7, #20]
24058c8e:	e004      	b.n	24058c9a <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
24058c90:	697a      	ldr	r2, [r7, #20]
24058c92:	687b      	ldr	r3, [r7, #4]
24058c94:	4413      	add	r3, r2
24058c96:	3314      	adds	r3, #20
24058c98:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
24058c9a:	697b      	ldr	r3, [r7, #20]
24058c9c:	461a      	mov	r2, r3
24058c9e:	683b      	ldr	r3, [r7, #0]
24058ca0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
24058ca2:	2300      	movs	r3, #0
}
24058ca4:	4618      	mov	r0, r3
24058ca6:	371c      	adds	r7, #28
24058ca8:	46bd      	mov	sp, r7
24058caa:	f85d 7b04 	ldr.w	r7, [sp], #4
24058cae:	4770      	bx	lr

24058cb0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
24058cb0:	b580      	push	{r7, lr}
24058cb2:	b08a      	sub	sp, #40	@ 0x28
24058cb4:	af00      	add	r7, sp, #0
24058cb6:	60f8      	str	r0, [r7, #12]
24058cb8:	60b9      	str	r1, [r7, #8]
24058cba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
24058cbc:	2300      	movs	r3, #0
24058cbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
24058cc2:	68fb      	ldr	r3, [r7, #12]
24058cc4:	2b00      	cmp	r3, #0
24058cc6:	d002      	beq.n	24058cce <HAL_DAC_ConfigChannel+0x1e>
24058cc8:	68bb      	ldr	r3, [r7, #8]
24058cca:	2b00      	cmp	r3, #0
24058ccc:	d101      	bne.n	24058cd2 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
24058cce:	2301      	movs	r3, #1
24058cd0:	e12a      	b.n	24058f28 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
24058cd2:	68fb      	ldr	r3, [r7, #12]
24058cd4:	795b      	ldrb	r3, [r3, #5]
24058cd6:	2b01      	cmp	r3, #1
24058cd8:	d101      	bne.n	24058cde <HAL_DAC_ConfigChannel+0x2e>
24058cda:	2302      	movs	r3, #2
24058cdc:	e124      	b.n	24058f28 <HAL_DAC_ConfigChannel+0x278>
24058cde:	68fb      	ldr	r3, [r7, #12]
24058ce0:	2201      	movs	r2, #1
24058ce2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
24058ce4:	68fb      	ldr	r3, [r7, #12]
24058ce6:	2202      	movs	r2, #2
24058ce8:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
24058cea:	68bb      	ldr	r3, [r7, #8]
24058cec:	681b      	ldr	r3, [r3, #0]
24058cee:	2b04      	cmp	r3, #4
24058cf0:	d17a      	bne.n	24058de8 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
24058cf2:	f7fd fec5 	bl	24056a80 <HAL_GetTick>
24058cf6:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
24058cf8:	687b      	ldr	r3, [r7, #4]
24058cfa:	2b00      	cmp	r3, #0
24058cfc:	d13d      	bne.n	24058d7a <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
24058cfe:	e018      	b.n	24058d32 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
24058d00:	f7fd febe 	bl	24056a80 <HAL_GetTick>
24058d04:	4602      	mov	r2, r0
24058d06:	69fb      	ldr	r3, [r7, #28]
24058d08:	1ad3      	subs	r3, r2, r3
24058d0a:	2b01      	cmp	r3, #1
24058d0c:	d911      	bls.n	24058d32 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
24058d0e:	68fb      	ldr	r3, [r7, #12]
24058d10:	681b      	ldr	r3, [r3, #0]
24058d12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
24058d14:	4b86      	ldr	r3, [pc, #536]	@ (24058f30 <HAL_DAC_ConfigChannel+0x280>)
24058d16:	4013      	ands	r3, r2
24058d18:	2b00      	cmp	r3, #0
24058d1a:	d00a      	beq.n	24058d32 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
24058d1c:	68fb      	ldr	r3, [r7, #12]
24058d1e:	691b      	ldr	r3, [r3, #16]
24058d20:	f043 0208 	orr.w	r2, r3, #8
24058d24:	68fb      	ldr	r3, [r7, #12]
24058d26:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
24058d28:	68fb      	ldr	r3, [r7, #12]
24058d2a:	2203      	movs	r2, #3
24058d2c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
24058d2e:	2303      	movs	r3, #3
24058d30:	e0fa      	b.n	24058f28 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
24058d32:	68fb      	ldr	r3, [r7, #12]
24058d34:	681b      	ldr	r3, [r3, #0]
24058d36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
24058d38:	4b7d      	ldr	r3, [pc, #500]	@ (24058f30 <HAL_DAC_ConfigChannel+0x280>)
24058d3a:	4013      	ands	r3, r2
24058d3c:	2b00      	cmp	r3, #0
24058d3e:	d1df      	bne.n	24058d00 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
24058d40:	68fb      	ldr	r3, [r7, #12]
24058d42:	681b      	ldr	r3, [r3, #0]
24058d44:	68ba      	ldr	r2, [r7, #8]
24058d46:	6992      	ldr	r2, [r2, #24]
24058d48:	641a      	str	r2, [r3, #64]	@ 0x40
24058d4a:	e020      	b.n	24058d8e <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
24058d4c:	f7fd fe98 	bl	24056a80 <HAL_GetTick>
24058d50:	4602      	mov	r2, r0
24058d52:	69fb      	ldr	r3, [r7, #28]
24058d54:	1ad3      	subs	r3, r2, r3
24058d56:	2b01      	cmp	r3, #1
24058d58:	d90f      	bls.n	24058d7a <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
24058d5a:	68fb      	ldr	r3, [r7, #12]
24058d5c:	681b      	ldr	r3, [r3, #0]
24058d5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
24058d60:	2b00      	cmp	r3, #0
24058d62:	da0a      	bge.n	24058d7a <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
24058d64:	68fb      	ldr	r3, [r7, #12]
24058d66:	691b      	ldr	r3, [r3, #16]
24058d68:	f043 0208 	orr.w	r2, r3, #8
24058d6c:	68fb      	ldr	r3, [r7, #12]
24058d6e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
24058d70:	68fb      	ldr	r3, [r7, #12]
24058d72:	2203      	movs	r2, #3
24058d74:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
24058d76:	2303      	movs	r3, #3
24058d78:	e0d6      	b.n	24058f28 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
24058d7a:	68fb      	ldr	r3, [r7, #12]
24058d7c:	681b      	ldr	r3, [r3, #0]
24058d7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
24058d80:	2b00      	cmp	r3, #0
24058d82:	dbe3      	blt.n	24058d4c <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
24058d84:	68fb      	ldr	r3, [r7, #12]
24058d86:	681b      	ldr	r3, [r3, #0]
24058d88:	68ba      	ldr	r2, [r7, #8]
24058d8a:	6992      	ldr	r2, [r2, #24]
24058d8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
24058d8e:	68fb      	ldr	r3, [r7, #12]
24058d90:	681b      	ldr	r3, [r3, #0]
24058d92:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
24058d94:	687b      	ldr	r3, [r7, #4]
24058d96:	f003 0310 	and.w	r3, r3, #16
24058d9a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
24058d9e:	fa01 f303 	lsl.w	r3, r1, r3
24058da2:	43db      	mvns	r3, r3
24058da4:	ea02 0103 	and.w	r1, r2, r3
24058da8:	68bb      	ldr	r3, [r7, #8]
24058daa:	69da      	ldr	r2, [r3, #28]
24058dac:	687b      	ldr	r3, [r7, #4]
24058dae:	f003 0310 	and.w	r3, r3, #16
24058db2:	409a      	lsls	r2, r3
24058db4:	68fb      	ldr	r3, [r7, #12]
24058db6:	681b      	ldr	r3, [r3, #0]
24058db8:	430a      	orrs	r2, r1
24058dba:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
24058dbc:	68fb      	ldr	r3, [r7, #12]
24058dbe:	681b      	ldr	r3, [r3, #0]
24058dc0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
24058dc2:	687b      	ldr	r3, [r7, #4]
24058dc4:	f003 0310 	and.w	r3, r3, #16
24058dc8:	21ff      	movs	r1, #255	@ 0xff
24058dca:	fa01 f303 	lsl.w	r3, r1, r3
24058dce:	43db      	mvns	r3, r3
24058dd0:	ea02 0103 	and.w	r1, r2, r3
24058dd4:	68bb      	ldr	r3, [r7, #8]
24058dd6:	6a1a      	ldr	r2, [r3, #32]
24058dd8:	687b      	ldr	r3, [r7, #4]
24058dda:	f003 0310 	and.w	r3, r3, #16
24058dde:	409a      	lsls	r2, r3
24058de0:	68fb      	ldr	r3, [r7, #12]
24058de2:	681b      	ldr	r3, [r3, #0]
24058de4:	430a      	orrs	r2, r1
24058de6:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
24058de8:	68bb      	ldr	r3, [r7, #8]
24058dea:	691b      	ldr	r3, [r3, #16]
24058dec:	2b01      	cmp	r3, #1
24058dee:	d11d      	bne.n	24058e2c <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
24058df0:	68fb      	ldr	r3, [r7, #12]
24058df2:	681b      	ldr	r3, [r3, #0]
24058df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
24058df6:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
24058df8:	687b      	ldr	r3, [r7, #4]
24058dfa:	f003 0310 	and.w	r3, r3, #16
24058dfe:	221f      	movs	r2, #31
24058e00:	fa02 f303 	lsl.w	r3, r2, r3
24058e04:	43db      	mvns	r3, r3
24058e06:	69ba      	ldr	r2, [r7, #24]
24058e08:	4013      	ands	r3, r2
24058e0a:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
24058e0c:	68bb      	ldr	r3, [r7, #8]
24058e0e:	695b      	ldr	r3, [r3, #20]
24058e10:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
24058e12:	687b      	ldr	r3, [r7, #4]
24058e14:	f003 0310 	and.w	r3, r3, #16
24058e18:	697a      	ldr	r2, [r7, #20]
24058e1a:	fa02 f303 	lsl.w	r3, r2, r3
24058e1e:	69ba      	ldr	r2, [r7, #24]
24058e20:	4313      	orrs	r3, r2
24058e22:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
24058e24:	68fb      	ldr	r3, [r7, #12]
24058e26:	681b      	ldr	r3, [r3, #0]
24058e28:	69ba      	ldr	r2, [r7, #24]
24058e2a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
24058e2c:	68fb      	ldr	r3, [r7, #12]
24058e2e:	681b      	ldr	r3, [r3, #0]
24058e30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
24058e32:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
24058e34:	687b      	ldr	r3, [r7, #4]
24058e36:	f003 0310 	and.w	r3, r3, #16
24058e3a:	2207      	movs	r2, #7
24058e3c:	fa02 f303 	lsl.w	r3, r2, r3
24058e40:	43db      	mvns	r3, r3
24058e42:	69ba      	ldr	r2, [r7, #24]
24058e44:	4013      	ands	r3, r2
24058e46:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
24058e48:	68bb      	ldr	r3, [r7, #8]
24058e4a:	68db      	ldr	r3, [r3, #12]
24058e4c:	2b01      	cmp	r3, #1
24058e4e:	d102      	bne.n	24058e56 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
24058e50:	2300      	movs	r3, #0
24058e52:	627b      	str	r3, [r7, #36]	@ 0x24
24058e54:	e00f      	b.n	24058e76 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
24058e56:	68bb      	ldr	r3, [r7, #8]
24058e58:	68db      	ldr	r3, [r3, #12]
24058e5a:	2b02      	cmp	r3, #2
24058e5c:	d102      	bne.n	24058e64 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
24058e5e:	2301      	movs	r3, #1
24058e60:	627b      	str	r3, [r7, #36]	@ 0x24
24058e62:	e008      	b.n	24058e76 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
24058e64:	68bb      	ldr	r3, [r7, #8]
24058e66:	689b      	ldr	r3, [r3, #8]
24058e68:	2b00      	cmp	r3, #0
24058e6a:	d102      	bne.n	24058e72 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
24058e6c:	2301      	movs	r3, #1
24058e6e:	627b      	str	r3, [r7, #36]	@ 0x24
24058e70:	e001      	b.n	24058e76 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
24058e72:	2300      	movs	r3, #0
24058e74:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
24058e76:	68bb      	ldr	r3, [r7, #8]
24058e78:	681a      	ldr	r2, [r3, #0]
24058e7a:	68bb      	ldr	r3, [r7, #8]
24058e7c:	689b      	ldr	r3, [r3, #8]
24058e7e:	4313      	orrs	r3, r2
24058e80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
24058e82:	4313      	orrs	r3, r2
24058e84:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
24058e86:	687b      	ldr	r3, [r7, #4]
24058e88:	f003 0310 	and.w	r3, r3, #16
24058e8c:	697a      	ldr	r2, [r7, #20]
24058e8e:	fa02 f303 	lsl.w	r3, r2, r3
24058e92:	69ba      	ldr	r2, [r7, #24]
24058e94:	4313      	orrs	r3, r2
24058e96:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
24058e98:	68fb      	ldr	r3, [r7, #12]
24058e9a:	681b      	ldr	r3, [r3, #0]
24058e9c:	69ba      	ldr	r2, [r7, #24]
24058e9e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
24058ea0:	68fb      	ldr	r3, [r7, #12]
24058ea2:	681b      	ldr	r3, [r3, #0]
24058ea4:	6819      	ldr	r1, [r3, #0]
24058ea6:	687b      	ldr	r3, [r7, #4]
24058ea8:	f003 0310 	and.w	r3, r3, #16
24058eac:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
24058eb0:	fa02 f303 	lsl.w	r3, r2, r3
24058eb4:	43da      	mvns	r2, r3
24058eb6:	68fb      	ldr	r3, [r7, #12]
24058eb8:	681b      	ldr	r3, [r3, #0]
24058eba:	400a      	ands	r2, r1
24058ebc:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
24058ebe:	68fb      	ldr	r3, [r7, #12]
24058ec0:	681b      	ldr	r3, [r3, #0]
24058ec2:	681b      	ldr	r3, [r3, #0]
24058ec4:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
24058ec6:	687b      	ldr	r3, [r7, #4]
24058ec8:	f003 0310 	and.w	r3, r3, #16
24058ecc:	f640 72fe 	movw	r2, #4094	@ 0xffe
24058ed0:	fa02 f303 	lsl.w	r3, r2, r3
24058ed4:	43db      	mvns	r3, r3
24058ed6:	69ba      	ldr	r2, [r7, #24]
24058ed8:	4013      	ands	r3, r2
24058eda:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
24058edc:	68bb      	ldr	r3, [r7, #8]
24058ede:	685b      	ldr	r3, [r3, #4]
24058ee0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
24058ee2:	687b      	ldr	r3, [r7, #4]
24058ee4:	f003 0310 	and.w	r3, r3, #16
24058ee8:	697a      	ldr	r2, [r7, #20]
24058eea:	fa02 f303 	lsl.w	r3, r2, r3
24058eee:	69ba      	ldr	r2, [r7, #24]
24058ef0:	4313      	orrs	r3, r2
24058ef2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
24058ef4:	68fb      	ldr	r3, [r7, #12]
24058ef6:	681b      	ldr	r3, [r3, #0]
24058ef8:	69ba      	ldr	r2, [r7, #24]
24058efa:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
24058efc:	68fb      	ldr	r3, [r7, #12]
24058efe:	681b      	ldr	r3, [r3, #0]
24058f00:	6819      	ldr	r1, [r3, #0]
24058f02:	687b      	ldr	r3, [r7, #4]
24058f04:	f003 0310 	and.w	r3, r3, #16
24058f08:	22c0      	movs	r2, #192	@ 0xc0
24058f0a:	fa02 f303 	lsl.w	r3, r2, r3
24058f0e:	43da      	mvns	r2, r3
24058f10:	68fb      	ldr	r3, [r7, #12]
24058f12:	681b      	ldr	r3, [r3, #0]
24058f14:	400a      	ands	r2, r1
24058f16:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
24058f18:	68fb      	ldr	r3, [r7, #12]
24058f1a:	2201      	movs	r2, #1
24058f1c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
24058f1e:	68fb      	ldr	r3, [r7, #12]
24058f20:	2200      	movs	r2, #0
24058f22:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
24058f24:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
24058f28:	4618      	mov	r0, r3
24058f2a:	3728      	adds	r7, #40	@ 0x28
24058f2c:	46bd      	mov	sp, r7
24058f2e:	bd80      	pop	{r7, pc}
24058f30:	20008000 	.word	0x20008000

24058f34 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
24058f34:	b580      	push	{r7, lr}
24058f36:	b086      	sub	sp, #24
24058f38:	af00      	add	r7, sp, #0
24058f3a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
24058f3c:	f7fd fda0 	bl	24056a80 <HAL_GetTick>
24058f40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
24058f42:	687b      	ldr	r3, [r7, #4]
24058f44:	2b00      	cmp	r3, #0
24058f46:	d101      	bne.n	24058f4c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
24058f48:	2301      	movs	r3, #1
24058f4a:	e37d      	b.n	24059648 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24058f4c:	687b      	ldr	r3, [r7, #4]
24058f4e:	681b      	ldr	r3, [r3, #0]
24058f50:	4a66      	ldr	r2, [pc, #408]	@ (240590ec <HAL_DMA_Init+0x1b8>)
24058f52:	4293      	cmp	r3, r2
24058f54:	d04a      	beq.n	24058fec <HAL_DMA_Init+0xb8>
24058f56:	687b      	ldr	r3, [r7, #4]
24058f58:	681b      	ldr	r3, [r3, #0]
24058f5a:	4a65      	ldr	r2, [pc, #404]	@ (240590f0 <HAL_DMA_Init+0x1bc>)
24058f5c:	4293      	cmp	r3, r2
24058f5e:	d045      	beq.n	24058fec <HAL_DMA_Init+0xb8>
24058f60:	687b      	ldr	r3, [r7, #4]
24058f62:	681b      	ldr	r3, [r3, #0]
24058f64:	4a63      	ldr	r2, [pc, #396]	@ (240590f4 <HAL_DMA_Init+0x1c0>)
24058f66:	4293      	cmp	r3, r2
24058f68:	d040      	beq.n	24058fec <HAL_DMA_Init+0xb8>
24058f6a:	687b      	ldr	r3, [r7, #4]
24058f6c:	681b      	ldr	r3, [r3, #0]
24058f6e:	4a62      	ldr	r2, [pc, #392]	@ (240590f8 <HAL_DMA_Init+0x1c4>)
24058f70:	4293      	cmp	r3, r2
24058f72:	d03b      	beq.n	24058fec <HAL_DMA_Init+0xb8>
24058f74:	687b      	ldr	r3, [r7, #4]
24058f76:	681b      	ldr	r3, [r3, #0]
24058f78:	4a60      	ldr	r2, [pc, #384]	@ (240590fc <HAL_DMA_Init+0x1c8>)
24058f7a:	4293      	cmp	r3, r2
24058f7c:	d036      	beq.n	24058fec <HAL_DMA_Init+0xb8>
24058f7e:	687b      	ldr	r3, [r7, #4]
24058f80:	681b      	ldr	r3, [r3, #0]
24058f82:	4a5f      	ldr	r2, [pc, #380]	@ (24059100 <HAL_DMA_Init+0x1cc>)
24058f84:	4293      	cmp	r3, r2
24058f86:	d031      	beq.n	24058fec <HAL_DMA_Init+0xb8>
24058f88:	687b      	ldr	r3, [r7, #4]
24058f8a:	681b      	ldr	r3, [r3, #0]
24058f8c:	4a5d      	ldr	r2, [pc, #372]	@ (24059104 <HAL_DMA_Init+0x1d0>)
24058f8e:	4293      	cmp	r3, r2
24058f90:	d02c      	beq.n	24058fec <HAL_DMA_Init+0xb8>
24058f92:	687b      	ldr	r3, [r7, #4]
24058f94:	681b      	ldr	r3, [r3, #0]
24058f96:	4a5c      	ldr	r2, [pc, #368]	@ (24059108 <HAL_DMA_Init+0x1d4>)
24058f98:	4293      	cmp	r3, r2
24058f9a:	d027      	beq.n	24058fec <HAL_DMA_Init+0xb8>
24058f9c:	687b      	ldr	r3, [r7, #4]
24058f9e:	681b      	ldr	r3, [r3, #0]
24058fa0:	4a5a      	ldr	r2, [pc, #360]	@ (2405910c <HAL_DMA_Init+0x1d8>)
24058fa2:	4293      	cmp	r3, r2
24058fa4:	d022      	beq.n	24058fec <HAL_DMA_Init+0xb8>
24058fa6:	687b      	ldr	r3, [r7, #4]
24058fa8:	681b      	ldr	r3, [r3, #0]
24058faa:	4a59      	ldr	r2, [pc, #356]	@ (24059110 <HAL_DMA_Init+0x1dc>)
24058fac:	4293      	cmp	r3, r2
24058fae:	d01d      	beq.n	24058fec <HAL_DMA_Init+0xb8>
24058fb0:	687b      	ldr	r3, [r7, #4]
24058fb2:	681b      	ldr	r3, [r3, #0]
24058fb4:	4a57      	ldr	r2, [pc, #348]	@ (24059114 <HAL_DMA_Init+0x1e0>)
24058fb6:	4293      	cmp	r3, r2
24058fb8:	d018      	beq.n	24058fec <HAL_DMA_Init+0xb8>
24058fba:	687b      	ldr	r3, [r7, #4]
24058fbc:	681b      	ldr	r3, [r3, #0]
24058fbe:	4a56      	ldr	r2, [pc, #344]	@ (24059118 <HAL_DMA_Init+0x1e4>)
24058fc0:	4293      	cmp	r3, r2
24058fc2:	d013      	beq.n	24058fec <HAL_DMA_Init+0xb8>
24058fc4:	687b      	ldr	r3, [r7, #4]
24058fc6:	681b      	ldr	r3, [r3, #0]
24058fc8:	4a54      	ldr	r2, [pc, #336]	@ (2405911c <HAL_DMA_Init+0x1e8>)
24058fca:	4293      	cmp	r3, r2
24058fcc:	d00e      	beq.n	24058fec <HAL_DMA_Init+0xb8>
24058fce:	687b      	ldr	r3, [r7, #4]
24058fd0:	681b      	ldr	r3, [r3, #0]
24058fd2:	4a53      	ldr	r2, [pc, #332]	@ (24059120 <HAL_DMA_Init+0x1ec>)
24058fd4:	4293      	cmp	r3, r2
24058fd6:	d009      	beq.n	24058fec <HAL_DMA_Init+0xb8>
24058fd8:	687b      	ldr	r3, [r7, #4]
24058fda:	681b      	ldr	r3, [r3, #0]
24058fdc:	4a51      	ldr	r2, [pc, #324]	@ (24059124 <HAL_DMA_Init+0x1f0>)
24058fde:	4293      	cmp	r3, r2
24058fe0:	d004      	beq.n	24058fec <HAL_DMA_Init+0xb8>
24058fe2:	687b      	ldr	r3, [r7, #4]
24058fe4:	681b      	ldr	r3, [r3, #0]
24058fe6:	4a50      	ldr	r2, [pc, #320]	@ (24059128 <HAL_DMA_Init+0x1f4>)
24058fe8:	4293      	cmp	r3, r2
24058fea:	d101      	bne.n	24058ff0 <HAL_DMA_Init+0xbc>
24058fec:	2301      	movs	r3, #1
24058fee:	e000      	b.n	24058ff2 <HAL_DMA_Init+0xbe>
24058ff0:	2300      	movs	r3, #0
24058ff2:	2b00      	cmp	r3, #0
24058ff4:	f000 813c 	beq.w	24059270 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
24058ff8:	687b      	ldr	r3, [r7, #4]
24058ffa:	2202      	movs	r2, #2
24058ffc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
24059000:	687b      	ldr	r3, [r7, #4]
24059002:	2200      	movs	r2, #0
24059004:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
24059008:	687b      	ldr	r3, [r7, #4]
2405900a:	681b      	ldr	r3, [r3, #0]
2405900c:	4a37      	ldr	r2, [pc, #220]	@ (240590ec <HAL_DMA_Init+0x1b8>)
2405900e:	4293      	cmp	r3, r2
24059010:	d04a      	beq.n	240590a8 <HAL_DMA_Init+0x174>
24059012:	687b      	ldr	r3, [r7, #4]
24059014:	681b      	ldr	r3, [r3, #0]
24059016:	4a36      	ldr	r2, [pc, #216]	@ (240590f0 <HAL_DMA_Init+0x1bc>)
24059018:	4293      	cmp	r3, r2
2405901a:	d045      	beq.n	240590a8 <HAL_DMA_Init+0x174>
2405901c:	687b      	ldr	r3, [r7, #4]
2405901e:	681b      	ldr	r3, [r3, #0]
24059020:	4a34      	ldr	r2, [pc, #208]	@ (240590f4 <HAL_DMA_Init+0x1c0>)
24059022:	4293      	cmp	r3, r2
24059024:	d040      	beq.n	240590a8 <HAL_DMA_Init+0x174>
24059026:	687b      	ldr	r3, [r7, #4]
24059028:	681b      	ldr	r3, [r3, #0]
2405902a:	4a33      	ldr	r2, [pc, #204]	@ (240590f8 <HAL_DMA_Init+0x1c4>)
2405902c:	4293      	cmp	r3, r2
2405902e:	d03b      	beq.n	240590a8 <HAL_DMA_Init+0x174>
24059030:	687b      	ldr	r3, [r7, #4]
24059032:	681b      	ldr	r3, [r3, #0]
24059034:	4a31      	ldr	r2, [pc, #196]	@ (240590fc <HAL_DMA_Init+0x1c8>)
24059036:	4293      	cmp	r3, r2
24059038:	d036      	beq.n	240590a8 <HAL_DMA_Init+0x174>
2405903a:	687b      	ldr	r3, [r7, #4]
2405903c:	681b      	ldr	r3, [r3, #0]
2405903e:	4a30      	ldr	r2, [pc, #192]	@ (24059100 <HAL_DMA_Init+0x1cc>)
24059040:	4293      	cmp	r3, r2
24059042:	d031      	beq.n	240590a8 <HAL_DMA_Init+0x174>
24059044:	687b      	ldr	r3, [r7, #4]
24059046:	681b      	ldr	r3, [r3, #0]
24059048:	4a2e      	ldr	r2, [pc, #184]	@ (24059104 <HAL_DMA_Init+0x1d0>)
2405904a:	4293      	cmp	r3, r2
2405904c:	d02c      	beq.n	240590a8 <HAL_DMA_Init+0x174>
2405904e:	687b      	ldr	r3, [r7, #4]
24059050:	681b      	ldr	r3, [r3, #0]
24059052:	4a2d      	ldr	r2, [pc, #180]	@ (24059108 <HAL_DMA_Init+0x1d4>)
24059054:	4293      	cmp	r3, r2
24059056:	d027      	beq.n	240590a8 <HAL_DMA_Init+0x174>
24059058:	687b      	ldr	r3, [r7, #4]
2405905a:	681b      	ldr	r3, [r3, #0]
2405905c:	4a2b      	ldr	r2, [pc, #172]	@ (2405910c <HAL_DMA_Init+0x1d8>)
2405905e:	4293      	cmp	r3, r2
24059060:	d022      	beq.n	240590a8 <HAL_DMA_Init+0x174>
24059062:	687b      	ldr	r3, [r7, #4]
24059064:	681b      	ldr	r3, [r3, #0]
24059066:	4a2a      	ldr	r2, [pc, #168]	@ (24059110 <HAL_DMA_Init+0x1dc>)
24059068:	4293      	cmp	r3, r2
2405906a:	d01d      	beq.n	240590a8 <HAL_DMA_Init+0x174>
2405906c:	687b      	ldr	r3, [r7, #4]
2405906e:	681b      	ldr	r3, [r3, #0]
24059070:	4a28      	ldr	r2, [pc, #160]	@ (24059114 <HAL_DMA_Init+0x1e0>)
24059072:	4293      	cmp	r3, r2
24059074:	d018      	beq.n	240590a8 <HAL_DMA_Init+0x174>
24059076:	687b      	ldr	r3, [r7, #4]
24059078:	681b      	ldr	r3, [r3, #0]
2405907a:	4a27      	ldr	r2, [pc, #156]	@ (24059118 <HAL_DMA_Init+0x1e4>)
2405907c:	4293      	cmp	r3, r2
2405907e:	d013      	beq.n	240590a8 <HAL_DMA_Init+0x174>
24059080:	687b      	ldr	r3, [r7, #4]
24059082:	681b      	ldr	r3, [r3, #0]
24059084:	4a25      	ldr	r2, [pc, #148]	@ (2405911c <HAL_DMA_Init+0x1e8>)
24059086:	4293      	cmp	r3, r2
24059088:	d00e      	beq.n	240590a8 <HAL_DMA_Init+0x174>
2405908a:	687b      	ldr	r3, [r7, #4]
2405908c:	681b      	ldr	r3, [r3, #0]
2405908e:	4a24      	ldr	r2, [pc, #144]	@ (24059120 <HAL_DMA_Init+0x1ec>)
24059090:	4293      	cmp	r3, r2
24059092:	d009      	beq.n	240590a8 <HAL_DMA_Init+0x174>
24059094:	687b      	ldr	r3, [r7, #4]
24059096:	681b      	ldr	r3, [r3, #0]
24059098:	4a22      	ldr	r2, [pc, #136]	@ (24059124 <HAL_DMA_Init+0x1f0>)
2405909a:	4293      	cmp	r3, r2
2405909c:	d004      	beq.n	240590a8 <HAL_DMA_Init+0x174>
2405909e:	687b      	ldr	r3, [r7, #4]
240590a0:	681b      	ldr	r3, [r3, #0]
240590a2:	4a21      	ldr	r2, [pc, #132]	@ (24059128 <HAL_DMA_Init+0x1f4>)
240590a4:	4293      	cmp	r3, r2
240590a6:	d108      	bne.n	240590ba <HAL_DMA_Init+0x186>
240590a8:	687b      	ldr	r3, [r7, #4]
240590aa:	681b      	ldr	r3, [r3, #0]
240590ac:	681a      	ldr	r2, [r3, #0]
240590ae:	687b      	ldr	r3, [r7, #4]
240590b0:	681b      	ldr	r3, [r3, #0]
240590b2:	f022 0201 	bic.w	r2, r2, #1
240590b6:	601a      	str	r2, [r3, #0]
240590b8:	e007      	b.n	240590ca <HAL_DMA_Init+0x196>
240590ba:	687b      	ldr	r3, [r7, #4]
240590bc:	681b      	ldr	r3, [r3, #0]
240590be:	681a      	ldr	r2, [r3, #0]
240590c0:	687b      	ldr	r3, [r7, #4]
240590c2:	681b      	ldr	r3, [r3, #0]
240590c4:	f022 0201 	bic.w	r2, r2, #1
240590c8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
240590ca:	e02f      	b.n	2405912c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
240590cc:	f7fd fcd8 	bl	24056a80 <HAL_GetTick>
240590d0:	4602      	mov	r2, r0
240590d2:	693b      	ldr	r3, [r7, #16]
240590d4:	1ad3      	subs	r3, r2, r3
240590d6:	2b05      	cmp	r3, #5
240590d8:	d928      	bls.n	2405912c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
240590da:	687b      	ldr	r3, [r7, #4]
240590dc:	2220      	movs	r2, #32
240590de:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
240590e0:	687b      	ldr	r3, [r7, #4]
240590e2:	2203      	movs	r2, #3
240590e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
240590e8:	2301      	movs	r3, #1
240590ea:	e2ad      	b.n	24059648 <HAL_DMA_Init+0x714>
240590ec:	40020010 	.word	0x40020010
240590f0:	40020028 	.word	0x40020028
240590f4:	40020040 	.word	0x40020040
240590f8:	40020058 	.word	0x40020058
240590fc:	40020070 	.word	0x40020070
24059100:	40020088 	.word	0x40020088
24059104:	400200a0 	.word	0x400200a0
24059108:	400200b8 	.word	0x400200b8
2405910c:	40020410 	.word	0x40020410
24059110:	40020428 	.word	0x40020428
24059114:	40020440 	.word	0x40020440
24059118:	40020458 	.word	0x40020458
2405911c:	40020470 	.word	0x40020470
24059120:	40020488 	.word	0x40020488
24059124:	400204a0 	.word	0x400204a0
24059128:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
2405912c:	687b      	ldr	r3, [r7, #4]
2405912e:	681b      	ldr	r3, [r3, #0]
24059130:	681b      	ldr	r3, [r3, #0]
24059132:	f003 0301 	and.w	r3, r3, #1
24059136:	2b00      	cmp	r3, #0
24059138:	d1c8      	bne.n	240590cc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
2405913a:	687b      	ldr	r3, [r7, #4]
2405913c:	681b      	ldr	r3, [r3, #0]
2405913e:	681b      	ldr	r3, [r3, #0]
24059140:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
24059142:	697a      	ldr	r2, [r7, #20]
24059144:	4b73      	ldr	r3, [pc, #460]	@ (24059314 <HAL_DMA_Init+0x3e0>)
24059146:	4013      	ands	r3, r2
24059148:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
2405914a:	687b      	ldr	r3, [r7, #4]
2405914c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
2405914e:	687b      	ldr	r3, [r7, #4]
24059150:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
24059152:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
24059154:	687b      	ldr	r3, [r7, #4]
24059156:	691b      	ldr	r3, [r3, #16]
24059158:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
2405915a:	687b      	ldr	r3, [r7, #4]
2405915c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
2405915e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
24059160:	687b      	ldr	r3, [r7, #4]
24059162:	699b      	ldr	r3, [r3, #24]
24059164:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
24059166:	687b      	ldr	r3, [r7, #4]
24059168:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
2405916a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
2405916c:	687b      	ldr	r3, [r7, #4]
2405916e:	6a1b      	ldr	r3, [r3, #32]
24059170:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
24059172:	697a      	ldr	r2, [r7, #20]
24059174:	4313      	orrs	r3, r2
24059176:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
24059178:	687b      	ldr	r3, [r7, #4]
2405917a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2405917c:	2b04      	cmp	r3, #4
2405917e:	d107      	bne.n	24059190 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
24059180:	687b      	ldr	r3, [r7, #4]
24059182:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
24059184:	687b      	ldr	r3, [r7, #4]
24059186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
24059188:	4313      	orrs	r3, r2
2405918a:	697a      	ldr	r2, [r7, #20]
2405918c:	4313      	orrs	r3, r2
2405918e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
24059190:	687b      	ldr	r3, [r7, #4]
24059192:	685b      	ldr	r3, [r3, #4]
24059194:	2b28      	cmp	r3, #40	@ 0x28
24059196:	d903      	bls.n	240591a0 <HAL_DMA_Init+0x26c>
24059198:	687b      	ldr	r3, [r7, #4]
2405919a:	685b      	ldr	r3, [r3, #4]
2405919c:	2b2e      	cmp	r3, #46	@ 0x2e
2405919e:	d91f      	bls.n	240591e0 <HAL_DMA_Init+0x2ac>
240591a0:	687b      	ldr	r3, [r7, #4]
240591a2:	685b      	ldr	r3, [r3, #4]
240591a4:	2b3e      	cmp	r3, #62	@ 0x3e
240591a6:	d903      	bls.n	240591b0 <HAL_DMA_Init+0x27c>
240591a8:	687b      	ldr	r3, [r7, #4]
240591aa:	685b      	ldr	r3, [r3, #4]
240591ac:	2b42      	cmp	r3, #66	@ 0x42
240591ae:	d917      	bls.n	240591e0 <HAL_DMA_Init+0x2ac>
240591b0:	687b      	ldr	r3, [r7, #4]
240591b2:	685b      	ldr	r3, [r3, #4]
240591b4:	2b46      	cmp	r3, #70	@ 0x46
240591b6:	d903      	bls.n	240591c0 <HAL_DMA_Init+0x28c>
240591b8:	687b      	ldr	r3, [r7, #4]
240591ba:	685b      	ldr	r3, [r3, #4]
240591bc:	2b48      	cmp	r3, #72	@ 0x48
240591be:	d90f      	bls.n	240591e0 <HAL_DMA_Init+0x2ac>
240591c0:	687b      	ldr	r3, [r7, #4]
240591c2:	685b      	ldr	r3, [r3, #4]
240591c4:	2b4e      	cmp	r3, #78	@ 0x4e
240591c6:	d903      	bls.n	240591d0 <HAL_DMA_Init+0x29c>
240591c8:	687b      	ldr	r3, [r7, #4]
240591ca:	685b      	ldr	r3, [r3, #4]
240591cc:	2b52      	cmp	r3, #82	@ 0x52
240591ce:	d907      	bls.n	240591e0 <HAL_DMA_Init+0x2ac>
240591d0:	687b      	ldr	r3, [r7, #4]
240591d2:	685b      	ldr	r3, [r3, #4]
240591d4:	2b73      	cmp	r3, #115	@ 0x73
240591d6:	d905      	bls.n	240591e4 <HAL_DMA_Init+0x2b0>
240591d8:	687b      	ldr	r3, [r7, #4]
240591da:	685b      	ldr	r3, [r3, #4]
240591dc:	2b77      	cmp	r3, #119	@ 0x77
240591de:	d801      	bhi.n	240591e4 <HAL_DMA_Init+0x2b0>
240591e0:	2301      	movs	r3, #1
240591e2:	e000      	b.n	240591e6 <HAL_DMA_Init+0x2b2>
240591e4:	2300      	movs	r3, #0
240591e6:	2b00      	cmp	r3, #0
240591e8:	d003      	beq.n	240591f2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
240591ea:	697b      	ldr	r3, [r7, #20]
240591ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
240591f0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
240591f2:	687b      	ldr	r3, [r7, #4]
240591f4:	681b      	ldr	r3, [r3, #0]
240591f6:	697a      	ldr	r2, [r7, #20]
240591f8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
240591fa:	687b      	ldr	r3, [r7, #4]
240591fc:	681b      	ldr	r3, [r3, #0]
240591fe:	695b      	ldr	r3, [r3, #20]
24059200:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
24059202:	697b      	ldr	r3, [r7, #20]
24059204:	f023 0307 	bic.w	r3, r3, #7
24059208:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
2405920a:	687b      	ldr	r3, [r7, #4]
2405920c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2405920e:	697a      	ldr	r2, [r7, #20]
24059210:	4313      	orrs	r3, r2
24059212:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
24059214:	687b      	ldr	r3, [r7, #4]
24059216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
24059218:	2b04      	cmp	r3, #4
2405921a:	d117      	bne.n	2405924c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
2405921c:	687b      	ldr	r3, [r7, #4]
2405921e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
24059220:	697a      	ldr	r2, [r7, #20]
24059222:	4313      	orrs	r3, r2
24059224:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
24059226:	687b      	ldr	r3, [r7, #4]
24059228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2405922a:	2b00      	cmp	r3, #0
2405922c:	d00e      	beq.n	2405924c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
2405922e:	6878      	ldr	r0, [r7, #4]
24059230:	f002 fbe0 	bl	2405b9f4 <DMA_CheckFifoParam>
24059234:	4603      	mov	r3, r0
24059236:	2b00      	cmp	r3, #0
24059238:	d008      	beq.n	2405924c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
2405923a:	687b      	ldr	r3, [r7, #4]
2405923c:	2240      	movs	r2, #64	@ 0x40
2405923e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
24059240:	687b      	ldr	r3, [r7, #4]
24059242:	2201      	movs	r2, #1
24059244:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
24059248:	2301      	movs	r3, #1
2405924a:	e1fd      	b.n	24059648 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
2405924c:	687b      	ldr	r3, [r7, #4]
2405924e:	681b      	ldr	r3, [r3, #0]
24059250:	697a      	ldr	r2, [r7, #20]
24059252:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
24059254:	6878      	ldr	r0, [r7, #4]
24059256:	f002 fb1b 	bl	2405b890 <DMA_CalcBaseAndBitshift>
2405925a:	4603      	mov	r3, r0
2405925c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
2405925e:	687b      	ldr	r3, [r7, #4]
24059260:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
24059262:	f003 031f 	and.w	r3, r3, #31
24059266:	223f      	movs	r2, #63	@ 0x3f
24059268:	409a      	lsls	r2, r3
2405926a:	68bb      	ldr	r3, [r7, #8]
2405926c:	609a      	str	r2, [r3, #8]
2405926e:	e0fd      	b.n	2405946c <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
24059270:	687b      	ldr	r3, [r7, #4]
24059272:	681b      	ldr	r3, [r3, #0]
24059274:	4a28      	ldr	r2, [pc, #160]	@ (24059318 <HAL_DMA_Init+0x3e4>)
24059276:	4293      	cmp	r3, r2
24059278:	d04a      	beq.n	24059310 <HAL_DMA_Init+0x3dc>
2405927a:	687b      	ldr	r3, [r7, #4]
2405927c:	681b      	ldr	r3, [r3, #0]
2405927e:	4a27      	ldr	r2, [pc, #156]	@ (2405931c <HAL_DMA_Init+0x3e8>)
24059280:	4293      	cmp	r3, r2
24059282:	d045      	beq.n	24059310 <HAL_DMA_Init+0x3dc>
24059284:	687b      	ldr	r3, [r7, #4]
24059286:	681b      	ldr	r3, [r3, #0]
24059288:	4a25      	ldr	r2, [pc, #148]	@ (24059320 <HAL_DMA_Init+0x3ec>)
2405928a:	4293      	cmp	r3, r2
2405928c:	d040      	beq.n	24059310 <HAL_DMA_Init+0x3dc>
2405928e:	687b      	ldr	r3, [r7, #4]
24059290:	681b      	ldr	r3, [r3, #0]
24059292:	4a24      	ldr	r2, [pc, #144]	@ (24059324 <HAL_DMA_Init+0x3f0>)
24059294:	4293      	cmp	r3, r2
24059296:	d03b      	beq.n	24059310 <HAL_DMA_Init+0x3dc>
24059298:	687b      	ldr	r3, [r7, #4]
2405929a:	681b      	ldr	r3, [r3, #0]
2405929c:	4a22      	ldr	r2, [pc, #136]	@ (24059328 <HAL_DMA_Init+0x3f4>)
2405929e:	4293      	cmp	r3, r2
240592a0:	d036      	beq.n	24059310 <HAL_DMA_Init+0x3dc>
240592a2:	687b      	ldr	r3, [r7, #4]
240592a4:	681b      	ldr	r3, [r3, #0]
240592a6:	4a21      	ldr	r2, [pc, #132]	@ (2405932c <HAL_DMA_Init+0x3f8>)
240592a8:	4293      	cmp	r3, r2
240592aa:	d031      	beq.n	24059310 <HAL_DMA_Init+0x3dc>
240592ac:	687b      	ldr	r3, [r7, #4]
240592ae:	681b      	ldr	r3, [r3, #0]
240592b0:	4a1f      	ldr	r2, [pc, #124]	@ (24059330 <HAL_DMA_Init+0x3fc>)
240592b2:	4293      	cmp	r3, r2
240592b4:	d02c      	beq.n	24059310 <HAL_DMA_Init+0x3dc>
240592b6:	687b      	ldr	r3, [r7, #4]
240592b8:	681b      	ldr	r3, [r3, #0]
240592ba:	4a1e      	ldr	r2, [pc, #120]	@ (24059334 <HAL_DMA_Init+0x400>)
240592bc:	4293      	cmp	r3, r2
240592be:	d027      	beq.n	24059310 <HAL_DMA_Init+0x3dc>
240592c0:	687b      	ldr	r3, [r7, #4]
240592c2:	681b      	ldr	r3, [r3, #0]
240592c4:	4a1c      	ldr	r2, [pc, #112]	@ (24059338 <HAL_DMA_Init+0x404>)
240592c6:	4293      	cmp	r3, r2
240592c8:	d022      	beq.n	24059310 <HAL_DMA_Init+0x3dc>
240592ca:	687b      	ldr	r3, [r7, #4]
240592cc:	681b      	ldr	r3, [r3, #0]
240592ce:	4a1b      	ldr	r2, [pc, #108]	@ (2405933c <HAL_DMA_Init+0x408>)
240592d0:	4293      	cmp	r3, r2
240592d2:	d01d      	beq.n	24059310 <HAL_DMA_Init+0x3dc>
240592d4:	687b      	ldr	r3, [r7, #4]
240592d6:	681b      	ldr	r3, [r3, #0]
240592d8:	4a19      	ldr	r2, [pc, #100]	@ (24059340 <HAL_DMA_Init+0x40c>)
240592da:	4293      	cmp	r3, r2
240592dc:	d018      	beq.n	24059310 <HAL_DMA_Init+0x3dc>
240592de:	687b      	ldr	r3, [r7, #4]
240592e0:	681b      	ldr	r3, [r3, #0]
240592e2:	4a18      	ldr	r2, [pc, #96]	@ (24059344 <HAL_DMA_Init+0x410>)
240592e4:	4293      	cmp	r3, r2
240592e6:	d013      	beq.n	24059310 <HAL_DMA_Init+0x3dc>
240592e8:	687b      	ldr	r3, [r7, #4]
240592ea:	681b      	ldr	r3, [r3, #0]
240592ec:	4a16      	ldr	r2, [pc, #88]	@ (24059348 <HAL_DMA_Init+0x414>)
240592ee:	4293      	cmp	r3, r2
240592f0:	d00e      	beq.n	24059310 <HAL_DMA_Init+0x3dc>
240592f2:	687b      	ldr	r3, [r7, #4]
240592f4:	681b      	ldr	r3, [r3, #0]
240592f6:	4a15      	ldr	r2, [pc, #84]	@ (2405934c <HAL_DMA_Init+0x418>)
240592f8:	4293      	cmp	r3, r2
240592fa:	d009      	beq.n	24059310 <HAL_DMA_Init+0x3dc>
240592fc:	687b      	ldr	r3, [r7, #4]
240592fe:	681b      	ldr	r3, [r3, #0]
24059300:	4a13      	ldr	r2, [pc, #76]	@ (24059350 <HAL_DMA_Init+0x41c>)
24059302:	4293      	cmp	r3, r2
24059304:	d004      	beq.n	24059310 <HAL_DMA_Init+0x3dc>
24059306:	687b      	ldr	r3, [r7, #4]
24059308:	681b      	ldr	r3, [r3, #0]
2405930a:	4a12      	ldr	r2, [pc, #72]	@ (24059354 <HAL_DMA_Init+0x420>)
2405930c:	4293      	cmp	r3, r2
2405930e:	d123      	bne.n	24059358 <HAL_DMA_Init+0x424>
24059310:	2301      	movs	r3, #1
24059312:	e022      	b.n	2405935a <HAL_DMA_Init+0x426>
24059314:	fe10803f 	.word	0xfe10803f
24059318:	48022c08 	.word	0x48022c08
2405931c:	48022c1c 	.word	0x48022c1c
24059320:	48022c30 	.word	0x48022c30
24059324:	48022c44 	.word	0x48022c44
24059328:	48022c58 	.word	0x48022c58
2405932c:	48022c6c 	.word	0x48022c6c
24059330:	48022c80 	.word	0x48022c80
24059334:	48022c94 	.word	0x48022c94
24059338:	58025408 	.word	0x58025408
2405933c:	5802541c 	.word	0x5802541c
24059340:	58025430 	.word	0x58025430
24059344:	58025444 	.word	0x58025444
24059348:	58025458 	.word	0x58025458
2405934c:	5802546c 	.word	0x5802546c
24059350:	58025480 	.word	0x58025480
24059354:	58025494 	.word	0x58025494
24059358:	2300      	movs	r3, #0
2405935a:	2b00      	cmp	r3, #0
2405935c:	d07d      	beq.n	2405945a <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
2405935e:	687b      	ldr	r3, [r7, #4]
24059360:	681b      	ldr	r3, [r3, #0]
24059362:	4a7f      	ldr	r2, [pc, #508]	@ (24059560 <HAL_DMA_Init+0x62c>)
24059364:	4293      	cmp	r3, r2
24059366:	d021      	beq.n	240593ac <HAL_DMA_Init+0x478>
24059368:	687b      	ldr	r3, [r7, #4]
2405936a:	681b      	ldr	r3, [r3, #0]
2405936c:	4a7d      	ldr	r2, [pc, #500]	@ (24059564 <HAL_DMA_Init+0x630>)
2405936e:	4293      	cmp	r3, r2
24059370:	d01c      	beq.n	240593ac <HAL_DMA_Init+0x478>
24059372:	687b      	ldr	r3, [r7, #4]
24059374:	681b      	ldr	r3, [r3, #0]
24059376:	4a7c      	ldr	r2, [pc, #496]	@ (24059568 <HAL_DMA_Init+0x634>)
24059378:	4293      	cmp	r3, r2
2405937a:	d017      	beq.n	240593ac <HAL_DMA_Init+0x478>
2405937c:	687b      	ldr	r3, [r7, #4]
2405937e:	681b      	ldr	r3, [r3, #0]
24059380:	4a7a      	ldr	r2, [pc, #488]	@ (2405956c <HAL_DMA_Init+0x638>)
24059382:	4293      	cmp	r3, r2
24059384:	d012      	beq.n	240593ac <HAL_DMA_Init+0x478>
24059386:	687b      	ldr	r3, [r7, #4]
24059388:	681b      	ldr	r3, [r3, #0]
2405938a:	4a79      	ldr	r2, [pc, #484]	@ (24059570 <HAL_DMA_Init+0x63c>)
2405938c:	4293      	cmp	r3, r2
2405938e:	d00d      	beq.n	240593ac <HAL_DMA_Init+0x478>
24059390:	687b      	ldr	r3, [r7, #4]
24059392:	681b      	ldr	r3, [r3, #0]
24059394:	4a77      	ldr	r2, [pc, #476]	@ (24059574 <HAL_DMA_Init+0x640>)
24059396:	4293      	cmp	r3, r2
24059398:	d008      	beq.n	240593ac <HAL_DMA_Init+0x478>
2405939a:	687b      	ldr	r3, [r7, #4]
2405939c:	681b      	ldr	r3, [r3, #0]
2405939e:	4a76      	ldr	r2, [pc, #472]	@ (24059578 <HAL_DMA_Init+0x644>)
240593a0:	4293      	cmp	r3, r2
240593a2:	d003      	beq.n	240593ac <HAL_DMA_Init+0x478>
240593a4:	687b      	ldr	r3, [r7, #4]
240593a6:	681b      	ldr	r3, [r3, #0]
240593a8:	4a74      	ldr	r2, [pc, #464]	@ (2405957c <HAL_DMA_Init+0x648>)
240593aa:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
240593ac:	687b      	ldr	r3, [r7, #4]
240593ae:	2202      	movs	r2, #2
240593b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
240593b4:	687b      	ldr	r3, [r7, #4]
240593b6:	2200      	movs	r2, #0
240593b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
240593bc:	687b      	ldr	r3, [r7, #4]
240593be:	681b      	ldr	r3, [r3, #0]
240593c0:	681b      	ldr	r3, [r3, #0]
240593c2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
240593c4:	697a      	ldr	r2, [r7, #20]
240593c6:	4b6e      	ldr	r3, [pc, #440]	@ (24059580 <HAL_DMA_Init+0x64c>)
240593c8:	4013      	ands	r3, r2
240593ca:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
240593cc:	687b      	ldr	r3, [r7, #4]
240593ce:	689b      	ldr	r3, [r3, #8]
240593d0:	2b40      	cmp	r3, #64	@ 0x40
240593d2:	d008      	beq.n	240593e6 <HAL_DMA_Init+0x4b2>
240593d4:	687b      	ldr	r3, [r7, #4]
240593d6:	689b      	ldr	r3, [r3, #8]
240593d8:	2b80      	cmp	r3, #128	@ 0x80
240593da:	d102      	bne.n	240593e2 <HAL_DMA_Init+0x4ae>
240593dc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
240593e0:	e002      	b.n	240593e8 <HAL_DMA_Init+0x4b4>
240593e2:	2300      	movs	r3, #0
240593e4:	e000      	b.n	240593e8 <HAL_DMA_Init+0x4b4>
240593e6:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
240593e8:	687a      	ldr	r2, [r7, #4]
240593ea:	68d2      	ldr	r2, [r2, #12]
240593ec:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
240593ee:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
240593f0:	687b      	ldr	r3, [r7, #4]
240593f2:	691b      	ldr	r3, [r3, #16]
240593f4:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
240593f6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
240593f8:	687b      	ldr	r3, [r7, #4]
240593fa:	695b      	ldr	r3, [r3, #20]
240593fc:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
240593fe:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
24059400:	687b      	ldr	r3, [r7, #4]
24059402:	699b      	ldr	r3, [r3, #24]
24059404:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
24059406:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
24059408:	687b      	ldr	r3, [r7, #4]
2405940a:	69db      	ldr	r3, [r3, #28]
2405940c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
2405940e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
24059410:	687b      	ldr	r3, [r7, #4]
24059412:	6a1b      	ldr	r3, [r3, #32]
24059414:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
24059416:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
24059418:	697a      	ldr	r2, [r7, #20]
2405941a:	4313      	orrs	r3, r2
2405941c:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
2405941e:	687b      	ldr	r3, [r7, #4]
24059420:	681b      	ldr	r3, [r3, #0]
24059422:	697a      	ldr	r2, [r7, #20]
24059424:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
24059426:	687b      	ldr	r3, [r7, #4]
24059428:	681b      	ldr	r3, [r3, #0]
2405942a:	461a      	mov	r2, r3
2405942c:	4b55      	ldr	r3, [pc, #340]	@ (24059584 <HAL_DMA_Init+0x650>)
2405942e:	4413      	add	r3, r2
24059430:	4a55      	ldr	r2, [pc, #340]	@ (24059588 <HAL_DMA_Init+0x654>)
24059432:	fba2 2303 	umull	r2, r3, r2, r3
24059436:	091b      	lsrs	r3, r3, #4
24059438:	009a      	lsls	r2, r3, #2
2405943a:	687b      	ldr	r3, [r7, #4]
2405943c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
2405943e:	6878      	ldr	r0, [r7, #4]
24059440:	f002 fa26 	bl	2405b890 <DMA_CalcBaseAndBitshift>
24059444:	4603      	mov	r3, r0
24059446:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24059448:	687b      	ldr	r3, [r7, #4]
2405944a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
2405944c:	f003 031f 	and.w	r3, r3, #31
24059450:	2201      	movs	r2, #1
24059452:	409a      	lsls	r2, r3
24059454:	68fb      	ldr	r3, [r7, #12]
24059456:	605a      	str	r2, [r3, #4]
24059458:	e008      	b.n	2405946c <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
2405945a:	687b      	ldr	r3, [r7, #4]
2405945c:	2240      	movs	r2, #64	@ 0x40
2405945e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
24059460:	687b      	ldr	r3, [r7, #4]
24059462:	2203      	movs	r2, #3
24059464:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
24059468:	2301      	movs	r3, #1
2405946a:	e0ed      	b.n	24059648 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
2405946c:	687b      	ldr	r3, [r7, #4]
2405946e:	681b      	ldr	r3, [r3, #0]
24059470:	4a46      	ldr	r2, [pc, #280]	@ (2405958c <HAL_DMA_Init+0x658>)
24059472:	4293      	cmp	r3, r2
24059474:	d072      	beq.n	2405955c <HAL_DMA_Init+0x628>
24059476:	687b      	ldr	r3, [r7, #4]
24059478:	681b      	ldr	r3, [r3, #0]
2405947a:	4a45      	ldr	r2, [pc, #276]	@ (24059590 <HAL_DMA_Init+0x65c>)
2405947c:	4293      	cmp	r3, r2
2405947e:	d06d      	beq.n	2405955c <HAL_DMA_Init+0x628>
24059480:	687b      	ldr	r3, [r7, #4]
24059482:	681b      	ldr	r3, [r3, #0]
24059484:	4a43      	ldr	r2, [pc, #268]	@ (24059594 <HAL_DMA_Init+0x660>)
24059486:	4293      	cmp	r3, r2
24059488:	d068      	beq.n	2405955c <HAL_DMA_Init+0x628>
2405948a:	687b      	ldr	r3, [r7, #4]
2405948c:	681b      	ldr	r3, [r3, #0]
2405948e:	4a42      	ldr	r2, [pc, #264]	@ (24059598 <HAL_DMA_Init+0x664>)
24059490:	4293      	cmp	r3, r2
24059492:	d063      	beq.n	2405955c <HAL_DMA_Init+0x628>
24059494:	687b      	ldr	r3, [r7, #4]
24059496:	681b      	ldr	r3, [r3, #0]
24059498:	4a40      	ldr	r2, [pc, #256]	@ (2405959c <HAL_DMA_Init+0x668>)
2405949a:	4293      	cmp	r3, r2
2405949c:	d05e      	beq.n	2405955c <HAL_DMA_Init+0x628>
2405949e:	687b      	ldr	r3, [r7, #4]
240594a0:	681b      	ldr	r3, [r3, #0]
240594a2:	4a3f      	ldr	r2, [pc, #252]	@ (240595a0 <HAL_DMA_Init+0x66c>)
240594a4:	4293      	cmp	r3, r2
240594a6:	d059      	beq.n	2405955c <HAL_DMA_Init+0x628>
240594a8:	687b      	ldr	r3, [r7, #4]
240594aa:	681b      	ldr	r3, [r3, #0]
240594ac:	4a3d      	ldr	r2, [pc, #244]	@ (240595a4 <HAL_DMA_Init+0x670>)
240594ae:	4293      	cmp	r3, r2
240594b0:	d054      	beq.n	2405955c <HAL_DMA_Init+0x628>
240594b2:	687b      	ldr	r3, [r7, #4]
240594b4:	681b      	ldr	r3, [r3, #0]
240594b6:	4a3c      	ldr	r2, [pc, #240]	@ (240595a8 <HAL_DMA_Init+0x674>)
240594b8:	4293      	cmp	r3, r2
240594ba:	d04f      	beq.n	2405955c <HAL_DMA_Init+0x628>
240594bc:	687b      	ldr	r3, [r7, #4]
240594be:	681b      	ldr	r3, [r3, #0]
240594c0:	4a3a      	ldr	r2, [pc, #232]	@ (240595ac <HAL_DMA_Init+0x678>)
240594c2:	4293      	cmp	r3, r2
240594c4:	d04a      	beq.n	2405955c <HAL_DMA_Init+0x628>
240594c6:	687b      	ldr	r3, [r7, #4]
240594c8:	681b      	ldr	r3, [r3, #0]
240594ca:	4a39      	ldr	r2, [pc, #228]	@ (240595b0 <HAL_DMA_Init+0x67c>)
240594cc:	4293      	cmp	r3, r2
240594ce:	d045      	beq.n	2405955c <HAL_DMA_Init+0x628>
240594d0:	687b      	ldr	r3, [r7, #4]
240594d2:	681b      	ldr	r3, [r3, #0]
240594d4:	4a37      	ldr	r2, [pc, #220]	@ (240595b4 <HAL_DMA_Init+0x680>)
240594d6:	4293      	cmp	r3, r2
240594d8:	d040      	beq.n	2405955c <HAL_DMA_Init+0x628>
240594da:	687b      	ldr	r3, [r7, #4]
240594dc:	681b      	ldr	r3, [r3, #0]
240594de:	4a36      	ldr	r2, [pc, #216]	@ (240595b8 <HAL_DMA_Init+0x684>)
240594e0:	4293      	cmp	r3, r2
240594e2:	d03b      	beq.n	2405955c <HAL_DMA_Init+0x628>
240594e4:	687b      	ldr	r3, [r7, #4]
240594e6:	681b      	ldr	r3, [r3, #0]
240594e8:	4a34      	ldr	r2, [pc, #208]	@ (240595bc <HAL_DMA_Init+0x688>)
240594ea:	4293      	cmp	r3, r2
240594ec:	d036      	beq.n	2405955c <HAL_DMA_Init+0x628>
240594ee:	687b      	ldr	r3, [r7, #4]
240594f0:	681b      	ldr	r3, [r3, #0]
240594f2:	4a33      	ldr	r2, [pc, #204]	@ (240595c0 <HAL_DMA_Init+0x68c>)
240594f4:	4293      	cmp	r3, r2
240594f6:	d031      	beq.n	2405955c <HAL_DMA_Init+0x628>
240594f8:	687b      	ldr	r3, [r7, #4]
240594fa:	681b      	ldr	r3, [r3, #0]
240594fc:	4a31      	ldr	r2, [pc, #196]	@ (240595c4 <HAL_DMA_Init+0x690>)
240594fe:	4293      	cmp	r3, r2
24059500:	d02c      	beq.n	2405955c <HAL_DMA_Init+0x628>
24059502:	687b      	ldr	r3, [r7, #4]
24059504:	681b      	ldr	r3, [r3, #0]
24059506:	4a30      	ldr	r2, [pc, #192]	@ (240595c8 <HAL_DMA_Init+0x694>)
24059508:	4293      	cmp	r3, r2
2405950a:	d027      	beq.n	2405955c <HAL_DMA_Init+0x628>
2405950c:	687b      	ldr	r3, [r7, #4]
2405950e:	681b      	ldr	r3, [r3, #0]
24059510:	4a13      	ldr	r2, [pc, #76]	@ (24059560 <HAL_DMA_Init+0x62c>)
24059512:	4293      	cmp	r3, r2
24059514:	d022      	beq.n	2405955c <HAL_DMA_Init+0x628>
24059516:	687b      	ldr	r3, [r7, #4]
24059518:	681b      	ldr	r3, [r3, #0]
2405951a:	4a12      	ldr	r2, [pc, #72]	@ (24059564 <HAL_DMA_Init+0x630>)
2405951c:	4293      	cmp	r3, r2
2405951e:	d01d      	beq.n	2405955c <HAL_DMA_Init+0x628>
24059520:	687b      	ldr	r3, [r7, #4]
24059522:	681b      	ldr	r3, [r3, #0]
24059524:	4a10      	ldr	r2, [pc, #64]	@ (24059568 <HAL_DMA_Init+0x634>)
24059526:	4293      	cmp	r3, r2
24059528:	d018      	beq.n	2405955c <HAL_DMA_Init+0x628>
2405952a:	687b      	ldr	r3, [r7, #4]
2405952c:	681b      	ldr	r3, [r3, #0]
2405952e:	4a0f      	ldr	r2, [pc, #60]	@ (2405956c <HAL_DMA_Init+0x638>)
24059530:	4293      	cmp	r3, r2
24059532:	d013      	beq.n	2405955c <HAL_DMA_Init+0x628>
24059534:	687b      	ldr	r3, [r7, #4]
24059536:	681b      	ldr	r3, [r3, #0]
24059538:	4a0d      	ldr	r2, [pc, #52]	@ (24059570 <HAL_DMA_Init+0x63c>)
2405953a:	4293      	cmp	r3, r2
2405953c:	d00e      	beq.n	2405955c <HAL_DMA_Init+0x628>
2405953e:	687b      	ldr	r3, [r7, #4]
24059540:	681b      	ldr	r3, [r3, #0]
24059542:	4a0c      	ldr	r2, [pc, #48]	@ (24059574 <HAL_DMA_Init+0x640>)
24059544:	4293      	cmp	r3, r2
24059546:	d009      	beq.n	2405955c <HAL_DMA_Init+0x628>
24059548:	687b      	ldr	r3, [r7, #4]
2405954a:	681b      	ldr	r3, [r3, #0]
2405954c:	4a0a      	ldr	r2, [pc, #40]	@ (24059578 <HAL_DMA_Init+0x644>)
2405954e:	4293      	cmp	r3, r2
24059550:	d004      	beq.n	2405955c <HAL_DMA_Init+0x628>
24059552:	687b      	ldr	r3, [r7, #4]
24059554:	681b      	ldr	r3, [r3, #0]
24059556:	4a09      	ldr	r2, [pc, #36]	@ (2405957c <HAL_DMA_Init+0x648>)
24059558:	4293      	cmp	r3, r2
2405955a:	d137      	bne.n	240595cc <HAL_DMA_Init+0x698>
2405955c:	2301      	movs	r3, #1
2405955e:	e036      	b.n	240595ce <HAL_DMA_Init+0x69a>
24059560:	58025408 	.word	0x58025408
24059564:	5802541c 	.word	0x5802541c
24059568:	58025430 	.word	0x58025430
2405956c:	58025444 	.word	0x58025444
24059570:	58025458 	.word	0x58025458
24059574:	5802546c 	.word	0x5802546c
24059578:	58025480 	.word	0x58025480
2405957c:	58025494 	.word	0x58025494
24059580:	fffe000f 	.word	0xfffe000f
24059584:	a7fdabf8 	.word	0xa7fdabf8
24059588:	cccccccd 	.word	0xcccccccd
2405958c:	40020010 	.word	0x40020010
24059590:	40020028 	.word	0x40020028
24059594:	40020040 	.word	0x40020040
24059598:	40020058 	.word	0x40020058
2405959c:	40020070 	.word	0x40020070
240595a0:	40020088 	.word	0x40020088
240595a4:	400200a0 	.word	0x400200a0
240595a8:	400200b8 	.word	0x400200b8
240595ac:	40020410 	.word	0x40020410
240595b0:	40020428 	.word	0x40020428
240595b4:	40020440 	.word	0x40020440
240595b8:	40020458 	.word	0x40020458
240595bc:	40020470 	.word	0x40020470
240595c0:	40020488 	.word	0x40020488
240595c4:	400204a0 	.word	0x400204a0
240595c8:	400204b8 	.word	0x400204b8
240595cc:	2300      	movs	r3, #0
240595ce:	2b00      	cmp	r3, #0
240595d0:	d032      	beq.n	24059638 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
240595d2:	6878      	ldr	r0, [r7, #4]
240595d4:	f002 fa8a 	bl	2405baec <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
240595d8:	687b      	ldr	r3, [r7, #4]
240595da:	689b      	ldr	r3, [r3, #8]
240595dc:	2b80      	cmp	r3, #128	@ 0x80
240595de:	d102      	bne.n	240595e6 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
240595e0:	687b      	ldr	r3, [r7, #4]
240595e2:	2200      	movs	r2, #0
240595e4:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
240595e6:	687b      	ldr	r3, [r7, #4]
240595e8:	685a      	ldr	r2, [r3, #4]
240595ea:	687b      	ldr	r3, [r7, #4]
240595ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
240595ee:	b2d2      	uxtb	r2, r2
240595f0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
240595f2:	687b      	ldr	r3, [r7, #4]
240595f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
240595f6:	687a      	ldr	r2, [r7, #4]
240595f8:	6e92      	ldr	r2, [r2, #104]	@ 0x68
240595fa:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
240595fc:	687b      	ldr	r3, [r7, #4]
240595fe:	685b      	ldr	r3, [r3, #4]
24059600:	2b00      	cmp	r3, #0
24059602:	d010      	beq.n	24059626 <HAL_DMA_Init+0x6f2>
24059604:	687b      	ldr	r3, [r7, #4]
24059606:	685b      	ldr	r3, [r3, #4]
24059608:	2b08      	cmp	r3, #8
2405960a:	d80c      	bhi.n	24059626 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
2405960c:	6878      	ldr	r0, [r7, #4]
2405960e:	f002 fb07 	bl	2405bc20 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
24059612:	687b      	ldr	r3, [r7, #4]
24059614:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
24059616:	2200      	movs	r2, #0
24059618:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
2405961a:	687b      	ldr	r3, [r7, #4]
2405961c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2405961e:	687a      	ldr	r2, [r7, #4]
24059620:	6f52      	ldr	r2, [r2, #116]	@ 0x74
24059622:	605a      	str	r2, [r3, #4]
24059624:	e008      	b.n	24059638 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
24059626:	687b      	ldr	r3, [r7, #4]
24059628:	2200      	movs	r2, #0
2405962a:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
2405962c:	687b      	ldr	r3, [r7, #4]
2405962e:	2200      	movs	r2, #0
24059630:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
24059632:	687b      	ldr	r3, [r7, #4]
24059634:	2200      	movs	r2, #0
24059636:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24059638:	687b      	ldr	r3, [r7, #4]
2405963a:	2200      	movs	r2, #0
2405963c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
2405963e:	687b      	ldr	r3, [r7, #4]
24059640:	2201      	movs	r2, #1
24059642:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
24059646:	2300      	movs	r3, #0
}
24059648:	4618      	mov	r0, r3
2405964a:	3718      	adds	r7, #24
2405964c:	46bd      	mov	sp, r7
2405964e:	bd80      	pop	{r7, pc}

24059650 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
24059650:	b580      	push	{r7, lr}
24059652:	b086      	sub	sp, #24
24059654:	af00      	add	r7, sp, #0
24059656:	60f8      	str	r0, [r7, #12]
24059658:	60b9      	str	r1, [r7, #8]
2405965a:	607a      	str	r2, [r7, #4]
2405965c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
2405965e:	2300      	movs	r3, #0
24059660:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
24059662:	68fb      	ldr	r3, [r7, #12]
24059664:	2b00      	cmp	r3, #0
24059666:	d101      	bne.n	2405966c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
24059668:	2301      	movs	r3, #1
2405966a:	e226      	b.n	24059aba <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
2405966c:	68fb      	ldr	r3, [r7, #12]
2405966e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
24059672:	2b01      	cmp	r3, #1
24059674:	d101      	bne.n	2405967a <HAL_DMA_Start_IT+0x2a>
24059676:	2302      	movs	r3, #2
24059678:	e21f      	b.n	24059aba <HAL_DMA_Start_IT+0x46a>
2405967a:	68fb      	ldr	r3, [r7, #12]
2405967c:	2201      	movs	r2, #1
2405967e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
24059682:	68fb      	ldr	r3, [r7, #12]
24059684:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
24059688:	b2db      	uxtb	r3, r3
2405968a:	2b01      	cmp	r3, #1
2405968c:	f040 820a 	bne.w	24059aa4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
24059690:	68fb      	ldr	r3, [r7, #12]
24059692:	2202      	movs	r2, #2
24059694:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24059698:	68fb      	ldr	r3, [r7, #12]
2405969a:	2200      	movs	r2, #0
2405969c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
2405969e:	68fb      	ldr	r3, [r7, #12]
240596a0:	681b      	ldr	r3, [r3, #0]
240596a2:	4a68      	ldr	r2, [pc, #416]	@ (24059844 <HAL_DMA_Start_IT+0x1f4>)
240596a4:	4293      	cmp	r3, r2
240596a6:	d04a      	beq.n	2405973e <HAL_DMA_Start_IT+0xee>
240596a8:	68fb      	ldr	r3, [r7, #12]
240596aa:	681b      	ldr	r3, [r3, #0]
240596ac:	4a66      	ldr	r2, [pc, #408]	@ (24059848 <HAL_DMA_Start_IT+0x1f8>)
240596ae:	4293      	cmp	r3, r2
240596b0:	d045      	beq.n	2405973e <HAL_DMA_Start_IT+0xee>
240596b2:	68fb      	ldr	r3, [r7, #12]
240596b4:	681b      	ldr	r3, [r3, #0]
240596b6:	4a65      	ldr	r2, [pc, #404]	@ (2405984c <HAL_DMA_Start_IT+0x1fc>)
240596b8:	4293      	cmp	r3, r2
240596ba:	d040      	beq.n	2405973e <HAL_DMA_Start_IT+0xee>
240596bc:	68fb      	ldr	r3, [r7, #12]
240596be:	681b      	ldr	r3, [r3, #0]
240596c0:	4a63      	ldr	r2, [pc, #396]	@ (24059850 <HAL_DMA_Start_IT+0x200>)
240596c2:	4293      	cmp	r3, r2
240596c4:	d03b      	beq.n	2405973e <HAL_DMA_Start_IT+0xee>
240596c6:	68fb      	ldr	r3, [r7, #12]
240596c8:	681b      	ldr	r3, [r3, #0]
240596ca:	4a62      	ldr	r2, [pc, #392]	@ (24059854 <HAL_DMA_Start_IT+0x204>)
240596cc:	4293      	cmp	r3, r2
240596ce:	d036      	beq.n	2405973e <HAL_DMA_Start_IT+0xee>
240596d0:	68fb      	ldr	r3, [r7, #12]
240596d2:	681b      	ldr	r3, [r3, #0]
240596d4:	4a60      	ldr	r2, [pc, #384]	@ (24059858 <HAL_DMA_Start_IT+0x208>)
240596d6:	4293      	cmp	r3, r2
240596d8:	d031      	beq.n	2405973e <HAL_DMA_Start_IT+0xee>
240596da:	68fb      	ldr	r3, [r7, #12]
240596dc:	681b      	ldr	r3, [r3, #0]
240596de:	4a5f      	ldr	r2, [pc, #380]	@ (2405985c <HAL_DMA_Start_IT+0x20c>)
240596e0:	4293      	cmp	r3, r2
240596e2:	d02c      	beq.n	2405973e <HAL_DMA_Start_IT+0xee>
240596e4:	68fb      	ldr	r3, [r7, #12]
240596e6:	681b      	ldr	r3, [r3, #0]
240596e8:	4a5d      	ldr	r2, [pc, #372]	@ (24059860 <HAL_DMA_Start_IT+0x210>)
240596ea:	4293      	cmp	r3, r2
240596ec:	d027      	beq.n	2405973e <HAL_DMA_Start_IT+0xee>
240596ee:	68fb      	ldr	r3, [r7, #12]
240596f0:	681b      	ldr	r3, [r3, #0]
240596f2:	4a5c      	ldr	r2, [pc, #368]	@ (24059864 <HAL_DMA_Start_IT+0x214>)
240596f4:	4293      	cmp	r3, r2
240596f6:	d022      	beq.n	2405973e <HAL_DMA_Start_IT+0xee>
240596f8:	68fb      	ldr	r3, [r7, #12]
240596fa:	681b      	ldr	r3, [r3, #0]
240596fc:	4a5a      	ldr	r2, [pc, #360]	@ (24059868 <HAL_DMA_Start_IT+0x218>)
240596fe:	4293      	cmp	r3, r2
24059700:	d01d      	beq.n	2405973e <HAL_DMA_Start_IT+0xee>
24059702:	68fb      	ldr	r3, [r7, #12]
24059704:	681b      	ldr	r3, [r3, #0]
24059706:	4a59      	ldr	r2, [pc, #356]	@ (2405986c <HAL_DMA_Start_IT+0x21c>)
24059708:	4293      	cmp	r3, r2
2405970a:	d018      	beq.n	2405973e <HAL_DMA_Start_IT+0xee>
2405970c:	68fb      	ldr	r3, [r7, #12]
2405970e:	681b      	ldr	r3, [r3, #0]
24059710:	4a57      	ldr	r2, [pc, #348]	@ (24059870 <HAL_DMA_Start_IT+0x220>)
24059712:	4293      	cmp	r3, r2
24059714:	d013      	beq.n	2405973e <HAL_DMA_Start_IT+0xee>
24059716:	68fb      	ldr	r3, [r7, #12]
24059718:	681b      	ldr	r3, [r3, #0]
2405971a:	4a56      	ldr	r2, [pc, #344]	@ (24059874 <HAL_DMA_Start_IT+0x224>)
2405971c:	4293      	cmp	r3, r2
2405971e:	d00e      	beq.n	2405973e <HAL_DMA_Start_IT+0xee>
24059720:	68fb      	ldr	r3, [r7, #12]
24059722:	681b      	ldr	r3, [r3, #0]
24059724:	4a54      	ldr	r2, [pc, #336]	@ (24059878 <HAL_DMA_Start_IT+0x228>)
24059726:	4293      	cmp	r3, r2
24059728:	d009      	beq.n	2405973e <HAL_DMA_Start_IT+0xee>
2405972a:	68fb      	ldr	r3, [r7, #12]
2405972c:	681b      	ldr	r3, [r3, #0]
2405972e:	4a53      	ldr	r2, [pc, #332]	@ (2405987c <HAL_DMA_Start_IT+0x22c>)
24059730:	4293      	cmp	r3, r2
24059732:	d004      	beq.n	2405973e <HAL_DMA_Start_IT+0xee>
24059734:	68fb      	ldr	r3, [r7, #12]
24059736:	681b      	ldr	r3, [r3, #0]
24059738:	4a51      	ldr	r2, [pc, #324]	@ (24059880 <HAL_DMA_Start_IT+0x230>)
2405973a:	4293      	cmp	r3, r2
2405973c:	d108      	bne.n	24059750 <HAL_DMA_Start_IT+0x100>
2405973e:	68fb      	ldr	r3, [r7, #12]
24059740:	681b      	ldr	r3, [r3, #0]
24059742:	681a      	ldr	r2, [r3, #0]
24059744:	68fb      	ldr	r3, [r7, #12]
24059746:	681b      	ldr	r3, [r3, #0]
24059748:	f022 0201 	bic.w	r2, r2, #1
2405974c:	601a      	str	r2, [r3, #0]
2405974e:	e007      	b.n	24059760 <HAL_DMA_Start_IT+0x110>
24059750:	68fb      	ldr	r3, [r7, #12]
24059752:	681b      	ldr	r3, [r3, #0]
24059754:	681a      	ldr	r2, [r3, #0]
24059756:	68fb      	ldr	r3, [r7, #12]
24059758:	681b      	ldr	r3, [r3, #0]
2405975a:	f022 0201 	bic.w	r2, r2, #1
2405975e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
24059760:	683b      	ldr	r3, [r7, #0]
24059762:	687a      	ldr	r2, [r7, #4]
24059764:	68b9      	ldr	r1, [r7, #8]
24059766:	68f8      	ldr	r0, [r7, #12]
24059768:	f001 feae 	bl	2405b4c8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
2405976c:	68fb      	ldr	r3, [r7, #12]
2405976e:	681b      	ldr	r3, [r3, #0]
24059770:	4a34      	ldr	r2, [pc, #208]	@ (24059844 <HAL_DMA_Start_IT+0x1f4>)
24059772:	4293      	cmp	r3, r2
24059774:	d04a      	beq.n	2405980c <HAL_DMA_Start_IT+0x1bc>
24059776:	68fb      	ldr	r3, [r7, #12]
24059778:	681b      	ldr	r3, [r3, #0]
2405977a:	4a33      	ldr	r2, [pc, #204]	@ (24059848 <HAL_DMA_Start_IT+0x1f8>)
2405977c:	4293      	cmp	r3, r2
2405977e:	d045      	beq.n	2405980c <HAL_DMA_Start_IT+0x1bc>
24059780:	68fb      	ldr	r3, [r7, #12]
24059782:	681b      	ldr	r3, [r3, #0]
24059784:	4a31      	ldr	r2, [pc, #196]	@ (2405984c <HAL_DMA_Start_IT+0x1fc>)
24059786:	4293      	cmp	r3, r2
24059788:	d040      	beq.n	2405980c <HAL_DMA_Start_IT+0x1bc>
2405978a:	68fb      	ldr	r3, [r7, #12]
2405978c:	681b      	ldr	r3, [r3, #0]
2405978e:	4a30      	ldr	r2, [pc, #192]	@ (24059850 <HAL_DMA_Start_IT+0x200>)
24059790:	4293      	cmp	r3, r2
24059792:	d03b      	beq.n	2405980c <HAL_DMA_Start_IT+0x1bc>
24059794:	68fb      	ldr	r3, [r7, #12]
24059796:	681b      	ldr	r3, [r3, #0]
24059798:	4a2e      	ldr	r2, [pc, #184]	@ (24059854 <HAL_DMA_Start_IT+0x204>)
2405979a:	4293      	cmp	r3, r2
2405979c:	d036      	beq.n	2405980c <HAL_DMA_Start_IT+0x1bc>
2405979e:	68fb      	ldr	r3, [r7, #12]
240597a0:	681b      	ldr	r3, [r3, #0]
240597a2:	4a2d      	ldr	r2, [pc, #180]	@ (24059858 <HAL_DMA_Start_IT+0x208>)
240597a4:	4293      	cmp	r3, r2
240597a6:	d031      	beq.n	2405980c <HAL_DMA_Start_IT+0x1bc>
240597a8:	68fb      	ldr	r3, [r7, #12]
240597aa:	681b      	ldr	r3, [r3, #0]
240597ac:	4a2b      	ldr	r2, [pc, #172]	@ (2405985c <HAL_DMA_Start_IT+0x20c>)
240597ae:	4293      	cmp	r3, r2
240597b0:	d02c      	beq.n	2405980c <HAL_DMA_Start_IT+0x1bc>
240597b2:	68fb      	ldr	r3, [r7, #12]
240597b4:	681b      	ldr	r3, [r3, #0]
240597b6:	4a2a      	ldr	r2, [pc, #168]	@ (24059860 <HAL_DMA_Start_IT+0x210>)
240597b8:	4293      	cmp	r3, r2
240597ba:	d027      	beq.n	2405980c <HAL_DMA_Start_IT+0x1bc>
240597bc:	68fb      	ldr	r3, [r7, #12]
240597be:	681b      	ldr	r3, [r3, #0]
240597c0:	4a28      	ldr	r2, [pc, #160]	@ (24059864 <HAL_DMA_Start_IT+0x214>)
240597c2:	4293      	cmp	r3, r2
240597c4:	d022      	beq.n	2405980c <HAL_DMA_Start_IT+0x1bc>
240597c6:	68fb      	ldr	r3, [r7, #12]
240597c8:	681b      	ldr	r3, [r3, #0]
240597ca:	4a27      	ldr	r2, [pc, #156]	@ (24059868 <HAL_DMA_Start_IT+0x218>)
240597cc:	4293      	cmp	r3, r2
240597ce:	d01d      	beq.n	2405980c <HAL_DMA_Start_IT+0x1bc>
240597d0:	68fb      	ldr	r3, [r7, #12]
240597d2:	681b      	ldr	r3, [r3, #0]
240597d4:	4a25      	ldr	r2, [pc, #148]	@ (2405986c <HAL_DMA_Start_IT+0x21c>)
240597d6:	4293      	cmp	r3, r2
240597d8:	d018      	beq.n	2405980c <HAL_DMA_Start_IT+0x1bc>
240597da:	68fb      	ldr	r3, [r7, #12]
240597dc:	681b      	ldr	r3, [r3, #0]
240597de:	4a24      	ldr	r2, [pc, #144]	@ (24059870 <HAL_DMA_Start_IT+0x220>)
240597e0:	4293      	cmp	r3, r2
240597e2:	d013      	beq.n	2405980c <HAL_DMA_Start_IT+0x1bc>
240597e4:	68fb      	ldr	r3, [r7, #12]
240597e6:	681b      	ldr	r3, [r3, #0]
240597e8:	4a22      	ldr	r2, [pc, #136]	@ (24059874 <HAL_DMA_Start_IT+0x224>)
240597ea:	4293      	cmp	r3, r2
240597ec:	d00e      	beq.n	2405980c <HAL_DMA_Start_IT+0x1bc>
240597ee:	68fb      	ldr	r3, [r7, #12]
240597f0:	681b      	ldr	r3, [r3, #0]
240597f2:	4a21      	ldr	r2, [pc, #132]	@ (24059878 <HAL_DMA_Start_IT+0x228>)
240597f4:	4293      	cmp	r3, r2
240597f6:	d009      	beq.n	2405980c <HAL_DMA_Start_IT+0x1bc>
240597f8:	68fb      	ldr	r3, [r7, #12]
240597fa:	681b      	ldr	r3, [r3, #0]
240597fc:	4a1f      	ldr	r2, [pc, #124]	@ (2405987c <HAL_DMA_Start_IT+0x22c>)
240597fe:	4293      	cmp	r3, r2
24059800:	d004      	beq.n	2405980c <HAL_DMA_Start_IT+0x1bc>
24059802:	68fb      	ldr	r3, [r7, #12]
24059804:	681b      	ldr	r3, [r3, #0]
24059806:	4a1e      	ldr	r2, [pc, #120]	@ (24059880 <HAL_DMA_Start_IT+0x230>)
24059808:	4293      	cmp	r3, r2
2405980a:	d101      	bne.n	24059810 <HAL_DMA_Start_IT+0x1c0>
2405980c:	2301      	movs	r3, #1
2405980e:	e000      	b.n	24059812 <HAL_DMA_Start_IT+0x1c2>
24059810:	2300      	movs	r3, #0
24059812:	2b00      	cmp	r3, #0
24059814:	d036      	beq.n	24059884 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
24059816:	68fb      	ldr	r3, [r7, #12]
24059818:	681b      	ldr	r3, [r3, #0]
2405981a:	681b      	ldr	r3, [r3, #0]
2405981c:	f023 021e 	bic.w	r2, r3, #30
24059820:	68fb      	ldr	r3, [r7, #12]
24059822:	681b      	ldr	r3, [r3, #0]
24059824:	f042 0216 	orr.w	r2, r2, #22
24059828:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
2405982a:	68fb      	ldr	r3, [r7, #12]
2405982c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2405982e:	2b00      	cmp	r3, #0
24059830:	d03e      	beq.n	240598b0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
24059832:	68fb      	ldr	r3, [r7, #12]
24059834:	681b      	ldr	r3, [r3, #0]
24059836:	681a      	ldr	r2, [r3, #0]
24059838:	68fb      	ldr	r3, [r7, #12]
2405983a:	681b      	ldr	r3, [r3, #0]
2405983c:	f042 0208 	orr.w	r2, r2, #8
24059840:	601a      	str	r2, [r3, #0]
24059842:	e035      	b.n	240598b0 <HAL_DMA_Start_IT+0x260>
24059844:	40020010 	.word	0x40020010
24059848:	40020028 	.word	0x40020028
2405984c:	40020040 	.word	0x40020040
24059850:	40020058 	.word	0x40020058
24059854:	40020070 	.word	0x40020070
24059858:	40020088 	.word	0x40020088
2405985c:	400200a0 	.word	0x400200a0
24059860:	400200b8 	.word	0x400200b8
24059864:	40020410 	.word	0x40020410
24059868:	40020428 	.word	0x40020428
2405986c:	40020440 	.word	0x40020440
24059870:	40020458 	.word	0x40020458
24059874:	40020470 	.word	0x40020470
24059878:	40020488 	.word	0x40020488
2405987c:	400204a0 	.word	0x400204a0
24059880:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
24059884:	68fb      	ldr	r3, [r7, #12]
24059886:	681b      	ldr	r3, [r3, #0]
24059888:	681b      	ldr	r3, [r3, #0]
2405988a:	f023 020e 	bic.w	r2, r3, #14
2405988e:	68fb      	ldr	r3, [r7, #12]
24059890:	681b      	ldr	r3, [r3, #0]
24059892:	f042 020a 	orr.w	r2, r2, #10
24059896:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
24059898:	68fb      	ldr	r3, [r7, #12]
2405989a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2405989c:	2b00      	cmp	r3, #0
2405989e:	d007      	beq.n	240598b0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
240598a0:	68fb      	ldr	r3, [r7, #12]
240598a2:	681b      	ldr	r3, [r3, #0]
240598a4:	681a      	ldr	r2, [r3, #0]
240598a6:	68fb      	ldr	r3, [r7, #12]
240598a8:	681b      	ldr	r3, [r3, #0]
240598aa:	f042 0204 	orr.w	r2, r2, #4
240598ae:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240598b0:	68fb      	ldr	r3, [r7, #12]
240598b2:	681b      	ldr	r3, [r3, #0]
240598b4:	4a83      	ldr	r2, [pc, #524]	@ (24059ac4 <HAL_DMA_Start_IT+0x474>)
240598b6:	4293      	cmp	r3, r2
240598b8:	d072      	beq.n	240599a0 <HAL_DMA_Start_IT+0x350>
240598ba:	68fb      	ldr	r3, [r7, #12]
240598bc:	681b      	ldr	r3, [r3, #0]
240598be:	4a82      	ldr	r2, [pc, #520]	@ (24059ac8 <HAL_DMA_Start_IT+0x478>)
240598c0:	4293      	cmp	r3, r2
240598c2:	d06d      	beq.n	240599a0 <HAL_DMA_Start_IT+0x350>
240598c4:	68fb      	ldr	r3, [r7, #12]
240598c6:	681b      	ldr	r3, [r3, #0]
240598c8:	4a80      	ldr	r2, [pc, #512]	@ (24059acc <HAL_DMA_Start_IT+0x47c>)
240598ca:	4293      	cmp	r3, r2
240598cc:	d068      	beq.n	240599a0 <HAL_DMA_Start_IT+0x350>
240598ce:	68fb      	ldr	r3, [r7, #12]
240598d0:	681b      	ldr	r3, [r3, #0]
240598d2:	4a7f      	ldr	r2, [pc, #508]	@ (24059ad0 <HAL_DMA_Start_IT+0x480>)
240598d4:	4293      	cmp	r3, r2
240598d6:	d063      	beq.n	240599a0 <HAL_DMA_Start_IT+0x350>
240598d8:	68fb      	ldr	r3, [r7, #12]
240598da:	681b      	ldr	r3, [r3, #0]
240598dc:	4a7d      	ldr	r2, [pc, #500]	@ (24059ad4 <HAL_DMA_Start_IT+0x484>)
240598de:	4293      	cmp	r3, r2
240598e0:	d05e      	beq.n	240599a0 <HAL_DMA_Start_IT+0x350>
240598e2:	68fb      	ldr	r3, [r7, #12]
240598e4:	681b      	ldr	r3, [r3, #0]
240598e6:	4a7c      	ldr	r2, [pc, #496]	@ (24059ad8 <HAL_DMA_Start_IT+0x488>)
240598e8:	4293      	cmp	r3, r2
240598ea:	d059      	beq.n	240599a0 <HAL_DMA_Start_IT+0x350>
240598ec:	68fb      	ldr	r3, [r7, #12]
240598ee:	681b      	ldr	r3, [r3, #0]
240598f0:	4a7a      	ldr	r2, [pc, #488]	@ (24059adc <HAL_DMA_Start_IT+0x48c>)
240598f2:	4293      	cmp	r3, r2
240598f4:	d054      	beq.n	240599a0 <HAL_DMA_Start_IT+0x350>
240598f6:	68fb      	ldr	r3, [r7, #12]
240598f8:	681b      	ldr	r3, [r3, #0]
240598fa:	4a79      	ldr	r2, [pc, #484]	@ (24059ae0 <HAL_DMA_Start_IT+0x490>)
240598fc:	4293      	cmp	r3, r2
240598fe:	d04f      	beq.n	240599a0 <HAL_DMA_Start_IT+0x350>
24059900:	68fb      	ldr	r3, [r7, #12]
24059902:	681b      	ldr	r3, [r3, #0]
24059904:	4a77      	ldr	r2, [pc, #476]	@ (24059ae4 <HAL_DMA_Start_IT+0x494>)
24059906:	4293      	cmp	r3, r2
24059908:	d04a      	beq.n	240599a0 <HAL_DMA_Start_IT+0x350>
2405990a:	68fb      	ldr	r3, [r7, #12]
2405990c:	681b      	ldr	r3, [r3, #0]
2405990e:	4a76      	ldr	r2, [pc, #472]	@ (24059ae8 <HAL_DMA_Start_IT+0x498>)
24059910:	4293      	cmp	r3, r2
24059912:	d045      	beq.n	240599a0 <HAL_DMA_Start_IT+0x350>
24059914:	68fb      	ldr	r3, [r7, #12]
24059916:	681b      	ldr	r3, [r3, #0]
24059918:	4a74      	ldr	r2, [pc, #464]	@ (24059aec <HAL_DMA_Start_IT+0x49c>)
2405991a:	4293      	cmp	r3, r2
2405991c:	d040      	beq.n	240599a0 <HAL_DMA_Start_IT+0x350>
2405991e:	68fb      	ldr	r3, [r7, #12]
24059920:	681b      	ldr	r3, [r3, #0]
24059922:	4a73      	ldr	r2, [pc, #460]	@ (24059af0 <HAL_DMA_Start_IT+0x4a0>)
24059924:	4293      	cmp	r3, r2
24059926:	d03b      	beq.n	240599a0 <HAL_DMA_Start_IT+0x350>
24059928:	68fb      	ldr	r3, [r7, #12]
2405992a:	681b      	ldr	r3, [r3, #0]
2405992c:	4a71      	ldr	r2, [pc, #452]	@ (24059af4 <HAL_DMA_Start_IT+0x4a4>)
2405992e:	4293      	cmp	r3, r2
24059930:	d036      	beq.n	240599a0 <HAL_DMA_Start_IT+0x350>
24059932:	68fb      	ldr	r3, [r7, #12]
24059934:	681b      	ldr	r3, [r3, #0]
24059936:	4a70      	ldr	r2, [pc, #448]	@ (24059af8 <HAL_DMA_Start_IT+0x4a8>)
24059938:	4293      	cmp	r3, r2
2405993a:	d031      	beq.n	240599a0 <HAL_DMA_Start_IT+0x350>
2405993c:	68fb      	ldr	r3, [r7, #12]
2405993e:	681b      	ldr	r3, [r3, #0]
24059940:	4a6e      	ldr	r2, [pc, #440]	@ (24059afc <HAL_DMA_Start_IT+0x4ac>)
24059942:	4293      	cmp	r3, r2
24059944:	d02c      	beq.n	240599a0 <HAL_DMA_Start_IT+0x350>
24059946:	68fb      	ldr	r3, [r7, #12]
24059948:	681b      	ldr	r3, [r3, #0]
2405994a:	4a6d      	ldr	r2, [pc, #436]	@ (24059b00 <HAL_DMA_Start_IT+0x4b0>)
2405994c:	4293      	cmp	r3, r2
2405994e:	d027      	beq.n	240599a0 <HAL_DMA_Start_IT+0x350>
24059950:	68fb      	ldr	r3, [r7, #12]
24059952:	681b      	ldr	r3, [r3, #0]
24059954:	4a6b      	ldr	r2, [pc, #428]	@ (24059b04 <HAL_DMA_Start_IT+0x4b4>)
24059956:	4293      	cmp	r3, r2
24059958:	d022      	beq.n	240599a0 <HAL_DMA_Start_IT+0x350>
2405995a:	68fb      	ldr	r3, [r7, #12]
2405995c:	681b      	ldr	r3, [r3, #0]
2405995e:	4a6a      	ldr	r2, [pc, #424]	@ (24059b08 <HAL_DMA_Start_IT+0x4b8>)
24059960:	4293      	cmp	r3, r2
24059962:	d01d      	beq.n	240599a0 <HAL_DMA_Start_IT+0x350>
24059964:	68fb      	ldr	r3, [r7, #12]
24059966:	681b      	ldr	r3, [r3, #0]
24059968:	4a68      	ldr	r2, [pc, #416]	@ (24059b0c <HAL_DMA_Start_IT+0x4bc>)
2405996a:	4293      	cmp	r3, r2
2405996c:	d018      	beq.n	240599a0 <HAL_DMA_Start_IT+0x350>
2405996e:	68fb      	ldr	r3, [r7, #12]
24059970:	681b      	ldr	r3, [r3, #0]
24059972:	4a67      	ldr	r2, [pc, #412]	@ (24059b10 <HAL_DMA_Start_IT+0x4c0>)
24059974:	4293      	cmp	r3, r2
24059976:	d013      	beq.n	240599a0 <HAL_DMA_Start_IT+0x350>
24059978:	68fb      	ldr	r3, [r7, #12]
2405997a:	681b      	ldr	r3, [r3, #0]
2405997c:	4a65      	ldr	r2, [pc, #404]	@ (24059b14 <HAL_DMA_Start_IT+0x4c4>)
2405997e:	4293      	cmp	r3, r2
24059980:	d00e      	beq.n	240599a0 <HAL_DMA_Start_IT+0x350>
24059982:	68fb      	ldr	r3, [r7, #12]
24059984:	681b      	ldr	r3, [r3, #0]
24059986:	4a64      	ldr	r2, [pc, #400]	@ (24059b18 <HAL_DMA_Start_IT+0x4c8>)
24059988:	4293      	cmp	r3, r2
2405998a:	d009      	beq.n	240599a0 <HAL_DMA_Start_IT+0x350>
2405998c:	68fb      	ldr	r3, [r7, #12]
2405998e:	681b      	ldr	r3, [r3, #0]
24059990:	4a62      	ldr	r2, [pc, #392]	@ (24059b1c <HAL_DMA_Start_IT+0x4cc>)
24059992:	4293      	cmp	r3, r2
24059994:	d004      	beq.n	240599a0 <HAL_DMA_Start_IT+0x350>
24059996:	68fb      	ldr	r3, [r7, #12]
24059998:	681b      	ldr	r3, [r3, #0]
2405999a:	4a61      	ldr	r2, [pc, #388]	@ (24059b20 <HAL_DMA_Start_IT+0x4d0>)
2405999c:	4293      	cmp	r3, r2
2405999e:	d101      	bne.n	240599a4 <HAL_DMA_Start_IT+0x354>
240599a0:	2301      	movs	r3, #1
240599a2:	e000      	b.n	240599a6 <HAL_DMA_Start_IT+0x356>
240599a4:	2300      	movs	r3, #0
240599a6:	2b00      	cmp	r3, #0
240599a8:	d01a      	beq.n	240599e0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
240599aa:	68fb      	ldr	r3, [r7, #12]
240599ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
240599ae:	681b      	ldr	r3, [r3, #0]
240599b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
240599b4:	2b00      	cmp	r3, #0
240599b6:	d007      	beq.n	240599c8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
240599b8:	68fb      	ldr	r3, [r7, #12]
240599ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
240599bc:	681a      	ldr	r2, [r3, #0]
240599be:	68fb      	ldr	r3, [r7, #12]
240599c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
240599c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
240599c6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
240599c8:	68fb      	ldr	r3, [r7, #12]
240599ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
240599cc:	2b00      	cmp	r3, #0
240599ce:	d007      	beq.n	240599e0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
240599d0:	68fb      	ldr	r3, [r7, #12]
240599d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
240599d4:	681a      	ldr	r2, [r3, #0]
240599d6:	68fb      	ldr	r3, [r7, #12]
240599d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
240599da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
240599de:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
240599e0:	68fb      	ldr	r3, [r7, #12]
240599e2:	681b      	ldr	r3, [r3, #0]
240599e4:	4a37      	ldr	r2, [pc, #220]	@ (24059ac4 <HAL_DMA_Start_IT+0x474>)
240599e6:	4293      	cmp	r3, r2
240599e8:	d04a      	beq.n	24059a80 <HAL_DMA_Start_IT+0x430>
240599ea:	68fb      	ldr	r3, [r7, #12]
240599ec:	681b      	ldr	r3, [r3, #0]
240599ee:	4a36      	ldr	r2, [pc, #216]	@ (24059ac8 <HAL_DMA_Start_IT+0x478>)
240599f0:	4293      	cmp	r3, r2
240599f2:	d045      	beq.n	24059a80 <HAL_DMA_Start_IT+0x430>
240599f4:	68fb      	ldr	r3, [r7, #12]
240599f6:	681b      	ldr	r3, [r3, #0]
240599f8:	4a34      	ldr	r2, [pc, #208]	@ (24059acc <HAL_DMA_Start_IT+0x47c>)
240599fa:	4293      	cmp	r3, r2
240599fc:	d040      	beq.n	24059a80 <HAL_DMA_Start_IT+0x430>
240599fe:	68fb      	ldr	r3, [r7, #12]
24059a00:	681b      	ldr	r3, [r3, #0]
24059a02:	4a33      	ldr	r2, [pc, #204]	@ (24059ad0 <HAL_DMA_Start_IT+0x480>)
24059a04:	4293      	cmp	r3, r2
24059a06:	d03b      	beq.n	24059a80 <HAL_DMA_Start_IT+0x430>
24059a08:	68fb      	ldr	r3, [r7, #12]
24059a0a:	681b      	ldr	r3, [r3, #0]
24059a0c:	4a31      	ldr	r2, [pc, #196]	@ (24059ad4 <HAL_DMA_Start_IT+0x484>)
24059a0e:	4293      	cmp	r3, r2
24059a10:	d036      	beq.n	24059a80 <HAL_DMA_Start_IT+0x430>
24059a12:	68fb      	ldr	r3, [r7, #12]
24059a14:	681b      	ldr	r3, [r3, #0]
24059a16:	4a30      	ldr	r2, [pc, #192]	@ (24059ad8 <HAL_DMA_Start_IT+0x488>)
24059a18:	4293      	cmp	r3, r2
24059a1a:	d031      	beq.n	24059a80 <HAL_DMA_Start_IT+0x430>
24059a1c:	68fb      	ldr	r3, [r7, #12]
24059a1e:	681b      	ldr	r3, [r3, #0]
24059a20:	4a2e      	ldr	r2, [pc, #184]	@ (24059adc <HAL_DMA_Start_IT+0x48c>)
24059a22:	4293      	cmp	r3, r2
24059a24:	d02c      	beq.n	24059a80 <HAL_DMA_Start_IT+0x430>
24059a26:	68fb      	ldr	r3, [r7, #12]
24059a28:	681b      	ldr	r3, [r3, #0]
24059a2a:	4a2d      	ldr	r2, [pc, #180]	@ (24059ae0 <HAL_DMA_Start_IT+0x490>)
24059a2c:	4293      	cmp	r3, r2
24059a2e:	d027      	beq.n	24059a80 <HAL_DMA_Start_IT+0x430>
24059a30:	68fb      	ldr	r3, [r7, #12]
24059a32:	681b      	ldr	r3, [r3, #0]
24059a34:	4a2b      	ldr	r2, [pc, #172]	@ (24059ae4 <HAL_DMA_Start_IT+0x494>)
24059a36:	4293      	cmp	r3, r2
24059a38:	d022      	beq.n	24059a80 <HAL_DMA_Start_IT+0x430>
24059a3a:	68fb      	ldr	r3, [r7, #12]
24059a3c:	681b      	ldr	r3, [r3, #0]
24059a3e:	4a2a      	ldr	r2, [pc, #168]	@ (24059ae8 <HAL_DMA_Start_IT+0x498>)
24059a40:	4293      	cmp	r3, r2
24059a42:	d01d      	beq.n	24059a80 <HAL_DMA_Start_IT+0x430>
24059a44:	68fb      	ldr	r3, [r7, #12]
24059a46:	681b      	ldr	r3, [r3, #0]
24059a48:	4a28      	ldr	r2, [pc, #160]	@ (24059aec <HAL_DMA_Start_IT+0x49c>)
24059a4a:	4293      	cmp	r3, r2
24059a4c:	d018      	beq.n	24059a80 <HAL_DMA_Start_IT+0x430>
24059a4e:	68fb      	ldr	r3, [r7, #12]
24059a50:	681b      	ldr	r3, [r3, #0]
24059a52:	4a27      	ldr	r2, [pc, #156]	@ (24059af0 <HAL_DMA_Start_IT+0x4a0>)
24059a54:	4293      	cmp	r3, r2
24059a56:	d013      	beq.n	24059a80 <HAL_DMA_Start_IT+0x430>
24059a58:	68fb      	ldr	r3, [r7, #12]
24059a5a:	681b      	ldr	r3, [r3, #0]
24059a5c:	4a25      	ldr	r2, [pc, #148]	@ (24059af4 <HAL_DMA_Start_IT+0x4a4>)
24059a5e:	4293      	cmp	r3, r2
24059a60:	d00e      	beq.n	24059a80 <HAL_DMA_Start_IT+0x430>
24059a62:	68fb      	ldr	r3, [r7, #12]
24059a64:	681b      	ldr	r3, [r3, #0]
24059a66:	4a24      	ldr	r2, [pc, #144]	@ (24059af8 <HAL_DMA_Start_IT+0x4a8>)
24059a68:	4293      	cmp	r3, r2
24059a6a:	d009      	beq.n	24059a80 <HAL_DMA_Start_IT+0x430>
24059a6c:	68fb      	ldr	r3, [r7, #12]
24059a6e:	681b      	ldr	r3, [r3, #0]
24059a70:	4a22      	ldr	r2, [pc, #136]	@ (24059afc <HAL_DMA_Start_IT+0x4ac>)
24059a72:	4293      	cmp	r3, r2
24059a74:	d004      	beq.n	24059a80 <HAL_DMA_Start_IT+0x430>
24059a76:	68fb      	ldr	r3, [r7, #12]
24059a78:	681b      	ldr	r3, [r3, #0]
24059a7a:	4a21      	ldr	r2, [pc, #132]	@ (24059b00 <HAL_DMA_Start_IT+0x4b0>)
24059a7c:	4293      	cmp	r3, r2
24059a7e:	d108      	bne.n	24059a92 <HAL_DMA_Start_IT+0x442>
24059a80:	68fb      	ldr	r3, [r7, #12]
24059a82:	681b      	ldr	r3, [r3, #0]
24059a84:	681a      	ldr	r2, [r3, #0]
24059a86:	68fb      	ldr	r3, [r7, #12]
24059a88:	681b      	ldr	r3, [r3, #0]
24059a8a:	f042 0201 	orr.w	r2, r2, #1
24059a8e:	601a      	str	r2, [r3, #0]
24059a90:	e012      	b.n	24059ab8 <HAL_DMA_Start_IT+0x468>
24059a92:	68fb      	ldr	r3, [r7, #12]
24059a94:	681b      	ldr	r3, [r3, #0]
24059a96:	681a      	ldr	r2, [r3, #0]
24059a98:	68fb      	ldr	r3, [r7, #12]
24059a9a:	681b      	ldr	r3, [r3, #0]
24059a9c:	f042 0201 	orr.w	r2, r2, #1
24059aa0:	601a      	str	r2, [r3, #0]
24059aa2:	e009      	b.n	24059ab8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
24059aa4:	68fb      	ldr	r3, [r7, #12]
24059aa6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
24059aaa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
24059aac:	68fb      	ldr	r3, [r7, #12]
24059aae:	2200      	movs	r2, #0
24059ab0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
24059ab4:	2301      	movs	r3, #1
24059ab6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
24059ab8:	7dfb      	ldrb	r3, [r7, #23]
}
24059aba:	4618      	mov	r0, r3
24059abc:	3718      	adds	r7, #24
24059abe:	46bd      	mov	sp, r7
24059ac0:	bd80      	pop	{r7, pc}
24059ac2:	bf00      	nop
24059ac4:	40020010 	.word	0x40020010
24059ac8:	40020028 	.word	0x40020028
24059acc:	40020040 	.word	0x40020040
24059ad0:	40020058 	.word	0x40020058
24059ad4:	40020070 	.word	0x40020070
24059ad8:	40020088 	.word	0x40020088
24059adc:	400200a0 	.word	0x400200a0
24059ae0:	400200b8 	.word	0x400200b8
24059ae4:	40020410 	.word	0x40020410
24059ae8:	40020428 	.word	0x40020428
24059aec:	40020440 	.word	0x40020440
24059af0:	40020458 	.word	0x40020458
24059af4:	40020470 	.word	0x40020470
24059af8:	40020488 	.word	0x40020488
24059afc:	400204a0 	.word	0x400204a0
24059b00:	400204b8 	.word	0x400204b8
24059b04:	58025408 	.word	0x58025408
24059b08:	5802541c 	.word	0x5802541c
24059b0c:	58025430 	.word	0x58025430
24059b10:	58025444 	.word	0x58025444
24059b14:	58025458 	.word	0x58025458
24059b18:	5802546c 	.word	0x5802546c
24059b1c:	58025480 	.word	0x58025480
24059b20:	58025494 	.word	0x58025494

24059b24 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
24059b24:	b580      	push	{r7, lr}
24059b26:	b086      	sub	sp, #24
24059b28:	af00      	add	r7, sp, #0
24059b2a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
24059b2c:	f7fc ffa8 	bl	24056a80 <HAL_GetTick>
24059b30:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
24059b32:	687b      	ldr	r3, [r7, #4]
24059b34:	2b00      	cmp	r3, #0
24059b36:	d101      	bne.n	24059b3c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
24059b38:	2301      	movs	r3, #1
24059b3a:	e2dc      	b.n	2405a0f6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
24059b3c:	687b      	ldr	r3, [r7, #4]
24059b3e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
24059b42:	b2db      	uxtb	r3, r3
24059b44:	2b02      	cmp	r3, #2
24059b46:	d008      	beq.n	24059b5a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
24059b48:	687b      	ldr	r3, [r7, #4]
24059b4a:	2280      	movs	r2, #128	@ 0x80
24059b4c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
24059b4e:	687b      	ldr	r3, [r7, #4]
24059b50:	2200      	movs	r2, #0
24059b52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
24059b56:	2301      	movs	r3, #1
24059b58:	e2cd      	b.n	2405a0f6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24059b5a:	687b      	ldr	r3, [r7, #4]
24059b5c:	681b      	ldr	r3, [r3, #0]
24059b5e:	4a76      	ldr	r2, [pc, #472]	@ (24059d38 <HAL_DMA_Abort+0x214>)
24059b60:	4293      	cmp	r3, r2
24059b62:	d04a      	beq.n	24059bfa <HAL_DMA_Abort+0xd6>
24059b64:	687b      	ldr	r3, [r7, #4]
24059b66:	681b      	ldr	r3, [r3, #0]
24059b68:	4a74      	ldr	r2, [pc, #464]	@ (24059d3c <HAL_DMA_Abort+0x218>)
24059b6a:	4293      	cmp	r3, r2
24059b6c:	d045      	beq.n	24059bfa <HAL_DMA_Abort+0xd6>
24059b6e:	687b      	ldr	r3, [r7, #4]
24059b70:	681b      	ldr	r3, [r3, #0]
24059b72:	4a73      	ldr	r2, [pc, #460]	@ (24059d40 <HAL_DMA_Abort+0x21c>)
24059b74:	4293      	cmp	r3, r2
24059b76:	d040      	beq.n	24059bfa <HAL_DMA_Abort+0xd6>
24059b78:	687b      	ldr	r3, [r7, #4]
24059b7a:	681b      	ldr	r3, [r3, #0]
24059b7c:	4a71      	ldr	r2, [pc, #452]	@ (24059d44 <HAL_DMA_Abort+0x220>)
24059b7e:	4293      	cmp	r3, r2
24059b80:	d03b      	beq.n	24059bfa <HAL_DMA_Abort+0xd6>
24059b82:	687b      	ldr	r3, [r7, #4]
24059b84:	681b      	ldr	r3, [r3, #0]
24059b86:	4a70      	ldr	r2, [pc, #448]	@ (24059d48 <HAL_DMA_Abort+0x224>)
24059b88:	4293      	cmp	r3, r2
24059b8a:	d036      	beq.n	24059bfa <HAL_DMA_Abort+0xd6>
24059b8c:	687b      	ldr	r3, [r7, #4]
24059b8e:	681b      	ldr	r3, [r3, #0]
24059b90:	4a6e      	ldr	r2, [pc, #440]	@ (24059d4c <HAL_DMA_Abort+0x228>)
24059b92:	4293      	cmp	r3, r2
24059b94:	d031      	beq.n	24059bfa <HAL_DMA_Abort+0xd6>
24059b96:	687b      	ldr	r3, [r7, #4]
24059b98:	681b      	ldr	r3, [r3, #0]
24059b9a:	4a6d      	ldr	r2, [pc, #436]	@ (24059d50 <HAL_DMA_Abort+0x22c>)
24059b9c:	4293      	cmp	r3, r2
24059b9e:	d02c      	beq.n	24059bfa <HAL_DMA_Abort+0xd6>
24059ba0:	687b      	ldr	r3, [r7, #4]
24059ba2:	681b      	ldr	r3, [r3, #0]
24059ba4:	4a6b      	ldr	r2, [pc, #428]	@ (24059d54 <HAL_DMA_Abort+0x230>)
24059ba6:	4293      	cmp	r3, r2
24059ba8:	d027      	beq.n	24059bfa <HAL_DMA_Abort+0xd6>
24059baa:	687b      	ldr	r3, [r7, #4]
24059bac:	681b      	ldr	r3, [r3, #0]
24059bae:	4a6a      	ldr	r2, [pc, #424]	@ (24059d58 <HAL_DMA_Abort+0x234>)
24059bb0:	4293      	cmp	r3, r2
24059bb2:	d022      	beq.n	24059bfa <HAL_DMA_Abort+0xd6>
24059bb4:	687b      	ldr	r3, [r7, #4]
24059bb6:	681b      	ldr	r3, [r3, #0]
24059bb8:	4a68      	ldr	r2, [pc, #416]	@ (24059d5c <HAL_DMA_Abort+0x238>)
24059bba:	4293      	cmp	r3, r2
24059bbc:	d01d      	beq.n	24059bfa <HAL_DMA_Abort+0xd6>
24059bbe:	687b      	ldr	r3, [r7, #4]
24059bc0:	681b      	ldr	r3, [r3, #0]
24059bc2:	4a67      	ldr	r2, [pc, #412]	@ (24059d60 <HAL_DMA_Abort+0x23c>)
24059bc4:	4293      	cmp	r3, r2
24059bc6:	d018      	beq.n	24059bfa <HAL_DMA_Abort+0xd6>
24059bc8:	687b      	ldr	r3, [r7, #4]
24059bca:	681b      	ldr	r3, [r3, #0]
24059bcc:	4a65      	ldr	r2, [pc, #404]	@ (24059d64 <HAL_DMA_Abort+0x240>)
24059bce:	4293      	cmp	r3, r2
24059bd0:	d013      	beq.n	24059bfa <HAL_DMA_Abort+0xd6>
24059bd2:	687b      	ldr	r3, [r7, #4]
24059bd4:	681b      	ldr	r3, [r3, #0]
24059bd6:	4a64      	ldr	r2, [pc, #400]	@ (24059d68 <HAL_DMA_Abort+0x244>)
24059bd8:	4293      	cmp	r3, r2
24059bda:	d00e      	beq.n	24059bfa <HAL_DMA_Abort+0xd6>
24059bdc:	687b      	ldr	r3, [r7, #4]
24059bde:	681b      	ldr	r3, [r3, #0]
24059be0:	4a62      	ldr	r2, [pc, #392]	@ (24059d6c <HAL_DMA_Abort+0x248>)
24059be2:	4293      	cmp	r3, r2
24059be4:	d009      	beq.n	24059bfa <HAL_DMA_Abort+0xd6>
24059be6:	687b      	ldr	r3, [r7, #4]
24059be8:	681b      	ldr	r3, [r3, #0]
24059bea:	4a61      	ldr	r2, [pc, #388]	@ (24059d70 <HAL_DMA_Abort+0x24c>)
24059bec:	4293      	cmp	r3, r2
24059bee:	d004      	beq.n	24059bfa <HAL_DMA_Abort+0xd6>
24059bf0:	687b      	ldr	r3, [r7, #4]
24059bf2:	681b      	ldr	r3, [r3, #0]
24059bf4:	4a5f      	ldr	r2, [pc, #380]	@ (24059d74 <HAL_DMA_Abort+0x250>)
24059bf6:	4293      	cmp	r3, r2
24059bf8:	d101      	bne.n	24059bfe <HAL_DMA_Abort+0xda>
24059bfa:	2301      	movs	r3, #1
24059bfc:	e000      	b.n	24059c00 <HAL_DMA_Abort+0xdc>
24059bfe:	2300      	movs	r3, #0
24059c00:	2b00      	cmp	r3, #0
24059c02:	d013      	beq.n	24059c2c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
24059c04:	687b      	ldr	r3, [r7, #4]
24059c06:	681b      	ldr	r3, [r3, #0]
24059c08:	681a      	ldr	r2, [r3, #0]
24059c0a:	687b      	ldr	r3, [r7, #4]
24059c0c:	681b      	ldr	r3, [r3, #0]
24059c0e:	f022 021e 	bic.w	r2, r2, #30
24059c12:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
24059c14:	687b      	ldr	r3, [r7, #4]
24059c16:	681b      	ldr	r3, [r3, #0]
24059c18:	695a      	ldr	r2, [r3, #20]
24059c1a:	687b      	ldr	r3, [r7, #4]
24059c1c:	681b      	ldr	r3, [r3, #0]
24059c1e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
24059c22:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
24059c24:	687b      	ldr	r3, [r7, #4]
24059c26:	681b      	ldr	r3, [r3, #0]
24059c28:	617b      	str	r3, [r7, #20]
24059c2a:	e00a      	b.n	24059c42 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
24059c2c:	687b      	ldr	r3, [r7, #4]
24059c2e:	681b      	ldr	r3, [r3, #0]
24059c30:	681a      	ldr	r2, [r3, #0]
24059c32:	687b      	ldr	r3, [r7, #4]
24059c34:	681b      	ldr	r3, [r3, #0]
24059c36:	f022 020e 	bic.w	r2, r2, #14
24059c3a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
24059c3c:	687b      	ldr	r3, [r7, #4]
24059c3e:	681b      	ldr	r3, [r3, #0]
24059c40:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24059c42:	687b      	ldr	r3, [r7, #4]
24059c44:	681b      	ldr	r3, [r3, #0]
24059c46:	4a3c      	ldr	r2, [pc, #240]	@ (24059d38 <HAL_DMA_Abort+0x214>)
24059c48:	4293      	cmp	r3, r2
24059c4a:	d072      	beq.n	24059d32 <HAL_DMA_Abort+0x20e>
24059c4c:	687b      	ldr	r3, [r7, #4]
24059c4e:	681b      	ldr	r3, [r3, #0]
24059c50:	4a3a      	ldr	r2, [pc, #232]	@ (24059d3c <HAL_DMA_Abort+0x218>)
24059c52:	4293      	cmp	r3, r2
24059c54:	d06d      	beq.n	24059d32 <HAL_DMA_Abort+0x20e>
24059c56:	687b      	ldr	r3, [r7, #4]
24059c58:	681b      	ldr	r3, [r3, #0]
24059c5a:	4a39      	ldr	r2, [pc, #228]	@ (24059d40 <HAL_DMA_Abort+0x21c>)
24059c5c:	4293      	cmp	r3, r2
24059c5e:	d068      	beq.n	24059d32 <HAL_DMA_Abort+0x20e>
24059c60:	687b      	ldr	r3, [r7, #4]
24059c62:	681b      	ldr	r3, [r3, #0]
24059c64:	4a37      	ldr	r2, [pc, #220]	@ (24059d44 <HAL_DMA_Abort+0x220>)
24059c66:	4293      	cmp	r3, r2
24059c68:	d063      	beq.n	24059d32 <HAL_DMA_Abort+0x20e>
24059c6a:	687b      	ldr	r3, [r7, #4]
24059c6c:	681b      	ldr	r3, [r3, #0]
24059c6e:	4a36      	ldr	r2, [pc, #216]	@ (24059d48 <HAL_DMA_Abort+0x224>)
24059c70:	4293      	cmp	r3, r2
24059c72:	d05e      	beq.n	24059d32 <HAL_DMA_Abort+0x20e>
24059c74:	687b      	ldr	r3, [r7, #4]
24059c76:	681b      	ldr	r3, [r3, #0]
24059c78:	4a34      	ldr	r2, [pc, #208]	@ (24059d4c <HAL_DMA_Abort+0x228>)
24059c7a:	4293      	cmp	r3, r2
24059c7c:	d059      	beq.n	24059d32 <HAL_DMA_Abort+0x20e>
24059c7e:	687b      	ldr	r3, [r7, #4]
24059c80:	681b      	ldr	r3, [r3, #0]
24059c82:	4a33      	ldr	r2, [pc, #204]	@ (24059d50 <HAL_DMA_Abort+0x22c>)
24059c84:	4293      	cmp	r3, r2
24059c86:	d054      	beq.n	24059d32 <HAL_DMA_Abort+0x20e>
24059c88:	687b      	ldr	r3, [r7, #4]
24059c8a:	681b      	ldr	r3, [r3, #0]
24059c8c:	4a31      	ldr	r2, [pc, #196]	@ (24059d54 <HAL_DMA_Abort+0x230>)
24059c8e:	4293      	cmp	r3, r2
24059c90:	d04f      	beq.n	24059d32 <HAL_DMA_Abort+0x20e>
24059c92:	687b      	ldr	r3, [r7, #4]
24059c94:	681b      	ldr	r3, [r3, #0]
24059c96:	4a30      	ldr	r2, [pc, #192]	@ (24059d58 <HAL_DMA_Abort+0x234>)
24059c98:	4293      	cmp	r3, r2
24059c9a:	d04a      	beq.n	24059d32 <HAL_DMA_Abort+0x20e>
24059c9c:	687b      	ldr	r3, [r7, #4]
24059c9e:	681b      	ldr	r3, [r3, #0]
24059ca0:	4a2e      	ldr	r2, [pc, #184]	@ (24059d5c <HAL_DMA_Abort+0x238>)
24059ca2:	4293      	cmp	r3, r2
24059ca4:	d045      	beq.n	24059d32 <HAL_DMA_Abort+0x20e>
24059ca6:	687b      	ldr	r3, [r7, #4]
24059ca8:	681b      	ldr	r3, [r3, #0]
24059caa:	4a2d      	ldr	r2, [pc, #180]	@ (24059d60 <HAL_DMA_Abort+0x23c>)
24059cac:	4293      	cmp	r3, r2
24059cae:	d040      	beq.n	24059d32 <HAL_DMA_Abort+0x20e>
24059cb0:	687b      	ldr	r3, [r7, #4]
24059cb2:	681b      	ldr	r3, [r3, #0]
24059cb4:	4a2b      	ldr	r2, [pc, #172]	@ (24059d64 <HAL_DMA_Abort+0x240>)
24059cb6:	4293      	cmp	r3, r2
24059cb8:	d03b      	beq.n	24059d32 <HAL_DMA_Abort+0x20e>
24059cba:	687b      	ldr	r3, [r7, #4]
24059cbc:	681b      	ldr	r3, [r3, #0]
24059cbe:	4a2a      	ldr	r2, [pc, #168]	@ (24059d68 <HAL_DMA_Abort+0x244>)
24059cc0:	4293      	cmp	r3, r2
24059cc2:	d036      	beq.n	24059d32 <HAL_DMA_Abort+0x20e>
24059cc4:	687b      	ldr	r3, [r7, #4]
24059cc6:	681b      	ldr	r3, [r3, #0]
24059cc8:	4a28      	ldr	r2, [pc, #160]	@ (24059d6c <HAL_DMA_Abort+0x248>)
24059cca:	4293      	cmp	r3, r2
24059ccc:	d031      	beq.n	24059d32 <HAL_DMA_Abort+0x20e>
24059cce:	687b      	ldr	r3, [r7, #4]
24059cd0:	681b      	ldr	r3, [r3, #0]
24059cd2:	4a27      	ldr	r2, [pc, #156]	@ (24059d70 <HAL_DMA_Abort+0x24c>)
24059cd4:	4293      	cmp	r3, r2
24059cd6:	d02c      	beq.n	24059d32 <HAL_DMA_Abort+0x20e>
24059cd8:	687b      	ldr	r3, [r7, #4]
24059cda:	681b      	ldr	r3, [r3, #0]
24059cdc:	4a25      	ldr	r2, [pc, #148]	@ (24059d74 <HAL_DMA_Abort+0x250>)
24059cde:	4293      	cmp	r3, r2
24059ce0:	d027      	beq.n	24059d32 <HAL_DMA_Abort+0x20e>
24059ce2:	687b      	ldr	r3, [r7, #4]
24059ce4:	681b      	ldr	r3, [r3, #0]
24059ce6:	4a24      	ldr	r2, [pc, #144]	@ (24059d78 <HAL_DMA_Abort+0x254>)
24059ce8:	4293      	cmp	r3, r2
24059cea:	d022      	beq.n	24059d32 <HAL_DMA_Abort+0x20e>
24059cec:	687b      	ldr	r3, [r7, #4]
24059cee:	681b      	ldr	r3, [r3, #0]
24059cf0:	4a22      	ldr	r2, [pc, #136]	@ (24059d7c <HAL_DMA_Abort+0x258>)
24059cf2:	4293      	cmp	r3, r2
24059cf4:	d01d      	beq.n	24059d32 <HAL_DMA_Abort+0x20e>
24059cf6:	687b      	ldr	r3, [r7, #4]
24059cf8:	681b      	ldr	r3, [r3, #0]
24059cfa:	4a21      	ldr	r2, [pc, #132]	@ (24059d80 <HAL_DMA_Abort+0x25c>)
24059cfc:	4293      	cmp	r3, r2
24059cfe:	d018      	beq.n	24059d32 <HAL_DMA_Abort+0x20e>
24059d00:	687b      	ldr	r3, [r7, #4]
24059d02:	681b      	ldr	r3, [r3, #0]
24059d04:	4a1f      	ldr	r2, [pc, #124]	@ (24059d84 <HAL_DMA_Abort+0x260>)
24059d06:	4293      	cmp	r3, r2
24059d08:	d013      	beq.n	24059d32 <HAL_DMA_Abort+0x20e>
24059d0a:	687b      	ldr	r3, [r7, #4]
24059d0c:	681b      	ldr	r3, [r3, #0]
24059d0e:	4a1e      	ldr	r2, [pc, #120]	@ (24059d88 <HAL_DMA_Abort+0x264>)
24059d10:	4293      	cmp	r3, r2
24059d12:	d00e      	beq.n	24059d32 <HAL_DMA_Abort+0x20e>
24059d14:	687b      	ldr	r3, [r7, #4]
24059d16:	681b      	ldr	r3, [r3, #0]
24059d18:	4a1c      	ldr	r2, [pc, #112]	@ (24059d8c <HAL_DMA_Abort+0x268>)
24059d1a:	4293      	cmp	r3, r2
24059d1c:	d009      	beq.n	24059d32 <HAL_DMA_Abort+0x20e>
24059d1e:	687b      	ldr	r3, [r7, #4]
24059d20:	681b      	ldr	r3, [r3, #0]
24059d22:	4a1b      	ldr	r2, [pc, #108]	@ (24059d90 <HAL_DMA_Abort+0x26c>)
24059d24:	4293      	cmp	r3, r2
24059d26:	d004      	beq.n	24059d32 <HAL_DMA_Abort+0x20e>
24059d28:	687b      	ldr	r3, [r7, #4]
24059d2a:	681b      	ldr	r3, [r3, #0]
24059d2c:	4a19      	ldr	r2, [pc, #100]	@ (24059d94 <HAL_DMA_Abort+0x270>)
24059d2e:	4293      	cmp	r3, r2
24059d30:	d132      	bne.n	24059d98 <HAL_DMA_Abort+0x274>
24059d32:	2301      	movs	r3, #1
24059d34:	e031      	b.n	24059d9a <HAL_DMA_Abort+0x276>
24059d36:	bf00      	nop
24059d38:	40020010 	.word	0x40020010
24059d3c:	40020028 	.word	0x40020028
24059d40:	40020040 	.word	0x40020040
24059d44:	40020058 	.word	0x40020058
24059d48:	40020070 	.word	0x40020070
24059d4c:	40020088 	.word	0x40020088
24059d50:	400200a0 	.word	0x400200a0
24059d54:	400200b8 	.word	0x400200b8
24059d58:	40020410 	.word	0x40020410
24059d5c:	40020428 	.word	0x40020428
24059d60:	40020440 	.word	0x40020440
24059d64:	40020458 	.word	0x40020458
24059d68:	40020470 	.word	0x40020470
24059d6c:	40020488 	.word	0x40020488
24059d70:	400204a0 	.word	0x400204a0
24059d74:	400204b8 	.word	0x400204b8
24059d78:	58025408 	.word	0x58025408
24059d7c:	5802541c 	.word	0x5802541c
24059d80:	58025430 	.word	0x58025430
24059d84:	58025444 	.word	0x58025444
24059d88:	58025458 	.word	0x58025458
24059d8c:	5802546c 	.word	0x5802546c
24059d90:	58025480 	.word	0x58025480
24059d94:	58025494 	.word	0x58025494
24059d98:	2300      	movs	r3, #0
24059d9a:	2b00      	cmp	r3, #0
24059d9c:	d007      	beq.n	24059dae <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
24059d9e:	687b      	ldr	r3, [r7, #4]
24059da0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
24059da2:	681a      	ldr	r2, [r3, #0]
24059da4:	687b      	ldr	r3, [r7, #4]
24059da6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
24059da8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
24059dac:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
24059dae:	687b      	ldr	r3, [r7, #4]
24059db0:	681b      	ldr	r3, [r3, #0]
24059db2:	4a6d      	ldr	r2, [pc, #436]	@ (24059f68 <HAL_DMA_Abort+0x444>)
24059db4:	4293      	cmp	r3, r2
24059db6:	d04a      	beq.n	24059e4e <HAL_DMA_Abort+0x32a>
24059db8:	687b      	ldr	r3, [r7, #4]
24059dba:	681b      	ldr	r3, [r3, #0]
24059dbc:	4a6b      	ldr	r2, [pc, #428]	@ (24059f6c <HAL_DMA_Abort+0x448>)
24059dbe:	4293      	cmp	r3, r2
24059dc0:	d045      	beq.n	24059e4e <HAL_DMA_Abort+0x32a>
24059dc2:	687b      	ldr	r3, [r7, #4]
24059dc4:	681b      	ldr	r3, [r3, #0]
24059dc6:	4a6a      	ldr	r2, [pc, #424]	@ (24059f70 <HAL_DMA_Abort+0x44c>)
24059dc8:	4293      	cmp	r3, r2
24059dca:	d040      	beq.n	24059e4e <HAL_DMA_Abort+0x32a>
24059dcc:	687b      	ldr	r3, [r7, #4]
24059dce:	681b      	ldr	r3, [r3, #0]
24059dd0:	4a68      	ldr	r2, [pc, #416]	@ (24059f74 <HAL_DMA_Abort+0x450>)
24059dd2:	4293      	cmp	r3, r2
24059dd4:	d03b      	beq.n	24059e4e <HAL_DMA_Abort+0x32a>
24059dd6:	687b      	ldr	r3, [r7, #4]
24059dd8:	681b      	ldr	r3, [r3, #0]
24059dda:	4a67      	ldr	r2, [pc, #412]	@ (24059f78 <HAL_DMA_Abort+0x454>)
24059ddc:	4293      	cmp	r3, r2
24059dde:	d036      	beq.n	24059e4e <HAL_DMA_Abort+0x32a>
24059de0:	687b      	ldr	r3, [r7, #4]
24059de2:	681b      	ldr	r3, [r3, #0]
24059de4:	4a65      	ldr	r2, [pc, #404]	@ (24059f7c <HAL_DMA_Abort+0x458>)
24059de6:	4293      	cmp	r3, r2
24059de8:	d031      	beq.n	24059e4e <HAL_DMA_Abort+0x32a>
24059dea:	687b      	ldr	r3, [r7, #4]
24059dec:	681b      	ldr	r3, [r3, #0]
24059dee:	4a64      	ldr	r2, [pc, #400]	@ (24059f80 <HAL_DMA_Abort+0x45c>)
24059df0:	4293      	cmp	r3, r2
24059df2:	d02c      	beq.n	24059e4e <HAL_DMA_Abort+0x32a>
24059df4:	687b      	ldr	r3, [r7, #4]
24059df6:	681b      	ldr	r3, [r3, #0]
24059df8:	4a62      	ldr	r2, [pc, #392]	@ (24059f84 <HAL_DMA_Abort+0x460>)
24059dfa:	4293      	cmp	r3, r2
24059dfc:	d027      	beq.n	24059e4e <HAL_DMA_Abort+0x32a>
24059dfe:	687b      	ldr	r3, [r7, #4]
24059e00:	681b      	ldr	r3, [r3, #0]
24059e02:	4a61      	ldr	r2, [pc, #388]	@ (24059f88 <HAL_DMA_Abort+0x464>)
24059e04:	4293      	cmp	r3, r2
24059e06:	d022      	beq.n	24059e4e <HAL_DMA_Abort+0x32a>
24059e08:	687b      	ldr	r3, [r7, #4]
24059e0a:	681b      	ldr	r3, [r3, #0]
24059e0c:	4a5f      	ldr	r2, [pc, #380]	@ (24059f8c <HAL_DMA_Abort+0x468>)
24059e0e:	4293      	cmp	r3, r2
24059e10:	d01d      	beq.n	24059e4e <HAL_DMA_Abort+0x32a>
24059e12:	687b      	ldr	r3, [r7, #4]
24059e14:	681b      	ldr	r3, [r3, #0]
24059e16:	4a5e      	ldr	r2, [pc, #376]	@ (24059f90 <HAL_DMA_Abort+0x46c>)
24059e18:	4293      	cmp	r3, r2
24059e1a:	d018      	beq.n	24059e4e <HAL_DMA_Abort+0x32a>
24059e1c:	687b      	ldr	r3, [r7, #4]
24059e1e:	681b      	ldr	r3, [r3, #0]
24059e20:	4a5c      	ldr	r2, [pc, #368]	@ (24059f94 <HAL_DMA_Abort+0x470>)
24059e22:	4293      	cmp	r3, r2
24059e24:	d013      	beq.n	24059e4e <HAL_DMA_Abort+0x32a>
24059e26:	687b      	ldr	r3, [r7, #4]
24059e28:	681b      	ldr	r3, [r3, #0]
24059e2a:	4a5b      	ldr	r2, [pc, #364]	@ (24059f98 <HAL_DMA_Abort+0x474>)
24059e2c:	4293      	cmp	r3, r2
24059e2e:	d00e      	beq.n	24059e4e <HAL_DMA_Abort+0x32a>
24059e30:	687b      	ldr	r3, [r7, #4]
24059e32:	681b      	ldr	r3, [r3, #0]
24059e34:	4a59      	ldr	r2, [pc, #356]	@ (24059f9c <HAL_DMA_Abort+0x478>)
24059e36:	4293      	cmp	r3, r2
24059e38:	d009      	beq.n	24059e4e <HAL_DMA_Abort+0x32a>
24059e3a:	687b      	ldr	r3, [r7, #4]
24059e3c:	681b      	ldr	r3, [r3, #0]
24059e3e:	4a58      	ldr	r2, [pc, #352]	@ (24059fa0 <HAL_DMA_Abort+0x47c>)
24059e40:	4293      	cmp	r3, r2
24059e42:	d004      	beq.n	24059e4e <HAL_DMA_Abort+0x32a>
24059e44:	687b      	ldr	r3, [r7, #4]
24059e46:	681b      	ldr	r3, [r3, #0]
24059e48:	4a56      	ldr	r2, [pc, #344]	@ (24059fa4 <HAL_DMA_Abort+0x480>)
24059e4a:	4293      	cmp	r3, r2
24059e4c:	d108      	bne.n	24059e60 <HAL_DMA_Abort+0x33c>
24059e4e:	687b      	ldr	r3, [r7, #4]
24059e50:	681b      	ldr	r3, [r3, #0]
24059e52:	681a      	ldr	r2, [r3, #0]
24059e54:	687b      	ldr	r3, [r7, #4]
24059e56:	681b      	ldr	r3, [r3, #0]
24059e58:	f022 0201 	bic.w	r2, r2, #1
24059e5c:	601a      	str	r2, [r3, #0]
24059e5e:	e007      	b.n	24059e70 <HAL_DMA_Abort+0x34c>
24059e60:	687b      	ldr	r3, [r7, #4]
24059e62:	681b      	ldr	r3, [r3, #0]
24059e64:	681a      	ldr	r2, [r3, #0]
24059e66:	687b      	ldr	r3, [r7, #4]
24059e68:	681b      	ldr	r3, [r3, #0]
24059e6a:	f022 0201 	bic.w	r2, r2, #1
24059e6e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
24059e70:	e013      	b.n	24059e9a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
24059e72:	f7fc fe05 	bl	24056a80 <HAL_GetTick>
24059e76:	4602      	mov	r2, r0
24059e78:	693b      	ldr	r3, [r7, #16]
24059e7a:	1ad3      	subs	r3, r2, r3
24059e7c:	2b05      	cmp	r3, #5
24059e7e:	d90c      	bls.n	24059e9a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
24059e80:	687b      	ldr	r3, [r7, #4]
24059e82:	2220      	movs	r2, #32
24059e84:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
24059e86:	687b      	ldr	r3, [r7, #4]
24059e88:	2203      	movs	r2, #3
24059e8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
24059e8e:	687b      	ldr	r3, [r7, #4]
24059e90:	2200      	movs	r2, #0
24059e92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
24059e96:	2301      	movs	r3, #1
24059e98:	e12d      	b.n	2405a0f6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
24059e9a:	697b      	ldr	r3, [r7, #20]
24059e9c:	681b      	ldr	r3, [r3, #0]
24059e9e:	f003 0301 	and.w	r3, r3, #1
24059ea2:	2b00      	cmp	r3, #0
24059ea4:	d1e5      	bne.n	24059e72 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24059ea6:	687b      	ldr	r3, [r7, #4]
24059ea8:	681b      	ldr	r3, [r3, #0]
24059eaa:	4a2f      	ldr	r2, [pc, #188]	@ (24059f68 <HAL_DMA_Abort+0x444>)
24059eac:	4293      	cmp	r3, r2
24059eae:	d04a      	beq.n	24059f46 <HAL_DMA_Abort+0x422>
24059eb0:	687b      	ldr	r3, [r7, #4]
24059eb2:	681b      	ldr	r3, [r3, #0]
24059eb4:	4a2d      	ldr	r2, [pc, #180]	@ (24059f6c <HAL_DMA_Abort+0x448>)
24059eb6:	4293      	cmp	r3, r2
24059eb8:	d045      	beq.n	24059f46 <HAL_DMA_Abort+0x422>
24059eba:	687b      	ldr	r3, [r7, #4]
24059ebc:	681b      	ldr	r3, [r3, #0]
24059ebe:	4a2c      	ldr	r2, [pc, #176]	@ (24059f70 <HAL_DMA_Abort+0x44c>)
24059ec0:	4293      	cmp	r3, r2
24059ec2:	d040      	beq.n	24059f46 <HAL_DMA_Abort+0x422>
24059ec4:	687b      	ldr	r3, [r7, #4]
24059ec6:	681b      	ldr	r3, [r3, #0]
24059ec8:	4a2a      	ldr	r2, [pc, #168]	@ (24059f74 <HAL_DMA_Abort+0x450>)
24059eca:	4293      	cmp	r3, r2
24059ecc:	d03b      	beq.n	24059f46 <HAL_DMA_Abort+0x422>
24059ece:	687b      	ldr	r3, [r7, #4]
24059ed0:	681b      	ldr	r3, [r3, #0]
24059ed2:	4a29      	ldr	r2, [pc, #164]	@ (24059f78 <HAL_DMA_Abort+0x454>)
24059ed4:	4293      	cmp	r3, r2
24059ed6:	d036      	beq.n	24059f46 <HAL_DMA_Abort+0x422>
24059ed8:	687b      	ldr	r3, [r7, #4]
24059eda:	681b      	ldr	r3, [r3, #0]
24059edc:	4a27      	ldr	r2, [pc, #156]	@ (24059f7c <HAL_DMA_Abort+0x458>)
24059ede:	4293      	cmp	r3, r2
24059ee0:	d031      	beq.n	24059f46 <HAL_DMA_Abort+0x422>
24059ee2:	687b      	ldr	r3, [r7, #4]
24059ee4:	681b      	ldr	r3, [r3, #0]
24059ee6:	4a26      	ldr	r2, [pc, #152]	@ (24059f80 <HAL_DMA_Abort+0x45c>)
24059ee8:	4293      	cmp	r3, r2
24059eea:	d02c      	beq.n	24059f46 <HAL_DMA_Abort+0x422>
24059eec:	687b      	ldr	r3, [r7, #4]
24059eee:	681b      	ldr	r3, [r3, #0]
24059ef0:	4a24      	ldr	r2, [pc, #144]	@ (24059f84 <HAL_DMA_Abort+0x460>)
24059ef2:	4293      	cmp	r3, r2
24059ef4:	d027      	beq.n	24059f46 <HAL_DMA_Abort+0x422>
24059ef6:	687b      	ldr	r3, [r7, #4]
24059ef8:	681b      	ldr	r3, [r3, #0]
24059efa:	4a23      	ldr	r2, [pc, #140]	@ (24059f88 <HAL_DMA_Abort+0x464>)
24059efc:	4293      	cmp	r3, r2
24059efe:	d022      	beq.n	24059f46 <HAL_DMA_Abort+0x422>
24059f00:	687b      	ldr	r3, [r7, #4]
24059f02:	681b      	ldr	r3, [r3, #0]
24059f04:	4a21      	ldr	r2, [pc, #132]	@ (24059f8c <HAL_DMA_Abort+0x468>)
24059f06:	4293      	cmp	r3, r2
24059f08:	d01d      	beq.n	24059f46 <HAL_DMA_Abort+0x422>
24059f0a:	687b      	ldr	r3, [r7, #4]
24059f0c:	681b      	ldr	r3, [r3, #0]
24059f0e:	4a20      	ldr	r2, [pc, #128]	@ (24059f90 <HAL_DMA_Abort+0x46c>)
24059f10:	4293      	cmp	r3, r2
24059f12:	d018      	beq.n	24059f46 <HAL_DMA_Abort+0x422>
24059f14:	687b      	ldr	r3, [r7, #4]
24059f16:	681b      	ldr	r3, [r3, #0]
24059f18:	4a1e      	ldr	r2, [pc, #120]	@ (24059f94 <HAL_DMA_Abort+0x470>)
24059f1a:	4293      	cmp	r3, r2
24059f1c:	d013      	beq.n	24059f46 <HAL_DMA_Abort+0x422>
24059f1e:	687b      	ldr	r3, [r7, #4]
24059f20:	681b      	ldr	r3, [r3, #0]
24059f22:	4a1d      	ldr	r2, [pc, #116]	@ (24059f98 <HAL_DMA_Abort+0x474>)
24059f24:	4293      	cmp	r3, r2
24059f26:	d00e      	beq.n	24059f46 <HAL_DMA_Abort+0x422>
24059f28:	687b      	ldr	r3, [r7, #4]
24059f2a:	681b      	ldr	r3, [r3, #0]
24059f2c:	4a1b      	ldr	r2, [pc, #108]	@ (24059f9c <HAL_DMA_Abort+0x478>)
24059f2e:	4293      	cmp	r3, r2
24059f30:	d009      	beq.n	24059f46 <HAL_DMA_Abort+0x422>
24059f32:	687b      	ldr	r3, [r7, #4]
24059f34:	681b      	ldr	r3, [r3, #0]
24059f36:	4a1a      	ldr	r2, [pc, #104]	@ (24059fa0 <HAL_DMA_Abort+0x47c>)
24059f38:	4293      	cmp	r3, r2
24059f3a:	d004      	beq.n	24059f46 <HAL_DMA_Abort+0x422>
24059f3c:	687b      	ldr	r3, [r7, #4]
24059f3e:	681b      	ldr	r3, [r3, #0]
24059f40:	4a18      	ldr	r2, [pc, #96]	@ (24059fa4 <HAL_DMA_Abort+0x480>)
24059f42:	4293      	cmp	r3, r2
24059f44:	d101      	bne.n	24059f4a <HAL_DMA_Abort+0x426>
24059f46:	2301      	movs	r3, #1
24059f48:	e000      	b.n	24059f4c <HAL_DMA_Abort+0x428>
24059f4a:	2300      	movs	r3, #0
24059f4c:	2b00      	cmp	r3, #0
24059f4e:	d02b      	beq.n	24059fa8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
24059f50:	687b      	ldr	r3, [r7, #4]
24059f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
24059f54:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24059f56:	687b      	ldr	r3, [r7, #4]
24059f58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
24059f5a:	f003 031f 	and.w	r3, r3, #31
24059f5e:	223f      	movs	r2, #63	@ 0x3f
24059f60:	409a      	lsls	r2, r3
24059f62:	68bb      	ldr	r3, [r7, #8]
24059f64:	609a      	str	r2, [r3, #8]
24059f66:	e02a      	b.n	24059fbe <HAL_DMA_Abort+0x49a>
24059f68:	40020010 	.word	0x40020010
24059f6c:	40020028 	.word	0x40020028
24059f70:	40020040 	.word	0x40020040
24059f74:	40020058 	.word	0x40020058
24059f78:	40020070 	.word	0x40020070
24059f7c:	40020088 	.word	0x40020088
24059f80:	400200a0 	.word	0x400200a0
24059f84:	400200b8 	.word	0x400200b8
24059f88:	40020410 	.word	0x40020410
24059f8c:	40020428 	.word	0x40020428
24059f90:	40020440 	.word	0x40020440
24059f94:	40020458 	.word	0x40020458
24059f98:	40020470 	.word	0x40020470
24059f9c:	40020488 	.word	0x40020488
24059fa0:	400204a0 	.word	0x400204a0
24059fa4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
24059fa8:	687b      	ldr	r3, [r7, #4]
24059faa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
24059fac:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24059fae:	687b      	ldr	r3, [r7, #4]
24059fb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
24059fb2:	f003 031f 	and.w	r3, r3, #31
24059fb6:	2201      	movs	r2, #1
24059fb8:	409a      	lsls	r2, r3
24059fba:	68fb      	ldr	r3, [r7, #12]
24059fbc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24059fbe:	687b      	ldr	r3, [r7, #4]
24059fc0:	681b      	ldr	r3, [r3, #0]
24059fc2:	4a4f      	ldr	r2, [pc, #316]	@ (2405a100 <HAL_DMA_Abort+0x5dc>)
24059fc4:	4293      	cmp	r3, r2
24059fc6:	d072      	beq.n	2405a0ae <HAL_DMA_Abort+0x58a>
24059fc8:	687b      	ldr	r3, [r7, #4]
24059fca:	681b      	ldr	r3, [r3, #0]
24059fcc:	4a4d      	ldr	r2, [pc, #308]	@ (2405a104 <HAL_DMA_Abort+0x5e0>)
24059fce:	4293      	cmp	r3, r2
24059fd0:	d06d      	beq.n	2405a0ae <HAL_DMA_Abort+0x58a>
24059fd2:	687b      	ldr	r3, [r7, #4]
24059fd4:	681b      	ldr	r3, [r3, #0]
24059fd6:	4a4c      	ldr	r2, [pc, #304]	@ (2405a108 <HAL_DMA_Abort+0x5e4>)
24059fd8:	4293      	cmp	r3, r2
24059fda:	d068      	beq.n	2405a0ae <HAL_DMA_Abort+0x58a>
24059fdc:	687b      	ldr	r3, [r7, #4]
24059fde:	681b      	ldr	r3, [r3, #0]
24059fe0:	4a4a      	ldr	r2, [pc, #296]	@ (2405a10c <HAL_DMA_Abort+0x5e8>)
24059fe2:	4293      	cmp	r3, r2
24059fe4:	d063      	beq.n	2405a0ae <HAL_DMA_Abort+0x58a>
24059fe6:	687b      	ldr	r3, [r7, #4]
24059fe8:	681b      	ldr	r3, [r3, #0]
24059fea:	4a49      	ldr	r2, [pc, #292]	@ (2405a110 <HAL_DMA_Abort+0x5ec>)
24059fec:	4293      	cmp	r3, r2
24059fee:	d05e      	beq.n	2405a0ae <HAL_DMA_Abort+0x58a>
24059ff0:	687b      	ldr	r3, [r7, #4]
24059ff2:	681b      	ldr	r3, [r3, #0]
24059ff4:	4a47      	ldr	r2, [pc, #284]	@ (2405a114 <HAL_DMA_Abort+0x5f0>)
24059ff6:	4293      	cmp	r3, r2
24059ff8:	d059      	beq.n	2405a0ae <HAL_DMA_Abort+0x58a>
24059ffa:	687b      	ldr	r3, [r7, #4]
24059ffc:	681b      	ldr	r3, [r3, #0]
24059ffe:	4a46      	ldr	r2, [pc, #280]	@ (2405a118 <HAL_DMA_Abort+0x5f4>)
2405a000:	4293      	cmp	r3, r2
2405a002:	d054      	beq.n	2405a0ae <HAL_DMA_Abort+0x58a>
2405a004:	687b      	ldr	r3, [r7, #4]
2405a006:	681b      	ldr	r3, [r3, #0]
2405a008:	4a44      	ldr	r2, [pc, #272]	@ (2405a11c <HAL_DMA_Abort+0x5f8>)
2405a00a:	4293      	cmp	r3, r2
2405a00c:	d04f      	beq.n	2405a0ae <HAL_DMA_Abort+0x58a>
2405a00e:	687b      	ldr	r3, [r7, #4]
2405a010:	681b      	ldr	r3, [r3, #0]
2405a012:	4a43      	ldr	r2, [pc, #268]	@ (2405a120 <HAL_DMA_Abort+0x5fc>)
2405a014:	4293      	cmp	r3, r2
2405a016:	d04a      	beq.n	2405a0ae <HAL_DMA_Abort+0x58a>
2405a018:	687b      	ldr	r3, [r7, #4]
2405a01a:	681b      	ldr	r3, [r3, #0]
2405a01c:	4a41      	ldr	r2, [pc, #260]	@ (2405a124 <HAL_DMA_Abort+0x600>)
2405a01e:	4293      	cmp	r3, r2
2405a020:	d045      	beq.n	2405a0ae <HAL_DMA_Abort+0x58a>
2405a022:	687b      	ldr	r3, [r7, #4]
2405a024:	681b      	ldr	r3, [r3, #0]
2405a026:	4a40      	ldr	r2, [pc, #256]	@ (2405a128 <HAL_DMA_Abort+0x604>)
2405a028:	4293      	cmp	r3, r2
2405a02a:	d040      	beq.n	2405a0ae <HAL_DMA_Abort+0x58a>
2405a02c:	687b      	ldr	r3, [r7, #4]
2405a02e:	681b      	ldr	r3, [r3, #0]
2405a030:	4a3e      	ldr	r2, [pc, #248]	@ (2405a12c <HAL_DMA_Abort+0x608>)
2405a032:	4293      	cmp	r3, r2
2405a034:	d03b      	beq.n	2405a0ae <HAL_DMA_Abort+0x58a>
2405a036:	687b      	ldr	r3, [r7, #4]
2405a038:	681b      	ldr	r3, [r3, #0]
2405a03a:	4a3d      	ldr	r2, [pc, #244]	@ (2405a130 <HAL_DMA_Abort+0x60c>)
2405a03c:	4293      	cmp	r3, r2
2405a03e:	d036      	beq.n	2405a0ae <HAL_DMA_Abort+0x58a>
2405a040:	687b      	ldr	r3, [r7, #4]
2405a042:	681b      	ldr	r3, [r3, #0]
2405a044:	4a3b      	ldr	r2, [pc, #236]	@ (2405a134 <HAL_DMA_Abort+0x610>)
2405a046:	4293      	cmp	r3, r2
2405a048:	d031      	beq.n	2405a0ae <HAL_DMA_Abort+0x58a>
2405a04a:	687b      	ldr	r3, [r7, #4]
2405a04c:	681b      	ldr	r3, [r3, #0]
2405a04e:	4a3a      	ldr	r2, [pc, #232]	@ (2405a138 <HAL_DMA_Abort+0x614>)
2405a050:	4293      	cmp	r3, r2
2405a052:	d02c      	beq.n	2405a0ae <HAL_DMA_Abort+0x58a>
2405a054:	687b      	ldr	r3, [r7, #4]
2405a056:	681b      	ldr	r3, [r3, #0]
2405a058:	4a38      	ldr	r2, [pc, #224]	@ (2405a13c <HAL_DMA_Abort+0x618>)
2405a05a:	4293      	cmp	r3, r2
2405a05c:	d027      	beq.n	2405a0ae <HAL_DMA_Abort+0x58a>
2405a05e:	687b      	ldr	r3, [r7, #4]
2405a060:	681b      	ldr	r3, [r3, #0]
2405a062:	4a37      	ldr	r2, [pc, #220]	@ (2405a140 <HAL_DMA_Abort+0x61c>)
2405a064:	4293      	cmp	r3, r2
2405a066:	d022      	beq.n	2405a0ae <HAL_DMA_Abort+0x58a>
2405a068:	687b      	ldr	r3, [r7, #4]
2405a06a:	681b      	ldr	r3, [r3, #0]
2405a06c:	4a35      	ldr	r2, [pc, #212]	@ (2405a144 <HAL_DMA_Abort+0x620>)
2405a06e:	4293      	cmp	r3, r2
2405a070:	d01d      	beq.n	2405a0ae <HAL_DMA_Abort+0x58a>
2405a072:	687b      	ldr	r3, [r7, #4]
2405a074:	681b      	ldr	r3, [r3, #0]
2405a076:	4a34      	ldr	r2, [pc, #208]	@ (2405a148 <HAL_DMA_Abort+0x624>)
2405a078:	4293      	cmp	r3, r2
2405a07a:	d018      	beq.n	2405a0ae <HAL_DMA_Abort+0x58a>
2405a07c:	687b      	ldr	r3, [r7, #4]
2405a07e:	681b      	ldr	r3, [r3, #0]
2405a080:	4a32      	ldr	r2, [pc, #200]	@ (2405a14c <HAL_DMA_Abort+0x628>)
2405a082:	4293      	cmp	r3, r2
2405a084:	d013      	beq.n	2405a0ae <HAL_DMA_Abort+0x58a>
2405a086:	687b      	ldr	r3, [r7, #4]
2405a088:	681b      	ldr	r3, [r3, #0]
2405a08a:	4a31      	ldr	r2, [pc, #196]	@ (2405a150 <HAL_DMA_Abort+0x62c>)
2405a08c:	4293      	cmp	r3, r2
2405a08e:	d00e      	beq.n	2405a0ae <HAL_DMA_Abort+0x58a>
2405a090:	687b      	ldr	r3, [r7, #4]
2405a092:	681b      	ldr	r3, [r3, #0]
2405a094:	4a2f      	ldr	r2, [pc, #188]	@ (2405a154 <HAL_DMA_Abort+0x630>)
2405a096:	4293      	cmp	r3, r2
2405a098:	d009      	beq.n	2405a0ae <HAL_DMA_Abort+0x58a>
2405a09a:	687b      	ldr	r3, [r7, #4]
2405a09c:	681b      	ldr	r3, [r3, #0]
2405a09e:	4a2e      	ldr	r2, [pc, #184]	@ (2405a158 <HAL_DMA_Abort+0x634>)
2405a0a0:	4293      	cmp	r3, r2
2405a0a2:	d004      	beq.n	2405a0ae <HAL_DMA_Abort+0x58a>
2405a0a4:	687b      	ldr	r3, [r7, #4]
2405a0a6:	681b      	ldr	r3, [r3, #0]
2405a0a8:	4a2c      	ldr	r2, [pc, #176]	@ (2405a15c <HAL_DMA_Abort+0x638>)
2405a0aa:	4293      	cmp	r3, r2
2405a0ac:	d101      	bne.n	2405a0b2 <HAL_DMA_Abort+0x58e>
2405a0ae:	2301      	movs	r3, #1
2405a0b0:	e000      	b.n	2405a0b4 <HAL_DMA_Abort+0x590>
2405a0b2:	2300      	movs	r3, #0
2405a0b4:	2b00      	cmp	r3, #0
2405a0b6:	d015      	beq.n	2405a0e4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
2405a0b8:	687b      	ldr	r3, [r7, #4]
2405a0ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
2405a0bc:	687a      	ldr	r2, [r7, #4]
2405a0be:	6e92      	ldr	r2, [r2, #104]	@ 0x68
2405a0c0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
2405a0c2:	687b      	ldr	r3, [r7, #4]
2405a0c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
2405a0c6:	2b00      	cmp	r3, #0
2405a0c8:	d00c      	beq.n	2405a0e4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
2405a0ca:	687b      	ldr	r3, [r7, #4]
2405a0cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
2405a0ce:	681a      	ldr	r2, [r3, #0]
2405a0d0:	687b      	ldr	r3, [r7, #4]
2405a0d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
2405a0d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
2405a0d8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
2405a0da:	687b      	ldr	r3, [r7, #4]
2405a0dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2405a0de:	687a      	ldr	r2, [r7, #4]
2405a0e0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
2405a0e2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
2405a0e4:	687b      	ldr	r3, [r7, #4]
2405a0e6:	2201      	movs	r2, #1
2405a0e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
2405a0ec:	687b      	ldr	r3, [r7, #4]
2405a0ee:	2200      	movs	r2, #0
2405a0f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
2405a0f4:	2300      	movs	r3, #0
}
2405a0f6:	4618      	mov	r0, r3
2405a0f8:	3718      	adds	r7, #24
2405a0fa:	46bd      	mov	sp, r7
2405a0fc:	bd80      	pop	{r7, pc}
2405a0fe:	bf00      	nop
2405a100:	40020010 	.word	0x40020010
2405a104:	40020028 	.word	0x40020028
2405a108:	40020040 	.word	0x40020040
2405a10c:	40020058 	.word	0x40020058
2405a110:	40020070 	.word	0x40020070
2405a114:	40020088 	.word	0x40020088
2405a118:	400200a0 	.word	0x400200a0
2405a11c:	400200b8 	.word	0x400200b8
2405a120:	40020410 	.word	0x40020410
2405a124:	40020428 	.word	0x40020428
2405a128:	40020440 	.word	0x40020440
2405a12c:	40020458 	.word	0x40020458
2405a130:	40020470 	.word	0x40020470
2405a134:	40020488 	.word	0x40020488
2405a138:	400204a0 	.word	0x400204a0
2405a13c:	400204b8 	.word	0x400204b8
2405a140:	58025408 	.word	0x58025408
2405a144:	5802541c 	.word	0x5802541c
2405a148:	58025430 	.word	0x58025430
2405a14c:	58025444 	.word	0x58025444
2405a150:	58025458 	.word	0x58025458
2405a154:	5802546c 	.word	0x5802546c
2405a158:	58025480 	.word	0x58025480
2405a15c:	58025494 	.word	0x58025494

2405a160 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
2405a160:	b580      	push	{r7, lr}
2405a162:	b084      	sub	sp, #16
2405a164:	af00      	add	r7, sp, #0
2405a166:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
2405a168:	687b      	ldr	r3, [r7, #4]
2405a16a:	2b00      	cmp	r3, #0
2405a16c:	d101      	bne.n	2405a172 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
2405a16e:	2301      	movs	r3, #1
2405a170:	e237      	b.n	2405a5e2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
2405a172:	687b      	ldr	r3, [r7, #4]
2405a174:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
2405a178:	b2db      	uxtb	r3, r3
2405a17a:	2b02      	cmp	r3, #2
2405a17c:	d004      	beq.n	2405a188 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
2405a17e:	687b      	ldr	r3, [r7, #4]
2405a180:	2280      	movs	r2, #128	@ 0x80
2405a182:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
2405a184:	2301      	movs	r3, #1
2405a186:	e22c      	b.n	2405a5e2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
2405a188:	687b      	ldr	r3, [r7, #4]
2405a18a:	681b      	ldr	r3, [r3, #0]
2405a18c:	4a5c      	ldr	r2, [pc, #368]	@ (2405a300 <HAL_DMA_Abort_IT+0x1a0>)
2405a18e:	4293      	cmp	r3, r2
2405a190:	d04a      	beq.n	2405a228 <HAL_DMA_Abort_IT+0xc8>
2405a192:	687b      	ldr	r3, [r7, #4]
2405a194:	681b      	ldr	r3, [r3, #0]
2405a196:	4a5b      	ldr	r2, [pc, #364]	@ (2405a304 <HAL_DMA_Abort_IT+0x1a4>)
2405a198:	4293      	cmp	r3, r2
2405a19a:	d045      	beq.n	2405a228 <HAL_DMA_Abort_IT+0xc8>
2405a19c:	687b      	ldr	r3, [r7, #4]
2405a19e:	681b      	ldr	r3, [r3, #0]
2405a1a0:	4a59      	ldr	r2, [pc, #356]	@ (2405a308 <HAL_DMA_Abort_IT+0x1a8>)
2405a1a2:	4293      	cmp	r3, r2
2405a1a4:	d040      	beq.n	2405a228 <HAL_DMA_Abort_IT+0xc8>
2405a1a6:	687b      	ldr	r3, [r7, #4]
2405a1a8:	681b      	ldr	r3, [r3, #0]
2405a1aa:	4a58      	ldr	r2, [pc, #352]	@ (2405a30c <HAL_DMA_Abort_IT+0x1ac>)
2405a1ac:	4293      	cmp	r3, r2
2405a1ae:	d03b      	beq.n	2405a228 <HAL_DMA_Abort_IT+0xc8>
2405a1b0:	687b      	ldr	r3, [r7, #4]
2405a1b2:	681b      	ldr	r3, [r3, #0]
2405a1b4:	4a56      	ldr	r2, [pc, #344]	@ (2405a310 <HAL_DMA_Abort_IT+0x1b0>)
2405a1b6:	4293      	cmp	r3, r2
2405a1b8:	d036      	beq.n	2405a228 <HAL_DMA_Abort_IT+0xc8>
2405a1ba:	687b      	ldr	r3, [r7, #4]
2405a1bc:	681b      	ldr	r3, [r3, #0]
2405a1be:	4a55      	ldr	r2, [pc, #340]	@ (2405a314 <HAL_DMA_Abort_IT+0x1b4>)
2405a1c0:	4293      	cmp	r3, r2
2405a1c2:	d031      	beq.n	2405a228 <HAL_DMA_Abort_IT+0xc8>
2405a1c4:	687b      	ldr	r3, [r7, #4]
2405a1c6:	681b      	ldr	r3, [r3, #0]
2405a1c8:	4a53      	ldr	r2, [pc, #332]	@ (2405a318 <HAL_DMA_Abort_IT+0x1b8>)
2405a1ca:	4293      	cmp	r3, r2
2405a1cc:	d02c      	beq.n	2405a228 <HAL_DMA_Abort_IT+0xc8>
2405a1ce:	687b      	ldr	r3, [r7, #4]
2405a1d0:	681b      	ldr	r3, [r3, #0]
2405a1d2:	4a52      	ldr	r2, [pc, #328]	@ (2405a31c <HAL_DMA_Abort_IT+0x1bc>)
2405a1d4:	4293      	cmp	r3, r2
2405a1d6:	d027      	beq.n	2405a228 <HAL_DMA_Abort_IT+0xc8>
2405a1d8:	687b      	ldr	r3, [r7, #4]
2405a1da:	681b      	ldr	r3, [r3, #0]
2405a1dc:	4a50      	ldr	r2, [pc, #320]	@ (2405a320 <HAL_DMA_Abort_IT+0x1c0>)
2405a1de:	4293      	cmp	r3, r2
2405a1e0:	d022      	beq.n	2405a228 <HAL_DMA_Abort_IT+0xc8>
2405a1e2:	687b      	ldr	r3, [r7, #4]
2405a1e4:	681b      	ldr	r3, [r3, #0]
2405a1e6:	4a4f      	ldr	r2, [pc, #316]	@ (2405a324 <HAL_DMA_Abort_IT+0x1c4>)
2405a1e8:	4293      	cmp	r3, r2
2405a1ea:	d01d      	beq.n	2405a228 <HAL_DMA_Abort_IT+0xc8>
2405a1ec:	687b      	ldr	r3, [r7, #4]
2405a1ee:	681b      	ldr	r3, [r3, #0]
2405a1f0:	4a4d      	ldr	r2, [pc, #308]	@ (2405a328 <HAL_DMA_Abort_IT+0x1c8>)
2405a1f2:	4293      	cmp	r3, r2
2405a1f4:	d018      	beq.n	2405a228 <HAL_DMA_Abort_IT+0xc8>
2405a1f6:	687b      	ldr	r3, [r7, #4]
2405a1f8:	681b      	ldr	r3, [r3, #0]
2405a1fa:	4a4c      	ldr	r2, [pc, #304]	@ (2405a32c <HAL_DMA_Abort_IT+0x1cc>)
2405a1fc:	4293      	cmp	r3, r2
2405a1fe:	d013      	beq.n	2405a228 <HAL_DMA_Abort_IT+0xc8>
2405a200:	687b      	ldr	r3, [r7, #4]
2405a202:	681b      	ldr	r3, [r3, #0]
2405a204:	4a4a      	ldr	r2, [pc, #296]	@ (2405a330 <HAL_DMA_Abort_IT+0x1d0>)
2405a206:	4293      	cmp	r3, r2
2405a208:	d00e      	beq.n	2405a228 <HAL_DMA_Abort_IT+0xc8>
2405a20a:	687b      	ldr	r3, [r7, #4]
2405a20c:	681b      	ldr	r3, [r3, #0]
2405a20e:	4a49      	ldr	r2, [pc, #292]	@ (2405a334 <HAL_DMA_Abort_IT+0x1d4>)
2405a210:	4293      	cmp	r3, r2
2405a212:	d009      	beq.n	2405a228 <HAL_DMA_Abort_IT+0xc8>
2405a214:	687b      	ldr	r3, [r7, #4]
2405a216:	681b      	ldr	r3, [r3, #0]
2405a218:	4a47      	ldr	r2, [pc, #284]	@ (2405a338 <HAL_DMA_Abort_IT+0x1d8>)
2405a21a:	4293      	cmp	r3, r2
2405a21c:	d004      	beq.n	2405a228 <HAL_DMA_Abort_IT+0xc8>
2405a21e:	687b      	ldr	r3, [r7, #4]
2405a220:	681b      	ldr	r3, [r3, #0]
2405a222:	4a46      	ldr	r2, [pc, #280]	@ (2405a33c <HAL_DMA_Abort_IT+0x1dc>)
2405a224:	4293      	cmp	r3, r2
2405a226:	d101      	bne.n	2405a22c <HAL_DMA_Abort_IT+0xcc>
2405a228:	2301      	movs	r3, #1
2405a22a:	e000      	b.n	2405a22e <HAL_DMA_Abort_IT+0xce>
2405a22c:	2300      	movs	r3, #0
2405a22e:	2b00      	cmp	r3, #0
2405a230:	f000 8086 	beq.w	2405a340 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
2405a234:	687b      	ldr	r3, [r7, #4]
2405a236:	2204      	movs	r2, #4
2405a238:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
2405a23c:	687b      	ldr	r3, [r7, #4]
2405a23e:	681b      	ldr	r3, [r3, #0]
2405a240:	4a2f      	ldr	r2, [pc, #188]	@ (2405a300 <HAL_DMA_Abort_IT+0x1a0>)
2405a242:	4293      	cmp	r3, r2
2405a244:	d04a      	beq.n	2405a2dc <HAL_DMA_Abort_IT+0x17c>
2405a246:	687b      	ldr	r3, [r7, #4]
2405a248:	681b      	ldr	r3, [r3, #0]
2405a24a:	4a2e      	ldr	r2, [pc, #184]	@ (2405a304 <HAL_DMA_Abort_IT+0x1a4>)
2405a24c:	4293      	cmp	r3, r2
2405a24e:	d045      	beq.n	2405a2dc <HAL_DMA_Abort_IT+0x17c>
2405a250:	687b      	ldr	r3, [r7, #4]
2405a252:	681b      	ldr	r3, [r3, #0]
2405a254:	4a2c      	ldr	r2, [pc, #176]	@ (2405a308 <HAL_DMA_Abort_IT+0x1a8>)
2405a256:	4293      	cmp	r3, r2
2405a258:	d040      	beq.n	2405a2dc <HAL_DMA_Abort_IT+0x17c>
2405a25a:	687b      	ldr	r3, [r7, #4]
2405a25c:	681b      	ldr	r3, [r3, #0]
2405a25e:	4a2b      	ldr	r2, [pc, #172]	@ (2405a30c <HAL_DMA_Abort_IT+0x1ac>)
2405a260:	4293      	cmp	r3, r2
2405a262:	d03b      	beq.n	2405a2dc <HAL_DMA_Abort_IT+0x17c>
2405a264:	687b      	ldr	r3, [r7, #4]
2405a266:	681b      	ldr	r3, [r3, #0]
2405a268:	4a29      	ldr	r2, [pc, #164]	@ (2405a310 <HAL_DMA_Abort_IT+0x1b0>)
2405a26a:	4293      	cmp	r3, r2
2405a26c:	d036      	beq.n	2405a2dc <HAL_DMA_Abort_IT+0x17c>
2405a26e:	687b      	ldr	r3, [r7, #4]
2405a270:	681b      	ldr	r3, [r3, #0]
2405a272:	4a28      	ldr	r2, [pc, #160]	@ (2405a314 <HAL_DMA_Abort_IT+0x1b4>)
2405a274:	4293      	cmp	r3, r2
2405a276:	d031      	beq.n	2405a2dc <HAL_DMA_Abort_IT+0x17c>
2405a278:	687b      	ldr	r3, [r7, #4]
2405a27a:	681b      	ldr	r3, [r3, #0]
2405a27c:	4a26      	ldr	r2, [pc, #152]	@ (2405a318 <HAL_DMA_Abort_IT+0x1b8>)
2405a27e:	4293      	cmp	r3, r2
2405a280:	d02c      	beq.n	2405a2dc <HAL_DMA_Abort_IT+0x17c>
2405a282:	687b      	ldr	r3, [r7, #4]
2405a284:	681b      	ldr	r3, [r3, #0]
2405a286:	4a25      	ldr	r2, [pc, #148]	@ (2405a31c <HAL_DMA_Abort_IT+0x1bc>)
2405a288:	4293      	cmp	r3, r2
2405a28a:	d027      	beq.n	2405a2dc <HAL_DMA_Abort_IT+0x17c>
2405a28c:	687b      	ldr	r3, [r7, #4]
2405a28e:	681b      	ldr	r3, [r3, #0]
2405a290:	4a23      	ldr	r2, [pc, #140]	@ (2405a320 <HAL_DMA_Abort_IT+0x1c0>)
2405a292:	4293      	cmp	r3, r2
2405a294:	d022      	beq.n	2405a2dc <HAL_DMA_Abort_IT+0x17c>
2405a296:	687b      	ldr	r3, [r7, #4]
2405a298:	681b      	ldr	r3, [r3, #0]
2405a29a:	4a22      	ldr	r2, [pc, #136]	@ (2405a324 <HAL_DMA_Abort_IT+0x1c4>)
2405a29c:	4293      	cmp	r3, r2
2405a29e:	d01d      	beq.n	2405a2dc <HAL_DMA_Abort_IT+0x17c>
2405a2a0:	687b      	ldr	r3, [r7, #4]
2405a2a2:	681b      	ldr	r3, [r3, #0]
2405a2a4:	4a20      	ldr	r2, [pc, #128]	@ (2405a328 <HAL_DMA_Abort_IT+0x1c8>)
2405a2a6:	4293      	cmp	r3, r2
2405a2a8:	d018      	beq.n	2405a2dc <HAL_DMA_Abort_IT+0x17c>
2405a2aa:	687b      	ldr	r3, [r7, #4]
2405a2ac:	681b      	ldr	r3, [r3, #0]
2405a2ae:	4a1f      	ldr	r2, [pc, #124]	@ (2405a32c <HAL_DMA_Abort_IT+0x1cc>)
2405a2b0:	4293      	cmp	r3, r2
2405a2b2:	d013      	beq.n	2405a2dc <HAL_DMA_Abort_IT+0x17c>
2405a2b4:	687b      	ldr	r3, [r7, #4]
2405a2b6:	681b      	ldr	r3, [r3, #0]
2405a2b8:	4a1d      	ldr	r2, [pc, #116]	@ (2405a330 <HAL_DMA_Abort_IT+0x1d0>)
2405a2ba:	4293      	cmp	r3, r2
2405a2bc:	d00e      	beq.n	2405a2dc <HAL_DMA_Abort_IT+0x17c>
2405a2be:	687b      	ldr	r3, [r7, #4]
2405a2c0:	681b      	ldr	r3, [r3, #0]
2405a2c2:	4a1c      	ldr	r2, [pc, #112]	@ (2405a334 <HAL_DMA_Abort_IT+0x1d4>)
2405a2c4:	4293      	cmp	r3, r2
2405a2c6:	d009      	beq.n	2405a2dc <HAL_DMA_Abort_IT+0x17c>
2405a2c8:	687b      	ldr	r3, [r7, #4]
2405a2ca:	681b      	ldr	r3, [r3, #0]
2405a2cc:	4a1a      	ldr	r2, [pc, #104]	@ (2405a338 <HAL_DMA_Abort_IT+0x1d8>)
2405a2ce:	4293      	cmp	r3, r2
2405a2d0:	d004      	beq.n	2405a2dc <HAL_DMA_Abort_IT+0x17c>
2405a2d2:	687b      	ldr	r3, [r7, #4]
2405a2d4:	681b      	ldr	r3, [r3, #0]
2405a2d6:	4a19      	ldr	r2, [pc, #100]	@ (2405a33c <HAL_DMA_Abort_IT+0x1dc>)
2405a2d8:	4293      	cmp	r3, r2
2405a2da:	d108      	bne.n	2405a2ee <HAL_DMA_Abort_IT+0x18e>
2405a2dc:	687b      	ldr	r3, [r7, #4]
2405a2de:	681b      	ldr	r3, [r3, #0]
2405a2e0:	681a      	ldr	r2, [r3, #0]
2405a2e2:	687b      	ldr	r3, [r7, #4]
2405a2e4:	681b      	ldr	r3, [r3, #0]
2405a2e6:	f022 0201 	bic.w	r2, r2, #1
2405a2ea:	601a      	str	r2, [r3, #0]
2405a2ec:	e178      	b.n	2405a5e0 <HAL_DMA_Abort_IT+0x480>
2405a2ee:	687b      	ldr	r3, [r7, #4]
2405a2f0:	681b      	ldr	r3, [r3, #0]
2405a2f2:	681a      	ldr	r2, [r3, #0]
2405a2f4:	687b      	ldr	r3, [r7, #4]
2405a2f6:	681b      	ldr	r3, [r3, #0]
2405a2f8:	f022 0201 	bic.w	r2, r2, #1
2405a2fc:	601a      	str	r2, [r3, #0]
2405a2fe:	e16f      	b.n	2405a5e0 <HAL_DMA_Abort_IT+0x480>
2405a300:	40020010 	.word	0x40020010
2405a304:	40020028 	.word	0x40020028
2405a308:	40020040 	.word	0x40020040
2405a30c:	40020058 	.word	0x40020058
2405a310:	40020070 	.word	0x40020070
2405a314:	40020088 	.word	0x40020088
2405a318:	400200a0 	.word	0x400200a0
2405a31c:	400200b8 	.word	0x400200b8
2405a320:	40020410 	.word	0x40020410
2405a324:	40020428 	.word	0x40020428
2405a328:	40020440 	.word	0x40020440
2405a32c:	40020458 	.word	0x40020458
2405a330:	40020470 	.word	0x40020470
2405a334:	40020488 	.word	0x40020488
2405a338:	400204a0 	.word	0x400204a0
2405a33c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
2405a340:	687b      	ldr	r3, [r7, #4]
2405a342:	681b      	ldr	r3, [r3, #0]
2405a344:	681a      	ldr	r2, [r3, #0]
2405a346:	687b      	ldr	r3, [r7, #4]
2405a348:	681b      	ldr	r3, [r3, #0]
2405a34a:	f022 020e 	bic.w	r2, r2, #14
2405a34e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
2405a350:	687b      	ldr	r3, [r7, #4]
2405a352:	681b      	ldr	r3, [r3, #0]
2405a354:	4a6c      	ldr	r2, [pc, #432]	@ (2405a508 <HAL_DMA_Abort_IT+0x3a8>)
2405a356:	4293      	cmp	r3, r2
2405a358:	d04a      	beq.n	2405a3f0 <HAL_DMA_Abort_IT+0x290>
2405a35a:	687b      	ldr	r3, [r7, #4]
2405a35c:	681b      	ldr	r3, [r3, #0]
2405a35e:	4a6b      	ldr	r2, [pc, #428]	@ (2405a50c <HAL_DMA_Abort_IT+0x3ac>)
2405a360:	4293      	cmp	r3, r2
2405a362:	d045      	beq.n	2405a3f0 <HAL_DMA_Abort_IT+0x290>
2405a364:	687b      	ldr	r3, [r7, #4]
2405a366:	681b      	ldr	r3, [r3, #0]
2405a368:	4a69      	ldr	r2, [pc, #420]	@ (2405a510 <HAL_DMA_Abort_IT+0x3b0>)
2405a36a:	4293      	cmp	r3, r2
2405a36c:	d040      	beq.n	2405a3f0 <HAL_DMA_Abort_IT+0x290>
2405a36e:	687b      	ldr	r3, [r7, #4]
2405a370:	681b      	ldr	r3, [r3, #0]
2405a372:	4a68      	ldr	r2, [pc, #416]	@ (2405a514 <HAL_DMA_Abort_IT+0x3b4>)
2405a374:	4293      	cmp	r3, r2
2405a376:	d03b      	beq.n	2405a3f0 <HAL_DMA_Abort_IT+0x290>
2405a378:	687b      	ldr	r3, [r7, #4]
2405a37a:	681b      	ldr	r3, [r3, #0]
2405a37c:	4a66      	ldr	r2, [pc, #408]	@ (2405a518 <HAL_DMA_Abort_IT+0x3b8>)
2405a37e:	4293      	cmp	r3, r2
2405a380:	d036      	beq.n	2405a3f0 <HAL_DMA_Abort_IT+0x290>
2405a382:	687b      	ldr	r3, [r7, #4]
2405a384:	681b      	ldr	r3, [r3, #0]
2405a386:	4a65      	ldr	r2, [pc, #404]	@ (2405a51c <HAL_DMA_Abort_IT+0x3bc>)
2405a388:	4293      	cmp	r3, r2
2405a38a:	d031      	beq.n	2405a3f0 <HAL_DMA_Abort_IT+0x290>
2405a38c:	687b      	ldr	r3, [r7, #4]
2405a38e:	681b      	ldr	r3, [r3, #0]
2405a390:	4a63      	ldr	r2, [pc, #396]	@ (2405a520 <HAL_DMA_Abort_IT+0x3c0>)
2405a392:	4293      	cmp	r3, r2
2405a394:	d02c      	beq.n	2405a3f0 <HAL_DMA_Abort_IT+0x290>
2405a396:	687b      	ldr	r3, [r7, #4]
2405a398:	681b      	ldr	r3, [r3, #0]
2405a39a:	4a62      	ldr	r2, [pc, #392]	@ (2405a524 <HAL_DMA_Abort_IT+0x3c4>)
2405a39c:	4293      	cmp	r3, r2
2405a39e:	d027      	beq.n	2405a3f0 <HAL_DMA_Abort_IT+0x290>
2405a3a0:	687b      	ldr	r3, [r7, #4]
2405a3a2:	681b      	ldr	r3, [r3, #0]
2405a3a4:	4a60      	ldr	r2, [pc, #384]	@ (2405a528 <HAL_DMA_Abort_IT+0x3c8>)
2405a3a6:	4293      	cmp	r3, r2
2405a3a8:	d022      	beq.n	2405a3f0 <HAL_DMA_Abort_IT+0x290>
2405a3aa:	687b      	ldr	r3, [r7, #4]
2405a3ac:	681b      	ldr	r3, [r3, #0]
2405a3ae:	4a5f      	ldr	r2, [pc, #380]	@ (2405a52c <HAL_DMA_Abort_IT+0x3cc>)
2405a3b0:	4293      	cmp	r3, r2
2405a3b2:	d01d      	beq.n	2405a3f0 <HAL_DMA_Abort_IT+0x290>
2405a3b4:	687b      	ldr	r3, [r7, #4]
2405a3b6:	681b      	ldr	r3, [r3, #0]
2405a3b8:	4a5d      	ldr	r2, [pc, #372]	@ (2405a530 <HAL_DMA_Abort_IT+0x3d0>)
2405a3ba:	4293      	cmp	r3, r2
2405a3bc:	d018      	beq.n	2405a3f0 <HAL_DMA_Abort_IT+0x290>
2405a3be:	687b      	ldr	r3, [r7, #4]
2405a3c0:	681b      	ldr	r3, [r3, #0]
2405a3c2:	4a5c      	ldr	r2, [pc, #368]	@ (2405a534 <HAL_DMA_Abort_IT+0x3d4>)
2405a3c4:	4293      	cmp	r3, r2
2405a3c6:	d013      	beq.n	2405a3f0 <HAL_DMA_Abort_IT+0x290>
2405a3c8:	687b      	ldr	r3, [r7, #4]
2405a3ca:	681b      	ldr	r3, [r3, #0]
2405a3cc:	4a5a      	ldr	r2, [pc, #360]	@ (2405a538 <HAL_DMA_Abort_IT+0x3d8>)
2405a3ce:	4293      	cmp	r3, r2
2405a3d0:	d00e      	beq.n	2405a3f0 <HAL_DMA_Abort_IT+0x290>
2405a3d2:	687b      	ldr	r3, [r7, #4]
2405a3d4:	681b      	ldr	r3, [r3, #0]
2405a3d6:	4a59      	ldr	r2, [pc, #356]	@ (2405a53c <HAL_DMA_Abort_IT+0x3dc>)
2405a3d8:	4293      	cmp	r3, r2
2405a3da:	d009      	beq.n	2405a3f0 <HAL_DMA_Abort_IT+0x290>
2405a3dc:	687b      	ldr	r3, [r7, #4]
2405a3de:	681b      	ldr	r3, [r3, #0]
2405a3e0:	4a57      	ldr	r2, [pc, #348]	@ (2405a540 <HAL_DMA_Abort_IT+0x3e0>)
2405a3e2:	4293      	cmp	r3, r2
2405a3e4:	d004      	beq.n	2405a3f0 <HAL_DMA_Abort_IT+0x290>
2405a3e6:	687b      	ldr	r3, [r7, #4]
2405a3e8:	681b      	ldr	r3, [r3, #0]
2405a3ea:	4a56      	ldr	r2, [pc, #344]	@ (2405a544 <HAL_DMA_Abort_IT+0x3e4>)
2405a3ec:	4293      	cmp	r3, r2
2405a3ee:	d108      	bne.n	2405a402 <HAL_DMA_Abort_IT+0x2a2>
2405a3f0:	687b      	ldr	r3, [r7, #4]
2405a3f2:	681b      	ldr	r3, [r3, #0]
2405a3f4:	681a      	ldr	r2, [r3, #0]
2405a3f6:	687b      	ldr	r3, [r7, #4]
2405a3f8:	681b      	ldr	r3, [r3, #0]
2405a3fa:	f022 0201 	bic.w	r2, r2, #1
2405a3fe:	601a      	str	r2, [r3, #0]
2405a400:	e007      	b.n	2405a412 <HAL_DMA_Abort_IT+0x2b2>
2405a402:	687b      	ldr	r3, [r7, #4]
2405a404:	681b      	ldr	r3, [r3, #0]
2405a406:	681a      	ldr	r2, [r3, #0]
2405a408:	687b      	ldr	r3, [r7, #4]
2405a40a:	681b      	ldr	r3, [r3, #0]
2405a40c:	f022 0201 	bic.w	r2, r2, #1
2405a410:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
2405a412:	687b      	ldr	r3, [r7, #4]
2405a414:	681b      	ldr	r3, [r3, #0]
2405a416:	4a3c      	ldr	r2, [pc, #240]	@ (2405a508 <HAL_DMA_Abort_IT+0x3a8>)
2405a418:	4293      	cmp	r3, r2
2405a41a:	d072      	beq.n	2405a502 <HAL_DMA_Abort_IT+0x3a2>
2405a41c:	687b      	ldr	r3, [r7, #4]
2405a41e:	681b      	ldr	r3, [r3, #0]
2405a420:	4a3a      	ldr	r2, [pc, #232]	@ (2405a50c <HAL_DMA_Abort_IT+0x3ac>)
2405a422:	4293      	cmp	r3, r2
2405a424:	d06d      	beq.n	2405a502 <HAL_DMA_Abort_IT+0x3a2>
2405a426:	687b      	ldr	r3, [r7, #4]
2405a428:	681b      	ldr	r3, [r3, #0]
2405a42a:	4a39      	ldr	r2, [pc, #228]	@ (2405a510 <HAL_DMA_Abort_IT+0x3b0>)
2405a42c:	4293      	cmp	r3, r2
2405a42e:	d068      	beq.n	2405a502 <HAL_DMA_Abort_IT+0x3a2>
2405a430:	687b      	ldr	r3, [r7, #4]
2405a432:	681b      	ldr	r3, [r3, #0]
2405a434:	4a37      	ldr	r2, [pc, #220]	@ (2405a514 <HAL_DMA_Abort_IT+0x3b4>)
2405a436:	4293      	cmp	r3, r2
2405a438:	d063      	beq.n	2405a502 <HAL_DMA_Abort_IT+0x3a2>
2405a43a:	687b      	ldr	r3, [r7, #4]
2405a43c:	681b      	ldr	r3, [r3, #0]
2405a43e:	4a36      	ldr	r2, [pc, #216]	@ (2405a518 <HAL_DMA_Abort_IT+0x3b8>)
2405a440:	4293      	cmp	r3, r2
2405a442:	d05e      	beq.n	2405a502 <HAL_DMA_Abort_IT+0x3a2>
2405a444:	687b      	ldr	r3, [r7, #4]
2405a446:	681b      	ldr	r3, [r3, #0]
2405a448:	4a34      	ldr	r2, [pc, #208]	@ (2405a51c <HAL_DMA_Abort_IT+0x3bc>)
2405a44a:	4293      	cmp	r3, r2
2405a44c:	d059      	beq.n	2405a502 <HAL_DMA_Abort_IT+0x3a2>
2405a44e:	687b      	ldr	r3, [r7, #4]
2405a450:	681b      	ldr	r3, [r3, #0]
2405a452:	4a33      	ldr	r2, [pc, #204]	@ (2405a520 <HAL_DMA_Abort_IT+0x3c0>)
2405a454:	4293      	cmp	r3, r2
2405a456:	d054      	beq.n	2405a502 <HAL_DMA_Abort_IT+0x3a2>
2405a458:	687b      	ldr	r3, [r7, #4]
2405a45a:	681b      	ldr	r3, [r3, #0]
2405a45c:	4a31      	ldr	r2, [pc, #196]	@ (2405a524 <HAL_DMA_Abort_IT+0x3c4>)
2405a45e:	4293      	cmp	r3, r2
2405a460:	d04f      	beq.n	2405a502 <HAL_DMA_Abort_IT+0x3a2>
2405a462:	687b      	ldr	r3, [r7, #4]
2405a464:	681b      	ldr	r3, [r3, #0]
2405a466:	4a30      	ldr	r2, [pc, #192]	@ (2405a528 <HAL_DMA_Abort_IT+0x3c8>)
2405a468:	4293      	cmp	r3, r2
2405a46a:	d04a      	beq.n	2405a502 <HAL_DMA_Abort_IT+0x3a2>
2405a46c:	687b      	ldr	r3, [r7, #4]
2405a46e:	681b      	ldr	r3, [r3, #0]
2405a470:	4a2e      	ldr	r2, [pc, #184]	@ (2405a52c <HAL_DMA_Abort_IT+0x3cc>)
2405a472:	4293      	cmp	r3, r2
2405a474:	d045      	beq.n	2405a502 <HAL_DMA_Abort_IT+0x3a2>
2405a476:	687b      	ldr	r3, [r7, #4]
2405a478:	681b      	ldr	r3, [r3, #0]
2405a47a:	4a2d      	ldr	r2, [pc, #180]	@ (2405a530 <HAL_DMA_Abort_IT+0x3d0>)
2405a47c:	4293      	cmp	r3, r2
2405a47e:	d040      	beq.n	2405a502 <HAL_DMA_Abort_IT+0x3a2>
2405a480:	687b      	ldr	r3, [r7, #4]
2405a482:	681b      	ldr	r3, [r3, #0]
2405a484:	4a2b      	ldr	r2, [pc, #172]	@ (2405a534 <HAL_DMA_Abort_IT+0x3d4>)
2405a486:	4293      	cmp	r3, r2
2405a488:	d03b      	beq.n	2405a502 <HAL_DMA_Abort_IT+0x3a2>
2405a48a:	687b      	ldr	r3, [r7, #4]
2405a48c:	681b      	ldr	r3, [r3, #0]
2405a48e:	4a2a      	ldr	r2, [pc, #168]	@ (2405a538 <HAL_DMA_Abort_IT+0x3d8>)
2405a490:	4293      	cmp	r3, r2
2405a492:	d036      	beq.n	2405a502 <HAL_DMA_Abort_IT+0x3a2>
2405a494:	687b      	ldr	r3, [r7, #4]
2405a496:	681b      	ldr	r3, [r3, #0]
2405a498:	4a28      	ldr	r2, [pc, #160]	@ (2405a53c <HAL_DMA_Abort_IT+0x3dc>)
2405a49a:	4293      	cmp	r3, r2
2405a49c:	d031      	beq.n	2405a502 <HAL_DMA_Abort_IT+0x3a2>
2405a49e:	687b      	ldr	r3, [r7, #4]
2405a4a0:	681b      	ldr	r3, [r3, #0]
2405a4a2:	4a27      	ldr	r2, [pc, #156]	@ (2405a540 <HAL_DMA_Abort_IT+0x3e0>)
2405a4a4:	4293      	cmp	r3, r2
2405a4a6:	d02c      	beq.n	2405a502 <HAL_DMA_Abort_IT+0x3a2>
2405a4a8:	687b      	ldr	r3, [r7, #4]
2405a4aa:	681b      	ldr	r3, [r3, #0]
2405a4ac:	4a25      	ldr	r2, [pc, #148]	@ (2405a544 <HAL_DMA_Abort_IT+0x3e4>)
2405a4ae:	4293      	cmp	r3, r2
2405a4b0:	d027      	beq.n	2405a502 <HAL_DMA_Abort_IT+0x3a2>
2405a4b2:	687b      	ldr	r3, [r7, #4]
2405a4b4:	681b      	ldr	r3, [r3, #0]
2405a4b6:	4a24      	ldr	r2, [pc, #144]	@ (2405a548 <HAL_DMA_Abort_IT+0x3e8>)
2405a4b8:	4293      	cmp	r3, r2
2405a4ba:	d022      	beq.n	2405a502 <HAL_DMA_Abort_IT+0x3a2>
2405a4bc:	687b      	ldr	r3, [r7, #4]
2405a4be:	681b      	ldr	r3, [r3, #0]
2405a4c0:	4a22      	ldr	r2, [pc, #136]	@ (2405a54c <HAL_DMA_Abort_IT+0x3ec>)
2405a4c2:	4293      	cmp	r3, r2
2405a4c4:	d01d      	beq.n	2405a502 <HAL_DMA_Abort_IT+0x3a2>
2405a4c6:	687b      	ldr	r3, [r7, #4]
2405a4c8:	681b      	ldr	r3, [r3, #0]
2405a4ca:	4a21      	ldr	r2, [pc, #132]	@ (2405a550 <HAL_DMA_Abort_IT+0x3f0>)
2405a4cc:	4293      	cmp	r3, r2
2405a4ce:	d018      	beq.n	2405a502 <HAL_DMA_Abort_IT+0x3a2>
2405a4d0:	687b      	ldr	r3, [r7, #4]
2405a4d2:	681b      	ldr	r3, [r3, #0]
2405a4d4:	4a1f      	ldr	r2, [pc, #124]	@ (2405a554 <HAL_DMA_Abort_IT+0x3f4>)
2405a4d6:	4293      	cmp	r3, r2
2405a4d8:	d013      	beq.n	2405a502 <HAL_DMA_Abort_IT+0x3a2>
2405a4da:	687b      	ldr	r3, [r7, #4]
2405a4dc:	681b      	ldr	r3, [r3, #0]
2405a4de:	4a1e      	ldr	r2, [pc, #120]	@ (2405a558 <HAL_DMA_Abort_IT+0x3f8>)
2405a4e0:	4293      	cmp	r3, r2
2405a4e2:	d00e      	beq.n	2405a502 <HAL_DMA_Abort_IT+0x3a2>
2405a4e4:	687b      	ldr	r3, [r7, #4]
2405a4e6:	681b      	ldr	r3, [r3, #0]
2405a4e8:	4a1c      	ldr	r2, [pc, #112]	@ (2405a55c <HAL_DMA_Abort_IT+0x3fc>)
2405a4ea:	4293      	cmp	r3, r2
2405a4ec:	d009      	beq.n	2405a502 <HAL_DMA_Abort_IT+0x3a2>
2405a4ee:	687b      	ldr	r3, [r7, #4]
2405a4f0:	681b      	ldr	r3, [r3, #0]
2405a4f2:	4a1b      	ldr	r2, [pc, #108]	@ (2405a560 <HAL_DMA_Abort_IT+0x400>)
2405a4f4:	4293      	cmp	r3, r2
2405a4f6:	d004      	beq.n	2405a502 <HAL_DMA_Abort_IT+0x3a2>
2405a4f8:	687b      	ldr	r3, [r7, #4]
2405a4fa:	681b      	ldr	r3, [r3, #0]
2405a4fc:	4a19      	ldr	r2, [pc, #100]	@ (2405a564 <HAL_DMA_Abort_IT+0x404>)
2405a4fe:	4293      	cmp	r3, r2
2405a500:	d132      	bne.n	2405a568 <HAL_DMA_Abort_IT+0x408>
2405a502:	2301      	movs	r3, #1
2405a504:	e031      	b.n	2405a56a <HAL_DMA_Abort_IT+0x40a>
2405a506:	bf00      	nop
2405a508:	40020010 	.word	0x40020010
2405a50c:	40020028 	.word	0x40020028
2405a510:	40020040 	.word	0x40020040
2405a514:	40020058 	.word	0x40020058
2405a518:	40020070 	.word	0x40020070
2405a51c:	40020088 	.word	0x40020088
2405a520:	400200a0 	.word	0x400200a0
2405a524:	400200b8 	.word	0x400200b8
2405a528:	40020410 	.word	0x40020410
2405a52c:	40020428 	.word	0x40020428
2405a530:	40020440 	.word	0x40020440
2405a534:	40020458 	.word	0x40020458
2405a538:	40020470 	.word	0x40020470
2405a53c:	40020488 	.word	0x40020488
2405a540:	400204a0 	.word	0x400204a0
2405a544:	400204b8 	.word	0x400204b8
2405a548:	58025408 	.word	0x58025408
2405a54c:	5802541c 	.word	0x5802541c
2405a550:	58025430 	.word	0x58025430
2405a554:	58025444 	.word	0x58025444
2405a558:	58025458 	.word	0x58025458
2405a55c:	5802546c 	.word	0x5802546c
2405a560:	58025480 	.word	0x58025480
2405a564:	58025494 	.word	0x58025494
2405a568:	2300      	movs	r3, #0
2405a56a:	2b00      	cmp	r3, #0
2405a56c:	d028      	beq.n	2405a5c0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
2405a56e:	687b      	ldr	r3, [r7, #4]
2405a570:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
2405a572:	681a      	ldr	r2, [r3, #0]
2405a574:	687b      	ldr	r3, [r7, #4]
2405a576:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
2405a578:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
2405a57c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
2405a57e:	687b      	ldr	r3, [r7, #4]
2405a580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
2405a582:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
2405a584:	687b      	ldr	r3, [r7, #4]
2405a586:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
2405a588:	f003 031f 	and.w	r3, r3, #31
2405a58c:	2201      	movs	r2, #1
2405a58e:	409a      	lsls	r2, r3
2405a590:	68fb      	ldr	r3, [r7, #12]
2405a592:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
2405a594:	687b      	ldr	r3, [r7, #4]
2405a596:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
2405a598:	687a      	ldr	r2, [r7, #4]
2405a59a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
2405a59c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
2405a59e:	687b      	ldr	r3, [r7, #4]
2405a5a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
2405a5a2:	2b00      	cmp	r3, #0
2405a5a4:	d00c      	beq.n	2405a5c0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
2405a5a6:	687b      	ldr	r3, [r7, #4]
2405a5a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
2405a5aa:	681a      	ldr	r2, [r3, #0]
2405a5ac:	687b      	ldr	r3, [r7, #4]
2405a5ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
2405a5b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
2405a5b4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
2405a5b6:	687b      	ldr	r3, [r7, #4]
2405a5b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2405a5ba:	687a      	ldr	r2, [r7, #4]
2405a5bc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
2405a5be:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
2405a5c0:	687b      	ldr	r3, [r7, #4]
2405a5c2:	2201      	movs	r2, #1
2405a5c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
2405a5c8:	687b      	ldr	r3, [r7, #4]
2405a5ca:	2200      	movs	r2, #0
2405a5cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
2405a5d0:	687b      	ldr	r3, [r7, #4]
2405a5d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2405a5d4:	2b00      	cmp	r3, #0
2405a5d6:	d003      	beq.n	2405a5e0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
2405a5d8:	687b      	ldr	r3, [r7, #4]
2405a5da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2405a5dc:	6878      	ldr	r0, [r7, #4]
2405a5de:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
2405a5e0:	2300      	movs	r3, #0
}
2405a5e2:	4618      	mov	r0, r3
2405a5e4:	3710      	adds	r7, #16
2405a5e6:	46bd      	mov	sp, r7
2405a5e8:	bd80      	pop	{r7, pc}
2405a5ea:	bf00      	nop

2405a5ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
2405a5ec:	b580      	push	{r7, lr}
2405a5ee:	b08a      	sub	sp, #40	@ 0x28
2405a5f0:	af00      	add	r7, sp, #0
2405a5f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
2405a5f4:	2300      	movs	r3, #0
2405a5f6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
2405a5f8:	4b67      	ldr	r3, [pc, #412]	@ (2405a798 <HAL_DMA_IRQHandler+0x1ac>)
2405a5fa:	681b      	ldr	r3, [r3, #0]
2405a5fc:	4a67      	ldr	r2, [pc, #412]	@ (2405a79c <HAL_DMA_IRQHandler+0x1b0>)
2405a5fe:	fba2 2303 	umull	r2, r3, r2, r3
2405a602:	0a9b      	lsrs	r3, r3, #10
2405a604:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
2405a606:	687b      	ldr	r3, [r7, #4]
2405a608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
2405a60a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
2405a60c:	687b      	ldr	r3, [r7, #4]
2405a60e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
2405a610:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
2405a612:	6a3b      	ldr	r3, [r7, #32]
2405a614:	681b      	ldr	r3, [r3, #0]
2405a616:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
2405a618:	69fb      	ldr	r3, [r7, #28]
2405a61a:	681b      	ldr	r3, [r3, #0]
2405a61c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
2405a61e:	687b      	ldr	r3, [r7, #4]
2405a620:	681b      	ldr	r3, [r3, #0]
2405a622:	4a5f      	ldr	r2, [pc, #380]	@ (2405a7a0 <HAL_DMA_IRQHandler+0x1b4>)
2405a624:	4293      	cmp	r3, r2
2405a626:	d04a      	beq.n	2405a6be <HAL_DMA_IRQHandler+0xd2>
2405a628:	687b      	ldr	r3, [r7, #4]
2405a62a:	681b      	ldr	r3, [r3, #0]
2405a62c:	4a5d      	ldr	r2, [pc, #372]	@ (2405a7a4 <HAL_DMA_IRQHandler+0x1b8>)
2405a62e:	4293      	cmp	r3, r2
2405a630:	d045      	beq.n	2405a6be <HAL_DMA_IRQHandler+0xd2>
2405a632:	687b      	ldr	r3, [r7, #4]
2405a634:	681b      	ldr	r3, [r3, #0]
2405a636:	4a5c      	ldr	r2, [pc, #368]	@ (2405a7a8 <HAL_DMA_IRQHandler+0x1bc>)
2405a638:	4293      	cmp	r3, r2
2405a63a:	d040      	beq.n	2405a6be <HAL_DMA_IRQHandler+0xd2>
2405a63c:	687b      	ldr	r3, [r7, #4]
2405a63e:	681b      	ldr	r3, [r3, #0]
2405a640:	4a5a      	ldr	r2, [pc, #360]	@ (2405a7ac <HAL_DMA_IRQHandler+0x1c0>)
2405a642:	4293      	cmp	r3, r2
2405a644:	d03b      	beq.n	2405a6be <HAL_DMA_IRQHandler+0xd2>
2405a646:	687b      	ldr	r3, [r7, #4]
2405a648:	681b      	ldr	r3, [r3, #0]
2405a64a:	4a59      	ldr	r2, [pc, #356]	@ (2405a7b0 <HAL_DMA_IRQHandler+0x1c4>)
2405a64c:	4293      	cmp	r3, r2
2405a64e:	d036      	beq.n	2405a6be <HAL_DMA_IRQHandler+0xd2>
2405a650:	687b      	ldr	r3, [r7, #4]
2405a652:	681b      	ldr	r3, [r3, #0]
2405a654:	4a57      	ldr	r2, [pc, #348]	@ (2405a7b4 <HAL_DMA_IRQHandler+0x1c8>)
2405a656:	4293      	cmp	r3, r2
2405a658:	d031      	beq.n	2405a6be <HAL_DMA_IRQHandler+0xd2>
2405a65a:	687b      	ldr	r3, [r7, #4]
2405a65c:	681b      	ldr	r3, [r3, #0]
2405a65e:	4a56      	ldr	r2, [pc, #344]	@ (2405a7b8 <HAL_DMA_IRQHandler+0x1cc>)
2405a660:	4293      	cmp	r3, r2
2405a662:	d02c      	beq.n	2405a6be <HAL_DMA_IRQHandler+0xd2>
2405a664:	687b      	ldr	r3, [r7, #4]
2405a666:	681b      	ldr	r3, [r3, #0]
2405a668:	4a54      	ldr	r2, [pc, #336]	@ (2405a7bc <HAL_DMA_IRQHandler+0x1d0>)
2405a66a:	4293      	cmp	r3, r2
2405a66c:	d027      	beq.n	2405a6be <HAL_DMA_IRQHandler+0xd2>
2405a66e:	687b      	ldr	r3, [r7, #4]
2405a670:	681b      	ldr	r3, [r3, #0]
2405a672:	4a53      	ldr	r2, [pc, #332]	@ (2405a7c0 <HAL_DMA_IRQHandler+0x1d4>)
2405a674:	4293      	cmp	r3, r2
2405a676:	d022      	beq.n	2405a6be <HAL_DMA_IRQHandler+0xd2>
2405a678:	687b      	ldr	r3, [r7, #4]
2405a67a:	681b      	ldr	r3, [r3, #0]
2405a67c:	4a51      	ldr	r2, [pc, #324]	@ (2405a7c4 <HAL_DMA_IRQHandler+0x1d8>)
2405a67e:	4293      	cmp	r3, r2
2405a680:	d01d      	beq.n	2405a6be <HAL_DMA_IRQHandler+0xd2>
2405a682:	687b      	ldr	r3, [r7, #4]
2405a684:	681b      	ldr	r3, [r3, #0]
2405a686:	4a50      	ldr	r2, [pc, #320]	@ (2405a7c8 <HAL_DMA_IRQHandler+0x1dc>)
2405a688:	4293      	cmp	r3, r2
2405a68a:	d018      	beq.n	2405a6be <HAL_DMA_IRQHandler+0xd2>
2405a68c:	687b      	ldr	r3, [r7, #4]
2405a68e:	681b      	ldr	r3, [r3, #0]
2405a690:	4a4e      	ldr	r2, [pc, #312]	@ (2405a7cc <HAL_DMA_IRQHandler+0x1e0>)
2405a692:	4293      	cmp	r3, r2
2405a694:	d013      	beq.n	2405a6be <HAL_DMA_IRQHandler+0xd2>
2405a696:	687b      	ldr	r3, [r7, #4]
2405a698:	681b      	ldr	r3, [r3, #0]
2405a69a:	4a4d      	ldr	r2, [pc, #308]	@ (2405a7d0 <HAL_DMA_IRQHandler+0x1e4>)
2405a69c:	4293      	cmp	r3, r2
2405a69e:	d00e      	beq.n	2405a6be <HAL_DMA_IRQHandler+0xd2>
2405a6a0:	687b      	ldr	r3, [r7, #4]
2405a6a2:	681b      	ldr	r3, [r3, #0]
2405a6a4:	4a4b      	ldr	r2, [pc, #300]	@ (2405a7d4 <HAL_DMA_IRQHandler+0x1e8>)
2405a6a6:	4293      	cmp	r3, r2
2405a6a8:	d009      	beq.n	2405a6be <HAL_DMA_IRQHandler+0xd2>
2405a6aa:	687b      	ldr	r3, [r7, #4]
2405a6ac:	681b      	ldr	r3, [r3, #0]
2405a6ae:	4a4a      	ldr	r2, [pc, #296]	@ (2405a7d8 <HAL_DMA_IRQHandler+0x1ec>)
2405a6b0:	4293      	cmp	r3, r2
2405a6b2:	d004      	beq.n	2405a6be <HAL_DMA_IRQHandler+0xd2>
2405a6b4:	687b      	ldr	r3, [r7, #4]
2405a6b6:	681b      	ldr	r3, [r3, #0]
2405a6b8:	4a48      	ldr	r2, [pc, #288]	@ (2405a7dc <HAL_DMA_IRQHandler+0x1f0>)
2405a6ba:	4293      	cmp	r3, r2
2405a6bc:	d101      	bne.n	2405a6c2 <HAL_DMA_IRQHandler+0xd6>
2405a6be:	2301      	movs	r3, #1
2405a6c0:	e000      	b.n	2405a6c4 <HAL_DMA_IRQHandler+0xd8>
2405a6c2:	2300      	movs	r3, #0
2405a6c4:	2b00      	cmp	r3, #0
2405a6c6:	f000 842b 	beq.w	2405af20 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
2405a6ca:	687b      	ldr	r3, [r7, #4]
2405a6cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
2405a6ce:	f003 031f 	and.w	r3, r3, #31
2405a6d2:	2208      	movs	r2, #8
2405a6d4:	409a      	lsls	r2, r3
2405a6d6:	69bb      	ldr	r3, [r7, #24]
2405a6d8:	4013      	ands	r3, r2
2405a6da:	2b00      	cmp	r3, #0
2405a6dc:	f000 80a2 	beq.w	2405a824 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
2405a6e0:	687b      	ldr	r3, [r7, #4]
2405a6e2:	681b      	ldr	r3, [r3, #0]
2405a6e4:	4a2e      	ldr	r2, [pc, #184]	@ (2405a7a0 <HAL_DMA_IRQHandler+0x1b4>)
2405a6e6:	4293      	cmp	r3, r2
2405a6e8:	d04a      	beq.n	2405a780 <HAL_DMA_IRQHandler+0x194>
2405a6ea:	687b      	ldr	r3, [r7, #4]
2405a6ec:	681b      	ldr	r3, [r3, #0]
2405a6ee:	4a2d      	ldr	r2, [pc, #180]	@ (2405a7a4 <HAL_DMA_IRQHandler+0x1b8>)
2405a6f0:	4293      	cmp	r3, r2
2405a6f2:	d045      	beq.n	2405a780 <HAL_DMA_IRQHandler+0x194>
2405a6f4:	687b      	ldr	r3, [r7, #4]
2405a6f6:	681b      	ldr	r3, [r3, #0]
2405a6f8:	4a2b      	ldr	r2, [pc, #172]	@ (2405a7a8 <HAL_DMA_IRQHandler+0x1bc>)
2405a6fa:	4293      	cmp	r3, r2
2405a6fc:	d040      	beq.n	2405a780 <HAL_DMA_IRQHandler+0x194>
2405a6fe:	687b      	ldr	r3, [r7, #4]
2405a700:	681b      	ldr	r3, [r3, #0]
2405a702:	4a2a      	ldr	r2, [pc, #168]	@ (2405a7ac <HAL_DMA_IRQHandler+0x1c0>)
2405a704:	4293      	cmp	r3, r2
2405a706:	d03b      	beq.n	2405a780 <HAL_DMA_IRQHandler+0x194>
2405a708:	687b      	ldr	r3, [r7, #4]
2405a70a:	681b      	ldr	r3, [r3, #0]
2405a70c:	4a28      	ldr	r2, [pc, #160]	@ (2405a7b0 <HAL_DMA_IRQHandler+0x1c4>)
2405a70e:	4293      	cmp	r3, r2
2405a710:	d036      	beq.n	2405a780 <HAL_DMA_IRQHandler+0x194>
2405a712:	687b      	ldr	r3, [r7, #4]
2405a714:	681b      	ldr	r3, [r3, #0]
2405a716:	4a27      	ldr	r2, [pc, #156]	@ (2405a7b4 <HAL_DMA_IRQHandler+0x1c8>)
2405a718:	4293      	cmp	r3, r2
2405a71a:	d031      	beq.n	2405a780 <HAL_DMA_IRQHandler+0x194>
2405a71c:	687b      	ldr	r3, [r7, #4]
2405a71e:	681b      	ldr	r3, [r3, #0]
2405a720:	4a25      	ldr	r2, [pc, #148]	@ (2405a7b8 <HAL_DMA_IRQHandler+0x1cc>)
2405a722:	4293      	cmp	r3, r2
2405a724:	d02c      	beq.n	2405a780 <HAL_DMA_IRQHandler+0x194>
2405a726:	687b      	ldr	r3, [r7, #4]
2405a728:	681b      	ldr	r3, [r3, #0]
2405a72a:	4a24      	ldr	r2, [pc, #144]	@ (2405a7bc <HAL_DMA_IRQHandler+0x1d0>)
2405a72c:	4293      	cmp	r3, r2
2405a72e:	d027      	beq.n	2405a780 <HAL_DMA_IRQHandler+0x194>
2405a730:	687b      	ldr	r3, [r7, #4]
2405a732:	681b      	ldr	r3, [r3, #0]
2405a734:	4a22      	ldr	r2, [pc, #136]	@ (2405a7c0 <HAL_DMA_IRQHandler+0x1d4>)
2405a736:	4293      	cmp	r3, r2
2405a738:	d022      	beq.n	2405a780 <HAL_DMA_IRQHandler+0x194>
2405a73a:	687b      	ldr	r3, [r7, #4]
2405a73c:	681b      	ldr	r3, [r3, #0]
2405a73e:	4a21      	ldr	r2, [pc, #132]	@ (2405a7c4 <HAL_DMA_IRQHandler+0x1d8>)
2405a740:	4293      	cmp	r3, r2
2405a742:	d01d      	beq.n	2405a780 <HAL_DMA_IRQHandler+0x194>
2405a744:	687b      	ldr	r3, [r7, #4]
2405a746:	681b      	ldr	r3, [r3, #0]
2405a748:	4a1f      	ldr	r2, [pc, #124]	@ (2405a7c8 <HAL_DMA_IRQHandler+0x1dc>)
2405a74a:	4293      	cmp	r3, r2
2405a74c:	d018      	beq.n	2405a780 <HAL_DMA_IRQHandler+0x194>
2405a74e:	687b      	ldr	r3, [r7, #4]
2405a750:	681b      	ldr	r3, [r3, #0]
2405a752:	4a1e      	ldr	r2, [pc, #120]	@ (2405a7cc <HAL_DMA_IRQHandler+0x1e0>)
2405a754:	4293      	cmp	r3, r2
2405a756:	d013      	beq.n	2405a780 <HAL_DMA_IRQHandler+0x194>
2405a758:	687b      	ldr	r3, [r7, #4]
2405a75a:	681b      	ldr	r3, [r3, #0]
2405a75c:	4a1c      	ldr	r2, [pc, #112]	@ (2405a7d0 <HAL_DMA_IRQHandler+0x1e4>)
2405a75e:	4293      	cmp	r3, r2
2405a760:	d00e      	beq.n	2405a780 <HAL_DMA_IRQHandler+0x194>
2405a762:	687b      	ldr	r3, [r7, #4]
2405a764:	681b      	ldr	r3, [r3, #0]
2405a766:	4a1b      	ldr	r2, [pc, #108]	@ (2405a7d4 <HAL_DMA_IRQHandler+0x1e8>)
2405a768:	4293      	cmp	r3, r2
2405a76a:	d009      	beq.n	2405a780 <HAL_DMA_IRQHandler+0x194>
2405a76c:	687b      	ldr	r3, [r7, #4]
2405a76e:	681b      	ldr	r3, [r3, #0]
2405a770:	4a19      	ldr	r2, [pc, #100]	@ (2405a7d8 <HAL_DMA_IRQHandler+0x1ec>)
2405a772:	4293      	cmp	r3, r2
2405a774:	d004      	beq.n	2405a780 <HAL_DMA_IRQHandler+0x194>
2405a776:	687b      	ldr	r3, [r7, #4]
2405a778:	681b      	ldr	r3, [r3, #0]
2405a77a:	4a18      	ldr	r2, [pc, #96]	@ (2405a7dc <HAL_DMA_IRQHandler+0x1f0>)
2405a77c:	4293      	cmp	r3, r2
2405a77e:	d12f      	bne.n	2405a7e0 <HAL_DMA_IRQHandler+0x1f4>
2405a780:	687b      	ldr	r3, [r7, #4]
2405a782:	681b      	ldr	r3, [r3, #0]
2405a784:	681b      	ldr	r3, [r3, #0]
2405a786:	f003 0304 	and.w	r3, r3, #4
2405a78a:	2b00      	cmp	r3, #0
2405a78c:	bf14      	ite	ne
2405a78e:	2301      	movne	r3, #1
2405a790:	2300      	moveq	r3, #0
2405a792:	b2db      	uxtb	r3, r3
2405a794:	e02e      	b.n	2405a7f4 <HAL_DMA_IRQHandler+0x208>
2405a796:	bf00      	nop
2405a798:	200000e0 	.word	0x200000e0
2405a79c:	1b4e81b5 	.word	0x1b4e81b5
2405a7a0:	40020010 	.word	0x40020010
2405a7a4:	40020028 	.word	0x40020028
2405a7a8:	40020040 	.word	0x40020040
2405a7ac:	40020058 	.word	0x40020058
2405a7b0:	40020070 	.word	0x40020070
2405a7b4:	40020088 	.word	0x40020088
2405a7b8:	400200a0 	.word	0x400200a0
2405a7bc:	400200b8 	.word	0x400200b8
2405a7c0:	40020410 	.word	0x40020410
2405a7c4:	40020428 	.word	0x40020428
2405a7c8:	40020440 	.word	0x40020440
2405a7cc:	40020458 	.word	0x40020458
2405a7d0:	40020470 	.word	0x40020470
2405a7d4:	40020488 	.word	0x40020488
2405a7d8:	400204a0 	.word	0x400204a0
2405a7dc:	400204b8 	.word	0x400204b8
2405a7e0:	687b      	ldr	r3, [r7, #4]
2405a7e2:	681b      	ldr	r3, [r3, #0]
2405a7e4:	681b      	ldr	r3, [r3, #0]
2405a7e6:	f003 0308 	and.w	r3, r3, #8
2405a7ea:	2b00      	cmp	r3, #0
2405a7ec:	bf14      	ite	ne
2405a7ee:	2301      	movne	r3, #1
2405a7f0:	2300      	moveq	r3, #0
2405a7f2:	b2db      	uxtb	r3, r3
2405a7f4:	2b00      	cmp	r3, #0
2405a7f6:	d015      	beq.n	2405a824 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
2405a7f8:	687b      	ldr	r3, [r7, #4]
2405a7fa:	681b      	ldr	r3, [r3, #0]
2405a7fc:	681a      	ldr	r2, [r3, #0]
2405a7fe:	687b      	ldr	r3, [r7, #4]
2405a800:	681b      	ldr	r3, [r3, #0]
2405a802:	f022 0204 	bic.w	r2, r2, #4
2405a806:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
2405a808:	687b      	ldr	r3, [r7, #4]
2405a80a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
2405a80c:	f003 031f 	and.w	r3, r3, #31
2405a810:	2208      	movs	r2, #8
2405a812:	409a      	lsls	r2, r3
2405a814:	6a3b      	ldr	r3, [r7, #32]
2405a816:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
2405a818:	687b      	ldr	r3, [r7, #4]
2405a81a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
2405a81c:	f043 0201 	orr.w	r2, r3, #1
2405a820:	687b      	ldr	r3, [r7, #4]
2405a822:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
2405a824:	687b      	ldr	r3, [r7, #4]
2405a826:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
2405a828:	f003 031f 	and.w	r3, r3, #31
2405a82c:	69ba      	ldr	r2, [r7, #24]
2405a82e:	fa22 f303 	lsr.w	r3, r2, r3
2405a832:	f003 0301 	and.w	r3, r3, #1
2405a836:	2b00      	cmp	r3, #0
2405a838:	d06e      	beq.n	2405a918 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
2405a83a:	687b      	ldr	r3, [r7, #4]
2405a83c:	681b      	ldr	r3, [r3, #0]
2405a83e:	4a69      	ldr	r2, [pc, #420]	@ (2405a9e4 <HAL_DMA_IRQHandler+0x3f8>)
2405a840:	4293      	cmp	r3, r2
2405a842:	d04a      	beq.n	2405a8da <HAL_DMA_IRQHandler+0x2ee>
2405a844:	687b      	ldr	r3, [r7, #4]
2405a846:	681b      	ldr	r3, [r3, #0]
2405a848:	4a67      	ldr	r2, [pc, #412]	@ (2405a9e8 <HAL_DMA_IRQHandler+0x3fc>)
2405a84a:	4293      	cmp	r3, r2
2405a84c:	d045      	beq.n	2405a8da <HAL_DMA_IRQHandler+0x2ee>
2405a84e:	687b      	ldr	r3, [r7, #4]
2405a850:	681b      	ldr	r3, [r3, #0]
2405a852:	4a66      	ldr	r2, [pc, #408]	@ (2405a9ec <HAL_DMA_IRQHandler+0x400>)
2405a854:	4293      	cmp	r3, r2
2405a856:	d040      	beq.n	2405a8da <HAL_DMA_IRQHandler+0x2ee>
2405a858:	687b      	ldr	r3, [r7, #4]
2405a85a:	681b      	ldr	r3, [r3, #0]
2405a85c:	4a64      	ldr	r2, [pc, #400]	@ (2405a9f0 <HAL_DMA_IRQHandler+0x404>)
2405a85e:	4293      	cmp	r3, r2
2405a860:	d03b      	beq.n	2405a8da <HAL_DMA_IRQHandler+0x2ee>
2405a862:	687b      	ldr	r3, [r7, #4]
2405a864:	681b      	ldr	r3, [r3, #0]
2405a866:	4a63      	ldr	r2, [pc, #396]	@ (2405a9f4 <HAL_DMA_IRQHandler+0x408>)
2405a868:	4293      	cmp	r3, r2
2405a86a:	d036      	beq.n	2405a8da <HAL_DMA_IRQHandler+0x2ee>
2405a86c:	687b      	ldr	r3, [r7, #4]
2405a86e:	681b      	ldr	r3, [r3, #0]
2405a870:	4a61      	ldr	r2, [pc, #388]	@ (2405a9f8 <HAL_DMA_IRQHandler+0x40c>)
2405a872:	4293      	cmp	r3, r2
2405a874:	d031      	beq.n	2405a8da <HAL_DMA_IRQHandler+0x2ee>
2405a876:	687b      	ldr	r3, [r7, #4]
2405a878:	681b      	ldr	r3, [r3, #0]
2405a87a:	4a60      	ldr	r2, [pc, #384]	@ (2405a9fc <HAL_DMA_IRQHandler+0x410>)
2405a87c:	4293      	cmp	r3, r2
2405a87e:	d02c      	beq.n	2405a8da <HAL_DMA_IRQHandler+0x2ee>
2405a880:	687b      	ldr	r3, [r7, #4]
2405a882:	681b      	ldr	r3, [r3, #0]
2405a884:	4a5e      	ldr	r2, [pc, #376]	@ (2405aa00 <HAL_DMA_IRQHandler+0x414>)
2405a886:	4293      	cmp	r3, r2
2405a888:	d027      	beq.n	2405a8da <HAL_DMA_IRQHandler+0x2ee>
2405a88a:	687b      	ldr	r3, [r7, #4]
2405a88c:	681b      	ldr	r3, [r3, #0]
2405a88e:	4a5d      	ldr	r2, [pc, #372]	@ (2405aa04 <HAL_DMA_IRQHandler+0x418>)
2405a890:	4293      	cmp	r3, r2
2405a892:	d022      	beq.n	2405a8da <HAL_DMA_IRQHandler+0x2ee>
2405a894:	687b      	ldr	r3, [r7, #4]
2405a896:	681b      	ldr	r3, [r3, #0]
2405a898:	4a5b      	ldr	r2, [pc, #364]	@ (2405aa08 <HAL_DMA_IRQHandler+0x41c>)
2405a89a:	4293      	cmp	r3, r2
2405a89c:	d01d      	beq.n	2405a8da <HAL_DMA_IRQHandler+0x2ee>
2405a89e:	687b      	ldr	r3, [r7, #4]
2405a8a0:	681b      	ldr	r3, [r3, #0]
2405a8a2:	4a5a      	ldr	r2, [pc, #360]	@ (2405aa0c <HAL_DMA_IRQHandler+0x420>)
2405a8a4:	4293      	cmp	r3, r2
2405a8a6:	d018      	beq.n	2405a8da <HAL_DMA_IRQHandler+0x2ee>
2405a8a8:	687b      	ldr	r3, [r7, #4]
2405a8aa:	681b      	ldr	r3, [r3, #0]
2405a8ac:	4a58      	ldr	r2, [pc, #352]	@ (2405aa10 <HAL_DMA_IRQHandler+0x424>)
2405a8ae:	4293      	cmp	r3, r2
2405a8b0:	d013      	beq.n	2405a8da <HAL_DMA_IRQHandler+0x2ee>
2405a8b2:	687b      	ldr	r3, [r7, #4]
2405a8b4:	681b      	ldr	r3, [r3, #0]
2405a8b6:	4a57      	ldr	r2, [pc, #348]	@ (2405aa14 <HAL_DMA_IRQHandler+0x428>)
2405a8b8:	4293      	cmp	r3, r2
2405a8ba:	d00e      	beq.n	2405a8da <HAL_DMA_IRQHandler+0x2ee>
2405a8bc:	687b      	ldr	r3, [r7, #4]
2405a8be:	681b      	ldr	r3, [r3, #0]
2405a8c0:	4a55      	ldr	r2, [pc, #340]	@ (2405aa18 <HAL_DMA_IRQHandler+0x42c>)
2405a8c2:	4293      	cmp	r3, r2
2405a8c4:	d009      	beq.n	2405a8da <HAL_DMA_IRQHandler+0x2ee>
2405a8c6:	687b      	ldr	r3, [r7, #4]
2405a8c8:	681b      	ldr	r3, [r3, #0]
2405a8ca:	4a54      	ldr	r2, [pc, #336]	@ (2405aa1c <HAL_DMA_IRQHandler+0x430>)
2405a8cc:	4293      	cmp	r3, r2
2405a8ce:	d004      	beq.n	2405a8da <HAL_DMA_IRQHandler+0x2ee>
2405a8d0:	687b      	ldr	r3, [r7, #4]
2405a8d2:	681b      	ldr	r3, [r3, #0]
2405a8d4:	4a52      	ldr	r2, [pc, #328]	@ (2405aa20 <HAL_DMA_IRQHandler+0x434>)
2405a8d6:	4293      	cmp	r3, r2
2405a8d8:	d10a      	bne.n	2405a8f0 <HAL_DMA_IRQHandler+0x304>
2405a8da:	687b      	ldr	r3, [r7, #4]
2405a8dc:	681b      	ldr	r3, [r3, #0]
2405a8de:	695b      	ldr	r3, [r3, #20]
2405a8e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
2405a8e4:	2b00      	cmp	r3, #0
2405a8e6:	bf14      	ite	ne
2405a8e8:	2301      	movne	r3, #1
2405a8ea:	2300      	moveq	r3, #0
2405a8ec:	b2db      	uxtb	r3, r3
2405a8ee:	e003      	b.n	2405a8f8 <HAL_DMA_IRQHandler+0x30c>
2405a8f0:	687b      	ldr	r3, [r7, #4]
2405a8f2:	681b      	ldr	r3, [r3, #0]
2405a8f4:	681b      	ldr	r3, [r3, #0]
2405a8f6:	2300      	movs	r3, #0
2405a8f8:	2b00      	cmp	r3, #0
2405a8fa:	d00d      	beq.n	2405a918 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
2405a8fc:	687b      	ldr	r3, [r7, #4]
2405a8fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
2405a900:	f003 031f 	and.w	r3, r3, #31
2405a904:	2201      	movs	r2, #1
2405a906:	409a      	lsls	r2, r3
2405a908:	6a3b      	ldr	r3, [r7, #32]
2405a90a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
2405a90c:	687b      	ldr	r3, [r7, #4]
2405a90e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
2405a910:	f043 0202 	orr.w	r2, r3, #2
2405a914:	687b      	ldr	r3, [r7, #4]
2405a916:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
2405a918:	687b      	ldr	r3, [r7, #4]
2405a91a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
2405a91c:	f003 031f 	and.w	r3, r3, #31
2405a920:	2204      	movs	r2, #4
2405a922:	409a      	lsls	r2, r3
2405a924:	69bb      	ldr	r3, [r7, #24]
2405a926:	4013      	ands	r3, r2
2405a928:	2b00      	cmp	r3, #0
2405a92a:	f000 808f 	beq.w	2405aa4c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
2405a92e:	687b      	ldr	r3, [r7, #4]
2405a930:	681b      	ldr	r3, [r3, #0]
2405a932:	4a2c      	ldr	r2, [pc, #176]	@ (2405a9e4 <HAL_DMA_IRQHandler+0x3f8>)
2405a934:	4293      	cmp	r3, r2
2405a936:	d04a      	beq.n	2405a9ce <HAL_DMA_IRQHandler+0x3e2>
2405a938:	687b      	ldr	r3, [r7, #4]
2405a93a:	681b      	ldr	r3, [r3, #0]
2405a93c:	4a2a      	ldr	r2, [pc, #168]	@ (2405a9e8 <HAL_DMA_IRQHandler+0x3fc>)
2405a93e:	4293      	cmp	r3, r2
2405a940:	d045      	beq.n	2405a9ce <HAL_DMA_IRQHandler+0x3e2>
2405a942:	687b      	ldr	r3, [r7, #4]
2405a944:	681b      	ldr	r3, [r3, #0]
2405a946:	4a29      	ldr	r2, [pc, #164]	@ (2405a9ec <HAL_DMA_IRQHandler+0x400>)
2405a948:	4293      	cmp	r3, r2
2405a94a:	d040      	beq.n	2405a9ce <HAL_DMA_IRQHandler+0x3e2>
2405a94c:	687b      	ldr	r3, [r7, #4]
2405a94e:	681b      	ldr	r3, [r3, #0]
2405a950:	4a27      	ldr	r2, [pc, #156]	@ (2405a9f0 <HAL_DMA_IRQHandler+0x404>)
2405a952:	4293      	cmp	r3, r2
2405a954:	d03b      	beq.n	2405a9ce <HAL_DMA_IRQHandler+0x3e2>
2405a956:	687b      	ldr	r3, [r7, #4]
2405a958:	681b      	ldr	r3, [r3, #0]
2405a95a:	4a26      	ldr	r2, [pc, #152]	@ (2405a9f4 <HAL_DMA_IRQHandler+0x408>)
2405a95c:	4293      	cmp	r3, r2
2405a95e:	d036      	beq.n	2405a9ce <HAL_DMA_IRQHandler+0x3e2>
2405a960:	687b      	ldr	r3, [r7, #4]
2405a962:	681b      	ldr	r3, [r3, #0]
2405a964:	4a24      	ldr	r2, [pc, #144]	@ (2405a9f8 <HAL_DMA_IRQHandler+0x40c>)
2405a966:	4293      	cmp	r3, r2
2405a968:	d031      	beq.n	2405a9ce <HAL_DMA_IRQHandler+0x3e2>
2405a96a:	687b      	ldr	r3, [r7, #4]
2405a96c:	681b      	ldr	r3, [r3, #0]
2405a96e:	4a23      	ldr	r2, [pc, #140]	@ (2405a9fc <HAL_DMA_IRQHandler+0x410>)
2405a970:	4293      	cmp	r3, r2
2405a972:	d02c      	beq.n	2405a9ce <HAL_DMA_IRQHandler+0x3e2>
2405a974:	687b      	ldr	r3, [r7, #4]
2405a976:	681b      	ldr	r3, [r3, #0]
2405a978:	4a21      	ldr	r2, [pc, #132]	@ (2405aa00 <HAL_DMA_IRQHandler+0x414>)
2405a97a:	4293      	cmp	r3, r2
2405a97c:	d027      	beq.n	2405a9ce <HAL_DMA_IRQHandler+0x3e2>
2405a97e:	687b      	ldr	r3, [r7, #4]
2405a980:	681b      	ldr	r3, [r3, #0]
2405a982:	4a20      	ldr	r2, [pc, #128]	@ (2405aa04 <HAL_DMA_IRQHandler+0x418>)
2405a984:	4293      	cmp	r3, r2
2405a986:	d022      	beq.n	2405a9ce <HAL_DMA_IRQHandler+0x3e2>
2405a988:	687b      	ldr	r3, [r7, #4]
2405a98a:	681b      	ldr	r3, [r3, #0]
2405a98c:	4a1e      	ldr	r2, [pc, #120]	@ (2405aa08 <HAL_DMA_IRQHandler+0x41c>)
2405a98e:	4293      	cmp	r3, r2
2405a990:	d01d      	beq.n	2405a9ce <HAL_DMA_IRQHandler+0x3e2>
2405a992:	687b      	ldr	r3, [r7, #4]
2405a994:	681b      	ldr	r3, [r3, #0]
2405a996:	4a1d      	ldr	r2, [pc, #116]	@ (2405aa0c <HAL_DMA_IRQHandler+0x420>)
2405a998:	4293      	cmp	r3, r2
2405a99a:	d018      	beq.n	2405a9ce <HAL_DMA_IRQHandler+0x3e2>
2405a99c:	687b      	ldr	r3, [r7, #4]
2405a99e:	681b      	ldr	r3, [r3, #0]
2405a9a0:	4a1b      	ldr	r2, [pc, #108]	@ (2405aa10 <HAL_DMA_IRQHandler+0x424>)
2405a9a2:	4293      	cmp	r3, r2
2405a9a4:	d013      	beq.n	2405a9ce <HAL_DMA_IRQHandler+0x3e2>
2405a9a6:	687b      	ldr	r3, [r7, #4]
2405a9a8:	681b      	ldr	r3, [r3, #0]
2405a9aa:	4a1a      	ldr	r2, [pc, #104]	@ (2405aa14 <HAL_DMA_IRQHandler+0x428>)
2405a9ac:	4293      	cmp	r3, r2
2405a9ae:	d00e      	beq.n	2405a9ce <HAL_DMA_IRQHandler+0x3e2>
2405a9b0:	687b      	ldr	r3, [r7, #4]
2405a9b2:	681b      	ldr	r3, [r3, #0]
2405a9b4:	4a18      	ldr	r2, [pc, #96]	@ (2405aa18 <HAL_DMA_IRQHandler+0x42c>)
2405a9b6:	4293      	cmp	r3, r2
2405a9b8:	d009      	beq.n	2405a9ce <HAL_DMA_IRQHandler+0x3e2>
2405a9ba:	687b      	ldr	r3, [r7, #4]
2405a9bc:	681b      	ldr	r3, [r3, #0]
2405a9be:	4a17      	ldr	r2, [pc, #92]	@ (2405aa1c <HAL_DMA_IRQHandler+0x430>)
2405a9c0:	4293      	cmp	r3, r2
2405a9c2:	d004      	beq.n	2405a9ce <HAL_DMA_IRQHandler+0x3e2>
2405a9c4:	687b      	ldr	r3, [r7, #4]
2405a9c6:	681b      	ldr	r3, [r3, #0]
2405a9c8:	4a15      	ldr	r2, [pc, #84]	@ (2405aa20 <HAL_DMA_IRQHandler+0x434>)
2405a9ca:	4293      	cmp	r3, r2
2405a9cc:	d12a      	bne.n	2405aa24 <HAL_DMA_IRQHandler+0x438>
2405a9ce:	687b      	ldr	r3, [r7, #4]
2405a9d0:	681b      	ldr	r3, [r3, #0]
2405a9d2:	681b      	ldr	r3, [r3, #0]
2405a9d4:	f003 0302 	and.w	r3, r3, #2
2405a9d8:	2b00      	cmp	r3, #0
2405a9da:	bf14      	ite	ne
2405a9dc:	2301      	movne	r3, #1
2405a9de:	2300      	moveq	r3, #0
2405a9e0:	b2db      	uxtb	r3, r3
2405a9e2:	e023      	b.n	2405aa2c <HAL_DMA_IRQHandler+0x440>
2405a9e4:	40020010 	.word	0x40020010
2405a9e8:	40020028 	.word	0x40020028
2405a9ec:	40020040 	.word	0x40020040
2405a9f0:	40020058 	.word	0x40020058
2405a9f4:	40020070 	.word	0x40020070
2405a9f8:	40020088 	.word	0x40020088
2405a9fc:	400200a0 	.word	0x400200a0
2405aa00:	400200b8 	.word	0x400200b8
2405aa04:	40020410 	.word	0x40020410
2405aa08:	40020428 	.word	0x40020428
2405aa0c:	40020440 	.word	0x40020440
2405aa10:	40020458 	.word	0x40020458
2405aa14:	40020470 	.word	0x40020470
2405aa18:	40020488 	.word	0x40020488
2405aa1c:	400204a0 	.word	0x400204a0
2405aa20:	400204b8 	.word	0x400204b8
2405aa24:	687b      	ldr	r3, [r7, #4]
2405aa26:	681b      	ldr	r3, [r3, #0]
2405aa28:	681b      	ldr	r3, [r3, #0]
2405aa2a:	2300      	movs	r3, #0
2405aa2c:	2b00      	cmp	r3, #0
2405aa2e:	d00d      	beq.n	2405aa4c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
2405aa30:	687b      	ldr	r3, [r7, #4]
2405aa32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
2405aa34:	f003 031f 	and.w	r3, r3, #31
2405aa38:	2204      	movs	r2, #4
2405aa3a:	409a      	lsls	r2, r3
2405aa3c:	6a3b      	ldr	r3, [r7, #32]
2405aa3e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
2405aa40:	687b      	ldr	r3, [r7, #4]
2405aa42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
2405aa44:	f043 0204 	orr.w	r2, r3, #4
2405aa48:	687b      	ldr	r3, [r7, #4]
2405aa4a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
2405aa4c:	687b      	ldr	r3, [r7, #4]
2405aa4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
2405aa50:	f003 031f 	and.w	r3, r3, #31
2405aa54:	2210      	movs	r2, #16
2405aa56:	409a      	lsls	r2, r3
2405aa58:	69bb      	ldr	r3, [r7, #24]
2405aa5a:	4013      	ands	r3, r2
2405aa5c:	2b00      	cmp	r3, #0
2405aa5e:	f000 80a6 	beq.w	2405abae <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
2405aa62:	687b      	ldr	r3, [r7, #4]
2405aa64:	681b      	ldr	r3, [r3, #0]
2405aa66:	4a85      	ldr	r2, [pc, #532]	@ (2405ac7c <HAL_DMA_IRQHandler+0x690>)
2405aa68:	4293      	cmp	r3, r2
2405aa6a:	d04a      	beq.n	2405ab02 <HAL_DMA_IRQHandler+0x516>
2405aa6c:	687b      	ldr	r3, [r7, #4]
2405aa6e:	681b      	ldr	r3, [r3, #0]
2405aa70:	4a83      	ldr	r2, [pc, #524]	@ (2405ac80 <HAL_DMA_IRQHandler+0x694>)
2405aa72:	4293      	cmp	r3, r2
2405aa74:	d045      	beq.n	2405ab02 <HAL_DMA_IRQHandler+0x516>
2405aa76:	687b      	ldr	r3, [r7, #4]
2405aa78:	681b      	ldr	r3, [r3, #0]
2405aa7a:	4a82      	ldr	r2, [pc, #520]	@ (2405ac84 <HAL_DMA_IRQHandler+0x698>)
2405aa7c:	4293      	cmp	r3, r2
2405aa7e:	d040      	beq.n	2405ab02 <HAL_DMA_IRQHandler+0x516>
2405aa80:	687b      	ldr	r3, [r7, #4]
2405aa82:	681b      	ldr	r3, [r3, #0]
2405aa84:	4a80      	ldr	r2, [pc, #512]	@ (2405ac88 <HAL_DMA_IRQHandler+0x69c>)
2405aa86:	4293      	cmp	r3, r2
2405aa88:	d03b      	beq.n	2405ab02 <HAL_DMA_IRQHandler+0x516>
2405aa8a:	687b      	ldr	r3, [r7, #4]
2405aa8c:	681b      	ldr	r3, [r3, #0]
2405aa8e:	4a7f      	ldr	r2, [pc, #508]	@ (2405ac8c <HAL_DMA_IRQHandler+0x6a0>)
2405aa90:	4293      	cmp	r3, r2
2405aa92:	d036      	beq.n	2405ab02 <HAL_DMA_IRQHandler+0x516>
2405aa94:	687b      	ldr	r3, [r7, #4]
2405aa96:	681b      	ldr	r3, [r3, #0]
2405aa98:	4a7d      	ldr	r2, [pc, #500]	@ (2405ac90 <HAL_DMA_IRQHandler+0x6a4>)
2405aa9a:	4293      	cmp	r3, r2
2405aa9c:	d031      	beq.n	2405ab02 <HAL_DMA_IRQHandler+0x516>
2405aa9e:	687b      	ldr	r3, [r7, #4]
2405aaa0:	681b      	ldr	r3, [r3, #0]
2405aaa2:	4a7c      	ldr	r2, [pc, #496]	@ (2405ac94 <HAL_DMA_IRQHandler+0x6a8>)
2405aaa4:	4293      	cmp	r3, r2
2405aaa6:	d02c      	beq.n	2405ab02 <HAL_DMA_IRQHandler+0x516>
2405aaa8:	687b      	ldr	r3, [r7, #4]
2405aaaa:	681b      	ldr	r3, [r3, #0]
2405aaac:	4a7a      	ldr	r2, [pc, #488]	@ (2405ac98 <HAL_DMA_IRQHandler+0x6ac>)
2405aaae:	4293      	cmp	r3, r2
2405aab0:	d027      	beq.n	2405ab02 <HAL_DMA_IRQHandler+0x516>
2405aab2:	687b      	ldr	r3, [r7, #4]
2405aab4:	681b      	ldr	r3, [r3, #0]
2405aab6:	4a79      	ldr	r2, [pc, #484]	@ (2405ac9c <HAL_DMA_IRQHandler+0x6b0>)
2405aab8:	4293      	cmp	r3, r2
2405aaba:	d022      	beq.n	2405ab02 <HAL_DMA_IRQHandler+0x516>
2405aabc:	687b      	ldr	r3, [r7, #4]
2405aabe:	681b      	ldr	r3, [r3, #0]
2405aac0:	4a77      	ldr	r2, [pc, #476]	@ (2405aca0 <HAL_DMA_IRQHandler+0x6b4>)
2405aac2:	4293      	cmp	r3, r2
2405aac4:	d01d      	beq.n	2405ab02 <HAL_DMA_IRQHandler+0x516>
2405aac6:	687b      	ldr	r3, [r7, #4]
2405aac8:	681b      	ldr	r3, [r3, #0]
2405aaca:	4a76      	ldr	r2, [pc, #472]	@ (2405aca4 <HAL_DMA_IRQHandler+0x6b8>)
2405aacc:	4293      	cmp	r3, r2
2405aace:	d018      	beq.n	2405ab02 <HAL_DMA_IRQHandler+0x516>
2405aad0:	687b      	ldr	r3, [r7, #4]
2405aad2:	681b      	ldr	r3, [r3, #0]
2405aad4:	4a74      	ldr	r2, [pc, #464]	@ (2405aca8 <HAL_DMA_IRQHandler+0x6bc>)
2405aad6:	4293      	cmp	r3, r2
2405aad8:	d013      	beq.n	2405ab02 <HAL_DMA_IRQHandler+0x516>
2405aada:	687b      	ldr	r3, [r7, #4]
2405aadc:	681b      	ldr	r3, [r3, #0]
2405aade:	4a73      	ldr	r2, [pc, #460]	@ (2405acac <HAL_DMA_IRQHandler+0x6c0>)
2405aae0:	4293      	cmp	r3, r2
2405aae2:	d00e      	beq.n	2405ab02 <HAL_DMA_IRQHandler+0x516>
2405aae4:	687b      	ldr	r3, [r7, #4]
2405aae6:	681b      	ldr	r3, [r3, #0]
2405aae8:	4a71      	ldr	r2, [pc, #452]	@ (2405acb0 <HAL_DMA_IRQHandler+0x6c4>)
2405aaea:	4293      	cmp	r3, r2
2405aaec:	d009      	beq.n	2405ab02 <HAL_DMA_IRQHandler+0x516>
2405aaee:	687b      	ldr	r3, [r7, #4]
2405aaf0:	681b      	ldr	r3, [r3, #0]
2405aaf2:	4a70      	ldr	r2, [pc, #448]	@ (2405acb4 <HAL_DMA_IRQHandler+0x6c8>)
2405aaf4:	4293      	cmp	r3, r2
2405aaf6:	d004      	beq.n	2405ab02 <HAL_DMA_IRQHandler+0x516>
2405aaf8:	687b      	ldr	r3, [r7, #4]
2405aafa:	681b      	ldr	r3, [r3, #0]
2405aafc:	4a6e      	ldr	r2, [pc, #440]	@ (2405acb8 <HAL_DMA_IRQHandler+0x6cc>)
2405aafe:	4293      	cmp	r3, r2
2405ab00:	d10a      	bne.n	2405ab18 <HAL_DMA_IRQHandler+0x52c>
2405ab02:	687b      	ldr	r3, [r7, #4]
2405ab04:	681b      	ldr	r3, [r3, #0]
2405ab06:	681b      	ldr	r3, [r3, #0]
2405ab08:	f003 0308 	and.w	r3, r3, #8
2405ab0c:	2b00      	cmp	r3, #0
2405ab0e:	bf14      	ite	ne
2405ab10:	2301      	movne	r3, #1
2405ab12:	2300      	moveq	r3, #0
2405ab14:	b2db      	uxtb	r3, r3
2405ab16:	e009      	b.n	2405ab2c <HAL_DMA_IRQHandler+0x540>
2405ab18:	687b      	ldr	r3, [r7, #4]
2405ab1a:	681b      	ldr	r3, [r3, #0]
2405ab1c:	681b      	ldr	r3, [r3, #0]
2405ab1e:	f003 0304 	and.w	r3, r3, #4
2405ab22:	2b00      	cmp	r3, #0
2405ab24:	bf14      	ite	ne
2405ab26:	2301      	movne	r3, #1
2405ab28:	2300      	moveq	r3, #0
2405ab2a:	b2db      	uxtb	r3, r3
2405ab2c:	2b00      	cmp	r3, #0
2405ab2e:	d03e      	beq.n	2405abae <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
2405ab30:	687b      	ldr	r3, [r7, #4]
2405ab32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
2405ab34:	f003 031f 	and.w	r3, r3, #31
2405ab38:	2210      	movs	r2, #16
2405ab3a:	409a      	lsls	r2, r3
2405ab3c:	6a3b      	ldr	r3, [r7, #32]
2405ab3e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
2405ab40:	687b      	ldr	r3, [r7, #4]
2405ab42:	681b      	ldr	r3, [r3, #0]
2405ab44:	681b      	ldr	r3, [r3, #0]
2405ab46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
2405ab4a:	2b00      	cmp	r3, #0
2405ab4c:	d018      	beq.n	2405ab80 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
2405ab4e:	687b      	ldr	r3, [r7, #4]
2405ab50:	681b      	ldr	r3, [r3, #0]
2405ab52:	681b      	ldr	r3, [r3, #0]
2405ab54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
2405ab58:	2b00      	cmp	r3, #0
2405ab5a:	d108      	bne.n	2405ab6e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
2405ab5c:	687b      	ldr	r3, [r7, #4]
2405ab5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2405ab60:	2b00      	cmp	r3, #0
2405ab62:	d024      	beq.n	2405abae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
2405ab64:	687b      	ldr	r3, [r7, #4]
2405ab66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2405ab68:	6878      	ldr	r0, [r7, #4]
2405ab6a:	4798      	blx	r3
2405ab6c:	e01f      	b.n	2405abae <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
2405ab6e:	687b      	ldr	r3, [r7, #4]
2405ab70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
2405ab72:	2b00      	cmp	r3, #0
2405ab74:	d01b      	beq.n	2405abae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
2405ab76:	687b      	ldr	r3, [r7, #4]
2405ab78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
2405ab7a:	6878      	ldr	r0, [r7, #4]
2405ab7c:	4798      	blx	r3
2405ab7e:	e016      	b.n	2405abae <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
2405ab80:	687b      	ldr	r3, [r7, #4]
2405ab82:	681b      	ldr	r3, [r3, #0]
2405ab84:	681b      	ldr	r3, [r3, #0]
2405ab86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
2405ab8a:	2b00      	cmp	r3, #0
2405ab8c:	d107      	bne.n	2405ab9e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
2405ab8e:	687b      	ldr	r3, [r7, #4]
2405ab90:	681b      	ldr	r3, [r3, #0]
2405ab92:	681a      	ldr	r2, [r3, #0]
2405ab94:	687b      	ldr	r3, [r7, #4]
2405ab96:	681b      	ldr	r3, [r3, #0]
2405ab98:	f022 0208 	bic.w	r2, r2, #8
2405ab9c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
2405ab9e:	687b      	ldr	r3, [r7, #4]
2405aba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2405aba2:	2b00      	cmp	r3, #0
2405aba4:	d003      	beq.n	2405abae <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
2405aba6:	687b      	ldr	r3, [r7, #4]
2405aba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2405abaa:	6878      	ldr	r0, [r7, #4]
2405abac:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
2405abae:	687b      	ldr	r3, [r7, #4]
2405abb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
2405abb2:	f003 031f 	and.w	r3, r3, #31
2405abb6:	2220      	movs	r2, #32
2405abb8:	409a      	lsls	r2, r3
2405abba:	69bb      	ldr	r3, [r7, #24]
2405abbc:	4013      	ands	r3, r2
2405abbe:	2b00      	cmp	r3, #0
2405abc0:	f000 8110 	beq.w	2405ade4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
2405abc4:	687b      	ldr	r3, [r7, #4]
2405abc6:	681b      	ldr	r3, [r3, #0]
2405abc8:	4a2c      	ldr	r2, [pc, #176]	@ (2405ac7c <HAL_DMA_IRQHandler+0x690>)
2405abca:	4293      	cmp	r3, r2
2405abcc:	d04a      	beq.n	2405ac64 <HAL_DMA_IRQHandler+0x678>
2405abce:	687b      	ldr	r3, [r7, #4]
2405abd0:	681b      	ldr	r3, [r3, #0]
2405abd2:	4a2b      	ldr	r2, [pc, #172]	@ (2405ac80 <HAL_DMA_IRQHandler+0x694>)
2405abd4:	4293      	cmp	r3, r2
2405abd6:	d045      	beq.n	2405ac64 <HAL_DMA_IRQHandler+0x678>
2405abd8:	687b      	ldr	r3, [r7, #4]
2405abda:	681b      	ldr	r3, [r3, #0]
2405abdc:	4a29      	ldr	r2, [pc, #164]	@ (2405ac84 <HAL_DMA_IRQHandler+0x698>)
2405abde:	4293      	cmp	r3, r2
2405abe0:	d040      	beq.n	2405ac64 <HAL_DMA_IRQHandler+0x678>
2405abe2:	687b      	ldr	r3, [r7, #4]
2405abe4:	681b      	ldr	r3, [r3, #0]
2405abe6:	4a28      	ldr	r2, [pc, #160]	@ (2405ac88 <HAL_DMA_IRQHandler+0x69c>)
2405abe8:	4293      	cmp	r3, r2
2405abea:	d03b      	beq.n	2405ac64 <HAL_DMA_IRQHandler+0x678>
2405abec:	687b      	ldr	r3, [r7, #4]
2405abee:	681b      	ldr	r3, [r3, #0]
2405abf0:	4a26      	ldr	r2, [pc, #152]	@ (2405ac8c <HAL_DMA_IRQHandler+0x6a0>)
2405abf2:	4293      	cmp	r3, r2
2405abf4:	d036      	beq.n	2405ac64 <HAL_DMA_IRQHandler+0x678>
2405abf6:	687b      	ldr	r3, [r7, #4]
2405abf8:	681b      	ldr	r3, [r3, #0]
2405abfa:	4a25      	ldr	r2, [pc, #148]	@ (2405ac90 <HAL_DMA_IRQHandler+0x6a4>)
2405abfc:	4293      	cmp	r3, r2
2405abfe:	d031      	beq.n	2405ac64 <HAL_DMA_IRQHandler+0x678>
2405ac00:	687b      	ldr	r3, [r7, #4]
2405ac02:	681b      	ldr	r3, [r3, #0]
2405ac04:	4a23      	ldr	r2, [pc, #140]	@ (2405ac94 <HAL_DMA_IRQHandler+0x6a8>)
2405ac06:	4293      	cmp	r3, r2
2405ac08:	d02c      	beq.n	2405ac64 <HAL_DMA_IRQHandler+0x678>
2405ac0a:	687b      	ldr	r3, [r7, #4]
2405ac0c:	681b      	ldr	r3, [r3, #0]
2405ac0e:	4a22      	ldr	r2, [pc, #136]	@ (2405ac98 <HAL_DMA_IRQHandler+0x6ac>)
2405ac10:	4293      	cmp	r3, r2
2405ac12:	d027      	beq.n	2405ac64 <HAL_DMA_IRQHandler+0x678>
2405ac14:	687b      	ldr	r3, [r7, #4]
2405ac16:	681b      	ldr	r3, [r3, #0]
2405ac18:	4a20      	ldr	r2, [pc, #128]	@ (2405ac9c <HAL_DMA_IRQHandler+0x6b0>)
2405ac1a:	4293      	cmp	r3, r2
2405ac1c:	d022      	beq.n	2405ac64 <HAL_DMA_IRQHandler+0x678>
2405ac1e:	687b      	ldr	r3, [r7, #4]
2405ac20:	681b      	ldr	r3, [r3, #0]
2405ac22:	4a1f      	ldr	r2, [pc, #124]	@ (2405aca0 <HAL_DMA_IRQHandler+0x6b4>)
2405ac24:	4293      	cmp	r3, r2
2405ac26:	d01d      	beq.n	2405ac64 <HAL_DMA_IRQHandler+0x678>
2405ac28:	687b      	ldr	r3, [r7, #4]
2405ac2a:	681b      	ldr	r3, [r3, #0]
2405ac2c:	4a1d      	ldr	r2, [pc, #116]	@ (2405aca4 <HAL_DMA_IRQHandler+0x6b8>)
2405ac2e:	4293      	cmp	r3, r2
2405ac30:	d018      	beq.n	2405ac64 <HAL_DMA_IRQHandler+0x678>
2405ac32:	687b      	ldr	r3, [r7, #4]
2405ac34:	681b      	ldr	r3, [r3, #0]
2405ac36:	4a1c      	ldr	r2, [pc, #112]	@ (2405aca8 <HAL_DMA_IRQHandler+0x6bc>)
2405ac38:	4293      	cmp	r3, r2
2405ac3a:	d013      	beq.n	2405ac64 <HAL_DMA_IRQHandler+0x678>
2405ac3c:	687b      	ldr	r3, [r7, #4]
2405ac3e:	681b      	ldr	r3, [r3, #0]
2405ac40:	4a1a      	ldr	r2, [pc, #104]	@ (2405acac <HAL_DMA_IRQHandler+0x6c0>)
2405ac42:	4293      	cmp	r3, r2
2405ac44:	d00e      	beq.n	2405ac64 <HAL_DMA_IRQHandler+0x678>
2405ac46:	687b      	ldr	r3, [r7, #4]
2405ac48:	681b      	ldr	r3, [r3, #0]
2405ac4a:	4a19      	ldr	r2, [pc, #100]	@ (2405acb0 <HAL_DMA_IRQHandler+0x6c4>)
2405ac4c:	4293      	cmp	r3, r2
2405ac4e:	d009      	beq.n	2405ac64 <HAL_DMA_IRQHandler+0x678>
2405ac50:	687b      	ldr	r3, [r7, #4]
2405ac52:	681b      	ldr	r3, [r3, #0]
2405ac54:	4a17      	ldr	r2, [pc, #92]	@ (2405acb4 <HAL_DMA_IRQHandler+0x6c8>)
2405ac56:	4293      	cmp	r3, r2
2405ac58:	d004      	beq.n	2405ac64 <HAL_DMA_IRQHandler+0x678>
2405ac5a:	687b      	ldr	r3, [r7, #4]
2405ac5c:	681b      	ldr	r3, [r3, #0]
2405ac5e:	4a16      	ldr	r2, [pc, #88]	@ (2405acb8 <HAL_DMA_IRQHandler+0x6cc>)
2405ac60:	4293      	cmp	r3, r2
2405ac62:	d12b      	bne.n	2405acbc <HAL_DMA_IRQHandler+0x6d0>
2405ac64:	687b      	ldr	r3, [r7, #4]
2405ac66:	681b      	ldr	r3, [r3, #0]
2405ac68:	681b      	ldr	r3, [r3, #0]
2405ac6a:	f003 0310 	and.w	r3, r3, #16
2405ac6e:	2b00      	cmp	r3, #0
2405ac70:	bf14      	ite	ne
2405ac72:	2301      	movne	r3, #1
2405ac74:	2300      	moveq	r3, #0
2405ac76:	b2db      	uxtb	r3, r3
2405ac78:	e02a      	b.n	2405acd0 <HAL_DMA_IRQHandler+0x6e4>
2405ac7a:	bf00      	nop
2405ac7c:	40020010 	.word	0x40020010
2405ac80:	40020028 	.word	0x40020028
2405ac84:	40020040 	.word	0x40020040
2405ac88:	40020058 	.word	0x40020058
2405ac8c:	40020070 	.word	0x40020070
2405ac90:	40020088 	.word	0x40020088
2405ac94:	400200a0 	.word	0x400200a0
2405ac98:	400200b8 	.word	0x400200b8
2405ac9c:	40020410 	.word	0x40020410
2405aca0:	40020428 	.word	0x40020428
2405aca4:	40020440 	.word	0x40020440
2405aca8:	40020458 	.word	0x40020458
2405acac:	40020470 	.word	0x40020470
2405acb0:	40020488 	.word	0x40020488
2405acb4:	400204a0 	.word	0x400204a0
2405acb8:	400204b8 	.word	0x400204b8
2405acbc:	687b      	ldr	r3, [r7, #4]
2405acbe:	681b      	ldr	r3, [r3, #0]
2405acc0:	681b      	ldr	r3, [r3, #0]
2405acc2:	f003 0302 	and.w	r3, r3, #2
2405acc6:	2b00      	cmp	r3, #0
2405acc8:	bf14      	ite	ne
2405acca:	2301      	movne	r3, #1
2405accc:	2300      	moveq	r3, #0
2405acce:	b2db      	uxtb	r3, r3
2405acd0:	2b00      	cmp	r3, #0
2405acd2:	f000 8087 	beq.w	2405ade4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
2405acd6:	687b      	ldr	r3, [r7, #4]
2405acd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
2405acda:	f003 031f 	and.w	r3, r3, #31
2405acde:	2220      	movs	r2, #32
2405ace0:	409a      	lsls	r2, r3
2405ace2:	6a3b      	ldr	r3, [r7, #32]
2405ace4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
2405ace6:	687b      	ldr	r3, [r7, #4]
2405ace8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
2405acec:	b2db      	uxtb	r3, r3
2405acee:	2b04      	cmp	r3, #4
2405acf0:	d139      	bne.n	2405ad66 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
2405acf2:	687b      	ldr	r3, [r7, #4]
2405acf4:	681b      	ldr	r3, [r3, #0]
2405acf6:	681a      	ldr	r2, [r3, #0]
2405acf8:	687b      	ldr	r3, [r7, #4]
2405acfa:	681b      	ldr	r3, [r3, #0]
2405acfc:	f022 0216 	bic.w	r2, r2, #22
2405ad00:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
2405ad02:	687b      	ldr	r3, [r7, #4]
2405ad04:	681b      	ldr	r3, [r3, #0]
2405ad06:	695a      	ldr	r2, [r3, #20]
2405ad08:	687b      	ldr	r3, [r7, #4]
2405ad0a:	681b      	ldr	r3, [r3, #0]
2405ad0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
2405ad10:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
2405ad12:	687b      	ldr	r3, [r7, #4]
2405ad14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2405ad16:	2b00      	cmp	r3, #0
2405ad18:	d103      	bne.n	2405ad22 <HAL_DMA_IRQHandler+0x736>
2405ad1a:	687b      	ldr	r3, [r7, #4]
2405ad1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
2405ad1e:	2b00      	cmp	r3, #0
2405ad20:	d007      	beq.n	2405ad32 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
2405ad22:	687b      	ldr	r3, [r7, #4]
2405ad24:	681b      	ldr	r3, [r3, #0]
2405ad26:	681a      	ldr	r2, [r3, #0]
2405ad28:	687b      	ldr	r3, [r7, #4]
2405ad2a:	681b      	ldr	r3, [r3, #0]
2405ad2c:	f022 0208 	bic.w	r2, r2, #8
2405ad30:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
2405ad32:	687b      	ldr	r3, [r7, #4]
2405ad34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
2405ad36:	f003 031f 	and.w	r3, r3, #31
2405ad3a:	223f      	movs	r2, #63	@ 0x3f
2405ad3c:	409a      	lsls	r2, r3
2405ad3e:	6a3b      	ldr	r3, [r7, #32]
2405ad40:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
2405ad42:	687b      	ldr	r3, [r7, #4]
2405ad44:	2201      	movs	r2, #1
2405ad46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
2405ad4a:	687b      	ldr	r3, [r7, #4]
2405ad4c:	2200      	movs	r2, #0
2405ad4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
2405ad52:	687b      	ldr	r3, [r7, #4]
2405ad54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2405ad56:	2b00      	cmp	r3, #0
2405ad58:	f000 8382 	beq.w	2405b460 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
2405ad5c:	687b      	ldr	r3, [r7, #4]
2405ad5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2405ad60:	6878      	ldr	r0, [r7, #4]
2405ad62:	4798      	blx	r3
          }
          return;
2405ad64:	e37c      	b.n	2405b460 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
2405ad66:	687b      	ldr	r3, [r7, #4]
2405ad68:	681b      	ldr	r3, [r3, #0]
2405ad6a:	681b      	ldr	r3, [r3, #0]
2405ad6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
2405ad70:	2b00      	cmp	r3, #0
2405ad72:	d018      	beq.n	2405ada6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
2405ad74:	687b      	ldr	r3, [r7, #4]
2405ad76:	681b      	ldr	r3, [r3, #0]
2405ad78:	681b      	ldr	r3, [r3, #0]
2405ad7a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
2405ad7e:	2b00      	cmp	r3, #0
2405ad80:	d108      	bne.n	2405ad94 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
2405ad82:	687b      	ldr	r3, [r7, #4]
2405ad84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2405ad86:	2b00      	cmp	r3, #0
2405ad88:	d02c      	beq.n	2405ade4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
2405ad8a:	687b      	ldr	r3, [r7, #4]
2405ad8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2405ad8e:	6878      	ldr	r0, [r7, #4]
2405ad90:	4798      	blx	r3
2405ad92:	e027      	b.n	2405ade4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
2405ad94:	687b      	ldr	r3, [r7, #4]
2405ad96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2405ad98:	2b00      	cmp	r3, #0
2405ad9a:	d023      	beq.n	2405ade4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
2405ad9c:	687b      	ldr	r3, [r7, #4]
2405ad9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2405ada0:	6878      	ldr	r0, [r7, #4]
2405ada2:	4798      	blx	r3
2405ada4:	e01e      	b.n	2405ade4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
2405ada6:	687b      	ldr	r3, [r7, #4]
2405ada8:	681b      	ldr	r3, [r3, #0]
2405adaa:	681b      	ldr	r3, [r3, #0]
2405adac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
2405adb0:	2b00      	cmp	r3, #0
2405adb2:	d10f      	bne.n	2405add4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
2405adb4:	687b      	ldr	r3, [r7, #4]
2405adb6:	681b      	ldr	r3, [r3, #0]
2405adb8:	681a      	ldr	r2, [r3, #0]
2405adba:	687b      	ldr	r3, [r7, #4]
2405adbc:	681b      	ldr	r3, [r3, #0]
2405adbe:	f022 0210 	bic.w	r2, r2, #16
2405adc2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
2405adc4:	687b      	ldr	r3, [r7, #4]
2405adc6:	2201      	movs	r2, #1
2405adc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
2405adcc:	687b      	ldr	r3, [r7, #4]
2405adce:	2200      	movs	r2, #0
2405add0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
2405add4:	687b      	ldr	r3, [r7, #4]
2405add6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2405add8:	2b00      	cmp	r3, #0
2405adda:	d003      	beq.n	2405ade4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
2405addc:	687b      	ldr	r3, [r7, #4]
2405adde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2405ade0:	6878      	ldr	r0, [r7, #4]
2405ade2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
2405ade4:	687b      	ldr	r3, [r7, #4]
2405ade6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
2405ade8:	2b00      	cmp	r3, #0
2405adea:	f000 833e 	beq.w	2405b46a <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
2405adee:	687b      	ldr	r3, [r7, #4]
2405adf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
2405adf2:	f003 0301 	and.w	r3, r3, #1
2405adf6:	2b00      	cmp	r3, #0
2405adf8:	f000 8088 	beq.w	2405af0c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
2405adfc:	687b      	ldr	r3, [r7, #4]
2405adfe:	2204      	movs	r2, #4
2405ae00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
2405ae04:	687b      	ldr	r3, [r7, #4]
2405ae06:	681b      	ldr	r3, [r3, #0]
2405ae08:	4a89      	ldr	r2, [pc, #548]	@ (2405b030 <HAL_DMA_IRQHandler+0xa44>)
2405ae0a:	4293      	cmp	r3, r2
2405ae0c:	d04a      	beq.n	2405aea4 <HAL_DMA_IRQHandler+0x8b8>
2405ae0e:	687b      	ldr	r3, [r7, #4]
2405ae10:	681b      	ldr	r3, [r3, #0]
2405ae12:	4a88      	ldr	r2, [pc, #544]	@ (2405b034 <HAL_DMA_IRQHandler+0xa48>)
2405ae14:	4293      	cmp	r3, r2
2405ae16:	d045      	beq.n	2405aea4 <HAL_DMA_IRQHandler+0x8b8>
2405ae18:	687b      	ldr	r3, [r7, #4]
2405ae1a:	681b      	ldr	r3, [r3, #0]
2405ae1c:	4a86      	ldr	r2, [pc, #536]	@ (2405b038 <HAL_DMA_IRQHandler+0xa4c>)
2405ae1e:	4293      	cmp	r3, r2
2405ae20:	d040      	beq.n	2405aea4 <HAL_DMA_IRQHandler+0x8b8>
2405ae22:	687b      	ldr	r3, [r7, #4]
2405ae24:	681b      	ldr	r3, [r3, #0]
2405ae26:	4a85      	ldr	r2, [pc, #532]	@ (2405b03c <HAL_DMA_IRQHandler+0xa50>)
2405ae28:	4293      	cmp	r3, r2
2405ae2a:	d03b      	beq.n	2405aea4 <HAL_DMA_IRQHandler+0x8b8>
2405ae2c:	687b      	ldr	r3, [r7, #4]
2405ae2e:	681b      	ldr	r3, [r3, #0]
2405ae30:	4a83      	ldr	r2, [pc, #524]	@ (2405b040 <HAL_DMA_IRQHandler+0xa54>)
2405ae32:	4293      	cmp	r3, r2
2405ae34:	d036      	beq.n	2405aea4 <HAL_DMA_IRQHandler+0x8b8>
2405ae36:	687b      	ldr	r3, [r7, #4]
2405ae38:	681b      	ldr	r3, [r3, #0]
2405ae3a:	4a82      	ldr	r2, [pc, #520]	@ (2405b044 <HAL_DMA_IRQHandler+0xa58>)
2405ae3c:	4293      	cmp	r3, r2
2405ae3e:	d031      	beq.n	2405aea4 <HAL_DMA_IRQHandler+0x8b8>
2405ae40:	687b      	ldr	r3, [r7, #4]
2405ae42:	681b      	ldr	r3, [r3, #0]
2405ae44:	4a80      	ldr	r2, [pc, #512]	@ (2405b048 <HAL_DMA_IRQHandler+0xa5c>)
2405ae46:	4293      	cmp	r3, r2
2405ae48:	d02c      	beq.n	2405aea4 <HAL_DMA_IRQHandler+0x8b8>
2405ae4a:	687b      	ldr	r3, [r7, #4]
2405ae4c:	681b      	ldr	r3, [r3, #0]
2405ae4e:	4a7f      	ldr	r2, [pc, #508]	@ (2405b04c <HAL_DMA_IRQHandler+0xa60>)
2405ae50:	4293      	cmp	r3, r2
2405ae52:	d027      	beq.n	2405aea4 <HAL_DMA_IRQHandler+0x8b8>
2405ae54:	687b      	ldr	r3, [r7, #4]
2405ae56:	681b      	ldr	r3, [r3, #0]
2405ae58:	4a7d      	ldr	r2, [pc, #500]	@ (2405b050 <HAL_DMA_IRQHandler+0xa64>)
2405ae5a:	4293      	cmp	r3, r2
2405ae5c:	d022      	beq.n	2405aea4 <HAL_DMA_IRQHandler+0x8b8>
2405ae5e:	687b      	ldr	r3, [r7, #4]
2405ae60:	681b      	ldr	r3, [r3, #0]
2405ae62:	4a7c      	ldr	r2, [pc, #496]	@ (2405b054 <HAL_DMA_IRQHandler+0xa68>)
2405ae64:	4293      	cmp	r3, r2
2405ae66:	d01d      	beq.n	2405aea4 <HAL_DMA_IRQHandler+0x8b8>
2405ae68:	687b      	ldr	r3, [r7, #4]
2405ae6a:	681b      	ldr	r3, [r3, #0]
2405ae6c:	4a7a      	ldr	r2, [pc, #488]	@ (2405b058 <HAL_DMA_IRQHandler+0xa6c>)
2405ae6e:	4293      	cmp	r3, r2
2405ae70:	d018      	beq.n	2405aea4 <HAL_DMA_IRQHandler+0x8b8>
2405ae72:	687b      	ldr	r3, [r7, #4]
2405ae74:	681b      	ldr	r3, [r3, #0]
2405ae76:	4a79      	ldr	r2, [pc, #484]	@ (2405b05c <HAL_DMA_IRQHandler+0xa70>)
2405ae78:	4293      	cmp	r3, r2
2405ae7a:	d013      	beq.n	2405aea4 <HAL_DMA_IRQHandler+0x8b8>
2405ae7c:	687b      	ldr	r3, [r7, #4]
2405ae7e:	681b      	ldr	r3, [r3, #0]
2405ae80:	4a77      	ldr	r2, [pc, #476]	@ (2405b060 <HAL_DMA_IRQHandler+0xa74>)
2405ae82:	4293      	cmp	r3, r2
2405ae84:	d00e      	beq.n	2405aea4 <HAL_DMA_IRQHandler+0x8b8>
2405ae86:	687b      	ldr	r3, [r7, #4]
2405ae88:	681b      	ldr	r3, [r3, #0]
2405ae8a:	4a76      	ldr	r2, [pc, #472]	@ (2405b064 <HAL_DMA_IRQHandler+0xa78>)
2405ae8c:	4293      	cmp	r3, r2
2405ae8e:	d009      	beq.n	2405aea4 <HAL_DMA_IRQHandler+0x8b8>
2405ae90:	687b      	ldr	r3, [r7, #4]
2405ae92:	681b      	ldr	r3, [r3, #0]
2405ae94:	4a74      	ldr	r2, [pc, #464]	@ (2405b068 <HAL_DMA_IRQHandler+0xa7c>)
2405ae96:	4293      	cmp	r3, r2
2405ae98:	d004      	beq.n	2405aea4 <HAL_DMA_IRQHandler+0x8b8>
2405ae9a:	687b      	ldr	r3, [r7, #4]
2405ae9c:	681b      	ldr	r3, [r3, #0]
2405ae9e:	4a73      	ldr	r2, [pc, #460]	@ (2405b06c <HAL_DMA_IRQHandler+0xa80>)
2405aea0:	4293      	cmp	r3, r2
2405aea2:	d108      	bne.n	2405aeb6 <HAL_DMA_IRQHandler+0x8ca>
2405aea4:	687b      	ldr	r3, [r7, #4]
2405aea6:	681b      	ldr	r3, [r3, #0]
2405aea8:	681a      	ldr	r2, [r3, #0]
2405aeaa:	687b      	ldr	r3, [r7, #4]
2405aeac:	681b      	ldr	r3, [r3, #0]
2405aeae:	f022 0201 	bic.w	r2, r2, #1
2405aeb2:	601a      	str	r2, [r3, #0]
2405aeb4:	e007      	b.n	2405aec6 <HAL_DMA_IRQHandler+0x8da>
2405aeb6:	687b      	ldr	r3, [r7, #4]
2405aeb8:	681b      	ldr	r3, [r3, #0]
2405aeba:	681a      	ldr	r2, [r3, #0]
2405aebc:	687b      	ldr	r3, [r7, #4]
2405aebe:	681b      	ldr	r3, [r3, #0]
2405aec0:	f022 0201 	bic.w	r2, r2, #1
2405aec4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
2405aec6:	68fb      	ldr	r3, [r7, #12]
2405aec8:	3301      	adds	r3, #1
2405aeca:	60fb      	str	r3, [r7, #12]
2405aecc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
2405aece:	429a      	cmp	r2, r3
2405aed0:	d307      	bcc.n	2405aee2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
2405aed2:	687b      	ldr	r3, [r7, #4]
2405aed4:	681b      	ldr	r3, [r3, #0]
2405aed6:	681b      	ldr	r3, [r3, #0]
2405aed8:	f003 0301 	and.w	r3, r3, #1
2405aedc:	2b00      	cmp	r3, #0
2405aede:	d1f2      	bne.n	2405aec6 <HAL_DMA_IRQHandler+0x8da>
2405aee0:	e000      	b.n	2405aee4 <HAL_DMA_IRQHandler+0x8f8>
            break;
2405aee2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
2405aee4:	687b      	ldr	r3, [r7, #4]
2405aee6:	681b      	ldr	r3, [r3, #0]
2405aee8:	681b      	ldr	r3, [r3, #0]
2405aeea:	f003 0301 	and.w	r3, r3, #1
2405aeee:	2b00      	cmp	r3, #0
2405aef0:	d004      	beq.n	2405aefc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
2405aef2:	687b      	ldr	r3, [r7, #4]
2405aef4:	2203      	movs	r2, #3
2405aef6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
2405aefa:	e003      	b.n	2405af04 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
2405aefc:	687b      	ldr	r3, [r7, #4]
2405aefe:	2201      	movs	r2, #1
2405af00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
2405af04:	687b      	ldr	r3, [r7, #4]
2405af06:	2200      	movs	r2, #0
2405af08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
2405af0c:	687b      	ldr	r3, [r7, #4]
2405af0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2405af10:	2b00      	cmp	r3, #0
2405af12:	f000 82aa 	beq.w	2405b46a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
2405af16:	687b      	ldr	r3, [r7, #4]
2405af18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2405af1a:	6878      	ldr	r0, [r7, #4]
2405af1c:	4798      	blx	r3
2405af1e:	e2a4      	b.n	2405b46a <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
2405af20:	687b      	ldr	r3, [r7, #4]
2405af22:	681b      	ldr	r3, [r3, #0]
2405af24:	4a52      	ldr	r2, [pc, #328]	@ (2405b070 <HAL_DMA_IRQHandler+0xa84>)
2405af26:	4293      	cmp	r3, r2
2405af28:	d04a      	beq.n	2405afc0 <HAL_DMA_IRQHandler+0x9d4>
2405af2a:	687b      	ldr	r3, [r7, #4]
2405af2c:	681b      	ldr	r3, [r3, #0]
2405af2e:	4a51      	ldr	r2, [pc, #324]	@ (2405b074 <HAL_DMA_IRQHandler+0xa88>)
2405af30:	4293      	cmp	r3, r2
2405af32:	d045      	beq.n	2405afc0 <HAL_DMA_IRQHandler+0x9d4>
2405af34:	687b      	ldr	r3, [r7, #4]
2405af36:	681b      	ldr	r3, [r3, #0]
2405af38:	4a4f      	ldr	r2, [pc, #316]	@ (2405b078 <HAL_DMA_IRQHandler+0xa8c>)
2405af3a:	4293      	cmp	r3, r2
2405af3c:	d040      	beq.n	2405afc0 <HAL_DMA_IRQHandler+0x9d4>
2405af3e:	687b      	ldr	r3, [r7, #4]
2405af40:	681b      	ldr	r3, [r3, #0]
2405af42:	4a4e      	ldr	r2, [pc, #312]	@ (2405b07c <HAL_DMA_IRQHandler+0xa90>)
2405af44:	4293      	cmp	r3, r2
2405af46:	d03b      	beq.n	2405afc0 <HAL_DMA_IRQHandler+0x9d4>
2405af48:	687b      	ldr	r3, [r7, #4]
2405af4a:	681b      	ldr	r3, [r3, #0]
2405af4c:	4a4c      	ldr	r2, [pc, #304]	@ (2405b080 <HAL_DMA_IRQHandler+0xa94>)
2405af4e:	4293      	cmp	r3, r2
2405af50:	d036      	beq.n	2405afc0 <HAL_DMA_IRQHandler+0x9d4>
2405af52:	687b      	ldr	r3, [r7, #4]
2405af54:	681b      	ldr	r3, [r3, #0]
2405af56:	4a4b      	ldr	r2, [pc, #300]	@ (2405b084 <HAL_DMA_IRQHandler+0xa98>)
2405af58:	4293      	cmp	r3, r2
2405af5a:	d031      	beq.n	2405afc0 <HAL_DMA_IRQHandler+0x9d4>
2405af5c:	687b      	ldr	r3, [r7, #4]
2405af5e:	681b      	ldr	r3, [r3, #0]
2405af60:	4a49      	ldr	r2, [pc, #292]	@ (2405b088 <HAL_DMA_IRQHandler+0xa9c>)
2405af62:	4293      	cmp	r3, r2
2405af64:	d02c      	beq.n	2405afc0 <HAL_DMA_IRQHandler+0x9d4>
2405af66:	687b      	ldr	r3, [r7, #4]
2405af68:	681b      	ldr	r3, [r3, #0]
2405af6a:	4a48      	ldr	r2, [pc, #288]	@ (2405b08c <HAL_DMA_IRQHandler+0xaa0>)
2405af6c:	4293      	cmp	r3, r2
2405af6e:	d027      	beq.n	2405afc0 <HAL_DMA_IRQHandler+0x9d4>
2405af70:	687b      	ldr	r3, [r7, #4]
2405af72:	681b      	ldr	r3, [r3, #0]
2405af74:	4a46      	ldr	r2, [pc, #280]	@ (2405b090 <HAL_DMA_IRQHandler+0xaa4>)
2405af76:	4293      	cmp	r3, r2
2405af78:	d022      	beq.n	2405afc0 <HAL_DMA_IRQHandler+0x9d4>
2405af7a:	687b      	ldr	r3, [r7, #4]
2405af7c:	681b      	ldr	r3, [r3, #0]
2405af7e:	4a45      	ldr	r2, [pc, #276]	@ (2405b094 <HAL_DMA_IRQHandler+0xaa8>)
2405af80:	4293      	cmp	r3, r2
2405af82:	d01d      	beq.n	2405afc0 <HAL_DMA_IRQHandler+0x9d4>
2405af84:	687b      	ldr	r3, [r7, #4]
2405af86:	681b      	ldr	r3, [r3, #0]
2405af88:	4a43      	ldr	r2, [pc, #268]	@ (2405b098 <HAL_DMA_IRQHandler+0xaac>)
2405af8a:	4293      	cmp	r3, r2
2405af8c:	d018      	beq.n	2405afc0 <HAL_DMA_IRQHandler+0x9d4>
2405af8e:	687b      	ldr	r3, [r7, #4]
2405af90:	681b      	ldr	r3, [r3, #0]
2405af92:	4a42      	ldr	r2, [pc, #264]	@ (2405b09c <HAL_DMA_IRQHandler+0xab0>)
2405af94:	4293      	cmp	r3, r2
2405af96:	d013      	beq.n	2405afc0 <HAL_DMA_IRQHandler+0x9d4>
2405af98:	687b      	ldr	r3, [r7, #4]
2405af9a:	681b      	ldr	r3, [r3, #0]
2405af9c:	4a40      	ldr	r2, [pc, #256]	@ (2405b0a0 <HAL_DMA_IRQHandler+0xab4>)
2405af9e:	4293      	cmp	r3, r2
2405afa0:	d00e      	beq.n	2405afc0 <HAL_DMA_IRQHandler+0x9d4>
2405afa2:	687b      	ldr	r3, [r7, #4]
2405afa4:	681b      	ldr	r3, [r3, #0]
2405afa6:	4a3f      	ldr	r2, [pc, #252]	@ (2405b0a4 <HAL_DMA_IRQHandler+0xab8>)
2405afa8:	4293      	cmp	r3, r2
2405afaa:	d009      	beq.n	2405afc0 <HAL_DMA_IRQHandler+0x9d4>
2405afac:	687b      	ldr	r3, [r7, #4]
2405afae:	681b      	ldr	r3, [r3, #0]
2405afb0:	4a3d      	ldr	r2, [pc, #244]	@ (2405b0a8 <HAL_DMA_IRQHandler+0xabc>)
2405afb2:	4293      	cmp	r3, r2
2405afb4:	d004      	beq.n	2405afc0 <HAL_DMA_IRQHandler+0x9d4>
2405afb6:	687b      	ldr	r3, [r7, #4]
2405afb8:	681b      	ldr	r3, [r3, #0]
2405afba:	4a3c      	ldr	r2, [pc, #240]	@ (2405b0ac <HAL_DMA_IRQHandler+0xac0>)
2405afbc:	4293      	cmp	r3, r2
2405afbe:	d101      	bne.n	2405afc4 <HAL_DMA_IRQHandler+0x9d8>
2405afc0:	2301      	movs	r3, #1
2405afc2:	e000      	b.n	2405afc6 <HAL_DMA_IRQHandler+0x9da>
2405afc4:	2300      	movs	r3, #0
2405afc6:	2b00      	cmp	r3, #0
2405afc8:	f000 824f 	beq.w	2405b46a <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
2405afcc:	687b      	ldr	r3, [r7, #4]
2405afce:	681b      	ldr	r3, [r3, #0]
2405afd0:	681b      	ldr	r3, [r3, #0]
2405afd2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
2405afd4:	687b      	ldr	r3, [r7, #4]
2405afd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
2405afd8:	f003 031f 	and.w	r3, r3, #31
2405afdc:	2204      	movs	r2, #4
2405afde:	409a      	lsls	r2, r3
2405afe0:	697b      	ldr	r3, [r7, #20]
2405afe2:	4013      	ands	r3, r2
2405afe4:	2b00      	cmp	r3, #0
2405afe6:	f000 80dd 	beq.w	2405b1a4 <HAL_DMA_IRQHandler+0xbb8>
2405afea:	693b      	ldr	r3, [r7, #16]
2405afec:	f003 0304 	and.w	r3, r3, #4
2405aff0:	2b00      	cmp	r3, #0
2405aff2:	f000 80d7 	beq.w	2405b1a4 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
2405aff6:	687b      	ldr	r3, [r7, #4]
2405aff8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
2405affa:	f003 031f 	and.w	r3, r3, #31
2405affe:	2204      	movs	r2, #4
2405b000:	409a      	lsls	r2, r3
2405b002:	69fb      	ldr	r3, [r7, #28]
2405b004:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
2405b006:	693b      	ldr	r3, [r7, #16]
2405b008:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
2405b00c:	2b00      	cmp	r3, #0
2405b00e:	d059      	beq.n	2405b0c4 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
2405b010:	693b      	ldr	r3, [r7, #16]
2405b012:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
2405b016:	2b00      	cmp	r3, #0
2405b018:	d14a      	bne.n	2405b0b0 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
2405b01a:	687b      	ldr	r3, [r7, #4]
2405b01c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
2405b01e:	2b00      	cmp	r3, #0
2405b020:	f000 8220 	beq.w	2405b464 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
2405b024:	687b      	ldr	r3, [r7, #4]
2405b026:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
2405b028:	6878      	ldr	r0, [r7, #4]
2405b02a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
2405b02c:	e21a      	b.n	2405b464 <HAL_DMA_IRQHandler+0xe78>
2405b02e:	bf00      	nop
2405b030:	40020010 	.word	0x40020010
2405b034:	40020028 	.word	0x40020028
2405b038:	40020040 	.word	0x40020040
2405b03c:	40020058 	.word	0x40020058
2405b040:	40020070 	.word	0x40020070
2405b044:	40020088 	.word	0x40020088
2405b048:	400200a0 	.word	0x400200a0
2405b04c:	400200b8 	.word	0x400200b8
2405b050:	40020410 	.word	0x40020410
2405b054:	40020428 	.word	0x40020428
2405b058:	40020440 	.word	0x40020440
2405b05c:	40020458 	.word	0x40020458
2405b060:	40020470 	.word	0x40020470
2405b064:	40020488 	.word	0x40020488
2405b068:	400204a0 	.word	0x400204a0
2405b06c:	400204b8 	.word	0x400204b8
2405b070:	48022c08 	.word	0x48022c08
2405b074:	48022c1c 	.word	0x48022c1c
2405b078:	48022c30 	.word	0x48022c30
2405b07c:	48022c44 	.word	0x48022c44
2405b080:	48022c58 	.word	0x48022c58
2405b084:	48022c6c 	.word	0x48022c6c
2405b088:	48022c80 	.word	0x48022c80
2405b08c:	48022c94 	.word	0x48022c94
2405b090:	58025408 	.word	0x58025408
2405b094:	5802541c 	.word	0x5802541c
2405b098:	58025430 	.word	0x58025430
2405b09c:	58025444 	.word	0x58025444
2405b0a0:	58025458 	.word	0x58025458
2405b0a4:	5802546c 	.word	0x5802546c
2405b0a8:	58025480 	.word	0x58025480
2405b0ac:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
2405b0b0:	687b      	ldr	r3, [r7, #4]
2405b0b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2405b0b4:	2b00      	cmp	r3, #0
2405b0b6:	f000 81d5 	beq.w	2405b464 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
2405b0ba:	687b      	ldr	r3, [r7, #4]
2405b0bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2405b0be:	6878      	ldr	r0, [r7, #4]
2405b0c0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
2405b0c2:	e1cf      	b.n	2405b464 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
2405b0c4:	693b      	ldr	r3, [r7, #16]
2405b0c6:	f003 0320 	and.w	r3, r3, #32
2405b0ca:	2b00      	cmp	r3, #0
2405b0cc:	d160      	bne.n	2405b190 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
2405b0ce:	687b      	ldr	r3, [r7, #4]
2405b0d0:	681b      	ldr	r3, [r3, #0]
2405b0d2:	4a7f      	ldr	r2, [pc, #508]	@ (2405b2d0 <HAL_DMA_IRQHandler+0xce4>)
2405b0d4:	4293      	cmp	r3, r2
2405b0d6:	d04a      	beq.n	2405b16e <HAL_DMA_IRQHandler+0xb82>
2405b0d8:	687b      	ldr	r3, [r7, #4]
2405b0da:	681b      	ldr	r3, [r3, #0]
2405b0dc:	4a7d      	ldr	r2, [pc, #500]	@ (2405b2d4 <HAL_DMA_IRQHandler+0xce8>)
2405b0de:	4293      	cmp	r3, r2
2405b0e0:	d045      	beq.n	2405b16e <HAL_DMA_IRQHandler+0xb82>
2405b0e2:	687b      	ldr	r3, [r7, #4]
2405b0e4:	681b      	ldr	r3, [r3, #0]
2405b0e6:	4a7c      	ldr	r2, [pc, #496]	@ (2405b2d8 <HAL_DMA_IRQHandler+0xcec>)
2405b0e8:	4293      	cmp	r3, r2
2405b0ea:	d040      	beq.n	2405b16e <HAL_DMA_IRQHandler+0xb82>
2405b0ec:	687b      	ldr	r3, [r7, #4]
2405b0ee:	681b      	ldr	r3, [r3, #0]
2405b0f0:	4a7a      	ldr	r2, [pc, #488]	@ (2405b2dc <HAL_DMA_IRQHandler+0xcf0>)
2405b0f2:	4293      	cmp	r3, r2
2405b0f4:	d03b      	beq.n	2405b16e <HAL_DMA_IRQHandler+0xb82>
2405b0f6:	687b      	ldr	r3, [r7, #4]
2405b0f8:	681b      	ldr	r3, [r3, #0]
2405b0fa:	4a79      	ldr	r2, [pc, #484]	@ (2405b2e0 <HAL_DMA_IRQHandler+0xcf4>)
2405b0fc:	4293      	cmp	r3, r2
2405b0fe:	d036      	beq.n	2405b16e <HAL_DMA_IRQHandler+0xb82>
2405b100:	687b      	ldr	r3, [r7, #4]
2405b102:	681b      	ldr	r3, [r3, #0]
2405b104:	4a77      	ldr	r2, [pc, #476]	@ (2405b2e4 <HAL_DMA_IRQHandler+0xcf8>)
2405b106:	4293      	cmp	r3, r2
2405b108:	d031      	beq.n	2405b16e <HAL_DMA_IRQHandler+0xb82>
2405b10a:	687b      	ldr	r3, [r7, #4]
2405b10c:	681b      	ldr	r3, [r3, #0]
2405b10e:	4a76      	ldr	r2, [pc, #472]	@ (2405b2e8 <HAL_DMA_IRQHandler+0xcfc>)
2405b110:	4293      	cmp	r3, r2
2405b112:	d02c      	beq.n	2405b16e <HAL_DMA_IRQHandler+0xb82>
2405b114:	687b      	ldr	r3, [r7, #4]
2405b116:	681b      	ldr	r3, [r3, #0]
2405b118:	4a74      	ldr	r2, [pc, #464]	@ (2405b2ec <HAL_DMA_IRQHandler+0xd00>)
2405b11a:	4293      	cmp	r3, r2
2405b11c:	d027      	beq.n	2405b16e <HAL_DMA_IRQHandler+0xb82>
2405b11e:	687b      	ldr	r3, [r7, #4]
2405b120:	681b      	ldr	r3, [r3, #0]
2405b122:	4a73      	ldr	r2, [pc, #460]	@ (2405b2f0 <HAL_DMA_IRQHandler+0xd04>)
2405b124:	4293      	cmp	r3, r2
2405b126:	d022      	beq.n	2405b16e <HAL_DMA_IRQHandler+0xb82>
2405b128:	687b      	ldr	r3, [r7, #4]
2405b12a:	681b      	ldr	r3, [r3, #0]
2405b12c:	4a71      	ldr	r2, [pc, #452]	@ (2405b2f4 <HAL_DMA_IRQHandler+0xd08>)
2405b12e:	4293      	cmp	r3, r2
2405b130:	d01d      	beq.n	2405b16e <HAL_DMA_IRQHandler+0xb82>
2405b132:	687b      	ldr	r3, [r7, #4]
2405b134:	681b      	ldr	r3, [r3, #0]
2405b136:	4a70      	ldr	r2, [pc, #448]	@ (2405b2f8 <HAL_DMA_IRQHandler+0xd0c>)
2405b138:	4293      	cmp	r3, r2
2405b13a:	d018      	beq.n	2405b16e <HAL_DMA_IRQHandler+0xb82>
2405b13c:	687b      	ldr	r3, [r7, #4]
2405b13e:	681b      	ldr	r3, [r3, #0]
2405b140:	4a6e      	ldr	r2, [pc, #440]	@ (2405b2fc <HAL_DMA_IRQHandler+0xd10>)
2405b142:	4293      	cmp	r3, r2
2405b144:	d013      	beq.n	2405b16e <HAL_DMA_IRQHandler+0xb82>
2405b146:	687b      	ldr	r3, [r7, #4]
2405b148:	681b      	ldr	r3, [r3, #0]
2405b14a:	4a6d      	ldr	r2, [pc, #436]	@ (2405b300 <HAL_DMA_IRQHandler+0xd14>)
2405b14c:	4293      	cmp	r3, r2
2405b14e:	d00e      	beq.n	2405b16e <HAL_DMA_IRQHandler+0xb82>
2405b150:	687b      	ldr	r3, [r7, #4]
2405b152:	681b      	ldr	r3, [r3, #0]
2405b154:	4a6b      	ldr	r2, [pc, #428]	@ (2405b304 <HAL_DMA_IRQHandler+0xd18>)
2405b156:	4293      	cmp	r3, r2
2405b158:	d009      	beq.n	2405b16e <HAL_DMA_IRQHandler+0xb82>
2405b15a:	687b      	ldr	r3, [r7, #4]
2405b15c:	681b      	ldr	r3, [r3, #0]
2405b15e:	4a6a      	ldr	r2, [pc, #424]	@ (2405b308 <HAL_DMA_IRQHandler+0xd1c>)
2405b160:	4293      	cmp	r3, r2
2405b162:	d004      	beq.n	2405b16e <HAL_DMA_IRQHandler+0xb82>
2405b164:	687b      	ldr	r3, [r7, #4]
2405b166:	681b      	ldr	r3, [r3, #0]
2405b168:	4a68      	ldr	r2, [pc, #416]	@ (2405b30c <HAL_DMA_IRQHandler+0xd20>)
2405b16a:	4293      	cmp	r3, r2
2405b16c:	d108      	bne.n	2405b180 <HAL_DMA_IRQHandler+0xb94>
2405b16e:	687b      	ldr	r3, [r7, #4]
2405b170:	681b      	ldr	r3, [r3, #0]
2405b172:	681a      	ldr	r2, [r3, #0]
2405b174:	687b      	ldr	r3, [r7, #4]
2405b176:	681b      	ldr	r3, [r3, #0]
2405b178:	f022 0208 	bic.w	r2, r2, #8
2405b17c:	601a      	str	r2, [r3, #0]
2405b17e:	e007      	b.n	2405b190 <HAL_DMA_IRQHandler+0xba4>
2405b180:	687b      	ldr	r3, [r7, #4]
2405b182:	681b      	ldr	r3, [r3, #0]
2405b184:	681a      	ldr	r2, [r3, #0]
2405b186:	687b      	ldr	r3, [r7, #4]
2405b188:	681b      	ldr	r3, [r3, #0]
2405b18a:	f022 0204 	bic.w	r2, r2, #4
2405b18e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
2405b190:	687b      	ldr	r3, [r7, #4]
2405b192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2405b194:	2b00      	cmp	r3, #0
2405b196:	f000 8165 	beq.w	2405b464 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
2405b19a:	687b      	ldr	r3, [r7, #4]
2405b19c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2405b19e:	6878      	ldr	r0, [r7, #4]
2405b1a0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
2405b1a2:	e15f      	b.n	2405b464 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
2405b1a4:	687b      	ldr	r3, [r7, #4]
2405b1a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
2405b1a8:	f003 031f 	and.w	r3, r3, #31
2405b1ac:	2202      	movs	r2, #2
2405b1ae:	409a      	lsls	r2, r3
2405b1b0:	697b      	ldr	r3, [r7, #20]
2405b1b2:	4013      	ands	r3, r2
2405b1b4:	2b00      	cmp	r3, #0
2405b1b6:	f000 80c5 	beq.w	2405b344 <HAL_DMA_IRQHandler+0xd58>
2405b1ba:	693b      	ldr	r3, [r7, #16]
2405b1bc:	f003 0302 	and.w	r3, r3, #2
2405b1c0:	2b00      	cmp	r3, #0
2405b1c2:	f000 80bf 	beq.w	2405b344 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
2405b1c6:	687b      	ldr	r3, [r7, #4]
2405b1c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
2405b1ca:	f003 031f 	and.w	r3, r3, #31
2405b1ce:	2202      	movs	r2, #2
2405b1d0:	409a      	lsls	r2, r3
2405b1d2:	69fb      	ldr	r3, [r7, #28]
2405b1d4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
2405b1d6:	693b      	ldr	r3, [r7, #16]
2405b1d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
2405b1dc:	2b00      	cmp	r3, #0
2405b1de:	d018      	beq.n	2405b212 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
2405b1e0:	693b      	ldr	r3, [r7, #16]
2405b1e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
2405b1e6:	2b00      	cmp	r3, #0
2405b1e8:	d109      	bne.n	2405b1fe <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
2405b1ea:	687b      	ldr	r3, [r7, #4]
2405b1ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2405b1ee:	2b00      	cmp	r3, #0
2405b1f0:	f000 813a 	beq.w	2405b468 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
2405b1f4:	687b      	ldr	r3, [r7, #4]
2405b1f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2405b1f8:	6878      	ldr	r0, [r7, #4]
2405b1fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
2405b1fc:	e134      	b.n	2405b468 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
2405b1fe:	687b      	ldr	r3, [r7, #4]
2405b200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2405b202:	2b00      	cmp	r3, #0
2405b204:	f000 8130 	beq.w	2405b468 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
2405b208:	687b      	ldr	r3, [r7, #4]
2405b20a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2405b20c:	6878      	ldr	r0, [r7, #4]
2405b20e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
2405b210:	e12a      	b.n	2405b468 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
2405b212:	693b      	ldr	r3, [r7, #16]
2405b214:	f003 0320 	and.w	r3, r3, #32
2405b218:	2b00      	cmp	r3, #0
2405b21a:	f040 8089 	bne.w	2405b330 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
2405b21e:	687b      	ldr	r3, [r7, #4]
2405b220:	681b      	ldr	r3, [r3, #0]
2405b222:	4a2b      	ldr	r2, [pc, #172]	@ (2405b2d0 <HAL_DMA_IRQHandler+0xce4>)
2405b224:	4293      	cmp	r3, r2
2405b226:	d04a      	beq.n	2405b2be <HAL_DMA_IRQHandler+0xcd2>
2405b228:	687b      	ldr	r3, [r7, #4]
2405b22a:	681b      	ldr	r3, [r3, #0]
2405b22c:	4a29      	ldr	r2, [pc, #164]	@ (2405b2d4 <HAL_DMA_IRQHandler+0xce8>)
2405b22e:	4293      	cmp	r3, r2
2405b230:	d045      	beq.n	2405b2be <HAL_DMA_IRQHandler+0xcd2>
2405b232:	687b      	ldr	r3, [r7, #4]
2405b234:	681b      	ldr	r3, [r3, #0]
2405b236:	4a28      	ldr	r2, [pc, #160]	@ (2405b2d8 <HAL_DMA_IRQHandler+0xcec>)
2405b238:	4293      	cmp	r3, r2
2405b23a:	d040      	beq.n	2405b2be <HAL_DMA_IRQHandler+0xcd2>
2405b23c:	687b      	ldr	r3, [r7, #4]
2405b23e:	681b      	ldr	r3, [r3, #0]
2405b240:	4a26      	ldr	r2, [pc, #152]	@ (2405b2dc <HAL_DMA_IRQHandler+0xcf0>)
2405b242:	4293      	cmp	r3, r2
2405b244:	d03b      	beq.n	2405b2be <HAL_DMA_IRQHandler+0xcd2>
2405b246:	687b      	ldr	r3, [r7, #4]
2405b248:	681b      	ldr	r3, [r3, #0]
2405b24a:	4a25      	ldr	r2, [pc, #148]	@ (2405b2e0 <HAL_DMA_IRQHandler+0xcf4>)
2405b24c:	4293      	cmp	r3, r2
2405b24e:	d036      	beq.n	2405b2be <HAL_DMA_IRQHandler+0xcd2>
2405b250:	687b      	ldr	r3, [r7, #4]
2405b252:	681b      	ldr	r3, [r3, #0]
2405b254:	4a23      	ldr	r2, [pc, #140]	@ (2405b2e4 <HAL_DMA_IRQHandler+0xcf8>)
2405b256:	4293      	cmp	r3, r2
2405b258:	d031      	beq.n	2405b2be <HAL_DMA_IRQHandler+0xcd2>
2405b25a:	687b      	ldr	r3, [r7, #4]
2405b25c:	681b      	ldr	r3, [r3, #0]
2405b25e:	4a22      	ldr	r2, [pc, #136]	@ (2405b2e8 <HAL_DMA_IRQHandler+0xcfc>)
2405b260:	4293      	cmp	r3, r2
2405b262:	d02c      	beq.n	2405b2be <HAL_DMA_IRQHandler+0xcd2>
2405b264:	687b      	ldr	r3, [r7, #4]
2405b266:	681b      	ldr	r3, [r3, #0]
2405b268:	4a20      	ldr	r2, [pc, #128]	@ (2405b2ec <HAL_DMA_IRQHandler+0xd00>)
2405b26a:	4293      	cmp	r3, r2
2405b26c:	d027      	beq.n	2405b2be <HAL_DMA_IRQHandler+0xcd2>
2405b26e:	687b      	ldr	r3, [r7, #4]
2405b270:	681b      	ldr	r3, [r3, #0]
2405b272:	4a1f      	ldr	r2, [pc, #124]	@ (2405b2f0 <HAL_DMA_IRQHandler+0xd04>)
2405b274:	4293      	cmp	r3, r2
2405b276:	d022      	beq.n	2405b2be <HAL_DMA_IRQHandler+0xcd2>
2405b278:	687b      	ldr	r3, [r7, #4]
2405b27a:	681b      	ldr	r3, [r3, #0]
2405b27c:	4a1d      	ldr	r2, [pc, #116]	@ (2405b2f4 <HAL_DMA_IRQHandler+0xd08>)
2405b27e:	4293      	cmp	r3, r2
2405b280:	d01d      	beq.n	2405b2be <HAL_DMA_IRQHandler+0xcd2>
2405b282:	687b      	ldr	r3, [r7, #4]
2405b284:	681b      	ldr	r3, [r3, #0]
2405b286:	4a1c      	ldr	r2, [pc, #112]	@ (2405b2f8 <HAL_DMA_IRQHandler+0xd0c>)
2405b288:	4293      	cmp	r3, r2
2405b28a:	d018      	beq.n	2405b2be <HAL_DMA_IRQHandler+0xcd2>
2405b28c:	687b      	ldr	r3, [r7, #4]
2405b28e:	681b      	ldr	r3, [r3, #0]
2405b290:	4a1a      	ldr	r2, [pc, #104]	@ (2405b2fc <HAL_DMA_IRQHandler+0xd10>)
2405b292:	4293      	cmp	r3, r2
2405b294:	d013      	beq.n	2405b2be <HAL_DMA_IRQHandler+0xcd2>
2405b296:	687b      	ldr	r3, [r7, #4]
2405b298:	681b      	ldr	r3, [r3, #0]
2405b29a:	4a19      	ldr	r2, [pc, #100]	@ (2405b300 <HAL_DMA_IRQHandler+0xd14>)
2405b29c:	4293      	cmp	r3, r2
2405b29e:	d00e      	beq.n	2405b2be <HAL_DMA_IRQHandler+0xcd2>
2405b2a0:	687b      	ldr	r3, [r7, #4]
2405b2a2:	681b      	ldr	r3, [r3, #0]
2405b2a4:	4a17      	ldr	r2, [pc, #92]	@ (2405b304 <HAL_DMA_IRQHandler+0xd18>)
2405b2a6:	4293      	cmp	r3, r2
2405b2a8:	d009      	beq.n	2405b2be <HAL_DMA_IRQHandler+0xcd2>
2405b2aa:	687b      	ldr	r3, [r7, #4]
2405b2ac:	681b      	ldr	r3, [r3, #0]
2405b2ae:	4a16      	ldr	r2, [pc, #88]	@ (2405b308 <HAL_DMA_IRQHandler+0xd1c>)
2405b2b0:	4293      	cmp	r3, r2
2405b2b2:	d004      	beq.n	2405b2be <HAL_DMA_IRQHandler+0xcd2>
2405b2b4:	687b      	ldr	r3, [r7, #4]
2405b2b6:	681b      	ldr	r3, [r3, #0]
2405b2b8:	4a14      	ldr	r2, [pc, #80]	@ (2405b30c <HAL_DMA_IRQHandler+0xd20>)
2405b2ba:	4293      	cmp	r3, r2
2405b2bc:	d128      	bne.n	2405b310 <HAL_DMA_IRQHandler+0xd24>
2405b2be:	687b      	ldr	r3, [r7, #4]
2405b2c0:	681b      	ldr	r3, [r3, #0]
2405b2c2:	681a      	ldr	r2, [r3, #0]
2405b2c4:	687b      	ldr	r3, [r7, #4]
2405b2c6:	681b      	ldr	r3, [r3, #0]
2405b2c8:	f022 0214 	bic.w	r2, r2, #20
2405b2cc:	601a      	str	r2, [r3, #0]
2405b2ce:	e027      	b.n	2405b320 <HAL_DMA_IRQHandler+0xd34>
2405b2d0:	40020010 	.word	0x40020010
2405b2d4:	40020028 	.word	0x40020028
2405b2d8:	40020040 	.word	0x40020040
2405b2dc:	40020058 	.word	0x40020058
2405b2e0:	40020070 	.word	0x40020070
2405b2e4:	40020088 	.word	0x40020088
2405b2e8:	400200a0 	.word	0x400200a0
2405b2ec:	400200b8 	.word	0x400200b8
2405b2f0:	40020410 	.word	0x40020410
2405b2f4:	40020428 	.word	0x40020428
2405b2f8:	40020440 	.word	0x40020440
2405b2fc:	40020458 	.word	0x40020458
2405b300:	40020470 	.word	0x40020470
2405b304:	40020488 	.word	0x40020488
2405b308:	400204a0 	.word	0x400204a0
2405b30c:	400204b8 	.word	0x400204b8
2405b310:	687b      	ldr	r3, [r7, #4]
2405b312:	681b      	ldr	r3, [r3, #0]
2405b314:	681a      	ldr	r2, [r3, #0]
2405b316:	687b      	ldr	r3, [r7, #4]
2405b318:	681b      	ldr	r3, [r3, #0]
2405b31a:	f022 020a 	bic.w	r2, r2, #10
2405b31e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
2405b320:	687b      	ldr	r3, [r7, #4]
2405b322:	2201      	movs	r2, #1
2405b324:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
2405b328:	687b      	ldr	r3, [r7, #4]
2405b32a:	2200      	movs	r2, #0
2405b32c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
2405b330:	687b      	ldr	r3, [r7, #4]
2405b332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2405b334:	2b00      	cmp	r3, #0
2405b336:	f000 8097 	beq.w	2405b468 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
2405b33a:	687b      	ldr	r3, [r7, #4]
2405b33c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2405b33e:	6878      	ldr	r0, [r7, #4]
2405b340:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
2405b342:	e091      	b.n	2405b468 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
2405b344:	687b      	ldr	r3, [r7, #4]
2405b346:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
2405b348:	f003 031f 	and.w	r3, r3, #31
2405b34c:	2208      	movs	r2, #8
2405b34e:	409a      	lsls	r2, r3
2405b350:	697b      	ldr	r3, [r7, #20]
2405b352:	4013      	ands	r3, r2
2405b354:	2b00      	cmp	r3, #0
2405b356:	f000 8088 	beq.w	2405b46a <HAL_DMA_IRQHandler+0xe7e>
2405b35a:	693b      	ldr	r3, [r7, #16]
2405b35c:	f003 0308 	and.w	r3, r3, #8
2405b360:	2b00      	cmp	r3, #0
2405b362:	f000 8082 	beq.w	2405b46a <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
2405b366:	687b      	ldr	r3, [r7, #4]
2405b368:	681b      	ldr	r3, [r3, #0]
2405b36a:	4a41      	ldr	r2, [pc, #260]	@ (2405b470 <HAL_DMA_IRQHandler+0xe84>)
2405b36c:	4293      	cmp	r3, r2
2405b36e:	d04a      	beq.n	2405b406 <HAL_DMA_IRQHandler+0xe1a>
2405b370:	687b      	ldr	r3, [r7, #4]
2405b372:	681b      	ldr	r3, [r3, #0]
2405b374:	4a3f      	ldr	r2, [pc, #252]	@ (2405b474 <HAL_DMA_IRQHandler+0xe88>)
2405b376:	4293      	cmp	r3, r2
2405b378:	d045      	beq.n	2405b406 <HAL_DMA_IRQHandler+0xe1a>
2405b37a:	687b      	ldr	r3, [r7, #4]
2405b37c:	681b      	ldr	r3, [r3, #0]
2405b37e:	4a3e      	ldr	r2, [pc, #248]	@ (2405b478 <HAL_DMA_IRQHandler+0xe8c>)
2405b380:	4293      	cmp	r3, r2
2405b382:	d040      	beq.n	2405b406 <HAL_DMA_IRQHandler+0xe1a>
2405b384:	687b      	ldr	r3, [r7, #4]
2405b386:	681b      	ldr	r3, [r3, #0]
2405b388:	4a3c      	ldr	r2, [pc, #240]	@ (2405b47c <HAL_DMA_IRQHandler+0xe90>)
2405b38a:	4293      	cmp	r3, r2
2405b38c:	d03b      	beq.n	2405b406 <HAL_DMA_IRQHandler+0xe1a>
2405b38e:	687b      	ldr	r3, [r7, #4]
2405b390:	681b      	ldr	r3, [r3, #0]
2405b392:	4a3b      	ldr	r2, [pc, #236]	@ (2405b480 <HAL_DMA_IRQHandler+0xe94>)
2405b394:	4293      	cmp	r3, r2
2405b396:	d036      	beq.n	2405b406 <HAL_DMA_IRQHandler+0xe1a>
2405b398:	687b      	ldr	r3, [r7, #4]
2405b39a:	681b      	ldr	r3, [r3, #0]
2405b39c:	4a39      	ldr	r2, [pc, #228]	@ (2405b484 <HAL_DMA_IRQHandler+0xe98>)
2405b39e:	4293      	cmp	r3, r2
2405b3a0:	d031      	beq.n	2405b406 <HAL_DMA_IRQHandler+0xe1a>
2405b3a2:	687b      	ldr	r3, [r7, #4]
2405b3a4:	681b      	ldr	r3, [r3, #0]
2405b3a6:	4a38      	ldr	r2, [pc, #224]	@ (2405b488 <HAL_DMA_IRQHandler+0xe9c>)
2405b3a8:	4293      	cmp	r3, r2
2405b3aa:	d02c      	beq.n	2405b406 <HAL_DMA_IRQHandler+0xe1a>
2405b3ac:	687b      	ldr	r3, [r7, #4]
2405b3ae:	681b      	ldr	r3, [r3, #0]
2405b3b0:	4a36      	ldr	r2, [pc, #216]	@ (2405b48c <HAL_DMA_IRQHandler+0xea0>)
2405b3b2:	4293      	cmp	r3, r2
2405b3b4:	d027      	beq.n	2405b406 <HAL_DMA_IRQHandler+0xe1a>
2405b3b6:	687b      	ldr	r3, [r7, #4]
2405b3b8:	681b      	ldr	r3, [r3, #0]
2405b3ba:	4a35      	ldr	r2, [pc, #212]	@ (2405b490 <HAL_DMA_IRQHandler+0xea4>)
2405b3bc:	4293      	cmp	r3, r2
2405b3be:	d022      	beq.n	2405b406 <HAL_DMA_IRQHandler+0xe1a>
2405b3c0:	687b      	ldr	r3, [r7, #4]
2405b3c2:	681b      	ldr	r3, [r3, #0]
2405b3c4:	4a33      	ldr	r2, [pc, #204]	@ (2405b494 <HAL_DMA_IRQHandler+0xea8>)
2405b3c6:	4293      	cmp	r3, r2
2405b3c8:	d01d      	beq.n	2405b406 <HAL_DMA_IRQHandler+0xe1a>
2405b3ca:	687b      	ldr	r3, [r7, #4]
2405b3cc:	681b      	ldr	r3, [r3, #0]
2405b3ce:	4a32      	ldr	r2, [pc, #200]	@ (2405b498 <HAL_DMA_IRQHandler+0xeac>)
2405b3d0:	4293      	cmp	r3, r2
2405b3d2:	d018      	beq.n	2405b406 <HAL_DMA_IRQHandler+0xe1a>
2405b3d4:	687b      	ldr	r3, [r7, #4]
2405b3d6:	681b      	ldr	r3, [r3, #0]
2405b3d8:	4a30      	ldr	r2, [pc, #192]	@ (2405b49c <HAL_DMA_IRQHandler+0xeb0>)
2405b3da:	4293      	cmp	r3, r2
2405b3dc:	d013      	beq.n	2405b406 <HAL_DMA_IRQHandler+0xe1a>
2405b3de:	687b      	ldr	r3, [r7, #4]
2405b3e0:	681b      	ldr	r3, [r3, #0]
2405b3e2:	4a2f      	ldr	r2, [pc, #188]	@ (2405b4a0 <HAL_DMA_IRQHandler+0xeb4>)
2405b3e4:	4293      	cmp	r3, r2
2405b3e6:	d00e      	beq.n	2405b406 <HAL_DMA_IRQHandler+0xe1a>
2405b3e8:	687b      	ldr	r3, [r7, #4]
2405b3ea:	681b      	ldr	r3, [r3, #0]
2405b3ec:	4a2d      	ldr	r2, [pc, #180]	@ (2405b4a4 <HAL_DMA_IRQHandler+0xeb8>)
2405b3ee:	4293      	cmp	r3, r2
2405b3f0:	d009      	beq.n	2405b406 <HAL_DMA_IRQHandler+0xe1a>
2405b3f2:	687b      	ldr	r3, [r7, #4]
2405b3f4:	681b      	ldr	r3, [r3, #0]
2405b3f6:	4a2c      	ldr	r2, [pc, #176]	@ (2405b4a8 <HAL_DMA_IRQHandler+0xebc>)
2405b3f8:	4293      	cmp	r3, r2
2405b3fa:	d004      	beq.n	2405b406 <HAL_DMA_IRQHandler+0xe1a>
2405b3fc:	687b      	ldr	r3, [r7, #4]
2405b3fe:	681b      	ldr	r3, [r3, #0]
2405b400:	4a2a      	ldr	r2, [pc, #168]	@ (2405b4ac <HAL_DMA_IRQHandler+0xec0>)
2405b402:	4293      	cmp	r3, r2
2405b404:	d108      	bne.n	2405b418 <HAL_DMA_IRQHandler+0xe2c>
2405b406:	687b      	ldr	r3, [r7, #4]
2405b408:	681b      	ldr	r3, [r3, #0]
2405b40a:	681a      	ldr	r2, [r3, #0]
2405b40c:	687b      	ldr	r3, [r7, #4]
2405b40e:	681b      	ldr	r3, [r3, #0]
2405b410:	f022 021c 	bic.w	r2, r2, #28
2405b414:	601a      	str	r2, [r3, #0]
2405b416:	e007      	b.n	2405b428 <HAL_DMA_IRQHandler+0xe3c>
2405b418:	687b      	ldr	r3, [r7, #4]
2405b41a:	681b      	ldr	r3, [r3, #0]
2405b41c:	681a      	ldr	r2, [r3, #0]
2405b41e:	687b      	ldr	r3, [r7, #4]
2405b420:	681b      	ldr	r3, [r3, #0]
2405b422:	f022 020e 	bic.w	r2, r2, #14
2405b426:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
2405b428:	687b      	ldr	r3, [r7, #4]
2405b42a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
2405b42c:	f003 031f 	and.w	r3, r3, #31
2405b430:	2201      	movs	r2, #1
2405b432:	409a      	lsls	r2, r3
2405b434:	69fb      	ldr	r3, [r7, #28]
2405b436:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
2405b438:	687b      	ldr	r3, [r7, #4]
2405b43a:	2201      	movs	r2, #1
2405b43c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
2405b43e:	687b      	ldr	r3, [r7, #4]
2405b440:	2201      	movs	r2, #1
2405b442:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
2405b446:	687b      	ldr	r3, [r7, #4]
2405b448:	2200      	movs	r2, #0
2405b44a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
2405b44e:	687b      	ldr	r3, [r7, #4]
2405b450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2405b452:	2b00      	cmp	r3, #0
2405b454:	d009      	beq.n	2405b46a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
2405b456:	687b      	ldr	r3, [r7, #4]
2405b458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2405b45a:	6878      	ldr	r0, [r7, #4]
2405b45c:	4798      	blx	r3
2405b45e:	e004      	b.n	2405b46a <HAL_DMA_IRQHandler+0xe7e>
          return;
2405b460:	bf00      	nop
2405b462:	e002      	b.n	2405b46a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
2405b464:	bf00      	nop
2405b466:	e000      	b.n	2405b46a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
2405b468:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
2405b46a:	3728      	adds	r7, #40	@ 0x28
2405b46c:	46bd      	mov	sp, r7
2405b46e:	bd80      	pop	{r7, pc}
2405b470:	40020010 	.word	0x40020010
2405b474:	40020028 	.word	0x40020028
2405b478:	40020040 	.word	0x40020040
2405b47c:	40020058 	.word	0x40020058
2405b480:	40020070 	.word	0x40020070
2405b484:	40020088 	.word	0x40020088
2405b488:	400200a0 	.word	0x400200a0
2405b48c:	400200b8 	.word	0x400200b8
2405b490:	40020410 	.word	0x40020410
2405b494:	40020428 	.word	0x40020428
2405b498:	40020440 	.word	0x40020440
2405b49c:	40020458 	.word	0x40020458
2405b4a0:	40020470 	.word	0x40020470
2405b4a4:	40020488 	.word	0x40020488
2405b4a8:	400204a0 	.word	0x400204a0
2405b4ac:	400204b8 	.word	0x400204b8

2405b4b0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
2405b4b0:	b480      	push	{r7}
2405b4b2:	b083      	sub	sp, #12
2405b4b4:	af00      	add	r7, sp, #0
2405b4b6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
2405b4b8:	687b      	ldr	r3, [r7, #4]
2405b4ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
2405b4bc:	4618      	mov	r0, r3
2405b4be:	370c      	adds	r7, #12
2405b4c0:	46bd      	mov	sp, r7
2405b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
2405b4c6:	4770      	bx	lr

2405b4c8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
2405b4c8:	b480      	push	{r7}
2405b4ca:	b087      	sub	sp, #28
2405b4cc:	af00      	add	r7, sp, #0
2405b4ce:	60f8      	str	r0, [r7, #12]
2405b4d0:	60b9      	str	r1, [r7, #8]
2405b4d2:	607a      	str	r2, [r7, #4]
2405b4d4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
2405b4d6:	68fb      	ldr	r3, [r7, #12]
2405b4d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
2405b4da:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
2405b4dc:	68fb      	ldr	r3, [r7, #12]
2405b4de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
2405b4e0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
2405b4e2:	68fb      	ldr	r3, [r7, #12]
2405b4e4:	681b      	ldr	r3, [r3, #0]
2405b4e6:	4a7f      	ldr	r2, [pc, #508]	@ (2405b6e4 <DMA_SetConfig+0x21c>)
2405b4e8:	4293      	cmp	r3, r2
2405b4ea:	d072      	beq.n	2405b5d2 <DMA_SetConfig+0x10a>
2405b4ec:	68fb      	ldr	r3, [r7, #12]
2405b4ee:	681b      	ldr	r3, [r3, #0]
2405b4f0:	4a7d      	ldr	r2, [pc, #500]	@ (2405b6e8 <DMA_SetConfig+0x220>)
2405b4f2:	4293      	cmp	r3, r2
2405b4f4:	d06d      	beq.n	2405b5d2 <DMA_SetConfig+0x10a>
2405b4f6:	68fb      	ldr	r3, [r7, #12]
2405b4f8:	681b      	ldr	r3, [r3, #0]
2405b4fa:	4a7c      	ldr	r2, [pc, #496]	@ (2405b6ec <DMA_SetConfig+0x224>)
2405b4fc:	4293      	cmp	r3, r2
2405b4fe:	d068      	beq.n	2405b5d2 <DMA_SetConfig+0x10a>
2405b500:	68fb      	ldr	r3, [r7, #12]
2405b502:	681b      	ldr	r3, [r3, #0]
2405b504:	4a7a      	ldr	r2, [pc, #488]	@ (2405b6f0 <DMA_SetConfig+0x228>)
2405b506:	4293      	cmp	r3, r2
2405b508:	d063      	beq.n	2405b5d2 <DMA_SetConfig+0x10a>
2405b50a:	68fb      	ldr	r3, [r7, #12]
2405b50c:	681b      	ldr	r3, [r3, #0]
2405b50e:	4a79      	ldr	r2, [pc, #484]	@ (2405b6f4 <DMA_SetConfig+0x22c>)
2405b510:	4293      	cmp	r3, r2
2405b512:	d05e      	beq.n	2405b5d2 <DMA_SetConfig+0x10a>
2405b514:	68fb      	ldr	r3, [r7, #12]
2405b516:	681b      	ldr	r3, [r3, #0]
2405b518:	4a77      	ldr	r2, [pc, #476]	@ (2405b6f8 <DMA_SetConfig+0x230>)
2405b51a:	4293      	cmp	r3, r2
2405b51c:	d059      	beq.n	2405b5d2 <DMA_SetConfig+0x10a>
2405b51e:	68fb      	ldr	r3, [r7, #12]
2405b520:	681b      	ldr	r3, [r3, #0]
2405b522:	4a76      	ldr	r2, [pc, #472]	@ (2405b6fc <DMA_SetConfig+0x234>)
2405b524:	4293      	cmp	r3, r2
2405b526:	d054      	beq.n	2405b5d2 <DMA_SetConfig+0x10a>
2405b528:	68fb      	ldr	r3, [r7, #12]
2405b52a:	681b      	ldr	r3, [r3, #0]
2405b52c:	4a74      	ldr	r2, [pc, #464]	@ (2405b700 <DMA_SetConfig+0x238>)
2405b52e:	4293      	cmp	r3, r2
2405b530:	d04f      	beq.n	2405b5d2 <DMA_SetConfig+0x10a>
2405b532:	68fb      	ldr	r3, [r7, #12]
2405b534:	681b      	ldr	r3, [r3, #0]
2405b536:	4a73      	ldr	r2, [pc, #460]	@ (2405b704 <DMA_SetConfig+0x23c>)
2405b538:	4293      	cmp	r3, r2
2405b53a:	d04a      	beq.n	2405b5d2 <DMA_SetConfig+0x10a>
2405b53c:	68fb      	ldr	r3, [r7, #12]
2405b53e:	681b      	ldr	r3, [r3, #0]
2405b540:	4a71      	ldr	r2, [pc, #452]	@ (2405b708 <DMA_SetConfig+0x240>)
2405b542:	4293      	cmp	r3, r2
2405b544:	d045      	beq.n	2405b5d2 <DMA_SetConfig+0x10a>
2405b546:	68fb      	ldr	r3, [r7, #12]
2405b548:	681b      	ldr	r3, [r3, #0]
2405b54a:	4a70      	ldr	r2, [pc, #448]	@ (2405b70c <DMA_SetConfig+0x244>)
2405b54c:	4293      	cmp	r3, r2
2405b54e:	d040      	beq.n	2405b5d2 <DMA_SetConfig+0x10a>
2405b550:	68fb      	ldr	r3, [r7, #12]
2405b552:	681b      	ldr	r3, [r3, #0]
2405b554:	4a6e      	ldr	r2, [pc, #440]	@ (2405b710 <DMA_SetConfig+0x248>)
2405b556:	4293      	cmp	r3, r2
2405b558:	d03b      	beq.n	2405b5d2 <DMA_SetConfig+0x10a>
2405b55a:	68fb      	ldr	r3, [r7, #12]
2405b55c:	681b      	ldr	r3, [r3, #0]
2405b55e:	4a6d      	ldr	r2, [pc, #436]	@ (2405b714 <DMA_SetConfig+0x24c>)
2405b560:	4293      	cmp	r3, r2
2405b562:	d036      	beq.n	2405b5d2 <DMA_SetConfig+0x10a>
2405b564:	68fb      	ldr	r3, [r7, #12]
2405b566:	681b      	ldr	r3, [r3, #0]
2405b568:	4a6b      	ldr	r2, [pc, #428]	@ (2405b718 <DMA_SetConfig+0x250>)
2405b56a:	4293      	cmp	r3, r2
2405b56c:	d031      	beq.n	2405b5d2 <DMA_SetConfig+0x10a>
2405b56e:	68fb      	ldr	r3, [r7, #12]
2405b570:	681b      	ldr	r3, [r3, #0]
2405b572:	4a6a      	ldr	r2, [pc, #424]	@ (2405b71c <DMA_SetConfig+0x254>)
2405b574:	4293      	cmp	r3, r2
2405b576:	d02c      	beq.n	2405b5d2 <DMA_SetConfig+0x10a>
2405b578:	68fb      	ldr	r3, [r7, #12]
2405b57a:	681b      	ldr	r3, [r3, #0]
2405b57c:	4a68      	ldr	r2, [pc, #416]	@ (2405b720 <DMA_SetConfig+0x258>)
2405b57e:	4293      	cmp	r3, r2
2405b580:	d027      	beq.n	2405b5d2 <DMA_SetConfig+0x10a>
2405b582:	68fb      	ldr	r3, [r7, #12]
2405b584:	681b      	ldr	r3, [r3, #0]
2405b586:	4a67      	ldr	r2, [pc, #412]	@ (2405b724 <DMA_SetConfig+0x25c>)
2405b588:	4293      	cmp	r3, r2
2405b58a:	d022      	beq.n	2405b5d2 <DMA_SetConfig+0x10a>
2405b58c:	68fb      	ldr	r3, [r7, #12]
2405b58e:	681b      	ldr	r3, [r3, #0]
2405b590:	4a65      	ldr	r2, [pc, #404]	@ (2405b728 <DMA_SetConfig+0x260>)
2405b592:	4293      	cmp	r3, r2
2405b594:	d01d      	beq.n	2405b5d2 <DMA_SetConfig+0x10a>
2405b596:	68fb      	ldr	r3, [r7, #12]
2405b598:	681b      	ldr	r3, [r3, #0]
2405b59a:	4a64      	ldr	r2, [pc, #400]	@ (2405b72c <DMA_SetConfig+0x264>)
2405b59c:	4293      	cmp	r3, r2
2405b59e:	d018      	beq.n	2405b5d2 <DMA_SetConfig+0x10a>
2405b5a0:	68fb      	ldr	r3, [r7, #12]
2405b5a2:	681b      	ldr	r3, [r3, #0]
2405b5a4:	4a62      	ldr	r2, [pc, #392]	@ (2405b730 <DMA_SetConfig+0x268>)
2405b5a6:	4293      	cmp	r3, r2
2405b5a8:	d013      	beq.n	2405b5d2 <DMA_SetConfig+0x10a>
2405b5aa:	68fb      	ldr	r3, [r7, #12]
2405b5ac:	681b      	ldr	r3, [r3, #0]
2405b5ae:	4a61      	ldr	r2, [pc, #388]	@ (2405b734 <DMA_SetConfig+0x26c>)
2405b5b0:	4293      	cmp	r3, r2
2405b5b2:	d00e      	beq.n	2405b5d2 <DMA_SetConfig+0x10a>
2405b5b4:	68fb      	ldr	r3, [r7, #12]
2405b5b6:	681b      	ldr	r3, [r3, #0]
2405b5b8:	4a5f      	ldr	r2, [pc, #380]	@ (2405b738 <DMA_SetConfig+0x270>)
2405b5ba:	4293      	cmp	r3, r2
2405b5bc:	d009      	beq.n	2405b5d2 <DMA_SetConfig+0x10a>
2405b5be:	68fb      	ldr	r3, [r7, #12]
2405b5c0:	681b      	ldr	r3, [r3, #0]
2405b5c2:	4a5e      	ldr	r2, [pc, #376]	@ (2405b73c <DMA_SetConfig+0x274>)
2405b5c4:	4293      	cmp	r3, r2
2405b5c6:	d004      	beq.n	2405b5d2 <DMA_SetConfig+0x10a>
2405b5c8:	68fb      	ldr	r3, [r7, #12]
2405b5ca:	681b      	ldr	r3, [r3, #0]
2405b5cc:	4a5c      	ldr	r2, [pc, #368]	@ (2405b740 <DMA_SetConfig+0x278>)
2405b5ce:	4293      	cmp	r3, r2
2405b5d0:	d101      	bne.n	2405b5d6 <DMA_SetConfig+0x10e>
2405b5d2:	2301      	movs	r3, #1
2405b5d4:	e000      	b.n	2405b5d8 <DMA_SetConfig+0x110>
2405b5d6:	2300      	movs	r3, #0
2405b5d8:	2b00      	cmp	r3, #0
2405b5da:	d00d      	beq.n	2405b5f8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
2405b5dc:	68fb      	ldr	r3, [r7, #12]
2405b5de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
2405b5e0:	68fa      	ldr	r2, [r7, #12]
2405b5e2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
2405b5e4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
2405b5e6:	68fb      	ldr	r3, [r7, #12]
2405b5e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
2405b5ea:	2b00      	cmp	r3, #0
2405b5ec:	d004      	beq.n	2405b5f8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
2405b5ee:	68fb      	ldr	r3, [r7, #12]
2405b5f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2405b5f2:	68fa      	ldr	r2, [r7, #12]
2405b5f4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
2405b5f6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
2405b5f8:	68fb      	ldr	r3, [r7, #12]
2405b5fa:	681b      	ldr	r3, [r3, #0]
2405b5fc:	4a39      	ldr	r2, [pc, #228]	@ (2405b6e4 <DMA_SetConfig+0x21c>)
2405b5fe:	4293      	cmp	r3, r2
2405b600:	d04a      	beq.n	2405b698 <DMA_SetConfig+0x1d0>
2405b602:	68fb      	ldr	r3, [r7, #12]
2405b604:	681b      	ldr	r3, [r3, #0]
2405b606:	4a38      	ldr	r2, [pc, #224]	@ (2405b6e8 <DMA_SetConfig+0x220>)
2405b608:	4293      	cmp	r3, r2
2405b60a:	d045      	beq.n	2405b698 <DMA_SetConfig+0x1d0>
2405b60c:	68fb      	ldr	r3, [r7, #12]
2405b60e:	681b      	ldr	r3, [r3, #0]
2405b610:	4a36      	ldr	r2, [pc, #216]	@ (2405b6ec <DMA_SetConfig+0x224>)
2405b612:	4293      	cmp	r3, r2
2405b614:	d040      	beq.n	2405b698 <DMA_SetConfig+0x1d0>
2405b616:	68fb      	ldr	r3, [r7, #12]
2405b618:	681b      	ldr	r3, [r3, #0]
2405b61a:	4a35      	ldr	r2, [pc, #212]	@ (2405b6f0 <DMA_SetConfig+0x228>)
2405b61c:	4293      	cmp	r3, r2
2405b61e:	d03b      	beq.n	2405b698 <DMA_SetConfig+0x1d0>
2405b620:	68fb      	ldr	r3, [r7, #12]
2405b622:	681b      	ldr	r3, [r3, #0]
2405b624:	4a33      	ldr	r2, [pc, #204]	@ (2405b6f4 <DMA_SetConfig+0x22c>)
2405b626:	4293      	cmp	r3, r2
2405b628:	d036      	beq.n	2405b698 <DMA_SetConfig+0x1d0>
2405b62a:	68fb      	ldr	r3, [r7, #12]
2405b62c:	681b      	ldr	r3, [r3, #0]
2405b62e:	4a32      	ldr	r2, [pc, #200]	@ (2405b6f8 <DMA_SetConfig+0x230>)
2405b630:	4293      	cmp	r3, r2
2405b632:	d031      	beq.n	2405b698 <DMA_SetConfig+0x1d0>
2405b634:	68fb      	ldr	r3, [r7, #12]
2405b636:	681b      	ldr	r3, [r3, #0]
2405b638:	4a30      	ldr	r2, [pc, #192]	@ (2405b6fc <DMA_SetConfig+0x234>)
2405b63a:	4293      	cmp	r3, r2
2405b63c:	d02c      	beq.n	2405b698 <DMA_SetConfig+0x1d0>
2405b63e:	68fb      	ldr	r3, [r7, #12]
2405b640:	681b      	ldr	r3, [r3, #0]
2405b642:	4a2f      	ldr	r2, [pc, #188]	@ (2405b700 <DMA_SetConfig+0x238>)
2405b644:	4293      	cmp	r3, r2
2405b646:	d027      	beq.n	2405b698 <DMA_SetConfig+0x1d0>
2405b648:	68fb      	ldr	r3, [r7, #12]
2405b64a:	681b      	ldr	r3, [r3, #0]
2405b64c:	4a2d      	ldr	r2, [pc, #180]	@ (2405b704 <DMA_SetConfig+0x23c>)
2405b64e:	4293      	cmp	r3, r2
2405b650:	d022      	beq.n	2405b698 <DMA_SetConfig+0x1d0>
2405b652:	68fb      	ldr	r3, [r7, #12]
2405b654:	681b      	ldr	r3, [r3, #0]
2405b656:	4a2c      	ldr	r2, [pc, #176]	@ (2405b708 <DMA_SetConfig+0x240>)
2405b658:	4293      	cmp	r3, r2
2405b65a:	d01d      	beq.n	2405b698 <DMA_SetConfig+0x1d0>
2405b65c:	68fb      	ldr	r3, [r7, #12]
2405b65e:	681b      	ldr	r3, [r3, #0]
2405b660:	4a2a      	ldr	r2, [pc, #168]	@ (2405b70c <DMA_SetConfig+0x244>)
2405b662:	4293      	cmp	r3, r2
2405b664:	d018      	beq.n	2405b698 <DMA_SetConfig+0x1d0>
2405b666:	68fb      	ldr	r3, [r7, #12]
2405b668:	681b      	ldr	r3, [r3, #0]
2405b66a:	4a29      	ldr	r2, [pc, #164]	@ (2405b710 <DMA_SetConfig+0x248>)
2405b66c:	4293      	cmp	r3, r2
2405b66e:	d013      	beq.n	2405b698 <DMA_SetConfig+0x1d0>
2405b670:	68fb      	ldr	r3, [r7, #12]
2405b672:	681b      	ldr	r3, [r3, #0]
2405b674:	4a27      	ldr	r2, [pc, #156]	@ (2405b714 <DMA_SetConfig+0x24c>)
2405b676:	4293      	cmp	r3, r2
2405b678:	d00e      	beq.n	2405b698 <DMA_SetConfig+0x1d0>
2405b67a:	68fb      	ldr	r3, [r7, #12]
2405b67c:	681b      	ldr	r3, [r3, #0]
2405b67e:	4a26      	ldr	r2, [pc, #152]	@ (2405b718 <DMA_SetConfig+0x250>)
2405b680:	4293      	cmp	r3, r2
2405b682:	d009      	beq.n	2405b698 <DMA_SetConfig+0x1d0>
2405b684:	68fb      	ldr	r3, [r7, #12]
2405b686:	681b      	ldr	r3, [r3, #0]
2405b688:	4a24      	ldr	r2, [pc, #144]	@ (2405b71c <DMA_SetConfig+0x254>)
2405b68a:	4293      	cmp	r3, r2
2405b68c:	d004      	beq.n	2405b698 <DMA_SetConfig+0x1d0>
2405b68e:	68fb      	ldr	r3, [r7, #12]
2405b690:	681b      	ldr	r3, [r3, #0]
2405b692:	4a23      	ldr	r2, [pc, #140]	@ (2405b720 <DMA_SetConfig+0x258>)
2405b694:	4293      	cmp	r3, r2
2405b696:	d101      	bne.n	2405b69c <DMA_SetConfig+0x1d4>
2405b698:	2301      	movs	r3, #1
2405b69a:	e000      	b.n	2405b69e <DMA_SetConfig+0x1d6>
2405b69c:	2300      	movs	r3, #0
2405b69e:	2b00      	cmp	r3, #0
2405b6a0:	d059      	beq.n	2405b756 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
2405b6a2:	68fb      	ldr	r3, [r7, #12]
2405b6a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
2405b6a6:	f003 031f 	and.w	r3, r3, #31
2405b6aa:	223f      	movs	r2, #63	@ 0x3f
2405b6ac:	409a      	lsls	r2, r3
2405b6ae:	697b      	ldr	r3, [r7, #20]
2405b6b0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
2405b6b2:	68fb      	ldr	r3, [r7, #12]
2405b6b4:	681b      	ldr	r3, [r3, #0]
2405b6b6:	681a      	ldr	r2, [r3, #0]
2405b6b8:	68fb      	ldr	r3, [r7, #12]
2405b6ba:	681b      	ldr	r3, [r3, #0]
2405b6bc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
2405b6c0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
2405b6c2:	68fb      	ldr	r3, [r7, #12]
2405b6c4:	681b      	ldr	r3, [r3, #0]
2405b6c6:	683a      	ldr	r2, [r7, #0]
2405b6c8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
2405b6ca:	68fb      	ldr	r3, [r7, #12]
2405b6cc:	689b      	ldr	r3, [r3, #8]
2405b6ce:	2b40      	cmp	r3, #64	@ 0x40
2405b6d0:	d138      	bne.n	2405b744 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
2405b6d2:	68fb      	ldr	r3, [r7, #12]
2405b6d4:	681b      	ldr	r3, [r3, #0]
2405b6d6:	687a      	ldr	r2, [r7, #4]
2405b6d8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
2405b6da:	68fb      	ldr	r3, [r7, #12]
2405b6dc:	681b      	ldr	r3, [r3, #0]
2405b6de:	68ba      	ldr	r2, [r7, #8]
2405b6e0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
2405b6e2:	e0ae      	b.n	2405b842 <DMA_SetConfig+0x37a>
2405b6e4:	40020010 	.word	0x40020010
2405b6e8:	40020028 	.word	0x40020028
2405b6ec:	40020040 	.word	0x40020040
2405b6f0:	40020058 	.word	0x40020058
2405b6f4:	40020070 	.word	0x40020070
2405b6f8:	40020088 	.word	0x40020088
2405b6fc:	400200a0 	.word	0x400200a0
2405b700:	400200b8 	.word	0x400200b8
2405b704:	40020410 	.word	0x40020410
2405b708:	40020428 	.word	0x40020428
2405b70c:	40020440 	.word	0x40020440
2405b710:	40020458 	.word	0x40020458
2405b714:	40020470 	.word	0x40020470
2405b718:	40020488 	.word	0x40020488
2405b71c:	400204a0 	.word	0x400204a0
2405b720:	400204b8 	.word	0x400204b8
2405b724:	58025408 	.word	0x58025408
2405b728:	5802541c 	.word	0x5802541c
2405b72c:	58025430 	.word	0x58025430
2405b730:	58025444 	.word	0x58025444
2405b734:	58025458 	.word	0x58025458
2405b738:	5802546c 	.word	0x5802546c
2405b73c:	58025480 	.word	0x58025480
2405b740:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
2405b744:	68fb      	ldr	r3, [r7, #12]
2405b746:	681b      	ldr	r3, [r3, #0]
2405b748:	68ba      	ldr	r2, [r7, #8]
2405b74a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
2405b74c:	68fb      	ldr	r3, [r7, #12]
2405b74e:	681b      	ldr	r3, [r3, #0]
2405b750:	687a      	ldr	r2, [r7, #4]
2405b752:	60da      	str	r2, [r3, #12]
}
2405b754:	e075      	b.n	2405b842 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
2405b756:	68fb      	ldr	r3, [r7, #12]
2405b758:	681b      	ldr	r3, [r3, #0]
2405b75a:	4a3d      	ldr	r2, [pc, #244]	@ (2405b850 <DMA_SetConfig+0x388>)
2405b75c:	4293      	cmp	r3, r2
2405b75e:	d04a      	beq.n	2405b7f6 <DMA_SetConfig+0x32e>
2405b760:	68fb      	ldr	r3, [r7, #12]
2405b762:	681b      	ldr	r3, [r3, #0]
2405b764:	4a3b      	ldr	r2, [pc, #236]	@ (2405b854 <DMA_SetConfig+0x38c>)
2405b766:	4293      	cmp	r3, r2
2405b768:	d045      	beq.n	2405b7f6 <DMA_SetConfig+0x32e>
2405b76a:	68fb      	ldr	r3, [r7, #12]
2405b76c:	681b      	ldr	r3, [r3, #0]
2405b76e:	4a3a      	ldr	r2, [pc, #232]	@ (2405b858 <DMA_SetConfig+0x390>)
2405b770:	4293      	cmp	r3, r2
2405b772:	d040      	beq.n	2405b7f6 <DMA_SetConfig+0x32e>
2405b774:	68fb      	ldr	r3, [r7, #12]
2405b776:	681b      	ldr	r3, [r3, #0]
2405b778:	4a38      	ldr	r2, [pc, #224]	@ (2405b85c <DMA_SetConfig+0x394>)
2405b77a:	4293      	cmp	r3, r2
2405b77c:	d03b      	beq.n	2405b7f6 <DMA_SetConfig+0x32e>
2405b77e:	68fb      	ldr	r3, [r7, #12]
2405b780:	681b      	ldr	r3, [r3, #0]
2405b782:	4a37      	ldr	r2, [pc, #220]	@ (2405b860 <DMA_SetConfig+0x398>)
2405b784:	4293      	cmp	r3, r2
2405b786:	d036      	beq.n	2405b7f6 <DMA_SetConfig+0x32e>
2405b788:	68fb      	ldr	r3, [r7, #12]
2405b78a:	681b      	ldr	r3, [r3, #0]
2405b78c:	4a35      	ldr	r2, [pc, #212]	@ (2405b864 <DMA_SetConfig+0x39c>)
2405b78e:	4293      	cmp	r3, r2
2405b790:	d031      	beq.n	2405b7f6 <DMA_SetConfig+0x32e>
2405b792:	68fb      	ldr	r3, [r7, #12]
2405b794:	681b      	ldr	r3, [r3, #0]
2405b796:	4a34      	ldr	r2, [pc, #208]	@ (2405b868 <DMA_SetConfig+0x3a0>)
2405b798:	4293      	cmp	r3, r2
2405b79a:	d02c      	beq.n	2405b7f6 <DMA_SetConfig+0x32e>
2405b79c:	68fb      	ldr	r3, [r7, #12]
2405b79e:	681b      	ldr	r3, [r3, #0]
2405b7a0:	4a32      	ldr	r2, [pc, #200]	@ (2405b86c <DMA_SetConfig+0x3a4>)
2405b7a2:	4293      	cmp	r3, r2
2405b7a4:	d027      	beq.n	2405b7f6 <DMA_SetConfig+0x32e>
2405b7a6:	68fb      	ldr	r3, [r7, #12]
2405b7a8:	681b      	ldr	r3, [r3, #0]
2405b7aa:	4a31      	ldr	r2, [pc, #196]	@ (2405b870 <DMA_SetConfig+0x3a8>)
2405b7ac:	4293      	cmp	r3, r2
2405b7ae:	d022      	beq.n	2405b7f6 <DMA_SetConfig+0x32e>
2405b7b0:	68fb      	ldr	r3, [r7, #12]
2405b7b2:	681b      	ldr	r3, [r3, #0]
2405b7b4:	4a2f      	ldr	r2, [pc, #188]	@ (2405b874 <DMA_SetConfig+0x3ac>)
2405b7b6:	4293      	cmp	r3, r2
2405b7b8:	d01d      	beq.n	2405b7f6 <DMA_SetConfig+0x32e>
2405b7ba:	68fb      	ldr	r3, [r7, #12]
2405b7bc:	681b      	ldr	r3, [r3, #0]
2405b7be:	4a2e      	ldr	r2, [pc, #184]	@ (2405b878 <DMA_SetConfig+0x3b0>)
2405b7c0:	4293      	cmp	r3, r2
2405b7c2:	d018      	beq.n	2405b7f6 <DMA_SetConfig+0x32e>
2405b7c4:	68fb      	ldr	r3, [r7, #12]
2405b7c6:	681b      	ldr	r3, [r3, #0]
2405b7c8:	4a2c      	ldr	r2, [pc, #176]	@ (2405b87c <DMA_SetConfig+0x3b4>)
2405b7ca:	4293      	cmp	r3, r2
2405b7cc:	d013      	beq.n	2405b7f6 <DMA_SetConfig+0x32e>
2405b7ce:	68fb      	ldr	r3, [r7, #12]
2405b7d0:	681b      	ldr	r3, [r3, #0]
2405b7d2:	4a2b      	ldr	r2, [pc, #172]	@ (2405b880 <DMA_SetConfig+0x3b8>)
2405b7d4:	4293      	cmp	r3, r2
2405b7d6:	d00e      	beq.n	2405b7f6 <DMA_SetConfig+0x32e>
2405b7d8:	68fb      	ldr	r3, [r7, #12]
2405b7da:	681b      	ldr	r3, [r3, #0]
2405b7dc:	4a29      	ldr	r2, [pc, #164]	@ (2405b884 <DMA_SetConfig+0x3bc>)
2405b7de:	4293      	cmp	r3, r2
2405b7e0:	d009      	beq.n	2405b7f6 <DMA_SetConfig+0x32e>
2405b7e2:	68fb      	ldr	r3, [r7, #12]
2405b7e4:	681b      	ldr	r3, [r3, #0]
2405b7e6:	4a28      	ldr	r2, [pc, #160]	@ (2405b888 <DMA_SetConfig+0x3c0>)
2405b7e8:	4293      	cmp	r3, r2
2405b7ea:	d004      	beq.n	2405b7f6 <DMA_SetConfig+0x32e>
2405b7ec:	68fb      	ldr	r3, [r7, #12]
2405b7ee:	681b      	ldr	r3, [r3, #0]
2405b7f0:	4a26      	ldr	r2, [pc, #152]	@ (2405b88c <DMA_SetConfig+0x3c4>)
2405b7f2:	4293      	cmp	r3, r2
2405b7f4:	d101      	bne.n	2405b7fa <DMA_SetConfig+0x332>
2405b7f6:	2301      	movs	r3, #1
2405b7f8:	e000      	b.n	2405b7fc <DMA_SetConfig+0x334>
2405b7fa:	2300      	movs	r3, #0
2405b7fc:	2b00      	cmp	r3, #0
2405b7fe:	d020      	beq.n	2405b842 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
2405b800:	68fb      	ldr	r3, [r7, #12]
2405b802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
2405b804:	f003 031f 	and.w	r3, r3, #31
2405b808:	2201      	movs	r2, #1
2405b80a:	409a      	lsls	r2, r3
2405b80c:	693b      	ldr	r3, [r7, #16]
2405b80e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
2405b810:	68fb      	ldr	r3, [r7, #12]
2405b812:	681b      	ldr	r3, [r3, #0]
2405b814:	683a      	ldr	r2, [r7, #0]
2405b816:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
2405b818:	68fb      	ldr	r3, [r7, #12]
2405b81a:	689b      	ldr	r3, [r3, #8]
2405b81c:	2b40      	cmp	r3, #64	@ 0x40
2405b81e:	d108      	bne.n	2405b832 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
2405b820:	68fb      	ldr	r3, [r7, #12]
2405b822:	681b      	ldr	r3, [r3, #0]
2405b824:	687a      	ldr	r2, [r7, #4]
2405b826:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
2405b828:	68fb      	ldr	r3, [r7, #12]
2405b82a:	681b      	ldr	r3, [r3, #0]
2405b82c:	68ba      	ldr	r2, [r7, #8]
2405b82e:	60da      	str	r2, [r3, #12]
}
2405b830:	e007      	b.n	2405b842 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
2405b832:	68fb      	ldr	r3, [r7, #12]
2405b834:	681b      	ldr	r3, [r3, #0]
2405b836:	68ba      	ldr	r2, [r7, #8]
2405b838:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
2405b83a:	68fb      	ldr	r3, [r7, #12]
2405b83c:	681b      	ldr	r3, [r3, #0]
2405b83e:	687a      	ldr	r2, [r7, #4]
2405b840:	60da      	str	r2, [r3, #12]
}
2405b842:	bf00      	nop
2405b844:	371c      	adds	r7, #28
2405b846:	46bd      	mov	sp, r7
2405b848:	f85d 7b04 	ldr.w	r7, [sp], #4
2405b84c:	4770      	bx	lr
2405b84e:	bf00      	nop
2405b850:	48022c08 	.word	0x48022c08
2405b854:	48022c1c 	.word	0x48022c1c
2405b858:	48022c30 	.word	0x48022c30
2405b85c:	48022c44 	.word	0x48022c44
2405b860:	48022c58 	.word	0x48022c58
2405b864:	48022c6c 	.word	0x48022c6c
2405b868:	48022c80 	.word	0x48022c80
2405b86c:	48022c94 	.word	0x48022c94
2405b870:	58025408 	.word	0x58025408
2405b874:	5802541c 	.word	0x5802541c
2405b878:	58025430 	.word	0x58025430
2405b87c:	58025444 	.word	0x58025444
2405b880:	58025458 	.word	0x58025458
2405b884:	5802546c 	.word	0x5802546c
2405b888:	58025480 	.word	0x58025480
2405b88c:	58025494 	.word	0x58025494

2405b890 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
2405b890:	b480      	push	{r7}
2405b892:	b085      	sub	sp, #20
2405b894:	af00      	add	r7, sp, #0
2405b896:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
2405b898:	687b      	ldr	r3, [r7, #4]
2405b89a:	681b      	ldr	r3, [r3, #0]
2405b89c:	4a42      	ldr	r2, [pc, #264]	@ (2405b9a8 <DMA_CalcBaseAndBitshift+0x118>)
2405b89e:	4293      	cmp	r3, r2
2405b8a0:	d04a      	beq.n	2405b938 <DMA_CalcBaseAndBitshift+0xa8>
2405b8a2:	687b      	ldr	r3, [r7, #4]
2405b8a4:	681b      	ldr	r3, [r3, #0]
2405b8a6:	4a41      	ldr	r2, [pc, #260]	@ (2405b9ac <DMA_CalcBaseAndBitshift+0x11c>)
2405b8a8:	4293      	cmp	r3, r2
2405b8aa:	d045      	beq.n	2405b938 <DMA_CalcBaseAndBitshift+0xa8>
2405b8ac:	687b      	ldr	r3, [r7, #4]
2405b8ae:	681b      	ldr	r3, [r3, #0]
2405b8b0:	4a3f      	ldr	r2, [pc, #252]	@ (2405b9b0 <DMA_CalcBaseAndBitshift+0x120>)
2405b8b2:	4293      	cmp	r3, r2
2405b8b4:	d040      	beq.n	2405b938 <DMA_CalcBaseAndBitshift+0xa8>
2405b8b6:	687b      	ldr	r3, [r7, #4]
2405b8b8:	681b      	ldr	r3, [r3, #0]
2405b8ba:	4a3e      	ldr	r2, [pc, #248]	@ (2405b9b4 <DMA_CalcBaseAndBitshift+0x124>)
2405b8bc:	4293      	cmp	r3, r2
2405b8be:	d03b      	beq.n	2405b938 <DMA_CalcBaseAndBitshift+0xa8>
2405b8c0:	687b      	ldr	r3, [r7, #4]
2405b8c2:	681b      	ldr	r3, [r3, #0]
2405b8c4:	4a3c      	ldr	r2, [pc, #240]	@ (2405b9b8 <DMA_CalcBaseAndBitshift+0x128>)
2405b8c6:	4293      	cmp	r3, r2
2405b8c8:	d036      	beq.n	2405b938 <DMA_CalcBaseAndBitshift+0xa8>
2405b8ca:	687b      	ldr	r3, [r7, #4]
2405b8cc:	681b      	ldr	r3, [r3, #0]
2405b8ce:	4a3b      	ldr	r2, [pc, #236]	@ (2405b9bc <DMA_CalcBaseAndBitshift+0x12c>)
2405b8d0:	4293      	cmp	r3, r2
2405b8d2:	d031      	beq.n	2405b938 <DMA_CalcBaseAndBitshift+0xa8>
2405b8d4:	687b      	ldr	r3, [r7, #4]
2405b8d6:	681b      	ldr	r3, [r3, #0]
2405b8d8:	4a39      	ldr	r2, [pc, #228]	@ (2405b9c0 <DMA_CalcBaseAndBitshift+0x130>)
2405b8da:	4293      	cmp	r3, r2
2405b8dc:	d02c      	beq.n	2405b938 <DMA_CalcBaseAndBitshift+0xa8>
2405b8de:	687b      	ldr	r3, [r7, #4]
2405b8e0:	681b      	ldr	r3, [r3, #0]
2405b8e2:	4a38      	ldr	r2, [pc, #224]	@ (2405b9c4 <DMA_CalcBaseAndBitshift+0x134>)
2405b8e4:	4293      	cmp	r3, r2
2405b8e6:	d027      	beq.n	2405b938 <DMA_CalcBaseAndBitshift+0xa8>
2405b8e8:	687b      	ldr	r3, [r7, #4]
2405b8ea:	681b      	ldr	r3, [r3, #0]
2405b8ec:	4a36      	ldr	r2, [pc, #216]	@ (2405b9c8 <DMA_CalcBaseAndBitshift+0x138>)
2405b8ee:	4293      	cmp	r3, r2
2405b8f0:	d022      	beq.n	2405b938 <DMA_CalcBaseAndBitshift+0xa8>
2405b8f2:	687b      	ldr	r3, [r7, #4]
2405b8f4:	681b      	ldr	r3, [r3, #0]
2405b8f6:	4a35      	ldr	r2, [pc, #212]	@ (2405b9cc <DMA_CalcBaseAndBitshift+0x13c>)
2405b8f8:	4293      	cmp	r3, r2
2405b8fa:	d01d      	beq.n	2405b938 <DMA_CalcBaseAndBitshift+0xa8>
2405b8fc:	687b      	ldr	r3, [r7, #4]
2405b8fe:	681b      	ldr	r3, [r3, #0]
2405b900:	4a33      	ldr	r2, [pc, #204]	@ (2405b9d0 <DMA_CalcBaseAndBitshift+0x140>)
2405b902:	4293      	cmp	r3, r2
2405b904:	d018      	beq.n	2405b938 <DMA_CalcBaseAndBitshift+0xa8>
2405b906:	687b      	ldr	r3, [r7, #4]
2405b908:	681b      	ldr	r3, [r3, #0]
2405b90a:	4a32      	ldr	r2, [pc, #200]	@ (2405b9d4 <DMA_CalcBaseAndBitshift+0x144>)
2405b90c:	4293      	cmp	r3, r2
2405b90e:	d013      	beq.n	2405b938 <DMA_CalcBaseAndBitshift+0xa8>
2405b910:	687b      	ldr	r3, [r7, #4]
2405b912:	681b      	ldr	r3, [r3, #0]
2405b914:	4a30      	ldr	r2, [pc, #192]	@ (2405b9d8 <DMA_CalcBaseAndBitshift+0x148>)
2405b916:	4293      	cmp	r3, r2
2405b918:	d00e      	beq.n	2405b938 <DMA_CalcBaseAndBitshift+0xa8>
2405b91a:	687b      	ldr	r3, [r7, #4]
2405b91c:	681b      	ldr	r3, [r3, #0]
2405b91e:	4a2f      	ldr	r2, [pc, #188]	@ (2405b9dc <DMA_CalcBaseAndBitshift+0x14c>)
2405b920:	4293      	cmp	r3, r2
2405b922:	d009      	beq.n	2405b938 <DMA_CalcBaseAndBitshift+0xa8>
2405b924:	687b      	ldr	r3, [r7, #4]
2405b926:	681b      	ldr	r3, [r3, #0]
2405b928:	4a2d      	ldr	r2, [pc, #180]	@ (2405b9e0 <DMA_CalcBaseAndBitshift+0x150>)
2405b92a:	4293      	cmp	r3, r2
2405b92c:	d004      	beq.n	2405b938 <DMA_CalcBaseAndBitshift+0xa8>
2405b92e:	687b      	ldr	r3, [r7, #4]
2405b930:	681b      	ldr	r3, [r3, #0]
2405b932:	4a2c      	ldr	r2, [pc, #176]	@ (2405b9e4 <DMA_CalcBaseAndBitshift+0x154>)
2405b934:	4293      	cmp	r3, r2
2405b936:	d101      	bne.n	2405b93c <DMA_CalcBaseAndBitshift+0xac>
2405b938:	2301      	movs	r3, #1
2405b93a:	e000      	b.n	2405b93e <DMA_CalcBaseAndBitshift+0xae>
2405b93c:	2300      	movs	r3, #0
2405b93e:	2b00      	cmp	r3, #0
2405b940:	d024      	beq.n	2405b98c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
2405b942:	687b      	ldr	r3, [r7, #4]
2405b944:	681b      	ldr	r3, [r3, #0]
2405b946:	b2db      	uxtb	r3, r3
2405b948:	3b10      	subs	r3, #16
2405b94a:	4a27      	ldr	r2, [pc, #156]	@ (2405b9e8 <DMA_CalcBaseAndBitshift+0x158>)
2405b94c:	fba2 2303 	umull	r2, r3, r2, r3
2405b950:	091b      	lsrs	r3, r3, #4
2405b952:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
2405b954:	68fb      	ldr	r3, [r7, #12]
2405b956:	f003 0307 	and.w	r3, r3, #7
2405b95a:	4a24      	ldr	r2, [pc, #144]	@ (2405b9ec <DMA_CalcBaseAndBitshift+0x15c>)
2405b95c:	5cd3      	ldrb	r3, [r2, r3]
2405b95e:	461a      	mov	r2, r3
2405b960:	687b      	ldr	r3, [r7, #4]
2405b962:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
2405b964:	68fb      	ldr	r3, [r7, #12]
2405b966:	2b03      	cmp	r3, #3
2405b968:	d908      	bls.n	2405b97c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
2405b96a:	687b      	ldr	r3, [r7, #4]
2405b96c:	681b      	ldr	r3, [r3, #0]
2405b96e:	461a      	mov	r2, r3
2405b970:	4b1f      	ldr	r3, [pc, #124]	@ (2405b9f0 <DMA_CalcBaseAndBitshift+0x160>)
2405b972:	4013      	ands	r3, r2
2405b974:	1d1a      	adds	r2, r3, #4
2405b976:	687b      	ldr	r3, [r7, #4]
2405b978:	659a      	str	r2, [r3, #88]	@ 0x58
2405b97a:	e00d      	b.n	2405b998 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
2405b97c:	687b      	ldr	r3, [r7, #4]
2405b97e:	681b      	ldr	r3, [r3, #0]
2405b980:	461a      	mov	r2, r3
2405b982:	4b1b      	ldr	r3, [pc, #108]	@ (2405b9f0 <DMA_CalcBaseAndBitshift+0x160>)
2405b984:	4013      	ands	r3, r2
2405b986:	687a      	ldr	r2, [r7, #4]
2405b988:	6593      	str	r3, [r2, #88]	@ 0x58
2405b98a:	e005      	b.n	2405b998 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
2405b98c:	687b      	ldr	r3, [r7, #4]
2405b98e:	681b      	ldr	r3, [r3, #0]
2405b990:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
2405b994:	687b      	ldr	r3, [r7, #4]
2405b996:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
2405b998:	687b      	ldr	r3, [r7, #4]
2405b99a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
2405b99c:	4618      	mov	r0, r3
2405b99e:	3714      	adds	r7, #20
2405b9a0:	46bd      	mov	sp, r7
2405b9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
2405b9a6:	4770      	bx	lr
2405b9a8:	40020010 	.word	0x40020010
2405b9ac:	40020028 	.word	0x40020028
2405b9b0:	40020040 	.word	0x40020040
2405b9b4:	40020058 	.word	0x40020058
2405b9b8:	40020070 	.word	0x40020070
2405b9bc:	40020088 	.word	0x40020088
2405b9c0:	400200a0 	.word	0x400200a0
2405b9c4:	400200b8 	.word	0x400200b8
2405b9c8:	40020410 	.word	0x40020410
2405b9cc:	40020428 	.word	0x40020428
2405b9d0:	40020440 	.word	0x40020440
2405b9d4:	40020458 	.word	0x40020458
2405b9d8:	40020470 	.word	0x40020470
2405b9dc:	40020488 	.word	0x40020488
2405b9e0:	400204a0 	.word	0x400204a0
2405b9e4:	400204b8 	.word	0x400204b8
2405b9e8:	aaaaaaab 	.word	0xaaaaaaab
2405b9ec:	24069a68 	.word	0x24069a68
2405b9f0:	fffffc00 	.word	0xfffffc00

2405b9f4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
2405b9f4:	b480      	push	{r7}
2405b9f6:	b085      	sub	sp, #20
2405b9f8:	af00      	add	r7, sp, #0
2405b9fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
2405b9fc:	2300      	movs	r3, #0
2405b9fe:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
2405ba00:	687b      	ldr	r3, [r7, #4]
2405ba02:	699b      	ldr	r3, [r3, #24]
2405ba04:	2b00      	cmp	r3, #0
2405ba06:	d120      	bne.n	2405ba4a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
2405ba08:	687b      	ldr	r3, [r7, #4]
2405ba0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
2405ba0c:	2b03      	cmp	r3, #3
2405ba0e:	d858      	bhi.n	2405bac2 <DMA_CheckFifoParam+0xce>
2405ba10:	a201      	add	r2, pc, #4	@ (adr r2, 2405ba18 <DMA_CheckFifoParam+0x24>)
2405ba12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2405ba16:	bf00      	nop
2405ba18:	2405ba29 	.word	0x2405ba29
2405ba1c:	2405ba3b 	.word	0x2405ba3b
2405ba20:	2405ba29 	.word	0x2405ba29
2405ba24:	2405bac3 	.word	0x2405bac3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
2405ba28:	687b      	ldr	r3, [r7, #4]
2405ba2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2405ba2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
2405ba30:	2b00      	cmp	r3, #0
2405ba32:	d048      	beq.n	2405bac6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
2405ba34:	2301      	movs	r3, #1
2405ba36:	73fb      	strb	r3, [r7, #15]
        }
        break;
2405ba38:	e045      	b.n	2405bac6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
2405ba3a:	687b      	ldr	r3, [r7, #4]
2405ba3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2405ba3e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
2405ba42:	d142      	bne.n	2405baca <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
2405ba44:	2301      	movs	r3, #1
2405ba46:	73fb      	strb	r3, [r7, #15]
        }
        break;
2405ba48:	e03f      	b.n	2405baca <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
2405ba4a:	687b      	ldr	r3, [r7, #4]
2405ba4c:	699b      	ldr	r3, [r3, #24]
2405ba4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
2405ba52:	d123      	bne.n	2405ba9c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
2405ba54:	687b      	ldr	r3, [r7, #4]
2405ba56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
2405ba58:	2b03      	cmp	r3, #3
2405ba5a:	d838      	bhi.n	2405bace <DMA_CheckFifoParam+0xda>
2405ba5c:	a201      	add	r2, pc, #4	@ (adr r2, 2405ba64 <DMA_CheckFifoParam+0x70>)
2405ba5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2405ba62:	bf00      	nop
2405ba64:	2405ba75 	.word	0x2405ba75
2405ba68:	2405ba7b 	.word	0x2405ba7b
2405ba6c:	2405ba75 	.word	0x2405ba75
2405ba70:	2405ba8d 	.word	0x2405ba8d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
2405ba74:	2301      	movs	r3, #1
2405ba76:	73fb      	strb	r3, [r7, #15]
        break;
2405ba78:	e030      	b.n	2405badc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
2405ba7a:	687b      	ldr	r3, [r7, #4]
2405ba7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2405ba7e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
2405ba82:	2b00      	cmp	r3, #0
2405ba84:	d025      	beq.n	2405bad2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
2405ba86:	2301      	movs	r3, #1
2405ba88:	73fb      	strb	r3, [r7, #15]
        }
        break;
2405ba8a:	e022      	b.n	2405bad2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
2405ba8c:	687b      	ldr	r3, [r7, #4]
2405ba8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2405ba90:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
2405ba94:	d11f      	bne.n	2405bad6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
2405ba96:	2301      	movs	r3, #1
2405ba98:	73fb      	strb	r3, [r7, #15]
        }
        break;
2405ba9a:	e01c      	b.n	2405bad6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
2405ba9c:	687b      	ldr	r3, [r7, #4]
2405ba9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
2405baa0:	2b02      	cmp	r3, #2
2405baa2:	d902      	bls.n	2405baaa <DMA_CheckFifoParam+0xb6>
2405baa4:	2b03      	cmp	r3, #3
2405baa6:	d003      	beq.n	2405bab0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
2405baa8:	e018      	b.n	2405badc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
2405baaa:	2301      	movs	r3, #1
2405baac:	73fb      	strb	r3, [r7, #15]
        break;
2405baae:	e015      	b.n	2405badc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
2405bab0:	687b      	ldr	r3, [r7, #4]
2405bab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2405bab4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
2405bab8:	2b00      	cmp	r3, #0
2405baba:	d00e      	beq.n	2405bada <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
2405babc:	2301      	movs	r3, #1
2405babe:	73fb      	strb	r3, [r7, #15]
    break;
2405bac0:	e00b      	b.n	2405bada <DMA_CheckFifoParam+0xe6>
        break;
2405bac2:	bf00      	nop
2405bac4:	e00a      	b.n	2405badc <DMA_CheckFifoParam+0xe8>
        break;
2405bac6:	bf00      	nop
2405bac8:	e008      	b.n	2405badc <DMA_CheckFifoParam+0xe8>
        break;
2405baca:	bf00      	nop
2405bacc:	e006      	b.n	2405badc <DMA_CheckFifoParam+0xe8>
        break;
2405bace:	bf00      	nop
2405bad0:	e004      	b.n	2405badc <DMA_CheckFifoParam+0xe8>
        break;
2405bad2:	bf00      	nop
2405bad4:	e002      	b.n	2405badc <DMA_CheckFifoParam+0xe8>
        break;
2405bad6:	bf00      	nop
2405bad8:	e000      	b.n	2405badc <DMA_CheckFifoParam+0xe8>
    break;
2405bada:	bf00      	nop
    }
  }

  return status;
2405badc:	7bfb      	ldrb	r3, [r7, #15]
}
2405bade:	4618      	mov	r0, r3
2405bae0:	3714      	adds	r7, #20
2405bae2:	46bd      	mov	sp, r7
2405bae4:	f85d 7b04 	ldr.w	r7, [sp], #4
2405bae8:	4770      	bx	lr
2405baea:	bf00      	nop

2405baec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
2405baec:	b480      	push	{r7}
2405baee:	b085      	sub	sp, #20
2405baf0:	af00      	add	r7, sp, #0
2405baf2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
2405baf4:	687b      	ldr	r3, [r7, #4]
2405baf6:	681b      	ldr	r3, [r3, #0]
2405baf8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
2405bafa:	687b      	ldr	r3, [r7, #4]
2405bafc:	681b      	ldr	r3, [r3, #0]
2405bafe:	4a38      	ldr	r2, [pc, #224]	@ (2405bbe0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
2405bb00:	4293      	cmp	r3, r2
2405bb02:	d022      	beq.n	2405bb4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
2405bb04:	687b      	ldr	r3, [r7, #4]
2405bb06:	681b      	ldr	r3, [r3, #0]
2405bb08:	4a36      	ldr	r2, [pc, #216]	@ (2405bbe4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
2405bb0a:	4293      	cmp	r3, r2
2405bb0c:	d01d      	beq.n	2405bb4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
2405bb0e:	687b      	ldr	r3, [r7, #4]
2405bb10:	681b      	ldr	r3, [r3, #0]
2405bb12:	4a35      	ldr	r2, [pc, #212]	@ (2405bbe8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
2405bb14:	4293      	cmp	r3, r2
2405bb16:	d018      	beq.n	2405bb4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
2405bb18:	687b      	ldr	r3, [r7, #4]
2405bb1a:	681b      	ldr	r3, [r3, #0]
2405bb1c:	4a33      	ldr	r2, [pc, #204]	@ (2405bbec <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
2405bb1e:	4293      	cmp	r3, r2
2405bb20:	d013      	beq.n	2405bb4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
2405bb22:	687b      	ldr	r3, [r7, #4]
2405bb24:	681b      	ldr	r3, [r3, #0]
2405bb26:	4a32      	ldr	r2, [pc, #200]	@ (2405bbf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
2405bb28:	4293      	cmp	r3, r2
2405bb2a:	d00e      	beq.n	2405bb4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
2405bb2c:	687b      	ldr	r3, [r7, #4]
2405bb2e:	681b      	ldr	r3, [r3, #0]
2405bb30:	4a30      	ldr	r2, [pc, #192]	@ (2405bbf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
2405bb32:	4293      	cmp	r3, r2
2405bb34:	d009      	beq.n	2405bb4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
2405bb36:	687b      	ldr	r3, [r7, #4]
2405bb38:	681b      	ldr	r3, [r3, #0]
2405bb3a:	4a2f      	ldr	r2, [pc, #188]	@ (2405bbf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
2405bb3c:	4293      	cmp	r3, r2
2405bb3e:	d004      	beq.n	2405bb4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
2405bb40:	687b      	ldr	r3, [r7, #4]
2405bb42:	681b      	ldr	r3, [r3, #0]
2405bb44:	4a2d      	ldr	r2, [pc, #180]	@ (2405bbfc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
2405bb46:	4293      	cmp	r3, r2
2405bb48:	d101      	bne.n	2405bb4e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
2405bb4a:	2301      	movs	r3, #1
2405bb4c:	e000      	b.n	2405bb50 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
2405bb4e:	2300      	movs	r3, #0
2405bb50:	2b00      	cmp	r3, #0
2405bb52:	d01a      	beq.n	2405bb8a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
2405bb54:	687b      	ldr	r3, [r7, #4]
2405bb56:	681b      	ldr	r3, [r3, #0]
2405bb58:	b2db      	uxtb	r3, r3
2405bb5a:	3b08      	subs	r3, #8
2405bb5c:	4a28      	ldr	r2, [pc, #160]	@ (2405bc00 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
2405bb5e:	fba2 2303 	umull	r2, r3, r2, r3
2405bb62:	091b      	lsrs	r3, r3, #4
2405bb64:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
2405bb66:	68fa      	ldr	r2, [r7, #12]
2405bb68:	4b26      	ldr	r3, [pc, #152]	@ (2405bc04 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
2405bb6a:	4413      	add	r3, r2
2405bb6c:	009b      	lsls	r3, r3, #2
2405bb6e:	461a      	mov	r2, r3
2405bb70:	687b      	ldr	r3, [r7, #4]
2405bb72:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
2405bb74:	687b      	ldr	r3, [r7, #4]
2405bb76:	4a24      	ldr	r2, [pc, #144]	@ (2405bc08 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
2405bb78:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
2405bb7a:	68fb      	ldr	r3, [r7, #12]
2405bb7c:	f003 031f 	and.w	r3, r3, #31
2405bb80:	2201      	movs	r2, #1
2405bb82:	409a      	lsls	r2, r3
2405bb84:	687b      	ldr	r3, [r7, #4]
2405bb86:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
2405bb88:	e024      	b.n	2405bbd4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
2405bb8a:	687b      	ldr	r3, [r7, #4]
2405bb8c:	681b      	ldr	r3, [r3, #0]
2405bb8e:	b2db      	uxtb	r3, r3
2405bb90:	3b10      	subs	r3, #16
2405bb92:	4a1e      	ldr	r2, [pc, #120]	@ (2405bc0c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
2405bb94:	fba2 2303 	umull	r2, r3, r2, r3
2405bb98:	091b      	lsrs	r3, r3, #4
2405bb9a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
2405bb9c:	68bb      	ldr	r3, [r7, #8]
2405bb9e:	4a1c      	ldr	r2, [pc, #112]	@ (2405bc10 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
2405bba0:	4293      	cmp	r3, r2
2405bba2:	d806      	bhi.n	2405bbb2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
2405bba4:	68bb      	ldr	r3, [r7, #8]
2405bba6:	4a1b      	ldr	r2, [pc, #108]	@ (2405bc14 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
2405bba8:	4293      	cmp	r3, r2
2405bbaa:	d902      	bls.n	2405bbb2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
2405bbac:	68fb      	ldr	r3, [r7, #12]
2405bbae:	3308      	adds	r3, #8
2405bbb0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
2405bbb2:	68fa      	ldr	r2, [r7, #12]
2405bbb4:	4b18      	ldr	r3, [pc, #96]	@ (2405bc18 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
2405bbb6:	4413      	add	r3, r2
2405bbb8:	009b      	lsls	r3, r3, #2
2405bbba:	461a      	mov	r2, r3
2405bbbc:	687b      	ldr	r3, [r7, #4]
2405bbbe:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
2405bbc0:	687b      	ldr	r3, [r7, #4]
2405bbc2:	4a16      	ldr	r2, [pc, #88]	@ (2405bc1c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
2405bbc4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
2405bbc6:	68fb      	ldr	r3, [r7, #12]
2405bbc8:	f003 031f 	and.w	r3, r3, #31
2405bbcc:	2201      	movs	r2, #1
2405bbce:	409a      	lsls	r2, r3
2405bbd0:	687b      	ldr	r3, [r7, #4]
2405bbd2:	669a      	str	r2, [r3, #104]	@ 0x68
}
2405bbd4:	bf00      	nop
2405bbd6:	3714      	adds	r7, #20
2405bbd8:	46bd      	mov	sp, r7
2405bbda:	f85d 7b04 	ldr.w	r7, [sp], #4
2405bbde:	4770      	bx	lr
2405bbe0:	58025408 	.word	0x58025408
2405bbe4:	5802541c 	.word	0x5802541c
2405bbe8:	58025430 	.word	0x58025430
2405bbec:	58025444 	.word	0x58025444
2405bbf0:	58025458 	.word	0x58025458
2405bbf4:	5802546c 	.word	0x5802546c
2405bbf8:	58025480 	.word	0x58025480
2405bbfc:	58025494 	.word	0x58025494
2405bc00:	cccccccd 	.word	0xcccccccd
2405bc04:	16009600 	.word	0x16009600
2405bc08:	58025880 	.word	0x58025880
2405bc0c:	aaaaaaab 	.word	0xaaaaaaab
2405bc10:	400204b8 	.word	0x400204b8
2405bc14:	4002040f 	.word	0x4002040f
2405bc18:	10008200 	.word	0x10008200
2405bc1c:	40020880 	.word	0x40020880

2405bc20 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
2405bc20:	b480      	push	{r7}
2405bc22:	b085      	sub	sp, #20
2405bc24:	af00      	add	r7, sp, #0
2405bc26:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
2405bc28:	687b      	ldr	r3, [r7, #4]
2405bc2a:	685b      	ldr	r3, [r3, #4]
2405bc2c:	b2db      	uxtb	r3, r3
2405bc2e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
2405bc30:	68fb      	ldr	r3, [r7, #12]
2405bc32:	2b00      	cmp	r3, #0
2405bc34:	d04a      	beq.n	2405bccc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
2405bc36:	68fb      	ldr	r3, [r7, #12]
2405bc38:	2b08      	cmp	r3, #8
2405bc3a:	d847      	bhi.n	2405bccc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
2405bc3c:	687b      	ldr	r3, [r7, #4]
2405bc3e:	681b      	ldr	r3, [r3, #0]
2405bc40:	4a25      	ldr	r2, [pc, #148]	@ (2405bcd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
2405bc42:	4293      	cmp	r3, r2
2405bc44:	d022      	beq.n	2405bc8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
2405bc46:	687b      	ldr	r3, [r7, #4]
2405bc48:	681b      	ldr	r3, [r3, #0]
2405bc4a:	4a24      	ldr	r2, [pc, #144]	@ (2405bcdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
2405bc4c:	4293      	cmp	r3, r2
2405bc4e:	d01d      	beq.n	2405bc8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
2405bc50:	687b      	ldr	r3, [r7, #4]
2405bc52:	681b      	ldr	r3, [r3, #0]
2405bc54:	4a22      	ldr	r2, [pc, #136]	@ (2405bce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
2405bc56:	4293      	cmp	r3, r2
2405bc58:	d018      	beq.n	2405bc8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
2405bc5a:	687b      	ldr	r3, [r7, #4]
2405bc5c:	681b      	ldr	r3, [r3, #0]
2405bc5e:	4a21      	ldr	r2, [pc, #132]	@ (2405bce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
2405bc60:	4293      	cmp	r3, r2
2405bc62:	d013      	beq.n	2405bc8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
2405bc64:	687b      	ldr	r3, [r7, #4]
2405bc66:	681b      	ldr	r3, [r3, #0]
2405bc68:	4a1f      	ldr	r2, [pc, #124]	@ (2405bce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
2405bc6a:	4293      	cmp	r3, r2
2405bc6c:	d00e      	beq.n	2405bc8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
2405bc6e:	687b      	ldr	r3, [r7, #4]
2405bc70:	681b      	ldr	r3, [r3, #0]
2405bc72:	4a1e      	ldr	r2, [pc, #120]	@ (2405bcec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
2405bc74:	4293      	cmp	r3, r2
2405bc76:	d009      	beq.n	2405bc8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
2405bc78:	687b      	ldr	r3, [r7, #4]
2405bc7a:	681b      	ldr	r3, [r3, #0]
2405bc7c:	4a1c      	ldr	r2, [pc, #112]	@ (2405bcf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
2405bc7e:	4293      	cmp	r3, r2
2405bc80:	d004      	beq.n	2405bc8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
2405bc82:	687b      	ldr	r3, [r7, #4]
2405bc84:	681b      	ldr	r3, [r3, #0]
2405bc86:	4a1b      	ldr	r2, [pc, #108]	@ (2405bcf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
2405bc88:	4293      	cmp	r3, r2
2405bc8a:	d101      	bne.n	2405bc90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
2405bc8c:	2301      	movs	r3, #1
2405bc8e:	e000      	b.n	2405bc92 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
2405bc90:	2300      	movs	r3, #0
2405bc92:	2b00      	cmp	r3, #0
2405bc94:	d00a      	beq.n	2405bcac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
2405bc96:	68fa      	ldr	r2, [r7, #12]
2405bc98:	4b17      	ldr	r3, [pc, #92]	@ (2405bcf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
2405bc9a:	4413      	add	r3, r2
2405bc9c:	009b      	lsls	r3, r3, #2
2405bc9e:	461a      	mov	r2, r3
2405bca0:	687b      	ldr	r3, [r7, #4]
2405bca2:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
2405bca4:	687b      	ldr	r3, [r7, #4]
2405bca6:	4a15      	ldr	r2, [pc, #84]	@ (2405bcfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
2405bca8:	671a      	str	r2, [r3, #112]	@ 0x70
2405bcaa:	e009      	b.n	2405bcc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
2405bcac:	68fa      	ldr	r2, [r7, #12]
2405bcae:	4b14      	ldr	r3, [pc, #80]	@ (2405bd00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
2405bcb0:	4413      	add	r3, r2
2405bcb2:	009b      	lsls	r3, r3, #2
2405bcb4:	461a      	mov	r2, r3
2405bcb6:	687b      	ldr	r3, [r7, #4]
2405bcb8:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
2405bcba:	687b      	ldr	r3, [r7, #4]
2405bcbc:	4a11      	ldr	r2, [pc, #68]	@ (2405bd04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
2405bcbe:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
2405bcc0:	68fb      	ldr	r3, [r7, #12]
2405bcc2:	3b01      	subs	r3, #1
2405bcc4:	2201      	movs	r2, #1
2405bcc6:	409a      	lsls	r2, r3
2405bcc8:	687b      	ldr	r3, [r7, #4]
2405bcca:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
2405bccc:	bf00      	nop
2405bcce:	3714      	adds	r7, #20
2405bcd0:	46bd      	mov	sp, r7
2405bcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
2405bcd6:	4770      	bx	lr
2405bcd8:	58025408 	.word	0x58025408
2405bcdc:	5802541c 	.word	0x5802541c
2405bce0:	58025430 	.word	0x58025430
2405bce4:	58025444 	.word	0x58025444
2405bce8:	58025458 	.word	0x58025458
2405bcec:	5802546c 	.word	0x5802546c
2405bcf0:	58025480 	.word	0x58025480
2405bcf4:	58025494 	.word	0x58025494
2405bcf8:	1600963f 	.word	0x1600963f
2405bcfc:	58025940 	.word	0x58025940
2405bd00:	1000823f 	.word	0x1000823f
2405bd04:	40020940 	.word	0x40020940

2405bd08 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
2405bd08:	b580      	push	{r7, lr}
2405bd0a:	b082      	sub	sp, #8
2405bd0c:	af00      	add	r7, sp, #0
2405bd0e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
2405bd10:	687b      	ldr	r3, [r7, #4]
2405bd12:	2b00      	cmp	r3, #0
2405bd14:	d101      	bne.n	2405bd1a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
2405bd16:	2301      	movs	r3, #1
2405bd18:	e04f      	b.n	2405bdba <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
2405bd1a:	687b      	ldr	r3, [r7, #4]
2405bd1c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
2405bd20:	b2db      	uxtb	r3, r3
2405bd22:	2b00      	cmp	r3, #0
2405bd24:	d106      	bne.n	2405bd34 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
2405bd26:	687b      	ldr	r3, [r7, #4]
2405bd28:	2200      	movs	r2, #0
2405bd2a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
2405bd2e:	6878      	ldr	r0, [r7, #4]
2405bd30:	f7fa f828 	bl	24055d84 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
2405bd34:	687b      	ldr	r3, [r7, #4]
2405bd36:	2202      	movs	r2, #2
2405bd38:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
2405bd3c:	687b      	ldr	r3, [r7, #4]
2405bd3e:	681b      	ldr	r3, [r3, #0]
2405bd40:	681a      	ldr	r2, [r3, #0]
2405bd42:	4b20      	ldr	r3, [pc, #128]	@ (2405bdc4 <HAL_DMA2D_Init+0xbc>)
2405bd44:	4013      	ands	r3, r2
2405bd46:	687a      	ldr	r2, [r7, #4]
2405bd48:	6851      	ldr	r1, [r2, #4]
2405bd4a:	687a      	ldr	r2, [r7, #4]
2405bd4c:	69d2      	ldr	r2, [r2, #28]
2405bd4e:	4311      	orrs	r1, r2
2405bd50:	687a      	ldr	r2, [r7, #4]
2405bd52:	6812      	ldr	r2, [r2, #0]
2405bd54:	430b      	orrs	r3, r1
2405bd56:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
2405bd58:	687b      	ldr	r3, [r7, #4]
2405bd5a:	681b      	ldr	r3, [r3, #0]
2405bd5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
2405bd5e:	4b1a      	ldr	r3, [pc, #104]	@ (2405bdc8 <HAL_DMA2D_Init+0xc0>)
2405bd60:	4013      	ands	r3, r2
2405bd62:	687a      	ldr	r2, [r7, #4]
2405bd64:	6891      	ldr	r1, [r2, #8]
2405bd66:	687a      	ldr	r2, [r7, #4]
2405bd68:	6992      	ldr	r2, [r2, #24]
2405bd6a:	4311      	orrs	r1, r2
2405bd6c:	687a      	ldr	r2, [r7, #4]
2405bd6e:	6812      	ldr	r2, [r2, #0]
2405bd70:	430b      	orrs	r3, r1
2405bd72:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
2405bd74:	687b      	ldr	r3, [r7, #4]
2405bd76:	681b      	ldr	r3, [r3, #0]
2405bd78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
2405bd7a:	4b14      	ldr	r3, [pc, #80]	@ (2405bdcc <HAL_DMA2D_Init+0xc4>)
2405bd7c:	4013      	ands	r3, r2
2405bd7e:	687a      	ldr	r2, [r7, #4]
2405bd80:	68d1      	ldr	r1, [r2, #12]
2405bd82:	687a      	ldr	r2, [r7, #4]
2405bd84:	6812      	ldr	r2, [r2, #0]
2405bd86:	430b      	orrs	r3, r1
2405bd88:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
2405bd8a:	687b      	ldr	r3, [r7, #4]
2405bd8c:	681b      	ldr	r3, [r3, #0]
2405bd8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
2405bd90:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
2405bd94:	687b      	ldr	r3, [r7, #4]
2405bd96:	691b      	ldr	r3, [r3, #16]
2405bd98:	051a      	lsls	r2, r3, #20
2405bd9a:	687b      	ldr	r3, [r7, #4]
2405bd9c:	695b      	ldr	r3, [r3, #20]
2405bd9e:	055b      	lsls	r3, r3, #21
2405bda0:	431a      	orrs	r2, r3
2405bda2:	687b      	ldr	r3, [r7, #4]
2405bda4:	681b      	ldr	r3, [r3, #0]
2405bda6:	430a      	orrs	r2, r1
2405bda8:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
2405bdaa:	687b      	ldr	r3, [r7, #4]
2405bdac:	2200      	movs	r2, #0
2405bdae:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
2405bdb0:	687b      	ldr	r3, [r7, #4]
2405bdb2:	2201      	movs	r2, #1
2405bdb4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
2405bdb8:	2300      	movs	r3, #0
}
2405bdba:	4618      	mov	r0, r3
2405bdbc:	3708      	adds	r7, #8
2405bdbe:	46bd      	mov	sp, r7
2405bdc0:	bd80      	pop	{r7, pc}
2405bdc2:	bf00      	nop
2405bdc4:	fff8ffbf 	.word	0xfff8ffbf
2405bdc8:	fffffef8 	.word	0xfffffef8
2405bdcc:	ffff0000 	.word	0xffff0000

2405bdd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
2405bdd0:	b480      	push	{r7}
2405bdd2:	b089      	sub	sp, #36	@ 0x24
2405bdd4:	af00      	add	r7, sp, #0
2405bdd6:	6078      	str	r0, [r7, #4]
2405bdd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
2405bdda:	2300      	movs	r3, #0
2405bddc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
2405bdde:	4b89      	ldr	r3, [pc, #548]	@ (2405c004 <HAL_GPIO_Init+0x234>)
2405bde0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
2405bde2:	e194      	b.n	2405c10e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
2405bde4:	683b      	ldr	r3, [r7, #0]
2405bde6:	681a      	ldr	r2, [r3, #0]
2405bde8:	2101      	movs	r1, #1
2405bdea:	69fb      	ldr	r3, [r7, #28]
2405bdec:	fa01 f303 	lsl.w	r3, r1, r3
2405bdf0:	4013      	ands	r3, r2
2405bdf2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
2405bdf4:	693b      	ldr	r3, [r7, #16]
2405bdf6:	2b00      	cmp	r3, #0
2405bdf8:	f000 8186 	beq.w	2405c108 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
2405bdfc:	683b      	ldr	r3, [r7, #0]
2405bdfe:	685b      	ldr	r3, [r3, #4]
2405be00:	f003 0303 	and.w	r3, r3, #3
2405be04:	2b01      	cmp	r3, #1
2405be06:	d005      	beq.n	2405be14 <HAL_GPIO_Init+0x44>
2405be08:	683b      	ldr	r3, [r7, #0]
2405be0a:	685b      	ldr	r3, [r3, #4]
2405be0c:	f003 0303 	and.w	r3, r3, #3
2405be10:	2b02      	cmp	r3, #2
2405be12:	d130      	bne.n	2405be76 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
2405be14:	687b      	ldr	r3, [r7, #4]
2405be16:	689b      	ldr	r3, [r3, #8]
2405be18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
2405be1a:	69fb      	ldr	r3, [r7, #28]
2405be1c:	005b      	lsls	r3, r3, #1
2405be1e:	2203      	movs	r2, #3
2405be20:	fa02 f303 	lsl.w	r3, r2, r3
2405be24:	43db      	mvns	r3, r3
2405be26:	69ba      	ldr	r2, [r7, #24]
2405be28:	4013      	ands	r3, r2
2405be2a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
2405be2c:	683b      	ldr	r3, [r7, #0]
2405be2e:	68da      	ldr	r2, [r3, #12]
2405be30:	69fb      	ldr	r3, [r7, #28]
2405be32:	005b      	lsls	r3, r3, #1
2405be34:	fa02 f303 	lsl.w	r3, r2, r3
2405be38:	69ba      	ldr	r2, [r7, #24]
2405be3a:	4313      	orrs	r3, r2
2405be3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
2405be3e:	687b      	ldr	r3, [r7, #4]
2405be40:	69ba      	ldr	r2, [r7, #24]
2405be42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
2405be44:	687b      	ldr	r3, [r7, #4]
2405be46:	685b      	ldr	r3, [r3, #4]
2405be48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
2405be4a:	2201      	movs	r2, #1
2405be4c:	69fb      	ldr	r3, [r7, #28]
2405be4e:	fa02 f303 	lsl.w	r3, r2, r3
2405be52:	43db      	mvns	r3, r3
2405be54:	69ba      	ldr	r2, [r7, #24]
2405be56:	4013      	ands	r3, r2
2405be58:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
2405be5a:	683b      	ldr	r3, [r7, #0]
2405be5c:	685b      	ldr	r3, [r3, #4]
2405be5e:	091b      	lsrs	r3, r3, #4
2405be60:	f003 0201 	and.w	r2, r3, #1
2405be64:	69fb      	ldr	r3, [r7, #28]
2405be66:	fa02 f303 	lsl.w	r3, r2, r3
2405be6a:	69ba      	ldr	r2, [r7, #24]
2405be6c:	4313      	orrs	r3, r2
2405be6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
2405be70:	687b      	ldr	r3, [r7, #4]
2405be72:	69ba      	ldr	r2, [r7, #24]
2405be74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
2405be76:	683b      	ldr	r3, [r7, #0]
2405be78:	685b      	ldr	r3, [r3, #4]
2405be7a:	f003 0303 	and.w	r3, r3, #3
2405be7e:	2b03      	cmp	r3, #3
2405be80:	d017      	beq.n	2405beb2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
2405be82:	687b      	ldr	r3, [r7, #4]
2405be84:	68db      	ldr	r3, [r3, #12]
2405be86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
2405be88:	69fb      	ldr	r3, [r7, #28]
2405be8a:	005b      	lsls	r3, r3, #1
2405be8c:	2203      	movs	r2, #3
2405be8e:	fa02 f303 	lsl.w	r3, r2, r3
2405be92:	43db      	mvns	r3, r3
2405be94:	69ba      	ldr	r2, [r7, #24]
2405be96:	4013      	ands	r3, r2
2405be98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
2405be9a:	683b      	ldr	r3, [r7, #0]
2405be9c:	689a      	ldr	r2, [r3, #8]
2405be9e:	69fb      	ldr	r3, [r7, #28]
2405bea0:	005b      	lsls	r3, r3, #1
2405bea2:	fa02 f303 	lsl.w	r3, r2, r3
2405bea6:	69ba      	ldr	r2, [r7, #24]
2405bea8:	4313      	orrs	r3, r2
2405beaa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
2405beac:	687b      	ldr	r3, [r7, #4]
2405beae:	69ba      	ldr	r2, [r7, #24]
2405beb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
2405beb2:	683b      	ldr	r3, [r7, #0]
2405beb4:	685b      	ldr	r3, [r3, #4]
2405beb6:	f003 0303 	and.w	r3, r3, #3
2405beba:	2b02      	cmp	r3, #2
2405bebc:	d123      	bne.n	2405bf06 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
2405bebe:	69fb      	ldr	r3, [r7, #28]
2405bec0:	08da      	lsrs	r2, r3, #3
2405bec2:	687b      	ldr	r3, [r7, #4]
2405bec4:	3208      	adds	r2, #8
2405bec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2405beca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
2405becc:	69fb      	ldr	r3, [r7, #28]
2405bece:	f003 0307 	and.w	r3, r3, #7
2405bed2:	009b      	lsls	r3, r3, #2
2405bed4:	220f      	movs	r2, #15
2405bed6:	fa02 f303 	lsl.w	r3, r2, r3
2405beda:	43db      	mvns	r3, r3
2405bedc:	69ba      	ldr	r2, [r7, #24]
2405bede:	4013      	ands	r3, r2
2405bee0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
2405bee2:	683b      	ldr	r3, [r7, #0]
2405bee4:	691a      	ldr	r2, [r3, #16]
2405bee6:	69fb      	ldr	r3, [r7, #28]
2405bee8:	f003 0307 	and.w	r3, r3, #7
2405beec:	009b      	lsls	r3, r3, #2
2405beee:	fa02 f303 	lsl.w	r3, r2, r3
2405bef2:	69ba      	ldr	r2, [r7, #24]
2405bef4:	4313      	orrs	r3, r2
2405bef6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
2405bef8:	69fb      	ldr	r3, [r7, #28]
2405befa:	08da      	lsrs	r2, r3, #3
2405befc:	687b      	ldr	r3, [r7, #4]
2405befe:	3208      	adds	r2, #8
2405bf00:	69b9      	ldr	r1, [r7, #24]
2405bf02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
2405bf06:	687b      	ldr	r3, [r7, #4]
2405bf08:	681b      	ldr	r3, [r3, #0]
2405bf0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
2405bf0c:	69fb      	ldr	r3, [r7, #28]
2405bf0e:	005b      	lsls	r3, r3, #1
2405bf10:	2203      	movs	r2, #3
2405bf12:	fa02 f303 	lsl.w	r3, r2, r3
2405bf16:	43db      	mvns	r3, r3
2405bf18:	69ba      	ldr	r2, [r7, #24]
2405bf1a:	4013      	ands	r3, r2
2405bf1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
2405bf1e:	683b      	ldr	r3, [r7, #0]
2405bf20:	685b      	ldr	r3, [r3, #4]
2405bf22:	f003 0203 	and.w	r2, r3, #3
2405bf26:	69fb      	ldr	r3, [r7, #28]
2405bf28:	005b      	lsls	r3, r3, #1
2405bf2a:	fa02 f303 	lsl.w	r3, r2, r3
2405bf2e:	69ba      	ldr	r2, [r7, #24]
2405bf30:	4313      	orrs	r3, r2
2405bf32:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
2405bf34:	687b      	ldr	r3, [r7, #4]
2405bf36:	69ba      	ldr	r2, [r7, #24]
2405bf38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
2405bf3a:	683b      	ldr	r3, [r7, #0]
2405bf3c:	685b      	ldr	r3, [r3, #4]
2405bf3e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
2405bf42:	2b00      	cmp	r3, #0
2405bf44:	f000 80e0 	beq.w	2405c108 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
2405bf48:	4b2f      	ldr	r3, [pc, #188]	@ (2405c008 <HAL_GPIO_Init+0x238>)
2405bf4a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
2405bf4e:	4a2e      	ldr	r2, [pc, #184]	@ (2405c008 <HAL_GPIO_Init+0x238>)
2405bf50:	f043 0302 	orr.w	r3, r3, #2
2405bf54:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
2405bf58:	4b2b      	ldr	r3, [pc, #172]	@ (2405c008 <HAL_GPIO_Init+0x238>)
2405bf5a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
2405bf5e:	f003 0302 	and.w	r3, r3, #2
2405bf62:	60fb      	str	r3, [r7, #12]
2405bf64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
2405bf66:	4a29      	ldr	r2, [pc, #164]	@ (2405c00c <HAL_GPIO_Init+0x23c>)
2405bf68:	69fb      	ldr	r3, [r7, #28]
2405bf6a:	089b      	lsrs	r3, r3, #2
2405bf6c:	3302      	adds	r3, #2
2405bf6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
2405bf72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
2405bf74:	69fb      	ldr	r3, [r7, #28]
2405bf76:	f003 0303 	and.w	r3, r3, #3
2405bf7a:	009b      	lsls	r3, r3, #2
2405bf7c:	220f      	movs	r2, #15
2405bf7e:	fa02 f303 	lsl.w	r3, r2, r3
2405bf82:	43db      	mvns	r3, r3
2405bf84:	69ba      	ldr	r2, [r7, #24]
2405bf86:	4013      	ands	r3, r2
2405bf88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
2405bf8a:	687b      	ldr	r3, [r7, #4]
2405bf8c:	4a20      	ldr	r2, [pc, #128]	@ (2405c010 <HAL_GPIO_Init+0x240>)
2405bf8e:	4293      	cmp	r3, r2
2405bf90:	d052      	beq.n	2405c038 <HAL_GPIO_Init+0x268>
2405bf92:	687b      	ldr	r3, [r7, #4]
2405bf94:	4a1f      	ldr	r2, [pc, #124]	@ (2405c014 <HAL_GPIO_Init+0x244>)
2405bf96:	4293      	cmp	r3, r2
2405bf98:	d031      	beq.n	2405bffe <HAL_GPIO_Init+0x22e>
2405bf9a:	687b      	ldr	r3, [r7, #4]
2405bf9c:	4a1e      	ldr	r2, [pc, #120]	@ (2405c018 <HAL_GPIO_Init+0x248>)
2405bf9e:	4293      	cmp	r3, r2
2405bfa0:	d02b      	beq.n	2405bffa <HAL_GPIO_Init+0x22a>
2405bfa2:	687b      	ldr	r3, [r7, #4]
2405bfa4:	4a1d      	ldr	r2, [pc, #116]	@ (2405c01c <HAL_GPIO_Init+0x24c>)
2405bfa6:	4293      	cmp	r3, r2
2405bfa8:	d025      	beq.n	2405bff6 <HAL_GPIO_Init+0x226>
2405bfaa:	687b      	ldr	r3, [r7, #4]
2405bfac:	4a1c      	ldr	r2, [pc, #112]	@ (2405c020 <HAL_GPIO_Init+0x250>)
2405bfae:	4293      	cmp	r3, r2
2405bfb0:	d01f      	beq.n	2405bff2 <HAL_GPIO_Init+0x222>
2405bfb2:	687b      	ldr	r3, [r7, #4]
2405bfb4:	4a1b      	ldr	r2, [pc, #108]	@ (2405c024 <HAL_GPIO_Init+0x254>)
2405bfb6:	4293      	cmp	r3, r2
2405bfb8:	d019      	beq.n	2405bfee <HAL_GPIO_Init+0x21e>
2405bfba:	687b      	ldr	r3, [r7, #4]
2405bfbc:	4a1a      	ldr	r2, [pc, #104]	@ (2405c028 <HAL_GPIO_Init+0x258>)
2405bfbe:	4293      	cmp	r3, r2
2405bfc0:	d013      	beq.n	2405bfea <HAL_GPIO_Init+0x21a>
2405bfc2:	687b      	ldr	r3, [r7, #4]
2405bfc4:	4a19      	ldr	r2, [pc, #100]	@ (2405c02c <HAL_GPIO_Init+0x25c>)
2405bfc6:	4293      	cmp	r3, r2
2405bfc8:	d00d      	beq.n	2405bfe6 <HAL_GPIO_Init+0x216>
2405bfca:	687b      	ldr	r3, [r7, #4]
2405bfcc:	4a18      	ldr	r2, [pc, #96]	@ (2405c030 <HAL_GPIO_Init+0x260>)
2405bfce:	4293      	cmp	r3, r2
2405bfd0:	d007      	beq.n	2405bfe2 <HAL_GPIO_Init+0x212>
2405bfd2:	687b      	ldr	r3, [r7, #4]
2405bfd4:	4a17      	ldr	r2, [pc, #92]	@ (2405c034 <HAL_GPIO_Init+0x264>)
2405bfd6:	4293      	cmp	r3, r2
2405bfd8:	d101      	bne.n	2405bfde <HAL_GPIO_Init+0x20e>
2405bfda:	2309      	movs	r3, #9
2405bfdc:	e02d      	b.n	2405c03a <HAL_GPIO_Init+0x26a>
2405bfde:	230a      	movs	r3, #10
2405bfe0:	e02b      	b.n	2405c03a <HAL_GPIO_Init+0x26a>
2405bfe2:	2308      	movs	r3, #8
2405bfe4:	e029      	b.n	2405c03a <HAL_GPIO_Init+0x26a>
2405bfe6:	2307      	movs	r3, #7
2405bfe8:	e027      	b.n	2405c03a <HAL_GPIO_Init+0x26a>
2405bfea:	2306      	movs	r3, #6
2405bfec:	e025      	b.n	2405c03a <HAL_GPIO_Init+0x26a>
2405bfee:	2305      	movs	r3, #5
2405bff0:	e023      	b.n	2405c03a <HAL_GPIO_Init+0x26a>
2405bff2:	2304      	movs	r3, #4
2405bff4:	e021      	b.n	2405c03a <HAL_GPIO_Init+0x26a>
2405bff6:	2303      	movs	r3, #3
2405bff8:	e01f      	b.n	2405c03a <HAL_GPIO_Init+0x26a>
2405bffa:	2302      	movs	r3, #2
2405bffc:	e01d      	b.n	2405c03a <HAL_GPIO_Init+0x26a>
2405bffe:	2301      	movs	r3, #1
2405c000:	e01b      	b.n	2405c03a <HAL_GPIO_Init+0x26a>
2405c002:	bf00      	nop
2405c004:	58000080 	.word	0x58000080
2405c008:	58024400 	.word	0x58024400
2405c00c:	58000400 	.word	0x58000400
2405c010:	58020000 	.word	0x58020000
2405c014:	58020400 	.word	0x58020400
2405c018:	58020800 	.word	0x58020800
2405c01c:	58020c00 	.word	0x58020c00
2405c020:	58021000 	.word	0x58021000
2405c024:	58021400 	.word	0x58021400
2405c028:	58021800 	.word	0x58021800
2405c02c:	58021c00 	.word	0x58021c00
2405c030:	58022000 	.word	0x58022000
2405c034:	58022400 	.word	0x58022400
2405c038:	2300      	movs	r3, #0
2405c03a:	69fa      	ldr	r2, [r7, #28]
2405c03c:	f002 0203 	and.w	r2, r2, #3
2405c040:	0092      	lsls	r2, r2, #2
2405c042:	4093      	lsls	r3, r2
2405c044:	69ba      	ldr	r2, [r7, #24]
2405c046:	4313      	orrs	r3, r2
2405c048:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
2405c04a:	4938      	ldr	r1, [pc, #224]	@ (2405c12c <HAL_GPIO_Init+0x35c>)
2405c04c:	69fb      	ldr	r3, [r7, #28]
2405c04e:	089b      	lsrs	r3, r3, #2
2405c050:	3302      	adds	r3, #2
2405c052:	69ba      	ldr	r2, [r7, #24]
2405c054:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
2405c058:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
2405c05c:	681b      	ldr	r3, [r3, #0]
2405c05e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
2405c060:	693b      	ldr	r3, [r7, #16]
2405c062:	43db      	mvns	r3, r3
2405c064:	69ba      	ldr	r2, [r7, #24]
2405c066:	4013      	ands	r3, r2
2405c068:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
2405c06a:	683b      	ldr	r3, [r7, #0]
2405c06c:	685b      	ldr	r3, [r3, #4]
2405c06e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
2405c072:	2b00      	cmp	r3, #0
2405c074:	d003      	beq.n	2405c07e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
2405c076:	69ba      	ldr	r2, [r7, #24]
2405c078:	693b      	ldr	r3, [r7, #16]
2405c07a:	4313      	orrs	r3, r2
2405c07c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
2405c07e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
2405c082:	69bb      	ldr	r3, [r7, #24]
2405c084:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
2405c086:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
2405c08a:	685b      	ldr	r3, [r3, #4]
2405c08c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
2405c08e:	693b      	ldr	r3, [r7, #16]
2405c090:	43db      	mvns	r3, r3
2405c092:	69ba      	ldr	r2, [r7, #24]
2405c094:	4013      	ands	r3, r2
2405c096:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
2405c098:	683b      	ldr	r3, [r7, #0]
2405c09a:	685b      	ldr	r3, [r3, #4]
2405c09c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
2405c0a0:	2b00      	cmp	r3, #0
2405c0a2:	d003      	beq.n	2405c0ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
2405c0a4:	69ba      	ldr	r2, [r7, #24]
2405c0a6:	693b      	ldr	r3, [r7, #16]
2405c0a8:	4313      	orrs	r3, r2
2405c0aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
2405c0ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
2405c0b0:	69bb      	ldr	r3, [r7, #24]
2405c0b2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
2405c0b4:	697b      	ldr	r3, [r7, #20]
2405c0b6:	685b      	ldr	r3, [r3, #4]
2405c0b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
2405c0ba:	693b      	ldr	r3, [r7, #16]
2405c0bc:	43db      	mvns	r3, r3
2405c0be:	69ba      	ldr	r2, [r7, #24]
2405c0c0:	4013      	ands	r3, r2
2405c0c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
2405c0c4:	683b      	ldr	r3, [r7, #0]
2405c0c6:	685b      	ldr	r3, [r3, #4]
2405c0c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
2405c0cc:	2b00      	cmp	r3, #0
2405c0ce:	d003      	beq.n	2405c0d8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
2405c0d0:	69ba      	ldr	r2, [r7, #24]
2405c0d2:	693b      	ldr	r3, [r7, #16]
2405c0d4:	4313      	orrs	r3, r2
2405c0d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
2405c0d8:	697b      	ldr	r3, [r7, #20]
2405c0da:	69ba      	ldr	r2, [r7, #24]
2405c0dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
2405c0de:	697b      	ldr	r3, [r7, #20]
2405c0e0:	681b      	ldr	r3, [r3, #0]
2405c0e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
2405c0e4:	693b      	ldr	r3, [r7, #16]
2405c0e6:	43db      	mvns	r3, r3
2405c0e8:	69ba      	ldr	r2, [r7, #24]
2405c0ea:	4013      	ands	r3, r2
2405c0ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
2405c0ee:	683b      	ldr	r3, [r7, #0]
2405c0f0:	685b      	ldr	r3, [r3, #4]
2405c0f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
2405c0f6:	2b00      	cmp	r3, #0
2405c0f8:	d003      	beq.n	2405c102 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
2405c0fa:	69ba      	ldr	r2, [r7, #24]
2405c0fc:	693b      	ldr	r3, [r7, #16]
2405c0fe:	4313      	orrs	r3, r2
2405c100:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
2405c102:	697b      	ldr	r3, [r7, #20]
2405c104:	69ba      	ldr	r2, [r7, #24]
2405c106:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
2405c108:	69fb      	ldr	r3, [r7, #28]
2405c10a:	3301      	adds	r3, #1
2405c10c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
2405c10e:	683b      	ldr	r3, [r7, #0]
2405c110:	681a      	ldr	r2, [r3, #0]
2405c112:	69fb      	ldr	r3, [r7, #28]
2405c114:	fa22 f303 	lsr.w	r3, r2, r3
2405c118:	2b00      	cmp	r3, #0
2405c11a:	f47f ae63 	bne.w	2405bde4 <HAL_GPIO_Init+0x14>
  }
}
2405c11e:	bf00      	nop
2405c120:	bf00      	nop
2405c122:	3724      	adds	r7, #36	@ 0x24
2405c124:	46bd      	mov	sp, r7
2405c126:	f85d 7b04 	ldr.w	r7, [sp], #4
2405c12a:	4770      	bx	lr
2405c12c:	58000400 	.word	0x58000400

2405c130 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
2405c130:	b480      	push	{r7}
2405c132:	b085      	sub	sp, #20
2405c134:	af00      	add	r7, sp, #0
2405c136:	6078      	str	r0, [r7, #4]
2405c138:	460b      	mov	r3, r1
2405c13a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
2405c13c:	687b      	ldr	r3, [r7, #4]
2405c13e:	691a      	ldr	r2, [r3, #16]
2405c140:	887b      	ldrh	r3, [r7, #2]
2405c142:	4013      	ands	r3, r2
2405c144:	2b00      	cmp	r3, #0
2405c146:	d002      	beq.n	2405c14e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
2405c148:	2301      	movs	r3, #1
2405c14a:	73fb      	strb	r3, [r7, #15]
2405c14c:	e001      	b.n	2405c152 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
2405c14e:	2300      	movs	r3, #0
2405c150:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
2405c152:	7bfb      	ldrb	r3, [r7, #15]
}
2405c154:	4618      	mov	r0, r3
2405c156:	3714      	adds	r7, #20
2405c158:	46bd      	mov	sp, r7
2405c15a:	f85d 7b04 	ldr.w	r7, [sp], #4
2405c15e:	4770      	bx	lr

2405c160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
2405c160:	b480      	push	{r7}
2405c162:	b083      	sub	sp, #12
2405c164:	af00      	add	r7, sp, #0
2405c166:	6078      	str	r0, [r7, #4]
2405c168:	460b      	mov	r3, r1
2405c16a:	807b      	strh	r3, [r7, #2]
2405c16c:	4613      	mov	r3, r2
2405c16e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
2405c170:	787b      	ldrb	r3, [r7, #1]
2405c172:	2b00      	cmp	r3, #0
2405c174:	d003      	beq.n	2405c17e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
2405c176:	887a      	ldrh	r2, [r7, #2]
2405c178:	687b      	ldr	r3, [r7, #4]
2405c17a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
2405c17c:	e003      	b.n	2405c186 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
2405c17e:	887b      	ldrh	r3, [r7, #2]
2405c180:	041a      	lsls	r2, r3, #16
2405c182:	687b      	ldr	r3, [r7, #4]
2405c184:	619a      	str	r2, [r3, #24]
}
2405c186:	bf00      	nop
2405c188:	370c      	adds	r7, #12
2405c18a:	46bd      	mov	sp, r7
2405c18c:	f85d 7b04 	ldr.w	r7, [sp], #4
2405c190:	4770      	bx	lr

2405c192 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
2405c192:	b580      	push	{r7, lr}
2405c194:	b082      	sub	sp, #8
2405c196:	af00      	add	r7, sp, #0
2405c198:	4603      	mov	r3, r0
2405c19a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
2405c19c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
2405c1a0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
2405c1a4:	88fb      	ldrh	r3, [r7, #6]
2405c1a6:	4013      	ands	r3, r2
2405c1a8:	2b00      	cmp	r3, #0
2405c1aa:	d008      	beq.n	2405c1be <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
2405c1ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
2405c1b0:	88fb      	ldrh	r3, [r7, #6]
2405c1b2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
2405c1b6:	88fb      	ldrh	r3, [r7, #6]
2405c1b8:	4618      	mov	r0, r3
2405c1ba:	f000 f804 	bl	2405c1c6 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
2405c1be:	bf00      	nop
2405c1c0:	3708      	adds	r7, #8
2405c1c2:	46bd      	mov	sp, r7
2405c1c4:	bd80      	pop	{r7, pc}

2405c1c6 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
2405c1c6:	b480      	push	{r7}
2405c1c8:	b083      	sub	sp, #12
2405c1ca:	af00      	add	r7, sp, #0
2405c1cc:	4603      	mov	r3, r0
2405c1ce:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
2405c1d0:	bf00      	nop
2405c1d2:	370c      	adds	r7, #12
2405c1d4:	46bd      	mov	sp, r7
2405c1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
2405c1da:	4770      	bx	lr

2405c1dc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
2405c1dc:	b580      	push	{r7, lr}
2405c1de:	b084      	sub	sp, #16
2405c1e0:	af00      	add	r7, sp, #0
2405c1e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
2405c1e4:	687b      	ldr	r3, [r7, #4]
2405c1e6:	2b00      	cmp	r3, #0
2405c1e8:	d101      	bne.n	2405c1ee <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
2405c1ea:	2301      	movs	r3, #1
2405c1ec:	e0bf      	b.n	2405c36e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
2405c1ee:	687b      	ldr	r3, [r7, #4]
2405c1f0:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
2405c1f4:	b2db      	uxtb	r3, r3
2405c1f6:	2b00      	cmp	r3, #0
2405c1f8:	d106      	bne.n	2405c208 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
2405c1fa:	687b      	ldr	r3, [r7, #4]
2405c1fc:	2200      	movs	r2, #0
2405c1fe:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
2405c202:	6878      	ldr	r0, [r7, #4]
2405c204:	f7f9 fde0 	bl	24055dc8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
2405c208:	687b      	ldr	r3, [r7, #4]
2405c20a:	2202      	movs	r2, #2
2405c20c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
2405c210:	687b      	ldr	r3, [r7, #4]
2405c212:	681b      	ldr	r3, [r3, #0]
2405c214:	699a      	ldr	r2, [r3, #24]
2405c216:	687b      	ldr	r3, [r7, #4]
2405c218:	681b      	ldr	r3, [r3, #0]
2405c21a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
2405c21e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
2405c220:	687b      	ldr	r3, [r7, #4]
2405c222:	681b      	ldr	r3, [r3, #0]
2405c224:	6999      	ldr	r1, [r3, #24]
2405c226:	687b      	ldr	r3, [r7, #4]
2405c228:	685a      	ldr	r2, [r3, #4]
2405c22a:	687b      	ldr	r3, [r7, #4]
2405c22c:	689b      	ldr	r3, [r3, #8]
2405c22e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
2405c230:	687b      	ldr	r3, [r7, #4]
2405c232:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
2405c234:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
2405c236:	687b      	ldr	r3, [r7, #4]
2405c238:	691b      	ldr	r3, [r3, #16]
2405c23a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
2405c23c:	687b      	ldr	r3, [r7, #4]
2405c23e:	681b      	ldr	r3, [r3, #0]
2405c240:	430a      	orrs	r2, r1
2405c242:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
2405c244:	687b      	ldr	r3, [r7, #4]
2405c246:	681b      	ldr	r3, [r3, #0]
2405c248:	6899      	ldr	r1, [r3, #8]
2405c24a:	687b      	ldr	r3, [r7, #4]
2405c24c:	681a      	ldr	r2, [r3, #0]
2405c24e:	4b4a      	ldr	r3, [pc, #296]	@ (2405c378 <HAL_LTDC_Init+0x19c>)
2405c250:	400b      	ands	r3, r1
2405c252:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
2405c254:	687b      	ldr	r3, [r7, #4]
2405c256:	695b      	ldr	r3, [r3, #20]
2405c258:	041b      	lsls	r3, r3, #16
2405c25a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
2405c25c:	687b      	ldr	r3, [r7, #4]
2405c25e:	681b      	ldr	r3, [r3, #0]
2405c260:	6899      	ldr	r1, [r3, #8]
2405c262:	687b      	ldr	r3, [r7, #4]
2405c264:	699a      	ldr	r2, [r3, #24]
2405c266:	68fb      	ldr	r3, [r7, #12]
2405c268:	431a      	orrs	r2, r3
2405c26a:	687b      	ldr	r3, [r7, #4]
2405c26c:	681b      	ldr	r3, [r3, #0]
2405c26e:	430a      	orrs	r2, r1
2405c270:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
2405c272:	687b      	ldr	r3, [r7, #4]
2405c274:	681b      	ldr	r3, [r3, #0]
2405c276:	68d9      	ldr	r1, [r3, #12]
2405c278:	687b      	ldr	r3, [r7, #4]
2405c27a:	681a      	ldr	r2, [r3, #0]
2405c27c:	4b3e      	ldr	r3, [pc, #248]	@ (2405c378 <HAL_LTDC_Init+0x19c>)
2405c27e:	400b      	ands	r3, r1
2405c280:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
2405c282:	687b      	ldr	r3, [r7, #4]
2405c284:	69db      	ldr	r3, [r3, #28]
2405c286:	041b      	lsls	r3, r3, #16
2405c288:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
2405c28a:	687b      	ldr	r3, [r7, #4]
2405c28c:	681b      	ldr	r3, [r3, #0]
2405c28e:	68d9      	ldr	r1, [r3, #12]
2405c290:	687b      	ldr	r3, [r7, #4]
2405c292:	6a1a      	ldr	r2, [r3, #32]
2405c294:	68fb      	ldr	r3, [r7, #12]
2405c296:	431a      	orrs	r2, r3
2405c298:	687b      	ldr	r3, [r7, #4]
2405c29a:	681b      	ldr	r3, [r3, #0]
2405c29c:	430a      	orrs	r2, r1
2405c29e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
2405c2a0:	687b      	ldr	r3, [r7, #4]
2405c2a2:	681b      	ldr	r3, [r3, #0]
2405c2a4:	6919      	ldr	r1, [r3, #16]
2405c2a6:	687b      	ldr	r3, [r7, #4]
2405c2a8:	681a      	ldr	r2, [r3, #0]
2405c2aa:	4b33      	ldr	r3, [pc, #204]	@ (2405c378 <HAL_LTDC_Init+0x19c>)
2405c2ac:	400b      	ands	r3, r1
2405c2ae:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
2405c2b0:	687b      	ldr	r3, [r7, #4]
2405c2b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2405c2b4:	041b      	lsls	r3, r3, #16
2405c2b6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
2405c2b8:	687b      	ldr	r3, [r7, #4]
2405c2ba:	681b      	ldr	r3, [r3, #0]
2405c2bc:	6919      	ldr	r1, [r3, #16]
2405c2be:	687b      	ldr	r3, [r7, #4]
2405c2c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
2405c2c2:	68fb      	ldr	r3, [r7, #12]
2405c2c4:	431a      	orrs	r2, r3
2405c2c6:	687b      	ldr	r3, [r7, #4]
2405c2c8:	681b      	ldr	r3, [r3, #0]
2405c2ca:	430a      	orrs	r2, r1
2405c2cc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
2405c2ce:	687b      	ldr	r3, [r7, #4]
2405c2d0:	681b      	ldr	r3, [r3, #0]
2405c2d2:	6959      	ldr	r1, [r3, #20]
2405c2d4:	687b      	ldr	r3, [r7, #4]
2405c2d6:	681a      	ldr	r2, [r3, #0]
2405c2d8:	4b27      	ldr	r3, [pc, #156]	@ (2405c378 <HAL_LTDC_Init+0x19c>)
2405c2da:	400b      	ands	r3, r1
2405c2dc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
2405c2de:	687b      	ldr	r3, [r7, #4]
2405c2e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2405c2e2:	041b      	lsls	r3, r3, #16
2405c2e4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
2405c2e6:	687b      	ldr	r3, [r7, #4]
2405c2e8:	681b      	ldr	r3, [r3, #0]
2405c2ea:	6959      	ldr	r1, [r3, #20]
2405c2ec:	687b      	ldr	r3, [r7, #4]
2405c2ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
2405c2f0:	68fb      	ldr	r3, [r7, #12]
2405c2f2:	431a      	orrs	r2, r3
2405c2f4:	687b      	ldr	r3, [r7, #4]
2405c2f6:	681b      	ldr	r3, [r3, #0]
2405c2f8:	430a      	orrs	r2, r1
2405c2fa:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
2405c2fc:	687b      	ldr	r3, [r7, #4]
2405c2fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
2405c302:	021b      	lsls	r3, r3, #8
2405c304:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
2405c306:	687b      	ldr	r3, [r7, #4]
2405c308:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
2405c30c:	041b      	lsls	r3, r3, #16
2405c30e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
2405c310:	687b      	ldr	r3, [r7, #4]
2405c312:	681b      	ldr	r3, [r3, #0]
2405c314:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
2405c316:	687b      	ldr	r3, [r7, #4]
2405c318:	681b      	ldr	r3, [r3, #0]
2405c31a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
2405c31e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
2405c320:	687b      	ldr	r3, [r7, #4]
2405c322:	681b      	ldr	r3, [r3, #0]
2405c324:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
2405c326:	68ba      	ldr	r2, [r7, #8]
2405c328:	68fb      	ldr	r3, [r7, #12]
2405c32a:	4313      	orrs	r3, r2
2405c32c:	687a      	ldr	r2, [r7, #4]
2405c32e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
2405c332:	431a      	orrs	r2, r3
2405c334:	687b      	ldr	r3, [r7, #4]
2405c336:	681b      	ldr	r3, [r3, #0]
2405c338:	430a      	orrs	r2, r1
2405c33a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
2405c33c:	687b      	ldr	r3, [r7, #4]
2405c33e:	681b      	ldr	r3, [r3, #0]
2405c340:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
2405c342:	687b      	ldr	r3, [r7, #4]
2405c344:	681b      	ldr	r3, [r3, #0]
2405c346:	f042 0206 	orr.w	r2, r2, #6
2405c34a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
2405c34c:	687b      	ldr	r3, [r7, #4]
2405c34e:	681b      	ldr	r3, [r3, #0]
2405c350:	699a      	ldr	r2, [r3, #24]
2405c352:	687b      	ldr	r3, [r7, #4]
2405c354:	681b      	ldr	r3, [r3, #0]
2405c356:	f042 0201 	orr.w	r2, r2, #1
2405c35a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
2405c35c:	687b      	ldr	r3, [r7, #4]
2405c35e:	2200      	movs	r2, #0
2405c360:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
2405c364:	687b      	ldr	r3, [r7, #4]
2405c366:	2201      	movs	r2, #1
2405c368:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
2405c36c:	2300      	movs	r3, #0
}
2405c36e:	4618      	mov	r0, r3
2405c370:	3710      	adds	r7, #16
2405c372:	46bd      	mov	sp, r7
2405c374:	bd80      	pop	{r7, pc}
2405c376:	bf00      	nop
2405c378:	f000f800 	.word	0xf000f800

2405c37c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
2405c37c:	b580      	push	{r7, lr}
2405c37e:	b084      	sub	sp, #16
2405c380:	af00      	add	r7, sp, #0
2405c382:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
2405c384:	687b      	ldr	r3, [r7, #4]
2405c386:	681b      	ldr	r3, [r3, #0]
2405c388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2405c38a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
2405c38c:	687b      	ldr	r3, [r7, #4]
2405c38e:	681b      	ldr	r3, [r3, #0]
2405c390:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
2405c392:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
2405c394:	68fb      	ldr	r3, [r7, #12]
2405c396:	f003 0304 	and.w	r3, r3, #4
2405c39a:	2b00      	cmp	r3, #0
2405c39c:	d023      	beq.n	2405c3e6 <HAL_LTDC_IRQHandler+0x6a>
2405c39e:	68bb      	ldr	r3, [r7, #8]
2405c3a0:	f003 0304 	and.w	r3, r3, #4
2405c3a4:	2b00      	cmp	r3, #0
2405c3a6:	d01e      	beq.n	2405c3e6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
2405c3a8:	687b      	ldr	r3, [r7, #4]
2405c3aa:	681b      	ldr	r3, [r3, #0]
2405c3ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
2405c3ae:	687b      	ldr	r3, [r7, #4]
2405c3b0:	681b      	ldr	r3, [r3, #0]
2405c3b2:	f022 0204 	bic.w	r2, r2, #4
2405c3b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
2405c3b8:	687b      	ldr	r3, [r7, #4]
2405c3ba:	681b      	ldr	r3, [r3, #0]
2405c3bc:	2204      	movs	r2, #4
2405c3be:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
2405c3c0:	687b      	ldr	r3, [r7, #4]
2405c3c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
2405c3c6:	f043 0201 	orr.w	r2, r3, #1
2405c3ca:	687b      	ldr	r3, [r7, #4]
2405c3cc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
2405c3d0:	687b      	ldr	r3, [r7, #4]
2405c3d2:	2204      	movs	r2, #4
2405c3d4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
2405c3d8:	687b      	ldr	r3, [r7, #4]
2405c3da:	2200      	movs	r2, #0
2405c3dc:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
2405c3e0:	6878      	ldr	r0, [r7, #4]
2405c3e2:	f000 f86f 	bl	2405c4c4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
2405c3e6:	68fb      	ldr	r3, [r7, #12]
2405c3e8:	f003 0302 	and.w	r3, r3, #2
2405c3ec:	2b00      	cmp	r3, #0
2405c3ee:	d023      	beq.n	2405c438 <HAL_LTDC_IRQHandler+0xbc>
2405c3f0:	68bb      	ldr	r3, [r7, #8]
2405c3f2:	f003 0302 	and.w	r3, r3, #2
2405c3f6:	2b00      	cmp	r3, #0
2405c3f8:	d01e      	beq.n	2405c438 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
2405c3fa:	687b      	ldr	r3, [r7, #4]
2405c3fc:	681b      	ldr	r3, [r3, #0]
2405c3fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
2405c400:	687b      	ldr	r3, [r7, #4]
2405c402:	681b      	ldr	r3, [r3, #0]
2405c404:	f022 0202 	bic.w	r2, r2, #2
2405c408:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
2405c40a:	687b      	ldr	r3, [r7, #4]
2405c40c:	681b      	ldr	r3, [r3, #0]
2405c40e:	2202      	movs	r2, #2
2405c410:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
2405c412:	687b      	ldr	r3, [r7, #4]
2405c414:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
2405c418:	f043 0202 	orr.w	r2, r3, #2
2405c41c:	687b      	ldr	r3, [r7, #4]
2405c41e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
2405c422:	687b      	ldr	r3, [r7, #4]
2405c424:	2204      	movs	r2, #4
2405c426:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
2405c42a:	687b      	ldr	r3, [r7, #4]
2405c42c:	2200      	movs	r2, #0
2405c42e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
2405c432:	6878      	ldr	r0, [r7, #4]
2405c434:	f000 f846 	bl	2405c4c4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
2405c438:	68fb      	ldr	r3, [r7, #12]
2405c43a:	f003 0301 	and.w	r3, r3, #1
2405c43e:	2b00      	cmp	r3, #0
2405c440:	d01b      	beq.n	2405c47a <HAL_LTDC_IRQHandler+0xfe>
2405c442:	68bb      	ldr	r3, [r7, #8]
2405c444:	f003 0301 	and.w	r3, r3, #1
2405c448:	2b00      	cmp	r3, #0
2405c44a:	d016      	beq.n	2405c47a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
2405c44c:	687b      	ldr	r3, [r7, #4]
2405c44e:	681b      	ldr	r3, [r3, #0]
2405c450:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
2405c452:	687b      	ldr	r3, [r7, #4]
2405c454:	681b      	ldr	r3, [r3, #0]
2405c456:	f022 0201 	bic.w	r2, r2, #1
2405c45a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
2405c45c:	687b      	ldr	r3, [r7, #4]
2405c45e:	681b      	ldr	r3, [r3, #0]
2405c460:	2201      	movs	r2, #1
2405c462:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
2405c464:	687b      	ldr	r3, [r7, #4]
2405c466:	2201      	movs	r2, #1
2405c468:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
2405c46c:	687b      	ldr	r3, [r7, #4]
2405c46e:	2200      	movs	r2, #0
2405c470:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
2405c474:	6878      	ldr	r0, [r7, #4]
2405c476:	f000 f82f 	bl	2405c4d8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
2405c47a:	68fb      	ldr	r3, [r7, #12]
2405c47c:	f003 0308 	and.w	r3, r3, #8
2405c480:	2b00      	cmp	r3, #0
2405c482:	d01b      	beq.n	2405c4bc <HAL_LTDC_IRQHandler+0x140>
2405c484:	68bb      	ldr	r3, [r7, #8]
2405c486:	f003 0308 	and.w	r3, r3, #8
2405c48a:	2b00      	cmp	r3, #0
2405c48c:	d016      	beq.n	2405c4bc <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
2405c48e:	687b      	ldr	r3, [r7, #4]
2405c490:	681b      	ldr	r3, [r3, #0]
2405c492:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
2405c494:	687b      	ldr	r3, [r7, #4]
2405c496:	681b      	ldr	r3, [r3, #0]
2405c498:	f022 0208 	bic.w	r2, r2, #8
2405c49c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
2405c49e:	687b      	ldr	r3, [r7, #4]
2405c4a0:	681b      	ldr	r3, [r3, #0]
2405c4a2:	2208      	movs	r2, #8
2405c4a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
2405c4a6:	687b      	ldr	r3, [r7, #4]
2405c4a8:	2201      	movs	r2, #1
2405c4aa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
2405c4ae:	687b      	ldr	r3, [r7, #4]
2405c4b0:	2200      	movs	r2, #0
2405c4b2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
2405c4b6:	6878      	ldr	r0, [r7, #4]
2405c4b8:	f7f7 fcc0 	bl	24053e3c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
2405c4bc:	bf00      	nop
2405c4be:	3710      	adds	r7, #16
2405c4c0:	46bd      	mov	sp, r7
2405c4c2:	bd80      	pop	{r7, pc}

2405c4c4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
2405c4c4:	b480      	push	{r7}
2405c4c6:	b083      	sub	sp, #12
2405c4c8:	af00      	add	r7, sp, #0
2405c4ca:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
2405c4cc:	bf00      	nop
2405c4ce:	370c      	adds	r7, #12
2405c4d0:	46bd      	mov	sp, r7
2405c4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
2405c4d6:	4770      	bx	lr

2405c4d8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
2405c4d8:	b480      	push	{r7}
2405c4da:	b083      	sub	sp, #12
2405c4dc:	af00      	add	r7, sp, #0
2405c4de:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
2405c4e0:	bf00      	nop
2405c4e2:	370c      	adds	r7, #12
2405c4e4:	46bd      	mov	sp, r7
2405c4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
2405c4ea:	4770      	bx	lr

2405c4ec <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
2405c4ec:	b5b0      	push	{r4, r5, r7, lr}
2405c4ee:	b084      	sub	sp, #16
2405c4f0:	af00      	add	r7, sp, #0
2405c4f2:	60f8      	str	r0, [r7, #12]
2405c4f4:	60b9      	str	r1, [r7, #8]
2405c4f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
2405c4f8:	68fb      	ldr	r3, [r7, #12]
2405c4fa:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
2405c4fe:	2b01      	cmp	r3, #1
2405c500:	d101      	bne.n	2405c506 <HAL_LTDC_ConfigLayer+0x1a>
2405c502:	2302      	movs	r3, #2
2405c504:	e02c      	b.n	2405c560 <HAL_LTDC_ConfigLayer+0x74>
2405c506:	68fb      	ldr	r3, [r7, #12]
2405c508:	2201      	movs	r2, #1
2405c50a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
2405c50e:	68fb      	ldr	r3, [r7, #12]
2405c510:	2202      	movs	r2, #2
2405c512:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
2405c516:	68fa      	ldr	r2, [r7, #12]
2405c518:	687b      	ldr	r3, [r7, #4]
2405c51a:	2134      	movs	r1, #52	@ 0x34
2405c51c:	fb01 f303 	mul.w	r3, r1, r3
2405c520:	4413      	add	r3, r2
2405c522:	f103 0238 	add.w	r2, r3, #56	@ 0x38
2405c526:	68bb      	ldr	r3, [r7, #8]
2405c528:	4614      	mov	r4, r2
2405c52a:	461d      	mov	r5, r3
2405c52c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
2405c52e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
2405c530:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
2405c532:	c40f      	stmia	r4!, {r0, r1, r2, r3}
2405c534:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
2405c536:	c40f      	stmia	r4!, {r0, r1, r2, r3}
2405c538:	682b      	ldr	r3, [r5, #0]
2405c53a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
2405c53c:	687a      	ldr	r2, [r7, #4]
2405c53e:	68b9      	ldr	r1, [r7, #8]
2405c540:	68f8      	ldr	r0, [r7, #12]
2405c542:	f000 f877 	bl	2405c634 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
2405c546:	68fb      	ldr	r3, [r7, #12]
2405c548:	681b      	ldr	r3, [r3, #0]
2405c54a:	2201      	movs	r2, #1
2405c54c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
2405c54e:	68fb      	ldr	r3, [r7, #12]
2405c550:	2201      	movs	r2, #1
2405c552:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
2405c556:	68fb      	ldr	r3, [r7, #12]
2405c558:	2200      	movs	r2, #0
2405c55a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
2405c55e:	2300      	movs	r3, #0
}
2405c560:	4618      	mov	r0, r3
2405c562:	3710      	adds	r7, #16
2405c564:	46bd      	mov	sp, r7
2405c566:	bdb0      	pop	{r4, r5, r7, pc}

2405c568 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
2405c568:	b580      	push	{r7, lr}
2405c56a:	b086      	sub	sp, #24
2405c56c:	af00      	add	r7, sp, #0
2405c56e:	60f8      	str	r0, [r7, #12]
2405c570:	60b9      	str	r1, [r7, #8]
2405c572:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
2405c574:	68fb      	ldr	r3, [r7, #12]
2405c576:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
2405c57a:	2b01      	cmp	r3, #1
2405c57c:	d101      	bne.n	2405c582 <HAL_LTDC_SetAddress+0x1a>
2405c57e:	2302      	movs	r3, #2
2405c580:	e024      	b.n	2405c5cc <HAL_LTDC_SetAddress+0x64>
2405c582:	68fb      	ldr	r3, [r7, #12]
2405c584:	2201      	movs	r2, #1
2405c586:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
2405c58a:	68fb      	ldr	r3, [r7, #12]
2405c58c:	2202      	movs	r2, #2
2405c58e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
2405c592:	687b      	ldr	r3, [r7, #4]
2405c594:	2234      	movs	r2, #52	@ 0x34
2405c596:	fb02 f303 	mul.w	r3, r2, r3
2405c59a:	3338      	adds	r3, #56	@ 0x38
2405c59c:	68fa      	ldr	r2, [r7, #12]
2405c59e:	4413      	add	r3, r2
2405c5a0:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
2405c5a2:	697b      	ldr	r3, [r7, #20]
2405c5a4:	68ba      	ldr	r2, [r7, #8]
2405c5a6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
2405c5a8:	687a      	ldr	r2, [r7, #4]
2405c5aa:	6979      	ldr	r1, [r7, #20]
2405c5ac:	68f8      	ldr	r0, [r7, #12]
2405c5ae:	f000 f841 	bl	2405c634 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
2405c5b2:	68fb      	ldr	r3, [r7, #12]
2405c5b4:	681b      	ldr	r3, [r3, #0]
2405c5b6:	2201      	movs	r2, #1
2405c5b8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
2405c5ba:	68fb      	ldr	r3, [r7, #12]
2405c5bc:	2201      	movs	r2, #1
2405c5be:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
2405c5c2:	68fb      	ldr	r3, [r7, #12]
2405c5c4:	2200      	movs	r2, #0
2405c5c6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
2405c5ca:	2300      	movs	r3, #0
}
2405c5cc:	4618      	mov	r0, r3
2405c5ce:	3718      	adds	r7, #24
2405c5d0:	46bd      	mov	sp, r7
2405c5d2:	bd80      	pop	{r7, pc}

2405c5d4 <HAL_LTDC_Reload>:
  *                      LTDC_RELOAD_VERTICAL_BLANKING  : Reload in the next Vertical Blanking
  * @note   User application may resort to HAL_LTDC_ReloadEventCallback() at reload interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef  HAL_LTDC_Reload(LTDC_HandleTypeDef *hltdc, uint32_t ReloadType)
{
2405c5d4:	b480      	push	{r7}
2405c5d6:	b083      	sub	sp, #12
2405c5d8:	af00      	add	r7, sp, #0
2405c5da:	6078      	str	r0, [r7, #4]
2405c5dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_RELOAD(ReloadType));

  /* Process locked */
  __HAL_LOCK(hltdc);
2405c5de:	687b      	ldr	r3, [r7, #4]
2405c5e0:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
2405c5e4:	2b01      	cmp	r3, #1
2405c5e6:	d101      	bne.n	2405c5ec <HAL_LTDC_Reload+0x18>
2405c5e8:	2302      	movs	r3, #2
2405c5ea:	e01c      	b.n	2405c626 <HAL_LTDC_Reload+0x52>
2405c5ec:	687b      	ldr	r3, [r7, #4]
2405c5ee:	2201      	movs	r2, #1
2405c5f0:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
2405c5f4:	687b      	ldr	r3, [r7, #4]
2405c5f6:	2202      	movs	r2, #2
2405c5f8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable the Reload interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
2405c5fc:	687b      	ldr	r3, [r7, #4]
2405c5fe:	681b      	ldr	r3, [r3, #0]
2405c600:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
2405c602:	687b      	ldr	r3, [r7, #4]
2405c604:	681b      	ldr	r3, [r3, #0]
2405c606:	f042 0208 	orr.w	r2, r2, #8
2405c60a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Apply Reload type */
  hltdc->Instance->SRCR = ReloadType;
2405c60c:	687b      	ldr	r3, [r7, #4]
2405c60e:	681b      	ldr	r3, [r3, #0]
2405c610:	683a      	ldr	r2, [r7, #0]
2405c612:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
2405c614:	687b      	ldr	r3, [r7, #4]
2405c616:	2201      	movs	r2, #1
2405c618:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
2405c61c:	687b      	ldr	r3, [r7, #4]
2405c61e:	2200      	movs	r2, #0
2405c620:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
2405c624:	2300      	movs	r3, #0
}
2405c626:	4618      	mov	r0, r3
2405c628:	370c      	adds	r7, #12
2405c62a:	46bd      	mov	sp, r7
2405c62c:	f85d 7b04 	ldr.w	r7, [sp], #4
2405c630:	4770      	bx	lr
	...

2405c634 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
2405c634:	b480      	push	{r7}
2405c636:	b089      	sub	sp, #36	@ 0x24
2405c638:	af00      	add	r7, sp, #0
2405c63a:	60f8      	str	r0, [r7, #12]
2405c63c:	60b9      	str	r1, [r7, #8]
2405c63e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
2405c640:	68bb      	ldr	r3, [r7, #8]
2405c642:	685a      	ldr	r2, [r3, #4]
2405c644:	68fb      	ldr	r3, [r7, #12]
2405c646:	681b      	ldr	r3, [r3, #0]
2405c648:	68db      	ldr	r3, [r3, #12]
2405c64a:	0c1b      	lsrs	r3, r3, #16
2405c64c:	f3c3 030b 	ubfx	r3, r3, #0, #12
2405c650:	4413      	add	r3, r2
2405c652:	041b      	lsls	r3, r3, #16
2405c654:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
2405c656:	68fb      	ldr	r3, [r7, #12]
2405c658:	681b      	ldr	r3, [r3, #0]
2405c65a:	461a      	mov	r2, r3
2405c65c:	687b      	ldr	r3, [r7, #4]
2405c65e:	01db      	lsls	r3, r3, #7
2405c660:	4413      	add	r3, r2
2405c662:	3384      	adds	r3, #132	@ 0x84
2405c664:	685b      	ldr	r3, [r3, #4]
2405c666:	68fa      	ldr	r2, [r7, #12]
2405c668:	6812      	ldr	r2, [r2, #0]
2405c66a:	4611      	mov	r1, r2
2405c66c:	687a      	ldr	r2, [r7, #4]
2405c66e:	01d2      	lsls	r2, r2, #7
2405c670:	440a      	add	r2, r1
2405c672:	3284      	adds	r2, #132	@ 0x84
2405c674:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
2405c678:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
2405c67a:	68bb      	ldr	r3, [r7, #8]
2405c67c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
2405c67e:	68fb      	ldr	r3, [r7, #12]
2405c680:	681b      	ldr	r3, [r3, #0]
2405c682:	68db      	ldr	r3, [r3, #12]
2405c684:	0c1b      	lsrs	r3, r3, #16
2405c686:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
2405c68a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
2405c68c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
2405c68e:	68fb      	ldr	r3, [r7, #12]
2405c690:	681b      	ldr	r3, [r3, #0]
2405c692:	4619      	mov	r1, r3
2405c694:	687b      	ldr	r3, [r7, #4]
2405c696:	01db      	lsls	r3, r3, #7
2405c698:	440b      	add	r3, r1
2405c69a:	3384      	adds	r3, #132	@ 0x84
2405c69c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
2405c69e:	69fb      	ldr	r3, [r7, #28]
2405c6a0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
2405c6a2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
2405c6a4:	68bb      	ldr	r3, [r7, #8]
2405c6a6:	68da      	ldr	r2, [r3, #12]
2405c6a8:	68fb      	ldr	r3, [r7, #12]
2405c6aa:	681b      	ldr	r3, [r3, #0]
2405c6ac:	68db      	ldr	r3, [r3, #12]
2405c6ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
2405c6b2:	4413      	add	r3, r2
2405c6b4:	041b      	lsls	r3, r3, #16
2405c6b6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
2405c6b8:	68fb      	ldr	r3, [r7, #12]
2405c6ba:	681b      	ldr	r3, [r3, #0]
2405c6bc:	461a      	mov	r2, r3
2405c6be:	687b      	ldr	r3, [r7, #4]
2405c6c0:	01db      	lsls	r3, r3, #7
2405c6c2:	4413      	add	r3, r2
2405c6c4:	3384      	adds	r3, #132	@ 0x84
2405c6c6:	689b      	ldr	r3, [r3, #8]
2405c6c8:	68fa      	ldr	r2, [r7, #12]
2405c6ca:	6812      	ldr	r2, [r2, #0]
2405c6cc:	4611      	mov	r1, r2
2405c6ce:	687a      	ldr	r2, [r7, #4]
2405c6d0:	01d2      	lsls	r2, r2, #7
2405c6d2:	440a      	add	r2, r1
2405c6d4:	3284      	adds	r2, #132	@ 0x84
2405c6d6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
2405c6da:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
2405c6dc:	68bb      	ldr	r3, [r7, #8]
2405c6de:	689a      	ldr	r2, [r3, #8]
2405c6e0:	68fb      	ldr	r3, [r7, #12]
2405c6e2:	681b      	ldr	r3, [r3, #0]
2405c6e4:	68db      	ldr	r3, [r3, #12]
2405c6e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
2405c6ea:	4413      	add	r3, r2
2405c6ec:	1c5a      	adds	r2, r3, #1
2405c6ee:	68fb      	ldr	r3, [r7, #12]
2405c6f0:	681b      	ldr	r3, [r3, #0]
2405c6f2:	4619      	mov	r1, r3
2405c6f4:	687b      	ldr	r3, [r7, #4]
2405c6f6:	01db      	lsls	r3, r3, #7
2405c6f8:	440b      	add	r3, r1
2405c6fa:	3384      	adds	r3, #132	@ 0x84
2405c6fc:	4619      	mov	r1, r3
2405c6fe:	69fb      	ldr	r3, [r7, #28]
2405c700:	4313      	orrs	r3, r2
2405c702:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
2405c704:	68fb      	ldr	r3, [r7, #12]
2405c706:	681b      	ldr	r3, [r3, #0]
2405c708:	461a      	mov	r2, r3
2405c70a:	687b      	ldr	r3, [r7, #4]
2405c70c:	01db      	lsls	r3, r3, #7
2405c70e:	4413      	add	r3, r2
2405c710:	3384      	adds	r3, #132	@ 0x84
2405c712:	691b      	ldr	r3, [r3, #16]
2405c714:	68fa      	ldr	r2, [r7, #12]
2405c716:	6812      	ldr	r2, [r2, #0]
2405c718:	4611      	mov	r1, r2
2405c71a:	687a      	ldr	r2, [r7, #4]
2405c71c:	01d2      	lsls	r2, r2, #7
2405c71e:	440a      	add	r2, r1
2405c720:	3284      	adds	r2, #132	@ 0x84
2405c722:	f023 0307 	bic.w	r3, r3, #7
2405c726:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
2405c728:	68fb      	ldr	r3, [r7, #12]
2405c72a:	681b      	ldr	r3, [r3, #0]
2405c72c:	461a      	mov	r2, r3
2405c72e:	687b      	ldr	r3, [r7, #4]
2405c730:	01db      	lsls	r3, r3, #7
2405c732:	4413      	add	r3, r2
2405c734:	3384      	adds	r3, #132	@ 0x84
2405c736:	461a      	mov	r2, r3
2405c738:	68bb      	ldr	r3, [r7, #8]
2405c73a:	691b      	ldr	r3, [r3, #16]
2405c73c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
2405c73e:	68bb      	ldr	r3, [r7, #8]
2405c740:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
2405c744:	021b      	lsls	r3, r3, #8
2405c746:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
2405c748:	68bb      	ldr	r3, [r7, #8]
2405c74a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
2405c74e:	041b      	lsls	r3, r3, #16
2405c750:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
2405c752:	68bb      	ldr	r3, [r7, #8]
2405c754:	699b      	ldr	r3, [r3, #24]
2405c756:	061b      	lsls	r3, r3, #24
2405c758:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
2405c75a:	68fb      	ldr	r3, [r7, #12]
2405c75c:	681b      	ldr	r3, [r3, #0]
2405c75e:	461a      	mov	r2, r3
2405c760:	687b      	ldr	r3, [r7, #4]
2405c762:	01db      	lsls	r3, r3, #7
2405c764:	4413      	add	r3, r2
2405c766:	3384      	adds	r3, #132	@ 0x84
2405c768:	699b      	ldr	r3, [r3, #24]
2405c76a:	68fb      	ldr	r3, [r7, #12]
2405c76c:	681b      	ldr	r3, [r3, #0]
2405c76e:	461a      	mov	r2, r3
2405c770:	687b      	ldr	r3, [r7, #4]
2405c772:	01db      	lsls	r3, r3, #7
2405c774:	4413      	add	r3, r2
2405c776:	3384      	adds	r3, #132	@ 0x84
2405c778:	461a      	mov	r2, r3
2405c77a:	2300      	movs	r3, #0
2405c77c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
2405c77e:	68bb      	ldr	r3, [r7, #8]
2405c780:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
2405c784:	461a      	mov	r2, r3
2405c786:	69fb      	ldr	r3, [r7, #28]
2405c788:	431a      	orrs	r2, r3
2405c78a:	69bb      	ldr	r3, [r7, #24]
2405c78c:	431a      	orrs	r2, r3
2405c78e:	68fb      	ldr	r3, [r7, #12]
2405c790:	681b      	ldr	r3, [r3, #0]
2405c792:	4619      	mov	r1, r3
2405c794:	687b      	ldr	r3, [r7, #4]
2405c796:	01db      	lsls	r3, r3, #7
2405c798:	440b      	add	r3, r1
2405c79a:	3384      	adds	r3, #132	@ 0x84
2405c79c:	4619      	mov	r1, r3
2405c79e:	697b      	ldr	r3, [r7, #20]
2405c7a0:	4313      	orrs	r3, r2
2405c7a2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
2405c7a4:	68fb      	ldr	r3, [r7, #12]
2405c7a6:	681b      	ldr	r3, [r3, #0]
2405c7a8:	461a      	mov	r2, r3
2405c7aa:	687b      	ldr	r3, [r7, #4]
2405c7ac:	01db      	lsls	r3, r3, #7
2405c7ae:	4413      	add	r3, r2
2405c7b0:	3384      	adds	r3, #132	@ 0x84
2405c7b2:	695b      	ldr	r3, [r3, #20]
2405c7b4:	68fa      	ldr	r2, [r7, #12]
2405c7b6:	6812      	ldr	r2, [r2, #0]
2405c7b8:	4611      	mov	r1, r2
2405c7ba:	687a      	ldr	r2, [r7, #4]
2405c7bc:	01d2      	lsls	r2, r2, #7
2405c7be:	440a      	add	r2, r1
2405c7c0:	3284      	adds	r2, #132	@ 0x84
2405c7c2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
2405c7c6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
2405c7c8:	68fb      	ldr	r3, [r7, #12]
2405c7ca:	681b      	ldr	r3, [r3, #0]
2405c7cc:	461a      	mov	r2, r3
2405c7ce:	687b      	ldr	r3, [r7, #4]
2405c7d0:	01db      	lsls	r3, r3, #7
2405c7d2:	4413      	add	r3, r2
2405c7d4:	3384      	adds	r3, #132	@ 0x84
2405c7d6:	461a      	mov	r2, r3
2405c7d8:	68bb      	ldr	r3, [r7, #8]
2405c7da:	695b      	ldr	r3, [r3, #20]
2405c7dc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
2405c7de:	68fb      	ldr	r3, [r7, #12]
2405c7e0:	681b      	ldr	r3, [r3, #0]
2405c7e2:	461a      	mov	r2, r3
2405c7e4:	687b      	ldr	r3, [r7, #4]
2405c7e6:	01db      	lsls	r3, r3, #7
2405c7e8:	4413      	add	r3, r2
2405c7ea:	3384      	adds	r3, #132	@ 0x84
2405c7ec:	69da      	ldr	r2, [r3, #28]
2405c7ee:	68fb      	ldr	r3, [r7, #12]
2405c7f0:	681b      	ldr	r3, [r3, #0]
2405c7f2:	4619      	mov	r1, r3
2405c7f4:	687b      	ldr	r3, [r7, #4]
2405c7f6:	01db      	lsls	r3, r3, #7
2405c7f8:	440b      	add	r3, r1
2405c7fa:	3384      	adds	r3, #132	@ 0x84
2405c7fc:	4619      	mov	r1, r3
2405c7fe:	4b58      	ldr	r3, [pc, #352]	@ (2405c960 <LTDC_SetConfig+0x32c>)
2405c800:	4013      	ands	r3, r2
2405c802:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
2405c804:	68bb      	ldr	r3, [r7, #8]
2405c806:	69da      	ldr	r2, [r3, #28]
2405c808:	68bb      	ldr	r3, [r7, #8]
2405c80a:	6a1b      	ldr	r3, [r3, #32]
2405c80c:	68f9      	ldr	r1, [r7, #12]
2405c80e:	6809      	ldr	r1, [r1, #0]
2405c810:	4608      	mov	r0, r1
2405c812:	6879      	ldr	r1, [r7, #4]
2405c814:	01c9      	lsls	r1, r1, #7
2405c816:	4401      	add	r1, r0
2405c818:	3184      	adds	r1, #132	@ 0x84
2405c81a:	4313      	orrs	r3, r2
2405c81c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
2405c81e:	68fb      	ldr	r3, [r7, #12]
2405c820:	681b      	ldr	r3, [r3, #0]
2405c822:	461a      	mov	r2, r3
2405c824:	687b      	ldr	r3, [r7, #4]
2405c826:	01db      	lsls	r3, r3, #7
2405c828:	4413      	add	r3, r2
2405c82a:	3384      	adds	r3, #132	@ 0x84
2405c82c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
2405c82e:	68fb      	ldr	r3, [r7, #12]
2405c830:	681b      	ldr	r3, [r3, #0]
2405c832:	461a      	mov	r2, r3
2405c834:	687b      	ldr	r3, [r7, #4]
2405c836:	01db      	lsls	r3, r3, #7
2405c838:	4413      	add	r3, r2
2405c83a:	3384      	adds	r3, #132	@ 0x84
2405c83c:	461a      	mov	r2, r3
2405c83e:	2300      	movs	r3, #0
2405c840:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
2405c842:	68fb      	ldr	r3, [r7, #12]
2405c844:	681b      	ldr	r3, [r3, #0]
2405c846:	461a      	mov	r2, r3
2405c848:	687b      	ldr	r3, [r7, #4]
2405c84a:	01db      	lsls	r3, r3, #7
2405c84c:	4413      	add	r3, r2
2405c84e:	3384      	adds	r3, #132	@ 0x84
2405c850:	461a      	mov	r2, r3
2405c852:	68bb      	ldr	r3, [r7, #8]
2405c854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2405c856:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
2405c858:	68bb      	ldr	r3, [r7, #8]
2405c85a:	691b      	ldr	r3, [r3, #16]
2405c85c:	2b00      	cmp	r3, #0
2405c85e:	d102      	bne.n	2405c866 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
2405c860:	2304      	movs	r3, #4
2405c862:	61fb      	str	r3, [r7, #28]
2405c864:	e01b      	b.n	2405c89e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
2405c866:	68bb      	ldr	r3, [r7, #8]
2405c868:	691b      	ldr	r3, [r3, #16]
2405c86a:	2b01      	cmp	r3, #1
2405c86c:	d102      	bne.n	2405c874 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
2405c86e:	2303      	movs	r3, #3
2405c870:	61fb      	str	r3, [r7, #28]
2405c872:	e014      	b.n	2405c89e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
2405c874:	68bb      	ldr	r3, [r7, #8]
2405c876:	691b      	ldr	r3, [r3, #16]
2405c878:	2b04      	cmp	r3, #4
2405c87a:	d00b      	beq.n	2405c894 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
2405c87c:	68bb      	ldr	r3, [r7, #8]
2405c87e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
2405c880:	2b02      	cmp	r3, #2
2405c882:	d007      	beq.n	2405c894 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
2405c884:	68bb      	ldr	r3, [r7, #8]
2405c886:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
2405c888:	2b03      	cmp	r3, #3
2405c88a:	d003      	beq.n	2405c894 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
2405c88c:	68bb      	ldr	r3, [r7, #8]
2405c88e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
2405c890:	2b07      	cmp	r3, #7
2405c892:	d102      	bne.n	2405c89a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
2405c894:	2302      	movs	r3, #2
2405c896:	61fb      	str	r3, [r7, #28]
2405c898:	e001      	b.n	2405c89e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
2405c89a:	2301      	movs	r3, #1
2405c89c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
2405c89e:	68fb      	ldr	r3, [r7, #12]
2405c8a0:	681b      	ldr	r3, [r3, #0]
2405c8a2:	461a      	mov	r2, r3
2405c8a4:	687b      	ldr	r3, [r7, #4]
2405c8a6:	01db      	lsls	r3, r3, #7
2405c8a8:	4413      	add	r3, r2
2405c8aa:	3384      	adds	r3, #132	@ 0x84
2405c8ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2405c8ae:	68fa      	ldr	r2, [r7, #12]
2405c8b0:	6812      	ldr	r2, [r2, #0]
2405c8b2:	4611      	mov	r1, r2
2405c8b4:	687a      	ldr	r2, [r7, #4]
2405c8b6:	01d2      	lsls	r2, r2, #7
2405c8b8:	440a      	add	r2, r1
2405c8ba:	3284      	adds	r2, #132	@ 0x84
2405c8bc:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
2405c8c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
2405c8c2:	68bb      	ldr	r3, [r7, #8]
2405c8c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
2405c8c6:	69fa      	ldr	r2, [r7, #28]
2405c8c8:	fb02 f303 	mul.w	r3, r2, r3
2405c8cc:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
2405c8ce:	68bb      	ldr	r3, [r7, #8]
2405c8d0:	6859      	ldr	r1, [r3, #4]
2405c8d2:	68bb      	ldr	r3, [r7, #8]
2405c8d4:	681b      	ldr	r3, [r3, #0]
2405c8d6:	1acb      	subs	r3, r1, r3
2405c8d8:	69f9      	ldr	r1, [r7, #28]
2405c8da:	fb01 f303 	mul.w	r3, r1, r3
2405c8de:	3307      	adds	r3, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
2405c8e0:	68f9      	ldr	r1, [r7, #12]
2405c8e2:	6809      	ldr	r1, [r1, #0]
2405c8e4:	4608      	mov	r0, r1
2405c8e6:	6879      	ldr	r1, [r7, #4]
2405c8e8:	01c9      	lsls	r1, r1, #7
2405c8ea:	4401      	add	r1, r0
2405c8ec:	3184      	adds	r1, #132	@ 0x84
2405c8ee:	4313      	orrs	r3, r2
2405c8f0:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
2405c8f2:	68fb      	ldr	r3, [r7, #12]
2405c8f4:	681b      	ldr	r3, [r3, #0]
2405c8f6:	461a      	mov	r2, r3
2405c8f8:	687b      	ldr	r3, [r7, #4]
2405c8fa:	01db      	lsls	r3, r3, #7
2405c8fc:	4413      	add	r3, r2
2405c8fe:	3384      	adds	r3, #132	@ 0x84
2405c900:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
2405c902:	68fb      	ldr	r3, [r7, #12]
2405c904:	681b      	ldr	r3, [r3, #0]
2405c906:	4619      	mov	r1, r3
2405c908:	687b      	ldr	r3, [r7, #4]
2405c90a:	01db      	lsls	r3, r3, #7
2405c90c:	440b      	add	r3, r1
2405c90e:	3384      	adds	r3, #132	@ 0x84
2405c910:	4619      	mov	r1, r3
2405c912:	4b14      	ldr	r3, [pc, #80]	@ (2405c964 <LTDC_SetConfig+0x330>)
2405c914:	4013      	ands	r3, r2
2405c916:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
2405c918:	68fb      	ldr	r3, [r7, #12]
2405c91a:	681b      	ldr	r3, [r3, #0]
2405c91c:	461a      	mov	r2, r3
2405c91e:	687b      	ldr	r3, [r7, #4]
2405c920:	01db      	lsls	r3, r3, #7
2405c922:	4413      	add	r3, r2
2405c924:	3384      	adds	r3, #132	@ 0x84
2405c926:	461a      	mov	r2, r3
2405c928:	68bb      	ldr	r3, [r7, #8]
2405c92a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2405c92c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
2405c92e:	68fb      	ldr	r3, [r7, #12]
2405c930:	681b      	ldr	r3, [r3, #0]
2405c932:	461a      	mov	r2, r3
2405c934:	687b      	ldr	r3, [r7, #4]
2405c936:	01db      	lsls	r3, r3, #7
2405c938:	4413      	add	r3, r2
2405c93a:	3384      	adds	r3, #132	@ 0x84
2405c93c:	681b      	ldr	r3, [r3, #0]
2405c93e:	68fa      	ldr	r2, [r7, #12]
2405c940:	6812      	ldr	r2, [r2, #0]
2405c942:	4611      	mov	r1, r2
2405c944:	687a      	ldr	r2, [r7, #4]
2405c946:	01d2      	lsls	r2, r2, #7
2405c948:	440a      	add	r2, r1
2405c94a:	3284      	adds	r2, #132	@ 0x84
2405c94c:	f043 0301 	orr.w	r3, r3, #1
2405c950:	6013      	str	r3, [r2, #0]
}
2405c952:	bf00      	nop
2405c954:	3724      	adds	r7, #36	@ 0x24
2405c956:	46bd      	mov	sp, r7
2405c958:	f85d 7b04 	ldr.w	r7, [sp], #4
2405c95c:	4770      	bx	lr
2405c95e:	bf00      	nop
2405c960:	fffff8f8 	.word	0xfffff8f8
2405c964:	fffff800 	.word	0xfffff800

2405c968 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
2405c968:	b480      	push	{r7}
2405c96a:	b083      	sub	sp, #12
2405c96c:	af00      	add	r7, sp, #0
2405c96e:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
2405c970:	687b      	ldr	r3, [r7, #4]
2405c972:	2b00      	cmp	r3, #0
2405c974:	d101      	bne.n	2405c97a <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
2405c976:	2301      	movs	r3, #1
2405c978:	e017      	b.n	2405c9aa <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
2405c97a:	687b      	ldr	r3, [r7, #4]
2405c97c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
2405c980:	b2db      	uxtb	r3, r3
2405c982:	2b02      	cmp	r3, #2
2405c984:	d004      	beq.n	2405c990 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
2405c986:	687b      	ldr	r3, [r7, #4]
2405c988:	2280      	movs	r2, #128	@ 0x80
2405c98a:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
2405c98c:	2301      	movs	r3, #1
2405c98e:	e00c      	b.n	2405c9aa <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
2405c990:	687b      	ldr	r3, [r7, #4]
2405c992:	2204      	movs	r2, #4
2405c994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
2405c998:	687b      	ldr	r3, [r7, #4]
2405c99a:	681b      	ldr	r3, [r3, #0]
2405c99c:	68da      	ldr	r2, [r3, #12]
2405c99e:	687b      	ldr	r3, [r7, #4]
2405c9a0:	681b      	ldr	r3, [r3, #0]
2405c9a2:	f022 0201 	bic.w	r2, r2, #1
2405c9a6:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
2405c9a8:	2300      	movs	r3, #0
}
2405c9aa:	4618      	mov	r0, r3
2405c9ac:	370c      	adds	r7, #12
2405c9ae:	46bd      	mov	sp, r7
2405c9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
2405c9b4:	4770      	bx	lr
	...

2405c9b8 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
2405c9b8:	b580      	push	{r7, lr}
2405c9ba:	b086      	sub	sp, #24
2405c9bc:	af02      	add	r7, sp, #8
2405c9be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
2405c9c0:	2300      	movs	r3, #0
2405c9c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
2405c9c4:	f7fa f85c 	bl	24056a80 <HAL_GetTick>
2405c9c8:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
2405c9ca:	687b      	ldr	r3, [r7, #4]
2405c9cc:	2b00      	cmp	r3, #0
2405c9ce:	d102      	bne.n	2405c9d6 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
2405c9d0:	2301      	movs	r3, #1
2405c9d2:	73fb      	strb	r3, [r7, #15]
2405c9d4:	e0a5      	b.n	2405cb22 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
2405c9d6:	687b      	ldr	r3, [r7, #4]
2405c9d8:	2200      	movs	r2, #0
2405c9da:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
2405c9dc:	687b      	ldr	r3, [r7, #4]
2405c9de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2405c9e0:	2b00      	cmp	r3, #0
2405c9e2:	f040 809e 	bne.w	2405cb22 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
2405c9e6:	6878      	ldr	r0, [r7, #4]
2405c9e8:	f7f9 fb2c 	bl	24056044 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
2405c9ec:	f241 3188 	movw	r1, #5000	@ 0x1388
2405c9f0:	6878      	ldr	r0, [r7, #4]
2405c9f2:	f000 fc21 	bl	2405d238 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
2405c9f6:	687b      	ldr	r3, [r7, #4]
2405c9f8:	681b      	ldr	r3, [r3, #0]
2405c9fa:	689a      	ldr	r2, [r3, #8]
2405c9fc:	4b4b      	ldr	r3, [pc, #300]	@ (2405cb2c <HAL_OSPI_Init+0x174>)
2405c9fe:	4013      	ands	r3, r2
2405ca00:	687a      	ldr	r2, [r7, #4]
2405ca02:	68d1      	ldr	r1, [r2, #12]
2405ca04:	687a      	ldr	r2, [r7, #4]
2405ca06:	6912      	ldr	r2, [r2, #16]
2405ca08:	3a01      	subs	r2, #1
2405ca0a:	0412      	lsls	r2, r2, #16
2405ca0c:	4311      	orrs	r1, r2
2405ca0e:	687a      	ldr	r2, [r7, #4]
2405ca10:	6952      	ldr	r2, [r2, #20]
2405ca12:	3a01      	subs	r2, #1
2405ca14:	0212      	lsls	r2, r2, #8
2405ca16:	4311      	orrs	r1, r2
2405ca18:	687a      	ldr	r2, [r7, #4]
2405ca1a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
2405ca1c:	4311      	orrs	r1, r2
2405ca1e:	687a      	ldr	r2, [r7, #4]
2405ca20:	69d2      	ldr	r2, [r2, #28]
2405ca22:	4311      	orrs	r1, r2
2405ca24:	687a      	ldr	r2, [r7, #4]
2405ca26:	6812      	ldr	r2, [r2, #0]
2405ca28:	430b      	orrs	r3, r1
2405ca2a:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
2405ca2c:	687b      	ldr	r3, [r7, #4]
2405ca2e:	681b      	ldr	r3, [r3, #0]
2405ca30:	68db      	ldr	r3, [r3, #12]
2405ca32:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
2405ca36:	687b      	ldr	r3, [r7, #4]
2405ca38:	6a1a      	ldr	r2, [r3, #32]
2405ca3a:	687b      	ldr	r3, [r7, #4]
2405ca3c:	681b      	ldr	r3, [r3, #0]
2405ca3e:	430a      	orrs	r2, r1
2405ca40:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
2405ca42:	687b      	ldr	r3, [r7, #4]
2405ca44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2405ca46:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
2405ca48:	687b      	ldr	r3, [r7, #4]
2405ca4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
2405ca4c:	687b      	ldr	r3, [r7, #4]
2405ca4e:	681b      	ldr	r3, [r3, #0]
2405ca50:	430a      	orrs	r2, r1
2405ca52:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
2405ca54:	687b      	ldr	r3, [r7, #4]
2405ca56:	681b      	ldr	r3, [r3, #0]
2405ca58:	687a      	ldr	r2, [r7, #4]
2405ca5a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
2405ca5c:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
2405ca5e:	687b      	ldr	r3, [r7, #4]
2405ca60:	681b      	ldr	r3, [r3, #0]
2405ca62:	681b      	ldr	r3, [r3, #0]
2405ca64:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
2405ca68:	687b      	ldr	r3, [r7, #4]
2405ca6a:	685b      	ldr	r3, [r3, #4]
2405ca6c:	3b01      	subs	r3, #1
2405ca6e:	021a      	lsls	r2, r3, #8
2405ca70:	687b      	ldr	r3, [r7, #4]
2405ca72:	681b      	ldr	r3, [r3, #0]
2405ca74:	430a      	orrs	r2, r1
2405ca76:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
2405ca78:	687b      	ldr	r3, [r7, #4]
2405ca7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
2405ca7c:	9300      	str	r3, [sp, #0]
2405ca7e:	68bb      	ldr	r3, [r7, #8]
2405ca80:	2200      	movs	r2, #0
2405ca82:	2120      	movs	r1, #32
2405ca84:	6878      	ldr	r0, [r7, #4]
2405ca86:	f001 f90b 	bl	2405dca0 <OSPI_WaitFlagStateUntilTimeout>
2405ca8a:	4603      	mov	r3, r0
2405ca8c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
2405ca8e:	7bfb      	ldrb	r3, [r7, #15]
2405ca90:	2b00      	cmp	r3, #0
2405ca92:	d146      	bne.n	2405cb22 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
2405ca94:	687b      	ldr	r3, [r7, #4]
2405ca96:	681b      	ldr	r3, [r3, #0]
2405ca98:	68db      	ldr	r3, [r3, #12]
2405ca9a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
2405ca9e:	687b      	ldr	r3, [r7, #4]
2405caa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2405caa2:	1e5a      	subs	r2, r3, #1
2405caa4:	687b      	ldr	r3, [r7, #4]
2405caa6:	681b      	ldr	r3, [r3, #0]
2405caa8:	430a      	orrs	r2, r1
2405caaa:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
2405caac:	687b      	ldr	r3, [r7, #4]
2405caae:	681b      	ldr	r3, [r3, #0]
2405cab0:	681b      	ldr	r3, [r3, #0]
2405cab2:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
2405cab6:	687b      	ldr	r3, [r7, #4]
2405cab8:	689a      	ldr	r2, [r3, #8]
2405caba:	687b      	ldr	r3, [r7, #4]
2405cabc:	681b      	ldr	r3, [r3, #0]
2405cabe:	430a      	orrs	r2, r1
2405cac0:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
2405cac2:	687b      	ldr	r3, [r7, #4]
2405cac4:	681b      	ldr	r3, [r3, #0]
2405cac6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
2405caca:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
2405cace:	687b      	ldr	r3, [r7, #4]
2405cad0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
2405cad2:	687b      	ldr	r3, [r7, #4]
2405cad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2405cad6:	431a      	orrs	r2, r3
2405cad8:	687b      	ldr	r3, [r7, #4]
2405cada:	681b      	ldr	r3, [r3, #0]
2405cadc:	430a      	orrs	r2, r1
2405cade:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
2405cae2:	687b      	ldr	r3, [r7, #4]
2405cae4:	681b      	ldr	r3, [r3, #0]
2405cae6:	681a      	ldr	r2, [r3, #0]
2405cae8:	687b      	ldr	r3, [r7, #4]
2405caea:	681b      	ldr	r3, [r3, #0]
2405caec:	f042 0201 	orr.w	r2, r2, #1
2405caf0:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
2405caf2:	687b      	ldr	r3, [r7, #4]
2405caf4:	699b      	ldr	r3, [r3, #24]
2405caf6:	2b02      	cmp	r3, #2
2405caf8:	d107      	bne.n	2405cb0a <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
2405cafa:	687b      	ldr	r3, [r7, #4]
2405cafc:	681b      	ldr	r3, [r3, #0]
2405cafe:	689a      	ldr	r2, [r3, #8]
2405cb00:	687b      	ldr	r3, [r7, #4]
2405cb02:	681b      	ldr	r3, [r3, #0]
2405cb04:	f042 0202 	orr.w	r2, r2, #2
2405cb08:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
2405cb0a:	687b      	ldr	r3, [r7, #4]
2405cb0c:	68db      	ldr	r3, [r3, #12]
2405cb0e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
2405cb12:	d103      	bne.n	2405cb1c <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
2405cb14:	687b      	ldr	r3, [r7, #4]
2405cb16:	2201      	movs	r2, #1
2405cb18:	651a      	str	r2, [r3, #80]	@ 0x50
2405cb1a:	e002      	b.n	2405cb22 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
2405cb1c:	687b      	ldr	r3, [r7, #4]
2405cb1e:	2202      	movs	r2, #2
2405cb20:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
2405cb22:	7bfb      	ldrb	r3, [r7, #15]
}
2405cb24:	4618      	mov	r0, r3
2405cb26:	3710      	adds	r7, #16
2405cb28:	46bd      	mov	sp, r7
2405cb2a:	bd80      	pop	{r7, pc}
2405cb2c:	f8e0f8f4 	.word	0xf8e0f8f4

2405cb30 <HAL_OSPI_IRQHandler>:
  * @brief  Handle OSPI interrupt request.
  * @param  hospi : OSPI handle
  * @retval None
  */
void HAL_OSPI_IRQHandler(OSPI_HandleTypeDef *hospi)
{
2405cb30:	b580      	push	{r7, lr}
2405cb32:	b086      	sub	sp, #24
2405cb34:	af00      	add	r7, sp, #0
2405cb36:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
2405cb38:	687b      	ldr	r3, [r7, #4]
2405cb3a:	681b      	ldr	r3, [r3, #0]
2405cb3c:	3350      	adds	r3, #80	@ 0x50
2405cb3e:	617b      	str	r3, [r7, #20]
  uint32_t flag           = hospi->Instance->SR;
2405cb40:	687b      	ldr	r3, [r7, #4]
2405cb42:	681b      	ldr	r3, [r3, #0]
2405cb44:	6a1b      	ldr	r3, [r3, #32]
2405cb46:	613b      	str	r3, [r7, #16]
  uint32_t itsource       = hospi->Instance->CR;
2405cb48:	687b      	ldr	r3, [r7, #4]
2405cb4a:	681b      	ldr	r3, [r3, #0]
2405cb4c:	681b      	ldr	r3, [r3, #0]
2405cb4e:	60fb      	str	r3, [r7, #12]
  uint32_t currentstate   = hospi->State;
2405cb50:	687b      	ldr	r3, [r7, #4]
2405cb52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2405cb54:	60bb      	str	r3, [r7, #8]

  /* OctoSPI fifo threshold interrupt occurred -------------------------------*/
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
2405cb56:	693b      	ldr	r3, [r7, #16]
2405cb58:	f003 0304 	and.w	r3, r3, #4
2405cb5c:	2b00      	cmp	r3, #0
2405cb5e:	d03a      	beq.n	2405cbd6 <HAL_OSPI_IRQHandler+0xa6>
2405cb60:	68fb      	ldr	r3, [r7, #12]
2405cb62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
2405cb66:	2b00      	cmp	r3, #0
2405cb68:	d035      	beq.n	2405cbd6 <HAL_OSPI_IRQHandler+0xa6>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
2405cb6a:	68bb      	ldr	r3, [r7, #8]
2405cb6c:	2b18      	cmp	r3, #24
2405cb6e:	d10f      	bne.n	2405cb90 <HAL_OSPI_IRQHandler+0x60>
    {
      /* Write a data in the fifo */
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
2405cb70:	687b      	ldr	r3, [r7, #4]
2405cb72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2405cb74:	781a      	ldrb	r2, [r3, #0]
2405cb76:	697b      	ldr	r3, [r7, #20]
2405cb78:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
2405cb7a:	687b      	ldr	r3, [r7, #4]
2405cb7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2405cb7e:	1c5a      	adds	r2, r3, #1
2405cb80:	687b      	ldr	r3, [r7, #4]
2405cb82:	641a      	str	r2, [r3, #64]	@ 0x40
      hospi->XferCount--;
2405cb84:	687b      	ldr	r3, [r7, #4]
2405cb86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
2405cb88:	1e5a      	subs	r2, r3, #1
2405cb8a:	687b      	ldr	r3, [r7, #4]
2405cb8c:	649a      	str	r2, [r3, #72]	@ 0x48
2405cb8e:	e012      	b.n	2405cbb6 <HAL_OSPI_IRQHandler+0x86>
    }
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
2405cb90:	68bb      	ldr	r3, [r7, #8]
2405cb92:	2b28      	cmp	r3, #40	@ 0x28
2405cb94:	d10f      	bne.n	2405cbb6 <HAL_OSPI_IRQHandler+0x86>
    {
      /* Read a data from the fifo */
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
2405cb96:	687b      	ldr	r3, [r7, #4]
2405cb98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2405cb9a:	697a      	ldr	r2, [r7, #20]
2405cb9c:	7812      	ldrb	r2, [r2, #0]
2405cb9e:	b2d2      	uxtb	r2, r2
2405cba0:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
2405cba2:	687b      	ldr	r3, [r7, #4]
2405cba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2405cba6:	1c5a      	adds	r2, r3, #1
2405cba8:	687b      	ldr	r3, [r7, #4]
2405cbaa:	641a      	str	r2, [r3, #64]	@ 0x40
      hospi->XferCount--;
2405cbac:	687b      	ldr	r3, [r7, #4]
2405cbae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
2405cbb0:	1e5a      	subs	r2, r3, #1
2405cbb2:	687b      	ldr	r3, [r7, #4]
2405cbb4:	649a      	str	r2, [r3, #72]	@ 0x48
    else
    {
      /* Nothing to do */
    }

    if (hospi->XferCount == 0U)
2405cbb6:	687b      	ldr	r3, [r7, #4]
2405cbb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
2405cbba:	2b00      	cmp	r3, #0
2405cbbc:	d107      	bne.n	2405cbce <HAL_OSPI_IRQHandler+0x9e>
    {
      /* All data have been received or transmitted for the transfer */
      /* Disable fifo threshold interrupt */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
2405cbbe:	687b      	ldr	r3, [r7, #4]
2405cbc0:	681b      	ldr	r3, [r3, #0]
2405cbc2:	681a      	ldr	r2, [r3, #0]
2405cbc4:	687b      	ldr	r3, [r7, #4]
2405cbc6:	681b      	ldr	r3, [r3, #0]
2405cbc8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
2405cbcc:	601a      	str	r2, [r3, #0]

    /* Fifo threshold callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->FifoThresholdCallback(hospi);
#else
    HAL_OSPI_FifoThresholdCallback(hospi);
2405cbce:	6878      	ldr	r0, [r7, #4]
2405cbd0:	f000 faf6 	bl	2405d1c0 <HAL_OSPI_FifoThresholdCallback>
2405cbd4:	e0e7      	b.n	2405cda6 <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
  /* OctoSPI transfer complete interrupt occurred ----------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
2405cbd6:	693b      	ldr	r3, [r7, #16]
2405cbd8:	f003 0302 	and.w	r3, r3, #2
2405cbdc:	2b00      	cmp	r3, #0
2405cbde:	d067      	beq.n	2405ccb0 <HAL_OSPI_IRQHandler+0x180>
2405cbe0:	68fb      	ldr	r3, [r7, #12]
2405cbe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
2405cbe6:	2b00      	cmp	r3, #0
2405cbe8:	d062      	beq.n	2405ccb0 <HAL_OSPI_IRQHandler+0x180>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
2405cbea:	68bb      	ldr	r3, [r7, #8]
2405cbec:	2b28      	cmp	r3, #40	@ 0x28
2405cbee:	d131      	bne.n	2405cc54 <HAL_OSPI_IRQHandler+0x124>
    {
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
2405cbf0:	687b      	ldr	r3, [r7, #4]
2405cbf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
2405cbf4:	2b00      	cmp	r3, #0
2405cbf6:	d015      	beq.n	2405cc24 <HAL_OSPI_IRQHandler+0xf4>
2405cbf8:	693b      	ldr	r3, [r7, #16]
2405cbfa:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
2405cbfe:	2b00      	cmp	r3, #0
2405cc00:	d010      	beq.n	2405cc24 <HAL_OSPI_IRQHandler+0xf4>
      {
        /* Read the last data received in the fifo */
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
2405cc02:	687b      	ldr	r3, [r7, #4]
2405cc04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2405cc06:	697a      	ldr	r2, [r7, #20]
2405cc08:	7812      	ldrb	r2, [r2, #0]
2405cc0a:	b2d2      	uxtb	r2, r2
2405cc0c:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
2405cc0e:	687b      	ldr	r3, [r7, #4]
2405cc10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2405cc12:	1c5a      	adds	r2, r3, #1
2405cc14:	687b      	ldr	r3, [r7, #4]
2405cc16:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
2405cc18:	687b      	ldr	r3, [r7, #4]
2405cc1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
2405cc1c:	1e5a      	subs	r2, r3, #1
2405cc1e:	687b      	ldr	r3, [r7, #4]
2405cc20:	649a      	str	r2, [r3, #72]	@ 0x48
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
2405cc22:	e0bd      	b.n	2405cda0 <HAL_OSPI_IRQHandler+0x270>
      }
      else if (hospi->XferCount == 0U)
2405cc24:	687b      	ldr	r3, [r7, #4]
2405cc26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
2405cc28:	2b00      	cmp	r3, #0
2405cc2a:	f040 80b9 	bne.w	2405cda0 <HAL_OSPI_IRQHandler+0x270>
      {
        /* Clear flag */
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
2405cc2e:	687b      	ldr	r3, [r7, #4]
2405cc30:	681b      	ldr	r3, [r3, #0]
2405cc32:	2202      	movs	r2, #2
2405cc34:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Disable the interrupts */
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
2405cc36:	687b      	ldr	r3, [r7, #4]
2405cc38:	681b      	ldr	r3, [r3, #0]
2405cc3a:	681a      	ldr	r2, [r3, #0]
2405cc3c:	687b      	ldr	r3, [r7, #4]
2405cc3e:	681b      	ldr	r3, [r3, #0]
2405cc40:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
2405cc44:	601a      	str	r2, [r3, #0]

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
2405cc46:	687b      	ldr	r3, [r7, #4]
2405cc48:	2202      	movs	r2, #2
2405cc4a:	651a      	str	r2, [r3, #80]	@ 0x50

        /* RX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->RxCpltCallback(hospi);
#else
        HAL_OSPI_RxCpltCallback(hospi);
2405cc4c:	6878      	ldr	r0, [r7, #4]
2405cc4e:	f000 facb 	bl	2405d1e8 <HAL_OSPI_RxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
2405cc52:	e0a5      	b.n	2405cda0 <HAL_OSPI_IRQHandler+0x270>
      }
    }
    else
    {
      /* Clear flag */
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
2405cc54:	687b      	ldr	r3, [r7, #4]
2405cc56:	681b      	ldr	r3, [r3, #0]
2405cc58:	2202      	movs	r2, #2
2405cc5a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
2405cc5c:	687b      	ldr	r3, [r7, #4]
2405cc5e:	681b      	ldr	r3, [r3, #0]
2405cc60:	681a      	ldr	r2, [r3, #0]
2405cc62:	687b      	ldr	r3, [r7, #4]
2405cc64:	681b      	ldr	r3, [r3, #0]
2405cc66:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
2405cc6a:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
2405cc6c:	687b      	ldr	r3, [r7, #4]
2405cc6e:	2202      	movs	r2, #2
2405cc70:	651a      	str	r2, [r3, #80]	@ 0x50

      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
2405cc72:	68bb      	ldr	r3, [r7, #8]
2405cc74:	2b18      	cmp	r3, #24
2405cc76:	d103      	bne.n	2405cc80 <HAL_OSPI_IRQHandler+0x150>
      {
        /* TX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->TxCpltCallback(hospi);
#else
        HAL_OSPI_TxCpltCallback(hospi);
2405cc78:	6878      	ldr	r0, [r7, #4]
2405cc7a:	f000 fabf 	bl	2405d1fc <HAL_OSPI_TxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
2405cc7e:	e08f      	b.n	2405cda0 <HAL_OSPI_IRQHandler+0x270>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
2405cc80:	68bb      	ldr	r3, [r7, #8]
2405cc82:	2b08      	cmp	r3, #8
2405cc84:	d103      	bne.n	2405cc8e <HAL_OSPI_IRQHandler+0x15e>
      {
        /* Command complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->CmdCpltCallback(hospi);
#else
        HAL_OSPI_CmdCpltCallback(hospi);
2405cc86:	6878      	ldr	r0, [r7, #4]
2405cc88:	f000 faa4 	bl	2405d1d4 <HAL_OSPI_CmdCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
2405cc8c:	e088      	b.n	2405cda0 <HAL_OSPI_IRQHandler+0x270>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_ABORT)
2405cc8e:	68bb      	ldr	r3, [r7, #8]
2405cc90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
2405cc94:	f040 8084 	bne.w	2405cda0 <HAL_OSPI_IRQHandler+0x270>
      {
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
2405cc98:	687b      	ldr	r3, [r7, #4]
2405cc9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
2405cc9c:	2b00      	cmp	r3, #0
2405cc9e:	d103      	bne.n	2405cca8 <HAL_OSPI_IRQHandler+0x178>
          /* Abort called by the user */
          /* Abort complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->AbortCpltCallback(hospi);
#else
          HAL_OSPI_AbortCpltCallback(hospi);
2405cca0:	6878      	ldr	r0, [r7, #4]
2405cca2:	f000 fa83 	bl	2405d1ac <HAL_OSPI_AbortCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
2405cca6:	e07b      	b.n	2405cda0 <HAL_OSPI_IRQHandler+0x270>
          /* Abort due to an error (eg : DMA error) */
          /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->ErrorCallback(hospi);
#else
          HAL_OSPI_ErrorCallback(hospi);
2405cca8:	6878      	ldr	r0, [r7, #4]
2405ccaa:	f000 fa75 	bl	2405d198 <HAL_OSPI_ErrorCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
2405ccae:	e077      	b.n	2405cda0 <HAL_OSPI_IRQHandler+0x270>
        /* Nothing to do */
      }
    }
  }
  /* OctoSPI status match interrupt occurred ---------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
2405ccb0:	693b      	ldr	r3, [r7, #16]
2405ccb2:	f003 0308 	and.w	r3, r3, #8
2405ccb6:	2b00      	cmp	r3, #0
2405ccb8:	d01e      	beq.n	2405ccf8 <HAL_OSPI_IRQHandler+0x1c8>
2405ccba:	68fb      	ldr	r3, [r7, #12]
2405ccbc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
2405ccc0:	2b00      	cmp	r3, #0
2405ccc2:	d019      	beq.n	2405ccf8 <HAL_OSPI_IRQHandler+0x1c8>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
2405ccc4:	687b      	ldr	r3, [r7, #4]
2405ccc6:	681b      	ldr	r3, [r3, #0]
2405ccc8:	2208      	movs	r2, #8
2405ccca:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Check if automatic poll mode stop is activated */
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
2405cccc:	687b      	ldr	r3, [r7, #4]
2405ccce:	681b      	ldr	r3, [r3, #0]
2405ccd0:	681b      	ldr	r3, [r3, #0]
2405ccd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
2405ccd6:	2b00      	cmp	r3, #0
2405ccd8:	d00a      	beq.n	2405ccf0 <HAL_OSPI_IRQHandler+0x1c0>
    {
      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
2405ccda:	687b      	ldr	r3, [r7, #4]
2405ccdc:	681b      	ldr	r3, [r3, #0]
2405ccde:	681a      	ldr	r2, [r3, #0]
2405cce0:	687b      	ldr	r3, [r7, #4]
2405cce2:	681b      	ldr	r3, [r3, #0]
2405cce4:	f422 2210 	bic.w	r2, r2, #589824	@ 0x90000
2405cce8:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
2405ccea:	687b      	ldr	r3, [r7, #4]
2405ccec:	2202      	movs	r2, #2
2405ccee:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Status match callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->StatusMatchCallback(hospi);
#else
    HAL_OSPI_StatusMatchCallback(hospi);
2405ccf0:	6878      	ldr	r0, [r7, #4]
2405ccf2:	f000 fa8d 	bl	2405d210 <HAL_OSPI_StatusMatchCallback>
2405ccf6:	e056      	b.n	2405cda6 <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* OctoSPI transfer error interrupt occurred -------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
2405ccf8:	693b      	ldr	r3, [r7, #16]
2405ccfa:	f003 0301 	and.w	r3, r3, #1
2405ccfe:	2b00      	cmp	r3, #0
2405cd00:	d03c      	beq.n	2405cd7c <HAL_OSPI_IRQHandler+0x24c>
2405cd02:	68fb      	ldr	r3, [r7, #12]
2405cd04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
2405cd08:	2b00      	cmp	r3, #0
2405cd0a:	d037      	beq.n	2405cd7c <HAL_OSPI_IRQHandler+0x24c>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
2405cd0c:	687b      	ldr	r3, [r7, #4]
2405cd0e:	681b      	ldr	r3, [r3, #0]
2405cd10:	2201      	movs	r2, #1
2405cd12:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable all interrupts */
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
2405cd14:	687b      	ldr	r3, [r7, #4]
2405cd16:	681b      	ldr	r3, [r3, #0]
2405cd18:	681a      	ldr	r2, [r3, #0]
2405cd1a:	687b      	ldr	r3, [r7, #4]
2405cd1c:	681b      	ldr	r3, [r3, #0]
2405cd1e:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
2405cd22:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
2405cd24:	687b      	ldr	r3, [r7, #4]
2405cd26:	2202      	movs	r2, #2
2405cd28:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
2405cd2a:	687b      	ldr	r3, [r7, #4]
2405cd2c:	681b      	ldr	r3, [r3, #0]
2405cd2e:	681b      	ldr	r3, [r3, #0]
2405cd30:	f003 0304 	and.w	r3, r3, #4
2405cd34:	2b00      	cmp	r3, #0
2405cd36:	d01a      	beq.n	2405cd6e <HAL_OSPI_IRQHandler+0x23e>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
2405cd38:	687b      	ldr	r3, [r7, #4]
2405cd3a:	681b      	ldr	r3, [r3, #0]
2405cd3c:	681a      	ldr	r2, [r3, #0]
2405cd3e:	687b      	ldr	r3, [r7, #4]
2405cd40:	681b      	ldr	r3, [r3, #0]
2405cd42:	f022 0204 	bic.w	r2, r2, #4
2405cd46:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      hospi->hmdma->XferAbortCallback = OSPI_DMAAbortCplt;
2405cd48:	687b      	ldr	r3, [r7, #4]
2405cd4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2405cd4c:	4a18      	ldr	r2, [pc, #96]	@ (2405cdb0 <HAL_OSPI_IRQHandler+0x280>)
2405cd4e:	659a      	str	r2, [r3, #88]	@ 0x58
      if (HAL_MDMA_Abort_IT(hospi->hmdma) != HAL_OK)
2405cd50:	687b      	ldr	r3, [r7, #4]
2405cd52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2405cd54:	4618      	mov	r0, r3
2405cd56:	f7ff fe07 	bl	2405c968 <HAL_MDMA_Abort_IT>
2405cd5a:	4603      	mov	r3, r0
2405cd5c:	2b00      	cmp	r3, #0
2405cd5e:	d021      	beq.n	2405cda4 <HAL_OSPI_IRQHandler+0x274>
      {
        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
2405cd60:	687b      	ldr	r3, [r7, #4]
2405cd62:	2202      	movs	r2, #2
2405cd64:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->ErrorCallback(hospi);
#else
        HAL_OSPI_ErrorCallback(hospi);
2405cd66:	6878      	ldr	r0, [r7, #4]
2405cd68:	f000 fa16 	bl	2405d198 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
2405cd6c:	e01a      	b.n	2405cda4 <HAL_OSPI_IRQHandler+0x274>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
2405cd6e:	687b      	ldr	r3, [r7, #4]
2405cd70:	2202      	movs	r2, #2
2405cd72:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
      hospi->ErrorCallback(hospi);
#else
      HAL_OSPI_ErrorCallback(hospi);
2405cd74:	6878      	ldr	r0, [r7, #4]
2405cd76:	f000 fa0f 	bl	2405d198 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
2405cd7a:	e013      	b.n	2405cda4 <HAL_OSPI_IRQHandler+0x274>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
    }
  }
  /* OctoSPI timeout interrupt occurred --------------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
2405cd7c:	693b      	ldr	r3, [r7, #16]
2405cd7e:	f003 0310 	and.w	r3, r3, #16
2405cd82:	2b00      	cmp	r3, #0
2405cd84:	d00f      	beq.n	2405cda6 <HAL_OSPI_IRQHandler+0x276>
2405cd86:	68fb      	ldr	r3, [r7, #12]
2405cd88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
2405cd8c:	2b00      	cmp	r3, #0
2405cd8e:	d00a      	beq.n	2405cda6 <HAL_OSPI_IRQHandler+0x276>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
2405cd90:	687b      	ldr	r3, [r7, #4]
2405cd92:	681b      	ldr	r3, [r3, #0]
2405cd94:	2210      	movs	r2, #16
2405cd96:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Timeout callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->TimeOutCallback(hospi);
#else
    HAL_OSPI_TimeOutCallback(hospi);
2405cd98:	6878      	ldr	r0, [r7, #4]
2405cd9a:	f000 fa43 	bl	2405d224 <HAL_OSPI_TimeOutCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
2405cd9e:	e002      	b.n	2405cda6 <HAL_OSPI_IRQHandler+0x276>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
2405cda0:	bf00      	nop
2405cda2:	e000      	b.n	2405cda6 <HAL_OSPI_IRQHandler+0x276>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
2405cda4:	bf00      	nop
}
2405cda6:	bf00      	nop
2405cda8:	3718      	adds	r7, #24
2405cdaa:	46bd      	mov	sp, r7
2405cdac:	bd80      	pop	{r7, pc}
2405cdae:	bf00      	nop
2405cdb0:	2405dc29 	.word	0x2405dc29

2405cdb4 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
2405cdb4:	b580      	push	{r7, lr}
2405cdb6:	b08a      	sub	sp, #40	@ 0x28
2405cdb8:	af02      	add	r7, sp, #8
2405cdba:	60f8      	str	r0, [r7, #12]
2405cdbc:	60b9      	str	r1, [r7, #8]
2405cdbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
2405cdc0:	f7f9 fe5e 	bl	24056a80 <HAL_GetTick>
2405cdc4:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE(cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
2405cdc6:	68bb      	ldr	r3, [r7, #8]
2405cdc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2405cdca:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE(cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
2405cdcc:	68fb      	ldr	r3, [r7, #12]
2405cdce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2405cdd0:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
2405cdd2:	697b      	ldr	r3, [r7, #20]
2405cdd4:	2b02      	cmp	r3, #2
2405cdd6:	d104      	bne.n	2405cde2 <HAL_OSPI_Command+0x2e>
2405cdd8:	68fb      	ldr	r3, [r7, #12]
2405cdda:	68db      	ldr	r3, [r3, #12]
2405cddc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
2405cde0:	d115      	bne.n	2405ce0e <HAL_OSPI_Command+0x5a>
2405cde2:	697b      	ldr	r3, [r7, #20]
2405cde4:	2b14      	cmp	r3, #20
2405cde6:	d107      	bne.n	2405cdf8 <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
2405cde8:	68bb      	ldr	r3, [r7, #8]
2405cdea:	681b      	ldr	r3, [r3, #0]
2405cdec:	2b02      	cmp	r3, #2
2405cdee:	d00e      	beq.n	2405ce0e <HAL_OSPI_Command+0x5a>
                                                   || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
2405cdf0:	68bb      	ldr	r3, [r7, #8]
2405cdf2:	681b      	ldr	r3, [r3, #0]
2405cdf4:	2b03      	cmp	r3, #3
2405cdf6:	d00a      	beq.n	2405ce0e <HAL_OSPI_Command+0x5a>
2405cdf8:	697b      	ldr	r3, [r7, #20]
2405cdfa:	2b24      	cmp	r3, #36	@ 0x24
2405cdfc:	d15b      	bne.n	2405ceb6 <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
2405cdfe:	68bb      	ldr	r3, [r7, #8]
2405ce00:	681b      	ldr	r3, [r3, #0]
2405ce02:	2b01      	cmp	r3, #1
2405ce04:	d003      	beq.n	2405ce0e <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
2405ce06:	68bb      	ldr	r3, [r7, #8]
2405ce08:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
2405ce0a:	2b03      	cmp	r3, #3
2405ce0c:	d153      	bne.n	2405ceb6 <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
2405ce0e:	687b      	ldr	r3, [r7, #4]
2405ce10:	9300      	str	r3, [sp, #0]
2405ce12:	69bb      	ldr	r3, [r7, #24]
2405ce14:	2200      	movs	r2, #0
2405ce16:	2120      	movs	r1, #32
2405ce18:	68f8      	ldr	r0, [r7, #12]
2405ce1a:	f000 ff41 	bl	2405dca0 <OSPI_WaitFlagStateUntilTimeout>
2405ce1e:	4603      	mov	r3, r0
2405ce20:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
2405ce22:	7ffb      	ldrb	r3, [r7, #31]
2405ce24:	2b00      	cmp	r3, #0
2405ce26:	d14c      	bne.n	2405cec2 <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
2405ce28:	68fb      	ldr	r3, [r7, #12]
2405ce2a:	2200      	movs	r2, #0
2405ce2c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
2405ce2e:	68b9      	ldr	r1, [r7, #8]
2405ce30:	68f8      	ldr	r0, [r7, #12]
2405ce32:	f000 ff6d 	bl	2405dd10 <OSPI_ConfigCmd>
2405ce36:	4603      	mov	r3, r0
2405ce38:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
2405ce3a:	7ffb      	ldrb	r3, [r7, #31]
2405ce3c:	2b00      	cmp	r3, #0
2405ce3e:	d140      	bne.n	2405cec2 <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
2405ce40:	68bb      	ldr	r3, [r7, #8]
2405ce42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2405ce44:	2b00      	cmp	r3, #0
2405ce46:	d10e      	bne.n	2405ce66 <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
2405ce48:	687b      	ldr	r3, [r7, #4]
2405ce4a:	9300      	str	r3, [sp, #0]
2405ce4c:	69bb      	ldr	r3, [r7, #24]
2405ce4e:	2201      	movs	r2, #1
2405ce50:	2102      	movs	r1, #2
2405ce52:	68f8      	ldr	r0, [r7, #12]
2405ce54:	f000 ff24 	bl	2405dca0 <OSPI_WaitFlagStateUntilTimeout>
2405ce58:	4603      	mov	r3, r0
2405ce5a:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
2405ce5c:	68fb      	ldr	r3, [r7, #12]
2405ce5e:	681b      	ldr	r3, [r3, #0]
2405ce60:	2202      	movs	r2, #2
2405ce62:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
2405ce64:	e02d      	b.n	2405cec2 <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
2405ce66:	68bb      	ldr	r3, [r7, #8]
2405ce68:	681b      	ldr	r3, [r3, #0]
2405ce6a:	2b00      	cmp	r3, #0
2405ce6c:	d103      	bne.n	2405ce76 <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
2405ce6e:	68fb      	ldr	r3, [r7, #12]
2405ce70:	2204      	movs	r2, #4
2405ce72:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
2405ce74:	e025      	b.n	2405cec2 <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
2405ce76:	68bb      	ldr	r3, [r7, #8]
2405ce78:	681b      	ldr	r3, [r3, #0]
2405ce7a:	2b01      	cmp	r3, #1
2405ce7c:	d10b      	bne.n	2405ce96 <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
2405ce7e:	68fb      	ldr	r3, [r7, #12]
2405ce80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2405ce82:	2b24      	cmp	r3, #36	@ 0x24
2405ce84:	d103      	bne.n	2405ce8e <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
2405ce86:	68fb      	ldr	r3, [r7, #12]
2405ce88:	2204      	movs	r2, #4
2405ce8a:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
2405ce8c:	e019      	b.n	2405cec2 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
2405ce8e:	68fb      	ldr	r3, [r7, #12]
2405ce90:	2214      	movs	r2, #20
2405ce92:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
2405ce94:	e015      	b.n	2405cec2 <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
2405ce96:	68bb      	ldr	r3, [r7, #8]
2405ce98:	681b      	ldr	r3, [r3, #0]
2405ce9a:	2b02      	cmp	r3, #2
2405ce9c:	d111      	bne.n	2405cec2 <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
2405ce9e:	68fb      	ldr	r3, [r7, #12]
2405cea0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2405cea2:	2b14      	cmp	r3, #20
2405cea4:	d103      	bne.n	2405ceae <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
2405cea6:	68fb      	ldr	r3, [r7, #12]
2405cea8:	2204      	movs	r2, #4
2405ceaa:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
2405ceac:	e009      	b.n	2405cec2 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
2405ceae:	68fb      	ldr	r3, [r7, #12]
2405ceb0:	2224      	movs	r2, #36	@ 0x24
2405ceb2:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
2405ceb4:	e005      	b.n	2405cec2 <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
2405ceb6:	2301      	movs	r3, #1
2405ceb8:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
2405ceba:	68fb      	ldr	r3, [r7, #12]
2405cebc:	2210      	movs	r2, #16
2405cebe:	655a      	str	r2, [r3, #84]	@ 0x54
2405cec0:	e000      	b.n	2405cec4 <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
2405cec2:	bf00      	nop
  }

  /* Return function status */
  return status;
2405cec4:	7ffb      	ldrb	r3, [r7, #31]
}
2405cec6:	4618      	mov	r0, r3
2405cec8:	3720      	adds	r7, #32
2405ceca:	46bd      	mov	sp, r7
2405cecc:	bd80      	pop	{r7, pc}

2405cece <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
2405cece:	b580      	push	{r7, lr}
2405ced0:	b08a      	sub	sp, #40	@ 0x28
2405ced2:	af02      	add	r7, sp, #8
2405ced4:	60f8      	str	r0, [r7, #12]
2405ced6:	60b9      	str	r1, [r7, #8]
2405ced8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
2405ceda:	f7f9 fdd1 	bl	24056a80 <HAL_GetTick>
2405cede:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
2405cee0:	68fb      	ldr	r3, [r7, #12]
2405cee2:	681b      	ldr	r3, [r3, #0]
2405cee4:	3350      	adds	r3, #80	@ 0x50
2405cee6:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
2405cee8:	68bb      	ldr	r3, [r7, #8]
2405ceea:	2b00      	cmp	r3, #0
2405ceec:	d105      	bne.n	2405cefa <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
2405ceee:	2301      	movs	r3, #1
2405cef0:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
2405cef2:	68fb      	ldr	r3, [r7, #12]
2405cef4:	2208      	movs	r2, #8
2405cef6:	655a      	str	r2, [r3, #84]	@ 0x54
2405cef8:	e057      	b.n	2405cfaa <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
2405cefa:	68fb      	ldr	r3, [r7, #12]
2405cefc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2405cefe:	2b04      	cmp	r3, #4
2405cf00:	d14e      	bne.n	2405cfa0 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
2405cf02:	68fb      	ldr	r3, [r7, #12]
2405cf04:	681b      	ldr	r3, [r3, #0]
2405cf06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2405cf08:	1c5a      	adds	r2, r3, #1
2405cf0a:	68fb      	ldr	r3, [r7, #12]
2405cf0c:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
2405cf0e:	68fb      	ldr	r3, [r7, #12]
2405cf10:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
2405cf12:	68fb      	ldr	r3, [r7, #12]
2405cf14:	645a      	str	r2, [r3, #68]	@ 0x44
      hospi->pBuffPtr  = pData;
2405cf16:	68fb      	ldr	r3, [r7, #12]
2405cf18:	68ba      	ldr	r2, [r7, #8]
2405cf1a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
2405cf1c:	68fb      	ldr	r3, [r7, #12]
2405cf1e:	681b      	ldr	r3, [r3, #0]
2405cf20:	681a      	ldr	r2, [r3, #0]
2405cf22:	68fb      	ldr	r3, [r7, #12]
2405cf24:	681b      	ldr	r3, [r3, #0]
2405cf26:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
2405cf2a:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
2405cf2c:	687b      	ldr	r3, [r7, #4]
2405cf2e:	9300      	str	r3, [sp, #0]
2405cf30:	69bb      	ldr	r3, [r7, #24]
2405cf32:	2201      	movs	r2, #1
2405cf34:	2104      	movs	r1, #4
2405cf36:	68f8      	ldr	r0, [r7, #12]
2405cf38:	f000 feb2 	bl	2405dca0 <OSPI_WaitFlagStateUntilTimeout>
2405cf3c:	4603      	mov	r3, r0
2405cf3e:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
2405cf40:	7ffb      	ldrb	r3, [r7, #31]
2405cf42:	2b00      	cmp	r3, #0
2405cf44:	d113      	bne.n	2405cf6e <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
2405cf46:	68fb      	ldr	r3, [r7, #12]
2405cf48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2405cf4a:	781a      	ldrb	r2, [r3, #0]
2405cf4c:	697b      	ldr	r3, [r7, #20]
2405cf4e:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
2405cf50:	68fb      	ldr	r3, [r7, #12]
2405cf52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2405cf54:	1c5a      	adds	r2, r3, #1
2405cf56:	68fb      	ldr	r3, [r7, #12]
2405cf58:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
2405cf5a:	68fb      	ldr	r3, [r7, #12]
2405cf5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
2405cf5e:	1e5a      	subs	r2, r3, #1
2405cf60:	68fb      	ldr	r3, [r7, #12]
2405cf62:	649a      	str	r2, [r3, #72]	@ 0x48
      } while (hospi->XferCount > 0U);
2405cf64:	68fb      	ldr	r3, [r7, #12]
2405cf66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
2405cf68:	2b00      	cmp	r3, #0
2405cf6a:	d1df      	bne.n	2405cf2c <HAL_OSPI_Transmit+0x5e>
2405cf6c:	e000      	b.n	2405cf70 <HAL_OSPI_Transmit+0xa2>
          break;
2405cf6e:	bf00      	nop

      if (status == HAL_OK)
2405cf70:	7ffb      	ldrb	r3, [r7, #31]
2405cf72:	2b00      	cmp	r3, #0
2405cf74:	d119      	bne.n	2405cfaa <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
2405cf76:	687b      	ldr	r3, [r7, #4]
2405cf78:	9300      	str	r3, [sp, #0]
2405cf7a:	69bb      	ldr	r3, [r7, #24]
2405cf7c:	2201      	movs	r2, #1
2405cf7e:	2102      	movs	r1, #2
2405cf80:	68f8      	ldr	r0, [r7, #12]
2405cf82:	f000 fe8d 	bl	2405dca0 <OSPI_WaitFlagStateUntilTimeout>
2405cf86:	4603      	mov	r3, r0
2405cf88:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
2405cf8a:	7ffb      	ldrb	r3, [r7, #31]
2405cf8c:	2b00      	cmp	r3, #0
2405cf8e:	d10c      	bne.n	2405cfaa <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
2405cf90:	68fb      	ldr	r3, [r7, #12]
2405cf92:	681b      	ldr	r3, [r3, #0]
2405cf94:	2202      	movs	r2, #2
2405cf96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
2405cf98:	68fb      	ldr	r3, [r7, #12]
2405cf9a:	2202      	movs	r2, #2
2405cf9c:	651a      	str	r2, [r3, #80]	@ 0x50
2405cf9e:	e004      	b.n	2405cfaa <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
2405cfa0:	2301      	movs	r3, #1
2405cfa2:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
2405cfa4:	68fb      	ldr	r3, [r7, #12]
2405cfa6:	2210      	movs	r2, #16
2405cfa8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
2405cfaa:	7ffb      	ldrb	r3, [r7, #31]
}
2405cfac:	4618      	mov	r0, r3
2405cfae:	3720      	adds	r7, #32
2405cfb0:	46bd      	mov	sp, r7
2405cfb2:	bd80      	pop	{r7, pc}

2405cfb4 <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
2405cfb4:	b580      	push	{r7, lr}
2405cfb6:	b08c      	sub	sp, #48	@ 0x30
2405cfb8:	af02      	add	r7, sp, #8
2405cfba:	60f8      	str	r0, [r7, #12]
2405cfbc:	60b9      	str	r1, [r7, #8]
2405cfbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
2405cfc0:	f7f9 fd5e 	bl	24056a80 <HAL_GetTick>
2405cfc4:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
2405cfc6:	68fb      	ldr	r3, [r7, #12]
2405cfc8:	681b      	ldr	r3, [r3, #0]
2405cfca:	3350      	adds	r3, #80	@ 0x50
2405cfcc:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
2405cfce:	68fb      	ldr	r3, [r7, #12]
2405cfd0:	681b      	ldr	r3, [r3, #0]
2405cfd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
2405cfd4:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
2405cfd6:	68fb      	ldr	r3, [r7, #12]
2405cfd8:	681b      	ldr	r3, [r3, #0]
2405cfda:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
2405cfde:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
2405cfe0:	68bb      	ldr	r3, [r7, #8]
2405cfe2:	2b00      	cmp	r3, #0
2405cfe4:	d106      	bne.n	2405cff4 <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
2405cfe6:	2301      	movs	r3, #1
2405cfe8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
2405cfec:	68fb      	ldr	r3, [r7, #12]
2405cfee:	2208      	movs	r2, #8
2405cff0:	655a      	str	r2, [r3, #84]	@ 0x54
2405cff2:	e07c      	b.n	2405d0ee <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
2405cff4:	68fb      	ldr	r3, [r7, #12]
2405cff6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2405cff8:	2b04      	cmp	r3, #4
2405cffa:	d172      	bne.n	2405d0e2 <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
2405cffc:	68fb      	ldr	r3, [r7, #12]
2405cffe:	681b      	ldr	r3, [r3, #0]
2405d000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2405d002:	1c5a      	adds	r2, r3, #1
2405d004:	68fb      	ldr	r3, [r7, #12]
2405d006:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
2405d008:	68fb      	ldr	r3, [r7, #12]
2405d00a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
2405d00c:	68fb      	ldr	r3, [r7, #12]
2405d00e:	645a      	str	r2, [r3, #68]	@ 0x44
      hospi->pBuffPtr  = pData;
2405d010:	68fb      	ldr	r3, [r7, #12]
2405d012:	68ba      	ldr	r2, [r7, #8]
2405d014:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
2405d016:	68fb      	ldr	r3, [r7, #12]
2405d018:	681b      	ldr	r3, [r3, #0]
2405d01a:	681b      	ldr	r3, [r3, #0]
2405d01c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
2405d020:	68fb      	ldr	r3, [r7, #12]
2405d022:	681b      	ldr	r3, [r3, #0]
2405d024:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
2405d028:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
2405d02a:	68fb      	ldr	r3, [r7, #12]
2405d02c:	68db      	ldr	r3, [r3, #12]
2405d02e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
2405d032:	d104      	bne.n	2405d03e <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
2405d034:	68fb      	ldr	r3, [r7, #12]
2405d036:	681b      	ldr	r3, [r3, #0]
2405d038:	69ba      	ldr	r2, [r7, #24]
2405d03a:	649a      	str	r2, [r3, #72]	@ 0x48
2405d03c:	e011      	b.n	2405d062 <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
2405d03e:	68fb      	ldr	r3, [r7, #12]
2405d040:	681b      	ldr	r3, [r3, #0]
2405d042:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
2405d046:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
2405d04a:	2b00      	cmp	r3, #0
2405d04c:	d004      	beq.n	2405d058 <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
2405d04e:	68fb      	ldr	r3, [r7, #12]
2405d050:	681b      	ldr	r3, [r3, #0]
2405d052:	69ba      	ldr	r2, [r7, #24]
2405d054:	649a      	str	r2, [r3, #72]	@ 0x48
2405d056:	e004      	b.n	2405d062 <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
2405d058:	68fb      	ldr	r3, [r7, #12]
2405d05a:	681b      	ldr	r3, [r3, #0]
2405d05c:	697a      	ldr	r2, [r7, #20]
2405d05e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
2405d062:	687b      	ldr	r3, [r7, #4]
2405d064:	9300      	str	r3, [sp, #0]
2405d066:	6a3b      	ldr	r3, [r7, #32]
2405d068:	2201      	movs	r2, #1
2405d06a:	2106      	movs	r1, #6
2405d06c:	68f8      	ldr	r0, [r7, #12]
2405d06e:	f000 fe17 	bl	2405dca0 <OSPI_WaitFlagStateUntilTimeout>
2405d072:	4603      	mov	r3, r0
2405d074:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status != HAL_OK)
2405d078:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
2405d07c:	2b00      	cmp	r3, #0
2405d07e:	d114      	bne.n	2405d0aa <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
2405d080:	68fb      	ldr	r3, [r7, #12]
2405d082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2405d084:	69fa      	ldr	r2, [r7, #28]
2405d086:	7812      	ldrb	r2, [r2, #0]
2405d088:	b2d2      	uxtb	r2, r2
2405d08a:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
2405d08c:	68fb      	ldr	r3, [r7, #12]
2405d08e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2405d090:	1c5a      	adds	r2, r3, #1
2405d092:	68fb      	ldr	r3, [r7, #12]
2405d094:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
2405d096:	68fb      	ldr	r3, [r7, #12]
2405d098:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
2405d09a:	1e5a      	subs	r2, r3, #1
2405d09c:	68fb      	ldr	r3, [r7, #12]
2405d09e:	649a      	str	r2, [r3, #72]	@ 0x48
      } while (hospi->XferCount > 0U);
2405d0a0:	68fb      	ldr	r3, [r7, #12]
2405d0a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
2405d0a4:	2b00      	cmp	r3, #0
2405d0a6:	d1dc      	bne.n	2405d062 <HAL_OSPI_Receive+0xae>
2405d0a8:	e000      	b.n	2405d0ac <HAL_OSPI_Receive+0xf8>
          break;
2405d0aa:	bf00      	nop

      if (status == HAL_OK)
2405d0ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
2405d0b0:	2b00      	cmp	r3, #0
2405d0b2:	d11c      	bne.n	2405d0ee <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
2405d0b4:	687b      	ldr	r3, [r7, #4]
2405d0b6:	9300      	str	r3, [sp, #0]
2405d0b8:	6a3b      	ldr	r3, [r7, #32]
2405d0ba:	2201      	movs	r2, #1
2405d0bc:	2102      	movs	r1, #2
2405d0be:	68f8      	ldr	r0, [r7, #12]
2405d0c0:	f000 fdee 	bl	2405dca0 <OSPI_WaitFlagStateUntilTimeout>
2405d0c4:	4603      	mov	r3, r0
2405d0c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status == HAL_OK)
2405d0ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
2405d0ce:	2b00      	cmp	r3, #0
2405d0d0:	d10d      	bne.n	2405d0ee <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
2405d0d2:	68fb      	ldr	r3, [r7, #12]
2405d0d4:	681b      	ldr	r3, [r3, #0]
2405d0d6:	2202      	movs	r2, #2
2405d0d8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
2405d0da:	68fb      	ldr	r3, [r7, #12]
2405d0dc:	2202      	movs	r2, #2
2405d0de:	651a      	str	r2, [r3, #80]	@ 0x50
2405d0e0:	e005      	b.n	2405d0ee <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
2405d0e2:	2301      	movs	r3, #1
2405d0e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
2405d0e8:	68fb      	ldr	r3, [r7, #12]
2405d0ea:	2210      	movs	r2, #16
2405d0ec:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
2405d0ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
2405d0f2:	4618      	mov	r0, r3
2405d0f4:	3728      	adds	r7, #40	@ 0x28
2405d0f6:	46bd      	mov	sp, r7
2405d0f8:	bd80      	pop	{r7, pc}
	...

2405d0fc <HAL_OSPI_MemoryMapped>:
  * @param  cfg   : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_MemoryMapped(OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg)
{
2405d0fc:	b580      	push	{r7, lr}
2405d0fe:	b086      	sub	sp, #24
2405d100:	af02      	add	r7, sp, #8
2405d102:	6078      	str	r0, [r7, #4]
2405d104:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
2405d106:	f7f9 fcbb 	bl	24056a80 <HAL_GetTick>
2405d10a:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_OSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
2405d10c:	687b      	ldr	r3, [r7, #4]
2405d10e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2405d110:	2b04      	cmp	r3, #4
2405d112:	d134      	bne.n	2405d17e <HAL_OSPI_MemoryMapped+0x82>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
2405d114:	687b      	ldr	r3, [r7, #4]
2405d116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
2405d118:	9300      	str	r3, [sp, #0]
2405d11a:	68bb      	ldr	r3, [r7, #8]
2405d11c:	2200      	movs	r2, #0
2405d11e:	2120      	movs	r1, #32
2405d120:	6878      	ldr	r0, [r7, #4]
2405d122:	f000 fdbd 	bl	2405dca0 <OSPI_WaitFlagStateUntilTimeout>
2405d126:	4603      	mov	r3, r0
2405d128:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
2405d12a:	7bfb      	ldrb	r3, [r7, #15]
2405d12c:	2b00      	cmp	r3, #0
2405d12e:	d12b      	bne.n	2405d188 <HAL_OSPI_MemoryMapped+0x8c>
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
2405d130:	687b      	ldr	r3, [r7, #4]
2405d132:	2288      	movs	r2, #136	@ 0x88
2405d134:	651a      	str	r2, [r3, #80]	@ 0x50

      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
2405d136:	683b      	ldr	r3, [r7, #0]
2405d138:	681b      	ldr	r3, [r3, #0]
2405d13a:	2b08      	cmp	r3, #8
2405d13c:	d111      	bne.n	2405d162 <HAL_OSPI_MemoryMapped+0x66>
      {
        assert_param(IS_OSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure register */
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
2405d13e:	687b      	ldr	r3, [r7, #4]
2405d140:	681b      	ldr	r3, [r3, #0]
2405d142:	683a      	ldr	r2, [r7, #0]
2405d144:	6852      	ldr	r2, [r2, #4]
2405d146:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
2405d14a:	687b      	ldr	r3, [r7, #4]
2405d14c:	681b      	ldr	r3, [r3, #0]
2405d14e:	2210      	movs	r2, #16
2405d150:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Enable the timeout interrupt */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
2405d152:	687b      	ldr	r3, [r7, #4]
2405d154:	681b      	ldr	r3, [r3, #0]
2405d156:	681a      	ldr	r2, [r3, #0]
2405d158:	687b      	ldr	r3, [r7, #4]
2405d15a:	681b      	ldr	r3, [r3, #0]
2405d15c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
2405d160:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
2405d162:	687b      	ldr	r3, [r7, #4]
2405d164:	681b      	ldr	r3, [r3, #0]
2405d166:	681a      	ldr	r2, [r3, #0]
2405d168:	4b0a      	ldr	r3, [pc, #40]	@ (2405d194 <HAL_OSPI_MemoryMapped+0x98>)
2405d16a:	4013      	ands	r3, r2
2405d16c:	683a      	ldr	r2, [r7, #0]
2405d16e:	6812      	ldr	r2, [r2, #0]
2405d170:	431a      	orrs	r2, r3
2405d172:	687b      	ldr	r3, [r7, #4]
2405d174:	681b      	ldr	r3, [r3, #0]
2405d176:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
2405d17a:	601a      	str	r2, [r3, #0]
2405d17c:	e004      	b.n	2405d188 <HAL_OSPI_MemoryMapped+0x8c>
                 (cfg->TimeOutActivation | OSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
2405d17e:	2301      	movs	r3, #1
2405d180:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
2405d182:	687b      	ldr	r3, [r7, #4]
2405d184:	2210      	movs	r2, #16
2405d186:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Return function status */
  return status;
2405d188:	7bfb      	ldrb	r3, [r7, #15]
}
2405d18a:	4618      	mov	r0, r3
2405d18c:	3710      	adds	r7, #16
2405d18e:	46bd      	mov	sp, r7
2405d190:	bd80      	pop	{r7, pc}
2405d192:	bf00      	nop
2405d194:	cffffff7 	.word	0xcffffff7

2405d198 <HAL_OSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_ErrorCallback(OSPI_HandleTypeDef *hospi)
{
2405d198:	b480      	push	{r7}
2405d19a:	b083      	sub	sp, #12
2405d19c:	af00      	add	r7, sp, #0
2405d19e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_ErrorCallback could be implemented in the user file
   */
}
2405d1a0:	bf00      	nop
2405d1a2:	370c      	adds	r7, #12
2405d1a4:	46bd      	mov	sp, r7
2405d1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
2405d1aa:	4770      	bx	lr

2405d1ac <HAL_OSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_AbortCpltCallback(OSPI_HandleTypeDef *hospi)
{
2405d1ac:	b480      	push	{r7}
2405d1ae:	b083      	sub	sp, #12
2405d1b0:	af00      	add	r7, sp, #0
2405d1b2:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_AbortCpltCallback could be implemented in the user file
   */
}
2405d1b4:	bf00      	nop
2405d1b6:	370c      	adds	r7, #12
2405d1b8:	46bd      	mov	sp, r7
2405d1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
2405d1be:	4770      	bx	lr

2405d1c0 <HAL_OSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_FifoThresholdCallback(OSPI_HandleTypeDef *hospi)
{
2405d1c0:	b480      	push	{r7}
2405d1c2:	b083      	sub	sp, #12
2405d1c4:	af00      	add	r7, sp, #0
2405d1c6:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
2405d1c8:	bf00      	nop
2405d1ca:	370c      	adds	r7, #12
2405d1cc:	46bd      	mov	sp, r7
2405d1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
2405d1d2:	4770      	bx	lr

2405d1d4 <HAL_OSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_CmdCpltCallback(OSPI_HandleTypeDef *hospi)
{
2405d1d4:	b480      	push	{r7}
2405d1d6:	b083      	sub	sp, #12
2405d1d8:	af00      	add	r7, sp, #0
2405d1da:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_CmdCpltCallback could be implemented in the user file
   */
}
2405d1dc:	bf00      	nop
2405d1de:	370c      	adds	r7, #12
2405d1e0:	46bd      	mov	sp, r7
2405d1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
2405d1e6:	4770      	bx	lr

2405d1e8 <HAL_OSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_RxCpltCallback(OSPI_HandleTypeDef *hospi)
{
2405d1e8:	b480      	push	{r7}
2405d1ea:	b083      	sub	sp, #12
2405d1ec:	af00      	add	r7, sp, #0
2405d1ee:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_RxCpltCallback could be implemented in the user file
   */
}
2405d1f0:	bf00      	nop
2405d1f2:	370c      	adds	r7, #12
2405d1f4:	46bd      	mov	sp, r7
2405d1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
2405d1fa:	4770      	bx	lr

2405d1fc <HAL_OSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TxCpltCallback(OSPI_HandleTypeDef *hospi)
{
2405d1fc:	b480      	push	{r7}
2405d1fe:	b083      	sub	sp, #12
2405d200:	af00      	add	r7, sp, #0
2405d202:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_TxCpltCallback could be implemented in the user file
   */
}
2405d204:	bf00      	nop
2405d206:	370c      	adds	r7, #12
2405d208:	46bd      	mov	sp, r7
2405d20a:	f85d 7b04 	ldr.w	r7, [sp], #4
2405d20e:	4770      	bx	lr

2405d210 <HAL_OSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_StatusMatchCallback(OSPI_HandleTypeDef *hospi)
{
2405d210:	b480      	push	{r7}
2405d212:	b083      	sub	sp, #12
2405d214:	af00      	add	r7, sp, #0
2405d216:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_StatusMatchCallback could be implemented in the user file
   */
}
2405d218:	bf00      	nop
2405d21a:	370c      	adds	r7, #12
2405d21c:	46bd      	mov	sp, r7
2405d21e:	f85d 7b04 	ldr.w	r7, [sp], #4
2405d222:	4770      	bx	lr

2405d224 <HAL_OSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TimeOutCallback(OSPI_HandleTypeDef *hospi)
{
2405d224:	b480      	push	{r7}
2405d226:	b083      	sub	sp, #12
2405d228:	af00      	add	r7, sp, #0
2405d22a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_TimeOutCallback could be implemented in the user file
   */
}
2405d22c:	bf00      	nop
2405d22e:	370c      	adds	r7, #12
2405d230:	46bd      	mov	sp, r7
2405d232:	f85d 7b04 	ldr.w	r7, [sp], #4
2405d236:	4770      	bx	lr

2405d238 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
2405d238:	b480      	push	{r7}
2405d23a:	b083      	sub	sp, #12
2405d23c:	af00      	add	r7, sp, #0
2405d23e:	6078      	str	r0, [r7, #4]
2405d240:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
2405d242:	687b      	ldr	r3, [r7, #4]
2405d244:	683a      	ldr	r2, [r7, #0]
2405d246:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
2405d248:	2300      	movs	r3, #0
}
2405d24a:	4618      	mov	r0, r3
2405d24c:	370c      	adds	r7, #12
2405d24e:	46bd      	mov	sp, r7
2405d250:	f85d 7b04 	ldr.w	r7, [sp], #4
2405d254:	4770      	bx	lr
	...

2405d258 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
2405d258:	b580      	push	{r7, lr}
2405d25a:	b094      	sub	sp, #80	@ 0x50
2405d25c:	af00      	add	r7, sp, #0
2405d25e:	60f8      	str	r0, [r7, #12]
2405d260:	60b9      	str	r1, [r7, #8]
2405d262:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
2405d264:	2300      	movs	r3, #0
2405d266:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
2405d26a:	2300      	movs	r3, #0
2405d26c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
2405d270:	68fb      	ldr	r3, [r7, #12]
2405d272:	681b      	ldr	r3, [r3, #0]
2405d274:	4a9d      	ldr	r2, [pc, #628]	@ (2405d4ec <HAL_OSPIM_Config+0x294>)
2405d276:	4293      	cmp	r3, r2
2405d278:	d105      	bne.n	2405d286 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
2405d27a:	2300      	movs	r3, #0
2405d27c:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
2405d27e:	2301      	movs	r3, #1
2405d280:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
2405d284:	e004      	b.n	2405d290 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
2405d286:	2301      	movs	r3, #1
2405d288:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
2405d28a:	2300      	movs	r3, #0
2405d28c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
2405d290:	2300      	movs	r3, #0
2405d292:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
2405d296:	e01d      	b.n	2405d2d4 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
2405d298:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
2405d29c:	3301      	adds	r3, #1
2405d29e:	b2d8      	uxtb	r0, r3
2405d2a0:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
2405d2a4:	f107 0114 	add.w	r1, r7, #20
2405d2a8:	4613      	mov	r3, r2
2405d2aa:	005b      	lsls	r3, r3, #1
2405d2ac:	4413      	add	r3, r2
2405d2ae:	00db      	lsls	r3, r3, #3
2405d2b0:	440b      	add	r3, r1
2405d2b2:	4619      	mov	r1, r3
2405d2b4:	f000 fea6 	bl	2405e004 <OSPIM_GetConfig>
2405d2b8:	4603      	mov	r3, r0
2405d2ba:	2b00      	cmp	r3, #0
2405d2bc:	d005      	beq.n	2405d2ca <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
2405d2be:	2301      	movs	r3, #1
2405d2c0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
2405d2c4:	68fb      	ldr	r3, [r7, #12]
2405d2c6:	2208      	movs	r2, #8
2405d2c8:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
2405d2ca:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
2405d2ce:	3301      	adds	r3, #1
2405d2d0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
2405d2d4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
2405d2d8:	2b01      	cmp	r3, #1
2405d2da:	d9dd      	bls.n	2405d298 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
2405d2dc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
2405d2e0:	2b00      	cmp	r3, #0
2405d2e2:	f040 8495 	bne.w	2405dc10 <HAL_OSPIM_Config+0x9b8>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
2405d2e6:	4b81      	ldr	r3, [pc, #516]	@ (2405d4ec <HAL_OSPIM_Config+0x294>)
2405d2e8:	681b      	ldr	r3, [r3, #0]
2405d2ea:	f003 0301 	and.w	r3, r3, #1
2405d2ee:	2b00      	cmp	r3, #0
2405d2f0:	d00b      	beq.n	2405d30a <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
2405d2f2:	4b7e      	ldr	r3, [pc, #504]	@ (2405d4ec <HAL_OSPIM_Config+0x294>)
2405d2f4:	681b      	ldr	r3, [r3, #0]
2405d2f6:	4a7d      	ldr	r2, [pc, #500]	@ (2405d4ec <HAL_OSPIM_Config+0x294>)
2405d2f8:	f023 0301 	bic.w	r3, r3, #1
2405d2fc:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
2405d2fe:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
2405d302:	f043 0301 	orr.w	r3, r3, #1
2405d306:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
2405d30a:	4b79      	ldr	r3, [pc, #484]	@ (2405d4f0 <HAL_OSPIM_Config+0x298>)
2405d30c:	681b      	ldr	r3, [r3, #0]
2405d30e:	f003 0301 	and.w	r3, r3, #1
2405d312:	2b00      	cmp	r3, #0
2405d314:	d00b      	beq.n	2405d32e <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
2405d316:	4b76      	ldr	r3, [pc, #472]	@ (2405d4f0 <HAL_OSPIM_Config+0x298>)
2405d318:	681b      	ldr	r3, [r3, #0]
2405d31a:	4a75      	ldr	r2, [pc, #468]	@ (2405d4f0 <HAL_OSPIM_Config+0x298>)
2405d31c:	f023 0301 	bic.w	r3, r3, #1
2405d320:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
2405d322:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
2405d326:	f043 0302 	orr.w	r3, r3, #2
2405d32a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
2405d32e:	4971      	ldr	r1, [pc, #452]	@ (2405d4f4 <HAL_OSPIM_Config+0x29c>)
2405d330:	6cba      	ldr	r2, [r7, #72]	@ 0x48
2405d332:	4613      	mov	r3, r2
2405d334:	005b      	lsls	r3, r3, #1
2405d336:	4413      	add	r3, r2
2405d338:	00db      	lsls	r3, r3, #3
2405d33a:	3350      	adds	r3, #80	@ 0x50
2405d33c:	443b      	add	r3, r7
2405d33e:	3b34      	subs	r3, #52	@ 0x34
2405d340:	681b      	ldr	r3, [r3, #0]
2405d342:	3b01      	subs	r3, #1
2405d344:	009b      	lsls	r3, r3, #2
2405d346:	440b      	add	r3, r1
2405d348:	6859      	ldr	r1, [r3, #4]
2405d34a:	486a      	ldr	r0, [pc, #424]	@ (2405d4f4 <HAL_OSPIM_Config+0x29c>)
2405d34c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
2405d34e:	4613      	mov	r3, r2
2405d350:	005b      	lsls	r3, r3, #1
2405d352:	4413      	add	r3, r2
2405d354:	00db      	lsls	r3, r3, #3
2405d356:	3350      	adds	r3, #80	@ 0x50
2405d358:	443b      	add	r3, r7
2405d35a:	3b34      	subs	r3, #52	@ 0x34
2405d35c:	681b      	ldr	r3, [r3, #0]
2405d35e:	3b01      	subs	r3, #1
2405d360:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
2405d364:	009b      	lsls	r3, r3, #2
2405d366:	4403      	add	r3, r0
2405d368:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
2405d36a:	4b62      	ldr	r3, [pc, #392]	@ (2405d4f4 <HAL_OSPIM_Config+0x29c>)
2405d36c:	681b      	ldr	r3, [r3, #0]
2405d36e:	f003 0301 	and.w	r3, r3, #1
2405d372:	2b00      	cmp	r3, #0
2405d374:	f000 80c0 	beq.w	2405d4f8 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
2405d378:	4b5e      	ldr	r3, [pc, #376]	@ (2405d4f4 <HAL_OSPIM_Config+0x29c>)
2405d37a:	681b      	ldr	r3, [r3, #0]
2405d37c:	4a5d      	ldr	r2, [pc, #372]	@ (2405d4f4 <HAL_OSPIM_Config+0x29c>)
2405d37e:	f023 0301 	bic.w	r3, r3, #1
2405d382:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
2405d384:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
2405d388:	2b01      	cmp	r3, #1
2405d38a:	f040 8162 	bne.w	2405d652 <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
2405d38e:	4959      	ldr	r1, [pc, #356]	@ (2405d4f4 <HAL_OSPIM_Config+0x29c>)
2405d390:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
2405d394:	4613      	mov	r3, r2
2405d396:	005b      	lsls	r3, r3, #1
2405d398:	4413      	add	r3, r2
2405d39a:	00db      	lsls	r3, r3, #3
2405d39c:	3350      	adds	r3, #80	@ 0x50
2405d39e:	443b      	add	r3, r7
2405d3a0:	3b3c      	subs	r3, #60	@ 0x3c
2405d3a2:	681b      	ldr	r3, [r3, #0]
2405d3a4:	3b01      	subs	r3, #1
2405d3a6:	009b      	lsls	r3, r3, #2
2405d3a8:	440b      	add	r3, r1
2405d3aa:	6859      	ldr	r1, [r3, #4]
2405d3ac:	4851      	ldr	r0, [pc, #324]	@ (2405d4f4 <HAL_OSPIM_Config+0x29c>)
2405d3ae:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
2405d3b2:	4613      	mov	r3, r2
2405d3b4:	005b      	lsls	r3, r3, #1
2405d3b6:	4413      	add	r3, r2
2405d3b8:	00db      	lsls	r3, r3, #3
2405d3ba:	3350      	adds	r3, #80	@ 0x50
2405d3bc:	443b      	add	r3, r7
2405d3be:	3b3c      	subs	r3, #60	@ 0x3c
2405d3c0:	681b      	ldr	r3, [r3, #0]
2405d3c2:	3b01      	subs	r3, #1
2405d3c4:	f041 0202 	orr.w	r2, r1, #2
2405d3c8:	009b      	lsls	r3, r3, #2
2405d3ca:	4403      	add	r3, r0
2405d3cc:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
2405d3ce:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
2405d3d2:	4613      	mov	r3, r2
2405d3d4:	005b      	lsls	r3, r3, #1
2405d3d6:	4413      	add	r3, r2
2405d3d8:	00db      	lsls	r3, r3, #3
2405d3da:	3350      	adds	r3, #80	@ 0x50
2405d3dc:	443b      	add	r3, r7
2405d3de:	3b38      	subs	r3, #56	@ 0x38
2405d3e0:	681b      	ldr	r3, [r3, #0]
2405d3e2:	2b00      	cmp	r3, #0
2405d3e4:	d01f      	beq.n	2405d426 <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
2405d3e6:	4943      	ldr	r1, [pc, #268]	@ (2405d4f4 <HAL_OSPIM_Config+0x29c>)
2405d3e8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
2405d3ec:	4613      	mov	r3, r2
2405d3ee:	005b      	lsls	r3, r3, #1
2405d3f0:	4413      	add	r3, r2
2405d3f2:	00db      	lsls	r3, r3, #3
2405d3f4:	3350      	adds	r3, #80	@ 0x50
2405d3f6:	443b      	add	r3, r7
2405d3f8:	3b38      	subs	r3, #56	@ 0x38
2405d3fa:	681b      	ldr	r3, [r3, #0]
2405d3fc:	3b01      	subs	r3, #1
2405d3fe:	009b      	lsls	r3, r3, #2
2405d400:	440b      	add	r3, r1
2405d402:	6859      	ldr	r1, [r3, #4]
2405d404:	483b      	ldr	r0, [pc, #236]	@ (2405d4f4 <HAL_OSPIM_Config+0x29c>)
2405d406:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
2405d40a:	4613      	mov	r3, r2
2405d40c:	005b      	lsls	r3, r3, #1
2405d40e:	4413      	add	r3, r2
2405d410:	00db      	lsls	r3, r3, #3
2405d412:	3350      	adds	r3, #80	@ 0x50
2405d414:	443b      	add	r3, r7
2405d416:	3b38      	subs	r3, #56	@ 0x38
2405d418:	681b      	ldr	r3, [r3, #0]
2405d41a:	3b01      	subs	r3, #1
2405d41c:	f041 0220 	orr.w	r2, r1, #32
2405d420:	009b      	lsls	r3, r3, #2
2405d422:	4403      	add	r3, r0
2405d424:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
2405d426:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
2405d42a:	4613      	mov	r3, r2
2405d42c:	005b      	lsls	r3, r3, #1
2405d42e:	4413      	add	r3, r2
2405d430:	00db      	lsls	r3, r3, #3
2405d432:	3350      	adds	r3, #80	@ 0x50
2405d434:	443b      	add	r3, r7
2405d436:	3b30      	subs	r3, #48	@ 0x30
2405d438:	681b      	ldr	r3, [r3, #0]
2405d43a:	2b00      	cmp	r3, #0
2405d43c:	d023      	beq.n	2405d486 <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
2405d43e:	492d      	ldr	r1, [pc, #180]	@ (2405d4f4 <HAL_OSPIM_Config+0x29c>)
2405d440:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
2405d444:	4613      	mov	r3, r2
2405d446:	005b      	lsls	r3, r3, #1
2405d448:	4413      	add	r3, r2
2405d44a:	00db      	lsls	r3, r3, #3
2405d44c:	3350      	adds	r3, #80	@ 0x50
2405d44e:	443b      	add	r3, r7
2405d450:	3b30      	subs	r3, #48	@ 0x30
2405d452:	681b      	ldr	r3, [r3, #0]
2405d454:	3b01      	subs	r3, #1
2405d456:	f003 0301 	and.w	r3, r3, #1
2405d45a:	009b      	lsls	r3, r3, #2
2405d45c:	440b      	add	r3, r1
2405d45e:	6859      	ldr	r1, [r3, #4]
2405d460:	4824      	ldr	r0, [pc, #144]	@ (2405d4f4 <HAL_OSPIM_Config+0x29c>)
2405d462:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
2405d466:	4613      	mov	r3, r2
2405d468:	005b      	lsls	r3, r3, #1
2405d46a:	4413      	add	r3, r2
2405d46c:	00db      	lsls	r3, r3, #3
2405d46e:	3350      	adds	r3, #80	@ 0x50
2405d470:	443b      	add	r3, r7
2405d472:	3b30      	subs	r3, #48	@ 0x30
2405d474:	681b      	ldr	r3, [r3, #0]
2405d476:	3b01      	subs	r3, #1
2405d478:	f003 0301 	and.w	r3, r3, #1
2405d47c:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
2405d480:	009b      	lsls	r3, r3, #2
2405d482:	4403      	add	r3, r0
2405d484:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
2405d486:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
2405d48a:	4613      	mov	r3, r2
2405d48c:	005b      	lsls	r3, r3, #1
2405d48e:	4413      	add	r3, r2
2405d490:	00db      	lsls	r3, r3, #3
2405d492:	3350      	adds	r3, #80	@ 0x50
2405d494:	443b      	add	r3, r7
2405d496:	3b2c      	subs	r3, #44	@ 0x2c
2405d498:	681b      	ldr	r3, [r3, #0]
2405d49a:	2b00      	cmp	r3, #0
2405d49c:	f000 80d9 	beq.w	2405d652 <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
2405d4a0:	4914      	ldr	r1, [pc, #80]	@ (2405d4f4 <HAL_OSPIM_Config+0x29c>)
2405d4a2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
2405d4a6:	4613      	mov	r3, r2
2405d4a8:	005b      	lsls	r3, r3, #1
2405d4aa:	4413      	add	r3, r2
2405d4ac:	00db      	lsls	r3, r3, #3
2405d4ae:	3350      	adds	r3, #80	@ 0x50
2405d4b0:	443b      	add	r3, r7
2405d4b2:	3b2c      	subs	r3, #44	@ 0x2c
2405d4b4:	681b      	ldr	r3, [r3, #0]
2405d4b6:	3b01      	subs	r3, #1
2405d4b8:	f003 0301 	and.w	r3, r3, #1
2405d4bc:	009b      	lsls	r3, r3, #2
2405d4be:	440b      	add	r3, r1
2405d4c0:	6859      	ldr	r1, [r3, #4]
2405d4c2:	480c      	ldr	r0, [pc, #48]	@ (2405d4f4 <HAL_OSPIM_Config+0x29c>)
2405d4c4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
2405d4c8:	4613      	mov	r3, r2
2405d4ca:	005b      	lsls	r3, r3, #1
2405d4cc:	4413      	add	r3, r2
2405d4ce:	00db      	lsls	r3, r3, #3
2405d4d0:	3350      	adds	r3, #80	@ 0x50
2405d4d2:	443b      	add	r3, r7
2405d4d4:	3b2c      	subs	r3, #44	@ 0x2c
2405d4d6:	681b      	ldr	r3, [r3, #0]
2405d4d8:	3b01      	subs	r3, #1
2405d4da:	f003 0301 	and.w	r3, r3, #1
2405d4de:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
2405d4e2:	009b      	lsls	r3, r3, #2
2405d4e4:	4403      	add	r3, r0
2405d4e6:	605a      	str	r2, [r3, #4]
2405d4e8:	e0b3      	b.n	2405d652 <HAL_OSPIM_Config+0x3fa>
2405d4ea:	bf00      	nop
2405d4ec:	52005000 	.word	0x52005000
2405d4f0:	5200a000 	.word	0x5200a000
2405d4f4:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
2405d4f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
2405d4fa:	4613      	mov	r3, r2
2405d4fc:	005b      	lsls	r3, r3, #1
2405d4fe:	4413      	add	r3, r2
2405d500:	00db      	lsls	r3, r3, #3
2405d502:	3350      	adds	r3, #80	@ 0x50
2405d504:	443b      	add	r3, r7
2405d506:	3b3c      	subs	r3, #60	@ 0x3c
2405d508:	681b      	ldr	r3, [r3, #0]
2405d50a:	2b00      	cmp	r3, #0
2405d50c:	f000 80a1 	beq.w	2405d652 <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
2405d510:	4993      	ldr	r1, [pc, #588]	@ (2405d760 <HAL_OSPIM_Config+0x508>)
2405d512:	6cba      	ldr	r2, [r7, #72]	@ 0x48
2405d514:	4613      	mov	r3, r2
2405d516:	005b      	lsls	r3, r3, #1
2405d518:	4413      	add	r3, r2
2405d51a:	00db      	lsls	r3, r3, #3
2405d51c:	3350      	adds	r3, #80	@ 0x50
2405d51e:	443b      	add	r3, r7
2405d520:	3b3c      	subs	r3, #60	@ 0x3c
2405d522:	681b      	ldr	r3, [r3, #0]
2405d524:	3b01      	subs	r3, #1
2405d526:	009b      	lsls	r3, r3, #2
2405d528:	440b      	add	r3, r1
2405d52a:	6859      	ldr	r1, [r3, #4]
2405d52c:	488c      	ldr	r0, [pc, #560]	@ (2405d760 <HAL_OSPIM_Config+0x508>)
2405d52e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
2405d530:	4613      	mov	r3, r2
2405d532:	005b      	lsls	r3, r3, #1
2405d534:	4413      	add	r3, r2
2405d536:	00db      	lsls	r3, r3, #3
2405d538:	3350      	adds	r3, #80	@ 0x50
2405d53a:	443b      	add	r3, r7
2405d53c:	3b3c      	subs	r3, #60	@ 0x3c
2405d53e:	681b      	ldr	r3, [r3, #0]
2405d540:	3b01      	subs	r3, #1
2405d542:	f021 0201 	bic.w	r2, r1, #1
2405d546:	009b      	lsls	r3, r3, #2
2405d548:	4403      	add	r3, r0
2405d54a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
2405d54c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
2405d54e:	4613      	mov	r3, r2
2405d550:	005b      	lsls	r3, r3, #1
2405d552:	4413      	add	r3, r2
2405d554:	00db      	lsls	r3, r3, #3
2405d556:	3350      	adds	r3, #80	@ 0x50
2405d558:	443b      	add	r3, r7
2405d55a:	3b38      	subs	r3, #56	@ 0x38
2405d55c:	681b      	ldr	r3, [r3, #0]
2405d55e:	2b00      	cmp	r3, #0
2405d560:	d01d      	beq.n	2405d59e <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
2405d562:	497f      	ldr	r1, [pc, #508]	@ (2405d760 <HAL_OSPIM_Config+0x508>)
2405d564:	6cba      	ldr	r2, [r7, #72]	@ 0x48
2405d566:	4613      	mov	r3, r2
2405d568:	005b      	lsls	r3, r3, #1
2405d56a:	4413      	add	r3, r2
2405d56c:	00db      	lsls	r3, r3, #3
2405d56e:	3350      	adds	r3, #80	@ 0x50
2405d570:	443b      	add	r3, r7
2405d572:	3b38      	subs	r3, #56	@ 0x38
2405d574:	681b      	ldr	r3, [r3, #0]
2405d576:	3b01      	subs	r3, #1
2405d578:	009b      	lsls	r3, r3, #2
2405d57a:	440b      	add	r3, r1
2405d57c:	6859      	ldr	r1, [r3, #4]
2405d57e:	4878      	ldr	r0, [pc, #480]	@ (2405d760 <HAL_OSPIM_Config+0x508>)
2405d580:	6cba      	ldr	r2, [r7, #72]	@ 0x48
2405d582:	4613      	mov	r3, r2
2405d584:	005b      	lsls	r3, r3, #1
2405d586:	4413      	add	r3, r2
2405d588:	00db      	lsls	r3, r3, #3
2405d58a:	3350      	adds	r3, #80	@ 0x50
2405d58c:	443b      	add	r3, r7
2405d58e:	3b38      	subs	r3, #56	@ 0x38
2405d590:	681b      	ldr	r3, [r3, #0]
2405d592:	3b01      	subs	r3, #1
2405d594:	f021 0210 	bic.w	r2, r1, #16
2405d598:	009b      	lsls	r3, r3, #2
2405d59a:	4403      	add	r3, r0
2405d59c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
2405d59e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
2405d5a0:	4613      	mov	r3, r2
2405d5a2:	005b      	lsls	r3, r3, #1
2405d5a4:	4413      	add	r3, r2
2405d5a6:	00db      	lsls	r3, r3, #3
2405d5a8:	3350      	adds	r3, #80	@ 0x50
2405d5aa:	443b      	add	r3, r7
2405d5ac:	3b30      	subs	r3, #48	@ 0x30
2405d5ae:	681b      	ldr	r3, [r3, #0]
2405d5b0:	2b00      	cmp	r3, #0
2405d5b2:	d021      	beq.n	2405d5f8 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
2405d5b4:	496a      	ldr	r1, [pc, #424]	@ (2405d760 <HAL_OSPIM_Config+0x508>)
2405d5b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
2405d5b8:	4613      	mov	r3, r2
2405d5ba:	005b      	lsls	r3, r3, #1
2405d5bc:	4413      	add	r3, r2
2405d5be:	00db      	lsls	r3, r3, #3
2405d5c0:	3350      	adds	r3, #80	@ 0x50
2405d5c2:	443b      	add	r3, r7
2405d5c4:	3b30      	subs	r3, #48	@ 0x30
2405d5c6:	681b      	ldr	r3, [r3, #0]
2405d5c8:	3b01      	subs	r3, #1
2405d5ca:	f003 0301 	and.w	r3, r3, #1
2405d5ce:	009b      	lsls	r3, r3, #2
2405d5d0:	440b      	add	r3, r1
2405d5d2:	6859      	ldr	r1, [r3, #4]
2405d5d4:	4862      	ldr	r0, [pc, #392]	@ (2405d760 <HAL_OSPIM_Config+0x508>)
2405d5d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
2405d5d8:	4613      	mov	r3, r2
2405d5da:	005b      	lsls	r3, r3, #1
2405d5dc:	4413      	add	r3, r2
2405d5de:	00db      	lsls	r3, r3, #3
2405d5e0:	3350      	adds	r3, #80	@ 0x50
2405d5e2:	443b      	add	r3, r7
2405d5e4:	3b30      	subs	r3, #48	@ 0x30
2405d5e6:	681b      	ldr	r3, [r3, #0]
2405d5e8:	3b01      	subs	r3, #1
2405d5ea:	f003 0301 	and.w	r3, r3, #1
2405d5ee:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
2405d5f2:	009b      	lsls	r3, r3, #2
2405d5f4:	4403      	add	r3, r0
2405d5f6:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
2405d5f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
2405d5fa:	4613      	mov	r3, r2
2405d5fc:	005b      	lsls	r3, r3, #1
2405d5fe:	4413      	add	r3, r2
2405d600:	00db      	lsls	r3, r3, #3
2405d602:	3350      	adds	r3, #80	@ 0x50
2405d604:	443b      	add	r3, r7
2405d606:	3b2c      	subs	r3, #44	@ 0x2c
2405d608:	681b      	ldr	r3, [r3, #0]
2405d60a:	2b00      	cmp	r3, #0
2405d60c:	d021      	beq.n	2405d652 <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
2405d60e:	4954      	ldr	r1, [pc, #336]	@ (2405d760 <HAL_OSPIM_Config+0x508>)
2405d610:	6cba      	ldr	r2, [r7, #72]	@ 0x48
2405d612:	4613      	mov	r3, r2
2405d614:	005b      	lsls	r3, r3, #1
2405d616:	4413      	add	r3, r2
2405d618:	00db      	lsls	r3, r3, #3
2405d61a:	3350      	adds	r3, #80	@ 0x50
2405d61c:	443b      	add	r3, r7
2405d61e:	3b2c      	subs	r3, #44	@ 0x2c
2405d620:	681b      	ldr	r3, [r3, #0]
2405d622:	3b01      	subs	r3, #1
2405d624:	f003 0301 	and.w	r3, r3, #1
2405d628:	009b      	lsls	r3, r3, #2
2405d62a:	440b      	add	r3, r1
2405d62c:	6859      	ldr	r1, [r3, #4]
2405d62e:	484c      	ldr	r0, [pc, #304]	@ (2405d760 <HAL_OSPIM_Config+0x508>)
2405d630:	6cba      	ldr	r2, [r7, #72]	@ 0x48
2405d632:	4613      	mov	r3, r2
2405d634:	005b      	lsls	r3, r3, #1
2405d636:	4413      	add	r3, r2
2405d638:	00db      	lsls	r3, r3, #3
2405d63a:	3350      	adds	r3, #80	@ 0x50
2405d63c:	443b      	add	r3, r7
2405d63e:	3b2c      	subs	r3, #44	@ 0x2c
2405d640:	681b      	ldr	r3, [r3, #0]
2405d642:	3b01      	subs	r3, #1
2405d644:	f003 0301 	and.w	r3, r3, #1
2405d648:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
2405d64c:	009b      	lsls	r3, r3, #2
2405d64e:	4403      	add	r3, r0
2405d650:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
2405d652:	68bb      	ldr	r3, [r7, #8]
2405d654:	6819      	ldr	r1, [r3, #0]
2405d656:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
2405d65a:	4613      	mov	r3, r2
2405d65c:	005b      	lsls	r3, r3, #1
2405d65e:	4413      	add	r3, r2
2405d660:	00db      	lsls	r3, r3, #3
2405d662:	3350      	adds	r3, #80	@ 0x50
2405d664:	443b      	add	r3, r7
2405d666:	3b3c      	subs	r3, #60	@ 0x3c
2405d668:	681b      	ldr	r3, [r3, #0]
2405d66a:	4299      	cmp	r1, r3
2405d66c:	d038      	beq.n	2405d6e0 <HAL_OSPIM_Config+0x488>
2405d66e:	68bb      	ldr	r3, [r7, #8]
2405d670:	6859      	ldr	r1, [r3, #4]
2405d672:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
2405d676:	4613      	mov	r3, r2
2405d678:	005b      	lsls	r3, r3, #1
2405d67a:	4413      	add	r3, r2
2405d67c:	00db      	lsls	r3, r3, #3
2405d67e:	3350      	adds	r3, #80	@ 0x50
2405d680:	443b      	add	r3, r7
2405d682:	3b38      	subs	r3, #56	@ 0x38
2405d684:	681b      	ldr	r3, [r3, #0]
2405d686:	4299      	cmp	r1, r3
2405d688:	d02a      	beq.n	2405d6e0 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
2405d68a:	68bb      	ldr	r3, [r7, #8]
2405d68c:	6899      	ldr	r1, [r3, #8]
2405d68e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
2405d692:	4613      	mov	r3, r2
2405d694:	005b      	lsls	r3, r3, #1
2405d696:	4413      	add	r3, r2
2405d698:	00db      	lsls	r3, r3, #3
2405d69a:	3350      	adds	r3, #80	@ 0x50
2405d69c:	443b      	add	r3, r7
2405d69e:	3b34      	subs	r3, #52	@ 0x34
2405d6a0:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
2405d6a2:	4299      	cmp	r1, r3
2405d6a4:	d01c      	beq.n	2405d6e0 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
2405d6a6:	68bb      	ldr	r3, [r7, #8]
2405d6a8:	68d9      	ldr	r1, [r3, #12]
2405d6aa:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
2405d6ae:	4613      	mov	r3, r2
2405d6b0:	005b      	lsls	r3, r3, #1
2405d6b2:	4413      	add	r3, r2
2405d6b4:	00db      	lsls	r3, r3, #3
2405d6b6:	3350      	adds	r3, #80	@ 0x50
2405d6b8:	443b      	add	r3, r7
2405d6ba:	3b30      	subs	r3, #48	@ 0x30
2405d6bc:	681b      	ldr	r3, [r3, #0]
2405d6be:	4299      	cmp	r1, r3
2405d6c0:	d00e      	beq.n	2405d6e0 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
2405d6c2:	68bb      	ldr	r3, [r7, #8]
2405d6c4:	6919      	ldr	r1, [r3, #16]
2405d6c6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
2405d6ca:	4613      	mov	r3, r2
2405d6cc:	005b      	lsls	r3, r3, #1
2405d6ce:	4413      	add	r3, r2
2405d6d0:	00db      	lsls	r3, r3, #3
2405d6d2:	3350      	adds	r3, #80	@ 0x50
2405d6d4:	443b      	add	r3, r7
2405d6d6:	3b2c      	subs	r3, #44	@ 0x2c
2405d6d8:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
2405d6da:	4299      	cmp	r1, r3
2405d6dc:	f040 810e 	bne.w	2405d8fc <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
2405d6e0:	68bb      	ldr	r3, [r7, #8]
2405d6e2:	6819      	ldr	r1, [r3, #0]
2405d6e4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
2405d6e8:	4613      	mov	r3, r2
2405d6ea:	005b      	lsls	r3, r3, #1
2405d6ec:	4413      	add	r3, r2
2405d6ee:	00db      	lsls	r3, r3, #3
2405d6f0:	3350      	adds	r3, #80	@ 0x50
2405d6f2:	443b      	add	r3, r7
2405d6f4:	3b3c      	subs	r3, #60	@ 0x3c
2405d6f6:	681b      	ldr	r3, [r3, #0]
2405d6f8:	4299      	cmp	r1, r3
2405d6fa:	d133      	bne.n	2405d764 <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
2405d6fc:	68bb      	ldr	r3, [r7, #8]
2405d6fe:	6859      	ldr	r1, [r3, #4]
2405d700:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
2405d704:	4613      	mov	r3, r2
2405d706:	005b      	lsls	r3, r3, #1
2405d708:	4413      	add	r3, r2
2405d70a:	00db      	lsls	r3, r3, #3
2405d70c:	3350      	adds	r3, #80	@ 0x50
2405d70e:	443b      	add	r3, r7
2405d710:	3b38      	subs	r3, #56	@ 0x38
2405d712:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
2405d714:	4299      	cmp	r1, r3
2405d716:	d125      	bne.n	2405d764 <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
2405d718:	68bb      	ldr	r3, [r7, #8]
2405d71a:	68d9      	ldr	r1, [r3, #12]
2405d71c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
2405d720:	4613      	mov	r3, r2
2405d722:	005b      	lsls	r3, r3, #1
2405d724:	4413      	add	r3, r2
2405d726:	00db      	lsls	r3, r3, #3
2405d728:	3350      	adds	r3, #80	@ 0x50
2405d72a:	443b      	add	r3, r7
2405d72c:	3b30      	subs	r3, #48	@ 0x30
2405d72e:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
2405d730:	4299      	cmp	r1, r3
2405d732:	d117      	bne.n	2405d764 <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
2405d734:	68bb      	ldr	r3, [r7, #8]
2405d736:	6919      	ldr	r1, [r3, #16]
2405d738:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
2405d73c:	4613      	mov	r3, r2
2405d73e:	005b      	lsls	r3, r3, #1
2405d740:	4413      	add	r3, r2
2405d742:	00db      	lsls	r3, r3, #3
2405d744:	3350      	adds	r3, #80	@ 0x50
2405d746:	443b      	add	r3, r7
2405d748:	3b2c      	subs	r3, #44	@ 0x2c
2405d74a:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
2405d74c:	4299      	cmp	r1, r3
2405d74e:	d109      	bne.n	2405d764 <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
2405d750:	4b03      	ldr	r3, [pc, #12]	@ (2405d760 <HAL_OSPIM_Config+0x508>)
2405d752:	681b      	ldr	r3, [r3, #0]
2405d754:	4a02      	ldr	r2, [pc, #8]	@ (2405d760 <HAL_OSPIM_Config+0x508>)
2405d756:	f043 0301 	orr.w	r3, r3, #1
2405d75a:	6013      	str	r3, [r2, #0]
2405d75c:	e0ce      	b.n	2405d8fc <HAL_OSPIM_Config+0x6a4>
2405d75e:	bf00      	nop
2405d760:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
2405d764:	49bb      	ldr	r1, [pc, #748]	@ (2405da54 <HAL_OSPIM_Config+0x7fc>)
2405d766:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
2405d76a:	4613      	mov	r3, r2
2405d76c:	005b      	lsls	r3, r3, #1
2405d76e:	4413      	add	r3, r2
2405d770:	00db      	lsls	r3, r3, #3
2405d772:	3350      	adds	r3, #80	@ 0x50
2405d774:	443b      	add	r3, r7
2405d776:	3b3c      	subs	r3, #60	@ 0x3c
2405d778:	681b      	ldr	r3, [r3, #0]
2405d77a:	3b01      	subs	r3, #1
2405d77c:	009b      	lsls	r3, r3, #2
2405d77e:	440b      	add	r3, r1
2405d780:	6859      	ldr	r1, [r3, #4]
2405d782:	48b4      	ldr	r0, [pc, #720]	@ (2405da54 <HAL_OSPIM_Config+0x7fc>)
2405d784:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
2405d788:	4613      	mov	r3, r2
2405d78a:	005b      	lsls	r3, r3, #1
2405d78c:	4413      	add	r3, r2
2405d78e:	00db      	lsls	r3, r3, #3
2405d790:	3350      	adds	r3, #80	@ 0x50
2405d792:	443b      	add	r3, r7
2405d794:	3b3c      	subs	r3, #60	@ 0x3c
2405d796:	681b      	ldr	r3, [r3, #0]
2405d798:	3b01      	subs	r3, #1
2405d79a:	f021 0201 	bic.w	r2, r1, #1
2405d79e:	009b      	lsls	r3, r3, #2
2405d7a0:	4403      	add	r3, r0
2405d7a2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
2405d7a4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
2405d7a8:	4613      	mov	r3, r2
2405d7aa:	005b      	lsls	r3, r3, #1
2405d7ac:	4413      	add	r3, r2
2405d7ae:	00db      	lsls	r3, r3, #3
2405d7b0:	3350      	adds	r3, #80	@ 0x50
2405d7b2:	443b      	add	r3, r7
2405d7b4:	3b38      	subs	r3, #56	@ 0x38
2405d7b6:	681b      	ldr	r3, [r3, #0]
2405d7b8:	2b00      	cmp	r3, #0
2405d7ba:	d01f      	beq.n	2405d7fc <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
2405d7bc:	49a5      	ldr	r1, [pc, #660]	@ (2405da54 <HAL_OSPIM_Config+0x7fc>)
2405d7be:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
2405d7c2:	4613      	mov	r3, r2
2405d7c4:	005b      	lsls	r3, r3, #1
2405d7c6:	4413      	add	r3, r2
2405d7c8:	00db      	lsls	r3, r3, #3
2405d7ca:	3350      	adds	r3, #80	@ 0x50
2405d7cc:	443b      	add	r3, r7
2405d7ce:	3b38      	subs	r3, #56	@ 0x38
2405d7d0:	681b      	ldr	r3, [r3, #0]
2405d7d2:	3b01      	subs	r3, #1
2405d7d4:	009b      	lsls	r3, r3, #2
2405d7d6:	440b      	add	r3, r1
2405d7d8:	6859      	ldr	r1, [r3, #4]
2405d7da:	489e      	ldr	r0, [pc, #632]	@ (2405da54 <HAL_OSPIM_Config+0x7fc>)
2405d7dc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
2405d7e0:	4613      	mov	r3, r2
2405d7e2:	005b      	lsls	r3, r3, #1
2405d7e4:	4413      	add	r3, r2
2405d7e6:	00db      	lsls	r3, r3, #3
2405d7e8:	3350      	adds	r3, #80	@ 0x50
2405d7ea:	443b      	add	r3, r7
2405d7ec:	3b38      	subs	r3, #56	@ 0x38
2405d7ee:	681b      	ldr	r3, [r3, #0]
2405d7f0:	3b01      	subs	r3, #1
2405d7f2:	f021 0210 	bic.w	r2, r1, #16
2405d7f6:	009b      	lsls	r3, r3, #2
2405d7f8:	4403      	add	r3, r0
2405d7fa:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
2405d7fc:	4995      	ldr	r1, [pc, #596]	@ (2405da54 <HAL_OSPIM_Config+0x7fc>)
2405d7fe:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
2405d802:	4613      	mov	r3, r2
2405d804:	005b      	lsls	r3, r3, #1
2405d806:	4413      	add	r3, r2
2405d808:	00db      	lsls	r3, r3, #3
2405d80a:	3350      	adds	r3, #80	@ 0x50
2405d80c:	443b      	add	r3, r7
2405d80e:	3b34      	subs	r3, #52	@ 0x34
2405d810:	681b      	ldr	r3, [r3, #0]
2405d812:	3b01      	subs	r3, #1
2405d814:	009b      	lsls	r3, r3, #2
2405d816:	440b      	add	r3, r1
2405d818:	6859      	ldr	r1, [r3, #4]
2405d81a:	488e      	ldr	r0, [pc, #568]	@ (2405da54 <HAL_OSPIM_Config+0x7fc>)
2405d81c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
2405d820:	4613      	mov	r3, r2
2405d822:	005b      	lsls	r3, r3, #1
2405d824:	4413      	add	r3, r2
2405d826:	00db      	lsls	r3, r3, #3
2405d828:	3350      	adds	r3, #80	@ 0x50
2405d82a:	443b      	add	r3, r7
2405d82c:	3b34      	subs	r3, #52	@ 0x34
2405d82e:	681b      	ldr	r3, [r3, #0]
2405d830:	3b01      	subs	r3, #1
2405d832:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
2405d836:	009b      	lsls	r3, r3, #2
2405d838:	4403      	add	r3, r0
2405d83a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
2405d83c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
2405d840:	4613      	mov	r3, r2
2405d842:	005b      	lsls	r3, r3, #1
2405d844:	4413      	add	r3, r2
2405d846:	00db      	lsls	r3, r3, #3
2405d848:	3350      	adds	r3, #80	@ 0x50
2405d84a:	443b      	add	r3, r7
2405d84c:	3b30      	subs	r3, #48	@ 0x30
2405d84e:	681b      	ldr	r3, [r3, #0]
2405d850:	2b00      	cmp	r3, #0
2405d852:	d023      	beq.n	2405d89c <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
2405d854:	497f      	ldr	r1, [pc, #508]	@ (2405da54 <HAL_OSPIM_Config+0x7fc>)
2405d856:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
2405d85a:	4613      	mov	r3, r2
2405d85c:	005b      	lsls	r3, r3, #1
2405d85e:	4413      	add	r3, r2
2405d860:	00db      	lsls	r3, r3, #3
2405d862:	3350      	adds	r3, #80	@ 0x50
2405d864:	443b      	add	r3, r7
2405d866:	3b30      	subs	r3, #48	@ 0x30
2405d868:	681b      	ldr	r3, [r3, #0]
2405d86a:	3b01      	subs	r3, #1
2405d86c:	f003 0301 	and.w	r3, r3, #1
2405d870:	009b      	lsls	r3, r3, #2
2405d872:	440b      	add	r3, r1
2405d874:	6859      	ldr	r1, [r3, #4]
2405d876:	4877      	ldr	r0, [pc, #476]	@ (2405da54 <HAL_OSPIM_Config+0x7fc>)
2405d878:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
2405d87c:	4613      	mov	r3, r2
2405d87e:	005b      	lsls	r3, r3, #1
2405d880:	4413      	add	r3, r2
2405d882:	00db      	lsls	r3, r3, #3
2405d884:	3350      	adds	r3, #80	@ 0x50
2405d886:	443b      	add	r3, r7
2405d888:	3b30      	subs	r3, #48	@ 0x30
2405d88a:	681b      	ldr	r3, [r3, #0]
2405d88c:	3b01      	subs	r3, #1
2405d88e:	f003 0301 	and.w	r3, r3, #1
2405d892:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
2405d896:	009b      	lsls	r3, r3, #2
2405d898:	4403      	add	r3, r0
2405d89a:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
2405d89c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
2405d8a0:	4613      	mov	r3, r2
2405d8a2:	005b      	lsls	r3, r3, #1
2405d8a4:	4413      	add	r3, r2
2405d8a6:	00db      	lsls	r3, r3, #3
2405d8a8:	3350      	adds	r3, #80	@ 0x50
2405d8aa:	443b      	add	r3, r7
2405d8ac:	3b2c      	subs	r3, #44	@ 0x2c
2405d8ae:	681b      	ldr	r3, [r3, #0]
2405d8b0:	2b00      	cmp	r3, #0
2405d8b2:	d023      	beq.n	2405d8fc <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
2405d8b4:	4967      	ldr	r1, [pc, #412]	@ (2405da54 <HAL_OSPIM_Config+0x7fc>)
2405d8b6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
2405d8ba:	4613      	mov	r3, r2
2405d8bc:	005b      	lsls	r3, r3, #1
2405d8be:	4413      	add	r3, r2
2405d8c0:	00db      	lsls	r3, r3, #3
2405d8c2:	3350      	adds	r3, #80	@ 0x50
2405d8c4:	443b      	add	r3, r7
2405d8c6:	3b2c      	subs	r3, #44	@ 0x2c
2405d8c8:	681b      	ldr	r3, [r3, #0]
2405d8ca:	3b01      	subs	r3, #1
2405d8cc:	f003 0301 	and.w	r3, r3, #1
2405d8d0:	009b      	lsls	r3, r3, #2
2405d8d2:	440b      	add	r3, r1
2405d8d4:	6859      	ldr	r1, [r3, #4]
2405d8d6:	485f      	ldr	r0, [pc, #380]	@ (2405da54 <HAL_OSPIM_Config+0x7fc>)
2405d8d8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
2405d8dc:	4613      	mov	r3, r2
2405d8de:	005b      	lsls	r3, r3, #1
2405d8e0:	4413      	add	r3, r2
2405d8e2:	00db      	lsls	r3, r3, #3
2405d8e4:	3350      	adds	r3, #80	@ 0x50
2405d8e6:	443b      	add	r3, r7
2405d8e8:	3b2c      	subs	r3, #44	@ 0x2c
2405d8ea:	681b      	ldr	r3, [r3, #0]
2405d8ec:	3b01      	subs	r3, #1
2405d8ee:	f003 0301 	and.w	r3, r3, #1
2405d8f2:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
2405d8f6:	009b      	lsls	r3, r3, #2
2405d8f8:	4403      	add	r3, r0
2405d8fa:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
2405d8fc:	4a55      	ldr	r2, [pc, #340]	@ (2405da54 <HAL_OSPIM_Config+0x7fc>)
2405d8fe:	68bb      	ldr	r3, [r7, #8]
2405d900:	689b      	ldr	r3, [r3, #8]
2405d902:	3b01      	subs	r3, #1
2405d904:	009b      	lsls	r3, r3, #2
2405d906:	4413      	add	r3, r2
2405d908:	685b      	ldr	r3, [r3, #4]
2405d90a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
2405d90e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
2405d910:	025b      	lsls	r3, r3, #9
2405d912:	431a      	orrs	r2, r3
2405d914:	494f      	ldr	r1, [pc, #316]	@ (2405da54 <HAL_OSPIM_Config+0x7fc>)
2405d916:	68bb      	ldr	r3, [r7, #8]
2405d918:	689b      	ldr	r3, [r3, #8]
2405d91a:	3b01      	subs	r3, #1
2405d91c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
2405d920:	009b      	lsls	r3, r3, #2
2405d922:	440b      	add	r3, r1
2405d924:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
2405d926:	68bb      	ldr	r3, [r7, #8]
2405d928:	695b      	ldr	r3, [r3, #20]
2405d92a:	1e5a      	subs	r2, r3, #1
2405d92c:	4b49      	ldr	r3, [pc, #292]	@ (2405da54 <HAL_OSPIM_Config+0x7fc>)
2405d92e:	681b      	ldr	r3, [r3, #0]
2405d930:	0c1b      	lsrs	r3, r3, #16
2405d932:	b2db      	uxtb	r3, r3
2405d934:	429a      	cmp	r2, r3
2405d936:	d90a      	bls.n	2405d94e <HAL_OSPIM_Config+0x6f6>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
2405d938:	4b46      	ldr	r3, [pc, #280]	@ (2405da54 <HAL_OSPIM_Config+0x7fc>)
2405d93a:	681b      	ldr	r3, [r3, #0]
2405d93c:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
2405d940:	68bb      	ldr	r3, [r7, #8]
2405d942:	695b      	ldr	r3, [r3, #20]
2405d944:	3b01      	subs	r3, #1
2405d946:	041b      	lsls	r3, r3, #16
2405d948:	4942      	ldr	r1, [pc, #264]	@ (2405da54 <HAL_OSPIM_Config+0x7fc>)
2405d94a:	4313      	orrs	r3, r2
2405d94c:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
2405d94e:	4b41      	ldr	r3, [pc, #260]	@ (2405da54 <HAL_OSPIM_Config+0x7fc>)
2405d950:	681b      	ldr	r3, [r3, #0]
2405d952:	f003 0301 	and.w	r3, r3, #1
2405d956:	2b00      	cmp	r3, #0
2405d958:	f000 809a 	beq.w	2405da90 <HAL_OSPIM_Config+0x838>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
2405d95c:	4a3d      	ldr	r2, [pc, #244]	@ (2405da54 <HAL_OSPIM_Config+0x7fc>)
2405d95e:	68bb      	ldr	r3, [r7, #8]
2405d960:	681b      	ldr	r3, [r3, #0]
2405d962:	3b01      	subs	r3, #1
2405d964:	009b      	lsls	r3, r3, #2
2405d966:	4413      	add	r3, r2
2405d968:	685b      	ldr	r3, [r3, #4]
2405d96a:	f023 0203 	bic.w	r2, r3, #3
2405d96e:	4939      	ldr	r1, [pc, #228]	@ (2405da54 <HAL_OSPIM_Config+0x7fc>)
2405d970:	68bb      	ldr	r3, [r7, #8]
2405d972:	681b      	ldr	r3, [r3, #0]
2405d974:	3b01      	subs	r3, #1
2405d976:	f042 0201 	orr.w	r2, r2, #1
2405d97a:	009b      	lsls	r3, r3, #2
2405d97c:	440b      	add	r3, r1
2405d97e:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
2405d980:	68bb      	ldr	r3, [r7, #8]
2405d982:	685b      	ldr	r3, [r3, #4]
2405d984:	2b00      	cmp	r3, #0
2405d986:	d011      	beq.n	2405d9ac <HAL_OSPIM_Config+0x754>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
2405d988:	4a32      	ldr	r2, [pc, #200]	@ (2405da54 <HAL_OSPIM_Config+0x7fc>)
2405d98a:	68bb      	ldr	r3, [r7, #8]
2405d98c:	685b      	ldr	r3, [r3, #4]
2405d98e:	3b01      	subs	r3, #1
2405d990:	009b      	lsls	r3, r3, #2
2405d992:	4413      	add	r3, r2
2405d994:	685b      	ldr	r3, [r3, #4]
2405d996:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
2405d99a:	492e      	ldr	r1, [pc, #184]	@ (2405da54 <HAL_OSPIM_Config+0x7fc>)
2405d99c:	68bb      	ldr	r3, [r7, #8]
2405d99e:	685b      	ldr	r3, [r3, #4]
2405d9a0:	3b01      	subs	r3, #1
2405d9a2:	f042 0210 	orr.w	r2, r2, #16
2405d9a6:	009b      	lsls	r3, r3, #2
2405d9a8:	440b      	add	r3, r1
2405d9aa:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
2405d9ac:	68bb      	ldr	r3, [r7, #8]
2405d9ae:	68db      	ldr	r3, [r3, #12]
2405d9b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
2405d9b4:	2b00      	cmp	r3, #0
2405d9b6:	d016      	beq.n	2405d9e6 <HAL_OSPIM_Config+0x78e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
2405d9b8:	4a26      	ldr	r2, [pc, #152]	@ (2405da54 <HAL_OSPIM_Config+0x7fc>)
2405d9ba:	68bb      	ldr	r3, [r7, #8]
2405d9bc:	68db      	ldr	r3, [r3, #12]
2405d9be:	3b01      	subs	r3, #1
2405d9c0:	f003 0301 	and.w	r3, r3, #1
2405d9c4:	009b      	lsls	r3, r3, #2
2405d9c6:	4413      	add	r3, r2
2405d9c8:	685b      	ldr	r3, [r3, #4]
2405d9ca:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
2405d9ce:	4921      	ldr	r1, [pc, #132]	@ (2405da54 <HAL_OSPIM_Config+0x7fc>)
2405d9d0:	68bb      	ldr	r3, [r7, #8]
2405d9d2:	68db      	ldr	r3, [r3, #12]
2405d9d4:	3b01      	subs	r3, #1
2405d9d6:	f003 0301 	and.w	r3, r3, #1
2405d9da:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
2405d9de:	009b      	lsls	r3, r3, #2
2405d9e0:	440b      	add	r3, r1
2405d9e2:	605a      	str	r2, [r3, #4]
2405d9e4:	e019      	b.n	2405da1a <HAL_OSPIM_Config+0x7c2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
2405d9e6:	68bb      	ldr	r3, [r7, #8]
2405d9e8:	68db      	ldr	r3, [r3, #12]
2405d9ea:	2b00      	cmp	r3, #0
2405d9ec:	d015      	beq.n	2405da1a <HAL_OSPIM_Config+0x7c2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
2405d9ee:	4a19      	ldr	r2, [pc, #100]	@ (2405da54 <HAL_OSPIM_Config+0x7fc>)
2405d9f0:	68bb      	ldr	r3, [r7, #8]
2405d9f2:	68db      	ldr	r3, [r3, #12]
2405d9f4:	3b01      	subs	r3, #1
2405d9f6:	f003 0301 	and.w	r3, r3, #1
2405d9fa:	009b      	lsls	r3, r3, #2
2405d9fc:	4413      	add	r3, r2
2405d9fe:	685b      	ldr	r3, [r3, #4]
2405da00:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
2405da04:	4913      	ldr	r1, [pc, #76]	@ (2405da54 <HAL_OSPIM_Config+0x7fc>)
2405da06:	68bb      	ldr	r3, [r7, #8]
2405da08:	68db      	ldr	r3, [r3, #12]
2405da0a:	3b01      	subs	r3, #1
2405da0c:	f003 0301 	and.w	r3, r3, #1
2405da10:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
2405da14:	009b      	lsls	r3, r3, #2
2405da16:	440b      	add	r3, r1
2405da18:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
2405da1a:	68bb      	ldr	r3, [r7, #8]
2405da1c:	691b      	ldr	r3, [r3, #16]
2405da1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
2405da22:	2b00      	cmp	r3, #0
2405da24:	d018      	beq.n	2405da58 <HAL_OSPIM_Config+0x800>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
2405da26:	4a0b      	ldr	r2, [pc, #44]	@ (2405da54 <HAL_OSPIM_Config+0x7fc>)
2405da28:	68bb      	ldr	r3, [r7, #8]
2405da2a:	691b      	ldr	r3, [r3, #16]
2405da2c:	3b01      	subs	r3, #1
2405da2e:	f003 0301 	and.w	r3, r3, #1
2405da32:	009b      	lsls	r3, r3, #2
2405da34:	4413      	add	r3, r2
2405da36:	685b      	ldr	r3, [r3, #4]
2405da38:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
2405da3c:	4905      	ldr	r1, [pc, #20]	@ (2405da54 <HAL_OSPIM_Config+0x7fc>)
2405da3e:	68bb      	ldr	r3, [r7, #8]
2405da40:	691b      	ldr	r3, [r3, #16]
2405da42:	3b01      	subs	r3, #1
2405da44:	f003 0301 	and.w	r3, r3, #1
2405da48:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
2405da4c:	009b      	lsls	r3, r3, #2
2405da4e:	440b      	add	r3, r1
2405da50:	605a      	str	r2, [r3, #4]
2405da52:	e0c5      	b.n	2405dbe0 <HAL_OSPIM_Config+0x988>
2405da54:	5200b400 	.word	0x5200b400
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
2405da58:	68bb      	ldr	r3, [r7, #8]
2405da5a:	691b      	ldr	r3, [r3, #16]
2405da5c:	2b00      	cmp	r3, #0
2405da5e:	f000 80bf 	beq.w	2405dbe0 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
2405da62:	4a6e      	ldr	r2, [pc, #440]	@ (2405dc1c <HAL_OSPIM_Config+0x9c4>)
2405da64:	68bb      	ldr	r3, [r7, #8]
2405da66:	691b      	ldr	r3, [r3, #16]
2405da68:	3b01      	subs	r3, #1
2405da6a:	f003 0301 	and.w	r3, r3, #1
2405da6e:	009b      	lsls	r3, r3, #2
2405da70:	4413      	add	r3, r2
2405da72:	685b      	ldr	r3, [r3, #4]
2405da74:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
2405da78:	4968      	ldr	r1, [pc, #416]	@ (2405dc1c <HAL_OSPIM_Config+0x9c4>)
2405da7a:	68bb      	ldr	r3, [r7, #8]
2405da7c:	691b      	ldr	r3, [r3, #16]
2405da7e:	3b01      	subs	r3, #1
2405da80:	f003 0301 	and.w	r3, r3, #1
2405da84:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
2405da88:	009b      	lsls	r3, r3, #2
2405da8a:	440b      	add	r3, r1
2405da8c:	605a      	str	r2, [r3, #4]
2405da8e:	e0a7      	b.n	2405dbe0 <HAL_OSPIM_Config+0x988>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
2405da90:	4a62      	ldr	r2, [pc, #392]	@ (2405dc1c <HAL_OSPIM_Config+0x9c4>)
2405da92:	68bb      	ldr	r3, [r7, #8]
2405da94:	681b      	ldr	r3, [r3, #0]
2405da96:	3b01      	subs	r3, #1
2405da98:	009b      	lsls	r3, r3, #2
2405da9a:	4413      	add	r3, r2
2405da9c:	685b      	ldr	r3, [r3, #4]
2405da9e:	f023 0203 	bic.w	r2, r3, #3
2405daa2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
2405daa4:	005b      	lsls	r3, r3, #1
2405daa6:	431a      	orrs	r2, r3
2405daa8:	495c      	ldr	r1, [pc, #368]	@ (2405dc1c <HAL_OSPIM_Config+0x9c4>)
2405daaa:	68bb      	ldr	r3, [r7, #8]
2405daac:	681b      	ldr	r3, [r3, #0]
2405daae:	3b01      	subs	r3, #1
2405dab0:	f042 0201 	orr.w	r2, r2, #1
2405dab4:	009b      	lsls	r3, r3, #2
2405dab6:	440b      	add	r3, r1
2405dab8:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
2405daba:	68bb      	ldr	r3, [r7, #8]
2405dabc:	685b      	ldr	r3, [r3, #4]
2405dabe:	2b00      	cmp	r3, #0
2405dac0:	d014      	beq.n	2405daec <HAL_OSPIM_Config+0x894>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
2405dac2:	4a56      	ldr	r2, [pc, #344]	@ (2405dc1c <HAL_OSPIM_Config+0x9c4>)
2405dac4:	68bb      	ldr	r3, [r7, #8]
2405dac6:	685b      	ldr	r3, [r3, #4]
2405dac8:	3b01      	subs	r3, #1
2405daca:	009b      	lsls	r3, r3, #2
2405dacc:	4413      	add	r3, r2
2405dace:	685b      	ldr	r3, [r3, #4]
2405dad0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
2405dad4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
2405dad6:	015b      	lsls	r3, r3, #5
2405dad8:	431a      	orrs	r2, r3
2405dada:	4950      	ldr	r1, [pc, #320]	@ (2405dc1c <HAL_OSPIM_Config+0x9c4>)
2405dadc:	68bb      	ldr	r3, [r7, #8]
2405dade:	685b      	ldr	r3, [r3, #4]
2405dae0:	3b01      	subs	r3, #1
2405dae2:	f042 0210 	orr.w	r2, r2, #16
2405dae6:	009b      	lsls	r3, r3, #2
2405dae8:	440b      	add	r3, r1
2405daea:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
2405daec:	68bb      	ldr	r3, [r7, #8]
2405daee:	68db      	ldr	r3, [r3, #12]
2405daf0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
2405daf4:	2b00      	cmp	r3, #0
2405daf6:	d019      	beq.n	2405db2c <HAL_OSPIM_Config+0x8d4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
2405daf8:	4a48      	ldr	r2, [pc, #288]	@ (2405dc1c <HAL_OSPIM_Config+0x9c4>)
2405dafa:	68bb      	ldr	r3, [r7, #8]
2405dafc:	68db      	ldr	r3, [r3, #12]
2405dafe:	3b01      	subs	r3, #1
2405db00:	f003 0301 	and.w	r3, r3, #1
2405db04:	009b      	lsls	r3, r3, #2
2405db06:	4413      	add	r3, r2
2405db08:	685b      	ldr	r3, [r3, #4]
2405db0a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
2405db0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
2405db10:	049b      	lsls	r3, r3, #18
2405db12:	431a      	orrs	r2, r3
2405db14:	4941      	ldr	r1, [pc, #260]	@ (2405dc1c <HAL_OSPIM_Config+0x9c4>)
2405db16:	68bb      	ldr	r3, [r7, #8]
2405db18:	68db      	ldr	r3, [r3, #12]
2405db1a:	3b01      	subs	r3, #1
2405db1c:	f003 0301 	and.w	r3, r3, #1
2405db20:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
2405db24:	009b      	lsls	r3, r3, #2
2405db26:	440b      	add	r3, r1
2405db28:	605a      	str	r2, [r3, #4]
2405db2a:	e01c      	b.n	2405db66 <HAL_OSPIM_Config+0x90e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
2405db2c:	68bb      	ldr	r3, [r7, #8]
2405db2e:	68db      	ldr	r3, [r3, #12]
2405db30:	2b00      	cmp	r3, #0
2405db32:	d018      	beq.n	2405db66 <HAL_OSPIM_Config+0x90e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
2405db34:	4a39      	ldr	r2, [pc, #228]	@ (2405dc1c <HAL_OSPIM_Config+0x9c4>)
2405db36:	68bb      	ldr	r3, [r7, #8]
2405db38:	68db      	ldr	r3, [r3, #12]
2405db3a:	3b01      	subs	r3, #1
2405db3c:	f003 0301 	and.w	r3, r3, #1
2405db40:	009b      	lsls	r3, r3, #2
2405db42:	4413      	add	r3, r2
2405db44:	685b      	ldr	r3, [r3, #4]
2405db46:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
2405db4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
2405db4c:	069b      	lsls	r3, r3, #26
2405db4e:	431a      	orrs	r2, r3
2405db50:	4932      	ldr	r1, [pc, #200]	@ (2405dc1c <HAL_OSPIM_Config+0x9c4>)
2405db52:	68bb      	ldr	r3, [r7, #8]
2405db54:	68db      	ldr	r3, [r3, #12]
2405db56:	3b01      	subs	r3, #1
2405db58:	f003 0301 	and.w	r3, r3, #1
2405db5c:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
2405db60:	009b      	lsls	r3, r3, #2
2405db62:	440b      	add	r3, r1
2405db64:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
2405db66:	68bb      	ldr	r3, [r7, #8]
2405db68:	691b      	ldr	r3, [r3, #16]
2405db6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
2405db6e:	2b00      	cmp	r3, #0
2405db70:	d019      	beq.n	2405dba6 <HAL_OSPIM_Config+0x94e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
2405db72:	4a2a      	ldr	r2, [pc, #168]	@ (2405dc1c <HAL_OSPIM_Config+0x9c4>)
2405db74:	68bb      	ldr	r3, [r7, #8]
2405db76:	691b      	ldr	r3, [r3, #16]
2405db78:	3b01      	subs	r3, #1
2405db7a:	f003 0301 	and.w	r3, r3, #1
2405db7e:	009b      	lsls	r3, r3, #2
2405db80:	4413      	add	r3, r2
2405db82:	685b      	ldr	r3, [r3, #4]
2405db84:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
2405db88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
2405db8a:	049b      	lsls	r3, r3, #18
2405db8c:	431a      	orrs	r2, r3
2405db8e:	4923      	ldr	r1, [pc, #140]	@ (2405dc1c <HAL_OSPIM_Config+0x9c4>)
2405db90:	68bb      	ldr	r3, [r7, #8]
2405db92:	691b      	ldr	r3, [r3, #16]
2405db94:	3b01      	subs	r3, #1
2405db96:	f003 0301 	and.w	r3, r3, #1
2405db9a:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
2405db9e:	009b      	lsls	r3, r3, #2
2405dba0:	440b      	add	r3, r1
2405dba2:	605a      	str	r2, [r3, #4]
2405dba4:	e01c      	b.n	2405dbe0 <HAL_OSPIM_Config+0x988>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
2405dba6:	68bb      	ldr	r3, [r7, #8]
2405dba8:	691b      	ldr	r3, [r3, #16]
2405dbaa:	2b00      	cmp	r3, #0
2405dbac:	d018      	beq.n	2405dbe0 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
2405dbae:	4a1b      	ldr	r2, [pc, #108]	@ (2405dc1c <HAL_OSPIM_Config+0x9c4>)
2405dbb0:	68bb      	ldr	r3, [r7, #8]
2405dbb2:	691b      	ldr	r3, [r3, #16]
2405dbb4:	3b01      	subs	r3, #1
2405dbb6:	f003 0301 	and.w	r3, r3, #1
2405dbba:	009b      	lsls	r3, r3, #2
2405dbbc:	4413      	add	r3, r2
2405dbbe:	685b      	ldr	r3, [r3, #4]
2405dbc0:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
2405dbc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
2405dbc6:	069b      	lsls	r3, r3, #26
2405dbc8:	431a      	orrs	r2, r3
2405dbca:	4914      	ldr	r1, [pc, #80]	@ (2405dc1c <HAL_OSPIM_Config+0x9c4>)
2405dbcc:	68bb      	ldr	r3, [r7, #8]
2405dbce:	691b      	ldr	r3, [r3, #16]
2405dbd0:	3b01      	subs	r3, #1
2405dbd2:	f003 0301 	and.w	r3, r3, #1
2405dbd6:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
2405dbda:	009b      	lsls	r3, r3, #2
2405dbdc:	440b      	add	r3, r1
2405dbde:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
2405dbe0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
2405dbe4:	f003 0301 	and.w	r3, r3, #1
2405dbe8:	2b00      	cmp	r3, #0
2405dbea:	d005      	beq.n	2405dbf8 <HAL_OSPIM_Config+0x9a0>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
2405dbec:	4b0c      	ldr	r3, [pc, #48]	@ (2405dc20 <HAL_OSPIM_Config+0x9c8>)
2405dbee:	681b      	ldr	r3, [r3, #0]
2405dbf0:	4a0b      	ldr	r2, [pc, #44]	@ (2405dc20 <HAL_OSPIM_Config+0x9c8>)
2405dbf2:	f043 0301 	orr.w	r3, r3, #1
2405dbf6:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
2405dbf8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
2405dbfc:	f003 0302 	and.w	r3, r3, #2
2405dc00:	2b00      	cmp	r3, #0
2405dc02:	d005      	beq.n	2405dc10 <HAL_OSPIM_Config+0x9b8>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
2405dc04:	4b07      	ldr	r3, [pc, #28]	@ (2405dc24 <HAL_OSPIM_Config+0x9cc>)
2405dc06:	681b      	ldr	r3, [r3, #0]
2405dc08:	4a06      	ldr	r2, [pc, #24]	@ (2405dc24 <HAL_OSPIM_Config+0x9cc>)
2405dc0a:	f043 0301 	orr.w	r3, r3, #1
2405dc0e:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
2405dc10:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
2405dc14:	4618      	mov	r0, r3
2405dc16:	3750      	adds	r7, #80	@ 0x50
2405dc18:	46bd      	mov	sp, r7
2405dc1a:	bd80      	pop	{r7, pc}
2405dc1c:	5200b400 	.word	0x5200b400
2405dc20:	52005000 	.word	0x52005000
2405dc24:	5200a000 	.word	0x5200a000

2405dc28 <OSPI_DMAAbortCplt>:
  * @brief  DMA OSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void OSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
2405dc28:	b580      	push	{r7, lr}
2405dc2a:	b084      	sub	sp, #16
2405dc2c:	af00      	add	r7, sp, #0
2405dc2e:	6078      	str	r0, [r7, #4]
  OSPI_HandleTypeDef *hospi = (OSPI_HandleTypeDef *)(hmdma->Parent);
2405dc30:	687b      	ldr	r3, [r7, #4]
2405dc32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2405dc34:	60fb      	str	r3, [r7, #12]
  hospi->XferCount = 0;
2405dc36:	68fb      	ldr	r3, [r7, #12]
2405dc38:	2200      	movs	r2, #0
2405dc3a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_ABORT)
2405dc3c:	68fb      	ldr	r3, [r7, #12]
2405dc3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2405dc40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
2405dc44:	d122      	bne.n	2405dc8c <OSPI_DMAAbortCplt+0x64>
  {
    /* DMA abort called by OctoSPI abort */
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
2405dc46:	68fb      	ldr	r3, [r7, #12]
2405dc48:	681b      	ldr	r3, [r3, #0]
2405dc4a:	6a1b      	ldr	r3, [r3, #32]
2405dc4c:	f003 0320 	and.w	r3, r3, #32
2405dc50:	2b00      	cmp	r3, #0
2405dc52:	d014      	beq.n	2405dc7e <OSPI_DMAAbortCplt+0x56>
    {
      /* Clear transfer complete flag */
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
2405dc54:	68fb      	ldr	r3, [r7, #12]
2405dc56:	681b      	ldr	r3, [r3, #0]
2405dc58:	2202      	movs	r2, #2
2405dc5a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enable the transfer complete interrupts */
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
2405dc5c:	68fb      	ldr	r3, [r7, #12]
2405dc5e:	681b      	ldr	r3, [r3, #0]
2405dc60:	681a      	ldr	r2, [r3, #0]
2405dc62:	68fb      	ldr	r3, [r7, #12]
2405dc64:	681b      	ldr	r3, [r3, #0]
2405dc66:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
2405dc6a:	601a      	str	r2, [r3, #0]

      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
2405dc6c:	68fb      	ldr	r3, [r7, #12]
2405dc6e:	681b      	ldr	r3, [r3, #0]
2405dc70:	681a      	ldr	r2, [r3, #0]
2405dc72:	68fb      	ldr	r3, [r7, #12]
2405dc74:	681b      	ldr	r3, [r3, #0]
2405dc76:	f042 0202 	orr.w	r2, r2, #2
2405dc7a:	601a      	str	r2, [r3, #0]
    hospi->ErrorCallback(hospi);
#else
    HAL_OSPI_ErrorCallback(hospi);
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
}
2405dc7c:	e00c      	b.n	2405dc98 <OSPI_DMAAbortCplt+0x70>
      hospi->State = HAL_OSPI_STATE_READY;
2405dc7e:	68fb      	ldr	r3, [r7, #12]
2405dc80:	2202      	movs	r2, #2
2405dc82:	651a      	str	r2, [r3, #80]	@ 0x50
      HAL_OSPI_AbortCpltCallback(hospi);
2405dc84:	68f8      	ldr	r0, [r7, #12]
2405dc86:	f7ff fa91 	bl	2405d1ac <HAL_OSPI_AbortCpltCallback>
}
2405dc8a:	e005      	b.n	2405dc98 <OSPI_DMAAbortCplt+0x70>
    hospi->State = HAL_OSPI_STATE_READY;
2405dc8c:	68fb      	ldr	r3, [r7, #12]
2405dc8e:	2202      	movs	r2, #2
2405dc90:	651a      	str	r2, [r3, #80]	@ 0x50
    HAL_OSPI_ErrorCallback(hospi);
2405dc92:	68f8      	ldr	r0, [r7, #12]
2405dc94:	f7ff fa80 	bl	2405d198 <HAL_OSPI_ErrorCallback>
}
2405dc98:	bf00      	nop
2405dc9a:	3710      	adds	r7, #16
2405dc9c:	46bd      	mov	sp, r7
2405dc9e:	bd80      	pop	{r7, pc}

2405dca0 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
2405dca0:	b580      	push	{r7, lr}
2405dca2:	b084      	sub	sp, #16
2405dca4:	af00      	add	r7, sp, #0
2405dca6:	60f8      	str	r0, [r7, #12]
2405dca8:	60b9      	str	r1, [r7, #8]
2405dcaa:	603b      	str	r3, [r7, #0]
2405dcac:	4613      	mov	r3, r2
2405dcae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
2405dcb0:	e01a      	b.n	2405dce8 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
2405dcb2:	69bb      	ldr	r3, [r7, #24]
2405dcb4:	f1b3 3fff 	cmp.w	r3, #4294967295
2405dcb8:	d016      	beq.n	2405dce8 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2405dcba:	f7f8 fee1 	bl	24056a80 <HAL_GetTick>
2405dcbe:	4602      	mov	r2, r0
2405dcc0:	683b      	ldr	r3, [r7, #0]
2405dcc2:	1ad3      	subs	r3, r2, r3
2405dcc4:	69ba      	ldr	r2, [r7, #24]
2405dcc6:	429a      	cmp	r2, r3
2405dcc8:	d302      	bcc.n	2405dcd0 <OSPI_WaitFlagStateUntilTimeout+0x30>
2405dcca:	69bb      	ldr	r3, [r7, #24]
2405dccc:	2b00      	cmp	r3, #0
2405dcce:	d10b      	bne.n	2405dce8 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
2405dcd0:	68fb      	ldr	r3, [r7, #12]
2405dcd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
2405dcd6:	651a      	str	r2, [r3, #80]	@ 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
2405dcd8:	68fb      	ldr	r3, [r7, #12]
2405dcda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
2405dcdc:	f043 0201 	orr.w	r2, r3, #1
2405dce0:	68fb      	ldr	r3, [r7, #12]
2405dce2:	655a      	str	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
2405dce4:	2301      	movs	r3, #1
2405dce6:	e00e      	b.n	2405dd06 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
2405dce8:	68fb      	ldr	r3, [r7, #12]
2405dcea:	681b      	ldr	r3, [r3, #0]
2405dcec:	6a1a      	ldr	r2, [r3, #32]
2405dcee:	68bb      	ldr	r3, [r7, #8]
2405dcf0:	4013      	ands	r3, r2
2405dcf2:	2b00      	cmp	r3, #0
2405dcf4:	bf14      	ite	ne
2405dcf6:	2301      	movne	r3, #1
2405dcf8:	2300      	moveq	r3, #0
2405dcfa:	b2db      	uxtb	r3, r3
2405dcfc:	461a      	mov	r2, r3
2405dcfe:	79fb      	ldrb	r3, [r7, #7]
2405dd00:	429a      	cmp	r2, r3
2405dd02:	d1d6      	bne.n	2405dcb2 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
2405dd04:	2300      	movs	r3, #0
}
2405dd06:	4618      	mov	r0, r3
2405dd08:	3710      	adds	r7, #16
2405dd0a:	46bd      	mov	sp, r7
2405dd0c:	bd80      	pop	{r7, pc}
	...

2405dd10 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
2405dd10:	b480      	push	{r7}
2405dd12:	b089      	sub	sp, #36	@ 0x24
2405dd14:	af00      	add	r7, sp, #0
2405dd16:	6078      	str	r0, [r7, #4]
2405dd18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
2405dd1a:	2300      	movs	r3, #0
2405dd1c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
2405dd1e:	687b      	ldr	r3, [r7, #4]
2405dd20:	681b      	ldr	r3, [r3, #0]
2405dd22:	681a      	ldr	r2, [r3, #0]
2405dd24:	687b      	ldr	r3, [r7, #4]
2405dd26:	681b      	ldr	r3, [r3, #0]
2405dd28:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
2405dd2c:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
2405dd2e:	687b      	ldr	r3, [r7, #4]
2405dd30:	689b      	ldr	r3, [r3, #8]
2405dd32:	2b00      	cmp	r3, #0
2405dd34:	d10a      	bne.n	2405dd4c <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
2405dd36:	687b      	ldr	r3, [r7, #4]
2405dd38:	681b      	ldr	r3, [r3, #0]
2405dd3a:	681b      	ldr	r3, [r3, #0]
2405dd3c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
2405dd40:	683b      	ldr	r3, [r7, #0]
2405dd42:	685a      	ldr	r2, [r3, #4]
2405dd44:	687b      	ldr	r3, [r7, #4]
2405dd46:	681b      	ldr	r3, [r3, #0]
2405dd48:	430a      	orrs	r2, r1
2405dd4a:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
2405dd4c:	683b      	ldr	r3, [r7, #0]
2405dd4e:	681b      	ldr	r3, [r3, #0]
2405dd50:	2b02      	cmp	r3, #2
2405dd52:	d114      	bne.n	2405dd7e <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
2405dd54:	687b      	ldr	r3, [r7, #4]
2405dd56:	681b      	ldr	r3, [r3, #0]
2405dd58:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
2405dd5c:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
2405dd5e:	687b      	ldr	r3, [r7, #4]
2405dd60:	681b      	ldr	r3, [r3, #0]
2405dd62:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
2405dd66:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
2405dd68:	687b      	ldr	r3, [r7, #4]
2405dd6a:	681b      	ldr	r3, [r3, #0]
2405dd6c:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
2405dd70:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
2405dd72:	687b      	ldr	r3, [r7, #4]
2405dd74:	681b      	ldr	r3, [r3, #0]
2405dd76:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
2405dd7a:	60fb      	str	r3, [r7, #12]
2405dd7c:	e02c      	b.n	2405ddd8 <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
2405dd7e:	683b      	ldr	r3, [r7, #0]
2405dd80:	681b      	ldr	r3, [r3, #0]
2405dd82:	2b03      	cmp	r3, #3
2405dd84:	d114      	bne.n	2405ddb0 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
2405dd86:	687b      	ldr	r3, [r7, #4]
2405dd88:	681b      	ldr	r3, [r3, #0]
2405dd8a:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
2405dd8e:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
2405dd90:	687b      	ldr	r3, [r7, #4]
2405dd92:	681b      	ldr	r3, [r3, #0]
2405dd94:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
2405dd98:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
2405dd9a:	687b      	ldr	r3, [r7, #4]
2405dd9c:	681b      	ldr	r3, [r3, #0]
2405dd9e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
2405dda2:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
2405dda4:	687b      	ldr	r3, [r7, #4]
2405dda6:	681b      	ldr	r3, [r3, #0]
2405dda8:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
2405ddac:	60fb      	str	r3, [r7, #12]
2405ddae:	e013      	b.n	2405ddd8 <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
2405ddb0:	687b      	ldr	r3, [r7, #4]
2405ddb2:	681b      	ldr	r3, [r3, #0]
2405ddb4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
2405ddb8:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
2405ddba:	687b      	ldr	r3, [r7, #4]
2405ddbc:	681b      	ldr	r3, [r3, #0]
2405ddbe:	f503 7384 	add.w	r3, r3, #264	@ 0x108
2405ddc2:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
2405ddc4:	687b      	ldr	r3, [r7, #4]
2405ddc6:	681b      	ldr	r3, [r3, #0]
2405ddc8:	f503 7388 	add.w	r3, r3, #272	@ 0x110
2405ddcc:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
2405ddce:	687b      	ldr	r3, [r7, #4]
2405ddd0:	681b      	ldr	r3, [r3, #0]
2405ddd2:	f503 7390 	add.w	r3, r3, #288	@ 0x120
2405ddd6:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
2405ddd8:	683b      	ldr	r3, [r7, #0]
2405ddda:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
2405dddc:	683b      	ldr	r3, [r7, #0]
2405ddde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2405dde0:	431a      	orrs	r2, r3
2405dde2:	69bb      	ldr	r3, [r7, #24]
2405dde4:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
2405dde6:	683b      	ldr	r3, [r7, #0]
2405dde8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2405ddea:	2b00      	cmp	r3, #0
2405ddec:	d012      	beq.n	2405de14 <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
2405ddee:	683b      	ldr	r3, [r7, #0]
2405ddf0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
2405ddf2:	68fb      	ldr	r3, [r7, #12]
2405ddf4:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
2405ddf6:	69bb      	ldr	r3, [r7, #24]
2405ddf8:	681b      	ldr	r3, [r3, #0]
2405ddfa:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
2405ddfe:	683b      	ldr	r3, [r7, #0]
2405de00:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
2405de02:	683b      	ldr	r3, [r7, #0]
2405de04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
2405de06:	4319      	orrs	r1, r3
2405de08:	683b      	ldr	r3, [r7, #0]
2405de0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2405de0c:	430b      	orrs	r3, r1
2405de0e:	431a      	orrs	r2, r3
2405de10:	69bb      	ldr	r3, [r7, #24]
2405de12:	601a      	str	r2, [r3, #0]
               (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
2405de14:	697b      	ldr	r3, [r7, #20]
2405de16:	681b      	ldr	r3, [r3, #0]
2405de18:	f023 021f 	bic.w	r2, r3, #31
2405de1c:	683b      	ldr	r3, [r7, #0]
2405de1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2405de20:	431a      	orrs	r2, r3
2405de22:	697b      	ldr	r3, [r7, #20]
2405de24:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
2405de26:	683b      	ldr	r3, [r7, #0]
2405de28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2405de2a:	2b00      	cmp	r3, #0
2405de2c:	d009      	beq.n	2405de42 <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
2405de2e:	683b      	ldr	r3, [r7, #0]
2405de30:	681b      	ldr	r3, [r3, #0]
2405de32:	2b00      	cmp	r3, #0
2405de34:	d105      	bne.n	2405de42 <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
2405de36:	683b      	ldr	r3, [r7, #0]
2405de38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
2405de3a:	687b      	ldr	r3, [r7, #4]
2405de3c:	681b      	ldr	r3, [r3, #0]
2405de3e:	3a01      	subs	r2, #1
2405de40:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
2405de42:	683b      	ldr	r3, [r7, #0]
2405de44:	68db      	ldr	r3, [r3, #12]
2405de46:	2b00      	cmp	r3, #0
2405de48:	f000 8095 	beq.w	2405df76 <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
2405de4c:	683b      	ldr	r3, [r7, #0]
2405de4e:	69db      	ldr	r3, [r3, #28]
2405de50:	2b00      	cmp	r3, #0
2405de52:	d053      	beq.n	2405defc <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
2405de54:	683b      	ldr	r3, [r7, #0]
2405de56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2405de58:	2b00      	cmp	r3, #0
2405de5a:	d01e      	beq.n	2405de9a <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
2405de5c:	69bb      	ldr	r3, [r7, #24]
2405de5e:	681a      	ldr	r2, [r3, #0]
2405de60:	4b64      	ldr	r3, [pc, #400]	@ (2405dff4 <OSPI_ConfigCmd+0x2e4>)
2405de62:	4013      	ands	r3, r2
2405de64:	683a      	ldr	r2, [r7, #0]
2405de66:	68d1      	ldr	r1, [r2, #12]
2405de68:	683a      	ldr	r2, [r7, #0]
2405de6a:	6952      	ldr	r2, [r2, #20]
2405de6c:	4311      	orrs	r1, r2
2405de6e:	683a      	ldr	r2, [r7, #0]
2405de70:	6912      	ldr	r2, [r2, #16]
2405de72:	4311      	orrs	r1, r2
2405de74:	683a      	ldr	r2, [r7, #0]
2405de76:	69d2      	ldr	r2, [r2, #28]
2405de78:	4311      	orrs	r1, r2
2405de7a:	683a      	ldr	r2, [r7, #0]
2405de7c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
2405de7e:	4311      	orrs	r1, r2
2405de80:	683a      	ldr	r2, [r7, #0]
2405de82:	6a12      	ldr	r2, [r2, #32]
2405de84:	4311      	orrs	r1, r2
2405de86:	683a      	ldr	r2, [r7, #0]
2405de88:	6b92      	ldr	r2, [r2, #56]	@ 0x38
2405de8a:	4311      	orrs	r1, r2
2405de8c:	683a      	ldr	r2, [r7, #0]
2405de8e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
2405de90:	430a      	orrs	r2, r1
2405de92:	431a      	orrs	r2, r3
2405de94:	69bb      	ldr	r3, [r7, #24]
2405de96:	601a      	str	r2, [r3, #0]
2405de98:	e026      	b.n	2405dee8 <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
2405de9a:	69bb      	ldr	r3, [r7, #24]
2405de9c:	681a      	ldr	r2, [r3, #0]
2405de9e:	4b56      	ldr	r3, [pc, #344]	@ (2405dff8 <OSPI_ConfigCmd+0x2e8>)
2405dea0:	4013      	ands	r3, r2
2405dea2:	683a      	ldr	r2, [r7, #0]
2405dea4:	68d1      	ldr	r1, [r2, #12]
2405dea6:	683a      	ldr	r2, [r7, #0]
2405dea8:	6952      	ldr	r2, [r2, #20]
2405deaa:	4311      	orrs	r1, r2
2405deac:	683a      	ldr	r2, [r7, #0]
2405deae:	6912      	ldr	r2, [r2, #16]
2405deb0:	4311      	orrs	r1, r2
2405deb2:	683a      	ldr	r2, [r7, #0]
2405deb4:	69d2      	ldr	r2, [r2, #28]
2405deb6:	4311      	orrs	r1, r2
2405deb8:	683a      	ldr	r2, [r7, #0]
2405deba:	6a52      	ldr	r2, [r2, #36]	@ 0x24
2405debc:	4311      	orrs	r1, r2
2405debe:	683a      	ldr	r2, [r7, #0]
2405dec0:	6a12      	ldr	r2, [r2, #32]
2405dec2:	430a      	orrs	r2, r1
2405dec4:	431a      	orrs	r2, r3
2405dec6:	69bb      	ldr	r3, [r7, #24]
2405dec8:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                    cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
2405deca:	687b      	ldr	r3, [r7, #4]
2405decc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2405dece:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
2405ded2:	d109      	bne.n	2405dee8 <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
2405ded4:	683b      	ldr	r3, [r7, #0]
2405ded6:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
2405ded8:	2b08      	cmp	r3, #8
2405deda:	d105      	bne.n	2405dee8 <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
2405dedc:	69bb      	ldr	r3, [r7, #24]
2405dede:	681b      	ldr	r3, [r3, #0]
2405dee0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
2405dee4:	69bb      	ldr	r3, [r7, #24]
2405dee6:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
2405dee8:	683b      	ldr	r3, [r7, #0]
2405deea:	689a      	ldr	r2, [r3, #8]
2405deec:	693b      	ldr	r3, [r7, #16]
2405deee:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
2405def0:	687b      	ldr	r3, [r7, #4]
2405def2:	681b      	ldr	r3, [r3, #0]
2405def4:	683a      	ldr	r2, [r7, #0]
2405def6:	6992      	ldr	r2, [r2, #24]
2405def8:	649a      	str	r2, [r3, #72]	@ 0x48
2405defa:	e074      	b.n	2405dfe6 <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
2405defc:	683b      	ldr	r3, [r7, #0]
2405defe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2405df00:	2b00      	cmp	r3, #0
2405df02:	d015      	beq.n	2405df30 <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
2405df04:	69bb      	ldr	r3, [r7, #24]
2405df06:	681a      	ldr	r2, [r3, #0]
2405df08:	4b3c      	ldr	r3, [pc, #240]	@ (2405dffc <OSPI_ConfigCmd+0x2ec>)
2405df0a:	4013      	ands	r3, r2
2405df0c:	683a      	ldr	r2, [r7, #0]
2405df0e:	68d1      	ldr	r1, [r2, #12]
2405df10:	683a      	ldr	r2, [r7, #0]
2405df12:	6952      	ldr	r2, [r2, #20]
2405df14:	4311      	orrs	r1, r2
2405df16:	683a      	ldr	r2, [r7, #0]
2405df18:	6912      	ldr	r2, [r2, #16]
2405df1a:	4311      	orrs	r1, r2
2405df1c:	683a      	ldr	r2, [r7, #0]
2405df1e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
2405df20:	4311      	orrs	r1, r2
2405df22:	683a      	ldr	r2, [r7, #0]
2405df24:	6c12      	ldr	r2, [r2, #64]	@ 0x40
2405df26:	430a      	orrs	r2, r1
2405df28:	431a      	orrs	r2, r3
2405df2a:	69bb      	ldr	r3, [r7, #24]
2405df2c:	601a      	str	r2, [r3, #0]
2405df2e:	e01d      	b.n	2405df6c <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
2405df30:	69bb      	ldr	r3, [r7, #24]
2405df32:	681b      	ldr	r3, [r3, #0]
2405df34:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
2405df38:	683b      	ldr	r3, [r7, #0]
2405df3a:	68d9      	ldr	r1, [r3, #12]
2405df3c:	683b      	ldr	r3, [r7, #0]
2405df3e:	695b      	ldr	r3, [r3, #20]
2405df40:	4319      	orrs	r1, r3
2405df42:	683b      	ldr	r3, [r7, #0]
2405df44:	691b      	ldr	r3, [r3, #16]
2405df46:	430b      	orrs	r3, r1
2405df48:	431a      	orrs	r2, r3
2405df4a:	69bb      	ldr	r3, [r7, #24]
2405df4c:	601a      	str	r2, [r3, #0]
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
2405df4e:	687b      	ldr	r3, [r7, #4]
2405df50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2405df52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
2405df56:	d109      	bne.n	2405df6c <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
2405df58:	683b      	ldr	r3, [r7, #0]
2405df5a:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
2405df5c:	2b08      	cmp	r3, #8
2405df5e:	d105      	bne.n	2405df6c <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
2405df60:	69bb      	ldr	r3, [r7, #24]
2405df62:	681b      	ldr	r3, [r3, #0]
2405df64:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
2405df68:	69bb      	ldr	r3, [r7, #24]
2405df6a:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
2405df6c:	683b      	ldr	r3, [r7, #0]
2405df6e:	689a      	ldr	r2, [r3, #8]
2405df70:	693b      	ldr	r3, [r7, #16]
2405df72:	601a      	str	r2, [r3, #0]
2405df74:	e037      	b.n	2405dfe6 <OSPI_ConfigCmd+0x2d6>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
2405df76:	683b      	ldr	r3, [r7, #0]
2405df78:	69db      	ldr	r3, [r3, #28]
2405df7a:	2b00      	cmp	r3, #0
2405df7c:	d02e      	beq.n	2405dfdc <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
2405df7e:	683b      	ldr	r3, [r7, #0]
2405df80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2405df82:	2b00      	cmp	r3, #0
2405df84:	d015      	beq.n	2405dfb2 <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
2405df86:	69bb      	ldr	r3, [r7, #24]
2405df88:	681a      	ldr	r2, [r3, #0]
2405df8a:	4b1d      	ldr	r3, [pc, #116]	@ (2405e000 <OSPI_ConfigCmd+0x2f0>)
2405df8c:	4013      	ands	r3, r2
2405df8e:	683a      	ldr	r2, [r7, #0]
2405df90:	69d1      	ldr	r1, [r2, #28]
2405df92:	683a      	ldr	r2, [r7, #0]
2405df94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
2405df96:	4311      	orrs	r1, r2
2405df98:	683a      	ldr	r2, [r7, #0]
2405df9a:	6a12      	ldr	r2, [r2, #32]
2405df9c:	4311      	orrs	r1, r2
2405df9e:	683a      	ldr	r2, [r7, #0]
2405dfa0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
2405dfa2:	4311      	orrs	r1, r2
2405dfa4:	683a      	ldr	r2, [r7, #0]
2405dfa6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
2405dfa8:	430a      	orrs	r2, r1
2405dfaa:	431a      	orrs	r2, r3
2405dfac:	69bb      	ldr	r3, [r7, #24]
2405dfae:	601a      	str	r2, [r3, #0]
2405dfb0:	e00e      	b.n	2405dfd0 <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
2405dfb2:	69bb      	ldr	r3, [r7, #24]
2405dfb4:	681b      	ldr	r3, [r3, #0]
2405dfb6:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
2405dfba:	683b      	ldr	r3, [r7, #0]
2405dfbc:	69d9      	ldr	r1, [r3, #28]
2405dfbe:	683b      	ldr	r3, [r7, #0]
2405dfc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2405dfc2:	4319      	orrs	r1, r3
2405dfc4:	683b      	ldr	r3, [r7, #0]
2405dfc6:	6a1b      	ldr	r3, [r3, #32]
2405dfc8:	430b      	orrs	r3, r1
2405dfca:	431a      	orrs	r2, r3
2405dfcc:	69bb      	ldr	r3, [r7, #24]
2405dfce:	601a      	str	r2, [r3, #0]
                   (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
2405dfd0:	687b      	ldr	r3, [r7, #4]
2405dfd2:	681b      	ldr	r3, [r3, #0]
2405dfd4:	683a      	ldr	r2, [r7, #0]
2405dfd6:	6992      	ldr	r2, [r2, #24]
2405dfd8:	649a      	str	r2, [r3, #72]	@ 0x48
2405dfda:	e004      	b.n	2405dfe6 <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
2405dfdc:	2301      	movs	r3, #1
2405dfde:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
2405dfe0:	687b      	ldr	r3, [r7, #4]
2405dfe2:	2208      	movs	r2, #8
2405dfe4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
2405dfe6:	7ffb      	ldrb	r3, [r7, #31]
}
2405dfe8:	4618      	mov	r0, r3
2405dfea:	3724      	adds	r7, #36	@ 0x24
2405dfec:	46bd      	mov	sp, r7
2405dfee:	f85d 7b04 	ldr.w	r7, [sp], #4
2405dff2:	4770      	bx	lr
2405dff4:	f0ffc0c0 	.word	0xf0ffc0c0
2405dff8:	ffffc0c0 	.word	0xffffc0c0
2405dffc:	f0ffffc0 	.word	0xf0ffffc0
2405e000:	f0ffc0ff 	.word	0xf0ffc0ff

2405e004 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
2405e004:	b480      	push	{r7}
2405e006:	b087      	sub	sp, #28
2405e008:	af00      	add	r7, sp, #0
2405e00a:	4603      	mov	r3, r0
2405e00c:	6039      	str	r1, [r7, #0]
2405e00e:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
2405e010:	2300      	movs	r3, #0
2405e012:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
2405e014:	2300      	movs	r3, #0
2405e016:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
2405e018:	79fb      	ldrb	r3, [r7, #7]
2405e01a:	2b00      	cmp	r3, #0
2405e01c:	d005      	beq.n	2405e02a <OSPIM_GetConfig+0x26>
2405e01e:	79fb      	ldrb	r3, [r7, #7]
2405e020:	2b02      	cmp	r3, #2
2405e022:	d802      	bhi.n	2405e02a <OSPIM_GetConfig+0x26>
2405e024:	683b      	ldr	r3, [r7, #0]
2405e026:	2b00      	cmp	r3, #0
2405e028:	d102      	bne.n	2405e030 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
2405e02a:	2301      	movs	r3, #1
2405e02c:	75fb      	strb	r3, [r7, #23]
2405e02e:	e098      	b.n	2405e162 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
2405e030:	683b      	ldr	r3, [r7, #0]
2405e032:	2200      	movs	r2, #0
2405e034:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
2405e036:	683b      	ldr	r3, [r7, #0]
2405e038:	2200      	movs	r2, #0
2405e03a:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
2405e03c:	683b      	ldr	r3, [r7, #0]
2405e03e:	2200      	movs	r2, #0
2405e040:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
2405e042:	683b      	ldr	r3, [r7, #0]
2405e044:	2200      	movs	r2, #0
2405e046:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
2405e048:	683b      	ldr	r3, [r7, #0]
2405e04a:	2200      	movs	r2, #0
2405e04c:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
2405e04e:	79fb      	ldrb	r3, [r7, #7]
2405e050:	2b02      	cmp	r3, #2
2405e052:	d10b      	bne.n	2405e06c <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
2405e054:	4b46      	ldr	r3, [pc, #280]	@ (2405e170 <OSPIM_GetConfig+0x16c>)
2405e056:	681b      	ldr	r3, [r3, #0]
2405e058:	f003 0301 	and.w	r3, r3, #1
2405e05c:	2b00      	cmp	r3, #0
2405e05e:	d102      	bne.n	2405e066 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
2405e060:	4b44      	ldr	r3, [pc, #272]	@ (2405e174 <OSPIM_GetConfig+0x170>)
2405e062:	613b      	str	r3, [r7, #16]
2405e064:	e002      	b.n	2405e06c <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
2405e066:	f44f 7300 	mov.w	r3, #512	@ 0x200
2405e06a:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
2405e06c:	2300      	movs	r3, #0
2405e06e:	60fb      	str	r3, [r7, #12]
2405e070:	e074      	b.n	2405e15c <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
2405e072:	4a3f      	ldr	r2, [pc, #252]	@ (2405e170 <OSPIM_GetConfig+0x16c>)
2405e074:	68fb      	ldr	r3, [r7, #12]
2405e076:	009b      	lsls	r3, r3, #2
2405e078:	4413      	add	r3, r2
2405e07a:	685b      	ldr	r3, [r3, #4]
2405e07c:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
2405e07e:	68bb      	ldr	r3, [r7, #8]
2405e080:	f003 0301 	and.w	r3, r3, #1
2405e084:	2b00      	cmp	r3, #0
2405e086:	d00a      	beq.n	2405e09e <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
2405e088:	68ba      	ldr	r2, [r7, #8]
2405e08a:	693b      	ldr	r3, [r7, #16]
2405e08c:	4053      	eors	r3, r2
2405e08e:	f003 0302 	and.w	r3, r3, #2
2405e092:	2b00      	cmp	r3, #0
2405e094:	d103      	bne.n	2405e09e <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
2405e096:	68fb      	ldr	r3, [r7, #12]
2405e098:	1c5a      	adds	r2, r3, #1
2405e09a:	683b      	ldr	r3, [r7, #0]
2405e09c:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
2405e09e:	68bb      	ldr	r3, [r7, #8]
2405e0a0:	f003 0310 	and.w	r3, r3, #16
2405e0a4:	2b00      	cmp	r3, #0
2405e0a6:	d00a      	beq.n	2405e0be <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
2405e0a8:	68ba      	ldr	r2, [r7, #8]
2405e0aa:	693b      	ldr	r3, [r7, #16]
2405e0ac:	4053      	eors	r3, r2
2405e0ae:	f003 0320 	and.w	r3, r3, #32
2405e0b2:	2b00      	cmp	r3, #0
2405e0b4:	d103      	bne.n	2405e0be <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
2405e0b6:	68fb      	ldr	r3, [r7, #12]
2405e0b8:	1c5a      	adds	r2, r3, #1
2405e0ba:	683b      	ldr	r3, [r7, #0]
2405e0bc:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
2405e0be:	68bb      	ldr	r3, [r7, #8]
2405e0c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
2405e0c4:	2b00      	cmp	r3, #0
2405e0c6:	d00a      	beq.n	2405e0de <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
2405e0c8:	68ba      	ldr	r2, [r7, #8]
2405e0ca:	693b      	ldr	r3, [r7, #16]
2405e0cc:	4053      	eors	r3, r2
2405e0ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
2405e0d2:	2b00      	cmp	r3, #0
2405e0d4:	d103      	bne.n	2405e0de <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
2405e0d6:	68fb      	ldr	r3, [r7, #12]
2405e0d8:	1c5a      	adds	r2, r3, #1
2405e0da:	683b      	ldr	r3, [r7, #0]
2405e0dc:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
2405e0de:	68bb      	ldr	r3, [r7, #8]
2405e0e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
2405e0e4:	2b00      	cmp	r3, #0
2405e0e6:	d018      	beq.n	2405e11a <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
2405e0e8:	68ba      	ldr	r2, [r7, #8]
2405e0ea:	693b      	ldr	r3, [r7, #16]
2405e0ec:	4053      	eors	r3, r2
2405e0ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
2405e0f2:	2b00      	cmp	r3, #0
2405e0f4:	d111      	bne.n	2405e11a <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
2405e0f6:	68bb      	ldr	r3, [r7, #8]
2405e0f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
2405e0fc:	2b00      	cmp	r3, #0
2405e0fe:	d106      	bne.n	2405e10e <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
2405e100:	68fb      	ldr	r3, [r7, #12]
2405e102:	3301      	adds	r3, #1
2405e104:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
2405e108:	683b      	ldr	r3, [r7, #0]
2405e10a:	60da      	str	r2, [r3, #12]
2405e10c:	e005      	b.n	2405e11a <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
2405e10e:	68fb      	ldr	r3, [r7, #12]
2405e110:	3301      	adds	r3, #1
2405e112:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
2405e116:	683b      	ldr	r3, [r7, #0]
2405e118:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
2405e11a:	68bb      	ldr	r3, [r7, #8]
2405e11c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
2405e120:	2b00      	cmp	r3, #0
2405e122:	d018      	beq.n	2405e156 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
2405e124:	68ba      	ldr	r2, [r7, #8]
2405e126:	693b      	ldr	r3, [r7, #16]
2405e128:	4053      	eors	r3, r2
2405e12a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
2405e12e:	2b00      	cmp	r3, #0
2405e130:	d111      	bne.n	2405e156 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
2405e132:	68bb      	ldr	r3, [r7, #8]
2405e134:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
2405e138:	2b00      	cmp	r3, #0
2405e13a:	d106      	bne.n	2405e14a <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
2405e13c:	68fb      	ldr	r3, [r7, #12]
2405e13e:	3301      	adds	r3, #1
2405e140:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
2405e144:	683b      	ldr	r3, [r7, #0]
2405e146:	611a      	str	r2, [r3, #16]
2405e148:	e005      	b.n	2405e156 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
2405e14a:	68fb      	ldr	r3, [r7, #12]
2405e14c:	3301      	adds	r3, #1
2405e14e:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
2405e152:	683b      	ldr	r3, [r7, #0]
2405e154:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
2405e156:	68fb      	ldr	r3, [r7, #12]
2405e158:	3301      	adds	r3, #1
2405e15a:	60fb      	str	r3, [r7, #12]
2405e15c:	68fb      	ldr	r3, [r7, #12]
2405e15e:	2b01      	cmp	r3, #1
2405e160:	d987      	bls.n	2405e072 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
2405e162:	7dfb      	ldrb	r3, [r7, #23]
}
2405e164:	4618      	mov	r0, r3
2405e166:	371c      	adds	r7, #28
2405e168:	46bd      	mov	sp, r7
2405e16a:	f85d 7b04 	ldr.w	r7, [sp], #4
2405e16e:	4770      	bx	lr
2405e170:	5200b400 	.word	0x5200b400
2405e174:	04040222 	.word	0x04040222

2405e178 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
2405e178:	b480      	push	{r7}
2405e17a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
2405e17c:	4b05      	ldr	r3, [pc, #20]	@ (2405e194 <HAL_PWR_EnableBkUpAccess+0x1c>)
2405e17e:	681b      	ldr	r3, [r3, #0]
2405e180:	4a04      	ldr	r2, [pc, #16]	@ (2405e194 <HAL_PWR_EnableBkUpAccess+0x1c>)
2405e182:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
2405e186:	6013      	str	r3, [r2, #0]
}
2405e188:	bf00      	nop
2405e18a:	46bd      	mov	sp, r7
2405e18c:	f85d 7b04 	ldr.w	r7, [sp], #4
2405e190:	4770      	bx	lr
2405e192:	bf00      	nop
2405e194:	58024800 	.word	0x58024800

2405e198 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
2405e198:	b580      	push	{r7, lr}
2405e19a:	b084      	sub	sp, #16
2405e19c:	af00      	add	r7, sp, #0
2405e19e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
2405e1a0:	4b19      	ldr	r3, [pc, #100]	@ (2405e208 <HAL_PWREx_ConfigSupply+0x70>)
2405e1a2:	68db      	ldr	r3, [r3, #12]
2405e1a4:	f003 0304 	and.w	r3, r3, #4
2405e1a8:	2b04      	cmp	r3, #4
2405e1aa:	d00a      	beq.n	2405e1c2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
2405e1ac:	4b16      	ldr	r3, [pc, #88]	@ (2405e208 <HAL_PWREx_ConfigSupply+0x70>)
2405e1ae:	68db      	ldr	r3, [r3, #12]
2405e1b0:	f003 0307 	and.w	r3, r3, #7
2405e1b4:	687a      	ldr	r2, [r7, #4]
2405e1b6:	429a      	cmp	r2, r3
2405e1b8:	d001      	beq.n	2405e1be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
2405e1ba:	2301      	movs	r3, #1
2405e1bc:	e01f      	b.n	2405e1fe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
2405e1be:	2300      	movs	r3, #0
2405e1c0:	e01d      	b.n	2405e1fe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
2405e1c2:	4b11      	ldr	r3, [pc, #68]	@ (2405e208 <HAL_PWREx_ConfigSupply+0x70>)
2405e1c4:	68db      	ldr	r3, [r3, #12]
2405e1c6:	f023 0207 	bic.w	r2, r3, #7
2405e1ca:	490f      	ldr	r1, [pc, #60]	@ (2405e208 <HAL_PWREx_ConfigSupply+0x70>)
2405e1cc:	687b      	ldr	r3, [r7, #4]
2405e1ce:	4313      	orrs	r3, r2
2405e1d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
2405e1d2:	f7f8 fc55 	bl	24056a80 <HAL_GetTick>
2405e1d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
2405e1d8:	e009      	b.n	2405e1ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
2405e1da:	f7f8 fc51 	bl	24056a80 <HAL_GetTick>
2405e1de:	4602      	mov	r2, r0
2405e1e0:	68fb      	ldr	r3, [r7, #12]
2405e1e2:	1ad3      	subs	r3, r2, r3
2405e1e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
2405e1e8:	d901      	bls.n	2405e1ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
2405e1ea:	2301      	movs	r3, #1
2405e1ec:	e007      	b.n	2405e1fe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
2405e1ee:	4b06      	ldr	r3, [pc, #24]	@ (2405e208 <HAL_PWREx_ConfigSupply+0x70>)
2405e1f0:	685b      	ldr	r3, [r3, #4]
2405e1f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
2405e1f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
2405e1fa:	d1ee      	bne.n	2405e1da <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
2405e1fc:	2300      	movs	r3, #0
}
2405e1fe:	4618      	mov	r0, r3
2405e200:	3710      	adds	r7, #16
2405e202:	46bd      	mov	sp, r7
2405e204:	bd80      	pop	{r7, pc}
2405e206:	bf00      	nop
2405e208:	58024800 	.word	0x58024800

2405e20c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
2405e20c:	b580      	push	{r7, lr}
2405e20e:	b08c      	sub	sp, #48	@ 0x30
2405e210:	af00      	add	r7, sp, #0
2405e212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
2405e214:	687b      	ldr	r3, [r7, #4]
2405e216:	2b00      	cmp	r3, #0
2405e218:	d102      	bne.n	2405e220 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
2405e21a:	2301      	movs	r3, #1
2405e21c:	f000 bc1f 	b.w	2405ea5e <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
2405e220:	687b      	ldr	r3, [r7, #4]
2405e222:	681b      	ldr	r3, [r3, #0]
2405e224:	f003 0301 	and.w	r3, r3, #1
2405e228:	2b00      	cmp	r3, #0
2405e22a:	f000 80b3 	beq.w	2405e394 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
2405e22e:	4b95      	ldr	r3, [pc, #596]	@ (2405e484 <HAL_RCC_OscConfig+0x278>)
2405e230:	691b      	ldr	r3, [r3, #16]
2405e232:	f003 0338 	and.w	r3, r3, #56	@ 0x38
2405e236:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
2405e238:	4b92      	ldr	r3, [pc, #584]	@ (2405e484 <HAL_RCC_OscConfig+0x278>)
2405e23a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
2405e23c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
2405e23e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
2405e240:	2b10      	cmp	r3, #16
2405e242:	d007      	beq.n	2405e254 <HAL_RCC_OscConfig+0x48>
2405e244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
2405e246:	2b18      	cmp	r3, #24
2405e248:	d112      	bne.n	2405e270 <HAL_RCC_OscConfig+0x64>
2405e24a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
2405e24c:	f003 0303 	and.w	r3, r3, #3
2405e250:	2b02      	cmp	r3, #2
2405e252:	d10d      	bne.n	2405e270 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
2405e254:	4b8b      	ldr	r3, [pc, #556]	@ (2405e484 <HAL_RCC_OscConfig+0x278>)
2405e256:	681b      	ldr	r3, [r3, #0]
2405e258:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
2405e25c:	2b00      	cmp	r3, #0
2405e25e:	f000 8098 	beq.w	2405e392 <HAL_RCC_OscConfig+0x186>
2405e262:	687b      	ldr	r3, [r7, #4]
2405e264:	685b      	ldr	r3, [r3, #4]
2405e266:	2b00      	cmp	r3, #0
2405e268:	f040 8093 	bne.w	2405e392 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
2405e26c:	2301      	movs	r3, #1
2405e26e:	e3f6      	b.n	2405ea5e <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
2405e270:	687b      	ldr	r3, [r7, #4]
2405e272:	685b      	ldr	r3, [r3, #4]
2405e274:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
2405e278:	d106      	bne.n	2405e288 <HAL_RCC_OscConfig+0x7c>
2405e27a:	4b82      	ldr	r3, [pc, #520]	@ (2405e484 <HAL_RCC_OscConfig+0x278>)
2405e27c:	681b      	ldr	r3, [r3, #0]
2405e27e:	4a81      	ldr	r2, [pc, #516]	@ (2405e484 <HAL_RCC_OscConfig+0x278>)
2405e280:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
2405e284:	6013      	str	r3, [r2, #0]
2405e286:	e058      	b.n	2405e33a <HAL_RCC_OscConfig+0x12e>
2405e288:	687b      	ldr	r3, [r7, #4]
2405e28a:	685b      	ldr	r3, [r3, #4]
2405e28c:	2b00      	cmp	r3, #0
2405e28e:	d112      	bne.n	2405e2b6 <HAL_RCC_OscConfig+0xaa>
2405e290:	4b7c      	ldr	r3, [pc, #496]	@ (2405e484 <HAL_RCC_OscConfig+0x278>)
2405e292:	681b      	ldr	r3, [r3, #0]
2405e294:	4a7b      	ldr	r2, [pc, #492]	@ (2405e484 <HAL_RCC_OscConfig+0x278>)
2405e296:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
2405e29a:	6013      	str	r3, [r2, #0]
2405e29c:	4b79      	ldr	r3, [pc, #484]	@ (2405e484 <HAL_RCC_OscConfig+0x278>)
2405e29e:	681b      	ldr	r3, [r3, #0]
2405e2a0:	4a78      	ldr	r2, [pc, #480]	@ (2405e484 <HAL_RCC_OscConfig+0x278>)
2405e2a2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
2405e2a6:	6013      	str	r3, [r2, #0]
2405e2a8:	4b76      	ldr	r3, [pc, #472]	@ (2405e484 <HAL_RCC_OscConfig+0x278>)
2405e2aa:	681b      	ldr	r3, [r3, #0]
2405e2ac:	4a75      	ldr	r2, [pc, #468]	@ (2405e484 <HAL_RCC_OscConfig+0x278>)
2405e2ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
2405e2b2:	6013      	str	r3, [r2, #0]
2405e2b4:	e041      	b.n	2405e33a <HAL_RCC_OscConfig+0x12e>
2405e2b6:	687b      	ldr	r3, [r7, #4]
2405e2b8:	685b      	ldr	r3, [r3, #4]
2405e2ba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
2405e2be:	d112      	bne.n	2405e2e6 <HAL_RCC_OscConfig+0xda>
2405e2c0:	4b70      	ldr	r3, [pc, #448]	@ (2405e484 <HAL_RCC_OscConfig+0x278>)
2405e2c2:	681b      	ldr	r3, [r3, #0]
2405e2c4:	4a6f      	ldr	r2, [pc, #444]	@ (2405e484 <HAL_RCC_OscConfig+0x278>)
2405e2c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
2405e2ca:	6013      	str	r3, [r2, #0]
2405e2cc:	4b6d      	ldr	r3, [pc, #436]	@ (2405e484 <HAL_RCC_OscConfig+0x278>)
2405e2ce:	681b      	ldr	r3, [r3, #0]
2405e2d0:	4a6c      	ldr	r2, [pc, #432]	@ (2405e484 <HAL_RCC_OscConfig+0x278>)
2405e2d2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
2405e2d6:	6013      	str	r3, [r2, #0]
2405e2d8:	4b6a      	ldr	r3, [pc, #424]	@ (2405e484 <HAL_RCC_OscConfig+0x278>)
2405e2da:	681b      	ldr	r3, [r3, #0]
2405e2dc:	4a69      	ldr	r2, [pc, #420]	@ (2405e484 <HAL_RCC_OscConfig+0x278>)
2405e2de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
2405e2e2:	6013      	str	r3, [r2, #0]
2405e2e4:	e029      	b.n	2405e33a <HAL_RCC_OscConfig+0x12e>
2405e2e6:	687b      	ldr	r3, [r7, #4]
2405e2e8:	685b      	ldr	r3, [r3, #4]
2405e2ea:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
2405e2ee:	d112      	bne.n	2405e316 <HAL_RCC_OscConfig+0x10a>
2405e2f0:	4b64      	ldr	r3, [pc, #400]	@ (2405e484 <HAL_RCC_OscConfig+0x278>)
2405e2f2:	681b      	ldr	r3, [r3, #0]
2405e2f4:	4a63      	ldr	r2, [pc, #396]	@ (2405e484 <HAL_RCC_OscConfig+0x278>)
2405e2f6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
2405e2fa:	6013      	str	r3, [r2, #0]
2405e2fc:	4b61      	ldr	r3, [pc, #388]	@ (2405e484 <HAL_RCC_OscConfig+0x278>)
2405e2fe:	681b      	ldr	r3, [r3, #0]
2405e300:	4a60      	ldr	r2, [pc, #384]	@ (2405e484 <HAL_RCC_OscConfig+0x278>)
2405e302:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
2405e306:	6013      	str	r3, [r2, #0]
2405e308:	4b5e      	ldr	r3, [pc, #376]	@ (2405e484 <HAL_RCC_OscConfig+0x278>)
2405e30a:	681b      	ldr	r3, [r3, #0]
2405e30c:	4a5d      	ldr	r2, [pc, #372]	@ (2405e484 <HAL_RCC_OscConfig+0x278>)
2405e30e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
2405e312:	6013      	str	r3, [r2, #0]
2405e314:	e011      	b.n	2405e33a <HAL_RCC_OscConfig+0x12e>
2405e316:	4b5b      	ldr	r3, [pc, #364]	@ (2405e484 <HAL_RCC_OscConfig+0x278>)
2405e318:	681b      	ldr	r3, [r3, #0]
2405e31a:	4a5a      	ldr	r2, [pc, #360]	@ (2405e484 <HAL_RCC_OscConfig+0x278>)
2405e31c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
2405e320:	6013      	str	r3, [r2, #0]
2405e322:	4b58      	ldr	r3, [pc, #352]	@ (2405e484 <HAL_RCC_OscConfig+0x278>)
2405e324:	681b      	ldr	r3, [r3, #0]
2405e326:	4a57      	ldr	r2, [pc, #348]	@ (2405e484 <HAL_RCC_OscConfig+0x278>)
2405e328:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
2405e32c:	6013      	str	r3, [r2, #0]
2405e32e:	4b55      	ldr	r3, [pc, #340]	@ (2405e484 <HAL_RCC_OscConfig+0x278>)
2405e330:	681b      	ldr	r3, [r3, #0]
2405e332:	4a54      	ldr	r2, [pc, #336]	@ (2405e484 <HAL_RCC_OscConfig+0x278>)
2405e334:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
2405e338:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
2405e33a:	687b      	ldr	r3, [r7, #4]
2405e33c:	685b      	ldr	r3, [r3, #4]
2405e33e:	2b00      	cmp	r3, #0
2405e340:	d013      	beq.n	2405e36a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2405e342:	f7f8 fb9d 	bl	24056a80 <HAL_GetTick>
2405e346:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
2405e348:	e008      	b.n	2405e35c <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
2405e34a:	f7f8 fb99 	bl	24056a80 <HAL_GetTick>
2405e34e:	4602      	mov	r2, r0
2405e350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2405e352:	1ad3      	subs	r3, r2, r3
2405e354:	2b64      	cmp	r3, #100	@ 0x64
2405e356:	d901      	bls.n	2405e35c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
2405e358:	2303      	movs	r3, #3
2405e35a:	e380      	b.n	2405ea5e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
2405e35c:	4b49      	ldr	r3, [pc, #292]	@ (2405e484 <HAL_RCC_OscConfig+0x278>)
2405e35e:	681b      	ldr	r3, [r3, #0]
2405e360:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
2405e364:	2b00      	cmp	r3, #0
2405e366:	d0f0      	beq.n	2405e34a <HAL_RCC_OscConfig+0x13e>
2405e368:	e014      	b.n	2405e394 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2405e36a:	f7f8 fb89 	bl	24056a80 <HAL_GetTick>
2405e36e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
2405e370:	e008      	b.n	2405e384 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
2405e372:	f7f8 fb85 	bl	24056a80 <HAL_GetTick>
2405e376:	4602      	mov	r2, r0
2405e378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2405e37a:	1ad3      	subs	r3, r2, r3
2405e37c:	2b64      	cmp	r3, #100	@ 0x64
2405e37e:	d901      	bls.n	2405e384 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
2405e380:	2303      	movs	r3, #3
2405e382:	e36c      	b.n	2405ea5e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
2405e384:	4b3f      	ldr	r3, [pc, #252]	@ (2405e484 <HAL_RCC_OscConfig+0x278>)
2405e386:	681b      	ldr	r3, [r3, #0]
2405e388:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
2405e38c:	2b00      	cmp	r3, #0
2405e38e:	d1f0      	bne.n	2405e372 <HAL_RCC_OscConfig+0x166>
2405e390:	e000      	b.n	2405e394 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
2405e392:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
2405e394:	687b      	ldr	r3, [r7, #4]
2405e396:	681b      	ldr	r3, [r3, #0]
2405e398:	f003 0302 	and.w	r3, r3, #2
2405e39c:	2b00      	cmp	r3, #0
2405e39e:	f000 808c 	beq.w	2405e4ba <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
2405e3a2:	4b38      	ldr	r3, [pc, #224]	@ (2405e484 <HAL_RCC_OscConfig+0x278>)
2405e3a4:	691b      	ldr	r3, [r3, #16]
2405e3a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
2405e3aa:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
2405e3ac:	4b35      	ldr	r3, [pc, #212]	@ (2405e484 <HAL_RCC_OscConfig+0x278>)
2405e3ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
2405e3b0:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
2405e3b2:	6a3b      	ldr	r3, [r7, #32]
2405e3b4:	2b00      	cmp	r3, #0
2405e3b6:	d007      	beq.n	2405e3c8 <HAL_RCC_OscConfig+0x1bc>
2405e3b8:	6a3b      	ldr	r3, [r7, #32]
2405e3ba:	2b18      	cmp	r3, #24
2405e3bc:	d137      	bne.n	2405e42e <HAL_RCC_OscConfig+0x222>
2405e3be:	69fb      	ldr	r3, [r7, #28]
2405e3c0:	f003 0303 	and.w	r3, r3, #3
2405e3c4:	2b00      	cmp	r3, #0
2405e3c6:	d132      	bne.n	2405e42e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
2405e3c8:	4b2e      	ldr	r3, [pc, #184]	@ (2405e484 <HAL_RCC_OscConfig+0x278>)
2405e3ca:	681b      	ldr	r3, [r3, #0]
2405e3cc:	f003 0304 	and.w	r3, r3, #4
2405e3d0:	2b00      	cmp	r3, #0
2405e3d2:	d005      	beq.n	2405e3e0 <HAL_RCC_OscConfig+0x1d4>
2405e3d4:	687b      	ldr	r3, [r7, #4]
2405e3d6:	68db      	ldr	r3, [r3, #12]
2405e3d8:	2b00      	cmp	r3, #0
2405e3da:	d101      	bne.n	2405e3e0 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
2405e3dc:	2301      	movs	r3, #1
2405e3de:	e33e      	b.n	2405ea5e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
2405e3e0:	4b28      	ldr	r3, [pc, #160]	@ (2405e484 <HAL_RCC_OscConfig+0x278>)
2405e3e2:	681b      	ldr	r3, [r3, #0]
2405e3e4:	f023 0219 	bic.w	r2, r3, #25
2405e3e8:	687b      	ldr	r3, [r7, #4]
2405e3ea:	68db      	ldr	r3, [r3, #12]
2405e3ec:	4925      	ldr	r1, [pc, #148]	@ (2405e484 <HAL_RCC_OscConfig+0x278>)
2405e3ee:	4313      	orrs	r3, r2
2405e3f0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2405e3f2:	f7f8 fb45 	bl	24056a80 <HAL_GetTick>
2405e3f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
2405e3f8:	e008      	b.n	2405e40c <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
2405e3fa:	f7f8 fb41 	bl	24056a80 <HAL_GetTick>
2405e3fe:	4602      	mov	r2, r0
2405e400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2405e402:	1ad3      	subs	r3, r2, r3
2405e404:	2b02      	cmp	r3, #2
2405e406:	d901      	bls.n	2405e40c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
2405e408:	2303      	movs	r3, #3
2405e40a:	e328      	b.n	2405ea5e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
2405e40c:	4b1d      	ldr	r3, [pc, #116]	@ (2405e484 <HAL_RCC_OscConfig+0x278>)
2405e40e:	681b      	ldr	r3, [r3, #0]
2405e410:	f003 0304 	and.w	r3, r3, #4
2405e414:	2b00      	cmp	r3, #0
2405e416:	d0f0      	beq.n	2405e3fa <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
2405e418:	4b1a      	ldr	r3, [pc, #104]	@ (2405e484 <HAL_RCC_OscConfig+0x278>)
2405e41a:	685b      	ldr	r3, [r3, #4]
2405e41c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
2405e420:	687b      	ldr	r3, [r7, #4]
2405e422:	691b      	ldr	r3, [r3, #16]
2405e424:	061b      	lsls	r3, r3, #24
2405e426:	4917      	ldr	r1, [pc, #92]	@ (2405e484 <HAL_RCC_OscConfig+0x278>)
2405e428:	4313      	orrs	r3, r2
2405e42a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
2405e42c:	e045      	b.n	2405e4ba <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
2405e42e:	687b      	ldr	r3, [r7, #4]
2405e430:	68db      	ldr	r3, [r3, #12]
2405e432:	2b00      	cmp	r3, #0
2405e434:	d028      	beq.n	2405e488 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
2405e436:	4b13      	ldr	r3, [pc, #76]	@ (2405e484 <HAL_RCC_OscConfig+0x278>)
2405e438:	681b      	ldr	r3, [r3, #0]
2405e43a:	f023 0219 	bic.w	r2, r3, #25
2405e43e:	687b      	ldr	r3, [r7, #4]
2405e440:	68db      	ldr	r3, [r3, #12]
2405e442:	4910      	ldr	r1, [pc, #64]	@ (2405e484 <HAL_RCC_OscConfig+0x278>)
2405e444:	4313      	orrs	r3, r2
2405e446:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2405e448:	f7f8 fb1a 	bl	24056a80 <HAL_GetTick>
2405e44c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
2405e44e:	e008      	b.n	2405e462 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
2405e450:	f7f8 fb16 	bl	24056a80 <HAL_GetTick>
2405e454:	4602      	mov	r2, r0
2405e456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2405e458:	1ad3      	subs	r3, r2, r3
2405e45a:	2b02      	cmp	r3, #2
2405e45c:	d901      	bls.n	2405e462 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
2405e45e:	2303      	movs	r3, #3
2405e460:	e2fd      	b.n	2405ea5e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
2405e462:	4b08      	ldr	r3, [pc, #32]	@ (2405e484 <HAL_RCC_OscConfig+0x278>)
2405e464:	681b      	ldr	r3, [r3, #0]
2405e466:	f003 0304 	and.w	r3, r3, #4
2405e46a:	2b00      	cmp	r3, #0
2405e46c:	d0f0      	beq.n	2405e450 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
2405e46e:	4b05      	ldr	r3, [pc, #20]	@ (2405e484 <HAL_RCC_OscConfig+0x278>)
2405e470:	685b      	ldr	r3, [r3, #4]
2405e472:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
2405e476:	687b      	ldr	r3, [r7, #4]
2405e478:	691b      	ldr	r3, [r3, #16]
2405e47a:	061b      	lsls	r3, r3, #24
2405e47c:	4901      	ldr	r1, [pc, #4]	@ (2405e484 <HAL_RCC_OscConfig+0x278>)
2405e47e:	4313      	orrs	r3, r2
2405e480:	604b      	str	r3, [r1, #4]
2405e482:	e01a      	b.n	2405e4ba <HAL_RCC_OscConfig+0x2ae>
2405e484:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
2405e488:	4b97      	ldr	r3, [pc, #604]	@ (2405e6e8 <HAL_RCC_OscConfig+0x4dc>)
2405e48a:	681b      	ldr	r3, [r3, #0]
2405e48c:	4a96      	ldr	r2, [pc, #600]	@ (2405e6e8 <HAL_RCC_OscConfig+0x4dc>)
2405e48e:	f023 0301 	bic.w	r3, r3, #1
2405e492:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2405e494:	f7f8 faf4 	bl	24056a80 <HAL_GetTick>
2405e498:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
2405e49a:	e008      	b.n	2405e4ae <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
2405e49c:	f7f8 faf0 	bl	24056a80 <HAL_GetTick>
2405e4a0:	4602      	mov	r2, r0
2405e4a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2405e4a4:	1ad3      	subs	r3, r2, r3
2405e4a6:	2b02      	cmp	r3, #2
2405e4a8:	d901      	bls.n	2405e4ae <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
2405e4aa:	2303      	movs	r3, #3
2405e4ac:	e2d7      	b.n	2405ea5e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
2405e4ae:	4b8e      	ldr	r3, [pc, #568]	@ (2405e6e8 <HAL_RCC_OscConfig+0x4dc>)
2405e4b0:	681b      	ldr	r3, [r3, #0]
2405e4b2:	f003 0304 	and.w	r3, r3, #4
2405e4b6:	2b00      	cmp	r3, #0
2405e4b8:	d1f0      	bne.n	2405e49c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
2405e4ba:	687b      	ldr	r3, [r7, #4]
2405e4bc:	681b      	ldr	r3, [r3, #0]
2405e4be:	f003 0310 	and.w	r3, r3, #16
2405e4c2:	2b00      	cmp	r3, #0
2405e4c4:	d06a      	beq.n	2405e59c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
2405e4c6:	4b88      	ldr	r3, [pc, #544]	@ (2405e6e8 <HAL_RCC_OscConfig+0x4dc>)
2405e4c8:	691b      	ldr	r3, [r3, #16]
2405e4ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
2405e4ce:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
2405e4d0:	4b85      	ldr	r3, [pc, #532]	@ (2405e6e8 <HAL_RCC_OscConfig+0x4dc>)
2405e4d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
2405e4d4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
2405e4d6:	69bb      	ldr	r3, [r7, #24]
2405e4d8:	2b08      	cmp	r3, #8
2405e4da:	d007      	beq.n	2405e4ec <HAL_RCC_OscConfig+0x2e0>
2405e4dc:	69bb      	ldr	r3, [r7, #24]
2405e4de:	2b18      	cmp	r3, #24
2405e4e0:	d11b      	bne.n	2405e51a <HAL_RCC_OscConfig+0x30e>
2405e4e2:	697b      	ldr	r3, [r7, #20]
2405e4e4:	f003 0303 	and.w	r3, r3, #3
2405e4e8:	2b01      	cmp	r3, #1
2405e4ea:	d116      	bne.n	2405e51a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
2405e4ec:	4b7e      	ldr	r3, [pc, #504]	@ (2405e6e8 <HAL_RCC_OscConfig+0x4dc>)
2405e4ee:	681b      	ldr	r3, [r3, #0]
2405e4f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
2405e4f4:	2b00      	cmp	r3, #0
2405e4f6:	d005      	beq.n	2405e504 <HAL_RCC_OscConfig+0x2f8>
2405e4f8:	687b      	ldr	r3, [r7, #4]
2405e4fa:	69db      	ldr	r3, [r3, #28]
2405e4fc:	2b80      	cmp	r3, #128	@ 0x80
2405e4fe:	d001      	beq.n	2405e504 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
2405e500:	2301      	movs	r3, #1
2405e502:	e2ac      	b.n	2405ea5e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
2405e504:	4b78      	ldr	r3, [pc, #480]	@ (2405e6e8 <HAL_RCC_OscConfig+0x4dc>)
2405e506:	68db      	ldr	r3, [r3, #12]
2405e508:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
2405e50c:	687b      	ldr	r3, [r7, #4]
2405e50e:	6a1b      	ldr	r3, [r3, #32]
2405e510:	061b      	lsls	r3, r3, #24
2405e512:	4975      	ldr	r1, [pc, #468]	@ (2405e6e8 <HAL_RCC_OscConfig+0x4dc>)
2405e514:	4313      	orrs	r3, r2
2405e516:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
2405e518:	e040      	b.n	2405e59c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
2405e51a:	687b      	ldr	r3, [r7, #4]
2405e51c:	69db      	ldr	r3, [r3, #28]
2405e51e:	2b00      	cmp	r3, #0
2405e520:	d023      	beq.n	2405e56a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
2405e522:	4b71      	ldr	r3, [pc, #452]	@ (2405e6e8 <HAL_RCC_OscConfig+0x4dc>)
2405e524:	681b      	ldr	r3, [r3, #0]
2405e526:	4a70      	ldr	r2, [pc, #448]	@ (2405e6e8 <HAL_RCC_OscConfig+0x4dc>)
2405e528:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
2405e52c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2405e52e:	f7f8 faa7 	bl	24056a80 <HAL_GetTick>
2405e532:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
2405e534:	e008      	b.n	2405e548 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
2405e536:	f7f8 faa3 	bl	24056a80 <HAL_GetTick>
2405e53a:	4602      	mov	r2, r0
2405e53c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2405e53e:	1ad3      	subs	r3, r2, r3
2405e540:	2b02      	cmp	r3, #2
2405e542:	d901      	bls.n	2405e548 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
2405e544:	2303      	movs	r3, #3
2405e546:	e28a      	b.n	2405ea5e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
2405e548:	4b67      	ldr	r3, [pc, #412]	@ (2405e6e8 <HAL_RCC_OscConfig+0x4dc>)
2405e54a:	681b      	ldr	r3, [r3, #0]
2405e54c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
2405e550:	2b00      	cmp	r3, #0
2405e552:	d0f0      	beq.n	2405e536 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
2405e554:	4b64      	ldr	r3, [pc, #400]	@ (2405e6e8 <HAL_RCC_OscConfig+0x4dc>)
2405e556:	68db      	ldr	r3, [r3, #12]
2405e558:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
2405e55c:	687b      	ldr	r3, [r7, #4]
2405e55e:	6a1b      	ldr	r3, [r3, #32]
2405e560:	061b      	lsls	r3, r3, #24
2405e562:	4961      	ldr	r1, [pc, #388]	@ (2405e6e8 <HAL_RCC_OscConfig+0x4dc>)
2405e564:	4313      	orrs	r3, r2
2405e566:	60cb      	str	r3, [r1, #12]
2405e568:	e018      	b.n	2405e59c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
2405e56a:	4b5f      	ldr	r3, [pc, #380]	@ (2405e6e8 <HAL_RCC_OscConfig+0x4dc>)
2405e56c:	681b      	ldr	r3, [r3, #0]
2405e56e:	4a5e      	ldr	r2, [pc, #376]	@ (2405e6e8 <HAL_RCC_OscConfig+0x4dc>)
2405e570:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
2405e574:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2405e576:	f7f8 fa83 	bl	24056a80 <HAL_GetTick>
2405e57a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
2405e57c:	e008      	b.n	2405e590 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
2405e57e:	f7f8 fa7f 	bl	24056a80 <HAL_GetTick>
2405e582:	4602      	mov	r2, r0
2405e584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2405e586:	1ad3      	subs	r3, r2, r3
2405e588:	2b02      	cmp	r3, #2
2405e58a:	d901      	bls.n	2405e590 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
2405e58c:	2303      	movs	r3, #3
2405e58e:	e266      	b.n	2405ea5e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
2405e590:	4b55      	ldr	r3, [pc, #340]	@ (2405e6e8 <HAL_RCC_OscConfig+0x4dc>)
2405e592:	681b      	ldr	r3, [r3, #0]
2405e594:	f403 7380 	and.w	r3, r3, #256	@ 0x100
2405e598:	2b00      	cmp	r3, #0
2405e59a:	d1f0      	bne.n	2405e57e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
2405e59c:	687b      	ldr	r3, [r7, #4]
2405e59e:	681b      	ldr	r3, [r3, #0]
2405e5a0:	f003 0308 	and.w	r3, r3, #8
2405e5a4:	2b00      	cmp	r3, #0
2405e5a6:	d036      	beq.n	2405e616 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
2405e5a8:	687b      	ldr	r3, [r7, #4]
2405e5aa:	695b      	ldr	r3, [r3, #20]
2405e5ac:	2b00      	cmp	r3, #0
2405e5ae:	d019      	beq.n	2405e5e4 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
2405e5b0:	4b4d      	ldr	r3, [pc, #308]	@ (2405e6e8 <HAL_RCC_OscConfig+0x4dc>)
2405e5b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
2405e5b4:	4a4c      	ldr	r2, [pc, #304]	@ (2405e6e8 <HAL_RCC_OscConfig+0x4dc>)
2405e5b6:	f043 0301 	orr.w	r3, r3, #1
2405e5ba:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2405e5bc:	f7f8 fa60 	bl	24056a80 <HAL_GetTick>
2405e5c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
2405e5c2:	e008      	b.n	2405e5d6 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
2405e5c4:	f7f8 fa5c 	bl	24056a80 <HAL_GetTick>
2405e5c8:	4602      	mov	r2, r0
2405e5ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2405e5cc:	1ad3      	subs	r3, r2, r3
2405e5ce:	2b02      	cmp	r3, #2
2405e5d0:	d901      	bls.n	2405e5d6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
2405e5d2:	2303      	movs	r3, #3
2405e5d4:	e243      	b.n	2405ea5e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
2405e5d6:	4b44      	ldr	r3, [pc, #272]	@ (2405e6e8 <HAL_RCC_OscConfig+0x4dc>)
2405e5d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
2405e5da:	f003 0302 	and.w	r3, r3, #2
2405e5de:	2b00      	cmp	r3, #0
2405e5e0:	d0f0      	beq.n	2405e5c4 <HAL_RCC_OscConfig+0x3b8>
2405e5e2:	e018      	b.n	2405e616 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
2405e5e4:	4b40      	ldr	r3, [pc, #256]	@ (2405e6e8 <HAL_RCC_OscConfig+0x4dc>)
2405e5e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
2405e5e8:	4a3f      	ldr	r2, [pc, #252]	@ (2405e6e8 <HAL_RCC_OscConfig+0x4dc>)
2405e5ea:	f023 0301 	bic.w	r3, r3, #1
2405e5ee:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2405e5f0:	f7f8 fa46 	bl	24056a80 <HAL_GetTick>
2405e5f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
2405e5f6:	e008      	b.n	2405e60a <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
2405e5f8:	f7f8 fa42 	bl	24056a80 <HAL_GetTick>
2405e5fc:	4602      	mov	r2, r0
2405e5fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2405e600:	1ad3      	subs	r3, r2, r3
2405e602:	2b02      	cmp	r3, #2
2405e604:	d901      	bls.n	2405e60a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
2405e606:	2303      	movs	r3, #3
2405e608:	e229      	b.n	2405ea5e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
2405e60a:	4b37      	ldr	r3, [pc, #220]	@ (2405e6e8 <HAL_RCC_OscConfig+0x4dc>)
2405e60c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
2405e60e:	f003 0302 	and.w	r3, r3, #2
2405e612:	2b00      	cmp	r3, #0
2405e614:	d1f0      	bne.n	2405e5f8 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
2405e616:	687b      	ldr	r3, [r7, #4]
2405e618:	681b      	ldr	r3, [r3, #0]
2405e61a:	f003 0320 	and.w	r3, r3, #32
2405e61e:	2b00      	cmp	r3, #0
2405e620:	d036      	beq.n	2405e690 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
2405e622:	687b      	ldr	r3, [r7, #4]
2405e624:	699b      	ldr	r3, [r3, #24]
2405e626:	2b00      	cmp	r3, #0
2405e628:	d019      	beq.n	2405e65e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
2405e62a:	4b2f      	ldr	r3, [pc, #188]	@ (2405e6e8 <HAL_RCC_OscConfig+0x4dc>)
2405e62c:	681b      	ldr	r3, [r3, #0]
2405e62e:	4a2e      	ldr	r2, [pc, #184]	@ (2405e6e8 <HAL_RCC_OscConfig+0x4dc>)
2405e630:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
2405e634:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
2405e636:	f7f8 fa23 	bl	24056a80 <HAL_GetTick>
2405e63a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
2405e63c:	e008      	b.n	2405e650 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
2405e63e:	f7f8 fa1f 	bl	24056a80 <HAL_GetTick>
2405e642:	4602      	mov	r2, r0
2405e644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2405e646:	1ad3      	subs	r3, r2, r3
2405e648:	2b02      	cmp	r3, #2
2405e64a:	d901      	bls.n	2405e650 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
2405e64c:	2303      	movs	r3, #3
2405e64e:	e206      	b.n	2405ea5e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
2405e650:	4b25      	ldr	r3, [pc, #148]	@ (2405e6e8 <HAL_RCC_OscConfig+0x4dc>)
2405e652:	681b      	ldr	r3, [r3, #0]
2405e654:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
2405e658:	2b00      	cmp	r3, #0
2405e65a:	d0f0      	beq.n	2405e63e <HAL_RCC_OscConfig+0x432>
2405e65c:	e018      	b.n	2405e690 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
2405e65e:	4b22      	ldr	r3, [pc, #136]	@ (2405e6e8 <HAL_RCC_OscConfig+0x4dc>)
2405e660:	681b      	ldr	r3, [r3, #0]
2405e662:	4a21      	ldr	r2, [pc, #132]	@ (2405e6e8 <HAL_RCC_OscConfig+0x4dc>)
2405e664:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
2405e668:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
2405e66a:	f7f8 fa09 	bl	24056a80 <HAL_GetTick>
2405e66e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
2405e670:	e008      	b.n	2405e684 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
2405e672:	f7f8 fa05 	bl	24056a80 <HAL_GetTick>
2405e676:	4602      	mov	r2, r0
2405e678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2405e67a:	1ad3      	subs	r3, r2, r3
2405e67c:	2b02      	cmp	r3, #2
2405e67e:	d901      	bls.n	2405e684 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
2405e680:	2303      	movs	r3, #3
2405e682:	e1ec      	b.n	2405ea5e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
2405e684:	4b18      	ldr	r3, [pc, #96]	@ (2405e6e8 <HAL_RCC_OscConfig+0x4dc>)
2405e686:	681b      	ldr	r3, [r3, #0]
2405e688:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
2405e68c:	2b00      	cmp	r3, #0
2405e68e:	d1f0      	bne.n	2405e672 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
2405e690:	687b      	ldr	r3, [r7, #4]
2405e692:	681b      	ldr	r3, [r3, #0]
2405e694:	f003 0304 	and.w	r3, r3, #4
2405e698:	2b00      	cmp	r3, #0
2405e69a:	f000 80af 	beq.w	2405e7fc <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
2405e69e:	4b13      	ldr	r3, [pc, #76]	@ (2405e6ec <HAL_RCC_OscConfig+0x4e0>)
2405e6a0:	681b      	ldr	r3, [r3, #0]
2405e6a2:	4a12      	ldr	r2, [pc, #72]	@ (2405e6ec <HAL_RCC_OscConfig+0x4e0>)
2405e6a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
2405e6a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
2405e6aa:	f7f8 f9e9 	bl	24056a80 <HAL_GetTick>
2405e6ae:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
2405e6b0:	e008      	b.n	2405e6c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
2405e6b2:	f7f8 f9e5 	bl	24056a80 <HAL_GetTick>
2405e6b6:	4602      	mov	r2, r0
2405e6b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2405e6ba:	1ad3      	subs	r3, r2, r3
2405e6bc:	2b64      	cmp	r3, #100	@ 0x64
2405e6be:	d901      	bls.n	2405e6c4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
2405e6c0:	2303      	movs	r3, #3
2405e6c2:	e1cc      	b.n	2405ea5e <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
2405e6c4:	4b09      	ldr	r3, [pc, #36]	@ (2405e6ec <HAL_RCC_OscConfig+0x4e0>)
2405e6c6:	681b      	ldr	r3, [r3, #0]
2405e6c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
2405e6cc:	2b00      	cmp	r3, #0
2405e6ce:	d0f0      	beq.n	2405e6b2 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
2405e6d0:	687b      	ldr	r3, [r7, #4]
2405e6d2:	689b      	ldr	r3, [r3, #8]
2405e6d4:	2b01      	cmp	r3, #1
2405e6d6:	d10b      	bne.n	2405e6f0 <HAL_RCC_OscConfig+0x4e4>
2405e6d8:	4b03      	ldr	r3, [pc, #12]	@ (2405e6e8 <HAL_RCC_OscConfig+0x4dc>)
2405e6da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2405e6dc:	4a02      	ldr	r2, [pc, #8]	@ (2405e6e8 <HAL_RCC_OscConfig+0x4dc>)
2405e6de:	f043 0301 	orr.w	r3, r3, #1
2405e6e2:	6713      	str	r3, [r2, #112]	@ 0x70
2405e6e4:	e05b      	b.n	2405e79e <HAL_RCC_OscConfig+0x592>
2405e6e6:	bf00      	nop
2405e6e8:	58024400 	.word	0x58024400
2405e6ec:	58024800 	.word	0x58024800
2405e6f0:	687b      	ldr	r3, [r7, #4]
2405e6f2:	689b      	ldr	r3, [r3, #8]
2405e6f4:	2b00      	cmp	r3, #0
2405e6f6:	d112      	bne.n	2405e71e <HAL_RCC_OscConfig+0x512>
2405e6f8:	4b9d      	ldr	r3, [pc, #628]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e6fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2405e6fc:	4a9c      	ldr	r2, [pc, #624]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e6fe:	f023 0301 	bic.w	r3, r3, #1
2405e702:	6713      	str	r3, [r2, #112]	@ 0x70
2405e704:	4b9a      	ldr	r3, [pc, #616]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e706:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2405e708:	4a99      	ldr	r2, [pc, #612]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e70a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
2405e70e:	6713      	str	r3, [r2, #112]	@ 0x70
2405e710:	4b97      	ldr	r3, [pc, #604]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2405e714:	4a96      	ldr	r2, [pc, #600]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e716:	f023 0304 	bic.w	r3, r3, #4
2405e71a:	6713      	str	r3, [r2, #112]	@ 0x70
2405e71c:	e03f      	b.n	2405e79e <HAL_RCC_OscConfig+0x592>
2405e71e:	687b      	ldr	r3, [r7, #4]
2405e720:	689b      	ldr	r3, [r3, #8]
2405e722:	2b05      	cmp	r3, #5
2405e724:	d112      	bne.n	2405e74c <HAL_RCC_OscConfig+0x540>
2405e726:	4b92      	ldr	r3, [pc, #584]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2405e72a:	4a91      	ldr	r2, [pc, #580]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e72c:	f043 0304 	orr.w	r3, r3, #4
2405e730:	6713      	str	r3, [r2, #112]	@ 0x70
2405e732:	4b8f      	ldr	r3, [pc, #572]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2405e736:	4a8e      	ldr	r2, [pc, #568]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e738:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
2405e73c:	6713      	str	r3, [r2, #112]	@ 0x70
2405e73e:	4b8c      	ldr	r3, [pc, #560]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e740:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2405e742:	4a8b      	ldr	r2, [pc, #556]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e744:	f043 0301 	orr.w	r3, r3, #1
2405e748:	6713      	str	r3, [r2, #112]	@ 0x70
2405e74a:	e028      	b.n	2405e79e <HAL_RCC_OscConfig+0x592>
2405e74c:	687b      	ldr	r3, [r7, #4]
2405e74e:	689b      	ldr	r3, [r3, #8]
2405e750:	2b85      	cmp	r3, #133	@ 0x85
2405e752:	d112      	bne.n	2405e77a <HAL_RCC_OscConfig+0x56e>
2405e754:	4b86      	ldr	r3, [pc, #536]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e756:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2405e758:	4a85      	ldr	r2, [pc, #532]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e75a:	f043 0304 	orr.w	r3, r3, #4
2405e75e:	6713      	str	r3, [r2, #112]	@ 0x70
2405e760:	4b83      	ldr	r3, [pc, #524]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e762:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2405e764:	4a82      	ldr	r2, [pc, #520]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e766:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
2405e76a:	6713      	str	r3, [r2, #112]	@ 0x70
2405e76c:	4b80      	ldr	r3, [pc, #512]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e76e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2405e770:	4a7f      	ldr	r2, [pc, #508]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e772:	f043 0301 	orr.w	r3, r3, #1
2405e776:	6713      	str	r3, [r2, #112]	@ 0x70
2405e778:	e011      	b.n	2405e79e <HAL_RCC_OscConfig+0x592>
2405e77a:	4b7d      	ldr	r3, [pc, #500]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e77c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2405e77e:	4a7c      	ldr	r2, [pc, #496]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e780:	f023 0301 	bic.w	r3, r3, #1
2405e784:	6713      	str	r3, [r2, #112]	@ 0x70
2405e786:	4b7a      	ldr	r3, [pc, #488]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2405e78a:	4a79      	ldr	r2, [pc, #484]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e78c:	f023 0304 	bic.w	r3, r3, #4
2405e790:	6713      	str	r3, [r2, #112]	@ 0x70
2405e792:	4b77      	ldr	r3, [pc, #476]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2405e796:	4a76      	ldr	r2, [pc, #472]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e798:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
2405e79c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
2405e79e:	687b      	ldr	r3, [r7, #4]
2405e7a0:	689b      	ldr	r3, [r3, #8]
2405e7a2:	2b00      	cmp	r3, #0
2405e7a4:	d015      	beq.n	2405e7d2 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2405e7a6:	f7f8 f96b 	bl	24056a80 <HAL_GetTick>
2405e7aa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
2405e7ac:	e00a      	b.n	2405e7c4 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
2405e7ae:	f7f8 f967 	bl	24056a80 <HAL_GetTick>
2405e7b2:	4602      	mov	r2, r0
2405e7b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2405e7b6:	1ad3      	subs	r3, r2, r3
2405e7b8:	f241 3288 	movw	r2, #5000	@ 0x1388
2405e7bc:	4293      	cmp	r3, r2
2405e7be:	d901      	bls.n	2405e7c4 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
2405e7c0:	2303      	movs	r3, #3
2405e7c2:	e14c      	b.n	2405ea5e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
2405e7c4:	4b6a      	ldr	r3, [pc, #424]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e7c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2405e7c8:	f003 0302 	and.w	r3, r3, #2
2405e7cc:	2b00      	cmp	r3, #0
2405e7ce:	d0ee      	beq.n	2405e7ae <HAL_RCC_OscConfig+0x5a2>
2405e7d0:	e014      	b.n	2405e7fc <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2405e7d2:	f7f8 f955 	bl	24056a80 <HAL_GetTick>
2405e7d6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
2405e7d8:	e00a      	b.n	2405e7f0 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
2405e7da:	f7f8 f951 	bl	24056a80 <HAL_GetTick>
2405e7de:	4602      	mov	r2, r0
2405e7e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2405e7e2:	1ad3      	subs	r3, r2, r3
2405e7e4:	f241 3288 	movw	r2, #5000	@ 0x1388
2405e7e8:	4293      	cmp	r3, r2
2405e7ea:	d901      	bls.n	2405e7f0 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
2405e7ec:	2303      	movs	r3, #3
2405e7ee:	e136      	b.n	2405ea5e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
2405e7f0:	4b5f      	ldr	r3, [pc, #380]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e7f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2405e7f4:	f003 0302 	and.w	r3, r3, #2
2405e7f8:	2b00      	cmp	r3, #0
2405e7fa:	d1ee      	bne.n	2405e7da <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
2405e7fc:	687b      	ldr	r3, [r7, #4]
2405e7fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2405e800:	2b00      	cmp	r3, #0
2405e802:	f000 812b 	beq.w	2405ea5c <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
2405e806:	4b5a      	ldr	r3, [pc, #360]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e808:	691b      	ldr	r3, [r3, #16]
2405e80a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
2405e80e:	2b18      	cmp	r3, #24
2405e810:	f000 80bb 	beq.w	2405e98a <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
2405e814:	687b      	ldr	r3, [r7, #4]
2405e816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2405e818:	2b02      	cmp	r3, #2
2405e81a:	f040 8095 	bne.w	2405e948 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
2405e81e:	4b54      	ldr	r3, [pc, #336]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e820:	681b      	ldr	r3, [r3, #0]
2405e822:	4a53      	ldr	r2, [pc, #332]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e824:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
2405e828:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2405e82a:	f7f8 f929 	bl	24056a80 <HAL_GetTick>
2405e82e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
2405e830:	e008      	b.n	2405e844 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
2405e832:	f7f8 f925 	bl	24056a80 <HAL_GetTick>
2405e836:	4602      	mov	r2, r0
2405e838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2405e83a:	1ad3      	subs	r3, r2, r3
2405e83c:	2b02      	cmp	r3, #2
2405e83e:	d901      	bls.n	2405e844 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
2405e840:	2303      	movs	r3, #3
2405e842:	e10c      	b.n	2405ea5e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
2405e844:	4b4a      	ldr	r3, [pc, #296]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e846:	681b      	ldr	r3, [r3, #0]
2405e848:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
2405e84c:	2b00      	cmp	r3, #0
2405e84e:	d1f0      	bne.n	2405e832 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
2405e850:	4b47      	ldr	r3, [pc, #284]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e852:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
2405e854:	4b47      	ldr	r3, [pc, #284]	@ (2405e974 <HAL_RCC_OscConfig+0x768>)
2405e856:	4013      	ands	r3, r2
2405e858:	687a      	ldr	r2, [r7, #4]
2405e85a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
2405e85c:	687a      	ldr	r2, [r7, #4]
2405e85e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
2405e860:	0112      	lsls	r2, r2, #4
2405e862:	430a      	orrs	r2, r1
2405e864:	4942      	ldr	r1, [pc, #264]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e866:	4313      	orrs	r3, r2
2405e868:	628b      	str	r3, [r1, #40]	@ 0x28
2405e86a:	687b      	ldr	r3, [r7, #4]
2405e86c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2405e86e:	3b01      	subs	r3, #1
2405e870:	f3c3 0208 	ubfx	r2, r3, #0, #9
2405e874:	687b      	ldr	r3, [r7, #4]
2405e876:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
2405e878:	3b01      	subs	r3, #1
2405e87a:	025b      	lsls	r3, r3, #9
2405e87c:	b29b      	uxth	r3, r3
2405e87e:	431a      	orrs	r2, r3
2405e880:	687b      	ldr	r3, [r7, #4]
2405e882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2405e884:	3b01      	subs	r3, #1
2405e886:	041b      	lsls	r3, r3, #16
2405e888:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
2405e88c:	431a      	orrs	r2, r3
2405e88e:	687b      	ldr	r3, [r7, #4]
2405e890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2405e892:	3b01      	subs	r3, #1
2405e894:	061b      	lsls	r3, r3, #24
2405e896:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
2405e89a:	4935      	ldr	r1, [pc, #212]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e89c:	4313      	orrs	r3, r2
2405e89e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
2405e8a0:	4b33      	ldr	r3, [pc, #204]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e8a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2405e8a4:	4a32      	ldr	r2, [pc, #200]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e8a6:	f023 0301 	bic.w	r3, r3, #1
2405e8aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
2405e8ac:	4b30      	ldr	r3, [pc, #192]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e8ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
2405e8b0:	4b31      	ldr	r3, [pc, #196]	@ (2405e978 <HAL_RCC_OscConfig+0x76c>)
2405e8b2:	4013      	ands	r3, r2
2405e8b4:	687a      	ldr	r2, [r7, #4]
2405e8b6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
2405e8b8:	00d2      	lsls	r2, r2, #3
2405e8ba:	492d      	ldr	r1, [pc, #180]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e8bc:	4313      	orrs	r3, r2
2405e8be:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
2405e8c0:	4b2b      	ldr	r3, [pc, #172]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e8c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2405e8c4:	f023 020c 	bic.w	r2, r3, #12
2405e8c8:	687b      	ldr	r3, [r7, #4]
2405e8ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2405e8cc:	4928      	ldr	r1, [pc, #160]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e8ce:	4313      	orrs	r3, r2
2405e8d0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
2405e8d2:	4b27      	ldr	r3, [pc, #156]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e8d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2405e8d6:	f023 0202 	bic.w	r2, r3, #2
2405e8da:	687b      	ldr	r3, [r7, #4]
2405e8dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2405e8de:	4924      	ldr	r1, [pc, #144]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e8e0:	4313      	orrs	r3, r2
2405e8e2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
2405e8e4:	4b22      	ldr	r3, [pc, #136]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e8e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2405e8e8:	4a21      	ldr	r2, [pc, #132]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e8ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
2405e8ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405e8f0:	4b1f      	ldr	r3, [pc, #124]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e8f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2405e8f4:	4a1e      	ldr	r2, [pc, #120]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e8f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
2405e8fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
2405e8fc:	4b1c      	ldr	r3, [pc, #112]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e8fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2405e900:	4a1b      	ldr	r2, [pc, #108]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e902:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
2405e906:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
2405e908:	4b19      	ldr	r3, [pc, #100]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e90a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2405e90c:	4a18      	ldr	r2, [pc, #96]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e90e:	f043 0301 	orr.w	r3, r3, #1
2405e912:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
2405e914:	4b16      	ldr	r3, [pc, #88]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e916:	681b      	ldr	r3, [r3, #0]
2405e918:	4a15      	ldr	r2, [pc, #84]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e91a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
2405e91e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2405e920:	f7f8 f8ae 	bl	24056a80 <HAL_GetTick>
2405e924:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
2405e926:	e008      	b.n	2405e93a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
2405e928:	f7f8 f8aa 	bl	24056a80 <HAL_GetTick>
2405e92c:	4602      	mov	r2, r0
2405e92e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2405e930:	1ad3      	subs	r3, r2, r3
2405e932:	2b02      	cmp	r3, #2
2405e934:	d901      	bls.n	2405e93a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
2405e936:	2303      	movs	r3, #3
2405e938:	e091      	b.n	2405ea5e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
2405e93a:	4b0d      	ldr	r3, [pc, #52]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e93c:	681b      	ldr	r3, [r3, #0]
2405e93e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
2405e942:	2b00      	cmp	r3, #0
2405e944:	d0f0      	beq.n	2405e928 <HAL_RCC_OscConfig+0x71c>
2405e946:	e089      	b.n	2405ea5c <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
2405e948:	4b09      	ldr	r3, [pc, #36]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e94a:	681b      	ldr	r3, [r3, #0]
2405e94c:	4a08      	ldr	r2, [pc, #32]	@ (2405e970 <HAL_RCC_OscConfig+0x764>)
2405e94e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
2405e952:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2405e954:	f7f8 f894 	bl	24056a80 <HAL_GetTick>
2405e958:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
2405e95a:	e00f      	b.n	2405e97c <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
2405e95c:	f7f8 f890 	bl	24056a80 <HAL_GetTick>
2405e960:	4602      	mov	r2, r0
2405e962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2405e964:	1ad3      	subs	r3, r2, r3
2405e966:	2b02      	cmp	r3, #2
2405e968:	d908      	bls.n	2405e97c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
2405e96a:	2303      	movs	r3, #3
2405e96c:	e077      	b.n	2405ea5e <HAL_RCC_OscConfig+0x852>
2405e96e:	bf00      	nop
2405e970:	58024400 	.word	0x58024400
2405e974:	fffffc0c 	.word	0xfffffc0c
2405e978:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
2405e97c:	4b3a      	ldr	r3, [pc, #232]	@ (2405ea68 <HAL_RCC_OscConfig+0x85c>)
2405e97e:	681b      	ldr	r3, [r3, #0]
2405e980:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
2405e984:	2b00      	cmp	r3, #0
2405e986:	d1e9      	bne.n	2405e95c <HAL_RCC_OscConfig+0x750>
2405e988:	e068      	b.n	2405ea5c <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
2405e98a:	4b37      	ldr	r3, [pc, #220]	@ (2405ea68 <HAL_RCC_OscConfig+0x85c>)
2405e98c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
2405e98e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
2405e990:	4b35      	ldr	r3, [pc, #212]	@ (2405ea68 <HAL_RCC_OscConfig+0x85c>)
2405e992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2405e994:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
2405e996:	687b      	ldr	r3, [r7, #4]
2405e998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2405e99a:	2b01      	cmp	r3, #1
2405e99c:	d031      	beq.n	2405ea02 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
2405e99e:	693b      	ldr	r3, [r7, #16]
2405e9a0:	f003 0203 	and.w	r2, r3, #3
2405e9a4:	687b      	ldr	r3, [r7, #4]
2405e9a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
2405e9a8:	429a      	cmp	r2, r3
2405e9aa:	d12a      	bne.n	2405ea02 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
2405e9ac:	693b      	ldr	r3, [r7, #16]
2405e9ae:	091b      	lsrs	r3, r3, #4
2405e9b0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
2405e9b4:	687b      	ldr	r3, [r7, #4]
2405e9b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
2405e9b8:	429a      	cmp	r2, r3
2405e9ba:	d122      	bne.n	2405ea02 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
2405e9bc:	68fb      	ldr	r3, [r7, #12]
2405e9be:	f3c3 0208 	ubfx	r2, r3, #0, #9
2405e9c2:	687b      	ldr	r3, [r7, #4]
2405e9c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2405e9c6:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
2405e9c8:	429a      	cmp	r2, r3
2405e9ca:	d11a      	bne.n	2405ea02 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
2405e9cc:	68fb      	ldr	r3, [r7, #12]
2405e9ce:	0a5b      	lsrs	r3, r3, #9
2405e9d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
2405e9d4:	687b      	ldr	r3, [r7, #4]
2405e9d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
2405e9d8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
2405e9da:	429a      	cmp	r2, r3
2405e9dc:	d111      	bne.n	2405ea02 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
2405e9de:	68fb      	ldr	r3, [r7, #12]
2405e9e0:	0c1b      	lsrs	r3, r3, #16
2405e9e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
2405e9e6:	687b      	ldr	r3, [r7, #4]
2405e9e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2405e9ea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
2405e9ec:	429a      	cmp	r2, r3
2405e9ee:	d108      	bne.n	2405ea02 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
2405e9f0:	68fb      	ldr	r3, [r7, #12]
2405e9f2:	0e1b      	lsrs	r3, r3, #24
2405e9f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
2405e9f8:	687b      	ldr	r3, [r7, #4]
2405e9fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
2405e9fc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
2405e9fe:	429a      	cmp	r2, r3
2405ea00:	d001      	beq.n	2405ea06 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
2405ea02:	2301      	movs	r3, #1
2405ea04:	e02b      	b.n	2405ea5e <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
2405ea06:	4b18      	ldr	r3, [pc, #96]	@ (2405ea68 <HAL_RCC_OscConfig+0x85c>)
2405ea08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
2405ea0a:	08db      	lsrs	r3, r3, #3
2405ea0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
2405ea10:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
2405ea12:	687b      	ldr	r3, [r7, #4]
2405ea14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
2405ea16:	693a      	ldr	r2, [r7, #16]
2405ea18:	429a      	cmp	r2, r3
2405ea1a:	d01f      	beq.n	2405ea5c <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
2405ea1c:	4b12      	ldr	r3, [pc, #72]	@ (2405ea68 <HAL_RCC_OscConfig+0x85c>)
2405ea1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2405ea20:	4a11      	ldr	r2, [pc, #68]	@ (2405ea68 <HAL_RCC_OscConfig+0x85c>)
2405ea22:	f023 0301 	bic.w	r3, r3, #1
2405ea26:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
2405ea28:	f7f8 f82a 	bl	24056a80 <HAL_GetTick>
2405ea2c:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
2405ea2e:	bf00      	nop
2405ea30:	f7f8 f826 	bl	24056a80 <HAL_GetTick>
2405ea34:	4602      	mov	r2, r0
2405ea36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
2405ea38:	4293      	cmp	r3, r2
2405ea3a:	d0f9      	beq.n	2405ea30 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
2405ea3c:	4b0a      	ldr	r3, [pc, #40]	@ (2405ea68 <HAL_RCC_OscConfig+0x85c>)
2405ea3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
2405ea40:	4b0a      	ldr	r3, [pc, #40]	@ (2405ea6c <HAL_RCC_OscConfig+0x860>)
2405ea42:	4013      	ands	r3, r2
2405ea44:	687a      	ldr	r2, [r7, #4]
2405ea46:	6c92      	ldr	r2, [r2, #72]	@ 0x48
2405ea48:	00d2      	lsls	r2, r2, #3
2405ea4a:	4907      	ldr	r1, [pc, #28]	@ (2405ea68 <HAL_RCC_OscConfig+0x85c>)
2405ea4c:	4313      	orrs	r3, r2
2405ea4e:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
2405ea50:	4b05      	ldr	r3, [pc, #20]	@ (2405ea68 <HAL_RCC_OscConfig+0x85c>)
2405ea52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2405ea54:	4a04      	ldr	r2, [pc, #16]	@ (2405ea68 <HAL_RCC_OscConfig+0x85c>)
2405ea56:	f043 0301 	orr.w	r3, r3, #1
2405ea5a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
2405ea5c:	2300      	movs	r3, #0
}
2405ea5e:	4618      	mov	r0, r3
2405ea60:	3730      	adds	r7, #48	@ 0x30
2405ea62:	46bd      	mov	sp, r7
2405ea64:	bd80      	pop	{r7, pc}
2405ea66:	bf00      	nop
2405ea68:	58024400 	.word	0x58024400
2405ea6c:	ffff0007 	.word	0xffff0007

2405ea70 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
2405ea70:	b580      	push	{r7, lr}
2405ea72:	b086      	sub	sp, #24
2405ea74:	af00      	add	r7, sp, #0
2405ea76:	6078      	str	r0, [r7, #4]
2405ea78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
2405ea7a:	687b      	ldr	r3, [r7, #4]
2405ea7c:	2b00      	cmp	r3, #0
2405ea7e:	d101      	bne.n	2405ea84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
2405ea80:	2301      	movs	r3, #1
2405ea82:	e19c      	b.n	2405edbe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
2405ea84:	4b8a      	ldr	r3, [pc, #552]	@ (2405ecb0 <HAL_RCC_ClockConfig+0x240>)
2405ea86:	681b      	ldr	r3, [r3, #0]
2405ea88:	f003 030f 	and.w	r3, r3, #15
2405ea8c:	683a      	ldr	r2, [r7, #0]
2405ea8e:	429a      	cmp	r2, r3
2405ea90:	d910      	bls.n	2405eab4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
2405ea92:	4b87      	ldr	r3, [pc, #540]	@ (2405ecb0 <HAL_RCC_ClockConfig+0x240>)
2405ea94:	681b      	ldr	r3, [r3, #0]
2405ea96:	f023 020f 	bic.w	r2, r3, #15
2405ea9a:	4985      	ldr	r1, [pc, #532]	@ (2405ecb0 <HAL_RCC_ClockConfig+0x240>)
2405ea9c:	683b      	ldr	r3, [r7, #0]
2405ea9e:	4313      	orrs	r3, r2
2405eaa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
2405eaa2:	4b83      	ldr	r3, [pc, #524]	@ (2405ecb0 <HAL_RCC_ClockConfig+0x240>)
2405eaa4:	681b      	ldr	r3, [r3, #0]
2405eaa6:	f003 030f 	and.w	r3, r3, #15
2405eaaa:	683a      	ldr	r2, [r7, #0]
2405eaac:	429a      	cmp	r2, r3
2405eaae:	d001      	beq.n	2405eab4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
2405eab0:	2301      	movs	r3, #1
2405eab2:	e184      	b.n	2405edbe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
2405eab4:	687b      	ldr	r3, [r7, #4]
2405eab6:	681b      	ldr	r3, [r3, #0]
2405eab8:	f003 0304 	and.w	r3, r3, #4
2405eabc:	2b00      	cmp	r3, #0
2405eabe:	d010      	beq.n	2405eae2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
2405eac0:	687b      	ldr	r3, [r7, #4]
2405eac2:	691a      	ldr	r2, [r3, #16]
2405eac4:	4b7b      	ldr	r3, [pc, #492]	@ (2405ecb4 <HAL_RCC_ClockConfig+0x244>)
2405eac6:	699b      	ldr	r3, [r3, #24]
2405eac8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
2405eacc:	429a      	cmp	r2, r3
2405eace:	d908      	bls.n	2405eae2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
2405ead0:	4b78      	ldr	r3, [pc, #480]	@ (2405ecb4 <HAL_RCC_ClockConfig+0x244>)
2405ead2:	699b      	ldr	r3, [r3, #24]
2405ead4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
2405ead8:	687b      	ldr	r3, [r7, #4]
2405eada:	691b      	ldr	r3, [r3, #16]
2405eadc:	4975      	ldr	r1, [pc, #468]	@ (2405ecb4 <HAL_RCC_ClockConfig+0x244>)
2405eade:	4313      	orrs	r3, r2
2405eae0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
2405eae2:	687b      	ldr	r3, [r7, #4]
2405eae4:	681b      	ldr	r3, [r3, #0]
2405eae6:	f003 0308 	and.w	r3, r3, #8
2405eaea:	2b00      	cmp	r3, #0
2405eaec:	d010      	beq.n	2405eb10 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
2405eaee:	687b      	ldr	r3, [r7, #4]
2405eaf0:	695a      	ldr	r2, [r3, #20]
2405eaf2:	4b70      	ldr	r3, [pc, #448]	@ (2405ecb4 <HAL_RCC_ClockConfig+0x244>)
2405eaf4:	69db      	ldr	r3, [r3, #28]
2405eaf6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
2405eafa:	429a      	cmp	r2, r3
2405eafc:	d908      	bls.n	2405eb10 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
2405eafe:	4b6d      	ldr	r3, [pc, #436]	@ (2405ecb4 <HAL_RCC_ClockConfig+0x244>)
2405eb00:	69db      	ldr	r3, [r3, #28]
2405eb02:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
2405eb06:	687b      	ldr	r3, [r7, #4]
2405eb08:	695b      	ldr	r3, [r3, #20]
2405eb0a:	496a      	ldr	r1, [pc, #424]	@ (2405ecb4 <HAL_RCC_ClockConfig+0x244>)
2405eb0c:	4313      	orrs	r3, r2
2405eb0e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
2405eb10:	687b      	ldr	r3, [r7, #4]
2405eb12:	681b      	ldr	r3, [r3, #0]
2405eb14:	f003 0310 	and.w	r3, r3, #16
2405eb18:	2b00      	cmp	r3, #0
2405eb1a:	d010      	beq.n	2405eb3e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
2405eb1c:	687b      	ldr	r3, [r7, #4]
2405eb1e:	699a      	ldr	r2, [r3, #24]
2405eb20:	4b64      	ldr	r3, [pc, #400]	@ (2405ecb4 <HAL_RCC_ClockConfig+0x244>)
2405eb22:	69db      	ldr	r3, [r3, #28]
2405eb24:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
2405eb28:	429a      	cmp	r2, r3
2405eb2a:	d908      	bls.n	2405eb3e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
2405eb2c:	4b61      	ldr	r3, [pc, #388]	@ (2405ecb4 <HAL_RCC_ClockConfig+0x244>)
2405eb2e:	69db      	ldr	r3, [r3, #28]
2405eb30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
2405eb34:	687b      	ldr	r3, [r7, #4]
2405eb36:	699b      	ldr	r3, [r3, #24]
2405eb38:	495e      	ldr	r1, [pc, #376]	@ (2405ecb4 <HAL_RCC_ClockConfig+0x244>)
2405eb3a:	4313      	orrs	r3, r2
2405eb3c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
2405eb3e:	687b      	ldr	r3, [r7, #4]
2405eb40:	681b      	ldr	r3, [r3, #0]
2405eb42:	f003 0320 	and.w	r3, r3, #32
2405eb46:	2b00      	cmp	r3, #0
2405eb48:	d010      	beq.n	2405eb6c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
2405eb4a:	687b      	ldr	r3, [r7, #4]
2405eb4c:	69da      	ldr	r2, [r3, #28]
2405eb4e:	4b59      	ldr	r3, [pc, #356]	@ (2405ecb4 <HAL_RCC_ClockConfig+0x244>)
2405eb50:	6a1b      	ldr	r3, [r3, #32]
2405eb52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
2405eb56:	429a      	cmp	r2, r3
2405eb58:	d908      	bls.n	2405eb6c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
2405eb5a:	4b56      	ldr	r3, [pc, #344]	@ (2405ecb4 <HAL_RCC_ClockConfig+0x244>)
2405eb5c:	6a1b      	ldr	r3, [r3, #32]
2405eb5e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
2405eb62:	687b      	ldr	r3, [r7, #4]
2405eb64:	69db      	ldr	r3, [r3, #28]
2405eb66:	4953      	ldr	r1, [pc, #332]	@ (2405ecb4 <HAL_RCC_ClockConfig+0x244>)
2405eb68:	4313      	orrs	r3, r2
2405eb6a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
2405eb6c:	687b      	ldr	r3, [r7, #4]
2405eb6e:	681b      	ldr	r3, [r3, #0]
2405eb70:	f003 0302 	and.w	r3, r3, #2
2405eb74:	2b00      	cmp	r3, #0
2405eb76:	d010      	beq.n	2405eb9a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
2405eb78:	687b      	ldr	r3, [r7, #4]
2405eb7a:	68da      	ldr	r2, [r3, #12]
2405eb7c:	4b4d      	ldr	r3, [pc, #308]	@ (2405ecb4 <HAL_RCC_ClockConfig+0x244>)
2405eb7e:	699b      	ldr	r3, [r3, #24]
2405eb80:	f003 030f 	and.w	r3, r3, #15
2405eb84:	429a      	cmp	r2, r3
2405eb86:	d908      	bls.n	2405eb9a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
2405eb88:	4b4a      	ldr	r3, [pc, #296]	@ (2405ecb4 <HAL_RCC_ClockConfig+0x244>)
2405eb8a:	699b      	ldr	r3, [r3, #24]
2405eb8c:	f023 020f 	bic.w	r2, r3, #15
2405eb90:	687b      	ldr	r3, [r7, #4]
2405eb92:	68db      	ldr	r3, [r3, #12]
2405eb94:	4947      	ldr	r1, [pc, #284]	@ (2405ecb4 <HAL_RCC_ClockConfig+0x244>)
2405eb96:	4313      	orrs	r3, r2
2405eb98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
2405eb9a:	687b      	ldr	r3, [r7, #4]
2405eb9c:	681b      	ldr	r3, [r3, #0]
2405eb9e:	f003 0301 	and.w	r3, r3, #1
2405eba2:	2b00      	cmp	r3, #0
2405eba4:	d055      	beq.n	2405ec52 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
2405eba6:	4b43      	ldr	r3, [pc, #268]	@ (2405ecb4 <HAL_RCC_ClockConfig+0x244>)
2405eba8:	699b      	ldr	r3, [r3, #24]
2405ebaa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
2405ebae:	687b      	ldr	r3, [r7, #4]
2405ebb0:	689b      	ldr	r3, [r3, #8]
2405ebb2:	4940      	ldr	r1, [pc, #256]	@ (2405ecb4 <HAL_RCC_ClockConfig+0x244>)
2405ebb4:	4313      	orrs	r3, r2
2405ebb6:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
2405ebb8:	687b      	ldr	r3, [r7, #4]
2405ebba:	685b      	ldr	r3, [r3, #4]
2405ebbc:	2b02      	cmp	r3, #2
2405ebbe:	d107      	bne.n	2405ebd0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
2405ebc0:	4b3c      	ldr	r3, [pc, #240]	@ (2405ecb4 <HAL_RCC_ClockConfig+0x244>)
2405ebc2:	681b      	ldr	r3, [r3, #0]
2405ebc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
2405ebc8:	2b00      	cmp	r3, #0
2405ebca:	d121      	bne.n	2405ec10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
2405ebcc:	2301      	movs	r3, #1
2405ebce:	e0f6      	b.n	2405edbe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
2405ebd0:	687b      	ldr	r3, [r7, #4]
2405ebd2:	685b      	ldr	r3, [r3, #4]
2405ebd4:	2b03      	cmp	r3, #3
2405ebd6:	d107      	bne.n	2405ebe8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
2405ebd8:	4b36      	ldr	r3, [pc, #216]	@ (2405ecb4 <HAL_RCC_ClockConfig+0x244>)
2405ebda:	681b      	ldr	r3, [r3, #0]
2405ebdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
2405ebe0:	2b00      	cmp	r3, #0
2405ebe2:	d115      	bne.n	2405ec10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
2405ebe4:	2301      	movs	r3, #1
2405ebe6:	e0ea      	b.n	2405edbe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
2405ebe8:	687b      	ldr	r3, [r7, #4]
2405ebea:	685b      	ldr	r3, [r3, #4]
2405ebec:	2b01      	cmp	r3, #1
2405ebee:	d107      	bne.n	2405ec00 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
2405ebf0:	4b30      	ldr	r3, [pc, #192]	@ (2405ecb4 <HAL_RCC_ClockConfig+0x244>)
2405ebf2:	681b      	ldr	r3, [r3, #0]
2405ebf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
2405ebf8:	2b00      	cmp	r3, #0
2405ebfa:	d109      	bne.n	2405ec10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
2405ebfc:	2301      	movs	r3, #1
2405ebfe:	e0de      	b.n	2405edbe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
2405ec00:	4b2c      	ldr	r3, [pc, #176]	@ (2405ecb4 <HAL_RCC_ClockConfig+0x244>)
2405ec02:	681b      	ldr	r3, [r3, #0]
2405ec04:	f003 0304 	and.w	r3, r3, #4
2405ec08:	2b00      	cmp	r3, #0
2405ec0a:	d101      	bne.n	2405ec10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
2405ec0c:	2301      	movs	r3, #1
2405ec0e:	e0d6      	b.n	2405edbe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
2405ec10:	4b28      	ldr	r3, [pc, #160]	@ (2405ecb4 <HAL_RCC_ClockConfig+0x244>)
2405ec12:	691b      	ldr	r3, [r3, #16]
2405ec14:	f023 0207 	bic.w	r2, r3, #7
2405ec18:	687b      	ldr	r3, [r7, #4]
2405ec1a:	685b      	ldr	r3, [r3, #4]
2405ec1c:	4925      	ldr	r1, [pc, #148]	@ (2405ecb4 <HAL_RCC_ClockConfig+0x244>)
2405ec1e:	4313      	orrs	r3, r2
2405ec20:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
2405ec22:	f7f7 ff2d 	bl	24056a80 <HAL_GetTick>
2405ec26:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
2405ec28:	e00a      	b.n	2405ec40 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
2405ec2a:	f7f7 ff29 	bl	24056a80 <HAL_GetTick>
2405ec2e:	4602      	mov	r2, r0
2405ec30:	697b      	ldr	r3, [r7, #20]
2405ec32:	1ad3      	subs	r3, r2, r3
2405ec34:	f241 3288 	movw	r2, #5000	@ 0x1388
2405ec38:	4293      	cmp	r3, r2
2405ec3a:	d901      	bls.n	2405ec40 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
2405ec3c:	2303      	movs	r3, #3
2405ec3e:	e0be      	b.n	2405edbe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
2405ec40:	4b1c      	ldr	r3, [pc, #112]	@ (2405ecb4 <HAL_RCC_ClockConfig+0x244>)
2405ec42:	691b      	ldr	r3, [r3, #16]
2405ec44:	f003 0238 	and.w	r2, r3, #56	@ 0x38
2405ec48:	687b      	ldr	r3, [r7, #4]
2405ec4a:	685b      	ldr	r3, [r3, #4]
2405ec4c:	00db      	lsls	r3, r3, #3
2405ec4e:	429a      	cmp	r2, r3
2405ec50:	d1eb      	bne.n	2405ec2a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
2405ec52:	687b      	ldr	r3, [r7, #4]
2405ec54:	681b      	ldr	r3, [r3, #0]
2405ec56:	f003 0302 	and.w	r3, r3, #2
2405ec5a:	2b00      	cmp	r3, #0
2405ec5c:	d010      	beq.n	2405ec80 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
2405ec5e:	687b      	ldr	r3, [r7, #4]
2405ec60:	68da      	ldr	r2, [r3, #12]
2405ec62:	4b14      	ldr	r3, [pc, #80]	@ (2405ecb4 <HAL_RCC_ClockConfig+0x244>)
2405ec64:	699b      	ldr	r3, [r3, #24]
2405ec66:	f003 030f 	and.w	r3, r3, #15
2405ec6a:	429a      	cmp	r2, r3
2405ec6c:	d208      	bcs.n	2405ec80 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
2405ec6e:	4b11      	ldr	r3, [pc, #68]	@ (2405ecb4 <HAL_RCC_ClockConfig+0x244>)
2405ec70:	699b      	ldr	r3, [r3, #24]
2405ec72:	f023 020f 	bic.w	r2, r3, #15
2405ec76:	687b      	ldr	r3, [r7, #4]
2405ec78:	68db      	ldr	r3, [r3, #12]
2405ec7a:	490e      	ldr	r1, [pc, #56]	@ (2405ecb4 <HAL_RCC_ClockConfig+0x244>)
2405ec7c:	4313      	orrs	r3, r2
2405ec7e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
2405ec80:	4b0b      	ldr	r3, [pc, #44]	@ (2405ecb0 <HAL_RCC_ClockConfig+0x240>)
2405ec82:	681b      	ldr	r3, [r3, #0]
2405ec84:	f003 030f 	and.w	r3, r3, #15
2405ec88:	683a      	ldr	r2, [r7, #0]
2405ec8a:	429a      	cmp	r2, r3
2405ec8c:	d214      	bcs.n	2405ecb8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
2405ec8e:	4b08      	ldr	r3, [pc, #32]	@ (2405ecb0 <HAL_RCC_ClockConfig+0x240>)
2405ec90:	681b      	ldr	r3, [r3, #0]
2405ec92:	f023 020f 	bic.w	r2, r3, #15
2405ec96:	4906      	ldr	r1, [pc, #24]	@ (2405ecb0 <HAL_RCC_ClockConfig+0x240>)
2405ec98:	683b      	ldr	r3, [r7, #0]
2405ec9a:	4313      	orrs	r3, r2
2405ec9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
2405ec9e:	4b04      	ldr	r3, [pc, #16]	@ (2405ecb0 <HAL_RCC_ClockConfig+0x240>)
2405eca0:	681b      	ldr	r3, [r3, #0]
2405eca2:	f003 030f 	and.w	r3, r3, #15
2405eca6:	683a      	ldr	r2, [r7, #0]
2405eca8:	429a      	cmp	r2, r3
2405ecaa:	d005      	beq.n	2405ecb8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
2405ecac:	2301      	movs	r3, #1
2405ecae:	e086      	b.n	2405edbe <HAL_RCC_ClockConfig+0x34e>
2405ecb0:	52002000 	.word	0x52002000
2405ecb4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
2405ecb8:	687b      	ldr	r3, [r7, #4]
2405ecba:	681b      	ldr	r3, [r3, #0]
2405ecbc:	f003 0304 	and.w	r3, r3, #4
2405ecc0:	2b00      	cmp	r3, #0
2405ecc2:	d010      	beq.n	2405ece6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
2405ecc4:	687b      	ldr	r3, [r7, #4]
2405ecc6:	691a      	ldr	r2, [r3, #16]
2405ecc8:	4b3f      	ldr	r3, [pc, #252]	@ (2405edc8 <HAL_RCC_ClockConfig+0x358>)
2405ecca:	699b      	ldr	r3, [r3, #24]
2405eccc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
2405ecd0:	429a      	cmp	r2, r3
2405ecd2:	d208      	bcs.n	2405ece6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
2405ecd4:	4b3c      	ldr	r3, [pc, #240]	@ (2405edc8 <HAL_RCC_ClockConfig+0x358>)
2405ecd6:	699b      	ldr	r3, [r3, #24]
2405ecd8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
2405ecdc:	687b      	ldr	r3, [r7, #4]
2405ecde:	691b      	ldr	r3, [r3, #16]
2405ece0:	4939      	ldr	r1, [pc, #228]	@ (2405edc8 <HAL_RCC_ClockConfig+0x358>)
2405ece2:	4313      	orrs	r3, r2
2405ece4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
2405ece6:	687b      	ldr	r3, [r7, #4]
2405ece8:	681b      	ldr	r3, [r3, #0]
2405ecea:	f003 0308 	and.w	r3, r3, #8
2405ecee:	2b00      	cmp	r3, #0
2405ecf0:	d010      	beq.n	2405ed14 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
2405ecf2:	687b      	ldr	r3, [r7, #4]
2405ecf4:	695a      	ldr	r2, [r3, #20]
2405ecf6:	4b34      	ldr	r3, [pc, #208]	@ (2405edc8 <HAL_RCC_ClockConfig+0x358>)
2405ecf8:	69db      	ldr	r3, [r3, #28]
2405ecfa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
2405ecfe:	429a      	cmp	r2, r3
2405ed00:	d208      	bcs.n	2405ed14 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
2405ed02:	4b31      	ldr	r3, [pc, #196]	@ (2405edc8 <HAL_RCC_ClockConfig+0x358>)
2405ed04:	69db      	ldr	r3, [r3, #28]
2405ed06:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
2405ed0a:	687b      	ldr	r3, [r7, #4]
2405ed0c:	695b      	ldr	r3, [r3, #20]
2405ed0e:	492e      	ldr	r1, [pc, #184]	@ (2405edc8 <HAL_RCC_ClockConfig+0x358>)
2405ed10:	4313      	orrs	r3, r2
2405ed12:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
2405ed14:	687b      	ldr	r3, [r7, #4]
2405ed16:	681b      	ldr	r3, [r3, #0]
2405ed18:	f003 0310 	and.w	r3, r3, #16
2405ed1c:	2b00      	cmp	r3, #0
2405ed1e:	d010      	beq.n	2405ed42 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
2405ed20:	687b      	ldr	r3, [r7, #4]
2405ed22:	699a      	ldr	r2, [r3, #24]
2405ed24:	4b28      	ldr	r3, [pc, #160]	@ (2405edc8 <HAL_RCC_ClockConfig+0x358>)
2405ed26:	69db      	ldr	r3, [r3, #28]
2405ed28:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
2405ed2c:	429a      	cmp	r2, r3
2405ed2e:	d208      	bcs.n	2405ed42 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
2405ed30:	4b25      	ldr	r3, [pc, #148]	@ (2405edc8 <HAL_RCC_ClockConfig+0x358>)
2405ed32:	69db      	ldr	r3, [r3, #28]
2405ed34:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
2405ed38:	687b      	ldr	r3, [r7, #4]
2405ed3a:	699b      	ldr	r3, [r3, #24]
2405ed3c:	4922      	ldr	r1, [pc, #136]	@ (2405edc8 <HAL_RCC_ClockConfig+0x358>)
2405ed3e:	4313      	orrs	r3, r2
2405ed40:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
2405ed42:	687b      	ldr	r3, [r7, #4]
2405ed44:	681b      	ldr	r3, [r3, #0]
2405ed46:	f003 0320 	and.w	r3, r3, #32
2405ed4a:	2b00      	cmp	r3, #0
2405ed4c:	d010      	beq.n	2405ed70 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
2405ed4e:	687b      	ldr	r3, [r7, #4]
2405ed50:	69da      	ldr	r2, [r3, #28]
2405ed52:	4b1d      	ldr	r3, [pc, #116]	@ (2405edc8 <HAL_RCC_ClockConfig+0x358>)
2405ed54:	6a1b      	ldr	r3, [r3, #32]
2405ed56:	f003 0370 	and.w	r3, r3, #112	@ 0x70
2405ed5a:	429a      	cmp	r2, r3
2405ed5c:	d208      	bcs.n	2405ed70 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
2405ed5e:	4b1a      	ldr	r3, [pc, #104]	@ (2405edc8 <HAL_RCC_ClockConfig+0x358>)
2405ed60:	6a1b      	ldr	r3, [r3, #32]
2405ed62:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
2405ed66:	687b      	ldr	r3, [r7, #4]
2405ed68:	69db      	ldr	r3, [r3, #28]
2405ed6a:	4917      	ldr	r1, [pc, #92]	@ (2405edc8 <HAL_RCC_ClockConfig+0x358>)
2405ed6c:	4313      	orrs	r3, r2
2405ed6e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
2405ed70:	f000 f834 	bl	2405eddc <HAL_RCC_GetSysClockFreq>
2405ed74:	4602      	mov	r2, r0
2405ed76:	4b14      	ldr	r3, [pc, #80]	@ (2405edc8 <HAL_RCC_ClockConfig+0x358>)
2405ed78:	699b      	ldr	r3, [r3, #24]
2405ed7a:	0a1b      	lsrs	r3, r3, #8
2405ed7c:	f003 030f 	and.w	r3, r3, #15
2405ed80:	4912      	ldr	r1, [pc, #72]	@ (2405edcc <HAL_RCC_ClockConfig+0x35c>)
2405ed82:	5ccb      	ldrb	r3, [r1, r3]
2405ed84:	f003 031f 	and.w	r3, r3, #31
2405ed88:	fa22 f303 	lsr.w	r3, r2, r3
2405ed8c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
2405ed8e:	4b0e      	ldr	r3, [pc, #56]	@ (2405edc8 <HAL_RCC_ClockConfig+0x358>)
2405ed90:	699b      	ldr	r3, [r3, #24]
2405ed92:	f003 030f 	and.w	r3, r3, #15
2405ed96:	4a0d      	ldr	r2, [pc, #52]	@ (2405edcc <HAL_RCC_ClockConfig+0x35c>)
2405ed98:	5cd3      	ldrb	r3, [r2, r3]
2405ed9a:	f003 031f 	and.w	r3, r3, #31
2405ed9e:	693a      	ldr	r2, [r7, #16]
2405eda0:	fa22 f303 	lsr.w	r3, r2, r3
2405eda4:	4a0a      	ldr	r2, [pc, #40]	@ (2405edd0 <HAL_RCC_ClockConfig+0x360>)
2405eda6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
2405eda8:	4a0a      	ldr	r2, [pc, #40]	@ (2405edd4 <HAL_RCC_ClockConfig+0x364>)
2405edaa:	693b      	ldr	r3, [r7, #16]
2405edac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
2405edae:	4b0a      	ldr	r3, [pc, #40]	@ (2405edd8 <HAL_RCC_ClockConfig+0x368>)
2405edb0:	681b      	ldr	r3, [r3, #0]
2405edb2:	4618      	mov	r0, r3
2405edb4:	f7f7 fe1a 	bl	240569ec <HAL_InitTick>
2405edb8:	4603      	mov	r3, r0
2405edba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
2405edbc:	7bfb      	ldrb	r3, [r7, #15]
}
2405edbe:	4618      	mov	r0, r3
2405edc0:	3718      	adds	r7, #24
2405edc2:	46bd      	mov	sp, r7
2405edc4:	bd80      	pop	{r7, pc}
2405edc6:	bf00      	nop
2405edc8:	58024400 	.word	0x58024400
2405edcc:	24069a58 	.word	0x24069a58
2405edd0:	200000e4 	.word	0x200000e4
2405edd4:	200000e0 	.word	0x200000e0
2405edd8:	200000e8 	.word	0x200000e8

2405eddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
2405eddc:	b480      	push	{r7}
2405edde:	b089      	sub	sp, #36	@ 0x24
2405ede0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
2405ede2:	4bb3      	ldr	r3, [pc, #716]	@ (2405f0b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405ede4:	691b      	ldr	r3, [r3, #16]
2405ede6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
2405edea:	2b18      	cmp	r3, #24
2405edec:	f200 8155 	bhi.w	2405f09a <HAL_RCC_GetSysClockFreq+0x2be>
2405edf0:	a201      	add	r2, pc, #4	@ (adr r2, 2405edf8 <HAL_RCC_GetSysClockFreq+0x1c>)
2405edf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2405edf6:	bf00      	nop
2405edf8:	2405ee5d 	.word	0x2405ee5d
2405edfc:	2405f09b 	.word	0x2405f09b
2405ee00:	2405f09b 	.word	0x2405f09b
2405ee04:	2405f09b 	.word	0x2405f09b
2405ee08:	2405f09b 	.word	0x2405f09b
2405ee0c:	2405f09b 	.word	0x2405f09b
2405ee10:	2405f09b 	.word	0x2405f09b
2405ee14:	2405f09b 	.word	0x2405f09b
2405ee18:	2405ee83 	.word	0x2405ee83
2405ee1c:	2405f09b 	.word	0x2405f09b
2405ee20:	2405f09b 	.word	0x2405f09b
2405ee24:	2405f09b 	.word	0x2405f09b
2405ee28:	2405f09b 	.word	0x2405f09b
2405ee2c:	2405f09b 	.word	0x2405f09b
2405ee30:	2405f09b 	.word	0x2405f09b
2405ee34:	2405f09b 	.word	0x2405f09b
2405ee38:	2405ee89 	.word	0x2405ee89
2405ee3c:	2405f09b 	.word	0x2405f09b
2405ee40:	2405f09b 	.word	0x2405f09b
2405ee44:	2405f09b 	.word	0x2405f09b
2405ee48:	2405f09b 	.word	0x2405f09b
2405ee4c:	2405f09b 	.word	0x2405f09b
2405ee50:	2405f09b 	.word	0x2405f09b
2405ee54:	2405f09b 	.word	0x2405f09b
2405ee58:	2405ee8f 	.word	0x2405ee8f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2405ee5c:	4b94      	ldr	r3, [pc, #592]	@ (2405f0b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405ee5e:	681b      	ldr	r3, [r3, #0]
2405ee60:	f003 0320 	and.w	r3, r3, #32
2405ee64:	2b00      	cmp	r3, #0
2405ee66:	d009      	beq.n	2405ee7c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2405ee68:	4b91      	ldr	r3, [pc, #580]	@ (2405f0b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405ee6a:	681b      	ldr	r3, [r3, #0]
2405ee6c:	08db      	lsrs	r3, r3, #3
2405ee6e:	f003 0303 	and.w	r3, r3, #3
2405ee72:	4a90      	ldr	r2, [pc, #576]	@ (2405f0b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
2405ee74:	fa22 f303 	lsr.w	r3, r2, r3
2405ee78:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
2405ee7a:	e111      	b.n	2405f0a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
2405ee7c:	4b8d      	ldr	r3, [pc, #564]	@ (2405f0b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
2405ee7e:	61bb      	str	r3, [r7, #24]
      break;
2405ee80:	e10e      	b.n	2405f0a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
2405ee82:	4b8d      	ldr	r3, [pc, #564]	@ (2405f0b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
2405ee84:	61bb      	str	r3, [r7, #24]
      break;
2405ee86:	e10b      	b.n	2405f0a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
2405ee88:	4b8c      	ldr	r3, [pc, #560]	@ (2405f0bc <HAL_RCC_GetSysClockFreq+0x2e0>)
2405ee8a:	61bb      	str	r3, [r7, #24]
      break;
2405ee8c:	e108      	b.n	2405f0a0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2405ee8e:	4b88      	ldr	r3, [pc, #544]	@ (2405f0b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405ee90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
2405ee92:	f003 0303 	and.w	r3, r3, #3
2405ee96:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
2405ee98:	4b85      	ldr	r3, [pc, #532]	@ (2405f0b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405ee9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
2405ee9c:	091b      	lsrs	r3, r3, #4
2405ee9e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
2405eea2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
2405eea4:	4b82      	ldr	r3, [pc, #520]	@ (2405f0b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405eea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2405eea8:	f003 0301 	and.w	r3, r3, #1
2405eeac:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
2405eeae:	4b80      	ldr	r3, [pc, #512]	@ (2405f0b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405eeb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
2405eeb2:	08db      	lsrs	r3, r3, #3
2405eeb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
2405eeb8:	68fa      	ldr	r2, [r7, #12]
2405eeba:	fb02 f303 	mul.w	r3, r2, r3
2405eebe:	ee07 3a90 	vmov	s15, r3
2405eec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405eec6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
2405eeca:	693b      	ldr	r3, [r7, #16]
2405eecc:	2b00      	cmp	r3, #0
2405eece:	f000 80e1 	beq.w	2405f094 <HAL_RCC_GetSysClockFreq+0x2b8>
2405eed2:	697b      	ldr	r3, [r7, #20]
2405eed4:	2b02      	cmp	r3, #2
2405eed6:	f000 8083 	beq.w	2405efe0 <HAL_RCC_GetSysClockFreq+0x204>
2405eeda:	697b      	ldr	r3, [r7, #20]
2405eedc:	2b02      	cmp	r3, #2
2405eede:	f200 80a1 	bhi.w	2405f024 <HAL_RCC_GetSysClockFreq+0x248>
2405eee2:	697b      	ldr	r3, [r7, #20]
2405eee4:	2b00      	cmp	r3, #0
2405eee6:	d003      	beq.n	2405eef0 <HAL_RCC_GetSysClockFreq+0x114>
2405eee8:	697b      	ldr	r3, [r7, #20]
2405eeea:	2b01      	cmp	r3, #1
2405eeec:	d056      	beq.n	2405ef9c <HAL_RCC_GetSysClockFreq+0x1c0>
2405eeee:	e099      	b.n	2405f024 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2405eef0:	4b6f      	ldr	r3, [pc, #444]	@ (2405f0b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405eef2:	681b      	ldr	r3, [r3, #0]
2405eef4:	f003 0320 	and.w	r3, r3, #32
2405eef8:	2b00      	cmp	r3, #0
2405eefa:	d02d      	beq.n	2405ef58 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2405eefc:	4b6c      	ldr	r3, [pc, #432]	@ (2405f0b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405eefe:	681b      	ldr	r3, [r3, #0]
2405ef00:	08db      	lsrs	r3, r3, #3
2405ef02:	f003 0303 	and.w	r3, r3, #3
2405ef06:	4a6b      	ldr	r2, [pc, #428]	@ (2405f0b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
2405ef08:	fa22 f303 	lsr.w	r3, r2, r3
2405ef0c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2405ef0e:	687b      	ldr	r3, [r7, #4]
2405ef10:	ee07 3a90 	vmov	s15, r3
2405ef14:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405ef18:	693b      	ldr	r3, [r7, #16]
2405ef1a:	ee07 3a90 	vmov	s15, r3
2405ef1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405ef22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405ef26:	4b62      	ldr	r3, [pc, #392]	@ (2405f0b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405ef28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2405ef2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405ef2e:	ee07 3a90 	vmov	s15, r3
2405ef32:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405ef36:	ed97 6a02 	vldr	s12, [r7, #8]
2405ef3a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 2405f0c0 <HAL_RCC_GetSysClockFreq+0x2e4>
2405ef3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405ef42:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405ef46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
2405ef4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405ef4e:	ee67 7a27 	vmul.f32	s15, s14, s15
2405ef52:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
2405ef56:	e087      	b.n	2405f068 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2405ef58:	693b      	ldr	r3, [r7, #16]
2405ef5a:	ee07 3a90 	vmov	s15, r3
2405ef5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405ef62:	eddf 6a58 	vldr	s13, [pc, #352]	@ 2405f0c4 <HAL_RCC_GetSysClockFreq+0x2e8>
2405ef66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405ef6a:	4b51      	ldr	r3, [pc, #324]	@ (2405f0b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405ef6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2405ef6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405ef72:	ee07 3a90 	vmov	s15, r3
2405ef76:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405ef7a:	ed97 6a02 	vldr	s12, [r7, #8]
2405ef7e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 2405f0c0 <HAL_RCC_GetSysClockFreq+0x2e4>
2405ef82:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405ef86:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405ef8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
2405ef8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405ef92:	ee67 7a27 	vmul.f32	s15, s14, s15
2405ef96:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
2405ef9a:	e065      	b.n	2405f068 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2405ef9c:	693b      	ldr	r3, [r7, #16]
2405ef9e:	ee07 3a90 	vmov	s15, r3
2405efa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405efa6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 2405f0c8 <HAL_RCC_GetSysClockFreq+0x2ec>
2405efaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405efae:	4b40      	ldr	r3, [pc, #256]	@ (2405f0b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405efb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2405efb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405efb6:	ee07 3a90 	vmov	s15, r3
2405efba:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405efbe:	ed97 6a02 	vldr	s12, [r7, #8]
2405efc2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 2405f0c0 <HAL_RCC_GetSysClockFreq+0x2e4>
2405efc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405efca:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405efce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
2405efd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405efd6:	ee67 7a27 	vmul.f32	s15, s14, s15
2405efda:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
2405efde:	e043      	b.n	2405f068 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2405efe0:	693b      	ldr	r3, [r7, #16]
2405efe2:	ee07 3a90 	vmov	s15, r3
2405efe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405efea:	eddf 6a38 	vldr	s13, [pc, #224]	@ 2405f0cc <HAL_RCC_GetSysClockFreq+0x2f0>
2405efee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405eff2:	4b2f      	ldr	r3, [pc, #188]	@ (2405f0b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405eff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2405eff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405effa:	ee07 3a90 	vmov	s15, r3
2405effe:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405f002:	ed97 6a02 	vldr	s12, [r7, #8]
2405f006:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 2405f0c0 <HAL_RCC_GetSysClockFreq+0x2e4>
2405f00a:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405f00e:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405f012:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
2405f016:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405f01a:	ee67 7a27 	vmul.f32	s15, s14, s15
2405f01e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
2405f022:	e021      	b.n	2405f068 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2405f024:	693b      	ldr	r3, [r7, #16]
2405f026:	ee07 3a90 	vmov	s15, r3
2405f02a:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405f02e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 2405f0c8 <HAL_RCC_GetSysClockFreq+0x2ec>
2405f032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405f036:	4b1e      	ldr	r3, [pc, #120]	@ (2405f0b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405f038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2405f03a:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405f03e:	ee07 3a90 	vmov	s15, r3
2405f042:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405f046:	ed97 6a02 	vldr	s12, [r7, #8]
2405f04a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 2405f0c0 <HAL_RCC_GetSysClockFreq+0x2e4>
2405f04e:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405f052:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405f056:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
2405f05a:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405f05e:	ee67 7a27 	vmul.f32	s15, s14, s15
2405f062:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
2405f066:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
2405f068:	4b11      	ldr	r3, [pc, #68]	@ (2405f0b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405f06a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
2405f06c:	0a5b      	lsrs	r3, r3, #9
2405f06e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
2405f072:	3301      	adds	r3, #1
2405f074:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
2405f076:	683b      	ldr	r3, [r7, #0]
2405f078:	ee07 3a90 	vmov	s15, r3
2405f07c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
2405f080:	edd7 6a07 	vldr	s13, [r7, #28]
2405f084:	eec6 7a87 	vdiv.f32	s15, s13, s14
2405f088:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2405f08c:	ee17 3a90 	vmov	r3, s15
2405f090:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
2405f092:	e005      	b.n	2405f0a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
2405f094:	2300      	movs	r3, #0
2405f096:	61bb      	str	r3, [r7, #24]
      break;
2405f098:	e002      	b.n	2405f0a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
2405f09a:	4b07      	ldr	r3, [pc, #28]	@ (2405f0b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
2405f09c:	61bb      	str	r3, [r7, #24]
      break;
2405f09e:	bf00      	nop
  }

  return sysclockfreq;
2405f0a0:	69bb      	ldr	r3, [r7, #24]
}
2405f0a2:	4618      	mov	r0, r3
2405f0a4:	3724      	adds	r7, #36	@ 0x24
2405f0a6:	46bd      	mov	sp, r7
2405f0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
2405f0ac:	4770      	bx	lr
2405f0ae:	bf00      	nop
2405f0b0:	58024400 	.word	0x58024400
2405f0b4:	03d09000 	.word	0x03d09000
2405f0b8:	003d0900 	.word	0x003d0900
2405f0bc:	016e3600 	.word	0x016e3600
2405f0c0:	46000000 	.word	0x46000000
2405f0c4:	4c742400 	.word	0x4c742400
2405f0c8:	4a742400 	.word	0x4a742400
2405f0cc:	4bb71b00 	.word	0x4bb71b00

2405f0d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
2405f0d0:	b580      	push	{r7, lr}
2405f0d2:	b082      	sub	sp, #8
2405f0d4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
2405f0d6:	f7ff fe81 	bl	2405eddc <HAL_RCC_GetSysClockFreq>
2405f0da:	4602      	mov	r2, r0
2405f0dc:	4b10      	ldr	r3, [pc, #64]	@ (2405f120 <HAL_RCC_GetHCLKFreq+0x50>)
2405f0de:	699b      	ldr	r3, [r3, #24]
2405f0e0:	0a1b      	lsrs	r3, r3, #8
2405f0e2:	f003 030f 	and.w	r3, r3, #15
2405f0e6:	490f      	ldr	r1, [pc, #60]	@ (2405f124 <HAL_RCC_GetHCLKFreq+0x54>)
2405f0e8:	5ccb      	ldrb	r3, [r1, r3]
2405f0ea:	f003 031f 	and.w	r3, r3, #31
2405f0ee:	fa22 f303 	lsr.w	r3, r2, r3
2405f0f2:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
2405f0f4:	4b0a      	ldr	r3, [pc, #40]	@ (2405f120 <HAL_RCC_GetHCLKFreq+0x50>)
2405f0f6:	699b      	ldr	r3, [r3, #24]
2405f0f8:	f003 030f 	and.w	r3, r3, #15
2405f0fc:	4a09      	ldr	r2, [pc, #36]	@ (2405f124 <HAL_RCC_GetHCLKFreq+0x54>)
2405f0fe:	5cd3      	ldrb	r3, [r2, r3]
2405f100:	f003 031f 	and.w	r3, r3, #31
2405f104:	687a      	ldr	r2, [r7, #4]
2405f106:	fa22 f303 	lsr.w	r3, r2, r3
2405f10a:	4a07      	ldr	r2, [pc, #28]	@ (2405f128 <HAL_RCC_GetHCLKFreq+0x58>)
2405f10c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
2405f10e:	4a07      	ldr	r2, [pc, #28]	@ (2405f12c <HAL_RCC_GetHCLKFreq+0x5c>)
2405f110:	687b      	ldr	r3, [r7, #4]
2405f112:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
2405f114:	4b04      	ldr	r3, [pc, #16]	@ (2405f128 <HAL_RCC_GetHCLKFreq+0x58>)
2405f116:	681b      	ldr	r3, [r3, #0]
}
2405f118:	4618      	mov	r0, r3
2405f11a:	3708      	adds	r7, #8
2405f11c:	46bd      	mov	sp, r7
2405f11e:	bd80      	pop	{r7, pc}
2405f120:	58024400 	.word	0x58024400
2405f124:	24069a58 	.word	0x24069a58
2405f128:	200000e4 	.word	0x200000e4
2405f12c:	200000e0 	.word	0x200000e0

2405f130 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
2405f130:	b580      	push	{r7, lr}
2405f132:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
2405f134:	f7ff ffcc 	bl	2405f0d0 <HAL_RCC_GetHCLKFreq>
2405f138:	4602      	mov	r2, r0
2405f13a:	4b06      	ldr	r3, [pc, #24]	@ (2405f154 <HAL_RCC_GetPCLK1Freq+0x24>)
2405f13c:	69db      	ldr	r3, [r3, #28]
2405f13e:	091b      	lsrs	r3, r3, #4
2405f140:	f003 0307 	and.w	r3, r3, #7
2405f144:	4904      	ldr	r1, [pc, #16]	@ (2405f158 <HAL_RCC_GetPCLK1Freq+0x28>)
2405f146:	5ccb      	ldrb	r3, [r1, r3]
2405f148:	f003 031f 	and.w	r3, r3, #31
2405f14c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
2405f150:	4618      	mov	r0, r3
2405f152:	bd80      	pop	{r7, pc}
2405f154:	58024400 	.word	0x58024400
2405f158:	24069a58 	.word	0x24069a58

2405f15c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
2405f15c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
2405f160:	b0c8      	sub	sp, #288	@ 0x120
2405f162:	af00      	add	r7, sp, #0
2405f164:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
2405f168:	2300      	movs	r3, #0
2405f16a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
2405f16e:	2300      	movs	r3, #0
2405f170:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
2405f174:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f178:	e9d3 2300 	ldrd	r2, r3, [r3]
2405f17c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
2405f180:	2500      	movs	r5, #0
2405f182:	ea54 0305 	orrs.w	r3, r4, r5
2405f186:	d049      	beq.n	2405f21c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
2405f188:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f18c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
2405f18e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
2405f192:	d02f      	beq.n	2405f1f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
2405f194:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
2405f198:	d828      	bhi.n	2405f1ec <HAL_RCCEx_PeriphCLKConfig+0x90>
2405f19a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
2405f19e:	d01a      	beq.n	2405f1d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
2405f1a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
2405f1a4:	d822      	bhi.n	2405f1ec <HAL_RCCEx_PeriphCLKConfig+0x90>
2405f1a6:	2b00      	cmp	r3, #0
2405f1a8:	d003      	beq.n	2405f1b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
2405f1aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
2405f1ae:	d007      	beq.n	2405f1c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
2405f1b0:	e01c      	b.n	2405f1ec <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405f1b2:	4ba7      	ldr	r3, [pc, #668]	@ (2405f450 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405f1b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2405f1b6:	4aa6      	ldr	r2, [pc, #664]	@ (2405f450 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405f1b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
2405f1bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
2405f1be:	e01a      	b.n	2405f1f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
2405f1c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f1c4:	3308      	adds	r3, #8
2405f1c6:	2102      	movs	r1, #2
2405f1c8:	4618      	mov	r0, r3
2405f1ca:	f002 fa6d 	bl	240616a8 <RCCEx_PLL2_Config>
2405f1ce:	4603      	mov	r3, r0
2405f1d0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
2405f1d4:	e00f      	b.n	2405f1f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2405f1d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f1da:	3328      	adds	r3, #40	@ 0x28
2405f1dc:	2102      	movs	r1, #2
2405f1de:	4618      	mov	r0, r3
2405f1e0:	f002 fb14 	bl	2406180c <RCCEx_PLL3_Config>
2405f1e4:	4603      	mov	r3, r0
2405f1e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
2405f1ea:	e004      	b.n	2405f1f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405f1ec:	2301      	movs	r3, #1
2405f1ee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
2405f1f2:	e000      	b.n	2405f1f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
2405f1f4:	bf00      	nop
    }

    if (ret == HAL_OK)
2405f1f6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
2405f1fa:	2b00      	cmp	r3, #0
2405f1fc:	d10a      	bne.n	2405f214 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
2405f1fe:	4b94      	ldr	r3, [pc, #592]	@ (2405f450 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405f200:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2405f202:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
2405f206:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f20a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
2405f20c:	4a90      	ldr	r2, [pc, #576]	@ (2405f450 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405f20e:	430b      	orrs	r3, r1
2405f210:	6513      	str	r3, [r2, #80]	@ 0x50
2405f212:	e003      	b.n	2405f21c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405f214:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
2405f218:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
2405f21c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f220:	e9d3 2300 	ldrd	r2, r3, [r3]
2405f224:	f402 7880 	and.w	r8, r2, #256	@ 0x100
2405f228:	f04f 0900 	mov.w	r9, #0
2405f22c:	ea58 0309 	orrs.w	r3, r8, r9
2405f230:	d047      	beq.n	2405f2c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
2405f232:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
2405f238:	2b04      	cmp	r3, #4
2405f23a:	d82a      	bhi.n	2405f292 <HAL_RCCEx_PeriphCLKConfig+0x136>
2405f23c:	a201      	add	r2, pc, #4	@ (adr r2, 2405f244 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
2405f23e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2405f242:	bf00      	nop
2405f244:	2405f259 	.word	0x2405f259
2405f248:	2405f267 	.word	0x2405f267
2405f24c:	2405f27d 	.word	0x2405f27d
2405f250:	2405f29b 	.word	0x2405f29b
2405f254:	2405f29b 	.word	0x2405f29b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405f258:	4b7d      	ldr	r3, [pc, #500]	@ (2405f450 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405f25a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2405f25c:	4a7c      	ldr	r2, [pc, #496]	@ (2405f450 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405f25e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
2405f262:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
2405f264:	e01a      	b.n	2405f29c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2405f266:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f26a:	3308      	adds	r3, #8
2405f26c:	2100      	movs	r1, #0
2405f26e:	4618      	mov	r0, r3
2405f270:	f002 fa1a 	bl	240616a8 <RCCEx_PLL2_Config>
2405f274:	4603      	mov	r3, r0
2405f276:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
2405f27a:	e00f      	b.n	2405f29c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
2405f27c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f280:	3328      	adds	r3, #40	@ 0x28
2405f282:	2100      	movs	r1, #0
2405f284:	4618      	mov	r0, r3
2405f286:	f002 fac1 	bl	2406180c <RCCEx_PLL3_Config>
2405f28a:	4603      	mov	r3, r0
2405f28c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
2405f290:	e004      	b.n	2405f29c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405f292:	2301      	movs	r3, #1
2405f294:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
2405f298:	e000      	b.n	2405f29c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
2405f29a:	bf00      	nop
    }

    if (ret == HAL_OK)
2405f29c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
2405f2a0:	2b00      	cmp	r3, #0
2405f2a2:	d10a      	bne.n	2405f2ba <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
2405f2a4:	4b6a      	ldr	r3, [pc, #424]	@ (2405f450 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405f2a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2405f2a8:	f023 0107 	bic.w	r1, r3, #7
2405f2ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f2b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
2405f2b2:	4a67      	ldr	r2, [pc, #412]	@ (2405f450 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405f2b4:	430b      	orrs	r3, r1
2405f2b6:	6513      	str	r3, [r2, #80]	@ 0x50
2405f2b8:	e003      	b.n	2405f2c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405f2ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
2405f2be:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
2405f2c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
2405f2ca:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
2405f2ce:	f04f 0b00 	mov.w	fp, #0
2405f2d2:	ea5a 030b 	orrs.w	r3, sl, fp
2405f2d6:	d054      	beq.n	2405f382 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
2405f2d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f2dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
2405f2de:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
2405f2e2:	d036      	beq.n	2405f352 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
2405f2e4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
2405f2e8:	d82f      	bhi.n	2405f34a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
2405f2ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
2405f2ee:	d032      	beq.n	2405f356 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
2405f2f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
2405f2f4:	d829      	bhi.n	2405f34a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
2405f2f6:	2bc0      	cmp	r3, #192	@ 0xc0
2405f2f8:	d02f      	beq.n	2405f35a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
2405f2fa:	2bc0      	cmp	r3, #192	@ 0xc0
2405f2fc:	d825      	bhi.n	2405f34a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
2405f2fe:	2b80      	cmp	r3, #128	@ 0x80
2405f300:	d018      	beq.n	2405f334 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
2405f302:	2b80      	cmp	r3, #128	@ 0x80
2405f304:	d821      	bhi.n	2405f34a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
2405f306:	2b00      	cmp	r3, #0
2405f308:	d002      	beq.n	2405f310 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
2405f30a:	2b40      	cmp	r3, #64	@ 0x40
2405f30c:	d007      	beq.n	2405f31e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
2405f30e:	e01c      	b.n	2405f34a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405f310:	4b4f      	ldr	r3, [pc, #316]	@ (2405f450 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405f312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2405f314:	4a4e      	ldr	r2, [pc, #312]	@ (2405f450 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405f316:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
2405f31a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
2405f31c:	e01e      	b.n	2405f35c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2405f31e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f322:	3308      	adds	r3, #8
2405f324:	2100      	movs	r1, #0
2405f326:	4618      	mov	r0, r3
2405f328:	f002 f9be 	bl	240616a8 <RCCEx_PLL2_Config>
2405f32c:	4603      	mov	r3, r0
2405f32e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
2405f332:	e013      	b.n	2405f35c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
2405f334:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f338:	3328      	adds	r3, #40	@ 0x28
2405f33a:	2100      	movs	r1, #0
2405f33c:	4618      	mov	r0, r3
2405f33e:	f002 fa65 	bl	2406180c <RCCEx_PLL3_Config>
2405f342:	4603      	mov	r3, r0
2405f344:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
2405f348:	e008      	b.n	2405f35c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405f34a:	2301      	movs	r3, #1
2405f34c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
2405f350:	e004      	b.n	2405f35c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
2405f352:	bf00      	nop
2405f354:	e002      	b.n	2405f35c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
2405f356:	bf00      	nop
2405f358:	e000      	b.n	2405f35c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
2405f35a:	bf00      	nop
    }

    if (ret == HAL_OK)
2405f35c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
2405f360:	2b00      	cmp	r3, #0
2405f362:	d10a      	bne.n	2405f37a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
2405f364:	4b3a      	ldr	r3, [pc, #232]	@ (2405f450 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405f366:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2405f368:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
2405f36c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f370:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
2405f372:	4a37      	ldr	r2, [pc, #220]	@ (2405f450 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405f374:	430b      	orrs	r3, r1
2405f376:	6513      	str	r3, [r2, #80]	@ 0x50
2405f378:	e003      	b.n	2405f382 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405f37a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
2405f37e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
2405f382:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f386:	e9d3 2300 	ldrd	r2, r3, [r3]
2405f38a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
2405f38e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
2405f392:	2300      	movs	r3, #0
2405f394:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
2405f398:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
2405f39c:	460b      	mov	r3, r1
2405f39e:	4313      	orrs	r3, r2
2405f3a0:	d05c      	beq.n	2405f45c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
2405f3a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f3a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
2405f3a8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
2405f3ac:	d03b      	beq.n	2405f426 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
2405f3ae:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
2405f3b2:	d834      	bhi.n	2405f41e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
2405f3b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
2405f3b8:	d037      	beq.n	2405f42a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
2405f3ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
2405f3be:	d82e      	bhi.n	2405f41e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
2405f3c0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
2405f3c4:	d033      	beq.n	2405f42e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
2405f3c6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
2405f3ca:	d828      	bhi.n	2405f41e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
2405f3cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
2405f3d0:	d01a      	beq.n	2405f408 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
2405f3d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
2405f3d6:	d822      	bhi.n	2405f41e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
2405f3d8:	2b00      	cmp	r3, #0
2405f3da:	d003      	beq.n	2405f3e4 <HAL_RCCEx_PeriphCLKConfig+0x288>
2405f3dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
2405f3e0:	d007      	beq.n	2405f3f2 <HAL_RCCEx_PeriphCLKConfig+0x296>
2405f3e2:	e01c      	b.n	2405f41e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405f3e4:	4b1a      	ldr	r3, [pc, #104]	@ (2405f450 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405f3e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2405f3e8:	4a19      	ldr	r2, [pc, #100]	@ (2405f450 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405f3ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
2405f3ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
2405f3f0:	e01e      	b.n	2405f430 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2405f3f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f3f6:	3308      	adds	r3, #8
2405f3f8:	2100      	movs	r1, #0
2405f3fa:	4618      	mov	r0, r3
2405f3fc:	f002 f954 	bl	240616a8 <RCCEx_PLL2_Config>
2405f400:	4603      	mov	r3, r0
2405f402:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
2405f406:	e013      	b.n	2405f430 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
2405f408:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f40c:	3328      	adds	r3, #40	@ 0x28
2405f40e:	2100      	movs	r1, #0
2405f410:	4618      	mov	r0, r3
2405f412:	f002 f9fb 	bl	2406180c <RCCEx_PLL3_Config>
2405f416:	4603      	mov	r3, r0
2405f418:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
2405f41c:	e008      	b.n	2405f430 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405f41e:	2301      	movs	r3, #1
2405f420:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
2405f424:	e004      	b.n	2405f430 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
2405f426:	bf00      	nop
2405f428:	e002      	b.n	2405f430 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
2405f42a:	bf00      	nop
2405f42c:	e000      	b.n	2405f430 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
2405f42e:	bf00      	nop
    }

    if (ret == HAL_OK)
2405f430:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
2405f434:	2b00      	cmp	r3, #0
2405f436:	d10d      	bne.n	2405f454 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
2405f438:	4b05      	ldr	r3, [pc, #20]	@ (2405f450 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405f43a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2405f43c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
2405f440:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f444:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
2405f446:	4a02      	ldr	r2, [pc, #8]	@ (2405f450 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405f448:	430b      	orrs	r3, r1
2405f44a:	6513      	str	r3, [r2, #80]	@ 0x50
2405f44c:	e006      	b.n	2405f45c <HAL_RCCEx_PeriphCLKConfig+0x300>
2405f44e:	bf00      	nop
2405f450:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
2405f454:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
2405f458:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
2405f45c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f460:	e9d3 2300 	ldrd	r2, r3, [r3]
2405f464:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
2405f468:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
2405f46c:	2300      	movs	r3, #0
2405f46e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
2405f472:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
2405f476:	460b      	mov	r3, r1
2405f478:	4313      	orrs	r3, r2
2405f47a:	d03a      	beq.n	2405f4f2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
2405f47c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2405f482:	2b30      	cmp	r3, #48	@ 0x30
2405f484:	d01f      	beq.n	2405f4c6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
2405f486:	2b30      	cmp	r3, #48	@ 0x30
2405f488:	d819      	bhi.n	2405f4be <HAL_RCCEx_PeriphCLKConfig+0x362>
2405f48a:	2b20      	cmp	r3, #32
2405f48c:	d00c      	beq.n	2405f4a8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
2405f48e:	2b20      	cmp	r3, #32
2405f490:	d815      	bhi.n	2405f4be <HAL_RCCEx_PeriphCLKConfig+0x362>
2405f492:	2b00      	cmp	r3, #0
2405f494:	d019      	beq.n	2405f4ca <HAL_RCCEx_PeriphCLKConfig+0x36e>
2405f496:	2b10      	cmp	r3, #16
2405f498:	d111      	bne.n	2405f4be <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405f49a:	4bae      	ldr	r3, [pc, #696]	@ (2405f754 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2405f49c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2405f49e:	4aad      	ldr	r2, [pc, #692]	@ (2405f754 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2405f4a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
2405f4a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
2405f4a6:	e011      	b.n	2405f4cc <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
2405f4a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f4ac:	3308      	adds	r3, #8
2405f4ae:	2102      	movs	r1, #2
2405f4b0:	4618      	mov	r0, r3
2405f4b2:	f002 f8f9 	bl	240616a8 <RCCEx_PLL2_Config>
2405f4b6:	4603      	mov	r3, r0
2405f4b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
2405f4bc:	e006      	b.n	2405f4cc <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
2405f4be:	2301      	movs	r3, #1
2405f4c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
2405f4c4:	e002      	b.n	2405f4cc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
2405f4c6:	bf00      	nop
2405f4c8:	e000      	b.n	2405f4cc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
2405f4ca:	bf00      	nop
    }

    if (ret == HAL_OK)
2405f4cc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
2405f4d0:	2b00      	cmp	r3, #0
2405f4d2:	d10a      	bne.n	2405f4ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
2405f4d4:	4b9f      	ldr	r3, [pc, #636]	@ (2405f754 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2405f4d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2405f4d8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
2405f4dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f4e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2405f4e2:	4a9c      	ldr	r2, [pc, #624]	@ (2405f754 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2405f4e4:	430b      	orrs	r3, r1
2405f4e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
2405f4e8:	e003      	b.n	2405f4f2 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405f4ea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
2405f4ee:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
2405f4f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
2405f4fa:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
2405f4fe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
2405f502:	2300      	movs	r3, #0
2405f504:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
2405f508:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
2405f50c:	460b      	mov	r3, r1
2405f50e:	4313      	orrs	r3, r2
2405f510:	d051      	beq.n	2405f5b6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
2405f512:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f516:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
2405f518:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
2405f51c:	d035      	beq.n	2405f58a <HAL_RCCEx_PeriphCLKConfig+0x42e>
2405f51e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
2405f522:	d82e      	bhi.n	2405f582 <HAL_RCCEx_PeriphCLKConfig+0x426>
2405f524:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
2405f528:	d031      	beq.n	2405f58e <HAL_RCCEx_PeriphCLKConfig+0x432>
2405f52a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
2405f52e:	d828      	bhi.n	2405f582 <HAL_RCCEx_PeriphCLKConfig+0x426>
2405f530:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
2405f534:	d01a      	beq.n	2405f56c <HAL_RCCEx_PeriphCLKConfig+0x410>
2405f536:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
2405f53a:	d822      	bhi.n	2405f582 <HAL_RCCEx_PeriphCLKConfig+0x426>
2405f53c:	2b00      	cmp	r3, #0
2405f53e:	d003      	beq.n	2405f548 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
2405f540:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
2405f544:	d007      	beq.n	2405f556 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
2405f546:	e01c      	b.n	2405f582 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405f548:	4b82      	ldr	r3, [pc, #520]	@ (2405f754 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2405f54a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2405f54c:	4a81      	ldr	r2, [pc, #516]	@ (2405f754 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2405f54e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
2405f552:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
2405f554:	e01c      	b.n	2405f590 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2405f556:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f55a:	3308      	adds	r3, #8
2405f55c:	2100      	movs	r1, #0
2405f55e:	4618      	mov	r0, r3
2405f560:	f002 f8a2 	bl	240616a8 <RCCEx_PLL2_Config>
2405f564:	4603      	mov	r3, r0
2405f566:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
2405f56a:	e011      	b.n	2405f590 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
2405f56c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f570:	3328      	adds	r3, #40	@ 0x28
2405f572:	2100      	movs	r1, #0
2405f574:	4618      	mov	r0, r3
2405f576:	f002 f949 	bl	2406180c <RCCEx_PLL3_Config>
2405f57a:	4603      	mov	r3, r0
2405f57c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
2405f580:	e006      	b.n	2405f590 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405f582:	2301      	movs	r3, #1
2405f584:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
2405f588:	e002      	b.n	2405f590 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
2405f58a:	bf00      	nop
2405f58c:	e000      	b.n	2405f590 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
2405f58e:	bf00      	nop
    }

    if (ret == HAL_OK)
2405f590:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
2405f594:	2b00      	cmp	r3, #0
2405f596:	d10a      	bne.n	2405f5ae <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
2405f598:	4b6e      	ldr	r3, [pc, #440]	@ (2405f754 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2405f59a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2405f59c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
2405f5a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f5a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
2405f5a6:	4a6b      	ldr	r2, [pc, #428]	@ (2405f754 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2405f5a8:	430b      	orrs	r3, r1
2405f5aa:	6513      	str	r3, [r2, #80]	@ 0x50
2405f5ac:	e003      	b.n	2405f5b6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405f5ae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
2405f5b2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
2405f5b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
2405f5be:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
2405f5c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
2405f5c6:	2300      	movs	r3, #0
2405f5c8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
2405f5cc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
2405f5d0:	460b      	mov	r3, r1
2405f5d2:	4313      	orrs	r3, r2
2405f5d4:	d053      	beq.n	2405f67e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
2405f5d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f5da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
2405f5dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
2405f5e0:	d033      	beq.n	2405f64a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
2405f5e2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
2405f5e6:	d82c      	bhi.n	2405f642 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
2405f5e8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
2405f5ec:	d02f      	beq.n	2405f64e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
2405f5ee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
2405f5f2:	d826      	bhi.n	2405f642 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
2405f5f4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
2405f5f8:	d02b      	beq.n	2405f652 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
2405f5fa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
2405f5fe:	d820      	bhi.n	2405f642 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
2405f600:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
2405f604:	d012      	beq.n	2405f62c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
2405f606:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
2405f60a:	d81a      	bhi.n	2405f642 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
2405f60c:	2b00      	cmp	r3, #0
2405f60e:	d022      	beq.n	2405f656 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
2405f610:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
2405f614:	d115      	bne.n	2405f642 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
2405f616:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f61a:	3308      	adds	r3, #8
2405f61c:	2101      	movs	r1, #1
2405f61e:	4618      	mov	r0, r3
2405f620:	f002 f842 	bl	240616a8 <RCCEx_PLL2_Config>
2405f624:	4603      	mov	r3, r0
2405f626:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
2405f62a:	e015      	b.n	2405f658 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2405f62c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f630:	3328      	adds	r3, #40	@ 0x28
2405f632:	2101      	movs	r1, #1
2405f634:	4618      	mov	r0, r3
2405f636:	f002 f8e9 	bl	2406180c <RCCEx_PLL3_Config>
2405f63a:	4603      	mov	r3, r0
2405f63c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
2405f640:	e00a      	b.n	2405f658 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405f642:	2301      	movs	r3, #1
2405f644:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
2405f648:	e006      	b.n	2405f658 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
2405f64a:	bf00      	nop
2405f64c:	e004      	b.n	2405f658 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
2405f64e:	bf00      	nop
2405f650:	e002      	b.n	2405f658 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
2405f652:	bf00      	nop
2405f654:	e000      	b.n	2405f658 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
2405f656:	bf00      	nop
    }

    if (ret == HAL_OK)
2405f658:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
2405f65c:	2b00      	cmp	r3, #0
2405f65e:	d10a      	bne.n	2405f676 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
2405f660:	4b3c      	ldr	r3, [pc, #240]	@ (2405f754 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2405f662:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2405f664:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
2405f668:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f66c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
2405f66e:	4a39      	ldr	r2, [pc, #228]	@ (2405f754 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2405f670:	430b      	orrs	r3, r1
2405f672:	6513      	str	r3, [r2, #80]	@ 0x50
2405f674:	e003      	b.n	2405f67e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405f676:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
2405f67a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
2405f67e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f682:	e9d3 2300 	ldrd	r2, r3, [r3]
2405f686:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
2405f68a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
2405f68e:	2300      	movs	r3, #0
2405f690:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
2405f694:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
2405f698:	460b      	mov	r3, r1
2405f69a:	4313      	orrs	r3, r2
2405f69c:	d060      	beq.n	2405f760 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
2405f69e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f6a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
2405f6a6:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
2405f6aa:	d039      	beq.n	2405f720 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
2405f6ac:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
2405f6b0:	d832      	bhi.n	2405f718 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
2405f6b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
2405f6b6:	d035      	beq.n	2405f724 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
2405f6b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
2405f6bc:	d82c      	bhi.n	2405f718 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
2405f6be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
2405f6c2:	d031      	beq.n	2405f728 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
2405f6c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
2405f6c8:	d826      	bhi.n	2405f718 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
2405f6ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
2405f6ce:	d02d      	beq.n	2405f72c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
2405f6d0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
2405f6d4:	d820      	bhi.n	2405f718 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
2405f6d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
2405f6da:	d012      	beq.n	2405f702 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
2405f6dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
2405f6e0:	d81a      	bhi.n	2405f718 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
2405f6e2:	2b00      	cmp	r3, #0
2405f6e4:	d024      	beq.n	2405f730 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
2405f6e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
2405f6ea:	d115      	bne.n	2405f718 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
2405f6ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f6f0:	3308      	adds	r3, #8
2405f6f2:	2101      	movs	r1, #1
2405f6f4:	4618      	mov	r0, r3
2405f6f6:	f001 ffd7 	bl	240616a8 <RCCEx_PLL2_Config>
2405f6fa:	4603      	mov	r3, r0
2405f6fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
2405f700:	e017      	b.n	2405f732 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2405f702:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f706:	3328      	adds	r3, #40	@ 0x28
2405f708:	2101      	movs	r1, #1
2405f70a:	4618      	mov	r0, r3
2405f70c:	f002 f87e 	bl	2406180c <RCCEx_PLL3_Config>
2405f710:	4603      	mov	r3, r0
2405f712:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
2405f716:	e00c      	b.n	2405f732 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
2405f718:	2301      	movs	r3, #1
2405f71a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
2405f71e:	e008      	b.n	2405f732 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
2405f720:	bf00      	nop
2405f722:	e006      	b.n	2405f732 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
2405f724:	bf00      	nop
2405f726:	e004      	b.n	2405f732 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
2405f728:	bf00      	nop
2405f72a:	e002      	b.n	2405f732 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
2405f72c:	bf00      	nop
2405f72e:	e000      	b.n	2405f732 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
2405f730:	bf00      	nop
    }

    if (ret == HAL_OK)
2405f732:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
2405f736:	2b00      	cmp	r3, #0
2405f738:	d10e      	bne.n	2405f758 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
2405f73a:	4b06      	ldr	r3, [pc, #24]	@ (2405f754 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2405f73c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
2405f73e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
2405f742:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f746:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
2405f74a:	4a02      	ldr	r2, [pc, #8]	@ (2405f754 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2405f74c:	430b      	orrs	r3, r1
2405f74e:	6593      	str	r3, [r2, #88]	@ 0x58
2405f750:	e006      	b.n	2405f760 <HAL_RCCEx_PeriphCLKConfig+0x604>
2405f752:	bf00      	nop
2405f754:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
2405f758:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
2405f75c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
2405f760:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f764:	e9d3 2300 	ldrd	r2, r3, [r3]
2405f768:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
2405f76c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
2405f770:	2300      	movs	r3, #0
2405f772:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
2405f776:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
2405f77a:	460b      	mov	r3, r1
2405f77c:	4313      	orrs	r3, r2
2405f77e:	d037      	beq.n	2405f7f0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
2405f780:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f784:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
2405f786:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
2405f78a:	d00e      	beq.n	2405f7aa <HAL_RCCEx_PeriphCLKConfig+0x64e>
2405f78c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
2405f790:	d816      	bhi.n	2405f7c0 <HAL_RCCEx_PeriphCLKConfig+0x664>
2405f792:	2b00      	cmp	r3, #0
2405f794:	d018      	beq.n	2405f7c8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
2405f796:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
2405f79a:	d111      	bne.n	2405f7c0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405f79c:	4bc4      	ldr	r3, [pc, #784]	@ (2405fab0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405f79e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2405f7a0:	4ac3      	ldr	r2, [pc, #780]	@ (2405fab0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405f7a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
2405f7a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
2405f7a8:	e00f      	b.n	2405f7ca <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
2405f7aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f7ae:	3308      	adds	r3, #8
2405f7b0:	2101      	movs	r1, #1
2405f7b2:	4618      	mov	r0, r3
2405f7b4:	f001 ff78 	bl	240616a8 <RCCEx_PLL2_Config>
2405f7b8:	4603      	mov	r3, r0
2405f7ba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
2405f7be:	e004      	b.n	2405f7ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405f7c0:	2301      	movs	r3, #1
2405f7c2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
2405f7c6:	e000      	b.n	2405f7ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
2405f7c8:	bf00      	nop
    }

    if (ret == HAL_OK)
2405f7ca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
2405f7ce:	2b00      	cmp	r3, #0
2405f7d0:	d10a      	bne.n	2405f7e8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
2405f7d2:	4bb7      	ldr	r3, [pc, #732]	@ (2405fab0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405f7d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2405f7d6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
2405f7da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f7de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
2405f7e0:	4ab3      	ldr	r2, [pc, #716]	@ (2405fab0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405f7e2:	430b      	orrs	r3, r1
2405f7e4:	6513      	str	r3, [r2, #80]	@ 0x50
2405f7e6:	e003      	b.n	2405f7f0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405f7e8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
2405f7ec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
2405f7f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
2405f7f8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
2405f7fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
2405f800:	2300      	movs	r3, #0
2405f802:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
2405f806:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
2405f80a:	460b      	mov	r3, r1
2405f80c:	4313      	orrs	r3, r2
2405f80e:	d039      	beq.n	2405f884 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
2405f810:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f814:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
2405f816:	2b03      	cmp	r3, #3
2405f818:	d81c      	bhi.n	2405f854 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
2405f81a:	a201      	add	r2, pc, #4	@ (adr r2, 2405f820 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
2405f81c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2405f820:	2405f85d 	.word	0x2405f85d
2405f824:	2405f831 	.word	0x2405f831
2405f828:	2405f83f 	.word	0x2405f83f
2405f82c:	2405f85d 	.word	0x2405f85d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405f830:	4b9f      	ldr	r3, [pc, #636]	@ (2405fab0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405f832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2405f834:	4a9e      	ldr	r2, [pc, #632]	@ (2405fab0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405f836:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
2405f83a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
2405f83c:	e00f      	b.n	2405f85e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
2405f83e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f842:	3308      	adds	r3, #8
2405f844:	2102      	movs	r1, #2
2405f846:	4618      	mov	r0, r3
2405f848:	f001 ff2e 	bl	240616a8 <RCCEx_PLL2_Config>
2405f84c:	4603      	mov	r3, r0
2405f84e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
2405f852:	e004      	b.n	2405f85e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
2405f854:	2301      	movs	r3, #1
2405f856:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
2405f85a:	e000      	b.n	2405f85e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
2405f85c:	bf00      	nop
    }

    if (ret == HAL_OK)
2405f85e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
2405f862:	2b00      	cmp	r3, #0
2405f864:	d10a      	bne.n	2405f87c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
2405f866:	4b92      	ldr	r3, [pc, #584]	@ (2405fab0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405f868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2405f86a:	f023 0103 	bic.w	r1, r3, #3
2405f86e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f872:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
2405f874:	4a8e      	ldr	r2, [pc, #568]	@ (2405fab0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405f876:	430b      	orrs	r3, r1
2405f878:	64d3      	str	r3, [r2, #76]	@ 0x4c
2405f87a:	e003      	b.n	2405f884 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405f87c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
2405f880:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
2405f884:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f888:	e9d3 2300 	ldrd	r2, r3, [r3]
2405f88c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
2405f890:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
2405f894:	2300      	movs	r3, #0
2405f896:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
2405f89a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
2405f89e:	460b      	mov	r3, r1
2405f8a0:	4313      	orrs	r3, r2
2405f8a2:	f000 8099 	beq.w	2405f9d8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
2405f8a6:	4b83      	ldr	r3, [pc, #524]	@ (2405fab4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
2405f8a8:	681b      	ldr	r3, [r3, #0]
2405f8aa:	4a82      	ldr	r2, [pc, #520]	@ (2405fab4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
2405f8ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
2405f8b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
2405f8b2:	f7f7 f8e5 	bl	24056a80 <HAL_GetTick>
2405f8b6:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
2405f8ba:	e00b      	b.n	2405f8d4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
2405f8bc:	f7f7 f8e0 	bl	24056a80 <HAL_GetTick>
2405f8c0:	4602      	mov	r2, r0
2405f8c2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
2405f8c6:	1ad3      	subs	r3, r2, r3
2405f8c8:	2b64      	cmp	r3, #100	@ 0x64
2405f8ca:	d903      	bls.n	2405f8d4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
2405f8cc:	2303      	movs	r3, #3
2405f8ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
2405f8d2:	e005      	b.n	2405f8e0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
2405f8d4:	4b77      	ldr	r3, [pc, #476]	@ (2405fab4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
2405f8d6:	681b      	ldr	r3, [r3, #0]
2405f8d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
2405f8dc:	2b00      	cmp	r3, #0
2405f8de:	d0ed      	beq.n	2405f8bc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
2405f8e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
2405f8e4:	2b00      	cmp	r3, #0
2405f8e6:	d173      	bne.n	2405f9d0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
2405f8e8:	4b71      	ldr	r3, [pc, #452]	@ (2405fab0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405f8ea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
2405f8ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f8f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
2405f8f4:	4053      	eors	r3, r2
2405f8f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
2405f8fa:	2b00      	cmp	r3, #0
2405f8fc:	d015      	beq.n	2405f92a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
2405f8fe:	4b6c      	ldr	r3, [pc, #432]	@ (2405fab0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405f900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2405f902:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
2405f906:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
2405f90a:	4b69      	ldr	r3, [pc, #420]	@ (2405fab0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405f90c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2405f90e:	4a68      	ldr	r2, [pc, #416]	@ (2405fab0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405f910:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
2405f914:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
2405f916:	4b66      	ldr	r3, [pc, #408]	@ (2405fab0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405f918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2405f91a:	4a65      	ldr	r2, [pc, #404]	@ (2405fab0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405f91c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
2405f920:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
2405f922:	4a63      	ldr	r2, [pc, #396]	@ (2405fab0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405f924:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
2405f928:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
2405f92a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f92e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
2405f932:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
2405f936:	d118      	bne.n	2405f96a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2405f938:	f7f7 f8a2 	bl	24056a80 <HAL_GetTick>
2405f93c:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
2405f940:	e00d      	b.n	2405f95e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
2405f942:	f7f7 f89d 	bl	24056a80 <HAL_GetTick>
2405f946:	4602      	mov	r2, r0
2405f948:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
2405f94c:	1ad2      	subs	r2, r2, r3
2405f94e:	f241 3388 	movw	r3, #5000	@ 0x1388
2405f952:	429a      	cmp	r2, r3
2405f954:	d903      	bls.n	2405f95e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
2405f956:	2303      	movs	r3, #3
2405f958:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
2405f95c:	e005      	b.n	2405f96a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
2405f95e:	4b54      	ldr	r3, [pc, #336]	@ (2405fab0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405f960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
2405f962:	f003 0302 	and.w	r3, r3, #2
2405f966:	2b00      	cmp	r3, #0
2405f968:	d0eb      	beq.n	2405f942 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
2405f96a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
2405f96e:	2b00      	cmp	r3, #0
2405f970:	d129      	bne.n	2405f9c6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
2405f972:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f976:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
2405f97a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
2405f97e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
2405f982:	d10e      	bne.n	2405f9a2 <HAL_RCCEx_PeriphCLKConfig+0x846>
2405f984:	4b4a      	ldr	r3, [pc, #296]	@ (2405fab0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405f986:	691b      	ldr	r3, [r3, #16]
2405f988:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
2405f98c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f990:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
2405f994:	091a      	lsrs	r2, r3, #4
2405f996:	4b48      	ldr	r3, [pc, #288]	@ (2405fab8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
2405f998:	4013      	ands	r3, r2
2405f99a:	4a45      	ldr	r2, [pc, #276]	@ (2405fab0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405f99c:	430b      	orrs	r3, r1
2405f99e:	6113      	str	r3, [r2, #16]
2405f9a0:	e005      	b.n	2405f9ae <HAL_RCCEx_PeriphCLKConfig+0x852>
2405f9a2:	4b43      	ldr	r3, [pc, #268]	@ (2405fab0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405f9a4:	691b      	ldr	r3, [r3, #16]
2405f9a6:	4a42      	ldr	r2, [pc, #264]	@ (2405fab0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405f9a8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
2405f9ac:	6113      	str	r3, [r2, #16]
2405f9ae:	4b40      	ldr	r3, [pc, #256]	@ (2405fab0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405f9b0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
2405f9b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f9b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
2405f9ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
2405f9be:	4a3c      	ldr	r2, [pc, #240]	@ (2405fab0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405f9c0:	430b      	orrs	r3, r1
2405f9c2:	6713      	str	r3, [r2, #112]	@ 0x70
2405f9c4:	e008      	b.n	2405f9d8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
2405f9c6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
2405f9ca:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
2405f9ce:	e003      	b.n	2405f9d8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
2405f9d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
2405f9d4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
2405f9d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
2405f9e0:	f002 0301 	and.w	r3, r2, #1
2405f9e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
2405f9e8:	2300      	movs	r3, #0
2405f9ea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
2405f9ee:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
2405f9f2:	460b      	mov	r3, r1
2405f9f4:	4313      	orrs	r3, r2
2405f9f6:	f000 8090 	beq.w	2405fb1a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
2405f9fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405f9fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
2405fa02:	2b28      	cmp	r3, #40	@ 0x28
2405fa04:	d870      	bhi.n	2405fae8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
2405fa06:	a201      	add	r2, pc, #4	@ (adr r2, 2405fa0c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
2405fa08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2405fa0c:	2405faf1 	.word	0x2405faf1
2405fa10:	2405fae9 	.word	0x2405fae9
2405fa14:	2405fae9 	.word	0x2405fae9
2405fa18:	2405fae9 	.word	0x2405fae9
2405fa1c:	2405fae9 	.word	0x2405fae9
2405fa20:	2405fae9 	.word	0x2405fae9
2405fa24:	2405fae9 	.word	0x2405fae9
2405fa28:	2405fae9 	.word	0x2405fae9
2405fa2c:	2405fabd 	.word	0x2405fabd
2405fa30:	2405fae9 	.word	0x2405fae9
2405fa34:	2405fae9 	.word	0x2405fae9
2405fa38:	2405fae9 	.word	0x2405fae9
2405fa3c:	2405fae9 	.word	0x2405fae9
2405fa40:	2405fae9 	.word	0x2405fae9
2405fa44:	2405fae9 	.word	0x2405fae9
2405fa48:	2405fae9 	.word	0x2405fae9
2405fa4c:	2405fad3 	.word	0x2405fad3
2405fa50:	2405fae9 	.word	0x2405fae9
2405fa54:	2405fae9 	.word	0x2405fae9
2405fa58:	2405fae9 	.word	0x2405fae9
2405fa5c:	2405fae9 	.word	0x2405fae9
2405fa60:	2405fae9 	.word	0x2405fae9
2405fa64:	2405fae9 	.word	0x2405fae9
2405fa68:	2405fae9 	.word	0x2405fae9
2405fa6c:	2405faf1 	.word	0x2405faf1
2405fa70:	2405fae9 	.word	0x2405fae9
2405fa74:	2405fae9 	.word	0x2405fae9
2405fa78:	2405fae9 	.word	0x2405fae9
2405fa7c:	2405fae9 	.word	0x2405fae9
2405fa80:	2405fae9 	.word	0x2405fae9
2405fa84:	2405fae9 	.word	0x2405fae9
2405fa88:	2405fae9 	.word	0x2405fae9
2405fa8c:	2405faf1 	.word	0x2405faf1
2405fa90:	2405fae9 	.word	0x2405fae9
2405fa94:	2405fae9 	.word	0x2405fae9
2405fa98:	2405fae9 	.word	0x2405fae9
2405fa9c:	2405fae9 	.word	0x2405fae9
2405faa0:	2405fae9 	.word	0x2405fae9
2405faa4:	2405fae9 	.word	0x2405fae9
2405faa8:	2405fae9 	.word	0x2405fae9
2405faac:	2405faf1 	.word	0x2405faf1
2405fab0:	58024400 	.word	0x58024400
2405fab4:	58024800 	.word	0x58024800
2405fab8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
2405fabc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405fac0:	3308      	adds	r3, #8
2405fac2:	2101      	movs	r1, #1
2405fac4:	4618      	mov	r0, r3
2405fac6:	f001 fdef 	bl	240616a8 <RCCEx_PLL2_Config>
2405faca:	4603      	mov	r3, r0
2405facc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
2405fad0:	e00f      	b.n	2405faf2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2405fad2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405fad6:	3328      	adds	r3, #40	@ 0x28
2405fad8:	2101      	movs	r1, #1
2405fada:	4618      	mov	r0, r3
2405fadc:	f001 fe96 	bl	2406180c <RCCEx_PLL3_Config>
2405fae0:	4603      	mov	r3, r0
2405fae2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
2405fae6:	e004      	b.n	2405faf2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405fae8:	2301      	movs	r3, #1
2405faea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
2405faee:	e000      	b.n	2405faf2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
2405faf0:	bf00      	nop
    }

    if (ret == HAL_OK)
2405faf2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
2405faf6:	2b00      	cmp	r3, #0
2405faf8:	d10b      	bne.n	2405fb12 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
2405fafa:	4bc0      	ldr	r3, [pc, #768]	@ (2405fdfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
2405fafc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
2405fafe:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
2405fb02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405fb06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
2405fb0a:	4abc      	ldr	r2, [pc, #752]	@ (2405fdfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
2405fb0c:	430b      	orrs	r3, r1
2405fb0e:	6553      	str	r3, [r2, #84]	@ 0x54
2405fb10:	e003      	b.n	2405fb1a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405fb12:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
2405fb16:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
2405fb1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405fb1e:	e9d3 2300 	ldrd	r2, r3, [r3]
2405fb22:	f002 0302 	and.w	r3, r2, #2
2405fb26:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
2405fb2a:	2300      	movs	r3, #0
2405fb2c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
2405fb30:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
2405fb34:	460b      	mov	r3, r1
2405fb36:	4313      	orrs	r3, r2
2405fb38:	d043      	beq.n	2405fbc2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
2405fb3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405fb3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
2405fb42:	2b05      	cmp	r3, #5
2405fb44:	d824      	bhi.n	2405fb90 <HAL_RCCEx_PeriphCLKConfig+0xa34>
2405fb46:	a201      	add	r2, pc, #4	@ (adr r2, 2405fb4c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
2405fb48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2405fb4c:	2405fb99 	.word	0x2405fb99
2405fb50:	2405fb65 	.word	0x2405fb65
2405fb54:	2405fb7b 	.word	0x2405fb7b
2405fb58:	2405fb99 	.word	0x2405fb99
2405fb5c:	2405fb99 	.word	0x2405fb99
2405fb60:	2405fb99 	.word	0x2405fb99
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
2405fb64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405fb68:	3308      	adds	r3, #8
2405fb6a:	2101      	movs	r1, #1
2405fb6c:	4618      	mov	r0, r3
2405fb6e:	f001 fd9b 	bl	240616a8 <RCCEx_PLL2_Config>
2405fb72:	4603      	mov	r3, r0
2405fb74:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
2405fb78:	e00f      	b.n	2405fb9a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2405fb7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405fb7e:	3328      	adds	r3, #40	@ 0x28
2405fb80:	2101      	movs	r1, #1
2405fb82:	4618      	mov	r0, r3
2405fb84:	f001 fe42 	bl	2406180c <RCCEx_PLL3_Config>
2405fb88:	4603      	mov	r3, r0
2405fb8a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
2405fb8e:	e004      	b.n	2405fb9a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405fb90:	2301      	movs	r3, #1
2405fb92:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
2405fb96:	e000      	b.n	2405fb9a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
2405fb98:	bf00      	nop
    }

    if (ret == HAL_OK)
2405fb9a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
2405fb9e:	2b00      	cmp	r3, #0
2405fba0:	d10b      	bne.n	2405fbba <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
2405fba2:	4b96      	ldr	r3, [pc, #600]	@ (2405fdfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
2405fba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
2405fba6:	f023 0107 	bic.w	r1, r3, #7
2405fbaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405fbae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
2405fbb2:	4a92      	ldr	r2, [pc, #584]	@ (2405fdfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
2405fbb4:	430b      	orrs	r3, r1
2405fbb6:	6553      	str	r3, [r2, #84]	@ 0x54
2405fbb8:	e003      	b.n	2405fbc2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405fbba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
2405fbbe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
2405fbc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405fbc6:	e9d3 2300 	ldrd	r2, r3, [r3]
2405fbca:	f002 0304 	and.w	r3, r2, #4
2405fbce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
2405fbd2:	2300      	movs	r3, #0
2405fbd4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
2405fbd8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
2405fbdc:	460b      	mov	r3, r1
2405fbde:	4313      	orrs	r3, r2
2405fbe0:	d043      	beq.n	2405fc6a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
2405fbe2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405fbe6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
2405fbea:	2b05      	cmp	r3, #5
2405fbec:	d824      	bhi.n	2405fc38 <HAL_RCCEx_PeriphCLKConfig+0xadc>
2405fbee:	a201      	add	r2, pc, #4	@ (adr r2, 2405fbf4 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
2405fbf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2405fbf4:	2405fc41 	.word	0x2405fc41
2405fbf8:	2405fc0d 	.word	0x2405fc0d
2405fbfc:	2405fc23 	.word	0x2405fc23
2405fc00:	2405fc41 	.word	0x2405fc41
2405fc04:	2405fc41 	.word	0x2405fc41
2405fc08:	2405fc41 	.word	0x2405fc41
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
2405fc0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405fc10:	3308      	adds	r3, #8
2405fc12:	2101      	movs	r1, #1
2405fc14:	4618      	mov	r0, r3
2405fc16:	f001 fd47 	bl	240616a8 <RCCEx_PLL2_Config>
2405fc1a:	4603      	mov	r3, r0
2405fc1c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
2405fc20:	e00f      	b.n	2405fc42 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2405fc22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405fc26:	3328      	adds	r3, #40	@ 0x28
2405fc28:	2101      	movs	r1, #1
2405fc2a:	4618      	mov	r0, r3
2405fc2c:	f001 fdee 	bl	2406180c <RCCEx_PLL3_Config>
2405fc30:	4603      	mov	r3, r0
2405fc32:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
2405fc36:	e004      	b.n	2405fc42 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405fc38:	2301      	movs	r3, #1
2405fc3a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
2405fc3e:	e000      	b.n	2405fc42 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
2405fc40:	bf00      	nop
    }

    if (ret == HAL_OK)
2405fc42:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
2405fc46:	2b00      	cmp	r3, #0
2405fc48:	d10b      	bne.n	2405fc62 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
2405fc4a:	4b6c      	ldr	r3, [pc, #432]	@ (2405fdfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
2405fc4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
2405fc4e:	f023 0107 	bic.w	r1, r3, #7
2405fc52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405fc56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
2405fc5a:	4a68      	ldr	r2, [pc, #416]	@ (2405fdfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
2405fc5c:	430b      	orrs	r3, r1
2405fc5e:	6593      	str	r3, [r2, #88]	@ 0x58
2405fc60:	e003      	b.n	2405fc6a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405fc62:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
2405fc66:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
2405fc6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405fc6e:	e9d3 2300 	ldrd	r2, r3, [r3]
2405fc72:	f002 0320 	and.w	r3, r2, #32
2405fc76:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
2405fc7a:	2300      	movs	r3, #0
2405fc7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
2405fc80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
2405fc84:	460b      	mov	r3, r1
2405fc86:	4313      	orrs	r3, r2
2405fc88:	d055      	beq.n	2405fd36 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
2405fc8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405fc8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
2405fc92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
2405fc96:	d033      	beq.n	2405fd00 <HAL_RCCEx_PeriphCLKConfig+0xba4>
2405fc98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
2405fc9c:	d82c      	bhi.n	2405fcf8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
2405fc9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
2405fca2:	d02f      	beq.n	2405fd04 <HAL_RCCEx_PeriphCLKConfig+0xba8>
2405fca4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
2405fca8:	d826      	bhi.n	2405fcf8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
2405fcaa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
2405fcae:	d02b      	beq.n	2405fd08 <HAL_RCCEx_PeriphCLKConfig+0xbac>
2405fcb0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
2405fcb4:	d820      	bhi.n	2405fcf8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
2405fcb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
2405fcba:	d012      	beq.n	2405fce2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
2405fcbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
2405fcc0:	d81a      	bhi.n	2405fcf8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
2405fcc2:	2b00      	cmp	r3, #0
2405fcc4:	d022      	beq.n	2405fd0c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
2405fcc6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
2405fcca:	d115      	bne.n	2405fcf8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2405fccc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405fcd0:	3308      	adds	r3, #8
2405fcd2:	2100      	movs	r1, #0
2405fcd4:	4618      	mov	r0, r3
2405fcd6:	f001 fce7 	bl	240616a8 <RCCEx_PLL2_Config>
2405fcda:	4603      	mov	r3, r0
2405fcdc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
2405fce0:	e015      	b.n	2405fd0e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2405fce2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405fce6:	3328      	adds	r3, #40	@ 0x28
2405fce8:	2102      	movs	r1, #2
2405fcea:	4618      	mov	r0, r3
2405fcec:	f001 fd8e 	bl	2406180c <RCCEx_PLL3_Config>
2405fcf0:	4603      	mov	r3, r0
2405fcf2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
2405fcf6:	e00a      	b.n	2405fd0e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405fcf8:	2301      	movs	r3, #1
2405fcfa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
2405fcfe:	e006      	b.n	2405fd0e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
2405fd00:	bf00      	nop
2405fd02:	e004      	b.n	2405fd0e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
2405fd04:	bf00      	nop
2405fd06:	e002      	b.n	2405fd0e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
2405fd08:	bf00      	nop
2405fd0a:	e000      	b.n	2405fd0e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
2405fd0c:	bf00      	nop
    }

    if (ret == HAL_OK)
2405fd0e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
2405fd12:	2b00      	cmp	r3, #0
2405fd14:	d10b      	bne.n	2405fd2e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
2405fd16:	4b39      	ldr	r3, [pc, #228]	@ (2405fdfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
2405fd18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
2405fd1a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
2405fd1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405fd22:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
2405fd26:	4a35      	ldr	r2, [pc, #212]	@ (2405fdfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
2405fd28:	430b      	orrs	r3, r1
2405fd2a:	6553      	str	r3, [r2, #84]	@ 0x54
2405fd2c:	e003      	b.n	2405fd36 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405fd2e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
2405fd32:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
2405fd36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405fd3a:	e9d3 2300 	ldrd	r2, r3, [r3]
2405fd3e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
2405fd42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
2405fd46:	2300      	movs	r3, #0
2405fd48:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
2405fd4c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
2405fd50:	460b      	mov	r3, r1
2405fd52:	4313      	orrs	r3, r2
2405fd54:	d058      	beq.n	2405fe08 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
2405fd56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405fd5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
2405fd5e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
2405fd62:	d033      	beq.n	2405fdcc <HAL_RCCEx_PeriphCLKConfig+0xc70>
2405fd64:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
2405fd68:	d82c      	bhi.n	2405fdc4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
2405fd6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
2405fd6e:	d02f      	beq.n	2405fdd0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
2405fd70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
2405fd74:	d826      	bhi.n	2405fdc4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
2405fd76:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
2405fd7a:	d02b      	beq.n	2405fdd4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
2405fd7c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
2405fd80:	d820      	bhi.n	2405fdc4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
2405fd82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
2405fd86:	d012      	beq.n	2405fdae <HAL_RCCEx_PeriphCLKConfig+0xc52>
2405fd88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
2405fd8c:	d81a      	bhi.n	2405fdc4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
2405fd8e:	2b00      	cmp	r3, #0
2405fd90:	d022      	beq.n	2405fdd8 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
2405fd92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
2405fd96:	d115      	bne.n	2405fdc4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2405fd98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405fd9c:	3308      	adds	r3, #8
2405fd9e:	2100      	movs	r1, #0
2405fda0:	4618      	mov	r0, r3
2405fda2:	f001 fc81 	bl	240616a8 <RCCEx_PLL2_Config>
2405fda6:	4603      	mov	r3, r0
2405fda8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
2405fdac:	e015      	b.n	2405fdda <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2405fdae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405fdb2:	3328      	adds	r3, #40	@ 0x28
2405fdb4:	2102      	movs	r1, #2
2405fdb6:	4618      	mov	r0, r3
2405fdb8:	f001 fd28 	bl	2406180c <RCCEx_PLL3_Config>
2405fdbc:	4603      	mov	r3, r0
2405fdbe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
2405fdc2:	e00a      	b.n	2405fdda <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405fdc4:	2301      	movs	r3, #1
2405fdc6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
2405fdca:	e006      	b.n	2405fdda <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
2405fdcc:	bf00      	nop
2405fdce:	e004      	b.n	2405fdda <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
2405fdd0:	bf00      	nop
2405fdd2:	e002      	b.n	2405fdda <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
2405fdd4:	bf00      	nop
2405fdd6:	e000      	b.n	2405fdda <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
2405fdd8:	bf00      	nop
    }

    if (ret == HAL_OK)
2405fdda:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
2405fdde:	2b00      	cmp	r3, #0
2405fde0:	d10e      	bne.n	2405fe00 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
2405fde2:	4b06      	ldr	r3, [pc, #24]	@ (2405fdfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
2405fde4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
2405fde6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
2405fdea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405fdee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
2405fdf2:	4a02      	ldr	r2, [pc, #8]	@ (2405fdfc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
2405fdf4:	430b      	orrs	r3, r1
2405fdf6:	6593      	str	r3, [r2, #88]	@ 0x58
2405fdf8:	e006      	b.n	2405fe08 <HAL_RCCEx_PeriphCLKConfig+0xcac>
2405fdfa:	bf00      	nop
2405fdfc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
2405fe00:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
2405fe04:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
2405fe08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405fe0c:	e9d3 2300 	ldrd	r2, r3, [r3]
2405fe10:	f002 0380 	and.w	r3, r2, #128	@ 0x80
2405fe14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
2405fe18:	2300      	movs	r3, #0
2405fe1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
2405fe1e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
2405fe22:	460b      	mov	r3, r1
2405fe24:	4313      	orrs	r3, r2
2405fe26:	d055      	beq.n	2405fed4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
2405fe28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405fe2c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
2405fe30:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
2405fe34:	d033      	beq.n	2405fe9e <HAL_RCCEx_PeriphCLKConfig+0xd42>
2405fe36:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
2405fe3a:	d82c      	bhi.n	2405fe96 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
2405fe3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
2405fe40:	d02f      	beq.n	2405fea2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
2405fe42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
2405fe46:	d826      	bhi.n	2405fe96 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
2405fe48:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
2405fe4c:	d02b      	beq.n	2405fea6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
2405fe4e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
2405fe52:	d820      	bhi.n	2405fe96 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
2405fe54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
2405fe58:	d012      	beq.n	2405fe80 <HAL_RCCEx_PeriphCLKConfig+0xd24>
2405fe5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
2405fe5e:	d81a      	bhi.n	2405fe96 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
2405fe60:	2b00      	cmp	r3, #0
2405fe62:	d022      	beq.n	2405feaa <HAL_RCCEx_PeriphCLKConfig+0xd4e>
2405fe64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
2405fe68:	d115      	bne.n	2405fe96 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2405fe6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405fe6e:	3308      	adds	r3, #8
2405fe70:	2100      	movs	r1, #0
2405fe72:	4618      	mov	r0, r3
2405fe74:	f001 fc18 	bl	240616a8 <RCCEx_PLL2_Config>
2405fe78:	4603      	mov	r3, r0
2405fe7a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
2405fe7e:	e015      	b.n	2405feac <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2405fe80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405fe84:	3328      	adds	r3, #40	@ 0x28
2405fe86:	2102      	movs	r1, #2
2405fe88:	4618      	mov	r0, r3
2405fe8a:	f001 fcbf 	bl	2406180c <RCCEx_PLL3_Config>
2405fe8e:	4603      	mov	r3, r0
2405fe90:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
2405fe94:	e00a      	b.n	2405feac <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405fe96:	2301      	movs	r3, #1
2405fe98:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
2405fe9c:	e006      	b.n	2405feac <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
2405fe9e:	bf00      	nop
2405fea0:	e004      	b.n	2405feac <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
2405fea2:	bf00      	nop
2405fea4:	e002      	b.n	2405feac <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
2405fea6:	bf00      	nop
2405fea8:	e000      	b.n	2405feac <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
2405feaa:	bf00      	nop
    }

    if (ret == HAL_OK)
2405feac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
2405feb0:	2b00      	cmp	r3, #0
2405feb2:	d10b      	bne.n	2405fecc <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
2405feb4:	4ba1      	ldr	r3, [pc, #644]	@ (2406013c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405feb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
2405feb8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
2405febc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405fec0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
2405fec4:	4a9d      	ldr	r2, [pc, #628]	@ (2406013c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405fec6:	430b      	orrs	r3, r1
2405fec8:	6593      	str	r3, [r2, #88]	@ 0x58
2405feca:	e003      	b.n	2405fed4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405fecc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
2405fed0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
2405fed4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405fed8:	e9d3 2300 	ldrd	r2, r3, [r3]
2405fedc:	f002 0308 	and.w	r3, r2, #8
2405fee0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
2405fee4:	2300      	movs	r3, #0
2405fee6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
2405feea:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
2405feee:	460b      	mov	r3, r1
2405fef0:	4313      	orrs	r3, r2
2405fef2:	d01e      	beq.n	2405ff32 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
2405fef4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405fef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
2405fefc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
2405ff00:	d10c      	bne.n	2405ff1c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
2405ff02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405ff06:	3328      	adds	r3, #40	@ 0x28
2405ff08:	2102      	movs	r1, #2
2405ff0a:	4618      	mov	r0, r3
2405ff0c:	f001 fc7e 	bl	2406180c <RCCEx_PLL3_Config>
2405ff10:	4603      	mov	r3, r0
2405ff12:	2b00      	cmp	r3, #0
2405ff14:	d002      	beq.n	2405ff1c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
2405ff16:	2301      	movs	r3, #1
2405ff18:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
2405ff1c:	4b87      	ldr	r3, [pc, #540]	@ (2406013c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405ff1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
2405ff20:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
2405ff24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405ff28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
2405ff2c:	4a83      	ldr	r2, [pc, #524]	@ (2406013c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405ff2e:	430b      	orrs	r3, r1
2405ff30:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
2405ff32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405ff36:	e9d3 2300 	ldrd	r2, r3, [r3]
2405ff3a:	f002 0310 	and.w	r3, r2, #16
2405ff3e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
2405ff42:	2300      	movs	r3, #0
2405ff44:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
2405ff48:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
2405ff4c:	460b      	mov	r3, r1
2405ff4e:	4313      	orrs	r3, r2
2405ff50:	d01e      	beq.n	2405ff90 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
2405ff52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405ff56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
2405ff5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
2405ff5e:	d10c      	bne.n	2405ff7a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
2405ff60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405ff64:	3328      	adds	r3, #40	@ 0x28
2405ff66:	2102      	movs	r1, #2
2405ff68:	4618      	mov	r0, r3
2405ff6a:	f001 fc4f 	bl	2406180c <RCCEx_PLL3_Config>
2405ff6e:	4603      	mov	r3, r0
2405ff70:	2b00      	cmp	r3, #0
2405ff72:	d002      	beq.n	2405ff7a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
2405ff74:	2301      	movs	r3, #1
2405ff76:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
2405ff7a:	4b70      	ldr	r3, [pc, #448]	@ (2406013c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405ff7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
2405ff7e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
2405ff82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405ff86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
2405ff8a:	4a6c      	ldr	r2, [pc, #432]	@ (2406013c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405ff8c:	430b      	orrs	r3, r1
2405ff8e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
2405ff90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405ff94:	e9d3 2300 	ldrd	r2, r3, [r3]
2405ff98:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
2405ff9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
2405ffa0:	2300      	movs	r3, #0
2405ffa2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
2405ffa6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
2405ffaa:	460b      	mov	r3, r1
2405ffac:	4313      	orrs	r3, r2
2405ffae:	d03e      	beq.n	2406002e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
2405ffb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405ffb4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
2405ffb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
2405ffbc:	d022      	beq.n	24060004 <HAL_RCCEx_PeriphCLKConfig+0xea8>
2405ffbe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
2405ffc2:	d81b      	bhi.n	2405fffc <HAL_RCCEx_PeriphCLKConfig+0xea0>
2405ffc4:	2b00      	cmp	r3, #0
2405ffc6:	d003      	beq.n	2405ffd0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
2405ffc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
2405ffcc:	d00b      	beq.n	2405ffe6 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
2405ffce:	e015      	b.n	2405fffc <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2405ffd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405ffd4:	3308      	adds	r3, #8
2405ffd6:	2100      	movs	r1, #0
2405ffd8:	4618      	mov	r0, r3
2405ffda:	f001 fb65 	bl	240616a8 <RCCEx_PLL2_Config>
2405ffde:	4603      	mov	r3, r0
2405ffe0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
2405ffe4:	e00f      	b.n	24060006 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2405ffe6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2405ffea:	3328      	adds	r3, #40	@ 0x28
2405ffec:	2102      	movs	r1, #2
2405ffee:	4618      	mov	r0, r3
2405fff0:	f001 fc0c 	bl	2406180c <RCCEx_PLL3_Config>
2405fff4:	4603      	mov	r3, r0
2405fff6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
2405fffa:	e004      	b.n	24060006 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405fffc:	2301      	movs	r3, #1
2405fffe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
24060002:	e000      	b.n	24060006 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
24060004:	bf00      	nop
    }

    if (ret == HAL_OK)
24060006:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
2406000a:	2b00      	cmp	r3, #0
2406000c:	d10b      	bne.n	24060026 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
2406000e:	4b4b      	ldr	r3, [pc, #300]	@ (2406013c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
24060010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
24060012:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
24060016:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2406001a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
2406001e:	4a47      	ldr	r2, [pc, #284]	@ (2406013c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
24060020:	430b      	orrs	r3, r1
24060022:	6593      	str	r3, [r2, #88]	@ 0x58
24060024:	e003      	b.n	2406002e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
24060026:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
2406002a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
2406002e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
24060032:	e9d3 2300 	ldrd	r2, r3, [r3]
24060036:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
2406003a:	67bb      	str	r3, [r7, #120]	@ 0x78
2406003c:	2300      	movs	r3, #0
2406003e:	67fb      	str	r3, [r7, #124]	@ 0x7c
24060040:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
24060044:	460b      	mov	r3, r1
24060046:	4313      	orrs	r3, r2
24060048:	d03b      	beq.n	240600c2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
2406004a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2406004e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
24060052:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
24060056:	d01f      	beq.n	24060098 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
24060058:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
2406005c:	d818      	bhi.n	24060090 <HAL_RCCEx_PeriphCLKConfig+0xf34>
2406005e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
24060062:	d003      	beq.n	2406006c <HAL_RCCEx_PeriphCLKConfig+0xf10>
24060064:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
24060068:	d007      	beq.n	2406007a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
2406006a:	e011      	b.n	24060090 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2406006c:	4b33      	ldr	r3, [pc, #204]	@ (2406013c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2406006e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
24060070:	4a32      	ldr	r2, [pc, #200]	@ (2406013c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
24060072:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
24060076:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
24060078:	e00f      	b.n	2406009a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2406007a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2406007e:	3328      	adds	r3, #40	@ 0x28
24060080:	2101      	movs	r1, #1
24060082:	4618      	mov	r0, r3
24060084:	f001 fbc2 	bl	2406180c <RCCEx_PLL3_Config>
24060088:	4603      	mov	r3, r0
2406008a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
2406008e:	e004      	b.n	2406009a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
24060090:	2301      	movs	r3, #1
24060092:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
24060096:	e000      	b.n	2406009a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
24060098:	bf00      	nop
    }

    if (ret == HAL_OK)
2406009a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
2406009e:	2b00      	cmp	r3, #0
240600a0:	d10b      	bne.n	240600ba <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
240600a2:	4b26      	ldr	r3, [pc, #152]	@ (2406013c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
240600a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
240600a6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
240600aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
240600ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
240600b2:	4a22      	ldr	r2, [pc, #136]	@ (2406013c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
240600b4:	430b      	orrs	r3, r1
240600b6:	6553      	str	r3, [r2, #84]	@ 0x54
240600b8:	e003      	b.n	240600c2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
240600ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
240600be:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
240600c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
240600c6:	e9d3 2300 	ldrd	r2, r3, [r3]
240600ca:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
240600ce:	673b      	str	r3, [r7, #112]	@ 0x70
240600d0:	2300      	movs	r3, #0
240600d2:	677b      	str	r3, [r7, #116]	@ 0x74
240600d4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
240600d8:	460b      	mov	r3, r1
240600da:	4313      	orrs	r3, r2
240600dc:	d034      	beq.n	24060148 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
240600de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
240600e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
240600e4:	2b00      	cmp	r3, #0
240600e6:	d003      	beq.n	240600f0 <HAL_RCCEx_PeriphCLKConfig+0xf94>
240600e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
240600ec:	d007      	beq.n	240600fe <HAL_RCCEx_PeriphCLKConfig+0xfa2>
240600ee:	e011      	b.n	24060114 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240600f0:	4b12      	ldr	r3, [pc, #72]	@ (2406013c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
240600f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
240600f4:	4a11      	ldr	r2, [pc, #68]	@ (2406013c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
240600f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
240600fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
240600fc:	e00e      	b.n	2406011c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
240600fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
24060102:	3308      	adds	r3, #8
24060104:	2102      	movs	r1, #2
24060106:	4618      	mov	r0, r3
24060108:	f001 face 	bl	240616a8 <RCCEx_PLL2_Config>
2406010c:	4603      	mov	r3, r0
2406010e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
24060112:	e003      	b.n	2406011c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
24060114:	2301      	movs	r3, #1
24060116:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
2406011a:	bf00      	nop
    }

    if (ret == HAL_OK)
2406011c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
24060120:	2b00      	cmp	r3, #0
24060122:	d10d      	bne.n	24060140 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
24060124:	4b05      	ldr	r3, [pc, #20]	@ (2406013c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
24060126:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
24060128:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
2406012c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
24060130:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
24060132:	4a02      	ldr	r2, [pc, #8]	@ (2406013c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
24060134:	430b      	orrs	r3, r1
24060136:	64d3      	str	r3, [r2, #76]	@ 0x4c
24060138:	e006      	b.n	24060148 <HAL_RCCEx_PeriphCLKConfig+0xfec>
2406013a:	bf00      	nop
2406013c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
24060140:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
24060144:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
24060148:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2406014c:	e9d3 2300 	ldrd	r2, r3, [r3]
24060150:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
24060154:	66bb      	str	r3, [r7, #104]	@ 0x68
24060156:	2300      	movs	r3, #0
24060158:	66fb      	str	r3, [r7, #108]	@ 0x6c
2406015a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
2406015e:	460b      	mov	r3, r1
24060160:	4313      	orrs	r3, r2
24060162:	d00c      	beq.n	2406017e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
24060164:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
24060168:	3328      	adds	r3, #40	@ 0x28
2406016a:	2102      	movs	r1, #2
2406016c:	4618      	mov	r0, r3
2406016e:	f001 fb4d 	bl	2406180c <RCCEx_PLL3_Config>
24060172:	4603      	mov	r3, r0
24060174:	2b00      	cmp	r3, #0
24060176:	d002      	beq.n	2406017e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
24060178:	2301      	movs	r3, #1
2406017a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
2406017e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
24060182:	e9d3 2300 	ldrd	r2, r3, [r3]
24060186:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
2406018a:	663b      	str	r3, [r7, #96]	@ 0x60
2406018c:	2300      	movs	r3, #0
2406018e:	667b      	str	r3, [r7, #100]	@ 0x64
24060190:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
24060194:	460b      	mov	r3, r1
24060196:	4313      	orrs	r3, r2
24060198:	d038      	beq.n	2406020c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
2406019a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2406019e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
240601a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
240601a6:	d018      	beq.n	240601da <HAL_RCCEx_PeriphCLKConfig+0x107e>
240601a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
240601ac:	d811      	bhi.n	240601d2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
240601ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
240601b2:	d014      	beq.n	240601de <HAL_RCCEx_PeriphCLKConfig+0x1082>
240601b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
240601b8:	d80b      	bhi.n	240601d2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
240601ba:	2b00      	cmp	r3, #0
240601bc:	d011      	beq.n	240601e2 <HAL_RCCEx_PeriphCLKConfig+0x1086>
240601be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
240601c2:	d106      	bne.n	240601d2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240601c4:	4bc3      	ldr	r3, [pc, #780]	@ (240604d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
240601c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
240601c8:	4ac2      	ldr	r2, [pc, #776]	@ (240604d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
240601ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
240601ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
240601d0:	e008      	b.n	240601e4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
240601d2:	2301      	movs	r3, #1
240601d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
240601d8:	e004      	b.n	240601e4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
240601da:	bf00      	nop
240601dc:	e002      	b.n	240601e4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
240601de:	bf00      	nop
240601e0:	e000      	b.n	240601e4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
240601e2:	bf00      	nop
    }

    if (ret == HAL_OK)
240601e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
240601e8:	2b00      	cmp	r3, #0
240601ea:	d10b      	bne.n	24060204 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
240601ec:	4bb9      	ldr	r3, [pc, #740]	@ (240604d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
240601ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
240601f0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
240601f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
240601f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
240601fc:	4ab5      	ldr	r2, [pc, #724]	@ (240604d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
240601fe:	430b      	orrs	r3, r1
24060200:	6553      	str	r3, [r2, #84]	@ 0x54
24060202:	e003      	b.n	2406020c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
24060204:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
24060208:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
2406020c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
24060210:	e9d3 2300 	ldrd	r2, r3, [r3]
24060214:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
24060218:	65bb      	str	r3, [r7, #88]	@ 0x58
2406021a:	2300      	movs	r3, #0
2406021c:	65fb      	str	r3, [r7, #92]	@ 0x5c
2406021e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
24060222:	460b      	mov	r3, r1
24060224:	4313      	orrs	r3, r2
24060226:	d009      	beq.n	2406023c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
24060228:	4baa      	ldr	r3, [pc, #680]	@ (240604d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2406022a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2406022c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
24060230:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
24060234:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
24060236:	4aa7      	ldr	r2, [pc, #668]	@ (240604d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
24060238:	430b      	orrs	r3, r1
2406023a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
2406023c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
24060240:	e9d3 2300 	ldrd	r2, r3, [r3]
24060244:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
24060248:	653b      	str	r3, [r7, #80]	@ 0x50
2406024a:	2300      	movs	r3, #0
2406024c:	657b      	str	r3, [r7, #84]	@ 0x54
2406024e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
24060252:	460b      	mov	r3, r1
24060254:	4313      	orrs	r3, r2
24060256:	d009      	beq.n	2406026c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
24060258:	4b9e      	ldr	r3, [pc, #632]	@ (240604d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2406025a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2406025c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
24060260:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
24060264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
24060266:	4a9b      	ldr	r2, [pc, #620]	@ (240604d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
24060268:	430b      	orrs	r3, r1
2406026a:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
2406026c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
24060270:	e9d3 2300 	ldrd	r2, r3, [r3]
24060274:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
24060278:	64bb      	str	r3, [r7, #72]	@ 0x48
2406027a:	2300      	movs	r3, #0
2406027c:	64fb      	str	r3, [r7, #76]	@ 0x4c
2406027e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
24060282:	460b      	mov	r3, r1
24060284:	4313      	orrs	r3, r2
24060286:	d009      	beq.n	2406029c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
24060288:	4b92      	ldr	r3, [pc, #584]	@ (240604d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2406028a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
2406028c:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
24060290:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
24060294:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
24060296:	4a8f      	ldr	r2, [pc, #572]	@ (240604d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
24060298:	430b      	orrs	r3, r1
2406029a:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
2406029c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
240602a0:	e9d3 2300 	ldrd	r2, r3, [r3]
240602a4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
240602a8:	643b      	str	r3, [r7, #64]	@ 0x40
240602aa:	2300      	movs	r3, #0
240602ac:	647b      	str	r3, [r7, #68]	@ 0x44
240602ae:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
240602b2:	460b      	mov	r3, r1
240602b4:	4313      	orrs	r3, r2
240602b6:	d00e      	beq.n	240602d6 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
240602b8:	4b86      	ldr	r3, [pc, #536]	@ (240604d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
240602ba:	691b      	ldr	r3, [r3, #16]
240602bc:	4a85      	ldr	r2, [pc, #532]	@ (240604d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
240602be:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
240602c2:	6113      	str	r3, [r2, #16]
240602c4:	4b83      	ldr	r3, [pc, #524]	@ (240604d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
240602c6:	6919      	ldr	r1, [r3, #16]
240602c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
240602cc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
240602d0:	4a80      	ldr	r2, [pc, #512]	@ (240604d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
240602d2:	430b      	orrs	r3, r1
240602d4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
240602d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
240602da:	e9d3 2300 	ldrd	r2, r3, [r3]
240602de:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
240602e2:	63bb      	str	r3, [r7, #56]	@ 0x38
240602e4:	2300      	movs	r3, #0
240602e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
240602e8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
240602ec:	460b      	mov	r3, r1
240602ee:	4313      	orrs	r3, r2
240602f0:	d009      	beq.n	24060306 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
240602f2:	4b78      	ldr	r3, [pc, #480]	@ (240604d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
240602f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
240602f6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
240602fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
240602fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24060300:	4a74      	ldr	r2, [pc, #464]	@ (240604d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
24060302:	430b      	orrs	r3, r1
24060304:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
24060306:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2406030a:	e9d3 2300 	ldrd	r2, r3, [r3]
2406030e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
24060312:	633b      	str	r3, [r7, #48]	@ 0x30
24060314:	2300      	movs	r3, #0
24060316:	637b      	str	r3, [r7, #52]	@ 0x34
24060318:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
2406031c:	460b      	mov	r3, r1
2406031e:	4313      	orrs	r3, r2
24060320:	d00a      	beq.n	24060338 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
24060322:	4b6c      	ldr	r3, [pc, #432]	@ (240604d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
24060324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24060326:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
2406032a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2406032e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
24060332:	4a68      	ldr	r2, [pc, #416]	@ (240604d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
24060334:	430b      	orrs	r3, r1
24060336:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
24060338:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2406033c:	e9d3 2300 	ldrd	r2, r3, [r3]
24060340:	2100      	movs	r1, #0
24060342:	62b9      	str	r1, [r7, #40]	@ 0x28
24060344:	f003 0301 	and.w	r3, r3, #1
24060348:	62fb      	str	r3, [r7, #44]	@ 0x2c
2406034a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
2406034e:	460b      	mov	r3, r1
24060350:	4313      	orrs	r3, r2
24060352:	d011      	beq.n	24060378 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24060354:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
24060358:	3308      	adds	r3, #8
2406035a:	2100      	movs	r1, #0
2406035c:	4618      	mov	r0, r3
2406035e:	f001 f9a3 	bl	240616a8 <RCCEx_PLL2_Config>
24060362:	4603      	mov	r3, r0
24060364:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
24060368:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
2406036c:	2b00      	cmp	r3, #0
2406036e:	d003      	beq.n	24060378 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
24060370:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
24060374:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
24060378:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2406037c:	e9d3 2300 	ldrd	r2, r3, [r3]
24060380:	2100      	movs	r1, #0
24060382:	6239      	str	r1, [r7, #32]
24060384:	f003 0302 	and.w	r3, r3, #2
24060388:	627b      	str	r3, [r7, #36]	@ 0x24
2406038a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
2406038e:	460b      	mov	r3, r1
24060390:	4313      	orrs	r3, r2
24060392:	d011      	beq.n	240603b8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24060394:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
24060398:	3308      	adds	r3, #8
2406039a:	2101      	movs	r1, #1
2406039c:	4618      	mov	r0, r3
2406039e:	f001 f983 	bl	240616a8 <RCCEx_PLL2_Config>
240603a2:	4603      	mov	r3, r0
240603a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
240603a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
240603ac:	2b00      	cmp	r3, #0
240603ae:	d003      	beq.n	240603b8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
240603b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
240603b4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
240603b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
240603bc:	e9d3 2300 	ldrd	r2, r3, [r3]
240603c0:	2100      	movs	r1, #0
240603c2:	61b9      	str	r1, [r7, #24]
240603c4:	f003 0304 	and.w	r3, r3, #4
240603c8:	61fb      	str	r3, [r7, #28]
240603ca:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
240603ce:	460b      	mov	r3, r1
240603d0:	4313      	orrs	r3, r2
240603d2:	d011      	beq.n	240603f8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
240603d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
240603d8:	3308      	adds	r3, #8
240603da:	2102      	movs	r1, #2
240603dc:	4618      	mov	r0, r3
240603de:	f001 f963 	bl	240616a8 <RCCEx_PLL2_Config>
240603e2:	4603      	mov	r3, r0
240603e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
240603e8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
240603ec:	2b00      	cmp	r3, #0
240603ee:	d003      	beq.n	240603f8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
240603f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
240603f4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
240603f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
240603fc:	e9d3 2300 	ldrd	r2, r3, [r3]
24060400:	2100      	movs	r1, #0
24060402:	6139      	str	r1, [r7, #16]
24060404:	f003 0308 	and.w	r3, r3, #8
24060408:	617b      	str	r3, [r7, #20]
2406040a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
2406040e:	460b      	mov	r3, r1
24060410:	4313      	orrs	r3, r2
24060412:	d011      	beq.n	24060438 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24060414:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
24060418:	3328      	adds	r3, #40	@ 0x28
2406041a:	2100      	movs	r1, #0
2406041c:	4618      	mov	r0, r3
2406041e:	f001 f9f5 	bl	2406180c <RCCEx_PLL3_Config>
24060422:	4603      	mov	r3, r0
24060424:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
24060428:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
2406042c:	2b00      	cmp	r3, #0
2406042e:	d003      	beq.n	24060438 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
24060430:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
24060434:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
24060438:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2406043c:	e9d3 2300 	ldrd	r2, r3, [r3]
24060440:	2100      	movs	r1, #0
24060442:	60b9      	str	r1, [r7, #8]
24060444:	f003 0310 	and.w	r3, r3, #16
24060448:	60fb      	str	r3, [r7, #12]
2406044a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
2406044e:	460b      	mov	r3, r1
24060450:	4313      	orrs	r3, r2
24060452:	d011      	beq.n	24060478 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24060454:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
24060458:	3328      	adds	r3, #40	@ 0x28
2406045a:	2101      	movs	r1, #1
2406045c:	4618      	mov	r0, r3
2406045e:	f001 f9d5 	bl	2406180c <RCCEx_PLL3_Config>
24060462:	4603      	mov	r3, r0
24060464:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
24060468:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
2406046c:	2b00      	cmp	r3, #0
2406046e:	d003      	beq.n	24060478 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
24060470:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
24060474:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
24060478:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
2406047c:	e9d3 2300 	ldrd	r2, r3, [r3]
24060480:	2100      	movs	r1, #0
24060482:	6039      	str	r1, [r7, #0]
24060484:	f003 0320 	and.w	r3, r3, #32
24060488:	607b      	str	r3, [r7, #4]
2406048a:	e9d7 1200 	ldrd	r1, r2, [r7]
2406048e:	460b      	mov	r3, r1
24060490:	4313      	orrs	r3, r2
24060492:	d011      	beq.n	240604b8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24060494:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
24060498:	3328      	adds	r3, #40	@ 0x28
2406049a:	2102      	movs	r1, #2
2406049c:	4618      	mov	r0, r3
2406049e:	f001 f9b5 	bl	2406180c <RCCEx_PLL3_Config>
240604a2:	4603      	mov	r3, r0
240604a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
240604a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
240604ac:	2b00      	cmp	r3, #0
240604ae:	d003      	beq.n	240604b8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
240604b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
240604b4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
240604b8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
240604bc:	2b00      	cmp	r3, #0
240604be:	d101      	bne.n	240604c4 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
240604c0:	2300      	movs	r3, #0
240604c2:	e000      	b.n	240604c6 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
240604c4:	2301      	movs	r3, #1
}
240604c6:	4618      	mov	r0, r3
240604c8:	f507 7790 	add.w	r7, r7, #288	@ 0x120
240604cc:	46bd      	mov	sp, r7
240604ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
240604d2:	bf00      	nop
240604d4:	58024400 	.word	0x58024400

240604d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
240604d8:	b580      	push	{r7, lr}
240604da:	b090      	sub	sp, #64	@ 0x40
240604dc:	af00      	add	r7, sp, #0
240604de:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
240604e2:	e9d7 2300 	ldrd	r2, r3, [r7]
240604e6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
240604ea:	430b      	orrs	r3, r1
240604ec:	f040 8094 	bne.w	24060618 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
240604f0:	4b97      	ldr	r3, [pc, #604]	@ (24060750 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
240604f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
240604f4:	f003 0307 	and.w	r3, r3, #7
240604f8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
240604fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
240604fc:	2b04      	cmp	r3, #4
240604fe:	f200 8087 	bhi.w	24060610 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
24060502:	a201      	add	r2, pc, #4	@ (adr r2, 24060508 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
24060504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24060508:	2406051d 	.word	0x2406051d
2406050c:	24060545 	.word	0x24060545
24060510:	2406056d 	.word	0x2406056d
24060514:	24060609 	.word	0x24060609
24060518:	24060595 	.word	0x24060595
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
2406051c:	4b8c      	ldr	r3, [pc, #560]	@ (24060750 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2406051e:	681b      	ldr	r3, [r3, #0]
24060520:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
24060524:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
24060528:	d108      	bne.n	2406053c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
2406052a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
2406052e:	4618      	mov	r0, r3
24060530:	f000 ff68 	bl	24061404 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
24060534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
24060536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24060538:	f000 bc97 	b.w	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2406053c:	2300      	movs	r3, #0
2406053e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24060540:	f000 bc93 	b.w	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24060544:	4b82      	ldr	r3, [pc, #520]	@ (24060750 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
24060546:	681b      	ldr	r3, [r3, #0]
24060548:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
2406054c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
24060550:	d108      	bne.n	24060564 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24060552:	f107 0318 	add.w	r3, r7, #24
24060556:	4618      	mov	r0, r3
24060558:	f000 fcac 	bl	24060eb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
2406055c:	69bb      	ldr	r3, [r7, #24]
2406055e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24060560:	f000 bc83 	b.w	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
24060564:	2300      	movs	r3, #0
24060566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24060568:	f000 bc7f 	b.w	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2406056c:	4b78      	ldr	r3, [pc, #480]	@ (24060750 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2406056e:	681b      	ldr	r3, [r3, #0]
24060570:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
24060574:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
24060578:	d108      	bne.n	2406058c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2406057a:	f107 030c 	add.w	r3, r7, #12
2406057e:	4618      	mov	r0, r3
24060580:	f000 fdec 	bl	2406115c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
24060584:	68fb      	ldr	r3, [r7, #12]
24060586:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24060588:	f000 bc6f 	b.w	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2406058c:	2300      	movs	r3, #0
2406058e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24060590:	f000 bc6b 	b.w	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
24060594:	4b6e      	ldr	r3, [pc, #440]	@ (24060750 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
24060596:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
24060598:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
2406059c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
2406059e:	4b6c      	ldr	r3, [pc, #432]	@ (24060750 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
240605a0:	681b      	ldr	r3, [r3, #0]
240605a2:	f003 0304 	and.w	r3, r3, #4
240605a6:	2b04      	cmp	r3, #4
240605a8:	d10c      	bne.n	240605c4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
240605aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
240605ac:	2b00      	cmp	r3, #0
240605ae:	d109      	bne.n	240605c4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240605b0:	4b67      	ldr	r3, [pc, #412]	@ (24060750 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
240605b2:	681b      	ldr	r3, [r3, #0]
240605b4:	08db      	lsrs	r3, r3, #3
240605b6:	f003 0303 	and.w	r3, r3, #3
240605ba:	4a66      	ldr	r2, [pc, #408]	@ (24060754 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
240605bc:	fa22 f303 	lsr.w	r3, r2, r3
240605c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
240605c2:	e01f      	b.n	24060604 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
240605c4:	4b62      	ldr	r3, [pc, #392]	@ (24060750 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
240605c6:	681b      	ldr	r3, [r3, #0]
240605c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
240605cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
240605d0:	d106      	bne.n	240605e0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
240605d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
240605d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
240605d8:	d102      	bne.n	240605e0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
240605da:	4b5f      	ldr	r3, [pc, #380]	@ (24060758 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
240605dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
240605de:	e011      	b.n	24060604 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
240605e0:	4b5b      	ldr	r3, [pc, #364]	@ (24060750 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
240605e2:	681b      	ldr	r3, [r3, #0]
240605e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
240605e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
240605ec:	d106      	bne.n	240605fc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
240605ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
240605f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
240605f4:	d102      	bne.n	240605fc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
240605f6:	4b59      	ldr	r3, [pc, #356]	@ (2406075c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
240605f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
240605fa:	e003      	b.n	24060604 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
240605fc:	2300      	movs	r3, #0
240605fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
24060600:	f000 bc33 	b.w	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
24060604:	f000 bc31 	b.w	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
24060608:	4b55      	ldr	r3, [pc, #340]	@ (24060760 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
2406060a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
2406060c:	f000 bc2d 	b.w	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
24060610:	2300      	movs	r3, #0
24060612:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24060614:	f000 bc29 	b.w	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
24060618:	e9d7 2300 	ldrd	r2, r3, [r7]
2406061c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
24060620:	430b      	orrs	r3, r1
24060622:	f040 809f 	bne.w	24060764 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
24060626:	4b4a      	ldr	r3, [pc, #296]	@ (24060750 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
24060628:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2406062a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
2406062e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
24060630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
24060632:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
24060636:	d04d      	beq.n	240606d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
24060638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
2406063a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
2406063e:	f200 8084 	bhi.w	2406074a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
24060642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
24060644:	2bc0      	cmp	r3, #192	@ 0xc0
24060646:	d07d      	beq.n	24060744 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
24060648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
2406064a:	2bc0      	cmp	r3, #192	@ 0xc0
2406064c:	d87d      	bhi.n	2406074a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
2406064e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
24060650:	2b80      	cmp	r3, #128	@ 0x80
24060652:	d02d      	beq.n	240606b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
24060654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
24060656:	2b80      	cmp	r3, #128	@ 0x80
24060658:	d877      	bhi.n	2406074a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
2406065a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
2406065c:	2b00      	cmp	r3, #0
2406065e:	d003      	beq.n	24060668 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
24060660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
24060662:	2b40      	cmp	r3, #64	@ 0x40
24060664:	d012      	beq.n	2406068c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
24060666:	e070      	b.n	2406074a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
24060668:	4b39      	ldr	r3, [pc, #228]	@ (24060750 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2406066a:	681b      	ldr	r3, [r3, #0]
2406066c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
24060670:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
24060674:	d107      	bne.n	24060686 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
24060676:	f107 0324 	add.w	r3, r7, #36	@ 0x24
2406067a:	4618      	mov	r0, r3
2406067c:	f000 fec2 	bl	24061404 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
24060680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
24060682:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24060684:	e3f1      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
24060686:	2300      	movs	r3, #0
24060688:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
2406068a:	e3ee      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2406068c:	4b30      	ldr	r3, [pc, #192]	@ (24060750 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2406068e:	681b      	ldr	r3, [r3, #0]
24060690:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
24060694:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
24060698:	d107      	bne.n	240606aa <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2406069a:	f107 0318 	add.w	r3, r7, #24
2406069e:	4618      	mov	r0, r3
240606a0:	f000 fc08 	bl	24060eb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
240606a4:	69bb      	ldr	r3, [r7, #24]
240606a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
240606a8:	e3df      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
240606aa:	2300      	movs	r3, #0
240606ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
240606ae:	e3dc      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
240606b0:	4b27      	ldr	r3, [pc, #156]	@ (24060750 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
240606b2:	681b      	ldr	r3, [r3, #0]
240606b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
240606b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
240606bc:	d107      	bne.n	240606ce <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
240606be:	f107 030c 	add.w	r3, r7, #12
240606c2:	4618      	mov	r0, r3
240606c4:	f000 fd4a 	bl	2406115c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
240606c8:	68fb      	ldr	r3, [r7, #12]
240606ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
240606cc:	e3cd      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
240606ce:	2300      	movs	r3, #0
240606d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
240606d2:	e3ca      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
240606d4:	4b1e      	ldr	r3, [pc, #120]	@ (24060750 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
240606d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
240606d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
240606dc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
240606de:	4b1c      	ldr	r3, [pc, #112]	@ (24060750 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
240606e0:	681b      	ldr	r3, [r3, #0]
240606e2:	f003 0304 	and.w	r3, r3, #4
240606e6:	2b04      	cmp	r3, #4
240606e8:	d10c      	bne.n	24060704 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
240606ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
240606ec:	2b00      	cmp	r3, #0
240606ee:	d109      	bne.n	24060704 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240606f0:	4b17      	ldr	r3, [pc, #92]	@ (24060750 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
240606f2:	681b      	ldr	r3, [r3, #0]
240606f4:	08db      	lsrs	r3, r3, #3
240606f6:	f003 0303 	and.w	r3, r3, #3
240606fa:	4a16      	ldr	r2, [pc, #88]	@ (24060754 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
240606fc:	fa22 f303 	lsr.w	r3, r2, r3
24060700:	63fb      	str	r3, [r7, #60]	@ 0x3c
24060702:	e01e      	b.n	24060742 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
24060704:	4b12      	ldr	r3, [pc, #72]	@ (24060750 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
24060706:	681b      	ldr	r3, [r3, #0]
24060708:	f403 7380 	and.w	r3, r3, #256	@ 0x100
2406070c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
24060710:	d106      	bne.n	24060720 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
24060712:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
24060714:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
24060718:	d102      	bne.n	24060720 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
2406071a:	4b0f      	ldr	r3, [pc, #60]	@ (24060758 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
2406071c:	63fb      	str	r3, [r7, #60]	@ 0x3c
2406071e:	e010      	b.n	24060742 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
24060720:	4b0b      	ldr	r3, [pc, #44]	@ (24060750 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
24060722:	681b      	ldr	r3, [r3, #0]
24060724:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
24060728:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
2406072c:	d106      	bne.n	2406073c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
2406072e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
24060730:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
24060734:	d102      	bne.n	2406073c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
24060736:	4b09      	ldr	r3, [pc, #36]	@ (2406075c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
24060738:	63fb      	str	r3, [r7, #60]	@ 0x3c
2406073a:	e002      	b.n	24060742 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
2406073c:	2300      	movs	r3, #0
2406073e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
24060740:	e393      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
24060742:	e392      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
24060744:	4b06      	ldr	r3, [pc, #24]	@ (24060760 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
24060746:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24060748:	e38f      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
2406074a:	2300      	movs	r3, #0
2406074c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
2406074e:	e38c      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
24060750:	58024400 	.word	0x58024400
24060754:	03d09000 	.word	0x03d09000
24060758:	003d0900 	.word	0x003d0900
2406075c:	016e3600 	.word	0x016e3600
24060760:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
24060764:	e9d7 2300 	ldrd	r2, r3, [r7]
24060768:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
2406076c:	430b      	orrs	r3, r1
2406076e:	f040 809c 	bne.w	240608aa <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
24060772:	4b9e      	ldr	r3, [pc, #632]	@ (240609ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
24060774:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
24060776:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
2406077a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
2406077c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
2406077e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
24060782:	d054      	beq.n	2406082e <HAL_RCCEx_GetPeriphCLKFreq+0x356>
24060784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
24060786:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
2406078a:	f200 808b 	bhi.w	240608a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
2406078e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
24060790:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
24060794:	f000 8083 	beq.w	2406089e <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
24060798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
2406079a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
2406079e:	f200 8081 	bhi.w	240608a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
240607a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
240607a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
240607a8:	d02f      	beq.n	2406080a <HAL_RCCEx_GetPeriphCLKFreq+0x332>
240607aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
240607ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
240607b0:	d878      	bhi.n	240608a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
240607b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
240607b4:	2b00      	cmp	r3, #0
240607b6:	d004      	beq.n	240607c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
240607b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
240607ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
240607be:	d012      	beq.n	240607e6 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
240607c0:	e070      	b.n	240608a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
240607c2:	4b8a      	ldr	r3, [pc, #552]	@ (240609ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
240607c4:	681b      	ldr	r3, [r3, #0]
240607c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
240607ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
240607ce:	d107      	bne.n	240607e0 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
240607d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
240607d4:	4618      	mov	r0, r3
240607d6:	f000 fe15 	bl	24061404 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
240607da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
240607dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
240607de:	e344      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
240607e0:	2300      	movs	r3, #0
240607e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
240607e4:	e341      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
240607e6:	4b81      	ldr	r3, [pc, #516]	@ (240609ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
240607e8:	681b      	ldr	r3, [r3, #0]
240607ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
240607ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
240607f2:	d107      	bne.n	24060804 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
240607f4:	f107 0318 	add.w	r3, r7, #24
240607f8:	4618      	mov	r0, r3
240607fa:	f000 fb5b 	bl	24060eb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
240607fe:	69bb      	ldr	r3, [r7, #24]
24060800:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24060802:	e332      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
24060804:	2300      	movs	r3, #0
24060806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24060808:	e32f      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2406080a:	4b78      	ldr	r3, [pc, #480]	@ (240609ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2406080c:	681b      	ldr	r3, [r3, #0]
2406080e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
24060812:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
24060816:	d107      	bne.n	24060828 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24060818:	f107 030c 	add.w	r3, r7, #12
2406081c:	4618      	mov	r0, r3
2406081e:	f000 fc9d 	bl	2406115c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
24060822:	68fb      	ldr	r3, [r7, #12]
24060824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24060826:	e320      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
24060828:	2300      	movs	r3, #0
2406082a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
2406082c:	e31d      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
2406082e:	4b6f      	ldr	r3, [pc, #444]	@ (240609ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
24060830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
24060832:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
24060836:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
24060838:	4b6c      	ldr	r3, [pc, #432]	@ (240609ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2406083a:	681b      	ldr	r3, [r3, #0]
2406083c:	f003 0304 	and.w	r3, r3, #4
24060840:	2b04      	cmp	r3, #4
24060842:	d10c      	bne.n	2406085e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
24060844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
24060846:	2b00      	cmp	r3, #0
24060848:	d109      	bne.n	2406085e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2406084a:	4b68      	ldr	r3, [pc, #416]	@ (240609ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2406084c:	681b      	ldr	r3, [r3, #0]
2406084e:	08db      	lsrs	r3, r3, #3
24060850:	f003 0303 	and.w	r3, r3, #3
24060854:	4a66      	ldr	r2, [pc, #408]	@ (240609f0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
24060856:	fa22 f303 	lsr.w	r3, r2, r3
2406085a:	63fb      	str	r3, [r7, #60]	@ 0x3c
2406085c:	e01e      	b.n	2406089c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
2406085e:	4b63      	ldr	r3, [pc, #396]	@ (240609ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
24060860:	681b      	ldr	r3, [r3, #0]
24060862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
24060866:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
2406086a:	d106      	bne.n	2406087a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
2406086c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
2406086e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
24060872:	d102      	bne.n	2406087a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
24060874:	4b5f      	ldr	r3, [pc, #380]	@ (240609f4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
24060876:	63fb      	str	r3, [r7, #60]	@ 0x3c
24060878:	e010      	b.n	2406089c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
2406087a:	4b5c      	ldr	r3, [pc, #368]	@ (240609ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2406087c:	681b      	ldr	r3, [r3, #0]
2406087e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
24060882:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
24060886:	d106      	bne.n	24060896 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
24060888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
2406088a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
2406088e:	d102      	bne.n	24060896 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
24060890:	4b59      	ldr	r3, [pc, #356]	@ (240609f8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
24060892:	63fb      	str	r3, [r7, #60]	@ 0x3c
24060894:	e002      	b.n	2406089c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
24060896:	2300      	movs	r3, #0
24060898:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
2406089a:	e2e6      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
2406089c:	e2e5      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
2406089e:	4b57      	ldr	r3, [pc, #348]	@ (240609fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
240608a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
240608a2:	e2e2      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
240608a4:	2300      	movs	r3, #0
240608a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
240608a8:	e2df      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
240608aa:	e9d7 2300 	ldrd	r2, r3, [r7]
240608ae:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
240608b2:	430b      	orrs	r3, r1
240608b4:	f040 80a7 	bne.w	24060a06 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
240608b8:	4b4c      	ldr	r3, [pc, #304]	@ (240609ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
240608ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
240608bc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
240608c0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
240608c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
240608c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
240608c8:	d055      	beq.n	24060976 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
240608ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
240608cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
240608d0:	f200 8096 	bhi.w	24060a00 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
240608d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
240608d6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
240608da:	f000 8084 	beq.w	240609e6 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
240608de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
240608e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
240608e4:	f200 808c 	bhi.w	24060a00 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
240608e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
240608ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
240608ee:	d030      	beq.n	24060952 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
240608f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
240608f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
240608f6:	f200 8083 	bhi.w	24060a00 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
240608fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
240608fc:	2b00      	cmp	r3, #0
240608fe:	d004      	beq.n	2406090a <HAL_RCCEx_GetPeriphCLKFreq+0x432>
24060900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24060902:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
24060906:	d012      	beq.n	2406092e <HAL_RCCEx_GetPeriphCLKFreq+0x456>
24060908:	e07a      	b.n	24060a00 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
2406090a:	4b38      	ldr	r3, [pc, #224]	@ (240609ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2406090c:	681b      	ldr	r3, [r3, #0]
2406090e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
24060912:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
24060916:	d107      	bne.n	24060928 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
24060918:	f107 0324 	add.w	r3, r7, #36	@ 0x24
2406091c:	4618      	mov	r0, r3
2406091e:	f000 fd71 	bl	24061404 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
24060922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
24060924:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24060926:	e2a0      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
24060928:	2300      	movs	r3, #0
2406092a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
2406092c:	e29d      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2406092e:	4b2f      	ldr	r3, [pc, #188]	@ (240609ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
24060930:	681b      	ldr	r3, [r3, #0]
24060932:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
24060936:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
2406093a:	d107      	bne.n	2406094c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2406093c:	f107 0318 	add.w	r3, r7, #24
24060940:	4618      	mov	r0, r3
24060942:	f000 fab7 	bl	24060eb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
24060946:	69bb      	ldr	r3, [r7, #24]
24060948:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2406094a:	e28e      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2406094c:	2300      	movs	r3, #0
2406094e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24060950:	e28b      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24060952:	4b26      	ldr	r3, [pc, #152]	@ (240609ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
24060954:	681b      	ldr	r3, [r3, #0]
24060956:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
2406095a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
2406095e:	d107      	bne.n	24060970 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24060960:	f107 030c 	add.w	r3, r7, #12
24060964:	4618      	mov	r0, r3
24060966:	f000 fbf9 	bl	2406115c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
2406096a:	68fb      	ldr	r3, [r7, #12]
2406096c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2406096e:	e27c      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
24060970:	2300      	movs	r3, #0
24060972:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24060974:	e279      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
24060976:	4b1d      	ldr	r3, [pc, #116]	@ (240609ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
24060978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2406097a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
2406097e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
24060980:	4b1a      	ldr	r3, [pc, #104]	@ (240609ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
24060982:	681b      	ldr	r3, [r3, #0]
24060984:	f003 0304 	and.w	r3, r3, #4
24060988:	2b04      	cmp	r3, #4
2406098a:	d10c      	bne.n	240609a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
2406098c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
2406098e:	2b00      	cmp	r3, #0
24060990:	d109      	bne.n	240609a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24060992:	4b16      	ldr	r3, [pc, #88]	@ (240609ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
24060994:	681b      	ldr	r3, [r3, #0]
24060996:	08db      	lsrs	r3, r3, #3
24060998:	f003 0303 	and.w	r3, r3, #3
2406099c:	4a14      	ldr	r2, [pc, #80]	@ (240609f0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
2406099e:	fa22 f303 	lsr.w	r3, r2, r3
240609a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
240609a4:	e01e      	b.n	240609e4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
240609a6:	4b11      	ldr	r3, [pc, #68]	@ (240609ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
240609a8:	681b      	ldr	r3, [r3, #0]
240609aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
240609ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
240609b2:	d106      	bne.n	240609c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
240609b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
240609b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
240609ba:	d102      	bne.n	240609c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
240609bc:	4b0d      	ldr	r3, [pc, #52]	@ (240609f4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
240609be:	63fb      	str	r3, [r7, #60]	@ 0x3c
240609c0:	e010      	b.n	240609e4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
240609c2:	4b0a      	ldr	r3, [pc, #40]	@ (240609ec <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
240609c4:	681b      	ldr	r3, [r3, #0]
240609c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
240609ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
240609ce:	d106      	bne.n	240609de <HAL_RCCEx_GetPeriphCLKFreq+0x506>
240609d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
240609d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
240609d6:	d102      	bne.n	240609de <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
240609d8:	4b07      	ldr	r3, [pc, #28]	@ (240609f8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
240609da:	63fb      	str	r3, [r7, #60]	@ 0x3c
240609dc:	e002      	b.n	240609e4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
240609de:	2300      	movs	r3, #0
240609e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
240609e2:	e242      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
240609e4:	e241      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
240609e6:	4b05      	ldr	r3, [pc, #20]	@ (240609fc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
240609e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
240609ea:	e23e      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
240609ec:	58024400 	.word	0x58024400
240609f0:	03d09000 	.word	0x03d09000
240609f4:	003d0900 	.word	0x003d0900
240609f8:	016e3600 	.word	0x016e3600
240609fc:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
24060a00:	2300      	movs	r3, #0
24060a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24060a04:	e231      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
24060a06:	e9d7 2300 	ldrd	r2, r3, [r7]
24060a0a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
24060a0e:	430b      	orrs	r3, r1
24060a10:	f040 8085 	bne.w	24060b1e <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
24060a14:	4b9c      	ldr	r3, [pc, #624]	@ (24060c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
24060a16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
24060a18:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
24060a1c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
24060a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24060a20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
24060a24:	d06b      	beq.n	24060afe <HAL_RCCEx_GetPeriphCLKFreq+0x626>
24060a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24060a28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
24060a2c:	d874      	bhi.n	24060b18 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
24060a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24060a30:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
24060a34:	d056      	beq.n	24060ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
24060a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24060a38:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
24060a3c:	d86c      	bhi.n	24060b18 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
24060a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24060a40:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
24060a44:	d03b      	beq.n	24060abe <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
24060a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24060a48:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
24060a4c:	d864      	bhi.n	24060b18 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
24060a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24060a50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
24060a54:	d021      	beq.n	24060a9a <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
24060a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24060a58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
24060a5c:	d85c      	bhi.n	24060b18 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
24060a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24060a60:	2b00      	cmp	r3, #0
24060a62:	d004      	beq.n	24060a6e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
24060a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24060a66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
24060a6a:	d004      	beq.n	24060a76 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
24060a6c:	e054      	b.n	24060b18 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
24060a6e:	f7fe fb5f 	bl	2405f130 <HAL_RCC_GetPCLK1Freq>
24060a72:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
24060a74:	e1f9      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24060a76:	4b84      	ldr	r3, [pc, #528]	@ (24060c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
24060a78:	681b      	ldr	r3, [r3, #0]
24060a7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
24060a7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
24060a82:	d107      	bne.n	24060a94 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24060a84:	f107 0318 	add.w	r3, r7, #24
24060a88:	4618      	mov	r0, r3
24060a8a:	f000 fa13 	bl	24060eb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
24060a8e:	69fb      	ldr	r3, [r7, #28]
24060a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24060a92:	e1ea      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
24060a94:	2300      	movs	r3, #0
24060a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24060a98:	e1e7      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24060a9a:	4b7b      	ldr	r3, [pc, #492]	@ (24060c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
24060a9c:	681b      	ldr	r3, [r3, #0]
24060a9e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
24060aa2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
24060aa6:	d107      	bne.n	24060ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24060aa8:	f107 030c 	add.w	r3, r7, #12
24060aac:	4618      	mov	r0, r3
24060aae:	f000 fb55 	bl	2406115c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
24060ab2:	693b      	ldr	r3, [r7, #16]
24060ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24060ab6:	e1d8      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
24060ab8:	2300      	movs	r3, #0
24060aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24060abc:	e1d5      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
24060abe:	4b72      	ldr	r3, [pc, #456]	@ (24060c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
24060ac0:	681b      	ldr	r3, [r3, #0]
24060ac2:	f003 0304 	and.w	r3, r3, #4
24060ac6:	2b04      	cmp	r3, #4
24060ac8:	d109      	bne.n	24060ade <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24060aca:	4b6f      	ldr	r3, [pc, #444]	@ (24060c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
24060acc:	681b      	ldr	r3, [r3, #0]
24060ace:	08db      	lsrs	r3, r3, #3
24060ad0:	f003 0303 	and.w	r3, r3, #3
24060ad4:	4a6d      	ldr	r2, [pc, #436]	@ (24060c8c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
24060ad6:	fa22 f303 	lsr.w	r3, r2, r3
24060ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24060adc:	e1c5      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
24060ade:	2300      	movs	r3, #0
24060ae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24060ae2:	e1c2      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
24060ae4:	4b68      	ldr	r3, [pc, #416]	@ (24060c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
24060ae6:	681b      	ldr	r3, [r3, #0]
24060ae8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
24060aec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
24060af0:	d102      	bne.n	24060af8 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
24060af2:	4b67      	ldr	r3, [pc, #412]	@ (24060c90 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
24060af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24060af6:	e1b8      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
24060af8:	2300      	movs	r3, #0
24060afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24060afc:	e1b5      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
24060afe:	4b62      	ldr	r3, [pc, #392]	@ (24060c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
24060b00:	681b      	ldr	r3, [r3, #0]
24060b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
24060b06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
24060b0a:	d102      	bne.n	24060b12 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
24060b0c:	4b61      	ldr	r3, [pc, #388]	@ (24060c94 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
24060b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24060b10:	e1ab      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
24060b12:	2300      	movs	r3, #0
24060b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24060b16:	e1a8      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
24060b18:	2300      	movs	r3, #0
24060b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24060b1c:	e1a5      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
24060b1e:	e9d7 2300 	ldrd	r2, r3, [r7]
24060b22:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
24060b26:	430b      	orrs	r3, r1
24060b28:	d173      	bne.n	24060c12 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
24060b2a:	4b57      	ldr	r3, [pc, #348]	@ (24060c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
24060b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
24060b2e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
24060b32:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
24060b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24060b36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
24060b3a:	d02f      	beq.n	24060b9c <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
24060b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24060b3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
24060b42:	d863      	bhi.n	24060c0c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
24060b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24060b46:	2b00      	cmp	r3, #0
24060b48:	d004      	beq.n	24060b54 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
24060b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24060b4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
24060b50:	d012      	beq.n	24060b78 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
24060b52:	e05b      	b.n	24060c0c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24060b54:	4b4c      	ldr	r3, [pc, #304]	@ (24060c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
24060b56:	681b      	ldr	r3, [r3, #0]
24060b58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
24060b5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
24060b60:	d107      	bne.n	24060b72 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24060b62:	f107 0318 	add.w	r3, r7, #24
24060b66:	4618      	mov	r0, r3
24060b68:	f000 f9a4 	bl	24060eb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
24060b6c:	69bb      	ldr	r3, [r7, #24]
24060b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24060b70:	e17b      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
24060b72:	2300      	movs	r3, #0
24060b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24060b76:	e178      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24060b78:	4b43      	ldr	r3, [pc, #268]	@ (24060c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
24060b7a:	681b      	ldr	r3, [r3, #0]
24060b7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
24060b80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
24060b84:	d107      	bne.n	24060b96 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24060b86:	f107 030c 	add.w	r3, r7, #12
24060b8a:	4618      	mov	r0, r3
24060b8c:	f000 fae6 	bl	2406115c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
24060b90:	697b      	ldr	r3, [r7, #20]
24060b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24060b94:	e169      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
24060b96:	2300      	movs	r3, #0
24060b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24060b9a:	e166      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
24060b9c:	4b3a      	ldr	r3, [pc, #232]	@ (24060c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
24060b9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
24060ba0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
24060ba4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
24060ba6:	4b38      	ldr	r3, [pc, #224]	@ (24060c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
24060ba8:	681b      	ldr	r3, [r3, #0]
24060baa:	f003 0304 	and.w	r3, r3, #4
24060bae:	2b04      	cmp	r3, #4
24060bb0:	d10c      	bne.n	24060bcc <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
24060bb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
24060bb4:	2b00      	cmp	r3, #0
24060bb6:	d109      	bne.n	24060bcc <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24060bb8:	4b33      	ldr	r3, [pc, #204]	@ (24060c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
24060bba:	681b      	ldr	r3, [r3, #0]
24060bbc:	08db      	lsrs	r3, r3, #3
24060bbe:	f003 0303 	and.w	r3, r3, #3
24060bc2:	4a32      	ldr	r2, [pc, #200]	@ (24060c8c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
24060bc4:	fa22 f303 	lsr.w	r3, r2, r3
24060bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
24060bca:	e01e      	b.n	24060c0a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
24060bcc:	4b2e      	ldr	r3, [pc, #184]	@ (24060c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
24060bce:	681b      	ldr	r3, [r3, #0]
24060bd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
24060bd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
24060bd8:	d106      	bne.n	24060be8 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
24060bda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
24060bdc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
24060be0:	d102      	bne.n	24060be8 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
24060be2:	4b2b      	ldr	r3, [pc, #172]	@ (24060c90 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
24060be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
24060be6:	e010      	b.n	24060c0a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
24060be8:	4b27      	ldr	r3, [pc, #156]	@ (24060c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
24060bea:	681b      	ldr	r3, [r3, #0]
24060bec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
24060bf0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
24060bf4:	d106      	bne.n	24060c04 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
24060bf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
24060bf8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
24060bfc:	d102      	bne.n	24060c04 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
24060bfe:	4b25      	ldr	r3, [pc, #148]	@ (24060c94 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
24060c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
24060c02:	e002      	b.n	24060c0a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
24060c04:	2300      	movs	r3, #0
24060c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
24060c08:	e12f      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
24060c0a:	e12e      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
24060c0c:	2300      	movs	r3, #0
24060c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24060c10:	e12b      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
24060c12:	e9d7 2300 	ldrd	r2, r3, [r7]
24060c16:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
24060c1a:	430b      	orrs	r3, r1
24060c1c:	d13c      	bne.n	24060c98 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
24060c1e:	4b1a      	ldr	r3, [pc, #104]	@ (24060c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
24060c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
24060c22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
24060c26:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
24060c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24060c2a:	2b00      	cmp	r3, #0
24060c2c:	d004      	beq.n	24060c38 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
24060c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24060c30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
24060c34:	d012      	beq.n	24060c5c <HAL_RCCEx_GetPeriphCLKFreq+0x784>
24060c36:	e023      	b.n	24060c80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
24060c38:	4b13      	ldr	r3, [pc, #76]	@ (24060c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
24060c3a:	681b      	ldr	r3, [r3, #0]
24060c3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
24060c40:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
24060c44:	d107      	bne.n	24060c56 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
24060c46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
24060c4a:	4618      	mov	r0, r3
24060c4c:	f000 fbda 	bl	24061404 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
24060c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
24060c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24060c54:	e109      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
24060c56:	2300      	movs	r3, #0
24060c58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24060c5a:	e106      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24060c5c:	4b0a      	ldr	r3, [pc, #40]	@ (24060c88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
24060c5e:	681b      	ldr	r3, [r3, #0]
24060c60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
24060c64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
24060c68:	d107      	bne.n	24060c7a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24060c6a:	f107 0318 	add.w	r3, r7, #24
24060c6e:	4618      	mov	r0, r3
24060c70:	f000 f920 	bl	24060eb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
24060c74:	6a3b      	ldr	r3, [r7, #32]
24060c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24060c78:	e0f7      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
24060c7a:	2300      	movs	r3, #0
24060c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24060c7e:	e0f4      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
24060c80:	2300      	movs	r3, #0
24060c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24060c84:	e0f1      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
24060c86:	bf00      	nop
24060c88:	58024400 	.word	0x58024400
24060c8c:	03d09000 	.word	0x03d09000
24060c90:	003d0900 	.word	0x003d0900
24060c94:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
24060c98:	e9d7 2300 	ldrd	r2, r3, [r7]
24060c9c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
24060ca0:	430b      	orrs	r3, r1
24060ca2:	f040 8091 	bne.w	24060dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
24060ca6:	4b73      	ldr	r3, [pc, #460]	@ (24060e74 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
24060ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
24060caa:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
24060cae:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
24060cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24060cb2:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
24060cb6:	f000 8081 	beq.w	24060dbc <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
24060cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24060cbc:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
24060cc0:	d87f      	bhi.n	24060dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
24060cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24060cc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
24060cc8:	d06b      	beq.n	24060da2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
24060cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24060ccc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
24060cd0:	d877      	bhi.n	24060dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
24060cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24060cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
24060cd8:	d056      	beq.n	24060d88 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
24060cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24060cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
24060ce0:	d86f      	bhi.n	24060dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
24060ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24060ce4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
24060ce8:	d03b      	beq.n	24060d62 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
24060cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24060cec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
24060cf0:	d867      	bhi.n	24060dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
24060cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24060cf4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
24060cf8:	d021      	beq.n	24060d3e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
24060cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24060cfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
24060d00:	d85f      	bhi.n	24060dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
24060d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24060d04:	2b00      	cmp	r3, #0
24060d06:	d004      	beq.n	24060d12 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
24060d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24060d0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
24060d0e:	d004      	beq.n	24060d1a <HAL_RCCEx_GetPeriphCLKFreq+0x842>
24060d10:	e057      	b.n	24060dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
24060d12:	f000 f8b9 	bl	24060e88 <HAL_RCCEx_GetD3PCLK1Freq>
24060d16:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
24060d18:	e0a7      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24060d1a:	4b56      	ldr	r3, [pc, #344]	@ (24060e74 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
24060d1c:	681b      	ldr	r3, [r3, #0]
24060d1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
24060d22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
24060d26:	d107      	bne.n	24060d38 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24060d28:	f107 0318 	add.w	r3, r7, #24
24060d2c:	4618      	mov	r0, r3
24060d2e:	f000 f8c1 	bl	24060eb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
24060d32:	69fb      	ldr	r3, [r7, #28]
24060d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24060d36:	e098      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
24060d38:	2300      	movs	r3, #0
24060d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24060d3c:	e095      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24060d3e:	4b4d      	ldr	r3, [pc, #308]	@ (24060e74 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
24060d40:	681b      	ldr	r3, [r3, #0]
24060d42:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
24060d46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
24060d4a:	d107      	bne.n	24060d5c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24060d4c:	f107 030c 	add.w	r3, r7, #12
24060d50:	4618      	mov	r0, r3
24060d52:	f000 fa03 	bl	2406115c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
24060d56:	693b      	ldr	r3, [r7, #16]
24060d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24060d5a:	e086      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
24060d5c:	2300      	movs	r3, #0
24060d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24060d60:	e083      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
24060d62:	4b44      	ldr	r3, [pc, #272]	@ (24060e74 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
24060d64:	681b      	ldr	r3, [r3, #0]
24060d66:	f003 0304 	and.w	r3, r3, #4
24060d6a:	2b04      	cmp	r3, #4
24060d6c:	d109      	bne.n	24060d82 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24060d6e:	4b41      	ldr	r3, [pc, #260]	@ (24060e74 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
24060d70:	681b      	ldr	r3, [r3, #0]
24060d72:	08db      	lsrs	r3, r3, #3
24060d74:	f003 0303 	and.w	r3, r3, #3
24060d78:	4a3f      	ldr	r2, [pc, #252]	@ (24060e78 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
24060d7a:	fa22 f303 	lsr.w	r3, r2, r3
24060d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24060d80:	e073      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
24060d82:	2300      	movs	r3, #0
24060d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24060d86:	e070      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
24060d88:	4b3a      	ldr	r3, [pc, #232]	@ (24060e74 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
24060d8a:	681b      	ldr	r3, [r3, #0]
24060d8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
24060d90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
24060d94:	d102      	bne.n	24060d9c <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
24060d96:	4b39      	ldr	r3, [pc, #228]	@ (24060e7c <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
24060d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24060d9a:	e066      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
24060d9c:	2300      	movs	r3, #0
24060d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24060da0:	e063      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
24060da2:	4b34      	ldr	r3, [pc, #208]	@ (24060e74 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
24060da4:	681b      	ldr	r3, [r3, #0]
24060da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
24060daa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
24060dae:	d102      	bne.n	24060db6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
24060db0:	4b33      	ldr	r3, [pc, #204]	@ (24060e80 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
24060db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24060db4:	e059      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
24060db6:	2300      	movs	r3, #0
24060db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24060dba:	e056      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
24060dbc:	4b31      	ldr	r3, [pc, #196]	@ (24060e84 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
24060dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24060dc0:	e053      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
24060dc2:	2300      	movs	r3, #0
24060dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24060dc6:	e050      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
24060dc8:	e9d7 2300 	ldrd	r2, r3, [r7]
24060dcc:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
24060dd0:	430b      	orrs	r3, r1
24060dd2:	d148      	bne.n	24060e66 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
24060dd4:	4b27      	ldr	r3, [pc, #156]	@ (24060e74 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
24060dd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
24060dd8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
24060ddc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
24060dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24060de0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
24060de4:	d02a      	beq.n	24060e3c <HAL_RCCEx_GetPeriphCLKFreq+0x964>
24060de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24060de8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
24060dec:	d838      	bhi.n	24060e60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
24060dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24060df0:	2b00      	cmp	r3, #0
24060df2:	d004      	beq.n	24060dfe <HAL_RCCEx_GetPeriphCLKFreq+0x926>
24060df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
24060df6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
24060dfa:	d00d      	beq.n	24060e18 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
24060dfc:	e030      	b.n	24060e60 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
24060dfe:	4b1d      	ldr	r3, [pc, #116]	@ (24060e74 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
24060e00:	681b      	ldr	r3, [r3, #0]
24060e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
24060e06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
24060e0a:	d102      	bne.n	24060e12 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
24060e0c:	4b1c      	ldr	r3, [pc, #112]	@ (24060e80 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
24060e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24060e10:	e02b      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
24060e12:	2300      	movs	r3, #0
24060e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24060e16:	e028      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
24060e18:	4b16      	ldr	r3, [pc, #88]	@ (24060e74 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
24060e1a:	681b      	ldr	r3, [r3, #0]
24060e1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
24060e20:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
24060e24:	d107      	bne.n	24060e36 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
24060e26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
24060e2a:	4618      	mov	r0, r3
24060e2c:	f000 faea 	bl	24061404 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
24060e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
24060e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24060e34:	e019      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
24060e36:	2300      	movs	r3, #0
24060e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24060e3a:	e016      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24060e3c:	4b0d      	ldr	r3, [pc, #52]	@ (24060e74 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
24060e3e:	681b      	ldr	r3, [r3, #0]
24060e40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
24060e44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
24060e48:	d107      	bne.n	24060e5a <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24060e4a:	f107 0318 	add.w	r3, r7, #24
24060e4e:	4618      	mov	r0, r3
24060e50:	f000 f830 	bl	24060eb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
24060e54:	69fb      	ldr	r3, [r7, #28]
24060e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
24060e58:	e007      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
24060e5a:	2300      	movs	r3, #0
24060e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24060e5e:	e004      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
24060e60:	2300      	movs	r3, #0
24060e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
24060e64:	e001      	b.n	24060e6a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
24060e66:	2300      	movs	r3, #0
24060e68:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
24060e6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
24060e6c:	4618      	mov	r0, r3
24060e6e:	3740      	adds	r7, #64	@ 0x40
24060e70:	46bd      	mov	sp, r7
24060e72:	bd80      	pop	{r7, pc}
24060e74:	58024400 	.word	0x58024400
24060e78:	03d09000 	.word	0x03d09000
24060e7c:	003d0900 	.word	0x003d0900
24060e80:	016e3600 	.word	0x016e3600
24060e84:	00bb8000 	.word	0x00bb8000

24060e88 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
24060e88:	b580      	push	{r7, lr}
24060e8a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
24060e8c:	f7fe f920 	bl	2405f0d0 <HAL_RCC_GetHCLKFreq>
24060e90:	4602      	mov	r2, r0
24060e92:	4b06      	ldr	r3, [pc, #24]	@ (24060eac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
24060e94:	6a1b      	ldr	r3, [r3, #32]
24060e96:	091b      	lsrs	r3, r3, #4
24060e98:	f003 0307 	and.w	r3, r3, #7
24060e9c:	4904      	ldr	r1, [pc, #16]	@ (24060eb0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
24060e9e:	5ccb      	ldrb	r3, [r1, r3]
24060ea0:	f003 031f 	and.w	r3, r3, #31
24060ea4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
24060ea8:	4618      	mov	r0, r3
24060eaa:	bd80      	pop	{r7, pc}
24060eac:	58024400 	.word	0x58024400
24060eb0:	24069a58 	.word	0x24069a58

24060eb4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
24060eb4:	b480      	push	{r7}
24060eb6:	b089      	sub	sp, #36	@ 0x24
24060eb8:	af00      	add	r7, sp, #0
24060eba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24060ebc:	4ba1      	ldr	r3, [pc, #644]	@ (24061144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24060ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
24060ec0:	f003 0303 	and.w	r3, r3, #3
24060ec4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
24060ec6:	4b9f      	ldr	r3, [pc, #636]	@ (24061144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24060ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
24060eca:	0b1b      	lsrs	r3, r3, #12
24060ecc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
24060ed0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
24060ed2:	4b9c      	ldr	r3, [pc, #624]	@ (24061144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24060ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
24060ed6:	091b      	lsrs	r3, r3, #4
24060ed8:	f003 0301 	and.w	r3, r3, #1
24060edc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
24060ede:	4b99      	ldr	r3, [pc, #612]	@ (24061144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24060ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
24060ee2:	08db      	lsrs	r3, r3, #3
24060ee4:	f3c3 030c 	ubfx	r3, r3, #0, #13
24060ee8:	693a      	ldr	r2, [r7, #16]
24060eea:	fb02 f303 	mul.w	r3, r2, r3
24060eee:	ee07 3a90 	vmov	s15, r3
24060ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
24060ef6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
24060efa:	697b      	ldr	r3, [r7, #20]
24060efc:	2b00      	cmp	r3, #0
24060efe:	f000 8111 	beq.w	24061124 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
24060f02:	69bb      	ldr	r3, [r7, #24]
24060f04:	2b02      	cmp	r3, #2
24060f06:	f000 8083 	beq.w	24061010 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
24060f0a:	69bb      	ldr	r3, [r7, #24]
24060f0c:	2b02      	cmp	r3, #2
24060f0e:	f200 80a1 	bhi.w	24061054 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
24060f12:	69bb      	ldr	r3, [r7, #24]
24060f14:	2b00      	cmp	r3, #0
24060f16:	d003      	beq.n	24060f20 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
24060f18:	69bb      	ldr	r3, [r7, #24]
24060f1a:	2b01      	cmp	r3, #1
24060f1c:	d056      	beq.n	24060fcc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
24060f1e:	e099      	b.n	24061054 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24060f20:	4b88      	ldr	r3, [pc, #544]	@ (24061144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24060f22:	681b      	ldr	r3, [r3, #0]
24060f24:	f003 0320 	and.w	r3, r3, #32
24060f28:	2b00      	cmp	r3, #0
24060f2a:	d02d      	beq.n	24060f88 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24060f2c:	4b85      	ldr	r3, [pc, #532]	@ (24061144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24060f2e:	681b      	ldr	r3, [r3, #0]
24060f30:	08db      	lsrs	r3, r3, #3
24060f32:	f003 0303 	and.w	r3, r3, #3
24060f36:	4a84      	ldr	r2, [pc, #528]	@ (24061148 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
24060f38:	fa22 f303 	lsr.w	r3, r2, r3
24060f3c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24060f3e:	68bb      	ldr	r3, [r7, #8]
24060f40:	ee07 3a90 	vmov	s15, r3
24060f44:	eef8 6a67 	vcvt.f32.u32	s13, s15
24060f48:	697b      	ldr	r3, [r7, #20]
24060f4a:	ee07 3a90 	vmov	s15, r3
24060f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
24060f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24060f56:	4b7b      	ldr	r3, [pc, #492]	@ (24061144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24060f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
24060f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
24060f5e:	ee07 3a90 	vmov	s15, r3
24060f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
24060f66:	ed97 6a03 	vldr	s12, [r7, #12]
24060f6a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 2406114c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
24060f6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
24060f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
24060f76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
24060f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
24060f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
24060f82:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
24060f86:	e087      	b.n	24061098 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24060f88:	697b      	ldr	r3, [r7, #20]
24060f8a:	ee07 3a90 	vmov	s15, r3
24060f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
24060f92:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 24061150 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
24060f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24060f9a:	4b6a      	ldr	r3, [pc, #424]	@ (24061144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24060f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
24060f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
24060fa2:	ee07 3a90 	vmov	s15, r3
24060fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
24060faa:	ed97 6a03 	vldr	s12, [r7, #12]
24060fae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 2406114c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
24060fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
24060fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
24060fba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
24060fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
24060fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
24060fc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
24060fca:	e065      	b.n	24061098 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24060fcc:	697b      	ldr	r3, [r7, #20]
24060fce:	ee07 3a90 	vmov	s15, r3
24060fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
24060fd6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 24061154 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
24060fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24060fde:	4b59      	ldr	r3, [pc, #356]	@ (24061144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24060fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
24060fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
24060fe6:	ee07 3a90 	vmov	s15, r3
24060fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
24060fee:	ed97 6a03 	vldr	s12, [r7, #12]
24060ff2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 2406114c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
24060ff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
24060ffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
24060ffe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
24061002:	ee77 7aa6 	vadd.f32	s15, s15, s13
24061006:	ee67 7a27 	vmul.f32	s15, s14, s15
2406100a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2406100e:	e043      	b.n	24061098 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24061010:	697b      	ldr	r3, [r7, #20]
24061012:	ee07 3a90 	vmov	s15, r3
24061016:	eef8 7a67 	vcvt.f32.u32	s15, s15
2406101a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 24061158 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
2406101e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24061022:	4b48      	ldr	r3, [pc, #288]	@ (24061144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24061024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
24061026:	f3c3 0308 	ubfx	r3, r3, #0, #9
2406102a:	ee07 3a90 	vmov	s15, r3
2406102e:	eef8 6a67 	vcvt.f32.u32	s13, s15
24061032:	ed97 6a03 	vldr	s12, [r7, #12]
24061036:	eddf 5a45 	vldr	s11, [pc, #276]	@ 2406114c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
2406103a:	eec6 7a25 	vdiv.f32	s15, s12, s11
2406103e:	ee76 7aa7 	vadd.f32	s15, s13, s15
24061042:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
24061046:	ee77 7aa6 	vadd.f32	s15, s15, s13
2406104a:	ee67 7a27 	vmul.f32	s15, s14, s15
2406104e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
24061052:	e021      	b.n	24061098 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24061054:	697b      	ldr	r3, [r7, #20]
24061056:	ee07 3a90 	vmov	s15, r3
2406105a:	eef8 7a67 	vcvt.f32.u32	s15, s15
2406105e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 24061154 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
24061062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24061066:	4b37      	ldr	r3, [pc, #220]	@ (24061144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
24061068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2406106a:	f3c3 0308 	ubfx	r3, r3, #0, #9
2406106e:	ee07 3a90 	vmov	s15, r3
24061072:	eef8 6a67 	vcvt.f32.u32	s13, s15
24061076:	ed97 6a03 	vldr	s12, [r7, #12]
2406107a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 2406114c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
2406107e:	eec6 7a25 	vdiv.f32	s15, s12, s11
24061082:	ee76 7aa7 	vadd.f32	s15, s13, s15
24061086:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
2406108a:	ee77 7aa6 	vadd.f32	s15, s15, s13
2406108e:	ee67 7a27 	vmul.f32	s15, s14, s15
24061092:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
24061096:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
24061098:	4b2a      	ldr	r3, [pc, #168]	@ (24061144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2406109a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
2406109c:	0a5b      	lsrs	r3, r3, #9
2406109e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
240610a2:	ee07 3a90 	vmov	s15, r3
240610a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
240610aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
240610ae:	ee37 7a87 	vadd.f32	s14, s15, s14
240610b2:	edd7 6a07 	vldr	s13, [r7, #28]
240610b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
240610ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
240610be:	ee17 2a90 	vmov	r2, s15
240610c2:	687b      	ldr	r3, [r7, #4]
240610c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
240610c6:	4b1f      	ldr	r3, [pc, #124]	@ (24061144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
240610c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
240610ca:	0c1b      	lsrs	r3, r3, #16
240610cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
240610d0:	ee07 3a90 	vmov	s15, r3
240610d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
240610d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
240610dc:	ee37 7a87 	vadd.f32	s14, s15, s14
240610e0:	edd7 6a07 	vldr	s13, [r7, #28]
240610e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
240610e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
240610ec:	ee17 2a90 	vmov	r2, s15
240610f0:	687b      	ldr	r3, [r7, #4]
240610f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
240610f4:	4b13      	ldr	r3, [pc, #76]	@ (24061144 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
240610f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
240610f8:	0e1b      	lsrs	r3, r3, #24
240610fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
240610fe:	ee07 3a90 	vmov	s15, r3
24061102:	eef8 7a67 	vcvt.f32.u32	s15, s15
24061106:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
2406110a:	ee37 7a87 	vadd.f32	s14, s15, s14
2406110e:	edd7 6a07 	vldr	s13, [r7, #28]
24061112:	eec6 7a87 	vdiv.f32	s15, s13, s14
24061116:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2406111a:	ee17 2a90 	vmov	r2, s15
2406111e:	687b      	ldr	r3, [r7, #4]
24061120:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
24061122:	e008      	b.n	24061136 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
24061124:	687b      	ldr	r3, [r7, #4]
24061126:	2200      	movs	r2, #0
24061128:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
2406112a:	687b      	ldr	r3, [r7, #4]
2406112c:	2200      	movs	r2, #0
2406112e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
24061130:	687b      	ldr	r3, [r7, #4]
24061132:	2200      	movs	r2, #0
24061134:	609a      	str	r2, [r3, #8]
}
24061136:	bf00      	nop
24061138:	3724      	adds	r7, #36	@ 0x24
2406113a:	46bd      	mov	sp, r7
2406113c:	f85d 7b04 	ldr.w	r7, [sp], #4
24061140:	4770      	bx	lr
24061142:	bf00      	nop
24061144:	58024400 	.word	0x58024400
24061148:	03d09000 	.word	0x03d09000
2406114c:	46000000 	.word	0x46000000
24061150:	4c742400 	.word	0x4c742400
24061154:	4a742400 	.word	0x4a742400
24061158:	4bb71b00 	.word	0x4bb71b00

2406115c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
2406115c:	b480      	push	{r7}
2406115e:	b089      	sub	sp, #36	@ 0x24
24061160:	af00      	add	r7, sp, #0
24061162:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24061164:	4ba1      	ldr	r3, [pc, #644]	@ (240613ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
24061166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
24061168:	f003 0303 	and.w	r3, r3, #3
2406116c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
2406116e:	4b9f      	ldr	r3, [pc, #636]	@ (240613ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
24061170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
24061172:	0d1b      	lsrs	r3, r3, #20
24061174:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
24061178:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
2406117a:	4b9c      	ldr	r3, [pc, #624]	@ (240613ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2406117c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2406117e:	0a1b      	lsrs	r3, r3, #8
24061180:	f003 0301 	and.w	r3, r3, #1
24061184:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
24061186:	4b99      	ldr	r3, [pc, #612]	@ (240613ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
24061188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
2406118a:	08db      	lsrs	r3, r3, #3
2406118c:	f3c3 030c 	ubfx	r3, r3, #0, #13
24061190:	693a      	ldr	r2, [r7, #16]
24061192:	fb02 f303 	mul.w	r3, r2, r3
24061196:	ee07 3a90 	vmov	s15, r3
2406119a:	eef8 7a67 	vcvt.f32.u32	s15, s15
2406119e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
240611a2:	697b      	ldr	r3, [r7, #20]
240611a4:	2b00      	cmp	r3, #0
240611a6:	f000 8111 	beq.w	240613cc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
240611aa:	69bb      	ldr	r3, [r7, #24]
240611ac:	2b02      	cmp	r3, #2
240611ae:	f000 8083 	beq.w	240612b8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
240611b2:	69bb      	ldr	r3, [r7, #24]
240611b4:	2b02      	cmp	r3, #2
240611b6:	f200 80a1 	bhi.w	240612fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
240611ba:	69bb      	ldr	r3, [r7, #24]
240611bc:	2b00      	cmp	r3, #0
240611be:	d003      	beq.n	240611c8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
240611c0:	69bb      	ldr	r3, [r7, #24]
240611c2:	2b01      	cmp	r3, #1
240611c4:	d056      	beq.n	24061274 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
240611c6:	e099      	b.n	240612fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
240611c8:	4b88      	ldr	r3, [pc, #544]	@ (240613ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
240611ca:	681b      	ldr	r3, [r3, #0]
240611cc:	f003 0320 	and.w	r3, r3, #32
240611d0:	2b00      	cmp	r3, #0
240611d2:	d02d      	beq.n	24061230 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240611d4:	4b85      	ldr	r3, [pc, #532]	@ (240613ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
240611d6:	681b      	ldr	r3, [r3, #0]
240611d8:	08db      	lsrs	r3, r3, #3
240611da:	f003 0303 	and.w	r3, r3, #3
240611de:	4a84      	ldr	r2, [pc, #528]	@ (240613f0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
240611e0:	fa22 f303 	lsr.w	r3, r2, r3
240611e4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
240611e6:	68bb      	ldr	r3, [r7, #8]
240611e8:	ee07 3a90 	vmov	s15, r3
240611ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
240611f0:	697b      	ldr	r3, [r7, #20]
240611f2:	ee07 3a90 	vmov	s15, r3
240611f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
240611fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240611fe:	4b7b      	ldr	r3, [pc, #492]	@ (240613ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
24061200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
24061202:	f3c3 0308 	ubfx	r3, r3, #0, #9
24061206:	ee07 3a90 	vmov	s15, r3
2406120a:	eef8 6a67 	vcvt.f32.u32	s13, s15
2406120e:	ed97 6a03 	vldr	s12, [r7, #12]
24061212:	eddf 5a78 	vldr	s11, [pc, #480]	@ 240613f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
24061216:	eec6 7a25 	vdiv.f32	s15, s12, s11
2406121a:	ee76 7aa7 	vadd.f32	s15, s13, s15
2406121e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
24061222:	ee77 7aa6 	vadd.f32	s15, s15, s13
24061226:	ee67 7a27 	vmul.f32	s15, s14, s15
2406122a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
2406122e:	e087      	b.n	24061340 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24061230:	697b      	ldr	r3, [r7, #20]
24061232:	ee07 3a90 	vmov	s15, r3
24061236:	eef8 7a67 	vcvt.f32.u32	s15, s15
2406123a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 240613f8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
2406123e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24061242:	4b6a      	ldr	r3, [pc, #424]	@ (240613ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
24061244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
24061246:	f3c3 0308 	ubfx	r3, r3, #0, #9
2406124a:	ee07 3a90 	vmov	s15, r3
2406124e:	eef8 6a67 	vcvt.f32.u32	s13, s15
24061252:	ed97 6a03 	vldr	s12, [r7, #12]
24061256:	eddf 5a67 	vldr	s11, [pc, #412]	@ 240613f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
2406125a:	eec6 7a25 	vdiv.f32	s15, s12, s11
2406125e:	ee76 7aa7 	vadd.f32	s15, s13, s15
24061262:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
24061266:	ee77 7aa6 	vadd.f32	s15, s15, s13
2406126a:	ee67 7a27 	vmul.f32	s15, s14, s15
2406126e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
24061272:	e065      	b.n	24061340 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24061274:	697b      	ldr	r3, [r7, #20]
24061276:	ee07 3a90 	vmov	s15, r3
2406127a:	eef8 7a67 	vcvt.f32.u32	s15, s15
2406127e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 240613fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
24061282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24061286:	4b59      	ldr	r3, [pc, #356]	@ (240613ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
24061288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
2406128a:	f3c3 0308 	ubfx	r3, r3, #0, #9
2406128e:	ee07 3a90 	vmov	s15, r3
24061292:	eef8 6a67 	vcvt.f32.u32	s13, s15
24061296:	ed97 6a03 	vldr	s12, [r7, #12]
2406129a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 240613f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
2406129e:	eec6 7a25 	vdiv.f32	s15, s12, s11
240612a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
240612a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
240612aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
240612ae:	ee67 7a27 	vmul.f32	s15, s14, s15
240612b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
240612b6:	e043      	b.n	24061340 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
240612b8:	697b      	ldr	r3, [r7, #20]
240612ba:	ee07 3a90 	vmov	s15, r3
240612be:	eef8 7a67 	vcvt.f32.u32	s15, s15
240612c2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 24061400 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
240612c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240612ca:	4b48      	ldr	r3, [pc, #288]	@ (240613ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
240612cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
240612ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
240612d2:	ee07 3a90 	vmov	s15, r3
240612d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
240612da:	ed97 6a03 	vldr	s12, [r7, #12]
240612de:	eddf 5a45 	vldr	s11, [pc, #276]	@ 240613f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
240612e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
240612e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
240612ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
240612ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
240612f2:	ee67 7a27 	vmul.f32	s15, s14, s15
240612f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
240612fa:	e021      	b.n	24061340 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
240612fc:	697b      	ldr	r3, [r7, #20]
240612fe:	ee07 3a90 	vmov	s15, r3
24061302:	eef8 7a67 	vcvt.f32.u32	s15, s15
24061306:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 240613fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
2406130a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2406130e:	4b37      	ldr	r3, [pc, #220]	@ (240613ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
24061310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
24061312:	f3c3 0308 	ubfx	r3, r3, #0, #9
24061316:	ee07 3a90 	vmov	s15, r3
2406131a:	eef8 6a67 	vcvt.f32.u32	s13, s15
2406131e:	ed97 6a03 	vldr	s12, [r7, #12]
24061322:	eddf 5a34 	vldr	s11, [pc, #208]	@ 240613f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
24061326:	eec6 7a25 	vdiv.f32	s15, s12, s11
2406132a:	ee76 7aa7 	vadd.f32	s15, s13, s15
2406132e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
24061332:	ee77 7aa6 	vadd.f32	s15, s15, s13
24061336:	ee67 7a27 	vmul.f32	s15, s14, s15
2406133a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2406133e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
24061340:	4b2a      	ldr	r3, [pc, #168]	@ (240613ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
24061342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
24061344:	0a5b      	lsrs	r3, r3, #9
24061346:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
2406134a:	ee07 3a90 	vmov	s15, r3
2406134e:	eef8 7a67 	vcvt.f32.u32	s15, s15
24061352:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
24061356:	ee37 7a87 	vadd.f32	s14, s15, s14
2406135a:	edd7 6a07 	vldr	s13, [r7, #28]
2406135e:	eec6 7a87 	vdiv.f32	s15, s13, s14
24061362:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24061366:	ee17 2a90 	vmov	r2, s15
2406136a:	687b      	ldr	r3, [r7, #4]
2406136c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
2406136e:	4b1f      	ldr	r3, [pc, #124]	@ (240613ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
24061370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
24061372:	0c1b      	lsrs	r3, r3, #16
24061374:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
24061378:	ee07 3a90 	vmov	s15, r3
2406137c:	eef8 7a67 	vcvt.f32.u32	s15, s15
24061380:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
24061384:	ee37 7a87 	vadd.f32	s14, s15, s14
24061388:	edd7 6a07 	vldr	s13, [r7, #28]
2406138c:	eec6 7a87 	vdiv.f32	s15, s13, s14
24061390:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24061394:	ee17 2a90 	vmov	r2, s15
24061398:	687b      	ldr	r3, [r7, #4]
2406139a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
2406139c:	4b13      	ldr	r3, [pc, #76]	@ (240613ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2406139e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
240613a0:	0e1b      	lsrs	r3, r3, #24
240613a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
240613a6:	ee07 3a90 	vmov	s15, r3
240613aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
240613ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
240613b2:	ee37 7a87 	vadd.f32	s14, s15, s14
240613b6:	edd7 6a07 	vldr	s13, [r7, #28]
240613ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
240613be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
240613c2:	ee17 2a90 	vmov	r2, s15
240613c6:	687b      	ldr	r3, [r7, #4]
240613c8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
240613ca:	e008      	b.n	240613de <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
240613cc:	687b      	ldr	r3, [r7, #4]
240613ce:	2200      	movs	r2, #0
240613d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
240613d2:	687b      	ldr	r3, [r7, #4]
240613d4:	2200      	movs	r2, #0
240613d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
240613d8:	687b      	ldr	r3, [r7, #4]
240613da:	2200      	movs	r2, #0
240613dc:	609a      	str	r2, [r3, #8]
}
240613de:	bf00      	nop
240613e0:	3724      	adds	r7, #36	@ 0x24
240613e2:	46bd      	mov	sp, r7
240613e4:	f85d 7b04 	ldr.w	r7, [sp], #4
240613e8:	4770      	bx	lr
240613ea:	bf00      	nop
240613ec:	58024400 	.word	0x58024400
240613f0:	03d09000 	.word	0x03d09000
240613f4:	46000000 	.word	0x46000000
240613f8:	4c742400 	.word	0x4c742400
240613fc:	4a742400 	.word	0x4a742400
24061400:	4bb71b00 	.word	0x4bb71b00

24061404 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
24061404:	b480      	push	{r7}
24061406:	b089      	sub	sp, #36	@ 0x24
24061408:	af00      	add	r7, sp, #0
2406140a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2406140c:	4ba0      	ldr	r3, [pc, #640]	@ (24061690 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2406140e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
24061410:	f003 0303 	and.w	r3, r3, #3
24061414:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
24061416:	4b9e      	ldr	r3, [pc, #632]	@ (24061690 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
24061418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
2406141a:	091b      	lsrs	r3, r3, #4
2406141c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
24061420:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
24061422:	4b9b      	ldr	r3, [pc, #620]	@ (24061690 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
24061424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
24061426:	f003 0301 	and.w	r3, r3, #1
2406142a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
2406142c:	4b98      	ldr	r3, [pc, #608]	@ (24061690 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2406142e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
24061430:	08db      	lsrs	r3, r3, #3
24061432:	f3c3 030c 	ubfx	r3, r3, #0, #13
24061436:	693a      	ldr	r2, [r7, #16]
24061438:	fb02 f303 	mul.w	r3, r2, r3
2406143c:	ee07 3a90 	vmov	s15, r3
24061440:	eef8 7a67 	vcvt.f32.u32	s15, s15
24061444:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
24061448:	697b      	ldr	r3, [r7, #20]
2406144a:	2b00      	cmp	r3, #0
2406144c:	f000 8111 	beq.w	24061672 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
24061450:	69bb      	ldr	r3, [r7, #24]
24061452:	2b02      	cmp	r3, #2
24061454:	f000 8083 	beq.w	2406155e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
24061458:	69bb      	ldr	r3, [r7, #24]
2406145a:	2b02      	cmp	r3, #2
2406145c:	f200 80a1 	bhi.w	240615a2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
24061460:	69bb      	ldr	r3, [r7, #24]
24061462:	2b00      	cmp	r3, #0
24061464:	d003      	beq.n	2406146e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
24061466:	69bb      	ldr	r3, [r7, #24]
24061468:	2b01      	cmp	r3, #1
2406146a:	d056      	beq.n	2406151a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
2406146c:	e099      	b.n	240615a2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2406146e:	4b88      	ldr	r3, [pc, #544]	@ (24061690 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
24061470:	681b      	ldr	r3, [r3, #0]
24061472:	f003 0320 	and.w	r3, r3, #32
24061476:	2b00      	cmp	r3, #0
24061478:	d02d      	beq.n	240614d6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2406147a:	4b85      	ldr	r3, [pc, #532]	@ (24061690 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2406147c:	681b      	ldr	r3, [r3, #0]
2406147e:	08db      	lsrs	r3, r3, #3
24061480:	f003 0303 	and.w	r3, r3, #3
24061484:	4a83      	ldr	r2, [pc, #524]	@ (24061694 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
24061486:	fa22 f303 	lsr.w	r3, r2, r3
2406148a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2406148c:	68bb      	ldr	r3, [r7, #8]
2406148e:	ee07 3a90 	vmov	s15, r3
24061492:	eef8 6a67 	vcvt.f32.u32	s13, s15
24061496:	697b      	ldr	r3, [r7, #20]
24061498:	ee07 3a90 	vmov	s15, r3
2406149c:	eef8 7a67 	vcvt.f32.u32	s15, s15
240614a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240614a4:	4b7a      	ldr	r3, [pc, #488]	@ (24061690 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
240614a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
240614a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
240614ac:	ee07 3a90 	vmov	s15, r3
240614b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
240614b4:	ed97 6a03 	vldr	s12, [r7, #12]
240614b8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 24061698 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
240614bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
240614c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
240614c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
240614c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
240614cc:	ee67 7a27 	vmul.f32	s15, s14, s15
240614d0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
240614d4:	e087      	b.n	240615e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240614d6:	697b      	ldr	r3, [r7, #20]
240614d8:	ee07 3a90 	vmov	s15, r3
240614dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
240614e0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 2406169c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
240614e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240614e8:	4b69      	ldr	r3, [pc, #420]	@ (24061690 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
240614ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
240614ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
240614f0:	ee07 3a90 	vmov	s15, r3
240614f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
240614f8:	ed97 6a03 	vldr	s12, [r7, #12]
240614fc:	eddf 5a66 	vldr	s11, [pc, #408]	@ 24061698 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
24061500:	eec6 7a25 	vdiv.f32	s15, s12, s11
24061504:	ee76 7aa7 	vadd.f32	s15, s13, s15
24061508:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
2406150c:	ee77 7aa6 	vadd.f32	s15, s15, s13
24061510:	ee67 7a27 	vmul.f32	s15, s14, s15
24061514:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
24061518:	e065      	b.n	240615e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2406151a:	697b      	ldr	r3, [r7, #20]
2406151c:	ee07 3a90 	vmov	s15, r3
24061520:	eef8 7a67 	vcvt.f32.u32	s15, s15
24061524:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 240616a0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
24061528:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2406152c:	4b58      	ldr	r3, [pc, #352]	@ (24061690 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2406152e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
24061530:	f3c3 0308 	ubfx	r3, r3, #0, #9
24061534:	ee07 3a90 	vmov	s15, r3
24061538:	eef8 6a67 	vcvt.f32.u32	s13, s15
2406153c:	ed97 6a03 	vldr	s12, [r7, #12]
24061540:	eddf 5a55 	vldr	s11, [pc, #340]	@ 24061698 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
24061544:	eec6 7a25 	vdiv.f32	s15, s12, s11
24061548:	ee76 7aa7 	vadd.f32	s15, s13, s15
2406154c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
24061550:	ee77 7aa6 	vadd.f32	s15, s15, s13
24061554:	ee67 7a27 	vmul.f32	s15, s14, s15
24061558:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2406155c:	e043      	b.n	240615e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2406155e:	697b      	ldr	r3, [r7, #20]
24061560:	ee07 3a90 	vmov	s15, r3
24061564:	eef8 7a67 	vcvt.f32.u32	s15, s15
24061568:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 240616a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
2406156c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24061570:	4b47      	ldr	r3, [pc, #284]	@ (24061690 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
24061572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
24061574:	f3c3 0308 	ubfx	r3, r3, #0, #9
24061578:	ee07 3a90 	vmov	s15, r3
2406157c:	eef8 6a67 	vcvt.f32.u32	s13, s15
24061580:	ed97 6a03 	vldr	s12, [r7, #12]
24061584:	eddf 5a44 	vldr	s11, [pc, #272]	@ 24061698 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
24061588:	eec6 7a25 	vdiv.f32	s15, s12, s11
2406158c:	ee76 7aa7 	vadd.f32	s15, s13, s15
24061590:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
24061594:	ee77 7aa6 	vadd.f32	s15, s15, s13
24061598:	ee67 7a27 	vmul.f32	s15, s14, s15
2406159c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
240615a0:	e021      	b.n	240615e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240615a2:	697b      	ldr	r3, [r7, #20]
240615a4:	ee07 3a90 	vmov	s15, r3
240615a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
240615ac:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 2406169c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
240615b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240615b4:	4b36      	ldr	r3, [pc, #216]	@ (24061690 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
240615b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
240615b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
240615bc:	ee07 3a90 	vmov	s15, r3
240615c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
240615c4:	ed97 6a03 	vldr	s12, [r7, #12]
240615c8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 24061698 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
240615cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
240615d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
240615d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
240615d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
240615dc:	ee67 7a27 	vmul.f32	s15, s14, s15
240615e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
240615e4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
240615e6:	4b2a      	ldr	r3, [pc, #168]	@ (24061690 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
240615e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
240615ea:	0a5b      	lsrs	r3, r3, #9
240615ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
240615f0:	ee07 3a90 	vmov	s15, r3
240615f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
240615f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
240615fc:	ee37 7a87 	vadd.f32	s14, s15, s14
24061600:	edd7 6a07 	vldr	s13, [r7, #28]
24061604:	eec6 7a87 	vdiv.f32	s15, s13, s14
24061608:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2406160c:	ee17 2a90 	vmov	r2, s15
24061610:	687b      	ldr	r3, [r7, #4]
24061612:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
24061614:	4b1e      	ldr	r3, [pc, #120]	@ (24061690 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
24061616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
24061618:	0c1b      	lsrs	r3, r3, #16
2406161a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
2406161e:	ee07 3a90 	vmov	s15, r3
24061622:	eef8 7a67 	vcvt.f32.u32	s15, s15
24061626:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
2406162a:	ee37 7a87 	vadd.f32	s14, s15, s14
2406162e:	edd7 6a07 	vldr	s13, [r7, #28]
24061632:	eec6 7a87 	vdiv.f32	s15, s13, s14
24061636:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2406163a:	ee17 2a90 	vmov	r2, s15
2406163e:	687b      	ldr	r3, [r7, #4]
24061640:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
24061642:	4b13      	ldr	r3, [pc, #76]	@ (24061690 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
24061644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
24061646:	0e1b      	lsrs	r3, r3, #24
24061648:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
2406164c:	ee07 3a90 	vmov	s15, r3
24061650:	eef8 7a67 	vcvt.f32.u32	s15, s15
24061654:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
24061658:	ee37 7a87 	vadd.f32	s14, s15, s14
2406165c:	edd7 6a07 	vldr	s13, [r7, #28]
24061660:	eec6 7a87 	vdiv.f32	s15, s13, s14
24061664:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24061668:	ee17 2a90 	vmov	r2, s15
2406166c:	687b      	ldr	r3, [r7, #4]
2406166e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
24061670:	e008      	b.n	24061684 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
24061672:	687b      	ldr	r3, [r7, #4]
24061674:	2200      	movs	r2, #0
24061676:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
24061678:	687b      	ldr	r3, [r7, #4]
2406167a:	2200      	movs	r2, #0
2406167c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
2406167e:	687b      	ldr	r3, [r7, #4]
24061680:	2200      	movs	r2, #0
24061682:	609a      	str	r2, [r3, #8]
}
24061684:	bf00      	nop
24061686:	3724      	adds	r7, #36	@ 0x24
24061688:	46bd      	mov	sp, r7
2406168a:	f85d 7b04 	ldr.w	r7, [sp], #4
2406168e:	4770      	bx	lr
24061690:	58024400 	.word	0x58024400
24061694:	03d09000 	.word	0x03d09000
24061698:	46000000 	.word	0x46000000
2406169c:	4c742400 	.word	0x4c742400
240616a0:	4a742400 	.word	0x4a742400
240616a4:	4bb71b00 	.word	0x4bb71b00

240616a8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
240616a8:	b580      	push	{r7, lr}
240616aa:	b084      	sub	sp, #16
240616ac:	af00      	add	r7, sp, #0
240616ae:	6078      	str	r0, [r7, #4]
240616b0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
240616b2:	2300      	movs	r3, #0
240616b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
240616b6:	4b53      	ldr	r3, [pc, #332]	@ (24061804 <RCCEx_PLL2_Config+0x15c>)
240616b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
240616ba:	f003 0303 	and.w	r3, r3, #3
240616be:	2b03      	cmp	r3, #3
240616c0:	d101      	bne.n	240616c6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
240616c2:	2301      	movs	r3, #1
240616c4:	e099      	b.n	240617fa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
240616c6:	4b4f      	ldr	r3, [pc, #316]	@ (24061804 <RCCEx_PLL2_Config+0x15c>)
240616c8:	681b      	ldr	r3, [r3, #0]
240616ca:	4a4e      	ldr	r2, [pc, #312]	@ (24061804 <RCCEx_PLL2_Config+0x15c>)
240616cc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
240616d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
240616d2:	f7f5 f9d5 	bl	24056a80 <HAL_GetTick>
240616d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
240616d8:	e008      	b.n	240616ec <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
240616da:	f7f5 f9d1 	bl	24056a80 <HAL_GetTick>
240616de:	4602      	mov	r2, r0
240616e0:	68bb      	ldr	r3, [r7, #8]
240616e2:	1ad3      	subs	r3, r2, r3
240616e4:	2b02      	cmp	r3, #2
240616e6:	d901      	bls.n	240616ec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
240616e8:	2303      	movs	r3, #3
240616ea:	e086      	b.n	240617fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
240616ec:	4b45      	ldr	r3, [pc, #276]	@ (24061804 <RCCEx_PLL2_Config+0x15c>)
240616ee:	681b      	ldr	r3, [r3, #0]
240616f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
240616f4:	2b00      	cmp	r3, #0
240616f6:	d1f0      	bne.n	240616da <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
240616f8:	4b42      	ldr	r3, [pc, #264]	@ (24061804 <RCCEx_PLL2_Config+0x15c>)
240616fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
240616fc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
24061700:	687b      	ldr	r3, [r7, #4]
24061702:	681b      	ldr	r3, [r3, #0]
24061704:	031b      	lsls	r3, r3, #12
24061706:	493f      	ldr	r1, [pc, #252]	@ (24061804 <RCCEx_PLL2_Config+0x15c>)
24061708:	4313      	orrs	r3, r2
2406170a:	628b      	str	r3, [r1, #40]	@ 0x28
2406170c:	687b      	ldr	r3, [r7, #4]
2406170e:	685b      	ldr	r3, [r3, #4]
24061710:	3b01      	subs	r3, #1
24061712:	f3c3 0208 	ubfx	r2, r3, #0, #9
24061716:	687b      	ldr	r3, [r7, #4]
24061718:	689b      	ldr	r3, [r3, #8]
2406171a:	3b01      	subs	r3, #1
2406171c:	025b      	lsls	r3, r3, #9
2406171e:	b29b      	uxth	r3, r3
24061720:	431a      	orrs	r2, r3
24061722:	687b      	ldr	r3, [r7, #4]
24061724:	68db      	ldr	r3, [r3, #12]
24061726:	3b01      	subs	r3, #1
24061728:	041b      	lsls	r3, r3, #16
2406172a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
2406172e:	431a      	orrs	r2, r3
24061730:	687b      	ldr	r3, [r7, #4]
24061732:	691b      	ldr	r3, [r3, #16]
24061734:	3b01      	subs	r3, #1
24061736:	061b      	lsls	r3, r3, #24
24061738:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
2406173c:	4931      	ldr	r1, [pc, #196]	@ (24061804 <RCCEx_PLL2_Config+0x15c>)
2406173e:	4313      	orrs	r3, r2
24061740:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
24061742:	4b30      	ldr	r3, [pc, #192]	@ (24061804 <RCCEx_PLL2_Config+0x15c>)
24061744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
24061746:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
2406174a:	687b      	ldr	r3, [r7, #4]
2406174c:	695b      	ldr	r3, [r3, #20]
2406174e:	492d      	ldr	r1, [pc, #180]	@ (24061804 <RCCEx_PLL2_Config+0x15c>)
24061750:	4313      	orrs	r3, r2
24061752:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
24061754:	4b2b      	ldr	r3, [pc, #172]	@ (24061804 <RCCEx_PLL2_Config+0x15c>)
24061756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
24061758:	f023 0220 	bic.w	r2, r3, #32
2406175c:	687b      	ldr	r3, [r7, #4]
2406175e:	699b      	ldr	r3, [r3, #24]
24061760:	4928      	ldr	r1, [pc, #160]	@ (24061804 <RCCEx_PLL2_Config+0x15c>)
24061762:	4313      	orrs	r3, r2
24061764:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
24061766:	4b27      	ldr	r3, [pc, #156]	@ (24061804 <RCCEx_PLL2_Config+0x15c>)
24061768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2406176a:	4a26      	ldr	r2, [pc, #152]	@ (24061804 <RCCEx_PLL2_Config+0x15c>)
2406176c:	f023 0310 	bic.w	r3, r3, #16
24061770:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
24061772:	4b24      	ldr	r3, [pc, #144]	@ (24061804 <RCCEx_PLL2_Config+0x15c>)
24061774:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
24061776:	4b24      	ldr	r3, [pc, #144]	@ (24061808 <RCCEx_PLL2_Config+0x160>)
24061778:	4013      	ands	r3, r2
2406177a:	687a      	ldr	r2, [r7, #4]
2406177c:	69d2      	ldr	r2, [r2, #28]
2406177e:	00d2      	lsls	r2, r2, #3
24061780:	4920      	ldr	r1, [pc, #128]	@ (24061804 <RCCEx_PLL2_Config+0x15c>)
24061782:	4313      	orrs	r3, r2
24061784:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
24061786:	4b1f      	ldr	r3, [pc, #124]	@ (24061804 <RCCEx_PLL2_Config+0x15c>)
24061788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2406178a:	4a1e      	ldr	r2, [pc, #120]	@ (24061804 <RCCEx_PLL2_Config+0x15c>)
2406178c:	f043 0310 	orr.w	r3, r3, #16
24061790:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
24061792:	683b      	ldr	r3, [r7, #0]
24061794:	2b00      	cmp	r3, #0
24061796:	d106      	bne.n	240617a6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
24061798:	4b1a      	ldr	r3, [pc, #104]	@ (24061804 <RCCEx_PLL2_Config+0x15c>)
2406179a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
2406179c:	4a19      	ldr	r2, [pc, #100]	@ (24061804 <RCCEx_PLL2_Config+0x15c>)
2406179e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
240617a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
240617a4:	e00f      	b.n	240617c6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
240617a6:	683b      	ldr	r3, [r7, #0]
240617a8:	2b01      	cmp	r3, #1
240617aa:	d106      	bne.n	240617ba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
240617ac:	4b15      	ldr	r3, [pc, #84]	@ (24061804 <RCCEx_PLL2_Config+0x15c>)
240617ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
240617b0:	4a14      	ldr	r2, [pc, #80]	@ (24061804 <RCCEx_PLL2_Config+0x15c>)
240617b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
240617b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
240617b8:	e005      	b.n	240617c6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
240617ba:	4b12      	ldr	r3, [pc, #72]	@ (24061804 <RCCEx_PLL2_Config+0x15c>)
240617bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
240617be:	4a11      	ldr	r2, [pc, #68]	@ (24061804 <RCCEx_PLL2_Config+0x15c>)
240617c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
240617c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
240617c6:	4b0f      	ldr	r3, [pc, #60]	@ (24061804 <RCCEx_PLL2_Config+0x15c>)
240617c8:	681b      	ldr	r3, [r3, #0]
240617ca:	4a0e      	ldr	r2, [pc, #56]	@ (24061804 <RCCEx_PLL2_Config+0x15c>)
240617cc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
240617d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
240617d2:	f7f5 f955 	bl	24056a80 <HAL_GetTick>
240617d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
240617d8:	e008      	b.n	240617ec <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
240617da:	f7f5 f951 	bl	24056a80 <HAL_GetTick>
240617de:	4602      	mov	r2, r0
240617e0:	68bb      	ldr	r3, [r7, #8]
240617e2:	1ad3      	subs	r3, r2, r3
240617e4:	2b02      	cmp	r3, #2
240617e6:	d901      	bls.n	240617ec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
240617e8:	2303      	movs	r3, #3
240617ea:	e006      	b.n	240617fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
240617ec:	4b05      	ldr	r3, [pc, #20]	@ (24061804 <RCCEx_PLL2_Config+0x15c>)
240617ee:	681b      	ldr	r3, [r3, #0]
240617f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
240617f4:	2b00      	cmp	r3, #0
240617f6:	d0f0      	beq.n	240617da <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
240617f8:	7bfb      	ldrb	r3, [r7, #15]
}
240617fa:	4618      	mov	r0, r3
240617fc:	3710      	adds	r7, #16
240617fe:	46bd      	mov	sp, r7
24061800:	bd80      	pop	{r7, pc}
24061802:	bf00      	nop
24061804:	58024400 	.word	0x58024400
24061808:	ffff0007 	.word	0xffff0007

2406180c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
2406180c:	b580      	push	{r7, lr}
2406180e:	b084      	sub	sp, #16
24061810:	af00      	add	r7, sp, #0
24061812:	6078      	str	r0, [r7, #4]
24061814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
24061816:	2300      	movs	r3, #0
24061818:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
2406181a:	4b53      	ldr	r3, [pc, #332]	@ (24061968 <RCCEx_PLL3_Config+0x15c>)
2406181c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
2406181e:	f003 0303 	and.w	r3, r3, #3
24061822:	2b03      	cmp	r3, #3
24061824:	d101      	bne.n	2406182a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
24061826:	2301      	movs	r3, #1
24061828:	e099      	b.n	2406195e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
2406182a:	4b4f      	ldr	r3, [pc, #316]	@ (24061968 <RCCEx_PLL3_Config+0x15c>)
2406182c:	681b      	ldr	r3, [r3, #0]
2406182e:	4a4e      	ldr	r2, [pc, #312]	@ (24061968 <RCCEx_PLL3_Config+0x15c>)
24061830:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
24061834:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
24061836:	f7f5 f923 	bl	24056a80 <HAL_GetTick>
2406183a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
2406183c:	e008      	b.n	24061850 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
2406183e:	f7f5 f91f 	bl	24056a80 <HAL_GetTick>
24061842:	4602      	mov	r2, r0
24061844:	68bb      	ldr	r3, [r7, #8]
24061846:	1ad3      	subs	r3, r2, r3
24061848:	2b02      	cmp	r3, #2
2406184a:	d901      	bls.n	24061850 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
2406184c:	2303      	movs	r3, #3
2406184e:	e086      	b.n	2406195e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
24061850:	4b45      	ldr	r3, [pc, #276]	@ (24061968 <RCCEx_PLL3_Config+0x15c>)
24061852:	681b      	ldr	r3, [r3, #0]
24061854:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
24061858:	2b00      	cmp	r3, #0
2406185a:	d1f0      	bne.n	2406183e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
2406185c:	4b42      	ldr	r3, [pc, #264]	@ (24061968 <RCCEx_PLL3_Config+0x15c>)
2406185e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
24061860:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
24061864:	687b      	ldr	r3, [r7, #4]
24061866:	681b      	ldr	r3, [r3, #0]
24061868:	051b      	lsls	r3, r3, #20
2406186a:	493f      	ldr	r1, [pc, #252]	@ (24061968 <RCCEx_PLL3_Config+0x15c>)
2406186c:	4313      	orrs	r3, r2
2406186e:	628b      	str	r3, [r1, #40]	@ 0x28
24061870:	687b      	ldr	r3, [r7, #4]
24061872:	685b      	ldr	r3, [r3, #4]
24061874:	3b01      	subs	r3, #1
24061876:	f3c3 0208 	ubfx	r2, r3, #0, #9
2406187a:	687b      	ldr	r3, [r7, #4]
2406187c:	689b      	ldr	r3, [r3, #8]
2406187e:	3b01      	subs	r3, #1
24061880:	025b      	lsls	r3, r3, #9
24061882:	b29b      	uxth	r3, r3
24061884:	431a      	orrs	r2, r3
24061886:	687b      	ldr	r3, [r7, #4]
24061888:	68db      	ldr	r3, [r3, #12]
2406188a:	3b01      	subs	r3, #1
2406188c:	041b      	lsls	r3, r3, #16
2406188e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
24061892:	431a      	orrs	r2, r3
24061894:	687b      	ldr	r3, [r7, #4]
24061896:	691b      	ldr	r3, [r3, #16]
24061898:	3b01      	subs	r3, #1
2406189a:	061b      	lsls	r3, r3, #24
2406189c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
240618a0:	4931      	ldr	r1, [pc, #196]	@ (24061968 <RCCEx_PLL3_Config+0x15c>)
240618a2:	4313      	orrs	r3, r2
240618a4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
240618a6:	4b30      	ldr	r3, [pc, #192]	@ (24061968 <RCCEx_PLL3_Config+0x15c>)
240618a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
240618aa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
240618ae:	687b      	ldr	r3, [r7, #4]
240618b0:	695b      	ldr	r3, [r3, #20]
240618b2:	492d      	ldr	r1, [pc, #180]	@ (24061968 <RCCEx_PLL3_Config+0x15c>)
240618b4:	4313      	orrs	r3, r2
240618b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
240618b8:	4b2b      	ldr	r3, [pc, #172]	@ (24061968 <RCCEx_PLL3_Config+0x15c>)
240618ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
240618bc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
240618c0:	687b      	ldr	r3, [r7, #4]
240618c2:	699b      	ldr	r3, [r3, #24]
240618c4:	4928      	ldr	r1, [pc, #160]	@ (24061968 <RCCEx_PLL3_Config+0x15c>)
240618c6:	4313      	orrs	r3, r2
240618c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
240618ca:	4b27      	ldr	r3, [pc, #156]	@ (24061968 <RCCEx_PLL3_Config+0x15c>)
240618cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
240618ce:	4a26      	ldr	r2, [pc, #152]	@ (24061968 <RCCEx_PLL3_Config+0x15c>)
240618d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
240618d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
240618d6:	4b24      	ldr	r3, [pc, #144]	@ (24061968 <RCCEx_PLL3_Config+0x15c>)
240618d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
240618da:	4b24      	ldr	r3, [pc, #144]	@ (2406196c <RCCEx_PLL3_Config+0x160>)
240618dc:	4013      	ands	r3, r2
240618de:	687a      	ldr	r2, [r7, #4]
240618e0:	69d2      	ldr	r2, [r2, #28]
240618e2:	00d2      	lsls	r2, r2, #3
240618e4:	4920      	ldr	r1, [pc, #128]	@ (24061968 <RCCEx_PLL3_Config+0x15c>)
240618e6:	4313      	orrs	r3, r2
240618e8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
240618ea:	4b1f      	ldr	r3, [pc, #124]	@ (24061968 <RCCEx_PLL3_Config+0x15c>)
240618ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
240618ee:	4a1e      	ldr	r2, [pc, #120]	@ (24061968 <RCCEx_PLL3_Config+0x15c>)
240618f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
240618f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
240618f6:	683b      	ldr	r3, [r7, #0]
240618f8:	2b00      	cmp	r3, #0
240618fa:	d106      	bne.n	2406190a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
240618fc:	4b1a      	ldr	r3, [pc, #104]	@ (24061968 <RCCEx_PLL3_Config+0x15c>)
240618fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
24061900:	4a19      	ldr	r2, [pc, #100]	@ (24061968 <RCCEx_PLL3_Config+0x15c>)
24061902:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
24061906:	62d3      	str	r3, [r2, #44]	@ 0x2c
24061908:	e00f      	b.n	2406192a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
2406190a:	683b      	ldr	r3, [r7, #0]
2406190c:	2b01      	cmp	r3, #1
2406190e:	d106      	bne.n	2406191e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
24061910:	4b15      	ldr	r3, [pc, #84]	@ (24061968 <RCCEx_PLL3_Config+0x15c>)
24061912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
24061914:	4a14      	ldr	r2, [pc, #80]	@ (24061968 <RCCEx_PLL3_Config+0x15c>)
24061916:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
2406191a:	62d3      	str	r3, [r2, #44]	@ 0x2c
2406191c:	e005      	b.n	2406192a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
2406191e:	4b12      	ldr	r3, [pc, #72]	@ (24061968 <RCCEx_PLL3_Config+0x15c>)
24061920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
24061922:	4a11      	ldr	r2, [pc, #68]	@ (24061968 <RCCEx_PLL3_Config+0x15c>)
24061924:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
24061928:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
2406192a:	4b0f      	ldr	r3, [pc, #60]	@ (24061968 <RCCEx_PLL3_Config+0x15c>)
2406192c:	681b      	ldr	r3, [r3, #0]
2406192e:	4a0e      	ldr	r2, [pc, #56]	@ (24061968 <RCCEx_PLL3_Config+0x15c>)
24061930:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
24061934:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
24061936:	f7f5 f8a3 	bl	24056a80 <HAL_GetTick>
2406193a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
2406193c:	e008      	b.n	24061950 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
2406193e:	f7f5 f89f 	bl	24056a80 <HAL_GetTick>
24061942:	4602      	mov	r2, r0
24061944:	68bb      	ldr	r3, [r7, #8]
24061946:	1ad3      	subs	r3, r2, r3
24061948:	2b02      	cmp	r3, #2
2406194a:	d901      	bls.n	24061950 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
2406194c:	2303      	movs	r3, #3
2406194e:	e006      	b.n	2406195e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
24061950:	4b05      	ldr	r3, [pc, #20]	@ (24061968 <RCCEx_PLL3_Config+0x15c>)
24061952:	681b      	ldr	r3, [r3, #0]
24061954:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
24061958:	2b00      	cmp	r3, #0
2406195a:	d0f0      	beq.n	2406193e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
2406195c:	7bfb      	ldrb	r3, [r7, #15]
}
2406195e:	4618      	mov	r0, r3
24061960:	3710      	adds	r7, #16
24061962:	46bd      	mov	sp, r7
24061964:	bd80      	pop	{r7, pc}
24061966:	bf00      	nop
24061968:	58024400 	.word	0x58024400
2406196c:	ffff0007 	.word	0xffff0007

24061970 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
24061970:	b580      	push	{r7, lr}
24061972:	b084      	sub	sp, #16
24061974:	af00      	add	r7, sp, #0
24061976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
24061978:	2301      	movs	r3, #1
2406197a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
2406197c:	687b      	ldr	r3, [r7, #4]
2406197e:	2b00      	cmp	r3, #0
24061980:	d074      	beq.n	24061a6c <HAL_RTC_Init+0xfc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
24061982:	687b      	ldr	r3, [r7, #4]
24061984:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
24061988:	b2db      	uxtb	r3, r3
2406198a:	2b00      	cmp	r3, #0
2406198c:	d106      	bne.n	2406199c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
2406198e:	687b      	ldr	r3, [r7, #4]
24061990:	2200      	movs	r2, #0
24061992:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
24061996:	6878      	ldr	r0, [r7, #4]
24061998:	f7f4 fc6a 	bl	24056270 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
2406199c:	687b      	ldr	r3, [r7, #4]
2406199e:	2202      	movs	r2, #2
240619a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
240619a4:	687b      	ldr	r3, [r7, #4]
240619a6:	681b      	ldr	r3, [r3, #0]
240619a8:	68db      	ldr	r3, [r3, #12]
240619aa:	f003 0310 	and.w	r3, r3, #16
240619ae:	2b10      	cmp	r3, #16
240619b0:	d053      	beq.n	24061a5a <HAL_RTC_Init+0xea>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
240619b2:	687b      	ldr	r3, [r7, #4]
240619b4:	681b      	ldr	r3, [r3, #0]
240619b6:	22ca      	movs	r2, #202	@ 0xca
240619b8:	625a      	str	r2, [r3, #36]	@ 0x24
240619ba:	687b      	ldr	r3, [r7, #4]
240619bc:	681b      	ldr	r3, [r3, #0]
240619be:	2253      	movs	r2, #83	@ 0x53
240619c0:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
240619c2:	6878      	ldr	r0, [r7, #4]
240619c4:	f000 fa4e 	bl	24061e64 <RTC_EnterInitMode>
240619c8:	4603      	mov	r3, r0
240619ca:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
240619cc:	7bfb      	ldrb	r3, [r7, #15]
240619ce:	2b00      	cmp	r3, #0
240619d0:	d124      	bne.n	24061a1c <HAL_RTC_Init+0xac>
      {
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
240619d2:	687b      	ldr	r3, [r7, #4]
240619d4:	681b      	ldr	r3, [r3, #0]
240619d6:	6999      	ldr	r1, [r3, #24]
240619d8:	687b      	ldr	r3, [r7, #4]
240619da:	681a      	ldr	r2, [r3, #0]
240619dc:	4b26      	ldr	r3, [pc, #152]	@ (24061a78 <HAL_RTC_Init+0x108>)
240619de:	400b      	ands	r3, r1
240619e0:	6193      	str	r3, [r2, #24]
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
240619e2:	687b      	ldr	r3, [r7, #4]
240619e4:	681b      	ldr	r3, [r3, #0]
240619e6:	6999      	ldr	r1, [r3, #24]
240619e8:	687b      	ldr	r3, [r7, #4]
240619ea:	685a      	ldr	r2, [r3, #4]
240619ec:	687b      	ldr	r3, [r7, #4]
240619ee:	691b      	ldr	r3, [r3, #16]
240619f0:	431a      	orrs	r2, r3
240619f2:	687b      	ldr	r3, [r7, #4]
240619f4:	699b      	ldr	r3, [r3, #24]
240619f6:	431a      	orrs	r2, r3
240619f8:	687b      	ldr	r3, [r7, #4]
240619fa:	681b      	ldr	r3, [r3, #0]
240619fc:	430a      	orrs	r2, r1
240619fe:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
24061a00:	687b      	ldr	r3, [r7, #4]
24061a02:	689b      	ldr	r3, [r3, #8]
24061a04:	0419      	lsls	r1, r3, #16
24061a06:	687b      	ldr	r3, [r7, #4]
24061a08:	68da      	ldr	r2, [r3, #12]
24061a0a:	687b      	ldr	r3, [r7, #4]
24061a0c:	681b      	ldr	r3, [r3, #0]
24061a0e:	430a      	orrs	r2, r1
24061a10:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
24061a12:	6878      	ldr	r0, [r7, #4]
24061a14:	f000 fa5c 	bl	24061ed0 <RTC_ExitInitMode>
24061a18:	4603      	mov	r3, r0
24061a1a:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
24061a1c:	7bfb      	ldrb	r3, [r7, #15]
24061a1e:	2b00      	cmp	r3, #0
24061a20:	d116      	bne.n	24061a50 <HAL_RTC_Init+0xe0>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
24061a22:	687b      	ldr	r3, [r7, #4]
24061a24:	681b      	ldr	r3, [r3, #0]
24061a26:	699a      	ldr	r2, [r3, #24]
24061a28:	687b      	ldr	r3, [r7, #4]
24061a2a:	681b      	ldr	r3, [r3, #0]
24061a2c:	f022 4260 	bic.w	r2, r2, #3758096384	@ 0xe0000000
24061a30:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
24061a32:	687b      	ldr	r3, [r7, #4]
24061a34:	681b      	ldr	r3, [r3, #0]
24061a36:	6999      	ldr	r1, [r3, #24]
24061a38:	687b      	ldr	r3, [r7, #4]
24061a3a:	6a1a      	ldr	r2, [r3, #32]
24061a3c:	687b      	ldr	r3, [r7, #4]
24061a3e:	69db      	ldr	r3, [r3, #28]
24061a40:	431a      	orrs	r2, r3
24061a42:	687b      	ldr	r3, [r7, #4]
24061a44:	695b      	ldr	r3, [r3, #20]
24061a46:	431a      	orrs	r2, r3
24061a48:	687b      	ldr	r3, [r7, #4]
24061a4a:	681b      	ldr	r3, [r3, #0]
24061a4c:	430a      	orrs	r2, r1
24061a4e:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
24061a50:	687b      	ldr	r3, [r7, #4]
24061a52:	681b      	ldr	r3, [r3, #0]
24061a54:	22ff      	movs	r2, #255	@ 0xff
24061a56:	625a      	str	r2, [r3, #36]	@ 0x24
24061a58:	e001      	b.n	24061a5e <HAL_RTC_Init+0xee>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
24061a5a:	2300      	movs	r3, #0
24061a5c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
24061a5e:	7bfb      	ldrb	r3, [r7, #15]
24061a60:	2b00      	cmp	r3, #0
24061a62:	d103      	bne.n	24061a6c <HAL_RTC_Init+0xfc>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
24061a64:	687b      	ldr	r3, [r7, #4]
24061a66:	2201      	movs	r2, #1
24061a68:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  /* return status */
  return status;
24061a6c:	7bfb      	ldrb	r3, [r7, #15]
}
24061a6e:	4618      	mov	r0, r3
24061a70:	3710      	adds	r7, #16
24061a72:	46bd      	mov	sp, r7
24061a74:	bd80      	pop	{r7, pc}
24061a76:	bf00      	nop
24061a78:	fb8fffbf 	.word	0xfb8fffbf

24061a7c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
24061a7c:	b590      	push	{r4, r7, lr}
24061a7e:	b087      	sub	sp, #28
24061a80:	af00      	add	r7, sp, #0
24061a82:	60f8      	str	r0, [r7, #12]
24061a84:	60b9      	str	r1, [r7, #8]
24061a86:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
24061a88:	68fb      	ldr	r3, [r7, #12]
24061a8a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
24061a8e:	2b01      	cmp	r3, #1
24061a90:	d101      	bne.n	24061a96 <HAL_RTC_SetTime+0x1a>
24061a92:	2302      	movs	r3, #2
24061a94:	e089      	b.n	24061baa <HAL_RTC_SetTime+0x12e>
24061a96:	68fb      	ldr	r3, [r7, #12]
24061a98:	2201      	movs	r2, #1
24061a9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
24061a9e:	68fb      	ldr	r3, [r7, #12]
24061aa0:	2202      	movs	r2, #2
24061aa2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
24061aa6:	68fb      	ldr	r3, [r7, #12]
24061aa8:	681b      	ldr	r3, [r3, #0]
24061aaa:	22ca      	movs	r2, #202	@ 0xca
24061aac:	625a      	str	r2, [r3, #36]	@ 0x24
24061aae:	68fb      	ldr	r3, [r7, #12]
24061ab0:	681b      	ldr	r3, [r3, #0]
24061ab2:	2253      	movs	r2, #83	@ 0x53
24061ab4:	625a      	str	r2, [r3, #36]	@ 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
24061ab6:	68f8      	ldr	r0, [r7, #12]
24061ab8:	f000 f9d4 	bl	24061e64 <RTC_EnterInitMode>
24061abc:	4603      	mov	r3, r0
24061abe:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
24061ac0:	7cfb      	ldrb	r3, [r7, #19]
24061ac2:	2b00      	cmp	r3, #0
24061ac4:	d161      	bne.n	24061b8a <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
24061ac6:	687b      	ldr	r3, [r7, #4]
24061ac8:	2b00      	cmp	r3, #0
24061aca:	d126      	bne.n	24061b1a <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
24061acc:	68fb      	ldr	r3, [r7, #12]
24061ace:	681b      	ldr	r3, [r3, #0]
24061ad0:	699b      	ldr	r3, [r3, #24]
24061ad2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
24061ad6:	2b00      	cmp	r3, #0
24061ad8:	d102      	bne.n	24061ae0 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
24061ada:	68bb      	ldr	r3, [r7, #8]
24061adc:	2200      	movs	r2, #0
24061ade:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
24061ae0:	68bb      	ldr	r3, [r7, #8]
24061ae2:	781b      	ldrb	r3, [r3, #0]
24061ae4:	4618      	mov	r0, r3
24061ae6:	f000 fa31 	bl	24061f4c <RTC_ByteToBcd2>
24061aea:	4603      	mov	r3, r0
24061aec:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
24061aee:	68bb      	ldr	r3, [r7, #8]
24061af0:	785b      	ldrb	r3, [r3, #1]
24061af2:	4618      	mov	r0, r3
24061af4:	f000 fa2a 	bl	24061f4c <RTC_ByteToBcd2>
24061af8:	4603      	mov	r3, r0
24061afa:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
24061afc:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
24061afe:	68bb      	ldr	r3, [r7, #8]
24061b00:	789b      	ldrb	r3, [r3, #2]
24061b02:	4618      	mov	r0, r3
24061b04:	f000 fa22 	bl	24061f4c <RTC_ByteToBcd2>
24061b08:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
24061b0a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
24061b0e:	68bb      	ldr	r3, [r7, #8]
24061b10:	78db      	ldrb	r3, [r3, #3]
24061b12:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
24061b14:	4313      	orrs	r3, r2
24061b16:	617b      	str	r3, [r7, #20]
24061b18:	e018      	b.n	24061b4c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
24061b1a:	68fb      	ldr	r3, [r7, #12]
24061b1c:	681b      	ldr	r3, [r3, #0]
24061b1e:	699b      	ldr	r3, [r3, #24]
24061b20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
24061b24:	2b00      	cmp	r3, #0
24061b26:	d102      	bne.n	24061b2e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
24061b28:	68bb      	ldr	r3, [r7, #8]
24061b2a:	2200      	movs	r2, #0
24061b2c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
24061b2e:	68bb      	ldr	r3, [r7, #8]
24061b30:	781b      	ldrb	r3, [r3, #0]
24061b32:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
24061b34:	68bb      	ldr	r3, [r7, #8]
24061b36:	785b      	ldrb	r3, [r3, #1]
24061b38:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
24061b3a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
24061b3c:	68ba      	ldr	r2, [r7, #8]
24061b3e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
24061b40:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
24061b42:	68bb      	ldr	r3, [r7, #8]
24061b44:	78db      	ldrb	r3, [r3, #3]
24061b46:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
24061b48:	4313      	orrs	r3, r2
24061b4a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
24061b4c:	68fb      	ldr	r3, [r7, #12]
24061b4e:	681a      	ldr	r2, [r3, #0]
24061b50:	6979      	ldr	r1, [r7, #20]
24061b52:	4b18      	ldr	r3, [pc, #96]	@ (24061bb4 <HAL_RTC_SetTime+0x138>)
24061b54:	400b      	ands	r3, r1
24061b56:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
24061b58:	68fb      	ldr	r3, [r7, #12]
24061b5a:	681b      	ldr	r3, [r3, #0]
24061b5c:	699a      	ldr	r2, [r3, #24]
24061b5e:	68fb      	ldr	r3, [r7, #12]
24061b60:	681b      	ldr	r3, [r3, #0]
24061b62:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
24061b66:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
24061b68:	68fb      	ldr	r3, [r7, #12]
24061b6a:	681b      	ldr	r3, [r3, #0]
24061b6c:	6999      	ldr	r1, [r3, #24]
24061b6e:	68bb      	ldr	r3, [r7, #8]
24061b70:	68da      	ldr	r2, [r3, #12]
24061b72:	68bb      	ldr	r3, [r7, #8]
24061b74:	691b      	ldr	r3, [r3, #16]
24061b76:	431a      	orrs	r2, r3
24061b78:	68fb      	ldr	r3, [r7, #12]
24061b7a:	681b      	ldr	r3, [r3, #0]
24061b7c:	430a      	orrs	r2, r1
24061b7e:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
24061b80:	68f8      	ldr	r0, [r7, #12]
24061b82:	f000 f9a5 	bl	24061ed0 <RTC_ExitInitMode>
24061b86:	4603      	mov	r3, r0
24061b88:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
24061b8a:	68fb      	ldr	r3, [r7, #12]
24061b8c:	681b      	ldr	r3, [r3, #0]
24061b8e:	22ff      	movs	r2, #255	@ 0xff
24061b90:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
24061b92:	7cfb      	ldrb	r3, [r7, #19]
24061b94:	2b00      	cmp	r3, #0
24061b96:	d103      	bne.n	24061ba0 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
24061b98:	68fb      	ldr	r3, [r7, #12]
24061b9a:	2201      	movs	r2, #1
24061b9c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
24061ba0:	68fb      	ldr	r3, [r7, #12]
24061ba2:	2200      	movs	r2, #0
24061ba4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
24061ba8:	7cfb      	ldrb	r3, [r7, #19]
}
24061baa:	4618      	mov	r0, r3
24061bac:	371c      	adds	r7, #28
24061bae:	46bd      	mov	sp, r7
24061bb0:	bd90      	pop	{r4, r7, pc}
24061bb2:	bf00      	nop
24061bb4:	007f7f7f 	.word	0x007f7f7f

24061bb8 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
24061bb8:	b580      	push	{r7, lr}
24061bba:	b086      	sub	sp, #24
24061bbc:	af00      	add	r7, sp, #0
24061bbe:	60f8      	str	r0, [r7, #12]
24061bc0:	60b9      	str	r1, [r7, #8]
24061bc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
24061bc4:	68fb      	ldr	r3, [r7, #12]
24061bc6:	681b      	ldr	r3, [r3, #0]
24061bc8:	689a      	ldr	r2, [r3, #8]
24061bca:	68bb      	ldr	r3, [r7, #8]
24061bcc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
24061bce:	68fb      	ldr	r3, [r7, #12]
24061bd0:	681b      	ldr	r3, [r3, #0]
24061bd2:	691b      	ldr	r3, [r3, #16]
24061bd4:	f3c3 020e 	ubfx	r2, r3, #0, #15
24061bd8:	68bb      	ldr	r3, [r7, #8]
24061bda:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
24061bdc:	68fb      	ldr	r3, [r7, #12]
24061bde:	681b      	ldr	r3, [r3, #0]
24061be0:	681a      	ldr	r2, [r3, #0]
24061be2:	4b22      	ldr	r3, [pc, #136]	@ (24061c6c <HAL_RTC_GetTime+0xb4>)
24061be4:	4013      	ands	r3, r2
24061be6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
24061be8:	697b      	ldr	r3, [r7, #20]
24061bea:	0c1b      	lsrs	r3, r3, #16
24061bec:	b2db      	uxtb	r3, r3
24061bee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
24061bf2:	b2da      	uxtb	r2, r3
24061bf4:	68bb      	ldr	r3, [r7, #8]
24061bf6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
24061bf8:	697b      	ldr	r3, [r7, #20]
24061bfa:	0a1b      	lsrs	r3, r3, #8
24061bfc:	b2db      	uxtb	r3, r3
24061bfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
24061c02:	b2da      	uxtb	r2, r3
24061c04:	68bb      	ldr	r3, [r7, #8]
24061c06:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
24061c08:	697b      	ldr	r3, [r7, #20]
24061c0a:	b2db      	uxtb	r3, r3
24061c0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
24061c10:	b2da      	uxtb	r2, r3
24061c12:	68bb      	ldr	r3, [r7, #8]
24061c14:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
24061c16:	697b      	ldr	r3, [r7, #20]
24061c18:	0d9b      	lsrs	r3, r3, #22
24061c1a:	b2db      	uxtb	r3, r3
24061c1c:	f003 0301 	and.w	r3, r3, #1
24061c20:	b2da      	uxtb	r2, r3
24061c22:	68bb      	ldr	r3, [r7, #8]
24061c24:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
24061c26:	687b      	ldr	r3, [r7, #4]
24061c28:	2b00      	cmp	r3, #0
24061c2a:	d11a      	bne.n	24061c62 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
24061c2c:	68bb      	ldr	r3, [r7, #8]
24061c2e:	781b      	ldrb	r3, [r3, #0]
24061c30:	4618      	mov	r0, r3
24061c32:	f000 f9ab 	bl	24061f8c <RTC_Bcd2ToByte>
24061c36:	4603      	mov	r3, r0
24061c38:	461a      	mov	r2, r3
24061c3a:	68bb      	ldr	r3, [r7, #8]
24061c3c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
24061c3e:	68bb      	ldr	r3, [r7, #8]
24061c40:	785b      	ldrb	r3, [r3, #1]
24061c42:	4618      	mov	r0, r3
24061c44:	f000 f9a2 	bl	24061f8c <RTC_Bcd2ToByte>
24061c48:	4603      	mov	r3, r0
24061c4a:	461a      	mov	r2, r3
24061c4c:	68bb      	ldr	r3, [r7, #8]
24061c4e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
24061c50:	68bb      	ldr	r3, [r7, #8]
24061c52:	789b      	ldrb	r3, [r3, #2]
24061c54:	4618      	mov	r0, r3
24061c56:	f000 f999 	bl	24061f8c <RTC_Bcd2ToByte>
24061c5a:	4603      	mov	r3, r0
24061c5c:	461a      	mov	r2, r3
24061c5e:	68bb      	ldr	r3, [r7, #8]
24061c60:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
24061c62:	2300      	movs	r3, #0
}
24061c64:	4618      	mov	r0, r3
24061c66:	3718      	adds	r7, #24
24061c68:	46bd      	mov	sp, r7
24061c6a:	bd80      	pop	{r7, pc}
24061c6c:	007f7f7f 	.word	0x007f7f7f

24061c70 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
24061c70:	b590      	push	{r4, r7, lr}
24061c72:	b087      	sub	sp, #28
24061c74:	af00      	add	r7, sp, #0
24061c76:	60f8      	str	r0, [r7, #12]
24061c78:	60b9      	str	r1, [r7, #8]
24061c7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
24061c7c:	68fb      	ldr	r3, [r7, #12]
24061c7e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
24061c82:	2b01      	cmp	r3, #1
24061c84:	d101      	bne.n	24061c8a <HAL_RTC_SetDate+0x1a>
24061c86:	2302      	movs	r3, #2
24061c88:	e073      	b.n	24061d72 <HAL_RTC_SetDate+0x102>
24061c8a:	68fb      	ldr	r3, [r7, #12]
24061c8c:	2201      	movs	r2, #1
24061c8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
24061c92:	68fb      	ldr	r3, [r7, #12]
24061c94:	2202      	movs	r2, #2
24061c96:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
24061c9a:	687b      	ldr	r3, [r7, #4]
24061c9c:	2b00      	cmp	r3, #0
24061c9e:	d10e      	bne.n	24061cbe <HAL_RTC_SetDate+0x4e>
24061ca0:	68bb      	ldr	r3, [r7, #8]
24061ca2:	785b      	ldrb	r3, [r3, #1]
24061ca4:	f003 0310 	and.w	r3, r3, #16
24061ca8:	2b00      	cmp	r3, #0
24061caa:	d008      	beq.n	24061cbe <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
24061cac:	68bb      	ldr	r3, [r7, #8]
24061cae:	785b      	ldrb	r3, [r3, #1]
24061cb0:	f023 0310 	bic.w	r3, r3, #16
24061cb4:	b2db      	uxtb	r3, r3
24061cb6:	330a      	adds	r3, #10
24061cb8:	b2da      	uxtb	r2, r3
24061cba:	68bb      	ldr	r3, [r7, #8]
24061cbc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
24061cbe:	687b      	ldr	r3, [r7, #4]
24061cc0:	2b00      	cmp	r3, #0
24061cc2:	d11c      	bne.n	24061cfe <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
24061cc4:	68bb      	ldr	r3, [r7, #8]
24061cc6:	78db      	ldrb	r3, [r3, #3]
24061cc8:	4618      	mov	r0, r3
24061cca:	f000 f93f 	bl	24061f4c <RTC_ByteToBcd2>
24061cce:	4603      	mov	r3, r0
24061cd0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
24061cd2:	68bb      	ldr	r3, [r7, #8]
24061cd4:	785b      	ldrb	r3, [r3, #1]
24061cd6:	4618      	mov	r0, r3
24061cd8:	f000 f938 	bl	24061f4c <RTC_ByteToBcd2>
24061cdc:	4603      	mov	r3, r0
24061cde:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
24061ce0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
24061ce2:	68bb      	ldr	r3, [r7, #8]
24061ce4:	789b      	ldrb	r3, [r3, #2]
24061ce6:	4618      	mov	r0, r3
24061ce8:	f000 f930 	bl	24061f4c <RTC_ByteToBcd2>
24061cec:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
24061cee:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
24061cf2:	68bb      	ldr	r3, [r7, #8]
24061cf4:	781b      	ldrb	r3, [r3, #0]
24061cf6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
24061cf8:	4313      	orrs	r3, r2
24061cfa:	617b      	str	r3, [r7, #20]
24061cfc:	e00e      	b.n	24061d1c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
24061cfe:	68bb      	ldr	r3, [r7, #8]
24061d00:	78db      	ldrb	r3, [r3, #3]
24061d02:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
24061d04:	68bb      	ldr	r3, [r7, #8]
24061d06:	785b      	ldrb	r3, [r3, #1]
24061d08:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
24061d0a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
24061d0c:	68ba      	ldr	r2, [r7, #8]
24061d0e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
24061d10:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
24061d12:	68bb      	ldr	r3, [r7, #8]
24061d14:	781b      	ldrb	r3, [r3, #0]
24061d16:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
24061d18:	4313      	orrs	r3, r2
24061d1a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
24061d1c:	68fb      	ldr	r3, [r7, #12]
24061d1e:	681b      	ldr	r3, [r3, #0]
24061d20:	22ca      	movs	r2, #202	@ 0xca
24061d22:	625a      	str	r2, [r3, #36]	@ 0x24
24061d24:	68fb      	ldr	r3, [r7, #12]
24061d26:	681b      	ldr	r3, [r3, #0]
24061d28:	2253      	movs	r2, #83	@ 0x53
24061d2a:	625a      	str	r2, [r3, #36]	@ 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
24061d2c:	68f8      	ldr	r0, [r7, #12]
24061d2e:	f000 f899 	bl	24061e64 <RTC_EnterInitMode>
24061d32:	4603      	mov	r3, r0
24061d34:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
24061d36:	7cfb      	ldrb	r3, [r7, #19]
24061d38:	2b00      	cmp	r3, #0
24061d3a:	d10a      	bne.n	24061d52 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
24061d3c:	68fb      	ldr	r3, [r7, #12]
24061d3e:	681a      	ldr	r2, [r3, #0]
24061d40:	6979      	ldr	r1, [r7, #20]
24061d42:	4b0e      	ldr	r3, [pc, #56]	@ (24061d7c <HAL_RTC_SetDate+0x10c>)
24061d44:	400b      	ands	r3, r1
24061d46:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
24061d48:	68f8      	ldr	r0, [r7, #12]
24061d4a:	f000 f8c1 	bl	24061ed0 <RTC_ExitInitMode>
24061d4e:	4603      	mov	r3, r0
24061d50:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
24061d52:	68fb      	ldr	r3, [r7, #12]
24061d54:	681b      	ldr	r3, [r3, #0]
24061d56:	22ff      	movs	r2, #255	@ 0xff
24061d58:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
24061d5a:	7cfb      	ldrb	r3, [r7, #19]
24061d5c:	2b00      	cmp	r3, #0
24061d5e:	d103      	bne.n	24061d68 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
24061d60:	68fb      	ldr	r3, [r7, #12]
24061d62:	2201      	movs	r2, #1
24061d64:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
24061d68:	68fb      	ldr	r3, [r7, #12]
24061d6a:	2200      	movs	r2, #0
24061d6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
24061d70:	7cfb      	ldrb	r3, [r7, #19]


}
24061d72:	4618      	mov	r0, r3
24061d74:	371c      	adds	r7, #28
24061d76:	46bd      	mov	sp, r7
24061d78:	bd90      	pop	{r4, r7, pc}
24061d7a:	bf00      	nop
24061d7c:	00ffff3f 	.word	0x00ffff3f

24061d80 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
24061d80:	b580      	push	{r7, lr}
24061d82:	b086      	sub	sp, #24
24061d84:	af00      	add	r7, sp, #0
24061d86:	60f8      	str	r0, [r7, #12]
24061d88:	60b9      	str	r1, [r7, #8]
24061d8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
24061d8c:	68fb      	ldr	r3, [r7, #12]
24061d8e:	681b      	ldr	r3, [r3, #0]
24061d90:	685a      	ldr	r2, [r3, #4]
24061d92:	4b21      	ldr	r3, [pc, #132]	@ (24061e18 <HAL_RTC_GetDate+0x98>)
24061d94:	4013      	ands	r3, r2
24061d96:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
24061d98:	697b      	ldr	r3, [r7, #20]
24061d9a:	0c1b      	lsrs	r3, r3, #16
24061d9c:	b2da      	uxtb	r2, r3
24061d9e:	68bb      	ldr	r3, [r7, #8]
24061da0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
24061da2:	697b      	ldr	r3, [r7, #20]
24061da4:	0a1b      	lsrs	r3, r3, #8
24061da6:	b2db      	uxtb	r3, r3
24061da8:	f003 031f 	and.w	r3, r3, #31
24061dac:	b2da      	uxtb	r2, r3
24061dae:	68bb      	ldr	r3, [r7, #8]
24061db0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
24061db2:	697b      	ldr	r3, [r7, #20]
24061db4:	b2db      	uxtb	r3, r3
24061db6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
24061dba:	b2da      	uxtb	r2, r3
24061dbc:	68bb      	ldr	r3, [r7, #8]
24061dbe:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
24061dc0:	697b      	ldr	r3, [r7, #20]
24061dc2:	0b5b      	lsrs	r3, r3, #13
24061dc4:	b2db      	uxtb	r3, r3
24061dc6:	f003 0307 	and.w	r3, r3, #7
24061dca:	b2da      	uxtb	r2, r3
24061dcc:	68bb      	ldr	r3, [r7, #8]
24061dce:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
24061dd0:	687b      	ldr	r3, [r7, #4]
24061dd2:	2b00      	cmp	r3, #0
24061dd4:	d11a      	bne.n	24061e0c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
24061dd6:	68bb      	ldr	r3, [r7, #8]
24061dd8:	78db      	ldrb	r3, [r3, #3]
24061dda:	4618      	mov	r0, r3
24061ddc:	f000 f8d6 	bl	24061f8c <RTC_Bcd2ToByte>
24061de0:	4603      	mov	r3, r0
24061de2:	461a      	mov	r2, r3
24061de4:	68bb      	ldr	r3, [r7, #8]
24061de6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
24061de8:	68bb      	ldr	r3, [r7, #8]
24061dea:	785b      	ldrb	r3, [r3, #1]
24061dec:	4618      	mov	r0, r3
24061dee:	f000 f8cd 	bl	24061f8c <RTC_Bcd2ToByte>
24061df2:	4603      	mov	r3, r0
24061df4:	461a      	mov	r2, r3
24061df6:	68bb      	ldr	r3, [r7, #8]
24061df8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
24061dfa:	68bb      	ldr	r3, [r7, #8]
24061dfc:	789b      	ldrb	r3, [r3, #2]
24061dfe:	4618      	mov	r0, r3
24061e00:	f000 f8c4 	bl	24061f8c <RTC_Bcd2ToByte>
24061e04:	4603      	mov	r3, r0
24061e06:	461a      	mov	r2, r3
24061e08:	68bb      	ldr	r3, [r7, #8]
24061e0a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
24061e0c:	2300      	movs	r3, #0
}
24061e0e:	4618      	mov	r0, r3
24061e10:	3718      	adds	r7, #24
24061e12:	46bd      	mov	sp, r7
24061e14:	bd80      	pop	{r7, pc}
24061e16:	bf00      	nop
24061e18:	00ffff3f 	.word	0x00ffff3f

24061e1c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
24061e1c:	b580      	push	{r7, lr}
24061e1e:	b084      	sub	sp, #16
24061e20:	af00      	add	r7, sp, #0
24061e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
24061e24:	687b      	ldr	r3, [r7, #4]
24061e26:	681b      	ldr	r3, [r3, #0]
24061e28:	4a0d      	ldr	r2, [pc, #52]	@ (24061e60 <HAL_RTC_WaitForSynchro+0x44>)
24061e2a:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
#endif /* TAMP */

  tickstart = HAL_GetTick();
24061e2c:	f7f4 fe28 	bl	24056a80 <HAL_GetTick>
24061e30:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
24061e32:	e009      	b.n	24061e48 <HAL_RTC_WaitForSynchro+0x2c>
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
24061e34:	f7f4 fe24 	bl	24056a80 <HAL_GetTick>
24061e38:	4602      	mov	r2, r0
24061e3a:	68fb      	ldr	r3, [r7, #12]
24061e3c:	1ad3      	subs	r3, r2, r3
24061e3e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
24061e42:	d901      	bls.n	24061e48 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
24061e44:	2303      	movs	r3, #3
24061e46:	e007      	b.n	24061e58 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
24061e48:	687b      	ldr	r3, [r7, #4]
24061e4a:	681b      	ldr	r3, [r3, #0]
24061e4c:	68db      	ldr	r3, [r3, #12]
24061e4e:	f003 0320 	and.w	r3, r3, #32
24061e52:	2b00      	cmp	r3, #0
24061e54:	d0ee      	beq.n	24061e34 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
24061e56:	2300      	movs	r3, #0
}
24061e58:	4618      	mov	r0, r3
24061e5a:	3710      	adds	r7, #16
24061e5c:	46bd      	mov	sp, r7
24061e5e:	bd80      	pop	{r7, pc}
24061e60:	0001005f 	.word	0x0001005f

24061e64 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
24061e64:	b580      	push	{r7, lr}
24061e66:	b084      	sub	sp, #16
24061e68:	af00      	add	r7, sp, #0
24061e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
24061e6c:	2300      	movs	r3, #0
24061e6e:	73fb      	strb	r3, [r7, #15]
  /* Check if the Initialization mode is set */
#if defined(TAMP)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
24061e70:	687b      	ldr	r3, [r7, #4]
24061e72:	681b      	ldr	r3, [r3, #0]
24061e74:	68db      	ldr	r3, [r3, #12]
24061e76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
24061e7a:	2b00      	cmp	r3, #0
24061e7c:	d123      	bne.n	24061ec6 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
24061e7e:	687b      	ldr	r3, [r7, #4]
24061e80:	681b      	ldr	r3, [r3, #0]
24061e82:	68da      	ldr	r2, [r3, #12]
24061e84:	687b      	ldr	r3, [r7, #4]
24061e86:	681b      	ldr	r3, [r3, #0]
24061e88:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
24061e8c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
24061e8e:	f7f4 fdf7 	bl	24056a80 <HAL_GetTick>
24061e92:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
24061e94:	e00d      	b.n	24061eb2 <RTC_EnterInitMode+0x4e>

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
24061e96:	f7f4 fdf3 	bl	24056a80 <HAL_GetTick>
24061e9a:	4602      	mov	r2, r0
24061e9c:	68bb      	ldr	r3, [r7, #8]
24061e9e:	1ad3      	subs	r3, r2, r3
24061ea0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
24061ea4:	d905      	bls.n	24061eb2 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
24061ea6:	2303      	movs	r3, #3
24061ea8:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
24061eaa:	687b      	ldr	r3, [r7, #4]
24061eac:	2203      	movs	r2, #3
24061eae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
24061eb2:	687b      	ldr	r3, [r7, #4]
24061eb4:	681b      	ldr	r3, [r3, #0]
24061eb6:	68db      	ldr	r3, [r3, #12]
24061eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
24061ebc:	2b00      	cmp	r3, #0
24061ebe:	d102      	bne.n	24061ec6 <RTC_EnterInitMode+0x62>
24061ec0:	7bfb      	ldrb	r3, [r7, #15]
24061ec2:	2b03      	cmp	r3, #3
24061ec4:	d1e7      	bne.n	24061e96 <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
24061ec6:	7bfb      	ldrb	r3, [r7, #15]
}
24061ec8:	4618      	mov	r0, r3
24061eca:	3710      	adds	r7, #16
24061ecc:	46bd      	mov	sp, r7
24061ece:	bd80      	pop	{r7, pc}

24061ed0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
24061ed0:	b580      	push	{r7, lr}
24061ed2:	b084      	sub	sp, #16
24061ed4:	af00      	add	r7, sp, #0
24061ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
24061ed8:	2300      	movs	r3, #0
24061eda:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
24061edc:	4b1a      	ldr	r3, [pc, #104]	@ (24061f48 <RTC_ExitInitMode+0x78>)
24061ede:	68db      	ldr	r3, [r3, #12]
24061ee0:	4a19      	ldr	r2, [pc, #100]	@ (24061f48 <RTC_ExitInitMode+0x78>)
24061ee2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
24061ee6:	60d3      	str	r3, [r2, #12]
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
24061ee8:	4b17      	ldr	r3, [pc, #92]	@ (24061f48 <RTC_ExitInitMode+0x78>)
24061eea:	699b      	ldr	r3, [r3, #24]
24061eec:	f003 0320 	and.w	r3, r3, #32
24061ef0:	2b00      	cmp	r3, #0
24061ef2:	d10c      	bne.n	24061f0e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
24061ef4:	6878      	ldr	r0, [r7, #4]
24061ef6:	f7ff ff91 	bl	24061e1c <HAL_RTC_WaitForSynchro>
24061efa:	4603      	mov	r3, r0
24061efc:	2b00      	cmp	r3, #0
24061efe:	d01e      	beq.n	24061f3e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
24061f00:	687b      	ldr	r3, [r7, #4]
24061f02:	2203      	movs	r2, #3
24061f04:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
24061f08:	2303      	movs	r3, #3
24061f0a:	73fb      	strb	r3, [r7, #15]
24061f0c:	e017      	b.n	24061f3e <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
24061f0e:	4b0e      	ldr	r3, [pc, #56]	@ (24061f48 <RTC_ExitInitMode+0x78>)
24061f10:	699b      	ldr	r3, [r3, #24]
24061f12:	4a0d      	ldr	r2, [pc, #52]	@ (24061f48 <RTC_ExitInitMode+0x78>)
24061f14:	f023 0320 	bic.w	r3, r3, #32
24061f18:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
24061f1a:	6878      	ldr	r0, [r7, #4]
24061f1c:	f7ff ff7e 	bl	24061e1c <HAL_RTC_WaitForSynchro>
24061f20:	4603      	mov	r3, r0
24061f22:	2b00      	cmp	r3, #0
24061f24:	d005      	beq.n	24061f32 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
24061f26:	687b      	ldr	r3, [r7, #4]
24061f28:	2203      	movs	r2, #3
24061f2a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
24061f2e:	2303      	movs	r3, #3
24061f30:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
24061f32:	4b05      	ldr	r3, [pc, #20]	@ (24061f48 <RTC_ExitInitMode+0x78>)
24061f34:	699b      	ldr	r3, [r3, #24]
24061f36:	4a04      	ldr	r2, [pc, #16]	@ (24061f48 <RTC_ExitInitMode+0x78>)
24061f38:	f043 0320 	orr.w	r3, r3, #32
24061f3c:	6193      	str	r3, [r2, #24]
  }

  return status;
24061f3e:	7bfb      	ldrb	r3, [r7, #15]
}
24061f40:	4618      	mov	r0, r3
24061f42:	3710      	adds	r7, #16
24061f44:	46bd      	mov	sp, r7
24061f46:	bd80      	pop	{r7, pc}
24061f48:	58004000 	.word	0x58004000

24061f4c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
24061f4c:	b480      	push	{r7}
24061f4e:	b085      	sub	sp, #20
24061f50:	af00      	add	r7, sp, #0
24061f52:	4603      	mov	r3, r0
24061f54:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
24061f56:	2300      	movs	r3, #0
24061f58:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
24061f5a:	79fb      	ldrb	r3, [r7, #7]
24061f5c:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
24061f5e:	e005      	b.n	24061f6c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
24061f60:	68fb      	ldr	r3, [r7, #12]
24061f62:	3301      	adds	r3, #1
24061f64:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
24061f66:	7afb      	ldrb	r3, [r7, #11]
24061f68:	3b0a      	subs	r3, #10
24061f6a:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
24061f6c:	7afb      	ldrb	r3, [r7, #11]
24061f6e:	2b09      	cmp	r3, #9
24061f70:	d8f6      	bhi.n	24061f60 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
24061f72:	68fb      	ldr	r3, [r7, #12]
24061f74:	b2db      	uxtb	r3, r3
24061f76:	011b      	lsls	r3, r3, #4
24061f78:	b2da      	uxtb	r2, r3
24061f7a:	7afb      	ldrb	r3, [r7, #11]
24061f7c:	4313      	orrs	r3, r2
24061f7e:	b2db      	uxtb	r3, r3
}
24061f80:	4618      	mov	r0, r3
24061f82:	3714      	adds	r7, #20
24061f84:	46bd      	mov	sp, r7
24061f86:	f85d 7b04 	ldr.w	r7, [sp], #4
24061f8a:	4770      	bx	lr

24061f8c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
24061f8c:	b480      	push	{r7}
24061f8e:	b085      	sub	sp, #20
24061f90:	af00      	add	r7, sp, #0
24061f92:	4603      	mov	r3, r0
24061f94:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
24061f96:	79fb      	ldrb	r3, [r7, #7]
24061f98:	091b      	lsrs	r3, r3, #4
24061f9a:	b2db      	uxtb	r3, r3
24061f9c:	461a      	mov	r2, r3
24061f9e:	0092      	lsls	r2, r2, #2
24061fa0:	4413      	add	r3, r2
24061fa2:	005b      	lsls	r3, r3, #1
24061fa4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
24061fa6:	79fb      	ldrb	r3, [r7, #7]
24061fa8:	f003 030f 	and.w	r3, r3, #15
24061fac:	b2da      	uxtb	r2, r3
24061fae:	7bfb      	ldrb	r3, [r7, #15]
24061fb0:	4413      	add	r3, r2
24061fb2:	b2db      	uxtb	r3, r3
}
24061fb4:	4618      	mov	r0, r3
24061fb6:	3714      	adds	r7, #20
24061fb8:	46bd      	mov	sp, r7
24061fba:	f85d 7b04 	ldr.w	r7, [sp], #4
24061fbe:	4770      	bx	lr

24061fc0 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
24061fc0:	b580      	push	{r7, lr}
24061fc2:	b086      	sub	sp, #24
24061fc4:	af00      	add	r7, sp, #0
24061fc6:	60f8      	str	r0, [r7, #12]
24061fc8:	60b9      	str	r1, [r7, #8]
24061fca:	607a      	str	r2, [r7, #4]
24061fcc:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
24061fce:	68bb      	ldr	r3, [r7, #8]
24061fd0:	2b02      	cmp	r3, #2
24061fd2:	d904      	bls.n	24061fde <HAL_SAI_InitProtocol+0x1e>
24061fd4:	68bb      	ldr	r3, [r7, #8]
24061fd6:	3b03      	subs	r3, #3
24061fd8:	2b01      	cmp	r3, #1
24061fda:	d812      	bhi.n	24062002 <HAL_SAI_InitProtocol+0x42>
24061fdc:	e008      	b.n	24061ff0 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
24061fde:	683b      	ldr	r3, [r7, #0]
24061fe0:	687a      	ldr	r2, [r7, #4]
24061fe2:	68b9      	ldr	r1, [r7, #8]
24061fe4:	68f8      	ldr	r0, [r7, #12]
24061fe6:	f000 fd2d 	bl	24062a44 <SAI_InitI2S>
24061fea:	4603      	mov	r3, r0
24061fec:	75fb      	strb	r3, [r7, #23]
      break;
24061fee:	e00b      	b.n	24062008 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
24061ff0:	683b      	ldr	r3, [r7, #0]
24061ff2:	687a      	ldr	r2, [r7, #4]
24061ff4:	68b9      	ldr	r1, [r7, #8]
24061ff6:	68f8      	ldr	r0, [r7, #12]
24061ff8:	f000 fdd6 	bl	24062ba8 <SAI_InitPCM>
24061ffc:	4603      	mov	r3, r0
24061ffe:	75fb      	strb	r3, [r7, #23]
      break;
24062000:	e002      	b.n	24062008 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
24062002:	2301      	movs	r3, #1
24062004:	75fb      	strb	r3, [r7, #23]
      break;
24062006:	bf00      	nop
  }

  if (status == HAL_OK)
24062008:	7dfb      	ldrb	r3, [r7, #23]
2406200a:	2b00      	cmp	r3, #0
2406200c:	d104      	bne.n	24062018 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
2406200e:	68f8      	ldr	r0, [r7, #12]
24062010:	f000 f808 	bl	24062024 <HAL_SAI_Init>
24062014:	4603      	mov	r3, r0
24062016:	75fb      	strb	r3, [r7, #23]
  }

  return status;
24062018:	7dfb      	ldrb	r3, [r7, #23]
}
2406201a:	4618      	mov	r0, r3
2406201c:	3718      	adds	r7, #24
2406201e:	46bd      	mov	sp, r7
24062020:	bd80      	pop	{r7, pc}
	...

24062024 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
24062024:	b580      	push	{r7, lr}
24062026:	b08a      	sub	sp, #40	@ 0x28
24062028:	af00      	add	r7, sp, #0
2406202a:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
2406202c:	687b      	ldr	r3, [r7, #4]
2406202e:	2b00      	cmp	r3, #0
24062030:	d101      	bne.n	24062036 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
24062032:	2301      	movs	r3, #1
24062034:	e1f2      	b.n	2406241c <HAL_SAI_Init+0x3f8>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
24062036:	687b      	ldr	r3, [r7, #4]
24062038:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
2406203c:	2b01      	cmp	r3, #1
2406203e:	d10e      	bne.n	2406205e <HAL_SAI_Init+0x3a>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
    {
      return HAL_ERROR;
    }
#else
    if ((hsai->Instance != SAI1_Block_A) ||
24062040:	687b      	ldr	r3, [r7, #4]
24062042:	681b      	ldr	r3, [r3, #0]
24062044:	4a94      	ldr	r2, [pc, #592]	@ (24062298 <HAL_SAI_Init+0x274>)
24062046:	4293      	cmp	r3, r2
24062048:	d107      	bne.n	2406205a <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
2406204a:	687b      	ldr	r3, [r7, #4]
2406204c:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
2406204e:	2b01      	cmp	r3, #1
24062050:	d103      	bne.n	2406205a <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
24062052:	687b      	ldr	r3, [r7, #4]
24062054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
24062056:	2b00      	cmp	r3, #0
24062058:	d001      	beq.n	2406205e <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
2406205a:	2301      	movs	r3, #1
2406205c:	e1de      	b.n	2406241c <HAL_SAI_Init+0x3f8>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
2406205e:	687b      	ldr	r3, [r7, #4]
24062060:	681b      	ldr	r3, [r3, #0]
24062062:	4a8d      	ldr	r2, [pc, #564]	@ (24062298 <HAL_SAI_Init+0x274>)
24062064:	4293      	cmp	r3, r2
24062066:	d004      	beq.n	24062072 <HAL_SAI_Init+0x4e>
24062068:	687b      	ldr	r3, [r7, #4]
2406206a:	681b      	ldr	r3, [r3, #0]
2406206c:	4a8b      	ldr	r2, [pc, #556]	@ (2406229c <HAL_SAI_Init+0x278>)
2406206e:	4293      	cmp	r3, r2
24062070:	d102      	bne.n	24062078 <HAL_SAI_Init+0x54>
  {
    SaiBaseAddress = SAI1;
24062072:	4b8b      	ldr	r3, [pc, #556]	@ (240622a0 <HAL_SAI_Init+0x27c>)
24062074:	61bb      	str	r3, [r7, #24]
24062076:	e00e      	b.n	24062096 <HAL_SAI_Init+0x72>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
24062078:	687b      	ldr	r3, [r7, #4]
2406207a:	681b      	ldr	r3, [r3, #0]
2406207c:	4a89      	ldr	r2, [pc, #548]	@ (240622a4 <HAL_SAI_Init+0x280>)
2406207e:	4293      	cmp	r3, r2
24062080:	d004      	beq.n	2406208c <HAL_SAI_Init+0x68>
24062082:	687b      	ldr	r3, [r7, #4]
24062084:	681b      	ldr	r3, [r3, #0]
24062086:	4a88      	ldr	r2, [pc, #544]	@ (240622a8 <HAL_SAI_Init+0x284>)
24062088:	4293      	cmp	r3, r2
2406208a:	d102      	bne.n	24062092 <HAL_SAI_Init+0x6e>
  {
    SaiBaseAddress = SAI2;
2406208c:	4b87      	ldr	r3, [pc, #540]	@ (240622ac <HAL_SAI_Init+0x288>)
2406208e:	61bb      	str	r3, [r7, #24]
24062090:	e001      	b.n	24062096 <HAL_SAI_Init+0x72>
    SaiBaseAddress = SAI4;
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
24062092:	2301      	movs	r3, #1
24062094:	e1c2      	b.n	2406241c <HAL_SAI_Init+0x3f8>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
24062096:	687b      	ldr	r3, [r7, #4]
24062098:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
2406209c:	b2db      	uxtb	r3, r3
2406209e:	2b00      	cmp	r3, #0
240620a0:	d106      	bne.n	240620b0 <HAL_SAI_Init+0x8c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
240620a2:	687b      	ldr	r3, [r7, #4]
240620a4:	2200      	movs	r2, #0
240620a6:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
240620aa:	6878      	ldr	r0, [r7, #4]
240620ac:	f7f4 f9a4 	bl	240563f8 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
240620b0:	6878      	ldr	r0, [r7, #4]
240620b2:	f000 fe33 	bl	24062d1c <SAI_Disable>
240620b6:	4603      	mov	r3, r0
240620b8:	2b00      	cmp	r3, #0
240620ba:	d001      	beq.n	240620c0 <HAL_SAI_Init+0x9c>
  {
    return HAL_ERROR;
240620bc:	2301      	movs	r3, #1
240620be:	e1ad      	b.n	2406241c <HAL_SAI_Init+0x3f8>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
240620c0:	687b      	ldr	r3, [r7, #4]
240620c2:	2202      	movs	r2, #2
240620c4:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
240620c8:	687b      	ldr	r3, [r7, #4]
240620ca:	68db      	ldr	r3, [r3, #12]
240620cc:	2b02      	cmp	r3, #2
240620ce:	d00c      	beq.n	240620ea <HAL_SAI_Init+0xc6>
240620d0:	2b02      	cmp	r3, #2
240620d2:	d80d      	bhi.n	240620f0 <HAL_SAI_Init+0xcc>
240620d4:	2b00      	cmp	r3, #0
240620d6:	d002      	beq.n	240620de <HAL_SAI_Init+0xba>
240620d8:	2b01      	cmp	r3, #1
240620da:	d003      	beq.n	240620e4 <HAL_SAI_Init+0xc0>
240620dc:	e008      	b.n	240620f0 <HAL_SAI_Init+0xcc>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
240620de:	2300      	movs	r3, #0
240620e0:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
240620e2:	e008      	b.n	240620f6 <HAL_SAI_Init+0xd2>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
240620e4:	2310      	movs	r3, #16
240620e6:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
240620e8:	e005      	b.n	240620f6 <HAL_SAI_Init+0xd2>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
240620ea:	2320      	movs	r3, #32
240620ec:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
240620ee:	e002      	b.n	240620f6 <HAL_SAI_Init+0xd2>
    default:
      tmpregisterGCR = 0;
240620f0:	2300      	movs	r3, #0
240620f2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
240620f4:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
240620f6:	687b      	ldr	r3, [r7, #4]
240620f8:	689b      	ldr	r3, [r3, #8]
240620fa:	2b03      	cmp	r3, #3
240620fc:	d81d      	bhi.n	2406213a <HAL_SAI_Init+0x116>
240620fe:	a201      	add	r2, pc, #4	@ (adr r2, 24062104 <HAL_SAI_Init+0xe0>)
24062100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24062104:	24062115 	.word	0x24062115
24062108:	2406211b 	.word	0x2406211b
2406210c:	24062123 	.word	0x24062123
24062110:	2406212b 	.word	0x2406212b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
24062114:	2300      	movs	r3, #0
24062116:	61fb      	str	r3, [r7, #28]
      break;
24062118:	e012      	b.n	24062140 <HAL_SAI_Init+0x11c>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
2406211a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
2406211e:	61fb      	str	r3, [r7, #28]
      break;
24062120:	e00e      	b.n	24062140 <HAL_SAI_Init+0x11c>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
24062122:	f44f 6300 	mov.w	r3, #2048	@ 0x800
24062126:	61fb      	str	r3, [r7, #28]
      break;
24062128:	e00a      	b.n	24062140 <HAL_SAI_Init+0x11c>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
2406212a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
2406212e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
24062130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
24062132:	f043 0301 	orr.w	r3, r3, #1
24062136:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
24062138:	e002      	b.n	24062140 <HAL_SAI_Init+0x11c>
      syncen_bits = SAI_xCR1_SYNCEN_1;
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
      break;
#endif /* SAI4 */
    default:
      syncen_bits = 0;
2406213a:	2300      	movs	r3, #0
2406213c:	61fb      	str	r3, [r7, #28]
      break;
2406213e:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
24062140:	69bb      	ldr	r3, [r7, #24]
24062142:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
24062144:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
24062146:	687b      	ldr	r3, [r7, #4]
24062148:	6a1b      	ldr	r3, [r3, #32]
2406214a:	2b00      	cmp	r3, #0
2406214c:	f000 808a 	beq.w	24062264 <HAL_SAI_Init+0x240>
  {
    uint32_t freq = 0;
24062150:	2300      	movs	r3, #0
24062152:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
24062154:	687b      	ldr	r3, [r7, #4]
24062156:	681b      	ldr	r3, [r3, #0]
24062158:	4a4f      	ldr	r2, [pc, #316]	@ (24062298 <HAL_SAI_Init+0x274>)
2406215a:	4293      	cmp	r3, r2
2406215c:	d004      	beq.n	24062168 <HAL_SAI_Init+0x144>
2406215e:	687b      	ldr	r3, [r7, #4]
24062160:	681b      	ldr	r3, [r3, #0]
24062162:	4a4e      	ldr	r2, [pc, #312]	@ (2406229c <HAL_SAI_Init+0x278>)
24062164:	4293      	cmp	r3, r2
24062166:	d106      	bne.n	24062176 <HAL_SAI_Init+0x152>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
24062168:	f44f 7080 	mov.w	r0, #256	@ 0x100
2406216c:	f04f 0100 	mov.w	r1, #0
24062170:	f7fe f9b2 	bl	240604d8 <HAL_RCCEx_GetPeriphCLKFreq>
24062174:	6178      	str	r0, [r7, #20]
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
    }
#else
    if (hsai->Instance == SAI2_Block_A)
24062176:	687b      	ldr	r3, [r7, #4]
24062178:	681b      	ldr	r3, [r3, #0]
2406217a:	4a4a      	ldr	r2, [pc, #296]	@ (240622a4 <HAL_SAI_Init+0x280>)
2406217c:	4293      	cmp	r3, r2
2406217e:	d106      	bne.n	2406218e <HAL_SAI_Init+0x16a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2A);
24062180:	f44f 7000 	mov.w	r0, #512	@ 0x200
24062184:	f04f 0100 	mov.w	r1, #0
24062188:	f7fe f9a6 	bl	240604d8 <HAL_RCCEx_GetPeriphCLKFreq>
2406218c:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI2_Block_B)
2406218e:	687b      	ldr	r3, [r7, #4]
24062190:	681b      	ldr	r3, [r3, #0]
24062192:	4a45      	ldr	r2, [pc, #276]	@ (240622a8 <HAL_SAI_Init+0x284>)
24062194:	4293      	cmp	r3, r2
24062196:	d106      	bne.n	240621a6 <HAL_SAI_Init+0x182>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2B);
24062198:	f44f 6080 	mov.w	r0, #1024	@ 0x400
2406219c:	f04f 0100 	mov.w	r1, #0
240621a0:	f7fe f99a 	bl	240604d8 <HAL_RCCEx_GetPeriphCLKFreq>
240621a4:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
240621a6:	687b      	ldr	r3, [r7, #4]
240621a8:	699b      	ldr	r3, [r3, #24]
240621aa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
240621ae:	d120      	bne.n	240621f2 <HAL_SAI_Init+0x1ce>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
240621b0:	687b      	ldr	r3, [r7, #4]
240621b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
240621b4:	2b04      	cmp	r3, #4
240621b6:	d102      	bne.n	240621be <HAL_SAI_Init+0x19a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
240621b8:	2340      	movs	r3, #64	@ 0x40
240621ba:	60fb      	str	r3, [r7, #12]
240621bc:	e00a      	b.n	240621d4 <HAL_SAI_Init+0x1b0>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
240621be:	687b      	ldr	r3, [r7, #4]
240621c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
240621c2:	2b08      	cmp	r3, #8
240621c4:	d103      	bne.n	240621ce <HAL_SAI_Init+0x1aa>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
240621c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
240621ca:	60fb      	str	r3, [r7, #12]
240621cc:	e002      	b.n	240621d4 <HAL_SAI_Init+0x1b0>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
240621ce:	687b      	ldr	r3, [r7, #4]
240621d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
240621d2:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
240621d4:	697a      	ldr	r2, [r7, #20]
240621d6:	4613      	mov	r3, r2
240621d8:	009b      	lsls	r3, r3, #2
240621da:	4413      	add	r3, r2
240621dc:	005b      	lsls	r3, r3, #1
240621de:	4619      	mov	r1, r3
240621e0:	687b      	ldr	r3, [r7, #4]
240621e2:	6a1b      	ldr	r3, [r3, #32]
240621e4:	68fa      	ldr	r2, [r7, #12]
240621e6:	fb02 f303 	mul.w	r3, r2, r3
240621ea:	fbb1 f3f3 	udiv	r3, r1, r3
240621ee:	613b      	str	r3, [r7, #16]
240621f0:	e017      	b.n	24062222 <HAL_SAI_Init+0x1fe>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
240621f2:	687b      	ldr	r3, [r7, #4]
240621f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
240621f6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
240621fa:	d101      	bne.n	24062200 <HAL_SAI_Init+0x1dc>
240621fc:	2302      	movs	r3, #2
240621fe:	e000      	b.n	24062202 <HAL_SAI_Init+0x1de>
24062200:	2301      	movs	r3, #1
24062202:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
24062204:	697a      	ldr	r2, [r7, #20]
24062206:	4613      	mov	r3, r2
24062208:	009b      	lsls	r3, r3, #2
2406220a:	4413      	add	r3, r2
2406220c:	005b      	lsls	r3, r3, #1
2406220e:	4619      	mov	r1, r3
24062210:	687b      	ldr	r3, [r7, #4]
24062212:	6a1b      	ldr	r3, [r3, #32]
24062214:	68ba      	ldr	r2, [r7, #8]
24062216:	fb02 f303 	mul.w	r3, r2, r3
2406221a:	021b      	lsls	r3, r3, #8
2406221c:	fbb1 f3f3 	udiv	r3, r1, r3
24062220:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
24062222:	693b      	ldr	r3, [r7, #16]
24062224:	4a22      	ldr	r2, [pc, #136]	@ (240622b0 <HAL_SAI_Init+0x28c>)
24062226:	fba2 2303 	umull	r2, r3, r2, r3
2406222a:	08da      	lsrs	r2, r3, #3
2406222c:	687b      	ldr	r3, [r7, #4]
2406222e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
24062230:	6939      	ldr	r1, [r7, #16]
24062232:	4b1f      	ldr	r3, [pc, #124]	@ (240622b0 <HAL_SAI_Init+0x28c>)
24062234:	fba3 2301 	umull	r2, r3, r3, r1
24062238:	08da      	lsrs	r2, r3, #3
2406223a:	4613      	mov	r3, r2
2406223c:	009b      	lsls	r3, r3, #2
2406223e:	4413      	add	r3, r2
24062240:	005b      	lsls	r3, r3, #1
24062242:	1aca      	subs	r2, r1, r3
24062244:	2a08      	cmp	r2, #8
24062246:	d904      	bls.n	24062252 <HAL_SAI_Init+0x22e>
    {
      hsai->Init.Mckdiv += 1U;
24062248:	687b      	ldr	r3, [r7, #4]
2406224a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2406224c:	1c5a      	adds	r2, r3, #1
2406224e:	687b      	ldr	r3, [r7, #4]
24062250:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
24062252:	687b      	ldr	r3, [r7, #4]
24062254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
24062256:	2b04      	cmp	r3, #4
24062258:	d104      	bne.n	24062264 <HAL_SAI_Init+0x240>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
2406225a:	687b      	ldr	r3, [r7, #4]
2406225c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
2406225e:	085a      	lsrs	r2, r3, #1
24062260:	687b      	ldr	r3, [r7, #4]
24062262:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
24062264:	687b      	ldr	r3, [r7, #4]
24062266:	685b      	ldr	r3, [r3, #4]
24062268:	2b00      	cmp	r3, #0
2406226a:	d003      	beq.n	24062274 <HAL_SAI_Init+0x250>
2406226c:	687b      	ldr	r3, [r7, #4]
2406226e:	685b      	ldr	r3, [r3, #4]
24062270:	2b02      	cmp	r3, #2
24062272:	d109      	bne.n	24062288 <HAL_SAI_Init+0x264>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
24062274:	687b      	ldr	r3, [r7, #4]
24062276:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
24062278:	2b01      	cmp	r3, #1
2406227a:	d101      	bne.n	24062280 <HAL_SAI_Init+0x25c>
2406227c:	2300      	movs	r3, #0
2406227e:	e001      	b.n	24062284 <HAL_SAI_Init+0x260>
24062280:	f44f 7300 	mov.w	r3, #512	@ 0x200
24062284:	623b      	str	r3, [r7, #32]
24062286:	e017      	b.n	240622b8 <HAL_SAI_Init+0x294>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
24062288:	687b      	ldr	r3, [r7, #4]
2406228a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
2406228c:	2b01      	cmp	r3, #1
2406228e:	d111      	bne.n	240622b4 <HAL_SAI_Init+0x290>
24062290:	f44f 7300 	mov.w	r3, #512	@ 0x200
24062294:	e00f      	b.n	240622b6 <HAL_SAI_Init+0x292>
24062296:	bf00      	nop
24062298:	40015804 	.word	0x40015804
2406229c:	40015824 	.word	0x40015824
240622a0:	40015800 	.word	0x40015800
240622a4:	40015c04 	.word	0x40015c04
240622a8:	40015c24 	.word	0x40015c24
240622ac:	40015c00 	.word	0x40015c00
240622b0:	cccccccd 	.word	0xcccccccd
240622b4:	2300      	movs	r3, #0
240622b6:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
240622b8:	687b      	ldr	r3, [r7, #4]
240622ba:	681b      	ldr	r3, [r3, #0]
240622bc:	6819      	ldr	r1, [r3, #0]
240622be:	687b      	ldr	r3, [r7, #4]
240622c0:	681a      	ldr	r2, [r3, #0]
240622c2:	4b58      	ldr	r3, [pc, #352]	@ (24062424 <HAL_SAI_Init+0x400>)
240622c4:	400b      	ands	r3, r1
240622c6:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
240622c8:	687b      	ldr	r3, [r7, #4]
240622ca:	681b      	ldr	r3, [r3, #0]
240622cc:	6819      	ldr	r1, [r3, #0]
240622ce:	687b      	ldr	r3, [r7, #4]
240622d0:	685a      	ldr	r2, [r3, #4]
240622d2:	687b      	ldr	r3, [r7, #4]
240622d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
240622d6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
240622d8:	687b      	ldr	r3, [r7, #4]
240622da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
240622dc:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
240622de:	687b      	ldr	r3, [r7, #4]
240622e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
240622e2:	431a      	orrs	r2, r3
240622e4:	6a3b      	ldr	r3, [r7, #32]
240622e6:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
240622e8:	69fb      	ldr	r3, [r7, #28]
240622ea:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
240622ec:	687b      	ldr	r3, [r7, #4]
240622ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                          ckstr_bits | syncen_bits |                             \
240622f0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
240622f2:	687b      	ldr	r3, [r7, #4]
240622f4:	695b      	ldr	r3, [r3, #20]
240622f6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
240622f8:	687b      	ldr	r3, [r7, #4]
240622fa:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
240622fc:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
240622fe:	687b      	ldr	r3, [r7, #4]
24062300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
24062302:	051b      	lsls	r3, r3, #20
24062304:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
24062306:	687b      	ldr	r3, [r7, #4]
24062308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
2406230a:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
2406230c:	687b      	ldr	r3, [r7, #4]
2406230e:	691b      	ldr	r3, [r3, #16]
24062310:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
24062312:	687b      	ldr	r3, [r7, #4]
24062314:	681b      	ldr	r3, [r3, #0]
24062316:	430a      	orrs	r2, r1
24062318:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
2406231a:	687b      	ldr	r3, [r7, #4]
2406231c:	681b      	ldr	r3, [r3, #0]
2406231e:	6859      	ldr	r1, [r3, #4]
24062320:	687b      	ldr	r3, [r7, #4]
24062322:	681a      	ldr	r2, [r3, #0]
24062324:	4b40      	ldr	r3, [pc, #256]	@ (24062428 <HAL_SAI_Init+0x404>)
24062326:	400b      	ands	r3, r1
24062328:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
2406232a:	687b      	ldr	r3, [r7, #4]
2406232c:	681b      	ldr	r3, [r3, #0]
2406232e:	6859      	ldr	r1, [r3, #4]
24062330:	687b      	ldr	r3, [r7, #4]
24062332:	69da      	ldr	r2, [r3, #28]
24062334:	687b      	ldr	r3, [r7, #4]
24062336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
24062338:	431a      	orrs	r2, r3
2406233a:	687b      	ldr	r3, [r7, #4]
2406233c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
2406233e:	431a      	orrs	r2, r3
24062340:	687b      	ldr	r3, [r7, #4]
24062342:	681b      	ldr	r3, [r3, #0]
24062344:	430a      	orrs	r2, r1
24062346:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
24062348:	687b      	ldr	r3, [r7, #4]
2406234a:	681b      	ldr	r3, [r3, #0]
2406234c:	6899      	ldr	r1, [r3, #8]
2406234e:	687b      	ldr	r3, [r7, #4]
24062350:	681a      	ldr	r2, [r3, #0]
24062352:	4b36      	ldr	r3, [pc, #216]	@ (2406242c <HAL_SAI_Init+0x408>)
24062354:	400b      	ands	r3, r1
24062356:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
24062358:	687b      	ldr	r3, [r7, #4]
2406235a:	681b      	ldr	r3, [r3, #0]
2406235c:	6899      	ldr	r1, [r3, #8]
2406235e:	687b      	ldr	r3, [r7, #4]
24062360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
24062362:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
24062364:	687b      	ldr	r3, [r7, #4]
24062366:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
24062368:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
2406236a:	687b      	ldr	r3, [r7, #4]
2406236c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
2406236e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
24062370:	687b      	ldr	r3, [r7, #4]
24062372:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
24062374:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
24062376:	687b      	ldr	r3, [r7, #4]
24062378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
2406237a:	3b01      	subs	r3, #1
2406237c:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
2406237e:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
24062380:	687b      	ldr	r3, [r7, #4]
24062382:	681b      	ldr	r3, [r3, #0]
24062384:	430a      	orrs	r2, r1
24062386:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
24062388:	687b      	ldr	r3, [r7, #4]
2406238a:	681b      	ldr	r3, [r3, #0]
2406238c:	68d9      	ldr	r1, [r3, #12]
2406238e:	687b      	ldr	r3, [r7, #4]
24062390:	681a      	ldr	r2, [r3, #0]
24062392:	f24f 0320 	movw	r3, #61472	@ 0xf020
24062396:	400b      	ands	r3, r1
24062398:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
2406239a:	687b      	ldr	r3, [r7, #4]
2406239c:	681b      	ldr	r3, [r3, #0]
2406239e:	68d9      	ldr	r1, [r3, #12]
240623a0:	687b      	ldr	r3, [r7, #4]
240623a2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
240623a4:	687b      	ldr	r3, [r7, #4]
240623a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
240623a8:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
240623aa:	687b      	ldr	r3, [r7, #4]
240623ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
240623ae:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
240623b0:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
240623b2:	687b      	ldr	r3, [r7, #4]
240623b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
240623b6:	3b01      	subs	r3, #1
240623b8:	021b      	lsls	r3, r3, #8
240623ba:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
240623bc:	687b      	ldr	r3, [r7, #4]
240623be:	681b      	ldr	r3, [r3, #0]
240623c0:	430a      	orrs	r2, r1
240623c2:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
#else
  if (hsai->Instance == SAI1_Block_A)
240623c4:	687b      	ldr	r3, [r7, #4]
240623c6:	681b      	ldr	r3, [r3, #0]
240623c8:	4a19      	ldr	r2, [pc, #100]	@ (24062430 <HAL_SAI_Init+0x40c>)
240623ca:	4293      	cmp	r3, r2
240623cc:	d119      	bne.n	24062402 <HAL_SAI_Init+0x3de>
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
240623ce:	69bb      	ldr	r3, [r7, #24]
240623d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
240623d2:	f023 0201 	bic.w	r2, r3, #1
240623d6:	69bb      	ldr	r3, [r7, #24]
240623d8:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
240623da:	687b      	ldr	r3, [r7, #4]
240623dc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
240623e0:	2b01      	cmp	r3, #1
240623e2:	d10e      	bne.n	24062402 <HAL_SAI_Init+0x3de>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
240623e4:	687b      	ldr	r3, [r7, #4]
240623e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
240623e8:	687b      	ldr	r3, [r7, #4]
240623ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
240623ec:	3b01      	subs	r3, #1
240623ee:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
240623f0:	431a      	orrs	r2, r3
240623f2:	69bb      	ldr	r3, [r7, #24]
240623f4:	645a      	str	r2, [r3, #68]	@ 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
240623f6:	69bb      	ldr	r3, [r7, #24]
240623f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
240623fa:	f043 0201 	orr.w	r2, r3, #1
240623fe:	69bb      	ldr	r3, [r7, #24]
24062400:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
24062402:	687b      	ldr	r3, [r7, #4]
24062404:	2200      	movs	r2, #0
24062406:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
2406240a:	687b      	ldr	r3, [r7, #4]
2406240c:	2201      	movs	r2, #1
2406240e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
24062412:	687b      	ldr	r3, [r7, #4]
24062414:	2200      	movs	r2, #0
24062416:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
2406241a:	2300      	movs	r3, #0
}
2406241c:	4618      	mov	r0, r3
2406241e:	3728      	adds	r7, #40	@ 0x28
24062420:	46bd      	mov	sp, r7
24062422:	bd80      	pop	{r7, pc}
24062424:	f005c010 	.word	0xf005c010
24062428:	ffff1ff0 	.word	0xffff1ff0
2406242c:	fff88000 	.word	0xfff88000
24062430:	40015804 	.word	0x40015804

24062434 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
24062434:	b580      	push	{r7, lr}
24062436:	b084      	sub	sp, #16
24062438:	af00      	add	r7, sp, #0
2406243a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
2406243c:	2300      	movs	r3, #0
2406243e:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
24062440:	687b      	ldr	r3, [r7, #4]
24062442:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
24062446:	2b01      	cmp	r3, #1
24062448:	d101      	bne.n	2406244e <HAL_SAI_Abort+0x1a>
2406244a:	2302      	movs	r3, #2
2406244c:	e07d      	b.n	2406254a <HAL_SAI_Abort+0x116>
2406244e:	687b      	ldr	r3, [r7, #4]
24062450:	2201      	movs	r2, #1
24062452:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
24062456:	6878      	ldr	r0, [r7, #4]
24062458:	f000 fc60 	bl	24062d1c <SAI_Disable>
2406245c:	4603      	mov	r3, r0
2406245e:	2b00      	cmp	r3, #0
24062460:	d001      	beq.n	24062466 <HAL_SAI_Abort+0x32>
  {
    status = HAL_ERROR;
24062462:	2301      	movs	r3, #1
24062464:	73fb      	strb	r3, [r7, #15]
  }

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
24062466:	687b      	ldr	r3, [r7, #4]
24062468:	681b      	ldr	r3, [r3, #0]
2406246a:	681b      	ldr	r3, [r3, #0]
2406246c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
24062470:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
24062474:	d14f      	bne.n	24062516 <HAL_SAI_Abort+0xe2>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
24062476:	687b      	ldr	r3, [r7, #4]
24062478:	681b      	ldr	r3, [r3, #0]
2406247a:	681a      	ldr	r2, [r3, #0]
2406247c:	687b      	ldr	r3, [r7, #4]
2406247e:	681b      	ldr	r3, [r3, #0]
24062480:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
24062484:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX)&& (hsai->hdmatx != NULL))
24062486:	687b      	ldr	r3, [r7, #4]
24062488:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
2406248c:	b2db      	uxtb	r3, r3
2406248e:	2b12      	cmp	r3, #18
24062490:	d11d      	bne.n	240624ce <HAL_SAI_Abort+0x9a>
24062492:	687b      	ldr	r3, [r7, #4]
24062494:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
24062498:	2b00      	cmp	r3, #0
2406249a:	d018      	beq.n	240624ce <HAL_SAI_Abort+0x9a>
    {
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
2406249c:	687b      	ldr	r3, [r7, #4]
2406249e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
240624a2:	4618      	mov	r0, r3
240624a4:	f7f7 fb3e 	bl	24059b24 <HAL_DMA_Abort>
240624a8:	4603      	mov	r3, r0
240624aa:	2b00      	cmp	r3, #0
240624ac:	d00f      	beq.n	240624ce <HAL_SAI_Abort+0x9a>
      {
        /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
240624ae:	687b      	ldr	r3, [r7, #4]
240624b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
240624b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
240624b6:	2b80      	cmp	r3, #128	@ 0x80
240624b8:	d009      	beq.n	240624ce <HAL_SAI_Abort+0x9a>
        {
          status = HAL_ERROR;
240624ba:	2301      	movs	r3, #1
240624bc:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
240624be:	687b      	ldr	r3, [r7, #4]
240624c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
240624c4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
240624c8:	687b      	ldr	r3, [r7, #4]
240624ca:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        }
      }
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
240624ce:	687b      	ldr	r3, [r7, #4]
240624d0:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
240624d4:	b2db      	uxtb	r3, r3
240624d6:	2b22      	cmp	r3, #34	@ 0x22
240624d8:	d11d      	bne.n	24062516 <HAL_SAI_Abort+0xe2>
240624da:	687b      	ldr	r3, [r7, #4]
240624dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
240624e0:	2b00      	cmp	r3, #0
240624e2:	d018      	beq.n	24062516 <HAL_SAI_Abort+0xe2>
    {
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
240624e4:	687b      	ldr	r3, [r7, #4]
240624e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
240624ea:	4618      	mov	r0, r3
240624ec:	f7f7 fb1a 	bl	24059b24 <HAL_DMA_Abort>
240624f0:	4603      	mov	r3, r0
240624f2:	2b00      	cmp	r3, #0
240624f4:	d00f      	beq.n	24062516 <HAL_SAI_Abort+0xe2>
      {
        /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
240624f6:	687b      	ldr	r3, [r7, #4]
240624f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
240624fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
240624fe:	2b80      	cmp	r3, #128	@ 0x80
24062500:	d009      	beq.n	24062516 <HAL_SAI_Abort+0xe2>
        {
          status = HAL_ERROR;
24062502:	2301      	movs	r3, #1
24062504:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
24062506:	687b      	ldr	r3, [r7, #4]
24062508:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
2406250c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
24062510:	687b      	ldr	r3, [r7, #4]
24062512:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      }
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
24062516:	687b      	ldr	r3, [r7, #4]
24062518:	681b      	ldr	r3, [r3, #0]
2406251a:	2200      	movs	r2, #0
2406251c:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
2406251e:	687b      	ldr	r3, [r7, #4]
24062520:	681b      	ldr	r3, [r3, #0]
24062522:	f04f 32ff 	mov.w	r2, #4294967295
24062526:	619a      	str	r2, [r3, #24]

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
24062528:	687b      	ldr	r3, [r7, #4]
2406252a:	681b      	ldr	r3, [r3, #0]
2406252c:	685a      	ldr	r2, [r3, #4]
2406252e:	687b      	ldr	r3, [r7, #4]
24062530:	681b      	ldr	r3, [r3, #0]
24062532:	f042 0208 	orr.w	r2, r2, #8
24062536:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
24062538:	687b      	ldr	r3, [r7, #4]
2406253a:	2201      	movs	r2, #1
2406253c:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
24062540:	687b      	ldr	r3, [r7, #4]
24062542:	2200      	movs	r2, #0
24062544:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return status;
24062548:	7bfb      	ldrb	r3, [r7, #15]
}
2406254a:	4618      	mov	r0, r3
2406254c:	3710      	adds	r7, #16
2406254e:	46bd      	mov	sp, r7
24062550:	bd80      	pop	{r7, pc}
	...

24062554 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
24062554:	b580      	push	{r7, lr}
24062556:	b086      	sub	sp, #24
24062558:	af00      	add	r7, sp, #0
2406255a:	60f8      	str	r0, [r7, #12]
2406255c:	60b9      	str	r1, [r7, #8]
2406255e:	4613      	mov	r3, r2
24062560:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
24062562:	f7f4 fa8d 	bl	24056a80 <HAL_GetTick>
24062566:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
24062568:	68bb      	ldr	r3, [r7, #8]
2406256a:	2b00      	cmp	r3, #0
2406256c:	d002      	beq.n	24062574 <HAL_SAI_Transmit_DMA+0x20>
2406256e:	88fb      	ldrh	r3, [r7, #6]
24062570:	2b00      	cmp	r3, #0
24062572:	d101      	bne.n	24062578 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
24062574:	2301      	movs	r3, #1
24062576:	e098      	b.n	240626aa <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
24062578:	68fb      	ldr	r3, [r7, #12]
2406257a:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
2406257e:	b2db      	uxtb	r3, r3
24062580:	2b01      	cmp	r3, #1
24062582:	f040 8091 	bne.w	240626a8 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
24062586:	68fb      	ldr	r3, [r7, #12]
24062588:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
2406258c:	2b01      	cmp	r3, #1
2406258e:	d101      	bne.n	24062594 <HAL_SAI_Transmit_DMA+0x40>
24062590:	2302      	movs	r3, #2
24062592:	e08a      	b.n	240626aa <HAL_SAI_Transmit_DMA+0x156>
24062594:	68fb      	ldr	r3, [r7, #12]
24062596:	2201      	movs	r2, #1
24062598:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
2406259c:	68fb      	ldr	r3, [r7, #12]
2406259e:	68ba      	ldr	r2, [r7, #8]
240625a0:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
240625a2:	68fb      	ldr	r3, [r7, #12]
240625a4:	88fa      	ldrh	r2, [r7, #6]
240625a6:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
240625aa:	68fb      	ldr	r3, [r7, #12]
240625ac:	88fa      	ldrh	r2, [r7, #6]
240625ae:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
240625b2:	68fb      	ldr	r3, [r7, #12]
240625b4:	2200      	movs	r2, #0
240625b6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
240625ba:	68fb      	ldr	r3, [r7, #12]
240625bc:	2212      	movs	r2, #18
240625be:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
240625c2:	68fb      	ldr	r3, [r7, #12]
240625c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
240625c8:	4a3a      	ldr	r2, [pc, #232]	@ (240626b4 <HAL_SAI_Transmit_DMA+0x160>)
240625ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
240625cc:	68fb      	ldr	r3, [r7, #12]
240625ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
240625d2:	4a39      	ldr	r2, [pc, #228]	@ (240626b8 <HAL_SAI_Transmit_DMA+0x164>)
240625d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
240625d6:	68fb      	ldr	r3, [r7, #12]
240625d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
240625dc:	4a37      	ldr	r2, [pc, #220]	@ (240626bc <HAL_SAI_Transmit_DMA+0x168>)
240625de:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
240625e0:	68fb      	ldr	r3, [r7, #12]
240625e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
240625e6:	2200      	movs	r2, #0
240625e8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
240625ea:	68fb      	ldr	r3, [r7, #12]
240625ec:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
240625f0:	68fb      	ldr	r3, [r7, #12]
240625f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
240625f4:	4619      	mov	r1, r3
240625f6:	68fb      	ldr	r3, [r7, #12]
240625f8:	681b      	ldr	r3, [r3, #0]
240625fa:	331c      	adds	r3, #28
240625fc:	461a      	mov	r2, r3
240625fe:	68fb      	ldr	r3, [r7, #12]
24062600:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
24062604:	f7f7 f824 	bl	24059650 <HAL_DMA_Start_IT>
24062608:	4603      	mov	r3, r0
2406260a:	2b00      	cmp	r3, #0
2406260c:	d005      	beq.n	2406261a <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
2406260e:	68fb      	ldr	r3, [r7, #12]
24062610:	2200      	movs	r2, #0
24062612:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
24062616:	2301      	movs	r3, #1
24062618:	e047      	b.n	240626aa <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2406261a:	2100      	movs	r1, #0
2406261c:	68f8      	ldr	r0, [r7, #12]
2406261e:	f000 fb45 	bl	24062cac <SAI_InterruptFlag>
24062622:	4601      	mov	r1, r0
24062624:	68fb      	ldr	r3, [r7, #12]
24062626:	681b      	ldr	r3, [r3, #0]
24062628:	691a      	ldr	r2, [r3, #16]
2406262a:	68fb      	ldr	r3, [r7, #12]
2406262c:	681b      	ldr	r3, [r3, #0]
2406262e:	430a      	orrs	r2, r1
24062630:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
24062632:	68fb      	ldr	r3, [r7, #12]
24062634:	681b      	ldr	r3, [r3, #0]
24062636:	681a      	ldr	r2, [r3, #0]
24062638:	68fb      	ldr	r3, [r7, #12]
2406263a:	681b      	ldr	r3, [r3, #0]
2406263c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
24062640:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
24062642:	e015      	b.n	24062670 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
24062644:	f7f4 fa1c 	bl	24056a80 <HAL_GetTick>
24062648:	4602      	mov	r2, r0
2406264a:	697b      	ldr	r3, [r7, #20]
2406264c:	1ad3      	subs	r3, r2, r3
2406264e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
24062652:	d90d      	bls.n	24062670 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
24062654:	68fb      	ldr	r3, [r7, #12]
24062656:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
2406265a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
2406265e:	68fb      	ldr	r3, [r7, #12]
24062660:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
24062664:	68fb      	ldr	r3, [r7, #12]
24062666:	2200      	movs	r2, #0
24062668:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

        return HAL_TIMEOUT;
2406266c:	2303      	movs	r3, #3
2406266e:	e01c      	b.n	240626aa <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
24062670:	68fb      	ldr	r3, [r7, #12]
24062672:	681b      	ldr	r3, [r3, #0]
24062674:	695b      	ldr	r3, [r3, #20]
24062676:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
2406267a:	2b00      	cmp	r3, #0
2406267c:	d0e2      	beq.n	24062644 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
2406267e:	68fb      	ldr	r3, [r7, #12]
24062680:	681b      	ldr	r3, [r3, #0]
24062682:	681b      	ldr	r3, [r3, #0]
24062684:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
24062688:	2b00      	cmp	r3, #0
2406268a:	d107      	bne.n	2406269c <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
2406268c:	68fb      	ldr	r3, [r7, #12]
2406268e:	681b      	ldr	r3, [r3, #0]
24062690:	681a      	ldr	r2, [r3, #0]
24062692:	68fb      	ldr	r3, [r7, #12]
24062694:	681b      	ldr	r3, [r3, #0]
24062696:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
2406269a:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
2406269c:	68fb      	ldr	r3, [r7, #12]
2406269e:	2200      	movs	r2, #0
240626a0:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
240626a4:	2300      	movs	r3, #0
240626a6:	e000      	b.n	240626aa <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
240626a8:	2302      	movs	r3, #2
  }
}
240626aa:	4618      	mov	r0, r3
240626ac:	3718      	adds	r7, #24
240626ae:	46bd      	mov	sp, r7
240626b0:	bd80      	pop	{r7, pc}
240626b2:	bf00      	nop
240626b4:	24062df1 	.word	0x24062df1
240626b8:	24062d91 	.word	0x24062d91
240626bc:	24062e0d 	.word	0x24062e0d

240626c0 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
240626c0:	b580      	push	{r7, lr}
240626c2:	b086      	sub	sp, #24
240626c4:	af00      	add	r7, sp, #0
240626c6:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
240626c8:	687b      	ldr	r3, [r7, #4]
240626ca:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
240626ce:	b2db      	uxtb	r3, r3
240626d0:	2b00      	cmp	r3, #0
240626d2:	f000 81a7 	beq.w	24062a24 <HAL_SAI_IRQHandler+0x364>
  {
    uint32_t itflags = hsai->Instance->SR;
240626d6:	687b      	ldr	r3, [r7, #4]
240626d8:	681b      	ldr	r3, [r3, #0]
240626da:	695b      	ldr	r3, [r3, #20]
240626dc:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
240626de:	687b      	ldr	r3, [r7, #4]
240626e0:	681b      	ldr	r3, [r3, #0]
240626e2:	691b      	ldr	r3, [r3, #16]
240626e4:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
240626e6:	687b      	ldr	r3, [r7, #4]
240626e8:	681b      	ldr	r3, [r3, #0]
240626ea:	681b      	ldr	r3, [r3, #0]
240626ec:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred ------------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
240626ee:	697b      	ldr	r3, [r7, #20]
240626f0:	f003 0308 	and.w	r3, r3, #8
240626f4:	2b00      	cmp	r3, #0
240626f6:	d00a      	beq.n	2406270e <HAL_SAI_IRQHandler+0x4e>
240626f8:	693b      	ldr	r3, [r7, #16]
240626fa:	f003 0308 	and.w	r3, r3, #8
240626fe:	2b00      	cmp	r3, #0
24062700:	d005      	beq.n	2406270e <HAL_SAI_IRQHandler+0x4e>
    {
      hsai->InterruptServiceRoutine(hsai);
24062702:	687b      	ldr	r3, [r7, #4]
24062704:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
24062708:	6878      	ldr	r0, [r7, #4]
2406270a:	4798      	blx	r3
2406270c:	e18a      	b.n	24062a24 <HAL_SAI_IRQHandler+0x364>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
2406270e:	697b      	ldr	r3, [r7, #20]
24062710:	f003 0301 	and.w	r3, r3, #1
24062714:	2b00      	cmp	r3, #0
24062716:	d01e      	beq.n	24062756 <HAL_SAI_IRQHandler+0x96>
24062718:	693b      	ldr	r3, [r7, #16]
2406271a:	f003 0301 	and.w	r3, r3, #1
2406271e:	2b00      	cmp	r3, #0
24062720:	d019      	beq.n	24062756 <HAL_SAI_IRQHandler+0x96>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
24062722:	687b      	ldr	r3, [r7, #4]
24062724:	681b      	ldr	r3, [r3, #0]
24062726:	2201      	movs	r2, #1
24062728:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
2406272a:	687b      	ldr	r3, [r7, #4]
2406272c:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
24062730:	b2db      	uxtb	r3, r3
24062732:	2b22      	cmp	r3, #34	@ 0x22
24062734:	d101      	bne.n	2406273a <HAL_SAI_IRQHandler+0x7a>
24062736:	2301      	movs	r3, #1
24062738:	e000      	b.n	2406273c <HAL_SAI_IRQHandler+0x7c>
2406273a:	2302      	movs	r3, #2
2406273c:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
2406273e:	687b      	ldr	r3, [r7, #4]
24062740:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
24062744:	68bb      	ldr	r3, [r7, #8]
24062746:	431a      	orrs	r2, r3
24062748:	687b      	ldr	r3, [r7, #4]
2406274a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
2406274e:	6878      	ldr	r0, [r7, #4]
24062750:	f000 f96e 	bl	24062a30 <HAL_SAI_ErrorCallback>
24062754:	e166      	b.n	24062a24 <HAL_SAI_IRQHandler+0x364>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
24062756:	697b      	ldr	r3, [r7, #20]
24062758:	f003 0302 	and.w	r3, r3, #2
2406275c:	2b00      	cmp	r3, #0
2406275e:	d013      	beq.n	24062788 <HAL_SAI_IRQHandler+0xc8>
24062760:	693b      	ldr	r3, [r7, #16]
24062762:	f003 0302 	and.w	r3, r3, #2
24062766:	2b00      	cmp	r3, #0
24062768:	d00e      	beq.n	24062788 <HAL_SAI_IRQHandler+0xc8>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
2406276a:	687b      	ldr	r3, [r7, #4]
2406276c:	681b      	ldr	r3, [r3, #0]
2406276e:	2202      	movs	r2, #2
24062770:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
24062772:	687b      	ldr	r3, [r7, #4]
24062774:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
24062778:	2b00      	cmp	r3, #0
2406277a:	f000 8153 	beq.w	24062a24 <HAL_SAI_IRQHandler+0x364>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
2406277e:	687b      	ldr	r3, [r7, #4]
24062780:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
24062784:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
24062786:	e14d      	b.n	24062a24 <HAL_SAI_IRQHandler+0x364>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
24062788:	697b      	ldr	r3, [r7, #20]
2406278a:	f003 0320 	and.w	r3, r3, #32
2406278e:	2b00      	cmp	r3, #0
24062790:	d05b      	beq.n	2406284a <HAL_SAI_IRQHandler+0x18a>
24062792:	693b      	ldr	r3, [r7, #16]
24062794:	f003 0320 	and.w	r3, r3, #32
24062798:	2b00      	cmp	r3, #0
2406279a:	d056      	beq.n	2406284a <HAL_SAI_IRQHandler+0x18a>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
2406279c:	687b      	ldr	r3, [r7, #4]
2406279e:	681b      	ldr	r3, [r3, #0]
240627a0:	2220      	movs	r2, #32
240627a2:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
240627a4:	687b      	ldr	r3, [r7, #4]
240627a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
240627aa:	f043 0204 	orr.w	r2, r3, #4
240627ae:	687b      	ldr	r3, [r7, #4]
240627b0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
240627b4:	68fb      	ldr	r3, [r7, #12]
240627b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
240627ba:	2b00      	cmp	r3, #0
240627bc:	d03e      	beq.n	2406283c <HAL_SAI_IRQHandler+0x17c>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
240627be:	687b      	ldr	r3, [r7, #4]
240627c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
240627c4:	2b00      	cmp	r3, #0
240627c6:	d018      	beq.n	240627fa <HAL_SAI_IRQHandler+0x13a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
240627c8:	687b      	ldr	r3, [r7, #4]
240627ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
240627ce:	4a97      	ldr	r2, [pc, #604]	@ (24062a2c <HAL_SAI_IRQHandler+0x36c>)
240627d0:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
240627d2:	687b      	ldr	r3, [r7, #4]
240627d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
240627d8:	4618      	mov	r0, r3
240627da:	f7f7 fcc1 	bl	2405a160 <HAL_DMA_Abort_IT>
240627de:	4603      	mov	r3, r0
240627e0:	2b00      	cmp	r3, #0
240627e2:	d00a      	beq.n	240627fa <HAL_SAI_IRQHandler+0x13a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
240627e4:	687b      	ldr	r3, [r7, #4]
240627e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
240627ea:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
240627ee:	687b      	ldr	r3, [r7, #4]
240627f0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
240627f4:	6878      	ldr	r0, [r7, #4]
240627f6:	f000 f91b 	bl	24062a30 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
240627fa:	687b      	ldr	r3, [r7, #4]
240627fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
24062800:	2b00      	cmp	r3, #0
24062802:	f000 810a 	beq.w	24062a1a <HAL_SAI_IRQHandler+0x35a>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
24062806:	687b      	ldr	r3, [r7, #4]
24062808:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
2406280c:	4a87      	ldr	r2, [pc, #540]	@ (24062a2c <HAL_SAI_IRQHandler+0x36c>)
2406280e:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
24062810:	687b      	ldr	r3, [r7, #4]
24062812:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
24062816:	4618      	mov	r0, r3
24062818:	f7f7 fca2 	bl	2405a160 <HAL_DMA_Abort_IT>
2406281c:	4603      	mov	r3, r0
2406281e:	2b00      	cmp	r3, #0
24062820:	f000 80fb 	beq.w	24062a1a <HAL_SAI_IRQHandler+0x35a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
24062824:	687b      	ldr	r3, [r7, #4]
24062826:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
2406282a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
2406282e:	687b      	ldr	r3, [r7, #4]
24062830:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
24062834:	6878      	ldr	r0, [r7, #4]
24062836:	f000 f8fb 	bl	24062a30 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2406283a:	e0ee      	b.n	24062a1a <HAL_SAI_IRQHandler+0x35a>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
2406283c:	6878      	ldr	r0, [r7, #4]
2406283e:	f7ff fdf9 	bl	24062434 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
24062842:	6878      	ldr	r0, [r7, #4]
24062844:	f000 f8f4 	bl	24062a30 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
24062848:	e0e7      	b.n	24062a1a <HAL_SAI_IRQHandler+0x35a>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
2406284a:	697b      	ldr	r3, [r7, #20]
2406284c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
24062850:	2b00      	cmp	r3, #0
24062852:	d05b      	beq.n	2406290c <HAL_SAI_IRQHandler+0x24c>
24062854:	693b      	ldr	r3, [r7, #16]
24062856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
2406285a:	2b00      	cmp	r3, #0
2406285c:	d056      	beq.n	2406290c <HAL_SAI_IRQHandler+0x24c>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
2406285e:	687b      	ldr	r3, [r7, #4]
24062860:	681b      	ldr	r3, [r3, #0]
24062862:	2240      	movs	r2, #64	@ 0x40
24062864:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
24062866:	687b      	ldr	r3, [r7, #4]
24062868:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
2406286c:	f043 0208 	orr.w	r2, r3, #8
24062870:	687b      	ldr	r3, [r7, #4]
24062872:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
24062876:	68fb      	ldr	r3, [r7, #12]
24062878:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
2406287c:	2b00      	cmp	r3, #0
2406287e:	d03e      	beq.n	240628fe <HAL_SAI_IRQHandler+0x23e>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
24062880:	687b      	ldr	r3, [r7, #4]
24062882:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
24062886:	2b00      	cmp	r3, #0
24062888:	d018      	beq.n	240628bc <HAL_SAI_IRQHandler+0x1fc>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
2406288a:	687b      	ldr	r3, [r7, #4]
2406288c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
24062890:	4a66      	ldr	r2, [pc, #408]	@ (24062a2c <HAL_SAI_IRQHandler+0x36c>)
24062892:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
24062894:	687b      	ldr	r3, [r7, #4]
24062896:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
2406289a:	4618      	mov	r0, r3
2406289c:	f7f7 fc60 	bl	2405a160 <HAL_DMA_Abort_IT>
240628a0:	4603      	mov	r3, r0
240628a2:	2b00      	cmp	r3, #0
240628a4:	d00a      	beq.n	240628bc <HAL_SAI_IRQHandler+0x1fc>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
240628a6:	687b      	ldr	r3, [r7, #4]
240628a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
240628ac:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
240628b0:	687b      	ldr	r3, [r7, #4]
240628b2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
240628b6:	6878      	ldr	r0, [r7, #4]
240628b8:	f000 f8ba 	bl	24062a30 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
240628bc:	687b      	ldr	r3, [r7, #4]
240628be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
240628c2:	2b00      	cmp	r3, #0
240628c4:	f000 80ab 	beq.w	24062a1e <HAL_SAI_IRQHandler+0x35e>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
240628c8:	687b      	ldr	r3, [r7, #4]
240628ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
240628ce:	4a57      	ldr	r2, [pc, #348]	@ (24062a2c <HAL_SAI_IRQHandler+0x36c>)
240628d0:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
240628d2:	687b      	ldr	r3, [r7, #4]
240628d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
240628d8:	4618      	mov	r0, r3
240628da:	f7f7 fc41 	bl	2405a160 <HAL_DMA_Abort_IT>
240628de:	4603      	mov	r3, r0
240628e0:	2b00      	cmp	r3, #0
240628e2:	f000 809c 	beq.w	24062a1e <HAL_SAI_IRQHandler+0x35e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
240628e6:	687b      	ldr	r3, [r7, #4]
240628e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
240628ec:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
240628f0:	687b      	ldr	r3, [r7, #4]
240628f2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
240628f6:	6878      	ldr	r0, [r7, #4]
240628f8:	f000 f89a 	bl	24062a30 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
240628fc:	e08f      	b.n	24062a1e <HAL_SAI_IRQHandler+0x35e>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
240628fe:	6878      	ldr	r0, [r7, #4]
24062900:	f7ff fd98 	bl	24062434 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
24062904:	6878      	ldr	r0, [r7, #4]
24062906:	f000 f893 	bl	24062a30 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2406290a:	e088      	b.n	24062a1e <HAL_SAI_IRQHandler+0x35e>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
2406290c:	697b      	ldr	r3, [r7, #20]
2406290e:	f003 0304 	and.w	r3, r3, #4
24062912:	2b00      	cmp	r3, #0
24062914:	d067      	beq.n	240629e6 <HAL_SAI_IRQHandler+0x326>
24062916:	693b      	ldr	r3, [r7, #16]
24062918:	f003 0304 	and.w	r3, r3, #4
2406291c:	2b00      	cmp	r3, #0
2406291e:	d062      	beq.n	240629e6 <HAL_SAI_IRQHandler+0x326>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
24062920:	687b      	ldr	r3, [r7, #4]
24062922:	681b      	ldr	r3, [r3, #0]
24062924:	2204      	movs	r2, #4
24062926:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
24062928:	687b      	ldr	r3, [r7, #4]
2406292a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
2406292e:	f043 0220 	orr.w	r2, r3, #32
24062932:	687b      	ldr	r3, [r7, #4]
24062934:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
24062938:	68fb      	ldr	r3, [r7, #12]
2406293a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
2406293e:	2b00      	cmp	r3, #0
24062940:	d03c      	beq.n	240629bc <HAL_SAI_IRQHandler+0x2fc>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
24062942:	687b      	ldr	r3, [r7, #4]
24062944:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
24062948:	2b00      	cmp	r3, #0
2406294a:	d018      	beq.n	2406297e <HAL_SAI_IRQHandler+0x2be>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
2406294c:	687b      	ldr	r3, [r7, #4]
2406294e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
24062952:	4a36      	ldr	r2, [pc, #216]	@ (24062a2c <HAL_SAI_IRQHandler+0x36c>)
24062954:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
24062956:	687b      	ldr	r3, [r7, #4]
24062958:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
2406295c:	4618      	mov	r0, r3
2406295e:	f7f7 fbff 	bl	2405a160 <HAL_DMA_Abort_IT>
24062962:	4603      	mov	r3, r0
24062964:	2b00      	cmp	r3, #0
24062966:	d00a      	beq.n	2406297e <HAL_SAI_IRQHandler+0x2be>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
24062968:	687b      	ldr	r3, [r7, #4]
2406296a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
2406296e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
24062972:	687b      	ldr	r3, [r7, #4]
24062974:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
24062978:	6878      	ldr	r0, [r7, #4]
2406297a:	f000 f859 	bl	24062a30 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
2406297e:	687b      	ldr	r3, [r7, #4]
24062980:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
24062984:	2b00      	cmp	r3, #0
24062986:	d04c      	beq.n	24062a22 <HAL_SAI_IRQHandler+0x362>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
24062988:	687b      	ldr	r3, [r7, #4]
2406298a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
2406298e:	4a27      	ldr	r2, [pc, #156]	@ (24062a2c <HAL_SAI_IRQHandler+0x36c>)
24062990:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
24062992:	687b      	ldr	r3, [r7, #4]
24062994:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
24062998:	4618      	mov	r0, r3
2406299a:	f7f7 fbe1 	bl	2405a160 <HAL_DMA_Abort_IT>
2406299e:	4603      	mov	r3, r0
240629a0:	2b00      	cmp	r3, #0
240629a2:	d03e      	beq.n	24062a22 <HAL_SAI_IRQHandler+0x362>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
240629a4:	687b      	ldr	r3, [r7, #4]
240629a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
240629aa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
240629ae:	687b      	ldr	r3, [r7, #4]
240629b0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
240629b4:	6878      	ldr	r0, [r7, #4]
240629b6:	f000 f83b 	bl	24062a30 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
240629ba:	e032      	b.n	24062a22 <HAL_SAI_IRQHandler+0x362>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
240629bc:	687b      	ldr	r3, [r7, #4]
240629be:	681b      	ldr	r3, [r3, #0]
240629c0:	2200      	movs	r2, #0
240629c2:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
240629c4:	687b      	ldr	r3, [r7, #4]
240629c6:	681b      	ldr	r3, [r3, #0]
240629c8:	f04f 32ff 	mov.w	r2, #4294967295
240629cc:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
240629ce:	687b      	ldr	r3, [r7, #4]
240629d0:	2201      	movs	r2, #1
240629d2:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

        /* Initialize XferCount */
        hsai->XferCount = 0U;
240629d6:	687b      	ldr	r3, [r7, #4]
240629d8:	2200      	movs	r2, #0
240629da:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
240629de:	6878      	ldr	r0, [r7, #4]
240629e0:	f000 f826 	bl	24062a30 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
240629e4:	e01d      	b.n	24062a22 <HAL_SAI_IRQHandler+0x362>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
240629e6:	697b      	ldr	r3, [r7, #20]
240629e8:	f003 0310 	and.w	r3, r3, #16
240629ec:	2b00      	cmp	r3, #0
240629ee:	d019      	beq.n	24062a24 <HAL_SAI_IRQHandler+0x364>
240629f0:	693b      	ldr	r3, [r7, #16]
240629f2:	f003 0310 	and.w	r3, r3, #16
240629f6:	2b00      	cmp	r3, #0
240629f8:	d014      	beq.n	24062a24 <HAL_SAI_IRQHandler+0x364>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
240629fa:	687b      	ldr	r3, [r7, #4]
240629fc:	681b      	ldr	r3, [r3, #0]
240629fe:	2210      	movs	r2, #16
24062a00:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
24062a02:	687b      	ldr	r3, [r7, #4]
24062a04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
24062a08:	f043 0210 	orr.w	r2, r3, #16
24062a0c:	687b      	ldr	r3, [r7, #4]
24062a0e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
24062a12:	6878      	ldr	r0, [r7, #4]
24062a14:	f000 f80c 	bl	24062a30 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
24062a18:	e004      	b.n	24062a24 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
24062a1a:	bf00      	nop
24062a1c:	e002      	b.n	24062a24 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
24062a1e:	bf00      	nop
24062a20:	e000      	b.n	24062a24 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
24062a22:	bf00      	nop
}
24062a24:	bf00      	nop
24062a26:	3718      	adds	r7, #24
24062a28:	46bd      	mov	sp, r7
24062a2a:	bd80      	pop	{r7, pc}
24062a2c:	24062e6b 	.word	0x24062e6b

24062a30 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
24062a30:	b480      	push	{r7}
24062a32:	b083      	sub	sp, #12
24062a34:	af00      	add	r7, sp, #0
24062a36:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
24062a38:	bf00      	nop
24062a3a:	370c      	adds	r7, #12
24062a3c:	46bd      	mov	sp, r7
24062a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
24062a42:	4770      	bx	lr

24062a44 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
24062a44:	b480      	push	{r7}
24062a46:	b087      	sub	sp, #28
24062a48:	af00      	add	r7, sp, #0
24062a4a:	60f8      	str	r0, [r7, #12]
24062a4c:	60b9      	str	r1, [r7, #8]
24062a4e:	607a      	str	r2, [r7, #4]
24062a50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
24062a52:	2300      	movs	r3, #0
24062a54:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
24062a56:	68fb      	ldr	r3, [r7, #12]
24062a58:	2200      	movs	r2, #0
24062a5a:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
24062a5c:	68fb      	ldr	r3, [r7, #12]
24062a5e:	2200      	movs	r2, #0
24062a60:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
24062a62:	68fb      	ldr	r3, [r7, #12]
24062a64:	685b      	ldr	r3, [r3, #4]
24062a66:	2b00      	cmp	r3, #0
24062a68:	d003      	beq.n	24062a72 <SAI_InitI2S+0x2e>
24062a6a:	68fb      	ldr	r3, [r7, #12]
24062a6c:	685b      	ldr	r3, [r3, #4]
24062a6e:	2b02      	cmp	r3, #2
24062a70:	d103      	bne.n	24062a7a <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
24062a72:	68fb      	ldr	r3, [r7, #12]
24062a74:	2200      	movs	r2, #0
24062a76:	651a      	str	r2, [r3, #80]	@ 0x50
24062a78:	e002      	b.n	24062a80 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
24062a7a:	68fb      	ldr	r3, [r7, #12]
24062a7c:	2201      	movs	r2, #1
24062a7e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
24062a80:	68fb      	ldr	r3, [r7, #12]
24062a82:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
24062a86:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
24062a88:	68fb      	ldr	r3, [r7, #12]
24062a8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
24062a8e:	675a      	str	r2, [r3, #116]	@ 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
24062a90:	68fb      	ldr	r3, [r7, #12]
24062a92:	2200      	movs	r2, #0
24062a94:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
24062a96:	68fb      	ldr	r3, [r7, #12]
24062a98:	683a      	ldr	r2, [r7, #0]
24062a9a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
24062a9c:	683b      	ldr	r3, [r7, #0]
24062a9e:	f003 0301 	and.w	r3, r3, #1
24062aa2:	2b00      	cmp	r3, #0
24062aa4:	d001      	beq.n	24062aaa <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
24062aa6:	2301      	movs	r3, #1
24062aa8:	e077      	b.n	24062b9a <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
24062aaa:	68bb      	ldr	r3, [r7, #8]
24062aac:	2b00      	cmp	r3, #0
24062aae:	d107      	bne.n	24062ac0 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
24062ab0:	68fb      	ldr	r3, [r7, #12]
24062ab2:	2200      	movs	r2, #0
24062ab4:	661a      	str	r2, [r3, #96]	@ 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
24062ab6:	68fb      	ldr	r3, [r7, #12]
24062ab8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
24062abc:	665a      	str	r2, [r3, #100]	@ 0x64
24062abe:	e006      	b.n	24062ace <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
24062ac0:	68fb      	ldr	r3, [r7, #12]
24062ac2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
24062ac6:	661a      	str	r2, [r3, #96]	@ 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
24062ac8:	68fb      	ldr	r3, [r7, #12]
24062aca:	2200      	movs	r2, #0
24062acc:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Frame definition */
  switch (datasize)
24062ace:	687b      	ldr	r3, [r7, #4]
24062ad0:	2b03      	cmp	r3, #3
24062ad2:	d84f      	bhi.n	24062b74 <SAI_InitI2S+0x130>
24062ad4:	a201      	add	r2, pc, #4	@ (adr r2, 24062adc <SAI_InitI2S+0x98>)
24062ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24062ada:	bf00      	nop
24062adc:	24062aed 	.word	0x24062aed
24062ae0:	24062b0f 	.word	0x24062b0f
24062ae4:	24062b31 	.word	0x24062b31
24062ae8:	24062b53 	.word	0x24062b53
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
24062aec:	68fb      	ldr	r3, [r7, #12]
24062aee:	2280      	movs	r2, #128	@ 0x80
24062af0:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
24062af2:	683b      	ldr	r3, [r7, #0]
24062af4:	085b      	lsrs	r3, r3, #1
24062af6:	015a      	lsls	r2, r3, #5
24062af8:	68fb      	ldr	r3, [r7, #12]
24062afa:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
24062afc:	683b      	ldr	r3, [r7, #0]
24062afe:	085b      	lsrs	r3, r3, #1
24062b00:	011a      	lsls	r2, r3, #4
24062b02:	68fb      	ldr	r3, [r7, #12]
24062b04:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
24062b06:	68fb      	ldr	r3, [r7, #12]
24062b08:	2240      	movs	r2, #64	@ 0x40
24062b0a:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
24062b0c:	e035      	b.n	24062b7a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
24062b0e:	68fb      	ldr	r3, [r7, #12]
24062b10:	2280      	movs	r2, #128	@ 0x80
24062b12:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
24062b14:	683b      	ldr	r3, [r7, #0]
24062b16:	085b      	lsrs	r3, r3, #1
24062b18:	019a      	lsls	r2, r3, #6
24062b1a:	68fb      	ldr	r3, [r7, #12]
24062b1c:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
24062b1e:	683b      	ldr	r3, [r7, #0]
24062b20:	085b      	lsrs	r3, r3, #1
24062b22:	015a      	lsls	r2, r3, #5
24062b24:	68fb      	ldr	r3, [r7, #12]
24062b26:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
24062b28:	68fb      	ldr	r3, [r7, #12]
24062b2a:	2280      	movs	r2, #128	@ 0x80
24062b2c:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
24062b2e:	e024      	b.n	24062b7a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
24062b30:	68fb      	ldr	r3, [r7, #12]
24062b32:	22c0      	movs	r2, #192	@ 0xc0
24062b34:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
24062b36:	683b      	ldr	r3, [r7, #0]
24062b38:	085b      	lsrs	r3, r3, #1
24062b3a:	019a      	lsls	r2, r3, #6
24062b3c:	68fb      	ldr	r3, [r7, #12]
24062b3e:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
24062b40:	683b      	ldr	r3, [r7, #0]
24062b42:	085b      	lsrs	r3, r3, #1
24062b44:	015a      	lsls	r2, r3, #5
24062b46:	68fb      	ldr	r3, [r7, #12]
24062b48:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
24062b4a:	68fb      	ldr	r3, [r7, #12]
24062b4c:	2280      	movs	r2, #128	@ 0x80
24062b4e:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
24062b50:	e013      	b.n	24062b7a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
24062b52:	68fb      	ldr	r3, [r7, #12]
24062b54:	22e0      	movs	r2, #224	@ 0xe0
24062b56:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
24062b58:	683b      	ldr	r3, [r7, #0]
24062b5a:	085b      	lsrs	r3, r3, #1
24062b5c:	019a      	lsls	r2, r3, #6
24062b5e:	68fb      	ldr	r3, [r7, #12]
24062b60:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
24062b62:	683b      	ldr	r3, [r7, #0]
24062b64:	085b      	lsrs	r3, r3, #1
24062b66:	015a      	lsls	r2, r3, #5
24062b68:	68fb      	ldr	r3, [r7, #12]
24062b6a:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
24062b6c:	68fb      	ldr	r3, [r7, #12]
24062b6e:	2280      	movs	r2, #128	@ 0x80
24062b70:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
24062b72:	e002      	b.n	24062b7a <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
24062b74:	2301      	movs	r3, #1
24062b76:	75fb      	strb	r3, [r7, #23]
      break;
24062b78:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
24062b7a:	68bb      	ldr	r3, [r7, #8]
24062b7c:	2b02      	cmp	r3, #2
24062b7e:	d10b      	bne.n	24062b98 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
24062b80:	687b      	ldr	r3, [r7, #4]
24062b82:	2b01      	cmp	r3, #1
24062b84:	d102      	bne.n	24062b8c <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
24062b86:	68fb      	ldr	r3, [r7, #12]
24062b88:	2210      	movs	r2, #16
24062b8a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
24062b8c:	687b      	ldr	r3, [r7, #4]
24062b8e:	2b02      	cmp	r3, #2
24062b90:	d102      	bne.n	24062b98 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
24062b92:	68fb      	ldr	r3, [r7, #12]
24062b94:	2208      	movs	r2, #8
24062b96:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }
  return status;
24062b98:	7dfb      	ldrb	r3, [r7, #23]
}
24062b9a:	4618      	mov	r0, r3
24062b9c:	371c      	adds	r7, #28
24062b9e:	46bd      	mov	sp, r7
24062ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
24062ba4:	4770      	bx	lr
24062ba6:	bf00      	nop

24062ba8 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
24062ba8:	b480      	push	{r7}
24062baa:	b087      	sub	sp, #28
24062bac:	af00      	add	r7, sp, #0
24062bae:	60f8      	str	r0, [r7, #12]
24062bb0:	60b9      	str	r1, [r7, #8]
24062bb2:	607a      	str	r2, [r7, #4]
24062bb4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
24062bb6:	2300      	movs	r3, #0
24062bb8:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
24062bba:	68fb      	ldr	r3, [r7, #12]
24062bbc:	2200      	movs	r2, #0
24062bbe:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
24062bc0:	68fb      	ldr	r3, [r7, #12]
24062bc2:	2200      	movs	r2, #0
24062bc4:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
24062bc6:	68fb      	ldr	r3, [r7, #12]
24062bc8:	685b      	ldr	r3, [r3, #4]
24062bca:	2b00      	cmp	r3, #0
24062bcc:	d003      	beq.n	24062bd6 <SAI_InitPCM+0x2e>
24062bce:	68fb      	ldr	r3, [r7, #12]
24062bd0:	685b      	ldr	r3, [r3, #4]
24062bd2:	2b02      	cmp	r3, #2
24062bd4:	d103      	bne.n	24062bde <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
24062bd6:	68fb      	ldr	r3, [r7, #12]
24062bd8:	2201      	movs	r2, #1
24062bda:	651a      	str	r2, [r3, #80]	@ 0x50
24062bdc:	e002      	b.n	24062be4 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
24062bde:	68fb      	ldr	r3, [r7, #12]
24062be0:	2200      	movs	r2, #0
24062be2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
24062be4:	68fb      	ldr	r3, [r7, #12]
24062be6:	2200      	movs	r2, #0
24062be8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
24062bea:	68fb      	ldr	r3, [r7, #12]
24062bec:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
24062bf0:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
24062bf2:	68fb      	ldr	r3, [r7, #12]
24062bf4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
24062bf8:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
24062bfa:	68fb      	ldr	r3, [r7, #12]
24062bfc:	2200      	movs	r2, #0
24062bfe:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
24062c00:	68fb      	ldr	r3, [r7, #12]
24062c02:	683a      	ldr	r2, [r7, #0]
24062c04:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
24062c06:	68fb      	ldr	r3, [r7, #12]
24062c08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
24062c0c:	675a      	str	r2, [r3, #116]	@ 0x74

  if (protocol == SAI_PCM_SHORT)
24062c0e:	68bb      	ldr	r3, [r7, #8]
24062c10:	2b04      	cmp	r3, #4
24062c12:	d103      	bne.n	24062c1c <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
24062c14:	68fb      	ldr	r3, [r7, #12]
24062c16:	2201      	movs	r2, #1
24062c18:	659a      	str	r2, [r3, #88]	@ 0x58
24062c1a:	e002      	b.n	24062c22 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
24062c1c:	68fb      	ldr	r3, [r7, #12]
24062c1e:	220d      	movs	r2, #13
24062c20:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  switch (datasize)
24062c22:	687b      	ldr	r3, [r7, #4]
24062c24:	2b03      	cmp	r3, #3
24062c26:	d837      	bhi.n	24062c98 <SAI_InitPCM+0xf0>
24062c28:	a201      	add	r2, pc, #4	@ (adr r2, 24062c30 <SAI_InitPCM+0x88>)
24062c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24062c2e:	bf00      	nop
24062c30:	24062c41 	.word	0x24062c41
24062c34:	24062c57 	.word	0x24062c57
24062c38:	24062c6d 	.word	0x24062c6d
24062c3c:	24062c83 	.word	0x24062c83
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
24062c40:	68fb      	ldr	r3, [r7, #12]
24062c42:	2280      	movs	r2, #128	@ 0x80
24062c44:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
24062c46:	683b      	ldr	r3, [r7, #0]
24062c48:	011a      	lsls	r2, r3, #4
24062c4a:	68fb      	ldr	r3, [r7, #12]
24062c4c:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
24062c4e:	68fb      	ldr	r3, [r7, #12]
24062c50:	2240      	movs	r2, #64	@ 0x40
24062c52:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
24062c54:	e023      	b.n	24062c9e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
24062c56:	68fb      	ldr	r3, [r7, #12]
24062c58:	2280      	movs	r2, #128	@ 0x80
24062c5a:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
24062c5c:	683b      	ldr	r3, [r7, #0]
24062c5e:	015a      	lsls	r2, r3, #5
24062c60:	68fb      	ldr	r3, [r7, #12]
24062c62:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
24062c64:	68fb      	ldr	r3, [r7, #12]
24062c66:	2280      	movs	r2, #128	@ 0x80
24062c68:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
24062c6a:	e018      	b.n	24062c9e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
24062c6c:	68fb      	ldr	r3, [r7, #12]
24062c6e:	22c0      	movs	r2, #192	@ 0xc0
24062c70:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
24062c72:	683b      	ldr	r3, [r7, #0]
24062c74:	015a      	lsls	r2, r3, #5
24062c76:	68fb      	ldr	r3, [r7, #12]
24062c78:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
24062c7a:	68fb      	ldr	r3, [r7, #12]
24062c7c:	2280      	movs	r2, #128	@ 0x80
24062c7e:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
24062c80:	e00d      	b.n	24062c9e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
24062c82:	68fb      	ldr	r3, [r7, #12]
24062c84:	22e0      	movs	r2, #224	@ 0xe0
24062c86:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
24062c88:	683b      	ldr	r3, [r7, #0]
24062c8a:	015a      	lsls	r2, r3, #5
24062c8c:	68fb      	ldr	r3, [r7, #12]
24062c8e:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
24062c90:	68fb      	ldr	r3, [r7, #12]
24062c92:	2280      	movs	r2, #128	@ 0x80
24062c94:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
24062c96:	e002      	b.n	24062c9e <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
24062c98:	2301      	movs	r3, #1
24062c9a:	75fb      	strb	r3, [r7, #23]
      break;
24062c9c:	bf00      	nop
  }

  return status;
24062c9e:	7dfb      	ldrb	r3, [r7, #23]
}
24062ca0:	4618      	mov	r0, r3
24062ca2:	371c      	adds	r7, #28
24062ca4:	46bd      	mov	sp, r7
24062ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
24062caa:	4770      	bx	lr

24062cac <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
24062cac:	b480      	push	{r7}
24062cae:	b085      	sub	sp, #20
24062cb0:	af00      	add	r7, sp, #0
24062cb2:	6078      	str	r0, [r7, #4]
24062cb4:	460b      	mov	r3, r1
24062cb6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
24062cb8:	2301      	movs	r3, #1
24062cba:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
24062cbc:	78fb      	ldrb	r3, [r7, #3]
24062cbe:	2b01      	cmp	r3, #1
24062cc0:	d103      	bne.n	24062cca <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
24062cc2:	68fb      	ldr	r3, [r7, #12]
24062cc4:	f043 0308 	orr.w	r3, r3, #8
24062cc8:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24062cca:	687b      	ldr	r3, [r7, #4]
24062ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
24062cce:	2b08      	cmp	r3, #8
24062cd0:	d10b      	bne.n	24062cea <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24062cd2:	687b      	ldr	r3, [r7, #4]
24062cd4:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24062cd6:	2b03      	cmp	r3, #3
24062cd8:	d003      	beq.n	24062ce2 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24062cda:	687b      	ldr	r3, [r7, #4]
24062cdc:	685b      	ldr	r3, [r3, #4]
24062cde:	2b01      	cmp	r3, #1
24062ce0:	d103      	bne.n	24062cea <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
24062ce2:	68fb      	ldr	r3, [r7, #12]
24062ce4:	f043 0310 	orr.w	r3, r3, #16
24062ce8:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
24062cea:	687b      	ldr	r3, [r7, #4]
24062cec:	685b      	ldr	r3, [r3, #4]
24062cee:	2b03      	cmp	r3, #3
24062cf0:	d003      	beq.n	24062cfa <SAI_InterruptFlag+0x4e>
24062cf2:	687b      	ldr	r3, [r7, #4]
24062cf4:	685b      	ldr	r3, [r3, #4]
24062cf6:	2b02      	cmp	r3, #2
24062cf8:	d104      	bne.n	24062d04 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
24062cfa:	68fb      	ldr	r3, [r7, #12]
24062cfc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
24062d00:	60fb      	str	r3, [r7, #12]
24062d02:	e003      	b.n	24062d0c <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
24062d04:	68fb      	ldr	r3, [r7, #12]
24062d06:	f043 0304 	orr.w	r3, r3, #4
24062d0a:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
24062d0c:	68fb      	ldr	r3, [r7, #12]
}
24062d0e:	4618      	mov	r0, r3
24062d10:	3714      	adds	r7, #20
24062d12:	46bd      	mov	sp, r7
24062d14:	f85d 7b04 	ldr.w	r7, [sp], #4
24062d18:	4770      	bx	lr
	...

24062d1c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
24062d1c:	b480      	push	{r7}
24062d1e:	b085      	sub	sp, #20
24062d20:	af00      	add	r7, sp, #0
24062d22:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
24062d24:	4b18      	ldr	r3, [pc, #96]	@ (24062d88 <SAI_Disable+0x6c>)
24062d26:	681b      	ldr	r3, [r3, #0]
24062d28:	4a18      	ldr	r2, [pc, #96]	@ (24062d8c <SAI_Disable+0x70>)
24062d2a:	fba2 2303 	umull	r2, r3, r2, r3
24062d2e:	0b1b      	lsrs	r3, r3, #12
24062d30:	009b      	lsls	r3, r3, #2
24062d32:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
24062d34:	2300      	movs	r3, #0
24062d36:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
24062d38:	687b      	ldr	r3, [r7, #4]
24062d3a:	681b      	ldr	r3, [r3, #0]
24062d3c:	681a      	ldr	r2, [r3, #0]
24062d3e:	687b      	ldr	r3, [r7, #4]
24062d40:	681b      	ldr	r3, [r3, #0]
24062d42:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
24062d46:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
24062d48:	68fb      	ldr	r3, [r7, #12]
24062d4a:	2b00      	cmp	r3, #0
24062d4c:	d10a      	bne.n	24062d64 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
24062d4e:	687b      	ldr	r3, [r7, #4]
24062d50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
24062d54:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
24062d58:	687b      	ldr	r3, [r7, #4]
24062d5a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
24062d5e:	2303      	movs	r3, #3
24062d60:	72fb      	strb	r3, [r7, #11]
      break;
24062d62:	e009      	b.n	24062d78 <SAI_Disable+0x5c>
    }
    count--;
24062d64:	68fb      	ldr	r3, [r7, #12]
24062d66:	3b01      	subs	r3, #1
24062d68:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
24062d6a:	687b      	ldr	r3, [r7, #4]
24062d6c:	681b      	ldr	r3, [r3, #0]
24062d6e:	681b      	ldr	r3, [r3, #0]
24062d70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
24062d74:	2b00      	cmp	r3, #0
24062d76:	d1e7      	bne.n	24062d48 <SAI_Disable+0x2c>

  return status;
24062d78:	7afb      	ldrb	r3, [r7, #11]
}
24062d7a:	4618      	mov	r0, r3
24062d7c:	3714      	adds	r7, #20
24062d7e:	46bd      	mov	sp, r7
24062d80:	f85d 7b04 	ldr.w	r7, [sp], #4
24062d84:	4770      	bx	lr
24062d86:	bf00      	nop
24062d88:	200000e0 	.word	0x200000e0
24062d8c:	95cbec1b 	.word	0x95cbec1b

24062d90 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
24062d90:	b580      	push	{r7, lr}
24062d92:	b084      	sub	sp, #16
24062d94:	af00      	add	r7, sp, #0
24062d96:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
24062d98:	687b      	ldr	r3, [r7, #4]
24062d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
24062d9c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
24062d9e:	687b      	ldr	r3, [r7, #4]
24062da0:	69db      	ldr	r3, [r3, #28]
24062da2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
24062da6:	d01c      	beq.n	24062de2 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
24062da8:	68fb      	ldr	r3, [r7, #12]
24062daa:	2200      	movs	r2, #0
24062dac:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
24062db0:	68fb      	ldr	r3, [r7, #12]
24062db2:	681b      	ldr	r3, [r3, #0]
24062db4:	681a      	ldr	r2, [r3, #0]
24062db6:	68fb      	ldr	r3, [r7, #12]
24062db8:	681b      	ldr	r3, [r3, #0]
24062dba:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
24062dbe:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
24062dc0:	2100      	movs	r1, #0
24062dc2:	68f8      	ldr	r0, [r7, #12]
24062dc4:	f7ff ff72 	bl	24062cac <SAI_InterruptFlag>
24062dc8:	4603      	mov	r3, r0
24062dca:	43d9      	mvns	r1, r3
24062dcc:	68fb      	ldr	r3, [r7, #12]
24062dce:	681b      	ldr	r3, [r3, #0]
24062dd0:	691a      	ldr	r2, [r3, #16]
24062dd2:	68fb      	ldr	r3, [r7, #12]
24062dd4:	681b      	ldr	r3, [r3, #0]
24062dd6:	400a      	ands	r2, r1
24062dd8:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
24062dda:	68fb      	ldr	r3, [r7, #12]
24062ddc:	2201      	movs	r2, #1
24062dde:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
24062de2:	68f8      	ldr	r0, [r7, #12]
24062de4:	f7ef fefc 	bl	24052be0 <HAL_SAI_TxCpltCallback>
#endif
}
24062de8:	bf00      	nop
24062dea:	3710      	adds	r7, #16
24062dec:	46bd      	mov	sp, r7
24062dee:	bd80      	pop	{r7, pc}

24062df0 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
24062df0:	b580      	push	{r7, lr}
24062df2:	b084      	sub	sp, #16
24062df4:	af00      	add	r7, sp, #0
24062df6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
24062df8:	687b      	ldr	r3, [r7, #4]
24062dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
24062dfc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
24062dfe:	68f8      	ldr	r0, [r7, #12]
24062e00:	f7ef fe8c 	bl	24052b1c <HAL_SAI_TxHalfCpltCallback>
#endif
}
24062e04:	bf00      	nop
24062e06:	3710      	adds	r7, #16
24062e08:	46bd      	mov	sp, r7
24062e0a:	bd80      	pop	{r7, pc}

24062e0c <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
24062e0c:	b580      	push	{r7, lr}
24062e0e:	b084      	sub	sp, #16
24062e10:	af00      	add	r7, sp, #0
24062e12:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
24062e14:	687b      	ldr	r3, [r7, #4]
24062e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
24062e18:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
24062e1a:	6878      	ldr	r0, [r7, #4]
24062e1c:	f7f8 fb48 	bl	2405b4b0 <HAL_DMA_GetError>
24062e20:	4603      	mov	r3, r0
24062e22:	2b02      	cmp	r3, #2
24062e24:	d01d      	beq.n	24062e62 <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
24062e26:	68fb      	ldr	r3, [r7, #12]
24062e28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
24062e2c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
24062e30:	68fb      	ldr	r3, [r7, #12]
24062e32:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
24062e36:	68fb      	ldr	r3, [r7, #12]
24062e38:	681b      	ldr	r3, [r3, #0]
24062e3a:	681a      	ldr	r2, [r3, #0]
24062e3c:	68fb      	ldr	r3, [r7, #12]
24062e3e:	681b      	ldr	r3, [r3, #0]
24062e40:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
24062e44:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
24062e46:	68f8      	ldr	r0, [r7, #12]
24062e48:	f7ff ff68 	bl	24062d1c <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
24062e4c:	68fb      	ldr	r3, [r7, #12]
24062e4e:	2201      	movs	r2, #1
24062e50:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
24062e54:	68fb      	ldr	r3, [r7, #12]
24062e56:	2200      	movs	r2, #0
24062e58:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
24062e5c:	68f8      	ldr	r0, [r7, #12]
24062e5e:	f7ff fde7 	bl	24062a30 <HAL_SAI_ErrorCallback>
#endif
  }
}
24062e62:	bf00      	nop
24062e64:	3710      	adds	r7, #16
24062e66:	46bd      	mov	sp, r7
24062e68:	bd80      	pop	{r7, pc}

24062e6a <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
24062e6a:	b580      	push	{r7, lr}
24062e6c:	b084      	sub	sp, #16
24062e6e:	af00      	add	r7, sp, #0
24062e70:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
24062e72:	687b      	ldr	r3, [r7, #4]
24062e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
24062e76:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
24062e78:	68fb      	ldr	r3, [r7, #12]
24062e7a:	681b      	ldr	r3, [r3, #0]
24062e7c:	681a      	ldr	r2, [r3, #0]
24062e7e:	68fb      	ldr	r3, [r7, #12]
24062e80:	681b      	ldr	r3, [r3, #0]
24062e82:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
24062e86:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
24062e88:	68fb      	ldr	r3, [r7, #12]
24062e8a:	681b      	ldr	r3, [r3, #0]
24062e8c:	2200      	movs	r2, #0
24062e8e:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
24062e90:	68fb      	ldr	r3, [r7, #12]
24062e92:	681b      	ldr	r3, [r3, #0]
24062e94:	f04f 32ff 	mov.w	r2, #4294967295
24062e98:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
24062e9a:	68fb      	ldr	r3, [r7, #12]
24062e9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
24062ea0:	2b20      	cmp	r3, #32
24062ea2:	d00a      	beq.n	24062eba <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
24062ea4:	68f8      	ldr	r0, [r7, #12]
24062ea6:	f7ff ff39 	bl	24062d1c <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
24062eaa:	68fb      	ldr	r3, [r7, #12]
24062eac:	681b      	ldr	r3, [r3, #0]
24062eae:	685a      	ldr	r2, [r3, #4]
24062eb0:	68fb      	ldr	r3, [r7, #12]
24062eb2:	681b      	ldr	r3, [r3, #0]
24062eb4:	f042 0208 	orr.w	r2, r2, #8
24062eb8:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
24062eba:	68fb      	ldr	r3, [r7, #12]
24062ebc:	2201      	movs	r2, #1
24062ebe:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
24062ec2:	68fb      	ldr	r3, [r7, #12]
24062ec4:	2200      	movs	r2, #0
24062ec6:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
24062eca:	68f8      	ldr	r0, [r7, #12]
24062ecc:	f7ff fdb0 	bl	24062a30 <HAL_SAI_ErrorCallback>
#endif
}
24062ed0:	bf00      	nop
24062ed2:	3710      	adds	r7, #16
24062ed4:	46bd      	mov	sp, r7
24062ed6:	bd80      	pop	{r7, pc}

24062ed8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
24062ed8:	b580      	push	{r7, lr}
24062eda:	b084      	sub	sp, #16
24062edc:	af00      	add	r7, sp, #0
24062ede:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
24062ee0:	687b      	ldr	r3, [r7, #4]
24062ee2:	2b00      	cmp	r3, #0
24062ee4:	d101      	bne.n	24062eea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
24062ee6:	2301      	movs	r3, #1
24062ee8:	e10f      	b.n	2406310a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
24062eea:	687b      	ldr	r3, [r7, #4]
24062eec:	2200      	movs	r2, #0
24062eee:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
24062ef0:	687b      	ldr	r3, [r7, #4]
24062ef2:	681b      	ldr	r3, [r3, #0]
24062ef4:	4a87      	ldr	r2, [pc, #540]	@ (24063114 <HAL_SPI_Init+0x23c>)
24062ef6:	4293      	cmp	r3, r2
24062ef8:	d00f      	beq.n	24062f1a <HAL_SPI_Init+0x42>
24062efa:	687b      	ldr	r3, [r7, #4]
24062efc:	681b      	ldr	r3, [r3, #0]
24062efe:	4a86      	ldr	r2, [pc, #536]	@ (24063118 <HAL_SPI_Init+0x240>)
24062f00:	4293      	cmp	r3, r2
24062f02:	d00a      	beq.n	24062f1a <HAL_SPI_Init+0x42>
24062f04:	687b      	ldr	r3, [r7, #4]
24062f06:	681b      	ldr	r3, [r3, #0]
24062f08:	4a84      	ldr	r2, [pc, #528]	@ (2406311c <HAL_SPI_Init+0x244>)
24062f0a:	4293      	cmp	r3, r2
24062f0c:	d005      	beq.n	24062f1a <HAL_SPI_Init+0x42>
24062f0e:	687b      	ldr	r3, [r7, #4]
24062f10:	68db      	ldr	r3, [r3, #12]
24062f12:	2b0f      	cmp	r3, #15
24062f14:	d901      	bls.n	24062f1a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
24062f16:	2301      	movs	r3, #1
24062f18:	e0f7      	b.n	2406310a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
24062f1a:	6878      	ldr	r0, [r7, #4]
24062f1c:	f000 fbbc 	bl	24063698 <SPI_GetPacketSize>
24062f20:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
24062f22:	687b      	ldr	r3, [r7, #4]
24062f24:	681b      	ldr	r3, [r3, #0]
24062f26:	4a7b      	ldr	r2, [pc, #492]	@ (24063114 <HAL_SPI_Init+0x23c>)
24062f28:	4293      	cmp	r3, r2
24062f2a:	d00c      	beq.n	24062f46 <HAL_SPI_Init+0x6e>
24062f2c:	687b      	ldr	r3, [r7, #4]
24062f2e:	681b      	ldr	r3, [r3, #0]
24062f30:	4a79      	ldr	r2, [pc, #484]	@ (24063118 <HAL_SPI_Init+0x240>)
24062f32:	4293      	cmp	r3, r2
24062f34:	d007      	beq.n	24062f46 <HAL_SPI_Init+0x6e>
24062f36:	687b      	ldr	r3, [r7, #4]
24062f38:	681b      	ldr	r3, [r3, #0]
24062f3a:	4a78      	ldr	r2, [pc, #480]	@ (2406311c <HAL_SPI_Init+0x244>)
24062f3c:	4293      	cmp	r3, r2
24062f3e:	d002      	beq.n	24062f46 <HAL_SPI_Init+0x6e>
24062f40:	68fb      	ldr	r3, [r7, #12]
24062f42:	2b08      	cmp	r3, #8
24062f44:	d811      	bhi.n	24062f6a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
24062f46:	687b      	ldr	r3, [r7, #4]
24062f48:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
24062f4a:	4a72      	ldr	r2, [pc, #456]	@ (24063114 <HAL_SPI_Init+0x23c>)
24062f4c:	4293      	cmp	r3, r2
24062f4e:	d009      	beq.n	24062f64 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
24062f50:	687b      	ldr	r3, [r7, #4]
24062f52:	681b      	ldr	r3, [r3, #0]
24062f54:	4a70      	ldr	r2, [pc, #448]	@ (24063118 <HAL_SPI_Init+0x240>)
24062f56:	4293      	cmp	r3, r2
24062f58:	d004      	beq.n	24062f64 <HAL_SPI_Init+0x8c>
24062f5a:	687b      	ldr	r3, [r7, #4]
24062f5c:	681b      	ldr	r3, [r3, #0]
24062f5e:	4a6f      	ldr	r2, [pc, #444]	@ (2406311c <HAL_SPI_Init+0x244>)
24062f60:	4293      	cmp	r3, r2
24062f62:	d104      	bne.n	24062f6e <HAL_SPI_Init+0x96>
24062f64:	68fb      	ldr	r3, [r7, #12]
24062f66:	2b10      	cmp	r3, #16
24062f68:	d901      	bls.n	24062f6e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
24062f6a:	2301      	movs	r3, #1
24062f6c:	e0cd      	b.n	2406310a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
24062f6e:	687b      	ldr	r3, [r7, #4]
24062f70:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
24062f74:	b2db      	uxtb	r3, r3
24062f76:	2b00      	cmp	r3, #0
24062f78:	d106      	bne.n	24062f88 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
24062f7a:	687b      	ldr	r3, [r7, #4]
24062f7c:	2200      	movs	r2, #0
24062f7e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
24062f82:	6878      	ldr	r0, [r7, #4]
24062f84:	f7f3 f9a6 	bl	240562d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
24062f88:	687b      	ldr	r3, [r7, #4]
24062f8a:	2202      	movs	r2, #2
24062f8c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
24062f90:	687b      	ldr	r3, [r7, #4]
24062f92:	681b      	ldr	r3, [r3, #0]
24062f94:	681a      	ldr	r2, [r3, #0]
24062f96:	687b      	ldr	r3, [r7, #4]
24062f98:	681b      	ldr	r3, [r3, #0]
24062f9a:	f022 0201 	bic.w	r2, r2, #1
24062f9e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
24062fa0:	687b      	ldr	r3, [r7, #4]
24062fa2:	681b      	ldr	r3, [r3, #0]
24062fa4:	689b      	ldr	r3, [r3, #8]
24062fa6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
24062faa:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
24062fac:	687b      	ldr	r3, [r7, #4]
24062fae:	699b      	ldr	r3, [r3, #24]
24062fb0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
24062fb4:	d119      	bne.n	24062fea <HAL_SPI_Init+0x112>
24062fb6:	687b      	ldr	r3, [r7, #4]
24062fb8:	685b      	ldr	r3, [r3, #4]
24062fba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
24062fbe:	d103      	bne.n	24062fc8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
24062fc0:	687b      	ldr	r3, [r7, #4]
24062fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
24062fc4:	2b00      	cmp	r3, #0
24062fc6:	d008      	beq.n	24062fda <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
24062fc8:	687b      	ldr	r3, [r7, #4]
24062fca:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
24062fcc:	2b00      	cmp	r3, #0
24062fce:	d10c      	bne.n	24062fea <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
24062fd0:	687b      	ldr	r3, [r7, #4]
24062fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
24062fd4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
24062fd8:	d107      	bne.n	24062fea <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
24062fda:	687b      	ldr	r3, [r7, #4]
24062fdc:	681b      	ldr	r3, [r3, #0]
24062fde:	681a      	ldr	r2, [r3, #0]
24062fe0:	687b      	ldr	r3, [r7, #4]
24062fe2:	681b      	ldr	r3, [r3, #0]
24062fe4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
24062fe8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
24062fea:	687b      	ldr	r3, [r7, #4]
24062fec:	685b      	ldr	r3, [r3, #4]
24062fee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
24062ff2:	2b00      	cmp	r3, #0
24062ff4:	d00f      	beq.n	24063016 <HAL_SPI_Init+0x13e>
24062ff6:	687b      	ldr	r3, [r7, #4]
24062ff8:	68db      	ldr	r3, [r3, #12]
24062ffa:	2b06      	cmp	r3, #6
24062ffc:	d90b      	bls.n	24063016 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
24062ffe:	687b      	ldr	r3, [r7, #4]
24063000:	681b      	ldr	r3, [r3, #0]
24063002:	681b      	ldr	r3, [r3, #0]
24063004:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
24063008:	687b      	ldr	r3, [r7, #4]
2406300a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
2406300c:	687b      	ldr	r3, [r7, #4]
2406300e:	681b      	ldr	r3, [r3, #0]
24063010:	430a      	orrs	r2, r1
24063012:	601a      	str	r2, [r3, #0]
24063014:	e007      	b.n	24063026 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
24063016:	687b      	ldr	r3, [r7, #4]
24063018:	681b      	ldr	r3, [r3, #0]
2406301a:	681a      	ldr	r2, [r3, #0]
2406301c:	687b      	ldr	r3, [r7, #4]
2406301e:	681b      	ldr	r3, [r3, #0]
24063020:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
24063024:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
24063026:	687b      	ldr	r3, [r7, #4]
24063028:	69da      	ldr	r2, [r3, #28]
2406302a:	687b      	ldr	r3, [r7, #4]
2406302c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
2406302e:	431a      	orrs	r2, r3
24063030:	68bb      	ldr	r3, [r7, #8]
24063032:	431a      	orrs	r2, r3
24063034:	687b      	ldr	r3, [r7, #4]
24063036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
24063038:	ea42 0103 	orr.w	r1, r2, r3
2406303c:	687b      	ldr	r3, [r7, #4]
2406303e:	68da      	ldr	r2, [r3, #12]
24063040:	687b      	ldr	r3, [r7, #4]
24063042:	681b      	ldr	r3, [r3, #0]
24063044:	430a      	orrs	r2, r1
24063046:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
24063048:	687b      	ldr	r3, [r7, #4]
2406304a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
2406304c:	687b      	ldr	r3, [r7, #4]
2406304e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
24063050:	431a      	orrs	r2, r3
24063052:	687b      	ldr	r3, [r7, #4]
24063054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
24063056:	431a      	orrs	r2, r3
24063058:	687b      	ldr	r3, [r7, #4]
2406305a:	699b      	ldr	r3, [r3, #24]
2406305c:	431a      	orrs	r2, r3
2406305e:	687b      	ldr	r3, [r7, #4]
24063060:	691b      	ldr	r3, [r3, #16]
24063062:	431a      	orrs	r2, r3
24063064:	687b      	ldr	r3, [r7, #4]
24063066:	695b      	ldr	r3, [r3, #20]
24063068:	431a      	orrs	r2, r3
2406306a:	687b      	ldr	r3, [r7, #4]
2406306c:	6a1b      	ldr	r3, [r3, #32]
2406306e:	431a      	orrs	r2, r3
24063070:	687b      	ldr	r3, [r7, #4]
24063072:	685b      	ldr	r3, [r3, #4]
24063074:	431a      	orrs	r2, r3
24063076:	687b      	ldr	r3, [r7, #4]
24063078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
2406307a:	431a      	orrs	r2, r3
2406307c:	687b      	ldr	r3, [r7, #4]
2406307e:	689b      	ldr	r3, [r3, #8]
24063080:	431a      	orrs	r2, r3
24063082:	687b      	ldr	r3, [r7, #4]
24063084:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
24063086:	ea42 0103 	orr.w	r1, r2, r3
2406308a:	687b      	ldr	r3, [r7, #4]
2406308c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
2406308e:	687b      	ldr	r3, [r7, #4]
24063090:	681b      	ldr	r3, [r3, #0]
24063092:	430a      	orrs	r2, r1
24063094:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
24063096:	687b      	ldr	r3, [r7, #4]
24063098:	685b      	ldr	r3, [r3, #4]
2406309a:	2b00      	cmp	r3, #0
2406309c:	d113      	bne.n	240630c6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
2406309e:	687b      	ldr	r3, [r7, #4]
240630a0:	681b      	ldr	r3, [r3, #0]
240630a2:	689b      	ldr	r3, [r3, #8]
240630a4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
240630a8:	687b      	ldr	r3, [r7, #4]
240630aa:	681b      	ldr	r3, [r3, #0]
240630ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
240630b0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
240630b2:	687b      	ldr	r3, [r7, #4]
240630b4:	681b      	ldr	r3, [r3, #0]
240630b6:	689b      	ldr	r3, [r3, #8]
240630b8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
240630bc:	687b      	ldr	r3, [r7, #4]
240630be:	681b      	ldr	r3, [r3, #0]
240630c0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
240630c4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
240630c6:	687b      	ldr	r3, [r7, #4]
240630c8:	681b      	ldr	r3, [r3, #0]
240630ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
240630cc:	687b      	ldr	r3, [r7, #4]
240630ce:	681b      	ldr	r3, [r3, #0]
240630d0:	f022 0201 	bic.w	r2, r2, #1
240630d4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
240630d6:	687b      	ldr	r3, [r7, #4]
240630d8:	685b      	ldr	r3, [r3, #4]
240630da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
240630de:	2b00      	cmp	r3, #0
240630e0:	d00a      	beq.n	240630f8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
240630e2:	687b      	ldr	r3, [r7, #4]
240630e4:	681b      	ldr	r3, [r3, #0]
240630e6:	68db      	ldr	r3, [r3, #12]
240630e8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
240630ec:	687b      	ldr	r3, [r7, #4]
240630ee:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
240630f0:	687b      	ldr	r3, [r7, #4]
240630f2:	681b      	ldr	r3, [r3, #0]
240630f4:	430a      	orrs	r2, r1
240630f6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
240630f8:	687b      	ldr	r3, [r7, #4]
240630fa:	2200      	movs	r2, #0
240630fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
24063100:	687b      	ldr	r3, [r7, #4]
24063102:	2201      	movs	r2, #1
24063104:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
24063108:	2300      	movs	r3, #0
}
2406310a:	4618      	mov	r0, r3
2406310c:	3710      	adds	r7, #16
2406310e:	46bd      	mov	sp, r7
24063110:	bd80      	pop	{r7, pc}
24063112:	bf00      	nop
24063114:	40013000 	.word	0x40013000
24063118:	40003800 	.word	0x40003800
2406311c:	40003c00 	.word	0x40003c00

24063120 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
24063120:	b580      	push	{r7, lr}
24063122:	b088      	sub	sp, #32
24063124:	af02      	add	r7, sp, #8
24063126:	60f8      	str	r0, [r7, #12]
24063128:	60b9      	str	r1, [r7, #8]
2406312a:	603b      	str	r3, [r7, #0]
2406312c:	4613      	mov	r3, r2
2406312e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
24063130:	68fb      	ldr	r3, [r7, #12]
24063132:	681b      	ldr	r3, [r3, #0]
24063134:	3320      	adds	r3, #32
24063136:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
24063138:	f7f3 fca2 	bl	24056a80 <HAL_GetTick>
2406313c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
2406313e:	68fb      	ldr	r3, [r7, #12]
24063140:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
24063144:	b2db      	uxtb	r3, r3
24063146:	2b01      	cmp	r3, #1
24063148:	d001      	beq.n	2406314e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
2406314a:	2302      	movs	r3, #2
2406314c:	e1d1      	b.n	240634f2 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
2406314e:	68bb      	ldr	r3, [r7, #8]
24063150:	2b00      	cmp	r3, #0
24063152:	d002      	beq.n	2406315a <HAL_SPI_Transmit+0x3a>
24063154:	88fb      	ldrh	r3, [r7, #6]
24063156:	2b00      	cmp	r3, #0
24063158:	d101      	bne.n	2406315e <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
2406315a:	2301      	movs	r3, #1
2406315c:	e1c9      	b.n	240634f2 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
2406315e:	68fb      	ldr	r3, [r7, #12]
24063160:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
24063164:	2b01      	cmp	r3, #1
24063166:	d101      	bne.n	2406316c <HAL_SPI_Transmit+0x4c>
24063168:	2302      	movs	r3, #2
2406316a:	e1c2      	b.n	240634f2 <HAL_SPI_Transmit+0x3d2>
2406316c:	68fb      	ldr	r3, [r7, #12]
2406316e:	2201      	movs	r2, #1
24063170:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
24063174:	68fb      	ldr	r3, [r7, #12]
24063176:	2203      	movs	r2, #3
24063178:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
2406317c:	68fb      	ldr	r3, [r7, #12]
2406317e:	2200      	movs	r2, #0
24063180:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
24063184:	68fb      	ldr	r3, [r7, #12]
24063186:	68ba      	ldr	r2, [r7, #8]
24063188:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
2406318a:	68fb      	ldr	r3, [r7, #12]
2406318c:	88fa      	ldrh	r2, [r7, #6]
2406318e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
24063192:	68fb      	ldr	r3, [r7, #12]
24063194:	88fa      	ldrh	r2, [r7, #6]
24063196:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
2406319a:	68fb      	ldr	r3, [r7, #12]
2406319c:	2200      	movs	r2, #0
2406319e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
240631a0:	68fb      	ldr	r3, [r7, #12]
240631a2:	2200      	movs	r2, #0
240631a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
240631a8:	68fb      	ldr	r3, [r7, #12]
240631aa:	2200      	movs	r2, #0
240631ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
240631b0:	68fb      	ldr	r3, [r7, #12]
240631b2:	2200      	movs	r2, #0
240631b4:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
240631b6:	68fb      	ldr	r3, [r7, #12]
240631b8:	2200      	movs	r2, #0
240631ba:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
240631bc:	68fb      	ldr	r3, [r7, #12]
240631be:	689b      	ldr	r3, [r3, #8]
240631c0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
240631c4:	d108      	bne.n	240631d8 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
240631c6:	68fb      	ldr	r3, [r7, #12]
240631c8:	681b      	ldr	r3, [r3, #0]
240631ca:	681a      	ldr	r2, [r3, #0]
240631cc:	68fb      	ldr	r3, [r7, #12]
240631ce:	681b      	ldr	r3, [r3, #0]
240631d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
240631d4:	601a      	str	r2, [r3, #0]
240631d6:	e009      	b.n	240631ec <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
240631d8:	68fb      	ldr	r3, [r7, #12]
240631da:	681b      	ldr	r3, [r3, #0]
240631dc:	68db      	ldr	r3, [r3, #12]
240631de:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
240631e2:	68fb      	ldr	r3, [r7, #12]
240631e4:	681b      	ldr	r3, [r3, #0]
240631e6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
240631ea:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
240631ec:	68fb      	ldr	r3, [r7, #12]
240631ee:	681b      	ldr	r3, [r3, #0]
240631f0:	685a      	ldr	r2, [r3, #4]
240631f2:	4b96      	ldr	r3, [pc, #600]	@ (2406344c <HAL_SPI_Transmit+0x32c>)
240631f4:	4013      	ands	r3, r2
240631f6:	88f9      	ldrh	r1, [r7, #6]
240631f8:	68fa      	ldr	r2, [r7, #12]
240631fa:	6812      	ldr	r2, [r2, #0]
240631fc:	430b      	orrs	r3, r1
240631fe:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
24063200:	68fb      	ldr	r3, [r7, #12]
24063202:	681b      	ldr	r3, [r3, #0]
24063204:	681a      	ldr	r2, [r3, #0]
24063206:	68fb      	ldr	r3, [r7, #12]
24063208:	681b      	ldr	r3, [r3, #0]
2406320a:	f042 0201 	orr.w	r2, r2, #1
2406320e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
24063210:	68fb      	ldr	r3, [r7, #12]
24063212:	685b      	ldr	r3, [r3, #4]
24063214:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
24063218:	d107      	bne.n	2406322a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
2406321a:	68fb      	ldr	r3, [r7, #12]
2406321c:	681b      	ldr	r3, [r3, #0]
2406321e:	681a      	ldr	r2, [r3, #0]
24063220:	68fb      	ldr	r3, [r7, #12]
24063222:	681b      	ldr	r3, [r3, #0]
24063224:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
24063228:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
2406322a:	68fb      	ldr	r3, [r7, #12]
2406322c:	68db      	ldr	r3, [r3, #12]
2406322e:	2b0f      	cmp	r3, #15
24063230:	d947      	bls.n	240632c2 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
24063232:	e03f      	b.n	240632b4 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
24063234:	68fb      	ldr	r3, [r7, #12]
24063236:	681b      	ldr	r3, [r3, #0]
24063238:	695b      	ldr	r3, [r3, #20]
2406323a:	f003 0302 	and.w	r3, r3, #2
2406323e:	2b02      	cmp	r3, #2
24063240:	d114      	bne.n	2406326c <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
24063242:	68fb      	ldr	r3, [r7, #12]
24063244:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
24063246:	68fb      	ldr	r3, [r7, #12]
24063248:	681b      	ldr	r3, [r3, #0]
2406324a:	6812      	ldr	r2, [r2, #0]
2406324c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
2406324e:	68fb      	ldr	r3, [r7, #12]
24063250:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
24063252:	1d1a      	adds	r2, r3, #4
24063254:	68fb      	ldr	r3, [r7, #12]
24063256:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
24063258:	68fb      	ldr	r3, [r7, #12]
2406325a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
2406325e:	b29b      	uxth	r3, r3
24063260:	3b01      	subs	r3, #1
24063262:	b29a      	uxth	r2, r3
24063264:	68fb      	ldr	r3, [r7, #12]
24063266:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
2406326a:	e023      	b.n	240632b4 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
2406326c:	f7f3 fc08 	bl	24056a80 <HAL_GetTick>
24063270:	4602      	mov	r2, r0
24063272:	693b      	ldr	r3, [r7, #16]
24063274:	1ad3      	subs	r3, r2, r3
24063276:	683a      	ldr	r2, [r7, #0]
24063278:	429a      	cmp	r2, r3
2406327a:	d803      	bhi.n	24063284 <HAL_SPI_Transmit+0x164>
2406327c:	683b      	ldr	r3, [r7, #0]
2406327e:	f1b3 3fff 	cmp.w	r3, #4294967295
24063282:	d102      	bne.n	2406328a <HAL_SPI_Transmit+0x16a>
24063284:	683b      	ldr	r3, [r7, #0]
24063286:	2b00      	cmp	r3, #0
24063288:	d114      	bne.n	240632b4 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
2406328a:	68f8      	ldr	r0, [r7, #12]
2406328c:	f000 f936 	bl	240634fc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
24063290:	68fb      	ldr	r3, [r7, #12]
24063292:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
24063296:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
2406329a:	68fb      	ldr	r3, [r7, #12]
2406329c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
240632a0:	68fb      	ldr	r3, [r7, #12]
240632a2:	2201      	movs	r2, #1
240632a4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
240632a8:	68fb      	ldr	r3, [r7, #12]
240632aa:	2200      	movs	r2, #0
240632ac:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
240632b0:	2303      	movs	r3, #3
240632b2:	e11e      	b.n	240634f2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
240632b4:	68fb      	ldr	r3, [r7, #12]
240632b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
240632ba:	b29b      	uxth	r3, r3
240632bc:	2b00      	cmp	r3, #0
240632be:	d1b9      	bne.n	24063234 <HAL_SPI_Transmit+0x114>
240632c0:	e0f1      	b.n	240634a6 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
240632c2:	68fb      	ldr	r3, [r7, #12]
240632c4:	68db      	ldr	r3, [r3, #12]
240632c6:	2b07      	cmp	r3, #7
240632c8:	f240 80e6 	bls.w	24063498 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
240632cc:	e05d      	b.n	2406338a <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
240632ce:	68fb      	ldr	r3, [r7, #12]
240632d0:	681b      	ldr	r3, [r3, #0]
240632d2:	695b      	ldr	r3, [r3, #20]
240632d4:	f003 0302 	and.w	r3, r3, #2
240632d8:	2b02      	cmp	r3, #2
240632da:	d132      	bne.n	24063342 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
240632dc:	68fb      	ldr	r3, [r7, #12]
240632de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
240632e2:	b29b      	uxth	r3, r3
240632e4:	2b01      	cmp	r3, #1
240632e6:	d918      	bls.n	2406331a <HAL_SPI_Transmit+0x1fa>
240632e8:	68fb      	ldr	r3, [r7, #12]
240632ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
240632ec:	2b00      	cmp	r3, #0
240632ee:	d014      	beq.n	2406331a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
240632f0:	68fb      	ldr	r3, [r7, #12]
240632f2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
240632f4:	68fb      	ldr	r3, [r7, #12]
240632f6:	681b      	ldr	r3, [r3, #0]
240632f8:	6812      	ldr	r2, [r2, #0]
240632fa:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
240632fc:	68fb      	ldr	r3, [r7, #12]
240632fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
24063300:	1d1a      	adds	r2, r3, #4
24063302:	68fb      	ldr	r3, [r7, #12]
24063304:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
24063306:	68fb      	ldr	r3, [r7, #12]
24063308:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
2406330c:	b29b      	uxth	r3, r3
2406330e:	3b02      	subs	r3, #2
24063310:	b29a      	uxth	r2, r3
24063312:	68fb      	ldr	r3, [r7, #12]
24063314:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
24063318:	e037      	b.n	2406338a <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
2406331a:	68fb      	ldr	r3, [r7, #12]
2406331c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
2406331e:	881a      	ldrh	r2, [r3, #0]
24063320:	697b      	ldr	r3, [r7, #20]
24063322:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
24063324:	68fb      	ldr	r3, [r7, #12]
24063326:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
24063328:	1c9a      	adds	r2, r3, #2
2406332a:	68fb      	ldr	r3, [r7, #12]
2406332c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
2406332e:	68fb      	ldr	r3, [r7, #12]
24063330:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
24063334:	b29b      	uxth	r3, r3
24063336:	3b01      	subs	r3, #1
24063338:	b29a      	uxth	r2, r3
2406333a:	68fb      	ldr	r3, [r7, #12]
2406333c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
24063340:	e023      	b.n	2406338a <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
24063342:	f7f3 fb9d 	bl	24056a80 <HAL_GetTick>
24063346:	4602      	mov	r2, r0
24063348:	693b      	ldr	r3, [r7, #16]
2406334a:	1ad3      	subs	r3, r2, r3
2406334c:	683a      	ldr	r2, [r7, #0]
2406334e:	429a      	cmp	r2, r3
24063350:	d803      	bhi.n	2406335a <HAL_SPI_Transmit+0x23a>
24063352:	683b      	ldr	r3, [r7, #0]
24063354:	f1b3 3fff 	cmp.w	r3, #4294967295
24063358:	d102      	bne.n	24063360 <HAL_SPI_Transmit+0x240>
2406335a:	683b      	ldr	r3, [r7, #0]
2406335c:	2b00      	cmp	r3, #0
2406335e:	d114      	bne.n	2406338a <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
24063360:	68f8      	ldr	r0, [r7, #12]
24063362:	f000 f8cb 	bl	240634fc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
24063366:	68fb      	ldr	r3, [r7, #12]
24063368:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
2406336c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
24063370:	68fb      	ldr	r3, [r7, #12]
24063372:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
24063376:	68fb      	ldr	r3, [r7, #12]
24063378:	2201      	movs	r2, #1
2406337a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
2406337e:	68fb      	ldr	r3, [r7, #12]
24063380:	2200      	movs	r2, #0
24063382:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
24063386:	2303      	movs	r3, #3
24063388:	e0b3      	b.n	240634f2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
2406338a:	68fb      	ldr	r3, [r7, #12]
2406338c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
24063390:	b29b      	uxth	r3, r3
24063392:	2b00      	cmp	r3, #0
24063394:	d19b      	bne.n	240632ce <HAL_SPI_Transmit+0x1ae>
24063396:	e086      	b.n	240634a6 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
24063398:	68fb      	ldr	r3, [r7, #12]
2406339a:	681b      	ldr	r3, [r3, #0]
2406339c:	695b      	ldr	r3, [r3, #20]
2406339e:	f003 0302 	and.w	r3, r3, #2
240633a2:	2b02      	cmp	r3, #2
240633a4:	d154      	bne.n	24063450 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
240633a6:	68fb      	ldr	r3, [r7, #12]
240633a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
240633ac:	b29b      	uxth	r3, r3
240633ae:	2b03      	cmp	r3, #3
240633b0:	d918      	bls.n	240633e4 <HAL_SPI_Transmit+0x2c4>
240633b2:	68fb      	ldr	r3, [r7, #12]
240633b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
240633b6:	2b40      	cmp	r3, #64	@ 0x40
240633b8:	d914      	bls.n	240633e4 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
240633ba:	68fb      	ldr	r3, [r7, #12]
240633bc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
240633be:	68fb      	ldr	r3, [r7, #12]
240633c0:	681b      	ldr	r3, [r3, #0]
240633c2:	6812      	ldr	r2, [r2, #0]
240633c4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
240633c6:	68fb      	ldr	r3, [r7, #12]
240633c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
240633ca:	1d1a      	adds	r2, r3, #4
240633cc:	68fb      	ldr	r3, [r7, #12]
240633ce:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
240633d0:	68fb      	ldr	r3, [r7, #12]
240633d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
240633d6:	b29b      	uxth	r3, r3
240633d8:	3b04      	subs	r3, #4
240633da:	b29a      	uxth	r2, r3
240633dc:	68fb      	ldr	r3, [r7, #12]
240633de:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
240633e2:	e059      	b.n	24063498 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
240633e4:	68fb      	ldr	r3, [r7, #12]
240633e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
240633ea:	b29b      	uxth	r3, r3
240633ec:	2b01      	cmp	r3, #1
240633ee:	d917      	bls.n	24063420 <HAL_SPI_Transmit+0x300>
240633f0:	68fb      	ldr	r3, [r7, #12]
240633f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
240633f4:	2b00      	cmp	r3, #0
240633f6:	d013      	beq.n	24063420 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
240633f8:	68fb      	ldr	r3, [r7, #12]
240633fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
240633fc:	881a      	ldrh	r2, [r3, #0]
240633fe:	697b      	ldr	r3, [r7, #20]
24063400:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
24063402:	68fb      	ldr	r3, [r7, #12]
24063404:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
24063406:	1c9a      	adds	r2, r3, #2
24063408:	68fb      	ldr	r3, [r7, #12]
2406340a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
2406340c:	68fb      	ldr	r3, [r7, #12]
2406340e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
24063412:	b29b      	uxth	r3, r3
24063414:	3b02      	subs	r3, #2
24063416:	b29a      	uxth	r2, r3
24063418:	68fb      	ldr	r3, [r7, #12]
2406341a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
2406341e:	e03b      	b.n	24063498 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
24063420:	68fb      	ldr	r3, [r7, #12]
24063422:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
24063424:	68fb      	ldr	r3, [r7, #12]
24063426:	681b      	ldr	r3, [r3, #0]
24063428:	3320      	adds	r3, #32
2406342a:	7812      	ldrb	r2, [r2, #0]
2406342c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
2406342e:	68fb      	ldr	r3, [r7, #12]
24063430:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
24063432:	1c5a      	adds	r2, r3, #1
24063434:	68fb      	ldr	r3, [r7, #12]
24063436:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
24063438:	68fb      	ldr	r3, [r7, #12]
2406343a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
2406343e:	b29b      	uxth	r3, r3
24063440:	3b01      	subs	r3, #1
24063442:	b29a      	uxth	r2, r3
24063444:	68fb      	ldr	r3, [r7, #12]
24063446:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
2406344a:	e025      	b.n	24063498 <HAL_SPI_Transmit+0x378>
2406344c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
24063450:	f7f3 fb16 	bl	24056a80 <HAL_GetTick>
24063454:	4602      	mov	r2, r0
24063456:	693b      	ldr	r3, [r7, #16]
24063458:	1ad3      	subs	r3, r2, r3
2406345a:	683a      	ldr	r2, [r7, #0]
2406345c:	429a      	cmp	r2, r3
2406345e:	d803      	bhi.n	24063468 <HAL_SPI_Transmit+0x348>
24063460:	683b      	ldr	r3, [r7, #0]
24063462:	f1b3 3fff 	cmp.w	r3, #4294967295
24063466:	d102      	bne.n	2406346e <HAL_SPI_Transmit+0x34e>
24063468:	683b      	ldr	r3, [r7, #0]
2406346a:	2b00      	cmp	r3, #0
2406346c:	d114      	bne.n	24063498 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
2406346e:	68f8      	ldr	r0, [r7, #12]
24063470:	f000 f844 	bl	240634fc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
24063474:	68fb      	ldr	r3, [r7, #12]
24063476:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
2406347a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
2406347e:	68fb      	ldr	r3, [r7, #12]
24063480:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
24063484:	68fb      	ldr	r3, [r7, #12]
24063486:	2201      	movs	r2, #1
24063488:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
2406348c:	68fb      	ldr	r3, [r7, #12]
2406348e:	2200      	movs	r2, #0
24063490:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
24063494:	2303      	movs	r3, #3
24063496:	e02c      	b.n	240634f2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
24063498:	68fb      	ldr	r3, [r7, #12]
2406349a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
2406349e:	b29b      	uxth	r3, r3
240634a0:	2b00      	cmp	r3, #0
240634a2:	f47f af79 	bne.w	24063398 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
240634a6:	693b      	ldr	r3, [r7, #16]
240634a8:	9300      	str	r3, [sp, #0]
240634aa:	683b      	ldr	r3, [r7, #0]
240634ac:	2200      	movs	r2, #0
240634ae:	2108      	movs	r1, #8
240634b0:	68f8      	ldr	r0, [r7, #12]
240634b2:	f000 f8c3 	bl	2406363c <SPI_WaitOnFlagUntilTimeout>
240634b6:	4603      	mov	r3, r0
240634b8:	2b00      	cmp	r3, #0
240634ba:	d007      	beq.n	240634cc <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
240634bc:	68fb      	ldr	r3, [r7, #12]
240634be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
240634c2:	f043 0220 	orr.w	r2, r3, #32
240634c6:	68fb      	ldr	r3, [r7, #12]
240634c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
240634cc:	68f8      	ldr	r0, [r7, #12]
240634ce:	f000 f815 	bl	240634fc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
240634d2:	68fb      	ldr	r3, [r7, #12]
240634d4:	2201      	movs	r2, #1
240634d6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
240634da:	68fb      	ldr	r3, [r7, #12]
240634dc:	2200      	movs	r2, #0
240634de:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
240634e2:	68fb      	ldr	r3, [r7, #12]
240634e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
240634e8:	2b00      	cmp	r3, #0
240634ea:	d001      	beq.n	240634f0 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
240634ec:	2301      	movs	r3, #1
240634ee:	e000      	b.n	240634f2 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
240634f0:	2300      	movs	r3, #0
  }
}
240634f2:	4618      	mov	r0, r3
240634f4:	3718      	adds	r7, #24
240634f6:	46bd      	mov	sp, r7
240634f8:	bd80      	pop	{r7, pc}
240634fa:	bf00      	nop

240634fc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
240634fc:	b480      	push	{r7}
240634fe:	b085      	sub	sp, #20
24063500:	af00      	add	r7, sp, #0
24063502:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
24063504:	687b      	ldr	r3, [r7, #4]
24063506:	681b      	ldr	r3, [r3, #0]
24063508:	695b      	ldr	r3, [r3, #20]
2406350a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
2406350c:	687b      	ldr	r3, [r7, #4]
2406350e:	681b      	ldr	r3, [r3, #0]
24063510:	699a      	ldr	r2, [r3, #24]
24063512:	687b      	ldr	r3, [r7, #4]
24063514:	681b      	ldr	r3, [r3, #0]
24063516:	f042 0208 	orr.w	r2, r2, #8
2406351a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
2406351c:	687b      	ldr	r3, [r7, #4]
2406351e:	681b      	ldr	r3, [r3, #0]
24063520:	699a      	ldr	r2, [r3, #24]
24063522:	687b      	ldr	r3, [r7, #4]
24063524:	681b      	ldr	r3, [r3, #0]
24063526:	f042 0210 	orr.w	r2, r2, #16
2406352a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
2406352c:	687b      	ldr	r3, [r7, #4]
2406352e:	681b      	ldr	r3, [r3, #0]
24063530:	681a      	ldr	r2, [r3, #0]
24063532:	687b      	ldr	r3, [r7, #4]
24063534:	681b      	ldr	r3, [r3, #0]
24063536:	f022 0201 	bic.w	r2, r2, #1
2406353a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
2406353c:	687b      	ldr	r3, [r7, #4]
2406353e:	681b      	ldr	r3, [r3, #0]
24063540:	6919      	ldr	r1, [r3, #16]
24063542:	687b      	ldr	r3, [r7, #4]
24063544:	681a      	ldr	r2, [r3, #0]
24063546:	4b3c      	ldr	r3, [pc, #240]	@ (24063638 <SPI_CloseTransfer+0x13c>)
24063548:	400b      	ands	r3, r1
2406354a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2406354c:	687b      	ldr	r3, [r7, #4]
2406354e:	681b      	ldr	r3, [r3, #0]
24063550:	689a      	ldr	r2, [r3, #8]
24063552:	687b      	ldr	r3, [r7, #4]
24063554:	681b      	ldr	r3, [r3, #0]
24063556:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
2406355a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
2406355c:	687b      	ldr	r3, [r7, #4]
2406355e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
24063562:	b2db      	uxtb	r3, r3
24063564:	2b04      	cmp	r3, #4
24063566:	d014      	beq.n	24063592 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
24063568:	68fb      	ldr	r3, [r7, #12]
2406356a:	f003 0320 	and.w	r3, r3, #32
2406356e:	2b00      	cmp	r3, #0
24063570:	d00f      	beq.n	24063592 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
24063572:	687b      	ldr	r3, [r7, #4]
24063574:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
24063578:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
2406357c:	687b      	ldr	r3, [r7, #4]
2406357e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
24063582:	687b      	ldr	r3, [r7, #4]
24063584:	681b      	ldr	r3, [r3, #0]
24063586:	699a      	ldr	r2, [r3, #24]
24063588:	687b      	ldr	r3, [r7, #4]
2406358a:	681b      	ldr	r3, [r3, #0]
2406358c:	f042 0220 	orr.w	r2, r2, #32
24063590:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
24063592:	687b      	ldr	r3, [r7, #4]
24063594:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
24063598:	b2db      	uxtb	r3, r3
2406359a:	2b03      	cmp	r3, #3
2406359c:	d014      	beq.n	240635c8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
2406359e:	68fb      	ldr	r3, [r7, #12]
240635a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
240635a4:	2b00      	cmp	r3, #0
240635a6:	d00f      	beq.n	240635c8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
240635a8:	687b      	ldr	r3, [r7, #4]
240635aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
240635ae:	f043 0204 	orr.w	r2, r3, #4
240635b2:	687b      	ldr	r3, [r7, #4]
240635b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
240635b8:	687b      	ldr	r3, [r7, #4]
240635ba:	681b      	ldr	r3, [r3, #0]
240635bc:	699a      	ldr	r2, [r3, #24]
240635be:	687b      	ldr	r3, [r7, #4]
240635c0:	681b      	ldr	r3, [r3, #0]
240635c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
240635c6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
240635c8:	68fb      	ldr	r3, [r7, #12]
240635ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
240635ce:	2b00      	cmp	r3, #0
240635d0:	d00f      	beq.n	240635f2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
240635d2:	687b      	ldr	r3, [r7, #4]
240635d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
240635d8:	f043 0201 	orr.w	r2, r3, #1
240635dc:	687b      	ldr	r3, [r7, #4]
240635de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
240635e2:	687b      	ldr	r3, [r7, #4]
240635e4:	681b      	ldr	r3, [r3, #0]
240635e6:	699a      	ldr	r2, [r3, #24]
240635e8:	687b      	ldr	r3, [r7, #4]
240635ea:	681b      	ldr	r3, [r3, #0]
240635ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
240635f0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
240635f2:	68fb      	ldr	r3, [r7, #12]
240635f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
240635f8:	2b00      	cmp	r3, #0
240635fa:	d00f      	beq.n	2406361c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
240635fc:	687b      	ldr	r3, [r7, #4]
240635fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
24063602:	f043 0208 	orr.w	r2, r3, #8
24063606:	687b      	ldr	r3, [r7, #4]
24063608:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
2406360c:	687b      	ldr	r3, [r7, #4]
2406360e:	681b      	ldr	r3, [r3, #0]
24063610:	699a      	ldr	r2, [r3, #24]
24063612:	687b      	ldr	r3, [r7, #4]
24063614:	681b      	ldr	r3, [r3, #0]
24063616:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
2406361a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
2406361c:	687b      	ldr	r3, [r7, #4]
2406361e:	2200      	movs	r2, #0
24063620:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
24063624:	687b      	ldr	r3, [r7, #4]
24063626:	2200      	movs	r2, #0
24063628:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
2406362c:	bf00      	nop
2406362e:	3714      	adds	r7, #20
24063630:	46bd      	mov	sp, r7
24063632:	f85d 7b04 	ldr.w	r7, [sp], #4
24063636:	4770      	bx	lr
24063638:	fffffc90 	.word	0xfffffc90

2406363c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
2406363c:	b580      	push	{r7, lr}
2406363e:	b084      	sub	sp, #16
24063640:	af00      	add	r7, sp, #0
24063642:	60f8      	str	r0, [r7, #12]
24063644:	60b9      	str	r1, [r7, #8]
24063646:	603b      	str	r3, [r7, #0]
24063648:	4613      	mov	r3, r2
2406364a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
2406364c:	e010      	b.n	24063670 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
2406364e:	f7f3 fa17 	bl	24056a80 <HAL_GetTick>
24063652:	4602      	mov	r2, r0
24063654:	69bb      	ldr	r3, [r7, #24]
24063656:	1ad3      	subs	r3, r2, r3
24063658:	683a      	ldr	r2, [r7, #0]
2406365a:	429a      	cmp	r2, r3
2406365c:	d803      	bhi.n	24063666 <SPI_WaitOnFlagUntilTimeout+0x2a>
2406365e:	683b      	ldr	r3, [r7, #0]
24063660:	f1b3 3fff 	cmp.w	r3, #4294967295
24063664:	d102      	bne.n	2406366c <SPI_WaitOnFlagUntilTimeout+0x30>
24063666:	683b      	ldr	r3, [r7, #0]
24063668:	2b00      	cmp	r3, #0
2406366a:	d101      	bne.n	24063670 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
2406366c:	2303      	movs	r3, #3
2406366e:	e00f      	b.n	24063690 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
24063670:	68fb      	ldr	r3, [r7, #12]
24063672:	681b      	ldr	r3, [r3, #0]
24063674:	695a      	ldr	r2, [r3, #20]
24063676:	68bb      	ldr	r3, [r7, #8]
24063678:	4013      	ands	r3, r2
2406367a:	68ba      	ldr	r2, [r7, #8]
2406367c:	429a      	cmp	r2, r3
2406367e:	bf0c      	ite	eq
24063680:	2301      	moveq	r3, #1
24063682:	2300      	movne	r3, #0
24063684:	b2db      	uxtb	r3, r3
24063686:	461a      	mov	r2, r3
24063688:	79fb      	ldrb	r3, [r7, #7]
2406368a:	429a      	cmp	r2, r3
2406368c:	d0df      	beq.n	2406364e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
2406368e:	2300      	movs	r3, #0
}
24063690:	4618      	mov	r0, r3
24063692:	3710      	adds	r7, #16
24063694:	46bd      	mov	sp, r7
24063696:	bd80      	pop	{r7, pc}

24063698 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
24063698:	b480      	push	{r7}
2406369a:	b085      	sub	sp, #20
2406369c:	af00      	add	r7, sp, #0
2406369e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
240636a0:	687b      	ldr	r3, [r7, #4]
240636a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
240636a4:	095b      	lsrs	r3, r3, #5
240636a6:	3301      	adds	r3, #1
240636a8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
240636aa:	687b      	ldr	r3, [r7, #4]
240636ac:	68db      	ldr	r3, [r3, #12]
240636ae:	3301      	adds	r3, #1
240636b0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
240636b2:	68bb      	ldr	r3, [r7, #8]
240636b4:	3307      	adds	r3, #7
240636b6:	08db      	lsrs	r3, r3, #3
240636b8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
240636ba:	68bb      	ldr	r3, [r7, #8]
240636bc:	68fa      	ldr	r2, [r7, #12]
240636be:	fb02 f303 	mul.w	r3, r2, r3
}
240636c2:	4618      	mov	r0, r3
240636c4:	3714      	adds	r7, #20
240636c6:	46bd      	mov	sp, r7
240636c8:	f85d 7b04 	ldr.w	r7, [sp], #4
240636cc:	4770      	bx	lr

240636ce <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
240636ce:	b580      	push	{r7, lr}
240636d0:	b082      	sub	sp, #8
240636d2:	af00      	add	r7, sp, #0
240636d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
240636d6:	687b      	ldr	r3, [r7, #4]
240636d8:	2b00      	cmp	r3, #0
240636da:	d101      	bne.n	240636e0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
240636dc:	2301      	movs	r3, #1
240636de:	e049      	b.n	24063774 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
240636e0:	687b      	ldr	r3, [r7, #4]
240636e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
240636e6:	b2db      	uxtb	r3, r3
240636e8:	2b00      	cmp	r3, #0
240636ea:	d106      	bne.n	240636fa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
240636ec:	687b      	ldr	r3, [r7, #4]
240636ee:	2200      	movs	r2, #0
240636f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
240636f4:	6878      	ldr	r0, [r7, #4]
240636f6:	f7f2 fe57 	bl	240563a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
240636fa:	687b      	ldr	r3, [r7, #4]
240636fc:	2202      	movs	r2, #2
240636fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
24063702:	687b      	ldr	r3, [r7, #4]
24063704:	681a      	ldr	r2, [r3, #0]
24063706:	687b      	ldr	r3, [r7, #4]
24063708:	3304      	adds	r3, #4
2406370a:	4619      	mov	r1, r3
2406370c:	4610      	mov	r0, r2
2406370e:	f000 fadf 	bl	24063cd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
24063712:	687b      	ldr	r3, [r7, #4]
24063714:	2201      	movs	r2, #1
24063716:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
2406371a:	687b      	ldr	r3, [r7, #4]
2406371c:	2201      	movs	r2, #1
2406371e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
24063722:	687b      	ldr	r3, [r7, #4]
24063724:	2201      	movs	r2, #1
24063726:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
2406372a:	687b      	ldr	r3, [r7, #4]
2406372c:	2201      	movs	r2, #1
2406372e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
24063732:	687b      	ldr	r3, [r7, #4]
24063734:	2201      	movs	r2, #1
24063736:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
2406373a:	687b      	ldr	r3, [r7, #4]
2406373c:	2201      	movs	r2, #1
2406373e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
24063742:	687b      	ldr	r3, [r7, #4]
24063744:	2201      	movs	r2, #1
24063746:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
2406374a:	687b      	ldr	r3, [r7, #4]
2406374c:	2201      	movs	r2, #1
2406374e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
24063752:	687b      	ldr	r3, [r7, #4]
24063754:	2201      	movs	r2, #1
24063756:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
2406375a:	687b      	ldr	r3, [r7, #4]
2406375c:	2201      	movs	r2, #1
2406375e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
24063762:	687b      	ldr	r3, [r7, #4]
24063764:	2201      	movs	r2, #1
24063766:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
2406376a:	687b      	ldr	r3, [r7, #4]
2406376c:	2201      	movs	r2, #1
2406376e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
24063772:	2300      	movs	r3, #0
}
24063774:	4618      	mov	r0, r3
24063776:	3708      	adds	r7, #8
24063778:	46bd      	mov	sp, r7
2406377a:	bd80      	pop	{r7, pc}

2406377c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
2406377c:	b480      	push	{r7}
2406377e:	b085      	sub	sp, #20
24063780:	af00      	add	r7, sp, #0
24063782:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
24063784:	687b      	ldr	r3, [r7, #4]
24063786:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
2406378a:	b2db      	uxtb	r3, r3
2406378c:	2b01      	cmp	r3, #1
2406378e:	d001      	beq.n	24063794 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
24063790:	2301      	movs	r3, #1
24063792:	e054      	b.n	2406383e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
24063794:	687b      	ldr	r3, [r7, #4]
24063796:	2202      	movs	r2, #2
24063798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
2406379c:	687b      	ldr	r3, [r7, #4]
2406379e:	681b      	ldr	r3, [r3, #0]
240637a0:	68da      	ldr	r2, [r3, #12]
240637a2:	687b      	ldr	r3, [r7, #4]
240637a4:	681b      	ldr	r3, [r3, #0]
240637a6:	f042 0201 	orr.w	r2, r2, #1
240637aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
240637ac:	687b      	ldr	r3, [r7, #4]
240637ae:	681b      	ldr	r3, [r3, #0]
240637b0:	4a26      	ldr	r2, [pc, #152]	@ (2406384c <HAL_TIM_Base_Start_IT+0xd0>)
240637b2:	4293      	cmp	r3, r2
240637b4:	d022      	beq.n	240637fc <HAL_TIM_Base_Start_IT+0x80>
240637b6:	687b      	ldr	r3, [r7, #4]
240637b8:	681b      	ldr	r3, [r3, #0]
240637ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
240637be:	d01d      	beq.n	240637fc <HAL_TIM_Base_Start_IT+0x80>
240637c0:	687b      	ldr	r3, [r7, #4]
240637c2:	681b      	ldr	r3, [r3, #0]
240637c4:	4a22      	ldr	r2, [pc, #136]	@ (24063850 <HAL_TIM_Base_Start_IT+0xd4>)
240637c6:	4293      	cmp	r3, r2
240637c8:	d018      	beq.n	240637fc <HAL_TIM_Base_Start_IT+0x80>
240637ca:	687b      	ldr	r3, [r7, #4]
240637cc:	681b      	ldr	r3, [r3, #0]
240637ce:	4a21      	ldr	r2, [pc, #132]	@ (24063854 <HAL_TIM_Base_Start_IT+0xd8>)
240637d0:	4293      	cmp	r3, r2
240637d2:	d013      	beq.n	240637fc <HAL_TIM_Base_Start_IT+0x80>
240637d4:	687b      	ldr	r3, [r7, #4]
240637d6:	681b      	ldr	r3, [r3, #0]
240637d8:	4a1f      	ldr	r2, [pc, #124]	@ (24063858 <HAL_TIM_Base_Start_IT+0xdc>)
240637da:	4293      	cmp	r3, r2
240637dc:	d00e      	beq.n	240637fc <HAL_TIM_Base_Start_IT+0x80>
240637de:	687b      	ldr	r3, [r7, #4]
240637e0:	681b      	ldr	r3, [r3, #0]
240637e2:	4a1e      	ldr	r2, [pc, #120]	@ (2406385c <HAL_TIM_Base_Start_IT+0xe0>)
240637e4:	4293      	cmp	r3, r2
240637e6:	d009      	beq.n	240637fc <HAL_TIM_Base_Start_IT+0x80>
240637e8:	687b      	ldr	r3, [r7, #4]
240637ea:	681b      	ldr	r3, [r3, #0]
240637ec:	4a1c      	ldr	r2, [pc, #112]	@ (24063860 <HAL_TIM_Base_Start_IT+0xe4>)
240637ee:	4293      	cmp	r3, r2
240637f0:	d004      	beq.n	240637fc <HAL_TIM_Base_Start_IT+0x80>
240637f2:	687b      	ldr	r3, [r7, #4]
240637f4:	681b      	ldr	r3, [r3, #0]
240637f6:	4a1b      	ldr	r2, [pc, #108]	@ (24063864 <HAL_TIM_Base_Start_IT+0xe8>)
240637f8:	4293      	cmp	r3, r2
240637fa:	d115      	bne.n	24063828 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
240637fc:	687b      	ldr	r3, [r7, #4]
240637fe:	681b      	ldr	r3, [r3, #0]
24063800:	689a      	ldr	r2, [r3, #8]
24063802:	4b19      	ldr	r3, [pc, #100]	@ (24063868 <HAL_TIM_Base_Start_IT+0xec>)
24063804:	4013      	ands	r3, r2
24063806:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
24063808:	68fb      	ldr	r3, [r7, #12]
2406380a:	2b06      	cmp	r3, #6
2406380c:	d015      	beq.n	2406383a <HAL_TIM_Base_Start_IT+0xbe>
2406380e:	68fb      	ldr	r3, [r7, #12]
24063810:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
24063814:	d011      	beq.n	2406383a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
24063816:	687b      	ldr	r3, [r7, #4]
24063818:	681b      	ldr	r3, [r3, #0]
2406381a:	681a      	ldr	r2, [r3, #0]
2406381c:	687b      	ldr	r3, [r7, #4]
2406381e:	681b      	ldr	r3, [r3, #0]
24063820:	f042 0201 	orr.w	r2, r2, #1
24063824:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
24063826:	e008      	b.n	2406383a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
24063828:	687b      	ldr	r3, [r7, #4]
2406382a:	681b      	ldr	r3, [r3, #0]
2406382c:	681a      	ldr	r2, [r3, #0]
2406382e:	687b      	ldr	r3, [r7, #4]
24063830:	681b      	ldr	r3, [r3, #0]
24063832:	f042 0201 	orr.w	r2, r2, #1
24063836:	601a      	str	r2, [r3, #0]
24063838:	e000      	b.n	2406383c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
2406383a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
2406383c:	2300      	movs	r3, #0
}
2406383e:	4618      	mov	r0, r3
24063840:	3714      	adds	r7, #20
24063842:	46bd      	mov	sp, r7
24063844:	f85d 7b04 	ldr.w	r7, [sp], #4
24063848:	4770      	bx	lr
2406384a:	bf00      	nop
2406384c:	40010000 	.word	0x40010000
24063850:	40000400 	.word	0x40000400
24063854:	40000800 	.word	0x40000800
24063858:	40000c00 	.word	0x40000c00
2406385c:	40010400 	.word	0x40010400
24063860:	40001800 	.word	0x40001800
24063864:	40014000 	.word	0x40014000
24063868:	00010007 	.word	0x00010007

2406386c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
2406386c:	b580      	push	{r7, lr}
2406386e:	b084      	sub	sp, #16
24063870:	af00      	add	r7, sp, #0
24063872:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
24063874:	687b      	ldr	r3, [r7, #4]
24063876:	681b      	ldr	r3, [r3, #0]
24063878:	68db      	ldr	r3, [r3, #12]
2406387a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
2406387c:	687b      	ldr	r3, [r7, #4]
2406387e:	681b      	ldr	r3, [r3, #0]
24063880:	691b      	ldr	r3, [r3, #16]
24063882:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
24063884:	68bb      	ldr	r3, [r7, #8]
24063886:	f003 0302 	and.w	r3, r3, #2
2406388a:	2b00      	cmp	r3, #0
2406388c:	d020      	beq.n	240638d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
2406388e:	68fb      	ldr	r3, [r7, #12]
24063890:	f003 0302 	and.w	r3, r3, #2
24063894:	2b00      	cmp	r3, #0
24063896:	d01b      	beq.n	240638d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
24063898:	687b      	ldr	r3, [r7, #4]
2406389a:	681b      	ldr	r3, [r3, #0]
2406389c:	f06f 0202 	mvn.w	r2, #2
240638a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
240638a2:	687b      	ldr	r3, [r7, #4]
240638a4:	2201      	movs	r2, #1
240638a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
240638a8:	687b      	ldr	r3, [r7, #4]
240638aa:	681b      	ldr	r3, [r3, #0]
240638ac:	699b      	ldr	r3, [r3, #24]
240638ae:	f003 0303 	and.w	r3, r3, #3
240638b2:	2b00      	cmp	r3, #0
240638b4:	d003      	beq.n	240638be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
240638b6:	6878      	ldr	r0, [r7, #4]
240638b8:	f000 f9ec 	bl	24063c94 <HAL_TIM_IC_CaptureCallback>
240638bc:	e005      	b.n	240638ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
240638be:	6878      	ldr	r0, [r7, #4]
240638c0:	f000 f9de 	bl	24063c80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
240638c4:	6878      	ldr	r0, [r7, #4]
240638c6:	f000 f9ef 	bl	24063ca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
240638ca:	687b      	ldr	r3, [r7, #4]
240638cc:	2200      	movs	r2, #0
240638ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
240638d0:	68bb      	ldr	r3, [r7, #8]
240638d2:	f003 0304 	and.w	r3, r3, #4
240638d6:	2b00      	cmp	r3, #0
240638d8:	d020      	beq.n	2406391c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
240638da:	68fb      	ldr	r3, [r7, #12]
240638dc:	f003 0304 	and.w	r3, r3, #4
240638e0:	2b00      	cmp	r3, #0
240638e2:	d01b      	beq.n	2406391c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
240638e4:	687b      	ldr	r3, [r7, #4]
240638e6:	681b      	ldr	r3, [r3, #0]
240638e8:	f06f 0204 	mvn.w	r2, #4
240638ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
240638ee:	687b      	ldr	r3, [r7, #4]
240638f0:	2202      	movs	r2, #2
240638f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
240638f4:	687b      	ldr	r3, [r7, #4]
240638f6:	681b      	ldr	r3, [r3, #0]
240638f8:	699b      	ldr	r3, [r3, #24]
240638fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
240638fe:	2b00      	cmp	r3, #0
24063900:	d003      	beq.n	2406390a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
24063902:	6878      	ldr	r0, [r7, #4]
24063904:	f000 f9c6 	bl	24063c94 <HAL_TIM_IC_CaptureCallback>
24063908:	e005      	b.n	24063916 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
2406390a:	6878      	ldr	r0, [r7, #4]
2406390c:	f000 f9b8 	bl	24063c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
24063910:	6878      	ldr	r0, [r7, #4]
24063912:	f000 f9c9 	bl	24063ca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
24063916:	687b      	ldr	r3, [r7, #4]
24063918:	2200      	movs	r2, #0
2406391a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
2406391c:	68bb      	ldr	r3, [r7, #8]
2406391e:	f003 0308 	and.w	r3, r3, #8
24063922:	2b00      	cmp	r3, #0
24063924:	d020      	beq.n	24063968 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
24063926:	68fb      	ldr	r3, [r7, #12]
24063928:	f003 0308 	and.w	r3, r3, #8
2406392c:	2b00      	cmp	r3, #0
2406392e:	d01b      	beq.n	24063968 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
24063930:	687b      	ldr	r3, [r7, #4]
24063932:	681b      	ldr	r3, [r3, #0]
24063934:	f06f 0208 	mvn.w	r2, #8
24063938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
2406393a:	687b      	ldr	r3, [r7, #4]
2406393c:	2204      	movs	r2, #4
2406393e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
24063940:	687b      	ldr	r3, [r7, #4]
24063942:	681b      	ldr	r3, [r3, #0]
24063944:	69db      	ldr	r3, [r3, #28]
24063946:	f003 0303 	and.w	r3, r3, #3
2406394a:	2b00      	cmp	r3, #0
2406394c:	d003      	beq.n	24063956 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
2406394e:	6878      	ldr	r0, [r7, #4]
24063950:	f000 f9a0 	bl	24063c94 <HAL_TIM_IC_CaptureCallback>
24063954:	e005      	b.n	24063962 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
24063956:	6878      	ldr	r0, [r7, #4]
24063958:	f000 f992 	bl	24063c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
2406395c:	6878      	ldr	r0, [r7, #4]
2406395e:	f000 f9a3 	bl	24063ca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
24063962:	687b      	ldr	r3, [r7, #4]
24063964:	2200      	movs	r2, #0
24063966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
24063968:	68bb      	ldr	r3, [r7, #8]
2406396a:	f003 0310 	and.w	r3, r3, #16
2406396e:	2b00      	cmp	r3, #0
24063970:	d020      	beq.n	240639b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
24063972:	68fb      	ldr	r3, [r7, #12]
24063974:	f003 0310 	and.w	r3, r3, #16
24063978:	2b00      	cmp	r3, #0
2406397a:	d01b      	beq.n	240639b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
2406397c:	687b      	ldr	r3, [r7, #4]
2406397e:	681b      	ldr	r3, [r3, #0]
24063980:	f06f 0210 	mvn.w	r2, #16
24063984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
24063986:	687b      	ldr	r3, [r7, #4]
24063988:	2208      	movs	r2, #8
2406398a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
2406398c:	687b      	ldr	r3, [r7, #4]
2406398e:	681b      	ldr	r3, [r3, #0]
24063990:	69db      	ldr	r3, [r3, #28]
24063992:	f403 7340 	and.w	r3, r3, #768	@ 0x300
24063996:	2b00      	cmp	r3, #0
24063998:	d003      	beq.n	240639a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
2406399a:	6878      	ldr	r0, [r7, #4]
2406399c:	f000 f97a 	bl	24063c94 <HAL_TIM_IC_CaptureCallback>
240639a0:	e005      	b.n	240639ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
240639a2:	6878      	ldr	r0, [r7, #4]
240639a4:	f000 f96c 	bl	24063c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
240639a8:	6878      	ldr	r0, [r7, #4]
240639aa:	f000 f97d 	bl	24063ca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
240639ae:	687b      	ldr	r3, [r7, #4]
240639b0:	2200      	movs	r2, #0
240639b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
240639b4:	68bb      	ldr	r3, [r7, #8]
240639b6:	f003 0301 	and.w	r3, r3, #1
240639ba:	2b00      	cmp	r3, #0
240639bc:	d00c      	beq.n	240639d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
240639be:	68fb      	ldr	r3, [r7, #12]
240639c0:	f003 0301 	and.w	r3, r3, #1
240639c4:	2b00      	cmp	r3, #0
240639c6:	d007      	beq.n	240639d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
240639c8:	687b      	ldr	r3, [r7, #4]
240639ca:	681b      	ldr	r3, [r3, #0]
240639cc:	f06f 0201 	mvn.w	r2, #1
240639d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
240639d2:	6878      	ldr	r0, [r7, #4]
240639d4:	f000 f94a 	bl	24063c6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
240639d8:	68bb      	ldr	r3, [r7, #8]
240639da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
240639de:	2b00      	cmp	r3, #0
240639e0:	d104      	bne.n	240639ec <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
240639e2:	68bb      	ldr	r3, [r7, #8]
240639e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
240639e8:	2b00      	cmp	r3, #0
240639ea:	d00c      	beq.n	24063a06 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
240639ec:	68fb      	ldr	r3, [r7, #12]
240639ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
240639f2:	2b00      	cmp	r3, #0
240639f4:	d007      	beq.n	24063a06 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
240639f6:	687b      	ldr	r3, [r7, #4]
240639f8:	681b      	ldr	r3, [r3, #0]
240639fa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
240639fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
24063a00:	6878      	ldr	r0, [r7, #4]
24063a02:	f000 fb41 	bl	24064088 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
24063a06:	68bb      	ldr	r3, [r7, #8]
24063a08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
24063a0c:	2b00      	cmp	r3, #0
24063a0e:	d00c      	beq.n	24063a2a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
24063a10:	68fb      	ldr	r3, [r7, #12]
24063a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
24063a16:	2b00      	cmp	r3, #0
24063a18:	d007      	beq.n	24063a2a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
24063a1a:	687b      	ldr	r3, [r7, #4]
24063a1c:	681b      	ldr	r3, [r3, #0]
24063a1e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
24063a22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
24063a24:	6878      	ldr	r0, [r7, #4]
24063a26:	f000 fb39 	bl	2406409c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
24063a2a:	68bb      	ldr	r3, [r7, #8]
24063a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
24063a30:	2b00      	cmp	r3, #0
24063a32:	d00c      	beq.n	24063a4e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
24063a34:	68fb      	ldr	r3, [r7, #12]
24063a36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
24063a3a:	2b00      	cmp	r3, #0
24063a3c:	d007      	beq.n	24063a4e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
24063a3e:	687b      	ldr	r3, [r7, #4]
24063a40:	681b      	ldr	r3, [r3, #0]
24063a42:	f06f 0240 	mvn.w	r2, #64	@ 0x40
24063a46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
24063a48:	6878      	ldr	r0, [r7, #4]
24063a4a:	f000 f937 	bl	24063cbc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
24063a4e:	68bb      	ldr	r3, [r7, #8]
24063a50:	f003 0320 	and.w	r3, r3, #32
24063a54:	2b00      	cmp	r3, #0
24063a56:	d00c      	beq.n	24063a72 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
24063a58:	68fb      	ldr	r3, [r7, #12]
24063a5a:	f003 0320 	and.w	r3, r3, #32
24063a5e:	2b00      	cmp	r3, #0
24063a60:	d007      	beq.n	24063a72 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
24063a62:	687b      	ldr	r3, [r7, #4]
24063a64:	681b      	ldr	r3, [r3, #0]
24063a66:	f06f 0220 	mvn.w	r2, #32
24063a6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
24063a6c:	6878      	ldr	r0, [r7, #4]
24063a6e:	f000 fb01 	bl	24064074 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
24063a72:	bf00      	nop
24063a74:	3710      	adds	r7, #16
24063a76:	46bd      	mov	sp, r7
24063a78:	bd80      	pop	{r7, pc}
	...

24063a7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
24063a7c:	b580      	push	{r7, lr}
24063a7e:	b084      	sub	sp, #16
24063a80:	af00      	add	r7, sp, #0
24063a82:	6078      	str	r0, [r7, #4]
24063a84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
24063a86:	2300      	movs	r3, #0
24063a88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
24063a8a:	687b      	ldr	r3, [r7, #4]
24063a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
24063a90:	2b01      	cmp	r3, #1
24063a92:	d101      	bne.n	24063a98 <HAL_TIM_ConfigClockSource+0x1c>
24063a94:	2302      	movs	r3, #2
24063a96:	e0dc      	b.n	24063c52 <HAL_TIM_ConfigClockSource+0x1d6>
24063a98:	687b      	ldr	r3, [r7, #4]
24063a9a:	2201      	movs	r2, #1
24063a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
24063aa0:	687b      	ldr	r3, [r7, #4]
24063aa2:	2202      	movs	r2, #2
24063aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
24063aa8:	687b      	ldr	r3, [r7, #4]
24063aaa:	681b      	ldr	r3, [r3, #0]
24063aac:	689b      	ldr	r3, [r3, #8]
24063aae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
24063ab0:	68ba      	ldr	r2, [r7, #8]
24063ab2:	4b6a      	ldr	r3, [pc, #424]	@ (24063c5c <HAL_TIM_ConfigClockSource+0x1e0>)
24063ab4:	4013      	ands	r3, r2
24063ab6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
24063ab8:	68bb      	ldr	r3, [r7, #8]
24063aba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
24063abe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
24063ac0:	687b      	ldr	r3, [r7, #4]
24063ac2:	681b      	ldr	r3, [r3, #0]
24063ac4:	68ba      	ldr	r2, [r7, #8]
24063ac6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
24063ac8:	683b      	ldr	r3, [r7, #0]
24063aca:	681b      	ldr	r3, [r3, #0]
24063acc:	4a64      	ldr	r2, [pc, #400]	@ (24063c60 <HAL_TIM_ConfigClockSource+0x1e4>)
24063ace:	4293      	cmp	r3, r2
24063ad0:	f000 80a9 	beq.w	24063c26 <HAL_TIM_ConfigClockSource+0x1aa>
24063ad4:	4a62      	ldr	r2, [pc, #392]	@ (24063c60 <HAL_TIM_ConfigClockSource+0x1e4>)
24063ad6:	4293      	cmp	r3, r2
24063ad8:	f200 80ae 	bhi.w	24063c38 <HAL_TIM_ConfigClockSource+0x1bc>
24063adc:	4a61      	ldr	r2, [pc, #388]	@ (24063c64 <HAL_TIM_ConfigClockSource+0x1e8>)
24063ade:	4293      	cmp	r3, r2
24063ae0:	f000 80a1 	beq.w	24063c26 <HAL_TIM_ConfigClockSource+0x1aa>
24063ae4:	4a5f      	ldr	r2, [pc, #380]	@ (24063c64 <HAL_TIM_ConfigClockSource+0x1e8>)
24063ae6:	4293      	cmp	r3, r2
24063ae8:	f200 80a6 	bhi.w	24063c38 <HAL_TIM_ConfigClockSource+0x1bc>
24063aec:	4a5e      	ldr	r2, [pc, #376]	@ (24063c68 <HAL_TIM_ConfigClockSource+0x1ec>)
24063aee:	4293      	cmp	r3, r2
24063af0:	f000 8099 	beq.w	24063c26 <HAL_TIM_ConfigClockSource+0x1aa>
24063af4:	4a5c      	ldr	r2, [pc, #368]	@ (24063c68 <HAL_TIM_ConfigClockSource+0x1ec>)
24063af6:	4293      	cmp	r3, r2
24063af8:	f200 809e 	bhi.w	24063c38 <HAL_TIM_ConfigClockSource+0x1bc>
24063afc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
24063b00:	f000 8091 	beq.w	24063c26 <HAL_TIM_ConfigClockSource+0x1aa>
24063b04:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
24063b08:	f200 8096 	bhi.w	24063c38 <HAL_TIM_ConfigClockSource+0x1bc>
24063b0c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
24063b10:	f000 8089 	beq.w	24063c26 <HAL_TIM_ConfigClockSource+0x1aa>
24063b14:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
24063b18:	f200 808e 	bhi.w	24063c38 <HAL_TIM_ConfigClockSource+0x1bc>
24063b1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
24063b20:	d03e      	beq.n	24063ba0 <HAL_TIM_ConfigClockSource+0x124>
24063b22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
24063b26:	f200 8087 	bhi.w	24063c38 <HAL_TIM_ConfigClockSource+0x1bc>
24063b2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
24063b2e:	f000 8086 	beq.w	24063c3e <HAL_TIM_ConfigClockSource+0x1c2>
24063b32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
24063b36:	d87f      	bhi.n	24063c38 <HAL_TIM_ConfigClockSource+0x1bc>
24063b38:	2b70      	cmp	r3, #112	@ 0x70
24063b3a:	d01a      	beq.n	24063b72 <HAL_TIM_ConfigClockSource+0xf6>
24063b3c:	2b70      	cmp	r3, #112	@ 0x70
24063b3e:	d87b      	bhi.n	24063c38 <HAL_TIM_ConfigClockSource+0x1bc>
24063b40:	2b60      	cmp	r3, #96	@ 0x60
24063b42:	d050      	beq.n	24063be6 <HAL_TIM_ConfigClockSource+0x16a>
24063b44:	2b60      	cmp	r3, #96	@ 0x60
24063b46:	d877      	bhi.n	24063c38 <HAL_TIM_ConfigClockSource+0x1bc>
24063b48:	2b50      	cmp	r3, #80	@ 0x50
24063b4a:	d03c      	beq.n	24063bc6 <HAL_TIM_ConfigClockSource+0x14a>
24063b4c:	2b50      	cmp	r3, #80	@ 0x50
24063b4e:	d873      	bhi.n	24063c38 <HAL_TIM_ConfigClockSource+0x1bc>
24063b50:	2b40      	cmp	r3, #64	@ 0x40
24063b52:	d058      	beq.n	24063c06 <HAL_TIM_ConfigClockSource+0x18a>
24063b54:	2b40      	cmp	r3, #64	@ 0x40
24063b56:	d86f      	bhi.n	24063c38 <HAL_TIM_ConfigClockSource+0x1bc>
24063b58:	2b30      	cmp	r3, #48	@ 0x30
24063b5a:	d064      	beq.n	24063c26 <HAL_TIM_ConfigClockSource+0x1aa>
24063b5c:	2b30      	cmp	r3, #48	@ 0x30
24063b5e:	d86b      	bhi.n	24063c38 <HAL_TIM_ConfigClockSource+0x1bc>
24063b60:	2b20      	cmp	r3, #32
24063b62:	d060      	beq.n	24063c26 <HAL_TIM_ConfigClockSource+0x1aa>
24063b64:	2b20      	cmp	r3, #32
24063b66:	d867      	bhi.n	24063c38 <HAL_TIM_ConfigClockSource+0x1bc>
24063b68:	2b00      	cmp	r3, #0
24063b6a:	d05c      	beq.n	24063c26 <HAL_TIM_ConfigClockSource+0x1aa>
24063b6c:	2b10      	cmp	r3, #16
24063b6e:	d05a      	beq.n	24063c26 <HAL_TIM_ConfigClockSource+0x1aa>
24063b70:	e062      	b.n	24063c38 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
24063b72:	687b      	ldr	r3, [r7, #4]
24063b74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
24063b76:	683b      	ldr	r3, [r7, #0]
24063b78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
24063b7a:	683b      	ldr	r3, [r7, #0]
24063b7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
24063b7e:	683b      	ldr	r3, [r7, #0]
24063b80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
24063b82:	f000 f9c9 	bl	24063f18 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
24063b86:	687b      	ldr	r3, [r7, #4]
24063b88:	681b      	ldr	r3, [r3, #0]
24063b8a:	689b      	ldr	r3, [r3, #8]
24063b8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
24063b8e:	68bb      	ldr	r3, [r7, #8]
24063b90:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
24063b94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
24063b96:	687b      	ldr	r3, [r7, #4]
24063b98:	681b      	ldr	r3, [r3, #0]
24063b9a:	68ba      	ldr	r2, [r7, #8]
24063b9c:	609a      	str	r2, [r3, #8]
      break;
24063b9e:	e04f      	b.n	24063c40 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
24063ba0:	687b      	ldr	r3, [r7, #4]
24063ba2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
24063ba4:	683b      	ldr	r3, [r7, #0]
24063ba6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
24063ba8:	683b      	ldr	r3, [r7, #0]
24063baa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
24063bac:	683b      	ldr	r3, [r7, #0]
24063bae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
24063bb0:	f000 f9b2 	bl	24063f18 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
24063bb4:	687b      	ldr	r3, [r7, #4]
24063bb6:	681b      	ldr	r3, [r3, #0]
24063bb8:	689a      	ldr	r2, [r3, #8]
24063bba:	687b      	ldr	r3, [r7, #4]
24063bbc:	681b      	ldr	r3, [r3, #0]
24063bbe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
24063bc2:	609a      	str	r2, [r3, #8]
      break;
24063bc4:	e03c      	b.n	24063c40 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
24063bc6:	687b      	ldr	r3, [r7, #4]
24063bc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
24063bca:	683b      	ldr	r3, [r7, #0]
24063bcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
24063bce:	683b      	ldr	r3, [r7, #0]
24063bd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
24063bd2:	461a      	mov	r2, r3
24063bd4:	f000 f922 	bl	24063e1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
24063bd8:	687b      	ldr	r3, [r7, #4]
24063bda:	681b      	ldr	r3, [r3, #0]
24063bdc:	2150      	movs	r1, #80	@ 0x50
24063bde:	4618      	mov	r0, r3
24063be0:	f000 f97c 	bl	24063edc <TIM_ITRx_SetConfig>
      break;
24063be4:	e02c      	b.n	24063c40 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
24063be6:	687b      	ldr	r3, [r7, #4]
24063be8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
24063bea:	683b      	ldr	r3, [r7, #0]
24063bec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
24063bee:	683b      	ldr	r3, [r7, #0]
24063bf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
24063bf2:	461a      	mov	r2, r3
24063bf4:	f000 f941 	bl	24063e7a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
24063bf8:	687b      	ldr	r3, [r7, #4]
24063bfa:	681b      	ldr	r3, [r3, #0]
24063bfc:	2160      	movs	r1, #96	@ 0x60
24063bfe:	4618      	mov	r0, r3
24063c00:	f000 f96c 	bl	24063edc <TIM_ITRx_SetConfig>
      break;
24063c04:	e01c      	b.n	24063c40 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
24063c06:	687b      	ldr	r3, [r7, #4]
24063c08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
24063c0a:	683b      	ldr	r3, [r7, #0]
24063c0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
24063c0e:	683b      	ldr	r3, [r7, #0]
24063c10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
24063c12:	461a      	mov	r2, r3
24063c14:	f000 f902 	bl	24063e1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
24063c18:	687b      	ldr	r3, [r7, #4]
24063c1a:	681b      	ldr	r3, [r3, #0]
24063c1c:	2140      	movs	r1, #64	@ 0x40
24063c1e:	4618      	mov	r0, r3
24063c20:	f000 f95c 	bl	24063edc <TIM_ITRx_SetConfig>
      break;
24063c24:	e00c      	b.n	24063c40 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
24063c26:	687b      	ldr	r3, [r7, #4]
24063c28:	681a      	ldr	r2, [r3, #0]
24063c2a:	683b      	ldr	r3, [r7, #0]
24063c2c:	681b      	ldr	r3, [r3, #0]
24063c2e:	4619      	mov	r1, r3
24063c30:	4610      	mov	r0, r2
24063c32:	f000 f953 	bl	24063edc <TIM_ITRx_SetConfig>
      break;
24063c36:	e003      	b.n	24063c40 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
24063c38:	2301      	movs	r3, #1
24063c3a:	73fb      	strb	r3, [r7, #15]
      break;
24063c3c:	e000      	b.n	24063c40 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
24063c3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
24063c40:	687b      	ldr	r3, [r7, #4]
24063c42:	2201      	movs	r2, #1
24063c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
24063c48:	687b      	ldr	r3, [r7, #4]
24063c4a:	2200      	movs	r2, #0
24063c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
24063c50:	7bfb      	ldrb	r3, [r7, #15]
}
24063c52:	4618      	mov	r0, r3
24063c54:	3710      	adds	r7, #16
24063c56:	46bd      	mov	sp, r7
24063c58:	bd80      	pop	{r7, pc}
24063c5a:	bf00      	nop
24063c5c:	ffceff88 	.word	0xffceff88
24063c60:	00100040 	.word	0x00100040
24063c64:	00100030 	.word	0x00100030
24063c68:	00100020 	.word	0x00100020

24063c6c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
24063c6c:	b480      	push	{r7}
24063c6e:	b083      	sub	sp, #12
24063c70:	af00      	add	r7, sp, #0
24063c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
24063c74:	bf00      	nop
24063c76:	370c      	adds	r7, #12
24063c78:	46bd      	mov	sp, r7
24063c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
24063c7e:	4770      	bx	lr

24063c80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
24063c80:	b480      	push	{r7}
24063c82:	b083      	sub	sp, #12
24063c84:	af00      	add	r7, sp, #0
24063c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
24063c88:	bf00      	nop
24063c8a:	370c      	adds	r7, #12
24063c8c:	46bd      	mov	sp, r7
24063c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
24063c92:	4770      	bx	lr

24063c94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
24063c94:	b480      	push	{r7}
24063c96:	b083      	sub	sp, #12
24063c98:	af00      	add	r7, sp, #0
24063c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
24063c9c:	bf00      	nop
24063c9e:	370c      	adds	r7, #12
24063ca0:	46bd      	mov	sp, r7
24063ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
24063ca6:	4770      	bx	lr

24063ca8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
24063ca8:	b480      	push	{r7}
24063caa:	b083      	sub	sp, #12
24063cac:	af00      	add	r7, sp, #0
24063cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
24063cb0:	bf00      	nop
24063cb2:	370c      	adds	r7, #12
24063cb4:	46bd      	mov	sp, r7
24063cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
24063cba:	4770      	bx	lr

24063cbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
24063cbc:	b480      	push	{r7}
24063cbe:	b083      	sub	sp, #12
24063cc0:	af00      	add	r7, sp, #0
24063cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
24063cc4:	bf00      	nop
24063cc6:	370c      	adds	r7, #12
24063cc8:	46bd      	mov	sp, r7
24063cca:	f85d 7b04 	ldr.w	r7, [sp], #4
24063cce:	4770      	bx	lr

24063cd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
24063cd0:	b480      	push	{r7}
24063cd2:	b085      	sub	sp, #20
24063cd4:	af00      	add	r7, sp, #0
24063cd6:	6078      	str	r0, [r7, #4]
24063cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
24063cda:	687b      	ldr	r3, [r7, #4]
24063cdc:	681b      	ldr	r3, [r3, #0]
24063cde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
24063ce0:	687b      	ldr	r3, [r7, #4]
24063ce2:	4a46      	ldr	r2, [pc, #280]	@ (24063dfc <TIM_Base_SetConfig+0x12c>)
24063ce4:	4293      	cmp	r3, r2
24063ce6:	d013      	beq.n	24063d10 <TIM_Base_SetConfig+0x40>
24063ce8:	687b      	ldr	r3, [r7, #4]
24063cea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
24063cee:	d00f      	beq.n	24063d10 <TIM_Base_SetConfig+0x40>
24063cf0:	687b      	ldr	r3, [r7, #4]
24063cf2:	4a43      	ldr	r2, [pc, #268]	@ (24063e00 <TIM_Base_SetConfig+0x130>)
24063cf4:	4293      	cmp	r3, r2
24063cf6:	d00b      	beq.n	24063d10 <TIM_Base_SetConfig+0x40>
24063cf8:	687b      	ldr	r3, [r7, #4]
24063cfa:	4a42      	ldr	r2, [pc, #264]	@ (24063e04 <TIM_Base_SetConfig+0x134>)
24063cfc:	4293      	cmp	r3, r2
24063cfe:	d007      	beq.n	24063d10 <TIM_Base_SetConfig+0x40>
24063d00:	687b      	ldr	r3, [r7, #4]
24063d02:	4a41      	ldr	r2, [pc, #260]	@ (24063e08 <TIM_Base_SetConfig+0x138>)
24063d04:	4293      	cmp	r3, r2
24063d06:	d003      	beq.n	24063d10 <TIM_Base_SetConfig+0x40>
24063d08:	687b      	ldr	r3, [r7, #4]
24063d0a:	4a40      	ldr	r2, [pc, #256]	@ (24063e0c <TIM_Base_SetConfig+0x13c>)
24063d0c:	4293      	cmp	r3, r2
24063d0e:	d108      	bne.n	24063d22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
24063d10:	68fb      	ldr	r3, [r7, #12]
24063d12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
24063d16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
24063d18:	683b      	ldr	r3, [r7, #0]
24063d1a:	685b      	ldr	r3, [r3, #4]
24063d1c:	68fa      	ldr	r2, [r7, #12]
24063d1e:	4313      	orrs	r3, r2
24063d20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
24063d22:	687b      	ldr	r3, [r7, #4]
24063d24:	4a35      	ldr	r2, [pc, #212]	@ (24063dfc <TIM_Base_SetConfig+0x12c>)
24063d26:	4293      	cmp	r3, r2
24063d28:	d01f      	beq.n	24063d6a <TIM_Base_SetConfig+0x9a>
24063d2a:	687b      	ldr	r3, [r7, #4]
24063d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
24063d30:	d01b      	beq.n	24063d6a <TIM_Base_SetConfig+0x9a>
24063d32:	687b      	ldr	r3, [r7, #4]
24063d34:	4a32      	ldr	r2, [pc, #200]	@ (24063e00 <TIM_Base_SetConfig+0x130>)
24063d36:	4293      	cmp	r3, r2
24063d38:	d017      	beq.n	24063d6a <TIM_Base_SetConfig+0x9a>
24063d3a:	687b      	ldr	r3, [r7, #4]
24063d3c:	4a31      	ldr	r2, [pc, #196]	@ (24063e04 <TIM_Base_SetConfig+0x134>)
24063d3e:	4293      	cmp	r3, r2
24063d40:	d013      	beq.n	24063d6a <TIM_Base_SetConfig+0x9a>
24063d42:	687b      	ldr	r3, [r7, #4]
24063d44:	4a30      	ldr	r2, [pc, #192]	@ (24063e08 <TIM_Base_SetConfig+0x138>)
24063d46:	4293      	cmp	r3, r2
24063d48:	d00f      	beq.n	24063d6a <TIM_Base_SetConfig+0x9a>
24063d4a:	687b      	ldr	r3, [r7, #4]
24063d4c:	4a2f      	ldr	r2, [pc, #188]	@ (24063e0c <TIM_Base_SetConfig+0x13c>)
24063d4e:	4293      	cmp	r3, r2
24063d50:	d00b      	beq.n	24063d6a <TIM_Base_SetConfig+0x9a>
24063d52:	687b      	ldr	r3, [r7, #4]
24063d54:	4a2e      	ldr	r2, [pc, #184]	@ (24063e10 <TIM_Base_SetConfig+0x140>)
24063d56:	4293      	cmp	r3, r2
24063d58:	d007      	beq.n	24063d6a <TIM_Base_SetConfig+0x9a>
24063d5a:	687b      	ldr	r3, [r7, #4]
24063d5c:	4a2d      	ldr	r2, [pc, #180]	@ (24063e14 <TIM_Base_SetConfig+0x144>)
24063d5e:	4293      	cmp	r3, r2
24063d60:	d003      	beq.n	24063d6a <TIM_Base_SetConfig+0x9a>
24063d62:	687b      	ldr	r3, [r7, #4]
24063d64:	4a2c      	ldr	r2, [pc, #176]	@ (24063e18 <TIM_Base_SetConfig+0x148>)
24063d66:	4293      	cmp	r3, r2
24063d68:	d108      	bne.n	24063d7c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
24063d6a:	68fb      	ldr	r3, [r7, #12]
24063d6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
24063d70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
24063d72:	683b      	ldr	r3, [r7, #0]
24063d74:	68db      	ldr	r3, [r3, #12]
24063d76:	68fa      	ldr	r2, [r7, #12]
24063d78:	4313      	orrs	r3, r2
24063d7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
24063d7c:	68fb      	ldr	r3, [r7, #12]
24063d7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
24063d82:	683b      	ldr	r3, [r7, #0]
24063d84:	695b      	ldr	r3, [r3, #20]
24063d86:	4313      	orrs	r3, r2
24063d88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
24063d8a:	687b      	ldr	r3, [r7, #4]
24063d8c:	68fa      	ldr	r2, [r7, #12]
24063d8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
24063d90:	683b      	ldr	r3, [r7, #0]
24063d92:	689a      	ldr	r2, [r3, #8]
24063d94:	687b      	ldr	r3, [r7, #4]
24063d96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
24063d98:	683b      	ldr	r3, [r7, #0]
24063d9a:	681a      	ldr	r2, [r3, #0]
24063d9c:	687b      	ldr	r3, [r7, #4]
24063d9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
24063da0:	687b      	ldr	r3, [r7, #4]
24063da2:	4a16      	ldr	r2, [pc, #88]	@ (24063dfc <TIM_Base_SetConfig+0x12c>)
24063da4:	4293      	cmp	r3, r2
24063da6:	d00f      	beq.n	24063dc8 <TIM_Base_SetConfig+0xf8>
24063da8:	687b      	ldr	r3, [r7, #4]
24063daa:	4a18      	ldr	r2, [pc, #96]	@ (24063e0c <TIM_Base_SetConfig+0x13c>)
24063dac:	4293      	cmp	r3, r2
24063dae:	d00b      	beq.n	24063dc8 <TIM_Base_SetConfig+0xf8>
24063db0:	687b      	ldr	r3, [r7, #4]
24063db2:	4a17      	ldr	r2, [pc, #92]	@ (24063e10 <TIM_Base_SetConfig+0x140>)
24063db4:	4293      	cmp	r3, r2
24063db6:	d007      	beq.n	24063dc8 <TIM_Base_SetConfig+0xf8>
24063db8:	687b      	ldr	r3, [r7, #4]
24063dba:	4a16      	ldr	r2, [pc, #88]	@ (24063e14 <TIM_Base_SetConfig+0x144>)
24063dbc:	4293      	cmp	r3, r2
24063dbe:	d003      	beq.n	24063dc8 <TIM_Base_SetConfig+0xf8>
24063dc0:	687b      	ldr	r3, [r7, #4]
24063dc2:	4a15      	ldr	r2, [pc, #84]	@ (24063e18 <TIM_Base_SetConfig+0x148>)
24063dc4:	4293      	cmp	r3, r2
24063dc6:	d103      	bne.n	24063dd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
24063dc8:	683b      	ldr	r3, [r7, #0]
24063dca:	691a      	ldr	r2, [r3, #16]
24063dcc:	687b      	ldr	r3, [r7, #4]
24063dce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
24063dd0:	687b      	ldr	r3, [r7, #4]
24063dd2:	2201      	movs	r2, #1
24063dd4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
24063dd6:	687b      	ldr	r3, [r7, #4]
24063dd8:	691b      	ldr	r3, [r3, #16]
24063dda:	f003 0301 	and.w	r3, r3, #1
24063dde:	2b01      	cmp	r3, #1
24063de0:	d105      	bne.n	24063dee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
24063de2:	687b      	ldr	r3, [r7, #4]
24063de4:	691b      	ldr	r3, [r3, #16]
24063de6:	f023 0201 	bic.w	r2, r3, #1
24063dea:	687b      	ldr	r3, [r7, #4]
24063dec:	611a      	str	r2, [r3, #16]
  }
}
24063dee:	bf00      	nop
24063df0:	3714      	adds	r7, #20
24063df2:	46bd      	mov	sp, r7
24063df4:	f85d 7b04 	ldr.w	r7, [sp], #4
24063df8:	4770      	bx	lr
24063dfa:	bf00      	nop
24063dfc:	40010000 	.word	0x40010000
24063e00:	40000400 	.word	0x40000400
24063e04:	40000800 	.word	0x40000800
24063e08:	40000c00 	.word	0x40000c00
24063e0c:	40010400 	.word	0x40010400
24063e10:	40014000 	.word	0x40014000
24063e14:	40014400 	.word	0x40014400
24063e18:	40014800 	.word	0x40014800

24063e1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
24063e1c:	b480      	push	{r7}
24063e1e:	b087      	sub	sp, #28
24063e20:	af00      	add	r7, sp, #0
24063e22:	60f8      	str	r0, [r7, #12]
24063e24:	60b9      	str	r1, [r7, #8]
24063e26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
24063e28:	68fb      	ldr	r3, [r7, #12]
24063e2a:	6a1b      	ldr	r3, [r3, #32]
24063e2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
24063e2e:	68fb      	ldr	r3, [r7, #12]
24063e30:	6a1b      	ldr	r3, [r3, #32]
24063e32:	f023 0201 	bic.w	r2, r3, #1
24063e36:	68fb      	ldr	r3, [r7, #12]
24063e38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
24063e3a:	68fb      	ldr	r3, [r7, #12]
24063e3c:	699b      	ldr	r3, [r3, #24]
24063e3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
24063e40:	693b      	ldr	r3, [r7, #16]
24063e42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
24063e46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
24063e48:	687b      	ldr	r3, [r7, #4]
24063e4a:	011b      	lsls	r3, r3, #4
24063e4c:	693a      	ldr	r2, [r7, #16]
24063e4e:	4313      	orrs	r3, r2
24063e50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
24063e52:	697b      	ldr	r3, [r7, #20]
24063e54:	f023 030a 	bic.w	r3, r3, #10
24063e58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
24063e5a:	697a      	ldr	r2, [r7, #20]
24063e5c:	68bb      	ldr	r3, [r7, #8]
24063e5e:	4313      	orrs	r3, r2
24063e60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
24063e62:	68fb      	ldr	r3, [r7, #12]
24063e64:	693a      	ldr	r2, [r7, #16]
24063e66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
24063e68:	68fb      	ldr	r3, [r7, #12]
24063e6a:	697a      	ldr	r2, [r7, #20]
24063e6c:	621a      	str	r2, [r3, #32]
}
24063e6e:	bf00      	nop
24063e70:	371c      	adds	r7, #28
24063e72:	46bd      	mov	sp, r7
24063e74:	f85d 7b04 	ldr.w	r7, [sp], #4
24063e78:	4770      	bx	lr

24063e7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
24063e7a:	b480      	push	{r7}
24063e7c:	b087      	sub	sp, #28
24063e7e:	af00      	add	r7, sp, #0
24063e80:	60f8      	str	r0, [r7, #12]
24063e82:	60b9      	str	r1, [r7, #8]
24063e84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
24063e86:	68fb      	ldr	r3, [r7, #12]
24063e88:	6a1b      	ldr	r3, [r3, #32]
24063e8a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
24063e8c:	68fb      	ldr	r3, [r7, #12]
24063e8e:	6a1b      	ldr	r3, [r3, #32]
24063e90:	f023 0210 	bic.w	r2, r3, #16
24063e94:	68fb      	ldr	r3, [r7, #12]
24063e96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
24063e98:	68fb      	ldr	r3, [r7, #12]
24063e9a:	699b      	ldr	r3, [r3, #24]
24063e9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
24063e9e:	693b      	ldr	r3, [r7, #16]
24063ea0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
24063ea4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
24063ea6:	687b      	ldr	r3, [r7, #4]
24063ea8:	031b      	lsls	r3, r3, #12
24063eaa:	693a      	ldr	r2, [r7, #16]
24063eac:	4313      	orrs	r3, r2
24063eae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
24063eb0:	697b      	ldr	r3, [r7, #20]
24063eb2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
24063eb6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
24063eb8:	68bb      	ldr	r3, [r7, #8]
24063eba:	011b      	lsls	r3, r3, #4
24063ebc:	697a      	ldr	r2, [r7, #20]
24063ebe:	4313      	orrs	r3, r2
24063ec0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
24063ec2:	68fb      	ldr	r3, [r7, #12]
24063ec4:	693a      	ldr	r2, [r7, #16]
24063ec6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
24063ec8:	68fb      	ldr	r3, [r7, #12]
24063eca:	697a      	ldr	r2, [r7, #20]
24063ecc:	621a      	str	r2, [r3, #32]
}
24063ece:	bf00      	nop
24063ed0:	371c      	adds	r7, #28
24063ed2:	46bd      	mov	sp, r7
24063ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
24063ed8:	4770      	bx	lr
	...

24063edc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
24063edc:	b480      	push	{r7}
24063ede:	b085      	sub	sp, #20
24063ee0:	af00      	add	r7, sp, #0
24063ee2:	6078      	str	r0, [r7, #4]
24063ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
24063ee6:	687b      	ldr	r3, [r7, #4]
24063ee8:	689b      	ldr	r3, [r3, #8]
24063eea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
24063eec:	68fa      	ldr	r2, [r7, #12]
24063eee:	4b09      	ldr	r3, [pc, #36]	@ (24063f14 <TIM_ITRx_SetConfig+0x38>)
24063ef0:	4013      	ands	r3, r2
24063ef2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
24063ef4:	683a      	ldr	r2, [r7, #0]
24063ef6:	68fb      	ldr	r3, [r7, #12]
24063ef8:	4313      	orrs	r3, r2
24063efa:	f043 0307 	orr.w	r3, r3, #7
24063efe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
24063f00:	687b      	ldr	r3, [r7, #4]
24063f02:	68fa      	ldr	r2, [r7, #12]
24063f04:	609a      	str	r2, [r3, #8]
}
24063f06:	bf00      	nop
24063f08:	3714      	adds	r7, #20
24063f0a:	46bd      	mov	sp, r7
24063f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
24063f10:	4770      	bx	lr
24063f12:	bf00      	nop
24063f14:	ffcfff8f 	.word	0xffcfff8f

24063f18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
24063f18:	b480      	push	{r7}
24063f1a:	b087      	sub	sp, #28
24063f1c:	af00      	add	r7, sp, #0
24063f1e:	60f8      	str	r0, [r7, #12]
24063f20:	60b9      	str	r1, [r7, #8]
24063f22:	607a      	str	r2, [r7, #4]
24063f24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
24063f26:	68fb      	ldr	r3, [r7, #12]
24063f28:	689b      	ldr	r3, [r3, #8]
24063f2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
24063f2c:	697b      	ldr	r3, [r7, #20]
24063f2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
24063f32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
24063f34:	683b      	ldr	r3, [r7, #0]
24063f36:	021a      	lsls	r2, r3, #8
24063f38:	687b      	ldr	r3, [r7, #4]
24063f3a:	431a      	orrs	r2, r3
24063f3c:	68bb      	ldr	r3, [r7, #8]
24063f3e:	4313      	orrs	r3, r2
24063f40:	697a      	ldr	r2, [r7, #20]
24063f42:	4313      	orrs	r3, r2
24063f44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
24063f46:	68fb      	ldr	r3, [r7, #12]
24063f48:	697a      	ldr	r2, [r7, #20]
24063f4a:	609a      	str	r2, [r3, #8]
}
24063f4c:	bf00      	nop
24063f4e:	371c      	adds	r7, #28
24063f50:	46bd      	mov	sp, r7
24063f52:	f85d 7b04 	ldr.w	r7, [sp], #4
24063f56:	4770      	bx	lr

24063f58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
24063f58:	b480      	push	{r7}
24063f5a:	b085      	sub	sp, #20
24063f5c:	af00      	add	r7, sp, #0
24063f5e:	6078      	str	r0, [r7, #4]
24063f60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
24063f62:	687b      	ldr	r3, [r7, #4]
24063f64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
24063f68:	2b01      	cmp	r3, #1
24063f6a:	d101      	bne.n	24063f70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
24063f6c:	2302      	movs	r3, #2
24063f6e:	e06d      	b.n	2406404c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
24063f70:	687b      	ldr	r3, [r7, #4]
24063f72:	2201      	movs	r2, #1
24063f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
24063f78:	687b      	ldr	r3, [r7, #4]
24063f7a:	2202      	movs	r2, #2
24063f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
24063f80:	687b      	ldr	r3, [r7, #4]
24063f82:	681b      	ldr	r3, [r3, #0]
24063f84:	685b      	ldr	r3, [r3, #4]
24063f86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
24063f88:	687b      	ldr	r3, [r7, #4]
24063f8a:	681b      	ldr	r3, [r3, #0]
24063f8c:	689b      	ldr	r3, [r3, #8]
24063f8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
24063f90:	687b      	ldr	r3, [r7, #4]
24063f92:	681b      	ldr	r3, [r3, #0]
24063f94:	4a30      	ldr	r2, [pc, #192]	@ (24064058 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
24063f96:	4293      	cmp	r3, r2
24063f98:	d004      	beq.n	24063fa4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
24063f9a:	687b      	ldr	r3, [r7, #4]
24063f9c:	681b      	ldr	r3, [r3, #0]
24063f9e:	4a2f      	ldr	r2, [pc, #188]	@ (2406405c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
24063fa0:	4293      	cmp	r3, r2
24063fa2:	d108      	bne.n	24063fb6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
24063fa4:	68fb      	ldr	r3, [r7, #12]
24063fa6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
24063faa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
24063fac:	683b      	ldr	r3, [r7, #0]
24063fae:	685b      	ldr	r3, [r3, #4]
24063fb0:	68fa      	ldr	r2, [r7, #12]
24063fb2:	4313      	orrs	r3, r2
24063fb4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
24063fb6:	68fb      	ldr	r3, [r7, #12]
24063fb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
24063fbc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
24063fbe:	683b      	ldr	r3, [r7, #0]
24063fc0:	681b      	ldr	r3, [r3, #0]
24063fc2:	68fa      	ldr	r2, [r7, #12]
24063fc4:	4313      	orrs	r3, r2
24063fc6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
24063fc8:	687b      	ldr	r3, [r7, #4]
24063fca:	681b      	ldr	r3, [r3, #0]
24063fcc:	68fa      	ldr	r2, [r7, #12]
24063fce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
24063fd0:	687b      	ldr	r3, [r7, #4]
24063fd2:	681b      	ldr	r3, [r3, #0]
24063fd4:	4a20      	ldr	r2, [pc, #128]	@ (24064058 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
24063fd6:	4293      	cmp	r3, r2
24063fd8:	d022      	beq.n	24064020 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
24063fda:	687b      	ldr	r3, [r7, #4]
24063fdc:	681b      	ldr	r3, [r3, #0]
24063fde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
24063fe2:	d01d      	beq.n	24064020 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
24063fe4:	687b      	ldr	r3, [r7, #4]
24063fe6:	681b      	ldr	r3, [r3, #0]
24063fe8:	4a1d      	ldr	r2, [pc, #116]	@ (24064060 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
24063fea:	4293      	cmp	r3, r2
24063fec:	d018      	beq.n	24064020 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
24063fee:	687b      	ldr	r3, [r7, #4]
24063ff0:	681b      	ldr	r3, [r3, #0]
24063ff2:	4a1c      	ldr	r2, [pc, #112]	@ (24064064 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
24063ff4:	4293      	cmp	r3, r2
24063ff6:	d013      	beq.n	24064020 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
24063ff8:	687b      	ldr	r3, [r7, #4]
24063ffa:	681b      	ldr	r3, [r3, #0]
24063ffc:	4a1a      	ldr	r2, [pc, #104]	@ (24064068 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
24063ffe:	4293      	cmp	r3, r2
24064000:	d00e      	beq.n	24064020 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
24064002:	687b      	ldr	r3, [r7, #4]
24064004:	681b      	ldr	r3, [r3, #0]
24064006:	4a15      	ldr	r2, [pc, #84]	@ (2406405c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
24064008:	4293      	cmp	r3, r2
2406400a:	d009      	beq.n	24064020 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
2406400c:	687b      	ldr	r3, [r7, #4]
2406400e:	681b      	ldr	r3, [r3, #0]
24064010:	4a16      	ldr	r2, [pc, #88]	@ (2406406c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
24064012:	4293      	cmp	r3, r2
24064014:	d004      	beq.n	24064020 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
24064016:	687b      	ldr	r3, [r7, #4]
24064018:	681b      	ldr	r3, [r3, #0]
2406401a:	4a15      	ldr	r2, [pc, #84]	@ (24064070 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
2406401c:	4293      	cmp	r3, r2
2406401e:	d10c      	bne.n	2406403a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
24064020:	68bb      	ldr	r3, [r7, #8]
24064022:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
24064026:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
24064028:	683b      	ldr	r3, [r7, #0]
2406402a:	689b      	ldr	r3, [r3, #8]
2406402c:	68ba      	ldr	r2, [r7, #8]
2406402e:	4313      	orrs	r3, r2
24064030:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
24064032:	687b      	ldr	r3, [r7, #4]
24064034:	681b      	ldr	r3, [r3, #0]
24064036:	68ba      	ldr	r2, [r7, #8]
24064038:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
2406403a:	687b      	ldr	r3, [r7, #4]
2406403c:	2201      	movs	r2, #1
2406403e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
24064042:	687b      	ldr	r3, [r7, #4]
24064044:	2200      	movs	r2, #0
24064046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
2406404a:	2300      	movs	r3, #0
}
2406404c:	4618      	mov	r0, r3
2406404e:	3714      	adds	r7, #20
24064050:	46bd      	mov	sp, r7
24064052:	f85d 7b04 	ldr.w	r7, [sp], #4
24064056:	4770      	bx	lr
24064058:	40010000 	.word	0x40010000
2406405c:	40010400 	.word	0x40010400
24064060:	40000400 	.word	0x40000400
24064064:	40000800 	.word	0x40000800
24064068:	40000c00 	.word	0x40000c00
2406406c:	40001800 	.word	0x40001800
24064070:	40014000 	.word	0x40014000

24064074 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
24064074:	b480      	push	{r7}
24064076:	b083      	sub	sp, #12
24064078:	af00      	add	r7, sp, #0
2406407a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
2406407c:	bf00      	nop
2406407e:	370c      	adds	r7, #12
24064080:	46bd      	mov	sp, r7
24064082:	f85d 7b04 	ldr.w	r7, [sp], #4
24064086:	4770      	bx	lr

24064088 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
24064088:	b480      	push	{r7}
2406408a:	b083      	sub	sp, #12
2406408c:	af00      	add	r7, sp, #0
2406408e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
24064090:	bf00      	nop
24064092:	370c      	adds	r7, #12
24064094:	46bd      	mov	sp, r7
24064096:	f85d 7b04 	ldr.w	r7, [sp], #4
2406409a:	4770      	bx	lr

2406409c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
2406409c:	b480      	push	{r7}
2406409e:	b083      	sub	sp, #12
240640a0:	af00      	add	r7, sp, #0
240640a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
240640a4:	bf00      	nop
240640a6:	370c      	adds	r7, #12
240640a8:	46bd      	mov	sp, r7
240640aa:	f85d 7b04 	ldr.w	r7, [sp], #4
240640ae:	4770      	bx	lr

240640b0 <__assert_func>:
240640b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
240640b2:	4614      	mov	r4, r2
240640b4:	461a      	mov	r2, r3
240640b6:	4b09      	ldr	r3, [pc, #36]	@ (240640dc <__assert_func+0x2c>)
240640b8:	681b      	ldr	r3, [r3, #0]
240640ba:	4605      	mov	r5, r0
240640bc:	68d8      	ldr	r0, [r3, #12]
240640be:	b954      	cbnz	r4, 240640d6 <__assert_func+0x26>
240640c0:	4b07      	ldr	r3, [pc, #28]	@ (240640e0 <__assert_func+0x30>)
240640c2:	461c      	mov	r4, r3
240640c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
240640c8:	9100      	str	r1, [sp, #0]
240640ca:	462b      	mov	r3, r5
240640cc:	4905      	ldr	r1, [pc, #20]	@ (240640e4 <__assert_func+0x34>)
240640ce:	f000 fa09 	bl	240644e4 <fiprintf>
240640d2:	f000 fc38 	bl	24064946 <abort>
240640d6:	4b04      	ldr	r3, [pc, #16]	@ (240640e8 <__assert_func+0x38>)
240640d8:	e7f4      	b.n	240640c4 <__assert_func+0x14>
240640da:	bf00      	nop
240640dc:	200000fc 	.word	0x200000fc
240640e0:	24069aab 	.word	0x24069aab
240640e4:	24069a7d 	.word	0x24069a7d
240640e8:	24069a70 	.word	0x24069a70

240640ec <malloc>:
240640ec:	4b02      	ldr	r3, [pc, #8]	@ (240640f8 <malloc+0xc>)
240640ee:	4601      	mov	r1, r0
240640f0:	6818      	ldr	r0, [r3, #0]
240640f2:	f000 b82d 	b.w	24064150 <_malloc_r>
240640f6:	bf00      	nop
240640f8:	200000fc 	.word	0x200000fc

240640fc <free>:
240640fc:	4b02      	ldr	r3, [pc, #8]	@ (24064108 <free+0xc>)
240640fe:	4601      	mov	r1, r0
24064100:	6818      	ldr	r0, [r3, #0]
24064102:	f000 bc27 	b.w	24064954 <_free_r>
24064106:	bf00      	nop
24064108:	200000fc 	.word	0x200000fc

2406410c <sbrk_aligned>:
2406410c:	b570      	push	{r4, r5, r6, lr}
2406410e:	4e0f      	ldr	r6, [pc, #60]	@ (2406414c <sbrk_aligned+0x40>)
24064110:	460c      	mov	r4, r1
24064112:	6831      	ldr	r1, [r6, #0]
24064114:	4605      	mov	r5, r0
24064116:	b911      	cbnz	r1, 2406411e <sbrk_aligned+0x12>
24064118:	f000 fbb8 	bl	2406488c <_sbrk_r>
2406411c:	6030      	str	r0, [r6, #0]
2406411e:	4621      	mov	r1, r4
24064120:	4628      	mov	r0, r5
24064122:	f000 fbb3 	bl	2406488c <_sbrk_r>
24064126:	1c43      	adds	r3, r0, #1
24064128:	d103      	bne.n	24064132 <sbrk_aligned+0x26>
2406412a:	f04f 34ff 	mov.w	r4, #4294967295
2406412e:	4620      	mov	r0, r4
24064130:	bd70      	pop	{r4, r5, r6, pc}
24064132:	1cc4      	adds	r4, r0, #3
24064134:	f024 0403 	bic.w	r4, r4, #3
24064138:	42a0      	cmp	r0, r4
2406413a:	d0f8      	beq.n	2406412e <sbrk_aligned+0x22>
2406413c:	1a21      	subs	r1, r4, r0
2406413e:	4628      	mov	r0, r5
24064140:	f000 fba4 	bl	2406488c <_sbrk_r>
24064144:	3001      	adds	r0, #1
24064146:	d1f2      	bne.n	2406412e <sbrk_aligned+0x22>
24064148:	e7ef      	b.n	2406412a <sbrk_aligned+0x1e>
2406414a:	bf00      	nop
2406414c:	20000684 	.word	0x20000684

24064150 <_malloc_r>:
24064150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
24064154:	1ccd      	adds	r5, r1, #3
24064156:	f025 0503 	bic.w	r5, r5, #3
2406415a:	3508      	adds	r5, #8
2406415c:	2d0c      	cmp	r5, #12
2406415e:	bf38      	it	cc
24064160:	250c      	movcc	r5, #12
24064162:	2d00      	cmp	r5, #0
24064164:	4606      	mov	r6, r0
24064166:	db01      	blt.n	2406416c <_malloc_r+0x1c>
24064168:	42a9      	cmp	r1, r5
2406416a:	d904      	bls.n	24064176 <_malloc_r+0x26>
2406416c:	230c      	movs	r3, #12
2406416e:	6033      	str	r3, [r6, #0]
24064170:	2000      	movs	r0, #0
24064172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
24064176:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 2406424c <_malloc_r+0xfc>
2406417a:	f000 f869 	bl	24064250 <__malloc_lock>
2406417e:	f8d8 3000 	ldr.w	r3, [r8]
24064182:	461c      	mov	r4, r3
24064184:	bb44      	cbnz	r4, 240641d8 <_malloc_r+0x88>
24064186:	4629      	mov	r1, r5
24064188:	4630      	mov	r0, r6
2406418a:	f7ff ffbf 	bl	2406410c <sbrk_aligned>
2406418e:	1c43      	adds	r3, r0, #1
24064190:	4604      	mov	r4, r0
24064192:	d158      	bne.n	24064246 <_malloc_r+0xf6>
24064194:	f8d8 4000 	ldr.w	r4, [r8]
24064198:	4627      	mov	r7, r4
2406419a:	2f00      	cmp	r7, #0
2406419c:	d143      	bne.n	24064226 <_malloc_r+0xd6>
2406419e:	2c00      	cmp	r4, #0
240641a0:	d04b      	beq.n	2406423a <_malloc_r+0xea>
240641a2:	6823      	ldr	r3, [r4, #0]
240641a4:	4639      	mov	r1, r7
240641a6:	4630      	mov	r0, r6
240641a8:	eb04 0903 	add.w	r9, r4, r3
240641ac:	f000 fb6e 	bl	2406488c <_sbrk_r>
240641b0:	4581      	cmp	r9, r0
240641b2:	d142      	bne.n	2406423a <_malloc_r+0xea>
240641b4:	6821      	ldr	r1, [r4, #0]
240641b6:	1a6d      	subs	r5, r5, r1
240641b8:	4629      	mov	r1, r5
240641ba:	4630      	mov	r0, r6
240641bc:	f7ff ffa6 	bl	2406410c <sbrk_aligned>
240641c0:	3001      	adds	r0, #1
240641c2:	d03a      	beq.n	2406423a <_malloc_r+0xea>
240641c4:	6823      	ldr	r3, [r4, #0]
240641c6:	442b      	add	r3, r5
240641c8:	6023      	str	r3, [r4, #0]
240641ca:	f8d8 3000 	ldr.w	r3, [r8]
240641ce:	685a      	ldr	r2, [r3, #4]
240641d0:	bb62      	cbnz	r2, 2406422c <_malloc_r+0xdc>
240641d2:	f8c8 7000 	str.w	r7, [r8]
240641d6:	e00f      	b.n	240641f8 <_malloc_r+0xa8>
240641d8:	6822      	ldr	r2, [r4, #0]
240641da:	1b52      	subs	r2, r2, r5
240641dc:	d420      	bmi.n	24064220 <_malloc_r+0xd0>
240641de:	2a0b      	cmp	r2, #11
240641e0:	d917      	bls.n	24064212 <_malloc_r+0xc2>
240641e2:	1961      	adds	r1, r4, r5
240641e4:	42a3      	cmp	r3, r4
240641e6:	6025      	str	r5, [r4, #0]
240641e8:	bf18      	it	ne
240641ea:	6059      	strne	r1, [r3, #4]
240641ec:	6863      	ldr	r3, [r4, #4]
240641ee:	bf08      	it	eq
240641f0:	f8c8 1000 	streq.w	r1, [r8]
240641f4:	5162      	str	r2, [r4, r5]
240641f6:	604b      	str	r3, [r1, #4]
240641f8:	4630      	mov	r0, r6
240641fa:	f000 f82f 	bl	2406425c <__malloc_unlock>
240641fe:	f104 000b 	add.w	r0, r4, #11
24064202:	1d23      	adds	r3, r4, #4
24064204:	f020 0007 	bic.w	r0, r0, #7
24064208:	1ac2      	subs	r2, r0, r3
2406420a:	bf1c      	itt	ne
2406420c:	1a1b      	subne	r3, r3, r0
2406420e:	50a3      	strne	r3, [r4, r2]
24064210:	e7af      	b.n	24064172 <_malloc_r+0x22>
24064212:	6862      	ldr	r2, [r4, #4]
24064214:	42a3      	cmp	r3, r4
24064216:	bf0c      	ite	eq
24064218:	f8c8 2000 	streq.w	r2, [r8]
2406421c:	605a      	strne	r2, [r3, #4]
2406421e:	e7eb      	b.n	240641f8 <_malloc_r+0xa8>
24064220:	4623      	mov	r3, r4
24064222:	6864      	ldr	r4, [r4, #4]
24064224:	e7ae      	b.n	24064184 <_malloc_r+0x34>
24064226:	463c      	mov	r4, r7
24064228:	687f      	ldr	r7, [r7, #4]
2406422a:	e7b6      	b.n	2406419a <_malloc_r+0x4a>
2406422c:	461a      	mov	r2, r3
2406422e:	685b      	ldr	r3, [r3, #4]
24064230:	42a3      	cmp	r3, r4
24064232:	d1fb      	bne.n	2406422c <_malloc_r+0xdc>
24064234:	2300      	movs	r3, #0
24064236:	6053      	str	r3, [r2, #4]
24064238:	e7de      	b.n	240641f8 <_malloc_r+0xa8>
2406423a:	230c      	movs	r3, #12
2406423c:	6033      	str	r3, [r6, #0]
2406423e:	4630      	mov	r0, r6
24064240:	f000 f80c 	bl	2406425c <__malloc_unlock>
24064244:	e794      	b.n	24064170 <_malloc_r+0x20>
24064246:	6005      	str	r5, [r0, #0]
24064248:	e7d6      	b.n	240641f8 <_malloc_r+0xa8>
2406424a:	bf00      	nop
2406424c:	20000688 	.word	0x20000688

24064250 <__malloc_lock>:
24064250:	4801      	ldr	r0, [pc, #4]	@ (24064258 <__malloc_lock+0x8>)
24064252:	f000 bb68 	b.w	24064926 <__retarget_lock_acquire_recursive>
24064256:	bf00      	nop
24064258:	200007cc 	.word	0x200007cc

2406425c <__malloc_unlock>:
2406425c:	4801      	ldr	r0, [pc, #4]	@ (24064264 <__malloc_unlock+0x8>)
2406425e:	f000 bb63 	b.w	24064928 <__retarget_lock_release_recursive>
24064262:	bf00      	nop
24064264:	200007cc 	.word	0x200007cc

24064268 <srand>:
24064268:	b538      	push	{r3, r4, r5, lr}
2406426a:	4b10      	ldr	r3, [pc, #64]	@ (240642ac <srand+0x44>)
2406426c:	681d      	ldr	r5, [r3, #0]
2406426e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
24064270:	4604      	mov	r4, r0
24064272:	b9b3      	cbnz	r3, 240642a2 <srand+0x3a>
24064274:	2018      	movs	r0, #24
24064276:	f7ff ff39 	bl	240640ec <malloc>
2406427a:	4602      	mov	r2, r0
2406427c:	6328      	str	r0, [r5, #48]	@ 0x30
2406427e:	b920      	cbnz	r0, 2406428a <srand+0x22>
24064280:	4b0b      	ldr	r3, [pc, #44]	@ (240642b0 <srand+0x48>)
24064282:	480c      	ldr	r0, [pc, #48]	@ (240642b4 <srand+0x4c>)
24064284:	2146      	movs	r1, #70	@ 0x46
24064286:	f7ff ff13 	bl	240640b0 <__assert_func>
2406428a:	490b      	ldr	r1, [pc, #44]	@ (240642b8 <srand+0x50>)
2406428c:	4b0b      	ldr	r3, [pc, #44]	@ (240642bc <srand+0x54>)
2406428e:	e9c0 1300 	strd	r1, r3, [r0]
24064292:	4b0b      	ldr	r3, [pc, #44]	@ (240642c0 <srand+0x58>)
24064294:	6083      	str	r3, [r0, #8]
24064296:	230b      	movs	r3, #11
24064298:	8183      	strh	r3, [r0, #12]
2406429a:	2100      	movs	r1, #0
2406429c:	2001      	movs	r0, #1
2406429e:	e9c2 0104 	strd	r0, r1, [r2, #16]
240642a2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
240642a4:	2200      	movs	r2, #0
240642a6:	611c      	str	r4, [r3, #16]
240642a8:	615a      	str	r2, [r3, #20]
240642aa:	bd38      	pop	{r3, r4, r5, pc}
240642ac:	200000fc 	.word	0x200000fc
240642b0:	24069aac 	.word	0x24069aac
240642b4:	24069ac3 	.word	0x24069ac3
240642b8:	abcd330e 	.word	0xabcd330e
240642bc:	e66d1234 	.word	0xe66d1234
240642c0:	0005deec 	.word	0x0005deec

240642c4 <rand>:
240642c4:	4b16      	ldr	r3, [pc, #88]	@ (24064320 <rand+0x5c>)
240642c6:	b510      	push	{r4, lr}
240642c8:	681c      	ldr	r4, [r3, #0]
240642ca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
240642cc:	b9b3      	cbnz	r3, 240642fc <rand+0x38>
240642ce:	2018      	movs	r0, #24
240642d0:	f7ff ff0c 	bl	240640ec <malloc>
240642d4:	4602      	mov	r2, r0
240642d6:	6320      	str	r0, [r4, #48]	@ 0x30
240642d8:	b920      	cbnz	r0, 240642e4 <rand+0x20>
240642da:	4b12      	ldr	r3, [pc, #72]	@ (24064324 <rand+0x60>)
240642dc:	4812      	ldr	r0, [pc, #72]	@ (24064328 <rand+0x64>)
240642de:	2152      	movs	r1, #82	@ 0x52
240642e0:	f7ff fee6 	bl	240640b0 <__assert_func>
240642e4:	4911      	ldr	r1, [pc, #68]	@ (2406432c <rand+0x68>)
240642e6:	4b12      	ldr	r3, [pc, #72]	@ (24064330 <rand+0x6c>)
240642e8:	e9c0 1300 	strd	r1, r3, [r0]
240642ec:	4b11      	ldr	r3, [pc, #68]	@ (24064334 <rand+0x70>)
240642ee:	6083      	str	r3, [r0, #8]
240642f0:	230b      	movs	r3, #11
240642f2:	8183      	strh	r3, [r0, #12]
240642f4:	2100      	movs	r1, #0
240642f6:	2001      	movs	r0, #1
240642f8:	e9c2 0104 	strd	r0, r1, [r2, #16]
240642fc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
240642fe:	480e      	ldr	r0, [pc, #56]	@ (24064338 <rand+0x74>)
24064300:	690b      	ldr	r3, [r1, #16]
24064302:	694c      	ldr	r4, [r1, #20]
24064304:	4a0d      	ldr	r2, [pc, #52]	@ (2406433c <rand+0x78>)
24064306:	4358      	muls	r0, r3
24064308:	fb02 0004 	mla	r0, r2, r4, r0
2406430c:	fba3 3202 	umull	r3, r2, r3, r2
24064310:	3301      	adds	r3, #1
24064312:	eb40 0002 	adc.w	r0, r0, r2
24064316:	e9c1 3004 	strd	r3, r0, [r1, #16]
2406431a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
2406431e:	bd10      	pop	{r4, pc}
24064320:	200000fc 	.word	0x200000fc
24064324:	24069aac 	.word	0x24069aac
24064328:	24069ac3 	.word	0x24069ac3
2406432c:	abcd330e 	.word	0xabcd330e
24064330:	e66d1234 	.word	0xe66d1234
24064334:	0005deec 	.word	0x0005deec
24064338:	5851f42d 	.word	0x5851f42d
2406433c:	4c957f2d 	.word	0x4c957f2d

24064340 <_realloc_r>:
24064340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
24064344:	4680      	mov	r8, r0
24064346:	4615      	mov	r5, r2
24064348:	460c      	mov	r4, r1
2406434a:	b921      	cbnz	r1, 24064356 <_realloc_r+0x16>
2406434c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
24064350:	4611      	mov	r1, r2
24064352:	f7ff befd 	b.w	24064150 <_malloc_r>
24064356:	b92a      	cbnz	r2, 24064364 <_realloc_r+0x24>
24064358:	f000 fafc 	bl	24064954 <_free_r>
2406435c:	2400      	movs	r4, #0
2406435e:	4620      	mov	r0, r4
24064360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
24064364:	f000 fb40 	bl	240649e8 <_malloc_usable_size_r>
24064368:	4285      	cmp	r5, r0
2406436a:	4606      	mov	r6, r0
2406436c:	d802      	bhi.n	24064374 <_realloc_r+0x34>
2406436e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
24064372:	d8f4      	bhi.n	2406435e <_realloc_r+0x1e>
24064374:	4629      	mov	r1, r5
24064376:	4640      	mov	r0, r8
24064378:	f7ff feea 	bl	24064150 <_malloc_r>
2406437c:	4607      	mov	r7, r0
2406437e:	2800      	cmp	r0, #0
24064380:	d0ec      	beq.n	2406435c <_realloc_r+0x1c>
24064382:	42b5      	cmp	r5, r6
24064384:	462a      	mov	r2, r5
24064386:	4621      	mov	r1, r4
24064388:	bf28      	it	cs
2406438a:	4632      	movcs	r2, r6
2406438c:	f000 facd 	bl	2406492a <memcpy>
24064390:	4621      	mov	r1, r4
24064392:	4640      	mov	r0, r8
24064394:	f000 fade 	bl	24064954 <_free_r>
24064398:	463c      	mov	r4, r7
2406439a:	e7e0      	b.n	2406435e <_realloc_r+0x1e>

2406439c <std>:
2406439c:	2300      	movs	r3, #0
2406439e:	b510      	push	{r4, lr}
240643a0:	4604      	mov	r4, r0
240643a2:	e9c0 3300 	strd	r3, r3, [r0]
240643a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
240643aa:	6083      	str	r3, [r0, #8]
240643ac:	8181      	strh	r1, [r0, #12]
240643ae:	6643      	str	r3, [r0, #100]	@ 0x64
240643b0:	81c2      	strh	r2, [r0, #14]
240643b2:	6183      	str	r3, [r0, #24]
240643b4:	4619      	mov	r1, r3
240643b6:	2208      	movs	r2, #8
240643b8:	305c      	adds	r0, #92	@ 0x5c
240643ba:	f000 fa2b 	bl	24064814 <memset>
240643be:	4b0d      	ldr	r3, [pc, #52]	@ (240643f4 <std+0x58>)
240643c0:	6263      	str	r3, [r4, #36]	@ 0x24
240643c2:	4b0d      	ldr	r3, [pc, #52]	@ (240643f8 <std+0x5c>)
240643c4:	62a3      	str	r3, [r4, #40]	@ 0x28
240643c6:	4b0d      	ldr	r3, [pc, #52]	@ (240643fc <std+0x60>)
240643c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
240643ca:	4b0d      	ldr	r3, [pc, #52]	@ (24064400 <std+0x64>)
240643cc:	6323      	str	r3, [r4, #48]	@ 0x30
240643ce:	4b0d      	ldr	r3, [pc, #52]	@ (24064404 <std+0x68>)
240643d0:	6224      	str	r4, [r4, #32]
240643d2:	429c      	cmp	r4, r3
240643d4:	d006      	beq.n	240643e4 <std+0x48>
240643d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
240643da:	4294      	cmp	r4, r2
240643dc:	d002      	beq.n	240643e4 <std+0x48>
240643de:	33d0      	adds	r3, #208	@ 0xd0
240643e0:	429c      	cmp	r4, r3
240643e2:	d105      	bne.n	240643f0 <std+0x54>
240643e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
240643e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
240643ec:	f000 ba9a 	b.w	24064924 <__retarget_lock_init_recursive>
240643f0:	bd10      	pop	{r4, pc}
240643f2:	bf00      	nop
240643f4:	24064665 	.word	0x24064665
240643f8:	24064687 	.word	0x24064687
240643fc:	240646bf 	.word	0x240646bf
24064400:	240646e3 	.word	0x240646e3
24064404:	2000068c 	.word	0x2000068c

24064408 <stdio_exit_handler>:
24064408:	4a02      	ldr	r2, [pc, #8]	@ (24064414 <stdio_exit_handler+0xc>)
2406440a:	4903      	ldr	r1, [pc, #12]	@ (24064418 <stdio_exit_handler+0x10>)
2406440c:	4803      	ldr	r0, [pc, #12]	@ (2406441c <stdio_exit_handler+0x14>)
2406440e:	f000 b87b 	b.w	24064508 <_fwalk_sglue>
24064412:	bf00      	nop
24064414:	200000f0 	.word	0x200000f0
24064418:	24065351 	.word	0x24065351
2406441c:	20000100 	.word	0x20000100

24064420 <cleanup_stdio>:
24064420:	6841      	ldr	r1, [r0, #4]
24064422:	4b0c      	ldr	r3, [pc, #48]	@ (24064454 <cleanup_stdio+0x34>)
24064424:	4299      	cmp	r1, r3
24064426:	b510      	push	{r4, lr}
24064428:	4604      	mov	r4, r0
2406442a:	d001      	beq.n	24064430 <cleanup_stdio+0x10>
2406442c:	f000 ff90 	bl	24065350 <_fflush_r>
24064430:	68a1      	ldr	r1, [r4, #8]
24064432:	4b09      	ldr	r3, [pc, #36]	@ (24064458 <cleanup_stdio+0x38>)
24064434:	4299      	cmp	r1, r3
24064436:	d002      	beq.n	2406443e <cleanup_stdio+0x1e>
24064438:	4620      	mov	r0, r4
2406443a:	f000 ff89 	bl	24065350 <_fflush_r>
2406443e:	68e1      	ldr	r1, [r4, #12]
24064440:	4b06      	ldr	r3, [pc, #24]	@ (2406445c <cleanup_stdio+0x3c>)
24064442:	4299      	cmp	r1, r3
24064444:	d004      	beq.n	24064450 <cleanup_stdio+0x30>
24064446:	4620      	mov	r0, r4
24064448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
2406444c:	f000 bf80 	b.w	24065350 <_fflush_r>
24064450:	bd10      	pop	{r4, pc}
24064452:	bf00      	nop
24064454:	2000068c 	.word	0x2000068c
24064458:	200006f4 	.word	0x200006f4
2406445c:	2000075c 	.word	0x2000075c

24064460 <global_stdio_init.part.0>:
24064460:	b510      	push	{r4, lr}
24064462:	4b0b      	ldr	r3, [pc, #44]	@ (24064490 <global_stdio_init.part.0+0x30>)
24064464:	4c0b      	ldr	r4, [pc, #44]	@ (24064494 <global_stdio_init.part.0+0x34>)
24064466:	4a0c      	ldr	r2, [pc, #48]	@ (24064498 <global_stdio_init.part.0+0x38>)
24064468:	601a      	str	r2, [r3, #0]
2406446a:	4620      	mov	r0, r4
2406446c:	2200      	movs	r2, #0
2406446e:	2104      	movs	r1, #4
24064470:	f7ff ff94 	bl	2406439c <std>
24064474:	f104 0068 	add.w	r0, r4, #104	@ 0x68
24064478:	2201      	movs	r2, #1
2406447a:	2109      	movs	r1, #9
2406447c:	f7ff ff8e 	bl	2406439c <std>
24064480:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
24064484:	2202      	movs	r2, #2
24064486:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
2406448a:	2112      	movs	r1, #18
2406448c:	f7ff bf86 	b.w	2406439c <std>
24064490:	200007c4 	.word	0x200007c4
24064494:	2000068c 	.word	0x2000068c
24064498:	24064409 	.word	0x24064409

2406449c <__sfp_lock_acquire>:
2406449c:	4801      	ldr	r0, [pc, #4]	@ (240644a4 <__sfp_lock_acquire+0x8>)
2406449e:	f000 ba42 	b.w	24064926 <__retarget_lock_acquire_recursive>
240644a2:	bf00      	nop
240644a4:	200007cd 	.word	0x200007cd

240644a8 <__sfp_lock_release>:
240644a8:	4801      	ldr	r0, [pc, #4]	@ (240644b0 <__sfp_lock_release+0x8>)
240644aa:	f000 ba3d 	b.w	24064928 <__retarget_lock_release_recursive>
240644ae:	bf00      	nop
240644b0:	200007cd 	.word	0x200007cd

240644b4 <__sinit>:
240644b4:	b510      	push	{r4, lr}
240644b6:	4604      	mov	r4, r0
240644b8:	f7ff fff0 	bl	2406449c <__sfp_lock_acquire>
240644bc:	6a23      	ldr	r3, [r4, #32]
240644be:	b11b      	cbz	r3, 240644c8 <__sinit+0x14>
240644c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
240644c4:	f7ff bff0 	b.w	240644a8 <__sfp_lock_release>
240644c8:	4b04      	ldr	r3, [pc, #16]	@ (240644dc <__sinit+0x28>)
240644ca:	6223      	str	r3, [r4, #32]
240644cc:	4b04      	ldr	r3, [pc, #16]	@ (240644e0 <__sinit+0x2c>)
240644ce:	681b      	ldr	r3, [r3, #0]
240644d0:	2b00      	cmp	r3, #0
240644d2:	d1f5      	bne.n	240644c0 <__sinit+0xc>
240644d4:	f7ff ffc4 	bl	24064460 <global_stdio_init.part.0>
240644d8:	e7f2      	b.n	240644c0 <__sinit+0xc>
240644da:	bf00      	nop
240644dc:	24064421 	.word	0x24064421
240644e0:	200007c4 	.word	0x200007c4

240644e4 <fiprintf>:
240644e4:	b40e      	push	{r1, r2, r3}
240644e6:	b503      	push	{r0, r1, lr}
240644e8:	4601      	mov	r1, r0
240644ea:	ab03      	add	r3, sp, #12
240644ec:	4805      	ldr	r0, [pc, #20]	@ (24064504 <fiprintf+0x20>)
240644ee:	f853 2b04 	ldr.w	r2, [r3], #4
240644f2:	6800      	ldr	r0, [r0, #0]
240644f4:	9301      	str	r3, [sp, #4]
240644f6:	f000 fc01 	bl	24064cfc <_vfiprintf_r>
240644fa:	b002      	add	sp, #8
240644fc:	f85d eb04 	ldr.w	lr, [sp], #4
24064500:	b003      	add	sp, #12
24064502:	4770      	bx	lr
24064504:	200000fc 	.word	0x200000fc

24064508 <_fwalk_sglue>:
24064508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2406450c:	4607      	mov	r7, r0
2406450e:	4688      	mov	r8, r1
24064510:	4614      	mov	r4, r2
24064512:	2600      	movs	r6, #0
24064514:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
24064518:	f1b9 0901 	subs.w	r9, r9, #1
2406451c:	d505      	bpl.n	2406452a <_fwalk_sglue+0x22>
2406451e:	6824      	ldr	r4, [r4, #0]
24064520:	2c00      	cmp	r4, #0
24064522:	d1f7      	bne.n	24064514 <_fwalk_sglue+0xc>
24064524:	4630      	mov	r0, r6
24064526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
2406452a:	89ab      	ldrh	r3, [r5, #12]
2406452c:	2b01      	cmp	r3, #1
2406452e:	d907      	bls.n	24064540 <_fwalk_sglue+0x38>
24064530:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
24064534:	3301      	adds	r3, #1
24064536:	d003      	beq.n	24064540 <_fwalk_sglue+0x38>
24064538:	4629      	mov	r1, r5
2406453a:	4638      	mov	r0, r7
2406453c:	47c0      	blx	r8
2406453e:	4306      	orrs	r6, r0
24064540:	3568      	adds	r5, #104	@ 0x68
24064542:	e7e9      	b.n	24064518 <_fwalk_sglue+0x10>

24064544 <iprintf>:
24064544:	b40f      	push	{r0, r1, r2, r3}
24064546:	b507      	push	{r0, r1, r2, lr}
24064548:	4906      	ldr	r1, [pc, #24]	@ (24064564 <iprintf+0x20>)
2406454a:	ab04      	add	r3, sp, #16
2406454c:	6808      	ldr	r0, [r1, #0]
2406454e:	f853 2b04 	ldr.w	r2, [r3], #4
24064552:	6881      	ldr	r1, [r0, #8]
24064554:	9301      	str	r3, [sp, #4]
24064556:	f000 fbd1 	bl	24064cfc <_vfiprintf_r>
2406455a:	b003      	add	sp, #12
2406455c:	f85d eb04 	ldr.w	lr, [sp], #4
24064560:	b004      	add	sp, #16
24064562:	4770      	bx	lr
24064564:	200000fc 	.word	0x200000fc

24064568 <_puts_r>:
24064568:	6a03      	ldr	r3, [r0, #32]
2406456a:	b570      	push	{r4, r5, r6, lr}
2406456c:	6884      	ldr	r4, [r0, #8]
2406456e:	4605      	mov	r5, r0
24064570:	460e      	mov	r6, r1
24064572:	b90b      	cbnz	r3, 24064578 <_puts_r+0x10>
24064574:	f7ff ff9e 	bl	240644b4 <__sinit>
24064578:	6e63      	ldr	r3, [r4, #100]	@ 0x64
2406457a:	07db      	lsls	r3, r3, #31
2406457c:	d405      	bmi.n	2406458a <_puts_r+0x22>
2406457e:	89a3      	ldrh	r3, [r4, #12]
24064580:	0598      	lsls	r0, r3, #22
24064582:	d402      	bmi.n	2406458a <_puts_r+0x22>
24064584:	6da0      	ldr	r0, [r4, #88]	@ 0x58
24064586:	f000 f9ce 	bl	24064926 <__retarget_lock_acquire_recursive>
2406458a:	89a3      	ldrh	r3, [r4, #12]
2406458c:	0719      	lsls	r1, r3, #28
2406458e:	d502      	bpl.n	24064596 <_puts_r+0x2e>
24064590:	6923      	ldr	r3, [r4, #16]
24064592:	2b00      	cmp	r3, #0
24064594:	d135      	bne.n	24064602 <_puts_r+0x9a>
24064596:	4621      	mov	r1, r4
24064598:	4628      	mov	r0, r5
2406459a:	f000 f8e5 	bl	24064768 <__swsetup_r>
2406459e:	b380      	cbz	r0, 24064602 <_puts_r+0x9a>
240645a0:	f04f 35ff 	mov.w	r5, #4294967295
240645a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
240645a6:	07da      	lsls	r2, r3, #31
240645a8:	d405      	bmi.n	240645b6 <_puts_r+0x4e>
240645aa:	89a3      	ldrh	r3, [r4, #12]
240645ac:	059b      	lsls	r3, r3, #22
240645ae:	d402      	bmi.n	240645b6 <_puts_r+0x4e>
240645b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
240645b2:	f000 f9b9 	bl	24064928 <__retarget_lock_release_recursive>
240645b6:	4628      	mov	r0, r5
240645b8:	bd70      	pop	{r4, r5, r6, pc}
240645ba:	2b00      	cmp	r3, #0
240645bc:	da04      	bge.n	240645c8 <_puts_r+0x60>
240645be:	69a2      	ldr	r2, [r4, #24]
240645c0:	429a      	cmp	r2, r3
240645c2:	dc17      	bgt.n	240645f4 <_puts_r+0x8c>
240645c4:	290a      	cmp	r1, #10
240645c6:	d015      	beq.n	240645f4 <_puts_r+0x8c>
240645c8:	6823      	ldr	r3, [r4, #0]
240645ca:	1c5a      	adds	r2, r3, #1
240645cc:	6022      	str	r2, [r4, #0]
240645ce:	7019      	strb	r1, [r3, #0]
240645d0:	68a3      	ldr	r3, [r4, #8]
240645d2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
240645d6:	3b01      	subs	r3, #1
240645d8:	60a3      	str	r3, [r4, #8]
240645da:	2900      	cmp	r1, #0
240645dc:	d1ed      	bne.n	240645ba <_puts_r+0x52>
240645de:	2b00      	cmp	r3, #0
240645e0:	da11      	bge.n	24064606 <_puts_r+0x9e>
240645e2:	4622      	mov	r2, r4
240645e4:	210a      	movs	r1, #10
240645e6:	4628      	mov	r0, r5
240645e8:	f000 f87f 	bl	240646ea <__swbuf_r>
240645ec:	3001      	adds	r0, #1
240645ee:	d0d7      	beq.n	240645a0 <_puts_r+0x38>
240645f0:	250a      	movs	r5, #10
240645f2:	e7d7      	b.n	240645a4 <_puts_r+0x3c>
240645f4:	4622      	mov	r2, r4
240645f6:	4628      	mov	r0, r5
240645f8:	f000 f877 	bl	240646ea <__swbuf_r>
240645fc:	3001      	adds	r0, #1
240645fe:	d1e7      	bne.n	240645d0 <_puts_r+0x68>
24064600:	e7ce      	b.n	240645a0 <_puts_r+0x38>
24064602:	3e01      	subs	r6, #1
24064604:	e7e4      	b.n	240645d0 <_puts_r+0x68>
24064606:	6823      	ldr	r3, [r4, #0]
24064608:	1c5a      	adds	r2, r3, #1
2406460a:	6022      	str	r2, [r4, #0]
2406460c:	220a      	movs	r2, #10
2406460e:	701a      	strb	r2, [r3, #0]
24064610:	e7ee      	b.n	240645f0 <_puts_r+0x88>
	...

24064614 <puts>:
24064614:	4b02      	ldr	r3, [pc, #8]	@ (24064620 <puts+0xc>)
24064616:	4601      	mov	r1, r0
24064618:	6818      	ldr	r0, [r3, #0]
2406461a:	f7ff bfa5 	b.w	24064568 <_puts_r>
2406461e:	bf00      	nop
24064620:	200000fc 	.word	0x200000fc

24064624 <siprintf>:
24064624:	b40e      	push	{r1, r2, r3}
24064626:	b500      	push	{lr}
24064628:	b09c      	sub	sp, #112	@ 0x70
2406462a:	ab1d      	add	r3, sp, #116	@ 0x74
2406462c:	9002      	str	r0, [sp, #8]
2406462e:	9006      	str	r0, [sp, #24]
24064630:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
24064634:	4809      	ldr	r0, [pc, #36]	@ (2406465c <siprintf+0x38>)
24064636:	9107      	str	r1, [sp, #28]
24064638:	9104      	str	r1, [sp, #16]
2406463a:	4909      	ldr	r1, [pc, #36]	@ (24064660 <siprintf+0x3c>)
2406463c:	f853 2b04 	ldr.w	r2, [r3], #4
24064640:	9105      	str	r1, [sp, #20]
24064642:	6800      	ldr	r0, [r0, #0]
24064644:	9301      	str	r3, [sp, #4]
24064646:	a902      	add	r1, sp, #8
24064648:	f000 fa32 	bl	24064ab0 <_svfiprintf_r>
2406464c:	9b02      	ldr	r3, [sp, #8]
2406464e:	2200      	movs	r2, #0
24064650:	701a      	strb	r2, [r3, #0]
24064652:	b01c      	add	sp, #112	@ 0x70
24064654:	f85d eb04 	ldr.w	lr, [sp], #4
24064658:	b003      	add	sp, #12
2406465a:	4770      	bx	lr
2406465c:	200000fc 	.word	0x200000fc
24064660:	ffff0208 	.word	0xffff0208

24064664 <__sread>:
24064664:	b510      	push	{r4, lr}
24064666:	460c      	mov	r4, r1
24064668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
2406466c:	f000 f8fc 	bl	24064868 <_read_r>
24064670:	2800      	cmp	r0, #0
24064672:	bfab      	itete	ge
24064674:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
24064676:	89a3      	ldrhlt	r3, [r4, #12]
24064678:	181b      	addge	r3, r3, r0
2406467a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
2406467e:	bfac      	ite	ge
24064680:	6563      	strge	r3, [r4, #84]	@ 0x54
24064682:	81a3      	strhlt	r3, [r4, #12]
24064684:	bd10      	pop	{r4, pc}

24064686 <__swrite>:
24064686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2406468a:	461f      	mov	r7, r3
2406468c:	898b      	ldrh	r3, [r1, #12]
2406468e:	05db      	lsls	r3, r3, #23
24064690:	4605      	mov	r5, r0
24064692:	460c      	mov	r4, r1
24064694:	4616      	mov	r6, r2
24064696:	d505      	bpl.n	240646a4 <__swrite+0x1e>
24064698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
2406469c:	2302      	movs	r3, #2
2406469e:	2200      	movs	r2, #0
240646a0:	f000 f8d0 	bl	24064844 <_lseek_r>
240646a4:	89a3      	ldrh	r3, [r4, #12]
240646a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
240646aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
240646ae:	81a3      	strh	r3, [r4, #12]
240646b0:	4632      	mov	r2, r6
240646b2:	463b      	mov	r3, r7
240646b4:	4628      	mov	r0, r5
240646b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
240646ba:	f000 b8f7 	b.w	240648ac <_write_r>

240646be <__sseek>:
240646be:	b510      	push	{r4, lr}
240646c0:	460c      	mov	r4, r1
240646c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
240646c6:	f000 f8bd 	bl	24064844 <_lseek_r>
240646ca:	1c43      	adds	r3, r0, #1
240646cc:	89a3      	ldrh	r3, [r4, #12]
240646ce:	bf15      	itete	ne
240646d0:	6560      	strne	r0, [r4, #84]	@ 0x54
240646d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
240646d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
240646da:	81a3      	strheq	r3, [r4, #12]
240646dc:	bf18      	it	ne
240646de:	81a3      	strhne	r3, [r4, #12]
240646e0:	bd10      	pop	{r4, pc}

240646e2 <__sclose>:
240646e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
240646e6:	f000 b89d 	b.w	24064824 <_close_r>

240646ea <__swbuf_r>:
240646ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
240646ec:	460e      	mov	r6, r1
240646ee:	4614      	mov	r4, r2
240646f0:	4605      	mov	r5, r0
240646f2:	b118      	cbz	r0, 240646fc <__swbuf_r+0x12>
240646f4:	6a03      	ldr	r3, [r0, #32]
240646f6:	b90b      	cbnz	r3, 240646fc <__swbuf_r+0x12>
240646f8:	f7ff fedc 	bl	240644b4 <__sinit>
240646fc:	69a3      	ldr	r3, [r4, #24]
240646fe:	60a3      	str	r3, [r4, #8]
24064700:	89a3      	ldrh	r3, [r4, #12]
24064702:	071a      	lsls	r2, r3, #28
24064704:	d501      	bpl.n	2406470a <__swbuf_r+0x20>
24064706:	6923      	ldr	r3, [r4, #16]
24064708:	b943      	cbnz	r3, 2406471c <__swbuf_r+0x32>
2406470a:	4621      	mov	r1, r4
2406470c:	4628      	mov	r0, r5
2406470e:	f000 f82b 	bl	24064768 <__swsetup_r>
24064712:	b118      	cbz	r0, 2406471c <__swbuf_r+0x32>
24064714:	f04f 37ff 	mov.w	r7, #4294967295
24064718:	4638      	mov	r0, r7
2406471a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2406471c:	6823      	ldr	r3, [r4, #0]
2406471e:	6922      	ldr	r2, [r4, #16]
24064720:	1a98      	subs	r0, r3, r2
24064722:	6963      	ldr	r3, [r4, #20]
24064724:	b2f6      	uxtb	r6, r6
24064726:	4283      	cmp	r3, r0
24064728:	4637      	mov	r7, r6
2406472a:	dc05      	bgt.n	24064738 <__swbuf_r+0x4e>
2406472c:	4621      	mov	r1, r4
2406472e:	4628      	mov	r0, r5
24064730:	f000 fe0e 	bl	24065350 <_fflush_r>
24064734:	2800      	cmp	r0, #0
24064736:	d1ed      	bne.n	24064714 <__swbuf_r+0x2a>
24064738:	68a3      	ldr	r3, [r4, #8]
2406473a:	3b01      	subs	r3, #1
2406473c:	60a3      	str	r3, [r4, #8]
2406473e:	6823      	ldr	r3, [r4, #0]
24064740:	1c5a      	adds	r2, r3, #1
24064742:	6022      	str	r2, [r4, #0]
24064744:	701e      	strb	r6, [r3, #0]
24064746:	6962      	ldr	r2, [r4, #20]
24064748:	1c43      	adds	r3, r0, #1
2406474a:	429a      	cmp	r2, r3
2406474c:	d004      	beq.n	24064758 <__swbuf_r+0x6e>
2406474e:	89a3      	ldrh	r3, [r4, #12]
24064750:	07db      	lsls	r3, r3, #31
24064752:	d5e1      	bpl.n	24064718 <__swbuf_r+0x2e>
24064754:	2e0a      	cmp	r6, #10
24064756:	d1df      	bne.n	24064718 <__swbuf_r+0x2e>
24064758:	4621      	mov	r1, r4
2406475a:	4628      	mov	r0, r5
2406475c:	f000 fdf8 	bl	24065350 <_fflush_r>
24064760:	2800      	cmp	r0, #0
24064762:	d0d9      	beq.n	24064718 <__swbuf_r+0x2e>
24064764:	e7d6      	b.n	24064714 <__swbuf_r+0x2a>
	...

24064768 <__swsetup_r>:
24064768:	b538      	push	{r3, r4, r5, lr}
2406476a:	4b29      	ldr	r3, [pc, #164]	@ (24064810 <__swsetup_r+0xa8>)
2406476c:	4605      	mov	r5, r0
2406476e:	6818      	ldr	r0, [r3, #0]
24064770:	460c      	mov	r4, r1
24064772:	b118      	cbz	r0, 2406477c <__swsetup_r+0x14>
24064774:	6a03      	ldr	r3, [r0, #32]
24064776:	b90b      	cbnz	r3, 2406477c <__swsetup_r+0x14>
24064778:	f7ff fe9c 	bl	240644b4 <__sinit>
2406477c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
24064780:	0719      	lsls	r1, r3, #28
24064782:	d422      	bmi.n	240647ca <__swsetup_r+0x62>
24064784:	06da      	lsls	r2, r3, #27
24064786:	d407      	bmi.n	24064798 <__swsetup_r+0x30>
24064788:	2209      	movs	r2, #9
2406478a:	602a      	str	r2, [r5, #0]
2406478c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
24064790:	81a3      	strh	r3, [r4, #12]
24064792:	f04f 30ff 	mov.w	r0, #4294967295
24064796:	e033      	b.n	24064800 <__swsetup_r+0x98>
24064798:	0758      	lsls	r0, r3, #29
2406479a:	d512      	bpl.n	240647c2 <__swsetup_r+0x5a>
2406479c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
2406479e:	b141      	cbz	r1, 240647b2 <__swsetup_r+0x4a>
240647a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
240647a4:	4299      	cmp	r1, r3
240647a6:	d002      	beq.n	240647ae <__swsetup_r+0x46>
240647a8:	4628      	mov	r0, r5
240647aa:	f000 f8d3 	bl	24064954 <_free_r>
240647ae:	2300      	movs	r3, #0
240647b0:	6363      	str	r3, [r4, #52]	@ 0x34
240647b2:	89a3      	ldrh	r3, [r4, #12]
240647b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
240647b8:	81a3      	strh	r3, [r4, #12]
240647ba:	2300      	movs	r3, #0
240647bc:	6063      	str	r3, [r4, #4]
240647be:	6923      	ldr	r3, [r4, #16]
240647c0:	6023      	str	r3, [r4, #0]
240647c2:	89a3      	ldrh	r3, [r4, #12]
240647c4:	f043 0308 	orr.w	r3, r3, #8
240647c8:	81a3      	strh	r3, [r4, #12]
240647ca:	6923      	ldr	r3, [r4, #16]
240647cc:	b94b      	cbnz	r3, 240647e2 <__swsetup_r+0x7a>
240647ce:	89a3      	ldrh	r3, [r4, #12]
240647d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
240647d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
240647d8:	d003      	beq.n	240647e2 <__swsetup_r+0x7a>
240647da:	4621      	mov	r1, r4
240647dc:	4628      	mov	r0, r5
240647de:	f000 fe05 	bl	240653ec <__smakebuf_r>
240647e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
240647e6:	f013 0201 	ands.w	r2, r3, #1
240647ea:	d00a      	beq.n	24064802 <__swsetup_r+0x9a>
240647ec:	2200      	movs	r2, #0
240647ee:	60a2      	str	r2, [r4, #8]
240647f0:	6962      	ldr	r2, [r4, #20]
240647f2:	4252      	negs	r2, r2
240647f4:	61a2      	str	r2, [r4, #24]
240647f6:	6922      	ldr	r2, [r4, #16]
240647f8:	b942      	cbnz	r2, 2406480c <__swsetup_r+0xa4>
240647fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
240647fe:	d1c5      	bne.n	2406478c <__swsetup_r+0x24>
24064800:	bd38      	pop	{r3, r4, r5, pc}
24064802:	0799      	lsls	r1, r3, #30
24064804:	bf58      	it	pl
24064806:	6962      	ldrpl	r2, [r4, #20]
24064808:	60a2      	str	r2, [r4, #8]
2406480a:	e7f4      	b.n	240647f6 <__swsetup_r+0x8e>
2406480c:	2000      	movs	r0, #0
2406480e:	e7f7      	b.n	24064800 <__swsetup_r+0x98>
24064810:	200000fc 	.word	0x200000fc

24064814 <memset>:
24064814:	4402      	add	r2, r0
24064816:	4603      	mov	r3, r0
24064818:	4293      	cmp	r3, r2
2406481a:	d100      	bne.n	2406481e <memset+0xa>
2406481c:	4770      	bx	lr
2406481e:	f803 1b01 	strb.w	r1, [r3], #1
24064822:	e7f9      	b.n	24064818 <memset+0x4>

24064824 <_close_r>:
24064824:	b538      	push	{r3, r4, r5, lr}
24064826:	4d06      	ldr	r5, [pc, #24]	@ (24064840 <_close_r+0x1c>)
24064828:	2300      	movs	r3, #0
2406482a:	4604      	mov	r4, r0
2406482c:	4608      	mov	r0, r1
2406482e:	602b      	str	r3, [r5, #0]
24064830:	f7f1 ff90 	bl	24056754 <_close>
24064834:	1c43      	adds	r3, r0, #1
24064836:	d102      	bne.n	2406483e <_close_r+0x1a>
24064838:	682b      	ldr	r3, [r5, #0]
2406483a:	b103      	cbz	r3, 2406483e <_close_r+0x1a>
2406483c:	6023      	str	r3, [r4, #0]
2406483e:	bd38      	pop	{r3, r4, r5, pc}
24064840:	200007c8 	.word	0x200007c8

24064844 <_lseek_r>:
24064844:	b538      	push	{r3, r4, r5, lr}
24064846:	4d07      	ldr	r5, [pc, #28]	@ (24064864 <_lseek_r+0x20>)
24064848:	4604      	mov	r4, r0
2406484a:	4608      	mov	r0, r1
2406484c:	4611      	mov	r1, r2
2406484e:	2200      	movs	r2, #0
24064850:	602a      	str	r2, [r5, #0]
24064852:	461a      	mov	r2, r3
24064854:	f7f1 ffa5 	bl	240567a2 <_lseek>
24064858:	1c43      	adds	r3, r0, #1
2406485a:	d102      	bne.n	24064862 <_lseek_r+0x1e>
2406485c:	682b      	ldr	r3, [r5, #0]
2406485e:	b103      	cbz	r3, 24064862 <_lseek_r+0x1e>
24064860:	6023      	str	r3, [r4, #0]
24064862:	bd38      	pop	{r3, r4, r5, pc}
24064864:	200007c8 	.word	0x200007c8

24064868 <_read_r>:
24064868:	b538      	push	{r3, r4, r5, lr}
2406486a:	4d07      	ldr	r5, [pc, #28]	@ (24064888 <_read_r+0x20>)
2406486c:	4604      	mov	r4, r0
2406486e:	4608      	mov	r0, r1
24064870:	4611      	mov	r1, r2
24064872:	2200      	movs	r2, #0
24064874:	602a      	str	r2, [r5, #0]
24064876:	461a      	mov	r2, r3
24064878:	f7f1 ff33 	bl	240566e2 <_read>
2406487c:	1c43      	adds	r3, r0, #1
2406487e:	d102      	bne.n	24064886 <_read_r+0x1e>
24064880:	682b      	ldr	r3, [r5, #0]
24064882:	b103      	cbz	r3, 24064886 <_read_r+0x1e>
24064884:	6023      	str	r3, [r4, #0]
24064886:	bd38      	pop	{r3, r4, r5, pc}
24064888:	200007c8 	.word	0x200007c8

2406488c <_sbrk_r>:
2406488c:	b538      	push	{r3, r4, r5, lr}
2406488e:	4d06      	ldr	r5, [pc, #24]	@ (240648a8 <_sbrk_r+0x1c>)
24064890:	2300      	movs	r3, #0
24064892:	4604      	mov	r4, r0
24064894:	4608      	mov	r0, r1
24064896:	602b      	str	r3, [r5, #0]
24064898:	f7f1 ff90 	bl	240567bc <_sbrk>
2406489c:	1c43      	adds	r3, r0, #1
2406489e:	d102      	bne.n	240648a6 <_sbrk_r+0x1a>
240648a0:	682b      	ldr	r3, [r5, #0]
240648a2:	b103      	cbz	r3, 240648a6 <_sbrk_r+0x1a>
240648a4:	6023      	str	r3, [r4, #0]
240648a6:	bd38      	pop	{r3, r4, r5, pc}
240648a8:	200007c8 	.word	0x200007c8

240648ac <_write_r>:
240648ac:	b538      	push	{r3, r4, r5, lr}
240648ae:	4d07      	ldr	r5, [pc, #28]	@ (240648cc <_write_r+0x20>)
240648b0:	4604      	mov	r4, r0
240648b2:	4608      	mov	r0, r1
240648b4:	4611      	mov	r1, r2
240648b6:	2200      	movs	r2, #0
240648b8:	602a      	str	r2, [r5, #0]
240648ba:	461a      	mov	r2, r3
240648bc:	f7f1 ff2e 	bl	2405671c <_write>
240648c0:	1c43      	adds	r3, r0, #1
240648c2:	d102      	bne.n	240648ca <_write_r+0x1e>
240648c4:	682b      	ldr	r3, [r5, #0]
240648c6:	b103      	cbz	r3, 240648ca <_write_r+0x1e>
240648c8:	6023      	str	r3, [r4, #0]
240648ca:	bd38      	pop	{r3, r4, r5, pc}
240648cc:	200007c8 	.word	0x200007c8

240648d0 <__errno>:
240648d0:	4b01      	ldr	r3, [pc, #4]	@ (240648d8 <__errno+0x8>)
240648d2:	6818      	ldr	r0, [r3, #0]
240648d4:	4770      	bx	lr
240648d6:	bf00      	nop
240648d8:	200000fc 	.word	0x200000fc

240648dc <__libc_init_array>:
240648dc:	b570      	push	{r4, r5, r6, lr}
240648de:	4d0d      	ldr	r5, [pc, #52]	@ (24064914 <__libc_init_array+0x38>)
240648e0:	4c0d      	ldr	r4, [pc, #52]	@ (24064918 <__libc_init_array+0x3c>)
240648e2:	1b64      	subs	r4, r4, r5
240648e4:	10a4      	asrs	r4, r4, #2
240648e6:	2600      	movs	r6, #0
240648e8:	42a6      	cmp	r6, r4
240648ea:	d109      	bne.n	24064900 <__libc_init_array+0x24>
240648ec:	4d0b      	ldr	r5, [pc, #44]	@ (2406491c <__libc_init_array+0x40>)
240648ee:	4c0c      	ldr	r4, [pc, #48]	@ (24064920 <__libc_init_array+0x44>)
240648f0:	f000 fe38 	bl	24065564 <_init>
240648f4:	1b64      	subs	r4, r4, r5
240648f6:	10a4      	asrs	r4, r4, #2
240648f8:	2600      	movs	r6, #0
240648fa:	42a6      	cmp	r6, r4
240648fc:	d105      	bne.n	2406490a <__libc_init_array+0x2e>
240648fe:	bd70      	pop	{r4, r5, r6, pc}
24064900:	f855 3b04 	ldr.w	r3, [r5], #4
24064904:	4798      	blx	r3
24064906:	3601      	adds	r6, #1
24064908:	e7ee      	b.n	240648e8 <__libc_init_array+0xc>
2406490a:	f855 3b04 	ldr.w	r3, [r5], #4
2406490e:	4798      	blx	r3
24064910:	3601      	adds	r6, #1
24064912:	e7f2      	b.n	240648fa <__libc_init_array+0x1e>
24064914:	24069b58 	.word	0x24069b58
24064918:	24069b58 	.word	0x24069b58
2406491c:	24069b58 	.word	0x24069b58
24064920:	24069b5c 	.word	0x24069b5c

24064924 <__retarget_lock_init_recursive>:
24064924:	4770      	bx	lr

24064926 <__retarget_lock_acquire_recursive>:
24064926:	4770      	bx	lr

24064928 <__retarget_lock_release_recursive>:
24064928:	4770      	bx	lr

2406492a <memcpy>:
2406492a:	440a      	add	r2, r1
2406492c:	4291      	cmp	r1, r2
2406492e:	f100 33ff 	add.w	r3, r0, #4294967295
24064932:	d100      	bne.n	24064936 <memcpy+0xc>
24064934:	4770      	bx	lr
24064936:	b510      	push	{r4, lr}
24064938:	f811 4b01 	ldrb.w	r4, [r1], #1
2406493c:	f803 4f01 	strb.w	r4, [r3, #1]!
24064940:	4291      	cmp	r1, r2
24064942:	d1f9      	bne.n	24064938 <memcpy+0xe>
24064944:	bd10      	pop	{r4, pc}

24064946 <abort>:
24064946:	b508      	push	{r3, lr}
24064948:	2006      	movs	r0, #6
2406494a:	f000 fdcd 	bl	240654e8 <raise>
2406494e:	2001      	movs	r0, #1
24064950:	f7f1 febc 	bl	240566cc <_exit>

24064954 <_free_r>:
24064954:	b538      	push	{r3, r4, r5, lr}
24064956:	4605      	mov	r5, r0
24064958:	2900      	cmp	r1, #0
2406495a:	d041      	beq.n	240649e0 <_free_r+0x8c>
2406495c:	f851 3c04 	ldr.w	r3, [r1, #-4]
24064960:	1f0c      	subs	r4, r1, #4
24064962:	2b00      	cmp	r3, #0
24064964:	bfb8      	it	lt
24064966:	18e4      	addlt	r4, r4, r3
24064968:	f7ff fc72 	bl	24064250 <__malloc_lock>
2406496c:	4a1d      	ldr	r2, [pc, #116]	@ (240649e4 <_free_r+0x90>)
2406496e:	6813      	ldr	r3, [r2, #0]
24064970:	b933      	cbnz	r3, 24064980 <_free_r+0x2c>
24064972:	6063      	str	r3, [r4, #4]
24064974:	6014      	str	r4, [r2, #0]
24064976:	4628      	mov	r0, r5
24064978:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
2406497c:	f7ff bc6e 	b.w	2406425c <__malloc_unlock>
24064980:	42a3      	cmp	r3, r4
24064982:	d908      	bls.n	24064996 <_free_r+0x42>
24064984:	6820      	ldr	r0, [r4, #0]
24064986:	1821      	adds	r1, r4, r0
24064988:	428b      	cmp	r3, r1
2406498a:	bf01      	itttt	eq
2406498c:	6819      	ldreq	r1, [r3, #0]
2406498e:	685b      	ldreq	r3, [r3, #4]
24064990:	1809      	addeq	r1, r1, r0
24064992:	6021      	streq	r1, [r4, #0]
24064994:	e7ed      	b.n	24064972 <_free_r+0x1e>
24064996:	461a      	mov	r2, r3
24064998:	685b      	ldr	r3, [r3, #4]
2406499a:	b10b      	cbz	r3, 240649a0 <_free_r+0x4c>
2406499c:	42a3      	cmp	r3, r4
2406499e:	d9fa      	bls.n	24064996 <_free_r+0x42>
240649a0:	6811      	ldr	r1, [r2, #0]
240649a2:	1850      	adds	r0, r2, r1
240649a4:	42a0      	cmp	r0, r4
240649a6:	d10b      	bne.n	240649c0 <_free_r+0x6c>
240649a8:	6820      	ldr	r0, [r4, #0]
240649aa:	4401      	add	r1, r0
240649ac:	1850      	adds	r0, r2, r1
240649ae:	4283      	cmp	r3, r0
240649b0:	6011      	str	r1, [r2, #0]
240649b2:	d1e0      	bne.n	24064976 <_free_r+0x22>
240649b4:	6818      	ldr	r0, [r3, #0]
240649b6:	685b      	ldr	r3, [r3, #4]
240649b8:	6053      	str	r3, [r2, #4]
240649ba:	4408      	add	r0, r1
240649bc:	6010      	str	r0, [r2, #0]
240649be:	e7da      	b.n	24064976 <_free_r+0x22>
240649c0:	d902      	bls.n	240649c8 <_free_r+0x74>
240649c2:	230c      	movs	r3, #12
240649c4:	602b      	str	r3, [r5, #0]
240649c6:	e7d6      	b.n	24064976 <_free_r+0x22>
240649c8:	6820      	ldr	r0, [r4, #0]
240649ca:	1821      	adds	r1, r4, r0
240649cc:	428b      	cmp	r3, r1
240649ce:	bf04      	itt	eq
240649d0:	6819      	ldreq	r1, [r3, #0]
240649d2:	685b      	ldreq	r3, [r3, #4]
240649d4:	6063      	str	r3, [r4, #4]
240649d6:	bf04      	itt	eq
240649d8:	1809      	addeq	r1, r1, r0
240649da:	6021      	streq	r1, [r4, #0]
240649dc:	6054      	str	r4, [r2, #4]
240649de:	e7ca      	b.n	24064976 <_free_r+0x22>
240649e0:	bd38      	pop	{r3, r4, r5, pc}
240649e2:	bf00      	nop
240649e4:	20000688 	.word	0x20000688

240649e8 <_malloc_usable_size_r>:
240649e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
240649ec:	1f18      	subs	r0, r3, #4
240649ee:	2b00      	cmp	r3, #0
240649f0:	bfbc      	itt	lt
240649f2:	580b      	ldrlt	r3, [r1, r0]
240649f4:	18c0      	addlt	r0, r0, r3
240649f6:	4770      	bx	lr

240649f8 <__ssputs_r>:
240649f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
240649fc:	688e      	ldr	r6, [r1, #8]
240649fe:	461f      	mov	r7, r3
24064a00:	42be      	cmp	r6, r7
24064a02:	680b      	ldr	r3, [r1, #0]
24064a04:	4682      	mov	sl, r0
24064a06:	460c      	mov	r4, r1
24064a08:	4690      	mov	r8, r2
24064a0a:	d82d      	bhi.n	24064a68 <__ssputs_r+0x70>
24064a0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
24064a10:	f412 6f90 	tst.w	r2, #1152	@ 0x480
24064a14:	d026      	beq.n	24064a64 <__ssputs_r+0x6c>
24064a16:	6965      	ldr	r5, [r4, #20]
24064a18:	6909      	ldr	r1, [r1, #16]
24064a1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
24064a1e:	eba3 0901 	sub.w	r9, r3, r1
24064a22:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
24064a26:	1c7b      	adds	r3, r7, #1
24064a28:	444b      	add	r3, r9
24064a2a:	106d      	asrs	r5, r5, #1
24064a2c:	429d      	cmp	r5, r3
24064a2e:	bf38      	it	cc
24064a30:	461d      	movcc	r5, r3
24064a32:	0553      	lsls	r3, r2, #21
24064a34:	d527      	bpl.n	24064a86 <__ssputs_r+0x8e>
24064a36:	4629      	mov	r1, r5
24064a38:	f7ff fb8a 	bl	24064150 <_malloc_r>
24064a3c:	4606      	mov	r6, r0
24064a3e:	b360      	cbz	r0, 24064a9a <__ssputs_r+0xa2>
24064a40:	6921      	ldr	r1, [r4, #16]
24064a42:	464a      	mov	r2, r9
24064a44:	f7ff ff71 	bl	2406492a <memcpy>
24064a48:	89a3      	ldrh	r3, [r4, #12]
24064a4a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
24064a4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
24064a52:	81a3      	strh	r3, [r4, #12]
24064a54:	6126      	str	r6, [r4, #16]
24064a56:	6165      	str	r5, [r4, #20]
24064a58:	444e      	add	r6, r9
24064a5a:	eba5 0509 	sub.w	r5, r5, r9
24064a5e:	6026      	str	r6, [r4, #0]
24064a60:	60a5      	str	r5, [r4, #8]
24064a62:	463e      	mov	r6, r7
24064a64:	42be      	cmp	r6, r7
24064a66:	d900      	bls.n	24064a6a <__ssputs_r+0x72>
24064a68:	463e      	mov	r6, r7
24064a6a:	6820      	ldr	r0, [r4, #0]
24064a6c:	4632      	mov	r2, r6
24064a6e:	4641      	mov	r1, r8
24064a70:	f000 fcf8 	bl	24065464 <memmove>
24064a74:	68a3      	ldr	r3, [r4, #8]
24064a76:	1b9b      	subs	r3, r3, r6
24064a78:	60a3      	str	r3, [r4, #8]
24064a7a:	6823      	ldr	r3, [r4, #0]
24064a7c:	4433      	add	r3, r6
24064a7e:	6023      	str	r3, [r4, #0]
24064a80:	2000      	movs	r0, #0
24064a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
24064a86:	462a      	mov	r2, r5
24064a88:	f7ff fc5a 	bl	24064340 <_realloc_r>
24064a8c:	4606      	mov	r6, r0
24064a8e:	2800      	cmp	r0, #0
24064a90:	d1e0      	bne.n	24064a54 <__ssputs_r+0x5c>
24064a92:	6921      	ldr	r1, [r4, #16]
24064a94:	4650      	mov	r0, sl
24064a96:	f7ff ff5d 	bl	24064954 <_free_r>
24064a9a:	230c      	movs	r3, #12
24064a9c:	f8ca 3000 	str.w	r3, [sl]
24064aa0:	89a3      	ldrh	r3, [r4, #12]
24064aa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
24064aa6:	81a3      	strh	r3, [r4, #12]
24064aa8:	f04f 30ff 	mov.w	r0, #4294967295
24064aac:	e7e9      	b.n	24064a82 <__ssputs_r+0x8a>
	...

24064ab0 <_svfiprintf_r>:
24064ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24064ab4:	4698      	mov	r8, r3
24064ab6:	898b      	ldrh	r3, [r1, #12]
24064ab8:	061b      	lsls	r3, r3, #24
24064aba:	b09d      	sub	sp, #116	@ 0x74
24064abc:	4607      	mov	r7, r0
24064abe:	460d      	mov	r5, r1
24064ac0:	4614      	mov	r4, r2
24064ac2:	d510      	bpl.n	24064ae6 <_svfiprintf_r+0x36>
24064ac4:	690b      	ldr	r3, [r1, #16]
24064ac6:	b973      	cbnz	r3, 24064ae6 <_svfiprintf_r+0x36>
24064ac8:	2140      	movs	r1, #64	@ 0x40
24064aca:	f7ff fb41 	bl	24064150 <_malloc_r>
24064ace:	6028      	str	r0, [r5, #0]
24064ad0:	6128      	str	r0, [r5, #16]
24064ad2:	b930      	cbnz	r0, 24064ae2 <_svfiprintf_r+0x32>
24064ad4:	230c      	movs	r3, #12
24064ad6:	603b      	str	r3, [r7, #0]
24064ad8:	f04f 30ff 	mov.w	r0, #4294967295
24064adc:	b01d      	add	sp, #116	@ 0x74
24064ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
24064ae2:	2340      	movs	r3, #64	@ 0x40
24064ae4:	616b      	str	r3, [r5, #20]
24064ae6:	2300      	movs	r3, #0
24064ae8:	9309      	str	r3, [sp, #36]	@ 0x24
24064aea:	2320      	movs	r3, #32
24064aec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
24064af0:	f8cd 800c 	str.w	r8, [sp, #12]
24064af4:	2330      	movs	r3, #48	@ 0x30
24064af6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 24064c94 <_svfiprintf_r+0x1e4>
24064afa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
24064afe:	f04f 0901 	mov.w	r9, #1
24064b02:	4623      	mov	r3, r4
24064b04:	469a      	mov	sl, r3
24064b06:	f813 2b01 	ldrb.w	r2, [r3], #1
24064b0a:	b10a      	cbz	r2, 24064b10 <_svfiprintf_r+0x60>
24064b0c:	2a25      	cmp	r2, #37	@ 0x25
24064b0e:	d1f9      	bne.n	24064b04 <_svfiprintf_r+0x54>
24064b10:	ebba 0b04 	subs.w	fp, sl, r4
24064b14:	d00b      	beq.n	24064b2e <_svfiprintf_r+0x7e>
24064b16:	465b      	mov	r3, fp
24064b18:	4622      	mov	r2, r4
24064b1a:	4629      	mov	r1, r5
24064b1c:	4638      	mov	r0, r7
24064b1e:	f7ff ff6b 	bl	240649f8 <__ssputs_r>
24064b22:	3001      	adds	r0, #1
24064b24:	f000 80a7 	beq.w	24064c76 <_svfiprintf_r+0x1c6>
24064b28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
24064b2a:	445a      	add	r2, fp
24064b2c:	9209      	str	r2, [sp, #36]	@ 0x24
24064b2e:	f89a 3000 	ldrb.w	r3, [sl]
24064b32:	2b00      	cmp	r3, #0
24064b34:	f000 809f 	beq.w	24064c76 <_svfiprintf_r+0x1c6>
24064b38:	2300      	movs	r3, #0
24064b3a:	f04f 32ff 	mov.w	r2, #4294967295
24064b3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
24064b42:	f10a 0a01 	add.w	sl, sl, #1
24064b46:	9304      	str	r3, [sp, #16]
24064b48:	9307      	str	r3, [sp, #28]
24064b4a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
24064b4e:	931a      	str	r3, [sp, #104]	@ 0x68
24064b50:	4654      	mov	r4, sl
24064b52:	2205      	movs	r2, #5
24064b54:	f814 1b01 	ldrb.w	r1, [r4], #1
24064b58:	484e      	ldr	r0, [pc, #312]	@ (24064c94 <_svfiprintf_r+0x1e4>)
24064b5a:	f7eb fa71 	bl	24050040 <memchr>
24064b5e:	9a04      	ldr	r2, [sp, #16]
24064b60:	b9d8      	cbnz	r0, 24064b9a <_svfiprintf_r+0xea>
24064b62:	06d0      	lsls	r0, r2, #27
24064b64:	bf44      	itt	mi
24064b66:	2320      	movmi	r3, #32
24064b68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
24064b6c:	0711      	lsls	r1, r2, #28
24064b6e:	bf44      	itt	mi
24064b70:	232b      	movmi	r3, #43	@ 0x2b
24064b72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
24064b76:	f89a 3000 	ldrb.w	r3, [sl]
24064b7a:	2b2a      	cmp	r3, #42	@ 0x2a
24064b7c:	d015      	beq.n	24064baa <_svfiprintf_r+0xfa>
24064b7e:	9a07      	ldr	r2, [sp, #28]
24064b80:	4654      	mov	r4, sl
24064b82:	2000      	movs	r0, #0
24064b84:	f04f 0c0a 	mov.w	ip, #10
24064b88:	4621      	mov	r1, r4
24064b8a:	f811 3b01 	ldrb.w	r3, [r1], #1
24064b8e:	3b30      	subs	r3, #48	@ 0x30
24064b90:	2b09      	cmp	r3, #9
24064b92:	d94b      	bls.n	24064c2c <_svfiprintf_r+0x17c>
24064b94:	b1b0      	cbz	r0, 24064bc4 <_svfiprintf_r+0x114>
24064b96:	9207      	str	r2, [sp, #28]
24064b98:	e014      	b.n	24064bc4 <_svfiprintf_r+0x114>
24064b9a:	eba0 0308 	sub.w	r3, r0, r8
24064b9e:	fa09 f303 	lsl.w	r3, r9, r3
24064ba2:	4313      	orrs	r3, r2
24064ba4:	9304      	str	r3, [sp, #16]
24064ba6:	46a2      	mov	sl, r4
24064ba8:	e7d2      	b.n	24064b50 <_svfiprintf_r+0xa0>
24064baa:	9b03      	ldr	r3, [sp, #12]
24064bac:	1d19      	adds	r1, r3, #4
24064bae:	681b      	ldr	r3, [r3, #0]
24064bb0:	9103      	str	r1, [sp, #12]
24064bb2:	2b00      	cmp	r3, #0
24064bb4:	bfbb      	ittet	lt
24064bb6:	425b      	neglt	r3, r3
24064bb8:	f042 0202 	orrlt.w	r2, r2, #2
24064bbc:	9307      	strge	r3, [sp, #28]
24064bbe:	9307      	strlt	r3, [sp, #28]
24064bc0:	bfb8      	it	lt
24064bc2:	9204      	strlt	r2, [sp, #16]
24064bc4:	7823      	ldrb	r3, [r4, #0]
24064bc6:	2b2e      	cmp	r3, #46	@ 0x2e
24064bc8:	d10a      	bne.n	24064be0 <_svfiprintf_r+0x130>
24064bca:	7863      	ldrb	r3, [r4, #1]
24064bcc:	2b2a      	cmp	r3, #42	@ 0x2a
24064bce:	d132      	bne.n	24064c36 <_svfiprintf_r+0x186>
24064bd0:	9b03      	ldr	r3, [sp, #12]
24064bd2:	1d1a      	adds	r2, r3, #4
24064bd4:	681b      	ldr	r3, [r3, #0]
24064bd6:	9203      	str	r2, [sp, #12]
24064bd8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
24064bdc:	3402      	adds	r4, #2
24064bde:	9305      	str	r3, [sp, #20]
24064be0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 24064ca4 <_svfiprintf_r+0x1f4>
24064be4:	7821      	ldrb	r1, [r4, #0]
24064be6:	2203      	movs	r2, #3
24064be8:	4650      	mov	r0, sl
24064bea:	f7eb fa29 	bl	24050040 <memchr>
24064bee:	b138      	cbz	r0, 24064c00 <_svfiprintf_r+0x150>
24064bf0:	9b04      	ldr	r3, [sp, #16]
24064bf2:	eba0 000a 	sub.w	r0, r0, sl
24064bf6:	2240      	movs	r2, #64	@ 0x40
24064bf8:	4082      	lsls	r2, r0
24064bfa:	4313      	orrs	r3, r2
24064bfc:	3401      	adds	r4, #1
24064bfe:	9304      	str	r3, [sp, #16]
24064c00:	f814 1b01 	ldrb.w	r1, [r4], #1
24064c04:	4824      	ldr	r0, [pc, #144]	@ (24064c98 <_svfiprintf_r+0x1e8>)
24064c06:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
24064c0a:	2206      	movs	r2, #6
24064c0c:	f7eb fa18 	bl	24050040 <memchr>
24064c10:	2800      	cmp	r0, #0
24064c12:	d036      	beq.n	24064c82 <_svfiprintf_r+0x1d2>
24064c14:	4b21      	ldr	r3, [pc, #132]	@ (24064c9c <_svfiprintf_r+0x1ec>)
24064c16:	bb1b      	cbnz	r3, 24064c60 <_svfiprintf_r+0x1b0>
24064c18:	9b03      	ldr	r3, [sp, #12]
24064c1a:	3307      	adds	r3, #7
24064c1c:	f023 0307 	bic.w	r3, r3, #7
24064c20:	3308      	adds	r3, #8
24064c22:	9303      	str	r3, [sp, #12]
24064c24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
24064c26:	4433      	add	r3, r6
24064c28:	9309      	str	r3, [sp, #36]	@ 0x24
24064c2a:	e76a      	b.n	24064b02 <_svfiprintf_r+0x52>
24064c2c:	fb0c 3202 	mla	r2, ip, r2, r3
24064c30:	460c      	mov	r4, r1
24064c32:	2001      	movs	r0, #1
24064c34:	e7a8      	b.n	24064b88 <_svfiprintf_r+0xd8>
24064c36:	2300      	movs	r3, #0
24064c38:	3401      	adds	r4, #1
24064c3a:	9305      	str	r3, [sp, #20]
24064c3c:	4619      	mov	r1, r3
24064c3e:	f04f 0c0a 	mov.w	ip, #10
24064c42:	4620      	mov	r0, r4
24064c44:	f810 2b01 	ldrb.w	r2, [r0], #1
24064c48:	3a30      	subs	r2, #48	@ 0x30
24064c4a:	2a09      	cmp	r2, #9
24064c4c:	d903      	bls.n	24064c56 <_svfiprintf_r+0x1a6>
24064c4e:	2b00      	cmp	r3, #0
24064c50:	d0c6      	beq.n	24064be0 <_svfiprintf_r+0x130>
24064c52:	9105      	str	r1, [sp, #20]
24064c54:	e7c4      	b.n	24064be0 <_svfiprintf_r+0x130>
24064c56:	fb0c 2101 	mla	r1, ip, r1, r2
24064c5a:	4604      	mov	r4, r0
24064c5c:	2301      	movs	r3, #1
24064c5e:	e7f0      	b.n	24064c42 <_svfiprintf_r+0x192>
24064c60:	ab03      	add	r3, sp, #12
24064c62:	9300      	str	r3, [sp, #0]
24064c64:	462a      	mov	r2, r5
24064c66:	4b0e      	ldr	r3, [pc, #56]	@ (24064ca0 <_svfiprintf_r+0x1f0>)
24064c68:	a904      	add	r1, sp, #16
24064c6a:	4638      	mov	r0, r7
24064c6c:	f3af 8000 	nop.w
24064c70:	1c42      	adds	r2, r0, #1
24064c72:	4606      	mov	r6, r0
24064c74:	d1d6      	bne.n	24064c24 <_svfiprintf_r+0x174>
24064c76:	89ab      	ldrh	r3, [r5, #12]
24064c78:	065b      	lsls	r3, r3, #25
24064c7a:	f53f af2d 	bmi.w	24064ad8 <_svfiprintf_r+0x28>
24064c7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
24064c80:	e72c      	b.n	24064adc <_svfiprintf_r+0x2c>
24064c82:	ab03      	add	r3, sp, #12
24064c84:	9300      	str	r3, [sp, #0]
24064c86:	462a      	mov	r2, r5
24064c88:	4b05      	ldr	r3, [pc, #20]	@ (24064ca0 <_svfiprintf_r+0x1f0>)
24064c8a:	a904      	add	r1, sp, #16
24064c8c:	4638      	mov	r0, r7
24064c8e:	f000 f9bb 	bl	24065008 <_printf_i>
24064c92:	e7ed      	b.n	24064c70 <_svfiprintf_r+0x1c0>
24064c94:	24069b1b 	.word	0x24069b1b
24064c98:	24069b25 	.word	0x24069b25
24064c9c:	00000000 	.word	0x00000000
24064ca0:	240649f9 	.word	0x240649f9
24064ca4:	24069b21 	.word	0x24069b21

24064ca8 <__sfputc_r>:
24064ca8:	6893      	ldr	r3, [r2, #8]
24064caa:	3b01      	subs	r3, #1
24064cac:	2b00      	cmp	r3, #0
24064cae:	b410      	push	{r4}
24064cb0:	6093      	str	r3, [r2, #8]
24064cb2:	da08      	bge.n	24064cc6 <__sfputc_r+0x1e>
24064cb4:	6994      	ldr	r4, [r2, #24]
24064cb6:	42a3      	cmp	r3, r4
24064cb8:	db01      	blt.n	24064cbe <__sfputc_r+0x16>
24064cba:	290a      	cmp	r1, #10
24064cbc:	d103      	bne.n	24064cc6 <__sfputc_r+0x1e>
24064cbe:	f85d 4b04 	ldr.w	r4, [sp], #4
24064cc2:	f7ff bd12 	b.w	240646ea <__swbuf_r>
24064cc6:	6813      	ldr	r3, [r2, #0]
24064cc8:	1c58      	adds	r0, r3, #1
24064cca:	6010      	str	r0, [r2, #0]
24064ccc:	7019      	strb	r1, [r3, #0]
24064cce:	4608      	mov	r0, r1
24064cd0:	f85d 4b04 	ldr.w	r4, [sp], #4
24064cd4:	4770      	bx	lr

24064cd6 <__sfputs_r>:
24064cd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24064cd8:	4606      	mov	r6, r0
24064cda:	460f      	mov	r7, r1
24064cdc:	4614      	mov	r4, r2
24064cde:	18d5      	adds	r5, r2, r3
24064ce0:	42ac      	cmp	r4, r5
24064ce2:	d101      	bne.n	24064ce8 <__sfputs_r+0x12>
24064ce4:	2000      	movs	r0, #0
24064ce6:	e007      	b.n	24064cf8 <__sfputs_r+0x22>
24064ce8:	f814 1b01 	ldrb.w	r1, [r4], #1
24064cec:	463a      	mov	r2, r7
24064cee:	4630      	mov	r0, r6
24064cf0:	f7ff ffda 	bl	24064ca8 <__sfputc_r>
24064cf4:	1c43      	adds	r3, r0, #1
24064cf6:	d1f3      	bne.n	24064ce0 <__sfputs_r+0xa>
24064cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

24064cfc <_vfiprintf_r>:
24064cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24064d00:	460d      	mov	r5, r1
24064d02:	b09d      	sub	sp, #116	@ 0x74
24064d04:	4614      	mov	r4, r2
24064d06:	4698      	mov	r8, r3
24064d08:	4606      	mov	r6, r0
24064d0a:	b118      	cbz	r0, 24064d14 <_vfiprintf_r+0x18>
24064d0c:	6a03      	ldr	r3, [r0, #32]
24064d0e:	b90b      	cbnz	r3, 24064d14 <_vfiprintf_r+0x18>
24064d10:	f7ff fbd0 	bl	240644b4 <__sinit>
24064d14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
24064d16:	07d9      	lsls	r1, r3, #31
24064d18:	d405      	bmi.n	24064d26 <_vfiprintf_r+0x2a>
24064d1a:	89ab      	ldrh	r3, [r5, #12]
24064d1c:	059a      	lsls	r2, r3, #22
24064d1e:	d402      	bmi.n	24064d26 <_vfiprintf_r+0x2a>
24064d20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
24064d22:	f7ff fe00 	bl	24064926 <__retarget_lock_acquire_recursive>
24064d26:	89ab      	ldrh	r3, [r5, #12]
24064d28:	071b      	lsls	r3, r3, #28
24064d2a:	d501      	bpl.n	24064d30 <_vfiprintf_r+0x34>
24064d2c:	692b      	ldr	r3, [r5, #16]
24064d2e:	b99b      	cbnz	r3, 24064d58 <_vfiprintf_r+0x5c>
24064d30:	4629      	mov	r1, r5
24064d32:	4630      	mov	r0, r6
24064d34:	f7ff fd18 	bl	24064768 <__swsetup_r>
24064d38:	b170      	cbz	r0, 24064d58 <_vfiprintf_r+0x5c>
24064d3a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
24064d3c:	07dc      	lsls	r4, r3, #31
24064d3e:	d504      	bpl.n	24064d4a <_vfiprintf_r+0x4e>
24064d40:	f04f 30ff 	mov.w	r0, #4294967295
24064d44:	b01d      	add	sp, #116	@ 0x74
24064d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
24064d4a:	89ab      	ldrh	r3, [r5, #12]
24064d4c:	0598      	lsls	r0, r3, #22
24064d4e:	d4f7      	bmi.n	24064d40 <_vfiprintf_r+0x44>
24064d50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
24064d52:	f7ff fde9 	bl	24064928 <__retarget_lock_release_recursive>
24064d56:	e7f3      	b.n	24064d40 <_vfiprintf_r+0x44>
24064d58:	2300      	movs	r3, #0
24064d5a:	9309      	str	r3, [sp, #36]	@ 0x24
24064d5c:	2320      	movs	r3, #32
24064d5e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
24064d62:	f8cd 800c 	str.w	r8, [sp, #12]
24064d66:	2330      	movs	r3, #48	@ 0x30
24064d68:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 24064f18 <_vfiprintf_r+0x21c>
24064d6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
24064d70:	f04f 0901 	mov.w	r9, #1
24064d74:	4623      	mov	r3, r4
24064d76:	469a      	mov	sl, r3
24064d78:	f813 2b01 	ldrb.w	r2, [r3], #1
24064d7c:	b10a      	cbz	r2, 24064d82 <_vfiprintf_r+0x86>
24064d7e:	2a25      	cmp	r2, #37	@ 0x25
24064d80:	d1f9      	bne.n	24064d76 <_vfiprintf_r+0x7a>
24064d82:	ebba 0b04 	subs.w	fp, sl, r4
24064d86:	d00b      	beq.n	24064da0 <_vfiprintf_r+0xa4>
24064d88:	465b      	mov	r3, fp
24064d8a:	4622      	mov	r2, r4
24064d8c:	4629      	mov	r1, r5
24064d8e:	4630      	mov	r0, r6
24064d90:	f7ff ffa1 	bl	24064cd6 <__sfputs_r>
24064d94:	3001      	adds	r0, #1
24064d96:	f000 80a7 	beq.w	24064ee8 <_vfiprintf_r+0x1ec>
24064d9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
24064d9c:	445a      	add	r2, fp
24064d9e:	9209      	str	r2, [sp, #36]	@ 0x24
24064da0:	f89a 3000 	ldrb.w	r3, [sl]
24064da4:	2b00      	cmp	r3, #0
24064da6:	f000 809f 	beq.w	24064ee8 <_vfiprintf_r+0x1ec>
24064daa:	2300      	movs	r3, #0
24064dac:	f04f 32ff 	mov.w	r2, #4294967295
24064db0:	e9cd 2305 	strd	r2, r3, [sp, #20]
24064db4:	f10a 0a01 	add.w	sl, sl, #1
24064db8:	9304      	str	r3, [sp, #16]
24064dba:	9307      	str	r3, [sp, #28]
24064dbc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
24064dc0:	931a      	str	r3, [sp, #104]	@ 0x68
24064dc2:	4654      	mov	r4, sl
24064dc4:	2205      	movs	r2, #5
24064dc6:	f814 1b01 	ldrb.w	r1, [r4], #1
24064dca:	4853      	ldr	r0, [pc, #332]	@ (24064f18 <_vfiprintf_r+0x21c>)
24064dcc:	f7eb f938 	bl	24050040 <memchr>
24064dd0:	9a04      	ldr	r2, [sp, #16]
24064dd2:	b9d8      	cbnz	r0, 24064e0c <_vfiprintf_r+0x110>
24064dd4:	06d1      	lsls	r1, r2, #27
24064dd6:	bf44      	itt	mi
24064dd8:	2320      	movmi	r3, #32
24064dda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
24064dde:	0713      	lsls	r3, r2, #28
24064de0:	bf44      	itt	mi
24064de2:	232b      	movmi	r3, #43	@ 0x2b
24064de4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
24064de8:	f89a 3000 	ldrb.w	r3, [sl]
24064dec:	2b2a      	cmp	r3, #42	@ 0x2a
24064dee:	d015      	beq.n	24064e1c <_vfiprintf_r+0x120>
24064df0:	9a07      	ldr	r2, [sp, #28]
24064df2:	4654      	mov	r4, sl
24064df4:	2000      	movs	r0, #0
24064df6:	f04f 0c0a 	mov.w	ip, #10
24064dfa:	4621      	mov	r1, r4
24064dfc:	f811 3b01 	ldrb.w	r3, [r1], #1
24064e00:	3b30      	subs	r3, #48	@ 0x30
24064e02:	2b09      	cmp	r3, #9
24064e04:	d94b      	bls.n	24064e9e <_vfiprintf_r+0x1a2>
24064e06:	b1b0      	cbz	r0, 24064e36 <_vfiprintf_r+0x13a>
24064e08:	9207      	str	r2, [sp, #28]
24064e0a:	e014      	b.n	24064e36 <_vfiprintf_r+0x13a>
24064e0c:	eba0 0308 	sub.w	r3, r0, r8
24064e10:	fa09 f303 	lsl.w	r3, r9, r3
24064e14:	4313      	orrs	r3, r2
24064e16:	9304      	str	r3, [sp, #16]
24064e18:	46a2      	mov	sl, r4
24064e1a:	e7d2      	b.n	24064dc2 <_vfiprintf_r+0xc6>
24064e1c:	9b03      	ldr	r3, [sp, #12]
24064e1e:	1d19      	adds	r1, r3, #4
24064e20:	681b      	ldr	r3, [r3, #0]
24064e22:	9103      	str	r1, [sp, #12]
24064e24:	2b00      	cmp	r3, #0
24064e26:	bfbb      	ittet	lt
24064e28:	425b      	neglt	r3, r3
24064e2a:	f042 0202 	orrlt.w	r2, r2, #2
24064e2e:	9307      	strge	r3, [sp, #28]
24064e30:	9307      	strlt	r3, [sp, #28]
24064e32:	bfb8      	it	lt
24064e34:	9204      	strlt	r2, [sp, #16]
24064e36:	7823      	ldrb	r3, [r4, #0]
24064e38:	2b2e      	cmp	r3, #46	@ 0x2e
24064e3a:	d10a      	bne.n	24064e52 <_vfiprintf_r+0x156>
24064e3c:	7863      	ldrb	r3, [r4, #1]
24064e3e:	2b2a      	cmp	r3, #42	@ 0x2a
24064e40:	d132      	bne.n	24064ea8 <_vfiprintf_r+0x1ac>
24064e42:	9b03      	ldr	r3, [sp, #12]
24064e44:	1d1a      	adds	r2, r3, #4
24064e46:	681b      	ldr	r3, [r3, #0]
24064e48:	9203      	str	r2, [sp, #12]
24064e4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
24064e4e:	3402      	adds	r4, #2
24064e50:	9305      	str	r3, [sp, #20]
24064e52:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 24064f28 <_vfiprintf_r+0x22c>
24064e56:	7821      	ldrb	r1, [r4, #0]
24064e58:	2203      	movs	r2, #3
24064e5a:	4650      	mov	r0, sl
24064e5c:	f7eb f8f0 	bl	24050040 <memchr>
24064e60:	b138      	cbz	r0, 24064e72 <_vfiprintf_r+0x176>
24064e62:	9b04      	ldr	r3, [sp, #16]
24064e64:	eba0 000a 	sub.w	r0, r0, sl
24064e68:	2240      	movs	r2, #64	@ 0x40
24064e6a:	4082      	lsls	r2, r0
24064e6c:	4313      	orrs	r3, r2
24064e6e:	3401      	adds	r4, #1
24064e70:	9304      	str	r3, [sp, #16]
24064e72:	f814 1b01 	ldrb.w	r1, [r4], #1
24064e76:	4829      	ldr	r0, [pc, #164]	@ (24064f1c <_vfiprintf_r+0x220>)
24064e78:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
24064e7c:	2206      	movs	r2, #6
24064e7e:	f7eb f8df 	bl	24050040 <memchr>
24064e82:	2800      	cmp	r0, #0
24064e84:	d03f      	beq.n	24064f06 <_vfiprintf_r+0x20a>
24064e86:	4b26      	ldr	r3, [pc, #152]	@ (24064f20 <_vfiprintf_r+0x224>)
24064e88:	bb1b      	cbnz	r3, 24064ed2 <_vfiprintf_r+0x1d6>
24064e8a:	9b03      	ldr	r3, [sp, #12]
24064e8c:	3307      	adds	r3, #7
24064e8e:	f023 0307 	bic.w	r3, r3, #7
24064e92:	3308      	adds	r3, #8
24064e94:	9303      	str	r3, [sp, #12]
24064e96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
24064e98:	443b      	add	r3, r7
24064e9a:	9309      	str	r3, [sp, #36]	@ 0x24
24064e9c:	e76a      	b.n	24064d74 <_vfiprintf_r+0x78>
24064e9e:	fb0c 3202 	mla	r2, ip, r2, r3
24064ea2:	460c      	mov	r4, r1
24064ea4:	2001      	movs	r0, #1
24064ea6:	e7a8      	b.n	24064dfa <_vfiprintf_r+0xfe>
24064ea8:	2300      	movs	r3, #0
24064eaa:	3401      	adds	r4, #1
24064eac:	9305      	str	r3, [sp, #20]
24064eae:	4619      	mov	r1, r3
24064eb0:	f04f 0c0a 	mov.w	ip, #10
24064eb4:	4620      	mov	r0, r4
24064eb6:	f810 2b01 	ldrb.w	r2, [r0], #1
24064eba:	3a30      	subs	r2, #48	@ 0x30
24064ebc:	2a09      	cmp	r2, #9
24064ebe:	d903      	bls.n	24064ec8 <_vfiprintf_r+0x1cc>
24064ec0:	2b00      	cmp	r3, #0
24064ec2:	d0c6      	beq.n	24064e52 <_vfiprintf_r+0x156>
24064ec4:	9105      	str	r1, [sp, #20]
24064ec6:	e7c4      	b.n	24064e52 <_vfiprintf_r+0x156>
24064ec8:	fb0c 2101 	mla	r1, ip, r1, r2
24064ecc:	4604      	mov	r4, r0
24064ece:	2301      	movs	r3, #1
24064ed0:	e7f0      	b.n	24064eb4 <_vfiprintf_r+0x1b8>
24064ed2:	ab03      	add	r3, sp, #12
24064ed4:	9300      	str	r3, [sp, #0]
24064ed6:	462a      	mov	r2, r5
24064ed8:	4b12      	ldr	r3, [pc, #72]	@ (24064f24 <_vfiprintf_r+0x228>)
24064eda:	a904      	add	r1, sp, #16
24064edc:	4630      	mov	r0, r6
24064ede:	f3af 8000 	nop.w
24064ee2:	4607      	mov	r7, r0
24064ee4:	1c78      	adds	r0, r7, #1
24064ee6:	d1d6      	bne.n	24064e96 <_vfiprintf_r+0x19a>
24064ee8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
24064eea:	07d9      	lsls	r1, r3, #31
24064eec:	d405      	bmi.n	24064efa <_vfiprintf_r+0x1fe>
24064eee:	89ab      	ldrh	r3, [r5, #12]
24064ef0:	059a      	lsls	r2, r3, #22
24064ef2:	d402      	bmi.n	24064efa <_vfiprintf_r+0x1fe>
24064ef4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
24064ef6:	f7ff fd17 	bl	24064928 <__retarget_lock_release_recursive>
24064efa:	89ab      	ldrh	r3, [r5, #12]
24064efc:	065b      	lsls	r3, r3, #25
24064efe:	f53f af1f 	bmi.w	24064d40 <_vfiprintf_r+0x44>
24064f02:	9809      	ldr	r0, [sp, #36]	@ 0x24
24064f04:	e71e      	b.n	24064d44 <_vfiprintf_r+0x48>
24064f06:	ab03      	add	r3, sp, #12
24064f08:	9300      	str	r3, [sp, #0]
24064f0a:	462a      	mov	r2, r5
24064f0c:	4b05      	ldr	r3, [pc, #20]	@ (24064f24 <_vfiprintf_r+0x228>)
24064f0e:	a904      	add	r1, sp, #16
24064f10:	4630      	mov	r0, r6
24064f12:	f000 f879 	bl	24065008 <_printf_i>
24064f16:	e7e4      	b.n	24064ee2 <_vfiprintf_r+0x1e6>
24064f18:	24069b1b 	.word	0x24069b1b
24064f1c:	24069b25 	.word	0x24069b25
24064f20:	00000000 	.word	0x00000000
24064f24:	24064cd7 	.word	0x24064cd7
24064f28:	24069b21 	.word	0x24069b21

24064f2c <_printf_common>:
24064f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
24064f30:	4616      	mov	r6, r2
24064f32:	4698      	mov	r8, r3
24064f34:	688a      	ldr	r2, [r1, #8]
24064f36:	690b      	ldr	r3, [r1, #16]
24064f38:	f8dd 9020 	ldr.w	r9, [sp, #32]
24064f3c:	4293      	cmp	r3, r2
24064f3e:	bfb8      	it	lt
24064f40:	4613      	movlt	r3, r2
24064f42:	6033      	str	r3, [r6, #0]
24064f44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
24064f48:	4607      	mov	r7, r0
24064f4a:	460c      	mov	r4, r1
24064f4c:	b10a      	cbz	r2, 24064f52 <_printf_common+0x26>
24064f4e:	3301      	adds	r3, #1
24064f50:	6033      	str	r3, [r6, #0]
24064f52:	6823      	ldr	r3, [r4, #0]
24064f54:	0699      	lsls	r1, r3, #26
24064f56:	bf42      	ittt	mi
24064f58:	6833      	ldrmi	r3, [r6, #0]
24064f5a:	3302      	addmi	r3, #2
24064f5c:	6033      	strmi	r3, [r6, #0]
24064f5e:	6825      	ldr	r5, [r4, #0]
24064f60:	f015 0506 	ands.w	r5, r5, #6
24064f64:	d106      	bne.n	24064f74 <_printf_common+0x48>
24064f66:	f104 0a19 	add.w	sl, r4, #25
24064f6a:	68e3      	ldr	r3, [r4, #12]
24064f6c:	6832      	ldr	r2, [r6, #0]
24064f6e:	1a9b      	subs	r3, r3, r2
24064f70:	42ab      	cmp	r3, r5
24064f72:	dc26      	bgt.n	24064fc2 <_printf_common+0x96>
24064f74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
24064f78:	6822      	ldr	r2, [r4, #0]
24064f7a:	3b00      	subs	r3, #0
24064f7c:	bf18      	it	ne
24064f7e:	2301      	movne	r3, #1
24064f80:	0692      	lsls	r2, r2, #26
24064f82:	d42b      	bmi.n	24064fdc <_printf_common+0xb0>
24064f84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
24064f88:	4641      	mov	r1, r8
24064f8a:	4638      	mov	r0, r7
24064f8c:	47c8      	blx	r9
24064f8e:	3001      	adds	r0, #1
24064f90:	d01e      	beq.n	24064fd0 <_printf_common+0xa4>
24064f92:	6823      	ldr	r3, [r4, #0]
24064f94:	6922      	ldr	r2, [r4, #16]
24064f96:	f003 0306 	and.w	r3, r3, #6
24064f9a:	2b04      	cmp	r3, #4
24064f9c:	bf02      	ittt	eq
24064f9e:	68e5      	ldreq	r5, [r4, #12]
24064fa0:	6833      	ldreq	r3, [r6, #0]
24064fa2:	1aed      	subeq	r5, r5, r3
24064fa4:	68a3      	ldr	r3, [r4, #8]
24064fa6:	bf0c      	ite	eq
24064fa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
24064fac:	2500      	movne	r5, #0
24064fae:	4293      	cmp	r3, r2
24064fb0:	bfc4      	itt	gt
24064fb2:	1a9b      	subgt	r3, r3, r2
24064fb4:	18ed      	addgt	r5, r5, r3
24064fb6:	2600      	movs	r6, #0
24064fb8:	341a      	adds	r4, #26
24064fba:	42b5      	cmp	r5, r6
24064fbc:	d11a      	bne.n	24064ff4 <_printf_common+0xc8>
24064fbe:	2000      	movs	r0, #0
24064fc0:	e008      	b.n	24064fd4 <_printf_common+0xa8>
24064fc2:	2301      	movs	r3, #1
24064fc4:	4652      	mov	r2, sl
24064fc6:	4641      	mov	r1, r8
24064fc8:	4638      	mov	r0, r7
24064fca:	47c8      	blx	r9
24064fcc:	3001      	adds	r0, #1
24064fce:	d103      	bne.n	24064fd8 <_printf_common+0xac>
24064fd0:	f04f 30ff 	mov.w	r0, #4294967295
24064fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
24064fd8:	3501      	adds	r5, #1
24064fda:	e7c6      	b.n	24064f6a <_printf_common+0x3e>
24064fdc:	18e1      	adds	r1, r4, r3
24064fde:	1c5a      	adds	r2, r3, #1
24064fe0:	2030      	movs	r0, #48	@ 0x30
24064fe2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
24064fe6:	4422      	add	r2, r4
24064fe8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
24064fec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
24064ff0:	3302      	adds	r3, #2
24064ff2:	e7c7      	b.n	24064f84 <_printf_common+0x58>
24064ff4:	2301      	movs	r3, #1
24064ff6:	4622      	mov	r2, r4
24064ff8:	4641      	mov	r1, r8
24064ffa:	4638      	mov	r0, r7
24064ffc:	47c8      	blx	r9
24064ffe:	3001      	adds	r0, #1
24065000:	d0e6      	beq.n	24064fd0 <_printf_common+0xa4>
24065002:	3601      	adds	r6, #1
24065004:	e7d9      	b.n	24064fba <_printf_common+0x8e>
	...

24065008 <_printf_i>:
24065008:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
2406500c:	7e0f      	ldrb	r7, [r1, #24]
2406500e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
24065010:	2f78      	cmp	r7, #120	@ 0x78
24065012:	4691      	mov	r9, r2
24065014:	4680      	mov	r8, r0
24065016:	460c      	mov	r4, r1
24065018:	469a      	mov	sl, r3
2406501a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
2406501e:	d807      	bhi.n	24065030 <_printf_i+0x28>
24065020:	2f62      	cmp	r7, #98	@ 0x62
24065022:	d80a      	bhi.n	2406503a <_printf_i+0x32>
24065024:	2f00      	cmp	r7, #0
24065026:	f000 80d2 	beq.w	240651ce <_printf_i+0x1c6>
2406502a:	2f58      	cmp	r7, #88	@ 0x58
2406502c:	f000 80b9 	beq.w	240651a2 <_printf_i+0x19a>
24065030:	f104 0642 	add.w	r6, r4, #66	@ 0x42
24065034:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
24065038:	e03a      	b.n	240650b0 <_printf_i+0xa8>
2406503a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
2406503e:	2b15      	cmp	r3, #21
24065040:	d8f6      	bhi.n	24065030 <_printf_i+0x28>
24065042:	a101      	add	r1, pc, #4	@ (adr r1, 24065048 <_printf_i+0x40>)
24065044:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
24065048:	240650a1 	.word	0x240650a1
2406504c:	240650b5 	.word	0x240650b5
24065050:	24065031 	.word	0x24065031
24065054:	24065031 	.word	0x24065031
24065058:	24065031 	.word	0x24065031
2406505c:	24065031 	.word	0x24065031
24065060:	240650b5 	.word	0x240650b5
24065064:	24065031 	.word	0x24065031
24065068:	24065031 	.word	0x24065031
2406506c:	24065031 	.word	0x24065031
24065070:	24065031 	.word	0x24065031
24065074:	240651b5 	.word	0x240651b5
24065078:	240650df 	.word	0x240650df
2406507c:	2406516f 	.word	0x2406516f
24065080:	24065031 	.word	0x24065031
24065084:	24065031 	.word	0x24065031
24065088:	240651d7 	.word	0x240651d7
2406508c:	24065031 	.word	0x24065031
24065090:	240650df 	.word	0x240650df
24065094:	24065031 	.word	0x24065031
24065098:	24065031 	.word	0x24065031
2406509c:	24065177 	.word	0x24065177
240650a0:	6833      	ldr	r3, [r6, #0]
240650a2:	1d1a      	adds	r2, r3, #4
240650a4:	681b      	ldr	r3, [r3, #0]
240650a6:	6032      	str	r2, [r6, #0]
240650a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
240650ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
240650b0:	2301      	movs	r3, #1
240650b2:	e09d      	b.n	240651f0 <_printf_i+0x1e8>
240650b4:	6833      	ldr	r3, [r6, #0]
240650b6:	6820      	ldr	r0, [r4, #0]
240650b8:	1d19      	adds	r1, r3, #4
240650ba:	6031      	str	r1, [r6, #0]
240650bc:	0606      	lsls	r6, r0, #24
240650be:	d501      	bpl.n	240650c4 <_printf_i+0xbc>
240650c0:	681d      	ldr	r5, [r3, #0]
240650c2:	e003      	b.n	240650cc <_printf_i+0xc4>
240650c4:	0645      	lsls	r5, r0, #25
240650c6:	d5fb      	bpl.n	240650c0 <_printf_i+0xb8>
240650c8:	f9b3 5000 	ldrsh.w	r5, [r3]
240650cc:	2d00      	cmp	r5, #0
240650ce:	da03      	bge.n	240650d8 <_printf_i+0xd0>
240650d0:	232d      	movs	r3, #45	@ 0x2d
240650d2:	426d      	negs	r5, r5
240650d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
240650d8:	4859      	ldr	r0, [pc, #356]	@ (24065240 <_printf_i+0x238>)
240650da:	230a      	movs	r3, #10
240650dc:	e011      	b.n	24065102 <_printf_i+0xfa>
240650de:	6821      	ldr	r1, [r4, #0]
240650e0:	6833      	ldr	r3, [r6, #0]
240650e2:	0608      	lsls	r0, r1, #24
240650e4:	f853 5b04 	ldr.w	r5, [r3], #4
240650e8:	d402      	bmi.n	240650f0 <_printf_i+0xe8>
240650ea:	0649      	lsls	r1, r1, #25
240650ec:	bf48      	it	mi
240650ee:	b2ad      	uxthmi	r5, r5
240650f0:	2f6f      	cmp	r7, #111	@ 0x6f
240650f2:	4853      	ldr	r0, [pc, #332]	@ (24065240 <_printf_i+0x238>)
240650f4:	6033      	str	r3, [r6, #0]
240650f6:	bf14      	ite	ne
240650f8:	230a      	movne	r3, #10
240650fa:	2308      	moveq	r3, #8
240650fc:	2100      	movs	r1, #0
240650fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
24065102:	6866      	ldr	r6, [r4, #4]
24065104:	60a6      	str	r6, [r4, #8]
24065106:	2e00      	cmp	r6, #0
24065108:	bfa2      	ittt	ge
2406510a:	6821      	ldrge	r1, [r4, #0]
2406510c:	f021 0104 	bicge.w	r1, r1, #4
24065110:	6021      	strge	r1, [r4, #0]
24065112:	b90d      	cbnz	r5, 24065118 <_printf_i+0x110>
24065114:	2e00      	cmp	r6, #0
24065116:	d04b      	beq.n	240651b0 <_printf_i+0x1a8>
24065118:	4616      	mov	r6, r2
2406511a:	fbb5 f1f3 	udiv	r1, r5, r3
2406511e:	fb03 5711 	mls	r7, r3, r1, r5
24065122:	5dc7      	ldrb	r7, [r0, r7]
24065124:	f806 7d01 	strb.w	r7, [r6, #-1]!
24065128:	462f      	mov	r7, r5
2406512a:	42bb      	cmp	r3, r7
2406512c:	460d      	mov	r5, r1
2406512e:	d9f4      	bls.n	2406511a <_printf_i+0x112>
24065130:	2b08      	cmp	r3, #8
24065132:	d10b      	bne.n	2406514c <_printf_i+0x144>
24065134:	6823      	ldr	r3, [r4, #0]
24065136:	07df      	lsls	r7, r3, #31
24065138:	d508      	bpl.n	2406514c <_printf_i+0x144>
2406513a:	6923      	ldr	r3, [r4, #16]
2406513c:	6861      	ldr	r1, [r4, #4]
2406513e:	4299      	cmp	r1, r3
24065140:	bfde      	ittt	le
24065142:	2330      	movle	r3, #48	@ 0x30
24065144:	f806 3c01 	strble.w	r3, [r6, #-1]
24065148:	f106 36ff 	addle.w	r6, r6, #4294967295
2406514c:	1b92      	subs	r2, r2, r6
2406514e:	6122      	str	r2, [r4, #16]
24065150:	f8cd a000 	str.w	sl, [sp]
24065154:	464b      	mov	r3, r9
24065156:	aa03      	add	r2, sp, #12
24065158:	4621      	mov	r1, r4
2406515a:	4640      	mov	r0, r8
2406515c:	f7ff fee6 	bl	24064f2c <_printf_common>
24065160:	3001      	adds	r0, #1
24065162:	d14a      	bne.n	240651fa <_printf_i+0x1f2>
24065164:	f04f 30ff 	mov.w	r0, #4294967295
24065168:	b004      	add	sp, #16
2406516a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2406516e:	6823      	ldr	r3, [r4, #0]
24065170:	f043 0320 	orr.w	r3, r3, #32
24065174:	6023      	str	r3, [r4, #0]
24065176:	4833      	ldr	r0, [pc, #204]	@ (24065244 <_printf_i+0x23c>)
24065178:	2778      	movs	r7, #120	@ 0x78
2406517a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
2406517e:	6823      	ldr	r3, [r4, #0]
24065180:	6831      	ldr	r1, [r6, #0]
24065182:	061f      	lsls	r7, r3, #24
24065184:	f851 5b04 	ldr.w	r5, [r1], #4
24065188:	d402      	bmi.n	24065190 <_printf_i+0x188>
2406518a:	065f      	lsls	r7, r3, #25
2406518c:	bf48      	it	mi
2406518e:	b2ad      	uxthmi	r5, r5
24065190:	6031      	str	r1, [r6, #0]
24065192:	07d9      	lsls	r1, r3, #31
24065194:	bf44      	itt	mi
24065196:	f043 0320 	orrmi.w	r3, r3, #32
2406519a:	6023      	strmi	r3, [r4, #0]
2406519c:	b11d      	cbz	r5, 240651a6 <_printf_i+0x19e>
2406519e:	2310      	movs	r3, #16
240651a0:	e7ac      	b.n	240650fc <_printf_i+0xf4>
240651a2:	4827      	ldr	r0, [pc, #156]	@ (24065240 <_printf_i+0x238>)
240651a4:	e7e9      	b.n	2406517a <_printf_i+0x172>
240651a6:	6823      	ldr	r3, [r4, #0]
240651a8:	f023 0320 	bic.w	r3, r3, #32
240651ac:	6023      	str	r3, [r4, #0]
240651ae:	e7f6      	b.n	2406519e <_printf_i+0x196>
240651b0:	4616      	mov	r6, r2
240651b2:	e7bd      	b.n	24065130 <_printf_i+0x128>
240651b4:	6833      	ldr	r3, [r6, #0]
240651b6:	6825      	ldr	r5, [r4, #0]
240651b8:	6961      	ldr	r1, [r4, #20]
240651ba:	1d18      	adds	r0, r3, #4
240651bc:	6030      	str	r0, [r6, #0]
240651be:	062e      	lsls	r6, r5, #24
240651c0:	681b      	ldr	r3, [r3, #0]
240651c2:	d501      	bpl.n	240651c8 <_printf_i+0x1c0>
240651c4:	6019      	str	r1, [r3, #0]
240651c6:	e002      	b.n	240651ce <_printf_i+0x1c6>
240651c8:	0668      	lsls	r0, r5, #25
240651ca:	d5fb      	bpl.n	240651c4 <_printf_i+0x1bc>
240651cc:	8019      	strh	r1, [r3, #0]
240651ce:	2300      	movs	r3, #0
240651d0:	6123      	str	r3, [r4, #16]
240651d2:	4616      	mov	r6, r2
240651d4:	e7bc      	b.n	24065150 <_printf_i+0x148>
240651d6:	6833      	ldr	r3, [r6, #0]
240651d8:	1d1a      	adds	r2, r3, #4
240651da:	6032      	str	r2, [r6, #0]
240651dc:	681e      	ldr	r6, [r3, #0]
240651de:	6862      	ldr	r2, [r4, #4]
240651e0:	2100      	movs	r1, #0
240651e2:	4630      	mov	r0, r6
240651e4:	f7ea ff2c 	bl	24050040 <memchr>
240651e8:	b108      	cbz	r0, 240651ee <_printf_i+0x1e6>
240651ea:	1b80      	subs	r0, r0, r6
240651ec:	6060      	str	r0, [r4, #4]
240651ee:	6863      	ldr	r3, [r4, #4]
240651f0:	6123      	str	r3, [r4, #16]
240651f2:	2300      	movs	r3, #0
240651f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
240651f8:	e7aa      	b.n	24065150 <_printf_i+0x148>
240651fa:	6923      	ldr	r3, [r4, #16]
240651fc:	4632      	mov	r2, r6
240651fe:	4649      	mov	r1, r9
24065200:	4640      	mov	r0, r8
24065202:	47d0      	blx	sl
24065204:	3001      	adds	r0, #1
24065206:	d0ad      	beq.n	24065164 <_printf_i+0x15c>
24065208:	6823      	ldr	r3, [r4, #0]
2406520a:	079b      	lsls	r3, r3, #30
2406520c:	d413      	bmi.n	24065236 <_printf_i+0x22e>
2406520e:	68e0      	ldr	r0, [r4, #12]
24065210:	9b03      	ldr	r3, [sp, #12]
24065212:	4298      	cmp	r0, r3
24065214:	bfb8      	it	lt
24065216:	4618      	movlt	r0, r3
24065218:	e7a6      	b.n	24065168 <_printf_i+0x160>
2406521a:	2301      	movs	r3, #1
2406521c:	4632      	mov	r2, r6
2406521e:	4649      	mov	r1, r9
24065220:	4640      	mov	r0, r8
24065222:	47d0      	blx	sl
24065224:	3001      	adds	r0, #1
24065226:	d09d      	beq.n	24065164 <_printf_i+0x15c>
24065228:	3501      	adds	r5, #1
2406522a:	68e3      	ldr	r3, [r4, #12]
2406522c:	9903      	ldr	r1, [sp, #12]
2406522e:	1a5b      	subs	r3, r3, r1
24065230:	42ab      	cmp	r3, r5
24065232:	dcf2      	bgt.n	2406521a <_printf_i+0x212>
24065234:	e7eb      	b.n	2406520e <_printf_i+0x206>
24065236:	2500      	movs	r5, #0
24065238:	f104 0619 	add.w	r6, r4, #25
2406523c:	e7f5      	b.n	2406522a <_printf_i+0x222>
2406523e:	bf00      	nop
24065240:	24069b2c 	.word	0x24069b2c
24065244:	24069b3d 	.word	0x24069b3d

24065248 <__sflush_r>:
24065248:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
2406524c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
24065250:	0716      	lsls	r6, r2, #28
24065252:	4605      	mov	r5, r0
24065254:	460c      	mov	r4, r1
24065256:	d454      	bmi.n	24065302 <__sflush_r+0xba>
24065258:	684b      	ldr	r3, [r1, #4]
2406525a:	2b00      	cmp	r3, #0
2406525c:	dc02      	bgt.n	24065264 <__sflush_r+0x1c>
2406525e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
24065260:	2b00      	cmp	r3, #0
24065262:	dd48      	ble.n	240652f6 <__sflush_r+0xae>
24065264:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
24065266:	2e00      	cmp	r6, #0
24065268:	d045      	beq.n	240652f6 <__sflush_r+0xae>
2406526a:	2300      	movs	r3, #0
2406526c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
24065270:	682f      	ldr	r7, [r5, #0]
24065272:	6a21      	ldr	r1, [r4, #32]
24065274:	602b      	str	r3, [r5, #0]
24065276:	d030      	beq.n	240652da <__sflush_r+0x92>
24065278:	6d62      	ldr	r2, [r4, #84]	@ 0x54
2406527a:	89a3      	ldrh	r3, [r4, #12]
2406527c:	0759      	lsls	r1, r3, #29
2406527e:	d505      	bpl.n	2406528c <__sflush_r+0x44>
24065280:	6863      	ldr	r3, [r4, #4]
24065282:	1ad2      	subs	r2, r2, r3
24065284:	6b63      	ldr	r3, [r4, #52]	@ 0x34
24065286:	b10b      	cbz	r3, 2406528c <__sflush_r+0x44>
24065288:	6c23      	ldr	r3, [r4, #64]	@ 0x40
2406528a:	1ad2      	subs	r2, r2, r3
2406528c:	2300      	movs	r3, #0
2406528e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
24065290:	6a21      	ldr	r1, [r4, #32]
24065292:	4628      	mov	r0, r5
24065294:	47b0      	blx	r6
24065296:	1c43      	adds	r3, r0, #1
24065298:	89a3      	ldrh	r3, [r4, #12]
2406529a:	d106      	bne.n	240652aa <__sflush_r+0x62>
2406529c:	6829      	ldr	r1, [r5, #0]
2406529e:	291d      	cmp	r1, #29
240652a0:	d82b      	bhi.n	240652fa <__sflush_r+0xb2>
240652a2:	4a2a      	ldr	r2, [pc, #168]	@ (2406534c <__sflush_r+0x104>)
240652a4:	410a      	asrs	r2, r1
240652a6:	07d6      	lsls	r6, r2, #31
240652a8:	d427      	bmi.n	240652fa <__sflush_r+0xb2>
240652aa:	2200      	movs	r2, #0
240652ac:	6062      	str	r2, [r4, #4]
240652ae:	04d9      	lsls	r1, r3, #19
240652b0:	6922      	ldr	r2, [r4, #16]
240652b2:	6022      	str	r2, [r4, #0]
240652b4:	d504      	bpl.n	240652c0 <__sflush_r+0x78>
240652b6:	1c42      	adds	r2, r0, #1
240652b8:	d101      	bne.n	240652be <__sflush_r+0x76>
240652ba:	682b      	ldr	r3, [r5, #0]
240652bc:	b903      	cbnz	r3, 240652c0 <__sflush_r+0x78>
240652be:	6560      	str	r0, [r4, #84]	@ 0x54
240652c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
240652c2:	602f      	str	r7, [r5, #0]
240652c4:	b1b9      	cbz	r1, 240652f6 <__sflush_r+0xae>
240652c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
240652ca:	4299      	cmp	r1, r3
240652cc:	d002      	beq.n	240652d4 <__sflush_r+0x8c>
240652ce:	4628      	mov	r0, r5
240652d0:	f7ff fb40 	bl	24064954 <_free_r>
240652d4:	2300      	movs	r3, #0
240652d6:	6363      	str	r3, [r4, #52]	@ 0x34
240652d8:	e00d      	b.n	240652f6 <__sflush_r+0xae>
240652da:	2301      	movs	r3, #1
240652dc:	4628      	mov	r0, r5
240652de:	47b0      	blx	r6
240652e0:	4602      	mov	r2, r0
240652e2:	1c50      	adds	r0, r2, #1
240652e4:	d1c9      	bne.n	2406527a <__sflush_r+0x32>
240652e6:	682b      	ldr	r3, [r5, #0]
240652e8:	2b00      	cmp	r3, #0
240652ea:	d0c6      	beq.n	2406527a <__sflush_r+0x32>
240652ec:	2b1d      	cmp	r3, #29
240652ee:	d001      	beq.n	240652f4 <__sflush_r+0xac>
240652f0:	2b16      	cmp	r3, #22
240652f2:	d11e      	bne.n	24065332 <__sflush_r+0xea>
240652f4:	602f      	str	r7, [r5, #0]
240652f6:	2000      	movs	r0, #0
240652f8:	e022      	b.n	24065340 <__sflush_r+0xf8>
240652fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
240652fe:	b21b      	sxth	r3, r3
24065300:	e01b      	b.n	2406533a <__sflush_r+0xf2>
24065302:	690f      	ldr	r7, [r1, #16]
24065304:	2f00      	cmp	r7, #0
24065306:	d0f6      	beq.n	240652f6 <__sflush_r+0xae>
24065308:	0793      	lsls	r3, r2, #30
2406530a:	680e      	ldr	r6, [r1, #0]
2406530c:	bf08      	it	eq
2406530e:	694b      	ldreq	r3, [r1, #20]
24065310:	600f      	str	r7, [r1, #0]
24065312:	bf18      	it	ne
24065314:	2300      	movne	r3, #0
24065316:	eba6 0807 	sub.w	r8, r6, r7
2406531a:	608b      	str	r3, [r1, #8]
2406531c:	f1b8 0f00 	cmp.w	r8, #0
24065320:	dde9      	ble.n	240652f6 <__sflush_r+0xae>
24065322:	6a21      	ldr	r1, [r4, #32]
24065324:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
24065326:	4643      	mov	r3, r8
24065328:	463a      	mov	r2, r7
2406532a:	4628      	mov	r0, r5
2406532c:	47b0      	blx	r6
2406532e:	2800      	cmp	r0, #0
24065330:	dc08      	bgt.n	24065344 <__sflush_r+0xfc>
24065332:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
24065336:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
2406533a:	81a3      	strh	r3, [r4, #12]
2406533c:	f04f 30ff 	mov.w	r0, #4294967295
24065340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
24065344:	4407      	add	r7, r0
24065346:	eba8 0800 	sub.w	r8, r8, r0
2406534a:	e7e7      	b.n	2406531c <__sflush_r+0xd4>
2406534c:	dfbffffe 	.word	0xdfbffffe

24065350 <_fflush_r>:
24065350:	b538      	push	{r3, r4, r5, lr}
24065352:	690b      	ldr	r3, [r1, #16]
24065354:	4605      	mov	r5, r0
24065356:	460c      	mov	r4, r1
24065358:	b913      	cbnz	r3, 24065360 <_fflush_r+0x10>
2406535a:	2500      	movs	r5, #0
2406535c:	4628      	mov	r0, r5
2406535e:	bd38      	pop	{r3, r4, r5, pc}
24065360:	b118      	cbz	r0, 2406536a <_fflush_r+0x1a>
24065362:	6a03      	ldr	r3, [r0, #32]
24065364:	b90b      	cbnz	r3, 2406536a <_fflush_r+0x1a>
24065366:	f7ff f8a5 	bl	240644b4 <__sinit>
2406536a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
2406536e:	2b00      	cmp	r3, #0
24065370:	d0f3      	beq.n	2406535a <_fflush_r+0xa>
24065372:	6e62      	ldr	r2, [r4, #100]	@ 0x64
24065374:	07d0      	lsls	r0, r2, #31
24065376:	d404      	bmi.n	24065382 <_fflush_r+0x32>
24065378:	0599      	lsls	r1, r3, #22
2406537a:	d402      	bmi.n	24065382 <_fflush_r+0x32>
2406537c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
2406537e:	f7ff fad2 	bl	24064926 <__retarget_lock_acquire_recursive>
24065382:	4628      	mov	r0, r5
24065384:	4621      	mov	r1, r4
24065386:	f7ff ff5f 	bl	24065248 <__sflush_r>
2406538a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
2406538c:	07da      	lsls	r2, r3, #31
2406538e:	4605      	mov	r5, r0
24065390:	d4e4      	bmi.n	2406535c <_fflush_r+0xc>
24065392:	89a3      	ldrh	r3, [r4, #12]
24065394:	059b      	lsls	r3, r3, #22
24065396:	d4e1      	bmi.n	2406535c <_fflush_r+0xc>
24065398:	6da0      	ldr	r0, [r4, #88]	@ 0x58
2406539a:	f7ff fac5 	bl	24064928 <__retarget_lock_release_recursive>
2406539e:	e7dd      	b.n	2406535c <_fflush_r+0xc>

240653a0 <__swhatbuf_r>:
240653a0:	b570      	push	{r4, r5, r6, lr}
240653a2:	460c      	mov	r4, r1
240653a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
240653a8:	2900      	cmp	r1, #0
240653aa:	b096      	sub	sp, #88	@ 0x58
240653ac:	4615      	mov	r5, r2
240653ae:	461e      	mov	r6, r3
240653b0:	da0d      	bge.n	240653ce <__swhatbuf_r+0x2e>
240653b2:	89a3      	ldrh	r3, [r4, #12]
240653b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
240653b8:	f04f 0100 	mov.w	r1, #0
240653bc:	bf14      	ite	ne
240653be:	2340      	movne	r3, #64	@ 0x40
240653c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
240653c4:	2000      	movs	r0, #0
240653c6:	6031      	str	r1, [r6, #0]
240653c8:	602b      	str	r3, [r5, #0]
240653ca:	b016      	add	sp, #88	@ 0x58
240653cc:	bd70      	pop	{r4, r5, r6, pc}
240653ce:	466a      	mov	r2, sp
240653d0:	f000 f892 	bl	240654f8 <_fstat_r>
240653d4:	2800      	cmp	r0, #0
240653d6:	dbec      	blt.n	240653b2 <__swhatbuf_r+0x12>
240653d8:	9901      	ldr	r1, [sp, #4]
240653da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
240653de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
240653e2:	4259      	negs	r1, r3
240653e4:	4159      	adcs	r1, r3
240653e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
240653ea:	e7eb      	b.n	240653c4 <__swhatbuf_r+0x24>

240653ec <__smakebuf_r>:
240653ec:	898b      	ldrh	r3, [r1, #12]
240653ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
240653f0:	079d      	lsls	r5, r3, #30
240653f2:	4606      	mov	r6, r0
240653f4:	460c      	mov	r4, r1
240653f6:	d507      	bpl.n	24065408 <__smakebuf_r+0x1c>
240653f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
240653fc:	6023      	str	r3, [r4, #0]
240653fe:	6123      	str	r3, [r4, #16]
24065400:	2301      	movs	r3, #1
24065402:	6163      	str	r3, [r4, #20]
24065404:	b003      	add	sp, #12
24065406:	bdf0      	pop	{r4, r5, r6, r7, pc}
24065408:	ab01      	add	r3, sp, #4
2406540a:	466a      	mov	r2, sp
2406540c:	f7ff ffc8 	bl	240653a0 <__swhatbuf_r>
24065410:	9f00      	ldr	r7, [sp, #0]
24065412:	4605      	mov	r5, r0
24065414:	4639      	mov	r1, r7
24065416:	4630      	mov	r0, r6
24065418:	f7fe fe9a 	bl	24064150 <_malloc_r>
2406541c:	b948      	cbnz	r0, 24065432 <__smakebuf_r+0x46>
2406541e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
24065422:	059a      	lsls	r2, r3, #22
24065424:	d4ee      	bmi.n	24065404 <__smakebuf_r+0x18>
24065426:	f023 0303 	bic.w	r3, r3, #3
2406542a:	f043 0302 	orr.w	r3, r3, #2
2406542e:	81a3      	strh	r3, [r4, #12]
24065430:	e7e2      	b.n	240653f8 <__smakebuf_r+0xc>
24065432:	89a3      	ldrh	r3, [r4, #12]
24065434:	6020      	str	r0, [r4, #0]
24065436:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
2406543a:	81a3      	strh	r3, [r4, #12]
2406543c:	9b01      	ldr	r3, [sp, #4]
2406543e:	e9c4 0704 	strd	r0, r7, [r4, #16]
24065442:	b15b      	cbz	r3, 2406545c <__smakebuf_r+0x70>
24065444:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
24065448:	4630      	mov	r0, r6
2406544a:	f000 f867 	bl	2406551c <_isatty_r>
2406544e:	b128      	cbz	r0, 2406545c <__smakebuf_r+0x70>
24065450:	89a3      	ldrh	r3, [r4, #12]
24065452:	f023 0303 	bic.w	r3, r3, #3
24065456:	f043 0301 	orr.w	r3, r3, #1
2406545a:	81a3      	strh	r3, [r4, #12]
2406545c:	89a3      	ldrh	r3, [r4, #12]
2406545e:	431d      	orrs	r5, r3
24065460:	81a5      	strh	r5, [r4, #12]
24065462:	e7cf      	b.n	24065404 <__smakebuf_r+0x18>

24065464 <memmove>:
24065464:	4288      	cmp	r0, r1
24065466:	b510      	push	{r4, lr}
24065468:	eb01 0402 	add.w	r4, r1, r2
2406546c:	d902      	bls.n	24065474 <memmove+0x10>
2406546e:	4284      	cmp	r4, r0
24065470:	4623      	mov	r3, r4
24065472:	d807      	bhi.n	24065484 <memmove+0x20>
24065474:	1e43      	subs	r3, r0, #1
24065476:	42a1      	cmp	r1, r4
24065478:	d008      	beq.n	2406548c <memmove+0x28>
2406547a:	f811 2b01 	ldrb.w	r2, [r1], #1
2406547e:	f803 2f01 	strb.w	r2, [r3, #1]!
24065482:	e7f8      	b.n	24065476 <memmove+0x12>
24065484:	4402      	add	r2, r0
24065486:	4601      	mov	r1, r0
24065488:	428a      	cmp	r2, r1
2406548a:	d100      	bne.n	2406548e <memmove+0x2a>
2406548c:	bd10      	pop	{r4, pc}
2406548e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
24065492:	f802 4d01 	strb.w	r4, [r2, #-1]!
24065496:	e7f7      	b.n	24065488 <memmove+0x24>

24065498 <_raise_r>:
24065498:	291f      	cmp	r1, #31
2406549a:	b538      	push	{r3, r4, r5, lr}
2406549c:	4605      	mov	r5, r0
2406549e:	460c      	mov	r4, r1
240654a0:	d904      	bls.n	240654ac <_raise_r+0x14>
240654a2:	2316      	movs	r3, #22
240654a4:	6003      	str	r3, [r0, #0]
240654a6:	f04f 30ff 	mov.w	r0, #4294967295
240654aa:	bd38      	pop	{r3, r4, r5, pc}
240654ac:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
240654ae:	b112      	cbz	r2, 240654b6 <_raise_r+0x1e>
240654b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
240654b4:	b94b      	cbnz	r3, 240654ca <_raise_r+0x32>
240654b6:	4628      	mov	r0, r5
240654b8:	f000 f852 	bl	24065560 <_getpid_r>
240654bc:	4622      	mov	r2, r4
240654be:	4601      	mov	r1, r0
240654c0:	4628      	mov	r0, r5
240654c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
240654c6:	f000 b839 	b.w	2406553c <_kill_r>
240654ca:	2b01      	cmp	r3, #1
240654cc:	d00a      	beq.n	240654e4 <_raise_r+0x4c>
240654ce:	1c59      	adds	r1, r3, #1
240654d0:	d103      	bne.n	240654da <_raise_r+0x42>
240654d2:	2316      	movs	r3, #22
240654d4:	6003      	str	r3, [r0, #0]
240654d6:	2001      	movs	r0, #1
240654d8:	e7e7      	b.n	240654aa <_raise_r+0x12>
240654da:	2100      	movs	r1, #0
240654dc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
240654e0:	4620      	mov	r0, r4
240654e2:	4798      	blx	r3
240654e4:	2000      	movs	r0, #0
240654e6:	e7e0      	b.n	240654aa <_raise_r+0x12>

240654e8 <raise>:
240654e8:	4b02      	ldr	r3, [pc, #8]	@ (240654f4 <raise+0xc>)
240654ea:	4601      	mov	r1, r0
240654ec:	6818      	ldr	r0, [r3, #0]
240654ee:	f7ff bfd3 	b.w	24065498 <_raise_r>
240654f2:	bf00      	nop
240654f4:	200000fc 	.word	0x200000fc

240654f8 <_fstat_r>:
240654f8:	b538      	push	{r3, r4, r5, lr}
240654fa:	4d07      	ldr	r5, [pc, #28]	@ (24065518 <_fstat_r+0x20>)
240654fc:	2300      	movs	r3, #0
240654fe:	4604      	mov	r4, r0
24065500:	4608      	mov	r0, r1
24065502:	4611      	mov	r1, r2
24065504:	602b      	str	r3, [r5, #0]
24065506:	f7f1 f931 	bl	2405676c <_fstat>
2406550a:	1c43      	adds	r3, r0, #1
2406550c:	d102      	bne.n	24065514 <_fstat_r+0x1c>
2406550e:	682b      	ldr	r3, [r5, #0]
24065510:	b103      	cbz	r3, 24065514 <_fstat_r+0x1c>
24065512:	6023      	str	r3, [r4, #0]
24065514:	bd38      	pop	{r3, r4, r5, pc}
24065516:	bf00      	nop
24065518:	200007c8 	.word	0x200007c8

2406551c <_isatty_r>:
2406551c:	b538      	push	{r3, r4, r5, lr}
2406551e:	4d06      	ldr	r5, [pc, #24]	@ (24065538 <_isatty_r+0x1c>)
24065520:	2300      	movs	r3, #0
24065522:	4604      	mov	r4, r0
24065524:	4608      	mov	r0, r1
24065526:	602b      	str	r3, [r5, #0]
24065528:	f7f1 f930 	bl	2405678c <_isatty>
2406552c:	1c43      	adds	r3, r0, #1
2406552e:	d102      	bne.n	24065536 <_isatty_r+0x1a>
24065530:	682b      	ldr	r3, [r5, #0]
24065532:	b103      	cbz	r3, 24065536 <_isatty_r+0x1a>
24065534:	6023      	str	r3, [r4, #0]
24065536:	bd38      	pop	{r3, r4, r5, pc}
24065538:	200007c8 	.word	0x200007c8

2406553c <_kill_r>:
2406553c:	b538      	push	{r3, r4, r5, lr}
2406553e:	4d07      	ldr	r5, [pc, #28]	@ (2406555c <_kill_r+0x20>)
24065540:	2300      	movs	r3, #0
24065542:	4604      	mov	r4, r0
24065544:	4608      	mov	r0, r1
24065546:	4611      	mov	r1, r2
24065548:	602b      	str	r3, [r5, #0]
2406554a:	f7f1 f8af 	bl	240566ac <_kill>
2406554e:	1c43      	adds	r3, r0, #1
24065550:	d102      	bne.n	24065558 <_kill_r+0x1c>
24065552:	682b      	ldr	r3, [r5, #0]
24065554:	b103      	cbz	r3, 24065558 <_kill_r+0x1c>
24065556:	6023      	str	r3, [r4, #0]
24065558:	bd38      	pop	{r3, r4, r5, pc}
2406555a:	bf00      	nop
2406555c:	200007c8 	.word	0x200007c8

24065560 <_getpid_r>:
24065560:	f7f1 b89c 	b.w	2405669c <_getpid>

24065564 <_init>:
24065564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24065566:	bf00      	nop
24065568:	bcf8      	pop	{r3, r4, r5, r6, r7}
2406556a:	bc08      	pop	{r3}
2406556c:	469e      	mov	lr, r3
2406556e:	4770      	bx	lr

24065570 <_fini>:
24065570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24065572:	bf00      	nop
24065574:	bcf8      	pop	{r3, r4, r5, r6, r7}
24065576:	bc08      	pop	{r3}
24065578:	469e      	mov	lr, r3
2406557a:	4770      	bx	lr
