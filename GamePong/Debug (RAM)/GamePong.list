
GamePong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  24000000  24000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 ._itcram      00000000  00000100  00000100  000400b0  2**0
                  CONTENTS
  2 ._itcram_hot  00000000  00000100  00000100  000400b0  2**0
                  CONTENTS
  3 ._ram_uc      0004b000  240002b0  240002b0  000102ac  2**4
                  ALLOC
  4 ._ram_exec    00000000  24050000  24050000  000400b0  2**0
                  CONTENTS
  5 ._extflash    00000000  90000000  90000000  000400b0  2**0
                  CONTENTS
  6 ._configflash 00000000  900ff000  900ff000  000400b0  2**0
                  CONTENTS
  7 ._ram         00000000  24050000  24050000  000400b0  2**0
                  CONTENTS
  8 ._ahbram      00005f94  30000000  30000000  00050000  2**4
                  ALLOC
  9 .text         000128d4  24050000  24050000  00020000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .rodata       00001a1c  240628d4  240628d4  000328d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .init_array   00000004  240642f0  240642f0  000342f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .fini_array   00000004  240642f4  240642f4  000342f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .data         000000b0  20000000  240642f8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 ._flash_end   00000000  240642f8  240642f8  000400b0  2**0
                  CONTENTS
 15 .bss          000006c0  200000b0  200000b0  000100b0  2**2
                  ALLOC
 16 ._persistent  00000000  20000770  20000770  000400b0  2**0
                  CONTENTS
 17 ._user_heap   00008000  20000770  20000770  000100b0  2**0
                  ALLOC
 18 ._user_stack  00017890  20008770  20008770  000100b0  2**0
                  ALLOC
 19 .ARM.attributes 0000002e  00000000  00000000  000400b0  2**0
                  CONTENTS, READONLY
 20 .comment      00000043  00000000  00000000  000400de  2**0
                  CONTENTS, READONLY
 21 .debug_info   00028b4d  00000000  00000000  00040121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_abbrev 00004e8a  00000000  00000000  00068c6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_aranges 000020d0  00000000  00000000  0006daf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_macro  00039cc8  00000000  00000000  0006fbc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line   0002de6f  00000000  00000000  000a9890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_str    0016b507  00000000  00000000  000d76ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_rnglists 00001938  00000000  00000000  00242c06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_frame  00009710  00000000  00000000  00244540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_line_str 00000064  00000000  00000000  0024dc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

24050000 <__do_global_dtors_aux>:
24050000:	b510      	push	{r4, lr}
24050002:	4c05      	ldr	r4, [pc, #20]	; (24050018 <__do_global_dtors_aux+0x18>)
24050004:	7823      	ldrb	r3, [r4, #0]
24050006:	b933      	cbnz	r3, 24050016 <__do_global_dtors_aux+0x16>
24050008:	4b04      	ldr	r3, [pc, #16]	; (2405001c <__do_global_dtors_aux+0x1c>)
2405000a:	b113      	cbz	r3, 24050012 <__do_global_dtors_aux+0x12>
2405000c:	4804      	ldr	r0, [pc, #16]	; (24050020 <__do_global_dtors_aux+0x20>)
2405000e:	f3af 8000 	nop.w
24050012:	2301      	movs	r3, #1
24050014:	7023      	strb	r3, [r4, #0]
24050016:	bd10      	pop	{r4, pc}
24050018:	200000b0 	.word	0x200000b0
2405001c:	00000000 	.word	0x00000000
24050020:	240628bc 	.word	0x240628bc

24050024 <frame_dummy>:
24050024:	b508      	push	{r3, lr}
24050026:	4b03      	ldr	r3, [pc, #12]	; (24050034 <frame_dummy+0x10>)
24050028:	b11b      	cbz	r3, 24050032 <frame_dummy+0xe>
2405002a:	4903      	ldr	r1, [pc, #12]	; (24050038 <frame_dummy+0x14>)
2405002c:	4803      	ldr	r0, [pc, #12]	; (2405003c <frame_dummy+0x18>)
2405002e:	f3af 8000 	nop.w
24050032:	bd08      	pop	{r3, pc}
24050034:	00000000 	.word	0x00000000
24050038:	200000b4 	.word	0x200000b4
2405003c:	240628bc 	.word	0x240628bc

24050040 <memchr>:
24050040:	f001 01ff 	and.w	r1, r1, #255	; 0xff
24050044:	2a10      	cmp	r2, #16
24050046:	db2b      	blt.n	240500a0 <memchr+0x60>
24050048:	f010 0f07 	tst.w	r0, #7
2405004c:	d008      	beq.n	24050060 <memchr+0x20>
2405004e:	f810 3b01 	ldrb.w	r3, [r0], #1
24050052:	3a01      	subs	r2, #1
24050054:	428b      	cmp	r3, r1
24050056:	d02d      	beq.n	240500b4 <memchr+0x74>
24050058:	f010 0f07 	tst.w	r0, #7
2405005c:	b342      	cbz	r2, 240500b0 <memchr+0x70>
2405005e:	d1f6      	bne.n	2405004e <memchr+0xe>
24050060:	b4f0      	push	{r4, r5, r6, r7}
24050062:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
24050066:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
2405006a:	f022 0407 	bic.w	r4, r2, #7
2405006e:	f07f 0700 	mvns.w	r7, #0
24050072:	2300      	movs	r3, #0
24050074:	e8f0 5602 	ldrd	r5, r6, [r0], #8
24050078:	3c08      	subs	r4, #8
2405007a:	ea85 0501 	eor.w	r5, r5, r1
2405007e:	ea86 0601 	eor.w	r6, r6, r1
24050082:	fa85 f547 	uadd8	r5, r5, r7
24050086:	faa3 f587 	sel	r5, r3, r7
2405008a:	fa86 f647 	uadd8	r6, r6, r7
2405008e:	faa5 f687 	sel	r6, r5, r7
24050092:	b98e      	cbnz	r6, 240500b8 <memchr+0x78>
24050094:	d1ee      	bne.n	24050074 <memchr+0x34>
24050096:	bcf0      	pop	{r4, r5, r6, r7}
24050098:	f001 01ff 	and.w	r1, r1, #255	; 0xff
2405009c:	f002 0207 	and.w	r2, r2, #7
240500a0:	b132      	cbz	r2, 240500b0 <memchr+0x70>
240500a2:	f810 3b01 	ldrb.w	r3, [r0], #1
240500a6:	3a01      	subs	r2, #1
240500a8:	ea83 0301 	eor.w	r3, r3, r1
240500ac:	b113      	cbz	r3, 240500b4 <memchr+0x74>
240500ae:	d1f8      	bne.n	240500a2 <memchr+0x62>
240500b0:	2000      	movs	r0, #0
240500b2:	4770      	bx	lr
240500b4:	3801      	subs	r0, #1
240500b6:	4770      	bx	lr
240500b8:	2d00      	cmp	r5, #0
240500ba:	bf06      	itte	eq
240500bc:	4635      	moveq	r5, r6
240500be:	3803      	subeq	r0, #3
240500c0:	3807      	subne	r0, #7
240500c2:	f015 0f01 	tst.w	r5, #1
240500c6:	d107      	bne.n	240500d8 <memchr+0x98>
240500c8:	3001      	adds	r0, #1
240500ca:	f415 7f80 	tst.w	r5, #256	; 0x100
240500ce:	bf02      	ittt	eq
240500d0:	3001      	addeq	r0, #1
240500d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
240500d6:	3001      	addeq	r0, #1
240500d8:	bcf0      	pop	{r4, r5, r6, r7}
240500da:	3801      	subs	r0, #1
240500dc:	4770      	bx	lr
240500de:	bf00      	nop

240500e0 <gw_audio_init>:
Generator gen3;
Noise noise1;

static uint32_t audio_frame = 0;

void gw_audio_init(void) {
240500e0:	b580      	push	{r7, lr}
240500e2:	b082      	sub	sp, #8
240500e4:	af00      	add	r7, sp, #0
	memset(audiobuffer, 0, sizeof(audiobuffer));
240500e6:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
240500ea:	2100      	movs	r1, #0
240500ec:	4853      	ldr	r0, [pc, #332]	; (2405023c <gw_audio_init+0x15c>)
240500ee:	f011 fc51 	bl	24061994 <memset>
	HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t*) audiobuffer,
240500f2:	f44f 6216 	mov.w	r2, #2400	; 0x960
240500f6:	4951      	ldr	r1, [pc, #324]	; (2405023c <gw_audio_init+0x15c>)
240500f8:	4851      	ldr	r0, [pc, #324]	; (24050240 <gw_audio_init+0x160>)
240500fa:	f00f fbbf 	bl	2405f87c <HAL_SAI_Transmit_DMA>
	AUDIO_BUFFER_LENGTH);
	int i;
	for (i = 0; i < AUDIO_PROGRAMMABLE_LENGTH; i++) {
240500fe:	2300      	movs	r3, #0
24050100:	607b      	str	r3, [r7, #4]
24050102:	e040      	b.n	24050186 <gw_audio_init+0xa6>
		(&gen1)->gen_freq[i] = 0;
24050104:	4a4f      	ldr	r2, [pc, #316]	; (24050244 <gw_audio_init+0x164>)
24050106:	687b      	ldr	r3, [r7, #4]
24050108:	4413      	add	r3, r2
2405010a:	2200      	movs	r2, #0
2405010c:	701a      	strb	r2, [r3, #0]
		(&gen1)->gen_duty[i] = PW_HALF;
2405010e:	4a4d      	ldr	r2, [pc, #308]	; (24050244 <gw_audio_init+0x164>)
24050110:	687b      	ldr	r3, [r7, #4]
24050112:	4413      	add	r3, r2
24050114:	3350      	adds	r3, #80	; 0x50
24050116:	2201      	movs	r2, #1
24050118:	701a      	strb	r2, [r3, #0]
		(&gen1)->gen_vol[i] = (uint8_t) 0;
2405011a:	4a4a      	ldr	r2, [pc, #296]	; (24050244 <gw_audio_init+0x164>)
2405011c:	687b      	ldr	r3, [r7, #4]
2405011e:	4413      	add	r3, r2
24050120:	3328      	adds	r3, #40	; 0x28
24050122:	2200      	movs	r2, #0
24050124:	701a      	strb	r2, [r3, #0]

		(&gen2)->gen_freq[i] = 0;
24050126:	4a48      	ldr	r2, [pc, #288]	; (24050248 <gw_audio_init+0x168>)
24050128:	687b      	ldr	r3, [r7, #4]
2405012a:	4413      	add	r3, r2
2405012c:	2200      	movs	r2, #0
2405012e:	701a      	strb	r2, [r3, #0]
		(&gen2)->gen_duty[i] = PW_HALF;
24050130:	4a45      	ldr	r2, [pc, #276]	; (24050248 <gw_audio_init+0x168>)
24050132:	687b      	ldr	r3, [r7, #4]
24050134:	4413      	add	r3, r2
24050136:	3350      	adds	r3, #80	; 0x50
24050138:	2201      	movs	r2, #1
2405013a:	701a      	strb	r2, [r3, #0]
		(&gen2)->gen_vol[i] = (uint8_t) 0;
2405013c:	4a42      	ldr	r2, [pc, #264]	; (24050248 <gw_audio_init+0x168>)
2405013e:	687b      	ldr	r3, [r7, #4]
24050140:	4413      	add	r3, r2
24050142:	3328      	adds	r3, #40	; 0x28
24050144:	2200      	movs	r2, #0
24050146:	701a      	strb	r2, [r3, #0]

		(&gen3)->gen_freq[i] = 0;
24050148:	4a40      	ldr	r2, [pc, #256]	; (2405024c <gw_audio_init+0x16c>)
2405014a:	687b      	ldr	r3, [r7, #4]
2405014c:	4413      	add	r3, r2
2405014e:	2200      	movs	r2, #0
24050150:	701a      	strb	r2, [r3, #0]
		(&gen3)->gen_duty[i] = PW_HALF;
24050152:	4a3e      	ldr	r2, [pc, #248]	; (2405024c <gw_audio_init+0x16c>)
24050154:	687b      	ldr	r3, [r7, #4]
24050156:	4413      	add	r3, r2
24050158:	3350      	adds	r3, #80	; 0x50
2405015a:	2201      	movs	r2, #1
2405015c:	701a      	strb	r2, [r3, #0]
		(&gen3)->gen_vol[i] = (uint8_t) 0;
2405015e:	4a3b      	ldr	r2, [pc, #236]	; (2405024c <gw_audio_init+0x16c>)
24050160:	687b      	ldr	r3, [r7, #4]
24050162:	4413      	add	r3, r2
24050164:	3328      	adds	r3, #40	; 0x28
24050166:	2200      	movs	r2, #0
24050168:	701a      	strb	r2, [r3, #0]

		(&noise1)->noise_freq[i] = 0;
2405016a:	4a39      	ldr	r2, [pc, #228]	; (24050250 <gw_audio_init+0x170>)
2405016c:	687b      	ldr	r3, [r7, #4]
2405016e:	4413      	add	r3, r2
24050170:	2200      	movs	r2, #0
24050172:	701a      	strb	r2, [r3, #0]
		(&noise1)->noise_vol[i] = (uint8_t) 0;
24050174:	4a36      	ldr	r2, [pc, #216]	; (24050250 <gw_audio_init+0x170>)
24050176:	687b      	ldr	r3, [r7, #4]
24050178:	4413      	add	r3, r2
2405017a:	3328      	adds	r3, #40	; 0x28
2405017c:	2200      	movs	r2, #0
2405017e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < AUDIO_PROGRAMMABLE_LENGTH; i++) {
24050180:	687b      	ldr	r3, [r7, #4]
24050182:	3301      	adds	r3, #1
24050184:	607b      	str	r3, [r7, #4]
24050186:	687b      	ldr	r3, [r7, #4]
24050188:	2b27      	cmp	r3, #39	; 0x27
2405018a:	ddbb      	ble.n	24050104 <gw_audio_init+0x24>
	}

	(&gen1)->samples_high = 0;
2405018c:	4b2d      	ldr	r3, [pc, #180]	; (24050244 <gw_audio_init+0x164>)
2405018e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
24050192:	2200      	movs	r2, #0
24050194:	f8a3 2338 	strh.w	r2, [r3, #824]	; 0x338
	(&gen1)->samples_low = 0;
24050198:	4b2a      	ldr	r3, [pc, #168]	; (24050244 <gw_audio_init+0x164>)
2405019a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
2405019e:	2200      	movs	r2, #0
240501a0:	f8a3 233a 	strh.w	r2, [r3, #826]	; 0x33a
	(&gen1)->samples_high = 0;
240501a4:	4b27      	ldr	r3, [pc, #156]	; (24050244 <gw_audio_init+0x164>)
240501a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
240501aa:	2200      	movs	r2, #0
240501ac:	f8a3 2338 	strh.w	r2, [r3, #824]	; 0x338
	(&gen1)->samples_low = 0;
240501b0:	4b24      	ldr	r3, [pc, #144]	; (24050244 <gw_audio_init+0x164>)
240501b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
240501b6:	2200      	movs	r2, #0
240501b8:	f8a3 233a 	strh.w	r2, [r3, #826]	; 0x33a
	(&gen1)->samples_high = 0;
240501bc:	4b21      	ldr	r3, [pc, #132]	; (24050244 <gw_audio_init+0x164>)
240501be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
240501c2:	2200      	movs	r2, #0
240501c4:	f8a3 2338 	strh.w	r2, [r3, #824]	; 0x338
	(&gen1)->samples_low = 0;
240501c8:	4b1e      	ldr	r3, [pc, #120]	; (24050244 <gw_audio_init+0x164>)
240501ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
240501ce:	2200      	movs	r2, #0
240501d0:	f8a3 233a 	strh.w	r2, [r3, #826]	; 0x33a
	(&noise1)->LFSR = 1;
240501d4:	4b1e      	ldr	r3, [pc, #120]	; (24050250 <gw_audio_init+0x170>)
240501d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
240501da:	2201      	movs	r2, #1
240501dc:	f8a3 2310 	strh.w	r2, [r3, #784]	; 0x310
	(&noise1)->last = 0;
240501e0:	4b1b      	ldr	r3, [pc, #108]	; (24050250 <gw_audio_init+0x170>)
240501e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
240501e6:	2200      	movs	r2, #0
240501e8:	f8a3 2312 	strh.w	r2, [r3, #786]	; 0x312

	for (i = 0; i < AUDIO_BUFFER_LENGTH; i++) {
240501ec:	2300      	movs	r3, #0
240501ee:	607b      	str	r3, [r7, #4]
240501f0:	e01a      	b.n	24050228 <gw_audio_init+0x148>
		(&gen1)->audiobuffer[i] = 0;
240501f2:	4a14      	ldr	r2, [pc, #80]	; (24050244 <gw_audio_init+0x164>)
240501f4:	687b      	ldr	r3, [r7, #4]
240501f6:	333c      	adds	r3, #60	; 0x3c
240501f8:	2100      	movs	r1, #0
240501fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		(&gen2)->audiobuffer[i] = 0;
240501fe:	4a12      	ldr	r2, [pc, #72]	; (24050248 <gw_audio_init+0x168>)
24050200:	687b      	ldr	r3, [r7, #4]
24050202:	333c      	adds	r3, #60	; 0x3c
24050204:	2100      	movs	r1, #0
24050206:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		(&gen3)->audiobuffer[i] = 0;
2405020a:	4a10      	ldr	r2, [pc, #64]	; (2405024c <gw_audio_init+0x16c>)
2405020c:	687b      	ldr	r3, [r7, #4]
2405020e:	333c      	adds	r3, #60	; 0x3c
24050210:	2100      	movs	r1, #0
24050212:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		(&noise1)->audiobuffer[i] = 0;
24050216:	4a0e      	ldr	r2, [pc, #56]	; (24050250 <gw_audio_init+0x170>)
24050218:	687b      	ldr	r3, [r7, #4]
2405021a:	3328      	adds	r3, #40	; 0x28
2405021c:	2100      	movs	r1, #0
2405021e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i = 0; i < AUDIO_BUFFER_LENGTH; i++) {
24050222:	687b      	ldr	r3, [r7, #4]
24050224:	3301      	adds	r3, #1
24050226:	607b      	str	r3, [r7, #4]
24050228:	687b      	ldr	r3, [r7, #4]
2405022a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
2405022e:	dbe0      	blt.n	240501f2 <gw_audio_init+0x112>
	}
}
24050230:	bf00      	nop
24050232:	bf00      	nop
24050234:	3708      	adds	r7, #8
24050236:	46bd      	mov	sp, r7
24050238:	bd80      	pop	{r7, pc}
2405023a:	bf00      	nop
2405023c:	30000000 	.word	0x30000000
24050240:	20000430 	.word	0x20000430
24050244:	300012c0 	.word	0x300012c0
24050248:	30002600 	.word	0x30002600
2405024c:	30003940 	.word	0x30003940
24050250:	30004c80 	.word	0x30004c80

24050254 <HAL_SAI_TxHalfCpltCallback>:

void gw_audio_resume(void) {
	HAL_SAI_DMAResume(&hsai_BlockA1);
}

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
24050254:	b580      	push	{r7, lr}
24050256:	b084      	sub	sp, #16
24050258:	af00      	add	r7, sp, #0
2405025a:	6078      	str	r0, [r7, #4]
	move_generator(&gen1);
2405025c:	4829      	ldr	r0, [pc, #164]	; (24050304 <HAL_SAI_TxHalfCpltCallback+0xb0>)
2405025e:	f000 f96f 	bl	24050540 <move_generator>
	play_generator(&gen1, 0, AUDIO_BUFFER_LENGTH / 2);
24050262:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
24050266:	2100      	movs	r1, #0
24050268:	4826      	ldr	r0, [pc, #152]	; (24050304 <HAL_SAI_TxHalfCpltCallback+0xb0>)
2405026a:	f000 f8b7 	bl	240503dc <play_generator>
	move_generator(&gen2);
2405026e:	4826      	ldr	r0, [pc, #152]	; (24050308 <HAL_SAI_TxHalfCpltCallback+0xb4>)
24050270:	f000 f966 	bl	24050540 <move_generator>
	play_generator(&gen2, 0, AUDIO_BUFFER_LENGTH / 2);
24050274:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
24050278:	2100      	movs	r1, #0
2405027a:	4823      	ldr	r0, [pc, #140]	; (24050308 <HAL_SAI_TxHalfCpltCallback+0xb4>)
2405027c:	f000 f8ae 	bl	240503dc <play_generator>
	move_generator(&gen3);
24050280:	4822      	ldr	r0, [pc, #136]	; (2405030c <HAL_SAI_TxHalfCpltCallback+0xb8>)
24050282:	f000 f95d 	bl	24050540 <move_generator>
	play_generator(&gen3, 0, AUDIO_BUFFER_LENGTH / 2);
24050286:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
2405028a:	2100      	movs	r1, #0
2405028c:	481f      	ldr	r0, [pc, #124]	; (2405030c <HAL_SAI_TxHalfCpltCallback+0xb8>)
2405028e:	f000 f8a5 	bl	240503dc <play_generator>
	move_noise(&noise1);
24050292:	481f      	ldr	r0, [pc, #124]	; (24050310 <HAL_SAI_TxHalfCpltCallback+0xbc>)
24050294:	f000 fa51 	bl	2405073a <move_noise>
	play_noise(&noise1, 0, AUDIO_BUFFER_LENGTH / 2);
24050298:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
2405029c:	2100      	movs	r1, #0
2405029e:	481c      	ldr	r0, [pc, #112]	; (24050310 <HAL_SAI_TxHalfCpltCallback+0xbc>)
240502a0:	f000 f9b9 	bl	24050616 <play_noise>
	int i;
	for (i = 0; i < AUDIO_BUFFER_LENGTH / 2; i++) {
240502a4:	2300      	movs	r3, #0
240502a6:	60fb      	str	r3, [r7, #12]
240502a8:	e022      	b.n	240502f0 <HAL_SAI_TxHalfCpltCallback+0x9c>
		audiobuffer[i] = 4
				* (gen1.audiobuffer[i] + gen2.audiobuffer[i]
240502aa:	4a16      	ldr	r2, [pc, #88]	; (24050304 <HAL_SAI_TxHalfCpltCallback+0xb0>)
240502ac:	68fb      	ldr	r3, [r7, #12]
240502ae:	333c      	adds	r3, #60	; 0x3c
240502b0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
240502b4:	4619      	mov	r1, r3
240502b6:	4a14      	ldr	r2, [pc, #80]	; (24050308 <HAL_SAI_TxHalfCpltCallback+0xb4>)
240502b8:	68fb      	ldr	r3, [r7, #12]
240502ba:	333c      	adds	r3, #60	; 0x3c
240502bc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
240502c0:	440b      	add	r3, r1
						+ gen3.audiobuffer[i] + noise1.audiobuffer[i]);
240502c2:	4912      	ldr	r1, [pc, #72]	; (2405030c <HAL_SAI_TxHalfCpltCallback+0xb8>)
240502c4:	68fa      	ldr	r2, [r7, #12]
240502c6:	323c      	adds	r2, #60	; 0x3c
240502c8:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
240502cc:	4413      	add	r3, r2
240502ce:	4910      	ldr	r1, [pc, #64]	; (24050310 <HAL_SAI_TxHalfCpltCallback+0xbc>)
240502d0:	68fa      	ldr	r2, [r7, #12]
240502d2:	3228      	adds	r2, #40	; 0x28
240502d4:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
240502d8:	4413      	add	r3, r2
		audiobuffer[i] = 4
240502da:	b29b      	uxth	r3, r3
240502dc:	009b      	lsls	r3, r3, #2
240502de:	b29b      	uxth	r3, r3
240502e0:	b219      	sxth	r1, r3
240502e2:	4a0c      	ldr	r2, [pc, #48]	; (24050314 <HAL_SAI_TxHalfCpltCallback+0xc0>)
240502e4:	68fb      	ldr	r3, [r7, #12]
240502e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i = 0; i < AUDIO_BUFFER_LENGTH / 2; i++) {
240502ea:	68fb      	ldr	r3, [r7, #12]
240502ec:	3301      	adds	r3, #1
240502ee:	60fb      	str	r3, [r7, #12]
240502f0:	68fb      	ldr	r3, [r7, #12]
240502f2:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
240502f6:	dbd8      	blt.n	240502aa <HAL_SAI_TxHalfCpltCallback+0x56>
	}
}
240502f8:	bf00      	nop
240502fa:	bf00      	nop
240502fc:	3710      	adds	r7, #16
240502fe:	46bd      	mov	sp, r7
24050300:	bd80      	pop	{r7, pc}
24050302:	bf00      	nop
24050304:	300012c0 	.word	0x300012c0
24050308:	30002600 	.word	0x30002600
2405030c:	30003940 	.word	0x30003940
24050310:	30004c80 	.word	0x30004c80
24050314:	30000000 	.word	0x30000000

24050318 <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai) {
24050318:	b580      	push	{r7, lr}
2405031a:	b084      	sub	sp, #16
2405031c:	af00      	add	r7, sp, #0
2405031e:	6078      	str	r0, [r7, #4]
	audio_frame++;
24050320:	4b28      	ldr	r3, [pc, #160]	; (240503c4 <HAL_SAI_TxCpltCallback+0xac>)
24050322:	681b      	ldr	r3, [r3, #0]
24050324:	3301      	adds	r3, #1
24050326:	4a27      	ldr	r2, [pc, #156]	; (240503c4 <HAL_SAI_TxCpltCallback+0xac>)
24050328:	6013      	str	r3, [r2, #0]
	play_generator(&gen1, AUDIO_BUFFER_LENGTH / 2, AUDIO_BUFFER_LENGTH / 2);
2405032a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
2405032e:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
24050332:	4825      	ldr	r0, [pc, #148]	; (240503c8 <HAL_SAI_TxCpltCallback+0xb0>)
24050334:	f000 f852 	bl	240503dc <play_generator>
	play_generator(&gen2, AUDIO_BUFFER_LENGTH / 2, AUDIO_BUFFER_LENGTH / 2);
24050338:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
2405033c:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
24050340:	4822      	ldr	r0, [pc, #136]	; (240503cc <HAL_SAI_TxCpltCallback+0xb4>)
24050342:	f000 f84b 	bl	240503dc <play_generator>
	play_generator(&gen3, AUDIO_BUFFER_LENGTH / 2, AUDIO_BUFFER_LENGTH / 2);
24050346:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
2405034a:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
2405034e:	4820      	ldr	r0, [pc, #128]	; (240503d0 <HAL_SAI_TxCpltCallback+0xb8>)
24050350:	f000 f844 	bl	240503dc <play_generator>
	play_noise(&noise1, AUDIO_BUFFER_LENGTH / 2, AUDIO_BUFFER_LENGTH / 2);
24050354:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
24050358:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
2405035c:	481d      	ldr	r0, [pc, #116]	; (240503d4 <HAL_SAI_TxCpltCallback+0xbc>)
2405035e:	f000 f95a 	bl	24050616 <play_noise>
	int i;
	for (i = AUDIO_BUFFER_LENGTH / 2; i < AUDIO_BUFFER_LENGTH; i++) {
24050362:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
24050366:	60fb      	str	r3, [r7, #12]
24050368:	e022      	b.n	240503b0 <HAL_SAI_TxCpltCallback+0x98>
		audiobuffer[i] = 2
				* (gen1.audiobuffer[i] + gen2.audiobuffer[i]
2405036a:	4a17      	ldr	r2, [pc, #92]	; (240503c8 <HAL_SAI_TxCpltCallback+0xb0>)
2405036c:	68fb      	ldr	r3, [r7, #12]
2405036e:	333c      	adds	r3, #60	; 0x3c
24050370:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
24050374:	4619      	mov	r1, r3
24050376:	4a15      	ldr	r2, [pc, #84]	; (240503cc <HAL_SAI_TxCpltCallback+0xb4>)
24050378:	68fb      	ldr	r3, [r7, #12]
2405037a:	333c      	adds	r3, #60	; 0x3c
2405037c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
24050380:	440b      	add	r3, r1
						+ gen3.audiobuffer[i] + noise1.audiobuffer[i]);
24050382:	4913      	ldr	r1, [pc, #76]	; (240503d0 <HAL_SAI_TxCpltCallback+0xb8>)
24050384:	68fa      	ldr	r2, [r7, #12]
24050386:	323c      	adds	r2, #60	; 0x3c
24050388:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
2405038c:	4413      	add	r3, r2
2405038e:	4911      	ldr	r1, [pc, #68]	; (240503d4 <HAL_SAI_TxCpltCallback+0xbc>)
24050390:	68fa      	ldr	r2, [r7, #12]
24050392:	3228      	adds	r2, #40	; 0x28
24050394:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
24050398:	4413      	add	r3, r2
		audiobuffer[i] = 2
2405039a:	b29b      	uxth	r3, r3
2405039c:	005b      	lsls	r3, r3, #1
2405039e:	b29b      	uxth	r3, r3
240503a0:	b219      	sxth	r1, r3
240503a2:	4a0d      	ldr	r2, [pc, #52]	; (240503d8 <HAL_SAI_TxCpltCallback+0xc0>)
240503a4:	68fb      	ldr	r3, [r7, #12]
240503a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i = AUDIO_BUFFER_LENGTH / 2; i < AUDIO_BUFFER_LENGTH; i++) {
240503aa:	68fb      	ldr	r3, [r7, #12]
240503ac:	3301      	adds	r3, #1
240503ae:	60fb      	str	r3, [r7, #12]
240503b0:	68fb      	ldr	r3, [r7, #12]
240503b2:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
240503b6:	dbd8      	blt.n	2405036a <HAL_SAI_TxCpltCallback+0x52>
	}
}
240503b8:	bf00      	nop
240503ba:	bf00      	nop
240503bc:	3710      	adds	r7, #16
240503be:	46bd      	mov	sp, r7
240503c0:	bd80      	pop	{r7, pc}
240503c2:	bf00      	nop
240503c4:	200000cc 	.word	0x200000cc
240503c8:	300012c0 	.word	0x300012c0
240503cc:	30002600 	.word	0x30002600
240503d0:	30003940 	.word	0x30003940
240503d4:	30004c80 	.word	0x30004c80
240503d8:	30000000 	.word	0x30000000

240503dc <play_generator>:

void play_generator(Generator *gen, int start, int len) {
240503dc:	b480      	push	{r7}
240503de:	b089      	sub	sp, #36	; 0x24
240503e0:	af00      	add	r7, sp, #0
240503e2:	60f8      	str	r0, [r7, #12]
240503e4:	60b9      	str	r1, [r7, #8]
240503e6:	607a      	str	r2, [r7, #4]
	int i;
	uint8_t freq = (*gen).gen_freq[0];
240503e8:	68fb      	ldr	r3, [r7, #12]
240503ea:	781b      	ldrb	r3, [r3, #0]
240503ec:	74fb      	strb	r3, [r7, #19]
	if (freq == 0) {
240503ee:	7cfb      	ldrb	r3, [r7, #19]
240503f0:	2b00      	cmp	r3, #0
240503f2:	d112      	bne.n	2405041a <play_generator+0x3e>
		for (i = start; i < start + len; i++) {
240503f4:	68bb      	ldr	r3, [r7, #8]
240503f6:	61fb      	str	r3, [r7, #28]
240503f8:	e008      	b.n	2405040c <play_generator+0x30>
			gen->audiobuffer[i] = 0;
240503fa:	68fb      	ldr	r3, [r7, #12]
240503fc:	69fa      	ldr	r2, [r7, #28]
240503fe:	323c      	adds	r2, #60	; 0x3c
24050400:	2100      	movs	r1, #0
24050402:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (i = start; i < start + len; i++) {
24050406:	69fb      	ldr	r3, [r7, #28]
24050408:	3301      	adds	r3, #1
2405040a:	61fb      	str	r3, [r7, #28]
2405040c:	68ba      	ldr	r2, [r7, #8]
2405040e:	687b      	ldr	r3, [r7, #4]
24050410:	4413      	add	r3, r2
24050412:	69fa      	ldr	r2, [r7, #28]
24050414:	429a      	cmp	r2, r3
24050416:	dbf0      	blt.n	240503fa <play_generator+0x1e>
		}
		return;
24050418:	e08d      	b.n	24050536 <play_generator+0x15a>
	}
	uint8_t duty = (*gen).gen_duty[0];
2405041a:	68fb      	ldr	r3, [r7, #12]
2405041c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
24050420:	74bb      	strb	r3, [r7, #18]
	uint16_t samples_high;
	uint16_t samples_low;
	switch (duty) {
24050422:	7cbb      	ldrb	r3, [r7, #18]
24050424:	2b02      	cmp	r3, #2
24050426:	d018      	beq.n	2405045a <play_generator+0x7e>
24050428:	2b02      	cmp	r3, #2
2405042a:	dc1f      	bgt.n	2405046c <play_generator+0x90>
2405042c:	2b00      	cmp	r3, #0
2405042e:	d002      	beq.n	24050436 <play_generator+0x5a>
24050430:	2b01      	cmp	r3, #1
24050432:	d009      	beq.n	24050448 <play_generator+0x6c>
24050434:	e01a      	b.n	2405046c <play_generator+0x90>
	case PW_SHORT:
		samples_high = 1 * (uint16_t) freq;
24050436:	7cfb      	ldrb	r3, [r7, #19]
24050438:	837b      	strh	r3, [r7, #26]
		samples_low = 3 * (uint16_t) freq;
2405043a:	7cfb      	ldrb	r3, [r7, #19]
2405043c:	b29b      	uxth	r3, r3
2405043e:	461a      	mov	r2, r3
24050440:	0052      	lsls	r2, r2, #1
24050442:	4413      	add	r3, r2
24050444:	833b      	strh	r3, [r7, #24]
		break;
24050446:	e01a      	b.n	2405047e <play_generator+0xa2>
	case PW_HALF:
		samples_high = 2 * (uint16_t) freq;
24050448:	7cfb      	ldrb	r3, [r7, #19]
2405044a:	b29b      	uxth	r3, r3
2405044c:	005b      	lsls	r3, r3, #1
2405044e:	837b      	strh	r3, [r7, #26]
		samples_low = 2 * (uint16_t) freq;
24050450:	7cfb      	ldrb	r3, [r7, #19]
24050452:	b29b      	uxth	r3, r3
24050454:	005b      	lsls	r3, r3, #1
24050456:	833b      	strh	r3, [r7, #24]
		break;
24050458:	e011      	b.n	2405047e <play_generator+0xa2>
	case PW_LONG:
		samples_high = 3 * (uint16_t) freq;
2405045a:	7cfb      	ldrb	r3, [r7, #19]
2405045c:	b29b      	uxth	r3, r3
2405045e:	461a      	mov	r2, r3
24050460:	0052      	lsls	r2, r2, #1
24050462:	4413      	add	r3, r2
24050464:	837b      	strh	r3, [r7, #26]
		samples_low = 1 * (uint16_t) freq;
24050466:	7cfb      	ldrb	r3, [r7, #19]
24050468:	833b      	strh	r3, [r7, #24]
		break;
2405046a:	e008      	b.n	2405047e <play_generator+0xa2>
	default:
		samples_high = 2 * (uint16_t) freq;
2405046c:	7cfb      	ldrb	r3, [r7, #19]
2405046e:	b29b      	uxth	r3, r3
24050470:	005b      	lsls	r3, r3, #1
24050472:	837b      	strh	r3, [r7, #26]
		samples_low = 2 * (uint16_t) freq;
24050474:	7cfb      	ldrb	r3, [r7, #19]
24050476:	b29b      	uxth	r3, r3
24050478:	005b      	lsls	r3, r3, #1
2405047a:	833b      	strh	r3, [r7, #24]
		break;
2405047c:	bf00      	nop
	}
	uint8_t vol = (*gen).gen_vol[0];
2405047e:	68fb      	ldr	r3, [r7, #12]
24050480:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
24050484:	747b      	strb	r3, [r7, #17]
	uint16_t counter_high = (*gen).samples_high;
24050486:	68fb      	ldr	r3, [r7, #12]
24050488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
2405048c:	f8b3 3338 	ldrh.w	r3, [r3, #824]	; 0x338
24050490:	82fb      	strh	r3, [r7, #22]
	uint16_t counter_low = (*gen).samples_low;
24050492:	68fb      	ldr	r3, [r7, #12]
24050494:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
24050498:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
2405049c:	82bb      	strh	r3, [r7, #20]

	if (counter_high > samples_high) {
2405049e:	8afa      	ldrh	r2, [r7, #22]
240504a0:	8b7b      	ldrh	r3, [r7, #26]
240504a2:	429a      	cmp	r2, r3
240504a4:	d901      	bls.n	240504aa <play_generator+0xce>
		counter_high = samples_high;
240504a6:	8b7b      	ldrh	r3, [r7, #26]
240504a8:	82fb      	strh	r3, [r7, #22]
	}
	if (counter_low > samples_low) {
240504aa:	8aba      	ldrh	r2, [r7, #20]
240504ac:	8b3b      	ldrh	r3, [r7, #24]
240504ae:	429a      	cmp	r2, r3
240504b0:	d901      	bls.n	240504b6 <play_generator+0xda>
		counter_low = samples_low;
240504b2:	8b3b      	ldrh	r3, [r7, #24]
240504b4:	82bb      	strh	r3, [r7, #20]
	}

	for (i = start; i < start + len; i++) {
240504b6:	68bb      	ldr	r3, [r7, #8]
240504b8:	61fb      	str	r3, [r7, #28]
240504ba:	e028      	b.n	2405050e <play_generator+0x132>
		if (counter_high > 0) {
240504bc:	8afb      	ldrh	r3, [r7, #22]
240504be:	2b00      	cmp	r3, #0
240504c0:	d00a      	beq.n	240504d8 <play_generator+0xfc>
			gen->audiobuffer[i] = (int16_t) vol;
240504c2:	7c7b      	ldrb	r3, [r7, #17]
240504c4:	b219      	sxth	r1, r3
240504c6:	68fb      	ldr	r3, [r7, #12]
240504c8:	69fa      	ldr	r2, [r7, #28]
240504ca:	323c      	adds	r2, #60	; 0x3c
240504cc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			counter_high--;
240504d0:	8afb      	ldrh	r3, [r7, #22]
240504d2:	3b01      	subs	r3, #1
240504d4:	82fb      	strh	r3, [r7, #22]
240504d6:	e017      	b.n	24050508 <play_generator+0x12c>
		} else {
			if (counter_low > 0) {
240504d8:	8abb      	ldrh	r3, [r7, #20]
240504da:	2b00      	cmp	r3, #0
240504dc:	d00d      	beq.n	240504fa <play_generator+0x11e>
				gen->audiobuffer[i] = -(int16_t) vol;
240504de:	7c7b      	ldrb	r3, [r7, #17]
240504e0:	b29b      	uxth	r3, r3
240504e2:	425b      	negs	r3, r3
240504e4:	b29b      	uxth	r3, r3
240504e6:	b219      	sxth	r1, r3
240504e8:	68fb      	ldr	r3, [r7, #12]
240504ea:	69fa      	ldr	r2, [r7, #28]
240504ec:	323c      	adds	r2, #60	; 0x3c
240504ee:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				counter_low--;
240504f2:	8abb      	ldrh	r3, [r7, #20]
240504f4:	3b01      	subs	r3, #1
240504f6:	82bb      	strh	r3, [r7, #20]
240504f8:	e006      	b.n	24050508 <play_generator+0x12c>
			} else {
				counter_high = samples_high;
240504fa:	8b7b      	ldrh	r3, [r7, #26]
240504fc:	82fb      	strh	r3, [r7, #22]
				counter_low = samples_low;
240504fe:	8b3b      	ldrh	r3, [r7, #24]
24050500:	82bb      	strh	r3, [r7, #20]
				i--;
24050502:	69fb      	ldr	r3, [r7, #28]
24050504:	3b01      	subs	r3, #1
24050506:	61fb      	str	r3, [r7, #28]
	for (i = start; i < start + len; i++) {
24050508:	69fb      	ldr	r3, [r7, #28]
2405050a:	3301      	adds	r3, #1
2405050c:	61fb      	str	r3, [r7, #28]
2405050e:	68ba      	ldr	r2, [r7, #8]
24050510:	687b      	ldr	r3, [r7, #4]
24050512:	4413      	add	r3, r2
24050514:	69fa      	ldr	r2, [r7, #28]
24050516:	429a      	cmp	r2, r3
24050518:	dbd0      	blt.n	240504bc <play_generator+0xe0>
			}
		}
	}
	gen->samples_high = counter_high;
2405051a:	68fb      	ldr	r3, [r7, #12]
2405051c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
24050520:	461a      	mov	r2, r3
24050522:	8afb      	ldrh	r3, [r7, #22]
24050524:	f8a2 3338 	strh.w	r3, [r2, #824]	; 0x338
	gen->samples_low = counter_low;
24050528:	68fb      	ldr	r3, [r7, #12]
2405052a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
2405052e:	461a      	mov	r2, r3
24050530:	8abb      	ldrh	r3, [r7, #20]
24050532:	f8a2 333a 	strh.w	r3, [r2, #826]	; 0x33a
}
24050536:	3724      	adds	r7, #36	; 0x24
24050538:	46bd      	mov	sp, r7
2405053a:	f85d 7b04 	ldr.w	r7, [sp], #4
2405053e:	4770      	bx	lr

24050540 <move_generator>:

void move_generator(Generator *gen) {
24050540:	b480      	push	{r7}
24050542:	b087      	sub	sp, #28
24050544:	af00      	add	r7, sp, #0
24050546:	6078      	str	r0, [r7, #4]
	int i, n = AUDIO_PROGRAMMABLE_LENGTH;
24050548:	2328      	movs	r3, #40	; 0x28
2405054a:	613b      	str	r3, [r7, #16]
	uint8_t *a = gen->gen_freq;
2405054c:	687b      	ldr	r3, [r7, #4]
2405054e:	60fb      	str	r3, [r7, #12]
	uint8_t temp = a[0];
24050550:	68fb      	ldr	r3, [r7, #12]
24050552:	781b      	ldrb	r3, [r3, #0]
24050554:	72fb      	strb	r3, [r7, #11]
	for (i = 0; i < n - 1; i++) {
24050556:	2300      	movs	r3, #0
24050558:	617b      	str	r3, [r7, #20]
2405055a:	e00b      	b.n	24050574 <move_generator+0x34>
		a[i] = a[i + 1];
2405055c:	697b      	ldr	r3, [r7, #20]
2405055e:	3301      	adds	r3, #1
24050560:	68fa      	ldr	r2, [r7, #12]
24050562:	441a      	add	r2, r3
24050564:	697b      	ldr	r3, [r7, #20]
24050566:	68f9      	ldr	r1, [r7, #12]
24050568:	440b      	add	r3, r1
2405056a:	7812      	ldrb	r2, [r2, #0]
2405056c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < n - 1; i++) {
2405056e:	697b      	ldr	r3, [r7, #20]
24050570:	3301      	adds	r3, #1
24050572:	617b      	str	r3, [r7, #20]
24050574:	693b      	ldr	r3, [r7, #16]
24050576:	3b01      	subs	r3, #1
24050578:	697a      	ldr	r2, [r7, #20]
2405057a:	429a      	cmp	r2, r3
2405057c:	dbee      	blt.n	2405055c <move_generator+0x1c>
	}
	a[n - 1] = temp;
2405057e:	693b      	ldr	r3, [r7, #16]
24050580:	3b01      	subs	r3, #1
24050582:	68fa      	ldr	r2, [r7, #12]
24050584:	4413      	add	r3, r2
24050586:	7afa      	ldrb	r2, [r7, #11]
24050588:	701a      	strb	r2, [r3, #0]
	a = gen->gen_vol;
2405058a:	687b      	ldr	r3, [r7, #4]
2405058c:	3328      	adds	r3, #40	; 0x28
2405058e:	60fb      	str	r3, [r7, #12]
	temp = a[0];
24050590:	68fb      	ldr	r3, [r7, #12]
24050592:	781b      	ldrb	r3, [r3, #0]
24050594:	72fb      	strb	r3, [r7, #11]
	for (i = 0; i < n - 1; i++) {
24050596:	2300      	movs	r3, #0
24050598:	617b      	str	r3, [r7, #20]
2405059a:	e00b      	b.n	240505b4 <move_generator+0x74>
		a[i] = a[i + 1];
2405059c:	697b      	ldr	r3, [r7, #20]
2405059e:	3301      	adds	r3, #1
240505a0:	68fa      	ldr	r2, [r7, #12]
240505a2:	441a      	add	r2, r3
240505a4:	697b      	ldr	r3, [r7, #20]
240505a6:	68f9      	ldr	r1, [r7, #12]
240505a8:	440b      	add	r3, r1
240505aa:	7812      	ldrb	r2, [r2, #0]
240505ac:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < n - 1; i++) {
240505ae:	697b      	ldr	r3, [r7, #20]
240505b0:	3301      	adds	r3, #1
240505b2:	617b      	str	r3, [r7, #20]
240505b4:	693b      	ldr	r3, [r7, #16]
240505b6:	3b01      	subs	r3, #1
240505b8:	697a      	ldr	r2, [r7, #20]
240505ba:	429a      	cmp	r2, r3
240505bc:	dbee      	blt.n	2405059c <move_generator+0x5c>
	}
	a[n - 1] = temp;
240505be:	693b      	ldr	r3, [r7, #16]
240505c0:	3b01      	subs	r3, #1
240505c2:	68fa      	ldr	r2, [r7, #12]
240505c4:	4413      	add	r3, r2
240505c6:	7afa      	ldrb	r2, [r7, #11]
240505c8:	701a      	strb	r2, [r3, #0]
	a = gen->gen_duty;
240505ca:	687b      	ldr	r3, [r7, #4]
240505cc:	3350      	adds	r3, #80	; 0x50
240505ce:	60fb      	str	r3, [r7, #12]
	temp = a[0];
240505d0:	68fb      	ldr	r3, [r7, #12]
240505d2:	781b      	ldrb	r3, [r3, #0]
240505d4:	72fb      	strb	r3, [r7, #11]
	for (i = 0; i < n - 1; i++) {
240505d6:	2300      	movs	r3, #0
240505d8:	617b      	str	r3, [r7, #20]
240505da:	e00b      	b.n	240505f4 <move_generator+0xb4>
		a[i] = a[i + 1];
240505dc:	697b      	ldr	r3, [r7, #20]
240505de:	3301      	adds	r3, #1
240505e0:	68fa      	ldr	r2, [r7, #12]
240505e2:	441a      	add	r2, r3
240505e4:	697b      	ldr	r3, [r7, #20]
240505e6:	68f9      	ldr	r1, [r7, #12]
240505e8:	440b      	add	r3, r1
240505ea:	7812      	ldrb	r2, [r2, #0]
240505ec:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < n - 1; i++) {
240505ee:	697b      	ldr	r3, [r7, #20]
240505f0:	3301      	adds	r3, #1
240505f2:	617b      	str	r3, [r7, #20]
240505f4:	693b      	ldr	r3, [r7, #16]
240505f6:	3b01      	subs	r3, #1
240505f8:	697a      	ldr	r2, [r7, #20]
240505fa:	429a      	cmp	r2, r3
240505fc:	dbee      	blt.n	240505dc <move_generator+0x9c>
	}
	a[n - 1] = temp;
240505fe:	693b      	ldr	r3, [r7, #16]
24050600:	3b01      	subs	r3, #1
24050602:	68fa      	ldr	r2, [r7, #12]
24050604:	4413      	add	r3, r2
24050606:	7afa      	ldrb	r2, [r7, #11]
24050608:	701a      	strb	r2, [r3, #0]
}
2405060a:	bf00      	nop
2405060c:	371c      	adds	r7, #28
2405060e:	46bd      	mov	sp, r7
24050610:	f85d 7b04 	ldr.w	r7, [sp], #4
24050614:	4770      	bx	lr

24050616 <play_noise>:

void play_noise(Noise *noise, int start, int len) {
24050616:	b480      	push	{r7}
24050618:	b08b      	sub	sp, #44	; 0x2c
2405061a:	af00      	add	r7, sp, #0
2405061c:	60f8      	str	r0, [r7, #12]
2405061e:	60b9      	str	r1, [r7, #8]
24050620:	607a      	str	r2, [r7, #4]
	int i;
	uint16_t freq = 4 * (uint16_t) (*noise).noise_freq[0];
24050622:	68fb      	ldr	r3, [r7, #12]
24050624:	781b      	ldrb	r3, [r3, #0]
24050626:	b29b      	uxth	r3, r3
24050628:	009b      	lsls	r3, r3, #2
2405062a:	837b      	strh	r3, [r7, #26]
	if (freq == 0) {
2405062c:	8b7b      	ldrh	r3, [r7, #26]
2405062e:	2b00      	cmp	r3, #0
24050630:	d112      	bne.n	24050658 <play_noise+0x42>
		for (i = start; i < start + len; i++) {
24050632:	68bb      	ldr	r3, [r7, #8]
24050634:	627b      	str	r3, [r7, #36]	; 0x24
24050636:	e008      	b.n	2405064a <play_noise+0x34>
			noise->audiobuffer[i] = 0;
24050638:	68fb      	ldr	r3, [r7, #12]
2405063a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2405063c:	3228      	adds	r2, #40	; 0x28
2405063e:	2100      	movs	r1, #0
24050640:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (i = start; i < start + len; i++) {
24050644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24050646:	3301      	adds	r3, #1
24050648:	627b      	str	r3, [r7, #36]	; 0x24
2405064a:	68ba      	ldr	r2, [r7, #8]
2405064c:	687b      	ldr	r3, [r7, #4]
2405064e:	4413      	add	r3, r2
24050650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
24050652:	429a      	cmp	r2, r3
24050654:	dbf0      	blt.n	24050638 <play_noise+0x22>
		}
		return;
24050656:	e06b      	b.n	24050730 <play_noise+0x11a>
	}
	uint8_t vol = (*noise).noise_vol[0];
24050658:	68fb      	ldr	r3, [r7, #12]
2405065a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
2405065e:	767b      	strb	r3, [r7, #25]
	uint16_t LFSR = (*noise).LFSR;
24050660:	68fb      	ldr	r3, [r7, #12]
24050662:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
24050666:	f8b3 3310 	ldrh.w	r3, [r3, #784]	; 0x310
2405066a:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t last = (*noise).last;
2405066c:	68fb      	ldr	r3, [r7, #12]
2405066e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
24050672:	f8b3 3312 	ldrh.w	r3, [r3, #786]	; 0x312
24050676:	843b      	strh	r3, [r7, #32]
	int out = 0;
24050678:	2300      	movs	r3, #0
2405067a:	61fb      	str	r3, [r7, #28]
	if (last > freq) {
2405067c:	8c3a      	ldrh	r2, [r7, #32]
2405067e:	8b7b      	ldrh	r3, [r7, #26]
24050680:	429a      	cmp	r2, r3
24050682:	d901      	bls.n	24050688 <play_noise+0x72>
		last = freq;
24050684:	8b7b      	ldrh	r3, [r7, #26]
24050686:	843b      	strh	r3, [r7, #32]
	}
	for (i = start; i < start + len; i++) {
24050688:	68bb      	ldr	r3, [r7, #8]
2405068a:	627b      	str	r3, [r7, #36]	; 0x24
2405068c:	e03c      	b.n	24050708 <play_noise+0xf2>
		if (last > 0) {
2405068e:	8c3b      	ldrh	r3, [r7, #32]
24050690:	2b00      	cmp	r3, #0
24050692:	d013      	beq.n	240506bc <play_noise+0xa6>
			noise->audiobuffer[i] =
24050694:	69fb      	ldr	r3, [r7, #28]
24050696:	2b01      	cmp	r3, #1
24050698:	d105      	bne.n	240506a6 <play_noise+0x90>
2405069a:	7e7b      	ldrb	r3, [r7, #25]
2405069c:	b29b      	uxth	r3, r3
2405069e:	425b      	negs	r3, r3
240506a0:	b29b      	uxth	r3, r3
240506a2:	b21b      	sxth	r3, r3
240506a4:	e001      	b.n	240506aa <play_noise+0x94>
240506a6:	7e7b      	ldrb	r3, [r7, #25]
240506a8:	b21b      	sxth	r3, r3
240506aa:	68fa      	ldr	r2, [r7, #12]
240506ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
240506ae:	3128      	adds	r1, #40	; 0x28
240506b0:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
					(out == 1) ? -1 * (int16_t) vol : (int16_t) vol;
			last--;
240506b4:	8c3b      	ldrh	r3, [r7, #32]
240506b6:	3b01      	subs	r3, #1
240506b8:	843b      	strh	r3, [r7, #32]
240506ba:	e022      	b.n	24050702 <play_noise+0xec>
		} else {
			last = freq;
240506bc:	8b7b      	ldrh	r3, [r7, #26]
240506be:	843b      	strh	r3, [r7, #32]
			i--;
240506c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240506c2:	3b01      	subs	r3, #1
240506c4:	627b      	str	r3, [r7, #36]	; 0x24
			uint16_t xor_result = (LFSR & 0b01) ^ ((LFSR & 0b10) >> 1);
240506c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
240506c8:	105b      	asrs	r3, r3, #1
240506ca:	b21a      	sxth	r2, r3
240506cc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
240506d0:	4053      	eors	r3, r2
240506d2:	b21b      	sxth	r3, r3
240506d4:	b29b      	uxth	r3, r3
240506d6:	f003 0301 	and.w	r3, r3, #1
240506da:	82fb      	strh	r3, [r7, #22]
			LFSR = (LFSR >> 1) | (xor_result << 14);
240506dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
240506de:	085b      	lsrs	r3, r3, #1
240506e0:	b29b      	uxth	r3, r3
240506e2:	b21a      	sxth	r2, r3
240506e4:	8afb      	ldrh	r3, [r7, #22]
240506e6:	039b      	lsls	r3, r3, #14
240506e8:	b21b      	sxth	r3, r3
240506ea:	4313      	orrs	r3, r2
240506ec:	b21b      	sxth	r3, r3
240506ee:	847b      	strh	r3, [r7, #34]	; 0x22
			out = ~LFSR & 0x01;
240506f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
240506f2:	f003 0301 	and.w	r3, r3, #1
240506f6:	2b00      	cmp	r3, #0
240506f8:	bf0c      	ite	eq
240506fa:	2301      	moveq	r3, #1
240506fc:	2300      	movne	r3, #0
240506fe:	b2db      	uxtb	r3, r3
24050700:	61fb      	str	r3, [r7, #28]
	for (i = start; i < start + len; i++) {
24050702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24050704:	3301      	adds	r3, #1
24050706:	627b      	str	r3, [r7, #36]	; 0x24
24050708:	68ba      	ldr	r2, [r7, #8]
2405070a:	687b      	ldr	r3, [r7, #4]
2405070c:	4413      	add	r3, r2
2405070e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
24050710:	429a      	cmp	r2, r3
24050712:	dbbc      	blt.n	2405068e <play_noise+0x78>
		}
	}
	noise->LFSR = LFSR;
24050714:	68fb      	ldr	r3, [r7, #12]
24050716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
2405071a:	461a      	mov	r2, r3
2405071c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
2405071e:	f8a2 3310 	strh.w	r3, [r2, #784]	; 0x310
	noise->last = last;
24050722:	68fb      	ldr	r3, [r7, #12]
24050724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
24050728:	461a      	mov	r2, r3
2405072a:	8c3b      	ldrh	r3, [r7, #32]
2405072c:	f8a2 3312 	strh.w	r3, [r2, #786]	; 0x312
}
24050730:	372c      	adds	r7, #44	; 0x2c
24050732:	46bd      	mov	sp, r7
24050734:	f85d 7b04 	ldr.w	r7, [sp], #4
24050738:	4770      	bx	lr

2405073a <move_noise>:

void move_noise(Noise *noise) {
2405073a:	b480      	push	{r7}
2405073c:	b087      	sub	sp, #28
2405073e:	af00      	add	r7, sp, #0
24050740:	6078      	str	r0, [r7, #4]
	int i, n = AUDIO_PROGRAMMABLE_LENGTH;
24050742:	2328      	movs	r3, #40	; 0x28
24050744:	613b      	str	r3, [r7, #16]
	uint8_t *a = noise->noise_freq;
24050746:	687b      	ldr	r3, [r7, #4]
24050748:	60fb      	str	r3, [r7, #12]
	uint8_t temp = a[0];
2405074a:	68fb      	ldr	r3, [r7, #12]
2405074c:	781b      	ldrb	r3, [r3, #0]
2405074e:	72fb      	strb	r3, [r7, #11]
	for (i = 0; i < n - 1; i++) {
24050750:	2300      	movs	r3, #0
24050752:	617b      	str	r3, [r7, #20]
24050754:	e00b      	b.n	2405076e <move_noise+0x34>
		a[i] = a[i + 1];
24050756:	697b      	ldr	r3, [r7, #20]
24050758:	3301      	adds	r3, #1
2405075a:	68fa      	ldr	r2, [r7, #12]
2405075c:	441a      	add	r2, r3
2405075e:	697b      	ldr	r3, [r7, #20]
24050760:	68f9      	ldr	r1, [r7, #12]
24050762:	440b      	add	r3, r1
24050764:	7812      	ldrb	r2, [r2, #0]
24050766:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < n - 1; i++) {
24050768:	697b      	ldr	r3, [r7, #20]
2405076a:	3301      	adds	r3, #1
2405076c:	617b      	str	r3, [r7, #20]
2405076e:	693b      	ldr	r3, [r7, #16]
24050770:	3b01      	subs	r3, #1
24050772:	697a      	ldr	r2, [r7, #20]
24050774:	429a      	cmp	r2, r3
24050776:	dbee      	blt.n	24050756 <move_noise+0x1c>
	}
	a[n - 1] = temp;
24050778:	693b      	ldr	r3, [r7, #16]
2405077a:	3b01      	subs	r3, #1
2405077c:	68fa      	ldr	r2, [r7, #12]
2405077e:	4413      	add	r3, r2
24050780:	7afa      	ldrb	r2, [r7, #11]
24050782:	701a      	strb	r2, [r3, #0]
	a = noise->noise_vol;
24050784:	687b      	ldr	r3, [r7, #4]
24050786:	3328      	adds	r3, #40	; 0x28
24050788:	60fb      	str	r3, [r7, #12]
	temp = a[0];
2405078a:	68fb      	ldr	r3, [r7, #12]
2405078c:	781b      	ldrb	r3, [r3, #0]
2405078e:	72fb      	strb	r3, [r7, #11]
	for (i = 0; i < n - 1; i++) {
24050790:	2300      	movs	r3, #0
24050792:	617b      	str	r3, [r7, #20]
24050794:	e00b      	b.n	240507ae <move_noise+0x74>
		a[i] = a[i + 1];
24050796:	697b      	ldr	r3, [r7, #20]
24050798:	3301      	adds	r3, #1
2405079a:	68fa      	ldr	r2, [r7, #12]
2405079c:	441a      	add	r2, r3
2405079e:	697b      	ldr	r3, [r7, #20]
240507a0:	68f9      	ldr	r1, [r7, #12]
240507a2:	440b      	add	r3, r1
240507a4:	7812      	ldrb	r2, [r2, #0]
240507a6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < n - 1; i++) {
240507a8:	697b      	ldr	r3, [r7, #20]
240507aa:	3301      	adds	r3, #1
240507ac:	617b      	str	r3, [r7, #20]
240507ae:	693b      	ldr	r3, [r7, #16]
240507b0:	3b01      	subs	r3, #1
240507b2:	697a      	ldr	r2, [r7, #20]
240507b4:	429a      	cmp	r2, r3
240507b6:	dbee      	blt.n	24050796 <move_noise+0x5c>
	}
	a[n - 1] = temp;
240507b8:	693b      	ldr	r3, [r7, #16]
240507ba:	3b01      	subs	r3, #1
240507bc:	68fa      	ldr	r2, [r7, #12]
240507be:	4413      	add	r3, r2
240507c0:	7afa      	ldrb	r2, [r7, #11]
240507c2:	701a      	strb	r2, [r3, #0]
}
240507c4:	bf00      	nop
240507c6:	371c      	adds	r7, #28
240507c8:	46bd      	mov	sp, r7
240507ca:	f85d 7b04 	ldr.w	r7, [sp], #4
240507ce:	4770      	bx	lr

240507d0 <HAL_ADC_ConvCpltCallback>:
		int percent;
		bq24072_state_t state;
	} last;
} bq24072_data;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
240507d0:	b580      	push	{r7, lr}
240507d2:	b082      	sub	sp, #8
240507d4:	af00      	add	r7, sp, #0
240507d6:	6078      	str	r0, [r7, #4]
	bq24072_data.value = HAL_ADC_GetValue(hadc);
240507d8:	6878      	ldr	r0, [r7, #4]
240507da:	f004 f9c3 	bl	24054b64 <HAL_ADC_GetValue>
240507de:	4603      	mov	r3, r0
240507e0:	b29a      	uxth	r2, r3
240507e2:	4b04      	ldr	r3, [pc, #16]	; (240507f4 <HAL_ADC_ConvCpltCallback+0x24>)
240507e4:	801a      	strh	r2, [r3, #0]

	HAL_ADC_Stop_IT(hadc);
240507e6:	6878      	ldr	r0, [r7, #4]
240507e8:	f004 f980 	bl	24054aec <HAL_ADC_Stop_IT>
}
240507ec:	bf00      	nop
240507ee:	3708      	adds	r7, #8
240507f0:	46bd      	mov	sp, r7
240507f2:	bd80      	pop	{r7, pc}
240507f4:	200000d0 	.word	0x200000d0

240507f8 <bq24072_init>:

int32_t bq24072_init(void) {
240507f8:	b580      	push	{r7, lr}
240507fa:	af00      	add	r7, sp, #0
	// Read initial states
	bq24072_handle_power_good();
240507fc:	f000 f80c 	bl	24050818 <bq24072_handle_power_good>
	bq24072_handle_charging();
24050800:	f000 f822 	bl	24050848 <bq24072_handle_charging>
	bq24072_poll();
24050804:	f000 f838 	bl	24050878 <bq24072_poll>

	// Start timer for voltage poll
	HAL_TIM_Base_Start_IT(&htim1);
24050808:	4802      	ldr	r0, [pc, #8]	; (24050814 <bq24072_init+0x1c>)
2405080a:	f010 f959 	bl	24060ac0 <HAL_TIM_Base_Start_IT>

	return 0;
2405080e:	2300      	movs	r3, #0
}
24050810:	4618      	mov	r0, r3
24050812:	bd80      	pop	{r7, pc}
24050814:	200005c8 	.word	0x200005c8

24050818 <bq24072_handle_power_good>:

void bq24072_handle_power_good(void) {
24050818:	b580      	push	{r7, lr}
2405081a:	af00      	add	r7, sp, #0
	bq24072_data.power_good = !(HAL_GPIO_ReadPin(
			bq_pins[BQ24072_PIN_PGOOD].bank, bq_pins[BQ24072_PIN_PGOOD].pin)
2405081c:	4a08      	ldr	r2, [pc, #32]	; (24050840 <bq24072_handle_power_good+0x28>)
2405081e:	2304      	movs	r3, #4
	bq24072_data.power_good = !(HAL_GPIO_ReadPin(
24050820:	b29b      	uxth	r3, r3
24050822:	4619      	mov	r1, r3
24050824:	4610      	mov	r0, r2
24050826:	f008 fe17 	bl	24059458 <HAL_GPIO_ReadPin>
2405082a:	4603      	mov	r3, r0
2405082c:	2b01      	cmp	r3, #1
2405082e:	bf14      	ite	ne
24050830:	2301      	movne	r3, #1
24050832:	2300      	moveq	r3, #0
24050834:	b2da      	uxtb	r2, r3
24050836:	4b03      	ldr	r3, [pc, #12]	; (24050844 <bq24072_handle_power_good+0x2c>)
24050838:	70da      	strb	r2, [r3, #3]
			== GPIO_PIN_SET);
}
2405083a:	bf00      	nop
2405083c:	bd80      	pop	{r7, pc}
2405083e:	bf00      	nop
24050840:	58020000 	.word	0x58020000
24050844:	200000d0 	.word	0x200000d0

24050848 <bq24072_handle_charging>:

void bq24072_handle_charging(void) {
24050848:	b580      	push	{r7, lr}
2405084a:	af00      	add	r7, sp, #0
	bq24072_data.charging = !(HAL_GPIO_ReadPin(bq_pins[BQ24072_PIN_CHG].bank,
2405084c:	4a08      	ldr	r2, [pc, #32]	; (24050870 <bq24072_handle_charging+0x28>)
			bq_pins[BQ24072_PIN_CHG].pin) == GPIO_PIN_SET);
2405084e:	2380      	movs	r3, #128	; 0x80
	bq24072_data.charging = !(HAL_GPIO_ReadPin(bq_pins[BQ24072_PIN_CHG].bank,
24050850:	b29b      	uxth	r3, r3
24050852:	4619      	mov	r1, r3
24050854:	4610      	mov	r0, r2
24050856:	f008 fdff 	bl	24059458 <HAL_GPIO_ReadPin>
2405085a:	4603      	mov	r3, r0
2405085c:	2b01      	cmp	r3, #1
2405085e:	bf14      	ite	ne
24050860:	2301      	movne	r3, #1
24050862:	2300      	moveq	r3, #0
24050864:	b2da      	uxtb	r2, r3
24050866:	4b03      	ldr	r3, [pc, #12]	; (24050874 <bq24072_handle_charging+0x2c>)
24050868:	709a      	strb	r2, [r3, #2]
}
2405086a:	bf00      	nop
2405086c:	bd80      	pop	{r7, pc}
2405086e:	bf00      	nop
24050870:	58021000 	.word	0x58021000
24050874:	200000d0 	.word	0x200000d0

24050878 <bq24072_poll>:
	}

	return percent;
}

void bq24072_poll(void) {
24050878:	b580      	push	{r7, lr}
2405087a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_IT(&hadc1);
2405087c:	4802      	ldr	r0, [pc, #8]	; (24050888 <bq24072_poll+0x10>)
2405087e:	f004 f807 	bl	24054890 <HAL_ADC_Start_IT>
}
24050882:	bf00      	nop
24050884:	bd80      	pop	{r7, pc}
24050886:	bf00      	nop
24050888:	20000210 	.word	0x20000210

2405088c <buttons_get>:
#include "stm32h7xx_hal.h"
#include "main.h"

#include <stdbool.h>

uint32_t buttons_get() {
2405088c:	b580      	push	{r7, lr}
2405088e:	b084      	sub	sp, #16
24050890:	af00      	add	r7, sp, #0
    bool left = HAL_GPIO_ReadPin(BTN_Left_GPIO_Port, BTN_Left_Pin) == GPIO_PIN_RESET;
24050892:	f44f 6100 	mov.w	r1, #2048	; 0x800
24050896:	4843      	ldr	r0, [pc, #268]	; (240509a4 <buttons_get+0x118>)
24050898:	f008 fdde 	bl	24059458 <HAL_GPIO_ReadPin>
2405089c:	4603      	mov	r3, r0
2405089e:	2b00      	cmp	r3, #0
240508a0:	bf0c      	ite	eq
240508a2:	2301      	moveq	r3, #1
240508a4:	2300      	movne	r3, #0
240508a6:	73fb      	strb	r3, [r7, #15]
    bool right = HAL_GPIO_ReadPin(BTN_Right_GPIO_Port, BTN_Right_Pin) == GPIO_PIN_RESET;
240508a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
240508ac:	483d      	ldr	r0, [pc, #244]	; (240509a4 <buttons_get+0x118>)
240508ae:	f008 fdd3 	bl	24059458 <HAL_GPIO_ReadPin>
240508b2:	4603      	mov	r3, r0
240508b4:	2b00      	cmp	r3, #0
240508b6:	bf0c      	ite	eq
240508b8:	2301      	moveq	r3, #1
240508ba:	2300      	movne	r3, #0
240508bc:	73bb      	strb	r3, [r7, #14]
    bool up = HAL_GPIO_ReadPin(BTN_Up_GPIO_Port, BTN_Up_Pin) == GPIO_PIN_RESET ;
240508be:	2101      	movs	r1, #1
240508c0:	4838      	ldr	r0, [pc, #224]	; (240509a4 <buttons_get+0x118>)
240508c2:	f008 fdc9 	bl	24059458 <HAL_GPIO_ReadPin>
240508c6:	4603      	mov	r3, r0
240508c8:	2b00      	cmp	r3, #0
240508ca:	bf0c      	ite	eq
240508cc:	2301      	moveq	r3, #1
240508ce:	2300      	movne	r3, #0
240508d0:	737b      	strb	r3, [r7, #13]
    bool down = HAL_GPIO_ReadPin(BTN_Down_GPIO_Port, BTN_Down_Pin) == GPIO_PIN_RESET;
240508d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
240508d6:	4833      	ldr	r0, [pc, #204]	; (240509a4 <buttons_get+0x118>)
240508d8:	f008 fdbe 	bl	24059458 <HAL_GPIO_ReadPin>
240508dc:	4603      	mov	r3, r0
240508de:	2b00      	cmp	r3, #0
240508e0:	bf0c      	ite	eq
240508e2:	2301      	moveq	r3, #1
240508e4:	2300      	movne	r3, #0
240508e6:	733b      	strb	r3, [r7, #12]
    bool a = HAL_GPIO_ReadPin(BTN_A_GPIO_Port, BTN_A_Pin) == GPIO_PIN_RESET;
240508e8:	f44f 7100 	mov.w	r1, #512	; 0x200
240508ec:	482d      	ldr	r0, [pc, #180]	; (240509a4 <buttons_get+0x118>)
240508ee:	f008 fdb3 	bl	24059458 <HAL_GPIO_ReadPin>
240508f2:	4603      	mov	r3, r0
240508f4:	2b00      	cmp	r3, #0
240508f6:	bf0c      	ite	eq
240508f8:	2301      	moveq	r3, #1
240508fa:	2300      	movne	r3, #0
240508fc:	72fb      	strb	r3, [r7, #11]
    bool b = HAL_GPIO_ReadPin(BTN_B_GPIO_Port, BTN_B_Pin) == GPIO_PIN_RESET;
240508fe:	2120      	movs	r1, #32
24050900:	4828      	ldr	r0, [pc, #160]	; (240509a4 <buttons_get+0x118>)
24050902:	f008 fda9 	bl	24059458 <HAL_GPIO_ReadPin>
24050906:	4603      	mov	r3, r0
24050908:	2b00      	cmp	r3, #0
2405090a:	bf0c      	ite	eq
2405090c:	2301      	moveq	r3, #1
2405090e:	2300      	movne	r3, #0
24050910:	72bb      	strb	r3, [r7, #10]
    bool time = HAL_GPIO_ReadPin(BTN_TIME_GPIO_Port, BTN_TIME_Pin) == GPIO_PIN_RESET;
24050912:	2120      	movs	r1, #32
24050914:	4824      	ldr	r0, [pc, #144]	; (240509a8 <buttons_get+0x11c>)
24050916:	f008 fd9f 	bl	24059458 <HAL_GPIO_ReadPin>
2405091a:	4603      	mov	r3, r0
2405091c:	2b00      	cmp	r3, #0
2405091e:	bf0c      	ite	eq
24050920:	2301      	moveq	r3, #1
24050922:	2300      	movne	r3, #0
24050924:	727b      	strb	r3, [r7, #9]
    bool game = HAL_GPIO_ReadPin(BTN_GAME_GPIO_Port, BTN_GAME_Pin) == GPIO_PIN_RESET;
24050926:	2102      	movs	r1, #2
24050928:	481f      	ldr	r0, [pc, #124]	; (240509a8 <buttons_get+0x11c>)
2405092a:	f008 fd95 	bl	24059458 <HAL_GPIO_ReadPin>
2405092e:	4603      	mov	r3, r0
24050930:	2b00      	cmp	r3, #0
24050932:	bf0c      	ite	eq
24050934:	2301      	moveq	r3, #1
24050936:	2300      	movne	r3, #0
24050938:	723b      	strb	r3, [r7, #8]
    bool pause = HAL_GPIO_ReadPin(BTN_PAUSE_GPIO_Port, BTN_PAUSE_Pin) == GPIO_PIN_RESET;
2405093a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
2405093e:	481a      	ldr	r0, [pc, #104]	; (240509a8 <buttons_get+0x11c>)
24050940:	f008 fd8a 	bl	24059458 <HAL_GPIO_ReadPin>
24050944:	4603      	mov	r3, r0
24050946:	2b00      	cmp	r3, #0
24050948:	bf0c      	ite	eq
2405094a:	2301      	moveq	r3, #1
2405094c:	2300      	movne	r3, #0
2405094e:	71fb      	strb	r3, [r7, #7]
    bool power = HAL_GPIO_ReadPin(BTN_PWR_GPIO_Port, BTN_PWR_Pin) == GPIO_PIN_RESET;
24050950:	2101      	movs	r1, #1
24050952:	4816      	ldr	r0, [pc, #88]	; (240509ac <buttons_get+0x120>)
24050954:	f008 fd80 	bl	24059458 <HAL_GPIO_ReadPin>
24050958:	4603      	mov	r3, r0
2405095a:	2b00      	cmp	r3, #0
2405095c:	bf0c      	ite	eq
2405095e:	2301      	moveq	r3, #1
24050960:	2300      	movne	r3, #0
24050962:	71bb      	strb	r3, [r7, #6]

    //bool start = HAL_GPIO_ReadPin(BTN_START_GPIO_Port, BTN_START_Pin) == GPIO_PIN_RESET;
    //bool select = HAL_GPIO_ReadPin(BTN_SELECT_GPIO_Port, BTN_SELECT_Pin) == GPIO_PIN_RESET;

    return (
        left | (up << 1) | (right << 2) | (down << 3) | (a << 4) | (b << 5) |
24050964:	7bfa      	ldrb	r2, [r7, #15]
24050966:	7b7b      	ldrb	r3, [r7, #13]
24050968:	005b      	lsls	r3, r3, #1
2405096a:	431a      	orrs	r2, r3
2405096c:	7bbb      	ldrb	r3, [r7, #14]
2405096e:	009b      	lsls	r3, r3, #2
24050970:	431a      	orrs	r2, r3
24050972:	7b3b      	ldrb	r3, [r7, #12]
24050974:	00db      	lsls	r3, r3, #3
24050976:	431a      	orrs	r2, r3
24050978:	7afb      	ldrb	r3, [r7, #11]
2405097a:	011b      	lsls	r3, r3, #4
2405097c:	431a      	orrs	r2, r3
2405097e:	7abb      	ldrb	r3, [r7, #10]
24050980:	015b      	lsls	r3, r3, #5
24050982:	431a      	orrs	r2, r3
        (time << 6) | (game << 7) | (pause << 8) | (power << 9)// | (start << 10) | (select << 11)
24050984:	7a7b      	ldrb	r3, [r7, #9]
24050986:	019b      	lsls	r3, r3, #6
        left | (up << 1) | (right << 2) | (down << 3) | (a << 4) | (b << 5) |
24050988:	431a      	orrs	r2, r3
        (time << 6) | (game << 7) | (pause << 8) | (power << 9)// | (start << 10) | (select << 11)
2405098a:	7a3b      	ldrb	r3, [r7, #8]
2405098c:	01db      	lsls	r3, r3, #7
2405098e:	431a      	orrs	r2, r3
24050990:	79fb      	ldrb	r3, [r7, #7]
24050992:	021b      	lsls	r3, r3, #8
24050994:	431a      	orrs	r2, r3
24050996:	79bb      	ldrb	r3, [r7, #6]
24050998:	025b      	lsls	r3, r3, #9
2405099a:	4313      	orrs	r3, r2
    );


}
2405099c:	4618      	mov	r0, r3
2405099e:	3710      	adds	r7, #16
240509a0:	46bd      	mov	sp, r7
240509a2:	bd80      	pop	{r7, pc}
240509a4:	58020c00 	.word	0x58020c00
240509a8:	58020800 	.word	0x58020800
240509ac:	58020000 	.word	0x58020000

240509b0 <set_ospi_cmd>:
static void set_ospi_cmd(OSPI_RegularCmdTypeDef *ospi_cmd,
                         const flash_cmd_t *cmd,
                         uint32_t address,
                         uint8_t *data,
                         size_t len)
{
240509b0:	b580      	push	{r7, lr}
240509b2:	b084      	sub	sp, #16
240509b4:	af00      	add	r7, sp, #0
240509b6:	60f8      	str	r0, [r7, #12]
240509b8:	60b9      	str	r1, [r7, #8]
240509ba:	607a      	str	r2, [r7, #4]
240509bc:	603b      	str	r3, [r7, #0]
    memset(ospi_cmd, 0x0, sizeof(*ospi_cmd));
240509be:	2250      	movs	r2, #80	; 0x50
240509c0:	2100      	movs	r1, #0
240509c2:	68f8      	ldr	r0, [r7, #12]
240509c4:	f010 ffe6 	bl	24061994 <memset>

    ospi_cmd->OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
240509c8:	68fb      	ldr	r3, [r7, #12]
240509ca:	2200      	movs	r2, #0
240509cc:	601a      	str	r2, [r3, #0]
    ospi_cmd->FlashId = 0;
240509ce:	68fb      	ldr	r3, [r7, #12]
240509d0:	2200      	movs	r2, #0
240509d2:	605a      	str	r2, [r3, #4]
    ospi_cmd->Instruction = cmd->cmd;
240509d4:	68bb      	ldr	r3, [r7, #8]
240509d6:	781b      	ldrb	r3, [r3, #0]
240509d8:	461a      	mov	r2, r3
240509da:	68fb      	ldr	r3, [r7, #12]
240509dc:	609a      	str	r2, [r3, #8]
    ospi_cmd->InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
240509de:	68fb      	ldr	r3, [r7, #12]
240509e0:	2200      	movs	r2, #0
240509e2:	611a      	str	r2, [r3, #16]
    ospi_cmd->InstructionMode = instruction_line_map[cmd->instr_lines];
240509e4:	68bb      	ldr	r3, [r7, #8]
240509e6:	785b      	ldrb	r3, [r3, #1]
240509e8:	f3c3 0301 	ubfx	r3, r3, #0, #2
240509ec:	b2db      	uxtb	r3, r3
240509ee:	461a      	mov	r2, r3
240509f0:	4b20      	ldr	r3, [pc, #128]	; (24050a74 <set_ospi_cmd+0xc4>)
240509f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
240509f6:	68fb      	ldr	r3, [r7, #12]
240509f8:	60da      	str	r2, [r3, #12]

    ospi_cmd->AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
240509fa:	68fb      	ldr	r3, [r7, #12]
240509fc:	2200      	movs	r2, #0
240509fe:	62da      	str	r2, [r3, #44]	; 0x2c
    ospi_cmd->DummyCycles = cmd->dummy;
24050a00:	68bb      	ldr	r3, [r7, #8]
24050a02:	789b      	ldrb	r3, [r3, #2]
24050a04:	461a      	mov	r2, r3
24050a06:	68fb      	ldr	r3, [r7, #12]
24050a08:	645a      	str	r2, [r3, #68]	; 0x44
    ospi_cmd->DQSMode = HAL_OSPI_DQS_DISABLE;
24050a0a:	68fb      	ldr	r3, [r7, #12]
24050a0c:	2200      	movs	r2, #0
24050a0e:	649a      	str	r2, [r3, #72]	; 0x48
    ospi_cmd->SIOOMode = HAL_OSPI_SIOO_INST_EVERY_CMD;
24050a10:	68fb      	ldr	r3, [r7, #12]
24050a12:	2200      	movs	r2, #0
24050a14:	64da      	str	r2, [r3, #76]	; 0x4c
    ospi_cmd->InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
24050a16:	68fb      	ldr	r3, [r7, #12]
24050a18:	2200      	movs	r2, #0
24050a1a:	615a      	str	r2, [r3, #20]

    ospi_cmd->Address = address;
24050a1c:	68fb      	ldr	r3, [r7, #12]
24050a1e:	687a      	ldr	r2, [r7, #4]
24050a20:	619a      	str	r2, [r3, #24]
    ospi_cmd->AddressSize = address_size_map[cmd->addr_size];
24050a22:	68bb      	ldr	r3, [r7, #8]
24050a24:	785b      	ldrb	r3, [r3, #1]
24050a26:	f3c3 1301 	ubfx	r3, r3, #4, #2
24050a2a:	b2db      	uxtb	r3, r3
24050a2c:	461a      	mov	r2, r3
24050a2e:	4b12      	ldr	r3, [pc, #72]	; (24050a78 <set_ospi_cmd+0xc8>)
24050a30:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
24050a34:	68fb      	ldr	r3, [r7, #12]
24050a36:	621a      	str	r2, [r3, #32]
    ospi_cmd->AddressMode = address_line_map[cmd->addr_lines];
24050a38:	68bb      	ldr	r3, [r7, #8]
24050a3a:	785b      	ldrb	r3, [r3, #1]
24050a3c:	f3c3 0381 	ubfx	r3, r3, #2, #2
24050a40:	b2db      	uxtb	r3, r3
24050a42:	461a      	mov	r2, r3
24050a44:	4b0d      	ldr	r3, [pc, #52]	; (24050a7c <set_ospi_cmd+0xcc>)
24050a46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
24050a4a:	68fb      	ldr	r3, [r7, #12]
24050a4c:	61da      	str	r2, [r3, #28]

    ospi_cmd->NbData = len;
24050a4e:	68fb      	ldr	r3, [r7, #12]
24050a50:	69ba      	ldr	r2, [r7, #24]
24050a52:	63da      	str	r2, [r3, #60]	; 0x3c
    ospi_cmd->DataMode = data_line_map[cmd->data_lines];
24050a54:	68bb      	ldr	r3, [r7, #8]
24050a56:	785b      	ldrb	r3, [r3, #1]
24050a58:	f3c3 1381 	ubfx	r3, r3, #6, #2
24050a5c:	b2db      	uxtb	r3, r3
24050a5e:	461a      	mov	r2, r3
24050a60:	4b07      	ldr	r3, [pc, #28]	; (24050a80 <set_ospi_cmd+0xd0>)
24050a62:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
24050a66:	68fb      	ldr	r3, [r7, #12]
24050a68:	639a      	str	r2, [r3, #56]	; 0x38
}
24050a6a:	bf00      	nop
24050a6c:	3710      	adds	r7, #16
24050a6e:	46bd      	mov	sp, r7
24050a70:	bd80      	pop	{r7, pc}
24050a72:	bf00      	nop
24050a74:	24063e30 	.word	0x24063e30
24050a78:	24063e48 	.word	0x24063e48
24050a7c:	24063e3c 	.word	0x24063e3c
24050a80:	24063e58 	.word	0x24063e58

24050a84 <OSPI_ReadBytes>:

static void OSPI_ReadBytes(const flash_cmd_t *cmd,
                           uint32_t address,
                           uint8_t *data,
                           size_t len)
{
24050a84:	b580      	push	{r7, lr}
24050a86:	b09c      	sub	sp, #112	; 0x70
24050a88:	af02      	add	r7, sp, #8
24050a8a:	60f8      	str	r0, [r7, #12]
24050a8c:	60b9      	str	r1, [r7, #8]
24050a8e:	607a      	str	r2, [r7, #4]
24050a90:	603b      	str	r3, [r7, #0]
    OSPI_RegularCmdTypeDef ospi_cmd;

    // DBG("RB %d 0x%08x 0x%08X %d\n", cmd->cmd, address, data, len);

    assert(flash.mem_mapped_enabled == false);
24050a92:	4b1d      	ldr	r3, [pc, #116]	; (24050b08 <OSPI_ReadBytes+0x84>)
24050a94:	7c1b      	ldrb	r3, [r3, #16]
24050a96:	f083 0301 	eor.w	r3, r3, #1
24050a9a:	b2db      	uxtb	r3, r3
24050a9c:	2b00      	cmp	r3, #0
24050a9e:	d106      	bne.n	24050aae <OSPI_ReadBytes+0x2a>
24050aa0:	4b1a      	ldr	r3, [pc, #104]	; (24050b0c <OSPI_ReadBytes+0x88>)
24050aa2:	4a1b      	ldr	r2, [pc, #108]	; (24050b10 <OSPI_ReadBytes+0x8c>)
24050aa4:	f240 11a3 	movw	r1, #419	; 0x1a3
24050aa8:	481a      	ldr	r0, [pc, #104]	; (24050b14 <OSPI_ReadBytes+0x90>)
24050aaa:	f010 fcaf 	bl	2406140c <__assert_func>

    set_ospi_cmd(&ospi_cmd,
24050aae:	f107 0014 	add.w	r0, r7, #20
24050ab2:	683b      	ldr	r3, [r7, #0]
24050ab4:	9300      	str	r3, [sp, #0]
24050ab6:	687b      	ldr	r3, [r7, #4]
24050ab8:	68ba      	ldr	r2, [r7, #8]
24050aba:	68f9      	ldr	r1, [r7, #12]
24050abc:	f7ff ff78 	bl	240509b0 <set_ospi_cmd>
                 len);

    //wdog_refresh();

    HAL_StatusTypeDef res;
    res = HAL_OSPI_Command(flash.hospi, &ospi_cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
24050ac0:	4b11      	ldr	r3, [pc, #68]	; (24050b08 <OSPI_ReadBytes+0x84>)
24050ac2:	681b      	ldr	r3, [r3, #0]
24050ac4:	f107 0114 	add.w	r1, r7, #20
24050ac8:	f241 3288 	movw	r2, #5000	; 0x1388
24050acc:	4618      	mov	r0, r3
24050ace:	f009 fb05 	bl	2405a0dc <HAL_OSPI_Command>
24050ad2:	4603      	mov	r3, r0
24050ad4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (res != HAL_OK) {
24050ad8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
24050adc:	2b00      	cmp	r3, #0
24050ade:	d001      	beq.n	24050ae4 <OSPI_ReadBytes+0x60>
        Error_Handler();
24050ae0:	f002 fa16 	bl	24052f10 <Error_Handler>
    }

    if (HAL_OSPI_Receive(flash.hospi, data, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
24050ae4:	4b08      	ldr	r3, [pc, #32]	; (24050b08 <OSPI_ReadBytes+0x84>)
24050ae6:	681b      	ldr	r3, [r3, #0]
24050ae8:	f241 3288 	movw	r2, #5000	; 0x1388
24050aec:	6879      	ldr	r1, [r7, #4]
24050aee:	4618      	mov	r0, r3
24050af0:	f009 fbf4 	bl	2405a2dc <HAL_OSPI_Receive>
24050af4:	4603      	mov	r3, r0
24050af6:	2b00      	cmp	r3, #0
24050af8:	d001      	beq.n	24050afe <OSPI_ReadBytes+0x7a>
        Error_Handler();
24050afa:	f002 fa09 	bl	24052f10 <Error_Handler>
    }
}
24050afe:	bf00      	nop
24050b00:	3768      	adds	r7, #104	; 0x68
24050b02:	46bd      	mov	sp, r7
24050b04:	bd80      	pop	{r7, pc}
24050b06:	bf00      	nop
24050b08:	20000010 	.word	0x20000010
24050b0c:	2406299c 	.word	0x2406299c
24050b10:	24064190 	.word	0x24064190
24050b14:	240629c0 	.word	0x240629c0

24050b18 <OSPI_WriteBytes>:

static void OSPI_WriteBytes(const flash_cmd_t *cmd,
                            uint32_t address,
                            const uint8_t *data,
                            size_t len)
{
24050b18:	b580      	push	{r7, lr}
24050b1a:	b09a      	sub	sp, #104	; 0x68
24050b1c:	af02      	add	r7, sp, #8
24050b1e:	60f8      	str	r0, [r7, #12]
24050b20:	60b9      	str	r1, [r7, #8]
24050b22:	607a      	str	r2, [r7, #4]
24050b24:	603b      	str	r3, [r7, #0]
    OSPI_RegularCmdTypeDef ospi_cmd;

    // DBG("WB %d 0x%08x 0x%08X %d\n", cmd->cmd, address, data, len);

    assert(flash.mem_mapped_enabled == false);
24050b26:	4b1c      	ldr	r3, [pc, #112]	; (24050b98 <OSPI_WriteBytes+0x80>)
24050b28:	7c1b      	ldrb	r3, [r3, #16]
24050b2a:	f083 0301 	eor.w	r3, r3, #1
24050b2e:	b2db      	uxtb	r3, r3
24050b30:	2b00      	cmp	r3, #0
24050b32:	d106      	bne.n	24050b42 <OSPI_WriteBytes+0x2a>
24050b34:	4b19      	ldr	r3, [pc, #100]	; (24050b9c <OSPI_WriteBytes+0x84>)
24050b36:	4a1a      	ldr	r2, [pc, #104]	; (24050ba0 <OSPI_WriteBytes+0x88>)
24050b38:	f240 11c1 	movw	r1, #449	; 0x1c1
24050b3c:	4819      	ldr	r0, [pc, #100]	; (24050ba4 <OSPI_WriteBytes+0x8c>)
24050b3e:	f010 fc65 	bl	2406140c <__assert_func>

    set_ospi_cmd(&ospi_cmd,
24050b42:	f107 0010 	add.w	r0, r7, #16
24050b46:	683b      	ldr	r3, [r7, #0]
24050b48:	9300      	str	r3, [sp, #0]
24050b4a:	687b      	ldr	r3, [r7, #4]
24050b4c:	68ba      	ldr	r2, [r7, #8]
24050b4e:	68f9      	ldr	r1, [r7, #12]
24050b50:	f7ff ff2e 	bl	240509b0 <set_ospi_cmd>
                 (uint8_t *) data,
                 len);

    //wdog_refresh();

    if (HAL_OSPI_Command(flash.hospi, &ospi_cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
24050b54:	4b10      	ldr	r3, [pc, #64]	; (24050b98 <OSPI_WriteBytes+0x80>)
24050b56:	681b      	ldr	r3, [r3, #0]
24050b58:	f107 0110 	add.w	r1, r7, #16
24050b5c:	f241 3288 	movw	r2, #5000	; 0x1388
24050b60:	4618      	mov	r0, r3
24050b62:	f009 fabb 	bl	2405a0dc <HAL_OSPI_Command>
24050b66:	4603      	mov	r3, r0
24050b68:	2b00      	cmp	r3, #0
24050b6a:	d001      	beq.n	24050b70 <OSPI_WriteBytes+0x58>
        Error_Handler();
24050b6c:	f002 f9d0 	bl	24052f10 <Error_Handler>
    }

    if (len > 0) {
24050b70:	683b      	ldr	r3, [r7, #0]
24050b72:	2b00      	cmp	r3, #0
24050b74:	d00c      	beq.n	24050b90 <OSPI_WriteBytes+0x78>
        if (HAL_OSPI_Transmit(flash.hospi, (uint8_t *) data, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
24050b76:	4b08      	ldr	r3, [pc, #32]	; (24050b98 <OSPI_WriteBytes+0x80>)
24050b78:	681b      	ldr	r3, [r3, #0]
24050b7a:	f241 3288 	movw	r2, #5000	; 0x1388
24050b7e:	6879      	ldr	r1, [r7, #4]
24050b80:	4618      	mov	r0, r3
24050b82:	f009 fb38 	bl	2405a1f6 <HAL_OSPI_Transmit>
24050b86:	4603      	mov	r3, r0
24050b88:	2b00      	cmp	r3, #0
24050b8a:	d001      	beq.n	24050b90 <OSPI_WriteBytes+0x78>
            Error_Handler();
24050b8c:	f002 f9c0 	bl	24052f10 <Error_Handler>
        }
    }
}
24050b90:	bf00      	nop
24050b92:	3760      	adds	r7, #96	; 0x60
24050b94:	46bd      	mov	sp, r7
24050b96:	bd80      	pop	{r7, pc}
24050b98:	20000010 	.word	0x20000010
24050b9c:	2406299c 	.word	0x2406299c
24050ba0:	240641a0 	.word	0x240641a0
24050ba4:	240629c0 	.word	0x240629c0

24050ba8 <wait_for_status>:

static void wait_for_status(uint8_t mask, uint8_t value, uint32_t timeout)
{
24050ba8:	b580      	push	{r7, lr}
24050baa:	b084      	sub	sp, #16
24050bac:	af00      	add	r7, sp, #0
24050bae:	4603      	mov	r3, r0
24050bb0:	603a      	str	r2, [r7, #0]
24050bb2:	71fb      	strb	r3, [r7, #7]
24050bb4:	460b      	mov	r3, r1
24050bb6:	71bb      	strb	r3, [r7, #6]
    uint8_t status;

    uint32_t t0 = HAL_GetTick();
24050bb8:	f003 f908 	bl	24053dcc <HAL_GetTick>
24050bbc:	60f8      	str	r0, [r7, #12]

    do {
        OSPI_ReadBytes(CMD(RDSR), 0, &status, 1);
24050bbe:	4b14      	ldr	r3, [pc, #80]	; (24050c10 <wait_for_status+0x68>)
24050bc0:	689b      	ldr	r3, [r3, #8]
24050bc2:	681b      	ldr	r3, [r3, #0]
24050bc4:	1cd8      	adds	r0, r3, #3
24050bc6:	f107 020b 	add.w	r2, r7, #11
24050bca:	2301      	movs	r3, #1
24050bcc:	2100      	movs	r1, #0
24050bce:	f7ff ff59 	bl	24050a84 <OSPI_ReadBytes>

#if 0
        printf("Status: %02X\n", status);
        HAL_Delay(500);
#endif
        if ((timeout > 0) && (HAL_GetTick() > t0 + timeout)) {
24050bd2:	683b      	ldr	r3, [r7, #0]
24050bd4:	2b00      	cmp	r3, #0
24050bd6:	d00e      	beq.n	24050bf6 <wait_for_status+0x4e>
24050bd8:	f003 f8f8 	bl	24053dcc <HAL_GetTick>
24050bdc:	4601      	mov	r1, r0
24050bde:	68fa      	ldr	r2, [r7, #12]
24050be0:	683b      	ldr	r3, [r7, #0]
24050be2:	4413      	add	r3, r2
24050be4:	4299      	cmp	r1, r3
24050be6:	d906      	bls.n	24050bf6 <wait_for_status+0x4e>
            assert(!"Status poll timeout!");
24050be8:	4b0a      	ldr	r3, [pc, #40]	; (24050c14 <wait_for_status+0x6c>)
24050bea:	4a0b      	ldr	r2, [pc, #44]	; (24050c18 <wait_for_status+0x70>)
24050bec:	f240 11e5 	movw	r1, #485	; 0x1e5
24050bf0:	480a      	ldr	r0, [pc, #40]	; (24050c1c <wait_for_status+0x74>)
24050bf2:	f010 fc0b 	bl	2406140c <__assert_func>
            break;
        }
    } while ((status & mask) != value);
24050bf6:	7afa      	ldrb	r2, [r7, #11]
24050bf8:	79fb      	ldrb	r3, [r7, #7]
24050bfa:	4013      	ands	r3, r2
24050bfc:	b2db      	uxtb	r3, r3
24050bfe:	79ba      	ldrb	r2, [r7, #6]
24050c00:	429a      	cmp	r2, r3
24050c02:	d1dc      	bne.n	24050bbe <wait_for_status+0x16>
}
24050c04:	bf00      	nop
24050c06:	bf00      	nop
24050c08:	3710      	adds	r7, #16
24050c0a:	46bd      	mov	sp, r7
24050c0c:	bd80      	pop	{r7, pc}
24050c0e:	bf00      	nop
24050c10:	20000010 	.word	0x20000010
24050c14:	240629e4 	.word	0x240629e4
24050c18:	240641b0 	.word	0x240641b0
24050c1c:	240629c0 	.word	0x240629c0

24050c20 <OSPI_EnableMemoryMappedMode>:

void OSPI_EnableMemoryMappedMode(void)
{
24050c20:	b580      	push	{r7, lr}
24050c22:	b09a      	sub	sp, #104	; 0x68
24050c24:	af02      	add	r7, sp, #8
    OSPI_MemoryMappedTypeDef sMemMappedCfg;
    OSPI_RegularCmdTypeDef ospi_cmd;
    const flash_cmd_t *cmd = CMD(READ);
24050c26:	4b28      	ldr	r3, [pc, #160]	; (24050cc8 <OSPI_EnableMemoryMappedMode+0xa8>)
24050c28:	689b      	ldr	r3, [r3, #8]
24050c2a:	681b      	ldr	r3, [r3, #0]
24050c2c:	332a      	adds	r3, #42	; 0x2a
24050c2e:	65fb      	str	r3, [r7, #92]	; 0x5c

    assert(flash.mem_mapped_enabled == false);
24050c30:	4b25      	ldr	r3, [pc, #148]	; (24050cc8 <OSPI_EnableMemoryMappedMode+0xa8>)
24050c32:	7c1b      	ldrb	r3, [r3, #16]
24050c34:	f083 0301 	eor.w	r3, r3, #1
24050c38:	b2db      	uxtb	r3, r3
24050c3a:	2b00      	cmp	r3, #0
24050c3c:	d106      	bne.n	24050c4c <OSPI_EnableMemoryMappedMode+0x2c>
24050c3e:	4b23      	ldr	r3, [pc, #140]	; (24050ccc <OSPI_EnableMemoryMappedMode+0xac>)
24050c40:	4a23      	ldr	r2, [pc, #140]	; (24050cd0 <OSPI_EnableMemoryMappedMode+0xb0>)
24050c42:	f240 11f1 	movw	r1, #497	; 0x1f1
24050c46:	4823      	ldr	r0, [pc, #140]	; (24050cd4 <OSPI_EnableMemoryMappedMode+0xb4>)
24050c48:	f010 fbe0 	bl	2406140c <__assert_func>

    set_ospi_cmd(&ospi_cmd, cmd, 0, NULL, 0);
24050c4c:	1d38      	adds	r0, r7, #4
24050c4e:	2300      	movs	r3, #0
24050c50:	9300      	str	r3, [sp, #0]
24050c52:	2300      	movs	r3, #0
24050c54:	2200      	movs	r2, #0
24050c56:	6df9      	ldr	r1, [r7, #92]	; 0x5c
24050c58:	f7ff feaa 	bl	240509b0 <set_ospi_cmd>

    // Memory-mapped mode configuration for linear burst read operations
    ospi_cmd.OperationType = HAL_OSPI_OPTYPE_READ_CFG;
24050c5c:	2301      	movs	r3, #1
24050c5e:	607b      	str	r3, [r7, #4]
    if (HAL_OSPI_Command(flash.hospi, &ospi_cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
24050c60:	4b19      	ldr	r3, [pc, #100]	; (24050cc8 <OSPI_EnableMemoryMappedMode+0xa8>)
24050c62:	681b      	ldr	r3, [r3, #0]
24050c64:	1d39      	adds	r1, r7, #4
24050c66:	f241 3288 	movw	r2, #5000	; 0x1388
24050c6a:	4618      	mov	r0, r3
24050c6c:	f009 fa36 	bl	2405a0dc <HAL_OSPI_Command>
24050c70:	4603      	mov	r3, r0
24050c72:	2b00      	cmp	r3, #0
24050c74:	d001      	beq.n	24050c7a <OSPI_EnableMemoryMappedMode+0x5a>
        Error_Handler();
24050c76:	f002 f94b 	bl	24052f10 <Error_Handler>
    }

    // Use read instruction for write (in order to not alter the flash by accident)
    ospi_cmd.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
24050c7a:	2302      	movs	r3, #2
24050c7c:	607b      	str	r3, [r7, #4]
    if (HAL_OSPI_Command(flash.hospi, &ospi_cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
24050c7e:	4b12      	ldr	r3, [pc, #72]	; (24050cc8 <OSPI_EnableMemoryMappedMode+0xa8>)
24050c80:	681b      	ldr	r3, [r3, #0]
24050c82:	1d39      	adds	r1, r7, #4
24050c84:	f241 3288 	movw	r2, #5000	; 0x1388
24050c88:	4618      	mov	r0, r3
24050c8a:	f009 fa27 	bl	2405a0dc <HAL_OSPI_Command>
24050c8e:	4603      	mov	r3, r0
24050c90:	2b00      	cmp	r3, #0
24050c92:	d001      	beq.n	24050c98 <OSPI_EnableMemoryMappedMode+0x78>
        Error_Handler();
24050c94:	f002 f93c 	bl	24052f10 <Error_Handler>
    }

    // Disable timeout counter for memory mapped mode
    sMemMappedCfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
24050c98:	2300      	movs	r3, #0
24050c9a:	657b      	str	r3, [r7, #84]	; 0x54
    sMemMappedCfg.TimeOutPeriod = 0;
24050c9c:	2300      	movs	r3, #0
24050c9e:	65bb      	str	r3, [r7, #88]	; 0x58

    // Enable memory mapped mode
    if (HAL_OSPI_MemoryMapped(flash.hospi, &sMemMappedCfg) != HAL_OK) {
24050ca0:	4b09      	ldr	r3, [pc, #36]	; (24050cc8 <OSPI_EnableMemoryMappedMode+0xa8>)
24050ca2:	681b      	ldr	r3, [r3, #0]
24050ca4:	f107 0254 	add.w	r2, r7, #84	; 0x54
24050ca8:	4611      	mov	r1, r2
24050caa:	4618      	mov	r0, r3
24050cac:	f009 fbba 	bl	2405a424 <HAL_OSPI_MemoryMapped>
24050cb0:	4603      	mov	r3, r0
24050cb2:	2b00      	cmp	r3, #0
24050cb4:	d001      	beq.n	24050cba <OSPI_EnableMemoryMappedMode+0x9a>
        Error_Handler();
24050cb6:	f002 f92b 	bl	24052f10 <Error_Handler>
    }

    flash.mem_mapped_enabled = true;
24050cba:	4b03      	ldr	r3, [pc, #12]	; (24050cc8 <OSPI_EnableMemoryMappedMode+0xa8>)
24050cbc:	2201      	movs	r2, #1
24050cbe:	741a      	strb	r2, [r3, #16]
}
24050cc0:	bf00      	nop
24050cc2:	3760      	adds	r7, #96	; 0x60
24050cc4:	46bd      	mov	sp, r7
24050cc6:	bd80      	pop	{r7, pc}
24050cc8:	20000010 	.word	0x20000010
24050ccc:	2406299c 	.word	0x2406299c
24050cd0:	240641c0 	.word	0x240641c0
24050cd4:	240629c0 	.word	0x240629c0

24050cd8 <OSPI_NOR_WriteEnable>:
    // Wait for Write In Progress Bit to become zero
    wait_for_status(STATUS_WIP_Msk, 0, TMO_DEFAULT);
}

void OSPI_NOR_WriteEnable(void)
{
24050cd8:	b580      	push	{r7, lr}
24050cda:	af00      	add	r7, sp, #0
    OSPI_WriteBytes(CMD(WREN), 0, NULL, 0);
24050cdc:	4b08      	ldr	r3, [pc, #32]	; (24050d00 <OSPI_NOR_WriteEnable+0x28>)
24050cde:	689b      	ldr	r3, [r3, #8]
24050ce0:	681b      	ldr	r3, [r3, #0]
24050ce2:	f103 000c 	add.w	r0, r3, #12
24050ce6:	2300      	movs	r3, #0
24050ce8:	2200      	movs	r2, #0
24050cea:	2100      	movs	r1, #0
24050cec:	f7ff ff14 	bl	24050b18 <OSPI_WriteBytes>

    // Wait for Write Enable Latch to be set
    wait_for_status(STATUS_WEL_Msk, STATUS_WEL_Msk, TMO_DEFAULT);
24050cf0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
24050cf4:	2102      	movs	r1, #2
24050cf6:	2002      	movs	r0, #2
24050cf8:	f7ff ff56 	bl	24050ba8 <wait_for_status>
}
24050cfc:	bf00      	nop
24050cfe:	bd80      	pop	{r7, pc}
24050d00:	20000010 	.word	0x20000010

24050d04 <init_mx_issi>:
{
    OSPI_ReadBytes(CMD(RDCR), 0, dest, 1);
}

static void init_mx_issi(void)
{
24050d04:	b580      	push	{r7, lr}
24050d06:	b082      	sub	sp, #8
24050d08:	af00      	add	r7, sp, #0
    // Shared code for both MX and ISSI

    uint8_t rd_status;

    DBG("%s\n", __FUNCTION__);
24050d0a:	481e      	ldr	r0, [pc, #120]	; (24050d84 <init_mx_issi+0x80>)
24050d0c:	f010 fd42 	bl	24061794 <puts>

    OSPI_ReadBytes(CMD(RDSR), 0, &rd_status, 1);
24050d10:	4b1d      	ldr	r3, [pc, #116]	; (24050d88 <init_mx_issi+0x84>)
24050d12:	689b      	ldr	r3, [r3, #8]
24050d14:	681b      	ldr	r3, [r3, #0]
24050d16:	1cd8      	adds	r0, r3, #3
24050d18:	1dfa      	adds	r2, r7, #7
24050d1a:	2301      	movs	r3, #1
24050d1c:	2100      	movs	r1, #0
24050d1e:	f7ff feb1 	bl	24050a84 <OSPI_ReadBytes>

    if (flash.config->set_quad && ((rd_status & STATUS_QE_Msk) == 0)) {
24050d22:	4b19      	ldr	r3, [pc, #100]	; (24050d88 <init_mx_issi+0x84>)
24050d24:	689b      	ldr	r3, [r3, #8]
24050d26:	7d1b      	ldrb	r3, [r3, #20]
24050d28:	2b00      	cmp	r3, #0
24050d2a:	d027      	beq.n	24050d7c <init_mx_issi+0x78>
24050d2c:	79fb      	ldrb	r3, [r7, #7]
24050d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
24050d32:	2b00      	cmp	r3, #0
24050d34:	d122      	bne.n	24050d7c <init_mx_issi+0x78>
        // WRSR - Write Status Register
        // Set Quad Enable bit (6) in status register. Other bits = 0.
        uint8_t wr_status = STATUS_QE_Msk;
24050d36:	2340      	movs	r3, #64	; 0x40
24050d38:	71bb      	strb	r3, [r7, #6]

        DBG("Setting QE bit.\n");
24050d3a:	4814      	ldr	r0, [pc, #80]	; (24050d8c <init_mx_issi+0x88>)
24050d3c:	f010 fd2a 	bl	24061794 <puts>

        // Set the QE bit
        OSPI_NOR_WriteEnable();
24050d40:	f7ff ffca 	bl	24050cd8 <OSPI_NOR_WriteEnable>
        OSPI_WriteBytes(CMD(WRSR), 0, &wr_status, 1);
24050d44:	4b10      	ldr	r3, [pc, #64]	; (24050d88 <init_mx_issi+0x84>)
24050d46:	689b      	ldr	r3, [r3, #8]
24050d48:	6818      	ldr	r0, [r3, #0]
24050d4a:	1dba      	adds	r2, r7, #6
24050d4c:	2301      	movs	r3, #1
24050d4e:	2100      	movs	r1, #0
24050d50:	f7ff fee2 	bl	24050b18 <OSPI_WriteBytes>
        wait_for_status(STATUS_WIP_Msk, 0, TMO_DEFAULT);
24050d54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
24050d58:	2100      	movs	r1, #0
24050d5a:	2001      	movs	r0, #1
24050d5c:	f7ff ff24 	bl	24050ba8 <wait_for_status>

        OSPI_ReadBytes(CMD(RDSR), 0, &rd_status, 1);
24050d60:	4b09      	ldr	r3, [pc, #36]	; (24050d88 <init_mx_issi+0x84>)
24050d62:	689b      	ldr	r3, [r3, #8]
24050d64:	681b      	ldr	r3, [r3, #0]
24050d66:	1cd8      	adds	r0, r3, #3
24050d68:	1dfa      	adds	r2, r7, #7
24050d6a:	2301      	movs	r3, #1
24050d6c:	2100      	movs	r1, #0
24050d6e:	f7ff fe89 	bl	24050a84 <OSPI_ReadBytes>
        DBG("QE bit set. Status: %02X\n", rd_status);
24050d72:	79fb      	ldrb	r3, [r7, #7]
24050d74:	4619      	mov	r1, r3
24050d76:	4806      	ldr	r0, [pc, #24]	; (24050d90 <init_mx_issi+0x8c>)
24050d78:	f010 fca6 	bl	240616c8 <iprintf>
    }
}
24050d7c:	bf00      	nop
24050d7e:	3708      	adds	r7, #8
24050d80:	46bd      	mov	sp, r7
24050d82:	bd80      	pop	{r7, pc}
24050d84:	240641dc 	.word	0x240641dc
24050d88:	20000010 	.word	0x20000010
24050d8c:	24062b30 	.word	0x24062b30
24050d90:	24062b40 	.word	0x24062b40

24050d94 <init_spansion>:

static void init_spansion(void)
{
24050d94:	b5b0      	push	{r4, r5, r7, lr}
24050d96:	b086      	sub	sp, #24
24050d98:	af04      	add	r7, sp, #16
    uint8_t rd_cr2;
    uint8_t rd_cr3;
    uint8_t rd_cr4;

    // SR[1-2]V
    OSPI_ReadBytes(CMD(RDSR), 0x00, &rd_sr1, 1);
24050d9a:	4b44      	ldr	r3, [pc, #272]	; (24050eac <init_spansion+0x118>)
24050d9c:	689b      	ldr	r3, [r3, #8]
24050d9e:	681b      	ldr	r3, [r3, #0]
24050da0:	1cd8      	adds	r0, r3, #3
24050da2:	1dfa      	adds	r2, r7, #7
24050da4:	2301      	movs	r3, #1
24050da6:	2100      	movs	r1, #0
24050da8:	f7ff fe6c 	bl	24050a84 <OSPI_ReadBytes>
    OSPI_ReadBytes(CMD(RDAR), 0x00800001, &rd_sr2, 1);
24050dac:	4b3f      	ldr	r3, [pc, #252]	; (24050eac <init_spansion+0x118>)
24050dae:	689b      	ldr	r3, [r3, #8]
24050db0:	681b      	ldr	r3, [r3, #0]
24050db2:	f103 0009 	add.w	r0, r3, #9
24050db6:	1dba      	adds	r2, r7, #6
24050db8:	2301      	movs	r3, #1
24050dba:	493d      	ldr	r1, [pc, #244]	; (24050eb0 <init_spansion+0x11c>)
24050dbc:	f7ff fe62 	bl	24050a84 <OSPI_ReadBytes>

    // CR[1-4]NV
    OSPI_ReadBytes(CMD(RDCR), 0x00, &rd_cr1, 1);
24050dc0:	4b3a      	ldr	r3, [pc, #232]	; (24050eac <init_spansion+0x118>)
24050dc2:	689b      	ldr	r3, [r3, #8]
24050dc4:	681b      	ldr	r3, [r3, #0]
24050dc6:	1d98      	adds	r0, r3, #6
24050dc8:	1d7a      	adds	r2, r7, #5
24050dca:	2301      	movs	r3, #1
24050dcc:	2100      	movs	r1, #0
24050dce:	f7ff fe59 	bl	24050a84 <OSPI_ReadBytes>
    OSPI_ReadBytes(CMD(RDAR), 0x03, &rd_cr2, 1);
24050dd2:	4b36      	ldr	r3, [pc, #216]	; (24050eac <init_spansion+0x118>)
24050dd4:	689b      	ldr	r3, [r3, #8]
24050dd6:	681b      	ldr	r3, [r3, #0]
24050dd8:	f103 0009 	add.w	r0, r3, #9
24050ddc:	1d3a      	adds	r2, r7, #4
24050dde:	2301      	movs	r3, #1
24050de0:	2103      	movs	r1, #3
24050de2:	f7ff fe4f 	bl	24050a84 <OSPI_ReadBytes>
    OSPI_ReadBytes(CMD(RDAR), 0x04, &rd_cr3, 1);
24050de6:	4b31      	ldr	r3, [pc, #196]	; (24050eac <init_spansion+0x118>)
24050de8:	689b      	ldr	r3, [r3, #8]
24050dea:	681b      	ldr	r3, [r3, #0]
24050dec:	f103 0009 	add.w	r0, r3, #9
24050df0:	1cfa      	adds	r2, r7, #3
24050df2:	2301      	movs	r3, #1
24050df4:	2104      	movs	r1, #4
24050df6:	f7ff fe45 	bl	24050a84 <OSPI_ReadBytes>
    OSPI_ReadBytes(CMD(RDAR), 0x05, &rd_cr4, 1);
24050dfa:	4b2c      	ldr	r3, [pc, #176]	; (24050eac <init_spansion+0x118>)
24050dfc:	689b      	ldr	r3, [r3, #8]
24050dfe:	681b      	ldr	r3, [r3, #0]
24050e00:	f103 0009 	add.w	r0, r3, #9
24050e04:	1cba      	adds	r2, r7, #2
24050e06:	2301      	movs	r3, #1
24050e08:	2105      	movs	r1, #5
24050e0a:	f7ff fe3b 	bl	24050a84 <OSPI_ReadBytes>

    DBG("SR1: %02X SR2: %02X CR: %02X %02X %02X %02X\n", rd_sr1, rd_sr2, rd_cr1, rd_cr2, rd_cr3, rd_cr4);
24050e0e:	79fb      	ldrb	r3, [r7, #7]
24050e10:	4618      	mov	r0, r3
24050e12:	79bb      	ldrb	r3, [r7, #6]
24050e14:	461c      	mov	r4, r3
24050e16:	797b      	ldrb	r3, [r7, #5]
24050e18:	461d      	mov	r5, r3
24050e1a:	793b      	ldrb	r3, [r7, #4]
24050e1c:	78fa      	ldrb	r2, [r7, #3]
24050e1e:	78b9      	ldrb	r1, [r7, #2]
24050e20:	9102      	str	r1, [sp, #8]
24050e22:	9201      	str	r2, [sp, #4]
24050e24:	9300      	str	r3, [sp, #0]
24050e26:	462b      	mov	r3, r5
24050e28:	4622      	mov	r2, r4
24050e2a:	4601      	mov	r1, r0
24050e2c:	4821      	ldr	r0, [pc, #132]	; (24050eb4 <init_spansion+0x120>)
24050e2e:	f010 fc4b 	bl	240616c8 <iprintf>

    if (flash.config->set_quad && ((rd_cr1 & S_CR_QUAD_Msk) == 0)) {
24050e32:	4b1e      	ldr	r3, [pc, #120]	; (24050eac <init_spansion+0x118>)
24050e34:	689b      	ldr	r3, [r3, #8]
24050e36:	7d1b      	ldrb	r3, [r3, #20]
24050e38:	2b00      	cmp	r3, #0
24050e3a:	d033      	beq.n	24050ea4 <init_spansion+0x110>
24050e3c:	797b      	ldrb	r3, [r7, #5]
24050e3e:	f003 0302 	and.w	r3, r3, #2
24050e42:	2b00      	cmp	r3, #0
24050e44:	d12e      	bne.n	24050ea4 <init_spansion+0x110>
        // WRSR/WRR writes to {status, config}
        // Clear SR1V and set bit 1 (QUAD) in CR1NV
        uint8_t wr_sr[] = {0x00, S_CR_QUAD_Msk};
24050e46:	f44f 7300 	mov.w	r3, #512	; 0x200
24050e4a:	803b      	strh	r3, [r7, #0]

        DBG("Setting QUAD in CR1V.\n");
24050e4c:	481a      	ldr	r0, [pc, #104]	; (24050eb8 <init_spansion+0x124>)
24050e4e:	f010 fca1 	bl	24061794 <puts>

        // Enable write to be allowed to change the registers
        OSPI_NOR_WriteEnable();
24050e52:	f7ff ff41 	bl	24050cd8 <OSPI_NOR_WriteEnable>

        OSPI_WriteBytes(CMD(WRSR), 0, wr_sr, sizeof(wr_sr));
24050e56:	4b15      	ldr	r3, [pc, #84]	; (24050eac <init_spansion+0x118>)
24050e58:	689b      	ldr	r3, [r3, #8]
24050e5a:	6818      	ldr	r0, [r3, #0]
24050e5c:	463a      	mov	r2, r7
24050e5e:	2302      	movs	r3, #2
24050e60:	2100      	movs	r1, #0
24050e62:	f7ff fe59 	bl	24050b18 <OSPI_WriteBytes>

        // Wait until WIP bit is cleared
        wait_for_status(STATUS_WIP_Msk, 0, TMO_DEFAULT);
24050e66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
24050e6a:	2100      	movs	r1, #0
24050e6c:	2001      	movs	r0, #1
24050e6e:	f7ff fe9b 	bl	24050ba8 <wait_for_status>

        OSPI_ReadBytes(CMD(RDSR), 0, &rd_sr1, 1);
24050e72:	4b0e      	ldr	r3, [pc, #56]	; (24050eac <init_spansion+0x118>)
24050e74:	689b      	ldr	r3, [r3, #8]
24050e76:	681b      	ldr	r3, [r3, #0]
24050e78:	1cd8      	adds	r0, r3, #3
24050e7a:	1dfa      	adds	r2, r7, #7
24050e7c:	2301      	movs	r3, #1
24050e7e:	2100      	movs	r1, #0
24050e80:	f7ff fe00 	bl	24050a84 <OSPI_ReadBytes>
        OSPI_ReadBytes(CMD(RDCR), 0, &rd_cr1, 1);
24050e84:	4b09      	ldr	r3, [pc, #36]	; (24050eac <init_spansion+0x118>)
24050e86:	689b      	ldr	r3, [r3, #8]
24050e88:	681b      	ldr	r3, [r3, #0]
24050e8a:	1d98      	adds	r0, r3, #6
24050e8c:	1d7a      	adds	r2, r7, #5
24050e8e:	2301      	movs	r3, #1
24050e90:	2100      	movs	r1, #0
24050e92:	f7ff fdf7 	bl	24050a84 <OSPI_ReadBytes>
        DBG("QUAD bit set. SR: %02X CR: %02X\n", rd_sr1, rd_cr1);
24050e96:	79fb      	ldrb	r3, [r7, #7]
24050e98:	4619      	mov	r1, r3
24050e9a:	797b      	ldrb	r3, [r7, #5]
24050e9c:	461a      	mov	r2, r3
24050e9e:	4807      	ldr	r0, [pc, #28]	; (24050ebc <init_spansion+0x128>)
24050ea0:	f010 fc12 	bl	240616c8 <iprintf>
    }
}
24050ea4:	bf00      	nop
24050ea6:	3708      	adds	r7, #8
24050ea8:	46bd      	mov	sp, r7
24050eaa:	bdb0      	pop	{r4, r5, r7, pc}
24050eac:	20000010 	.word	0x20000010
24050eb0:	00800001 	.word	0x00800001
24050eb4:	24062b5c 	.word	0x24062b5c
24050eb8:	24062b8c 	.word	0x24062b8c
24050ebc:	24062ba4 	.word	0x24062ba4

24050ec0 <init_winbond>:

static void init_winbond(void)
{
24050ec0:	b580      	push	{r7, lr}
24050ec2:	b086      	sub	sp, #24
24050ec4:	af00      	add	r7, sp, #0
	//                                    cmd   i_lines  a_lines  a_size         d_lines  dummy
	const flash_cmd_t cmd_rdsr2 = CMD_DEF(0x35, LINES_1, LINES_0, ADDR_SIZE_24B, LINES_1, 0);
24050ec6:	4a7f      	ldr	r2, [pc, #508]	; (240510c4 <init_winbond+0x204>)
24050ec8:	f107 0314 	add.w	r3, r7, #20
24050ecc:	6812      	ldr	r2, [r2, #0]
24050ece:	4611      	mov	r1, r2
24050ed0:	8019      	strh	r1, [r3, #0]
24050ed2:	3302      	adds	r3, #2
24050ed4:	0c12      	lsrs	r2, r2, #16
24050ed6:	701a      	strb	r2, [r3, #0]
	const flash_cmd_t cmd_rdsr3 = CMD_DEF(0x15, LINES_1, LINES_0, ADDR_SIZE_24B, LINES_1, 0);
24050ed8:	4a7b      	ldr	r2, [pc, #492]	; (240510c8 <init_winbond+0x208>)
24050eda:	f107 0310 	add.w	r3, r7, #16
24050ede:	6812      	ldr	r2, [r2, #0]
24050ee0:	4611      	mov	r1, r2
24050ee2:	8019      	strh	r1, [r3, #0]
24050ee4:	3302      	adds	r3, #2
24050ee6:	0c12      	lsrs	r2, r2, #16
24050ee8:	701a      	strb	r2, [r3, #0]
	const flash_cmd_t cmd_wrsr2 = CMD_DEF(0x31, LINES_1, LINES_0, ADDR_SIZE_24B, LINES_1, 0);
24050eea:	4a78      	ldr	r2, [pc, #480]	; (240510cc <init_winbond+0x20c>)
24050eec:	f107 030c 	add.w	r3, r7, #12
24050ef0:	6812      	ldr	r2, [r2, #0]
24050ef2:	4611      	mov	r1, r2
24050ef4:	8019      	strh	r1, [r3, #0]
24050ef6:	3302      	adds	r3, #2
24050ef8:	0c12      	lsrs	r2, r2, #16
24050efa:	701a      	strb	r2, [r3, #0]
	const flash_cmd_t cmd_wrsr3 = CMD_DEF(0x11, LINES_1, LINES_0, ADDR_SIZE_24B, LINES_1, 0);
24050efc:	4a74      	ldr	r2, [pc, #464]	; (240510d0 <init_winbond+0x210>)
24050efe:	f107 0308 	add.w	r3, r7, #8
24050f02:	6812      	ldr	r2, [r2, #0]
24050f04:	4611      	mov	r1, r2
24050f06:	8019      	strh	r1, [r3, #0]
24050f08:	3302      	adds	r3, #2
24050f0a:	0c12      	lsrs	r2, r2, #16
24050f0c:	701a      	strb	r2, [r3, #0]

	const bool is_quad = flash.config->set_quad;
24050f0e:	4b71      	ldr	r3, [pc, #452]	; (240510d4 <init_winbond+0x214>)
24050f10:	689b      	ldr	r3, [r3, #8]
24050f12:	7d1b      	ldrb	r3, [r3, #20]
24050f14:	75fb      	strb	r3, [r7, #23]

	uint8_t sr1, sr2, sr3;

	OSPI_ReadBytes(CMD(RDSR),  0, &sr1, 1);
24050f16:	4b6f      	ldr	r3, [pc, #444]	; (240510d4 <init_winbond+0x214>)
24050f18:	689b      	ldr	r3, [r3, #8]
24050f1a:	681b      	ldr	r3, [r3, #0]
24050f1c:	1cd8      	adds	r0, r3, #3
24050f1e:	1dfa      	adds	r2, r7, #7
24050f20:	2301      	movs	r3, #1
24050f22:	2100      	movs	r1, #0
24050f24:	f7ff fdae 	bl	24050a84 <OSPI_ReadBytes>
	OSPI_ReadBytes(&cmd_rdsr2, 0, &sr2, 1);
24050f28:	1dba      	adds	r2, r7, #6
24050f2a:	f107 0014 	add.w	r0, r7, #20
24050f2e:	2301      	movs	r3, #1
24050f30:	2100      	movs	r1, #0
24050f32:	f7ff fda7 	bl	24050a84 <OSPI_ReadBytes>
	OSPI_ReadBytes(&cmd_rdsr3, 0, &sr3, 1);
24050f36:	1d7a      	adds	r2, r7, #5
24050f38:	f107 0010 	add.w	r0, r7, #16
24050f3c:	2301      	movs	r3, #1
24050f3e:	2100      	movs	r1, #0
24050f40:	f7ff fda0 	bl	24050a84 <OSPI_ReadBytes>
	DBG("Winbond SR1: %02X SR2: %02X SR3: %02X\n", sr1, sr2, sr3);
24050f44:	79fb      	ldrb	r3, [r7, #7]
24050f46:	4619      	mov	r1, r3
24050f48:	79bb      	ldrb	r3, [r7, #6]
24050f4a:	461a      	mov	r2, r3
24050f4c:	797b      	ldrb	r3, [r7, #5]
24050f4e:	4862      	ldr	r0, [pc, #392]	; (240510d8 <init_winbond+0x218>)
24050f50:	f010 fbba 	bl	240616c8 <iprintf>

	// try to clear writeable protect bits if set

	if (sr1 & WB_SR1_PROTECT_Msk) {
24050f54:	79fb      	ldrb	r3, [r7, #7]
24050f56:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
24050f5a:	2b00      	cmp	r3, #0
24050f5c:	d027      	beq.n	24050fae <init_winbond+0xee>
		DBG("clearing SR1 protect bits\n");
24050f5e:	485f      	ldr	r0, [pc, #380]	; (240510dc <init_winbond+0x21c>)
24050f60:	f010 fc18 	bl	24061794 <puts>
		sr1 = 0;
24050f64:	2300      	movs	r3, #0
24050f66:	71fb      	strb	r3, [r7, #7]

		OSPI_NOR_WriteEnable();
24050f68:	f7ff feb6 	bl	24050cd8 <OSPI_NOR_WriteEnable>
		OSPI_WriteBytes(CMD(WRSR), 0, &sr1, 1);
24050f6c:	4b59      	ldr	r3, [pc, #356]	; (240510d4 <init_winbond+0x214>)
24050f6e:	689b      	ldr	r3, [r3, #8]
24050f70:	6818      	ldr	r0, [r3, #0]
24050f72:	1dfa      	adds	r2, r7, #7
24050f74:	2301      	movs	r3, #1
24050f76:	2100      	movs	r1, #0
24050f78:	f7ff fdce 	bl	24050b18 <OSPI_WriteBytes>
		wait_for_status(STATUS_WIP_Msk, 0, TMO_DEFAULT);
24050f7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
24050f80:	2100      	movs	r1, #0
24050f82:	2001      	movs	r0, #1
24050f84:	f7ff fe10 	bl	24050ba8 <wait_for_status>

		OSPI_ReadBytes(CMD(RDSR), 0, &sr1, 1);
24050f88:	4b52      	ldr	r3, [pc, #328]	; (240510d4 <init_winbond+0x214>)
24050f8a:	689b      	ldr	r3, [r3, #8]
24050f8c:	681b      	ldr	r3, [r3, #0]
24050f8e:	1cd8      	adds	r0, r3, #3
24050f90:	1dfa      	adds	r2, r7, #7
24050f92:	2301      	movs	r3, #1
24050f94:	2100      	movs	r1, #0
24050f96:	f7ff fd75 	bl	24050a84 <OSPI_ReadBytes>
		if (sr1 & WB_SR1_PROTECT_Msk)
24050f9a:	79fb      	ldrb	r3, [r7, #7]
24050f9c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
24050fa0:	2b00      	cmp	r3, #0
24050fa2:	d004      	beq.n	24050fae <init_winbond+0xee>
			DBG("SR1: %02X, change failed\n", sr1);
24050fa4:	79fb      	ldrb	r3, [r7, #7]
24050fa6:	4619      	mov	r1, r3
24050fa8:	484d      	ldr	r0, [pc, #308]	; (240510e0 <init_winbond+0x220>)
24050faa:	f010 fb8d 	bl	240616c8 <iprintf>
	}

	if ((sr2 & WB_SR2_PROTECT_Msk) || (is_quad && !(sr2 & 1<<WB_SR2_QE_Pos))) {
24050fae:	79bb      	ldrb	r3, [r7, #6]
24050fb0:	f003 0341 	and.w	r3, r3, #65	; 0x41
24050fb4:	2b00      	cmp	r3, #0
24050fb6:	d107      	bne.n	24050fc8 <init_winbond+0x108>
24050fb8:	7dfb      	ldrb	r3, [r7, #23]
24050fba:	2b00      	cmp	r3, #0
24050fbc:	d039      	beq.n	24051032 <init_winbond+0x172>
24050fbe:	79bb      	ldrb	r3, [r7, #6]
24050fc0:	f003 0302 	and.w	r3, r3, #2
24050fc4:	2b00      	cmp	r3, #0
24050fc6:	d134      	bne.n	24051032 <init_winbond+0x172>
		DBG("clearing SR2 protect bits\n");
24050fc8:	4846      	ldr	r0, [pc, #280]	; (240510e4 <init_winbond+0x224>)
24050fca:	f010 fbe3 	bl	24061794 <puts>
		sr2 = 0;
24050fce:	2300      	movs	r3, #0
24050fd0:	71bb      	strb	r3, [r7, #6]

		if (is_quad) {
24050fd2:	7dfb      	ldrb	r3, [r7, #23]
24050fd4:	2b00      	cmp	r3, #0
24050fd6:	d004      	beq.n	24050fe2 <init_winbond+0x122>
			DBG("and enabling quad mode\n");
24050fd8:	4843      	ldr	r0, [pc, #268]	; (240510e8 <init_winbond+0x228>)
24050fda:	f010 fbdb 	bl	24061794 <puts>
			sr2 = 1<<WB_SR2_QE_Pos;
24050fde:	2302      	movs	r3, #2
24050fe0:	71bb      	strb	r3, [r7, #6]
		}

		OSPI_NOR_WriteEnable();
24050fe2:	f7ff fe79 	bl	24050cd8 <OSPI_NOR_WriteEnable>
		OSPI_WriteBytes(&cmd_wrsr2, 0, &sr2, 1);
24050fe6:	1dba      	adds	r2, r7, #6
24050fe8:	f107 000c 	add.w	r0, r7, #12
24050fec:	2301      	movs	r3, #1
24050fee:	2100      	movs	r1, #0
24050ff0:	f7ff fd92 	bl	24050b18 <OSPI_WriteBytes>
		wait_for_status(STATUS_WIP_Msk, 0, TMO_DEFAULT);
24050ff4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
24050ff8:	2100      	movs	r1, #0
24050ffa:	2001      	movs	r0, #1
24050ffc:	f7ff fdd4 	bl	24050ba8 <wait_for_status>

		OSPI_ReadBytes(&cmd_rdsr2, 0, &sr2, 1);
24051000:	1dba      	adds	r2, r7, #6
24051002:	f107 0014 	add.w	r0, r7, #20
24051006:	2301      	movs	r3, #1
24051008:	2100      	movs	r1, #0
2405100a:	f7ff fd3b 	bl	24050a84 <OSPI_ReadBytes>
		if ((sr2 & WB_SR2_PROTECT_Msk) || (is_quad && !(sr2 & 1<<WB_SR2_QE_Pos)))
2405100e:	79bb      	ldrb	r3, [r7, #6]
24051010:	f003 0341 	and.w	r3, r3, #65	; 0x41
24051014:	2b00      	cmp	r3, #0
24051016:	d107      	bne.n	24051028 <init_winbond+0x168>
24051018:	7dfb      	ldrb	r3, [r7, #23]
2405101a:	2b00      	cmp	r3, #0
2405101c:	d009      	beq.n	24051032 <init_winbond+0x172>
2405101e:	79bb      	ldrb	r3, [r7, #6]
24051020:	f003 0302 	and.w	r3, r3, #2
24051024:	2b00      	cmp	r3, #0
24051026:	d104      	bne.n	24051032 <init_winbond+0x172>
			DBG("SR2: %02X, change failed\n", sr2);
24051028:	79bb      	ldrb	r3, [r7, #6]
2405102a:	4619      	mov	r1, r3
2405102c:	482f      	ldr	r0, [pc, #188]	; (240510ec <init_winbond+0x22c>)
2405102e:	f010 fb4b 	bl	240616c8 <iprintf>
	}

	if ((sr3 & WB_SR3_PROTECT_Msk) || ((sr3 & WB_SR3_DRV_Msk) != WB_SR3_DRV_Val_50)) {
24051032:	797b      	ldrb	r3, [r7, #5]
24051034:	f003 0304 	and.w	r3, r3, #4
24051038:	2b00      	cmp	r3, #0
2405103a:	d104      	bne.n	24051046 <init_winbond+0x186>
2405103c:	797b      	ldrb	r3, [r7, #5]
2405103e:	f003 0360 	and.w	r3, r3, #96	; 0x60
24051042:	2b40      	cmp	r3, #64	; 0x40
24051044:	d029      	beq.n	2405109a <init_winbond+0x1da>
		DBG("clearing SR3 protect bits, setting drive strength 50%%\n");
24051046:	482a      	ldr	r0, [pc, #168]	; (240510f0 <init_winbond+0x230>)
24051048:	f010 fb3e 	bl	240616c8 <iprintf>
		sr3 = WB_SR3_DRV_Val_50;
2405104c:	2340      	movs	r3, #64	; 0x40
2405104e:	717b      	strb	r3, [r7, #5]

		OSPI_NOR_WriteEnable();
24051050:	f7ff fe42 	bl	24050cd8 <OSPI_NOR_WriteEnable>
		OSPI_WriteBytes(&cmd_wrsr3, 0, &sr3, 1);
24051054:	1d7a      	adds	r2, r7, #5
24051056:	f107 0008 	add.w	r0, r7, #8
2405105a:	2301      	movs	r3, #1
2405105c:	2100      	movs	r1, #0
2405105e:	f7ff fd5b 	bl	24050b18 <OSPI_WriteBytes>
		wait_for_status(STATUS_WIP_Msk, 0, TMO_DEFAULT);
24051062:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
24051066:	2100      	movs	r1, #0
24051068:	2001      	movs	r0, #1
2405106a:	f7ff fd9d 	bl	24050ba8 <wait_for_status>

		OSPI_ReadBytes(&cmd_rdsr3, 0, &sr3, 1);
2405106e:	1d7a      	adds	r2, r7, #5
24051070:	f107 0010 	add.w	r0, r7, #16
24051074:	2301      	movs	r3, #1
24051076:	2100      	movs	r1, #0
24051078:	f7ff fd04 	bl	24050a84 <OSPI_ReadBytes>
		if ((sr3 & WB_SR3_PROTECT_Msk) || ((sr3 & WB_SR3_DRV_Msk) != WB_SR3_DRV_Val_50))
2405107c:	797b      	ldrb	r3, [r7, #5]
2405107e:	f003 0304 	and.w	r3, r3, #4
24051082:	2b00      	cmp	r3, #0
24051084:	d104      	bne.n	24051090 <init_winbond+0x1d0>
24051086:	797b      	ldrb	r3, [r7, #5]
24051088:	f003 0360 	and.w	r3, r3, #96	; 0x60
2405108c:	2b40      	cmp	r3, #64	; 0x40
2405108e:	d004      	beq.n	2405109a <init_winbond+0x1da>
			DBG("SR3: %02X, change failed\n", sr3);
24051090:	797b      	ldrb	r3, [r7, #5]
24051092:	4619      	mov	r1, r3
24051094:	4817      	ldr	r0, [pc, #92]	; (240510f4 <init_winbond+0x234>)
24051096:	f010 fb17 	bl	240616c8 <iprintf>
	}

    if (is_quad && !(sr2 & 1<<WB_SR2_QE_Pos)) {
2405109a:	7dfb      	ldrb	r3, [r7, #23]
2405109c:	2b00      	cmp	r3, #0
2405109e:	d00d      	beq.n	240510bc <init_winbond+0x1fc>
240510a0:	79bb      	ldrb	r3, [r7, #6]
240510a2:	f003 0302 	and.w	r3, r3, #2
240510a6:	2b00      	cmp	r3, #0
240510a8:	d108      	bne.n	240510bc <init_winbond+0x1fc>
        DBG("Windbond quad mode not enabled, falling back to SPI\n");
240510aa:	4813      	ldr	r0, [pc, #76]	; (240510f8 <init_winbond+0x238>)
240510ac:	f010 fb72 	bl	24061794 <puts>
        flash.config = &config_spi_24b;
240510b0:	4b08      	ldr	r3, [pc, #32]	; (240510d4 <init_winbond+0x214>)
240510b2:	4a12      	ldr	r2, [pc, #72]	; (240510fc <init_winbond+0x23c>)
240510b4:	609a      	str	r2, [r3, #8]
        flash.name = "Winbond SPI";
240510b6:	4b07      	ldr	r3, [pc, #28]	; (240510d4 <init_winbond+0x214>)
240510b8:	4a11      	ldr	r2, [pc, #68]	; (24051100 <init_winbond+0x240>)
240510ba:	60da      	str	r2, [r3, #12]
    }
}
240510bc:	bf00      	nop
240510be:	3718      	adds	r7, #24
240510c0:	46bd      	mov	sp, r7
240510c2:	bd80      	pop	{r7, pc}
240510c4:	24062d0c 	.word	0x24062d0c
240510c8:	24062d10 	.word	0x24062d10
240510cc:	24062d14 	.word	0x24062d14
240510d0:	24062d18 	.word	0x24062d18
240510d4:	20000010 	.word	0x20000010
240510d8:	24062bc8 	.word	0x24062bc8
240510dc:	24062bf0 	.word	0x24062bf0
240510e0:	24062c0c 	.word	0x24062c0c
240510e4:	24062c28 	.word	0x24062c28
240510e8:	24062c44 	.word	0x24062c44
240510ec:	24062c5c 	.word	0x24062c5c
240510f0:	24062c78 	.word	0x24062c78
240510f4:	24062cb0 	.word	0x24062cb0
240510f8:	24062ccc 	.word	0x24062ccc
240510fc:	24063fe4 	.word	0x24063fe4
24051100:	24062d00 	.word	0x24062d00

24051104 <OSPI_Init>:
    // Assumes that erase sizes are sorted: 4 > 3 > 2 > 1.
    return flash.config->erase_sizes[0];
}

void OSPI_Init(OSPI_HandleTypeDef *hospi)
{
24051104:	b580      	push	{r7, lr}
24051106:	b084      	sub	sp, #16
24051108:	af00      	add	r7, sp, #0
2405110a:	6078      	str	r0, [r7, #4]
    uint8_t status;

    flash.hospi = hospi;
2405110c:	4a4c      	ldr	r2, [pc, #304]	; (24051240 <OSPI_Init+0x13c>)
2405110e:	687b      	ldr	r3, [r7, #4]
24051110:	6013      	str	r3, [r2, #0]

    // Enable Reset
    OSPI_WriteBytes(CMD(RSTEN), 0, NULL, 0);
24051112:	4b4b      	ldr	r3, [pc, #300]	; (24051240 <OSPI_Init+0x13c>)
24051114:	689b      	ldr	r3, [r3, #8]
24051116:	681b      	ldr	r3, [r3, #0]
24051118:	f103 0012 	add.w	r0, r3, #18
2405111c:	2300      	movs	r3, #0
2405111e:	2200      	movs	r2, #0
24051120:	2100      	movs	r1, #0
24051122:	f7ff fcf9 	bl	24050b18 <OSPI_WriteBytes>
    HAL_Delay(2);
24051126:	2002      	movs	r0, #2
24051128:	f002 fe5c 	bl	24053de4 <HAL_Delay>

    // Reset
    OSPI_WriteBytes(CMD(RST), 0, NULL, 0);
2405112c:	4b44      	ldr	r3, [pc, #272]	; (24051240 <OSPI_Init+0x13c>)
2405112e:	689b      	ldr	r3, [r3, #8]
24051130:	681b      	ldr	r3, [r3, #0]
24051132:	f103 0015 	add.w	r0, r3, #21
24051136:	2300      	movs	r3, #0
24051138:	2200      	movs	r2, #0
2405113a:	2100      	movs	r1, #0
2405113c:	f7ff fcec 	bl	24050b18 <OSPI_WriteBytes>
    HAL_Delay(20);
24051140:	2014      	movs	r0, #20
24051142:	f002 fe4f 	bl	24053de4 <HAL_Delay>

    // Read ID
    OSPI_ReadBytes(CMD(RDID), 0, &flash.jedec_id.u8[0], 3);
24051146:	4b3e      	ldr	r3, [pc, #248]	; (24051240 <OSPI_Init+0x13c>)
24051148:	689b      	ldr	r3, [r3, #8]
2405114a:	681b      	ldr	r3, [r3, #0]
2405114c:	f103 000f 	add.w	r0, r3, #15
24051150:	2303      	movs	r3, #3
24051152:	4a3c      	ldr	r2, [pc, #240]	; (24051244 <OSPI_Init+0x140>)
24051154:	2100      	movs	r1, #0
24051156:	f7ff fc95 	bl	24050a84 <OSPI_ReadBytes>
    DBG("JEDEC_ID: %02X %02X %02X\n", flash.jedec_id.u8[0], flash.jedec_id.u8[1], flash.jedec_id.u8[2]);
2405115a:	4b39      	ldr	r3, [pc, #228]	; (24051240 <OSPI_Init+0x13c>)
2405115c:	791b      	ldrb	r3, [r3, #4]
2405115e:	4619      	mov	r1, r3
24051160:	4b37      	ldr	r3, [pc, #220]	; (24051240 <OSPI_Init+0x13c>)
24051162:	795b      	ldrb	r3, [r3, #5]
24051164:	461a      	mov	r2, r3
24051166:	4b36      	ldr	r3, [pc, #216]	; (24051240 <OSPI_Init+0x13c>)
24051168:	799b      	ldrb	r3, [r3, #6]
2405116a:	4837      	ldr	r0, [pc, #220]	; (24051248 <OSPI_Init+0x144>)
2405116c:	f010 faac 	bl	240616c8 <iprintf>

    // Check for known bad IDs
    if (((flash.jedec_id.u32 & 0xffffff) == 0xffffff) ||
24051170:	4b33      	ldr	r3, [pc, #204]	; (24051240 <OSPI_Init+0x13c>)
24051172:	685b      	ldr	r3, [r3, #4]
24051174:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
24051178:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
2405117c:	4293      	cmp	r3, r2
2405117e:	d005      	beq.n	2405118c <OSPI_Init+0x88>
        ((flash.jedec_id.u32 & 0xffffff) == 0x000000)) {
24051180:	4b2f      	ldr	r3, [pc, #188]	; (24051240 <OSPI_Init+0x13c>)
24051182:	685b      	ldr	r3, [r3, #4]
24051184:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    if (((flash.jedec_id.u32 & 0xffffff) == 0xffffff) ||
24051188:	2b00      	cmp	r3, #0
2405118a:	d106      	bne.n	2405119a <OSPI_Init+0x96>
        assert(!"Can't communicate with the external flash! Please check the soldering.");
2405118c:	4b2f      	ldr	r3, [pc, #188]	; (2405124c <OSPI_Init+0x148>)
2405118e:	4a30      	ldr	r2, [pc, #192]	; (24051250 <OSPI_Init+0x14c>)
24051190:	f240 3149 	movw	r1, #841	; 0x349
24051194:	482f      	ldr	r0, [pc, #188]	; (24051254 <OSPI_Init+0x150>)
24051196:	f010 f939 	bl	2406140c <__assert_func>
    }

    OSPI_ReadBytes(CMD(RDSR), 0, &status, 1);
2405119a:	4b29      	ldr	r3, [pc, #164]	; (24051240 <OSPI_Init+0x13c>)
2405119c:	689b      	ldr	r3, [r3, #8]
2405119e:	681b      	ldr	r3, [r3, #0]
240511a0:	1cd8      	adds	r0, r3, #3
240511a2:	f107 020b 	add.w	r2, r7, #11
240511a6:	2301      	movs	r3, #1
240511a8:	2100      	movs	r1, #0
240511aa:	f7ff fc6b 	bl	24050a84 <OSPI_ReadBytes>
    DBG("Status: %02X\n", status);
240511ae:	7afb      	ldrb	r3, [r7, #11]
240511b0:	4619      	mov	r1, r3
240511b2:	4829      	ldr	r0, [pc, #164]	; (24051258 <OSPI_Init+0x154>)
240511b4:	f010 fa88 	bl	240616c8 <iprintf>

    for (int i = 0; i < ARRAY_SIZE(jedec_map); i++) {
240511b8:	2300      	movs	r3, #0
240511ba:	60fb      	str	r3, [r7, #12]
240511bc:	e02e      	b.n	2405121c <OSPI_Init+0x118>
        if ((flash.jedec_id.u32 & 0xffffff) == (jedec_map[i].jedec_id.u32 & 0xffffff)) {
240511be:	4b20      	ldr	r3, [pc, #128]	; (24051240 <OSPI_Init+0x13c>)
240511c0:	6859      	ldr	r1, [r3, #4]
240511c2:	4826      	ldr	r0, [pc, #152]	; (2405125c <OSPI_Init+0x158>)
240511c4:	68fa      	ldr	r2, [r7, #12]
240511c6:	4613      	mov	r3, r2
240511c8:	005b      	lsls	r3, r3, #1
240511ca:	4413      	add	r3, r2
240511cc:	009b      	lsls	r3, r3, #2
240511ce:	4403      	add	r3, r0
240511d0:	681b      	ldr	r3, [r3, #0]
240511d2:	404b      	eors	r3, r1
240511d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
240511d8:	2b00      	cmp	r3, #0
240511da:	d11c      	bne.n	24051216 <OSPI_Init+0x112>
            flash.config = jedec_map[i].config;
240511dc:	491f      	ldr	r1, [pc, #124]	; (2405125c <OSPI_Init+0x158>)
240511de:	68fa      	ldr	r2, [r7, #12]
240511e0:	4613      	mov	r3, r2
240511e2:	005b      	lsls	r3, r3, #1
240511e4:	4413      	add	r3, r2
240511e6:	009b      	lsls	r3, r3, #2
240511e8:	440b      	add	r3, r1
240511ea:	3308      	adds	r3, #8
240511ec:	681b      	ldr	r3, [r3, #0]
240511ee:	4a14      	ldr	r2, [pc, #80]	; (24051240 <OSPI_Init+0x13c>)
240511f0:	6093      	str	r3, [r2, #8]
            flash.name = jedec_map[i].name;
240511f2:	491a      	ldr	r1, [pc, #104]	; (2405125c <OSPI_Init+0x158>)
240511f4:	68fa      	ldr	r2, [r7, #12]
240511f6:	4613      	mov	r3, r2
240511f8:	005b      	lsls	r3, r3, #1
240511fa:	4413      	add	r3, r2
240511fc:	009b      	lsls	r3, r3, #2
240511fe:	440b      	add	r3, r1
24051200:	3304      	adds	r3, #4
24051202:	681b      	ldr	r3, [r3, #0]
24051204:	4a0e      	ldr	r2, [pc, #56]	; (24051240 <OSPI_Init+0x13c>)
24051206:	60d3      	str	r3, [r2, #12]
            DBG("Found config: %s\n", flash.name);
24051208:	4b0d      	ldr	r3, [pc, #52]	; (24051240 <OSPI_Init+0x13c>)
2405120a:	68db      	ldr	r3, [r3, #12]
2405120c:	4619      	mov	r1, r3
2405120e:	4814      	ldr	r0, [pc, #80]	; (24051260 <OSPI_Init+0x15c>)
24051210:	f010 fa5a 	bl	240616c8 <iprintf>
            break;
24051214:	e005      	b.n	24051222 <OSPI_Init+0x11e>
    for (int i = 0; i < ARRAY_SIZE(jedec_map); i++) {
24051216:	68fb      	ldr	r3, [r7, #12]
24051218:	3301      	adds	r3, #1
2405121a:	60fb      	str	r3, [r7, #12]
2405121c:	68fb      	ldr	r3, [r7, #12]
2405121e:	2b10      	cmp	r3, #16
24051220:	d9cd      	bls.n	240511be <OSPI_Init+0xba>
        }
    }

    if (flash.config->init_fn) {
24051222:	4b07      	ldr	r3, [pc, #28]	; (24051240 <OSPI_Init+0x13c>)
24051224:	689b      	ldr	r3, [r3, #8]
24051226:	699b      	ldr	r3, [r3, #24]
24051228:	2b00      	cmp	r3, #0
2405122a:	d003      	beq.n	24051234 <OSPI_Init+0x130>
        flash.config->init_fn();
2405122c:	4b04      	ldr	r3, [pc, #16]	; (24051240 <OSPI_Init+0x13c>)
2405122e:	689b      	ldr	r3, [r3, #8]
24051230:	699b      	ldr	r3, [r3, #24]
24051232:	4798      	blx	r3
    }

    OSPI_EnableMemoryMappedMode();
24051234:	f7ff fcf4 	bl	24050c20 <OSPI_EnableMemoryMappedMode>
}
24051238:	bf00      	nop
2405123a:	3710      	adds	r7, #16
2405123c:	46bd      	mov	sp, r7
2405123e:	bd80      	pop	{r7, pc}
24051240:	20000010 	.word	0x20000010
24051244:	20000014 	.word	0x20000014
24051248:	24062d1c 	.word	0x24062d1c
2405124c:	24062d38 	.word	0x24062d38
24051250:	240641ec 	.word	0x240641ec
24051254:	240629c0 	.word	0x240629c0
24051258:	24062d84 	.word	0x24062d84
2405125c:	240640c4 	.word	0x240640c4
24051260:	24062d94 	.word	0x24062d94

24051264 <lcd_backlight_set>:
	HAL_DAC_Stop(&hdac1, DAC_CHANNEL_1);
	HAL_DAC_Stop(&hdac1, DAC_CHANNEL_2);
	HAL_DAC_Stop(&hdac2, DAC_CHANNEL_1);
}

void lcd_backlight_set(uint8_t brightness) {
24051264:	b580      	push	{r7, lr}
24051266:	b082      	sub	sp, #8
24051268:	af00      	add	r7, sp, #0
2405126a:	4603      	mov	r3, r0
2405126c:	71fb      	strb	r3, [r7, #7]
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_8B_R, brightness);
2405126e:	79fb      	ldrb	r3, [r7, #7]
24051270:	2208      	movs	r2, #8
24051272:	2100      	movs	r1, #0
24051274:	480f      	ldr	r0, [pc, #60]	; (240512b4 <lcd_backlight_set+0x50>)
24051276:	f004 fe8e 	bl	24055f96 <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_8B_R, brightness);
2405127a:	79fb      	ldrb	r3, [r7, #7]
2405127c:	2208      	movs	r2, #8
2405127e:	2110      	movs	r1, #16
24051280:	480c      	ldr	r0, [pc, #48]	; (240512b4 <lcd_backlight_set+0x50>)
24051282:	f004 fe88 	bl	24055f96 <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_8B_R, brightness);
24051286:	79fb      	ldrb	r3, [r7, #7]
24051288:	2208      	movs	r2, #8
2405128a:	2100      	movs	r1, #0
2405128c:	480a      	ldr	r0, [pc, #40]	; (240512b8 <lcd_backlight_set+0x54>)
2405128e:	f004 fe82 	bl	24055f96 <HAL_DAC_SetValue>

	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
24051292:	2100      	movs	r1, #0
24051294:	4807      	ldr	r0, [pc, #28]	; (240512b4 <lcd_backlight_set+0x50>)
24051296:	f004 fe2c 	bl	24055ef2 <HAL_DAC_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
2405129a:	2110      	movs	r1, #16
2405129c:	4805      	ldr	r0, [pc, #20]	; (240512b4 <lcd_backlight_set+0x50>)
2405129e:	f004 fe28 	bl	24055ef2 <HAL_DAC_Start>
	HAL_DAC_Start(&hdac2, DAC_CHANNEL_1);
240512a2:	2100      	movs	r1, #0
240512a4:	4804      	ldr	r0, [pc, #16]	; (240512b8 <lcd_backlight_set+0x54>)
240512a6:	f004 fe24 	bl	24055ef2 <HAL_DAC_Start>
}
240512aa:	bf00      	nop
240512ac:	3708      	adds	r7, #8
240512ae:	46bd      	mov	sp, r7
240512b0:	bd80      	pop	{r7, pc}
240512b2:	bf00      	nop
240512b4:	20000274 	.word	0x20000274
240512b8:	20000288 	.word	0x20000288

240512bc <lcd_init>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
	// Pull reset line(?) low. (Flakey without this)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
}

void lcd_init(SPI_HandleTypeDef *spi, LTDC_HandleTypeDef *ltdc) {
240512bc:	b580      	push	{r7, lr}
240512be:	b082      	sub	sp, #8
240512c0:	af00      	add	r7, sp, #0
240512c2:	6078      	str	r0, [r7, #4]
240512c4:	6039      	str	r1, [r7, #0]
// Wake
// Enable 3.3v
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
240512c6:	2200      	movs	r2, #0
240512c8:	2102      	movs	r1, #2
240512ca:	489c      	ldr	r0, [pc, #624]	; (2405153c <lcd_init+0x280>)
240512cc:	f008 f8dc 	bl	24059488 <HAL_GPIO_WritePin>
	HAL_Delay(1);
240512d0:	2001      	movs	r0, #1
240512d2:	f002 fd87 	bl	24053de4 <HAL_Delay>
	// Enable 1.8V
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
240512d6:	2201      	movs	r2, #1
240512d8:	2110      	movs	r1, #16
240512da:	4898      	ldr	r0, [pc, #608]	; (2405153c <lcd_init+0x280>)
240512dc:	f008 f8d4 	bl	24059488 <HAL_GPIO_WritePin>
	// also assert CS, not sure where to put this yet
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
240512e0:	2201      	movs	r2, #1
240512e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
240512e6:	4896      	ldr	r0, [pc, #600]	; (24051540 <lcd_init+0x284>)
240512e8:	f008 f8ce 	bl	24059488 <HAL_GPIO_WritePin>
	HAL_Delay(7);
240512ec:	2007      	movs	r0, #7
240512ee:	f002 fd79 	bl	24053de4 <HAL_Delay>

// HAL_SPI_Transmit(spi, (uint8_t *)"\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55", 10, 100);
	// Lets go, bootup sequence.
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
240512f2:	2201      	movs	r2, #1
240512f4:	f44f 7180 	mov.w	r1, #256	; 0x100
240512f8:	4890      	ldr	r0, [pc, #576]	; (2405153c <lcd_init+0x280>)
240512fa:	f008 f8c5 	bl	24059488 <HAL_GPIO_WritePin>
	HAL_Delay(2);
240512fe:	2002      	movs	r0, #2
24051300:	f002 fd70 	bl	24053de4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
24051304:	2200      	movs	r2, #0
24051306:	f44f 7180 	mov.w	r1, #256	; 0x100
2405130a:	488c      	ldr	r0, [pc, #560]	; (2405153c <lcd_init+0x280>)
2405130c:	f008 f8bc 	bl	24059488 <HAL_GPIO_WritePin>
	HAL_Delay(2);
24051310:	2002      	movs	r0, #2
24051312:	f002 fd67 	bl	24053de4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
24051316:	2201      	movs	r2, #1
24051318:	f44f 7180 	mov.w	r1, #256	; 0x100
2405131c:	4887      	ldr	r0, [pc, #540]	; (2405153c <lcd_init+0x280>)
2405131e:	f008 f8b3 	bl	24059488 <HAL_GPIO_WritePin>

	HAL_Delay(10);
24051322:	200a      	movs	r0, #10
24051324:	f002 fd5e 	bl	24053de4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
24051328:	2200      	movs	r2, #0
2405132a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
2405132e:	4884      	ldr	r0, [pc, #528]	; (24051540 <lcd_init+0x284>)
24051330:	f008 f8aa 	bl	24059488 <HAL_GPIO_WritePin>
	HAL_Delay(45);
24051334:	202d      	movs	r0, #45	; 0x2d
24051336:	f002 fd55 	bl	24053de4 <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\x08\x80", 2, 100);
2405133a:	2364      	movs	r3, #100	; 0x64
2405133c:	2202      	movs	r2, #2
2405133e:	4981      	ldr	r1, [pc, #516]	; (24051544 <lcd_init+0x288>)
24051340:	6878      	ldr	r0, [r7, #4]
24051342:	f00f f881 	bl	24060448 <HAL_SPI_Transmit>
	HAL_Delay(2);
24051346:	2002      	movs	r0, #2
24051348:	f002 fd4c 	bl	24053de4 <HAL_Delay>
	//wdog_refresh();

	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
2405134c:	2201      	movs	r2, #1
2405134e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24051352:	487b      	ldr	r0, [pc, #492]	; (24051540 <lcd_init+0x284>)
24051354:	f008 f898 	bl	24059488 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
24051358:	2200      	movs	r2, #0
2405135a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
2405135e:	4878      	ldr	r0, [pc, #480]	; (24051540 <lcd_init+0x284>)
24051360:	f008 f892 	bl	24059488 <HAL_GPIO_WritePin>
	HAL_Delay(2);
24051364:	2002      	movs	r0, #2
24051366:	f002 fd3d 	bl	24053de4 <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\x6E\x80", 2, 100);
2405136a:	2364      	movs	r3, #100	; 0x64
2405136c:	2202      	movs	r2, #2
2405136e:	4976      	ldr	r1, [pc, #472]	; (24051548 <lcd_init+0x28c>)
24051370:	6878      	ldr	r0, [r7, #4]
24051372:	f00f f869 	bl	24060448 <HAL_SPI_Transmit>
	HAL_Delay(2);
24051376:	2002      	movs	r0, #2
24051378:	f002 fd34 	bl	24053de4 <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
2405137c:	2201      	movs	r2, #1
2405137e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24051382:	486f      	ldr	r0, [pc, #444]	; (24051540 <lcd_init+0x284>)
24051384:	f008 f880 	bl	24059488 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
24051388:	2200      	movs	r2, #0
2405138a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
2405138e:	486c      	ldr	r0, [pc, #432]	; (24051540 <lcd_init+0x284>)
24051390:	f008 f87a 	bl	24059488 <HAL_GPIO_WritePin>
	HAL_Delay(2);
24051394:	2002      	movs	r0, #2
24051396:	f002 fd25 	bl	24053de4 <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\x80\x80", 2, 100);
2405139a:	2364      	movs	r3, #100	; 0x64
2405139c:	2202      	movs	r2, #2
2405139e:	496b      	ldr	r1, [pc, #428]	; (2405154c <lcd_init+0x290>)
240513a0:	6878      	ldr	r0, [r7, #4]
240513a2:	f00f f851 	bl	24060448 <HAL_SPI_Transmit>

	HAL_Delay(2);
240513a6:	2002      	movs	r0, #2
240513a8:	f002 fd1c 	bl	24053de4 <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
240513ac:	2201      	movs	r2, #1
240513ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
240513b2:	4863      	ldr	r0, [pc, #396]	; (24051540 <lcd_init+0x284>)
240513b4:	f008 f868 	bl	24059488 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
240513b8:	2200      	movs	r2, #0
240513ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
240513be:	4860      	ldr	r0, [pc, #384]	; (24051540 <lcd_init+0x284>)
240513c0:	f008 f862 	bl	24059488 <HAL_GPIO_WritePin>
	HAL_Delay(2);
240513c4:	2002      	movs	r0, #2
240513c6:	f002 fd0d 	bl	24053de4 <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\x68\x00", 2, 100);
240513ca:	2364      	movs	r3, #100	; 0x64
240513cc:	2202      	movs	r2, #2
240513ce:	4960      	ldr	r1, [pc, #384]	; (24051550 <lcd_init+0x294>)
240513d0:	6878      	ldr	r0, [r7, #4]
240513d2:	f00f f839 	bl	24060448 <HAL_SPI_Transmit>
	HAL_Delay(2);
240513d6:	2002      	movs	r0, #2
240513d8:	f002 fd04 	bl	24053de4 <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
240513dc:	2201      	movs	r2, #1
240513de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
240513e2:	4857      	ldr	r0, [pc, #348]	; (24051540 <lcd_init+0x284>)
240513e4:	f008 f850 	bl	24059488 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
240513e8:	2200      	movs	r2, #0
240513ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
240513ee:	4854      	ldr	r0, [pc, #336]	; (24051540 <lcd_init+0x284>)
240513f0:	f008 f84a 	bl	24059488 <HAL_GPIO_WritePin>
	HAL_Delay(2);
240513f4:	2002      	movs	r0, #2
240513f6:	f002 fcf5 	bl	24053de4 <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\xd0\x00", 2, 100);
240513fa:	2364      	movs	r3, #100	; 0x64
240513fc:	2202      	movs	r2, #2
240513fe:	4955      	ldr	r1, [pc, #340]	; (24051554 <lcd_init+0x298>)
24051400:	6878      	ldr	r0, [r7, #4]
24051402:	f00f f821 	bl	24060448 <HAL_SPI_Transmit>
	HAL_Delay(2);
24051406:	2002      	movs	r0, #2
24051408:	f002 fcec 	bl	24053de4 <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
2405140c:	2201      	movs	r2, #1
2405140e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24051412:	484b      	ldr	r0, [pc, #300]	; (24051540 <lcd_init+0x284>)
24051414:	f008 f838 	bl	24059488 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
24051418:	2200      	movs	r2, #0
2405141a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
2405141e:	4848      	ldr	r0, [pc, #288]	; (24051540 <lcd_init+0x284>)
24051420:	f008 f832 	bl	24059488 <HAL_GPIO_WritePin>
	HAL_Delay(2);
24051424:	2002      	movs	r0, #2
24051426:	f002 fcdd 	bl	24053de4 <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\x1b\x00", 2, 100);
2405142a:	2364      	movs	r3, #100	; 0x64
2405142c:	2202      	movs	r2, #2
2405142e:	494a      	ldr	r1, [pc, #296]	; (24051558 <lcd_init+0x29c>)
24051430:	6878      	ldr	r0, [r7, #4]
24051432:	f00f f809 	bl	24060448 <HAL_SPI_Transmit>

	HAL_Delay(2);
24051436:	2002      	movs	r0, #2
24051438:	f002 fcd4 	bl	24053de4 <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
2405143c:	2201      	movs	r2, #1
2405143e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24051442:	483f      	ldr	r0, [pc, #252]	; (24051540 <lcd_init+0x284>)
24051444:	f008 f820 	bl	24059488 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
24051448:	2200      	movs	r2, #0
2405144a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
2405144e:	483c      	ldr	r0, [pc, #240]	; (24051540 <lcd_init+0x284>)
24051450:	f008 f81a 	bl	24059488 <HAL_GPIO_WritePin>
	HAL_Delay(2);
24051454:	2002      	movs	r0, #2
24051456:	f002 fcc5 	bl	24053de4 <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\xe0\x00", 2, 100);
2405145a:	2364      	movs	r3, #100	; 0x64
2405145c:	2202      	movs	r2, #2
2405145e:	493f      	ldr	r1, [pc, #252]	; (2405155c <lcd_init+0x2a0>)
24051460:	6878      	ldr	r0, [r7, #4]
24051462:	f00e fff1 	bl	24060448 <HAL_SPI_Transmit>

	HAL_Delay(2);
24051466:	2002      	movs	r0, #2
24051468:	f002 fcbc 	bl	24053de4 <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
2405146c:	2201      	movs	r2, #1
2405146e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24051472:	4833      	ldr	r0, [pc, #204]	; (24051540 <lcd_init+0x284>)
24051474:	f008 f808 	bl	24059488 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
24051478:	2200      	movs	r2, #0
2405147a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
2405147e:	4830      	ldr	r0, [pc, #192]	; (24051540 <lcd_init+0x284>)
24051480:	f008 f802 	bl	24059488 <HAL_GPIO_WritePin>
	HAL_Delay(2);
24051484:	2002      	movs	r0, #2
24051486:	f002 fcad 	bl	24053de4 <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\x6a\x80", 2, 100);
2405148a:	2364      	movs	r3, #100	; 0x64
2405148c:	2202      	movs	r2, #2
2405148e:	4934      	ldr	r1, [pc, #208]	; (24051560 <lcd_init+0x2a4>)
24051490:	6878      	ldr	r0, [r7, #4]
24051492:	f00e ffd9 	bl	24060448 <HAL_SPI_Transmit>

	HAL_Delay(2);
24051496:	2002      	movs	r0, #2
24051498:	f002 fca4 	bl	24053de4 <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
2405149c:	2201      	movs	r2, #1
2405149e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
240514a2:	4827      	ldr	r0, [pc, #156]	; (24051540 <lcd_init+0x284>)
240514a4:	f007 fff0 	bl	24059488 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
240514a8:	2200      	movs	r2, #0
240514aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
240514ae:	4824      	ldr	r0, [pc, #144]	; (24051540 <lcd_init+0x284>)
240514b0:	f007 ffea 	bl	24059488 <HAL_GPIO_WritePin>
	HAL_Delay(2);
240514b4:	2002      	movs	r0, #2
240514b6:	f002 fc95 	bl	24053de4 <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\x80\x00", 2, 100);
240514ba:	2364      	movs	r3, #100	; 0x64
240514bc:	2202      	movs	r2, #2
240514be:	4929      	ldr	r1, [pc, #164]	; (24051564 <lcd_init+0x2a8>)
240514c0:	6878      	ldr	r0, [r7, #4]
240514c2:	f00e ffc1 	bl	24060448 <HAL_SPI_Transmit>
	HAL_Delay(2);
240514c6:	2002      	movs	r0, #2
240514c8:	f002 fc8c 	bl	24053de4 <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
240514cc:	2201      	movs	r2, #1
240514ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
240514d2:	481b      	ldr	r0, [pc, #108]	; (24051540 <lcd_init+0x284>)
240514d4:	f007 ffd8 	bl	24059488 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
240514d8:	2200      	movs	r2, #0
240514da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
240514de:	4818      	ldr	r0, [pc, #96]	; (24051540 <lcd_init+0x284>)
240514e0:	f007 ffd2 	bl	24059488 <HAL_GPIO_WritePin>
	HAL_Delay(2);
240514e4:	2002      	movs	r0, #2
240514e6:	f002 fc7d 	bl	24053de4 <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\x14\x80", 2, 100);
240514ea:	2364      	movs	r3, #100	; 0x64
240514ec:	2202      	movs	r2, #2
240514ee:	491e      	ldr	r1, [pc, #120]	; (24051568 <lcd_init+0x2ac>)
240514f0:	6878      	ldr	r0, [r7, #4]
240514f2:	f00e ffa9 	bl	24060448 <HAL_SPI_Transmit>
	HAL_Delay(2);
240514f6:	2002      	movs	r0, #2
240514f8:	f002 fc74 	bl	24053de4 <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
240514fc:	2201      	movs	r2, #1
240514fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24051502:	480f      	ldr	r0, [pc, #60]	; (24051540 <lcd_init+0x284>)
24051504:	f007 ffc0 	bl	24059488 <HAL_GPIO_WritePin>
	//wdog_refresh();

	HAL_LTDC_SetAddress(ltdc, (uint32_t) &fb1, 0);
24051508:	4b18      	ldr	r3, [pc, #96]	; (2405156c <lcd_init+0x2b0>)
2405150a:	2200      	movs	r2, #0
2405150c:	4619      	mov	r1, r3
2405150e:	6838      	ldr	r0, [r7, #0]
24051510:	f008 f9be 	bl	24059890 <HAL_LTDC_SetAddress>

	memset(fb1, 0, sizeof(framebuffer1));
24051514:	4b15      	ldr	r3, [pc, #84]	; (2405156c <lcd_init+0x2b0>)
24051516:	681b      	ldr	r3, [r3, #0]
24051518:	f44f 3216 	mov.w	r2, #153600	; 0x25800
2405151c:	2100      	movs	r1, #0
2405151e:	4618      	mov	r0, r3
24051520:	f010 fa38 	bl	24061994 <memset>
	memset(fb2, 0, sizeof(framebuffer1));
24051524:	4b12      	ldr	r3, [pc, #72]	; (24051570 <lcd_init+0x2b4>)
24051526:	681b      	ldr	r3, [r3, #0]
24051528:	f44f 3216 	mov.w	r2, #153600	; 0x25800
2405152c:	2100      	movs	r1, #0
2405152e:	4618      	mov	r0, r3
24051530:	f010 fa30 	bl	24061994 <memset>
}
24051534:	bf00      	nop
24051536:	3708      	adds	r7, #8
24051538:	46bd      	mov	sp, r7
2405153a:	bd80      	pop	{r7, pc}
2405153c:	58020c00 	.word	0x58020c00
24051540:	58020400 	.word	0x58020400
24051544:	24062da8 	.word	0x24062da8
24051548:	24062dac 	.word	0x24062dac
2405154c:	24062db0 	.word	0x24062db0
24051550:	24062db4 	.word	0x24062db4
24051554:	24062db8 	.word	0x24062db8
24051558:	24062dbc 	.word	0x24062dbc
2405155c:	24062dc0 	.word	0x24062dc0
24051560:	24062dc4 	.word	0x24062dc4
24051564:	24062dc8 	.word	0x24062dc8
24051568:	24062dcc 	.word	0x24062dcc
2405156c:	20000024 	.word	0x20000024
24051570:	20000028 	.word	0x20000028

24051574 <HAL_LTDC_ReloadEventCallback>:

void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc) {
24051574:	b580      	push	{r7, lr}
24051576:	b082      	sub	sp, #8
24051578:	af00      	add	r7, sp, #0
2405157a:	6078      	str	r0, [r7, #4]
	frame_counter++;
2405157c:	4b0d      	ldr	r3, [pc, #52]	; (240515b4 <HAL_LTDC_ReloadEventCallback+0x40>)
2405157e:	681b      	ldr	r3, [r3, #0]
24051580:	3301      	adds	r3, #1
24051582:	4a0c      	ldr	r2, [pc, #48]	; (240515b4 <HAL_LTDC_ReloadEventCallback+0x40>)
24051584:	6013      	str	r3, [r2, #0]
	if (active_framebuffer == 0) {
24051586:	4b0c      	ldr	r3, [pc, #48]	; (240515b8 <HAL_LTDC_ReloadEventCallback+0x44>)
24051588:	681b      	ldr	r3, [r3, #0]
2405158a:	2b00      	cmp	r3, #0
2405158c:	d107      	bne.n	2405159e <HAL_LTDC_ReloadEventCallback+0x2a>
		HAL_LTDC_SetAddress(hltdc, (uint32_t) fb2, 0);
2405158e:	4b0b      	ldr	r3, [pc, #44]	; (240515bc <HAL_LTDC_ReloadEventCallback+0x48>)
24051590:	681b      	ldr	r3, [r3, #0]
24051592:	2200      	movs	r2, #0
24051594:	4619      	mov	r1, r3
24051596:	6878      	ldr	r0, [r7, #4]
24051598:	f008 f97a 	bl	24059890 <HAL_LTDC_SetAddress>
	} else {
		HAL_LTDC_SetAddress(hltdc, (uint32_t) fb1, 0);
	}
}
2405159c:	e006      	b.n	240515ac <HAL_LTDC_ReloadEventCallback+0x38>
		HAL_LTDC_SetAddress(hltdc, (uint32_t) fb1, 0);
2405159e:	4b08      	ldr	r3, [pc, #32]	; (240515c0 <HAL_LTDC_ReloadEventCallback+0x4c>)
240515a0:	681b      	ldr	r3, [r3, #0]
240515a2:	2200      	movs	r2, #0
240515a4:	4619      	mov	r1, r3
240515a6:	6878      	ldr	r0, [r7, #4]
240515a8:	f008 f972 	bl	24059890 <HAL_LTDC_SetAddress>
}
240515ac:	bf00      	nop
240515ae:	3708      	adds	r7, #8
240515b0:	46bd      	mov	sp, r7
240515b2:	bd80      	pop	{r7, pc}
240515b4:	200000e0 	.word	0x200000e0
240515b8:	200000dc 	.word	0x200000dc
240515bc:	20000028 	.word	0x20000028
240515c0:	20000024 	.word	0x20000024

240515c4 <lcd_swap>:

uint32_t is_lcd_swap_pending(void) {
	return (uint32_t) ((hltdc.Instance->SRCR) & (LTDC_SRCR_VBR | LTDC_SRCR_IMR));
}

void lcd_swap(void) {
240515c4:	b580      	push	{r7, lr}
240515c6:	af00      	add	r7, sp, #0
	HAL_LTDC_Reload(&hltdc, LTDC_RELOAD_VERTICAL_BLANKING);
240515c8:	2102      	movs	r1, #2
240515ca:	4807      	ldr	r0, [pc, #28]	; (240515e8 <lcd_swap+0x24>)
240515cc:	f008 f996 	bl	240598fc <HAL_LTDC_Reload>
	active_framebuffer = active_framebuffer ? 0 : 1;
240515d0:	4b06      	ldr	r3, [pc, #24]	; (240515ec <lcd_swap+0x28>)
240515d2:	681b      	ldr	r3, [r3, #0]
240515d4:	2b00      	cmp	r3, #0
240515d6:	bf0c      	ite	eq
240515d8:	2301      	moveq	r3, #1
240515da:	2300      	movne	r3, #0
240515dc:	b2db      	uxtb	r3, r3
240515de:	461a      	mov	r2, r3
240515e0:	4b02      	ldr	r3, [pc, #8]	; (240515ec <lcd_swap+0x28>)
240515e2:	601a      	str	r2, [r3, #0]
}
240515e4:	bf00      	nop
240515e6:	bd80      	pop	{r7, pc}
240515e8:	20000304 	.word	0x20000304
240515ec:	200000dc 	.word	0x200000dc

240515f0 <lcd_sync>:

void lcd_sync(void) {
240515f0:	b580      	push	{r7, lr}
240515f2:	b082      	sub	sp, #8
240515f4:	af00      	add	r7, sp, #0
	void *active = lcd_get_active_buffer();
240515f6:	f000 f813 	bl	24051620 <lcd_get_active_buffer>
240515fa:	6078      	str	r0, [r7, #4]
	void *inactive = lcd_get_inactive_buffer();
240515fc:	f000 f826 	bl	2405164c <lcd_get_inactive_buffer>
24051600:	6038      	str	r0, [r7, #0]

	if (active != inactive) {
24051602:	687a      	ldr	r2, [r7, #4]
24051604:	683b      	ldr	r3, [r7, #0]
24051606:	429a      	cmp	r2, r3
24051608:	d005      	beq.n	24051616 <lcd_sync+0x26>
		memcpy(inactive, active, sizeof(framebuffer1));
2405160a:	f44f 3216 	mov.w	r2, #153600	; 0x25800
2405160e:	6879      	ldr	r1, [r7, #4]
24051610:	6838      	ldr	r0, [r7, #0]
24051612:	f010 fa3a 	bl	24061a8a <memcpy>
	}
}
24051616:	bf00      	nop
24051618:	3708      	adds	r7, #8
2405161a:	46bd      	mov	sp, r7
2405161c:	bd80      	pop	{r7, pc}
	...

24051620 <lcd_get_active_buffer>:

void* lcd_get_active_buffer(void) {
24051620:	b480      	push	{r7}
24051622:	af00      	add	r7, sp, #0
	return active_framebuffer ? fb2 : fb1;
24051624:	4b06      	ldr	r3, [pc, #24]	; (24051640 <lcd_get_active_buffer+0x20>)
24051626:	681b      	ldr	r3, [r3, #0]
24051628:	2b00      	cmp	r3, #0
2405162a:	d002      	beq.n	24051632 <lcd_get_active_buffer+0x12>
2405162c:	4b05      	ldr	r3, [pc, #20]	; (24051644 <lcd_get_active_buffer+0x24>)
2405162e:	681b      	ldr	r3, [r3, #0]
24051630:	e001      	b.n	24051636 <lcd_get_active_buffer+0x16>
24051632:	4b05      	ldr	r3, [pc, #20]	; (24051648 <lcd_get_active_buffer+0x28>)
24051634:	681b      	ldr	r3, [r3, #0]
}
24051636:	4618      	mov	r0, r3
24051638:	46bd      	mov	sp, r7
2405163a:	f85d 7b04 	ldr.w	r7, [sp], #4
2405163e:	4770      	bx	lr
24051640:	200000dc 	.word	0x200000dc
24051644:	20000028 	.word	0x20000028
24051648:	20000024 	.word	0x20000024

2405164c <lcd_get_inactive_buffer>:

void* lcd_get_inactive_buffer(void) {
2405164c:	b480      	push	{r7}
2405164e:	af00      	add	r7, sp, #0
	return active_framebuffer ? fb1 : fb2;
24051650:	4b06      	ldr	r3, [pc, #24]	; (2405166c <lcd_get_inactive_buffer+0x20>)
24051652:	681b      	ldr	r3, [r3, #0]
24051654:	2b00      	cmp	r3, #0
24051656:	d002      	beq.n	2405165e <lcd_get_inactive_buffer+0x12>
24051658:	4b05      	ldr	r3, [pc, #20]	; (24051670 <lcd_get_inactive_buffer+0x24>)
2405165a:	681b      	ldr	r3, [r3, #0]
2405165c:	e001      	b.n	24051662 <lcd_get_inactive_buffer+0x16>
2405165e:	4b05      	ldr	r3, [pc, #20]	; (24051674 <lcd_get_inactive_buffer+0x28>)
24051660:	681b      	ldr	r3, [r3, #0]
}
24051662:	4618      	mov	r0, r3
24051664:	46bd      	mov	sp, r7
24051666:	f85d 7b04 	ldr.w	r7, [sp], #4
2405166a:	4770      	bx	lr
2405166c:	200000dc 	.word	0x200000dc
24051670:	20000024 	.word	0x20000024
24051674:	20000028 	.word	0x20000028

24051678 <lcd_wait_for_vblank>:
void lcd_set_buffers(uint16_t *buf1, uint16_t *buf2) {
	fb1 = buf1;
	fb2 = buf2;
}

void lcd_wait_for_vblank(void) {
24051678:	b480      	push	{r7}
2405167a:	b083      	sub	sp, #12
2405167c:	af00      	add	r7, sp, #0
	uint32_t old_counter = frame_counter;
2405167e:	4b08      	ldr	r3, [pc, #32]	; (240516a0 <lcd_wait_for_vblank+0x28>)
24051680:	681b      	ldr	r3, [r3, #0]
24051682:	607b      	str	r3, [r7, #4]
	while (old_counter == frame_counter) {
24051684:	e000      	b.n	24051688 <lcd_wait_for_vblank+0x10>
		__asm("nop");
24051686:	bf00      	nop
	while (old_counter == frame_counter) {
24051688:	4b05      	ldr	r3, [pc, #20]	; (240516a0 <lcd_wait_for_vblank+0x28>)
2405168a:	681b      	ldr	r3, [r3, #0]
2405168c:	687a      	ldr	r2, [r7, #4]
2405168e:	429a      	cmp	r2, r3
24051690:	d0f9      	beq.n	24051686 <lcd_wait_for_vblank+0xe>
	}
}
24051692:	bf00      	nop
24051694:	bf00      	nop
24051696:	370c      	adds	r7, #12
24051698:	46bd      	mov	sp, r7
2405169a:	f85d 7b04 	ldr.w	r7, [sp], #4
2405169e:	4770      	bx	lr
240516a0:	200000e0 	.word	0x200000e0

240516a4 <game_init>:
int ball_xspeed;
int ball_yspeed;
int ball_x;
int ball_y;

void game_init(void) {
240516a4:	b580      	push	{r7, lr}
240516a6:	b082      	sub	sp, #8
240516a8:	af00      	add	r7, sp, #0
	uint16_t *buf = lcd_get_active_buffer();
240516aa:	f7ff ffb9 	bl	24051620 <lcd_get_active_buffer>
240516ae:	6078      	str	r0, [r7, #4]
	draw_background(buf);
240516b0:	6878      	ldr	r0, [r7, #4]
240516b2:	f000 f863 	bl	2405177c <draw_background>
	ball_xspeed = randsing() * ball_speed;
240516b6:	f00f fef5 	bl	240614a4 <rand>
240516ba:	4603      	mov	r3, r0
240516bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
240516c0:	db02      	blt.n	240516c8 <game_init+0x24>
240516c2:	f04f 33ff 	mov.w	r3, #4294967295
240516c6:	e000      	b.n	240516ca <game_init+0x26>
240516c8:	2301      	movs	r3, #1
240516ca:	2203      	movs	r2, #3
240516cc:	fb02 f303 	mul.w	r3, r2, r3
240516d0:	4a18      	ldr	r2, [pc, #96]	; (24051734 <game_init+0x90>)
240516d2:	6013      	str	r3, [r2, #0]
	ball_yspeed = randsing() * ball_speed;
240516d4:	f00f fee6 	bl	240614a4 <rand>
240516d8:	4603      	mov	r3, r0
240516da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
240516de:	db02      	blt.n	240516e6 <game_init+0x42>
240516e0:	f04f 33ff 	mov.w	r3, #4294967295
240516e4:	e000      	b.n	240516e8 <game_init+0x44>
240516e6:	2301      	movs	r3, #1
240516e8:	2203      	movs	r2, #3
240516ea:	fb02 f303 	mul.w	r3, r2, r3
240516ee:	4a12      	ldr	r2, [pc, #72]	; (24051738 <game_init+0x94>)
240516f0:	6013      	str	r3, [r2, #0]
	ball_x = 160;
240516f2:	4b12      	ldr	r3, [pc, #72]	; (2405173c <game_init+0x98>)
240516f4:	22a0      	movs	r2, #160	; 0xa0
240516f6:	601a      	str	r2, [r3, #0]
	ball_y = randint(190, 70);
240516f8:	f00f fed4 	bl	240614a4 <rand>
240516fc:	4601      	mov	r1, r0
240516fe:	4b10      	ldr	r3, [pc, #64]	; (24051740 <game_init+0x9c>)
24051700:	fb83 2301 	smull	r2, r3, r3, r1
24051704:	105a      	asrs	r2, r3, #1
24051706:	17cb      	asrs	r3, r1, #31
24051708:	1ad2      	subs	r2, r2, r3
2405170a:	4613      	mov	r3, r2
2405170c:	011b      	lsls	r3, r3, #4
2405170e:	1a9b      	subs	r3, r3, r2
24051710:	00db      	lsls	r3, r3, #3
24051712:	4413      	add	r3, r2
24051714:	1aca      	subs	r2, r1, r3
24051716:	f102 0346 	add.w	r3, r2, #70	; 0x46
2405171a:	4a0a      	ldr	r2, [pc, #40]	; (24051744 <game_init+0xa0>)
2405171c:	6013      	str	r3, [r2, #0]
	lcd_sync();
2405171e:	f7ff ff67 	bl	240515f0 <lcd_sync>
	lcd_swap();
24051722:	f7ff ff4f 	bl	240515c4 <lcd_swap>
	lcd_wait_for_vblank();
24051726:	f7ff ffa7 	bl	24051678 <lcd_wait_for_vblank>
}
2405172a:	bf00      	nop
2405172c:	3708      	adds	r7, #8
2405172e:	46bd      	mov	sp, r7
24051730:	bd80      	pop	{r7, pc}
24051732:	bf00      	nop
24051734:	200001fc 	.word	0x200001fc
24051738:	20000200 	.word	0x20000200
2405173c:	20000204 	.word	0x20000204
24051740:	043b3d5b 	.word	0x043b3d5b
24051744:	20000208 	.word	0x20000208

24051748 <game_loop>:

void game_loop(void) {
24051748:	b580      	push	{r7, lr}
2405174a:	b082      	sub	sp, #8
2405174c:	af00      	add	r7, sp, #0
	uint16_t *buf = lcd_get_active_buffer();
2405174e:	f7ff ff67 	bl	24051620 <lcd_get_active_buffer>
24051752:	6078      	str	r0, [r7, #4]
	draw_background(buf);
24051754:	6878      	ldr	r0, [r7, #4]
24051756:	f000 f811 	bl	2405177c <draw_background>
	update_player(buf);
2405175a:	6878      	ldr	r0, [r7, #4]
2405175c:	f000 f878 	bl	24051850 <update_player>
	update_ai(buf);
24051760:	6878      	ldr	r0, [r7, #4]
24051762:	f000 f9e1 	bl	24051b28 <update_ai>
	update_ball(buf);
24051766:	6878      	ldr	r0, [r7, #4]
24051768:	f000 f8ec 	bl	24051944 <update_ball>
	lcd_swap();
2405176c:	f7ff ff2a 	bl	240515c4 <lcd_swap>
	lcd_wait_for_vblank();
24051770:	f7ff ff82 	bl	24051678 <lcd_wait_for_vblank>
}
24051774:	bf00      	nop
24051776:	3708      	adds	r7, #8
24051778:	46bd      	mov	sp, r7
2405177a:	bd80      	pop	{r7, pc}

2405177c <draw_background>:

void draw_background(uint16_t *buf) {
2405177c:	b590      	push	{r4, r7, lr}
2405177e:	b085      	sub	sp, #20
24051780:	af02      	add	r7, sp, #8
24051782:	6078      	str	r0, [r7, #4]
	LCD_Clear(buf, LCD_COLOR_BLACK);
24051784:	2100      	movs	r1, #0
24051786:	6878      	ldr	r0, [r7, #4]
24051788:	f000 fa76 	bl	24051c78 <LCD_Clear>
	LCD_DrawRect(buf, 0, 20, LCD_GetXSize() - 1, LCD_GetYSize() - 21,
2405178c:	f000 fa26 	bl	24051bdc <LCD_GetXSize>
24051790:	4603      	mov	r3, r0
24051792:	3b01      	subs	r3, #1
24051794:	b29c      	uxth	r4, r3
24051796:	f000 fa2a 	bl	24051bee <LCD_GetYSize>
2405179a:	4603      	mov	r3, r0
2405179c:	3b15      	subs	r3, #21
2405179e:	b29b      	uxth	r3, r3
240517a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
240517a4:	9201      	str	r2, [sp, #4]
240517a6:	9300      	str	r3, [sp, #0]
240517a8:	4623      	mov	r3, r4
240517aa:	2214      	movs	r2, #20
240517ac:	2100      	movs	r1, #0
240517ae:	6878      	ldr	r0, [r7, #4]
240517b0:	f000 fb90 	bl	24051ed4 <LCD_DrawRect>
	LCD_COLOR_WHITE);
	draw_score(buf);
240517b4:	6878      	ldr	r0, [r7, #4]
240517b6:	f000 f805 	bl	240517c4 <draw_score>
}
240517ba:	bf00      	nop
240517bc:	370c      	adds	r7, #12
240517be:	46bd      	mov	sp, r7
240517c0:	bd90      	pop	{r4, r7, pc}
	...

240517c4 <draw_score>:

void draw_score(uint16_t *buf) {
240517c4:	b580      	push	{r7, lr}
240517c6:	b084      	sub	sp, #16
240517c8:	af02      	add	r7, sp, #8
240517ca:	6078      	str	r0, [r7, #4]
	LCD_SetFont(&Font16);
240517cc:	4818      	ldr	r0, [pc, #96]	; (24051830 <draw_score+0x6c>)
240517ce:	f000 fa17 	bl	24051c00 <LCD_SetFont>
	sprintf(score_p1_buf, "%d", score_p1);
240517d2:	4b18      	ldr	r3, [pc, #96]	; (24051834 <draw_score+0x70>)
240517d4:	681b      	ldr	r3, [r3, #0]
240517d6:	461a      	mov	r2, r3
240517d8:	4917      	ldr	r1, [pc, #92]	; (24051838 <draw_score+0x74>)
240517da:	4818      	ldr	r0, [pc, #96]	; (2405183c <draw_score+0x78>)
240517dc:	f00f ffe2 	bl	240617a4 <siprintf>
	LCD_DisplayStringAt(buf, 0, 4, (uint8_t*) score_p1_buf, LEFT_MODE);
240517e0:	2303      	movs	r3, #3
240517e2:	9300      	str	r3, [sp, #0]
240517e4:	4b15      	ldr	r3, [pc, #84]	; (2405183c <draw_score+0x78>)
240517e6:	2204      	movs	r2, #4
240517e8:	2100      	movs	r1, #0
240517ea:	6878      	ldr	r0, [r7, #4]
240517ec:	f000 fa5e 	bl	24051cac <LCD_DisplayStringAt>
	sprintf(score_p2_buf, "%d", score_p2);
240517f0:	4b13      	ldr	r3, [pc, #76]	; (24051840 <draw_score+0x7c>)
240517f2:	681b      	ldr	r3, [r3, #0]
240517f4:	461a      	mov	r2, r3
240517f6:	4910      	ldr	r1, [pc, #64]	; (24051838 <draw_score+0x74>)
240517f8:	4812      	ldr	r0, [pc, #72]	; (24051844 <draw_score+0x80>)
240517fa:	f00f ffd3 	bl	240617a4 <siprintf>
	LCD_DisplayStringAt(buf, 2, 4, (uint8_t*) score_p2_buf, RIGHT_MODE);
240517fe:	2302      	movs	r3, #2
24051800:	9300      	str	r3, [sp, #0]
24051802:	4b10      	ldr	r3, [pc, #64]	; (24051844 <draw_score+0x80>)
24051804:	2204      	movs	r2, #4
24051806:	2102      	movs	r1, #2
24051808:	6878      	ldr	r0, [r7, #4]
2405180a:	f000 fa4f 	bl	24051cac <LCD_DisplayStringAt>
	sprintf(text_buf, "SCORE");
2405180e:	490e      	ldr	r1, [pc, #56]	; (24051848 <draw_score+0x84>)
24051810:	480e      	ldr	r0, [pc, #56]	; (2405184c <draw_score+0x88>)
24051812:	f00f ffc7 	bl	240617a4 <siprintf>
	LCD_DisplayStringAt(buf, 1, 4, (uint8_t*) text_buf, CENTER_MODE);
24051816:	2301      	movs	r3, #1
24051818:	9300      	str	r3, [sp, #0]
2405181a:	4b0c      	ldr	r3, [pc, #48]	; (2405184c <draw_score+0x88>)
2405181c:	2204      	movs	r2, #4
2405181e:	2101      	movs	r1, #1
24051820:	6878      	ldr	r0, [r7, #4]
24051822:	f000 fa43 	bl	24051cac <LCD_DisplayStringAt>
}
24051826:	bf00      	nop
24051828:	3708      	adds	r7, #8
2405182a:	46bd      	mov	sp, r7
2405182c:	bd80      	pop	{r7, pc}
2405182e:	bf00      	nop
24051830:	20000008 	.word	0x20000008
24051834:	200000e4 	.word	0x200000e4
24051838:	24062dd0 	.word	0x24062dd0
2405183c:	200000ec 	.word	0x200000ec
24051840:	200000e8 	.word	0x200000e8
24051844:	200000f4 	.word	0x200000f4
24051848:	24062dd4 	.word	0x24062dd4
2405184c:	200000fc 	.word	0x200000fc

24051850 <update_player>:

void update_player(uint16_t *buf) {
24051850:	b590      	push	{r4, r7, lr}
24051852:	b087      	sub	sp, #28
24051854:	af02      	add	r7, sp, #8
24051856:	6078      	str	r0, [r7, #4]
	uint32_t buttons = buttons_get();
24051858:	f7ff f818 	bl	2405088c <buttons_get>
2405185c:	60f8      	str	r0, [r7, #12]
	if (buttons & B_Up) {
2405185e:	68fb      	ldr	r3, [r7, #12]
24051860:	f003 0302 	and.w	r3, r3, #2
24051864:	2b00      	cmp	r3, #0
24051866:	d00c      	beq.n	24051882 <update_player+0x32>
		if (p1_y >= 20 + p1_speed + 2) {
24051868:	2302      	movs	r3, #2
2405186a:	f103 0215 	add.w	r2, r3, #21
2405186e:	4b2f      	ldr	r3, [pc, #188]	; (2405192c <update_player+0xdc>)
24051870:	681b      	ldr	r3, [r3, #0]
24051872:	429a      	cmp	r2, r3
24051874:	da05      	bge.n	24051882 <update_player+0x32>
			p1_y = p1_y - p1_speed;
24051876:	4b2d      	ldr	r3, [pc, #180]	; (2405192c <update_player+0xdc>)
24051878:	681b      	ldr	r3, [r3, #0]
2405187a:	2202      	movs	r2, #2
2405187c:	1a9b      	subs	r3, r3, r2
2405187e:	4a2b      	ldr	r2, [pc, #172]	; (2405192c <update_player+0xdc>)
24051880:	6013      	str	r3, [r2, #0]
		}
	}
	if (buttons & B_Down) {
24051882:	68fb      	ldr	r3, [r7, #12]
24051884:	f003 0308 	and.w	r3, r3, #8
24051888:	2b00      	cmp	r3, #0
2405188a:	d012      	beq.n	240518b2 <update_player+0x62>
		if (p1_y <= LCD_GetYSize() - p1_height - p1_speed - 2) {
2405188c:	f000 f9af 	bl	24051bee <LCD_GetYSize>
24051890:	4603      	mov	r3, r0
24051892:	461a      	mov	r2, r3
24051894:	2328      	movs	r3, #40	; 0x28
24051896:	1ad3      	subs	r3, r2, r3
24051898:	2202      	movs	r2, #2
2405189a:	1a9b      	subs	r3, r3, r2
2405189c:	1e5a      	subs	r2, r3, #1
2405189e:	4b23      	ldr	r3, [pc, #140]	; (2405192c <update_player+0xdc>)
240518a0:	681b      	ldr	r3, [r3, #0]
240518a2:	429a      	cmp	r2, r3
240518a4:	dd05      	ble.n	240518b2 <update_player+0x62>
			p1_y = p1_y + p1_speed;
240518a6:	4b21      	ldr	r3, [pc, #132]	; (2405192c <update_player+0xdc>)
240518a8:	681b      	ldr	r3, [r3, #0]
240518aa:	2202      	movs	r2, #2
240518ac:	4413      	add	r3, r2
240518ae:	4a1f      	ldr	r2, [pc, #124]	; (2405192c <update_player+0xdc>)
240518b0:	6013      	str	r3, [r2, #0]
		}
	}
	if (buttons & B_GAME) {
240518b2:	68fb      	ldr	r3, [r7, #12]
240518b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
240518b8:	2b00      	cmp	r3, #0
240518ba:	d01a      	beq.n	240518f2 <update_player+0xa2>
		score_p1 = 0;
240518bc:	4b1c      	ldr	r3, [pc, #112]	; (24051930 <update_player+0xe0>)
240518be:	2200      	movs	r2, #0
240518c0:	601a      	str	r2, [r3, #0]
		score_p2 = 0;
240518c2:	4b1c      	ldr	r3, [pc, #112]	; (24051934 <update_player+0xe4>)
240518c4:	2200      	movs	r2, #0
240518c6:	601a      	str	r2, [r3, #0]
		p1_x = 3;
240518c8:	4b1b      	ldr	r3, [pc, #108]	; (24051938 <update_player+0xe8>)
240518ca:	2203      	movs	r2, #3
240518cc:	601a      	str	r2, [r3, #0]
		p1_y = 110;
240518ce:	4b17      	ldr	r3, [pc, #92]	; (2405192c <update_player+0xdc>)
240518d0:	226e      	movs	r2, #110	; 0x6e
240518d2:	601a      	str	r2, [r3, #0]
		p2_x = 320 - 3 - p2_width;
240518d4:	2205      	movs	r2, #5
240518d6:	f240 133d 	movw	r3, #317	; 0x13d
240518da:	1a9b      	subs	r3, r3, r2
240518dc:	4a17      	ldr	r2, [pc, #92]	; (2405193c <update_player+0xec>)
240518de:	6013      	str	r3, [r2, #0]
		p2_y = 110;
240518e0:	4b17      	ldr	r3, [pc, #92]	; (24051940 <update_player+0xf0>)
240518e2:	226e      	movs	r2, #110	; 0x6e
240518e4:	601a      	str	r2, [r3, #0]
		HAL_Delay(500);
240518e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
240518ea:	f002 fa7b 	bl	24053de4 <HAL_Delay>
		game_init();
240518ee:	f7ff fed9 	bl	240516a4 <game_init>
	}
	if (buttons & B_POWER) {
240518f2:	68fb      	ldr	r3, [r7, #12]
240518f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
240518f8:	2b00      	cmp	r3, #0
240518fa:	d001      	beq.n	24051900 <update_player+0xb0>
		HAL_NVIC_SystemReset();
240518fc:	f004 fac7 	bl	24055e8e <HAL_NVIC_SystemReset>
	}
	LCD_FillRect(buf, p1_x, p1_y, p1_width, p1_height, LCD_COLOR_WHITE);
24051900:	4b0d      	ldr	r3, [pc, #52]	; (24051938 <update_player+0xe8>)
24051902:	681b      	ldr	r3, [r3, #0]
24051904:	b299      	uxth	r1, r3
24051906:	4b09      	ldr	r3, [pc, #36]	; (2405192c <update_player+0xdc>)
24051908:	681b      	ldr	r3, [r3, #0]
2405190a:	b29a      	uxth	r2, r3
2405190c:	2305      	movs	r3, #5
2405190e:	b298      	uxth	r0, r3
24051910:	2328      	movs	r3, #40	; 0x28
24051912:	b29b      	uxth	r3, r3
24051914:	f64f 74ff 	movw	r4, #65535	; 0xffff
24051918:	9401      	str	r4, [sp, #4]
2405191a:	9300      	str	r3, [sp, #0]
2405191c:	4603      	mov	r3, r0
2405191e:	6878      	ldr	r0, [r7, #4]
24051920:	f000 fbbc 	bl	2405209c <LCD_FillRect>
}
24051924:	bf00      	nop
24051926:	3714      	adds	r7, #20
24051928:	46bd      	mov	sp, r7
2405192a:	bd90      	pop	{r4, r7, pc}
2405192c:	20000030 	.word	0x20000030
24051930:	200000e4 	.word	0x200000e4
24051934:	200000e8 	.word	0x200000e8
24051938:	2000002c 	.word	0x2000002c
2405193c:	20000034 	.word	0x20000034
24051940:	20000038 	.word	0x20000038

24051944 <update_ball>:

void update_ball(uint16_t *buf) {
24051944:	b580      	push	{r7, lr}
24051946:	b084      	sub	sp, #16
24051948:	af02      	add	r7, sp, #8
2405194a:	6078      	str	r0, [r7, #4]

	if (ball_x <= ball_r + ball_speed + p1_x + p1_width / 2
2405194c:	2208      	movs	r2, #8
2405194e:	2303      	movs	r3, #3
24051950:	441a      	add	r2, r3
24051952:	4b6b      	ldr	r3, [pc, #428]	; (24051b00 <update_ball+0x1bc>)
24051954:	681b      	ldr	r3, [r3, #0]
24051956:	441a      	add	r2, r3
24051958:	2305      	movs	r3, #5
2405195a:	2b00      	cmp	r3, #0
2405195c:	da00      	bge.n	24051960 <update_ball+0x1c>
2405195e:	3301      	adds	r3, #1
24051960:	105b      	asrs	r3, r3, #1
24051962:	441a      	add	r2, r3
24051964:	4b67      	ldr	r3, [pc, #412]	; (24051b04 <update_ball+0x1c0>)
24051966:	681b      	ldr	r3, [r3, #0]
24051968:	429a      	cmp	r2, r3
2405196a:	db38      	blt.n	240519de <update_ball+0x9a>
			&& ball_xspeed == -ball_speed) {
2405196c:	2303      	movs	r3, #3
2405196e:	425a      	negs	r2, r3
24051970:	4b65      	ldr	r3, [pc, #404]	; (24051b08 <update_ball+0x1c4>)
24051972:	681b      	ldr	r3, [r3, #0]
24051974:	429a      	cmp	r2, r3
24051976:	d132      	bne.n	240519de <update_ball+0x9a>
		ball_xspeed = ball_speed;
24051978:	2203      	movs	r2, #3
2405197a:	4b63      	ldr	r3, [pc, #396]	; (24051b08 <update_ball+0x1c4>)
2405197c:	601a      	str	r2, [r3, #0]
		if (ball_y >= p1_y - 2 && ball_y <= p1_y + p1_height + 2) {
2405197e:	4b63      	ldr	r3, [pc, #396]	; (24051b0c <update_ball+0x1c8>)
24051980:	681b      	ldr	r3, [r3, #0]
24051982:	1e9a      	subs	r2, r3, #2
24051984:	4b62      	ldr	r3, [pc, #392]	; (24051b10 <update_ball+0x1cc>)
24051986:	681b      	ldr	r3, [r3, #0]
24051988:	429a      	cmp	r2, r3
2405198a:	dc08      	bgt.n	2405199e <update_ball+0x5a>
2405198c:	4b5f      	ldr	r3, [pc, #380]	; (24051b0c <update_ball+0x1c8>)
2405198e:	681b      	ldr	r3, [r3, #0]
24051990:	2228      	movs	r2, #40	; 0x28
24051992:	4413      	add	r3, r2
24051994:	1c9a      	adds	r2, r3, #2
24051996:	4b5e      	ldr	r3, [pc, #376]	; (24051b10 <update_ball+0x1cc>)
24051998:	681b      	ldr	r3, [r3, #0]
2405199a:	429a      	cmp	r2, r3
2405199c:	da1f      	bge.n	240519de <update_ball+0x9a>

		} else {
			score_p2++;
2405199e:	4b5d      	ldr	r3, [pc, #372]	; (24051b14 <update_ball+0x1d0>)
240519a0:	681b      	ldr	r3, [r3, #0]
240519a2:	3301      	adds	r3, #1
240519a4:	4a5b      	ldr	r2, [pc, #364]	; (24051b14 <update_ball+0x1d0>)
240519a6:	6013      	str	r3, [r2, #0]
			draw_score(buf);
240519a8:	6878      	ldr	r0, [r7, #4]
240519aa:	f7ff ff0b 	bl	240517c4 <draw_score>
			LCD_FillCircle(buf, ball_x, ball_y, ball_r, LCD_COLOR_RED);
240519ae:	4b55      	ldr	r3, [pc, #340]	; (24051b04 <update_ball+0x1c0>)
240519b0:	681b      	ldr	r3, [r3, #0]
240519b2:	b299      	uxth	r1, r3
240519b4:	4b56      	ldr	r3, [pc, #344]	; (24051b10 <update_ball+0x1cc>)
240519b6:	681b      	ldr	r3, [r3, #0]
240519b8:	b29a      	uxth	r2, r3
240519ba:	2308      	movs	r3, #8
240519bc:	b29b      	uxth	r3, r3
240519be:	f44f 4078 	mov.w	r0, #63488	; 0xf800
240519c2:	9000      	str	r0, [sp, #0]
240519c4:	6878      	ldr	r0, [r7, #4]
240519c6:	f000 fb9a 	bl	240520fe <LCD_FillCircle>
			lcd_swap();
240519ca:	f7ff fdfb 	bl	240515c4 <lcd_swap>
			lcd_wait_for_vblank();
240519ce:	f7ff fe53 	bl	24051678 <lcd_wait_for_vblank>
			HAL_Delay(1000);
240519d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
240519d6:	f002 fa05 	bl	24053de4 <HAL_Delay>
			game_init();
240519da:	f7ff fe63 	bl	240516a4 <game_init>
		}
	}
	if (ball_x >= p2_x + p2_width / 2 - ball_r - ball_speed
240519de:	2305      	movs	r3, #5
240519e0:	2b00      	cmp	r3, #0
240519e2:	da00      	bge.n	240519e6 <update_ball+0xa2>
240519e4:	3301      	adds	r3, #1
240519e6:	105b      	asrs	r3, r3, #1
240519e8:	461a      	mov	r2, r3
240519ea:	4b4b      	ldr	r3, [pc, #300]	; (24051b18 <update_ball+0x1d4>)
240519ec:	681b      	ldr	r3, [r3, #0]
240519ee:	4413      	add	r3, r2
240519f0:	2208      	movs	r2, #8
240519f2:	1a9b      	subs	r3, r3, r2
240519f4:	2203      	movs	r2, #3
240519f6:	1a9a      	subs	r2, r3, r2
240519f8:	4b42      	ldr	r3, [pc, #264]	; (24051b04 <update_ball+0x1c0>)
240519fa:	681b      	ldr	r3, [r3, #0]
240519fc:	429a      	cmp	r2, r3
240519fe:	dc38      	bgt.n	24051a72 <update_ball+0x12e>
			&& ball_xspeed == ball_speed) {
24051a00:	4b41      	ldr	r3, [pc, #260]	; (24051b08 <update_ball+0x1c4>)
24051a02:	681b      	ldr	r3, [r3, #0]
24051a04:	2203      	movs	r2, #3
24051a06:	4293      	cmp	r3, r2
24051a08:	d133      	bne.n	24051a72 <update_ball+0x12e>
		ball_xspeed = -ball_speed;
24051a0a:	2303      	movs	r3, #3
24051a0c:	425b      	negs	r3, r3
24051a0e:	4a3e      	ldr	r2, [pc, #248]	; (24051b08 <update_ball+0x1c4>)
24051a10:	6013      	str	r3, [r2, #0]
		if (ball_y >= p2_y - 2 && ball_y <= p2_y + p2_height + 2) {
24051a12:	4b42      	ldr	r3, [pc, #264]	; (24051b1c <update_ball+0x1d8>)
24051a14:	681b      	ldr	r3, [r3, #0]
24051a16:	1e9a      	subs	r2, r3, #2
24051a18:	4b3d      	ldr	r3, [pc, #244]	; (24051b10 <update_ball+0x1cc>)
24051a1a:	681b      	ldr	r3, [r3, #0]
24051a1c:	429a      	cmp	r2, r3
24051a1e:	dc08      	bgt.n	24051a32 <update_ball+0xee>
24051a20:	4b3e      	ldr	r3, [pc, #248]	; (24051b1c <update_ball+0x1d8>)
24051a22:	681b      	ldr	r3, [r3, #0]
24051a24:	2228      	movs	r2, #40	; 0x28
24051a26:	4413      	add	r3, r2
24051a28:	1c9a      	adds	r2, r3, #2
24051a2a:	4b39      	ldr	r3, [pc, #228]	; (24051b10 <update_ball+0x1cc>)
24051a2c:	681b      	ldr	r3, [r3, #0]
24051a2e:	429a      	cmp	r2, r3
24051a30:	da1f      	bge.n	24051a72 <update_ball+0x12e>

		} else {
			score_p1++;
24051a32:	4b3b      	ldr	r3, [pc, #236]	; (24051b20 <update_ball+0x1dc>)
24051a34:	681b      	ldr	r3, [r3, #0]
24051a36:	3301      	adds	r3, #1
24051a38:	4a39      	ldr	r2, [pc, #228]	; (24051b20 <update_ball+0x1dc>)
24051a3a:	6013      	str	r3, [r2, #0]
			draw_score(buf);
24051a3c:	6878      	ldr	r0, [r7, #4]
24051a3e:	f7ff fec1 	bl	240517c4 <draw_score>
			LCD_FillCircle(buf, ball_x, ball_y, ball_r, LCD_COLOR_RED);
24051a42:	4b30      	ldr	r3, [pc, #192]	; (24051b04 <update_ball+0x1c0>)
24051a44:	681b      	ldr	r3, [r3, #0]
24051a46:	b299      	uxth	r1, r3
24051a48:	4b31      	ldr	r3, [pc, #196]	; (24051b10 <update_ball+0x1cc>)
24051a4a:	681b      	ldr	r3, [r3, #0]
24051a4c:	b29a      	uxth	r2, r3
24051a4e:	2308      	movs	r3, #8
24051a50:	b29b      	uxth	r3, r3
24051a52:	f44f 4078 	mov.w	r0, #63488	; 0xf800
24051a56:	9000      	str	r0, [sp, #0]
24051a58:	6878      	ldr	r0, [r7, #4]
24051a5a:	f000 fb50 	bl	240520fe <LCD_FillCircle>
			lcd_swap();
24051a5e:	f7ff fdb1 	bl	240515c4 <lcd_swap>
			lcd_wait_for_vblank();
24051a62:	f7ff fe09 	bl	24051678 <lcd_wait_for_vblank>
			HAL_Delay(1000);
24051a66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
24051a6a:	f002 f9bb 	bl	24053de4 <HAL_Delay>
			game_init();
24051a6e:	f7ff fe19 	bl	240516a4 <game_init>
		}
	}
	if (ball_y <= 20 + ball_r + ball_speed && ball_yspeed == -ball_speed) {
24051a72:	2308      	movs	r3, #8
24051a74:	3314      	adds	r3, #20
24051a76:	2203      	movs	r2, #3
24051a78:	441a      	add	r2, r3
24051a7a:	4b25      	ldr	r3, [pc, #148]	; (24051b10 <update_ball+0x1cc>)
24051a7c:	681b      	ldr	r3, [r3, #0]
24051a7e:	429a      	cmp	r2, r3
24051a80:	db08      	blt.n	24051a94 <update_ball+0x150>
24051a82:	2303      	movs	r3, #3
24051a84:	425a      	negs	r2, r3
24051a86:	4b27      	ldr	r3, [pc, #156]	; (24051b24 <update_ball+0x1e0>)
24051a88:	681b      	ldr	r3, [r3, #0]
24051a8a:	429a      	cmp	r2, r3
24051a8c:	d102      	bne.n	24051a94 <update_ball+0x150>
		ball_yspeed = ball_speed;
24051a8e:	2203      	movs	r2, #3
24051a90:	4b24      	ldr	r3, [pc, #144]	; (24051b24 <update_ball+0x1e0>)
24051a92:	601a      	str	r2, [r3, #0]
	}
	if (ball_y >= LCD_GetYSize() - ball_r - ball_speed
24051a94:	f000 f8ab 	bl	24051bee <LCD_GetYSize>
24051a98:	4603      	mov	r3, r0
24051a9a:	461a      	mov	r2, r3
24051a9c:	2308      	movs	r3, #8
24051a9e:	1ad3      	subs	r3, r2, r3
24051aa0:	2203      	movs	r2, #3
24051aa2:	1a9a      	subs	r2, r3, r2
24051aa4:	4b1a      	ldr	r3, [pc, #104]	; (24051b10 <update_ball+0x1cc>)
24051aa6:	681b      	ldr	r3, [r3, #0]
24051aa8:	429a      	cmp	r2, r3
24051aaa:	dc08      	bgt.n	24051abe <update_ball+0x17a>
			&& ball_yspeed == ball_speed) {
24051aac:	4b1d      	ldr	r3, [pc, #116]	; (24051b24 <update_ball+0x1e0>)
24051aae:	681b      	ldr	r3, [r3, #0]
24051ab0:	2203      	movs	r2, #3
24051ab2:	4293      	cmp	r3, r2
24051ab4:	d103      	bne.n	24051abe <update_ball+0x17a>
		ball_yspeed = -ball_speed;
24051ab6:	2303      	movs	r3, #3
24051ab8:	425b      	negs	r3, r3
24051aba:	4a1a      	ldr	r2, [pc, #104]	; (24051b24 <update_ball+0x1e0>)
24051abc:	6013      	str	r3, [r2, #0]
	}
	ball_x = ball_x + ball_xspeed;
24051abe:	4b11      	ldr	r3, [pc, #68]	; (24051b04 <update_ball+0x1c0>)
24051ac0:	681a      	ldr	r2, [r3, #0]
24051ac2:	4b11      	ldr	r3, [pc, #68]	; (24051b08 <update_ball+0x1c4>)
24051ac4:	681b      	ldr	r3, [r3, #0]
24051ac6:	4413      	add	r3, r2
24051ac8:	4a0e      	ldr	r2, [pc, #56]	; (24051b04 <update_ball+0x1c0>)
24051aca:	6013      	str	r3, [r2, #0]
	ball_y = ball_y + ball_yspeed;
24051acc:	4b10      	ldr	r3, [pc, #64]	; (24051b10 <update_ball+0x1cc>)
24051ace:	681a      	ldr	r2, [r3, #0]
24051ad0:	4b14      	ldr	r3, [pc, #80]	; (24051b24 <update_ball+0x1e0>)
24051ad2:	681b      	ldr	r3, [r3, #0]
24051ad4:	4413      	add	r3, r2
24051ad6:	4a0e      	ldr	r2, [pc, #56]	; (24051b10 <update_ball+0x1cc>)
24051ad8:	6013      	str	r3, [r2, #0]

	LCD_FillCircle(buf, ball_x, ball_y, ball_r, LCD_COLOR_WHITE);
24051ada:	4b0a      	ldr	r3, [pc, #40]	; (24051b04 <update_ball+0x1c0>)
24051adc:	681b      	ldr	r3, [r3, #0]
24051ade:	b299      	uxth	r1, r3
24051ae0:	4b0b      	ldr	r3, [pc, #44]	; (24051b10 <update_ball+0x1cc>)
24051ae2:	681b      	ldr	r3, [r3, #0]
24051ae4:	b29a      	uxth	r2, r3
24051ae6:	2308      	movs	r3, #8
24051ae8:	b29b      	uxth	r3, r3
24051aea:	f64f 70ff 	movw	r0, #65535	; 0xffff
24051aee:	9000      	str	r0, [sp, #0]
24051af0:	6878      	ldr	r0, [r7, #4]
24051af2:	f000 fb04 	bl	240520fe <LCD_FillCircle>
}
24051af6:	bf00      	nop
24051af8:	3708      	adds	r7, #8
24051afa:	46bd      	mov	sp, r7
24051afc:	bd80      	pop	{r7, pc}
24051afe:	bf00      	nop
24051b00:	2000002c 	.word	0x2000002c
24051b04:	20000204 	.word	0x20000204
24051b08:	200001fc 	.word	0x200001fc
24051b0c:	20000030 	.word	0x20000030
24051b10:	20000208 	.word	0x20000208
24051b14:	200000e8 	.word	0x200000e8
24051b18:	20000034 	.word	0x20000034
24051b1c:	20000038 	.word	0x20000038
24051b20:	200000e4 	.word	0x200000e4
24051b24:	20000200 	.word	0x20000200

24051b28 <update_ai>:

void update_ai(uint16_t *buf) {
24051b28:	b590      	push	{r4, r7, lr}
24051b2a:	b085      	sub	sp, #20
24051b2c:	af02      	add	r7, sp, #8
24051b2e:	6078      	str	r0, [r7, #4]
	if (ball_y < (p2_y + (p2_height / 2))) {
24051b30:	2328      	movs	r3, #40	; 0x28
24051b32:	2b00      	cmp	r3, #0
24051b34:	da00      	bge.n	24051b38 <update_ai+0x10>
24051b36:	3301      	adds	r3, #1
24051b38:	105b      	asrs	r3, r3, #1
24051b3a:	461a      	mov	r2, r3
24051b3c:	4b24      	ldr	r3, [pc, #144]	; (24051bd0 <update_ai+0xa8>)
24051b3e:	681b      	ldr	r3, [r3, #0]
24051b40:	441a      	add	r2, r3
24051b42:	4b24      	ldr	r3, [pc, #144]	; (24051bd4 <update_ai+0xac>)
24051b44:	681b      	ldr	r3, [r3, #0]
24051b46:	429a      	cmp	r2, r3
24051b48:	dd0c      	ble.n	24051b64 <update_ai+0x3c>
		if (p2_y >= 20 + p2_speed + 2) {
24051b4a:	2302      	movs	r3, #2
24051b4c:	f103 0215 	add.w	r2, r3, #21
24051b50:	4b1f      	ldr	r3, [pc, #124]	; (24051bd0 <update_ai+0xa8>)
24051b52:	681b      	ldr	r3, [r3, #0]
24051b54:	429a      	cmp	r2, r3
24051b56:	da05      	bge.n	24051b64 <update_ai+0x3c>
			p2_y = p2_y - p2_speed;
24051b58:	4b1d      	ldr	r3, [pc, #116]	; (24051bd0 <update_ai+0xa8>)
24051b5a:	681b      	ldr	r3, [r3, #0]
24051b5c:	2202      	movs	r2, #2
24051b5e:	1a9b      	subs	r3, r3, r2
24051b60:	4a1b      	ldr	r2, [pc, #108]	; (24051bd0 <update_ai+0xa8>)
24051b62:	6013      	str	r3, [r2, #0]
		}
	}
	if (ball_y > (p2_y + (p2_height / 2))) {
24051b64:	2328      	movs	r3, #40	; 0x28
24051b66:	2b00      	cmp	r3, #0
24051b68:	da00      	bge.n	24051b6c <update_ai+0x44>
24051b6a:	3301      	adds	r3, #1
24051b6c:	105b      	asrs	r3, r3, #1
24051b6e:	461a      	mov	r2, r3
24051b70:	4b17      	ldr	r3, [pc, #92]	; (24051bd0 <update_ai+0xa8>)
24051b72:	681b      	ldr	r3, [r3, #0]
24051b74:	441a      	add	r2, r3
24051b76:	4b17      	ldr	r3, [pc, #92]	; (24051bd4 <update_ai+0xac>)
24051b78:	681b      	ldr	r3, [r3, #0]
24051b7a:	429a      	cmp	r2, r3
24051b7c:	da12      	bge.n	24051ba4 <update_ai+0x7c>
		if (p2_y <= LCD_GetYSize() - p2_height - p2_speed - 2) {
24051b7e:	f000 f836 	bl	24051bee <LCD_GetYSize>
24051b82:	4603      	mov	r3, r0
24051b84:	461a      	mov	r2, r3
24051b86:	2328      	movs	r3, #40	; 0x28
24051b88:	1ad3      	subs	r3, r2, r3
24051b8a:	2202      	movs	r2, #2
24051b8c:	1a9b      	subs	r3, r3, r2
24051b8e:	1e5a      	subs	r2, r3, #1
24051b90:	4b0f      	ldr	r3, [pc, #60]	; (24051bd0 <update_ai+0xa8>)
24051b92:	681b      	ldr	r3, [r3, #0]
24051b94:	429a      	cmp	r2, r3
24051b96:	dd05      	ble.n	24051ba4 <update_ai+0x7c>
			p2_y = p2_y + p2_speed;
24051b98:	4b0d      	ldr	r3, [pc, #52]	; (24051bd0 <update_ai+0xa8>)
24051b9a:	681b      	ldr	r3, [r3, #0]
24051b9c:	2202      	movs	r2, #2
24051b9e:	4413      	add	r3, r2
24051ba0:	4a0b      	ldr	r2, [pc, #44]	; (24051bd0 <update_ai+0xa8>)
24051ba2:	6013      	str	r3, [r2, #0]
		}
	}
	LCD_FillRect(buf, p2_x, p2_y, p2_width, p2_height, LCD_COLOR_WHITE);
24051ba4:	4b0c      	ldr	r3, [pc, #48]	; (24051bd8 <update_ai+0xb0>)
24051ba6:	681b      	ldr	r3, [r3, #0]
24051ba8:	b299      	uxth	r1, r3
24051baa:	4b09      	ldr	r3, [pc, #36]	; (24051bd0 <update_ai+0xa8>)
24051bac:	681b      	ldr	r3, [r3, #0]
24051bae:	b29a      	uxth	r2, r3
24051bb0:	2305      	movs	r3, #5
24051bb2:	b298      	uxth	r0, r3
24051bb4:	2328      	movs	r3, #40	; 0x28
24051bb6:	b29b      	uxth	r3, r3
24051bb8:	f64f 74ff 	movw	r4, #65535	; 0xffff
24051bbc:	9401      	str	r4, [sp, #4]
24051bbe:	9300      	str	r3, [sp, #0]
24051bc0:	4603      	mov	r3, r0
24051bc2:	6878      	ldr	r0, [r7, #4]
24051bc4:	f000 fa6a 	bl	2405209c <LCD_FillRect>
}
24051bc8:	bf00      	nop
24051bca:	370c      	adds	r7, #12
24051bcc:	46bd      	mov	sp, r7
24051bce:	bd90      	pop	{r4, r7, pc}
24051bd0:	20000038 	.word	0x20000038
24051bd4:	20000208 	.word	0x20000208
24051bd8:	20000034 	.word	0x20000034

24051bdc <LCD_GetXSize>:
/**
 * @brief  Gets the LCD X size.
 * @param  None
 * @retval The used LCD X size
 */
uint16_t LCD_GetXSize(void) {
24051bdc:	b480      	push	{r7}
24051bde:	af00      	add	r7, sp, #0
	return GW_LCD_WIDTH;
24051be0:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
24051be4:	4618      	mov	r0, r3
24051be6:	46bd      	mov	sp, r7
24051be8:	f85d 7b04 	ldr.w	r7, [sp], #4
24051bec:	4770      	bx	lr

24051bee <LCD_GetYSize>:
/**
 * @brief  Gets the LCD Y size.
 * @param  None
 * @retval The used LCD Y size
 */
uint16_t LCD_GetYSize(void) {
24051bee:	b480      	push	{r7}
24051bf0:	af00      	add	r7, sp, #0
	return GW_LCD_HEIGHT;
24051bf2:	23f0      	movs	r3, #240	; 0xf0
}
24051bf4:	4618      	mov	r0, r3
24051bf6:	46bd      	mov	sp, r7
24051bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
24051bfc:	4770      	bx	lr
	...

24051c00 <LCD_SetFont>:
/**
 * @brief  Sets the Text Font.
 * @param  pFonts: the layer font to be used
 * @retval None
 */
void LCD_SetFont(sFONT *pFonts) {
24051c00:	b480      	push	{r7}
24051c02:	b083      	sub	sp, #12
24051c04:	af00      	add	r7, sp, #0
24051c06:	6078      	str	r0, [r7, #4]
	font = pFonts;
24051c08:	4a04      	ldr	r2, [pc, #16]	; (24051c1c <LCD_SetFont+0x1c>)
24051c0a:	687b      	ldr	r3, [r7, #4]
24051c0c:	6013      	str	r3, [r2, #0]
}
24051c0e:	bf00      	nop
24051c10:	370c      	adds	r7, #12
24051c12:	46bd      	mov	sp, r7
24051c14:	f85d 7b04 	ldr.w	r7, [sp], #4
24051c18:	4770      	bx	lr
24051c1a:	bf00      	nop
24051c1c:	2000003c 	.word	0x2000003c

24051c20 <LCD_DrawPixel>:
 * @param  Xpos: the X position
 * @param  Ypos: the Y position
 * @param  RGB_Code: the pixel color in RGB(5-6-5)
 * @retval None
 */
void LCD_DrawPixel(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint16_t pixel) {
24051c20:	b480      	push	{r7}
24051c22:	b085      	sub	sp, #20
24051c24:	af00      	add	r7, sp, #0
24051c26:	60f8      	str	r0, [r7, #12]
24051c28:	4608      	mov	r0, r1
24051c2a:	4611      	mov	r1, r2
24051c2c:	461a      	mov	r2, r3
24051c2e:	4603      	mov	r3, r0
24051c30:	817b      	strh	r3, [r7, #10]
24051c32:	460b      	mov	r3, r1
24051c34:	813b      	strh	r3, [r7, #8]
24051c36:	4613      	mov	r3, r2
24051c38:	80fb      	strh	r3, [r7, #6]
	if (PPOS(Xpos, Ypos) > GW_LCD_WIDTH * GW_LCD_HEIGHT) {
24051c3a:	893a      	ldrh	r2, [r7, #8]
24051c3c:	4613      	mov	r3, r2
24051c3e:	009b      	lsls	r3, r3, #2
24051c40:	4413      	add	r3, r2
24051c42:	019b      	lsls	r3, r3, #6
24051c44:	461a      	mov	r2, r3
24051c46:	897b      	ldrh	r3, [r7, #10]
24051c48:	4413      	add	r3, r2
24051c4a:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
24051c4e:	dc0d      	bgt.n	24051c6c <LCD_DrawPixel+0x4c>
		return;
	}
	buf[PPOS(Xpos, Ypos)] = pixel;
24051c50:	893a      	ldrh	r2, [r7, #8]
24051c52:	4613      	mov	r3, r2
24051c54:	009b      	lsls	r3, r3, #2
24051c56:	4413      	add	r3, r2
24051c58:	019b      	lsls	r3, r3, #6
24051c5a:	461a      	mov	r2, r3
24051c5c:	897b      	ldrh	r3, [r7, #10]
24051c5e:	4413      	add	r3, r2
24051c60:	005b      	lsls	r3, r3, #1
24051c62:	68fa      	ldr	r2, [r7, #12]
24051c64:	4413      	add	r3, r2
24051c66:	88fa      	ldrh	r2, [r7, #6]
24051c68:	801a      	strh	r2, [r3, #0]
24051c6a:	e000      	b.n	24051c6e <LCD_DrawPixel+0x4e>
		return;
24051c6c:	bf00      	nop
}
24051c6e:	3714      	adds	r7, #20
24051c70:	46bd      	mov	sp, r7
24051c72:	f85d 7b04 	ldr.w	r7, [sp], #4
24051c76:	4770      	bx	lr

24051c78 <LCD_Clear>:
/**
 * @brief  Clears the whole LCD.
 * @param  Color: the color of the background
 * @retval None
 */
void LCD_Clear(uint16_t *buf, uint16_t color) {
24051c78:	b590      	push	{r4, r7, lr}
24051c7a:	b085      	sub	sp, #20
24051c7c:	af02      	add	r7, sp, #8
24051c7e:	6078      	str	r0, [r7, #4]
24051c80:	460b      	mov	r3, r1
24051c82:	807b      	strh	r3, [r7, #2]
	FillBuffer((uint32_t*) buf, LCD_GetXSize(), LCD_GetYSize(), 0, color);
24051c84:	f7ff ffaa 	bl	24051bdc <LCD_GetXSize>
24051c88:	4603      	mov	r3, r0
24051c8a:	461c      	mov	r4, r3
24051c8c:	f7ff ffaf 	bl	24051bee <LCD_GetYSize>
24051c90:	4603      	mov	r3, r0
24051c92:	461a      	mov	r2, r3
24051c94:	887b      	ldrh	r3, [r7, #2]
24051c96:	9300      	str	r3, [sp, #0]
24051c98:	2300      	movs	r3, #0
24051c9a:	4621      	mov	r1, r4
24051c9c:	6878      	ldr	r0, [r7, #4]
24051c9e:	f000 fb63 	bl	24052368 <FillBuffer>
}
24051ca2:	bf00      	nop
24051ca4:	370c      	adds	r7, #12
24051ca6:	46bd      	mov	sp, r7
24051ca8:	bd90      	pop	{r4, r7, pc}
	...

24051cac <LCD_DisplayStringAt>:
 *                @arg RIGHT_MODE
 *                @arg LEFT_MODE
 * @retval None
 */
void LCD_DisplayStringAt(uint16_t *buf, uint16_t X, uint16_t Y, uint8_t *pText,
		Text_AlignModeTypdef mode) {
24051cac:	b590      	push	{r4, r7, lr}
24051cae:	b089      	sub	sp, #36	; 0x24
24051cb0:	af00      	add	r7, sp, #0
24051cb2:	60f8      	str	r0, [r7, #12]
24051cb4:	607b      	str	r3, [r7, #4]
24051cb6:	460b      	mov	r3, r1
24051cb8:	817b      	strh	r3, [r7, #10]
24051cba:	4613      	mov	r3, r2
24051cbc:	813b      	strh	r3, [r7, #8]
	uint16_t refcolumn = 1, i = 0;
24051cbe:	2301      	movs	r3, #1
24051cc0:	83fb      	strh	r3, [r7, #30]
24051cc2:	2300      	movs	r3, #0
24051cc4:	83bb      	strh	r3, [r7, #28]
	uint32_t size = 0, xsize = 0;
24051cc6:	2300      	movs	r3, #0
24051cc8:	61bb      	str	r3, [r7, #24]
24051cca:	2300      	movs	r3, #0
24051ccc:	613b      	str	r3, [r7, #16]
	uint8_t *ptr = pText;
24051cce:	687b      	ldr	r3, [r7, #4]
24051cd0:	617b      	str	r3, [r7, #20]

	/* Get the text size */
	while (*ptr++)
24051cd2:	e002      	b.n	24051cda <LCD_DisplayStringAt+0x2e>
		size++;
24051cd4:	69bb      	ldr	r3, [r7, #24]
24051cd6:	3301      	adds	r3, #1
24051cd8:	61bb      	str	r3, [r7, #24]
	while (*ptr++)
24051cda:	697b      	ldr	r3, [r7, #20]
24051cdc:	1c5a      	adds	r2, r3, #1
24051cde:	617a      	str	r2, [r7, #20]
24051ce0:	781b      	ldrb	r3, [r3, #0]
24051ce2:	2b00      	cmp	r3, #0
24051ce4:	d1f6      	bne.n	24051cd4 <LCD_DisplayStringAt+0x28>

	/* Characters number per line */
	xsize = (LCD_GetXSize() / font->Width);
24051ce6:	f7ff ff79 	bl	24051bdc <LCD_GetXSize>
24051cea:	4603      	mov	r3, r0
24051cec:	461a      	mov	r2, r3
24051cee:	4b36      	ldr	r3, [pc, #216]	; (24051dc8 <LCD_DisplayStringAt+0x11c>)
24051cf0:	681b      	ldr	r3, [r3, #0]
24051cf2:	889b      	ldrh	r3, [r3, #4]
24051cf4:	fbb2 f3f3 	udiv	r3, r2, r3
24051cf8:	b29b      	uxth	r3, r3
24051cfa:	613b      	str	r3, [r7, #16]

	switch (mode) {
24051cfc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
24051d00:	2b03      	cmp	r3, #3
24051d02:	d014      	beq.n	24051d2e <LCD_DisplayStringAt+0x82>
24051d04:	2b03      	cmp	r3, #3
24051d06:	dc23      	bgt.n	24051d50 <LCD_DisplayStringAt+0xa4>
24051d08:	2b01      	cmp	r3, #1
24051d0a:	d002      	beq.n	24051d12 <LCD_DisplayStringAt+0x66>
24051d0c:	2b02      	cmp	r3, #2
24051d0e:	d011      	beq.n	24051d34 <LCD_DisplayStringAt+0x88>
24051d10:	e01e      	b.n	24051d50 <LCD_DisplayStringAt+0xa4>
	case CENTER_MODE: {
		refcolumn = X + ((xsize - size) * font->Width) / 2;
24051d12:	693a      	ldr	r2, [r7, #16]
24051d14:	69bb      	ldr	r3, [r7, #24]
24051d16:	1ad3      	subs	r3, r2, r3
24051d18:	4a2b      	ldr	r2, [pc, #172]	; (24051dc8 <LCD_DisplayStringAt+0x11c>)
24051d1a:	6812      	ldr	r2, [r2, #0]
24051d1c:	8892      	ldrh	r2, [r2, #4]
24051d1e:	fb02 f303 	mul.w	r3, r2, r3
24051d22:	085b      	lsrs	r3, r3, #1
24051d24:	b29a      	uxth	r2, r3
24051d26:	897b      	ldrh	r3, [r7, #10]
24051d28:	4413      	add	r3, r2
24051d2a:	83fb      	strh	r3, [r7, #30]
		break;
24051d2c:	e013      	b.n	24051d56 <LCD_DisplayStringAt+0xaa>
	}
	case LEFT_MODE: {
		refcolumn = X;
24051d2e:	897b      	ldrh	r3, [r7, #10]
24051d30:	83fb      	strh	r3, [r7, #30]
		break;
24051d32:	e010      	b.n	24051d56 <LCD_DisplayStringAt+0xaa>
	}
	case RIGHT_MODE: {
		refcolumn = X + ((xsize - size) * font->Width);
24051d34:	693a      	ldr	r2, [r7, #16]
24051d36:	69bb      	ldr	r3, [r7, #24]
24051d38:	1ad3      	subs	r3, r2, r3
24051d3a:	b29a      	uxth	r2, r3
24051d3c:	4b22      	ldr	r3, [pc, #136]	; (24051dc8 <LCD_DisplayStringAt+0x11c>)
24051d3e:	681b      	ldr	r3, [r3, #0]
24051d40:	889b      	ldrh	r3, [r3, #4]
24051d42:	fb12 f303 	smulbb	r3, r2, r3
24051d46:	b29a      	uxth	r2, r3
24051d48:	897b      	ldrh	r3, [r7, #10]
24051d4a:	4413      	add	r3, r2
24051d4c:	83fb      	strh	r3, [r7, #30]
		break;
24051d4e:	e002      	b.n	24051d56 <LCD_DisplayStringAt+0xaa>
	}
	default: {
		refcolumn = X;
24051d50:	897b      	ldrh	r3, [r7, #10]
24051d52:	83fb      	strh	r3, [r7, #30]
		break;
24051d54:	bf00      	nop
	}
	}

	/* Send the string character by character on LCD */
	while ((*pText != 0)
24051d56:	e012      	b.n	24051d7e <LCD_DisplayStringAt+0xd2>
			& (((LCD_GetXSize() - (i * font->Width)) & 0xFFFF) >= font->Width)) {
		/* Display one character on LCD */
		LCD_DisplayChar(buf, refcolumn, Y, *pText);
24051d58:	687b      	ldr	r3, [r7, #4]
24051d5a:	781b      	ldrb	r3, [r3, #0]
24051d5c:	893a      	ldrh	r2, [r7, #8]
24051d5e:	8bf9      	ldrh	r1, [r7, #30]
24051d60:	68f8      	ldr	r0, [r7, #12]
24051d62:	f000 f833 	bl	24051dcc <LCD_DisplayChar>
		/* Decrement the column position by 16 */
		refcolumn += font->Width;
24051d66:	4b18      	ldr	r3, [pc, #96]	; (24051dc8 <LCD_DisplayStringAt+0x11c>)
24051d68:	681b      	ldr	r3, [r3, #0]
24051d6a:	889a      	ldrh	r2, [r3, #4]
24051d6c:	8bfb      	ldrh	r3, [r7, #30]
24051d6e:	4413      	add	r3, r2
24051d70:	83fb      	strh	r3, [r7, #30]
		/* Point on the next character */
		pText++;
24051d72:	687b      	ldr	r3, [r7, #4]
24051d74:	3301      	adds	r3, #1
24051d76:	607b      	str	r3, [r7, #4]
		i++;
24051d78:	8bbb      	ldrh	r3, [r7, #28]
24051d7a:	3301      	adds	r3, #1
24051d7c:	83bb      	strh	r3, [r7, #28]
	while ((*pText != 0)
24051d7e:	687b      	ldr	r3, [r7, #4]
24051d80:	781b      	ldrb	r3, [r3, #0]
			& (((LCD_GetXSize() - (i * font->Width)) & 0xFFFF) >= font->Width)) {
24051d82:	2b00      	cmp	r3, #0
24051d84:	bf14      	ite	ne
24051d86:	2301      	movne	r3, #1
24051d88:	2300      	moveq	r3, #0
24051d8a:	b2dc      	uxtb	r4, r3
24051d8c:	f7ff ff26 	bl	24051bdc <LCD_GetXSize>
24051d90:	4603      	mov	r3, r0
24051d92:	4619      	mov	r1, r3
24051d94:	8bbb      	ldrh	r3, [r7, #28]
24051d96:	4a0c      	ldr	r2, [pc, #48]	; (24051dc8 <LCD_DisplayStringAt+0x11c>)
24051d98:	6812      	ldr	r2, [r2, #0]
24051d9a:	8892      	ldrh	r2, [r2, #4]
24051d9c:	fb02 f303 	mul.w	r3, r2, r3
24051da0:	1acb      	subs	r3, r1, r3
24051da2:	b29b      	uxth	r3, r3
24051da4:	4a08      	ldr	r2, [pc, #32]	; (24051dc8 <LCD_DisplayStringAt+0x11c>)
24051da6:	6812      	ldr	r2, [r2, #0]
24051da8:	8892      	ldrh	r2, [r2, #4]
24051daa:	4293      	cmp	r3, r2
24051dac:	bfac      	ite	ge
24051dae:	2301      	movge	r3, #1
24051db0:	2300      	movlt	r3, #0
24051db2:	b2db      	uxtb	r3, r3
24051db4:	4023      	ands	r3, r4
24051db6:	b2db      	uxtb	r3, r3
	while ((*pText != 0)
24051db8:	2b00      	cmp	r3, #0
24051dba:	d1cd      	bne.n	24051d58 <LCD_DisplayStringAt+0xac>
	}
}
24051dbc:	bf00      	nop
24051dbe:	bf00      	nop
24051dc0:	3724      	adds	r7, #36	; 0x24
24051dc2:	46bd      	mov	sp, r7
24051dc4:	bd90      	pop	{r4, r7, pc}
24051dc6:	bf00      	nop
24051dc8:	2000003c 	.word	0x2000003c

24051dcc <LCD_DisplayChar>:
 * @param  Xpos: start column address
 * @param  Ypos: the Line where to display the character shape
 * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
 * @retval None
 */
void LCD_DisplayChar(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint8_t Ascii) {
24051dcc:	b580      	push	{r7, lr}
24051dce:	b084      	sub	sp, #16
24051dd0:	af00      	add	r7, sp, #0
24051dd2:	60f8      	str	r0, [r7, #12]
24051dd4:	4608      	mov	r0, r1
24051dd6:	4611      	mov	r1, r2
24051dd8:	461a      	mov	r2, r3
24051dda:	4603      	mov	r3, r0
24051ddc:	817b      	strh	r3, [r7, #10]
24051dde:	460b      	mov	r3, r1
24051de0:	813b      	strh	r3, [r7, #8]
24051de2:	4613      	mov	r3, r2
24051de4:	71fb      	strb	r3, [r7, #7]
	DrawChar(buf, Xpos, Ypos,
			&font->table[(Ascii - ' ') * font->Height * ((font->Width + 7) / 8)]);
24051de6:	4b0f      	ldr	r3, [pc, #60]	; (24051e24 <LCD_DisplayChar+0x58>)
24051de8:	681b      	ldr	r3, [r3, #0]
24051dea:	681a      	ldr	r2, [r3, #0]
24051dec:	79fb      	ldrb	r3, [r7, #7]
24051dee:	3b20      	subs	r3, #32
24051df0:	490c      	ldr	r1, [pc, #48]	; (24051e24 <LCD_DisplayChar+0x58>)
24051df2:	6809      	ldr	r1, [r1, #0]
24051df4:	88c9      	ldrh	r1, [r1, #6]
24051df6:	fb03 f101 	mul.w	r1, r3, r1
24051dfa:	4b0a      	ldr	r3, [pc, #40]	; (24051e24 <LCD_DisplayChar+0x58>)
24051dfc:	681b      	ldr	r3, [r3, #0]
24051dfe:	889b      	ldrh	r3, [r3, #4]
24051e00:	3307      	adds	r3, #7
24051e02:	2b00      	cmp	r3, #0
24051e04:	da00      	bge.n	24051e08 <LCD_DisplayChar+0x3c>
24051e06:	3307      	adds	r3, #7
24051e08:	10db      	asrs	r3, r3, #3
24051e0a:	fb01 f303 	mul.w	r3, r1, r3
	DrawChar(buf, Xpos, Ypos,
24051e0e:	4413      	add	r3, r2
24051e10:	893a      	ldrh	r2, [r7, #8]
24051e12:	8979      	ldrh	r1, [r7, #10]
24051e14:	68f8      	ldr	r0, [r7, #12]
24051e16:	f000 fa09 	bl	2405222c <DrawChar>
}
24051e1a:	bf00      	nop
24051e1c:	3710      	adds	r7, #16
24051e1e:	46bd      	mov	sp, r7
24051e20:	bd80      	pop	{r7, pc}
24051e22:	bf00      	nop
24051e24:	2000003c 	.word	0x2000003c

24051e28 <LCD_DrawHLine>:
 * @param  Ypos: the Y position
 * @param  Length: line length
 * @retval None
 */
void LCD_DrawHLine(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint16_t Length,
		uint16_t color) {
24051e28:	b580      	push	{r7, lr}
24051e2a:	b088      	sub	sp, #32
24051e2c:	af02      	add	r7, sp, #8
24051e2e:	60f8      	str	r0, [r7, #12]
24051e30:	4608      	mov	r0, r1
24051e32:	4611      	mov	r1, r2
24051e34:	461a      	mov	r2, r3
24051e36:	4603      	mov	r3, r0
24051e38:	817b      	strh	r3, [r7, #10]
24051e3a:	460b      	mov	r3, r1
24051e3c:	813b      	strh	r3, [r7, #8]
24051e3e:	4613      	mov	r3, r2
24051e40:	80fb      	strh	r3, [r7, #6]
	uint16_t *xaddress = 0;
24051e42:	2300      	movs	r3, #0
24051e44:	617b      	str	r3, [r7, #20]

	/* Get the line address */
	xaddress = (buf) + (LCD_GetXSize() * Ypos + Xpos);
24051e46:	f7ff fec9 	bl	24051bdc <LCD_GetXSize>
24051e4a:	4603      	mov	r3, r0
24051e4c:	461a      	mov	r2, r3
24051e4e:	893b      	ldrh	r3, [r7, #8]
24051e50:	fb03 f202 	mul.w	r2, r3, r2
24051e54:	897b      	ldrh	r3, [r7, #10]
24051e56:	4413      	add	r3, r2
24051e58:	005b      	lsls	r3, r3, #1
24051e5a:	68fa      	ldr	r2, [r7, #12]
24051e5c:	4413      	add	r3, r2
24051e5e:	617b      	str	r3, [r7, #20]

	/* Write line */
	FillBuffer((uint32_t*) xaddress, Length, 1, 0, color);
24051e60:	88f9      	ldrh	r1, [r7, #6]
24051e62:	8c3b      	ldrh	r3, [r7, #32]
24051e64:	9300      	str	r3, [sp, #0]
24051e66:	2300      	movs	r3, #0
24051e68:	2201      	movs	r2, #1
24051e6a:	6978      	ldr	r0, [r7, #20]
24051e6c:	f000 fa7c 	bl	24052368 <FillBuffer>
}
24051e70:	bf00      	nop
24051e72:	3718      	adds	r7, #24
24051e74:	46bd      	mov	sp, r7
24051e76:	bd80      	pop	{r7, pc}

24051e78 <LCD_DrawVLine>:
 * @param  Ypos: the Y position
 * @param  Length: line length
 * @retval None
 */
void LCD_DrawVLine(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint16_t Length,
		uint16_t color) {
24051e78:	b590      	push	{r4, r7, lr}
24051e7a:	b089      	sub	sp, #36	; 0x24
24051e7c:	af02      	add	r7, sp, #8
24051e7e:	60f8      	str	r0, [r7, #12]
24051e80:	4608      	mov	r0, r1
24051e82:	4611      	mov	r1, r2
24051e84:	461a      	mov	r2, r3
24051e86:	4603      	mov	r3, r0
24051e88:	817b      	strh	r3, [r7, #10]
24051e8a:	460b      	mov	r3, r1
24051e8c:	813b      	strh	r3, [r7, #8]
24051e8e:	4613      	mov	r3, r2
24051e90:	80fb      	strh	r3, [r7, #6]
	uint16_t *xaddress = 0;
24051e92:	2300      	movs	r3, #0
24051e94:	617b      	str	r3, [r7, #20]

	/* Get the line address */
	xaddress = (buf) + (LCD_GetXSize() * Ypos + Xpos);
24051e96:	f7ff fea1 	bl	24051bdc <LCD_GetXSize>
24051e9a:	4603      	mov	r3, r0
24051e9c:	461a      	mov	r2, r3
24051e9e:	893b      	ldrh	r3, [r7, #8]
24051ea0:	fb03 f202 	mul.w	r2, r3, r2
24051ea4:	897b      	ldrh	r3, [r7, #10]
24051ea6:	4413      	add	r3, r2
24051ea8:	005b      	lsls	r3, r3, #1
24051eaa:	68fa      	ldr	r2, [r7, #12]
24051eac:	4413      	add	r3, r2
24051eae:	617b      	str	r3, [r7, #20]

	/* Write line */
	FillBuffer((uint32_t*) xaddress, 1, Length, (LCD_GetXSize() - 1), color);
24051eb0:	88fc      	ldrh	r4, [r7, #6]
24051eb2:	f7ff fe93 	bl	24051bdc <LCD_GetXSize>
24051eb6:	4603      	mov	r3, r0
24051eb8:	3b01      	subs	r3, #1
24051eba:	461a      	mov	r2, r3
24051ebc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
24051ebe:	9300      	str	r3, [sp, #0]
24051ec0:	4613      	mov	r3, r2
24051ec2:	4622      	mov	r2, r4
24051ec4:	2101      	movs	r1, #1
24051ec6:	6978      	ldr	r0, [r7, #20]
24051ec8:	f000 fa4e 	bl	24052368 <FillBuffer>
}
24051ecc:	bf00      	nop
24051ece:	371c      	adds	r7, #28
24051ed0:	46bd      	mov	sp, r7
24051ed2:	bd90      	pop	{r4, r7, pc}

24051ed4 <LCD_DrawRect>:
 * @param  Height: display rectangle height
 * @param  Width: display rectangle width
 * @retval None
 */
void LCD_DrawRect(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint16_t Width,
		uint16_t Height, uint16_t color) {
24051ed4:	b580      	push	{r7, lr}
24051ed6:	b086      	sub	sp, #24
24051ed8:	af02      	add	r7, sp, #8
24051eda:	60f8      	str	r0, [r7, #12]
24051edc:	4608      	mov	r0, r1
24051ede:	4611      	mov	r1, r2
24051ee0:	461a      	mov	r2, r3
24051ee2:	4603      	mov	r3, r0
24051ee4:	817b      	strh	r3, [r7, #10]
24051ee6:	460b      	mov	r3, r1
24051ee8:	813b      	strh	r3, [r7, #8]
24051eea:	4613      	mov	r3, r2
24051eec:	80fb      	strh	r3, [r7, #6]
	/* Draw horizontal lines */
	LCD_DrawHLine(buf, Xpos, Ypos, Width, color);
24051eee:	88f8      	ldrh	r0, [r7, #6]
24051ef0:	893a      	ldrh	r2, [r7, #8]
24051ef2:	8979      	ldrh	r1, [r7, #10]
24051ef4:	8bbb      	ldrh	r3, [r7, #28]
24051ef6:	9300      	str	r3, [sp, #0]
24051ef8:	4603      	mov	r3, r0
24051efa:	68f8      	ldr	r0, [r7, #12]
24051efc:	f7ff ff94 	bl	24051e28 <LCD_DrawHLine>
	LCD_DrawHLine(buf, Xpos, (Ypos + Height), Width, color);
24051f00:	893a      	ldrh	r2, [r7, #8]
24051f02:	8b3b      	ldrh	r3, [r7, #24]
24051f04:	4413      	add	r3, r2
24051f06:	b29a      	uxth	r2, r3
24051f08:	88f8      	ldrh	r0, [r7, #6]
24051f0a:	8979      	ldrh	r1, [r7, #10]
24051f0c:	8bbb      	ldrh	r3, [r7, #28]
24051f0e:	9300      	str	r3, [sp, #0]
24051f10:	4603      	mov	r3, r0
24051f12:	68f8      	ldr	r0, [r7, #12]
24051f14:	f7ff ff88 	bl	24051e28 <LCD_DrawHLine>

	/* Draw vertical lines */
	LCD_DrawVLine(buf, Xpos, Ypos, Height, color);
24051f18:	8b38      	ldrh	r0, [r7, #24]
24051f1a:	893a      	ldrh	r2, [r7, #8]
24051f1c:	8979      	ldrh	r1, [r7, #10]
24051f1e:	8bbb      	ldrh	r3, [r7, #28]
24051f20:	9300      	str	r3, [sp, #0]
24051f22:	4603      	mov	r3, r0
24051f24:	68f8      	ldr	r0, [r7, #12]
24051f26:	f7ff ffa7 	bl	24051e78 <LCD_DrawVLine>
	LCD_DrawVLine(buf, (Xpos + Width), Ypos, Height, color);
24051f2a:	897a      	ldrh	r2, [r7, #10]
24051f2c:	88fb      	ldrh	r3, [r7, #6]
24051f2e:	4413      	add	r3, r2
24051f30:	b299      	uxth	r1, r3
24051f32:	8b38      	ldrh	r0, [r7, #24]
24051f34:	893a      	ldrh	r2, [r7, #8]
24051f36:	8bbb      	ldrh	r3, [r7, #28]
24051f38:	9300      	str	r3, [sp, #0]
24051f3a:	4603      	mov	r3, r0
24051f3c:	68f8      	ldr	r0, [r7, #12]
24051f3e:	f7ff ff9b 	bl	24051e78 <LCD_DrawVLine>
}
24051f42:	bf00      	nop
24051f44:	3710      	adds	r7, #16
24051f46:	46bd      	mov	sp, r7
24051f48:	bd80      	pop	{r7, pc}

24051f4a <LCD_DrawCircle>:
 * @param  Ypos: the Y position
 * @param  Radius: the circle radius
 * @retval None
 */
void LCD_DrawCircle(uint16_t *buf, uint16_t Xpos, uint16_t Ypos,
		uint16_t Radius, uint16_t color) {
24051f4a:	b580      	push	{r7, lr}
24051f4c:	b088      	sub	sp, #32
24051f4e:	af00      	add	r7, sp, #0
24051f50:	60f8      	str	r0, [r7, #12]
24051f52:	4608      	mov	r0, r1
24051f54:	4611      	mov	r1, r2
24051f56:	461a      	mov	r2, r3
24051f58:	4603      	mov	r3, r0
24051f5a:	817b      	strh	r3, [r7, #10]
24051f5c:	460b      	mov	r3, r1
24051f5e:	813b      	strh	r3, [r7, #8]
24051f60:	4613      	mov	r3, r2
24051f62:	80fb      	strh	r3, [r7, #6]
	int32_t d;/* Decision Variable */
	uint32_t curx;/* Current X Value */
	uint32_t cury;/* Current Y Value */

	d = 3 - (Radius << 1);
24051f64:	88fb      	ldrh	r3, [r7, #6]
24051f66:	005b      	lsls	r3, r3, #1
24051f68:	f1c3 0303 	rsb	r3, r3, #3
24051f6c:	61fb      	str	r3, [r7, #28]
	curx = 0;
24051f6e:	2300      	movs	r3, #0
24051f70:	61bb      	str	r3, [r7, #24]
	cury = Radius;
24051f72:	88fb      	ldrh	r3, [r7, #6]
24051f74:	617b      	str	r3, [r7, #20]

	while (curx <= cury) {
24051f76:	e087      	b.n	24052088 <LCD_DrawCircle+0x13e>
		LCD_DrawPixel(buf, (Xpos + curx), (Ypos - cury), color);
24051f78:	69bb      	ldr	r3, [r7, #24]
24051f7a:	b29a      	uxth	r2, r3
24051f7c:	897b      	ldrh	r3, [r7, #10]
24051f7e:	4413      	add	r3, r2
24051f80:	b299      	uxth	r1, r3
24051f82:	697b      	ldr	r3, [r7, #20]
24051f84:	b29b      	uxth	r3, r3
24051f86:	893a      	ldrh	r2, [r7, #8]
24051f88:	1ad3      	subs	r3, r2, r3
24051f8a:	b29a      	uxth	r2, r3
24051f8c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
24051f8e:	68f8      	ldr	r0, [r7, #12]
24051f90:	f7ff fe46 	bl	24051c20 <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos - curx), (Ypos - cury), color);
24051f94:	69bb      	ldr	r3, [r7, #24]
24051f96:	b29b      	uxth	r3, r3
24051f98:	897a      	ldrh	r2, [r7, #10]
24051f9a:	1ad3      	subs	r3, r2, r3
24051f9c:	b299      	uxth	r1, r3
24051f9e:	697b      	ldr	r3, [r7, #20]
24051fa0:	b29b      	uxth	r3, r3
24051fa2:	893a      	ldrh	r2, [r7, #8]
24051fa4:	1ad3      	subs	r3, r2, r3
24051fa6:	b29a      	uxth	r2, r3
24051fa8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
24051faa:	68f8      	ldr	r0, [r7, #12]
24051fac:	f7ff fe38 	bl	24051c20 <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos + cury), (Ypos - curx), color);
24051fb0:	697b      	ldr	r3, [r7, #20]
24051fb2:	b29a      	uxth	r2, r3
24051fb4:	897b      	ldrh	r3, [r7, #10]
24051fb6:	4413      	add	r3, r2
24051fb8:	b299      	uxth	r1, r3
24051fba:	69bb      	ldr	r3, [r7, #24]
24051fbc:	b29b      	uxth	r3, r3
24051fbe:	893a      	ldrh	r2, [r7, #8]
24051fc0:	1ad3      	subs	r3, r2, r3
24051fc2:	b29a      	uxth	r2, r3
24051fc4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
24051fc6:	68f8      	ldr	r0, [r7, #12]
24051fc8:	f7ff fe2a 	bl	24051c20 <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos - cury), (Ypos - curx), color);
24051fcc:	697b      	ldr	r3, [r7, #20]
24051fce:	b29b      	uxth	r3, r3
24051fd0:	897a      	ldrh	r2, [r7, #10]
24051fd2:	1ad3      	subs	r3, r2, r3
24051fd4:	b299      	uxth	r1, r3
24051fd6:	69bb      	ldr	r3, [r7, #24]
24051fd8:	b29b      	uxth	r3, r3
24051fda:	893a      	ldrh	r2, [r7, #8]
24051fdc:	1ad3      	subs	r3, r2, r3
24051fde:	b29a      	uxth	r2, r3
24051fe0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
24051fe2:	68f8      	ldr	r0, [r7, #12]
24051fe4:	f7ff fe1c 	bl	24051c20 <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos + curx), (Ypos + cury), color);
24051fe8:	69bb      	ldr	r3, [r7, #24]
24051fea:	b29a      	uxth	r2, r3
24051fec:	897b      	ldrh	r3, [r7, #10]
24051fee:	4413      	add	r3, r2
24051ff0:	b299      	uxth	r1, r3
24051ff2:	697b      	ldr	r3, [r7, #20]
24051ff4:	b29a      	uxth	r2, r3
24051ff6:	893b      	ldrh	r3, [r7, #8]
24051ff8:	4413      	add	r3, r2
24051ffa:	b29a      	uxth	r2, r3
24051ffc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
24051ffe:	68f8      	ldr	r0, [r7, #12]
24052000:	f7ff fe0e 	bl	24051c20 <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos - curx), (Ypos + cury), color);
24052004:	69bb      	ldr	r3, [r7, #24]
24052006:	b29b      	uxth	r3, r3
24052008:	897a      	ldrh	r2, [r7, #10]
2405200a:	1ad3      	subs	r3, r2, r3
2405200c:	b299      	uxth	r1, r3
2405200e:	697b      	ldr	r3, [r7, #20]
24052010:	b29a      	uxth	r2, r3
24052012:	893b      	ldrh	r3, [r7, #8]
24052014:	4413      	add	r3, r2
24052016:	b29a      	uxth	r2, r3
24052018:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
2405201a:	68f8      	ldr	r0, [r7, #12]
2405201c:	f7ff fe00 	bl	24051c20 <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos + cury), (Ypos + curx), color);
24052020:	697b      	ldr	r3, [r7, #20]
24052022:	b29a      	uxth	r2, r3
24052024:	897b      	ldrh	r3, [r7, #10]
24052026:	4413      	add	r3, r2
24052028:	b299      	uxth	r1, r3
2405202a:	69bb      	ldr	r3, [r7, #24]
2405202c:	b29a      	uxth	r2, r3
2405202e:	893b      	ldrh	r3, [r7, #8]
24052030:	4413      	add	r3, r2
24052032:	b29a      	uxth	r2, r3
24052034:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
24052036:	68f8      	ldr	r0, [r7, #12]
24052038:	f7ff fdf2 	bl	24051c20 <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos - cury), (Ypos + curx), color);
2405203c:	697b      	ldr	r3, [r7, #20]
2405203e:	b29b      	uxth	r3, r3
24052040:	897a      	ldrh	r2, [r7, #10]
24052042:	1ad3      	subs	r3, r2, r3
24052044:	b299      	uxth	r1, r3
24052046:	69bb      	ldr	r3, [r7, #24]
24052048:	b29a      	uxth	r2, r3
2405204a:	893b      	ldrh	r3, [r7, #8]
2405204c:	4413      	add	r3, r2
2405204e:	b29a      	uxth	r2, r3
24052050:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
24052052:	68f8      	ldr	r0, [r7, #12]
24052054:	f7ff fde4 	bl	24051c20 <LCD_DrawPixel>

		if (d < 0) {
24052058:	69fb      	ldr	r3, [r7, #28]
2405205a:	2b00      	cmp	r3, #0
2405205c:	da06      	bge.n	2405206c <LCD_DrawCircle+0x122>
			d += (curx << 2) + 6;
2405205e:	69bb      	ldr	r3, [r7, #24]
24052060:	009a      	lsls	r2, r3, #2
24052062:	69fb      	ldr	r3, [r7, #28]
24052064:	4413      	add	r3, r2
24052066:	3306      	adds	r3, #6
24052068:	61fb      	str	r3, [r7, #28]
2405206a:	e00a      	b.n	24052082 <LCD_DrawCircle+0x138>
		} else {
			d += ((curx - cury) << 2) + 10;
2405206c:	69ba      	ldr	r2, [r7, #24]
2405206e:	697b      	ldr	r3, [r7, #20]
24052070:	1ad3      	subs	r3, r2, r3
24052072:	009a      	lsls	r2, r3, #2
24052074:	69fb      	ldr	r3, [r7, #28]
24052076:	4413      	add	r3, r2
24052078:	330a      	adds	r3, #10
2405207a:	61fb      	str	r3, [r7, #28]
			cury--;
2405207c:	697b      	ldr	r3, [r7, #20]
2405207e:	3b01      	subs	r3, #1
24052080:	617b      	str	r3, [r7, #20]
		}
		curx++;
24052082:	69bb      	ldr	r3, [r7, #24]
24052084:	3301      	adds	r3, #1
24052086:	61bb      	str	r3, [r7, #24]
	while (curx <= cury) {
24052088:	69ba      	ldr	r2, [r7, #24]
2405208a:	697b      	ldr	r3, [r7, #20]
2405208c:	429a      	cmp	r2, r3
2405208e:	f67f af73 	bls.w	24051f78 <LCD_DrawCircle+0x2e>
	}
}
24052092:	bf00      	nop
24052094:	bf00      	nop
24052096:	3720      	adds	r7, #32
24052098:	46bd      	mov	sp, r7
2405209a:	bd80      	pop	{r7, pc}

2405209c <LCD_FillRect>:
 * @param  Height: rectangle height
 * @param  Width: rectangle width
 * @retval None
 */
void LCD_FillRect(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint16_t Width,
		uint16_t Height, uint16_t color) {
2405209c:	b5b0      	push	{r4, r5, r7, lr}
2405209e:	b088      	sub	sp, #32
240520a0:	af02      	add	r7, sp, #8
240520a2:	60f8      	str	r0, [r7, #12]
240520a4:	4608      	mov	r0, r1
240520a6:	4611      	mov	r1, r2
240520a8:	461a      	mov	r2, r3
240520aa:	4603      	mov	r3, r0
240520ac:	817b      	strh	r3, [r7, #10]
240520ae:	460b      	mov	r3, r1
240520b0:	813b      	strh	r3, [r7, #8]
240520b2:	4613      	mov	r3, r2
240520b4:	80fb      	strh	r3, [r7, #6]
	uint16_t *xaddress = 0;
240520b6:	2300      	movs	r3, #0
240520b8:	617b      	str	r3, [r7, #20]

	/* Get the rectangle start address */
	xaddress = (buf) + (LCD_GetXSize() * Ypos + Xpos);
240520ba:	f7ff fd8f 	bl	24051bdc <LCD_GetXSize>
240520be:	4603      	mov	r3, r0
240520c0:	461a      	mov	r2, r3
240520c2:	893b      	ldrh	r3, [r7, #8]
240520c4:	fb03 f202 	mul.w	r2, r3, r2
240520c8:	897b      	ldrh	r3, [r7, #10]
240520ca:	4413      	add	r3, r2
240520cc:	005b      	lsls	r3, r3, #1
240520ce:	68fa      	ldr	r2, [r7, #12]
240520d0:	4413      	add	r3, r2
240520d2:	617b      	str	r3, [r7, #20]

	/* Fill the rectangle */
	FillBuffer((uint32_t*) xaddress, Width, Height, (LCD_GetXSize() - Width),
240520d4:	88fc      	ldrh	r4, [r7, #6]
240520d6:	8d3d      	ldrh	r5, [r7, #40]	; 0x28
240520d8:	f7ff fd80 	bl	24051bdc <LCD_GetXSize>
240520dc:	4603      	mov	r3, r0
240520de:	461a      	mov	r2, r3
240520e0:	88fb      	ldrh	r3, [r7, #6]
240520e2:	1ad3      	subs	r3, r2, r3
240520e4:	461a      	mov	r2, r3
240520e6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
240520e8:	9300      	str	r3, [sp, #0]
240520ea:	4613      	mov	r3, r2
240520ec:	462a      	mov	r2, r5
240520ee:	4621      	mov	r1, r4
240520f0:	6978      	ldr	r0, [r7, #20]
240520f2:	f000 f939 	bl	24052368 <FillBuffer>
			color);
}
240520f6:	bf00      	nop
240520f8:	3718      	adds	r7, #24
240520fa:	46bd      	mov	sp, r7
240520fc:	bdb0      	pop	{r4, r5, r7, pc}

240520fe <LCD_FillCircle>:
 * @param  Ypos: the Y position
 * @param  Radius: the circle radius
 * @retval None
 */
void LCD_FillCircle(uint16_t *buf, uint16_t Xpos, uint16_t Ypos,
		uint16_t Radius, uint16_t color) {
240520fe:	b580      	push	{r7, lr}
24052100:	b08a      	sub	sp, #40	; 0x28
24052102:	af02      	add	r7, sp, #8
24052104:	60f8      	str	r0, [r7, #12]
24052106:	4608      	mov	r0, r1
24052108:	4611      	mov	r1, r2
2405210a:	461a      	mov	r2, r3
2405210c:	4603      	mov	r3, r0
2405210e:	817b      	strh	r3, [r7, #10]
24052110:	460b      	mov	r3, r1
24052112:	813b      	strh	r3, [r7, #8]
24052114:	4613      	mov	r3, r2
24052116:	80fb      	strh	r3, [r7, #6]
	int32_t d; /* Decision Variable */
	uint32_t curx;/* Current X Value */
	uint32_t cury;/* Current Y Value */

	d = 3 - (Radius << 1);
24052118:	88fb      	ldrh	r3, [r7, #6]
2405211a:	005b      	lsls	r3, r3, #1
2405211c:	f1c3 0303 	rsb	r3, r3, #3
24052120:	61fb      	str	r3, [r7, #28]

	curx = 0;
24052122:	2300      	movs	r3, #0
24052124:	61bb      	str	r3, [r7, #24]
	cury = Radius;
24052126:	88fb      	ldrh	r3, [r7, #6]
24052128:	617b      	str	r3, [r7, #20]

	while (curx <= cury) {
2405212a:	e06d      	b.n	24052208 <LCD_FillCircle+0x10a>
		if (cury > 0) {
2405212c:	697b      	ldr	r3, [r7, #20]
2405212e:	2b00      	cmp	r3, #0
24052130:	d027      	beq.n	24052182 <LCD_FillCircle+0x84>
			LCD_DrawHLine(buf, Xpos - cury, Ypos + curx, 2 * cury, color);
24052132:	697b      	ldr	r3, [r7, #20]
24052134:	b29b      	uxth	r3, r3
24052136:	897a      	ldrh	r2, [r7, #10]
24052138:	1ad3      	subs	r3, r2, r3
2405213a:	b299      	uxth	r1, r3
2405213c:	69bb      	ldr	r3, [r7, #24]
2405213e:	b29a      	uxth	r2, r3
24052140:	893b      	ldrh	r3, [r7, #8]
24052142:	4413      	add	r3, r2
24052144:	b29a      	uxth	r2, r3
24052146:	697b      	ldr	r3, [r7, #20]
24052148:	b29b      	uxth	r3, r3
2405214a:	005b      	lsls	r3, r3, #1
2405214c:	b298      	uxth	r0, r3
2405214e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
24052150:	9300      	str	r3, [sp, #0]
24052152:	4603      	mov	r3, r0
24052154:	68f8      	ldr	r0, [r7, #12]
24052156:	f7ff fe67 	bl	24051e28 <LCD_DrawHLine>
			LCD_DrawHLine(buf, Xpos - cury, Ypos - curx, 2 * cury, color);
2405215a:	697b      	ldr	r3, [r7, #20]
2405215c:	b29b      	uxth	r3, r3
2405215e:	897a      	ldrh	r2, [r7, #10]
24052160:	1ad3      	subs	r3, r2, r3
24052162:	b299      	uxth	r1, r3
24052164:	69bb      	ldr	r3, [r7, #24]
24052166:	b29b      	uxth	r3, r3
24052168:	893a      	ldrh	r2, [r7, #8]
2405216a:	1ad3      	subs	r3, r2, r3
2405216c:	b29a      	uxth	r2, r3
2405216e:	697b      	ldr	r3, [r7, #20]
24052170:	b29b      	uxth	r3, r3
24052172:	005b      	lsls	r3, r3, #1
24052174:	b298      	uxth	r0, r3
24052176:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
24052178:	9300      	str	r3, [sp, #0]
2405217a:	4603      	mov	r3, r0
2405217c:	68f8      	ldr	r0, [r7, #12]
2405217e:	f7ff fe53 	bl	24051e28 <LCD_DrawHLine>
		}

		if (curx > 0) {
24052182:	69bb      	ldr	r3, [r7, #24]
24052184:	2b00      	cmp	r3, #0
24052186:	d027      	beq.n	240521d8 <LCD_FillCircle+0xda>
			LCD_DrawHLine(buf, Xpos - curx, Ypos - cury, 2 * curx, color);
24052188:	69bb      	ldr	r3, [r7, #24]
2405218a:	b29b      	uxth	r3, r3
2405218c:	897a      	ldrh	r2, [r7, #10]
2405218e:	1ad3      	subs	r3, r2, r3
24052190:	b299      	uxth	r1, r3
24052192:	697b      	ldr	r3, [r7, #20]
24052194:	b29b      	uxth	r3, r3
24052196:	893a      	ldrh	r2, [r7, #8]
24052198:	1ad3      	subs	r3, r2, r3
2405219a:	b29a      	uxth	r2, r3
2405219c:	69bb      	ldr	r3, [r7, #24]
2405219e:	b29b      	uxth	r3, r3
240521a0:	005b      	lsls	r3, r3, #1
240521a2:	b298      	uxth	r0, r3
240521a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
240521a6:	9300      	str	r3, [sp, #0]
240521a8:	4603      	mov	r3, r0
240521aa:	68f8      	ldr	r0, [r7, #12]
240521ac:	f7ff fe3c 	bl	24051e28 <LCD_DrawHLine>
			LCD_DrawHLine(buf, Xpos - curx, Ypos + cury, 2 * curx, color);
240521b0:	69bb      	ldr	r3, [r7, #24]
240521b2:	b29b      	uxth	r3, r3
240521b4:	897a      	ldrh	r2, [r7, #10]
240521b6:	1ad3      	subs	r3, r2, r3
240521b8:	b299      	uxth	r1, r3
240521ba:	697b      	ldr	r3, [r7, #20]
240521bc:	b29a      	uxth	r2, r3
240521be:	893b      	ldrh	r3, [r7, #8]
240521c0:	4413      	add	r3, r2
240521c2:	b29a      	uxth	r2, r3
240521c4:	69bb      	ldr	r3, [r7, #24]
240521c6:	b29b      	uxth	r3, r3
240521c8:	005b      	lsls	r3, r3, #1
240521ca:	b298      	uxth	r0, r3
240521cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
240521ce:	9300      	str	r3, [sp, #0]
240521d0:	4603      	mov	r3, r0
240521d2:	68f8      	ldr	r0, [r7, #12]
240521d4:	f7ff fe28 	bl	24051e28 <LCD_DrawHLine>
		}
		if (d < 0) {
240521d8:	69fb      	ldr	r3, [r7, #28]
240521da:	2b00      	cmp	r3, #0
240521dc:	da06      	bge.n	240521ec <LCD_FillCircle+0xee>
			d += (curx << 2) + 6;
240521de:	69bb      	ldr	r3, [r7, #24]
240521e0:	009a      	lsls	r2, r3, #2
240521e2:	69fb      	ldr	r3, [r7, #28]
240521e4:	4413      	add	r3, r2
240521e6:	3306      	adds	r3, #6
240521e8:	61fb      	str	r3, [r7, #28]
240521ea:	e00a      	b.n	24052202 <LCD_FillCircle+0x104>
		} else {
			d += ((curx - cury) << 2) + 10;
240521ec:	69ba      	ldr	r2, [r7, #24]
240521ee:	697b      	ldr	r3, [r7, #20]
240521f0:	1ad3      	subs	r3, r2, r3
240521f2:	009a      	lsls	r2, r3, #2
240521f4:	69fb      	ldr	r3, [r7, #28]
240521f6:	4413      	add	r3, r2
240521f8:	330a      	adds	r3, #10
240521fa:	61fb      	str	r3, [r7, #28]
			cury--;
240521fc:	697b      	ldr	r3, [r7, #20]
240521fe:	3b01      	subs	r3, #1
24052200:	617b      	str	r3, [r7, #20]
		}
		curx++;
24052202:	69bb      	ldr	r3, [r7, #24]
24052204:	3301      	adds	r3, #1
24052206:	61bb      	str	r3, [r7, #24]
	while (curx <= cury) {
24052208:	69ba      	ldr	r2, [r7, #24]
2405220a:	697b      	ldr	r3, [r7, #20]
2405220c:	429a      	cmp	r2, r3
2405220e:	d98d      	bls.n	2405212c <LCD_FillCircle+0x2e>
	}
	LCD_DrawCircle(buf, Xpos, Ypos, Radius, color);
24052210:	88f8      	ldrh	r0, [r7, #6]
24052212:	893a      	ldrh	r2, [r7, #8]
24052214:	8979      	ldrh	r1, [r7, #10]
24052216:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
24052218:	9300      	str	r3, [sp, #0]
2405221a:	4603      	mov	r3, r0
2405221c:	68f8      	ldr	r0, [r7, #12]
2405221e:	f7ff fe94 	bl	24051f4a <LCD_DrawCircle>
}
24052222:	bf00      	nop
24052224:	3720      	adds	r7, #32
24052226:	46bd      	mov	sp, r7
24052228:	bd80      	pop	{r7, pc}
	...

2405222c <DrawChar>:
 * @param  Ypos: start column address
 * @param  c: pointer to the character data
 * @retval None
 */
static void DrawChar(uint16_t *buf, uint16_t Xpos, uint16_t Ypos,
		const uint8_t *c) {
2405222c:	b580      	push	{r7, lr}
2405222e:	b08a      	sub	sp, #40	; 0x28
24052230:	af00      	add	r7, sp, #0
24052232:	60f8      	str	r0, [r7, #12]
24052234:	607b      	str	r3, [r7, #4]
24052236:	460b      	mov	r3, r1
24052238:	817b      	strh	r3, [r7, #10]
2405223a:	4613      	mov	r3, r2
2405223c:	813b      	strh	r3, [r7, #8]
	uint32_t i = 0, j = 0;
2405223e:	2300      	movs	r3, #0
24052240:	627b      	str	r3, [r7, #36]	; 0x24
24052242:	2300      	movs	r3, #0
24052244:	623b      	str	r3, [r7, #32]
	uint16_t height, width;
	uint8_t offset;
	uint8_t *pchar;
	uint32_t line = 0;
24052246:	2300      	movs	r3, #0
24052248:	61fb      	str	r3, [r7, #28]

	height = font->Height;
2405224a:	4b44      	ldr	r3, [pc, #272]	; (2405235c <DrawChar+0x130>)
2405224c:	681b      	ldr	r3, [r3, #0]
2405224e:	88db      	ldrh	r3, [r3, #6]
24052250:	837b      	strh	r3, [r7, #26]
	width = font->Width;
24052252:	4b42      	ldr	r3, [pc, #264]	; (2405235c <DrawChar+0x130>)
24052254:	681b      	ldr	r3, [r3, #0]
24052256:	889b      	ldrh	r3, [r3, #4]
24052258:	833b      	strh	r3, [r7, #24]

	offset = 8 * ((width + 7) / 8) - width;
2405225a:	8b3b      	ldrh	r3, [r7, #24]
2405225c:	3307      	adds	r3, #7
2405225e:	2b00      	cmp	r3, #0
24052260:	da00      	bge.n	24052264 <DrawChar+0x38>
24052262:	3307      	adds	r3, #7
24052264:	10db      	asrs	r3, r3, #3
24052266:	b2db      	uxtb	r3, r3
24052268:	00db      	lsls	r3, r3, #3
2405226a:	b2da      	uxtb	r2, r3
2405226c:	8b3b      	ldrh	r3, [r7, #24]
2405226e:	b2db      	uxtb	r3, r3
24052270:	1ad3      	subs	r3, r2, r3
24052272:	75fb      	strb	r3, [r7, #23]

	for (i = 0; i < height; i++) {
24052274:	2300      	movs	r3, #0
24052276:	627b      	str	r3, [r7, #36]	; 0x24
24052278:	e067      	b.n	2405234a <DrawChar+0x11e>
		pchar = ((uint8_t*) c + (width + 7) / 8 * i);
2405227a:	8b3b      	ldrh	r3, [r7, #24]
2405227c:	3307      	adds	r3, #7
2405227e:	2b00      	cmp	r3, #0
24052280:	da00      	bge.n	24052284 <DrawChar+0x58>
24052282:	3307      	adds	r3, #7
24052284:	10db      	asrs	r3, r3, #3
24052286:	461a      	mov	r2, r3
24052288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405228a:	fb02 f303 	mul.w	r3, r2, r3
2405228e:	687a      	ldr	r2, [r7, #4]
24052290:	4413      	add	r3, r2
24052292:	613b      	str	r3, [r7, #16]

		switch (((width + 7) / 8)) {
24052294:	8b3b      	ldrh	r3, [r7, #24]
24052296:	3307      	adds	r3, #7
24052298:	2b00      	cmp	r3, #0
2405229a:	da00      	bge.n	2405229e <DrawChar+0x72>
2405229c:	3307      	adds	r3, #7
2405229e:	10db      	asrs	r3, r3, #3
240522a0:	2b01      	cmp	r3, #1
240522a2:	d002      	beq.n	240522aa <DrawChar+0x7e>
240522a4:	2b02      	cmp	r3, #2
240522a6:	d004      	beq.n	240522b2 <DrawChar+0x86>
240522a8:	e00c      	b.n	240522c4 <DrawChar+0x98>
		case 1:
			line = pchar[0];
240522aa:	693b      	ldr	r3, [r7, #16]
240522ac:	781b      	ldrb	r3, [r3, #0]
240522ae:	61fb      	str	r3, [r7, #28]
			break;
240522b0:	e016      	b.n	240522e0 <DrawChar+0xb4>

		case 2:
			line = (pchar[0] << 8) | pchar[1];
240522b2:	693b      	ldr	r3, [r7, #16]
240522b4:	781b      	ldrb	r3, [r3, #0]
240522b6:	021b      	lsls	r3, r3, #8
240522b8:	693a      	ldr	r2, [r7, #16]
240522ba:	3201      	adds	r2, #1
240522bc:	7812      	ldrb	r2, [r2, #0]
240522be:	4313      	orrs	r3, r2
240522c0:	61fb      	str	r3, [r7, #28]
			break;
240522c2:	e00d      	b.n	240522e0 <DrawChar+0xb4>

		case 3:
		default:
			line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
240522c4:	693b      	ldr	r3, [r7, #16]
240522c6:	781b      	ldrb	r3, [r3, #0]
240522c8:	041a      	lsls	r2, r3, #16
240522ca:	693b      	ldr	r3, [r7, #16]
240522cc:	3301      	adds	r3, #1
240522ce:	781b      	ldrb	r3, [r3, #0]
240522d0:	021b      	lsls	r3, r3, #8
240522d2:	4313      	orrs	r3, r2
240522d4:	693a      	ldr	r2, [r7, #16]
240522d6:	3202      	adds	r2, #2
240522d8:	7812      	ldrb	r2, [r2, #0]
240522da:	4313      	orrs	r3, r2
240522dc:	61fb      	str	r3, [r7, #28]
			break;
240522de:	bf00      	nop
		}

		for (j = 0; j < width; j++) {
240522e0:	2300      	movs	r3, #0
240522e2:	623b      	str	r3, [r7, #32]
240522e4:	e027      	b.n	24052336 <DrawChar+0x10a>
			if (line & (1 << (width - j + offset - 1))) {
240522e6:	8b3a      	ldrh	r2, [r7, #24]
240522e8:	6a3b      	ldr	r3, [r7, #32]
240522ea:	1ad2      	subs	r2, r2, r3
240522ec:	7dfb      	ldrb	r3, [r7, #23]
240522ee:	4413      	add	r3, r2
240522f0:	3b01      	subs	r3, #1
240522f2:	2201      	movs	r2, #1
240522f4:	fa02 f303 	lsl.w	r3, r2, r3
240522f8:	461a      	mov	r2, r3
240522fa:	69fb      	ldr	r3, [r7, #28]
240522fc:	4013      	ands	r3, r2
240522fe:	2b00      	cmp	r3, #0
24052300:	d00b      	beq.n	2405231a <DrawChar+0xee>
				LCD_DrawPixel(buf, (Xpos + j), Ypos, font_color);
24052302:	6a3b      	ldr	r3, [r7, #32]
24052304:	b29a      	uxth	r2, r3
24052306:	897b      	ldrh	r3, [r7, #10]
24052308:	4413      	add	r3, r2
2405230a:	b299      	uxth	r1, r3
2405230c:	4b14      	ldr	r3, [pc, #80]	; (24052360 <DrawChar+0x134>)
2405230e:	881b      	ldrh	r3, [r3, #0]
24052310:	893a      	ldrh	r2, [r7, #8]
24052312:	68f8      	ldr	r0, [r7, #12]
24052314:	f7ff fc84 	bl	24051c20 <LCD_DrawPixel>
24052318:	e00a      	b.n	24052330 <DrawChar+0x104>
			} else {
				LCD_DrawPixel(buf, (Xpos + j), Ypos, font_bcolor);
2405231a:	6a3b      	ldr	r3, [r7, #32]
2405231c:	b29a      	uxth	r2, r3
2405231e:	897b      	ldrh	r3, [r7, #10]
24052320:	4413      	add	r3, r2
24052322:	b299      	uxth	r1, r3
24052324:	4b0f      	ldr	r3, [pc, #60]	; (24052364 <DrawChar+0x138>)
24052326:	881b      	ldrh	r3, [r3, #0]
24052328:	893a      	ldrh	r2, [r7, #8]
2405232a:	68f8      	ldr	r0, [r7, #12]
2405232c:	f7ff fc78 	bl	24051c20 <LCD_DrawPixel>
		for (j = 0; j < width; j++) {
24052330:	6a3b      	ldr	r3, [r7, #32]
24052332:	3301      	adds	r3, #1
24052334:	623b      	str	r3, [r7, #32]
24052336:	8b3b      	ldrh	r3, [r7, #24]
24052338:	6a3a      	ldr	r2, [r7, #32]
2405233a:	429a      	cmp	r2, r3
2405233c:	d3d3      	bcc.n	240522e6 <DrawChar+0xba>
			}
		}
		Ypos++;
2405233e:	893b      	ldrh	r3, [r7, #8]
24052340:	3301      	adds	r3, #1
24052342:	813b      	strh	r3, [r7, #8]
	for (i = 0; i < height; i++) {
24052344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24052346:	3301      	adds	r3, #1
24052348:	627b      	str	r3, [r7, #36]	; 0x24
2405234a:	8b7b      	ldrh	r3, [r7, #26]
2405234c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2405234e:	429a      	cmp	r2, r3
24052350:	d393      	bcc.n	2405227a <DrawChar+0x4e>
	}
}
24052352:	bf00      	nop
24052354:	bf00      	nop
24052356:	3728      	adds	r7, #40	; 0x28
24052358:	46bd      	mov	sp, r7
2405235a:	bd80      	pop	{r7, pc}
2405235c:	2000003c 	.word	0x2000003c
24052360:	20000040 	.word	0x20000040
24052364:	2000020c 	.word	0x2000020c

24052368 <FillBuffer>:
 * @param  OffLine: offset
 * @param  ColorIndex: color Index
 * @retval None
 */
static void FillBuffer(void *pDst, uint32_t xSize, uint32_t ySize,
		uint32_t OffLine, uint16_t ColorIndex) {
24052368:	b480      	push	{r7}
2405236a:	b085      	sub	sp, #20
2405236c:	af00      	add	r7, sp, #0
2405236e:	60f8      	str	r0, [r7, #12]
24052370:	60b9      	str	r1, [r7, #8]
24052372:	607a      	str	r2, [r7, #4]
24052374:	603b      	str	r3, [r7, #0]

	DMA2D->CR = DMA2D_R2M;
24052376:	4b16      	ldr	r3, [pc, #88]	; (240523d0 <FillBuffer+0x68>)
24052378:	f44f 3240 	mov.w	r2, #196608	; 0x30000
2405237c:	601a      	str	r2, [r3, #0]
	DMA2D->OCOLR = 0x0000FFFF & ColorIndex;
2405237e:	4a14      	ldr	r2, [pc, #80]	; (240523d0 <FillBuffer+0x68>)
24052380:	8b3b      	ldrh	r3, [r7, #24]
24052382:	6393      	str	r3, [r2, #56]	; 0x38
	DMA2D->OMAR = (uint32_t) pDst;
24052384:	4a12      	ldr	r2, [pc, #72]	; (240523d0 <FillBuffer+0x68>)
24052386:	68fb      	ldr	r3, [r7, #12]
24052388:	63d3      	str	r3, [r2, #60]	; 0x3c
	DMA2D->OOR = OffLine;
2405238a:	4a11      	ldr	r2, [pc, #68]	; (240523d0 <FillBuffer+0x68>)
2405238c:	683b      	ldr	r3, [r7, #0]
2405238e:	6413      	str	r3, [r2, #64]	; 0x40
	DMA2D->OPFCCR = LTDC_PIXEL_FORMAT_RGB565;
24052390:	4b0f      	ldr	r3, [pc, #60]	; (240523d0 <FillBuffer+0x68>)
24052392:	2202      	movs	r2, #2
24052394:	635a      	str	r2, [r3, #52]	; 0x34
	DMA2D->NLR = (uint32_t) (xSize << 16) | (uint16_t) ySize;
24052396:	68bb      	ldr	r3, [r7, #8]
24052398:	041b      	lsls	r3, r3, #16
2405239a:	687a      	ldr	r2, [r7, #4]
2405239c:	b292      	uxth	r2, r2
2405239e:	4611      	mov	r1, r2
240523a0:	4a0b      	ldr	r2, [pc, #44]	; (240523d0 <FillBuffer+0x68>)
240523a2:	430b      	orrs	r3, r1
240523a4:	6453      	str	r3, [r2, #68]	; 0x44

	DMA2D->CR |= DMA2D_CR_START;
240523a6:	4b0a      	ldr	r3, [pc, #40]	; (240523d0 <FillBuffer+0x68>)
240523a8:	681b      	ldr	r3, [r3, #0]
240523aa:	4a09      	ldr	r2, [pc, #36]	; (240523d0 <FillBuffer+0x68>)
240523ac:	f043 0301 	orr.w	r3, r3, #1
240523b0:	6013      	str	r3, [r2, #0]

	while (DMA2D->CR & DMA2D_CR_START) {
240523b2:	bf00      	nop
240523b4:	4b06      	ldr	r3, [pc, #24]	; (240523d0 <FillBuffer+0x68>)
240523b6:	681b      	ldr	r3, [r3, #0]
240523b8:	f003 0301 	and.w	r3, r3, #1
240523bc:	2b00      	cmp	r3, #0
240523be:	d1f9      	bne.n	240523b4 <FillBuffer+0x4c>

	}
}
240523c0:	bf00      	nop
240523c2:	bf00      	nop
240523c4:	3714      	adds	r7, #20
240523c6:	46bd      	mov	sp, r7
240523c8:	f85d 7b04 	ldr.w	r7, [sp], #4
240523cc:	4770      	bx	lr
240523ce:	bf00      	nop
240523d0:	52001000 	.word	0x52001000

240523d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
240523d4:	b580      	push	{r7, lr}
240523d6:	b088      	sub	sp, #32
240523d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
240523da:	f001 fc71 	bl	24053cc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
240523de:	f000 f86d 	bl	240524bc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
240523e2:	f000 f8ed 	bl	240525c0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
240523e6:	f000 fc93 	bl	24052d10 <MX_GPIO_Init>
  MX_DMA_Init();
240523ea:	f000 fc71 	bl	24052cd0 <MX_DMA_Init>
  MX_LTDC_Init();
240523ee:	f000 fa2f 	bl	24052850 <MX_LTDC_Init>
  MX_SPI2_Init();
240523f2:	f000 fbc3 	bl	24052b7c <MX_SPI2_Init>
  MX_OCTOSPI1_Init();
240523f6:	f000 faab 	bl	24052950 <MX_OCTOSPI1_Init>
  MX_SAI1_Init();
240523fa:	f000 fb89 	bl	24052b10 <MX_SAI1_Init>
  MX_RTC_Init();
240523fe:	f000 fb07 	bl	24052a10 <MX_RTC_Init>
  MX_DAC1_Init();
24052402:	f000 f999 	bl	24052738 <MX_DAC1_Init>
  MX_DAC2_Init();
24052406:	f000 f9d3 	bl	240527b0 <MX_DAC2_Init>
  MX_ADC1_Init();
2405240a:	f000 f91d 	bl	24052648 <MX_ADC1_Init>
  MX_TIM1_Init();
2405240e:	f000 fc0b 	bl	24052c28 <MX_TIM1_Init>
  MX_DMA2D_Init();
24052412:	f000 f9ff 	bl	24052814 <MX_DMA2D_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
24052416:	f000 f90b 	bl	24052630 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	lcd_init(&hspi2, &hltdc);
2405241a:	4923      	ldr	r1, [pc, #140]	; (240524a8 <main+0xd4>)
2405241c:	4823      	ldr	r0, [pc, #140]	; (240524ac <main+0xd8>)
2405241e:	f7fe ff4d 	bl	240512bc <lcd_init>
	lcd_backlight_set(backlightLevels[6]);
24052422:	23b2      	movs	r3, #178	; 0xb2
24052424:	4618      	mov	r0, r3
24052426:	f7fe ff1d 	bl	24051264 <lcd_backlight_set>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	OSPI_Init(&hospi1);
2405242a:	4821      	ldr	r0, [pc, #132]	; (240524b0 <main+0xdc>)
2405242c:	f7fe fe6a 	bl	24051104 <OSPI_Init>

	// Sanity check, sometimes this is triggered
	uint32_t add = 0x90000000;
24052430:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
24052434:	61fb      	str	r3, [r7, #28]
	uint32_t *ptr = (uint32_t*) add;
24052436:	69fb      	ldr	r3, [r7, #28]
24052438:	61bb      	str	r3, [r7, #24]
	if (*ptr == 0x88888888) {
2405243a:	69bb      	ldr	r3, [r7, #24]
2405243c:	681b      	ldr	r3, [r3, #0]
2405243e:	f1b3 3f88 	cmp.w	r3, #2290649224	; 0x88888888
24052442:	d101      	bne.n	24052448 <main+0x74>
		Error_Handler();
24052444:	f000 fd64 	bl	24052f10 <Error_Handler>
	}

	bq24072_init();
24052448:	f7fe f9d6 	bl	240507f8 <bq24072_init>

	gw_audio_init();
2405244c:	f7fd fe48 	bl	240500e0 <gw_audio_init>

	RTC_TimeTypeDef sTime = { 0 };
24052450:	1d3b      	adds	r3, r7, #4
24052452:	2200      	movs	r2, #0
24052454:	601a      	str	r2, [r3, #0]
24052456:	605a      	str	r2, [r3, #4]
24052458:	609a      	str	r2, [r3, #8]
2405245a:	60da      	str	r2, [r3, #12]
2405245c:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
2405245e:	2300      	movs	r3, #0
24052460:	603b      	str	r3, [r7, #0]
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
24052462:	1d3b      	adds	r3, r7, #4
24052464:	2200      	movs	r2, #0
24052466:	4619      	mov	r1, r3
24052468:	4812      	ldr	r0, [pc, #72]	; (240524b4 <main+0xe0>)
2405246a:	f00c fd39 	bl	2405eee0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
2405246e:	463b      	mov	r3, r7
24052470:	2200      	movs	r2, #0
24052472:	4619      	mov	r1, r3
24052474:	480f      	ldr	r0, [pc, #60]	; (240524b4 <main+0xe0>)
24052476:	f00c fe17 	bl	2405f0a8 <HAL_RTC_GetDate>
	HAL_ADC_Start(&hadc1);
2405247a:	480f      	ldr	r0, [pc, #60]	; (240524b8 <main+0xe4>)
2405247c:	f002 f876 	bl	2405456c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
24052480:	f04f 31ff 	mov.w	r1, #4294967295
24052484:	480c      	ldr	r0, [pc, #48]	; (240524b8 <main+0xe4>)
24052486:	f002 f92b 	bl	240546e0 <HAL_ADC_PollForConversion>
	srand(HAL_ADC_GetValue(&hadc1) ^ sTime.SubSeconds);
2405248a:	480b      	ldr	r0, [pc, #44]	; (240524b8 <main+0xe4>)
2405248c:	f002 fb6a 	bl	24054b64 <HAL_ADC_GetValue>
24052490:	4602      	mov	r2, r0
24052492:	68bb      	ldr	r3, [r7, #8]
24052494:	4053      	eors	r3, r2
24052496:	4618      	mov	r0, r3
24052498:	f00e ffd6 	bl	24061448 <srand>

	game_init();
2405249c:	f7ff f902 	bl	240516a4 <game_init>

	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		game_loop();
240524a0:	f7ff f952 	bl	24051748 <game_loop>
240524a4:	e7fc      	b.n	240524a0 <main+0xcc>
240524a6:	bf00      	nop
240524a8:	20000304 	.word	0x20000304
240524ac:	20000540 	.word	0x20000540
240524b0:	200003ac 	.word	0x200003ac
240524b4:	20000408 	.word	0x20000408
240524b8:	20000210 	.word	0x20000210

240524bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
240524bc:	b580      	push	{r7, lr}
240524be:	b09c      	sub	sp, #112	; 0x70
240524c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
240524c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
240524c6:	224c      	movs	r2, #76	; 0x4c
240524c8:	2100      	movs	r1, #0
240524ca:	4618      	mov	r0, r3
240524cc:	f00f fa62 	bl	24061994 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
240524d0:	1d3b      	adds	r3, r7, #4
240524d2:	2220      	movs	r2, #32
240524d4:	2100      	movs	r1, #0
240524d6:	4618      	mov	r0, r3
240524d8:	f00f fa5c 	bl	24061994 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
240524dc:	4b36      	ldr	r3, [pc, #216]	; (240525b8 <SystemClock_Config+0xfc>)
240524de:	f04f 32ff 	mov.w	r2, #4294967295
240524e2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
240524e6:	2002      	movs	r0, #2
240524e8:	f008 ffea 	bl	2405b4c0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
240524ec:	2300      	movs	r3, #0
240524ee:	603b      	str	r3, [r7, #0]
240524f0:	4b32      	ldr	r3, [pc, #200]	; (240525bc <SystemClock_Config+0x100>)
240524f2:	699b      	ldr	r3, [r3, #24]
240524f4:	4a31      	ldr	r2, [pc, #196]	; (240525bc <SystemClock_Config+0x100>)
240524f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
240524fa:	6193      	str	r3, [r2, #24]
240524fc:	4b2f      	ldr	r3, [pc, #188]	; (240525bc <SystemClock_Config+0x100>)
240524fe:	699b      	ldr	r3, [r3, #24]
24052500:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
24052504:	603b      	str	r3, [r7, #0]
24052506:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
24052508:	bf00      	nop
2405250a:	4b2c      	ldr	r3, [pc, #176]	; (240525bc <SystemClock_Config+0x100>)
2405250c:	699b      	ldr	r3, [r3, #24]
2405250e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
24052512:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24052516:	d1f8      	bne.n	2405250a <SystemClock_Config+0x4e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
24052518:	f008 ffc2 	bl	2405b4a0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
2405251c:	4b26      	ldr	r3, [pc, #152]	; (240525b8 <SystemClock_Config+0xfc>)
2405251e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24052520:	4a25      	ldr	r2, [pc, #148]	; (240525b8 <SystemClock_Config+0xfc>)
24052522:	f023 0318 	bic.w	r3, r3, #24
24052526:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
24052528:	230e      	movs	r3, #14
2405252a:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
2405252c:	2301      	movs	r3, #1
2405252e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
24052530:	2301      	movs	r3, #1
24052532:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
24052534:	2340      	movs	r3, #64	; 0x40
24052536:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
24052538:	2301      	movs	r3, #1
2405253a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
2405253c:	2302      	movs	r3, #2
2405253e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
24052540:	2300      	movs	r3, #0
24052542:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 16;
24052544:	2310      	movs	r3, #16
24052546:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 140;
24052548:	238c      	movs	r3, #140	; 0x8c
2405254a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
2405254c:	2302      	movs	r3, #2
2405254e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
24052550:	2302      	movs	r3, #2
24052552:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
24052554:	2302      	movs	r3, #2
24052556:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
24052558:	2308      	movs	r3, #8
2405255a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
2405255c:	2300      	movs	r3, #0
2405255e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
24052560:	2300      	movs	r3, #0
24052562:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
24052564:	f107 0324 	add.w	r3, r7, #36	; 0x24
24052568:	4618      	mov	r0, r3
2405256a:	f008 ffe3 	bl	2405b534 <HAL_RCC_OscConfig>
2405256e:	4603      	mov	r3, r0
24052570:	2b00      	cmp	r3, #0
24052572:	d001      	beq.n	24052578 <SystemClock_Config+0xbc>
  {
    Error_Handler();
24052574:	f000 fccc 	bl	24052f10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
24052578:	233f      	movs	r3, #63	; 0x3f
2405257a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
2405257c:	2303      	movs	r3, #3
2405257e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
24052580:	2300      	movs	r3, #0
24052582:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
24052584:	2300      	movs	r3, #0
24052586:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
24052588:	2340      	movs	r3, #64	; 0x40
2405258a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
2405258c:	2340      	movs	r3, #64	; 0x40
2405258e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
24052590:	f44f 6380 	mov.w	r3, #1024	; 0x400
24052594:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
24052596:	2340      	movs	r3, #64	; 0x40
24052598:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
2405259a:	1d3b      	adds	r3, r7, #4
2405259c:	2106      	movs	r1, #6
2405259e:	4618      	mov	r0, r3
240525a0:	f009 fbfa 	bl	2405bd98 <HAL_RCC_ClockConfig>
240525a4:	4603      	mov	r3, r0
240525a6:	2b00      	cmp	r3, #0
240525a8:	d001      	beq.n	240525ae <SystemClock_Config+0xf2>
  {
    Error_Handler();
240525aa:	f000 fcb1 	bl	24052f10 <Error_Handler>
  }
}
240525ae:	bf00      	nop
240525b0:	3770      	adds	r7, #112	; 0x70
240525b2:	46bd      	mov	sp, r7
240525b4:	bd80      	pop	{r7, pc}
240525b6:	bf00      	nop
240525b8:	58024400 	.word	0x58024400
240525bc:	58024800 	.word	0x58024800

240525c0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
240525c0:	b580      	push	{r7, lr}
240525c2:	b0b0      	sub	sp, #192	; 0xc0
240525c4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
240525c6:	463b      	mov	r3, r7
240525c8:	22c0      	movs	r2, #192	; 0xc0
240525ca:	2100      	movs	r1, #0
240525cc:	4618      	mov	r0, r3
240525ce:	f00f f9e1 	bl	24061994 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_CKPER
240525d2:	4a16      	ldr	r2, [pc, #88]	; (2405262c <PeriphCommonClock_Config+0x6c>)
240525d4:	f04f 0300 	mov.w	r3, #0
240525d8:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLL3.PLL3M = 4;
240525dc:	2304      	movs	r3, #4
240525de:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 9;
240525e0:	2309      	movs	r3, #9
240525e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
240525e4:	2302      	movs	r3, #2
240525e6:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
240525e8:	2302      	movs	r3, #2
240525ea:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 24;
240525ec:	2318      	movs	r3, #24
240525ee:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
240525f0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
240525f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
240525f6:	2300      	movs	r3, #0
240525f8:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
240525fa:	2300      	movs	r3, #0
240525fc:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
240525fe:	2300      	movs	r3, #0
24052600:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
24052602:	f44f 3380 	mov.w	r3, #65536	; 0x10000
24052606:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
2405260a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2405260e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24052612:	463b      	mov	r3, r7
24052614:	4618      	mov	r0, r3
24052616:	f009 ff35 	bl	2405c484 <HAL_RCCEx_PeriphCLKConfig>
2405261a:	4603      	mov	r3, r0
2405261c:	2b00      	cmp	r3, #0
2405261e:	d001      	beq.n	24052624 <PeriphCommonClock_Config+0x64>
  {
    Error_Handler();
24052620:	f000 fc76 	bl	24052f10 <Error_Handler>
  }
}
24052624:	bf00      	nop
24052626:	37c0      	adds	r7, #192	; 0xc0
24052628:	46bd      	mov	sp, r7
2405262a:	bd80      	pop	{r7, pc}
2405262c:	a0080000 	.word	0xa0080000

24052630 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
24052630:	b580      	push	{r7, lr}
24052632:	af00      	add	r7, sp, #0
  /* OCTOSPI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 0, 0);
24052634:	2200      	movs	r2, #0
24052636:	2100      	movs	r1, #0
24052638:	205c      	movs	r0, #92	; 0x5c
2405263a:	f003 fc00 	bl	24055e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
2405263e:	205c      	movs	r0, #92	; 0x5c
24052640:	f003 fc17 	bl	24055e72 <HAL_NVIC_EnableIRQ>
}
24052644:	bf00      	nop
24052646:	bd80      	pop	{r7, pc}

24052648 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
24052648:	b580      	push	{r7, lr}
2405264a:	b08a      	sub	sp, #40	; 0x28
2405264c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
2405264e:	f107 031c 	add.w	r3, r7, #28
24052652:	2200      	movs	r2, #0
24052654:	601a      	str	r2, [r3, #0]
24052656:	605a      	str	r2, [r3, #4]
24052658:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
2405265a:	463b      	mov	r3, r7
2405265c:	2200      	movs	r2, #0
2405265e:	601a      	str	r2, [r3, #0]
24052660:	605a      	str	r2, [r3, #4]
24052662:	609a      	str	r2, [r3, #8]
24052664:	60da      	str	r2, [r3, #12]
24052666:	611a      	str	r2, [r3, #16]
24052668:	615a      	str	r2, [r3, #20]
2405266a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
2405266c:	4b2f      	ldr	r3, [pc, #188]	; (2405272c <MX_ADC1_Init+0xe4>)
2405266e:	4a30      	ldr	r2, [pc, #192]	; (24052730 <MX_ADC1_Init+0xe8>)
24052670:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
24052672:	4b2e      	ldr	r3, [pc, #184]	; (2405272c <MX_ADC1_Init+0xe4>)
24052674:	2200      	movs	r2, #0
24052676:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
24052678:	4b2c      	ldr	r3, [pc, #176]	; (2405272c <MX_ADC1_Init+0xe4>)
2405267a:	2200      	movs	r2, #0
2405267c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
2405267e:	4b2b      	ldr	r3, [pc, #172]	; (2405272c <MX_ADC1_Init+0xe4>)
24052680:	2200      	movs	r2, #0
24052682:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
24052684:	4b29      	ldr	r3, [pc, #164]	; (2405272c <MX_ADC1_Init+0xe4>)
24052686:	2204      	movs	r2, #4
24052688:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
2405268a:	4b28      	ldr	r3, [pc, #160]	; (2405272c <MX_ADC1_Init+0xe4>)
2405268c:	2200      	movs	r2, #0
2405268e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
24052690:	4b26      	ldr	r3, [pc, #152]	; (2405272c <MX_ADC1_Init+0xe4>)
24052692:	2200      	movs	r2, #0
24052694:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
24052696:	4b25      	ldr	r3, [pc, #148]	; (2405272c <MX_ADC1_Init+0xe4>)
24052698:	2201      	movs	r2, #1
2405269a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
2405269c:	4b23      	ldr	r3, [pc, #140]	; (2405272c <MX_ADC1_Init+0xe4>)
2405269e:	2200      	movs	r2, #0
240526a0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
240526a2:	4b22      	ldr	r3, [pc, #136]	; (2405272c <MX_ADC1_Init+0xe4>)
240526a4:	2200      	movs	r2, #0
240526a6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
240526a8:	4b20      	ldr	r3, [pc, #128]	; (2405272c <MX_ADC1_Init+0xe4>)
240526aa:	2200      	movs	r2, #0
240526ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
240526ae:	4b1f      	ldr	r3, [pc, #124]	; (2405272c <MX_ADC1_Init+0xe4>)
240526b0:	2200      	movs	r2, #0
240526b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
240526b4:	4b1d      	ldr	r3, [pc, #116]	; (2405272c <MX_ADC1_Init+0xe4>)
240526b6:	2200      	movs	r2, #0
240526b8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
240526ba:	4b1c      	ldr	r3, [pc, #112]	; (2405272c <MX_ADC1_Init+0xe4>)
240526bc:	2200      	movs	r2, #0
240526be:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
240526c0:	4b1a      	ldr	r3, [pc, #104]	; (2405272c <MX_ADC1_Init+0xe4>)
240526c2:	2200      	movs	r2, #0
240526c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
240526c8:	4818      	ldr	r0, [pc, #96]	; (2405272c <MX_ADC1_Init+0xe4>)
240526ca:	f001 fdf5 	bl	240542b8 <HAL_ADC_Init>
240526ce:	4603      	mov	r3, r0
240526d0:	2b00      	cmp	r3, #0
240526d2:	d001      	beq.n	240526d8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
240526d4:	f000 fc1c 	bl	24052f10 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
240526d8:	2300      	movs	r3, #0
240526da:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
240526dc:	f107 031c 	add.w	r3, r7, #28
240526e0:	4619      	mov	r1, r3
240526e2:	4812      	ldr	r0, [pc, #72]	; (2405272c <MX_ADC1_Init+0xe4>)
240526e4:	f003 fa1e 	bl	24055b24 <HAL_ADCEx_MultiModeConfigChannel>
240526e8:	4603      	mov	r3, r0
240526ea:	2b00      	cmp	r3, #0
240526ec:	d001      	beq.n	240526f2 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
240526ee:	f000 fc0f 	bl	24052f10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
240526f2:	4b10      	ldr	r3, [pc, #64]	; (24052734 <MX_ADC1_Init+0xec>)
240526f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
240526f6:	2306      	movs	r3, #6
240526f8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
240526fa:	2300      	movs	r3, #0
240526fc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
240526fe:	f240 73ff 	movw	r3, #2047	; 0x7ff
24052702:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
24052704:	2304      	movs	r3, #4
24052706:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
24052708:	2300      	movs	r3, #0
2405270a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
2405270c:	2300      	movs	r3, #0
2405270e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
24052710:	463b      	mov	r3, r7
24052712:	4619      	mov	r1, r3
24052714:	4805      	ldr	r0, [pc, #20]	; (2405272c <MX_ADC1_Init+0xe4>)
24052716:	f002 fc61 	bl	24054fdc <HAL_ADC_ConfigChannel>
2405271a:	4603      	mov	r3, r0
2405271c:	2b00      	cmp	r3, #0
2405271e:	d001      	beq.n	24052724 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
24052720:	f000 fbf6 	bl	24052f10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
24052724:	bf00      	nop
24052726:	3728      	adds	r7, #40	; 0x28
24052728:	46bd      	mov	sp, r7
2405272a:	bd80      	pop	{r7, pc}
2405272c:	20000210 	.word	0x20000210
24052730:	40022000 	.word	0x40022000
24052734:	10c00010 	.word	0x10c00010

24052738 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
24052738:	b580      	push	{r7, lr}
2405273a:	b08a      	sub	sp, #40	; 0x28
2405273c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
2405273e:	1d3b      	adds	r3, r7, #4
24052740:	2224      	movs	r2, #36	; 0x24
24052742:	2100      	movs	r1, #0
24052744:	4618      	mov	r0, r3
24052746:	f00f f925 	bl	24061994 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
2405274a:	4b17      	ldr	r3, [pc, #92]	; (240527a8 <MX_DAC1_Init+0x70>)
2405274c:	4a17      	ldr	r2, [pc, #92]	; (240527ac <MX_DAC1_Init+0x74>)
2405274e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
24052750:	4815      	ldr	r0, [pc, #84]	; (240527a8 <MX_DAC1_Init+0x70>)
24052752:	f003 fbac 	bl	24055eae <HAL_DAC_Init>
24052756:	4603      	mov	r3, r0
24052758:	2b00      	cmp	r3, #0
2405275a:	d001      	beq.n	24052760 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
2405275c:	f000 fbd8 	bl	24052f10 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
24052760:	2300      	movs	r3, #0
24052762:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
24052764:	2300      	movs	r3, #0
24052766:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
24052768:	2300      	movs	r3, #0
2405276a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
2405276c:	2301      	movs	r3, #1
2405276e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
24052770:	2300      	movs	r3, #0
24052772:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
24052774:	1d3b      	adds	r3, r7, #4
24052776:	2200      	movs	r2, #0
24052778:	4619      	mov	r1, r3
2405277a:	480b      	ldr	r0, [pc, #44]	; (240527a8 <MX_DAC1_Init+0x70>)
2405277c:	f003 fc30 	bl	24055fe0 <HAL_DAC_ConfigChannel>
24052780:	4603      	mov	r3, r0
24052782:	2b00      	cmp	r3, #0
24052784:	d001      	beq.n	2405278a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
24052786:	f000 fbc3 	bl	24052f10 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
2405278a:	1d3b      	adds	r3, r7, #4
2405278c:	2210      	movs	r2, #16
2405278e:	4619      	mov	r1, r3
24052790:	4805      	ldr	r0, [pc, #20]	; (240527a8 <MX_DAC1_Init+0x70>)
24052792:	f003 fc25 	bl	24055fe0 <HAL_DAC_ConfigChannel>
24052796:	4603      	mov	r3, r0
24052798:	2b00      	cmp	r3, #0
2405279a:	d001      	beq.n	240527a0 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
2405279c:	f000 fbb8 	bl	24052f10 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
240527a0:	bf00      	nop
240527a2:	3728      	adds	r7, #40	; 0x28
240527a4:	46bd      	mov	sp, r7
240527a6:	bd80      	pop	{r7, pc}
240527a8:	20000274 	.word	0x20000274
240527ac:	40007400 	.word	0x40007400

240527b0 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
240527b0:	b580      	push	{r7, lr}
240527b2:	b08a      	sub	sp, #40	; 0x28
240527b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
240527b6:	1d3b      	adds	r3, r7, #4
240527b8:	2224      	movs	r2, #36	; 0x24
240527ba:	2100      	movs	r1, #0
240527bc:	4618      	mov	r0, r3
240527be:	f00f f8e9 	bl	24061994 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
240527c2:	4b12      	ldr	r3, [pc, #72]	; (2405280c <MX_DAC2_Init+0x5c>)
240527c4:	4a12      	ldr	r2, [pc, #72]	; (24052810 <MX_DAC2_Init+0x60>)
240527c6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
240527c8:	4810      	ldr	r0, [pc, #64]	; (2405280c <MX_DAC2_Init+0x5c>)
240527ca:	f003 fb70 	bl	24055eae <HAL_DAC_Init>
240527ce:	4603      	mov	r3, r0
240527d0:	2b00      	cmp	r3, #0
240527d2:	d001      	beq.n	240527d8 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
240527d4:	f000 fb9c 	bl	24052f10 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
240527d8:	2300      	movs	r3, #0
240527da:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
240527dc:	2300      	movs	r3, #0
240527de:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
240527e0:	2300      	movs	r3, #0
240527e2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
240527e4:	2301      	movs	r3, #1
240527e6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
240527e8:	2300      	movs	r3, #0
240527ea:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
240527ec:	1d3b      	adds	r3, r7, #4
240527ee:	2200      	movs	r2, #0
240527f0:	4619      	mov	r1, r3
240527f2:	4806      	ldr	r0, [pc, #24]	; (2405280c <MX_DAC2_Init+0x5c>)
240527f4:	f003 fbf4 	bl	24055fe0 <HAL_DAC_ConfigChannel>
240527f8:	4603      	mov	r3, r0
240527fa:	2b00      	cmp	r3, #0
240527fc:	d001      	beq.n	24052802 <MX_DAC2_Init+0x52>
  {
    Error_Handler();
240527fe:	f000 fb87 	bl	24052f10 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
24052802:	bf00      	nop
24052804:	3728      	adds	r7, #40	; 0x28
24052806:	46bd      	mov	sp, r7
24052808:	bd80      	pop	{r7, pc}
2405280a:	bf00      	nop
2405280c:	20000288 	.word	0x20000288
24052810:	58003400 	.word	0x58003400

24052814 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
24052814:	b580      	push	{r7, lr}
24052816:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
24052818:	4b0b      	ldr	r3, [pc, #44]	; (24052848 <MX_DMA2D_Init+0x34>)
2405281a:	4a0c      	ldr	r2, [pc, #48]	; (2405284c <MX_DMA2D_Init+0x38>)
2405281c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
2405281e:	4b0a      	ldr	r3, [pc, #40]	; (24052848 <MX_DMA2D_Init+0x34>)
24052820:	f44f 3240 	mov.w	r2, #196608	; 0x30000
24052824:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
24052826:	4b08      	ldr	r3, [pc, #32]	; (24052848 <MX_DMA2D_Init+0x34>)
24052828:	2202      	movs	r2, #2
2405282a:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
2405282c:	4b06      	ldr	r3, [pc, #24]	; (24052848 <MX_DMA2D_Init+0x34>)
2405282e:	2200      	movs	r2, #0
24052830:	60da      	str	r2, [r3, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
24052832:	4805      	ldr	r0, [pc, #20]	; (24052848 <MX_DMA2D_Init+0x34>)
24052834:	f006 fbfc 	bl	24059030 <HAL_DMA2D_Init>
24052838:	4603      	mov	r3, r0
2405283a:	2b00      	cmp	r3, #0
2405283c:	d001      	beq.n	24052842 <MX_DMA2D_Init+0x2e>
  {
    Error_Handler();
2405283e:	f000 fb67 	bl	24052f10 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
24052842:	bf00      	nop
24052844:	bd80      	pop	{r7, pc}
24052846:	bf00      	nop
24052848:	2000029c 	.word	0x2000029c
2405284c:	52001000 	.word	0x52001000

24052850 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
24052850:	b580      	push	{r7, lr}
24052852:	b08e      	sub	sp, #56	; 0x38
24052854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
24052856:	1d3b      	adds	r3, r7, #4
24052858:	2234      	movs	r2, #52	; 0x34
2405285a:	2100      	movs	r1, #0
2405285c:	4618      	mov	r0, r3
2405285e:	f00f f899 	bl	24061994 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
24052862:	4b39      	ldr	r3, [pc, #228]	; (24052948 <MX_LTDC_Init+0xf8>)
24052864:	4a39      	ldr	r2, [pc, #228]	; (2405294c <MX_LTDC_Init+0xfc>)
24052866:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
24052868:	4b37      	ldr	r3, [pc, #220]	; (24052948 <MX_LTDC_Init+0xf8>)
2405286a:	2200      	movs	r2, #0
2405286c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
2405286e:	4b36      	ldr	r3, [pc, #216]	; (24052948 <MX_LTDC_Init+0xf8>)
24052870:	2200      	movs	r2, #0
24052872:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
24052874:	4b34      	ldr	r3, [pc, #208]	; (24052948 <MX_LTDC_Init+0xf8>)
24052876:	2200      	movs	r2, #0
24052878:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IIPC;
2405287a:	4b33      	ldr	r3, [pc, #204]	; (24052948 <MX_LTDC_Init+0xf8>)
2405287c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
24052880:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
24052882:	4b31      	ldr	r3, [pc, #196]	; (24052948 <MX_LTDC_Init+0xf8>)
24052884:	2209      	movs	r2, #9
24052886:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
24052888:	4b2f      	ldr	r3, [pc, #188]	; (24052948 <MX_LTDC_Init+0xf8>)
2405288a:	2201      	movs	r2, #1
2405288c:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 60;
2405288e:	4b2e      	ldr	r3, [pc, #184]	; (24052948 <MX_LTDC_Init+0xf8>)
24052890:	223c      	movs	r2, #60	; 0x3c
24052892:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 7;
24052894:	4b2c      	ldr	r3, [pc, #176]	; (24052948 <MX_LTDC_Init+0xf8>)
24052896:	2207      	movs	r2, #7
24052898:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 380;
2405289a:	4b2b      	ldr	r3, [pc, #172]	; (24052948 <MX_LTDC_Init+0xf8>)
2405289c:	f44f 72be 	mov.w	r2, #380	; 0x17c
240528a0:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 247;
240528a2:	4b29      	ldr	r3, [pc, #164]	; (24052948 <MX_LTDC_Init+0xf8>)
240528a4:	22f7      	movs	r2, #247	; 0xf7
240528a6:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 392;
240528a8:	4b27      	ldr	r3, [pc, #156]	; (24052948 <MX_LTDC_Init+0xf8>)
240528aa:	f44f 72c4 	mov.w	r2, #392	; 0x188
240528ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 255;
240528b0:	4b25      	ldr	r3, [pc, #148]	; (24052948 <MX_LTDC_Init+0xf8>)
240528b2:	22ff      	movs	r2, #255	; 0xff
240528b4:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
240528b6:	4b24      	ldr	r3, [pc, #144]	; (24052948 <MX_LTDC_Init+0xf8>)
240528b8:	2200      	movs	r2, #0
240528ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
240528be:	4b22      	ldr	r3, [pc, #136]	; (24052948 <MX_LTDC_Init+0xf8>)
240528c0:	2200      	movs	r2, #0
240528c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
240528c6:	4b20      	ldr	r3, [pc, #128]	; (24052948 <MX_LTDC_Init+0xf8>)
240528c8:	2200      	movs	r2, #0
240528ca:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
240528ce:	481e      	ldr	r0, [pc, #120]	; (24052948 <MX_LTDC_Init+0xf8>)
240528d0:	f006 fe18 	bl	24059504 <HAL_LTDC_Init>
240528d4:	4603      	mov	r3, r0
240528d6:	2b00      	cmp	r3, #0
240528d8:	d001      	beq.n	240528de <MX_LTDC_Init+0x8e>
  {
    Error_Handler();
240528da:	f000 fb19 	bl	24052f10 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
240528de:	2300      	movs	r3, #0
240528e0:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 320;
240528e2:	f44f 73a0 	mov.w	r3, #320	; 0x140
240528e6:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
240528e8:	2300      	movs	r3, #0
240528ea:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 240;
240528ec:	23f0      	movs	r3, #240	; 0xf0
240528ee:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
240528f0:	2302      	movs	r3, #2
240528f2:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
240528f4:	23ff      	movs	r3, #255	; 0xff
240528f6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 255;
240528f8:	23ff      	movs	r3, #255	; 0xff
240528fa:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
240528fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
24052900:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
24052902:	2305      	movs	r3, #5
24052904:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0x24000000;
24052906:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
2405290a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 320;
2405290c:	f44f 73a0 	mov.w	r3, #320	; 0x140
24052910:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 240;
24052912:	23f0      	movs	r3, #240	; 0xf0
24052914:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
24052916:	2300      	movs	r3, #0
24052918:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 255;
2405291c:	23ff      	movs	r3, #255	; 0xff
2405291e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
24052922:	2300      	movs	r3, #0
24052924:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
24052928:	1d3b      	adds	r3, r7, #4
2405292a:	2200      	movs	r2, #0
2405292c:	4619      	mov	r1, r3
2405292e:	4806      	ldr	r0, [pc, #24]	; (24052948 <MX_LTDC_Init+0xf8>)
24052930:	f006 ff70 	bl	24059814 <HAL_LTDC_ConfigLayer>
24052934:	4603      	mov	r3, r0
24052936:	2b00      	cmp	r3, #0
24052938:	d001      	beq.n	2405293e <MX_LTDC_Init+0xee>
  {
    Error_Handler();
2405293a:	f000 fae9 	bl	24052f10 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
2405293e:	bf00      	nop
24052940:	3738      	adds	r7, #56	; 0x38
24052942:	46bd      	mov	sp, r7
24052944:	bd80      	pop	{r7, pc}
24052946:	bf00      	nop
24052948:	20000304 	.word	0x20000304
2405294c:	50001000 	.word	0x50001000

24052950 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
24052950:	b580      	push	{r7, lr}
24052952:	b086      	sub	sp, #24
24052954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
24052956:	463b      	mov	r3, r7
24052958:	2200      	movs	r2, #0
2405295a:	601a      	str	r2, [r3, #0]
2405295c:	605a      	str	r2, [r3, #4]
2405295e:	609a      	str	r2, [r3, #8]
24052960:	60da      	str	r2, [r3, #12]
24052962:	611a      	str	r2, [r3, #16]
24052964:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
24052966:	4b28      	ldr	r3, [pc, #160]	; (24052a08 <MX_OCTOSPI1_Init+0xb8>)
24052968:	4a28      	ldr	r2, [pc, #160]	; (24052a0c <MX_OCTOSPI1_Init+0xbc>)
2405296a:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 4;
2405296c:	4b26      	ldr	r3, [pc, #152]	; (24052a08 <MX_OCTOSPI1_Init+0xb8>)
2405296e:	2204      	movs	r2, #4
24052970:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
24052972:	4b25      	ldr	r3, [pc, #148]	; (24052a08 <MX_OCTOSPI1_Init+0xb8>)
24052974:	2200      	movs	r2, #0
24052976:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
24052978:	4b23      	ldr	r3, [pc, #140]	; (24052a08 <MX_OCTOSPI1_Init+0xb8>)
2405297a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
2405297e:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 24;
24052980:	4b21      	ldr	r3, [pc, #132]	; (24052a08 <MX_OCTOSPI1_Init+0xb8>)
24052982:	2218      	movs	r2, #24
24052984:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 2;
24052986:	4b20      	ldr	r3, [pc, #128]	; (24052a08 <MX_OCTOSPI1_Init+0xb8>)
24052988:	2202      	movs	r2, #2
2405298a:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
2405298c:	4b1e      	ldr	r3, [pc, #120]	; (24052a08 <MX_OCTOSPI1_Init+0xb8>)
2405298e:	2200      	movs	r2, #0
24052990:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
24052992:	4b1d      	ldr	r3, [pc, #116]	; (24052a08 <MX_OCTOSPI1_Init+0xb8>)
24052994:	2200      	movs	r2, #0
24052996:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
24052998:	4b1b      	ldr	r3, [pc, #108]	; (24052a08 <MX_OCTOSPI1_Init+0xb8>)
2405299a:	2200      	movs	r2, #0
2405299c:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
2405299e:	4b1a      	ldr	r3, [pc, #104]	; (24052a08 <MX_OCTOSPI1_Init+0xb8>)
240529a0:	2201      	movs	r2, #1
240529a2:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
240529a4:	4b18      	ldr	r3, [pc, #96]	; (24052a08 <MX_OCTOSPI1_Init+0xb8>)
240529a6:	2200      	movs	r2, #0
240529a8:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
240529aa:	4b17      	ldr	r3, [pc, #92]	; (24052a08 <MX_OCTOSPI1_Init+0xb8>)
240529ac:	2200      	movs	r2, #0
240529ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
240529b0:	4b15      	ldr	r3, [pc, #84]	; (24052a08 <MX_OCTOSPI1_Init+0xb8>)
240529b2:	2200      	movs	r2, #0
240529b4:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
240529b6:	4b14      	ldr	r3, [pc, #80]	; (24052a08 <MX_OCTOSPI1_Init+0xb8>)
240529b8:	2208      	movs	r2, #8
240529ba:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
240529bc:	4b12      	ldr	r3, [pc, #72]	; (24052a08 <MX_OCTOSPI1_Init+0xb8>)
240529be:	2200      	movs	r2, #0
240529c0:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 0;
240529c2:	4b11      	ldr	r3, [pc, #68]	; (24052a08 <MX_OCTOSPI1_Init+0xb8>)
240529c4:	2200      	movs	r2, #0
240529c6:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
240529c8:	480f      	ldr	r0, [pc, #60]	; (24052a08 <MX_OCTOSPI1_Init+0xb8>)
240529ca:	f007 f989 	bl	24059ce0 <HAL_OSPI_Init>
240529ce:	4603      	mov	r3, r0
240529d0:	2b00      	cmp	r3, #0
240529d2:	d001      	beq.n	240529d8 <MX_OCTOSPI1_Init+0x88>
  {
    Error_Handler();
240529d4:	f000 fa9c 	bl	24052f10 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
240529d8:	2301      	movs	r3, #1
240529da:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.NCSPort = 1;
240529dc:	2301      	movs	r3, #1
240529de:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
240529e0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
240529e4:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
240529e6:	463b      	mov	r3, r7
240529e8:	f241 3288 	movw	r2, #5000	; 0x1388
240529ec:	4619      	mov	r1, r3
240529ee:	4806      	ldr	r0, [pc, #24]	; (24052a08 <MX_OCTOSPI1_Init+0xb8>)
240529f0:	f007 fdc6 	bl	2405a580 <HAL_OSPIM_Config>
240529f4:	4603      	mov	r3, r0
240529f6:	2b00      	cmp	r3, #0
240529f8:	d001      	beq.n	240529fe <MX_OCTOSPI1_Init+0xae>
  {
    Error_Handler();
240529fa:	f000 fa89 	bl	24052f10 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
240529fe:	bf00      	nop
24052a00:	3718      	adds	r7, #24
24052a02:	46bd      	mov	sp, r7
24052a04:	bd80      	pop	{r7, pc}
24052a06:	bf00      	nop
24052a08:	200003ac 	.word	0x200003ac
24052a0c:	52005000 	.word	0x52005000

24052a10 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
24052a10:	b580      	push	{r7, lr}
24052a12:	b086      	sub	sp, #24
24052a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
24052a16:	1d3b      	adds	r3, r7, #4
24052a18:	2200      	movs	r2, #0
24052a1a:	601a      	str	r2, [r3, #0]
24052a1c:	605a      	str	r2, [r3, #4]
24052a1e:	609a      	str	r2, [r3, #8]
24052a20:	60da      	str	r2, [r3, #12]
24052a22:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
24052a24:	2300      	movs	r3, #0
24052a26:	603b      	str	r3, [r7, #0]

  /* USER CODE BEGIN RTC_Init 1 */
	hrtc.Instance = RTC;
24052a28:	4b36      	ldr	r3, [pc, #216]	; (24052b04 <MX_RTC_Init+0xf4>)
24052a2a:	4a37      	ldr	r2, [pc, #220]	; (24052b08 <MX_RTC_Init+0xf8>)
24052a2c:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
24052a2e:	4b35      	ldr	r3, [pc, #212]	; (24052b04 <MX_RTC_Init+0xf4>)
24052a30:	2200      	movs	r2, #0
24052a32:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
24052a34:	4b33      	ldr	r3, [pc, #204]	; (24052b04 <MX_RTC_Init+0xf4>)
24052a36:	227f      	movs	r2, #127	; 0x7f
24052a38:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
24052a3a:	4b32      	ldr	r3, [pc, #200]	; (24052b04 <MX_RTC_Init+0xf4>)
24052a3c:	22ff      	movs	r2, #255	; 0xff
24052a3e:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
24052a40:	4b30      	ldr	r3, [pc, #192]	; (24052b04 <MX_RTC_Init+0xf4>)
24052a42:	2200      	movs	r2, #0
24052a44:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
24052a46:	4b2f      	ldr	r3, [pc, #188]	; (24052b04 <MX_RTC_Init+0xf4>)
24052a48:	2200      	movs	r2, #0
24052a4a:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
24052a4c:	4b2d      	ldr	r3, [pc, #180]	; (24052b04 <MX_RTC_Init+0xf4>)
24052a4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
24052a52:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
24052a54:	4b2b      	ldr	r3, [pc, #172]	; (24052b04 <MX_RTC_Init+0xf4>)
24052a56:	2200      	movs	r2, #0
24052a58:	615a      	str	r2, [r3, #20]
	if ((RCC->BDCR & RCC_BDCR_RTCEN) != 0) {
24052a5a:	4b2c      	ldr	r3, [pc, #176]	; (24052b0c <MX_RTC_Init+0xfc>)
24052a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24052a5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
24052a62:	2b00      	cmp	r3, #0
24052a64:	d002      	beq.n	24052a6c <MX_RTC_Init+0x5c>
		HAL_PWR_EnableBkUpAccess();
24052a66:	f008 fd1b 	bl	2405b4a0 <HAL_PWR_EnableBkUpAccess>
24052a6a:	e048      	b.n	24052afe <MX_RTC_Init+0xee>
	}
  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
24052a6c:	4b25      	ldr	r3, [pc, #148]	; (24052b04 <MX_RTC_Init+0xf4>)
24052a6e:	4a26      	ldr	r2, [pc, #152]	; (24052b08 <MX_RTC_Init+0xf8>)
24052a70:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
24052a72:	4b24      	ldr	r3, [pc, #144]	; (24052b04 <MX_RTC_Init+0xf4>)
24052a74:	2200      	movs	r2, #0
24052a76:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
24052a78:	4b22      	ldr	r3, [pc, #136]	; (24052b04 <MX_RTC_Init+0xf4>)
24052a7a:	227f      	movs	r2, #127	; 0x7f
24052a7c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
24052a7e:	4b21      	ldr	r3, [pc, #132]	; (24052b04 <MX_RTC_Init+0xf4>)
24052a80:	22ff      	movs	r2, #255	; 0xff
24052a82:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
24052a84:	4b1f      	ldr	r3, [pc, #124]	; (24052b04 <MX_RTC_Init+0xf4>)
24052a86:	2200      	movs	r2, #0
24052a88:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
24052a8a:	4b1e      	ldr	r3, [pc, #120]	; (24052b04 <MX_RTC_Init+0xf4>)
24052a8c:	2200      	movs	r2, #0
24052a8e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
24052a90:	4b1c      	ldr	r3, [pc, #112]	; (24052b04 <MX_RTC_Init+0xf4>)
24052a92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
24052a96:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
24052a98:	4b1a      	ldr	r3, [pc, #104]	; (24052b04 <MX_RTC_Init+0xf4>)
24052a9a:	2200      	movs	r2, #0
24052a9c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
24052a9e:	4819      	ldr	r0, [pc, #100]	; (24052b04 <MX_RTC_Init+0xf4>)
24052aa0:	f00c f8fa 	bl	2405ec98 <HAL_RTC_Init>
24052aa4:	4603      	mov	r3, r0
24052aa6:	2b00      	cmp	r3, #0
24052aa8:	d001      	beq.n	24052aae <MX_RTC_Init+0x9e>
  {
    Error_Handler();
24052aaa:	f000 fa31 	bl	24052f10 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
24052aae:	2300      	movs	r3, #0
24052ab0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
24052ab2:	2300      	movs	r3, #0
24052ab4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
24052ab6:	2300      	movs	r3, #0
24052ab8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
24052aba:	2300      	movs	r3, #0
24052abc:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
24052abe:	2300      	movs	r3, #0
24052ac0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
24052ac2:	1d3b      	adds	r3, r7, #4
24052ac4:	2200      	movs	r2, #0
24052ac6:	4619      	mov	r1, r3
24052ac8:	480e      	ldr	r0, [pc, #56]	; (24052b04 <MX_RTC_Init+0xf4>)
24052aca:	f00c f96b 	bl	2405eda4 <HAL_RTC_SetTime>
24052ace:	4603      	mov	r3, r0
24052ad0:	2b00      	cmp	r3, #0
24052ad2:	d001      	beq.n	24052ad8 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
24052ad4:	f000 fa1c 	bl	24052f10 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
24052ad8:	2301      	movs	r3, #1
24052ada:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
24052adc:	2301      	movs	r3, #1
24052ade:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
24052ae0:	2301      	movs	r3, #1
24052ae2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
24052ae4:	2300      	movs	r3, #0
24052ae6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
24052ae8:	463b      	mov	r3, r7
24052aea:	2200      	movs	r2, #0
24052aec:	4619      	mov	r1, r3
24052aee:	4805      	ldr	r0, [pc, #20]	; (24052b04 <MX_RTC_Init+0xf4>)
24052af0:	f00c fa52 	bl	2405ef98 <HAL_RTC_SetDate>
24052af4:	4603      	mov	r3, r0
24052af6:	2b00      	cmp	r3, #0
24052af8:	d001      	beq.n	24052afe <MX_RTC_Init+0xee>
  {
    Error_Handler();
24052afa:	f000 fa09 	bl	24052f10 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
24052afe:	3718      	adds	r7, #24
24052b00:	46bd      	mov	sp, r7
24052b02:	bd80      	pop	{r7, pc}
24052b04:	20000408 	.word	0x20000408
24052b08:	58004000 	.word	0x58004000
24052b0c:	58024400 	.word	0x58024400

24052b10 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
24052b10:	b580      	push	{r7, lr}
24052b12:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
24052b14:	4b17      	ldr	r3, [pc, #92]	; (24052b74 <MX_SAI1_Init+0x64>)
24052b16:	4a18      	ldr	r2, [pc, #96]	; (24052b78 <MX_SAI1_Init+0x68>)
24052b18:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
24052b1a:	4b16      	ldr	r3, [pc, #88]	; (24052b74 <MX_SAI1_Init+0x64>)
24052b1c:	2200      	movs	r2, #0
24052b1e:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
24052b20:	4b14      	ldr	r3, [pc, #80]	; (24052b74 <MX_SAI1_Init+0x64>)
24052b22:	2200      	movs	r2, #0
24052b24:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
24052b26:	4b13      	ldr	r3, [pc, #76]	; (24052b74 <MX_SAI1_Init+0x64>)
24052b28:	2200      	movs	r2, #0
24052b2a:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
24052b2c:	4b11      	ldr	r3, [pc, #68]	; (24052b74 <MX_SAI1_Init+0x64>)
24052b2e:	2200      	movs	r2, #0
24052b30:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_FULL;
24052b32:	4b10      	ldr	r3, [pc, #64]	; (24052b74 <MX_SAI1_Init+0x64>)
24052b34:	2204      	movs	r2, #4
24052b36:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
24052b38:	4b0e      	ldr	r3, [pc, #56]	; (24052b74 <MX_SAI1_Init+0x64>)
24052b3a:	f64b 3280 	movw	r2, #48000	; 0xbb80
24052b3e:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
24052b40:	4b0c      	ldr	r3, [pc, #48]	; (24052b74 <MX_SAI1_Init+0x64>)
24052b42:	2200      	movs	r2, #0
24052b44:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_MONOMODE;
24052b46:	4b0b      	ldr	r3, [pc, #44]	; (24052b74 <MX_SAI1_Init+0x64>)
24052b48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24052b4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
24052b4e:	4b09      	ldr	r3, [pc, #36]	; (24052b74 <MX_SAI1_Init+0x64>)
24052b50:	2200      	movs	r2, #0
24052b52:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
24052b54:	4b07      	ldr	r3, [pc, #28]	; (24052b74 <MX_SAI1_Init+0x64>)
24052b56:	2200      	movs	r2, #0
24052b58:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
24052b5a:	2302      	movs	r3, #2
24052b5c:	2200      	movs	r2, #0
24052b5e:	2100      	movs	r1, #0
24052b60:	4804      	ldr	r0, [pc, #16]	; (24052b74 <MX_SAI1_Init+0x64>)
24052b62:	f00c fbc1 	bl	2405f2e8 <HAL_SAI_InitProtocol>
24052b66:	4603      	mov	r3, r0
24052b68:	2b00      	cmp	r3, #0
24052b6a:	d001      	beq.n	24052b70 <MX_SAI1_Init+0x60>
  {
    Error_Handler();
24052b6c:	f000 f9d0 	bl	24052f10 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
24052b70:	bf00      	nop
24052b72:	bd80      	pop	{r7, pc}
24052b74:	20000430 	.word	0x20000430
24052b78:	40015804 	.word	0x40015804

24052b7c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
24052b7c:	b580      	push	{r7, lr}
24052b7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
24052b80:	4b27      	ldr	r3, [pc, #156]	; (24052c20 <MX_SPI2_Init+0xa4>)
24052b82:	4a28      	ldr	r2, [pc, #160]	; (24052c24 <MX_SPI2_Init+0xa8>)
24052b84:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
24052b86:	4b26      	ldr	r3, [pc, #152]	; (24052c20 <MX_SPI2_Init+0xa4>)
24052b88:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
24052b8c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
24052b8e:	4b24      	ldr	r3, [pc, #144]	; (24052c20 <MX_SPI2_Init+0xa4>)
24052b90:	f44f 3200 	mov.w	r2, #131072	; 0x20000
24052b94:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
24052b96:	4b22      	ldr	r3, [pc, #136]	; (24052c20 <MX_SPI2_Init+0xa4>)
24052b98:	2207      	movs	r2, #7
24052b9a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
24052b9c:	4b20      	ldr	r3, [pc, #128]	; (24052c20 <MX_SPI2_Init+0xa4>)
24052b9e:	2200      	movs	r2, #0
24052ba0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
24052ba2:	4b1f      	ldr	r3, [pc, #124]	; (24052c20 <MX_SPI2_Init+0xa4>)
24052ba4:	2200      	movs	r2, #0
24052ba6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
24052ba8:	4b1d      	ldr	r3, [pc, #116]	; (24052c20 <MX_SPI2_Init+0xa4>)
24052baa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
24052bae:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
24052bb0:	4b1b      	ldr	r3, [pc, #108]	; (24052c20 <MX_SPI2_Init+0xa4>)
24052bb2:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
24052bb6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
24052bb8:	4b19      	ldr	r3, [pc, #100]	; (24052c20 <MX_SPI2_Init+0xa4>)
24052bba:	2200      	movs	r2, #0
24052bbc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
24052bbe:	4b18      	ldr	r3, [pc, #96]	; (24052c20 <MX_SPI2_Init+0xa4>)
24052bc0:	2200      	movs	r2, #0
24052bc2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
24052bc4:	4b16      	ldr	r3, [pc, #88]	; (24052c20 <MX_SPI2_Init+0xa4>)
24052bc6:	2200      	movs	r2, #0
24052bc8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
24052bca:	4b15      	ldr	r3, [pc, #84]	; (24052c20 <MX_SPI2_Init+0xa4>)
24052bcc:	2200      	movs	r2, #0
24052bce:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
24052bd0:	4b13      	ldr	r3, [pc, #76]	; (24052c20 <MX_SPI2_Init+0xa4>)
24052bd2:	2200      	movs	r2, #0
24052bd4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
24052bd6:	4b12      	ldr	r3, [pc, #72]	; (24052c20 <MX_SPI2_Init+0xa4>)
24052bd8:	2200      	movs	r2, #0
24052bda:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
24052bdc:	4b10      	ldr	r3, [pc, #64]	; (24052c20 <MX_SPI2_Init+0xa4>)
24052bde:	2200      	movs	r2, #0
24052be0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
24052be2:	4b0f      	ldr	r3, [pc, #60]	; (24052c20 <MX_SPI2_Init+0xa4>)
24052be4:	2200      	movs	r2, #0
24052be6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
24052be8:	4b0d      	ldr	r3, [pc, #52]	; (24052c20 <MX_SPI2_Init+0xa4>)
24052bea:	2200      	movs	r2, #0
24052bec:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
24052bee:	4b0c      	ldr	r3, [pc, #48]	; (24052c20 <MX_SPI2_Init+0xa4>)
24052bf0:	2200      	movs	r2, #0
24052bf2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
24052bf4:	4b0a      	ldr	r3, [pc, #40]	; (24052c20 <MX_SPI2_Init+0xa4>)
24052bf6:	2200      	movs	r2, #0
24052bf8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
24052bfa:	4b09      	ldr	r3, [pc, #36]	; (24052c20 <MX_SPI2_Init+0xa4>)
24052bfc:	2200      	movs	r2, #0
24052bfe:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
24052c00:	4b07      	ldr	r3, [pc, #28]	; (24052c20 <MX_SPI2_Init+0xa4>)
24052c02:	2200      	movs	r2, #0
24052c04:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
24052c06:	4b06      	ldr	r3, [pc, #24]	; (24052c20 <MX_SPI2_Init+0xa4>)
24052c08:	2200      	movs	r2, #0
24052c0a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
24052c0c:	4804      	ldr	r0, [pc, #16]	; (24052c20 <MX_SPI2_Init+0xa4>)
24052c0e:	f00d faf7 	bl	24060200 <HAL_SPI_Init>
24052c12:	4603      	mov	r3, r0
24052c14:	2b00      	cmp	r3, #0
24052c16:	d001      	beq.n	24052c1c <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
24052c18:	f000 f97a 	bl	24052f10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
24052c1c:	bf00      	nop
24052c1e:	bd80      	pop	{r7, pc}
24052c20:	20000540 	.word	0x20000540
24052c24:	40003800 	.word	0x40003800

24052c28 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
24052c28:	b580      	push	{r7, lr}
24052c2a:	b088      	sub	sp, #32
24052c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
24052c2e:	f107 0310 	add.w	r3, r7, #16
24052c32:	2200      	movs	r2, #0
24052c34:	601a      	str	r2, [r3, #0]
24052c36:	605a      	str	r2, [r3, #4]
24052c38:	609a      	str	r2, [r3, #8]
24052c3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
24052c3c:	1d3b      	adds	r3, r7, #4
24052c3e:	2200      	movs	r2, #0
24052c40:	601a      	str	r2, [r3, #0]
24052c42:	605a      	str	r2, [r3, #4]
24052c44:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
24052c46:	4b20      	ldr	r3, [pc, #128]	; (24052cc8 <MX_TIM1_Init+0xa0>)
24052c48:	4a20      	ldr	r2, [pc, #128]	; (24052ccc <MX_TIM1_Init+0xa4>)
24052c4a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 14000;
24052c4c:	4b1e      	ldr	r3, [pc, #120]	; (24052cc8 <MX_TIM1_Init+0xa0>)
24052c4e:	f243 62b0 	movw	r2, #14000	; 0x36b0
24052c52:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
24052c54:	4b1c      	ldr	r3, [pc, #112]	; (24052cc8 <MX_TIM1_Init+0xa0>)
24052c56:	2200      	movs	r2, #0
24052c58:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000;
24052c5a:	4b1b      	ldr	r3, [pc, #108]	; (24052cc8 <MX_TIM1_Init+0xa0>)
24052c5c:	f24c 3250 	movw	r2, #50000	; 0xc350
24052c60:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
24052c62:	4b19      	ldr	r3, [pc, #100]	; (24052cc8 <MX_TIM1_Init+0xa0>)
24052c64:	2200      	movs	r2, #0
24052c66:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
24052c68:	4b17      	ldr	r3, [pc, #92]	; (24052cc8 <MX_TIM1_Init+0xa0>)
24052c6a:	2200      	movs	r2, #0
24052c6c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
24052c6e:	4b16      	ldr	r3, [pc, #88]	; (24052cc8 <MX_TIM1_Init+0xa0>)
24052c70:	2200      	movs	r2, #0
24052c72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
24052c74:	4814      	ldr	r0, [pc, #80]	; (24052cc8 <MX_TIM1_Init+0xa0>)
24052c76:	f00d fecc 	bl	24060a12 <HAL_TIM_Base_Init>
24052c7a:	4603      	mov	r3, r0
24052c7c:	2b00      	cmp	r3, #0
24052c7e:	d001      	beq.n	24052c84 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
24052c80:	f000 f946 	bl	24052f10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
24052c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
24052c88:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
24052c8a:	f107 0310 	add.w	r3, r7, #16
24052c8e:	4619      	mov	r1, r3
24052c90:	480d      	ldr	r0, [pc, #52]	; (24052cc8 <MX_TIM1_Init+0xa0>)
24052c92:	f00e f8ad 	bl	24060df0 <HAL_TIM_ConfigClockSource>
24052c96:	4603      	mov	r3, r0
24052c98:	2b00      	cmp	r3, #0
24052c9a:	d001      	beq.n	24052ca0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
24052c9c:	f000 f938 	bl	24052f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
24052ca0:	2300      	movs	r3, #0
24052ca2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
24052ca4:	2300      	movs	r3, #0
24052ca6:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
24052ca8:	2300      	movs	r3, #0
24052caa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
24052cac:	1d3b      	adds	r3, r7, #4
24052cae:	4619      	mov	r1, r3
24052cb0:	4805      	ldr	r0, [pc, #20]	; (24052cc8 <MX_TIM1_Init+0xa0>)
24052cb2:	f00e faff 	bl	240612b4 <HAL_TIMEx_MasterConfigSynchronization>
24052cb6:	4603      	mov	r3, r0
24052cb8:	2b00      	cmp	r3, #0
24052cba:	d001      	beq.n	24052cc0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
24052cbc:	f000 f928 	bl	24052f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
24052cc0:	bf00      	nop
24052cc2:	3720      	adds	r7, #32
24052cc4:	46bd      	mov	sp, r7
24052cc6:	bd80      	pop	{r7, pc}
24052cc8:	200005c8 	.word	0x200005c8
24052ccc:	40010000 	.word	0x40010000

24052cd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
24052cd0:	b580      	push	{r7, lr}
24052cd2:	b082      	sub	sp, #8
24052cd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
24052cd6:	4b0d      	ldr	r3, [pc, #52]	; (24052d0c <MX_DMA_Init+0x3c>)
24052cd8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
24052cdc:	4a0b      	ldr	r2, [pc, #44]	; (24052d0c <MX_DMA_Init+0x3c>)
24052cde:	f043 0301 	orr.w	r3, r3, #1
24052ce2:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
24052ce6:	4b09      	ldr	r3, [pc, #36]	; (24052d0c <MX_DMA_Init+0x3c>)
24052ce8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
24052cec:	f003 0301 	and.w	r3, r3, #1
24052cf0:	607b      	str	r3, [r7, #4]
24052cf2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
24052cf4:	2200      	movs	r2, #0
24052cf6:	2100      	movs	r1, #0
24052cf8:	200b      	movs	r0, #11
24052cfa:	f003 f8a0 	bl	24055e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
24052cfe:	200b      	movs	r0, #11
24052d00:	f003 f8b7 	bl	24055e72 <HAL_NVIC_EnableIRQ>

}
24052d04:	bf00      	nop
24052d06:	3708      	adds	r7, #8
24052d08:	46bd      	mov	sp, r7
24052d0a:	bd80      	pop	{r7, pc}
24052d0c:	58024400 	.word	0x58024400

24052d10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
24052d10:	b580      	push	{r7, lr}
24052d12:	b08a      	sub	sp, #40	; 0x28
24052d14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24052d16:	f107 0314 	add.w	r3, r7, #20
24052d1a:	2200      	movs	r2, #0
24052d1c:	601a      	str	r2, [r3, #0]
24052d1e:	605a      	str	r2, [r3, #4]
24052d20:	609a      	str	r2, [r3, #8]
24052d22:	60da      	str	r2, [r3, #12]
24052d24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
24052d26:	4b74      	ldr	r3, [pc, #464]	; (24052ef8 <MX_GPIO_Init+0x1e8>)
24052d28:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24052d2c:	4a72      	ldr	r2, [pc, #456]	; (24052ef8 <MX_GPIO_Init+0x1e8>)
24052d2e:	f043 0310 	orr.w	r3, r3, #16
24052d32:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
24052d36:	4b70      	ldr	r3, [pc, #448]	; (24052ef8 <MX_GPIO_Init+0x1e8>)
24052d38:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24052d3c:	f003 0310 	and.w	r3, r3, #16
24052d40:	613b      	str	r3, [r7, #16]
24052d42:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
24052d44:	4b6c      	ldr	r3, [pc, #432]	; (24052ef8 <MX_GPIO_Init+0x1e8>)
24052d46:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24052d4a:	4a6b      	ldr	r2, [pc, #428]	; (24052ef8 <MX_GPIO_Init+0x1e8>)
24052d4c:	f043 0304 	orr.w	r3, r3, #4
24052d50:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
24052d54:	4b68      	ldr	r3, [pc, #416]	; (24052ef8 <MX_GPIO_Init+0x1e8>)
24052d56:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24052d5a:	f003 0304 	and.w	r3, r3, #4
24052d5e:	60fb      	str	r3, [r7, #12]
24052d60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
24052d62:	4b65      	ldr	r3, [pc, #404]	; (24052ef8 <MX_GPIO_Init+0x1e8>)
24052d64:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24052d68:	4a63      	ldr	r2, [pc, #396]	; (24052ef8 <MX_GPIO_Init+0x1e8>)
24052d6a:	f043 0301 	orr.w	r3, r3, #1
24052d6e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
24052d72:	4b61      	ldr	r3, [pc, #388]	; (24052ef8 <MX_GPIO_Init+0x1e8>)
24052d74:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24052d78:	f003 0301 	and.w	r3, r3, #1
24052d7c:	60bb      	str	r3, [r7, #8]
24052d7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
24052d80:	4b5d      	ldr	r3, [pc, #372]	; (24052ef8 <MX_GPIO_Init+0x1e8>)
24052d82:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24052d86:	4a5c      	ldr	r2, [pc, #368]	; (24052ef8 <MX_GPIO_Init+0x1e8>)
24052d88:	f043 0302 	orr.w	r3, r3, #2
24052d8c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
24052d90:	4b59      	ldr	r3, [pc, #356]	; (24052ef8 <MX_GPIO_Init+0x1e8>)
24052d92:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24052d96:	f003 0302 	and.w	r3, r3, #2
24052d9a:	607b      	str	r3, [r7, #4]
24052d9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
24052d9e:	4b56      	ldr	r3, [pc, #344]	; (24052ef8 <MX_GPIO_Init+0x1e8>)
24052da0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24052da4:	4a54      	ldr	r2, [pc, #336]	; (24052ef8 <MX_GPIO_Init+0x1e8>)
24052da6:	f043 0308 	orr.w	r3, r3, #8
24052daa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
24052dae:	4b52      	ldr	r3, [pc, #328]	; (24052ef8 <MX_GPIO_Init+0x1e8>)
24052db0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24052db4:	f003 0308 	and.w	r3, r3, #8
24052db8:	603b      	str	r3, [r7, #0]
24052dba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_Speaker_enable_GPIO_Port, GPIO_Speaker_enable_Pin, GPIO_PIN_SET);
24052dbc:	2201      	movs	r2, #1
24052dbe:	2108      	movs	r1, #8
24052dc0:	484e      	ldr	r0, [pc, #312]	; (24052efc <MX_GPIO_Init+0x1ec>)
24052dc2:	f006 fb61 	bl	24059488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
24052dc6:	2200      	movs	r2, #0
24052dc8:	f44f 7180 	mov.w	r1, #256	; 0x100
24052dcc:	484b      	ldr	r0, [pc, #300]	; (24052efc <MX_GPIO_Init+0x1ec>)
24052dce:	f006 fb5b 	bl	24059488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
24052dd2:	2201      	movs	r2, #1
24052dd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24052dd8:	4849      	ldr	r0, [pc, #292]	; (24052f00 <MX_GPIO_Init+0x1f0>)
24052dda:	f006 fb55 	bl	24059488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
24052dde:	2201      	movs	r2, #1
24052de0:	f44f 7180 	mov.w	r1, #256	; 0x100
24052de4:	4847      	ldr	r0, [pc, #284]	; (24052f04 <MX_GPIO_Init+0x1f4>)
24052de6:	f006 fb4f 	bl	24059488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
24052dea:	2200      	movs	r2, #0
24052dec:	2112      	movs	r1, #18
24052dee:	4845      	ldr	r0, [pc, #276]	; (24052f04 <MX_GPIO_Init+0x1f4>)
24052df0:	f006 fb4a 	bl	24059488 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_Speaker_enable_Pin PE8 */
  GPIO_InitStruct.Pin = GPIO_Speaker_enable_Pin|GPIO_PIN_8;
24052df4:	f44f 7384 	mov.w	r3, #264	; 0x108
24052df8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
24052dfa:	2301      	movs	r3, #1
24052dfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24052dfe:	2300      	movs	r3, #0
24052e00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24052e02:	2300      	movs	r3, #0
24052e04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24052e06:	f107 0314 	add.w	r3, r7, #20
24052e0a:	4619      	mov	r1, r3
24052e0c:	483b      	ldr	r0, [pc, #236]	; (24052efc <MX_GPIO_Init+0x1ec>)
24052e0e:	f006 f973 	bl	240590f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_PAUSE_Pin BTN_GAME_Pin BTN_TIME_Pin */
  GPIO_InitStruct.Pin = BTN_PAUSE_Pin|BTN_GAME_Pin|BTN_TIME_Pin;
24052e12:	f242 0322 	movw	r3, #8226	; 0x2022
24052e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
24052e18:	2300      	movs	r3, #0
24052e1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
24052e1c:	2301      	movs	r3, #1
24052e1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24052e20:	f107 0314 	add.w	r3, r7, #20
24052e24:	4619      	mov	r1, r3
24052e26:	4838      	ldr	r0, [pc, #224]	; (24052f08 <MX_GPIO_Init+0x1f8>)
24052e28:	f006 f966 	bl	240590f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_PWR_Pin */
  GPIO_InitStruct.Pin = BTN_PWR_Pin;
24052e2c:	2301      	movs	r3, #1
24052e2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
24052e30:	2300      	movs	r3, #0
24052e32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24052e34:	2300      	movs	r3, #0
24052e36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_PWR_GPIO_Port, &GPIO_InitStruct);
24052e38:	f107 0314 	add.w	r3, r7, #20
24052e3c:	4619      	mov	r1, r3
24052e3e:	4833      	ldr	r0, [pc, #204]	; (24052f0c <MX_GPIO_Init+0x1fc>)
24052e40:	f006 f95a 	bl	240590f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
24052e44:	2304      	movs	r3, #4
24052e46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
24052e48:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
24052e4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24052e4e:	2300      	movs	r3, #0
24052e50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24052e52:	f107 0314 	add.w	r3, r7, #20
24052e56:	4619      	mov	r1, r3
24052e58:	482c      	ldr	r0, [pc, #176]	; (24052f0c <MX_GPIO_Init+0x1fc>)
24052e5a:	f006 f94d 	bl	240590f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
24052e5e:	2380      	movs	r3, #128	; 0x80
24052e60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
24052e62:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
24052e66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24052e68:	2300      	movs	r3, #0
24052e6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24052e6c:	f107 0314 	add.w	r3, r7, #20
24052e70:	4619      	mov	r1, r3
24052e72:	4822      	ldr	r0, [pc, #136]	; (24052efc <MX_GPIO_Init+0x1ec>)
24052e74:	f006 f940 	bl	240590f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
24052e78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
24052e7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
24052e7e:	2301      	movs	r3, #1
24052e80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24052e82:	2300      	movs	r3, #0
24052e84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24052e86:	2300      	movs	r3, #0
24052e88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24052e8a:	f107 0314 	add.w	r3, r7, #20
24052e8e:	4619      	mov	r1, r3
24052e90:	481b      	ldr	r0, [pc, #108]	; (24052f00 <MX_GPIO_Init+0x1f0>)
24052e92:	f006 f931 	bl	240590f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD1 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_4;
24052e96:	f44f 7389 	mov.w	r3, #274	; 0x112
24052e9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
24052e9c:	2301      	movs	r3, #1
24052e9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24052ea0:	2300      	movs	r3, #0
24052ea2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24052ea4:	2300      	movs	r3, #0
24052ea6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24052ea8:	f107 0314 	add.w	r3, r7, #20
24052eac:	4619      	mov	r1, r3
24052eae:	4815      	ldr	r0, [pc, #84]	; (24052f04 <MX_GPIO_Init+0x1f4>)
24052eb0:	f006 f922 	bl	240590f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_A_Pin BTN_Left_Pin BTN_Down_Pin BTN_Right_Pin
                           BTN_Up_Pin BTN_B_Pin */
  GPIO_InitStruct.Pin = BTN_A_Pin|BTN_Left_Pin|BTN_Down_Pin|BTN_Right_Pin
24052eb4:	f64c 2321 	movw	r3, #51745	; 0xca21
24052eb8:	617b      	str	r3, [r7, #20]
                          |BTN_Up_Pin|BTN_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
24052eba:	2300      	movs	r3, #0
24052ebc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
24052ebe:	2301      	movs	r3, #1
24052ec0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24052ec2:	f107 0314 	add.w	r3, r7, #20
24052ec6:	4619      	mov	r1, r3
24052ec8:	480e      	ldr	r0, [pc, #56]	; (24052f04 <MX_GPIO_Init+0x1f4>)
24052eca:	f006 f915 	bl	240590f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
24052ece:	2200      	movs	r2, #0
24052ed0:	2100      	movs	r1, #0
24052ed2:	2008      	movs	r0, #8
24052ed4:	f002 ffb3 	bl	24055e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
24052ed8:	2008      	movs	r0, #8
24052eda:	f002 ffca 	bl	24055e72 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
24052ede:	2200      	movs	r2, #0
24052ee0:	2100      	movs	r1, #0
24052ee2:	2017      	movs	r0, #23
24052ee4:	f002 ffab 	bl	24055e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
24052ee8:	2017      	movs	r0, #23
24052eea:	f002 ffc2 	bl	24055e72 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
24052eee:	bf00      	nop
24052ef0:	3728      	adds	r7, #40	; 0x28
24052ef2:	46bd      	mov	sp, r7
24052ef4:	bd80      	pop	{r7, pc}
24052ef6:	bf00      	nop
24052ef8:	58024400 	.word	0x58024400
24052efc:	58021000 	.word	0x58021000
24052f00:	58020400 	.word	0x58020400
24052f04:	58020c00 	.word	0x58020c00
24052f08:	58020800 	.word	0x58020800
24052f0c:	58020000 	.word	0x58020000

24052f10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
24052f10:	b480      	push	{r7}
24052f12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
24052f14:	b672      	cpsid	i
}
24052f16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
24052f18:	e7fe      	b.n	24052f18 <Error_Handler+0x8>
	...

24052f1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
24052f1c:	b480      	push	{r7}
24052f1e:	b083      	sub	sp, #12
24052f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
24052f22:	4b0a      	ldr	r3, [pc, #40]	; (24052f4c <HAL_MspInit+0x30>)
24052f24:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
24052f28:	4a08      	ldr	r2, [pc, #32]	; (24052f4c <HAL_MspInit+0x30>)
24052f2a:	f043 0302 	orr.w	r3, r3, #2
24052f2e:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
24052f32:	4b06      	ldr	r3, [pc, #24]	; (24052f4c <HAL_MspInit+0x30>)
24052f34:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
24052f38:	f003 0302 	and.w	r3, r3, #2
24052f3c:	607b      	str	r3, [r7, #4]
24052f3e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
24052f40:	bf00      	nop
24052f42:	370c      	adds	r7, #12
24052f44:	46bd      	mov	sp, r7
24052f46:	f85d 7b04 	ldr.w	r7, [sp], #4
24052f4a:	4770      	bx	lr
24052f4c:	58024400 	.word	0x58024400

24052f50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
24052f50:	b580      	push	{r7, lr}
24052f52:	b08a      	sub	sp, #40	; 0x28
24052f54:	af00      	add	r7, sp, #0
24052f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24052f58:	f107 0314 	add.w	r3, r7, #20
24052f5c:	2200      	movs	r2, #0
24052f5e:	601a      	str	r2, [r3, #0]
24052f60:	605a      	str	r2, [r3, #4]
24052f62:	609a      	str	r2, [r3, #8]
24052f64:	60da      	str	r2, [r3, #12]
24052f66:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
24052f68:	687b      	ldr	r3, [r7, #4]
24052f6a:	681b      	ldr	r3, [r3, #0]
24052f6c:	4a1c      	ldr	r2, [pc, #112]	; (24052fe0 <HAL_ADC_MspInit+0x90>)
24052f6e:	4293      	cmp	r3, r2
24052f70:	d131      	bne.n	24052fd6 <HAL_ADC_MspInit+0x86>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
24052f72:	4b1c      	ldr	r3, [pc, #112]	; (24052fe4 <HAL_ADC_MspInit+0x94>)
24052f74:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
24052f78:	4a1a      	ldr	r2, [pc, #104]	; (24052fe4 <HAL_ADC_MspInit+0x94>)
24052f7a:	f043 0320 	orr.w	r3, r3, #32
24052f7e:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
24052f82:	4b18      	ldr	r3, [pc, #96]	; (24052fe4 <HAL_ADC_MspInit+0x94>)
24052f84:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
24052f88:	f003 0320 	and.w	r3, r3, #32
24052f8c:	613b      	str	r3, [r7, #16]
24052f8e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
24052f90:	4b14      	ldr	r3, [pc, #80]	; (24052fe4 <HAL_ADC_MspInit+0x94>)
24052f92:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24052f96:	4a13      	ldr	r2, [pc, #76]	; (24052fe4 <HAL_ADC_MspInit+0x94>)
24052f98:	f043 0304 	orr.w	r3, r3, #4
24052f9c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
24052fa0:	4b10      	ldr	r3, [pc, #64]	; (24052fe4 <HAL_ADC_MspInit+0x94>)
24052fa2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24052fa6:	f003 0304 	and.w	r3, r3, #4
24052faa:	60fb      	str	r3, [r7, #12]
24052fac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
24052fae:	2310      	movs	r3, #16
24052fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
24052fb2:	2303      	movs	r3, #3
24052fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24052fb6:	2300      	movs	r3, #0
24052fb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24052fba:	f107 0314 	add.w	r3, r7, #20
24052fbe:	4619      	mov	r1, r3
24052fc0:	4809      	ldr	r0, [pc, #36]	; (24052fe8 <HAL_ADC_MspInit+0x98>)
24052fc2:	f006 f899 	bl	240590f8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
24052fc6:	2200      	movs	r2, #0
24052fc8:	2100      	movs	r1, #0
24052fca:	2012      	movs	r0, #18
24052fcc:	f002 ff37 	bl	24055e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
24052fd0:	2012      	movs	r0, #18
24052fd2:	f002 ff4e 	bl	24055e72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
24052fd6:	bf00      	nop
24052fd8:	3728      	adds	r7, #40	; 0x28
24052fda:	46bd      	mov	sp, r7
24052fdc:	bd80      	pop	{r7, pc}
24052fde:	bf00      	nop
24052fe0:	40022000 	.word	0x40022000
24052fe4:	58024400 	.word	0x58024400
24052fe8:	58020800 	.word	0x58020800

24052fec <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
24052fec:	b580      	push	{r7, lr}
24052fee:	b08c      	sub	sp, #48	; 0x30
24052ff0:	af00      	add	r7, sp, #0
24052ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24052ff4:	f107 031c 	add.w	r3, r7, #28
24052ff8:	2200      	movs	r2, #0
24052ffa:	601a      	str	r2, [r3, #0]
24052ffc:	605a      	str	r2, [r3, #4]
24052ffe:	609a      	str	r2, [r3, #8]
24053000:	60da      	str	r2, [r3, #12]
24053002:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
24053004:	687b      	ldr	r3, [r7, #4]
24053006:	681b      	ldr	r3, [r3, #0]
24053008:	4a30      	ldr	r2, [pc, #192]	; (240530cc <HAL_DAC_MspInit+0xe0>)
2405300a:	4293      	cmp	r3, r2
2405300c:	d12a      	bne.n	24053064 <HAL_DAC_MspInit+0x78>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
2405300e:	4b30      	ldr	r3, [pc, #192]	; (240530d0 <HAL_DAC_MspInit+0xe4>)
24053010:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
24053014:	4a2e      	ldr	r2, [pc, #184]	; (240530d0 <HAL_DAC_MspInit+0xe4>)
24053016:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
2405301a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
2405301e:	4b2c      	ldr	r3, [pc, #176]	; (240530d0 <HAL_DAC_MspInit+0xe4>)
24053020:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
24053024:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
24053028:	61bb      	str	r3, [r7, #24]
2405302a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
2405302c:	4b28      	ldr	r3, [pc, #160]	; (240530d0 <HAL_DAC_MspInit+0xe4>)
2405302e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24053032:	4a27      	ldr	r2, [pc, #156]	; (240530d0 <HAL_DAC_MspInit+0xe4>)
24053034:	f043 0301 	orr.w	r3, r3, #1
24053038:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
2405303c:	4b24      	ldr	r3, [pc, #144]	; (240530d0 <HAL_DAC_MspInit+0xe4>)
2405303e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24053042:	f003 0301 	and.w	r3, r3, #1
24053046:	617b      	str	r3, [r7, #20]
24053048:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
2405304a:	2330      	movs	r3, #48	; 0x30
2405304c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
2405304e:	2303      	movs	r3, #3
24053050:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24053052:	2300      	movs	r3, #0
24053054:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24053056:	f107 031c 	add.w	r3, r7, #28
2405305a:	4619      	mov	r1, r3
2405305c:	481d      	ldr	r0, [pc, #116]	; (240530d4 <HAL_DAC_MspInit+0xe8>)
2405305e:	f006 f84b 	bl	240590f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }

}
24053062:	e02e      	b.n	240530c2 <HAL_DAC_MspInit+0xd6>
  else if(hdac->Instance==DAC2)
24053064:	687b      	ldr	r3, [r7, #4]
24053066:	681b      	ldr	r3, [r3, #0]
24053068:	4a1b      	ldr	r2, [pc, #108]	; (240530d8 <HAL_DAC_MspInit+0xec>)
2405306a:	4293      	cmp	r3, r2
2405306c:	d129      	bne.n	240530c2 <HAL_DAC_MspInit+0xd6>
    __HAL_RCC_DAC2_CLK_ENABLE();
2405306e:	4b18      	ldr	r3, [pc, #96]	; (240530d0 <HAL_DAC_MspInit+0xe4>)
24053070:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
24053074:	4a16      	ldr	r2, [pc, #88]	; (240530d0 <HAL_DAC_MspInit+0xe4>)
24053076:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
2405307a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
2405307e:	4b14      	ldr	r3, [pc, #80]	; (240530d0 <HAL_DAC_MspInit+0xe4>)
24053080:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
24053084:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
24053088:	613b      	str	r3, [r7, #16]
2405308a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
2405308c:	4b10      	ldr	r3, [pc, #64]	; (240530d0 <HAL_DAC_MspInit+0xe4>)
2405308e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24053092:	4a0f      	ldr	r2, [pc, #60]	; (240530d0 <HAL_DAC_MspInit+0xe4>)
24053094:	f043 0301 	orr.w	r3, r3, #1
24053098:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
2405309c:	4b0c      	ldr	r3, [pc, #48]	; (240530d0 <HAL_DAC_MspInit+0xe4>)
2405309e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
240530a2:	f003 0301 	and.w	r3, r3, #1
240530a6:	60fb      	str	r3, [r7, #12]
240530a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
240530aa:	2340      	movs	r3, #64	; 0x40
240530ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
240530ae:	2303      	movs	r3, #3
240530b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
240530b2:	2300      	movs	r3, #0
240530b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
240530b6:	f107 031c 	add.w	r3, r7, #28
240530ba:	4619      	mov	r1, r3
240530bc:	4805      	ldr	r0, [pc, #20]	; (240530d4 <HAL_DAC_MspInit+0xe8>)
240530be:	f006 f81b 	bl	240590f8 <HAL_GPIO_Init>
}
240530c2:	bf00      	nop
240530c4:	3730      	adds	r7, #48	; 0x30
240530c6:	46bd      	mov	sp, r7
240530c8:	bd80      	pop	{r7, pc}
240530ca:	bf00      	nop
240530cc:	40007400 	.word	0x40007400
240530d0:	58024400 	.word	0x58024400
240530d4:	58020000 	.word	0x58020000
240530d8:	58003400 	.word	0x58003400

240530dc <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
240530dc:	b480      	push	{r7}
240530de:	b085      	sub	sp, #20
240530e0:	af00      	add	r7, sp, #0
240530e2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
240530e4:	687b      	ldr	r3, [r7, #4]
240530e6:	681b      	ldr	r3, [r3, #0]
240530e8:	4a0b      	ldr	r2, [pc, #44]	; (24053118 <HAL_DMA2D_MspInit+0x3c>)
240530ea:	4293      	cmp	r3, r2
240530ec:	d10e      	bne.n	2405310c <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
240530ee:	4b0b      	ldr	r3, [pc, #44]	; (2405311c <HAL_DMA2D_MspInit+0x40>)
240530f0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
240530f4:	4a09      	ldr	r2, [pc, #36]	; (2405311c <HAL_DMA2D_MspInit+0x40>)
240530f6:	f043 0310 	orr.w	r3, r3, #16
240530fa:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
240530fe:	4b07      	ldr	r3, [pc, #28]	; (2405311c <HAL_DMA2D_MspInit+0x40>)
24053100:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
24053104:	f003 0310 	and.w	r3, r3, #16
24053108:	60fb      	str	r3, [r7, #12]
2405310a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
2405310c:	bf00      	nop
2405310e:	3714      	adds	r7, #20
24053110:	46bd      	mov	sp, r7
24053112:	f85d 7b04 	ldr.w	r7, [sp], #4
24053116:	4770      	bx	lr
24053118:	52001000 	.word	0x52001000
2405311c:	58024400 	.word	0x58024400

24053120 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
24053120:	b580      	push	{r7, lr}
24053122:	b08e      	sub	sp, #56	; 0x38
24053124:	af00      	add	r7, sp, #0
24053126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24053128:	f107 0324 	add.w	r3, r7, #36	; 0x24
2405312c:	2200      	movs	r2, #0
2405312e:	601a      	str	r2, [r3, #0]
24053130:	605a      	str	r2, [r3, #4]
24053132:	609a      	str	r2, [r3, #8]
24053134:	60da      	str	r2, [r3, #12]
24053136:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
24053138:	687b      	ldr	r3, [r7, #4]
2405313a:	681b      	ldr	r3, [r3, #0]
2405313c:	4a90      	ldr	r2, [pc, #576]	; (24053380 <HAL_LTDC_MspInit+0x260>)
2405313e:	4293      	cmp	r3, r2
24053140:	f040 8119 	bne.w	24053376 <HAL_LTDC_MspInit+0x256>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
24053144:	4b8f      	ldr	r3, [pc, #572]	; (24053384 <HAL_LTDC_MspInit+0x264>)
24053146:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
2405314a:	4a8e      	ldr	r2, [pc, #568]	; (24053384 <HAL_LTDC_MspInit+0x264>)
2405314c:	f043 0308 	orr.w	r3, r3, #8
24053150:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
24053154:	4b8b      	ldr	r3, [pc, #556]	; (24053384 <HAL_LTDC_MspInit+0x264>)
24053156:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
2405315a:	f003 0308 	and.w	r3, r3, #8
2405315e:	623b      	str	r3, [r7, #32]
24053160:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
24053162:	4b88      	ldr	r3, [pc, #544]	; (24053384 <HAL_LTDC_MspInit+0x264>)
24053164:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24053168:	4a86      	ldr	r2, [pc, #536]	; (24053384 <HAL_LTDC_MspInit+0x264>)
2405316a:	f043 0304 	orr.w	r3, r3, #4
2405316e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
24053172:	4b84      	ldr	r3, [pc, #528]	; (24053384 <HAL_LTDC_MspInit+0x264>)
24053174:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24053178:	f003 0304 	and.w	r3, r3, #4
2405317c:	61fb      	str	r3, [r7, #28]
2405317e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
24053180:	4b80      	ldr	r3, [pc, #512]	; (24053384 <HAL_LTDC_MspInit+0x264>)
24053182:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24053186:	4a7f      	ldr	r2, [pc, #508]	; (24053384 <HAL_LTDC_MspInit+0x264>)
24053188:	f043 0301 	orr.w	r3, r3, #1
2405318c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
24053190:	4b7c      	ldr	r3, [pc, #496]	; (24053384 <HAL_LTDC_MspInit+0x264>)
24053192:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24053196:	f003 0301 	and.w	r3, r3, #1
2405319a:	61bb      	str	r3, [r7, #24]
2405319c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
2405319e:	4b79      	ldr	r3, [pc, #484]	; (24053384 <HAL_LTDC_MspInit+0x264>)
240531a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
240531a4:	4a77      	ldr	r2, [pc, #476]	; (24053384 <HAL_LTDC_MspInit+0x264>)
240531a6:	f043 0302 	orr.w	r3, r3, #2
240531aa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
240531ae:	4b75      	ldr	r3, [pc, #468]	; (24053384 <HAL_LTDC_MspInit+0x264>)
240531b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
240531b4:	f003 0302 	and.w	r3, r3, #2
240531b8:	617b      	str	r3, [r7, #20]
240531ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
240531bc:	4b71      	ldr	r3, [pc, #452]	; (24053384 <HAL_LTDC_MspInit+0x264>)
240531be:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
240531c2:	4a70      	ldr	r2, [pc, #448]	; (24053384 <HAL_LTDC_MspInit+0x264>)
240531c4:	f043 0310 	orr.w	r3, r3, #16
240531c8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
240531cc:	4b6d      	ldr	r3, [pc, #436]	; (24053384 <HAL_LTDC_MspInit+0x264>)
240531ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
240531d2:	f003 0310 	and.w	r3, r3, #16
240531d6:	613b      	str	r3, [r7, #16]
240531d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
240531da:	4b6a      	ldr	r3, [pc, #424]	; (24053384 <HAL_LTDC_MspInit+0x264>)
240531dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
240531e0:	4a68      	ldr	r2, [pc, #416]	; (24053384 <HAL_LTDC_MspInit+0x264>)
240531e2:	f043 0308 	orr.w	r3, r3, #8
240531e6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
240531ea:	4b66      	ldr	r3, [pc, #408]	; (24053384 <HAL_LTDC_MspInit+0x264>)
240531ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
240531f0:	f003 0308 	and.w	r3, r3, #8
240531f4:	60fb      	str	r3, [r7, #12]
240531f6:	68fb      	ldr	r3, [r7, #12]
    PD3     ------> LTDC_G7
    PD6     ------> LTDC_B2
    PB5     ------> LTDC_B5
    PB8     ------> LTDC_B6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
240531f8:	2301      	movs	r3, #1
240531fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240531fc:	2302      	movs	r3, #2
240531fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24053200:	2300      	movs	r3, #0
24053202:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24053204:	2300      	movs	r3, #0
24053206:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
24053208:	230b      	movs	r3, #11
2405320a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
2405320c:	f107 0324 	add.w	r3, r7, #36	; 0x24
24053210:	4619      	mov	r1, r3
24053212:	485d      	ldr	r0, [pc, #372]	; (24053388 <HAL_LTDC_MspInit+0x268>)
24053214:	f005 ff70 	bl	240590f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
24053218:	f44f 6338 	mov.w	r3, #2944	; 0xb80
2405321c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2405321e:	2302      	movs	r3, #2
24053220:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24053222:	2300      	movs	r3, #0
24053224:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24053226:	2300      	movs	r3, #0
24053228:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
2405322a:	230e      	movs	r3, #14
2405322c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
2405322e:	f107 0324 	add.w	r3, r7, #36	; 0x24
24053232:	4619      	mov	r1, r3
24053234:	4855      	ldr	r0, [pc, #340]	; (2405338c <HAL_LTDC_MspInit+0x26c>)
24053236:	f005 ff5f 	bl	240590f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
2405323a:	2301      	movs	r3, #1
2405323c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2405323e:	2302      	movs	r3, #2
24053240:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24053242:	2300      	movs	r3, #0
24053244:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24053246:	2300      	movs	r3, #0
24053248:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
2405324a:	2309      	movs	r3, #9
2405324c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
2405324e:	f107 0324 	add.w	r3, r7, #36	; 0x24
24053252:	4619      	mov	r1, r3
24053254:	484e      	ldr	r0, [pc, #312]	; (24053390 <HAL_LTDC_MspInit+0x270>)
24053256:	f005 ff4f 	bl	240590f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
2405325a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
2405325e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24053260:	2302      	movs	r3, #2
24053262:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24053264:	2300      	movs	r3, #0
24053266:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24053268:	2300      	movs	r3, #0
2405326a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
2405326c:	230e      	movs	r3, #14
2405326e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24053270:	f107 0324 	add.w	r3, r7, #36	; 0x24
24053274:	4619      	mov	r1, r3
24053276:	4847      	ldr	r0, [pc, #284]	; (24053394 <HAL_LTDC_MspInit+0x274>)
24053278:	f005 ff3e 	bl	240590f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_8;
2405327c:	f44f 439a 	mov.w	r3, #19712	; 0x4d00
24053280:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24053282:	2302      	movs	r3, #2
24053284:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24053286:	2300      	movs	r3, #0
24053288:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
2405328a:	2300      	movs	r3, #0
2405328c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
2405328e:	230e      	movs	r3, #14
24053290:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24053292:	f107 0324 	add.w	r3, r7, #36	; 0x24
24053296:	4619      	mov	r1, r3
24053298:	483d      	ldr	r0, [pc, #244]	; (24053390 <HAL_LTDC_MspInit+0x270>)
2405329a:	f005 ff2d 	bl	240590f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_6;
2405329e:	f44f 6389 	mov.w	r3, #1096	; 0x448
240532a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240532a4:	2302      	movs	r3, #2
240532a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
240532a8:	2300      	movs	r3, #0
240532aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
240532ac:	2300      	movs	r3, #0
240532ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
240532b0:	230e      	movs	r3, #14
240532b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
240532b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
240532b8:	4619      	mov	r1, r3
240532ba:	4837      	ldr	r0, [pc, #220]	; (24053398 <HAL_LTDC_MspInit+0x278>)
240532bc:	f005 ff1c 	bl	240590f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
240532c0:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
240532c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240532c6:	2302      	movs	r3, #2
240532c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
240532ca:	2300      	movs	r3, #0
240532cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
240532ce:	2300      	movs	r3, #0
240532d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
240532d2:	230e      	movs	r3, #14
240532d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
240532d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
240532da:	4619      	mov	r1, r3
240532dc:	482a      	ldr	r0, [pc, #168]	; (24053388 <HAL_LTDC_MspInit+0x268>)
240532de:	f005 ff0b 	bl	240590f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
240532e2:	f44f 7300 	mov.w	r3, #512	; 0x200
240532e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240532e8:	2302      	movs	r3, #2
240532ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
240532ec:	2300      	movs	r3, #0
240532ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
240532f0:	2300      	movs	r3, #0
240532f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_LTDC;
240532f4:	230a      	movs	r3, #10
240532f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
240532f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
240532fc:	4619      	mov	r1, r3
240532fe:	4822      	ldr	r0, [pc, #136]	; (24053388 <HAL_LTDC_MspInit+0x268>)
24053300:	f005 fefa 	bl	240590f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
24053304:	f44f 6380 	mov.w	r3, #1024	; 0x400
24053308:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2405330a:	2302      	movs	r3, #2
2405330c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2405330e:	2300      	movs	r3, #0
24053310:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24053312:	2300      	movs	r3, #0
24053314:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF12_LTDC;
24053316:	230c      	movs	r3, #12
24053318:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
2405331a:	f107 0324 	add.w	r3, r7, #36	; 0x24
2405331e:	4619      	mov	r1, r3
24053320:	481a      	ldr	r0, [pc, #104]	; (2405338c <HAL_LTDC_MspInit+0x26c>)
24053322:	f005 fee9 	bl	240590f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
24053326:	2304      	movs	r3, #4
24053328:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2405332a:	2302      	movs	r3, #2
2405332c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2405332e:	2300      	movs	r3, #0
24053330:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24053332:	2300      	movs	r3, #0
24053334:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
24053336:	2309      	movs	r3, #9
24053338:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
2405333a:	f107 0324 	add.w	r3, r7, #36	; 0x24
2405333e:	4619      	mov	r1, r3
24053340:	4815      	ldr	r0, [pc, #84]	; (24053398 <HAL_LTDC_MspInit+0x278>)
24053342:	f005 fed9 	bl	240590f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
24053346:	2320      	movs	r3, #32
24053348:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2405334a:	2302      	movs	r3, #2
2405334c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2405334e:	2300      	movs	r3, #0
24053350:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24053352:	2300      	movs	r3, #0
24053354:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
24053356:	230b      	movs	r3, #11
24053358:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
2405335a:	f107 0324 	add.w	r3, r7, #36	; 0x24
2405335e:	4619      	mov	r1, r3
24053360:	480b      	ldr	r0, [pc, #44]	; (24053390 <HAL_LTDC_MspInit+0x270>)
24053362:	f005 fec9 	bl	240590f8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
24053366:	2200      	movs	r2, #0
24053368:	2100      	movs	r1, #0
2405336a:	2058      	movs	r0, #88	; 0x58
2405336c:	f002 fd67 	bl	24055e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
24053370:	2058      	movs	r0, #88	; 0x58
24053372:	f002 fd7e 	bl	24055e72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
24053376:	bf00      	nop
24053378:	3738      	adds	r7, #56	; 0x38
2405337a:	46bd      	mov	sp, r7
2405337c:	bd80      	pop	{r7, pc}
2405337e:	bf00      	nop
24053380:	50001000 	.word	0x50001000
24053384:	58024400 	.word	0x58024400
24053388:	58020800 	.word	0x58020800
2405338c:	58020000 	.word	0x58020000
24053390:	58020400 	.word	0x58020400
24053394:	58021000 	.word	0x58021000
24053398:	58020c00 	.word	0x58020c00

2405339c <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
2405339c:	b580      	push	{r7, lr}
2405339e:	b0be      	sub	sp, #248	; 0xf8
240533a0:	af00      	add	r7, sp, #0
240533a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
240533a4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
240533a8:	2200      	movs	r2, #0
240533aa:	601a      	str	r2, [r3, #0]
240533ac:	605a      	str	r2, [r3, #4]
240533ae:	609a      	str	r2, [r3, #8]
240533b0:	60da      	str	r2, [r3, #12]
240533b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
240533b4:	f107 0320 	add.w	r3, r7, #32
240533b8:	22c0      	movs	r2, #192	; 0xc0
240533ba:	2100      	movs	r1, #0
240533bc:	4618      	mov	r0, r3
240533be:	f00e fae9 	bl	24061994 <memset>
  if(hospi->Instance==OCTOSPI1)
240533c2:	687b      	ldr	r3, [r7, #4]
240533c4:	681b      	ldr	r3, [r3, #0]
240533c6:	4a7a      	ldr	r2, [pc, #488]	; (240535b0 <HAL_OSPI_MspInit+0x214>)
240533c8:	4293      	cmp	r3, r2
240533ca:	f040 80ec 	bne.w	240535a6 <HAL_OSPI_MspInit+0x20a>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
240533ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
240533d2:	f04f 0300 	mov.w	r3, #0
240533d6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_CLKP;
240533da:	2330      	movs	r3, #48	; 0x30
240533dc:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
240533de:	f107 0320 	add.w	r3, r7, #32
240533e2:	4618      	mov	r0, r3
240533e4:	f009 f84e 	bl	2405c484 <HAL_RCCEx_PeriphCLKConfig>
240533e8:	4603      	mov	r3, r0
240533ea:	2b00      	cmp	r3, #0
240533ec:	d001      	beq.n	240533f2 <HAL_OSPI_MspInit+0x56>
    {
      Error_Handler();
240533ee:	f7ff fd8f 	bl	24052f10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
240533f2:	4b70      	ldr	r3, [pc, #448]	; (240535b4 <HAL_OSPI_MspInit+0x218>)
240533f4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
240533f8:	4a6e      	ldr	r2, [pc, #440]	; (240535b4 <HAL_OSPI_MspInit+0x218>)
240533fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
240533fe:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
24053402:	4b6c      	ldr	r3, [pc, #432]	; (240535b4 <HAL_OSPI_MspInit+0x218>)
24053404:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
24053408:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
2405340c:	61fb      	str	r3, [r7, #28]
2405340e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_OSPI1_CLK_ENABLE();
24053410:	4b68      	ldr	r3, [pc, #416]	; (240535b4 <HAL_OSPI_MspInit+0x218>)
24053412:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
24053416:	4a67      	ldr	r2, [pc, #412]	; (240535b4 <HAL_OSPI_MspInit+0x218>)
24053418:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
2405341c:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
24053420:	4b64      	ldr	r3, [pc, #400]	; (240535b4 <HAL_OSPI_MspInit+0x218>)
24053422:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
24053426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2405342a:	61bb      	str	r3, [r7, #24]
2405342c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
2405342e:	4b61      	ldr	r3, [pc, #388]	; (240535b4 <HAL_OSPI_MspInit+0x218>)
24053430:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24053434:	4a5f      	ldr	r2, [pc, #380]	; (240535b4 <HAL_OSPI_MspInit+0x218>)
24053436:	f043 0310 	orr.w	r3, r3, #16
2405343a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
2405343e:	4b5d      	ldr	r3, [pc, #372]	; (240535b4 <HAL_OSPI_MspInit+0x218>)
24053440:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24053444:	f003 0310 	and.w	r3, r3, #16
24053448:	617b      	str	r3, [r7, #20]
2405344a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
2405344c:	4b59      	ldr	r3, [pc, #356]	; (240535b4 <HAL_OSPI_MspInit+0x218>)
2405344e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24053452:	4a58      	ldr	r2, [pc, #352]	; (240535b4 <HAL_OSPI_MspInit+0x218>)
24053454:	f043 0301 	orr.w	r3, r3, #1
24053458:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
2405345c:	4b55      	ldr	r3, [pc, #340]	; (240535b4 <HAL_OSPI_MspInit+0x218>)
2405345e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24053462:	f003 0301 	and.w	r3, r3, #1
24053466:	613b      	str	r3, [r7, #16]
24053468:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
2405346a:	4b52      	ldr	r3, [pc, #328]	; (240535b4 <HAL_OSPI_MspInit+0x218>)
2405346c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24053470:	4a50      	ldr	r2, [pc, #320]	; (240535b4 <HAL_OSPI_MspInit+0x218>)
24053472:	f043 0302 	orr.w	r3, r3, #2
24053476:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
2405347a:	4b4e      	ldr	r3, [pc, #312]	; (240535b4 <HAL_OSPI_MspInit+0x218>)
2405347c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24053480:	f003 0302 	and.w	r3, r3, #2
24053484:	60fb      	str	r3, [r7, #12]
24053486:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
24053488:	4b4a      	ldr	r3, [pc, #296]	; (240535b4 <HAL_OSPI_MspInit+0x218>)
2405348a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
2405348e:	4a49      	ldr	r2, [pc, #292]	; (240535b4 <HAL_OSPI_MspInit+0x218>)
24053490:	f043 0308 	orr.w	r3, r3, #8
24053494:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
24053498:	4b46      	ldr	r3, [pc, #280]	; (240535b4 <HAL_OSPI_MspInit+0x218>)
2405349a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
2405349e:	f003 0308 	and.w	r3, r3, #8
240534a2:	60bb      	str	r3, [r7, #8]
240534a4:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> OCTOSPIM_P1_IO0
    PB2     ------> OCTOSPIM_P1_CLK
    PE11     ------> OCTOSPIM_P1_NCS
    PD12     ------> OCTOSPIM_P1_IO1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
240534a6:	2304      	movs	r3, #4
240534a8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240534ac:	2302      	movs	r3, #2
240534ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
240534b2:	2300      	movs	r3, #0
240534b4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
240534b8:	2303      	movs	r3, #3
240534ba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
240534be:	2309      	movs	r3, #9
240534c0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
240534c4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
240534c8:	4619      	mov	r1, r3
240534ca:	483b      	ldr	r0, [pc, #236]	; (240535b8 <HAL_OSPI_MspInit+0x21c>)
240534cc:	f005 fe14 	bl	240590f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
240534d0:	2302      	movs	r3, #2
240534d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240534d6:	2302      	movs	r3, #2
240534d8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
240534dc:	2300      	movs	r3, #0
240534de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
240534e2:	2303      	movs	r3, #3
240534e4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
240534e8:	2309      	movs	r3, #9
240534ea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
240534ee:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
240534f2:	4619      	mov	r1, r3
240534f4:	4831      	ldr	r0, [pc, #196]	; (240535bc <HAL_OSPI_MspInit+0x220>)
240534f6:	f005 fdff 	bl	240590f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
240534fa:	2302      	movs	r3, #2
240534fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24053500:	2302      	movs	r3, #2
24053502:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24053506:	2300      	movs	r3, #0
24053508:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
2405350c:	2303      	movs	r3, #3
2405350e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
24053512:	230b      	movs	r3, #11
24053514:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24053518:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
2405351c:	4619      	mov	r1, r3
2405351e:	4828      	ldr	r0, [pc, #160]	; (240535c0 <HAL_OSPI_MspInit+0x224>)
24053520:	f005 fdea 	bl	240590f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
24053524:	2304      	movs	r3, #4
24053526:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2405352a:	2302      	movs	r3, #2
2405352c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24053530:	2300      	movs	r3, #0
24053532:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24053536:	2303      	movs	r3, #3
24053538:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
2405353c:	2309      	movs	r3, #9
2405353e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24053542:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
24053546:	4619      	mov	r1, r3
24053548:	481d      	ldr	r0, [pc, #116]	; (240535c0 <HAL_OSPI_MspInit+0x224>)
2405354a:	f005 fdd5 	bl	240590f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
2405354e:	f44f 6300 	mov.w	r3, #2048	; 0x800
24053552:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24053556:	2302      	movs	r3, #2
24053558:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2405355c:	2300      	movs	r3, #0
2405355e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24053562:	2303      	movs	r3, #3
24053564:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
24053568:	230b      	movs	r3, #11
2405356a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
2405356e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
24053572:	4619      	mov	r1, r3
24053574:	4810      	ldr	r0, [pc, #64]	; (240535b8 <HAL_OSPI_MspInit+0x21c>)
24053576:	f005 fdbf 	bl	240590f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
2405357a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2405357e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24053582:	2302      	movs	r3, #2
24053584:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24053588:	2300      	movs	r3, #0
2405358a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
2405358e:	2303      	movs	r3, #3
24053590:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
24053594:	2309      	movs	r3, #9
24053596:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
2405359a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
2405359e:	4619      	mov	r1, r3
240535a0:	4808      	ldr	r0, [pc, #32]	; (240535c4 <HAL_OSPI_MspInit+0x228>)
240535a2:	f005 fda9 	bl	240590f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
240535a6:	bf00      	nop
240535a8:	37f8      	adds	r7, #248	; 0xf8
240535aa:	46bd      	mov	sp, r7
240535ac:	bd80      	pop	{r7, pc}
240535ae:	bf00      	nop
240535b0:	52005000 	.word	0x52005000
240535b4:	58024400 	.word	0x58024400
240535b8:	58021000 	.word	0x58021000
240535bc:	58020000 	.word	0x58020000
240535c0:	58020400 	.word	0x58020400
240535c4:	58020c00 	.word	0x58020c00

240535c8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
240535c8:	b580      	push	{r7, lr}
240535ca:	b0b2      	sub	sp, #200	; 0xc8
240535cc:	af00      	add	r7, sp, #0
240535ce:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
240535d0:	f107 0308 	add.w	r3, r7, #8
240535d4:	22c0      	movs	r2, #192	; 0xc0
240535d6:	2100      	movs	r1, #0
240535d8:	4618      	mov	r0, r3
240535da:	f00e f9db 	bl	24061994 <memset>
  if(hrtc->Instance==RTC)
240535de:	687b      	ldr	r3, [r7, #4]
240535e0:	681b      	ldr	r3, [r3, #0]
240535e2:	4a10      	ldr	r2, [pc, #64]	; (24053624 <HAL_RTC_MspInit+0x5c>)
240535e4:	4293      	cmp	r3, r2
240535e6:	d119      	bne.n	2405361c <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
240535e8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
240535ec:	f04f 0300 	mov.w	r3, #0
240535f0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
240535f4:	f44f 7380 	mov.w	r3, #256	; 0x100
240535f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
240535fc:	f107 0308 	add.w	r3, r7, #8
24053600:	4618      	mov	r0, r3
24053602:	f008 ff3f 	bl	2405c484 <HAL_RCCEx_PeriphCLKConfig>
24053606:	4603      	mov	r3, r0
24053608:	2b00      	cmp	r3, #0
2405360a:	d001      	beq.n	24053610 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
2405360c:	f7ff fc80 	bl	24052f10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
24053610:	4b05      	ldr	r3, [pc, #20]	; (24053628 <HAL_RTC_MspInit+0x60>)
24053612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24053614:	4a04      	ldr	r2, [pc, #16]	; (24053628 <HAL_RTC_MspInit+0x60>)
24053616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
2405361a:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
2405361c:	bf00      	nop
2405361e:	37c8      	adds	r7, #200	; 0xc8
24053620:	46bd      	mov	sp, r7
24053622:	bd80      	pop	{r7, pc}
24053624:	58004000 	.word	0x58004000
24053628:	58024400 	.word	0x58024400

2405362c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
2405362c:	b580      	push	{r7, lr}
2405362e:	b0ba      	sub	sp, #232	; 0xe8
24053630:	af00      	add	r7, sp, #0
24053632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24053634:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
24053638:	2200      	movs	r2, #0
2405363a:	601a      	str	r2, [r3, #0]
2405363c:	605a      	str	r2, [r3, #4]
2405363e:	609a      	str	r2, [r3, #8]
24053640:	60da      	str	r2, [r3, #12]
24053642:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24053644:	f107 0310 	add.w	r3, r7, #16
24053648:	22c0      	movs	r2, #192	; 0xc0
2405364a:	2100      	movs	r1, #0
2405364c:	4618      	mov	r0, r3
2405364e:	f00e f9a1 	bl	24061994 <memset>
  if(hspi->Instance==SPI2)
24053652:	687b      	ldr	r3, [r7, #4]
24053654:	681b      	ldr	r3, [r3, #0]
24053656:	4a27      	ldr	r2, [pc, #156]	; (240536f4 <HAL_SPI_MspInit+0xc8>)
24053658:	4293      	cmp	r3, r2
2405365a:	d146      	bne.n	240536ea <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
2405365c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24053660:	f04f 0300 	mov.w	r3, #0
24053664:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
24053668:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2405366c:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
2405366e:	f107 0310 	add.w	r3, r7, #16
24053672:	4618      	mov	r0, r3
24053674:	f008 ff06 	bl	2405c484 <HAL_RCCEx_PeriphCLKConfig>
24053678:	4603      	mov	r3, r0
2405367a:	2b00      	cmp	r3, #0
2405367c:	d001      	beq.n	24053682 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
2405367e:	f7ff fc47 	bl	24052f10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
24053682:	4b1d      	ldr	r3, [pc, #116]	; (240536f8 <HAL_SPI_MspInit+0xcc>)
24053684:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
24053688:	4a1b      	ldr	r2, [pc, #108]	; (240536f8 <HAL_SPI_MspInit+0xcc>)
2405368a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
2405368e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
24053692:	4b19      	ldr	r3, [pc, #100]	; (240536f8 <HAL_SPI_MspInit+0xcc>)
24053694:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
24053698:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2405369c:	60fb      	str	r3, [r7, #12]
2405369e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
240536a0:	4b15      	ldr	r3, [pc, #84]	; (240536f8 <HAL_SPI_MspInit+0xcc>)
240536a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
240536a6:	4a14      	ldr	r2, [pc, #80]	; (240536f8 <HAL_SPI_MspInit+0xcc>)
240536a8:	f043 0302 	orr.w	r3, r3, #2
240536ac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
240536b0:	4b11      	ldr	r3, [pc, #68]	; (240536f8 <HAL_SPI_MspInit+0xcc>)
240536b2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
240536b6:	f003 0302 	and.w	r3, r3, #2
240536ba:	60bb      	str	r3, [r7, #8]
240536bc:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
240536be:	f44f 4320 	mov.w	r3, #40960	; 0xa000
240536c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240536c6:	2302      	movs	r3, #2
240536c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
240536cc:	2300      	movs	r3, #0
240536ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
240536d2:	2300      	movs	r3, #0
240536d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
240536d8:	2305      	movs	r3, #5
240536da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240536de:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
240536e2:	4619      	mov	r1, r3
240536e4:	4805      	ldr	r0, [pc, #20]	; (240536fc <HAL_SPI_MspInit+0xd0>)
240536e6:	f005 fd07 	bl	240590f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
240536ea:	bf00      	nop
240536ec:	37e8      	adds	r7, #232	; 0xe8
240536ee:	46bd      	mov	sp, r7
240536f0:	bd80      	pop	{r7, pc}
240536f2:	bf00      	nop
240536f4:	40003800 	.word	0x40003800
240536f8:	58024400 	.word	0x58024400
240536fc:	58020400 	.word	0x58020400

24053700 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
24053700:	b580      	push	{r7, lr}
24053702:	b084      	sub	sp, #16
24053704:	af00      	add	r7, sp, #0
24053706:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
24053708:	687b      	ldr	r3, [r7, #4]
2405370a:	681b      	ldr	r3, [r3, #0]
2405370c:	4a0e      	ldr	r2, [pc, #56]	; (24053748 <HAL_TIM_Base_MspInit+0x48>)
2405370e:	4293      	cmp	r3, r2
24053710:	d116      	bne.n	24053740 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
24053712:	4b0e      	ldr	r3, [pc, #56]	; (2405374c <HAL_TIM_Base_MspInit+0x4c>)
24053714:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
24053718:	4a0c      	ldr	r2, [pc, #48]	; (2405374c <HAL_TIM_Base_MspInit+0x4c>)
2405371a:	f043 0301 	orr.w	r3, r3, #1
2405371e:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
24053722:	4b0a      	ldr	r3, [pc, #40]	; (2405374c <HAL_TIM_Base_MspInit+0x4c>)
24053724:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
24053728:	f003 0301 	and.w	r3, r3, #1
2405372c:	60fb      	str	r3, [r7, #12]
2405372e:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
24053730:	2200      	movs	r2, #0
24053732:	2100      	movs	r1, #0
24053734:	2019      	movs	r0, #25
24053736:	f002 fb82 	bl	24055e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
2405373a:	2019      	movs	r0, #25
2405373c:	f002 fb99 	bl	24055e72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
24053740:	bf00      	nop
24053742:	3710      	adds	r7, #16
24053744:	46bd      	mov	sp, r7
24053746:	bd80      	pop	{r7, pc}
24053748:	40010000 	.word	0x40010000
2405374c:	58024400 	.word	0x58024400

24053750 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_a;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
24053750:	b580      	push	{r7, lr}
24053752:	b0ba      	sub	sp, #232	; 0xe8
24053754:	af00      	add	r7, sp, #0
24053756:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24053758:	f107 0310 	add.w	r3, r7, #16
2405375c:	22c0      	movs	r2, #192	; 0xc0
2405375e:	2100      	movs	r1, #0
24053760:	4618      	mov	r0, r3
24053762:	f00e f917 	bl	24061994 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
24053766:	687b      	ldr	r3, [r7, #4]
24053768:	681b      	ldr	r3, [r3, #0]
2405376a:	4a50      	ldr	r2, [pc, #320]	; (240538ac <HAL_SAI_MspInit+0x15c>)
2405376c:	4293      	cmp	r3, r2
2405376e:	f040 8098 	bne.w	240538a2 <HAL_SAI_MspInit+0x152>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
24053772:	f44f 7280 	mov.w	r2, #256	; 0x100
24053776:	f04f 0300 	mov.w	r3, #0
2405377a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 25;
2405377e:	2319      	movs	r3, #25
24053780:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 192;
24053782:	23c0      	movs	r3, #192	; 0xc0
24053784:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 5;
24053786:	2305      	movs	r3, #5
24053788:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
2405378a:	2302      	movs	r3, #2
2405378c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 5;
2405378e:	2305      	movs	r3, #5
24053790:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
24053792:	2340      	movs	r3, #64	; 0x40
24053794:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
24053796:	2300      	movs	r3, #0
24053798:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
2405379a:	2300      	movs	r3, #0
2405379c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
2405379e:	2301      	movs	r3, #1
240537a0:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
240537a2:	f107 0310 	add.w	r3, r7, #16
240537a6:	4618      	mov	r0, r3
240537a8:	f008 fe6c 	bl	2405c484 <HAL_RCCEx_PeriphCLKConfig>
240537ac:	4603      	mov	r3, r0
240537ae:	2b00      	cmp	r3, #0
240537b0:	d001      	beq.n	240537b6 <HAL_SAI_MspInit+0x66>
    {
      Error_Handler();
240537b2:	f7ff fbad 	bl	24052f10 <Error_Handler>
    }

    if (SAI1_client == 0)
240537b6:	4b3e      	ldr	r3, [pc, #248]	; (240538b0 <HAL_SAI_MspInit+0x160>)
240537b8:	681b      	ldr	r3, [r3, #0]
240537ba:	2b00      	cmp	r3, #0
240537bc:	d116      	bne.n	240537ec <HAL_SAI_MspInit+0x9c>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
240537be:	4b3d      	ldr	r3, [pc, #244]	; (240538b4 <HAL_SAI_MspInit+0x164>)
240537c0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
240537c4:	4a3b      	ldr	r2, [pc, #236]	; (240538b4 <HAL_SAI_MspInit+0x164>)
240537c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
240537ca:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
240537ce:	4b39      	ldr	r3, [pc, #228]	; (240538b4 <HAL_SAI_MspInit+0x164>)
240537d0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
240537d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
240537d8:	60fb      	str	r3, [r7, #12]
240537da:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
240537dc:	2200      	movs	r2, #0
240537de:	2100      	movs	r1, #0
240537e0:	2057      	movs	r0, #87	; 0x57
240537e2:	f002 fb2c 	bl	24055e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
240537e6:	2057      	movs	r0, #87	; 0x57
240537e8:	f002 fb43 	bl	24055e72 <HAL_NVIC_EnableIRQ>
    }
    SAI1_client ++;
240537ec:	4b30      	ldr	r3, [pc, #192]	; (240538b0 <HAL_SAI_MspInit+0x160>)
240537ee:	681b      	ldr	r3, [r3, #0]
240537f0:	3301      	adds	r3, #1
240537f2:	4a2f      	ldr	r2, [pc, #188]	; (240538b0 <HAL_SAI_MspInit+0x160>)
240537f4:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
240537f6:	2370      	movs	r3, #112	; 0x70
240537f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240537fc:	2302      	movs	r3, #2
240537fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24053802:	2300      	movs	r3, #0
24053804:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24053808:	2300      	movs	r3, #0
2405380a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
2405380e:	2306      	movs	r3, #6
24053810:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24053814:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
24053818:	4619      	mov	r1, r3
2405381a:	4827      	ldr	r0, [pc, #156]	; (240538b8 <HAL_SAI_MspInit+0x168>)
2405381c:	f005 fc6c 	bl	240590f8 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream0;
24053820:	4b26      	ldr	r3, [pc, #152]	; (240538bc <HAL_SAI_MspInit+0x16c>)
24053822:	4a27      	ldr	r2, [pc, #156]	; (240538c0 <HAL_SAI_MspInit+0x170>)
24053824:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
24053826:	4b25      	ldr	r3, [pc, #148]	; (240538bc <HAL_SAI_MspInit+0x16c>)
24053828:	2257      	movs	r2, #87	; 0x57
2405382a:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
2405382c:	4b23      	ldr	r3, [pc, #140]	; (240538bc <HAL_SAI_MspInit+0x16c>)
2405382e:	2240      	movs	r2, #64	; 0x40
24053830:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
24053832:	4b22      	ldr	r3, [pc, #136]	; (240538bc <HAL_SAI_MspInit+0x16c>)
24053834:	2200      	movs	r2, #0
24053836:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
24053838:	4b20      	ldr	r3, [pc, #128]	; (240538bc <HAL_SAI_MspInit+0x16c>)
2405383a:	f44f 6280 	mov.w	r2, #1024	; 0x400
2405383e:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
24053840:	4b1e      	ldr	r3, [pc, #120]	; (240538bc <HAL_SAI_MspInit+0x16c>)
24053842:	f44f 6200 	mov.w	r2, #2048	; 0x800
24053846:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
24053848:	4b1c      	ldr	r3, [pc, #112]	; (240538bc <HAL_SAI_MspInit+0x16c>)
2405384a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
2405384e:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
24053850:	4b1a      	ldr	r3, [pc, #104]	; (240538bc <HAL_SAI_MspInit+0x16c>)
24053852:	f44f 7280 	mov.w	r2, #256	; 0x100
24053856:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
24053858:	4b18      	ldr	r3, [pc, #96]	; (240538bc <HAL_SAI_MspInit+0x16c>)
2405385a:	2200      	movs	r2, #0
2405385c:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
2405385e:	4b17      	ldr	r3, [pc, #92]	; (240538bc <HAL_SAI_MspInit+0x16c>)
24053860:	2204      	movs	r2, #4
24053862:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
24053864:	4b15      	ldr	r3, [pc, #84]	; (240538bc <HAL_SAI_MspInit+0x16c>)
24053866:	2203      	movs	r2, #3
24053868:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
2405386a:	4b14      	ldr	r3, [pc, #80]	; (240538bc <HAL_SAI_MspInit+0x16c>)
2405386c:	2200      	movs	r2, #0
2405386e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
24053870:	4b12      	ldr	r3, [pc, #72]	; (240538bc <HAL_SAI_MspInit+0x16c>)
24053872:	2200      	movs	r2, #0
24053874:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
24053876:	4811      	ldr	r0, [pc, #68]	; (240538bc <HAL_SAI_MspInit+0x16c>)
24053878:	f002 fcf0 	bl	2405625c <HAL_DMA_Init>
2405387c:	4603      	mov	r3, r0
2405387e:	2b00      	cmp	r3, #0
24053880:	d001      	beq.n	24053886 <HAL_SAI_MspInit+0x136>
    {
      Error_Handler();
24053882:	f7ff fb45 	bl	24052f10 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
24053886:	687b      	ldr	r3, [r7, #4]
24053888:	4a0c      	ldr	r2, [pc, #48]	; (240538bc <HAL_SAI_MspInit+0x16c>)
2405388a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
2405388e:	4a0b      	ldr	r2, [pc, #44]	; (240538bc <HAL_SAI_MspInit+0x16c>)
24053890:	687b      	ldr	r3, [r7, #4]
24053892:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
24053894:	687b      	ldr	r3, [r7, #4]
24053896:	4a09      	ldr	r2, [pc, #36]	; (240538bc <HAL_SAI_MspInit+0x16c>)
24053898:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
2405389c:	4a07      	ldr	r2, [pc, #28]	; (240538bc <HAL_SAI_MspInit+0x16c>)
2405389e:	687b      	ldr	r3, [r7, #4]
240538a0:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
240538a2:	bf00      	nop
240538a4:	37e8      	adds	r7, #232	; 0xe8
240538a6:	46bd      	mov	sp, r7
240538a8:	bd80      	pop	{r7, pc}
240538aa:	bf00      	nop
240538ac:	40015804 	.word	0x40015804
240538b0:	20000614 	.word	0x20000614
240538b4:	58024400 	.word	0x58024400
240538b8:	58021000 	.word	0x58021000
240538bc:	200004c8 	.word	0x200004c8
240538c0:	40020010 	.word	0x40020010

240538c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
240538c4:	b480      	push	{r7}
240538c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
240538c8:	e7fe      	b.n	240538c8 <NMI_Handler+0x4>

240538ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
240538ca:	b480      	push	{r7}
240538cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
240538ce:	e7fe      	b.n	240538ce <HardFault_Handler+0x4>

240538d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
240538d0:	b480      	push	{r7}
240538d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
240538d4:	e7fe      	b.n	240538d4 <MemManage_Handler+0x4>

240538d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
240538d6:	b480      	push	{r7}
240538d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
240538da:	e7fe      	b.n	240538da <BusFault_Handler+0x4>

240538dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
240538dc:	b480      	push	{r7}
240538de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
240538e0:	e7fe      	b.n	240538e0 <UsageFault_Handler+0x4>

240538e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
240538e2:	b480      	push	{r7}
240538e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
240538e6:	bf00      	nop
240538e8:	46bd      	mov	sp, r7
240538ea:	f85d 7b04 	ldr.w	r7, [sp], #4
240538ee:	4770      	bx	lr

240538f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
240538f0:	b480      	push	{r7}
240538f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
240538f4:	bf00      	nop
240538f6:	46bd      	mov	sp, r7
240538f8:	f85d 7b04 	ldr.w	r7, [sp], #4
240538fc:	4770      	bx	lr

240538fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
240538fe:	b480      	push	{r7}
24053900:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
24053902:	bf00      	nop
24053904:	46bd      	mov	sp, r7
24053906:	f85d 7b04 	ldr.w	r7, [sp], #4
2405390a:	4770      	bx	lr

2405390c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
2405390c:	b580      	push	{r7, lr}
2405390e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
24053910:	f000 fa48 	bl	24053da4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
#if 1
	if (HAL_GPIO_ReadPin(BTN_PWR_GPIO_Port, BTN_PWR_Pin) == 0) // is power button down ?
24053914:	2101      	movs	r1, #1
24053916:	480c      	ldr	r0, [pc, #48]	; (24053948 <SysTick_Handler+0x3c>)
24053918:	f005 fd9e 	bl	24059458 <HAL_GPIO_ReadPin>
2405391c:	4603      	mov	r3, r0
2405391e:	2b00      	cmp	r3, #0
24053920:	d10d      	bne.n	2405393e <SysTick_Handler+0x32>
			{
		g_system_reset_ticks++;
24053922:	4b0a      	ldr	r3, [pc, #40]	; (2405394c <SysTick_Handler+0x40>)
24053924:	681b      	ldr	r3, [r3, #0]
24053926:	3301      	adds	r3, #1
24053928:	4a08      	ldr	r2, [pc, #32]	; (2405394c <SysTick_Handler+0x40>)
2405392a:	6013      	str	r3, [r2, #0]
		if (g_system_reset_ticks >= 5000) {
2405392c:	4b07      	ldr	r3, [pc, #28]	; (2405394c <SysTick_Handler+0x40>)
2405392e:	681b      	ldr	r3, [r3, #0]
24053930:	f241 3287 	movw	r2, #4999	; 0x1387
24053934:	4293      	cmp	r3, r2
24053936:	dd05      	ble.n	24053944 <SysTick_Handler+0x38>
			HAL_NVIC_SystemReset();
24053938:	f002 faa9 	bl	24055e8e <HAL_NVIC_SystemReset>
	} else {
		g_system_reset_ticks = 0;
	}
#endif
  /* USER CODE END SysTick_IRQn 1 */
}
2405393c:	e002      	b.n	24053944 <SysTick_Handler+0x38>
		g_system_reset_ticks = 0;
2405393e:	4b03      	ldr	r3, [pc, #12]	; (2405394c <SysTick_Handler+0x40>)
24053940:	2200      	movs	r2, #0
24053942:	601a      	str	r2, [r3, #0]
}
24053944:	bf00      	nop
24053946:	bd80      	pop	{r7, pc}
24053948:	58020000 	.word	0x58020000
2405394c:	20000618 	.word	0x20000618

24053950 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
24053950:	b580      	push	{r7, lr}
24053952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
24053954:	2004      	movs	r0, #4
24053956:	f005 fdb0 	bl	240594ba <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
2405395a:	bf00      	nop
2405395c:	bd80      	pop	{r7, pc}
	...

24053960 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
24053960:	b580      	push	{r7, lr}
24053962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
24053964:	4802      	ldr	r0, [pc, #8]	; (24053970 <DMA1_Stream0_IRQHandler+0x10>)
24053966:	f003 ffd5 	bl	24057914 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
2405396a:	bf00      	nop
2405396c:	bd80      	pop	{r7, pc}
2405396e:	bf00      	nop
24053970:	200004c8 	.word	0x200004c8

24053974 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
24053974:	b580      	push	{r7, lr}
24053976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
24053978:	4802      	ldr	r0, [pc, #8]	; (24053984 <ADC_IRQHandler+0x10>)
2405397a:	f001 f901 	bl	24054b80 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
2405397e:	bf00      	nop
24053980:	bd80      	pop	{r7, pc}
24053982:	bf00      	nop
24053984:	20000210 	.word	0x20000210

24053988 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
24053988:	b580      	push	{r7, lr}
2405398a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
2405398c:	2080      	movs	r0, #128	; 0x80
2405398e:	f005 fd94 	bl	240594ba <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
24053992:	bf00      	nop
24053994:	bd80      	pop	{r7, pc}
	...

24053998 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
24053998:	b580      	push	{r7, lr}
2405399a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
2405399c:	4802      	ldr	r0, [pc, #8]	; (240539a8 <TIM1_UP_IRQHandler+0x10>)
2405399e:	f00d f907 	bl	24060bb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
240539a2:	bf00      	nop
240539a4:	bd80      	pop	{r7, pc}
240539a6:	bf00      	nop
240539a8:	200005c8 	.word	0x200005c8

240539ac <SAI1_IRQHandler>:

/**
  * @brief This function handles SAI1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
240539ac:	b580      	push	{r7, lr}
240539ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
240539b0:	4802      	ldr	r0, [pc, #8]	; (240539bc <SAI1_IRQHandler+0x10>)
240539b2:	f00c f819 	bl	2405f9e8 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
240539b6:	bf00      	nop
240539b8:	bd80      	pop	{r7, pc}
240539ba:	bf00      	nop
240539bc:	20000430 	.word	0x20000430

240539c0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
240539c0:	b580      	push	{r7, lr}
240539c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
240539c4:	4802      	ldr	r0, [pc, #8]	; (240539d0 <LTDC_IRQHandler+0x10>)
240539c6:	f005 fe6d 	bl	240596a4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
240539ca:	bf00      	nop
240539cc:	bd80      	pop	{r7, pc}
240539ce:	bf00      	nop
240539d0:	20000304 	.word	0x20000304

240539d4 <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
240539d4:	b580      	push	{r7, lr}
240539d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
240539d8:	4802      	ldr	r0, [pc, #8]	; (240539e4 <OCTOSPI1_IRQHandler+0x10>)
240539da:	f006 fa3d 	bl	24059e58 <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
240539de:	bf00      	nop
240539e0:	bd80      	pop	{r7, pc}
240539e2:	bf00      	nop
240539e4:	200003ac 	.word	0x200003ac

240539e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
240539e8:	b480      	push	{r7}
240539ea:	af00      	add	r7, sp, #0
	return 1;
240539ec:	2301      	movs	r3, #1
}
240539ee:	4618      	mov	r0, r3
240539f0:	46bd      	mov	sp, r7
240539f2:	f85d 7b04 	ldr.w	r7, [sp], #4
240539f6:	4770      	bx	lr

240539f8 <_kill>:

int _kill(int pid, int sig)
{
240539f8:	b580      	push	{r7, lr}
240539fa:	b082      	sub	sp, #8
240539fc:	af00      	add	r7, sp, #0
240539fe:	6078      	str	r0, [r7, #4]
24053a00:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
24053a02:	f00e f815 	bl	24061a30 <__errno>
24053a06:	4603      	mov	r3, r0
24053a08:	2216      	movs	r2, #22
24053a0a:	601a      	str	r2, [r3, #0]
	return -1;
24053a0c:	f04f 33ff 	mov.w	r3, #4294967295
}
24053a10:	4618      	mov	r0, r3
24053a12:	3708      	adds	r7, #8
24053a14:	46bd      	mov	sp, r7
24053a16:	bd80      	pop	{r7, pc}

24053a18 <_exit>:

void _exit (int status)
{
24053a18:	b580      	push	{r7, lr}
24053a1a:	b082      	sub	sp, #8
24053a1c:	af00      	add	r7, sp, #0
24053a1e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
24053a20:	f04f 31ff 	mov.w	r1, #4294967295
24053a24:	6878      	ldr	r0, [r7, #4]
24053a26:	f7ff ffe7 	bl	240539f8 <_kill>
	while (1) {}		/* Make sure we hang here */
24053a2a:	e7fe      	b.n	24053a2a <_exit+0x12>

24053a2c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
24053a2c:	b580      	push	{r7, lr}
24053a2e:	b086      	sub	sp, #24
24053a30:	af00      	add	r7, sp, #0
24053a32:	60f8      	str	r0, [r7, #12]
24053a34:	60b9      	str	r1, [r7, #8]
24053a36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
24053a38:	2300      	movs	r3, #0
24053a3a:	617b      	str	r3, [r7, #20]
24053a3c:	e00a      	b.n	24053a54 <_read+0x28>
	{
		*ptr++ = __io_getchar();
24053a3e:	f3af 8000 	nop.w
24053a42:	4601      	mov	r1, r0
24053a44:	68bb      	ldr	r3, [r7, #8]
24053a46:	1c5a      	adds	r2, r3, #1
24053a48:	60ba      	str	r2, [r7, #8]
24053a4a:	b2ca      	uxtb	r2, r1
24053a4c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
24053a4e:	697b      	ldr	r3, [r7, #20]
24053a50:	3301      	adds	r3, #1
24053a52:	617b      	str	r3, [r7, #20]
24053a54:	697a      	ldr	r2, [r7, #20]
24053a56:	687b      	ldr	r3, [r7, #4]
24053a58:	429a      	cmp	r2, r3
24053a5a:	dbf0      	blt.n	24053a3e <_read+0x12>
	}

return len;
24053a5c:	687b      	ldr	r3, [r7, #4]
}
24053a5e:	4618      	mov	r0, r3
24053a60:	3718      	adds	r7, #24
24053a62:	46bd      	mov	sp, r7
24053a64:	bd80      	pop	{r7, pc}

24053a66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
24053a66:	b580      	push	{r7, lr}
24053a68:	b086      	sub	sp, #24
24053a6a:	af00      	add	r7, sp, #0
24053a6c:	60f8      	str	r0, [r7, #12]
24053a6e:	60b9      	str	r1, [r7, #8]
24053a70:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
24053a72:	2300      	movs	r3, #0
24053a74:	617b      	str	r3, [r7, #20]
24053a76:	e009      	b.n	24053a8c <_write+0x26>
	{
		__io_putchar(*ptr++);
24053a78:	68bb      	ldr	r3, [r7, #8]
24053a7a:	1c5a      	adds	r2, r3, #1
24053a7c:	60ba      	str	r2, [r7, #8]
24053a7e:	781b      	ldrb	r3, [r3, #0]
24053a80:	4618      	mov	r0, r3
24053a82:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
24053a86:	697b      	ldr	r3, [r7, #20]
24053a88:	3301      	adds	r3, #1
24053a8a:	617b      	str	r3, [r7, #20]
24053a8c:	697a      	ldr	r2, [r7, #20]
24053a8e:	687b      	ldr	r3, [r7, #4]
24053a90:	429a      	cmp	r2, r3
24053a92:	dbf1      	blt.n	24053a78 <_write+0x12>
	}
	return len;
24053a94:	687b      	ldr	r3, [r7, #4]
}
24053a96:	4618      	mov	r0, r3
24053a98:	3718      	adds	r7, #24
24053a9a:	46bd      	mov	sp, r7
24053a9c:	bd80      	pop	{r7, pc}

24053a9e <_close>:

int _close(int file)
{
24053a9e:	b480      	push	{r7}
24053aa0:	b083      	sub	sp, #12
24053aa2:	af00      	add	r7, sp, #0
24053aa4:	6078      	str	r0, [r7, #4]
	return -1;
24053aa6:	f04f 33ff 	mov.w	r3, #4294967295
}
24053aaa:	4618      	mov	r0, r3
24053aac:	370c      	adds	r7, #12
24053aae:	46bd      	mov	sp, r7
24053ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
24053ab4:	4770      	bx	lr

24053ab6 <_fstat>:


int _fstat(int file, struct stat *st)
{
24053ab6:	b480      	push	{r7}
24053ab8:	b083      	sub	sp, #12
24053aba:	af00      	add	r7, sp, #0
24053abc:	6078      	str	r0, [r7, #4]
24053abe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
24053ac0:	683b      	ldr	r3, [r7, #0]
24053ac2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
24053ac6:	605a      	str	r2, [r3, #4]
	return 0;
24053ac8:	2300      	movs	r3, #0
}
24053aca:	4618      	mov	r0, r3
24053acc:	370c      	adds	r7, #12
24053ace:	46bd      	mov	sp, r7
24053ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
24053ad4:	4770      	bx	lr

24053ad6 <_isatty>:

int _isatty(int file)
{
24053ad6:	b480      	push	{r7}
24053ad8:	b083      	sub	sp, #12
24053ada:	af00      	add	r7, sp, #0
24053adc:	6078      	str	r0, [r7, #4]
	return 1;
24053ade:	2301      	movs	r3, #1
}
24053ae0:	4618      	mov	r0, r3
24053ae2:	370c      	adds	r7, #12
24053ae4:	46bd      	mov	sp, r7
24053ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
24053aea:	4770      	bx	lr

24053aec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
24053aec:	b480      	push	{r7}
24053aee:	b085      	sub	sp, #20
24053af0:	af00      	add	r7, sp, #0
24053af2:	60f8      	str	r0, [r7, #12]
24053af4:	60b9      	str	r1, [r7, #8]
24053af6:	607a      	str	r2, [r7, #4]
	return 0;
24053af8:	2300      	movs	r3, #0
}
24053afa:	4618      	mov	r0, r3
24053afc:	3714      	adds	r7, #20
24053afe:	46bd      	mov	sp, r7
24053b00:	f85d 7b04 	ldr.w	r7, [sp], #4
24053b04:	4770      	bx	lr
	...

24053b08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
24053b08:	b580      	push	{r7, lr}
24053b0a:	b086      	sub	sp, #24
24053b0c:	af00      	add	r7, sp, #0
24053b0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
24053b10:	4a14      	ldr	r2, [pc, #80]	; (24053b64 <_sbrk+0x5c>)
24053b12:	4b15      	ldr	r3, [pc, #84]	; (24053b68 <_sbrk+0x60>)
24053b14:	1ad3      	subs	r3, r2, r3
24053b16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
24053b18:	697b      	ldr	r3, [r7, #20]
24053b1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
24053b1c:	4b13      	ldr	r3, [pc, #76]	; (24053b6c <_sbrk+0x64>)
24053b1e:	681b      	ldr	r3, [r3, #0]
24053b20:	2b00      	cmp	r3, #0
24053b22:	d102      	bne.n	24053b2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
24053b24:	4b11      	ldr	r3, [pc, #68]	; (24053b6c <_sbrk+0x64>)
24053b26:	4a12      	ldr	r2, [pc, #72]	; (24053b70 <_sbrk+0x68>)
24053b28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
24053b2a:	4b10      	ldr	r3, [pc, #64]	; (24053b6c <_sbrk+0x64>)
24053b2c:	681a      	ldr	r2, [r3, #0]
24053b2e:	687b      	ldr	r3, [r7, #4]
24053b30:	4413      	add	r3, r2
24053b32:	693a      	ldr	r2, [r7, #16]
24053b34:	429a      	cmp	r2, r3
24053b36:	d207      	bcs.n	24053b48 <_sbrk+0x40>
  {
    errno = ENOMEM;
24053b38:	f00d ff7a 	bl	24061a30 <__errno>
24053b3c:	4603      	mov	r3, r0
24053b3e:	220c      	movs	r2, #12
24053b40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
24053b42:	f04f 33ff 	mov.w	r3, #4294967295
24053b46:	e009      	b.n	24053b5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
24053b48:	4b08      	ldr	r3, [pc, #32]	; (24053b6c <_sbrk+0x64>)
24053b4a:	681b      	ldr	r3, [r3, #0]
24053b4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
24053b4e:	4b07      	ldr	r3, [pc, #28]	; (24053b6c <_sbrk+0x64>)
24053b50:	681a      	ldr	r2, [r3, #0]
24053b52:	687b      	ldr	r3, [r7, #4]
24053b54:	4413      	add	r3, r2
24053b56:	4a05      	ldr	r2, [pc, #20]	; (24053b6c <_sbrk+0x64>)
24053b58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
24053b5a:	68fb      	ldr	r3, [r7, #12]
}
24053b5c:	4618      	mov	r0, r3
24053b5e:	3718      	adds	r7, #24
24053b60:	46bd      	mov	sp, r7
24053b62:	bd80      	pop	{r7, pc}
24053b64:	20020000 	.word	0x20020000
24053b68:	00005000 	.word	0x00005000
24053b6c:	2000061c 	.word	0x2000061c
24053b70:	20000770 	.word	0x20000770

24053b74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
24053b74:	b480      	push	{r7}
24053b76:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
24053b78:	4b34      	ldr	r3, [pc, #208]	; (24053c4c <SystemInit+0xd8>)
24053b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
24053b7e:	4a33      	ldr	r2, [pc, #204]	; (24053c4c <SystemInit+0xd8>)
24053b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
24053b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
24053b88:	4b31      	ldr	r3, [pc, #196]	; (24053c50 <SystemInit+0xdc>)
24053b8a:	681b      	ldr	r3, [r3, #0]
24053b8c:	f003 030f 	and.w	r3, r3, #15
24053b90:	2b02      	cmp	r3, #2
24053b92:	d807      	bhi.n	24053ba4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
24053b94:	4b2e      	ldr	r3, [pc, #184]	; (24053c50 <SystemInit+0xdc>)
24053b96:	681b      	ldr	r3, [r3, #0]
24053b98:	f023 030f 	bic.w	r3, r3, #15
24053b9c:	4a2c      	ldr	r2, [pc, #176]	; (24053c50 <SystemInit+0xdc>)
24053b9e:	f043 0303 	orr.w	r3, r3, #3
24053ba2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
24053ba4:	4b2b      	ldr	r3, [pc, #172]	; (24053c54 <SystemInit+0xe0>)
24053ba6:	681b      	ldr	r3, [r3, #0]
24053ba8:	4a2a      	ldr	r2, [pc, #168]	; (24053c54 <SystemInit+0xe0>)
24053baa:	f043 0301 	orr.w	r3, r3, #1
24053bae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
24053bb0:	4b28      	ldr	r3, [pc, #160]	; (24053c54 <SystemInit+0xe0>)
24053bb2:	2200      	movs	r2, #0
24053bb4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
24053bb6:	4b27      	ldr	r3, [pc, #156]	; (24053c54 <SystemInit+0xe0>)
24053bb8:	681a      	ldr	r2, [r3, #0]
24053bba:	4926      	ldr	r1, [pc, #152]	; (24053c54 <SystemInit+0xe0>)
24053bbc:	4b26      	ldr	r3, [pc, #152]	; (24053c58 <SystemInit+0xe4>)
24053bbe:	4013      	ands	r3, r2
24053bc0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
24053bc2:	4b23      	ldr	r3, [pc, #140]	; (24053c50 <SystemInit+0xdc>)
24053bc4:	681b      	ldr	r3, [r3, #0]
24053bc6:	f003 030c 	and.w	r3, r3, #12
24053bca:	2b00      	cmp	r3, #0
24053bcc:	d007      	beq.n	24053bde <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
24053bce:	4b20      	ldr	r3, [pc, #128]	; (24053c50 <SystemInit+0xdc>)
24053bd0:	681b      	ldr	r3, [r3, #0]
24053bd2:	f023 030f 	bic.w	r3, r3, #15
24053bd6:	4a1e      	ldr	r2, [pc, #120]	; (24053c50 <SystemInit+0xdc>)
24053bd8:	f043 0303 	orr.w	r3, r3, #3
24053bdc:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
24053bde:	4b1d      	ldr	r3, [pc, #116]	; (24053c54 <SystemInit+0xe0>)
24053be0:	2200      	movs	r2, #0
24053be2:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
24053be4:	4b1b      	ldr	r3, [pc, #108]	; (24053c54 <SystemInit+0xe0>)
24053be6:	2200      	movs	r2, #0
24053be8:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
24053bea:	4b1a      	ldr	r3, [pc, #104]	; (24053c54 <SystemInit+0xe0>)
24053bec:	2200      	movs	r2, #0
24053bee:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
24053bf0:	4b18      	ldr	r3, [pc, #96]	; (24053c54 <SystemInit+0xe0>)
24053bf2:	4a1a      	ldr	r2, [pc, #104]	; (24053c5c <SystemInit+0xe8>)
24053bf4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
24053bf6:	4b17      	ldr	r3, [pc, #92]	; (24053c54 <SystemInit+0xe0>)
24053bf8:	4a19      	ldr	r2, [pc, #100]	; (24053c60 <SystemInit+0xec>)
24053bfa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
24053bfc:	4b15      	ldr	r3, [pc, #84]	; (24053c54 <SystemInit+0xe0>)
24053bfe:	4a19      	ldr	r2, [pc, #100]	; (24053c64 <SystemInit+0xf0>)
24053c00:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
24053c02:	4b14      	ldr	r3, [pc, #80]	; (24053c54 <SystemInit+0xe0>)
24053c04:	2200      	movs	r2, #0
24053c06:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
24053c08:	4b12      	ldr	r3, [pc, #72]	; (24053c54 <SystemInit+0xe0>)
24053c0a:	4a16      	ldr	r2, [pc, #88]	; (24053c64 <SystemInit+0xf0>)
24053c0c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
24053c0e:	4b11      	ldr	r3, [pc, #68]	; (24053c54 <SystemInit+0xe0>)
24053c10:	2200      	movs	r2, #0
24053c12:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
24053c14:	4b0f      	ldr	r3, [pc, #60]	; (24053c54 <SystemInit+0xe0>)
24053c16:	4a13      	ldr	r2, [pc, #76]	; (24053c64 <SystemInit+0xf0>)
24053c18:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
24053c1a:	4b0e      	ldr	r3, [pc, #56]	; (24053c54 <SystemInit+0xe0>)
24053c1c:	2200      	movs	r2, #0
24053c1e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
24053c20:	4b0c      	ldr	r3, [pc, #48]	; (24053c54 <SystemInit+0xe0>)
24053c22:	681b      	ldr	r3, [r3, #0]
24053c24:	4a0b      	ldr	r2, [pc, #44]	; (24053c54 <SystemInit+0xe0>)
24053c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
24053c2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
24053c2c:	4b09      	ldr	r3, [pc, #36]	; (24053c54 <SystemInit+0xe0>)
24053c2e:	2200      	movs	r2, #0
24053c30:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
24053c32:	4b0d      	ldr	r3, [pc, #52]	; (24053c68 <SystemInit+0xf4>)
24053c34:	f243 02d2 	movw	r2, #12498	; 0x30d2
24053c38:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
24053c3a:	4b04      	ldr	r3, [pc, #16]	; (24053c4c <SystemInit+0xd8>)
24053c3c:	f04f 5210 	mov.w	r2, #603979776	; 0x24000000
24053c40:	609a      	str	r2, [r3, #8]
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
24053c42:	bf00      	nop
24053c44:	46bd      	mov	sp, r7
24053c46:	f85d 7b04 	ldr.w	r7, [sp], #4
24053c4a:	4770      	bx	lr
24053c4c:	e000ed00 	.word	0xe000ed00
24053c50:	52002000 	.word	0x52002000
24053c54:	58024400 	.word	0x58024400
24053c58:	eaf6ed7f 	.word	0xeaf6ed7f
24053c5c:	02020200 	.word	0x02020200
24053c60:	01ff0000 	.word	0x01ff0000
24053c64:	01010280 	.word	0x01010280
24053c68:	52004000 	.word	0x52004000

24053c6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
24053c6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 24053ca4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
24053c70:	f7ff ff80 	bl	24053b74 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
24053c74:	480c      	ldr	r0, [pc, #48]	; (24053ca8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
24053c76:	490d      	ldr	r1, [pc, #52]	; (24053cac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
24053c78:	4a0d      	ldr	r2, [pc, #52]	; (24053cb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
24053c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
24053c7c:	e002      	b.n	24053c84 <LoopCopyDataInit>

24053c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
24053c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
24053c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
24053c82:	3304      	adds	r3, #4

24053c84 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
24053c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
24053c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
24053c88:	d3f9      	bcc.n	24053c7e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
24053c8a:	4a0a      	ldr	r2, [pc, #40]	; (24053cb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
24053c8c:	4c0a      	ldr	r4, [pc, #40]	; (24053cb8 <LoopFillZerobss+0x22>)
  movs r3, #0
24053c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
24053c90:	e001      	b.n	24053c96 <LoopFillZerobss>

24053c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
24053c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
24053c94:	3204      	adds	r2, #4

24053c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
24053c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
24053c98:	d3fb      	bcc.n	24053c92 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
24053c9a:	f00d fecf 	bl	24061a3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
24053c9e:	f7fe fb99 	bl	240523d4 <main>
  bx  lr
24053ca2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
24053ca4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
24053ca8:	20000000 	.word	0x20000000
  ldr r1, =_edata
24053cac:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
24053cb0:	240642f8 	.word	0x240642f8
  ldr r2, =_sbss
24053cb4:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
24053cb8:	20000770 	.word	0x20000770

24053cbc <BDMA1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
24053cbc:	e7fe      	b.n	24053cbc <BDMA1_IRQHandler>
	...

24053cc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
24053cc0:	b580      	push	{r7, lr}
24053cc2:	b082      	sub	sp, #8
24053cc4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
24053cc6:	2003      	movs	r0, #3
24053cc8:	f002 f8ae 	bl	24055e28 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
24053ccc:	f008 fa1a 	bl	2405c104 <HAL_RCC_GetSysClockFreq>
24053cd0:	4602      	mov	r2, r0
24053cd2:	4b15      	ldr	r3, [pc, #84]	; (24053d28 <HAL_Init+0x68>)
24053cd4:	699b      	ldr	r3, [r3, #24]
24053cd6:	0a1b      	lsrs	r3, r3, #8
24053cd8:	f003 030f 	and.w	r3, r3, #15
24053cdc:	4913      	ldr	r1, [pc, #76]	; (24053d2c <HAL_Init+0x6c>)
24053cde:	5ccb      	ldrb	r3, [r1, r3]
24053ce0:	f003 031f 	and.w	r3, r3, #31
24053ce4:	fa22 f303 	lsr.w	r3, r2, r3
24053ce8:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
24053cea:	4b0f      	ldr	r3, [pc, #60]	; (24053d28 <HAL_Init+0x68>)
24053cec:	699b      	ldr	r3, [r3, #24]
24053cee:	f003 030f 	and.w	r3, r3, #15
24053cf2:	4a0e      	ldr	r2, [pc, #56]	; (24053d2c <HAL_Init+0x6c>)
24053cf4:	5cd3      	ldrb	r3, [r2, r3]
24053cf6:	f003 031f 	and.w	r3, r3, #31
24053cfa:	687a      	ldr	r2, [r7, #4]
24053cfc:	fa22 f303 	lsr.w	r3, r2, r3
24053d00:	4a0b      	ldr	r2, [pc, #44]	; (24053d30 <HAL_Init+0x70>)
24053d02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
24053d04:	4a0b      	ldr	r2, [pc, #44]	; (24053d34 <HAL_Init+0x74>)
24053d06:	687b      	ldr	r3, [r7, #4]
24053d08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
24053d0a:	2000      	movs	r0, #0
24053d0c:	f000 f814 	bl	24053d38 <HAL_InitTick>
24053d10:	4603      	mov	r3, r0
24053d12:	2b00      	cmp	r3, #0
24053d14:	d001      	beq.n	24053d1a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
24053d16:	2301      	movs	r3, #1
24053d18:	e002      	b.n	24053d20 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
24053d1a:	f7ff f8ff 	bl	24052f1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
24053d1e:	2300      	movs	r3, #0
}
24053d20:	4618      	mov	r0, r3
24053d22:	3708      	adds	r7, #8
24053d24:	46bd      	mov	sp, r7
24053d26:	bd80      	pop	{r7, pc}
24053d28:	58024400 	.word	0x58024400
24053d2c:	240641f8 	.word	0x240641f8
24053d30:	20000048 	.word	0x20000048
24053d34:	20000044 	.word	0x20000044

24053d38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
24053d38:	b580      	push	{r7, lr}
24053d3a:	b082      	sub	sp, #8
24053d3c:	af00      	add	r7, sp, #0
24053d3e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
24053d40:	4b15      	ldr	r3, [pc, #84]	; (24053d98 <HAL_InitTick+0x60>)
24053d42:	781b      	ldrb	r3, [r3, #0]
24053d44:	2b00      	cmp	r3, #0
24053d46:	d101      	bne.n	24053d4c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
24053d48:	2301      	movs	r3, #1
24053d4a:	e021      	b.n	24053d90 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
24053d4c:	4b13      	ldr	r3, [pc, #76]	; (24053d9c <HAL_InitTick+0x64>)
24053d4e:	681a      	ldr	r2, [r3, #0]
24053d50:	4b11      	ldr	r3, [pc, #68]	; (24053d98 <HAL_InitTick+0x60>)
24053d52:	781b      	ldrb	r3, [r3, #0]
24053d54:	4619      	mov	r1, r3
24053d56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
24053d5a:	fbb3 f3f1 	udiv	r3, r3, r1
24053d5e:	fbb2 f3f3 	udiv	r3, r2, r3
24053d62:	4618      	mov	r0, r3
24053d64:	f002 f897 	bl	24055e96 <HAL_SYSTICK_Config>
24053d68:	4603      	mov	r3, r0
24053d6a:	2b00      	cmp	r3, #0
24053d6c:	d001      	beq.n	24053d72 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
24053d6e:	2301      	movs	r3, #1
24053d70:	e00e      	b.n	24053d90 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
24053d72:	687b      	ldr	r3, [r7, #4]
24053d74:	2b0f      	cmp	r3, #15
24053d76:	d80a      	bhi.n	24053d8e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
24053d78:	2200      	movs	r2, #0
24053d7a:	6879      	ldr	r1, [r7, #4]
24053d7c:	f04f 30ff 	mov.w	r0, #4294967295
24053d80:	f002 f85d 	bl	24055e3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
24053d84:	4a06      	ldr	r2, [pc, #24]	; (24053da0 <HAL_InitTick+0x68>)
24053d86:	687b      	ldr	r3, [r7, #4]
24053d88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
24053d8a:	2300      	movs	r3, #0
24053d8c:	e000      	b.n	24053d90 <HAL_InitTick+0x58>
    return HAL_ERROR;
24053d8e:	2301      	movs	r3, #1
}
24053d90:	4618      	mov	r0, r3
24053d92:	3708      	adds	r7, #8
24053d94:	46bd      	mov	sp, r7
24053d96:	bd80      	pop	{r7, pc}
24053d98:	20000050 	.word	0x20000050
24053d9c:	20000044 	.word	0x20000044
24053da0:	2000004c 	.word	0x2000004c

24053da4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
24053da4:	b480      	push	{r7}
24053da6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
24053da8:	4b06      	ldr	r3, [pc, #24]	; (24053dc4 <HAL_IncTick+0x20>)
24053daa:	781b      	ldrb	r3, [r3, #0]
24053dac:	461a      	mov	r2, r3
24053dae:	4b06      	ldr	r3, [pc, #24]	; (24053dc8 <HAL_IncTick+0x24>)
24053db0:	681b      	ldr	r3, [r3, #0]
24053db2:	4413      	add	r3, r2
24053db4:	4a04      	ldr	r2, [pc, #16]	; (24053dc8 <HAL_IncTick+0x24>)
24053db6:	6013      	str	r3, [r2, #0]
}
24053db8:	bf00      	nop
24053dba:	46bd      	mov	sp, r7
24053dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
24053dc0:	4770      	bx	lr
24053dc2:	bf00      	nop
24053dc4:	20000050 	.word	0x20000050
24053dc8:	20000620 	.word	0x20000620

24053dcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
24053dcc:	b480      	push	{r7}
24053dce:	af00      	add	r7, sp, #0
  return uwTick;
24053dd0:	4b03      	ldr	r3, [pc, #12]	; (24053de0 <HAL_GetTick+0x14>)
24053dd2:	681b      	ldr	r3, [r3, #0]
}
24053dd4:	4618      	mov	r0, r3
24053dd6:	46bd      	mov	sp, r7
24053dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
24053ddc:	4770      	bx	lr
24053dde:	bf00      	nop
24053de0:	20000620 	.word	0x20000620

24053de4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
24053de4:	b580      	push	{r7, lr}
24053de6:	b084      	sub	sp, #16
24053de8:	af00      	add	r7, sp, #0
24053dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
24053dec:	f7ff ffee 	bl	24053dcc <HAL_GetTick>
24053df0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
24053df2:	687b      	ldr	r3, [r7, #4]
24053df4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
24053df6:	68fb      	ldr	r3, [r7, #12]
24053df8:	f1b3 3fff 	cmp.w	r3, #4294967295
24053dfc:	d005      	beq.n	24053e0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
24053dfe:	4b0a      	ldr	r3, [pc, #40]	; (24053e28 <HAL_Delay+0x44>)
24053e00:	781b      	ldrb	r3, [r3, #0]
24053e02:	461a      	mov	r2, r3
24053e04:	68fb      	ldr	r3, [r7, #12]
24053e06:	4413      	add	r3, r2
24053e08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
24053e0a:	bf00      	nop
24053e0c:	f7ff ffde 	bl	24053dcc <HAL_GetTick>
24053e10:	4602      	mov	r2, r0
24053e12:	68bb      	ldr	r3, [r7, #8]
24053e14:	1ad3      	subs	r3, r2, r3
24053e16:	68fa      	ldr	r2, [r7, #12]
24053e18:	429a      	cmp	r2, r3
24053e1a:	d8f7      	bhi.n	24053e0c <HAL_Delay+0x28>
  {
  }
}
24053e1c:	bf00      	nop
24053e1e:	bf00      	nop
24053e20:	3710      	adds	r7, #16
24053e22:	46bd      	mov	sp, r7
24053e24:	bd80      	pop	{r7, pc}
24053e26:	bf00      	nop
24053e28:	20000050 	.word	0x20000050

24053e2c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
24053e2c:	b480      	push	{r7}
24053e2e:	b083      	sub	sp, #12
24053e30:	af00      	add	r7, sp, #0
24053e32:	6078      	str	r0, [r7, #4]
24053e34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
24053e36:	687b      	ldr	r3, [r7, #4]
24053e38:	689b      	ldr	r3, [r3, #8]
24053e3a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
24053e3e:	683b      	ldr	r3, [r7, #0]
24053e40:	431a      	orrs	r2, r3
24053e42:	687b      	ldr	r3, [r7, #4]
24053e44:	609a      	str	r2, [r3, #8]
}
24053e46:	bf00      	nop
24053e48:	370c      	adds	r7, #12
24053e4a:	46bd      	mov	sp, r7
24053e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
24053e50:	4770      	bx	lr

24053e52 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
24053e52:	b480      	push	{r7}
24053e54:	b083      	sub	sp, #12
24053e56:	af00      	add	r7, sp, #0
24053e58:	6078      	str	r0, [r7, #4]
24053e5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
24053e5c:	687b      	ldr	r3, [r7, #4]
24053e5e:	689b      	ldr	r3, [r3, #8]
24053e60:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
24053e64:	683b      	ldr	r3, [r7, #0]
24053e66:	431a      	orrs	r2, r3
24053e68:	687b      	ldr	r3, [r7, #4]
24053e6a:	609a      	str	r2, [r3, #8]
}
24053e6c:	bf00      	nop
24053e6e:	370c      	adds	r7, #12
24053e70:	46bd      	mov	sp, r7
24053e72:	f85d 7b04 	ldr.w	r7, [sp], #4
24053e76:	4770      	bx	lr

24053e78 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
24053e78:	b480      	push	{r7}
24053e7a:	b083      	sub	sp, #12
24053e7c:	af00      	add	r7, sp, #0
24053e7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
24053e80:	687b      	ldr	r3, [r7, #4]
24053e82:	689b      	ldr	r3, [r3, #8]
24053e84:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
24053e88:	4618      	mov	r0, r3
24053e8a:	370c      	adds	r7, #12
24053e8c:	46bd      	mov	sp, r7
24053e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
24053e92:	4770      	bx	lr

24053e94 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
24053e94:	b480      	push	{r7}
24053e96:	b087      	sub	sp, #28
24053e98:	af00      	add	r7, sp, #0
24053e9a:	60f8      	str	r0, [r7, #12]
24053e9c:	60b9      	str	r1, [r7, #8]
24053e9e:	607a      	str	r2, [r7, #4]
24053ea0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
24053ea2:	68fb      	ldr	r3, [r7, #12]
24053ea4:	3360      	adds	r3, #96	; 0x60
24053ea6:	461a      	mov	r2, r3
24053ea8:	68bb      	ldr	r3, [r7, #8]
24053eaa:	009b      	lsls	r3, r3, #2
24053eac:	4413      	add	r3, r2
24053eae:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
24053eb0:	697b      	ldr	r3, [r7, #20]
24053eb2:	681b      	ldr	r3, [r3, #0]
24053eb4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
24053eb8:	687b      	ldr	r3, [r7, #4]
24053eba:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
24053ebe:	683b      	ldr	r3, [r7, #0]
24053ec0:	430b      	orrs	r3, r1
24053ec2:	431a      	orrs	r2, r3
24053ec4:	697b      	ldr	r3, [r7, #20]
24053ec6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
24053ec8:	bf00      	nop
24053eca:	371c      	adds	r7, #28
24053ecc:	46bd      	mov	sp, r7
24053ece:	f85d 7b04 	ldr.w	r7, [sp], #4
24053ed2:	4770      	bx	lr

24053ed4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
24053ed4:	b480      	push	{r7}
24053ed6:	b085      	sub	sp, #20
24053ed8:	af00      	add	r7, sp, #0
24053eda:	60f8      	str	r0, [r7, #12]
24053edc:	60b9      	str	r1, [r7, #8]
24053ede:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
24053ee0:	68fb      	ldr	r3, [r7, #12]
24053ee2:	691b      	ldr	r3, [r3, #16]
24053ee4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
24053ee8:	68bb      	ldr	r3, [r7, #8]
24053eea:	f003 031f 	and.w	r3, r3, #31
24053eee:	6879      	ldr	r1, [r7, #4]
24053ef0:	fa01 f303 	lsl.w	r3, r1, r3
24053ef4:	431a      	orrs	r2, r3
24053ef6:	68fb      	ldr	r3, [r7, #12]
24053ef8:	611a      	str	r2, [r3, #16]
}
24053efa:	bf00      	nop
24053efc:	3714      	adds	r7, #20
24053efe:	46bd      	mov	sp, r7
24053f00:	f85d 7b04 	ldr.w	r7, [sp], #4
24053f04:	4770      	bx	lr

24053f06 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
24053f06:	b480      	push	{r7}
24053f08:	b087      	sub	sp, #28
24053f0a:	af00      	add	r7, sp, #0
24053f0c:	60f8      	str	r0, [r7, #12]
24053f0e:	60b9      	str	r1, [r7, #8]
24053f10:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
24053f12:	68fb      	ldr	r3, [r7, #12]
24053f14:	3360      	adds	r3, #96	; 0x60
24053f16:	461a      	mov	r2, r3
24053f18:	68bb      	ldr	r3, [r7, #8]
24053f1a:	009b      	lsls	r3, r3, #2
24053f1c:	4413      	add	r3, r2
24053f1e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
24053f20:	697b      	ldr	r3, [r7, #20]
24053f22:	681b      	ldr	r3, [r3, #0]
24053f24:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
24053f28:	687b      	ldr	r3, [r7, #4]
24053f2a:	431a      	orrs	r2, r3
24053f2c:	697b      	ldr	r3, [r7, #20]
24053f2e:	601a      	str	r2, [r3, #0]
  }
}
24053f30:	bf00      	nop
24053f32:	371c      	adds	r7, #28
24053f34:	46bd      	mov	sp, r7
24053f36:	f85d 7b04 	ldr.w	r7, [sp], #4
24053f3a:	4770      	bx	lr

24053f3c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
24053f3c:	b480      	push	{r7}
24053f3e:	b083      	sub	sp, #12
24053f40:	af00      	add	r7, sp, #0
24053f42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
24053f44:	687b      	ldr	r3, [r7, #4]
24053f46:	68db      	ldr	r3, [r3, #12]
24053f48:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
24053f4c:	2b00      	cmp	r3, #0
24053f4e:	d101      	bne.n	24053f54 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
24053f50:	2301      	movs	r3, #1
24053f52:	e000      	b.n	24053f56 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
24053f54:	2300      	movs	r3, #0
}
24053f56:	4618      	mov	r0, r3
24053f58:	370c      	adds	r7, #12
24053f5a:	46bd      	mov	sp, r7
24053f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
24053f60:	4770      	bx	lr

24053f62 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
24053f62:	b480      	push	{r7}
24053f64:	b087      	sub	sp, #28
24053f66:	af00      	add	r7, sp, #0
24053f68:	60f8      	str	r0, [r7, #12]
24053f6a:	60b9      	str	r1, [r7, #8]
24053f6c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
24053f6e:	68fb      	ldr	r3, [r7, #12]
24053f70:	3330      	adds	r3, #48	; 0x30
24053f72:	461a      	mov	r2, r3
24053f74:	68bb      	ldr	r3, [r7, #8]
24053f76:	0a1b      	lsrs	r3, r3, #8
24053f78:	009b      	lsls	r3, r3, #2
24053f7a:	f003 030c 	and.w	r3, r3, #12
24053f7e:	4413      	add	r3, r2
24053f80:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
24053f82:	697b      	ldr	r3, [r7, #20]
24053f84:	681a      	ldr	r2, [r3, #0]
24053f86:	68bb      	ldr	r3, [r7, #8]
24053f88:	f003 031f 	and.w	r3, r3, #31
24053f8c:	211f      	movs	r1, #31
24053f8e:	fa01 f303 	lsl.w	r3, r1, r3
24053f92:	43db      	mvns	r3, r3
24053f94:	401a      	ands	r2, r3
24053f96:	687b      	ldr	r3, [r7, #4]
24053f98:	0e9b      	lsrs	r3, r3, #26
24053f9a:	f003 011f 	and.w	r1, r3, #31
24053f9e:	68bb      	ldr	r3, [r7, #8]
24053fa0:	f003 031f 	and.w	r3, r3, #31
24053fa4:	fa01 f303 	lsl.w	r3, r1, r3
24053fa8:	431a      	orrs	r2, r3
24053faa:	697b      	ldr	r3, [r7, #20]
24053fac:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
24053fae:	bf00      	nop
24053fb0:	371c      	adds	r7, #28
24053fb2:	46bd      	mov	sp, r7
24053fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
24053fb8:	4770      	bx	lr

24053fba <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
24053fba:	b480      	push	{r7}
24053fbc:	b083      	sub	sp, #12
24053fbe:	af00      	add	r7, sp, #0
24053fc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
24053fc2:	687b      	ldr	r3, [r7, #4]
24053fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24053fc6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
24053fca:	2b00      	cmp	r3, #0
24053fcc:	d101      	bne.n	24053fd2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
24053fce:	2301      	movs	r3, #1
24053fd0:	e000      	b.n	24053fd4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
24053fd2:	2300      	movs	r3, #0
}
24053fd4:	4618      	mov	r0, r3
24053fd6:	370c      	adds	r7, #12
24053fd8:	46bd      	mov	sp, r7
24053fda:	f85d 7b04 	ldr.w	r7, [sp], #4
24053fde:	4770      	bx	lr

24053fe0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
24053fe0:	b480      	push	{r7}
24053fe2:	b087      	sub	sp, #28
24053fe4:	af00      	add	r7, sp, #0
24053fe6:	60f8      	str	r0, [r7, #12]
24053fe8:	60b9      	str	r1, [r7, #8]
24053fea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
24053fec:	68fb      	ldr	r3, [r7, #12]
24053fee:	3314      	adds	r3, #20
24053ff0:	461a      	mov	r2, r3
24053ff2:	68bb      	ldr	r3, [r7, #8]
24053ff4:	0e5b      	lsrs	r3, r3, #25
24053ff6:	009b      	lsls	r3, r3, #2
24053ff8:	f003 0304 	and.w	r3, r3, #4
24053ffc:	4413      	add	r3, r2
24053ffe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
24054000:	697b      	ldr	r3, [r7, #20]
24054002:	681a      	ldr	r2, [r3, #0]
24054004:	68bb      	ldr	r3, [r7, #8]
24054006:	0d1b      	lsrs	r3, r3, #20
24054008:	f003 031f 	and.w	r3, r3, #31
2405400c:	2107      	movs	r1, #7
2405400e:	fa01 f303 	lsl.w	r3, r1, r3
24054012:	43db      	mvns	r3, r3
24054014:	401a      	ands	r2, r3
24054016:	68bb      	ldr	r3, [r7, #8]
24054018:	0d1b      	lsrs	r3, r3, #20
2405401a:	f003 031f 	and.w	r3, r3, #31
2405401e:	6879      	ldr	r1, [r7, #4]
24054020:	fa01 f303 	lsl.w	r3, r1, r3
24054024:	431a      	orrs	r2, r3
24054026:	697b      	ldr	r3, [r7, #20]
24054028:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
2405402a:	bf00      	nop
2405402c:	371c      	adds	r7, #28
2405402e:	46bd      	mov	sp, r7
24054030:	f85d 7b04 	ldr.w	r7, [sp], #4
24054034:	4770      	bx	lr
	...

24054038 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
24054038:	b480      	push	{r7}
2405403a:	b085      	sub	sp, #20
2405403c:	af00      	add	r7, sp, #0
2405403e:	60f8      	str	r0, [r7, #12]
24054040:	60b9      	str	r1, [r7, #8]
24054042:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
24054044:	68fb      	ldr	r3, [r7, #12]
24054046:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
2405404a:	68bb      	ldr	r3, [r7, #8]
2405404c:	f3c3 0313 	ubfx	r3, r3, #0, #20
24054050:	43db      	mvns	r3, r3
24054052:	401a      	ands	r2, r3
24054054:	687b      	ldr	r3, [r7, #4]
24054056:	f003 0318 	and.w	r3, r3, #24
2405405a:	4908      	ldr	r1, [pc, #32]	; (2405407c <LL_ADC_SetChannelSingleDiff+0x44>)
2405405c:	40d9      	lsrs	r1, r3
2405405e:	68bb      	ldr	r3, [r7, #8]
24054060:	400b      	ands	r3, r1
24054062:	f3c3 0313 	ubfx	r3, r3, #0, #20
24054066:	431a      	orrs	r2, r3
24054068:	68fb      	ldr	r3, [r7, #12]
2405406a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
2405406e:	bf00      	nop
24054070:	3714      	adds	r7, #20
24054072:	46bd      	mov	sp, r7
24054074:	f85d 7b04 	ldr.w	r7, [sp], #4
24054078:	4770      	bx	lr
2405407a:	bf00      	nop
2405407c:	000fffff 	.word	0x000fffff

24054080 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
24054080:	b480      	push	{r7}
24054082:	b083      	sub	sp, #12
24054084:	af00      	add	r7, sp, #0
24054086:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
24054088:	687b      	ldr	r3, [r7, #4]
2405408a:	689b      	ldr	r3, [r3, #8]
2405408c:	f003 031f 	and.w	r3, r3, #31
}
24054090:	4618      	mov	r0, r3
24054092:	370c      	adds	r7, #12
24054094:	46bd      	mov	sp, r7
24054096:	f85d 7b04 	ldr.w	r7, [sp], #4
2405409a:	4770      	bx	lr

2405409c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
2405409c:	b480      	push	{r7}
2405409e:	b083      	sub	sp, #12
240540a0:	af00      	add	r7, sp, #0
240540a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
240540a4:	687b      	ldr	r3, [r7, #4]
240540a6:	689b      	ldr	r3, [r3, #8]
240540a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
240540ac:	4618      	mov	r0, r3
240540ae:	370c      	adds	r7, #12
240540b0:	46bd      	mov	sp, r7
240540b2:	f85d 7b04 	ldr.w	r7, [sp], #4
240540b6:	4770      	bx	lr

240540b8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
240540b8:	b480      	push	{r7}
240540ba:	b083      	sub	sp, #12
240540bc:	af00      	add	r7, sp, #0
240540be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
240540c0:	687b      	ldr	r3, [r7, #4]
240540c2:	689a      	ldr	r2, [r3, #8]
240540c4:	4b04      	ldr	r3, [pc, #16]	; (240540d8 <LL_ADC_DisableDeepPowerDown+0x20>)
240540c6:	4013      	ands	r3, r2
240540c8:	687a      	ldr	r2, [r7, #4]
240540ca:	6093      	str	r3, [r2, #8]
}
240540cc:	bf00      	nop
240540ce:	370c      	adds	r7, #12
240540d0:	46bd      	mov	sp, r7
240540d2:	f85d 7b04 	ldr.w	r7, [sp], #4
240540d6:	4770      	bx	lr
240540d8:	5fffffc0 	.word	0x5fffffc0

240540dc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
240540dc:	b480      	push	{r7}
240540de:	b083      	sub	sp, #12
240540e0:	af00      	add	r7, sp, #0
240540e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
240540e4:	687b      	ldr	r3, [r7, #4]
240540e6:	689b      	ldr	r3, [r3, #8]
240540e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
240540ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
240540f0:	d101      	bne.n	240540f6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
240540f2:	2301      	movs	r3, #1
240540f4:	e000      	b.n	240540f8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
240540f6:	2300      	movs	r3, #0
}
240540f8:	4618      	mov	r0, r3
240540fa:	370c      	adds	r7, #12
240540fc:	46bd      	mov	sp, r7
240540fe:	f85d 7b04 	ldr.w	r7, [sp], #4
24054102:	4770      	bx	lr

24054104 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
24054104:	b480      	push	{r7}
24054106:	b083      	sub	sp, #12
24054108:	af00      	add	r7, sp, #0
2405410a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
2405410c:	687b      	ldr	r3, [r7, #4]
2405410e:	689a      	ldr	r2, [r3, #8]
24054110:	4b05      	ldr	r3, [pc, #20]	; (24054128 <LL_ADC_EnableInternalRegulator+0x24>)
24054112:	4013      	ands	r3, r2
24054114:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
24054118:	687b      	ldr	r3, [r7, #4]
2405411a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
2405411c:	bf00      	nop
2405411e:	370c      	adds	r7, #12
24054120:	46bd      	mov	sp, r7
24054122:	f85d 7b04 	ldr.w	r7, [sp], #4
24054126:	4770      	bx	lr
24054128:	6fffffc0 	.word	0x6fffffc0

2405412c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
2405412c:	b480      	push	{r7}
2405412e:	b083      	sub	sp, #12
24054130:	af00      	add	r7, sp, #0
24054132:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
24054134:	687b      	ldr	r3, [r7, #4]
24054136:	689b      	ldr	r3, [r3, #8]
24054138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2405413c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24054140:	d101      	bne.n	24054146 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
24054142:	2301      	movs	r3, #1
24054144:	e000      	b.n	24054148 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
24054146:	2300      	movs	r3, #0
}
24054148:	4618      	mov	r0, r3
2405414a:	370c      	adds	r7, #12
2405414c:	46bd      	mov	sp, r7
2405414e:	f85d 7b04 	ldr.w	r7, [sp], #4
24054152:	4770      	bx	lr

24054154 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
24054154:	b480      	push	{r7}
24054156:	b083      	sub	sp, #12
24054158:	af00      	add	r7, sp, #0
2405415a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
2405415c:	687b      	ldr	r3, [r7, #4]
2405415e:	689a      	ldr	r2, [r3, #8]
24054160:	4b05      	ldr	r3, [pc, #20]	; (24054178 <LL_ADC_Enable+0x24>)
24054162:	4013      	ands	r3, r2
24054164:	f043 0201 	orr.w	r2, r3, #1
24054168:	687b      	ldr	r3, [r7, #4]
2405416a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
2405416c:	bf00      	nop
2405416e:	370c      	adds	r7, #12
24054170:	46bd      	mov	sp, r7
24054172:	f85d 7b04 	ldr.w	r7, [sp], #4
24054176:	4770      	bx	lr
24054178:	7fffffc0 	.word	0x7fffffc0

2405417c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
2405417c:	b480      	push	{r7}
2405417e:	b083      	sub	sp, #12
24054180:	af00      	add	r7, sp, #0
24054182:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
24054184:	687b      	ldr	r3, [r7, #4]
24054186:	689a      	ldr	r2, [r3, #8]
24054188:	4b05      	ldr	r3, [pc, #20]	; (240541a0 <LL_ADC_Disable+0x24>)
2405418a:	4013      	ands	r3, r2
2405418c:	f043 0202 	orr.w	r2, r3, #2
24054190:	687b      	ldr	r3, [r7, #4]
24054192:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
24054194:	bf00      	nop
24054196:	370c      	adds	r7, #12
24054198:	46bd      	mov	sp, r7
2405419a:	f85d 7b04 	ldr.w	r7, [sp], #4
2405419e:	4770      	bx	lr
240541a0:	7fffffc0 	.word	0x7fffffc0

240541a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
240541a4:	b480      	push	{r7}
240541a6:	b083      	sub	sp, #12
240541a8:	af00      	add	r7, sp, #0
240541aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
240541ac:	687b      	ldr	r3, [r7, #4]
240541ae:	689b      	ldr	r3, [r3, #8]
240541b0:	f003 0301 	and.w	r3, r3, #1
240541b4:	2b01      	cmp	r3, #1
240541b6:	d101      	bne.n	240541bc <LL_ADC_IsEnabled+0x18>
240541b8:	2301      	movs	r3, #1
240541ba:	e000      	b.n	240541be <LL_ADC_IsEnabled+0x1a>
240541bc:	2300      	movs	r3, #0
}
240541be:	4618      	mov	r0, r3
240541c0:	370c      	adds	r7, #12
240541c2:	46bd      	mov	sp, r7
240541c4:	f85d 7b04 	ldr.w	r7, [sp], #4
240541c8:	4770      	bx	lr

240541ca <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
240541ca:	b480      	push	{r7}
240541cc:	b083      	sub	sp, #12
240541ce:	af00      	add	r7, sp, #0
240541d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
240541d2:	687b      	ldr	r3, [r7, #4]
240541d4:	689b      	ldr	r3, [r3, #8]
240541d6:	f003 0302 	and.w	r3, r3, #2
240541da:	2b02      	cmp	r3, #2
240541dc:	d101      	bne.n	240541e2 <LL_ADC_IsDisableOngoing+0x18>
240541de:	2301      	movs	r3, #1
240541e0:	e000      	b.n	240541e4 <LL_ADC_IsDisableOngoing+0x1a>
240541e2:	2300      	movs	r3, #0
}
240541e4:	4618      	mov	r0, r3
240541e6:	370c      	adds	r7, #12
240541e8:	46bd      	mov	sp, r7
240541ea:	f85d 7b04 	ldr.w	r7, [sp], #4
240541ee:	4770      	bx	lr

240541f0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
240541f0:	b480      	push	{r7}
240541f2:	b083      	sub	sp, #12
240541f4:	af00      	add	r7, sp, #0
240541f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
240541f8:	687b      	ldr	r3, [r7, #4]
240541fa:	689a      	ldr	r2, [r3, #8]
240541fc:	4b05      	ldr	r3, [pc, #20]	; (24054214 <LL_ADC_REG_StartConversion+0x24>)
240541fe:	4013      	ands	r3, r2
24054200:	f043 0204 	orr.w	r2, r3, #4
24054204:	687b      	ldr	r3, [r7, #4]
24054206:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
24054208:	bf00      	nop
2405420a:	370c      	adds	r7, #12
2405420c:	46bd      	mov	sp, r7
2405420e:	f85d 7b04 	ldr.w	r7, [sp], #4
24054212:	4770      	bx	lr
24054214:	7fffffc0 	.word	0x7fffffc0

24054218 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
24054218:	b480      	push	{r7}
2405421a:	b083      	sub	sp, #12
2405421c:	af00      	add	r7, sp, #0
2405421e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
24054220:	687b      	ldr	r3, [r7, #4]
24054222:	689a      	ldr	r2, [r3, #8]
24054224:	4b05      	ldr	r3, [pc, #20]	; (2405423c <LL_ADC_REG_StopConversion+0x24>)
24054226:	4013      	ands	r3, r2
24054228:	f043 0210 	orr.w	r2, r3, #16
2405422c:	687b      	ldr	r3, [r7, #4]
2405422e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
24054230:	bf00      	nop
24054232:	370c      	adds	r7, #12
24054234:	46bd      	mov	sp, r7
24054236:	f85d 7b04 	ldr.w	r7, [sp], #4
2405423a:	4770      	bx	lr
2405423c:	7fffffc0 	.word	0x7fffffc0

24054240 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
24054240:	b480      	push	{r7}
24054242:	b083      	sub	sp, #12
24054244:	af00      	add	r7, sp, #0
24054246:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
24054248:	687b      	ldr	r3, [r7, #4]
2405424a:	689b      	ldr	r3, [r3, #8]
2405424c:	f003 0304 	and.w	r3, r3, #4
24054250:	2b04      	cmp	r3, #4
24054252:	d101      	bne.n	24054258 <LL_ADC_REG_IsConversionOngoing+0x18>
24054254:	2301      	movs	r3, #1
24054256:	e000      	b.n	2405425a <LL_ADC_REG_IsConversionOngoing+0x1a>
24054258:	2300      	movs	r3, #0
}
2405425a:	4618      	mov	r0, r3
2405425c:	370c      	adds	r7, #12
2405425e:	46bd      	mov	sp, r7
24054260:	f85d 7b04 	ldr.w	r7, [sp], #4
24054264:	4770      	bx	lr
	...

24054268 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
24054268:	b480      	push	{r7}
2405426a:	b083      	sub	sp, #12
2405426c:	af00      	add	r7, sp, #0
2405426e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
24054270:	687b      	ldr	r3, [r7, #4]
24054272:	689a      	ldr	r2, [r3, #8]
24054274:	4b05      	ldr	r3, [pc, #20]	; (2405428c <LL_ADC_INJ_StopConversion+0x24>)
24054276:	4013      	ands	r3, r2
24054278:	f043 0220 	orr.w	r2, r3, #32
2405427c:	687b      	ldr	r3, [r7, #4]
2405427e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
24054280:	bf00      	nop
24054282:	370c      	adds	r7, #12
24054284:	46bd      	mov	sp, r7
24054286:	f85d 7b04 	ldr.w	r7, [sp], #4
2405428a:	4770      	bx	lr
2405428c:	7fffffc0 	.word	0x7fffffc0

24054290 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
24054290:	b480      	push	{r7}
24054292:	b083      	sub	sp, #12
24054294:	af00      	add	r7, sp, #0
24054296:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
24054298:	687b      	ldr	r3, [r7, #4]
2405429a:	689b      	ldr	r3, [r3, #8]
2405429c:	f003 0308 	and.w	r3, r3, #8
240542a0:	2b08      	cmp	r3, #8
240542a2:	d101      	bne.n	240542a8 <LL_ADC_INJ_IsConversionOngoing+0x18>
240542a4:	2301      	movs	r3, #1
240542a6:	e000      	b.n	240542aa <LL_ADC_INJ_IsConversionOngoing+0x1a>
240542a8:	2300      	movs	r3, #0
}
240542aa:	4618      	mov	r0, r3
240542ac:	370c      	adds	r7, #12
240542ae:	46bd      	mov	sp, r7
240542b0:	f85d 7b04 	ldr.w	r7, [sp], #4
240542b4:	4770      	bx	lr
	...

240542b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
240542b8:	b590      	push	{r4, r7, lr}
240542ba:	b089      	sub	sp, #36	; 0x24
240542bc:	af00      	add	r7, sp, #0
240542be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
240542c0:	2300      	movs	r3, #0
240542c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
240542c4:	2300      	movs	r3, #0
240542c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
240542c8:	687b      	ldr	r3, [r7, #4]
240542ca:	2b00      	cmp	r3, #0
240542cc:	d101      	bne.n	240542d2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
240542ce:	2301      	movs	r3, #1
240542d0:	e138      	b.n	24054544 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
240542d2:	687b      	ldr	r3, [r7, #4]
240542d4:	68db      	ldr	r3, [r3, #12]
240542d6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
240542d8:	687b      	ldr	r3, [r7, #4]
240542da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240542dc:	2b00      	cmp	r3, #0
240542de:	d109      	bne.n	240542f4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
240542e0:	6878      	ldr	r0, [r7, #4]
240542e2:	f7fe fe35 	bl	24052f50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
240542e6:	687b      	ldr	r3, [r7, #4]
240542e8:	2200      	movs	r2, #0
240542ea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
240542ec:	687b      	ldr	r3, [r7, #4]
240542ee:	2200      	movs	r2, #0
240542f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
240542f4:	687b      	ldr	r3, [r7, #4]
240542f6:	681b      	ldr	r3, [r3, #0]
240542f8:	4618      	mov	r0, r3
240542fa:	f7ff feef 	bl	240540dc <LL_ADC_IsDeepPowerDownEnabled>
240542fe:	4603      	mov	r3, r0
24054300:	2b00      	cmp	r3, #0
24054302:	d004      	beq.n	2405430e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
24054304:	687b      	ldr	r3, [r7, #4]
24054306:	681b      	ldr	r3, [r3, #0]
24054308:	4618      	mov	r0, r3
2405430a:	f7ff fed5 	bl	240540b8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
2405430e:	687b      	ldr	r3, [r7, #4]
24054310:	681b      	ldr	r3, [r3, #0]
24054312:	4618      	mov	r0, r3
24054314:	f7ff ff0a 	bl	2405412c <LL_ADC_IsInternalRegulatorEnabled>
24054318:	4603      	mov	r3, r0
2405431a:	2b00      	cmp	r3, #0
2405431c:	d114      	bne.n	24054348 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
2405431e:	687b      	ldr	r3, [r7, #4]
24054320:	681b      	ldr	r3, [r3, #0]
24054322:	4618      	mov	r0, r3
24054324:	f7ff feee 	bl	24054104 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
24054328:	4b88      	ldr	r3, [pc, #544]	; (2405454c <HAL_ADC_Init+0x294>)
2405432a:	681b      	ldr	r3, [r3, #0]
2405432c:	099b      	lsrs	r3, r3, #6
2405432e:	4a88      	ldr	r2, [pc, #544]	; (24054550 <HAL_ADC_Init+0x298>)
24054330:	fba2 2303 	umull	r2, r3, r2, r3
24054334:	099b      	lsrs	r3, r3, #6
24054336:	3301      	adds	r3, #1
24054338:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
2405433a:	e002      	b.n	24054342 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
2405433c:	68bb      	ldr	r3, [r7, #8]
2405433e:	3b01      	subs	r3, #1
24054340:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
24054342:	68bb      	ldr	r3, [r7, #8]
24054344:	2b00      	cmp	r3, #0
24054346:	d1f9      	bne.n	2405433c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
24054348:	687b      	ldr	r3, [r7, #4]
2405434a:	681b      	ldr	r3, [r3, #0]
2405434c:	4618      	mov	r0, r3
2405434e:	f7ff feed 	bl	2405412c <LL_ADC_IsInternalRegulatorEnabled>
24054352:	4603      	mov	r3, r0
24054354:	2b00      	cmp	r3, #0
24054356:	d10d      	bne.n	24054374 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
24054358:	687b      	ldr	r3, [r7, #4]
2405435a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405435c:	f043 0210 	orr.w	r2, r3, #16
24054360:	687b      	ldr	r3, [r7, #4]
24054362:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
24054364:	687b      	ldr	r3, [r7, #4]
24054366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24054368:	f043 0201 	orr.w	r2, r3, #1
2405436c:	687b      	ldr	r3, [r7, #4]
2405436e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
24054370:	2301      	movs	r3, #1
24054372:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
24054374:	687b      	ldr	r3, [r7, #4]
24054376:	681b      	ldr	r3, [r3, #0]
24054378:	4618      	mov	r0, r3
2405437a:	f7ff ff61 	bl	24054240 <LL_ADC_REG_IsConversionOngoing>
2405437e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
24054380:	687b      	ldr	r3, [r7, #4]
24054382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054384:	f003 0310 	and.w	r3, r3, #16
24054388:	2b00      	cmp	r3, #0
2405438a:	f040 80d2 	bne.w	24054532 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
2405438e:	697b      	ldr	r3, [r7, #20]
24054390:	2b00      	cmp	r3, #0
24054392:	f040 80ce 	bne.w	24054532 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
24054396:	687b      	ldr	r3, [r7, #4]
24054398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405439a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
2405439e:	f043 0202 	orr.w	r2, r3, #2
240543a2:	687b      	ldr	r3, [r7, #4]
240543a4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
240543a6:	687b      	ldr	r3, [r7, #4]
240543a8:	681b      	ldr	r3, [r3, #0]
240543aa:	4618      	mov	r0, r3
240543ac:	f7ff fefa 	bl	240541a4 <LL_ADC_IsEnabled>
240543b0:	4603      	mov	r3, r0
240543b2:	2b00      	cmp	r3, #0
240543b4:	d110      	bne.n	240543d8 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
240543b6:	4867      	ldr	r0, [pc, #412]	; (24054554 <HAL_ADC_Init+0x29c>)
240543b8:	f7ff fef4 	bl	240541a4 <LL_ADC_IsEnabled>
240543bc:	4604      	mov	r4, r0
240543be:	4866      	ldr	r0, [pc, #408]	; (24054558 <HAL_ADC_Init+0x2a0>)
240543c0:	f7ff fef0 	bl	240541a4 <LL_ADC_IsEnabled>
240543c4:	4603      	mov	r3, r0
240543c6:	4323      	orrs	r3, r4
240543c8:	2b00      	cmp	r3, #0
240543ca:	d105      	bne.n	240543d8 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
240543cc:	687b      	ldr	r3, [r7, #4]
240543ce:	685b      	ldr	r3, [r3, #4]
240543d0:	4619      	mov	r1, r3
240543d2:	4862      	ldr	r0, [pc, #392]	; (2405455c <HAL_ADC_Init+0x2a4>)
240543d4:	f7ff fd2a 	bl	24053e2c <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
240543d8:	687b      	ldr	r3, [r7, #4]
240543da:	7d5b      	ldrb	r3, [r3, #21]
240543dc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
240543de:	687b      	ldr	r3, [r7, #4]
240543e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
240543e2:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
240543e4:	687b      	ldr	r3, [r7, #4]
240543e6:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
240543e8:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
240543ea:	687b      	ldr	r3, [r7, #4]
240543ec:	7f1b      	ldrb	r3, [r3, #28]
240543ee:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
240543f0:	4313      	orrs	r3, r2
240543f2:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
240543f4:	687b      	ldr	r3, [r7, #4]
240543f6:	7f1b      	ldrb	r3, [r3, #28]
240543f8:	2b01      	cmp	r3, #1
240543fa:	d106      	bne.n	2405440a <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
240543fc:	687b      	ldr	r3, [r7, #4]
240543fe:	6a1b      	ldr	r3, [r3, #32]
24054400:	3b01      	subs	r3, #1
24054402:	045b      	lsls	r3, r3, #17
24054404:	69ba      	ldr	r2, [r7, #24]
24054406:	4313      	orrs	r3, r2
24054408:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
2405440a:	687b      	ldr	r3, [r7, #4]
2405440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2405440e:	2b00      	cmp	r3, #0
24054410:	d009      	beq.n	24054426 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
24054412:	687b      	ldr	r3, [r7, #4]
24054414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24054416:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
2405441a:	687b      	ldr	r3, [r7, #4]
2405441c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405441e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
24054420:	69ba      	ldr	r2, [r7, #24]
24054422:	4313      	orrs	r3, r2
24054424:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
24054426:	687b      	ldr	r3, [r7, #4]
24054428:	681b      	ldr	r3, [r3, #0]
2405442a:	68da      	ldr	r2, [r3, #12]
2405442c:	4b4c      	ldr	r3, [pc, #304]	; (24054560 <HAL_ADC_Init+0x2a8>)
2405442e:	4013      	ands	r3, r2
24054430:	687a      	ldr	r2, [r7, #4]
24054432:	6812      	ldr	r2, [r2, #0]
24054434:	69b9      	ldr	r1, [r7, #24]
24054436:	430b      	orrs	r3, r1
24054438:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
2405443a:	687b      	ldr	r3, [r7, #4]
2405443c:	681b      	ldr	r3, [r3, #0]
2405443e:	4618      	mov	r0, r3
24054440:	f7ff fefe 	bl	24054240 <LL_ADC_REG_IsConversionOngoing>
24054444:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
24054446:	687b      	ldr	r3, [r7, #4]
24054448:	681b      	ldr	r3, [r3, #0]
2405444a:	4618      	mov	r0, r3
2405444c:	f7ff ff20 	bl	24054290 <LL_ADC_INJ_IsConversionOngoing>
24054450:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
24054452:	693b      	ldr	r3, [r7, #16]
24054454:	2b00      	cmp	r3, #0
24054456:	d14a      	bne.n	240544ee <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
24054458:	68fb      	ldr	r3, [r7, #12]
2405445a:	2b00      	cmp	r3, #0
2405445c:	d147      	bne.n	240544ee <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
2405445e:	687b      	ldr	r3, [r7, #4]
24054460:	7d1b      	ldrb	r3, [r3, #20]
24054462:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
24054464:	687b      	ldr	r3, [r7, #4]
24054466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
24054468:	4313      	orrs	r3, r2
2405446a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
2405446c:	687b      	ldr	r3, [r7, #4]
2405446e:	681b      	ldr	r3, [r3, #0]
24054470:	68da      	ldr	r2, [r3, #12]
24054472:	4b3c      	ldr	r3, [pc, #240]	; (24054564 <HAL_ADC_Init+0x2ac>)
24054474:	4013      	ands	r3, r2
24054476:	687a      	ldr	r2, [r7, #4]
24054478:	6812      	ldr	r2, [r2, #0]
2405447a:	69b9      	ldr	r1, [r7, #24]
2405447c:	430b      	orrs	r3, r1
2405447e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
24054480:	687b      	ldr	r3, [r7, #4]
24054482:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
24054486:	2b01      	cmp	r3, #1
24054488:	d11b      	bne.n	240544c2 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
2405448a:	687b      	ldr	r3, [r7, #4]
2405448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2405448e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
24054490:	687b      	ldr	r3, [r7, #4]
24054492:	681b      	ldr	r3, [r3, #0]
24054494:	691a      	ldr	r2, [r3, #16]
24054496:	4b34      	ldr	r3, [pc, #208]	; (24054568 <HAL_ADC_Init+0x2b0>)
24054498:	4013      	ands	r3, r2
2405449a:	687a      	ldr	r2, [r7, #4]
2405449c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
2405449e:	3a01      	subs	r2, #1
240544a0:	0411      	lsls	r1, r2, #16
240544a2:	687a      	ldr	r2, [r7, #4]
240544a4:	6c12      	ldr	r2, [r2, #64]	; 0x40
240544a6:	4311      	orrs	r1, r2
240544a8:	687a      	ldr	r2, [r7, #4]
240544aa:	6c52      	ldr	r2, [r2, #68]	; 0x44
240544ac:	4311      	orrs	r1, r2
240544ae:	687a      	ldr	r2, [r7, #4]
240544b0:	6c92      	ldr	r2, [r2, #72]	; 0x48
240544b2:	430a      	orrs	r2, r1
240544b4:	431a      	orrs	r2, r3
240544b6:	687b      	ldr	r3, [r7, #4]
240544b8:	681b      	ldr	r3, [r3, #0]
240544ba:	f042 0201 	orr.w	r2, r2, #1
240544be:	611a      	str	r2, [r3, #16]
240544c0:	e007      	b.n	240544d2 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
240544c2:	687b      	ldr	r3, [r7, #4]
240544c4:	681b      	ldr	r3, [r3, #0]
240544c6:	691a      	ldr	r2, [r3, #16]
240544c8:	687b      	ldr	r3, [r7, #4]
240544ca:	681b      	ldr	r3, [r3, #0]
240544cc:	f022 0201 	bic.w	r2, r2, #1
240544d0:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
240544d2:	687b      	ldr	r3, [r7, #4]
240544d4:	681b      	ldr	r3, [r3, #0]
240544d6:	691b      	ldr	r3, [r3, #16]
240544d8:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
240544dc:	687b      	ldr	r3, [r7, #4]
240544de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
240544e0:	687b      	ldr	r3, [r7, #4]
240544e2:	681b      	ldr	r3, [r3, #0]
240544e4:	430a      	orrs	r2, r1
240544e6:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
240544e8:	6878      	ldr	r0, [r7, #4]
240544ea:	f001 f9f5 	bl	240558d8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
240544ee:	687b      	ldr	r3, [r7, #4]
240544f0:	68db      	ldr	r3, [r3, #12]
240544f2:	2b01      	cmp	r3, #1
240544f4:	d10c      	bne.n	24054510 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
240544f6:	687b      	ldr	r3, [r7, #4]
240544f8:	681b      	ldr	r3, [r3, #0]
240544fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240544fc:	f023 010f 	bic.w	r1, r3, #15
24054500:	687b      	ldr	r3, [r7, #4]
24054502:	699b      	ldr	r3, [r3, #24]
24054504:	1e5a      	subs	r2, r3, #1
24054506:	687b      	ldr	r3, [r7, #4]
24054508:	681b      	ldr	r3, [r3, #0]
2405450a:	430a      	orrs	r2, r1
2405450c:	631a      	str	r2, [r3, #48]	; 0x30
2405450e:	e007      	b.n	24054520 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
24054510:	687b      	ldr	r3, [r7, #4]
24054512:	681b      	ldr	r3, [r3, #0]
24054514:	6b1a      	ldr	r2, [r3, #48]	; 0x30
24054516:	687b      	ldr	r3, [r7, #4]
24054518:	681b      	ldr	r3, [r3, #0]
2405451a:	f022 020f 	bic.w	r2, r2, #15
2405451e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
24054520:	687b      	ldr	r3, [r7, #4]
24054522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054524:	f023 0303 	bic.w	r3, r3, #3
24054528:	f043 0201 	orr.w	r2, r3, #1
2405452c:	687b      	ldr	r3, [r7, #4]
2405452e:	655a      	str	r2, [r3, #84]	; 0x54
24054530:	e007      	b.n	24054542 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
24054532:	687b      	ldr	r3, [r7, #4]
24054534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054536:	f043 0210 	orr.w	r2, r3, #16
2405453a:	687b      	ldr	r3, [r7, #4]
2405453c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
2405453e:	2301      	movs	r3, #1
24054540:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
24054542:	7ffb      	ldrb	r3, [r7, #31]
}
24054544:	4618      	mov	r0, r3
24054546:	3724      	adds	r7, #36	; 0x24
24054548:	46bd      	mov	sp, r7
2405454a:	bd90      	pop	{r4, r7, pc}
2405454c:	20000044 	.word	0x20000044
24054550:	053e2d63 	.word	0x053e2d63
24054554:	40022000 	.word	0x40022000
24054558:	40022100 	.word	0x40022100
2405455c:	40022300 	.word	0x40022300
24054560:	fff0c003 	.word	0xfff0c003
24054564:	ffffbffc 	.word	0xffffbffc
24054568:	fc00f81e 	.word	0xfc00f81e

2405456c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
2405456c:	b580      	push	{r7, lr}
2405456e:	b086      	sub	sp, #24
24054570:	af00      	add	r7, sp, #0
24054572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
24054574:	4856      	ldr	r0, [pc, #344]	; (240546d0 <HAL_ADC_Start+0x164>)
24054576:	f7ff fd83 	bl	24054080 <LL_ADC_GetMultimode>
2405457a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
2405457c:	687b      	ldr	r3, [r7, #4]
2405457e:	681b      	ldr	r3, [r3, #0]
24054580:	4618      	mov	r0, r3
24054582:	f7ff fe5d 	bl	24054240 <LL_ADC_REG_IsConversionOngoing>
24054586:	4603      	mov	r3, r0
24054588:	2b00      	cmp	r3, #0
2405458a:	f040 809a 	bne.w	240546c2 <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
2405458e:	687b      	ldr	r3, [r7, #4]
24054590:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
24054594:	2b01      	cmp	r3, #1
24054596:	d101      	bne.n	2405459c <HAL_ADC_Start+0x30>
24054598:	2302      	movs	r3, #2
2405459a:	e095      	b.n	240546c8 <HAL_ADC_Start+0x15c>
2405459c:	687b      	ldr	r3, [r7, #4]
2405459e:	2201      	movs	r2, #1
240545a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
240545a4:	6878      	ldr	r0, [r7, #4]
240545a6:	f001 f8bb 	bl	24055720 <ADC_Enable>
240545aa:	4603      	mov	r3, r0
240545ac:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
240545ae:	7dfb      	ldrb	r3, [r7, #23]
240545b0:	2b00      	cmp	r3, #0
240545b2:	f040 8081 	bne.w	240546b8 <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
240545b6:	687b      	ldr	r3, [r7, #4]
240545b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
240545ba:	4b46      	ldr	r3, [pc, #280]	; (240546d4 <HAL_ADC_Start+0x168>)
240545bc:	4013      	ands	r3, r2
240545be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
240545c2:	687b      	ldr	r3, [r7, #4]
240545c4:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
240545c6:	687b      	ldr	r3, [r7, #4]
240545c8:	681b      	ldr	r3, [r3, #0]
240545ca:	4a43      	ldr	r2, [pc, #268]	; (240546d8 <HAL_ADC_Start+0x16c>)
240545cc:	4293      	cmp	r3, r2
240545ce:	d002      	beq.n	240545d6 <HAL_ADC_Start+0x6a>
240545d0:	687b      	ldr	r3, [r7, #4]
240545d2:	681b      	ldr	r3, [r3, #0]
240545d4:	e000      	b.n	240545d8 <HAL_ADC_Start+0x6c>
240545d6:	4b41      	ldr	r3, [pc, #260]	; (240546dc <HAL_ADC_Start+0x170>)
240545d8:	687a      	ldr	r2, [r7, #4]
240545da:	6812      	ldr	r2, [r2, #0]
240545dc:	4293      	cmp	r3, r2
240545de:	d002      	beq.n	240545e6 <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
240545e0:	693b      	ldr	r3, [r7, #16]
240545e2:	2b00      	cmp	r3, #0
240545e4:	d105      	bne.n	240545f2 <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
240545e6:	687b      	ldr	r3, [r7, #4]
240545e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240545ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
240545ee:	687b      	ldr	r3, [r7, #4]
240545f0:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
240545f2:	687b      	ldr	r3, [r7, #4]
240545f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240545f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
240545fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
240545fe:	d106      	bne.n	2405460e <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
24054600:	687b      	ldr	r3, [r7, #4]
24054602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24054604:	f023 0206 	bic.w	r2, r3, #6
24054608:	687b      	ldr	r3, [r7, #4]
2405460a:	659a      	str	r2, [r3, #88]	; 0x58
2405460c:	e002      	b.n	24054614 <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
2405460e:	687b      	ldr	r3, [r7, #4]
24054610:	2200      	movs	r2, #0
24054612:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
24054614:	687b      	ldr	r3, [r7, #4]
24054616:	681b      	ldr	r3, [r3, #0]
24054618:	221c      	movs	r2, #28
2405461a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
2405461c:	687b      	ldr	r3, [r7, #4]
2405461e:	2200      	movs	r2, #0
24054620:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
24054624:	687b      	ldr	r3, [r7, #4]
24054626:	681b      	ldr	r3, [r3, #0]
24054628:	4a2b      	ldr	r2, [pc, #172]	; (240546d8 <HAL_ADC_Start+0x16c>)
2405462a:	4293      	cmp	r3, r2
2405462c:	d002      	beq.n	24054634 <HAL_ADC_Start+0xc8>
2405462e:	687b      	ldr	r3, [r7, #4]
24054630:	681b      	ldr	r3, [r3, #0]
24054632:	e000      	b.n	24054636 <HAL_ADC_Start+0xca>
24054634:	4b29      	ldr	r3, [pc, #164]	; (240546dc <HAL_ADC_Start+0x170>)
24054636:	687a      	ldr	r2, [r7, #4]
24054638:	6812      	ldr	r2, [r2, #0]
2405463a:	4293      	cmp	r3, r2
2405463c:	d008      	beq.n	24054650 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
2405463e:	693b      	ldr	r3, [r7, #16]
24054640:	2b00      	cmp	r3, #0
24054642:	d005      	beq.n	24054650 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
24054644:	693b      	ldr	r3, [r7, #16]
24054646:	2b05      	cmp	r3, #5
24054648:	d002      	beq.n	24054650 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
2405464a:	693b      	ldr	r3, [r7, #16]
2405464c:	2b09      	cmp	r3, #9
2405464e:	d114      	bne.n	2405467a <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
24054650:	687b      	ldr	r3, [r7, #4]
24054652:	681b      	ldr	r3, [r3, #0]
24054654:	68db      	ldr	r3, [r3, #12]
24054656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2405465a:	2b00      	cmp	r3, #0
2405465c:	d007      	beq.n	2405466e <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
2405465e:	687b      	ldr	r3, [r7, #4]
24054660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054662:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
24054666:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
2405466a:	687b      	ldr	r3, [r7, #4]
2405466c:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
2405466e:	687b      	ldr	r3, [r7, #4]
24054670:	681b      	ldr	r3, [r3, #0]
24054672:	4618      	mov	r0, r3
24054674:	f7ff fdbc 	bl	240541f0 <LL_ADC_REG_StartConversion>
24054678:	e025      	b.n	240546c6 <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
2405467a:	687b      	ldr	r3, [r7, #4]
2405467c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405467e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
24054682:	687b      	ldr	r3, [r7, #4]
24054684:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
24054686:	687b      	ldr	r3, [r7, #4]
24054688:	681b      	ldr	r3, [r3, #0]
2405468a:	4a13      	ldr	r2, [pc, #76]	; (240546d8 <HAL_ADC_Start+0x16c>)
2405468c:	4293      	cmp	r3, r2
2405468e:	d002      	beq.n	24054696 <HAL_ADC_Start+0x12a>
24054690:	687b      	ldr	r3, [r7, #4]
24054692:	681b      	ldr	r3, [r3, #0]
24054694:	e000      	b.n	24054698 <HAL_ADC_Start+0x12c>
24054696:	4b11      	ldr	r3, [pc, #68]	; (240546dc <HAL_ADC_Start+0x170>)
24054698:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
2405469a:	68fb      	ldr	r3, [r7, #12]
2405469c:	68db      	ldr	r3, [r3, #12]
2405469e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
240546a2:	2b00      	cmp	r3, #0
240546a4:	d00f      	beq.n	240546c6 <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
240546a6:	687b      	ldr	r3, [r7, #4]
240546a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240546aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
240546ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
240546b2:	687b      	ldr	r3, [r7, #4]
240546b4:	655a      	str	r2, [r3, #84]	; 0x54
240546b6:	e006      	b.n	240546c6 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
240546b8:	687b      	ldr	r3, [r7, #4]
240546ba:	2200      	movs	r2, #0
240546bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
240546c0:	e001      	b.n	240546c6 <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
240546c2:	2302      	movs	r3, #2
240546c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
240546c6:	7dfb      	ldrb	r3, [r7, #23]
}
240546c8:	4618      	mov	r0, r3
240546ca:	3718      	adds	r7, #24
240546cc:	46bd      	mov	sp, r7
240546ce:	bd80      	pop	{r7, pc}
240546d0:	40022300 	.word	0x40022300
240546d4:	fffff0fe 	.word	0xfffff0fe
240546d8:	40022100 	.word	0x40022100
240546dc:	40022000 	.word	0x40022000

240546e0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
240546e0:	b580      	push	{r7, lr}
240546e2:	b088      	sub	sp, #32
240546e4:	af00      	add	r7, sp, #0
240546e6:	6078      	str	r0, [r7, #4]
240546e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
240546ea:	4866      	ldr	r0, [pc, #408]	; (24054884 <HAL_ADC_PollForConversion+0x1a4>)
240546ec:	f7ff fcc8 	bl	24054080 <LL_ADC_GetMultimode>
240546f0:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
240546f2:	687b      	ldr	r3, [r7, #4]
240546f4:	691b      	ldr	r3, [r3, #16]
240546f6:	2b08      	cmp	r3, #8
240546f8:	d102      	bne.n	24054700 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
240546fa:	2308      	movs	r3, #8
240546fc:	61fb      	str	r3, [r7, #28]
240546fe:	e02a      	b.n	24054756 <HAL_ADC_PollForConversion+0x76>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
24054700:	697b      	ldr	r3, [r7, #20]
24054702:	2b00      	cmp	r3, #0
24054704:	d005      	beq.n	24054712 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
24054706:	697b      	ldr	r3, [r7, #20]
24054708:	2b05      	cmp	r3, #5
2405470a:	d002      	beq.n	24054712 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
2405470c:	697b      	ldr	r3, [r7, #20]
2405470e:	2b09      	cmp	r3, #9
24054710:	d111      	bne.n	24054736 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
24054712:	687b      	ldr	r3, [r7, #4]
24054714:	681b      	ldr	r3, [r3, #0]
24054716:	68db      	ldr	r3, [r3, #12]
24054718:	f003 0301 	and.w	r3, r3, #1
2405471c:	2b00      	cmp	r3, #0
2405471e:	d007      	beq.n	24054730 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
24054720:	687b      	ldr	r3, [r7, #4]
24054722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054724:	f043 0220 	orr.w	r2, r3, #32
24054728:	687b      	ldr	r3, [r7, #4]
2405472a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
2405472c:	2301      	movs	r3, #1
2405472e:	e0a4      	b.n	2405487a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
24054730:	2304      	movs	r3, #4
24054732:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
24054734:	e00f      	b.n	24054756 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
24054736:	4853      	ldr	r0, [pc, #332]	; (24054884 <HAL_ADC_PollForConversion+0x1a4>)
24054738:	f7ff fcb0 	bl	2405409c <LL_ADC_GetMultiDMATransfer>
2405473c:	4603      	mov	r3, r0
2405473e:	2b00      	cmp	r3, #0
24054740:	d007      	beq.n	24054752 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
24054742:	687b      	ldr	r3, [r7, #4]
24054744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054746:	f043 0220 	orr.w	r2, r3, #32
2405474a:	687b      	ldr	r3, [r7, #4]
2405474c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
2405474e:	2301      	movs	r3, #1
24054750:	e093      	b.n	2405487a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
24054752:	2304      	movs	r3, #4
24054754:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
24054756:	f7ff fb39 	bl	24053dcc <HAL_GetTick>
2405475a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
2405475c:	e021      	b.n	240547a2 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
2405475e:	683b      	ldr	r3, [r7, #0]
24054760:	f1b3 3fff 	cmp.w	r3, #4294967295
24054764:	d01d      	beq.n	240547a2 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
24054766:	f7ff fb31 	bl	24053dcc <HAL_GetTick>
2405476a:	4602      	mov	r2, r0
2405476c:	693b      	ldr	r3, [r7, #16]
2405476e:	1ad3      	subs	r3, r2, r3
24054770:	683a      	ldr	r2, [r7, #0]
24054772:	429a      	cmp	r2, r3
24054774:	d302      	bcc.n	2405477c <HAL_ADC_PollForConversion+0x9c>
24054776:	683b      	ldr	r3, [r7, #0]
24054778:	2b00      	cmp	r3, #0
2405477a:	d112      	bne.n	240547a2 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
2405477c:	687b      	ldr	r3, [r7, #4]
2405477e:	681b      	ldr	r3, [r3, #0]
24054780:	681a      	ldr	r2, [r3, #0]
24054782:	69fb      	ldr	r3, [r7, #28]
24054784:	4013      	ands	r3, r2
24054786:	2b00      	cmp	r3, #0
24054788:	d10b      	bne.n	240547a2 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
2405478a:	687b      	ldr	r3, [r7, #4]
2405478c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405478e:	f043 0204 	orr.w	r2, r3, #4
24054792:	687b      	ldr	r3, [r7, #4]
24054794:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
24054796:	687b      	ldr	r3, [r7, #4]
24054798:	2200      	movs	r2, #0
2405479a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
2405479e:	2303      	movs	r3, #3
240547a0:	e06b      	b.n	2405487a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
240547a2:	687b      	ldr	r3, [r7, #4]
240547a4:	681b      	ldr	r3, [r3, #0]
240547a6:	681a      	ldr	r2, [r3, #0]
240547a8:	69fb      	ldr	r3, [r7, #28]
240547aa:	4013      	ands	r3, r2
240547ac:	2b00      	cmp	r3, #0
240547ae:	d0d6      	beq.n	2405475e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
240547b0:	687b      	ldr	r3, [r7, #4]
240547b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240547b4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
240547b8:	687b      	ldr	r3, [r7, #4]
240547ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
240547bc:	687b      	ldr	r3, [r7, #4]
240547be:	681b      	ldr	r3, [r3, #0]
240547c0:	4618      	mov	r0, r3
240547c2:	f7ff fbbb 	bl	24053f3c <LL_ADC_REG_IsTriggerSourceSWStart>
240547c6:	4603      	mov	r3, r0
240547c8:	2b00      	cmp	r3, #0
240547ca:	d01c      	beq.n	24054806 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
240547cc:	687b      	ldr	r3, [r7, #4]
240547ce:	7d5b      	ldrb	r3, [r3, #21]
240547d0:	2b00      	cmp	r3, #0
240547d2:	d118      	bne.n	24054806 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
240547d4:	687b      	ldr	r3, [r7, #4]
240547d6:	681b      	ldr	r3, [r3, #0]
240547d8:	681b      	ldr	r3, [r3, #0]
240547da:	f003 0308 	and.w	r3, r3, #8
240547de:	2b08      	cmp	r3, #8
240547e0:	d111      	bne.n	24054806 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
240547e2:	687b      	ldr	r3, [r7, #4]
240547e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240547e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
240547ea:	687b      	ldr	r3, [r7, #4]
240547ec:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
240547ee:	687b      	ldr	r3, [r7, #4]
240547f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240547f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
240547f6:	2b00      	cmp	r3, #0
240547f8:	d105      	bne.n	24054806 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
240547fa:	687b      	ldr	r3, [r7, #4]
240547fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240547fe:	f043 0201 	orr.w	r2, r3, #1
24054802:	687b      	ldr	r3, [r7, #4]
24054804:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
24054806:	687b      	ldr	r3, [r7, #4]
24054808:	681b      	ldr	r3, [r3, #0]
2405480a:	4a1f      	ldr	r2, [pc, #124]	; (24054888 <HAL_ADC_PollForConversion+0x1a8>)
2405480c:	4293      	cmp	r3, r2
2405480e:	d002      	beq.n	24054816 <HAL_ADC_PollForConversion+0x136>
24054810:	687b      	ldr	r3, [r7, #4]
24054812:	681b      	ldr	r3, [r3, #0]
24054814:	e000      	b.n	24054818 <HAL_ADC_PollForConversion+0x138>
24054816:	4b1d      	ldr	r3, [pc, #116]	; (2405488c <HAL_ADC_PollForConversion+0x1ac>)
24054818:	687a      	ldr	r2, [r7, #4]
2405481a:	6812      	ldr	r2, [r2, #0]
2405481c:	4293      	cmp	r3, r2
2405481e:	d008      	beq.n	24054832 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
24054820:	697b      	ldr	r3, [r7, #20]
24054822:	2b00      	cmp	r3, #0
24054824:	d005      	beq.n	24054832 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
24054826:	697b      	ldr	r3, [r7, #20]
24054828:	2b05      	cmp	r3, #5
2405482a:	d002      	beq.n	24054832 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
2405482c:	697b      	ldr	r3, [r7, #20]
2405482e:	2b09      	cmp	r3, #9
24054830:	d104      	bne.n	2405483c <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
24054832:	687b      	ldr	r3, [r7, #4]
24054834:	681b      	ldr	r3, [r3, #0]
24054836:	68db      	ldr	r3, [r3, #12]
24054838:	61bb      	str	r3, [r7, #24]
2405483a:	e00c      	b.n	24054856 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
2405483c:	687b      	ldr	r3, [r7, #4]
2405483e:	681b      	ldr	r3, [r3, #0]
24054840:	4a11      	ldr	r2, [pc, #68]	; (24054888 <HAL_ADC_PollForConversion+0x1a8>)
24054842:	4293      	cmp	r3, r2
24054844:	d002      	beq.n	2405484c <HAL_ADC_PollForConversion+0x16c>
24054846:	687b      	ldr	r3, [r7, #4]
24054848:	681b      	ldr	r3, [r3, #0]
2405484a:	e000      	b.n	2405484e <HAL_ADC_PollForConversion+0x16e>
2405484c:	4b0f      	ldr	r3, [pc, #60]	; (2405488c <HAL_ADC_PollForConversion+0x1ac>)
2405484e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
24054850:	68fb      	ldr	r3, [r7, #12]
24054852:	68db      	ldr	r3, [r3, #12]
24054854:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
24054856:	69fb      	ldr	r3, [r7, #28]
24054858:	2b08      	cmp	r3, #8
2405485a:	d104      	bne.n	24054866 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
2405485c:	687b      	ldr	r3, [r7, #4]
2405485e:	681b      	ldr	r3, [r3, #0]
24054860:	2208      	movs	r2, #8
24054862:	601a      	str	r2, [r3, #0]
24054864:	e008      	b.n	24054878 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
24054866:	69bb      	ldr	r3, [r7, #24]
24054868:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2405486c:	2b00      	cmp	r3, #0
2405486e:	d103      	bne.n	24054878 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
24054870:	687b      	ldr	r3, [r7, #4]
24054872:	681b      	ldr	r3, [r3, #0]
24054874:	220c      	movs	r2, #12
24054876:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
24054878:	2300      	movs	r3, #0
}
2405487a:	4618      	mov	r0, r3
2405487c:	3720      	adds	r7, #32
2405487e:	46bd      	mov	sp, r7
24054880:	bd80      	pop	{r7, pc}
24054882:	bf00      	nop
24054884:	40022300 	.word	0x40022300
24054888:	40022100 	.word	0x40022100
2405488c:	40022000 	.word	0x40022000

24054890 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
24054890:	b580      	push	{r7, lr}
24054892:	b086      	sub	sp, #24
24054894:	af00      	add	r7, sp, #0
24054896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
24054898:	4890      	ldr	r0, [pc, #576]	; (24054adc <HAL_ADC_Start_IT+0x24c>)
2405489a:	f7ff fbf1 	bl	24054080 <LL_ADC_GetMultimode>
2405489e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
240548a0:	687b      	ldr	r3, [r7, #4]
240548a2:	681b      	ldr	r3, [r3, #0]
240548a4:	4618      	mov	r0, r3
240548a6:	f7ff fccb 	bl	24054240 <LL_ADC_REG_IsConversionOngoing>
240548aa:	4603      	mov	r3, r0
240548ac:	2b00      	cmp	r3, #0
240548ae:	f040 810e 	bne.w	24054ace <HAL_ADC_Start_IT+0x23e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
240548b2:	687b      	ldr	r3, [r7, #4]
240548b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
240548b8:	2b01      	cmp	r3, #1
240548ba:	d101      	bne.n	240548c0 <HAL_ADC_Start_IT+0x30>
240548bc:	2302      	movs	r3, #2
240548be:	e109      	b.n	24054ad4 <HAL_ADC_Start_IT+0x244>
240548c0:	687b      	ldr	r3, [r7, #4]
240548c2:	2201      	movs	r2, #1
240548c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
240548c8:	6878      	ldr	r0, [r7, #4]
240548ca:	f000 ff29 	bl	24055720 <ADC_Enable>
240548ce:	4603      	mov	r3, r0
240548d0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
240548d2:	7dfb      	ldrb	r3, [r7, #23]
240548d4:	2b00      	cmp	r3, #0
240548d6:	f040 80f5 	bne.w	24054ac4 <HAL_ADC_Start_IT+0x234>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
240548da:	687b      	ldr	r3, [r7, #4]
240548dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
240548de:	4b80      	ldr	r3, [pc, #512]	; (24054ae0 <HAL_ADC_Start_IT+0x250>)
240548e0:	4013      	ands	r3, r2
240548e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
240548e6:	687b      	ldr	r3, [r7, #4]
240548e8:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
240548ea:	687b      	ldr	r3, [r7, #4]
240548ec:	681b      	ldr	r3, [r3, #0]
240548ee:	4a7d      	ldr	r2, [pc, #500]	; (24054ae4 <HAL_ADC_Start_IT+0x254>)
240548f0:	4293      	cmp	r3, r2
240548f2:	d002      	beq.n	240548fa <HAL_ADC_Start_IT+0x6a>
240548f4:	687b      	ldr	r3, [r7, #4]
240548f6:	681b      	ldr	r3, [r3, #0]
240548f8:	e000      	b.n	240548fc <HAL_ADC_Start_IT+0x6c>
240548fa:	4b7b      	ldr	r3, [pc, #492]	; (24054ae8 <HAL_ADC_Start_IT+0x258>)
240548fc:	687a      	ldr	r2, [r7, #4]
240548fe:	6812      	ldr	r2, [r2, #0]
24054900:	4293      	cmp	r3, r2
24054902:	d002      	beq.n	2405490a <HAL_ADC_Start_IT+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
24054904:	693b      	ldr	r3, [r7, #16]
24054906:	2b00      	cmp	r3, #0
24054908:	d105      	bne.n	24054916 <HAL_ADC_Start_IT+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
2405490a:	687b      	ldr	r3, [r7, #4]
2405490c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405490e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
24054912:	687b      	ldr	r3, [r7, #4]
24054914:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
24054916:	687b      	ldr	r3, [r7, #4]
24054918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405491a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
2405491e:	2b00      	cmp	r3, #0
24054920:	d006      	beq.n	24054930 <HAL_ADC_Start_IT+0xa0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
24054922:	687b      	ldr	r3, [r7, #4]
24054924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24054926:	f023 0206 	bic.w	r2, r3, #6
2405492a:	687b      	ldr	r3, [r7, #4]
2405492c:	659a      	str	r2, [r3, #88]	; 0x58
2405492e:	e002      	b.n	24054936 <HAL_ADC_Start_IT+0xa6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
24054930:	687b      	ldr	r3, [r7, #4]
24054932:	2200      	movs	r2, #0
24054934:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
24054936:	687b      	ldr	r3, [r7, #4]
24054938:	681b      	ldr	r3, [r3, #0]
2405493a:	221c      	movs	r2, #28
2405493c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
2405493e:	687b      	ldr	r3, [r7, #4]
24054940:	2200      	movs	r2, #0
24054942:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
24054946:	687b      	ldr	r3, [r7, #4]
24054948:	681b      	ldr	r3, [r3, #0]
2405494a:	685a      	ldr	r2, [r3, #4]
2405494c:	687b      	ldr	r3, [r7, #4]
2405494e:	681b      	ldr	r3, [r3, #0]
24054950:	f022 021c 	bic.w	r2, r2, #28
24054954:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
24054956:	687b      	ldr	r3, [r7, #4]
24054958:	691b      	ldr	r3, [r3, #16]
2405495a:	2b08      	cmp	r3, #8
2405495c:	d108      	bne.n	24054970 <HAL_ADC_Start_IT+0xe0>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
2405495e:	687b      	ldr	r3, [r7, #4]
24054960:	681b      	ldr	r3, [r3, #0]
24054962:	685a      	ldr	r2, [r3, #4]
24054964:	687b      	ldr	r3, [r7, #4]
24054966:	681b      	ldr	r3, [r3, #0]
24054968:	f042 0208 	orr.w	r2, r2, #8
2405496c:	605a      	str	r2, [r3, #4]
          break;
2405496e:	e008      	b.n	24054982 <HAL_ADC_Start_IT+0xf2>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
24054970:	687b      	ldr	r3, [r7, #4]
24054972:	681b      	ldr	r3, [r3, #0]
24054974:	685a      	ldr	r2, [r3, #4]
24054976:	687b      	ldr	r3, [r7, #4]
24054978:	681b      	ldr	r3, [r3, #0]
2405497a:	f042 0204 	orr.w	r2, r2, #4
2405497e:	605a      	str	r2, [r3, #4]
          break;
24054980:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
24054982:	687b      	ldr	r3, [r7, #4]
24054984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24054986:	2b00      	cmp	r3, #0
24054988:	d107      	bne.n	2405499a <HAL_ADC_Start_IT+0x10a>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
2405498a:	687b      	ldr	r3, [r7, #4]
2405498c:	681b      	ldr	r3, [r3, #0]
2405498e:	685a      	ldr	r2, [r3, #4]
24054990:	687b      	ldr	r3, [r7, #4]
24054992:	681b      	ldr	r3, [r3, #0]
24054994:	f042 0210 	orr.w	r2, r2, #16
24054998:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
2405499a:	687b      	ldr	r3, [r7, #4]
2405499c:	681b      	ldr	r3, [r3, #0]
2405499e:	4a51      	ldr	r2, [pc, #324]	; (24054ae4 <HAL_ADC_Start_IT+0x254>)
240549a0:	4293      	cmp	r3, r2
240549a2:	d002      	beq.n	240549aa <HAL_ADC_Start_IT+0x11a>
240549a4:	687b      	ldr	r3, [r7, #4]
240549a6:	681b      	ldr	r3, [r3, #0]
240549a8:	e000      	b.n	240549ac <HAL_ADC_Start_IT+0x11c>
240549aa:	4b4f      	ldr	r3, [pc, #316]	; (24054ae8 <HAL_ADC_Start_IT+0x258>)
240549ac:	687a      	ldr	r2, [r7, #4]
240549ae:	6812      	ldr	r2, [r2, #0]
240549b0:	4293      	cmp	r3, r2
240549b2:	d008      	beq.n	240549c6 <HAL_ADC_Start_IT+0x136>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
240549b4:	693b      	ldr	r3, [r7, #16]
240549b6:	2b00      	cmp	r3, #0
240549b8:	d005      	beq.n	240549c6 <HAL_ADC_Start_IT+0x136>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
240549ba:	693b      	ldr	r3, [r7, #16]
240549bc:	2b05      	cmp	r3, #5
240549be:	d002      	beq.n	240549c6 <HAL_ADC_Start_IT+0x136>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
240549c0:	693b      	ldr	r3, [r7, #16]
240549c2:	2b09      	cmp	r3, #9
240549c4:	d13a      	bne.n	24054a3c <HAL_ADC_Start_IT+0x1ac>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
240549c6:	687b      	ldr	r3, [r7, #4]
240549c8:	681b      	ldr	r3, [r3, #0]
240549ca:	68db      	ldr	r3, [r3, #12]
240549cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
240549d0:	2b00      	cmp	r3, #0
240549d2:	d02d      	beq.n	24054a30 <HAL_ADC_Start_IT+0x1a0>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
240549d4:	687b      	ldr	r3, [r7, #4]
240549d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240549d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
240549dc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
240549e0:	687b      	ldr	r3, [r7, #4]
240549e2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
240549e4:	687b      	ldr	r3, [r7, #4]
240549e6:	691b      	ldr	r3, [r3, #16]
240549e8:	2b08      	cmp	r3, #8
240549ea:	d110      	bne.n	24054a0e <HAL_ADC_Start_IT+0x17e>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
240549ec:	687b      	ldr	r3, [r7, #4]
240549ee:	681b      	ldr	r3, [r3, #0]
240549f0:	685a      	ldr	r2, [r3, #4]
240549f2:	687b      	ldr	r3, [r7, #4]
240549f4:	681b      	ldr	r3, [r3, #0]
240549f6:	f022 0220 	bic.w	r2, r2, #32
240549fa:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
240549fc:	687b      	ldr	r3, [r7, #4]
240549fe:	681b      	ldr	r3, [r3, #0]
24054a00:	685a      	ldr	r2, [r3, #4]
24054a02:	687b      	ldr	r3, [r7, #4]
24054a04:	681b      	ldr	r3, [r3, #0]
24054a06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
24054a0a:	605a      	str	r2, [r3, #4]
              break;
24054a0c:	e010      	b.n	24054a30 <HAL_ADC_Start_IT+0x1a0>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
24054a0e:	687b      	ldr	r3, [r7, #4]
24054a10:	681b      	ldr	r3, [r3, #0]
24054a12:	685a      	ldr	r2, [r3, #4]
24054a14:	687b      	ldr	r3, [r7, #4]
24054a16:	681b      	ldr	r3, [r3, #0]
24054a18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
24054a1c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
24054a1e:	687b      	ldr	r3, [r7, #4]
24054a20:	681b      	ldr	r3, [r3, #0]
24054a22:	685a      	ldr	r2, [r3, #4]
24054a24:	687b      	ldr	r3, [r7, #4]
24054a26:	681b      	ldr	r3, [r3, #0]
24054a28:	f042 0220 	orr.w	r2, r2, #32
24054a2c:	605a      	str	r2, [r3, #4]
              break;
24054a2e:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
24054a30:	687b      	ldr	r3, [r7, #4]
24054a32:	681b      	ldr	r3, [r3, #0]
24054a34:	4618      	mov	r0, r3
24054a36:	f7ff fbdb 	bl	240541f0 <LL_ADC_REG_StartConversion>
24054a3a:	e04a      	b.n	24054ad2 <HAL_ADC_Start_IT+0x242>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
24054a3c:	687b      	ldr	r3, [r7, #4]
24054a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054a40:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
24054a44:	687b      	ldr	r3, [r7, #4]
24054a46:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
24054a48:	687b      	ldr	r3, [r7, #4]
24054a4a:	681b      	ldr	r3, [r3, #0]
24054a4c:	4a25      	ldr	r2, [pc, #148]	; (24054ae4 <HAL_ADC_Start_IT+0x254>)
24054a4e:	4293      	cmp	r3, r2
24054a50:	d002      	beq.n	24054a58 <HAL_ADC_Start_IT+0x1c8>
24054a52:	687b      	ldr	r3, [r7, #4]
24054a54:	681b      	ldr	r3, [r3, #0]
24054a56:	e000      	b.n	24054a5a <HAL_ADC_Start_IT+0x1ca>
24054a58:	4b23      	ldr	r3, [pc, #140]	; (24054ae8 <HAL_ADC_Start_IT+0x258>)
24054a5a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
24054a5c:	68fb      	ldr	r3, [r7, #12]
24054a5e:	68db      	ldr	r3, [r3, #12]
24054a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24054a64:	2b00      	cmp	r3, #0
24054a66:	d034      	beq.n	24054ad2 <HAL_ADC_Start_IT+0x242>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
24054a68:	687b      	ldr	r3, [r7, #4]
24054a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054a6c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
24054a70:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
24054a74:	687b      	ldr	r3, [r7, #4]
24054a76:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
24054a78:	687b      	ldr	r3, [r7, #4]
24054a7a:	691b      	ldr	r3, [r3, #16]
24054a7c:	2b08      	cmp	r3, #8
24054a7e:	d110      	bne.n	24054aa2 <HAL_ADC_Start_IT+0x212>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
24054a80:	687b      	ldr	r3, [r7, #4]
24054a82:	681b      	ldr	r3, [r3, #0]
24054a84:	685a      	ldr	r2, [r3, #4]
24054a86:	687b      	ldr	r3, [r7, #4]
24054a88:	681b      	ldr	r3, [r3, #0]
24054a8a:	f022 0220 	bic.w	r2, r2, #32
24054a8e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
24054a90:	687b      	ldr	r3, [r7, #4]
24054a92:	681b      	ldr	r3, [r3, #0]
24054a94:	685a      	ldr	r2, [r3, #4]
24054a96:	687b      	ldr	r3, [r7, #4]
24054a98:	681b      	ldr	r3, [r3, #0]
24054a9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
24054a9e:	605a      	str	r2, [r3, #4]
              break;
24054aa0:	e017      	b.n	24054ad2 <HAL_ADC_Start_IT+0x242>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
24054aa2:	687b      	ldr	r3, [r7, #4]
24054aa4:	681b      	ldr	r3, [r3, #0]
24054aa6:	685a      	ldr	r2, [r3, #4]
24054aa8:	687b      	ldr	r3, [r7, #4]
24054aaa:	681b      	ldr	r3, [r3, #0]
24054aac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
24054ab0:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
24054ab2:	687b      	ldr	r3, [r7, #4]
24054ab4:	681b      	ldr	r3, [r3, #0]
24054ab6:	685a      	ldr	r2, [r3, #4]
24054ab8:	687b      	ldr	r3, [r7, #4]
24054aba:	681b      	ldr	r3, [r3, #0]
24054abc:	f042 0220 	orr.w	r2, r2, #32
24054ac0:	605a      	str	r2, [r3, #4]
              break;
24054ac2:	e006      	b.n	24054ad2 <HAL_ADC_Start_IT+0x242>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
24054ac4:	687b      	ldr	r3, [r7, #4]
24054ac6:	2200      	movs	r2, #0
24054ac8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
24054acc:	e001      	b.n	24054ad2 <HAL_ADC_Start_IT+0x242>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
24054ace:	2302      	movs	r3, #2
24054ad0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
24054ad2:	7dfb      	ldrb	r3, [r7, #23]
}
24054ad4:	4618      	mov	r0, r3
24054ad6:	3718      	adds	r7, #24
24054ad8:	46bd      	mov	sp, r7
24054ada:	bd80      	pop	{r7, pc}
24054adc:	40022300 	.word	0x40022300
24054ae0:	fffff0fe 	.word	0xfffff0fe
24054ae4:	40022100 	.word	0x40022100
24054ae8:	40022000 	.word	0x40022000

24054aec <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
24054aec:	b580      	push	{r7, lr}
24054aee:	b084      	sub	sp, #16
24054af0:	af00      	add	r7, sp, #0
24054af2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
24054af4:	687b      	ldr	r3, [r7, #4]
24054af6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
24054afa:	2b01      	cmp	r3, #1
24054afc:	d101      	bne.n	24054b02 <HAL_ADC_Stop_IT+0x16>
24054afe:	2302      	movs	r3, #2
24054b00:	e029      	b.n	24054b56 <HAL_ADC_Stop_IT+0x6a>
24054b02:	687b      	ldr	r3, [r7, #4]
24054b04:	2201      	movs	r2, #1
24054b06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
24054b0a:	2103      	movs	r1, #3
24054b0c:	6878      	ldr	r0, [r7, #4]
24054b0e:	f000 fd4b 	bl	240555a8 <ADC_ConversionStop>
24054b12:	4603      	mov	r3, r0
24054b14:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
24054b16:	7bfb      	ldrb	r3, [r7, #15]
24054b18:	2b00      	cmp	r3, #0
24054b1a:	d117      	bne.n	24054b4c <HAL_ADC_Stop_IT+0x60>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
24054b1c:	687b      	ldr	r3, [r7, #4]
24054b1e:	681b      	ldr	r3, [r3, #0]
24054b20:	685a      	ldr	r2, [r3, #4]
24054b22:	687b      	ldr	r3, [r7, #4]
24054b24:	681b      	ldr	r3, [r3, #0]
24054b26:	f022 021c 	bic.w	r2, r2, #28
24054b2a:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
24054b2c:	6878      	ldr	r0, [r7, #4]
24054b2e:	f000 fe73 	bl	24055818 <ADC_Disable>
24054b32:	4603      	mov	r3, r0
24054b34:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
24054b36:	7bfb      	ldrb	r3, [r7, #15]
24054b38:	2b00      	cmp	r3, #0
24054b3a:	d107      	bne.n	24054b4c <HAL_ADC_Stop_IT+0x60>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
24054b3c:	687b      	ldr	r3, [r7, #4]
24054b3e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
24054b40:	4b07      	ldr	r3, [pc, #28]	; (24054b60 <HAL_ADC_Stop_IT+0x74>)
24054b42:	4013      	ands	r3, r2
24054b44:	f043 0201 	orr.w	r2, r3, #1
24054b48:	687b      	ldr	r3, [r7, #4]
24054b4a:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
24054b4c:	687b      	ldr	r3, [r7, #4]
24054b4e:	2200      	movs	r2, #0
24054b50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
24054b54:	7bfb      	ldrb	r3, [r7, #15]
}
24054b56:	4618      	mov	r0, r3
24054b58:	3710      	adds	r7, #16
24054b5a:	46bd      	mov	sp, r7
24054b5c:	bd80      	pop	{r7, pc}
24054b5e:	bf00      	nop
24054b60:	ffffeefe 	.word	0xffffeefe

24054b64 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
24054b64:	b480      	push	{r7}
24054b66:	b083      	sub	sp, #12
24054b68:	af00      	add	r7, sp, #0
24054b6a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
24054b6c:	687b      	ldr	r3, [r7, #4]
24054b6e:	681b      	ldr	r3, [r3, #0]
24054b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
24054b72:	4618      	mov	r0, r3
24054b74:	370c      	adds	r7, #12
24054b76:	46bd      	mov	sp, r7
24054b78:	f85d 7b04 	ldr.w	r7, [sp], #4
24054b7c:	4770      	bx	lr
	...

24054b80 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
24054b80:	b580      	push	{r7, lr}
24054b82:	b08a      	sub	sp, #40	; 0x28
24054b84:	af00      	add	r7, sp, #0
24054b86:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
24054b88:	2300      	movs	r3, #0
24054b8a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
24054b8c:	687b      	ldr	r3, [r7, #4]
24054b8e:	681b      	ldr	r3, [r3, #0]
24054b90:	681b      	ldr	r3, [r3, #0]
24054b92:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
24054b94:	687b      	ldr	r3, [r7, #4]
24054b96:	681b      	ldr	r3, [r3, #0]
24054b98:	685b      	ldr	r3, [r3, #4]
24054b9a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
24054b9c:	4882      	ldr	r0, [pc, #520]	; (24054da8 <HAL_ADC_IRQHandler+0x228>)
24054b9e:	f7ff fa6f 	bl	24054080 <LL_ADC_GetMultimode>
24054ba2:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
24054ba4:	69fb      	ldr	r3, [r7, #28]
24054ba6:	f003 0302 	and.w	r3, r3, #2
24054baa:	2b00      	cmp	r3, #0
24054bac:	d017      	beq.n	24054bde <HAL_ADC_IRQHandler+0x5e>
24054bae:	69bb      	ldr	r3, [r7, #24]
24054bb0:	f003 0302 	and.w	r3, r3, #2
24054bb4:	2b00      	cmp	r3, #0
24054bb6:	d012      	beq.n	24054bde <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
24054bb8:	687b      	ldr	r3, [r7, #4]
24054bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054bbc:	f003 0310 	and.w	r3, r3, #16
24054bc0:	2b00      	cmp	r3, #0
24054bc2:	d105      	bne.n	24054bd0 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
24054bc4:	687b      	ldr	r3, [r7, #4]
24054bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054bc8:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
24054bcc:	687b      	ldr	r3, [r7, #4]
24054bce:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
24054bd0:	6878      	ldr	r0, [r7, #4]
24054bd2:	f000 ff9d 	bl	24055b10 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
24054bd6:	687b      	ldr	r3, [r7, #4]
24054bd8:	681b      	ldr	r3, [r3, #0]
24054bda:	2202      	movs	r2, #2
24054bdc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
24054bde:	69fb      	ldr	r3, [r7, #28]
24054be0:	f003 0304 	and.w	r3, r3, #4
24054be4:	2b00      	cmp	r3, #0
24054be6:	d004      	beq.n	24054bf2 <HAL_ADC_IRQHandler+0x72>
24054be8:	69bb      	ldr	r3, [r7, #24]
24054bea:	f003 0304 	and.w	r3, r3, #4
24054bee:	2b00      	cmp	r3, #0
24054bf0:	d10a      	bne.n	24054c08 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
24054bf2:	69fb      	ldr	r3, [r7, #28]
24054bf4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
24054bf8:	2b00      	cmp	r3, #0
24054bfa:	f000 8083 	beq.w	24054d04 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
24054bfe:	69bb      	ldr	r3, [r7, #24]
24054c00:	f003 0308 	and.w	r3, r3, #8
24054c04:	2b00      	cmp	r3, #0
24054c06:	d07d      	beq.n	24054d04 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
24054c08:	687b      	ldr	r3, [r7, #4]
24054c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054c0c:	f003 0310 	and.w	r3, r3, #16
24054c10:	2b00      	cmp	r3, #0
24054c12:	d105      	bne.n	24054c20 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
24054c14:	687b      	ldr	r3, [r7, #4]
24054c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054c18:	f443 7200 	orr.w	r2, r3, #512	; 0x200
24054c1c:	687b      	ldr	r3, [r7, #4]
24054c1e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
24054c20:	687b      	ldr	r3, [r7, #4]
24054c22:	681b      	ldr	r3, [r3, #0]
24054c24:	4618      	mov	r0, r3
24054c26:	f7ff f989 	bl	24053f3c <LL_ADC_REG_IsTriggerSourceSWStart>
24054c2a:	4603      	mov	r3, r0
24054c2c:	2b00      	cmp	r3, #0
24054c2e:	d062      	beq.n	24054cf6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
24054c30:	687b      	ldr	r3, [r7, #4]
24054c32:	681b      	ldr	r3, [r3, #0]
24054c34:	4a5d      	ldr	r2, [pc, #372]	; (24054dac <HAL_ADC_IRQHandler+0x22c>)
24054c36:	4293      	cmp	r3, r2
24054c38:	d002      	beq.n	24054c40 <HAL_ADC_IRQHandler+0xc0>
24054c3a:	687b      	ldr	r3, [r7, #4]
24054c3c:	681b      	ldr	r3, [r3, #0]
24054c3e:	e000      	b.n	24054c42 <HAL_ADC_IRQHandler+0xc2>
24054c40:	4b5b      	ldr	r3, [pc, #364]	; (24054db0 <HAL_ADC_IRQHandler+0x230>)
24054c42:	687a      	ldr	r2, [r7, #4]
24054c44:	6812      	ldr	r2, [r2, #0]
24054c46:	4293      	cmp	r3, r2
24054c48:	d008      	beq.n	24054c5c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
24054c4a:	697b      	ldr	r3, [r7, #20]
24054c4c:	2b00      	cmp	r3, #0
24054c4e:	d005      	beq.n	24054c5c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
24054c50:	697b      	ldr	r3, [r7, #20]
24054c52:	2b05      	cmp	r3, #5
24054c54:	d002      	beq.n	24054c5c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
24054c56:	697b      	ldr	r3, [r7, #20]
24054c58:	2b09      	cmp	r3, #9
24054c5a:	d104      	bne.n	24054c66 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
24054c5c:	687b      	ldr	r3, [r7, #4]
24054c5e:	681b      	ldr	r3, [r3, #0]
24054c60:	68db      	ldr	r3, [r3, #12]
24054c62:	623b      	str	r3, [r7, #32]
24054c64:	e00c      	b.n	24054c80 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
24054c66:	687b      	ldr	r3, [r7, #4]
24054c68:	681b      	ldr	r3, [r3, #0]
24054c6a:	4a50      	ldr	r2, [pc, #320]	; (24054dac <HAL_ADC_IRQHandler+0x22c>)
24054c6c:	4293      	cmp	r3, r2
24054c6e:	d002      	beq.n	24054c76 <HAL_ADC_IRQHandler+0xf6>
24054c70:	687b      	ldr	r3, [r7, #4]
24054c72:	681b      	ldr	r3, [r3, #0]
24054c74:	e000      	b.n	24054c78 <HAL_ADC_IRQHandler+0xf8>
24054c76:	4b4e      	ldr	r3, [pc, #312]	; (24054db0 <HAL_ADC_IRQHandler+0x230>)
24054c78:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
24054c7a:	693b      	ldr	r3, [r7, #16]
24054c7c:	68db      	ldr	r3, [r3, #12]
24054c7e:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
24054c80:	6a3b      	ldr	r3, [r7, #32]
24054c82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
24054c86:	2b00      	cmp	r3, #0
24054c88:	d135      	bne.n	24054cf6 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
24054c8a:	687b      	ldr	r3, [r7, #4]
24054c8c:	681b      	ldr	r3, [r3, #0]
24054c8e:	681b      	ldr	r3, [r3, #0]
24054c90:	f003 0308 	and.w	r3, r3, #8
24054c94:	2b08      	cmp	r3, #8
24054c96:	d12e      	bne.n	24054cf6 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
24054c98:	687b      	ldr	r3, [r7, #4]
24054c9a:	681b      	ldr	r3, [r3, #0]
24054c9c:	4618      	mov	r0, r3
24054c9e:	f7ff facf 	bl	24054240 <LL_ADC_REG_IsConversionOngoing>
24054ca2:	4603      	mov	r3, r0
24054ca4:	2b00      	cmp	r3, #0
24054ca6:	d11a      	bne.n	24054cde <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
24054ca8:	687b      	ldr	r3, [r7, #4]
24054caa:	681b      	ldr	r3, [r3, #0]
24054cac:	685a      	ldr	r2, [r3, #4]
24054cae:	687b      	ldr	r3, [r7, #4]
24054cb0:	681b      	ldr	r3, [r3, #0]
24054cb2:	f022 020c 	bic.w	r2, r2, #12
24054cb6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
24054cb8:	687b      	ldr	r3, [r7, #4]
24054cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054cbc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
24054cc0:	687b      	ldr	r3, [r7, #4]
24054cc2:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
24054cc4:	687b      	ldr	r3, [r7, #4]
24054cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054cc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
24054ccc:	2b00      	cmp	r3, #0
24054cce:	d112      	bne.n	24054cf6 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
24054cd0:	687b      	ldr	r3, [r7, #4]
24054cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054cd4:	f043 0201 	orr.w	r2, r3, #1
24054cd8:	687b      	ldr	r3, [r7, #4]
24054cda:	655a      	str	r2, [r3, #84]	; 0x54
24054cdc:	e00b      	b.n	24054cf6 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
24054cde:	687b      	ldr	r3, [r7, #4]
24054ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054ce2:	f043 0210 	orr.w	r2, r3, #16
24054ce6:	687b      	ldr	r3, [r7, #4]
24054ce8:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
24054cea:	687b      	ldr	r3, [r7, #4]
24054cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24054cee:	f043 0201 	orr.w	r2, r3, #1
24054cf2:	687b      	ldr	r3, [r7, #4]
24054cf4:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
24054cf6:	6878      	ldr	r0, [r7, #4]
24054cf8:	f7fb fd6a 	bl	240507d0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
24054cfc:	687b      	ldr	r3, [r7, #4]
24054cfe:	681b      	ldr	r3, [r3, #0]
24054d00:	220c      	movs	r2, #12
24054d02:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
24054d04:	69fb      	ldr	r3, [r7, #28]
24054d06:	f003 0320 	and.w	r3, r3, #32
24054d0a:	2b00      	cmp	r3, #0
24054d0c:	d004      	beq.n	24054d18 <HAL_ADC_IRQHandler+0x198>
24054d0e:	69bb      	ldr	r3, [r7, #24]
24054d10:	f003 0320 	and.w	r3, r3, #32
24054d14:	2b00      	cmp	r3, #0
24054d16:	d10b      	bne.n	24054d30 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
24054d18:	69fb      	ldr	r3, [r7, #28]
24054d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
24054d1e:	2b00      	cmp	r3, #0
24054d20:	f000 809f 	beq.w	24054e62 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
24054d24:	69bb      	ldr	r3, [r7, #24]
24054d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
24054d2a:	2b00      	cmp	r3, #0
24054d2c:	f000 8099 	beq.w	24054e62 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
24054d30:	687b      	ldr	r3, [r7, #4]
24054d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054d34:	f003 0310 	and.w	r3, r3, #16
24054d38:	2b00      	cmp	r3, #0
24054d3a:	d105      	bne.n	24054d48 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
24054d3c:	687b      	ldr	r3, [r7, #4]
24054d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054d40:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
24054d44:	687b      	ldr	r3, [r7, #4]
24054d46:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
24054d48:	687b      	ldr	r3, [r7, #4]
24054d4a:	681b      	ldr	r3, [r3, #0]
24054d4c:	4618      	mov	r0, r3
24054d4e:	f7ff f934 	bl	24053fba <LL_ADC_INJ_IsTriggerSourceSWStart>
24054d52:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
24054d54:	687b      	ldr	r3, [r7, #4]
24054d56:	681b      	ldr	r3, [r3, #0]
24054d58:	4618      	mov	r0, r3
24054d5a:	f7ff f8ef 	bl	24053f3c <LL_ADC_REG_IsTriggerSourceSWStart>
24054d5e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
24054d60:	687b      	ldr	r3, [r7, #4]
24054d62:	681b      	ldr	r3, [r3, #0]
24054d64:	4a11      	ldr	r2, [pc, #68]	; (24054dac <HAL_ADC_IRQHandler+0x22c>)
24054d66:	4293      	cmp	r3, r2
24054d68:	d002      	beq.n	24054d70 <HAL_ADC_IRQHandler+0x1f0>
24054d6a:	687b      	ldr	r3, [r7, #4]
24054d6c:	681b      	ldr	r3, [r3, #0]
24054d6e:	e000      	b.n	24054d72 <HAL_ADC_IRQHandler+0x1f2>
24054d70:	4b0f      	ldr	r3, [pc, #60]	; (24054db0 <HAL_ADC_IRQHandler+0x230>)
24054d72:	687a      	ldr	r2, [r7, #4]
24054d74:	6812      	ldr	r2, [r2, #0]
24054d76:	4293      	cmp	r3, r2
24054d78:	d008      	beq.n	24054d8c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
24054d7a:	697b      	ldr	r3, [r7, #20]
24054d7c:	2b00      	cmp	r3, #0
24054d7e:	d005      	beq.n	24054d8c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
24054d80:	697b      	ldr	r3, [r7, #20]
24054d82:	2b06      	cmp	r3, #6
24054d84:	d002      	beq.n	24054d8c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
24054d86:	697b      	ldr	r3, [r7, #20]
24054d88:	2b07      	cmp	r3, #7
24054d8a:	d104      	bne.n	24054d96 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
24054d8c:	687b      	ldr	r3, [r7, #4]
24054d8e:	681b      	ldr	r3, [r3, #0]
24054d90:	68db      	ldr	r3, [r3, #12]
24054d92:	623b      	str	r3, [r7, #32]
24054d94:	e013      	b.n	24054dbe <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
24054d96:	687b      	ldr	r3, [r7, #4]
24054d98:	681b      	ldr	r3, [r3, #0]
24054d9a:	4a04      	ldr	r2, [pc, #16]	; (24054dac <HAL_ADC_IRQHandler+0x22c>)
24054d9c:	4293      	cmp	r3, r2
24054d9e:	d009      	beq.n	24054db4 <HAL_ADC_IRQHandler+0x234>
24054da0:	687b      	ldr	r3, [r7, #4]
24054da2:	681b      	ldr	r3, [r3, #0]
24054da4:	e007      	b.n	24054db6 <HAL_ADC_IRQHandler+0x236>
24054da6:	bf00      	nop
24054da8:	40022300 	.word	0x40022300
24054dac:	40022100 	.word	0x40022100
24054db0:	40022000 	.word	0x40022000
24054db4:	4b7d      	ldr	r3, [pc, #500]	; (24054fac <HAL_ADC_IRQHandler+0x42c>)
24054db6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
24054db8:	693b      	ldr	r3, [r7, #16]
24054dba:	68db      	ldr	r3, [r3, #12]
24054dbc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
24054dbe:	68fb      	ldr	r3, [r7, #12]
24054dc0:	2b00      	cmp	r3, #0
24054dc2:	d047      	beq.n	24054e54 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
24054dc4:	6a3b      	ldr	r3, [r7, #32]
24054dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24054dca:	2b00      	cmp	r3, #0
24054dcc:	d007      	beq.n	24054dde <HAL_ADC_IRQHandler+0x25e>
24054dce:	68bb      	ldr	r3, [r7, #8]
24054dd0:	2b00      	cmp	r3, #0
24054dd2:	d03f      	beq.n	24054e54 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
24054dd4:	6a3b      	ldr	r3, [r7, #32]
24054dd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
24054dda:	2b00      	cmp	r3, #0
24054ddc:	d13a      	bne.n	24054e54 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
24054dde:	687b      	ldr	r3, [r7, #4]
24054de0:	681b      	ldr	r3, [r3, #0]
24054de2:	681b      	ldr	r3, [r3, #0]
24054de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
24054de8:	2b40      	cmp	r3, #64	; 0x40
24054dea:	d133      	bne.n	24054e54 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
24054dec:	6a3b      	ldr	r3, [r7, #32]
24054dee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
24054df2:	2b00      	cmp	r3, #0
24054df4:	d12e      	bne.n	24054e54 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
24054df6:	687b      	ldr	r3, [r7, #4]
24054df8:	681b      	ldr	r3, [r3, #0]
24054dfa:	4618      	mov	r0, r3
24054dfc:	f7ff fa48 	bl	24054290 <LL_ADC_INJ_IsConversionOngoing>
24054e00:	4603      	mov	r3, r0
24054e02:	2b00      	cmp	r3, #0
24054e04:	d11a      	bne.n	24054e3c <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
24054e06:	687b      	ldr	r3, [r7, #4]
24054e08:	681b      	ldr	r3, [r3, #0]
24054e0a:	685a      	ldr	r2, [r3, #4]
24054e0c:	687b      	ldr	r3, [r7, #4]
24054e0e:	681b      	ldr	r3, [r3, #0]
24054e10:	f022 0260 	bic.w	r2, r2, #96	; 0x60
24054e14:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
24054e16:	687b      	ldr	r3, [r7, #4]
24054e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054e1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
24054e1e:	687b      	ldr	r3, [r7, #4]
24054e20:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
24054e22:	687b      	ldr	r3, [r7, #4]
24054e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
24054e2a:	2b00      	cmp	r3, #0
24054e2c:	d112      	bne.n	24054e54 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
24054e2e:	687b      	ldr	r3, [r7, #4]
24054e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054e32:	f043 0201 	orr.w	r2, r3, #1
24054e36:	687b      	ldr	r3, [r7, #4]
24054e38:	655a      	str	r2, [r3, #84]	; 0x54
24054e3a:	e00b      	b.n	24054e54 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
24054e3c:	687b      	ldr	r3, [r7, #4]
24054e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054e40:	f043 0210 	orr.w	r2, r3, #16
24054e44:	687b      	ldr	r3, [r7, #4]
24054e46:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
24054e48:	687b      	ldr	r3, [r7, #4]
24054e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24054e4c:	f043 0201 	orr.w	r2, r3, #1
24054e50:	687b      	ldr	r3, [r7, #4]
24054e52:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
24054e54:	6878      	ldr	r0, [r7, #4]
24054e56:	f000 fe33 	bl	24055ac0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
24054e5a:	687b      	ldr	r3, [r7, #4]
24054e5c:	681b      	ldr	r3, [r3, #0]
24054e5e:	2260      	movs	r2, #96	; 0x60
24054e60:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
24054e62:	69fb      	ldr	r3, [r7, #28]
24054e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
24054e68:	2b00      	cmp	r3, #0
24054e6a:	d011      	beq.n	24054e90 <HAL_ADC_IRQHandler+0x310>
24054e6c:	69bb      	ldr	r3, [r7, #24]
24054e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
24054e72:	2b00      	cmp	r3, #0
24054e74:	d00c      	beq.n	24054e90 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
24054e76:	687b      	ldr	r3, [r7, #4]
24054e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054e7a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
24054e7e:	687b      	ldr	r3, [r7, #4]
24054e80:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
24054e82:	6878      	ldr	r0, [r7, #4]
24054e84:	f000 f896 	bl	24054fb4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
24054e88:	687b      	ldr	r3, [r7, #4]
24054e8a:	681b      	ldr	r3, [r3, #0]
24054e8c:	2280      	movs	r2, #128	; 0x80
24054e8e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
24054e90:	69fb      	ldr	r3, [r7, #28]
24054e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
24054e96:	2b00      	cmp	r3, #0
24054e98:	d012      	beq.n	24054ec0 <HAL_ADC_IRQHandler+0x340>
24054e9a:	69bb      	ldr	r3, [r7, #24]
24054e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
24054ea0:	2b00      	cmp	r3, #0
24054ea2:	d00d      	beq.n	24054ec0 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
24054ea4:	687b      	ldr	r3, [r7, #4]
24054ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054ea8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
24054eac:	687b      	ldr	r3, [r7, #4]
24054eae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
24054eb0:	6878      	ldr	r0, [r7, #4]
24054eb2:	f000 fe19 	bl	24055ae8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
24054eb6:	687b      	ldr	r3, [r7, #4]
24054eb8:	681b      	ldr	r3, [r3, #0]
24054eba:	f44f 7280 	mov.w	r2, #256	; 0x100
24054ebe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
24054ec0:	69fb      	ldr	r3, [r7, #28]
24054ec2:	f403 7300 	and.w	r3, r3, #512	; 0x200
24054ec6:	2b00      	cmp	r3, #0
24054ec8:	d012      	beq.n	24054ef0 <HAL_ADC_IRQHandler+0x370>
24054eca:	69bb      	ldr	r3, [r7, #24]
24054ecc:	f403 7300 	and.w	r3, r3, #512	; 0x200
24054ed0:	2b00      	cmp	r3, #0
24054ed2:	d00d      	beq.n	24054ef0 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
24054ed4:	687b      	ldr	r3, [r7, #4]
24054ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054ed8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
24054edc:	687b      	ldr	r3, [r7, #4]
24054ede:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
24054ee0:	6878      	ldr	r0, [r7, #4]
24054ee2:	f000 fe0b 	bl	24055afc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
24054ee6:	687b      	ldr	r3, [r7, #4]
24054ee8:	681b      	ldr	r3, [r3, #0]
24054eea:	f44f 7200 	mov.w	r2, #512	; 0x200
24054eee:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
24054ef0:	69fb      	ldr	r3, [r7, #28]
24054ef2:	f003 0310 	and.w	r3, r3, #16
24054ef6:	2b00      	cmp	r3, #0
24054ef8:	d036      	beq.n	24054f68 <HAL_ADC_IRQHandler+0x3e8>
24054efa:	69bb      	ldr	r3, [r7, #24]
24054efc:	f003 0310 	and.w	r3, r3, #16
24054f00:	2b00      	cmp	r3, #0
24054f02:	d031      	beq.n	24054f68 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
24054f04:	687b      	ldr	r3, [r7, #4]
24054f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24054f08:	2b00      	cmp	r3, #0
24054f0a:	d102      	bne.n	24054f12 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
24054f0c:	2301      	movs	r3, #1
24054f0e:	627b      	str	r3, [r7, #36]	; 0x24
24054f10:	e014      	b.n	24054f3c <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
24054f12:	697b      	ldr	r3, [r7, #20]
24054f14:	2b00      	cmp	r3, #0
24054f16:	d008      	beq.n	24054f2a <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
24054f18:	4825      	ldr	r0, [pc, #148]	; (24054fb0 <HAL_ADC_IRQHandler+0x430>)
24054f1a:	f7ff f8bf 	bl	2405409c <LL_ADC_GetMultiDMATransfer>
24054f1e:	4603      	mov	r3, r0
24054f20:	2b00      	cmp	r3, #0
24054f22:	d00b      	beq.n	24054f3c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
24054f24:	2301      	movs	r3, #1
24054f26:	627b      	str	r3, [r7, #36]	; 0x24
24054f28:	e008      	b.n	24054f3c <HAL_ADC_IRQHandler+0x3bc>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
24054f2a:	687b      	ldr	r3, [r7, #4]
24054f2c:	681b      	ldr	r3, [r3, #0]
24054f2e:	68db      	ldr	r3, [r3, #12]
24054f30:	f003 0303 	and.w	r3, r3, #3
24054f34:	2b00      	cmp	r3, #0
24054f36:	d001      	beq.n	24054f3c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
24054f38:	2301      	movs	r3, #1
24054f3a:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
24054f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24054f3e:	2b01      	cmp	r3, #1
24054f40:	d10e      	bne.n	24054f60 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
24054f42:	687b      	ldr	r3, [r7, #4]
24054f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054f46:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
24054f4a:	687b      	ldr	r3, [r7, #4]
24054f4c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
24054f4e:	687b      	ldr	r3, [r7, #4]
24054f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24054f52:	f043 0202 	orr.w	r2, r3, #2
24054f56:	687b      	ldr	r3, [r7, #4]
24054f58:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
24054f5a:	6878      	ldr	r0, [r7, #4]
24054f5c:	f000 f834 	bl	24054fc8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
24054f60:	687b      	ldr	r3, [r7, #4]
24054f62:	681b      	ldr	r3, [r3, #0]
24054f64:	2210      	movs	r2, #16
24054f66:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
24054f68:	69fb      	ldr	r3, [r7, #28]
24054f6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
24054f6e:	2b00      	cmp	r3, #0
24054f70:	d018      	beq.n	24054fa4 <HAL_ADC_IRQHandler+0x424>
24054f72:	69bb      	ldr	r3, [r7, #24]
24054f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
24054f78:	2b00      	cmp	r3, #0
24054f7a:	d013      	beq.n	24054fa4 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
24054f7c:	687b      	ldr	r3, [r7, #4]
24054f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054f80:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
24054f84:	687b      	ldr	r3, [r7, #4]
24054f86:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
24054f88:	687b      	ldr	r3, [r7, #4]
24054f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24054f8c:	f043 0208 	orr.w	r2, r3, #8
24054f90:	687b      	ldr	r3, [r7, #4]
24054f92:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
24054f94:	687b      	ldr	r3, [r7, #4]
24054f96:	681b      	ldr	r3, [r3, #0]
24054f98:	f44f 6280 	mov.w	r2, #1024	; 0x400
24054f9c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
24054f9e:	6878      	ldr	r0, [r7, #4]
24054fa0:	f000 fd98 	bl	24055ad4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
24054fa4:	bf00      	nop
24054fa6:	3728      	adds	r7, #40	; 0x28
24054fa8:	46bd      	mov	sp, r7
24054faa:	bd80      	pop	{r7, pc}
24054fac:	40022000 	.word	0x40022000
24054fb0:	40022300 	.word	0x40022300

24054fb4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
24054fb4:	b480      	push	{r7}
24054fb6:	b083      	sub	sp, #12
24054fb8:	af00      	add	r7, sp, #0
24054fba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
24054fbc:	bf00      	nop
24054fbe:	370c      	adds	r7, #12
24054fc0:	46bd      	mov	sp, r7
24054fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
24054fc6:	4770      	bx	lr

24054fc8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
24054fc8:	b480      	push	{r7}
24054fca:	b083      	sub	sp, #12
24054fcc:	af00      	add	r7, sp, #0
24054fce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
24054fd0:	bf00      	nop
24054fd2:	370c      	adds	r7, #12
24054fd4:	46bd      	mov	sp, r7
24054fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
24054fda:	4770      	bx	lr

24054fdc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
24054fdc:	b590      	push	{r4, r7, lr}
24054fde:	b0a1      	sub	sp, #132	; 0x84
24054fe0:	af00      	add	r7, sp, #0
24054fe2:	6078      	str	r0, [r7, #4]
24054fe4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
24054fe6:	2300      	movs	r3, #0
24054fe8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
24054fec:	2300      	movs	r3, #0
24054fee:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
24054ff0:	683b      	ldr	r3, [r7, #0]
24054ff2:	68db      	ldr	r3, [r3, #12]
24054ff4:	4a9a      	ldr	r2, [pc, #616]	; (24055260 <HAL_ADC_ConfigChannel+0x284>)
24054ff6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
24054ff8:	687b      	ldr	r3, [r7, #4]
24054ffa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
24054ffe:	2b01      	cmp	r3, #1
24055000:	d101      	bne.n	24055006 <HAL_ADC_ConfigChannel+0x2a>
24055002:	2302      	movs	r3, #2
24055004:	e2bc      	b.n	24055580 <HAL_ADC_ConfigChannel+0x5a4>
24055006:	687b      	ldr	r3, [r7, #4]
24055008:	2201      	movs	r2, #1
2405500a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
2405500e:	687b      	ldr	r3, [r7, #4]
24055010:	681b      	ldr	r3, [r3, #0]
24055012:	4618      	mov	r0, r3
24055014:	f7ff f914 	bl	24054240 <LL_ADC_REG_IsConversionOngoing>
24055018:	4603      	mov	r3, r0
2405501a:	2b00      	cmp	r3, #0
2405501c:	f040 82a1 	bne.w	24055562 <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
24055020:	683b      	ldr	r3, [r7, #0]
24055022:	681b      	ldr	r3, [r3, #0]
24055024:	f3c3 0313 	ubfx	r3, r3, #0, #20
24055028:	2b00      	cmp	r3, #0
2405502a:	d108      	bne.n	2405503e <HAL_ADC_ConfigChannel+0x62>
2405502c:	683b      	ldr	r3, [r7, #0]
2405502e:	681b      	ldr	r3, [r3, #0]
24055030:	0e9b      	lsrs	r3, r3, #26
24055032:	f003 031f 	and.w	r3, r3, #31
24055036:	2201      	movs	r2, #1
24055038:	fa02 f303 	lsl.w	r3, r2, r3
2405503c:	e016      	b.n	2405506c <HAL_ADC_ConfigChannel+0x90>
2405503e:	683b      	ldr	r3, [r7, #0]
24055040:	681b      	ldr	r3, [r3, #0]
24055042:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
24055044:	6e7b      	ldr	r3, [r7, #100]	; 0x64
24055046:	fa93 f3a3 	rbit	r3, r3
2405504a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
2405504c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
2405504e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
24055050:	6ebb      	ldr	r3, [r7, #104]	; 0x68
24055052:	2b00      	cmp	r3, #0
24055054:	d101      	bne.n	2405505a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
24055056:	2320      	movs	r3, #32
24055058:	e003      	b.n	24055062 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
2405505a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
2405505c:	fab3 f383 	clz	r3, r3
24055060:	b2db      	uxtb	r3, r3
24055062:	f003 031f 	and.w	r3, r3, #31
24055066:	2201      	movs	r2, #1
24055068:	fa02 f303 	lsl.w	r3, r2, r3
2405506c:	687a      	ldr	r2, [r7, #4]
2405506e:	6812      	ldr	r2, [r2, #0]
24055070:	69d1      	ldr	r1, [r2, #28]
24055072:	687a      	ldr	r2, [r7, #4]
24055074:	6812      	ldr	r2, [r2, #0]
24055076:	430b      	orrs	r3, r1
24055078:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
2405507a:	687b      	ldr	r3, [r7, #4]
2405507c:	6818      	ldr	r0, [r3, #0]
2405507e:	683b      	ldr	r3, [r7, #0]
24055080:	6859      	ldr	r1, [r3, #4]
24055082:	683b      	ldr	r3, [r7, #0]
24055084:	681b      	ldr	r3, [r3, #0]
24055086:	461a      	mov	r2, r3
24055088:	f7fe ff6b 	bl	24053f62 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
2405508c:	687b      	ldr	r3, [r7, #4]
2405508e:	681b      	ldr	r3, [r3, #0]
24055090:	4618      	mov	r0, r3
24055092:	f7ff f8d5 	bl	24054240 <LL_ADC_REG_IsConversionOngoing>
24055096:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
24055098:	687b      	ldr	r3, [r7, #4]
2405509a:	681b      	ldr	r3, [r3, #0]
2405509c:	4618      	mov	r0, r3
2405509e:	f7ff f8f7 	bl	24054290 <LL_ADC_INJ_IsConversionOngoing>
240550a2:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
240550a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
240550a6:	2b00      	cmp	r3, #0
240550a8:	f040 80a0 	bne.w	240551ec <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
240550ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
240550ae:	2b00      	cmp	r3, #0
240550b0:	f040 809c 	bne.w	240551ec <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
240550b4:	687b      	ldr	r3, [r7, #4]
240550b6:	6818      	ldr	r0, [r3, #0]
240550b8:	683b      	ldr	r3, [r7, #0]
240550ba:	6819      	ldr	r1, [r3, #0]
240550bc:	683b      	ldr	r3, [r7, #0]
240550be:	689b      	ldr	r3, [r3, #8]
240550c0:	461a      	mov	r2, r3
240550c2:	f7fe ff8d 	bl	24053fe0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
240550c6:	687b      	ldr	r3, [r7, #4]
240550c8:	681b      	ldr	r3, [r3, #0]
240550ca:	68db      	ldr	r3, [r3, #12]
240550cc:	f003 0310 	and.w	r3, r3, #16
240550d0:	2b00      	cmp	r3, #0
240550d2:	d10b      	bne.n	240550ec <HAL_ADC_ConfigChannel+0x110>
240550d4:	683b      	ldr	r3, [r7, #0]
240550d6:	695a      	ldr	r2, [r3, #20]
240550d8:	687b      	ldr	r3, [r7, #4]
240550da:	681b      	ldr	r3, [r3, #0]
240550dc:	68db      	ldr	r3, [r3, #12]
240550de:	089b      	lsrs	r3, r3, #2
240550e0:	f003 0307 	and.w	r3, r3, #7
240550e4:	005b      	lsls	r3, r3, #1
240550e6:	fa02 f303 	lsl.w	r3, r2, r3
240550ea:	e00a      	b.n	24055102 <HAL_ADC_ConfigChannel+0x126>
240550ec:	683b      	ldr	r3, [r7, #0]
240550ee:	695a      	ldr	r2, [r3, #20]
240550f0:	687b      	ldr	r3, [r7, #4]
240550f2:	681b      	ldr	r3, [r3, #0]
240550f4:	68db      	ldr	r3, [r3, #12]
240550f6:	089b      	lsrs	r3, r3, #2
240550f8:	f003 0304 	and.w	r3, r3, #4
240550fc:	005b      	lsls	r3, r3, #1
240550fe:	fa02 f303 	lsl.w	r3, r2, r3
24055102:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
24055104:	683b      	ldr	r3, [r7, #0]
24055106:	691b      	ldr	r3, [r3, #16]
24055108:	2b04      	cmp	r3, #4
2405510a:	d027      	beq.n	2405515c <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
2405510c:	687b      	ldr	r3, [r7, #4]
2405510e:	6818      	ldr	r0, [r3, #0]
24055110:	683b      	ldr	r3, [r7, #0]
24055112:	6919      	ldr	r1, [r3, #16]
24055114:	683b      	ldr	r3, [r7, #0]
24055116:	681a      	ldr	r2, [r3, #0]
24055118:	6f3b      	ldr	r3, [r7, #112]	; 0x70
2405511a:	f7fe febb 	bl	24053e94 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
2405511e:	687b      	ldr	r3, [r7, #4]
24055120:	6818      	ldr	r0, [r3, #0]
24055122:	683b      	ldr	r3, [r7, #0]
24055124:	6919      	ldr	r1, [r3, #16]
24055126:	683b      	ldr	r3, [r7, #0]
24055128:	7e5b      	ldrb	r3, [r3, #25]
2405512a:	2b01      	cmp	r3, #1
2405512c:	d102      	bne.n	24055134 <HAL_ADC_ConfigChannel+0x158>
2405512e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
24055132:	e000      	b.n	24055136 <HAL_ADC_ConfigChannel+0x15a>
24055134:	2300      	movs	r3, #0
24055136:	461a      	mov	r2, r3
24055138:	f7fe fee5 	bl	24053f06 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
2405513c:	687b      	ldr	r3, [r7, #4]
2405513e:	6818      	ldr	r0, [r3, #0]
24055140:	683b      	ldr	r3, [r7, #0]
24055142:	6919      	ldr	r1, [r3, #16]
24055144:	683b      	ldr	r3, [r7, #0]
24055146:	7e1b      	ldrb	r3, [r3, #24]
24055148:	2b01      	cmp	r3, #1
2405514a:	d102      	bne.n	24055152 <HAL_ADC_ConfigChannel+0x176>
2405514c:	f44f 6300 	mov.w	r3, #2048	; 0x800
24055150:	e000      	b.n	24055154 <HAL_ADC_ConfigChannel+0x178>
24055152:	2300      	movs	r3, #0
24055154:	461a      	mov	r2, r3
24055156:	f7fe febd 	bl	24053ed4 <LL_ADC_SetDataRightShift>
2405515a:	e047      	b.n	240551ec <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
2405515c:	687b      	ldr	r3, [r7, #4]
2405515e:	681b      	ldr	r3, [r3, #0]
24055160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24055162:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
24055166:	683b      	ldr	r3, [r7, #0]
24055168:	681b      	ldr	r3, [r3, #0]
2405516a:	069b      	lsls	r3, r3, #26
2405516c:	429a      	cmp	r2, r3
2405516e:	d107      	bne.n	24055180 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
24055170:	687b      	ldr	r3, [r7, #4]
24055172:	681b      	ldr	r3, [r3, #0]
24055174:	6e1a      	ldr	r2, [r3, #96]	; 0x60
24055176:	687b      	ldr	r3, [r7, #4]
24055178:	681b      	ldr	r3, [r3, #0]
2405517a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
2405517e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
24055180:	687b      	ldr	r3, [r7, #4]
24055182:	681b      	ldr	r3, [r3, #0]
24055184:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24055186:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
2405518a:	683b      	ldr	r3, [r7, #0]
2405518c:	681b      	ldr	r3, [r3, #0]
2405518e:	069b      	lsls	r3, r3, #26
24055190:	429a      	cmp	r2, r3
24055192:	d107      	bne.n	240551a4 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
24055194:	687b      	ldr	r3, [r7, #4]
24055196:	681b      	ldr	r3, [r3, #0]
24055198:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2405519a:	687b      	ldr	r3, [r7, #4]
2405519c:	681b      	ldr	r3, [r3, #0]
2405519e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
240551a2:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
240551a4:	687b      	ldr	r3, [r7, #4]
240551a6:	681b      	ldr	r3, [r3, #0]
240551a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
240551aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
240551ae:	683b      	ldr	r3, [r7, #0]
240551b0:	681b      	ldr	r3, [r3, #0]
240551b2:	069b      	lsls	r3, r3, #26
240551b4:	429a      	cmp	r2, r3
240551b6:	d107      	bne.n	240551c8 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
240551b8:	687b      	ldr	r3, [r7, #4]
240551ba:	681b      	ldr	r3, [r3, #0]
240551bc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
240551be:	687b      	ldr	r3, [r7, #4]
240551c0:	681b      	ldr	r3, [r3, #0]
240551c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
240551c6:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
240551c8:	687b      	ldr	r3, [r7, #4]
240551ca:	681b      	ldr	r3, [r3, #0]
240551cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240551ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
240551d2:	683b      	ldr	r3, [r7, #0]
240551d4:	681b      	ldr	r3, [r3, #0]
240551d6:	069b      	lsls	r3, r3, #26
240551d8:	429a      	cmp	r2, r3
240551da:	d107      	bne.n	240551ec <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
240551dc:	687b      	ldr	r3, [r7, #4]
240551de:	681b      	ldr	r3, [r3, #0]
240551e0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
240551e2:	687b      	ldr	r3, [r7, #4]
240551e4:	681b      	ldr	r3, [r3, #0]
240551e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
240551ea:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
240551ec:	687b      	ldr	r3, [r7, #4]
240551ee:	681b      	ldr	r3, [r3, #0]
240551f0:	4618      	mov	r0, r3
240551f2:	f7fe ffd7 	bl	240541a4 <LL_ADC_IsEnabled>
240551f6:	4603      	mov	r3, r0
240551f8:	2b00      	cmp	r3, #0
240551fa:	f040 81bb 	bne.w	24055574 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
240551fe:	687b      	ldr	r3, [r7, #4]
24055200:	6818      	ldr	r0, [r3, #0]
24055202:	683b      	ldr	r3, [r7, #0]
24055204:	6819      	ldr	r1, [r3, #0]
24055206:	683b      	ldr	r3, [r7, #0]
24055208:	68db      	ldr	r3, [r3, #12]
2405520a:	461a      	mov	r2, r3
2405520c:	f7fe ff14 	bl	24054038 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
24055210:	683b      	ldr	r3, [r7, #0]
24055212:	68db      	ldr	r3, [r3, #12]
24055214:	4a12      	ldr	r2, [pc, #72]	; (24055260 <HAL_ADC_ConfigChannel+0x284>)
24055216:	4293      	cmp	r3, r2
24055218:	f040 8130 	bne.w	2405547c <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
2405521c:	687b      	ldr	r3, [r7, #4]
2405521e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
24055220:	683b      	ldr	r3, [r7, #0]
24055222:	681b      	ldr	r3, [r3, #0]
24055224:	f3c3 0313 	ubfx	r3, r3, #0, #20
24055228:	2b00      	cmp	r3, #0
2405522a:	d10b      	bne.n	24055244 <HAL_ADC_ConfigChannel+0x268>
2405522c:	683b      	ldr	r3, [r7, #0]
2405522e:	681b      	ldr	r3, [r3, #0]
24055230:	0e9b      	lsrs	r3, r3, #26
24055232:	3301      	adds	r3, #1
24055234:	f003 031f 	and.w	r3, r3, #31
24055238:	2b09      	cmp	r3, #9
2405523a:	bf94      	ite	ls
2405523c:	2301      	movls	r3, #1
2405523e:	2300      	movhi	r3, #0
24055240:	b2db      	uxtb	r3, r3
24055242:	e01b      	b.n	2405527c <HAL_ADC_ConfigChannel+0x2a0>
24055244:	683b      	ldr	r3, [r7, #0]
24055246:	681b      	ldr	r3, [r3, #0]
24055248:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
2405524a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
2405524c:	fa93 f3a3 	rbit	r3, r3
24055250:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
24055252:	6d7b      	ldr	r3, [r7, #84]	; 0x54
24055254:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
24055256:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
24055258:	2b00      	cmp	r3, #0
2405525a:	d103      	bne.n	24055264 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
2405525c:	2320      	movs	r3, #32
2405525e:	e005      	b.n	2405526c <HAL_ADC_ConfigChannel+0x290>
24055260:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
24055264:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
24055266:	fab3 f383 	clz	r3, r3
2405526a:	b2db      	uxtb	r3, r3
2405526c:	3301      	adds	r3, #1
2405526e:	f003 031f 	and.w	r3, r3, #31
24055272:	2b09      	cmp	r3, #9
24055274:	bf94      	ite	ls
24055276:	2301      	movls	r3, #1
24055278:	2300      	movhi	r3, #0
2405527a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
2405527c:	2b00      	cmp	r3, #0
2405527e:	d079      	beq.n	24055374 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
24055280:	683b      	ldr	r3, [r7, #0]
24055282:	681b      	ldr	r3, [r3, #0]
24055284:	f3c3 0313 	ubfx	r3, r3, #0, #20
24055288:	2b00      	cmp	r3, #0
2405528a:	d107      	bne.n	2405529c <HAL_ADC_ConfigChannel+0x2c0>
2405528c:	683b      	ldr	r3, [r7, #0]
2405528e:	681b      	ldr	r3, [r3, #0]
24055290:	0e9b      	lsrs	r3, r3, #26
24055292:	3301      	adds	r3, #1
24055294:	069b      	lsls	r3, r3, #26
24055296:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
2405529a:	e015      	b.n	240552c8 <HAL_ADC_ConfigChannel+0x2ec>
2405529c:	683b      	ldr	r3, [r7, #0]
2405529e:	681b      	ldr	r3, [r3, #0]
240552a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
240552a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
240552a4:	fa93 f3a3 	rbit	r3, r3
240552a8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
240552aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
240552ac:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
240552ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
240552b0:	2b00      	cmp	r3, #0
240552b2:	d101      	bne.n	240552b8 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
240552b4:	2320      	movs	r3, #32
240552b6:	e003      	b.n	240552c0 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
240552b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
240552ba:	fab3 f383 	clz	r3, r3
240552be:	b2db      	uxtb	r3, r3
240552c0:	3301      	adds	r3, #1
240552c2:	069b      	lsls	r3, r3, #26
240552c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
240552c8:	683b      	ldr	r3, [r7, #0]
240552ca:	681b      	ldr	r3, [r3, #0]
240552cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
240552d0:	2b00      	cmp	r3, #0
240552d2:	d109      	bne.n	240552e8 <HAL_ADC_ConfigChannel+0x30c>
240552d4:	683b      	ldr	r3, [r7, #0]
240552d6:	681b      	ldr	r3, [r3, #0]
240552d8:	0e9b      	lsrs	r3, r3, #26
240552da:	3301      	adds	r3, #1
240552dc:	f003 031f 	and.w	r3, r3, #31
240552e0:	2101      	movs	r1, #1
240552e2:	fa01 f303 	lsl.w	r3, r1, r3
240552e6:	e017      	b.n	24055318 <HAL_ADC_ConfigChannel+0x33c>
240552e8:	683b      	ldr	r3, [r7, #0]
240552ea:	681b      	ldr	r3, [r3, #0]
240552ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
240552ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
240552f0:	fa93 f3a3 	rbit	r3, r3
240552f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
240552f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
240552f8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
240552fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
240552fc:	2b00      	cmp	r3, #0
240552fe:	d101      	bne.n	24055304 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
24055300:	2320      	movs	r3, #32
24055302:	e003      	b.n	2405530c <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
24055304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
24055306:	fab3 f383 	clz	r3, r3
2405530a:	b2db      	uxtb	r3, r3
2405530c:	3301      	adds	r3, #1
2405530e:	f003 031f 	and.w	r3, r3, #31
24055312:	2101      	movs	r1, #1
24055314:	fa01 f303 	lsl.w	r3, r1, r3
24055318:	ea42 0103 	orr.w	r1, r2, r3
2405531c:	683b      	ldr	r3, [r7, #0]
2405531e:	681b      	ldr	r3, [r3, #0]
24055320:	f3c3 0313 	ubfx	r3, r3, #0, #20
24055324:	2b00      	cmp	r3, #0
24055326:	d10a      	bne.n	2405533e <HAL_ADC_ConfigChannel+0x362>
24055328:	683b      	ldr	r3, [r7, #0]
2405532a:	681b      	ldr	r3, [r3, #0]
2405532c:	0e9b      	lsrs	r3, r3, #26
2405532e:	3301      	adds	r3, #1
24055330:	f003 021f 	and.w	r2, r3, #31
24055334:	4613      	mov	r3, r2
24055336:	005b      	lsls	r3, r3, #1
24055338:	4413      	add	r3, r2
2405533a:	051b      	lsls	r3, r3, #20
2405533c:	e018      	b.n	24055370 <HAL_ADC_ConfigChannel+0x394>
2405533e:	683b      	ldr	r3, [r7, #0]
24055340:	681b      	ldr	r3, [r3, #0]
24055342:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
24055344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24055346:	fa93 f3a3 	rbit	r3, r3
2405534a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
2405534c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405534e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
24055350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24055352:	2b00      	cmp	r3, #0
24055354:	d101      	bne.n	2405535a <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
24055356:	2320      	movs	r3, #32
24055358:	e003      	b.n	24055362 <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
2405535a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405535c:	fab3 f383 	clz	r3, r3
24055360:	b2db      	uxtb	r3, r3
24055362:	3301      	adds	r3, #1
24055364:	f003 021f 	and.w	r2, r3, #31
24055368:	4613      	mov	r3, r2
2405536a:	005b      	lsls	r3, r3, #1
2405536c:	4413      	add	r3, r2
2405536e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
24055370:	430b      	orrs	r3, r1
24055372:	e07e      	b.n	24055472 <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
24055374:	683b      	ldr	r3, [r7, #0]
24055376:	681b      	ldr	r3, [r3, #0]
24055378:	f3c3 0313 	ubfx	r3, r3, #0, #20
2405537c:	2b00      	cmp	r3, #0
2405537e:	d107      	bne.n	24055390 <HAL_ADC_ConfigChannel+0x3b4>
24055380:	683b      	ldr	r3, [r7, #0]
24055382:	681b      	ldr	r3, [r3, #0]
24055384:	0e9b      	lsrs	r3, r3, #26
24055386:	3301      	adds	r3, #1
24055388:	069b      	lsls	r3, r3, #26
2405538a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
2405538e:	e015      	b.n	240553bc <HAL_ADC_ConfigChannel+0x3e0>
24055390:	683b      	ldr	r3, [r7, #0]
24055392:	681b      	ldr	r3, [r3, #0]
24055394:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
24055396:	6abb      	ldr	r3, [r7, #40]	; 0x28
24055398:	fa93 f3a3 	rbit	r3, r3
2405539c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
2405539e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240553a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
240553a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
240553a4:	2b00      	cmp	r3, #0
240553a6:	d101      	bne.n	240553ac <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
240553a8:	2320      	movs	r3, #32
240553aa:	e003      	b.n	240553b4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
240553ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
240553ae:	fab3 f383 	clz	r3, r3
240553b2:	b2db      	uxtb	r3, r3
240553b4:	3301      	adds	r3, #1
240553b6:	069b      	lsls	r3, r3, #26
240553b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
240553bc:	683b      	ldr	r3, [r7, #0]
240553be:	681b      	ldr	r3, [r3, #0]
240553c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
240553c4:	2b00      	cmp	r3, #0
240553c6:	d109      	bne.n	240553dc <HAL_ADC_ConfigChannel+0x400>
240553c8:	683b      	ldr	r3, [r7, #0]
240553ca:	681b      	ldr	r3, [r3, #0]
240553cc:	0e9b      	lsrs	r3, r3, #26
240553ce:	3301      	adds	r3, #1
240553d0:	f003 031f 	and.w	r3, r3, #31
240553d4:	2101      	movs	r1, #1
240553d6:	fa01 f303 	lsl.w	r3, r1, r3
240553da:	e017      	b.n	2405540c <HAL_ADC_ConfigChannel+0x430>
240553dc:	683b      	ldr	r3, [r7, #0]
240553de:	681b      	ldr	r3, [r3, #0]
240553e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
240553e2:	69fb      	ldr	r3, [r7, #28]
240553e4:	fa93 f3a3 	rbit	r3, r3
240553e8:	61bb      	str	r3, [r7, #24]
  return result;
240553ea:	69bb      	ldr	r3, [r7, #24]
240553ec:	623b      	str	r3, [r7, #32]
  if (value == 0U)
240553ee:	6a3b      	ldr	r3, [r7, #32]
240553f0:	2b00      	cmp	r3, #0
240553f2:	d101      	bne.n	240553f8 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
240553f4:	2320      	movs	r3, #32
240553f6:	e003      	b.n	24055400 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
240553f8:	6a3b      	ldr	r3, [r7, #32]
240553fa:	fab3 f383 	clz	r3, r3
240553fe:	b2db      	uxtb	r3, r3
24055400:	3301      	adds	r3, #1
24055402:	f003 031f 	and.w	r3, r3, #31
24055406:	2101      	movs	r1, #1
24055408:	fa01 f303 	lsl.w	r3, r1, r3
2405540c:	ea42 0103 	orr.w	r1, r2, r3
24055410:	683b      	ldr	r3, [r7, #0]
24055412:	681b      	ldr	r3, [r3, #0]
24055414:	f3c3 0313 	ubfx	r3, r3, #0, #20
24055418:	2b00      	cmp	r3, #0
2405541a:	d10d      	bne.n	24055438 <HAL_ADC_ConfigChannel+0x45c>
2405541c:	683b      	ldr	r3, [r7, #0]
2405541e:	681b      	ldr	r3, [r3, #0]
24055420:	0e9b      	lsrs	r3, r3, #26
24055422:	3301      	adds	r3, #1
24055424:	f003 021f 	and.w	r2, r3, #31
24055428:	4613      	mov	r3, r2
2405542a:	005b      	lsls	r3, r3, #1
2405542c:	4413      	add	r3, r2
2405542e:	3b1e      	subs	r3, #30
24055430:	051b      	lsls	r3, r3, #20
24055432:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
24055436:	e01b      	b.n	24055470 <HAL_ADC_ConfigChannel+0x494>
24055438:	683b      	ldr	r3, [r7, #0]
2405543a:	681b      	ldr	r3, [r3, #0]
2405543c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
2405543e:	693b      	ldr	r3, [r7, #16]
24055440:	fa93 f3a3 	rbit	r3, r3
24055444:	60fb      	str	r3, [r7, #12]
  return result;
24055446:	68fb      	ldr	r3, [r7, #12]
24055448:	617b      	str	r3, [r7, #20]
  if (value == 0U)
2405544a:	697b      	ldr	r3, [r7, #20]
2405544c:	2b00      	cmp	r3, #0
2405544e:	d101      	bne.n	24055454 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
24055450:	2320      	movs	r3, #32
24055452:	e003      	b.n	2405545c <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
24055454:	697b      	ldr	r3, [r7, #20]
24055456:	fab3 f383 	clz	r3, r3
2405545a:	b2db      	uxtb	r3, r3
2405545c:	3301      	adds	r3, #1
2405545e:	f003 021f 	and.w	r2, r3, #31
24055462:	4613      	mov	r3, r2
24055464:	005b      	lsls	r3, r3, #1
24055466:	4413      	add	r3, r2
24055468:	3b1e      	subs	r3, #30
2405546a:	051b      	lsls	r3, r3, #20
2405546c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
24055470:	430b      	orrs	r3, r1
24055472:	683a      	ldr	r2, [r7, #0]
24055474:	6892      	ldr	r2, [r2, #8]
24055476:	4619      	mov	r1, r3
24055478:	f7fe fdb2 	bl	24053fe0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
2405547c:	683b      	ldr	r3, [r7, #0]
2405547e:	681b      	ldr	r3, [r3, #0]
24055480:	2b00      	cmp	r3, #0
24055482:	da77      	bge.n	24055574 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
24055484:	4840      	ldr	r0, [pc, #256]	; (24055588 <HAL_ADC_ConfigChannel+0x5ac>)
24055486:	f7fe fcf7 	bl	24053e78 <LL_ADC_GetCommonPathInternalCh>
2405548a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
2405548c:	483f      	ldr	r0, [pc, #252]	; (2405558c <HAL_ADC_ConfigChannel+0x5b0>)
2405548e:	f7fe fe89 	bl	240541a4 <LL_ADC_IsEnabled>
24055492:	4604      	mov	r4, r0
24055494:	483e      	ldr	r0, [pc, #248]	; (24055590 <HAL_ADC_ConfigChannel+0x5b4>)
24055496:	f7fe fe85 	bl	240541a4 <LL_ADC_IsEnabled>
2405549a:	4603      	mov	r3, r0
2405549c:	4323      	orrs	r3, r4
2405549e:	2b00      	cmp	r3, #0
240554a0:	d155      	bne.n	2405554e <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
240554a2:	683b      	ldr	r3, [r7, #0]
240554a4:	681b      	ldr	r3, [r3, #0]
240554a6:	4a3b      	ldr	r2, [pc, #236]	; (24055594 <HAL_ADC_ConfigChannel+0x5b8>)
240554a8:	4293      	cmp	r3, r2
240554aa:	d122      	bne.n	240554f2 <HAL_ADC_ConfigChannel+0x516>
240554ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
240554ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
240554b2:	2b00      	cmp	r3, #0
240554b4:	d11d      	bne.n	240554f2 <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
240554b6:	687b      	ldr	r3, [r7, #4]
240554b8:	681b      	ldr	r3, [r3, #0]
240554ba:	4a35      	ldr	r2, [pc, #212]	; (24055590 <HAL_ADC_ConfigChannel+0x5b4>)
240554bc:	4293      	cmp	r3, r2
240554be:	d159      	bne.n	24055574 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
240554c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
240554c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
240554c6:	4619      	mov	r1, r3
240554c8:	482f      	ldr	r0, [pc, #188]	; (24055588 <HAL_ADC_ConfigChannel+0x5ac>)
240554ca:	f7fe fcc2 	bl	24053e52 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
240554ce:	4b32      	ldr	r3, [pc, #200]	; (24055598 <HAL_ADC_ConfigChannel+0x5bc>)
240554d0:	681b      	ldr	r3, [r3, #0]
240554d2:	099b      	lsrs	r3, r3, #6
240554d4:	4a31      	ldr	r2, [pc, #196]	; (2405559c <HAL_ADC_ConfigChannel+0x5c0>)
240554d6:	fba2 2303 	umull	r2, r3, r2, r3
240554da:	099b      	lsrs	r3, r3, #6
240554dc:	3301      	adds	r3, #1
240554de:	005b      	lsls	r3, r3, #1
240554e0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
240554e2:	e002      	b.n	240554ea <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
240554e4:	68bb      	ldr	r3, [r7, #8]
240554e6:	3b01      	subs	r3, #1
240554e8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
240554ea:	68bb      	ldr	r3, [r7, #8]
240554ec:	2b00      	cmp	r3, #0
240554ee:	d1f9      	bne.n	240554e4 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
240554f0:	e040      	b.n	24055574 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
240554f2:	683b      	ldr	r3, [r7, #0]
240554f4:	681b      	ldr	r3, [r3, #0]
240554f6:	4a2a      	ldr	r2, [pc, #168]	; (240555a0 <HAL_ADC_ConfigChannel+0x5c4>)
240554f8:	4293      	cmp	r3, r2
240554fa:	d111      	bne.n	24055520 <HAL_ADC_ConfigChannel+0x544>
240554fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
240554fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
24055502:	2b00      	cmp	r3, #0
24055504:	d10c      	bne.n	24055520 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
24055506:	687b      	ldr	r3, [r7, #4]
24055508:	681b      	ldr	r3, [r3, #0]
2405550a:	4a21      	ldr	r2, [pc, #132]	; (24055590 <HAL_ADC_ConfigChannel+0x5b4>)
2405550c:	4293      	cmp	r3, r2
2405550e:	d131      	bne.n	24055574 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
24055510:	6efb      	ldr	r3, [r7, #108]	; 0x6c
24055512:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
24055516:	4619      	mov	r1, r3
24055518:	481b      	ldr	r0, [pc, #108]	; (24055588 <HAL_ADC_ConfigChannel+0x5ac>)
2405551a:	f7fe fc9a 	bl	24053e52 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
2405551e:	e029      	b.n	24055574 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
24055520:	683b      	ldr	r3, [r7, #0]
24055522:	681b      	ldr	r3, [r3, #0]
24055524:	4a1f      	ldr	r2, [pc, #124]	; (240555a4 <HAL_ADC_ConfigChannel+0x5c8>)
24055526:	4293      	cmp	r3, r2
24055528:	d124      	bne.n	24055574 <HAL_ADC_ConfigChannel+0x598>
2405552a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
2405552c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
24055530:	2b00      	cmp	r3, #0
24055532:	d11f      	bne.n	24055574 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
24055534:	687b      	ldr	r3, [r7, #4]
24055536:	681b      	ldr	r3, [r3, #0]
24055538:	4a15      	ldr	r2, [pc, #84]	; (24055590 <HAL_ADC_ConfigChannel+0x5b4>)
2405553a:	4293      	cmp	r3, r2
2405553c:	d11a      	bne.n	24055574 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
2405553e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
24055540:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
24055544:	4619      	mov	r1, r3
24055546:	4810      	ldr	r0, [pc, #64]	; (24055588 <HAL_ADC_ConfigChannel+0x5ac>)
24055548:	f7fe fc83 	bl	24053e52 <LL_ADC_SetCommonPathInternalCh>
2405554c:	e012      	b.n	24055574 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
2405554e:	687b      	ldr	r3, [r7, #4]
24055550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24055552:	f043 0220 	orr.w	r2, r3, #32
24055556:	687b      	ldr	r3, [r7, #4]
24055558:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
2405555a:	2301      	movs	r3, #1
2405555c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
24055560:	e008      	b.n	24055574 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
24055562:	687b      	ldr	r3, [r7, #4]
24055564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24055566:	f043 0220 	orr.w	r2, r3, #32
2405556a:	687b      	ldr	r3, [r7, #4]
2405556c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
2405556e:	2301      	movs	r3, #1
24055570:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
24055574:	687b      	ldr	r3, [r7, #4]
24055576:	2200      	movs	r2, #0
24055578:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
2405557c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
24055580:	4618      	mov	r0, r3
24055582:	3784      	adds	r7, #132	; 0x84
24055584:	46bd      	mov	sp, r7
24055586:	bd90      	pop	{r4, r7, pc}
24055588:	40022300 	.word	0x40022300
2405558c:	40022000 	.word	0x40022000
24055590:	40022100 	.word	0x40022100
24055594:	cb840000 	.word	0xcb840000
24055598:	20000044 	.word	0x20000044
2405559c:	053e2d63 	.word	0x053e2d63
240555a0:	bac04000 	.word	0xbac04000
240555a4:	cfb80000 	.word	0xcfb80000

240555a8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
240555a8:	b580      	push	{r7, lr}
240555aa:	b088      	sub	sp, #32
240555ac:	af00      	add	r7, sp, #0
240555ae:	6078      	str	r0, [r7, #4]
240555b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
240555b2:	2300      	movs	r3, #0
240555b4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
240555b6:	683b      	ldr	r3, [r7, #0]
240555b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
240555ba:	687b      	ldr	r3, [r7, #4]
240555bc:	681b      	ldr	r3, [r3, #0]
240555be:	4618      	mov	r0, r3
240555c0:	f7fe fe3e 	bl	24054240 <LL_ADC_REG_IsConversionOngoing>
240555c4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
240555c6:	687b      	ldr	r3, [r7, #4]
240555c8:	681b      	ldr	r3, [r3, #0]
240555ca:	4618      	mov	r0, r3
240555cc:	f7fe fe60 	bl	24054290 <LL_ADC_INJ_IsConversionOngoing>
240555d0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
240555d2:	693b      	ldr	r3, [r7, #16]
240555d4:	2b00      	cmp	r3, #0
240555d6:	d103      	bne.n	240555e0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
240555d8:	68fb      	ldr	r3, [r7, #12]
240555da:	2b00      	cmp	r3, #0
240555dc:	f000 8098 	beq.w	24055710 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
240555e0:	687b      	ldr	r3, [r7, #4]
240555e2:	681b      	ldr	r3, [r3, #0]
240555e4:	68db      	ldr	r3, [r3, #12]
240555e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
240555ea:	2b00      	cmp	r3, #0
240555ec:	d02a      	beq.n	24055644 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
240555ee:	687b      	ldr	r3, [r7, #4]
240555f0:	7d5b      	ldrb	r3, [r3, #21]
240555f2:	2b01      	cmp	r3, #1
240555f4:	d126      	bne.n	24055644 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
240555f6:	687b      	ldr	r3, [r7, #4]
240555f8:	7d1b      	ldrb	r3, [r3, #20]
240555fa:	2b01      	cmp	r3, #1
240555fc:	d122      	bne.n	24055644 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
240555fe:	2301      	movs	r3, #1
24055600:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
24055602:	e014      	b.n	2405562e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
24055604:	69fb      	ldr	r3, [r7, #28]
24055606:	4a45      	ldr	r2, [pc, #276]	; (2405571c <ADC_ConversionStop+0x174>)
24055608:	4293      	cmp	r3, r2
2405560a:	d90d      	bls.n	24055628 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
2405560c:	687b      	ldr	r3, [r7, #4]
2405560e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24055610:	f043 0210 	orr.w	r2, r3, #16
24055614:	687b      	ldr	r3, [r7, #4]
24055616:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
24055618:	687b      	ldr	r3, [r7, #4]
2405561a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405561c:	f043 0201 	orr.w	r2, r3, #1
24055620:	687b      	ldr	r3, [r7, #4]
24055622:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
24055624:	2301      	movs	r3, #1
24055626:	e074      	b.n	24055712 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
24055628:	69fb      	ldr	r3, [r7, #28]
2405562a:	3301      	adds	r3, #1
2405562c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
2405562e:	687b      	ldr	r3, [r7, #4]
24055630:	681b      	ldr	r3, [r3, #0]
24055632:	681b      	ldr	r3, [r3, #0]
24055634:	f003 0340 	and.w	r3, r3, #64	; 0x40
24055638:	2b40      	cmp	r3, #64	; 0x40
2405563a:	d1e3      	bne.n	24055604 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
2405563c:	687b      	ldr	r3, [r7, #4]
2405563e:	681b      	ldr	r3, [r3, #0]
24055640:	2240      	movs	r2, #64	; 0x40
24055642:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
24055644:	69bb      	ldr	r3, [r7, #24]
24055646:	2b02      	cmp	r3, #2
24055648:	d014      	beq.n	24055674 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
2405564a:	687b      	ldr	r3, [r7, #4]
2405564c:	681b      	ldr	r3, [r3, #0]
2405564e:	4618      	mov	r0, r3
24055650:	f7fe fdf6 	bl	24054240 <LL_ADC_REG_IsConversionOngoing>
24055654:	4603      	mov	r3, r0
24055656:	2b00      	cmp	r3, #0
24055658:	d00c      	beq.n	24055674 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
2405565a:	687b      	ldr	r3, [r7, #4]
2405565c:	681b      	ldr	r3, [r3, #0]
2405565e:	4618      	mov	r0, r3
24055660:	f7fe fdb3 	bl	240541ca <LL_ADC_IsDisableOngoing>
24055664:	4603      	mov	r3, r0
24055666:	2b00      	cmp	r3, #0
24055668:	d104      	bne.n	24055674 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
2405566a:	687b      	ldr	r3, [r7, #4]
2405566c:	681b      	ldr	r3, [r3, #0]
2405566e:	4618      	mov	r0, r3
24055670:	f7fe fdd2 	bl	24054218 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
24055674:	69bb      	ldr	r3, [r7, #24]
24055676:	2b01      	cmp	r3, #1
24055678:	d014      	beq.n	240556a4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
2405567a:	687b      	ldr	r3, [r7, #4]
2405567c:	681b      	ldr	r3, [r3, #0]
2405567e:	4618      	mov	r0, r3
24055680:	f7fe fe06 	bl	24054290 <LL_ADC_INJ_IsConversionOngoing>
24055684:	4603      	mov	r3, r0
24055686:	2b00      	cmp	r3, #0
24055688:	d00c      	beq.n	240556a4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
2405568a:	687b      	ldr	r3, [r7, #4]
2405568c:	681b      	ldr	r3, [r3, #0]
2405568e:	4618      	mov	r0, r3
24055690:	f7fe fd9b 	bl	240541ca <LL_ADC_IsDisableOngoing>
24055694:	4603      	mov	r3, r0
24055696:	2b00      	cmp	r3, #0
24055698:	d104      	bne.n	240556a4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
2405569a:	687b      	ldr	r3, [r7, #4]
2405569c:	681b      	ldr	r3, [r3, #0]
2405569e:	4618      	mov	r0, r3
240556a0:	f7fe fde2 	bl	24054268 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
240556a4:	69bb      	ldr	r3, [r7, #24]
240556a6:	2b02      	cmp	r3, #2
240556a8:	d005      	beq.n	240556b6 <ADC_ConversionStop+0x10e>
240556aa:	69bb      	ldr	r3, [r7, #24]
240556ac:	2b03      	cmp	r3, #3
240556ae:	d105      	bne.n	240556bc <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
240556b0:	230c      	movs	r3, #12
240556b2:	617b      	str	r3, [r7, #20]
        break;
240556b4:	e005      	b.n	240556c2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
240556b6:	2308      	movs	r3, #8
240556b8:	617b      	str	r3, [r7, #20]
        break;
240556ba:	e002      	b.n	240556c2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
240556bc:	2304      	movs	r3, #4
240556be:	617b      	str	r3, [r7, #20]
        break;
240556c0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
240556c2:	f7fe fb83 	bl	24053dcc <HAL_GetTick>
240556c6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
240556c8:	e01b      	b.n	24055702 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
240556ca:	f7fe fb7f 	bl	24053dcc <HAL_GetTick>
240556ce:	4602      	mov	r2, r0
240556d0:	68bb      	ldr	r3, [r7, #8]
240556d2:	1ad3      	subs	r3, r2, r3
240556d4:	2b05      	cmp	r3, #5
240556d6:	d914      	bls.n	24055702 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
240556d8:	687b      	ldr	r3, [r7, #4]
240556da:	681b      	ldr	r3, [r3, #0]
240556dc:	689a      	ldr	r2, [r3, #8]
240556de:	697b      	ldr	r3, [r7, #20]
240556e0:	4013      	ands	r3, r2
240556e2:	2b00      	cmp	r3, #0
240556e4:	d00d      	beq.n	24055702 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
240556e6:	687b      	ldr	r3, [r7, #4]
240556e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240556ea:	f043 0210 	orr.w	r2, r3, #16
240556ee:	687b      	ldr	r3, [r7, #4]
240556f0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
240556f2:	687b      	ldr	r3, [r7, #4]
240556f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240556f6:	f043 0201 	orr.w	r2, r3, #1
240556fa:	687b      	ldr	r3, [r7, #4]
240556fc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
240556fe:	2301      	movs	r3, #1
24055700:	e007      	b.n	24055712 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
24055702:	687b      	ldr	r3, [r7, #4]
24055704:	681b      	ldr	r3, [r3, #0]
24055706:	689a      	ldr	r2, [r3, #8]
24055708:	697b      	ldr	r3, [r7, #20]
2405570a:	4013      	ands	r3, r2
2405570c:	2b00      	cmp	r3, #0
2405570e:	d1dc      	bne.n	240556ca <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
24055710:	2300      	movs	r3, #0
}
24055712:	4618      	mov	r0, r3
24055714:	3720      	adds	r7, #32
24055716:	46bd      	mov	sp, r7
24055718:	bd80      	pop	{r7, pc}
2405571a:	bf00      	nop
2405571c:	000cdbff 	.word	0x000cdbff

24055720 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
24055720:	b580      	push	{r7, lr}
24055722:	b084      	sub	sp, #16
24055724:	af00      	add	r7, sp, #0
24055726:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
24055728:	687b      	ldr	r3, [r7, #4]
2405572a:	681b      	ldr	r3, [r3, #0]
2405572c:	4618      	mov	r0, r3
2405572e:	f7fe fd39 	bl	240541a4 <LL_ADC_IsEnabled>
24055732:	4603      	mov	r3, r0
24055734:	2b00      	cmp	r3, #0
24055736:	d161      	bne.n	240557fc <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
24055738:	687b      	ldr	r3, [r7, #4]
2405573a:	681b      	ldr	r3, [r3, #0]
2405573c:	689a      	ldr	r2, [r3, #8]
2405573e:	4b32      	ldr	r3, [pc, #200]	; (24055808 <ADC_Enable+0xe8>)
24055740:	4013      	ands	r3, r2
24055742:	2b00      	cmp	r3, #0
24055744:	d00d      	beq.n	24055762 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
24055746:	687b      	ldr	r3, [r7, #4]
24055748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405574a:	f043 0210 	orr.w	r2, r3, #16
2405574e:	687b      	ldr	r3, [r7, #4]
24055750:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
24055752:	687b      	ldr	r3, [r7, #4]
24055754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24055756:	f043 0201 	orr.w	r2, r3, #1
2405575a:	687b      	ldr	r3, [r7, #4]
2405575c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
2405575e:	2301      	movs	r3, #1
24055760:	e04d      	b.n	240557fe <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
24055762:	687b      	ldr	r3, [r7, #4]
24055764:	681b      	ldr	r3, [r3, #0]
24055766:	4618      	mov	r0, r3
24055768:	f7fe fcf4 	bl	24054154 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
2405576c:	f7fe fb2e 	bl	24053dcc <HAL_GetTick>
24055770:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
24055772:	4826      	ldr	r0, [pc, #152]	; (2405580c <ADC_Enable+0xec>)
24055774:	f7fe fc84 	bl	24054080 <LL_ADC_GetMultimode>
24055778:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
2405577a:	687b      	ldr	r3, [r7, #4]
2405577c:	681b      	ldr	r3, [r3, #0]
2405577e:	4a24      	ldr	r2, [pc, #144]	; (24055810 <ADC_Enable+0xf0>)
24055780:	4293      	cmp	r3, r2
24055782:	d002      	beq.n	2405578a <ADC_Enable+0x6a>
24055784:	687b      	ldr	r3, [r7, #4]
24055786:	681b      	ldr	r3, [r3, #0]
24055788:	e000      	b.n	2405578c <ADC_Enable+0x6c>
2405578a:	4b22      	ldr	r3, [pc, #136]	; (24055814 <ADC_Enable+0xf4>)
2405578c:	687a      	ldr	r2, [r7, #4]
2405578e:	6812      	ldr	r2, [r2, #0]
24055790:	4293      	cmp	r3, r2
24055792:	d02c      	beq.n	240557ee <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
24055794:	68bb      	ldr	r3, [r7, #8]
24055796:	2b00      	cmp	r3, #0
24055798:	d130      	bne.n	240557fc <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
2405579a:	e028      	b.n	240557ee <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
2405579c:	687b      	ldr	r3, [r7, #4]
2405579e:	681b      	ldr	r3, [r3, #0]
240557a0:	4618      	mov	r0, r3
240557a2:	f7fe fcff 	bl	240541a4 <LL_ADC_IsEnabled>
240557a6:	4603      	mov	r3, r0
240557a8:	2b00      	cmp	r3, #0
240557aa:	d104      	bne.n	240557b6 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
240557ac:	687b      	ldr	r3, [r7, #4]
240557ae:	681b      	ldr	r3, [r3, #0]
240557b0:	4618      	mov	r0, r3
240557b2:	f7fe fccf 	bl	24054154 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
240557b6:	f7fe fb09 	bl	24053dcc <HAL_GetTick>
240557ba:	4602      	mov	r2, r0
240557bc:	68fb      	ldr	r3, [r7, #12]
240557be:	1ad3      	subs	r3, r2, r3
240557c0:	2b02      	cmp	r3, #2
240557c2:	d914      	bls.n	240557ee <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
240557c4:	687b      	ldr	r3, [r7, #4]
240557c6:	681b      	ldr	r3, [r3, #0]
240557c8:	681b      	ldr	r3, [r3, #0]
240557ca:	f003 0301 	and.w	r3, r3, #1
240557ce:	2b01      	cmp	r3, #1
240557d0:	d00d      	beq.n	240557ee <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
240557d2:	687b      	ldr	r3, [r7, #4]
240557d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240557d6:	f043 0210 	orr.w	r2, r3, #16
240557da:	687b      	ldr	r3, [r7, #4]
240557dc:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
240557de:	687b      	ldr	r3, [r7, #4]
240557e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240557e2:	f043 0201 	orr.w	r2, r3, #1
240557e6:	687b      	ldr	r3, [r7, #4]
240557e8:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
240557ea:	2301      	movs	r3, #1
240557ec:	e007      	b.n	240557fe <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
240557ee:	687b      	ldr	r3, [r7, #4]
240557f0:	681b      	ldr	r3, [r3, #0]
240557f2:	681b      	ldr	r3, [r3, #0]
240557f4:	f003 0301 	and.w	r3, r3, #1
240557f8:	2b01      	cmp	r3, #1
240557fa:	d1cf      	bne.n	2405579c <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
240557fc:	2300      	movs	r3, #0
}
240557fe:	4618      	mov	r0, r3
24055800:	3710      	adds	r7, #16
24055802:	46bd      	mov	sp, r7
24055804:	bd80      	pop	{r7, pc}
24055806:	bf00      	nop
24055808:	8000003f 	.word	0x8000003f
2405580c:	40022300 	.word	0x40022300
24055810:	40022100 	.word	0x40022100
24055814:	40022000 	.word	0x40022000

24055818 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
24055818:	b580      	push	{r7, lr}
2405581a:	b084      	sub	sp, #16
2405581c:	af00      	add	r7, sp, #0
2405581e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
24055820:	687b      	ldr	r3, [r7, #4]
24055822:	681b      	ldr	r3, [r3, #0]
24055824:	4618      	mov	r0, r3
24055826:	f7fe fcd0 	bl	240541ca <LL_ADC_IsDisableOngoing>
2405582a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
2405582c:	687b      	ldr	r3, [r7, #4]
2405582e:	681b      	ldr	r3, [r3, #0]
24055830:	4618      	mov	r0, r3
24055832:	f7fe fcb7 	bl	240541a4 <LL_ADC_IsEnabled>
24055836:	4603      	mov	r3, r0
24055838:	2b00      	cmp	r3, #0
2405583a:	d047      	beq.n	240558cc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
2405583c:	68fb      	ldr	r3, [r7, #12]
2405583e:	2b00      	cmp	r3, #0
24055840:	d144      	bne.n	240558cc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
24055842:	687b      	ldr	r3, [r7, #4]
24055844:	681b      	ldr	r3, [r3, #0]
24055846:	689b      	ldr	r3, [r3, #8]
24055848:	f003 030d 	and.w	r3, r3, #13
2405584c:	2b01      	cmp	r3, #1
2405584e:	d10c      	bne.n	2405586a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
24055850:	687b      	ldr	r3, [r7, #4]
24055852:	681b      	ldr	r3, [r3, #0]
24055854:	4618      	mov	r0, r3
24055856:	f7fe fc91 	bl	2405417c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
2405585a:	687b      	ldr	r3, [r7, #4]
2405585c:	681b      	ldr	r3, [r3, #0]
2405585e:	2203      	movs	r2, #3
24055860:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
24055862:	f7fe fab3 	bl	24053dcc <HAL_GetTick>
24055866:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
24055868:	e029      	b.n	240558be <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
2405586a:	687b      	ldr	r3, [r7, #4]
2405586c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405586e:	f043 0210 	orr.w	r2, r3, #16
24055872:	687b      	ldr	r3, [r7, #4]
24055874:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
24055876:	687b      	ldr	r3, [r7, #4]
24055878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405587a:	f043 0201 	orr.w	r2, r3, #1
2405587e:	687b      	ldr	r3, [r7, #4]
24055880:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
24055882:	2301      	movs	r3, #1
24055884:	e023      	b.n	240558ce <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
24055886:	f7fe faa1 	bl	24053dcc <HAL_GetTick>
2405588a:	4602      	mov	r2, r0
2405588c:	68bb      	ldr	r3, [r7, #8]
2405588e:	1ad3      	subs	r3, r2, r3
24055890:	2b02      	cmp	r3, #2
24055892:	d914      	bls.n	240558be <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
24055894:	687b      	ldr	r3, [r7, #4]
24055896:	681b      	ldr	r3, [r3, #0]
24055898:	689b      	ldr	r3, [r3, #8]
2405589a:	f003 0301 	and.w	r3, r3, #1
2405589e:	2b00      	cmp	r3, #0
240558a0:	d00d      	beq.n	240558be <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
240558a2:	687b      	ldr	r3, [r7, #4]
240558a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240558a6:	f043 0210 	orr.w	r2, r3, #16
240558aa:	687b      	ldr	r3, [r7, #4]
240558ac:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
240558ae:	687b      	ldr	r3, [r7, #4]
240558b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240558b2:	f043 0201 	orr.w	r2, r3, #1
240558b6:	687b      	ldr	r3, [r7, #4]
240558b8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
240558ba:	2301      	movs	r3, #1
240558bc:	e007      	b.n	240558ce <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
240558be:	687b      	ldr	r3, [r7, #4]
240558c0:	681b      	ldr	r3, [r3, #0]
240558c2:	689b      	ldr	r3, [r3, #8]
240558c4:	f003 0301 	and.w	r3, r3, #1
240558c8:	2b00      	cmp	r3, #0
240558ca:	d1dc      	bne.n	24055886 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
240558cc:	2300      	movs	r3, #0
}
240558ce:	4618      	mov	r0, r3
240558d0:	3710      	adds	r7, #16
240558d2:	46bd      	mov	sp, r7
240558d4:	bd80      	pop	{r7, pc}
	...

240558d8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
240558d8:	b580      	push	{r7, lr}
240558da:	b084      	sub	sp, #16
240558dc:	af00      	add	r7, sp, #0
240558de:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
240558e0:	4b60      	ldr	r3, [pc, #384]	; (24055a64 <ADC_ConfigureBoostMode+0x18c>)
240558e2:	689b      	ldr	r3, [r3, #8]
240558e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
240558e8:	2b00      	cmp	r3, #0
240558ea:	d01c      	beq.n	24055926 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
240558ec:	f006 fd84 	bl	2405c3f8 <HAL_RCC_GetHCLKFreq>
240558f0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
240558f2:	687b      	ldr	r3, [r7, #4]
240558f4:	685b      	ldr	r3, [r3, #4]
240558f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
240558fa:	d010      	beq.n	2405591e <ADC_ConfigureBoostMode+0x46>
240558fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
24055900:	d873      	bhi.n	240559ea <ADC_ConfigureBoostMode+0x112>
24055902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24055906:	d002      	beq.n	2405590e <ADC_ConfigureBoostMode+0x36>
24055908:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405590c:	d16d      	bne.n	240559ea <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
2405590e:	687b      	ldr	r3, [r7, #4]
24055910:	685b      	ldr	r3, [r3, #4]
24055912:	0c1b      	lsrs	r3, r3, #16
24055914:	68fa      	ldr	r2, [r7, #12]
24055916:	fbb2 f3f3 	udiv	r3, r2, r3
2405591a:	60fb      	str	r3, [r7, #12]
        break;
2405591c:	e068      	b.n	240559f0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
2405591e:	68fb      	ldr	r3, [r7, #12]
24055920:	089b      	lsrs	r3, r3, #2
24055922:	60fb      	str	r3, [r7, #12]
        break;
24055924:	e064      	b.n	240559f0 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
24055926:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2405592a:	f04f 0100 	mov.w	r1, #0
2405592e:	f007 ff67 	bl	2405d800 <HAL_RCCEx_GetPeriphCLKFreq>
24055932:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
24055934:	687b      	ldr	r3, [r7, #4]
24055936:	685b      	ldr	r3, [r3, #4]
24055938:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
2405593c:	d051      	beq.n	240559e2 <ADC_ConfigureBoostMode+0x10a>
2405593e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
24055942:	d854      	bhi.n	240559ee <ADC_ConfigureBoostMode+0x116>
24055944:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
24055948:	d047      	beq.n	240559da <ADC_ConfigureBoostMode+0x102>
2405594a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
2405594e:	d84e      	bhi.n	240559ee <ADC_ConfigureBoostMode+0x116>
24055950:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
24055954:	d03d      	beq.n	240559d2 <ADC_ConfigureBoostMode+0xfa>
24055956:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
2405595a:	d848      	bhi.n	240559ee <ADC_ConfigureBoostMode+0x116>
2405595c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
24055960:	d033      	beq.n	240559ca <ADC_ConfigureBoostMode+0xf2>
24055962:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
24055966:	d842      	bhi.n	240559ee <ADC_ConfigureBoostMode+0x116>
24055968:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
2405596c:	d029      	beq.n	240559c2 <ADC_ConfigureBoostMode+0xea>
2405596e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
24055972:	d83c      	bhi.n	240559ee <ADC_ConfigureBoostMode+0x116>
24055974:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
24055978:	d01a      	beq.n	240559b0 <ADC_ConfigureBoostMode+0xd8>
2405597a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
2405597e:	d836      	bhi.n	240559ee <ADC_ConfigureBoostMode+0x116>
24055980:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
24055984:	d014      	beq.n	240559b0 <ADC_ConfigureBoostMode+0xd8>
24055986:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
2405598a:	d830      	bhi.n	240559ee <ADC_ConfigureBoostMode+0x116>
2405598c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
24055990:	d00e      	beq.n	240559b0 <ADC_ConfigureBoostMode+0xd8>
24055992:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
24055996:	d82a      	bhi.n	240559ee <ADC_ConfigureBoostMode+0x116>
24055998:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
2405599c:	d008      	beq.n	240559b0 <ADC_ConfigureBoostMode+0xd8>
2405599e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
240559a2:	d824      	bhi.n	240559ee <ADC_ConfigureBoostMode+0x116>
240559a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
240559a8:	d002      	beq.n	240559b0 <ADC_ConfigureBoostMode+0xd8>
240559aa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
240559ae:	d11e      	bne.n	240559ee <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
240559b0:	687b      	ldr	r3, [r7, #4]
240559b2:	685b      	ldr	r3, [r3, #4]
240559b4:	0c9b      	lsrs	r3, r3, #18
240559b6:	005b      	lsls	r3, r3, #1
240559b8:	68fa      	ldr	r2, [r7, #12]
240559ba:	fbb2 f3f3 	udiv	r3, r2, r3
240559be:	60fb      	str	r3, [r7, #12]
        break;
240559c0:	e016      	b.n	240559f0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
240559c2:	68fb      	ldr	r3, [r7, #12]
240559c4:	091b      	lsrs	r3, r3, #4
240559c6:	60fb      	str	r3, [r7, #12]
        break;
240559c8:	e012      	b.n	240559f0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
240559ca:	68fb      	ldr	r3, [r7, #12]
240559cc:	095b      	lsrs	r3, r3, #5
240559ce:	60fb      	str	r3, [r7, #12]
        break;
240559d0:	e00e      	b.n	240559f0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
240559d2:	68fb      	ldr	r3, [r7, #12]
240559d4:	099b      	lsrs	r3, r3, #6
240559d6:	60fb      	str	r3, [r7, #12]
        break;
240559d8:	e00a      	b.n	240559f0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
240559da:	68fb      	ldr	r3, [r7, #12]
240559dc:	09db      	lsrs	r3, r3, #7
240559de:	60fb      	str	r3, [r7, #12]
        break;
240559e0:	e006      	b.n	240559f0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
240559e2:	68fb      	ldr	r3, [r7, #12]
240559e4:	0a1b      	lsrs	r3, r3, #8
240559e6:	60fb      	str	r3, [r7, #12]
        break;
240559e8:	e002      	b.n	240559f0 <ADC_ConfigureBoostMode+0x118>
        break;
240559ea:	bf00      	nop
240559ec:	e000      	b.n	240559f0 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
240559ee:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
240559f0:	68fb      	ldr	r3, [r7, #12]
240559f2:	085b      	lsrs	r3, r3, #1
240559f4:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
240559f6:	68fb      	ldr	r3, [r7, #12]
240559f8:	4a1b      	ldr	r2, [pc, #108]	; (24055a68 <ADC_ConfigureBoostMode+0x190>)
240559fa:	4293      	cmp	r3, r2
240559fc:	d808      	bhi.n	24055a10 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
240559fe:	687b      	ldr	r3, [r7, #4]
24055a00:	681b      	ldr	r3, [r3, #0]
24055a02:	689a      	ldr	r2, [r3, #8]
24055a04:	687b      	ldr	r3, [r7, #4]
24055a06:	681b      	ldr	r3, [r3, #0]
24055a08:	f422 7240 	bic.w	r2, r2, #768	; 0x300
24055a0c:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
24055a0e:	e025      	b.n	24055a5c <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
24055a10:	68fb      	ldr	r3, [r7, #12]
24055a12:	4a16      	ldr	r2, [pc, #88]	; (24055a6c <ADC_ConfigureBoostMode+0x194>)
24055a14:	4293      	cmp	r3, r2
24055a16:	d80a      	bhi.n	24055a2e <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
24055a18:	687b      	ldr	r3, [r7, #4]
24055a1a:	681b      	ldr	r3, [r3, #0]
24055a1c:	689b      	ldr	r3, [r3, #8]
24055a1e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
24055a22:	687b      	ldr	r3, [r7, #4]
24055a24:	681b      	ldr	r3, [r3, #0]
24055a26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
24055a2a:	609a      	str	r2, [r3, #8]
}
24055a2c:	e016      	b.n	24055a5c <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
24055a2e:	68fb      	ldr	r3, [r7, #12]
24055a30:	4a0f      	ldr	r2, [pc, #60]	; (24055a70 <ADC_ConfigureBoostMode+0x198>)
24055a32:	4293      	cmp	r3, r2
24055a34:	d80a      	bhi.n	24055a4c <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
24055a36:	687b      	ldr	r3, [r7, #4]
24055a38:	681b      	ldr	r3, [r3, #0]
24055a3a:	689b      	ldr	r3, [r3, #8]
24055a3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
24055a40:	687b      	ldr	r3, [r7, #4]
24055a42:	681b      	ldr	r3, [r3, #0]
24055a44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
24055a48:	609a      	str	r2, [r3, #8]
}
24055a4a:	e007      	b.n	24055a5c <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
24055a4c:	687b      	ldr	r3, [r7, #4]
24055a4e:	681b      	ldr	r3, [r3, #0]
24055a50:	689a      	ldr	r2, [r3, #8]
24055a52:	687b      	ldr	r3, [r7, #4]
24055a54:	681b      	ldr	r3, [r3, #0]
24055a56:	f442 7240 	orr.w	r2, r2, #768	; 0x300
24055a5a:	609a      	str	r2, [r3, #8]
}
24055a5c:	bf00      	nop
24055a5e:	3710      	adds	r7, #16
24055a60:	46bd      	mov	sp, r7
24055a62:	bd80      	pop	{r7, pc}
24055a64:	40022300 	.word	0x40022300
24055a68:	005f5e10 	.word	0x005f5e10
24055a6c:	00bebc20 	.word	0x00bebc20
24055a70:	017d7840 	.word	0x017d7840

24055a74 <LL_ADC_IsEnabled>:
{
24055a74:	b480      	push	{r7}
24055a76:	b083      	sub	sp, #12
24055a78:	af00      	add	r7, sp, #0
24055a7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
24055a7c:	687b      	ldr	r3, [r7, #4]
24055a7e:	689b      	ldr	r3, [r3, #8]
24055a80:	f003 0301 	and.w	r3, r3, #1
24055a84:	2b01      	cmp	r3, #1
24055a86:	d101      	bne.n	24055a8c <LL_ADC_IsEnabled+0x18>
24055a88:	2301      	movs	r3, #1
24055a8a:	e000      	b.n	24055a8e <LL_ADC_IsEnabled+0x1a>
24055a8c:	2300      	movs	r3, #0
}
24055a8e:	4618      	mov	r0, r3
24055a90:	370c      	adds	r7, #12
24055a92:	46bd      	mov	sp, r7
24055a94:	f85d 7b04 	ldr.w	r7, [sp], #4
24055a98:	4770      	bx	lr

24055a9a <LL_ADC_REG_IsConversionOngoing>:
{
24055a9a:	b480      	push	{r7}
24055a9c:	b083      	sub	sp, #12
24055a9e:	af00      	add	r7, sp, #0
24055aa0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
24055aa2:	687b      	ldr	r3, [r7, #4]
24055aa4:	689b      	ldr	r3, [r3, #8]
24055aa6:	f003 0304 	and.w	r3, r3, #4
24055aaa:	2b04      	cmp	r3, #4
24055aac:	d101      	bne.n	24055ab2 <LL_ADC_REG_IsConversionOngoing+0x18>
24055aae:	2301      	movs	r3, #1
24055ab0:	e000      	b.n	24055ab4 <LL_ADC_REG_IsConversionOngoing+0x1a>
24055ab2:	2300      	movs	r3, #0
}
24055ab4:	4618      	mov	r0, r3
24055ab6:	370c      	adds	r7, #12
24055ab8:	46bd      	mov	sp, r7
24055aba:	f85d 7b04 	ldr.w	r7, [sp], #4
24055abe:	4770      	bx	lr

24055ac0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
24055ac0:	b480      	push	{r7}
24055ac2:	b083      	sub	sp, #12
24055ac4:	af00      	add	r7, sp, #0
24055ac6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
24055ac8:	bf00      	nop
24055aca:	370c      	adds	r7, #12
24055acc:	46bd      	mov	sp, r7
24055ace:	f85d 7b04 	ldr.w	r7, [sp], #4
24055ad2:	4770      	bx	lr

24055ad4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
24055ad4:	b480      	push	{r7}
24055ad6:	b083      	sub	sp, #12
24055ad8:	af00      	add	r7, sp, #0
24055ada:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
24055adc:	bf00      	nop
24055ade:	370c      	adds	r7, #12
24055ae0:	46bd      	mov	sp, r7
24055ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
24055ae6:	4770      	bx	lr

24055ae8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
24055ae8:	b480      	push	{r7}
24055aea:	b083      	sub	sp, #12
24055aec:	af00      	add	r7, sp, #0
24055aee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
24055af0:	bf00      	nop
24055af2:	370c      	adds	r7, #12
24055af4:	46bd      	mov	sp, r7
24055af6:	f85d 7b04 	ldr.w	r7, [sp], #4
24055afa:	4770      	bx	lr

24055afc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
24055afc:	b480      	push	{r7}
24055afe:	b083      	sub	sp, #12
24055b00:	af00      	add	r7, sp, #0
24055b02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
24055b04:	bf00      	nop
24055b06:	370c      	adds	r7, #12
24055b08:	46bd      	mov	sp, r7
24055b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
24055b0e:	4770      	bx	lr

24055b10 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
24055b10:	b480      	push	{r7}
24055b12:	b083      	sub	sp, #12
24055b14:	af00      	add	r7, sp, #0
24055b16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
24055b18:	bf00      	nop
24055b1a:	370c      	adds	r7, #12
24055b1c:	46bd      	mov	sp, r7
24055b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
24055b22:	4770      	bx	lr

24055b24 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
24055b24:	b590      	push	{r4, r7, lr}
24055b26:	b09f      	sub	sp, #124	; 0x7c
24055b28:	af00      	add	r7, sp, #0
24055b2a:	6078      	str	r0, [r7, #4]
24055b2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
24055b2e:	2300      	movs	r3, #0
24055b30:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
24055b34:	687b      	ldr	r3, [r7, #4]
24055b36:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
24055b3a:	2b01      	cmp	r3, #1
24055b3c:	d101      	bne.n	24055b42 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
24055b3e:	2302      	movs	r3, #2
24055b40:	e080      	b.n	24055c44 <HAL_ADCEx_MultiModeConfigChannel+0x120>
24055b42:	687b      	ldr	r3, [r7, #4]
24055b44:	2201      	movs	r2, #1
24055b46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
24055b4a:	2300      	movs	r3, #0
24055b4c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
24055b4e:	2300      	movs	r3, #0
24055b50:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
24055b52:	687b      	ldr	r3, [r7, #4]
24055b54:	681b      	ldr	r3, [r3, #0]
24055b56:	4a3d      	ldr	r2, [pc, #244]	; (24055c4c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
24055b58:	4293      	cmp	r3, r2
24055b5a:	d102      	bne.n	24055b62 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
24055b5c:	4b3c      	ldr	r3, [pc, #240]	; (24055c50 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
24055b5e:	60bb      	str	r3, [r7, #8]
24055b60:	e001      	b.n	24055b66 <HAL_ADCEx_MultiModeConfigChannel+0x42>
24055b62:	2300      	movs	r3, #0
24055b64:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
24055b66:	68bb      	ldr	r3, [r7, #8]
24055b68:	2b00      	cmp	r3, #0
24055b6a:	d10b      	bne.n	24055b84 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
24055b6c:	687b      	ldr	r3, [r7, #4]
24055b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24055b70:	f043 0220 	orr.w	r2, r3, #32
24055b74:	687b      	ldr	r3, [r7, #4]
24055b76:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
24055b78:	687b      	ldr	r3, [r7, #4]
24055b7a:	2200      	movs	r2, #0
24055b7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
24055b80:	2301      	movs	r3, #1
24055b82:	e05f      	b.n	24055c44 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
24055b84:	68bb      	ldr	r3, [r7, #8]
24055b86:	4618      	mov	r0, r3
24055b88:	f7ff ff87 	bl	24055a9a <LL_ADC_REG_IsConversionOngoing>
24055b8c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
24055b8e:	687b      	ldr	r3, [r7, #4]
24055b90:	681b      	ldr	r3, [r3, #0]
24055b92:	4618      	mov	r0, r3
24055b94:	f7ff ff81 	bl	24055a9a <LL_ADC_REG_IsConversionOngoing>
24055b98:	4603      	mov	r3, r0
24055b9a:	2b00      	cmp	r3, #0
24055b9c:	d141      	bne.n	24055c22 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
24055b9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
24055ba0:	2b00      	cmp	r3, #0
24055ba2:	d13e      	bne.n	24055c22 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
24055ba4:	4b2b      	ldr	r3, [pc, #172]	; (24055c54 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
24055ba6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
24055ba8:	683b      	ldr	r3, [r7, #0]
24055baa:	681b      	ldr	r3, [r3, #0]
24055bac:	2b00      	cmp	r3, #0
24055bae:	d020      	beq.n	24055bf2 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
24055bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
24055bb2:	689b      	ldr	r3, [r3, #8]
24055bb4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
24055bb8:	683b      	ldr	r3, [r7, #0]
24055bba:	685b      	ldr	r3, [r3, #4]
24055bbc:	431a      	orrs	r2, r3
24055bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
24055bc0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
24055bc2:	4822      	ldr	r0, [pc, #136]	; (24055c4c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
24055bc4:	f7ff ff56 	bl	24055a74 <LL_ADC_IsEnabled>
24055bc8:	4604      	mov	r4, r0
24055bca:	4821      	ldr	r0, [pc, #132]	; (24055c50 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
24055bcc:	f7ff ff52 	bl	24055a74 <LL_ADC_IsEnabled>
24055bd0:	4603      	mov	r3, r0
24055bd2:	4323      	orrs	r3, r4
24055bd4:	2b00      	cmp	r3, #0
24055bd6:	d12e      	bne.n	24055c36 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
24055bd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
24055bda:	689a      	ldr	r2, [r3, #8]
24055bdc:	4b1e      	ldr	r3, [pc, #120]	; (24055c58 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
24055bde:	4013      	ands	r3, r2
24055be0:	683a      	ldr	r2, [r7, #0]
24055be2:	6811      	ldr	r1, [r2, #0]
24055be4:	683a      	ldr	r2, [r7, #0]
24055be6:	6892      	ldr	r2, [r2, #8]
24055be8:	430a      	orrs	r2, r1
24055bea:	431a      	orrs	r2, r3
24055bec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
24055bee:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
24055bf0:	e021      	b.n	24055c36 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
24055bf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
24055bf4:	689b      	ldr	r3, [r3, #8]
24055bf6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
24055bfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
24055bfc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
24055bfe:	4813      	ldr	r0, [pc, #76]	; (24055c4c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
24055c00:	f7ff ff38 	bl	24055a74 <LL_ADC_IsEnabled>
24055c04:	4604      	mov	r4, r0
24055c06:	4812      	ldr	r0, [pc, #72]	; (24055c50 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
24055c08:	f7ff ff34 	bl	24055a74 <LL_ADC_IsEnabled>
24055c0c:	4603      	mov	r3, r0
24055c0e:	4323      	orrs	r3, r4
24055c10:	2b00      	cmp	r3, #0
24055c12:	d110      	bne.n	24055c36 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
24055c14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
24055c16:	689a      	ldr	r2, [r3, #8]
24055c18:	4b0f      	ldr	r3, [pc, #60]	; (24055c58 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
24055c1a:	4013      	ands	r3, r2
24055c1c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
24055c1e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
24055c20:	e009      	b.n	24055c36 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
24055c22:	687b      	ldr	r3, [r7, #4]
24055c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24055c26:	f043 0220 	orr.w	r2, r3, #32
24055c2a:	687b      	ldr	r3, [r7, #4]
24055c2c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
24055c2e:	2301      	movs	r3, #1
24055c30:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
24055c34:	e000      	b.n	24055c38 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
24055c36:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
24055c38:	687b      	ldr	r3, [r7, #4]
24055c3a:	2200      	movs	r2, #0
24055c3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
24055c40:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
24055c44:	4618      	mov	r0, r3
24055c46:	377c      	adds	r7, #124	; 0x7c
24055c48:	46bd      	mov	sp, r7
24055c4a:	bd90      	pop	{r4, r7, pc}
24055c4c:	40022000 	.word	0x40022000
24055c50:	40022100 	.word	0x40022100
24055c54:	40022300 	.word	0x40022300
24055c58:	fffff0e0 	.word	0xfffff0e0

24055c5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
24055c5c:	b480      	push	{r7}
24055c5e:	b085      	sub	sp, #20
24055c60:	af00      	add	r7, sp, #0
24055c62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
24055c64:	687b      	ldr	r3, [r7, #4]
24055c66:	f003 0307 	and.w	r3, r3, #7
24055c6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
24055c6c:	4b0b      	ldr	r3, [pc, #44]	; (24055c9c <__NVIC_SetPriorityGrouping+0x40>)
24055c6e:	68db      	ldr	r3, [r3, #12]
24055c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
24055c72:	68ba      	ldr	r2, [r7, #8]
24055c74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
24055c78:	4013      	ands	r3, r2
24055c7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
24055c7c:	68fb      	ldr	r3, [r7, #12]
24055c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
24055c80:	68bb      	ldr	r3, [r7, #8]
24055c82:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
24055c84:	4b06      	ldr	r3, [pc, #24]	; (24055ca0 <__NVIC_SetPriorityGrouping+0x44>)
24055c86:	4313      	orrs	r3, r2
24055c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
24055c8a:	4a04      	ldr	r2, [pc, #16]	; (24055c9c <__NVIC_SetPriorityGrouping+0x40>)
24055c8c:	68bb      	ldr	r3, [r7, #8]
24055c8e:	60d3      	str	r3, [r2, #12]
}
24055c90:	bf00      	nop
24055c92:	3714      	adds	r7, #20
24055c94:	46bd      	mov	sp, r7
24055c96:	f85d 7b04 	ldr.w	r7, [sp], #4
24055c9a:	4770      	bx	lr
24055c9c:	e000ed00 	.word	0xe000ed00
24055ca0:	05fa0000 	.word	0x05fa0000

24055ca4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
24055ca4:	b480      	push	{r7}
24055ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
24055ca8:	4b04      	ldr	r3, [pc, #16]	; (24055cbc <__NVIC_GetPriorityGrouping+0x18>)
24055caa:	68db      	ldr	r3, [r3, #12]
24055cac:	0a1b      	lsrs	r3, r3, #8
24055cae:	f003 0307 	and.w	r3, r3, #7
}
24055cb2:	4618      	mov	r0, r3
24055cb4:	46bd      	mov	sp, r7
24055cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
24055cba:	4770      	bx	lr
24055cbc:	e000ed00 	.word	0xe000ed00

24055cc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
24055cc0:	b480      	push	{r7}
24055cc2:	b083      	sub	sp, #12
24055cc4:	af00      	add	r7, sp, #0
24055cc6:	4603      	mov	r3, r0
24055cc8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
24055cca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24055cce:	2b00      	cmp	r3, #0
24055cd0:	db0b      	blt.n	24055cea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
24055cd2:	88fb      	ldrh	r3, [r7, #6]
24055cd4:	f003 021f 	and.w	r2, r3, #31
24055cd8:	4907      	ldr	r1, [pc, #28]	; (24055cf8 <__NVIC_EnableIRQ+0x38>)
24055cda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24055cde:	095b      	lsrs	r3, r3, #5
24055ce0:	2001      	movs	r0, #1
24055ce2:	fa00 f202 	lsl.w	r2, r0, r2
24055ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
24055cea:	bf00      	nop
24055cec:	370c      	adds	r7, #12
24055cee:	46bd      	mov	sp, r7
24055cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
24055cf4:	4770      	bx	lr
24055cf6:	bf00      	nop
24055cf8:	e000e100 	.word	0xe000e100

24055cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
24055cfc:	b480      	push	{r7}
24055cfe:	b083      	sub	sp, #12
24055d00:	af00      	add	r7, sp, #0
24055d02:	4603      	mov	r3, r0
24055d04:	6039      	str	r1, [r7, #0]
24055d06:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
24055d08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24055d0c:	2b00      	cmp	r3, #0
24055d0e:	db0a      	blt.n	24055d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24055d10:	683b      	ldr	r3, [r7, #0]
24055d12:	b2da      	uxtb	r2, r3
24055d14:	490c      	ldr	r1, [pc, #48]	; (24055d48 <__NVIC_SetPriority+0x4c>)
24055d16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24055d1a:	0112      	lsls	r2, r2, #4
24055d1c:	b2d2      	uxtb	r2, r2
24055d1e:	440b      	add	r3, r1
24055d20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
24055d24:	e00a      	b.n	24055d3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24055d26:	683b      	ldr	r3, [r7, #0]
24055d28:	b2da      	uxtb	r2, r3
24055d2a:	4908      	ldr	r1, [pc, #32]	; (24055d4c <__NVIC_SetPriority+0x50>)
24055d2c:	88fb      	ldrh	r3, [r7, #6]
24055d2e:	f003 030f 	and.w	r3, r3, #15
24055d32:	3b04      	subs	r3, #4
24055d34:	0112      	lsls	r2, r2, #4
24055d36:	b2d2      	uxtb	r2, r2
24055d38:	440b      	add	r3, r1
24055d3a:	761a      	strb	r2, [r3, #24]
}
24055d3c:	bf00      	nop
24055d3e:	370c      	adds	r7, #12
24055d40:	46bd      	mov	sp, r7
24055d42:	f85d 7b04 	ldr.w	r7, [sp], #4
24055d46:	4770      	bx	lr
24055d48:	e000e100 	.word	0xe000e100
24055d4c:	e000ed00 	.word	0xe000ed00

24055d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
24055d50:	b480      	push	{r7}
24055d52:	b089      	sub	sp, #36	; 0x24
24055d54:	af00      	add	r7, sp, #0
24055d56:	60f8      	str	r0, [r7, #12]
24055d58:	60b9      	str	r1, [r7, #8]
24055d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
24055d5c:	68fb      	ldr	r3, [r7, #12]
24055d5e:	f003 0307 	and.w	r3, r3, #7
24055d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
24055d64:	69fb      	ldr	r3, [r7, #28]
24055d66:	f1c3 0307 	rsb	r3, r3, #7
24055d6a:	2b04      	cmp	r3, #4
24055d6c:	bf28      	it	cs
24055d6e:	2304      	movcs	r3, #4
24055d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
24055d72:	69fb      	ldr	r3, [r7, #28]
24055d74:	3304      	adds	r3, #4
24055d76:	2b06      	cmp	r3, #6
24055d78:	d902      	bls.n	24055d80 <NVIC_EncodePriority+0x30>
24055d7a:	69fb      	ldr	r3, [r7, #28]
24055d7c:	3b03      	subs	r3, #3
24055d7e:	e000      	b.n	24055d82 <NVIC_EncodePriority+0x32>
24055d80:	2300      	movs	r3, #0
24055d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
24055d84:	f04f 32ff 	mov.w	r2, #4294967295
24055d88:	69bb      	ldr	r3, [r7, #24]
24055d8a:	fa02 f303 	lsl.w	r3, r2, r3
24055d8e:	43da      	mvns	r2, r3
24055d90:	68bb      	ldr	r3, [r7, #8]
24055d92:	401a      	ands	r2, r3
24055d94:	697b      	ldr	r3, [r7, #20]
24055d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
24055d98:	f04f 31ff 	mov.w	r1, #4294967295
24055d9c:	697b      	ldr	r3, [r7, #20]
24055d9e:	fa01 f303 	lsl.w	r3, r1, r3
24055da2:	43d9      	mvns	r1, r3
24055da4:	687b      	ldr	r3, [r7, #4]
24055da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
24055da8:	4313      	orrs	r3, r2
         );
}
24055daa:	4618      	mov	r0, r3
24055dac:	3724      	adds	r7, #36	; 0x24
24055dae:	46bd      	mov	sp, r7
24055db0:	f85d 7b04 	ldr.w	r7, [sp], #4
24055db4:	4770      	bx	lr
	...

24055db8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
24055db8:	b480      	push	{r7}
24055dba:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
24055dbc:	f3bf 8f4f 	dsb	sy
}
24055dc0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
24055dc2:	4b06      	ldr	r3, [pc, #24]	; (24055ddc <__NVIC_SystemReset+0x24>)
24055dc4:	68db      	ldr	r3, [r3, #12]
24055dc6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
24055dca:	4904      	ldr	r1, [pc, #16]	; (24055ddc <__NVIC_SystemReset+0x24>)
24055dcc:	4b04      	ldr	r3, [pc, #16]	; (24055de0 <__NVIC_SystemReset+0x28>)
24055dce:	4313      	orrs	r3, r2
24055dd0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
24055dd2:	f3bf 8f4f 	dsb	sy
}
24055dd6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
24055dd8:	bf00      	nop
24055dda:	e7fd      	b.n	24055dd8 <__NVIC_SystemReset+0x20>
24055ddc:	e000ed00 	.word	0xe000ed00
24055de0:	05fa0004 	.word	0x05fa0004

24055de4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
24055de4:	b580      	push	{r7, lr}
24055de6:	b082      	sub	sp, #8
24055de8:	af00      	add	r7, sp, #0
24055dea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
24055dec:	687b      	ldr	r3, [r7, #4]
24055dee:	3b01      	subs	r3, #1
24055df0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
24055df4:	d301      	bcc.n	24055dfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
24055df6:	2301      	movs	r3, #1
24055df8:	e00f      	b.n	24055e1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
24055dfa:	4a0a      	ldr	r2, [pc, #40]	; (24055e24 <SysTick_Config+0x40>)
24055dfc:	687b      	ldr	r3, [r7, #4]
24055dfe:	3b01      	subs	r3, #1
24055e00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
24055e02:	210f      	movs	r1, #15
24055e04:	f04f 30ff 	mov.w	r0, #4294967295
24055e08:	f7ff ff78 	bl	24055cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
24055e0c:	4b05      	ldr	r3, [pc, #20]	; (24055e24 <SysTick_Config+0x40>)
24055e0e:	2200      	movs	r2, #0
24055e10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
24055e12:	4b04      	ldr	r3, [pc, #16]	; (24055e24 <SysTick_Config+0x40>)
24055e14:	2207      	movs	r2, #7
24055e16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
24055e18:	2300      	movs	r3, #0
}
24055e1a:	4618      	mov	r0, r3
24055e1c:	3708      	adds	r7, #8
24055e1e:	46bd      	mov	sp, r7
24055e20:	bd80      	pop	{r7, pc}
24055e22:	bf00      	nop
24055e24:	e000e010 	.word	0xe000e010

24055e28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
24055e28:	b580      	push	{r7, lr}
24055e2a:	b082      	sub	sp, #8
24055e2c:	af00      	add	r7, sp, #0
24055e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
24055e30:	6878      	ldr	r0, [r7, #4]
24055e32:	f7ff ff13 	bl	24055c5c <__NVIC_SetPriorityGrouping>
}
24055e36:	bf00      	nop
24055e38:	3708      	adds	r7, #8
24055e3a:	46bd      	mov	sp, r7
24055e3c:	bd80      	pop	{r7, pc}

24055e3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
24055e3e:	b580      	push	{r7, lr}
24055e40:	b086      	sub	sp, #24
24055e42:	af00      	add	r7, sp, #0
24055e44:	4603      	mov	r3, r0
24055e46:	60b9      	str	r1, [r7, #8]
24055e48:	607a      	str	r2, [r7, #4]
24055e4a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
24055e4c:	f7ff ff2a 	bl	24055ca4 <__NVIC_GetPriorityGrouping>
24055e50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
24055e52:	687a      	ldr	r2, [r7, #4]
24055e54:	68b9      	ldr	r1, [r7, #8]
24055e56:	6978      	ldr	r0, [r7, #20]
24055e58:	f7ff ff7a 	bl	24055d50 <NVIC_EncodePriority>
24055e5c:	4602      	mov	r2, r0
24055e5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
24055e62:	4611      	mov	r1, r2
24055e64:	4618      	mov	r0, r3
24055e66:	f7ff ff49 	bl	24055cfc <__NVIC_SetPriority>
}
24055e6a:	bf00      	nop
24055e6c:	3718      	adds	r7, #24
24055e6e:	46bd      	mov	sp, r7
24055e70:	bd80      	pop	{r7, pc}

24055e72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
24055e72:	b580      	push	{r7, lr}
24055e74:	b082      	sub	sp, #8
24055e76:	af00      	add	r7, sp, #0
24055e78:	4603      	mov	r3, r0
24055e7a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
24055e7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24055e80:	4618      	mov	r0, r3
24055e82:	f7ff ff1d 	bl	24055cc0 <__NVIC_EnableIRQ>
}
24055e86:	bf00      	nop
24055e88:	3708      	adds	r7, #8
24055e8a:	46bd      	mov	sp, r7
24055e8c:	bd80      	pop	{r7, pc}

24055e8e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
24055e8e:	b580      	push	{r7, lr}
24055e90:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
24055e92:	f7ff ff91 	bl	24055db8 <__NVIC_SystemReset>

24055e96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
24055e96:	b580      	push	{r7, lr}
24055e98:	b082      	sub	sp, #8
24055e9a:	af00      	add	r7, sp, #0
24055e9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
24055e9e:	6878      	ldr	r0, [r7, #4]
24055ea0:	f7ff ffa0 	bl	24055de4 <SysTick_Config>
24055ea4:	4603      	mov	r3, r0
}
24055ea6:	4618      	mov	r0, r3
24055ea8:	3708      	adds	r7, #8
24055eaa:	46bd      	mov	sp, r7
24055eac:	bd80      	pop	{r7, pc}

24055eae <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
24055eae:	b580      	push	{r7, lr}
24055eb0:	b082      	sub	sp, #8
24055eb2:	af00      	add	r7, sp, #0
24055eb4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
24055eb6:	687b      	ldr	r3, [r7, #4]
24055eb8:	2b00      	cmp	r3, #0
24055eba:	d101      	bne.n	24055ec0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
24055ebc:	2301      	movs	r3, #1
24055ebe:	e014      	b.n	24055eea <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
24055ec0:	687b      	ldr	r3, [r7, #4]
24055ec2:	791b      	ldrb	r3, [r3, #4]
24055ec4:	b2db      	uxtb	r3, r3
24055ec6:	2b00      	cmp	r3, #0
24055ec8:	d105      	bne.n	24055ed6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
24055eca:	687b      	ldr	r3, [r7, #4]
24055ecc:	2200      	movs	r2, #0
24055ece:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
24055ed0:	6878      	ldr	r0, [r7, #4]
24055ed2:	f7fd f88b 	bl	24052fec <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
24055ed6:	687b      	ldr	r3, [r7, #4]
24055ed8:	2202      	movs	r2, #2
24055eda:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
24055edc:	687b      	ldr	r3, [r7, #4]
24055ede:	2200      	movs	r2, #0
24055ee0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
24055ee2:	687b      	ldr	r3, [r7, #4]
24055ee4:	2201      	movs	r2, #1
24055ee6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
24055ee8:	2300      	movs	r3, #0
}
24055eea:	4618      	mov	r0, r3
24055eec:	3708      	adds	r7, #8
24055eee:	46bd      	mov	sp, r7
24055ef0:	bd80      	pop	{r7, pc}

24055ef2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
24055ef2:	b480      	push	{r7}
24055ef4:	b083      	sub	sp, #12
24055ef6:	af00      	add	r7, sp, #0
24055ef8:	6078      	str	r0, [r7, #4]
24055efa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
24055efc:	687b      	ldr	r3, [r7, #4]
24055efe:	795b      	ldrb	r3, [r3, #5]
24055f00:	2b01      	cmp	r3, #1
24055f02:	d101      	bne.n	24055f08 <HAL_DAC_Start+0x16>
24055f04:	2302      	movs	r3, #2
24055f06:	e040      	b.n	24055f8a <HAL_DAC_Start+0x98>
24055f08:	687b      	ldr	r3, [r7, #4]
24055f0a:	2201      	movs	r2, #1
24055f0c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
24055f0e:	687b      	ldr	r3, [r7, #4]
24055f10:	2202      	movs	r2, #2
24055f12:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
24055f14:	687b      	ldr	r3, [r7, #4]
24055f16:	681b      	ldr	r3, [r3, #0]
24055f18:	6819      	ldr	r1, [r3, #0]
24055f1a:	683b      	ldr	r3, [r7, #0]
24055f1c:	f003 0310 	and.w	r3, r3, #16
24055f20:	2201      	movs	r2, #1
24055f22:	409a      	lsls	r2, r3
24055f24:	687b      	ldr	r3, [r7, #4]
24055f26:	681b      	ldr	r3, [r3, #0]
24055f28:	430a      	orrs	r2, r1
24055f2a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
24055f2c:	683b      	ldr	r3, [r7, #0]
24055f2e:	2b00      	cmp	r3, #0
24055f30:	d10f      	bne.n	24055f52 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
24055f32:	687b      	ldr	r3, [r7, #4]
24055f34:	681b      	ldr	r3, [r3, #0]
24055f36:	681b      	ldr	r3, [r3, #0]
24055f38:	f003 033e 	and.w	r3, r3, #62	; 0x3e
24055f3c:	2b02      	cmp	r3, #2
24055f3e:	d11d      	bne.n	24055f7c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
24055f40:	687b      	ldr	r3, [r7, #4]
24055f42:	681b      	ldr	r3, [r3, #0]
24055f44:	685a      	ldr	r2, [r3, #4]
24055f46:	687b      	ldr	r3, [r7, #4]
24055f48:	681b      	ldr	r3, [r3, #0]
24055f4a:	f042 0201 	orr.w	r2, r2, #1
24055f4e:	605a      	str	r2, [r3, #4]
24055f50:	e014      	b.n	24055f7c <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
24055f52:	687b      	ldr	r3, [r7, #4]
24055f54:	681b      	ldr	r3, [r3, #0]
24055f56:	681b      	ldr	r3, [r3, #0]
24055f58:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
24055f5c:	683b      	ldr	r3, [r7, #0]
24055f5e:	f003 0310 	and.w	r3, r3, #16
24055f62:	2102      	movs	r1, #2
24055f64:	fa01 f303 	lsl.w	r3, r1, r3
24055f68:	429a      	cmp	r2, r3
24055f6a:	d107      	bne.n	24055f7c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
24055f6c:	687b      	ldr	r3, [r7, #4]
24055f6e:	681b      	ldr	r3, [r3, #0]
24055f70:	685a      	ldr	r2, [r3, #4]
24055f72:	687b      	ldr	r3, [r7, #4]
24055f74:	681b      	ldr	r3, [r3, #0]
24055f76:	f042 0202 	orr.w	r2, r2, #2
24055f7a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
24055f7c:	687b      	ldr	r3, [r7, #4]
24055f7e:	2201      	movs	r2, #1
24055f80:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
24055f82:	687b      	ldr	r3, [r7, #4]
24055f84:	2200      	movs	r2, #0
24055f86:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
24055f88:	2300      	movs	r3, #0
}
24055f8a:	4618      	mov	r0, r3
24055f8c:	370c      	adds	r7, #12
24055f8e:	46bd      	mov	sp, r7
24055f90:	f85d 7b04 	ldr.w	r7, [sp], #4
24055f94:	4770      	bx	lr

24055f96 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
24055f96:	b480      	push	{r7}
24055f98:	b087      	sub	sp, #28
24055f9a:	af00      	add	r7, sp, #0
24055f9c:	60f8      	str	r0, [r7, #12]
24055f9e:	60b9      	str	r1, [r7, #8]
24055fa0:	607a      	str	r2, [r7, #4]
24055fa2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
24055fa4:	2300      	movs	r3, #0
24055fa6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
24055fa8:	68fb      	ldr	r3, [r7, #12]
24055faa:	681b      	ldr	r3, [r3, #0]
24055fac:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
24055fae:	68bb      	ldr	r3, [r7, #8]
24055fb0:	2b00      	cmp	r3, #0
24055fb2:	d105      	bne.n	24055fc0 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
24055fb4:	697a      	ldr	r2, [r7, #20]
24055fb6:	687b      	ldr	r3, [r7, #4]
24055fb8:	4413      	add	r3, r2
24055fba:	3308      	adds	r3, #8
24055fbc:	617b      	str	r3, [r7, #20]
24055fbe:	e004      	b.n	24055fca <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
24055fc0:	697a      	ldr	r2, [r7, #20]
24055fc2:	687b      	ldr	r3, [r7, #4]
24055fc4:	4413      	add	r3, r2
24055fc6:	3314      	adds	r3, #20
24055fc8:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
24055fca:	697b      	ldr	r3, [r7, #20]
24055fcc:	461a      	mov	r2, r3
24055fce:	683b      	ldr	r3, [r7, #0]
24055fd0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
24055fd2:	2300      	movs	r3, #0
}
24055fd4:	4618      	mov	r0, r3
24055fd6:	371c      	adds	r7, #28
24055fd8:	46bd      	mov	sp, r7
24055fda:	f85d 7b04 	ldr.w	r7, [sp], #4
24055fde:	4770      	bx	lr

24055fe0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
24055fe0:	b580      	push	{r7, lr}
24055fe2:	b088      	sub	sp, #32
24055fe4:	af00      	add	r7, sp, #0
24055fe6:	60f8      	str	r0, [r7, #12]
24055fe8:	60b9      	str	r1, [r7, #8]
24055fea:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
24055fec:	68fb      	ldr	r3, [r7, #12]
24055fee:	795b      	ldrb	r3, [r3, #5]
24055ff0:	2b01      	cmp	r3, #1
24055ff2:	d101      	bne.n	24055ff8 <HAL_DAC_ConfigChannel+0x18>
24055ff4:	2302      	movs	r3, #2
24055ff6:	e12a      	b.n	2405624e <HAL_DAC_ConfigChannel+0x26e>
24055ff8:	68fb      	ldr	r3, [r7, #12]
24055ffa:	2201      	movs	r2, #1
24055ffc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
24055ffe:	68fb      	ldr	r3, [r7, #12]
24056000:	2202      	movs	r2, #2
24056002:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
24056004:	68bb      	ldr	r3, [r7, #8]
24056006:	681b      	ldr	r3, [r3, #0]
24056008:	2b04      	cmp	r3, #4
2405600a:	f040 8081 	bne.w	24056110 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
2405600e:	f7fd fedd 	bl	24053dcc <HAL_GetTick>
24056012:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
24056014:	687b      	ldr	r3, [r7, #4]
24056016:	2b00      	cmp	r3, #0
24056018:	d140      	bne.n	2405609c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
2405601a:	e018      	b.n	2405604e <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
2405601c:	f7fd fed6 	bl	24053dcc <HAL_GetTick>
24056020:	4602      	mov	r2, r0
24056022:	69bb      	ldr	r3, [r7, #24]
24056024:	1ad3      	subs	r3, r2, r3
24056026:	2b01      	cmp	r3, #1
24056028:	d911      	bls.n	2405604e <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
2405602a:	68fb      	ldr	r3, [r7, #12]
2405602c:	681b      	ldr	r3, [r3, #0]
2405602e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
24056030:	4b89      	ldr	r3, [pc, #548]	; (24056258 <HAL_DAC_ConfigChannel+0x278>)
24056032:	4013      	ands	r3, r2
24056034:	2b00      	cmp	r3, #0
24056036:	d00a      	beq.n	2405604e <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
24056038:	68fb      	ldr	r3, [r7, #12]
2405603a:	691b      	ldr	r3, [r3, #16]
2405603c:	f043 0208 	orr.w	r2, r3, #8
24056040:	68fb      	ldr	r3, [r7, #12]
24056042:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
24056044:	68fb      	ldr	r3, [r7, #12]
24056046:	2203      	movs	r2, #3
24056048:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
2405604a:	2303      	movs	r3, #3
2405604c:	e0ff      	b.n	2405624e <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
2405604e:	68fb      	ldr	r3, [r7, #12]
24056050:	681b      	ldr	r3, [r3, #0]
24056052:	6b5a      	ldr	r2, [r3, #52]	; 0x34
24056054:	4b80      	ldr	r3, [pc, #512]	; (24056258 <HAL_DAC_ConfigChannel+0x278>)
24056056:	4013      	ands	r3, r2
24056058:	2b00      	cmp	r3, #0
2405605a:	d1df      	bne.n	2405601c <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
2405605c:	2001      	movs	r0, #1
2405605e:	f7fd fec1 	bl	24053de4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
24056062:	68fb      	ldr	r3, [r7, #12]
24056064:	681b      	ldr	r3, [r3, #0]
24056066:	68ba      	ldr	r2, [r7, #8]
24056068:	6992      	ldr	r2, [r2, #24]
2405606a:	641a      	str	r2, [r3, #64]	; 0x40
2405606c:	e023      	b.n	240560b6 <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
2405606e:	f7fd fead 	bl	24053dcc <HAL_GetTick>
24056072:	4602      	mov	r2, r0
24056074:	69bb      	ldr	r3, [r7, #24]
24056076:	1ad3      	subs	r3, r2, r3
24056078:	2b01      	cmp	r3, #1
2405607a:	d90f      	bls.n	2405609c <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
2405607c:	68fb      	ldr	r3, [r7, #12]
2405607e:	681b      	ldr	r3, [r3, #0]
24056080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24056082:	2b00      	cmp	r3, #0
24056084:	da0a      	bge.n	2405609c <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
24056086:	68fb      	ldr	r3, [r7, #12]
24056088:	691b      	ldr	r3, [r3, #16]
2405608a:	f043 0208 	orr.w	r2, r3, #8
2405608e:	68fb      	ldr	r3, [r7, #12]
24056090:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
24056092:	68fb      	ldr	r3, [r7, #12]
24056094:	2203      	movs	r2, #3
24056096:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
24056098:	2303      	movs	r3, #3
2405609a:	e0d8      	b.n	2405624e <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
2405609c:	68fb      	ldr	r3, [r7, #12]
2405609e:	681b      	ldr	r3, [r3, #0]
240560a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
240560a2:	2b00      	cmp	r3, #0
240560a4:	dbe3      	blt.n	2405606e <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
240560a6:	2001      	movs	r0, #1
240560a8:	f7fd fe9c 	bl	24053de4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
240560ac:	68fb      	ldr	r3, [r7, #12]
240560ae:	681b      	ldr	r3, [r3, #0]
240560b0:	68ba      	ldr	r2, [r7, #8]
240560b2:	6992      	ldr	r2, [r2, #24]
240560b4:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
240560b6:	68fb      	ldr	r3, [r7, #12]
240560b8:	681b      	ldr	r3, [r3, #0]
240560ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
240560bc:	687b      	ldr	r3, [r7, #4]
240560be:	f003 0310 	and.w	r3, r3, #16
240560c2:	f240 31ff 	movw	r1, #1023	; 0x3ff
240560c6:	fa01 f303 	lsl.w	r3, r1, r3
240560ca:	43db      	mvns	r3, r3
240560cc:	ea02 0103 	and.w	r1, r2, r3
240560d0:	68bb      	ldr	r3, [r7, #8]
240560d2:	69da      	ldr	r2, [r3, #28]
240560d4:	687b      	ldr	r3, [r7, #4]
240560d6:	f003 0310 	and.w	r3, r3, #16
240560da:	409a      	lsls	r2, r3
240560dc:	68fb      	ldr	r3, [r7, #12]
240560de:	681b      	ldr	r3, [r3, #0]
240560e0:	430a      	orrs	r2, r1
240560e2:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
240560e4:	68fb      	ldr	r3, [r7, #12]
240560e6:	681b      	ldr	r3, [r3, #0]
240560e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
240560ea:	687b      	ldr	r3, [r7, #4]
240560ec:	f003 0310 	and.w	r3, r3, #16
240560f0:	21ff      	movs	r1, #255	; 0xff
240560f2:	fa01 f303 	lsl.w	r3, r1, r3
240560f6:	43db      	mvns	r3, r3
240560f8:	ea02 0103 	and.w	r1, r2, r3
240560fc:	68bb      	ldr	r3, [r7, #8]
240560fe:	6a1a      	ldr	r2, [r3, #32]
24056100:	687b      	ldr	r3, [r7, #4]
24056102:	f003 0310 	and.w	r3, r3, #16
24056106:	409a      	lsls	r2, r3
24056108:	68fb      	ldr	r3, [r7, #12]
2405610a:	681b      	ldr	r3, [r3, #0]
2405610c:	430a      	orrs	r2, r1
2405610e:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
24056110:	68bb      	ldr	r3, [r7, #8]
24056112:	691b      	ldr	r3, [r3, #16]
24056114:	2b01      	cmp	r3, #1
24056116:	d11d      	bne.n	24056154 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
24056118:	68fb      	ldr	r3, [r7, #12]
2405611a:	681b      	ldr	r3, [r3, #0]
2405611c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405611e:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
24056120:	687b      	ldr	r3, [r7, #4]
24056122:	f003 0310 	and.w	r3, r3, #16
24056126:	221f      	movs	r2, #31
24056128:	fa02 f303 	lsl.w	r3, r2, r3
2405612c:	43db      	mvns	r3, r3
2405612e:	697a      	ldr	r2, [r7, #20]
24056130:	4013      	ands	r3, r2
24056132:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
24056134:	68bb      	ldr	r3, [r7, #8]
24056136:	695b      	ldr	r3, [r3, #20]
24056138:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
2405613a:	687b      	ldr	r3, [r7, #4]
2405613c:	f003 0310 	and.w	r3, r3, #16
24056140:	693a      	ldr	r2, [r7, #16]
24056142:	fa02 f303 	lsl.w	r3, r2, r3
24056146:	697a      	ldr	r2, [r7, #20]
24056148:	4313      	orrs	r3, r2
2405614a:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
2405614c:	68fb      	ldr	r3, [r7, #12]
2405614e:	681b      	ldr	r3, [r3, #0]
24056150:	697a      	ldr	r2, [r7, #20]
24056152:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
24056154:	68fb      	ldr	r3, [r7, #12]
24056156:	681b      	ldr	r3, [r3, #0]
24056158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2405615a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
2405615c:	687b      	ldr	r3, [r7, #4]
2405615e:	f003 0310 	and.w	r3, r3, #16
24056162:	2207      	movs	r2, #7
24056164:	fa02 f303 	lsl.w	r3, r2, r3
24056168:	43db      	mvns	r3, r3
2405616a:	697a      	ldr	r2, [r7, #20]
2405616c:	4013      	ands	r3, r2
2405616e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
24056170:	68bb      	ldr	r3, [r7, #8]
24056172:	68db      	ldr	r3, [r3, #12]
24056174:	2b01      	cmp	r3, #1
24056176:	d102      	bne.n	2405617e <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
24056178:	2300      	movs	r3, #0
2405617a:	61fb      	str	r3, [r7, #28]
2405617c:	e00f      	b.n	2405619e <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
2405617e:	68bb      	ldr	r3, [r7, #8]
24056180:	68db      	ldr	r3, [r3, #12]
24056182:	2b02      	cmp	r3, #2
24056184:	d102      	bne.n	2405618c <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
24056186:	2301      	movs	r3, #1
24056188:	61fb      	str	r3, [r7, #28]
2405618a:	e008      	b.n	2405619e <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
2405618c:	68bb      	ldr	r3, [r7, #8]
2405618e:	689b      	ldr	r3, [r3, #8]
24056190:	2b00      	cmp	r3, #0
24056192:	d102      	bne.n	2405619a <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
24056194:	2301      	movs	r3, #1
24056196:	61fb      	str	r3, [r7, #28]
24056198:	e001      	b.n	2405619e <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
2405619a:	2300      	movs	r3, #0
2405619c:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
2405619e:	68bb      	ldr	r3, [r7, #8]
240561a0:	681a      	ldr	r2, [r3, #0]
240561a2:	68bb      	ldr	r3, [r7, #8]
240561a4:	689b      	ldr	r3, [r3, #8]
240561a6:	4313      	orrs	r3, r2
240561a8:	69fa      	ldr	r2, [r7, #28]
240561aa:	4313      	orrs	r3, r2
240561ac:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
240561ae:	687b      	ldr	r3, [r7, #4]
240561b0:	f003 0310 	and.w	r3, r3, #16
240561b4:	693a      	ldr	r2, [r7, #16]
240561b6:	fa02 f303 	lsl.w	r3, r2, r3
240561ba:	697a      	ldr	r2, [r7, #20]
240561bc:	4313      	orrs	r3, r2
240561be:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
240561c0:	68fb      	ldr	r3, [r7, #12]
240561c2:	681b      	ldr	r3, [r3, #0]
240561c4:	697a      	ldr	r2, [r7, #20]
240561c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
240561c8:	68fb      	ldr	r3, [r7, #12]
240561ca:	681b      	ldr	r3, [r3, #0]
240561cc:	6819      	ldr	r1, [r3, #0]
240561ce:	687b      	ldr	r3, [r7, #4]
240561d0:	f003 0310 	and.w	r3, r3, #16
240561d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
240561d8:	fa02 f303 	lsl.w	r3, r2, r3
240561dc:	43da      	mvns	r2, r3
240561de:	68fb      	ldr	r3, [r7, #12]
240561e0:	681b      	ldr	r3, [r3, #0]
240561e2:	400a      	ands	r2, r1
240561e4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
240561e6:	68fb      	ldr	r3, [r7, #12]
240561e8:	681b      	ldr	r3, [r3, #0]
240561ea:	681b      	ldr	r3, [r3, #0]
240561ec:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
240561ee:	687b      	ldr	r3, [r7, #4]
240561f0:	f003 0310 	and.w	r3, r3, #16
240561f4:	f640 72fe 	movw	r2, #4094	; 0xffe
240561f8:	fa02 f303 	lsl.w	r3, r2, r3
240561fc:	43db      	mvns	r3, r3
240561fe:	697a      	ldr	r2, [r7, #20]
24056200:	4013      	ands	r3, r2
24056202:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
24056204:	68bb      	ldr	r3, [r7, #8]
24056206:	685b      	ldr	r3, [r3, #4]
24056208:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
2405620a:	687b      	ldr	r3, [r7, #4]
2405620c:	f003 0310 	and.w	r3, r3, #16
24056210:	693a      	ldr	r2, [r7, #16]
24056212:	fa02 f303 	lsl.w	r3, r2, r3
24056216:	697a      	ldr	r2, [r7, #20]
24056218:	4313      	orrs	r3, r2
2405621a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
2405621c:	68fb      	ldr	r3, [r7, #12]
2405621e:	681b      	ldr	r3, [r3, #0]
24056220:	697a      	ldr	r2, [r7, #20]
24056222:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
24056224:	68fb      	ldr	r3, [r7, #12]
24056226:	681b      	ldr	r3, [r3, #0]
24056228:	6819      	ldr	r1, [r3, #0]
2405622a:	687b      	ldr	r3, [r7, #4]
2405622c:	f003 0310 	and.w	r3, r3, #16
24056230:	22c0      	movs	r2, #192	; 0xc0
24056232:	fa02 f303 	lsl.w	r3, r2, r3
24056236:	43da      	mvns	r2, r3
24056238:	68fb      	ldr	r3, [r7, #12]
2405623a:	681b      	ldr	r3, [r3, #0]
2405623c:	400a      	ands	r2, r1
2405623e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
24056240:	68fb      	ldr	r3, [r7, #12]
24056242:	2201      	movs	r2, #1
24056244:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
24056246:	68fb      	ldr	r3, [r7, #12]
24056248:	2200      	movs	r2, #0
2405624a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
2405624c:	2300      	movs	r3, #0
}
2405624e:	4618      	mov	r0, r3
24056250:	3720      	adds	r7, #32
24056252:	46bd      	mov	sp, r7
24056254:	bd80      	pop	{r7, pc}
24056256:	bf00      	nop
24056258:	20008000 	.word	0x20008000

2405625c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
2405625c:	b580      	push	{r7, lr}
2405625e:	b086      	sub	sp, #24
24056260:	af00      	add	r7, sp, #0
24056262:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
24056264:	f7fd fdb2 	bl	24053dcc <HAL_GetTick>
24056268:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
2405626a:	687b      	ldr	r3, [r7, #4]
2405626c:	2b00      	cmp	r3, #0
2405626e:	d101      	bne.n	24056274 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
24056270:	2301      	movs	r3, #1
24056272:	e37d      	b.n	24056970 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24056274:	687b      	ldr	r3, [r7, #4]
24056276:	681b      	ldr	r3, [r3, #0]
24056278:	4a66      	ldr	r2, [pc, #408]	; (24056414 <HAL_DMA_Init+0x1b8>)
2405627a:	4293      	cmp	r3, r2
2405627c:	d04a      	beq.n	24056314 <HAL_DMA_Init+0xb8>
2405627e:	687b      	ldr	r3, [r7, #4]
24056280:	681b      	ldr	r3, [r3, #0]
24056282:	4a65      	ldr	r2, [pc, #404]	; (24056418 <HAL_DMA_Init+0x1bc>)
24056284:	4293      	cmp	r3, r2
24056286:	d045      	beq.n	24056314 <HAL_DMA_Init+0xb8>
24056288:	687b      	ldr	r3, [r7, #4]
2405628a:	681b      	ldr	r3, [r3, #0]
2405628c:	4a63      	ldr	r2, [pc, #396]	; (2405641c <HAL_DMA_Init+0x1c0>)
2405628e:	4293      	cmp	r3, r2
24056290:	d040      	beq.n	24056314 <HAL_DMA_Init+0xb8>
24056292:	687b      	ldr	r3, [r7, #4]
24056294:	681b      	ldr	r3, [r3, #0]
24056296:	4a62      	ldr	r2, [pc, #392]	; (24056420 <HAL_DMA_Init+0x1c4>)
24056298:	4293      	cmp	r3, r2
2405629a:	d03b      	beq.n	24056314 <HAL_DMA_Init+0xb8>
2405629c:	687b      	ldr	r3, [r7, #4]
2405629e:	681b      	ldr	r3, [r3, #0]
240562a0:	4a60      	ldr	r2, [pc, #384]	; (24056424 <HAL_DMA_Init+0x1c8>)
240562a2:	4293      	cmp	r3, r2
240562a4:	d036      	beq.n	24056314 <HAL_DMA_Init+0xb8>
240562a6:	687b      	ldr	r3, [r7, #4]
240562a8:	681b      	ldr	r3, [r3, #0]
240562aa:	4a5f      	ldr	r2, [pc, #380]	; (24056428 <HAL_DMA_Init+0x1cc>)
240562ac:	4293      	cmp	r3, r2
240562ae:	d031      	beq.n	24056314 <HAL_DMA_Init+0xb8>
240562b0:	687b      	ldr	r3, [r7, #4]
240562b2:	681b      	ldr	r3, [r3, #0]
240562b4:	4a5d      	ldr	r2, [pc, #372]	; (2405642c <HAL_DMA_Init+0x1d0>)
240562b6:	4293      	cmp	r3, r2
240562b8:	d02c      	beq.n	24056314 <HAL_DMA_Init+0xb8>
240562ba:	687b      	ldr	r3, [r7, #4]
240562bc:	681b      	ldr	r3, [r3, #0]
240562be:	4a5c      	ldr	r2, [pc, #368]	; (24056430 <HAL_DMA_Init+0x1d4>)
240562c0:	4293      	cmp	r3, r2
240562c2:	d027      	beq.n	24056314 <HAL_DMA_Init+0xb8>
240562c4:	687b      	ldr	r3, [r7, #4]
240562c6:	681b      	ldr	r3, [r3, #0]
240562c8:	4a5a      	ldr	r2, [pc, #360]	; (24056434 <HAL_DMA_Init+0x1d8>)
240562ca:	4293      	cmp	r3, r2
240562cc:	d022      	beq.n	24056314 <HAL_DMA_Init+0xb8>
240562ce:	687b      	ldr	r3, [r7, #4]
240562d0:	681b      	ldr	r3, [r3, #0]
240562d2:	4a59      	ldr	r2, [pc, #356]	; (24056438 <HAL_DMA_Init+0x1dc>)
240562d4:	4293      	cmp	r3, r2
240562d6:	d01d      	beq.n	24056314 <HAL_DMA_Init+0xb8>
240562d8:	687b      	ldr	r3, [r7, #4]
240562da:	681b      	ldr	r3, [r3, #0]
240562dc:	4a57      	ldr	r2, [pc, #348]	; (2405643c <HAL_DMA_Init+0x1e0>)
240562de:	4293      	cmp	r3, r2
240562e0:	d018      	beq.n	24056314 <HAL_DMA_Init+0xb8>
240562e2:	687b      	ldr	r3, [r7, #4]
240562e4:	681b      	ldr	r3, [r3, #0]
240562e6:	4a56      	ldr	r2, [pc, #344]	; (24056440 <HAL_DMA_Init+0x1e4>)
240562e8:	4293      	cmp	r3, r2
240562ea:	d013      	beq.n	24056314 <HAL_DMA_Init+0xb8>
240562ec:	687b      	ldr	r3, [r7, #4]
240562ee:	681b      	ldr	r3, [r3, #0]
240562f0:	4a54      	ldr	r2, [pc, #336]	; (24056444 <HAL_DMA_Init+0x1e8>)
240562f2:	4293      	cmp	r3, r2
240562f4:	d00e      	beq.n	24056314 <HAL_DMA_Init+0xb8>
240562f6:	687b      	ldr	r3, [r7, #4]
240562f8:	681b      	ldr	r3, [r3, #0]
240562fa:	4a53      	ldr	r2, [pc, #332]	; (24056448 <HAL_DMA_Init+0x1ec>)
240562fc:	4293      	cmp	r3, r2
240562fe:	d009      	beq.n	24056314 <HAL_DMA_Init+0xb8>
24056300:	687b      	ldr	r3, [r7, #4]
24056302:	681b      	ldr	r3, [r3, #0]
24056304:	4a51      	ldr	r2, [pc, #324]	; (2405644c <HAL_DMA_Init+0x1f0>)
24056306:	4293      	cmp	r3, r2
24056308:	d004      	beq.n	24056314 <HAL_DMA_Init+0xb8>
2405630a:	687b      	ldr	r3, [r7, #4]
2405630c:	681b      	ldr	r3, [r3, #0]
2405630e:	4a50      	ldr	r2, [pc, #320]	; (24056450 <HAL_DMA_Init+0x1f4>)
24056310:	4293      	cmp	r3, r2
24056312:	d101      	bne.n	24056318 <HAL_DMA_Init+0xbc>
24056314:	2301      	movs	r3, #1
24056316:	e000      	b.n	2405631a <HAL_DMA_Init+0xbe>
24056318:	2300      	movs	r3, #0
2405631a:	2b00      	cmp	r3, #0
2405631c:	f000 813c 	beq.w	24056598 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
24056320:	687b      	ldr	r3, [r7, #4]
24056322:	2202      	movs	r2, #2
24056324:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
24056328:	687b      	ldr	r3, [r7, #4]
2405632a:	2200      	movs	r2, #0
2405632c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
24056330:	687b      	ldr	r3, [r7, #4]
24056332:	681b      	ldr	r3, [r3, #0]
24056334:	4a37      	ldr	r2, [pc, #220]	; (24056414 <HAL_DMA_Init+0x1b8>)
24056336:	4293      	cmp	r3, r2
24056338:	d04a      	beq.n	240563d0 <HAL_DMA_Init+0x174>
2405633a:	687b      	ldr	r3, [r7, #4]
2405633c:	681b      	ldr	r3, [r3, #0]
2405633e:	4a36      	ldr	r2, [pc, #216]	; (24056418 <HAL_DMA_Init+0x1bc>)
24056340:	4293      	cmp	r3, r2
24056342:	d045      	beq.n	240563d0 <HAL_DMA_Init+0x174>
24056344:	687b      	ldr	r3, [r7, #4]
24056346:	681b      	ldr	r3, [r3, #0]
24056348:	4a34      	ldr	r2, [pc, #208]	; (2405641c <HAL_DMA_Init+0x1c0>)
2405634a:	4293      	cmp	r3, r2
2405634c:	d040      	beq.n	240563d0 <HAL_DMA_Init+0x174>
2405634e:	687b      	ldr	r3, [r7, #4]
24056350:	681b      	ldr	r3, [r3, #0]
24056352:	4a33      	ldr	r2, [pc, #204]	; (24056420 <HAL_DMA_Init+0x1c4>)
24056354:	4293      	cmp	r3, r2
24056356:	d03b      	beq.n	240563d0 <HAL_DMA_Init+0x174>
24056358:	687b      	ldr	r3, [r7, #4]
2405635a:	681b      	ldr	r3, [r3, #0]
2405635c:	4a31      	ldr	r2, [pc, #196]	; (24056424 <HAL_DMA_Init+0x1c8>)
2405635e:	4293      	cmp	r3, r2
24056360:	d036      	beq.n	240563d0 <HAL_DMA_Init+0x174>
24056362:	687b      	ldr	r3, [r7, #4]
24056364:	681b      	ldr	r3, [r3, #0]
24056366:	4a30      	ldr	r2, [pc, #192]	; (24056428 <HAL_DMA_Init+0x1cc>)
24056368:	4293      	cmp	r3, r2
2405636a:	d031      	beq.n	240563d0 <HAL_DMA_Init+0x174>
2405636c:	687b      	ldr	r3, [r7, #4]
2405636e:	681b      	ldr	r3, [r3, #0]
24056370:	4a2e      	ldr	r2, [pc, #184]	; (2405642c <HAL_DMA_Init+0x1d0>)
24056372:	4293      	cmp	r3, r2
24056374:	d02c      	beq.n	240563d0 <HAL_DMA_Init+0x174>
24056376:	687b      	ldr	r3, [r7, #4]
24056378:	681b      	ldr	r3, [r3, #0]
2405637a:	4a2d      	ldr	r2, [pc, #180]	; (24056430 <HAL_DMA_Init+0x1d4>)
2405637c:	4293      	cmp	r3, r2
2405637e:	d027      	beq.n	240563d0 <HAL_DMA_Init+0x174>
24056380:	687b      	ldr	r3, [r7, #4]
24056382:	681b      	ldr	r3, [r3, #0]
24056384:	4a2b      	ldr	r2, [pc, #172]	; (24056434 <HAL_DMA_Init+0x1d8>)
24056386:	4293      	cmp	r3, r2
24056388:	d022      	beq.n	240563d0 <HAL_DMA_Init+0x174>
2405638a:	687b      	ldr	r3, [r7, #4]
2405638c:	681b      	ldr	r3, [r3, #0]
2405638e:	4a2a      	ldr	r2, [pc, #168]	; (24056438 <HAL_DMA_Init+0x1dc>)
24056390:	4293      	cmp	r3, r2
24056392:	d01d      	beq.n	240563d0 <HAL_DMA_Init+0x174>
24056394:	687b      	ldr	r3, [r7, #4]
24056396:	681b      	ldr	r3, [r3, #0]
24056398:	4a28      	ldr	r2, [pc, #160]	; (2405643c <HAL_DMA_Init+0x1e0>)
2405639a:	4293      	cmp	r3, r2
2405639c:	d018      	beq.n	240563d0 <HAL_DMA_Init+0x174>
2405639e:	687b      	ldr	r3, [r7, #4]
240563a0:	681b      	ldr	r3, [r3, #0]
240563a2:	4a27      	ldr	r2, [pc, #156]	; (24056440 <HAL_DMA_Init+0x1e4>)
240563a4:	4293      	cmp	r3, r2
240563a6:	d013      	beq.n	240563d0 <HAL_DMA_Init+0x174>
240563a8:	687b      	ldr	r3, [r7, #4]
240563aa:	681b      	ldr	r3, [r3, #0]
240563ac:	4a25      	ldr	r2, [pc, #148]	; (24056444 <HAL_DMA_Init+0x1e8>)
240563ae:	4293      	cmp	r3, r2
240563b0:	d00e      	beq.n	240563d0 <HAL_DMA_Init+0x174>
240563b2:	687b      	ldr	r3, [r7, #4]
240563b4:	681b      	ldr	r3, [r3, #0]
240563b6:	4a24      	ldr	r2, [pc, #144]	; (24056448 <HAL_DMA_Init+0x1ec>)
240563b8:	4293      	cmp	r3, r2
240563ba:	d009      	beq.n	240563d0 <HAL_DMA_Init+0x174>
240563bc:	687b      	ldr	r3, [r7, #4]
240563be:	681b      	ldr	r3, [r3, #0]
240563c0:	4a22      	ldr	r2, [pc, #136]	; (2405644c <HAL_DMA_Init+0x1f0>)
240563c2:	4293      	cmp	r3, r2
240563c4:	d004      	beq.n	240563d0 <HAL_DMA_Init+0x174>
240563c6:	687b      	ldr	r3, [r7, #4]
240563c8:	681b      	ldr	r3, [r3, #0]
240563ca:	4a21      	ldr	r2, [pc, #132]	; (24056450 <HAL_DMA_Init+0x1f4>)
240563cc:	4293      	cmp	r3, r2
240563ce:	d108      	bne.n	240563e2 <HAL_DMA_Init+0x186>
240563d0:	687b      	ldr	r3, [r7, #4]
240563d2:	681b      	ldr	r3, [r3, #0]
240563d4:	681a      	ldr	r2, [r3, #0]
240563d6:	687b      	ldr	r3, [r7, #4]
240563d8:	681b      	ldr	r3, [r3, #0]
240563da:	f022 0201 	bic.w	r2, r2, #1
240563de:	601a      	str	r2, [r3, #0]
240563e0:	e007      	b.n	240563f2 <HAL_DMA_Init+0x196>
240563e2:	687b      	ldr	r3, [r7, #4]
240563e4:	681b      	ldr	r3, [r3, #0]
240563e6:	681a      	ldr	r2, [r3, #0]
240563e8:	687b      	ldr	r3, [r7, #4]
240563ea:	681b      	ldr	r3, [r3, #0]
240563ec:	f022 0201 	bic.w	r2, r2, #1
240563f0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
240563f2:	e02f      	b.n	24056454 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
240563f4:	f7fd fcea 	bl	24053dcc <HAL_GetTick>
240563f8:	4602      	mov	r2, r0
240563fa:	693b      	ldr	r3, [r7, #16]
240563fc:	1ad3      	subs	r3, r2, r3
240563fe:	2b05      	cmp	r3, #5
24056400:	d928      	bls.n	24056454 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
24056402:	687b      	ldr	r3, [r7, #4]
24056404:	2220      	movs	r2, #32
24056406:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
24056408:	687b      	ldr	r3, [r7, #4]
2405640a:	2203      	movs	r2, #3
2405640c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
24056410:	2301      	movs	r3, #1
24056412:	e2ad      	b.n	24056970 <HAL_DMA_Init+0x714>
24056414:	40020010 	.word	0x40020010
24056418:	40020028 	.word	0x40020028
2405641c:	40020040 	.word	0x40020040
24056420:	40020058 	.word	0x40020058
24056424:	40020070 	.word	0x40020070
24056428:	40020088 	.word	0x40020088
2405642c:	400200a0 	.word	0x400200a0
24056430:	400200b8 	.word	0x400200b8
24056434:	40020410 	.word	0x40020410
24056438:	40020428 	.word	0x40020428
2405643c:	40020440 	.word	0x40020440
24056440:	40020458 	.word	0x40020458
24056444:	40020470 	.word	0x40020470
24056448:	40020488 	.word	0x40020488
2405644c:	400204a0 	.word	0x400204a0
24056450:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
24056454:	687b      	ldr	r3, [r7, #4]
24056456:	681b      	ldr	r3, [r3, #0]
24056458:	681b      	ldr	r3, [r3, #0]
2405645a:	f003 0301 	and.w	r3, r3, #1
2405645e:	2b00      	cmp	r3, #0
24056460:	d1c8      	bne.n	240563f4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
24056462:	687b      	ldr	r3, [r7, #4]
24056464:	681b      	ldr	r3, [r3, #0]
24056466:	681b      	ldr	r3, [r3, #0]
24056468:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
2405646a:	697a      	ldr	r2, [r7, #20]
2405646c:	4b73      	ldr	r3, [pc, #460]	; (2405663c <HAL_DMA_Init+0x3e0>)
2405646e:	4013      	ands	r3, r2
24056470:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
24056472:	687b      	ldr	r3, [r7, #4]
24056474:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
24056476:	687b      	ldr	r3, [r7, #4]
24056478:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
2405647a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
2405647c:	687b      	ldr	r3, [r7, #4]
2405647e:	691b      	ldr	r3, [r3, #16]
24056480:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
24056482:	687b      	ldr	r3, [r7, #4]
24056484:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
24056486:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
24056488:	687b      	ldr	r3, [r7, #4]
2405648a:	699b      	ldr	r3, [r3, #24]
2405648c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
2405648e:	687b      	ldr	r3, [r7, #4]
24056490:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
24056492:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
24056494:	687b      	ldr	r3, [r7, #4]
24056496:	6a1b      	ldr	r3, [r3, #32]
24056498:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
2405649a:	697a      	ldr	r2, [r7, #20]
2405649c:	4313      	orrs	r3, r2
2405649e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
240564a0:	687b      	ldr	r3, [r7, #4]
240564a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
240564a4:	2b04      	cmp	r3, #4
240564a6:	d107      	bne.n	240564b8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
240564a8:	687b      	ldr	r3, [r7, #4]
240564aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
240564ac:	687b      	ldr	r3, [r7, #4]
240564ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240564b0:	4313      	orrs	r3, r2
240564b2:	697a      	ldr	r2, [r7, #20]
240564b4:	4313      	orrs	r3, r2
240564b6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
240564b8:	687b      	ldr	r3, [r7, #4]
240564ba:	685b      	ldr	r3, [r3, #4]
240564bc:	2b28      	cmp	r3, #40	; 0x28
240564be:	d903      	bls.n	240564c8 <HAL_DMA_Init+0x26c>
240564c0:	687b      	ldr	r3, [r7, #4]
240564c2:	685b      	ldr	r3, [r3, #4]
240564c4:	2b2e      	cmp	r3, #46	; 0x2e
240564c6:	d91f      	bls.n	24056508 <HAL_DMA_Init+0x2ac>
240564c8:	687b      	ldr	r3, [r7, #4]
240564ca:	685b      	ldr	r3, [r3, #4]
240564cc:	2b3e      	cmp	r3, #62	; 0x3e
240564ce:	d903      	bls.n	240564d8 <HAL_DMA_Init+0x27c>
240564d0:	687b      	ldr	r3, [r7, #4]
240564d2:	685b      	ldr	r3, [r3, #4]
240564d4:	2b42      	cmp	r3, #66	; 0x42
240564d6:	d917      	bls.n	24056508 <HAL_DMA_Init+0x2ac>
240564d8:	687b      	ldr	r3, [r7, #4]
240564da:	685b      	ldr	r3, [r3, #4]
240564dc:	2b46      	cmp	r3, #70	; 0x46
240564de:	d903      	bls.n	240564e8 <HAL_DMA_Init+0x28c>
240564e0:	687b      	ldr	r3, [r7, #4]
240564e2:	685b      	ldr	r3, [r3, #4]
240564e4:	2b48      	cmp	r3, #72	; 0x48
240564e6:	d90f      	bls.n	24056508 <HAL_DMA_Init+0x2ac>
240564e8:	687b      	ldr	r3, [r7, #4]
240564ea:	685b      	ldr	r3, [r3, #4]
240564ec:	2b4e      	cmp	r3, #78	; 0x4e
240564ee:	d903      	bls.n	240564f8 <HAL_DMA_Init+0x29c>
240564f0:	687b      	ldr	r3, [r7, #4]
240564f2:	685b      	ldr	r3, [r3, #4]
240564f4:	2b52      	cmp	r3, #82	; 0x52
240564f6:	d907      	bls.n	24056508 <HAL_DMA_Init+0x2ac>
240564f8:	687b      	ldr	r3, [r7, #4]
240564fa:	685b      	ldr	r3, [r3, #4]
240564fc:	2b73      	cmp	r3, #115	; 0x73
240564fe:	d905      	bls.n	2405650c <HAL_DMA_Init+0x2b0>
24056500:	687b      	ldr	r3, [r7, #4]
24056502:	685b      	ldr	r3, [r3, #4]
24056504:	2b77      	cmp	r3, #119	; 0x77
24056506:	d801      	bhi.n	2405650c <HAL_DMA_Init+0x2b0>
24056508:	2301      	movs	r3, #1
2405650a:	e000      	b.n	2405650e <HAL_DMA_Init+0x2b2>
2405650c:	2300      	movs	r3, #0
2405650e:	2b00      	cmp	r3, #0
24056510:	d003      	beq.n	2405651a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
24056512:	697b      	ldr	r3, [r7, #20]
24056514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
24056518:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
2405651a:	687b      	ldr	r3, [r7, #4]
2405651c:	681b      	ldr	r3, [r3, #0]
2405651e:	697a      	ldr	r2, [r7, #20]
24056520:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
24056522:	687b      	ldr	r3, [r7, #4]
24056524:	681b      	ldr	r3, [r3, #0]
24056526:	695b      	ldr	r3, [r3, #20]
24056528:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
2405652a:	697b      	ldr	r3, [r7, #20]
2405652c:	f023 0307 	bic.w	r3, r3, #7
24056530:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
24056532:	687b      	ldr	r3, [r7, #4]
24056534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24056536:	697a      	ldr	r2, [r7, #20]
24056538:	4313      	orrs	r3, r2
2405653a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
2405653c:	687b      	ldr	r3, [r7, #4]
2405653e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24056540:	2b04      	cmp	r3, #4
24056542:	d117      	bne.n	24056574 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
24056544:	687b      	ldr	r3, [r7, #4]
24056546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24056548:	697a      	ldr	r2, [r7, #20]
2405654a:	4313      	orrs	r3, r2
2405654c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
2405654e:	687b      	ldr	r3, [r7, #4]
24056550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24056552:	2b00      	cmp	r3, #0
24056554:	d00e      	beq.n	24056574 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
24056556:	6878      	ldr	r0, [r7, #4]
24056558:	f002 fbe0 	bl	24058d1c <DMA_CheckFifoParam>
2405655c:	4603      	mov	r3, r0
2405655e:	2b00      	cmp	r3, #0
24056560:	d008      	beq.n	24056574 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
24056562:	687b      	ldr	r3, [r7, #4]
24056564:	2240      	movs	r2, #64	; 0x40
24056566:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
24056568:	687b      	ldr	r3, [r7, #4]
2405656a:	2201      	movs	r2, #1
2405656c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
24056570:	2301      	movs	r3, #1
24056572:	e1fd      	b.n	24056970 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
24056574:	687b      	ldr	r3, [r7, #4]
24056576:	681b      	ldr	r3, [r3, #0]
24056578:	697a      	ldr	r2, [r7, #20]
2405657a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
2405657c:	6878      	ldr	r0, [r7, #4]
2405657e:	f002 fb1b 	bl	24058bb8 <DMA_CalcBaseAndBitshift>
24056582:	4603      	mov	r3, r0
24056584:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24056586:	687b      	ldr	r3, [r7, #4]
24056588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2405658a:	f003 031f 	and.w	r3, r3, #31
2405658e:	223f      	movs	r2, #63	; 0x3f
24056590:	409a      	lsls	r2, r3
24056592:	68bb      	ldr	r3, [r7, #8]
24056594:	609a      	str	r2, [r3, #8]
24056596:	e0fd      	b.n	24056794 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
24056598:	687b      	ldr	r3, [r7, #4]
2405659a:	681b      	ldr	r3, [r3, #0]
2405659c:	4a28      	ldr	r2, [pc, #160]	; (24056640 <HAL_DMA_Init+0x3e4>)
2405659e:	4293      	cmp	r3, r2
240565a0:	d04a      	beq.n	24056638 <HAL_DMA_Init+0x3dc>
240565a2:	687b      	ldr	r3, [r7, #4]
240565a4:	681b      	ldr	r3, [r3, #0]
240565a6:	4a27      	ldr	r2, [pc, #156]	; (24056644 <HAL_DMA_Init+0x3e8>)
240565a8:	4293      	cmp	r3, r2
240565aa:	d045      	beq.n	24056638 <HAL_DMA_Init+0x3dc>
240565ac:	687b      	ldr	r3, [r7, #4]
240565ae:	681b      	ldr	r3, [r3, #0]
240565b0:	4a25      	ldr	r2, [pc, #148]	; (24056648 <HAL_DMA_Init+0x3ec>)
240565b2:	4293      	cmp	r3, r2
240565b4:	d040      	beq.n	24056638 <HAL_DMA_Init+0x3dc>
240565b6:	687b      	ldr	r3, [r7, #4]
240565b8:	681b      	ldr	r3, [r3, #0]
240565ba:	4a24      	ldr	r2, [pc, #144]	; (2405664c <HAL_DMA_Init+0x3f0>)
240565bc:	4293      	cmp	r3, r2
240565be:	d03b      	beq.n	24056638 <HAL_DMA_Init+0x3dc>
240565c0:	687b      	ldr	r3, [r7, #4]
240565c2:	681b      	ldr	r3, [r3, #0]
240565c4:	4a22      	ldr	r2, [pc, #136]	; (24056650 <HAL_DMA_Init+0x3f4>)
240565c6:	4293      	cmp	r3, r2
240565c8:	d036      	beq.n	24056638 <HAL_DMA_Init+0x3dc>
240565ca:	687b      	ldr	r3, [r7, #4]
240565cc:	681b      	ldr	r3, [r3, #0]
240565ce:	4a21      	ldr	r2, [pc, #132]	; (24056654 <HAL_DMA_Init+0x3f8>)
240565d0:	4293      	cmp	r3, r2
240565d2:	d031      	beq.n	24056638 <HAL_DMA_Init+0x3dc>
240565d4:	687b      	ldr	r3, [r7, #4]
240565d6:	681b      	ldr	r3, [r3, #0]
240565d8:	4a1f      	ldr	r2, [pc, #124]	; (24056658 <HAL_DMA_Init+0x3fc>)
240565da:	4293      	cmp	r3, r2
240565dc:	d02c      	beq.n	24056638 <HAL_DMA_Init+0x3dc>
240565de:	687b      	ldr	r3, [r7, #4]
240565e0:	681b      	ldr	r3, [r3, #0]
240565e2:	4a1e      	ldr	r2, [pc, #120]	; (2405665c <HAL_DMA_Init+0x400>)
240565e4:	4293      	cmp	r3, r2
240565e6:	d027      	beq.n	24056638 <HAL_DMA_Init+0x3dc>
240565e8:	687b      	ldr	r3, [r7, #4]
240565ea:	681b      	ldr	r3, [r3, #0]
240565ec:	4a1c      	ldr	r2, [pc, #112]	; (24056660 <HAL_DMA_Init+0x404>)
240565ee:	4293      	cmp	r3, r2
240565f0:	d022      	beq.n	24056638 <HAL_DMA_Init+0x3dc>
240565f2:	687b      	ldr	r3, [r7, #4]
240565f4:	681b      	ldr	r3, [r3, #0]
240565f6:	4a1b      	ldr	r2, [pc, #108]	; (24056664 <HAL_DMA_Init+0x408>)
240565f8:	4293      	cmp	r3, r2
240565fa:	d01d      	beq.n	24056638 <HAL_DMA_Init+0x3dc>
240565fc:	687b      	ldr	r3, [r7, #4]
240565fe:	681b      	ldr	r3, [r3, #0]
24056600:	4a19      	ldr	r2, [pc, #100]	; (24056668 <HAL_DMA_Init+0x40c>)
24056602:	4293      	cmp	r3, r2
24056604:	d018      	beq.n	24056638 <HAL_DMA_Init+0x3dc>
24056606:	687b      	ldr	r3, [r7, #4]
24056608:	681b      	ldr	r3, [r3, #0]
2405660a:	4a18      	ldr	r2, [pc, #96]	; (2405666c <HAL_DMA_Init+0x410>)
2405660c:	4293      	cmp	r3, r2
2405660e:	d013      	beq.n	24056638 <HAL_DMA_Init+0x3dc>
24056610:	687b      	ldr	r3, [r7, #4]
24056612:	681b      	ldr	r3, [r3, #0]
24056614:	4a16      	ldr	r2, [pc, #88]	; (24056670 <HAL_DMA_Init+0x414>)
24056616:	4293      	cmp	r3, r2
24056618:	d00e      	beq.n	24056638 <HAL_DMA_Init+0x3dc>
2405661a:	687b      	ldr	r3, [r7, #4]
2405661c:	681b      	ldr	r3, [r3, #0]
2405661e:	4a15      	ldr	r2, [pc, #84]	; (24056674 <HAL_DMA_Init+0x418>)
24056620:	4293      	cmp	r3, r2
24056622:	d009      	beq.n	24056638 <HAL_DMA_Init+0x3dc>
24056624:	687b      	ldr	r3, [r7, #4]
24056626:	681b      	ldr	r3, [r3, #0]
24056628:	4a13      	ldr	r2, [pc, #76]	; (24056678 <HAL_DMA_Init+0x41c>)
2405662a:	4293      	cmp	r3, r2
2405662c:	d004      	beq.n	24056638 <HAL_DMA_Init+0x3dc>
2405662e:	687b      	ldr	r3, [r7, #4]
24056630:	681b      	ldr	r3, [r3, #0]
24056632:	4a12      	ldr	r2, [pc, #72]	; (2405667c <HAL_DMA_Init+0x420>)
24056634:	4293      	cmp	r3, r2
24056636:	d123      	bne.n	24056680 <HAL_DMA_Init+0x424>
24056638:	2301      	movs	r3, #1
2405663a:	e022      	b.n	24056682 <HAL_DMA_Init+0x426>
2405663c:	fe10803f 	.word	0xfe10803f
24056640:	48022c08 	.word	0x48022c08
24056644:	48022c1c 	.word	0x48022c1c
24056648:	48022c30 	.word	0x48022c30
2405664c:	48022c44 	.word	0x48022c44
24056650:	48022c58 	.word	0x48022c58
24056654:	48022c6c 	.word	0x48022c6c
24056658:	48022c80 	.word	0x48022c80
2405665c:	48022c94 	.word	0x48022c94
24056660:	58025408 	.word	0x58025408
24056664:	5802541c 	.word	0x5802541c
24056668:	58025430 	.word	0x58025430
2405666c:	58025444 	.word	0x58025444
24056670:	58025458 	.word	0x58025458
24056674:	5802546c 	.word	0x5802546c
24056678:	58025480 	.word	0x58025480
2405667c:	58025494 	.word	0x58025494
24056680:	2300      	movs	r3, #0
24056682:	2b00      	cmp	r3, #0
24056684:	d07d      	beq.n	24056782 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
24056686:	687b      	ldr	r3, [r7, #4]
24056688:	681b      	ldr	r3, [r3, #0]
2405668a:	4a7f      	ldr	r2, [pc, #508]	; (24056888 <HAL_DMA_Init+0x62c>)
2405668c:	4293      	cmp	r3, r2
2405668e:	d021      	beq.n	240566d4 <HAL_DMA_Init+0x478>
24056690:	687b      	ldr	r3, [r7, #4]
24056692:	681b      	ldr	r3, [r3, #0]
24056694:	4a7d      	ldr	r2, [pc, #500]	; (2405688c <HAL_DMA_Init+0x630>)
24056696:	4293      	cmp	r3, r2
24056698:	d01c      	beq.n	240566d4 <HAL_DMA_Init+0x478>
2405669a:	687b      	ldr	r3, [r7, #4]
2405669c:	681b      	ldr	r3, [r3, #0]
2405669e:	4a7c      	ldr	r2, [pc, #496]	; (24056890 <HAL_DMA_Init+0x634>)
240566a0:	4293      	cmp	r3, r2
240566a2:	d017      	beq.n	240566d4 <HAL_DMA_Init+0x478>
240566a4:	687b      	ldr	r3, [r7, #4]
240566a6:	681b      	ldr	r3, [r3, #0]
240566a8:	4a7a      	ldr	r2, [pc, #488]	; (24056894 <HAL_DMA_Init+0x638>)
240566aa:	4293      	cmp	r3, r2
240566ac:	d012      	beq.n	240566d4 <HAL_DMA_Init+0x478>
240566ae:	687b      	ldr	r3, [r7, #4]
240566b0:	681b      	ldr	r3, [r3, #0]
240566b2:	4a79      	ldr	r2, [pc, #484]	; (24056898 <HAL_DMA_Init+0x63c>)
240566b4:	4293      	cmp	r3, r2
240566b6:	d00d      	beq.n	240566d4 <HAL_DMA_Init+0x478>
240566b8:	687b      	ldr	r3, [r7, #4]
240566ba:	681b      	ldr	r3, [r3, #0]
240566bc:	4a77      	ldr	r2, [pc, #476]	; (2405689c <HAL_DMA_Init+0x640>)
240566be:	4293      	cmp	r3, r2
240566c0:	d008      	beq.n	240566d4 <HAL_DMA_Init+0x478>
240566c2:	687b      	ldr	r3, [r7, #4]
240566c4:	681b      	ldr	r3, [r3, #0]
240566c6:	4a76      	ldr	r2, [pc, #472]	; (240568a0 <HAL_DMA_Init+0x644>)
240566c8:	4293      	cmp	r3, r2
240566ca:	d003      	beq.n	240566d4 <HAL_DMA_Init+0x478>
240566cc:	687b      	ldr	r3, [r7, #4]
240566ce:	681b      	ldr	r3, [r3, #0]
240566d0:	4a74      	ldr	r2, [pc, #464]	; (240568a4 <HAL_DMA_Init+0x648>)
240566d2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
240566d4:	687b      	ldr	r3, [r7, #4]
240566d6:	2202      	movs	r2, #2
240566d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
240566dc:	687b      	ldr	r3, [r7, #4]
240566de:	2200      	movs	r2, #0
240566e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
240566e4:	687b      	ldr	r3, [r7, #4]
240566e6:	681b      	ldr	r3, [r3, #0]
240566e8:	681b      	ldr	r3, [r3, #0]
240566ea:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
240566ec:	697a      	ldr	r2, [r7, #20]
240566ee:	4b6e      	ldr	r3, [pc, #440]	; (240568a8 <HAL_DMA_Init+0x64c>)
240566f0:	4013      	ands	r3, r2
240566f2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
240566f4:	687b      	ldr	r3, [r7, #4]
240566f6:	689b      	ldr	r3, [r3, #8]
240566f8:	2b40      	cmp	r3, #64	; 0x40
240566fa:	d008      	beq.n	2405670e <HAL_DMA_Init+0x4b2>
240566fc:	687b      	ldr	r3, [r7, #4]
240566fe:	689b      	ldr	r3, [r3, #8]
24056700:	2b80      	cmp	r3, #128	; 0x80
24056702:	d102      	bne.n	2405670a <HAL_DMA_Init+0x4ae>
24056704:	f44f 4380 	mov.w	r3, #16384	; 0x4000
24056708:	e002      	b.n	24056710 <HAL_DMA_Init+0x4b4>
2405670a:	2300      	movs	r3, #0
2405670c:	e000      	b.n	24056710 <HAL_DMA_Init+0x4b4>
2405670e:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
24056710:	687a      	ldr	r2, [r7, #4]
24056712:	68d2      	ldr	r2, [r2, #12]
24056714:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
24056716:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
24056718:	687b      	ldr	r3, [r7, #4]
2405671a:	691b      	ldr	r3, [r3, #16]
2405671c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
2405671e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
24056720:	687b      	ldr	r3, [r7, #4]
24056722:	695b      	ldr	r3, [r3, #20]
24056724:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
24056726:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
24056728:	687b      	ldr	r3, [r7, #4]
2405672a:	699b      	ldr	r3, [r3, #24]
2405672c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
2405672e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
24056730:	687b      	ldr	r3, [r7, #4]
24056732:	69db      	ldr	r3, [r3, #28]
24056734:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
24056736:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
24056738:	687b      	ldr	r3, [r7, #4]
2405673a:	6a1b      	ldr	r3, [r3, #32]
2405673c:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
2405673e:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
24056740:	697a      	ldr	r2, [r7, #20]
24056742:	4313      	orrs	r3, r2
24056744:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
24056746:	687b      	ldr	r3, [r7, #4]
24056748:	681b      	ldr	r3, [r3, #0]
2405674a:	697a      	ldr	r2, [r7, #20]
2405674c:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
2405674e:	687b      	ldr	r3, [r7, #4]
24056750:	681b      	ldr	r3, [r3, #0]
24056752:	461a      	mov	r2, r3
24056754:	4b55      	ldr	r3, [pc, #340]	; (240568ac <HAL_DMA_Init+0x650>)
24056756:	4413      	add	r3, r2
24056758:	4a55      	ldr	r2, [pc, #340]	; (240568b0 <HAL_DMA_Init+0x654>)
2405675a:	fba2 2303 	umull	r2, r3, r2, r3
2405675e:	091b      	lsrs	r3, r3, #4
24056760:	009a      	lsls	r2, r3, #2
24056762:	687b      	ldr	r3, [r7, #4]
24056764:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
24056766:	6878      	ldr	r0, [r7, #4]
24056768:	f002 fa26 	bl	24058bb8 <DMA_CalcBaseAndBitshift>
2405676c:	4603      	mov	r3, r0
2405676e:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24056770:	687b      	ldr	r3, [r7, #4]
24056772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24056774:	f003 031f 	and.w	r3, r3, #31
24056778:	2201      	movs	r2, #1
2405677a:	409a      	lsls	r2, r3
2405677c:	68fb      	ldr	r3, [r7, #12]
2405677e:	605a      	str	r2, [r3, #4]
24056780:	e008      	b.n	24056794 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
24056782:	687b      	ldr	r3, [r7, #4]
24056784:	2240      	movs	r2, #64	; 0x40
24056786:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
24056788:	687b      	ldr	r3, [r7, #4]
2405678a:	2203      	movs	r2, #3
2405678c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
24056790:	2301      	movs	r3, #1
24056792:	e0ed      	b.n	24056970 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24056794:	687b      	ldr	r3, [r7, #4]
24056796:	681b      	ldr	r3, [r3, #0]
24056798:	4a46      	ldr	r2, [pc, #280]	; (240568b4 <HAL_DMA_Init+0x658>)
2405679a:	4293      	cmp	r3, r2
2405679c:	d072      	beq.n	24056884 <HAL_DMA_Init+0x628>
2405679e:	687b      	ldr	r3, [r7, #4]
240567a0:	681b      	ldr	r3, [r3, #0]
240567a2:	4a45      	ldr	r2, [pc, #276]	; (240568b8 <HAL_DMA_Init+0x65c>)
240567a4:	4293      	cmp	r3, r2
240567a6:	d06d      	beq.n	24056884 <HAL_DMA_Init+0x628>
240567a8:	687b      	ldr	r3, [r7, #4]
240567aa:	681b      	ldr	r3, [r3, #0]
240567ac:	4a43      	ldr	r2, [pc, #268]	; (240568bc <HAL_DMA_Init+0x660>)
240567ae:	4293      	cmp	r3, r2
240567b0:	d068      	beq.n	24056884 <HAL_DMA_Init+0x628>
240567b2:	687b      	ldr	r3, [r7, #4]
240567b4:	681b      	ldr	r3, [r3, #0]
240567b6:	4a42      	ldr	r2, [pc, #264]	; (240568c0 <HAL_DMA_Init+0x664>)
240567b8:	4293      	cmp	r3, r2
240567ba:	d063      	beq.n	24056884 <HAL_DMA_Init+0x628>
240567bc:	687b      	ldr	r3, [r7, #4]
240567be:	681b      	ldr	r3, [r3, #0]
240567c0:	4a40      	ldr	r2, [pc, #256]	; (240568c4 <HAL_DMA_Init+0x668>)
240567c2:	4293      	cmp	r3, r2
240567c4:	d05e      	beq.n	24056884 <HAL_DMA_Init+0x628>
240567c6:	687b      	ldr	r3, [r7, #4]
240567c8:	681b      	ldr	r3, [r3, #0]
240567ca:	4a3f      	ldr	r2, [pc, #252]	; (240568c8 <HAL_DMA_Init+0x66c>)
240567cc:	4293      	cmp	r3, r2
240567ce:	d059      	beq.n	24056884 <HAL_DMA_Init+0x628>
240567d0:	687b      	ldr	r3, [r7, #4]
240567d2:	681b      	ldr	r3, [r3, #0]
240567d4:	4a3d      	ldr	r2, [pc, #244]	; (240568cc <HAL_DMA_Init+0x670>)
240567d6:	4293      	cmp	r3, r2
240567d8:	d054      	beq.n	24056884 <HAL_DMA_Init+0x628>
240567da:	687b      	ldr	r3, [r7, #4]
240567dc:	681b      	ldr	r3, [r3, #0]
240567de:	4a3c      	ldr	r2, [pc, #240]	; (240568d0 <HAL_DMA_Init+0x674>)
240567e0:	4293      	cmp	r3, r2
240567e2:	d04f      	beq.n	24056884 <HAL_DMA_Init+0x628>
240567e4:	687b      	ldr	r3, [r7, #4]
240567e6:	681b      	ldr	r3, [r3, #0]
240567e8:	4a3a      	ldr	r2, [pc, #232]	; (240568d4 <HAL_DMA_Init+0x678>)
240567ea:	4293      	cmp	r3, r2
240567ec:	d04a      	beq.n	24056884 <HAL_DMA_Init+0x628>
240567ee:	687b      	ldr	r3, [r7, #4]
240567f0:	681b      	ldr	r3, [r3, #0]
240567f2:	4a39      	ldr	r2, [pc, #228]	; (240568d8 <HAL_DMA_Init+0x67c>)
240567f4:	4293      	cmp	r3, r2
240567f6:	d045      	beq.n	24056884 <HAL_DMA_Init+0x628>
240567f8:	687b      	ldr	r3, [r7, #4]
240567fa:	681b      	ldr	r3, [r3, #0]
240567fc:	4a37      	ldr	r2, [pc, #220]	; (240568dc <HAL_DMA_Init+0x680>)
240567fe:	4293      	cmp	r3, r2
24056800:	d040      	beq.n	24056884 <HAL_DMA_Init+0x628>
24056802:	687b      	ldr	r3, [r7, #4]
24056804:	681b      	ldr	r3, [r3, #0]
24056806:	4a36      	ldr	r2, [pc, #216]	; (240568e0 <HAL_DMA_Init+0x684>)
24056808:	4293      	cmp	r3, r2
2405680a:	d03b      	beq.n	24056884 <HAL_DMA_Init+0x628>
2405680c:	687b      	ldr	r3, [r7, #4]
2405680e:	681b      	ldr	r3, [r3, #0]
24056810:	4a34      	ldr	r2, [pc, #208]	; (240568e4 <HAL_DMA_Init+0x688>)
24056812:	4293      	cmp	r3, r2
24056814:	d036      	beq.n	24056884 <HAL_DMA_Init+0x628>
24056816:	687b      	ldr	r3, [r7, #4]
24056818:	681b      	ldr	r3, [r3, #0]
2405681a:	4a33      	ldr	r2, [pc, #204]	; (240568e8 <HAL_DMA_Init+0x68c>)
2405681c:	4293      	cmp	r3, r2
2405681e:	d031      	beq.n	24056884 <HAL_DMA_Init+0x628>
24056820:	687b      	ldr	r3, [r7, #4]
24056822:	681b      	ldr	r3, [r3, #0]
24056824:	4a31      	ldr	r2, [pc, #196]	; (240568ec <HAL_DMA_Init+0x690>)
24056826:	4293      	cmp	r3, r2
24056828:	d02c      	beq.n	24056884 <HAL_DMA_Init+0x628>
2405682a:	687b      	ldr	r3, [r7, #4]
2405682c:	681b      	ldr	r3, [r3, #0]
2405682e:	4a30      	ldr	r2, [pc, #192]	; (240568f0 <HAL_DMA_Init+0x694>)
24056830:	4293      	cmp	r3, r2
24056832:	d027      	beq.n	24056884 <HAL_DMA_Init+0x628>
24056834:	687b      	ldr	r3, [r7, #4]
24056836:	681b      	ldr	r3, [r3, #0]
24056838:	4a13      	ldr	r2, [pc, #76]	; (24056888 <HAL_DMA_Init+0x62c>)
2405683a:	4293      	cmp	r3, r2
2405683c:	d022      	beq.n	24056884 <HAL_DMA_Init+0x628>
2405683e:	687b      	ldr	r3, [r7, #4]
24056840:	681b      	ldr	r3, [r3, #0]
24056842:	4a12      	ldr	r2, [pc, #72]	; (2405688c <HAL_DMA_Init+0x630>)
24056844:	4293      	cmp	r3, r2
24056846:	d01d      	beq.n	24056884 <HAL_DMA_Init+0x628>
24056848:	687b      	ldr	r3, [r7, #4]
2405684a:	681b      	ldr	r3, [r3, #0]
2405684c:	4a10      	ldr	r2, [pc, #64]	; (24056890 <HAL_DMA_Init+0x634>)
2405684e:	4293      	cmp	r3, r2
24056850:	d018      	beq.n	24056884 <HAL_DMA_Init+0x628>
24056852:	687b      	ldr	r3, [r7, #4]
24056854:	681b      	ldr	r3, [r3, #0]
24056856:	4a0f      	ldr	r2, [pc, #60]	; (24056894 <HAL_DMA_Init+0x638>)
24056858:	4293      	cmp	r3, r2
2405685a:	d013      	beq.n	24056884 <HAL_DMA_Init+0x628>
2405685c:	687b      	ldr	r3, [r7, #4]
2405685e:	681b      	ldr	r3, [r3, #0]
24056860:	4a0d      	ldr	r2, [pc, #52]	; (24056898 <HAL_DMA_Init+0x63c>)
24056862:	4293      	cmp	r3, r2
24056864:	d00e      	beq.n	24056884 <HAL_DMA_Init+0x628>
24056866:	687b      	ldr	r3, [r7, #4]
24056868:	681b      	ldr	r3, [r3, #0]
2405686a:	4a0c      	ldr	r2, [pc, #48]	; (2405689c <HAL_DMA_Init+0x640>)
2405686c:	4293      	cmp	r3, r2
2405686e:	d009      	beq.n	24056884 <HAL_DMA_Init+0x628>
24056870:	687b      	ldr	r3, [r7, #4]
24056872:	681b      	ldr	r3, [r3, #0]
24056874:	4a0a      	ldr	r2, [pc, #40]	; (240568a0 <HAL_DMA_Init+0x644>)
24056876:	4293      	cmp	r3, r2
24056878:	d004      	beq.n	24056884 <HAL_DMA_Init+0x628>
2405687a:	687b      	ldr	r3, [r7, #4]
2405687c:	681b      	ldr	r3, [r3, #0]
2405687e:	4a09      	ldr	r2, [pc, #36]	; (240568a4 <HAL_DMA_Init+0x648>)
24056880:	4293      	cmp	r3, r2
24056882:	d137      	bne.n	240568f4 <HAL_DMA_Init+0x698>
24056884:	2301      	movs	r3, #1
24056886:	e036      	b.n	240568f6 <HAL_DMA_Init+0x69a>
24056888:	58025408 	.word	0x58025408
2405688c:	5802541c 	.word	0x5802541c
24056890:	58025430 	.word	0x58025430
24056894:	58025444 	.word	0x58025444
24056898:	58025458 	.word	0x58025458
2405689c:	5802546c 	.word	0x5802546c
240568a0:	58025480 	.word	0x58025480
240568a4:	58025494 	.word	0x58025494
240568a8:	fffe000f 	.word	0xfffe000f
240568ac:	a7fdabf8 	.word	0xa7fdabf8
240568b0:	cccccccd 	.word	0xcccccccd
240568b4:	40020010 	.word	0x40020010
240568b8:	40020028 	.word	0x40020028
240568bc:	40020040 	.word	0x40020040
240568c0:	40020058 	.word	0x40020058
240568c4:	40020070 	.word	0x40020070
240568c8:	40020088 	.word	0x40020088
240568cc:	400200a0 	.word	0x400200a0
240568d0:	400200b8 	.word	0x400200b8
240568d4:	40020410 	.word	0x40020410
240568d8:	40020428 	.word	0x40020428
240568dc:	40020440 	.word	0x40020440
240568e0:	40020458 	.word	0x40020458
240568e4:	40020470 	.word	0x40020470
240568e8:	40020488 	.word	0x40020488
240568ec:	400204a0 	.word	0x400204a0
240568f0:	400204b8 	.word	0x400204b8
240568f4:	2300      	movs	r3, #0
240568f6:	2b00      	cmp	r3, #0
240568f8:	d032      	beq.n	24056960 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
240568fa:	6878      	ldr	r0, [r7, #4]
240568fc:	f002 fa8a 	bl	24058e14 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
24056900:	687b      	ldr	r3, [r7, #4]
24056902:	689b      	ldr	r3, [r3, #8]
24056904:	2b80      	cmp	r3, #128	; 0x80
24056906:	d102      	bne.n	2405690e <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
24056908:	687b      	ldr	r3, [r7, #4]
2405690a:	2200      	movs	r2, #0
2405690c:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
2405690e:	687b      	ldr	r3, [r7, #4]
24056910:	685a      	ldr	r2, [r3, #4]
24056912:	687b      	ldr	r3, [r7, #4]
24056914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24056916:	b2d2      	uxtb	r2, r2
24056918:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
2405691a:	687b      	ldr	r3, [r7, #4]
2405691c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
2405691e:	687a      	ldr	r2, [r7, #4]
24056920:	6e92      	ldr	r2, [r2, #104]	; 0x68
24056922:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
24056924:	687b      	ldr	r3, [r7, #4]
24056926:	685b      	ldr	r3, [r3, #4]
24056928:	2b00      	cmp	r3, #0
2405692a:	d010      	beq.n	2405694e <HAL_DMA_Init+0x6f2>
2405692c:	687b      	ldr	r3, [r7, #4]
2405692e:	685b      	ldr	r3, [r3, #4]
24056930:	2b08      	cmp	r3, #8
24056932:	d80c      	bhi.n	2405694e <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
24056934:	6878      	ldr	r0, [r7, #4]
24056936:	f002 fb07 	bl	24058f48 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
2405693a:	687b      	ldr	r3, [r7, #4]
2405693c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
2405693e:	2200      	movs	r2, #0
24056940:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24056942:	687b      	ldr	r3, [r7, #4]
24056944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24056946:	687a      	ldr	r2, [r7, #4]
24056948:	6f52      	ldr	r2, [r2, #116]	; 0x74
2405694a:	605a      	str	r2, [r3, #4]
2405694c:	e008      	b.n	24056960 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
2405694e:	687b      	ldr	r3, [r7, #4]
24056950:	2200      	movs	r2, #0
24056952:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
24056954:	687b      	ldr	r3, [r7, #4]
24056956:	2200      	movs	r2, #0
24056958:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
2405695a:	687b      	ldr	r3, [r7, #4]
2405695c:	2200      	movs	r2, #0
2405695e:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24056960:	687b      	ldr	r3, [r7, #4]
24056962:	2200      	movs	r2, #0
24056964:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
24056966:	687b      	ldr	r3, [r7, #4]
24056968:	2201      	movs	r2, #1
2405696a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
2405696e:	2300      	movs	r3, #0
}
24056970:	4618      	mov	r0, r3
24056972:	3718      	adds	r7, #24
24056974:	46bd      	mov	sp, r7
24056976:	bd80      	pop	{r7, pc}

24056978 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
24056978:	b580      	push	{r7, lr}
2405697a:	b086      	sub	sp, #24
2405697c:	af00      	add	r7, sp, #0
2405697e:	60f8      	str	r0, [r7, #12]
24056980:	60b9      	str	r1, [r7, #8]
24056982:	607a      	str	r2, [r7, #4]
24056984:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
24056986:	2300      	movs	r3, #0
24056988:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
2405698a:	68fb      	ldr	r3, [r7, #12]
2405698c:	2b00      	cmp	r3, #0
2405698e:	d101      	bne.n	24056994 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
24056990:	2301      	movs	r3, #1
24056992:	e226      	b.n	24056de2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
24056994:	68fb      	ldr	r3, [r7, #12]
24056996:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
2405699a:	2b01      	cmp	r3, #1
2405699c:	d101      	bne.n	240569a2 <HAL_DMA_Start_IT+0x2a>
2405699e:	2302      	movs	r3, #2
240569a0:	e21f      	b.n	24056de2 <HAL_DMA_Start_IT+0x46a>
240569a2:	68fb      	ldr	r3, [r7, #12]
240569a4:	2201      	movs	r2, #1
240569a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
240569aa:	68fb      	ldr	r3, [r7, #12]
240569ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
240569b0:	b2db      	uxtb	r3, r3
240569b2:	2b01      	cmp	r3, #1
240569b4:	f040 820a 	bne.w	24056dcc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
240569b8:	68fb      	ldr	r3, [r7, #12]
240569ba:	2202      	movs	r2, #2
240569bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
240569c0:	68fb      	ldr	r3, [r7, #12]
240569c2:	2200      	movs	r2, #0
240569c4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
240569c6:	68fb      	ldr	r3, [r7, #12]
240569c8:	681b      	ldr	r3, [r3, #0]
240569ca:	4a68      	ldr	r2, [pc, #416]	; (24056b6c <HAL_DMA_Start_IT+0x1f4>)
240569cc:	4293      	cmp	r3, r2
240569ce:	d04a      	beq.n	24056a66 <HAL_DMA_Start_IT+0xee>
240569d0:	68fb      	ldr	r3, [r7, #12]
240569d2:	681b      	ldr	r3, [r3, #0]
240569d4:	4a66      	ldr	r2, [pc, #408]	; (24056b70 <HAL_DMA_Start_IT+0x1f8>)
240569d6:	4293      	cmp	r3, r2
240569d8:	d045      	beq.n	24056a66 <HAL_DMA_Start_IT+0xee>
240569da:	68fb      	ldr	r3, [r7, #12]
240569dc:	681b      	ldr	r3, [r3, #0]
240569de:	4a65      	ldr	r2, [pc, #404]	; (24056b74 <HAL_DMA_Start_IT+0x1fc>)
240569e0:	4293      	cmp	r3, r2
240569e2:	d040      	beq.n	24056a66 <HAL_DMA_Start_IT+0xee>
240569e4:	68fb      	ldr	r3, [r7, #12]
240569e6:	681b      	ldr	r3, [r3, #0]
240569e8:	4a63      	ldr	r2, [pc, #396]	; (24056b78 <HAL_DMA_Start_IT+0x200>)
240569ea:	4293      	cmp	r3, r2
240569ec:	d03b      	beq.n	24056a66 <HAL_DMA_Start_IT+0xee>
240569ee:	68fb      	ldr	r3, [r7, #12]
240569f0:	681b      	ldr	r3, [r3, #0]
240569f2:	4a62      	ldr	r2, [pc, #392]	; (24056b7c <HAL_DMA_Start_IT+0x204>)
240569f4:	4293      	cmp	r3, r2
240569f6:	d036      	beq.n	24056a66 <HAL_DMA_Start_IT+0xee>
240569f8:	68fb      	ldr	r3, [r7, #12]
240569fa:	681b      	ldr	r3, [r3, #0]
240569fc:	4a60      	ldr	r2, [pc, #384]	; (24056b80 <HAL_DMA_Start_IT+0x208>)
240569fe:	4293      	cmp	r3, r2
24056a00:	d031      	beq.n	24056a66 <HAL_DMA_Start_IT+0xee>
24056a02:	68fb      	ldr	r3, [r7, #12]
24056a04:	681b      	ldr	r3, [r3, #0]
24056a06:	4a5f      	ldr	r2, [pc, #380]	; (24056b84 <HAL_DMA_Start_IT+0x20c>)
24056a08:	4293      	cmp	r3, r2
24056a0a:	d02c      	beq.n	24056a66 <HAL_DMA_Start_IT+0xee>
24056a0c:	68fb      	ldr	r3, [r7, #12]
24056a0e:	681b      	ldr	r3, [r3, #0]
24056a10:	4a5d      	ldr	r2, [pc, #372]	; (24056b88 <HAL_DMA_Start_IT+0x210>)
24056a12:	4293      	cmp	r3, r2
24056a14:	d027      	beq.n	24056a66 <HAL_DMA_Start_IT+0xee>
24056a16:	68fb      	ldr	r3, [r7, #12]
24056a18:	681b      	ldr	r3, [r3, #0]
24056a1a:	4a5c      	ldr	r2, [pc, #368]	; (24056b8c <HAL_DMA_Start_IT+0x214>)
24056a1c:	4293      	cmp	r3, r2
24056a1e:	d022      	beq.n	24056a66 <HAL_DMA_Start_IT+0xee>
24056a20:	68fb      	ldr	r3, [r7, #12]
24056a22:	681b      	ldr	r3, [r3, #0]
24056a24:	4a5a      	ldr	r2, [pc, #360]	; (24056b90 <HAL_DMA_Start_IT+0x218>)
24056a26:	4293      	cmp	r3, r2
24056a28:	d01d      	beq.n	24056a66 <HAL_DMA_Start_IT+0xee>
24056a2a:	68fb      	ldr	r3, [r7, #12]
24056a2c:	681b      	ldr	r3, [r3, #0]
24056a2e:	4a59      	ldr	r2, [pc, #356]	; (24056b94 <HAL_DMA_Start_IT+0x21c>)
24056a30:	4293      	cmp	r3, r2
24056a32:	d018      	beq.n	24056a66 <HAL_DMA_Start_IT+0xee>
24056a34:	68fb      	ldr	r3, [r7, #12]
24056a36:	681b      	ldr	r3, [r3, #0]
24056a38:	4a57      	ldr	r2, [pc, #348]	; (24056b98 <HAL_DMA_Start_IT+0x220>)
24056a3a:	4293      	cmp	r3, r2
24056a3c:	d013      	beq.n	24056a66 <HAL_DMA_Start_IT+0xee>
24056a3e:	68fb      	ldr	r3, [r7, #12]
24056a40:	681b      	ldr	r3, [r3, #0]
24056a42:	4a56      	ldr	r2, [pc, #344]	; (24056b9c <HAL_DMA_Start_IT+0x224>)
24056a44:	4293      	cmp	r3, r2
24056a46:	d00e      	beq.n	24056a66 <HAL_DMA_Start_IT+0xee>
24056a48:	68fb      	ldr	r3, [r7, #12]
24056a4a:	681b      	ldr	r3, [r3, #0]
24056a4c:	4a54      	ldr	r2, [pc, #336]	; (24056ba0 <HAL_DMA_Start_IT+0x228>)
24056a4e:	4293      	cmp	r3, r2
24056a50:	d009      	beq.n	24056a66 <HAL_DMA_Start_IT+0xee>
24056a52:	68fb      	ldr	r3, [r7, #12]
24056a54:	681b      	ldr	r3, [r3, #0]
24056a56:	4a53      	ldr	r2, [pc, #332]	; (24056ba4 <HAL_DMA_Start_IT+0x22c>)
24056a58:	4293      	cmp	r3, r2
24056a5a:	d004      	beq.n	24056a66 <HAL_DMA_Start_IT+0xee>
24056a5c:	68fb      	ldr	r3, [r7, #12]
24056a5e:	681b      	ldr	r3, [r3, #0]
24056a60:	4a51      	ldr	r2, [pc, #324]	; (24056ba8 <HAL_DMA_Start_IT+0x230>)
24056a62:	4293      	cmp	r3, r2
24056a64:	d108      	bne.n	24056a78 <HAL_DMA_Start_IT+0x100>
24056a66:	68fb      	ldr	r3, [r7, #12]
24056a68:	681b      	ldr	r3, [r3, #0]
24056a6a:	681a      	ldr	r2, [r3, #0]
24056a6c:	68fb      	ldr	r3, [r7, #12]
24056a6e:	681b      	ldr	r3, [r3, #0]
24056a70:	f022 0201 	bic.w	r2, r2, #1
24056a74:	601a      	str	r2, [r3, #0]
24056a76:	e007      	b.n	24056a88 <HAL_DMA_Start_IT+0x110>
24056a78:	68fb      	ldr	r3, [r7, #12]
24056a7a:	681b      	ldr	r3, [r3, #0]
24056a7c:	681a      	ldr	r2, [r3, #0]
24056a7e:	68fb      	ldr	r3, [r7, #12]
24056a80:	681b      	ldr	r3, [r3, #0]
24056a82:	f022 0201 	bic.w	r2, r2, #1
24056a86:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
24056a88:	683b      	ldr	r3, [r7, #0]
24056a8a:	687a      	ldr	r2, [r7, #4]
24056a8c:	68b9      	ldr	r1, [r7, #8]
24056a8e:	68f8      	ldr	r0, [r7, #12]
24056a90:	f001 feae 	bl	240587f0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24056a94:	68fb      	ldr	r3, [r7, #12]
24056a96:	681b      	ldr	r3, [r3, #0]
24056a98:	4a34      	ldr	r2, [pc, #208]	; (24056b6c <HAL_DMA_Start_IT+0x1f4>)
24056a9a:	4293      	cmp	r3, r2
24056a9c:	d04a      	beq.n	24056b34 <HAL_DMA_Start_IT+0x1bc>
24056a9e:	68fb      	ldr	r3, [r7, #12]
24056aa0:	681b      	ldr	r3, [r3, #0]
24056aa2:	4a33      	ldr	r2, [pc, #204]	; (24056b70 <HAL_DMA_Start_IT+0x1f8>)
24056aa4:	4293      	cmp	r3, r2
24056aa6:	d045      	beq.n	24056b34 <HAL_DMA_Start_IT+0x1bc>
24056aa8:	68fb      	ldr	r3, [r7, #12]
24056aaa:	681b      	ldr	r3, [r3, #0]
24056aac:	4a31      	ldr	r2, [pc, #196]	; (24056b74 <HAL_DMA_Start_IT+0x1fc>)
24056aae:	4293      	cmp	r3, r2
24056ab0:	d040      	beq.n	24056b34 <HAL_DMA_Start_IT+0x1bc>
24056ab2:	68fb      	ldr	r3, [r7, #12]
24056ab4:	681b      	ldr	r3, [r3, #0]
24056ab6:	4a30      	ldr	r2, [pc, #192]	; (24056b78 <HAL_DMA_Start_IT+0x200>)
24056ab8:	4293      	cmp	r3, r2
24056aba:	d03b      	beq.n	24056b34 <HAL_DMA_Start_IT+0x1bc>
24056abc:	68fb      	ldr	r3, [r7, #12]
24056abe:	681b      	ldr	r3, [r3, #0]
24056ac0:	4a2e      	ldr	r2, [pc, #184]	; (24056b7c <HAL_DMA_Start_IT+0x204>)
24056ac2:	4293      	cmp	r3, r2
24056ac4:	d036      	beq.n	24056b34 <HAL_DMA_Start_IT+0x1bc>
24056ac6:	68fb      	ldr	r3, [r7, #12]
24056ac8:	681b      	ldr	r3, [r3, #0]
24056aca:	4a2d      	ldr	r2, [pc, #180]	; (24056b80 <HAL_DMA_Start_IT+0x208>)
24056acc:	4293      	cmp	r3, r2
24056ace:	d031      	beq.n	24056b34 <HAL_DMA_Start_IT+0x1bc>
24056ad0:	68fb      	ldr	r3, [r7, #12]
24056ad2:	681b      	ldr	r3, [r3, #0]
24056ad4:	4a2b      	ldr	r2, [pc, #172]	; (24056b84 <HAL_DMA_Start_IT+0x20c>)
24056ad6:	4293      	cmp	r3, r2
24056ad8:	d02c      	beq.n	24056b34 <HAL_DMA_Start_IT+0x1bc>
24056ada:	68fb      	ldr	r3, [r7, #12]
24056adc:	681b      	ldr	r3, [r3, #0]
24056ade:	4a2a      	ldr	r2, [pc, #168]	; (24056b88 <HAL_DMA_Start_IT+0x210>)
24056ae0:	4293      	cmp	r3, r2
24056ae2:	d027      	beq.n	24056b34 <HAL_DMA_Start_IT+0x1bc>
24056ae4:	68fb      	ldr	r3, [r7, #12]
24056ae6:	681b      	ldr	r3, [r3, #0]
24056ae8:	4a28      	ldr	r2, [pc, #160]	; (24056b8c <HAL_DMA_Start_IT+0x214>)
24056aea:	4293      	cmp	r3, r2
24056aec:	d022      	beq.n	24056b34 <HAL_DMA_Start_IT+0x1bc>
24056aee:	68fb      	ldr	r3, [r7, #12]
24056af0:	681b      	ldr	r3, [r3, #0]
24056af2:	4a27      	ldr	r2, [pc, #156]	; (24056b90 <HAL_DMA_Start_IT+0x218>)
24056af4:	4293      	cmp	r3, r2
24056af6:	d01d      	beq.n	24056b34 <HAL_DMA_Start_IT+0x1bc>
24056af8:	68fb      	ldr	r3, [r7, #12]
24056afa:	681b      	ldr	r3, [r3, #0]
24056afc:	4a25      	ldr	r2, [pc, #148]	; (24056b94 <HAL_DMA_Start_IT+0x21c>)
24056afe:	4293      	cmp	r3, r2
24056b00:	d018      	beq.n	24056b34 <HAL_DMA_Start_IT+0x1bc>
24056b02:	68fb      	ldr	r3, [r7, #12]
24056b04:	681b      	ldr	r3, [r3, #0]
24056b06:	4a24      	ldr	r2, [pc, #144]	; (24056b98 <HAL_DMA_Start_IT+0x220>)
24056b08:	4293      	cmp	r3, r2
24056b0a:	d013      	beq.n	24056b34 <HAL_DMA_Start_IT+0x1bc>
24056b0c:	68fb      	ldr	r3, [r7, #12]
24056b0e:	681b      	ldr	r3, [r3, #0]
24056b10:	4a22      	ldr	r2, [pc, #136]	; (24056b9c <HAL_DMA_Start_IT+0x224>)
24056b12:	4293      	cmp	r3, r2
24056b14:	d00e      	beq.n	24056b34 <HAL_DMA_Start_IT+0x1bc>
24056b16:	68fb      	ldr	r3, [r7, #12]
24056b18:	681b      	ldr	r3, [r3, #0]
24056b1a:	4a21      	ldr	r2, [pc, #132]	; (24056ba0 <HAL_DMA_Start_IT+0x228>)
24056b1c:	4293      	cmp	r3, r2
24056b1e:	d009      	beq.n	24056b34 <HAL_DMA_Start_IT+0x1bc>
24056b20:	68fb      	ldr	r3, [r7, #12]
24056b22:	681b      	ldr	r3, [r3, #0]
24056b24:	4a1f      	ldr	r2, [pc, #124]	; (24056ba4 <HAL_DMA_Start_IT+0x22c>)
24056b26:	4293      	cmp	r3, r2
24056b28:	d004      	beq.n	24056b34 <HAL_DMA_Start_IT+0x1bc>
24056b2a:	68fb      	ldr	r3, [r7, #12]
24056b2c:	681b      	ldr	r3, [r3, #0]
24056b2e:	4a1e      	ldr	r2, [pc, #120]	; (24056ba8 <HAL_DMA_Start_IT+0x230>)
24056b30:	4293      	cmp	r3, r2
24056b32:	d101      	bne.n	24056b38 <HAL_DMA_Start_IT+0x1c0>
24056b34:	2301      	movs	r3, #1
24056b36:	e000      	b.n	24056b3a <HAL_DMA_Start_IT+0x1c2>
24056b38:	2300      	movs	r3, #0
24056b3a:	2b00      	cmp	r3, #0
24056b3c:	d036      	beq.n	24056bac <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
24056b3e:	68fb      	ldr	r3, [r7, #12]
24056b40:	681b      	ldr	r3, [r3, #0]
24056b42:	681b      	ldr	r3, [r3, #0]
24056b44:	f023 021e 	bic.w	r2, r3, #30
24056b48:	68fb      	ldr	r3, [r7, #12]
24056b4a:	681b      	ldr	r3, [r3, #0]
24056b4c:	f042 0216 	orr.w	r2, r2, #22
24056b50:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
24056b52:	68fb      	ldr	r3, [r7, #12]
24056b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24056b56:	2b00      	cmp	r3, #0
24056b58:	d03e      	beq.n	24056bd8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
24056b5a:	68fb      	ldr	r3, [r7, #12]
24056b5c:	681b      	ldr	r3, [r3, #0]
24056b5e:	681a      	ldr	r2, [r3, #0]
24056b60:	68fb      	ldr	r3, [r7, #12]
24056b62:	681b      	ldr	r3, [r3, #0]
24056b64:	f042 0208 	orr.w	r2, r2, #8
24056b68:	601a      	str	r2, [r3, #0]
24056b6a:	e035      	b.n	24056bd8 <HAL_DMA_Start_IT+0x260>
24056b6c:	40020010 	.word	0x40020010
24056b70:	40020028 	.word	0x40020028
24056b74:	40020040 	.word	0x40020040
24056b78:	40020058 	.word	0x40020058
24056b7c:	40020070 	.word	0x40020070
24056b80:	40020088 	.word	0x40020088
24056b84:	400200a0 	.word	0x400200a0
24056b88:	400200b8 	.word	0x400200b8
24056b8c:	40020410 	.word	0x40020410
24056b90:	40020428 	.word	0x40020428
24056b94:	40020440 	.word	0x40020440
24056b98:	40020458 	.word	0x40020458
24056b9c:	40020470 	.word	0x40020470
24056ba0:	40020488 	.word	0x40020488
24056ba4:	400204a0 	.word	0x400204a0
24056ba8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
24056bac:	68fb      	ldr	r3, [r7, #12]
24056bae:	681b      	ldr	r3, [r3, #0]
24056bb0:	681b      	ldr	r3, [r3, #0]
24056bb2:	f023 020e 	bic.w	r2, r3, #14
24056bb6:	68fb      	ldr	r3, [r7, #12]
24056bb8:	681b      	ldr	r3, [r3, #0]
24056bba:	f042 020a 	orr.w	r2, r2, #10
24056bbe:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
24056bc0:	68fb      	ldr	r3, [r7, #12]
24056bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24056bc4:	2b00      	cmp	r3, #0
24056bc6:	d007      	beq.n	24056bd8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
24056bc8:	68fb      	ldr	r3, [r7, #12]
24056bca:	681b      	ldr	r3, [r3, #0]
24056bcc:	681a      	ldr	r2, [r3, #0]
24056bce:	68fb      	ldr	r3, [r7, #12]
24056bd0:	681b      	ldr	r3, [r3, #0]
24056bd2:	f042 0204 	orr.w	r2, r2, #4
24056bd6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24056bd8:	68fb      	ldr	r3, [r7, #12]
24056bda:	681b      	ldr	r3, [r3, #0]
24056bdc:	4a83      	ldr	r2, [pc, #524]	; (24056dec <HAL_DMA_Start_IT+0x474>)
24056bde:	4293      	cmp	r3, r2
24056be0:	d072      	beq.n	24056cc8 <HAL_DMA_Start_IT+0x350>
24056be2:	68fb      	ldr	r3, [r7, #12]
24056be4:	681b      	ldr	r3, [r3, #0]
24056be6:	4a82      	ldr	r2, [pc, #520]	; (24056df0 <HAL_DMA_Start_IT+0x478>)
24056be8:	4293      	cmp	r3, r2
24056bea:	d06d      	beq.n	24056cc8 <HAL_DMA_Start_IT+0x350>
24056bec:	68fb      	ldr	r3, [r7, #12]
24056bee:	681b      	ldr	r3, [r3, #0]
24056bf0:	4a80      	ldr	r2, [pc, #512]	; (24056df4 <HAL_DMA_Start_IT+0x47c>)
24056bf2:	4293      	cmp	r3, r2
24056bf4:	d068      	beq.n	24056cc8 <HAL_DMA_Start_IT+0x350>
24056bf6:	68fb      	ldr	r3, [r7, #12]
24056bf8:	681b      	ldr	r3, [r3, #0]
24056bfa:	4a7f      	ldr	r2, [pc, #508]	; (24056df8 <HAL_DMA_Start_IT+0x480>)
24056bfc:	4293      	cmp	r3, r2
24056bfe:	d063      	beq.n	24056cc8 <HAL_DMA_Start_IT+0x350>
24056c00:	68fb      	ldr	r3, [r7, #12]
24056c02:	681b      	ldr	r3, [r3, #0]
24056c04:	4a7d      	ldr	r2, [pc, #500]	; (24056dfc <HAL_DMA_Start_IT+0x484>)
24056c06:	4293      	cmp	r3, r2
24056c08:	d05e      	beq.n	24056cc8 <HAL_DMA_Start_IT+0x350>
24056c0a:	68fb      	ldr	r3, [r7, #12]
24056c0c:	681b      	ldr	r3, [r3, #0]
24056c0e:	4a7c      	ldr	r2, [pc, #496]	; (24056e00 <HAL_DMA_Start_IT+0x488>)
24056c10:	4293      	cmp	r3, r2
24056c12:	d059      	beq.n	24056cc8 <HAL_DMA_Start_IT+0x350>
24056c14:	68fb      	ldr	r3, [r7, #12]
24056c16:	681b      	ldr	r3, [r3, #0]
24056c18:	4a7a      	ldr	r2, [pc, #488]	; (24056e04 <HAL_DMA_Start_IT+0x48c>)
24056c1a:	4293      	cmp	r3, r2
24056c1c:	d054      	beq.n	24056cc8 <HAL_DMA_Start_IT+0x350>
24056c1e:	68fb      	ldr	r3, [r7, #12]
24056c20:	681b      	ldr	r3, [r3, #0]
24056c22:	4a79      	ldr	r2, [pc, #484]	; (24056e08 <HAL_DMA_Start_IT+0x490>)
24056c24:	4293      	cmp	r3, r2
24056c26:	d04f      	beq.n	24056cc8 <HAL_DMA_Start_IT+0x350>
24056c28:	68fb      	ldr	r3, [r7, #12]
24056c2a:	681b      	ldr	r3, [r3, #0]
24056c2c:	4a77      	ldr	r2, [pc, #476]	; (24056e0c <HAL_DMA_Start_IT+0x494>)
24056c2e:	4293      	cmp	r3, r2
24056c30:	d04a      	beq.n	24056cc8 <HAL_DMA_Start_IT+0x350>
24056c32:	68fb      	ldr	r3, [r7, #12]
24056c34:	681b      	ldr	r3, [r3, #0]
24056c36:	4a76      	ldr	r2, [pc, #472]	; (24056e10 <HAL_DMA_Start_IT+0x498>)
24056c38:	4293      	cmp	r3, r2
24056c3a:	d045      	beq.n	24056cc8 <HAL_DMA_Start_IT+0x350>
24056c3c:	68fb      	ldr	r3, [r7, #12]
24056c3e:	681b      	ldr	r3, [r3, #0]
24056c40:	4a74      	ldr	r2, [pc, #464]	; (24056e14 <HAL_DMA_Start_IT+0x49c>)
24056c42:	4293      	cmp	r3, r2
24056c44:	d040      	beq.n	24056cc8 <HAL_DMA_Start_IT+0x350>
24056c46:	68fb      	ldr	r3, [r7, #12]
24056c48:	681b      	ldr	r3, [r3, #0]
24056c4a:	4a73      	ldr	r2, [pc, #460]	; (24056e18 <HAL_DMA_Start_IT+0x4a0>)
24056c4c:	4293      	cmp	r3, r2
24056c4e:	d03b      	beq.n	24056cc8 <HAL_DMA_Start_IT+0x350>
24056c50:	68fb      	ldr	r3, [r7, #12]
24056c52:	681b      	ldr	r3, [r3, #0]
24056c54:	4a71      	ldr	r2, [pc, #452]	; (24056e1c <HAL_DMA_Start_IT+0x4a4>)
24056c56:	4293      	cmp	r3, r2
24056c58:	d036      	beq.n	24056cc8 <HAL_DMA_Start_IT+0x350>
24056c5a:	68fb      	ldr	r3, [r7, #12]
24056c5c:	681b      	ldr	r3, [r3, #0]
24056c5e:	4a70      	ldr	r2, [pc, #448]	; (24056e20 <HAL_DMA_Start_IT+0x4a8>)
24056c60:	4293      	cmp	r3, r2
24056c62:	d031      	beq.n	24056cc8 <HAL_DMA_Start_IT+0x350>
24056c64:	68fb      	ldr	r3, [r7, #12]
24056c66:	681b      	ldr	r3, [r3, #0]
24056c68:	4a6e      	ldr	r2, [pc, #440]	; (24056e24 <HAL_DMA_Start_IT+0x4ac>)
24056c6a:	4293      	cmp	r3, r2
24056c6c:	d02c      	beq.n	24056cc8 <HAL_DMA_Start_IT+0x350>
24056c6e:	68fb      	ldr	r3, [r7, #12]
24056c70:	681b      	ldr	r3, [r3, #0]
24056c72:	4a6d      	ldr	r2, [pc, #436]	; (24056e28 <HAL_DMA_Start_IT+0x4b0>)
24056c74:	4293      	cmp	r3, r2
24056c76:	d027      	beq.n	24056cc8 <HAL_DMA_Start_IT+0x350>
24056c78:	68fb      	ldr	r3, [r7, #12]
24056c7a:	681b      	ldr	r3, [r3, #0]
24056c7c:	4a6b      	ldr	r2, [pc, #428]	; (24056e2c <HAL_DMA_Start_IT+0x4b4>)
24056c7e:	4293      	cmp	r3, r2
24056c80:	d022      	beq.n	24056cc8 <HAL_DMA_Start_IT+0x350>
24056c82:	68fb      	ldr	r3, [r7, #12]
24056c84:	681b      	ldr	r3, [r3, #0]
24056c86:	4a6a      	ldr	r2, [pc, #424]	; (24056e30 <HAL_DMA_Start_IT+0x4b8>)
24056c88:	4293      	cmp	r3, r2
24056c8a:	d01d      	beq.n	24056cc8 <HAL_DMA_Start_IT+0x350>
24056c8c:	68fb      	ldr	r3, [r7, #12]
24056c8e:	681b      	ldr	r3, [r3, #0]
24056c90:	4a68      	ldr	r2, [pc, #416]	; (24056e34 <HAL_DMA_Start_IT+0x4bc>)
24056c92:	4293      	cmp	r3, r2
24056c94:	d018      	beq.n	24056cc8 <HAL_DMA_Start_IT+0x350>
24056c96:	68fb      	ldr	r3, [r7, #12]
24056c98:	681b      	ldr	r3, [r3, #0]
24056c9a:	4a67      	ldr	r2, [pc, #412]	; (24056e38 <HAL_DMA_Start_IT+0x4c0>)
24056c9c:	4293      	cmp	r3, r2
24056c9e:	d013      	beq.n	24056cc8 <HAL_DMA_Start_IT+0x350>
24056ca0:	68fb      	ldr	r3, [r7, #12]
24056ca2:	681b      	ldr	r3, [r3, #0]
24056ca4:	4a65      	ldr	r2, [pc, #404]	; (24056e3c <HAL_DMA_Start_IT+0x4c4>)
24056ca6:	4293      	cmp	r3, r2
24056ca8:	d00e      	beq.n	24056cc8 <HAL_DMA_Start_IT+0x350>
24056caa:	68fb      	ldr	r3, [r7, #12]
24056cac:	681b      	ldr	r3, [r3, #0]
24056cae:	4a64      	ldr	r2, [pc, #400]	; (24056e40 <HAL_DMA_Start_IT+0x4c8>)
24056cb0:	4293      	cmp	r3, r2
24056cb2:	d009      	beq.n	24056cc8 <HAL_DMA_Start_IT+0x350>
24056cb4:	68fb      	ldr	r3, [r7, #12]
24056cb6:	681b      	ldr	r3, [r3, #0]
24056cb8:	4a62      	ldr	r2, [pc, #392]	; (24056e44 <HAL_DMA_Start_IT+0x4cc>)
24056cba:	4293      	cmp	r3, r2
24056cbc:	d004      	beq.n	24056cc8 <HAL_DMA_Start_IT+0x350>
24056cbe:	68fb      	ldr	r3, [r7, #12]
24056cc0:	681b      	ldr	r3, [r3, #0]
24056cc2:	4a61      	ldr	r2, [pc, #388]	; (24056e48 <HAL_DMA_Start_IT+0x4d0>)
24056cc4:	4293      	cmp	r3, r2
24056cc6:	d101      	bne.n	24056ccc <HAL_DMA_Start_IT+0x354>
24056cc8:	2301      	movs	r3, #1
24056cca:	e000      	b.n	24056cce <HAL_DMA_Start_IT+0x356>
24056ccc:	2300      	movs	r3, #0
24056cce:	2b00      	cmp	r3, #0
24056cd0:	d01a      	beq.n	24056d08 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
24056cd2:	68fb      	ldr	r3, [r7, #12]
24056cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24056cd6:	681b      	ldr	r3, [r3, #0]
24056cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24056cdc:	2b00      	cmp	r3, #0
24056cde:	d007      	beq.n	24056cf0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
24056ce0:	68fb      	ldr	r3, [r7, #12]
24056ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24056ce4:	681a      	ldr	r2, [r3, #0]
24056ce6:	68fb      	ldr	r3, [r7, #12]
24056ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24056cea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
24056cee:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
24056cf0:	68fb      	ldr	r3, [r7, #12]
24056cf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24056cf4:	2b00      	cmp	r3, #0
24056cf6:	d007      	beq.n	24056d08 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
24056cf8:	68fb      	ldr	r3, [r7, #12]
24056cfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24056cfc:	681a      	ldr	r2, [r3, #0]
24056cfe:	68fb      	ldr	r3, [r7, #12]
24056d00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24056d02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
24056d06:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
24056d08:	68fb      	ldr	r3, [r7, #12]
24056d0a:	681b      	ldr	r3, [r3, #0]
24056d0c:	4a37      	ldr	r2, [pc, #220]	; (24056dec <HAL_DMA_Start_IT+0x474>)
24056d0e:	4293      	cmp	r3, r2
24056d10:	d04a      	beq.n	24056da8 <HAL_DMA_Start_IT+0x430>
24056d12:	68fb      	ldr	r3, [r7, #12]
24056d14:	681b      	ldr	r3, [r3, #0]
24056d16:	4a36      	ldr	r2, [pc, #216]	; (24056df0 <HAL_DMA_Start_IT+0x478>)
24056d18:	4293      	cmp	r3, r2
24056d1a:	d045      	beq.n	24056da8 <HAL_DMA_Start_IT+0x430>
24056d1c:	68fb      	ldr	r3, [r7, #12]
24056d1e:	681b      	ldr	r3, [r3, #0]
24056d20:	4a34      	ldr	r2, [pc, #208]	; (24056df4 <HAL_DMA_Start_IT+0x47c>)
24056d22:	4293      	cmp	r3, r2
24056d24:	d040      	beq.n	24056da8 <HAL_DMA_Start_IT+0x430>
24056d26:	68fb      	ldr	r3, [r7, #12]
24056d28:	681b      	ldr	r3, [r3, #0]
24056d2a:	4a33      	ldr	r2, [pc, #204]	; (24056df8 <HAL_DMA_Start_IT+0x480>)
24056d2c:	4293      	cmp	r3, r2
24056d2e:	d03b      	beq.n	24056da8 <HAL_DMA_Start_IT+0x430>
24056d30:	68fb      	ldr	r3, [r7, #12]
24056d32:	681b      	ldr	r3, [r3, #0]
24056d34:	4a31      	ldr	r2, [pc, #196]	; (24056dfc <HAL_DMA_Start_IT+0x484>)
24056d36:	4293      	cmp	r3, r2
24056d38:	d036      	beq.n	24056da8 <HAL_DMA_Start_IT+0x430>
24056d3a:	68fb      	ldr	r3, [r7, #12]
24056d3c:	681b      	ldr	r3, [r3, #0]
24056d3e:	4a30      	ldr	r2, [pc, #192]	; (24056e00 <HAL_DMA_Start_IT+0x488>)
24056d40:	4293      	cmp	r3, r2
24056d42:	d031      	beq.n	24056da8 <HAL_DMA_Start_IT+0x430>
24056d44:	68fb      	ldr	r3, [r7, #12]
24056d46:	681b      	ldr	r3, [r3, #0]
24056d48:	4a2e      	ldr	r2, [pc, #184]	; (24056e04 <HAL_DMA_Start_IT+0x48c>)
24056d4a:	4293      	cmp	r3, r2
24056d4c:	d02c      	beq.n	24056da8 <HAL_DMA_Start_IT+0x430>
24056d4e:	68fb      	ldr	r3, [r7, #12]
24056d50:	681b      	ldr	r3, [r3, #0]
24056d52:	4a2d      	ldr	r2, [pc, #180]	; (24056e08 <HAL_DMA_Start_IT+0x490>)
24056d54:	4293      	cmp	r3, r2
24056d56:	d027      	beq.n	24056da8 <HAL_DMA_Start_IT+0x430>
24056d58:	68fb      	ldr	r3, [r7, #12]
24056d5a:	681b      	ldr	r3, [r3, #0]
24056d5c:	4a2b      	ldr	r2, [pc, #172]	; (24056e0c <HAL_DMA_Start_IT+0x494>)
24056d5e:	4293      	cmp	r3, r2
24056d60:	d022      	beq.n	24056da8 <HAL_DMA_Start_IT+0x430>
24056d62:	68fb      	ldr	r3, [r7, #12]
24056d64:	681b      	ldr	r3, [r3, #0]
24056d66:	4a2a      	ldr	r2, [pc, #168]	; (24056e10 <HAL_DMA_Start_IT+0x498>)
24056d68:	4293      	cmp	r3, r2
24056d6a:	d01d      	beq.n	24056da8 <HAL_DMA_Start_IT+0x430>
24056d6c:	68fb      	ldr	r3, [r7, #12]
24056d6e:	681b      	ldr	r3, [r3, #0]
24056d70:	4a28      	ldr	r2, [pc, #160]	; (24056e14 <HAL_DMA_Start_IT+0x49c>)
24056d72:	4293      	cmp	r3, r2
24056d74:	d018      	beq.n	24056da8 <HAL_DMA_Start_IT+0x430>
24056d76:	68fb      	ldr	r3, [r7, #12]
24056d78:	681b      	ldr	r3, [r3, #0]
24056d7a:	4a27      	ldr	r2, [pc, #156]	; (24056e18 <HAL_DMA_Start_IT+0x4a0>)
24056d7c:	4293      	cmp	r3, r2
24056d7e:	d013      	beq.n	24056da8 <HAL_DMA_Start_IT+0x430>
24056d80:	68fb      	ldr	r3, [r7, #12]
24056d82:	681b      	ldr	r3, [r3, #0]
24056d84:	4a25      	ldr	r2, [pc, #148]	; (24056e1c <HAL_DMA_Start_IT+0x4a4>)
24056d86:	4293      	cmp	r3, r2
24056d88:	d00e      	beq.n	24056da8 <HAL_DMA_Start_IT+0x430>
24056d8a:	68fb      	ldr	r3, [r7, #12]
24056d8c:	681b      	ldr	r3, [r3, #0]
24056d8e:	4a24      	ldr	r2, [pc, #144]	; (24056e20 <HAL_DMA_Start_IT+0x4a8>)
24056d90:	4293      	cmp	r3, r2
24056d92:	d009      	beq.n	24056da8 <HAL_DMA_Start_IT+0x430>
24056d94:	68fb      	ldr	r3, [r7, #12]
24056d96:	681b      	ldr	r3, [r3, #0]
24056d98:	4a22      	ldr	r2, [pc, #136]	; (24056e24 <HAL_DMA_Start_IT+0x4ac>)
24056d9a:	4293      	cmp	r3, r2
24056d9c:	d004      	beq.n	24056da8 <HAL_DMA_Start_IT+0x430>
24056d9e:	68fb      	ldr	r3, [r7, #12]
24056da0:	681b      	ldr	r3, [r3, #0]
24056da2:	4a21      	ldr	r2, [pc, #132]	; (24056e28 <HAL_DMA_Start_IT+0x4b0>)
24056da4:	4293      	cmp	r3, r2
24056da6:	d108      	bne.n	24056dba <HAL_DMA_Start_IT+0x442>
24056da8:	68fb      	ldr	r3, [r7, #12]
24056daa:	681b      	ldr	r3, [r3, #0]
24056dac:	681a      	ldr	r2, [r3, #0]
24056dae:	68fb      	ldr	r3, [r7, #12]
24056db0:	681b      	ldr	r3, [r3, #0]
24056db2:	f042 0201 	orr.w	r2, r2, #1
24056db6:	601a      	str	r2, [r3, #0]
24056db8:	e012      	b.n	24056de0 <HAL_DMA_Start_IT+0x468>
24056dba:	68fb      	ldr	r3, [r7, #12]
24056dbc:	681b      	ldr	r3, [r3, #0]
24056dbe:	681a      	ldr	r2, [r3, #0]
24056dc0:	68fb      	ldr	r3, [r7, #12]
24056dc2:	681b      	ldr	r3, [r3, #0]
24056dc4:	f042 0201 	orr.w	r2, r2, #1
24056dc8:	601a      	str	r2, [r3, #0]
24056dca:	e009      	b.n	24056de0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
24056dcc:	68fb      	ldr	r3, [r7, #12]
24056dce:	f44f 6200 	mov.w	r2, #2048	; 0x800
24056dd2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
24056dd4:	68fb      	ldr	r3, [r7, #12]
24056dd6:	2200      	movs	r2, #0
24056dd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
24056ddc:	2301      	movs	r3, #1
24056dde:	75fb      	strb	r3, [r7, #23]
  }

  return status;
24056de0:	7dfb      	ldrb	r3, [r7, #23]
}
24056de2:	4618      	mov	r0, r3
24056de4:	3718      	adds	r7, #24
24056de6:	46bd      	mov	sp, r7
24056de8:	bd80      	pop	{r7, pc}
24056dea:	bf00      	nop
24056dec:	40020010 	.word	0x40020010
24056df0:	40020028 	.word	0x40020028
24056df4:	40020040 	.word	0x40020040
24056df8:	40020058 	.word	0x40020058
24056dfc:	40020070 	.word	0x40020070
24056e00:	40020088 	.word	0x40020088
24056e04:	400200a0 	.word	0x400200a0
24056e08:	400200b8 	.word	0x400200b8
24056e0c:	40020410 	.word	0x40020410
24056e10:	40020428 	.word	0x40020428
24056e14:	40020440 	.word	0x40020440
24056e18:	40020458 	.word	0x40020458
24056e1c:	40020470 	.word	0x40020470
24056e20:	40020488 	.word	0x40020488
24056e24:	400204a0 	.word	0x400204a0
24056e28:	400204b8 	.word	0x400204b8
24056e2c:	58025408 	.word	0x58025408
24056e30:	5802541c 	.word	0x5802541c
24056e34:	58025430 	.word	0x58025430
24056e38:	58025444 	.word	0x58025444
24056e3c:	58025458 	.word	0x58025458
24056e40:	5802546c 	.word	0x5802546c
24056e44:	58025480 	.word	0x58025480
24056e48:	58025494 	.word	0x58025494

24056e4c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
24056e4c:	b580      	push	{r7, lr}
24056e4e:	b086      	sub	sp, #24
24056e50:	af00      	add	r7, sp, #0
24056e52:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
24056e54:	f7fc ffba 	bl	24053dcc <HAL_GetTick>
24056e58:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
24056e5a:	687b      	ldr	r3, [r7, #4]
24056e5c:	2b00      	cmp	r3, #0
24056e5e:	d101      	bne.n	24056e64 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
24056e60:	2301      	movs	r3, #1
24056e62:	e2dc      	b.n	2405741e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
24056e64:	687b      	ldr	r3, [r7, #4]
24056e66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
24056e6a:	b2db      	uxtb	r3, r3
24056e6c:	2b02      	cmp	r3, #2
24056e6e:	d008      	beq.n	24056e82 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
24056e70:	687b      	ldr	r3, [r7, #4]
24056e72:	2280      	movs	r2, #128	; 0x80
24056e74:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
24056e76:	687b      	ldr	r3, [r7, #4]
24056e78:	2200      	movs	r2, #0
24056e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
24056e7e:	2301      	movs	r3, #1
24056e80:	e2cd      	b.n	2405741e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24056e82:	687b      	ldr	r3, [r7, #4]
24056e84:	681b      	ldr	r3, [r3, #0]
24056e86:	4a76      	ldr	r2, [pc, #472]	; (24057060 <HAL_DMA_Abort+0x214>)
24056e88:	4293      	cmp	r3, r2
24056e8a:	d04a      	beq.n	24056f22 <HAL_DMA_Abort+0xd6>
24056e8c:	687b      	ldr	r3, [r7, #4]
24056e8e:	681b      	ldr	r3, [r3, #0]
24056e90:	4a74      	ldr	r2, [pc, #464]	; (24057064 <HAL_DMA_Abort+0x218>)
24056e92:	4293      	cmp	r3, r2
24056e94:	d045      	beq.n	24056f22 <HAL_DMA_Abort+0xd6>
24056e96:	687b      	ldr	r3, [r7, #4]
24056e98:	681b      	ldr	r3, [r3, #0]
24056e9a:	4a73      	ldr	r2, [pc, #460]	; (24057068 <HAL_DMA_Abort+0x21c>)
24056e9c:	4293      	cmp	r3, r2
24056e9e:	d040      	beq.n	24056f22 <HAL_DMA_Abort+0xd6>
24056ea0:	687b      	ldr	r3, [r7, #4]
24056ea2:	681b      	ldr	r3, [r3, #0]
24056ea4:	4a71      	ldr	r2, [pc, #452]	; (2405706c <HAL_DMA_Abort+0x220>)
24056ea6:	4293      	cmp	r3, r2
24056ea8:	d03b      	beq.n	24056f22 <HAL_DMA_Abort+0xd6>
24056eaa:	687b      	ldr	r3, [r7, #4]
24056eac:	681b      	ldr	r3, [r3, #0]
24056eae:	4a70      	ldr	r2, [pc, #448]	; (24057070 <HAL_DMA_Abort+0x224>)
24056eb0:	4293      	cmp	r3, r2
24056eb2:	d036      	beq.n	24056f22 <HAL_DMA_Abort+0xd6>
24056eb4:	687b      	ldr	r3, [r7, #4]
24056eb6:	681b      	ldr	r3, [r3, #0]
24056eb8:	4a6e      	ldr	r2, [pc, #440]	; (24057074 <HAL_DMA_Abort+0x228>)
24056eba:	4293      	cmp	r3, r2
24056ebc:	d031      	beq.n	24056f22 <HAL_DMA_Abort+0xd6>
24056ebe:	687b      	ldr	r3, [r7, #4]
24056ec0:	681b      	ldr	r3, [r3, #0]
24056ec2:	4a6d      	ldr	r2, [pc, #436]	; (24057078 <HAL_DMA_Abort+0x22c>)
24056ec4:	4293      	cmp	r3, r2
24056ec6:	d02c      	beq.n	24056f22 <HAL_DMA_Abort+0xd6>
24056ec8:	687b      	ldr	r3, [r7, #4]
24056eca:	681b      	ldr	r3, [r3, #0]
24056ecc:	4a6b      	ldr	r2, [pc, #428]	; (2405707c <HAL_DMA_Abort+0x230>)
24056ece:	4293      	cmp	r3, r2
24056ed0:	d027      	beq.n	24056f22 <HAL_DMA_Abort+0xd6>
24056ed2:	687b      	ldr	r3, [r7, #4]
24056ed4:	681b      	ldr	r3, [r3, #0]
24056ed6:	4a6a      	ldr	r2, [pc, #424]	; (24057080 <HAL_DMA_Abort+0x234>)
24056ed8:	4293      	cmp	r3, r2
24056eda:	d022      	beq.n	24056f22 <HAL_DMA_Abort+0xd6>
24056edc:	687b      	ldr	r3, [r7, #4]
24056ede:	681b      	ldr	r3, [r3, #0]
24056ee0:	4a68      	ldr	r2, [pc, #416]	; (24057084 <HAL_DMA_Abort+0x238>)
24056ee2:	4293      	cmp	r3, r2
24056ee4:	d01d      	beq.n	24056f22 <HAL_DMA_Abort+0xd6>
24056ee6:	687b      	ldr	r3, [r7, #4]
24056ee8:	681b      	ldr	r3, [r3, #0]
24056eea:	4a67      	ldr	r2, [pc, #412]	; (24057088 <HAL_DMA_Abort+0x23c>)
24056eec:	4293      	cmp	r3, r2
24056eee:	d018      	beq.n	24056f22 <HAL_DMA_Abort+0xd6>
24056ef0:	687b      	ldr	r3, [r7, #4]
24056ef2:	681b      	ldr	r3, [r3, #0]
24056ef4:	4a65      	ldr	r2, [pc, #404]	; (2405708c <HAL_DMA_Abort+0x240>)
24056ef6:	4293      	cmp	r3, r2
24056ef8:	d013      	beq.n	24056f22 <HAL_DMA_Abort+0xd6>
24056efa:	687b      	ldr	r3, [r7, #4]
24056efc:	681b      	ldr	r3, [r3, #0]
24056efe:	4a64      	ldr	r2, [pc, #400]	; (24057090 <HAL_DMA_Abort+0x244>)
24056f00:	4293      	cmp	r3, r2
24056f02:	d00e      	beq.n	24056f22 <HAL_DMA_Abort+0xd6>
24056f04:	687b      	ldr	r3, [r7, #4]
24056f06:	681b      	ldr	r3, [r3, #0]
24056f08:	4a62      	ldr	r2, [pc, #392]	; (24057094 <HAL_DMA_Abort+0x248>)
24056f0a:	4293      	cmp	r3, r2
24056f0c:	d009      	beq.n	24056f22 <HAL_DMA_Abort+0xd6>
24056f0e:	687b      	ldr	r3, [r7, #4]
24056f10:	681b      	ldr	r3, [r3, #0]
24056f12:	4a61      	ldr	r2, [pc, #388]	; (24057098 <HAL_DMA_Abort+0x24c>)
24056f14:	4293      	cmp	r3, r2
24056f16:	d004      	beq.n	24056f22 <HAL_DMA_Abort+0xd6>
24056f18:	687b      	ldr	r3, [r7, #4]
24056f1a:	681b      	ldr	r3, [r3, #0]
24056f1c:	4a5f      	ldr	r2, [pc, #380]	; (2405709c <HAL_DMA_Abort+0x250>)
24056f1e:	4293      	cmp	r3, r2
24056f20:	d101      	bne.n	24056f26 <HAL_DMA_Abort+0xda>
24056f22:	2301      	movs	r3, #1
24056f24:	e000      	b.n	24056f28 <HAL_DMA_Abort+0xdc>
24056f26:	2300      	movs	r3, #0
24056f28:	2b00      	cmp	r3, #0
24056f2a:	d013      	beq.n	24056f54 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
24056f2c:	687b      	ldr	r3, [r7, #4]
24056f2e:	681b      	ldr	r3, [r3, #0]
24056f30:	681a      	ldr	r2, [r3, #0]
24056f32:	687b      	ldr	r3, [r7, #4]
24056f34:	681b      	ldr	r3, [r3, #0]
24056f36:	f022 021e 	bic.w	r2, r2, #30
24056f3a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
24056f3c:	687b      	ldr	r3, [r7, #4]
24056f3e:	681b      	ldr	r3, [r3, #0]
24056f40:	695a      	ldr	r2, [r3, #20]
24056f42:	687b      	ldr	r3, [r7, #4]
24056f44:	681b      	ldr	r3, [r3, #0]
24056f46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
24056f4a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
24056f4c:	687b      	ldr	r3, [r7, #4]
24056f4e:	681b      	ldr	r3, [r3, #0]
24056f50:	617b      	str	r3, [r7, #20]
24056f52:	e00a      	b.n	24056f6a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
24056f54:	687b      	ldr	r3, [r7, #4]
24056f56:	681b      	ldr	r3, [r3, #0]
24056f58:	681a      	ldr	r2, [r3, #0]
24056f5a:	687b      	ldr	r3, [r7, #4]
24056f5c:	681b      	ldr	r3, [r3, #0]
24056f5e:	f022 020e 	bic.w	r2, r2, #14
24056f62:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
24056f64:	687b      	ldr	r3, [r7, #4]
24056f66:	681b      	ldr	r3, [r3, #0]
24056f68:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24056f6a:	687b      	ldr	r3, [r7, #4]
24056f6c:	681b      	ldr	r3, [r3, #0]
24056f6e:	4a3c      	ldr	r2, [pc, #240]	; (24057060 <HAL_DMA_Abort+0x214>)
24056f70:	4293      	cmp	r3, r2
24056f72:	d072      	beq.n	2405705a <HAL_DMA_Abort+0x20e>
24056f74:	687b      	ldr	r3, [r7, #4]
24056f76:	681b      	ldr	r3, [r3, #0]
24056f78:	4a3a      	ldr	r2, [pc, #232]	; (24057064 <HAL_DMA_Abort+0x218>)
24056f7a:	4293      	cmp	r3, r2
24056f7c:	d06d      	beq.n	2405705a <HAL_DMA_Abort+0x20e>
24056f7e:	687b      	ldr	r3, [r7, #4]
24056f80:	681b      	ldr	r3, [r3, #0]
24056f82:	4a39      	ldr	r2, [pc, #228]	; (24057068 <HAL_DMA_Abort+0x21c>)
24056f84:	4293      	cmp	r3, r2
24056f86:	d068      	beq.n	2405705a <HAL_DMA_Abort+0x20e>
24056f88:	687b      	ldr	r3, [r7, #4]
24056f8a:	681b      	ldr	r3, [r3, #0]
24056f8c:	4a37      	ldr	r2, [pc, #220]	; (2405706c <HAL_DMA_Abort+0x220>)
24056f8e:	4293      	cmp	r3, r2
24056f90:	d063      	beq.n	2405705a <HAL_DMA_Abort+0x20e>
24056f92:	687b      	ldr	r3, [r7, #4]
24056f94:	681b      	ldr	r3, [r3, #0]
24056f96:	4a36      	ldr	r2, [pc, #216]	; (24057070 <HAL_DMA_Abort+0x224>)
24056f98:	4293      	cmp	r3, r2
24056f9a:	d05e      	beq.n	2405705a <HAL_DMA_Abort+0x20e>
24056f9c:	687b      	ldr	r3, [r7, #4]
24056f9e:	681b      	ldr	r3, [r3, #0]
24056fa0:	4a34      	ldr	r2, [pc, #208]	; (24057074 <HAL_DMA_Abort+0x228>)
24056fa2:	4293      	cmp	r3, r2
24056fa4:	d059      	beq.n	2405705a <HAL_DMA_Abort+0x20e>
24056fa6:	687b      	ldr	r3, [r7, #4]
24056fa8:	681b      	ldr	r3, [r3, #0]
24056faa:	4a33      	ldr	r2, [pc, #204]	; (24057078 <HAL_DMA_Abort+0x22c>)
24056fac:	4293      	cmp	r3, r2
24056fae:	d054      	beq.n	2405705a <HAL_DMA_Abort+0x20e>
24056fb0:	687b      	ldr	r3, [r7, #4]
24056fb2:	681b      	ldr	r3, [r3, #0]
24056fb4:	4a31      	ldr	r2, [pc, #196]	; (2405707c <HAL_DMA_Abort+0x230>)
24056fb6:	4293      	cmp	r3, r2
24056fb8:	d04f      	beq.n	2405705a <HAL_DMA_Abort+0x20e>
24056fba:	687b      	ldr	r3, [r7, #4]
24056fbc:	681b      	ldr	r3, [r3, #0]
24056fbe:	4a30      	ldr	r2, [pc, #192]	; (24057080 <HAL_DMA_Abort+0x234>)
24056fc0:	4293      	cmp	r3, r2
24056fc2:	d04a      	beq.n	2405705a <HAL_DMA_Abort+0x20e>
24056fc4:	687b      	ldr	r3, [r7, #4]
24056fc6:	681b      	ldr	r3, [r3, #0]
24056fc8:	4a2e      	ldr	r2, [pc, #184]	; (24057084 <HAL_DMA_Abort+0x238>)
24056fca:	4293      	cmp	r3, r2
24056fcc:	d045      	beq.n	2405705a <HAL_DMA_Abort+0x20e>
24056fce:	687b      	ldr	r3, [r7, #4]
24056fd0:	681b      	ldr	r3, [r3, #0]
24056fd2:	4a2d      	ldr	r2, [pc, #180]	; (24057088 <HAL_DMA_Abort+0x23c>)
24056fd4:	4293      	cmp	r3, r2
24056fd6:	d040      	beq.n	2405705a <HAL_DMA_Abort+0x20e>
24056fd8:	687b      	ldr	r3, [r7, #4]
24056fda:	681b      	ldr	r3, [r3, #0]
24056fdc:	4a2b      	ldr	r2, [pc, #172]	; (2405708c <HAL_DMA_Abort+0x240>)
24056fde:	4293      	cmp	r3, r2
24056fe0:	d03b      	beq.n	2405705a <HAL_DMA_Abort+0x20e>
24056fe2:	687b      	ldr	r3, [r7, #4]
24056fe4:	681b      	ldr	r3, [r3, #0]
24056fe6:	4a2a      	ldr	r2, [pc, #168]	; (24057090 <HAL_DMA_Abort+0x244>)
24056fe8:	4293      	cmp	r3, r2
24056fea:	d036      	beq.n	2405705a <HAL_DMA_Abort+0x20e>
24056fec:	687b      	ldr	r3, [r7, #4]
24056fee:	681b      	ldr	r3, [r3, #0]
24056ff0:	4a28      	ldr	r2, [pc, #160]	; (24057094 <HAL_DMA_Abort+0x248>)
24056ff2:	4293      	cmp	r3, r2
24056ff4:	d031      	beq.n	2405705a <HAL_DMA_Abort+0x20e>
24056ff6:	687b      	ldr	r3, [r7, #4]
24056ff8:	681b      	ldr	r3, [r3, #0]
24056ffa:	4a27      	ldr	r2, [pc, #156]	; (24057098 <HAL_DMA_Abort+0x24c>)
24056ffc:	4293      	cmp	r3, r2
24056ffe:	d02c      	beq.n	2405705a <HAL_DMA_Abort+0x20e>
24057000:	687b      	ldr	r3, [r7, #4]
24057002:	681b      	ldr	r3, [r3, #0]
24057004:	4a25      	ldr	r2, [pc, #148]	; (2405709c <HAL_DMA_Abort+0x250>)
24057006:	4293      	cmp	r3, r2
24057008:	d027      	beq.n	2405705a <HAL_DMA_Abort+0x20e>
2405700a:	687b      	ldr	r3, [r7, #4]
2405700c:	681b      	ldr	r3, [r3, #0]
2405700e:	4a24      	ldr	r2, [pc, #144]	; (240570a0 <HAL_DMA_Abort+0x254>)
24057010:	4293      	cmp	r3, r2
24057012:	d022      	beq.n	2405705a <HAL_DMA_Abort+0x20e>
24057014:	687b      	ldr	r3, [r7, #4]
24057016:	681b      	ldr	r3, [r3, #0]
24057018:	4a22      	ldr	r2, [pc, #136]	; (240570a4 <HAL_DMA_Abort+0x258>)
2405701a:	4293      	cmp	r3, r2
2405701c:	d01d      	beq.n	2405705a <HAL_DMA_Abort+0x20e>
2405701e:	687b      	ldr	r3, [r7, #4]
24057020:	681b      	ldr	r3, [r3, #0]
24057022:	4a21      	ldr	r2, [pc, #132]	; (240570a8 <HAL_DMA_Abort+0x25c>)
24057024:	4293      	cmp	r3, r2
24057026:	d018      	beq.n	2405705a <HAL_DMA_Abort+0x20e>
24057028:	687b      	ldr	r3, [r7, #4]
2405702a:	681b      	ldr	r3, [r3, #0]
2405702c:	4a1f      	ldr	r2, [pc, #124]	; (240570ac <HAL_DMA_Abort+0x260>)
2405702e:	4293      	cmp	r3, r2
24057030:	d013      	beq.n	2405705a <HAL_DMA_Abort+0x20e>
24057032:	687b      	ldr	r3, [r7, #4]
24057034:	681b      	ldr	r3, [r3, #0]
24057036:	4a1e      	ldr	r2, [pc, #120]	; (240570b0 <HAL_DMA_Abort+0x264>)
24057038:	4293      	cmp	r3, r2
2405703a:	d00e      	beq.n	2405705a <HAL_DMA_Abort+0x20e>
2405703c:	687b      	ldr	r3, [r7, #4]
2405703e:	681b      	ldr	r3, [r3, #0]
24057040:	4a1c      	ldr	r2, [pc, #112]	; (240570b4 <HAL_DMA_Abort+0x268>)
24057042:	4293      	cmp	r3, r2
24057044:	d009      	beq.n	2405705a <HAL_DMA_Abort+0x20e>
24057046:	687b      	ldr	r3, [r7, #4]
24057048:	681b      	ldr	r3, [r3, #0]
2405704a:	4a1b      	ldr	r2, [pc, #108]	; (240570b8 <HAL_DMA_Abort+0x26c>)
2405704c:	4293      	cmp	r3, r2
2405704e:	d004      	beq.n	2405705a <HAL_DMA_Abort+0x20e>
24057050:	687b      	ldr	r3, [r7, #4]
24057052:	681b      	ldr	r3, [r3, #0]
24057054:	4a19      	ldr	r2, [pc, #100]	; (240570bc <HAL_DMA_Abort+0x270>)
24057056:	4293      	cmp	r3, r2
24057058:	d132      	bne.n	240570c0 <HAL_DMA_Abort+0x274>
2405705a:	2301      	movs	r3, #1
2405705c:	e031      	b.n	240570c2 <HAL_DMA_Abort+0x276>
2405705e:	bf00      	nop
24057060:	40020010 	.word	0x40020010
24057064:	40020028 	.word	0x40020028
24057068:	40020040 	.word	0x40020040
2405706c:	40020058 	.word	0x40020058
24057070:	40020070 	.word	0x40020070
24057074:	40020088 	.word	0x40020088
24057078:	400200a0 	.word	0x400200a0
2405707c:	400200b8 	.word	0x400200b8
24057080:	40020410 	.word	0x40020410
24057084:	40020428 	.word	0x40020428
24057088:	40020440 	.word	0x40020440
2405708c:	40020458 	.word	0x40020458
24057090:	40020470 	.word	0x40020470
24057094:	40020488 	.word	0x40020488
24057098:	400204a0 	.word	0x400204a0
2405709c:	400204b8 	.word	0x400204b8
240570a0:	58025408 	.word	0x58025408
240570a4:	5802541c 	.word	0x5802541c
240570a8:	58025430 	.word	0x58025430
240570ac:	58025444 	.word	0x58025444
240570b0:	58025458 	.word	0x58025458
240570b4:	5802546c 	.word	0x5802546c
240570b8:	58025480 	.word	0x58025480
240570bc:	58025494 	.word	0x58025494
240570c0:	2300      	movs	r3, #0
240570c2:	2b00      	cmp	r3, #0
240570c4:	d007      	beq.n	240570d6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
240570c6:	687b      	ldr	r3, [r7, #4]
240570c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
240570ca:	681a      	ldr	r2, [r3, #0]
240570cc:	687b      	ldr	r3, [r7, #4]
240570ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
240570d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
240570d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
240570d6:	687b      	ldr	r3, [r7, #4]
240570d8:	681b      	ldr	r3, [r3, #0]
240570da:	4a6d      	ldr	r2, [pc, #436]	; (24057290 <HAL_DMA_Abort+0x444>)
240570dc:	4293      	cmp	r3, r2
240570de:	d04a      	beq.n	24057176 <HAL_DMA_Abort+0x32a>
240570e0:	687b      	ldr	r3, [r7, #4]
240570e2:	681b      	ldr	r3, [r3, #0]
240570e4:	4a6b      	ldr	r2, [pc, #428]	; (24057294 <HAL_DMA_Abort+0x448>)
240570e6:	4293      	cmp	r3, r2
240570e8:	d045      	beq.n	24057176 <HAL_DMA_Abort+0x32a>
240570ea:	687b      	ldr	r3, [r7, #4]
240570ec:	681b      	ldr	r3, [r3, #0]
240570ee:	4a6a      	ldr	r2, [pc, #424]	; (24057298 <HAL_DMA_Abort+0x44c>)
240570f0:	4293      	cmp	r3, r2
240570f2:	d040      	beq.n	24057176 <HAL_DMA_Abort+0x32a>
240570f4:	687b      	ldr	r3, [r7, #4]
240570f6:	681b      	ldr	r3, [r3, #0]
240570f8:	4a68      	ldr	r2, [pc, #416]	; (2405729c <HAL_DMA_Abort+0x450>)
240570fa:	4293      	cmp	r3, r2
240570fc:	d03b      	beq.n	24057176 <HAL_DMA_Abort+0x32a>
240570fe:	687b      	ldr	r3, [r7, #4]
24057100:	681b      	ldr	r3, [r3, #0]
24057102:	4a67      	ldr	r2, [pc, #412]	; (240572a0 <HAL_DMA_Abort+0x454>)
24057104:	4293      	cmp	r3, r2
24057106:	d036      	beq.n	24057176 <HAL_DMA_Abort+0x32a>
24057108:	687b      	ldr	r3, [r7, #4]
2405710a:	681b      	ldr	r3, [r3, #0]
2405710c:	4a65      	ldr	r2, [pc, #404]	; (240572a4 <HAL_DMA_Abort+0x458>)
2405710e:	4293      	cmp	r3, r2
24057110:	d031      	beq.n	24057176 <HAL_DMA_Abort+0x32a>
24057112:	687b      	ldr	r3, [r7, #4]
24057114:	681b      	ldr	r3, [r3, #0]
24057116:	4a64      	ldr	r2, [pc, #400]	; (240572a8 <HAL_DMA_Abort+0x45c>)
24057118:	4293      	cmp	r3, r2
2405711a:	d02c      	beq.n	24057176 <HAL_DMA_Abort+0x32a>
2405711c:	687b      	ldr	r3, [r7, #4]
2405711e:	681b      	ldr	r3, [r3, #0]
24057120:	4a62      	ldr	r2, [pc, #392]	; (240572ac <HAL_DMA_Abort+0x460>)
24057122:	4293      	cmp	r3, r2
24057124:	d027      	beq.n	24057176 <HAL_DMA_Abort+0x32a>
24057126:	687b      	ldr	r3, [r7, #4]
24057128:	681b      	ldr	r3, [r3, #0]
2405712a:	4a61      	ldr	r2, [pc, #388]	; (240572b0 <HAL_DMA_Abort+0x464>)
2405712c:	4293      	cmp	r3, r2
2405712e:	d022      	beq.n	24057176 <HAL_DMA_Abort+0x32a>
24057130:	687b      	ldr	r3, [r7, #4]
24057132:	681b      	ldr	r3, [r3, #0]
24057134:	4a5f      	ldr	r2, [pc, #380]	; (240572b4 <HAL_DMA_Abort+0x468>)
24057136:	4293      	cmp	r3, r2
24057138:	d01d      	beq.n	24057176 <HAL_DMA_Abort+0x32a>
2405713a:	687b      	ldr	r3, [r7, #4]
2405713c:	681b      	ldr	r3, [r3, #0]
2405713e:	4a5e      	ldr	r2, [pc, #376]	; (240572b8 <HAL_DMA_Abort+0x46c>)
24057140:	4293      	cmp	r3, r2
24057142:	d018      	beq.n	24057176 <HAL_DMA_Abort+0x32a>
24057144:	687b      	ldr	r3, [r7, #4]
24057146:	681b      	ldr	r3, [r3, #0]
24057148:	4a5c      	ldr	r2, [pc, #368]	; (240572bc <HAL_DMA_Abort+0x470>)
2405714a:	4293      	cmp	r3, r2
2405714c:	d013      	beq.n	24057176 <HAL_DMA_Abort+0x32a>
2405714e:	687b      	ldr	r3, [r7, #4]
24057150:	681b      	ldr	r3, [r3, #0]
24057152:	4a5b      	ldr	r2, [pc, #364]	; (240572c0 <HAL_DMA_Abort+0x474>)
24057154:	4293      	cmp	r3, r2
24057156:	d00e      	beq.n	24057176 <HAL_DMA_Abort+0x32a>
24057158:	687b      	ldr	r3, [r7, #4]
2405715a:	681b      	ldr	r3, [r3, #0]
2405715c:	4a59      	ldr	r2, [pc, #356]	; (240572c4 <HAL_DMA_Abort+0x478>)
2405715e:	4293      	cmp	r3, r2
24057160:	d009      	beq.n	24057176 <HAL_DMA_Abort+0x32a>
24057162:	687b      	ldr	r3, [r7, #4]
24057164:	681b      	ldr	r3, [r3, #0]
24057166:	4a58      	ldr	r2, [pc, #352]	; (240572c8 <HAL_DMA_Abort+0x47c>)
24057168:	4293      	cmp	r3, r2
2405716a:	d004      	beq.n	24057176 <HAL_DMA_Abort+0x32a>
2405716c:	687b      	ldr	r3, [r7, #4]
2405716e:	681b      	ldr	r3, [r3, #0]
24057170:	4a56      	ldr	r2, [pc, #344]	; (240572cc <HAL_DMA_Abort+0x480>)
24057172:	4293      	cmp	r3, r2
24057174:	d108      	bne.n	24057188 <HAL_DMA_Abort+0x33c>
24057176:	687b      	ldr	r3, [r7, #4]
24057178:	681b      	ldr	r3, [r3, #0]
2405717a:	681a      	ldr	r2, [r3, #0]
2405717c:	687b      	ldr	r3, [r7, #4]
2405717e:	681b      	ldr	r3, [r3, #0]
24057180:	f022 0201 	bic.w	r2, r2, #1
24057184:	601a      	str	r2, [r3, #0]
24057186:	e007      	b.n	24057198 <HAL_DMA_Abort+0x34c>
24057188:	687b      	ldr	r3, [r7, #4]
2405718a:	681b      	ldr	r3, [r3, #0]
2405718c:	681a      	ldr	r2, [r3, #0]
2405718e:	687b      	ldr	r3, [r7, #4]
24057190:	681b      	ldr	r3, [r3, #0]
24057192:	f022 0201 	bic.w	r2, r2, #1
24057196:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
24057198:	e013      	b.n	240571c2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
2405719a:	f7fc fe17 	bl	24053dcc <HAL_GetTick>
2405719e:	4602      	mov	r2, r0
240571a0:	693b      	ldr	r3, [r7, #16]
240571a2:	1ad3      	subs	r3, r2, r3
240571a4:	2b05      	cmp	r3, #5
240571a6:	d90c      	bls.n	240571c2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
240571a8:	687b      	ldr	r3, [r7, #4]
240571aa:	2220      	movs	r2, #32
240571ac:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
240571ae:	687b      	ldr	r3, [r7, #4]
240571b0:	2203      	movs	r2, #3
240571b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
240571b6:	687b      	ldr	r3, [r7, #4]
240571b8:	2200      	movs	r2, #0
240571ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
240571be:	2301      	movs	r3, #1
240571c0:	e12d      	b.n	2405741e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
240571c2:	697b      	ldr	r3, [r7, #20]
240571c4:	681b      	ldr	r3, [r3, #0]
240571c6:	f003 0301 	and.w	r3, r3, #1
240571ca:	2b00      	cmp	r3, #0
240571cc:	d1e5      	bne.n	2405719a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
240571ce:	687b      	ldr	r3, [r7, #4]
240571d0:	681b      	ldr	r3, [r3, #0]
240571d2:	4a2f      	ldr	r2, [pc, #188]	; (24057290 <HAL_DMA_Abort+0x444>)
240571d4:	4293      	cmp	r3, r2
240571d6:	d04a      	beq.n	2405726e <HAL_DMA_Abort+0x422>
240571d8:	687b      	ldr	r3, [r7, #4]
240571da:	681b      	ldr	r3, [r3, #0]
240571dc:	4a2d      	ldr	r2, [pc, #180]	; (24057294 <HAL_DMA_Abort+0x448>)
240571de:	4293      	cmp	r3, r2
240571e0:	d045      	beq.n	2405726e <HAL_DMA_Abort+0x422>
240571e2:	687b      	ldr	r3, [r7, #4]
240571e4:	681b      	ldr	r3, [r3, #0]
240571e6:	4a2c      	ldr	r2, [pc, #176]	; (24057298 <HAL_DMA_Abort+0x44c>)
240571e8:	4293      	cmp	r3, r2
240571ea:	d040      	beq.n	2405726e <HAL_DMA_Abort+0x422>
240571ec:	687b      	ldr	r3, [r7, #4]
240571ee:	681b      	ldr	r3, [r3, #0]
240571f0:	4a2a      	ldr	r2, [pc, #168]	; (2405729c <HAL_DMA_Abort+0x450>)
240571f2:	4293      	cmp	r3, r2
240571f4:	d03b      	beq.n	2405726e <HAL_DMA_Abort+0x422>
240571f6:	687b      	ldr	r3, [r7, #4]
240571f8:	681b      	ldr	r3, [r3, #0]
240571fa:	4a29      	ldr	r2, [pc, #164]	; (240572a0 <HAL_DMA_Abort+0x454>)
240571fc:	4293      	cmp	r3, r2
240571fe:	d036      	beq.n	2405726e <HAL_DMA_Abort+0x422>
24057200:	687b      	ldr	r3, [r7, #4]
24057202:	681b      	ldr	r3, [r3, #0]
24057204:	4a27      	ldr	r2, [pc, #156]	; (240572a4 <HAL_DMA_Abort+0x458>)
24057206:	4293      	cmp	r3, r2
24057208:	d031      	beq.n	2405726e <HAL_DMA_Abort+0x422>
2405720a:	687b      	ldr	r3, [r7, #4]
2405720c:	681b      	ldr	r3, [r3, #0]
2405720e:	4a26      	ldr	r2, [pc, #152]	; (240572a8 <HAL_DMA_Abort+0x45c>)
24057210:	4293      	cmp	r3, r2
24057212:	d02c      	beq.n	2405726e <HAL_DMA_Abort+0x422>
24057214:	687b      	ldr	r3, [r7, #4]
24057216:	681b      	ldr	r3, [r3, #0]
24057218:	4a24      	ldr	r2, [pc, #144]	; (240572ac <HAL_DMA_Abort+0x460>)
2405721a:	4293      	cmp	r3, r2
2405721c:	d027      	beq.n	2405726e <HAL_DMA_Abort+0x422>
2405721e:	687b      	ldr	r3, [r7, #4]
24057220:	681b      	ldr	r3, [r3, #0]
24057222:	4a23      	ldr	r2, [pc, #140]	; (240572b0 <HAL_DMA_Abort+0x464>)
24057224:	4293      	cmp	r3, r2
24057226:	d022      	beq.n	2405726e <HAL_DMA_Abort+0x422>
24057228:	687b      	ldr	r3, [r7, #4]
2405722a:	681b      	ldr	r3, [r3, #0]
2405722c:	4a21      	ldr	r2, [pc, #132]	; (240572b4 <HAL_DMA_Abort+0x468>)
2405722e:	4293      	cmp	r3, r2
24057230:	d01d      	beq.n	2405726e <HAL_DMA_Abort+0x422>
24057232:	687b      	ldr	r3, [r7, #4]
24057234:	681b      	ldr	r3, [r3, #0]
24057236:	4a20      	ldr	r2, [pc, #128]	; (240572b8 <HAL_DMA_Abort+0x46c>)
24057238:	4293      	cmp	r3, r2
2405723a:	d018      	beq.n	2405726e <HAL_DMA_Abort+0x422>
2405723c:	687b      	ldr	r3, [r7, #4]
2405723e:	681b      	ldr	r3, [r3, #0]
24057240:	4a1e      	ldr	r2, [pc, #120]	; (240572bc <HAL_DMA_Abort+0x470>)
24057242:	4293      	cmp	r3, r2
24057244:	d013      	beq.n	2405726e <HAL_DMA_Abort+0x422>
24057246:	687b      	ldr	r3, [r7, #4]
24057248:	681b      	ldr	r3, [r3, #0]
2405724a:	4a1d      	ldr	r2, [pc, #116]	; (240572c0 <HAL_DMA_Abort+0x474>)
2405724c:	4293      	cmp	r3, r2
2405724e:	d00e      	beq.n	2405726e <HAL_DMA_Abort+0x422>
24057250:	687b      	ldr	r3, [r7, #4]
24057252:	681b      	ldr	r3, [r3, #0]
24057254:	4a1b      	ldr	r2, [pc, #108]	; (240572c4 <HAL_DMA_Abort+0x478>)
24057256:	4293      	cmp	r3, r2
24057258:	d009      	beq.n	2405726e <HAL_DMA_Abort+0x422>
2405725a:	687b      	ldr	r3, [r7, #4]
2405725c:	681b      	ldr	r3, [r3, #0]
2405725e:	4a1a      	ldr	r2, [pc, #104]	; (240572c8 <HAL_DMA_Abort+0x47c>)
24057260:	4293      	cmp	r3, r2
24057262:	d004      	beq.n	2405726e <HAL_DMA_Abort+0x422>
24057264:	687b      	ldr	r3, [r7, #4]
24057266:	681b      	ldr	r3, [r3, #0]
24057268:	4a18      	ldr	r2, [pc, #96]	; (240572cc <HAL_DMA_Abort+0x480>)
2405726a:	4293      	cmp	r3, r2
2405726c:	d101      	bne.n	24057272 <HAL_DMA_Abort+0x426>
2405726e:	2301      	movs	r3, #1
24057270:	e000      	b.n	24057274 <HAL_DMA_Abort+0x428>
24057272:	2300      	movs	r3, #0
24057274:	2b00      	cmp	r3, #0
24057276:	d02b      	beq.n	240572d0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
24057278:	687b      	ldr	r3, [r7, #4]
2405727a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405727c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
2405727e:	687b      	ldr	r3, [r7, #4]
24057280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24057282:	f003 031f 	and.w	r3, r3, #31
24057286:	223f      	movs	r2, #63	; 0x3f
24057288:	409a      	lsls	r2, r3
2405728a:	68bb      	ldr	r3, [r7, #8]
2405728c:	609a      	str	r2, [r3, #8]
2405728e:	e02a      	b.n	240572e6 <HAL_DMA_Abort+0x49a>
24057290:	40020010 	.word	0x40020010
24057294:	40020028 	.word	0x40020028
24057298:	40020040 	.word	0x40020040
2405729c:	40020058 	.word	0x40020058
240572a0:	40020070 	.word	0x40020070
240572a4:	40020088 	.word	0x40020088
240572a8:	400200a0 	.word	0x400200a0
240572ac:	400200b8 	.word	0x400200b8
240572b0:	40020410 	.word	0x40020410
240572b4:	40020428 	.word	0x40020428
240572b8:	40020440 	.word	0x40020440
240572bc:	40020458 	.word	0x40020458
240572c0:	40020470 	.word	0x40020470
240572c4:	40020488 	.word	0x40020488
240572c8:	400204a0 	.word	0x400204a0
240572cc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
240572d0:	687b      	ldr	r3, [r7, #4]
240572d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240572d4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
240572d6:	687b      	ldr	r3, [r7, #4]
240572d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240572da:	f003 031f 	and.w	r3, r3, #31
240572de:	2201      	movs	r2, #1
240572e0:	409a      	lsls	r2, r3
240572e2:	68fb      	ldr	r3, [r7, #12]
240572e4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240572e6:	687b      	ldr	r3, [r7, #4]
240572e8:	681b      	ldr	r3, [r3, #0]
240572ea:	4a4f      	ldr	r2, [pc, #316]	; (24057428 <HAL_DMA_Abort+0x5dc>)
240572ec:	4293      	cmp	r3, r2
240572ee:	d072      	beq.n	240573d6 <HAL_DMA_Abort+0x58a>
240572f0:	687b      	ldr	r3, [r7, #4]
240572f2:	681b      	ldr	r3, [r3, #0]
240572f4:	4a4d      	ldr	r2, [pc, #308]	; (2405742c <HAL_DMA_Abort+0x5e0>)
240572f6:	4293      	cmp	r3, r2
240572f8:	d06d      	beq.n	240573d6 <HAL_DMA_Abort+0x58a>
240572fa:	687b      	ldr	r3, [r7, #4]
240572fc:	681b      	ldr	r3, [r3, #0]
240572fe:	4a4c      	ldr	r2, [pc, #304]	; (24057430 <HAL_DMA_Abort+0x5e4>)
24057300:	4293      	cmp	r3, r2
24057302:	d068      	beq.n	240573d6 <HAL_DMA_Abort+0x58a>
24057304:	687b      	ldr	r3, [r7, #4]
24057306:	681b      	ldr	r3, [r3, #0]
24057308:	4a4a      	ldr	r2, [pc, #296]	; (24057434 <HAL_DMA_Abort+0x5e8>)
2405730a:	4293      	cmp	r3, r2
2405730c:	d063      	beq.n	240573d6 <HAL_DMA_Abort+0x58a>
2405730e:	687b      	ldr	r3, [r7, #4]
24057310:	681b      	ldr	r3, [r3, #0]
24057312:	4a49      	ldr	r2, [pc, #292]	; (24057438 <HAL_DMA_Abort+0x5ec>)
24057314:	4293      	cmp	r3, r2
24057316:	d05e      	beq.n	240573d6 <HAL_DMA_Abort+0x58a>
24057318:	687b      	ldr	r3, [r7, #4]
2405731a:	681b      	ldr	r3, [r3, #0]
2405731c:	4a47      	ldr	r2, [pc, #284]	; (2405743c <HAL_DMA_Abort+0x5f0>)
2405731e:	4293      	cmp	r3, r2
24057320:	d059      	beq.n	240573d6 <HAL_DMA_Abort+0x58a>
24057322:	687b      	ldr	r3, [r7, #4]
24057324:	681b      	ldr	r3, [r3, #0]
24057326:	4a46      	ldr	r2, [pc, #280]	; (24057440 <HAL_DMA_Abort+0x5f4>)
24057328:	4293      	cmp	r3, r2
2405732a:	d054      	beq.n	240573d6 <HAL_DMA_Abort+0x58a>
2405732c:	687b      	ldr	r3, [r7, #4]
2405732e:	681b      	ldr	r3, [r3, #0]
24057330:	4a44      	ldr	r2, [pc, #272]	; (24057444 <HAL_DMA_Abort+0x5f8>)
24057332:	4293      	cmp	r3, r2
24057334:	d04f      	beq.n	240573d6 <HAL_DMA_Abort+0x58a>
24057336:	687b      	ldr	r3, [r7, #4]
24057338:	681b      	ldr	r3, [r3, #0]
2405733a:	4a43      	ldr	r2, [pc, #268]	; (24057448 <HAL_DMA_Abort+0x5fc>)
2405733c:	4293      	cmp	r3, r2
2405733e:	d04a      	beq.n	240573d6 <HAL_DMA_Abort+0x58a>
24057340:	687b      	ldr	r3, [r7, #4]
24057342:	681b      	ldr	r3, [r3, #0]
24057344:	4a41      	ldr	r2, [pc, #260]	; (2405744c <HAL_DMA_Abort+0x600>)
24057346:	4293      	cmp	r3, r2
24057348:	d045      	beq.n	240573d6 <HAL_DMA_Abort+0x58a>
2405734a:	687b      	ldr	r3, [r7, #4]
2405734c:	681b      	ldr	r3, [r3, #0]
2405734e:	4a40      	ldr	r2, [pc, #256]	; (24057450 <HAL_DMA_Abort+0x604>)
24057350:	4293      	cmp	r3, r2
24057352:	d040      	beq.n	240573d6 <HAL_DMA_Abort+0x58a>
24057354:	687b      	ldr	r3, [r7, #4]
24057356:	681b      	ldr	r3, [r3, #0]
24057358:	4a3e      	ldr	r2, [pc, #248]	; (24057454 <HAL_DMA_Abort+0x608>)
2405735a:	4293      	cmp	r3, r2
2405735c:	d03b      	beq.n	240573d6 <HAL_DMA_Abort+0x58a>
2405735e:	687b      	ldr	r3, [r7, #4]
24057360:	681b      	ldr	r3, [r3, #0]
24057362:	4a3d      	ldr	r2, [pc, #244]	; (24057458 <HAL_DMA_Abort+0x60c>)
24057364:	4293      	cmp	r3, r2
24057366:	d036      	beq.n	240573d6 <HAL_DMA_Abort+0x58a>
24057368:	687b      	ldr	r3, [r7, #4]
2405736a:	681b      	ldr	r3, [r3, #0]
2405736c:	4a3b      	ldr	r2, [pc, #236]	; (2405745c <HAL_DMA_Abort+0x610>)
2405736e:	4293      	cmp	r3, r2
24057370:	d031      	beq.n	240573d6 <HAL_DMA_Abort+0x58a>
24057372:	687b      	ldr	r3, [r7, #4]
24057374:	681b      	ldr	r3, [r3, #0]
24057376:	4a3a      	ldr	r2, [pc, #232]	; (24057460 <HAL_DMA_Abort+0x614>)
24057378:	4293      	cmp	r3, r2
2405737a:	d02c      	beq.n	240573d6 <HAL_DMA_Abort+0x58a>
2405737c:	687b      	ldr	r3, [r7, #4]
2405737e:	681b      	ldr	r3, [r3, #0]
24057380:	4a38      	ldr	r2, [pc, #224]	; (24057464 <HAL_DMA_Abort+0x618>)
24057382:	4293      	cmp	r3, r2
24057384:	d027      	beq.n	240573d6 <HAL_DMA_Abort+0x58a>
24057386:	687b      	ldr	r3, [r7, #4]
24057388:	681b      	ldr	r3, [r3, #0]
2405738a:	4a37      	ldr	r2, [pc, #220]	; (24057468 <HAL_DMA_Abort+0x61c>)
2405738c:	4293      	cmp	r3, r2
2405738e:	d022      	beq.n	240573d6 <HAL_DMA_Abort+0x58a>
24057390:	687b      	ldr	r3, [r7, #4]
24057392:	681b      	ldr	r3, [r3, #0]
24057394:	4a35      	ldr	r2, [pc, #212]	; (2405746c <HAL_DMA_Abort+0x620>)
24057396:	4293      	cmp	r3, r2
24057398:	d01d      	beq.n	240573d6 <HAL_DMA_Abort+0x58a>
2405739a:	687b      	ldr	r3, [r7, #4]
2405739c:	681b      	ldr	r3, [r3, #0]
2405739e:	4a34      	ldr	r2, [pc, #208]	; (24057470 <HAL_DMA_Abort+0x624>)
240573a0:	4293      	cmp	r3, r2
240573a2:	d018      	beq.n	240573d6 <HAL_DMA_Abort+0x58a>
240573a4:	687b      	ldr	r3, [r7, #4]
240573a6:	681b      	ldr	r3, [r3, #0]
240573a8:	4a32      	ldr	r2, [pc, #200]	; (24057474 <HAL_DMA_Abort+0x628>)
240573aa:	4293      	cmp	r3, r2
240573ac:	d013      	beq.n	240573d6 <HAL_DMA_Abort+0x58a>
240573ae:	687b      	ldr	r3, [r7, #4]
240573b0:	681b      	ldr	r3, [r3, #0]
240573b2:	4a31      	ldr	r2, [pc, #196]	; (24057478 <HAL_DMA_Abort+0x62c>)
240573b4:	4293      	cmp	r3, r2
240573b6:	d00e      	beq.n	240573d6 <HAL_DMA_Abort+0x58a>
240573b8:	687b      	ldr	r3, [r7, #4]
240573ba:	681b      	ldr	r3, [r3, #0]
240573bc:	4a2f      	ldr	r2, [pc, #188]	; (2405747c <HAL_DMA_Abort+0x630>)
240573be:	4293      	cmp	r3, r2
240573c0:	d009      	beq.n	240573d6 <HAL_DMA_Abort+0x58a>
240573c2:	687b      	ldr	r3, [r7, #4]
240573c4:	681b      	ldr	r3, [r3, #0]
240573c6:	4a2e      	ldr	r2, [pc, #184]	; (24057480 <HAL_DMA_Abort+0x634>)
240573c8:	4293      	cmp	r3, r2
240573ca:	d004      	beq.n	240573d6 <HAL_DMA_Abort+0x58a>
240573cc:	687b      	ldr	r3, [r7, #4]
240573ce:	681b      	ldr	r3, [r3, #0]
240573d0:	4a2c      	ldr	r2, [pc, #176]	; (24057484 <HAL_DMA_Abort+0x638>)
240573d2:	4293      	cmp	r3, r2
240573d4:	d101      	bne.n	240573da <HAL_DMA_Abort+0x58e>
240573d6:	2301      	movs	r3, #1
240573d8:	e000      	b.n	240573dc <HAL_DMA_Abort+0x590>
240573da:	2300      	movs	r3, #0
240573dc:	2b00      	cmp	r3, #0
240573de:	d015      	beq.n	2405740c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
240573e0:	687b      	ldr	r3, [r7, #4]
240573e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
240573e4:	687a      	ldr	r2, [r7, #4]
240573e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
240573e8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
240573ea:	687b      	ldr	r3, [r7, #4]
240573ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240573ee:	2b00      	cmp	r3, #0
240573f0:	d00c      	beq.n	2405740c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
240573f2:	687b      	ldr	r3, [r7, #4]
240573f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240573f6:	681a      	ldr	r2, [r3, #0]
240573f8:	687b      	ldr	r3, [r7, #4]
240573fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240573fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
24057400:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24057402:	687b      	ldr	r3, [r7, #4]
24057404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24057406:	687a      	ldr	r2, [r7, #4]
24057408:	6f52      	ldr	r2, [r2, #116]	; 0x74
2405740a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
2405740c:	687b      	ldr	r3, [r7, #4]
2405740e:	2201      	movs	r2, #1
24057410:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
24057414:	687b      	ldr	r3, [r7, #4]
24057416:	2200      	movs	r2, #0
24057418:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
2405741c:	2300      	movs	r3, #0
}
2405741e:	4618      	mov	r0, r3
24057420:	3718      	adds	r7, #24
24057422:	46bd      	mov	sp, r7
24057424:	bd80      	pop	{r7, pc}
24057426:	bf00      	nop
24057428:	40020010 	.word	0x40020010
2405742c:	40020028 	.word	0x40020028
24057430:	40020040 	.word	0x40020040
24057434:	40020058 	.word	0x40020058
24057438:	40020070 	.word	0x40020070
2405743c:	40020088 	.word	0x40020088
24057440:	400200a0 	.word	0x400200a0
24057444:	400200b8 	.word	0x400200b8
24057448:	40020410 	.word	0x40020410
2405744c:	40020428 	.word	0x40020428
24057450:	40020440 	.word	0x40020440
24057454:	40020458 	.word	0x40020458
24057458:	40020470 	.word	0x40020470
2405745c:	40020488 	.word	0x40020488
24057460:	400204a0 	.word	0x400204a0
24057464:	400204b8 	.word	0x400204b8
24057468:	58025408 	.word	0x58025408
2405746c:	5802541c 	.word	0x5802541c
24057470:	58025430 	.word	0x58025430
24057474:	58025444 	.word	0x58025444
24057478:	58025458 	.word	0x58025458
2405747c:	5802546c 	.word	0x5802546c
24057480:	58025480 	.word	0x58025480
24057484:	58025494 	.word	0x58025494

24057488 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
24057488:	b580      	push	{r7, lr}
2405748a:	b084      	sub	sp, #16
2405748c:	af00      	add	r7, sp, #0
2405748e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
24057490:	687b      	ldr	r3, [r7, #4]
24057492:	2b00      	cmp	r3, #0
24057494:	d101      	bne.n	2405749a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
24057496:	2301      	movs	r3, #1
24057498:	e237      	b.n	2405790a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
2405749a:	687b      	ldr	r3, [r7, #4]
2405749c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
240574a0:	b2db      	uxtb	r3, r3
240574a2:	2b02      	cmp	r3, #2
240574a4:	d004      	beq.n	240574b0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
240574a6:	687b      	ldr	r3, [r7, #4]
240574a8:	2280      	movs	r2, #128	; 0x80
240574aa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
240574ac:	2301      	movs	r3, #1
240574ae:	e22c      	b.n	2405790a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
240574b0:	687b      	ldr	r3, [r7, #4]
240574b2:	681b      	ldr	r3, [r3, #0]
240574b4:	4a5c      	ldr	r2, [pc, #368]	; (24057628 <HAL_DMA_Abort_IT+0x1a0>)
240574b6:	4293      	cmp	r3, r2
240574b8:	d04a      	beq.n	24057550 <HAL_DMA_Abort_IT+0xc8>
240574ba:	687b      	ldr	r3, [r7, #4]
240574bc:	681b      	ldr	r3, [r3, #0]
240574be:	4a5b      	ldr	r2, [pc, #364]	; (2405762c <HAL_DMA_Abort_IT+0x1a4>)
240574c0:	4293      	cmp	r3, r2
240574c2:	d045      	beq.n	24057550 <HAL_DMA_Abort_IT+0xc8>
240574c4:	687b      	ldr	r3, [r7, #4]
240574c6:	681b      	ldr	r3, [r3, #0]
240574c8:	4a59      	ldr	r2, [pc, #356]	; (24057630 <HAL_DMA_Abort_IT+0x1a8>)
240574ca:	4293      	cmp	r3, r2
240574cc:	d040      	beq.n	24057550 <HAL_DMA_Abort_IT+0xc8>
240574ce:	687b      	ldr	r3, [r7, #4]
240574d0:	681b      	ldr	r3, [r3, #0]
240574d2:	4a58      	ldr	r2, [pc, #352]	; (24057634 <HAL_DMA_Abort_IT+0x1ac>)
240574d4:	4293      	cmp	r3, r2
240574d6:	d03b      	beq.n	24057550 <HAL_DMA_Abort_IT+0xc8>
240574d8:	687b      	ldr	r3, [r7, #4]
240574da:	681b      	ldr	r3, [r3, #0]
240574dc:	4a56      	ldr	r2, [pc, #344]	; (24057638 <HAL_DMA_Abort_IT+0x1b0>)
240574de:	4293      	cmp	r3, r2
240574e0:	d036      	beq.n	24057550 <HAL_DMA_Abort_IT+0xc8>
240574e2:	687b      	ldr	r3, [r7, #4]
240574e4:	681b      	ldr	r3, [r3, #0]
240574e6:	4a55      	ldr	r2, [pc, #340]	; (2405763c <HAL_DMA_Abort_IT+0x1b4>)
240574e8:	4293      	cmp	r3, r2
240574ea:	d031      	beq.n	24057550 <HAL_DMA_Abort_IT+0xc8>
240574ec:	687b      	ldr	r3, [r7, #4]
240574ee:	681b      	ldr	r3, [r3, #0]
240574f0:	4a53      	ldr	r2, [pc, #332]	; (24057640 <HAL_DMA_Abort_IT+0x1b8>)
240574f2:	4293      	cmp	r3, r2
240574f4:	d02c      	beq.n	24057550 <HAL_DMA_Abort_IT+0xc8>
240574f6:	687b      	ldr	r3, [r7, #4]
240574f8:	681b      	ldr	r3, [r3, #0]
240574fa:	4a52      	ldr	r2, [pc, #328]	; (24057644 <HAL_DMA_Abort_IT+0x1bc>)
240574fc:	4293      	cmp	r3, r2
240574fe:	d027      	beq.n	24057550 <HAL_DMA_Abort_IT+0xc8>
24057500:	687b      	ldr	r3, [r7, #4]
24057502:	681b      	ldr	r3, [r3, #0]
24057504:	4a50      	ldr	r2, [pc, #320]	; (24057648 <HAL_DMA_Abort_IT+0x1c0>)
24057506:	4293      	cmp	r3, r2
24057508:	d022      	beq.n	24057550 <HAL_DMA_Abort_IT+0xc8>
2405750a:	687b      	ldr	r3, [r7, #4]
2405750c:	681b      	ldr	r3, [r3, #0]
2405750e:	4a4f      	ldr	r2, [pc, #316]	; (2405764c <HAL_DMA_Abort_IT+0x1c4>)
24057510:	4293      	cmp	r3, r2
24057512:	d01d      	beq.n	24057550 <HAL_DMA_Abort_IT+0xc8>
24057514:	687b      	ldr	r3, [r7, #4]
24057516:	681b      	ldr	r3, [r3, #0]
24057518:	4a4d      	ldr	r2, [pc, #308]	; (24057650 <HAL_DMA_Abort_IT+0x1c8>)
2405751a:	4293      	cmp	r3, r2
2405751c:	d018      	beq.n	24057550 <HAL_DMA_Abort_IT+0xc8>
2405751e:	687b      	ldr	r3, [r7, #4]
24057520:	681b      	ldr	r3, [r3, #0]
24057522:	4a4c      	ldr	r2, [pc, #304]	; (24057654 <HAL_DMA_Abort_IT+0x1cc>)
24057524:	4293      	cmp	r3, r2
24057526:	d013      	beq.n	24057550 <HAL_DMA_Abort_IT+0xc8>
24057528:	687b      	ldr	r3, [r7, #4]
2405752a:	681b      	ldr	r3, [r3, #0]
2405752c:	4a4a      	ldr	r2, [pc, #296]	; (24057658 <HAL_DMA_Abort_IT+0x1d0>)
2405752e:	4293      	cmp	r3, r2
24057530:	d00e      	beq.n	24057550 <HAL_DMA_Abort_IT+0xc8>
24057532:	687b      	ldr	r3, [r7, #4]
24057534:	681b      	ldr	r3, [r3, #0]
24057536:	4a49      	ldr	r2, [pc, #292]	; (2405765c <HAL_DMA_Abort_IT+0x1d4>)
24057538:	4293      	cmp	r3, r2
2405753a:	d009      	beq.n	24057550 <HAL_DMA_Abort_IT+0xc8>
2405753c:	687b      	ldr	r3, [r7, #4]
2405753e:	681b      	ldr	r3, [r3, #0]
24057540:	4a47      	ldr	r2, [pc, #284]	; (24057660 <HAL_DMA_Abort_IT+0x1d8>)
24057542:	4293      	cmp	r3, r2
24057544:	d004      	beq.n	24057550 <HAL_DMA_Abort_IT+0xc8>
24057546:	687b      	ldr	r3, [r7, #4]
24057548:	681b      	ldr	r3, [r3, #0]
2405754a:	4a46      	ldr	r2, [pc, #280]	; (24057664 <HAL_DMA_Abort_IT+0x1dc>)
2405754c:	4293      	cmp	r3, r2
2405754e:	d101      	bne.n	24057554 <HAL_DMA_Abort_IT+0xcc>
24057550:	2301      	movs	r3, #1
24057552:	e000      	b.n	24057556 <HAL_DMA_Abort_IT+0xce>
24057554:	2300      	movs	r3, #0
24057556:	2b00      	cmp	r3, #0
24057558:	f000 8086 	beq.w	24057668 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
2405755c:	687b      	ldr	r3, [r7, #4]
2405755e:	2204      	movs	r2, #4
24057560:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
24057564:	687b      	ldr	r3, [r7, #4]
24057566:	681b      	ldr	r3, [r3, #0]
24057568:	4a2f      	ldr	r2, [pc, #188]	; (24057628 <HAL_DMA_Abort_IT+0x1a0>)
2405756a:	4293      	cmp	r3, r2
2405756c:	d04a      	beq.n	24057604 <HAL_DMA_Abort_IT+0x17c>
2405756e:	687b      	ldr	r3, [r7, #4]
24057570:	681b      	ldr	r3, [r3, #0]
24057572:	4a2e      	ldr	r2, [pc, #184]	; (2405762c <HAL_DMA_Abort_IT+0x1a4>)
24057574:	4293      	cmp	r3, r2
24057576:	d045      	beq.n	24057604 <HAL_DMA_Abort_IT+0x17c>
24057578:	687b      	ldr	r3, [r7, #4]
2405757a:	681b      	ldr	r3, [r3, #0]
2405757c:	4a2c      	ldr	r2, [pc, #176]	; (24057630 <HAL_DMA_Abort_IT+0x1a8>)
2405757e:	4293      	cmp	r3, r2
24057580:	d040      	beq.n	24057604 <HAL_DMA_Abort_IT+0x17c>
24057582:	687b      	ldr	r3, [r7, #4]
24057584:	681b      	ldr	r3, [r3, #0]
24057586:	4a2b      	ldr	r2, [pc, #172]	; (24057634 <HAL_DMA_Abort_IT+0x1ac>)
24057588:	4293      	cmp	r3, r2
2405758a:	d03b      	beq.n	24057604 <HAL_DMA_Abort_IT+0x17c>
2405758c:	687b      	ldr	r3, [r7, #4]
2405758e:	681b      	ldr	r3, [r3, #0]
24057590:	4a29      	ldr	r2, [pc, #164]	; (24057638 <HAL_DMA_Abort_IT+0x1b0>)
24057592:	4293      	cmp	r3, r2
24057594:	d036      	beq.n	24057604 <HAL_DMA_Abort_IT+0x17c>
24057596:	687b      	ldr	r3, [r7, #4]
24057598:	681b      	ldr	r3, [r3, #0]
2405759a:	4a28      	ldr	r2, [pc, #160]	; (2405763c <HAL_DMA_Abort_IT+0x1b4>)
2405759c:	4293      	cmp	r3, r2
2405759e:	d031      	beq.n	24057604 <HAL_DMA_Abort_IT+0x17c>
240575a0:	687b      	ldr	r3, [r7, #4]
240575a2:	681b      	ldr	r3, [r3, #0]
240575a4:	4a26      	ldr	r2, [pc, #152]	; (24057640 <HAL_DMA_Abort_IT+0x1b8>)
240575a6:	4293      	cmp	r3, r2
240575a8:	d02c      	beq.n	24057604 <HAL_DMA_Abort_IT+0x17c>
240575aa:	687b      	ldr	r3, [r7, #4]
240575ac:	681b      	ldr	r3, [r3, #0]
240575ae:	4a25      	ldr	r2, [pc, #148]	; (24057644 <HAL_DMA_Abort_IT+0x1bc>)
240575b0:	4293      	cmp	r3, r2
240575b2:	d027      	beq.n	24057604 <HAL_DMA_Abort_IT+0x17c>
240575b4:	687b      	ldr	r3, [r7, #4]
240575b6:	681b      	ldr	r3, [r3, #0]
240575b8:	4a23      	ldr	r2, [pc, #140]	; (24057648 <HAL_DMA_Abort_IT+0x1c0>)
240575ba:	4293      	cmp	r3, r2
240575bc:	d022      	beq.n	24057604 <HAL_DMA_Abort_IT+0x17c>
240575be:	687b      	ldr	r3, [r7, #4]
240575c0:	681b      	ldr	r3, [r3, #0]
240575c2:	4a22      	ldr	r2, [pc, #136]	; (2405764c <HAL_DMA_Abort_IT+0x1c4>)
240575c4:	4293      	cmp	r3, r2
240575c6:	d01d      	beq.n	24057604 <HAL_DMA_Abort_IT+0x17c>
240575c8:	687b      	ldr	r3, [r7, #4]
240575ca:	681b      	ldr	r3, [r3, #0]
240575cc:	4a20      	ldr	r2, [pc, #128]	; (24057650 <HAL_DMA_Abort_IT+0x1c8>)
240575ce:	4293      	cmp	r3, r2
240575d0:	d018      	beq.n	24057604 <HAL_DMA_Abort_IT+0x17c>
240575d2:	687b      	ldr	r3, [r7, #4]
240575d4:	681b      	ldr	r3, [r3, #0]
240575d6:	4a1f      	ldr	r2, [pc, #124]	; (24057654 <HAL_DMA_Abort_IT+0x1cc>)
240575d8:	4293      	cmp	r3, r2
240575da:	d013      	beq.n	24057604 <HAL_DMA_Abort_IT+0x17c>
240575dc:	687b      	ldr	r3, [r7, #4]
240575de:	681b      	ldr	r3, [r3, #0]
240575e0:	4a1d      	ldr	r2, [pc, #116]	; (24057658 <HAL_DMA_Abort_IT+0x1d0>)
240575e2:	4293      	cmp	r3, r2
240575e4:	d00e      	beq.n	24057604 <HAL_DMA_Abort_IT+0x17c>
240575e6:	687b      	ldr	r3, [r7, #4]
240575e8:	681b      	ldr	r3, [r3, #0]
240575ea:	4a1c      	ldr	r2, [pc, #112]	; (2405765c <HAL_DMA_Abort_IT+0x1d4>)
240575ec:	4293      	cmp	r3, r2
240575ee:	d009      	beq.n	24057604 <HAL_DMA_Abort_IT+0x17c>
240575f0:	687b      	ldr	r3, [r7, #4]
240575f2:	681b      	ldr	r3, [r3, #0]
240575f4:	4a1a      	ldr	r2, [pc, #104]	; (24057660 <HAL_DMA_Abort_IT+0x1d8>)
240575f6:	4293      	cmp	r3, r2
240575f8:	d004      	beq.n	24057604 <HAL_DMA_Abort_IT+0x17c>
240575fa:	687b      	ldr	r3, [r7, #4]
240575fc:	681b      	ldr	r3, [r3, #0]
240575fe:	4a19      	ldr	r2, [pc, #100]	; (24057664 <HAL_DMA_Abort_IT+0x1dc>)
24057600:	4293      	cmp	r3, r2
24057602:	d108      	bne.n	24057616 <HAL_DMA_Abort_IT+0x18e>
24057604:	687b      	ldr	r3, [r7, #4]
24057606:	681b      	ldr	r3, [r3, #0]
24057608:	681a      	ldr	r2, [r3, #0]
2405760a:	687b      	ldr	r3, [r7, #4]
2405760c:	681b      	ldr	r3, [r3, #0]
2405760e:	f022 0201 	bic.w	r2, r2, #1
24057612:	601a      	str	r2, [r3, #0]
24057614:	e178      	b.n	24057908 <HAL_DMA_Abort_IT+0x480>
24057616:	687b      	ldr	r3, [r7, #4]
24057618:	681b      	ldr	r3, [r3, #0]
2405761a:	681a      	ldr	r2, [r3, #0]
2405761c:	687b      	ldr	r3, [r7, #4]
2405761e:	681b      	ldr	r3, [r3, #0]
24057620:	f022 0201 	bic.w	r2, r2, #1
24057624:	601a      	str	r2, [r3, #0]
24057626:	e16f      	b.n	24057908 <HAL_DMA_Abort_IT+0x480>
24057628:	40020010 	.word	0x40020010
2405762c:	40020028 	.word	0x40020028
24057630:	40020040 	.word	0x40020040
24057634:	40020058 	.word	0x40020058
24057638:	40020070 	.word	0x40020070
2405763c:	40020088 	.word	0x40020088
24057640:	400200a0 	.word	0x400200a0
24057644:	400200b8 	.word	0x400200b8
24057648:	40020410 	.word	0x40020410
2405764c:	40020428 	.word	0x40020428
24057650:	40020440 	.word	0x40020440
24057654:	40020458 	.word	0x40020458
24057658:	40020470 	.word	0x40020470
2405765c:	40020488 	.word	0x40020488
24057660:	400204a0 	.word	0x400204a0
24057664:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
24057668:	687b      	ldr	r3, [r7, #4]
2405766a:	681b      	ldr	r3, [r3, #0]
2405766c:	681a      	ldr	r2, [r3, #0]
2405766e:	687b      	ldr	r3, [r7, #4]
24057670:	681b      	ldr	r3, [r3, #0]
24057672:	f022 020e 	bic.w	r2, r2, #14
24057676:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
24057678:	687b      	ldr	r3, [r7, #4]
2405767a:	681b      	ldr	r3, [r3, #0]
2405767c:	4a6c      	ldr	r2, [pc, #432]	; (24057830 <HAL_DMA_Abort_IT+0x3a8>)
2405767e:	4293      	cmp	r3, r2
24057680:	d04a      	beq.n	24057718 <HAL_DMA_Abort_IT+0x290>
24057682:	687b      	ldr	r3, [r7, #4]
24057684:	681b      	ldr	r3, [r3, #0]
24057686:	4a6b      	ldr	r2, [pc, #428]	; (24057834 <HAL_DMA_Abort_IT+0x3ac>)
24057688:	4293      	cmp	r3, r2
2405768a:	d045      	beq.n	24057718 <HAL_DMA_Abort_IT+0x290>
2405768c:	687b      	ldr	r3, [r7, #4]
2405768e:	681b      	ldr	r3, [r3, #0]
24057690:	4a69      	ldr	r2, [pc, #420]	; (24057838 <HAL_DMA_Abort_IT+0x3b0>)
24057692:	4293      	cmp	r3, r2
24057694:	d040      	beq.n	24057718 <HAL_DMA_Abort_IT+0x290>
24057696:	687b      	ldr	r3, [r7, #4]
24057698:	681b      	ldr	r3, [r3, #0]
2405769a:	4a68      	ldr	r2, [pc, #416]	; (2405783c <HAL_DMA_Abort_IT+0x3b4>)
2405769c:	4293      	cmp	r3, r2
2405769e:	d03b      	beq.n	24057718 <HAL_DMA_Abort_IT+0x290>
240576a0:	687b      	ldr	r3, [r7, #4]
240576a2:	681b      	ldr	r3, [r3, #0]
240576a4:	4a66      	ldr	r2, [pc, #408]	; (24057840 <HAL_DMA_Abort_IT+0x3b8>)
240576a6:	4293      	cmp	r3, r2
240576a8:	d036      	beq.n	24057718 <HAL_DMA_Abort_IT+0x290>
240576aa:	687b      	ldr	r3, [r7, #4]
240576ac:	681b      	ldr	r3, [r3, #0]
240576ae:	4a65      	ldr	r2, [pc, #404]	; (24057844 <HAL_DMA_Abort_IT+0x3bc>)
240576b0:	4293      	cmp	r3, r2
240576b2:	d031      	beq.n	24057718 <HAL_DMA_Abort_IT+0x290>
240576b4:	687b      	ldr	r3, [r7, #4]
240576b6:	681b      	ldr	r3, [r3, #0]
240576b8:	4a63      	ldr	r2, [pc, #396]	; (24057848 <HAL_DMA_Abort_IT+0x3c0>)
240576ba:	4293      	cmp	r3, r2
240576bc:	d02c      	beq.n	24057718 <HAL_DMA_Abort_IT+0x290>
240576be:	687b      	ldr	r3, [r7, #4]
240576c0:	681b      	ldr	r3, [r3, #0]
240576c2:	4a62      	ldr	r2, [pc, #392]	; (2405784c <HAL_DMA_Abort_IT+0x3c4>)
240576c4:	4293      	cmp	r3, r2
240576c6:	d027      	beq.n	24057718 <HAL_DMA_Abort_IT+0x290>
240576c8:	687b      	ldr	r3, [r7, #4]
240576ca:	681b      	ldr	r3, [r3, #0]
240576cc:	4a60      	ldr	r2, [pc, #384]	; (24057850 <HAL_DMA_Abort_IT+0x3c8>)
240576ce:	4293      	cmp	r3, r2
240576d0:	d022      	beq.n	24057718 <HAL_DMA_Abort_IT+0x290>
240576d2:	687b      	ldr	r3, [r7, #4]
240576d4:	681b      	ldr	r3, [r3, #0]
240576d6:	4a5f      	ldr	r2, [pc, #380]	; (24057854 <HAL_DMA_Abort_IT+0x3cc>)
240576d8:	4293      	cmp	r3, r2
240576da:	d01d      	beq.n	24057718 <HAL_DMA_Abort_IT+0x290>
240576dc:	687b      	ldr	r3, [r7, #4]
240576de:	681b      	ldr	r3, [r3, #0]
240576e0:	4a5d      	ldr	r2, [pc, #372]	; (24057858 <HAL_DMA_Abort_IT+0x3d0>)
240576e2:	4293      	cmp	r3, r2
240576e4:	d018      	beq.n	24057718 <HAL_DMA_Abort_IT+0x290>
240576e6:	687b      	ldr	r3, [r7, #4]
240576e8:	681b      	ldr	r3, [r3, #0]
240576ea:	4a5c      	ldr	r2, [pc, #368]	; (2405785c <HAL_DMA_Abort_IT+0x3d4>)
240576ec:	4293      	cmp	r3, r2
240576ee:	d013      	beq.n	24057718 <HAL_DMA_Abort_IT+0x290>
240576f0:	687b      	ldr	r3, [r7, #4]
240576f2:	681b      	ldr	r3, [r3, #0]
240576f4:	4a5a      	ldr	r2, [pc, #360]	; (24057860 <HAL_DMA_Abort_IT+0x3d8>)
240576f6:	4293      	cmp	r3, r2
240576f8:	d00e      	beq.n	24057718 <HAL_DMA_Abort_IT+0x290>
240576fa:	687b      	ldr	r3, [r7, #4]
240576fc:	681b      	ldr	r3, [r3, #0]
240576fe:	4a59      	ldr	r2, [pc, #356]	; (24057864 <HAL_DMA_Abort_IT+0x3dc>)
24057700:	4293      	cmp	r3, r2
24057702:	d009      	beq.n	24057718 <HAL_DMA_Abort_IT+0x290>
24057704:	687b      	ldr	r3, [r7, #4]
24057706:	681b      	ldr	r3, [r3, #0]
24057708:	4a57      	ldr	r2, [pc, #348]	; (24057868 <HAL_DMA_Abort_IT+0x3e0>)
2405770a:	4293      	cmp	r3, r2
2405770c:	d004      	beq.n	24057718 <HAL_DMA_Abort_IT+0x290>
2405770e:	687b      	ldr	r3, [r7, #4]
24057710:	681b      	ldr	r3, [r3, #0]
24057712:	4a56      	ldr	r2, [pc, #344]	; (2405786c <HAL_DMA_Abort_IT+0x3e4>)
24057714:	4293      	cmp	r3, r2
24057716:	d108      	bne.n	2405772a <HAL_DMA_Abort_IT+0x2a2>
24057718:	687b      	ldr	r3, [r7, #4]
2405771a:	681b      	ldr	r3, [r3, #0]
2405771c:	681a      	ldr	r2, [r3, #0]
2405771e:	687b      	ldr	r3, [r7, #4]
24057720:	681b      	ldr	r3, [r3, #0]
24057722:	f022 0201 	bic.w	r2, r2, #1
24057726:	601a      	str	r2, [r3, #0]
24057728:	e007      	b.n	2405773a <HAL_DMA_Abort_IT+0x2b2>
2405772a:	687b      	ldr	r3, [r7, #4]
2405772c:	681b      	ldr	r3, [r3, #0]
2405772e:	681a      	ldr	r2, [r3, #0]
24057730:	687b      	ldr	r3, [r7, #4]
24057732:	681b      	ldr	r3, [r3, #0]
24057734:	f022 0201 	bic.w	r2, r2, #1
24057738:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
2405773a:	687b      	ldr	r3, [r7, #4]
2405773c:	681b      	ldr	r3, [r3, #0]
2405773e:	4a3c      	ldr	r2, [pc, #240]	; (24057830 <HAL_DMA_Abort_IT+0x3a8>)
24057740:	4293      	cmp	r3, r2
24057742:	d072      	beq.n	2405782a <HAL_DMA_Abort_IT+0x3a2>
24057744:	687b      	ldr	r3, [r7, #4]
24057746:	681b      	ldr	r3, [r3, #0]
24057748:	4a3a      	ldr	r2, [pc, #232]	; (24057834 <HAL_DMA_Abort_IT+0x3ac>)
2405774a:	4293      	cmp	r3, r2
2405774c:	d06d      	beq.n	2405782a <HAL_DMA_Abort_IT+0x3a2>
2405774e:	687b      	ldr	r3, [r7, #4]
24057750:	681b      	ldr	r3, [r3, #0]
24057752:	4a39      	ldr	r2, [pc, #228]	; (24057838 <HAL_DMA_Abort_IT+0x3b0>)
24057754:	4293      	cmp	r3, r2
24057756:	d068      	beq.n	2405782a <HAL_DMA_Abort_IT+0x3a2>
24057758:	687b      	ldr	r3, [r7, #4]
2405775a:	681b      	ldr	r3, [r3, #0]
2405775c:	4a37      	ldr	r2, [pc, #220]	; (2405783c <HAL_DMA_Abort_IT+0x3b4>)
2405775e:	4293      	cmp	r3, r2
24057760:	d063      	beq.n	2405782a <HAL_DMA_Abort_IT+0x3a2>
24057762:	687b      	ldr	r3, [r7, #4]
24057764:	681b      	ldr	r3, [r3, #0]
24057766:	4a36      	ldr	r2, [pc, #216]	; (24057840 <HAL_DMA_Abort_IT+0x3b8>)
24057768:	4293      	cmp	r3, r2
2405776a:	d05e      	beq.n	2405782a <HAL_DMA_Abort_IT+0x3a2>
2405776c:	687b      	ldr	r3, [r7, #4]
2405776e:	681b      	ldr	r3, [r3, #0]
24057770:	4a34      	ldr	r2, [pc, #208]	; (24057844 <HAL_DMA_Abort_IT+0x3bc>)
24057772:	4293      	cmp	r3, r2
24057774:	d059      	beq.n	2405782a <HAL_DMA_Abort_IT+0x3a2>
24057776:	687b      	ldr	r3, [r7, #4]
24057778:	681b      	ldr	r3, [r3, #0]
2405777a:	4a33      	ldr	r2, [pc, #204]	; (24057848 <HAL_DMA_Abort_IT+0x3c0>)
2405777c:	4293      	cmp	r3, r2
2405777e:	d054      	beq.n	2405782a <HAL_DMA_Abort_IT+0x3a2>
24057780:	687b      	ldr	r3, [r7, #4]
24057782:	681b      	ldr	r3, [r3, #0]
24057784:	4a31      	ldr	r2, [pc, #196]	; (2405784c <HAL_DMA_Abort_IT+0x3c4>)
24057786:	4293      	cmp	r3, r2
24057788:	d04f      	beq.n	2405782a <HAL_DMA_Abort_IT+0x3a2>
2405778a:	687b      	ldr	r3, [r7, #4]
2405778c:	681b      	ldr	r3, [r3, #0]
2405778e:	4a30      	ldr	r2, [pc, #192]	; (24057850 <HAL_DMA_Abort_IT+0x3c8>)
24057790:	4293      	cmp	r3, r2
24057792:	d04a      	beq.n	2405782a <HAL_DMA_Abort_IT+0x3a2>
24057794:	687b      	ldr	r3, [r7, #4]
24057796:	681b      	ldr	r3, [r3, #0]
24057798:	4a2e      	ldr	r2, [pc, #184]	; (24057854 <HAL_DMA_Abort_IT+0x3cc>)
2405779a:	4293      	cmp	r3, r2
2405779c:	d045      	beq.n	2405782a <HAL_DMA_Abort_IT+0x3a2>
2405779e:	687b      	ldr	r3, [r7, #4]
240577a0:	681b      	ldr	r3, [r3, #0]
240577a2:	4a2d      	ldr	r2, [pc, #180]	; (24057858 <HAL_DMA_Abort_IT+0x3d0>)
240577a4:	4293      	cmp	r3, r2
240577a6:	d040      	beq.n	2405782a <HAL_DMA_Abort_IT+0x3a2>
240577a8:	687b      	ldr	r3, [r7, #4]
240577aa:	681b      	ldr	r3, [r3, #0]
240577ac:	4a2b      	ldr	r2, [pc, #172]	; (2405785c <HAL_DMA_Abort_IT+0x3d4>)
240577ae:	4293      	cmp	r3, r2
240577b0:	d03b      	beq.n	2405782a <HAL_DMA_Abort_IT+0x3a2>
240577b2:	687b      	ldr	r3, [r7, #4]
240577b4:	681b      	ldr	r3, [r3, #0]
240577b6:	4a2a      	ldr	r2, [pc, #168]	; (24057860 <HAL_DMA_Abort_IT+0x3d8>)
240577b8:	4293      	cmp	r3, r2
240577ba:	d036      	beq.n	2405782a <HAL_DMA_Abort_IT+0x3a2>
240577bc:	687b      	ldr	r3, [r7, #4]
240577be:	681b      	ldr	r3, [r3, #0]
240577c0:	4a28      	ldr	r2, [pc, #160]	; (24057864 <HAL_DMA_Abort_IT+0x3dc>)
240577c2:	4293      	cmp	r3, r2
240577c4:	d031      	beq.n	2405782a <HAL_DMA_Abort_IT+0x3a2>
240577c6:	687b      	ldr	r3, [r7, #4]
240577c8:	681b      	ldr	r3, [r3, #0]
240577ca:	4a27      	ldr	r2, [pc, #156]	; (24057868 <HAL_DMA_Abort_IT+0x3e0>)
240577cc:	4293      	cmp	r3, r2
240577ce:	d02c      	beq.n	2405782a <HAL_DMA_Abort_IT+0x3a2>
240577d0:	687b      	ldr	r3, [r7, #4]
240577d2:	681b      	ldr	r3, [r3, #0]
240577d4:	4a25      	ldr	r2, [pc, #148]	; (2405786c <HAL_DMA_Abort_IT+0x3e4>)
240577d6:	4293      	cmp	r3, r2
240577d8:	d027      	beq.n	2405782a <HAL_DMA_Abort_IT+0x3a2>
240577da:	687b      	ldr	r3, [r7, #4]
240577dc:	681b      	ldr	r3, [r3, #0]
240577de:	4a24      	ldr	r2, [pc, #144]	; (24057870 <HAL_DMA_Abort_IT+0x3e8>)
240577e0:	4293      	cmp	r3, r2
240577e2:	d022      	beq.n	2405782a <HAL_DMA_Abort_IT+0x3a2>
240577e4:	687b      	ldr	r3, [r7, #4]
240577e6:	681b      	ldr	r3, [r3, #0]
240577e8:	4a22      	ldr	r2, [pc, #136]	; (24057874 <HAL_DMA_Abort_IT+0x3ec>)
240577ea:	4293      	cmp	r3, r2
240577ec:	d01d      	beq.n	2405782a <HAL_DMA_Abort_IT+0x3a2>
240577ee:	687b      	ldr	r3, [r7, #4]
240577f0:	681b      	ldr	r3, [r3, #0]
240577f2:	4a21      	ldr	r2, [pc, #132]	; (24057878 <HAL_DMA_Abort_IT+0x3f0>)
240577f4:	4293      	cmp	r3, r2
240577f6:	d018      	beq.n	2405782a <HAL_DMA_Abort_IT+0x3a2>
240577f8:	687b      	ldr	r3, [r7, #4]
240577fa:	681b      	ldr	r3, [r3, #0]
240577fc:	4a1f      	ldr	r2, [pc, #124]	; (2405787c <HAL_DMA_Abort_IT+0x3f4>)
240577fe:	4293      	cmp	r3, r2
24057800:	d013      	beq.n	2405782a <HAL_DMA_Abort_IT+0x3a2>
24057802:	687b      	ldr	r3, [r7, #4]
24057804:	681b      	ldr	r3, [r3, #0]
24057806:	4a1e      	ldr	r2, [pc, #120]	; (24057880 <HAL_DMA_Abort_IT+0x3f8>)
24057808:	4293      	cmp	r3, r2
2405780a:	d00e      	beq.n	2405782a <HAL_DMA_Abort_IT+0x3a2>
2405780c:	687b      	ldr	r3, [r7, #4]
2405780e:	681b      	ldr	r3, [r3, #0]
24057810:	4a1c      	ldr	r2, [pc, #112]	; (24057884 <HAL_DMA_Abort_IT+0x3fc>)
24057812:	4293      	cmp	r3, r2
24057814:	d009      	beq.n	2405782a <HAL_DMA_Abort_IT+0x3a2>
24057816:	687b      	ldr	r3, [r7, #4]
24057818:	681b      	ldr	r3, [r3, #0]
2405781a:	4a1b      	ldr	r2, [pc, #108]	; (24057888 <HAL_DMA_Abort_IT+0x400>)
2405781c:	4293      	cmp	r3, r2
2405781e:	d004      	beq.n	2405782a <HAL_DMA_Abort_IT+0x3a2>
24057820:	687b      	ldr	r3, [r7, #4]
24057822:	681b      	ldr	r3, [r3, #0]
24057824:	4a19      	ldr	r2, [pc, #100]	; (2405788c <HAL_DMA_Abort_IT+0x404>)
24057826:	4293      	cmp	r3, r2
24057828:	d132      	bne.n	24057890 <HAL_DMA_Abort_IT+0x408>
2405782a:	2301      	movs	r3, #1
2405782c:	e031      	b.n	24057892 <HAL_DMA_Abort_IT+0x40a>
2405782e:	bf00      	nop
24057830:	40020010 	.word	0x40020010
24057834:	40020028 	.word	0x40020028
24057838:	40020040 	.word	0x40020040
2405783c:	40020058 	.word	0x40020058
24057840:	40020070 	.word	0x40020070
24057844:	40020088 	.word	0x40020088
24057848:	400200a0 	.word	0x400200a0
2405784c:	400200b8 	.word	0x400200b8
24057850:	40020410 	.word	0x40020410
24057854:	40020428 	.word	0x40020428
24057858:	40020440 	.word	0x40020440
2405785c:	40020458 	.word	0x40020458
24057860:	40020470 	.word	0x40020470
24057864:	40020488 	.word	0x40020488
24057868:	400204a0 	.word	0x400204a0
2405786c:	400204b8 	.word	0x400204b8
24057870:	58025408 	.word	0x58025408
24057874:	5802541c 	.word	0x5802541c
24057878:	58025430 	.word	0x58025430
2405787c:	58025444 	.word	0x58025444
24057880:	58025458 	.word	0x58025458
24057884:	5802546c 	.word	0x5802546c
24057888:	58025480 	.word	0x58025480
2405788c:	58025494 	.word	0x58025494
24057890:	2300      	movs	r3, #0
24057892:	2b00      	cmp	r3, #0
24057894:	d028      	beq.n	240578e8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
24057896:	687b      	ldr	r3, [r7, #4]
24057898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2405789a:	681a      	ldr	r2, [r3, #0]
2405789c:	687b      	ldr	r3, [r7, #4]
2405789e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
240578a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
240578a4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
240578a6:	687b      	ldr	r3, [r7, #4]
240578a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240578aa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
240578ac:	687b      	ldr	r3, [r7, #4]
240578ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240578b0:	f003 031f 	and.w	r3, r3, #31
240578b4:	2201      	movs	r2, #1
240578b6:	409a      	lsls	r2, r3
240578b8:	68fb      	ldr	r3, [r7, #12]
240578ba:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
240578bc:	687b      	ldr	r3, [r7, #4]
240578be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
240578c0:	687a      	ldr	r2, [r7, #4]
240578c2:	6e92      	ldr	r2, [r2, #104]	; 0x68
240578c4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
240578c6:	687b      	ldr	r3, [r7, #4]
240578c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240578ca:	2b00      	cmp	r3, #0
240578cc:	d00c      	beq.n	240578e8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
240578ce:	687b      	ldr	r3, [r7, #4]
240578d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240578d2:	681a      	ldr	r2, [r3, #0]
240578d4:	687b      	ldr	r3, [r7, #4]
240578d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240578d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
240578dc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
240578de:	687b      	ldr	r3, [r7, #4]
240578e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
240578e2:	687a      	ldr	r2, [r7, #4]
240578e4:	6f52      	ldr	r2, [r2, #116]	; 0x74
240578e6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
240578e8:	687b      	ldr	r3, [r7, #4]
240578ea:	2201      	movs	r2, #1
240578ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
240578f0:	687b      	ldr	r3, [r7, #4]
240578f2:	2200      	movs	r2, #0
240578f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
240578f8:	687b      	ldr	r3, [r7, #4]
240578fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
240578fc:	2b00      	cmp	r3, #0
240578fe:	d003      	beq.n	24057908 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
24057900:	687b      	ldr	r3, [r7, #4]
24057902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24057904:	6878      	ldr	r0, [r7, #4]
24057906:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
24057908:	2300      	movs	r3, #0
}
2405790a:	4618      	mov	r0, r3
2405790c:	3710      	adds	r7, #16
2405790e:	46bd      	mov	sp, r7
24057910:	bd80      	pop	{r7, pc}
24057912:	bf00      	nop

24057914 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
24057914:	b580      	push	{r7, lr}
24057916:	b08a      	sub	sp, #40	; 0x28
24057918:	af00      	add	r7, sp, #0
2405791a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
2405791c:	2300      	movs	r3, #0
2405791e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
24057920:	4b67      	ldr	r3, [pc, #412]	; (24057ac0 <HAL_DMA_IRQHandler+0x1ac>)
24057922:	681b      	ldr	r3, [r3, #0]
24057924:	4a67      	ldr	r2, [pc, #412]	; (24057ac4 <HAL_DMA_IRQHandler+0x1b0>)
24057926:	fba2 2303 	umull	r2, r3, r2, r3
2405792a:	0a9b      	lsrs	r3, r3, #10
2405792c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
2405792e:	687b      	ldr	r3, [r7, #4]
24057930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24057932:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
24057934:	687b      	ldr	r3, [r7, #4]
24057936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24057938:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
2405793a:	6a3b      	ldr	r3, [r7, #32]
2405793c:	681b      	ldr	r3, [r3, #0]
2405793e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
24057940:	69fb      	ldr	r3, [r7, #28]
24057942:	681b      	ldr	r3, [r3, #0]
24057944:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
24057946:	687b      	ldr	r3, [r7, #4]
24057948:	681b      	ldr	r3, [r3, #0]
2405794a:	4a5f      	ldr	r2, [pc, #380]	; (24057ac8 <HAL_DMA_IRQHandler+0x1b4>)
2405794c:	4293      	cmp	r3, r2
2405794e:	d04a      	beq.n	240579e6 <HAL_DMA_IRQHandler+0xd2>
24057950:	687b      	ldr	r3, [r7, #4]
24057952:	681b      	ldr	r3, [r3, #0]
24057954:	4a5d      	ldr	r2, [pc, #372]	; (24057acc <HAL_DMA_IRQHandler+0x1b8>)
24057956:	4293      	cmp	r3, r2
24057958:	d045      	beq.n	240579e6 <HAL_DMA_IRQHandler+0xd2>
2405795a:	687b      	ldr	r3, [r7, #4]
2405795c:	681b      	ldr	r3, [r3, #0]
2405795e:	4a5c      	ldr	r2, [pc, #368]	; (24057ad0 <HAL_DMA_IRQHandler+0x1bc>)
24057960:	4293      	cmp	r3, r2
24057962:	d040      	beq.n	240579e6 <HAL_DMA_IRQHandler+0xd2>
24057964:	687b      	ldr	r3, [r7, #4]
24057966:	681b      	ldr	r3, [r3, #0]
24057968:	4a5a      	ldr	r2, [pc, #360]	; (24057ad4 <HAL_DMA_IRQHandler+0x1c0>)
2405796a:	4293      	cmp	r3, r2
2405796c:	d03b      	beq.n	240579e6 <HAL_DMA_IRQHandler+0xd2>
2405796e:	687b      	ldr	r3, [r7, #4]
24057970:	681b      	ldr	r3, [r3, #0]
24057972:	4a59      	ldr	r2, [pc, #356]	; (24057ad8 <HAL_DMA_IRQHandler+0x1c4>)
24057974:	4293      	cmp	r3, r2
24057976:	d036      	beq.n	240579e6 <HAL_DMA_IRQHandler+0xd2>
24057978:	687b      	ldr	r3, [r7, #4]
2405797a:	681b      	ldr	r3, [r3, #0]
2405797c:	4a57      	ldr	r2, [pc, #348]	; (24057adc <HAL_DMA_IRQHandler+0x1c8>)
2405797e:	4293      	cmp	r3, r2
24057980:	d031      	beq.n	240579e6 <HAL_DMA_IRQHandler+0xd2>
24057982:	687b      	ldr	r3, [r7, #4]
24057984:	681b      	ldr	r3, [r3, #0]
24057986:	4a56      	ldr	r2, [pc, #344]	; (24057ae0 <HAL_DMA_IRQHandler+0x1cc>)
24057988:	4293      	cmp	r3, r2
2405798a:	d02c      	beq.n	240579e6 <HAL_DMA_IRQHandler+0xd2>
2405798c:	687b      	ldr	r3, [r7, #4]
2405798e:	681b      	ldr	r3, [r3, #0]
24057990:	4a54      	ldr	r2, [pc, #336]	; (24057ae4 <HAL_DMA_IRQHandler+0x1d0>)
24057992:	4293      	cmp	r3, r2
24057994:	d027      	beq.n	240579e6 <HAL_DMA_IRQHandler+0xd2>
24057996:	687b      	ldr	r3, [r7, #4]
24057998:	681b      	ldr	r3, [r3, #0]
2405799a:	4a53      	ldr	r2, [pc, #332]	; (24057ae8 <HAL_DMA_IRQHandler+0x1d4>)
2405799c:	4293      	cmp	r3, r2
2405799e:	d022      	beq.n	240579e6 <HAL_DMA_IRQHandler+0xd2>
240579a0:	687b      	ldr	r3, [r7, #4]
240579a2:	681b      	ldr	r3, [r3, #0]
240579a4:	4a51      	ldr	r2, [pc, #324]	; (24057aec <HAL_DMA_IRQHandler+0x1d8>)
240579a6:	4293      	cmp	r3, r2
240579a8:	d01d      	beq.n	240579e6 <HAL_DMA_IRQHandler+0xd2>
240579aa:	687b      	ldr	r3, [r7, #4]
240579ac:	681b      	ldr	r3, [r3, #0]
240579ae:	4a50      	ldr	r2, [pc, #320]	; (24057af0 <HAL_DMA_IRQHandler+0x1dc>)
240579b0:	4293      	cmp	r3, r2
240579b2:	d018      	beq.n	240579e6 <HAL_DMA_IRQHandler+0xd2>
240579b4:	687b      	ldr	r3, [r7, #4]
240579b6:	681b      	ldr	r3, [r3, #0]
240579b8:	4a4e      	ldr	r2, [pc, #312]	; (24057af4 <HAL_DMA_IRQHandler+0x1e0>)
240579ba:	4293      	cmp	r3, r2
240579bc:	d013      	beq.n	240579e6 <HAL_DMA_IRQHandler+0xd2>
240579be:	687b      	ldr	r3, [r7, #4]
240579c0:	681b      	ldr	r3, [r3, #0]
240579c2:	4a4d      	ldr	r2, [pc, #308]	; (24057af8 <HAL_DMA_IRQHandler+0x1e4>)
240579c4:	4293      	cmp	r3, r2
240579c6:	d00e      	beq.n	240579e6 <HAL_DMA_IRQHandler+0xd2>
240579c8:	687b      	ldr	r3, [r7, #4]
240579ca:	681b      	ldr	r3, [r3, #0]
240579cc:	4a4b      	ldr	r2, [pc, #300]	; (24057afc <HAL_DMA_IRQHandler+0x1e8>)
240579ce:	4293      	cmp	r3, r2
240579d0:	d009      	beq.n	240579e6 <HAL_DMA_IRQHandler+0xd2>
240579d2:	687b      	ldr	r3, [r7, #4]
240579d4:	681b      	ldr	r3, [r3, #0]
240579d6:	4a4a      	ldr	r2, [pc, #296]	; (24057b00 <HAL_DMA_IRQHandler+0x1ec>)
240579d8:	4293      	cmp	r3, r2
240579da:	d004      	beq.n	240579e6 <HAL_DMA_IRQHandler+0xd2>
240579dc:	687b      	ldr	r3, [r7, #4]
240579de:	681b      	ldr	r3, [r3, #0]
240579e0:	4a48      	ldr	r2, [pc, #288]	; (24057b04 <HAL_DMA_IRQHandler+0x1f0>)
240579e2:	4293      	cmp	r3, r2
240579e4:	d101      	bne.n	240579ea <HAL_DMA_IRQHandler+0xd6>
240579e6:	2301      	movs	r3, #1
240579e8:	e000      	b.n	240579ec <HAL_DMA_IRQHandler+0xd8>
240579ea:	2300      	movs	r3, #0
240579ec:	2b00      	cmp	r3, #0
240579ee:	f000 842b 	beq.w	24058248 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240579f2:	687b      	ldr	r3, [r7, #4]
240579f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240579f6:	f003 031f 	and.w	r3, r3, #31
240579fa:	2208      	movs	r2, #8
240579fc:	409a      	lsls	r2, r3
240579fe:	69bb      	ldr	r3, [r7, #24]
24057a00:	4013      	ands	r3, r2
24057a02:	2b00      	cmp	r3, #0
24057a04:	f000 80a2 	beq.w	24057b4c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
24057a08:	687b      	ldr	r3, [r7, #4]
24057a0a:	681b      	ldr	r3, [r3, #0]
24057a0c:	4a2e      	ldr	r2, [pc, #184]	; (24057ac8 <HAL_DMA_IRQHandler+0x1b4>)
24057a0e:	4293      	cmp	r3, r2
24057a10:	d04a      	beq.n	24057aa8 <HAL_DMA_IRQHandler+0x194>
24057a12:	687b      	ldr	r3, [r7, #4]
24057a14:	681b      	ldr	r3, [r3, #0]
24057a16:	4a2d      	ldr	r2, [pc, #180]	; (24057acc <HAL_DMA_IRQHandler+0x1b8>)
24057a18:	4293      	cmp	r3, r2
24057a1a:	d045      	beq.n	24057aa8 <HAL_DMA_IRQHandler+0x194>
24057a1c:	687b      	ldr	r3, [r7, #4]
24057a1e:	681b      	ldr	r3, [r3, #0]
24057a20:	4a2b      	ldr	r2, [pc, #172]	; (24057ad0 <HAL_DMA_IRQHandler+0x1bc>)
24057a22:	4293      	cmp	r3, r2
24057a24:	d040      	beq.n	24057aa8 <HAL_DMA_IRQHandler+0x194>
24057a26:	687b      	ldr	r3, [r7, #4]
24057a28:	681b      	ldr	r3, [r3, #0]
24057a2a:	4a2a      	ldr	r2, [pc, #168]	; (24057ad4 <HAL_DMA_IRQHandler+0x1c0>)
24057a2c:	4293      	cmp	r3, r2
24057a2e:	d03b      	beq.n	24057aa8 <HAL_DMA_IRQHandler+0x194>
24057a30:	687b      	ldr	r3, [r7, #4]
24057a32:	681b      	ldr	r3, [r3, #0]
24057a34:	4a28      	ldr	r2, [pc, #160]	; (24057ad8 <HAL_DMA_IRQHandler+0x1c4>)
24057a36:	4293      	cmp	r3, r2
24057a38:	d036      	beq.n	24057aa8 <HAL_DMA_IRQHandler+0x194>
24057a3a:	687b      	ldr	r3, [r7, #4]
24057a3c:	681b      	ldr	r3, [r3, #0]
24057a3e:	4a27      	ldr	r2, [pc, #156]	; (24057adc <HAL_DMA_IRQHandler+0x1c8>)
24057a40:	4293      	cmp	r3, r2
24057a42:	d031      	beq.n	24057aa8 <HAL_DMA_IRQHandler+0x194>
24057a44:	687b      	ldr	r3, [r7, #4]
24057a46:	681b      	ldr	r3, [r3, #0]
24057a48:	4a25      	ldr	r2, [pc, #148]	; (24057ae0 <HAL_DMA_IRQHandler+0x1cc>)
24057a4a:	4293      	cmp	r3, r2
24057a4c:	d02c      	beq.n	24057aa8 <HAL_DMA_IRQHandler+0x194>
24057a4e:	687b      	ldr	r3, [r7, #4]
24057a50:	681b      	ldr	r3, [r3, #0]
24057a52:	4a24      	ldr	r2, [pc, #144]	; (24057ae4 <HAL_DMA_IRQHandler+0x1d0>)
24057a54:	4293      	cmp	r3, r2
24057a56:	d027      	beq.n	24057aa8 <HAL_DMA_IRQHandler+0x194>
24057a58:	687b      	ldr	r3, [r7, #4]
24057a5a:	681b      	ldr	r3, [r3, #0]
24057a5c:	4a22      	ldr	r2, [pc, #136]	; (24057ae8 <HAL_DMA_IRQHandler+0x1d4>)
24057a5e:	4293      	cmp	r3, r2
24057a60:	d022      	beq.n	24057aa8 <HAL_DMA_IRQHandler+0x194>
24057a62:	687b      	ldr	r3, [r7, #4]
24057a64:	681b      	ldr	r3, [r3, #0]
24057a66:	4a21      	ldr	r2, [pc, #132]	; (24057aec <HAL_DMA_IRQHandler+0x1d8>)
24057a68:	4293      	cmp	r3, r2
24057a6a:	d01d      	beq.n	24057aa8 <HAL_DMA_IRQHandler+0x194>
24057a6c:	687b      	ldr	r3, [r7, #4]
24057a6e:	681b      	ldr	r3, [r3, #0]
24057a70:	4a1f      	ldr	r2, [pc, #124]	; (24057af0 <HAL_DMA_IRQHandler+0x1dc>)
24057a72:	4293      	cmp	r3, r2
24057a74:	d018      	beq.n	24057aa8 <HAL_DMA_IRQHandler+0x194>
24057a76:	687b      	ldr	r3, [r7, #4]
24057a78:	681b      	ldr	r3, [r3, #0]
24057a7a:	4a1e      	ldr	r2, [pc, #120]	; (24057af4 <HAL_DMA_IRQHandler+0x1e0>)
24057a7c:	4293      	cmp	r3, r2
24057a7e:	d013      	beq.n	24057aa8 <HAL_DMA_IRQHandler+0x194>
24057a80:	687b      	ldr	r3, [r7, #4]
24057a82:	681b      	ldr	r3, [r3, #0]
24057a84:	4a1c      	ldr	r2, [pc, #112]	; (24057af8 <HAL_DMA_IRQHandler+0x1e4>)
24057a86:	4293      	cmp	r3, r2
24057a88:	d00e      	beq.n	24057aa8 <HAL_DMA_IRQHandler+0x194>
24057a8a:	687b      	ldr	r3, [r7, #4]
24057a8c:	681b      	ldr	r3, [r3, #0]
24057a8e:	4a1b      	ldr	r2, [pc, #108]	; (24057afc <HAL_DMA_IRQHandler+0x1e8>)
24057a90:	4293      	cmp	r3, r2
24057a92:	d009      	beq.n	24057aa8 <HAL_DMA_IRQHandler+0x194>
24057a94:	687b      	ldr	r3, [r7, #4]
24057a96:	681b      	ldr	r3, [r3, #0]
24057a98:	4a19      	ldr	r2, [pc, #100]	; (24057b00 <HAL_DMA_IRQHandler+0x1ec>)
24057a9a:	4293      	cmp	r3, r2
24057a9c:	d004      	beq.n	24057aa8 <HAL_DMA_IRQHandler+0x194>
24057a9e:	687b      	ldr	r3, [r7, #4]
24057aa0:	681b      	ldr	r3, [r3, #0]
24057aa2:	4a18      	ldr	r2, [pc, #96]	; (24057b04 <HAL_DMA_IRQHandler+0x1f0>)
24057aa4:	4293      	cmp	r3, r2
24057aa6:	d12f      	bne.n	24057b08 <HAL_DMA_IRQHandler+0x1f4>
24057aa8:	687b      	ldr	r3, [r7, #4]
24057aaa:	681b      	ldr	r3, [r3, #0]
24057aac:	681b      	ldr	r3, [r3, #0]
24057aae:	f003 0304 	and.w	r3, r3, #4
24057ab2:	2b00      	cmp	r3, #0
24057ab4:	bf14      	ite	ne
24057ab6:	2301      	movne	r3, #1
24057ab8:	2300      	moveq	r3, #0
24057aba:	b2db      	uxtb	r3, r3
24057abc:	e02e      	b.n	24057b1c <HAL_DMA_IRQHandler+0x208>
24057abe:	bf00      	nop
24057ac0:	20000044 	.word	0x20000044
24057ac4:	1b4e81b5 	.word	0x1b4e81b5
24057ac8:	40020010 	.word	0x40020010
24057acc:	40020028 	.word	0x40020028
24057ad0:	40020040 	.word	0x40020040
24057ad4:	40020058 	.word	0x40020058
24057ad8:	40020070 	.word	0x40020070
24057adc:	40020088 	.word	0x40020088
24057ae0:	400200a0 	.word	0x400200a0
24057ae4:	400200b8 	.word	0x400200b8
24057ae8:	40020410 	.word	0x40020410
24057aec:	40020428 	.word	0x40020428
24057af0:	40020440 	.word	0x40020440
24057af4:	40020458 	.word	0x40020458
24057af8:	40020470 	.word	0x40020470
24057afc:	40020488 	.word	0x40020488
24057b00:	400204a0 	.word	0x400204a0
24057b04:	400204b8 	.word	0x400204b8
24057b08:	687b      	ldr	r3, [r7, #4]
24057b0a:	681b      	ldr	r3, [r3, #0]
24057b0c:	681b      	ldr	r3, [r3, #0]
24057b0e:	f003 0308 	and.w	r3, r3, #8
24057b12:	2b00      	cmp	r3, #0
24057b14:	bf14      	ite	ne
24057b16:	2301      	movne	r3, #1
24057b18:	2300      	moveq	r3, #0
24057b1a:	b2db      	uxtb	r3, r3
24057b1c:	2b00      	cmp	r3, #0
24057b1e:	d015      	beq.n	24057b4c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
24057b20:	687b      	ldr	r3, [r7, #4]
24057b22:	681b      	ldr	r3, [r3, #0]
24057b24:	681a      	ldr	r2, [r3, #0]
24057b26:	687b      	ldr	r3, [r7, #4]
24057b28:	681b      	ldr	r3, [r3, #0]
24057b2a:	f022 0204 	bic.w	r2, r2, #4
24057b2e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
24057b30:	687b      	ldr	r3, [r7, #4]
24057b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24057b34:	f003 031f 	and.w	r3, r3, #31
24057b38:	2208      	movs	r2, #8
24057b3a:	409a      	lsls	r2, r3
24057b3c:	6a3b      	ldr	r3, [r7, #32]
24057b3e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
24057b40:	687b      	ldr	r3, [r7, #4]
24057b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24057b44:	f043 0201 	orr.w	r2, r3, #1
24057b48:	687b      	ldr	r3, [r7, #4]
24057b4a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24057b4c:	687b      	ldr	r3, [r7, #4]
24057b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24057b50:	f003 031f 	and.w	r3, r3, #31
24057b54:	69ba      	ldr	r2, [r7, #24]
24057b56:	fa22 f303 	lsr.w	r3, r2, r3
24057b5a:	f003 0301 	and.w	r3, r3, #1
24057b5e:	2b00      	cmp	r3, #0
24057b60:	d06e      	beq.n	24057c40 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
24057b62:	687b      	ldr	r3, [r7, #4]
24057b64:	681b      	ldr	r3, [r3, #0]
24057b66:	4a69      	ldr	r2, [pc, #420]	; (24057d0c <HAL_DMA_IRQHandler+0x3f8>)
24057b68:	4293      	cmp	r3, r2
24057b6a:	d04a      	beq.n	24057c02 <HAL_DMA_IRQHandler+0x2ee>
24057b6c:	687b      	ldr	r3, [r7, #4]
24057b6e:	681b      	ldr	r3, [r3, #0]
24057b70:	4a67      	ldr	r2, [pc, #412]	; (24057d10 <HAL_DMA_IRQHandler+0x3fc>)
24057b72:	4293      	cmp	r3, r2
24057b74:	d045      	beq.n	24057c02 <HAL_DMA_IRQHandler+0x2ee>
24057b76:	687b      	ldr	r3, [r7, #4]
24057b78:	681b      	ldr	r3, [r3, #0]
24057b7a:	4a66      	ldr	r2, [pc, #408]	; (24057d14 <HAL_DMA_IRQHandler+0x400>)
24057b7c:	4293      	cmp	r3, r2
24057b7e:	d040      	beq.n	24057c02 <HAL_DMA_IRQHandler+0x2ee>
24057b80:	687b      	ldr	r3, [r7, #4]
24057b82:	681b      	ldr	r3, [r3, #0]
24057b84:	4a64      	ldr	r2, [pc, #400]	; (24057d18 <HAL_DMA_IRQHandler+0x404>)
24057b86:	4293      	cmp	r3, r2
24057b88:	d03b      	beq.n	24057c02 <HAL_DMA_IRQHandler+0x2ee>
24057b8a:	687b      	ldr	r3, [r7, #4]
24057b8c:	681b      	ldr	r3, [r3, #0]
24057b8e:	4a63      	ldr	r2, [pc, #396]	; (24057d1c <HAL_DMA_IRQHandler+0x408>)
24057b90:	4293      	cmp	r3, r2
24057b92:	d036      	beq.n	24057c02 <HAL_DMA_IRQHandler+0x2ee>
24057b94:	687b      	ldr	r3, [r7, #4]
24057b96:	681b      	ldr	r3, [r3, #0]
24057b98:	4a61      	ldr	r2, [pc, #388]	; (24057d20 <HAL_DMA_IRQHandler+0x40c>)
24057b9a:	4293      	cmp	r3, r2
24057b9c:	d031      	beq.n	24057c02 <HAL_DMA_IRQHandler+0x2ee>
24057b9e:	687b      	ldr	r3, [r7, #4]
24057ba0:	681b      	ldr	r3, [r3, #0]
24057ba2:	4a60      	ldr	r2, [pc, #384]	; (24057d24 <HAL_DMA_IRQHandler+0x410>)
24057ba4:	4293      	cmp	r3, r2
24057ba6:	d02c      	beq.n	24057c02 <HAL_DMA_IRQHandler+0x2ee>
24057ba8:	687b      	ldr	r3, [r7, #4]
24057baa:	681b      	ldr	r3, [r3, #0]
24057bac:	4a5e      	ldr	r2, [pc, #376]	; (24057d28 <HAL_DMA_IRQHandler+0x414>)
24057bae:	4293      	cmp	r3, r2
24057bb0:	d027      	beq.n	24057c02 <HAL_DMA_IRQHandler+0x2ee>
24057bb2:	687b      	ldr	r3, [r7, #4]
24057bb4:	681b      	ldr	r3, [r3, #0]
24057bb6:	4a5d      	ldr	r2, [pc, #372]	; (24057d2c <HAL_DMA_IRQHandler+0x418>)
24057bb8:	4293      	cmp	r3, r2
24057bba:	d022      	beq.n	24057c02 <HAL_DMA_IRQHandler+0x2ee>
24057bbc:	687b      	ldr	r3, [r7, #4]
24057bbe:	681b      	ldr	r3, [r3, #0]
24057bc0:	4a5b      	ldr	r2, [pc, #364]	; (24057d30 <HAL_DMA_IRQHandler+0x41c>)
24057bc2:	4293      	cmp	r3, r2
24057bc4:	d01d      	beq.n	24057c02 <HAL_DMA_IRQHandler+0x2ee>
24057bc6:	687b      	ldr	r3, [r7, #4]
24057bc8:	681b      	ldr	r3, [r3, #0]
24057bca:	4a5a      	ldr	r2, [pc, #360]	; (24057d34 <HAL_DMA_IRQHandler+0x420>)
24057bcc:	4293      	cmp	r3, r2
24057bce:	d018      	beq.n	24057c02 <HAL_DMA_IRQHandler+0x2ee>
24057bd0:	687b      	ldr	r3, [r7, #4]
24057bd2:	681b      	ldr	r3, [r3, #0]
24057bd4:	4a58      	ldr	r2, [pc, #352]	; (24057d38 <HAL_DMA_IRQHandler+0x424>)
24057bd6:	4293      	cmp	r3, r2
24057bd8:	d013      	beq.n	24057c02 <HAL_DMA_IRQHandler+0x2ee>
24057bda:	687b      	ldr	r3, [r7, #4]
24057bdc:	681b      	ldr	r3, [r3, #0]
24057bde:	4a57      	ldr	r2, [pc, #348]	; (24057d3c <HAL_DMA_IRQHandler+0x428>)
24057be0:	4293      	cmp	r3, r2
24057be2:	d00e      	beq.n	24057c02 <HAL_DMA_IRQHandler+0x2ee>
24057be4:	687b      	ldr	r3, [r7, #4]
24057be6:	681b      	ldr	r3, [r3, #0]
24057be8:	4a55      	ldr	r2, [pc, #340]	; (24057d40 <HAL_DMA_IRQHandler+0x42c>)
24057bea:	4293      	cmp	r3, r2
24057bec:	d009      	beq.n	24057c02 <HAL_DMA_IRQHandler+0x2ee>
24057bee:	687b      	ldr	r3, [r7, #4]
24057bf0:	681b      	ldr	r3, [r3, #0]
24057bf2:	4a54      	ldr	r2, [pc, #336]	; (24057d44 <HAL_DMA_IRQHandler+0x430>)
24057bf4:	4293      	cmp	r3, r2
24057bf6:	d004      	beq.n	24057c02 <HAL_DMA_IRQHandler+0x2ee>
24057bf8:	687b      	ldr	r3, [r7, #4]
24057bfa:	681b      	ldr	r3, [r3, #0]
24057bfc:	4a52      	ldr	r2, [pc, #328]	; (24057d48 <HAL_DMA_IRQHandler+0x434>)
24057bfe:	4293      	cmp	r3, r2
24057c00:	d10a      	bne.n	24057c18 <HAL_DMA_IRQHandler+0x304>
24057c02:	687b      	ldr	r3, [r7, #4]
24057c04:	681b      	ldr	r3, [r3, #0]
24057c06:	695b      	ldr	r3, [r3, #20]
24057c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
24057c0c:	2b00      	cmp	r3, #0
24057c0e:	bf14      	ite	ne
24057c10:	2301      	movne	r3, #1
24057c12:	2300      	moveq	r3, #0
24057c14:	b2db      	uxtb	r3, r3
24057c16:	e003      	b.n	24057c20 <HAL_DMA_IRQHandler+0x30c>
24057c18:	687b      	ldr	r3, [r7, #4]
24057c1a:	681b      	ldr	r3, [r3, #0]
24057c1c:	681b      	ldr	r3, [r3, #0]
24057c1e:	2300      	movs	r3, #0
24057c20:	2b00      	cmp	r3, #0
24057c22:	d00d      	beq.n	24057c40 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
24057c24:	687b      	ldr	r3, [r7, #4]
24057c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24057c28:	f003 031f 	and.w	r3, r3, #31
24057c2c:	2201      	movs	r2, #1
24057c2e:	409a      	lsls	r2, r3
24057c30:	6a3b      	ldr	r3, [r7, #32]
24057c32:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
24057c34:	687b      	ldr	r3, [r7, #4]
24057c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24057c38:	f043 0202 	orr.w	r2, r3, #2
24057c3c:	687b      	ldr	r3, [r7, #4]
24057c3e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24057c40:	687b      	ldr	r3, [r7, #4]
24057c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24057c44:	f003 031f 	and.w	r3, r3, #31
24057c48:	2204      	movs	r2, #4
24057c4a:	409a      	lsls	r2, r3
24057c4c:	69bb      	ldr	r3, [r7, #24]
24057c4e:	4013      	ands	r3, r2
24057c50:	2b00      	cmp	r3, #0
24057c52:	f000 808f 	beq.w	24057d74 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
24057c56:	687b      	ldr	r3, [r7, #4]
24057c58:	681b      	ldr	r3, [r3, #0]
24057c5a:	4a2c      	ldr	r2, [pc, #176]	; (24057d0c <HAL_DMA_IRQHandler+0x3f8>)
24057c5c:	4293      	cmp	r3, r2
24057c5e:	d04a      	beq.n	24057cf6 <HAL_DMA_IRQHandler+0x3e2>
24057c60:	687b      	ldr	r3, [r7, #4]
24057c62:	681b      	ldr	r3, [r3, #0]
24057c64:	4a2a      	ldr	r2, [pc, #168]	; (24057d10 <HAL_DMA_IRQHandler+0x3fc>)
24057c66:	4293      	cmp	r3, r2
24057c68:	d045      	beq.n	24057cf6 <HAL_DMA_IRQHandler+0x3e2>
24057c6a:	687b      	ldr	r3, [r7, #4]
24057c6c:	681b      	ldr	r3, [r3, #0]
24057c6e:	4a29      	ldr	r2, [pc, #164]	; (24057d14 <HAL_DMA_IRQHandler+0x400>)
24057c70:	4293      	cmp	r3, r2
24057c72:	d040      	beq.n	24057cf6 <HAL_DMA_IRQHandler+0x3e2>
24057c74:	687b      	ldr	r3, [r7, #4]
24057c76:	681b      	ldr	r3, [r3, #0]
24057c78:	4a27      	ldr	r2, [pc, #156]	; (24057d18 <HAL_DMA_IRQHandler+0x404>)
24057c7a:	4293      	cmp	r3, r2
24057c7c:	d03b      	beq.n	24057cf6 <HAL_DMA_IRQHandler+0x3e2>
24057c7e:	687b      	ldr	r3, [r7, #4]
24057c80:	681b      	ldr	r3, [r3, #0]
24057c82:	4a26      	ldr	r2, [pc, #152]	; (24057d1c <HAL_DMA_IRQHandler+0x408>)
24057c84:	4293      	cmp	r3, r2
24057c86:	d036      	beq.n	24057cf6 <HAL_DMA_IRQHandler+0x3e2>
24057c88:	687b      	ldr	r3, [r7, #4]
24057c8a:	681b      	ldr	r3, [r3, #0]
24057c8c:	4a24      	ldr	r2, [pc, #144]	; (24057d20 <HAL_DMA_IRQHandler+0x40c>)
24057c8e:	4293      	cmp	r3, r2
24057c90:	d031      	beq.n	24057cf6 <HAL_DMA_IRQHandler+0x3e2>
24057c92:	687b      	ldr	r3, [r7, #4]
24057c94:	681b      	ldr	r3, [r3, #0]
24057c96:	4a23      	ldr	r2, [pc, #140]	; (24057d24 <HAL_DMA_IRQHandler+0x410>)
24057c98:	4293      	cmp	r3, r2
24057c9a:	d02c      	beq.n	24057cf6 <HAL_DMA_IRQHandler+0x3e2>
24057c9c:	687b      	ldr	r3, [r7, #4]
24057c9e:	681b      	ldr	r3, [r3, #0]
24057ca0:	4a21      	ldr	r2, [pc, #132]	; (24057d28 <HAL_DMA_IRQHandler+0x414>)
24057ca2:	4293      	cmp	r3, r2
24057ca4:	d027      	beq.n	24057cf6 <HAL_DMA_IRQHandler+0x3e2>
24057ca6:	687b      	ldr	r3, [r7, #4]
24057ca8:	681b      	ldr	r3, [r3, #0]
24057caa:	4a20      	ldr	r2, [pc, #128]	; (24057d2c <HAL_DMA_IRQHandler+0x418>)
24057cac:	4293      	cmp	r3, r2
24057cae:	d022      	beq.n	24057cf6 <HAL_DMA_IRQHandler+0x3e2>
24057cb0:	687b      	ldr	r3, [r7, #4]
24057cb2:	681b      	ldr	r3, [r3, #0]
24057cb4:	4a1e      	ldr	r2, [pc, #120]	; (24057d30 <HAL_DMA_IRQHandler+0x41c>)
24057cb6:	4293      	cmp	r3, r2
24057cb8:	d01d      	beq.n	24057cf6 <HAL_DMA_IRQHandler+0x3e2>
24057cba:	687b      	ldr	r3, [r7, #4]
24057cbc:	681b      	ldr	r3, [r3, #0]
24057cbe:	4a1d      	ldr	r2, [pc, #116]	; (24057d34 <HAL_DMA_IRQHandler+0x420>)
24057cc0:	4293      	cmp	r3, r2
24057cc2:	d018      	beq.n	24057cf6 <HAL_DMA_IRQHandler+0x3e2>
24057cc4:	687b      	ldr	r3, [r7, #4]
24057cc6:	681b      	ldr	r3, [r3, #0]
24057cc8:	4a1b      	ldr	r2, [pc, #108]	; (24057d38 <HAL_DMA_IRQHandler+0x424>)
24057cca:	4293      	cmp	r3, r2
24057ccc:	d013      	beq.n	24057cf6 <HAL_DMA_IRQHandler+0x3e2>
24057cce:	687b      	ldr	r3, [r7, #4]
24057cd0:	681b      	ldr	r3, [r3, #0]
24057cd2:	4a1a      	ldr	r2, [pc, #104]	; (24057d3c <HAL_DMA_IRQHandler+0x428>)
24057cd4:	4293      	cmp	r3, r2
24057cd6:	d00e      	beq.n	24057cf6 <HAL_DMA_IRQHandler+0x3e2>
24057cd8:	687b      	ldr	r3, [r7, #4]
24057cda:	681b      	ldr	r3, [r3, #0]
24057cdc:	4a18      	ldr	r2, [pc, #96]	; (24057d40 <HAL_DMA_IRQHandler+0x42c>)
24057cde:	4293      	cmp	r3, r2
24057ce0:	d009      	beq.n	24057cf6 <HAL_DMA_IRQHandler+0x3e2>
24057ce2:	687b      	ldr	r3, [r7, #4]
24057ce4:	681b      	ldr	r3, [r3, #0]
24057ce6:	4a17      	ldr	r2, [pc, #92]	; (24057d44 <HAL_DMA_IRQHandler+0x430>)
24057ce8:	4293      	cmp	r3, r2
24057cea:	d004      	beq.n	24057cf6 <HAL_DMA_IRQHandler+0x3e2>
24057cec:	687b      	ldr	r3, [r7, #4]
24057cee:	681b      	ldr	r3, [r3, #0]
24057cf0:	4a15      	ldr	r2, [pc, #84]	; (24057d48 <HAL_DMA_IRQHandler+0x434>)
24057cf2:	4293      	cmp	r3, r2
24057cf4:	d12a      	bne.n	24057d4c <HAL_DMA_IRQHandler+0x438>
24057cf6:	687b      	ldr	r3, [r7, #4]
24057cf8:	681b      	ldr	r3, [r3, #0]
24057cfa:	681b      	ldr	r3, [r3, #0]
24057cfc:	f003 0302 	and.w	r3, r3, #2
24057d00:	2b00      	cmp	r3, #0
24057d02:	bf14      	ite	ne
24057d04:	2301      	movne	r3, #1
24057d06:	2300      	moveq	r3, #0
24057d08:	b2db      	uxtb	r3, r3
24057d0a:	e023      	b.n	24057d54 <HAL_DMA_IRQHandler+0x440>
24057d0c:	40020010 	.word	0x40020010
24057d10:	40020028 	.word	0x40020028
24057d14:	40020040 	.word	0x40020040
24057d18:	40020058 	.word	0x40020058
24057d1c:	40020070 	.word	0x40020070
24057d20:	40020088 	.word	0x40020088
24057d24:	400200a0 	.word	0x400200a0
24057d28:	400200b8 	.word	0x400200b8
24057d2c:	40020410 	.word	0x40020410
24057d30:	40020428 	.word	0x40020428
24057d34:	40020440 	.word	0x40020440
24057d38:	40020458 	.word	0x40020458
24057d3c:	40020470 	.word	0x40020470
24057d40:	40020488 	.word	0x40020488
24057d44:	400204a0 	.word	0x400204a0
24057d48:	400204b8 	.word	0x400204b8
24057d4c:	687b      	ldr	r3, [r7, #4]
24057d4e:	681b      	ldr	r3, [r3, #0]
24057d50:	681b      	ldr	r3, [r3, #0]
24057d52:	2300      	movs	r3, #0
24057d54:	2b00      	cmp	r3, #0
24057d56:	d00d      	beq.n	24057d74 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
24057d58:	687b      	ldr	r3, [r7, #4]
24057d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24057d5c:	f003 031f 	and.w	r3, r3, #31
24057d60:	2204      	movs	r2, #4
24057d62:	409a      	lsls	r2, r3
24057d64:	6a3b      	ldr	r3, [r7, #32]
24057d66:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
24057d68:	687b      	ldr	r3, [r7, #4]
24057d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24057d6c:	f043 0204 	orr.w	r2, r3, #4
24057d70:	687b      	ldr	r3, [r7, #4]
24057d72:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24057d74:	687b      	ldr	r3, [r7, #4]
24057d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24057d78:	f003 031f 	and.w	r3, r3, #31
24057d7c:	2210      	movs	r2, #16
24057d7e:	409a      	lsls	r2, r3
24057d80:	69bb      	ldr	r3, [r7, #24]
24057d82:	4013      	ands	r3, r2
24057d84:	2b00      	cmp	r3, #0
24057d86:	f000 80a6 	beq.w	24057ed6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
24057d8a:	687b      	ldr	r3, [r7, #4]
24057d8c:	681b      	ldr	r3, [r3, #0]
24057d8e:	4a85      	ldr	r2, [pc, #532]	; (24057fa4 <HAL_DMA_IRQHandler+0x690>)
24057d90:	4293      	cmp	r3, r2
24057d92:	d04a      	beq.n	24057e2a <HAL_DMA_IRQHandler+0x516>
24057d94:	687b      	ldr	r3, [r7, #4]
24057d96:	681b      	ldr	r3, [r3, #0]
24057d98:	4a83      	ldr	r2, [pc, #524]	; (24057fa8 <HAL_DMA_IRQHandler+0x694>)
24057d9a:	4293      	cmp	r3, r2
24057d9c:	d045      	beq.n	24057e2a <HAL_DMA_IRQHandler+0x516>
24057d9e:	687b      	ldr	r3, [r7, #4]
24057da0:	681b      	ldr	r3, [r3, #0]
24057da2:	4a82      	ldr	r2, [pc, #520]	; (24057fac <HAL_DMA_IRQHandler+0x698>)
24057da4:	4293      	cmp	r3, r2
24057da6:	d040      	beq.n	24057e2a <HAL_DMA_IRQHandler+0x516>
24057da8:	687b      	ldr	r3, [r7, #4]
24057daa:	681b      	ldr	r3, [r3, #0]
24057dac:	4a80      	ldr	r2, [pc, #512]	; (24057fb0 <HAL_DMA_IRQHandler+0x69c>)
24057dae:	4293      	cmp	r3, r2
24057db0:	d03b      	beq.n	24057e2a <HAL_DMA_IRQHandler+0x516>
24057db2:	687b      	ldr	r3, [r7, #4]
24057db4:	681b      	ldr	r3, [r3, #0]
24057db6:	4a7f      	ldr	r2, [pc, #508]	; (24057fb4 <HAL_DMA_IRQHandler+0x6a0>)
24057db8:	4293      	cmp	r3, r2
24057dba:	d036      	beq.n	24057e2a <HAL_DMA_IRQHandler+0x516>
24057dbc:	687b      	ldr	r3, [r7, #4]
24057dbe:	681b      	ldr	r3, [r3, #0]
24057dc0:	4a7d      	ldr	r2, [pc, #500]	; (24057fb8 <HAL_DMA_IRQHandler+0x6a4>)
24057dc2:	4293      	cmp	r3, r2
24057dc4:	d031      	beq.n	24057e2a <HAL_DMA_IRQHandler+0x516>
24057dc6:	687b      	ldr	r3, [r7, #4]
24057dc8:	681b      	ldr	r3, [r3, #0]
24057dca:	4a7c      	ldr	r2, [pc, #496]	; (24057fbc <HAL_DMA_IRQHandler+0x6a8>)
24057dcc:	4293      	cmp	r3, r2
24057dce:	d02c      	beq.n	24057e2a <HAL_DMA_IRQHandler+0x516>
24057dd0:	687b      	ldr	r3, [r7, #4]
24057dd2:	681b      	ldr	r3, [r3, #0]
24057dd4:	4a7a      	ldr	r2, [pc, #488]	; (24057fc0 <HAL_DMA_IRQHandler+0x6ac>)
24057dd6:	4293      	cmp	r3, r2
24057dd8:	d027      	beq.n	24057e2a <HAL_DMA_IRQHandler+0x516>
24057dda:	687b      	ldr	r3, [r7, #4]
24057ddc:	681b      	ldr	r3, [r3, #0]
24057dde:	4a79      	ldr	r2, [pc, #484]	; (24057fc4 <HAL_DMA_IRQHandler+0x6b0>)
24057de0:	4293      	cmp	r3, r2
24057de2:	d022      	beq.n	24057e2a <HAL_DMA_IRQHandler+0x516>
24057de4:	687b      	ldr	r3, [r7, #4]
24057de6:	681b      	ldr	r3, [r3, #0]
24057de8:	4a77      	ldr	r2, [pc, #476]	; (24057fc8 <HAL_DMA_IRQHandler+0x6b4>)
24057dea:	4293      	cmp	r3, r2
24057dec:	d01d      	beq.n	24057e2a <HAL_DMA_IRQHandler+0x516>
24057dee:	687b      	ldr	r3, [r7, #4]
24057df0:	681b      	ldr	r3, [r3, #0]
24057df2:	4a76      	ldr	r2, [pc, #472]	; (24057fcc <HAL_DMA_IRQHandler+0x6b8>)
24057df4:	4293      	cmp	r3, r2
24057df6:	d018      	beq.n	24057e2a <HAL_DMA_IRQHandler+0x516>
24057df8:	687b      	ldr	r3, [r7, #4]
24057dfa:	681b      	ldr	r3, [r3, #0]
24057dfc:	4a74      	ldr	r2, [pc, #464]	; (24057fd0 <HAL_DMA_IRQHandler+0x6bc>)
24057dfe:	4293      	cmp	r3, r2
24057e00:	d013      	beq.n	24057e2a <HAL_DMA_IRQHandler+0x516>
24057e02:	687b      	ldr	r3, [r7, #4]
24057e04:	681b      	ldr	r3, [r3, #0]
24057e06:	4a73      	ldr	r2, [pc, #460]	; (24057fd4 <HAL_DMA_IRQHandler+0x6c0>)
24057e08:	4293      	cmp	r3, r2
24057e0a:	d00e      	beq.n	24057e2a <HAL_DMA_IRQHandler+0x516>
24057e0c:	687b      	ldr	r3, [r7, #4]
24057e0e:	681b      	ldr	r3, [r3, #0]
24057e10:	4a71      	ldr	r2, [pc, #452]	; (24057fd8 <HAL_DMA_IRQHandler+0x6c4>)
24057e12:	4293      	cmp	r3, r2
24057e14:	d009      	beq.n	24057e2a <HAL_DMA_IRQHandler+0x516>
24057e16:	687b      	ldr	r3, [r7, #4]
24057e18:	681b      	ldr	r3, [r3, #0]
24057e1a:	4a70      	ldr	r2, [pc, #448]	; (24057fdc <HAL_DMA_IRQHandler+0x6c8>)
24057e1c:	4293      	cmp	r3, r2
24057e1e:	d004      	beq.n	24057e2a <HAL_DMA_IRQHandler+0x516>
24057e20:	687b      	ldr	r3, [r7, #4]
24057e22:	681b      	ldr	r3, [r3, #0]
24057e24:	4a6e      	ldr	r2, [pc, #440]	; (24057fe0 <HAL_DMA_IRQHandler+0x6cc>)
24057e26:	4293      	cmp	r3, r2
24057e28:	d10a      	bne.n	24057e40 <HAL_DMA_IRQHandler+0x52c>
24057e2a:	687b      	ldr	r3, [r7, #4]
24057e2c:	681b      	ldr	r3, [r3, #0]
24057e2e:	681b      	ldr	r3, [r3, #0]
24057e30:	f003 0308 	and.w	r3, r3, #8
24057e34:	2b00      	cmp	r3, #0
24057e36:	bf14      	ite	ne
24057e38:	2301      	movne	r3, #1
24057e3a:	2300      	moveq	r3, #0
24057e3c:	b2db      	uxtb	r3, r3
24057e3e:	e009      	b.n	24057e54 <HAL_DMA_IRQHandler+0x540>
24057e40:	687b      	ldr	r3, [r7, #4]
24057e42:	681b      	ldr	r3, [r3, #0]
24057e44:	681b      	ldr	r3, [r3, #0]
24057e46:	f003 0304 	and.w	r3, r3, #4
24057e4a:	2b00      	cmp	r3, #0
24057e4c:	bf14      	ite	ne
24057e4e:	2301      	movne	r3, #1
24057e50:	2300      	moveq	r3, #0
24057e52:	b2db      	uxtb	r3, r3
24057e54:	2b00      	cmp	r3, #0
24057e56:	d03e      	beq.n	24057ed6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
24057e58:	687b      	ldr	r3, [r7, #4]
24057e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24057e5c:	f003 031f 	and.w	r3, r3, #31
24057e60:	2210      	movs	r2, #16
24057e62:	409a      	lsls	r2, r3
24057e64:	6a3b      	ldr	r3, [r7, #32]
24057e66:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
24057e68:	687b      	ldr	r3, [r7, #4]
24057e6a:	681b      	ldr	r3, [r3, #0]
24057e6c:	681b      	ldr	r3, [r3, #0]
24057e6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
24057e72:	2b00      	cmp	r3, #0
24057e74:	d018      	beq.n	24057ea8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
24057e76:	687b      	ldr	r3, [r7, #4]
24057e78:	681b      	ldr	r3, [r3, #0]
24057e7a:	681b      	ldr	r3, [r3, #0]
24057e7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
24057e80:	2b00      	cmp	r3, #0
24057e82:	d108      	bne.n	24057e96 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
24057e84:	687b      	ldr	r3, [r7, #4]
24057e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24057e88:	2b00      	cmp	r3, #0
24057e8a:	d024      	beq.n	24057ed6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
24057e8c:	687b      	ldr	r3, [r7, #4]
24057e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24057e90:	6878      	ldr	r0, [r7, #4]
24057e92:	4798      	blx	r3
24057e94:	e01f      	b.n	24057ed6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
24057e96:	687b      	ldr	r3, [r7, #4]
24057e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24057e9a:	2b00      	cmp	r3, #0
24057e9c:	d01b      	beq.n	24057ed6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
24057e9e:	687b      	ldr	r3, [r7, #4]
24057ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24057ea2:	6878      	ldr	r0, [r7, #4]
24057ea4:	4798      	blx	r3
24057ea6:	e016      	b.n	24057ed6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
24057ea8:	687b      	ldr	r3, [r7, #4]
24057eaa:	681b      	ldr	r3, [r3, #0]
24057eac:	681b      	ldr	r3, [r3, #0]
24057eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
24057eb2:	2b00      	cmp	r3, #0
24057eb4:	d107      	bne.n	24057ec6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
24057eb6:	687b      	ldr	r3, [r7, #4]
24057eb8:	681b      	ldr	r3, [r3, #0]
24057eba:	681a      	ldr	r2, [r3, #0]
24057ebc:	687b      	ldr	r3, [r7, #4]
24057ebe:	681b      	ldr	r3, [r3, #0]
24057ec0:	f022 0208 	bic.w	r2, r2, #8
24057ec4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
24057ec6:	687b      	ldr	r3, [r7, #4]
24057ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24057eca:	2b00      	cmp	r3, #0
24057ecc:	d003      	beq.n	24057ed6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
24057ece:	687b      	ldr	r3, [r7, #4]
24057ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24057ed2:	6878      	ldr	r0, [r7, #4]
24057ed4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24057ed6:	687b      	ldr	r3, [r7, #4]
24057ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24057eda:	f003 031f 	and.w	r3, r3, #31
24057ede:	2220      	movs	r2, #32
24057ee0:	409a      	lsls	r2, r3
24057ee2:	69bb      	ldr	r3, [r7, #24]
24057ee4:	4013      	ands	r3, r2
24057ee6:	2b00      	cmp	r3, #0
24057ee8:	f000 8110 	beq.w	2405810c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
24057eec:	687b      	ldr	r3, [r7, #4]
24057eee:	681b      	ldr	r3, [r3, #0]
24057ef0:	4a2c      	ldr	r2, [pc, #176]	; (24057fa4 <HAL_DMA_IRQHandler+0x690>)
24057ef2:	4293      	cmp	r3, r2
24057ef4:	d04a      	beq.n	24057f8c <HAL_DMA_IRQHandler+0x678>
24057ef6:	687b      	ldr	r3, [r7, #4]
24057ef8:	681b      	ldr	r3, [r3, #0]
24057efa:	4a2b      	ldr	r2, [pc, #172]	; (24057fa8 <HAL_DMA_IRQHandler+0x694>)
24057efc:	4293      	cmp	r3, r2
24057efe:	d045      	beq.n	24057f8c <HAL_DMA_IRQHandler+0x678>
24057f00:	687b      	ldr	r3, [r7, #4]
24057f02:	681b      	ldr	r3, [r3, #0]
24057f04:	4a29      	ldr	r2, [pc, #164]	; (24057fac <HAL_DMA_IRQHandler+0x698>)
24057f06:	4293      	cmp	r3, r2
24057f08:	d040      	beq.n	24057f8c <HAL_DMA_IRQHandler+0x678>
24057f0a:	687b      	ldr	r3, [r7, #4]
24057f0c:	681b      	ldr	r3, [r3, #0]
24057f0e:	4a28      	ldr	r2, [pc, #160]	; (24057fb0 <HAL_DMA_IRQHandler+0x69c>)
24057f10:	4293      	cmp	r3, r2
24057f12:	d03b      	beq.n	24057f8c <HAL_DMA_IRQHandler+0x678>
24057f14:	687b      	ldr	r3, [r7, #4]
24057f16:	681b      	ldr	r3, [r3, #0]
24057f18:	4a26      	ldr	r2, [pc, #152]	; (24057fb4 <HAL_DMA_IRQHandler+0x6a0>)
24057f1a:	4293      	cmp	r3, r2
24057f1c:	d036      	beq.n	24057f8c <HAL_DMA_IRQHandler+0x678>
24057f1e:	687b      	ldr	r3, [r7, #4]
24057f20:	681b      	ldr	r3, [r3, #0]
24057f22:	4a25      	ldr	r2, [pc, #148]	; (24057fb8 <HAL_DMA_IRQHandler+0x6a4>)
24057f24:	4293      	cmp	r3, r2
24057f26:	d031      	beq.n	24057f8c <HAL_DMA_IRQHandler+0x678>
24057f28:	687b      	ldr	r3, [r7, #4]
24057f2a:	681b      	ldr	r3, [r3, #0]
24057f2c:	4a23      	ldr	r2, [pc, #140]	; (24057fbc <HAL_DMA_IRQHandler+0x6a8>)
24057f2e:	4293      	cmp	r3, r2
24057f30:	d02c      	beq.n	24057f8c <HAL_DMA_IRQHandler+0x678>
24057f32:	687b      	ldr	r3, [r7, #4]
24057f34:	681b      	ldr	r3, [r3, #0]
24057f36:	4a22      	ldr	r2, [pc, #136]	; (24057fc0 <HAL_DMA_IRQHandler+0x6ac>)
24057f38:	4293      	cmp	r3, r2
24057f3a:	d027      	beq.n	24057f8c <HAL_DMA_IRQHandler+0x678>
24057f3c:	687b      	ldr	r3, [r7, #4]
24057f3e:	681b      	ldr	r3, [r3, #0]
24057f40:	4a20      	ldr	r2, [pc, #128]	; (24057fc4 <HAL_DMA_IRQHandler+0x6b0>)
24057f42:	4293      	cmp	r3, r2
24057f44:	d022      	beq.n	24057f8c <HAL_DMA_IRQHandler+0x678>
24057f46:	687b      	ldr	r3, [r7, #4]
24057f48:	681b      	ldr	r3, [r3, #0]
24057f4a:	4a1f      	ldr	r2, [pc, #124]	; (24057fc8 <HAL_DMA_IRQHandler+0x6b4>)
24057f4c:	4293      	cmp	r3, r2
24057f4e:	d01d      	beq.n	24057f8c <HAL_DMA_IRQHandler+0x678>
24057f50:	687b      	ldr	r3, [r7, #4]
24057f52:	681b      	ldr	r3, [r3, #0]
24057f54:	4a1d      	ldr	r2, [pc, #116]	; (24057fcc <HAL_DMA_IRQHandler+0x6b8>)
24057f56:	4293      	cmp	r3, r2
24057f58:	d018      	beq.n	24057f8c <HAL_DMA_IRQHandler+0x678>
24057f5a:	687b      	ldr	r3, [r7, #4]
24057f5c:	681b      	ldr	r3, [r3, #0]
24057f5e:	4a1c      	ldr	r2, [pc, #112]	; (24057fd0 <HAL_DMA_IRQHandler+0x6bc>)
24057f60:	4293      	cmp	r3, r2
24057f62:	d013      	beq.n	24057f8c <HAL_DMA_IRQHandler+0x678>
24057f64:	687b      	ldr	r3, [r7, #4]
24057f66:	681b      	ldr	r3, [r3, #0]
24057f68:	4a1a      	ldr	r2, [pc, #104]	; (24057fd4 <HAL_DMA_IRQHandler+0x6c0>)
24057f6a:	4293      	cmp	r3, r2
24057f6c:	d00e      	beq.n	24057f8c <HAL_DMA_IRQHandler+0x678>
24057f6e:	687b      	ldr	r3, [r7, #4]
24057f70:	681b      	ldr	r3, [r3, #0]
24057f72:	4a19      	ldr	r2, [pc, #100]	; (24057fd8 <HAL_DMA_IRQHandler+0x6c4>)
24057f74:	4293      	cmp	r3, r2
24057f76:	d009      	beq.n	24057f8c <HAL_DMA_IRQHandler+0x678>
24057f78:	687b      	ldr	r3, [r7, #4]
24057f7a:	681b      	ldr	r3, [r3, #0]
24057f7c:	4a17      	ldr	r2, [pc, #92]	; (24057fdc <HAL_DMA_IRQHandler+0x6c8>)
24057f7e:	4293      	cmp	r3, r2
24057f80:	d004      	beq.n	24057f8c <HAL_DMA_IRQHandler+0x678>
24057f82:	687b      	ldr	r3, [r7, #4]
24057f84:	681b      	ldr	r3, [r3, #0]
24057f86:	4a16      	ldr	r2, [pc, #88]	; (24057fe0 <HAL_DMA_IRQHandler+0x6cc>)
24057f88:	4293      	cmp	r3, r2
24057f8a:	d12b      	bne.n	24057fe4 <HAL_DMA_IRQHandler+0x6d0>
24057f8c:	687b      	ldr	r3, [r7, #4]
24057f8e:	681b      	ldr	r3, [r3, #0]
24057f90:	681b      	ldr	r3, [r3, #0]
24057f92:	f003 0310 	and.w	r3, r3, #16
24057f96:	2b00      	cmp	r3, #0
24057f98:	bf14      	ite	ne
24057f9a:	2301      	movne	r3, #1
24057f9c:	2300      	moveq	r3, #0
24057f9e:	b2db      	uxtb	r3, r3
24057fa0:	e02a      	b.n	24057ff8 <HAL_DMA_IRQHandler+0x6e4>
24057fa2:	bf00      	nop
24057fa4:	40020010 	.word	0x40020010
24057fa8:	40020028 	.word	0x40020028
24057fac:	40020040 	.word	0x40020040
24057fb0:	40020058 	.word	0x40020058
24057fb4:	40020070 	.word	0x40020070
24057fb8:	40020088 	.word	0x40020088
24057fbc:	400200a0 	.word	0x400200a0
24057fc0:	400200b8 	.word	0x400200b8
24057fc4:	40020410 	.word	0x40020410
24057fc8:	40020428 	.word	0x40020428
24057fcc:	40020440 	.word	0x40020440
24057fd0:	40020458 	.word	0x40020458
24057fd4:	40020470 	.word	0x40020470
24057fd8:	40020488 	.word	0x40020488
24057fdc:	400204a0 	.word	0x400204a0
24057fe0:	400204b8 	.word	0x400204b8
24057fe4:	687b      	ldr	r3, [r7, #4]
24057fe6:	681b      	ldr	r3, [r3, #0]
24057fe8:	681b      	ldr	r3, [r3, #0]
24057fea:	f003 0302 	and.w	r3, r3, #2
24057fee:	2b00      	cmp	r3, #0
24057ff0:	bf14      	ite	ne
24057ff2:	2301      	movne	r3, #1
24057ff4:	2300      	moveq	r3, #0
24057ff6:	b2db      	uxtb	r3, r3
24057ff8:	2b00      	cmp	r3, #0
24057ffa:	f000 8087 	beq.w	2405810c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
24057ffe:	687b      	ldr	r3, [r7, #4]
24058000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24058002:	f003 031f 	and.w	r3, r3, #31
24058006:	2220      	movs	r2, #32
24058008:	409a      	lsls	r2, r3
2405800a:	6a3b      	ldr	r3, [r7, #32]
2405800c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
2405800e:	687b      	ldr	r3, [r7, #4]
24058010:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
24058014:	b2db      	uxtb	r3, r3
24058016:	2b04      	cmp	r3, #4
24058018:	d139      	bne.n	2405808e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
2405801a:	687b      	ldr	r3, [r7, #4]
2405801c:	681b      	ldr	r3, [r3, #0]
2405801e:	681a      	ldr	r2, [r3, #0]
24058020:	687b      	ldr	r3, [r7, #4]
24058022:	681b      	ldr	r3, [r3, #0]
24058024:	f022 0216 	bic.w	r2, r2, #22
24058028:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
2405802a:	687b      	ldr	r3, [r7, #4]
2405802c:	681b      	ldr	r3, [r3, #0]
2405802e:	695a      	ldr	r2, [r3, #20]
24058030:	687b      	ldr	r3, [r7, #4]
24058032:	681b      	ldr	r3, [r3, #0]
24058034:	f022 0280 	bic.w	r2, r2, #128	; 0x80
24058038:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
2405803a:	687b      	ldr	r3, [r7, #4]
2405803c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405803e:	2b00      	cmp	r3, #0
24058040:	d103      	bne.n	2405804a <HAL_DMA_IRQHandler+0x736>
24058042:	687b      	ldr	r3, [r7, #4]
24058044:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24058046:	2b00      	cmp	r3, #0
24058048:	d007      	beq.n	2405805a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
2405804a:	687b      	ldr	r3, [r7, #4]
2405804c:	681b      	ldr	r3, [r3, #0]
2405804e:	681a      	ldr	r2, [r3, #0]
24058050:	687b      	ldr	r3, [r7, #4]
24058052:	681b      	ldr	r3, [r3, #0]
24058054:	f022 0208 	bic.w	r2, r2, #8
24058058:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
2405805a:	687b      	ldr	r3, [r7, #4]
2405805c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2405805e:	f003 031f 	and.w	r3, r3, #31
24058062:	223f      	movs	r2, #63	; 0x3f
24058064:	409a      	lsls	r2, r3
24058066:	6a3b      	ldr	r3, [r7, #32]
24058068:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
2405806a:	687b      	ldr	r3, [r7, #4]
2405806c:	2201      	movs	r2, #1
2405806e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
24058072:	687b      	ldr	r3, [r7, #4]
24058074:	2200      	movs	r2, #0
24058076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
2405807a:	687b      	ldr	r3, [r7, #4]
2405807c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405807e:	2b00      	cmp	r3, #0
24058080:	f000 8382 	beq.w	24058788 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
24058084:	687b      	ldr	r3, [r7, #4]
24058086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24058088:	6878      	ldr	r0, [r7, #4]
2405808a:	4798      	blx	r3
          }
          return;
2405808c:	e37c      	b.n	24058788 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
2405808e:	687b      	ldr	r3, [r7, #4]
24058090:	681b      	ldr	r3, [r3, #0]
24058092:	681b      	ldr	r3, [r3, #0]
24058094:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
24058098:	2b00      	cmp	r3, #0
2405809a:	d018      	beq.n	240580ce <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
2405809c:	687b      	ldr	r3, [r7, #4]
2405809e:	681b      	ldr	r3, [r3, #0]
240580a0:	681b      	ldr	r3, [r3, #0]
240580a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
240580a6:	2b00      	cmp	r3, #0
240580a8:	d108      	bne.n	240580bc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
240580aa:	687b      	ldr	r3, [r7, #4]
240580ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
240580ae:	2b00      	cmp	r3, #0
240580b0:	d02c      	beq.n	2405810c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
240580b2:	687b      	ldr	r3, [r7, #4]
240580b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
240580b6:	6878      	ldr	r0, [r7, #4]
240580b8:	4798      	blx	r3
240580ba:	e027      	b.n	2405810c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
240580bc:	687b      	ldr	r3, [r7, #4]
240580be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240580c0:	2b00      	cmp	r3, #0
240580c2:	d023      	beq.n	2405810c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
240580c4:	687b      	ldr	r3, [r7, #4]
240580c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240580c8:	6878      	ldr	r0, [r7, #4]
240580ca:	4798      	blx	r3
240580cc:	e01e      	b.n	2405810c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
240580ce:	687b      	ldr	r3, [r7, #4]
240580d0:	681b      	ldr	r3, [r3, #0]
240580d2:	681b      	ldr	r3, [r3, #0]
240580d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
240580d8:	2b00      	cmp	r3, #0
240580da:	d10f      	bne.n	240580fc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
240580dc:	687b      	ldr	r3, [r7, #4]
240580de:	681b      	ldr	r3, [r3, #0]
240580e0:	681a      	ldr	r2, [r3, #0]
240580e2:	687b      	ldr	r3, [r7, #4]
240580e4:	681b      	ldr	r3, [r3, #0]
240580e6:	f022 0210 	bic.w	r2, r2, #16
240580ea:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
240580ec:	687b      	ldr	r3, [r7, #4]
240580ee:	2201      	movs	r2, #1
240580f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
240580f4:	687b      	ldr	r3, [r7, #4]
240580f6:	2200      	movs	r2, #0
240580f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
240580fc:	687b      	ldr	r3, [r7, #4]
240580fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24058100:	2b00      	cmp	r3, #0
24058102:	d003      	beq.n	2405810c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
24058104:	687b      	ldr	r3, [r7, #4]
24058106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24058108:	6878      	ldr	r0, [r7, #4]
2405810a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
2405810c:	687b      	ldr	r3, [r7, #4]
2405810e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24058110:	2b00      	cmp	r3, #0
24058112:	f000 833e 	beq.w	24058792 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
24058116:	687b      	ldr	r3, [r7, #4]
24058118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405811a:	f003 0301 	and.w	r3, r3, #1
2405811e:	2b00      	cmp	r3, #0
24058120:	f000 8088 	beq.w	24058234 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
24058124:	687b      	ldr	r3, [r7, #4]
24058126:	2204      	movs	r2, #4
24058128:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
2405812c:	687b      	ldr	r3, [r7, #4]
2405812e:	681b      	ldr	r3, [r3, #0]
24058130:	4a89      	ldr	r2, [pc, #548]	; (24058358 <HAL_DMA_IRQHandler+0xa44>)
24058132:	4293      	cmp	r3, r2
24058134:	d04a      	beq.n	240581cc <HAL_DMA_IRQHandler+0x8b8>
24058136:	687b      	ldr	r3, [r7, #4]
24058138:	681b      	ldr	r3, [r3, #0]
2405813a:	4a88      	ldr	r2, [pc, #544]	; (2405835c <HAL_DMA_IRQHandler+0xa48>)
2405813c:	4293      	cmp	r3, r2
2405813e:	d045      	beq.n	240581cc <HAL_DMA_IRQHandler+0x8b8>
24058140:	687b      	ldr	r3, [r7, #4]
24058142:	681b      	ldr	r3, [r3, #0]
24058144:	4a86      	ldr	r2, [pc, #536]	; (24058360 <HAL_DMA_IRQHandler+0xa4c>)
24058146:	4293      	cmp	r3, r2
24058148:	d040      	beq.n	240581cc <HAL_DMA_IRQHandler+0x8b8>
2405814a:	687b      	ldr	r3, [r7, #4]
2405814c:	681b      	ldr	r3, [r3, #0]
2405814e:	4a85      	ldr	r2, [pc, #532]	; (24058364 <HAL_DMA_IRQHandler+0xa50>)
24058150:	4293      	cmp	r3, r2
24058152:	d03b      	beq.n	240581cc <HAL_DMA_IRQHandler+0x8b8>
24058154:	687b      	ldr	r3, [r7, #4]
24058156:	681b      	ldr	r3, [r3, #0]
24058158:	4a83      	ldr	r2, [pc, #524]	; (24058368 <HAL_DMA_IRQHandler+0xa54>)
2405815a:	4293      	cmp	r3, r2
2405815c:	d036      	beq.n	240581cc <HAL_DMA_IRQHandler+0x8b8>
2405815e:	687b      	ldr	r3, [r7, #4]
24058160:	681b      	ldr	r3, [r3, #0]
24058162:	4a82      	ldr	r2, [pc, #520]	; (2405836c <HAL_DMA_IRQHandler+0xa58>)
24058164:	4293      	cmp	r3, r2
24058166:	d031      	beq.n	240581cc <HAL_DMA_IRQHandler+0x8b8>
24058168:	687b      	ldr	r3, [r7, #4]
2405816a:	681b      	ldr	r3, [r3, #0]
2405816c:	4a80      	ldr	r2, [pc, #512]	; (24058370 <HAL_DMA_IRQHandler+0xa5c>)
2405816e:	4293      	cmp	r3, r2
24058170:	d02c      	beq.n	240581cc <HAL_DMA_IRQHandler+0x8b8>
24058172:	687b      	ldr	r3, [r7, #4]
24058174:	681b      	ldr	r3, [r3, #0]
24058176:	4a7f      	ldr	r2, [pc, #508]	; (24058374 <HAL_DMA_IRQHandler+0xa60>)
24058178:	4293      	cmp	r3, r2
2405817a:	d027      	beq.n	240581cc <HAL_DMA_IRQHandler+0x8b8>
2405817c:	687b      	ldr	r3, [r7, #4]
2405817e:	681b      	ldr	r3, [r3, #0]
24058180:	4a7d      	ldr	r2, [pc, #500]	; (24058378 <HAL_DMA_IRQHandler+0xa64>)
24058182:	4293      	cmp	r3, r2
24058184:	d022      	beq.n	240581cc <HAL_DMA_IRQHandler+0x8b8>
24058186:	687b      	ldr	r3, [r7, #4]
24058188:	681b      	ldr	r3, [r3, #0]
2405818a:	4a7c      	ldr	r2, [pc, #496]	; (2405837c <HAL_DMA_IRQHandler+0xa68>)
2405818c:	4293      	cmp	r3, r2
2405818e:	d01d      	beq.n	240581cc <HAL_DMA_IRQHandler+0x8b8>
24058190:	687b      	ldr	r3, [r7, #4]
24058192:	681b      	ldr	r3, [r3, #0]
24058194:	4a7a      	ldr	r2, [pc, #488]	; (24058380 <HAL_DMA_IRQHandler+0xa6c>)
24058196:	4293      	cmp	r3, r2
24058198:	d018      	beq.n	240581cc <HAL_DMA_IRQHandler+0x8b8>
2405819a:	687b      	ldr	r3, [r7, #4]
2405819c:	681b      	ldr	r3, [r3, #0]
2405819e:	4a79      	ldr	r2, [pc, #484]	; (24058384 <HAL_DMA_IRQHandler+0xa70>)
240581a0:	4293      	cmp	r3, r2
240581a2:	d013      	beq.n	240581cc <HAL_DMA_IRQHandler+0x8b8>
240581a4:	687b      	ldr	r3, [r7, #4]
240581a6:	681b      	ldr	r3, [r3, #0]
240581a8:	4a77      	ldr	r2, [pc, #476]	; (24058388 <HAL_DMA_IRQHandler+0xa74>)
240581aa:	4293      	cmp	r3, r2
240581ac:	d00e      	beq.n	240581cc <HAL_DMA_IRQHandler+0x8b8>
240581ae:	687b      	ldr	r3, [r7, #4]
240581b0:	681b      	ldr	r3, [r3, #0]
240581b2:	4a76      	ldr	r2, [pc, #472]	; (2405838c <HAL_DMA_IRQHandler+0xa78>)
240581b4:	4293      	cmp	r3, r2
240581b6:	d009      	beq.n	240581cc <HAL_DMA_IRQHandler+0x8b8>
240581b8:	687b      	ldr	r3, [r7, #4]
240581ba:	681b      	ldr	r3, [r3, #0]
240581bc:	4a74      	ldr	r2, [pc, #464]	; (24058390 <HAL_DMA_IRQHandler+0xa7c>)
240581be:	4293      	cmp	r3, r2
240581c0:	d004      	beq.n	240581cc <HAL_DMA_IRQHandler+0x8b8>
240581c2:	687b      	ldr	r3, [r7, #4]
240581c4:	681b      	ldr	r3, [r3, #0]
240581c6:	4a73      	ldr	r2, [pc, #460]	; (24058394 <HAL_DMA_IRQHandler+0xa80>)
240581c8:	4293      	cmp	r3, r2
240581ca:	d108      	bne.n	240581de <HAL_DMA_IRQHandler+0x8ca>
240581cc:	687b      	ldr	r3, [r7, #4]
240581ce:	681b      	ldr	r3, [r3, #0]
240581d0:	681a      	ldr	r2, [r3, #0]
240581d2:	687b      	ldr	r3, [r7, #4]
240581d4:	681b      	ldr	r3, [r3, #0]
240581d6:	f022 0201 	bic.w	r2, r2, #1
240581da:	601a      	str	r2, [r3, #0]
240581dc:	e007      	b.n	240581ee <HAL_DMA_IRQHandler+0x8da>
240581de:	687b      	ldr	r3, [r7, #4]
240581e0:	681b      	ldr	r3, [r3, #0]
240581e2:	681a      	ldr	r2, [r3, #0]
240581e4:	687b      	ldr	r3, [r7, #4]
240581e6:	681b      	ldr	r3, [r3, #0]
240581e8:	f022 0201 	bic.w	r2, r2, #1
240581ec:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
240581ee:	68fb      	ldr	r3, [r7, #12]
240581f0:	3301      	adds	r3, #1
240581f2:	60fb      	str	r3, [r7, #12]
240581f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
240581f6:	429a      	cmp	r2, r3
240581f8:	d307      	bcc.n	2405820a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
240581fa:	687b      	ldr	r3, [r7, #4]
240581fc:	681b      	ldr	r3, [r3, #0]
240581fe:	681b      	ldr	r3, [r3, #0]
24058200:	f003 0301 	and.w	r3, r3, #1
24058204:	2b00      	cmp	r3, #0
24058206:	d1f2      	bne.n	240581ee <HAL_DMA_IRQHandler+0x8da>
24058208:	e000      	b.n	2405820c <HAL_DMA_IRQHandler+0x8f8>
            break;
2405820a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
2405820c:	687b      	ldr	r3, [r7, #4]
2405820e:	681b      	ldr	r3, [r3, #0]
24058210:	681b      	ldr	r3, [r3, #0]
24058212:	f003 0301 	and.w	r3, r3, #1
24058216:	2b00      	cmp	r3, #0
24058218:	d004      	beq.n	24058224 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
2405821a:	687b      	ldr	r3, [r7, #4]
2405821c:	2203      	movs	r2, #3
2405821e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
24058222:	e003      	b.n	2405822c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
24058224:	687b      	ldr	r3, [r7, #4]
24058226:	2201      	movs	r2, #1
24058228:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
2405822c:	687b      	ldr	r3, [r7, #4]
2405822e:	2200      	movs	r2, #0
24058230:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
24058234:	687b      	ldr	r3, [r7, #4]
24058236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24058238:	2b00      	cmp	r3, #0
2405823a:	f000 82aa 	beq.w	24058792 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
2405823e:	687b      	ldr	r3, [r7, #4]
24058240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24058242:	6878      	ldr	r0, [r7, #4]
24058244:	4798      	blx	r3
24058246:	e2a4      	b.n	24058792 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
24058248:	687b      	ldr	r3, [r7, #4]
2405824a:	681b      	ldr	r3, [r3, #0]
2405824c:	4a52      	ldr	r2, [pc, #328]	; (24058398 <HAL_DMA_IRQHandler+0xa84>)
2405824e:	4293      	cmp	r3, r2
24058250:	d04a      	beq.n	240582e8 <HAL_DMA_IRQHandler+0x9d4>
24058252:	687b      	ldr	r3, [r7, #4]
24058254:	681b      	ldr	r3, [r3, #0]
24058256:	4a51      	ldr	r2, [pc, #324]	; (2405839c <HAL_DMA_IRQHandler+0xa88>)
24058258:	4293      	cmp	r3, r2
2405825a:	d045      	beq.n	240582e8 <HAL_DMA_IRQHandler+0x9d4>
2405825c:	687b      	ldr	r3, [r7, #4]
2405825e:	681b      	ldr	r3, [r3, #0]
24058260:	4a4f      	ldr	r2, [pc, #316]	; (240583a0 <HAL_DMA_IRQHandler+0xa8c>)
24058262:	4293      	cmp	r3, r2
24058264:	d040      	beq.n	240582e8 <HAL_DMA_IRQHandler+0x9d4>
24058266:	687b      	ldr	r3, [r7, #4]
24058268:	681b      	ldr	r3, [r3, #0]
2405826a:	4a4e      	ldr	r2, [pc, #312]	; (240583a4 <HAL_DMA_IRQHandler+0xa90>)
2405826c:	4293      	cmp	r3, r2
2405826e:	d03b      	beq.n	240582e8 <HAL_DMA_IRQHandler+0x9d4>
24058270:	687b      	ldr	r3, [r7, #4]
24058272:	681b      	ldr	r3, [r3, #0]
24058274:	4a4c      	ldr	r2, [pc, #304]	; (240583a8 <HAL_DMA_IRQHandler+0xa94>)
24058276:	4293      	cmp	r3, r2
24058278:	d036      	beq.n	240582e8 <HAL_DMA_IRQHandler+0x9d4>
2405827a:	687b      	ldr	r3, [r7, #4]
2405827c:	681b      	ldr	r3, [r3, #0]
2405827e:	4a4b      	ldr	r2, [pc, #300]	; (240583ac <HAL_DMA_IRQHandler+0xa98>)
24058280:	4293      	cmp	r3, r2
24058282:	d031      	beq.n	240582e8 <HAL_DMA_IRQHandler+0x9d4>
24058284:	687b      	ldr	r3, [r7, #4]
24058286:	681b      	ldr	r3, [r3, #0]
24058288:	4a49      	ldr	r2, [pc, #292]	; (240583b0 <HAL_DMA_IRQHandler+0xa9c>)
2405828a:	4293      	cmp	r3, r2
2405828c:	d02c      	beq.n	240582e8 <HAL_DMA_IRQHandler+0x9d4>
2405828e:	687b      	ldr	r3, [r7, #4]
24058290:	681b      	ldr	r3, [r3, #0]
24058292:	4a48      	ldr	r2, [pc, #288]	; (240583b4 <HAL_DMA_IRQHandler+0xaa0>)
24058294:	4293      	cmp	r3, r2
24058296:	d027      	beq.n	240582e8 <HAL_DMA_IRQHandler+0x9d4>
24058298:	687b      	ldr	r3, [r7, #4]
2405829a:	681b      	ldr	r3, [r3, #0]
2405829c:	4a46      	ldr	r2, [pc, #280]	; (240583b8 <HAL_DMA_IRQHandler+0xaa4>)
2405829e:	4293      	cmp	r3, r2
240582a0:	d022      	beq.n	240582e8 <HAL_DMA_IRQHandler+0x9d4>
240582a2:	687b      	ldr	r3, [r7, #4]
240582a4:	681b      	ldr	r3, [r3, #0]
240582a6:	4a45      	ldr	r2, [pc, #276]	; (240583bc <HAL_DMA_IRQHandler+0xaa8>)
240582a8:	4293      	cmp	r3, r2
240582aa:	d01d      	beq.n	240582e8 <HAL_DMA_IRQHandler+0x9d4>
240582ac:	687b      	ldr	r3, [r7, #4]
240582ae:	681b      	ldr	r3, [r3, #0]
240582b0:	4a43      	ldr	r2, [pc, #268]	; (240583c0 <HAL_DMA_IRQHandler+0xaac>)
240582b2:	4293      	cmp	r3, r2
240582b4:	d018      	beq.n	240582e8 <HAL_DMA_IRQHandler+0x9d4>
240582b6:	687b      	ldr	r3, [r7, #4]
240582b8:	681b      	ldr	r3, [r3, #0]
240582ba:	4a42      	ldr	r2, [pc, #264]	; (240583c4 <HAL_DMA_IRQHandler+0xab0>)
240582bc:	4293      	cmp	r3, r2
240582be:	d013      	beq.n	240582e8 <HAL_DMA_IRQHandler+0x9d4>
240582c0:	687b      	ldr	r3, [r7, #4]
240582c2:	681b      	ldr	r3, [r3, #0]
240582c4:	4a40      	ldr	r2, [pc, #256]	; (240583c8 <HAL_DMA_IRQHandler+0xab4>)
240582c6:	4293      	cmp	r3, r2
240582c8:	d00e      	beq.n	240582e8 <HAL_DMA_IRQHandler+0x9d4>
240582ca:	687b      	ldr	r3, [r7, #4]
240582cc:	681b      	ldr	r3, [r3, #0]
240582ce:	4a3f      	ldr	r2, [pc, #252]	; (240583cc <HAL_DMA_IRQHandler+0xab8>)
240582d0:	4293      	cmp	r3, r2
240582d2:	d009      	beq.n	240582e8 <HAL_DMA_IRQHandler+0x9d4>
240582d4:	687b      	ldr	r3, [r7, #4]
240582d6:	681b      	ldr	r3, [r3, #0]
240582d8:	4a3d      	ldr	r2, [pc, #244]	; (240583d0 <HAL_DMA_IRQHandler+0xabc>)
240582da:	4293      	cmp	r3, r2
240582dc:	d004      	beq.n	240582e8 <HAL_DMA_IRQHandler+0x9d4>
240582de:	687b      	ldr	r3, [r7, #4]
240582e0:	681b      	ldr	r3, [r3, #0]
240582e2:	4a3c      	ldr	r2, [pc, #240]	; (240583d4 <HAL_DMA_IRQHandler+0xac0>)
240582e4:	4293      	cmp	r3, r2
240582e6:	d101      	bne.n	240582ec <HAL_DMA_IRQHandler+0x9d8>
240582e8:	2301      	movs	r3, #1
240582ea:	e000      	b.n	240582ee <HAL_DMA_IRQHandler+0x9da>
240582ec:	2300      	movs	r3, #0
240582ee:	2b00      	cmp	r3, #0
240582f0:	f000 824f 	beq.w	24058792 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
240582f4:	687b      	ldr	r3, [r7, #4]
240582f6:	681b      	ldr	r3, [r3, #0]
240582f8:	681b      	ldr	r3, [r3, #0]
240582fa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
240582fc:	687b      	ldr	r3, [r7, #4]
240582fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24058300:	f003 031f 	and.w	r3, r3, #31
24058304:	2204      	movs	r2, #4
24058306:	409a      	lsls	r2, r3
24058308:	697b      	ldr	r3, [r7, #20]
2405830a:	4013      	ands	r3, r2
2405830c:	2b00      	cmp	r3, #0
2405830e:	f000 80dd 	beq.w	240584cc <HAL_DMA_IRQHandler+0xbb8>
24058312:	693b      	ldr	r3, [r7, #16]
24058314:	f003 0304 	and.w	r3, r3, #4
24058318:	2b00      	cmp	r3, #0
2405831a:	f000 80d7 	beq.w	240584cc <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
2405831e:	687b      	ldr	r3, [r7, #4]
24058320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24058322:	f003 031f 	and.w	r3, r3, #31
24058326:	2204      	movs	r2, #4
24058328:	409a      	lsls	r2, r3
2405832a:	69fb      	ldr	r3, [r7, #28]
2405832c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
2405832e:	693b      	ldr	r3, [r7, #16]
24058330:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
24058334:	2b00      	cmp	r3, #0
24058336:	d059      	beq.n	240583ec <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
24058338:	693b      	ldr	r3, [r7, #16]
2405833a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2405833e:	2b00      	cmp	r3, #0
24058340:	d14a      	bne.n	240583d8 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
24058342:	687b      	ldr	r3, [r7, #4]
24058344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24058346:	2b00      	cmp	r3, #0
24058348:	f000 8220 	beq.w	2405878c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
2405834c:	687b      	ldr	r3, [r7, #4]
2405834e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24058350:	6878      	ldr	r0, [r7, #4]
24058352:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24058354:	e21a      	b.n	2405878c <HAL_DMA_IRQHandler+0xe78>
24058356:	bf00      	nop
24058358:	40020010 	.word	0x40020010
2405835c:	40020028 	.word	0x40020028
24058360:	40020040 	.word	0x40020040
24058364:	40020058 	.word	0x40020058
24058368:	40020070 	.word	0x40020070
2405836c:	40020088 	.word	0x40020088
24058370:	400200a0 	.word	0x400200a0
24058374:	400200b8 	.word	0x400200b8
24058378:	40020410 	.word	0x40020410
2405837c:	40020428 	.word	0x40020428
24058380:	40020440 	.word	0x40020440
24058384:	40020458 	.word	0x40020458
24058388:	40020470 	.word	0x40020470
2405838c:	40020488 	.word	0x40020488
24058390:	400204a0 	.word	0x400204a0
24058394:	400204b8 	.word	0x400204b8
24058398:	48022c08 	.word	0x48022c08
2405839c:	48022c1c 	.word	0x48022c1c
240583a0:	48022c30 	.word	0x48022c30
240583a4:	48022c44 	.word	0x48022c44
240583a8:	48022c58 	.word	0x48022c58
240583ac:	48022c6c 	.word	0x48022c6c
240583b0:	48022c80 	.word	0x48022c80
240583b4:	48022c94 	.word	0x48022c94
240583b8:	58025408 	.word	0x58025408
240583bc:	5802541c 	.word	0x5802541c
240583c0:	58025430 	.word	0x58025430
240583c4:	58025444 	.word	0x58025444
240583c8:	58025458 	.word	0x58025458
240583cc:	5802546c 	.word	0x5802546c
240583d0:	58025480 	.word	0x58025480
240583d4:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
240583d8:	687b      	ldr	r3, [r7, #4]
240583da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240583dc:	2b00      	cmp	r3, #0
240583de:	f000 81d5 	beq.w	2405878c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
240583e2:	687b      	ldr	r3, [r7, #4]
240583e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240583e6:	6878      	ldr	r0, [r7, #4]
240583e8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
240583ea:	e1cf      	b.n	2405878c <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
240583ec:	693b      	ldr	r3, [r7, #16]
240583ee:	f003 0320 	and.w	r3, r3, #32
240583f2:	2b00      	cmp	r3, #0
240583f4:	d160      	bne.n	240584b8 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
240583f6:	687b      	ldr	r3, [r7, #4]
240583f8:	681b      	ldr	r3, [r3, #0]
240583fa:	4a7f      	ldr	r2, [pc, #508]	; (240585f8 <HAL_DMA_IRQHandler+0xce4>)
240583fc:	4293      	cmp	r3, r2
240583fe:	d04a      	beq.n	24058496 <HAL_DMA_IRQHandler+0xb82>
24058400:	687b      	ldr	r3, [r7, #4]
24058402:	681b      	ldr	r3, [r3, #0]
24058404:	4a7d      	ldr	r2, [pc, #500]	; (240585fc <HAL_DMA_IRQHandler+0xce8>)
24058406:	4293      	cmp	r3, r2
24058408:	d045      	beq.n	24058496 <HAL_DMA_IRQHandler+0xb82>
2405840a:	687b      	ldr	r3, [r7, #4]
2405840c:	681b      	ldr	r3, [r3, #0]
2405840e:	4a7c      	ldr	r2, [pc, #496]	; (24058600 <HAL_DMA_IRQHandler+0xcec>)
24058410:	4293      	cmp	r3, r2
24058412:	d040      	beq.n	24058496 <HAL_DMA_IRQHandler+0xb82>
24058414:	687b      	ldr	r3, [r7, #4]
24058416:	681b      	ldr	r3, [r3, #0]
24058418:	4a7a      	ldr	r2, [pc, #488]	; (24058604 <HAL_DMA_IRQHandler+0xcf0>)
2405841a:	4293      	cmp	r3, r2
2405841c:	d03b      	beq.n	24058496 <HAL_DMA_IRQHandler+0xb82>
2405841e:	687b      	ldr	r3, [r7, #4]
24058420:	681b      	ldr	r3, [r3, #0]
24058422:	4a79      	ldr	r2, [pc, #484]	; (24058608 <HAL_DMA_IRQHandler+0xcf4>)
24058424:	4293      	cmp	r3, r2
24058426:	d036      	beq.n	24058496 <HAL_DMA_IRQHandler+0xb82>
24058428:	687b      	ldr	r3, [r7, #4]
2405842a:	681b      	ldr	r3, [r3, #0]
2405842c:	4a77      	ldr	r2, [pc, #476]	; (2405860c <HAL_DMA_IRQHandler+0xcf8>)
2405842e:	4293      	cmp	r3, r2
24058430:	d031      	beq.n	24058496 <HAL_DMA_IRQHandler+0xb82>
24058432:	687b      	ldr	r3, [r7, #4]
24058434:	681b      	ldr	r3, [r3, #0]
24058436:	4a76      	ldr	r2, [pc, #472]	; (24058610 <HAL_DMA_IRQHandler+0xcfc>)
24058438:	4293      	cmp	r3, r2
2405843a:	d02c      	beq.n	24058496 <HAL_DMA_IRQHandler+0xb82>
2405843c:	687b      	ldr	r3, [r7, #4]
2405843e:	681b      	ldr	r3, [r3, #0]
24058440:	4a74      	ldr	r2, [pc, #464]	; (24058614 <HAL_DMA_IRQHandler+0xd00>)
24058442:	4293      	cmp	r3, r2
24058444:	d027      	beq.n	24058496 <HAL_DMA_IRQHandler+0xb82>
24058446:	687b      	ldr	r3, [r7, #4]
24058448:	681b      	ldr	r3, [r3, #0]
2405844a:	4a73      	ldr	r2, [pc, #460]	; (24058618 <HAL_DMA_IRQHandler+0xd04>)
2405844c:	4293      	cmp	r3, r2
2405844e:	d022      	beq.n	24058496 <HAL_DMA_IRQHandler+0xb82>
24058450:	687b      	ldr	r3, [r7, #4]
24058452:	681b      	ldr	r3, [r3, #0]
24058454:	4a71      	ldr	r2, [pc, #452]	; (2405861c <HAL_DMA_IRQHandler+0xd08>)
24058456:	4293      	cmp	r3, r2
24058458:	d01d      	beq.n	24058496 <HAL_DMA_IRQHandler+0xb82>
2405845a:	687b      	ldr	r3, [r7, #4]
2405845c:	681b      	ldr	r3, [r3, #0]
2405845e:	4a70      	ldr	r2, [pc, #448]	; (24058620 <HAL_DMA_IRQHandler+0xd0c>)
24058460:	4293      	cmp	r3, r2
24058462:	d018      	beq.n	24058496 <HAL_DMA_IRQHandler+0xb82>
24058464:	687b      	ldr	r3, [r7, #4]
24058466:	681b      	ldr	r3, [r3, #0]
24058468:	4a6e      	ldr	r2, [pc, #440]	; (24058624 <HAL_DMA_IRQHandler+0xd10>)
2405846a:	4293      	cmp	r3, r2
2405846c:	d013      	beq.n	24058496 <HAL_DMA_IRQHandler+0xb82>
2405846e:	687b      	ldr	r3, [r7, #4]
24058470:	681b      	ldr	r3, [r3, #0]
24058472:	4a6d      	ldr	r2, [pc, #436]	; (24058628 <HAL_DMA_IRQHandler+0xd14>)
24058474:	4293      	cmp	r3, r2
24058476:	d00e      	beq.n	24058496 <HAL_DMA_IRQHandler+0xb82>
24058478:	687b      	ldr	r3, [r7, #4]
2405847a:	681b      	ldr	r3, [r3, #0]
2405847c:	4a6b      	ldr	r2, [pc, #428]	; (2405862c <HAL_DMA_IRQHandler+0xd18>)
2405847e:	4293      	cmp	r3, r2
24058480:	d009      	beq.n	24058496 <HAL_DMA_IRQHandler+0xb82>
24058482:	687b      	ldr	r3, [r7, #4]
24058484:	681b      	ldr	r3, [r3, #0]
24058486:	4a6a      	ldr	r2, [pc, #424]	; (24058630 <HAL_DMA_IRQHandler+0xd1c>)
24058488:	4293      	cmp	r3, r2
2405848a:	d004      	beq.n	24058496 <HAL_DMA_IRQHandler+0xb82>
2405848c:	687b      	ldr	r3, [r7, #4]
2405848e:	681b      	ldr	r3, [r3, #0]
24058490:	4a68      	ldr	r2, [pc, #416]	; (24058634 <HAL_DMA_IRQHandler+0xd20>)
24058492:	4293      	cmp	r3, r2
24058494:	d108      	bne.n	240584a8 <HAL_DMA_IRQHandler+0xb94>
24058496:	687b      	ldr	r3, [r7, #4]
24058498:	681b      	ldr	r3, [r3, #0]
2405849a:	681a      	ldr	r2, [r3, #0]
2405849c:	687b      	ldr	r3, [r7, #4]
2405849e:	681b      	ldr	r3, [r3, #0]
240584a0:	f022 0208 	bic.w	r2, r2, #8
240584a4:	601a      	str	r2, [r3, #0]
240584a6:	e007      	b.n	240584b8 <HAL_DMA_IRQHandler+0xba4>
240584a8:	687b      	ldr	r3, [r7, #4]
240584aa:	681b      	ldr	r3, [r3, #0]
240584ac:	681a      	ldr	r2, [r3, #0]
240584ae:	687b      	ldr	r3, [r7, #4]
240584b0:	681b      	ldr	r3, [r3, #0]
240584b2:	f022 0204 	bic.w	r2, r2, #4
240584b6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
240584b8:	687b      	ldr	r3, [r7, #4]
240584ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240584bc:	2b00      	cmp	r3, #0
240584be:	f000 8165 	beq.w	2405878c <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
240584c2:	687b      	ldr	r3, [r7, #4]
240584c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240584c6:	6878      	ldr	r0, [r7, #4]
240584c8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
240584ca:	e15f      	b.n	2405878c <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
240584cc:	687b      	ldr	r3, [r7, #4]
240584ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240584d0:	f003 031f 	and.w	r3, r3, #31
240584d4:	2202      	movs	r2, #2
240584d6:	409a      	lsls	r2, r3
240584d8:	697b      	ldr	r3, [r7, #20]
240584da:	4013      	ands	r3, r2
240584dc:	2b00      	cmp	r3, #0
240584de:	f000 80c5 	beq.w	2405866c <HAL_DMA_IRQHandler+0xd58>
240584e2:	693b      	ldr	r3, [r7, #16]
240584e4:	f003 0302 	and.w	r3, r3, #2
240584e8:	2b00      	cmp	r3, #0
240584ea:	f000 80bf 	beq.w	2405866c <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
240584ee:	687b      	ldr	r3, [r7, #4]
240584f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240584f2:	f003 031f 	and.w	r3, r3, #31
240584f6:	2202      	movs	r2, #2
240584f8:	409a      	lsls	r2, r3
240584fa:	69fb      	ldr	r3, [r7, #28]
240584fc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
240584fe:	693b      	ldr	r3, [r7, #16]
24058500:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
24058504:	2b00      	cmp	r3, #0
24058506:	d018      	beq.n	2405853a <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
24058508:	693b      	ldr	r3, [r7, #16]
2405850a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2405850e:	2b00      	cmp	r3, #0
24058510:	d109      	bne.n	24058526 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
24058512:	687b      	ldr	r3, [r7, #4]
24058514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24058516:	2b00      	cmp	r3, #0
24058518:	f000 813a 	beq.w	24058790 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
2405851c:	687b      	ldr	r3, [r7, #4]
2405851e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24058520:	6878      	ldr	r0, [r7, #4]
24058522:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24058524:	e134      	b.n	24058790 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
24058526:	687b      	ldr	r3, [r7, #4]
24058528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2405852a:	2b00      	cmp	r3, #0
2405852c:	f000 8130 	beq.w	24058790 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
24058530:	687b      	ldr	r3, [r7, #4]
24058532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24058534:	6878      	ldr	r0, [r7, #4]
24058536:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24058538:	e12a      	b.n	24058790 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
2405853a:	693b      	ldr	r3, [r7, #16]
2405853c:	f003 0320 	and.w	r3, r3, #32
24058540:	2b00      	cmp	r3, #0
24058542:	f040 8089 	bne.w	24058658 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
24058546:	687b      	ldr	r3, [r7, #4]
24058548:	681b      	ldr	r3, [r3, #0]
2405854a:	4a2b      	ldr	r2, [pc, #172]	; (240585f8 <HAL_DMA_IRQHandler+0xce4>)
2405854c:	4293      	cmp	r3, r2
2405854e:	d04a      	beq.n	240585e6 <HAL_DMA_IRQHandler+0xcd2>
24058550:	687b      	ldr	r3, [r7, #4]
24058552:	681b      	ldr	r3, [r3, #0]
24058554:	4a29      	ldr	r2, [pc, #164]	; (240585fc <HAL_DMA_IRQHandler+0xce8>)
24058556:	4293      	cmp	r3, r2
24058558:	d045      	beq.n	240585e6 <HAL_DMA_IRQHandler+0xcd2>
2405855a:	687b      	ldr	r3, [r7, #4]
2405855c:	681b      	ldr	r3, [r3, #0]
2405855e:	4a28      	ldr	r2, [pc, #160]	; (24058600 <HAL_DMA_IRQHandler+0xcec>)
24058560:	4293      	cmp	r3, r2
24058562:	d040      	beq.n	240585e6 <HAL_DMA_IRQHandler+0xcd2>
24058564:	687b      	ldr	r3, [r7, #4]
24058566:	681b      	ldr	r3, [r3, #0]
24058568:	4a26      	ldr	r2, [pc, #152]	; (24058604 <HAL_DMA_IRQHandler+0xcf0>)
2405856a:	4293      	cmp	r3, r2
2405856c:	d03b      	beq.n	240585e6 <HAL_DMA_IRQHandler+0xcd2>
2405856e:	687b      	ldr	r3, [r7, #4]
24058570:	681b      	ldr	r3, [r3, #0]
24058572:	4a25      	ldr	r2, [pc, #148]	; (24058608 <HAL_DMA_IRQHandler+0xcf4>)
24058574:	4293      	cmp	r3, r2
24058576:	d036      	beq.n	240585e6 <HAL_DMA_IRQHandler+0xcd2>
24058578:	687b      	ldr	r3, [r7, #4]
2405857a:	681b      	ldr	r3, [r3, #0]
2405857c:	4a23      	ldr	r2, [pc, #140]	; (2405860c <HAL_DMA_IRQHandler+0xcf8>)
2405857e:	4293      	cmp	r3, r2
24058580:	d031      	beq.n	240585e6 <HAL_DMA_IRQHandler+0xcd2>
24058582:	687b      	ldr	r3, [r7, #4]
24058584:	681b      	ldr	r3, [r3, #0]
24058586:	4a22      	ldr	r2, [pc, #136]	; (24058610 <HAL_DMA_IRQHandler+0xcfc>)
24058588:	4293      	cmp	r3, r2
2405858a:	d02c      	beq.n	240585e6 <HAL_DMA_IRQHandler+0xcd2>
2405858c:	687b      	ldr	r3, [r7, #4]
2405858e:	681b      	ldr	r3, [r3, #0]
24058590:	4a20      	ldr	r2, [pc, #128]	; (24058614 <HAL_DMA_IRQHandler+0xd00>)
24058592:	4293      	cmp	r3, r2
24058594:	d027      	beq.n	240585e6 <HAL_DMA_IRQHandler+0xcd2>
24058596:	687b      	ldr	r3, [r7, #4]
24058598:	681b      	ldr	r3, [r3, #0]
2405859a:	4a1f      	ldr	r2, [pc, #124]	; (24058618 <HAL_DMA_IRQHandler+0xd04>)
2405859c:	4293      	cmp	r3, r2
2405859e:	d022      	beq.n	240585e6 <HAL_DMA_IRQHandler+0xcd2>
240585a0:	687b      	ldr	r3, [r7, #4]
240585a2:	681b      	ldr	r3, [r3, #0]
240585a4:	4a1d      	ldr	r2, [pc, #116]	; (2405861c <HAL_DMA_IRQHandler+0xd08>)
240585a6:	4293      	cmp	r3, r2
240585a8:	d01d      	beq.n	240585e6 <HAL_DMA_IRQHandler+0xcd2>
240585aa:	687b      	ldr	r3, [r7, #4]
240585ac:	681b      	ldr	r3, [r3, #0]
240585ae:	4a1c      	ldr	r2, [pc, #112]	; (24058620 <HAL_DMA_IRQHandler+0xd0c>)
240585b0:	4293      	cmp	r3, r2
240585b2:	d018      	beq.n	240585e6 <HAL_DMA_IRQHandler+0xcd2>
240585b4:	687b      	ldr	r3, [r7, #4]
240585b6:	681b      	ldr	r3, [r3, #0]
240585b8:	4a1a      	ldr	r2, [pc, #104]	; (24058624 <HAL_DMA_IRQHandler+0xd10>)
240585ba:	4293      	cmp	r3, r2
240585bc:	d013      	beq.n	240585e6 <HAL_DMA_IRQHandler+0xcd2>
240585be:	687b      	ldr	r3, [r7, #4]
240585c0:	681b      	ldr	r3, [r3, #0]
240585c2:	4a19      	ldr	r2, [pc, #100]	; (24058628 <HAL_DMA_IRQHandler+0xd14>)
240585c4:	4293      	cmp	r3, r2
240585c6:	d00e      	beq.n	240585e6 <HAL_DMA_IRQHandler+0xcd2>
240585c8:	687b      	ldr	r3, [r7, #4]
240585ca:	681b      	ldr	r3, [r3, #0]
240585cc:	4a17      	ldr	r2, [pc, #92]	; (2405862c <HAL_DMA_IRQHandler+0xd18>)
240585ce:	4293      	cmp	r3, r2
240585d0:	d009      	beq.n	240585e6 <HAL_DMA_IRQHandler+0xcd2>
240585d2:	687b      	ldr	r3, [r7, #4]
240585d4:	681b      	ldr	r3, [r3, #0]
240585d6:	4a16      	ldr	r2, [pc, #88]	; (24058630 <HAL_DMA_IRQHandler+0xd1c>)
240585d8:	4293      	cmp	r3, r2
240585da:	d004      	beq.n	240585e6 <HAL_DMA_IRQHandler+0xcd2>
240585dc:	687b      	ldr	r3, [r7, #4]
240585de:	681b      	ldr	r3, [r3, #0]
240585e0:	4a14      	ldr	r2, [pc, #80]	; (24058634 <HAL_DMA_IRQHandler+0xd20>)
240585e2:	4293      	cmp	r3, r2
240585e4:	d128      	bne.n	24058638 <HAL_DMA_IRQHandler+0xd24>
240585e6:	687b      	ldr	r3, [r7, #4]
240585e8:	681b      	ldr	r3, [r3, #0]
240585ea:	681a      	ldr	r2, [r3, #0]
240585ec:	687b      	ldr	r3, [r7, #4]
240585ee:	681b      	ldr	r3, [r3, #0]
240585f0:	f022 0214 	bic.w	r2, r2, #20
240585f4:	601a      	str	r2, [r3, #0]
240585f6:	e027      	b.n	24058648 <HAL_DMA_IRQHandler+0xd34>
240585f8:	40020010 	.word	0x40020010
240585fc:	40020028 	.word	0x40020028
24058600:	40020040 	.word	0x40020040
24058604:	40020058 	.word	0x40020058
24058608:	40020070 	.word	0x40020070
2405860c:	40020088 	.word	0x40020088
24058610:	400200a0 	.word	0x400200a0
24058614:	400200b8 	.word	0x400200b8
24058618:	40020410 	.word	0x40020410
2405861c:	40020428 	.word	0x40020428
24058620:	40020440 	.word	0x40020440
24058624:	40020458 	.word	0x40020458
24058628:	40020470 	.word	0x40020470
2405862c:	40020488 	.word	0x40020488
24058630:	400204a0 	.word	0x400204a0
24058634:	400204b8 	.word	0x400204b8
24058638:	687b      	ldr	r3, [r7, #4]
2405863a:	681b      	ldr	r3, [r3, #0]
2405863c:	681a      	ldr	r2, [r3, #0]
2405863e:	687b      	ldr	r3, [r7, #4]
24058640:	681b      	ldr	r3, [r3, #0]
24058642:	f022 020a 	bic.w	r2, r2, #10
24058646:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
24058648:	687b      	ldr	r3, [r7, #4]
2405864a:	2201      	movs	r2, #1
2405864c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
24058650:	687b      	ldr	r3, [r7, #4]
24058652:	2200      	movs	r2, #0
24058654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
24058658:	687b      	ldr	r3, [r7, #4]
2405865a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2405865c:	2b00      	cmp	r3, #0
2405865e:	f000 8097 	beq.w	24058790 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
24058662:	687b      	ldr	r3, [r7, #4]
24058664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24058666:	6878      	ldr	r0, [r7, #4]
24058668:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
2405866a:	e091      	b.n	24058790 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
2405866c:	687b      	ldr	r3, [r7, #4]
2405866e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24058670:	f003 031f 	and.w	r3, r3, #31
24058674:	2208      	movs	r2, #8
24058676:	409a      	lsls	r2, r3
24058678:	697b      	ldr	r3, [r7, #20]
2405867a:	4013      	ands	r3, r2
2405867c:	2b00      	cmp	r3, #0
2405867e:	f000 8088 	beq.w	24058792 <HAL_DMA_IRQHandler+0xe7e>
24058682:	693b      	ldr	r3, [r7, #16]
24058684:	f003 0308 	and.w	r3, r3, #8
24058688:	2b00      	cmp	r3, #0
2405868a:	f000 8082 	beq.w	24058792 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
2405868e:	687b      	ldr	r3, [r7, #4]
24058690:	681b      	ldr	r3, [r3, #0]
24058692:	4a41      	ldr	r2, [pc, #260]	; (24058798 <HAL_DMA_IRQHandler+0xe84>)
24058694:	4293      	cmp	r3, r2
24058696:	d04a      	beq.n	2405872e <HAL_DMA_IRQHandler+0xe1a>
24058698:	687b      	ldr	r3, [r7, #4]
2405869a:	681b      	ldr	r3, [r3, #0]
2405869c:	4a3f      	ldr	r2, [pc, #252]	; (2405879c <HAL_DMA_IRQHandler+0xe88>)
2405869e:	4293      	cmp	r3, r2
240586a0:	d045      	beq.n	2405872e <HAL_DMA_IRQHandler+0xe1a>
240586a2:	687b      	ldr	r3, [r7, #4]
240586a4:	681b      	ldr	r3, [r3, #0]
240586a6:	4a3e      	ldr	r2, [pc, #248]	; (240587a0 <HAL_DMA_IRQHandler+0xe8c>)
240586a8:	4293      	cmp	r3, r2
240586aa:	d040      	beq.n	2405872e <HAL_DMA_IRQHandler+0xe1a>
240586ac:	687b      	ldr	r3, [r7, #4]
240586ae:	681b      	ldr	r3, [r3, #0]
240586b0:	4a3c      	ldr	r2, [pc, #240]	; (240587a4 <HAL_DMA_IRQHandler+0xe90>)
240586b2:	4293      	cmp	r3, r2
240586b4:	d03b      	beq.n	2405872e <HAL_DMA_IRQHandler+0xe1a>
240586b6:	687b      	ldr	r3, [r7, #4]
240586b8:	681b      	ldr	r3, [r3, #0]
240586ba:	4a3b      	ldr	r2, [pc, #236]	; (240587a8 <HAL_DMA_IRQHandler+0xe94>)
240586bc:	4293      	cmp	r3, r2
240586be:	d036      	beq.n	2405872e <HAL_DMA_IRQHandler+0xe1a>
240586c0:	687b      	ldr	r3, [r7, #4]
240586c2:	681b      	ldr	r3, [r3, #0]
240586c4:	4a39      	ldr	r2, [pc, #228]	; (240587ac <HAL_DMA_IRQHandler+0xe98>)
240586c6:	4293      	cmp	r3, r2
240586c8:	d031      	beq.n	2405872e <HAL_DMA_IRQHandler+0xe1a>
240586ca:	687b      	ldr	r3, [r7, #4]
240586cc:	681b      	ldr	r3, [r3, #0]
240586ce:	4a38      	ldr	r2, [pc, #224]	; (240587b0 <HAL_DMA_IRQHandler+0xe9c>)
240586d0:	4293      	cmp	r3, r2
240586d2:	d02c      	beq.n	2405872e <HAL_DMA_IRQHandler+0xe1a>
240586d4:	687b      	ldr	r3, [r7, #4]
240586d6:	681b      	ldr	r3, [r3, #0]
240586d8:	4a36      	ldr	r2, [pc, #216]	; (240587b4 <HAL_DMA_IRQHandler+0xea0>)
240586da:	4293      	cmp	r3, r2
240586dc:	d027      	beq.n	2405872e <HAL_DMA_IRQHandler+0xe1a>
240586de:	687b      	ldr	r3, [r7, #4]
240586e0:	681b      	ldr	r3, [r3, #0]
240586e2:	4a35      	ldr	r2, [pc, #212]	; (240587b8 <HAL_DMA_IRQHandler+0xea4>)
240586e4:	4293      	cmp	r3, r2
240586e6:	d022      	beq.n	2405872e <HAL_DMA_IRQHandler+0xe1a>
240586e8:	687b      	ldr	r3, [r7, #4]
240586ea:	681b      	ldr	r3, [r3, #0]
240586ec:	4a33      	ldr	r2, [pc, #204]	; (240587bc <HAL_DMA_IRQHandler+0xea8>)
240586ee:	4293      	cmp	r3, r2
240586f0:	d01d      	beq.n	2405872e <HAL_DMA_IRQHandler+0xe1a>
240586f2:	687b      	ldr	r3, [r7, #4]
240586f4:	681b      	ldr	r3, [r3, #0]
240586f6:	4a32      	ldr	r2, [pc, #200]	; (240587c0 <HAL_DMA_IRQHandler+0xeac>)
240586f8:	4293      	cmp	r3, r2
240586fa:	d018      	beq.n	2405872e <HAL_DMA_IRQHandler+0xe1a>
240586fc:	687b      	ldr	r3, [r7, #4]
240586fe:	681b      	ldr	r3, [r3, #0]
24058700:	4a30      	ldr	r2, [pc, #192]	; (240587c4 <HAL_DMA_IRQHandler+0xeb0>)
24058702:	4293      	cmp	r3, r2
24058704:	d013      	beq.n	2405872e <HAL_DMA_IRQHandler+0xe1a>
24058706:	687b      	ldr	r3, [r7, #4]
24058708:	681b      	ldr	r3, [r3, #0]
2405870a:	4a2f      	ldr	r2, [pc, #188]	; (240587c8 <HAL_DMA_IRQHandler+0xeb4>)
2405870c:	4293      	cmp	r3, r2
2405870e:	d00e      	beq.n	2405872e <HAL_DMA_IRQHandler+0xe1a>
24058710:	687b      	ldr	r3, [r7, #4]
24058712:	681b      	ldr	r3, [r3, #0]
24058714:	4a2d      	ldr	r2, [pc, #180]	; (240587cc <HAL_DMA_IRQHandler+0xeb8>)
24058716:	4293      	cmp	r3, r2
24058718:	d009      	beq.n	2405872e <HAL_DMA_IRQHandler+0xe1a>
2405871a:	687b      	ldr	r3, [r7, #4]
2405871c:	681b      	ldr	r3, [r3, #0]
2405871e:	4a2c      	ldr	r2, [pc, #176]	; (240587d0 <HAL_DMA_IRQHandler+0xebc>)
24058720:	4293      	cmp	r3, r2
24058722:	d004      	beq.n	2405872e <HAL_DMA_IRQHandler+0xe1a>
24058724:	687b      	ldr	r3, [r7, #4]
24058726:	681b      	ldr	r3, [r3, #0]
24058728:	4a2a      	ldr	r2, [pc, #168]	; (240587d4 <HAL_DMA_IRQHandler+0xec0>)
2405872a:	4293      	cmp	r3, r2
2405872c:	d108      	bne.n	24058740 <HAL_DMA_IRQHandler+0xe2c>
2405872e:	687b      	ldr	r3, [r7, #4]
24058730:	681b      	ldr	r3, [r3, #0]
24058732:	681a      	ldr	r2, [r3, #0]
24058734:	687b      	ldr	r3, [r7, #4]
24058736:	681b      	ldr	r3, [r3, #0]
24058738:	f022 021c 	bic.w	r2, r2, #28
2405873c:	601a      	str	r2, [r3, #0]
2405873e:	e007      	b.n	24058750 <HAL_DMA_IRQHandler+0xe3c>
24058740:	687b      	ldr	r3, [r7, #4]
24058742:	681b      	ldr	r3, [r3, #0]
24058744:	681a      	ldr	r2, [r3, #0]
24058746:	687b      	ldr	r3, [r7, #4]
24058748:	681b      	ldr	r3, [r3, #0]
2405874a:	f022 020e 	bic.w	r2, r2, #14
2405874e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
24058750:	687b      	ldr	r3, [r7, #4]
24058752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24058754:	f003 031f 	and.w	r3, r3, #31
24058758:	2201      	movs	r2, #1
2405875a:	409a      	lsls	r2, r3
2405875c:	69fb      	ldr	r3, [r7, #28]
2405875e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
24058760:	687b      	ldr	r3, [r7, #4]
24058762:	2201      	movs	r2, #1
24058764:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
24058766:	687b      	ldr	r3, [r7, #4]
24058768:	2201      	movs	r2, #1
2405876a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
2405876e:	687b      	ldr	r3, [r7, #4]
24058770:	2200      	movs	r2, #0
24058772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
24058776:	687b      	ldr	r3, [r7, #4]
24058778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405877a:	2b00      	cmp	r3, #0
2405877c:	d009      	beq.n	24058792 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
2405877e:	687b      	ldr	r3, [r7, #4]
24058780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24058782:	6878      	ldr	r0, [r7, #4]
24058784:	4798      	blx	r3
24058786:	e004      	b.n	24058792 <HAL_DMA_IRQHandler+0xe7e>
          return;
24058788:	bf00      	nop
2405878a:	e002      	b.n	24058792 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
2405878c:	bf00      	nop
2405878e:	e000      	b.n	24058792 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24058790:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
24058792:	3728      	adds	r7, #40	; 0x28
24058794:	46bd      	mov	sp, r7
24058796:	bd80      	pop	{r7, pc}
24058798:	40020010 	.word	0x40020010
2405879c:	40020028 	.word	0x40020028
240587a0:	40020040 	.word	0x40020040
240587a4:	40020058 	.word	0x40020058
240587a8:	40020070 	.word	0x40020070
240587ac:	40020088 	.word	0x40020088
240587b0:	400200a0 	.word	0x400200a0
240587b4:	400200b8 	.word	0x400200b8
240587b8:	40020410 	.word	0x40020410
240587bc:	40020428 	.word	0x40020428
240587c0:	40020440 	.word	0x40020440
240587c4:	40020458 	.word	0x40020458
240587c8:	40020470 	.word	0x40020470
240587cc:	40020488 	.word	0x40020488
240587d0:	400204a0 	.word	0x400204a0
240587d4:	400204b8 	.word	0x400204b8

240587d8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
240587d8:	b480      	push	{r7}
240587da:	b083      	sub	sp, #12
240587dc:	af00      	add	r7, sp, #0
240587de:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
240587e0:	687b      	ldr	r3, [r7, #4]
240587e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
240587e4:	4618      	mov	r0, r3
240587e6:	370c      	adds	r7, #12
240587e8:	46bd      	mov	sp, r7
240587ea:	f85d 7b04 	ldr.w	r7, [sp], #4
240587ee:	4770      	bx	lr

240587f0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
240587f0:	b480      	push	{r7}
240587f2:	b087      	sub	sp, #28
240587f4:	af00      	add	r7, sp, #0
240587f6:	60f8      	str	r0, [r7, #12]
240587f8:	60b9      	str	r1, [r7, #8]
240587fa:	607a      	str	r2, [r7, #4]
240587fc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
240587fe:	68fb      	ldr	r3, [r7, #12]
24058800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24058802:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
24058804:	68fb      	ldr	r3, [r7, #12]
24058806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24058808:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
2405880a:	68fb      	ldr	r3, [r7, #12]
2405880c:	681b      	ldr	r3, [r3, #0]
2405880e:	4a7f      	ldr	r2, [pc, #508]	; (24058a0c <DMA_SetConfig+0x21c>)
24058810:	4293      	cmp	r3, r2
24058812:	d072      	beq.n	240588fa <DMA_SetConfig+0x10a>
24058814:	68fb      	ldr	r3, [r7, #12]
24058816:	681b      	ldr	r3, [r3, #0]
24058818:	4a7d      	ldr	r2, [pc, #500]	; (24058a10 <DMA_SetConfig+0x220>)
2405881a:	4293      	cmp	r3, r2
2405881c:	d06d      	beq.n	240588fa <DMA_SetConfig+0x10a>
2405881e:	68fb      	ldr	r3, [r7, #12]
24058820:	681b      	ldr	r3, [r3, #0]
24058822:	4a7c      	ldr	r2, [pc, #496]	; (24058a14 <DMA_SetConfig+0x224>)
24058824:	4293      	cmp	r3, r2
24058826:	d068      	beq.n	240588fa <DMA_SetConfig+0x10a>
24058828:	68fb      	ldr	r3, [r7, #12]
2405882a:	681b      	ldr	r3, [r3, #0]
2405882c:	4a7a      	ldr	r2, [pc, #488]	; (24058a18 <DMA_SetConfig+0x228>)
2405882e:	4293      	cmp	r3, r2
24058830:	d063      	beq.n	240588fa <DMA_SetConfig+0x10a>
24058832:	68fb      	ldr	r3, [r7, #12]
24058834:	681b      	ldr	r3, [r3, #0]
24058836:	4a79      	ldr	r2, [pc, #484]	; (24058a1c <DMA_SetConfig+0x22c>)
24058838:	4293      	cmp	r3, r2
2405883a:	d05e      	beq.n	240588fa <DMA_SetConfig+0x10a>
2405883c:	68fb      	ldr	r3, [r7, #12]
2405883e:	681b      	ldr	r3, [r3, #0]
24058840:	4a77      	ldr	r2, [pc, #476]	; (24058a20 <DMA_SetConfig+0x230>)
24058842:	4293      	cmp	r3, r2
24058844:	d059      	beq.n	240588fa <DMA_SetConfig+0x10a>
24058846:	68fb      	ldr	r3, [r7, #12]
24058848:	681b      	ldr	r3, [r3, #0]
2405884a:	4a76      	ldr	r2, [pc, #472]	; (24058a24 <DMA_SetConfig+0x234>)
2405884c:	4293      	cmp	r3, r2
2405884e:	d054      	beq.n	240588fa <DMA_SetConfig+0x10a>
24058850:	68fb      	ldr	r3, [r7, #12]
24058852:	681b      	ldr	r3, [r3, #0]
24058854:	4a74      	ldr	r2, [pc, #464]	; (24058a28 <DMA_SetConfig+0x238>)
24058856:	4293      	cmp	r3, r2
24058858:	d04f      	beq.n	240588fa <DMA_SetConfig+0x10a>
2405885a:	68fb      	ldr	r3, [r7, #12]
2405885c:	681b      	ldr	r3, [r3, #0]
2405885e:	4a73      	ldr	r2, [pc, #460]	; (24058a2c <DMA_SetConfig+0x23c>)
24058860:	4293      	cmp	r3, r2
24058862:	d04a      	beq.n	240588fa <DMA_SetConfig+0x10a>
24058864:	68fb      	ldr	r3, [r7, #12]
24058866:	681b      	ldr	r3, [r3, #0]
24058868:	4a71      	ldr	r2, [pc, #452]	; (24058a30 <DMA_SetConfig+0x240>)
2405886a:	4293      	cmp	r3, r2
2405886c:	d045      	beq.n	240588fa <DMA_SetConfig+0x10a>
2405886e:	68fb      	ldr	r3, [r7, #12]
24058870:	681b      	ldr	r3, [r3, #0]
24058872:	4a70      	ldr	r2, [pc, #448]	; (24058a34 <DMA_SetConfig+0x244>)
24058874:	4293      	cmp	r3, r2
24058876:	d040      	beq.n	240588fa <DMA_SetConfig+0x10a>
24058878:	68fb      	ldr	r3, [r7, #12]
2405887a:	681b      	ldr	r3, [r3, #0]
2405887c:	4a6e      	ldr	r2, [pc, #440]	; (24058a38 <DMA_SetConfig+0x248>)
2405887e:	4293      	cmp	r3, r2
24058880:	d03b      	beq.n	240588fa <DMA_SetConfig+0x10a>
24058882:	68fb      	ldr	r3, [r7, #12]
24058884:	681b      	ldr	r3, [r3, #0]
24058886:	4a6d      	ldr	r2, [pc, #436]	; (24058a3c <DMA_SetConfig+0x24c>)
24058888:	4293      	cmp	r3, r2
2405888a:	d036      	beq.n	240588fa <DMA_SetConfig+0x10a>
2405888c:	68fb      	ldr	r3, [r7, #12]
2405888e:	681b      	ldr	r3, [r3, #0]
24058890:	4a6b      	ldr	r2, [pc, #428]	; (24058a40 <DMA_SetConfig+0x250>)
24058892:	4293      	cmp	r3, r2
24058894:	d031      	beq.n	240588fa <DMA_SetConfig+0x10a>
24058896:	68fb      	ldr	r3, [r7, #12]
24058898:	681b      	ldr	r3, [r3, #0]
2405889a:	4a6a      	ldr	r2, [pc, #424]	; (24058a44 <DMA_SetConfig+0x254>)
2405889c:	4293      	cmp	r3, r2
2405889e:	d02c      	beq.n	240588fa <DMA_SetConfig+0x10a>
240588a0:	68fb      	ldr	r3, [r7, #12]
240588a2:	681b      	ldr	r3, [r3, #0]
240588a4:	4a68      	ldr	r2, [pc, #416]	; (24058a48 <DMA_SetConfig+0x258>)
240588a6:	4293      	cmp	r3, r2
240588a8:	d027      	beq.n	240588fa <DMA_SetConfig+0x10a>
240588aa:	68fb      	ldr	r3, [r7, #12]
240588ac:	681b      	ldr	r3, [r3, #0]
240588ae:	4a67      	ldr	r2, [pc, #412]	; (24058a4c <DMA_SetConfig+0x25c>)
240588b0:	4293      	cmp	r3, r2
240588b2:	d022      	beq.n	240588fa <DMA_SetConfig+0x10a>
240588b4:	68fb      	ldr	r3, [r7, #12]
240588b6:	681b      	ldr	r3, [r3, #0]
240588b8:	4a65      	ldr	r2, [pc, #404]	; (24058a50 <DMA_SetConfig+0x260>)
240588ba:	4293      	cmp	r3, r2
240588bc:	d01d      	beq.n	240588fa <DMA_SetConfig+0x10a>
240588be:	68fb      	ldr	r3, [r7, #12]
240588c0:	681b      	ldr	r3, [r3, #0]
240588c2:	4a64      	ldr	r2, [pc, #400]	; (24058a54 <DMA_SetConfig+0x264>)
240588c4:	4293      	cmp	r3, r2
240588c6:	d018      	beq.n	240588fa <DMA_SetConfig+0x10a>
240588c8:	68fb      	ldr	r3, [r7, #12]
240588ca:	681b      	ldr	r3, [r3, #0]
240588cc:	4a62      	ldr	r2, [pc, #392]	; (24058a58 <DMA_SetConfig+0x268>)
240588ce:	4293      	cmp	r3, r2
240588d0:	d013      	beq.n	240588fa <DMA_SetConfig+0x10a>
240588d2:	68fb      	ldr	r3, [r7, #12]
240588d4:	681b      	ldr	r3, [r3, #0]
240588d6:	4a61      	ldr	r2, [pc, #388]	; (24058a5c <DMA_SetConfig+0x26c>)
240588d8:	4293      	cmp	r3, r2
240588da:	d00e      	beq.n	240588fa <DMA_SetConfig+0x10a>
240588dc:	68fb      	ldr	r3, [r7, #12]
240588de:	681b      	ldr	r3, [r3, #0]
240588e0:	4a5f      	ldr	r2, [pc, #380]	; (24058a60 <DMA_SetConfig+0x270>)
240588e2:	4293      	cmp	r3, r2
240588e4:	d009      	beq.n	240588fa <DMA_SetConfig+0x10a>
240588e6:	68fb      	ldr	r3, [r7, #12]
240588e8:	681b      	ldr	r3, [r3, #0]
240588ea:	4a5e      	ldr	r2, [pc, #376]	; (24058a64 <DMA_SetConfig+0x274>)
240588ec:	4293      	cmp	r3, r2
240588ee:	d004      	beq.n	240588fa <DMA_SetConfig+0x10a>
240588f0:	68fb      	ldr	r3, [r7, #12]
240588f2:	681b      	ldr	r3, [r3, #0]
240588f4:	4a5c      	ldr	r2, [pc, #368]	; (24058a68 <DMA_SetConfig+0x278>)
240588f6:	4293      	cmp	r3, r2
240588f8:	d101      	bne.n	240588fe <DMA_SetConfig+0x10e>
240588fa:	2301      	movs	r3, #1
240588fc:	e000      	b.n	24058900 <DMA_SetConfig+0x110>
240588fe:	2300      	movs	r3, #0
24058900:	2b00      	cmp	r3, #0
24058902:	d00d      	beq.n	24058920 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24058904:	68fb      	ldr	r3, [r7, #12]
24058906:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24058908:	68fa      	ldr	r2, [r7, #12]
2405890a:	6e92      	ldr	r2, [r2, #104]	; 0x68
2405890c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
2405890e:	68fb      	ldr	r3, [r7, #12]
24058910:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24058912:	2b00      	cmp	r3, #0
24058914:	d004      	beq.n	24058920 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24058916:	68fb      	ldr	r3, [r7, #12]
24058918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405891a:	68fa      	ldr	r2, [r7, #12]
2405891c:	6f52      	ldr	r2, [r2, #116]	; 0x74
2405891e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24058920:	68fb      	ldr	r3, [r7, #12]
24058922:	681b      	ldr	r3, [r3, #0]
24058924:	4a39      	ldr	r2, [pc, #228]	; (24058a0c <DMA_SetConfig+0x21c>)
24058926:	4293      	cmp	r3, r2
24058928:	d04a      	beq.n	240589c0 <DMA_SetConfig+0x1d0>
2405892a:	68fb      	ldr	r3, [r7, #12]
2405892c:	681b      	ldr	r3, [r3, #0]
2405892e:	4a38      	ldr	r2, [pc, #224]	; (24058a10 <DMA_SetConfig+0x220>)
24058930:	4293      	cmp	r3, r2
24058932:	d045      	beq.n	240589c0 <DMA_SetConfig+0x1d0>
24058934:	68fb      	ldr	r3, [r7, #12]
24058936:	681b      	ldr	r3, [r3, #0]
24058938:	4a36      	ldr	r2, [pc, #216]	; (24058a14 <DMA_SetConfig+0x224>)
2405893a:	4293      	cmp	r3, r2
2405893c:	d040      	beq.n	240589c0 <DMA_SetConfig+0x1d0>
2405893e:	68fb      	ldr	r3, [r7, #12]
24058940:	681b      	ldr	r3, [r3, #0]
24058942:	4a35      	ldr	r2, [pc, #212]	; (24058a18 <DMA_SetConfig+0x228>)
24058944:	4293      	cmp	r3, r2
24058946:	d03b      	beq.n	240589c0 <DMA_SetConfig+0x1d0>
24058948:	68fb      	ldr	r3, [r7, #12]
2405894a:	681b      	ldr	r3, [r3, #0]
2405894c:	4a33      	ldr	r2, [pc, #204]	; (24058a1c <DMA_SetConfig+0x22c>)
2405894e:	4293      	cmp	r3, r2
24058950:	d036      	beq.n	240589c0 <DMA_SetConfig+0x1d0>
24058952:	68fb      	ldr	r3, [r7, #12]
24058954:	681b      	ldr	r3, [r3, #0]
24058956:	4a32      	ldr	r2, [pc, #200]	; (24058a20 <DMA_SetConfig+0x230>)
24058958:	4293      	cmp	r3, r2
2405895a:	d031      	beq.n	240589c0 <DMA_SetConfig+0x1d0>
2405895c:	68fb      	ldr	r3, [r7, #12]
2405895e:	681b      	ldr	r3, [r3, #0]
24058960:	4a30      	ldr	r2, [pc, #192]	; (24058a24 <DMA_SetConfig+0x234>)
24058962:	4293      	cmp	r3, r2
24058964:	d02c      	beq.n	240589c0 <DMA_SetConfig+0x1d0>
24058966:	68fb      	ldr	r3, [r7, #12]
24058968:	681b      	ldr	r3, [r3, #0]
2405896a:	4a2f      	ldr	r2, [pc, #188]	; (24058a28 <DMA_SetConfig+0x238>)
2405896c:	4293      	cmp	r3, r2
2405896e:	d027      	beq.n	240589c0 <DMA_SetConfig+0x1d0>
24058970:	68fb      	ldr	r3, [r7, #12]
24058972:	681b      	ldr	r3, [r3, #0]
24058974:	4a2d      	ldr	r2, [pc, #180]	; (24058a2c <DMA_SetConfig+0x23c>)
24058976:	4293      	cmp	r3, r2
24058978:	d022      	beq.n	240589c0 <DMA_SetConfig+0x1d0>
2405897a:	68fb      	ldr	r3, [r7, #12]
2405897c:	681b      	ldr	r3, [r3, #0]
2405897e:	4a2c      	ldr	r2, [pc, #176]	; (24058a30 <DMA_SetConfig+0x240>)
24058980:	4293      	cmp	r3, r2
24058982:	d01d      	beq.n	240589c0 <DMA_SetConfig+0x1d0>
24058984:	68fb      	ldr	r3, [r7, #12]
24058986:	681b      	ldr	r3, [r3, #0]
24058988:	4a2a      	ldr	r2, [pc, #168]	; (24058a34 <DMA_SetConfig+0x244>)
2405898a:	4293      	cmp	r3, r2
2405898c:	d018      	beq.n	240589c0 <DMA_SetConfig+0x1d0>
2405898e:	68fb      	ldr	r3, [r7, #12]
24058990:	681b      	ldr	r3, [r3, #0]
24058992:	4a29      	ldr	r2, [pc, #164]	; (24058a38 <DMA_SetConfig+0x248>)
24058994:	4293      	cmp	r3, r2
24058996:	d013      	beq.n	240589c0 <DMA_SetConfig+0x1d0>
24058998:	68fb      	ldr	r3, [r7, #12]
2405899a:	681b      	ldr	r3, [r3, #0]
2405899c:	4a27      	ldr	r2, [pc, #156]	; (24058a3c <DMA_SetConfig+0x24c>)
2405899e:	4293      	cmp	r3, r2
240589a0:	d00e      	beq.n	240589c0 <DMA_SetConfig+0x1d0>
240589a2:	68fb      	ldr	r3, [r7, #12]
240589a4:	681b      	ldr	r3, [r3, #0]
240589a6:	4a26      	ldr	r2, [pc, #152]	; (24058a40 <DMA_SetConfig+0x250>)
240589a8:	4293      	cmp	r3, r2
240589aa:	d009      	beq.n	240589c0 <DMA_SetConfig+0x1d0>
240589ac:	68fb      	ldr	r3, [r7, #12]
240589ae:	681b      	ldr	r3, [r3, #0]
240589b0:	4a24      	ldr	r2, [pc, #144]	; (24058a44 <DMA_SetConfig+0x254>)
240589b2:	4293      	cmp	r3, r2
240589b4:	d004      	beq.n	240589c0 <DMA_SetConfig+0x1d0>
240589b6:	68fb      	ldr	r3, [r7, #12]
240589b8:	681b      	ldr	r3, [r3, #0]
240589ba:	4a23      	ldr	r2, [pc, #140]	; (24058a48 <DMA_SetConfig+0x258>)
240589bc:	4293      	cmp	r3, r2
240589be:	d101      	bne.n	240589c4 <DMA_SetConfig+0x1d4>
240589c0:	2301      	movs	r3, #1
240589c2:	e000      	b.n	240589c6 <DMA_SetConfig+0x1d6>
240589c4:	2300      	movs	r3, #0
240589c6:	2b00      	cmp	r3, #0
240589c8:	d059      	beq.n	24058a7e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
240589ca:	68fb      	ldr	r3, [r7, #12]
240589cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240589ce:	f003 031f 	and.w	r3, r3, #31
240589d2:	223f      	movs	r2, #63	; 0x3f
240589d4:	409a      	lsls	r2, r3
240589d6:	697b      	ldr	r3, [r7, #20]
240589d8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
240589da:	68fb      	ldr	r3, [r7, #12]
240589dc:	681b      	ldr	r3, [r3, #0]
240589de:	681a      	ldr	r2, [r3, #0]
240589e0:	68fb      	ldr	r3, [r7, #12]
240589e2:	681b      	ldr	r3, [r3, #0]
240589e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
240589e8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
240589ea:	68fb      	ldr	r3, [r7, #12]
240589ec:	681b      	ldr	r3, [r3, #0]
240589ee:	683a      	ldr	r2, [r7, #0]
240589f0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
240589f2:	68fb      	ldr	r3, [r7, #12]
240589f4:	689b      	ldr	r3, [r3, #8]
240589f6:	2b40      	cmp	r3, #64	; 0x40
240589f8:	d138      	bne.n	24058a6c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
240589fa:	68fb      	ldr	r3, [r7, #12]
240589fc:	681b      	ldr	r3, [r3, #0]
240589fe:	687a      	ldr	r2, [r7, #4]
24058a00:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
24058a02:	68fb      	ldr	r3, [r7, #12]
24058a04:	681b      	ldr	r3, [r3, #0]
24058a06:	68ba      	ldr	r2, [r7, #8]
24058a08:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
24058a0a:	e0ae      	b.n	24058b6a <DMA_SetConfig+0x37a>
24058a0c:	40020010 	.word	0x40020010
24058a10:	40020028 	.word	0x40020028
24058a14:	40020040 	.word	0x40020040
24058a18:	40020058 	.word	0x40020058
24058a1c:	40020070 	.word	0x40020070
24058a20:	40020088 	.word	0x40020088
24058a24:	400200a0 	.word	0x400200a0
24058a28:	400200b8 	.word	0x400200b8
24058a2c:	40020410 	.word	0x40020410
24058a30:	40020428 	.word	0x40020428
24058a34:	40020440 	.word	0x40020440
24058a38:	40020458 	.word	0x40020458
24058a3c:	40020470 	.word	0x40020470
24058a40:	40020488 	.word	0x40020488
24058a44:	400204a0 	.word	0x400204a0
24058a48:	400204b8 	.word	0x400204b8
24058a4c:	58025408 	.word	0x58025408
24058a50:	5802541c 	.word	0x5802541c
24058a54:	58025430 	.word	0x58025430
24058a58:	58025444 	.word	0x58025444
24058a5c:	58025458 	.word	0x58025458
24058a60:	5802546c 	.word	0x5802546c
24058a64:	58025480 	.word	0x58025480
24058a68:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
24058a6c:	68fb      	ldr	r3, [r7, #12]
24058a6e:	681b      	ldr	r3, [r3, #0]
24058a70:	68ba      	ldr	r2, [r7, #8]
24058a72:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
24058a74:	68fb      	ldr	r3, [r7, #12]
24058a76:	681b      	ldr	r3, [r3, #0]
24058a78:	687a      	ldr	r2, [r7, #4]
24058a7a:	60da      	str	r2, [r3, #12]
}
24058a7c:	e075      	b.n	24058b6a <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
24058a7e:	68fb      	ldr	r3, [r7, #12]
24058a80:	681b      	ldr	r3, [r3, #0]
24058a82:	4a3d      	ldr	r2, [pc, #244]	; (24058b78 <DMA_SetConfig+0x388>)
24058a84:	4293      	cmp	r3, r2
24058a86:	d04a      	beq.n	24058b1e <DMA_SetConfig+0x32e>
24058a88:	68fb      	ldr	r3, [r7, #12]
24058a8a:	681b      	ldr	r3, [r3, #0]
24058a8c:	4a3b      	ldr	r2, [pc, #236]	; (24058b7c <DMA_SetConfig+0x38c>)
24058a8e:	4293      	cmp	r3, r2
24058a90:	d045      	beq.n	24058b1e <DMA_SetConfig+0x32e>
24058a92:	68fb      	ldr	r3, [r7, #12]
24058a94:	681b      	ldr	r3, [r3, #0]
24058a96:	4a3a      	ldr	r2, [pc, #232]	; (24058b80 <DMA_SetConfig+0x390>)
24058a98:	4293      	cmp	r3, r2
24058a9a:	d040      	beq.n	24058b1e <DMA_SetConfig+0x32e>
24058a9c:	68fb      	ldr	r3, [r7, #12]
24058a9e:	681b      	ldr	r3, [r3, #0]
24058aa0:	4a38      	ldr	r2, [pc, #224]	; (24058b84 <DMA_SetConfig+0x394>)
24058aa2:	4293      	cmp	r3, r2
24058aa4:	d03b      	beq.n	24058b1e <DMA_SetConfig+0x32e>
24058aa6:	68fb      	ldr	r3, [r7, #12]
24058aa8:	681b      	ldr	r3, [r3, #0]
24058aaa:	4a37      	ldr	r2, [pc, #220]	; (24058b88 <DMA_SetConfig+0x398>)
24058aac:	4293      	cmp	r3, r2
24058aae:	d036      	beq.n	24058b1e <DMA_SetConfig+0x32e>
24058ab0:	68fb      	ldr	r3, [r7, #12]
24058ab2:	681b      	ldr	r3, [r3, #0]
24058ab4:	4a35      	ldr	r2, [pc, #212]	; (24058b8c <DMA_SetConfig+0x39c>)
24058ab6:	4293      	cmp	r3, r2
24058ab8:	d031      	beq.n	24058b1e <DMA_SetConfig+0x32e>
24058aba:	68fb      	ldr	r3, [r7, #12]
24058abc:	681b      	ldr	r3, [r3, #0]
24058abe:	4a34      	ldr	r2, [pc, #208]	; (24058b90 <DMA_SetConfig+0x3a0>)
24058ac0:	4293      	cmp	r3, r2
24058ac2:	d02c      	beq.n	24058b1e <DMA_SetConfig+0x32e>
24058ac4:	68fb      	ldr	r3, [r7, #12]
24058ac6:	681b      	ldr	r3, [r3, #0]
24058ac8:	4a32      	ldr	r2, [pc, #200]	; (24058b94 <DMA_SetConfig+0x3a4>)
24058aca:	4293      	cmp	r3, r2
24058acc:	d027      	beq.n	24058b1e <DMA_SetConfig+0x32e>
24058ace:	68fb      	ldr	r3, [r7, #12]
24058ad0:	681b      	ldr	r3, [r3, #0]
24058ad2:	4a31      	ldr	r2, [pc, #196]	; (24058b98 <DMA_SetConfig+0x3a8>)
24058ad4:	4293      	cmp	r3, r2
24058ad6:	d022      	beq.n	24058b1e <DMA_SetConfig+0x32e>
24058ad8:	68fb      	ldr	r3, [r7, #12]
24058ada:	681b      	ldr	r3, [r3, #0]
24058adc:	4a2f      	ldr	r2, [pc, #188]	; (24058b9c <DMA_SetConfig+0x3ac>)
24058ade:	4293      	cmp	r3, r2
24058ae0:	d01d      	beq.n	24058b1e <DMA_SetConfig+0x32e>
24058ae2:	68fb      	ldr	r3, [r7, #12]
24058ae4:	681b      	ldr	r3, [r3, #0]
24058ae6:	4a2e      	ldr	r2, [pc, #184]	; (24058ba0 <DMA_SetConfig+0x3b0>)
24058ae8:	4293      	cmp	r3, r2
24058aea:	d018      	beq.n	24058b1e <DMA_SetConfig+0x32e>
24058aec:	68fb      	ldr	r3, [r7, #12]
24058aee:	681b      	ldr	r3, [r3, #0]
24058af0:	4a2c      	ldr	r2, [pc, #176]	; (24058ba4 <DMA_SetConfig+0x3b4>)
24058af2:	4293      	cmp	r3, r2
24058af4:	d013      	beq.n	24058b1e <DMA_SetConfig+0x32e>
24058af6:	68fb      	ldr	r3, [r7, #12]
24058af8:	681b      	ldr	r3, [r3, #0]
24058afa:	4a2b      	ldr	r2, [pc, #172]	; (24058ba8 <DMA_SetConfig+0x3b8>)
24058afc:	4293      	cmp	r3, r2
24058afe:	d00e      	beq.n	24058b1e <DMA_SetConfig+0x32e>
24058b00:	68fb      	ldr	r3, [r7, #12]
24058b02:	681b      	ldr	r3, [r3, #0]
24058b04:	4a29      	ldr	r2, [pc, #164]	; (24058bac <DMA_SetConfig+0x3bc>)
24058b06:	4293      	cmp	r3, r2
24058b08:	d009      	beq.n	24058b1e <DMA_SetConfig+0x32e>
24058b0a:	68fb      	ldr	r3, [r7, #12]
24058b0c:	681b      	ldr	r3, [r3, #0]
24058b0e:	4a28      	ldr	r2, [pc, #160]	; (24058bb0 <DMA_SetConfig+0x3c0>)
24058b10:	4293      	cmp	r3, r2
24058b12:	d004      	beq.n	24058b1e <DMA_SetConfig+0x32e>
24058b14:	68fb      	ldr	r3, [r7, #12]
24058b16:	681b      	ldr	r3, [r3, #0]
24058b18:	4a26      	ldr	r2, [pc, #152]	; (24058bb4 <DMA_SetConfig+0x3c4>)
24058b1a:	4293      	cmp	r3, r2
24058b1c:	d101      	bne.n	24058b22 <DMA_SetConfig+0x332>
24058b1e:	2301      	movs	r3, #1
24058b20:	e000      	b.n	24058b24 <DMA_SetConfig+0x334>
24058b22:	2300      	movs	r3, #0
24058b24:	2b00      	cmp	r3, #0
24058b26:	d020      	beq.n	24058b6a <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
24058b28:	68fb      	ldr	r3, [r7, #12]
24058b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24058b2c:	f003 031f 	and.w	r3, r3, #31
24058b30:	2201      	movs	r2, #1
24058b32:	409a      	lsls	r2, r3
24058b34:	693b      	ldr	r3, [r7, #16]
24058b36:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
24058b38:	68fb      	ldr	r3, [r7, #12]
24058b3a:	681b      	ldr	r3, [r3, #0]
24058b3c:	683a      	ldr	r2, [r7, #0]
24058b3e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
24058b40:	68fb      	ldr	r3, [r7, #12]
24058b42:	689b      	ldr	r3, [r3, #8]
24058b44:	2b40      	cmp	r3, #64	; 0x40
24058b46:	d108      	bne.n	24058b5a <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
24058b48:	68fb      	ldr	r3, [r7, #12]
24058b4a:	681b      	ldr	r3, [r3, #0]
24058b4c:	687a      	ldr	r2, [r7, #4]
24058b4e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
24058b50:	68fb      	ldr	r3, [r7, #12]
24058b52:	681b      	ldr	r3, [r3, #0]
24058b54:	68ba      	ldr	r2, [r7, #8]
24058b56:	60da      	str	r2, [r3, #12]
}
24058b58:	e007      	b.n	24058b6a <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
24058b5a:	68fb      	ldr	r3, [r7, #12]
24058b5c:	681b      	ldr	r3, [r3, #0]
24058b5e:	68ba      	ldr	r2, [r7, #8]
24058b60:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
24058b62:	68fb      	ldr	r3, [r7, #12]
24058b64:	681b      	ldr	r3, [r3, #0]
24058b66:	687a      	ldr	r2, [r7, #4]
24058b68:	60da      	str	r2, [r3, #12]
}
24058b6a:	bf00      	nop
24058b6c:	371c      	adds	r7, #28
24058b6e:	46bd      	mov	sp, r7
24058b70:	f85d 7b04 	ldr.w	r7, [sp], #4
24058b74:	4770      	bx	lr
24058b76:	bf00      	nop
24058b78:	48022c08 	.word	0x48022c08
24058b7c:	48022c1c 	.word	0x48022c1c
24058b80:	48022c30 	.word	0x48022c30
24058b84:	48022c44 	.word	0x48022c44
24058b88:	48022c58 	.word	0x48022c58
24058b8c:	48022c6c 	.word	0x48022c6c
24058b90:	48022c80 	.word	0x48022c80
24058b94:	48022c94 	.word	0x48022c94
24058b98:	58025408 	.word	0x58025408
24058b9c:	5802541c 	.word	0x5802541c
24058ba0:	58025430 	.word	0x58025430
24058ba4:	58025444 	.word	0x58025444
24058ba8:	58025458 	.word	0x58025458
24058bac:	5802546c 	.word	0x5802546c
24058bb0:	58025480 	.word	0x58025480
24058bb4:	58025494 	.word	0x58025494

24058bb8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
24058bb8:	b480      	push	{r7}
24058bba:	b085      	sub	sp, #20
24058bbc:	af00      	add	r7, sp, #0
24058bbe:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24058bc0:	687b      	ldr	r3, [r7, #4]
24058bc2:	681b      	ldr	r3, [r3, #0]
24058bc4:	4a42      	ldr	r2, [pc, #264]	; (24058cd0 <DMA_CalcBaseAndBitshift+0x118>)
24058bc6:	4293      	cmp	r3, r2
24058bc8:	d04a      	beq.n	24058c60 <DMA_CalcBaseAndBitshift+0xa8>
24058bca:	687b      	ldr	r3, [r7, #4]
24058bcc:	681b      	ldr	r3, [r3, #0]
24058bce:	4a41      	ldr	r2, [pc, #260]	; (24058cd4 <DMA_CalcBaseAndBitshift+0x11c>)
24058bd0:	4293      	cmp	r3, r2
24058bd2:	d045      	beq.n	24058c60 <DMA_CalcBaseAndBitshift+0xa8>
24058bd4:	687b      	ldr	r3, [r7, #4]
24058bd6:	681b      	ldr	r3, [r3, #0]
24058bd8:	4a3f      	ldr	r2, [pc, #252]	; (24058cd8 <DMA_CalcBaseAndBitshift+0x120>)
24058bda:	4293      	cmp	r3, r2
24058bdc:	d040      	beq.n	24058c60 <DMA_CalcBaseAndBitshift+0xa8>
24058bde:	687b      	ldr	r3, [r7, #4]
24058be0:	681b      	ldr	r3, [r3, #0]
24058be2:	4a3e      	ldr	r2, [pc, #248]	; (24058cdc <DMA_CalcBaseAndBitshift+0x124>)
24058be4:	4293      	cmp	r3, r2
24058be6:	d03b      	beq.n	24058c60 <DMA_CalcBaseAndBitshift+0xa8>
24058be8:	687b      	ldr	r3, [r7, #4]
24058bea:	681b      	ldr	r3, [r3, #0]
24058bec:	4a3c      	ldr	r2, [pc, #240]	; (24058ce0 <DMA_CalcBaseAndBitshift+0x128>)
24058bee:	4293      	cmp	r3, r2
24058bf0:	d036      	beq.n	24058c60 <DMA_CalcBaseAndBitshift+0xa8>
24058bf2:	687b      	ldr	r3, [r7, #4]
24058bf4:	681b      	ldr	r3, [r3, #0]
24058bf6:	4a3b      	ldr	r2, [pc, #236]	; (24058ce4 <DMA_CalcBaseAndBitshift+0x12c>)
24058bf8:	4293      	cmp	r3, r2
24058bfa:	d031      	beq.n	24058c60 <DMA_CalcBaseAndBitshift+0xa8>
24058bfc:	687b      	ldr	r3, [r7, #4]
24058bfe:	681b      	ldr	r3, [r3, #0]
24058c00:	4a39      	ldr	r2, [pc, #228]	; (24058ce8 <DMA_CalcBaseAndBitshift+0x130>)
24058c02:	4293      	cmp	r3, r2
24058c04:	d02c      	beq.n	24058c60 <DMA_CalcBaseAndBitshift+0xa8>
24058c06:	687b      	ldr	r3, [r7, #4]
24058c08:	681b      	ldr	r3, [r3, #0]
24058c0a:	4a38      	ldr	r2, [pc, #224]	; (24058cec <DMA_CalcBaseAndBitshift+0x134>)
24058c0c:	4293      	cmp	r3, r2
24058c0e:	d027      	beq.n	24058c60 <DMA_CalcBaseAndBitshift+0xa8>
24058c10:	687b      	ldr	r3, [r7, #4]
24058c12:	681b      	ldr	r3, [r3, #0]
24058c14:	4a36      	ldr	r2, [pc, #216]	; (24058cf0 <DMA_CalcBaseAndBitshift+0x138>)
24058c16:	4293      	cmp	r3, r2
24058c18:	d022      	beq.n	24058c60 <DMA_CalcBaseAndBitshift+0xa8>
24058c1a:	687b      	ldr	r3, [r7, #4]
24058c1c:	681b      	ldr	r3, [r3, #0]
24058c1e:	4a35      	ldr	r2, [pc, #212]	; (24058cf4 <DMA_CalcBaseAndBitshift+0x13c>)
24058c20:	4293      	cmp	r3, r2
24058c22:	d01d      	beq.n	24058c60 <DMA_CalcBaseAndBitshift+0xa8>
24058c24:	687b      	ldr	r3, [r7, #4]
24058c26:	681b      	ldr	r3, [r3, #0]
24058c28:	4a33      	ldr	r2, [pc, #204]	; (24058cf8 <DMA_CalcBaseAndBitshift+0x140>)
24058c2a:	4293      	cmp	r3, r2
24058c2c:	d018      	beq.n	24058c60 <DMA_CalcBaseAndBitshift+0xa8>
24058c2e:	687b      	ldr	r3, [r7, #4]
24058c30:	681b      	ldr	r3, [r3, #0]
24058c32:	4a32      	ldr	r2, [pc, #200]	; (24058cfc <DMA_CalcBaseAndBitshift+0x144>)
24058c34:	4293      	cmp	r3, r2
24058c36:	d013      	beq.n	24058c60 <DMA_CalcBaseAndBitshift+0xa8>
24058c38:	687b      	ldr	r3, [r7, #4]
24058c3a:	681b      	ldr	r3, [r3, #0]
24058c3c:	4a30      	ldr	r2, [pc, #192]	; (24058d00 <DMA_CalcBaseAndBitshift+0x148>)
24058c3e:	4293      	cmp	r3, r2
24058c40:	d00e      	beq.n	24058c60 <DMA_CalcBaseAndBitshift+0xa8>
24058c42:	687b      	ldr	r3, [r7, #4]
24058c44:	681b      	ldr	r3, [r3, #0]
24058c46:	4a2f      	ldr	r2, [pc, #188]	; (24058d04 <DMA_CalcBaseAndBitshift+0x14c>)
24058c48:	4293      	cmp	r3, r2
24058c4a:	d009      	beq.n	24058c60 <DMA_CalcBaseAndBitshift+0xa8>
24058c4c:	687b      	ldr	r3, [r7, #4]
24058c4e:	681b      	ldr	r3, [r3, #0]
24058c50:	4a2d      	ldr	r2, [pc, #180]	; (24058d08 <DMA_CalcBaseAndBitshift+0x150>)
24058c52:	4293      	cmp	r3, r2
24058c54:	d004      	beq.n	24058c60 <DMA_CalcBaseAndBitshift+0xa8>
24058c56:	687b      	ldr	r3, [r7, #4]
24058c58:	681b      	ldr	r3, [r3, #0]
24058c5a:	4a2c      	ldr	r2, [pc, #176]	; (24058d0c <DMA_CalcBaseAndBitshift+0x154>)
24058c5c:	4293      	cmp	r3, r2
24058c5e:	d101      	bne.n	24058c64 <DMA_CalcBaseAndBitshift+0xac>
24058c60:	2301      	movs	r3, #1
24058c62:	e000      	b.n	24058c66 <DMA_CalcBaseAndBitshift+0xae>
24058c64:	2300      	movs	r3, #0
24058c66:	2b00      	cmp	r3, #0
24058c68:	d024      	beq.n	24058cb4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24058c6a:	687b      	ldr	r3, [r7, #4]
24058c6c:	681b      	ldr	r3, [r3, #0]
24058c6e:	b2db      	uxtb	r3, r3
24058c70:	3b10      	subs	r3, #16
24058c72:	4a27      	ldr	r2, [pc, #156]	; (24058d10 <DMA_CalcBaseAndBitshift+0x158>)
24058c74:	fba2 2303 	umull	r2, r3, r2, r3
24058c78:	091b      	lsrs	r3, r3, #4
24058c7a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
24058c7c:	68fb      	ldr	r3, [r7, #12]
24058c7e:	f003 0307 	and.w	r3, r3, #7
24058c82:	4a24      	ldr	r2, [pc, #144]	; (24058d14 <DMA_CalcBaseAndBitshift+0x15c>)
24058c84:	5cd3      	ldrb	r3, [r2, r3]
24058c86:	461a      	mov	r2, r3
24058c88:	687b      	ldr	r3, [r7, #4]
24058c8a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
24058c8c:	68fb      	ldr	r3, [r7, #12]
24058c8e:	2b03      	cmp	r3, #3
24058c90:	d908      	bls.n	24058ca4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
24058c92:	687b      	ldr	r3, [r7, #4]
24058c94:	681b      	ldr	r3, [r3, #0]
24058c96:	461a      	mov	r2, r3
24058c98:	4b1f      	ldr	r3, [pc, #124]	; (24058d18 <DMA_CalcBaseAndBitshift+0x160>)
24058c9a:	4013      	ands	r3, r2
24058c9c:	1d1a      	adds	r2, r3, #4
24058c9e:	687b      	ldr	r3, [r7, #4]
24058ca0:	659a      	str	r2, [r3, #88]	; 0x58
24058ca2:	e00d      	b.n	24058cc0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
24058ca4:	687b      	ldr	r3, [r7, #4]
24058ca6:	681b      	ldr	r3, [r3, #0]
24058ca8:	461a      	mov	r2, r3
24058caa:	4b1b      	ldr	r3, [pc, #108]	; (24058d18 <DMA_CalcBaseAndBitshift+0x160>)
24058cac:	4013      	ands	r3, r2
24058cae:	687a      	ldr	r2, [r7, #4]
24058cb0:	6593      	str	r3, [r2, #88]	; 0x58
24058cb2:	e005      	b.n	24058cc0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
24058cb4:	687b      	ldr	r3, [r7, #4]
24058cb6:	681b      	ldr	r3, [r3, #0]
24058cb8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
24058cbc:	687b      	ldr	r3, [r7, #4]
24058cbe:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
24058cc0:	687b      	ldr	r3, [r7, #4]
24058cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
24058cc4:	4618      	mov	r0, r3
24058cc6:	3714      	adds	r7, #20
24058cc8:	46bd      	mov	sp, r7
24058cca:	f85d 7b04 	ldr.w	r7, [sp], #4
24058cce:	4770      	bx	lr
24058cd0:	40020010 	.word	0x40020010
24058cd4:	40020028 	.word	0x40020028
24058cd8:	40020040 	.word	0x40020040
24058cdc:	40020058 	.word	0x40020058
24058ce0:	40020070 	.word	0x40020070
24058ce4:	40020088 	.word	0x40020088
24058ce8:	400200a0 	.word	0x400200a0
24058cec:	400200b8 	.word	0x400200b8
24058cf0:	40020410 	.word	0x40020410
24058cf4:	40020428 	.word	0x40020428
24058cf8:	40020440 	.word	0x40020440
24058cfc:	40020458 	.word	0x40020458
24058d00:	40020470 	.word	0x40020470
24058d04:	40020488 	.word	0x40020488
24058d08:	400204a0 	.word	0x400204a0
24058d0c:	400204b8 	.word	0x400204b8
24058d10:	aaaaaaab 	.word	0xaaaaaaab
24058d14:	24064208 	.word	0x24064208
24058d18:	fffffc00 	.word	0xfffffc00

24058d1c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
24058d1c:	b480      	push	{r7}
24058d1e:	b085      	sub	sp, #20
24058d20:	af00      	add	r7, sp, #0
24058d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
24058d24:	2300      	movs	r3, #0
24058d26:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
24058d28:	687b      	ldr	r3, [r7, #4]
24058d2a:	699b      	ldr	r3, [r3, #24]
24058d2c:	2b00      	cmp	r3, #0
24058d2e:	d120      	bne.n	24058d72 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
24058d30:	687b      	ldr	r3, [r7, #4]
24058d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24058d34:	2b03      	cmp	r3, #3
24058d36:	d858      	bhi.n	24058dea <DMA_CheckFifoParam+0xce>
24058d38:	a201      	add	r2, pc, #4	; (adr r2, 24058d40 <DMA_CheckFifoParam+0x24>)
24058d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24058d3e:	bf00      	nop
24058d40:	24058d51 	.word	0x24058d51
24058d44:	24058d63 	.word	0x24058d63
24058d48:	24058d51 	.word	0x24058d51
24058d4c:	24058deb 	.word	0x24058deb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
24058d50:	687b      	ldr	r3, [r7, #4]
24058d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24058d54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
24058d58:	2b00      	cmp	r3, #0
24058d5a:	d048      	beq.n	24058dee <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
24058d5c:	2301      	movs	r3, #1
24058d5e:	73fb      	strb	r3, [r7, #15]
        }
        break;
24058d60:	e045      	b.n	24058dee <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
24058d62:	687b      	ldr	r3, [r7, #4]
24058d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24058d66:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
24058d6a:	d142      	bne.n	24058df2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
24058d6c:	2301      	movs	r3, #1
24058d6e:	73fb      	strb	r3, [r7, #15]
        }
        break;
24058d70:	e03f      	b.n	24058df2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
24058d72:	687b      	ldr	r3, [r7, #4]
24058d74:	699b      	ldr	r3, [r3, #24]
24058d76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24058d7a:	d123      	bne.n	24058dc4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
24058d7c:	687b      	ldr	r3, [r7, #4]
24058d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24058d80:	2b03      	cmp	r3, #3
24058d82:	d838      	bhi.n	24058df6 <DMA_CheckFifoParam+0xda>
24058d84:	a201      	add	r2, pc, #4	; (adr r2, 24058d8c <DMA_CheckFifoParam+0x70>)
24058d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24058d8a:	bf00      	nop
24058d8c:	24058d9d 	.word	0x24058d9d
24058d90:	24058da3 	.word	0x24058da3
24058d94:	24058d9d 	.word	0x24058d9d
24058d98:	24058db5 	.word	0x24058db5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
24058d9c:	2301      	movs	r3, #1
24058d9e:	73fb      	strb	r3, [r7, #15]
        break;
24058da0:	e030      	b.n	24058e04 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
24058da2:	687b      	ldr	r3, [r7, #4]
24058da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24058da6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
24058daa:	2b00      	cmp	r3, #0
24058dac:	d025      	beq.n	24058dfa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
24058dae:	2301      	movs	r3, #1
24058db0:	73fb      	strb	r3, [r7, #15]
        }
        break;
24058db2:	e022      	b.n	24058dfa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
24058db4:	687b      	ldr	r3, [r7, #4]
24058db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24058db8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
24058dbc:	d11f      	bne.n	24058dfe <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
24058dbe:	2301      	movs	r3, #1
24058dc0:	73fb      	strb	r3, [r7, #15]
        }
        break;
24058dc2:	e01c      	b.n	24058dfe <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
24058dc4:	687b      	ldr	r3, [r7, #4]
24058dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24058dc8:	2b02      	cmp	r3, #2
24058dca:	d902      	bls.n	24058dd2 <DMA_CheckFifoParam+0xb6>
24058dcc:	2b03      	cmp	r3, #3
24058dce:	d003      	beq.n	24058dd8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
24058dd0:	e018      	b.n	24058e04 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
24058dd2:	2301      	movs	r3, #1
24058dd4:	73fb      	strb	r3, [r7, #15]
        break;
24058dd6:	e015      	b.n	24058e04 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
24058dd8:	687b      	ldr	r3, [r7, #4]
24058dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24058ddc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
24058de0:	2b00      	cmp	r3, #0
24058de2:	d00e      	beq.n	24058e02 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
24058de4:	2301      	movs	r3, #1
24058de6:	73fb      	strb	r3, [r7, #15]
    break;
24058de8:	e00b      	b.n	24058e02 <DMA_CheckFifoParam+0xe6>
        break;
24058dea:	bf00      	nop
24058dec:	e00a      	b.n	24058e04 <DMA_CheckFifoParam+0xe8>
        break;
24058dee:	bf00      	nop
24058df0:	e008      	b.n	24058e04 <DMA_CheckFifoParam+0xe8>
        break;
24058df2:	bf00      	nop
24058df4:	e006      	b.n	24058e04 <DMA_CheckFifoParam+0xe8>
        break;
24058df6:	bf00      	nop
24058df8:	e004      	b.n	24058e04 <DMA_CheckFifoParam+0xe8>
        break;
24058dfa:	bf00      	nop
24058dfc:	e002      	b.n	24058e04 <DMA_CheckFifoParam+0xe8>
        break;
24058dfe:	bf00      	nop
24058e00:	e000      	b.n	24058e04 <DMA_CheckFifoParam+0xe8>
    break;
24058e02:	bf00      	nop
    }
  }

  return status;
24058e04:	7bfb      	ldrb	r3, [r7, #15]
}
24058e06:	4618      	mov	r0, r3
24058e08:	3714      	adds	r7, #20
24058e0a:	46bd      	mov	sp, r7
24058e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
24058e10:	4770      	bx	lr
24058e12:	bf00      	nop

24058e14 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
24058e14:	b480      	push	{r7}
24058e16:	b085      	sub	sp, #20
24058e18:	af00      	add	r7, sp, #0
24058e1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
24058e1c:	687b      	ldr	r3, [r7, #4]
24058e1e:	681b      	ldr	r3, [r3, #0]
24058e20:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
24058e22:	687b      	ldr	r3, [r7, #4]
24058e24:	681b      	ldr	r3, [r3, #0]
24058e26:	4a38      	ldr	r2, [pc, #224]	; (24058f08 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
24058e28:	4293      	cmp	r3, r2
24058e2a:	d022      	beq.n	24058e72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
24058e2c:	687b      	ldr	r3, [r7, #4]
24058e2e:	681b      	ldr	r3, [r3, #0]
24058e30:	4a36      	ldr	r2, [pc, #216]	; (24058f0c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
24058e32:	4293      	cmp	r3, r2
24058e34:	d01d      	beq.n	24058e72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
24058e36:	687b      	ldr	r3, [r7, #4]
24058e38:	681b      	ldr	r3, [r3, #0]
24058e3a:	4a35      	ldr	r2, [pc, #212]	; (24058f10 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
24058e3c:	4293      	cmp	r3, r2
24058e3e:	d018      	beq.n	24058e72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
24058e40:	687b      	ldr	r3, [r7, #4]
24058e42:	681b      	ldr	r3, [r3, #0]
24058e44:	4a33      	ldr	r2, [pc, #204]	; (24058f14 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
24058e46:	4293      	cmp	r3, r2
24058e48:	d013      	beq.n	24058e72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
24058e4a:	687b      	ldr	r3, [r7, #4]
24058e4c:	681b      	ldr	r3, [r3, #0]
24058e4e:	4a32      	ldr	r2, [pc, #200]	; (24058f18 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
24058e50:	4293      	cmp	r3, r2
24058e52:	d00e      	beq.n	24058e72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
24058e54:	687b      	ldr	r3, [r7, #4]
24058e56:	681b      	ldr	r3, [r3, #0]
24058e58:	4a30      	ldr	r2, [pc, #192]	; (24058f1c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
24058e5a:	4293      	cmp	r3, r2
24058e5c:	d009      	beq.n	24058e72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
24058e5e:	687b      	ldr	r3, [r7, #4]
24058e60:	681b      	ldr	r3, [r3, #0]
24058e62:	4a2f      	ldr	r2, [pc, #188]	; (24058f20 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
24058e64:	4293      	cmp	r3, r2
24058e66:	d004      	beq.n	24058e72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
24058e68:	687b      	ldr	r3, [r7, #4]
24058e6a:	681b      	ldr	r3, [r3, #0]
24058e6c:	4a2d      	ldr	r2, [pc, #180]	; (24058f24 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
24058e6e:	4293      	cmp	r3, r2
24058e70:	d101      	bne.n	24058e76 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
24058e72:	2301      	movs	r3, #1
24058e74:	e000      	b.n	24058e78 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
24058e76:	2300      	movs	r3, #0
24058e78:	2b00      	cmp	r3, #0
24058e7a:	d01a      	beq.n	24058eb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
24058e7c:	687b      	ldr	r3, [r7, #4]
24058e7e:	681b      	ldr	r3, [r3, #0]
24058e80:	b2db      	uxtb	r3, r3
24058e82:	3b08      	subs	r3, #8
24058e84:	4a28      	ldr	r2, [pc, #160]	; (24058f28 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
24058e86:	fba2 2303 	umull	r2, r3, r2, r3
24058e8a:	091b      	lsrs	r3, r3, #4
24058e8c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
24058e8e:	68fa      	ldr	r2, [r7, #12]
24058e90:	4b26      	ldr	r3, [pc, #152]	; (24058f2c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
24058e92:	4413      	add	r3, r2
24058e94:	009b      	lsls	r3, r3, #2
24058e96:	461a      	mov	r2, r3
24058e98:	687b      	ldr	r3, [r7, #4]
24058e9a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
24058e9c:	687b      	ldr	r3, [r7, #4]
24058e9e:	4a24      	ldr	r2, [pc, #144]	; (24058f30 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
24058ea0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24058ea2:	68fb      	ldr	r3, [r7, #12]
24058ea4:	f003 031f 	and.w	r3, r3, #31
24058ea8:	2201      	movs	r2, #1
24058eaa:	409a      	lsls	r2, r3
24058eac:	687b      	ldr	r3, [r7, #4]
24058eae:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
24058eb0:	e024      	b.n	24058efc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24058eb2:	687b      	ldr	r3, [r7, #4]
24058eb4:	681b      	ldr	r3, [r3, #0]
24058eb6:	b2db      	uxtb	r3, r3
24058eb8:	3b10      	subs	r3, #16
24058eba:	4a1e      	ldr	r2, [pc, #120]	; (24058f34 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
24058ebc:	fba2 2303 	umull	r2, r3, r2, r3
24058ec0:	091b      	lsrs	r3, r3, #4
24058ec2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
24058ec4:	68bb      	ldr	r3, [r7, #8]
24058ec6:	4a1c      	ldr	r2, [pc, #112]	; (24058f38 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
24058ec8:	4293      	cmp	r3, r2
24058eca:	d806      	bhi.n	24058eda <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
24058ecc:	68bb      	ldr	r3, [r7, #8]
24058ece:	4a1b      	ldr	r2, [pc, #108]	; (24058f3c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
24058ed0:	4293      	cmp	r3, r2
24058ed2:	d902      	bls.n	24058eda <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
24058ed4:	68fb      	ldr	r3, [r7, #12]
24058ed6:	3308      	adds	r3, #8
24058ed8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
24058eda:	68fa      	ldr	r2, [r7, #12]
24058edc:	4b18      	ldr	r3, [pc, #96]	; (24058f40 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
24058ede:	4413      	add	r3, r2
24058ee0:	009b      	lsls	r3, r3, #2
24058ee2:	461a      	mov	r2, r3
24058ee4:	687b      	ldr	r3, [r7, #4]
24058ee6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
24058ee8:	687b      	ldr	r3, [r7, #4]
24058eea:	4a16      	ldr	r2, [pc, #88]	; (24058f44 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
24058eec:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24058eee:	68fb      	ldr	r3, [r7, #12]
24058ef0:	f003 031f 	and.w	r3, r3, #31
24058ef4:	2201      	movs	r2, #1
24058ef6:	409a      	lsls	r2, r3
24058ef8:	687b      	ldr	r3, [r7, #4]
24058efa:	669a      	str	r2, [r3, #104]	; 0x68
}
24058efc:	bf00      	nop
24058efe:	3714      	adds	r7, #20
24058f00:	46bd      	mov	sp, r7
24058f02:	f85d 7b04 	ldr.w	r7, [sp], #4
24058f06:	4770      	bx	lr
24058f08:	58025408 	.word	0x58025408
24058f0c:	5802541c 	.word	0x5802541c
24058f10:	58025430 	.word	0x58025430
24058f14:	58025444 	.word	0x58025444
24058f18:	58025458 	.word	0x58025458
24058f1c:	5802546c 	.word	0x5802546c
24058f20:	58025480 	.word	0x58025480
24058f24:	58025494 	.word	0x58025494
24058f28:	cccccccd 	.word	0xcccccccd
24058f2c:	16009600 	.word	0x16009600
24058f30:	58025880 	.word	0x58025880
24058f34:	aaaaaaab 	.word	0xaaaaaaab
24058f38:	400204b8 	.word	0x400204b8
24058f3c:	4002040f 	.word	0x4002040f
24058f40:	10008200 	.word	0x10008200
24058f44:	40020880 	.word	0x40020880

24058f48 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
24058f48:	b480      	push	{r7}
24058f4a:	b085      	sub	sp, #20
24058f4c:	af00      	add	r7, sp, #0
24058f4e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
24058f50:	687b      	ldr	r3, [r7, #4]
24058f52:	685b      	ldr	r3, [r3, #4]
24058f54:	b2db      	uxtb	r3, r3
24058f56:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
24058f58:	68fb      	ldr	r3, [r7, #12]
24058f5a:	2b00      	cmp	r3, #0
24058f5c:	d04a      	beq.n	24058ff4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
24058f5e:	68fb      	ldr	r3, [r7, #12]
24058f60:	2b08      	cmp	r3, #8
24058f62:	d847      	bhi.n	24058ff4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
24058f64:	687b      	ldr	r3, [r7, #4]
24058f66:	681b      	ldr	r3, [r3, #0]
24058f68:	4a25      	ldr	r2, [pc, #148]	; (24059000 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
24058f6a:	4293      	cmp	r3, r2
24058f6c:	d022      	beq.n	24058fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
24058f6e:	687b      	ldr	r3, [r7, #4]
24058f70:	681b      	ldr	r3, [r3, #0]
24058f72:	4a24      	ldr	r2, [pc, #144]	; (24059004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
24058f74:	4293      	cmp	r3, r2
24058f76:	d01d      	beq.n	24058fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
24058f78:	687b      	ldr	r3, [r7, #4]
24058f7a:	681b      	ldr	r3, [r3, #0]
24058f7c:	4a22      	ldr	r2, [pc, #136]	; (24059008 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
24058f7e:	4293      	cmp	r3, r2
24058f80:	d018      	beq.n	24058fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
24058f82:	687b      	ldr	r3, [r7, #4]
24058f84:	681b      	ldr	r3, [r3, #0]
24058f86:	4a21      	ldr	r2, [pc, #132]	; (2405900c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
24058f88:	4293      	cmp	r3, r2
24058f8a:	d013      	beq.n	24058fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
24058f8c:	687b      	ldr	r3, [r7, #4]
24058f8e:	681b      	ldr	r3, [r3, #0]
24058f90:	4a1f      	ldr	r2, [pc, #124]	; (24059010 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
24058f92:	4293      	cmp	r3, r2
24058f94:	d00e      	beq.n	24058fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
24058f96:	687b      	ldr	r3, [r7, #4]
24058f98:	681b      	ldr	r3, [r3, #0]
24058f9a:	4a1e      	ldr	r2, [pc, #120]	; (24059014 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
24058f9c:	4293      	cmp	r3, r2
24058f9e:	d009      	beq.n	24058fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
24058fa0:	687b      	ldr	r3, [r7, #4]
24058fa2:	681b      	ldr	r3, [r3, #0]
24058fa4:	4a1c      	ldr	r2, [pc, #112]	; (24059018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
24058fa6:	4293      	cmp	r3, r2
24058fa8:	d004      	beq.n	24058fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
24058faa:	687b      	ldr	r3, [r7, #4]
24058fac:	681b      	ldr	r3, [r3, #0]
24058fae:	4a1b      	ldr	r2, [pc, #108]	; (2405901c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
24058fb0:	4293      	cmp	r3, r2
24058fb2:	d101      	bne.n	24058fb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
24058fb4:	2301      	movs	r3, #1
24058fb6:	e000      	b.n	24058fba <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
24058fb8:	2300      	movs	r3, #0
24058fba:	2b00      	cmp	r3, #0
24058fbc:	d00a      	beq.n	24058fd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
24058fbe:	68fa      	ldr	r2, [r7, #12]
24058fc0:	4b17      	ldr	r3, [pc, #92]	; (24059020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
24058fc2:	4413      	add	r3, r2
24058fc4:	009b      	lsls	r3, r3, #2
24058fc6:	461a      	mov	r2, r3
24058fc8:	687b      	ldr	r3, [r7, #4]
24058fca:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
24058fcc:	687b      	ldr	r3, [r7, #4]
24058fce:	4a15      	ldr	r2, [pc, #84]	; (24059024 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
24058fd0:	671a      	str	r2, [r3, #112]	; 0x70
24058fd2:	e009      	b.n	24058fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
24058fd4:	68fa      	ldr	r2, [r7, #12]
24058fd6:	4b14      	ldr	r3, [pc, #80]	; (24059028 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
24058fd8:	4413      	add	r3, r2
24058fda:	009b      	lsls	r3, r3, #2
24058fdc:	461a      	mov	r2, r3
24058fde:	687b      	ldr	r3, [r7, #4]
24058fe0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
24058fe2:	687b      	ldr	r3, [r7, #4]
24058fe4:	4a11      	ldr	r2, [pc, #68]	; (2405902c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
24058fe6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
24058fe8:	68fb      	ldr	r3, [r7, #12]
24058fea:	3b01      	subs	r3, #1
24058fec:	2201      	movs	r2, #1
24058fee:	409a      	lsls	r2, r3
24058ff0:	687b      	ldr	r3, [r7, #4]
24058ff2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
24058ff4:	bf00      	nop
24058ff6:	3714      	adds	r7, #20
24058ff8:	46bd      	mov	sp, r7
24058ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
24058ffe:	4770      	bx	lr
24059000:	58025408 	.word	0x58025408
24059004:	5802541c 	.word	0x5802541c
24059008:	58025430 	.word	0x58025430
2405900c:	58025444 	.word	0x58025444
24059010:	58025458 	.word	0x58025458
24059014:	5802546c 	.word	0x5802546c
24059018:	58025480 	.word	0x58025480
2405901c:	58025494 	.word	0x58025494
24059020:	1600963f 	.word	0x1600963f
24059024:	58025940 	.word	0x58025940
24059028:	1000823f 	.word	0x1000823f
2405902c:	40020940 	.word	0x40020940

24059030 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
24059030:	b580      	push	{r7, lr}
24059032:	b082      	sub	sp, #8
24059034:	af00      	add	r7, sp, #0
24059036:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
24059038:	687b      	ldr	r3, [r7, #4]
2405903a:	2b00      	cmp	r3, #0
2405903c:	d101      	bne.n	24059042 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
2405903e:	2301      	movs	r3, #1
24059040:	e04f      	b.n	240590e2 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
24059042:	687b      	ldr	r3, [r7, #4]
24059044:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
24059048:	b2db      	uxtb	r3, r3
2405904a:	2b00      	cmp	r3, #0
2405904c:	d106      	bne.n	2405905c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
2405904e:	687b      	ldr	r3, [r7, #4]
24059050:	2200      	movs	r2, #0
24059052:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
24059056:	6878      	ldr	r0, [r7, #4]
24059058:	f7fa f840 	bl	240530dc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
2405905c:	687b      	ldr	r3, [r7, #4]
2405905e:	2202      	movs	r2, #2
24059060:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
24059064:	687b      	ldr	r3, [r7, #4]
24059066:	681b      	ldr	r3, [r3, #0]
24059068:	681a      	ldr	r2, [r3, #0]
2405906a:	4b20      	ldr	r3, [pc, #128]	; (240590ec <HAL_DMA2D_Init+0xbc>)
2405906c:	4013      	ands	r3, r2
2405906e:	687a      	ldr	r2, [r7, #4]
24059070:	6851      	ldr	r1, [r2, #4]
24059072:	687a      	ldr	r2, [r7, #4]
24059074:	69d2      	ldr	r2, [r2, #28]
24059076:	4311      	orrs	r1, r2
24059078:	687a      	ldr	r2, [r7, #4]
2405907a:	6812      	ldr	r2, [r2, #0]
2405907c:	430b      	orrs	r3, r1
2405907e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
24059080:	687b      	ldr	r3, [r7, #4]
24059082:	681b      	ldr	r3, [r3, #0]
24059084:	6b5a      	ldr	r2, [r3, #52]	; 0x34
24059086:	4b1a      	ldr	r3, [pc, #104]	; (240590f0 <HAL_DMA2D_Init+0xc0>)
24059088:	4013      	ands	r3, r2
2405908a:	687a      	ldr	r2, [r7, #4]
2405908c:	6891      	ldr	r1, [r2, #8]
2405908e:	687a      	ldr	r2, [r7, #4]
24059090:	6992      	ldr	r2, [r2, #24]
24059092:	4311      	orrs	r1, r2
24059094:	687a      	ldr	r2, [r7, #4]
24059096:	6812      	ldr	r2, [r2, #0]
24059098:	430b      	orrs	r3, r1
2405909a:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
2405909c:	687b      	ldr	r3, [r7, #4]
2405909e:	681b      	ldr	r3, [r3, #0]
240590a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
240590a2:	4b14      	ldr	r3, [pc, #80]	; (240590f4 <HAL_DMA2D_Init+0xc4>)
240590a4:	4013      	ands	r3, r2
240590a6:	687a      	ldr	r2, [r7, #4]
240590a8:	68d1      	ldr	r1, [r2, #12]
240590aa:	687a      	ldr	r2, [r7, #4]
240590ac:	6812      	ldr	r2, [r2, #0]
240590ae:	430b      	orrs	r3, r1
240590b0:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
240590b2:	687b      	ldr	r3, [r7, #4]
240590b4:	681b      	ldr	r3, [r3, #0]
240590b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
240590b8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
240590bc:	687b      	ldr	r3, [r7, #4]
240590be:	691b      	ldr	r3, [r3, #16]
240590c0:	051a      	lsls	r2, r3, #20
240590c2:	687b      	ldr	r3, [r7, #4]
240590c4:	695b      	ldr	r3, [r3, #20]
240590c6:	055b      	lsls	r3, r3, #21
240590c8:	431a      	orrs	r2, r3
240590ca:	687b      	ldr	r3, [r7, #4]
240590cc:	681b      	ldr	r3, [r3, #0]
240590ce:	430a      	orrs	r2, r1
240590d0:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
240590d2:	687b      	ldr	r3, [r7, #4]
240590d4:	2200      	movs	r2, #0
240590d6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
240590d8:	687b      	ldr	r3, [r7, #4]
240590da:	2201      	movs	r2, #1
240590dc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
240590e0:	2300      	movs	r3, #0
}
240590e2:	4618      	mov	r0, r3
240590e4:	3708      	adds	r7, #8
240590e6:	46bd      	mov	sp, r7
240590e8:	bd80      	pop	{r7, pc}
240590ea:	bf00      	nop
240590ec:	fff8ffbf 	.word	0xfff8ffbf
240590f0:	fffffef8 	.word	0xfffffef8
240590f4:	ffff0000 	.word	0xffff0000

240590f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
240590f8:	b480      	push	{r7}
240590fa:	b089      	sub	sp, #36	; 0x24
240590fc:	af00      	add	r7, sp, #0
240590fe:	6078      	str	r0, [r7, #4]
24059100:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
24059102:	2300      	movs	r3, #0
24059104:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
24059106:	4b89      	ldr	r3, [pc, #548]	; (2405932c <HAL_GPIO_Init+0x234>)
24059108:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
2405910a:	e194      	b.n	24059436 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
2405910c:	683b      	ldr	r3, [r7, #0]
2405910e:	681a      	ldr	r2, [r3, #0]
24059110:	2101      	movs	r1, #1
24059112:	69fb      	ldr	r3, [r7, #28]
24059114:	fa01 f303 	lsl.w	r3, r1, r3
24059118:	4013      	ands	r3, r2
2405911a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
2405911c:	693b      	ldr	r3, [r7, #16]
2405911e:	2b00      	cmp	r3, #0
24059120:	f000 8186 	beq.w	24059430 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
24059124:	683b      	ldr	r3, [r7, #0]
24059126:	685b      	ldr	r3, [r3, #4]
24059128:	f003 0303 	and.w	r3, r3, #3
2405912c:	2b01      	cmp	r3, #1
2405912e:	d005      	beq.n	2405913c <HAL_GPIO_Init+0x44>
24059130:	683b      	ldr	r3, [r7, #0]
24059132:	685b      	ldr	r3, [r3, #4]
24059134:	f003 0303 	and.w	r3, r3, #3
24059138:	2b02      	cmp	r3, #2
2405913a:	d130      	bne.n	2405919e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
2405913c:	687b      	ldr	r3, [r7, #4]
2405913e:	689b      	ldr	r3, [r3, #8]
24059140:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
24059142:	69fb      	ldr	r3, [r7, #28]
24059144:	005b      	lsls	r3, r3, #1
24059146:	2203      	movs	r2, #3
24059148:	fa02 f303 	lsl.w	r3, r2, r3
2405914c:	43db      	mvns	r3, r3
2405914e:	69ba      	ldr	r2, [r7, #24]
24059150:	4013      	ands	r3, r2
24059152:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
24059154:	683b      	ldr	r3, [r7, #0]
24059156:	68da      	ldr	r2, [r3, #12]
24059158:	69fb      	ldr	r3, [r7, #28]
2405915a:	005b      	lsls	r3, r3, #1
2405915c:	fa02 f303 	lsl.w	r3, r2, r3
24059160:	69ba      	ldr	r2, [r7, #24]
24059162:	4313      	orrs	r3, r2
24059164:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
24059166:	687b      	ldr	r3, [r7, #4]
24059168:	69ba      	ldr	r2, [r7, #24]
2405916a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
2405916c:	687b      	ldr	r3, [r7, #4]
2405916e:	685b      	ldr	r3, [r3, #4]
24059170:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
24059172:	2201      	movs	r2, #1
24059174:	69fb      	ldr	r3, [r7, #28]
24059176:	fa02 f303 	lsl.w	r3, r2, r3
2405917a:	43db      	mvns	r3, r3
2405917c:	69ba      	ldr	r2, [r7, #24]
2405917e:	4013      	ands	r3, r2
24059180:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
24059182:	683b      	ldr	r3, [r7, #0]
24059184:	685b      	ldr	r3, [r3, #4]
24059186:	091b      	lsrs	r3, r3, #4
24059188:	f003 0201 	and.w	r2, r3, #1
2405918c:	69fb      	ldr	r3, [r7, #28]
2405918e:	fa02 f303 	lsl.w	r3, r2, r3
24059192:	69ba      	ldr	r2, [r7, #24]
24059194:	4313      	orrs	r3, r2
24059196:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
24059198:	687b      	ldr	r3, [r7, #4]
2405919a:	69ba      	ldr	r2, [r7, #24]
2405919c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
2405919e:	683b      	ldr	r3, [r7, #0]
240591a0:	685b      	ldr	r3, [r3, #4]
240591a2:	f003 0303 	and.w	r3, r3, #3
240591a6:	2b03      	cmp	r3, #3
240591a8:	d017      	beq.n	240591da <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
240591aa:	687b      	ldr	r3, [r7, #4]
240591ac:	68db      	ldr	r3, [r3, #12]
240591ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
240591b0:	69fb      	ldr	r3, [r7, #28]
240591b2:	005b      	lsls	r3, r3, #1
240591b4:	2203      	movs	r2, #3
240591b6:	fa02 f303 	lsl.w	r3, r2, r3
240591ba:	43db      	mvns	r3, r3
240591bc:	69ba      	ldr	r2, [r7, #24]
240591be:	4013      	ands	r3, r2
240591c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
240591c2:	683b      	ldr	r3, [r7, #0]
240591c4:	689a      	ldr	r2, [r3, #8]
240591c6:	69fb      	ldr	r3, [r7, #28]
240591c8:	005b      	lsls	r3, r3, #1
240591ca:	fa02 f303 	lsl.w	r3, r2, r3
240591ce:	69ba      	ldr	r2, [r7, #24]
240591d0:	4313      	orrs	r3, r2
240591d2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
240591d4:	687b      	ldr	r3, [r7, #4]
240591d6:	69ba      	ldr	r2, [r7, #24]
240591d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
240591da:	683b      	ldr	r3, [r7, #0]
240591dc:	685b      	ldr	r3, [r3, #4]
240591de:	f003 0303 	and.w	r3, r3, #3
240591e2:	2b02      	cmp	r3, #2
240591e4:	d123      	bne.n	2405922e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
240591e6:	69fb      	ldr	r3, [r7, #28]
240591e8:	08da      	lsrs	r2, r3, #3
240591ea:	687b      	ldr	r3, [r7, #4]
240591ec:	3208      	adds	r2, #8
240591ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
240591f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
240591f4:	69fb      	ldr	r3, [r7, #28]
240591f6:	f003 0307 	and.w	r3, r3, #7
240591fa:	009b      	lsls	r3, r3, #2
240591fc:	220f      	movs	r2, #15
240591fe:	fa02 f303 	lsl.w	r3, r2, r3
24059202:	43db      	mvns	r3, r3
24059204:	69ba      	ldr	r2, [r7, #24]
24059206:	4013      	ands	r3, r2
24059208:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
2405920a:	683b      	ldr	r3, [r7, #0]
2405920c:	691a      	ldr	r2, [r3, #16]
2405920e:	69fb      	ldr	r3, [r7, #28]
24059210:	f003 0307 	and.w	r3, r3, #7
24059214:	009b      	lsls	r3, r3, #2
24059216:	fa02 f303 	lsl.w	r3, r2, r3
2405921a:	69ba      	ldr	r2, [r7, #24]
2405921c:	4313      	orrs	r3, r2
2405921e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
24059220:	69fb      	ldr	r3, [r7, #28]
24059222:	08da      	lsrs	r2, r3, #3
24059224:	687b      	ldr	r3, [r7, #4]
24059226:	3208      	adds	r2, #8
24059228:	69b9      	ldr	r1, [r7, #24]
2405922a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
2405922e:	687b      	ldr	r3, [r7, #4]
24059230:	681b      	ldr	r3, [r3, #0]
24059232:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
24059234:	69fb      	ldr	r3, [r7, #28]
24059236:	005b      	lsls	r3, r3, #1
24059238:	2203      	movs	r2, #3
2405923a:	fa02 f303 	lsl.w	r3, r2, r3
2405923e:	43db      	mvns	r3, r3
24059240:	69ba      	ldr	r2, [r7, #24]
24059242:	4013      	ands	r3, r2
24059244:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
24059246:	683b      	ldr	r3, [r7, #0]
24059248:	685b      	ldr	r3, [r3, #4]
2405924a:	f003 0203 	and.w	r2, r3, #3
2405924e:	69fb      	ldr	r3, [r7, #28]
24059250:	005b      	lsls	r3, r3, #1
24059252:	fa02 f303 	lsl.w	r3, r2, r3
24059256:	69ba      	ldr	r2, [r7, #24]
24059258:	4313      	orrs	r3, r2
2405925a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
2405925c:	687b      	ldr	r3, [r7, #4]
2405925e:	69ba      	ldr	r2, [r7, #24]
24059260:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
24059262:	683b      	ldr	r3, [r7, #0]
24059264:	685b      	ldr	r3, [r3, #4]
24059266:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
2405926a:	2b00      	cmp	r3, #0
2405926c:	f000 80e0 	beq.w	24059430 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
24059270:	4b2f      	ldr	r3, [pc, #188]	; (24059330 <HAL_GPIO_Init+0x238>)
24059272:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
24059276:	4a2e      	ldr	r2, [pc, #184]	; (24059330 <HAL_GPIO_Init+0x238>)
24059278:	f043 0302 	orr.w	r3, r3, #2
2405927c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
24059280:	4b2b      	ldr	r3, [pc, #172]	; (24059330 <HAL_GPIO_Init+0x238>)
24059282:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
24059286:	f003 0302 	and.w	r3, r3, #2
2405928a:	60fb      	str	r3, [r7, #12]
2405928c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
2405928e:	4a29      	ldr	r2, [pc, #164]	; (24059334 <HAL_GPIO_Init+0x23c>)
24059290:	69fb      	ldr	r3, [r7, #28]
24059292:	089b      	lsrs	r3, r3, #2
24059294:	3302      	adds	r3, #2
24059296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
2405929a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
2405929c:	69fb      	ldr	r3, [r7, #28]
2405929e:	f003 0303 	and.w	r3, r3, #3
240592a2:	009b      	lsls	r3, r3, #2
240592a4:	220f      	movs	r2, #15
240592a6:	fa02 f303 	lsl.w	r3, r2, r3
240592aa:	43db      	mvns	r3, r3
240592ac:	69ba      	ldr	r2, [r7, #24]
240592ae:	4013      	ands	r3, r2
240592b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
240592b2:	687b      	ldr	r3, [r7, #4]
240592b4:	4a20      	ldr	r2, [pc, #128]	; (24059338 <HAL_GPIO_Init+0x240>)
240592b6:	4293      	cmp	r3, r2
240592b8:	d052      	beq.n	24059360 <HAL_GPIO_Init+0x268>
240592ba:	687b      	ldr	r3, [r7, #4]
240592bc:	4a1f      	ldr	r2, [pc, #124]	; (2405933c <HAL_GPIO_Init+0x244>)
240592be:	4293      	cmp	r3, r2
240592c0:	d031      	beq.n	24059326 <HAL_GPIO_Init+0x22e>
240592c2:	687b      	ldr	r3, [r7, #4]
240592c4:	4a1e      	ldr	r2, [pc, #120]	; (24059340 <HAL_GPIO_Init+0x248>)
240592c6:	4293      	cmp	r3, r2
240592c8:	d02b      	beq.n	24059322 <HAL_GPIO_Init+0x22a>
240592ca:	687b      	ldr	r3, [r7, #4]
240592cc:	4a1d      	ldr	r2, [pc, #116]	; (24059344 <HAL_GPIO_Init+0x24c>)
240592ce:	4293      	cmp	r3, r2
240592d0:	d025      	beq.n	2405931e <HAL_GPIO_Init+0x226>
240592d2:	687b      	ldr	r3, [r7, #4]
240592d4:	4a1c      	ldr	r2, [pc, #112]	; (24059348 <HAL_GPIO_Init+0x250>)
240592d6:	4293      	cmp	r3, r2
240592d8:	d01f      	beq.n	2405931a <HAL_GPIO_Init+0x222>
240592da:	687b      	ldr	r3, [r7, #4]
240592dc:	4a1b      	ldr	r2, [pc, #108]	; (2405934c <HAL_GPIO_Init+0x254>)
240592de:	4293      	cmp	r3, r2
240592e0:	d019      	beq.n	24059316 <HAL_GPIO_Init+0x21e>
240592e2:	687b      	ldr	r3, [r7, #4]
240592e4:	4a1a      	ldr	r2, [pc, #104]	; (24059350 <HAL_GPIO_Init+0x258>)
240592e6:	4293      	cmp	r3, r2
240592e8:	d013      	beq.n	24059312 <HAL_GPIO_Init+0x21a>
240592ea:	687b      	ldr	r3, [r7, #4]
240592ec:	4a19      	ldr	r2, [pc, #100]	; (24059354 <HAL_GPIO_Init+0x25c>)
240592ee:	4293      	cmp	r3, r2
240592f0:	d00d      	beq.n	2405930e <HAL_GPIO_Init+0x216>
240592f2:	687b      	ldr	r3, [r7, #4]
240592f4:	4a18      	ldr	r2, [pc, #96]	; (24059358 <HAL_GPIO_Init+0x260>)
240592f6:	4293      	cmp	r3, r2
240592f8:	d007      	beq.n	2405930a <HAL_GPIO_Init+0x212>
240592fa:	687b      	ldr	r3, [r7, #4]
240592fc:	4a17      	ldr	r2, [pc, #92]	; (2405935c <HAL_GPIO_Init+0x264>)
240592fe:	4293      	cmp	r3, r2
24059300:	d101      	bne.n	24059306 <HAL_GPIO_Init+0x20e>
24059302:	2309      	movs	r3, #9
24059304:	e02d      	b.n	24059362 <HAL_GPIO_Init+0x26a>
24059306:	230a      	movs	r3, #10
24059308:	e02b      	b.n	24059362 <HAL_GPIO_Init+0x26a>
2405930a:	2308      	movs	r3, #8
2405930c:	e029      	b.n	24059362 <HAL_GPIO_Init+0x26a>
2405930e:	2307      	movs	r3, #7
24059310:	e027      	b.n	24059362 <HAL_GPIO_Init+0x26a>
24059312:	2306      	movs	r3, #6
24059314:	e025      	b.n	24059362 <HAL_GPIO_Init+0x26a>
24059316:	2305      	movs	r3, #5
24059318:	e023      	b.n	24059362 <HAL_GPIO_Init+0x26a>
2405931a:	2304      	movs	r3, #4
2405931c:	e021      	b.n	24059362 <HAL_GPIO_Init+0x26a>
2405931e:	2303      	movs	r3, #3
24059320:	e01f      	b.n	24059362 <HAL_GPIO_Init+0x26a>
24059322:	2302      	movs	r3, #2
24059324:	e01d      	b.n	24059362 <HAL_GPIO_Init+0x26a>
24059326:	2301      	movs	r3, #1
24059328:	e01b      	b.n	24059362 <HAL_GPIO_Init+0x26a>
2405932a:	bf00      	nop
2405932c:	58000080 	.word	0x58000080
24059330:	58024400 	.word	0x58024400
24059334:	58000400 	.word	0x58000400
24059338:	58020000 	.word	0x58020000
2405933c:	58020400 	.word	0x58020400
24059340:	58020800 	.word	0x58020800
24059344:	58020c00 	.word	0x58020c00
24059348:	58021000 	.word	0x58021000
2405934c:	58021400 	.word	0x58021400
24059350:	58021800 	.word	0x58021800
24059354:	58021c00 	.word	0x58021c00
24059358:	58022000 	.word	0x58022000
2405935c:	58022400 	.word	0x58022400
24059360:	2300      	movs	r3, #0
24059362:	69fa      	ldr	r2, [r7, #28]
24059364:	f002 0203 	and.w	r2, r2, #3
24059368:	0092      	lsls	r2, r2, #2
2405936a:	4093      	lsls	r3, r2
2405936c:	69ba      	ldr	r2, [r7, #24]
2405936e:	4313      	orrs	r3, r2
24059370:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
24059372:	4938      	ldr	r1, [pc, #224]	; (24059454 <HAL_GPIO_Init+0x35c>)
24059374:	69fb      	ldr	r3, [r7, #28]
24059376:	089b      	lsrs	r3, r3, #2
24059378:	3302      	adds	r3, #2
2405937a:	69ba      	ldr	r2, [r7, #24]
2405937c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
24059380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24059384:	681b      	ldr	r3, [r3, #0]
24059386:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
24059388:	693b      	ldr	r3, [r7, #16]
2405938a:	43db      	mvns	r3, r3
2405938c:	69ba      	ldr	r2, [r7, #24]
2405938e:	4013      	ands	r3, r2
24059390:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
24059392:	683b      	ldr	r3, [r7, #0]
24059394:	685b      	ldr	r3, [r3, #4]
24059396:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
2405939a:	2b00      	cmp	r3, #0
2405939c:	d003      	beq.n	240593a6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
2405939e:	69ba      	ldr	r2, [r7, #24]
240593a0:	693b      	ldr	r3, [r7, #16]
240593a2:	4313      	orrs	r3, r2
240593a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
240593a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
240593aa:	69bb      	ldr	r3, [r7, #24]
240593ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
240593ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
240593b2:	685b      	ldr	r3, [r3, #4]
240593b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
240593b6:	693b      	ldr	r3, [r7, #16]
240593b8:	43db      	mvns	r3, r3
240593ba:	69ba      	ldr	r2, [r7, #24]
240593bc:	4013      	ands	r3, r2
240593be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
240593c0:	683b      	ldr	r3, [r7, #0]
240593c2:	685b      	ldr	r3, [r3, #4]
240593c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
240593c8:	2b00      	cmp	r3, #0
240593ca:	d003      	beq.n	240593d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
240593cc:	69ba      	ldr	r2, [r7, #24]
240593ce:	693b      	ldr	r3, [r7, #16]
240593d0:	4313      	orrs	r3, r2
240593d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
240593d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
240593d8:	69bb      	ldr	r3, [r7, #24]
240593da:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
240593dc:	697b      	ldr	r3, [r7, #20]
240593de:	685b      	ldr	r3, [r3, #4]
240593e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
240593e2:	693b      	ldr	r3, [r7, #16]
240593e4:	43db      	mvns	r3, r3
240593e6:	69ba      	ldr	r2, [r7, #24]
240593e8:	4013      	ands	r3, r2
240593ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
240593ec:	683b      	ldr	r3, [r7, #0]
240593ee:	685b      	ldr	r3, [r3, #4]
240593f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
240593f4:	2b00      	cmp	r3, #0
240593f6:	d003      	beq.n	24059400 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
240593f8:	69ba      	ldr	r2, [r7, #24]
240593fa:	693b      	ldr	r3, [r7, #16]
240593fc:	4313      	orrs	r3, r2
240593fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
24059400:	697b      	ldr	r3, [r7, #20]
24059402:	69ba      	ldr	r2, [r7, #24]
24059404:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
24059406:	697b      	ldr	r3, [r7, #20]
24059408:	681b      	ldr	r3, [r3, #0]
2405940a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
2405940c:	693b      	ldr	r3, [r7, #16]
2405940e:	43db      	mvns	r3, r3
24059410:	69ba      	ldr	r2, [r7, #24]
24059412:	4013      	ands	r3, r2
24059414:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
24059416:	683b      	ldr	r3, [r7, #0]
24059418:	685b      	ldr	r3, [r3, #4]
2405941a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2405941e:	2b00      	cmp	r3, #0
24059420:	d003      	beq.n	2405942a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
24059422:	69ba      	ldr	r2, [r7, #24]
24059424:	693b      	ldr	r3, [r7, #16]
24059426:	4313      	orrs	r3, r2
24059428:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
2405942a:	697b      	ldr	r3, [r7, #20]
2405942c:	69ba      	ldr	r2, [r7, #24]
2405942e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
24059430:	69fb      	ldr	r3, [r7, #28]
24059432:	3301      	adds	r3, #1
24059434:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
24059436:	683b      	ldr	r3, [r7, #0]
24059438:	681a      	ldr	r2, [r3, #0]
2405943a:	69fb      	ldr	r3, [r7, #28]
2405943c:	fa22 f303 	lsr.w	r3, r2, r3
24059440:	2b00      	cmp	r3, #0
24059442:	f47f ae63 	bne.w	2405910c <HAL_GPIO_Init+0x14>
  }
}
24059446:	bf00      	nop
24059448:	bf00      	nop
2405944a:	3724      	adds	r7, #36	; 0x24
2405944c:	46bd      	mov	sp, r7
2405944e:	f85d 7b04 	ldr.w	r7, [sp], #4
24059452:	4770      	bx	lr
24059454:	58000400 	.word	0x58000400

24059458 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
24059458:	b480      	push	{r7}
2405945a:	b085      	sub	sp, #20
2405945c:	af00      	add	r7, sp, #0
2405945e:	6078      	str	r0, [r7, #4]
24059460:	460b      	mov	r3, r1
24059462:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
24059464:	687b      	ldr	r3, [r7, #4]
24059466:	691a      	ldr	r2, [r3, #16]
24059468:	887b      	ldrh	r3, [r7, #2]
2405946a:	4013      	ands	r3, r2
2405946c:	2b00      	cmp	r3, #0
2405946e:	d002      	beq.n	24059476 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
24059470:	2301      	movs	r3, #1
24059472:	73fb      	strb	r3, [r7, #15]
24059474:	e001      	b.n	2405947a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
24059476:	2300      	movs	r3, #0
24059478:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
2405947a:	7bfb      	ldrb	r3, [r7, #15]
}
2405947c:	4618      	mov	r0, r3
2405947e:	3714      	adds	r7, #20
24059480:	46bd      	mov	sp, r7
24059482:	f85d 7b04 	ldr.w	r7, [sp], #4
24059486:	4770      	bx	lr

24059488 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
24059488:	b480      	push	{r7}
2405948a:	b083      	sub	sp, #12
2405948c:	af00      	add	r7, sp, #0
2405948e:	6078      	str	r0, [r7, #4]
24059490:	460b      	mov	r3, r1
24059492:	807b      	strh	r3, [r7, #2]
24059494:	4613      	mov	r3, r2
24059496:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
24059498:	787b      	ldrb	r3, [r7, #1]
2405949a:	2b00      	cmp	r3, #0
2405949c:	d003      	beq.n	240594a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
2405949e:	887a      	ldrh	r2, [r7, #2]
240594a0:	687b      	ldr	r3, [r7, #4]
240594a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
240594a4:	e003      	b.n	240594ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
240594a6:	887b      	ldrh	r3, [r7, #2]
240594a8:	041a      	lsls	r2, r3, #16
240594aa:	687b      	ldr	r3, [r7, #4]
240594ac:	619a      	str	r2, [r3, #24]
}
240594ae:	bf00      	nop
240594b0:	370c      	adds	r7, #12
240594b2:	46bd      	mov	sp, r7
240594b4:	f85d 7b04 	ldr.w	r7, [sp], #4
240594b8:	4770      	bx	lr

240594ba <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
240594ba:	b580      	push	{r7, lr}
240594bc:	b082      	sub	sp, #8
240594be:	af00      	add	r7, sp, #0
240594c0:	4603      	mov	r3, r0
240594c2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
240594c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
240594c8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
240594cc:	88fb      	ldrh	r3, [r7, #6]
240594ce:	4013      	ands	r3, r2
240594d0:	2b00      	cmp	r3, #0
240594d2:	d008      	beq.n	240594e6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
240594d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
240594d8:	88fb      	ldrh	r3, [r7, #6]
240594da:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
240594de:	88fb      	ldrh	r3, [r7, #6]
240594e0:	4618      	mov	r0, r3
240594e2:	f000 f804 	bl	240594ee <HAL_GPIO_EXTI_Callback>
  }
#endif
}
240594e6:	bf00      	nop
240594e8:	3708      	adds	r7, #8
240594ea:	46bd      	mov	sp, r7
240594ec:	bd80      	pop	{r7, pc}

240594ee <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
240594ee:	b480      	push	{r7}
240594f0:	b083      	sub	sp, #12
240594f2:	af00      	add	r7, sp, #0
240594f4:	4603      	mov	r3, r0
240594f6:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
240594f8:	bf00      	nop
240594fa:	370c      	adds	r7, #12
240594fc:	46bd      	mov	sp, r7
240594fe:	f85d 7b04 	ldr.w	r7, [sp], #4
24059502:	4770      	bx	lr

24059504 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
24059504:	b580      	push	{r7, lr}
24059506:	b084      	sub	sp, #16
24059508:	af00      	add	r7, sp, #0
2405950a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
2405950c:	687b      	ldr	r3, [r7, #4]
2405950e:	2b00      	cmp	r3, #0
24059510:	d101      	bne.n	24059516 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
24059512:	2301      	movs	r3, #1
24059514:	e0bf      	b.n	24059696 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
24059516:	687b      	ldr	r3, [r7, #4]
24059518:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
2405951c:	b2db      	uxtb	r3, r3
2405951e:	2b00      	cmp	r3, #0
24059520:	d106      	bne.n	24059530 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
24059522:	687b      	ldr	r3, [r7, #4]
24059524:	2200      	movs	r2, #0
24059526:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
2405952a:	6878      	ldr	r0, [r7, #4]
2405952c:	f7f9 fdf8 	bl	24053120 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
24059530:	687b      	ldr	r3, [r7, #4]
24059532:	2202      	movs	r2, #2
24059534:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
24059538:	687b      	ldr	r3, [r7, #4]
2405953a:	681b      	ldr	r3, [r3, #0]
2405953c:	699a      	ldr	r2, [r3, #24]
2405953e:	687b      	ldr	r3, [r7, #4]
24059540:	681b      	ldr	r3, [r3, #0]
24059542:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
24059546:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
24059548:	687b      	ldr	r3, [r7, #4]
2405954a:	681b      	ldr	r3, [r3, #0]
2405954c:	6999      	ldr	r1, [r3, #24]
2405954e:	687b      	ldr	r3, [r7, #4]
24059550:	685a      	ldr	r2, [r3, #4]
24059552:	687b      	ldr	r3, [r7, #4]
24059554:	689b      	ldr	r3, [r3, #8]
24059556:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
24059558:	687b      	ldr	r3, [r7, #4]
2405955a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
2405955c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
2405955e:	687b      	ldr	r3, [r7, #4]
24059560:	691b      	ldr	r3, [r3, #16]
24059562:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
24059564:	687b      	ldr	r3, [r7, #4]
24059566:	681b      	ldr	r3, [r3, #0]
24059568:	430a      	orrs	r2, r1
2405956a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
2405956c:	687b      	ldr	r3, [r7, #4]
2405956e:	681b      	ldr	r3, [r3, #0]
24059570:	6899      	ldr	r1, [r3, #8]
24059572:	687b      	ldr	r3, [r7, #4]
24059574:	681a      	ldr	r2, [r3, #0]
24059576:	4b4a      	ldr	r3, [pc, #296]	; (240596a0 <HAL_LTDC_Init+0x19c>)
24059578:	400b      	ands	r3, r1
2405957a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
2405957c:	687b      	ldr	r3, [r7, #4]
2405957e:	695b      	ldr	r3, [r3, #20]
24059580:	041b      	lsls	r3, r3, #16
24059582:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
24059584:	687b      	ldr	r3, [r7, #4]
24059586:	681b      	ldr	r3, [r3, #0]
24059588:	6899      	ldr	r1, [r3, #8]
2405958a:	687b      	ldr	r3, [r7, #4]
2405958c:	699a      	ldr	r2, [r3, #24]
2405958e:	68fb      	ldr	r3, [r7, #12]
24059590:	431a      	orrs	r2, r3
24059592:	687b      	ldr	r3, [r7, #4]
24059594:	681b      	ldr	r3, [r3, #0]
24059596:	430a      	orrs	r2, r1
24059598:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
2405959a:	687b      	ldr	r3, [r7, #4]
2405959c:	681b      	ldr	r3, [r3, #0]
2405959e:	68d9      	ldr	r1, [r3, #12]
240595a0:	687b      	ldr	r3, [r7, #4]
240595a2:	681a      	ldr	r2, [r3, #0]
240595a4:	4b3e      	ldr	r3, [pc, #248]	; (240596a0 <HAL_LTDC_Init+0x19c>)
240595a6:	400b      	ands	r3, r1
240595a8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
240595aa:	687b      	ldr	r3, [r7, #4]
240595ac:	69db      	ldr	r3, [r3, #28]
240595ae:	041b      	lsls	r3, r3, #16
240595b0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
240595b2:	687b      	ldr	r3, [r7, #4]
240595b4:	681b      	ldr	r3, [r3, #0]
240595b6:	68d9      	ldr	r1, [r3, #12]
240595b8:	687b      	ldr	r3, [r7, #4]
240595ba:	6a1a      	ldr	r2, [r3, #32]
240595bc:	68fb      	ldr	r3, [r7, #12]
240595be:	431a      	orrs	r2, r3
240595c0:	687b      	ldr	r3, [r7, #4]
240595c2:	681b      	ldr	r3, [r3, #0]
240595c4:	430a      	orrs	r2, r1
240595c6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
240595c8:	687b      	ldr	r3, [r7, #4]
240595ca:	681b      	ldr	r3, [r3, #0]
240595cc:	6919      	ldr	r1, [r3, #16]
240595ce:	687b      	ldr	r3, [r7, #4]
240595d0:	681a      	ldr	r2, [r3, #0]
240595d2:	4b33      	ldr	r3, [pc, #204]	; (240596a0 <HAL_LTDC_Init+0x19c>)
240595d4:	400b      	ands	r3, r1
240595d6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
240595d8:	687b      	ldr	r3, [r7, #4]
240595da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
240595dc:	041b      	lsls	r3, r3, #16
240595de:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
240595e0:	687b      	ldr	r3, [r7, #4]
240595e2:	681b      	ldr	r3, [r3, #0]
240595e4:	6919      	ldr	r1, [r3, #16]
240595e6:	687b      	ldr	r3, [r7, #4]
240595e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
240595ea:	68fb      	ldr	r3, [r7, #12]
240595ec:	431a      	orrs	r2, r3
240595ee:	687b      	ldr	r3, [r7, #4]
240595f0:	681b      	ldr	r3, [r3, #0]
240595f2:	430a      	orrs	r2, r1
240595f4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
240595f6:	687b      	ldr	r3, [r7, #4]
240595f8:	681b      	ldr	r3, [r3, #0]
240595fa:	6959      	ldr	r1, [r3, #20]
240595fc:	687b      	ldr	r3, [r7, #4]
240595fe:	681a      	ldr	r2, [r3, #0]
24059600:	4b27      	ldr	r3, [pc, #156]	; (240596a0 <HAL_LTDC_Init+0x19c>)
24059602:	400b      	ands	r3, r1
24059604:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
24059606:	687b      	ldr	r3, [r7, #4]
24059608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405960a:	041b      	lsls	r3, r3, #16
2405960c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
2405960e:	687b      	ldr	r3, [r7, #4]
24059610:	681b      	ldr	r3, [r3, #0]
24059612:	6959      	ldr	r1, [r3, #20]
24059614:	687b      	ldr	r3, [r7, #4]
24059616:	6b1a      	ldr	r2, [r3, #48]	; 0x30
24059618:	68fb      	ldr	r3, [r7, #12]
2405961a:	431a      	orrs	r2, r3
2405961c:	687b      	ldr	r3, [r7, #4]
2405961e:	681b      	ldr	r3, [r3, #0]
24059620:	430a      	orrs	r2, r1
24059622:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
24059624:	687b      	ldr	r3, [r7, #4]
24059626:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
2405962a:	021b      	lsls	r3, r3, #8
2405962c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
2405962e:	687b      	ldr	r3, [r7, #4]
24059630:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
24059634:	041b      	lsls	r3, r3, #16
24059636:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
24059638:	687b      	ldr	r3, [r7, #4]
2405963a:	681b      	ldr	r3, [r3, #0]
2405963c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2405963e:	687b      	ldr	r3, [r7, #4]
24059640:	681b      	ldr	r3, [r3, #0]
24059642:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
24059646:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
24059648:	687b      	ldr	r3, [r7, #4]
2405964a:	681b      	ldr	r3, [r3, #0]
2405964c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
2405964e:	68ba      	ldr	r2, [r7, #8]
24059650:	68fb      	ldr	r3, [r7, #12]
24059652:	4313      	orrs	r3, r2
24059654:	687a      	ldr	r2, [r7, #4]
24059656:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
2405965a:	431a      	orrs	r2, r3
2405965c:	687b      	ldr	r3, [r7, #4]
2405965e:	681b      	ldr	r3, [r3, #0]
24059660:	430a      	orrs	r2, r1
24059662:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
24059664:	687b      	ldr	r3, [r7, #4]
24059666:	681b      	ldr	r3, [r3, #0]
24059668:	6b5a      	ldr	r2, [r3, #52]	; 0x34
2405966a:	687b      	ldr	r3, [r7, #4]
2405966c:	681b      	ldr	r3, [r3, #0]
2405966e:	f042 0206 	orr.w	r2, r2, #6
24059672:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
24059674:	687b      	ldr	r3, [r7, #4]
24059676:	681b      	ldr	r3, [r3, #0]
24059678:	699a      	ldr	r2, [r3, #24]
2405967a:	687b      	ldr	r3, [r7, #4]
2405967c:	681b      	ldr	r3, [r3, #0]
2405967e:	f042 0201 	orr.w	r2, r2, #1
24059682:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
24059684:	687b      	ldr	r3, [r7, #4]
24059686:	2200      	movs	r2, #0
24059688:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
2405968c:	687b      	ldr	r3, [r7, #4]
2405968e:	2201      	movs	r2, #1
24059690:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
24059694:	2300      	movs	r3, #0
}
24059696:	4618      	mov	r0, r3
24059698:	3710      	adds	r7, #16
2405969a:	46bd      	mov	sp, r7
2405969c:	bd80      	pop	{r7, pc}
2405969e:	bf00      	nop
240596a0:	f000f800 	.word	0xf000f800

240596a4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
240596a4:	b580      	push	{r7, lr}
240596a6:	b084      	sub	sp, #16
240596a8:	af00      	add	r7, sp, #0
240596aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
240596ac:	687b      	ldr	r3, [r7, #4]
240596ae:	681b      	ldr	r3, [r3, #0]
240596b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240596b2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
240596b4:	687b      	ldr	r3, [r7, #4]
240596b6:	681b      	ldr	r3, [r3, #0]
240596b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
240596ba:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
240596bc:	68fb      	ldr	r3, [r7, #12]
240596be:	f003 0304 	and.w	r3, r3, #4
240596c2:	2b00      	cmp	r3, #0
240596c4:	d023      	beq.n	2405970e <HAL_LTDC_IRQHandler+0x6a>
240596c6:	68bb      	ldr	r3, [r7, #8]
240596c8:	f003 0304 	and.w	r3, r3, #4
240596cc:	2b00      	cmp	r3, #0
240596ce:	d01e      	beq.n	2405970e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
240596d0:	687b      	ldr	r3, [r7, #4]
240596d2:	681b      	ldr	r3, [r3, #0]
240596d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
240596d6:	687b      	ldr	r3, [r7, #4]
240596d8:	681b      	ldr	r3, [r3, #0]
240596da:	f022 0204 	bic.w	r2, r2, #4
240596de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
240596e0:	687b      	ldr	r3, [r7, #4]
240596e2:	681b      	ldr	r3, [r3, #0]
240596e4:	2204      	movs	r2, #4
240596e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
240596e8:	687b      	ldr	r3, [r7, #4]
240596ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
240596ee:	f043 0201 	orr.w	r2, r3, #1
240596f2:	687b      	ldr	r3, [r7, #4]
240596f4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
240596f8:	687b      	ldr	r3, [r7, #4]
240596fa:	2204      	movs	r2, #4
240596fc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
24059700:	687b      	ldr	r3, [r7, #4]
24059702:	2200      	movs	r2, #0
24059704:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
24059708:	6878      	ldr	r0, [r7, #4]
2405970a:	f000 f86f 	bl	240597ec <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
2405970e:	68fb      	ldr	r3, [r7, #12]
24059710:	f003 0302 	and.w	r3, r3, #2
24059714:	2b00      	cmp	r3, #0
24059716:	d023      	beq.n	24059760 <HAL_LTDC_IRQHandler+0xbc>
24059718:	68bb      	ldr	r3, [r7, #8]
2405971a:	f003 0302 	and.w	r3, r3, #2
2405971e:	2b00      	cmp	r3, #0
24059720:	d01e      	beq.n	24059760 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
24059722:	687b      	ldr	r3, [r7, #4]
24059724:	681b      	ldr	r3, [r3, #0]
24059726:	6b5a      	ldr	r2, [r3, #52]	; 0x34
24059728:	687b      	ldr	r3, [r7, #4]
2405972a:	681b      	ldr	r3, [r3, #0]
2405972c:	f022 0202 	bic.w	r2, r2, #2
24059730:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
24059732:	687b      	ldr	r3, [r7, #4]
24059734:	681b      	ldr	r3, [r3, #0]
24059736:	2202      	movs	r2, #2
24059738:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
2405973a:	687b      	ldr	r3, [r7, #4]
2405973c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
24059740:	f043 0202 	orr.w	r2, r3, #2
24059744:	687b      	ldr	r3, [r7, #4]
24059746:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
2405974a:	687b      	ldr	r3, [r7, #4]
2405974c:	2204      	movs	r2, #4
2405974e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
24059752:	687b      	ldr	r3, [r7, #4]
24059754:	2200      	movs	r2, #0
24059756:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
2405975a:	6878      	ldr	r0, [r7, #4]
2405975c:	f000 f846 	bl	240597ec <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
24059760:	68fb      	ldr	r3, [r7, #12]
24059762:	f003 0301 	and.w	r3, r3, #1
24059766:	2b00      	cmp	r3, #0
24059768:	d01b      	beq.n	240597a2 <HAL_LTDC_IRQHandler+0xfe>
2405976a:	68bb      	ldr	r3, [r7, #8]
2405976c:	f003 0301 	and.w	r3, r3, #1
24059770:	2b00      	cmp	r3, #0
24059772:	d016      	beq.n	240597a2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
24059774:	687b      	ldr	r3, [r7, #4]
24059776:	681b      	ldr	r3, [r3, #0]
24059778:	6b5a      	ldr	r2, [r3, #52]	; 0x34
2405977a:	687b      	ldr	r3, [r7, #4]
2405977c:	681b      	ldr	r3, [r3, #0]
2405977e:	f022 0201 	bic.w	r2, r2, #1
24059782:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
24059784:	687b      	ldr	r3, [r7, #4]
24059786:	681b      	ldr	r3, [r3, #0]
24059788:	2201      	movs	r2, #1
2405978a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
2405978c:	687b      	ldr	r3, [r7, #4]
2405978e:	2201      	movs	r2, #1
24059790:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
24059794:	687b      	ldr	r3, [r7, #4]
24059796:	2200      	movs	r2, #0
24059798:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
2405979c:	6878      	ldr	r0, [r7, #4]
2405979e:	f000 f82f 	bl	24059800 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
240597a2:	68fb      	ldr	r3, [r7, #12]
240597a4:	f003 0308 	and.w	r3, r3, #8
240597a8:	2b00      	cmp	r3, #0
240597aa:	d01b      	beq.n	240597e4 <HAL_LTDC_IRQHandler+0x140>
240597ac:	68bb      	ldr	r3, [r7, #8]
240597ae:	f003 0308 	and.w	r3, r3, #8
240597b2:	2b00      	cmp	r3, #0
240597b4:	d016      	beq.n	240597e4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
240597b6:	687b      	ldr	r3, [r7, #4]
240597b8:	681b      	ldr	r3, [r3, #0]
240597ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
240597bc:	687b      	ldr	r3, [r7, #4]
240597be:	681b      	ldr	r3, [r3, #0]
240597c0:	f022 0208 	bic.w	r2, r2, #8
240597c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
240597c6:	687b      	ldr	r3, [r7, #4]
240597c8:	681b      	ldr	r3, [r3, #0]
240597ca:	2208      	movs	r2, #8
240597cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
240597ce:	687b      	ldr	r3, [r7, #4]
240597d0:	2201      	movs	r2, #1
240597d2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
240597d6:	687b      	ldr	r3, [r7, #4]
240597d8:	2200      	movs	r2, #0
240597da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
240597de:	6878      	ldr	r0, [r7, #4]
240597e0:	f7f7 fec8 	bl	24051574 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
240597e4:	bf00      	nop
240597e6:	3710      	adds	r7, #16
240597e8:	46bd      	mov	sp, r7
240597ea:	bd80      	pop	{r7, pc}

240597ec <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
240597ec:	b480      	push	{r7}
240597ee:	b083      	sub	sp, #12
240597f0:	af00      	add	r7, sp, #0
240597f2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
240597f4:	bf00      	nop
240597f6:	370c      	adds	r7, #12
240597f8:	46bd      	mov	sp, r7
240597fa:	f85d 7b04 	ldr.w	r7, [sp], #4
240597fe:	4770      	bx	lr

24059800 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
24059800:	b480      	push	{r7}
24059802:	b083      	sub	sp, #12
24059804:	af00      	add	r7, sp, #0
24059806:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
24059808:	bf00      	nop
2405980a:	370c      	adds	r7, #12
2405980c:	46bd      	mov	sp, r7
2405980e:	f85d 7b04 	ldr.w	r7, [sp], #4
24059812:	4770      	bx	lr

24059814 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
24059814:	b5b0      	push	{r4, r5, r7, lr}
24059816:	b084      	sub	sp, #16
24059818:	af00      	add	r7, sp, #0
2405981a:	60f8      	str	r0, [r7, #12]
2405981c:	60b9      	str	r1, [r7, #8]
2405981e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
24059820:	68fb      	ldr	r3, [r7, #12]
24059822:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
24059826:	2b01      	cmp	r3, #1
24059828:	d101      	bne.n	2405982e <HAL_LTDC_ConfigLayer+0x1a>
2405982a:	2302      	movs	r3, #2
2405982c:	e02c      	b.n	24059888 <HAL_LTDC_ConfigLayer+0x74>
2405982e:	68fb      	ldr	r3, [r7, #12]
24059830:	2201      	movs	r2, #1
24059832:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
24059836:	68fb      	ldr	r3, [r7, #12]
24059838:	2202      	movs	r2, #2
2405983a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
2405983e:	68fa      	ldr	r2, [r7, #12]
24059840:	687b      	ldr	r3, [r7, #4]
24059842:	2134      	movs	r1, #52	; 0x34
24059844:	fb01 f303 	mul.w	r3, r1, r3
24059848:	4413      	add	r3, r2
2405984a:	f103 0238 	add.w	r2, r3, #56	; 0x38
2405984e:	68bb      	ldr	r3, [r7, #8]
24059850:	4614      	mov	r4, r2
24059852:	461d      	mov	r5, r3
24059854:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
24059856:	c40f      	stmia	r4!, {r0, r1, r2, r3}
24059858:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
2405985a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
2405985c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
2405985e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
24059860:	682b      	ldr	r3, [r5, #0]
24059862:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
24059864:	687a      	ldr	r2, [r7, #4]
24059866:	68b9      	ldr	r1, [r7, #8]
24059868:	68f8      	ldr	r0, [r7, #12]
2405986a:	f000 f877 	bl	2405995c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
2405986e:	68fb      	ldr	r3, [r7, #12]
24059870:	681b      	ldr	r3, [r3, #0]
24059872:	2201      	movs	r2, #1
24059874:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
24059876:	68fb      	ldr	r3, [r7, #12]
24059878:	2201      	movs	r2, #1
2405987a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
2405987e:	68fb      	ldr	r3, [r7, #12]
24059880:	2200      	movs	r2, #0
24059882:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
24059886:	2300      	movs	r3, #0
}
24059888:	4618      	mov	r0, r3
2405988a:	3710      	adds	r7, #16
2405988c:	46bd      	mov	sp, r7
2405988e:	bdb0      	pop	{r4, r5, r7, pc}

24059890 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
24059890:	b580      	push	{r7, lr}
24059892:	b086      	sub	sp, #24
24059894:	af00      	add	r7, sp, #0
24059896:	60f8      	str	r0, [r7, #12]
24059898:	60b9      	str	r1, [r7, #8]
2405989a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
2405989c:	68fb      	ldr	r3, [r7, #12]
2405989e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
240598a2:	2b01      	cmp	r3, #1
240598a4:	d101      	bne.n	240598aa <HAL_LTDC_SetAddress+0x1a>
240598a6:	2302      	movs	r3, #2
240598a8:	e024      	b.n	240598f4 <HAL_LTDC_SetAddress+0x64>
240598aa:	68fb      	ldr	r3, [r7, #12]
240598ac:	2201      	movs	r2, #1
240598ae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
240598b2:	68fb      	ldr	r3, [r7, #12]
240598b4:	2202      	movs	r2, #2
240598b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
240598ba:	687b      	ldr	r3, [r7, #4]
240598bc:	2234      	movs	r2, #52	; 0x34
240598be:	fb02 f303 	mul.w	r3, r2, r3
240598c2:	3338      	adds	r3, #56	; 0x38
240598c4:	68fa      	ldr	r2, [r7, #12]
240598c6:	4413      	add	r3, r2
240598c8:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
240598ca:	697b      	ldr	r3, [r7, #20]
240598cc:	68ba      	ldr	r2, [r7, #8]
240598ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
240598d0:	687a      	ldr	r2, [r7, #4]
240598d2:	6979      	ldr	r1, [r7, #20]
240598d4:	68f8      	ldr	r0, [r7, #12]
240598d6:	f000 f841 	bl	2405995c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
240598da:	68fb      	ldr	r3, [r7, #12]
240598dc:	681b      	ldr	r3, [r3, #0]
240598de:	2201      	movs	r2, #1
240598e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
240598e2:	68fb      	ldr	r3, [r7, #12]
240598e4:	2201      	movs	r2, #1
240598e6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
240598ea:	68fb      	ldr	r3, [r7, #12]
240598ec:	2200      	movs	r2, #0
240598ee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
240598f2:	2300      	movs	r3, #0
}
240598f4:	4618      	mov	r0, r3
240598f6:	3718      	adds	r7, #24
240598f8:	46bd      	mov	sp, r7
240598fa:	bd80      	pop	{r7, pc}

240598fc <HAL_LTDC_Reload>:
  *                      LTDC_RELOAD_VERTICAL_BLANKING  : Reload in the next Vertical Blanking
  * @note   User application may resort to HAL_LTDC_ReloadEventCallback() at reload interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef  HAL_LTDC_Reload(LTDC_HandleTypeDef *hltdc, uint32_t ReloadType)
{
240598fc:	b480      	push	{r7}
240598fe:	b083      	sub	sp, #12
24059900:	af00      	add	r7, sp, #0
24059902:	6078      	str	r0, [r7, #4]
24059904:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_RELOAD(ReloadType));

  /* Process locked */
  __HAL_LOCK(hltdc);
24059906:	687b      	ldr	r3, [r7, #4]
24059908:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
2405990c:	2b01      	cmp	r3, #1
2405990e:	d101      	bne.n	24059914 <HAL_LTDC_Reload+0x18>
24059910:	2302      	movs	r3, #2
24059912:	e01c      	b.n	2405994e <HAL_LTDC_Reload+0x52>
24059914:	687b      	ldr	r3, [r7, #4]
24059916:	2201      	movs	r2, #1
24059918:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
2405991c:	687b      	ldr	r3, [r7, #4]
2405991e:	2202      	movs	r2, #2
24059920:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable the Reload interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
24059924:	687b      	ldr	r3, [r7, #4]
24059926:	681b      	ldr	r3, [r3, #0]
24059928:	6b5a      	ldr	r2, [r3, #52]	; 0x34
2405992a:	687b      	ldr	r3, [r7, #4]
2405992c:	681b      	ldr	r3, [r3, #0]
2405992e:	f042 0208 	orr.w	r2, r2, #8
24059932:	635a      	str	r2, [r3, #52]	; 0x34

  /* Apply Reload type */
  hltdc->Instance->SRCR = ReloadType;
24059934:	687b      	ldr	r3, [r7, #4]
24059936:	681b      	ldr	r3, [r3, #0]
24059938:	683a      	ldr	r2, [r7, #0]
2405993a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
2405993c:	687b      	ldr	r3, [r7, #4]
2405993e:	2201      	movs	r2, #1
24059940:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
24059944:	687b      	ldr	r3, [r7, #4]
24059946:	2200      	movs	r2, #0
24059948:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
2405994c:	2300      	movs	r3, #0
}
2405994e:	4618      	mov	r0, r3
24059950:	370c      	adds	r7, #12
24059952:	46bd      	mov	sp, r7
24059954:	f85d 7b04 	ldr.w	r7, [sp], #4
24059958:	4770      	bx	lr
	...

2405995c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
2405995c:	b480      	push	{r7}
2405995e:	b089      	sub	sp, #36	; 0x24
24059960:	af00      	add	r7, sp, #0
24059962:	60f8      	str	r0, [r7, #12]
24059964:	60b9      	str	r1, [r7, #8]
24059966:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
24059968:	68bb      	ldr	r3, [r7, #8]
2405996a:	685a      	ldr	r2, [r3, #4]
2405996c:	68fb      	ldr	r3, [r7, #12]
2405996e:	681b      	ldr	r3, [r3, #0]
24059970:	68db      	ldr	r3, [r3, #12]
24059972:	0c1b      	lsrs	r3, r3, #16
24059974:	f3c3 030b 	ubfx	r3, r3, #0, #12
24059978:	4413      	add	r3, r2
2405997a:	041b      	lsls	r3, r3, #16
2405997c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
2405997e:	68fb      	ldr	r3, [r7, #12]
24059980:	681b      	ldr	r3, [r3, #0]
24059982:	461a      	mov	r2, r3
24059984:	687b      	ldr	r3, [r7, #4]
24059986:	01db      	lsls	r3, r3, #7
24059988:	4413      	add	r3, r2
2405998a:	3384      	adds	r3, #132	; 0x84
2405998c:	685b      	ldr	r3, [r3, #4]
2405998e:	68fa      	ldr	r2, [r7, #12]
24059990:	6812      	ldr	r2, [r2, #0]
24059992:	4611      	mov	r1, r2
24059994:	687a      	ldr	r2, [r7, #4]
24059996:	01d2      	lsls	r2, r2, #7
24059998:	440a      	add	r2, r1
2405999a:	3284      	adds	r2, #132	; 0x84
2405999c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
240599a0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
240599a2:	68bb      	ldr	r3, [r7, #8]
240599a4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
240599a6:	68fb      	ldr	r3, [r7, #12]
240599a8:	681b      	ldr	r3, [r3, #0]
240599aa:	68db      	ldr	r3, [r3, #12]
240599ac:	0c1b      	lsrs	r3, r3, #16
240599ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
240599b2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
240599b4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
240599b6:	68fb      	ldr	r3, [r7, #12]
240599b8:	681b      	ldr	r3, [r3, #0]
240599ba:	4619      	mov	r1, r3
240599bc:	687b      	ldr	r3, [r7, #4]
240599be:	01db      	lsls	r3, r3, #7
240599c0:	440b      	add	r3, r1
240599c2:	3384      	adds	r3, #132	; 0x84
240599c4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
240599c6:	69fb      	ldr	r3, [r7, #28]
240599c8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
240599ca:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
240599cc:	68bb      	ldr	r3, [r7, #8]
240599ce:	68da      	ldr	r2, [r3, #12]
240599d0:	68fb      	ldr	r3, [r7, #12]
240599d2:	681b      	ldr	r3, [r3, #0]
240599d4:	68db      	ldr	r3, [r3, #12]
240599d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
240599da:	4413      	add	r3, r2
240599dc:	041b      	lsls	r3, r3, #16
240599de:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
240599e0:	68fb      	ldr	r3, [r7, #12]
240599e2:	681b      	ldr	r3, [r3, #0]
240599e4:	461a      	mov	r2, r3
240599e6:	687b      	ldr	r3, [r7, #4]
240599e8:	01db      	lsls	r3, r3, #7
240599ea:	4413      	add	r3, r2
240599ec:	3384      	adds	r3, #132	; 0x84
240599ee:	689b      	ldr	r3, [r3, #8]
240599f0:	68fa      	ldr	r2, [r7, #12]
240599f2:	6812      	ldr	r2, [r2, #0]
240599f4:	4611      	mov	r1, r2
240599f6:	687a      	ldr	r2, [r7, #4]
240599f8:	01d2      	lsls	r2, r2, #7
240599fa:	440a      	add	r2, r1
240599fc:	3284      	adds	r2, #132	; 0x84
240599fe:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
24059a02:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
24059a04:	68bb      	ldr	r3, [r7, #8]
24059a06:	689a      	ldr	r2, [r3, #8]
24059a08:	68fb      	ldr	r3, [r7, #12]
24059a0a:	681b      	ldr	r3, [r3, #0]
24059a0c:	68db      	ldr	r3, [r3, #12]
24059a0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
24059a12:	4413      	add	r3, r2
24059a14:	1c5a      	adds	r2, r3, #1
24059a16:	68fb      	ldr	r3, [r7, #12]
24059a18:	681b      	ldr	r3, [r3, #0]
24059a1a:	4619      	mov	r1, r3
24059a1c:	687b      	ldr	r3, [r7, #4]
24059a1e:	01db      	lsls	r3, r3, #7
24059a20:	440b      	add	r3, r1
24059a22:	3384      	adds	r3, #132	; 0x84
24059a24:	4619      	mov	r1, r3
24059a26:	69fb      	ldr	r3, [r7, #28]
24059a28:	4313      	orrs	r3, r2
24059a2a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
24059a2c:	68fb      	ldr	r3, [r7, #12]
24059a2e:	681b      	ldr	r3, [r3, #0]
24059a30:	461a      	mov	r2, r3
24059a32:	687b      	ldr	r3, [r7, #4]
24059a34:	01db      	lsls	r3, r3, #7
24059a36:	4413      	add	r3, r2
24059a38:	3384      	adds	r3, #132	; 0x84
24059a3a:	691b      	ldr	r3, [r3, #16]
24059a3c:	68fa      	ldr	r2, [r7, #12]
24059a3e:	6812      	ldr	r2, [r2, #0]
24059a40:	4611      	mov	r1, r2
24059a42:	687a      	ldr	r2, [r7, #4]
24059a44:	01d2      	lsls	r2, r2, #7
24059a46:	440a      	add	r2, r1
24059a48:	3284      	adds	r2, #132	; 0x84
24059a4a:	f023 0307 	bic.w	r3, r3, #7
24059a4e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
24059a50:	68fb      	ldr	r3, [r7, #12]
24059a52:	681b      	ldr	r3, [r3, #0]
24059a54:	461a      	mov	r2, r3
24059a56:	687b      	ldr	r3, [r7, #4]
24059a58:	01db      	lsls	r3, r3, #7
24059a5a:	4413      	add	r3, r2
24059a5c:	3384      	adds	r3, #132	; 0x84
24059a5e:	461a      	mov	r2, r3
24059a60:	68bb      	ldr	r3, [r7, #8]
24059a62:	691b      	ldr	r3, [r3, #16]
24059a64:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
24059a66:	68bb      	ldr	r3, [r7, #8]
24059a68:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
24059a6c:	021b      	lsls	r3, r3, #8
24059a6e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
24059a70:	68bb      	ldr	r3, [r7, #8]
24059a72:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
24059a76:	041b      	lsls	r3, r3, #16
24059a78:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
24059a7a:	68bb      	ldr	r3, [r7, #8]
24059a7c:	699b      	ldr	r3, [r3, #24]
24059a7e:	061b      	lsls	r3, r3, #24
24059a80:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
24059a82:	68fb      	ldr	r3, [r7, #12]
24059a84:	681b      	ldr	r3, [r3, #0]
24059a86:	461a      	mov	r2, r3
24059a88:	687b      	ldr	r3, [r7, #4]
24059a8a:	01db      	lsls	r3, r3, #7
24059a8c:	4413      	add	r3, r2
24059a8e:	3384      	adds	r3, #132	; 0x84
24059a90:	699b      	ldr	r3, [r3, #24]
24059a92:	68fb      	ldr	r3, [r7, #12]
24059a94:	681b      	ldr	r3, [r3, #0]
24059a96:	461a      	mov	r2, r3
24059a98:	687b      	ldr	r3, [r7, #4]
24059a9a:	01db      	lsls	r3, r3, #7
24059a9c:	4413      	add	r3, r2
24059a9e:	3384      	adds	r3, #132	; 0x84
24059aa0:	461a      	mov	r2, r3
24059aa2:	2300      	movs	r3, #0
24059aa4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
24059aa6:	68bb      	ldr	r3, [r7, #8]
24059aa8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
24059aac:	461a      	mov	r2, r3
24059aae:	69fb      	ldr	r3, [r7, #28]
24059ab0:	431a      	orrs	r2, r3
24059ab2:	69bb      	ldr	r3, [r7, #24]
24059ab4:	431a      	orrs	r2, r3
24059ab6:	68fb      	ldr	r3, [r7, #12]
24059ab8:	681b      	ldr	r3, [r3, #0]
24059aba:	4619      	mov	r1, r3
24059abc:	687b      	ldr	r3, [r7, #4]
24059abe:	01db      	lsls	r3, r3, #7
24059ac0:	440b      	add	r3, r1
24059ac2:	3384      	adds	r3, #132	; 0x84
24059ac4:	4619      	mov	r1, r3
24059ac6:	697b      	ldr	r3, [r7, #20]
24059ac8:	4313      	orrs	r3, r2
24059aca:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
24059acc:	68fb      	ldr	r3, [r7, #12]
24059ace:	681b      	ldr	r3, [r3, #0]
24059ad0:	461a      	mov	r2, r3
24059ad2:	687b      	ldr	r3, [r7, #4]
24059ad4:	01db      	lsls	r3, r3, #7
24059ad6:	4413      	add	r3, r2
24059ad8:	3384      	adds	r3, #132	; 0x84
24059ada:	695b      	ldr	r3, [r3, #20]
24059adc:	68fa      	ldr	r2, [r7, #12]
24059ade:	6812      	ldr	r2, [r2, #0]
24059ae0:	4611      	mov	r1, r2
24059ae2:	687a      	ldr	r2, [r7, #4]
24059ae4:	01d2      	lsls	r2, r2, #7
24059ae6:	440a      	add	r2, r1
24059ae8:	3284      	adds	r2, #132	; 0x84
24059aea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
24059aee:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
24059af0:	68fb      	ldr	r3, [r7, #12]
24059af2:	681b      	ldr	r3, [r3, #0]
24059af4:	461a      	mov	r2, r3
24059af6:	687b      	ldr	r3, [r7, #4]
24059af8:	01db      	lsls	r3, r3, #7
24059afa:	4413      	add	r3, r2
24059afc:	3384      	adds	r3, #132	; 0x84
24059afe:	461a      	mov	r2, r3
24059b00:	68bb      	ldr	r3, [r7, #8]
24059b02:	695b      	ldr	r3, [r3, #20]
24059b04:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
24059b06:	68fb      	ldr	r3, [r7, #12]
24059b08:	681b      	ldr	r3, [r3, #0]
24059b0a:	461a      	mov	r2, r3
24059b0c:	687b      	ldr	r3, [r7, #4]
24059b0e:	01db      	lsls	r3, r3, #7
24059b10:	4413      	add	r3, r2
24059b12:	3384      	adds	r3, #132	; 0x84
24059b14:	69da      	ldr	r2, [r3, #28]
24059b16:	68fb      	ldr	r3, [r7, #12]
24059b18:	681b      	ldr	r3, [r3, #0]
24059b1a:	4619      	mov	r1, r3
24059b1c:	687b      	ldr	r3, [r7, #4]
24059b1e:	01db      	lsls	r3, r3, #7
24059b20:	440b      	add	r3, r1
24059b22:	3384      	adds	r3, #132	; 0x84
24059b24:	4619      	mov	r1, r3
24059b26:	4b58      	ldr	r3, [pc, #352]	; (24059c88 <LTDC_SetConfig+0x32c>)
24059b28:	4013      	ands	r3, r2
24059b2a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
24059b2c:	68bb      	ldr	r3, [r7, #8]
24059b2e:	69da      	ldr	r2, [r3, #28]
24059b30:	68bb      	ldr	r3, [r7, #8]
24059b32:	6a1b      	ldr	r3, [r3, #32]
24059b34:	68f9      	ldr	r1, [r7, #12]
24059b36:	6809      	ldr	r1, [r1, #0]
24059b38:	4608      	mov	r0, r1
24059b3a:	6879      	ldr	r1, [r7, #4]
24059b3c:	01c9      	lsls	r1, r1, #7
24059b3e:	4401      	add	r1, r0
24059b40:	3184      	adds	r1, #132	; 0x84
24059b42:	4313      	orrs	r3, r2
24059b44:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
24059b46:	68fb      	ldr	r3, [r7, #12]
24059b48:	681b      	ldr	r3, [r3, #0]
24059b4a:	461a      	mov	r2, r3
24059b4c:	687b      	ldr	r3, [r7, #4]
24059b4e:	01db      	lsls	r3, r3, #7
24059b50:	4413      	add	r3, r2
24059b52:	3384      	adds	r3, #132	; 0x84
24059b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24059b56:	68fb      	ldr	r3, [r7, #12]
24059b58:	681b      	ldr	r3, [r3, #0]
24059b5a:	461a      	mov	r2, r3
24059b5c:	687b      	ldr	r3, [r7, #4]
24059b5e:	01db      	lsls	r3, r3, #7
24059b60:	4413      	add	r3, r2
24059b62:	3384      	adds	r3, #132	; 0x84
24059b64:	461a      	mov	r2, r3
24059b66:	2300      	movs	r3, #0
24059b68:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
24059b6a:	68fb      	ldr	r3, [r7, #12]
24059b6c:	681b      	ldr	r3, [r3, #0]
24059b6e:	461a      	mov	r2, r3
24059b70:	687b      	ldr	r3, [r7, #4]
24059b72:	01db      	lsls	r3, r3, #7
24059b74:	4413      	add	r3, r2
24059b76:	3384      	adds	r3, #132	; 0x84
24059b78:	461a      	mov	r2, r3
24059b7a:	68bb      	ldr	r3, [r7, #8]
24059b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24059b7e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
24059b80:	68bb      	ldr	r3, [r7, #8]
24059b82:	691b      	ldr	r3, [r3, #16]
24059b84:	2b00      	cmp	r3, #0
24059b86:	d102      	bne.n	24059b8e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
24059b88:	2304      	movs	r3, #4
24059b8a:	61fb      	str	r3, [r7, #28]
24059b8c:	e01b      	b.n	24059bc6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
24059b8e:	68bb      	ldr	r3, [r7, #8]
24059b90:	691b      	ldr	r3, [r3, #16]
24059b92:	2b01      	cmp	r3, #1
24059b94:	d102      	bne.n	24059b9c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
24059b96:	2303      	movs	r3, #3
24059b98:	61fb      	str	r3, [r7, #28]
24059b9a:	e014      	b.n	24059bc6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
24059b9c:	68bb      	ldr	r3, [r7, #8]
24059b9e:	691b      	ldr	r3, [r3, #16]
24059ba0:	2b04      	cmp	r3, #4
24059ba2:	d00b      	beq.n	24059bbc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
24059ba4:	68bb      	ldr	r3, [r7, #8]
24059ba6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
24059ba8:	2b02      	cmp	r3, #2
24059baa:	d007      	beq.n	24059bbc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
24059bac:	68bb      	ldr	r3, [r7, #8]
24059bae:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
24059bb0:	2b03      	cmp	r3, #3
24059bb2:	d003      	beq.n	24059bbc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
24059bb4:	68bb      	ldr	r3, [r7, #8]
24059bb6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
24059bb8:	2b07      	cmp	r3, #7
24059bba:	d102      	bne.n	24059bc2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
24059bbc:	2302      	movs	r3, #2
24059bbe:	61fb      	str	r3, [r7, #28]
24059bc0:	e001      	b.n	24059bc6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
24059bc2:	2301      	movs	r3, #1
24059bc4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
24059bc6:	68fb      	ldr	r3, [r7, #12]
24059bc8:	681b      	ldr	r3, [r3, #0]
24059bca:	461a      	mov	r2, r3
24059bcc:	687b      	ldr	r3, [r7, #4]
24059bce:	01db      	lsls	r3, r3, #7
24059bd0:	4413      	add	r3, r2
24059bd2:	3384      	adds	r3, #132	; 0x84
24059bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24059bd6:	68fa      	ldr	r2, [r7, #12]
24059bd8:	6812      	ldr	r2, [r2, #0]
24059bda:	4611      	mov	r1, r2
24059bdc:	687a      	ldr	r2, [r7, #4]
24059bde:	01d2      	lsls	r2, r2, #7
24059be0:	440a      	add	r2, r1
24059be2:	3284      	adds	r2, #132	; 0x84
24059be4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
24059be8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
24059bea:	68bb      	ldr	r3, [r7, #8]
24059bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24059bee:	69fa      	ldr	r2, [r7, #28]
24059bf0:	fb02 f303 	mul.w	r3, r2, r3
24059bf4:	041a      	lsls	r2, r3, #16
24059bf6:	68bb      	ldr	r3, [r7, #8]
24059bf8:	6859      	ldr	r1, [r3, #4]
24059bfa:	68bb      	ldr	r3, [r7, #8]
24059bfc:	681b      	ldr	r3, [r3, #0]
24059bfe:	1acb      	subs	r3, r1, r3
24059c00:	69f9      	ldr	r1, [r7, #28]
24059c02:	fb01 f303 	mul.w	r3, r1, r3
24059c06:	3307      	adds	r3, #7
24059c08:	68f9      	ldr	r1, [r7, #12]
24059c0a:	6809      	ldr	r1, [r1, #0]
24059c0c:	4608      	mov	r0, r1
24059c0e:	6879      	ldr	r1, [r7, #4]
24059c10:	01c9      	lsls	r1, r1, #7
24059c12:	4401      	add	r1, r0
24059c14:	3184      	adds	r1, #132	; 0x84
24059c16:	4313      	orrs	r3, r2
24059c18:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
24059c1a:	68fb      	ldr	r3, [r7, #12]
24059c1c:	681b      	ldr	r3, [r3, #0]
24059c1e:	461a      	mov	r2, r3
24059c20:	687b      	ldr	r3, [r7, #4]
24059c22:	01db      	lsls	r3, r3, #7
24059c24:	4413      	add	r3, r2
24059c26:	3384      	adds	r3, #132	; 0x84
24059c28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
24059c2a:	68fb      	ldr	r3, [r7, #12]
24059c2c:	681b      	ldr	r3, [r3, #0]
24059c2e:	4619      	mov	r1, r3
24059c30:	687b      	ldr	r3, [r7, #4]
24059c32:	01db      	lsls	r3, r3, #7
24059c34:	440b      	add	r3, r1
24059c36:	3384      	adds	r3, #132	; 0x84
24059c38:	4619      	mov	r1, r3
24059c3a:	4b14      	ldr	r3, [pc, #80]	; (24059c8c <LTDC_SetConfig+0x330>)
24059c3c:	4013      	ands	r3, r2
24059c3e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
24059c40:	68fb      	ldr	r3, [r7, #12]
24059c42:	681b      	ldr	r3, [r3, #0]
24059c44:	461a      	mov	r2, r3
24059c46:	687b      	ldr	r3, [r7, #4]
24059c48:	01db      	lsls	r3, r3, #7
24059c4a:	4413      	add	r3, r2
24059c4c:	3384      	adds	r3, #132	; 0x84
24059c4e:	461a      	mov	r2, r3
24059c50:	68bb      	ldr	r3, [r7, #8]
24059c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24059c54:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
24059c56:	68fb      	ldr	r3, [r7, #12]
24059c58:	681b      	ldr	r3, [r3, #0]
24059c5a:	461a      	mov	r2, r3
24059c5c:	687b      	ldr	r3, [r7, #4]
24059c5e:	01db      	lsls	r3, r3, #7
24059c60:	4413      	add	r3, r2
24059c62:	3384      	adds	r3, #132	; 0x84
24059c64:	681b      	ldr	r3, [r3, #0]
24059c66:	68fa      	ldr	r2, [r7, #12]
24059c68:	6812      	ldr	r2, [r2, #0]
24059c6a:	4611      	mov	r1, r2
24059c6c:	687a      	ldr	r2, [r7, #4]
24059c6e:	01d2      	lsls	r2, r2, #7
24059c70:	440a      	add	r2, r1
24059c72:	3284      	adds	r2, #132	; 0x84
24059c74:	f043 0301 	orr.w	r3, r3, #1
24059c78:	6013      	str	r3, [r2, #0]
}
24059c7a:	bf00      	nop
24059c7c:	3724      	adds	r7, #36	; 0x24
24059c7e:	46bd      	mov	sp, r7
24059c80:	f85d 7b04 	ldr.w	r7, [sp], #4
24059c84:	4770      	bx	lr
24059c86:	bf00      	nop
24059c88:	fffff8f8 	.word	0xfffff8f8
24059c8c:	fffff800 	.word	0xfffff800

24059c90 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
24059c90:	b480      	push	{r7}
24059c92:	b083      	sub	sp, #12
24059c94:	af00      	add	r7, sp, #0
24059c96:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
24059c98:	687b      	ldr	r3, [r7, #4]
24059c9a:	2b00      	cmp	r3, #0
24059c9c:	d101      	bne.n	24059ca2 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
24059c9e:	2301      	movs	r3, #1
24059ca0:	e017      	b.n	24059cd2 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
24059ca2:	687b      	ldr	r3, [r7, #4]
24059ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
24059ca8:	b2db      	uxtb	r3, r3
24059caa:	2b02      	cmp	r3, #2
24059cac:	d004      	beq.n	24059cb8 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
24059cae:	687b      	ldr	r3, [r7, #4]
24059cb0:	2280      	movs	r2, #128	; 0x80
24059cb2:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
24059cb4:	2301      	movs	r3, #1
24059cb6:	e00c      	b.n	24059cd2 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
24059cb8:	687b      	ldr	r3, [r7, #4]
24059cba:	2204      	movs	r2, #4
24059cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
24059cc0:	687b      	ldr	r3, [r7, #4]
24059cc2:	681b      	ldr	r3, [r3, #0]
24059cc4:	68da      	ldr	r2, [r3, #12]
24059cc6:	687b      	ldr	r3, [r7, #4]
24059cc8:	681b      	ldr	r3, [r3, #0]
24059cca:	f022 0201 	bic.w	r2, r2, #1
24059cce:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
24059cd0:	2300      	movs	r3, #0
}
24059cd2:	4618      	mov	r0, r3
24059cd4:	370c      	adds	r7, #12
24059cd6:	46bd      	mov	sp, r7
24059cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
24059cdc:	4770      	bx	lr
	...

24059ce0 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
24059ce0:	b580      	push	{r7, lr}
24059ce2:	b086      	sub	sp, #24
24059ce4:	af02      	add	r7, sp, #8
24059ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
24059ce8:	2300      	movs	r3, #0
24059cea:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
24059cec:	f7fa f86e 	bl	24053dcc <HAL_GetTick>
24059cf0:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
24059cf2:	687b      	ldr	r3, [r7, #4]
24059cf4:	2b00      	cmp	r3, #0
24059cf6:	d102      	bne.n	24059cfe <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
24059cf8:	2301      	movs	r3, #1
24059cfa:	73fb      	strb	r3, [r7, #15]
24059cfc:	e0a5      	b.n	24059e4a <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
24059cfe:	687b      	ldr	r3, [r7, #4]
24059d00:	2200      	movs	r2, #0
24059d02:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
24059d04:	687b      	ldr	r3, [r7, #4]
24059d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24059d08:	2b00      	cmp	r3, #0
24059d0a:	f040 809e 	bne.w	24059e4a <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
24059d0e:	6878      	ldr	r0, [r7, #4]
24059d10:	f7f9 fb44 	bl	2405339c <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
24059d14:	f241 3188 	movw	r1, #5000	; 0x1388
24059d18:	6878      	ldr	r0, [r7, #4]
24059d1a:	f000 fc21 	bl	2405a560 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
24059d1e:	687b      	ldr	r3, [r7, #4]
24059d20:	681b      	ldr	r3, [r3, #0]
24059d22:	689a      	ldr	r2, [r3, #8]
24059d24:	4b4b      	ldr	r3, [pc, #300]	; (24059e54 <HAL_OSPI_Init+0x174>)
24059d26:	4013      	ands	r3, r2
24059d28:	687a      	ldr	r2, [r7, #4]
24059d2a:	68d1      	ldr	r1, [r2, #12]
24059d2c:	687a      	ldr	r2, [r7, #4]
24059d2e:	6912      	ldr	r2, [r2, #16]
24059d30:	3a01      	subs	r2, #1
24059d32:	0412      	lsls	r2, r2, #16
24059d34:	4311      	orrs	r1, r2
24059d36:	687a      	ldr	r2, [r7, #4]
24059d38:	6952      	ldr	r2, [r2, #20]
24059d3a:	3a01      	subs	r2, #1
24059d3c:	0212      	lsls	r2, r2, #8
24059d3e:	4311      	orrs	r1, r2
24059d40:	687a      	ldr	r2, [r7, #4]
24059d42:	6b52      	ldr	r2, [r2, #52]	; 0x34
24059d44:	4311      	orrs	r1, r2
24059d46:	687a      	ldr	r2, [r7, #4]
24059d48:	69d2      	ldr	r2, [r2, #28]
24059d4a:	4311      	orrs	r1, r2
24059d4c:	687a      	ldr	r2, [r7, #4]
24059d4e:	6812      	ldr	r2, [r2, #0]
24059d50:	430b      	orrs	r3, r1
24059d52:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
24059d54:	687b      	ldr	r3, [r7, #4]
24059d56:	681b      	ldr	r3, [r3, #0]
24059d58:	68db      	ldr	r3, [r3, #12]
24059d5a:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
24059d5e:	687b      	ldr	r3, [r7, #4]
24059d60:	6a1a      	ldr	r2, [r3, #32]
24059d62:	687b      	ldr	r3, [r7, #4]
24059d64:	681b      	ldr	r3, [r3, #0]
24059d66:	430a      	orrs	r2, r1
24059d68:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
24059d6a:	687b      	ldr	r3, [r7, #4]
24059d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24059d6e:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
24059d70:	687b      	ldr	r3, [r7, #4]
24059d72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
24059d74:	687b      	ldr	r3, [r7, #4]
24059d76:	681b      	ldr	r3, [r3, #0]
24059d78:	430a      	orrs	r2, r1
24059d7a:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
24059d7c:	687b      	ldr	r3, [r7, #4]
24059d7e:	681b      	ldr	r3, [r3, #0]
24059d80:	687a      	ldr	r2, [r7, #4]
24059d82:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
24059d84:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
24059d86:	687b      	ldr	r3, [r7, #4]
24059d88:	681b      	ldr	r3, [r3, #0]
24059d8a:	681b      	ldr	r3, [r3, #0]
24059d8c:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
24059d90:	687b      	ldr	r3, [r7, #4]
24059d92:	685b      	ldr	r3, [r3, #4]
24059d94:	3b01      	subs	r3, #1
24059d96:	021a      	lsls	r2, r3, #8
24059d98:	687b      	ldr	r3, [r7, #4]
24059d9a:	681b      	ldr	r3, [r3, #0]
24059d9c:	430a      	orrs	r2, r1
24059d9e:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
24059da0:	687b      	ldr	r3, [r7, #4]
24059da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24059da4:	9300      	str	r3, [sp, #0]
24059da6:	68bb      	ldr	r3, [r7, #8]
24059da8:	2200      	movs	r2, #0
24059daa:	2120      	movs	r1, #32
24059dac:	6878      	ldr	r0, [r7, #4]
24059dae:	f001 f90b 	bl	2405afc8 <OSPI_WaitFlagStateUntilTimeout>
24059db2:	4603      	mov	r3, r0
24059db4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
24059db6:	7bfb      	ldrb	r3, [r7, #15]
24059db8:	2b00      	cmp	r3, #0
24059dba:	d146      	bne.n	24059e4a <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
24059dbc:	687b      	ldr	r3, [r7, #4]
24059dbe:	681b      	ldr	r3, [r3, #0]
24059dc0:	68db      	ldr	r3, [r3, #12]
24059dc2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
24059dc6:	687b      	ldr	r3, [r7, #4]
24059dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24059dca:	1e5a      	subs	r2, r3, #1
24059dcc:	687b      	ldr	r3, [r7, #4]
24059dce:	681b      	ldr	r3, [r3, #0]
24059dd0:	430a      	orrs	r2, r1
24059dd2:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
24059dd4:	687b      	ldr	r3, [r7, #4]
24059dd6:	681b      	ldr	r3, [r3, #0]
24059dd8:	681b      	ldr	r3, [r3, #0]
24059dda:	f023 0140 	bic.w	r1, r3, #64	; 0x40
24059dde:	687b      	ldr	r3, [r7, #4]
24059de0:	689a      	ldr	r2, [r3, #8]
24059de2:	687b      	ldr	r3, [r7, #4]
24059de4:	681b      	ldr	r3, [r3, #0]
24059de6:	430a      	orrs	r2, r1
24059de8:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
24059dea:	687b      	ldr	r3, [r7, #4]
24059dec:	681b      	ldr	r3, [r3, #0]
24059dee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
24059df2:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
24059df6:	687b      	ldr	r3, [r7, #4]
24059df8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
24059dfa:	687b      	ldr	r3, [r7, #4]
24059dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24059dfe:	431a      	orrs	r2, r3
24059e00:	687b      	ldr	r3, [r7, #4]
24059e02:	681b      	ldr	r3, [r3, #0]
24059e04:	430a      	orrs	r2, r1
24059e06:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
24059e0a:	687b      	ldr	r3, [r7, #4]
24059e0c:	681b      	ldr	r3, [r3, #0]
24059e0e:	681a      	ldr	r2, [r3, #0]
24059e10:	687b      	ldr	r3, [r7, #4]
24059e12:	681b      	ldr	r3, [r3, #0]
24059e14:	f042 0201 	orr.w	r2, r2, #1
24059e18:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
24059e1a:	687b      	ldr	r3, [r7, #4]
24059e1c:	699b      	ldr	r3, [r3, #24]
24059e1e:	2b02      	cmp	r3, #2
24059e20:	d107      	bne.n	24059e32 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
24059e22:	687b      	ldr	r3, [r7, #4]
24059e24:	681b      	ldr	r3, [r3, #0]
24059e26:	689a      	ldr	r2, [r3, #8]
24059e28:	687b      	ldr	r3, [r7, #4]
24059e2a:	681b      	ldr	r3, [r3, #0]
24059e2c:	f042 0202 	orr.w	r2, r2, #2
24059e30:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
24059e32:	687b      	ldr	r3, [r7, #4]
24059e34:	68db      	ldr	r3, [r3, #12]
24059e36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
24059e3a:	d103      	bne.n	24059e44 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
24059e3c:	687b      	ldr	r3, [r7, #4]
24059e3e:	2201      	movs	r2, #1
24059e40:	651a      	str	r2, [r3, #80]	; 0x50
24059e42:	e002      	b.n	24059e4a <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
24059e44:	687b      	ldr	r3, [r7, #4]
24059e46:	2202      	movs	r2, #2
24059e48:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
24059e4a:	7bfb      	ldrb	r3, [r7, #15]
}
24059e4c:	4618      	mov	r0, r3
24059e4e:	3710      	adds	r7, #16
24059e50:	46bd      	mov	sp, r7
24059e52:	bd80      	pop	{r7, pc}
24059e54:	f8e0f8f4 	.word	0xf8e0f8f4

24059e58 <HAL_OSPI_IRQHandler>:
  * @brief  Handle OSPI interrupt request.
  * @param  hospi : OSPI handle
  * @retval None
  */
void HAL_OSPI_IRQHandler(OSPI_HandleTypeDef *hospi)
{
24059e58:	b580      	push	{r7, lr}
24059e5a:	b086      	sub	sp, #24
24059e5c:	af00      	add	r7, sp, #0
24059e5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
24059e60:	687b      	ldr	r3, [r7, #4]
24059e62:	681b      	ldr	r3, [r3, #0]
24059e64:	3350      	adds	r3, #80	; 0x50
24059e66:	617b      	str	r3, [r7, #20]
  uint32_t flag           = hospi->Instance->SR;
24059e68:	687b      	ldr	r3, [r7, #4]
24059e6a:	681b      	ldr	r3, [r3, #0]
24059e6c:	6a1b      	ldr	r3, [r3, #32]
24059e6e:	613b      	str	r3, [r7, #16]
  uint32_t itsource       = hospi->Instance->CR;
24059e70:	687b      	ldr	r3, [r7, #4]
24059e72:	681b      	ldr	r3, [r3, #0]
24059e74:	681b      	ldr	r3, [r3, #0]
24059e76:	60fb      	str	r3, [r7, #12]
  uint32_t currentstate   = hospi->State;
24059e78:	687b      	ldr	r3, [r7, #4]
24059e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24059e7c:	60bb      	str	r3, [r7, #8]

  /* OctoSPI fifo threshold interrupt occurred -------------------------------*/
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
24059e7e:	693b      	ldr	r3, [r7, #16]
24059e80:	f003 0304 	and.w	r3, r3, #4
24059e84:	2b00      	cmp	r3, #0
24059e86:	d03a      	beq.n	24059efe <HAL_OSPI_IRQHandler+0xa6>
24059e88:	68fb      	ldr	r3, [r7, #12]
24059e8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
24059e8e:	2b00      	cmp	r3, #0
24059e90:	d035      	beq.n	24059efe <HAL_OSPI_IRQHandler+0xa6>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
24059e92:	68bb      	ldr	r3, [r7, #8]
24059e94:	2b18      	cmp	r3, #24
24059e96:	d10f      	bne.n	24059eb8 <HAL_OSPI_IRQHandler+0x60>
    {
      /* Write a data in the fifo */
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
24059e98:	687b      	ldr	r3, [r7, #4]
24059e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24059e9c:	781a      	ldrb	r2, [r3, #0]
24059e9e:	697b      	ldr	r3, [r7, #20]
24059ea0:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
24059ea2:	687b      	ldr	r3, [r7, #4]
24059ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24059ea6:	1c5a      	adds	r2, r3, #1
24059ea8:	687b      	ldr	r3, [r7, #4]
24059eaa:	641a      	str	r2, [r3, #64]	; 0x40
      hospi->XferCount--;
24059eac:	687b      	ldr	r3, [r7, #4]
24059eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24059eb0:	1e5a      	subs	r2, r3, #1
24059eb2:	687b      	ldr	r3, [r7, #4]
24059eb4:	649a      	str	r2, [r3, #72]	; 0x48
24059eb6:	e012      	b.n	24059ede <HAL_OSPI_IRQHandler+0x86>
    }
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
24059eb8:	68bb      	ldr	r3, [r7, #8]
24059eba:	2b28      	cmp	r3, #40	; 0x28
24059ebc:	d10f      	bne.n	24059ede <HAL_OSPI_IRQHandler+0x86>
    {
      /* Read a data from the fifo */
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
24059ebe:	687b      	ldr	r3, [r7, #4]
24059ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24059ec2:	697a      	ldr	r2, [r7, #20]
24059ec4:	7812      	ldrb	r2, [r2, #0]
24059ec6:	b2d2      	uxtb	r2, r2
24059ec8:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
24059eca:	687b      	ldr	r3, [r7, #4]
24059ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24059ece:	1c5a      	adds	r2, r3, #1
24059ed0:	687b      	ldr	r3, [r7, #4]
24059ed2:	641a      	str	r2, [r3, #64]	; 0x40
      hospi->XferCount--;
24059ed4:	687b      	ldr	r3, [r7, #4]
24059ed6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24059ed8:	1e5a      	subs	r2, r3, #1
24059eda:	687b      	ldr	r3, [r7, #4]
24059edc:	649a      	str	r2, [r3, #72]	; 0x48
    else
    {
      /* Nothing to do */
    }

    if (hospi->XferCount == 0U)
24059ede:	687b      	ldr	r3, [r7, #4]
24059ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24059ee2:	2b00      	cmp	r3, #0
24059ee4:	d107      	bne.n	24059ef6 <HAL_OSPI_IRQHandler+0x9e>
    {
      /* All data have been received or transmitted for the transfer */
      /* Disable fifo threshold interrupt */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
24059ee6:	687b      	ldr	r3, [r7, #4]
24059ee8:	681b      	ldr	r3, [r3, #0]
24059eea:	681a      	ldr	r2, [r3, #0]
24059eec:	687b      	ldr	r3, [r7, #4]
24059eee:	681b      	ldr	r3, [r3, #0]
24059ef0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
24059ef4:	601a      	str	r2, [r3, #0]

    /* Fifo threshold callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->FifoThresholdCallback(hospi);
#else
    HAL_OSPI_FifoThresholdCallback(hospi);
24059ef6:	6878      	ldr	r0, [r7, #4]
24059ef8:	f000 faf6 	bl	2405a4e8 <HAL_OSPI_FifoThresholdCallback>
24059efc:	e0e7      	b.n	2405a0ce <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
  /* OctoSPI transfer complete interrupt occurred ----------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
24059efe:	693b      	ldr	r3, [r7, #16]
24059f00:	f003 0302 	and.w	r3, r3, #2
24059f04:	2b00      	cmp	r3, #0
24059f06:	d067      	beq.n	24059fd8 <HAL_OSPI_IRQHandler+0x180>
24059f08:	68fb      	ldr	r3, [r7, #12]
24059f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24059f0e:	2b00      	cmp	r3, #0
24059f10:	d062      	beq.n	24059fd8 <HAL_OSPI_IRQHandler+0x180>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
24059f12:	68bb      	ldr	r3, [r7, #8]
24059f14:	2b28      	cmp	r3, #40	; 0x28
24059f16:	d131      	bne.n	24059f7c <HAL_OSPI_IRQHandler+0x124>
    {
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
24059f18:	687b      	ldr	r3, [r7, #4]
24059f1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24059f1c:	2b00      	cmp	r3, #0
24059f1e:	d015      	beq.n	24059f4c <HAL_OSPI_IRQHandler+0xf4>
24059f20:	693b      	ldr	r3, [r7, #16]
24059f22:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
24059f26:	2b00      	cmp	r3, #0
24059f28:	d010      	beq.n	24059f4c <HAL_OSPI_IRQHandler+0xf4>
      {
        /* Read the last data received in the fifo */
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
24059f2a:	687b      	ldr	r3, [r7, #4]
24059f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24059f2e:	697a      	ldr	r2, [r7, #20]
24059f30:	7812      	ldrb	r2, [r2, #0]
24059f32:	b2d2      	uxtb	r2, r2
24059f34:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
24059f36:	687b      	ldr	r3, [r7, #4]
24059f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24059f3a:	1c5a      	adds	r2, r3, #1
24059f3c:	687b      	ldr	r3, [r7, #4]
24059f3e:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
24059f40:	687b      	ldr	r3, [r7, #4]
24059f42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24059f44:	1e5a      	subs	r2, r3, #1
24059f46:	687b      	ldr	r3, [r7, #4]
24059f48:	649a      	str	r2, [r3, #72]	; 0x48
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
24059f4a:	e0bd      	b.n	2405a0c8 <HAL_OSPI_IRQHandler+0x270>
      }
      else if(hospi->XferCount == 0U)
24059f4c:	687b      	ldr	r3, [r7, #4]
24059f4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24059f50:	2b00      	cmp	r3, #0
24059f52:	f040 80b9 	bne.w	2405a0c8 <HAL_OSPI_IRQHandler+0x270>
      {
        /* Clear flag */
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
24059f56:	687b      	ldr	r3, [r7, #4]
24059f58:	681b      	ldr	r3, [r3, #0]
24059f5a:	2202      	movs	r2, #2
24059f5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Disable the interrupts */
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
24059f5e:	687b      	ldr	r3, [r7, #4]
24059f60:	681b      	ldr	r3, [r3, #0]
24059f62:	681a      	ldr	r2, [r3, #0]
24059f64:	687b      	ldr	r3, [r7, #4]
24059f66:	681b      	ldr	r3, [r3, #0]
24059f68:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
24059f6c:	601a      	str	r2, [r3, #0]

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
24059f6e:	687b      	ldr	r3, [r7, #4]
24059f70:	2202      	movs	r2, #2
24059f72:	651a      	str	r2, [r3, #80]	; 0x50

        /* RX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->RxCpltCallback(hospi);
#else
        HAL_OSPI_RxCpltCallback(hospi);
24059f74:	6878      	ldr	r0, [r7, #4]
24059f76:	f000 facb 	bl	2405a510 <HAL_OSPI_RxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
24059f7a:	e0a5      	b.n	2405a0c8 <HAL_OSPI_IRQHandler+0x270>
      }
    }
    else
    {
      /* Clear flag */
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
24059f7c:	687b      	ldr	r3, [r7, #4]
24059f7e:	681b      	ldr	r3, [r3, #0]
24059f80:	2202      	movs	r2, #2
24059f82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
24059f84:	687b      	ldr	r3, [r7, #4]
24059f86:	681b      	ldr	r3, [r3, #0]
24059f88:	681a      	ldr	r2, [r3, #0]
24059f8a:	687b      	ldr	r3, [r7, #4]
24059f8c:	681b      	ldr	r3, [r3, #0]
24059f8e:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
24059f92:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
24059f94:	687b      	ldr	r3, [r7, #4]
24059f96:	2202      	movs	r2, #2
24059f98:	651a      	str	r2, [r3, #80]	; 0x50

      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
24059f9a:	68bb      	ldr	r3, [r7, #8]
24059f9c:	2b18      	cmp	r3, #24
24059f9e:	d103      	bne.n	24059fa8 <HAL_OSPI_IRQHandler+0x150>
      {
        /* TX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->TxCpltCallback(hospi);
#else
        HAL_OSPI_TxCpltCallback(hospi);
24059fa0:	6878      	ldr	r0, [r7, #4]
24059fa2:	f000 fabf 	bl	2405a524 <HAL_OSPI_TxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
24059fa6:	e08f      	b.n	2405a0c8 <HAL_OSPI_IRQHandler+0x270>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
24059fa8:	68bb      	ldr	r3, [r7, #8]
24059faa:	2b08      	cmp	r3, #8
24059fac:	d103      	bne.n	24059fb6 <HAL_OSPI_IRQHandler+0x15e>
      {
        /* Command complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->CmdCpltCallback(hospi);
#else
        HAL_OSPI_CmdCpltCallback(hospi);
24059fae:	6878      	ldr	r0, [r7, #4]
24059fb0:	f000 faa4 	bl	2405a4fc <HAL_OSPI_CmdCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
24059fb4:	e088      	b.n	2405a0c8 <HAL_OSPI_IRQHandler+0x270>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_ABORT)
24059fb6:	68bb      	ldr	r3, [r7, #8]
24059fb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24059fbc:	f040 8084 	bne.w	2405a0c8 <HAL_OSPI_IRQHandler+0x270>
      {
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
24059fc0:	687b      	ldr	r3, [r7, #4]
24059fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24059fc4:	2b00      	cmp	r3, #0
24059fc6:	d103      	bne.n	24059fd0 <HAL_OSPI_IRQHandler+0x178>
          /* Abort called by the user */
          /* Abort complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->AbortCpltCallback(hospi);
#else
          HAL_OSPI_AbortCpltCallback(hospi);
24059fc8:	6878      	ldr	r0, [r7, #4]
24059fca:	f000 fa83 	bl	2405a4d4 <HAL_OSPI_AbortCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
24059fce:	e07b      	b.n	2405a0c8 <HAL_OSPI_IRQHandler+0x270>
          /* Abort due to an error (eg : DMA error) */
          /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->ErrorCallback(hospi);
#else
          HAL_OSPI_ErrorCallback(hospi);
24059fd0:	6878      	ldr	r0, [r7, #4]
24059fd2:	f000 fa75 	bl	2405a4c0 <HAL_OSPI_ErrorCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
24059fd6:	e077      	b.n	2405a0c8 <HAL_OSPI_IRQHandler+0x270>
        /* Nothing to do */
      }
    }
  }
  /* OctoSPI status match interrupt occurred ---------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
24059fd8:	693b      	ldr	r3, [r7, #16]
24059fda:	f003 0308 	and.w	r3, r3, #8
24059fde:	2b00      	cmp	r3, #0
24059fe0:	d01e      	beq.n	2405a020 <HAL_OSPI_IRQHandler+0x1c8>
24059fe2:	68fb      	ldr	r3, [r7, #12]
24059fe4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
24059fe8:	2b00      	cmp	r3, #0
24059fea:	d019      	beq.n	2405a020 <HAL_OSPI_IRQHandler+0x1c8>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
24059fec:	687b      	ldr	r3, [r7, #4]
24059fee:	681b      	ldr	r3, [r3, #0]
24059ff0:	2208      	movs	r2, #8
24059ff2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Check if automatic poll mode stop is activated */
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
24059ff4:	687b      	ldr	r3, [r7, #4]
24059ff6:	681b      	ldr	r3, [r3, #0]
24059ff8:	681b      	ldr	r3, [r3, #0]
24059ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
24059ffe:	2b00      	cmp	r3, #0
2405a000:	d00a      	beq.n	2405a018 <HAL_OSPI_IRQHandler+0x1c0>
    {
      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
2405a002:	687b      	ldr	r3, [r7, #4]
2405a004:	681b      	ldr	r3, [r3, #0]
2405a006:	681a      	ldr	r2, [r3, #0]
2405a008:	687b      	ldr	r3, [r7, #4]
2405a00a:	681b      	ldr	r3, [r3, #0]
2405a00c:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
2405a010:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
2405a012:	687b      	ldr	r3, [r7, #4]
2405a014:	2202      	movs	r2, #2
2405a016:	651a      	str	r2, [r3, #80]	; 0x50

    /* Status match callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->StatusMatchCallback(hospi);
#else
    HAL_OSPI_StatusMatchCallback(hospi);
2405a018:	6878      	ldr	r0, [r7, #4]
2405a01a:	f000 fa8d 	bl	2405a538 <HAL_OSPI_StatusMatchCallback>
2405a01e:	e056      	b.n	2405a0ce <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* OctoSPI transfer error interrupt occurred -------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
2405a020:	693b      	ldr	r3, [r7, #16]
2405a022:	f003 0301 	and.w	r3, r3, #1
2405a026:	2b00      	cmp	r3, #0
2405a028:	d03c      	beq.n	2405a0a4 <HAL_OSPI_IRQHandler+0x24c>
2405a02a:	68fb      	ldr	r3, [r7, #12]
2405a02c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2405a030:	2b00      	cmp	r3, #0
2405a032:	d037      	beq.n	2405a0a4 <HAL_OSPI_IRQHandler+0x24c>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
2405a034:	687b      	ldr	r3, [r7, #4]
2405a036:	681b      	ldr	r3, [r3, #0]
2405a038:	2201      	movs	r2, #1
2405a03a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable all interrupts */
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
2405a03c:	687b      	ldr	r3, [r7, #4]
2405a03e:	681b      	ldr	r3, [r3, #0]
2405a040:	681a      	ldr	r2, [r3, #0]
2405a042:	687b      	ldr	r3, [r7, #4]
2405a044:	681b      	ldr	r3, [r3, #0]
2405a046:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
2405a04a:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
2405a04c:	687b      	ldr	r3, [r7, #4]
2405a04e:	2202      	movs	r2, #2
2405a050:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
2405a052:	687b      	ldr	r3, [r7, #4]
2405a054:	681b      	ldr	r3, [r3, #0]
2405a056:	681b      	ldr	r3, [r3, #0]
2405a058:	f003 0304 	and.w	r3, r3, #4
2405a05c:	2b00      	cmp	r3, #0
2405a05e:	d01a      	beq.n	2405a096 <HAL_OSPI_IRQHandler+0x23e>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
2405a060:	687b      	ldr	r3, [r7, #4]
2405a062:	681b      	ldr	r3, [r3, #0]
2405a064:	681a      	ldr	r2, [r3, #0]
2405a066:	687b      	ldr	r3, [r7, #4]
2405a068:	681b      	ldr	r3, [r3, #0]
2405a06a:	f022 0204 	bic.w	r2, r2, #4
2405a06e:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      hospi->hmdma->XferAbortCallback = OSPI_DMAAbortCplt;
2405a070:	687b      	ldr	r3, [r7, #4]
2405a072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405a074:	4a18      	ldr	r2, [pc, #96]	; (2405a0d8 <HAL_OSPI_IRQHandler+0x280>)
2405a076:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hospi->hmdma) != HAL_OK)
2405a078:	687b      	ldr	r3, [r7, #4]
2405a07a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405a07c:	4618      	mov	r0, r3
2405a07e:	f7ff fe07 	bl	24059c90 <HAL_MDMA_Abort_IT>
2405a082:	4603      	mov	r3, r0
2405a084:	2b00      	cmp	r3, #0
2405a086:	d021      	beq.n	2405a0cc <HAL_OSPI_IRQHandler+0x274>
      {
        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
2405a088:	687b      	ldr	r3, [r7, #4]
2405a08a:	2202      	movs	r2, #2
2405a08c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->ErrorCallback(hospi);
#else
        HAL_OSPI_ErrorCallback(hospi);
2405a08e:	6878      	ldr	r0, [r7, #4]
2405a090:	f000 fa16 	bl	2405a4c0 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
2405a094:	e01a      	b.n	2405a0cc <HAL_OSPI_IRQHandler+0x274>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
2405a096:	687b      	ldr	r3, [r7, #4]
2405a098:	2202      	movs	r2, #2
2405a09a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
      hospi->ErrorCallback(hospi);
#else
      HAL_OSPI_ErrorCallback(hospi);
2405a09c:	6878      	ldr	r0, [r7, #4]
2405a09e:	f000 fa0f 	bl	2405a4c0 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
2405a0a2:	e013      	b.n	2405a0cc <HAL_OSPI_IRQHandler+0x274>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
    }
  }
  /* OctoSPI timeout interrupt occurred --------------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
2405a0a4:	693b      	ldr	r3, [r7, #16]
2405a0a6:	f003 0310 	and.w	r3, r3, #16
2405a0aa:	2b00      	cmp	r3, #0
2405a0ac:	d00f      	beq.n	2405a0ce <HAL_OSPI_IRQHandler+0x276>
2405a0ae:	68fb      	ldr	r3, [r7, #12]
2405a0b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
2405a0b4:	2b00      	cmp	r3, #0
2405a0b6:	d00a      	beq.n	2405a0ce <HAL_OSPI_IRQHandler+0x276>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
2405a0b8:	687b      	ldr	r3, [r7, #4]
2405a0ba:	681b      	ldr	r3, [r3, #0]
2405a0bc:	2210      	movs	r2, #16
2405a0be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Timeout callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->TimeOutCallback(hospi);
#else
    HAL_OSPI_TimeOutCallback(hospi);
2405a0c0:	6878      	ldr	r0, [r7, #4]
2405a0c2:	f000 fa43 	bl	2405a54c <HAL_OSPI_TimeOutCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
2405a0c6:	e002      	b.n	2405a0ce <HAL_OSPI_IRQHandler+0x276>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
2405a0c8:	bf00      	nop
2405a0ca:	e000      	b.n	2405a0ce <HAL_OSPI_IRQHandler+0x276>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
2405a0cc:	bf00      	nop
}
2405a0ce:	bf00      	nop
2405a0d0:	3718      	adds	r7, #24
2405a0d2:	46bd      	mov	sp, r7
2405a0d4:	bd80      	pop	{r7, pc}
2405a0d6:	bf00      	nop
2405a0d8:	2405af51 	.word	0x2405af51

2405a0dc <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
2405a0dc:	b580      	push	{r7, lr}
2405a0de:	b08a      	sub	sp, #40	; 0x28
2405a0e0:	af02      	add	r7, sp, #8
2405a0e2:	60f8      	str	r0, [r7, #12]
2405a0e4:	60b9      	str	r1, [r7, #8]
2405a0e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
2405a0e8:	f7f9 fe70 	bl	24053dcc <HAL_GetTick>
2405a0ec:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
2405a0ee:	68bb      	ldr	r3, [r7, #8]
2405a0f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405a0f2:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
2405a0f4:	68fb      	ldr	r3, [r7, #12]
2405a0f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405a0f8:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
2405a0fa:	697b      	ldr	r3, [r7, #20]
2405a0fc:	2b02      	cmp	r3, #2
2405a0fe:	d104      	bne.n	2405a10a <HAL_OSPI_Command+0x2e>
2405a100:	68fb      	ldr	r3, [r7, #12]
2405a102:	68db      	ldr	r3, [r3, #12]
2405a104:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
2405a108:	d115      	bne.n	2405a136 <HAL_OSPI_Command+0x5a>
2405a10a:	697b      	ldr	r3, [r7, #20]
2405a10c:	2b14      	cmp	r3, #20
2405a10e:	d107      	bne.n	2405a120 <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
2405a110:	68bb      	ldr	r3, [r7, #8]
2405a112:	681b      	ldr	r3, [r3, #0]
2405a114:	2b02      	cmp	r3, #2
2405a116:	d00e      	beq.n	2405a136 <HAL_OSPI_Command+0x5a>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
2405a118:	68bb      	ldr	r3, [r7, #8]
2405a11a:	681b      	ldr	r3, [r3, #0]
2405a11c:	2b03      	cmp	r3, #3
2405a11e:	d00a      	beq.n	2405a136 <HAL_OSPI_Command+0x5a>
2405a120:	697b      	ldr	r3, [r7, #20]
2405a122:	2b24      	cmp	r3, #36	; 0x24
2405a124:	d15b      	bne.n	2405a1de <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
2405a126:	68bb      	ldr	r3, [r7, #8]
2405a128:	681b      	ldr	r3, [r3, #0]
2405a12a:	2b01      	cmp	r3, #1
2405a12c:	d003      	beq.n	2405a136 <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
2405a12e:	68bb      	ldr	r3, [r7, #8]
2405a130:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
2405a132:	2b03      	cmp	r3, #3
2405a134:	d153      	bne.n	2405a1de <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
2405a136:	687b      	ldr	r3, [r7, #4]
2405a138:	9300      	str	r3, [sp, #0]
2405a13a:	69bb      	ldr	r3, [r7, #24]
2405a13c:	2200      	movs	r2, #0
2405a13e:	2120      	movs	r1, #32
2405a140:	68f8      	ldr	r0, [r7, #12]
2405a142:	f000 ff41 	bl	2405afc8 <OSPI_WaitFlagStateUntilTimeout>
2405a146:	4603      	mov	r3, r0
2405a148:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
2405a14a:	7ffb      	ldrb	r3, [r7, #31]
2405a14c:	2b00      	cmp	r3, #0
2405a14e:	d14c      	bne.n	2405a1ea <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
2405a150:	68fb      	ldr	r3, [r7, #12]
2405a152:	2200      	movs	r2, #0
2405a154:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
2405a156:	68b9      	ldr	r1, [r7, #8]
2405a158:	68f8      	ldr	r0, [r7, #12]
2405a15a:	f000 ff6d 	bl	2405b038 <OSPI_ConfigCmd>
2405a15e:	4603      	mov	r3, r0
2405a160:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
2405a162:	7ffb      	ldrb	r3, [r7, #31]
2405a164:	2b00      	cmp	r3, #0
2405a166:	d140      	bne.n	2405a1ea <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
2405a168:	68bb      	ldr	r3, [r7, #8]
2405a16a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405a16c:	2b00      	cmp	r3, #0
2405a16e:	d10e      	bne.n	2405a18e <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
2405a170:	687b      	ldr	r3, [r7, #4]
2405a172:	9300      	str	r3, [sp, #0]
2405a174:	69bb      	ldr	r3, [r7, #24]
2405a176:	2201      	movs	r2, #1
2405a178:	2102      	movs	r1, #2
2405a17a:	68f8      	ldr	r0, [r7, #12]
2405a17c:	f000 ff24 	bl	2405afc8 <OSPI_WaitFlagStateUntilTimeout>
2405a180:	4603      	mov	r3, r0
2405a182:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
2405a184:	68fb      	ldr	r3, [r7, #12]
2405a186:	681b      	ldr	r3, [r3, #0]
2405a188:	2202      	movs	r2, #2
2405a18a:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
2405a18c:	e02d      	b.n	2405a1ea <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
2405a18e:	68bb      	ldr	r3, [r7, #8]
2405a190:	681b      	ldr	r3, [r3, #0]
2405a192:	2b00      	cmp	r3, #0
2405a194:	d103      	bne.n	2405a19e <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
2405a196:	68fb      	ldr	r3, [r7, #12]
2405a198:	2204      	movs	r2, #4
2405a19a:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
2405a19c:	e025      	b.n	2405a1ea <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
2405a19e:	68bb      	ldr	r3, [r7, #8]
2405a1a0:	681b      	ldr	r3, [r3, #0]
2405a1a2:	2b01      	cmp	r3, #1
2405a1a4:	d10b      	bne.n	2405a1be <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
2405a1a6:	68fb      	ldr	r3, [r7, #12]
2405a1a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405a1aa:	2b24      	cmp	r3, #36	; 0x24
2405a1ac:	d103      	bne.n	2405a1b6 <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
2405a1ae:	68fb      	ldr	r3, [r7, #12]
2405a1b0:	2204      	movs	r2, #4
2405a1b2:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
2405a1b4:	e019      	b.n	2405a1ea <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
2405a1b6:	68fb      	ldr	r3, [r7, #12]
2405a1b8:	2214      	movs	r2, #20
2405a1ba:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
2405a1bc:	e015      	b.n	2405a1ea <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
2405a1be:	68bb      	ldr	r3, [r7, #8]
2405a1c0:	681b      	ldr	r3, [r3, #0]
2405a1c2:	2b02      	cmp	r3, #2
2405a1c4:	d111      	bne.n	2405a1ea <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
2405a1c6:	68fb      	ldr	r3, [r7, #12]
2405a1c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405a1ca:	2b14      	cmp	r3, #20
2405a1cc:	d103      	bne.n	2405a1d6 <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
2405a1ce:	68fb      	ldr	r3, [r7, #12]
2405a1d0:	2204      	movs	r2, #4
2405a1d2:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
2405a1d4:	e009      	b.n	2405a1ea <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
2405a1d6:	68fb      	ldr	r3, [r7, #12]
2405a1d8:	2224      	movs	r2, #36	; 0x24
2405a1da:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
2405a1dc:	e005      	b.n	2405a1ea <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
2405a1de:	2301      	movs	r3, #1
2405a1e0:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
2405a1e2:	68fb      	ldr	r3, [r7, #12]
2405a1e4:	2210      	movs	r2, #16
2405a1e6:	655a      	str	r2, [r3, #84]	; 0x54
2405a1e8:	e000      	b.n	2405a1ec <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
2405a1ea:	bf00      	nop
  }

  /* Return function status */
  return status;
2405a1ec:	7ffb      	ldrb	r3, [r7, #31]
}
2405a1ee:	4618      	mov	r0, r3
2405a1f0:	3720      	adds	r7, #32
2405a1f2:	46bd      	mov	sp, r7
2405a1f4:	bd80      	pop	{r7, pc}

2405a1f6 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
2405a1f6:	b580      	push	{r7, lr}
2405a1f8:	b08a      	sub	sp, #40	; 0x28
2405a1fa:	af02      	add	r7, sp, #8
2405a1fc:	60f8      	str	r0, [r7, #12]
2405a1fe:	60b9      	str	r1, [r7, #8]
2405a200:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
2405a202:	f7f9 fde3 	bl	24053dcc <HAL_GetTick>
2405a206:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
2405a208:	68fb      	ldr	r3, [r7, #12]
2405a20a:	681b      	ldr	r3, [r3, #0]
2405a20c:	3350      	adds	r3, #80	; 0x50
2405a20e:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
2405a210:	68bb      	ldr	r3, [r7, #8]
2405a212:	2b00      	cmp	r3, #0
2405a214:	d105      	bne.n	2405a222 <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
2405a216:	2301      	movs	r3, #1
2405a218:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
2405a21a:	68fb      	ldr	r3, [r7, #12]
2405a21c:	2208      	movs	r2, #8
2405a21e:	655a      	str	r2, [r3, #84]	; 0x54
2405a220:	e057      	b.n	2405a2d2 <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
2405a222:	68fb      	ldr	r3, [r7, #12]
2405a224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405a226:	2b04      	cmp	r3, #4
2405a228:	d14e      	bne.n	2405a2c8 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
2405a22a:	68fb      	ldr	r3, [r7, #12]
2405a22c:	681b      	ldr	r3, [r3, #0]
2405a22e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405a230:	1c5a      	adds	r2, r3, #1
2405a232:	68fb      	ldr	r3, [r7, #12]
2405a234:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
2405a236:	68fb      	ldr	r3, [r7, #12]
2405a238:	6c9a      	ldr	r2, [r3, #72]	; 0x48
2405a23a:	68fb      	ldr	r3, [r7, #12]
2405a23c:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->pBuffPtr  = pData;
2405a23e:	68fb      	ldr	r3, [r7, #12]
2405a240:	68ba      	ldr	r2, [r7, #8]
2405a242:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
2405a244:	68fb      	ldr	r3, [r7, #12]
2405a246:	681b      	ldr	r3, [r3, #0]
2405a248:	681a      	ldr	r2, [r3, #0]
2405a24a:	68fb      	ldr	r3, [r7, #12]
2405a24c:	681b      	ldr	r3, [r3, #0]
2405a24e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
2405a252:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
2405a254:	687b      	ldr	r3, [r7, #4]
2405a256:	9300      	str	r3, [sp, #0]
2405a258:	69bb      	ldr	r3, [r7, #24]
2405a25a:	2201      	movs	r2, #1
2405a25c:	2104      	movs	r1, #4
2405a25e:	68f8      	ldr	r0, [r7, #12]
2405a260:	f000 feb2 	bl	2405afc8 <OSPI_WaitFlagStateUntilTimeout>
2405a264:	4603      	mov	r3, r0
2405a266:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
2405a268:	7ffb      	ldrb	r3, [r7, #31]
2405a26a:	2b00      	cmp	r3, #0
2405a26c:	d113      	bne.n	2405a296 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
2405a26e:	68fb      	ldr	r3, [r7, #12]
2405a270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405a272:	781a      	ldrb	r2, [r3, #0]
2405a274:	697b      	ldr	r3, [r7, #20]
2405a276:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
2405a278:	68fb      	ldr	r3, [r7, #12]
2405a27a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405a27c:	1c5a      	adds	r2, r3, #1
2405a27e:	68fb      	ldr	r3, [r7, #12]
2405a280:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
2405a282:	68fb      	ldr	r3, [r7, #12]
2405a284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2405a286:	1e5a      	subs	r2, r3, #1
2405a288:	68fb      	ldr	r3, [r7, #12]
2405a28a:	649a      	str	r2, [r3, #72]	; 0x48
      } while (hospi->XferCount > 0U);
2405a28c:	68fb      	ldr	r3, [r7, #12]
2405a28e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2405a290:	2b00      	cmp	r3, #0
2405a292:	d1df      	bne.n	2405a254 <HAL_OSPI_Transmit+0x5e>
2405a294:	e000      	b.n	2405a298 <HAL_OSPI_Transmit+0xa2>
          break;
2405a296:	bf00      	nop

      if (status == HAL_OK)
2405a298:	7ffb      	ldrb	r3, [r7, #31]
2405a29a:	2b00      	cmp	r3, #0
2405a29c:	d119      	bne.n	2405a2d2 <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
2405a29e:	687b      	ldr	r3, [r7, #4]
2405a2a0:	9300      	str	r3, [sp, #0]
2405a2a2:	69bb      	ldr	r3, [r7, #24]
2405a2a4:	2201      	movs	r2, #1
2405a2a6:	2102      	movs	r1, #2
2405a2a8:	68f8      	ldr	r0, [r7, #12]
2405a2aa:	f000 fe8d 	bl	2405afc8 <OSPI_WaitFlagStateUntilTimeout>
2405a2ae:	4603      	mov	r3, r0
2405a2b0:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
2405a2b2:	7ffb      	ldrb	r3, [r7, #31]
2405a2b4:	2b00      	cmp	r3, #0
2405a2b6:	d10c      	bne.n	2405a2d2 <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
2405a2b8:	68fb      	ldr	r3, [r7, #12]
2405a2ba:	681b      	ldr	r3, [r3, #0]
2405a2bc:	2202      	movs	r2, #2
2405a2be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
2405a2c0:	68fb      	ldr	r3, [r7, #12]
2405a2c2:	2202      	movs	r2, #2
2405a2c4:	651a      	str	r2, [r3, #80]	; 0x50
2405a2c6:	e004      	b.n	2405a2d2 <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
2405a2c8:	2301      	movs	r3, #1
2405a2ca:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
2405a2cc:	68fb      	ldr	r3, [r7, #12]
2405a2ce:	2210      	movs	r2, #16
2405a2d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
2405a2d2:	7ffb      	ldrb	r3, [r7, #31]
}
2405a2d4:	4618      	mov	r0, r3
2405a2d6:	3720      	adds	r7, #32
2405a2d8:	46bd      	mov	sp, r7
2405a2da:	bd80      	pop	{r7, pc}

2405a2dc <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
2405a2dc:	b580      	push	{r7, lr}
2405a2de:	b08c      	sub	sp, #48	; 0x30
2405a2e0:	af02      	add	r7, sp, #8
2405a2e2:	60f8      	str	r0, [r7, #12]
2405a2e4:	60b9      	str	r1, [r7, #8]
2405a2e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
2405a2e8:	f7f9 fd70 	bl	24053dcc <HAL_GetTick>
2405a2ec:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
2405a2ee:	68fb      	ldr	r3, [r7, #12]
2405a2f0:	681b      	ldr	r3, [r3, #0]
2405a2f2:	3350      	adds	r3, #80	; 0x50
2405a2f4:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
2405a2f6:	68fb      	ldr	r3, [r7, #12]
2405a2f8:	681b      	ldr	r3, [r3, #0]
2405a2fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2405a2fc:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
2405a2fe:	68fb      	ldr	r3, [r7, #12]
2405a300:	681b      	ldr	r3, [r3, #0]
2405a302:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
2405a306:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
2405a308:	68bb      	ldr	r3, [r7, #8]
2405a30a:	2b00      	cmp	r3, #0
2405a30c:	d106      	bne.n	2405a31c <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
2405a30e:	2301      	movs	r3, #1
2405a310:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
2405a314:	68fb      	ldr	r3, [r7, #12]
2405a316:	2208      	movs	r2, #8
2405a318:	655a      	str	r2, [r3, #84]	; 0x54
2405a31a:	e07c      	b.n	2405a416 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
2405a31c:	68fb      	ldr	r3, [r7, #12]
2405a31e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405a320:	2b04      	cmp	r3, #4
2405a322:	d172      	bne.n	2405a40a <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
2405a324:	68fb      	ldr	r3, [r7, #12]
2405a326:	681b      	ldr	r3, [r3, #0]
2405a328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405a32a:	1c5a      	adds	r2, r3, #1
2405a32c:	68fb      	ldr	r3, [r7, #12]
2405a32e:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
2405a330:	68fb      	ldr	r3, [r7, #12]
2405a332:	6c9a      	ldr	r2, [r3, #72]	; 0x48
2405a334:	68fb      	ldr	r3, [r7, #12]
2405a336:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->pBuffPtr  = pData;
2405a338:	68fb      	ldr	r3, [r7, #12]
2405a33a:	68ba      	ldr	r2, [r7, #8]
2405a33c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
2405a33e:	68fb      	ldr	r3, [r7, #12]
2405a340:	681b      	ldr	r3, [r3, #0]
2405a342:	681b      	ldr	r3, [r3, #0]
2405a344:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
2405a348:	68fb      	ldr	r3, [r7, #12]
2405a34a:	681b      	ldr	r3, [r3, #0]
2405a34c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
2405a350:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
2405a352:	68fb      	ldr	r3, [r7, #12]
2405a354:	68db      	ldr	r3, [r3, #12]
2405a356:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
2405a35a:	d104      	bne.n	2405a366 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
2405a35c:	68fb      	ldr	r3, [r7, #12]
2405a35e:	681b      	ldr	r3, [r3, #0]
2405a360:	69ba      	ldr	r2, [r7, #24]
2405a362:	649a      	str	r2, [r3, #72]	; 0x48
2405a364:	e011      	b.n	2405a38a <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
2405a366:	68fb      	ldr	r3, [r7, #12]
2405a368:	681b      	ldr	r3, [r3, #0]
2405a36a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
2405a36e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
2405a372:	2b00      	cmp	r3, #0
2405a374:	d004      	beq.n	2405a380 <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
2405a376:	68fb      	ldr	r3, [r7, #12]
2405a378:	681b      	ldr	r3, [r3, #0]
2405a37a:	69ba      	ldr	r2, [r7, #24]
2405a37c:	649a      	str	r2, [r3, #72]	; 0x48
2405a37e:	e004      	b.n	2405a38a <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
2405a380:	68fb      	ldr	r3, [r7, #12]
2405a382:	681b      	ldr	r3, [r3, #0]
2405a384:	697a      	ldr	r2, [r7, #20]
2405a386:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
2405a38a:	687b      	ldr	r3, [r7, #4]
2405a38c:	9300      	str	r3, [sp, #0]
2405a38e:	6a3b      	ldr	r3, [r7, #32]
2405a390:	2201      	movs	r2, #1
2405a392:	2106      	movs	r1, #6
2405a394:	68f8      	ldr	r0, [r7, #12]
2405a396:	f000 fe17 	bl	2405afc8 <OSPI_WaitFlagStateUntilTimeout>
2405a39a:	4603      	mov	r3, r0
2405a39c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
2405a3a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
2405a3a4:	2b00      	cmp	r3, #0
2405a3a6:	d114      	bne.n	2405a3d2 <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
2405a3a8:	68fb      	ldr	r3, [r7, #12]
2405a3aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405a3ac:	69fa      	ldr	r2, [r7, #28]
2405a3ae:	7812      	ldrb	r2, [r2, #0]
2405a3b0:	b2d2      	uxtb	r2, r2
2405a3b2:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
2405a3b4:	68fb      	ldr	r3, [r7, #12]
2405a3b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405a3b8:	1c5a      	adds	r2, r3, #1
2405a3ba:	68fb      	ldr	r3, [r7, #12]
2405a3bc:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
2405a3be:	68fb      	ldr	r3, [r7, #12]
2405a3c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2405a3c2:	1e5a      	subs	r2, r3, #1
2405a3c4:	68fb      	ldr	r3, [r7, #12]
2405a3c6:	649a      	str	r2, [r3, #72]	; 0x48
      } while(hospi->XferCount > 0U);
2405a3c8:	68fb      	ldr	r3, [r7, #12]
2405a3ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2405a3cc:	2b00      	cmp	r3, #0
2405a3ce:	d1dc      	bne.n	2405a38a <HAL_OSPI_Receive+0xae>
2405a3d0:	e000      	b.n	2405a3d4 <HAL_OSPI_Receive+0xf8>
          break;
2405a3d2:	bf00      	nop

      if (status == HAL_OK)
2405a3d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
2405a3d8:	2b00      	cmp	r3, #0
2405a3da:	d11c      	bne.n	2405a416 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
2405a3dc:	687b      	ldr	r3, [r7, #4]
2405a3de:	9300      	str	r3, [sp, #0]
2405a3e0:	6a3b      	ldr	r3, [r7, #32]
2405a3e2:	2201      	movs	r2, #1
2405a3e4:	2102      	movs	r1, #2
2405a3e6:	68f8      	ldr	r0, [r7, #12]
2405a3e8:	f000 fdee 	bl	2405afc8 <OSPI_WaitFlagStateUntilTimeout>
2405a3ec:	4603      	mov	r3, r0
2405a3ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
2405a3f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
2405a3f6:	2b00      	cmp	r3, #0
2405a3f8:	d10d      	bne.n	2405a416 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
2405a3fa:	68fb      	ldr	r3, [r7, #12]
2405a3fc:	681b      	ldr	r3, [r3, #0]
2405a3fe:	2202      	movs	r2, #2
2405a400:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
2405a402:	68fb      	ldr	r3, [r7, #12]
2405a404:	2202      	movs	r2, #2
2405a406:	651a      	str	r2, [r3, #80]	; 0x50
2405a408:	e005      	b.n	2405a416 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
2405a40a:	2301      	movs	r3, #1
2405a40c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
2405a410:	68fb      	ldr	r3, [r7, #12]
2405a412:	2210      	movs	r2, #16
2405a414:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
2405a416:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
2405a41a:	4618      	mov	r0, r3
2405a41c:	3728      	adds	r7, #40	; 0x28
2405a41e:	46bd      	mov	sp, r7
2405a420:	bd80      	pop	{r7, pc}
	...

2405a424 <HAL_OSPI_MemoryMapped>:
  * @param  cfg   : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_MemoryMapped(OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg)
{
2405a424:	b580      	push	{r7, lr}
2405a426:	b086      	sub	sp, #24
2405a428:	af02      	add	r7, sp, #8
2405a42a:	6078      	str	r0, [r7, #4]
2405a42c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
2405a42e:	f7f9 fccd 	bl	24053dcc <HAL_GetTick>
2405a432:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_OSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
2405a434:	687b      	ldr	r3, [r7, #4]
2405a436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405a438:	2b04      	cmp	r3, #4
2405a43a:	d134      	bne.n	2405a4a6 <HAL_OSPI_MemoryMapped+0x82>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
2405a43c:	687b      	ldr	r3, [r7, #4]
2405a43e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405a440:	9300      	str	r3, [sp, #0]
2405a442:	68bb      	ldr	r3, [r7, #8]
2405a444:	2200      	movs	r2, #0
2405a446:	2120      	movs	r1, #32
2405a448:	6878      	ldr	r0, [r7, #4]
2405a44a:	f000 fdbd 	bl	2405afc8 <OSPI_WaitFlagStateUntilTimeout>
2405a44e:	4603      	mov	r3, r0
2405a450:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
2405a452:	7bfb      	ldrb	r3, [r7, #15]
2405a454:	2b00      	cmp	r3, #0
2405a456:	d12b      	bne.n	2405a4b0 <HAL_OSPI_MemoryMapped+0x8c>
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
2405a458:	687b      	ldr	r3, [r7, #4]
2405a45a:	2288      	movs	r2, #136	; 0x88
2405a45c:	651a      	str	r2, [r3, #80]	; 0x50

      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
2405a45e:	683b      	ldr	r3, [r7, #0]
2405a460:	681b      	ldr	r3, [r3, #0]
2405a462:	2b08      	cmp	r3, #8
2405a464:	d111      	bne.n	2405a48a <HAL_OSPI_MemoryMapped+0x66>
      {
        assert_param(IS_OSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure register */
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
2405a466:	687b      	ldr	r3, [r7, #4]
2405a468:	681b      	ldr	r3, [r3, #0]
2405a46a:	683a      	ldr	r2, [r7, #0]
2405a46c:	6852      	ldr	r2, [r2, #4]
2405a46e:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
2405a472:	687b      	ldr	r3, [r7, #4]
2405a474:	681b      	ldr	r3, [r3, #0]
2405a476:	2210      	movs	r2, #16
2405a478:	625a      	str	r2, [r3, #36]	; 0x24

        /* Enable the timeout interrupt */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
2405a47a:	687b      	ldr	r3, [r7, #4]
2405a47c:	681b      	ldr	r3, [r3, #0]
2405a47e:	681a      	ldr	r2, [r3, #0]
2405a480:	687b      	ldr	r3, [r7, #4]
2405a482:	681b      	ldr	r3, [r3, #0]
2405a484:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
2405a488:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
2405a48a:	687b      	ldr	r3, [r7, #4]
2405a48c:	681b      	ldr	r3, [r3, #0]
2405a48e:	681a      	ldr	r2, [r3, #0]
2405a490:	4b0a      	ldr	r3, [pc, #40]	; (2405a4bc <HAL_OSPI_MemoryMapped+0x98>)
2405a492:	4013      	ands	r3, r2
2405a494:	683a      	ldr	r2, [r7, #0]
2405a496:	6812      	ldr	r2, [r2, #0]
2405a498:	431a      	orrs	r2, r3
2405a49a:	687b      	ldr	r3, [r7, #4]
2405a49c:	681b      	ldr	r3, [r3, #0]
2405a49e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
2405a4a2:	601a      	str	r2, [r3, #0]
2405a4a4:	e004      	b.n	2405a4b0 <HAL_OSPI_MemoryMapped+0x8c>
                 (cfg->TimeOutActivation | OSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
2405a4a6:	2301      	movs	r3, #1
2405a4a8:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
2405a4aa:	687b      	ldr	r3, [r7, #4]
2405a4ac:	2210      	movs	r2, #16
2405a4ae:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Return function status */
  return status;
2405a4b0:	7bfb      	ldrb	r3, [r7, #15]
}
2405a4b2:	4618      	mov	r0, r3
2405a4b4:	3710      	adds	r7, #16
2405a4b6:	46bd      	mov	sp, r7
2405a4b8:	bd80      	pop	{r7, pc}
2405a4ba:	bf00      	nop
2405a4bc:	cffffff7 	.word	0xcffffff7

2405a4c0 <HAL_OSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_ErrorCallback(OSPI_HandleTypeDef *hospi)
{
2405a4c0:	b480      	push	{r7}
2405a4c2:	b083      	sub	sp, #12
2405a4c4:	af00      	add	r7, sp, #0
2405a4c6:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_ErrorCallback could be implemented in the user file
   */
}
2405a4c8:	bf00      	nop
2405a4ca:	370c      	adds	r7, #12
2405a4cc:	46bd      	mov	sp, r7
2405a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
2405a4d2:	4770      	bx	lr

2405a4d4 <HAL_OSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_AbortCpltCallback(OSPI_HandleTypeDef *hospi)
{
2405a4d4:	b480      	push	{r7}
2405a4d6:	b083      	sub	sp, #12
2405a4d8:	af00      	add	r7, sp, #0
2405a4da:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_AbortCpltCallback could be implemented in the user file
   */
}
2405a4dc:	bf00      	nop
2405a4de:	370c      	adds	r7, #12
2405a4e0:	46bd      	mov	sp, r7
2405a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
2405a4e6:	4770      	bx	lr

2405a4e8 <HAL_OSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_FifoThresholdCallback(OSPI_HandleTypeDef *hospi)
{
2405a4e8:	b480      	push	{r7}
2405a4ea:	b083      	sub	sp, #12
2405a4ec:	af00      	add	r7, sp, #0
2405a4ee:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
2405a4f0:	bf00      	nop
2405a4f2:	370c      	adds	r7, #12
2405a4f4:	46bd      	mov	sp, r7
2405a4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
2405a4fa:	4770      	bx	lr

2405a4fc <HAL_OSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_CmdCpltCallback(OSPI_HandleTypeDef *hospi)
{
2405a4fc:	b480      	push	{r7}
2405a4fe:	b083      	sub	sp, #12
2405a500:	af00      	add	r7, sp, #0
2405a502:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_CmdCpltCallback could be implemented in the user file
   */
}
2405a504:	bf00      	nop
2405a506:	370c      	adds	r7, #12
2405a508:	46bd      	mov	sp, r7
2405a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
2405a50e:	4770      	bx	lr

2405a510 <HAL_OSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_RxCpltCallback(OSPI_HandleTypeDef *hospi)
{
2405a510:	b480      	push	{r7}
2405a512:	b083      	sub	sp, #12
2405a514:	af00      	add	r7, sp, #0
2405a516:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_RxCpltCallback could be implemented in the user file
   */
}
2405a518:	bf00      	nop
2405a51a:	370c      	adds	r7, #12
2405a51c:	46bd      	mov	sp, r7
2405a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
2405a522:	4770      	bx	lr

2405a524 <HAL_OSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
 __weak void HAL_OSPI_TxCpltCallback(OSPI_HandleTypeDef *hospi)
{
2405a524:	b480      	push	{r7}
2405a526:	b083      	sub	sp, #12
2405a528:	af00      	add	r7, sp, #0
2405a52a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_TxCpltCallback could be implemented in the user file
   */
}
2405a52c:	bf00      	nop
2405a52e:	370c      	adds	r7, #12
2405a530:	46bd      	mov	sp, r7
2405a532:	f85d 7b04 	ldr.w	r7, [sp], #4
2405a536:	4770      	bx	lr

2405a538 <HAL_OSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_StatusMatchCallback(OSPI_HandleTypeDef *hospi)
{
2405a538:	b480      	push	{r7}
2405a53a:	b083      	sub	sp, #12
2405a53c:	af00      	add	r7, sp, #0
2405a53e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_StatusMatchCallback could be implemented in the user file
   */
}
2405a540:	bf00      	nop
2405a542:	370c      	adds	r7, #12
2405a544:	46bd      	mov	sp, r7
2405a546:	f85d 7b04 	ldr.w	r7, [sp], #4
2405a54a:	4770      	bx	lr

2405a54c <HAL_OSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TimeOutCallback(OSPI_HandleTypeDef *hospi)
{
2405a54c:	b480      	push	{r7}
2405a54e:	b083      	sub	sp, #12
2405a550:	af00      	add	r7, sp, #0
2405a552:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_TimeOutCallback could be implemented in the user file
   */
}
2405a554:	bf00      	nop
2405a556:	370c      	adds	r7, #12
2405a558:	46bd      	mov	sp, r7
2405a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
2405a55e:	4770      	bx	lr

2405a560 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
2405a560:	b480      	push	{r7}
2405a562:	b083      	sub	sp, #12
2405a564:	af00      	add	r7, sp, #0
2405a566:	6078      	str	r0, [r7, #4]
2405a568:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
2405a56a:	687b      	ldr	r3, [r7, #4]
2405a56c:	683a      	ldr	r2, [r7, #0]
2405a56e:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
2405a570:	2300      	movs	r3, #0
}
2405a572:	4618      	mov	r0, r3
2405a574:	370c      	adds	r7, #12
2405a576:	46bd      	mov	sp, r7
2405a578:	f85d 7b04 	ldr.w	r7, [sp], #4
2405a57c:	4770      	bx	lr
	...

2405a580 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
2405a580:	b580      	push	{r7, lr}
2405a582:	b094      	sub	sp, #80	; 0x50
2405a584:	af00      	add	r7, sp, #0
2405a586:	60f8      	str	r0, [r7, #12]
2405a588:	60b9      	str	r1, [r7, #8]
2405a58a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
2405a58c:	2300      	movs	r3, #0
2405a58e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
2405a592:	2300      	movs	r3, #0
2405a594:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
2405a598:	68fb      	ldr	r3, [r7, #12]
2405a59a:	681b      	ldr	r3, [r3, #0]
2405a59c:	4a9d      	ldr	r2, [pc, #628]	; (2405a814 <HAL_OSPIM_Config+0x294>)
2405a59e:	4293      	cmp	r3, r2
2405a5a0:	d105      	bne.n	2405a5ae <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
2405a5a2:	2300      	movs	r3, #0
2405a5a4:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
2405a5a6:	2301      	movs	r3, #1
2405a5a8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
2405a5ac:	e004      	b.n	2405a5b8 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
2405a5ae:	2301      	movs	r3, #1
2405a5b0:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
2405a5b2:	2300      	movs	r3, #0
2405a5b4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
2405a5b8:	2300      	movs	r3, #0
2405a5ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
2405a5be:	e01d      	b.n	2405a5fc <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
2405a5c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
2405a5c4:	3301      	adds	r3, #1
2405a5c6:	b2d8      	uxtb	r0, r3
2405a5c8:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
2405a5cc:	f107 0114 	add.w	r1, r7, #20
2405a5d0:	4613      	mov	r3, r2
2405a5d2:	005b      	lsls	r3, r3, #1
2405a5d4:	4413      	add	r3, r2
2405a5d6:	00db      	lsls	r3, r3, #3
2405a5d8:	440b      	add	r3, r1
2405a5da:	4619      	mov	r1, r3
2405a5dc:	f000 fea6 	bl	2405b32c <OSPIM_GetConfig>
2405a5e0:	4603      	mov	r3, r0
2405a5e2:	2b00      	cmp	r3, #0
2405a5e4:	d005      	beq.n	2405a5f2 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
2405a5e6:	2301      	movs	r3, #1
2405a5e8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
2405a5ec:	68fb      	ldr	r3, [r7, #12]
2405a5ee:	2208      	movs	r2, #8
2405a5f0:	655a      	str	r2, [r3, #84]	; 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
2405a5f2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
2405a5f6:	3301      	adds	r3, #1
2405a5f8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
2405a5fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
2405a600:	2b01      	cmp	r3, #1
2405a602:	d9dd      	bls.n	2405a5c0 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
2405a604:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
2405a608:	2b00      	cmp	r3, #0
2405a60a:	f040 8495 	bne.w	2405af38 <HAL_OSPIM_Config+0x9b8>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
2405a60e:	4b81      	ldr	r3, [pc, #516]	; (2405a814 <HAL_OSPIM_Config+0x294>)
2405a610:	681b      	ldr	r3, [r3, #0]
2405a612:	f003 0301 	and.w	r3, r3, #1
2405a616:	2b00      	cmp	r3, #0
2405a618:	d00b      	beq.n	2405a632 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
2405a61a:	4b7e      	ldr	r3, [pc, #504]	; (2405a814 <HAL_OSPIM_Config+0x294>)
2405a61c:	681b      	ldr	r3, [r3, #0]
2405a61e:	4a7d      	ldr	r2, [pc, #500]	; (2405a814 <HAL_OSPIM_Config+0x294>)
2405a620:	f023 0301 	bic.w	r3, r3, #1
2405a624:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
2405a626:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
2405a62a:	f043 0301 	orr.w	r3, r3, #1
2405a62e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
2405a632:	4b79      	ldr	r3, [pc, #484]	; (2405a818 <HAL_OSPIM_Config+0x298>)
2405a634:	681b      	ldr	r3, [r3, #0]
2405a636:	f003 0301 	and.w	r3, r3, #1
2405a63a:	2b00      	cmp	r3, #0
2405a63c:	d00b      	beq.n	2405a656 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
2405a63e:	4b76      	ldr	r3, [pc, #472]	; (2405a818 <HAL_OSPIM_Config+0x298>)
2405a640:	681b      	ldr	r3, [r3, #0]
2405a642:	4a75      	ldr	r2, [pc, #468]	; (2405a818 <HAL_OSPIM_Config+0x298>)
2405a644:	f023 0301 	bic.w	r3, r3, #1
2405a648:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
2405a64a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
2405a64e:	f043 0302 	orr.w	r3, r3, #2
2405a652:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
2405a656:	4971      	ldr	r1, [pc, #452]	; (2405a81c <HAL_OSPIM_Config+0x29c>)
2405a658:	6cba      	ldr	r2, [r7, #72]	; 0x48
2405a65a:	4613      	mov	r3, r2
2405a65c:	005b      	lsls	r3, r3, #1
2405a65e:	4413      	add	r3, r2
2405a660:	00db      	lsls	r3, r3, #3
2405a662:	3350      	adds	r3, #80	; 0x50
2405a664:	443b      	add	r3, r7
2405a666:	3b34      	subs	r3, #52	; 0x34
2405a668:	681b      	ldr	r3, [r3, #0]
2405a66a:	3b01      	subs	r3, #1
2405a66c:	009b      	lsls	r3, r3, #2
2405a66e:	440b      	add	r3, r1
2405a670:	6859      	ldr	r1, [r3, #4]
2405a672:	486a      	ldr	r0, [pc, #424]	; (2405a81c <HAL_OSPIM_Config+0x29c>)
2405a674:	6cba      	ldr	r2, [r7, #72]	; 0x48
2405a676:	4613      	mov	r3, r2
2405a678:	005b      	lsls	r3, r3, #1
2405a67a:	4413      	add	r3, r2
2405a67c:	00db      	lsls	r3, r3, #3
2405a67e:	3350      	adds	r3, #80	; 0x50
2405a680:	443b      	add	r3, r7
2405a682:	3b34      	subs	r3, #52	; 0x34
2405a684:	681b      	ldr	r3, [r3, #0]
2405a686:	3b01      	subs	r3, #1
2405a688:	f421 7280 	bic.w	r2, r1, #256	; 0x100
2405a68c:	009b      	lsls	r3, r3, #2
2405a68e:	4403      	add	r3, r0
2405a690:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
2405a692:	4b62      	ldr	r3, [pc, #392]	; (2405a81c <HAL_OSPIM_Config+0x29c>)
2405a694:	681b      	ldr	r3, [r3, #0]
2405a696:	f003 0301 	and.w	r3, r3, #1
2405a69a:	2b00      	cmp	r3, #0
2405a69c:	f000 80c0 	beq.w	2405a820 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
2405a6a0:	4b5e      	ldr	r3, [pc, #376]	; (2405a81c <HAL_OSPIM_Config+0x29c>)
2405a6a2:	681b      	ldr	r3, [r3, #0]
2405a6a4:	4a5d      	ldr	r2, [pc, #372]	; (2405a81c <HAL_OSPIM_Config+0x29c>)
2405a6a6:	f023 0301 	bic.w	r3, r3, #1
2405a6aa:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
2405a6ac:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
2405a6b0:	2b01      	cmp	r3, #1
2405a6b2:	f040 8162 	bne.w	2405a97a <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKSRC);
2405a6b6:	4959      	ldr	r1, [pc, #356]	; (2405a81c <HAL_OSPIM_Config+0x29c>)
2405a6b8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405a6bc:	4613      	mov	r3, r2
2405a6be:	005b      	lsls	r3, r3, #1
2405a6c0:	4413      	add	r3, r2
2405a6c2:	00db      	lsls	r3, r3, #3
2405a6c4:	3350      	adds	r3, #80	; 0x50
2405a6c6:	443b      	add	r3, r7
2405a6c8:	3b3c      	subs	r3, #60	; 0x3c
2405a6ca:	681b      	ldr	r3, [r3, #0]
2405a6cc:	3b01      	subs	r3, #1
2405a6ce:	009b      	lsls	r3, r3, #2
2405a6d0:	440b      	add	r3, r1
2405a6d2:	6859      	ldr	r1, [r3, #4]
2405a6d4:	4851      	ldr	r0, [pc, #324]	; (2405a81c <HAL_OSPIM_Config+0x29c>)
2405a6d6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405a6da:	4613      	mov	r3, r2
2405a6dc:	005b      	lsls	r3, r3, #1
2405a6de:	4413      	add	r3, r2
2405a6e0:	00db      	lsls	r3, r3, #3
2405a6e2:	3350      	adds	r3, #80	; 0x50
2405a6e4:	443b      	add	r3, r7
2405a6e6:	3b3c      	subs	r3, #60	; 0x3c
2405a6e8:	681b      	ldr	r3, [r3, #0]
2405a6ea:	3b01      	subs	r3, #1
2405a6ec:	f041 0202 	orr.w	r2, r1, #2
2405a6f0:	009b      	lsls	r3, r3, #2
2405a6f2:	4403      	add	r3, r0
2405a6f4:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
2405a6f6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405a6fa:	4613      	mov	r3, r2
2405a6fc:	005b      	lsls	r3, r3, #1
2405a6fe:	4413      	add	r3, r2
2405a700:	00db      	lsls	r3, r3, #3
2405a702:	3350      	adds	r3, #80	; 0x50
2405a704:	443b      	add	r3, r7
2405a706:	3b38      	subs	r3, #56	; 0x38
2405a708:	681b      	ldr	r3, [r3, #0]
2405a70a:	2b00      	cmp	r3, #0
2405a70c:	d01f      	beq.n	2405a74e <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSSRC);
2405a70e:	4943      	ldr	r1, [pc, #268]	; (2405a81c <HAL_OSPIM_Config+0x29c>)
2405a710:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405a714:	4613      	mov	r3, r2
2405a716:	005b      	lsls	r3, r3, #1
2405a718:	4413      	add	r3, r2
2405a71a:	00db      	lsls	r3, r3, #3
2405a71c:	3350      	adds	r3, #80	; 0x50
2405a71e:	443b      	add	r3, r7
2405a720:	3b38      	subs	r3, #56	; 0x38
2405a722:	681b      	ldr	r3, [r3, #0]
2405a724:	3b01      	subs	r3, #1
2405a726:	009b      	lsls	r3, r3, #2
2405a728:	440b      	add	r3, r1
2405a72a:	6859      	ldr	r1, [r3, #4]
2405a72c:	483b      	ldr	r0, [pc, #236]	; (2405a81c <HAL_OSPIM_Config+0x29c>)
2405a72e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405a732:	4613      	mov	r3, r2
2405a734:	005b      	lsls	r3, r3, #1
2405a736:	4413      	add	r3, r2
2405a738:	00db      	lsls	r3, r3, #3
2405a73a:	3350      	adds	r3, #80	; 0x50
2405a73c:	443b      	add	r3, r7
2405a73e:	3b38      	subs	r3, #56	; 0x38
2405a740:	681b      	ldr	r3, [r3, #0]
2405a742:	3b01      	subs	r3, #1
2405a744:	f041 0220 	orr.w	r2, r1, #32
2405a748:	009b      	lsls	r3, r3, #2
2405a74a:	4403      	add	r3, r0
2405a74c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
2405a74e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405a752:	4613      	mov	r3, r2
2405a754:	005b      	lsls	r3, r3, #1
2405a756:	4413      	add	r3, r2
2405a758:	00db      	lsls	r3, r3, #3
2405a75a:	3350      	adds	r3, #80	; 0x50
2405a75c:	443b      	add	r3, r7
2405a75e:	3b30      	subs	r3, #48	; 0x30
2405a760:	681b      	ldr	r3, [r3, #0]
2405a762:	2b00      	cmp	r3, #0
2405a764:	d023      	beq.n	2405a7ae <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLSRC_1);
2405a766:	492d      	ldr	r1, [pc, #180]	; (2405a81c <HAL_OSPIM_Config+0x29c>)
2405a768:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405a76c:	4613      	mov	r3, r2
2405a76e:	005b      	lsls	r3, r3, #1
2405a770:	4413      	add	r3, r2
2405a772:	00db      	lsls	r3, r3, #3
2405a774:	3350      	adds	r3, #80	; 0x50
2405a776:	443b      	add	r3, r7
2405a778:	3b30      	subs	r3, #48	; 0x30
2405a77a:	681b      	ldr	r3, [r3, #0]
2405a77c:	3b01      	subs	r3, #1
2405a77e:	f003 0301 	and.w	r3, r3, #1
2405a782:	009b      	lsls	r3, r3, #2
2405a784:	440b      	add	r3, r1
2405a786:	6859      	ldr	r1, [r3, #4]
2405a788:	4824      	ldr	r0, [pc, #144]	; (2405a81c <HAL_OSPIM_Config+0x29c>)
2405a78a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405a78e:	4613      	mov	r3, r2
2405a790:	005b      	lsls	r3, r3, #1
2405a792:	4413      	add	r3, r2
2405a794:	00db      	lsls	r3, r3, #3
2405a796:	3350      	adds	r3, #80	; 0x50
2405a798:	443b      	add	r3, r7
2405a79a:	3b30      	subs	r3, #48	; 0x30
2405a79c:	681b      	ldr	r3, [r3, #0]
2405a79e:	3b01      	subs	r3, #1
2405a7a0:	f003 0301 	and.w	r3, r3, #1
2405a7a4:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
2405a7a8:	009b      	lsls	r3, r3, #2
2405a7aa:	4403      	add	r3, r0
2405a7ac:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
2405a7ae:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405a7b2:	4613      	mov	r3, r2
2405a7b4:	005b      	lsls	r3, r3, #1
2405a7b6:	4413      	add	r3, r2
2405a7b8:	00db      	lsls	r3, r3, #3
2405a7ba:	3350      	adds	r3, #80	; 0x50
2405a7bc:	443b      	add	r3, r7
2405a7be:	3b2c      	subs	r3, #44	; 0x2c
2405a7c0:	681b      	ldr	r3, [r3, #0]
2405a7c2:	2b00      	cmp	r3, #0
2405a7c4:	f000 80d9 	beq.w	2405a97a <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHSRC_1);
2405a7c8:	4914      	ldr	r1, [pc, #80]	; (2405a81c <HAL_OSPIM_Config+0x29c>)
2405a7ca:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405a7ce:	4613      	mov	r3, r2
2405a7d0:	005b      	lsls	r3, r3, #1
2405a7d2:	4413      	add	r3, r2
2405a7d4:	00db      	lsls	r3, r3, #3
2405a7d6:	3350      	adds	r3, #80	; 0x50
2405a7d8:	443b      	add	r3, r7
2405a7da:	3b2c      	subs	r3, #44	; 0x2c
2405a7dc:	681b      	ldr	r3, [r3, #0]
2405a7de:	3b01      	subs	r3, #1
2405a7e0:	f003 0301 	and.w	r3, r3, #1
2405a7e4:	009b      	lsls	r3, r3, #2
2405a7e6:	440b      	add	r3, r1
2405a7e8:	6859      	ldr	r1, [r3, #4]
2405a7ea:	480c      	ldr	r0, [pc, #48]	; (2405a81c <HAL_OSPIM_Config+0x29c>)
2405a7ec:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405a7f0:	4613      	mov	r3, r2
2405a7f2:	005b      	lsls	r3, r3, #1
2405a7f4:	4413      	add	r3, r2
2405a7f6:	00db      	lsls	r3, r3, #3
2405a7f8:	3350      	adds	r3, #80	; 0x50
2405a7fa:	443b      	add	r3, r7
2405a7fc:	3b2c      	subs	r3, #44	; 0x2c
2405a7fe:	681b      	ldr	r3, [r3, #0]
2405a800:	3b01      	subs	r3, #1
2405a802:	f003 0301 	and.w	r3, r3, #1
2405a806:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
2405a80a:	009b      	lsls	r3, r3, #2
2405a80c:	4403      	add	r3, r0
2405a80e:	605a      	str	r2, [r3, #4]
2405a810:	e0b3      	b.n	2405a97a <HAL_OSPIM_Config+0x3fa>
2405a812:	bf00      	nop
2405a814:	52005000 	.word	0x52005000
2405a818:	5200a000 	.word	0x5200a000
2405a81c:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
2405a820:	6cba      	ldr	r2, [r7, #72]	; 0x48
2405a822:	4613      	mov	r3, r2
2405a824:	005b      	lsls	r3, r3, #1
2405a826:	4413      	add	r3, r2
2405a828:	00db      	lsls	r3, r3, #3
2405a82a:	3350      	adds	r3, #80	; 0x50
2405a82c:	443b      	add	r3, r7
2405a82e:	3b3c      	subs	r3, #60	; 0x3c
2405a830:	681b      	ldr	r3, [r3, #0]
2405a832:	2b00      	cmp	r3, #0
2405a834:	f000 80a1 	beq.w	2405a97a <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
2405a838:	4993      	ldr	r1, [pc, #588]	; (2405aa88 <HAL_OSPIM_Config+0x508>)
2405a83a:	6cba      	ldr	r2, [r7, #72]	; 0x48
2405a83c:	4613      	mov	r3, r2
2405a83e:	005b      	lsls	r3, r3, #1
2405a840:	4413      	add	r3, r2
2405a842:	00db      	lsls	r3, r3, #3
2405a844:	3350      	adds	r3, #80	; 0x50
2405a846:	443b      	add	r3, r7
2405a848:	3b3c      	subs	r3, #60	; 0x3c
2405a84a:	681b      	ldr	r3, [r3, #0]
2405a84c:	3b01      	subs	r3, #1
2405a84e:	009b      	lsls	r3, r3, #2
2405a850:	440b      	add	r3, r1
2405a852:	6859      	ldr	r1, [r3, #4]
2405a854:	488c      	ldr	r0, [pc, #560]	; (2405aa88 <HAL_OSPIM_Config+0x508>)
2405a856:	6cba      	ldr	r2, [r7, #72]	; 0x48
2405a858:	4613      	mov	r3, r2
2405a85a:	005b      	lsls	r3, r3, #1
2405a85c:	4413      	add	r3, r2
2405a85e:	00db      	lsls	r3, r3, #3
2405a860:	3350      	adds	r3, #80	; 0x50
2405a862:	443b      	add	r3, r7
2405a864:	3b3c      	subs	r3, #60	; 0x3c
2405a866:	681b      	ldr	r3, [r3, #0]
2405a868:	3b01      	subs	r3, #1
2405a86a:	f021 0201 	bic.w	r2, r1, #1
2405a86e:	009b      	lsls	r3, r3, #2
2405a870:	4403      	add	r3, r0
2405a872:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
2405a874:	6cba      	ldr	r2, [r7, #72]	; 0x48
2405a876:	4613      	mov	r3, r2
2405a878:	005b      	lsls	r3, r3, #1
2405a87a:	4413      	add	r3, r2
2405a87c:	00db      	lsls	r3, r3, #3
2405a87e:	3350      	adds	r3, #80	; 0x50
2405a880:	443b      	add	r3, r7
2405a882:	3b38      	subs	r3, #56	; 0x38
2405a884:	681b      	ldr	r3, [r3, #0]
2405a886:	2b00      	cmp	r3, #0
2405a888:	d01d      	beq.n	2405a8c6 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
2405a88a:	497f      	ldr	r1, [pc, #508]	; (2405aa88 <HAL_OSPIM_Config+0x508>)
2405a88c:	6cba      	ldr	r2, [r7, #72]	; 0x48
2405a88e:	4613      	mov	r3, r2
2405a890:	005b      	lsls	r3, r3, #1
2405a892:	4413      	add	r3, r2
2405a894:	00db      	lsls	r3, r3, #3
2405a896:	3350      	adds	r3, #80	; 0x50
2405a898:	443b      	add	r3, r7
2405a89a:	3b38      	subs	r3, #56	; 0x38
2405a89c:	681b      	ldr	r3, [r3, #0]
2405a89e:	3b01      	subs	r3, #1
2405a8a0:	009b      	lsls	r3, r3, #2
2405a8a2:	440b      	add	r3, r1
2405a8a4:	6859      	ldr	r1, [r3, #4]
2405a8a6:	4878      	ldr	r0, [pc, #480]	; (2405aa88 <HAL_OSPIM_Config+0x508>)
2405a8a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
2405a8aa:	4613      	mov	r3, r2
2405a8ac:	005b      	lsls	r3, r3, #1
2405a8ae:	4413      	add	r3, r2
2405a8b0:	00db      	lsls	r3, r3, #3
2405a8b2:	3350      	adds	r3, #80	; 0x50
2405a8b4:	443b      	add	r3, r7
2405a8b6:	3b38      	subs	r3, #56	; 0x38
2405a8b8:	681b      	ldr	r3, [r3, #0]
2405a8ba:	3b01      	subs	r3, #1
2405a8bc:	f021 0210 	bic.w	r2, r1, #16
2405a8c0:	009b      	lsls	r3, r3, #2
2405a8c2:	4403      	add	r3, r0
2405a8c4:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
2405a8c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
2405a8c8:	4613      	mov	r3, r2
2405a8ca:	005b      	lsls	r3, r3, #1
2405a8cc:	4413      	add	r3, r2
2405a8ce:	00db      	lsls	r3, r3, #3
2405a8d0:	3350      	adds	r3, #80	; 0x50
2405a8d2:	443b      	add	r3, r7
2405a8d4:	3b30      	subs	r3, #48	; 0x30
2405a8d6:	681b      	ldr	r3, [r3, #0]
2405a8d8:	2b00      	cmp	r3, #0
2405a8da:	d021      	beq.n	2405a920 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
2405a8dc:	496a      	ldr	r1, [pc, #424]	; (2405aa88 <HAL_OSPIM_Config+0x508>)
2405a8de:	6cba      	ldr	r2, [r7, #72]	; 0x48
2405a8e0:	4613      	mov	r3, r2
2405a8e2:	005b      	lsls	r3, r3, #1
2405a8e4:	4413      	add	r3, r2
2405a8e6:	00db      	lsls	r3, r3, #3
2405a8e8:	3350      	adds	r3, #80	; 0x50
2405a8ea:	443b      	add	r3, r7
2405a8ec:	3b30      	subs	r3, #48	; 0x30
2405a8ee:	681b      	ldr	r3, [r3, #0]
2405a8f0:	3b01      	subs	r3, #1
2405a8f2:	f003 0301 	and.w	r3, r3, #1
2405a8f6:	009b      	lsls	r3, r3, #2
2405a8f8:	440b      	add	r3, r1
2405a8fa:	6859      	ldr	r1, [r3, #4]
2405a8fc:	4862      	ldr	r0, [pc, #392]	; (2405aa88 <HAL_OSPIM_Config+0x508>)
2405a8fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
2405a900:	4613      	mov	r3, r2
2405a902:	005b      	lsls	r3, r3, #1
2405a904:	4413      	add	r3, r2
2405a906:	00db      	lsls	r3, r3, #3
2405a908:	3350      	adds	r3, #80	; 0x50
2405a90a:	443b      	add	r3, r7
2405a90c:	3b30      	subs	r3, #48	; 0x30
2405a90e:	681b      	ldr	r3, [r3, #0]
2405a910:	3b01      	subs	r3, #1
2405a912:	f003 0301 	and.w	r3, r3, #1
2405a916:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
2405a91a:	009b      	lsls	r3, r3, #2
2405a91c:	4403      	add	r3, r0
2405a91e:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
2405a920:	6cba      	ldr	r2, [r7, #72]	; 0x48
2405a922:	4613      	mov	r3, r2
2405a924:	005b      	lsls	r3, r3, #1
2405a926:	4413      	add	r3, r2
2405a928:	00db      	lsls	r3, r3, #3
2405a92a:	3350      	adds	r3, #80	; 0x50
2405a92c:	443b      	add	r3, r7
2405a92e:	3b2c      	subs	r3, #44	; 0x2c
2405a930:	681b      	ldr	r3, [r3, #0]
2405a932:	2b00      	cmp	r3, #0
2405a934:	d021      	beq.n	2405a97a <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
2405a936:	4954      	ldr	r1, [pc, #336]	; (2405aa88 <HAL_OSPIM_Config+0x508>)
2405a938:	6cba      	ldr	r2, [r7, #72]	; 0x48
2405a93a:	4613      	mov	r3, r2
2405a93c:	005b      	lsls	r3, r3, #1
2405a93e:	4413      	add	r3, r2
2405a940:	00db      	lsls	r3, r3, #3
2405a942:	3350      	adds	r3, #80	; 0x50
2405a944:	443b      	add	r3, r7
2405a946:	3b2c      	subs	r3, #44	; 0x2c
2405a948:	681b      	ldr	r3, [r3, #0]
2405a94a:	3b01      	subs	r3, #1
2405a94c:	f003 0301 	and.w	r3, r3, #1
2405a950:	009b      	lsls	r3, r3, #2
2405a952:	440b      	add	r3, r1
2405a954:	6859      	ldr	r1, [r3, #4]
2405a956:	484c      	ldr	r0, [pc, #304]	; (2405aa88 <HAL_OSPIM_Config+0x508>)
2405a958:	6cba      	ldr	r2, [r7, #72]	; 0x48
2405a95a:	4613      	mov	r3, r2
2405a95c:	005b      	lsls	r3, r3, #1
2405a95e:	4413      	add	r3, r2
2405a960:	00db      	lsls	r3, r3, #3
2405a962:	3350      	adds	r3, #80	; 0x50
2405a964:	443b      	add	r3, r7
2405a966:	3b2c      	subs	r3, #44	; 0x2c
2405a968:	681b      	ldr	r3, [r3, #0]
2405a96a:	3b01      	subs	r3, #1
2405a96c:	f003 0301 	and.w	r3, r3, #1
2405a970:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
2405a974:	009b      	lsls	r3, r3, #2
2405a976:	4403      	add	r3, r0
2405a978:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
2405a97a:	68bb      	ldr	r3, [r7, #8]
2405a97c:	6819      	ldr	r1, [r3, #0]
2405a97e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405a982:	4613      	mov	r3, r2
2405a984:	005b      	lsls	r3, r3, #1
2405a986:	4413      	add	r3, r2
2405a988:	00db      	lsls	r3, r3, #3
2405a98a:	3350      	adds	r3, #80	; 0x50
2405a98c:	443b      	add	r3, r7
2405a98e:	3b3c      	subs	r3, #60	; 0x3c
2405a990:	681b      	ldr	r3, [r3, #0]
2405a992:	4299      	cmp	r1, r3
2405a994:	d038      	beq.n	2405aa08 <HAL_OSPIM_Config+0x488>
2405a996:	68bb      	ldr	r3, [r7, #8]
2405a998:	6859      	ldr	r1, [r3, #4]
2405a99a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405a99e:	4613      	mov	r3, r2
2405a9a0:	005b      	lsls	r3, r3, #1
2405a9a2:	4413      	add	r3, r2
2405a9a4:	00db      	lsls	r3, r3, #3
2405a9a6:	3350      	adds	r3, #80	; 0x50
2405a9a8:	443b      	add	r3, r7
2405a9aa:	3b38      	subs	r3, #56	; 0x38
2405a9ac:	681b      	ldr	r3, [r3, #0]
2405a9ae:	4299      	cmp	r1, r3
2405a9b0:	d02a      	beq.n	2405aa08 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
2405a9b2:	68bb      	ldr	r3, [r7, #8]
2405a9b4:	6899      	ldr	r1, [r3, #8]
2405a9b6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405a9ba:	4613      	mov	r3, r2
2405a9bc:	005b      	lsls	r3, r3, #1
2405a9be:	4413      	add	r3, r2
2405a9c0:	00db      	lsls	r3, r3, #3
2405a9c2:	3350      	adds	r3, #80	; 0x50
2405a9c4:	443b      	add	r3, r7
2405a9c6:	3b34      	subs	r3, #52	; 0x34
2405a9c8:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
2405a9ca:	4299      	cmp	r1, r3
2405a9cc:	d01c      	beq.n	2405aa08 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
2405a9ce:	68bb      	ldr	r3, [r7, #8]
2405a9d0:	68d9      	ldr	r1, [r3, #12]
2405a9d2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405a9d6:	4613      	mov	r3, r2
2405a9d8:	005b      	lsls	r3, r3, #1
2405a9da:	4413      	add	r3, r2
2405a9dc:	00db      	lsls	r3, r3, #3
2405a9de:	3350      	adds	r3, #80	; 0x50
2405a9e0:	443b      	add	r3, r7
2405a9e2:	3b30      	subs	r3, #48	; 0x30
2405a9e4:	681b      	ldr	r3, [r3, #0]
2405a9e6:	4299      	cmp	r1, r3
2405a9e8:	d00e      	beq.n	2405aa08 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
2405a9ea:	68bb      	ldr	r3, [r7, #8]
2405a9ec:	6919      	ldr	r1, [r3, #16]
2405a9ee:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405a9f2:	4613      	mov	r3, r2
2405a9f4:	005b      	lsls	r3, r3, #1
2405a9f6:	4413      	add	r3, r2
2405a9f8:	00db      	lsls	r3, r3, #3
2405a9fa:	3350      	adds	r3, #80	; 0x50
2405a9fc:	443b      	add	r3, r7
2405a9fe:	3b2c      	subs	r3, #44	; 0x2c
2405aa00:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
2405aa02:	4299      	cmp	r1, r3
2405aa04:	f040 810e 	bne.w	2405ac24 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
2405aa08:	68bb      	ldr	r3, [r7, #8]
2405aa0a:	6819      	ldr	r1, [r3, #0]
2405aa0c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405aa10:	4613      	mov	r3, r2
2405aa12:	005b      	lsls	r3, r3, #1
2405aa14:	4413      	add	r3, r2
2405aa16:	00db      	lsls	r3, r3, #3
2405aa18:	3350      	adds	r3, #80	; 0x50
2405aa1a:	443b      	add	r3, r7
2405aa1c:	3b3c      	subs	r3, #60	; 0x3c
2405aa1e:	681b      	ldr	r3, [r3, #0]
2405aa20:	4299      	cmp	r1, r3
2405aa22:	d133      	bne.n	2405aa8c <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
2405aa24:	68bb      	ldr	r3, [r7, #8]
2405aa26:	6859      	ldr	r1, [r3, #4]
2405aa28:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405aa2c:	4613      	mov	r3, r2
2405aa2e:	005b      	lsls	r3, r3, #1
2405aa30:	4413      	add	r3, r2
2405aa32:	00db      	lsls	r3, r3, #3
2405aa34:	3350      	adds	r3, #80	; 0x50
2405aa36:	443b      	add	r3, r7
2405aa38:	3b38      	subs	r3, #56	; 0x38
2405aa3a:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
2405aa3c:	4299      	cmp	r1, r3
2405aa3e:	d125      	bne.n	2405aa8c <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
2405aa40:	68bb      	ldr	r3, [r7, #8]
2405aa42:	68d9      	ldr	r1, [r3, #12]
2405aa44:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405aa48:	4613      	mov	r3, r2
2405aa4a:	005b      	lsls	r3, r3, #1
2405aa4c:	4413      	add	r3, r2
2405aa4e:	00db      	lsls	r3, r3, #3
2405aa50:	3350      	adds	r3, #80	; 0x50
2405aa52:	443b      	add	r3, r7
2405aa54:	3b30      	subs	r3, #48	; 0x30
2405aa56:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
2405aa58:	4299      	cmp	r1, r3
2405aa5a:	d117      	bne.n	2405aa8c <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
2405aa5c:	68bb      	ldr	r3, [r7, #8]
2405aa5e:	6919      	ldr	r1, [r3, #16]
2405aa60:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405aa64:	4613      	mov	r3, r2
2405aa66:	005b      	lsls	r3, r3, #1
2405aa68:	4413      	add	r3, r2
2405aa6a:	00db      	lsls	r3, r3, #3
2405aa6c:	3350      	adds	r3, #80	; 0x50
2405aa6e:	443b      	add	r3, r7
2405aa70:	3b2c      	subs	r3, #44	; 0x2c
2405aa72:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
2405aa74:	4299      	cmp	r1, r3
2405aa76:	d109      	bne.n	2405aa8c <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
2405aa78:	4b03      	ldr	r3, [pc, #12]	; (2405aa88 <HAL_OSPIM_Config+0x508>)
2405aa7a:	681b      	ldr	r3, [r3, #0]
2405aa7c:	4a02      	ldr	r2, [pc, #8]	; (2405aa88 <HAL_OSPIM_Config+0x508>)
2405aa7e:	f043 0301 	orr.w	r3, r3, #1
2405aa82:	6013      	str	r3, [r2, #0]
2405aa84:	e0ce      	b.n	2405ac24 <HAL_OSPIM_Config+0x6a4>
2405aa86:	bf00      	nop
2405aa88:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
2405aa8c:	49bb      	ldr	r1, [pc, #748]	; (2405ad7c <HAL_OSPIM_Config+0x7fc>)
2405aa8e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405aa92:	4613      	mov	r3, r2
2405aa94:	005b      	lsls	r3, r3, #1
2405aa96:	4413      	add	r3, r2
2405aa98:	00db      	lsls	r3, r3, #3
2405aa9a:	3350      	adds	r3, #80	; 0x50
2405aa9c:	443b      	add	r3, r7
2405aa9e:	3b3c      	subs	r3, #60	; 0x3c
2405aaa0:	681b      	ldr	r3, [r3, #0]
2405aaa2:	3b01      	subs	r3, #1
2405aaa4:	009b      	lsls	r3, r3, #2
2405aaa6:	440b      	add	r3, r1
2405aaa8:	6859      	ldr	r1, [r3, #4]
2405aaaa:	48b4      	ldr	r0, [pc, #720]	; (2405ad7c <HAL_OSPIM_Config+0x7fc>)
2405aaac:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405aab0:	4613      	mov	r3, r2
2405aab2:	005b      	lsls	r3, r3, #1
2405aab4:	4413      	add	r3, r2
2405aab6:	00db      	lsls	r3, r3, #3
2405aab8:	3350      	adds	r3, #80	; 0x50
2405aaba:	443b      	add	r3, r7
2405aabc:	3b3c      	subs	r3, #60	; 0x3c
2405aabe:	681b      	ldr	r3, [r3, #0]
2405aac0:	3b01      	subs	r3, #1
2405aac2:	f021 0201 	bic.w	r2, r1, #1
2405aac6:	009b      	lsls	r3, r3, #2
2405aac8:	4403      	add	r3, r0
2405aaca:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
2405aacc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405aad0:	4613      	mov	r3, r2
2405aad2:	005b      	lsls	r3, r3, #1
2405aad4:	4413      	add	r3, r2
2405aad6:	00db      	lsls	r3, r3, #3
2405aad8:	3350      	adds	r3, #80	; 0x50
2405aada:	443b      	add	r3, r7
2405aadc:	3b38      	subs	r3, #56	; 0x38
2405aade:	681b      	ldr	r3, [r3, #0]
2405aae0:	2b00      	cmp	r3, #0
2405aae2:	d01f      	beq.n	2405ab24 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
2405aae4:	49a5      	ldr	r1, [pc, #660]	; (2405ad7c <HAL_OSPIM_Config+0x7fc>)
2405aae6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405aaea:	4613      	mov	r3, r2
2405aaec:	005b      	lsls	r3, r3, #1
2405aaee:	4413      	add	r3, r2
2405aaf0:	00db      	lsls	r3, r3, #3
2405aaf2:	3350      	adds	r3, #80	; 0x50
2405aaf4:	443b      	add	r3, r7
2405aaf6:	3b38      	subs	r3, #56	; 0x38
2405aaf8:	681b      	ldr	r3, [r3, #0]
2405aafa:	3b01      	subs	r3, #1
2405aafc:	009b      	lsls	r3, r3, #2
2405aafe:	440b      	add	r3, r1
2405ab00:	6859      	ldr	r1, [r3, #4]
2405ab02:	489e      	ldr	r0, [pc, #632]	; (2405ad7c <HAL_OSPIM_Config+0x7fc>)
2405ab04:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405ab08:	4613      	mov	r3, r2
2405ab0a:	005b      	lsls	r3, r3, #1
2405ab0c:	4413      	add	r3, r2
2405ab0e:	00db      	lsls	r3, r3, #3
2405ab10:	3350      	adds	r3, #80	; 0x50
2405ab12:	443b      	add	r3, r7
2405ab14:	3b38      	subs	r3, #56	; 0x38
2405ab16:	681b      	ldr	r3, [r3, #0]
2405ab18:	3b01      	subs	r3, #1
2405ab1a:	f021 0210 	bic.w	r2, r1, #16
2405ab1e:	009b      	lsls	r3, r3, #2
2405ab20:	4403      	add	r3, r0
2405ab22:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
2405ab24:	4995      	ldr	r1, [pc, #596]	; (2405ad7c <HAL_OSPIM_Config+0x7fc>)
2405ab26:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405ab2a:	4613      	mov	r3, r2
2405ab2c:	005b      	lsls	r3, r3, #1
2405ab2e:	4413      	add	r3, r2
2405ab30:	00db      	lsls	r3, r3, #3
2405ab32:	3350      	adds	r3, #80	; 0x50
2405ab34:	443b      	add	r3, r7
2405ab36:	3b34      	subs	r3, #52	; 0x34
2405ab38:	681b      	ldr	r3, [r3, #0]
2405ab3a:	3b01      	subs	r3, #1
2405ab3c:	009b      	lsls	r3, r3, #2
2405ab3e:	440b      	add	r3, r1
2405ab40:	6859      	ldr	r1, [r3, #4]
2405ab42:	488e      	ldr	r0, [pc, #568]	; (2405ad7c <HAL_OSPIM_Config+0x7fc>)
2405ab44:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405ab48:	4613      	mov	r3, r2
2405ab4a:	005b      	lsls	r3, r3, #1
2405ab4c:	4413      	add	r3, r2
2405ab4e:	00db      	lsls	r3, r3, #3
2405ab50:	3350      	adds	r3, #80	; 0x50
2405ab52:	443b      	add	r3, r7
2405ab54:	3b34      	subs	r3, #52	; 0x34
2405ab56:	681b      	ldr	r3, [r3, #0]
2405ab58:	3b01      	subs	r3, #1
2405ab5a:	f421 7280 	bic.w	r2, r1, #256	; 0x100
2405ab5e:	009b      	lsls	r3, r3, #2
2405ab60:	4403      	add	r3, r0
2405ab62:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
2405ab64:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405ab68:	4613      	mov	r3, r2
2405ab6a:	005b      	lsls	r3, r3, #1
2405ab6c:	4413      	add	r3, r2
2405ab6e:	00db      	lsls	r3, r3, #3
2405ab70:	3350      	adds	r3, #80	; 0x50
2405ab72:	443b      	add	r3, r7
2405ab74:	3b30      	subs	r3, #48	; 0x30
2405ab76:	681b      	ldr	r3, [r3, #0]
2405ab78:	2b00      	cmp	r3, #0
2405ab7a:	d023      	beq.n	2405abc4 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
2405ab7c:	497f      	ldr	r1, [pc, #508]	; (2405ad7c <HAL_OSPIM_Config+0x7fc>)
2405ab7e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405ab82:	4613      	mov	r3, r2
2405ab84:	005b      	lsls	r3, r3, #1
2405ab86:	4413      	add	r3, r2
2405ab88:	00db      	lsls	r3, r3, #3
2405ab8a:	3350      	adds	r3, #80	; 0x50
2405ab8c:	443b      	add	r3, r7
2405ab8e:	3b30      	subs	r3, #48	; 0x30
2405ab90:	681b      	ldr	r3, [r3, #0]
2405ab92:	3b01      	subs	r3, #1
2405ab94:	f003 0301 	and.w	r3, r3, #1
2405ab98:	009b      	lsls	r3, r3, #2
2405ab9a:	440b      	add	r3, r1
2405ab9c:	6859      	ldr	r1, [r3, #4]
2405ab9e:	4877      	ldr	r0, [pc, #476]	; (2405ad7c <HAL_OSPIM_Config+0x7fc>)
2405aba0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405aba4:	4613      	mov	r3, r2
2405aba6:	005b      	lsls	r3, r3, #1
2405aba8:	4413      	add	r3, r2
2405abaa:	00db      	lsls	r3, r3, #3
2405abac:	3350      	adds	r3, #80	; 0x50
2405abae:	443b      	add	r3, r7
2405abb0:	3b30      	subs	r3, #48	; 0x30
2405abb2:	681b      	ldr	r3, [r3, #0]
2405abb4:	3b01      	subs	r3, #1
2405abb6:	f003 0301 	and.w	r3, r3, #1
2405abba:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
2405abbe:	009b      	lsls	r3, r3, #2
2405abc0:	4403      	add	r3, r0
2405abc2:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
2405abc4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405abc8:	4613      	mov	r3, r2
2405abca:	005b      	lsls	r3, r3, #1
2405abcc:	4413      	add	r3, r2
2405abce:	00db      	lsls	r3, r3, #3
2405abd0:	3350      	adds	r3, #80	; 0x50
2405abd2:	443b      	add	r3, r7
2405abd4:	3b2c      	subs	r3, #44	; 0x2c
2405abd6:	681b      	ldr	r3, [r3, #0]
2405abd8:	2b00      	cmp	r3, #0
2405abda:	d023      	beq.n	2405ac24 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
2405abdc:	4967      	ldr	r1, [pc, #412]	; (2405ad7c <HAL_OSPIM_Config+0x7fc>)
2405abde:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405abe2:	4613      	mov	r3, r2
2405abe4:	005b      	lsls	r3, r3, #1
2405abe6:	4413      	add	r3, r2
2405abe8:	00db      	lsls	r3, r3, #3
2405abea:	3350      	adds	r3, #80	; 0x50
2405abec:	443b      	add	r3, r7
2405abee:	3b2c      	subs	r3, #44	; 0x2c
2405abf0:	681b      	ldr	r3, [r3, #0]
2405abf2:	3b01      	subs	r3, #1
2405abf4:	f003 0301 	and.w	r3, r3, #1
2405abf8:	009b      	lsls	r3, r3, #2
2405abfa:	440b      	add	r3, r1
2405abfc:	6859      	ldr	r1, [r3, #4]
2405abfe:	485f      	ldr	r0, [pc, #380]	; (2405ad7c <HAL_OSPIM_Config+0x7fc>)
2405ac00:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405ac04:	4613      	mov	r3, r2
2405ac06:	005b      	lsls	r3, r3, #1
2405ac08:	4413      	add	r3, r2
2405ac0a:	00db      	lsls	r3, r3, #3
2405ac0c:	3350      	adds	r3, #80	; 0x50
2405ac0e:	443b      	add	r3, r7
2405ac10:	3b2c      	subs	r3, #44	; 0x2c
2405ac12:	681b      	ldr	r3, [r3, #0]
2405ac14:	3b01      	subs	r3, #1
2405ac16:	f003 0301 	and.w	r3, r3, #1
2405ac1a:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
2405ac1e:	009b      	lsls	r3, r3, #2
2405ac20:	4403      	add	r3, r0
2405ac22:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
2405ac24:	4a55      	ldr	r2, [pc, #340]	; (2405ad7c <HAL_OSPIM_Config+0x7fc>)
2405ac26:	68bb      	ldr	r3, [r7, #8]
2405ac28:	689b      	ldr	r3, [r3, #8]
2405ac2a:	3b01      	subs	r3, #1
2405ac2c:	009b      	lsls	r3, r3, #2
2405ac2e:	4413      	add	r3, r2
2405ac30:	685b      	ldr	r3, [r3, #4]
2405ac32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
2405ac36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
2405ac38:	025b      	lsls	r3, r3, #9
2405ac3a:	431a      	orrs	r2, r3
2405ac3c:	494f      	ldr	r1, [pc, #316]	; (2405ad7c <HAL_OSPIM_Config+0x7fc>)
2405ac3e:	68bb      	ldr	r3, [r7, #8]
2405ac40:	689b      	ldr	r3, [r3, #8]
2405ac42:	3b01      	subs	r3, #1
2405ac44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
2405ac48:	009b      	lsls	r3, r3, #2
2405ac4a:	440b      	add	r3, r1
2405ac4c:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
2405ac4e:	68bb      	ldr	r3, [r7, #8]
2405ac50:	695b      	ldr	r3, [r3, #20]
2405ac52:	1e5a      	subs	r2, r3, #1
2405ac54:	4b49      	ldr	r3, [pc, #292]	; (2405ad7c <HAL_OSPIM_Config+0x7fc>)
2405ac56:	681b      	ldr	r3, [r3, #0]
2405ac58:	0c1b      	lsrs	r3, r3, #16
2405ac5a:	b2db      	uxtb	r3, r3
2405ac5c:	429a      	cmp	r2, r3
2405ac5e:	d90a      	bls.n	2405ac76 <HAL_OSPIM_Config+0x6f6>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
2405ac60:	4b46      	ldr	r3, [pc, #280]	; (2405ad7c <HAL_OSPIM_Config+0x7fc>)
2405ac62:	681b      	ldr	r3, [r3, #0]
2405ac64:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
2405ac68:	68bb      	ldr	r3, [r7, #8]
2405ac6a:	695b      	ldr	r3, [r3, #20]
2405ac6c:	3b01      	subs	r3, #1
2405ac6e:	041b      	lsls	r3, r3, #16
2405ac70:	4942      	ldr	r1, [pc, #264]	; (2405ad7c <HAL_OSPIM_Config+0x7fc>)
2405ac72:	4313      	orrs	r3, r2
2405ac74:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
2405ac76:	4b41      	ldr	r3, [pc, #260]	; (2405ad7c <HAL_OSPIM_Config+0x7fc>)
2405ac78:	681b      	ldr	r3, [r3, #0]
2405ac7a:	f003 0301 	and.w	r3, r3, #1
2405ac7e:	2b00      	cmp	r3, #0
2405ac80:	f000 809a 	beq.w	2405adb8 <HAL_OSPIM_Config+0x838>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
2405ac84:	4a3d      	ldr	r2, [pc, #244]	; (2405ad7c <HAL_OSPIM_Config+0x7fc>)
2405ac86:	68bb      	ldr	r3, [r7, #8]
2405ac88:	681b      	ldr	r3, [r3, #0]
2405ac8a:	3b01      	subs	r3, #1
2405ac8c:	009b      	lsls	r3, r3, #2
2405ac8e:	4413      	add	r3, r2
2405ac90:	685b      	ldr	r3, [r3, #4]
2405ac92:	f023 0203 	bic.w	r2, r3, #3
2405ac96:	4939      	ldr	r1, [pc, #228]	; (2405ad7c <HAL_OSPIM_Config+0x7fc>)
2405ac98:	68bb      	ldr	r3, [r7, #8]
2405ac9a:	681b      	ldr	r3, [r3, #0]
2405ac9c:	3b01      	subs	r3, #1
2405ac9e:	f042 0201 	orr.w	r2, r2, #1
2405aca2:	009b      	lsls	r3, r3, #2
2405aca4:	440b      	add	r3, r1
2405aca6:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
2405aca8:	68bb      	ldr	r3, [r7, #8]
2405acaa:	685b      	ldr	r3, [r3, #4]
2405acac:	2b00      	cmp	r3, #0
2405acae:	d011      	beq.n	2405acd4 <HAL_OSPIM_Config+0x754>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
2405acb0:	4a32      	ldr	r2, [pc, #200]	; (2405ad7c <HAL_OSPIM_Config+0x7fc>)
2405acb2:	68bb      	ldr	r3, [r7, #8]
2405acb4:	685b      	ldr	r3, [r3, #4]
2405acb6:	3b01      	subs	r3, #1
2405acb8:	009b      	lsls	r3, r3, #2
2405acba:	4413      	add	r3, r2
2405acbc:	685b      	ldr	r3, [r3, #4]
2405acbe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
2405acc2:	492e      	ldr	r1, [pc, #184]	; (2405ad7c <HAL_OSPIM_Config+0x7fc>)
2405acc4:	68bb      	ldr	r3, [r7, #8]
2405acc6:	685b      	ldr	r3, [r3, #4]
2405acc8:	3b01      	subs	r3, #1
2405acca:	f042 0210 	orr.w	r2, r2, #16
2405acce:	009b      	lsls	r3, r3, #2
2405acd0:	440b      	add	r3, r1
2405acd2:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
2405acd4:	68bb      	ldr	r3, [r7, #8]
2405acd6:	68db      	ldr	r3, [r3, #12]
2405acd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2405acdc:	2b00      	cmp	r3, #0
2405acde:	d016      	beq.n	2405ad0e <HAL_OSPIM_Config+0x78e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
2405ace0:	4a26      	ldr	r2, [pc, #152]	; (2405ad7c <HAL_OSPIM_Config+0x7fc>)
2405ace2:	68bb      	ldr	r3, [r7, #8]
2405ace4:	68db      	ldr	r3, [r3, #12]
2405ace6:	3b01      	subs	r3, #1
2405ace8:	f003 0301 	and.w	r3, r3, #1
2405acec:	009b      	lsls	r3, r3, #2
2405acee:	4413      	add	r3, r2
2405acf0:	685b      	ldr	r3, [r3, #4]
2405acf2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
2405acf6:	4921      	ldr	r1, [pc, #132]	; (2405ad7c <HAL_OSPIM_Config+0x7fc>)
2405acf8:	68bb      	ldr	r3, [r7, #8]
2405acfa:	68db      	ldr	r3, [r3, #12]
2405acfc:	3b01      	subs	r3, #1
2405acfe:	f003 0301 	and.w	r3, r3, #1
2405ad02:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
2405ad06:	009b      	lsls	r3, r3, #2
2405ad08:	440b      	add	r3, r1
2405ad0a:	605a      	str	r2, [r3, #4]
2405ad0c:	e019      	b.n	2405ad42 <HAL_OSPIM_Config+0x7c2>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
2405ad0e:	68bb      	ldr	r3, [r7, #8]
2405ad10:	68db      	ldr	r3, [r3, #12]
2405ad12:	2b00      	cmp	r3, #0
2405ad14:	d015      	beq.n	2405ad42 <HAL_OSPIM_Config+0x7c2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
2405ad16:	4a19      	ldr	r2, [pc, #100]	; (2405ad7c <HAL_OSPIM_Config+0x7fc>)
2405ad18:	68bb      	ldr	r3, [r7, #8]
2405ad1a:	68db      	ldr	r3, [r3, #12]
2405ad1c:	3b01      	subs	r3, #1
2405ad1e:	f003 0301 	and.w	r3, r3, #1
2405ad22:	009b      	lsls	r3, r3, #2
2405ad24:	4413      	add	r3, r2
2405ad26:	685b      	ldr	r3, [r3, #4]
2405ad28:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
2405ad2c:	4913      	ldr	r1, [pc, #76]	; (2405ad7c <HAL_OSPIM_Config+0x7fc>)
2405ad2e:	68bb      	ldr	r3, [r7, #8]
2405ad30:	68db      	ldr	r3, [r3, #12]
2405ad32:	3b01      	subs	r3, #1
2405ad34:	f003 0301 	and.w	r3, r3, #1
2405ad38:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
2405ad3c:	009b      	lsls	r3, r3, #2
2405ad3e:	440b      	add	r3, r1
2405ad40:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
2405ad42:	68bb      	ldr	r3, [r7, #8]
2405ad44:	691b      	ldr	r3, [r3, #16]
2405ad46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2405ad4a:	2b00      	cmp	r3, #0
2405ad4c:	d018      	beq.n	2405ad80 <HAL_OSPIM_Config+0x800>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
2405ad4e:	4a0b      	ldr	r2, [pc, #44]	; (2405ad7c <HAL_OSPIM_Config+0x7fc>)
2405ad50:	68bb      	ldr	r3, [r7, #8]
2405ad52:	691b      	ldr	r3, [r3, #16]
2405ad54:	3b01      	subs	r3, #1
2405ad56:	f003 0301 	and.w	r3, r3, #1
2405ad5a:	009b      	lsls	r3, r3, #2
2405ad5c:	4413      	add	r3, r2
2405ad5e:	685b      	ldr	r3, [r3, #4]
2405ad60:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
2405ad64:	4905      	ldr	r1, [pc, #20]	; (2405ad7c <HAL_OSPIM_Config+0x7fc>)
2405ad66:	68bb      	ldr	r3, [r7, #8]
2405ad68:	691b      	ldr	r3, [r3, #16]
2405ad6a:	3b01      	subs	r3, #1
2405ad6c:	f003 0301 	and.w	r3, r3, #1
2405ad70:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
2405ad74:	009b      	lsls	r3, r3, #2
2405ad76:	440b      	add	r3, r1
2405ad78:	605a      	str	r2, [r3, #4]
2405ad7a:	e0c5      	b.n	2405af08 <HAL_OSPIM_Config+0x988>
2405ad7c:	5200b400 	.word	0x5200b400
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
2405ad80:	68bb      	ldr	r3, [r7, #8]
2405ad82:	691b      	ldr	r3, [r3, #16]
2405ad84:	2b00      	cmp	r3, #0
2405ad86:	f000 80bf 	beq.w	2405af08 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
2405ad8a:	4a6e      	ldr	r2, [pc, #440]	; (2405af44 <HAL_OSPIM_Config+0x9c4>)
2405ad8c:	68bb      	ldr	r3, [r7, #8]
2405ad8e:	691b      	ldr	r3, [r3, #16]
2405ad90:	3b01      	subs	r3, #1
2405ad92:	f003 0301 	and.w	r3, r3, #1
2405ad96:	009b      	lsls	r3, r3, #2
2405ad98:	4413      	add	r3, r2
2405ad9a:	685b      	ldr	r3, [r3, #4]
2405ad9c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
2405ada0:	4968      	ldr	r1, [pc, #416]	; (2405af44 <HAL_OSPIM_Config+0x9c4>)
2405ada2:	68bb      	ldr	r3, [r7, #8]
2405ada4:	691b      	ldr	r3, [r3, #16]
2405ada6:	3b01      	subs	r3, #1
2405ada8:	f003 0301 	and.w	r3, r3, #1
2405adac:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
2405adb0:	009b      	lsls	r3, r3, #2
2405adb2:	440b      	add	r3, r1
2405adb4:	605a      	str	r2, [r3, #4]
2405adb6:	e0a7      	b.n	2405af08 <HAL_OSPIM_Config+0x988>
         /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
2405adb8:	4a62      	ldr	r2, [pc, #392]	; (2405af44 <HAL_OSPIM_Config+0x9c4>)
2405adba:	68bb      	ldr	r3, [r7, #8]
2405adbc:	681b      	ldr	r3, [r3, #0]
2405adbe:	3b01      	subs	r3, #1
2405adc0:	009b      	lsls	r3, r3, #2
2405adc2:	4413      	add	r3, r2
2405adc4:	685b      	ldr	r3, [r3, #4]
2405adc6:	f023 0203 	bic.w	r2, r3, #3
2405adca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
2405adcc:	005b      	lsls	r3, r3, #1
2405adce:	431a      	orrs	r2, r3
2405add0:	495c      	ldr	r1, [pc, #368]	; (2405af44 <HAL_OSPIM_Config+0x9c4>)
2405add2:	68bb      	ldr	r3, [r7, #8]
2405add4:	681b      	ldr	r3, [r3, #0]
2405add6:	3b01      	subs	r3, #1
2405add8:	f042 0201 	orr.w	r2, r2, #1
2405addc:	009b      	lsls	r3, r3, #2
2405adde:	440b      	add	r3, r1
2405ade0:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
2405ade2:	68bb      	ldr	r3, [r7, #8]
2405ade4:	685b      	ldr	r3, [r3, #4]
2405ade6:	2b00      	cmp	r3, #0
2405ade8:	d014      	beq.n	2405ae14 <HAL_OSPIM_Config+0x894>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
2405adea:	4a56      	ldr	r2, [pc, #344]	; (2405af44 <HAL_OSPIM_Config+0x9c4>)
2405adec:	68bb      	ldr	r3, [r7, #8]
2405adee:	685b      	ldr	r3, [r3, #4]
2405adf0:	3b01      	subs	r3, #1
2405adf2:	009b      	lsls	r3, r3, #2
2405adf4:	4413      	add	r3, r2
2405adf6:	685b      	ldr	r3, [r3, #4]
2405adf8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
2405adfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
2405adfe:	015b      	lsls	r3, r3, #5
2405ae00:	431a      	orrs	r2, r3
2405ae02:	4950      	ldr	r1, [pc, #320]	; (2405af44 <HAL_OSPIM_Config+0x9c4>)
2405ae04:	68bb      	ldr	r3, [r7, #8]
2405ae06:	685b      	ldr	r3, [r3, #4]
2405ae08:	3b01      	subs	r3, #1
2405ae0a:	f042 0210 	orr.w	r2, r2, #16
2405ae0e:	009b      	lsls	r3, r3, #2
2405ae10:	440b      	add	r3, r1
2405ae12:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
2405ae14:	68bb      	ldr	r3, [r7, #8]
2405ae16:	68db      	ldr	r3, [r3, #12]
2405ae18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2405ae1c:	2b00      	cmp	r3, #0
2405ae1e:	d019      	beq.n	2405ae54 <HAL_OSPIM_Config+0x8d4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
2405ae20:	4a48      	ldr	r2, [pc, #288]	; (2405af44 <HAL_OSPIM_Config+0x9c4>)
2405ae22:	68bb      	ldr	r3, [r7, #8]
2405ae24:	68db      	ldr	r3, [r3, #12]
2405ae26:	3b01      	subs	r3, #1
2405ae28:	f003 0301 	and.w	r3, r3, #1
2405ae2c:	009b      	lsls	r3, r3, #2
2405ae2e:	4413      	add	r3, r2
2405ae30:	685b      	ldr	r3, [r3, #4]
2405ae32:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
2405ae36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
2405ae38:	049b      	lsls	r3, r3, #18
2405ae3a:	431a      	orrs	r2, r3
2405ae3c:	4941      	ldr	r1, [pc, #260]	; (2405af44 <HAL_OSPIM_Config+0x9c4>)
2405ae3e:	68bb      	ldr	r3, [r7, #8]
2405ae40:	68db      	ldr	r3, [r3, #12]
2405ae42:	3b01      	subs	r3, #1
2405ae44:	f003 0301 	and.w	r3, r3, #1
2405ae48:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
2405ae4c:	009b      	lsls	r3, r3, #2
2405ae4e:	440b      	add	r3, r1
2405ae50:	605a      	str	r2, [r3, #4]
2405ae52:	e01c      	b.n	2405ae8e <HAL_OSPIM_Config+0x90e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
2405ae54:	68bb      	ldr	r3, [r7, #8]
2405ae56:	68db      	ldr	r3, [r3, #12]
2405ae58:	2b00      	cmp	r3, #0
2405ae5a:	d018      	beq.n	2405ae8e <HAL_OSPIM_Config+0x90e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
2405ae5c:	4a39      	ldr	r2, [pc, #228]	; (2405af44 <HAL_OSPIM_Config+0x9c4>)
2405ae5e:	68bb      	ldr	r3, [r7, #8]
2405ae60:	68db      	ldr	r3, [r3, #12]
2405ae62:	3b01      	subs	r3, #1
2405ae64:	f003 0301 	and.w	r3, r3, #1
2405ae68:	009b      	lsls	r3, r3, #2
2405ae6a:	4413      	add	r3, r2
2405ae6c:	685b      	ldr	r3, [r3, #4]
2405ae6e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
2405ae72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
2405ae74:	069b      	lsls	r3, r3, #26
2405ae76:	431a      	orrs	r2, r3
2405ae78:	4932      	ldr	r1, [pc, #200]	; (2405af44 <HAL_OSPIM_Config+0x9c4>)
2405ae7a:	68bb      	ldr	r3, [r7, #8]
2405ae7c:	68db      	ldr	r3, [r3, #12]
2405ae7e:	3b01      	subs	r3, #1
2405ae80:	f003 0301 	and.w	r3, r3, #1
2405ae84:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
2405ae88:	009b      	lsls	r3, r3, #2
2405ae8a:	440b      	add	r3, r1
2405ae8c:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
2405ae8e:	68bb      	ldr	r3, [r7, #8]
2405ae90:	691b      	ldr	r3, [r3, #16]
2405ae92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2405ae96:	2b00      	cmp	r3, #0
2405ae98:	d019      	beq.n	2405aece <HAL_OSPIM_Config+0x94e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
2405ae9a:	4a2a      	ldr	r2, [pc, #168]	; (2405af44 <HAL_OSPIM_Config+0x9c4>)
2405ae9c:	68bb      	ldr	r3, [r7, #8]
2405ae9e:	691b      	ldr	r3, [r3, #16]
2405aea0:	3b01      	subs	r3, #1
2405aea2:	f003 0301 	and.w	r3, r3, #1
2405aea6:	009b      	lsls	r3, r3, #2
2405aea8:	4413      	add	r3, r2
2405aeaa:	685b      	ldr	r3, [r3, #4]
2405aeac:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
2405aeb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
2405aeb2:	049b      	lsls	r3, r3, #18
2405aeb4:	431a      	orrs	r2, r3
2405aeb6:	4923      	ldr	r1, [pc, #140]	; (2405af44 <HAL_OSPIM_Config+0x9c4>)
2405aeb8:	68bb      	ldr	r3, [r7, #8]
2405aeba:	691b      	ldr	r3, [r3, #16]
2405aebc:	3b01      	subs	r3, #1
2405aebe:	f003 0301 	and.w	r3, r3, #1
2405aec2:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
2405aec6:	009b      	lsls	r3, r3, #2
2405aec8:	440b      	add	r3, r1
2405aeca:	605a      	str	r2, [r3, #4]
2405aecc:	e01c      	b.n	2405af08 <HAL_OSPIM_Config+0x988>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
2405aece:	68bb      	ldr	r3, [r7, #8]
2405aed0:	691b      	ldr	r3, [r3, #16]
2405aed2:	2b00      	cmp	r3, #0
2405aed4:	d018      	beq.n	2405af08 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
2405aed6:	4a1b      	ldr	r2, [pc, #108]	; (2405af44 <HAL_OSPIM_Config+0x9c4>)
2405aed8:	68bb      	ldr	r3, [r7, #8]
2405aeda:	691b      	ldr	r3, [r3, #16]
2405aedc:	3b01      	subs	r3, #1
2405aede:	f003 0301 	and.w	r3, r3, #1
2405aee2:	009b      	lsls	r3, r3, #2
2405aee4:	4413      	add	r3, r2
2405aee6:	685b      	ldr	r3, [r3, #4]
2405aee8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
2405aeec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
2405aeee:	069b      	lsls	r3, r3, #26
2405aef0:	431a      	orrs	r2, r3
2405aef2:	4914      	ldr	r1, [pc, #80]	; (2405af44 <HAL_OSPIM_Config+0x9c4>)
2405aef4:	68bb      	ldr	r3, [r7, #8]
2405aef6:	691b      	ldr	r3, [r3, #16]
2405aef8:	3b01      	subs	r3, #1
2405aefa:	f003 0301 	and.w	r3, r3, #1
2405aefe:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
2405af02:	009b      	lsls	r3, r3, #2
2405af04:	440b      	add	r3, r1
2405af06:	605a      	str	r2, [r3, #4]
         /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
2405af08:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
2405af0c:	f003 0301 	and.w	r3, r3, #1
2405af10:	2b00      	cmp	r3, #0
2405af12:	d005      	beq.n	2405af20 <HAL_OSPIM_Config+0x9a0>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
2405af14:	4b0c      	ldr	r3, [pc, #48]	; (2405af48 <HAL_OSPIM_Config+0x9c8>)
2405af16:	681b      	ldr	r3, [r3, #0]
2405af18:	4a0b      	ldr	r2, [pc, #44]	; (2405af48 <HAL_OSPIM_Config+0x9c8>)
2405af1a:	f043 0301 	orr.w	r3, r3, #1
2405af1e:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
2405af20:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
2405af24:	f003 0302 	and.w	r3, r3, #2
2405af28:	2b00      	cmp	r3, #0
2405af2a:	d005      	beq.n	2405af38 <HAL_OSPIM_Config+0x9b8>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
2405af2c:	4b07      	ldr	r3, [pc, #28]	; (2405af4c <HAL_OSPIM_Config+0x9cc>)
2405af2e:	681b      	ldr	r3, [r3, #0]
2405af30:	4a06      	ldr	r2, [pc, #24]	; (2405af4c <HAL_OSPIM_Config+0x9cc>)
2405af32:	f043 0301 	orr.w	r3, r3, #1
2405af36:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
2405af38:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
2405af3c:	4618      	mov	r0, r3
2405af3e:	3750      	adds	r7, #80	; 0x50
2405af40:	46bd      	mov	sp, r7
2405af42:	bd80      	pop	{r7, pc}
2405af44:	5200b400 	.word	0x5200b400
2405af48:	52005000 	.word	0x52005000
2405af4c:	5200a000 	.word	0x5200a000

2405af50 <OSPI_DMAAbortCplt>:
  * @brief  DMA OSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void OSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
2405af50:	b580      	push	{r7, lr}
2405af52:	b084      	sub	sp, #16
2405af54:	af00      	add	r7, sp, #0
2405af56:	6078      	str	r0, [r7, #4]
  OSPI_HandleTypeDef* hospi = ( OSPI_HandleTypeDef* )(hmdma->Parent);
2405af58:	687b      	ldr	r3, [r7, #4]
2405af5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405af5c:	60fb      	str	r3, [r7, #12]
  hospi->XferCount = 0;
2405af5e:	68fb      	ldr	r3, [r7, #12]
2405af60:	2200      	movs	r2, #0
2405af62:	649a      	str	r2, [r3, #72]	; 0x48

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_ABORT)
2405af64:	68fb      	ldr	r3, [r7, #12]
2405af66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405af68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405af6c:	d122      	bne.n	2405afb4 <OSPI_DMAAbortCplt+0x64>
  {
    /* DMA abort called by OctoSPI abort */
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
2405af6e:	68fb      	ldr	r3, [r7, #12]
2405af70:	681b      	ldr	r3, [r3, #0]
2405af72:	6a1b      	ldr	r3, [r3, #32]
2405af74:	f003 0320 	and.w	r3, r3, #32
2405af78:	2b00      	cmp	r3, #0
2405af7a:	d014      	beq.n	2405afa6 <OSPI_DMAAbortCplt+0x56>
    {
      /* Clear transfer complete flag */
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
2405af7c:	68fb      	ldr	r3, [r7, #12]
2405af7e:	681b      	ldr	r3, [r3, #0]
2405af80:	2202      	movs	r2, #2
2405af82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enable the transfer complete interrupts */
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
2405af84:	68fb      	ldr	r3, [r7, #12]
2405af86:	681b      	ldr	r3, [r3, #0]
2405af88:	681a      	ldr	r2, [r3, #0]
2405af8a:	68fb      	ldr	r3, [r7, #12]
2405af8c:	681b      	ldr	r3, [r3, #0]
2405af8e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
2405af92:	601a      	str	r2, [r3, #0]

      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
2405af94:	68fb      	ldr	r3, [r7, #12]
2405af96:	681b      	ldr	r3, [r3, #0]
2405af98:	681a      	ldr	r2, [r3, #0]
2405af9a:	68fb      	ldr	r3, [r7, #12]
2405af9c:	681b      	ldr	r3, [r3, #0]
2405af9e:	f042 0202 	orr.w	r2, r2, #2
2405afa2:	601a      	str	r2, [r3, #0]
    hospi->ErrorCallback(hospi);
#else
    HAL_OSPI_ErrorCallback(hospi);
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
}
2405afa4:	e00c      	b.n	2405afc0 <OSPI_DMAAbortCplt+0x70>
      hospi->State = HAL_OSPI_STATE_READY;
2405afa6:	68fb      	ldr	r3, [r7, #12]
2405afa8:	2202      	movs	r2, #2
2405afaa:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_OSPI_AbortCpltCallback(hospi);
2405afac:	68f8      	ldr	r0, [r7, #12]
2405afae:	f7ff fa91 	bl	2405a4d4 <HAL_OSPI_AbortCpltCallback>
}
2405afb2:	e005      	b.n	2405afc0 <OSPI_DMAAbortCplt+0x70>
    hospi->State = HAL_OSPI_STATE_READY;
2405afb4:	68fb      	ldr	r3, [r7, #12]
2405afb6:	2202      	movs	r2, #2
2405afb8:	651a      	str	r2, [r3, #80]	; 0x50
    HAL_OSPI_ErrorCallback(hospi);
2405afba:	68f8      	ldr	r0, [r7, #12]
2405afbc:	f7ff fa80 	bl	2405a4c0 <HAL_OSPI_ErrorCallback>
}
2405afc0:	bf00      	nop
2405afc2:	3710      	adds	r7, #16
2405afc4:	46bd      	mov	sp, r7
2405afc6:	bd80      	pop	{r7, pc}

2405afc8 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
2405afc8:	b580      	push	{r7, lr}
2405afca:	b084      	sub	sp, #16
2405afcc:	af00      	add	r7, sp, #0
2405afce:	60f8      	str	r0, [r7, #12]
2405afd0:	60b9      	str	r1, [r7, #8]
2405afd2:	603b      	str	r3, [r7, #0]
2405afd4:	4613      	mov	r3, r2
2405afd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
2405afd8:	e01a      	b.n	2405b010 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
2405afda:	69bb      	ldr	r3, [r7, #24]
2405afdc:	f1b3 3fff 	cmp.w	r3, #4294967295
2405afe0:	d016      	beq.n	2405b010 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2405afe2:	f7f8 fef3 	bl	24053dcc <HAL_GetTick>
2405afe6:	4602      	mov	r2, r0
2405afe8:	683b      	ldr	r3, [r7, #0]
2405afea:	1ad3      	subs	r3, r2, r3
2405afec:	69ba      	ldr	r2, [r7, #24]
2405afee:	429a      	cmp	r2, r3
2405aff0:	d302      	bcc.n	2405aff8 <OSPI_WaitFlagStateUntilTimeout+0x30>
2405aff2:	69bb      	ldr	r3, [r7, #24]
2405aff4:	2b00      	cmp	r3, #0
2405aff6:	d10b      	bne.n	2405b010 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
2405aff8:	68fb      	ldr	r3, [r7, #12]
2405affa:	f44f 7200 	mov.w	r2, #512	; 0x200
2405affe:	651a      	str	r2, [r3, #80]	; 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
2405b000:	68fb      	ldr	r3, [r7, #12]
2405b002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405b004:	f043 0201 	orr.w	r2, r3, #1
2405b008:	68fb      	ldr	r3, [r7, #12]
2405b00a:	655a      	str	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
2405b00c:	2301      	movs	r3, #1
2405b00e:	e00e      	b.n	2405b02e <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
2405b010:	68fb      	ldr	r3, [r7, #12]
2405b012:	681b      	ldr	r3, [r3, #0]
2405b014:	6a1a      	ldr	r2, [r3, #32]
2405b016:	68bb      	ldr	r3, [r7, #8]
2405b018:	4013      	ands	r3, r2
2405b01a:	2b00      	cmp	r3, #0
2405b01c:	bf14      	ite	ne
2405b01e:	2301      	movne	r3, #1
2405b020:	2300      	moveq	r3, #0
2405b022:	b2db      	uxtb	r3, r3
2405b024:	461a      	mov	r2, r3
2405b026:	79fb      	ldrb	r3, [r7, #7]
2405b028:	429a      	cmp	r2, r3
2405b02a:	d1d6      	bne.n	2405afda <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
2405b02c:	2300      	movs	r3, #0
}
2405b02e:	4618      	mov	r0, r3
2405b030:	3710      	adds	r7, #16
2405b032:	46bd      	mov	sp, r7
2405b034:	bd80      	pop	{r7, pc}
	...

2405b038 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
2405b038:	b480      	push	{r7}
2405b03a:	b089      	sub	sp, #36	; 0x24
2405b03c:	af00      	add	r7, sp, #0
2405b03e:	6078      	str	r0, [r7, #4]
2405b040:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
2405b042:	2300      	movs	r3, #0
2405b044:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
2405b046:	687b      	ldr	r3, [r7, #4]
2405b048:	681b      	ldr	r3, [r3, #0]
2405b04a:	681a      	ldr	r2, [r3, #0]
2405b04c:	687b      	ldr	r3, [r7, #4]
2405b04e:	681b      	ldr	r3, [r3, #0]
2405b050:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
2405b054:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
2405b056:	687b      	ldr	r3, [r7, #4]
2405b058:	689b      	ldr	r3, [r3, #8]
2405b05a:	2b00      	cmp	r3, #0
2405b05c:	d10a      	bne.n	2405b074 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
2405b05e:	687b      	ldr	r3, [r7, #4]
2405b060:	681b      	ldr	r3, [r3, #0]
2405b062:	681b      	ldr	r3, [r3, #0]
2405b064:	f023 0180 	bic.w	r1, r3, #128	; 0x80
2405b068:	683b      	ldr	r3, [r7, #0]
2405b06a:	685a      	ldr	r2, [r3, #4]
2405b06c:	687b      	ldr	r3, [r7, #4]
2405b06e:	681b      	ldr	r3, [r3, #0]
2405b070:	430a      	orrs	r2, r1
2405b072:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
2405b074:	683b      	ldr	r3, [r7, #0]
2405b076:	681b      	ldr	r3, [r3, #0]
2405b078:	2b02      	cmp	r3, #2
2405b07a:	d114      	bne.n	2405b0a6 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
2405b07c:	687b      	ldr	r3, [r7, #4]
2405b07e:	681b      	ldr	r3, [r3, #0]
2405b080:	f503 73c0 	add.w	r3, r3, #384	; 0x180
2405b084:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
2405b086:	687b      	ldr	r3, [r7, #4]
2405b088:	681b      	ldr	r3, [r3, #0]
2405b08a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
2405b08e:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
2405b090:	687b      	ldr	r3, [r7, #4]
2405b092:	681b      	ldr	r3, [r3, #0]
2405b094:	f503 73c8 	add.w	r3, r3, #400	; 0x190
2405b098:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
2405b09a:	687b      	ldr	r3, [r7, #4]
2405b09c:	681b      	ldr	r3, [r3, #0]
2405b09e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
2405b0a2:	60fb      	str	r3, [r7, #12]
2405b0a4:	e02c      	b.n	2405b100 <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
2405b0a6:	683b      	ldr	r3, [r7, #0]
2405b0a8:	681b      	ldr	r3, [r3, #0]
2405b0aa:	2b03      	cmp	r3, #3
2405b0ac:	d114      	bne.n	2405b0d8 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
2405b0ae:	687b      	ldr	r3, [r7, #4]
2405b0b0:	681b      	ldr	r3, [r3, #0]
2405b0b2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
2405b0b6:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
2405b0b8:	687b      	ldr	r3, [r7, #4]
2405b0ba:	681b      	ldr	r3, [r3, #0]
2405b0bc:	f503 73a4 	add.w	r3, r3, #328	; 0x148
2405b0c0:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
2405b0c2:	687b      	ldr	r3, [r7, #4]
2405b0c4:	681b      	ldr	r3, [r3, #0]
2405b0c6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
2405b0ca:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
2405b0cc:	687b      	ldr	r3, [r7, #4]
2405b0ce:	681b      	ldr	r3, [r3, #0]
2405b0d0:	f503 73b0 	add.w	r3, r3, #352	; 0x160
2405b0d4:	60fb      	str	r3, [r7, #12]
2405b0d6:	e013      	b.n	2405b100 <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
2405b0d8:	687b      	ldr	r3, [r7, #4]
2405b0da:	681b      	ldr	r3, [r3, #0]
2405b0dc:	f503 7380 	add.w	r3, r3, #256	; 0x100
2405b0e0:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
2405b0e2:	687b      	ldr	r3, [r7, #4]
2405b0e4:	681b      	ldr	r3, [r3, #0]
2405b0e6:	f503 7384 	add.w	r3, r3, #264	; 0x108
2405b0ea:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
2405b0ec:	687b      	ldr	r3, [r7, #4]
2405b0ee:	681b      	ldr	r3, [r3, #0]
2405b0f0:	f503 7388 	add.w	r3, r3, #272	; 0x110
2405b0f4:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
2405b0f6:	687b      	ldr	r3, [r7, #4]
2405b0f8:	681b      	ldr	r3, [r3, #0]
2405b0fa:	f503 7390 	add.w	r3, r3, #288	; 0x120
2405b0fe:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
2405b100:	683b      	ldr	r3, [r7, #0]
2405b102:	6c9a      	ldr	r2, [r3, #72]	; 0x48
2405b104:	683b      	ldr	r3, [r7, #0]
2405b106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405b108:	431a      	orrs	r2, r3
2405b10a:	69bb      	ldr	r3, [r7, #24]
2405b10c:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
2405b10e:	683b      	ldr	r3, [r7, #0]
2405b110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405b112:	2b00      	cmp	r3, #0
2405b114:	d012      	beq.n	2405b13c <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
2405b116:	683b      	ldr	r3, [r7, #0]
2405b118:	6a9a      	ldr	r2, [r3, #40]	; 0x28
2405b11a:	68fb      	ldr	r3, [r7, #12]
2405b11c:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
2405b11e:	69bb      	ldr	r3, [r7, #24]
2405b120:	681b      	ldr	r3, [r3, #0]
2405b122:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
2405b126:	683b      	ldr	r3, [r7, #0]
2405b128:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
2405b12a:	683b      	ldr	r3, [r7, #0]
2405b12c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2405b12e:	4319      	orrs	r1, r3
2405b130:	683b      	ldr	r3, [r7, #0]
2405b132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405b134:	430b      	orrs	r3, r1
2405b136:	431a      	orrs	r2, r3
2405b138:	69bb      	ldr	r3, [r7, #24]
2405b13a:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
2405b13c:	697b      	ldr	r3, [r7, #20]
2405b13e:	681b      	ldr	r3, [r3, #0]
2405b140:	f023 021f 	bic.w	r2, r3, #31
2405b144:	683b      	ldr	r3, [r7, #0]
2405b146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2405b148:	431a      	orrs	r2, r3
2405b14a:	697b      	ldr	r3, [r7, #20]
2405b14c:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
2405b14e:	683b      	ldr	r3, [r7, #0]
2405b150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405b152:	2b00      	cmp	r3, #0
2405b154:	d009      	beq.n	2405b16a <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
2405b156:	683b      	ldr	r3, [r7, #0]
2405b158:	681b      	ldr	r3, [r3, #0]
2405b15a:	2b00      	cmp	r3, #0
2405b15c:	d105      	bne.n	2405b16a <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
2405b15e:	683b      	ldr	r3, [r7, #0]
2405b160:	6bda      	ldr	r2, [r3, #60]	; 0x3c
2405b162:	687b      	ldr	r3, [r7, #4]
2405b164:	681b      	ldr	r3, [r3, #0]
2405b166:	3a01      	subs	r2, #1
2405b168:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
2405b16a:	683b      	ldr	r3, [r7, #0]
2405b16c:	68db      	ldr	r3, [r3, #12]
2405b16e:	2b00      	cmp	r3, #0
2405b170:	f000 8095 	beq.w	2405b29e <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
2405b174:	683b      	ldr	r3, [r7, #0]
2405b176:	69db      	ldr	r3, [r3, #28]
2405b178:	2b00      	cmp	r3, #0
2405b17a:	d053      	beq.n	2405b224 <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
2405b17c:	683b      	ldr	r3, [r7, #0]
2405b17e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405b180:	2b00      	cmp	r3, #0
2405b182:	d01e      	beq.n	2405b1c2 <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
2405b184:	69bb      	ldr	r3, [r7, #24]
2405b186:	681a      	ldr	r2, [r3, #0]
2405b188:	4b64      	ldr	r3, [pc, #400]	; (2405b31c <OSPI_ConfigCmd+0x2e4>)
2405b18a:	4013      	ands	r3, r2
2405b18c:	683a      	ldr	r2, [r7, #0]
2405b18e:	68d1      	ldr	r1, [r2, #12]
2405b190:	683a      	ldr	r2, [r7, #0]
2405b192:	6952      	ldr	r2, [r2, #20]
2405b194:	4311      	orrs	r1, r2
2405b196:	683a      	ldr	r2, [r7, #0]
2405b198:	6912      	ldr	r2, [r2, #16]
2405b19a:	4311      	orrs	r1, r2
2405b19c:	683a      	ldr	r2, [r7, #0]
2405b19e:	69d2      	ldr	r2, [r2, #28]
2405b1a0:	4311      	orrs	r1, r2
2405b1a2:	683a      	ldr	r2, [r7, #0]
2405b1a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
2405b1a6:	4311      	orrs	r1, r2
2405b1a8:	683a      	ldr	r2, [r7, #0]
2405b1aa:	6a12      	ldr	r2, [r2, #32]
2405b1ac:	4311      	orrs	r1, r2
2405b1ae:	683a      	ldr	r2, [r7, #0]
2405b1b0:	6b92      	ldr	r2, [r2, #56]	; 0x38
2405b1b2:	4311      	orrs	r1, r2
2405b1b4:	683a      	ldr	r2, [r7, #0]
2405b1b6:	6c12      	ldr	r2, [r2, #64]	; 0x40
2405b1b8:	430a      	orrs	r2, r1
2405b1ba:	431a      	orrs	r2, r3
2405b1bc:	69bb      	ldr	r3, [r7, #24]
2405b1be:	601a      	str	r2, [r3, #0]
2405b1c0:	e026      	b.n	2405b210 <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
2405b1c2:	69bb      	ldr	r3, [r7, #24]
2405b1c4:	681a      	ldr	r2, [r3, #0]
2405b1c6:	4b56      	ldr	r3, [pc, #344]	; (2405b320 <OSPI_ConfigCmd+0x2e8>)
2405b1c8:	4013      	ands	r3, r2
2405b1ca:	683a      	ldr	r2, [r7, #0]
2405b1cc:	68d1      	ldr	r1, [r2, #12]
2405b1ce:	683a      	ldr	r2, [r7, #0]
2405b1d0:	6952      	ldr	r2, [r2, #20]
2405b1d2:	4311      	orrs	r1, r2
2405b1d4:	683a      	ldr	r2, [r7, #0]
2405b1d6:	6912      	ldr	r2, [r2, #16]
2405b1d8:	4311      	orrs	r1, r2
2405b1da:	683a      	ldr	r2, [r7, #0]
2405b1dc:	69d2      	ldr	r2, [r2, #28]
2405b1de:	4311      	orrs	r1, r2
2405b1e0:	683a      	ldr	r2, [r7, #0]
2405b1e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
2405b1e4:	4311      	orrs	r1, r2
2405b1e6:	683a      	ldr	r2, [r7, #0]
2405b1e8:	6a12      	ldr	r2, [r2, #32]
2405b1ea:	430a      	orrs	r2, r1
2405b1ec:	431a      	orrs	r2, r3
2405b1ee:	69bb      	ldr	r3, [r7, #24]
2405b1f0:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
2405b1f2:	687b      	ldr	r3, [r7, #4]
2405b1f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405b1f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2405b1fa:	d109      	bne.n	2405b210 <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
2405b1fc:	683b      	ldr	r3, [r7, #0]
2405b1fe:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
2405b200:	2b08      	cmp	r3, #8
2405b202:	d105      	bne.n	2405b210 <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
2405b204:	69bb      	ldr	r3, [r7, #24]
2405b206:	681b      	ldr	r3, [r3, #0]
2405b208:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
2405b20c:	69bb      	ldr	r3, [r7, #24]
2405b20e:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
2405b210:	683b      	ldr	r3, [r7, #0]
2405b212:	689a      	ldr	r2, [r3, #8]
2405b214:	693b      	ldr	r3, [r7, #16]
2405b216:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
2405b218:	687b      	ldr	r3, [r7, #4]
2405b21a:	681b      	ldr	r3, [r3, #0]
2405b21c:	683a      	ldr	r2, [r7, #0]
2405b21e:	6992      	ldr	r2, [r2, #24]
2405b220:	649a      	str	r2, [r3, #72]	; 0x48
2405b222:	e074      	b.n	2405b30e <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
2405b224:	683b      	ldr	r3, [r7, #0]
2405b226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405b228:	2b00      	cmp	r3, #0
2405b22a:	d015      	beq.n	2405b258 <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
2405b22c:	69bb      	ldr	r3, [r7, #24]
2405b22e:	681a      	ldr	r2, [r3, #0]
2405b230:	4b3c      	ldr	r3, [pc, #240]	; (2405b324 <OSPI_ConfigCmd+0x2ec>)
2405b232:	4013      	ands	r3, r2
2405b234:	683a      	ldr	r2, [r7, #0]
2405b236:	68d1      	ldr	r1, [r2, #12]
2405b238:	683a      	ldr	r2, [r7, #0]
2405b23a:	6952      	ldr	r2, [r2, #20]
2405b23c:	4311      	orrs	r1, r2
2405b23e:	683a      	ldr	r2, [r7, #0]
2405b240:	6912      	ldr	r2, [r2, #16]
2405b242:	4311      	orrs	r1, r2
2405b244:	683a      	ldr	r2, [r7, #0]
2405b246:	6b92      	ldr	r2, [r2, #56]	; 0x38
2405b248:	4311      	orrs	r1, r2
2405b24a:	683a      	ldr	r2, [r7, #0]
2405b24c:	6c12      	ldr	r2, [r2, #64]	; 0x40
2405b24e:	430a      	orrs	r2, r1
2405b250:	431a      	orrs	r2, r3
2405b252:	69bb      	ldr	r3, [r7, #24]
2405b254:	601a      	str	r2, [r3, #0]
2405b256:	e01d      	b.n	2405b294 <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
2405b258:	69bb      	ldr	r3, [r7, #24]
2405b25a:	681b      	ldr	r3, [r3, #0]
2405b25c:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
2405b260:	683b      	ldr	r3, [r7, #0]
2405b262:	68d9      	ldr	r1, [r3, #12]
2405b264:	683b      	ldr	r3, [r7, #0]
2405b266:	695b      	ldr	r3, [r3, #20]
2405b268:	4319      	orrs	r1, r3
2405b26a:	683b      	ldr	r3, [r7, #0]
2405b26c:	691b      	ldr	r3, [r3, #16]
2405b26e:	430b      	orrs	r3, r1
2405b270:	431a      	orrs	r2, r3
2405b272:	69bb      	ldr	r3, [r7, #24]
2405b274:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
2405b276:	687b      	ldr	r3, [r7, #4]
2405b278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405b27a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2405b27e:	d109      	bne.n	2405b294 <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
2405b280:	683b      	ldr	r3, [r7, #0]
2405b282:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
2405b284:	2b08      	cmp	r3, #8
2405b286:	d105      	bne.n	2405b294 <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
2405b288:	69bb      	ldr	r3, [r7, #24]
2405b28a:	681b      	ldr	r3, [r3, #0]
2405b28c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
2405b290:	69bb      	ldr	r3, [r7, #24]
2405b292:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
2405b294:	683b      	ldr	r3, [r7, #0]
2405b296:	689a      	ldr	r2, [r3, #8]
2405b298:	693b      	ldr	r3, [r7, #16]
2405b29a:	601a      	str	r2, [r3, #0]
2405b29c:	e037      	b.n	2405b30e <OSPI_ConfigCmd+0x2d6>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
2405b29e:	683b      	ldr	r3, [r7, #0]
2405b2a0:	69db      	ldr	r3, [r3, #28]
2405b2a2:	2b00      	cmp	r3, #0
2405b2a4:	d02e      	beq.n	2405b304 <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
2405b2a6:	683b      	ldr	r3, [r7, #0]
2405b2a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405b2aa:	2b00      	cmp	r3, #0
2405b2ac:	d015      	beq.n	2405b2da <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
2405b2ae:	69bb      	ldr	r3, [r7, #24]
2405b2b0:	681a      	ldr	r2, [r3, #0]
2405b2b2:	4b1d      	ldr	r3, [pc, #116]	; (2405b328 <OSPI_ConfigCmd+0x2f0>)
2405b2b4:	4013      	ands	r3, r2
2405b2b6:	683a      	ldr	r2, [r7, #0]
2405b2b8:	69d1      	ldr	r1, [r2, #28]
2405b2ba:	683a      	ldr	r2, [r7, #0]
2405b2bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
2405b2be:	4311      	orrs	r1, r2
2405b2c0:	683a      	ldr	r2, [r7, #0]
2405b2c2:	6a12      	ldr	r2, [r2, #32]
2405b2c4:	4311      	orrs	r1, r2
2405b2c6:	683a      	ldr	r2, [r7, #0]
2405b2c8:	6b92      	ldr	r2, [r2, #56]	; 0x38
2405b2ca:	4311      	orrs	r1, r2
2405b2cc:	683a      	ldr	r2, [r7, #0]
2405b2ce:	6c12      	ldr	r2, [r2, #64]	; 0x40
2405b2d0:	430a      	orrs	r2, r1
2405b2d2:	431a      	orrs	r2, r3
2405b2d4:	69bb      	ldr	r3, [r7, #24]
2405b2d6:	601a      	str	r2, [r3, #0]
2405b2d8:	e00e      	b.n	2405b2f8 <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
2405b2da:	69bb      	ldr	r3, [r7, #24]
2405b2dc:	681b      	ldr	r3, [r3, #0]
2405b2de:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
2405b2e2:	683b      	ldr	r3, [r7, #0]
2405b2e4:	69d9      	ldr	r1, [r3, #28]
2405b2e6:	683b      	ldr	r3, [r7, #0]
2405b2e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2405b2ea:	4319      	orrs	r1, r3
2405b2ec:	683b      	ldr	r3, [r7, #0]
2405b2ee:	6a1b      	ldr	r3, [r3, #32]
2405b2f0:	430b      	orrs	r3, r1
2405b2f2:	431a      	orrs	r2, r3
2405b2f4:	69bb      	ldr	r3, [r7, #24]
2405b2f6:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
2405b2f8:	687b      	ldr	r3, [r7, #4]
2405b2fa:	681b      	ldr	r3, [r3, #0]
2405b2fc:	683a      	ldr	r2, [r7, #0]
2405b2fe:	6992      	ldr	r2, [r2, #24]
2405b300:	649a      	str	r2, [r3, #72]	; 0x48
2405b302:	e004      	b.n	2405b30e <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
2405b304:	2301      	movs	r3, #1
2405b306:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
2405b308:	687b      	ldr	r3, [r7, #4]
2405b30a:	2208      	movs	r2, #8
2405b30c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
2405b30e:	7ffb      	ldrb	r3, [r7, #31]
}
2405b310:	4618      	mov	r0, r3
2405b312:	3724      	adds	r7, #36	; 0x24
2405b314:	46bd      	mov	sp, r7
2405b316:	f85d 7b04 	ldr.w	r7, [sp], #4
2405b31a:	4770      	bx	lr
2405b31c:	f0ffc0c0 	.word	0xf0ffc0c0
2405b320:	ffffc0c0 	.word	0xffffc0c0
2405b324:	f0ffffc0 	.word	0xf0ffffc0
2405b328:	f0ffc0ff 	.word	0xf0ffc0ff

2405b32c <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
2405b32c:	b480      	push	{r7}
2405b32e:	b087      	sub	sp, #28
2405b330:	af00      	add	r7, sp, #0
2405b332:	4603      	mov	r3, r0
2405b334:	6039      	str	r1, [r7, #0]
2405b336:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
2405b338:	2300      	movs	r3, #0
2405b33a:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
2405b33c:	2300      	movs	r3, #0
2405b33e:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
2405b340:	79fb      	ldrb	r3, [r7, #7]
2405b342:	2b00      	cmp	r3, #0
2405b344:	d005      	beq.n	2405b352 <OSPIM_GetConfig+0x26>
2405b346:	79fb      	ldrb	r3, [r7, #7]
2405b348:	2b02      	cmp	r3, #2
2405b34a:	d802      	bhi.n	2405b352 <OSPIM_GetConfig+0x26>
2405b34c:	683b      	ldr	r3, [r7, #0]
2405b34e:	2b00      	cmp	r3, #0
2405b350:	d102      	bne.n	2405b358 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
2405b352:	2301      	movs	r3, #1
2405b354:	75fb      	strb	r3, [r7, #23]
2405b356:	e098      	b.n	2405b48a <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
2405b358:	683b      	ldr	r3, [r7, #0]
2405b35a:	2200      	movs	r2, #0
2405b35c:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
2405b35e:	683b      	ldr	r3, [r7, #0]
2405b360:	2200      	movs	r2, #0
2405b362:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
2405b364:	683b      	ldr	r3, [r7, #0]
2405b366:	2200      	movs	r2, #0
2405b368:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
2405b36a:	683b      	ldr	r3, [r7, #0]
2405b36c:	2200      	movs	r2, #0
2405b36e:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
2405b370:	683b      	ldr	r3, [r7, #0]
2405b372:	2200      	movs	r2, #0
2405b374:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
2405b376:	79fb      	ldrb	r3, [r7, #7]
2405b378:	2b02      	cmp	r3, #2
2405b37a:	d10b      	bne.n	2405b394 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
2405b37c:	4b46      	ldr	r3, [pc, #280]	; (2405b498 <OSPIM_GetConfig+0x16c>)
2405b37e:	681b      	ldr	r3, [r3, #0]
2405b380:	f003 0301 	and.w	r3, r3, #1
2405b384:	2b00      	cmp	r3, #0
2405b386:	d102      	bne.n	2405b38e <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
2405b388:	4b44      	ldr	r3, [pc, #272]	; (2405b49c <OSPIM_GetConfig+0x170>)
2405b38a:	613b      	str	r3, [r7, #16]
2405b38c:	e002      	b.n	2405b394 <OSPIM_GetConfig+0x68>
               | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
2405b38e:	f44f 7300 	mov.w	r3, #512	; 0x200
2405b392:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
2405b394:	2300      	movs	r3, #0
2405b396:	60fb      	str	r3, [r7, #12]
2405b398:	e074      	b.n	2405b484 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
2405b39a:	4a3f      	ldr	r2, [pc, #252]	; (2405b498 <OSPIM_GetConfig+0x16c>)
2405b39c:	68fb      	ldr	r3, [r7, #12]
2405b39e:	009b      	lsls	r3, r3, #2
2405b3a0:	4413      	add	r3, r2
2405b3a2:	685b      	ldr	r3, [r3, #4]
2405b3a4:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
2405b3a6:	68bb      	ldr	r3, [r7, #8]
2405b3a8:	f003 0301 	and.w	r3, r3, #1
2405b3ac:	2b00      	cmp	r3, #0
2405b3ae:	d00a      	beq.n	2405b3c6 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
2405b3b0:	68ba      	ldr	r2, [r7, #8]
2405b3b2:	693b      	ldr	r3, [r7, #16]
2405b3b4:	4053      	eors	r3, r2
2405b3b6:	f003 0302 	and.w	r3, r3, #2
2405b3ba:	2b00      	cmp	r3, #0
2405b3bc:	d103      	bne.n	2405b3c6 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
2405b3be:	68fb      	ldr	r3, [r7, #12]
2405b3c0:	1c5a      	adds	r2, r3, #1
2405b3c2:	683b      	ldr	r3, [r7, #0]
2405b3c4:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
2405b3c6:	68bb      	ldr	r3, [r7, #8]
2405b3c8:	f003 0310 	and.w	r3, r3, #16
2405b3cc:	2b00      	cmp	r3, #0
2405b3ce:	d00a      	beq.n	2405b3e6 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
2405b3d0:	68ba      	ldr	r2, [r7, #8]
2405b3d2:	693b      	ldr	r3, [r7, #16]
2405b3d4:	4053      	eors	r3, r2
2405b3d6:	f003 0320 	and.w	r3, r3, #32
2405b3da:	2b00      	cmp	r3, #0
2405b3dc:	d103      	bne.n	2405b3e6 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
2405b3de:	68fb      	ldr	r3, [r7, #12]
2405b3e0:	1c5a      	adds	r2, r3, #1
2405b3e2:	683b      	ldr	r3, [r7, #0]
2405b3e4:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
2405b3e6:	68bb      	ldr	r3, [r7, #8]
2405b3e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405b3ec:	2b00      	cmp	r3, #0
2405b3ee:	d00a      	beq.n	2405b406 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
2405b3f0:	68ba      	ldr	r2, [r7, #8]
2405b3f2:	693b      	ldr	r3, [r7, #16]
2405b3f4:	4053      	eors	r3, r2
2405b3f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
2405b3fa:	2b00      	cmp	r3, #0
2405b3fc:	d103      	bne.n	2405b406 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
2405b3fe:	68fb      	ldr	r3, [r7, #12]
2405b400:	1c5a      	adds	r2, r3, #1
2405b402:	683b      	ldr	r3, [r7, #0]
2405b404:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
2405b406:	68bb      	ldr	r3, [r7, #8]
2405b408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2405b40c:	2b00      	cmp	r3, #0
2405b40e:	d018      	beq.n	2405b442 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
2405b410:	68ba      	ldr	r2, [r7, #8]
2405b412:	693b      	ldr	r3, [r7, #16]
2405b414:	4053      	eors	r3, r2
2405b416:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
2405b41a:	2b00      	cmp	r3, #0
2405b41c:	d111      	bne.n	2405b442 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
2405b41e:	68bb      	ldr	r3, [r7, #8]
2405b420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405b424:	2b00      	cmp	r3, #0
2405b426:	d106      	bne.n	2405b436 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
2405b428:	68fb      	ldr	r3, [r7, #12]
2405b42a:	3301      	adds	r3, #1
2405b42c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
2405b430:	683b      	ldr	r3, [r7, #0]
2405b432:	60da      	str	r2, [r3, #12]
2405b434:	e005      	b.n	2405b442 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
2405b436:	68fb      	ldr	r3, [r7, #12]
2405b438:	3301      	adds	r3, #1
2405b43a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
2405b43e:	683b      	ldr	r3, [r7, #0]
2405b440:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
2405b442:	68bb      	ldr	r3, [r7, #8]
2405b444:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
2405b448:	2b00      	cmp	r3, #0
2405b44a:	d018      	beq.n	2405b47e <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
2405b44c:	68ba      	ldr	r2, [r7, #8]
2405b44e:	693b      	ldr	r3, [r7, #16]
2405b450:	4053      	eors	r3, r2
2405b452:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
2405b456:	2b00      	cmp	r3, #0
2405b458:	d111      	bne.n	2405b47e <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
2405b45a:	68bb      	ldr	r3, [r7, #8]
2405b45c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2405b460:	2b00      	cmp	r3, #0
2405b462:	d106      	bne.n	2405b472 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
2405b464:	68fb      	ldr	r3, [r7, #12]
2405b466:	3301      	adds	r3, #1
2405b468:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
2405b46c:	683b      	ldr	r3, [r7, #0]
2405b46e:	611a      	str	r2, [r3, #16]
2405b470:	e005      	b.n	2405b47e <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
2405b472:	68fb      	ldr	r3, [r7, #12]
2405b474:	3301      	adds	r3, #1
2405b476:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
2405b47a:	683b      	ldr	r3, [r7, #0]
2405b47c:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
2405b47e:	68fb      	ldr	r3, [r7, #12]
2405b480:	3301      	adds	r3, #1
2405b482:	60fb      	str	r3, [r7, #12]
2405b484:	68fb      	ldr	r3, [r7, #12]
2405b486:	2b01      	cmp	r3, #1
2405b488:	d987      	bls.n	2405b39a <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
2405b48a:	7dfb      	ldrb	r3, [r7, #23]
}
2405b48c:	4618      	mov	r0, r3
2405b48e:	371c      	adds	r7, #28
2405b490:	46bd      	mov	sp, r7
2405b492:	f85d 7b04 	ldr.w	r7, [sp], #4
2405b496:	4770      	bx	lr
2405b498:	5200b400 	.word	0x5200b400
2405b49c:	04040222 	.word	0x04040222

2405b4a0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
2405b4a0:	b480      	push	{r7}
2405b4a2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
2405b4a4:	4b05      	ldr	r3, [pc, #20]	; (2405b4bc <HAL_PWR_EnableBkUpAccess+0x1c>)
2405b4a6:	681b      	ldr	r3, [r3, #0]
2405b4a8:	4a04      	ldr	r2, [pc, #16]	; (2405b4bc <HAL_PWR_EnableBkUpAccess+0x1c>)
2405b4aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2405b4ae:	6013      	str	r3, [r2, #0]
}
2405b4b0:	bf00      	nop
2405b4b2:	46bd      	mov	sp, r7
2405b4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
2405b4b8:	4770      	bx	lr
2405b4ba:	bf00      	nop
2405b4bc:	58024800 	.word	0x58024800

2405b4c0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
2405b4c0:	b580      	push	{r7, lr}
2405b4c2:	b084      	sub	sp, #16
2405b4c4:	af00      	add	r7, sp, #0
2405b4c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
2405b4c8:	4b19      	ldr	r3, [pc, #100]	; (2405b530 <HAL_PWREx_ConfigSupply+0x70>)
2405b4ca:	68db      	ldr	r3, [r3, #12]
2405b4cc:	f003 0304 	and.w	r3, r3, #4
2405b4d0:	2b04      	cmp	r3, #4
2405b4d2:	d00a      	beq.n	2405b4ea <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
2405b4d4:	4b16      	ldr	r3, [pc, #88]	; (2405b530 <HAL_PWREx_ConfigSupply+0x70>)
2405b4d6:	68db      	ldr	r3, [r3, #12]
2405b4d8:	f003 0307 	and.w	r3, r3, #7
2405b4dc:	687a      	ldr	r2, [r7, #4]
2405b4de:	429a      	cmp	r2, r3
2405b4e0:	d001      	beq.n	2405b4e6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
2405b4e2:	2301      	movs	r3, #1
2405b4e4:	e01f      	b.n	2405b526 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
2405b4e6:	2300      	movs	r3, #0
2405b4e8:	e01d      	b.n	2405b526 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
2405b4ea:	4b11      	ldr	r3, [pc, #68]	; (2405b530 <HAL_PWREx_ConfigSupply+0x70>)
2405b4ec:	68db      	ldr	r3, [r3, #12]
2405b4ee:	f023 0207 	bic.w	r2, r3, #7
2405b4f2:	490f      	ldr	r1, [pc, #60]	; (2405b530 <HAL_PWREx_ConfigSupply+0x70>)
2405b4f4:	687b      	ldr	r3, [r7, #4]
2405b4f6:	4313      	orrs	r3, r2
2405b4f8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
2405b4fa:	f7f8 fc67 	bl	24053dcc <HAL_GetTick>
2405b4fe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
2405b500:	e009      	b.n	2405b516 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
2405b502:	f7f8 fc63 	bl	24053dcc <HAL_GetTick>
2405b506:	4602      	mov	r2, r0
2405b508:	68fb      	ldr	r3, [r7, #12]
2405b50a:	1ad3      	subs	r3, r2, r3
2405b50c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
2405b510:	d901      	bls.n	2405b516 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
2405b512:	2301      	movs	r3, #1
2405b514:	e007      	b.n	2405b526 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
2405b516:	4b06      	ldr	r3, [pc, #24]	; (2405b530 <HAL_PWREx_ConfigSupply+0x70>)
2405b518:	685b      	ldr	r3, [r3, #4]
2405b51a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
2405b51e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2405b522:	d1ee      	bne.n	2405b502 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
2405b524:	2300      	movs	r3, #0
}
2405b526:	4618      	mov	r0, r3
2405b528:	3710      	adds	r7, #16
2405b52a:	46bd      	mov	sp, r7
2405b52c:	bd80      	pop	{r7, pc}
2405b52e:	bf00      	nop
2405b530:	58024800 	.word	0x58024800

2405b534 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
2405b534:	b580      	push	{r7, lr}
2405b536:	b08c      	sub	sp, #48	; 0x30
2405b538:	af00      	add	r7, sp, #0
2405b53a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
2405b53c:	687b      	ldr	r3, [r7, #4]
2405b53e:	2b00      	cmp	r3, #0
2405b540:	d102      	bne.n	2405b548 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
2405b542:	2301      	movs	r3, #1
2405b544:	f000 bc1f 	b.w	2405bd86 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
2405b548:	687b      	ldr	r3, [r7, #4]
2405b54a:	681b      	ldr	r3, [r3, #0]
2405b54c:	f003 0301 	and.w	r3, r3, #1
2405b550:	2b00      	cmp	r3, #0
2405b552:	f000 80b3 	beq.w	2405b6bc <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
2405b556:	4b95      	ldr	r3, [pc, #596]	; (2405b7ac <HAL_RCC_OscConfig+0x278>)
2405b558:	691b      	ldr	r3, [r3, #16]
2405b55a:	f003 0338 	and.w	r3, r3, #56	; 0x38
2405b55e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
2405b560:	4b92      	ldr	r3, [pc, #584]	; (2405b7ac <HAL_RCC_OscConfig+0x278>)
2405b562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405b564:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
2405b566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2405b568:	2b10      	cmp	r3, #16
2405b56a:	d007      	beq.n	2405b57c <HAL_RCC_OscConfig+0x48>
2405b56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2405b56e:	2b18      	cmp	r3, #24
2405b570:	d112      	bne.n	2405b598 <HAL_RCC_OscConfig+0x64>
2405b572:	6abb      	ldr	r3, [r7, #40]	; 0x28
2405b574:	f003 0303 	and.w	r3, r3, #3
2405b578:	2b02      	cmp	r3, #2
2405b57a:	d10d      	bne.n	2405b598 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
2405b57c:	4b8b      	ldr	r3, [pc, #556]	; (2405b7ac <HAL_RCC_OscConfig+0x278>)
2405b57e:	681b      	ldr	r3, [r3, #0]
2405b580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405b584:	2b00      	cmp	r3, #0
2405b586:	f000 8098 	beq.w	2405b6ba <HAL_RCC_OscConfig+0x186>
2405b58a:	687b      	ldr	r3, [r7, #4]
2405b58c:	685b      	ldr	r3, [r3, #4]
2405b58e:	2b00      	cmp	r3, #0
2405b590:	f040 8093 	bne.w	2405b6ba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
2405b594:	2301      	movs	r3, #1
2405b596:	e3f6      	b.n	2405bd86 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
2405b598:	687b      	ldr	r3, [r7, #4]
2405b59a:	685b      	ldr	r3, [r3, #4]
2405b59c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2405b5a0:	d106      	bne.n	2405b5b0 <HAL_RCC_OscConfig+0x7c>
2405b5a2:	4b82      	ldr	r3, [pc, #520]	; (2405b7ac <HAL_RCC_OscConfig+0x278>)
2405b5a4:	681b      	ldr	r3, [r3, #0]
2405b5a6:	4a81      	ldr	r2, [pc, #516]	; (2405b7ac <HAL_RCC_OscConfig+0x278>)
2405b5a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2405b5ac:	6013      	str	r3, [r2, #0]
2405b5ae:	e058      	b.n	2405b662 <HAL_RCC_OscConfig+0x12e>
2405b5b0:	687b      	ldr	r3, [r7, #4]
2405b5b2:	685b      	ldr	r3, [r3, #4]
2405b5b4:	2b00      	cmp	r3, #0
2405b5b6:	d112      	bne.n	2405b5de <HAL_RCC_OscConfig+0xaa>
2405b5b8:	4b7c      	ldr	r3, [pc, #496]	; (2405b7ac <HAL_RCC_OscConfig+0x278>)
2405b5ba:	681b      	ldr	r3, [r3, #0]
2405b5bc:	4a7b      	ldr	r2, [pc, #492]	; (2405b7ac <HAL_RCC_OscConfig+0x278>)
2405b5be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2405b5c2:	6013      	str	r3, [r2, #0]
2405b5c4:	4b79      	ldr	r3, [pc, #484]	; (2405b7ac <HAL_RCC_OscConfig+0x278>)
2405b5c6:	681b      	ldr	r3, [r3, #0]
2405b5c8:	4a78      	ldr	r2, [pc, #480]	; (2405b7ac <HAL_RCC_OscConfig+0x278>)
2405b5ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
2405b5ce:	6013      	str	r3, [r2, #0]
2405b5d0:	4b76      	ldr	r3, [pc, #472]	; (2405b7ac <HAL_RCC_OscConfig+0x278>)
2405b5d2:	681b      	ldr	r3, [r3, #0]
2405b5d4:	4a75      	ldr	r2, [pc, #468]	; (2405b7ac <HAL_RCC_OscConfig+0x278>)
2405b5d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
2405b5da:	6013      	str	r3, [r2, #0]
2405b5dc:	e041      	b.n	2405b662 <HAL_RCC_OscConfig+0x12e>
2405b5de:	687b      	ldr	r3, [r7, #4]
2405b5e0:	685b      	ldr	r3, [r3, #4]
2405b5e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
2405b5e6:	d112      	bne.n	2405b60e <HAL_RCC_OscConfig+0xda>
2405b5e8:	4b70      	ldr	r3, [pc, #448]	; (2405b7ac <HAL_RCC_OscConfig+0x278>)
2405b5ea:	681b      	ldr	r3, [r3, #0]
2405b5ec:	4a6f      	ldr	r2, [pc, #444]	; (2405b7ac <HAL_RCC_OscConfig+0x278>)
2405b5ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
2405b5f2:	6013      	str	r3, [r2, #0]
2405b5f4:	4b6d      	ldr	r3, [pc, #436]	; (2405b7ac <HAL_RCC_OscConfig+0x278>)
2405b5f6:	681b      	ldr	r3, [r3, #0]
2405b5f8:	4a6c      	ldr	r2, [pc, #432]	; (2405b7ac <HAL_RCC_OscConfig+0x278>)
2405b5fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
2405b5fe:	6013      	str	r3, [r2, #0]
2405b600:	4b6a      	ldr	r3, [pc, #424]	; (2405b7ac <HAL_RCC_OscConfig+0x278>)
2405b602:	681b      	ldr	r3, [r3, #0]
2405b604:	4a69      	ldr	r2, [pc, #420]	; (2405b7ac <HAL_RCC_OscConfig+0x278>)
2405b606:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2405b60a:	6013      	str	r3, [r2, #0]
2405b60c:	e029      	b.n	2405b662 <HAL_RCC_OscConfig+0x12e>
2405b60e:	687b      	ldr	r3, [r7, #4]
2405b610:	685b      	ldr	r3, [r3, #4]
2405b612:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
2405b616:	d112      	bne.n	2405b63e <HAL_RCC_OscConfig+0x10a>
2405b618:	4b64      	ldr	r3, [pc, #400]	; (2405b7ac <HAL_RCC_OscConfig+0x278>)
2405b61a:	681b      	ldr	r3, [r3, #0]
2405b61c:	4a63      	ldr	r2, [pc, #396]	; (2405b7ac <HAL_RCC_OscConfig+0x278>)
2405b61e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
2405b622:	6013      	str	r3, [r2, #0]
2405b624:	4b61      	ldr	r3, [pc, #388]	; (2405b7ac <HAL_RCC_OscConfig+0x278>)
2405b626:	681b      	ldr	r3, [r3, #0]
2405b628:	4a60      	ldr	r2, [pc, #384]	; (2405b7ac <HAL_RCC_OscConfig+0x278>)
2405b62a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
2405b62e:	6013      	str	r3, [r2, #0]
2405b630:	4b5e      	ldr	r3, [pc, #376]	; (2405b7ac <HAL_RCC_OscConfig+0x278>)
2405b632:	681b      	ldr	r3, [r3, #0]
2405b634:	4a5d      	ldr	r2, [pc, #372]	; (2405b7ac <HAL_RCC_OscConfig+0x278>)
2405b636:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2405b63a:	6013      	str	r3, [r2, #0]
2405b63c:	e011      	b.n	2405b662 <HAL_RCC_OscConfig+0x12e>
2405b63e:	4b5b      	ldr	r3, [pc, #364]	; (2405b7ac <HAL_RCC_OscConfig+0x278>)
2405b640:	681b      	ldr	r3, [r3, #0]
2405b642:	4a5a      	ldr	r2, [pc, #360]	; (2405b7ac <HAL_RCC_OscConfig+0x278>)
2405b644:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2405b648:	6013      	str	r3, [r2, #0]
2405b64a:	4b58      	ldr	r3, [pc, #352]	; (2405b7ac <HAL_RCC_OscConfig+0x278>)
2405b64c:	681b      	ldr	r3, [r3, #0]
2405b64e:	4a57      	ldr	r2, [pc, #348]	; (2405b7ac <HAL_RCC_OscConfig+0x278>)
2405b650:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
2405b654:	6013      	str	r3, [r2, #0]
2405b656:	4b55      	ldr	r3, [pc, #340]	; (2405b7ac <HAL_RCC_OscConfig+0x278>)
2405b658:	681b      	ldr	r3, [r3, #0]
2405b65a:	4a54      	ldr	r2, [pc, #336]	; (2405b7ac <HAL_RCC_OscConfig+0x278>)
2405b65c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
2405b660:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
2405b662:	687b      	ldr	r3, [r7, #4]
2405b664:	685b      	ldr	r3, [r3, #4]
2405b666:	2b00      	cmp	r3, #0
2405b668:	d013      	beq.n	2405b692 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2405b66a:	f7f8 fbaf 	bl	24053dcc <HAL_GetTick>
2405b66e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
2405b670:	e008      	b.n	2405b684 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
2405b672:	f7f8 fbab 	bl	24053dcc <HAL_GetTick>
2405b676:	4602      	mov	r2, r0
2405b678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405b67a:	1ad3      	subs	r3, r2, r3
2405b67c:	2b64      	cmp	r3, #100	; 0x64
2405b67e:	d901      	bls.n	2405b684 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
2405b680:	2303      	movs	r3, #3
2405b682:	e380      	b.n	2405bd86 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
2405b684:	4b49      	ldr	r3, [pc, #292]	; (2405b7ac <HAL_RCC_OscConfig+0x278>)
2405b686:	681b      	ldr	r3, [r3, #0]
2405b688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405b68c:	2b00      	cmp	r3, #0
2405b68e:	d0f0      	beq.n	2405b672 <HAL_RCC_OscConfig+0x13e>
2405b690:	e014      	b.n	2405b6bc <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2405b692:	f7f8 fb9b 	bl	24053dcc <HAL_GetTick>
2405b696:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
2405b698:	e008      	b.n	2405b6ac <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
2405b69a:	f7f8 fb97 	bl	24053dcc <HAL_GetTick>
2405b69e:	4602      	mov	r2, r0
2405b6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405b6a2:	1ad3      	subs	r3, r2, r3
2405b6a4:	2b64      	cmp	r3, #100	; 0x64
2405b6a6:	d901      	bls.n	2405b6ac <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
2405b6a8:	2303      	movs	r3, #3
2405b6aa:	e36c      	b.n	2405bd86 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
2405b6ac:	4b3f      	ldr	r3, [pc, #252]	; (2405b7ac <HAL_RCC_OscConfig+0x278>)
2405b6ae:	681b      	ldr	r3, [r3, #0]
2405b6b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405b6b4:	2b00      	cmp	r3, #0
2405b6b6:	d1f0      	bne.n	2405b69a <HAL_RCC_OscConfig+0x166>
2405b6b8:	e000      	b.n	2405b6bc <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
2405b6ba:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
2405b6bc:	687b      	ldr	r3, [r7, #4]
2405b6be:	681b      	ldr	r3, [r3, #0]
2405b6c0:	f003 0302 	and.w	r3, r3, #2
2405b6c4:	2b00      	cmp	r3, #0
2405b6c6:	f000 808c 	beq.w	2405b7e2 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
2405b6ca:	4b38      	ldr	r3, [pc, #224]	; (2405b7ac <HAL_RCC_OscConfig+0x278>)
2405b6cc:	691b      	ldr	r3, [r3, #16]
2405b6ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
2405b6d2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
2405b6d4:	4b35      	ldr	r3, [pc, #212]	; (2405b7ac <HAL_RCC_OscConfig+0x278>)
2405b6d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405b6d8:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
2405b6da:	6a3b      	ldr	r3, [r7, #32]
2405b6dc:	2b00      	cmp	r3, #0
2405b6de:	d007      	beq.n	2405b6f0 <HAL_RCC_OscConfig+0x1bc>
2405b6e0:	6a3b      	ldr	r3, [r7, #32]
2405b6e2:	2b18      	cmp	r3, #24
2405b6e4:	d137      	bne.n	2405b756 <HAL_RCC_OscConfig+0x222>
2405b6e6:	69fb      	ldr	r3, [r7, #28]
2405b6e8:	f003 0303 	and.w	r3, r3, #3
2405b6ec:	2b00      	cmp	r3, #0
2405b6ee:	d132      	bne.n	2405b756 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
2405b6f0:	4b2e      	ldr	r3, [pc, #184]	; (2405b7ac <HAL_RCC_OscConfig+0x278>)
2405b6f2:	681b      	ldr	r3, [r3, #0]
2405b6f4:	f003 0304 	and.w	r3, r3, #4
2405b6f8:	2b00      	cmp	r3, #0
2405b6fa:	d005      	beq.n	2405b708 <HAL_RCC_OscConfig+0x1d4>
2405b6fc:	687b      	ldr	r3, [r7, #4]
2405b6fe:	68db      	ldr	r3, [r3, #12]
2405b700:	2b00      	cmp	r3, #0
2405b702:	d101      	bne.n	2405b708 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
2405b704:	2301      	movs	r3, #1
2405b706:	e33e      	b.n	2405bd86 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
2405b708:	4b28      	ldr	r3, [pc, #160]	; (2405b7ac <HAL_RCC_OscConfig+0x278>)
2405b70a:	681b      	ldr	r3, [r3, #0]
2405b70c:	f023 0219 	bic.w	r2, r3, #25
2405b710:	687b      	ldr	r3, [r7, #4]
2405b712:	68db      	ldr	r3, [r3, #12]
2405b714:	4925      	ldr	r1, [pc, #148]	; (2405b7ac <HAL_RCC_OscConfig+0x278>)
2405b716:	4313      	orrs	r3, r2
2405b718:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2405b71a:	f7f8 fb57 	bl	24053dcc <HAL_GetTick>
2405b71e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
2405b720:	e008      	b.n	2405b734 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
2405b722:	f7f8 fb53 	bl	24053dcc <HAL_GetTick>
2405b726:	4602      	mov	r2, r0
2405b728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405b72a:	1ad3      	subs	r3, r2, r3
2405b72c:	2b02      	cmp	r3, #2
2405b72e:	d901      	bls.n	2405b734 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
2405b730:	2303      	movs	r3, #3
2405b732:	e328      	b.n	2405bd86 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
2405b734:	4b1d      	ldr	r3, [pc, #116]	; (2405b7ac <HAL_RCC_OscConfig+0x278>)
2405b736:	681b      	ldr	r3, [r3, #0]
2405b738:	f003 0304 	and.w	r3, r3, #4
2405b73c:	2b00      	cmp	r3, #0
2405b73e:	d0f0      	beq.n	2405b722 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
2405b740:	4b1a      	ldr	r3, [pc, #104]	; (2405b7ac <HAL_RCC_OscConfig+0x278>)
2405b742:	685b      	ldr	r3, [r3, #4]
2405b744:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
2405b748:	687b      	ldr	r3, [r7, #4]
2405b74a:	691b      	ldr	r3, [r3, #16]
2405b74c:	061b      	lsls	r3, r3, #24
2405b74e:	4917      	ldr	r1, [pc, #92]	; (2405b7ac <HAL_RCC_OscConfig+0x278>)
2405b750:	4313      	orrs	r3, r2
2405b752:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
2405b754:	e045      	b.n	2405b7e2 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
2405b756:	687b      	ldr	r3, [r7, #4]
2405b758:	68db      	ldr	r3, [r3, #12]
2405b75a:	2b00      	cmp	r3, #0
2405b75c:	d028      	beq.n	2405b7b0 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
2405b75e:	4b13      	ldr	r3, [pc, #76]	; (2405b7ac <HAL_RCC_OscConfig+0x278>)
2405b760:	681b      	ldr	r3, [r3, #0]
2405b762:	f023 0219 	bic.w	r2, r3, #25
2405b766:	687b      	ldr	r3, [r7, #4]
2405b768:	68db      	ldr	r3, [r3, #12]
2405b76a:	4910      	ldr	r1, [pc, #64]	; (2405b7ac <HAL_RCC_OscConfig+0x278>)
2405b76c:	4313      	orrs	r3, r2
2405b76e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2405b770:	f7f8 fb2c 	bl	24053dcc <HAL_GetTick>
2405b774:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
2405b776:	e008      	b.n	2405b78a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
2405b778:	f7f8 fb28 	bl	24053dcc <HAL_GetTick>
2405b77c:	4602      	mov	r2, r0
2405b77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405b780:	1ad3      	subs	r3, r2, r3
2405b782:	2b02      	cmp	r3, #2
2405b784:	d901      	bls.n	2405b78a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
2405b786:	2303      	movs	r3, #3
2405b788:	e2fd      	b.n	2405bd86 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
2405b78a:	4b08      	ldr	r3, [pc, #32]	; (2405b7ac <HAL_RCC_OscConfig+0x278>)
2405b78c:	681b      	ldr	r3, [r3, #0]
2405b78e:	f003 0304 	and.w	r3, r3, #4
2405b792:	2b00      	cmp	r3, #0
2405b794:	d0f0      	beq.n	2405b778 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
2405b796:	4b05      	ldr	r3, [pc, #20]	; (2405b7ac <HAL_RCC_OscConfig+0x278>)
2405b798:	685b      	ldr	r3, [r3, #4]
2405b79a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
2405b79e:	687b      	ldr	r3, [r7, #4]
2405b7a0:	691b      	ldr	r3, [r3, #16]
2405b7a2:	061b      	lsls	r3, r3, #24
2405b7a4:	4901      	ldr	r1, [pc, #4]	; (2405b7ac <HAL_RCC_OscConfig+0x278>)
2405b7a6:	4313      	orrs	r3, r2
2405b7a8:	604b      	str	r3, [r1, #4]
2405b7aa:	e01a      	b.n	2405b7e2 <HAL_RCC_OscConfig+0x2ae>
2405b7ac:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
2405b7b0:	4b97      	ldr	r3, [pc, #604]	; (2405ba10 <HAL_RCC_OscConfig+0x4dc>)
2405b7b2:	681b      	ldr	r3, [r3, #0]
2405b7b4:	4a96      	ldr	r2, [pc, #600]	; (2405ba10 <HAL_RCC_OscConfig+0x4dc>)
2405b7b6:	f023 0301 	bic.w	r3, r3, #1
2405b7ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2405b7bc:	f7f8 fb06 	bl	24053dcc <HAL_GetTick>
2405b7c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
2405b7c2:	e008      	b.n	2405b7d6 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
2405b7c4:	f7f8 fb02 	bl	24053dcc <HAL_GetTick>
2405b7c8:	4602      	mov	r2, r0
2405b7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405b7cc:	1ad3      	subs	r3, r2, r3
2405b7ce:	2b02      	cmp	r3, #2
2405b7d0:	d901      	bls.n	2405b7d6 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
2405b7d2:	2303      	movs	r3, #3
2405b7d4:	e2d7      	b.n	2405bd86 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
2405b7d6:	4b8e      	ldr	r3, [pc, #568]	; (2405ba10 <HAL_RCC_OscConfig+0x4dc>)
2405b7d8:	681b      	ldr	r3, [r3, #0]
2405b7da:	f003 0304 	and.w	r3, r3, #4
2405b7de:	2b00      	cmp	r3, #0
2405b7e0:	d1f0      	bne.n	2405b7c4 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
2405b7e2:	687b      	ldr	r3, [r7, #4]
2405b7e4:	681b      	ldr	r3, [r3, #0]
2405b7e6:	f003 0310 	and.w	r3, r3, #16
2405b7ea:	2b00      	cmp	r3, #0
2405b7ec:	d06a      	beq.n	2405b8c4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
2405b7ee:	4b88      	ldr	r3, [pc, #544]	; (2405ba10 <HAL_RCC_OscConfig+0x4dc>)
2405b7f0:	691b      	ldr	r3, [r3, #16]
2405b7f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
2405b7f6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
2405b7f8:	4b85      	ldr	r3, [pc, #532]	; (2405ba10 <HAL_RCC_OscConfig+0x4dc>)
2405b7fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405b7fc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
2405b7fe:	69bb      	ldr	r3, [r7, #24]
2405b800:	2b08      	cmp	r3, #8
2405b802:	d007      	beq.n	2405b814 <HAL_RCC_OscConfig+0x2e0>
2405b804:	69bb      	ldr	r3, [r7, #24]
2405b806:	2b18      	cmp	r3, #24
2405b808:	d11b      	bne.n	2405b842 <HAL_RCC_OscConfig+0x30e>
2405b80a:	697b      	ldr	r3, [r7, #20]
2405b80c:	f003 0303 	and.w	r3, r3, #3
2405b810:	2b01      	cmp	r3, #1
2405b812:	d116      	bne.n	2405b842 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
2405b814:	4b7e      	ldr	r3, [pc, #504]	; (2405ba10 <HAL_RCC_OscConfig+0x4dc>)
2405b816:	681b      	ldr	r3, [r3, #0]
2405b818:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405b81c:	2b00      	cmp	r3, #0
2405b81e:	d005      	beq.n	2405b82c <HAL_RCC_OscConfig+0x2f8>
2405b820:	687b      	ldr	r3, [r7, #4]
2405b822:	69db      	ldr	r3, [r3, #28]
2405b824:	2b80      	cmp	r3, #128	; 0x80
2405b826:	d001      	beq.n	2405b82c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
2405b828:	2301      	movs	r3, #1
2405b82a:	e2ac      	b.n	2405bd86 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
2405b82c:	4b78      	ldr	r3, [pc, #480]	; (2405ba10 <HAL_RCC_OscConfig+0x4dc>)
2405b82e:	68db      	ldr	r3, [r3, #12]
2405b830:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
2405b834:	687b      	ldr	r3, [r7, #4]
2405b836:	6a1b      	ldr	r3, [r3, #32]
2405b838:	061b      	lsls	r3, r3, #24
2405b83a:	4975      	ldr	r1, [pc, #468]	; (2405ba10 <HAL_RCC_OscConfig+0x4dc>)
2405b83c:	4313      	orrs	r3, r2
2405b83e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
2405b840:	e040      	b.n	2405b8c4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
2405b842:	687b      	ldr	r3, [r7, #4]
2405b844:	69db      	ldr	r3, [r3, #28]
2405b846:	2b00      	cmp	r3, #0
2405b848:	d023      	beq.n	2405b892 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
2405b84a:	4b71      	ldr	r3, [pc, #452]	; (2405ba10 <HAL_RCC_OscConfig+0x4dc>)
2405b84c:	681b      	ldr	r3, [r3, #0]
2405b84e:	4a70      	ldr	r2, [pc, #448]	; (2405ba10 <HAL_RCC_OscConfig+0x4dc>)
2405b850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2405b854:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2405b856:	f7f8 fab9 	bl	24053dcc <HAL_GetTick>
2405b85a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
2405b85c:	e008      	b.n	2405b870 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
2405b85e:	f7f8 fab5 	bl	24053dcc <HAL_GetTick>
2405b862:	4602      	mov	r2, r0
2405b864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405b866:	1ad3      	subs	r3, r2, r3
2405b868:	2b02      	cmp	r3, #2
2405b86a:	d901      	bls.n	2405b870 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
2405b86c:	2303      	movs	r3, #3
2405b86e:	e28a      	b.n	2405bd86 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
2405b870:	4b67      	ldr	r3, [pc, #412]	; (2405ba10 <HAL_RCC_OscConfig+0x4dc>)
2405b872:	681b      	ldr	r3, [r3, #0]
2405b874:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405b878:	2b00      	cmp	r3, #0
2405b87a:	d0f0      	beq.n	2405b85e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
2405b87c:	4b64      	ldr	r3, [pc, #400]	; (2405ba10 <HAL_RCC_OscConfig+0x4dc>)
2405b87e:	68db      	ldr	r3, [r3, #12]
2405b880:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
2405b884:	687b      	ldr	r3, [r7, #4]
2405b886:	6a1b      	ldr	r3, [r3, #32]
2405b888:	061b      	lsls	r3, r3, #24
2405b88a:	4961      	ldr	r1, [pc, #388]	; (2405ba10 <HAL_RCC_OscConfig+0x4dc>)
2405b88c:	4313      	orrs	r3, r2
2405b88e:	60cb      	str	r3, [r1, #12]
2405b890:	e018      	b.n	2405b8c4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
2405b892:	4b5f      	ldr	r3, [pc, #380]	; (2405ba10 <HAL_RCC_OscConfig+0x4dc>)
2405b894:	681b      	ldr	r3, [r3, #0]
2405b896:	4a5e      	ldr	r2, [pc, #376]	; (2405ba10 <HAL_RCC_OscConfig+0x4dc>)
2405b898:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2405b89c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2405b89e:	f7f8 fa95 	bl	24053dcc <HAL_GetTick>
2405b8a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
2405b8a4:	e008      	b.n	2405b8b8 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
2405b8a6:	f7f8 fa91 	bl	24053dcc <HAL_GetTick>
2405b8aa:	4602      	mov	r2, r0
2405b8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405b8ae:	1ad3      	subs	r3, r2, r3
2405b8b0:	2b02      	cmp	r3, #2
2405b8b2:	d901      	bls.n	2405b8b8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
2405b8b4:	2303      	movs	r3, #3
2405b8b6:	e266      	b.n	2405bd86 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
2405b8b8:	4b55      	ldr	r3, [pc, #340]	; (2405ba10 <HAL_RCC_OscConfig+0x4dc>)
2405b8ba:	681b      	ldr	r3, [r3, #0]
2405b8bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405b8c0:	2b00      	cmp	r3, #0
2405b8c2:	d1f0      	bne.n	2405b8a6 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
2405b8c4:	687b      	ldr	r3, [r7, #4]
2405b8c6:	681b      	ldr	r3, [r3, #0]
2405b8c8:	f003 0308 	and.w	r3, r3, #8
2405b8cc:	2b00      	cmp	r3, #0
2405b8ce:	d036      	beq.n	2405b93e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
2405b8d0:	687b      	ldr	r3, [r7, #4]
2405b8d2:	695b      	ldr	r3, [r3, #20]
2405b8d4:	2b00      	cmp	r3, #0
2405b8d6:	d019      	beq.n	2405b90c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
2405b8d8:	4b4d      	ldr	r3, [pc, #308]	; (2405ba10 <HAL_RCC_OscConfig+0x4dc>)
2405b8da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2405b8dc:	4a4c      	ldr	r2, [pc, #304]	; (2405ba10 <HAL_RCC_OscConfig+0x4dc>)
2405b8de:	f043 0301 	orr.w	r3, r3, #1
2405b8e2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2405b8e4:	f7f8 fa72 	bl	24053dcc <HAL_GetTick>
2405b8e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
2405b8ea:	e008      	b.n	2405b8fe <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
2405b8ec:	f7f8 fa6e 	bl	24053dcc <HAL_GetTick>
2405b8f0:	4602      	mov	r2, r0
2405b8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405b8f4:	1ad3      	subs	r3, r2, r3
2405b8f6:	2b02      	cmp	r3, #2
2405b8f8:	d901      	bls.n	2405b8fe <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
2405b8fa:	2303      	movs	r3, #3
2405b8fc:	e243      	b.n	2405bd86 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
2405b8fe:	4b44      	ldr	r3, [pc, #272]	; (2405ba10 <HAL_RCC_OscConfig+0x4dc>)
2405b900:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2405b902:	f003 0302 	and.w	r3, r3, #2
2405b906:	2b00      	cmp	r3, #0
2405b908:	d0f0      	beq.n	2405b8ec <HAL_RCC_OscConfig+0x3b8>
2405b90a:	e018      	b.n	2405b93e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
2405b90c:	4b40      	ldr	r3, [pc, #256]	; (2405ba10 <HAL_RCC_OscConfig+0x4dc>)
2405b90e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2405b910:	4a3f      	ldr	r2, [pc, #252]	; (2405ba10 <HAL_RCC_OscConfig+0x4dc>)
2405b912:	f023 0301 	bic.w	r3, r3, #1
2405b916:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2405b918:	f7f8 fa58 	bl	24053dcc <HAL_GetTick>
2405b91c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
2405b91e:	e008      	b.n	2405b932 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
2405b920:	f7f8 fa54 	bl	24053dcc <HAL_GetTick>
2405b924:	4602      	mov	r2, r0
2405b926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405b928:	1ad3      	subs	r3, r2, r3
2405b92a:	2b02      	cmp	r3, #2
2405b92c:	d901      	bls.n	2405b932 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
2405b92e:	2303      	movs	r3, #3
2405b930:	e229      	b.n	2405bd86 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
2405b932:	4b37      	ldr	r3, [pc, #220]	; (2405ba10 <HAL_RCC_OscConfig+0x4dc>)
2405b934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2405b936:	f003 0302 	and.w	r3, r3, #2
2405b93a:	2b00      	cmp	r3, #0
2405b93c:	d1f0      	bne.n	2405b920 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
2405b93e:	687b      	ldr	r3, [r7, #4]
2405b940:	681b      	ldr	r3, [r3, #0]
2405b942:	f003 0320 	and.w	r3, r3, #32
2405b946:	2b00      	cmp	r3, #0
2405b948:	d036      	beq.n	2405b9b8 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
2405b94a:	687b      	ldr	r3, [r7, #4]
2405b94c:	699b      	ldr	r3, [r3, #24]
2405b94e:	2b00      	cmp	r3, #0
2405b950:	d019      	beq.n	2405b986 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
2405b952:	4b2f      	ldr	r3, [pc, #188]	; (2405ba10 <HAL_RCC_OscConfig+0x4dc>)
2405b954:	681b      	ldr	r3, [r3, #0]
2405b956:	4a2e      	ldr	r2, [pc, #184]	; (2405ba10 <HAL_RCC_OscConfig+0x4dc>)
2405b958:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
2405b95c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
2405b95e:	f7f8 fa35 	bl	24053dcc <HAL_GetTick>
2405b962:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
2405b964:	e008      	b.n	2405b978 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
2405b966:	f7f8 fa31 	bl	24053dcc <HAL_GetTick>
2405b96a:	4602      	mov	r2, r0
2405b96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405b96e:	1ad3      	subs	r3, r2, r3
2405b970:	2b02      	cmp	r3, #2
2405b972:	d901      	bls.n	2405b978 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
2405b974:	2303      	movs	r3, #3
2405b976:	e206      	b.n	2405bd86 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
2405b978:	4b25      	ldr	r3, [pc, #148]	; (2405ba10 <HAL_RCC_OscConfig+0x4dc>)
2405b97a:	681b      	ldr	r3, [r3, #0]
2405b97c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
2405b980:	2b00      	cmp	r3, #0
2405b982:	d0f0      	beq.n	2405b966 <HAL_RCC_OscConfig+0x432>
2405b984:	e018      	b.n	2405b9b8 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
2405b986:	4b22      	ldr	r3, [pc, #136]	; (2405ba10 <HAL_RCC_OscConfig+0x4dc>)
2405b988:	681b      	ldr	r3, [r3, #0]
2405b98a:	4a21      	ldr	r2, [pc, #132]	; (2405ba10 <HAL_RCC_OscConfig+0x4dc>)
2405b98c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
2405b990:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
2405b992:	f7f8 fa1b 	bl	24053dcc <HAL_GetTick>
2405b996:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
2405b998:	e008      	b.n	2405b9ac <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
2405b99a:	f7f8 fa17 	bl	24053dcc <HAL_GetTick>
2405b99e:	4602      	mov	r2, r0
2405b9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405b9a2:	1ad3      	subs	r3, r2, r3
2405b9a4:	2b02      	cmp	r3, #2
2405b9a6:	d901      	bls.n	2405b9ac <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
2405b9a8:	2303      	movs	r3, #3
2405b9aa:	e1ec      	b.n	2405bd86 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
2405b9ac:	4b18      	ldr	r3, [pc, #96]	; (2405ba10 <HAL_RCC_OscConfig+0x4dc>)
2405b9ae:	681b      	ldr	r3, [r3, #0]
2405b9b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
2405b9b4:	2b00      	cmp	r3, #0
2405b9b6:	d1f0      	bne.n	2405b99a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
2405b9b8:	687b      	ldr	r3, [r7, #4]
2405b9ba:	681b      	ldr	r3, [r3, #0]
2405b9bc:	f003 0304 	and.w	r3, r3, #4
2405b9c0:	2b00      	cmp	r3, #0
2405b9c2:	f000 80af 	beq.w	2405bb24 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
2405b9c6:	4b13      	ldr	r3, [pc, #76]	; (2405ba14 <HAL_RCC_OscConfig+0x4e0>)
2405b9c8:	681b      	ldr	r3, [r3, #0]
2405b9ca:	4a12      	ldr	r2, [pc, #72]	; (2405ba14 <HAL_RCC_OscConfig+0x4e0>)
2405b9cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2405b9d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
2405b9d2:	f7f8 f9fb 	bl	24053dcc <HAL_GetTick>
2405b9d6:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
2405b9d8:	e008      	b.n	2405b9ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
2405b9da:	f7f8 f9f7 	bl	24053dcc <HAL_GetTick>
2405b9de:	4602      	mov	r2, r0
2405b9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405b9e2:	1ad3      	subs	r3, r2, r3
2405b9e4:	2b64      	cmp	r3, #100	; 0x64
2405b9e6:	d901      	bls.n	2405b9ec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
2405b9e8:	2303      	movs	r3, #3
2405b9ea:	e1cc      	b.n	2405bd86 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
2405b9ec:	4b09      	ldr	r3, [pc, #36]	; (2405ba14 <HAL_RCC_OscConfig+0x4e0>)
2405b9ee:	681b      	ldr	r3, [r3, #0]
2405b9f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405b9f4:	2b00      	cmp	r3, #0
2405b9f6:	d0f0      	beq.n	2405b9da <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
2405b9f8:	687b      	ldr	r3, [r7, #4]
2405b9fa:	689b      	ldr	r3, [r3, #8]
2405b9fc:	2b01      	cmp	r3, #1
2405b9fe:	d10b      	bne.n	2405ba18 <HAL_RCC_OscConfig+0x4e4>
2405ba00:	4b03      	ldr	r3, [pc, #12]	; (2405ba10 <HAL_RCC_OscConfig+0x4dc>)
2405ba02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405ba04:	4a02      	ldr	r2, [pc, #8]	; (2405ba10 <HAL_RCC_OscConfig+0x4dc>)
2405ba06:	f043 0301 	orr.w	r3, r3, #1
2405ba0a:	6713      	str	r3, [r2, #112]	; 0x70
2405ba0c:	e05b      	b.n	2405bac6 <HAL_RCC_OscConfig+0x592>
2405ba0e:	bf00      	nop
2405ba10:	58024400 	.word	0x58024400
2405ba14:	58024800 	.word	0x58024800
2405ba18:	687b      	ldr	r3, [r7, #4]
2405ba1a:	689b      	ldr	r3, [r3, #8]
2405ba1c:	2b00      	cmp	r3, #0
2405ba1e:	d112      	bne.n	2405ba46 <HAL_RCC_OscConfig+0x512>
2405ba20:	4b9d      	ldr	r3, [pc, #628]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405ba22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405ba24:	4a9c      	ldr	r2, [pc, #624]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405ba26:	f023 0301 	bic.w	r3, r3, #1
2405ba2a:	6713      	str	r3, [r2, #112]	; 0x70
2405ba2c:	4b9a      	ldr	r3, [pc, #616]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405ba2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405ba30:	4a99      	ldr	r2, [pc, #612]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405ba32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2405ba36:	6713      	str	r3, [r2, #112]	; 0x70
2405ba38:	4b97      	ldr	r3, [pc, #604]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405ba3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405ba3c:	4a96      	ldr	r2, [pc, #600]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405ba3e:	f023 0304 	bic.w	r3, r3, #4
2405ba42:	6713      	str	r3, [r2, #112]	; 0x70
2405ba44:	e03f      	b.n	2405bac6 <HAL_RCC_OscConfig+0x592>
2405ba46:	687b      	ldr	r3, [r7, #4]
2405ba48:	689b      	ldr	r3, [r3, #8]
2405ba4a:	2b05      	cmp	r3, #5
2405ba4c:	d112      	bne.n	2405ba74 <HAL_RCC_OscConfig+0x540>
2405ba4e:	4b92      	ldr	r3, [pc, #584]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405ba50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405ba52:	4a91      	ldr	r2, [pc, #580]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405ba54:	f043 0304 	orr.w	r3, r3, #4
2405ba58:	6713      	str	r3, [r2, #112]	; 0x70
2405ba5a:	4b8f      	ldr	r3, [pc, #572]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405ba5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405ba5e:	4a8e      	ldr	r2, [pc, #568]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405ba60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2405ba64:	6713      	str	r3, [r2, #112]	; 0x70
2405ba66:	4b8c      	ldr	r3, [pc, #560]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405ba68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405ba6a:	4a8b      	ldr	r2, [pc, #556]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405ba6c:	f043 0301 	orr.w	r3, r3, #1
2405ba70:	6713      	str	r3, [r2, #112]	; 0x70
2405ba72:	e028      	b.n	2405bac6 <HAL_RCC_OscConfig+0x592>
2405ba74:	687b      	ldr	r3, [r7, #4]
2405ba76:	689b      	ldr	r3, [r3, #8]
2405ba78:	2b85      	cmp	r3, #133	; 0x85
2405ba7a:	d112      	bne.n	2405baa2 <HAL_RCC_OscConfig+0x56e>
2405ba7c:	4b86      	ldr	r3, [pc, #536]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405ba7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405ba80:	4a85      	ldr	r2, [pc, #532]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405ba82:	f043 0304 	orr.w	r3, r3, #4
2405ba86:	6713      	str	r3, [r2, #112]	; 0x70
2405ba88:	4b83      	ldr	r3, [pc, #524]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405ba8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405ba8c:	4a82      	ldr	r2, [pc, #520]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405ba8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2405ba92:	6713      	str	r3, [r2, #112]	; 0x70
2405ba94:	4b80      	ldr	r3, [pc, #512]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405ba96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405ba98:	4a7f      	ldr	r2, [pc, #508]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405ba9a:	f043 0301 	orr.w	r3, r3, #1
2405ba9e:	6713      	str	r3, [r2, #112]	; 0x70
2405baa0:	e011      	b.n	2405bac6 <HAL_RCC_OscConfig+0x592>
2405baa2:	4b7d      	ldr	r3, [pc, #500]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405baa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405baa6:	4a7c      	ldr	r2, [pc, #496]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405baa8:	f023 0301 	bic.w	r3, r3, #1
2405baac:	6713      	str	r3, [r2, #112]	; 0x70
2405baae:	4b7a      	ldr	r3, [pc, #488]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405bab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405bab2:	4a79      	ldr	r2, [pc, #484]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405bab4:	f023 0304 	bic.w	r3, r3, #4
2405bab8:	6713      	str	r3, [r2, #112]	; 0x70
2405baba:	4b77      	ldr	r3, [pc, #476]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405babc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405babe:	4a76      	ldr	r2, [pc, #472]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405bac0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2405bac4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
2405bac6:	687b      	ldr	r3, [r7, #4]
2405bac8:	689b      	ldr	r3, [r3, #8]
2405baca:	2b00      	cmp	r3, #0
2405bacc:	d015      	beq.n	2405bafa <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2405bace:	f7f8 f97d 	bl	24053dcc <HAL_GetTick>
2405bad2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
2405bad4:	e00a      	b.n	2405baec <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
2405bad6:	f7f8 f979 	bl	24053dcc <HAL_GetTick>
2405bada:	4602      	mov	r2, r0
2405badc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405bade:	1ad3      	subs	r3, r2, r3
2405bae0:	f241 3288 	movw	r2, #5000	; 0x1388
2405bae4:	4293      	cmp	r3, r2
2405bae6:	d901      	bls.n	2405baec <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
2405bae8:	2303      	movs	r3, #3
2405baea:	e14c      	b.n	2405bd86 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
2405baec:	4b6a      	ldr	r3, [pc, #424]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405baee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405baf0:	f003 0302 	and.w	r3, r3, #2
2405baf4:	2b00      	cmp	r3, #0
2405baf6:	d0ee      	beq.n	2405bad6 <HAL_RCC_OscConfig+0x5a2>
2405baf8:	e014      	b.n	2405bb24 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2405bafa:	f7f8 f967 	bl	24053dcc <HAL_GetTick>
2405bafe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
2405bb00:	e00a      	b.n	2405bb18 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
2405bb02:	f7f8 f963 	bl	24053dcc <HAL_GetTick>
2405bb06:	4602      	mov	r2, r0
2405bb08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405bb0a:	1ad3      	subs	r3, r2, r3
2405bb0c:	f241 3288 	movw	r2, #5000	; 0x1388
2405bb10:	4293      	cmp	r3, r2
2405bb12:	d901      	bls.n	2405bb18 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
2405bb14:	2303      	movs	r3, #3
2405bb16:	e136      	b.n	2405bd86 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
2405bb18:	4b5f      	ldr	r3, [pc, #380]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405bb1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405bb1c:	f003 0302 	and.w	r3, r3, #2
2405bb20:	2b00      	cmp	r3, #0
2405bb22:	d1ee      	bne.n	2405bb02 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
2405bb24:	687b      	ldr	r3, [r7, #4]
2405bb26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2405bb28:	2b00      	cmp	r3, #0
2405bb2a:	f000 812b 	beq.w	2405bd84 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
2405bb2e:	4b5a      	ldr	r3, [pc, #360]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405bb30:	691b      	ldr	r3, [r3, #16]
2405bb32:	f003 0338 	and.w	r3, r3, #56	; 0x38
2405bb36:	2b18      	cmp	r3, #24
2405bb38:	f000 80bb 	beq.w	2405bcb2 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
2405bb3c:	687b      	ldr	r3, [r7, #4]
2405bb3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2405bb40:	2b02      	cmp	r3, #2
2405bb42:	f040 8095 	bne.w	2405bc70 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
2405bb46:	4b54      	ldr	r3, [pc, #336]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405bb48:	681b      	ldr	r3, [r3, #0]
2405bb4a:	4a53      	ldr	r2, [pc, #332]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405bb4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
2405bb50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2405bb52:	f7f8 f93b 	bl	24053dcc <HAL_GetTick>
2405bb56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
2405bb58:	e008      	b.n	2405bb6c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
2405bb5a:	f7f8 f937 	bl	24053dcc <HAL_GetTick>
2405bb5e:	4602      	mov	r2, r0
2405bb60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405bb62:	1ad3      	subs	r3, r2, r3
2405bb64:	2b02      	cmp	r3, #2
2405bb66:	d901      	bls.n	2405bb6c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
2405bb68:	2303      	movs	r3, #3
2405bb6a:	e10c      	b.n	2405bd86 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
2405bb6c:	4b4a      	ldr	r3, [pc, #296]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405bb6e:	681b      	ldr	r3, [r3, #0]
2405bb70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2405bb74:	2b00      	cmp	r3, #0
2405bb76:	d1f0      	bne.n	2405bb5a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
2405bb78:	4b47      	ldr	r3, [pc, #284]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405bb7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
2405bb7c:	4b47      	ldr	r3, [pc, #284]	; (2405bc9c <HAL_RCC_OscConfig+0x768>)
2405bb7e:	4013      	ands	r3, r2
2405bb80:	687a      	ldr	r2, [r7, #4]
2405bb82:	6a91      	ldr	r1, [r2, #40]	; 0x28
2405bb84:	687a      	ldr	r2, [r7, #4]
2405bb86:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
2405bb88:	0112      	lsls	r2, r2, #4
2405bb8a:	430a      	orrs	r2, r1
2405bb8c:	4942      	ldr	r1, [pc, #264]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405bb8e:	4313      	orrs	r3, r2
2405bb90:	628b      	str	r3, [r1, #40]	; 0x28
2405bb92:	687b      	ldr	r3, [r7, #4]
2405bb94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405bb96:	3b01      	subs	r3, #1
2405bb98:	f3c3 0208 	ubfx	r2, r3, #0, #9
2405bb9c:	687b      	ldr	r3, [r7, #4]
2405bb9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2405bba0:	3b01      	subs	r3, #1
2405bba2:	025b      	lsls	r3, r3, #9
2405bba4:	b29b      	uxth	r3, r3
2405bba6:	431a      	orrs	r2, r3
2405bba8:	687b      	ldr	r3, [r7, #4]
2405bbaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405bbac:	3b01      	subs	r3, #1
2405bbae:	041b      	lsls	r3, r3, #16
2405bbb0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
2405bbb4:	431a      	orrs	r2, r3
2405bbb6:	687b      	ldr	r3, [r7, #4]
2405bbb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2405bbba:	3b01      	subs	r3, #1
2405bbbc:	061b      	lsls	r3, r3, #24
2405bbbe:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
2405bbc2:	4935      	ldr	r1, [pc, #212]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405bbc4:	4313      	orrs	r3, r2
2405bbc6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
2405bbc8:	4b33      	ldr	r3, [pc, #204]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405bbca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405bbcc:	4a32      	ldr	r2, [pc, #200]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405bbce:	f023 0301 	bic.w	r3, r3, #1
2405bbd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
2405bbd4:	4b30      	ldr	r3, [pc, #192]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405bbd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
2405bbd8:	4b31      	ldr	r3, [pc, #196]	; (2405bca0 <HAL_RCC_OscConfig+0x76c>)
2405bbda:	4013      	ands	r3, r2
2405bbdc:	687a      	ldr	r2, [r7, #4]
2405bbde:	6c92      	ldr	r2, [r2, #72]	; 0x48
2405bbe0:	00d2      	lsls	r2, r2, #3
2405bbe2:	492d      	ldr	r1, [pc, #180]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405bbe4:	4313      	orrs	r3, r2
2405bbe6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
2405bbe8:	4b2b      	ldr	r3, [pc, #172]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405bbea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405bbec:	f023 020c 	bic.w	r2, r3, #12
2405bbf0:	687b      	ldr	r3, [r7, #4]
2405bbf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405bbf4:	4928      	ldr	r1, [pc, #160]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405bbf6:	4313      	orrs	r3, r2
2405bbf8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
2405bbfa:	4b27      	ldr	r3, [pc, #156]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405bbfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405bbfe:	f023 0202 	bic.w	r2, r3, #2
2405bc02:	687b      	ldr	r3, [r7, #4]
2405bc04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2405bc06:	4924      	ldr	r1, [pc, #144]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405bc08:	4313      	orrs	r3, r2
2405bc0a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
2405bc0c:	4b22      	ldr	r3, [pc, #136]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405bc0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405bc10:	4a21      	ldr	r2, [pc, #132]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405bc12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2405bc16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405bc18:	4b1f      	ldr	r3, [pc, #124]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405bc1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405bc1c:	4a1e      	ldr	r2, [pc, #120]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405bc1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2405bc22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
2405bc24:	4b1c      	ldr	r3, [pc, #112]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405bc26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405bc28:	4a1b      	ldr	r2, [pc, #108]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405bc2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
2405bc2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
2405bc30:	4b19      	ldr	r3, [pc, #100]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405bc32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405bc34:	4a18      	ldr	r2, [pc, #96]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405bc36:	f043 0301 	orr.w	r3, r3, #1
2405bc3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
2405bc3c:	4b16      	ldr	r3, [pc, #88]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405bc3e:	681b      	ldr	r3, [r3, #0]
2405bc40:	4a15      	ldr	r2, [pc, #84]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405bc42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
2405bc46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2405bc48:	f7f8 f8c0 	bl	24053dcc <HAL_GetTick>
2405bc4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
2405bc4e:	e008      	b.n	2405bc62 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
2405bc50:	f7f8 f8bc 	bl	24053dcc <HAL_GetTick>
2405bc54:	4602      	mov	r2, r0
2405bc56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405bc58:	1ad3      	subs	r3, r2, r3
2405bc5a:	2b02      	cmp	r3, #2
2405bc5c:	d901      	bls.n	2405bc62 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
2405bc5e:	2303      	movs	r3, #3
2405bc60:	e091      	b.n	2405bd86 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
2405bc62:	4b0d      	ldr	r3, [pc, #52]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405bc64:	681b      	ldr	r3, [r3, #0]
2405bc66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2405bc6a:	2b00      	cmp	r3, #0
2405bc6c:	d0f0      	beq.n	2405bc50 <HAL_RCC_OscConfig+0x71c>
2405bc6e:	e089      	b.n	2405bd84 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
2405bc70:	4b09      	ldr	r3, [pc, #36]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405bc72:	681b      	ldr	r3, [r3, #0]
2405bc74:	4a08      	ldr	r2, [pc, #32]	; (2405bc98 <HAL_RCC_OscConfig+0x764>)
2405bc76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
2405bc7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2405bc7c:	f7f8 f8a6 	bl	24053dcc <HAL_GetTick>
2405bc80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
2405bc82:	e00f      	b.n	2405bca4 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
2405bc84:	f7f8 f8a2 	bl	24053dcc <HAL_GetTick>
2405bc88:	4602      	mov	r2, r0
2405bc8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405bc8c:	1ad3      	subs	r3, r2, r3
2405bc8e:	2b02      	cmp	r3, #2
2405bc90:	d908      	bls.n	2405bca4 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
2405bc92:	2303      	movs	r3, #3
2405bc94:	e077      	b.n	2405bd86 <HAL_RCC_OscConfig+0x852>
2405bc96:	bf00      	nop
2405bc98:	58024400 	.word	0x58024400
2405bc9c:	fffffc0c 	.word	0xfffffc0c
2405bca0:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
2405bca4:	4b3a      	ldr	r3, [pc, #232]	; (2405bd90 <HAL_RCC_OscConfig+0x85c>)
2405bca6:	681b      	ldr	r3, [r3, #0]
2405bca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2405bcac:	2b00      	cmp	r3, #0
2405bcae:	d1e9      	bne.n	2405bc84 <HAL_RCC_OscConfig+0x750>
2405bcb0:	e068      	b.n	2405bd84 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
2405bcb2:	4b37      	ldr	r3, [pc, #220]	; (2405bd90 <HAL_RCC_OscConfig+0x85c>)
2405bcb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405bcb6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
2405bcb8:	4b35      	ldr	r3, [pc, #212]	; (2405bd90 <HAL_RCC_OscConfig+0x85c>)
2405bcba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405bcbc:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
2405bcbe:	687b      	ldr	r3, [r7, #4]
2405bcc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2405bcc2:	2b01      	cmp	r3, #1
2405bcc4:	d031      	beq.n	2405bd2a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
2405bcc6:	693b      	ldr	r3, [r7, #16]
2405bcc8:	f003 0203 	and.w	r2, r3, #3
2405bccc:	687b      	ldr	r3, [r7, #4]
2405bcce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
2405bcd0:	429a      	cmp	r2, r3
2405bcd2:	d12a      	bne.n	2405bd2a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
2405bcd4:	693b      	ldr	r3, [r7, #16]
2405bcd6:	091b      	lsrs	r3, r3, #4
2405bcd8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
2405bcdc:	687b      	ldr	r3, [r7, #4]
2405bcde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
2405bce0:	429a      	cmp	r2, r3
2405bce2:	d122      	bne.n	2405bd2a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
2405bce4:	68fb      	ldr	r3, [r7, #12]
2405bce6:	f3c3 0208 	ubfx	r2, r3, #0, #9
2405bcea:	687b      	ldr	r3, [r7, #4]
2405bcec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405bcee:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
2405bcf0:	429a      	cmp	r2, r3
2405bcf2:	d11a      	bne.n	2405bd2a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
2405bcf4:	68fb      	ldr	r3, [r7, #12]
2405bcf6:	0a5b      	lsrs	r3, r3, #9
2405bcf8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
2405bcfc:	687b      	ldr	r3, [r7, #4]
2405bcfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2405bd00:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
2405bd02:	429a      	cmp	r2, r3
2405bd04:	d111      	bne.n	2405bd2a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
2405bd06:	68fb      	ldr	r3, [r7, #12]
2405bd08:	0c1b      	lsrs	r3, r3, #16
2405bd0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
2405bd0e:	687b      	ldr	r3, [r7, #4]
2405bd10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405bd12:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
2405bd14:	429a      	cmp	r2, r3
2405bd16:	d108      	bne.n	2405bd2a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
2405bd18:	68fb      	ldr	r3, [r7, #12]
2405bd1a:	0e1b      	lsrs	r3, r3, #24
2405bd1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
2405bd20:	687b      	ldr	r3, [r7, #4]
2405bd22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2405bd24:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
2405bd26:	429a      	cmp	r2, r3
2405bd28:	d001      	beq.n	2405bd2e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
2405bd2a:	2301      	movs	r3, #1
2405bd2c:	e02b      	b.n	2405bd86 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
2405bd2e:	4b18      	ldr	r3, [pc, #96]	; (2405bd90 <HAL_RCC_OscConfig+0x85c>)
2405bd30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2405bd32:	08db      	lsrs	r3, r3, #3
2405bd34:	f3c3 030c 	ubfx	r3, r3, #0, #13
2405bd38:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
2405bd3a:	687b      	ldr	r3, [r7, #4]
2405bd3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2405bd3e:	693a      	ldr	r2, [r7, #16]
2405bd40:	429a      	cmp	r2, r3
2405bd42:	d01f      	beq.n	2405bd84 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
2405bd44:	4b12      	ldr	r3, [pc, #72]	; (2405bd90 <HAL_RCC_OscConfig+0x85c>)
2405bd46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405bd48:	4a11      	ldr	r2, [pc, #68]	; (2405bd90 <HAL_RCC_OscConfig+0x85c>)
2405bd4a:	f023 0301 	bic.w	r3, r3, #1
2405bd4e:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
2405bd50:	f7f8 f83c 	bl	24053dcc <HAL_GetTick>
2405bd54:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
2405bd56:	bf00      	nop
2405bd58:	f7f8 f838 	bl	24053dcc <HAL_GetTick>
2405bd5c:	4602      	mov	r2, r0
2405bd5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405bd60:	4293      	cmp	r3, r2
2405bd62:	d0f9      	beq.n	2405bd58 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
2405bd64:	4b0a      	ldr	r3, [pc, #40]	; (2405bd90 <HAL_RCC_OscConfig+0x85c>)
2405bd66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
2405bd68:	4b0a      	ldr	r3, [pc, #40]	; (2405bd94 <HAL_RCC_OscConfig+0x860>)
2405bd6a:	4013      	ands	r3, r2
2405bd6c:	687a      	ldr	r2, [r7, #4]
2405bd6e:	6c92      	ldr	r2, [r2, #72]	; 0x48
2405bd70:	00d2      	lsls	r2, r2, #3
2405bd72:	4907      	ldr	r1, [pc, #28]	; (2405bd90 <HAL_RCC_OscConfig+0x85c>)
2405bd74:	4313      	orrs	r3, r2
2405bd76:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
2405bd78:	4b05      	ldr	r3, [pc, #20]	; (2405bd90 <HAL_RCC_OscConfig+0x85c>)
2405bd7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405bd7c:	4a04      	ldr	r2, [pc, #16]	; (2405bd90 <HAL_RCC_OscConfig+0x85c>)
2405bd7e:	f043 0301 	orr.w	r3, r3, #1
2405bd82:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
2405bd84:	2300      	movs	r3, #0
}
2405bd86:	4618      	mov	r0, r3
2405bd88:	3730      	adds	r7, #48	; 0x30
2405bd8a:	46bd      	mov	sp, r7
2405bd8c:	bd80      	pop	{r7, pc}
2405bd8e:	bf00      	nop
2405bd90:	58024400 	.word	0x58024400
2405bd94:	ffff0007 	.word	0xffff0007

2405bd98 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
2405bd98:	b580      	push	{r7, lr}
2405bd9a:	b086      	sub	sp, #24
2405bd9c:	af00      	add	r7, sp, #0
2405bd9e:	6078      	str	r0, [r7, #4]
2405bda0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
2405bda2:	687b      	ldr	r3, [r7, #4]
2405bda4:	2b00      	cmp	r3, #0
2405bda6:	d101      	bne.n	2405bdac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
2405bda8:	2301      	movs	r3, #1
2405bdaa:	e19c      	b.n	2405c0e6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
2405bdac:	4b8a      	ldr	r3, [pc, #552]	; (2405bfd8 <HAL_RCC_ClockConfig+0x240>)
2405bdae:	681b      	ldr	r3, [r3, #0]
2405bdb0:	f003 030f 	and.w	r3, r3, #15
2405bdb4:	683a      	ldr	r2, [r7, #0]
2405bdb6:	429a      	cmp	r2, r3
2405bdb8:	d910      	bls.n	2405bddc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
2405bdba:	4b87      	ldr	r3, [pc, #540]	; (2405bfd8 <HAL_RCC_ClockConfig+0x240>)
2405bdbc:	681b      	ldr	r3, [r3, #0]
2405bdbe:	f023 020f 	bic.w	r2, r3, #15
2405bdc2:	4985      	ldr	r1, [pc, #532]	; (2405bfd8 <HAL_RCC_ClockConfig+0x240>)
2405bdc4:	683b      	ldr	r3, [r7, #0]
2405bdc6:	4313      	orrs	r3, r2
2405bdc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
2405bdca:	4b83      	ldr	r3, [pc, #524]	; (2405bfd8 <HAL_RCC_ClockConfig+0x240>)
2405bdcc:	681b      	ldr	r3, [r3, #0]
2405bdce:	f003 030f 	and.w	r3, r3, #15
2405bdd2:	683a      	ldr	r2, [r7, #0]
2405bdd4:	429a      	cmp	r2, r3
2405bdd6:	d001      	beq.n	2405bddc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
2405bdd8:	2301      	movs	r3, #1
2405bdda:	e184      	b.n	2405c0e6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
2405bddc:	687b      	ldr	r3, [r7, #4]
2405bdde:	681b      	ldr	r3, [r3, #0]
2405bde0:	f003 0304 	and.w	r3, r3, #4
2405bde4:	2b00      	cmp	r3, #0
2405bde6:	d010      	beq.n	2405be0a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
2405bde8:	687b      	ldr	r3, [r7, #4]
2405bdea:	691a      	ldr	r2, [r3, #16]
2405bdec:	4b7b      	ldr	r3, [pc, #492]	; (2405bfdc <HAL_RCC_ClockConfig+0x244>)
2405bdee:	699b      	ldr	r3, [r3, #24]
2405bdf0:	f003 0370 	and.w	r3, r3, #112	; 0x70
2405bdf4:	429a      	cmp	r2, r3
2405bdf6:	d908      	bls.n	2405be0a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
2405bdf8:	4b78      	ldr	r3, [pc, #480]	; (2405bfdc <HAL_RCC_ClockConfig+0x244>)
2405bdfa:	699b      	ldr	r3, [r3, #24]
2405bdfc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
2405be00:	687b      	ldr	r3, [r7, #4]
2405be02:	691b      	ldr	r3, [r3, #16]
2405be04:	4975      	ldr	r1, [pc, #468]	; (2405bfdc <HAL_RCC_ClockConfig+0x244>)
2405be06:	4313      	orrs	r3, r2
2405be08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
2405be0a:	687b      	ldr	r3, [r7, #4]
2405be0c:	681b      	ldr	r3, [r3, #0]
2405be0e:	f003 0308 	and.w	r3, r3, #8
2405be12:	2b00      	cmp	r3, #0
2405be14:	d010      	beq.n	2405be38 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
2405be16:	687b      	ldr	r3, [r7, #4]
2405be18:	695a      	ldr	r2, [r3, #20]
2405be1a:	4b70      	ldr	r3, [pc, #448]	; (2405bfdc <HAL_RCC_ClockConfig+0x244>)
2405be1c:	69db      	ldr	r3, [r3, #28]
2405be1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
2405be22:	429a      	cmp	r2, r3
2405be24:	d908      	bls.n	2405be38 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
2405be26:	4b6d      	ldr	r3, [pc, #436]	; (2405bfdc <HAL_RCC_ClockConfig+0x244>)
2405be28:	69db      	ldr	r3, [r3, #28]
2405be2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
2405be2e:	687b      	ldr	r3, [r7, #4]
2405be30:	695b      	ldr	r3, [r3, #20]
2405be32:	496a      	ldr	r1, [pc, #424]	; (2405bfdc <HAL_RCC_ClockConfig+0x244>)
2405be34:	4313      	orrs	r3, r2
2405be36:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
2405be38:	687b      	ldr	r3, [r7, #4]
2405be3a:	681b      	ldr	r3, [r3, #0]
2405be3c:	f003 0310 	and.w	r3, r3, #16
2405be40:	2b00      	cmp	r3, #0
2405be42:	d010      	beq.n	2405be66 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
2405be44:	687b      	ldr	r3, [r7, #4]
2405be46:	699a      	ldr	r2, [r3, #24]
2405be48:	4b64      	ldr	r3, [pc, #400]	; (2405bfdc <HAL_RCC_ClockConfig+0x244>)
2405be4a:	69db      	ldr	r3, [r3, #28]
2405be4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
2405be50:	429a      	cmp	r2, r3
2405be52:	d908      	bls.n	2405be66 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
2405be54:	4b61      	ldr	r3, [pc, #388]	; (2405bfdc <HAL_RCC_ClockConfig+0x244>)
2405be56:	69db      	ldr	r3, [r3, #28]
2405be58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
2405be5c:	687b      	ldr	r3, [r7, #4]
2405be5e:	699b      	ldr	r3, [r3, #24]
2405be60:	495e      	ldr	r1, [pc, #376]	; (2405bfdc <HAL_RCC_ClockConfig+0x244>)
2405be62:	4313      	orrs	r3, r2
2405be64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
2405be66:	687b      	ldr	r3, [r7, #4]
2405be68:	681b      	ldr	r3, [r3, #0]
2405be6a:	f003 0320 	and.w	r3, r3, #32
2405be6e:	2b00      	cmp	r3, #0
2405be70:	d010      	beq.n	2405be94 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
2405be72:	687b      	ldr	r3, [r7, #4]
2405be74:	69da      	ldr	r2, [r3, #28]
2405be76:	4b59      	ldr	r3, [pc, #356]	; (2405bfdc <HAL_RCC_ClockConfig+0x244>)
2405be78:	6a1b      	ldr	r3, [r3, #32]
2405be7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
2405be7e:	429a      	cmp	r2, r3
2405be80:	d908      	bls.n	2405be94 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
2405be82:	4b56      	ldr	r3, [pc, #344]	; (2405bfdc <HAL_RCC_ClockConfig+0x244>)
2405be84:	6a1b      	ldr	r3, [r3, #32]
2405be86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
2405be8a:	687b      	ldr	r3, [r7, #4]
2405be8c:	69db      	ldr	r3, [r3, #28]
2405be8e:	4953      	ldr	r1, [pc, #332]	; (2405bfdc <HAL_RCC_ClockConfig+0x244>)
2405be90:	4313      	orrs	r3, r2
2405be92:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
2405be94:	687b      	ldr	r3, [r7, #4]
2405be96:	681b      	ldr	r3, [r3, #0]
2405be98:	f003 0302 	and.w	r3, r3, #2
2405be9c:	2b00      	cmp	r3, #0
2405be9e:	d010      	beq.n	2405bec2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
2405bea0:	687b      	ldr	r3, [r7, #4]
2405bea2:	68da      	ldr	r2, [r3, #12]
2405bea4:	4b4d      	ldr	r3, [pc, #308]	; (2405bfdc <HAL_RCC_ClockConfig+0x244>)
2405bea6:	699b      	ldr	r3, [r3, #24]
2405bea8:	f003 030f 	and.w	r3, r3, #15
2405beac:	429a      	cmp	r2, r3
2405beae:	d908      	bls.n	2405bec2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
2405beb0:	4b4a      	ldr	r3, [pc, #296]	; (2405bfdc <HAL_RCC_ClockConfig+0x244>)
2405beb2:	699b      	ldr	r3, [r3, #24]
2405beb4:	f023 020f 	bic.w	r2, r3, #15
2405beb8:	687b      	ldr	r3, [r7, #4]
2405beba:	68db      	ldr	r3, [r3, #12]
2405bebc:	4947      	ldr	r1, [pc, #284]	; (2405bfdc <HAL_RCC_ClockConfig+0x244>)
2405bebe:	4313      	orrs	r3, r2
2405bec0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
2405bec2:	687b      	ldr	r3, [r7, #4]
2405bec4:	681b      	ldr	r3, [r3, #0]
2405bec6:	f003 0301 	and.w	r3, r3, #1
2405beca:	2b00      	cmp	r3, #0
2405becc:	d055      	beq.n	2405bf7a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
2405bece:	4b43      	ldr	r3, [pc, #268]	; (2405bfdc <HAL_RCC_ClockConfig+0x244>)
2405bed0:	699b      	ldr	r3, [r3, #24]
2405bed2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
2405bed6:	687b      	ldr	r3, [r7, #4]
2405bed8:	689b      	ldr	r3, [r3, #8]
2405beda:	4940      	ldr	r1, [pc, #256]	; (2405bfdc <HAL_RCC_ClockConfig+0x244>)
2405bedc:	4313      	orrs	r3, r2
2405bede:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
2405bee0:	687b      	ldr	r3, [r7, #4]
2405bee2:	685b      	ldr	r3, [r3, #4]
2405bee4:	2b02      	cmp	r3, #2
2405bee6:	d107      	bne.n	2405bef8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
2405bee8:	4b3c      	ldr	r3, [pc, #240]	; (2405bfdc <HAL_RCC_ClockConfig+0x244>)
2405beea:	681b      	ldr	r3, [r3, #0]
2405beec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405bef0:	2b00      	cmp	r3, #0
2405bef2:	d121      	bne.n	2405bf38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
2405bef4:	2301      	movs	r3, #1
2405bef6:	e0f6      	b.n	2405c0e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
2405bef8:	687b      	ldr	r3, [r7, #4]
2405befa:	685b      	ldr	r3, [r3, #4]
2405befc:	2b03      	cmp	r3, #3
2405befe:	d107      	bne.n	2405bf10 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
2405bf00:	4b36      	ldr	r3, [pc, #216]	; (2405bfdc <HAL_RCC_ClockConfig+0x244>)
2405bf02:	681b      	ldr	r3, [r3, #0]
2405bf04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2405bf08:	2b00      	cmp	r3, #0
2405bf0a:	d115      	bne.n	2405bf38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
2405bf0c:	2301      	movs	r3, #1
2405bf0e:	e0ea      	b.n	2405c0e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
2405bf10:	687b      	ldr	r3, [r7, #4]
2405bf12:	685b      	ldr	r3, [r3, #4]
2405bf14:	2b01      	cmp	r3, #1
2405bf16:	d107      	bne.n	2405bf28 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
2405bf18:	4b30      	ldr	r3, [pc, #192]	; (2405bfdc <HAL_RCC_ClockConfig+0x244>)
2405bf1a:	681b      	ldr	r3, [r3, #0]
2405bf1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405bf20:	2b00      	cmp	r3, #0
2405bf22:	d109      	bne.n	2405bf38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
2405bf24:	2301      	movs	r3, #1
2405bf26:	e0de      	b.n	2405c0e6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
2405bf28:	4b2c      	ldr	r3, [pc, #176]	; (2405bfdc <HAL_RCC_ClockConfig+0x244>)
2405bf2a:	681b      	ldr	r3, [r3, #0]
2405bf2c:	f003 0304 	and.w	r3, r3, #4
2405bf30:	2b00      	cmp	r3, #0
2405bf32:	d101      	bne.n	2405bf38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
2405bf34:	2301      	movs	r3, #1
2405bf36:	e0d6      	b.n	2405c0e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
2405bf38:	4b28      	ldr	r3, [pc, #160]	; (2405bfdc <HAL_RCC_ClockConfig+0x244>)
2405bf3a:	691b      	ldr	r3, [r3, #16]
2405bf3c:	f023 0207 	bic.w	r2, r3, #7
2405bf40:	687b      	ldr	r3, [r7, #4]
2405bf42:	685b      	ldr	r3, [r3, #4]
2405bf44:	4925      	ldr	r1, [pc, #148]	; (2405bfdc <HAL_RCC_ClockConfig+0x244>)
2405bf46:	4313      	orrs	r3, r2
2405bf48:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
2405bf4a:	f7f7 ff3f 	bl	24053dcc <HAL_GetTick>
2405bf4e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
2405bf50:	e00a      	b.n	2405bf68 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
2405bf52:	f7f7 ff3b 	bl	24053dcc <HAL_GetTick>
2405bf56:	4602      	mov	r2, r0
2405bf58:	697b      	ldr	r3, [r7, #20]
2405bf5a:	1ad3      	subs	r3, r2, r3
2405bf5c:	f241 3288 	movw	r2, #5000	; 0x1388
2405bf60:	4293      	cmp	r3, r2
2405bf62:	d901      	bls.n	2405bf68 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
2405bf64:	2303      	movs	r3, #3
2405bf66:	e0be      	b.n	2405c0e6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
2405bf68:	4b1c      	ldr	r3, [pc, #112]	; (2405bfdc <HAL_RCC_ClockConfig+0x244>)
2405bf6a:	691b      	ldr	r3, [r3, #16]
2405bf6c:	f003 0238 	and.w	r2, r3, #56	; 0x38
2405bf70:	687b      	ldr	r3, [r7, #4]
2405bf72:	685b      	ldr	r3, [r3, #4]
2405bf74:	00db      	lsls	r3, r3, #3
2405bf76:	429a      	cmp	r2, r3
2405bf78:	d1eb      	bne.n	2405bf52 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
2405bf7a:	687b      	ldr	r3, [r7, #4]
2405bf7c:	681b      	ldr	r3, [r3, #0]
2405bf7e:	f003 0302 	and.w	r3, r3, #2
2405bf82:	2b00      	cmp	r3, #0
2405bf84:	d010      	beq.n	2405bfa8 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
2405bf86:	687b      	ldr	r3, [r7, #4]
2405bf88:	68da      	ldr	r2, [r3, #12]
2405bf8a:	4b14      	ldr	r3, [pc, #80]	; (2405bfdc <HAL_RCC_ClockConfig+0x244>)
2405bf8c:	699b      	ldr	r3, [r3, #24]
2405bf8e:	f003 030f 	and.w	r3, r3, #15
2405bf92:	429a      	cmp	r2, r3
2405bf94:	d208      	bcs.n	2405bfa8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
2405bf96:	4b11      	ldr	r3, [pc, #68]	; (2405bfdc <HAL_RCC_ClockConfig+0x244>)
2405bf98:	699b      	ldr	r3, [r3, #24]
2405bf9a:	f023 020f 	bic.w	r2, r3, #15
2405bf9e:	687b      	ldr	r3, [r7, #4]
2405bfa0:	68db      	ldr	r3, [r3, #12]
2405bfa2:	490e      	ldr	r1, [pc, #56]	; (2405bfdc <HAL_RCC_ClockConfig+0x244>)
2405bfa4:	4313      	orrs	r3, r2
2405bfa6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
2405bfa8:	4b0b      	ldr	r3, [pc, #44]	; (2405bfd8 <HAL_RCC_ClockConfig+0x240>)
2405bfaa:	681b      	ldr	r3, [r3, #0]
2405bfac:	f003 030f 	and.w	r3, r3, #15
2405bfb0:	683a      	ldr	r2, [r7, #0]
2405bfb2:	429a      	cmp	r2, r3
2405bfb4:	d214      	bcs.n	2405bfe0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
2405bfb6:	4b08      	ldr	r3, [pc, #32]	; (2405bfd8 <HAL_RCC_ClockConfig+0x240>)
2405bfb8:	681b      	ldr	r3, [r3, #0]
2405bfba:	f023 020f 	bic.w	r2, r3, #15
2405bfbe:	4906      	ldr	r1, [pc, #24]	; (2405bfd8 <HAL_RCC_ClockConfig+0x240>)
2405bfc0:	683b      	ldr	r3, [r7, #0]
2405bfc2:	4313      	orrs	r3, r2
2405bfc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
2405bfc6:	4b04      	ldr	r3, [pc, #16]	; (2405bfd8 <HAL_RCC_ClockConfig+0x240>)
2405bfc8:	681b      	ldr	r3, [r3, #0]
2405bfca:	f003 030f 	and.w	r3, r3, #15
2405bfce:	683a      	ldr	r2, [r7, #0]
2405bfd0:	429a      	cmp	r2, r3
2405bfd2:	d005      	beq.n	2405bfe0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
2405bfd4:	2301      	movs	r3, #1
2405bfd6:	e086      	b.n	2405c0e6 <HAL_RCC_ClockConfig+0x34e>
2405bfd8:	52002000 	.word	0x52002000
2405bfdc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
2405bfe0:	687b      	ldr	r3, [r7, #4]
2405bfe2:	681b      	ldr	r3, [r3, #0]
2405bfe4:	f003 0304 	and.w	r3, r3, #4
2405bfe8:	2b00      	cmp	r3, #0
2405bfea:	d010      	beq.n	2405c00e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
2405bfec:	687b      	ldr	r3, [r7, #4]
2405bfee:	691a      	ldr	r2, [r3, #16]
2405bff0:	4b3f      	ldr	r3, [pc, #252]	; (2405c0f0 <HAL_RCC_ClockConfig+0x358>)
2405bff2:	699b      	ldr	r3, [r3, #24]
2405bff4:	f003 0370 	and.w	r3, r3, #112	; 0x70
2405bff8:	429a      	cmp	r2, r3
2405bffa:	d208      	bcs.n	2405c00e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
2405bffc:	4b3c      	ldr	r3, [pc, #240]	; (2405c0f0 <HAL_RCC_ClockConfig+0x358>)
2405bffe:	699b      	ldr	r3, [r3, #24]
2405c000:	f023 0270 	bic.w	r2, r3, #112	; 0x70
2405c004:	687b      	ldr	r3, [r7, #4]
2405c006:	691b      	ldr	r3, [r3, #16]
2405c008:	4939      	ldr	r1, [pc, #228]	; (2405c0f0 <HAL_RCC_ClockConfig+0x358>)
2405c00a:	4313      	orrs	r3, r2
2405c00c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
2405c00e:	687b      	ldr	r3, [r7, #4]
2405c010:	681b      	ldr	r3, [r3, #0]
2405c012:	f003 0308 	and.w	r3, r3, #8
2405c016:	2b00      	cmp	r3, #0
2405c018:	d010      	beq.n	2405c03c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
2405c01a:	687b      	ldr	r3, [r7, #4]
2405c01c:	695a      	ldr	r2, [r3, #20]
2405c01e:	4b34      	ldr	r3, [pc, #208]	; (2405c0f0 <HAL_RCC_ClockConfig+0x358>)
2405c020:	69db      	ldr	r3, [r3, #28]
2405c022:	f003 0370 	and.w	r3, r3, #112	; 0x70
2405c026:	429a      	cmp	r2, r3
2405c028:	d208      	bcs.n	2405c03c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
2405c02a:	4b31      	ldr	r3, [pc, #196]	; (2405c0f0 <HAL_RCC_ClockConfig+0x358>)
2405c02c:	69db      	ldr	r3, [r3, #28]
2405c02e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
2405c032:	687b      	ldr	r3, [r7, #4]
2405c034:	695b      	ldr	r3, [r3, #20]
2405c036:	492e      	ldr	r1, [pc, #184]	; (2405c0f0 <HAL_RCC_ClockConfig+0x358>)
2405c038:	4313      	orrs	r3, r2
2405c03a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
2405c03c:	687b      	ldr	r3, [r7, #4]
2405c03e:	681b      	ldr	r3, [r3, #0]
2405c040:	f003 0310 	and.w	r3, r3, #16
2405c044:	2b00      	cmp	r3, #0
2405c046:	d010      	beq.n	2405c06a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
2405c048:	687b      	ldr	r3, [r7, #4]
2405c04a:	699a      	ldr	r2, [r3, #24]
2405c04c:	4b28      	ldr	r3, [pc, #160]	; (2405c0f0 <HAL_RCC_ClockConfig+0x358>)
2405c04e:	69db      	ldr	r3, [r3, #28]
2405c050:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
2405c054:	429a      	cmp	r2, r3
2405c056:	d208      	bcs.n	2405c06a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
2405c058:	4b25      	ldr	r3, [pc, #148]	; (2405c0f0 <HAL_RCC_ClockConfig+0x358>)
2405c05a:	69db      	ldr	r3, [r3, #28]
2405c05c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
2405c060:	687b      	ldr	r3, [r7, #4]
2405c062:	699b      	ldr	r3, [r3, #24]
2405c064:	4922      	ldr	r1, [pc, #136]	; (2405c0f0 <HAL_RCC_ClockConfig+0x358>)
2405c066:	4313      	orrs	r3, r2
2405c068:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
2405c06a:	687b      	ldr	r3, [r7, #4]
2405c06c:	681b      	ldr	r3, [r3, #0]
2405c06e:	f003 0320 	and.w	r3, r3, #32
2405c072:	2b00      	cmp	r3, #0
2405c074:	d010      	beq.n	2405c098 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
2405c076:	687b      	ldr	r3, [r7, #4]
2405c078:	69da      	ldr	r2, [r3, #28]
2405c07a:	4b1d      	ldr	r3, [pc, #116]	; (2405c0f0 <HAL_RCC_ClockConfig+0x358>)
2405c07c:	6a1b      	ldr	r3, [r3, #32]
2405c07e:	f003 0370 	and.w	r3, r3, #112	; 0x70
2405c082:	429a      	cmp	r2, r3
2405c084:	d208      	bcs.n	2405c098 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
2405c086:	4b1a      	ldr	r3, [pc, #104]	; (2405c0f0 <HAL_RCC_ClockConfig+0x358>)
2405c088:	6a1b      	ldr	r3, [r3, #32]
2405c08a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
2405c08e:	687b      	ldr	r3, [r7, #4]
2405c090:	69db      	ldr	r3, [r3, #28]
2405c092:	4917      	ldr	r1, [pc, #92]	; (2405c0f0 <HAL_RCC_ClockConfig+0x358>)
2405c094:	4313      	orrs	r3, r2
2405c096:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
2405c098:	f000 f834 	bl	2405c104 <HAL_RCC_GetSysClockFreq>
2405c09c:	4602      	mov	r2, r0
2405c09e:	4b14      	ldr	r3, [pc, #80]	; (2405c0f0 <HAL_RCC_ClockConfig+0x358>)
2405c0a0:	699b      	ldr	r3, [r3, #24]
2405c0a2:	0a1b      	lsrs	r3, r3, #8
2405c0a4:	f003 030f 	and.w	r3, r3, #15
2405c0a8:	4912      	ldr	r1, [pc, #72]	; (2405c0f4 <HAL_RCC_ClockConfig+0x35c>)
2405c0aa:	5ccb      	ldrb	r3, [r1, r3]
2405c0ac:	f003 031f 	and.w	r3, r3, #31
2405c0b0:	fa22 f303 	lsr.w	r3, r2, r3
2405c0b4:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
2405c0b6:	4b0e      	ldr	r3, [pc, #56]	; (2405c0f0 <HAL_RCC_ClockConfig+0x358>)
2405c0b8:	699b      	ldr	r3, [r3, #24]
2405c0ba:	f003 030f 	and.w	r3, r3, #15
2405c0be:	4a0d      	ldr	r2, [pc, #52]	; (2405c0f4 <HAL_RCC_ClockConfig+0x35c>)
2405c0c0:	5cd3      	ldrb	r3, [r2, r3]
2405c0c2:	f003 031f 	and.w	r3, r3, #31
2405c0c6:	693a      	ldr	r2, [r7, #16]
2405c0c8:	fa22 f303 	lsr.w	r3, r2, r3
2405c0cc:	4a0a      	ldr	r2, [pc, #40]	; (2405c0f8 <HAL_RCC_ClockConfig+0x360>)
2405c0ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
2405c0d0:	4a0a      	ldr	r2, [pc, #40]	; (2405c0fc <HAL_RCC_ClockConfig+0x364>)
2405c0d2:	693b      	ldr	r3, [r7, #16]
2405c0d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
2405c0d6:	4b0a      	ldr	r3, [pc, #40]	; (2405c100 <HAL_RCC_ClockConfig+0x368>)
2405c0d8:	681b      	ldr	r3, [r3, #0]
2405c0da:	4618      	mov	r0, r3
2405c0dc:	f7f7 fe2c 	bl	24053d38 <HAL_InitTick>
2405c0e0:	4603      	mov	r3, r0
2405c0e2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
2405c0e4:	7bfb      	ldrb	r3, [r7, #15]
}
2405c0e6:	4618      	mov	r0, r3
2405c0e8:	3718      	adds	r7, #24
2405c0ea:	46bd      	mov	sp, r7
2405c0ec:	bd80      	pop	{r7, pc}
2405c0ee:	bf00      	nop
2405c0f0:	58024400 	.word	0x58024400
2405c0f4:	240641f8 	.word	0x240641f8
2405c0f8:	20000048 	.word	0x20000048
2405c0fc:	20000044 	.word	0x20000044
2405c100:	2000004c 	.word	0x2000004c

2405c104 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
2405c104:	b480      	push	{r7}
2405c106:	b089      	sub	sp, #36	; 0x24
2405c108:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
2405c10a:	4bb3      	ldr	r3, [pc, #716]	; (2405c3d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405c10c:	691b      	ldr	r3, [r3, #16]
2405c10e:	f003 0338 	and.w	r3, r3, #56	; 0x38
2405c112:	2b18      	cmp	r3, #24
2405c114:	f200 8155 	bhi.w	2405c3c2 <HAL_RCC_GetSysClockFreq+0x2be>
2405c118:	a201      	add	r2, pc, #4	; (adr r2, 2405c120 <HAL_RCC_GetSysClockFreq+0x1c>)
2405c11a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2405c11e:	bf00      	nop
2405c120:	2405c185 	.word	0x2405c185
2405c124:	2405c3c3 	.word	0x2405c3c3
2405c128:	2405c3c3 	.word	0x2405c3c3
2405c12c:	2405c3c3 	.word	0x2405c3c3
2405c130:	2405c3c3 	.word	0x2405c3c3
2405c134:	2405c3c3 	.word	0x2405c3c3
2405c138:	2405c3c3 	.word	0x2405c3c3
2405c13c:	2405c3c3 	.word	0x2405c3c3
2405c140:	2405c1ab 	.word	0x2405c1ab
2405c144:	2405c3c3 	.word	0x2405c3c3
2405c148:	2405c3c3 	.word	0x2405c3c3
2405c14c:	2405c3c3 	.word	0x2405c3c3
2405c150:	2405c3c3 	.word	0x2405c3c3
2405c154:	2405c3c3 	.word	0x2405c3c3
2405c158:	2405c3c3 	.word	0x2405c3c3
2405c15c:	2405c3c3 	.word	0x2405c3c3
2405c160:	2405c1b1 	.word	0x2405c1b1
2405c164:	2405c3c3 	.word	0x2405c3c3
2405c168:	2405c3c3 	.word	0x2405c3c3
2405c16c:	2405c3c3 	.word	0x2405c3c3
2405c170:	2405c3c3 	.word	0x2405c3c3
2405c174:	2405c3c3 	.word	0x2405c3c3
2405c178:	2405c3c3 	.word	0x2405c3c3
2405c17c:	2405c3c3 	.word	0x2405c3c3
2405c180:	2405c1b7 	.word	0x2405c1b7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2405c184:	4b94      	ldr	r3, [pc, #592]	; (2405c3d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405c186:	681b      	ldr	r3, [r3, #0]
2405c188:	f003 0320 	and.w	r3, r3, #32
2405c18c:	2b00      	cmp	r3, #0
2405c18e:	d009      	beq.n	2405c1a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2405c190:	4b91      	ldr	r3, [pc, #580]	; (2405c3d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405c192:	681b      	ldr	r3, [r3, #0]
2405c194:	08db      	lsrs	r3, r3, #3
2405c196:	f003 0303 	and.w	r3, r3, #3
2405c19a:	4a90      	ldr	r2, [pc, #576]	; (2405c3dc <HAL_RCC_GetSysClockFreq+0x2d8>)
2405c19c:	fa22 f303 	lsr.w	r3, r2, r3
2405c1a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
2405c1a2:	e111      	b.n	2405c3c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
2405c1a4:	4b8d      	ldr	r3, [pc, #564]	; (2405c3dc <HAL_RCC_GetSysClockFreq+0x2d8>)
2405c1a6:	61bb      	str	r3, [r7, #24]
      break;
2405c1a8:	e10e      	b.n	2405c3c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
2405c1aa:	4b8d      	ldr	r3, [pc, #564]	; (2405c3e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
2405c1ac:	61bb      	str	r3, [r7, #24]
      break;
2405c1ae:	e10b      	b.n	2405c3c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
2405c1b0:	4b8c      	ldr	r3, [pc, #560]	; (2405c3e4 <HAL_RCC_GetSysClockFreq+0x2e0>)
2405c1b2:	61bb      	str	r3, [r7, #24]
      break;
2405c1b4:	e108      	b.n	2405c3c8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2405c1b6:	4b88      	ldr	r3, [pc, #544]	; (2405c3d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405c1b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405c1ba:	f003 0303 	and.w	r3, r3, #3
2405c1be:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
2405c1c0:	4b85      	ldr	r3, [pc, #532]	; (2405c3d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405c1c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405c1c4:	091b      	lsrs	r3, r3, #4
2405c1c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2405c1ca:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
2405c1cc:	4b82      	ldr	r3, [pc, #520]	; (2405c3d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405c1ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405c1d0:	f003 0301 	and.w	r3, r3, #1
2405c1d4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
2405c1d6:	4b80      	ldr	r3, [pc, #512]	; (2405c3d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405c1d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2405c1da:	08db      	lsrs	r3, r3, #3
2405c1dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
2405c1e0:	68fa      	ldr	r2, [r7, #12]
2405c1e2:	fb02 f303 	mul.w	r3, r2, r3
2405c1e6:	ee07 3a90 	vmov	s15, r3
2405c1ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405c1ee:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
2405c1f2:	693b      	ldr	r3, [r7, #16]
2405c1f4:	2b00      	cmp	r3, #0
2405c1f6:	f000 80e1 	beq.w	2405c3bc <HAL_RCC_GetSysClockFreq+0x2b8>
2405c1fa:	697b      	ldr	r3, [r7, #20]
2405c1fc:	2b02      	cmp	r3, #2
2405c1fe:	f000 8083 	beq.w	2405c308 <HAL_RCC_GetSysClockFreq+0x204>
2405c202:	697b      	ldr	r3, [r7, #20]
2405c204:	2b02      	cmp	r3, #2
2405c206:	f200 80a1 	bhi.w	2405c34c <HAL_RCC_GetSysClockFreq+0x248>
2405c20a:	697b      	ldr	r3, [r7, #20]
2405c20c:	2b00      	cmp	r3, #0
2405c20e:	d003      	beq.n	2405c218 <HAL_RCC_GetSysClockFreq+0x114>
2405c210:	697b      	ldr	r3, [r7, #20]
2405c212:	2b01      	cmp	r3, #1
2405c214:	d056      	beq.n	2405c2c4 <HAL_RCC_GetSysClockFreq+0x1c0>
2405c216:	e099      	b.n	2405c34c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2405c218:	4b6f      	ldr	r3, [pc, #444]	; (2405c3d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405c21a:	681b      	ldr	r3, [r3, #0]
2405c21c:	f003 0320 	and.w	r3, r3, #32
2405c220:	2b00      	cmp	r3, #0
2405c222:	d02d      	beq.n	2405c280 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2405c224:	4b6c      	ldr	r3, [pc, #432]	; (2405c3d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405c226:	681b      	ldr	r3, [r3, #0]
2405c228:	08db      	lsrs	r3, r3, #3
2405c22a:	f003 0303 	and.w	r3, r3, #3
2405c22e:	4a6b      	ldr	r2, [pc, #428]	; (2405c3dc <HAL_RCC_GetSysClockFreq+0x2d8>)
2405c230:	fa22 f303 	lsr.w	r3, r2, r3
2405c234:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2405c236:	687b      	ldr	r3, [r7, #4]
2405c238:	ee07 3a90 	vmov	s15, r3
2405c23c:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405c240:	693b      	ldr	r3, [r7, #16]
2405c242:	ee07 3a90 	vmov	s15, r3
2405c246:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405c24a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405c24e:	4b62      	ldr	r3, [pc, #392]	; (2405c3d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405c250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405c252:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405c256:	ee07 3a90 	vmov	s15, r3
2405c25a:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405c25e:	ed97 6a02 	vldr	s12, [r7, #8]
2405c262:	eddf 5a61 	vldr	s11, [pc, #388]	; 2405c3e8 <HAL_RCC_GetSysClockFreq+0x2e4>
2405c266:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405c26a:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405c26e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405c272:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405c276:	ee67 7a27 	vmul.f32	s15, s14, s15
2405c27a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
2405c27e:	e087      	b.n	2405c390 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2405c280:	693b      	ldr	r3, [r7, #16]
2405c282:	ee07 3a90 	vmov	s15, r3
2405c286:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405c28a:	eddf 6a58 	vldr	s13, [pc, #352]	; 2405c3ec <HAL_RCC_GetSysClockFreq+0x2e8>
2405c28e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405c292:	4b51      	ldr	r3, [pc, #324]	; (2405c3d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405c294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405c296:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405c29a:	ee07 3a90 	vmov	s15, r3
2405c29e:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405c2a2:	ed97 6a02 	vldr	s12, [r7, #8]
2405c2a6:	eddf 5a50 	vldr	s11, [pc, #320]	; 2405c3e8 <HAL_RCC_GetSysClockFreq+0x2e4>
2405c2aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405c2ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405c2b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405c2b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405c2ba:	ee67 7a27 	vmul.f32	s15, s14, s15
2405c2be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
2405c2c2:	e065      	b.n	2405c390 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2405c2c4:	693b      	ldr	r3, [r7, #16]
2405c2c6:	ee07 3a90 	vmov	s15, r3
2405c2ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405c2ce:	eddf 6a48 	vldr	s13, [pc, #288]	; 2405c3f0 <HAL_RCC_GetSysClockFreq+0x2ec>
2405c2d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405c2d6:	4b40      	ldr	r3, [pc, #256]	; (2405c3d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405c2d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405c2da:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405c2de:	ee07 3a90 	vmov	s15, r3
2405c2e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405c2e6:	ed97 6a02 	vldr	s12, [r7, #8]
2405c2ea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 2405c3e8 <HAL_RCC_GetSysClockFreq+0x2e4>
2405c2ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405c2f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405c2f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405c2fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405c2fe:	ee67 7a27 	vmul.f32	s15, s14, s15
2405c302:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
2405c306:	e043      	b.n	2405c390 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2405c308:	693b      	ldr	r3, [r7, #16]
2405c30a:	ee07 3a90 	vmov	s15, r3
2405c30e:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405c312:	eddf 6a38 	vldr	s13, [pc, #224]	; 2405c3f4 <HAL_RCC_GetSysClockFreq+0x2f0>
2405c316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405c31a:	4b2f      	ldr	r3, [pc, #188]	; (2405c3d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405c31c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405c31e:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405c322:	ee07 3a90 	vmov	s15, r3
2405c326:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405c32a:	ed97 6a02 	vldr	s12, [r7, #8]
2405c32e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 2405c3e8 <HAL_RCC_GetSysClockFreq+0x2e4>
2405c332:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405c336:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405c33a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405c33e:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405c342:	ee67 7a27 	vmul.f32	s15, s14, s15
2405c346:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
2405c34a:	e021      	b.n	2405c390 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2405c34c:	693b      	ldr	r3, [r7, #16]
2405c34e:	ee07 3a90 	vmov	s15, r3
2405c352:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405c356:	eddf 6a26 	vldr	s13, [pc, #152]	; 2405c3f0 <HAL_RCC_GetSysClockFreq+0x2ec>
2405c35a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405c35e:	4b1e      	ldr	r3, [pc, #120]	; (2405c3d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405c360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405c362:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405c366:	ee07 3a90 	vmov	s15, r3
2405c36a:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405c36e:	ed97 6a02 	vldr	s12, [r7, #8]
2405c372:	eddf 5a1d 	vldr	s11, [pc, #116]	; 2405c3e8 <HAL_RCC_GetSysClockFreq+0x2e4>
2405c376:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405c37a:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405c37e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405c382:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405c386:	ee67 7a27 	vmul.f32	s15, s14, s15
2405c38a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
2405c38e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
2405c390:	4b11      	ldr	r3, [pc, #68]	; (2405c3d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405c392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405c394:	0a5b      	lsrs	r3, r3, #9
2405c396:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2405c39a:	3301      	adds	r3, #1
2405c39c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
2405c39e:	683b      	ldr	r3, [r7, #0]
2405c3a0:	ee07 3a90 	vmov	s15, r3
2405c3a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
2405c3a8:	edd7 6a07 	vldr	s13, [r7, #28]
2405c3ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
2405c3b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2405c3b4:	ee17 3a90 	vmov	r3, s15
2405c3b8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
2405c3ba:	e005      	b.n	2405c3c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
2405c3bc:	2300      	movs	r3, #0
2405c3be:	61bb      	str	r3, [r7, #24]
      break;
2405c3c0:	e002      	b.n	2405c3c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
2405c3c2:	4b07      	ldr	r3, [pc, #28]	; (2405c3e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
2405c3c4:	61bb      	str	r3, [r7, #24]
      break;
2405c3c6:	bf00      	nop
  }

  return sysclockfreq;
2405c3c8:	69bb      	ldr	r3, [r7, #24]
}
2405c3ca:	4618      	mov	r0, r3
2405c3cc:	3724      	adds	r7, #36	; 0x24
2405c3ce:	46bd      	mov	sp, r7
2405c3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
2405c3d4:	4770      	bx	lr
2405c3d6:	bf00      	nop
2405c3d8:	58024400 	.word	0x58024400
2405c3dc:	03d09000 	.word	0x03d09000
2405c3e0:	003d0900 	.word	0x003d0900
2405c3e4:	016e3600 	.word	0x016e3600
2405c3e8:	46000000 	.word	0x46000000
2405c3ec:	4c742400 	.word	0x4c742400
2405c3f0:	4a742400 	.word	0x4a742400
2405c3f4:	4bb71b00 	.word	0x4bb71b00

2405c3f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
2405c3f8:	b580      	push	{r7, lr}
2405c3fa:	b082      	sub	sp, #8
2405c3fc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
2405c3fe:	f7ff fe81 	bl	2405c104 <HAL_RCC_GetSysClockFreq>
2405c402:	4602      	mov	r2, r0
2405c404:	4b10      	ldr	r3, [pc, #64]	; (2405c448 <HAL_RCC_GetHCLKFreq+0x50>)
2405c406:	699b      	ldr	r3, [r3, #24]
2405c408:	0a1b      	lsrs	r3, r3, #8
2405c40a:	f003 030f 	and.w	r3, r3, #15
2405c40e:	490f      	ldr	r1, [pc, #60]	; (2405c44c <HAL_RCC_GetHCLKFreq+0x54>)
2405c410:	5ccb      	ldrb	r3, [r1, r3]
2405c412:	f003 031f 	and.w	r3, r3, #31
2405c416:	fa22 f303 	lsr.w	r3, r2, r3
2405c41a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
2405c41c:	4b0a      	ldr	r3, [pc, #40]	; (2405c448 <HAL_RCC_GetHCLKFreq+0x50>)
2405c41e:	699b      	ldr	r3, [r3, #24]
2405c420:	f003 030f 	and.w	r3, r3, #15
2405c424:	4a09      	ldr	r2, [pc, #36]	; (2405c44c <HAL_RCC_GetHCLKFreq+0x54>)
2405c426:	5cd3      	ldrb	r3, [r2, r3]
2405c428:	f003 031f 	and.w	r3, r3, #31
2405c42c:	687a      	ldr	r2, [r7, #4]
2405c42e:	fa22 f303 	lsr.w	r3, r2, r3
2405c432:	4a07      	ldr	r2, [pc, #28]	; (2405c450 <HAL_RCC_GetHCLKFreq+0x58>)
2405c434:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
2405c436:	4a07      	ldr	r2, [pc, #28]	; (2405c454 <HAL_RCC_GetHCLKFreq+0x5c>)
2405c438:	687b      	ldr	r3, [r7, #4]
2405c43a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
2405c43c:	4b04      	ldr	r3, [pc, #16]	; (2405c450 <HAL_RCC_GetHCLKFreq+0x58>)
2405c43e:	681b      	ldr	r3, [r3, #0]
}
2405c440:	4618      	mov	r0, r3
2405c442:	3708      	adds	r7, #8
2405c444:	46bd      	mov	sp, r7
2405c446:	bd80      	pop	{r7, pc}
2405c448:	58024400 	.word	0x58024400
2405c44c:	240641f8 	.word	0x240641f8
2405c450:	20000048 	.word	0x20000048
2405c454:	20000044 	.word	0x20000044

2405c458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
2405c458:	b580      	push	{r7, lr}
2405c45a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
2405c45c:	f7ff ffcc 	bl	2405c3f8 <HAL_RCC_GetHCLKFreq>
2405c460:	4602      	mov	r2, r0
2405c462:	4b06      	ldr	r3, [pc, #24]	; (2405c47c <HAL_RCC_GetPCLK1Freq+0x24>)
2405c464:	69db      	ldr	r3, [r3, #28]
2405c466:	091b      	lsrs	r3, r3, #4
2405c468:	f003 0307 	and.w	r3, r3, #7
2405c46c:	4904      	ldr	r1, [pc, #16]	; (2405c480 <HAL_RCC_GetPCLK1Freq+0x28>)
2405c46e:	5ccb      	ldrb	r3, [r1, r3]
2405c470:	f003 031f 	and.w	r3, r3, #31
2405c474:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
2405c478:	4618      	mov	r0, r3
2405c47a:	bd80      	pop	{r7, pc}
2405c47c:	58024400 	.word	0x58024400
2405c480:	240641f8 	.word	0x240641f8

2405c484 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
2405c484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
2405c488:	b0c8      	sub	sp, #288	; 0x120
2405c48a:	af00      	add	r7, sp, #0
2405c48c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
2405c490:	2300      	movs	r3, #0
2405c492:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
2405c496:	2300      	movs	r3, #0
2405c498:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
2405c49c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
2405c4a4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
2405c4a8:	2500      	movs	r5, #0
2405c4aa:	ea54 0305 	orrs.w	r3, r4, r5
2405c4ae:	d049      	beq.n	2405c544 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
2405c4b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c4b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
2405c4b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
2405c4ba:	d02f      	beq.n	2405c51c <HAL_RCCEx_PeriphCLKConfig+0x98>
2405c4bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
2405c4c0:	d828      	bhi.n	2405c514 <HAL_RCCEx_PeriphCLKConfig+0x90>
2405c4c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
2405c4c6:	d01a      	beq.n	2405c4fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
2405c4c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
2405c4cc:	d822      	bhi.n	2405c514 <HAL_RCCEx_PeriphCLKConfig+0x90>
2405c4ce:	2b00      	cmp	r3, #0
2405c4d0:	d003      	beq.n	2405c4da <HAL_RCCEx_PeriphCLKConfig+0x56>
2405c4d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
2405c4d6:	d007      	beq.n	2405c4e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
2405c4d8:	e01c      	b.n	2405c514 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405c4da:	4ba7      	ldr	r3, [pc, #668]	; (2405c778 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405c4dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405c4de:	4aa6      	ldr	r2, [pc, #664]	; (2405c778 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405c4e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2405c4e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
2405c4e6:	e01a      	b.n	2405c51e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
2405c4e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c4ec:	3308      	adds	r3, #8
2405c4ee:	2102      	movs	r1, #2
2405c4f0:	4618      	mov	r0, r3
2405c4f2:	f002 fa6d 	bl	2405e9d0 <RCCEx_PLL2_Config>
2405c4f6:	4603      	mov	r3, r0
2405c4f8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
2405c4fc:	e00f      	b.n	2405c51e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2405c4fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c502:	3328      	adds	r3, #40	; 0x28
2405c504:	2102      	movs	r1, #2
2405c506:	4618      	mov	r0, r3
2405c508:	f002 fb14 	bl	2405eb34 <RCCEx_PLL3_Config>
2405c50c:	4603      	mov	r3, r0
2405c50e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
2405c512:	e004      	b.n	2405c51e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405c514:	2301      	movs	r3, #1
2405c516:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405c51a:	e000      	b.n	2405c51e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
2405c51c:	bf00      	nop
    }

    if (ret == HAL_OK)
2405c51e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405c522:	2b00      	cmp	r3, #0
2405c524:	d10a      	bne.n	2405c53c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
2405c526:	4b94      	ldr	r3, [pc, #592]	; (2405c778 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405c528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405c52a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
2405c52e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
2405c534:	4a90      	ldr	r2, [pc, #576]	; (2405c778 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405c536:	430b      	orrs	r3, r1
2405c538:	6513      	str	r3, [r2, #80]	; 0x50
2405c53a:	e003      	b.n	2405c544 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405c53c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405c540:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
2405c544:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c548:	e9d3 2300 	ldrd	r2, r3, [r3]
2405c54c:	f402 7880 	and.w	r8, r2, #256	; 0x100
2405c550:	f04f 0900 	mov.w	r9, #0
2405c554:	ea58 0309 	orrs.w	r3, r8, r9
2405c558:	d047      	beq.n	2405c5ea <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
2405c55a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c55e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405c560:	2b04      	cmp	r3, #4
2405c562:	d82a      	bhi.n	2405c5ba <HAL_RCCEx_PeriphCLKConfig+0x136>
2405c564:	a201      	add	r2, pc, #4	; (adr r2, 2405c56c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
2405c566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2405c56a:	bf00      	nop
2405c56c:	2405c581 	.word	0x2405c581
2405c570:	2405c58f 	.word	0x2405c58f
2405c574:	2405c5a5 	.word	0x2405c5a5
2405c578:	2405c5c3 	.word	0x2405c5c3
2405c57c:	2405c5c3 	.word	0x2405c5c3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405c580:	4b7d      	ldr	r3, [pc, #500]	; (2405c778 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405c582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405c584:	4a7c      	ldr	r2, [pc, #496]	; (2405c778 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405c586:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2405c58a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
2405c58c:	e01a      	b.n	2405c5c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2405c58e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c592:	3308      	adds	r3, #8
2405c594:	2100      	movs	r1, #0
2405c596:	4618      	mov	r0, r3
2405c598:	f002 fa1a 	bl	2405e9d0 <RCCEx_PLL2_Config>
2405c59c:	4603      	mov	r3, r0
2405c59e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
2405c5a2:	e00f      	b.n	2405c5c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
2405c5a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c5a8:	3328      	adds	r3, #40	; 0x28
2405c5aa:	2100      	movs	r1, #0
2405c5ac:	4618      	mov	r0, r3
2405c5ae:	f002 fac1 	bl	2405eb34 <RCCEx_PLL3_Config>
2405c5b2:	4603      	mov	r3, r0
2405c5b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
2405c5b8:	e004      	b.n	2405c5c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405c5ba:	2301      	movs	r3, #1
2405c5bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405c5c0:	e000      	b.n	2405c5c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
2405c5c2:	bf00      	nop
    }

    if (ret == HAL_OK)
2405c5c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405c5c8:	2b00      	cmp	r3, #0
2405c5ca:	d10a      	bne.n	2405c5e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
2405c5cc:	4b6a      	ldr	r3, [pc, #424]	; (2405c778 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405c5ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405c5d0:	f023 0107 	bic.w	r1, r3, #7
2405c5d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c5d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405c5da:	4a67      	ldr	r2, [pc, #412]	; (2405c778 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405c5dc:	430b      	orrs	r3, r1
2405c5de:	6513      	str	r3, [r2, #80]	; 0x50
2405c5e0:	e003      	b.n	2405c5ea <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405c5e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405c5e6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
2405c5ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
2405c5f2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
2405c5f6:	f04f 0b00 	mov.w	fp, #0
2405c5fa:	ea5a 030b 	orrs.w	r3, sl, fp
2405c5fe:	d054      	beq.n	2405c6aa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
2405c600:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2405c606:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
2405c60a:	d036      	beq.n	2405c67a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
2405c60c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
2405c610:	d82f      	bhi.n	2405c672 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
2405c612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405c616:	d032      	beq.n	2405c67e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
2405c618:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405c61c:	d829      	bhi.n	2405c672 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
2405c61e:	2bc0      	cmp	r3, #192	; 0xc0
2405c620:	d02f      	beq.n	2405c682 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
2405c622:	2bc0      	cmp	r3, #192	; 0xc0
2405c624:	d825      	bhi.n	2405c672 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
2405c626:	2b80      	cmp	r3, #128	; 0x80
2405c628:	d018      	beq.n	2405c65c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
2405c62a:	2b80      	cmp	r3, #128	; 0x80
2405c62c:	d821      	bhi.n	2405c672 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
2405c62e:	2b00      	cmp	r3, #0
2405c630:	d002      	beq.n	2405c638 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
2405c632:	2b40      	cmp	r3, #64	; 0x40
2405c634:	d007      	beq.n	2405c646 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
2405c636:	e01c      	b.n	2405c672 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405c638:	4b4f      	ldr	r3, [pc, #316]	; (2405c778 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405c63a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405c63c:	4a4e      	ldr	r2, [pc, #312]	; (2405c778 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405c63e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2405c642:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
2405c644:	e01e      	b.n	2405c684 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2405c646:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c64a:	3308      	adds	r3, #8
2405c64c:	2100      	movs	r1, #0
2405c64e:	4618      	mov	r0, r3
2405c650:	f002 f9be 	bl	2405e9d0 <RCCEx_PLL2_Config>
2405c654:	4603      	mov	r3, r0
2405c656:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
2405c65a:	e013      	b.n	2405c684 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
2405c65c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c660:	3328      	adds	r3, #40	; 0x28
2405c662:	2100      	movs	r1, #0
2405c664:	4618      	mov	r0, r3
2405c666:	f002 fa65 	bl	2405eb34 <RCCEx_PLL3_Config>
2405c66a:	4603      	mov	r3, r0
2405c66c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
2405c670:	e008      	b.n	2405c684 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405c672:	2301      	movs	r3, #1
2405c674:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405c678:	e004      	b.n	2405c684 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
2405c67a:	bf00      	nop
2405c67c:	e002      	b.n	2405c684 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
2405c67e:	bf00      	nop
2405c680:	e000      	b.n	2405c684 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
2405c682:	bf00      	nop
    }

    if (ret == HAL_OK)
2405c684:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405c688:	2b00      	cmp	r3, #0
2405c68a:	d10a      	bne.n	2405c6a2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
2405c68c:	4b3a      	ldr	r3, [pc, #232]	; (2405c778 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405c68e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405c690:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
2405c694:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2405c69a:	4a37      	ldr	r2, [pc, #220]	; (2405c778 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405c69c:	430b      	orrs	r3, r1
2405c69e:	6513      	str	r3, [r2, #80]	; 0x50
2405c6a0:	e003      	b.n	2405c6aa <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405c6a2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405c6a6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
2405c6aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
2405c6b2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
2405c6b6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
2405c6ba:	2300      	movs	r3, #0
2405c6bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
2405c6c0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
2405c6c4:	460b      	mov	r3, r1
2405c6c6:	4313      	orrs	r3, r2
2405c6c8:	d05c      	beq.n	2405c784 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
2405c6ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c6ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2405c6d0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
2405c6d4:	d03b      	beq.n	2405c74e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
2405c6d6:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
2405c6da:	d834      	bhi.n	2405c746 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
2405c6dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
2405c6e0:	d037      	beq.n	2405c752 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
2405c6e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
2405c6e6:	d82e      	bhi.n	2405c746 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
2405c6e8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
2405c6ec:	d033      	beq.n	2405c756 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
2405c6ee:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
2405c6f2:	d828      	bhi.n	2405c746 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
2405c6f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
2405c6f8:	d01a      	beq.n	2405c730 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
2405c6fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
2405c6fe:	d822      	bhi.n	2405c746 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
2405c700:	2b00      	cmp	r3, #0
2405c702:	d003      	beq.n	2405c70c <HAL_RCCEx_PeriphCLKConfig+0x288>
2405c704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
2405c708:	d007      	beq.n	2405c71a <HAL_RCCEx_PeriphCLKConfig+0x296>
2405c70a:	e01c      	b.n	2405c746 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405c70c:	4b1a      	ldr	r3, [pc, #104]	; (2405c778 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405c70e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405c710:	4a19      	ldr	r2, [pc, #100]	; (2405c778 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405c712:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2405c716:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
2405c718:	e01e      	b.n	2405c758 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2405c71a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c71e:	3308      	adds	r3, #8
2405c720:	2100      	movs	r1, #0
2405c722:	4618      	mov	r0, r3
2405c724:	f002 f954 	bl	2405e9d0 <RCCEx_PLL2_Config>
2405c728:	4603      	mov	r3, r0
2405c72a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
2405c72e:	e013      	b.n	2405c758 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
2405c730:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c734:	3328      	adds	r3, #40	; 0x28
2405c736:	2100      	movs	r1, #0
2405c738:	4618      	mov	r0, r3
2405c73a:	f002 f9fb 	bl	2405eb34 <RCCEx_PLL3_Config>
2405c73e:	4603      	mov	r3, r0
2405c740:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
2405c744:	e008      	b.n	2405c758 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405c746:	2301      	movs	r3, #1
2405c748:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405c74c:	e004      	b.n	2405c758 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
2405c74e:	bf00      	nop
2405c750:	e002      	b.n	2405c758 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
2405c752:	bf00      	nop
2405c754:	e000      	b.n	2405c758 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
2405c756:	bf00      	nop
    }

    if (ret == HAL_OK)
2405c758:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405c75c:	2b00      	cmp	r3, #0
2405c75e:	d10d      	bne.n	2405c77c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
2405c760:	4b05      	ldr	r3, [pc, #20]	; (2405c778 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405c762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405c764:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
2405c768:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c76c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2405c76e:	4a02      	ldr	r2, [pc, #8]	; (2405c778 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
2405c770:	430b      	orrs	r3, r1
2405c772:	6513      	str	r3, [r2, #80]	; 0x50
2405c774:	e006      	b.n	2405c784 <HAL_RCCEx_PeriphCLKConfig+0x300>
2405c776:	bf00      	nop
2405c778:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
2405c77c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405c780:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
2405c784:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c788:	e9d3 2300 	ldrd	r2, r3, [r3]
2405c78c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
2405c790:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
2405c794:	2300      	movs	r3, #0
2405c796:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
2405c79a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
2405c79e:	460b      	mov	r3, r1
2405c7a0:	4313      	orrs	r3, r2
2405c7a2:	d03a      	beq.n	2405c81a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
2405c7a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c7a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405c7aa:	2b30      	cmp	r3, #48	; 0x30
2405c7ac:	d01f      	beq.n	2405c7ee <HAL_RCCEx_PeriphCLKConfig+0x36a>
2405c7ae:	2b30      	cmp	r3, #48	; 0x30
2405c7b0:	d819      	bhi.n	2405c7e6 <HAL_RCCEx_PeriphCLKConfig+0x362>
2405c7b2:	2b20      	cmp	r3, #32
2405c7b4:	d00c      	beq.n	2405c7d0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
2405c7b6:	2b20      	cmp	r3, #32
2405c7b8:	d815      	bhi.n	2405c7e6 <HAL_RCCEx_PeriphCLKConfig+0x362>
2405c7ba:	2b00      	cmp	r3, #0
2405c7bc:	d019      	beq.n	2405c7f2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
2405c7be:	2b10      	cmp	r3, #16
2405c7c0:	d111      	bne.n	2405c7e6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405c7c2:	4bae      	ldr	r3, [pc, #696]	; (2405ca7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2405c7c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405c7c6:	4aad      	ldr	r2, [pc, #692]	; (2405ca7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2405c7c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2405c7cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
2405c7ce:	e011      	b.n	2405c7f4 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
2405c7d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c7d4:	3308      	adds	r3, #8
2405c7d6:	2102      	movs	r1, #2
2405c7d8:	4618      	mov	r0, r3
2405c7da:	f002 f8f9 	bl	2405e9d0 <RCCEx_PLL2_Config>
2405c7de:	4603      	mov	r3, r0
2405c7e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
2405c7e4:	e006      	b.n	2405c7f4 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
2405c7e6:	2301      	movs	r3, #1
2405c7e8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405c7ec:	e002      	b.n	2405c7f4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
2405c7ee:	bf00      	nop
2405c7f0:	e000      	b.n	2405c7f4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
2405c7f2:	bf00      	nop
    }

    if (ret == HAL_OK)
2405c7f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405c7f8:	2b00      	cmp	r3, #0
2405c7fa:	d10a      	bne.n	2405c812 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
2405c7fc:	4b9f      	ldr	r3, [pc, #636]	; (2405ca7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2405c7fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405c800:	f023 0130 	bic.w	r1, r3, #48	; 0x30
2405c804:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405c80a:	4a9c      	ldr	r2, [pc, #624]	; (2405ca7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2405c80c:	430b      	orrs	r3, r1
2405c80e:	64d3      	str	r3, [r2, #76]	; 0x4c
2405c810:	e003      	b.n	2405c81a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405c812:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405c816:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
2405c81a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c81e:	e9d3 2300 	ldrd	r2, r3, [r3]
2405c822:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
2405c826:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
2405c82a:	2300      	movs	r3, #0
2405c82c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
2405c830:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
2405c834:	460b      	mov	r3, r1
2405c836:	4313      	orrs	r3, r2
2405c838:	d051      	beq.n	2405c8de <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
2405c83a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c83e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
2405c840:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2405c844:	d035      	beq.n	2405c8b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
2405c846:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2405c84a:	d82e      	bhi.n	2405c8aa <HAL_RCCEx_PeriphCLKConfig+0x426>
2405c84c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
2405c850:	d031      	beq.n	2405c8b6 <HAL_RCCEx_PeriphCLKConfig+0x432>
2405c852:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
2405c856:	d828      	bhi.n	2405c8aa <HAL_RCCEx_PeriphCLKConfig+0x426>
2405c858:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2405c85c:	d01a      	beq.n	2405c894 <HAL_RCCEx_PeriphCLKConfig+0x410>
2405c85e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2405c862:	d822      	bhi.n	2405c8aa <HAL_RCCEx_PeriphCLKConfig+0x426>
2405c864:	2b00      	cmp	r3, #0
2405c866:	d003      	beq.n	2405c870 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
2405c868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
2405c86c:	d007      	beq.n	2405c87e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
2405c86e:	e01c      	b.n	2405c8aa <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405c870:	4b82      	ldr	r3, [pc, #520]	; (2405ca7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2405c872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405c874:	4a81      	ldr	r2, [pc, #516]	; (2405ca7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2405c876:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2405c87a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
2405c87c:	e01c      	b.n	2405c8b8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2405c87e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c882:	3308      	adds	r3, #8
2405c884:	2100      	movs	r1, #0
2405c886:	4618      	mov	r0, r3
2405c888:	f002 f8a2 	bl	2405e9d0 <RCCEx_PLL2_Config>
2405c88c:	4603      	mov	r3, r0
2405c88e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
2405c892:	e011      	b.n	2405c8b8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
2405c894:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c898:	3328      	adds	r3, #40	; 0x28
2405c89a:	2100      	movs	r1, #0
2405c89c:	4618      	mov	r0, r3
2405c89e:	f002 f949 	bl	2405eb34 <RCCEx_PLL3_Config>
2405c8a2:	4603      	mov	r3, r0
2405c8a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
2405c8a8:	e006      	b.n	2405c8b8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405c8aa:	2301      	movs	r3, #1
2405c8ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405c8b0:	e002      	b.n	2405c8b8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
2405c8b2:	bf00      	nop
2405c8b4:	e000      	b.n	2405c8b8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
2405c8b6:	bf00      	nop
    }

    if (ret == HAL_OK)
2405c8b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405c8bc:	2b00      	cmp	r3, #0
2405c8be:	d10a      	bne.n	2405c8d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
2405c8c0:	4b6e      	ldr	r3, [pc, #440]	; (2405ca7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2405c8c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405c8c4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
2405c8c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c8cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
2405c8ce:	4a6b      	ldr	r2, [pc, #428]	; (2405ca7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2405c8d0:	430b      	orrs	r3, r1
2405c8d2:	6513      	str	r3, [r2, #80]	; 0x50
2405c8d4:	e003      	b.n	2405c8de <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405c8d6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405c8da:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
2405c8de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
2405c8e6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
2405c8ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
2405c8ee:	2300      	movs	r3, #0
2405c8f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
2405c8f4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
2405c8f8:	460b      	mov	r3, r1
2405c8fa:	4313      	orrs	r3, r2
2405c8fc:	d053      	beq.n	2405c9a6 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
2405c8fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c902:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2405c904:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
2405c908:	d033      	beq.n	2405c972 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
2405c90a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
2405c90e:	d82c      	bhi.n	2405c96a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
2405c910:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
2405c914:	d02f      	beq.n	2405c976 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
2405c916:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
2405c91a:	d826      	bhi.n	2405c96a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
2405c91c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
2405c920:	d02b      	beq.n	2405c97a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
2405c922:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
2405c926:	d820      	bhi.n	2405c96a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
2405c928:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405c92c:	d012      	beq.n	2405c954 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
2405c92e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405c932:	d81a      	bhi.n	2405c96a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
2405c934:	2b00      	cmp	r3, #0
2405c936:	d022      	beq.n	2405c97e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
2405c938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2405c93c:	d115      	bne.n	2405c96a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
2405c93e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c942:	3308      	adds	r3, #8
2405c944:	2101      	movs	r1, #1
2405c946:	4618      	mov	r0, r3
2405c948:	f002 f842 	bl	2405e9d0 <RCCEx_PLL2_Config>
2405c94c:	4603      	mov	r3, r0
2405c94e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
2405c952:	e015      	b.n	2405c980 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2405c954:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c958:	3328      	adds	r3, #40	; 0x28
2405c95a:	2101      	movs	r1, #1
2405c95c:	4618      	mov	r0, r3
2405c95e:	f002 f8e9 	bl	2405eb34 <RCCEx_PLL3_Config>
2405c962:	4603      	mov	r3, r0
2405c964:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
2405c968:	e00a      	b.n	2405c980 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405c96a:	2301      	movs	r3, #1
2405c96c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405c970:	e006      	b.n	2405c980 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
2405c972:	bf00      	nop
2405c974:	e004      	b.n	2405c980 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
2405c976:	bf00      	nop
2405c978:	e002      	b.n	2405c980 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
2405c97a:	bf00      	nop
2405c97c:	e000      	b.n	2405c980 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
2405c97e:	bf00      	nop
    }

    if (ret == HAL_OK)
2405c980:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405c984:	2b00      	cmp	r3, #0
2405c986:	d10a      	bne.n	2405c99e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
2405c988:	4b3c      	ldr	r3, [pc, #240]	; (2405ca7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2405c98a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405c98c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
2405c990:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c994:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2405c996:	4a39      	ldr	r2, [pc, #228]	; (2405ca7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2405c998:	430b      	orrs	r3, r1
2405c99a:	6513      	str	r3, [r2, #80]	; 0x50
2405c99c:	e003      	b.n	2405c9a6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405c99e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405c9a2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
2405c9a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
2405c9ae:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
2405c9b2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
2405c9b6:	2300      	movs	r3, #0
2405c9b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
2405c9bc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
2405c9c0:	460b      	mov	r3, r1
2405c9c2:	4313      	orrs	r3, r2
2405c9c4:	d060      	beq.n	2405ca88 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
2405c9c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405c9ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
2405c9ce:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
2405c9d2:	d039      	beq.n	2405ca48 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
2405c9d4:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
2405c9d8:	d832      	bhi.n	2405ca40 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
2405c9da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
2405c9de:	d035      	beq.n	2405ca4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
2405c9e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
2405c9e4:	d82c      	bhi.n	2405ca40 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
2405c9e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2405c9ea:	d031      	beq.n	2405ca50 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
2405c9ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2405c9f0:	d826      	bhi.n	2405ca40 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
2405c9f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
2405c9f6:	d02d      	beq.n	2405ca54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
2405c9f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
2405c9fc:	d820      	bhi.n	2405ca40 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
2405c9fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405ca02:	d012      	beq.n	2405ca2a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
2405ca04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405ca08:	d81a      	bhi.n	2405ca40 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
2405ca0a:	2b00      	cmp	r3, #0
2405ca0c:	d024      	beq.n	2405ca58 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
2405ca0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2405ca12:	d115      	bne.n	2405ca40 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
2405ca14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405ca18:	3308      	adds	r3, #8
2405ca1a:	2101      	movs	r1, #1
2405ca1c:	4618      	mov	r0, r3
2405ca1e:	f001 ffd7 	bl	2405e9d0 <RCCEx_PLL2_Config>
2405ca22:	4603      	mov	r3, r0
2405ca24:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
2405ca28:	e017      	b.n	2405ca5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2405ca2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405ca2e:	3328      	adds	r3, #40	; 0x28
2405ca30:	2101      	movs	r1, #1
2405ca32:	4618      	mov	r0, r3
2405ca34:	f002 f87e 	bl	2405eb34 <RCCEx_PLL3_Config>
2405ca38:	4603      	mov	r3, r0
2405ca3a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
2405ca3e:	e00c      	b.n	2405ca5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
2405ca40:	2301      	movs	r3, #1
2405ca42:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405ca46:	e008      	b.n	2405ca5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
2405ca48:	bf00      	nop
2405ca4a:	e006      	b.n	2405ca5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
2405ca4c:	bf00      	nop
2405ca4e:	e004      	b.n	2405ca5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
2405ca50:	bf00      	nop
2405ca52:	e002      	b.n	2405ca5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
2405ca54:	bf00      	nop
2405ca56:	e000      	b.n	2405ca5a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
2405ca58:	bf00      	nop
    }

    if (ret == HAL_OK)
2405ca5a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405ca5e:	2b00      	cmp	r3, #0
2405ca60:	d10e      	bne.n	2405ca80 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
2405ca62:	4b06      	ldr	r3, [pc, #24]	; (2405ca7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2405ca64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405ca66:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
2405ca6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405ca6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
2405ca72:	4a02      	ldr	r2, [pc, #8]	; (2405ca7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
2405ca74:	430b      	orrs	r3, r1
2405ca76:	6593      	str	r3, [r2, #88]	; 0x58
2405ca78:	e006      	b.n	2405ca88 <HAL_RCCEx_PeriphCLKConfig+0x604>
2405ca7a:	bf00      	nop
2405ca7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
2405ca80:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405ca84:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
2405ca88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405ca8c:	e9d3 2300 	ldrd	r2, r3, [r3]
2405ca90:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
2405ca94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
2405ca98:	2300      	movs	r3, #0
2405ca9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
2405ca9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
2405caa2:	460b      	mov	r3, r1
2405caa4:	4313      	orrs	r3, r2
2405caa6:	d037      	beq.n	2405cb18 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
2405caa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405caac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
2405caae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405cab2:	d00e      	beq.n	2405cad2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
2405cab4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405cab8:	d816      	bhi.n	2405cae8 <HAL_RCCEx_PeriphCLKConfig+0x664>
2405caba:	2b00      	cmp	r3, #0
2405cabc:	d018      	beq.n	2405caf0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
2405cabe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2405cac2:	d111      	bne.n	2405cae8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405cac4:	4bc4      	ldr	r3, [pc, #784]	; (2405cdd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405cac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405cac8:	4ac3      	ldr	r2, [pc, #780]	; (2405cdd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405caca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2405cace:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
2405cad0:	e00f      	b.n	2405caf2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
2405cad2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405cad6:	3308      	adds	r3, #8
2405cad8:	2101      	movs	r1, #1
2405cada:	4618      	mov	r0, r3
2405cadc:	f001 ff78 	bl	2405e9d0 <RCCEx_PLL2_Config>
2405cae0:	4603      	mov	r3, r0
2405cae2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
2405cae6:	e004      	b.n	2405caf2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405cae8:	2301      	movs	r3, #1
2405caea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405caee:	e000      	b.n	2405caf2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
2405caf0:	bf00      	nop
    }

    if (ret == HAL_OK)
2405caf2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405caf6:	2b00      	cmp	r3, #0
2405caf8:	d10a      	bne.n	2405cb10 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
2405cafa:	4bb7      	ldr	r3, [pc, #732]	; (2405cdd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405cafc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405cafe:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
2405cb02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405cb06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
2405cb08:	4ab3      	ldr	r2, [pc, #716]	; (2405cdd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405cb0a:	430b      	orrs	r3, r1
2405cb0c:	6513      	str	r3, [r2, #80]	; 0x50
2405cb0e:	e003      	b.n	2405cb18 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405cb10:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405cb14:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
2405cb18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405cb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
2405cb20:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
2405cb24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
2405cb28:	2300      	movs	r3, #0
2405cb2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
2405cb2e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
2405cb32:	460b      	mov	r3, r1
2405cb34:	4313      	orrs	r3, r2
2405cb36:	d039      	beq.n	2405cbac <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
2405cb38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405cb3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2405cb3e:	2b03      	cmp	r3, #3
2405cb40:	d81c      	bhi.n	2405cb7c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
2405cb42:	a201      	add	r2, pc, #4	; (adr r2, 2405cb48 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
2405cb44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2405cb48:	2405cb85 	.word	0x2405cb85
2405cb4c:	2405cb59 	.word	0x2405cb59
2405cb50:	2405cb67 	.word	0x2405cb67
2405cb54:	2405cb85 	.word	0x2405cb85
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405cb58:	4b9f      	ldr	r3, [pc, #636]	; (2405cdd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405cb5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405cb5c:	4a9e      	ldr	r2, [pc, #632]	; (2405cdd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405cb5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2405cb62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
2405cb64:	e00f      	b.n	2405cb86 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
2405cb66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405cb6a:	3308      	adds	r3, #8
2405cb6c:	2102      	movs	r1, #2
2405cb6e:	4618      	mov	r0, r3
2405cb70:	f001 ff2e 	bl	2405e9d0 <RCCEx_PLL2_Config>
2405cb74:	4603      	mov	r3, r0
2405cb76:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
2405cb7a:	e004      	b.n	2405cb86 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
2405cb7c:	2301      	movs	r3, #1
2405cb7e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405cb82:	e000      	b.n	2405cb86 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
2405cb84:	bf00      	nop
    }

    if (ret == HAL_OK)
2405cb86:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405cb8a:	2b00      	cmp	r3, #0
2405cb8c:	d10a      	bne.n	2405cba4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
2405cb8e:	4b92      	ldr	r3, [pc, #584]	; (2405cdd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405cb90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405cb92:	f023 0103 	bic.w	r1, r3, #3
2405cb96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405cb9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2405cb9c:	4a8e      	ldr	r2, [pc, #568]	; (2405cdd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405cb9e:	430b      	orrs	r3, r1
2405cba0:	64d3      	str	r3, [r2, #76]	; 0x4c
2405cba2:	e003      	b.n	2405cbac <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405cba4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405cba8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
2405cbac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405cbb0:	e9d3 2300 	ldrd	r2, r3, [r3]
2405cbb4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
2405cbb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
2405cbbc:	2300      	movs	r3, #0
2405cbbe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
2405cbc2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
2405cbc6:	460b      	mov	r3, r1
2405cbc8:	4313      	orrs	r3, r2
2405cbca:	f000 8099 	beq.w	2405cd00 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
2405cbce:	4b83      	ldr	r3, [pc, #524]	; (2405cddc <HAL_RCCEx_PeriphCLKConfig+0x958>)
2405cbd0:	681b      	ldr	r3, [r3, #0]
2405cbd2:	4a82      	ldr	r2, [pc, #520]	; (2405cddc <HAL_RCCEx_PeriphCLKConfig+0x958>)
2405cbd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2405cbd8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
2405cbda:	f7f7 f8f7 	bl	24053dcc <HAL_GetTick>
2405cbde:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
2405cbe2:	e00b      	b.n	2405cbfc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
2405cbe4:	f7f7 f8f2 	bl	24053dcc <HAL_GetTick>
2405cbe8:	4602      	mov	r2, r0
2405cbea:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
2405cbee:	1ad3      	subs	r3, r2, r3
2405cbf0:	2b64      	cmp	r3, #100	; 0x64
2405cbf2:	d903      	bls.n	2405cbfc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
2405cbf4:	2303      	movs	r3, #3
2405cbf6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405cbfa:	e005      	b.n	2405cc08 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
2405cbfc:	4b77      	ldr	r3, [pc, #476]	; (2405cddc <HAL_RCCEx_PeriphCLKConfig+0x958>)
2405cbfe:	681b      	ldr	r3, [r3, #0]
2405cc00:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405cc04:	2b00      	cmp	r3, #0
2405cc06:	d0ed      	beq.n	2405cbe4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
2405cc08:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405cc0c:	2b00      	cmp	r3, #0
2405cc0e:	d173      	bne.n	2405ccf8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
2405cc10:	4b71      	ldr	r3, [pc, #452]	; (2405cdd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405cc12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
2405cc14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405cc18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
2405cc1c:	4053      	eors	r3, r2
2405cc1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
2405cc22:	2b00      	cmp	r3, #0
2405cc24:	d015      	beq.n	2405cc52 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
2405cc26:	4b6c      	ldr	r3, [pc, #432]	; (2405cdd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405cc28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405cc2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
2405cc2e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
2405cc32:	4b69      	ldr	r3, [pc, #420]	; (2405cdd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405cc34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405cc36:	4a68      	ldr	r2, [pc, #416]	; (2405cdd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405cc38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2405cc3c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
2405cc3e:	4b66      	ldr	r3, [pc, #408]	; (2405cdd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405cc40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405cc42:	4a65      	ldr	r2, [pc, #404]	; (2405cdd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405cc44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2405cc48:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
2405cc4a:	4a63      	ldr	r2, [pc, #396]	; (2405cdd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405cc4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
2405cc50:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
2405cc52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405cc56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
2405cc5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405cc5e:	d118      	bne.n	2405cc92 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2405cc60:	f7f7 f8b4 	bl	24053dcc <HAL_GetTick>
2405cc64:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
2405cc68:	e00d      	b.n	2405cc86 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
2405cc6a:	f7f7 f8af 	bl	24053dcc <HAL_GetTick>
2405cc6e:	4602      	mov	r2, r0
2405cc70:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
2405cc74:	1ad2      	subs	r2, r2, r3
2405cc76:	f241 3388 	movw	r3, #5000	; 0x1388
2405cc7a:	429a      	cmp	r2, r3
2405cc7c:	d903      	bls.n	2405cc86 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
2405cc7e:	2303      	movs	r3, #3
2405cc80:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
2405cc84:	e005      	b.n	2405cc92 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
2405cc86:	4b54      	ldr	r3, [pc, #336]	; (2405cdd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405cc88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405cc8a:	f003 0302 	and.w	r3, r3, #2
2405cc8e:	2b00      	cmp	r3, #0
2405cc90:	d0eb      	beq.n	2405cc6a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
2405cc92:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405cc96:	2b00      	cmp	r3, #0
2405cc98:	d129      	bne.n	2405ccee <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
2405cc9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405cc9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
2405cca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
2405cca6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
2405ccaa:	d10e      	bne.n	2405ccca <HAL_RCCEx_PeriphCLKConfig+0x846>
2405ccac:	4b4a      	ldr	r3, [pc, #296]	; (2405cdd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405ccae:	691b      	ldr	r3, [r3, #16]
2405ccb0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
2405ccb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405ccb8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
2405ccbc:	091a      	lsrs	r2, r3, #4
2405ccbe:	4b48      	ldr	r3, [pc, #288]	; (2405cde0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
2405ccc0:	4013      	ands	r3, r2
2405ccc2:	4a45      	ldr	r2, [pc, #276]	; (2405cdd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405ccc4:	430b      	orrs	r3, r1
2405ccc6:	6113      	str	r3, [r2, #16]
2405ccc8:	e005      	b.n	2405ccd6 <HAL_RCCEx_PeriphCLKConfig+0x852>
2405ccca:	4b43      	ldr	r3, [pc, #268]	; (2405cdd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405cccc:	691b      	ldr	r3, [r3, #16]
2405ccce:	4a42      	ldr	r2, [pc, #264]	; (2405cdd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405ccd0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
2405ccd4:	6113      	str	r3, [r2, #16]
2405ccd6:	4b40      	ldr	r3, [pc, #256]	; (2405cdd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405ccd8:	6f19      	ldr	r1, [r3, #112]	; 0x70
2405ccda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405ccde:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
2405cce2:	f3c3 030b 	ubfx	r3, r3, #0, #12
2405cce6:	4a3c      	ldr	r2, [pc, #240]	; (2405cdd8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
2405cce8:	430b      	orrs	r3, r1
2405ccea:	6713      	str	r3, [r2, #112]	; 0x70
2405ccec:	e008      	b.n	2405cd00 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
2405ccee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405ccf2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
2405ccf6:	e003      	b.n	2405cd00 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
2405ccf8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405ccfc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
2405cd00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405cd04:	e9d3 2300 	ldrd	r2, r3, [r3]
2405cd08:	f002 0301 	and.w	r3, r2, #1
2405cd0c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
2405cd10:	2300      	movs	r3, #0
2405cd12:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
2405cd16:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
2405cd1a:	460b      	mov	r3, r1
2405cd1c:	4313      	orrs	r3, r2
2405cd1e:	f000 8090 	beq.w	2405ce42 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
2405cd22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405cd26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405cd2a:	2b28      	cmp	r3, #40	; 0x28
2405cd2c:	d870      	bhi.n	2405ce10 <HAL_RCCEx_PeriphCLKConfig+0x98c>
2405cd2e:	a201      	add	r2, pc, #4	; (adr r2, 2405cd34 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
2405cd30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2405cd34:	2405ce19 	.word	0x2405ce19
2405cd38:	2405ce11 	.word	0x2405ce11
2405cd3c:	2405ce11 	.word	0x2405ce11
2405cd40:	2405ce11 	.word	0x2405ce11
2405cd44:	2405ce11 	.word	0x2405ce11
2405cd48:	2405ce11 	.word	0x2405ce11
2405cd4c:	2405ce11 	.word	0x2405ce11
2405cd50:	2405ce11 	.word	0x2405ce11
2405cd54:	2405cde5 	.word	0x2405cde5
2405cd58:	2405ce11 	.word	0x2405ce11
2405cd5c:	2405ce11 	.word	0x2405ce11
2405cd60:	2405ce11 	.word	0x2405ce11
2405cd64:	2405ce11 	.word	0x2405ce11
2405cd68:	2405ce11 	.word	0x2405ce11
2405cd6c:	2405ce11 	.word	0x2405ce11
2405cd70:	2405ce11 	.word	0x2405ce11
2405cd74:	2405cdfb 	.word	0x2405cdfb
2405cd78:	2405ce11 	.word	0x2405ce11
2405cd7c:	2405ce11 	.word	0x2405ce11
2405cd80:	2405ce11 	.word	0x2405ce11
2405cd84:	2405ce11 	.word	0x2405ce11
2405cd88:	2405ce11 	.word	0x2405ce11
2405cd8c:	2405ce11 	.word	0x2405ce11
2405cd90:	2405ce11 	.word	0x2405ce11
2405cd94:	2405ce19 	.word	0x2405ce19
2405cd98:	2405ce11 	.word	0x2405ce11
2405cd9c:	2405ce11 	.word	0x2405ce11
2405cda0:	2405ce11 	.word	0x2405ce11
2405cda4:	2405ce11 	.word	0x2405ce11
2405cda8:	2405ce11 	.word	0x2405ce11
2405cdac:	2405ce11 	.word	0x2405ce11
2405cdb0:	2405ce11 	.word	0x2405ce11
2405cdb4:	2405ce19 	.word	0x2405ce19
2405cdb8:	2405ce11 	.word	0x2405ce11
2405cdbc:	2405ce11 	.word	0x2405ce11
2405cdc0:	2405ce11 	.word	0x2405ce11
2405cdc4:	2405ce11 	.word	0x2405ce11
2405cdc8:	2405ce11 	.word	0x2405ce11
2405cdcc:	2405ce11 	.word	0x2405ce11
2405cdd0:	2405ce11 	.word	0x2405ce11
2405cdd4:	2405ce19 	.word	0x2405ce19
2405cdd8:	58024400 	.word	0x58024400
2405cddc:	58024800 	.word	0x58024800
2405cde0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
2405cde4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405cde8:	3308      	adds	r3, #8
2405cdea:	2101      	movs	r1, #1
2405cdec:	4618      	mov	r0, r3
2405cdee:	f001 fdef 	bl	2405e9d0 <RCCEx_PLL2_Config>
2405cdf2:	4603      	mov	r3, r0
2405cdf4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
2405cdf8:	e00f      	b.n	2405ce1a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2405cdfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405cdfe:	3328      	adds	r3, #40	; 0x28
2405ce00:	2101      	movs	r1, #1
2405ce02:	4618      	mov	r0, r3
2405ce04:	f001 fe96 	bl	2405eb34 <RCCEx_PLL3_Config>
2405ce08:	4603      	mov	r3, r0
2405ce0a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
2405ce0e:	e004      	b.n	2405ce1a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405ce10:	2301      	movs	r3, #1
2405ce12:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405ce16:	e000      	b.n	2405ce1a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
2405ce18:	bf00      	nop
    }

    if (ret == HAL_OK)
2405ce1a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405ce1e:	2b00      	cmp	r3, #0
2405ce20:	d10b      	bne.n	2405ce3a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
2405ce22:	4bc0      	ldr	r3, [pc, #768]	; (2405d124 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
2405ce24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405ce26:	f023 0138 	bic.w	r1, r3, #56	; 0x38
2405ce2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405ce2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405ce32:	4abc      	ldr	r2, [pc, #752]	; (2405d124 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
2405ce34:	430b      	orrs	r3, r1
2405ce36:	6553      	str	r3, [r2, #84]	; 0x54
2405ce38:	e003      	b.n	2405ce42 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405ce3a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405ce3e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
2405ce42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405ce46:	e9d3 2300 	ldrd	r2, r3, [r3]
2405ce4a:	f002 0302 	and.w	r3, r2, #2
2405ce4e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
2405ce52:	2300      	movs	r3, #0
2405ce54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
2405ce58:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
2405ce5c:	460b      	mov	r3, r1
2405ce5e:	4313      	orrs	r3, r2
2405ce60:	d043      	beq.n	2405ceea <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
2405ce62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405ce66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405ce6a:	2b05      	cmp	r3, #5
2405ce6c:	d824      	bhi.n	2405ceb8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
2405ce6e:	a201      	add	r2, pc, #4	; (adr r2, 2405ce74 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
2405ce70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2405ce74:	2405cec1 	.word	0x2405cec1
2405ce78:	2405ce8d 	.word	0x2405ce8d
2405ce7c:	2405cea3 	.word	0x2405cea3
2405ce80:	2405cec1 	.word	0x2405cec1
2405ce84:	2405cec1 	.word	0x2405cec1
2405ce88:	2405cec1 	.word	0x2405cec1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
2405ce8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405ce90:	3308      	adds	r3, #8
2405ce92:	2101      	movs	r1, #1
2405ce94:	4618      	mov	r0, r3
2405ce96:	f001 fd9b 	bl	2405e9d0 <RCCEx_PLL2_Config>
2405ce9a:	4603      	mov	r3, r0
2405ce9c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
2405cea0:	e00f      	b.n	2405cec2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2405cea2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405cea6:	3328      	adds	r3, #40	; 0x28
2405cea8:	2101      	movs	r1, #1
2405ceaa:	4618      	mov	r0, r3
2405ceac:	f001 fe42 	bl	2405eb34 <RCCEx_PLL3_Config>
2405ceb0:	4603      	mov	r3, r0
2405ceb2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
2405ceb6:	e004      	b.n	2405cec2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405ceb8:	2301      	movs	r3, #1
2405ceba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405cebe:	e000      	b.n	2405cec2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
2405cec0:	bf00      	nop
    }

    if (ret == HAL_OK)
2405cec2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405cec6:	2b00      	cmp	r3, #0
2405cec8:	d10b      	bne.n	2405cee2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
2405ceca:	4b96      	ldr	r3, [pc, #600]	; (2405d124 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
2405cecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405cece:	f023 0107 	bic.w	r1, r3, #7
2405ced2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405ced6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405ceda:	4a92      	ldr	r2, [pc, #584]	; (2405d124 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
2405cedc:	430b      	orrs	r3, r1
2405cede:	6553      	str	r3, [r2, #84]	; 0x54
2405cee0:	e003      	b.n	2405ceea <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405cee2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405cee6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
2405ceea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405ceee:	e9d3 2300 	ldrd	r2, r3, [r3]
2405cef2:	f002 0304 	and.w	r3, r2, #4
2405cef6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
2405cefa:	2300      	movs	r3, #0
2405cefc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
2405cf00:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
2405cf04:	460b      	mov	r3, r1
2405cf06:	4313      	orrs	r3, r2
2405cf08:	d043      	beq.n	2405cf92 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
2405cf0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405cf0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
2405cf12:	2b05      	cmp	r3, #5
2405cf14:	d824      	bhi.n	2405cf60 <HAL_RCCEx_PeriphCLKConfig+0xadc>
2405cf16:	a201      	add	r2, pc, #4	; (adr r2, 2405cf1c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
2405cf18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2405cf1c:	2405cf69 	.word	0x2405cf69
2405cf20:	2405cf35 	.word	0x2405cf35
2405cf24:	2405cf4b 	.word	0x2405cf4b
2405cf28:	2405cf69 	.word	0x2405cf69
2405cf2c:	2405cf69 	.word	0x2405cf69
2405cf30:	2405cf69 	.word	0x2405cf69
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
2405cf34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405cf38:	3308      	adds	r3, #8
2405cf3a:	2101      	movs	r1, #1
2405cf3c:	4618      	mov	r0, r3
2405cf3e:	f001 fd47 	bl	2405e9d0 <RCCEx_PLL2_Config>
2405cf42:	4603      	mov	r3, r0
2405cf44:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
2405cf48:	e00f      	b.n	2405cf6a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2405cf4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405cf4e:	3328      	adds	r3, #40	; 0x28
2405cf50:	2101      	movs	r1, #1
2405cf52:	4618      	mov	r0, r3
2405cf54:	f001 fdee 	bl	2405eb34 <RCCEx_PLL3_Config>
2405cf58:	4603      	mov	r3, r0
2405cf5a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
2405cf5e:	e004      	b.n	2405cf6a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405cf60:	2301      	movs	r3, #1
2405cf62:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405cf66:	e000      	b.n	2405cf6a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
2405cf68:	bf00      	nop
    }

    if (ret == HAL_OK)
2405cf6a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405cf6e:	2b00      	cmp	r3, #0
2405cf70:	d10b      	bne.n	2405cf8a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
2405cf72:	4b6c      	ldr	r3, [pc, #432]	; (2405d124 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
2405cf74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405cf76:	f023 0107 	bic.w	r1, r3, #7
2405cf7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405cf7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
2405cf82:	4a68      	ldr	r2, [pc, #416]	; (2405d124 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
2405cf84:	430b      	orrs	r3, r1
2405cf86:	6593      	str	r3, [r2, #88]	; 0x58
2405cf88:	e003      	b.n	2405cf92 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405cf8a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405cf8e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
2405cf92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405cf96:	e9d3 2300 	ldrd	r2, r3, [r3]
2405cf9a:	f002 0320 	and.w	r3, r2, #32
2405cf9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
2405cfa2:	2300      	movs	r3, #0
2405cfa4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
2405cfa8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
2405cfac:	460b      	mov	r3, r1
2405cfae:	4313      	orrs	r3, r2
2405cfb0:	d055      	beq.n	2405d05e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
2405cfb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405cfb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
2405cfba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
2405cfbe:	d033      	beq.n	2405d028 <HAL_RCCEx_PeriphCLKConfig+0xba4>
2405cfc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
2405cfc4:	d82c      	bhi.n	2405d020 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
2405cfc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2405cfca:	d02f      	beq.n	2405d02c <HAL_RCCEx_PeriphCLKConfig+0xba8>
2405cfcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2405cfd0:	d826      	bhi.n	2405d020 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
2405cfd2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
2405cfd6:	d02b      	beq.n	2405d030 <HAL_RCCEx_PeriphCLKConfig+0xbac>
2405cfd8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
2405cfdc:	d820      	bhi.n	2405d020 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
2405cfde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405cfe2:	d012      	beq.n	2405d00a <HAL_RCCEx_PeriphCLKConfig+0xb86>
2405cfe4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405cfe8:	d81a      	bhi.n	2405d020 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
2405cfea:	2b00      	cmp	r3, #0
2405cfec:	d022      	beq.n	2405d034 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
2405cfee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2405cff2:	d115      	bne.n	2405d020 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2405cff4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405cff8:	3308      	adds	r3, #8
2405cffa:	2100      	movs	r1, #0
2405cffc:	4618      	mov	r0, r3
2405cffe:	f001 fce7 	bl	2405e9d0 <RCCEx_PLL2_Config>
2405d002:	4603      	mov	r3, r0
2405d004:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
2405d008:	e015      	b.n	2405d036 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2405d00a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d00e:	3328      	adds	r3, #40	; 0x28
2405d010:	2102      	movs	r1, #2
2405d012:	4618      	mov	r0, r3
2405d014:	f001 fd8e 	bl	2405eb34 <RCCEx_PLL3_Config>
2405d018:	4603      	mov	r3, r0
2405d01a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
2405d01e:	e00a      	b.n	2405d036 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405d020:	2301      	movs	r3, #1
2405d022:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405d026:	e006      	b.n	2405d036 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
2405d028:	bf00      	nop
2405d02a:	e004      	b.n	2405d036 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
2405d02c:	bf00      	nop
2405d02e:	e002      	b.n	2405d036 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
2405d030:	bf00      	nop
2405d032:	e000      	b.n	2405d036 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
2405d034:	bf00      	nop
    }

    if (ret == HAL_OK)
2405d036:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d03a:	2b00      	cmp	r3, #0
2405d03c:	d10b      	bne.n	2405d056 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
2405d03e:	4b39      	ldr	r3, [pc, #228]	; (2405d124 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
2405d040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405d042:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
2405d046:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d04a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
2405d04e:	4a35      	ldr	r2, [pc, #212]	; (2405d124 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
2405d050:	430b      	orrs	r3, r1
2405d052:	6553      	str	r3, [r2, #84]	; 0x54
2405d054:	e003      	b.n	2405d05e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405d056:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d05a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
2405d05e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d062:	e9d3 2300 	ldrd	r2, r3, [r3]
2405d066:	f002 0340 	and.w	r3, r2, #64	; 0x40
2405d06a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
2405d06e:	2300      	movs	r3, #0
2405d070:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
2405d074:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
2405d078:	460b      	mov	r3, r1
2405d07a:	4313      	orrs	r3, r2
2405d07c:	d058      	beq.n	2405d130 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
2405d07e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d082:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
2405d086:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
2405d08a:	d033      	beq.n	2405d0f4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
2405d08c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
2405d090:	d82c      	bhi.n	2405d0ec <HAL_RCCEx_PeriphCLKConfig+0xc68>
2405d092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
2405d096:	d02f      	beq.n	2405d0f8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
2405d098:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
2405d09c:	d826      	bhi.n	2405d0ec <HAL_RCCEx_PeriphCLKConfig+0xc68>
2405d09e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
2405d0a2:	d02b      	beq.n	2405d0fc <HAL_RCCEx_PeriphCLKConfig+0xc78>
2405d0a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
2405d0a8:	d820      	bhi.n	2405d0ec <HAL_RCCEx_PeriphCLKConfig+0xc68>
2405d0aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
2405d0ae:	d012      	beq.n	2405d0d6 <HAL_RCCEx_PeriphCLKConfig+0xc52>
2405d0b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
2405d0b4:	d81a      	bhi.n	2405d0ec <HAL_RCCEx_PeriphCLKConfig+0xc68>
2405d0b6:	2b00      	cmp	r3, #0
2405d0b8:	d022      	beq.n	2405d100 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
2405d0ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
2405d0be:	d115      	bne.n	2405d0ec <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2405d0c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d0c4:	3308      	adds	r3, #8
2405d0c6:	2100      	movs	r1, #0
2405d0c8:	4618      	mov	r0, r3
2405d0ca:	f001 fc81 	bl	2405e9d0 <RCCEx_PLL2_Config>
2405d0ce:	4603      	mov	r3, r0
2405d0d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
2405d0d4:	e015      	b.n	2405d102 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2405d0d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d0da:	3328      	adds	r3, #40	; 0x28
2405d0dc:	2102      	movs	r1, #2
2405d0de:	4618      	mov	r0, r3
2405d0e0:	f001 fd28 	bl	2405eb34 <RCCEx_PLL3_Config>
2405d0e4:	4603      	mov	r3, r0
2405d0e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
2405d0ea:	e00a      	b.n	2405d102 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405d0ec:	2301      	movs	r3, #1
2405d0ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405d0f2:	e006      	b.n	2405d102 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
2405d0f4:	bf00      	nop
2405d0f6:	e004      	b.n	2405d102 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
2405d0f8:	bf00      	nop
2405d0fa:	e002      	b.n	2405d102 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
2405d0fc:	bf00      	nop
2405d0fe:	e000      	b.n	2405d102 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
2405d100:	bf00      	nop
    }

    if (ret == HAL_OK)
2405d102:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d106:	2b00      	cmp	r3, #0
2405d108:	d10e      	bne.n	2405d128 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
2405d10a:	4b06      	ldr	r3, [pc, #24]	; (2405d124 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
2405d10c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405d10e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
2405d112:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d116:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
2405d11a:	4a02      	ldr	r2, [pc, #8]	; (2405d124 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
2405d11c:	430b      	orrs	r3, r1
2405d11e:	6593      	str	r3, [r2, #88]	; 0x58
2405d120:	e006      	b.n	2405d130 <HAL_RCCEx_PeriphCLKConfig+0xcac>
2405d122:	bf00      	nop
2405d124:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
2405d128:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d12c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
2405d130:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d134:	e9d3 2300 	ldrd	r2, r3, [r3]
2405d138:	f002 0380 	and.w	r3, r2, #128	; 0x80
2405d13c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
2405d140:	2300      	movs	r3, #0
2405d142:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
2405d146:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
2405d14a:	460b      	mov	r3, r1
2405d14c:	4313      	orrs	r3, r2
2405d14e:	d055      	beq.n	2405d1fc <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
2405d150:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d154:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
2405d158:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
2405d15c:	d033      	beq.n	2405d1c6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
2405d15e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
2405d162:	d82c      	bhi.n	2405d1be <HAL_RCCEx_PeriphCLKConfig+0xd3a>
2405d164:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2405d168:	d02f      	beq.n	2405d1ca <HAL_RCCEx_PeriphCLKConfig+0xd46>
2405d16a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2405d16e:	d826      	bhi.n	2405d1be <HAL_RCCEx_PeriphCLKConfig+0xd3a>
2405d170:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
2405d174:	d02b      	beq.n	2405d1ce <HAL_RCCEx_PeriphCLKConfig+0xd4a>
2405d176:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
2405d17a:	d820      	bhi.n	2405d1be <HAL_RCCEx_PeriphCLKConfig+0xd3a>
2405d17c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2405d180:	d012      	beq.n	2405d1a8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
2405d182:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2405d186:	d81a      	bhi.n	2405d1be <HAL_RCCEx_PeriphCLKConfig+0xd3a>
2405d188:	2b00      	cmp	r3, #0
2405d18a:	d022      	beq.n	2405d1d2 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
2405d18c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2405d190:	d115      	bne.n	2405d1be <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2405d192:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d196:	3308      	adds	r3, #8
2405d198:	2100      	movs	r1, #0
2405d19a:	4618      	mov	r0, r3
2405d19c:	f001 fc18 	bl	2405e9d0 <RCCEx_PLL2_Config>
2405d1a0:	4603      	mov	r3, r0
2405d1a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
2405d1a6:	e015      	b.n	2405d1d4 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2405d1a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d1ac:	3328      	adds	r3, #40	; 0x28
2405d1ae:	2102      	movs	r1, #2
2405d1b0:	4618      	mov	r0, r3
2405d1b2:	f001 fcbf 	bl	2405eb34 <RCCEx_PLL3_Config>
2405d1b6:	4603      	mov	r3, r0
2405d1b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
2405d1bc:	e00a      	b.n	2405d1d4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405d1be:	2301      	movs	r3, #1
2405d1c0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405d1c4:	e006      	b.n	2405d1d4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
2405d1c6:	bf00      	nop
2405d1c8:	e004      	b.n	2405d1d4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
2405d1ca:	bf00      	nop
2405d1cc:	e002      	b.n	2405d1d4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
2405d1ce:	bf00      	nop
2405d1d0:	e000      	b.n	2405d1d4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
2405d1d2:	bf00      	nop
    }

    if (ret == HAL_OK)
2405d1d4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d1d8:	2b00      	cmp	r3, #0
2405d1da:	d10b      	bne.n	2405d1f4 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
2405d1dc:	4ba1      	ldr	r3, [pc, #644]	; (2405d464 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405d1de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405d1e0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
2405d1e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d1e8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
2405d1ec:	4a9d      	ldr	r2, [pc, #628]	; (2405d464 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405d1ee:	430b      	orrs	r3, r1
2405d1f0:	6593      	str	r3, [r2, #88]	; 0x58
2405d1f2:	e003      	b.n	2405d1fc <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405d1f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d1f8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
2405d1fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d200:	e9d3 2300 	ldrd	r2, r3, [r3]
2405d204:	f002 0308 	and.w	r3, r2, #8
2405d208:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
2405d20c:	2300      	movs	r3, #0
2405d20e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
2405d212:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
2405d216:	460b      	mov	r3, r1
2405d218:	4313      	orrs	r3, r2
2405d21a:	d01e      	beq.n	2405d25a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
2405d21c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d220:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
2405d224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
2405d228:	d10c      	bne.n	2405d244 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
2405d22a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d22e:	3328      	adds	r3, #40	; 0x28
2405d230:	2102      	movs	r1, #2
2405d232:	4618      	mov	r0, r3
2405d234:	f001 fc7e 	bl	2405eb34 <RCCEx_PLL3_Config>
2405d238:	4603      	mov	r3, r0
2405d23a:	2b00      	cmp	r3, #0
2405d23c:	d002      	beq.n	2405d244 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
2405d23e:	2301      	movs	r3, #1
2405d240:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
2405d244:	4b87      	ldr	r3, [pc, #540]	; (2405d464 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405d246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405d248:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
2405d24c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
2405d254:	4a83      	ldr	r2, [pc, #524]	; (2405d464 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405d256:	430b      	orrs	r3, r1
2405d258:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
2405d25a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d25e:	e9d3 2300 	ldrd	r2, r3, [r3]
2405d262:	f002 0310 	and.w	r3, r2, #16
2405d266:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
2405d26a:	2300      	movs	r3, #0
2405d26c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
2405d270:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
2405d274:	460b      	mov	r3, r1
2405d276:	4313      	orrs	r3, r2
2405d278:	d01e      	beq.n	2405d2b8 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
2405d27a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d27e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
2405d282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405d286:	d10c      	bne.n	2405d2a2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
2405d288:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d28c:	3328      	adds	r3, #40	; 0x28
2405d28e:	2102      	movs	r1, #2
2405d290:	4618      	mov	r0, r3
2405d292:	f001 fc4f 	bl	2405eb34 <RCCEx_PLL3_Config>
2405d296:	4603      	mov	r3, r0
2405d298:	2b00      	cmp	r3, #0
2405d29a:	d002      	beq.n	2405d2a2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
2405d29c:	2301      	movs	r3, #1
2405d29e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
2405d2a2:	4b70      	ldr	r3, [pc, #448]	; (2405d464 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405d2a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405d2a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
2405d2aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d2ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
2405d2b2:	4a6c      	ldr	r2, [pc, #432]	; (2405d464 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405d2b4:	430b      	orrs	r3, r1
2405d2b6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
2405d2b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
2405d2c0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
2405d2c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
2405d2c8:	2300      	movs	r3, #0
2405d2ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
2405d2ce:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
2405d2d2:	460b      	mov	r3, r1
2405d2d4:	4313      	orrs	r3, r2
2405d2d6:	d03e      	beq.n	2405d356 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
2405d2d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d2dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
2405d2e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405d2e4:	d022      	beq.n	2405d32c <HAL_RCCEx_PeriphCLKConfig+0xea8>
2405d2e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405d2ea:	d81b      	bhi.n	2405d324 <HAL_RCCEx_PeriphCLKConfig+0xea0>
2405d2ec:	2b00      	cmp	r3, #0
2405d2ee:	d003      	beq.n	2405d2f8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
2405d2f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2405d2f4:	d00b      	beq.n	2405d30e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
2405d2f6:	e015      	b.n	2405d324 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2405d2f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d2fc:	3308      	adds	r3, #8
2405d2fe:	2100      	movs	r1, #0
2405d300:	4618      	mov	r0, r3
2405d302:	f001 fb65 	bl	2405e9d0 <RCCEx_PLL2_Config>
2405d306:	4603      	mov	r3, r0
2405d308:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
2405d30c:	e00f      	b.n	2405d32e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2405d30e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d312:	3328      	adds	r3, #40	; 0x28
2405d314:	2102      	movs	r1, #2
2405d316:	4618      	mov	r0, r3
2405d318:	f001 fc0c 	bl	2405eb34 <RCCEx_PLL3_Config>
2405d31c:	4603      	mov	r3, r0
2405d31e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
2405d322:	e004      	b.n	2405d32e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405d324:	2301      	movs	r3, #1
2405d326:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405d32a:	e000      	b.n	2405d32e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
2405d32c:	bf00      	nop
    }

    if (ret == HAL_OK)
2405d32e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d332:	2b00      	cmp	r3, #0
2405d334:	d10b      	bne.n	2405d34e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
2405d336:	4b4b      	ldr	r3, [pc, #300]	; (2405d464 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405d338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405d33a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
2405d33e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d342:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
2405d346:	4a47      	ldr	r2, [pc, #284]	; (2405d464 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405d348:	430b      	orrs	r3, r1
2405d34a:	6593      	str	r3, [r2, #88]	; 0x58
2405d34c:	e003      	b.n	2405d356 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405d34e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d352:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
2405d356:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d35a:	e9d3 2300 	ldrd	r2, r3, [r3]
2405d35e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
2405d362:	67bb      	str	r3, [r7, #120]	; 0x78
2405d364:	2300      	movs	r3, #0
2405d366:	67fb      	str	r3, [r7, #124]	; 0x7c
2405d368:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
2405d36c:	460b      	mov	r3, r1
2405d36e:	4313      	orrs	r3, r2
2405d370:	d03b      	beq.n	2405d3ea <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
2405d372:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
2405d37a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
2405d37e:	d01f      	beq.n	2405d3c0 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
2405d380:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
2405d384:	d818      	bhi.n	2405d3b8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
2405d386:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
2405d38a:	d003      	beq.n	2405d394 <HAL_RCCEx_PeriphCLKConfig+0xf10>
2405d38c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
2405d390:	d007      	beq.n	2405d3a2 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
2405d392:	e011      	b.n	2405d3b8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405d394:	4b33      	ldr	r3, [pc, #204]	; (2405d464 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405d396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405d398:	4a32      	ldr	r2, [pc, #200]	; (2405d464 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405d39a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2405d39e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
2405d3a0:	e00f      	b.n	2405d3c2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2405d3a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d3a6:	3328      	adds	r3, #40	; 0x28
2405d3a8:	2101      	movs	r1, #1
2405d3aa:	4618      	mov	r0, r3
2405d3ac:	f001 fbc2 	bl	2405eb34 <RCCEx_PLL3_Config>
2405d3b0:	4603      	mov	r3, r0
2405d3b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
2405d3b6:	e004      	b.n	2405d3c2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405d3b8:	2301      	movs	r3, #1
2405d3ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405d3be:	e000      	b.n	2405d3c2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
2405d3c0:	bf00      	nop
    }

    if (ret == HAL_OK)
2405d3c2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d3c6:	2b00      	cmp	r3, #0
2405d3c8:	d10b      	bne.n	2405d3e2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
2405d3ca:	4b26      	ldr	r3, [pc, #152]	; (2405d464 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405d3cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405d3ce:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
2405d3d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d3d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
2405d3da:	4a22      	ldr	r2, [pc, #136]	; (2405d464 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405d3dc:	430b      	orrs	r3, r1
2405d3de:	6553      	str	r3, [r2, #84]	; 0x54
2405d3e0:	e003      	b.n	2405d3ea <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405d3e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d3e6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
2405d3ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
2405d3f2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
2405d3f6:	673b      	str	r3, [r7, #112]	; 0x70
2405d3f8:	2300      	movs	r3, #0
2405d3fa:	677b      	str	r3, [r7, #116]	; 0x74
2405d3fc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
2405d400:	460b      	mov	r3, r1
2405d402:	4313      	orrs	r3, r2
2405d404:	d034      	beq.n	2405d470 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
2405d406:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d40a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405d40c:	2b00      	cmp	r3, #0
2405d40e:	d003      	beq.n	2405d418 <HAL_RCCEx_PeriphCLKConfig+0xf94>
2405d410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2405d414:	d007      	beq.n	2405d426 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
2405d416:	e011      	b.n	2405d43c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405d418:	4b12      	ldr	r3, [pc, #72]	; (2405d464 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405d41a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405d41c:	4a11      	ldr	r2, [pc, #68]	; (2405d464 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405d41e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2405d422:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
2405d424:	e00e      	b.n	2405d444 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
2405d426:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d42a:	3308      	adds	r3, #8
2405d42c:	2102      	movs	r1, #2
2405d42e:	4618      	mov	r0, r3
2405d430:	f001 face 	bl	2405e9d0 <RCCEx_PLL2_Config>
2405d434:	4603      	mov	r3, r0
2405d436:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
2405d43a:	e003      	b.n	2405d444 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
2405d43c:	2301      	movs	r3, #1
2405d43e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405d442:	bf00      	nop
    }

    if (ret == HAL_OK)
2405d444:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d448:	2b00      	cmp	r3, #0
2405d44a:	d10d      	bne.n	2405d468 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
2405d44c:	4b05      	ldr	r3, [pc, #20]	; (2405d464 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405d44e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405d450:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
2405d454:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d458:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405d45a:	4a02      	ldr	r2, [pc, #8]	; (2405d464 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
2405d45c:	430b      	orrs	r3, r1
2405d45e:	64d3      	str	r3, [r2, #76]	; 0x4c
2405d460:	e006      	b.n	2405d470 <HAL_RCCEx_PeriphCLKConfig+0xfec>
2405d462:	bf00      	nop
2405d464:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
2405d468:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d46c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
2405d470:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d474:	e9d3 2300 	ldrd	r2, r3, [r3]
2405d478:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
2405d47c:	66bb      	str	r3, [r7, #104]	; 0x68
2405d47e:	2300      	movs	r3, #0
2405d480:	66fb      	str	r3, [r7, #108]	; 0x6c
2405d482:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
2405d486:	460b      	mov	r3, r1
2405d488:	4313      	orrs	r3, r2
2405d48a:	d00c      	beq.n	2405d4a6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
2405d48c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d490:	3328      	adds	r3, #40	; 0x28
2405d492:	2102      	movs	r1, #2
2405d494:	4618      	mov	r0, r3
2405d496:	f001 fb4d 	bl	2405eb34 <RCCEx_PLL3_Config>
2405d49a:	4603      	mov	r3, r0
2405d49c:	2b00      	cmp	r3, #0
2405d49e:	d002      	beq.n	2405d4a6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
2405d4a0:	2301      	movs	r3, #1
2405d4a2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
2405d4a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
2405d4ae:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
2405d4b2:	663b      	str	r3, [r7, #96]	; 0x60
2405d4b4:	2300      	movs	r3, #0
2405d4b6:	667b      	str	r3, [r7, #100]	; 0x64
2405d4b8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
2405d4bc:	460b      	mov	r3, r1
2405d4be:	4313      	orrs	r3, r2
2405d4c0:	d038      	beq.n	2405d534 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
2405d4c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d4c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
2405d4ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
2405d4ce:	d018      	beq.n	2405d502 <HAL_RCCEx_PeriphCLKConfig+0x107e>
2405d4d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
2405d4d4:	d811      	bhi.n	2405d4fa <HAL_RCCEx_PeriphCLKConfig+0x1076>
2405d4d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
2405d4da:	d014      	beq.n	2405d506 <HAL_RCCEx_PeriphCLKConfig+0x1082>
2405d4dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
2405d4e0:	d80b      	bhi.n	2405d4fa <HAL_RCCEx_PeriphCLKConfig+0x1076>
2405d4e2:	2b00      	cmp	r3, #0
2405d4e4:	d011      	beq.n	2405d50a <HAL_RCCEx_PeriphCLKConfig+0x1086>
2405d4e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405d4ea:	d106      	bne.n	2405d4fa <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405d4ec:	4bc3      	ldr	r3, [pc, #780]	; (2405d7fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405d4ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405d4f0:	4ac2      	ldr	r2, [pc, #776]	; (2405d7fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405d4f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2405d4f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
2405d4f8:	e008      	b.n	2405d50c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
2405d4fa:	2301      	movs	r3, #1
2405d4fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
2405d500:	e004      	b.n	2405d50c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
2405d502:	bf00      	nop
2405d504:	e002      	b.n	2405d50c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
2405d506:	bf00      	nop
2405d508:	e000      	b.n	2405d50c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
2405d50a:	bf00      	nop
    }

    if (ret == HAL_OK)
2405d50c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d510:	2b00      	cmp	r3, #0
2405d512:	d10b      	bne.n	2405d52c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
2405d514:	4bb9      	ldr	r3, [pc, #740]	; (2405d7fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405d516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405d518:	f423 7140 	bic.w	r1, r3, #768	; 0x300
2405d51c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
2405d524:	4ab5      	ldr	r2, [pc, #724]	; (2405d7fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405d526:	430b      	orrs	r3, r1
2405d528:	6553      	str	r3, [r2, #84]	; 0x54
2405d52a:	e003      	b.n	2405d534 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405d52c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d530:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
2405d534:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d538:	e9d3 2300 	ldrd	r2, r3, [r3]
2405d53c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
2405d540:	65bb      	str	r3, [r7, #88]	; 0x58
2405d542:	2300      	movs	r3, #0
2405d544:	65fb      	str	r3, [r7, #92]	; 0x5c
2405d546:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
2405d54a:	460b      	mov	r3, r1
2405d54c:	4313      	orrs	r3, r2
2405d54e:	d009      	beq.n	2405d564 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
2405d550:	4baa      	ldr	r3, [pc, #680]	; (2405d7fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405d552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405d554:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
2405d558:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d55c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
2405d55e:	4aa7      	ldr	r2, [pc, #668]	; (2405d7fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405d560:	430b      	orrs	r3, r1
2405d562:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
2405d564:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d568:	e9d3 2300 	ldrd	r2, r3, [r3]
2405d56c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
2405d570:	653b      	str	r3, [r7, #80]	; 0x50
2405d572:	2300      	movs	r3, #0
2405d574:	657b      	str	r3, [r7, #84]	; 0x54
2405d576:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
2405d57a:	460b      	mov	r3, r1
2405d57c:	4313      	orrs	r3, r2
2405d57e:	d009      	beq.n	2405d594 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
2405d580:	4b9e      	ldr	r3, [pc, #632]	; (2405d7fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405d582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405d584:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
2405d588:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d58c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405d58e:	4a9b      	ldr	r2, [pc, #620]	; (2405d7fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405d590:	430b      	orrs	r3, r1
2405d592:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
2405d594:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d598:	e9d3 2300 	ldrd	r2, r3, [r3]
2405d59c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
2405d5a0:	64bb      	str	r3, [r7, #72]	; 0x48
2405d5a2:	2300      	movs	r3, #0
2405d5a4:	64fb      	str	r3, [r7, #76]	; 0x4c
2405d5a6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
2405d5aa:	460b      	mov	r3, r1
2405d5ac:	4313      	orrs	r3, r2
2405d5ae:	d009      	beq.n	2405d5c4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
2405d5b0:	4b92      	ldr	r3, [pc, #584]	; (2405d7fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405d5b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405d5b4:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
2405d5b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d5bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2405d5be:	4a8f      	ldr	r2, [pc, #572]	; (2405d7fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405d5c0:	430b      	orrs	r3, r1
2405d5c2:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
2405d5c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
2405d5cc:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
2405d5d0:	643b      	str	r3, [r7, #64]	; 0x40
2405d5d2:	2300      	movs	r3, #0
2405d5d4:	647b      	str	r3, [r7, #68]	; 0x44
2405d5d6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
2405d5da:	460b      	mov	r3, r1
2405d5dc:	4313      	orrs	r3, r2
2405d5de:	d00e      	beq.n	2405d5fe <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
2405d5e0:	4b86      	ldr	r3, [pc, #536]	; (2405d7fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405d5e2:	691b      	ldr	r3, [r3, #16]
2405d5e4:	4a85      	ldr	r2, [pc, #532]	; (2405d7fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405d5e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
2405d5ea:	6113      	str	r3, [r2, #16]
2405d5ec:	4b83      	ldr	r3, [pc, #524]	; (2405d7fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405d5ee:	6919      	ldr	r1, [r3, #16]
2405d5f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d5f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
2405d5f8:	4a80      	ldr	r2, [pc, #512]	; (2405d7fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405d5fa:	430b      	orrs	r3, r1
2405d5fc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
2405d5fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d602:	e9d3 2300 	ldrd	r2, r3, [r3]
2405d606:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
2405d60a:	63bb      	str	r3, [r7, #56]	; 0x38
2405d60c:	2300      	movs	r3, #0
2405d60e:	63fb      	str	r3, [r7, #60]	; 0x3c
2405d610:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
2405d614:	460b      	mov	r3, r1
2405d616:	4313      	orrs	r3, r2
2405d618:	d009      	beq.n	2405d62e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
2405d61a:	4b78      	ldr	r3, [pc, #480]	; (2405d7fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405d61c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405d61e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
2405d622:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405d628:	4a74      	ldr	r2, [pc, #464]	; (2405d7fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405d62a:	430b      	orrs	r3, r1
2405d62c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
2405d62e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d632:	e9d3 2300 	ldrd	r2, r3, [r3]
2405d636:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
2405d63a:	633b      	str	r3, [r7, #48]	; 0x30
2405d63c:	2300      	movs	r3, #0
2405d63e:	637b      	str	r3, [r7, #52]	; 0x34
2405d640:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
2405d644:	460b      	mov	r3, r1
2405d646:	4313      	orrs	r3, r2
2405d648:	d00a      	beq.n	2405d660 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
2405d64a:	4b6c      	ldr	r3, [pc, #432]	; (2405d7fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405d64c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405d64e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
2405d652:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d656:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405d65a:	4a68      	ldr	r2, [pc, #416]	; (2405d7fc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
2405d65c:	430b      	orrs	r3, r1
2405d65e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
2405d660:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d664:	e9d3 2300 	ldrd	r2, r3, [r3]
2405d668:	2100      	movs	r1, #0
2405d66a:	62b9      	str	r1, [r7, #40]	; 0x28
2405d66c:	f003 0301 	and.w	r3, r3, #1
2405d670:	62fb      	str	r3, [r7, #44]	; 0x2c
2405d672:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
2405d676:	460b      	mov	r3, r1
2405d678:	4313      	orrs	r3, r2
2405d67a:	d011      	beq.n	2405d6a0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2405d67c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d680:	3308      	adds	r3, #8
2405d682:	2100      	movs	r1, #0
2405d684:	4618      	mov	r0, r3
2405d686:	f001 f9a3 	bl	2405e9d0 <RCCEx_PLL2_Config>
2405d68a:	4603      	mov	r3, r0
2405d68c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
2405d690:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d694:	2b00      	cmp	r3, #0
2405d696:	d003      	beq.n	2405d6a0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
2405d698:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d69c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
2405d6a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
2405d6a8:	2100      	movs	r1, #0
2405d6aa:	6239      	str	r1, [r7, #32]
2405d6ac:	f003 0302 	and.w	r3, r3, #2
2405d6b0:	627b      	str	r3, [r7, #36]	; 0x24
2405d6b2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
2405d6b6:	460b      	mov	r3, r1
2405d6b8:	4313      	orrs	r3, r2
2405d6ba:	d011      	beq.n	2405d6e0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
2405d6bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d6c0:	3308      	adds	r3, #8
2405d6c2:	2101      	movs	r1, #1
2405d6c4:	4618      	mov	r0, r3
2405d6c6:	f001 f983 	bl	2405e9d0 <RCCEx_PLL2_Config>
2405d6ca:	4603      	mov	r3, r0
2405d6cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
2405d6d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d6d4:	2b00      	cmp	r3, #0
2405d6d6:	d003      	beq.n	2405d6e0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
2405d6d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d6dc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
2405d6e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
2405d6e8:	2100      	movs	r1, #0
2405d6ea:	61b9      	str	r1, [r7, #24]
2405d6ec:	f003 0304 	and.w	r3, r3, #4
2405d6f0:	61fb      	str	r3, [r7, #28]
2405d6f2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
2405d6f6:	460b      	mov	r3, r1
2405d6f8:	4313      	orrs	r3, r2
2405d6fa:	d011      	beq.n	2405d720 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
2405d6fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d700:	3308      	adds	r3, #8
2405d702:	2102      	movs	r1, #2
2405d704:	4618      	mov	r0, r3
2405d706:	f001 f963 	bl	2405e9d0 <RCCEx_PLL2_Config>
2405d70a:	4603      	mov	r3, r0
2405d70c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
2405d710:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d714:	2b00      	cmp	r3, #0
2405d716:	d003      	beq.n	2405d720 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
2405d718:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d71c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
2405d720:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d724:	e9d3 2300 	ldrd	r2, r3, [r3]
2405d728:	2100      	movs	r1, #0
2405d72a:	6139      	str	r1, [r7, #16]
2405d72c:	f003 0308 	and.w	r3, r3, #8
2405d730:	617b      	str	r3, [r7, #20]
2405d732:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
2405d736:	460b      	mov	r3, r1
2405d738:	4313      	orrs	r3, r2
2405d73a:	d011      	beq.n	2405d760 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
2405d73c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d740:	3328      	adds	r3, #40	; 0x28
2405d742:	2100      	movs	r1, #0
2405d744:	4618      	mov	r0, r3
2405d746:	f001 f9f5 	bl	2405eb34 <RCCEx_PLL3_Config>
2405d74a:	4603      	mov	r3, r0
2405d74c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
2405d750:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d754:	2b00      	cmp	r3, #0
2405d756:	d003      	beq.n	2405d760 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
2405d758:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d75c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
2405d760:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d764:	e9d3 2300 	ldrd	r2, r3, [r3]
2405d768:	2100      	movs	r1, #0
2405d76a:	60b9      	str	r1, [r7, #8]
2405d76c:	f003 0310 	and.w	r3, r3, #16
2405d770:	60fb      	str	r3, [r7, #12]
2405d772:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
2405d776:	460b      	mov	r3, r1
2405d778:	4313      	orrs	r3, r2
2405d77a:	d011      	beq.n	2405d7a0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2405d77c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d780:	3328      	adds	r3, #40	; 0x28
2405d782:	2101      	movs	r1, #1
2405d784:	4618      	mov	r0, r3
2405d786:	f001 f9d5 	bl	2405eb34 <RCCEx_PLL3_Config>
2405d78a:	4603      	mov	r3, r0
2405d78c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
2405d790:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d794:	2b00      	cmp	r3, #0
2405d796:	d003      	beq.n	2405d7a0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
2405d798:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d79c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
2405d7a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
2405d7a8:	2100      	movs	r1, #0
2405d7aa:	6039      	str	r1, [r7, #0]
2405d7ac:	f003 0320 	and.w	r3, r3, #32
2405d7b0:	607b      	str	r3, [r7, #4]
2405d7b2:	e9d7 1200 	ldrd	r1, r2, [r7]
2405d7b6:	460b      	mov	r3, r1
2405d7b8:	4313      	orrs	r3, r2
2405d7ba:	d011      	beq.n	2405d7e0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2405d7bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
2405d7c0:	3328      	adds	r3, #40	; 0x28
2405d7c2:	2102      	movs	r1, #2
2405d7c4:	4618      	mov	r0, r3
2405d7c6:	f001 f9b5 	bl	2405eb34 <RCCEx_PLL3_Config>
2405d7ca:	4603      	mov	r3, r0
2405d7cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
2405d7d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d7d4:	2b00      	cmp	r3, #0
2405d7d6:	d003      	beq.n	2405d7e0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
2405d7d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
2405d7dc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
2405d7e0:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
2405d7e4:	2b00      	cmp	r3, #0
2405d7e6:	d101      	bne.n	2405d7ec <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
2405d7e8:	2300      	movs	r3, #0
2405d7ea:	e000      	b.n	2405d7ee <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
2405d7ec:	2301      	movs	r3, #1
}
2405d7ee:	4618      	mov	r0, r3
2405d7f0:	f507 7790 	add.w	r7, r7, #288	; 0x120
2405d7f4:	46bd      	mov	sp, r7
2405d7f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
2405d7fa:	bf00      	nop
2405d7fc:	58024400 	.word	0x58024400

2405d800 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
2405d800:	b580      	push	{r7, lr}
2405d802:	b090      	sub	sp, #64	; 0x40
2405d804:	af00      	add	r7, sp, #0
2405d806:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
2405d80a:	e9d7 2300 	ldrd	r2, r3, [r7]
2405d80e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
2405d812:	430b      	orrs	r3, r1
2405d814:	f040 8094 	bne.w	2405d940 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
2405d818:	4b97      	ldr	r3, [pc, #604]	; (2405da78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405d81a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405d81c:	f003 0307 	and.w	r3, r3, #7
2405d820:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
2405d822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405d824:	2b04      	cmp	r3, #4
2405d826:	f200 8087 	bhi.w	2405d938 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
2405d82a:	a201      	add	r2, pc, #4	; (adr r2, 2405d830 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
2405d82c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2405d830:	2405d845 	.word	0x2405d845
2405d834:	2405d86d 	.word	0x2405d86d
2405d838:	2405d895 	.word	0x2405d895
2405d83c:	2405d931 	.word	0x2405d931
2405d840:	2405d8bd 	.word	0x2405d8bd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
2405d844:	4b8c      	ldr	r3, [pc, #560]	; (2405da78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405d846:	681b      	ldr	r3, [r3, #0]
2405d848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2405d84c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2405d850:	d108      	bne.n	2405d864 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
2405d852:	f107 0324 	add.w	r3, r7, #36	; 0x24
2405d856:	4618      	mov	r0, r3
2405d858:	f000 ff68 	bl	2405e72c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
2405d85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
2405d85e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405d860:	f000 bc97 	b.w	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405d864:	2300      	movs	r3, #0
2405d866:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405d868:	f000 bc93 	b.w	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2405d86c:	4b82      	ldr	r3, [pc, #520]	; (2405da78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405d86e:	681b      	ldr	r3, [r3, #0]
2405d870:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2405d874:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
2405d878:	d108      	bne.n	2405d88c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2405d87a:	f107 0318 	add.w	r3, r7, #24
2405d87e:	4618      	mov	r0, r3
2405d880:	f000 fcac 	bl	2405e1dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
2405d884:	69bb      	ldr	r3, [r7, #24]
2405d886:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405d888:	f000 bc83 	b.w	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405d88c:	2300      	movs	r3, #0
2405d88e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405d890:	f000 bc7f 	b.w	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2405d894:	4b78      	ldr	r3, [pc, #480]	; (2405da78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405d896:	681b      	ldr	r3, [r3, #0]
2405d898:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2405d89c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405d8a0:	d108      	bne.n	2405d8b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2405d8a2:	f107 030c 	add.w	r3, r7, #12
2405d8a6:	4618      	mov	r0, r3
2405d8a8:	f000 fdec 	bl	2405e484 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
2405d8ac:	68fb      	ldr	r3, [r7, #12]
2405d8ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405d8b0:	f000 bc6f 	b.w	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405d8b4:	2300      	movs	r3, #0
2405d8b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405d8b8:	f000 bc6b 	b.w	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
2405d8bc:	4b6e      	ldr	r3, [pc, #440]	; (2405da78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405d8be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405d8c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
2405d8c4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
2405d8c6:	4b6c      	ldr	r3, [pc, #432]	; (2405da78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405d8c8:	681b      	ldr	r3, [r3, #0]
2405d8ca:	f003 0304 	and.w	r3, r3, #4
2405d8ce:	2b04      	cmp	r3, #4
2405d8d0:	d10c      	bne.n	2405d8ec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
2405d8d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405d8d4:	2b00      	cmp	r3, #0
2405d8d6:	d109      	bne.n	2405d8ec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2405d8d8:	4b67      	ldr	r3, [pc, #412]	; (2405da78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405d8da:	681b      	ldr	r3, [r3, #0]
2405d8dc:	08db      	lsrs	r3, r3, #3
2405d8de:	f003 0303 	and.w	r3, r3, #3
2405d8e2:	4a66      	ldr	r2, [pc, #408]	; (2405da7c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
2405d8e4:	fa22 f303 	lsr.w	r3, r2, r3
2405d8e8:	63fb      	str	r3, [r7, #60]	; 0x3c
2405d8ea:	e01f      	b.n	2405d92c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
2405d8ec:	4b62      	ldr	r3, [pc, #392]	; (2405da78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405d8ee:	681b      	ldr	r3, [r3, #0]
2405d8f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405d8f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405d8f8:	d106      	bne.n	2405d908 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
2405d8fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405d8fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2405d900:	d102      	bne.n	2405d908 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
2405d902:	4b5f      	ldr	r3, [pc, #380]	; (2405da80 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
2405d904:	63fb      	str	r3, [r7, #60]	; 0x3c
2405d906:	e011      	b.n	2405d92c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
2405d908:	4b5b      	ldr	r3, [pc, #364]	; (2405da78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405d90a:	681b      	ldr	r3, [r3, #0]
2405d90c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405d910:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405d914:	d106      	bne.n	2405d924 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
2405d916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405d918:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405d91c:	d102      	bne.n	2405d924 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
2405d91e:	4b59      	ldr	r3, [pc, #356]	; (2405da84 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
2405d920:	63fb      	str	r3, [r7, #60]	; 0x3c
2405d922:	e003      	b.n	2405d92c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
2405d924:	2300      	movs	r3, #0
2405d926:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
2405d928:	f000 bc33 	b.w	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
2405d92c:	f000 bc31 	b.w	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
2405d930:	4b55      	ldr	r3, [pc, #340]	; (2405da88 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
2405d932:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405d934:	f000 bc2d 	b.w	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
2405d938:	2300      	movs	r3, #0
2405d93a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405d93c:	f000 bc29 	b.w	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
2405d940:	e9d7 2300 	ldrd	r2, r3, [r7]
2405d944:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
2405d948:	430b      	orrs	r3, r1
2405d94a:	f040 809f 	bne.w	2405da8c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
2405d94e:	4b4a      	ldr	r3, [pc, #296]	; (2405da78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405d950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405d952:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
2405d956:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
2405d958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405d95a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405d95e:	d04d      	beq.n	2405d9fc <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
2405d960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405d962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405d966:	f200 8084 	bhi.w	2405da72 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
2405d96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405d96c:	2bc0      	cmp	r3, #192	; 0xc0
2405d96e:	d07d      	beq.n	2405da6c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
2405d970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405d972:	2bc0      	cmp	r3, #192	; 0xc0
2405d974:	d87d      	bhi.n	2405da72 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
2405d976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405d978:	2b80      	cmp	r3, #128	; 0x80
2405d97a:	d02d      	beq.n	2405d9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
2405d97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405d97e:	2b80      	cmp	r3, #128	; 0x80
2405d980:	d877      	bhi.n	2405da72 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
2405d982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405d984:	2b00      	cmp	r3, #0
2405d986:	d003      	beq.n	2405d990 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
2405d988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405d98a:	2b40      	cmp	r3, #64	; 0x40
2405d98c:	d012      	beq.n	2405d9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
2405d98e:	e070      	b.n	2405da72 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
2405d990:	4b39      	ldr	r3, [pc, #228]	; (2405da78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405d992:	681b      	ldr	r3, [r3, #0]
2405d994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2405d998:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2405d99c:	d107      	bne.n	2405d9ae <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
2405d99e:	f107 0324 	add.w	r3, r7, #36	; 0x24
2405d9a2:	4618      	mov	r0, r3
2405d9a4:	f000 fec2 	bl	2405e72c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
2405d9a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
2405d9aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405d9ac:	e3f1      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405d9ae:	2300      	movs	r3, #0
2405d9b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405d9b2:	e3ee      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2405d9b4:	4b30      	ldr	r3, [pc, #192]	; (2405da78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405d9b6:	681b      	ldr	r3, [r3, #0]
2405d9b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2405d9bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
2405d9c0:	d107      	bne.n	2405d9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2405d9c2:	f107 0318 	add.w	r3, r7, #24
2405d9c6:	4618      	mov	r0, r3
2405d9c8:	f000 fc08 	bl	2405e1dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
2405d9cc:	69bb      	ldr	r3, [r7, #24]
2405d9ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405d9d0:	e3df      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405d9d2:	2300      	movs	r3, #0
2405d9d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405d9d6:	e3dc      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2405d9d8:	4b27      	ldr	r3, [pc, #156]	; (2405da78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405d9da:	681b      	ldr	r3, [r3, #0]
2405d9dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2405d9e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405d9e4:	d107      	bne.n	2405d9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2405d9e6:	f107 030c 	add.w	r3, r7, #12
2405d9ea:	4618      	mov	r0, r3
2405d9ec:	f000 fd4a 	bl	2405e484 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
2405d9f0:	68fb      	ldr	r3, [r7, #12]
2405d9f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405d9f4:	e3cd      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405d9f6:	2300      	movs	r3, #0
2405d9f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405d9fa:	e3ca      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
2405d9fc:	4b1e      	ldr	r3, [pc, #120]	; (2405da78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405d9fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405da00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
2405da04:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
2405da06:	4b1c      	ldr	r3, [pc, #112]	; (2405da78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405da08:	681b      	ldr	r3, [r3, #0]
2405da0a:	f003 0304 	and.w	r3, r3, #4
2405da0e:	2b04      	cmp	r3, #4
2405da10:	d10c      	bne.n	2405da2c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
2405da12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405da14:	2b00      	cmp	r3, #0
2405da16:	d109      	bne.n	2405da2c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2405da18:	4b17      	ldr	r3, [pc, #92]	; (2405da78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405da1a:	681b      	ldr	r3, [r3, #0]
2405da1c:	08db      	lsrs	r3, r3, #3
2405da1e:	f003 0303 	and.w	r3, r3, #3
2405da22:	4a16      	ldr	r2, [pc, #88]	; (2405da7c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
2405da24:	fa22 f303 	lsr.w	r3, r2, r3
2405da28:	63fb      	str	r3, [r7, #60]	; 0x3c
2405da2a:	e01e      	b.n	2405da6a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
2405da2c:	4b12      	ldr	r3, [pc, #72]	; (2405da78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405da2e:	681b      	ldr	r3, [r3, #0]
2405da30:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405da34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405da38:	d106      	bne.n	2405da48 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
2405da3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405da3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2405da40:	d102      	bne.n	2405da48 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
2405da42:	4b0f      	ldr	r3, [pc, #60]	; (2405da80 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
2405da44:	63fb      	str	r3, [r7, #60]	; 0x3c
2405da46:	e010      	b.n	2405da6a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
2405da48:	4b0b      	ldr	r3, [pc, #44]	; (2405da78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
2405da4a:	681b      	ldr	r3, [r3, #0]
2405da4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405da50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405da54:	d106      	bne.n	2405da64 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
2405da56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405da58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405da5c:	d102      	bne.n	2405da64 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
2405da5e:	4b09      	ldr	r3, [pc, #36]	; (2405da84 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
2405da60:	63fb      	str	r3, [r7, #60]	; 0x3c
2405da62:	e002      	b.n	2405da6a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
2405da64:	2300      	movs	r3, #0
2405da66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
2405da68:	e393      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
2405da6a:	e392      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
2405da6c:	4b06      	ldr	r3, [pc, #24]	; (2405da88 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
2405da6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405da70:	e38f      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
2405da72:	2300      	movs	r3, #0
2405da74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405da76:	e38c      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
2405da78:	58024400 	.word	0x58024400
2405da7c:	03d09000 	.word	0x03d09000
2405da80:	003d0900 	.word	0x003d0900
2405da84:	016e3600 	.word	0x016e3600
2405da88:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
2405da8c:	e9d7 2300 	ldrd	r2, r3, [r7]
2405da90:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
2405da94:	430b      	orrs	r3, r1
2405da96:	f040 809c 	bne.w	2405dbd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
2405da9a:	4b9e      	ldr	r3, [pc, #632]	; (2405dd14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405da9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405da9e:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
2405daa2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
2405daa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405daa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
2405daaa:	d054      	beq.n	2405db56 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
2405daac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405daae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
2405dab2:	f200 808b 	bhi.w	2405dbcc <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
2405dab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405dab8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
2405dabc:	f000 8083 	beq.w	2405dbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
2405dac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405dac2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
2405dac6:	f200 8081 	bhi.w	2405dbcc <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
2405daca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405dacc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
2405dad0:	d02f      	beq.n	2405db32 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
2405dad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405dad4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
2405dad8:	d878      	bhi.n	2405dbcc <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
2405dada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405dadc:	2b00      	cmp	r3, #0
2405dade:	d004      	beq.n	2405daea <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
2405dae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405dae2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
2405dae6:	d012      	beq.n	2405db0e <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
2405dae8:	e070      	b.n	2405dbcc <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
2405daea:	4b8a      	ldr	r3, [pc, #552]	; (2405dd14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405daec:	681b      	ldr	r3, [r3, #0]
2405daee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2405daf2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2405daf6:	d107      	bne.n	2405db08 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
2405daf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
2405dafc:	4618      	mov	r0, r3
2405dafe:	f000 fe15 	bl	2405e72c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
2405db02:	6abb      	ldr	r3, [r7, #40]	; 0x28
2405db04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405db06:	e344      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405db08:	2300      	movs	r3, #0
2405db0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405db0c:	e341      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2405db0e:	4b81      	ldr	r3, [pc, #516]	; (2405dd14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405db10:	681b      	ldr	r3, [r3, #0]
2405db12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2405db16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
2405db1a:	d107      	bne.n	2405db2c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2405db1c:	f107 0318 	add.w	r3, r7, #24
2405db20:	4618      	mov	r0, r3
2405db22:	f000 fb5b 	bl	2405e1dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
2405db26:	69bb      	ldr	r3, [r7, #24]
2405db28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405db2a:	e332      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405db2c:	2300      	movs	r3, #0
2405db2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405db30:	e32f      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2405db32:	4b78      	ldr	r3, [pc, #480]	; (2405dd14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405db34:	681b      	ldr	r3, [r3, #0]
2405db36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2405db3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405db3e:	d107      	bne.n	2405db50 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2405db40:	f107 030c 	add.w	r3, r7, #12
2405db44:	4618      	mov	r0, r3
2405db46:	f000 fc9d 	bl	2405e484 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
2405db4a:	68fb      	ldr	r3, [r7, #12]
2405db4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405db4e:	e320      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405db50:	2300      	movs	r3, #0
2405db52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405db54:	e31d      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
2405db56:	4b6f      	ldr	r3, [pc, #444]	; (2405dd14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405db58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405db5a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
2405db5e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
2405db60:	4b6c      	ldr	r3, [pc, #432]	; (2405dd14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405db62:	681b      	ldr	r3, [r3, #0]
2405db64:	f003 0304 	and.w	r3, r3, #4
2405db68:	2b04      	cmp	r3, #4
2405db6a:	d10c      	bne.n	2405db86 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
2405db6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405db6e:	2b00      	cmp	r3, #0
2405db70:	d109      	bne.n	2405db86 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2405db72:	4b68      	ldr	r3, [pc, #416]	; (2405dd14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405db74:	681b      	ldr	r3, [r3, #0]
2405db76:	08db      	lsrs	r3, r3, #3
2405db78:	f003 0303 	and.w	r3, r3, #3
2405db7c:	4a66      	ldr	r2, [pc, #408]	; (2405dd18 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
2405db7e:	fa22 f303 	lsr.w	r3, r2, r3
2405db82:	63fb      	str	r3, [r7, #60]	; 0x3c
2405db84:	e01e      	b.n	2405dbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
2405db86:	4b63      	ldr	r3, [pc, #396]	; (2405dd14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405db88:	681b      	ldr	r3, [r3, #0]
2405db8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405db8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405db92:	d106      	bne.n	2405dba2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
2405db94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405db96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2405db9a:	d102      	bne.n	2405dba2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
2405db9c:	4b5f      	ldr	r3, [pc, #380]	; (2405dd1c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
2405db9e:	63fb      	str	r3, [r7, #60]	; 0x3c
2405dba0:	e010      	b.n	2405dbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
2405dba2:	4b5c      	ldr	r3, [pc, #368]	; (2405dd14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405dba4:	681b      	ldr	r3, [r3, #0]
2405dba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405dbaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405dbae:	d106      	bne.n	2405dbbe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
2405dbb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405dbb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405dbb6:	d102      	bne.n	2405dbbe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
2405dbb8:	4b59      	ldr	r3, [pc, #356]	; (2405dd20 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
2405dbba:	63fb      	str	r3, [r7, #60]	; 0x3c
2405dbbc:	e002      	b.n	2405dbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
2405dbbe:	2300      	movs	r3, #0
2405dbc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
2405dbc2:	e2e6      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
2405dbc4:	e2e5      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
2405dbc6:	4b57      	ldr	r3, [pc, #348]	; (2405dd24 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
2405dbc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405dbca:	e2e2      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
2405dbcc:	2300      	movs	r3, #0
2405dbce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405dbd0:	e2df      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
2405dbd2:	e9d7 2300 	ldrd	r2, r3, [r7]
2405dbd6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
2405dbda:	430b      	orrs	r3, r1
2405dbdc:	f040 80a7 	bne.w	2405dd2e <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
2405dbe0:	4b4c      	ldr	r3, [pc, #304]	; (2405dd14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405dbe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405dbe4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
2405dbe8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
2405dbea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405dbec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2405dbf0:	d055      	beq.n	2405dc9e <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
2405dbf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405dbf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2405dbf8:	f200 8096 	bhi.w	2405dd28 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
2405dbfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405dbfe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
2405dc02:	f000 8084 	beq.w	2405dd0e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
2405dc06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405dc08:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
2405dc0c:	f200 808c 	bhi.w	2405dd28 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
2405dc10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405dc12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2405dc16:	d030      	beq.n	2405dc7a <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
2405dc18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405dc1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2405dc1e:	f200 8083 	bhi.w	2405dd28 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
2405dc22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405dc24:	2b00      	cmp	r3, #0
2405dc26:	d004      	beq.n	2405dc32 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
2405dc28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405dc2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
2405dc2e:	d012      	beq.n	2405dc56 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
2405dc30:	e07a      	b.n	2405dd28 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
2405dc32:	4b38      	ldr	r3, [pc, #224]	; (2405dd14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405dc34:	681b      	ldr	r3, [r3, #0]
2405dc36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2405dc3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2405dc3e:	d107      	bne.n	2405dc50 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
2405dc40:	f107 0324 	add.w	r3, r7, #36	; 0x24
2405dc44:	4618      	mov	r0, r3
2405dc46:	f000 fd71 	bl	2405e72c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
2405dc4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
2405dc4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405dc4e:	e2a0      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405dc50:	2300      	movs	r3, #0
2405dc52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405dc54:	e29d      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2405dc56:	4b2f      	ldr	r3, [pc, #188]	; (2405dd14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405dc58:	681b      	ldr	r3, [r3, #0]
2405dc5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2405dc5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
2405dc62:	d107      	bne.n	2405dc74 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2405dc64:	f107 0318 	add.w	r3, r7, #24
2405dc68:	4618      	mov	r0, r3
2405dc6a:	f000 fab7 	bl	2405e1dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
2405dc6e:	69bb      	ldr	r3, [r7, #24]
2405dc70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405dc72:	e28e      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405dc74:	2300      	movs	r3, #0
2405dc76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405dc78:	e28b      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2405dc7a:	4b26      	ldr	r3, [pc, #152]	; (2405dd14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405dc7c:	681b      	ldr	r3, [r3, #0]
2405dc7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2405dc82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405dc86:	d107      	bne.n	2405dc98 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2405dc88:	f107 030c 	add.w	r3, r7, #12
2405dc8c:	4618      	mov	r0, r3
2405dc8e:	f000 fbf9 	bl	2405e484 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
2405dc92:	68fb      	ldr	r3, [r7, #12]
2405dc94:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405dc96:	e27c      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405dc98:	2300      	movs	r3, #0
2405dc9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405dc9c:	e279      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
2405dc9e:	4b1d      	ldr	r3, [pc, #116]	; (2405dd14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405dca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405dca2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
2405dca6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
2405dca8:	4b1a      	ldr	r3, [pc, #104]	; (2405dd14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405dcaa:	681b      	ldr	r3, [r3, #0]
2405dcac:	f003 0304 	and.w	r3, r3, #4
2405dcb0:	2b04      	cmp	r3, #4
2405dcb2:	d10c      	bne.n	2405dcce <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
2405dcb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405dcb6:	2b00      	cmp	r3, #0
2405dcb8:	d109      	bne.n	2405dcce <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2405dcba:	4b16      	ldr	r3, [pc, #88]	; (2405dd14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405dcbc:	681b      	ldr	r3, [r3, #0]
2405dcbe:	08db      	lsrs	r3, r3, #3
2405dcc0:	f003 0303 	and.w	r3, r3, #3
2405dcc4:	4a14      	ldr	r2, [pc, #80]	; (2405dd18 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
2405dcc6:	fa22 f303 	lsr.w	r3, r2, r3
2405dcca:	63fb      	str	r3, [r7, #60]	; 0x3c
2405dccc:	e01e      	b.n	2405dd0c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
2405dcce:	4b11      	ldr	r3, [pc, #68]	; (2405dd14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405dcd0:	681b      	ldr	r3, [r3, #0]
2405dcd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405dcd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405dcda:	d106      	bne.n	2405dcea <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
2405dcdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405dcde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2405dce2:	d102      	bne.n	2405dcea <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
2405dce4:	4b0d      	ldr	r3, [pc, #52]	; (2405dd1c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
2405dce6:	63fb      	str	r3, [r7, #60]	; 0x3c
2405dce8:	e010      	b.n	2405dd0c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
2405dcea:	4b0a      	ldr	r3, [pc, #40]	; (2405dd14 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
2405dcec:	681b      	ldr	r3, [r3, #0]
2405dcee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405dcf2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405dcf6:	d106      	bne.n	2405dd06 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
2405dcf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405dcfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405dcfe:	d102      	bne.n	2405dd06 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
2405dd00:	4b07      	ldr	r3, [pc, #28]	; (2405dd20 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
2405dd02:	63fb      	str	r3, [r7, #60]	; 0x3c
2405dd04:	e002      	b.n	2405dd0c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
2405dd06:	2300      	movs	r3, #0
2405dd08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
2405dd0a:	e242      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
2405dd0c:	e241      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
2405dd0e:	4b05      	ldr	r3, [pc, #20]	; (2405dd24 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
2405dd10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405dd12:	e23e      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
2405dd14:	58024400 	.word	0x58024400
2405dd18:	03d09000 	.word	0x03d09000
2405dd1c:	003d0900 	.word	0x003d0900
2405dd20:	016e3600 	.word	0x016e3600
2405dd24:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
2405dd28:	2300      	movs	r3, #0
2405dd2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405dd2c:	e231      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
2405dd2e:	e9d7 2300 	ldrd	r2, r3, [r7]
2405dd32:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
2405dd36:	430b      	orrs	r3, r1
2405dd38:	f040 8085 	bne.w	2405de46 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
2405dd3c:	4b9c      	ldr	r3, [pc, #624]	; (2405dfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405dd3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405dd40:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
2405dd44:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
2405dd46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405dd48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
2405dd4c:	d06b      	beq.n	2405de26 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
2405dd4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405dd50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
2405dd54:	d874      	bhi.n	2405de40 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
2405dd56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405dd58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
2405dd5c:	d056      	beq.n	2405de0c <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
2405dd5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405dd60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
2405dd64:	d86c      	bhi.n	2405de40 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
2405dd66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405dd68:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
2405dd6c:	d03b      	beq.n	2405dde6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
2405dd6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405dd70:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
2405dd74:	d864      	bhi.n	2405de40 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
2405dd76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405dd78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405dd7c:	d021      	beq.n	2405ddc2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
2405dd7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405dd80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405dd84:	d85c      	bhi.n	2405de40 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
2405dd86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405dd88:	2b00      	cmp	r3, #0
2405dd8a:	d004      	beq.n	2405dd96 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
2405dd8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405dd8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2405dd92:	d004      	beq.n	2405dd9e <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
2405dd94:	e054      	b.n	2405de40 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
2405dd96:	f7fe fb5f 	bl	2405c458 <HAL_RCC_GetPCLK1Freq>
2405dd9a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
2405dd9c:	e1f9      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2405dd9e:	4b84      	ldr	r3, [pc, #528]	; (2405dfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405dda0:	681b      	ldr	r3, [r3, #0]
2405dda2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2405dda6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
2405ddaa:	d107      	bne.n	2405ddbc <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2405ddac:	f107 0318 	add.w	r3, r7, #24
2405ddb0:	4618      	mov	r0, r3
2405ddb2:	f000 fa13 	bl	2405e1dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
2405ddb6:	69fb      	ldr	r3, [r7, #28]
2405ddb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405ddba:	e1ea      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405ddbc:	2300      	movs	r3, #0
2405ddbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405ddc0:	e1e7      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2405ddc2:	4b7b      	ldr	r3, [pc, #492]	; (2405dfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405ddc4:	681b      	ldr	r3, [r3, #0]
2405ddc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2405ddca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405ddce:	d107      	bne.n	2405dde0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2405ddd0:	f107 030c 	add.w	r3, r7, #12
2405ddd4:	4618      	mov	r0, r3
2405ddd6:	f000 fb55 	bl	2405e484 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
2405ddda:	693b      	ldr	r3, [r7, #16]
2405dddc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405ddde:	e1d8      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405dde0:	2300      	movs	r3, #0
2405dde2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405dde4:	e1d5      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
2405dde6:	4b72      	ldr	r3, [pc, #456]	; (2405dfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405dde8:	681b      	ldr	r3, [r3, #0]
2405ddea:	f003 0304 	and.w	r3, r3, #4
2405ddee:	2b04      	cmp	r3, #4
2405ddf0:	d109      	bne.n	2405de06 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2405ddf2:	4b6f      	ldr	r3, [pc, #444]	; (2405dfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405ddf4:	681b      	ldr	r3, [r3, #0]
2405ddf6:	08db      	lsrs	r3, r3, #3
2405ddf8:	f003 0303 	and.w	r3, r3, #3
2405ddfc:	4a6d      	ldr	r2, [pc, #436]	; (2405dfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
2405ddfe:	fa22 f303 	lsr.w	r3, r2, r3
2405de02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405de04:	e1c5      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405de06:	2300      	movs	r3, #0
2405de08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405de0a:	e1c2      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
2405de0c:	4b68      	ldr	r3, [pc, #416]	; (2405dfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405de0e:	681b      	ldr	r3, [r3, #0]
2405de10:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405de14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405de18:	d102      	bne.n	2405de20 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
2405de1a:	4b67      	ldr	r3, [pc, #412]	; (2405dfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
2405de1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405de1e:	e1b8      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405de20:	2300      	movs	r3, #0
2405de22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405de24:	e1b5      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
2405de26:	4b62      	ldr	r3, [pc, #392]	; (2405dfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405de28:	681b      	ldr	r3, [r3, #0]
2405de2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405de2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405de32:	d102      	bne.n	2405de3a <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
2405de34:	4b61      	ldr	r3, [pc, #388]	; (2405dfbc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
2405de36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405de38:	e1ab      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405de3a:	2300      	movs	r3, #0
2405de3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405de3e:	e1a8      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
2405de40:	2300      	movs	r3, #0
2405de42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405de44:	e1a5      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
2405de46:	e9d7 2300 	ldrd	r2, r3, [r7]
2405de4a:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
2405de4e:	430b      	orrs	r3, r1
2405de50:	d173      	bne.n	2405df3a <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
2405de52:	4b57      	ldr	r3, [pc, #348]	; (2405dfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405de54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405de56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
2405de5a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
2405de5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405de5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405de62:	d02f      	beq.n	2405dec4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
2405de64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405de66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405de6a:	d863      	bhi.n	2405df34 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
2405de6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405de6e:	2b00      	cmp	r3, #0
2405de70:	d004      	beq.n	2405de7c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
2405de72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405de74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2405de78:	d012      	beq.n	2405dea0 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
2405de7a:	e05b      	b.n	2405df34 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2405de7c:	4b4c      	ldr	r3, [pc, #304]	; (2405dfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405de7e:	681b      	ldr	r3, [r3, #0]
2405de80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2405de84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
2405de88:	d107      	bne.n	2405de9a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2405de8a:	f107 0318 	add.w	r3, r7, #24
2405de8e:	4618      	mov	r0, r3
2405de90:	f000 f9a4 	bl	2405e1dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
2405de94:	69bb      	ldr	r3, [r7, #24]
2405de96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405de98:	e17b      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405de9a:	2300      	movs	r3, #0
2405de9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405de9e:	e178      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2405dea0:	4b43      	ldr	r3, [pc, #268]	; (2405dfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405dea2:	681b      	ldr	r3, [r3, #0]
2405dea4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2405dea8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405deac:	d107      	bne.n	2405debe <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2405deae:	f107 030c 	add.w	r3, r7, #12
2405deb2:	4618      	mov	r0, r3
2405deb4:	f000 fae6 	bl	2405e484 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
2405deb8:	697b      	ldr	r3, [r7, #20]
2405deba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405debc:	e169      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405debe:	2300      	movs	r3, #0
2405dec0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405dec2:	e166      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
2405dec4:	4b3a      	ldr	r3, [pc, #232]	; (2405dfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405dec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405dec8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
2405decc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
2405dece:	4b38      	ldr	r3, [pc, #224]	; (2405dfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405ded0:	681b      	ldr	r3, [r3, #0]
2405ded2:	f003 0304 	and.w	r3, r3, #4
2405ded6:	2b04      	cmp	r3, #4
2405ded8:	d10c      	bne.n	2405def4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
2405deda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405dedc:	2b00      	cmp	r3, #0
2405dede:	d109      	bne.n	2405def4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2405dee0:	4b33      	ldr	r3, [pc, #204]	; (2405dfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405dee2:	681b      	ldr	r3, [r3, #0]
2405dee4:	08db      	lsrs	r3, r3, #3
2405dee6:	f003 0303 	and.w	r3, r3, #3
2405deea:	4a32      	ldr	r2, [pc, #200]	; (2405dfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
2405deec:	fa22 f303 	lsr.w	r3, r2, r3
2405def0:	63fb      	str	r3, [r7, #60]	; 0x3c
2405def2:	e01e      	b.n	2405df32 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
2405def4:	4b2e      	ldr	r3, [pc, #184]	; (2405dfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405def6:	681b      	ldr	r3, [r3, #0]
2405def8:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405defc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405df00:	d106      	bne.n	2405df10 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
2405df02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405df04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2405df08:	d102      	bne.n	2405df10 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
2405df0a:	4b2b      	ldr	r3, [pc, #172]	; (2405dfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
2405df0c:	63fb      	str	r3, [r7, #60]	; 0x3c
2405df0e:	e010      	b.n	2405df32 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
2405df10:	4b27      	ldr	r3, [pc, #156]	; (2405dfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405df12:	681b      	ldr	r3, [r3, #0]
2405df14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405df18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405df1c:	d106      	bne.n	2405df2c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
2405df1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405df20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405df24:	d102      	bne.n	2405df2c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
2405df26:	4b25      	ldr	r3, [pc, #148]	; (2405dfbc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
2405df28:	63fb      	str	r3, [r7, #60]	; 0x3c
2405df2a:	e002      	b.n	2405df32 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
2405df2c:	2300      	movs	r3, #0
2405df2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
2405df30:	e12f      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
2405df32:	e12e      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
2405df34:	2300      	movs	r3, #0
2405df36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405df38:	e12b      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
2405df3a:	e9d7 2300 	ldrd	r2, r3, [r7]
2405df3e:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
2405df42:	430b      	orrs	r3, r1
2405df44:	d13c      	bne.n	2405dfc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
2405df46:	4b1a      	ldr	r3, [pc, #104]	; (2405dfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405df48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405df4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2405df4e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
2405df50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405df52:	2b00      	cmp	r3, #0
2405df54:	d004      	beq.n	2405df60 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
2405df56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405df58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2405df5c:	d012      	beq.n	2405df84 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
2405df5e:	e023      	b.n	2405dfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
2405df60:	4b13      	ldr	r3, [pc, #76]	; (2405dfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405df62:	681b      	ldr	r3, [r3, #0]
2405df64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2405df68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2405df6c:	d107      	bne.n	2405df7e <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
2405df6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
2405df72:	4618      	mov	r0, r3
2405df74:	f000 fbda 	bl	2405e72c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
2405df78:	6abb      	ldr	r3, [r7, #40]	; 0x28
2405df7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405df7c:	e109      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405df7e:	2300      	movs	r3, #0
2405df80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405df82:	e106      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2405df84:	4b0a      	ldr	r3, [pc, #40]	; (2405dfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
2405df86:	681b      	ldr	r3, [r3, #0]
2405df88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2405df8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
2405df90:	d107      	bne.n	2405dfa2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2405df92:	f107 0318 	add.w	r3, r7, #24
2405df96:	4618      	mov	r0, r3
2405df98:	f000 f920 	bl	2405e1dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
2405df9c:	6a3b      	ldr	r3, [r7, #32]
2405df9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405dfa0:	e0f7      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405dfa2:	2300      	movs	r3, #0
2405dfa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405dfa6:	e0f4      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
2405dfa8:	2300      	movs	r3, #0
2405dfaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405dfac:	e0f1      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
2405dfae:	bf00      	nop
2405dfb0:	58024400 	.word	0x58024400
2405dfb4:	03d09000 	.word	0x03d09000
2405dfb8:	003d0900 	.word	0x003d0900
2405dfbc:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
2405dfc0:	e9d7 2300 	ldrd	r2, r3, [r7]
2405dfc4:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
2405dfc8:	430b      	orrs	r3, r1
2405dfca:	f040 8091 	bne.w	2405e0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
2405dfce:	4b73      	ldr	r3, [pc, #460]	; (2405e19c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
2405dfd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405dfd2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
2405dfd6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
2405dfd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405dfda:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
2405dfde:	f000 8081 	beq.w	2405e0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
2405dfe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405dfe4:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
2405dfe8:	d87f      	bhi.n	2405e0ea <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
2405dfea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405dfec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
2405dff0:	d06b      	beq.n	2405e0ca <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
2405dff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405dff4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
2405dff8:	d877      	bhi.n	2405e0ea <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
2405dffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405dffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2405e000:	d056      	beq.n	2405e0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
2405e002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405e004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2405e008:	d86f      	bhi.n	2405e0ea <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
2405e00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405e00c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
2405e010:	d03b      	beq.n	2405e08a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
2405e012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405e014:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
2405e018:	d867      	bhi.n	2405e0ea <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
2405e01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405e01c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405e020:	d021      	beq.n	2405e066 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
2405e022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405e024:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405e028:	d85f      	bhi.n	2405e0ea <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
2405e02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405e02c:	2b00      	cmp	r3, #0
2405e02e:	d004      	beq.n	2405e03a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
2405e030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405e032:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2405e036:	d004      	beq.n	2405e042 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
2405e038:	e057      	b.n	2405e0ea <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
2405e03a:	f000 f8b9 	bl	2405e1b0 <HAL_RCCEx_GetD3PCLK1Freq>
2405e03e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
2405e040:	e0a7      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2405e042:	4b56      	ldr	r3, [pc, #344]	; (2405e19c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
2405e044:	681b      	ldr	r3, [r3, #0]
2405e046:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2405e04a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
2405e04e:	d107      	bne.n	2405e060 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2405e050:	f107 0318 	add.w	r3, r7, #24
2405e054:	4618      	mov	r0, r3
2405e056:	f000 f8c1 	bl	2405e1dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
2405e05a:	69fb      	ldr	r3, [r7, #28]
2405e05c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405e05e:	e098      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405e060:	2300      	movs	r3, #0
2405e062:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405e064:	e095      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2405e066:	4b4d      	ldr	r3, [pc, #308]	; (2405e19c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
2405e068:	681b      	ldr	r3, [r3, #0]
2405e06a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2405e06e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405e072:	d107      	bne.n	2405e084 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2405e074:	f107 030c 	add.w	r3, r7, #12
2405e078:	4618      	mov	r0, r3
2405e07a:	f000 fa03 	bl	2405e484 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
2405e07e:	693b      	ldr	r3, [r7, #16]
2405e080:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405e082:	e086      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405e084:	2300      	movs	r3, #0
2405e086:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405e088:	e083      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
2405e08a:	4b44      	ldr	r3, [pc, #272]	; (2405e19c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
2405e08c:	681b      	ldr	r3, [r3, #0]
2405e08e:	f003 0304 	and.w	r3, r3, #4
2405e092:	2b04      	cmp	r3, #4
2405e094:	d109      	bne.n	2405e0aa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2405e096:	4b41      	ldr	r3, [pc, #260]	; (2405e19c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
2405e098:	681b      	ldr	r3, [r3, #0]
2405e09a:	08db      	lsrs	r3, r3, #3
2405e09c:	f003 0303 	and.w	r3, r3, #3
2405e0a0:	4a3f      	ldr	r2, [pc, #252]	; (2405e1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
2405e0a2:	fa22 f303 	lsr.w	r3, r2, r3
2405e0a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405e0a8:	e073      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405e0aa:	2300      	movs	r3, #0
2405e0ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405e0ae:	e070      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
2405e0b0:	4b3a      	ldr	r3, [pc, #232]	; (2405e19c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
2405e0b2:	681b      	ldr	r3, [r3, #0]
2405e0b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405e0b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405e0bc:	d102      	bne.n	2405e0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
2405e0be:	4b39      	ldr	r3, [pc, #228]	; (2405e1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
2405e0c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405e0c2:	e066      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405e0c4:	2300      	movs	r3, #0
2405e0c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405e0c8:	e063      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
2405e0ca:	4b34      	ldr	r3, [pc, #208]	; (2405e19c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
2405e0cc:	681b      	ldr	r3, [r3, #0]
2405e0ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405e0d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405e0d6:	d102      	bne.n	2405e0de <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
2405e0d8:	4b33      	ldr	r3, [pc, #204]	; (2405e1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
2405e0da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405e0dc:	e059      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405e0de:	2300      	movs	r3, #0
2405e0e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405e0e2:	e056      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
2405e0e4:	4b31      	ldr	r3, [pc, #196]	; (2405e1ac <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
2405e0e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405e0e8:	e053      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
2405e0ea:	2300      	movs	r3, #0
2405e0ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405e0ee:	e050      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
2405e0f0:	e9d7 2300 	ldrd	r2, r3, [r7]
2405e0f4:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
2405e0f8:	430b      	orrs	r3, r1
2405e0fa:	d148      	bne.n	2405e18e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
2405e0fc:	4b27      	ldr	r3, [pc, #156]	; (2405e19c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
2405e0fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405e100:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
2405e104:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
2405e106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405e108:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405e10c:	d02a      	beq.n	2405e164 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
2405e10e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405e110:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405e114:	d838      	bhi.n	2405e188 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
2405e116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405e118:	2b00      	cmp	r3, #0
2405e11a:	d004      	beq.n	2405e126 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
2405e11c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405e11e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2405e122:	d00d      	beq.n	2405e140 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
2405e124:	e030      	b.n	2405e188 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
2405e126:	4b1d      	ldr	r3, [pc, #116]	; (2405e19c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
2405e128:	681b      	ldr	r3, [r3, #0]
2405e12a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405e12e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405e132:	d102      	bne.n	2405e13a <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
2405e134:	4b1c      	ldr	r3, [pc, #112]	; (2405e1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
2405e136:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405e138:	e02b      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405e13a:	2300      	movs	r3, #0
2405e13c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405e13e:	e028      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
2405e140:	4b16      	ldr	r3, [pc, #88]	; (2405e19c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
2405e142:	681b      	ldr	r3, [r3, #0]
2405e144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2405e148:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2405e14c:	d107      	bne.n	2405e15e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
2405e14e:	f107 0324 	add.w	r3, r7, #36	; 0x24
2405e152:	4618      	mov	r0, r3
2405e154:	f000 faea 	bl	2405e72c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
2405e158:	6abb      	ldr	r3, [r7, #40]	; 0x28
2405e15a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405e15c:	e019      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405e15e:	2300      	movs	r3, #0
2405e160:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405e162:	e016      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2405e164:	4b0d      	ldr	r3, [pc, #52]	; (2405e19c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
2405e166:	681b      	ldr	r3, [r3, #0]
2405e168:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2405e16c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
2405e170:	d107      	bne.n	2405e182 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2405e172:	f107 0318 	add.w	r3, r7, #24
2405e176:	4618      	mov	r0, r3
2405e178:	f000 f830 	bl	2405e1dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
2405e17c:	69fb      	ldr	r3, [r7, #28]
2405e17e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
2405e180:	e007      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
2405e182:	2300      	movs	r3, #0
2405e184:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405e186:	e004      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
2405e188:	2300      	movs	r3, #0
2405e18a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
2405e18c:	e001      	b.n	2405e192 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
2405e18e:	2300      	movs	r3, #0
2405e190:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
2405e192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
2405e194:	4618      	mov	r0, r3
2405e196:	3740      	adds	r7, #64	; 0x40
2405e198:	46bd      	mov	sp, r7
2405e19a:	bd80      	pop	{r7, pc}
2405e19c:	58024400 	.word	0x58024400
2405e1a0:	03d09000 	.word	0x03d09000
2405e1a4:	003d0900 	.word	0x003d0900
2405e1a8:	016e3600 	.word	0x016e3600
2405e1ac:	00bb8000 	.word	0x00bb8000

2405e1b0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
2405e1b0:	b580      	push	{r7, lr}
2405e1b2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
2405e1b4:	f7fe f920 	bl	2405c3f8 <HAL_RCC_GetHCLKFreq>
2405e1b8:	4602      	mov	r2, r0
2405e1ba:	4b06      	ldr	r3, [pc, #24]	; (2405e1d4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
2405e1bc:	6a1b      	ldr	r3, [r3, #32]
2405e1be:	091b      	lsrs	r3, r3, #4
2405e1c0:	f003 0307 	and.w	r3, r3, #7
2405e1c4:	4904      	ldr	r1, [pc, #16]	; (2405e1d8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
2405e1c6:	5ccb      	ldrb	r3, [r1, r3]
2405e1c8:	f003 031f 	and.w	r3, r3, #31
2405e1cc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
2405e1d0:	4618      	mov	r0, r3
2405e1d2:	bd80      	pop	{r7, pc}
2405e1d4:	58024400 	.word	0x58024400
2405e1d8:	240641f8 	.word	0x240641f8

2405e1dc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
2405e1dc:	b480      	push	{r7}
2405e1de:	b089      	sub	sp, #36	; 0x24
2405e1e0:	af00      	add	r7, sp, #0
2405e1e2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2405e1e4:	4ba1      	ldr	r3, [pc, #644]	; (2405e46c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405e1e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405e1e8:	f003 0303 	and.w	r3, r3, #3
2405e1ec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
2405e1ee:	4b9f      	ldr	r3, [pc, #636]	; (2405e46c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405e1f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405e1f2:	0b1b      	lsrs	r3, r3, #12
2405e1f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2405e1f8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
2405e1fa:	4b9c      	ldr	r3, [pc, #624]	; (2405e46c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405e1fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405e1fe:	091b      	lsrs	r3, r3, #4
2405e200:	f003 0301 	and.w	r3, r3, #1
2405e204:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
2405e206:	4b99      	ldr	r3, [pc, #612]	; (2405e46c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405e208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2405e20a:	08db      	lsrs	r3, r3, #3
2405e20c:	f3c3 030c 	ubfx	r3, r3, #0, #13
2405e210:	693a      	ldr	r2, [r7, #16]
2405e212:	fb02 f303 	mul.w	r3, r2, r3
2405e216:	ee07 3a90 	vmov	s15, r3
2405e21a:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e21e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
2405e222:	697b      	ldr	r3, [r7, #20]
2405e224:	2b00      	cmp	r3, #0
2405e226:	f000 8111 	beq.w	2405e44c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
2405e22a:	69bb      	ldr	r3, [r7, #24]
2405e22c:	2b02      	cmp	r3, #2
2405e22e:	f000 8083 	beq.w	2405e338 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
2405e232:	69bb      	ldr	r3, [r7, #24]
2405e234:	2b02      	cmp	r3, #2
2405e236:	f200 80a1 	bhi.w	2405e37c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
2405e23a:	69bb      	ldr	r3, [r7, #24]
2405e23c:	2b00      	cmp	r3, #0
2405e23e:	d003      	beq.n	2405e248 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
2405e240:	69bb      	ldr	r3, [r7, #24]
2405e242:	2b01      	cmp	r3, #1
2405e244:	d056      	beq.n	2405e2f4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
2405e246:	e099      	b.n	2405e37c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2405e248:	4b88      	ldr	r3, [pc, #544]	; (2405e46c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405e24a:	681b      	ldr	r3, [r3, #0]
2405e24c:	f003 0320 	and.w	r3, r3, #32
2405e250:	2b00      	cmp	r3, #0
2405e252:	d02d      	beq.n	2405e2b0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2405e254:	4b85      	ldr	r3, [pc, #532]	; (2405e46c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405e256:	681b      	ldr	r3, [r3, #0]
2405e258:	08db      	lsrs	r3, r3, #3
2405e25a:	f003 0303 	and.w	r3, r3, #3
2405e25e:	4a84      	ldr	r2, [pc, #528]	; (2405e470 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
2405e260:	fa22 f303 	lsr.w	r3, r2, r3
2405e264:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
2405e266:	68bb      	ldr	r3, [r7, #8]
2405e268:	ee07 3a90 	vmov	s15, r3
2405e26c:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405e270:	697b      	ldr	r3, [r7, #20]
2405e272:	ee07 3a90 	vmov	s15, r3
2405e276:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e27a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405e27e:	4b7b      	ldr	r3, [pc, #492]	; (2405e46c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405e280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405e282:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405e286:	ee07 3a90 	vmov	s15, r3
2405e28a:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405e28e:	ed97 6a03 	vldr	s12, [r7, #12]
2405e292:	eddf 5a78 	vldr	s11, [pc, #480]	; 2405e474 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
2405e296:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405e29a:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405e29e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405e2a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405e2a6:	ee67 7a27 	vmul.f32	s15, s14, s15
2405e2aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
2405e2ae:	e087      	b.n	2405e3c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
2405e2b0:	697b      	ldr	r3, [r7, #20]
2405e2b2:	ee07 3a90 	vmov	s15, r3
2405e2b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e2ba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 2405e478 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
2405e2be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405e2c2:	4b6a      	ldr	r3, [pc, #424]	; (2405e46c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405e2c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405e2c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405e2ca:	ee07 3a90 	vmov	s15, r3
2405e2ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405e2d2:	ed97 6a03 	vldr	s12, [r7, #12]
2405e2d6:	eddf 5a67 	vldr	s11, [pc, #412]	; 2405e474 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
2405e2da:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405e2de:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405e2e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405e2e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405e2ea:	ee67 7a27 	vmul.f32	s15, s14, s15
2405e2ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2405e2f2:	e065      	b.n	2405e3c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
2405e2f4:	697b      	ldr	r3, [r7, #20]
2405e2f6:	ee07 3a90 	vmov	s15, r3
2405e2fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e2fe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 2405e47c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
2405e302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405e306:	4b59      	ldr	r3, [pc, #356]	; (2405e46c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405e308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405e30a:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405e30e:	ee07 3a90 	vmov	s15, r3
2405e312:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405e316:	ed97 6a03 	vldr	s12, [r7, #12]
2405e31a:	eddf 5a56 	vldr	s11, [pc, #344]	; 2405e474 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
2405e31e:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405e322:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405e326:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405e32a:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405e32e:	ee67 7a27 	vmul.f32	s15, s14, s15
2405e332:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2405e336:	e043      	b.n	2405e3c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
2405e338:	697b      	ldr	r3, [r7, #20]
2405e33a:	ee07 3a90 	vmov	s15, r3
2405e33e:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e342:	eddf 6a4f 	vldr	s13, [pc, #316]	; 2405e480 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
2405e346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405e34a:	4b48      	ldr	r3, [pc, #288]	; (2405e46c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405e34c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405e34e:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405e352:	ee07 3a90 	vmov	s15, r3
2405e356:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405e35a:	ed97 6a03 	vldr	s12, [r7, #12]
2405e35e:	eddf 5a45 	vldr	s11, [pc, #276]	; 2405e474 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
2405e362:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405e366:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405e36a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405e36e:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405e372:	ee67 7a27 	vmul.f32	s15, s14, s15
2405e376:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2405e37a:	e021      	b.n	2405e3c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
2405e37c:	697b      	ldr	r3, [r7, #20]
2405e37e:	ee07 3a90 	vmov	s15, r3
2405e382:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e386:	eddf 6a3d 	vldr	s13, [pc, #244]	; 2405e47c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
2405e38a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405e38e:	4b37      	ldr	r3, [pc, #220]	; (2405e46c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405e390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405e392:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405e396:	ee07 3a90 	vmov	s15, r3
2405e39a:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405e39e:	ed97 6a03 	vldr	s12, [r7, #12]
2405e3a2:	eddf 5a34 	vldr	s11, [pc, #208]	; 2405e474 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
2405e3a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405e3aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405e3ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405e3b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405e3b6:	ee67 7a27 	vmul.f32	s15, s14, s15
2405e3ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2405e3be:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
2405e3c0:	4b2a      	ldr	r3, [pc, #168]	; (2405e46c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405e3c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405e3c4:	0a5b      	lsrs	r3, r3, #9
2405e3c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2405e3ca:	ee07 3a90 	vmov	s15, r3
2405e3ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e3d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2405e3d6:	ee37 7a87 	vadd.f32	s14, s15, s14
2405e3da:	edd7 6a07 	vldr	s13, [r7, #28]
2405e3de:	eec6 7a87 	vdiv.f32	s15, s13, s14
2405e3e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2405e3e6:	ee17 2a90 	vmov	r2, s15
2405e3ea:	687b      	ldr	r3, [r7, #4]
2405e3ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
2405e3ee:	4b1f      	ldr	r3, [pc, #124]	; (2405e46c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405e3f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405e3f2:	0c1b      	lsrs	r3, r3, #16
2405e3f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2405e3f8:	ee07 3a90 	vmov	s15, r3
2405e3fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e400:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2405e404:	ee37 7a87 	vadd.f32	s14, s15, s14
2405e408:	edd7 6a07 	vldr	s13, [r7, #28]
2405e40c:	eec6 7a87 	vdiv.f32	s15, s13, s14
2405e410:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2405e414:	ee17 2a90 	vmov	r2, s15
2405e418:	687b      	ldr	r3, [r7, #4]
2405e41a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
2405e41c:	4b13      	ldr	r3, [pc, #76]	; (2405e46c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405e41e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405e420:	0e1b      	lsrs	r3, r3, #24
2405e422:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2405e426:	ee07 3a90 	vmov	s15, r3
2405e42a:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e42e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2405e432:	ee37 7a87 	vadd.f32	s14, s15, s14
2405e436:	edd7 6a07 	vldr	s13, [r7, #28]
2405e43a:	eec6 7a87 	vdiv.f32	s15, s13, s14
2405e43e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2405e442:	ee17 2a90 	vmov	r2, s15
2405e446:	687b      	ldr	r3, [r7, #4]
2405e448:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
2405e44a:	e008      	b.n	2405e45e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
2405e44c:	687b      	ldr	r3, [r7, #4]
2405e44e:	2200      	movs	r2, #0
2405e450:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
2405e452:	687b      	ldr	r3, [r7, #4]
2405e454:	2200      	movs	r2, #0
2405e456:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
2405e458:	687b      	ldr	r3, [r7, #4]
2405e45a:	2200      	movs	r2, #0
2405e45c:	609a      	str	r2, [r3, #8]
}
2405e45e:	bf00      	nop
2405e460:	3724      	adds	r7, #36	; 0x24
2405e462:	46bd      	mov	sp, r7
2405e464:	f85d 7b04 	ldr.w	r7, [sp], #4
2405e468:	4770      	bx	lr
2405e46a:	bf00      	nop
2405e46c:	58024400 	.word	0x58024400
2405e470:	03d09000 	.word	0x03d09000
2405e474:	46000000 	.word	0x46000000
2405e478:	4c742400 	.word	0x4c742400
2405e47c:	4a742400 	.word	0x4a742400
2405e480:	4bb71b00 	.word	0x4bb71b00

2405e484 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
2405e484:	b480      	push	{r7}
2405e486:	b089      	sub	sp, #36	; 0x24
2405e488:	af00      	add	r7, sp, #0
2405e48a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2405e48c:	4ba1      	ldr	r3, [pc, #644]	; (2405e714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405e48e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405e490:	f003 0303 	and.w	r3, r3, #3
2405e494:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
2405e496:	4b9f      	ldr	r3, [pc, #636]	; (2405e714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405e498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405e49a:	0d1b      	lsrs	r3, r3, #20
2405e49c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2405e4a0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
2405e4a2:	4b9c      	ldr	r3, [pc, #624]	; (2405e714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405e4a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405e4a6:	0a1b      	lsrs	r3, r3, #8
2405e4a8:	f003 0301 	and.w	r3, r3, #1
2405e4ac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
2405e4ae:	4b99      	ldr	r3, [pc, #612]	; (2405e714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405e4b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2405e4b2:	08db      	lsrs	r3, r3, #3
2405e4b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
2405e4b8:	693a      	ldr	r2, [r7, #16]
2405e4ba:	fb02 f303 	mul.w	r3, r2, r3
2405e4be:	ee07 3a90 	vmov	s15, r3
2405e4c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e4c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
2405e4ca:	697b      	ldr	r3, [r7, #20]
2405e4cc:	2b00      	cmp	r3, #0
2405e4ce:	f000 8111 	beq.w	2405e6f4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
2405e4d2:	69bb      	ldr	r3, [r7, #24]
2405e4d4:	2b02      	cmp	r3, #2
2405e4d6:	f000 8083 	beq.w	2405e5e0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
2405e4da:	69bb      	ldr	r3, [r7, #24]
2405e4dc:	2b02      	cmp	r3, #2
2405e4de:	f200 80a1 	bhi.w	2405e624 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
2405e4e2:	69bb      	ldr	r3, [r7, #24]
2405e4e4:	2b00      	cmp	r3, #0
2405e4e6:	d003      	beq.n	2405e4f0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
2405e4e8:	69bb      	ldr	r3, [r7, #24]
2405e4ea:	2b01      	cmp	r3, #1
2405e4ec:	d056      	beq.n	2405e59c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
2405e4ee:	e099      	b.n	2405e624 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2405e4f0:	4b88      	ldr	r3, [pc, #544]	; (2405e714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405e4f2:	681b      	ldr	r3, [r3, #0]
2405e4f4:	f003 0320 	and.w	r3, r3, #32
2405e4f8:	2b00      	cmp	r3, #0
2405e4fa:	d02d      	beq.n	2405e558 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2405e4fc:	4b85      	ldr	r3, [pc, #532]	; (2405e714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405e4fe:	681b      	ldr	r3, [r3, #0]
2405e500:	08db      	lsrs	r3, r3, #3
2405e502:	f003 0303 	and.w	r3, r3, #3
2405e506:	4a84      	ldr	r2, [pc, #528]	; (2405e718 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
2405e508:	fa22 f303 	lsr.w	r3, r2, r3
2405e50c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
2405e50e:	68bb      	ldr	r3, [r7, #8]
2405e510:	ee07 3a90 	vmov	s15, r3
2405e514:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405e518:	697b      	ldr	r3, [r7, #20]
2405e51a:	ee07 3a90 	vmov	s15, r3
2405e51e:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e522:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405e526:	4b7b      	ldr	r3, [pc, #492]	; (2405e714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405e528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405e52a:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405e52e:	ee07 3a90 	vmov	s15, r3
2405e532:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405e536:	ed97 6a03 	vldr	s12, [r7, #12]
2405e53a:	eddf 5a78 	vldr	s11, [pc, #480]	; 2405e71c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
2405e53e:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405e542:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405e546:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405e54a:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405e54e:	ee67 7a27 	vmul.f32	s15, s14, s15
2405e552:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
2405e556:	e087      	b.n	2405e668 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
2405e558:	697b      	ldr	r3, [r7, #20]
2405e55a:	ee07 3a90 	vmov	s15, r3
2405e55e:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e562:	eddf 6a6f 	vldr	s13, [pc, #444]	; 2405e720 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
2405e566:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405e56a:	4b6a      	ldr	r3, [pc, #424]	; (2405e714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405e56c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405e56e:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405e572:	ee07 3a90 	vmov	s15, r3
2405e576:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405e57a:	ed97 6a03 	vldr	s12, [r7, #12]
2405e57e:	eddf 5a67 	vldr	s11, [pc, #412]	; 2405e71c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
2405e582:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405e586:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405e58a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405e58e:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405e592:	ee67 7a27 	vmul.f32	s15, s14, s15
2405e596:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2405e59a:	e065      	b.n	2405e668 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
2405e59c:	697b      	ldr	r3, [r7, #20]
2405e59e:	ee07 3a90 	vmov	s15, r3
2405e5a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e5a6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 2405e724 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
2405e5aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405e5ae:	4b59      	ldr	r3, [pc, #356]	; (2405e714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405e5b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405e5b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405e5b6:	ee07 3a90 	vmov	s15, r3
2405e5ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405e5be:	ed97 6a03 	vldr	s12, [r7, #12]
2405e5c2:	eddf 5a56 	vldr	s11, [pc, #344]	; 2405e71c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
2405e5c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405e5ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405e5ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405e5d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405e5d6:	ee67 7a27 	vmul.f32	s15, s14, s15
2405e5da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2405e5de:	e043      	b.n	2405e668 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
2405e5e0:	697b      	ldr	r3, [r7, #20]
2405e5e2:	ee07 3a90 	vmov	s15, r3
2405e5e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e5ea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 2405e728 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
2405e5ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405e5f2:	4b48      	ldr	r3, [pc, #288]	; (2405e714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405e5f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405e5f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405e5fa:	ee07 3a90 	vmov	s15, r3
2405e5fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405e602:	ed97 6a03 	vldr	s12, [r7, #12]
2405e606:	eddf 5a45 	vldr	s11, [pc, #276]	; 2405e71c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
2405e60a:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405e60e:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405e612:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405e616:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405e61a:	ee67 7a27 	vmul.f32	s15, s14, s15
2405e61e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2405e622:	e021      	b.n	2405e668 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
2405e624:	697b      	ldr	r3, [r7, #20]
2405e626:	ee07 3a90 	vmov	s15, r3
2405e62a:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e62e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 2405e724 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
2405e632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405e636:	4b37      	ldr	r3, [pc, #220]	; (2405e714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405e638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405e63a:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405e63e:	ee07 3a90 	vmov	s15, r3
2405e642:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405e646:	ed97 6a03 	vldr	s12, [r7, #12]
2405e64a:	eddf 5a34 	vldr	s11, [pc, #208]	; 2405e71c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
2405e64e:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405e652:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405e656:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405e65a:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405e65e:	ee67 7a27 	vmul.f32	s15, s14, s15
2405e662:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2405e666:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
2405e668:	4b2a      	ldr	r3, [pc, #168]	; (2405e714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405e66a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405e66c:	0a5b      	lsrs	r3, r3, #9
2405e66e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2405e672:	ee07 3a90 	vmov	s15, r3
2405e676:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e67a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2405e67e:	ee37 7a87 	vadd.f32	s14, s15, s14
2405e682:	edd7 6a07 	vldr	s13, [r7, #28]
2405e686:	eec6 7a87 	vdiv.f32	s15, s13, s14
2405e68a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2405e68e:	ee17 2a90 	vmov	r2, s15
2405e692:	687b      	ldr	r3, [r7, #4]
2405e694:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
2405e696:	4b1f      	ldr	r3, [pc, #124]	; (2405e714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405e698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405e69a:	0c1b      	lsrs	r3, r3, #16
2405e69c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2405e6a0:	ee07 3a90 	vmov	s15, r3
2405e6a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e6a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2405e6ac:	ee37 7a87 	vadd.f32	s14, s15, s14
2405e6b0:	edd7 6a07 	vldr	s13, [r7, #28]
2405e6b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
2405e6b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2405e6bc:	ee17 2a90 	vmov	r2, s15
2405e6c0:	687b      	ldr	r3, [r7, #4]
2405e6c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
2405e6c4:	4b13      	ldr	r3, [pc, #76]	; (2405e714 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405e6c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405e6c8:	0e1b      	lsrs	r3, r3, #24
2405e6ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2405e6ce:	ee07 3a90 	vmov	s15, r3
2405e6d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e6d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2405e6da:	ee37 7a87 	vadd.f32	s14, s15, s14
2405e6de:	edd7 6a07 	vldr	s13, [r7, #28]
2405e6e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
2405e6e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2405e6ea:	ee17 2a90 	vmov	r2, s15
2405e6ee:	687b      	ldr	r3, [r7, #4]
2405e6f0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
2405e6f2:	e008      	b.n	2405e706 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
2405e6f4:	687b      	ldr	r3, [r7, #4]
2405e6f6:	2200      	movs	r2, #0
2405e6f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
2405e6fa:	687b      	ldr	r3, [r7, #4]
2405e6fc:	2200      	movs	r2, #0
2405e6fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
2405e700:	687b      	ldr	r3, [r7, #4]
2405e702:	2200      	movs	r2, #0
2405e704:	609a      	str	r2, [r3, #8]
}
2405e706:	bf00      	nop
2405e708:	3724      	adds	r7, #36	; 0x24
2405e70a:	46bd      	mov	sp, r7
2405e70c:	f85d 7b04 	ldr.w	r7, [sp], #4
2405e710:	4770      	bx	lr
2405e712:	bf00      	nop
2405e714:	58024400 	.word	0x58024400
2405e718:	03d09000 	.word	0x03d09000
2405e71c:	46000000 	.word	0x46000000
2405e720:	4c742400 	.word	0x4c742400
2405e724:	4a742400 	.word	0x4a742400
2405e728:	4bb71b00 	.word	0x4bb71b00

2405e72c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
2405e72c:	b480      	push	{r7}
2405e72e:	b089      	sub	sp, #36	; 0x24
2405e730:	af00      	add	r7, sp, #0
2405e732:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2405e734:	4ba0      	ldr	r3, [pc, #640]	; (2405e9b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405e736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405e738:	f003 0303 	and.w	r3, r3, #3
2405e73c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
2405e73e:	4b9e      	ldr	r3, [pc, #632]	; (2405e9b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405e740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405e742:	091b      	lsrs	r3, r3, #4
2405e744:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2405e748:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
2405e74a:	4b9b      	ldr	r3, [pc, #620]	; (2405e9b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405e74c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405e74e:	f003 0301 	and.w	r3, r3, #1
2405e752:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
2405e754:	4b98      	ldr	r3, [pc, #608]	; (2405e9b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405e756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2405e758:	08db      	lsrs	r3, r3, #3
2405e75a:	f3c3 030c 	ubfx	r3, r3, #0, #13
2405e75e:	693a      	ldr	r2, [r7, #16]
2405e760:	fb02 f303 	mul.w	r3, r2, r3
2405e764:	ee07 3a90 	vmov	s15, r3
2405e768:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e76c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
2405e770:	697b      	ldr	r3, [r7, #20]
2405e772:	2b00      	cmp	r3, #0
2405e774:	f000 8111 	beq.w	2405e99a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
2405e778:	69bb      	ldr	r3, [r7, #24]
2405e77a:	2b02      	cmp	r3, #2
2405e77c:	f000 8083 	beq.w	2405e886 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
2405e780:	69bb      	ldr	r3, [r7, #24]
2405e782:	2b02      	cmp	r3, #2
2405e784:	f200 80a1 	bhi.w	2405e8ca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
2405e788:	69bb      	ldr	r3, [r7, #24]
2405e78a:	2b00      	cmp	r3, #0
2405e78c:	d003      	beq.n	2405e796 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
2405e78e:	69bb      	ldr	r3, [r7, #24]
2405e790:	2b01      	cmp	r3, #1
2405e792:	d056      	beq.n	2405e842 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
2405e794:	e099      	b.n	2405e8ca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2405e796:	4b88      	ldr	r3, [pc, #544]	; (2405e9b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405e798:	681b      	ldr	r3, [r3, #0]
2405e79a:	f003 0320 	and.w	r3, r3, #32
2405e79e:	2b00      	cmp	r3, #0
2405e7a0:	d02d      	beq.n	2405e7fe <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2405e7a2:	4b85      	ldr	r3, [pc, #532]	; (2405e9b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405e7a4:	681b      	ldr	r3, [r3, #0]
2405e7a6:	08db      	lsrs	r3, r3, #3
2405e7a8:	f003 0303 	and.w	r3, r3, #3
2405e7ac:	4a83      	ldr	r2, [pc, #524]	; (2405e9bc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
2405e7ae:	fa22 f303 	lsr.w	r3, r2, r3
2405e7b2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2405e7b4:	68bb      	ldr	r3, [r7, #8]
2405e7b6:	ee07 3a90 	vmov	s15, r3
2405e7ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405e7be:	697b      	ldr	r3, [r7, #20]
2405e7c0:	ee07 3a90 	vmov	s15, r3
2405e7c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e7c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405e7cc:	4b7a      	ldr	r3, [pc, #488]	; (2405e9b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405e7ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405e7d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405e7d4:	ee07 3a90 	vmov	s15, r3
2405e7d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405e7dc:	ed97 6a03 	vldr	s12, [r7, #12]
2405e7e0:	eddf 5a77 	vldr	s11, [pc, #476]	; 2405e9c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
2405e7e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405e7e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405e7ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405e7f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405e7f4:	ee67 7a27 	vmul.f32	s15, s14, s15
2405e7f8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
2405e7fc:	e087      	b.n	2405e90e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2405e7fe:	697b      	ldr	r3, [r7, #20]
2405e800:	ee07 3a90 	vmov	s15, r3
2405e804:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e808:	eddf 6a6e 	vldr	s13, [pc, #440]	; 2405e9c4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
2405e80c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405e810:	4b69      	ldr	r3, [pc, #420]	; (2405e9b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405e812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405e814:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405e818:	ee07 3a90 	vmov	s15, r3
2405e81c:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405e820:	ed97 6a03 	vldr	s12, [r7, #12]
2405e824:	eddf 5a66 	vldr	s11, [pc, #408]	; 2405e9c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
2405e828:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405e82c:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405e830:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405e834:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405e838:	ee67 7a27 	vmul.f32	s15, s14, s15
2405e83c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2405e840:	e065      	b.n	2405e90e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2405e842:	697b      	ldr	r3, [r7, #20]
2405e844:	ee07 3a90 	vmov	s15, r3
2405e848:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e84c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 2405e9c8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
2405e850:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405e854:	4b58      	ldr	r3, [pc, #352]	; (2405e9b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405e856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405e858:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405e85c:	ee07 3a90 	vmov	s15, r3
2405e860:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405e864:	ed97 6a03 	vldr	s12, [r7, #12]
2405e868:	eddf 5a55 	vldr	s11, [pc, #340]	; 2405e9c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
2405e86c:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405e870:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405e874:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405e878:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405e87c:	ee67 7a27 	vmul.f32	s15, s14, s15
2405e880:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2405e884:	e043      	b.n	2405e90e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2405e886:	697b      	ldr	r3, [r7, #20]
2405e888:	ee07 3a90 	vmov	s15, r3
2405e88c:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e890:	eddf 6a4e 	vldr	s13, [pc, #312]	; 2405e9cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
2405e894:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405e898:	4b47      	ldr	r3, [pc, #284]	; (2405e9b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405e89a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405e89c:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405e8a0:	ee07 3a90 	vmov	s15, r3
2405e8a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405e8a8:	ed97 6a03 	vldr	s12, [r7, #12]
2405e8ac:	eddf 5a44 	vldr	s11, [pc, #272]	; 2405e9c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
2405e8b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405e8b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405e8b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405e8bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405e8c0:	ee67 7a27 	vmul.f32	s15, s14, s15
2405e8c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2405e8c8:	e021      	b.n	2405e90e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2405e8ca:	697b      	ldr	r3, [r7, #20]
2405e8cc:	ee07 3a90 	vmov	s15, r3
2405e8d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e8d4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 2405e9c4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
2405e8d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405e8dc:	4b36      	ldr	r3, [pc, #216]	; (2405e9b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405e8de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405e8e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405e8e4:	ee07 3a90 	vmov	s15, r3
2405e8e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405e8ec:	ed97 6a03 	vldr	s12, [r7, #12]
2405e8f0:	eddf 5a33 	vldr	s11, [pc, #204]	; 2405e9c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
2405e8f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405e8f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405e8fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405e900:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405e904:	ee67 7a27 	vmul.f32	s15, s14, s15
2405e908:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2405e90c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
2405e90e:	4b2a      	ldr	r3, [pc, #168]	; (2405e9b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405e910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405e912:	0a5b      	lsrs	r3, r3, #9
2405e914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2405e918:	ee07 3a90 	vmov	s15, r3
2405e91c:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e920:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2405e924:	ee37 7a87 	vadd.f32	s14, s15, s14
2405e928:	edd7 6a07 	vldr	s13, [r7, #28]
2405e92c:	eec6 7a87 	vdiv.f32	s15, s13, s14
2405e930:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2405e934:	ee17 2a90 	vmov	r2, s15
2405e938:	687b      	ldr	r3, [r7, #4]
2405e93a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
2405e93c:	4b1e      	ldr	r3, [pc, #120]	; (2405e9b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405e93e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405e940:	0c1b      	lsrs	r3, r3, #16
2405e942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2405e946:	ee07 3a90 	vmov	s15, r3
2405e94a:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e94e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2405e952:	ee37 7a87 	vadd.f32	s14, s15, s14
2405e956:	edd7 6a07 	vldr	s13, [r7, #28]
2405e95a:	eec6 7a87 	vdiv.f32	s15, s13, s14
2405e95e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2405e962:	ee17 2a90 	vmov	r2, s15
2405e966:	687b      	ldr	r3, [r7, #4]
2405e968:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
2405e96a:	4b13      	ldr	r3, [pc, #76]	; (2405e9b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405e96c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405e96e:	0e1b      	lsrs	r3, r3, #24
2405e970:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2405e974:	ee07 3a90 	vmov	s15, r3
2405e978:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405e97c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2405e980:	ee37 7a87 	vadd.f32	s14, s15, s14
2405e984:	edd7 6a07 	vldr	s13, [r7, #28]
2405e988:	eec6 7a87 	vdiv.f32	s15, s13, s14
2405e98c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2405e990:	ee17 2a90 	vmov	r2, s15
2405e994:	687b      	ldr	r3, [r7, #4]
2405e996:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
2405e998:	e008      	b.n	2405e9ac <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
2405e99a:	687b      	ldr	r3, [r7, #4]
2405e99c:	2200      	movs	r2, #0
2405e99e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
2405e9a0:	687b      	ldr	r3, [r7, #4]
2405e9a2:	2200      	movs	r2, #0
2405e9a4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
2405e9a6:	687b      	ldr	r3, [r7, #4]
2405e9a8:	2200      	movs	r2, #0
2405e9aa:	609a      	str	r2, [r3, #8]
}
2405e9ac:	bf00      	nop
2405e9ae:	3724      	adds	r7, #36	; 0x24
2405e9b0:	46bd      	mov	sp, r7
2405e9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
2405e9b6:	4770      	bx	lr
2405e9b8:	58024400 	.word	0x58024400
2405e9bc:	03d09000 	.word	0x03d09000
2405e9c0:	46000000 	.word	0x46000000
2405e9c4:	4c742400 	.word	0x4c742400
2405e9c8:	4a742400 	.word	0x4a742400
2405e9cc:	4bb71b00 	.word	0x4bb71b00

2405e9d0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
2405e9d0:	b580      	push	{r7, lr}
2405e9d2:	b084      	sub	sp, #16
2405e9d4:	af00      	add	r7, sp, #0
2405e9d6:	6078      	str	r0, [r7, #4]
2405e9d8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
2405e9da:	2300      	movs	r3, #0
2405e9dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
2405e9de:	4b53      	ldr	r3, [pc, #332]	; (2405eb2c <RCCEx_PLL2_Config+0x15c>)
2405e9e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405e9e2:	f003 0303 	and.w	r3, r3, #3
2405e9e6:	2b03      	cmp	r3, #3
2405e9e8:	d101      	bne.n	2405e9ee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
2405e9ea:	2301      	movs	r3, #1
2405e9ec:	e099      	b.n	2405eb22 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
2405e9ee:	4b4f      	ldr	r3, [pc, #316]	; (2405eb2c <RCCEx_PLL2_Config+0x15c>)
2405e9f0:	681b      	ldr	r3, [r3, #0]
2405e9f2:	4a4e      	ldr	r2, [pc, #312]	; (2405eb2c <RCCEx_PLL2_Config+0x15c>)
2405e9f4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
2405e9f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
2405e9fa:	f7f5 f9e7 	bl	24053dcc <HAL_GetTick>
2405e9fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
2405ea00:	e008      	b.n	2405ea14 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
2405ea02:	f7f5 f9e3 	bl	24053dcc <HAL_GetTick>
2405ea06:	4602      	mov	r2, r0
2405ea08:	68bb      	ldr	r3, [r7, #8]
2405ea0a:	1ad3      	subs	r3, r2, r3
2405ea0c:	2b02      	cmp	r3, #2
2405ea0e:	d901      	bls.n	2405ea14 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
2405ea10:	2303      	movs	r3, #3
2405ea12:	e086      	b.n	2405eb22 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
2405ea14:	4b45      	ldr	r3, [pc, #276]	; (2405eb2c <RCCEx_PLL2_Config+0x15c>)
2405ea16:	681b      	ldr	r3, [r3, #0]
2405ea18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2405ea1c:	2b00      	cmp	r3, #0
2405ea1e:	d1f0      	bne.n	2405ea02 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
2405ea20:	4b42      	ldr	r3, [pc, #264]	; (2405eb2c <RCCEx_PLL2_Config+0x15c>)
2405ea22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405ea24:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
2405ea28:	687b      	ldr	r3, [r7, #4]
2405ea2a:	681b      	ldr	r3, [r3, #0]
2405ea2c:	031b      	lsls	r3, r3, #12
2405ea2e:	493f      	ldr	r1, [pc, #252]	; (2405eb2c <RCCEx_PLL2_Config+0x15c>)
2405ea30:	4313      	orrs	r3, r2
2405ea32:	628b      	str	r3, [r1, #40]	; 0x28
2405ea34:	687b      	ldr	r3, [r7, #4]
2405ea36:	685b      	ldr	r3, [r3, #4]
2405ea38:	3b01      	subs	r3, #1
2405ea3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
2405ea3e:	687b      	ldr	r3, [r7, #4]
2405ea40:	689b      	ldr	r3, [r3, #8]
2405ea42:	3b01      	subs	r3, #1
2405ea44:	025b      	lsls	r3, r3, #9
2405ea46:	b29b      	uxth	r3, r3
2405ea48:	431a      	orrs	r2, r3
2405ea4a:	687b      	ldr	r3, [r7, #4]
2405ea4c:	68db      	ldr	r3, [r3, #12]
2405ea4e:	3b01      	subs	r3, #1
2405ea50:	041b      	lsls	r3, r3, #16
2405ea52:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
2405ea56:	431a      	orrs	r2, r3
2405ea58:	687b      	ldr	r3, [r7, #4]
2405ea5a:	691b      	ldr	r3, [r3, #16]
2405ea5c:	3b01      	subs	r3, #1
2405ea5e:	061b      	lsls	r3, r3, #24
2405ea60:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
2405ea64:	4931      	ldr	r1, [pc, #196]	; (2405eb2c <RCCEx_PLL2_Config+0x15c>)
2405ea66:	4313      	orrs	r3, r2
2405ea68:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
2405ea6a:	4b30      	ldr	r3, [pc, #192]	; (2405eb2c <RCCEx_PLL2_Config+0x15c>)
2405ea6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405ea6e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
2405ea72:	687b      	ldr	r3, [r7, #4]
2405ea74:	695b      	ldr	r3, [r3, #20]
2405ea76:	492d      	ldr	r1, [pc, #180]	; (2405eb2c <RCCEx_PLL2_Config+0x15c>)
2405ea78:	4313      	orrs	r3, r2
2405ea7a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
2405ea7c:	4b2b      	ldr	r3, [pc, #172]	; (2405eb2c <RCCEx_PLL2_Config+0x15c>)
2405ea7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405ea80:	f023 0220 	bic.w	r2, r3, #32
2405ea84:	687b      	ldr	r3, [r7, #4]
2405ea86:	699b      	ldr	r3, [r3, #24]
2405ea88:	4928      	ldr	r1, [pc, #160]	; (2405eb2c <RCCEx_PLL2_Config+0x15c>)
2405ea8a:	4313      	orrs	r3, r2
2405ea8c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
2405ea8e:	4b27      	ldr	r3, [pc, #156]	; (2405eb2c <RCCEx_PLL2_Config+0x15c>)
2405ea90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405ea92:	4a26      	ldr	r2, [pc, #152]	; (2405eb2c <RCCEx_PLL2_Config+0x15c>)
2405ea94:	f023 0310 	bic.w	r3, r3, #16
2405ea98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
2405ea9a:	4b24      	ldr	r3, [pc, #144]	; (2405eb2c <RCCEx_PLL2_Config+0x15c>)
2405ea9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
2405ea9e:	4b24      	ldr	r3, [pc, #144]	; (2405eb30 <RCCEx_PLL2_Config+0x160>)
2405eaa0:	4013      	ands	r3, r2
2405eaa2:	687a      	ldr	r2, [r7, #4]
2405eaa4:	69d2      	ldr	r2, [r2, #28]
2405eaa6:	00d2      	lsls	r2, r2, #3
2405eaa8:	4920      	ldr	r1, [pc, #128]	; (2405eb2c <RCCEx_PLL2_Config+0x15c>)
2405eaaa:	4313      	orrs	r3, r2
2405eaac:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
2405eaae:	4b1f      	ldr	r3, [pc, #124]	; (2405eb2c <RCCEx_PLL2_Config+0x15c>)
2405eab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405eab2:	4a1e      	ldr	r2, [pc, #120]	; (2405eb2c <RCCEx_PLL2_Config+0x15c>)
2405eab4:	f043 0310 	orr.w	r3, r3, #16
2405eab8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
2405eaba:	683b      	ldr	r3, [r7, #0]
2405eabc:	2b00      	cmp	r3, #0
2405eabe:	d106      	bne.n	2405eace <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
2405eac0:	4b1a      	ldr	r3, [pc, #104]	; (2405eb2c <RCCEx_PLL2_Config+0x15c>)
2405eac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405eac4:	4a19      	ldr	r2, [pc, #100]	; (2405eb2c <RCCEx_PLL2_Config+0x15c>)
2405eac6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
2405eaca:	62d3      	str	r3, [r2, #44]	; 0x2c
2405eacc:	e00f      	b.n	2405eaee <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
2405eace:	683b      	ldr	r3, [r7, #0]
2405ead0:	2b01      	cmp	r3, #1
2405ead2:	d106      	bne.n	2405eae2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
2405ead4:	4b15      	ldr	r3, [pc, #84]	; (2405eb2c <RCCEx_PLL2_Config+0x15c>)
2405ead6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405ead8:	4a14      	ldr	r2, [pc, #80]	; (2405eb2c <RCCEx_PLL2_Config+0x15c>)
2405eada:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
2405eade:	62d3      	str	r3, [r2, #44]	; 0x2c
2405eae0:	e005      	b.n	2405eaee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
2405eae2:	4b12      	ldr	r3, [pc, #72]	; (2405eb2c <RCCEx_PLL2_Config+0x15c>)
2405eae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405eae6:	4a11      	ldr	r2, [pc, #68]	; (2405eb2c <RCCEx_PLL2_Config+0x15c>)
2405eae8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
2405eaec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
2405eaee:	4b0f      	ldr	r3, [pc, #60]	; (2405eb2c <RCCEx_PLL2_Config+0x15c>)
2405eaf0:	681b      	ldr	r3, [r3, #0]
2405eaf2:	4a0e      	ldr	r2, [pc, #56]	; (2405eb2c <RCCEx_PLL2_Config+0x15c>)
2405eaf4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
2405eaf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
2405eafa:	f7f5 f967 	bl	24053dcc <HAL_GetTick>
2405eafe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
2405eb00:	e008      	b.n	2405eb14 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
2405eb02:	f7f5 f963 	bl	24053dcc <HAL_GetTick>
2405eb06:	4602      	mov	r2, r0
2405eb08:	68bb      	ldr	r3, [r7, #8]
2405eb0a:	1ad3      	subs	r3, r2, r3
2405eb0c:	2b02      	cmp	r3, #2
2405eb0e:	d901      	bls.n	2405eb14 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
2405eb10:	2303      	movs	r3, #3
2405eb12:	e006      	b.n	2405eb22 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
2405eb14:	4b05      	ldr	r3, [pc, #20]	; (2405eb2c <RCCEx_PLL2_Config+0x15c>)
2405eb16:	681b      	ldr	r3, [r3, #0]
2405eb18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2405eb1c:	2b00      	cmp	r3, #0
2405eb1e:	d0f0      	beq.n	2405eb02 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
2405eb20:	7bfb      	ldrb	r3, [r7, #15]
}
2405eb22:	4618      	mov	r0, r3
2405eb24:	3710      	adds	r7, #16
2405eb26:	46bd      	mov	sp, r7
2405eb28:	bd80      	pop	{r7, pc}
2405eb2a:	bf00      	nop
2405eb2c:	58024400 	.word	0x58024400
2405eb30:	ffff0007 	.word	0xffff0007

2405eb34 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
2405eb34:	b580      	push	{r7, lr}
2405eb36:	b084      	sub	sp, #16
2405eb38:	af00      	add	r7, sp, #0
2405eb3a:	6078      	str	r0, [r7, #4]
2405eb3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
2405eb3e:	2300      	movs	r3, #0
2405eb40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
2405eb42:	4b53      	ldr	r3, [pc, #332]	; (2405ec90 <RCCEx_PLL3_Config+0x15c>)
2405eb44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405eb46:	f003 0303 	and.w	r3, r3, #3
2405eb4a:	2b03      	cmp	r3, #3
2405eb4c:	d101      	bne.n	2405eb52 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
2405eb4e:	2301      	movs	r3, #1
2405eb50:	e099      	b.n	2405ec86 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
2405eb52:	4b4f      	ldr	r3, [pc, #316]	; (2405ec90 <RCCEx_PLL3_Config+0x15c>)
2405eb54:	681b      	ldr	r3, [r3, #0]
2405eb56:	4a4e      	ldr	r2, [pc, #312]	; (2405ec90 <RCCEx_PLL3_Config+0x15c>)
2405eb58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
2405eb5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
2405eb5e:	f7f5 f935 	bl	24053dcc <HAL_GetTick>
2405eb62:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
2405eb64:	e008      	b.n	2405eb78 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
2405eb66:	f7f5 f931 	bl	24053dcc <HAL_GetTick>
2405eb6a:	4602      	mov	r2, r0
2405eb6c:	68bb      	ldr	r3, [r7, #8]
2405eb6e:	1ad3      	subs	r3, r2, r3
2405eb70:	2b02      	cmp	r3, #2
2405eb72:	d901      	bls.n	2405eb78 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
2405eb74:	2303      	movs	r3, #3
2405eb76:	e086      	b.n	2405ec86 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
2405eb78:	4b45      	ldr	r3, [pc, #276]	; (2405ec90 <RCCEx_PLL3_Config+0x15c>)
2405eb7a:	681b      	ldr	r3, [r3, #0]
2405eb7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2405eb80:	2b00      	cmp	r3, #0
2405eb82:	d1f0      	bne.n	2405eb66 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
2405eb84:	4b42      	ldr	r3, [pc, #264]	; (2405ec90 <RCCEx_PLL3_Config+0x15c>)
2405eb86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405eb88:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
2405eb8c:	687b      	ldr	r3, [r7, #4]
2405eb8e:	681b      	ldr	r3, [r3, #0]
2405eb90:	051b      	lsls	r3, r3, #20
2405eb92:	493f      	ldr	r1, [pc, #252]	; (2405ec90 <RCCEx_PLL3_Config+0x15c>)
2405eb94:	4313      	orrs	r3, r2
2405eb96:	628b      	str	r3, [r1, #40]	; 0x28
2405eb98:	687b      	ldr	r3, [r7, #4]
2405eb9a:	685b      	ldr	r3, [r3, #4]
2405eb9c:	3b01      	subs	r3, #1
2405eb9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
2405eba2:	687b      	ldr	r3, [r7, #4]
2405eba4:	689b      	ldr	r3, [r3, #8]
2405eba6:	3b01      	subs	r3, #1
2405eba8:	025b      	lsls	r3, r3, #9
2405ebaa:	b29b      	uxth	r3, r3
2405ebac:	431a      	orrs	r2, r3
2405ebae:	687b      	ldr	r3, [r7, #4]
2405ebb0:	68db      	ldr	r3, [r3, #12]
2405ebb2:	3b01      	subs	r3, #1
2405ebb4:	041b      	lsls	r3, r3, #16
2405ebb6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
2405ebba:	431a      	orrs	r2, r3
2405ebbc:	687b      	ldr	r3, [r7, #4]
2405ebbe:	691b      	ldr	r3, [r3, #16]
2405ebc0:	3b01      	subs	r3, #1
2405ebc2:	061b      	lsls	r3, r3, #24
2405ebc4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
2405ebc8:	4931      	ldr	r1, [pc, #196]	; (2405ec90 <RCCEx_PLL3_Config+0x15c>)
2405ebca:	4313      	orrs	r3, r2
2405ebcc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
2405ebce:	4b30      	ldr	r3, [pc, #192]	; (2405ec90 <RCCEx_PLL3_Config+0x15c>)
2405ebd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405ebd2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
2405ebd6:	687b      	ldr	r3, [r7, #4]
2405ebd8:	695b      	ldr	r3, [r3, #20]
2405ebda:	492d      	ldr	r1, [pc, #180]	; (2405ec90 <RCCEx_PLL3_Config+0x15c>)
2405ebdc:	4313      	orrs	r3, r2
2405ebde:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
2405ebe0:	4b2b      	ldr	r3, [pc, #172]	; (2405ec90 <RCCEx_PLL3_Config+0x15c>)
2405ebe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405ebe4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
2405ebe8:	687b      	ldr	r3, [r7, #4]
2405ebea:	699b      	ldr	r3, [r3, #24]
2405ebec:	4928      	ldr	r1, [pc, #160]	; (2405ec90 <RCCEx_PLL3_Config+0x15c>)
2405ebee:	4313      	orrs	r3, r2
2405ebf0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
2405ebf2:	4b27      	ldr	r3, [pc, #156]	; (2405ec90 <RCCEx_PLL3_Config+0x15c>)
2405ebf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405ebf6:	4a26      	ldr	r2, [pc, #152]	; (2405ec90 <RCCEx_PLL3_Config+0x15c>)
2405ebf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
2405ebfc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
2405ebfe:	4b24      	ldr	r3, [pc, #144]	; (2405ec90 <RCCEx_PLL3_Config+0x15c>)
2405ec00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
2405ec02:	4b24      	ldr	r3, [pc, #144]	; (2405ec94 <RCCEx_PLL3_Config+0x160>)
2405ec04:	4013      	ands	r3, r2
2405ec06:	687a      	ldr	r2, [r7, #4]
2405ec08:	69d2      	ldr	r2, [r2, #28]
2405ec0a:	00d2      	lsls	r2, r2, #3
2405ec0c:	4920      	ldr	r1, [pc, #128]	; (2405ec90 <RCCEx_PLL3_Config+0x15c>)
2405ec0e:	4313      	orrs	r3, r2
2405ec10:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
2405ec12:	4b1f      	ldr	r3, [pc, #124]	; (2405ec90 <RCCEx_PLL3_Config+0x15c>)
2405ec14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405ec16:	4a1e      	ldr	r2, [pc, #120]	; (2405ec90 <RCCEx_PLL3_Config+0x15c>)
2405ec18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2405ec1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
2405ec1e:	683b      	ldr	r3, [r7, #0]
2405ec20:	2b00      	cmp	r3, #0
2405ec22:	d106      	bne.n	2405ec32 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
2405ec24:	4b1a      	ldr	r3, [pc, #104]	; (2405ec90 <RCCEx_PLL3_Config+0x15c>)
2405ec26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405ec28:	4a19      	ldr	r2, [pc, #100]	; (2405ec90 <RCCEx_PLL3_Config+0x15c>)
2405ec2a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
2405ec2e:	62d3      	str	r3, [r2, #44]	; 0x2c
2405ec30:	e00f      	b.n	2405ec52 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
2405ec32:	683b      	ldr	r3, [r7, #0]
2405ec34:	2b01      	cmp	r3, #1
2405ec36:	d106      	bne.n	2405ec46 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
2405ec38:	4b15      	ldr	r3, [pc, #84]	; (2405ec90 <RCCEx_PLL3_Config+0x15c>)
2405ec3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405ec3c:	4a14      	ldr	r2, [pc, #80]	; (2405ec90 <RCCEx_PLL3_Config+0x15c>)
2405ec3e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
2405ec42:	62d3      	str	r3, [r2, #44]	; 0x2c
2405ec44:	e005      	b.n	2405ec52 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
2405ec46:	4b12      	ldr	r3, [pc, #72]	; (2405ec90 <RCCEx_PLL3_Config+0x15c>)
2405ec48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405ec4a:	4a11      	ldr	r2, [pc, #68]	; (2405ec90 <RCCEx_PLL3_Config+0x15c>)
2405ec4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
2405ec50:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
2405ec52:	4b0f      	ldr	r3, [pc, #60]	; (2405ec90 <RCCEx_PLL3_Config+0x15c>)
2405ec54:	681b      	ldr	r3, [r3, #0]
2405ec56:	4a0e      	ldr	r2, [pc, #56]	; (2405ec90 <RCCEx_PLL3_Config+0x15c>)
2405ec58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2405ec5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
2405ec5e:	f7f5 f8b5 	bl	24053dcc <HAL_GetTick>
2405ec62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
2405ec64:	e008      	b.n	2405ec78 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
2405ec66:	f7f5 f8b1 	bl	24053dcc <HAL_GetTick>
2405ec6a:	4602      	mov	r2, r0
2405ec6c:	68bb      	ldr	r3, [r7, #8]
2405ec6e:	1ad3      	subs	r3, r2, r3
2405ec70:	2b02      	cmp	r3, #2
2405ec72:	d901      	bls.n	2405ec78 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
2405ec74:	2303      	movs	r3, #3
2405ec76:	e006      	b.n	2405ec86 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
2405ec78:	4b05      	ldr	r3, [pc, #20]	; (2405ec90 <RCCEx_PLL3_Config+0x15c>)
2405ec7a:	681b      	ldr	r3, [r3, #0]
2405ec7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2405ec80:	2b00      	cmp	r3, #0
2405ec82:	d0f0      	beq.n	2405ec66 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
2405ec84:	7bfb      	ldrb	r3, [r7, #15]
}
2405ec86:	4618      	mov	r0, r3
2405ec88:	3710      	adds	r7, #16
2405ec8a:	46bd      	mov	sp, r7
2405ec8c:	bd80      	pop	{r7, pc}
2405ec8e:	bf00      	nop
2405ec90:	58024400 	.word	0x58024400
2405ec94:	ffff0007 	.word	0xffff0007

2405ec98 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
2405ec98:	b580      	push	{r7, lr}
2405ec9a:	b084      	sub	sp, #16
2405ec9c:	af00      	add	r7, sp, #0
2405ec9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
2405eca0:	2301      	movs	r3, #1
2405eca2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
2405eca4:	687b      	ldr	r3, [r7, #4]
2405eca6:	2b00      	cmp	r3, #0
2405eca8:	d074      	beq.n	2405ed94 <HAL_RTC_Init+0xfc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
2405ecaa:	687b      	ldr	r3, [r7, #4]
2405ecac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
2405ecb0:	b2db      	uxtb	r3, r3
2405ecb2:	2b00      	cmp	r3, #0
2405ecb4:	d106      	bne.n	2405ecc4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
2405ecb6:	687b      	ldr	r3, [r7, #4]
2405ecb8:	2200      	movs	r2, #0
2405ecba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
2405ecbe:	6878      	ldr	r0, [r7, #4]
2405ecc0:	f7f4 fc82 	bl	240535c8 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
2405ecc4:	687b      	ldr	r3, [r7, #4]
2405ecc6:	2202      	movs	r2, #2
2405ecc8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
2405eccc:	687b      	ldr	r3, [r7, #4]
2405ecce:	681b      	ldr	r3, [r3, #0]
2405ecd0:	68db      	ldr	r3, [r3, #12]
2405ecd2:	f003 0310 	and.w	r3, r3, #16
2405ecd6:	2b10      	cmp	r3, #16
2405ecd8:	d053      	beq.n	2405ed82 <HAL_RTC_Init+0xea>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
2405ecda:	687b      	ldr	r3, [r7, #4]
2405ecdc:	681b      	ldr	r3, [r3, #0]
2405ecde:	22ca      	movs	r2, #202	; 0xca
2405ece0:	625a      	str	r2, [r3, #36]	; 0x24
2405ece2:	687b      	ldr	r3, [r7, #4]
2405ece4:	681b      	ldr	r3, [r3, #0]
2405ece6:	2253      	movs	r2, #83	; 0x53
2405ece8:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
2405ecea:	6878      	ldr	r0, [r7, #4]
2405ecec:	f000 fa4e 	bl	2405f18c <RTC_EnterInitMode>
2405ecf0:	4603      	mov	r3, r0
2405ecf2:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
2405ecf4:	7bfb      	ldrb	r3, [r7, #15]
2405ecf6:	2b00      	cmp	r3, #0
2405ecf8:	d124      	bne.n	2405ed44 <HAL_RTC_Init+0xac>
      {
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
2405ecfa:	687b      	ldr	r3, [r7, #4]
2405ecfc:	681b      	ldr	r3, [r3, #0]
2405ecfe:	6999      	ldr	r1, [r3, #24]
2405ed00:	687b      	ldr	r3, [r7, #4]
2405ed02:	681a      	ldr	r2, [r3, #0]
2405ed04:	4b26      	ldr	r3, [pc, #152]	; (2405eda0 <HAL_RTC_Init+0x108>)
2405ed06:	400b      	ands	r3, r1
2405ed08:	6193      	str	r3, [r2, #24]
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
2405ed0a:	687b      	ldr	r3, [r7, #4]
2405ed0c:	681b      	ldr	r3, [r3, #0]
2405ed0e:	6999      	ldr	r1, [r3, #24]
2405ed10:	687b      	ldr	r3, [r7, #4]
2405ed12:	685a      	ldr	r2, [r3, #4]
2405ed14:	687b      	ldr	r3, [r7, #4]
2405ed16:	691b      	ldr	r3, [r3, #16]
2405ed18:	431a      	orrs	r2, r3
2405ed1a:	687b      	ldr	r3, [r7, #4]
2405ed1c:	699b      	ldr	r3, [r3, #24]
2405ed1e:	431a      	orrs	r2, r3
2405ed20:	687b      	ldr	r3, [r7, #4]
2405ed22:	681b      	ldr	r3, [r3, #0]
2405ed24:	430a      	orrs	r2, r1
2405ed26:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
2405ed28:	687b      	ldr	r3, [r7, #4]
2405ed2a:	689b      	ldr	r3, [r3, #8]
2405ed2c:	0419      	lsls	r1, r3, #16
2405ed2e:	687b      	ldr	r3, [r7, #4]
2405ed30:	68da      	ldr	r2, [r3, #12]
2405ed32:	687b      	ldr	r3, [r7, #4]
2405ed34:	681b      	ldr	r3, [r3, #0]
2405ed36:	430a      	orrs	r2, r1
2405ed38:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
2405ed3a:	6878      	ldr	r0, [r7, #4]
2405ed3c:	f000 fa5c 	bl	2405f1f8 <RTC_ExitInitMode>
2405ed40:	4603      	mov	r3, r0
2405ed42:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
2405ed44:	7bfb      	ldrb	r3, [r7, #15]
2405ed46:	2b00      	cmp	r3, #0
2405ed48:	d116      	bne.n	2405ed78 <HAL_RTC_Init+0xe0>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
2405ed4a:	687b      	ldr	r3, [r7, #4]
2405ed4c:	681b      	ldr	r3, [r3, #0]
2405ed4e:	699a      	ldr	r2, [r3, #24]
2405ed50:	687b      	ldr	r3, [r7, #4]
2405ed52:	681b      	ldr	r3, [r3, #0]
2405ed54:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
2405ed58:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
2405ed5a:	687b      	ldr	r3, [r7, #4]
2405ed5c:	681b      	ldr	r3, [r3, #0]
2405ed5e:	6999      	ldr	r1, [r3, #24]
2405ed60:	687b      	ldr	r3, [r7, #4]
2405ed62:	6a1a      	ldr	r2, [r3, #32]
2405ed64:	687b      	ldr	r3, [r7, #4]
2405ed66:	69db      	ldr	r3, [r3, #28]
2405ed68:	431a      	orrs	r2, r3
2405ed6a:	687b      	ldr	r3, [r7, #4]
2405ed6c:	695b      	ldr	r3, [r3, #20]
2405ed6e:	431a      	orrs	r2, r3
2405ed70:	687b      	ldr	r3, [r7, #4]
2405ed72:	681b      	ldr	r3, [r3, #0]
2405ed74:	430a      	orrs	r2, r1
2405ed76:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
2405ed78:	687b      	ldr	r3, [r7, #4]
2405ed7a:	681b      	ldr	r3, [r3, #0]
2405ed7c:	22ff      	movs	r2, #255	; 0xff
2405ed7e:	625a      	str	r2, [r3, #36]	; 0x24
2405ed80:	e001      	b.n	2405ed86 <HAL_RTC_Init+0xee>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
2405ed82:	2300      	movs	r3, #0
2405ed84:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
2405ed86:	7bfb      	ldrb	r3, [r7, #15]
2405ed88:	2b00      	cmp	r3, #0
2405ed8a:	d103      	bne.n	2405ed94 <HAL_RTC_Init+0xfc>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
2405ed8c:	687b      	ldr	r3, [r7, #4]
2405ed8e:	2201      	movs	r2, #1
2405ed90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  /* return status */
  return status;
2405ed94:	7bfb      	ldrb	r3, [r7, #15]
}
2405ed96:	4618      	mov	r0, r3
2405ed98:	3710      	adds	r7, #16
2405ed9a:	46bd      	mov	sp, r7
2405ed9c:	bd80      	pop	{r7, pc}
2405ed9e:	bf00      	nop
2405eda0:	fb8fffbf 	.word	0xfb8fffbf

2405eda4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
2405eda4:	b590      	push	{r4, r7, lr}
2405eda6:	b087      	sub	sp, #28
2405eda8:	af00      	add	r7, sp, #0
2405edaa:	60f8      	str	r0, [r7, #12]
2405edac:	60b9      	str	r1, [r7, #8]
2405edae:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
2405edb0:	68fb      	ldr	r3, [r7, #12]
2405edb2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
2405edb6:	2b01      	cmp	r3, #1
2405edb8:	d101      	bne.n	2405edbe <HAL_RTC_SetTime+0x1a>
2405edba:	2302      	movs	r3, #2
2405edbc:	e089      	b.n	2405eed2 <HAL_RTC_SetTime+0x12e>
2405edbe:	68fb      	ldr	r3, [r7, #12]
2405edc0:	2201      	movs	r2, #1
2405edc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
2405edc6:	68fb      	ldr	r3, [r7, #12]
2405edc8:	2202      	movs	r2, #2
2405edca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
2405edce:	68fb      	ldr	r3, [r7, #12]
2405edd0:	681b      	ldr	r3, [r3, #0]
2405edd2:	22ca      	movs	r2, #202	; 0xca
2405edd4:	625a      	str	r2, [r3, #36]	; 0x24
2405edd6:	68fb      	ldr	r3, [r7, #12]
2405edd8:	681b      	ldr	r3, [r3, #0]
2405edda:	2253      	movs	r2, #83	; 0x53
2405eddc:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
2405edde:	68f8      	ldr	r0, [r7, #12]
2405ede0:	f000 f9d4 	bl	2405f18c <RTC_EnterInitMode>
2405ede4:	4603      	mov	r3, r0
2405ede6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
2405ede8:	7cfb      	ldrb	r3, [r7, #19]
2405edea:	2b00      	cmp	r3, #0
2405edec:	d161      	bne.n	2405eeb2 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
2405edee:	687b      	ldr	r3, [r7, #4]
2405edf0:	2b00      	cmp	r3, #0
2405edf2:	d126      	bne.n	2405ee42 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
2405edf4:	68fb      	ldr	r3, [r7, #12]
2405edf6:	681b      	ldr	r3, [r3, #0]
2405edf8:	699b      	ldr	r3, [r3, #24]
2405edfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
2405edfe:	2b00      	cmp	r3, #0
2405ee00:	d102      	bne.n	2405ee08 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
2405ee02:	68bb      	ldr	r3, [r7, #8]
2405ee04:	2200      	movs	r2, #0
2405ee06:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
2405ee08:	68bb      	ldr	r3, [r7, #8]
2405ee0a:	781b      	ldrb	r3, [r3, #0]
2405ee0c:	4618      	mov	r0, r3
2405ee0e:	f000 fa31 	bl	2405f274 <RTC_ByteToBcd2>
2405ee12:	4603      	mov	r3, r0
2405ee14:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
2405ee16:	68bb      	ldr	r3, [r7, #8]
2405ee18:	785b      	ldrb	r3, [r3, #1]
2405ee1a:	4618      	mov	r0, r3
2405ee1c:	f000 fa2a 	bl	2405f274 <RTC_ByteToBcd2>
2405ee20:	4603      	mov	r3, r0
2405ee22:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
2405ee24:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
2405ee26:	68bb      	ldr	r3, [r7, #8]
2405ee28:	789b      	ldrb	r3, [r3, #2]
2405ee2a:	4618      	mov	r0, r3
2405ee2c:	f000 fa22 	bl	2405f274 <RTC_ByteToBcd2>
2405ee30:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
2405ee32:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
2405ee36:	68bb      	ldr	r3, [r7, #8]
2405ee38:	78db      	ldrb	r3, [r3, #3]
2405ee3a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
2405ee3c:	4313      	orrs	r3, r2
2405ee3e:	617b      	str	r3, [r7, #20]
2405ee40:	e018      	b.n	2405ee74 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
2405ee42:	68fb      	ldr	r3, [r7, #12]
2405ee44:	681b      	ldr	r3, [r3, #0]
2405ee46:	699b      	ldr	r3, [r3, #24]
2405ee48:	f003 0340 	and.w	r3, r3, #64	; 0x40
2405ee4c:	2b00      	cmp	r3, #0
2405ee4e:	d102      	bne.n	2405ee56 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
2405ee50:	68bb      	ldr	r3, [r7, #8]
2405ee52:	2200      	movs	r2, #0
2405ee54:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
2405ee56:	68bb      	ldr	r3, [r7, #8]
2405ee58:	781b      	ldrb	r3, [r3, #0]
2405ee5a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
2405ee5c:	68bb      	ldr	r3, [r7, #8]
2405ee5e:	785b      	ldrb	r3, [r3, #1]
2405ee60:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
2405ee62:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
2405ee64:	68ba      	ldr	r2, [r7, #8]
2405ee66:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
2405ee68:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
2405ee6a:	68bb      	ldr	r3, [r7, #8]
2405ee6c:	78db      	ldrb	r3, [r3, #3]
2405ee6e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
2405ee70:	4313      	orrs	r3, r2
2405ee72:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
2405ee74:	68fb      	ldr	r3, [r7, #12]
2405ee76:	681a      	ldr	r2, [r3, #0]
2405ee78:	6979      	ldr	r1, [r7, #20]
2405ee7a:	4b18      	ldr	r3, [pc, #96]	; (2405eedc <HAL_RTC_SetTime+0x138>)
2405ee7c:	400b      	ands	r3, r1
2405ee7e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
2405ee80:	68fb      	ldr	r3, [r7, #12]
2405ee82:	681b      	ldr	r3, [r3, #0]
2405ee84:	699a      	ldr	r2, [r3, #24]
2405ee86:	68fb      	ldr	r3, [r7, #12]
2405ee88:	681b      	ldr	r3, [r3, #0]
2405ee8a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
2405ee8e:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
2405ee90:	68fb      	ldr	r3, [r7, #12]
2405ee92:	681b      	ldr	r3, [r3, #0]
2405ee94:	6999      	ldr	r1, [r3, #24]
2405ee96:	68bb      	ldr	r3, [r7, #8]
2405ee98:	68da      	ldr	r2, [r3, #12]
2405ee9a:	68bb      	ldr	r3, [r7, #8]
2405ee9c:	691b      	ldr	r3, [r3, #16]
2405ee9e:	431a      	orrs	r2, r3
2405eea0:	68fb      	ldr	r3, [r7, #12]
2405eea2:	681b      	ldr	r3, [r3, #0]
2405eea4:	430a      	orrs	r2, r1
2405eea6:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
2405eea8:	68f8      	ldr	r0, [r7, #12]
2405eeaa:	f000 f9a5 	bl	2405f1f8 <RTC_ExitInitMode>
2405eeae:	4603      	mov	r3, r0
2405eeb0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
2405eeb2:	68fb      	ldr	r3, [r7, #12]
2405eeb4:	681b      	ldr	r3, [r3, #0]
2405eeb6:	22ff      	movs	r2, #255	; 0xff
2405eeb8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
2405eeba:	7cfb      	ldrb	r3, [r7, #19]
2405eebc:	2b00      	cmp	r3, #0
2405eebe:	d103      	bne.n	2405eec8 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
2405eec0:	68fb      	ldr	r3, [r7, #12]
2405eec2:	2201      	movs	r2, #1
2405eec4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
2405eec8:	68fb      	ldr	r3, [r7, #12]
2405eeca:	2200      	movs	r2, #0
2405eecc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
2405eed0:	7cfb      	ldrb	r3, [r7, #19]
}
2405eed2:	4618      	mov	r0, r3
2405eed4:	371c      	adds	r7, #28
2405eed6:	46bd      	mov	sp, r7
2405eed8:	bd90      	pop	{r4, r7, pc}
2405eeda:	bf00      	nop
2405eedc:	007f7f7f 	.word	0x007f7f7f

2405eee0 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
2405eee0:	b580      	push	{r7, lr}
2405eee2:	b086      	sub	sp, #24
2405eee4:	af00      	add	r7, sp, #0
2405eee6:	60f8      	str	r0, [r7, #12]
2405eee8:	60b9      	str	r1, [r7, #8]
2405eeea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
2405eeec:	68fb      	ldr	r3, [r7, #12]
2405eeee:	681b      	ldr	r3, [r3, #0]
2405eef0:	689a      	ldr	r2, [r3, #8]
2405eef2:	68bb      	ldr	r3, [r7, #8]
2405eef4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
2405eef6:	68fb      	ldr	r3, [r7, #12]
2405eef8:	681b      	ldr	r3, [r3, #0]
2405eefa:	691b      	ldr	r3, [r3, #16]
2405eefc:	f3c3 020e 	ubfx	r2, r3, #0, #15
2405ef00:	68bb      	ldr	r3, [r7, #8]
2405ef02:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
2405ef04:	68fb      	ldr	r3, [r7, #12]
2405ef06:	681b      	ldr	r3, [r3, #0]
2405ef08:	681a      	ldr	r2, [r3, #0]
2405ef0a:	4b22      	ldr	r3, [pc, #136]	; (2405ef94 <HAL_RTC_GetTime+0xb4>)
2405ef0c:	4013      	ands	r3, r2
2405ef0e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
2405ef10:	697b      	ldr	r3, [r7, #20]
2405ef12:	0c1b      	lsrs	r3, r3, #16
2405ef14:	b2db      	uxtb	r3, r3
2405ef16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2405ef1a:	b2da      	uxtb	r2, r3
2405ef1c:	68bb      	ldr	r3, [r7, #8]
2405ef1e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
2405ef20:	697b      	ldr	r3, [r7, #20]
2405ef22:	0a1b      	lsrs	r3, r3, #8
2405ef24:	b2db      	uxtb	r3, r3
2405ef26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2405ef2a:	b2da      	uxtb	r2, r3
2405ef2c:	68bb      	ldr	r3, [r7, #8]
2405ef2e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
2405ef30:	697b      	ldr	r3, [r7, #20]
2405ef32:	b2db      	uxtb	r3, r3
2405ef34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2405ef38:	b2da      	uxtb	r2, r3
2405ef3a:	68bb      	ldr	r3, [r7, #8]
2405ef3c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
2405ef3e:	697b      	ldr	r3, [r7, #20]
2405ef40:	0d9b      	lsrs	r3, r3, #22
2405ef42:	b2db      	uxtb	r3, r3
2405ef44:	f003 0301 	and.w	r3, r3, #1
2405ef48:	b2da      	uxtb	r2, r3
2405ef4a:	68bb      	ldr	r3, [r7, #8]
2405ef4c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
2405ef4e:	687b      	ldr	r3, [r7, #4]
2405ef50:	2b00      	cmp	r3, #0
2405ef52:	d11a      	bne.n	2405ef8a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
2405ef54:	68bb      	ldr	r3, [r7, #8]
2405ef56:	781b      	ldrb	r3, [r3, #0]
2405ef58:	4618      	mov	r0, r3
2405ef5a:	f000 f9ab 	bl	2405f2b4 <RTC_Bcd2ToByte>
2405ef5e:	4603      	mov	r3, r0
2405ef60:	461a      	mov	r2, r3
2405ef62:	68bb      	ldr	r3, [r7, #8]
2405ef64:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
2405ef66:	68bb      	ldr	r3, [r7, #8]
2405ef68:	785b      	ldrb	r3, [r3, #1]
2405ef6a:	4618      	mov	r0, r3
2405ef6c:	f000 f9a2 	bl	2405f2b4 <RTC_Bcd2ToByte>
2405ef70:	4603      	mov	r3, r0
2405ef72:	461a      	mov	r2, r3
2405ef74:	68bb      	ldr	r3, [r7, #8]
2405ef76:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
2405ef78:	68bb      	ldr	r3, [r7, #8]
2405ef7a:	789b      	ldrb	r3, [r3, #2]
2405ef7c:	4618      	mov	r0, r3
2405ef7e:	f000 f999 	bl	2405f2b4 <RTC_Bcd2ToByte>
2405ef82:	4603      	mov	r3, r0
2405ef84:	461a      	mov	r2, r3
2405ef86:	68bb      	ldr	r3, [r7, #8]
2405ef88:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
2405ef8a:	2300      	movs	r3, #0
}
2405ef8c:	4618      	mov	r0, r3
2405ef8e:	3718      	adds	r7, #24
2405ef90:	46bd      	mov	sp, r7
2405ef92:	bd80      	pop	{r7, pc}
2405ef94:	007f7f7f 	.word	0x007f7f7f

2405ef98 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
2405ef98:	b590      	push	{r4, r7, lr}
2405ef9a:	b087      	sub	sp, #28
2405ef9c:	af00      	add	r7, sp, #0
2405ef9e:	60f8      	str	r0, [r7, #12]
2405efa0:	60b9      	str	r1, [r7, #8]
2405efa2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
2405efa4:	68fb      	ldr	r3, [r7, #12]
2405efa6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
2405efaa:	2b01      	cmp	r3, #1
2405efac:	d101      	bne.n	2405efb2 <HAL_RTC_SetDate+0x1a>
2405efae:	2302      	movs	r3, #2
2405efb0:	e073      	b.n	2405f09a <HAL_RTC_SetDate+0x102>
2405efb2:	68fb      	ldr	r3, [r7, #12]
2405efb4:	2201      	movs	r2, #1
2405efb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
2405efba:	68fb      	ldr	r3, [r7, #12]
2405efbc:	2202      	movs	r2, #2
2405efbe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
2405efc2:	687b      	ldr	r3, [r7, #4]
2405efc4:	2b00      	cmp	r3, #0
2405efc6:	d10e      	bne.n	2405efe6 <HAL_RTC_SetDate+0x4e>
2405efc8:	68bb      	ldr	r3, [r7, #8]
2405efca:	785b      	ldrb	r3, [r3, #1]
2405efcc:	f003 0310 	and.w	r3, r3, #16
2405efd0:	2b00      	cmp	r3, #0
2405efd2:	d008      	beq.n	2405efe6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
2405efd4:	68bb      	ldr	r3, [r7, #8]
2405efd6:	785b      	ldrb	r3, [r3, #1]
2405efd8:	f023 0310 	bic.w	r3, r3, #16
2405efdc:	b2db      	uxtb	r3, r3
2405efde:	330a      	adds	r3, #10
2405efe0:	b2da      	uxtb	r2, r3
2405efe2:	68bb      	ldr	r3, [r7, #8]
2405efe4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
2405efe6:	687b      	ldr	r3, [r7, #4]
2405efe8:	2b00      	cmp	r3, #0
2405efea:	d11c      	bne.n	2405f026 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
2405efec:	68bb      	ldr	r3, [r7, #8]
2405efee:	78db      	ldrb	r3, [r3, #3]
2405eff0:	4618      	mov	r0, r3
2405eff2:	f000 f93f 	bl	2405f274 <RTC_ByteToBcd2>
2405eff6:	4603      	mov	r3, r0
2405eff8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
2405effa:	68bb      	ldr	r3, [r7, #8]
2405effc:	785b      	ldrb	r3, [r3, #1]
2405effe:	4618      	mov	r0, r3
2405f000:	f000 f938 	bl	2405f274 <RTC_ByteToBcd2>
2405f004:	4603      	mov	r3, r0
2405f006:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
2405f008:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
2405f00a:	68bb      	ldr	r3, [r7, #8]
2405f00c:	789b      	ldrb	r3, [r3, #2]
2405f00e:	4618      	mov	r0, r3
2405f010:	f000 f930 	bl	2405f274 <RTC_ByteToBcd2>
2405f014:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
2405f016:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
2405f01a:	68bb      	ldr	r3, [r7, #8]
2405f01c:	781b      	ldrb	r3, [r3, #0]
2405f01e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
2405f020:	4313      	orrs	r3, r2
2405f022:	617b      	str	r3, [r7, #20]
2405f024:	e00e      	b.n	2405f044 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
2405f026:	68bb      	ldr	r3, [r7, #8]
2405f028:	78db      	ldrb	r3, [r3, #3]
2405f02a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
2405f02c:	68bb      	ldr	r3, [r7, #8]
2405f02e:	785b      	ldrb	r3, [r3, #1]
2405f030:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
2405f032:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
2405f034:	68ba      	ldr	r2, [r7, #8]
2405f036:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
2405f038:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
2405f03a:	68bb      	ldr	r3, [r7, #8]
2405f03c:	781b      	ldrb	r3, [r3, #0]
2405f03e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
2405f040:	4313      	orrs	r3, r2
2405f042:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
2405f044:	68fb      	ldr	r3, [r7, #12]
2405f046:	681b      	ldr	r3, [r3, #0]
2405f048:	22ca      	movs	r2, #202	; 0xca
2405f04a:	625a      	str	r2, [r3, #36]	; 0x24
2405f04c:	68fb      	ldr	r3, [r7, #12]
2405f04e:	681b      	ldr	r3, [r3, #0]
2405f050:	2253      	movs	r2, #83	; 0x53
2405f052:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
2405f054:	68f8      	ldr	r0, [r7, #12]
2405f056:	f000 f899 	bl	2405f18c <RTC_EnterInitMode>
2405f05a:	4603      	mov	r3, r0
2405f05c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
2405f05e:	7cfb      	ldrb	r3, [r7, #19]
2405f060:	2b00      	cmp	r3, #0
2405f062:	d10a      	bne.n	2405f07a <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
2405f064:	68fb      	ldr	r3, [r7, #12]
2405f066:	681a      	ldr	r2, [r3, #0]
2405f068:	6979      	ldr	r1, [r7, #20]
2405f06a:	4b0e      	ldr	r3, [pc, #56]	; (2405f0a4 <HAL_RTC_SetDate+0x10c>)
2405f06c:	400b      	ands	r3, r1
2405f06e:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
2405f070:	68f8      	ldr	r0, [r7, #12]
2405f072:	f000 f8c1 	bl	2405f1f8 <RTC_ExitInitMode>
2405f076:	4603      	mov	r3, r0
2405f078:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
2405f07a:	68fb      	ldr	r3, [r7, #12]
2405f07c:	681b      	ldr	r3, [r3, #0]
2405f07e:	22ff      	movs	r2, #255	; 0xff
2405f080:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
2405f082:	7cfb      	ldrb	r3, [r7, #19]
2405f084:	2b00      	cmp	r3, #0
2405f086:	d103      	bne.n	2405f090 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
2405f088:	68fb      	ldr	r3, [r7, #12]
2405f08a:	2201      	movs	r2, #1
2405f08c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
2405f090:	68fb      	ldr	r3, [r7, #12]
2405f092:	2200      	movs	r2, #0
2405f094:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
2405f098:	7cfb      	ldrb	r3, [r7, #19]


}
2405f09a:	4618      	mov	r0, r3
2405f09c:	371c      	adds	r7, #28
2405f09e:	46bd      	mov	sp, r7
2405f0a0:	bd90      	pop	{r4, r7, pc}
2405f0a2:	bf00      	nop
2405f0a4:	00ffff3f 	.word	0x00ffff3f

2405f0a8 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
2405f0a8:	b580      	push	{r7, lr}
2405f0aa:	b086      	sub	sp, #24
2405f0ac:	af00      	add	r7, sp, #0
2405f0ae:	60f8      	str	r0, [r7, #12]
2405f0b0:	60b9      	str	r1, [r7, #8]
2405f0b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
2405f0b4:	68fb      	ldr	r3, [r7, #12]
2405f0b6:	681b      	ldr	r3, [r3, #0]
2405f0b8:	685a      	ldr	r2, [r3, #4]
2405f0ba:	4b21      	ldr	r3, [pc, #132]	; (2405f140 <HAL_RTC_GetDate+0x98>)
2405f0bc:	4013      	ands	r3, r2
2405f0be:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
2405f0c0:	697b      	ldr	r3, [r7, #20]
2405f0c2:	0c1b      	lsrs	r3, r3, #16
2405f0c4:	b2da      	uxtb	r2, r3
2405f0c6:	68bb      	ldr	r3, [r7, #8]
2405f0c8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
2405f0ca:	697b      	ldr	r3, [r7, #20]
2405f0cc:	0a1b      	lsrs	r3, r3, #8
2405f0ce:	b2db      	uxtb	r3, r3
2405f0d0:	f003 031f 	and.w	r3, r3, #31
2405f0d4:	b2da      	uxtb	r2, r3
2405f0d6:	68bb      	ldr	r3, [r7, #8]
2405f0d8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
2405f0da:	697b      	ldr	r3, [r7, #20]
2405f0dc:	b2db      	uxtb	r3, r3
2405f0de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2405f0e2:	b2da      	uxtb	r2, r3
2405f0e4:	68bb      	ldr	r3, [r7, #8]
2405f0e6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
2405f0e8:	697b      	ldr	r3, [r7, #20]
2405f0ea:	0b5b      	lsrs	r3, r3, #13
2405f0ec:	b2db      	uxtb	r3, r3
2405f0ee:	f003 0307 	and.w	r3, r3, #7
2405f0f2:	b2da      	uxtb	r2, r3
2405f0f4:	68bb      	ldr	r3, [r7, #8]
2405f0f6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
2405f0f8:	687b      	ldr	r3, [r7, #4]
2405f0fa:	2b00      	cmp	r3, #0
2405f0fc:	d11a      	bne.n	2405f134 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
2405f0fe:	68bb      	ldr	r3, [r7, #8]
2405f100:	78db      	ldrb	r3, [r3, #3]
2405f102:	4618      	mov	r0, r3
2405f104:	f000 f8d6 	bl	2405f2b4 <RTC_Bcd2ToByte>
2405f108:	4603      	mov	r3, r0
2405f10a:	461a      	mov	r2, r3
2405f10c:	68bb      	ldr	r3, [r7, #8]
2405f10e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
2405f110:	68bb      	ldr	r3, [r7, #8]
2405f112:	785b      	ldrb	r3, [r3, #1]
2405f114:	4618      	mov	r0, r3
2405f116:	f000 f8cd 	bl	2405f2b4 <RTC_Bcd2ToByte>
2405f11a:	4603      	mov	r3, r0
2405f11c:	461a      	mov	r2, r3
2405f11e:	68bb      	ldr	r3, [r7, #8]
2405f120:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
2405f122:	68bb      	ldr	r3, [r7, #8]
2405f124:	789b      	ldrb	r3, [r3, #2]
2405f126:	4618      	mov	r0, r3
2405f128:	f000 f8c4 	bl	2405f2b4 <RTC_Bcd2ToByte>
2405f12c:	4603      	mov	r3, r0
2405f12e:	461a      	mov	r2, r3
2405f130:	68bb      	ldr	r3, [r7, #8]
2405f132:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
2405f134:	2300      	movs	r3, #0
}
2405f136:	4618      	mov	r0, r3
2405f138:	3718      	adds	r7, #24
2405f13a:	46bd      	mov	sp, r7
2405f13c:	bd80      	pop	{r7, pc}
2405f13e:	bf00      	nop
2405f140:	00ffff3f 	.word	0x00ffff3f

2405f144 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
2405f144:	b580      	push	{r7, lr}
2405f146:	b084      	sub	sp, #16
2405f148:	af00      	add	r7, sp, #0
2405f14a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
2405f14c:	687b      	ldr	r3, [r7, #4]
2405f14e:	681b      	ldr	r3, [r3, #0]
2405f150:	4a0d      	ldr	r2, [pc, #52]	; (2405f188 <HAL_RTC_WaitForSynchro+0x44>)
2405f152:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
#endif /* TAMP */

  tickstart = HAL_GetTick();
2405f154:	f7f4 fe3a 	bl	24053dcc <HAL_GetTick>
2405f158:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
2405f15a:	e009      	b.n	2405f170 <HAL_RTC_WaitForSynchro+0x2c>
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
2405f15c:	f7f4 fe36 	bl	24053dcc <HAL_GetTick>
2405f160:	4602      	mov	r2, r0
2405f162:	68fb      	ldr	r3, [r7, #12]
2405f164:	1ad3      	subs	r3, r2, r3
2405f166:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
2405f16a:	d901      	bls.n	2405f170 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
2405f16c:	2303      	movs	r3, #3
2405f16e:	e007      	b.n	2405f180 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
2405f170:	687b      	ldr	r3, [r7, #4]
2405f172:	681b      	ldr	r3, [r3, #0]
2405f174:	68db      	ldr	r3, [r3, #12]
2405f176:	f003 0320 	and.w	r3, r3, #32
2405f17a:	2b00      	cmp	r3, #0
2405f17c:	d0ee      	beq.n	2405f15c <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
2405f17e:	2300      	movs	r3, #0
}
2405f180:	4618      	mov	r0, r3
2405f182:	3710      	adds	r7, #16
2405f184:	46bd      	mov	sp, r7
2405f186:	bd80      	pop	{r7, pc}
2405f188:	0001005f 	.word	0x0001005f

2405f18c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
2405f18c:	b580      	push	{r7, lr}
2405f18e:	b084      	sub	sp, #16
2405f190:	af00      	add	r7, sp, #0
2405f192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
2405f194:	2300      	movs	r3, #0
2405f196:	73fb      	strb	r3, [r7, #15]
  /* Check if the Initialization mode is set */
#if defined(TAMP)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
2405f198:	687b      	ldr	r3, [r7, #4]
2405f19a:	681b      	ldr	r3, [r3, #0]
2405f19c:	68db      	ldr	r3, [r3, #12]
2405f19e:	f003 0340 	and.w	r3, r3, #64	; 0x40
2405f1a2:	2b00      	cmp	r3, #0
2405f1a4:	d123      	bne.n	2405f1ee <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
2405f1a6:	687b      	ldr	r3, [r7, #4]
2405f1a8:	681b      	ldr	r3, [r3, #0]
2405f1aa:	68da      	ldr	r2, [r3, #12]
2405f1ac:	687b      	ldr	r3, [r7, #4]
2405f1ae:	681b      	ldr	r3, [r3, #0]
2405f1b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
2405f1b4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
2405f1b6:	f7f4 fe09 	bl	24053dcc <HAL_GetTick>
2405f1ba:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
2405f1bc:	e00d      	b.n	2405f1da <RTC_EnterInitMode+0x4e>

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
2405f1be:	f7f4 fe05 	bl	24053dcc <HAL_GetTick>
2405f1c2:	4602      	mov	r2, r0
2405f1c4:	68bb      	ldr	r3, [r7, #8]
2405f1c6:	1ad3      	subs	r3, r2, r3
2405f1c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
2405f1cc:	d905      	bls.n	2405f1da <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
2405f1ce:	2303      	movs	r3, #3
2405f1d0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
2405f1d2:	687b      	ldr	r3, [r7, #4]
2405f1d4:	2203      	movs	r2, #3
2405f1d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
2405f1da:	687b      	ldr	r3, [r7, #4]
2405f1dc:	681b      	ldr	r3, [r3, #0]
2405f1de:	68db      	ldr	r3, [r3, #12]
2405f1e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
2405f1e4:	2b00      	cmp	r3, #0
2405f1e6:	d102      	bne.n	2405f1ee <RTC_EnterInitMode+0x62>
2405f1e8:	7bfb      	ldrb	r3, [r7, #15]
2405f1ea:	2b03      	cmp	r3, #3
2405f1ec:	d1e7      	bne.n	2405f1be <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
2405f1ee:	7bfb      	ldrb	r3, [r7, #15]
}
2405f1f0:	4618      	mov	r0, r3
2405f1f2:	3710      	adds	r7, #16
2405f1f4:	46bd      	mov	sp, r7
2405f1f6:	bd80      	pop	{r7, pc}

2405f1f8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
2405f1f8:	b580      	push	{r7, lr}
2405f1fa:	b084      	sub	sp, #16
2405f1fc:	af00      	add	r7, sp, #0
2405f1fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
2405f200:	2300      	movs	r3, #0
2405f202:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
2405f204:	4b1a      	ldr	r3, [pc, #104]	; (2405f270 <RTC_ExitInitMode+0x78>)
2405f206:	68db      	ldr	r3, [r3, #12]
2405f208:	4a19      	ldr	r2, [pc, #100]	; (2405f270 <RTC_ExitInitMode+0x78>)
2405f20a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2405f20e:	60d3      	str	r3, [r2, #12]
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
2405f210:	4b17      	ldr	r3, [pc, #92]	; (2405f270 <RTC_ExitInitMode+0x78>)
2405f212:	699b      	ldr	r3, [r3, #24]
2405f214:	f003 0320 	and.w	r3, r3, #32
2405f218:	2b00      	cmp	r3, #0
2405f21a:	d10c      	bne.n	2405f236 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
2405f21c:	6878      	ldr	r0, [r7, #4]
2405f21e:	f7ff ff91 	bl	2405f144 <HAL_RTC_WaitForSynchro>
2405f222:	4603      	mov	r3, r0
2405f224:	2b00      	cmp	r3, #0
2405f226:	d01e      	beq.n	2405f266 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
2405f228:	687b      	ldr	r3, [r7, #4]
2405f22a:	2203      	movs	r2, #3
2405f22c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
2405f230:	2303      	movs	r3, #3
2405f232:	73fb      	strb	r3, [r7, #15]
2405f234:	e017      	b.n	2405f266 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
2405f236:	4b0e      	ldr	r3, [pc, #56]	; (2405f270 <RTC_ExitInitMode+0x78>)
2405f238:	699b      	ldr	r3, [r3, #24]
2405f23a:	4a0d      	ldr	r2, [pc, #52]	; (2405f270 <RTC_ExitInitMode+0x78>)
2405f23c:	f023 0320 	bic.w	r3, r3, #32
2405f240:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
2405f242:	6878      	ldr	r0, [r7, #4]
2405f244:	f7ff ff7e 	bl	2405f144 <HAL_RTC_WaitForSynchro>
2405f248:	4603      	mov	r3, r0
2405f24a:	2b00      	cmp	r3, #0
2405f24c:	d005      	beq.n	2405f25a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
2405f24e:	687b      	ldr	r3, [r7, #4]
2405f250:	2203      	movs	r2, #3
2405f252:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
2405f256:	2303      	movs	r3, #3
2405f258:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
2405f25a:	4b05      	ldr	r3, [pc, #20]	; (2405f270 <RTC_ExitInitMode+0x78>)
2405f25c:	699b      	ldr	r3, [r3, #24]
2405f25e:	4a04      	ldr	r2, [pc, #16]	; (2405f270 <RTC_ExitInitMode+0x78>)
2405f260:	f043 0320 	orr.w	r3, r3, #32
2405f264:	6193      	str	r3, [r2, #24]
  }

  return status;
2405f266:	7bfb      	ldrb	r3, [r7, #15]
}
2405f268:	4618      	mov	r0, r3
2405f26a:	3710      	adds	r7, #16
2405f26c:	46bd      	mov	sp, r7
2405f26e:	bd80      	pop	{r7, pc}
2405f270:	58004000 	.word	0x58004000

2405f274 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
2405f274:	b480      	push	{r7}
2405f276:	b085      	sub	sp, #20
2405f278:	af00      	add	r7, sp, #0
2405f27a:	4603      	mov	r3, r0
2405f27c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
2405f27e:	2300      	movs	r3, #0
2405f280:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
2405f282:	79fb      	ldrb	r3, [r7, #7]
2405f284:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
2405f286:	e005      	b.n	2405f294 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
2405f288:	68fb      	ldr	r3, [r7, #12]
2405f28a:	3301      	adds	r3, #1
2405f28c:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
2405f28e:	7afb      	ldrb	r3, [r7, #11]
2405f290:	3b0a      	subs	r3, #10
2405f292:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
2405f294:	7afb      	ldrb	r3, [r7, #11]
2405f296:	2b09      	cmp	r3, #9
2405f298:	d8f6      	bhi.n	2405f288 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
2405f29a:	68fb      	ldr	r3, [r7, #12]
2405f29c:	b2db      	uxtb	r3, r3
2405f29e:	011b      	lsls	r3, r3, #4
2405f2a0:	b2da      	uxtb	r2, r3
2405f2a2:	7afb      	ldrb	r3, [r7, #11]
2405f2a4:	4313      	orrs	r3, r2
2405f2a6:	b2db      	uxtb	r3, r3
}
2405f2a8:	4618      	mov	r0, r3
2405f2aa:	3714      	adds	r7, #20
2405f2ac:	46bd      	mov	sp, r7
2405f2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
2405f2b2:	4770      	bx	lr

2405f2b4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
2405f2b4:	b480      	push	{r7}
2405f2b6:	b085      	sub	sp, #20
2405f2b8:	af00      	add	r7, sp, #0
2405f2ba:	4603      	mov	r3, r0
2405f2bc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
2405f2be:	79fb      	ldrb	r3, [r7, #7]
2405f2c0:	091b      	lsrs	r3, r3, #4
2405f2c2:	b2db      	uxtb	r3, r3
2405f2c4:	461a      	mov	r2, r3
2405f2c6:	0092      	lsls	r2, r2, #2
2405f2c8:	4413      	add	r3, r2
2405f2ca:	005b      	lsls	r3, r3, #1
2405f2cc:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
2405f2ce:	79fb      	ldrb	r3, [r7, #7]
2405f2d0:	f003 030f 	and.w	r3, r3, #15
2405f2d4:	b2da      	uxtb	r2, r3
2405f2d6:	7bfb      	ldrb	r3, [r7, #15]
2405f2d8:	4413      	add	r3, r2
2405f2da:	b2db      	uxtb	r3, r3
}
2405f2dc:	4618      	mov	r0, r3
2405f2de:	3714      	adds	r7, #20
2405f2e0:	46bd      	mov	sp, r7
2405f2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
2405f2e6:	4770      	bx	lr

2405f2e8 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
2405f2e8:	b580      	push	{r7, lr}
2405f2ea:	b086      	sub	sp, #24
2405f2ec:	af00      	add	r7, sp, #0
2405f2ee:	60f8      	str	r0, [r7, #12]
2405f2f0:	60b9      	str	r1, [r7, #8]
2405f2f2:	607a      	str	r2, [r7, #4]
2405f2f4:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
2405f2f6:	68bb      	ldr	r3, [r7, #8]
2405f2f8:	2b02      	cmp	r3, #2
2405f2fa:	d904      	bls.n	2405f306 <HAL_SAI_InitProtocol+0x1e>
2405f2fc:	68bb      	ldr	r3, [r7, #8]
2405f2fe:	3b03      	subs	r3, #3
2405f300:	2b01      	cmp	r3, #1
2405f302:	d812      	bhi.n	2405f32a <HAL_SAI_InitProtocol+0x42>
2405f304:	e008      	b.n	2405f318 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
2405f306:	683b      	ldr	r3, [r7, #0]
2405f308:	687a      	ldr	r2, [r7, #4]
2405f30a:	68b9      	ldr	r1, [r7, #8]
2405f30c:	68f8      	ldr	r0, [r7, #12]
2405f30e:	f000 fd2d 	bl	2405fd6c <SAI_InitI2S>
2405f312:	4603      	mov	r3, r0
2405f314:	75fb      	strb	r3, [r7, #23]
      break;
2405f316:	e00b      	b.n	2405f330 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
2405f318:	683b      	ldr	r3, [r7, #0]
2405f31a:	687a      	ldr	r2, [r7, #4]
2405f31c:	68b9      	ldr	r1, [r7, #8]
2405f31e:	68f8      	ldr	r0, [r7, #12]
2405f320:	f000 fdd6 	bl	2405fed0 <SAI_InitPCM>
2405f324:	4603      	mov	r3, r0
2405f326:	75fb      	strb	r3, [r7, #23]
      break;
2405f328:	e002      	b.n	2405f330 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
2405f32a:	2301      	movs	r3, #1
2405f32c:	75fb      	strb	r3, [r7, #23]
      break;
2405f32e:	bf00      	nop
  }

  if (status == HAL_OK)
2405f330:	7dfb      	ldrb	r3, [r7, #23]
2405f332:	2b00      	cmp	r3, #0
2405f334:	d104      	bne.n	2405f340 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
2405f336:	68f8      	ldr	r0, [r7, #12]
2405f338:	f000 f808 	bl	2405f34c <HAL_SAI_Init>
2405f33c:	4603      	mov	r3, r0
2405f33e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
2405f340:	7dfb      	ldrb	r3, [r7, #23]
}
2405f342:	4618      	mov	r0, r3
2405f344:	3718      	adds	r7, #24
2405f346:	46bd      	mov	sp, r7
2405f348:	bd80      	pop	{r7, pc}
	...

2405f34c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
2405f34c:	b580      	push	{r7, lr}
2405f34e:	b08a      	sub	sp, #40	; 0x28
2405f350:	af00      	add	r7, sp, #0
2405f352:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
2405f354:	687b      	ldr	r3, [r7, #4]
2405f356:	2b00      	cmp	r3, #0
2405f358:	d101      	bne.n	2405f35e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
2405f35a:	2301      	movs	r3, #1
2405f35c:	e1f2      	b.n	2405f744 <HAL_SAI_Init+0x3f8>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
2405f35e:	687b      	ldr	r3, [r7, #4]
2405f360:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
2405f364:	2b01      	cmp	r3, #1
2405f366:	d10e      	bne.n	2405f386 <HAL_SAI_Init+0x3a>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
    {
      return HAL_ERROR;
    }
#else
    if ((hsai->Instance != SAI1_Block_A) ||
2405f368:	687b      	ldr	r3, [r7, #4]
2405f36a:	681b      	ldr	r3, [r3, #0]
2405f36c:	4a94      	ldr	r2, [pc, #592]	; (2405f5c0 <HAL_SAI_Init+0x274>)
2405f36e:	4293      	cmp	r3, r2
2405f370:	d107      	bne.n	2405f382 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
2405f372:	687b      	ldr	r3, [r7, #4]
2405f374:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
2405f376:	2b01      	cmp	r3, #1
2405f378:	d103      	bne.n	2405f382 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
2405f37a:	687b      	ldr	r3, [r7, #4]
2405f37c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
2405f37e:	2b00      	cmp	r3, #0
2405f380:	d001      	beq.n	2405f386 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
2405f382:	2301      	movs	r3, #1
2405f384:	e1de      	b.n	2405f744 <HAL_SAI_Init+0x3f8>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
2405f386:	687b      	ldr	r3, [r7, #4]
2405f388:	681b      	ldr	r3, [r3, #0]
2405f38a:	4a8d      	ldr	r2, [pc, #564]	; (2405f5c0 <HAL_SAI_Init+0x274>)
2405f38c:	4293      	cmp	r3, r2
2405f38e:	d004      	beq.n	2405f39a <HAL_SAI_Init+0x4e>
2405f390:	687b      	ldr	r3, [r7, #4]
2405f392:	681b      	ldr	r3, [r3, #0]
2405f394:	4a8b      	ldr	r2, [pc, #556]	; (2405f5c4 <HAL_SAI_Init+0x278>)
2405f396:	4293      	cmp	r3, r2
2405f398:	d102      	bne.n	2405f3a0 <HAL_SAI_Init+0x54>
  {
    SaiBaseAddress = SAI1;
2405f39a:	4b8b      	ldr	r3, [pc, #556]	; (2405f5c8 <HAL_SAI_Init+0x27c>)
2405f39c:	61bb      	str	r3, [r7, #24]
2405f39e:	e00e      	b.n	2405f3be <HAL_SAI_Init+0x72>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
2405f3a0:	687b      	ldr	r3, [r7, #4]
2405f3a2:	681b      	ldr	r3, [r3, #0]
2405f3a4:	4a89      	ldr	r2, [pc, #548]	; (2405f5cc <HAL_SAI_Init+0x280>)
2405f3a6:	4293      	cmp	r3, r2
2405f3a8:	d004      	beq.n	2405f3b4 <HAL_SAI_Init+0x68>
2405f3aa:	687b      	ldr	r3, [r7, #4]
2405f3ac:	681b      	ldr	r3, [r3, #0]
2405f3ae:	4a88      	ldr	r2, [pc, #544]	; (2405f5d0 <HAL_SAI_Init+0x284>)
2405f3b0:	4293      	cmp	r3, r2
2405f3b2:	d102      	bne.n	2405f3ba <HAL_SAI_Init+0x6e>
  {
    SaiBaseAddress = SAI2;
2405f3b4:	4b87      	ldr	r3, [pc, #540]	; (2405f5d4 <HAL_SAI_Init+0x288>)
2405f3b6:	61bb      	str	r3, [r7, #24]
2405f3b8:	e001      	b.n	2405f3be <HAL_SAI_Init+0x72>
    SaiBaseAddress = SAI4;
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
2405f3ba:	2301      	movs	r3, #1
2405f3bc:	e1c2      	b.n	2405f744 <HAL_SAI_Init+0x3f8>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
2405f3be:	687b      	ldr	r3, [r7, #4]
2405f3c0:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
2405f3c4:	b2db      	uxtb	r3, r3
2405f3c6:	2b00      	cmp	r3, #0
2405f3c8:	d106      	bne.n	2405f3d8 <HAL_SAI_Init+0x8c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
2405f3ca:	687b      	ldr	r3, [r7, #4]
2405f3cc:	2200      	movs	r2, #0
2405f3ce:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
2405f3d2:	6878      	ldr	r0, [r7, #4]
2405f3d4:	f7f4 f9bc 	bl	24053750 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
2405f3d8:	6878      	ldr	r0, [r7, #4]
2405f3da:	f000 fe33 	bl	24060044 <SAI_Disable>
2405f3de:	4603      	mov	r3, r0
2405f3e0:	2b00      	cmp	r3, #0
2405f3e2:	d001      	beq.n	2405f3e8 <HAL_SAI_Init+0x9c>
  {
    return HAL_ERROR;
2405f3e4:	2301      	movs	r3, #1
2405f3e6:	e1ad      	b.n	2405f744 <HAL_SAI_Init+0x3f8>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
2405f3e8:	687b      	ldr	r3, [r7, #4]
2405f3ea:	2202      	movs	r2, #2
2405f3ec:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
2405f3f0:	687b      	ldr	r3, [r7, #4]
2405f3f2:	68db      	ldr	r3, [r3, #12]
2405f3f4:	2b02      	cmp	r3, #2
2405f3f6:	d00c      	beq.n	2405f412 <HAL_SAI_Init+0xc6>
2405f3f8:	2b02      	cmp	r3, #2
2405f3fa:	d80d      	bhi.n	2405f418 <HAL_SAI_Init+0xcc>
2405f3fc:	2b00      	cmp	r3, #0
2405f3fe:	d002      	beq.n	2405f406 <HAL_SAI_Init+0xba>
2405f400:	2b01      	cmp	r3, #1
2405f402:	d003      	beq.n	2405f40c <HAL_SAI_Init+0xc0>
2405f404:	e008      	b.n	2405f418 <HAL_SAI_Init+0xcc>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
2405f406:	2300      	movs	r3, #0
2405f408:	627b      	str	r3, [r7, #36]	; 0x24
      break;
2405f40a:	e008      	b.n	2405f41e <HAL_SAI_Init+0xd2>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
2405f40c:	2310      	movs	r3, #16
2405f40e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
2405f410:	e005      	b.n	2405f41e <HAL_SAI_Init+0xd2>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
2405f412:	2320      	movs	r3, #32
2405f414:	627b      	str	r3, [r7, #36]	; 0x24
      break;
2405f416:	e002      	b.n	2405f41e <HAL_SAI_Init+0xd2>
    default:
      tmpregisterGCR = 0;
2405f418:	2300      	movs	r3, #0
2405f41a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
2405f41c:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
2405f41e:	687b      	ldr	r3, [r7, #4]
2405f420:	689b      	ldr	r3, [r3, #8]
2405f422:	2b03      	cmp	r3, #3
2405f424:	d81d      	bhi.n	2405f462 <HAL_SAI_Init+0x116>
2405f426:	a201      	add	r2, pc, #4	; (adr r2, 2405f42c <HAL_SAI_Init+0xe0>)
2405f428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2405f42c:	2405f43d 	.word	0x2405f43d
2405f430:	2405f443 	.word	0x2405f443
2405f434:	2405f44b 	.word	0x2405f44b
2405f438:	2405f453 	.word	0x2405f453
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
2405f43c:	2300      	movs	r3, #0
2405f43e:	61fb      	str	r3, [r7, #28]
      break;
2405f440:	e012      	b.n	2405f468 <HAL_SAI_Init+0x11c>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
2405f442:	f44f 6380 	mov.w	r3, #1024	; 0x400
2405f446:	61fb      	str	r3, [r7, #28]
      break;
2405f448:	e00e      	b.n	2405f468 <HAL_SAI_Init+0x11c>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
2405f44a:	f44f 6300 	mov.w	r3, #2048	; 0x800
2405f44e:	61fb      	str	r3, [r7, #28]
      break;
2405f450:	e00a      	b.n	2405f468 <HAL_SAI_Init+0x11c>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
2405f452:	f44f 6300 	mov.w	r3, #2048	; 0x800
2405f456:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
2405f458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405f45a:	f043 0301 	orr.w	r3, r3, #1
2405f45e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
2405f460:	e002      	b.n	2405f468 <HAL_SAI_Init+0x11c>
      syncen_bits = SAI_xCR1_SYNCEN_1;
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
      break;
#endif /* SAI4 */
    default:
      syncen_bits = 0;
2405f462:	2300      	movs	r3, #0
2405f464:	61fb      	str	r3, [r7, #28]
      break;
2405f466:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
2405f468:	69bb      	ldr	r3, [r7, #24]
2405f46a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2405f46c:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
2405f46e:	687b      	ldr	r3, [r7, #4]
2405f470:	6a1b      	ldr	r3, [r3, #32]
2405f472:	2b00      	cmp	r3, #0
2405f474:	f000 808a 	beq.w	2405f58c <HAL_SAI_Init+0x240>
  {
    uint32_t freq = 0;
2405f478:	2300      	movs	r3, #0
2405f47a:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
2405f47c:	687b      	ldr	r3, [r7, #4]
2405f47e:	681b      	ldr	r3, [r3, #0]
2405f480:	4a4f      	ldr	r2, [pc, #316]	; (2405f5c0 <HAL_SAI_Init+0x274>)
2405f482:	4293      	cmp	r3, r2
2405f484:	d004      	beq.n	2405f490 <HAL_SAI_Init+0x144>
2405f486:	687b      	ldr	r3, [r7, #4]
2405f488:	681b      	ldr	r3, [r3, #0]
2405f48a:	4a4e      	ldr	r2, [pc, #312]	; (2405f5c4 <HAL_SAI_Init+0x278>)
2405f48c:	4293      	cmp	r3, r2
2405f48e:	d106      	bne.n	2405f49e <HAL_SAI_Init+0x152>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
2405f490:	f44f 7080 	mov.w	r0, #256	; 0x100
2405f494:	f04f 0100 	mov.w	r1, #0
2405f498:	f7fe f9b2 	bl	2405d800 <HAL_RCCEx_GetPeriphCLKFreq>
2405f49c:	6178      	str	r0, [r7, #20]
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
    }
#else
    if (hsai->Instance == SAI2_Block_A)
2405f49e:	687b      	ldr	r3, [r7, #4]
2405f4a0:	681b      	ldr	r3, [r3, #0]
2405f4a2:	4a4a      	ldr	r2, [pc, #296]	; (2405f5cc <HAL_SAI_Init+0x280>)
2405f4a4:	4293      	cmp	r3, r2
2405f4a6:	d106      	bne.n	2405f4b6 <HAL_SAI_Init+0x16a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2A);
2405f4a8:	f44f 7000 	mov.w	r0, #512	; 0x200
2405f4ac:	f04f 0100 	mov.w	r1, #0
2405f4b0:	f7fe f9a6 	bl	2405d800 <HAL_RCCEx_GetPeriphCLKFreq>
2405f4b4:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI2_Block_B)
2405f4b6:	687b      	ldr	r3, [r7, #4]
2405f4b8:	681b      	ldr	r3, [r3, #0]
2405f4ba:	4a45      	ldr	r2, [pc, #276]	; (2405f5d0 <HAL_SAI_Init+0x284>)
2405f4bc:	4293      	cmp	r3, r2
2405f4be:	d106      	bne.n	2405f4ce <HAL_SAI_Init+0x182>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2B);
2405f4c0:	f44f 6080 	mov.w	r0, #1024	; 0x400
2405f4c4:	f04f 0100 	mov.w	r1, #0
2405f4c8:	f7fe f99a 	bl	2405d800 <HAL_RCCEx_GetPeriphCLKFreq>
2405f4cc:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
2405f4ce:	687b      	ldr	r3, [r7, #4]
2405f4d0:	699b      	ldr	r3, [r3, #24]
2405f4d2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
2405f4d6:	d120      	bne.n	2405f51a <HAL_SAI_Init+0x1ce>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
2405f4d8:	687b      	ldr	r3, [r7, #4]
2405f4da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2405f4dc:	2b04      	cmp	r3, #4
2405f4de:	d102      	bne.n	2405f4e6 <HAL_SAI_Init+0x19a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
2405f4e0:	2340      	movs	r3, #64	; 0x40
2405f4e2:	60fb      	str	r3, [r7, #12]
2405f4e4:	e00a      	b.n	2405f4fc <HAL_SAI_Init+0x1b0>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
2405f4e6:	687b      	ldr	r3, [r7, #4]
2405f4e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2405f4ea:	2b08      	cmp	r3, #8
2405f4ec:	d103      	bne.n	2405f4f6 <HAL_SAI_Init+0x1aa>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
2405f4ee:	f44f 7380 	mov.w	r3, #256	; 0x100
2405f4f2:	60fb      	str	r3, [r7, #12]
2405f4f4:	e002      	b.n	2405f4fc <HAL_SAI_Init+0x1b0>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
2405f4f6:	687b      	ldr	r3, [r7, #4]
2405f4f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405f4fa:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
2405f4fc:	697a      	ldr	r2, [r7, #20]
2405f4fe:	4613      	mov	r3, r2
2405f500:	009b      	lsls	r3, r3, #2
2405f502:	4413      	add	r3, r2
2405f504:	005b      	lsls	r3, r3, #1
2405f506:	4619      	mov	r1, r3
2405f508:	687b      	ldr	r3, [r7, #4]
2405f50a:	6a1b      	ldr	r3, [r3, #32]
2405f50c:	68fa      	ldr	r2, [r7, #12]
2405f50e:	fb02 f303 	mul.w	r3, r2, r3
2405f512:	fbb1 f3f3 	udiv	r3, r1, r3
2405f516:	613b      	str	r3, [r7, #16]
2405f518:	e017      	b.n	2405f54a <HAL_SAI_Init+0x1fe>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
2405f51a:	687b      	ldr	r3, [r7, #4]
2405f51c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405f51e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
2405f522:	d101      	bne.n	2405f528 <HAL_SAI_Init+0x1dc>
2405f524:	2302      	movs	r3, #2
2405f526:	e000      	b.n	2405f52a <HAL_SAI_Init+0x1de>
2405f528:	2301      	movs	r3, #1
2405f52a:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
2405f52c:	697a      	ldr	r2, [r7, #20]
2405f52e:	4613      	mov	r3, r2
2405f530:	009b      	lsls	r3, r3, #2
2405f532:	4413      	add	r3, r2
2405f534:	005b      	lsls	r3, r3, #1
2405f536:	4619      	mov	r1, r3
2405f538:	687b      	ldr	r3, [r7, #4]
2405f53a:	6a1b      	ldr	r3, [r3, #32]
2405f53c:	68ba      	ldr	r2, [r7, #8]
2405f53e:	fb02 f303 	mul.w	r3, r2, r3
2405f542:	021b      	lsls	r3, r3, #8
2405f544:	fbb1 f3f3 	udiv	r3, r1, r3
2405f548:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
2405f54a:	693b      	ldr	r3, [r7, #16]
2405f54c:	4a22      	ldr	r2, [pc, #136]	; (2405f5d8 <HAL_SAI_Init+0x28c>)
2405f54e:	fba2 2303 	umull	r2, r3, r2, r3
2405f552:	08da      	lsrs	r2, r3, #3
2405f554:	687b      	ldr	r3, [r7, #4]
2405f556:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
2405f558:	6939      	ldr	r1, [r7, #16]
2405f55a:	4b1f      	ldr	r3, [pc, #124]	; (2405f5d8 <HAL_SAI_Init+0x28c>)
2405f55c:	fba3 2301 	umull	r2, r3, r3, r1
2405f560:	08da      	lsrs	r2, r3, #3
2405f562:	4613      	mov	r3, r2
2405f564:	009b      	lsls	r3, r3, #2
2405f566:	4413      	add	r3, r2
2405f568:	005b      	lsls	r3, r3, #1
2405f56a:	1aca      	subs	r2, r1, r3
2405f56c:	2a08      	cmp	r2, #8
2405f56e:	d904      	bls.n	2405f57a <HAL_SAI_Init+0x22e>
    {
      hsai->Init.Mckdiv += 1U;
2405f570:	687b      	ldr	r3, [r7, #4]
2405f572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2405f574:	1c5a      	adds	r2, r3, #1
2405f576:	687b      	ldr	r3, [r7, #4]
2405f578:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
2405f57a:	687b      	ldr	r3, [r7, #4]
2405f57c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2405f57e:	2b04      	cmp	r3, #4
2405f580:	d104      	bne.n	2405f58c <HAL_SAI_Init+0x240>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
2405f582:	687b      	ldr	r3, [r7, #4]
2405f584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2405f586:	085a      	lsrs	r2, r3, #1
2405f588:	687b      	ldr	r3, [r7, #4]
2405f58a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2405f58c:	687b      	ldr	r3, [r7, #4]
2405f58e:	685b      	ldr	r3, [r3, #4]
2405f590:	2b00      	cmp	r3, #0
2405f592:	d003      	beq.n	2405f59c <HAL_SAI_Init+0x250>
2405f594:	687b      	ldr	r3, [r7, #4]
2405f596:	685b      	ldr	r3, [r3, #4]
2405f598:	2b02      	cmp	r3, #2
2405f59a:	d109      	bne.n	2405f5b0 <HAL_SAI_Init+0x264>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
2405f59c:	687b      	ldr	r3, [r7, #4]
2405f59e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405f5a0:	2b01      	cmp	r3, #1
2405f5a2:	d101      	bne.n	2405f5a8 <HAL_SAI_Init+0x25c>
2405f5a4:	2300      	movs	r3, #0
2405f5a6:	e001      	b.n	2405f5ac <HAL_SAI_Init+0x260>
2405f5a8:	f44f 7300 	mov.w	r3, #512	; 0x200
2405f5ac:	623b      	str	r3, [r7, #32]
2405f5ae:	e017      	b.n	2405f5e0 <HAL_SAI_Init+0x294>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
2405f5b0:	687b      	ldr	r3, [r7, #4]
2405f5b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405f5b4:	2b01      	cmp	r3, #1
2405f5b6:	d111      	bne.n	2405f5dc <HAL_SAI_Init+0x290>
2405f5b8:	f44f 7300 	mov.w	r3, #512	; 0x200
2405f5bc:	e00f      	b.n	2405f5de <HAL_SAI_Init+0x292>
2405f5be:	bf00      	nop
2405f5c0:	40015804 	.word	0x40015804
2405f5c4:	40015824 	.word	0x40015824
2405f5c8:	40015800 	.word	0x40015800
2405f5cc:	40015c04 	.word	0x40015c04
2405f5d0:	40015c24 	.word	0x40015c24
2405f5d4:	40015c00 	.word	0x40015c00
2405f5d8:	cccccccd 	.word	0xcccccccd
2405f5dc:	2300      	movs	r3, #0
2405f5de:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
2405f5e0:	687b      	ldr	r3, [r7, #4]
2405f5e2:	681b      	ldr	r3, [r3, #0]
2405f5e4:	6819      	ldr	r1, [r3, #0]
2405f5e6:	687b      	ldr	r3, [r7, #4]
2405f5e8:	681a      	ldr	r2, [r3, #0]
2405f5ea:	4b58      	ldr	r3, [pc, #352]	; (2405f74c <HAL_SAI_Init+0x400>)
2405f5ec:	400b      	ands	r3, r1
2405f5ee:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
2405f5f0:	687b      	ldr	r3, [r7, #4]
2405f5f2:	681b      	ldr	r3, [r3, #0]
2405f5f4:	6819      	ldr	r1, [r3, #0]
2405f5f6:	687b      	ldr	r3, [r7, #4]
2405f5f8:	685a      	ldr	r2, [r3, #4]
2405f5fa:	687b      	ldr	r3, [r7, #4]
2405f5fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2405f5fe:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
2405f600:	687b      	ldr	r3, [r7, #4]
2405f602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
2405f604:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
2405f606:	687b      	ldr	r3, [r7, #4]
2405f608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405f60a:	431a      	orrs	r2, r3
2405f60c:	6a3b      	ldr	r3, [r7, #32]
2405f60e:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
2405f610:	69fb      	ldr	r3, [r7, #28]
2405f612:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
2405f614:	687b      	ldr	r3, [r7, #4]
2405f616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
2405f618:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
2405f61a:	687b      	ldr	r3, [r7, #4]
2405f61c:	695b      	ldr	r3, [r3, #20]
2405f61e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
2405f620:	687b      	ldr	r3, [r7, #4]
2405f622:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
2405f624:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
2405f626:	687b      	ldr	r3, [r7, #4]
2405f628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2405f62a:	051b      	lsls	r3, r3, #20
2405f62c:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
2405f62e:	687b      	ldr	r3, [r7, #4]
2405f630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
2405f632:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
2405f634:	687b      	ldr	r3, [r7, #4]
2405f636:	691b      	ldr	r3, [r3, #16]
2405f638:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
2405f63a:	687b      	ldr	r3, [r7, #4]
2405f63c:	681b      	ldr	r3, [r3, #0]
2405f63e:	430a      	orrs	r2, r1
2405f640:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
2405f642:	687b      	ldr	r3, [r7, #4]
2405f644:	681b      	ldr	r3, [r3, #0]
2405f646:	6859      	ldr	r1, [r3, #4]
2405f648:	687b      	ldr	r3, [r7, #4]
2405f64a:	681a      	ldr	r2, [r3, #0]
2405f64c:	4b40      	ldr	r3, [pc, #256]	; (2405f750 <HAL_SAI_Init+0x404>)
2405f64e:	400b      	ands	r3, r1
2405f650:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
2405f652:	687b      	ldr	r3, [r7, #4]
2405f654:	681b      	ldr	r3, [r3, #0]
2405f656:	6859      	ldr	r1, [r3, #4]
2405f658:	687b      	ldr	r3, [r7, #4]
2405f65a:	69da      	ldr	r2, [r3, #28]
2405f65c:	687b      	ldr	r3, [r7, #4]
2405f65e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405f660:	431a      	orrs	r2, r3
2405f662:	687b      	ldr	r3, [r7, #4]
2405f664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2405f666:	431a      	orrs	r2, r3
2405f668:	687b      	ldr	r3, [r7, #4]
2405f66a:	681b      	ldr	r3, [r3, #0]
2405f66c:	430a      	orrs	r2, r1
2405f66e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
2405f670:	687b      	ldr	r3, [r7, #4]
2405f672:	681b      	ldr	r3, [r3, #0]
2405f674:	6899      	ldr	r1, [r3, #8]
2405f676:	687b      	ldr	r3, [r7, #4]
2405f678:	681a      	ldr	r2, [r3, #0]
2405f67a:	4b36      	ldr	r3, [pc, #216]	; (2405f754 <HAL_SAI_Init+0x408>)
2405f67c:	400b      	ands	r3, r1
2405f67e:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
2405f680:	687b      	ldr	r3, [r7, #4]
2405f682:	681b      	ldr	r3, [r3, #0]
2405f684:	6899      	ldr	r1, [r3, #8]
2405f686:	687b      	ldr	r3, [r7, #4]
2405f688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405f68a:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
2405f68c:	687b      	ldr	r3, [r7, #4]
2405f68e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
2405f690:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
2405f692:	687b      	ldr	r3, [r7, #4]
2405f694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
2405f696:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
2405f698:	687b      	ldr	r3, [r7, #4]
2405f69a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
2405f69c:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
2405f69e:	687b      	ldr	r3, [r7, #4]
2405f6a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405f6a2:	3b01      	subs	r3, #1
2405f6a4:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
2405f6a6:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
2405f6a8:	687b      	ldr	r3, [r7, #4]
2405f6aa:	681b      	ldr	r3, [r3, #0]
2405f6ac:	430a      	orrs	r2, r1
2405f6ae:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
2405f6b0:	687b      	ldr	r3, [r7, #4]
2405f6b2:	681b      	ldr	r3, [r3, #0]
2405f6b4:	68d9      	ldr	r1, [r3, #12]
2405f6b6:	687b      	ldr	r3, [r7, #4]
2405f6b8:	681a      	ldr	r2, [r3, #0]
2405f6ba:	f24f 0320 	movw	r3, #61472	; 0xf020
2405f6be:	400b      	ands	r3, r1
2405f6c0:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
2405f6c2:	687b      	ldr	r3, [r7, #4]
2405f6c4:	681b      	ldr	r3, [r3, #0]
2405f6c6:	68d9      	ldr	r1, [r3, #12]
2405f6c8:	687b      	ldr	r3, [r7, #4]
2405f6ca:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2405f6cc:	687b      	ldr	r3, [r7, #4]
2405f6ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
2405f6d0:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
2405f6d2:	687b      	ldr	r3, [r7, #4]
2405f6d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2405f6d6:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
2405f6d8:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
2405f6da:	687b      	ldr	r3, [r7, #4]
2405f6dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405f6de:	3b01      	subs	r3, #1
2405f6e0:	021b      	lsls	r3, r3, #8
2405f6e2:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
2405f6e4:	687b      	ldr	r3, [r7, #4]
2405f6e6:	681b      	ldr	r3, [r3, #0]
2405f6e8:	430a      	orrs	r2, r1
2405f6ea:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
#else
  if (hsai->Instance == SAI1_Block_A)
2405f6ec:	687b      	ldr	r3, [r7, #4]
2405f6ee:	681b      	ldr	r3, [r3, #0]
2405f6f0:	4a19      	ldr	r2, [pc, #100]	; (2405f758 <HAL_SAI_Init+0x40c>)
2405f6f2:	4293      	cmp	r3, r2
2405f6f4:	d119      	bne.n	2405f72a <HAL_SAI_Init+0x3de>
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
2405f6f6:	69bb      	ldr	r3, [r7, #24]
2405f6f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2405f6fa:	f023 0201 	bic.w	r2, r3, #1
2405f6fe:	69bb      	ldr	r3, [r7, #24]
2405f700:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
2405f702:	687b      	ldr	r3, [r7, #4]
2405f704:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
2405f708:	2b01      	cmp	r3, #1
2405f70a:	d10e      	bne.n	2405f72a <HAL_SAI_Init+0x3de>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
2405f70c:	687b      	ldr	r3, [r7, #4]
2405f70e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
2405f710:	687b      	ldr	r3, [r7, #4]
2405f712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2405f714:	3b01      	subs	r3, #1
2405f716:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
2405f718:	431a      	orrs	r2, r3
2405f71a:	69bb      	ldr	r3, [r7, #24]
2405f71c:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
2405f71e:	69bb      	ldr	r3, [r7, #24]
2405f720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2405f722:	f043 0201 	orr.w	r2, r3, #1
2405f726:	69bb      	ldr	r3, [r7, #24]
2405f728:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
2405f72a:	687b      	ldr	r3, [r7, #4]
2405f72c:	2200      	movs	r2, #0
2405f72e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
2405f732:	687b      	ldr	r3, [r7, #4]
2405f734:	2201      	movs	r2, #1
2405f736:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
2405f73a:	687b      	ldr	r3, [r7, #4]
2405f73c:	2200      	movs	r2, #0
2405f73e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
2405f742:	2300      	movs	r3, #0
}
2405f744:	4618      	mov	r0, r3
2405f746:	3728      	adds	r7, #40	; 0x28
2405f748:	46bd      	mov	sp, r7
2405f74a:	bd80      	pop	{r7, pc}
2405f74c:	f005c010 	.word	0xf005c010
2405f750:	ffff1ff0 	.word	0xffff1ff0
2405f754:	fff88000 	.word	0xfff88000
2405f758:	40015804 	.word	0x40015804

2405f75c <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
2405f75c:	b580      	push	{r7, lr}
2405f75e:	b084      	sub	sp, #16
2405f760:	af00      	add	r7, sp, #0
2405f762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
2405f764:	2300      	movs	r3, #0
2405f766:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
2405f768:	687b      	ldr	r3, [r7, #4]
2405f76a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
2405f76e:	2b01      	cmp	r3, #1
2405f770:	d101      	bne.n	2405f776 <HAL_SAI_Abort+0x1a>
2405f772:	2302      	movs	r3, #2
2405f774:	e07d      	b.n	2405f872 <HAL_SAI_Abort+0x116>
2405f776:	687b      	ldr	r3, [r7, #4]
2405f778:	2201      	movs	r2, #1
2405f77a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405f77e:	687b      	ldr	r3, [r7, #4]
2405f780:	681b      	ldr	r3, [r3, #0]
2405f782:	681b      	ldr	r3, [r3, #0]
2405f784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405f788:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405f78c:	d14f      	bne.n	2405f82e <HAL_SAI_Abort+0xd2>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
2405f78e:	687b      	ldr	r3, [r7, #4]
2405f790:	681b      	ldr	r3, [r3, #0]
2405f792:	681a      	ldr	r2, [r3, #0]
2405f794:	687b      	ldr	r3, [r7, #4]
2405f796:	681b      	ldr	r3, [r3, #0]
2405f798:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
2405f79c:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX)&& (hsai->hdmatx != NULL))
2405f79e:	687b      	ldr	r3, [r7, #4]
2405f7a0:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
2405f7a4:	b2db      	uxtb	r3, r3
2405f7a6:	2b12      	cmp	r3, #18
2405f7a8:	d11d      	bne.n	2405f7e6 <HAL_SAI_Abort+0x8a>
2405f7aa:	687b      	ldr	r3, [r7, #4]
2405f7ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405f7b0:	2b00      	cmp	r3, #0
2405f7b2:	d018      	beq.n	2405f7e6 <HAL_SAI_Abort+0x8a>
    {
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
2405f7b4:	687b      	ldr	r3, [r7, #4]
2405f7b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405f7ba:	4618      	mov	r0, r3
2405f7bc:	f7f7 fb46 	bl	24056e4c <HAL_DMA_Abort>
2405f7c0:	4603      	mov	r3, r0
2405f7c2:	2b00      	cmp	r3, #0
2405f7c4:	d00f      	beq.n	2405f7e6 <HAL_SAI_Abort+0x8a>
      {
        /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
2405f7c6:	687b      	ldr	r3, [r7, #4]
2405f7c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405f7cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405f7ce:	2b80      	cmp	r3, #128	; 0x80
2405f7d0:	d009      	beq.n	2405f7e6 <HAL_SAI_Abort+0x8a>
        {
          status = HAL_ERROR;
2405f7d2:	2301      	movs	r3, #1
2405f7d4:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2405f7d6:	687b      	ldr	r3, [r7, #4]
2405f7d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405f7dc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2405f7e0:	687b      	ldr	r3, [r7, #4]
2405f7e2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        }
      }
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
2405f7e6:	687b      	ldr	r3, [r7, #4]
2405f7e8:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
2405f7ec:	b2db      	uxtb	r3, r3
2405f7ee:	2b22      	cmp	r3, #34	; 0x22
2405f7f0:	d11d      	bne.n	2405f82e <HAL_SAI_Abort+0xd2>
2405f7f2:	687b      	ldr	r3, [r7, #4]
2405f7f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405f7f8:	2b00      	cmp	r3, #0
2405f7fa:	d018      	beq.n	2405f82e <HAL_SAI_Abort+0xd2>
    {
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
2405f7fc:	687b      	ldr	r3, [r7, #4]
2405f7fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405f802:	4618      	mov	r0, r3
2405f804:	f7f7 fb22 	bl	24056e4c <HAL_DMA_Abort>
2405f808:	4603      	mov	r3, r0
2405f80a:	2b00      	cmp	r3, #0
2405f80c:	d00f      	beq.n	2405f82e <HAL_SAI_Abort+0xd2>
      {
        /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
2405f80e:	687b      	ldr	r3, [r7, #4]
2405f810:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405f814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405f816:	2b80      	cmp	r3, #128	; 0x80
2405f818:	d009      	beq.n	2405f82e <HAL_SAI_Abort+0xd2>
        {
          status = HAL_ERROR;
2405f81a:	2301      	movs	r3, #1
2405f81c:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2405f81e:	687b      	ldr	r3, [r7, #4]
2405f820:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405f824:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2405f828:	687b      	ldr	r3, [r7, #4]
2405f82a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      }
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
2405f82e:	687b      	ldr	r3, [r7, #4]
2405f830:	681b      	ldr	r3, [r3, #0]
2405f832:	2200      	movs	r2, #0
2405f834:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
2405f836:	687b      	ldr	r3, [r7, #4]
2405f838:	681b      	ldr	r3, [r3, #0]
2405f83a:	f04f 32ff 	mov.w	r2, #4294967295
2405f83e:	619a      	str	r2, [r3, #24]

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
2405f840:	6878      	ldr	r0, [r7, #4]
2405f842:	f000 fbff 	bl	24060044 <SAI_Disable>
2405f846:	4603      	mov	r3, r0
2405f848:	2b00      	cmp	r3, #0
2405f84a:	d001      	beq.n	2405f850 <HAL_SAI_Abort+0xf4>
  {
    status = HAL_ERROR;
2405f84c:	2301      	movs	r3, #1
2405f84e:	73fb      	strb	r3, [r7, #15]
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
2405f850:	687b      	ldr	r3, [r7, #4]
2405f852:	681b      	ldr	r3, [r3, #0]
2405f854:	685a      	ldr	r2, [r3, #4]
2405f856:	687b      	ldr	r3, [r7, #4]
2405f858:	681b      	ldr	r3, [r3, #0]
2405f85a:	f042 0208 	orr.w	r2, r2, #8
2405f85e:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
2405f860:	687b      	ldr	r3, [r7, #4]
2405f862:	2201      	movs	r2, #1
2405f864:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
2405f868:	687b      	ldr	r3, [r7, #4]
2405f86a:	2200      	movs	r2, #0
2405f86c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return status;
2405f870:	7bfb      	ldrb	r3, [r7, #15]
}
2405f872:	4618      	mov	r0, r3
2405f874:	3710      	adds	r7, #16
2405f876:	46bd      	mov	sp, r7
2405f878:	bd80      	pop	{r7, pc}
	...

2405f87c <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
2405f87c:	b580      	push	{r7, lr}
2405f87e:	b086      	sub	sp, #24
2405f880:	af00      	add	r7, sp, #0
2405f882:	60f8      	str	r0, [r7, #12]
2405f884:	60b9      	str	r1, [r7, #8]
2405f886:	4613      	mov	r3, r2
2405f888:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
2405f88a:	f7f4 fa9f 	bl	24053dcc <HAL_GetTick>
2405f88e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
2405f890:	68bb      	ldr	r3, [r7, #8]
2405f892:	2b00      	cmp	r3, #0
2405f894:	d002      	beq.n	2405f89c <HAL_SAI_Transmit_DMA+0x20>
2405f896:	88fb      	ldrh	r3, [r7, #6]
2405f898:	2b00      	cmp	r3, #0
2405f89a:	d101      	bne.n	2405f8a0 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
2405f89c:	2301      	movs	r3, #1
2405f89e:	e098      	b.n	2405f9d2 <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
2405f8a0:	68fb      	ldr	r3, [r7, #12]
2405f8a2:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
2405f8a6:	b2db      	uxtb	r3, r3
2405f8a8:	2b01      	cmp	r3, #1
2405f8aa:	f040 8091 	bne.w	2405f9d0 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
2405f8ae:	68fb      	ldr	r3, [r7, #12]
2405f8b0:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
2405f8b4:	2b01      	cmp	r3, #1
2405f8b6:	d101      	bne.n	2405f8bc <HAL_SAI_Transmit_DMA+0x40>
2405f8b8:	2302      	movs	r3, #2
2405f8ba:	e08a      	b.n	2405f9d2 <HAL_SAI_Transmit_DMA+0x156>
2405f8bc:	68fb      	ldr	r3, [r7, #12]
2405f8be:	2201      	movs	r2, #1
2405f8c0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
2405f8c4:	68fb      	ldr	r3, [r7, #12]
2405f8c6:	68ba      	ldr	r2, [r7, #8]
2405f8c8:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
2405f8ca:	68fb      	ldr	r3, [r7, #12]
2405f8cc:	88fa      	ldrh	r2, [r7, #6]
2405f8ce:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
2405f8d2:	68fb      	ldr	r3, [r7, #12]
2405f8d4:	88fa      	ldrh	r2, [r7, #6]
2405f8d6:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
2405f8da:	68fb      	ldr	r3, [r7, #12]
2405f8dc:	2200      	movs	r2, #0
2405f8de:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
2405f8e2:	68fb      	ldr	r3, [r7, #12]
2405f8e4:	2212      	movs	r2, #18
2405f8e6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
2405f8ea:	68fb      	ldr	r3, [r7, #12]
2405f8ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405f8f0:	4a3a      	ldr	r2, [pc, #232]	; (2405f9dc <HAL_SAI_Transmit_DMA+0x160>)
2405f8f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
2405f8f4:	68fb      	ldr	r3, [r7, #12]
2405f8f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405f8fa:	4a39      	ldr	r2, [pc, #228]	; (2405f9e0 <HAL_SAI_Transmit_DMA+0x164>)
2405f8fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
2405f8fe:	68fb      	ldr	r3, [r7, #12]
2405f900:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405f904:	4a37      	ldr	r2, [pc, #220]	; (2405f9e4 <HAL_SAI_Transmit_DMA+0x168>)
2405f906:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
2405f908:	68fb      	ldr	r3, [r7, #12]
2405f90a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405f90e:	2200      	movs	r2, #0
2405f910:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
2405f912:	68fb      	ldr	r3, [r7, #12]
2405f914:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
2405f918:	68fb      	ldr	r3, [r7, #12]
2405f91a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
2405f91c:	4619      	mov	r1, r3
2405f91e:	68fb      	ldr	r3, [r7, #12]
2405f920:	681b      	ldr	r3, [r3, #0]
2405f922:	331c      	adds	r3, #28
2405f924:	461a      	mov	r2, r3
2405f926:	68fb      	ldr	r3, [r7, #12]
2405f928:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
2405f92c:	f7f7 f824 	bl	24056978 <HAL_DMA_Start_IT>
2405f930:	4603      	mov	r3, r0
2405f932:	2b00      	cmp	r3, #0
2405f934:	d005      	beq.n	2405f942 <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
2405f936:	68fb      	ldr	r3, [r7, #12]
2405f938:	2200      	movs	r2, #0
2405f93a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
2405f93e:	2301      	movs	r3, #1
2405f940:	e047      	b.n	2405f9d2 <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2405f942:	2100      	movs	r1, #0
2405f944:	68f8      	ldr	r0, [r7, #12]
2405f946:	f000 fb45 	bl	2405ffd4 <SAI_InterruptFlag>
2405f94a:	4601      	mov	r1, r0
2405f94c:	68fb      	ldr	r3, [r7, #12]
2405f94e:	681b      	ldr	r3, [r3, #0]
2405f950:	691a      	ldr	r2, [r3, #16]
2405f952:	68fb      	ldr	r3, [r7, #12]
2405f954:	681b      	ldr	r3, [r3, #0]
2405f956:	430a      	orrs	r2, r1
2405f958:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
2405f95a:	68fb      	ldr	r3, [r7, #12]
2405f95c:	681b      	ldr	r3, [r3, #0]
2405f95e:	681a      	ldr	r2, [r3, #0]
2405f960:	68fb      	ldr	r3, [r7, #12]
2405f962:	681b      	ldr	r3, [r3, #0]
2405f964:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
2405f968:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
2405f96a:	e015      	b.n	2405f998 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
2405f96c:	f7f4 fa2e 	bl	24053dcc <HAL_GetTick>
2405f970:	4602      	mov	r2, r0
2405f972:	697b      	ldr	r3, [r7, #20]
2405f974:	1ad3      	subs	r3, r2, r3
2405f976:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
2405f97a:	d90d      	bls.n	2405f998 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
2405f97c:	68fb      	ldr	r3, [r7, #12]
2405f97e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405f982:	f043 0240 	orr.w	r2, r3, #64	; 0x40
2405f986:	68fb      	ldr	r3, [r7, #12]
2405f988:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
2405f98c:	68fb      	ldr	r3, [r7, #12]
2405f98e:	2200      	movs	r2, #0
2405f990:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
2405f994:	2303      	movs	r3, #3
2405f996:	e01c      	b.n	2405f9d2 <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
2405f998:	68fb      	ldr	r3, [r7, #12]
2405f99a:	681b      	ldr	r3, [r3, #0]
2405f99c:	695b      	ldr	r3, [r3, #20]
2405f99e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
2405f9a2:	2b00      	cmp	r3, #0
2405f9a4:	d0e2      	beq.n	2405f96c <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
2405f9a6:	68fb      	ldr	r3, [r7, #12]
2405f9a8:	681b      	ldr	r3, [r3, #0]
2405f9aa:	681b      	ldr	r3, [r3, #0]
2405f9ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2405f9b0:	2b00      	cmp	r3, #0
2405f9b2:	d107      	bne.n	2405f9c4 <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
2405f9b4:	68fb      	ldr	r3, [r7, #12]
2405f9b6:	681b      	ldr	r3, [r3, #0]
2405f9b8:	681a      	ldr	r2, [r3, #0]
2405f9ba:	68fb      	ldr	r3, [r7, #12]
2405f9bc:	681b      	ldr	r3, [r3, #0]
2405f9be:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
2405f9c2:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
2405f9c4:	68fb      	ldr	r3, [r7, #12]
2405f9c6:	2200      	movs	r2, #0
2405f9c8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
2405f9cc:	2300      	movs	r3, #0
2405f9ce:	e000      	b.n	2405f9d2 <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
2405f9d0:	2302      	movs	r3, #2
  }
}
2405f9d2:	4618      	mov	r0, r3
2405f9d4:	3718      	adds	r7, #24
2405f9d6:	46bd      	mov	sp, r7
2405f9d8:	bd80      	pop	{r7, pc}
2405f9da:	bf00      	nop
2405f9dc:	24060119 	.word	0x24060119
2405f9e0:	240600b9 	.word	0x240600b9
2405f9e4:	24060135 	.word	0x24060135

2405f9e8 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
2405f9e8:	b580      	push	{r7, lr}
2405f9ea:	b086      	sub	sp, #24
2405f9ec:	af00      	add	r7, sp, #0
2405f9ee:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
2405f9f0:	687b      	ldr	r3, [r7, #4]
2405f9f2:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
2405f9f6:	b2db      	uxtb	r3, r3
2405f9f8:	2b00      	cmp	r3, #0
2405f9fa:	f000 81a7 	beq.w	2405fd4c <HAL_SAI_IRQHandler+0x364>
  {
    uint32_t itflags = hsai->Instance->SR;
2405f9fe:	687b      	ldr	r3, [r7, #4]
2405fa00:	681b      	ldr	r3, [r3, #0]
2405fa02:	695b      	ldr	r3, [r3, #20]
2405fa04:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
2405fa06:	687b      	ldr	r3, [r7, #4]
2405fa08:	681b      	ldr	r3, [r3, #0]
2405fa0a:	691b      	ldr	r3, [r3, #16]
2405fa0c:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
2405fa0e:	687b      	ldr	r3, [r7, #4]
2405fa10:	681b      	ldr	r3, [r3, #0]
2405fa12:	681b      	ldr	r3, [r3, #0]
2405fa14:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred ------------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
2405fa16:	697b      	ldr	r3, [r7, #20]
2405fa18:	f003 0308 	and.w	r3, r3, #8
2405fa1c:	2b00      	cmp	r3, #0
2405fa1e:	d00a      	beq.n	2405fa36 <HAL_SAI_IRQHandler+0x4e>
2405fa20:	693b      	ldr	r3, [r7, #16]
2405fa22:	f003 0308 	and.w	r3, r3, #8
2405fa26:	2b00      	cmp	r3, #0
2405fa28:	d005      	beq.n	2405fa36 <HAL_SAI_IRQHandler+0x4e>
    {
      hsai->InterruptServiceRoutine(hsai);
2405fa2a:	687b      	ldr	r3, [r7, #4]
2405fa2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
2405fa30:	6878      	ldr	r0, [r7, #4]
2405fa32:	4798      	blx	r3
2405fa34:	e18a      	b.n	2405fd4c <HAL_SAI_IRQHandler+0x364>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
2405fa36:	697b      	ldr	r3, [r7, #20]
2405fa38:	f003 0301 	and.w	r3, r3, #1
2405fa3c:	2b00      	cmp	r3, #0
2405fa3e:	d01e      	beq.n	2405fa7e <HAL_SAI_IRQHandler+0x96>
2405fa40:	693b      	ldr	r3, [r7, #16]
2405fa42:	f003 0301 	and.w	r3, r3, #1
2405fa46:	2b00      	cmp	r3, #0
2405fa48:	d019      	beq.n	2405fa7e <HAL_SAI_IRQHandler+0x96>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
2405fa4a:	687b      	ldr	r3, [r7, #4]
2405fa4c:	681b      	ldr	r3, [r3, #0]
2405fa4e:	2201      	movs	r2, #1
2405fa50:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
2405fa52:	687b      	ldr	r3, [r7, #4]
2405fa54:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
2405fa58:	b2db      	uxtb	r3, r3
2405fa5a:	2b22      	cmp	r3, #34	; 0x22
2405fa5c:	d101      	bne.n	2405fa62 <HAL_SAI_IRQHandler+0x7a>
2405fa5e:	2301      	movs	r3, #1
2405fa60:	e000      	b.n	2405fa64 <HAL_SAI_IRQHandler+0x7c>
2405fa62:	2302      	movs	r3, #2
2405fa64:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
2405fa66:	687b      	ldr	r3, [r7, #4]
2405fa68:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
2405fa6c:	68bb      	ldr	r3, [r7, #8]
2405fa6e:	431a      	orrs	r2, r3
2405fa70:	687b      	ldr	r3, [r7, #4]
2405fa72:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
2405fa76:	6878      	ldr	r0, [r7, #4]
2405fa78:	f000 f96e 	bl	2405fd58 <HAL_SAI_ErrorCallback>
2405fa7c:	e166      	b.n	2405fd4c <HAL_SAI_IRQHandler+0x364>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
2405fa7e:	697b      	ldr	r3, [r7, #20]
2405fa80:	f003 0302 	and.w	r3, r3, #2
2405fa84:	2b00      	cmp	r3, #0
2405fa86:	d013      	beq.n	2405fab0 <HAL_SAI_IRQHandler+0xc8>
2405fa88:	693b      	ldr	r3, [r7, #16]
2405fa8a:	f003 0302 	and.w	r3, r3, #2
2405fa8e:	2b00      	cmp	r3, #0
2405fa90:	d00e      	beq.n	2405fab0 <HAL_SAI_IRQHandler+0xc8>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
2405fa92:	687b      	ldr	r3, [r7, #4]
2405fa94:	681b      	ldr	r3, [r3, #0]
2405fa96:	2202      	movs	r2, #2
2405fa98:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
2405fa9a:	687b      	ldr	r3, [r7, #4]
2405fa9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
2405faa0:	2b00      	cmp	r3, #0
2405faa2:	f000 8153 	beq.w	2405fd4c <HAL_SAI_IRQHandler+0x364>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
2405faa6:	687b      	ldr	r3, [r7, #4]
2405faa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
2405faac:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
2405faae:	e14d      	b.n	2405fd4c <HAL_SAI_IRQHandler+0x364>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
2405fab0:	697b      	ldr	r3, [r7, #20]
2405fab2:	f003 0320 	and.w	r3, r3, #32
2405fab6:	2b00      	cmp	r3, #0
2405fab8:	d05b      	beq.n	2405fb72 <HAL_SAI_IRQHandler+0x18a>
2405faba:	693b      	ldr	r3, [r7, #16]
2405fabc:	f003 0320 	and.w	r3, r3, #32
2405fac0:	2b00      	cmp	r3, #0
2405fac2:	d056      	beq.n	2405fb72 <HAL_SAI_IRQHandler+0x18a>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
2405fac4:	687b      	ldr	r3, [r7, #4]
2405fac6:	681b      	ldr	r3, [r3, #0]
2405fac8:	2220      	movs	r2, #32
2405faca:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
2405facc:	687b      	ldr	r3, [r7, #4]
2405face:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405fad2:	f043 0204 	orr.w	r2, r3, #4
2405fad6:	687b      	ldr	r3, [r7, #4]
2405fad8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405fadc:	68fb      	ldr	r3, [r7, #12]
2405fade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405fae2:	2b00      	cmp	r3, #0
2405fae4:	d03e      	beq.n	2405fb64 <HAL_SAI_IRQHandler+0x17c>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
2405fae6:	687b      	ldr	r3, [r7, #4]
2405fae8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405faec:	2b00      	cmp	r3, #0
2405faee:	d018      	beq.n	2405fb22 <HAL_SAI_IRQHandler+0x13a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
2405faf0:	687b      	ldr	r3, [r7, #4]
2405faf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405faf6:	4a97      	ldr	r2, [pc, #604]	; (2405fd54 <HAL_SAI_IRQHandler+0x36c>)
2405faf8:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
2405fafa:	687b      	ldr	r3, [r7, #4]
2405fafc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405fb00:	4618      	mov	r0, r3
2405fb02:	f7f7 fcc1 	bl	24057488 <HAL_DMA_Abort_IT>
2405fb06:	4603      	mov	r3, r0
2405fb08:	2b00      	cmp	r3, #0
2405fb0a:	d00a      	beq.n	2405fb22 <HAL_SAI_IRQHandler+0x13a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2405fb0c:	687b      	ldr	r3, [r7, #4]
2405fb0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405fb12:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2405fb16:	687b      	ldr	r3, [r7, #4]
2405fb18:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
2405fb1c:	6878      	ldr	r0, [r7, #4]
2405fb1e:	f000 f91b 	bl	2405fd58 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
2405fb22:	687b      	ldr	r3, [r7, #4]
2405fb24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405fb28:	2b00      	cmp	r3, #0
2405fb2a:	f000 810a 	beq.w	2405fd42 <HAL_SAI_IRQHandler+0x35a>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
2405fb2e:	687b      	ldr	r3, [r7, #4]
2405fb30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405fb34:	4a87      	ldr	r2, [pc, #540]	; (2405fd54 <HAL_SAI_IRQHandler+0x36c>)
2405fb36:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
2405fb38:	687b      	ldr	r3, [r7, #4]
2405fb3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405fb3e:	4618      	mov	r0, r3
2405fb40:	f7f7 fca2 	bl	24057488 <HAL_DMA_Abort_IT>
2405fb44:	4603      	mov	r3, r0
2405fb46:	2b00      	cmp	r3, #0
2405fb48:	f000 80fb 	beq.w	2405fd42 <HAL_SAI_IRQHandler+0x35a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2405fb4c:	687b      	ldr	r3, [r7, #4]
2405fb4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405fb52:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2405fb56:	687b      	ldr	r3, [r7, #4]
2405fb58:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
2405fb5c:	6878      	ldr	r0, [r7, #4]
2405fb5e:	f000 f8fb 	bl	2405fd58 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405fb62:	e0ee      	b.n	2405fd42 <HAL_SAI_IRQHandler+0x35a>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
2405fb64:	6878      	ldr	r0, [r7, #4]
2405fb66:	f7ff fdf9 	bl	2405f75c <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
2405fb6a:	6878      	ldr	r0, [r7, #4]
2405fb6c:	f000 f8f4 	bl	2405fd58 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405fb70:	e0e7      	b.n	2405fd42 <HAL_SAI_IRQHandler+0x35a>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
2405fb72:	697b      	ldr	r3, [r7, #20]
2405fb74:	f003 0340 	and.w	r3, r3, #64	; 0x40
2405fb78:	2b00      	cmp	r3, #0
2405fb7a:	d05b      	beq.n	2405fc34 <HAL_SAI_IRQHandler+0x24c>
2405fb7c:	693b      	ldr	r3, [r7, #16]
2405fb7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
2405fb82:	2b00      	cmp	r3, #0
2405fb84:	d056      	beq.n	2405fc34 <HAL_SAI_IRQHandler+0x24c>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
2405fb86:	687b      	ldr	r3, [r7, #4]
2405fb88:	681b      	ldr	r3, [r3, #0]
2405fb8a:	2240      	movs	r2, #64	; 0x40
2405fb8c:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
2405fb8e:	687b      	ldr	r3, [r7, #4]
2405fb90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405fb94:	f043 0208 	orr.w	r2, r3, #8
2405fb98:	687b      	ldr	r3, [r7, #4]
2405fb9a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405fb9e:	68fb      	ldr	r3, [r7, #12]
2405fba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405fba4:	2b00      	cmp	r3, #0
2405fba6:	d03e      	beq.n	2405fc26 <HAL_SAI_IRQHandler+0x23e>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
2405fba8:	687b      	ldr	r3, [r7, #4]
2405fbaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405fbae:	2b00      	cmp	r3, #0
2405fbb0:	d018      	beq.n	2405fbe4 <HAL_SAI_IRQHandler+0x1fc>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
2405fbb2:	687b      	ldr	r3, [r7, #4]
2405fbb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405fbb8:	4a66      	ldr	r2, [pc, #408]	; (2405fd54 <HAL_SAI_IRQHandler+0x36c>)
2405fbba:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
2405fbbc:	687b      	ldr	r3, [r7, #4]
2405fbbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405fbc2:	4618      	mov	r0, r3
2405fbc4:	f7f7 fc60 	bl	24057488 <HAL_DMA_Abort_IT>
2405fbc8:	4603      	mov	r3, r0
2405fbca:	2b00      	cmp	r3, #0
2405fbcc:	d00a      	beq.n	2405fbe4 <HAL_SAI_IRQHandler+0x1fc>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2405fbce:	687b      	ldr	r3, [r7, #4]
2405fbd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405fbd4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2405fbd8:	687b      	ldr	r3, [r7, #4]
2405fbda:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
2405fbde:	6878      	ldr	r0, [r7, #4]
2405fbe0:	f000 f8ba 	bl	2405fd58 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
2405fbe4:	687b      	ldr	r3, [r7, #4]
2405fbe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405fbea:	2b00      	cmp	r3, #0
2405fbec:	f000 80ab 	beq.w	2405fd46 <HAL_SAI_IRQHandler+0x35e>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
2405fbf0:	687b      	ldr	r3, [r7, #4]
2405fbf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405fbf6:	4a57      	ldr	r2, [pc, #348]	; (2405fd54 <HAL_SAI_IRQHandler+0x36c>)
2405fbf8:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
2405fbfa:	687b      	ldr	r3, [r7, #4]
2405fbfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405fc00:	4618      	mov	r0, r3
2405fc02:	f7f7 fc41 	bl	24057488 <HAL_DMA_Abort_IT>
2405fc06:	4603      	mov	r3, r0
2405fc08:	2b00      	cmp	r3, #0
2405fc0a:	f000 809c 	beq.w	2405fd46 <HAL_SAI_IRQHandler+0x35e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2405fc0e:	687b      	ldr	r3, [r7, #4]
2405fc10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405fc14:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2405fc18:	687b      	ldr	r3, [r7, #4]
2405fc1a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
2405fc1e:	6878      	ldr	r0, [r7, #4]
2405fc20:	f000 f89a 	bl	2405fd58 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405fc24:	e08f      	b.n	2405fd46 <HAL_SAI_IRQHandler+0x35e>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
2405fc26:	6878      	ldr	r0, [r7, #4]
2405fc28:	f7ff fd98 	bl	2405f75c <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
2405fc2c:	6878      	ldr	r0, [r7, #4]
2405fc2e:	f000 f893 	bl	2405fd58 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405fc32:	e088      	b.n	2405fd46 <HAL_SAI_IRQHandler+0x35e>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
2405fc34:	697b      	ldr	r3, [r7, #20]
2405fc36:	f003 0304 	and.w	r3, r3, #4
2405fc3a:	2b00      	cmp	r3, #0
2405fc3c:	d067      	beq.n	2405fd0e <HAL_SAI_IRQHandler+0x326>
2405fc3e:	693b      	ldr	r3, [r7, #16]
2405fc40:	f003 0304 	and.w	r3, r3, #4
2405fc44:	2b00      	cmp	r3, #0
2405fc46:	d062      	beq.n	2405fd0e <HAL_SAI_IRQHandler+0x326>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
2405fc48:	687b      	ldr	r3, [r7, #4]
2405fc4a:	681b      	ldr	r3, [r3, #0]
2405fc4c:	2204      	movs	r2, #4
2405fc4e:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
2405fc50:	687b      	ldr	r3, [r7, #4]
2405fc52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405fc56:	f043 0220 	orr.w	r2, r3, #32
2405fc5a:	687b      	ldr	r3, [r7, #4]
2405fc5c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405fc60:	68fb      	ldr	r3, [r7, #12]
2405fc62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405fc66:	2b00      	cmp	r3, #0
2405fc68:	d03c      	beq.n	2405fce4 <HAL_SAI_IRQHandler+0x2fc>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
2405fc6a:	687b      	ldr	r3, [r7, #4]
2405fc6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405fc70:	2b00      	cmp	r3, #0
2405fc72:	d018      	beq.n	2405fca6 <HAL_SAI_IRQHandler+0x2be>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
2405fc74:	687b      	ldr	r3, [r7, #4]
2405fc76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405fc7a:	4a36      	ldr	r2, [pc, #216]	; (2405fd54 <HAL_SAI_IRQHandler+0x36c>)
2405fc7c:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
2405fc7e:	687b      	ldr	r3, [r7, #4]
2405fc80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405fc84:	4618      	mov	r0, r3
2405fc86:	f7f7 fbff 	bl	24057488 <HAL_DMA_Abort_IT>
2405fc8a:	4603      	mov	r3, r0
2405fc8c:	2b00      	cmp	r3, #0
2405fc8e:	d00a      	beq.n	2405fca6 <HAL_SAI_IRQHandler+0x2be>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2405fc90:	687b      	ldr	r3, [r7, #4]
2405fc92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405fc96:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2405fc9a:	687b      	ldr	r3, [r7, #4]
2405fc9c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
2405fca0:	6878      	ldr	r0, [r7, #4]
2405fca2:	f000 f859 	bl	2405fd58 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
2405fca6:	687b      	ldr	r3, [r7, #4]
2405fca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405fcac:	2b00      	cmp	r3, #0
2405fcae:	d04c      	beq.n	2405fd4a <HAL_SAI_IRQHandler+0x362>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
2405fcb0:	687b      	ldr	r3, [r7, #4]
2405fcb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405fcb6:	4a27      	ldr	r2, [pc, #156]	; (2405fd54 <HAL_SAI_IRQHandler+0x36c>)
2405fcb8:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
2405fcba:	687b      	ldr	r3, [r7, #4]
2405fcbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405fcc0:	4618      	mov	r0, r3
2405fcc2:	f7f7 fbe1 	bl	24057488 <HAL_DMA_Abort_IT>
2405fcc6:	4603      	mov	r3, r0
2405fcc8:	2b00      	cmp	r3, #0
2405fcca:	d03e      	beq.n	2405fd4a <HAL_SAI_IRQHandler+0x362>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2405fccc:	687b      	ldr	r3, [r7, #4]
2405fcce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405fcd2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2405fcd6:	687b      	ldr	r3, [r7, #4]
2405fcd8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
2405fcdc:	6878      	ldr	r0, [r7, #4]
2405fcde:	f000 f83b 	bl	2405fd58 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405fce2:	e032      	b.n	2405fd4a <HAL_SAI_IRQHandler+0x362>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
2405fce4:	687b      	ldr	r3, [r7, #4]
2405fce6:	681b      	ldr	r3, [r3, #0]
2405fce8:	2200      	movs	r2, #0
2405fcea:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
2405fcec:	687b      	ldr	r3, [r7, #4]
2405fcee:	681b      	ldr	r3, [r3, #0]
2405fcf0:	f04f 32ff 	mov.w	r2, #4294967295
2405fcf4:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
2405fcf6:	687b      	ldr	r3, [r7, #4]
2405fcf8:	2201      	movs	r2, #1
2405fcfa:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        /* Initialize XferCount */
        hsai->XferCount = 0U;
2405fcfe:	687b      	ldr	r3, [r7, #4]
2405fd00:	2200      	movs	r2, #0
2405fd02:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
2405fd06:	6878      	ldr	r0, [r7, #4]
2405fd08:	f000 f826 	bl	2405fd58 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405fd0c:	e01d      	b.n	2405fd4a <HAL_SAI_IRQHandler+0x362>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
2405fd0e:	697b      	ldr	r3, [r7, #20]
2405fd10:	f003 0310 	and.w	r3, r3, #16
2405fd14:	2b00      	cmp	r3, #0
2405fd16:	d019      	beq.n	2405fd4c <HAL_SAI_IRQHandler+0x364>
2405fd18:	693b      	ldr	r3, [r7, #16]
2405fd1a:	f003 0310 	and.w	r3, r3, #16
2405fd1e:	2b00      	cmp	r3, #0
2405fd20:	d014      	beq.n	2405fd4c <HAL_SAI_IRQHandler+0x364>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
2405fd22:	687b      	ldr	r3, [r7, #4]
2405fd24:	681b      	ldr	r3, [r3, #0]
2405fd26:	2210      	movs	r2, #16
2405fd28:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
2405fd2a:	687b      	ldr	r3, [r7, #4]
2405fd2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405fd30:	f043 0210 	orr.w	r2, r3, #16
2405fd34:	687b      	ldr	r3, [r7, #4]
2405fd36:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
2405fd3a:	6878      	ldr	r0, [r7, #4]
2405fd3c:	f000 f80c 	bl	2405fd58 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
2405fd40:	e004      	b.n	2405fd4c <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405fd42:	bf00      	nop
2405fd44:	e002      	b.n	2405fd4c <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405fd46:	bf00      	nop
2405fd48:	e000      	b.n	2405fd4c <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405fd4a:	bf00      	nop
}
2405fd4c:	bf00      	nop
2405fd4e:	3718      	adds	r7, #24
2405fd50:	46bd      	mov	sp, r7
2405fd52:	bd80      	pop	{r7, pc}
2405fd54:	24060193 	.word	0x24060193

2405fd58 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
2405fd58:	b480      	push	{r7}
2405fd5a:	b083      	sub	sp, #12
2405fd5c:	af00      	add	r7, sp, #0
2405fd5e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
2405fd60:	bf00      	nop
2405fd62:	370c      	adds	r7, #12
2405fd64:	46bd      	mov	sp, r7
2405fd66:	f85d 7b04 	ldr.w	r7, [sp], #4
2405fd6a:	4770      	bx	lr

2405fd6c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
2405fd6c:	b480      	push	{r7}
2405fd6e:	b087      	sub	sp, #28
2405fd70:	af00      	add	r7, sp, #0
2405fd72:	60f8      	str	r0, [r7, #12]
2405fd74:	60b9      	str	r1, [r7, #8]
2405fd76:	607a      	str	r2, [r7, #4]
2405fd78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
2405fd7a:	2300      	movs	r3, #0
2405fd7c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
2405fd7e:	68fb      	ldr	r3, [r7, #12]
2405fd80:	2200      	movs	r2, #0
2405fd82:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
2405fd84:	68fb      	ldr	r3, [r7, #12]
2405fd86:	2200      	movs	r2, #0
2405fd88:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2405fd8a:	68fb      	ldr	r3, [r7, #12]
2405fd8c:	685b      	ldr	r3, [r3, #4]
2405fd8e:	2b00      	cmp	r3, #0
2405fd90:	d003      	beq.n	2405fd9a <SAI_InitI2S+0x2e>
2405fd92:	68fb      	ldr	r3, [r7, #12]
2405fd94:	685b      	ldr	r3, [r3, #4]
2405fd96:	2b02      	cmp	r3, #2
2405fd98:	d103      	bne.n	2405fda2 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
2405fd9a:	68fb      	ldr	r3, [r7, #12]
2405fd9c:	2200      	movs	r2, #0
2405fd9e:	651a      	str	r2, [r3, #80]	; 0x50
2405fda0:	e002      	b.n	2405fda8 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
2405fda2:	68fb      	ldr	r3, [r7, #12]
2405fda4:	2201      	movs	r2, #1
2405fda6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
2405fda8:	68fb      	ldr	r3, [r7, #12]
2405fdaa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
2405fdae:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
2405fdb0:	68fb      	ldr	r3, [r7, #12]
2405fdb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
2405fdb6:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
2405fdb8:	68fb      	ldr	r3, [r7, #12]
2405fdba:	2200      	movs	r2, #0
2405fdbc:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
2405fdbe:	68fb      	ldr	r3, [r7, #12]
2405fdc0:	683a      	ldr	r2, [r7, #0]
2405fdc2:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
2405fdc4:	683b      	ldr	r3, [r7, #0]
2405fdc6:	f003 0301 	and.w	r3, r3, #1
2405fdca:	2b00      	cmp	r3, #0
2405fdcc:	d001      	beq.n	2405fdd2 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
2405fdce:	2301      	movs	r3, #1
2405fdd0:	e077      	b.n	2405fec2 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
2405fdd2:	68bb      	ldr	r3, [r7, #8]
2405fdd4:	2b00      	cmp	r3, #0
2405fdd6:	d107      	bne.n	2405fde8 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
2405fdd8:	68fb      	ldr	r3, [r7, #12]
2405fdda:	2200      	movs	r2, #0
2405fddc:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
2405fdde:	68fb      	ldr	r3, [r7, #12]
2405fde0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
2405fde4:	665a      	str	r2, [r3, #100]	; 0x64
2405fde6:	e006      	b.n	2405fdf6 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
2405fde8:	68fb      	ldr	r3, [r7, #12]
2405fdea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
2405fdee:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
2405fdf0:	68fb      	ldr	r3, [r7, #12]
2405fdf2:	2200      	movs	r2, #0
2405fdf4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Frame definition */
  switch (datasize)
2405fdf6:	687b      	ldr	r3, [r7, #4]
2405fdf8:	2b03      	cmp	r3, #3
2405fdfa:	d84f      	bhi.n	2405fe9c <SAI_InitI2S+0x130>
2405fdfc:	a201      	add	r2, pc, #4	; (adr r2, 2405fe04 <SAI_InitI2S+0x98>)
2405fdfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2405fe02:	bf00      	nop
2405fe04:	2405fe15 	.word	0x2405fe15
2405fe08:	2405fe37 	.word	0x2405fe37
2405fe0c:	2405fe59 	.word	0x2405fe59
2405fe10:	2405fe7b 	.word	0x2405fe7b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
2405fe14:	68fb      	ldr	r3, [r7, #12]
2405fe16:	2280      	movs	r2, #128	; 0x80
2405fe18:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
2405fe1a:	683b      	ldr	r3, [r7, #0]
2405fe1c:	085b      	lsrs	r3, r3, #1
2405fe1e:	015a      	lsls	r2, r3, #5
2405fe20:	68fb      	ldr	r3, [r7, #12]
2405fe22:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
2405fe24:	683b      	ldr	r3, [r7, #0]
2405fe26:	085b      	lsrs	r3, r3, #1
2405fe28:	011a      	lsls	r2, r3, #4
2405fe2a:	68fb      	ldr	r3, [r7, #12]
2405fe2c:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
2405fe2e:	68fb      	ldr	r3, [r7, #12]
2405fe30:	2240      	movs	r2, #64	; 0x40
2405fe32:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
2405fe34:	e035      	b.n	2405fea2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
2405fe36:	68fb      	ldr	r3, [r7, #12]
2405fe38:	2280      	movs	r2, #128	; 0x80
2405fe3a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2405fe3c:	683b      	ldr	r3, [r7, #0]
2405fe3e:	085b      	lsrs	r3, r3, #1
2405fe40:	019a      	lsls	r2, r3, #6
2405fe42:	68fb      	ldr	r3, [r7, #12]
2405fe44:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
2405fe46:	683b      	ldr	r3, [r7, #0]
2405fe48:	085b      	lsrs	r3, r3, #1
2405fe4a:	015a      	lsls	r2, r3, #5
2405fe4c:	68fb      	ldr	r3, [r7, #12]
2405fe4e:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2405fe50:	68fb      	ldr	r3, [r7, #12]
2405fe52:	2280      	movs	r2, #128	; 0x80
2405fe54:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
2405fe56:	e024      	b.n	2405fea2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
2405fe58:	68fb      	ldr	r3, [r7, #12]
2405fe5a:	22c0      	movs	r2, #192	; 0xc0
2405fe5c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2405fe5e:	683b      	ldr	r3, [r7, #0]
2405fe60:	085b      	lsrs	r3, r3, #1
2405fe62:	019a      	lsls	r2, r3, #6
2405fe64:	68fb      	ldr	r3, [r7, #12]
2405fe66:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
2405fe68:	683b      	ldr	r3, [r7, #0]
2405fe6a:	085b      	lsrs	r3, r3, #1
2405fe6c:	015a      	lsls	r2, r3, #5
2405fe6e:	68fb      	ldr	r3, [r7, #12]
2405fe70:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2405fe72:	68fb      	ldr	r3, [r7, #12]
2405fe74:	2280      	movs	r2, #128	; 0x80
2405fe76:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
2405fe78:	e013      	b.n	2405fea2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
2405fe7a:	68fb      	ldr	r3, [r7, #12]
2405fe7c:	22e0      	movs	r2, #224	; 0xe0
2405fe7e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2405fe80:	683b      	ldr	r3, [r7, #0]
2405fe82:	085b      	lsrs	r3, r3, #1
2405fe84:	019a      	lsls	r2, r3, #6
2405fe86:	68fb      	ldr	r3, [r7, #12]
2405fe88:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
2405fe8a:	683b      	ldr	r3, [r7, #0]
2405fe8c:	085b      	lsrs	r3, r3, #1
2405fe8e:	015a      	lsls	r2, r3, #5
2405fe90:	68fb      	ldr	r3, [r7, #12]
2405fe92:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2405fe94:	68fb      	ldr	r3, [r7, #12]
2405fe96:	2280      	movs	r2, #128	; 0x80
2405fe98:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
2405fe9a:	e002      	b.n	2405fea2 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
2405fe9c:	2301      	movs	r3, #1
2405fe9e:	75fb      	strb	r3, [r7, #23]
      break;
2405fea0:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
2405fea2:	68bb      	ldr	r3, [r7, #8]
2405fea4:	2b02      	cmp	r3, #2
2405fea6:	d10b      	bne.n	2405fec0 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
2405fea8:	687b      	ldr	r3, [r7, #4]
2405feaa:	2b01      	cmp	r3, #1
2405feac:	d102      	bne.n	2405feb4 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
2405feae:	68fb      	ldr	r3, [r7, #12]
2405feb0:	2210      	movs	r2, #16
2405feb2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
2405feb4:	687b      	ldr	r3, [r7, #4]
2405feb6:	2b02      	cmp	r3, #2
2405feb8:	d102      	bne.n	2405fec0 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
2405feba:	68fb      	ldr	r3, [r7, #12]
2405febc:	2208      	movs	r2, #8
2405febe:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
2405fec0:	7dfb      	ldrb	r3, [r7, #23]
}
2405fec2:	4618      	mov	r0, r3
2405fec4:	371c      	adds	r7, #28
2405fec6:	46bd      	mov	sp, r7
2405fec8:	f85d 7b04 	ldr.w	r7, [sp], #4
2405fecc:	4770      	bx	lr
2405fece:	bf00      	nop

2405fed0 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
2405fed0:	b480      	push	{r7}
2405fed2:	b087      	sub	sp, #28
2405fed4:	af00      	add	r7, sp, #0
2405fed6:	60f8      	str	r0, [r7, #12]
2405fed8:	60b9      	str	r1, [r7, #8]
2405feda:	607a      	str	r2, [r7, #4]
2405fedc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
2405fede:	2300      	movs	r3, #0
2405fee0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
2405fee2:	68fb      	ldr	r3, [r7, #12]
2405fee4:	2200      	movs	r2, #0
2405fee6:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
2405fee8:	68fb      	ldr	r3, [r7, #12]
2405feea:	2200      	movs	r2, #0
2405feec:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2405feee:	68fb      	ldr	r3, [r7, #12]
2405fef0:	685b      	ldr	r3, [r3, #4]
2405fef2:	2b00      	cmp	r3, #0
2405fef4:	d003      	beq.n	2405fefe <SAI_InitPCM+0x2e>
2405fef6:	68fb      	ldr	r3, [r7, #12]
2405fef8:	685b      	ldr	r3, [r3, #4]
2405fefa:	2b02      	cmp	r3, #2
2405fefc:	d103      	bne.n	2405ff06 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
2405fefe:	68fb      	ldr	r3, [r7, #12]
2405ff00:	2201      	movs	r2, #1
2405ff02:	651a      	str	r2, [r3, #80]	; 0x50
2405ff04:	e002      	b.n	2405ff0c <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
2405ff06:	68fb      	ldr	r3, [r7, #12]
2405ff08:	2200      	movs	r2, #0
2405ff0a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
2405ff0c:	68fb      	ldr	r3, [r7, #12]
2405ff0e:	2200      	movs	r2, #0
2405ff10:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
2405ff12:	68fb      	ldr	r3, [r7, #12]
2405ff14:	f44f 3200 	mov.w	r2, #131072	; 0x20000
2405ff18:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
2405ff1a:	68fb      	ldr	r3, [r7, #12]
2405ff1c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
2405ff20:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
2405ff22:	68fb      	ldr	r3, [r7, #12]
2405ff24:	2200      	movs	r2, #0
2405ff26:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
2405ff28:	68fb      	ldr	r3, [r7, #12]
2405ff2a:	683a      	ldr	r2, [r7, #0]
2405ff2c:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
2405ff2e:	68fb      	ldr	r3, [r7, #12]
2405ff30:	f64f 72ff 	movw	r2, #65535	; 0xffff
2405ff34:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
2405ff36:	68bb      	ldr	r3, [r7, #8]
2405ff38:	2b04      	cmp	r3, #4
2405ff3a:	d103      	bne.n	2405ff44 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
2405ff3c:	68fb      	ldr	r3, [r7, #12]
2405ff3e:	2201      	movs	r2, #1
2405ff40:	659a      	str	r2, [r3, #88]	; 0x58
2405ff42:	e002      	b.n	2405ff4a <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
2405ff44:	68fb      	ldr	r3, [r7, #12]
2405ff46:	220d      	movs	r2, #13
2405ff48:	659a      	str	r2, [r3, #88]	; 0x58
  }

  switch (datasize)
2405ff4a:	687b      	ldr	r3, [r7, #4]
2405ff4c:	2b03      	cmp	r3, #3
2405ff4e:	d837      	bhi.n	2405ffc0 <SAI_InitPCM+0xf0>
2405ff50:	a201      	add	r2, pc, #4	; (adr r2, 2405ff58 <SAI_InitPCM+0x88>)
2405ff52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2405ff56:	bf00      	nop
2405ff58:	2405ff69 	.word	0x2405ff69
2405ff5c:	2405ff7f 	.word	0x2405ff7f
2405ff60:	2405ff95 	.word	0x2405ff95
2405ff64:	2405ffab 	.word	0x2405ffab
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
2405ff68:	68fb      	ldr	r3, [r7, #12]
2405ff6a:	2280      	movs	r2, #128	; 0x80
2405ff6c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
2405ff6e:	683b      	ldr	r3, [r7, #0]
2405ff70:	011a      	lsls	r2, r3, #4
2405ff72:	68fb      	ldr	r3, [r7, #12]
2405ff74:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
2405ff76:	68fb      	ldr	r3, [r7, #12]
2405ff78:	2240      	movs	r2, #64	; 0x40
2405ff7a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
2405ff7c:	e023      	b.n	2405ffc6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
2405ff7e:	68fb      	ldr	r3, [r7, #12]
2405ff80:	2280      	movs	r2, #128	; 0x80
2405ff82:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
2405ff84:	683b      	ldr	r3, [r7, #0]
2405ff86:	015a      	lsls	r2, r3, #5
2405ff88:	68fb      	ldr	r3, [r7, #12]
2405ff8a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2405ff8c:	68fb      	ldr	r3, [r7, #12]
2405ff8e:	2280      	movs	r2, #128	; 0x80
2405ff90:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
2405ff92:	e018      	b.n	2405ffc6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
2405ff94:	68fb      	ldr	r3, [r7, #12]
2405ff96:	22c0      	movs	r2, #192	; 0xc0
2405ff98:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
2405ff9a:	683b      	ldr	r3, [r7, #0]
2405ff9c:	015a      	lsls	r2, r3, #5
2405ff9e:	68fb      	ldr	r3, [r7, #12]
2405ffa0:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2405ffa2:	68fb      	ldr	r3, [r7, #12]
2405ffa4:	2280      	movs	r2, #128	; 0x80
2405ffa6:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
2405ffa8:	e00d      	b.n	2405ffc6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
2405ffaa:	68fb      	ldr	r3, [r7, #12]
2405ffac:	22e0      	movs	r2, #224	; 0xe0
2405ffae:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
2405ffb0:	683b      	ldr	r3, [r7, #0]
2405ffb2:	015a      	lsls	r2, r3, #5
2405ffb4:	68fb      	ldr	r3, [r7, #12]
2405ffb6:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2405ffb8:	68fb      	ldr	r3, [r7, #12]
2405ffba:	2280      	movs	r2, #128	; 0x80
2405ffbc:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
2405ffbe:	e002      	b.n	2405ffc6 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
2405ffc0:	2301      	movs	r3, #1
2405ffc2:	75fb      	strb	r3, [r7, #23]
      break;
2405ffc4:	bf00      	nop
  }

  return status;
2405ffc6:	7dfb      	ldrb	r3, [r7, #23]
}
2405ffc8:	4618      	mov	r0, r3
2405ffca:	371c      	adds	r7, #28
2405ffcc:	46bd      	mov	sp, r7
2405ffce:	f85d 7b04 	ldr.w	r7, [sp], #4
2405ffd2:	4770      	bx	lr

2405ffd4 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
2405ffd4:	b480      	push	{r7}
2405ffd6:	b085      	sub	sp, #20
2405ffd8:	af00      	add	r7, sp, #0
2405ffda:	6078      	str	r0, [r7, #4]
2405ffdc:	460b      	mov	r3, r1
2405ffde:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
2405ffe0:	2301      	movs	r3, #1
2405ffe2:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
2405ffe4:	78fb      	ldrb	r3, [r7, #3]
2405ffe6:	2b01      	cmp	r3, #1
2405ffe8:	d103      	bne.n	2405fff2 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
2405ffea:	68fb      	ldr	r3, [r7, #12]
2405ffec:	f043 0308 	orr.w	r3, r3, #8
2405fff0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2405fff2:	687b      	ldr	r3, [r7, #4]
2405fff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2405fff6:	2b08      	cmp	r3, #8
2405fff8:	d10b      	bne.n	24060012 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2405fffa:	687b      	ldr	r3, [r7, #4]
2405fffc:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2405fffe:	2b03      	cmp	r3, #3
24060000:	d003      	beq.n	2406000a <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24060002:	687b      	ldr	r3, [r7, #4]
24060004:	685b      	ldr	r3, [r3, #4]
24060006:	2b01      	cmp	r3, #1
24060008:	d103      	bne.n	24060012 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
2406000a:	68fb      	ldr	r3, [r7, #12]
2406000c:	f043 0310 	orr.w	r3, r3, #16
24060010:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
24060012:	687b      	ldr	r3, [r7, #4]
24060014:	685b      	ldr	r3, [r3, #4]
24060016:	2b03      	cmp	r3, #3
24060018:	d003      	beq.n	24060022 <SAI_InterruptFlag+0x4e>
2406001a:	687b      	ldr	r3, [r7, #4]
2406001c:	685b      	ldr	r3, [r3, #4]
2406001e:	2b02      	cmp	r3, #2
24060020:	d104      	bne.n	2406002c <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
24060022:	68fb      	ldr	r3, [r7, #12]
24060024:	f043 0360 	orr.w	r3, r3, #96	; 0x60
24060028:	60fb      	str	r3, [r7, #12]
2406002a:	e003      	b.n	24060034 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
2406002c:	68fb      	ldr	r3, [r7, #12]
2406002e:	f043 0304 	orr.w	r3, r3, #4
24060032:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
24060034:	68fb      	ldr	r3, [r7, #12]
}
24060036:	4618      	mov	r0, r3
24060038:	3714      	adds	r7, #20
2406003a:	46bd      	mov	sp, r7
2406003c:	f85d 7b04 	ldr.w	r7, [sp], #4
24060040:	4770      	bx	lr
	...

24060044 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
24060044:	b480      	push	{r7}
24060046:	b085      	sub	sp, #20
24060048:	af00      	add	r7, sp, #0
2406004a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2406004c:	4b18      	ldr	r3, [pc, #96]	; (240600b0 <SAI_Disable+0x6c>)
2406004e:	681b      	ldr	r3, [r3, #0]
24060050:	4a18      	ldr	r2, [pc, #96]	; (240600b4 <SAI_Disable+0x70>)
24060052:	fba2 2303 	umull	r2, r3, r2, r3
24060056:	0b1b      	lsrs	r3, r3, #12
24060058:	009b      	lsls	r3, r3, #2
2406005a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
2406005c:	2300      	movs	r3, #0
2406005e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
24060060:	687b      	ldr	r3, [r7, #4]
24060062:	681b      	ldr	r3, [r3, #0]
24060064:	681a      	ldr	r2, [r3, #0]
24060066:	687b      	ldr	r3, [r7, #4]
24060068:	681b      	ldr	r3, [r3, #0]
2406006a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
2406006e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
24060070:	68fb      	ldr	r3, [r7, #12]
24060072:	2b00      	cmp	r3, #0
24060074:	d10a      	bne.n	2406008c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
24060076:	687b      	ldr	r3, [r7, #4]
24060078:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2406007c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
24060080:	687b      	ldr	r3, [r7, #4]
24060082:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
24060086:	2303      	movs	r3, #3
24060088:	72fb      	strb	r3, [r7, #11]
      break;
2406008a:	e009      	b.n	240600a0 <SAI_Disable+0x5c>
    }
    count--;
2406008c:	68fb      	ldr	r3, [r7, #12]
2406008e:	3b01      	subs	r3, #1
24060090:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
24060092:	687b      	ldr	r3, [r7, #4]
24060094:	681b      	ldr	r3, [r3, #0]
24060096:	681b      	ldr	r3, [r3, #0]
24060098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2406009c:	2b00      	cmp	r3, #0
2406009e:	d1e7      	bne.n	24060070 <SAI_Disable+0x2c>

  return status;
240600a0:	7afb      	ldrb	r3, [r7, #11]
}
240600a2:	4618      	mov	r0, r3
240600a4:	3714      	adds	r7, #20
240600a6:	46bd      	mov	sp, r7
240600a8:	f85d 7b04 	ldr.w	r7, [sp], #4
240600ac:	4770      	bx	lr
240600ae:	bf00      	nop
240600b0:	20000044 	.word	0x20000044
240600b4:	95cbec1b 	.word	0x95cbec1b

240600b8 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
240600b8:	b580      	push	{r7, lr}
240600ba:	b084      	sub	sp, #16
240600bc:	af00      	add	r7, sp, #0
240600be:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
240600c0:	687b      	ldr	r3, [r7, #4]
240600c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240600c4:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
240600c6:	687b      	ldr	r3, [r7, #4]
240600c8:	69db      	ldr	r3, [r3, #28]
240600ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
240600ce:	d01c      	beq.n	2406010a <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
240600d0:	68fb      	ldr	r3, [r7, #12]
240600d2:	2200      	movs	r2, #0
240600d4:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
240600d8:	68fb      	ldr	r3, [r7, #12]
240600da:	681b      	ldr	r3, [r3, #0]
240600dc:	681a      	ldr	r2, [r3, #0]
240600de:	68fb      	ldr	r3, [r7, #12]
240600e0:	681b      	ldr	r3, [r3, #0]
240600e2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
240600e6:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
240600e8:	2100      	movs	r1, #0
240600ea:	68f8      	ldr	r0, [r7, #12]
240600ec:	f7ff ff72 	bl	2405ffd4 <SAI_InterruptFlag>
240600f0:	4603      	mov	r3, r0
240600f2:	43d9      	mvns	r1, r3
240600f4:	68fb      	ldr	r3, [r7, #12]
240600f6:	681b      	ldr	r3, [r3, #0]
240600f8:	691a      	ldr	r2, [r3, #16]
240600fa:	68fb      	ldr	r3, [r7, #12]
240600fc:	681b      	ldr	r3, [r3, #0]
240600fe:	400a      	ands	r2, r1
24060100:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
24060102:	68fb      	ldr	r3, [r7, #12]
24060104:	2201      	movs	r2, #1
24060106:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
2406010a:	68f8      	ldr	r0, [r7, #12]
2406010c:	f7f0 f904 	bl	24050318 <HAL_SAI_TxCpltCallback>
#endif
}
24060110:	bf00      	nop
24060112:	3710      	adds	r7, #16
24060114:	46bd      	mov	sp, r7
24060116:	bd80      	pop	{r7, pc}

24060118 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
24060118:	b580      	push	{r7, lr}
2406011a:	b084      	sub	sp, #16
2406011c:	af00      	add	r7, sp, #0
2406011e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
24060120:	687b      	ldr	r3, [r7, #4]
24060122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24060124:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
24060126:	68f8      	ldr	r0, [r7, #12]
24060128:	f7f0 f894 	bl	24050254 <HAL_SAI_TxHalfCpltCallback>
#endif
}
2406012c:	bf00      	nop
2406012e:	3710      	adds	r7, #16
24060130:	46bd      	mov	sp, r7
24060132:	bd80      	pop	{r7, pc}

24060134 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
24060134:	b580      	push	{r7, lr}
24060136:	b084      	sub	sp, #16
24060138:	af00      	add	r7, sp, #0
2406013a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2406013c:	687b      	ldr	r3, [r7, #4]
2406013e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24060140:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
24060142:	6878      	ldr	r0, [r7, #4]
24060144:	f7f8 fb48 	bl	240587d8 <HAL_DMA_GetError>
24060148:	4603      	mov	r3, r0
2406014a:	2b02      	cmp	r3, #2
2406014c:	d01d      	beq.n	2406018a <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2406014e:	68fb      	ldr	r3, [r7, #12]
24060150:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
24060154:	f043 0280 	orr.w	r2, r3, #128	; 0x80
24060158:	68fb      	ldr	r3, [r7, #12]
2406015a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
2406015e:	68fb      	ldr	r3, [r7, #12]
24060160:	681b      	ldr	r3, [r3, #0]
24060162:	681a      	ldr	r2, [r3, #0]
24060164:	68fb      	ldr	r3, [r7, #12]
24060166:	681b      	ldr	r3, [r3, #0]
24060168:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
2406016c:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
2406016e:	68f8      	ldr	r0, [r7, #12]
24060170:	f7ff ff68 	bl	24060044 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
24060174:	68fb      	ldr	r3, [r7, #12]
24060176:	2201      	movs	r2, #1
24060178:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
2406017c:	68fb      	ldr	r3, [r7, #12]
2406017e:	2200      	movs	r2, #0
24060180:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
24060184:	68f8      	ldr	r0, [r7, #12]
24060186:	f7ff fde7 	bl	2405fd58 <HAL_SAI_ErrorCallback>
#endif
  }
}
2406018a:	bf00      	nop
2406018c:	3710      	adds	r7, #16
2406018e:	46bd      	mov	sp, r7
24060190:	bd80      	pop	{r7, pc}

24060192 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
24060192:	b580      	push	{r7, lr}
24060194:	b084      	sub	sp, #16
24060196:	af00      	add	r7, sp, #0
24060198:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2406019a:	687b      	ldr	r3, [r7, #4]
2406019c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2406019e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
240601a0:	68fb      	ldr	r3, [r7, #12]
240601a2:	681b      	ldr	r3, [r3, #0]
240601a4:	681a      	ldr	r2, [r3, #0]
240601a6:	68fb      	ldr	r3, [r7, #12]
240601a8:	681b      	ldr	r3, [r3, #0]
240601aa:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
240601ae:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
240601b0:	68fb      	ldr	r3, [r7, #12]
240601b2:	681b      	ldr	r3, [r3, #0]
240601b4:	2200      	movs	r2, #0
240601b6:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
240601b8:	68fb      	ldr	r3, [r7, #12]
240601ba:	681b      	ldr	r3, [r3, #0]
240601bc:	f04f 32ff 	mov.w	r2, #4294967295
240601c0:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
240601c2:	68fb      	ldr	r3, [r7, #12]
240601c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
240601c8:	2b20      	cmp	r3, #32
240601ca:	d00a      	beq.n	240601e2 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
240601cc:	68f8      	ldr	r0, [r7, #12]
240601ce:	f7ff ff39 	bl	24060044 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
240601d2:	68fb      	ldr	r3, [r7, #12]
240601d4:	681b      	ldr	r3, [r3, #0]
240601d6:	685a      	ldr	r2, [r3, #4]
240601d8:	68fb      	ldr	r3, [r7, #12]
240601da:	681b      	ldr	r3, [r3, #0]
240601dc:	f042 0208 	orr.w	r2, r2, #8
240601e0:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
240601e2:	68fb      	ldr	r3, [r7, #12]
240601e4:	2201      	movs	r2, #1
240601e6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
240601ea:	68fb      	ldr	r3, [r7, #12]
240601ec:	2200      	movs	r2, #0
240601ee:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
240601f2:	68f8      	ldr	r0, [r7, #12]
240601f4:	f7ff fdb0 	bl	2405fd58 <HAL_SAI_ErrorCallback>
#endif
}
240601f8:	bf00      	nop
240601fa:	3710      	adds	r7, #16
240601fc:	46bd      	mov	sp, r7
240601fe:	bd80      	pop	{r7, pc}

24060200 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
24060200:	b580      	push	{r7, lr}
24060202:	b084      	sub	sp, #16
24060204:	af00      	add	r7, sp, #0
24060206:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
24060208:	687b      	ldr	r3, [r7, #4]
2406020a:	2b00      	cmp	r3, #0
2406020c:	d101      	bne.n	24060212 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
2406020e:	2301      	movs	r3, #1
24060210:	e10f      	b.n	24060432 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
24060212:	687b      	ldr	r3, [r7, #4]
24060214:	2200      	movs	r2, #0
24060216:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
24060218:	687b      	ldr	r3, [r7, #4]
2406021a:	681b      	ldr	r3, [r3, #0]
2406021c:	4a87      	ldr	r2, [pc, #540]	; (2406043c <HAL_SPI_Init+0x23c>)
2406021e:	4293      	cmp	r3, r2
24060220:	d00f      	beq.n	24060242 <HAL_SPI_Init+0x42>
24060222:	687b      	ldr	r3, [r7, #4]
24060224:	681b      	ldr	r3, [r3, #0]
24060226:	4a86      	ldr	r2, [pc, #536]	; (24060440 <HAL_SPI_Init+0x240>)
24060228:	4293      	cmp	r3, r2
2406022a:	d00a      	beq.n	24060242 <HAL_SPI_Init+0x42>
2406022c:	687b      	ldr	r3, [r7, #4]
2406022e:	681b      	ldr	r3, [r3, #0]
24060230:	4a84      	ldr	r2, [pc, #528]	; (24060444 <HAL_SPI_Init+0x244>)
24060232:	4293      	cmp	r3, r2
24060234:	d005      	beq.n	24060242 <HAL_SPI_Init+0x42>
24060236:	687b      	ldr	r3, [r7, #4]
24060238:	68db      	ldr	r3, [r3, #12]
2406023a:	2b0f      	cmp	r3, #15
2406023c:	d901      	bls.n	24060242 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
2406023e:	2301      	movs	r3, #1
24060240:	e0f7      	b.n	24060432 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
24060242:	6878      	ldr	r0, [r7, #4]
24060244:	f000 fbca 	bl	240609dc <SPI_GetPacketSize>
24060248:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
2406024a:	687b      	ldr	r3, [r7, #4]
2406024c:	681b      	ldr	r3, [r3, #0]
2406024e:	4a7b      	ldr	r2, [pc, #492]	; (2406043c <HAL_SPI_Init+0x23c>)
24060250:	4293      	cmp	r3, r2
24060252:	d00c      	beq.n	2406026e <HAL_SPI_Init+0x6e>
24060254:	687b      	ldr	r3, [r7, #4]
24060256:	681b      	ldr	r3, [r3, #0]
24060258:	4a79      	ldr	r2, [pc, #484]	; (24060440 <HAL_SPI_Init+0x240>)
2406025a:	4293      	cmp	r3, r2
2406025c:	d007      	beq.n	2406026e <HAL_SPI_Init+0x6e>
2406025e:	687b      	ldr	r3, [r7, #4]
24060260:	681b      	ldr	r3, [r3, #0]
24060262:	4a78      	ldr	r2, [pc, #480]	; (24060444 <HAL_SPI_Init+0x244>)
24060264:	4293      	cmp	r3, r2
24060266:	d002      	beq.n	2406026e <HAL_SPI_Init+0x6e>
24060268:	68fb      	ldr	r3, [r7, #12]
2406026a:	2b08      	cmp	r3, #8
2406026c:	d811      	bhi.n	24060292 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
2406026e:	687b      	ldr	r3, [r7, #4]
24060270:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
24060272:	4a72      	ldr	r2, [pc, #456]	; (2406043c <HAL_SPI_Init+0x23c>)
24060274:	4293      	cmp	r3, r2
24060276:	d009      	beq.n	2406028c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
24060278:	687b      	ldr	r3, [r7, #4]
2406027a:	681b      	ldr	r3, [r3, #0]
2406027c:	4a70      	ldr	r2, [pc, #448]	; (24060440 <HAL_SPI_Init+0x240>)
2406027e:	4293      	cmp	r3, r2
24060280:	d004      	beq.n	2406028c <HAL_SPI_Init+0x8c>
24060282:	687b      	ldr	r3, [r7, #4]
24060284:	681b      	ldr	r3, [r3, #0]
24060286:	4a6f      	ldr	r2, [pc, #444]	; (24060444 <HAL_SPI_Init+0x244>)
24060288:	4293      	cmp	r3, r2
2406028a:	d104      	bne.n	24060296 <HAL_SPI_Init+0x96>
2406028c:	68fb      	ldr	r3, [r7, #12]
2406028e:	2b10      	cmp	r3, #16
24060290:	d901      	bls.n	24060296 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
24060292:	2301      	movs	r3, #1
24060294:	e0cd      	b.n	24060432 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
24060296:	687b      	ldr	r3, [r7, #4]
24060298:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
2406029c:	b2db      	uxtb	r3, r3
2406029e:	2b00      	cmp	r3, #0
240602a0:	d106      	bne.n	240602b0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
240602a2:	687b      	ldr	r3, [r7, #4]
240602a4:	2200      	movs	r2, #0
240602a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
240602aa:	6878      	ldr	r0, [r7, #4]
240602ac:	f7f3 f9be 	bl	2405362c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
240602b0:	687b      	ldr	r3, [r7, #4]
240602b2:	2202      	movs	r2, #2
240602b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
240602b8:	687b      	ldr	r3, [r7, #4]
240602ba:	681b      	ldr	r3, [r3, #0]
240602bc:	681a      	ldr	r2, [r3, #0]
240602be:	687b      	ldr	r3, [r7, #4]
240602c0:	681b      	ldr	r3, [r3, #0]
240602c2:	f022 0201 	bic.w	r2, r2, #1
240602c6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
240602c8:	687b      	ldr	r3, [r7, #4]
240602ca:	681b      	ldr	r3, [r3, #0]
240602cc:	689b      	ldr	r3, [r3, #8]
240602ce:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
240602d2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
240602d4:	687b      	ldr	r3, [r7, #4]
240602d6:	699b      	ldr	r3, [r3, #24]
240602d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
240602dc:	d119      	bne.n	24060312 <HAL_SPI_Init+0x112>
240602de:	687b      	ldr	r3, [r7, #4]
240602e0:	685b      	ldr	r3, [r3, #4]
240602e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
240602e6:	d103      	bne.n	240602f0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
240602e8:	687b      	ldr	r3, [r7, #4]
240602ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
240602ec:	2b00      	cmp	r3, #0
240602ee:	d008      	beq.n	24060302 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
240602f0:	687b      	ldr	r3, [r7, #4]
240602f2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
240602f4:	2b00      	cmp	r3, #0
240602f6:	d10c      	bne.n	24060312 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
240602f8:	687b      	ldr	r3, [r7, #4]
240602fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
240602fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24060300:	d107      	bne.n	24060312 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
24060302:	687b      	ldr	r3, [r7, #4]
24060304:	681b      	ldr	r3, [r3, #0]
24060306:	681a      	ldr	r2, [r3, #0]
24060308:	687b      	ldr	r3, [r7, #4]
2406030a:	681b      	ldr	r3, [r3, #0]
2406030c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
24060310:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
24060312:	687b      	ldr	r3, [r7, #4]
24060314:	685b      	ldr	r3, [r3, #4]
24060316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2406031a:	2b00      	cmp	r3, #0
2406031c:	d00f      	beq.n	2406033e <HAL_SPI_Init+0x13e>
2406031e:	687b      	ldr	r3, [r7, #4]
24060320:	68db      	ldr	r3, [r3, #12]
24060322:	2b06      	cmp	r3, #6
24060324:	d90b      	bls.n	2406033e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
24060326:	687b      	ldr	r3, [r7, #4]
24060328:	681b      	ldr	r3, [r3, #0]
2406032a:	681b      	ldr	r3, [r3, #0]
2406032c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
24060330:	687b      	ldr	r3, [r7, #4]
24060332:	6d1a      	ldr	r2, [r3, #80]	; 0x50
24060334:	687b      	ldr	r3, [r7, #4]
24060336:	681b      	ldr	r3, [r3, #0]
24060338:	430a      	orrs	r2, r1
2406033a:	601a      	str	r2, [r3, #0]
2406033c:	e007      	b.n	2406034e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
2406033e:	687b      	ldr	r3, [r7, #4]
24060340:	681b      	ldr	r3, [r3, #0]
24060342:	681a      	ldr	r2, [r3, #0]
24060344:	687b      	ldr	r3, [r7, #4]
24060346:	681b      	ldr	r3, [r3, #0]
24060348:	f422 7280 	bic.w	r2, r2, #256	; 0x100
2406034c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
2406034e:	687b      	ldr	r3, [r7, #4]
24060350:	69da      	ldr	r2, [r3, #28]
24060352:	687b      	ldr	r3, [r7, #4]
24060354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24060356:	431a      	orrs	r2, r3
24060358:	68bb      	ldr	r3, [r7, #8]
2406035a:	431a      	orrs	r2, r3
2406035c:	687b      	ldr	r3, [r7, #4]
2406035e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24060360:	ea42 0103 	orr.w	r1, r2, r3
24060364:	687b      	ldr	r3, [r7, #4]
24060366:	68da      	ldr	r2, [r3, #12]
24060368:	687b      	ldr	r3, [r7, #4]
2406036a:	681b      	ldr	r3, [r3, #0]
2406036c:	430a      	orrs	r2, r1
2406036e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
24060370:	687b      	ldr	r3, [r7, #4]
24060372:	6b5a      	ldr	r2, [r3, #52]	; 0x34
24060374:	687b      	ldr	r3, [r7, #4]
24060376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24060378:	431a      	orrs	r2, r3
2406037a:	687b      	ldr	r3, [r7, #4]
2406037c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2406037e:	431a      	orrs	r2, r3
24060380:	687b      	ldr	r3, [r7, #4]
24060382:	699b      	ldr	r3, [r3, #24]
24060384:	431a      	orrs	r2, r3
24060386:	687b      	ldr	r3, [r7, #4]
24060388:	691b      	ldr	r3, [r3, #16]
2406038a:	431a      	orrs	r2, r3
2406038c:	687b      	ldr	r3, [r7, #4]
2406038e:	695b      	ldr	r3, [r3, #20]
24060390:	431a      	orrs	r2, r3
24060392:	687b      	ldr	r3, [r7, #4]
24060394:	6a1b      	ldr	r3, [r3, #32]
24060396:	431a      	orrs	r2, r3
24060398:	687b      	ldr	r3, [r7, #4]
2406039a:	685b      	ldr	r3, [r3, #4]
2406039c:	431a      	orrs	r2, r3
2406039e:	687b      	ldr	r3, [r7, #4]
240603a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
240603a2:	431a      	orrs	r2, r3
240603a4:	687b      	ldr	r3, [r7, #4]
240603a6:	689b      	ldr	r3, [r3, #8]
240603a8:	431a      	orrs	r2, r3
240603aa:	687b      	ldr	r3, [r7, #4]
240603ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
240603ae:	ea42 0103 	orr.w	r1, r2, r3
240603b2:	687b      	ldr	r3, [r7, #4]
240603b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
240603b6:	687b      	ldr	r3, [r7, #4]
240603b8:	681b      	ldr	r3, [r3, #0]
240603ba:	430a      	orrs	r2, r1
240603bc:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
240603be:	687b      	ldr	r3, [r7, #4]
240603c0:	685b      	ldr	r3, [r3, #4]
240603c2:	2b00      	cmp	r3, #0
240603c4:	d113      	bne.n	240603ee <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
240603c6:	687b      	ldr	r3, [r7, #4]
240603c8:	681b      	ldr	r3, [r3, #0]
240603ca:	689b      	ldr	r3, [r3, #8]
240603cc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
240603d0:	687b      	ldr	r3, [r7, #4]
240603d2:	681b      	ldr	r3, [r3, #0]
240603d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
240603d8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
240603da:	687b      	ldr	r3, [r7, #4]
240603dc:	681b      	ldr	r3, [r3, #0]
240603de:	689b      	ldr	r3, [r3, #8]
240603e0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
240603e4:	687b      	ldr	r3, [r7, #4]
240603e6:	681b      	ldr	r3, [r3, #0]
240603e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
240603ec:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
240603ee:	687b      	ldr	r3, [r7, #4]
240603f0:	681b      	ldr	r3, [r3, #0]
240603f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
240603f4:	687b      	ldr	r3, [r7, #4]
240603f6:	681b      	ldr	r3, [r3, #0]
240603f8:	f022 0201 	bic.w	r2, r2, #1
240603fc:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
240603fe:	687b      	ldr	r3, [r7, #4]
24060400:	685b      	ldr	r3, [r3, #4]
24060402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
24060406:	2b00      	cmp	r3, #0
24060408:	d00a      	beq.n	24060420 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
2406040a:	687b      	ldr	r3, [r7, #4]
2406040c:	681b      	ldr	r3, [r3, #0]
2406040e:	68db      	ldr	r3, [r3, #12]
24060410:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
24060414:	687b      	ldr	r3, [r7, #4]
24060416:	6d5a      	ldr	r2, [r3, #84]	; 0x54
24060418:	687b      	ldr	r3, [r7, #4]
2406041a:	681b      	ldr	r3, [r3, #0]
2406041c:	430a      	orrs	r2, r1
2406041e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
24060420:	687b      	ldr	r3, [r7, #4]
24060422:	2200      	movs	r2, #0
24060424:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
24060428:	687b      	ldr	r3, [r7, #4]
2406042a:	2201      	movs	r2, #1
2406042c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
24060430:	2300      	movs	r3, #0
}
24060432:	4618      	mov	r0, r3
24060434:	3710      	adds	r7, #16
24060436:	46bd      	mov	sp, r7
24060438:	bd80      	pop	{r7, pc}
2406043a:	bf00      	nop
2406043c:	40013000 	.word	0x40013000
24060440:	40003800 	.word	0x40003800
24060444:	40003c00 	.word	0x40003c00

24060448 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
24060448:	b580      	push	{r7, lr}
2406044a:	b08a      	sub	sp, #40	; 0x28
2406044c:	af02      	add	r7, sp, #8
2406044e:	60f8      	str	r0, [r7, #12]
24060450:	60b9      	str	r1, [r7, #8]
24060452:	603b      	str	r3, [r7, #0]
24060454:	4613      	mov	r3, r2
24060456:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
24060458:	68fb      	ldr	r3, [r7, #12]
2406045a:	681b      	ldr	r3, [r3, #0]
2406045c:	3320      	adds	r3, #32
2406045e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
24060460:	2300      	movs	r3, #0
24060462:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
24060464:	68fb      	ldr	r3, [r7, #12]
24060466:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
2406046a:	2b01      	cmp	r3, #1
2406046c:	d101      	bne.n	24060472 <HAL_SPI_Transmit+0x2a>
2406046e:	2302      	movs	r3, #2
24060470:	e1e1      	b.n	24060836 <HAL_SPI_Transmit+0x3ee>
24060472:	68fb      	ldr	r3, [r7, #12]
24060474:	2201      	movs	r2, #1
24060476:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
2406047a:	f7f3 fca7 	bl	24053dcc <HAL_GetTick>
2406047e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
24060480:	68fb      	ldr	r3, [r7, #12]
24060482:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
24060486:	b2db      	uxtb	r3, r3
24060488:	2b01      	cmp	r3, #1
2406048a:	d007      	beq.n	2406049c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
2406048c:	2302      	movs	r3, #2
2406048e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
24060490:	68fb      	ldr	r3, [r7, #12]
24060492:	2200      	movs	r2, #0
24060494:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
24060498:	7efb      	ldrb	r3, [r7, #27]
2406049a:	e1cc      	b.n	24060836 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
2406049c:	68bb      	ldr	r3, [r7, #8]
2406049e:	2b00      	cmp	r3, #0
240604a0:	d002      	beq.n	240604a8 <HAL_SPI_Transmit+0x60>
240604a2:	88fb      	ldrh	r3, [r7, #6]
240604a4:	2b00      	cmp	r3, #0
240604a6:	d107      	bne.n	240604b8 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
240604a8:	2301      	movs	r3, #1
240604aa:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
240604ac:	68fb      	ldr	r3, [r7, #12]
240604ae:	2200      	movs	r2, #0
240604b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
240604b4:	7efb      	ldrb	r3, [r7, #27]
240604b6:	e1be      	b.n	24060836 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
240604b8:	68fb      	ldr	r3, [r7, #12]
240604ba:	2203      	movs	r2, #3
240604bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
240604c0:	68fb      	ldr	r3, [r7, #12]
240604c2:	2200      	movs	r2, #0
240604c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
240604c8:	68fb      	ldr	r3, [r7, #12]
240604ca:	68ba      	ldr	r2, [r7, #8]
240604cc:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
240604ce:	68fb      	ldr	r3, [r7, #12]
240604d0:	88fa      	ldrh	r2, [r7, #6]
240604d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
240604d6:	68fb      	ldr	r3, [r7, #12]
240604d8:	88fa      	ldrh	r2, [r7, #6]
240604da:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
240604de:	68fb      	ldr	r3, [r7, #12]
240604e0:	2200      	movs	r2, #0
240604e2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
240604e4:	68fb      	ldr	r3, [r7, #12]
240604e6:	2200      	movs	r2, #0
240604e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
240604ec:	68fb      	ldr	r3, [r7, #12]
240604ee:	2200      	movs	r2, #0
240604f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
240604f4:	68fb      	ldr	r3, [r7, #12]
240604f6:	2200      	movs	r2, #0
240604f8:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
240604fa:	68fb      	ldr	r3, [r7, #12]
240604fc:	2200      	movs	r2, #0
240604fe:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
24060500:	68fb      	ldr	r3, [r7, #12]
24060502:	689b      	ldr	r3, [r3, #8]
24060504:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
24060508:	d108      	bne.n	2406051c <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
2406050a:	68fb      	ldr	r3, [r7, #12]
2406050c:	681b      	ldr	r3, [r3, #0]
2406050e:	681a      	ldr	r2, [r3, #0]
24060510:	68fb      	ldr	r3, [r7, #12]
24060512:	681b      	ldr	r3, [r3, #0]
24060514:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
24060518:	601a      	str	r2, [r3, #0]
2406051a:	e009      	b.n	24060530 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
2406051c:	68fb      	ldr	r3, [r7, #12]
2406051e:	681b      	ldr	r3, [r3, #0]
24060520:	68db      	ldr	r3, [r3, #12]
24060522:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
24060526:	68fb      	ldr	r3, [r7, #12]
24060528:	681b      	ldr	r3, [r3, #0]
2406052a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
2406052e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
24060530:	68fb      	ldr	r3, [r7, #12]
24060532:	681b      	ldr	r3, [r3, #0]
24060534:	685a      	ldr	r2, [r3, #4]
24060536:	4b96      	ldr	r3, [pc, #600]	; (24060790 <HAL_SPI_Transmit+0x348>)
24060538:	4013      	ands	r3, r2
2406053a:	88f9      	ldrh	r1, [r7, #6]
2406053c:	68fa      	ldr	r2, [r7, #12]
2406053e:	6812      	ldr	r2, [r2, #0]
24060540:	430b      	orrs	r3, r1
24060542:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
24060544:	68fb      	ldr	r3, [r7, #12]
24060546:	681b      	ldr	r3, [r3, #0]
24060548:	681a      	ldr	r2, [r3, #0]
2406054a:	68fb      	ldr	r3, [r7, #12]
2406054c:	681b      	ldr	r3, [r3, #0]
2406054e:	f042 0201 	orr.w	r2, r2, #1
24060552:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
24060554:	68fb      	ldr	r3, [r7, #12]
24060556:	685b      	ldr	r3, [r3, #4]
24060558:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
2406055c:	d107      	bne.n	2406056e <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
2406055e:	68fb      	ldr	r3, [r7, #12]
24060560:	681b      	ldr	r3, [r3, #0]
24060562:	681a      	ldr	r2, [r3, #0]
24060564:	68fb      	ldr	r3, [r7, #12]
24060566:	681b      	ldr	r3, [r3, #0]
24060568:	f442 7200 	orr.w	r2, r2, #512	; 0x200
2406056c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
2406056e:	68fb      	ldr	r3, [r7, #12]
24060570:	68db      	ldr	r3, [r3, #12]
24060572:	2b0f      	cmp	r3, #15
24060574:	d947      	bls.n	24060606 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
24060576:	e03f      	b.n	240605f8 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
24060578:	68fb      	ldr	r3, [r7, #12]
2406057a:	681b      	ldr	r3, [r3, #0]
2406057c:	695b      	ldr	r3, [r3, #20]
2406057e:	f003 0302 	and.w	r3, r3, #2
24060582:	2b02      	cmp	r3, #2
24060584:	d114      	bne.n	240605b0 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
24060586:	68fb      	ldr	r3, [r7, #12]
24060588:	6dda      	ldr	r2, [r3, #92]	; 0x5c
2406058a:	68fb      	ldr	r3, [r7, #12]
2406058c:	681b      	ldr	r3, [r3, #0]
2406058e:	6812      	ldr	r2, [r2, #0]
24060590:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
24060592:	68fb      	ldr	r3, [r7, #12]
24060594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24060596:	1d1a      	adds	r2, r3, #4
24060598:	68fb      	ldr	r3, [r7, #12]
2406059a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
2406059c:	68fb      	ldr	r3, [r7, #12]
2406059e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
240605a2:	b29b      	uxth	r3, r3
240605a4:	3b01      	subs	r3, #1
240605a6:	b29a      	uxth	r2, r3
240605a8:	68fb      	ldr	r3, [r7, #12]
240605aa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
240605ae:	e023      	b.n	240605f8 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
240605b0:	f7f3 fc0c 	bl	24053dcc <HAL_GetTick>
240605b4:	4602      	mov	r2, r0
240605b6:	697b      	ldr	r3, [r7, #20]
240605b8:	1ad3      	subs	r3, r2, r3
240605ba:	683a      	ldr	r2, [r7, #0]
240605bc:	429a      	cmp	r2, r3
240605be:	d803      	bhi.n	240605c8 <HAL_SPI_Transmit+0x180>
240605c0:	683b      	ldr	r3, [r7, #0]
240605c2:	f1b3 3fff 	cmp.w	r3, #4294967295
240605c6:	d102      	bne.n	240605ce <HAL_SPI_Transmit+0x186>
240605c8:	683b      	ldr	r3, [r7, #0]
240605ca:	2b00      	cmp	r3, #0
240605cc:	d114      	bne.n	240605f8 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
240605ce:	68f8      	ldr	r0, [r7, #12]
240605d0:	f000 f936 	bl	24060840 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
240605d4:	68fb      	ldr	r3, [r7, #12]
240605d6:	2200      	movs	r2, #0
240605d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
240605dc:	68fb      	ldr	r3, [r7, #12]
240605de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
240605e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
240605e6:	68fb      	ldr	r3, [r7, #12]
240605e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
240605ec:	68fb      	ldr	r3, [r7, #12]
240605ee:	2201      	movs	r2, #1
240605f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
240605f4:	2303      	movs	r3, #3
240605f6:	e11e      	b.n	24060836 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
240605f8:	68fb      	ldr	r3, [r7, #12]
240605fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
240605fe:	b29b      	uxth	r3, r3
24060600:	2b00      	cmp	r3, #0
24060602:	d1b9      	bne.n	24060578 <HAL_SPI_Transmit+0x130>
24060604:	e0f1      	b.n	240607ea <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
24060606:	68fb      	ldr	r3, [r7, #12]
24060608:	68db      	ldr	r3, [r3, #12]
2406060a:	2b07      	cmp	r3, #7
2406060c:	f240 80e6 	bls.w	240607dc <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
24060610:	e05d      	b.n	240606ce <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
24060612:	68fb      	ldr	r3, [r7, #12]
24060614:	681b      	ldr	r3, [r3, #0]
24060616:	695b      	ldr	r3, [r3, #20]
24060618:	f003 0302 	and.w	r3, r3, #2
2406061c:	2b02      	cmp	r3, #2
2406061e:	d132      	bne.n	24060686 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
24060620:	68fb      	ldr	r3, [r7, #12]
24060622:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
24060626:	b29b      	uxth	r3, r3
24060628:	2b01      	cmp	r3, #1
2406062a:	d918      	bls.n	2406065e <HAL_SPI_Transmit+0x216>
2406062c:	68fb      	ldr	r3, [r7, #12]
2406062e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24060630:	2b00      	cmp	r3, #0
24060632:	d014      	beq.n	2406065e <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
24060634:	68fb      	ldr	r3, [r7, #12]
24060636:	6dda      	ldr	r2, [r3, #92]	; 0x5c
24060638:	68fb      	ldr	r3, [r7, #12]
2406063a:	681b      	ldr	r3, [r3, #0]
2406063c:	6812      	ldr	r2, [r2, #0]
2406063e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
24060640:	68fb      	ldr	r3, [r7, #12]
24060642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24060644:	1d1a      	adds	r2, r3, #4
24060646:	68fb      	ldr	r3, [r7, #12]
24060648:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
2406064a:	68fb      	ldr	r3, [r7, #12]
2406064c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
24060650:	b29b      	uxth	r3, r3
24060652:	3b02      	subs	r3, #2
24060654:	b29a      	uxth	r2, r3
24060656:	68fb      	ldr	r3, [r7, #12]
24060658:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
2406065c:	e037      	b.n	240606ce <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
2406065e:	68fb      	ldr	r3, [r7, #12]
24060660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24060662:	881a      	ldrh	r2, [r3, #0]
24060664:	69fb      	ldr	r3, [r7, #28]
24060666:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
24060668:	68fb      	ldr	r3, [r7, #12]
2406066a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2406066c:	1c9a      	adds	r2, r3, #2
2406066e:	68fb      	ldr	r3, [r7, #12]
24060670:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
24060672:	68fb      	ldr	r3, [r7, #12]
24060674:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
24060678:	b29b      	uxth	r3, r3
2406067a:	3b01      	subs	r3, #1
2406067c:	b29a      	uxth	r2, r3
2406067e:	68fb      	ldr	r3, [r7, #12]
24060680:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
24060684:	e023      	b.n	240606ce <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
24060686:	f7f3 fba1 	bl	24053dcc <HAL_GetTick>
2406068a:	4602      	mov	r2, r0
2406068c:	697b      	ldr	r3, [r7, #20]
2406068e:	1ad3      	subs	r3, r2, r3
24060690:	683a      	ldr	r2, [r7, #0]
24060692:	429a      	cmp	r2, r3
24060694:	d803      	bhi.n	2406069e <HAL_SPI_Transmit+0x256>
24060696:	683b      	ldr	r3, [r7, #0]
24060698:	f1b3 3fff 	cmp.w	r3, #4294967295
2406069c:	d102      	bne.n	240606a4 <HAL_SPI_Transmit+0x25c>
2406069e:	683b      	ldr	r3, [r7, #0]
240606a0:	2b00      	cmp	r3, #0
240606a2:	d114      	bne.n	240606ce <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
240606a4:	68f8      	ldr	r0, [r7, #12]
240606a6:	f000 f8cb 	bl	24060840 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
240606aa:	68fb      	ldr	r3, [r7, #12]
240606ac:	2200      	movs	r2, #0
240606ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
240606b2:	68fb      	ldr	r3, [r7, #12]
240606b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
240606b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
240606bc:	68fb      	ldr	r3, [r7, #12]
240606be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
240606c2:	68fb      	ldr	r3, [r7, #12]
240606c4:	2201      	movs	r2, #1
240606c6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
240606ca:	2303      	movs	r3, #3
240606cc:	e0b3      	b.n	24060836 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
240606ce:	68fb      	ldr	r3, [r7, #12]
240606d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
240606d4:	b29b      	uxth	r3, r3
240606d6:	2b00      	cmp	r3, #0
240606d8:	d19b      	bne.n	24060612 <HAL_SPI_Transmit+0x1ca>
240606da:	e086      	b.n	240607ea <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
240606dc:	68fb      	ldr	r3, [r7, #12]
240606de:	681b      	ldr	r3, [r3, #0]
240606e0:	695b      	ldr	r3, [r3, #20]
240606e2:	f003 0302 	and.w	r3, r3, #2
240606e6:	2b02      	cmp	r3, #2
240606e8:	d154      	bne.n	24060794 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
240606ea:	68fb      	ldr	r3, [r7, #12]
240606ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
240606f0:	b29b      	uxth	r3, r3
240606f2:	2b03      	cmp	r3, #3
240606f4:	d918      	bls.n	24060728 <HAL_SPI_Transmit+0x2e0>
240606f6:	68fb      	ldr	r3, [r7, #12]
240606f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240606fa:	2b40      	cmp	r3, #64	; 0x40
240606fc:	d914      	bls.n	24060728 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
240606fe:	68fb      	ldr	r3, [r7, #12]
24060700:	6dda      	ldr	r2, [r3, #92]	; 0x5c
24060702:	68fb      	ldr	r3, [r7, #12]
24060704:	681b      	ldr	r3, [r3, #0]
24060706:	6812      	ldr	r2, [r2, #0]
24060708:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
2406070a:	68fb      	ldr	r3, [r7, #12]
2406070c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2406070e:	1d1a      	adds	r2, r3, #4
24060710:	68fb      	ldr	r3, [r7, #12]
24060712:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
24060714:	68fb      	ldr	r3, [r7, #12]
24060716:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
2406071a:	b29b      	uxth	r3, r3
2406071c:	3b04      	subs	r3, #4
2406071e:	b29a      	uxth	r2, r3
24060720:	68fb      	ldr	r3, [r7, #12]
24060722:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
24060726:	e059      	b.n	240607dc <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
24060728:	68fb      	ldr	r3, [r7, #12]
2406072a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
2406072e:	b29b      	uxth	r3, r3
24060730:	2b01      	cmp	r3, #1
24060732:	d917      	bls.n	24060764 <HAL_SPI_Transmit+0x31c>
24060734:	68fb      	ldr	r3, [r7, #12]
24060736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24060738:	2b00      	cmp	r3, #0
2406073a:	d013      	beq.n	24060764 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
2406073c:	68fb      	ldr	r3, [r7, #12]
2406073e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24060740:	881a      	ldrh	r2, [r3, #0]
24060742:	69fb      	ldr	r3, [r7, #28]
24060744:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
24060746:	68fb      	ldr	r3, [r7, #12]
24060748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2406074a:	1c9a      	adds	r2, r3, #2
2406074c:	68fb      	ldr	r3, [r7, #12]
2406074e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
24060750:	68fb      	ldr	r3, [r7, #12]
24060752:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
24060756:	b29b      	uxth	r3, r3
24060758:	3b02      	subs	r3, #2
2406075a:	b29a      	uxth	r2, r3
2406075c:	68fb      	ldr	r3, [r7, #12]
2406075e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
24060762:	e03b      	b.n	240607dc <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
24060764:	68fb      	ldr	r3, [r7, #12]
24060766:	6dda      	ldr	r2, [r3, #92]	; 0x5c
24060768:	68fb      	ldr	r3, [r7, #12]
2406076a:	681b      	ldr	r3, [r3, #0]
2406076c:	3320      	adds	r3, #32
2406076e:	7812      	ldrb	r2, [r2, #0]
24060770:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
24060772:	68fb      	ldr	r3, [r7, #12]
24060774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24060776:	1c5a      	adds	r2, r3, #1
24060778:	68fb      	ldr	r3, [r7, #12]
2406077a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
2406077c:	68fb      	ldr	r3, [r7, #12]
2406077e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
24060782:	b29b      	uxth	r3, r3
24060784:	3b01      	subs	r3, #1
24060786:	b29a      	uxth	r2, r3
24060788:	68fb      	ldr	r3, [r7, #12]
2406078a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
2406078e:	e025      	b.n	240607dc <HAL_SPI_Transmit+0x394>
24060790:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
24060794:	f7f3 fb1a 	bl	24053dcc <HAL_GetTick>
24060798:	4602      	mov	r2, r0
2406079a:	697b      	ldr	r3, [r7, #20]
2406079c:	1ad3      	subs	r3, r2, r3
2406079e:	683a      	ldr	r2, [r7, #0]
240607a0:	429a      	cmp	r2, r3
240607a2:	d803      	bhi.n	240607ac <HAL_SPI_Transmit+0x364>
240607a4:	683b      	ldr	r3, [r7, #0]
240607a6:	f1b3 3fff 	cmp.w	r3, #4294967295
240607aa:	d102      	bne.n	240607b2 <HAL_SPI_Transmit+0x36a>
240607ac:	683b      	ldr	r3, [r7, #0]
240607ae:	2b00      	cmp	r3, #0
240607b0:	d114      	bne.n	240607dc <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
240607b2:	68f8      	ldr	r0, [r7, #12]
240607b4:	f000 f844 	bl	24060840 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
240607b8:	68fb      	ldr	r3, [r7, #12]
240607ba:	2200      	movs	r2, #0
240607bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
240607c0:	68fb      	ldr	r3, [r7, #12]
240607c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
240607c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
240607ca:	68fb      	ldr	r3, [r7, #12]
240607cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
240607d0:	68fb      	ldr	r3, [r7, #12]
240607d2:	2201      	movs	r2, #1
240607d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
240607d8:	2303      	movs	r3, #3
240607da:	e02c      	b.n	24060836 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
240607dc:	68fb      	ldr	r3, [r7, #12]
240607de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
240607e2:	b29b      	uxth	r3, r3
240607e4:	2b00      	cmp	r3, #0
240607e6:	f47f af79 	bne.w	240606dc <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
240607ea:	697b      	ldr	r3, [r7, #20]
240607ec:	9300      	str	r3, [sp, #0]
240607ee:	683b      	ldr	r3, [r7, #0]
240607f0:	2200      	movs	r2, #0
240607f2:	2108      	movs	r1, #8
240607f4:	68f8      	ldr	r0, [r7, #12]
240607f6:	f000 f8c3 	bl	24060980 <SPI_WaitOnFlagUntilTimeout>
240607fa:	4603      	mov	r3, r0
240607fc:	2b00      	cmp	r3, #0
240607fe:	d007      	beq.n	24060810 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
24060800:	68fb      	ldr	r3, [r7, #12]
24060802:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
24060806:	f043 0220 	orr.w	r2, r3, #32
2406080a:	68fb      	ldr	r3, [r7, #12]
2406080c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
24060810:	68f8      	ldr	r0, [r7, #12]
24060812:	f000 f815 	bl	24060840 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
24060816:	68fb      	ldr	r3, [r7, #12]
24060818:	2200      	movs	r2, #0
2406081a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
2406081e:	68fb      	ldr	r3, [r7, #12]
24060820:	2201      	movs	r2, #1
24060822:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
24060826:	68fb      	ldr	r3, [r7, #12]
24060828:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2406082c:	2b00      	cmp	r3, #0
2406082e:	d001      	beq.n	24060834 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
24060830:	2301      	movs	r3, #1
24060832:	e000      	b.n	24060836 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
24060834:	7efb      	ldrb	r3, [r7, #27]
}
24060836:	4618      	mov	r0, r3
24060838:	3720      	adds	r7, #32
2406083a:	46bd      	mov	sp, r7
2406083c:	bd80      	pop	{r7, pc}
2406083e:	bf00      	nop

24060840 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
24060840:	b480      	push	{r7}
24060842:	b085      	sub	sp, #20
24060844:	af00      	add	r7, sp, #0
24060846:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
24060848:	687b      	ldr	r3, [r7, #4]
2406084a:	681b      	ldr	r3, [r3, #0]
2406084c:	695b      	ldr	r3, [r3, #20]
2406084e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
24060850:	687b      	ldr	r3, [r7, #4]
24060852:	681b      	ldr	r3, [r3, #0]
24060854:	699a      	ldr	r2, [r3, #24]
24060856:	687b      	ldr	r3, [r7, #4]
24060858:	681b      	ldr	r3, [r3, #0]
2406085a:	f042 0208 	orr.w	r2, r2, #8
2406085e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
24060860:	687b      	ldr	r3, [r7, #4]
24060862:	681b      	ldr	r3, [r3, #0]
24060864:	699a      	ldr	r2, [r3, #24]
24060866:	687b      	ldr	r3, [r7, #4]
24060868:	681b      	ldr	r3, [r3, #0]
2406086a:	f042 0210 	orr.w	r2, r2, #16
2406086e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
24060870:	687b      	ldr	r3, [r7, #4]
24060872:	681b      	ldr	r3, [r3, #0]
24060874:	681a      	ldr	r2, [r3, #0]
24060876:	687b      	ldr	r3, [r7, #4]
24060878:	681b      	ldr	r3, [r3, #0]
2406087a:	f022 0201 	bic.w	r2, r2, #1
2406087e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
24060880:	687b      	ldr	r3, [r7, #4]
24060882:	681b      	ldr	r3, [r3, #0]
24060884:	6919      	ldr	r1, [r3, #16]
24060886:	687b      	ldr	r3, [r7, #4]
24060888:	681a      	ldr	r2, [r3, #0]
2406088a:	4b3c      	ldr	r3, [pc, #240]	; (2406097c <SPI_CloseTransfer+0x13c>)
2406088c:	400b      	ands	r3, r1
2406088e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
24060890:	687b      	ldr	r3, [r7, #4]
24060892:	681b      	ldr	r3, [r3, #0]
24060894:	689a      	ldr	r2, [r3, #8]
24060896:	687b      	ldr	r3, [r7, #4]
24060898:	681b      	ldr	r3, [r3, #0]
2406089a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
2406089e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
240608a0:	687b      	ldr	r3, [r7, #4]
240608a2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
240608a6:	b2db      	uxtb	r3, r3
240608a8:	2b04      	cmp	r3, #4
240608aa:	d014      	beq.n	240608d6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
240608ac:	68fb      	ldr	r3, [r7, #12]
240608ae:	f003 0320 	and.w	r3, r3, #32
240608b2:	2b00      	cmp	r3, #0
240608b4:	d00f      	beq.n	240608d6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
240608b6:	687b      	ldr	r3, [r7, #4]
240608b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
240608bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
240608c0:	687b      	ldr	r3, [r7, #4]
240608c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
240608c6:	687b      	ldr	r3, [r7, #4]
240608c8:	681b      	ldr	r3, [r3, #0]
240608ca:	699a      	ldr	r2, [r3, #24]
240608cc:	687b      	ldr	r3, [r7, #4]
240608ce:	681b      	ldr	r3, [r3, #0]
240608d0:	f042 0220 	orr.w	r2, r2, #32
240608d4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
240608d6:	687b      	ldr	r3, [r7, #4]
240608d8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
240608dc:	b2db      	uxtb	r3, r3
240608de:	2b03      	cmp	r3, #3
240608e0:	d014      	beq.n	2406090c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
240608e2:	68fb      	ldr	r3, [r7, #12]
240608e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
240608e8:	2b00      	cmp	r3, #0
240608ea:	d00f      	beq.n	2406090c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
240608ec:	687b      	ldr	r3, [r7, #4]
240608ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
240608f2:	f043 0204 	orr.w	r2, r3, #4
240608f6:	687b      	ldr	r3, [r7, #4]
240608f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
240608fc:	687b      	ldr	r3, [r7, #4]
240608fe:	681b      	ldr	r3, [r3, #0]
24060900:	699a      	ldr	r2, [r3, #24]
24060902:	687b      	ldr	r3, [r7, #4]
24060904:	681b      	ldr	r3, [r3, #0]
24060906:	f042 0240 	orr.w	r2, r2, #64	; 0x40
2406090a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
2406090c:	68fb      	ldr	r3, [r7, #12]
2406090e:	f403 7300 	and.w	r3, r3, #512	; 0x200
24060912:	2b00      	cmp	r3, #0
24060914:	d00f      	beq.n	24060936 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
24060916:	687b      	ldr	r3, [r7, #4]
24060918:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2406091c:	f043 0201 	orr.w	r2, r3, #1
24060920:	687b      	ldr	r3, [r7, #4]
24060922:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
24060926:	687b      	ldr	r3, [r7, #4]
24060928:	681b      	ldr	r3, [r3, #0]
2406092a:	699a      	ldr	r2, [r3, #24]
2406092c:	687b      	ldr	r3, [r7, #4]
2406092e:	681b      	ldr	r3, [r3, #0]
24060930:	f442 7200 	orr.w	r2, r2, #512	; 0x200
24060934:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
24060936:	68fb      	ldr	r3, [r7, #12]
24060938:	f403 7380 	and.w	r3, r3, #256	; 0x100
2406093c:	2b00      	cmp	r3, #0
2406093e:	d00f      	beq.n	24060960 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
24060940:	687b      	ldr	r3, [r7, #4]
24060942:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
24060946:	f043 0208 	orr.w	r2, r3, #8
2406094a:	687b      	ldr	r3, [r7, #4]
2406094c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
24060950:	687b      	ldr	r3, [r7, #4]
24060952:	681b      	ldr	r3, [r3, #0]
24060954:	699a      	ldr	r2, [r3, #24]
24060956:	687b      	ldr	r3, [r7, #4]
24060958:	681b      	ldr	r3, [r3, #0]
2406095a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
2406095e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
24060960:	687b      	ldr	r3, [r7, #4]
24060962:	2200      	movs	r2, #0
24060964:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
24060968:	687b      	ldr	r3, [r7, #4]
2406096a:	2200      	movs	r2, #0
2406096c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
24060970:	bf00      	nop
24060972:	3714      	adds	r7, #20
24060974:	46bd      	mov	sp, r7
24060976:	f85d 7b04 	ldr.w	r7, [sp], #4
2406097a:	4770      	bx	lr
2406097c:	fffffc90 	.word	0xfffffc90

24060980 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
24060980:	b580      	push	{r7, lr}
24060982:	b084      	sub	sp, #16
24060984:	af00      	add	r7, sp, #0
24060986:	60f8      	str	r0, [r7, #12]
24060988:	60b9      	str	r1, [r7, #8]
2406098a:	603b      	str	r3, [r7, #0]
2406098c:	4613      	mov	r3, r2
2406098e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
24060990:	e010      	b.n	240609b4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
24060992:	f7f3 fa1b 	bl	24053dcc <HAL_GetTick>
24060996:	4602      	mov	r2, r0
24060998:	69bb      	ldr	r3, [r7, #24]
2406099a:	1ad3      	subs	r3, r2, r3
2406099c:	683a      	ldr	r2, [r7, #0]
2406099e:	429a      	cmp	r2, r3
240609a0:	d803      	bhi.n	240609aa <SPI_WaitOnFlagUntilTimeout+0x2a>
240609a2:	683b      	ldr	r3, [r7, #0]
240609a4:	f1b3 3fff 	cmp.w	r3, #4294967295
240609a8:	d102      	bne.n	240609b0 <SPI_WaitOnFlagUntilTimeout+0x30>
240609aa:	683b      	ldr	r3, [r7, #0]
240609ac:	2b00      	cmp	r3, #0
240609ae:	d101      	bne.n	240609b4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
240609b0:	2303      	movs	r3, #3
240609b2:	e00f      	b.n	240609d4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
240609b4:	68fb      	ldr	r3, [r7, #12]
240609b6:	681b      	ldr	r3, [r3, #0]
240609b8:	695a      	ldr	r2, [r3, #20]
240609ba:	68bb      	ldr	r3, [r7, #8]
240609bc:	4013      	ands	r3, r2
240609be:	68ba      	ldr	r2, [r7, #8]
240609c0:	429a      	cmp	r2, r3
240609c2:	bf0c      	ite	eq
240609c4:	2301      	moveq	r3, #1
240609c6:	2300      	movne	r3, #0
240609c8:	b2db      	uxtb	r3, r3
240609ca:	461a      	mov	r2, r3
240609cc:	79fb      	ldrb	r3, [r7, #7]
240609ce:	429a      	cmp	r2, r3
240609d0:	d0df      	beq.n	24060992 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
240609d2:	2300      	movs	r3, #0
}
240609d4:	4618      	mov	r0, r3
240609d6:	3710      	adds	r7, #16
240609d8:	46bd      	mov	sp, r7
240609da:	bd80      	pop	{r7, pc}

240609dc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
240609dc:	b480      	push	{r7}
240609de:	b085      	sub	sp, #20
240609e0:	af00      	add	r7, sp, #0
240609e2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
240609e4:	687b      	ldr	r3, [r7, #4]
240609e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240609e8:	095b      	lsrs	r3, r3, #5
240609ea:	3301      	adds	r3, #1
240609ec:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
240609ee:	687b      	ldr	r3, [r7, #4]
240609f0:	68db      	ldr	r3, [r3, #12]
240609f2:	3301      	adds	r3, #1
240609f4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
240609f6:	68bb      	ldr	r3, [r7, #8]
240609f8:	3307      	adds	r3, #7
240609fa:	08db      	lsrs	r3, r3, #3
240609fc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
240609fe:	68bb      	ldr	r3, [r7, #8]
24060a00:	68fa      	ldr	r2, [r7, #12]
24060a02:	fb02 f303 	mul.w	r3, r2, r3
}
24060a06:	4618      	mov	r0, r3
24060a08:	3714      	adds	r7, #20
24060a0a:	46bd      	mov	sp, r7
24060a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
24060a10:	4770      	bx	lr

24060a12 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
24060a12:	b580      	push	{r7, lr}
24060a14:	b082      	sub	sp, #8
24060a16:	af00      	add	r7, sp, #0
24060a18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
24060a1a:	687b      	ldr	r3, [r7, #4]
24060a1c:	2b00      	cmp	r3, #0
24060a1e:	d101      	bne.n	24060a24 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
24060a20:	2301      	movs	r3, #1
24060a22:	e049      	b.n	24060ab8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
24060a24:	687b      	ldr	r3, [r7, #4]
24060a26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
24060a2a:	b2db      	uxtb	r3, r3
24060a2c:	2b00      	cmp	r3, #0
24060a2e:	d106      	bne.n	24060a3e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
24060a30:	687b      	ldr	r3, [r7, #4]
24060a32:	2200      	movs	r2, #0
24060a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
24060a38:	6878      	ldr	r0, [r7, #4]
24060a3a:	f7f2 fe61 	bl	24053700 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
24060a3e:	687b      	ldr	r3, [r7, #4]
24060a40:	2202      	movs	r2, #2
24060a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
24060a46:	687b      	ldr	r3, [r7, #4]
24060a48:	681a      	ldr	r2, [r3, #0]
24060a4a:	687b      	ldr	r3, [r7, #4]
24060a4c:	3304      	adds	r3, #4
24060a4e:	4619      	mov	r1, r3
24060a50:	4610      	mov	r0, r2
24060a52:	f000 faf7 	bl	24061044 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
24060a56:	687b      	ldr	r3, [r7, #4]
24060a58:	2201      	movs	r2, #1
24060a5a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
24060a5e:	687b      	ldr	r3, [r7, #4]
24060a60:	2201      	movs	r2, #1
24060a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
24060a66:	687b      	ldr	r3, [r7, #4]
24060a68:	2201      	movs	r2, #1
24060a6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
24060a6e:	687b      	ldr	r3, [r7, #4]
24060a70:	2201      	movs	r2, #1
24060a72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
24060a76:	687b      	ldr	r3, [r7, #4]
24060a78:	2201      	movs	r2, #1
24060a7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
24060a7e:	687b      	ldr	r3, [r7, #4]
24060a80:	2201      	movs	r2, #1
24060a82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
24060a86:	687b      	ldr	r3, [r7, #4]
24060a88:	2201      	movs	r2, #1
24060a8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
24060a8e:	687b      	ldr	r3, [r7, #4]
24060a90:	2201      	movs	r2, #1
24060a92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
24060a96:	687b      	ldr	r3, [r7, #4]
24060a98:	2201      	movs	r2, #1
24060a9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
24060a9e:	687b      	ldr	r3, [r7, #4]
24060aa0:	2201      	movs	r2, #1
24060aa2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
24060aa6:	687b      	ldr	r3, [r7, #4]
24060aa8:	2201      	movs	r2, #1
24060aaa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
24060aae:	687b      	ldr	r3, [r7, #4]
24060ab0:	2201      	movs	r2, #1
24060ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
24060ab6:	2300      	movs	r3, #0
}
24060ab8:	4618      	mov	r0, r3
24060aba:	3708      	adds	r7, #8
24060abc:	46bd      	mov	sp, r7
24060abe:	bd80      	pop	{r7, pc}

24060ac0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
24060ac0:	b480      	push	{r7}
24060ac2:	b085      	sub	sp, #20
24060ac4:	af00      	add	r7, sp, #0
24060ac6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
24060ac8:	687b      	ldr	r3, [r7, #4]
24060aca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
24060ace:	b2db      	uxtb	r3, r3
24060ad0:	2b01      	cmp	r3, #1
24060ad2:	d001      	beq.n	24060ad8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
24060ad4:	2301      	movs	r3, #1
24060ad6:	e054      	b.n	24060b82 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
24060ad8:	687b      	ldr	r3, [r7, #4]
24060ada:	2202      	movs	r2, #2
24060adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
24060ae0:	687b      	ldr	r3, [r7, #4]
24060ae2:	681b      	ldr	r3, [r3, #0]
24060ae4:	68da      	ldr	r2, [r3, #12]
24060ae6:	687b      	ldr	r3, [r7, #4]
24060ae8:	681b      	ldr	r3, [r3, #0]
24060aea:	f042 0201 	orr.w	r2, r2, #1
24060aee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
24060af0:	687b      	ldr	r3, [r7, #4]
24060af2:	681b      	ldr	r3, [r3, #0]
24060af4:	4a26      	ldr	r2, [pc, #152]	; (24060b90 <HAL_TIM_Base_Start_IT+0xd0>)
24060af6:	4293      	cmp	r3, r2
24060af8:	d022      	beq.n	24060b40 <HAL_TIM_Base_Start_IT+0x80>
24060afa:	687b      	ldr	r3, [r7, #4]
24060afc:	681b      	ldr	r3, [r3, #0]
24060afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24060b02:	d01d      	beq.n	24060b40 <HAL_TIM_Base_Start_IT+0x80>
24060b04:	687b      	ldr	r3, [r7, #4]
24060b06:	681b      	ldr	r3, [r3, #0]
24060b08:	4a22      	ldr	r2, [pc, #136]	; (24060b94 <HAL_TIM_Base_Start_IT+0xd4>)
24060b0a:	4293      	cmp	r3, r2
24060b0c:	d018      	beq.n	24060b40 <HAL_TIM_Base_Start_IT+0x80>
24060b0e:	687b      	ldr	r3, [r7, #4]
24060b10:	681b      	ldr	r3, [r3, #0]
24060b12:	4a21      	ldr	r2, [pc, #132]	; (24060b98 <HAL_TIM_Base_Start_IT+0xd8>)
24060b14:	4293      	cmp	r3, r2
24060b16:	d013      	beq.n	24060b40 <HAL_TIM_Base_Start_IT+0x80>
24060b18:	687b      	ldr	r3, [r7, #4]
24060b1a:	681b      	ldr	r3, [r3, #0]
24060b1c:	4a1f      	ldr	r2, [pc, #124]	; (24060b9c <HAL_TIM_Base_Start_IT+0xdc>)
24060b1e:	4293      	cmp	r3, r2
24060b20:	d00e      	beq.n	24060b40 <HAL_TIM_Base_Start_IT+0x80>
24060b22:	687b      	ldr	r3, [r7, #4]
24060b24:	681b      	ldr	r3, [r3, #0]
24060b26:	4a1e      	ldr	r2, [pc, #120]	; (24060ba0 <HAL_TIM_Base_Start_IT+0xe0>)
24060b28:	4293      	cmp	r3, r2
24060b2a:	d009      	beq.n	24060b40 <HAL_TIM_Base_Start_IT+0x80>
24060b2c:	687b      	ldr	r3, [r7, #4]
24060b2e:	681b      	ldr	r3, [r3, #0]
24060b30:	4a1c      	ldr	r2, [pc, #112]	; (24060ba4 <HAL_TIM_Base_Start_IT+0xe4>)
24060b32:	4293      	cmp	r3, r2
24060b34:	d004      	beq.n	24060b40 <HAL_TIM_Base_Start_IT+0x80>
24060b36:	687b      	ldr	r3, [r7, #4]
24060b38:	681b      	ldr	r3, [r3, #0]
24060b3a:	4a1b      	ldr	r2, [pc, #108]	; (24060ba8 <HAL_TIM_Base_Start_IT+0xe8>)
24060b3c:	4293      	cmp	r3, r2
24060b3e:	d115      	bne.n	24060b6c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
24060b40:	687b      	ldr	r3, [r7, #4]
24060b42:	681b      	ldr	r3, [r3, #0]
24060b44:	689a      	ldr	r2, [r3, #8]
24060b46:	4b19      	ldr	r3, [pc, #100]	; (24060bac <HAL_TIM_Base_Start_IT+0xec>)
24060b48:	4013      	ands	r3, r2
24060b4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
24060b4c:	68fb      	ldr	r3, [r7, #12]
24060b4e:	2b06      	cmp	r3, #6
24060b50:	d015      	beq.n	24060b7e <HAL_TIM_Base_Start_IT+0xbe>
24060b52:	68fb      	ldr	r3, [r7, #12]
24060b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24060b58:	d011      	beq.n	24060b7e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
24060b5a:	687b      	ldr	r3, [r7, #4]
24060b5c:	681b      	ldr	r3, [r3, #0]
24060b5e:	681a      	ldr	r2, [r3, #0]
24060b60:	687b      	ldr	r3, [r7, #4]
24060b62:	681b      	ldr	r3, [r3, #0]
24060b64:	f042 0201 	orr.w	r2, r2, #1
24060b68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
24060b6a:	e008      	b.n	24060b7e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
24060b6c:	687b      	ldr	r3, [r7, #4]
24060b6e:	681b      	ldr	r3, [r3, #0]
24060b70:	681a      	ldr	r2, [r3, #0]
24060b72:	687b      	ldr	r3, [r7, #4]
24060b74:	681b      	ldr	r3, [r3, #0]
24060b76:	f042 0201 	orr.w	r2, r2, #1
24060b7a:	601a      	str	r2, [r3, #0]
24060b7c:	e000      	b.n	24060b80 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
24060b7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
24060b80:	2300      	movs	r3, #0
}
24060b82:	4618      	mov	r0, r3
24060b84:	3714      	adds	r7, #20
24060b86:	46bd      	mov	sp, r7
24060b88:	f85d 7b04 	ldr.w	r7, [sp], #4
24060b8c:	4770      	bx	lr
24060b8e:	bf00      	nop
24060b90:	40010000 	.word	0x40010000
24060b94:	40000400 	.word	0x40000400
24060b98:	40000800 	.word	0x40000800
24060b9c:	40000c00 	.word	0x40000c00
24060ba0:	40010400 	.word	0x40010400
24060ba4:	40001800 	.word	0x40001800
24060ba8:	40014000 	.word	0x40014000
24060bac:	00010007 	.word	0x00010007

24060bb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
24060bb0:	b580      	push	{r7, lr}
24060bb2:	b082      	sub	sp, #8
24060bb4:	af00      	add	r7, sp, #0
24060bb6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
24060bb8:	687b      	ldr	r3, [r7, #4]
24060bba:	681b      	ldr	r3, [r3, #0]
24060bbc:	691b      	ldr	r3, [r3, #16]
24060bbe:	f003 0302 	and.w	r3, r3, #2
24060bc2:	2b02      	cmp	r3, #2
24060bc4:	d122      	bne.n	24060c0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
24060bc6:	687b      	ldr	r3, [r7, #4]
24060bc8:	681b      	ldr	r3, [r3, #0]
24060bca:	68db      	ldr	r3, [r3, #12]
24060bcc:	f003 0302 	and.w	r3, r3, #2
24060bd0:	2b02      	cmp	r3, #2
24060bd2:	d11b      	bne.n	24060c0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
24060bd4:	687b      	ldr	r3, [r7, #4]
24060bd6:	681b      	ldr	r3, [r3, #0]
24060bd8:	f06f 0202 	mvn.w	r2, #2
24060bdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
24060bde:	687b      	ldr	r3, [r7, #4]
24060be0:	2201      	movs	r2, #1
24060be2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
24060be4:	687b      	ldr	r3, [r7, #4]
24060be6:	681b      	ldr	r3, [r3, #0]
24060be8:	699b      	ldr	r3, [r3, #24]
24060bea:	f003 0303 	and.w	r3, r3, #3
24060bee:	2b00      	cmp	r3, #0
24060bf0:	d003      	beq.n	24060bfa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
24060bf2:	6878      	ldr	r0, [r7, #4]
24060bf4:	f000 fa08 	bl	24061008 <HAL_TIM_IC_CaptureCallback>
24060bf8:	e005      	b.n	24060c06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
24060bfa:	6878      	ldr	r0, [r7, #4]
24060bfc:	f000 f9fa 	bl	24060ff4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
24060c00:	6878      	ldr	r0, [r7, #4]
24060c02:	f000 fa0b 	bl	2406101c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
24060c06:	687b      	ldr	r3, [r7, #4]
24060c08:	2200      	movs	r2, #0
24060c0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
24060c0c:	687b      	ldr	r3, [r7, #4]
24060c0e:	681b      	ldr	r3, [r3, #0]
24060c10:	691b      	ldr	r3, [r3, #16]
24060c12:	f003 0304 	and.w	r3, r3, #4
24060c16:	2b04      	cmp	r3, #4
24060c18:	d122      	bne.n	24060c60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
24060c1a:	687b      	ldr	r3, [r7, #4]
24060c1c:	681b      	ldr	r3, [r3, #0]
24060c1e:	68db      	ldr	r3, [r3, #12]
24060c20:	f003 0304 	and.w	r3, r3, #4
24060c24:	2b04      	cmp	r3, #4
24060c26:	d11b      	bne.n	24060c60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
24060c28:	687b      	ldr	r3, [r7, #4]
24060c2a:	681b      	ldr	r3, [r3, #0]
24060c2c:	f06f 0204 	mvn.w	r2, #4
24060c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
24060c32:	687b      	ldr	r3, [r7, #4]
24060c34:	2202      	movs	r2, #2
24060c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
24060c38:	687b      	ldr	r3, [r7, #4]
24060c3a:	681b      	ldr	r3, [r3, #0]
24060c3c:	699b      	ldr	r3, [r3, #24]
24060c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
24060c42:	2b00      	cmp	r3, #0
24060c44:	d003      	beq.n	24060c4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
24060c46:	6878      	ldr	r0, [r7, #4]
24060c48:	f000 f9de 	bl	24061008 <HAL_TIM_IC_CaptureCallback>
24060c4c:	e005      	b.n	24060c5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
24060c4e:	6878      	ldr	r0, [r7, #4]
24060c50:	f000 f9d0 	bl	24060ff4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
24060c54:	6878      	ldr	r0, [r7, #4]
24060c56:	f000 f9e1 	bl	2406101c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
24060c5a:	687b      	ldr	r3, [r7, #4]
24060c5c:	2200      	movs	r2, #0
24060c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
24060c60:	687b      	ldr	r3, [r7, #4]
24060c62:	681b      	ldr	r3, [r3, #0]
24060c64:	691b      	ldr	r3, [r3, #16]
24060c66:	f003 0308 	and.w	r3, r3, #8
24060c6a:	2b08      	cmp	r3, #8
24060c6c:	d122      	bne.n	24060cb4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
24060c6e:	687b      	ldr	r3, [r7, #4]
24060c70:	681b      	ldr	r3, [r3, #0]
24060c72:	68db      	ldr	r3, [r3, #12]
24060c74:	f003 0308 	and.w	r3, r3, #8
24060c78:	2b08      	cmp	r3, #8
24060c7a:	d11b      	bne.n	24060cb4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
24060c7c:	687b      	ldr	r3, [r7, #4]
24060c7e:	681b      	ldr	r3, [r3, #0]
24060c80:	f06f 0208 	mvn.w	r2, #8
24060c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
24060c86:	687b      	ldr	r3, [r7, #4]
24060c88:	2204      	movs	r2, #4
24060c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
24060c8c:	687b      	ldr	r3, [r7, #4]
24060c8e:	681b      	ldr	r3, [r3, #0]
24060c90:	69db      	ldr	r3, [r3, #28]
24060c92:	f003 0303 	and.w	r3, r3, #3
24060c96:	2b00      	cmp	r3, #0
24060c98:	d003      	beq.n	24060ca2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
24060c9a:	6878      	ldr	r0, [r7, #4]
24060c9c:	f000 f9b4 	bl	24061008 <HAL_TIM_IC_CaptureCallback>
24060ca0:	e005      	b.n	24060cae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
24060ca2:	6878      	ldr	r0, [r7, #4]
24060ca4:	f000 f9a6 	bl	24060ff4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
24060ca8:	6878      	ldr	r0, [r7, #4]
24060caa:	f000 f9b7 	bl	2406101c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
24060cae:	687b      	ldr	r3, [r7, #4]
24060cb0:	2200      	movs	r2, #0
24060cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
24060cb4:	687b      	ldr	r3, [r7, #4]
24060cb6:	681b      	ldr	r3, [r3, #0]
24060cb8:	691b      	ldr	r3, [r3, #16]
24060cba:	f003 0310 	and.w	r3, r3, #16
24060cbe:	2b10      	cmp	r3, #16
24060cc0:	d122      	bne.n	24060d08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
24060cc2:	687b      	ldr	r3, [r7, #4]
24060cc4:	681b      	ldr	r3, [r3, #0]
24060cc6:	68db      	ldr	r3, [r3, #12]
24060cc8:	f003 0310 	and.w	r3, r3, #16
24060ccc:	2b10      	cmp	r3, #16
24060cce:	d11b      	bne.n	24060d08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
24060cd0:	687b      	ldr	r3, [r7, #4]
24060cd2:	681b      	ldr	r3, [r3, #0]
24060cd4:	f06f 0210 	mvn.w	r2, #16
24060cd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
24060cda:	687b      	ldr	r3, [r7, #4]
24060cdc:	2208      	movs	r2, #8
24060cde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
24060ce0:	687b      	ldr	r3, [r7, #4]
24060ce2:	681b      	ldr	r3, [r3, #0]
24060ce4:	69db      	ldr	r3, [r3, #28]
24060ce6:	f403 7340 	and.w	r3, r3, #768	; 0x300
24060cea:	2b00      	cmp	r3, #0
24060cec:	d003      	beq.n	24060cf6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
24060cee:	6878      	ldr	r0, [r7, #4]
24060cf0:	f000 f98a 	bl	24061008 <HAL_TIM_IC_CaptureCallback>
24060cf4:	e005      	b.n	24060d02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
24060cf6:	6878      	ldr	r0, [r7, #4]
24060cf8:	f000 f97c 	bl	24060ff4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
24060cfc:	6878      	ldr	r0, [r7, #4]
24060cfe:	f000 f98d 	bl	2406101c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
24060d02:	687b      	ldr	r3, [r7, #4]
24060d04:	2200      	movs	r2, #0
24060d06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
24060d08:	687b      	ldr	r3, [r7, #4]
24060d0a:	681b      	ldr	r3, [r3, #0]
24060d0c:	691b      	ldr	r3, [r3, #16]
24060d0e:	f003 0301 	and.w	r3, r3, #1
24060d12:	2b01      	cmp	r3, #1
24060d14:	d10e      	bne.n	24060d34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
24060d16:	687b      	ldr	r3, [r7, #4]
24060d18:	681b      	ldr	r3, [r3, #0]
24060d1a:	68db      	ldr	r3, [r3, #12]
24060d1c:	f003 0301 	and.w	r3, r3, #1
24060d20:	2b01      	cmp	r3, #1
24060d22:	d107      	bne.n	24060d34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
24060d24:	687b      	ldr	r3, [r7, #4]
24060d26:	681b      	ldr	r3, [r3, #0]
24060d28:	f06f 0201 	mvn.w	r2, #1
24060d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
24060d2e:	6878      	ldr	r0, [r7, #4]
24060d30:	f000 f956 	bl	24060fe0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
24060d34:	687b      	ldr	r3, [r7, #4]
24060d36:	681b      	ldr	r3, [r3, #0]
24060d38:	691b      	ldr	r3, [r3, #16]
24060d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
24060d3e:	2b80      	cmp	r3, #128	; 0x80
24060d40:	d10e      	bne.n	24060d60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
24060d42:	687b      	ldr	r3, [r7, #4]
24060d44:	681b      	ldr	r3, [r3, #0]
24060d46:	68db      	ldr	r3, [r3, #12]
24060d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
24060d4c:	2b80      	cmp	r3, #128	; 0x80
24060d4e:	d107      	bne.n	24060d60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
24060d50:	687b      	ldr	r3, [r7, #4]
24060d52:	681b      	ldr	r3, [r3, #0]
24060d54:	f06f 0280 	mvn.w	r2, #128	; 0x80
24060d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
24060d5a:	6878      	ldr	r0, [r7, #4]
24060d5c:	f000 fb42 	bl	240613e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
24060d60:	687b      	ldr	r3, [r7, #4]
24060d62:	681b      	ldr	r3, [r3, #0]
24060d64:	691b      	ldr	r3, [r3, #16]
24060d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
24060d6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24060d6e:	d10e      	bne.n	24060d8e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
24060d70:	687b      	ldr	r3, [r7, #4]
24060d72:	681b      	ldr	r3, [r3, #0]
24060d74:	68db      	ldr	r3, [r3, #12]
24060d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
24060d7a:	2b80      	cmp	r3, #128	; 0x80
24060d7c:	d107      	bne.n	24060d8e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
24060d7e:	687b      	ldr	r3, [r7, #4]
24060d80:	681b      	ldr	r3, [r3, #0]
24060d82:	f46f 7280 	mvn.w	r2, #256	; 0x100
24060d86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
24060d88:	6878      	ldr	r0, [r7, #4]
24060d8a:	f000 fb35 	bl	240613f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
24060d8e:	687b      	ldr	r3, [r7, #4]
24060d90:	681b      	ldr	r3, [r3, #0]
24060d92:	691b      	ldr	r3, [r3, #16]
24060d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
24060d98:	2b40      	cmp	r3, #64	; 0x40
24060d9a:	d10e      	bne.n	24060dba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
24060d9c:	687b      	ldr	r3, [r7, #4]
24060d9e:	681b      	ldr	r3, [r3, #0]
24060da0:	68db      	ldr	r3, [r3, #12]
24060da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
24060da6:	2b40      	cmp	r3, #64	; 0x40
24060da8:	d107      	bne.n	24060dba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
24060daa:	687b      	ldr	r3, [r7, #4]
24060dac:	681b      	ldr	r3, [r3, #0]
24060dae:	f06f 0240 	mvn.w	r2, #64	; 0x40
24060db2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
24060db4:	6878      	ldr	r0, [r7, #4]
24060db6:	f000 f93b 	bl	24061030 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
24060dba:	687b      	ldr	r3, [r7, #4]
24060dbc:	681b      	ldr	r3, [r3, #0]
24060dbe:	691b      	ldr	r3, [r3, #16]
24060dc0:	f003 0320 	and.w	r3, r3, #32
24060dc4:	2b20      	cmp	r3, #32
24060dc6:	d10e      	bne.n	24060de6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
24060dc8:	687b      	ldr	r3, [r7, #4]
24060dca:	681b      	ldr	r3, [r3, #0]
24060dcc:	68db      	ldr	r3, [r3, #12]
24060dce:	f003 0320 	and.w	r3, r3, #32
24060dd2:	2b20      	cmp	r3, #32
24060dd4:	d107      	bne.n	24060de6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
24060dd6:	687b      	ldr	r3, [r7, #4]
24060dd8:	681b      	ldr	r3, [r3, #0]
24060dda:	f06f 0220 	mvn.w	r2, #32
24060dde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
24060de0:	6878      	ldr	r0, [r7, #4]
24060de2:	f000 faf5 	bl	240613d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
24060de6:	bf00      	nop
24060de8:	3708      	adds	r7, #8
24060dea:	46bd      	mov	sp, r7
24060dec:	bd80      	pop	{r7, pc}
	...

24060df0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
24060df0:	b580      	push	{r7, lr}
24060df2:	b084      	sub	sp, #16
24060df4:	af00      	add	r7, sp, #0
24060df6:	6078      	str	r0, [r7, #4]
24060df8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
24060dfa:	2300      	movs	r3, #0
24060dfc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
24060dfe:	687b      	ldr	r3, [r7, #4]
24060e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
24060e04:	2b01      	cmp	r3, #1
24060e06:	d101      	bne.n	24060e0c <HAL_TIM_ConfigClockSource+0x1c>
24060e08:	2302      	movs	r3, #2
24060e0a:	e0dc      	b.n	24060fc6 <HAL_TIM_ConfigClockSource+0x1d6>
24060e0c:	687b      	ldr	r3, [r7, #4]
24060e0e:	2201      	movs	r2, #1
24060e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
24060e14:	687b      	ldr	r3, [r7, #4]
24060e16:	2202      	movs	r2, #2
24060e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
24060e1c:	687b      	ldr	r3, [r7, #4]
24060e1e:	681b      	ldr	r3, [r3, #0]
24060e20:	689b      	ldr	r3, [r3, #8]
24060e22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
24060e24:	68ba      	ldr	r2, [r7, #8]
24060e26:	4b6a      	ldr	r3, [pc, #424]	; (24060fd0 <HAL_TIM_ConfigClockSource+0x1e0>)
24060e28:	4013      	ands	r3, r2
24060e2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
24060e2c:	68bb      	ldr	r3, [r7, #8]
24060e2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
24060e32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
24060e34:	687b      	ldr	r3, [r7, #4]
24060e36:	681b      	ldr	r3, [r3, #0]
24060e38:	68ba      	ldr	r2, [r7, #8]
24060e3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
24060e3c:	683b      	ldr	r3, [r7, #0]
24060e3e:	681b      	ldr	r3, [r3, #0]
24060e40:	4a64      	ldr	r2, [pc, #400]	; (24060fd4 <HAL_TIM_ConfigClockSource+0x1e4>)
24060e42:	4293      	cmp	r3, r2
24060e44:	f000 80a9 	beq.w	24060f9a <HAL_TIM_ConfigClockSource+0x1aa>
24060e48:	4a62      	ldr	r2, [pc, #392]	; (24060fd4 <HAL_TIM_ConfigClockSource+0x1e4>)
24060e4a:	4293      	cmp	r3, r2
24060e4c:	f200 80ae 	bhi.w	24060fac <HAL_TIM_ConfigClockSource+0x1bc>
24060e50:	4a61      	ldr	r2, [pc, #388]	; (24060fd8 <HAL_TIM_ConfigClockSource+0x1e8>)
24060e52:	4293      	cmp	r3, r2
24060e54:	f000 80a1 	beq.w	24060f9a <HAL_TIM_ConfigClockSource+0x1aa>
24060e58:	4a5f      	ldr	r2, [pc, #380]	; (24060fd8 <HAL_TIM_ConfigClockSource+0x1e8>)
24060e5a:	4293      	cmp	r3, r2
24060e5c:	f200 80a6 	bhi.w	24060fac <HAL_TIM_ConfigClockSource+0x1bc>
24060e60:	4a5e      	ldr	r2, [pc, #376]	; (24060fdc <HAL_TIM_ConfigClockSource+0x1ec>)
24060e62:	4293      	cmp	r3, r2
24060e64:	f000 8099 	beq.w	24060f9a <HAL_TIM_ConfigClockSource+0x1aa>
24060e68:	4a5c      	ldr	r2, [pc, #368]	; (24060fdc <HAL_TIM_ConfigClockSource+0x1ec>)
24060e6a:	4293      	cmp	r3, r2
24060e6c:	f200 809e 	bhi.w	24060fac <HAL_TIM_ConfigClockSource+0x1bc>
24060e70:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
24060e74:	f000 8091 	beq.w	24060f9a <HAL_TIM_ConfigClockSource+0x1aa>
24060e78:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
24060e7c:	f200 8096 	bhi.w	24060fac <HAL_TIM_ConfigClockSource+0x1bc>
24060e80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
24060e84:	f000 8089 	beq.w	24060f9a <HAL_TIM_ConfigClockSource+0x1aa>
24060e88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
24060e8c:	f200 808e 	bhi.w	24060fac <HAL_TIM_ConfigClockSource+0x1bc>
24060e90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24060e94:	d03e      	beq.n	24060f14 <HAL_TIM_ConfigClockSource+0x124>
24060e96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24060e9a:	f200 8087 	bhi.w	24060fac <HAL_TIM_ConfigClockSource+0x1bc>
24060e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
24060ea2:	f000 8086 	beq.w	24060fb2 <HAL_TIM_ConfigClockSource+0x1c2>
24060ea6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
24060eaa:	d87f      	bhi.n	24060fac <HAL_TIM_ConfigClockSource+0x1bc>
24060eac:	2b70      	cmp	r3, #112	; 0x70
24060eae:	d01a      	beq.n	24060ee6 <HAL_TIM_ConfigClockSource+0xf6>
24060eb0:	2b70      	cmp	r3, #112	; 0x70
24060eb2:	d87b      	bhi.n	24060fac <HAL_TIM_ConfigClockSource+0x1bc>
24060eb4:	2b60      	cmp	r3, #96	; 0x60
24060eb6:	d050      	beq.n	24060f5a <HAL_TIM_ConfigClockSource+0x16a>
24060eb8:	2b60      	cmp	r3, #96	; 0x60
24060eba:	d877      	bhi.n	24060fac <HAL_TIM_ConfigClockSource+0x1bc>
24060ebc:	2b50      	cmp	r3, #80	; 0x50
24060ebe:	d03c      	beq.n	24060f3a <HAL_TIM_ConfigClockSource+0x14a>
24060ec0:	2b50      	cmp	r3, #80	; 0x50
24060ec2:	d873      	bhi.n	24060fac <HAL_TIM_ConfigClockSource+0x1bc>
24060ec4:	2b40      	cmp	r3, #64	; 0x40
24060ec6:	d058      	beq.n	24060f7a <HAL_TIM_ConfigClockSource+0x18a>
24060ec8:	2b40      	cmp	r3, #64	; 0x40
24060eca:	d86f      	bhi.n	24060fac <HAL_TIM_ConfigClockSource+0x1bc>
24060ecc:	2b30      	cmp	r3, #48	; 0x30
24060ece:	d064      	beq.n	24060f9a <HAL_TIM_ConfigClockSource+0x1aa>
24060ed0:	2b30      	cmp	r3, #48	; 0x30
24060ed2:	d86b      	bhi.n	24060fac <HAL_TIM_ConfigClockSource+0x1bc>
24060ed4:	2b20      	cmp	r3, #32
24060ed6:	d060      	beq.n	24060f9a <HAL_TIM_ConfigClockSource+0x1aa>
24060ed8:	2b20      	cmp	r3, #32
24060eda:	d867      	bhi.n	24060fac <HAL_TIM_ConfigClockSource+0x1bc>
24060edc:	2b00      	cmp	r3, #0
24060ede:	d05c      	beq.n	24060f9a <HAL_TIM_ConfigClockSource+0x1aa>
24060ee0:	2b10      	cmp	r3, #16
24060ee2:	d05a      	beq.n	24060f9a <HAL_TIM_ConfigClockSource+0x1aa>
24060ee4:	e062      	b.n	24060fac <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
24060ee6:	687b      	ldr	r3, [r7, #4]
24060ee8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
24060eea:	683b      	ldr	r3, [r7, #0]
24060eec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
24060eee:	683b      	ldr	r3, [r7, #0]
24060ef0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
24060ef2:	683b      	ldr	r3, [r7, #0]
24060ef4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
24060ef6:	f000 f9bd 	bl	24061274 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
24060efa:	687b      	ldr	r3, [r7, #4]
24060efc:	681b      	ldr	r3, [r3, #0]
24060efe:	689b      	ldr	r3, [r3, #8]
24060f00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
24060f02:	68bb      	ldr	r3, [r7, #8]
24060f04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
24060f08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
24060f0a:	687b      	ldr	r3, [r7, #4]
24060f0c:	681b      	ldr	r3, [r3, #0]
24060f0e:	68ba      	ldr	r2, [r7, #8]
24060f10:	609a      	str	r2, [r3, #8]
      break;
24060f12:	e04f      	b.n	24060fb4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
24060f14:	687b      	ldr	r3, [r7, #4]
24060f16:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
24060f18:	683b      	ldr	r3, [r7, #0]
24060f1a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
24060f1c:	683b      	ldr	r3, [r7, #0]
24060f1e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
24060f20:	683b      	ldr	r3, [r7, #0]
24060f22:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
24060f24:	f000 f9a6 	bl	24061274 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
24060f28:	687b      	ldr	r3, [r7, #4]
24060f2a:	681b      	ldr	r3, [r3, #0]
24060f2c:	689a      	ldr	r2, [r3, #8]
24060f2e:	687b      	ldr	r3, [r7, #4]
24060f30:	681b      	ldr	r3, [r3, #0]
24060f32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
24060f36:	609a      	str	r2, [r3, #8]
      break;
24060f38:	e03c      	b.n	24060fb4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
24060f3a:	687b      	ldr	r3, [r7, #4]
24060f3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
24060f3e:	683b      	ldr	r3, [r7, #0]
24060f40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
24060f42:	683b      	ldr	r3, [r7, #0]
24060f44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
24060f46:	461a      	mov	r2, r3
24060f48:	f000 f916 	bl	24061178 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
24060f4c:	687b      	ldr	r3, [r7, #4]
24060f4e:	681b      	ldr	r3, [r3, #0]
24060f50:	2150      	movs	r1, #80	; 0x50
24060f52:	4618      	mov	r0, r3
24060f54:	f000 f970 	bl	24061238 <TIM_ITRx_SetConfig>
      break;
24060f58:	e02c      	b.n	24060fb4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
24060f5a:	687b      	ldr	r3, [r7, #4]
24060f5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
24060f5e:	683b      	ldr	r3, [r7, #0]
24060f60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
24060f62:	683b      	ldr	r3, [r7, #0]
24060f64:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
24060f66:	461a      	mov	r2, r3
24060f68:	f000 f935 	bl	240611d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
24060f6c:	687b      	ldr	r3, [r7, #4]
24060f6e:	681b      	ldr	r3, [r3, #0]
24060f70:	2160      	movs	r1, #96	; 0x60
24060f72:	4618      	mov	r0, r3
24060f74:	f000 f960 	bl	24061238 <TIM_ITRx_SetConfig>
      break;
24060f78:	e01c      	b.n	24060fb4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
24060f7a:	687b      	ldr	r3, [r7, #4]
24060f7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
24060f7e:	683b      	ldr	r3, [r7, #0]
24060f80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
24060f82:	683b      	ldr	r3, [r7, #0]
24060f84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
24060f86:	461a      	mov	r2, r3
24060f88:	f000 f8f6 	bl	24061178 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
24060f8c:	687b      	ldr	r3, [r7, #4]
24060f8e:	681b      	ldr	r3, [r3, #0]
24060f90:	2140      	movs	r1, #64	; 0x40
24060f92:	4618      	mov	r0, r3
24060f94:	f000 f950 	bl	24061238 <TIM_ITRx_SetConfig>
      break;
24060f98:	e00c      	b.n	24060fb4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
24060f9a:	687b      	ldr	r3, [r7, #4]
24060f9c:	681a      	ldr	r2, [r3, #0]
24060f9e:	683b      	ldr	r3, [r7, #0]
24060fa0:	681b      	ldr	r3, [r3, #0]
24060fa2:	4619      	mov	r1, r3
24060fa4:	4610      	mov	r0, r2
24060fa6:	f000 f947 	bl	24061238 <TIM_ITRx_SetConfig>
      break;
24060faa:	e003      	b.n	24060fb4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
24060fac:	2301      	movs	r3, #1
24060fae:	73fb      	strb	r3, [r7, #15]
      break;
24060fb0:	e000      	b.n	24060fb4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
24060fb2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
24060fb4:	687b      	ldr	r3, [r7, #4]
24060fb6:	2201      	movs	r2, #1
24060fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
24060fbc:	687b      	ldr	r3, [r7, #4]
24060fbe:	2200      	movs	r2, #0
24060fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
24060fc4:	7bfb      	ldrb	r3, [r7, #15]
}
24060fc6:	4618      	mov	r0, r3
24060fc8:	3710      	adds	r7, #16
24060fca:	46bd      	mov	sp, r7
24060fcc:	bd80      	pop	{r7, pc}
24060fce:	bf00      	nop
24060fd0:	ffceff88 	.word	0xffceff88
24060fd4:	00100040 	.word	0x00100040
24060fd8:	00100030 	.word	0x00100030
24060fdc:	00100020 	.word	0x00100020

24060fe0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
24060fe0:	b480      	push	{r7}
24060fe2:	b083      	sub	sp, #12
24060fe4:	af00      	add	r7, sp, #0
24060fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
24060fe8:	bf00      	nop
24060fea:	370c      	adds	r7, #12
24060fec:	46bd      	mov	sp, r7
24060fee:	f85d 7b04 	ldr.w	r7, [sp], #4
24060ff2:	4770      	bx	lr

24060ff4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
24060ff4:	b480      	push	{r7}
24060ff6:	b083      	sub	sp, #12
24060ff8:	af00      	add	r7, sp, #0
24060ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
24060ffc:	bf00      	nop
24060ffe:	370c      	adds	r7, #12
24061000:	46bd      	mov	sp, r7
24061002:	f85d 7b04 	ldr.w	r7, [sp], #4
24061006:	4770      	bx	lr

24061008 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
24061008:	b480      	push	{r7}
2406100a:	b083      	sub	sp, #12
2406100c:	af00      	add	r7, sp, #0
2406100e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
24061010:	bf00      	nop
24061012:	370c      	adds	r7, #12
24061014:	46bd      	mov	sp, r7
24061016:	f85d 7b04 	ldr.w	r7, [sp], #4
2406101a:	4770      	bx	lr

2406101c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
2406101c:	b480      	push	{r7}
2406101e:	b083      	sub	sp, #12
24061020:	af00      	add	r7, sp, #0
24061022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
24061024:	bf00      	nop
24061026:	370c      	adds	r7, #12
24061028:	46bd      	mov	sp, r7
2406102a:	f85d 7b04 	ldr.w	r7, [sp], #4
2406102e:	4770      	bx	lr

24061030 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
24061030:	b480      	push	{r7}
24061032:	b083      	sub	sp, #12
24061034:	af00      	add	r7, sp, #0
24061036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
24061038:	bf00      	nop
2406103a:	370c      	adds	r7, #12
2406103c:	46bd      	mov	sp, r7
2406103e:	f85d 7b04 	ldr.w	r7, [sp], #4
24061042:	4770      	bx	lr

24061044 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
24061044:	b480      	push	{r7}
24061046:	b085      	sub	sp, #20
24061048:	af00      	add	r7, sp, #0
2406104a:	6078      	str	r0, [r7, #4]
2406104c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
2406104e:	687b      	ldr	r3, [r7, #4]
24061050:	681b      	ldr	r3, [r3, #0]
24061052:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
24061054:	687b      	ldr	r3, [r7, #4]
24061056:	4a40      	ldr	r2, [pc, #256]	; (24061158 <TIM_Base_SetConfig+0x114>)
24061058:	4293      	cmp	r3, r2
2406105a:	d013      	beq.n	24061084 <TIM_Base_SetConfig+0x40>
2406105c:	687b      	ldr	r3, [r7, #4]
2406105e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24061062:	d00f      	beq.n	24061084 <TIM_Base_SetConfig+0x40>
24061064:	687b      	ldr	r3, [r7, #4]
24061066:	4a3d      	ldr	r2, [pc, #244]	; (2406115c <TIM_Base_SetConfig+0x118>)
24061068:	4293      	cmp	r3, r2
2406106a:	d00b      	beq.n	24061084 <TIM_Base_SetConfig+0x40>
2406106c:	687b      	ldr	r3, [r7, #4]
2406106e:	4a3c      	ldr	r2, [pc, #240]	; (24061160 <TIM_Base_SetConfig+0x11c>)
24061070:	4293      	cmp	r3, r2
24061072:	d007      	beq.n	24061084 <TIM_Base_SetConfig+0x40>
24061074:	687b      	ldr	r3, [r7, #4]
24061076:	4a3b      	ldr	r2, [pc, #236]	; (24061164 <TIM_Base_SetConfig+0x120>)
24061078:	4293      	cmp	r3, r2
2406107a:	d003      	beq.n	24061084 <TIM_Base_SetConfig+0x40>
2406107c:	687b      	ldr	r3, [r7, #4]
2406107e:	4a3a      	ldr	r2, [pc, #232]	; (24061168 <TIM_Base_SetConfig+0x124>)
24061080:	4293      	cmp	r3, r2
24061082:	d108      	bne.n	24061096 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
24061084:	68fb      	ldr	r3, [r7, #12]
24061086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
2406108a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
2406108c:	683b      	ldr	r3, [r7, #0]
2406108e:	685b      	ldr	r3, [r3, #4]
24061090:	68fa      	ldr	r2, [r7, #12]
24061092:	4313      	orrs	r3, r2
24061094:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
24061096:	687b      	ldr	r3, [r7, #4]
24061098:	4a2f      	ldr	r2, [pc, #188]	; (24061158 <TIM_Base_SetConfig+0x114>)
2406109a:	4293      	cmp	r3, r2
2406109c:	d01f      	beq.n	240610de <TIM_Base_SetConfig+0x9a>
2406109e:	687b      	ldr	r3, [r7, #4]
240610a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
240610a4:	d01b      	beq.n	240610de <TIM_Base_SetConfig+0x9a>
240610a6:	687b      	ldr	r3, [r7, #4]
240610a8:	4a2c      	ldr	r2, [pc, #176]	; (2406115c <TIM_Base_SetConfig+0x118>)
240610aa:	4293      	cmp	r3, r2
240610ac:	d017      	beq.n	240610de <TIM_Base_SetConfig+0x9a>
240610ae:	687b      	ldr	r3, [r7, #4]
240610b0:	4a2b      	ldr	r2, [pc, #172]	; (24061160 <TIM_Base_SetConfig+0x11c>)
240610b2:	4293      	cmp	r3, r2
240610b4:	d013      	beq.n	240610de <TIM_Base_SetConfig+0x9a>
240610b6:	687b      	ldr	r3, [r7, #4]
240610b8:	4a2a      	ldr	r2, [pc, #168]	; (24061164 <TIM_Base_SetConfig+0x120>)
240610ba:	4293      	cmp	r3, r2
240610bc:	d00f      	beq.n	240610de <TIM_Base_SetConfig+0x9a>
240610be:	687b      	ldr	r3, [r7, #4]
240610c0:	4a29      	ldr	r2, [pc, #164]	; (24061168 <TIM_Base_SetConfig+0x124>)
240610c2:	4293      	cmp	r3, r2
240610c4:	d00b      	beq.n	240610de <TIM_Base_SetConfig+0x9a>
240610c6:	687b      	ldr	r3, [r7, #4]
240610c8:	4a28      	ldr	r2, [pc, #160]	; (2406116c <TIM_Base_SetConfig+0x128>)
240610ca:	4293      	cmp	r3, r2
240610cc:	d007      	beq.n	240610de <TIM_Base_SetConfig+0x9a>
240610ce:	687b      	ldr	r3, [r7, #4]
240610d0:	4a27      	ldr	r2, [pc, #156]	; (24061170 <TIM_Base_SetConfig+0x12c>)
240610d2:	4293      	cmp	r3, r2
240610d4:	d003      	beq.n	240610de <TIM_Base_SetConfig+0x9a>
240610d6:	687b      	ldr	r3, [r7, #4]
240610d8:	4a26      	ldr	r2, [pc, #152]	; (24061174 <TIM_Base_SetConfig+0x130>)
240610da:	4293      	cmp	r3, r2
240610dc:	d108      	bne.n	240610f0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
240610de:	68fb      	ldr	r3, [r7, #12]
240610e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
240610e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
240610e6:	683b      	ldr	r3, [r7, #0]
240610e8:	68db      	ldr	r3, [r3, #12]
240610ea:	68fa      	ldr	r2, [r7, #12]
240610ec:	4313      	orrs	r3, r2
240610ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
240610f0:	68fb      	ldr	r3, [r7, #12]
240610f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
240610f6:	683b      	ldr	r3, [r7, #0]
240610f8:	695b      	ldr	r3, [r3, #20]
240610fa:	4313      	orrs	r3, r2
240610fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
240610fe:	687b      	ldr	r3, [r7, #4]
24061100:	68fa      	ldr	r2, [r7, #12]
24061102:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
24061104:	683b      	ldr	r3, [r7, #0]
24061106:	689a      	ldr	r2, [r3, #8]
24061108:	687b      	ldr	r3, [r7, #4]
2406110a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
2406110c:	683b      	ldr	r3, [r7, #0]
2406110e:	681a      	ldr	r2, [r3, #0]
24061110:	687b      	ldr	r3, [r7, #4]
24061112:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
24061114:	687b      	ldr	r3, [r7, #4]
24061116:	4a10      	ldr	r2, [pc, #64]	; (24061158 <TIM_Base_SetConfig+0x114>)
24061118:	4293      	cmp	r3, r2
2406111a:	d00f      	beq.n	2406113c <TIM_Base_SetConfig+0xf8>
2406111c:	687b      	ldr	r3, [r7, #4]
2406111e:	4a12      	ldr	r2, [pc, #72]	; (24061168 <TIM_Base_SetConfig+0x124>)
24061120:	4293      	cmp	r3, r2
24061122:	d00b      	beq.n	2406113c <TIM_Base_SetConfig+0xf8>
24061124:	687b      	ldr	r3, [r7, #4]
24061126:	4a11      	ldr	r2, [pc, #68]	; (2406116c <TIM_Base_SetConfig+0x128>)
24061128:	4293      	cmp	r3, r2
2406112a:	d007      	beq.n	2406113c <TIM_Base_SetConfig+0xf8>
2406112c:	687b      	ldr	r3, [r7, #4]
2406112e:	4a10      	ldr	r2, [pc, #64]	; (24061170 <TIM_Base_SetConfig+0x12c>)
24061130:	4293      	cmp	r3, r2
24061132:	d003      	beq.n	2406113c <TIM_Base_SetConfig+0xf8>
24061134:	687b      	ldr	r3, [r7, #4]
24061136:	4a0f      	ldr	r2, [pc, #60]	; (24061174 <TIM_Base_SetConfig+0x130>)
24061138:	4293      	cmp	r3, r2
2406113a:	d103      	bne.n	24061144 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
2406113c:	683b      	ldr	r3, [r7, #0]
2406113e:	691a      	ldr	r2, [r3, #16]
24061140:	687b      	ldr	r3, [r7, #4]
24061142:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
24061144:	687b      	ldr	r3, [r7, #4]
24061146:	2201      	movs	r2, #1
24061148:	615a      	str	r2, [r3, #20]
}
2406114a:	bf00      	nop
2406114c:	3714      	adds	r7, #20
2406114e:	46bd      	mov	sp, r7
24061150:	f85d 7b04 	ldr.w	r7, [sp], #4
24061154:	4770      	bx	lr
24061156:	bf00      	nop
24061158:	40010000 	.word	0x40010000
2406115c:	40000400 	.word	0x40000400
24061160:	40000800 	.word	0x40000800
24061164:	40000c00 	.word	0x40000c00
24061168:	40010400 	.word	0x40010400
2406116c:	40014000 	.word	0x40014000
24061170:	40014400 	.word	0x40014400
24061174:	40014800 	.word	0x40014800

24061178 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
24061178:	b480      	push	{r7}
2406117a:	b087      	sub	sp, #28
2406117c:	af00      	add	r7, sp, #0
2406117e:	60f8      	str	r0, [r7, #12]
24061180:	60b9      	str	r1, [r7, #8]
24061182:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
24061184:	68fb      	ldr	r3, [r7, #12]
24061186:	6a1b      	ldr	r3, [r3, #32]
24061188:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
2406118a:	68fb      	ldr	r3, [r7, #12]
2406118c:	6a1b      	ldr	r3, [r3, #32]
2406118e:	f023 0201 	bic.w	r2, r3, #1
24061192:	68fb      	ldr	r3, [r7, #12]
24061194:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
24061196:	68fb      	ldr	r3, [r7, #12]
24061198:	699b      	ldr	r3, [r3, #24]
2406119a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
2406119c:	693b      	ldr	r3, [r7, #16]
2406119e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
240611a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
240611a4:	687b      	ldr	r3, [r7, #4]
240611a6:	011b      	lsls	r3, r3, #4
240611a8:	693a      	ldr	r2, [r7, #16]
240611aa:	4313      	orrs	r3, r2
240611ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
240611ae:	697b      	ldr	r3, [r7, #20]
240611b0:	f023 030a 	bic.w	r3, r3, #10
240611b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
240611b6:	697a      	ldr	r2, [r7, #20]
240611b8:	68bb      	ldr	r3, [r7, #8]
240611ba:	4313      	orrs	r3, r2
240611bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
240611be:	68fb      	ldr	r3, [r7, #12]
240611c0:	693a      	ldr	r2, [r7, #16]
240611c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
240611c4:	68fb      	ldr	r3, [r7, #12]
240611c6:	697a      	ldr	r2, [r7, #20]
240611c8:	621a      	str	r2, [r3, #32]
}
240611ca:	bf00      	nop
240611cc:	371c      	adds	r7, #28
240611ce:	46bd      	mov	sp, r7
240611d0:	f85d 7b04 	ldr.w	r7, [sp], #4
240611d4:	4770      	bx	lr

240611d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
240611d6:	b480      	push	{r7}
240611d8:	b087      	sub	sp, #28
240611da:	af00      	add	r7, sp, #0
240611dc:	60f8      	str	r0, [r7, #12]
240611de:	60b9      	str	r1, [r7, #8]
240611e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
240611e2:	68fb      	ldr	r3, [r7, #12]
240611e4:	6a1b      	ldr	r3, [r3, #32]
240611e6:	f023 0210 	bic.w	r2, r3, #16
240611ea:	68fb      	ldr	r3, [r7, #12]
240611ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
240611ee:	68fb      	ldr	r3, [r7, #12]
240611f0:	699b      	ldr	r3, [r3, #24]
240611f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
240611f4:	68fb      	ldr	r3, [r7, #12]
240611f6:	6a1b      	ldr	r3, [r3, #32]
240611f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
240611fa:	697b      	ldr	r3, [r7, #20]
240611fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
24061200:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
24061202:	687b      	ldr	r3, [r7, #4]
24061204:	031b      	lsls	r3, r3, #12
24061206:	697a      	ldr	r2, [r7, #20]
24061208:	4313      	orrs	r3, r2
2406120a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
2406120c:	693b      	ldr	r3, [r7, #16]
2406120e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
24061212:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
24061214:	68bb      	ldr	r3, [r7, #8]
24061216:	011b      	lsls	r3, r3, #4
24061218:	693a      	ldr	r2, [r7, #16]
2406121a:	4313      	orrs	r3, r2
2406121c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
2406121e:	68fb      	ldr	r3, [r7, #12]
24061220:	697a      	ldr	r2, [r7, #20]
24061222:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
24061224:	68fb      	ldr	r3, [r7, #12]
24061226:	693a      	ldr	r2, [r7, #16]
24061228:	621a      	str	r2, [r3, #32]
}
2406122a:	bf00      	nop
2406122c:	371c      	adds	r7, #28
2406122e:	46bd      	mov	sp, r7
24061230:	f85d 7b04 	ldr.w	r7, [sp], #4
24061234:	4770      	bx	lr
	...

24061238 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
24061238:	b480      	push	{r7}
2406123a:	b085      	sub	sp, #20
2406123c:	af00      	add	r7, sp, #0
2406123e:	6078      	str	r0, [r7, #4]
24061240:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
24061242:	687b      	ldr	r3, [r7, #4]
24061244:	689b      	ldr	r3, [r3, #8]
24061246:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
24061248:	68fa      	ldr	r2, [r7, #12]
2406124a:	4b09      	ldr	r3, [pc, #36]	; (24061270 <TIM_ITRx_SetConfig+0x38>)
2406124c:	4013      	ands	r3, r2
2406124e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
24061250:	683a      	ldr	r2, [r7, #0]
24061252:	68fb      	ldr	r3, [r7, #12]
24061254:	4313      	orrs	r3, r2
24061256:	f043 0307 	orr.w	r3, r3, #7
2406125a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
2406125c:	687b      	ldr	r3, [r7, #4]
2406125e:	68fa      	ldr	r2, [r7, #12]
24061260:	609a      	str	r2, [r3, #8]
}
24061262:	bf00      	nop
24061264:	3714      	adds	r7, #20
24061266:	46bd      	mov	sp, r7
24061268:	f85d 7b04 	ldr.w	r7, [sp], #4
2406126c:	4770      	bx	lr
2406126e:	bf00      	nop
24061270:	ffcfff8f 	.word	0xffcfff8f

24061274 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
24061274:	b480      	push	{r7}
24061276:	b087      	sub	sp, #28
24061278:	af00      	add	r7, sp, #0
2406127a:	60f8      	str	r0, [r7, #12]
2406127c:	60b9      	str	r1, [r7, #8]
2406127e:	607a      	str	r2, [r7, #4]
24061280:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
24061282:	68fb      	ldr	r3, [r7, #12]
24061284:	689b      	ldr	r3, [r3, #8]
24061286:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
24061288:	697b      	ldr	r3, [r7, #20]
2406128a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
2406128e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
24061290:	683b      	ldr	r3, [r7, #0]
24061292:	021a      	lsls	r2, r3, #8
24061294:	687b      	ldr	r3, [r7, #4]
24061296:	431a      	orrs	r2, r3
24061298:	68bb      	ldr	r3, [r7, #8]
2406129a:	4313      	orrs	r3, r2
2406129c:	697a      	ldr	r2, [r7, #20]
2406129e:	4313      	orrs	r3, r2
240612a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
240612a2:	68fb      	ldr	r3, [r7, #12]
240612a4:	697a      	ldr	r2, [r7, #20]
240612a6:	609a      	str	r2, [r3, #8]
}
240612a8:	bf00      	nop
240612aa:	371c      	adds	r7, #28
240612ac:	46bd      	mov	sp, r7
240612ae:	f85d 7b04 	ldr.w	r7, [sp], #4
240612b2:	4770      	bx	lr

240612b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
240612b4:	b480      	push	{r7}
240612b6:	b085      	sub	sp, #20
240612b8:	af00      	add	r7, sp, #0
240612ba:	6078      	str	r0, [r7, #4]
240612bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
240612be:	687b      	ldr	r3, [r7, #4]
240612c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
240612c4:	2b01      	cmp	r3, #1
240612c6:	d101      	bne.n	240612cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
240612c8:	2302      	movs	r3, #2
240612ca:	e06d      	b.n	240613a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
240612cc:	687b      	ldr	r3, [r7, #4]
240612ce:	2201      	movs	r2, #1
240612d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
240612d4:	687b      	ldr	r3, [r7, #4]
240612d6:	2202      	movs	r2, #2
240612d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
240612dc:	687b      	ldr	r3, [r7, #4]
240612de:	681b      	ldr	r3, [r3, #0]
240612e0:	685b      	ldr	r3, [r3, #4]
240612e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
240612e4:	687b      	ldr	r3, [r7, #4]
240612e6:	681b      	ldr	r3, [r3, #0]
240612e8:	689b      	ldr	r3, [r3, #8]
240612ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
240612ec:	687b      	ldr	r3, [r7, #4]
240612ee:	681b      	ldr	r3, [r3, #0]
240612f0:	4a30      	ldr	r2, [pc, #192]	; (240613b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
240612f2:	4293      	cmp	r3, r2
240612f4:	d004      	beq.n	24061300 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
240612f6:	687b      	ldr	r3, [r7, #4]
240612f8:	681b      	ldr	r3, [r3, #0]
240612fa:	4a2f      	ldr	r2, [pc, #188]	; (240613b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
240612fc:	4293      	cmp	r3, r2
240612fe:	d108      	bne.n	24061312 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
24061300:	68fb      	ldr	r3, [r7, #12]
24061302:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
24061306:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
24061308:	683b      	ldr	r3, [r7, #0]
2406130a:	685b      	ldr	r3, [r3, #4]
2406130c:	68fa      	ldr	r2, [r7, #12]
2406130e:	4313      	orrs	r3, r2
24061310:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
24061312:	68fb      	ldr	r3, [r7, #12]
24061314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
24061318:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
2406131a:	683b      	ldr	r3, [r7, #0]
2406131c:	681b      	ldr	r3, [r3, #0]
2406131e:	68fa      	ldr	r2, [r7, #12]
24061320:	4313      	orrs	r3, r2
24061322:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
24061324:	687b      	ldr	r3, [r7, #4]
24061326:	681b      	ldr	r3, [r3, #0]
24061328:	68fa      	ldr	r2, [r7, #12]
2406132a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
2406132c:	687b      	ldr	r3, [r7, #4]
2406132e:	681b      	ldr	r3, [r3, #0]
24061330:	4a20      	ldr	r2, [pc, #128]	; (240613b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
24061332:	4293      	cmp	r3, r2
24061334:	d022      	beq.n	2406137c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
24061336:	687b      	ldr	r3, [r7, #4]
24061338:	681b      	ldr	r3, [r3, #0]
2406133a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2406133e:	d01d      	beq.n	2406137c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
24061340:	687b      	ldr	r3, [r7, #4]
24061342:	681b      	ldr	r3, [r3, #0]
24061344:	4a1d      	ldr	r2, [pc, #116]	; (240613bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
24061346:	4293      	cmp	r3, r2
24061348:	d018      	beq.n	2406137c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
2406134a:	687b      	ldr	r3, [r7, #4]
2406134c:	681b      	ldr	r3, [r3, #0]
2406134e:	4a1c      	ldr	r2, [pc, #112]	; (240613c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
24061350:	4293      	cmp	r3, r2
24061352:	d013      	beq.n	2406137c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
24061354:	687b      	ldr	r3, [r7, #4]
24061356:	681b      	ldr	r3, [r3, #0]
24061358:	4a1a      	ldr	r2, [pc, #104]	; (240613c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
2406135a:	4293      	cmp	r3, r2
2406135c:	d00e      	beq.n	2406137c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
2406135e:	687b      	ldr	r3, [r7, #4]
24061360:	681b      	ldr	r3, [r3, #0]
24061362:	4a15      	ldr	r2, [pc, #84]	; (240613b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
24061364:	4293      	cmp	r3, r2
24061366:	d009      	beq.n	2406137c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
24061368:	687b      	ldr	r3, [r7, #4]
2406136a:	681b      	ldr	r3, [r3, #0]
2406136c:	4a16      	ldr	r2, [pc, #88]	; (240613c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
2406136e:	4293      	cmp	r3, r2
24061370:	d004      	beq.n	2406137c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
24061372:	687b      	ldr	r3, [r7, #4]
24061374:	681b      	ldr	r3, [r3, #0]
24061376:	4a15      	ldr	r2, [pc, #84]	; (240613cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
24061378:	4293      	cmp	r3, r2
2406137a:	d10c      	bne.n	24061396 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
2406137c:	68bb      	ldr	r3, [r7, #8]
2406137e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
24061382:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
24061384:	683b      	ldr	r3, [r7, #0]
24061386:	689b      	ldr	r3, [r3, #8]
24061388:	68ba      	ldr	r2, [r7, #8]
2406138a:	4313      	orrs	r3, r2
2406138c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
2406138e:	687b      	ldr	r3, [r7, #4]
24061390:	681b      	ldr	r3, [r3, #0]
24061392:	68ba      	ldr	r2, [r7, #8]
24061394:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
24061396:	687b      	ldr	r3, [r7, #4]
24061398:	2201      	movs	r2, #1
2406139a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
2406139e:	687b      	ldr	r3, [r7, #4]
240613a0:	2200      	movs	r2, #0
240613a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
240613a6:	2300      	movs	r3, #0
}
240613a8:	4618      	mov	r0, r3
240613aa:	3714      	adds	r7, #20
240613ac:	46bd      	mov	sp, r7
240613ae:	f85d 7b04 	ldr.w	r7, [sp], #4
240613b2:	4770      	bx	lr
240613b4:	40010000 	.word	0x40010000
240613b8:	40010400 	.word	0x40010400
240613bc:	40000400 	.word	0x40000400
240613c0:	40000800 	.word	0x40000800
240613c4:	40000c00 	.word	0x40000c00
240613c8:	40001800 	.word	0x40001800
240613cc:	40014000 	.word	0x40014000

240613d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
240613d0:	b480      	push	{r7}
240613d2:	b083      	sub	sp, #12
240613d4:	af00      	add	r7, sp, #0
240613d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
240613d8:	bf00      	nop
240613da:	370c      	adds	r7, #12
240613dc:	46bd      	mov	sp, r7
240613de:	f85d 7b04 	ldr.w	r7, [sp], #4
240613e2:	4770      	bx	lr

240613e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
240613e4:	b480      	push	{r7}
240613e6:	b083      	sub	sp, #12
240613e8:	af00      	add	r7, sp, #0
240613ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
240613ec:	bf00      	nop
240613ee:	370c      	adds	r7, #12
240613f0:	46bd      	mov	sp, r7
240613f2:	f85d 7b04 	ldr.w	r7, [sp], #4
240613f6:	4770      	bx	lr

240613f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
240613f8:	b480      	push	{r7}
240613fa:	b083      	sub	sp, #12
240613fc:	af00      	add	r7, sp, #0
240613fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
24061400:	bf00      	nop
24061402:	370c      	adds	r7, #12
24061404:	46bd      	mov	sp, r7
24061406:	f85d 7b04 	ldr.w	r7, [sp], #4
2406140a:	4770      	bx	lr

2406140c <__assert_func>:
2406140c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
2406140e:	4614      	mov	r4, r2
24061410:	461a      	mov	r2, r3
24061412:	4b09      	ldr	r3, [pc, #36]	; (24061438 <__assert_func+0x2c>)
24061414:	681b      	ldr	r3, [r3, #0]
24061416:	4605      	mov	r5, r0
24061418:	68d8      	ldr	r0, [r3, #12]
2406141a:	b14c      	cbz	r4, 24061430 <__assert_func+0x24>
2406141c:	4b07      	ldr	r3, [pc, #28]	; (2406143c <__assert_func+0x30>)
2406141e:	9100      	str	r1, [sp, #0]
24061420:	e9cd 3401 	strd	r3, r4, [sp, #4]
24061424:	4906      	ldr	r1, [pc, #24]	; (24061440 <__assert_func+0x34>)
24061426:	462b      	mov	r3, r5
24061428:	f000 f91e 	bl	24061668 <fiprintf>
2406142c:	f000 fb3b 	bl	24061aa6 <abort>
24061430:	4b04      	ldr	r3, [pc, #16]	; (24061444 <__assert_func+0x38>)
24061432:	461c      	mov	r4, r3
24061434:	e7f3      	b.n	2406141e <__assert_func+0x12>
24061436:	bf00      	nop
24061438:	200000ac 	.word	0x200000ac
2406143c:	24064210 	.word	0x24064210
24061440:	2406421d 	.word	0x2406421d
24061444:	2406424b 	.word	0x2406424b

24061448 <srand>:
24061448:	b538      	push	{r3, r4, r5, lr}
2406144a:	4b10      	ldr	r3, [pc, #64]	; (2406148c <srand+0x44>)
2406144c:	681d      	ldr	r5, [r3, #0]
2406144e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
24061450:	4604      	mov	r4, r0
24061452:	b9b3      	cbnz	r3, 24061482 <srand+0x3a>
24061454:	2018      	movs	r0, #24
24061456:	f000 fb79 	bl	24061b4c <malloc>
2406145a:	4602      	mov	r2, r0
2406145c:	6328      	str	r0, [r5, #48]	; 0x30
2406145e:	b920      	cbnz	r0, 2406146a <srand+0x22>
24061460:	4b0b      	ldr	r3, [pc, #44]	; (24061490 <srand+0x48>)
24061462:	480c      	ldr	r0, [pc, #48]	; (24061494 <srand+0x4c>)
24061464:	2146      	movs	r1, #70	; 0x46
24061466:	f7ff ffd1 	bl	2406140c <__assert_func>
2406146a:	490b      	ldr	r1, [pc, #44]	; (24061498 <srand+0x50>)
2406146c:	4b0b      	ldr	r3, [pc, #44]	; (2406149c <srand+0x54>)
2406146e:	e9c0 1300 	strd	r1, r3, [r0]
24061472:	4b0b      	ldr	r3, [pc, #44]	; (240614a0 <srand+0x58>)
24061474:	6083      	str	r3, [r0, #8]
24061476:	230b      	movs	r3, #11
24061478:	8183      	strh	r3, [r0, #12]
2406147a:	2100      	movs	r1, #0
2406147c:	2001      	movs	r0, #1
2406147e:	e9c2 0104 	strd	r0, r1, [r2, #16]
24061482:	6b2b      	ldr	r3, [r5, #48]	; 0x30
24061484:	2200      	movs	r2, #0
24061486:	611c      	str	r4, [r3, #16]
24061488:	615a      	str	r2, [r3, #20]
2406148a:	bd38      	pop	{r3, r4, r5, pc}
2406148c:	200000ac 	.word	0x200000ac
24061490:	2406424c 	.word	0x2406424c
24061494:	24064263 	.word	0x24064263
24061498:	abcd330e 	.word	0xabcd330e
2406149c:	e66d1234 	.word	0xe66d1234
240614a0:	0005deec 	.word	0x0005deec

240614a4 <rand>:
240614a4:	4b16      	ldr	r3, [pc, #88]	; (24061500 <rand+0x5c>)
240614a6:	b510      	push	{r4, lr}
240614a8:	681c      	ldr	r4, [r3, #0]
240614aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
240614ac:	b9b3      	cbnz	r3, 240614dc <rand+0x38>
240614ae:	2018      	movs	r0, #24
240614b0:	f000 fb4c 	bl	24061b4c <malloc>
240614b4:	4602      	mov	r2, r0
240614b6:	6320      	str	r0, [r4, #48]	; 0x30
240614b8:	b920      	cbnz	r0, 240614c4 <rand+0x20>
240614ba:	4b12      	ldr	r3, [pc, #72]	; (24061504 <rand+0x60>)
240614bc:	4812      	ldr	r0, [pc, #72]	; (24061508 <rand+0x64>)
240614be:	2152      	movs	r1, #82	; 0x52
240614c0:	f7ff ffa4 	bl	2406140c <__assert_func>
240614c4:	4911      	ldr	r1, [pc, #68]	; (2406150c <rand+0x68>)
240614c6:	4b12      	ldr	r3, [pc, #72]	; (24061510 <rand+0x6c>)
240614c8:	e9c0 1300 	strd	r1, r3, [r0]
240614cc:	4b11      	ldr	r3, [pc, #68]	; (24061514 <rand+0x70>)
240614ce:	6083      	str	r3, [r0, #8]
240614d0:	230b      	movs	r3, #11
240614d2:	8183      	strh	r3, [r0, #12]
240614d4:	2100      	movs	r1, #0
240614d6:	2001      	movs	r0, #1
240614d8:	e9c2 0104 	strd	r0, r1, [r2, #16]
240614dc:	6b21      	ldr	r1, [r4, #48]	; 0x30
240614de:	480e      	ldr	r0, [pc, #56]	; (24061518 <rand+0x74>)
240614e0:	690b      	ldr	r3, [r1, #16]
240614e2:	694c      	ldr	r4, [r1, #20]
240614e4:	4a0d      	ldr	r2, [pc, #52]	; (2406151c <rand+0x78>)
240614e6:	4358      	muls	r0, r3
240614e8:	fb02 0004 	mla	r0, r2, r4, r0
240614ec:	fba3 3202 	umull	r3, r2, r3, r2
240614f0:	3301      	adds	r3, #1
240614f2:	eb40 0002 	adc.w	r0, r0, r2
240614f6:	e9c1 3004 	strd	r3, r0, [r1, #16]
240614fa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
240614fe:	bd10      	pop	{r4, pc}
24061500:	200000ac 	.word	0x200000ac
24061504:	2406424c 	.word	0x2406424c
24061508:	24064263 	.word	0x24064263
2406150c:	abcd330e 	.word	0xabcd330e
24061510:	e66d1234 	.word	0xe66d1234
24061514:	0005deec 	.word	0x0005deec
24061518:	5851f42d 	.word	0x5851f42d
2406151c:	4c957f2d 	.word	0x4c957f2d

24061520 <std>:
24061520:	2300      	movs	r3, #0
24061522:	b510      	push	{r4, lr}
24061524:	4604      	mov	r4, r0
24061526:	e9c0 3300 	strd	r3, r3, [r0]
2406152a:	e9c0 3304 	strd	r3, r3, [r0, #16]
2406152e:	6083      	str	r3, [r0, #8]
24061530:	8181      	strh	r1, [r0, #12]
24061532:	6643      	str	r3, [r0, #100]	; 0x64
24061534:	81c2      	strh	r2, [r0, #14]
24061536:	6183      	str	r3, [r0, #24]
24061538:	4619      	mov	r1, r3
2406153a:	2208      	movs	r2, #8
2406153c:	305c      	adds	r0, #92	; 0x5c
2406153e:	f000 fa29 	bl	24061994 <memset>
24061542:	4b0d      	ldr	r3, [pc, #52]	; (24061578 <std+0x58>)
24061544:	6263      	str	r3, [r4, #36]	; 0x24
24061546:	4b0d      	ldr	r3, [pc, #52]	; (2406157c <std+0x5c>)
24061548:	62a3      	str	r3, [r4, #40]	; 0x28
2406154a:	4b0d      	ldr	r3, [pc, #52]	; (24061580 <std+0x60>)
2406154c:	62e3      	str	r3, [r4, #44]	; 0x2c
2406154e:	4b0d      	ldr	r3, [pc, #52]	; (24061584 <std+0x64>)
24061550:	6323      	str	r3, [r4, #48]	; 0x30
24061552:	4b0d      	ldr	r3, [pc, #52]	; (24061588 <std+0x68>)
24061554:	6224      	str	r4, [r4, #32]
24061556:	429c      	cmp	r4, r3
24061558:	d006      	beq.n	24061568 <std+0x48>
2406155a:	f103 0268 	add.w	r2, r3, #104	; 0x68
2406155e:	4294      	cmp	r4, r2
24061560:	d002      	beq.n	24061568 <std+0x48>
24061562:	33d0      	adds	r3, #208	; 0xd0
24061564:	429c      	cmp	r4, r3
24061566:	d105      	bne.n	24061574 <std+0x54>
24061568:	f104 0058 	add.w	r0, r4, #88	; 0x58
2406156c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
24061570:	f000 ba88 	b.w	24061a84 <__retarget_lock_init_recursive>
24061574:	bd10      	pop	{r4, pc}
24061576:	bf00      	nop
24061578:	240617e5 	.word	0x240617e5
2406157c:	24061807 	.word	0x24061807
24061580:	2406183f 	.word	0x2406183f
24061584:	24061863 	.word	0x24061863
24061588:	20000624 	.word	0x20000624

2406158c <stdio_exit_handler>:
2406158c:	4a02      	ldr	r2, [pc, #8]	; (24061598 <stdio_exit_handler+0xc>)
2406158e:	4903      	ldr	r1, [pc, #12]	; (2406159c <stdio_exit_handler+0x10>)
24061590:	4803      	ldr	r0, [pc, #12]	; (240615a0 <stdio_exit_handler+0x14>)
24061592:	f000 b87b 	b.w	2406168c <_fwalk_sglue>
24061596:	bf00      	nop
24061598:	20000054 	.word	0x20000054
2406159c:	24062619 	.word	0x24062619
240615a0:	20000060 	.word	0x20000060

240615a4 <cleanup_stdio>:
240615a4:	6841      	ldr	r1, [r0, #4]
240615a6:	4b0c      	ldr	r3, [pc, #48]	; (240615d8 <cleanup_stdio+0x34>)
240615a8:	4299      	cmp	r1, r3
240615aa:	b510      	push	{r4, lr}
240615ac:	4604      	mov	r4, r0
240615ae:	d001      	beq.n	240615b4 <cleanup_stdio+0x10>
240615b0:	f001 f832 	bl	24062618 <_fflush_r>
240615b4:	68a1      	ldr	r1, [r4, #8]
240615b6:	4b09      	ldr	r3, [pc, #36]	; (240615dc <cleanup_stdio+0x38>)
240615b8:	4299      	cmp	r1, r3
240615ba:	d002      	beq.n	240615c2 <cleanup_stdio+0x1e>
240615bc:	4620      	mov	r0, r4
240615be:	f001 f82b 	bl	24062618 <_fflush_r>
240615c2:	68e1      	ldr	r1, [r4, #12]
240615c4:	4b06      	ldr	r3, [pc, #24]	; (240615e0 <cleanup_stdio+0x3c>)
240615c6:	4299      	cmp	r1, r3
240615c8:	d004      	beq.n	240615d4 <cleanup_stdio+0x30>
240615ca:	4620      	mov	r0, r4
240615cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
240615d0:	f001 b822 	b.w	24062618 <_fflush_r>
240615d4:	bd10      	pop	{r4, pc}
240615d6:	bf00      	nop
240615d8:	20000624 	.word	0x20000624
240615dc:	2000068c 	.word	0x2000068c
240615e0:	200006f4 	.word	0x200006f4

240615e4 <global_stdio_init.part.0>:
240615e4:	b510      	push	{r4, lr}
240615e6:	4b0b      	ldr	r3, [pc, #44]	; (24061614 <global_stdio_init.part.0+0x30>)
240615e8:	4c0b      	ldr	r4, [pc, #44]	; (24061618 <global_stdio_init.part.0+0x34>)
240615ea:	4a0c      	ldr	r2, [pc, #48]	; (2406161c <global_stdio_init.part.0+0x38>)
240615ec:	601a      	str	r2, [r3, #0]
240615ee:	4620      	mov	r0, r4
240615f0:	2200      	movs	r2, #0
240615f2:	2104      	movs	r1, #4
240615f4:	f7ff ff94 	bl	24061520 <std>
240615f8:	f104 0068 	add.w	r0, r4, #104	; 0x68
240615fc:	2201      	movs	r2, #1
240615fe:	2109      	movs	r1, #9
24061600:	f7ff ff8e 	bl	24061520 <std>
24061604:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
24061608:	2202      	movs	r2, #2
2406160a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
2406160e:	2112      	movs	r1, #18
24061610:	f7ff bf86 	b.w	24061520 <std>
24061614:	2000075c 	.word	0x2000075c
24061618:	20000624 	.word	0x20000624
2406161c:	2406158d 	.word	0x2406158d

24061620 <__sfp_lock_acquire>:
24061620:	4801      	ldr	r0, [pc, #4]	; (24061628 <__sfp_lock_acquire+0x8>)
24061622:	f000 ba30 	b.w	24061a86 <__retarget_lock_acquire_recursive>
24061626:	bf00      	nop
24061628:	20000765 	.word	0x20000765

2406162c <__sfp_lock_release>:
2406162c:	4801      	ldr	r0, [pc, #4]	; (24061634 <__sfp_lock_release+0x8>)
2406162e:	f000 ba2b 	b.w	24061a88 <__retarget_lock_release_recursive>
24061632:	bf00      	nop
24061634:	20000765 	.word	0x20000765

24061638 <__sinit>:
24061638:	b510      	push	{r4, lr}
2406163a:	4604      	mov	r4, r0
2406163c:	f7ff fff0 	bl	24061620 <__sfp_lock_acquire>
24061640:	6a23      	ldr	r3, [r4, #32]
24061642:	b11b      	cbz	r3, 2406164c <__sinit+0x14>
24061644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
24061648:	f7ff bff0 	b.w	2406162c <__sfp_lock_release>
2406164c:	4b04      	ldr	r3, [pc, #16]	; (24061660 <__sinit+0x28>)
2406164e:	6223      	str	r3, [r4, #32]
24061650:	4b04      	ldr	r3, [pc, #16]	; (24061664 <__sinit+0x2c>)
24061652:	681b      	ldr	r3, [r3, #0]
24061654:	2b00      	cmp	r3, #0
24061656:	d1f5      	bne.n	24061644 <__sinit+0xc>
24061658:	f7ff ffc4 	bl	240615e4 <global_stdio_init.part.0>
2406165c:	e7f2      	b.n	24061644 <__sinit+0xc>
2406165e:	bf00      	nop
24061660:	240615a5 	.word	0x240615a5
24061664:	2000075c 	.word	0x2000075c

24061668 <fiprintf>:
24061668:	b40e      	push	{r1, r2, r3}
2406166a:	b503      	push	{r0, r1, lr}
2406166c:	4601      	mov	r1, r0
2406166e:	ab03      	add	r3, sp, #12
24061670:	4805      	ldr	r0, [pc, #20]	; (24061688 <fiprintf+0x20>)
24061672:	f853 2b04 	ldr.w	r2, [r3], #4
24061676:	6800      	ldr	r0, [r0, #0]
24061678:	9301      	str	r3, [sp, #4]
2406167a:	f000 fc9d 	bl	24061fb8 <_vfiprintf_r>
2406167e:	b002      	add	sp, #8
24061680:	f85d eb04 	ldr.w	lr, [sp], #4
24061684:	b003      	add	sp, #12
24061686:	4770      	bx	lr
24061688:	200000ac 	.word	0x200000ac

2406168c <_fwalk_sglue>:
2406168c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
24061690:	4607      	mov	r7, r0
24061692:	4688      	mov	r8, r1
24061694:	4614      	mov	r4, r2
24061696:	2600      	movs	r6, #0
24061698:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
2406169c:	f1b9 0901 	subs.w	r9, r9, #1
240616a0:	d505      	bpl.n	240616ae <_fwalk_sglue+0x22>
240616a2:	6824      	ldr	r4, [r4, #0]
240616a4:	2c00      	cmp	r4, #0
240616a6:	d1f7      	bne.n	24061698 <_fwalk_sglue+0xc>
240616a8:	4630      	mov	r0, r6
240616aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
240616ae:	89ab      	ldrh	r3, [r5, #12]
240616b0:	2b01      	cmp	r3, #1
240616b2:	d907      	bls.n	240616c4 <_fwalk_sglue+0x38>
240616b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
240616b8:	3301      	adds	r3, #1
240616ba:	d003      	beq.n	240616c4 <_fwalk_sglue+0x38>
240616bc:	4629      	mov	r1, r5
240616be:	4638      	mov	r0, r7
240616c0:	47c0      	blx	r8
240616c2:	4306      	orrs	r6, r0
240616c4:	3568      	adds	r5, #104	; 0x68
240616c6:	e7e9      	b.n	2406169c <_fwalk_sglue+0x10>

240616c8 <iprintf>:
240616c8:	b40f      	push	{r0, r1, r2, r3}
240616ca:	b507      	push	{r0, r1, r2, lr}
240616cc:	4906      	ldr	r1, [pc, #24]	; (240616e8 <iprintf+0x20>)
240616ce:	ab04      	add	r3, sp, #16
240616d0:	6808      	ldr	r0, [r1, #0]
240616d2:	f853 2b04 	ldr.w	r2, [r3], #4
240616d6:	6881      	ldr	r1, [r0, #8]
240616d8:	9301      	str	r3, [sp, #4]
240616da:	f000 fc6d 	bl	24061fb8 <_vfiprintf_r>
240616de:	b003      	add	sp, #12
240616e0:	f85d eb04 	ldr.w	lr, [sp], #4
240616e4:	b004      	add	sp, #16
240616e6:	4770      	bx	lr
240616e8:	200000ac 	.word	0x200000ac

240616ec <_puts_r>:
240616ec:	6a03      	ldr	r3, [r0, #32]
240616ee:	b570      	push	{r4, r5, r6, lr}
240616f0:	6884      	ldr	r4, [r0, #8]
240616f2:	4605      	mov	r5, r0
240616f4:	460e      	mov	r6, r1
240616f6:	b90b      	cbnz	r3, 240616fc <_puts_r+0x10>
240616f8:	f7ff ff9e 	bl	24061638 <__sinit>
240616fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
240616fe:	07db      	lsls	r3, r3, #31
24061700:	d405      	bmi.n	2406170e <_puts_r+0x22>
24061702:	89a3      	ldrh	r3, [r4, #12]
24061704:	0598      	lsls	r0, r3, #22
24061706:	d402      	bmi.n	2406170e <_puts_r+0x22>
24061708:	6da0      	ldr	r0, [r4, #88]	; 0x58
2406170a:	f000 f9bc 	bl	24061a86 <__retarget_lock_acquire_recursive>
2406170e:	89a3      	ldrh	r3, [r4, #12]
24061710:	0719      	lsls	r1, r3, #28
24061712:	d513      	bpl.n	2406173c <_puts_r+0x50>
24061714:	6923      	ldr	r3, [r4, #16]
24061716:	b18b      	cbz	r3, 2406173c <_puts_r+0x50>
24061718:	3e01      	subs	r6, #1
2406171a:	68a3      	ldr	r3, [r4, #8]
2406171c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
24061720:	3b01      	subs	r3, #1
24061722:	60a3      	str	r3, [r4, #8]
24061724:	b9e9      	cbnz	r1, 24061762 <_puts_r+0x76>
24061726:	2b00      	cmp	r3, #0
24061728:	da2e      	bge.n	24061788 <_puts_r+0x9c>
2406172a:	4622      	mov	r2, r4
2406172c:	210a      	movs	r1, #10
2406172e:	4628      	mov	r0, r5
24061730:	f000 f89b 	bl	2406186a <__swbuf_r>
24061734:	3001      	adds	r0, #1
24061736:	d007      	beq.n	24061748 <_puts_r+0x5c>
24061738:	250a      	movs	r5, #10
2406173a:	e007      	b.n	2406174c <_puts_r+0x60>
2406173c:	4621      	mov	r1, r4
2406173e:	4628      	mov	r0, r5
24061740:	f000 f8d0 	bl	240618e4 <__swsetup_r>
24061744:	2800      	cmp	r0, #0
24061746:	d0e7      	beq.n	24061718 <_puts_r+0x2c>
24061748:	f04f 35ff 	mov.w	r5, #4294967295
2406174c:	6e63      	ldr	r3, [r4, #100]	; 0x64
2406174e:	07da      	lsls	r2, r3, #31
24061750:	d405      	bmi.n	2406175e <_puts_r+0x72>
24061752:	89a3      	ldrh	r3, [r4, #12]
24061754:	059b      	lsls	r3, r3, #22
24061756:	d402      	bmi.n	2406175e <_puts_r+0x72>
24061758:	6da0      	ldr	r0, [r4, #88]	; 0x58
2406175a:	f000 f995 	bl	24061a88 <__retarget_lock_release_recursive>
2406175e:	4628      	mov	r0, r5
24061760:	bd70      	pop	{r4, r5, r6, pc}
24061762:	2b00      	cmp	r3, #0
24061764:	da04      	bge.n	24061770 <_puts_r+0x84>
24061766:	69a2      	ldr	r2, [r4, #24]
24061768:	429a      	cmp	r2, r3
2406176a:	dc06      	bgt.n	2406177a <_puts_r+0x8e>
2406176c:	290a      	cmp	r1, #10
2406176e:	d004      	beq.n	2406177a <_puts_r+0x8e>
24061770:	6823      	ldr	r3, [r4, #0]
24061772:	1c5a      	adds	r2, r3, #1
24061774:	6022      	str	r2, [r4, #0]
24061776:	7019      	strb	r1, [r3, #0]
24061778:	e7cf      	b.n	2406171a <_puts_r+0x2e>
2406177a:	4622      	mov	r2, r4
2406177c:	4628      	mov	r0, r5
2406177e:	f000 f874 	bl	2406186a <__swbuf_r>
24061782:	3001      	adds	r0, #1
24061784:	d1c9      	bne.n	2406171a <_puts_r+0x2e>
24061786:	e7df      	b.n	24061748 <_puts_r+0x5c>
24061788:	6823      	ldr	r3, [r4, #0]
2406178a:	250a      	movs	r5, #10
2406178c:	1c5a      	adds	r2, r3, #1
2406178e:	6022      	str	r2, [r4, #0]
24061790:	701d      	strb	r5, [r3, #0]
24061792:	e7db      	b.n	2406174c <_puts_r+0x60>

24061794 <puts>:
24061794:	4b02      	ldr	r3, [pc, #8]	; (240617a0 <puts+0xc>)
24061796:	4601      	mov	r1, r0
24061798:	6818      	ldr	r0, [r3, #0]
2406179a:	f7ff bfa7 	b.w	240616ec <_puts_r>
2406179e:	bf00      	nop
240617a0:	200000ac 	.word	0x200000ac

240617a4 <siprintf>:
240617a4:	b40e      	push	{r1, r2, r3}
240617a6:	b500      	push	{lr}
240617a8:	b09c      	sub	sp, #112	; 0x70
240617aa:	ab1d      	add	r3, sp, #116	; 0x74
240617ac:	9002      	str	r0, [sp, #8]
240617ae:	9006      	str	r0, [sp, #24]
240617b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
240617b4:	4809      	ldr	r0, [pc, #36]	; (240617dc <siprintf+0x38>)
240617b6:	9107      	str	r1, [sp, #28]
240617b8:	9104      	str	r1, [sp, #16]
240617ba:	4909      	ldr	r1, [pc, #36]	; (240617e0 <siprintf+0x3c>)
240617bc:	f853 2b04 	ldr.w	r2, [r3], #4
240617c0:	9105      	str	r1, [sp, #20]
240617c2:	6800      	ldr	r0, [r0, #0]
240617c4:	9301      	str	r3, [sp, #4]
240617c6:	a902      	add	r1, sp, #8
240617c8:	f000 face 	bl	24061d68 <_svfiprintf_r>
240617cc:	9b02      	ldr	r3, [sp, #8]
240617ce:	2200      	movs	r2, #0
240617d0:	701a      	strb	r2, [r3, #0]
240617d2:	b01c      	add	sp, #112	; 0x70
240617d4:	f85d eb04 	ldr.w	lr, [sp], #4
240617d8:	b003      	add	sp, #12
240617da:	4770      	bx	lr
240617dc:	200000ac 	.word	0x200000ac
240617e0:	ffff0208 	.word	0xffff0208

240617e4 <__sread>:
240617e4:	b510      	push	{r4, lr}
240617e6:	460c      	mov	r4, r1
240617e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
240617ec:	f000 f8fc 	bl	240619e8 <_read_r>
240617f0:	2800      	cmp	r0, #0
240617f2:	bfab      	itete	ge
240617f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
240617f6:	89a3      	ldrhlt	r3, [r4, #12]
240617f8:	181b      	addge	r3, r3, r0
240617fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
240617fe:	bfac      	ite	ge
24061800:	6563      	strge	r3, [r4, #84]	; 0x54
24061802:	81a3      	strhlt	r3, [r4, #12]
24061804:	bd10      	pop	{r4, pc}

24061806 <__swrite>:
24061806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2406180a:	461f      	mov	r7, r3
2406180c:	898b      	ldrh	r3, [r1, #12]
2406180e:	05db      	lsls	r3, r3, #23
24061810:	4605      	mov	r5, r0
24061812:	460c      	mov	r4, r1
24061814:	4616      	mov	r6, r2
24061816:	d505      	bpl.n	24061824 <__swrite+0x1e>
24061818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
2406181c:	2302      	movs	r3, #2
2406181e:	2200      	movs	r2, #0
24061820:	f000 f8d0 	bl	240619c4 <_lseek_r>
24061824:	89a3      	ldrh	r3, [r4, #12]
24061826:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
2406182a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
2406182e:	81a3      	strh	r3, [r4, #12]
24061830:	4632      	mov	r2, r6
24061832:	463b      	mov	r3, r7
24061834:	4628      	mov	r0, r5
24061836:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
2406183a:	f000 b8e7 	b.w	24061a0c <_write_r>

2406183e <__sseek>:
2406183e:	b510      	push	{r4, lr}
24061840:	460c      	mov	r4, r1
24061842:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
24061846:	f000 f8bd 	bl	240619c4 <_lseek_r>
2406184a:	1c43      	adds	r3, r0, #1
2406184c:	89a3      	ldrh	r3, [r4, #12]
2406184e:	bf15      	itete	ne
24061850:	6560      	strne	r0, [r4, #84]	; 0x54
24061852:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
24061856:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
2406185a:	81a3      	strheq	r3, [r4, #12]
2406185c:	bf18      	it	ne
2406185e:	81a3      	strhne	r3, [r4, #12]
24061860:	bd10      	pop	{r4, pc}

24061862 <__sclose>:
24061862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
24061866:	f000 b89d 	b.w	240619a4 <_close_r>

2406186a <__swbuf_r>:
2406186a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2406186c:	460e      	mov	r6, r1
2406186e:	4614      	mov	r4, r2
24061870:	4605      	mov	r5, r0
24061872:	b118      	cbz	r0, 2406187c <__swbuf_r+0x12>
24061874:	6a03      	ldr	r3, [r0, #32]
24061876:	b90b      	cbnz	r3, 2406187c <__swbuf_r+0x12>
24061878:	f7ff fede 	bl	24061638 <__sinit>
2406187c:	69a3      	ldr	r3, [r4, #24]
2406187e:	60a3      	str	r3, [r4, #8]
24061880:	89a3      	ldrh	r3, [r4, #12]
24061882:	071a      	lsls	r2, r3, #28
24061884:	d525      	bpl.n	240618d2 <__swbuf_r+0x68>
24061886:	6923      	ldr	r3, [r4, #16]
24061888:	b31b      	cbz	r3, 240618d2 <__swbuf_r+0x68>
2406188a:	6823      	ldr	r3, [r4, #0]
2406188c:	6922      	ldr	r2, [r4, #16]
2406188e:	1a98      	subs	r0, r3, r2
24061890:	6963      	ldr	r3, [r4, #20]
24061892:	b2f6      	uxtb	r6, r6
24061894:	4283      	cmp	r3, r0
24061896:	4637      	mov	r7, r6
24061898:	dc04      	bgt.n	240618a4 <__swbuf_r+0x3a>
2406189a:	4621      	mov	r1, r4
2406189c:	4628      	mov	r0, r5
2406189e:	f000 febb 	bl	24062618 <_fflush_r>
240618a2:	b9e0      	cbnz	r0, 240618de <__swbuf_r+0x74>
240618a4:	68a3      	ldr	r3, [r4, #8]
240618a6:	3b01      	subs	r3, #1
240618a8:	60a3      	str	r3, [r4, #8]
240618aa:	6823      	ldr	r3, [r4, #0]
240618ac:	1c5a      	adds	r2, r3, #1
240618ae:	6022      	str	r2, [r4, #0]
240618b0:	701e      	strb	r6, [r3, #0]
240618b2:	6962      	ldr	r2, [r4, #20]
240618b4:	1c43      	adds	r3, r0, #1
240618b6:	429a      	cmp	r2, r3
240618b8:	d004      	beq.n	240618c4 <__swbuf_r+0x5a>
240618ba:	89a3      	ldrh	r3, [r4, #12]
240618bc:	07db      	lsls	r3, r3, #31
240618be:	d506      	bpl.n	240618ce <__swbuf_r+0x64>
240618c0:	2e0a      	cmp	r6, #10
240618c2:	d104      	bne.n	240618ce <__swbuf_r+0x64>
240618c4:	4621      	mov	r1, r4
240618c6:	4628      	mov	r0, r5
240618c8:	f000 fea6 	bl	24062618 <_fflush_r>
240618cc:	b938      	cbnz	r0, 240618de <__swbuf_r+0x74>
240618ce:	4638      	mov	r0, r7
240618d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
240618d2:	4621      	mov	r1, r4
240618d4:	4628      	mov	r0, r5
240618d6:	f000 f805 	bl	240618e4 <__swsetup_r>
240618da:	2800      	cmp	r0, #0
240618dc:	d0d5      	beq.n	2406188a <__swbuf_r+0x20>
240618de:	f04f 37ff 	mov.w	r7, #4294967295
240618e2:	e7f4      	b.n	240618ce <__swbuf_r+0x64>

240618e4 <__swsetup_r>:
240618e4:	b538      	push	{r3, r4, r5, lr}
240618e6:	4b2a      	ldr	r3, [pc, #168]	; (24061990 <__swsetup_r+0xac>)
240618e8:	4605      	mov	r5, r0
240618ea:	6818      	ldr	r0, [r3, #0]
240618ec:	460c      	mov	r4, r1
240618ee:	b118      	cbz	r0, 240618f8 <__swsetup_r+0x14>
240618f0:	6a03      	ldr	r3, [r0, #32]
240618f2:	b90b      	cbnz	r3, 240618f8 <__swsetup_r+0x14>
240618f4:	f7ff fea0 	bl	24061638 <__sinit>
240618f8:	89a3      	ldrh	r3, [r4, #12]
240618fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
240618fe:	0718      	lsls	r0, r3, #28
24061900:	d422      	bmi.n	24061948 <__swsetup_r+0x64>
24061902:	06d9      	lsls	r1, r3, #27
24061904:	d407      	bmi.n	24061916 <__swsetup_r+0x32>
24061906:	2309      	movs	r3, #9
24061908:	602b      	str	r3, [r5, #0]
2406190a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
2406190e:	81a3      	strh	r3, [r4, #12]
24061910:	f04f 30ff 	mov.w	r0, #4294967295
24061914:	e034      	b.n	24061980 <__swsetup_r+0x9c>
24061916:	0758      	lsls	r0, r3, #29
24061918:	d512      	bpl.n	24061940 <__swsetup_r+0x5c>
2406191a:	6b61      	ldr	r1, [r4, #52]	; 0x34
2406191c:	b141      	cbz	r1, 24061930 <__swsetup_r+0x4c>
2406191e:	f104 0344 	add.w	r3, r4, #68	; 0x44
24061922:	4299      	cmp	r1, r3
24061924:	d002      	beq.n	2406192c <__swsetup_r+0x48>
24061926:	4628      	mov	r0, r5
24061928:	f000 f8c4 	bl	24061ab4 <_free_r>
2406192c:	2300      	movs	r3, #0
2406192e:	6363      	str	r3, [r4, #52]	; 0x34
24061930:	89a3      	ldrh	r3, [r4, #12]
24061932:	f023 0324 	bic.w	r3, r3, #36	; 0x24
24061936:	81a3      	strh	r3, [r4, #12]
24061938:	2300      	movs	r3, #0
2406193a:	6063      	str	r3, [r4, #4]
2406193c:	6923      	ldr	r3, [r4, #16]
2406193e:	6023      	str	r3, [r4, #0]
24061940:	89a3      	ldrh	r3, [r4, #12]
24061942:	f043 0308 	orr.w	r3, r3, #8
24061946:	81a3      	strh	r3, [r4, #12]
24061948:	6923      	ldr	r3, [r4, #16]
2406194a:	b94b      	cbnz	r3, 24061960 <__swsetup_r+0x7c>
2406194c:	89a3      	ldrh	r3, [r4, #12]
2406194e:	f403 7320 	and.w	r3, r3, #640	; 0x280
24061952:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
24061956:	d003      	beq.n	24061960 <__swsetup_r+0x7c>
24061958:	4621      	mov	r1, r4
2406195a:	4628      	mov	r0, r5
2406195c:	f000 feaa 	bl	240626b4 <__smakebuf_r>
24061960:	89a0      	ldrh	r0, [r4, #12]
24061962:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
24061966:	f010 0301 	ands.w	r3, r0, #1
2406196a:	d00a      	beq.n	24061982 <__swsetup_r+0x9e>
2406196c:	2300      	movs	r3, #0
2406196e:	60a3      	str	r3, [r4, #8]
24061970:	6963      	ldr	r3, [r4, #20]
24061972:	425b      	negs	r3, r3
24061974:	61a3      	str	r3, [r4, #24]
24061976:	6923      	ldr	r3, [r4, #16]
24061978:	b943      	cbnz	r3, 2406198c <__swsetup_r+0xa8>
2406197a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
2406197e:	d1c4      	bne.n	2406190a <__swsetup_r+0x26>
24061980:	bd38      	pop	{r3, r4, r5, pc}
24061982:	0781      	lsls	r1, r0, #30
24061984:	bf58      	it	pl
24061986:	6963      	ldrpl	r3, [r4, #20]
24061988:	60a3      	str	r3, [r4, #8]
2406198a:	e7f4      	b.n	24061976 <__swsetup_r+0x92>
2406198c:	2000      	movs	r0, #0
2406198e:	e7f7      	b.n	24061980 <__swsetup_r+0x9c>
24061990:	200000ac 	.word	0x200000ac

24061994 <memset>:
24061994:	4402      	add	r2, r0
24061996:	4603      	mov	r3, r0
24061998:	4293      	cmp	r3, r2
2406199a:	d100      	bne.n	2406199e <memset+0xa>
2406199c:	4770      	bx	lr
2406199e:	f803 1b01 	strb.w	r1, [r3], #1
240619a2:	e7f9      	b.n	24061998 <memset+0x4>

240619a4 <_close_r>:
240619a4:	b538      	push	{r3, r4, r5, lr}
240619a6:	4d06      	ldr	r5, [pc, #24]	; (240619c0 <_close_r+0x1c>)
240619a8:	2300      	movs	r3, #0
240619aa:	4604      	mov	r4, r0
240619ac:	4608      	mov	r0, r1
240619ae:	602b      	str	r3, [r5, #0]
240619b0:	f7f2 f875 	bl	24053a9e <_close>
240619b4:	1c43      	adds	r3, r0, #1
240619b6:	d102      	bne.n	240619be <_close_r+0x1a>
240619b8:	682b      	ldr	r3, [r5, #0]
240619ba:	b103      	cbz	r3, 240619be <_close_r+0x1a>
240619bc:	6023      	str	r3, [r4, #0]
240619be:	bd38      	pop	{r3, r4, r5, pc}
240619c0:	20000760 	.word	0x20000760

240619c4 <_lseek_r>:
240619c4:	b538      	push	{r3, r4, r5, lr}
240619c6:	4d07      	ldr	r5, [pc, #28]	; (240619e4 <_lseek_r+0x20>)
240619c8:	4604      	mov	r4, r0
240619ca:	4608      	mov	r0, r1
240619cc:	4611      	mov	r1, r2
240619ce:	2200      	movs	r2, #0
240619d0:	602a      	str	r2, [r5, #0]
240619d2:	461a      	mov	r2, r3
240619d4:	f7f2 f88a 	bl	24053aec <_lseek>
240619d8:	1c43      	adds	r3, r0, #1
240619da:	d102      	bne.n	240619e2 <_lseek_r+0x1e>
240619dc:	682b      	ldr	r3, [r5, #0]
240619de:	b103      	cbz	r3, 240619e2 <_lseek_r+0x1e>
240619e0:	6023      	str	r3, [r4, #0]
240619e2:	bd38      	pop	{r3, r4, r5, pc}
240619e4:	20000760 	.word	0x20000760

240619e8 <_read_r>:
240619e8:	b538      	push	{r3, r4, r5, lr}
240619ea:	4d07      	ldr	r5, [pc, #28]	; (24061a08 <_read_r+0x20>)
240619ec:	4604      	mov	r4, r0
240619ee:	4608      	mov	r0, r1
240619f0:	4611      	mov	r1, r2
240619f2:	2200      	movs	r2, #0
240619f4:	602a      	str	r2, [r5, #0]
240619f6:	461a      	mov	r2, r3
240619f8:	f7f2 f818 	bl	24053a2c <_read>
240619fc:	1c43      	adds	r3, r0, #1
240619fe:	d102      	bne.n	24061a06 <_read_r+0x1e>
24061a00:	682b      	ldr	r3, [r5, #0]
24061a02:	b103      	cbz	r3, 24061a06 <_read_r+0x1e>
24061a04:	6023      	str	r3, [r4, #0]
24061a06:	bd38      	pop	{r3, r4, r5, pc}
24061a08:	20000760 	.word	0x20000760

24061a0c <_write_r>:
24061a0c:	b538      	push	{r3, r4, r5, lr}
24061a0e:	4d07      	ldr	r5, [pc, #28]	; (24061a2c <_write_r+0x20>)
24061a10:	4604      	mov	r4, r0
24061a12:	4608      	mov	r0, r1
24061a14:	4611      	mov	r1, r2
24061a16:	2200      	movs	r2, #0
24061a18:	602a      	str	r2, [r5, #0]
24061a1a:	461a      	mov	r2, r3
24061a1c:	f7f2 f823 	bl	24053a66 <_write>
24061a20:	1c43      	adds	r3, r0, #1
24061a22:	d102      	bne.n	24061a2a <_write_r+0x1e>
24061a24:	682b      	ldr	r3, [r5, #0]
24061a26:	b103      	cbz	r3, 24061a2a <_write_r+0x1e>
24061a28:	6023      	str	r3, [r4, #0]
24061a2a:	bd38      	pop	{r3, r4, r5, pc}
24061a2c:	20000760 	.word	0x20000760

24061a30 <__errno>:
24061a30:	4b01      	ldr	r3, [pc, #4]	; (24061a38 <__errno+0x8>)
24061a32:	6818      	ldr	r0, [r3, #0]
24061a34:	4770      	bx	lr
24061a36:	bf00      	nop
24061a38:	200000ac 	.word	0x200000ac

24061a3c <__libc_init_array>:
24061a3c:	b570      	push	{r4, r5, r6, lr}
24061a3e:	4d0d      	ldr	r5, [pc, #52]	; (24061a74 <__libc_init_array+0x38>)
24061a40:	4c0d      	ldr	r4, [pc, #52]	; (24061a78 <__libc_init_array+0x3c>)
24061a42:	1b64      	subs	r4, r4, r5
24061a44:	10a4      	asrs	r4, r4, #2
24061a46:	2600      	movs	r6, #0
24061a48:	42a6      	cmp	r6, r4
24061a4a:	d109      	bne.n	24061a60 <__libc_init_array+0x24>
24061a4c:	4d0b      	ldr	r5, [pc, #44]	; (24061a7c <__libc_init_array+0x40>)
24061a4e:	4c0c      	ldr	r4, [pc, #48]	; (24061a80 <__libc_init_array+0x44>)
24061a50:	f000 ff34 	bl	240628bc <_init>
24061a54:	1b64      	subs	r4, r4, r5
24061a56:	10a4      	asrs	r4, r4, #2
24061a58:	2600      	movs	r6, #0
24061a5a:	42a6      	cmp	r6, r4
24061a5c:	d105      	bne.n	24061a6a <__libc_init_array+0x2e>
24061a5e:	bd70      	pop	{r4, r5, r6, pc}
24061a60:	f855 3b04 	ldr.w	r3, [r5], #4
24061a64:	4798      	blx	r3
24061a66:	3601      	adds	r6, #1
24061a68:	e7ee      	b.n	24061a48 <__libc_init_array+0xc>
24061a6a:	f855 3b04 	ldr.w	r3, [r5], #4
24061a6e:	4798      	blx	r3
24061a70:	3601      	adds	r6, #1
24061a72:	e7f2      	b.n	24061a5a <__libc_init_array+0x1e>
24061a74:	240642f0 	.word	0x240642f0
24061a78:	240642f0 	.word	0x240642f0
24061a7c:	240642f0 	.word	0x240642f0
24061a80:	240642f4 	.word	0x240642f4

24061a84 <__retarget_lock_init_recursive>:
24061a84:	4770      	bx	lr

24061a86 <__retarget_lock_acquire_recursive>:
24061a86:	4770      	bx	lr

24061a88 <__retarget_lock_release_recursive>:
24061a88:	4770      	bx	lr

24061a8a <memcpy>:
24061a8a:	440a      	add	r2, r1
24061a8c:	4291      	cmp	r1, r2
24061a8e:	f100 33ff 	add.w	r3, r0, #4294967295
24061a92:	d100      	bne.n	24061a96 <memcpy+0xc>
24061a94:	4770      	bx	lr
24061a96:	b510      	push	{r4, lr}
24061a98:	f811 4b01 	ldrb.w	r4, [r1], #1
24061a9c:	f803 4f01 	strb.w	r4, [r3, #1]!
24061aa0:	4291      	cmp	r1, r2
24061aa2:	d1f9      	bne.n	24061a98 <memcpy+0xe>
24061aa4:	bd10      	pop	{r4, pc}

24061aa6 <abort>:
24061aa6:	b508      	push	{r3, lr}
24061aa8:	2006      	movs	r0, #6
24061aaa:	f000 fe81 	bl	240627b0 <raise>
24061aae:	2001      	movs	r0, #1
24061ab0:	f7f1 ffb2 	bl	24053a18 <_exit>

24061ab4 <_free_r>:
24061ab4:	b537      	push	{r0, r1, r2, r4, r5, lr}
24061ab6:	2900      	cmp	r1, #0
24061ab8:	d044      	beq.n	24061b44 <_free_r+0x90>
24061aba:	f851 3c04 	ldr.w	r3, [r1, #-4]
24061abe:	9001      	str	r0, [sp, #4]
24061ac0:	2b00      	cmp	r3, #0
24061ac2:	f1a1 0404 	sub.w	r4, r1, #4
24061ac6:	bfb8      	it	lt
24061ac8:	18e4      	addlt	r4, r4, r3
24061aca:	f000 f8e7 	bl	24061c9c <__malloc_lock>
24061ace:	4a1e      	ldr	r2, [pc, #120]	; (24061b48 <_free_r+0x94>)
24061ad0:	9801      	ldr	r0, [sp, #4]
24061ad2:	6813      	ldr	r3, [r2, #0]
24061ad4:	b933      	cbnz	r3, 24061ae4 <_free_r+0x30>
24061ad6:	6063      	str	r3, [r4, #4]
24061ad8:	6014      	str	r4, [r2, #0]
24061ada:	b003      	add	sp, #12
24061adc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
24061ae0:	f000 b8e2 	b.w	24061ca8 <__malloc_unlock>
24061ae4:	42a3      	cmp	r3, r4
24061ae6:	d908      	bls.n	24061afa <_free_r+0x46>
24061ae8:	6825      	ldr	r5, [r4, #0]
24061aea:	1961      	adds	r1, r4, r5
24061aec:	428b      	cmp	r3, r1
24061aee:	bf01      	itttt	eq
24061af0:	6819      	ldreq	r1, [r3, #0]
24061af2:	685b      	ldreq	r3, [r3, #4]
24061af4:	1949      	addeq	r1, r1, r5
24061af6:	6021      	streq	r1, [r4, #0]
24061af8:	e7ed      	b.n	24061ad6 <_free_r+0x22>
24061afa:	461a      	mov	r2, r3
24061afc:	685b      	ldr	r3, [r3, #4]
24061afe:	b10b      	cbz	r3, 24061b04 <_free_r+0x50>
24061b00:	42a3      	cmp	r3, r4
24061b02:	d9fa      	bls.n	24061afa <_free_r+0x46>
24061b04:	6811      	ldr	r1, [r2, #0]
24061b06:	1855      	adds	r5, r2, r1
24061b08:	42a5      	cmp	r5, r4
24061b0a:	d10b      	bne.n	24061b24 <_free_r+0x70>
24061b0c:	6824      	ldr	r4, [r4, #0]
24061b0e:	4421      	add	r1, r4
24061b10:	1854      	adds	r4, r2, r1
24061b12:	42a3      	cmp	r3, r4
24061b14:	6011      	str	r1, [r2, #0]
24061b16:	d1e0      	bne.n	24061ada <_free_r+0x26>
24061b18:	681c      	ldr	r4, [r3, #0]
24061b1a:	685b      	ldr	r3, [r3, #4]
24061b1c:	6053      	str	r3, [r2, #4]
24061b1e:	440c      	add	r4, r1
24061b20:	6014      	str	r4, [r2, #0]
24061b22:	e7da      	b.n	24061ada <_free_r+0x26>
24061b24:	d902      	bls.n	24061b2c <_free_r+0x78>
24061b26:	230c      	movs	r3, #12
24061b28:	6003      	str	r3, [r0, #0]
24061b2a:	e7d6      	b.n	24061ada <_free_r+0x26>
24061b2c:	6825      	ldr	r5, [r4, #0]
24061b2e:	1961      	adds	r1, r4, r5
24061b30:	428b      	cmp	r3, r1
24061b32:	bf04      	itt	eq
24061b34:	6819      	ldreq	r1, [r3, #0]
24061b36:	685b      	ldreq	r3, [r3, #4]
24061b38:	6063      	str	r3, [r4, #4]
24061b3a:	bf04      	itt	eq
24061b3c:	1949      	addeq	r1, r1, r5
24061b3e:	6021      	streq	r1, [r4, #0]
24061b40:	6054      	str	r4, [r2, #4]
24061b42:	e7ca      	b.n	24061ada <_free_r+0x26>
24061b44:	b003      	add	sp, #12
24061b46:	bd30      	pop	{r4, r5, pc}
24061b48:	20000768 	.word	0x20000768

24061b4c <malloc>:
24061b4c:	4b02      	ldr	r3, [pc, #8]	; (24061b58 <malloc+0xc>)
24061b4e:	4601      	mov	r1, r0
24061b50:	6818      	ldr	r0, [r3, #0]
24061b52:	f000 b823 	b.w	24061b9c <_malloc_r>
24061b56:	bf00      	nop
24061b58:	200000ac 	.word	0x200000ac

24061b5c <sbrk_aligned>:
24061b5c:	b570      	push	{r4, r5, r6, lr}
24061b5e:	4e0e      	ldr	r6, [pc, #56]	; (24061b98 <sbrk_aligned+0x3c>)
24061b60:	460c      	mov	r4, r1
24061b62:	6831      	ldr	r1, [r6, #0]
24061b64:	4605      	mov	r5, r0
24061b66:	b911      	cbnz	r1, 24061b6e <sbrk_aligned+0x12>
24061b68:	f000 fe60 	bl	2406282c <_sbrk_r>
24061b6c:	6030      	str	r0, [r6, #0]
24061b6e:	4621      	mov	r1, r4
24061b70:	4628      	mov	r0, r5
24061b72:	f000 fe5b 	bl	2406282c <_sbrk_r>
24061b76:	1c43      	adds	r3, r0, #1
24061b78:	d00a      	beq.n	24061b90 <sbrk_aligned+0x34>
24061b7a:	1cc4      	adds	r4, r0, #3
24061b7c:	f024 0403 	bic.w	r4, r4, #3
24061b80:	42a0      	cmp	r0, r4
24061b82:	d007      	beq.n	24061b94 <sbrk_aligned+0x38>
24061b84:	1a21      	subs	r1, r4, r0
24061b86:	4628      	mov	r0, r5
24061b88:	f000 fe50 	bl	2406282c <_sbrk_r>
24061b8c:	3001      	adds	r0, #1
24061b8e:	d101      	bne.n	24061b94 <sbrk_aligned+0x38>
24061b90:	f04f 34ff 	mov.w	r4, #4294967295
24061b94:	4620      	mov	r0, r4
24061b96:	bd70      	pop	{r4, r5, r6, pc}
24061b98:	2000076c 	.word	0x2000076c

24061b9c <_malloc_r>:
24061b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
24061ba0:	1ccd      	adds	r5, r1, #3
24061ba2:	f025 0503 	bic.w	r5, r5, #3
24061ba6:	3508      	adds	r5, #8
24061ba8:	2d0c      	cmp	r5, #12
24061baa:	bf38      	it	cc
24061bac:	250c      	movcc	r5, #12
24061bae:	2d00      	cmp	r5, #0
24061bb0:	4607      	mov	r7, r0
24061bb2:	db01      	blt.n	24061bb8 <_malloc_r+0x1c>
24061bb4:	42a9      	cmp	r1, r5
24061bb6:	d905      	bls.n	24061bc4 <_malloc_r+0x28>
24061bb8:	230c      	movs	r3, #12
24061bba:	603b      	str	r3, [r7, #0]
24061bbc:	2600      	movs	r6, #0
24061bbe:	4630      	mov	r0, r6
24061bc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
24061bc4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 24061c98 <_malloc_r+0xfc>
24061bc8:	f000 f868 	bl	24061c9c <__malloc_lock>
24061bcc:	f8d8 3000 	ldr.w	r3, [r8]
24061bd0:	461c      	mov	r4, r3
24061bd2:	bb5c      	cbnz	r4, 24061c2c <_malloc_r+0x90>
24061bd4:	4629      	mov	r1, r5
24061bd6:	4638      	mov	r0, r7
24061bd8:	f7ff ffc0 	bl	24061b5c <sbrk_aligned>
24061bdc:	1c43      	adds	r3, r0, #1
24061bde:	4604      	mov	r4, r0
24061be0:	d155      	bne.n	24061c8e <_malloc_r+0xf2>
24061be2:	f8d8 4000 	ldr.w	r4, [r8]
24061be6:	4626      	mov	r6, r4
24061be8:	2e00      	cmp	r6, #0
24061bea:	d145      	bne.n	24061c78 <_malloc_r+0xdc>
24061bec:	2c00      	cmp	r4, #0
24061bee:	d048      	beq.n	24061c82 <_malloc_r+0xe6>
24061bf0:	6823      	ldr	r3, [r4, #0]
24061bf2:	4631      	mov	r1, r6
24061bf4:	4638      	mov	r0, r7
24061bf6:	eb04 0903 	add.w	r9, r4, r3
24061bfa:	f000 fe17 	bl	2406282c <_sbrk_r>
24061bfe:	4581      	cmp	r9, r0
24061c00:	d13f      	bne.n	24061c82 <_malloc_r+0xe6>
24061c02:	6821      	ldr	r1, [r4, #0]
24061c04:	1a6d      	subs	r5, r5, r1
24061c06:	4629      	mov	r1, r5
24061c08:	4638      	mov	r0, r7
24061c0a:	f7ff ffa7 	bl	24061b5c <sbrk_aligned>
24061c0e:	3001      	adds	r0, #1
24061c10:	d037      	beq.n	24061c82 <_malloc_r+0xe6>
24061c12:	6823      	ldr	r3, [r4, #0]
24061c14:	442b      	add	r3, r5
24061c16:	6023      	str	r3, [r4, #0]
24061c18:	f8d8 3000 	ldr.w	r3, [r8]
24061c1c:	2b00      	cmp	r3, #0
24061c1e:	d038      	beq.n	24061c92 <_malloc_r+0xf6>
24061c20:	685a      	ldr	r2, [r3, #4]
24061c22:	42a2      	cmp	r2, r4
24061c24:	d12b      	bne.n	24061c7e <_malloc_r+0xe2>
24061c26:	2200      	movs	r2, #0
24061c28:	605a      	str	r2, [r3, #4]
24061c2a:	e00f      	b.n	24061c4c <_malloc_r+0xb0>
24061c2c:	6822      	ldr	r2, [r4, #0]
24061c2e:	1b52      	subs	r2, r2, r5
24061c30:	d41f      	bmi.n	24061c72 <_malloc_r+0xd6>
24061c32:	2a0b      	cmp	r2, #11
24061c34:	d917      	bls.n	24061c66 <_malloc_r+0xca>
24061c36:	1961      	adds	r1, r4, r5
24061c38:	42a3      	cmp	r3, r4
24061c3a:	6025      	str	r5, [r4, #0]
24061c3c:	bf18      	it	ne
24061c3e:	6059      	strne	r1, [r3, #4]
24061c40:	6863      	ldr	r3, [r4, #4]
24061c42:	bf08      	it	eq
24061c44:	f8c8 1000 	streq.w	r1, [r8]
24061c48:	5162      	str	r2, [r4, r5]
24061c4a:	604b      	str	r3, [r1, #4]
24061c4c:	4638      	mov	r0, r7
24061c4e:	f104 060b 	add.w	r6, r4, #11
24061c52:	f000 f829 	bl	24061ca8 <__malloc_unlock>
24061c56:	f026 0607 	bic.w	r6, r6, #7
24061c5a:	1d23      	adds	r3, r4, #4
24061c5c:	1af2      	subs	r2, r6, r3
24061c5e:	d0ae      	beq.n	24061bbe <_malloc_r+0x22>
24061c60:	1b9b      	subs	r3, r3, r6
24061c62:	50a3      	str	r3, [r4, r2]
24061c64:	e7ab      	b.n	24061bbe <_malloc_r+0x22>
24061c66:	42a3      	cmp	r3, r4
24061c68:	6862      	ldr	r2, [r4, #4]
24061c6a:	d1dd      	bne.n	24061c28 <_malloc_r+0x8c>
24061c6c:	f8c8 2000 	str.w	r2, [r8]
24061c70:	e7ec      	b.n	24061c4c <_malloc_r+0xb0>
24061c72:	4623      	mov	r3, r4
24061c74:	6864      	ldr	r4, [r4, #4]
24061c76:	e7ac      	b.n	24061bd2 <_malloc_r+0x36>
24061c78:	4634      	mov	r4, r6
24061c7a:	6876      	ldr	r6, [r6, #4]
24061c7c:	e7b4      	b.n	24061be8 <_malloc_r+0x4c>
24061c7e:	4613      	mov	r3, r2
24061c80:	e7cc      	b.n	24061c1c <_malloc_r+0x80>
24061c82:	230c      	movs	r3, #12
24061c84:	603b      	str	r3, [r7, #0]
24061c86:	4638      	mov	r0, r7
24061c88:	f000 f80e 	bl	24061ca8 <__malloc_unlock>
24061c8c:	e797      	b.n	24061bbe <_malloc_r+0x22>
24061c8e:	6025      	str	r5, [r4, #0]
24061c90:	e7dc      	b.n	24061c4c <_malloc_r+0xb0>
24061c92:	605b      	str	r3, [r3, #4]
24061c94:	deff      	udf	#255	; 0xff
24061c96:	bf00      	nop
24061c98:	20000768 	.word	0x20000768

24061c9c <__malloc_lock>:
24061c9c:	4801      	ldr	r0, [pc, #4]	; (24061ca4 <__malloc_lock+0x8>)
24061c9e:	f7ff bef2 	b.w	24061a86 <__retarget_lock_acquire_recursive>
24061ca2:	bf00      	nop
24061ca4:	20000764 	.word	0x20000764

24061ca8 <__malloc_unlock>:
24061ca8:	4801      	ldr	r0, [pc, #4]	; (24061cb0 <__malloc_unlock+0x8>)
24061caa:	f7ff beed 	b.w	24061a88 <__retarget_lock_release_recursive>
24061cae:	bf00      	nop
24061cb0:	20000764 	.word	0x20000764

24061cb4 <__ssputs_r>:
24061cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
24061cb8:	688e      	ldr	r6, [r1, #8]
24061cba:	461f      	mov	r7, r3
24061cbc:	42be      	cmp	r6, r7
24061cbe:	680b      	ldr	r3, [r1, #0]
24061cc0:	4682      	mov	sl, r0
24061cc2:	460c      	mov	r4, r1
24061cc4:	4690      	mov	r8, r2
24061cc6:	d82c      	bhi.n	24061d22 <__ssputs_r+0x6e>
24061cc8:	898a      	ldrh	r2, [r1, #12]
24061cca:	f412 6f90 	tst.w	r2, #1152	; 0x480
24061cce:	d026      	beq.n	24061d1e <__ssputs_r+0x6a>
24061cd0:	6965      	ldr	r5, [r4, #20]
24061cd2:	6909      	ldr	r1, [r1, #16]
24061cd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
24061cd8:	eba3 0901 	sub.w	r9, r3, r1
24061cdc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
24061ce0:	1c7b      	adds	r3, r7, #1
24061ce2:	444b      	add	r3, r9
24061ce4:	106d      	asrs	r5, r5, #1
24061ce6:	429d      	cmp	r5, r3
24061ce8:	bf38      	it	cc
24061cea:	461d      	movcc	r5, r3
24061cec:	0553      	lsls	r3, r2, #21
24061cee:	d527      	bpl.n	24061d40 <__ssputs_r+0x8c>
24061cf0:	4629      	mov	r1, r5
24061cf2:	f7ff ff53 	bl	24061b9c <_malloc_r>
24061cf6:	4606      	mov	r6, r0
24061cf8:	b360      	cbz	r0, 24061d54 <__ssputs_r+0xa0>
24061cfa:	6921      	ldr	r1, [r4, #16]
24061cfc:	464a      	mov	r2, r9
24061cfe:	f7ff fec4 	bl	24061a8a <memcpy>
24061d02:	89a3      	ldrh	r3, [r4, #12]
24061d04:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
24061d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
24061d0c:	81a3      	strh	r3, [r4, #12]
24061d0e:	6126      	str	r6, [r4, #16]
24061d10:	6165      	str	r5, [r4, #20]
24061d12:	444e      	add	r6, r9
24061d14:	eba5 0509 	sub.w	r5, r5, r9
24061d18:	6026      	str	r6, [r4, #0]
24061d1a:	60a5      	str	r5, [r4, #8]
24061d1c:	463e      	mov	r6, r7
24061d1e:	42be      	cmp	r6, r7
24061d20:	d900      	bls.n	24061d24 <__ssputs_r+0x70>
24061d22:	463e      	mov	r6, r7
24061d24:	6820      	ldr	r0, [r4, #0]
24061d26:	4632      	mov	r2, r6
24061d28:	4641      	mov	r1, r8
24061d2a:	f000 fcff 	bl	2406272c <memmove>
24061d2e:	68a3      	ldr	r3, [r4, #8]
24061d30:	1b9b      	subs	r3, r3, r6
24061d32:	60a3      	str	r3, [r4, #8]
24061d34:	6823      	ldr	r3, [r4, #0]
24061d36:	4433      	add	r3, r6
24061d38:	6023      	str	r3, [r4, #0]
24061d3a:	2000      	movs	r0, #0
24061d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
24061d40:	462a      	mov	r2, r5
24061d42:	f000 fd83 	bl	2406284c <_realloc_r>
24061d46:	4606      	mov	r6, r0
24061d48:	2800      	cmp	r0, #0
24061d4a:	d1e0      	bne.n	24061d0e <__ssputs_r+0x5a>
24061d4c:	6921      	ldr	r1, [r4, #16]
24061d4e:	4650      	mov	r0, sl
24061d50:	f7ff feb0 	bl	24061ab4 <_free_r>
24061d54:	230c      	movs	r3, #12
24061d56:	f8ca 3000 	str.w	r3, [sl]
24061d5a:	89a3      	ldrh	r3, [r4, #12]
24061d5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
24061d60:	81a3      	strh	r3, [r4, #12]
24061d62:	f04f 30ff 	mov.w	r0, #4294967295
24061d66:	e7e9      	b.n	24061d3c <__ssputs_r+0x88>

24061d68 <_svfiprintf_r>:
24061d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24061d6c:	4698      	mov	r8, r3
24061d6e:	898b      	ldrh	r3, [r1, #12]
24061d70:	061b      	lsls	r3, r3, #24
24061d72:	b09d      	sub	sp, #116	; 0x74
24061d74:	4607      	mov	r7, r0
24061d76:	460d      	mov	r5, r1
24061d78:	4614      	mov	r4, r2
24061d7a:	d50e      	bpl.n	24061d9a <_svfiprintf_r+0x32>
24061d7c:	690b      	ldr	r3, [r1, #16]
24061d7e:	b963      	cbnz	r3, 24061d9a <_svfiprintf_r+0x32>
24061d80:	2140      	movs	r1, #64	; 0x40
24061d82:	f7ff ff0b 	bl	24061b9c <_malloc_r>
24061d86:	6028      	str	r0, [r5, #0]
24061d88:	6128      	str	r0, [r5, #16]
24061d8a:	b920      	cbnz	r0, 24061d96 <_svfiprintf_r+0x2e>
24061d8c:	230c      	movs	r3, #12
24061d8e:	603b      	str	r3, [r7, #0]
24061d90:	f04f 30ff 	mov.w	r0, #4294967295
24061d94:	e0d0      	b.n	24061f38 <_svfiprintf_r+0x1d0>
24061d96:	2340      	movs	r3, #64	; 0x40
24061d98:	616b      	str	r3, [r5, #20]
24061d9a:	2300      	movs	r3, #0
24061d9c:	9309      	str	r3, [sp, #36]	; 0x24
24061d9e:	2320      	movs	r3, #32
24061da0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
24061da4:	f8cd 800c 	str.w	r8, [sp, #12]
24061da8:	2330      	movs	r3, #48	; 0x30
24061daa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 24061f50 <_svfiprintf_r+0x1e8>
24061dae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
24061db2:	f04f 0901 	mov.w	r9, #1
24061db6:	4623      	mov	r3, r4
24061db8:	469a      	mov	sl, r3
24061dba:	f813 2b01 	ldrb.w	r2, [r3], #1
24061dbe:	b10a      	cbz	r2, 24061dc4 <_svfiprintf_r+0x5c>
24061dc0:	2a25      	cmp	r2, #37	; 0x25
24061dc2:	d1f9      	bne.n	24061db8 <_svfiprintf_r+0x50>
24061dc4:	ebba 0b04 	subs.w	fp, sl, r4
24061dc8:	d00b      	beq.n	24061de2 <_svfiprintf_r+0x7a>
24061dca:	465b      	mov	r3, fp
24061dcc:	4622      	mov	r2, r4
24061dce:	4629      	mov	r1, r5
24061dd0:	4638      	mov	r0, r7
24061dd2:	f7ff ff6f 	bl	24061cb4 <__ssputs_r>
24061dd6:	3001      	adds	r0, #1
24061dd8:	f000 80a9 	beq.w	24061f2e <_svfiprintf_r+0x1c6>
24061ddc:	9a09      	ldr	r2, [sp, #36]	; 0x24
24061dde:	445a      	add	r2, fp
24061de0:	9209      	str	r2, [sp, #36]	; 0x24
24061de2:	f89a 3000 	ldrb.w	r3, [sl]
24061de6:	2b00      	cmp	r3, #0
24061de8:	f000 80a1 	beq.w	24061f2e <_svfiprintf_r+0x1c6>
24061dec:	2300      	movs	r3, #0
24061dee:	f04f 32ff 	mov.w	r2, #4294967295
24061df2:	e9cd 2305 	strd	r2, r3, [sp, #20]
24061df6:	f10a 0a01 	add.w	sl, sl, #1
24061dfa:	9304      	str	r3, [sp, #16]
24061dfc:	9307      	str	r3, [sp, #28]
24061dfe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
24061e02:	931a      	str	r3, [sp, #104]	; 0x68
24061e04:	4654      	mov	r4, sl
24061e06:	2205      	movs	r2, #5
24061e08:	f814 1b01 	ldrb.w	r1, [r4], #1
24061e0c:	4850      	ldr	r0, [pc, #320]	; (24061f50 <_svfiprintf_r+0x1e8>)
24061e0e:	f7ee f917 	bl	24050040 <memchr>
24061e12:	9a04      	ldr	r2, [sp, #16]
24061e14:	b9d8      	cbnz	r0, 24061e4e <_svfiprintf_r+0xe6>
24061e16:	06d0      	lsls	r0, r2, #27
24061e18:	bf44      	itt	mi
24061e1a:	2320      	movmi	r3, #32
24061e1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
24061e20:	0711      	lsls	r1, r2, #28
24061e22:	bf44      	itt	mi
24061e24:	232b      	movmi	r3, #43	; 0x2b
24061e26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
24061e2a:	f89a 3000 	ldrb.w	r3, [sl]
24061e2e:	2b2a      	cmp	r3, #42	; 0x2a
24061e30:	d015      	beq.n	24061e5e <_svfiprintf_r+0xf6>
24061e32:	9a07      	ldr	r2, [sp, #28]
24061e34:	4654      	mov	r4, sl
24061e36:	2000      	movs	r0, #0
24061e38:	f04f 0c0a 	mov.w	ip, #10
24061e3c:	4621      	mov	r1, r4
24061e3e:	f811 3b01 	ldrb.w	r3, [r1], #1
24061e42:	3b30      	subs	r3, #48	; 0x30
24061e44:	2b09      	cmp	r3, #9
24061e46:	d94d      	bls.n	24061ee4 <_svfiprintf_r+0x17c>
24061e48:	b1b0      	cbz	r0, 24061e78 <_svfiprintf_r+0x110>
24061e4a:	9207      	str	r2, [sp, #28]
24061e4c:	e014      	b.n	24061e78 <_svfiprintf_r+0x110>
24061e4e:	eba0 0308 	sub.w	r3, r0, r8
24061e52:	fa09 f303 	lsl.w	r3, r9, r3
24061e56:	4313      	orrs	r3, r2
24061e58:	9304      	str	r3, [sp, #16]
24061e5a:	46a2      	mov	sl, r4
24061e5c:	e7d2      	b.n	24061e04 <_svfiprintf_r+0x9c>
24061e5e:	9b03      	ldr	r3, [sp, #12]
24061e60:	1d19      	adds	r1, r3, #4
24061e62:	681b      	ldr	r3, [r3, #0]
24061e64:	9103      	str	r1, [sp, #12]
24061e66:	2b00      	cmp	r3, #0
24061e68:	bfbb      	ittet	lt
24061e6a:	425b      	neglt	r3, r3
24061e6c:	f042 0202 	orrlt.w	r2, r2, #2
24061e70:	9307      	strge	r3, [sp, #28]
24061e72:	9307      	strlt	r3, [sp, #28]
24061e74:	bfb8      	it	lt
24061e76:	9204      	strlt	r2, [sp, #16]
24061e78:	7823      	ldrb	r3, [r4, #0]
24061e7a:	2b2e      	cmp	r3, #46	; 0x2e
24061e7c:	d10c      	bne.n	24061e98 <_svfiprintf_r+0x130>
24061e7e:	7863      	ldrb	r3, [r4, #1]
24061e80:	2b2a      	cmp	r3, #42	; 0x2a
24061e82:	d134      	bne.n	24061eee <_svfiprintf_r+0x186>
24061e84:	9b03      	ldr	r3, [sp, #12]
24061e86:	1d1a      	adds	r2, r3, #4
24061e88:	681b      	ldr	r3, [r3, #0]
24061e8a:	9203      	str	r2, [sp, #12]
24061e8c:	2b00      	cmp	r3, #0
24061e8e:	bfb8      	it	lt
24061e90:	f04f 33ff 	movlt.w	r3, #4294967295
24061e94:	3402      	adds	r4, #2
24061e96:	9305      	str	r3, [sp, #20]
24061e98:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 24061f60 <_svfiprintf_r+0x1f8>
24061e9c:	7821      	ldrb	r1, [r4, #0]
24061e9e:	2203      	movs	r2, #3
24061ea0:	4650      	mov	r0, sl
24061ea2:	f7ee f8cd 	bl	24050040 <memchr>
24061ea6:	b138      	cbz	r0, 24061eb8 <_svfiprintf_r+0x150>
24061ea8:	9b04      	ldr	r3, [sp, #16]
24061eaa:	eba0 000a 	sub.w	r0, r0, sl
24061eae:	2240      	movs	r2, #64	; 0x40
24061eb0:	4082      	lsls	r2, r0
24061eb2:	4313      	orrs	r3, r2
24061eb4:	3401      	adds	r4, #1
24061eb6:	9304      	str	r3, [sp, #16]
24061eb8:	f814 1b01 	ldrb.w	r1, [r4], #1
24061ebc:	4825      	ldr	r0, [pc, #148]	; (24061f54 <_svfiprintf_r+0x1ec>)
24061ebe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
24061ec2:	2206      	movs	r2, #6
24061ec4:	f7ee f8bc 	bl	24050040 <memchr>
24061ec8:	2800      	cmp	r0, #0
24061eca:	d038      	beq.n	24061f3e <_svfiprintf_r+0x1d6>
24061ecc:	4b22      	ldr	r3, [pc, #136]	; (24061f58 <_svfiprintf_r+0x1f0>)
24061ece:	bb1b      	cbnz	r3, 24061f18 <_svfiprintf_r+0x1b0>
24061ed0:	9b03      	ldr	r3, [sp, #12]
24061ed2:	3307      	adds	r3, #7
24061ed4:	f023 0307 	bic.w	r3, r3, #7
24061ed8:	3308      	adds	r3, #8
24061eda:	9303      	str	r3, [sp, #12]
24061edc:	9b09      	ldr	r3, [sp, #36]	; 0x24
24061ede:	4433      	add	r3, r6
24061ee0:	9309      	str	r3, [sp, #36]	; 0x24
24061ee2:	e768      	b.n	24061db6 <_svfiprintf_r+0x4e>
24061ee4:	fb0c 3202 	mla	r2, ip, r2, r3
24061ee8:	460c      	mov	r4, r1
24061eea:	2001      	movs	r0, #1
24061eec:	e7a6      	b.n	24061e3c <_svfiprintf_r+0xd4>
24061eee:	2300      	movs	r3, #0
24061ef0:	3401      	adds	r4, #1
24061ef2:	9305      	str	r3, [sp, #20]
24061ef4:	4619      	mov	r1, r3
24061ef6:	f04f 0c0a 	mov.w	ip, #10
24061efa:	4620      	mov	r0, r4
24061efc:	f810 2b01 	ldrb.w	r2, [r0], #1
24061f00:	3a30      	subs	r2, #48	; 0x30
24061f02:	2a09      	cmp	r2, #9
24061f04:	d903      	bls.n	24061f0e <_svfiprintf_r+0x1a6>
24061f06:	2b00      	cmp	r3, #0
24061f08:	d0c6      	beq.n	24061e98 <_svfiprintf_r+0x130>
24061f0a:	9105      	str	r1, [sp, #20]
24061f0c:	e7c4      	b.n	24061e98 <_svfiprintf_r+0x130>
24061f0e:	fb0c 2101 	mla	r1, ip, r1, r2
24061f12:	4604      	mov	r4, r0
24061f14:	2301      	movs	r3, #1
24061f16:	e7f0      	b.n	24061efa <_svfiprintf_r+0x192>
24061f18:	ab03      	add	r3, sp, #12
24061f1a:	9300      	str	r3, [sp, #0]
24061f1c:	462a      	mov	r2, r5
24061f1e:	4b0f      	ldr	r3, [pc, #60]	; (24061f5c <_svfiprintf_r+0x1f4>)
24061f20:	a904      	add	r1, sp, #16
24061f22:	4638      	mov	r0, r7
24061f24:	f3af 8000 	nop.w
24061f28:	1c42      	adds	r2, r0, #1
24061f2a:	4606      	mov	r6, r0
24061f2c:	d1d6      	bne.n	24061edc <_svfiprintf_r+0x174>
24061f2e:	89ab      	ldrh	r3, [r5, #12]
24061f30:	065b      	lsls	r3, r3, #25
24061f32:	f53f af2d 	bmi.w	24061d90 <_svfiprintf_r+0x28>
24061f36:	9809      	ldr	r0, [sp, #36]	; 0x24
24061f38:	b01d      	add	sp, #116	; 0x74
24061f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
24061f3e:	ab03      	add	r3, sp, #12
24061f40:	9300      	str	r3, [sp, #0]
24061f42:	462a      	mov	r2, r5
24061f44:	4b05      	ldr	r3, [pc, #20]	; (24061f5c <_svfiprintf_r+0x1f4>)
24061f46:	a904      	add	r1, sp, #16
24061f48:	4638      	mov	r0, r7
24061f4a:	f000 f9bd 	bl	240622c8 <_printf_i>
24061f4e:	e7eb      	b.n	24061f28 <_svfiprintf_r+0x1c0>
24061f50:	240642bb 	.word	0x240642bb
24061f54:	240642c5 	.word	0x240642c5
24061f58:	00000000 	.word	0x00000000
24061f5c:	24061cb5 	.word	0x24061cb5
24061f60:	240642c1 	.word	0x240642c1

24061f64 <__sfputc_r>:
24061f64:	6893      	ldr	r3, [r2, #8]
24061f66:	3b01      	subs	r3, #1
24061f68:	2b00      	cmp	r3, #0
24061f6a:	b410      	push	{r4}
24061f6c:	6093      	str	r3, [r2, #8]
24061f6e:	da08      	bge.n	24061f82 <__sfputc_r+0x1e>
24061f70:	6994      	ldr	r4, [r2, #24]
24061f72:	42a3      	cmp	r3, r4
24061f74:	db01      	blt.n	24061f7a <__sfputc_r+0x16>
24061f76:	290a      	cmp	r1, #10
24061f78:	d103      	bne.n	24061f82 <__sfputc_r+0x1e>
24061f7a:	f85d 4b04 	ldr.w	r4, [sp], #4
24061f7e:	f7ff bc74 	b.w	2406186a <__swbuf_r>
24061f82:	6813      	ldr	r3, [r2, #0]
24061f84:	1c58      	adds	r0, r3, #1
24061f86:	6010      	str	r0, [r2, #0]
24061f88:	7019      	strb	r1, [r3, #0]
24061f8a:	4608      	mov	r0, r1
24061f8c:	f85d 4b04 	ldr.w	r4, [sp], #4
24061f90:	4770      	bx	lr

24061f92 <__sfputs_r>:
24061f92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24061f94:	4606      	mov	r6, r0
24061f96:	460f      	mov	r7, r1
24061f98:	4614      	mov	r4, r2
24061f9a:	18d5      	adds	r5, r2, r3
24061f9c:	42ac      	cmp	r4, r5
24061f9e:	d101      	bne.n	24061fa4 <__sfputs_r+0x12>
24061fa0:	2000      	movs	r0, #0
24061fa2:	e007      	b.n	24061fb4 <__sfputs_r+0x22>
24061fa4:	f814 1b01 	ldrb.w	r1, [r4], #1
24061fa8:	463a      	mov	r2, r7
24061faa:	4630      	mov	r0, r6
24061fac:	f7ff ffda 	bl	24061f64 <__sfputc_r>
24061fb0:	1c43      	adds	r3, r0, #1
24061fb2:	d1f3      	bne.n	24061f9c <__sfputs_r+0xa>
24061fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

24061fb8 <_vfiprintf_r>:
24061fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24061fbc:	460d      	mov	r5, r1
24061fbe:	b09d      	sub	sp, #116	; 0x74
24061fc0:	4614      	mov	r4, r2
24061fc2:	4698      	mov	r8, r3
24061fc4:	4606      	mov	r6, r0
24061fc6:	b118      	cbz	r0, 24061fd0 <_vfiprintf_r+0x18>
24061fc8:	6a03      	ldr	r3, [r0, #32]
24061fca:	b90b      	cbnz	r3, 24061fd0 <_vfiprintf_r+0x18>
24061fcc:	f7ff fb34 	bl	24061638 <__sinit>
24061fd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
24061fd2:	07d9      	lsls	r1, r3, #31
24061fd4:	d405      	bmi.n	24061fe2 <_vfiprintf_r+0x2a>
24061fd6:	89ab      	ldrh	r3, [r5, #12]
24061fd8:	059a      	lsls	r2, r3, #22
24061fda:	d402      	bmi.n	24061fe2 <_vfiprintf_r+0x2a>
24061fdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
24061fde:	f7ff fd52 	bl	24061a86 <__retarget_lock_acquire_recursive>
24061fe2:	89ab      	ldrh	r3, [r5, #12]
24061fe4:	071b      	lsls	r3, r3, #28
24061fe6:	d501      	bpl.n	24061fec <_vfiprintf_r+0x34>
24061fe8:	692b      	ldr	r3, [r5, #16]
24061fea:	b99b      	cbnz	r3, 24062014 <_vfiprintf_r+0x5c>
24061fec:	4629      	mov	r1, r5
24061fee:	4630      	mov	r0, r6
24061ff0:	f7ff fc78 	bl	240618e4 <__swsetup_r>
24061ff4:	b170      	cbz	r0, 24062014 <_vfiprintf_r+0x5c>
24061ff6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
24061ff8:	07dc      	lsls	r4, r3, #31
24061ffa:	d504      	bpl.n	24062006 <_vfiprintf_r+0x4e>
24061ffc:	f04f 30ff 	mov.w	r0, #4294967295
24062000:	b01d      	add	sp, #116	; 0x74
24062002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
24062006:	89ab      	ldrh	r3, [r5, #12]
24062008:	0598      	lsls	r0, r3, #22
2406200a:	d4f7      	bmi.n	24061ffc <_vfiprintf_r+0x44>
2406200c:	6da8      	ldr	r0, [r5, #88]	; 0x58
2406200e:	f7ff fd3b 	bl	24061a88 <__retarget_lock_release_recursive>
24062012:	e7f3      	b.n	24061ffc <_vfiprintf_r+0x44>
24062014:	2300      	movs	r3, #0
24062016:	9309      	str	r3, [sp, #36]	; 0x24
24062018:	2320      	movs	r3, #32
2406201a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
2406201e:	f8cd 800c 	str.w	r8, [sp, #12]
24062022:	2330      	movs	r3, #48	; 0x30
24062024:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 240621d8 <_vfiprintf_r+0x220>
24062028:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
2406202c:	f04f 0901 	mov.w	r9, #1
24062030:	4623      	mov	r3, r4
24062032:	469a      	mov	sl, r3
24062034:	f813 2b01 	ldrb.w	r2, [r3], #1
24062038:	b10a      	cbz	r2, 2406203e <_vfiprintf_r+0x86>
2406203a:	2a25      	cmp	r2, #37	; 0x25
2406203c:	d1f9      	bne.n	24062032 <_vfiprintf_r+0x7a>
2406203e:	ebba 0b04 	subs.w	fp, sl, r4
24062042:	d00b      	beq.n	2406205c <_vfiprintf_r+0xa4>
24062044:	465b      	mov	r3, fp
24062046:	4622      	mov	r2, r4
24062048:	4629      	mov	r1, r5
2406204a:	4630      	mov	r0, r6
2406204c:	f7ff ffa1 	bl	24061f92 <__sfputs_r>
24062050:	3001      	adds	r0, #1
24062052:	f000 80a9 	beq.w	240621a8 <_vfiprintf_r+0x1f0>
24062056:	9a09      	ldr	r2, [sp, #36]	; 0x24
24062058:	445a      	add	r2, fp
2406205a:	9209      	str	r2, [sp, #36]	; 0x24
2406205c:	f89a 3000 	ldrb.w	r3, [sl]
24062060:	2b00      	cmp	r3, #0
24062062:	f000 80a1 	beq.w	240621a8 <_vfiprintf_r+0x1f0>
24062066:	2300      	movs	r3, #0
24062068:	f04f 32ff 	mov.w	r2, #4294967295
2406206c:	e9cd 2305 	strd	r2, r3, [sp, #20]
24062070:	f10a 0a01 	add.w	sl, sl, #1
24062074:	9304      	str	r3, [sp, #16]
24062076:	9307      	str	r3, [sp, #28]
24062078:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
2406207c:	931a      	str	r3, [sp, #104]	; 0x68
2406207e:	4654      	mov	r4, sl
24062080:	2205      	movs	r2, #5
24062082:	f814 1b01 	ldrb.w	r1, [r4], #1
24062086:	4854      	ldr	r0, [pc, #336]	; (240621d8 <_vfiprintf_r+0x220>)
24062088:	f7ed ffda 	bl	24050040 <memchr>
2406208c:	9a04      	ldr	r2, [sp, #16]
2406208e:	b9d8      	cbnz	r0, 240620c8 <_vfiprintf_r+0x110>
24062090:	06d1      	lsls	r1, r2, #27
24062092:	bf44      	itt	mi
24062094:	2320      	movmi	r3, #32
24062096:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
2406209a:	0713      	lsls	r3, r2, #28
2406209c:	bf44      	itt	mi
2406209e:	232b      	movmi	r3, #43	; 0x2b
240620a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
240620a4:	f89a 3000 	ldrb.w	r3, [sl]
240620a8:	2b2a      	cmp	r3, #42	; 0x2a
240620aa:	d015      	beq.n	240620d8 <_vfiprintf_r+0x120>
240620ac:	9a07      	ldr	r2, [sp, #28]
240620ae:	4654      	mov	r4, sl
240620b0:	2000      	movs	r0, #0
240620b2:	f04f 0c0a 	mov.w	ip, #10
240620b6:	4621      	mov	r1, r4
240620b8:	f811 3b01 	ldrb.w	r3, [r1], #1
240620bc:	3b30      	subs	r3, #48	; 0x30
240620be:	2b09      	cmp	r3, #9
240620c0:	d94d      	bls.n	2406215e <_vfiprintf_r+0x1a6>
240620c2:	b1b0      	cbz	r0, 240620f2 <_vfiprintf_r+0x13a>
240620c4:	9207      	str	r2, [sp, #28]
240620c6:	e014      	b.n	240620f2 <_vfiprintf_r+0x13a>
240620c8:	eba0 0308 	sub.w	r3, r0, r8
240620cc:	fa09 f303 	lsl.w	r3, r9, r3
240620d0:	4313      	orrs	r3, r2
240620d2:	9304      	str	r3, [sp, #16]
240620d4:	46a2      	mov	sl, r4
240620d6:	e7d2      	b.n	2406207e <_vfiprintf_r+0xc6>
240620d8:	9b03      	ldr	r3, [sp, #12]
240620da:	1d19      	adds	r1, r3, #4
240620dc:	681b      	ldr	r3, [r3, #0]
240620de:	9103      	str	r1, [sp, #12]
240620e0:	2b00      	cmp	r3, #0
240620e2:	bfbb      	ittet	lt
240620e4:	425b      	neglt	r3, r3
240620e6:	f042 0202 	orrlt.w	r2, r2, #2
240620ea:	9307      	strge	r3, [sp, #28]
240620ec:	9307      	strlt	r3, [sp, #28]
240620ee:	bfb8      	it	lt
240620f0:	9204      	strlt	r2, [sp, #16]
240620f2:	7823      	ldrb	r3, [r4, #0]
240620f4:	2b2e      	cmp	r3, #46	; 0x2e
240620f6:	d10c      	bne.n	24062112 <_vfiprintf_r+0x15a>
240620f8:	7863      	ldrb	r3, [r4, #1]
240620fa:	2b2a      	cmp	r3, #42	; 0x2a
240620fc:	d134      	bne.n	24062168 <_vfiprintf_r+0x1b0>
240620fe:	9b03      	ldr	r3, [sp, #12]
24062100:	1d1a      	adds	r2, r3, #4
24062102:	681b      	ldr	r3, [r3, #0]
24062104:	9203      	str	r2, [sp, #12]
24062106:	2b00      	cmp	r3, #0
24062108:	bfb8      	it	lt
2406210a:	f04f 33ff 	movlt.w	r3, #4294967295
2406210e:	3402      	adds	r4, #2
24062110:	9305      	str	r3, [sp, #20]
24062112:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 240621e8 <_vfiprintf_r+0x230>
24062116:	7821      	ldrb	r1, [r4, #0]
24062118:	2203      	movs	r2, #3
2406211a:	4650      	mov	r0, sl
2406211c:	f7ed ff90 	bl	24050040 <memchr>
24062120:	b138      	cbz	r0, 24062132 <_vfiprintf_r+0x17a>
24062122:	9b04      	ldr	r3, [sp, #16]
24062124:	eba0 000a 	sub.w	r0, r0, sl
24062128:	2240      	movs	r2, #64	; 0x40
2406212a:	4082      	lsls	r2, r0
2406212c:	4313      	orrs	r3, r2
2406212e:	3401      	adds	r4, #1
24062130:	9304      	str	r3, [sp, #16]
24062132:	f814 1b01 	ldrb.w	r1, [r4], #1
24062136:	4829      	ldr	r0, [pc, #164]	; (240621dc <_vfiprintf_r+0x224>)
24062138:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
2406213c:	2206      	movs	r2, #6
2406213e:	f7ed ff7f 	bl	24050040 <memchr>
24062142:	2800      	cmp	r0, #0
24062144:	d03f      	beq.n	240621c6 <_vfiprintf_r+0x20e>
24062146:	4b26      	ldr	r3, [pc, #152]	; (240621e0 <_vfiprintf_r+0x228>)
24062148:	bb1b      	cbnz	r3, 24062192 <_vfiprintf_r+0x1da>
2406214a:	9b03      	ldr	r3, [sp, #12]
2406214c:	3307      	adds	r3, #7
2406214e:	f023 0307 	bic.w	r3, r3, #7
24062152:	3308      	adds	r3, #8
24062154:	9303      	str	r3, [sp, #12]
24062156:	9b09      	ldr	r3, [sp, #36]	; 0x24
24062158:	443b      	add	r3, r7
2406215a:	9309      	str	r3, [sp, #36]	; 0x24
2406215c:	e768      	b.n	24062030 <_vfiprintf_r+0x78>
2406215e:	fb0c 3202 	mla	r2, ip, r2, r3
24062162:	460c      	mov	r4, r1
24062164:	2001      	movs	r0, #1
24062166:	e7a6      	b.n	240620b6 <_vfiprintf_r+0xfe>
24062168:	2300      	movs	r3, #0
2406216a:	3401      	adds	r4, #1
2406216c:	9305      	str	r3, [sp, #20]
2406216e:	4619      	mov	r1, r3
24062170:	f04f 0c0a 	mov.w	ip, #10
24062174:	4620      	mov	r0, r4
24062176:	f810 2b01 	ldrb.w	r2, [r0], #1
2406217a:	3a30      	subs	r2, #48	; 0x30
2406217c:	2a09      	cmp	r2, #9
2406217e:	d903      	bls.n	24062188 <_vfiprintf_r+0x1d0>
24062180:	2b00      	cmp	r3, #0
24062182:	d0c6      	beq.n	24062112 <_vfiprintf_r+0x15a>
24062184:	9105      	str	r1, [sp, #20]
24062186:	e7c4      	b.n	24062112 <_vfiprintf_r+0x15a>
24062188:	fb0c 2101 	mla	r1, ip, r1, r2
2406218c:	4604      	mov	r4, r0
2406218e:	2301      	movs	r3, #1
24062190:	e7f0      	b.n	24062174 <_vfiprintf_r+0x1bc>
24062192:	ab03      	add	r3, sp, #12
24062194:	9300      	str	r3, [sp, #0]
24062196:	462a      	mov	r2, r5
24062198:	4b12      	ldr	r3, [pc, #72]	; (240621e4 <_vfiprintf_r+0x22c>)
2406219a:	a904      	add	r1, sp, #16
2406219c:	4630      	mov	r0, r6
2406219e:	f3af 8000 	nop.w
240621a2:	4607      	mov	r7, r0
240621a4:	1c78      	adds	r0, r7, #1
240621a6:	d1d6      	bne.n	24062156 <_vfiprintf_r+0x19e>
240621a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
240621aa:	07d9      	lsls	r1, r3, #31
240621ac:	d405      	bmi.n	240621ba <_vfiprintf_r+0x202>
240621ae:	89ab      	ldrh	r3, [r5, #12]
240621b0:	059a      	lsls	r2, r3, #22
240621b2:	d402      	bmi.n	240621ba <_vfiprintf_r+0x202>
240621b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
240621b6:	f7ff fc67 	bl	24061a88 <__retarget_lock_release_recursive>
240621ba:	89ab      	ldrh	r3, [r5, #12]
240621bc:	065b      	lsls	r3, r3, #25
240621be:	f53f af1d 	bmi.w	24061ffc <_vfiprintf_r+0x44>
240621c2:	9809      	ldr	r0, [sp, #36]	; 0x24
240621c4:	e71c      	b.n	24062000 <_vfiprintf_r+0x48>
240621c6:	ab03      	add	r3, sp, #12
240621c8:	9300      	str	r3, [sp, #0]
240621ca:	462a      	mov	r2, r5
240621cc:	4b05      	ldr	r3, [pc, #20]	; (240621e4 <_vfiprintf_r+0x22c>)
240621ce:	a904      	add	r1, sp, #16
240621d0:	4630      	mov	r0, r6
240621d2:	f000 f879 	bl	240622c8 <_printf_i>
240621d6:	e7e4      	b.n	240621a2 <_vfiprintf_r+0x1ea>
240621d8:	240642bb 	.word	0x240642bb
240621dc:	240642c5 	.word	0x240642c5
240621e0:	00000000 	.word	0x00000000
240621e4:	24061f93 	.word	0x24061f93
240621e8:	240642c1 	.word	0x240642c1

240621ec <_printf_common>:
240621ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
240621f0:	4616      	mov	r6, r2
240621f2:	4699      	mov	r9, r3
240621f4:	688a      	ldr	r2, [r1, #8]
240621f6:	690b      	ldr	r3, [r1, #16]
240621f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
240621fc:	4293      	cmp	r3, r2
240621fe:	bfb8      	it	lt
24062200:	4613      	movlt	r3, r2
24062202:	6033      	str	r3, [r6, #0]
24062204:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
24062208:	4607      	mov	r7, r0
2406220a:	460c      	mov	r4, r1
2406220c:	b10a      	cbz	r2, 24062212 <_printf_common+0x26>
2406220e:	3301      	adds	r3, #1
24062210:	6033      	str	r3, [r6, #0]
24062212:	6823      	ldr	r3, [r4, #0]
24062214:	0699      	lsls	r1, r3, #26
24062216:	bf42      	ittt	mi
24062218:	6833      	ldrmi	r3, [r6, #0]
2406221a:	3302      	addmi	r3, #2
2406221c:	6033      	strmi	r3, [r6, #0]
2406221e:	6825      	ldr	r5, [r4, #0]
24062220:	f015 0506 	ands.w	r5, r5, #6
24062224:	d106      	bne.n	24062234 <_printf_common+0x48>
24062226:	f104 0a19 	add.w	sl, r4, #25
2406222a:	68e3      	ldr	r3, [r4, #12]
2406222c:	6832      	ldr	r2, [r6, #0]
2406222e:	1a9b      	subs	r3, r3, r2
24062230:	42ab      	cmp	r3, r5
24062232:	dc26      	bgt.n	24062282 <_printf_common+0x96>
24062234:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
24062238:	1e13      	subs	r3, r2, #0
2406223a:	6822      	ldr	r2, [r4, #0]
2406223c:	bf18      	it	ne
2406223e:	2301      	movne	r3, #1
24062240:	0692      	lsls	r2, r2, #26
24062242:	d42b      	bmi.n	2406229c <_printf_common+0xb0>
24062244:	f104 0243 	add.w	r2, r4, #67	; 0x43
24062248:	4649      	mov	r1, r9
2406224a:	4638      	mov	r0, r7
2406224c:	47c0      	blx	r8
2406224e:	3001      	adds	r0, #1
24062250:	d01e      	beq.n	24062290 <_printf_common+0xa4>
24062252:	6823      	ldr	r3, [r4, #0]
24062254:	6922      	ldr	r2, [r4, #16]
24062256:	f003 0306 	and.w	r3, r3, #6
2406225a:	2b04      	cmp	r3, #4
2406225c:	bf02      	ittt	eq
2406225e:	68e5      	ldreq	r5, [r4, #12]
24062260:	6833      	ldreq	r3, [r6, #0]
24062262:	1aed      	subeq	r5, r5, r3
24062264:	68a3      	ldr	r3, [r4, #8]
24062266:	bf0c      	ite	eq
24062268:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
2406226c:	2500      	movne	r5, #0
2406226e:	4293      	cmp	r3, r2
24062270:	bfc4      	itt	gt
24062272:	1a9b      	subgt	r3, r3, r2
24062274:	18ed      	addgt	r5, r5, r3
24062276:	2600      	movs	r6, #0
24062278:	341a      	adds	r4, #26
2406227a:	42b5      	cmp	r5, r6
2406227c:	d11a      	bne.n	240622b4 <_printf_common+0xc8>
2406227e:	2000      	movs	r0, #0
24062280:	e008      	b.n	24062294 <_printf_common+0xa8>
24062282:	2301      	movs	r3, #1
24062284:	4652      	mov	r2, sl
24062286:	4649      	mov	r1, r9
24062288:	4638      	mov	r0, r7
2406228a:	47c0      	blx	r8
2406228c:	3001      	adds	r0, #1
2406228e:	d103      	bne.n	24062298 <_printf_common+0xac>
24062290:	f04f 30ff 	mov.w	r0, #4294967295
24062294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
24062298:	3501      	adds	r5, #1
2406229a:	e7c6      	b.n	2406222a <_printf_common+0x3e>
2406229c:	18e1      	adds	r1, r4, r3
2406229e:	1c5a      	adds	r2, r3, #1
240622a0:	2030      	movs	r0, #48	; 0x30
240622a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
240622a6:	4422      	add	r2, r4
240622a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
240622ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
240622b0:	3302      	adds	r3, #2
240622b2:	e7c7      	b.n	24062244 <_printf_common+0x58>
240622b4:	2301      	movs	r3, #1
240622b6:	4622      	mov	r2, r4
240622b8:	4649      	mov	r1, r9
240622ba:	4638      	mov	r0, r7
240622bc:	47c0      	blx	r8
240622be:	3001      	adds	r0, #1
240622c0:	d0e6      	beq.n	24062290 <_printf_common+0xa4>
240622c2:	3601      	adds	r6, #1
240622c4:	e7d9      	b.n	2406227a <_printf_common+0x8e>
	...

240622c8 <_printf_i>:
240622c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
240622cc:	7e0f      	ldrb	r7, [r1, #24]
240622ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
240622d0:	2f78      	cmp	r7, #120	; 0x78
240622d2:	4691      	mov	r9, r2
240622d4:	4680      	mov	r8, r0
240622d6:	460c      	mov	r4, r1
240622d8:	469a      	mov	sl, r3
240622da:	f101 0243 	add.w	r2, r1, #67	; 0x43
240622de:	d807      	bhi.n	240622f0 <_printf_i+0x28>
240622e0:	2f62      	cmp	r7, #98	; 0x62
240622e2:	d80a      	bhi.n	240622fa <_printf_i+0x32>
240622e4:	2f00      	cmp	r7, #0
240622e6:	f000 80d4 	beq.w	24062492 <_printf_i+0x1ca>
240622ea:	2f58      	cmp	r7, #88	; 0x58
240622ec:	f000 80c0 	beq.w	24062470 <_printf_i+0x1a8>
240622f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
240622f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
240622f8:	e03a      	b.n	24062370 <_printf_i+0xa8>
240622fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
240622fe:	2b15      	cmp	r3, #21
24062300:	d8f6      	bhi.n	240622f0 <_printf_i+0x28>
24062302:	a101      	add	r1, pc, #4	; (adr r1, 24062308 <_printf_i+0x40>)
24062304:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
24062308:	24062361 	.word	0x24062361
2406230c:	24062375 	.word	0x24062375
24062310:	240622f1 	.word	0x240622f1
24062314:	240622f1 	.word	0x240622f1
24062318:	240622f1 	.word	0x240622f1
2406231c:	240622f1 	.word	0x240622f1
24062320:	24062375 	.word	0x24062375
24062324:	240622f1 	.word	0x240622f1
24062328:	240622f1 	.word	0x240622f1
2406232c:	240622f1 	.word	0x240622f1
24062330:	240622f1 	.word	0x240622f1
24062334:	24062479 	.word	0x24062479
24062338:	240623a1 	.word	0x240623a1
2406233c:	24062433 	.word	0x24062433
24062340:	240622f1 	.word	0x240622f1
24062344:	240622f1 	.word	0x240622f1
24062348:	2406249b 	.word	0x2406249b
2406234c:	240622f1 	.word	0x240622f1
24062350:	240623a1 	.word	0x240623a1
24062354:	240622f1 	.word	0x240622f1
24062358:	240622f1 	.word	0x240622f1
2406235c:	2406243b 	.word	0x2406243b
24062360:	682b      	ldr	r3, [r5, #0]
24062362:	1d1a      	adds	r2, r3, #4
24062364:	681b      	ldr	r3, [r3, #0]
24062366:	602a      	str	r2, [r5, #0]
24062368:	f104 0542 	add.w	r5, r4, #66	; 0x42
2406236c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
24062370:	2301      	movs	r3, #1
24062372:	e09f      	b.n	240624b4 <_printf_i+0x1ec>
24062374:	6820      	ldr	r0, [r4, #0]
24062376:	682b      	ldr	r3, [r5, #0]
24062378:	0607      	lsls	r7, r0, #24
2406237a:	f103 0104 	add.w	r1, r3, #4
2406237e:	6029      	str	r1, [r5, #0]
24062380:	d501      	bpl.n	24062386 <_printf_i+0xbe>
24062382:	681e      	ldr	r6, [r3, #0]
24062384:	e003      	b.n	2406238e <_printf_i+0xc6>
24062386:	0646      	lsls	r6, r0, #25
24062388:	d5fb      	bpl.n	24062382 <_printf_i+0xba>
2406238a:	f9b3 6000 	ldrsh.w	r6, [r3]
2406238e:	2e00      	cmp	r6, #0
24062390:	da03      	bge.n	2406239a <_printf_i+0xd2>
24062392:	232d      	movs	r3, #45	; 0x2d
24062394:	4276      	negs	r6, r6
24062396:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
2406239a:	485a      	ldr	r0, [pc, #360]	; (24062504 <_printf_i+0x23c>)
2406239c:	230a      	movs	r3, #10
2406239e:	e012      	b.n	240623c6 <_printf_i+0xfe>
240623a0:	682b      	ldr	r3, [r5, #0]
240623a2:	6820      	ldr	r0, [r4, #0]
240623a4:	1d19      	adds	r1, r3, #4
240623a6:	6029      	str	r1, [r5, #0]
240623a8:	0605      	lsls	r5, r0, #24
240623aa:	d501      	bpl.n	240623b0 <_printf_i+0xe8>
240623ac:	681e      	ldr	r6, [r3, #0]
240623ae:	e002      	b.n	240623b6 <_printf_i+0xee>
240623b0:	0641      	lsls	r1, r0, #25
240623b2:	d5fb      	bpl.n	240623ac <_printf_i+0xe4>
240623b4:	881e      	ldrh	r6, [r3, #0]
240623b6:	4853      	ldr	r0, [pc, #332]	; (24062504 <_printf_i+0x23c>)
240623b8:	2f6f      	cmp	r7, #111	; 0x6f
240623ba:	bf0c      	ite	eq
240623bc:	2308      	moveq	r3, #8
240623be:	230a      	movne	r3, #10
240623c0:	2100      	movs	r1, #0
240623c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
240623c6:	6865      	ldr	r5, [r4, #4]
240623c8:	60a5      	str	r5, [r4, #8]
240623ca:	2d00      	cmp	r5, #0
240623cc:	bfa2      	ittt	ge
240623ce:	6821      	ldrge	r1, [r4, #0]
240623d0:	f021 0104 	bicge.w	r1, r1, #4
240623d4:	6021      	strge	r1, [r4, #0]
240623d6:	b90e      	cbnz	r6, 240623dc <_printf_i+0x114>
240623d8:	2d00      	cmp	r5, #0
240623da:	d04b      	beq.n	24062474 <_printf_i+0x1ac>
240623dc:	4615      	mov	r5, r2
240623de:	fbb6 f1f3 	udiv	r1, r6, r3
240623e2:	fb03 6711 	mls	r7, r3, r1, r6
240623e6:	5dc7      	ldrb	r7, [r0, r7]
240623e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
240623ec:	4637      	mov	r7, r6
240623ee:	42bb      	cmp	r3, r7
240623f0:	460e      	mov	r6, r1
240623f2:	d9f4      	bls.n	240623de <_printf_i+0x116>
240623f4:	2b08      	cmp	r3, #8
240623f6:	d10b      	bne.n	24062410 <_printf_i+0x148>
240623f8:	6823      	ldr	r3, [r4, #0]
240623fa:	07de      	lsls	r6, r3, #31
240623fc:	d508      	bpl.n	24062410 <_printf_i+0x148>
240623fe:	6923      	ldr	r3, [r4, #16]
24062400:	6861      	ldr	r1, [r4, #4]
24062402:	4299      	cmp	r1, r3
24062404:	bfde      	ittt	le
24062406:	2330      	movle	r3, #48	; 0x30
24062408:	f805 3c01 	strble.w	r3, [r5, #-1]
2406240c:	f105 35ff 	addle.w	r5, r5, #4294967295
24062410:	1b52      	subs	r2, r2, r5
24062412:	6122      	str	r2, [r4, #16]
24062414:	f8cd a000 	str.w	sl, [sp]
24062418:	464b      	mov	r3, r9
2406241a:	aa03      	add	r2, sp, #12
2406241c:	4621      	mov	r1, r4
2406241e:	4640      	mov	r0, r8
24062420:	f7ff fee4 	bl	240621ec <_printf_common>
24062424:	3001      	adds	r0, #1
24062426:	d14a      	bne.n	240624be <_printf_i+0x1f6>
24062428:	f04f 30ff 	mov.w	r0, #4294967295
2406242c:	b004      	add	sp, #16
2406242e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
24062432:	6823      	ldr	r3, [r4, #0]
24062434:	f043 0320 	orr.w	r3, r3, #32
24062438:	6023      	str	r3, [r4, #0]
2406243a:	4833      	ldr	r0, [pc, #204]	; (24062508 <_printf_i+0x240>)
2406243c:	2778      	movs	r7, #120	; 0x78
2406243e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
24062442:	6823      	ldr	r3, [r4, #0]
24062444:	6829      	ldr	r1, [r5, #0]
24062446:	061f      	lsls	r7, r3, #24
24062448:	f851 6b04 	ldr.w	r6, [r1], #4
2406244c:	d402      	bmi.n	24062454 <_printf_i+0x18c>
2406244e:	065f      	lsls	r7, r3, #25
24062450:	bf48      	it	mi
24062452:	b2b6      	uxthmi	r6, r6
24062454:	07df      	lsls	r7, r3, #31
24062456:	bf48      	it	mi
24062458:	f043 0320 	orrmi.w	r3, r3, #32
2406245c:	6029      	str	r1, [r5, #0]
2406245e:	bf48      	it	mi
24062460:	6023      	strmi	r3, [r4, #0]
24062462:	b91e      	cbnz	r6, 2406246c <_printf_i+0x1a4>
24062464:	6823      	ldr	r3, [r4, #0]
24062466:	f023 0320 	bic.w	r3, r3, #32
2406246a:	6023      	str	r3, [r4, #0]
2406246c:	2310      	movs	r3, #16
2406246e:	e7a7      	b.n	240623c0 <_printf_i+0xf8>
24062470:	4824      	ldr	r0, [pc, #144]	; (24062504 <_printf_i+0x23c>)
24062472:	e7e4      	b.n	2406243e <_printf_i+0x176>
24062474:	4615      	mov	r5, r2
24062476:	e7bd      	b.n	240623f4 <_printf_i+0x12c>
24062478:	682b      	ldr	r3, [r5, #0]
2406247a:	6826      	ldr	r6, [r4, #0]
2406247c:	6961      	ldr	r1, [r4, #20]
2406247e:	1d18      	adds	r0, r3, #4
24062480:	6028      	str	r0, [r5, #0]
24062482:	0635      	lsls	r5, r6, #24
24062484:	681b      	ldr	r3, [r3, #0]
24062486:	d501      	bpl.n	2406248c <_printf_i+0x1c4>
24062488:	6019      	str	r1, [r3, #0]
2406248a:	e002      	b.n	24062492 <_printf_i+0x1ca>
2406248c:	0670      	lsls	r0, r6, #25
2406248e:	d5fb      	bpl.n	24062488 <_printf_i+0x1c0>
24062490:	8019      	strh	r1, [r3, #0]
24062492:	2300      	movs	r3, #0
24062494:	6123      	str	r3, [r4, #16]
24062496:	4615      	mov	r5, r2
24062498:	e7bc      	b.n	24062414 <_printf_i+0x14c>
2406249a:	682b      	ldr	r3, [r5, #0]
2406249c:	1d1a      	adds	r2, r3, #4
2406249e:	602a      	str	r2, [r5, #0]
240624a0:	681d      	ldr	r5, [r3, #0]
240624a2:	6862      	ldr	r2, [r4, #4]
240624a4:	2100      	movs	r1, #0
240624a6:	4628      	mov	r0, r5
240624a8:	f7ed fdca 	bl	24050040 <memchr>
240624ac:	b108      	cbz	r0, 240624b2 <_printf_i+0x1ea>
240624ae:	1b40      	subs	r0, r0, r5
240624b0:	6060      	str	r0, [r4, #4]
240624b2:	6863      	ldr	r3, [r4, #4]
240624b4:	6123      	str	r3, [r4, #16]
240624b6:	2300      	movs	r3, #0
240624b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
240624bc:	e7aa      	b.n	24062414 <_printf_i+0x14c>
240624be:	6923      	ldr	r3, [r4, #16]
240624c0:	462a      	mov	r2, r5
240624c2:	4649      	mov	r1, r9
240624c4:	4640      	mov	r0, r8
240624c6:	47d0      	blx	sl
240624c8:	3001      	adds	r0, #1
240624ca:	d0ad      	beq.n	24062428 <_printf_i+0x160>
240624cc:	6823      	ldr	r3, [r4, #0]
240624ce:	079b      	lsls	r3, r3, #30
240624d0:	d413      	bmi.n	240624fa <_printf_i+0x232>
240624d2:	68e0      	ldr	r0, [r4, #12]
240624d4:	9b03      	ldr	r3, [sp, #12]
240624d6:	4298      	cmp	r0, r3
240624d8:	bfb8      	it	lt
240624da:	4618      	movlt	r0, r3
240624dc:	e7a6      	b.n	2406242c <_printf_i+0x164>
240624de:	2301      	movs	r3, #1
240624e0:	4632      	mov	r2, r6
240624e2:	4649      	mov	r1, r9
240624e4:	4640      	mov	r0, r8
240624e6:	47d0      	blx	sl
240624e8:	3001      	adds	r0, #1
240624ea:	d09d      	beq.n	24062428 <_printf_i+0x160>
240624ec:	3501      	adds	r5, #1
240624ee:	68e3      	ldr	r3, [r4, #12]
240624f0:	9903      	ldr	r1, [sp, #12]
240624f2:	1a5b      	subs	r3, r3, r1
240624f4:	42ab      	cmp	r3, r5
240624f6:	dcf2      	bgt.n	240624de <_printf_i+0x216>
240624f8:	e7eb      	b.n	240624d2 <_printf_i+0x20a>
240624fa:	2500      	movs	r5, #0
240624fc:	f104 0619 	add.w	r6, r4, #25
24062500:	e7f5      	b.n	240624ee <_printf_i+0x226>
24062502:	bf00      	nop
24062504:	240642cc 	.word	0x240642cc
24062508:	240642dd 	.word	0x240642dd

2406250c <__sflush_r>:
2406250c:	898a      	ldrh	r2, [r1, #12]
2406250e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
24062512:	4605      	mov	r5, r0
24062514:	0710      	lsls	r0, r2, #28
24062516:	460c      	mov	r4, r1
24062518:	d458      	bmi.n	240625cc <__sflush_r+0xc0>
2406251a:	684b      	ldr	r3, [r1, #4]
2406251c:	2b00      	cmp	r3, #0
2406251e:	dc05      	bgt.n	2406252c <__sflush_r+0x20>
24062520:	6c0b      	ldr	r3, [r1, #64]	; 0x40
24062522:	2b00      	cmp	r3, #0
24062524:	dc02      	bgt.n	2406252c <__sflush_r+0x20>
24062526:	2000      	movs	r0, #0
24062528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
2406252c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
2406252e:	2e00      	cmp	r6, #0
24062530:	d0f9      	beq.n	24062526 <__sflush_r+0x1a>
24062532:	2300      	movs	r3, #0
24062534:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
24062538:	682f      	ldr	r7, [r5, #0]
2406253a:	6a21      	ldr	r1, [r4, #32]
2406253c:	602b      	str	r3, [r5, #0]
2406253e:	d032      	beq.n	240625a6 <__sflush_r+0x9a>
24062540:	6d60      	ldr	r0, [r4, #84]	; 0x54
24062542:	89a3      	ldrh	r3, [r4, #12]
24062544:	075a      	lsls	r2, r3, #29
24062546:	d505      	bpl.n	24062554 <__sflush_r+0x48>
24062548:	6863      	ldr	r3, [r4, #4]
2406254a:	1ac0      	subs	r0, r0, r3
2406254c:	6b63      	ldr	r3, [r4, #52]	; 0x34
2406254e:	b10b      	cbz	r3, 24062554 <__sflush_r+0x48>
24062550:	6c23      	ldr	r3, [r4, #64]	; 0x40
24062552:	1ac0      	subs	r0, r0, r3
24062554:	2300      	movs	r3, #0
24062556:	4602      	mov	r2, r0
24062558:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
2406255a:	6a21      	ldr	r1, [r4, #32]
2406255c:	4628      	mov	r0, r5
2406255e:	47b0      	blx	r6
24062560:	1c43      	adds	r3, r0, #1
24062562:	89a3      	ldrh	r3, [r4, #12]
24062564:	d106      	bne.n	24062574 <__sflush_r+0x68>
24062566:	6829      	ldr	r1, [r5, #0]
24062568:	291d      	cmp	r1, #29
2406256a:	d82b      	bhi.n	240625c4 <__sflush_r+0xb8>
2406256c:	4a29      	ldr	r2, [pc, #164]	; (24062614 <__sflush_r+0x108>)
2406256e:	410a      	asrs	r2, r1
24062570:	07d6      	lsls	r6, r2, #31
24062572:	d427      	bmi.n	240625c4 <__sflush_r+0xb8>
24062574:	2200      	movs	r2, #0
24062576:	6062      	str	r2, [r4, #4]
24062578:	04d9      	lsls	r1, r3, #19
2406257a:	6922      	ldr	r2, [r4, #16]
2406257c:	6022      	str	r2, [r4, #0]
2406257e:	d504      	bpl.n	2406258a <__sflush_r+0x7e>
24062580:	1c42      	adds	r2, r0, #1
24062582:	d101      	bne.n	24062588 <__sflush_r+0x7c>
24062584:	682b      	ldr	r3, [r5, #0]
24062586:	b903      	cbnz	r3, 2406258a <__sflush_r+0x7e>
24062588:	6560      	str	r0, [r4, #84]	; 0x54
2406258a:	6b61      	ldr	r1, [r4, #52]	; 0x34
2406258c:	602f      	str	r7, [r5, #0]
2406258e:	2900      	cmp	r1, #0
24062590:	d0c9      	beq.n	24062526 <__sflush_r+0x1a>
24062592:	f104 0344 	add.w	r3, r4, #68	; 0x44
24062596:	4299      	cmp	r1, r3
24062598:	d002      	beq.n	240625a0 <__sflush_r+0x94>
2406259a:	4628      	mov	r0, r5
2406259c:	f7ff fa8a 	bl	24061ab4 <_free_r>
240625a0:	2000      	movs	r0, #0
240625a2:	6360      	str	r0, [r4, #52]	; 0x34
240625a4:	e7c0      	b.n	24062528 <__sflush_r+0x1c>
240625a6:	2301      	movs	r3, #1
240625a8:	4628      	mov	r0, r5
240625aa:	47b0      	blx	r6
240625ac:	1c41      	adds	r1, r0, #1
240625ae:	d1c8      	bne.n	24062542 <__sflush_r+0x36>
240625b0:	682b      	ldr	r3, [r5, #0]
240625b2:	2b00      	cmp	r3, #0
240625b4:	d0c5      	beq.n	24062542 <__sflush_r+0x36>
240625b6:	2b1d      	cmp	r3, #29
240625b8:	d001      	beq.n	240625be <__sflush_r+0xb2>
240625ba:	2b16      	cmp	r3, #22
240625bc:	d101      	bne.n	240625c2 <__sflush_r+0xb6>
240625be:	602f      	str	r7, [r5, #0]
240625c0:	e7b1      	b.n	24062526 <__sflush_r+0x1a>
240625c2:	89a3      	ldrh	r3, [r4, #12]
240625c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
240625c8:	81a3      	strh	r3, [r4, #12]
240625ca:	e7ad      	b.n	24062528 <__sflush_r+0x1c>
240625cc:	690f      	ldr	r7, [r1, #16]
240625ce:	2f00      	cmp	r7, #0
240625d0:	d0a9      	beq.n	24062526 <__sflush_r+0x1a>
240625d2:	0793      	lsls	r3, r2, #30
240625d4:	680e      	ldr	r6, [r1, #0]
240625d6:	bf08      	it	eq
240625d8:	694b      	ldreq	r3, [r1, #20]
240625da:	600f      	str	r7, [r1, #0]
240625dc:	bf18      	it	ne
240625de:	2300      	movne	r3, #0
240625e0:	eba6 0807 	sub.w	r8, r6, r7
240625e4:	608b      	str	r3, [r1, #8]
240625e6:	f1b8 0f00 	cmp.w	r8, #0
240625ea:	dd9c      	ble.n	24062526 <__sflush_r+0x1a>
240625ec:	6a21      	ldr	r1, [r4, #32]
240625ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
240625f0:	4643      	mov	r3, r8
240625f2:	463a      	mov	r2, r7
240625f4:	4628      	mov	r0, r5
240625f6:	47b0      	blx	r6
240625f8:	2800      	cmp	r0, #0
240625fa:	dc06      	bgt.n	2406260a <__sflush_r+0xfe>
240625fc:	89a3      	ldrh	r3, [r4, #12]
240625fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
24062602:	81a3      	strh	r3, [r4, #12]
24062604:	f04f 30ff 	mov.w	r0, #4294967295
24062608:	e78e      	b.n	24062528 <__sflush_r+0x1c>
2406260a:	4407      	add	r7, r0
2406260c:	eba8 0800 	sub.w	r8, r8, r0
24062610:	e7e9      	b.n	240625e6 <__sflush_r+0xda>
24062612:	bf00      	nop
24062614:	dfbffffe 	.word	0xdfbffffe

24062618 <_fflush_r>:
24062618:	b538      	push	{r3, r4, r5, lr}
2406261a:	690b      	ldr	r3, [r1, #16]
2406261c:	4605      	mov	r5, r0
2406261e:	460c      	mov	r4, r1
24062620:	b913      	cbnz	r3, 24062628 <_fflush_r+0x10>
24062622:	2500      	movs	r5, #0
24062624:	4628      	mov	r0, r5
24062626:	bd38      	pop	{r3, r4, r5, pc}
24062628:	b118      	cbz	r0, 24062632 <_fflush_r+0x1a>
2406262a:	6a03      	ldr	r3, [r0, #32]
2406262c:	b90b      	cbnz	r3, 24062632 <_fflush_r+0x1a>
2406262e:	f7ff f803 	bl	24061638 <__sinit>
24062632:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
24062636:	2b00      	cmp	r3, #0
24062638:	d0f3      	beq.n	24062622 <_fflush_r+0xa>
2406263a:	6e62      	ldr	r2, [r4, #100]	; 0x64
2406263c:	07d0      	lsls	r0, r2, #31
2406263e:	d404      	bmi.n	2406264a <_fflush_r+0x32>
24062640:	0599      	lsls	r1, r3, #22
24062642:	d402      	bmi.n	2406264a <_fflush_r+0x32>
24062644:	6da0      	ldr	r0, [r4, #88]	; 0x58
24062646:	f7ff fa1e 	bl	24061a86 <__retarget_lock_acquire_recursive>
2406264a:	4628      	mov	r0, r5
2406264c:	4621      	mov	r1, r4
2406264e:	f7ff ff5d 	bl	2406250c <__sflush_r>
24062652:	6e63      	ldr	r3, [r4, #100]	; 0x64
24062654:	07da      	lsls	r2, r3, #31
24062656:	4605      	mov	r5, r0
24062658:	d4e4      	bmi.n	24062624 <_fflush_r+0xc>
2406265a:	89a3      	ldrh	r3, [r4, #12]
2406265c:	059b      	lsls	r3, r3, #22
2406265e:	d4e1      	bmi.n	24062624 <_fflush_r+0xc>
24062660:	6da0      	ldr	r0, [r4, #88]	; 0x58
24062662:	f7ff fa11 	bl	24061a88 <__retarget_lock_release_recursive>
24062666:	e7dd      	b.n	24062624 <_fflush_r+0xc>

24062668 <__swhatbuf_r>:
24062668:	b570      	push	{r4, r5, r6, lr}
2406266a:	460c      	mov	r4, r1
2406266c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
24062670:	2900      	cmp	r1, #0
24062672:	b096      	sub	sp, #88	; 0x58
24062674:	4615      	mov	r5, r2
24062676:	461e      	mov	r6, r3
24062678:	da0d      	bge.n	24062696 <__swhatbuf_r+0x2e>
2406267a:	89a3      	ldrh	r3, [r4, #12]
2406267c:	f013 0f80 	tst.w	r3, #128	; 0x80
24062680:	f04f 0100 	mov.w	r1, #0
24062684:	bf0c      	ite	eq
24062686:	f44f 6380 	moveq.w	r3, #1024	; 0x400
2406268a:	2340      	movne	r3, #64	; 0x40
2406268c:	2000      	movs	r0, #0
2406268e:	6031      	str	r1, [r6, #0]
24062690:	602b      	str	r3, [r5, #0]
24062692:	b016      	add	sp, #88	; 0x58
24062694:	bd70      	pop	{r4, r5, r6, pc}
24062696:	466a      	mov	r2, sp
24062698:	f000 f892 	bl	240627c0 <_fstat_r>
2406269c:	2800      	cmp	r0, #0
2406269e:	dbec      	blt.n	2406267a <__swhatbuf_r+0x12>
240626a0:	9901      	ldr	r1, [sp, #4]
240626a2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
240626a6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
240626aa:	4259      	negs	r1, r3
240626ac:	4159      	adcs	r1, r3
240626ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
240626b2:	e7eb      	b.n	2406268c <__swhatbuf_r+0x24>

240626b4 <__smakebuf_r>:
240626b4:	898b      	ldrh	r3, [r1, #12]
240626b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
240626b8:	079d      	lsls	r5, r3, #30
240626ba:	4606      	mov	r6, r0
240626bc:	460c      	mov	r4, r1
240626be:	d507      	bpl.n	240626d0 <__smakebuf_r+0x1c>
240626c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
240626c4:	6023      	str	r3, [r4, #0]
240626c6:	6123      	str	r3, [r4, #16]
240626c8:	2301      	movs	r3, #1
240626ca:	6163      	str	r3, [r4, #20]
240626cc:	b002      	add	sp, #8
240626ce:	bd70      	pop	{r4, r5, r6, pc}
240626d0:	ab01      	add	r3, sp, #4
240626d2:	466a      	mov	r2, sp
240626d4:	f7ff ffc8 	bl	24062668 <__swhatbuf_r>
240626d8:	9900      	ldr	r1, [sp, #0]
240626da:	4605      	mov	r5, r0
240626dc:	4630      	mov	r0, r6
240626de:	f7ff fa5d 	bl	24061b9c <_malloc_r>
240626e2:	b948      	cbnz	r0, 240626f8 <__smakebuf_r+0x44>
240626e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
240626e8:	059a      	lsls	r2, r3, #22
240626ea:	d4ef      	bmi.n	240626cc <__smakebuf_r+0x18>
240626ec:	f023 0303 	bic.w	r3, r3, #3
240626f0:	f043 0302 	orr.w	r3, r3, #2
240626f4:	81a3      	strh	r3, [r4, #12]
240626f6:	e7e3      	b.n	240626c0 <__smakebuf_r+0xc>
240626f8:	89a3      	ldrh	r3, [r4, #12]
240626fa:	6020      	str	r0, [r4, #0]
240626fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
24062700:	81a3      	strh	r3, [r4, #12]
24062702:	9b00      	ldr	r3, [sp, #0]
24062704:	6163      	str	r3, [r4, #20]
24062706:	9b01      	ldr	r3, [sp, #4]
24062708:	6120      	str	r0, [r4, #16]
2406270a:	b15b      	cbz	r3, 24062724 <__smakebuf_r+0x70>
2406270c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
24062710:	4630      	mov	r0, r6
24062712:	f000 f867 	bl	240627e4 <_isatty_r>
24062716:	b128      	cbz	r0, 24062724 <__smakebuf_r+0x70>
24062718:	89a3      	ldrh	r3, [r4, #12]
2406271a:	f023 0303 	bic.w	r3, r3, #3
2406271e:	f043 0301 	orr.w	r3, r3, #1
24062722:	81a3      	strh	r3, [r4, #12]
24062724:	89a3      	ldrh	r3, [r4, #12]
24062726:	431d      	orrs	r5, r3
24062728:	81a5      	strh	r5, [r4, #12]
2406272a:	e7cf      	b.n	240626cc <__smakebuf_r+0x18>

2406272c <memmove>:
2406272c:	4288      	cmp	r0, r1
2406272e:	b510      	push	{r4, lr}
24062730:	eb01 0402 	add.w	r4, r1, r2
24062734:	d902      	bls.n	2406273c <memmove+0x10>
24062736:	4284      	cmp	r4, r0
24062738:	4623      	mov	r3, r4
2406273a:	d807      	bhi.n	2406274c <memmove+0x20>
2406273c:	1e43      	subs	r3, r0, #1
2406273e:	42a1      	cmp	r1, r4
24062740:	d008      	beq.n	24062754 <memmove+0x28>
24062742:	f811 2b01 	ldrb.w	r2, [r1], #1
24062746:	f803 2f01 	strb.w	r2, [r3, #1]!
2406274a:	e7f8      	b.n	2406273e <memmove+0x12>
2406274c:	4402      	add	r2, r0
2406274e:	4601      	mov	r1, r0
24062750:	428a      	cmp	r2, r1
24062752:	d100      	bne.n	24062756 <memmove+0x2a>
24062754:	bd10      	pop	{r4, pc}
24062756:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
2406275a:	f802 4d01 	strb.w	r4, [r2, #-1]!
2406275e:	e7f7      	b.n	24062750 <memmove+0x24>

24062760 <_raise_r>:
24062760:	291f      	cmp	r1, #31
24062762:	b538      	push	{r3, r4, r5, lr}
24062764:	4604      	mov	r4, r0
24062766:	460d      	mov	r5, r1
24062768:	d904      	bls.n	24062774 <_raise_r+0x14>
2406276a:	2316      	movs	r3, #22
2406276c:	6003      	str	r3, [r0, #0]
2406276e:	f04f 30ff 	mov.w	r0, #4294967295
24062772:	bd38      	pop	{r3, r4, r5, pc}
24062774:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
24062776:	b112      	cbz	r2, 2406277e <_raise_r+0x1e>
24062778:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
2406277c:	b94b      	cbnz	r3, 24062792 <_raise_r+0x32>
2406277e:	4620      	mov	r0, r4
24062780:	f000 f852 	bl	24062828 <_getpid_r>
24062784:	462a      	mov	r2, r5
24062786:	4601      	mov	r1, r0
24062788:	4620      	mov	r0, r4
2406278a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
2406278e:	f000 b839 	b.w	24062804 <_kill_r>
24062792:	2b01      	cmp	r3, #1
24062794:	d00a      	beq.n	240627ac <_raise_r+0x4c>
24062796:	1c59      	adds	r1, r3, #1
24062798:	d103      	bne.n	240627a2 <_raise_r+0x42>
2406279a:	2316      	movs	r3, #22
2406279c:	6003      	str	r3, [r0, #0]
2406279e:	2001      	movs	r0, #1
240627a0:	e7e7      	b.n	24062772 <_raise_r+0x12>
240627a2:	2400      	movs	r4, #0
240627a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
240627a8:	4628      	mov	r0, r5
240627aa:	4798      	blx	r3
240627ac:	2000      	movs	r0, #0
240627ae:	e7e0      	b.n	24062772 <_raise_r+0x12>

240627b0 <raise>:
240627b0:	4b02      	ldr	r3, [pc, #8]	; (240627bc <raise+0xc>)
240627b2:	4601      	mov	r1, r0
240627b4:	6818      	ldr	r0, [r3, #0]
240627b6:	f7ff bfd3 	b.w	24062760 <_raise_r>
240627ba:	bf00      	nop
240627bc:	200000ac 	.word	0x200000ac

240627c0 <_fstat_r>:
240627c0:	b538      	push	{r3, r4, r5, lr}
240627c2:	4d07      	ldr	r5, [pc, #28]	; (240627e0 <_fstat_r+0x20>)
240627c4:	2300      	movs	r3, #0
240627c6:	4604      	mov	r4, r0
240627c8:	4608      	mov	r0, r1
240627ca:	4611      	mov	r1, r2
240627cc:	602b      	str	r3, [r5, #0]
240627ce:	f7f1 f972 	bl	24053ab6 <_fstat>
240627d2:	1c43      	adds	r3, r0, #1
240627d4:	d102      	bne.n	240627dc <_fstat_r+0x1c>
240627d6:	682b      	ldr	r3, [r5, #0]
240627d8:	b103      	cbz	r3, 240627dc <_fstat_r+0x1c>
240627da:	6023      	str	r3, [r4, #0]
240627dc:	bd38      	pop	{r3, r4, r5, pc}
240627de:	bf00      	nop
240627e0:	20000760 	.word	0x20000760

240627e4 <_isatty_r>:
240627e4:	b538      	push	{r3, r4, r5, lr}
240627e6:	4d06      	ldr	r5, [pc, #24]	; (24062800 <_isatty_r+0x1c>)
240627e8:	2300      	movs	r3, #0
240627ea:	4604      	mov	r4, r0
240627ec:	4608      	mov	r0, r1
240627ee:	602b      	str	r3, [r5, #0]
240627f0:	f7f1 f971 	bl	24053ad6 <_isatty>
240627f4:	1c43      	adds	r3, r0, #1
240627f6:	d102      	bne.n	240627fe <_isatty_r+0x1a>
240627f8:	682b      	ldr	r3, [r5, #0]
240627fa:	b103      	cbz	r3, 240627fe <_isatty_r+0x1a>
240627fc:	6023      	str	r3, [r4, #0]
240627fe:	bd38      	pop	{r3, r4, r5, pc}
24062800:	20000760 	.word	0x20000760

24062804 <_kill_r>:
24062804:	b538      	push	{r3, r4, r5, lr}
24062806:	4d07      	ldr	r5, [pc, #28]	; (24062824 <_kill_r+0x20>)
24062808:	2300      	movs	r3, #0
2406280a:	4604      	mov	r4, r0
2406280c:	4608      	mov	r0, r1
2406280e:	4611      	mov	r1, r2
24062810:	602b      	str	r3, [r5, #0]
24062812:	f7f1 f8f1 	bl	240539f8 <_kill>
24062816:	1c43      	adds	r3, r0, #1
24062818:	d102      	bne.n	24062820 <_kill_r+0x1c>
2406281a:	682b      	ldr	r3, [r5, #0]
2406281c:	b103      	cbz	r3, 24062820 <_kill_r+0x1c>
2406281e:	6023      	str	r3, [r4, #0]
24062820:	bd38      	pop	{r3, r4, r5, pc}
24062822:	bf00      	nop
24062824:	20000760 	.word	0x20000760

24062828 <_getpid_r>:
24062828:	f7f1 b8de 	b.w	240539e8 <_getpid>

2406282c <_sbrk_r>:
2406282c:	b538      	push	{r3, r4, r5, lr}
2406282e:	4d06      	ldr	r5, [pc, #24]	; (24062848 <_sbrk_r+0x1c>)
24062830:	2300      	movs	r3, #0
24062832:	4604      	mov	r4, r0
24062834:	4608      	mov	r0, r1
24062836:	602b      	str	r3, [r5, #0]
24062838:	f7f1 f966 	bl	24053b08 <_sbrk>
2406283c:	1c43      	adds	r3, r0, #1
2406283e:	d102      	bne.n	24062846 <_sbrk_r+0x1a>
24062840:	682b      	ldr	r3, [r5, #0]
24062842:	b103      	cbz	r3, 24062846 <_sbrk_r+0x1a>
24062844:	6023      	str	r3, [r4, #0]
24062846:	bd38      	pop	{r3, r4, r5, pc}
24062848:	20000760 	.word	0x20000760

2406284c <_realloc_r>:
2406284c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
24062850:	4680      	mov	r8, r0
24062852:	4614      	mov	r4, r2
24062854:	460e      	mov	r6, r1
24062856:	b921      	cbnz	r1, 24062862 <_realloc_r+0x16>
24062858:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
2406285c:	4611      	mov	r1, r2
2406285e:	f7ff b99d 	b.w	24061b9c <_malloc_r>
24062862:	b92a      	cbnz	r2, 24062870 <_realloc_r+0x24>
24062864:	f7ff f926 	bl	24061ab4 <_free_r>
24062868:	4625      	mov	r5, r4
2406286a:	4628      	mov	r0, r5
2406286c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
24062870:	f000 f81b 	bl	240628aa <_malloc_usable_size_r>
24062874:	4284      	cmp	r4, r0
24062876:	4607      	mov	r7, r0
24062878:	d802      	bhi.n	24062880 <_realloc_r+0x34>
2406287a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
2406287e:	d812      	bhi.n	240628a6 <_realloc_r+0x5a>
24062880:	4621      	mov	r1, r4
24062882:	4640      	mov	r0, r8
24062884:	f7ff f98a 	bl	24061b9c <_malloc_r>
24062888:	4605      	mov	r5, r0
2406288a:	2800      	cmp	r0, #0
2406288c:	d0ed      	beq.n	2406286a <_realloc_r+0x1e>
2406288e:	42bc      	cmp	r4, r7
24062890:	4622      	mov	r2, r4
24062892:	4631      	mov	r1, r6
24062894:	bf28      	it	cs
24062896:	463a      	movcs	r2, r7
24062898:	f7ff f8f7 	bl	24061a8a <memcpy>
2406289c:	4631      	mov	r1, r6
2406289e:	4640      	mov	r0, r8
240628a0:	f7ff f908 	bl	24061ab4 <_free_r>
240628a4:	e7e1      	b.n	2406286a <_realloc_r+0x1e>
240628a6:	4635      	mov	r5, r6
240628a8:	e7df      	b.n	2406286a <_realloc_r+0x1e>

240628aa <_malloc_usable_size_r>:
240628aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
240628ae:	1f18      	subs	r0, r3, #4
240628b0:	2b00      	cmp	r3, #0
240628b2:	bfbc      	itt	lt
240628b4:	580b      	ldrlt	r3, [r1, r0]
240628b6:	18c0      	addlt	r0, r0, r3
240628b8:	4770      	bx	lr
	...

240628bc <_init>:
240628bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
240628be:	bf00      	nop
240628c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
240628c2:	bc08      	pop	{r3}
240628c4:	469e      	mov	lr, r3
240628c6:	4770      	bx	lr

240628c8 <_fini>:
240628c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
240628ca:	bf00      	nop
240628cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
240628ce:	bc08      	pop	{r3}
240628d0:	469e      	mov	lr, r3
240628d2:	4770      	bx	lr
