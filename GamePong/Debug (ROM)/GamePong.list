
GamePong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 ._itcram      00000000  00000100  00000100  000300b0  2**0
                  CONTENTS
  1 ._itcram_hot  00000000  00000100  00000100  000300b0  2**0
                  CONTENTS
  2 ._ram_uc      0004b000  24000000  24000000  00040000  2**4
                  ALLOC
  3 ._ram_exec    00000000  24050000  24050000  000300b0  2**0
                  CONTENTS
  4 ._extflash    00000000  90000000  90000000  000300b0  2**0
                  CONTENTS
  5 ._configflash 00000000  900ff000  900ff000  000300b0  2**0
                  CONTENTS
  6 ._ram         00000000  24050000  24050000  000300b0  2**0
                  CONTENTS
  7 ._ahbram      00005f94  30000000  30000000  00040000  2**4
                  ALLOC
  8 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .text         000128d4  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .rodata       00001a1c  08012b84  08012b84  00022b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .init_array   00000004  080145a0  080145a0  000245a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .fini_array   00000004  080145a4  080145a4  000245a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .data         000000b0  20000000  080145a8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 ._flash_end   00000000  080145a8  080145a8  000300b0  2**0
                  CONTENTS
 15 .bss          000006c0  200000b0  200000b0  000300b0  2**2
                  ALLOC
 16 ._persistent  00000000  20000770  20000770  000300b0  2**0
                  CONTENTS
 17 ._user_heap   00008000  20000770  20000770  000300b0  2**0
                  ALLOC
 18 ._user_stack  00017890  20008770  20008770  000300b0  2**0
                  ALLOC
 19 .ARM.attributes 0000002e  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY
 20 .comment      00000043  00000000  00000000  000300de  2**0
                  CONTENTS, READONLY
 21 .debug_info   00028b4d  00000000  00000000  00030121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_abbrev 00004e8a  00000000  00000000  00058c6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_aranges 000020d0  00000000  00000000  0005daf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_macro  00039cc2  00000000  00000000  0005fbc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line   0002de6f  00000000  00000000  0009988a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_str    0016b4f7  00000000  00000000  000c76f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_rnglists 00001938  00000000  00000000  00232bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_frame  00009710  00000000  00000000  00234528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_line_str 00000064  00000000  00000000  0023dc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	200000b0 	.word	0x200000b0
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08012b6c 	.word	0x08012b6c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	200000b4 	.word	0x200000b4
 80002ec:	08012b6c 	.word	0x08012b6c

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <gw_audio_init>:
Generator gen3;
Noise noise1;

static uint32_t audio_frame = 0;

void gw_audio_init(void) {
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
	memset(audiobuffer, 0, sizeof(audiobuffer));
 8000396:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 800039a:	2100      	movs	r1, #0
 800039c:	4853      	ldr	r0, [pc, #332]	; (80004ec <gw_audio_init+0x15c>)
 800039e:	f011 fc51 	bl	8011c44 <memset>
	HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t*) audiobuffer,
 80003a2:	f44f 6216 	mov.w	r2, #2400	; 0x960
 80003a6:	4951      	ldr	r1, [pc, #324]	; (80004ec <gw_audio_init+0x15c>)
 80003a8:	4851      	ldr	r0, [pc, #324]	; (80004f0 <gw_audio_init+0x160>)
 80003aa:	f00f fbbf 	bl	800fb2c <HAL_SAI_Transmit_DMA>
	AUDIO_BUFFER_LENGTH);
	int i;
	for (i = 0; i < AUDIO_PROGRAMMABLE_LENGTH; i++) {
 80003ae:	2300      	movs	r3, #0
 80003b0:	607b      	str	r3, [r7, #4]
 80003b2:	e040      	b.n	8000436 <gw_audio_init+0xa6>
		(&gen1)->gen_freq[i] = 0;
 80003b4:	4a4f      	ldr	r2, [pc, #316]	; (80004f4 <gw_audio_init+0x164>)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	4413      	add	r3, r2
 80003ba:	2200      	movs	r2, #0
 80003bc:	701a      	strb	r2, [r3, #0]
		(&gen1)->gen_duty[i] = PW_HALF;
 80003be:	4a4d      	ldr	r2, [pc, #308]	; (80004f4 <gw_audio_init+0x164>)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	4413      	add	r3, r2
 80003c4:	3350      	adds	r3, #80	; 0x50
 80003c6:	2201      	movs	r2, #1
 80003c8:	701a      	strb	r2, [r3, #0]
		(&gen1)->gen_vol[i] = (uint8_t) 0;
 80003ca:	4a4a      	ldr	r2, [pc, #296]	; (80004f4 <gw_audio_init+0x164>)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	4413      	add	r3, r2
 80003d0:	3328      	adds	r3, #40	; 0x28
 80003d2:	2200      	movs	r2, #0
 80003d4:	701a      	strb	r2, [r3, #0]

		(&gen2)->gen_freq[i] = 0;
 80003d6:	4a48      	ldr	r2, [pc, #288]	; (80004f8 <gw_audio_init+0x168>)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	4413      	add	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	701a      	strb	r2, [r3, #0]
		(&gen2)->gen_duty[i] = PW_HALF;
 80003e0:	4a45      	ldr	r2, [pc, #276]	; (80004f8 <gw_audio_init+0x168>)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	4413      	add	r3, r2
 80003e6:	3350      	adds	r3, #80	; 0x50
 80003e8:	2201      	movs	r2, #1
 80003ea:	701a      	strb	r2, [r3, #0]
		(&gen2)->gen_vol[i] = (uint8_t) 0;
 80003ec:	4a42      	ldr	r2, [pc, #264]	; (80004f8 <gw_audio_init+0x168>)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	4413      	add	r3, r2
 80003f2:	3328      	adds	r3, #40	; 0x28
 80003f4:	2200      	movs	r2, #0
 80003f6:	701a      	strb	r2, [r3, #0]

		(&gen3)->gen_freq[i] = 0;
 80003f8:	4a40      	ldr	r2, [pc, #256]	; (80004fc <gw_audio_init+0x16c>)
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	4413      	add	r3, r2
 80003fe:	2200      	movs	r2, #0
 8000400:	701a      	strb	r2, [r3, #0]
		(&gen3)->gen_duty[i] = PW_HALF;
 8000402:	4a3e      	ldr	r2, [pc, #248]	; (80004fc <gw_audio_init+0x16c>)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	4413      	add	r3, r2
 8000408:	3350      	adds	r3, #80	; 0x50
 800040a:	2201      	movs	r2, #1
 800040c:	701a      	strb	r2, [r3, #0]
		(&gen3)->gen_vol[i] = (uint8_t) 0;
 800040e:	4a3b      	ldr	r2, [pc, #236]	; (80004fc <gw_audio_init+0x16c>)
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	4413      	add	r3, r2
 8000414:	3328      	adds	r3, #40	; 0x28
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]

		(&noise1)->noise_freq[i] = 0;
 800041a:	4a39      	ldr	r2, [pc, #228]	; (8000500 <gw_audio_init+0x170>)
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	4413      	add	r3, r2
 8000420:	2200      	movs	r2, #0
 8000422:	701a      	strb	r2, [r3, #0]
		(&noise1)->noise_vol[i] = (uint8_t) 0;
 8000424:	4a36      	ldr	r2, [pc, #216]	; (8000500 <gw_audio_init+0x170>)
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	4413      	add	r3, r2
 800042a:	3328      	adds	r3, #40	; 0x28
 800042c:	2200      	movs	r2, #0
 800042e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < AUDIO_PROGRAMMABLE_LENGTH; i++) {
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	3301      	adds	r3, #1
 8000434:	607b      	str	r3, [r7, #4]
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	2b27      	cmp	r3, #39	; 0x27
 800043a:	ddbb      	ble.n	80003b4 <gw_audio_init+0x24>
	}

	(&gen1)->samples_high = 0;
 800043c:	4b2d      	ldr	r3, [pc, #180]	; (80004f4 <gw_audio_init+0x164>)
 800043e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000442:	2200      	movs	r2, #0
 8000444:	f8a3 2338 	strh.w	r2, [r3, #824]	; 0x338
	(&gen1)->samples_low = 0;
 8000448:	4b2a      	ldr	r3, [pc, #168]	; (80004f4 <gw_audio_init+0x164>)
 800044a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800044e:	2200      	movs	r2, #0
 8000450:	f8a3 233a 	strh.w	r2, [r3, #826]	; 0x33a
	(&gen1)->samples_high = 0;
 8000454:	4b27      	ldr	r3, [pc, #156]	; (80004f4 <gw_audio_init+0x164>)
 8000456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800045a:	2200      	movs	r2, #0
 800045c:	f8a3 2338 	strh.w	r2, [r3, #824]	; 0x338
	(&gen1)->samples_low = 0;
 8000460:	4b24      	ldr	r3, [pc, #144]	; (80004f4 <gw_audio_init+0x164>)
 8000462:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000466:	2200      	movs	r2, #0
 8000468:	f8a3 233a 	strh.w	r2, [r3, #826]	; 0x33a
	(&gen1)->samples_high = 0;
 800046c:	4b21      	ldr	r3, [pc, #132]	; (80004f4 <gw_audio_init+0x164>)
 800046e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000472:	2200      	movs	r2, #0
 8000474:	f8a3 2338 	strh.w	r2, [r3, #824]	; 0x338
	(&gen1)->samples_low = 0;
 8000478:	4b1e      	ldr	r3, [pc, #120]	; (80004f4 <gw_audio_init+0x164>)
 800047a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800047e:	2200      	movs	r2, #0
 8000480:	f8a3 233a 	strh.w	r2, [r3, #826]	; 0x33a
	(&noise1)->LFSR = 1;
 8000484:	4b1e      	ldr	r3, [pc, #120]	; (8000500 <gw_audio_init+0x170>)
 8000486:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800048a:	2201      	movs	r2, #1
 800048c:	f8a3 2310 	strh.w	r2, [r3, #784]	; 0x310
	(&noise1)->last = 0;
 8000490:	4b1b      	ldr	r3, [pc, #108]	; (8000500 <gw_audio_init+0x170>)
 8000492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000496:	2200      	movs	r2, #0
 8000498:	f8a3 2312 	strh.w	r2, [r3, #786]	; 0x312

	for (i = 0; i < AUDIO_BUFFER_LENGTH; i++) {
 800049c:	2300      	movs	r3, #0
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	e01a      	b.n	80004d8 <gw_audio_init+0x148>
		(&gen1)->audiobuffer[i] = 0;
 80004a2:	4a14      	ldr	r2, [pc, #80]	; (80004f4 <gw_audio_init+0x164>)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	333c      	adds	r3, #60	; 0x3c
 80004a8:	2100      	movs	r1, #0
 80004aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		(&gen2)->audiobuffer[i] = 0;
 80004ae:	4a12      	ldr	r2, [pc, #72]	; (80004f8 <gw_audio_init+0x168>)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	333c      	adds	r3, #60	; 0x3c
 80004b4:	2100      	movs	r1, #0
 80004b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		(&gen3)->audiobuffer[i] = 0;
 80004ba:	4a10      	ldr	r2, [pc, #64]	; (80004fc <gw_audio_init+0x16c>)
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	333c      	adds	r3, #60	; 0x3c
 80004c0:	2100      	movs	r1, #0
 80004c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		(&noise1)->audiobuffer[i] = 0;
 80004c6:	4a0e      	ldr	r2, [pc, #56]	; (8000500 <gw_audio_init+0x170>)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	3328      	adds	r3, #40	; 0x28
 80004cc:	2100      	movs	r1, #0
 80004ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i = 0; i < AUDIO_BUFFER_LENGTH; i++) {
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	3301      	adds	r3, #1
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 80004de:	dbe0      	blt.n	80004a2 <gw_audio_init+0x112>
	}
}
 80004e0:	bf00      	nop
 80004e2:	bf00      	nop
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	30000000 	.word	0x30000000
 80004f0:	20000430 	.word	0x20000430
 80004f4:	300012c0 	.word	0x300012c0
 80004f8:	30002600 	.word	0x30002600
 80004fc:	30003940 	.word	0x30003940
 8000500:	30004c80 	.word	0x30004c80

08000504 <HAL_SAI_TxHalfCpltCallback>:

void gw_audio_resume(void) {
	HAL_SAI_DMAResume(&hsai_BlockA1);
}

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	move_generator(&gen1);
 800050c:	4829      	ldr	r0, [pc, #164]	; (80005b4 <HAL_SAI_TxHalfCpltCallback+0xb0>)
 800050e:	f000 f96f 	bl	80007f0 <move_generator>
	play_generator(&gen1, 0, AUDIO_BUFFER_LENGTH / 2);
 8000512:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000516:	2100      	movs	r1, #0
 8000518:	4826      	ldr	r0, [pc, #152]	; (80005b4 <HAL_SAI_TxHalfCpltCallback+0xb0>)
 800051a:	f000 f8b7 	bl	800068c <play_generator>
	move_generator(&gen2);
 800051e:	4826      	ldr	r0, [pc, #152]	; (80005b8 <HAL_SAI_TxHalfCpltCallback+0xb4>)
 8000520:	f000 f966 	bl	80007f0 <move_generator>
	play_generator(&gen2, 0, AUDIO_BUFFER_LENGTH / 2);
 8000524:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000528:	2100      	movs	r1, #0
 800052a:	4823      	ldr	r0, [pc, #140]	; (80005b8 <HAL_SAI_TxHalfCpltCallback+0xb4>)
 800052c:	f000 f8ae 	bl	800068c <play_generator>
	move_generator(&gen3);
 8000530:	4822      	ldr	r0, [pc, #136]	; (80005bc <HAL_SAI_TxHalfCpltCallback+0xb8>)
 8000532:	f000 f95d 	bl	80007f0 <move_generator>
	play_generator(&gen3, 0, AUDIO_BUFFER_LENGTH / 2);
 8000536:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800053a:	2100      	movs	r1, #0
 800053c:	481f      	ldr	r0, [pc, #124]	; (80005bc <HAL_SAI_TxHalfCpltCallback+0xb8>)
 800053e:	f000 f8a5 	bl	800068c <play_generator>
	move_noise(&noise1);
 8000542:	481f      	ldr	r0, [pc, #124]	; (80005c0 <HAL_SAI_TxHalfCpltCallback+0xbc>)
 8000544:	f000 fa51 	bl	80009ea <move_noise>
	play_noise(&noise1, 0, AUDIO_BUFFER_LENGTH / 2);
 8000548:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800054c:	2100      	movs	r1, #0
 800054e:	481c      	ldr	r0, [pc, #112]	; (80005c0 <HAL_SAI_TxHalfCpltCallback+0xbc>)
 8000550:	f000 f9b9 	bl	80008c6 <play_noise>
	int i;
	for (i = 0; i < AUDIO_BUFFER_LENGTH / 2; i++) {
 8000554:	2300      	movs	r3, #0
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	e022      	b.n	80005a0 <HAL_SAI_TxHalfCpltCallback+0x9c>
		audiobuffer[i] = 4
				* (gen1.audiobuffer[i] + gen2.audiobuffer[i]
 800055a:	4a16      	ldr	r2, [pc, #88]	; (80005b4 <HAL_SAI_TxHalfCpltCallback+0xb0>)
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	333c      	adds	r3, #60	; 0x3c
 8000560:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000564:	4619      	mov	r1, r3
 8000566:	4a14      	ldr	r2, [pc, #80]	; (80005b8 <HAL_SAI_TxHalfCpltCallback+0xb4>)
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	333c      	adds	r3, #60	; 0x3c
 800056c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000570:	440b      	add	r3, r1
						+ gen3.audiobuffer[i] + noise1.audiobuffer[i]);
 8000572:	4912      	ldr	r1, [pc, #72]	; (80005bc <HAL_SAI_TxHalfCpltCallback+0xb8>)
 8000574:	68fa      	ldr	r2, [r7, #12]
 8000576:	323c      	adds	r2, #60	; 0x3c
 8000578:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800057c:	4413      	add	r3, r2
 800057e:	4910      	ldr	r1, [pc, #64]	; (80005c0 <HAL_SAI_TxHalfCpltCallback+0xbc>)
 8000580:	68fa      	ldr	r2, [r7, #12]
 8000582:	3228      	adds	r2, #40	; 0x28
 8000584:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8000588:	4413      	add	r3, r2
		audiobuffer[i] = 4
 800058a:	b29b      	uxth	r3, r3
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	b29b      	uxth	r3, r3
 8000590:	b219      	sxth	r1, r3
 8000592:	4a0c      	ldr	r2, [pc, #48]	; (80005c4 <HAL_SAI_TxHalfCpltCallback+0xc0>)
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i = 0; i < AUDIO_BUFFER_LENGTH / 2; i++) {
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	3301      	adds	r3, #1
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80005a6:	dbd8      	blt.n	800055a <HAL_SAI_TxHalfCpltCallback+0x56>
	}
}
 80005a8:	bf00      	nop
 80005aa:	bf00      	nop
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	300012c0 	.word	0x300012c0
 80005b8:	30002600 	.word	0x30002600
 80005bc:	30003940 	.word	0x30003940
 80005c0:	30004c80 	.word	0x30004c80
 80005c4:	30000000 	.word	0x30000000

080005c8 <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	audio_frame++;
 80005d0:	4b28      	ldr	r3, [pc, #160]	; (8000674 <HAL_SAI_TxCpltCallback+0xac>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	3301      	adds	r3, #1
 80005d6:	4a27      	ldr	r2, [pc, #156]	; (8000674 <HAL_SAI_TxCpltCallback+0xac>)
 80005d8:	6013      	str	r3, [r2, #0]
	play_generator(&gen1, AUDIO_BUFFER_LENGTH / 2, AUDIO_BUFFER_LENGTH / 2);
 80005da:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80005de:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80005e2:	4825      	ldr	r0, [pc, #148]	; (8000678 <HAL_SAI_TxCpltCallback+0xb0>)
 80005e4:	f000 f852 	bl	800068c <play_generator>
	play_generator(&gen2, AUDIO_BUFFER_LENGTH / 2, AUDIO_BUFFER_LENGTH / 2);
 80005e8:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80005ec:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80005f0:	4822      	ldr	r0, [pc, #136]	; (800067c <HAL_SAI_TxCpltCallback+0xb4>)
 80005f2:	f000 f84b 	bl	800068c <play_generator>
	play_generator(&gen3, AUDIO_BUFFER_LENGTH / 2, AUDIO_BUFFER_LENGTH / 2);
 80005f6:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80005fa:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80005fe:	4820      	ldr	r0, [pc, #128]	; (8000680 <HAL_SAI_TxCpltCallback+0xb8>)
 8000600:	f000 f844 	bl	800068c <play_generator>
	play_noise(&noise1, AUDIO_BUFFER_LENGTH / 2, AUDIO_BUFFER_LENGTH / 2);
 8000604:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000608:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800060c:	481d      	ldr	r0, [pc, #116]	; (8000684 <HAL_SAI_TxCpltCallback+0xbc>)
 800060e:	f000 f95a 	bl	80008c6 <play_noise>
	int i;
	for (i = AUDIO_BUFFER_LENGTH / 2; i < AUDIO_BUFFER_LENGTH; i++) {
 8000612:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	e022      	b.n	8000660 <HAL_SAI_TxCpltCallback+0x98>
		audiobuffer[i] = 2
				* (gen1.audiobuffer[i] + gen2.audiobuffer[i]
 800061a:	4a17      	ldr	r2, [pc, #92]	; (8000678 <HAL_SAI_TxCpltCallback+0xb0>)
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	333c      	adds	r3, #60	; 0x3c
 8000620:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000624:	4619      	mov	r1, r3
 8000626:	4a15      	ldr	r2, [pc, #84]	; (800067c <HAL_SAI_TxCpltCallback+0xb4>)
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	333c      	adds	r3, #60	; 0x3c
 800062c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000630:	440b      	add	r3, r1
						+ gen3.audiobuffer[i] + noise1.audiobuffer[i]);
 8000632:	4913      	ldr	r1, [pc, #76]	; (8000680 <HAL_SAI_TxCpltCallback+0xb8>)
 8000634:	68fa      	ldr	r2, [r7, #12]
 8000636:	323c      	adds	r2, #60	; 0x3c
 8000638:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800063c:	4413      	add	r3, r2
 800063e:	4911      	ldr	r1, [pc, #68]	; (8000684 <HAL_SAI_TxCpltCallback+0xbc>)
 8000640:	68fa      	ldr	r2, [r7, #12]
 8000642:	3228      	adds	r2, #40	; 0x28
 8000644:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8000648:	4413      	add	r3, r2
		audiobuffer[i] = 2
 800064a:	b29b      	uxth	r3, r3
 800064c:	005b      	lsls	r3, r3, #1
 800064e:	b29b      	uxth	r3, r3
 8000650:	b219      	sxth	r1, r3
 8000652:	4a0d      	ldr	r2, [pc, #52]	; (8000688 <HAL_SAI_TxCpltCallback+0xc0>)
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i = AUDIO_BUFFER_LENGTH / 2; i < AUDIO_BUFFER_LENGTH; i++) {
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	3301      	adds	r3, #1
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8000666:	dbd8      	blt.n	800061a <HAL_SAI_TxCpltCallback+0x52>
	}
}
 8000668:	bf00      	nop
 800066a:	bf00      	nop
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	200000cc 	.word	0x200000cc
 8000678:	300012c0 	.word	0x300012c0
 800067c:	30002600 	.word	0x30002600
 8000680:	30003940 	.word	0x30003940
 8000684:	30004c80 	.word	0x30004c80
 8000688:	30000000 	.word	0x30000000

0800068c <play_generator>:

void play_generator(Generator *gen, int start, int len) {
 800068c:	b480      	push	{r7}
 800068e:	b089      	sub	sp, #36	; 0x24
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	607a      	str	r2, [r7, #4]
	int i;
	uint8_t freq = (*gen).gen_freq[0];
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	74fb      	strb	r3, [r7, #19]
	if (freq == 0) {
 800069e:	7cfb      	ldrb	r3, [r7, #19]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d112      	bne.n	80006ca <play_generator+0x3e>
		for (i = start; i < start + len; i++) {
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	61fb      	str	r3, [r7, #28]
 80006a8:	e008      	b.n	80006bc <play_generator+0x30>
			gen->audiobuffer[i] = 0;
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	69fa      	ldr	r2, [r7, #28]
 80006ae:	323c      	adds	r2, #60	; 0x3c
 80006b0:	2100      	movs	r1, #0
 80006b2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (i = start; i < start + len; i++) {
 80006b6:	69fb      	ldr	r3, [r7, #28]
 80006b8:	3301      	adds	r3, #1
 80006ba:	61fb      	str	r3, [r7, #28]
 80006bc:	68ba      	ldr	r2, [r7, #8]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4413      	add	r3, r2
 80006c2:	69fa      	ldr	r2, [r7, #28]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	dbf0      	blt.n	80006aa <play_generator+0x1e>
		}
		return;
 80006c8:	e08d      	b.n	80007e6 <play_generator+0x15a>
	}
	uint8_t duty = (*gen).gen_duty[0];
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80006d0:	74bb      	strb	r3, [r7, #18]
	uint16_t samples_high;
	uint16_t samples_low;
	switch (duty) {
 80006d2:	7cbb      	ldrb	r3, [r7, #18]
 80006d4:	2b02      	cmp	r3, #2
 80006d6:	d018      	beq.n	800070a <play_generator+0x7e>
 80006d8:	2b02      	cmp	r3, #2
 80006da:	dc1f      	bgt.n	800071c <play_generator+0x90>
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d002      	beq.n	80006e6 <play_generator+0x5a>
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d009      	beq.n	80006f8 <play_generator+0x6c>
 80006e4:	e01a      	b.n	800071c <play_generator+0x90>
	case PW_SHORT:
		samples_high = 1 * (uint16_t) freq;
 80006e6:	7cfb      	ldrb	r3, [r7, #19]
 80006e8:	837b      	strh	r3, [r7, #26]
		samples_low = 3 * (uint16_t) freq;
 80006ea:	7cfb      	ldrb	r3, [r7, #19]
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	461a      	mov	r2, r3
 80006f0:	0052      	lsls	r2, r2, #1
 80006f2:	4413      	add	r3, r2
 80006f4:	833b      	strh	r3, [r7, #24]
		break;
 80006f6:	e01a      	b.n	800072e <play_generator+0xa2>
	case PW_HALF:
		samples_high = 2 * (uint16_t) freq;
 80006f8:	7cfb      	ldrb	r3, [r7, #19]
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	837b      	strh	r3, [r7, #26]
		samples_low = 2 * (uint16_t) freq;
 8000700:	7cfb      	ldrb	r3, [r7, #19]
 8000702:	b29b      	uxth	r3, r3
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	833b      	strh	r3, [r7, #24]
		break;
 8000708:	e011      	b.n	800072e <play_generator+0xa2>
	case PW_LONG:
		samples_high = 3 * (uint16_t) freq;
 800070a:	7cfb      	ldrb	r3, [r7, #19]
 800070c:	b29b      	uxth	r3, r3
 800070e:	461a      	mov	r2, r3
 8000710:	0052      	lsls	r2, r2, #1
 8000712:	4413      	add	r3, r2
 8000714:	837b      	strh	r3, [r7, #26]
		samples_low = 1 * (uint16_t) freq;
 8000716:	7cfb      	ldrb	r3, [r7, #19]
 8000718:	833b      	strh	r3, [r7, #24]
		break;
 800071a:	e008      	b.n	800072e <play_generator+0xa2>
	default:
		samples_high = 2 * (uint16_t) freq;
 800071c:	7cfb      	ldrb	r3, [r7, #19]
 800071e:	b29b      	uxth	r3, r3
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	837b      	strh	r3, [r7, #26]
		samples_low = 2 * (uint16_t) freq;
 8000724:	7cfb      	ldrb	r3, [r7, #19]
 8000726:	b29b      	uxth	r3, r3
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	833b      	strh	r3, [r7, #24]
		break;
 800072c:	bf00      	nop
	}
	uint8_t vol = (*gen).gen_vol[0];
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000734:	747b      	strb	r3, [r7, #17]
	uint16_t counter_high = (*gen).samples_high;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800073c:	f8b3 3338 	ldrh.w	r3, [r3, #824]	; 0x338
 8000740:	82fb      	strh	r3, [r7, #22]
	uint16_t counter_low = (*gen).samples_low;
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000748:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800074c:	82bb      	strh	r3, [r7, #20]

	if (counter_high > samples_high) {
 800074e:	8afa      	ldrh	r2, [r7, #22]
 8000750:	8b7b      	ldrh	r3, [r7, #26]
 8000752:	429a      	cmp	r2, r3
 8000754:	d901      	bls.n	800075a <play_generator+0xce>
		counter_high = samples_high;
 8000756:	8b7b      	ldrh	r3, [r7, #26]
 8000758:	82fb      	strh	r3, [r7, #22]
	}
	if (counter_low > samples_low) {
 800075a:	8aba      	ldrh	r2, [r7, #20]
 800075c:	8b3b      	ldrh	r3, [r7, #24]
 800075e:	429a      	cmp	r2, r3
 8000760:	d901      	bls.n	8000766 <play_generator+0xda>
		counter_low = samples_low;
 8000762:	8b3b      	ldrh	r3, [r7, #24]
 8000764:	82bb      	strh	r3, [r7, #20]
	}

	for (i = start; i < start + len; i++) {
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	61fb      	str	r3, [r7, #28]
 800076a:	e028      	b.n	80007be <play_generator+0x132>
		if (counter_high > 0) {
 800076c:	8afb      	ldrh	r3, [r7, #22]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d00a      	beq.n	8000788 <play_generator+0xfc>
			gen->audiobuffer[i] = (int16_t) vol;
 8000772:	7c7b      	ldrb	r3, [r7, #17]
 8000774:	b219      	sxth	r1, r3
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	69fa      	ldr	r2, [r7, #28]
 800077a:	323c      	adds	r2, #60	; 0x3c
 800077c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			counter_high--;
 8000780:	8afb      	ldrh	r3, [r7, #22]
 8000782:	3b01      	subs	r3, #1
 8000784:	82fb      	strh	r3, [r7, #22]
 8000786:	e017      	b.n	80007b8 <play_generator+0x12c>
		} else {
			if (counter_low > 0) {
 8000788:	8abb      	ldrh	r3, [r7, #20]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d00d      	beq.n	80007aa <play_generator+0x11e>
				gen->audiobuffer[i] = -(int16_t) vol;
 800078e:	7c7b      	ldrb	r3, [r7, #17]
 8000790:	b29b      	uxth	r3, r3
 8000792:	425b      	negs	r3, r3
 8000794:	b29b      	uxth	r3, r3
 8000796:	b219      	sxth	r1, r3
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	69fa      	ldr	r2, [r7, #28]
 800079c:	323c      	adds	r2, #60	; 0x3c
 800079e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				counter_low--;
 80007a2:	8abb      	ldrh	r3, [r7, #20]
 80007a4:	3b01      	subs	r3, #1
 80007a6:	82bb      	strh	r3, [r7, #20]
 80007a8:	e006      	b.n	80007b8 <play_generator+0x12c>
			} else {
				counter_high = samples_high;
 80007aa:	8b7b      	ldrh	r3, [r7, #26]
 80007ac:	82fb      	strh	r3, [r7, #22]
				counter_low = samples_low;
 80007ae:	8b3b      	ldrh	r3, [r7, #24]
 80007b0:	82bb      	strh	r3, [r7, #20]
				i--;
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	3b01      	subs	r3, #1
 80007b6:	61fb      	str	r3, [r7, #28]
	for (i = start; i < start + len; i++) {
 80007b8:	69fb      	ldr	r3, [r7, #28]
 80007ba:	3301      	adds	r3, #1
 80007bc:	61fb      	str	r3, [r7, #28]
 80007be:	68ba      	ldr	r2, [r7, #8]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	4413      	add	r3, r2
 80007c4:	69fa      	ldr	r2, [r7, #28]
 80007c6:	429a      	cmp	r2, r3
 80007c8:	dbd0      	blt.n	800076c <play_generator+0xe0>
			}
		}
	}
	gen->samples_high = counter_high;
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007d0:	461a      	mov	r2, r3
 80007d2:	8afb      	ldrh	r3, [r7, #22]
 80007d4:	f8a2 3338 	strh.w	r3, [r2, #824]	; 0x338
	gen->samples_low = counter_low;
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007de:	461a      	mov	r2, r3
 80007e0:	8abb      	ldrh	r3, [r7, #20]
 80007e2:	f8a2 333a 	strh.w	r3, [r2, #826]	; 0x33a
}
 80007e6:	3724      	adds	r7, #36	; 0x24
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <move_generator>:

void move_generator(Generator *gen) {
 80007f0:	b480      	push	{r7}
 80007f2:	b087      	sub	sp, #28
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	int i, n = AUDIO_PROGRAMMABLE_LENGTH;
 80007f8:	2328      	movs	r3, #40	; 0x28
 80007fa:	613b      	str	r3, [r7, #16]
	uint8_t *a = gen->gen_freq;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	60fb      	str	r3, [r7, #12]
	uint8_t temp = a[0];
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	72fb      	strb	r3, [r7, #11]
	for (i = 0; i < n - 1; i++) {
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]
 800080a:	e00b      	b.n	8000824 <move_generator+0x34>
		a[i] = a[i + 1];
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	3301      	adds	r3, #1
 8000810:	68fa      	ldr	r2, [r7, #12]
 8000812:	441a      	add	r2, r3
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	68f9      	ldr	r1, [r7, #12]
 8000818:	440b      	add	r3, r1
 800081a:	7812      	ldrb	r2, [r2, #0]
 800081c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < n - 1; i++) {
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	3301      	adds	r3, #1
 8000822:	617b      	str	r3, [r7, #20]
 8000824:	693b      	ldr	r3, [r7, #16]
 8000826:	3b01      	subs	r3, #1
 8000828:	697a      	ldr	r2, [r7, #20]
 800082a:	429a      	cmp	r2, r3
 800082c:	dbee      	blt.n	800080c <move_generator+0x1c>
	}
	a[n - 1] = temp;
 800082e:	693b      	ldr	r3, [r7, #16]
 8000830:	3b01      	subs	r3, #1
 8000832:	68fa      	ldr	r2, [r7, #12]
 8000834:	4413      	add	r3, r2
 8000836:	7afa      	ldrb	r2, [r7, #11]
 8000838:	701a      	strb	r2, [r3, #0]
	a = gen->gen_vol;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	3328      	adds	r3, #40	; 0x28
 800083e:	60fb      	str	r3, [r7, #12]
	temp = a[0];
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	72fb      	strb	r3, [r7, #11]
	for (i = 0; i < n - 1; i++) {
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
 800084a:	e00b      	b.n	8000864 <move_generator+0x74>
		a[i] = a[i + 1];
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	3301      	adds	r3, #1
 8000850:	68fa      	ldr	r2, [r7, #12]
 8000852:	441a      	add	r2, r3
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	68f9      	ldr	r1, [r7, #12]
 8000858:	440b      	add	r3, r1
 800085a:	7812      	ldrb	r2, [r2, #0]
 800085c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < n - 1; i++) {
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	3301      	adds	r3, #1
 8000862:	617b      	str	r3, [r7, #20]
 8000864:	693b      	ldr	r3, [r7, #16]
 8000866:	3b01      	subs	r3, #1
 8000868:	697a      	ldr	r2, [r7, #20]
 800086a:	429a      	cmp	r2, r3
 800086c:	dbee      	blt.n	800084c <move_generator+0x5c>
	}
	a[n - 1] = temp;
 800086e:	693b      	ldr	r3, [r7, #16]
 8000870:	3b01      	subs	r3, #1
 8000872:	68fa      	ldr	r2, [r7, #12]
 8000874:	4413      	add	r3, r2
 8000876:	7afa      	ldrb	r2, [r7, #11]
 8000878:	701a      	strb	r2, [r3, #0]
	a = gen->gen_duty;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	3350      	adds	r3, #80	; 0x50
 800087e:	60fb      	str	r3, [r7, #12]
	temp = a[0];
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	72fb      	strb	r3, [r7, #11]
	for (i = 0; i < n - 1; i++) {
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
 800088a:	e00b      	b.n	80008a4 <move_generator+0xb4>
		a[i] = a[i + 1];
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	3301      	adds	r3, #1
 8000890:	68fa      	ldr	r2, [r7, #12]
 8000892:	441a      	add	r2, r3
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	68f9      	ldr	r1, [r7, #12]
 8000898:	440b      	add	r3, r1
 800089a:	7812      	ldrb	r2, [r2, #0]
 800089c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < n - 1; i++) {
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	3301      	adds	r3, #1
 80008a2:	617b      	str	r3, [r7, #20]
 80008a4:	693b      	ldr	r3, [r7, #16]
 80008a6:	3b01      	subs	r3, #1
 80008a8:	697a      	ldr	r2, [r7, #20]
 80008aa:	429a      	cmp	r2, r3
 80008ac:	dbee      	blt.n	800088c <move_generator+0x9c>
	}
	a[n - 1] = temp;
 80008ae:	693b      	ldr	r3, [r7, #16]
 80008b0:	3b01      	subs	r3, #1
 80008b2:	68fa      	ldr	r2, [r7, #12]
 80008b4:	4413      	add	r3, r2
 80008b6:	7afa      	ldrb	r2, [r7, #11]
 80008b8:	701a      	strb	r2, [r3, #0]
}
 80008ba:	bf00      	nop
 80008bc:	371c      	adds	r7, #28
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr

080008c6 <play_noise>:

void play_noise(Noise *noise, int start, int len) {
 80008c6:	b480      	push	{r7}
 80008c8:	b08b      	sub	sp, #44	; 0x2c
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	60f8      	str	r0, [r7, #12]
 80008ce:	60b9      	str	r1, [r7, #8]
 80008d0:	607a      	str	r2, [r7, #4]
	int i;
	uint16_t freq = 4 * (uint16_t) (*noise).noise_freq[0];
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	837b      	strh	r3, [r7, #26]
	if (freq == 0) {
 80008dc:	8b7b      	ldrh	r3, [r7, #26]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d112      	bne.n	8000908 <play_noise+0x42>
		for (i = start; i < start + len; i++) {
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
 80008e6:	e008      	b.n	80008fa <play_noise+0x34>
			noise->audiobuffer[i] = 0;
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008ec:	3228      	adds	r2, #40	; 0x28
 80008ee:	2100      	movs	r1, #0
 80008f0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (i = start; i < start + len; i++) {
 80008f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f6:	3301      	adds	r3, #1
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
 80008fa:	68ba      	ldr	r2, [r7, #8]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	4413      	add	r3, r2
 8000900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000902:	429a      	cmp	r2, r3
 8000904:	dbf0      	blt.n	80008e8 <play_noise+0x22>
		}
		return;
 8000906:	e06b      	b.n	80009e0 <play_noise+0x11a>
	}
	uint8_t vol = (*noise).noise_vol[0];
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800090e:	767b      	strb	r3, [r7, #25]
	uint16_t LFSR = (*noise).LFSR;
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000916:	f8b3 3310 	ldrh.w	r3, [r3, #784]	; 0x310
 800091a:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t last = (*noise).last;
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000922:	f8b3 3312 	ldrh.w	r3, [r3, #786]	; 0x312
 8000926:	843b      	strh	r3, [r7, #32]
	int out = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	61fb      	str	r3, [r7, #28]
	if (last > freq) {
 800092c:	8c3a      	ldrh	r2, [r7, #32]
 800092e:	8b7b      	ldrh	r3, [r7, #26]
 8000930:	429a      	cmp	r2, r3
 8000932:	d901      	bls.n	8000938 <play_noise+0x72>
		last = freq;
 8000934:	8b7b      	ldrh	r3, [r7, #26]
 8000936:	843b      	strh	r3, [r7, #32]
	}
	for (i = start; i < start + len; i++) {
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
 800093c:	e03c      	b.n	80009b8 <play_noise+0xf2>
		if (last > 0) {
 800093e:	8c3b      	ldrh	r3, [r7, #32]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d013      	beq.n	800096c <play_noise+0xa6>
			noise->audiobuffer[i] =
 8000944:	69fb      	ldr	r3, [r7, #28]
 8000946:	2b01      	cmp	r3, #1
 8000948:	d105      	bne.n	8000956 <play_noise+0x90>
 800094a:	7e7b      	ldrb	r3, [r7, #25]
 800094c:	b29b      	uxth	r3, r3
 800094e:	425b      	negs	r3, r3
 8000950:	b29b      	uxth	r3, r3
 8000952:	b21b      	sxth	r3, r3
 8000954:	e001      	b.n	800095a <play_noise+0x94>
 8000956:	7e7b      	ldrb	r3, [r7, #25]
 8000958:	b21b      	sxth	r3, r3
 800095a:	68fa      	ldr	r2, [r7, #12]
 800095c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800095e:	3128      	adds	r1, #40	; 0x28
 8000960:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
					(out == 1) ? -1 * (int16_t) vol : (int16_t) vol;
			last--;
 8000964:	8c3b      	ldrh	r3, [r7, #32]
 8000966:	3b01      	subs	r3, #1
 8000968:	843b      	strh	r3, [r7, #32]
 800096a:	e022      	b.n	80009b2 <play_noise+0xec>
		} else {
			last = freq;
 800096c:	8b7b      	ldrh	r3, [r7, #26]
 800096e:	843b      	strh	r3, [r7, #32]
			i--;
 8000970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000972:	3b01      	subs	r3, #1
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
			uint16_t xor_result = (LFSR & 0b01) ^ ((LFSR & 0b10) >> 1);
 8000976:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000978:	105b      	asrs	r3, r3, #1
 800097a:	b21a      	sxth	r2, r3
 800097c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000980:	4053      	eors	r3, r2
 8000982:	b21b      	sxth	r3, r3
 8000984:	b29b      	uxth	r3, r3
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	82fb      	strh	r3, [r7, #22]
			LFSR = (LFSR >> 1) | (xor_result << 14);
 800098c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800098e:	085b      	lsrs	r3, r3, #1
 8000990:	b29b      	uxth	r3, r3
 8000992:	b21a      	sxth	r2, r3
 8000994:	8afb      	ldrh	r3, [r7, #22]
 8000996:	039b      	lsls	r3, r3, #14
 8000998:	b21b      	sxth	r3, r3
 800099a:	4313      	orrs	r3, r2
 800099c:	b21b      	sxth	r3, r3
 800099e:	847b      	strh	r3, [r7, #34]	; 0x22
			out = ~LFSR & 0x01;
 80009a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	bf0c      	ite	eq
 80009aa:	2301      	moveq	r3, #1
 80009ac:	2300      	movne	r3, #0
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	61fb      	str	r3, [r7, #28]
	for (i = start; i < start + len; i++) {
 80009b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b4:	3301      	adds	r3, #1
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
 80009b8:	68ba      	ldr	r2, [r7, #8]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4413      	add	r3, r2
 80009be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009c0:	429a      	cmp	r2, r3
 80009c2:	dbbc      	blt.n	800093e <play_noise+0x78>
		}
	}
	noise->LFSR = LFSR;
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80009ca:	461a      	mov	r2, r3
 80009cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80009ce:	f8a2 3310 	strh.w	r3, [r2, #784]	; 0x310
	noise->last = last;
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80009d8:	461a      	mov	r2, r3
 80009da:	8c3b      	ldrh	r3, [r7, #32]
 80009dc:	f8a2 3312 	strh.w	r3, [r2, #786]	; 0x312
}
 80009e0:	372c      	adds	r7, #44	; 0x2c
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr

080009ea <move_noise>:

void move_noise(Noise *noise) {
 80009ea:	b480      	push	{r7}
 80009ec:	b087      	sub	sp, #28
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
	int i, n = AUDIO_PROGRAMMABLE_LENGTH;
 80009f2:	2328      	movs	r3, #40	; 0x28
 80009f4:	613b      	str	r3, [r7, #16]
	uint8_t *a = noise->noise_freq;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	60fb      	str	r3, [r7, #12]
	uint8_t temp = a[0];
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	72fb      	strb	r3, [r7, #11]
	for (i = 0; i < n - 1; i++) {
 8000a00:	2300      	movs	r3, #0
 8000a02:	617b      	str	r3, [r7, #20]
 8000a04:	e00b      	b.n	8000a1e <move_noise+0x34>
		a[i] = a[i + 1];
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	68fa      	ldr	r2, [r7, #12]
 8000a0c:	441a      	add	r2, r3
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	68f9      	ldr	r1, [r7, #12]
 8000a12:	440b      	add	r3, r1
 8000a14:	7812      	ldrb	r2, [r2, #0]
 8000a16:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < n - 1; i++) {
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	617b      	str	r3, [r7, #20]
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	3b01      	subs	r3, #1
 8000a22:	697a      	ldr	r2, [r7, #20]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	dbee      	blt.n	8000a06 <move_noise+0x1c>
	}
	a[n - 1] = temp;
 8000a28:	693b      	ldr	r3, [r7, #16]
 8000a2a:	3b01      	subs	r3, #1
 8000a2c:	68fa      	ldr	r2, [r7, #12]
 8000a2e:	4413      	add	r3, r2
 8000a30:	7afa      	ldrb	r2, [r7, #11]
 8000a32:	701a      	strb	r2, [r3, #0]
	a = noise->noise_vol;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3328      	adds	r3, #40	; 0x28
 8000a38:	60fb      	str	r3, [r7, #12]
	temp = a[0];
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	72fb      	strb	r3, [r7, #11]
	for (i = 0; i < n - 1; i++) {
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]
 8000a44:	e00b      	b.n	8000a5e <move_noise+0x74>
		a[i] = a[i + 1];
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	68fa      	ldr	r2, [r7, #12]
 8000a4c:	441a      	add	r2, r3
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	68f9      	ldr	r1, [r7, #12]
 8000a52:	440b      	add	r3, r1
 8000a54:	7812      	ldrb	r2, [r2, #0]
 8000a56:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < n - 1; i++) {
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	617b      	str	r3, [r7, #20]
 8000a5e:	693b      	ldr	r3, [r7, #16]
 8000a60:	3b01      	subs	r3, #1
 8000a62:	697a      	ldr	r2, [r7, #20]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	dbee      	blt.n	8000a46 <move_noise+0x5c>
	}
	a[n - 1] = temp;
 8000a68:	693b      	ldr	r3, [r7, #16]
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	68fa      	ldr	r2, [r7, #12]
 8000a6e:	4413      	add	r3, r2
 8000a70:	7afa      	ldrb	r2, [r7, #11]
 8000a72:	701a      	strb	r2, [r3, #0]
}
 8000a74:	bf00      	nop
 8000a76:	371c      	adds	r7, #28
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <HAL_ADC_ConvCpltCallback>:
		int percent;
		bq24072_state_t state;
	} last;
} bq24072_data;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
	bq24072_data.value = HAL_ADC_GetValue(hadc);
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f004 f9c3 	bl	8004e14 <HAL_ADC_GetValue>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	b29a      	uxth	r2, r3
 8000a92:	4b04      	ldr	r3, [pc, #16]	; (8000aa4 <HAL_ADC_ConvCpltCallback+0x24>)
 8000a94:	801a      	strh	r2, [r3, #0]

	HAL_ADC_Stop_IT(hadc);
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f004 f980 	bl	8004d9c <HAL_ADC_Stop_IT>
}
 8000a9c:	bf00      	nop
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	200000d0 	.word	0x200000d0

08000aa8 <bq24072_init>:

int32_t bq24072_init(void) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
	// Read initial states
	bq24072_handle_power_good();
 8000aac:	f000 f80c 	bl	8000ac8 <bq24072_handle_power_good>
	bq24072_handle_charging();
 8000ab0:	f000 f822 	bl	8000af8 <bq24072_handle_charging>
	bq24072_poll();
 8000ab4:	f000 f838 	bl	8000b28 <bq24072_poll>

	// Start timer for voltage poll
	HAL_TIM_Base_Start_IT(&htim1);
 8000ab8:	4802      	ldr	r0, [pc, #8]	; (8000ac4 <bq24072_init+0x1c>)
 8000aba:	f010 f959 	bl	8010d70 <HAL_TIM_Base_Start_IT>

	return 0;
 8000abe:	2300      	movs	r3, #0
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	200005c8 	.word	0x200005c8

08000ac8 <bq24072_handle_power_good>:

void bq24072_handle_power_good(void) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
	bq24072_data.power_good = !(HAL_GPIO_ReadPin(
			bq_pins[BQ24072_PIN_PGOOD].bank, bq_pins[BQ24072_PIN_PGOOD].pin)
 8000acc:	4a08      	ldr	r2, [pc, #32]	; (8000af0 <bq24072_handle_power_good+0x28>)
 8000ace:	2304      	movs	r3, #4
	bq24072_data.power_good = !(HAL_GPIO_ReadPin(
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4610      	mov	r0, r2
 8000ad6:	f008 fe17 	bl	8009708 <HAL_GPIO_ReadPin>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	bf14      	ite	ne
 8000ae0:	2301      	movne	r3, #1
 8000ae2:	2300      	moveq	r3, #0
 8000ae4:	b2da      	uxtb	r2, r3
 8000ae6:	4b03      	ldr	r3, [pc, #12]	; (8000af4 <bq24072_handle_power_good+0x2c>)
 8000ae8:	70da      	strb	r2, [r3, #3]
			== GPIO_PIN_SET);
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	58020000 	.word	0x58020000
 8000af4:	200000d0 	.word	0x200000d0

08000af8 <bq24072_handle_charging>:

void bq24072_handle_charging(void) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
	bq24072_data.charging = !(HAL_GPIO_ReadPin(bq_pins[BQ24072_PIN_CHG].bank,
 8000afc:	4a08      	ldr	r2, [pc, #32]	; (8000b20 <bq24072_handle_charging+0x28>)
			bq_pins[BQ24072_PIN_CHG].pin) == GPIO_PIN_SET);
 8000afe:	2380      	movs	r3, #128	; 0x80
	bq24072_data.charging = !(HAL_GPIO_ReadPin(bq_pins[BQ24072_PIN_CHG].bank,
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	4619      	mov	r1, r3
 8000b04:	4610      	mov	r0, r2
 8000b06:	f008 fdff 	bl	8009708 <HAL_GPIO_ReadPin>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	bf14      	ite	ne
 8000b10:	2301      	movne	r3, #1
 8000b12:	2300      	moveq	r3, #0
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <bq24072_handle_charging+0x2c>)
 8000b18:	709a      	strb	r2, [r3, #2]
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	58021000 	.word	0x58021000
 8000b24:	200000d0 	.word	0x200000d0

08000b28 <bq24072_poll>:
	}

	return percent;
}

void bq24072_poll(void) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_IT(&hadc1);
 8000b2c:	4802      	ldr	r0, [pc, #8]	; (8000b38 <bq24072_poll+0x10>)
 8000b2e:	f004 f807 	bl	8004b40 <HAL_ADC_Start_IT>
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000210 	.word	0x20000210

08000b3c <buttons_get>:
#include "stm32h7xx_hal.h"
#include "main.h"

#include <stdbool.h>

uint32_t buttons_get() {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
    bool left = HAL_GPIO_ReadPin(BTN_Left_GPIO_Port, BTN_Left_Pin) == GPIO_PIN_RESET;
 8000b42:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b46:	4843      	ldr	r0, [pc, #268]	; (8000c54 <buttons_get+0x118>)
 8000b48:	f008 fdde 	bl	8009708 <HAL_GPIO_ReadPin>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	bf0c      	ite	eq
 8000b52:	2301      	moveq	r3, #1
 8000b54:	2300      	movne	r3, #0
 8000b56:	73fb      	strb	r3, [r7, #15]
    bool right = HAL_GPIO_ReadPin(BTN_Right_GPIO_Port, BTN_Right_Pin) == GPIO_PIN_RESET;
 8000b58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b5c:	483d      	ldr	r0, [pc, #244]	; (8000c54 <buttons_get+0x118>)
 8000b5e:	f008 fdd3 	bl	8009708 <HAL_GPIO_ReadPin>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	bf0c      	ite	eq
 8000b68:	2301      	moveq	r3, #1
 8000b6a:	2300      	movne	r3, #0
 8000b6c:	73bb      	strb	r3, [r7, #14]
    bool up = HAL_GPIO_ReadPin(BTN_Up_GPIO_Port, BTN_Up_Pin) == GPIO_PIN_RESET ;
 8000b6e:	2101      	movs	r1, #1
 8000b70:	4838      	ldr	r0, [pc, #224]	; (8000c54 <buttons_get+0x118>)
 8000b72:	f008 fdc9 	bl	8009708 <HAL_GPIO_ReadPin>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	bf0c      	ite	eq
 8000b7c:	2301      	moveq	r3, #1
 8000b7e:	2300      	movne	r3, #0
 8000b80:	737b      	strb	r3, [r7, #13]
    bool down = HAL_GPIO_ReadPin(BTN_Down_GPIO_Port, BTN_Down_Pin) == GPIO_PIN_RESET;
 8000b82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b86:	4833      	ldr	r0, [pc, #204]	; (8000c54 <buttons_get+0x118>)
 8000b88:	f008 fdbe 	bl	8009708 <HAL_GPIO_ReadPin>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	bf0c      	ite	eq
 8000b92:	2301      	moveq	r3, #1
 8000b94:	2300      	movne	r3, #0
 8000b96:	733b      	strb	r3, [r7, #12]
    bool a = HAL_GPIO_ReadPin(BTN_A_GPIO_Port, BTN_A_Pin) == GPIO_PIN_RESET;
 8000b98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b9c:	482d      	ldr	r0, [pc, #180]	; (8000c54 <buttons_get+0x118>)
 8000b9e:	f008 fdb3 	bl	8009708 <HAL_GPIO_ReadPin>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	bf0c      	ite	eq
 8000ba8:	2301      	moveq	r3, #1
 8000baa:	2300      	movne	r3, #0
 8000bac:	72fb      	strb	r3, [r7, #11]
    bool b = HAL_GPIO_ReadPin(BTN_B_GPIO_Port, BTN_B_Pin) == GPIO_PIN_RESET;
 8000bae:	2120      	movs	r1, #32
 8000bb0:	4828      	ldr	r0, [pc, #160]	; (8000c54 <buttons_get+0x118>)
 8000bb2:	f008 fda9 	bl	8009708 <HAL_GPIO_ReadPin>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	bf0c      	ite	eq
 8000bbc:	2301      	moveq	r3, #1
 8000bbe:	2300      	movne	r3, #0
 8000bc0:	72bb      	strb	r3, [r7, #10]
    bool time = HAL_GPIO_ReadPin(BTN_TIME_GPIO_Port, BTN_TIME_Pin) == GPIO_PIN_RESET;
 8000bc2:	2120      	movs	r1, #32
 8000bc4:	4824      	ldr	r0, [pc, #144]	; (8000c58 <buttons_get+0x11c>)
 8000bc6:	f008 fd9f 	bl	8009708 <HAL_GPIO_ReadPin>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	bf0c      	ite	eq
 8000bd0:	2301      	moveq	r3, #1
 8000bd2:	2300      	movne	r3, #0
 8000bd4:	727b      	strb	r3, [r7, #9]
    bool game = HAL_GPIO_ReadPin(BTN_GAME_GPIO_Port, BTN_GAME_Pin) == GPIO_PIN_RESET;
 8000bd6:	2102      	movs	r1, #2
 8000bd8:	481f      	ldr	r0, [pc, #124]	; (8000c58 <buttons_get+0x11c>)
 8000bda:	f008 fd95 	bl	8009708 <HAL_GPIO_ReadPin>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	bf0c      	ite	eq
 8000be4:	2301      	moveq	r3, #1
 8000be6:	2300      	movne	r3, #0
 8000be8:	723b      	strb	r3, [r7, #8]
    bool pause = HAL_GPIO_ReadPin(BTN_PAUSE_GPIO_Port, BTN_PAUSE_Pin) == GPIO_PIN_RESET;
 8000bea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bee:	481a      	ldr	r0, [pc, #104]	; (8000c58 <buttons_get+0x11c>)
 8000bf0:	f008 fd8a 	bl	8009708 <HAL_GPIO_ReadPin>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	bf0c      	ite	eq
 8000bfa:	2301      	moveq	r3, #1
 8000bfc:	2300      	movne	r3, #0
 8000bfe:	71fb      	strb	r3, [r7, #7]
    bool power = HAL_GPIO_ReadPin(BTN_PWR_GPIO_Port, BTN_PWR_Pin) == GPIO_PIN_RESET;
 8000c00:	2101      	movs	r1, #1
 8000c02:	4816      	ldr	r0, [pc, #88]	; (8000c5c <buttons_get+0x120>)
 8000c04:	f008 fd80 	bl	8009708 <HAL_GPIO_ReadPin>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	bf0c      	ite	eq
 8000c0e:	2301      	moveq	r3, #1
 8000c10:	2300      	movne	r3, #0
 8000c12:	71bb      	strb	r3, [r7, #6]

    //bool start = HAL_GPIO_ReadPin(BTN_START_GPIO_Port, BTN_START_Pin) == GPIO_PIN_RESET;
    //bool select = HAL_GPIO_ReadPin(BTN_SELECT_GPIO_Port, BTN_SELECT_Pin) == GPIO_PIN_RESET;

    return (
        left | (up << 1) | (right << 2) | (down << 3) | (a << 4) | (b << 5) |
 8000c14:	7bfa      	ldrb	r2, [r7, #15]
 8000c16:	7b7b      	ldrb	r3, [r7, #13]
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	431a      	orrs	r2, r3
 8000c1c:	7bbb      	ldrb	r3, [r7, #14]
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	431a      	orrs	r2, r3
 8000c22:	7b3b      	ldrb	r3, [r7, #12]
 8000c24:	00db      	lsls	r3, r3, #3
 8000c26:	431a      	orrs	r2, r3
 8000c28:	7afb      	ldrb	r3, [r7, #11]
 8000c2a:	011b      	lsls	r3, r3, #4
 8000c2c:	431a      	orrs	r2, r3
 8000c2e:	7abb      	ldrb	r3, [r7, #10]
 8000c30:	015b      	lsls	r3, r3, #5
 8000c32:	431a      	orrs	r2, r3
        (time << 6) | (game << 7) | (pause << 8) | (power << 9)// | (start << 10) | (select << 11)
 8000c34:	7a7b      	ldrb	r3, [r7, #9]
 8000c36:	019b      	lsls	r3, r3, #6
        left | (up << 1) | (right << 2) | (down << 3) | (a << 4) | (b << 5) |
 8000c38:	431a      	orrs	r2, r3
        (time << 6) | (game << 7) | (pause << 8) | (power << 9)// | (start << 10) | (select << 11)
 8000c3a:	7a3b      	ldrb	r3, [r7, #8]
 8000c3c:	01db      	lsls	r3, r3, #7
 8000c3e:	431a      	orrs	r2, r3
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	021b      	lsls	r3, r3, #8
 8000c44:	431a      	orrs	r2, r3
 8000c46:	79bb      	ldrb	r3, [r7, #6]
 8000c48:	025b      	lsls	r3, r3, #9
 8000c4a:	4313      	orrs	r3, r2
    );


}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3710      	adds	r7, #16
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	58020c00 	.word	0x58020c00
 8000c58:	58020800 	.word	0x58020800
 8000c5c:	58020000 	.word	0x58020000

08000c60 <set_ospi_cmd>:
static void set_ospi_cmd(OSPI_RegularCmdTypeDef *ospi_cmd,
                         const flash_cmd_t *cmd,
                         uint32_t address,
                         uint8_t *data,
                         size_t len)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
 8000c6c:	603b      	str	r3, [r7, #0]
    memset(ospi_cmd, 0x0, sizeof(*ospi_cmd));
 8000c6e:	2250      	movs	r2, #80	; 0x50
 8000c70:	2100      	movs	r1, #0
 8000c72:	68f8      	ldr	r0, [r7, #12]
 8000c74:	f010 ffe6 	bl	8011c44 <memset>

    ospi_cmd->OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
    ospi_cmd->FlashId = 0;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	2200      	movs	r2, #0
 8000c82:	605a      	str	r2, [r3, #4]
    ospi_cmd->Instruction = cmd->cmd;
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	609a      	str	r2, [r3, #8]
    ospi_cmd->InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
    ospi_cmd->InstructionMode = instruction_line_map[cmd->instr_lines];
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	785b      	ldrb	r3, [r3, #1]
 8000c98:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	4b20      	ldr	r3, [pc, #128]	; (8000d24 <set_ospi_cmd+0xc4>)
 8000ca2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	60da      	str	r2, [r3, #12]

    ospi_cmd->AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	2200      	movs	r2, #0
 8000cae:	62da      	str	r2, [r3, #44]	; 0x2c
    ospi_cmd->DummyCycles = cmd->dummy;
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	789b      	ldrb	r3, [r3, #2]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	645a      	str	r2, [r3, #68]	; 0x44
    ospi_cmd->DQSMode = HAL_OSPI_DQS_DISABLE;
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	649a      	str	r2, [r3, #72]	; 0x48
    ospi_cmd->SIOOMode = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	64da      	str	r2, [r3, #76]	; 0x4c
    ospi_cmd->InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	615a      	str	r2, [r3, #20]

    ospi_cmd->Address = address;
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	619a      	str	r2, [r3, #24]
    ospi_cmd->AddressSize = address_size_map[cmd->addr_size];
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	785b      	ldrb	r3, [r3, #1]
 8000cd6:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <set_ospi_cmd+0xc8>)
 8000ce0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	621a      	str	r2, [r3, #32]
    ospi_cmd->AddressMode = address_line_map[cmd->addr_lines];
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	785b      	ldrb	r3, [r3, #1]
 8000cec:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <set_ospi_cmd+0xcc>)
 8000cf6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	61da      	str	r2, [r3, #28]

    ospi_cmd->NbData = len;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	63da      	str	r2, [r3, #60]	; 0x3c
    ospi_cmd->DataMode = data_line_map[cmd->data_lines];
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	785b      	ldrb	r3, [r3, #1]
 8000d08:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	461a      	mov	r2, r3
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <set_ospi_cmd+0xd0>)
 8000d12:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000d1a:	bf00      	nop
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	080140e0 	.word	0x080140e0
 8000d28:	080140f8 	.word	0x080140f8
 8000d2c:	080140ec 	.word	0x080140ec
 8000d30:	08014108 	.word	0x08014108

08000d34 <OSPI_ReadBytes>:

static void OSPI_ReadBytes(const flash_cmd_t *cmd,
                           uint32_t address,
                           uint8_t *data,
                           size_t len)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b09c      	sub	sp, #112	; 0x70
 8000d38:	af02      	add	r7, sp, #8
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
 8000d40:	603b      	str	r3, [r7, #0]
    OSPI_RegularCmdTypeDef ospi_cmd;

    // DBG("RB %d 0x%08x 0x%08X %d\n", cmd->cmd, address, data, len);

    assert(flash.mem_mapped_enabled == false);
 8000d42:	4b1d      	ldr	r3, [pc, #116]	; (8000db8 <OSPI_ReadBytes+0x84>)
 8000d44:	7c1b      	ldrb	r3, [r3, #16]
 8000d46:	f083 0301 	eor.w	r3, r3, #1
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d106      	bne.n	8000d5e <OSPI_ReadBytes+0x2a>
 8000d50:	4b1a      	ldr	r3, [pc, #104]	; (8000dbc <OSPI_ReadBytes+0x88>)
 8000d52:	4a1b      	ldr	r2, [pc, #108]	; (8000dc0 <OSPI_ReadBytes+0x8c>)
 8000d54:	f240 11a3 	movw	r1, #419	; 0x1a3
 8000d58:	481a      	ldr	r0, [pc, #104]	; (8000dc4 <OSPI_ReadBytes+0x90>)
 8000d5a:	f010 fcaf 	bl	80116bc <__assert_func>

    set_ospi_cmd(&ospi_cmd,
 8000d5e:	f107 0014 	add.w	r0, r7, #20
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	9300      	str	r3, [sp, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	68ba      	ldr	r2, [r7, #8]
 8000d6a:	68f9      	ldr	r1, [r7, #12]
 8000d6c:	f7ff ff78 	bl	8000c60 <set_ospi_cmd>
                 len);

    //wdog_refresh();

    HAL_StatusTypeDef res;
    res = HAL_OSPI_Command(flash.hospi, &ospi_cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8000d70:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <OSPI_ReadBytes+0x84>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f107 0114 	add.w	r1, r7, #20
 8000d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f009 fb05 	bl	800a38c <HAL_OSPI_Command>
 8000d82:	4603      	mov	r3, r0
 8000d84:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (res != HAL_OK) {
 8000d88:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <OSPI_ReadBytes+0x60>
        Error_Handler();
 8000d90:	f002 fa16 	bl	80031c0 <Error_Handler>
    }

    if (HAL_OSPI_Receive(flash.hospi, data, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000d94:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <OSPI_ReadBytes+0x84>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d9c:	6879      	ldr	r1, [r7, #4]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f009 fbf4 	bl	800a58c <HAL_OSPI_Receive>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <OSPI_ReadBytes+0x7a>
        Error_Handler();
 8000daa:	f002 fa09 	bl	80031c0 <Error_Handler>
    }
}
 8000dae:	bf00      	nop
 8000db0:	3768      	adds	r7, #104	; 0x68
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000010 	.word	0x20000010
 8000dbc:	08012c4c 	.word	0x08012c4c
 8000dc0:	08014440 	.word	0x08014440
 8000dc4:	08012c70 	.word	0x08012c70

08000dc8 <OSPI_WriteBytes>:

static void OSPI_WriteBytes(const flash_cmd_t *cmd,
                            uint32_t address,
                            const uint8_t *data,
                            size_t len)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b09a      	sub	sp, #104	; 0x68
 8000dcc:	af02      	add	r7, sp, #8
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
 8000dd4:	603b      	str	r3, [r7, #0]
    OSPI_RegularCmdTypeDef ospi_cmd;

    // DBG("WB %d 0x%08x 0x%08X %d\n", cmd->cmd, address, data, len);

    assert(flash.mem_mapped_enabled == false);
 8000dd6:	4b1c      	ldr	r3, [pc, #112]	; (8000e48 <OSPI_WriteBytes+0x80>)
 8000dd8:	7c1b      	ldrb	r3, [r3, #16]
 8000dda:	f083 0301 	eor.w	r3, r3, #1
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d106      	bne.n	8000df2 <OSPI_WriteBytes+0x2a>
 8000de4:	4b19      	ldr	r3, [pc, #100]	; (8000e4c <OSPI_WriteBytes+0x84>)
 8000de6:	4a1a      	ldr	r2, [pc, #104]	; (8000e50 <OSPI_WriteBytes+0x88>)
 8000de8:	f240 11c1 	movw	r1, #449	; 0x1c1
 8000dec:	4819      	ldr	r0, [pc, #100]	; (8000e54 <OSPI_WriteBytes+0x8c>)
 8000dee:	f010 fc65 	bl	80116bc <__assert_func>

    set_ospi_cmd(&ospi_cmd,
 8000df2:	f107 0010 	add.w	r0, r7, #16
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	9300      	str	r3, [sp, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	68ba      	ldr	r2, [r7, #8]
 8000dfe:	68f9      	ldr	r1, [r7, #12]
 8000e00:	f7ff ff2e 	bl	8000c60 <set_ospi_cmd>
                 (uint8_t *) data,
                 len);

    //wdog_refresh();

    if (HAL_OSPI_Command(flash.hospi, &ospi_cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000e04:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <OSPI_WriteBytes+0x80>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f107 0110 	add.w	r1, r7, #16
 8000e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e10:	4618      	mov	r0, r3
 8000e12:	f009 fabb 	bl	800a38c <HAL_OSPI_Command>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <OSPI_WriteBytes+0x58>
        Error_Handler();
 8000e1c:	f002 f9d0 	bl	80031c0 <Error_Handler>
    }

    if (len > 0) {
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d00c      	beq.n	8000e40 <OSPI_WriteBytes+0x78>
        if (HAL_OSPI_Transmit(flash.hospi, (uint8_t *) data, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000e26:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <OSPI_WriteBytes+0x80>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e2e:	6879      	ldr	r1, [r7, #4]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f009 fb38 	bl	800a4a6 <HAL_OSPI_Transmit>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <OSPI_WriteBytes+0x78>
            Error_Handler();
 8000e3c:	f002 f9c0 	bl	80031c0 <Error_Handler>
        }
    }
}
 8000e40:	bf00      	nop
 8000e42:	3760      	adds	r7, #96	; 0x60
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000010 	.word	0x20000010
 8000e4c:	08012c4c 	.word	0x08012c4c
 8000e50:	08014450 	.word	0x08014450
 8000e54:	08012c70 	.word	0x08012c70

08000e58 <wait_for_status>:

static void wait_for_status(uint8_t mask, uint8_t value, uint32_t timeout)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	603a      	str	r2, [r7, #0]
 8000e62:	71fb      	strb	r3, [r7, #7]
 8000e64:	460b      	mov	r3, r1
 8000e66:	71bb      	strb	r3, [r7, #6]
    uint8_t status;

    uint32_t t0 = HAL_GetTick();
 8000e68:	f003 f908 	bl	800407c <HAL_GetTick>
 8000e6c:	60f8      	str	r0, [r7, #12]

    do {
        OSPI_ReadBytes(CMD(RDSR), 0, &status, 1);
 8000e6e:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <wait_for_status+0x68>)
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	1cd8      	adds	r0, r3, #3
 8000e76:	f107 020b 	add.w	r2, r7, #11
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	f7ff ff59 	bl	8000d34 <OSPI_ReadBytes>

#if 0
        printf("Status: %02X\n", status);
        HAL_Delay(500);
#endif
        if ((timeout > 0) && (HAL_GetTick() > t0 + timeout)) {
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d00e      	beq.n	8000ea6 <wait_for_status+0x4e>
 8000e88:	f003 f8f8 	bl	800407c <HAL_GetTick>
 8000e8c:	4601      	mov	r1, r0
 8000e8e:	68fa      	ldr	r2, [r7, #12]
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	4413      	add	r3, r2
 8000e94:	4299      	cmp	r1, r3
 8000e96:	d906      	bls.n	8000ea6 <wait_for_status+0x4e>
            assert(!"Status poll timeout!");
 8000e98:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <wait_for_status+0x6c>)
 8000e9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ec8 <wait_for_status+0x70>)
 8000e9c:	f240 11e5 	movw	r1, #485	; 0x1e5
 8000ea0:	480a      	ldr	r0, [pc, #40]	; (8000ecc <wait_for_status+0x74>)
 8000ea2:	f010 fc0b 	bl	80116bc <__assert_func>
            break;
        }
    } while ((status & mask) != value);
 8000ea6:	7afa      	ldrb	r2, [r7, #11]
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	79ba      	ldrb	r2, [r7, #6]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d1dc      	bne.n	8000e6e <wait_for_status+0x16>
}
 8000eb4:	bf00      	nop
 8000eb6:	bf00      	nop
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000010 	.word	0x20000010
 8000ec4:	08012c94 	.word	0x08012c94
 8000ec8:	08014460 	.word	0x08014460
 8000ecc:	08012c70 	.word	0x08012c70

08000ed0 <OSPI_EnableMemoryMappedMode>:

void OSPI_EnableMemoryMappedMode(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b09a      	sub	sp, #104	; 0x68
 8000ed4:	af02      	add	r7, sp, #8
    OSPI_MemoryMappedTypeDef sMemMappedCfg;
    OSPI_RegularCmdTypeDef ospi_cmd;
    const flash_cmd_t *cmd = CMD(READ);
 8000ed6:	4b28      	ldr	r3, [pc, #160]	; (8000f78 <OSPI_EnableMemoryMappedMode+0xa8>)
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	332a      	adds	r3, #42	; 0x2a
 8000ede:	65fb      	str	r3, [r7, #92]	; 0x5c

    assert(flash.mem_mapped_enabled == false);
 8000ee0:	4b25      	ldr	r3, [pc, #148]	; (8000f78 <OSPI_EnableMemoryMappedMode+0xa8>)
 8000ee2:	7c1b      	ldrb	r3, [r3, #16]
 8000ee4:	f083 0301 	eor.w	r3, r3, #1
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d106      	bne.n	8000efc <OSPI_EnableMemoryMappedMode+0x2c>
 8000eee:	4b23      	ldr	r3, [pc, #140]	; (8000f7c <OSPI_EnableMemoryMappedMode+0xac>)
 8000ef0:	4a23      	ldr	r2, [pc, #140]	; (8000f80 <OSPI_EnableMemoryMappedMode+0xb0>)
 8000ef2:	f240 11f1 	movw	r1, #497	; 0x1f1
 8000ef6:	4823      	ldr	r0, [pc, #140]	; (8000f84 <OSPI_EnableMemoryMappedMode+0xb4>)
 8000ef8:	f010 fbe0 	bl	80116bc <__assert_func>

    set_ospi_cmd(&ospi_cmd, cmd, 0, NULL, 0);
 8000efc:	1d38      	adds	r0, r7, #4
 8000efe:	2300      	movs	r3, #0
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	2300      	movs	r3, #0
 8000f04:	2200      	movs	r2, #0
 8000f06:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8000f08:	f7ff feaa 	bl	8000c60 <set_ospi_cmd>

    // Memory-mapped mode configuration for linear burst read operations
    ospi_cmd.OperationType = HAL_OSPI_OPTYPE_READ_CFG;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	607b      	str	r3, [r7, #4]
    if (HAL_OSPI_Command(flash.hospi, &ospi_cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000f10:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <OSPI_EnableMemoryMappedMode+0xa8>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	1d39      	adds	r1, r7, #4
 8000f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f009 fa36 	bl	800a38c <HAL_OSPI_Command>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <OSPI_EnableMemoryMappedMode+0x5a>
        Error_Handler();
 8000f26:	f002 f94b 	bl	80031c0 <Error_Handler>
    }

    // Use read instruction for write (in order to not alter the flash by accident)
    ospi_cmd.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	607b      	str	r3, [r7, #4]
    if (HAL_OSPI_Command(flash.hospi, &ospi_cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000f2e:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <OSPI_EnableMemoryMappedMode+0xa8>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	1d39      	adds	r1, r7, #4
 8000f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f009 fa27 	bl	800a38c <HAL_OSPI_Command>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <OSPI_EnableMemoryMappedMode+0x78>
        Error_Handler();
 8000f44:	f002 f93c 	bl	80031c0 <Error_Handler>
    }

    // Disable timeout counter for memory mapped mode
    sMemMappedCfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	657b      	str	r3, [r7, #84]	; 0x54
    sMemMappedCfg.TimeOutPeriod = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	65bb      	str	r3, [r7, #88]	; 0x58

    // Enable memory mapped mode
    if (HAL_OSPI_MemoryMapped(flash.hospi, &sMemMappedCfg) != HAL_OK) {
 8000f50:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <OSPI_EnableMemoryMappedMode+0xa8>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8000f58:	4611      	mov	r1, r2
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f009 fbba 	bl	800a6d4 <HAL_OSPI_MemoryMapped>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <OSPI_EnableMemoryMappedMode+0x9a>
        Error_Handler();
 8000f66:	f002 f92b 	bl	80031c0 <Error_Handler>
    }

    flash.mem_mapped_enabled = true;
 8000f6a:	4b03      	ldr	r3, [pc, #12]	; (8000f78 <OSPI_EnableMemoryMappedMode+0xa8>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	741a      	strb	r2, [r3, #16]
}
 8000f70:	bf00      	nop
 8000f72:	3760      	adds	r7, #96	; 0x60
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000010 	.word	0x20000010
 8000f7c:	08012c4c 	.word	0x08012c4c
 8000f80:	08014470 	.word	0x08014470
 8000f84:	08012c70 	.word	0x08012c70

08000f88 <OSPI_NOR_WriteEnable>:
    // Wait for Write In Progress Bit to become zero
    wait_for_status(STATUS_WIP_Msk, 0, TMO_DEFAULT);
}

void OSPI_NOR_WriteEnable(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
    OSPI_WriteBytes(CMD(WREN), 0, NULL, 0);
 8000f8c:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <OSPI_NOR_WriteEnable+0x28>)
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f103 000c 	add.w	r0, r3, #12
 8000f96:	2300      	movs	r3, #0
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	f7ff ff14 	bl	8000dc8 <OSPI_WriteBytes>

    // Wait for Write Enable Latch to be set
    wait_for_status(STATUS_WEL_Msk, STATUS_WEL_Msk, TMO_DEFAULT);
 8000fa0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fa4:	2102      	movs	r1, #2
 8000fa6:	2002      	movs	r0, #2
 8000fa8:	f7ff ff56 	bl	8000e58 <wait_for_status>
}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000010 	.word	0x20000010

08000fb4 <init_mx_issi>:
{
    OSPI_ReadBytes(CMD(RDCR), 0, dest, 1);
}

static void init_mx_issi(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
    // Shared code for both MX and ISSI

    uint8_t rd_status;

    DBG("%s\n", __FUNCTION__);
 8000fba:	481e      	ldr	r0, [pc, #120]	; (8001034 <init_mx_issi+0x80>)
 8000fbc:	f010 fd42 	bl	8011a44 <puts>

    OSPI_ReadBytes(CMD(RDSR), 0, &rd_status, 1);
 8000fc0:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <init_mx_issi+0x84>)
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	1cd8      	adds	r0, r3, #3
 8000fc8:	1dfa      	adds	r2, r7, #7
 8000fca:	2301      	movs	r3, #1
 8000fcc:	2100      	movs	r1, #0
 8000fce:	f7ff feb1 	bl	8000d34 <OSPI_ReadBytes>

    if (flash.config->set_quad && ((rd_status & STATUS_QE_Msk) == 0)) {
 8000fd2:	4b19      	ldr	r3, [pc, #100]	; (8001038 <init_mx_issi+0x84>)
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	7d1b      	ldrb	r3, [r3, #20]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d027      	beq.n	800102c <init_mx_issi+0x78>
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d122      	bne.n	800102c <init_mx_issi+0x78>
        // WRSR - Write Status Register
        // Set Quad Enable bit (6) in status register. Other bits = 0.
        uint8_t wr_status = STATUS_QE_Msk;
 8000fe6:	2340      	movs	r3, #64	; 0x40
 8000fe8:	71bb      	strb	r3, [r7, #6]

        DBG("Setting QE bit.\n");
 8000fea:	4814      	ldr	r0, [pc, #80]	; (800103c <init_mx_issi+0x88>)
 8000fec:	f010 fd2a 	bl	8011a44 <puts>

        // Set the QE bit
        OSPI_NOR_WriteEnable();
 8000ff0:	f7ff ffca 	bl	8000f88 <OSPI_NOR_WriteEnable>
        OSPI_WriteBytes(CMD(WRSR), 0, &wr_status, 1);
 8000ff4:	4b10      	ldr	r3, [pc, #64]	; (8001038 <init_mx_issi+0x84>)
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	6818      	ldr	r0, [r3, #0]
 8000ffa:	1dba      	adds	r2, r7, #6
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	2100      	movs	r1, #0
 8001000:	f7ff fee2 	bl	8000dc8 <OSPI_WriteBytes>
        wait_for_status(STATUS_WIP_Msk, 0, TMO_DEFAULT);
 8001004:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001008:	2100      	movs	r1, #0
 800100a:	2001      	movs	r0, #1
 800100c:	f7ff ff24 	bl	8000e58 <wait_for_status>

        OSPI_ReadBytes(CMD(RDSR), 0, &rd_status, 1);
 8001010:	4b09      	ldr	r3, [pc, #36]	; (8001038 <init_mx_issi+0x84>)
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	1cd8      	adds	r0, r3, #3
 8001018:	1dfa      	adds	r2, r7, #7
 800101a:	2301      	movs	r3, #1
 800101c:	2100      	movs	r1, #0
 800101e:	f7ff fe89 	bl	8000d34 <OSPI_ReadBytes>
        DBG("QE bit set. Status: %02X\n", rd_status);
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	4619      	mov	r1, r3
 8001026:	4806      	ldr	r0, [pc, #24]	; (8001040 <init_mx_issi+0x8c>)
 8001028:	f010 fca6 	bl	8011978 <iprintf>
    }
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	0801448c 	.word	0x0801448c
 8001038:	20000010 	.word	0x20000010
 800103c:	08012de0 	.word	0x08012de0
 8001040:	08012df0 	.word	0x08012df0

08001044 <init_spansion>:

static void init_spansion(void)
{
 8001044:	b5b0      	push	{r4, r5, r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af04      	add	r7, sp, #16
    uint8_t rd_cr2;
    uint8_t rd_cr3;
    uint8_t rd_cr4;

    // SR[1-2]V
    OSPI_ReadBytes(CMD(RDSR), 0x00, &rd_sr1, 1);
 800104a:	4b44      	ldr	r3, [pc, #272]	; (800115c <init_spansion+0x118>)
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	1cd8      	adds	r0, r3, #3
 8001052:	1dfa      	adds	r2, r7, #7
 8001054:	2301      	movs	r3, #1
 8001056:	2100      	movs	r1, #0
 8001058:	f7ff fe6c 	bl	8000d34 <OSPI_ReadBytes>
    OSPI_ReadBytes(CMD(RDAR), 0x00800001, &rd_sr2, 1);
 800105c:	4b3f      	ldr	r3, [pc, #252]	; (800115c <init_spansion+0x118>)
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f103 0009 	add.w	r0, r3, #9
 8001066:	1dba      	adds	r2, r7, #6
 8001068:	2301      	movs	r3, #1
 800106a:	493d      	ldr	r1, [pc, #244]	; (8001160 <init_spansion+0x11c>)
 800106c:	f7ff fe62 	bl	8000d34 <OSPI_ReadBytes>

    // CR[1-4]NV
    OSPI_ReadBytes(CMD(RDCR), 0x00, &rd_cr1, 1);
 8001070:	4b3a      	ldr	r3, [pc, #232]	; (800115c <init_spansion+0x118>)
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	1d98      	adds	r0, r3, #6
 8001078:	1d7a      	adds	r2, r7, #5
 800107a:	2301      	movs	r3, #1
 800107c:	2100      	movs	r1, #0
 800107e:	f7ff fe59 	bl	8000d34 <OSPI_ReadBytes>
    OSPI_ReadBytes(CMD(RDAR), 0x03, &rd_cr2, 1);
 8001082:	4b36      	ldr	r3, [pc, #216]	; (800115c <init_spansion+0x118>)
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f103 0009 	add.w	r0, r3, #9
 800108c:	1d3a      	adds	r2, r7, #4
 800108e:	2301      	movs	r3, #1
 8001090:	2103      	movs	r1, #3
 8001092:	f7ff fe4f 	bl	8000d34 <OSPI_ReadBytes>
    OSPI_ReadBytes(CMD(RDAR), 0x04, &rd_cr3, 1);
 8001096:	4b31      	ldr	r3, [pc, #196]	; (800115c <init_spansion+0x118>)
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f103 0009 	add.w	r0, r3, #9
 80010a0:	1cfa      	adds	r2, r7, #3
 80010a2:	2301      	movs	r3, #1
 80010a4:	2104      	movs	r1, #4
 80010a6:	f7ff fe45 	bl	8000d34 <OSPI_ReadBytes>
    OSPI_ReadBytes(CMD(RDAR), 0x05, &rd_cr4, 1);
 80010aa:	4b2c      	ldr	r3, [pc, #176]	; (800115c <init_spansion+0x118>)
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f103 0009 	add.w	r0, r3, #9
 80010b4:	1cba      	adds	r2, r7, #2
 80010b6:	2301      	movs	r3, #1
 80010b8:	2105      	movs	r1, #5
 80010ba:	f7ff fe3b 	bl	8000d34 <OSPI_ReadBytes>

    DBG("SR1: %02X SR2: %02X CR: %02X %02X %02X %02X\n", rd_sr1, rd_sr2, rd_cr1, rd_cr2, rd_cr3, rd_cr4);
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	4618      	mov	r0, r3
 80010c2:	79bb      	ldrb	r3, [r7, #6]
 80010c4:	461c      	mov	r4, r3
 80010c6:	797b      	ldrb	r3, [r7, #5]
 80010c8:	461d      	mov	r5, r3
 80010ca:	793b      	ldrb	r3, [r7, #4]
 80010cc:	78fa      	ldrb	r2, [r7, #3]
 80010ce:	78b9      	ldrb	r1, [r7, #2]
 80010d0:	9102      	str	r1, [sp, #8]
 80010d2:	9201      	str	r2, [sp, #4]
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	462b      	mov	r3, r5
 80010d8:	4622      	mov	r2, r4
 80010da:	4601      	mov	r1, r0
 80010dc:	4821      	ldr	r0, [pc, #132]	; (8001164 <init_spansion+0x120>)
 80010de:	f010 fc4b 	bl	8011978 <iprintf>

    if (flash.config->set_quad && ((rd_cr1 & S_CR_QUAD_Msk) == 0)) {
 80010e2:	4b1e      	ldr	r3, [pc, #120]	; (800115c <init_spansion+0x118>)
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	7d1b      	ldrb	r3, [r3, #20]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d033      	beq.n	8001154 <init_spansion+0x110>
 80010ec:	797b      	ldrb	r3, [r7, #5]
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d12e      	bne.n	8001154 <init_spansion+0x110>
        // WRSR/WRR writes to {status, config}
        // Clear SR1V and set bit 1 (QUAD) in CR1NV
        uint8_t wr_sr[] = {0x00, S_CR_QUAD_Msk};
 80010f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010fa:	803b      	strh	r3, [r7, #0]

        DBG("Setting QUAD in CR1V.\n");
 80010fc:	481a      	ldr	r0, [pc, #104]	; (8001168 <init_spansion+0x124>)
 80010fe:	f010 fca1 	bl	8011a44 <puts>

        // Enable write to be allowed to change the registers
        OSPI_NOR_WriteEnable();
 8001102:	f7ff ff41 	bl	8000f88 <OSPI_NOR_WriteEnable>

        OSPI_WriteBytes(CMD(WRSR), 0, wr_sr, sizeof(wr_sr));
 8001106:	4b15      	ldr	r3, [pc, #84]	; (800115c <init_spansion+0x118>)
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	6818      	ldr	r0, [r3, #0]
 800110c:	463a      	mov	r2, r7
 800110e:	2302      	movs	r3, #2
 8001110:	2100      	movs	r1, #0
 8001112:	f7ff fe59 	bl	8000dc8 <OSPI_WriteBytes>

        // Wait until WIP bit is cleared
        wait_for_status(STATUS_WIP_Msk, 0, TMO_DEFAULT);
 8001116:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800111a:	2100      	movs	r1, #0
 800111c:	2001      	movs	r0, #1
 800111e:	f7ff fe9b 	bl	8000e58 <wait_for_status>

        OSPI_ReadBytes(CMD(RDSR), 0, &rd_sr1, 1);
 8001122:	4b0e      	ldr	r3, [pc, #56]	; (800115c <init_spansion+0x118>)
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	1cd8      	adds	r0, r3, #3
 800112a:	1dfa      	adds	r2, r7, #7
 800112c:	2301      	movs	r3, #1
 800112e:	2100      	movs	r1, #0
 8001130:	f7ff fe00 	bl	8000d34 <OSPI_ReadBytes>
        OSPI_ReadBytes(CMD(RDCR), 0, &rd_cr1, 1);
 8001134:	4b09      	ldr	r3, [pc, #36]	; (800115c <init_spansion+0x118>)
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	1d98      	adds	r0, r3, #6
 800113c:	1d7a      	adds	r2, r7, #5
 800113e:	2301      	movs	r3, #1
 8001140:	2100      	movs	r1, #0
 8001142:	f7ff fdf7 	bl	8000d34 <OSPI_ReadBytes>
        DBG("QUAD bit set. SR: %02X CR: %02X\n", rd_sr1, rd_cr1);
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	4619      	mov	r1, r3
 800114a:	797b      	ldrb	r3, [r7, #5]
 800114c:	461a      	mov	r2, r3
 800114e:	4807      	ldr	r0, [pc, #28]	; (800116c <init_spansion+0x128>)
 8001150:	f010 fc12 	bl	8011978 <iprintf>
    }
}
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bdb0      	pop	{r4, r5, r7, pc}
 800115c:	20000010 	.word	0x20000010
 8001160:	00800001 	.word	0x00800001
 8001164:	08012e0c 	.word	0x08012e0c
 8001168:	08012e3c 	.word	0x08012e3c
 800116c:	08012e54 	.word	0x08012e54

08001170 <init_winbond>:

static void init_winbond(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
	//                                    cmd   i_lines  a_lines  a_size         d_lines  dummy
	const flash_cmd_t cmd_rdsr2 = CMD_DEF(0x35, LINES_1, LINES_0, ADDR_SIZE_24B, LINES_1, 0);
 8001176:	4a7f      	ldr	r2, [pc, #508]	; (8001374 <init_winbond+0x204>)
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	6812      	ldr	r2, [r2, #0]
 800117e:	4611      	mov	r1, r2
 8001180:	8019      	strh	r1, [r3, #0]
 8001182:	3302      	adds	r3, #2
 8001184:	0c12      	lsrs	r2, r2, #16
 8001186:	701a      	strb	r2, [r3, #0]
	const flash_cmd_t cmd_rdsr3 = CMD_DEF(0x15, LINES_1, LINES_0, ADDR_SIZE_24B, LINES_1, 0);
 8001188:	4a7b      	ldr	r2, [pc, #492]	; (8001378 <init_winbond+0x208>)
 800118a:	f107 0310 	add.w	r3, r7, #16
 800118e:	6812      	ldr	r2, [r2, #0]
 8001190:	4611      	mov	r1, r2
 8001192:	8019      	strh	r1, [r3, #0]
 8001194:	3302      	adds	r3, #2
 8001196:	0c12      	lsrs	r2, r2, #16
 8001198:	701a      	strb	r2, [r3, #0]
	const flash_cmd_t cmd_wrsr2 = CMD_DEF(0x31, LINES_1, LINES_0, ADDR_SIZE_24B, LINES_1, 0);
 800119a:	4a78      	ldr	r2, [pc, #480]	; (800137c <init_winbond+0x20c>)
 800119c:	f107 030c 	add.w	r3, r7, #12
 80011a0:	6812      	ldr	r2, [r2, #0]
 80011a2:	4611      	mov	r1, r2
 80011a4:	8019      	strh	r1, [r3, #0]
 80011a6:	3302      	adds	r3, #2
 80011a8:	0c12      	lsrs	r2, r2, #16
 80011aa:	701a      	strb	r2, [r3, #0]
	const flash_cmd_t cmd_wrsr3 = CMD_DEF(0x11, LINES_1, LINES_0, ADDR_SIZE_24B, LINES_1, 0);
 80011ac:	4a74      	ldr	r2, [pc, #464]	; (8001380 <init_winbond+0x210>)
 80011ae:	f107 0308 	add.w	r3, r7, #8
 80011b2:	6812      	ldr	r2, [r2, #0]
 80011b4:	4611      	mov	r1, r2
 80011b6:	8019      	strh	r1, [r3, #0]
 80011b8:	3302      	adds	r3, #2
 80011ba:	0c12      	lsrs	r2, r2, #16
 80011bc:	701a      	strb	r2, [r3, #0]

	const bool is_quad = flash.config->set_quad;
 80011be:	4b71      	ldr	r3, [pc, #452]	; (8001384 <init_winbond+0x214>)
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	7d1b      	ldrb	r3, [r3, #20]
 80011c4:	75fb      	strb	r3, [r7, #23]

	uint8_t sr1, sr2, sr3;

	OSPI_ReadBytes(CMD(RDSR),  0, &sr1, 1);
 80011c6:	4b6f      	ldr	r3, [pc, #444]	; (8001384 <init_winbond+0x214>)
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	1cd8      	adds	r0, r3, #3
 80011ce:	1dfa      	adds	r2, r7, #7
 80011d0:	2301      	movs	r3, #1
 80011d2:	2100      	movs	r1, #0
 80011d4:	f7ff fdae 	bl	8000d34 <OSPI_ReadBytes>
	OSPI_ReadBytes(&cmd_rdsr2, 0, &sr2, 1);
 80011d8:	1dba      	adds	r2, r7, #6
 80011da:	f107 0014 	add.w	r0, r7, #20
 80011de:	2301      	movs	r3, #1
 80011e0:	2100      	movs	r1, #0
 80011e2:	f7ff fda7 	bl	8000d34 <OSPI_ReadBytes>
	OSPI_ReadBytes(&cmd_rdsr3, 0, &sr3, 1);
 80011e6:	1d7a      	adds	r2, r7, #5
 80011e8:	f107 0010 	add.w	r0, r7, #16
 80011ec:	2301      	movs	r3, #1
 80011ee:	2100      	movs	r1, #0
 80011f0:	f7ff fda0 	bl	8000d34 <OSPI_ReadBytes>
	DBG("Winbond SR1: %02X SR2: %02X SR3: %02X\n", sr1, sr2, sr3);
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	4619      	mov	r1, r3
 80011f8:	79bb      	ldrb	r3, [r7, #6]
 80011fa:	461a      	mov	r2, r3
 80011fc:	797b      	ldrb	r3, [r7, #5]
 80011fe:	4862      	ldr	r0, [pc, #392]	; (8001388 <init_winbond+0x218>)
 8001200:	f010 fbba 	bl	8011978 <iprintf>

	// try to clear writeable protect bits if set

	if (sr1 & WB_SR1_PROTECT_Msk) {
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 800120a:	2b00      	cmp	r3, #0
 800120c:	d027      	beq.n	800125e <init_winbond+0xee>
		DBG("clearing SR1 protect bits\n");
 800120e:	485f      	ldr	r0, [pc, #380]	; (800138c <init_winbond+0x21c>)
 8001210:	f010 fc18 	bl	8011a44 <puts>
		sr1 = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	71fb      	strb	r3, [r7, #7]

		OSPI_NOR_WriteEnable();
 8001218:	f7ff feb6 	bl	8000f88 <OSPI_NOR_WriteEnable>
		OSPI_WriteBytes(CMD(WRSR), 0, &sr1, 1);
 800121c:	4b59      	ldr	r3, [pc, #356]	; (8001384 <init_winbond+0x214>)
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	6818      	ldr	r0, [r3, #0]
 8001222:	1dfa      	adds	r2, r7, #7
 8001224:	2301      	movs	r3, #1
 8001226:	2100      	movs	r1, #0
 8001228:	f7ff fdce 	bl	8000dc8 <OSPI_WriteBytes>
		wait_for_status(STATUS_WIP_Msk, 0, TMO_DEFAULT);
 800122c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001230:	2100      	movs	r1, #0
 8001232:	2001      	movs	r0, #1
 8001234:	f7ff fe10 	bl	8000e58 <wait_for_status>

		OSPI_ReadBytes(CMD(RDSR), 0, &sr1, 1);
 8001238:	4b52      	ldr	r3, [pc, #328]	; (8001384 <init_winbond+0x214>)
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	1cd8      	adds	r0, r3, #3
 8001240:	1dfa      	adds	r2, r7, #7
 8001242:	2301      	movs	r3, #1
 8001244:	2100      	movs	r1, #0
 8001246:	f7ff fd75 	bl	8000d34 <OSPI_ReadBytes>
		if (sr1 & WB_SR1_PROTECT_Msk)
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8001250:	2b00      	cmp	r3, #0
 8001252:	d004      	beq.n	800125e <init_winbond+0xee>
			DBG("SR1: %02X, change failed\n", sr1);
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	4619      	mov	r1, r3
 8001258:	484d      	ldr	r0, [pc, #308]	; (8001390 <init_winbond+0x220>)
 800125a:	f010 fb8d 	bl	8011978 <iprintf>
	}

	if ((sr2 & WB_SR2_PROTECT_Msk) || (is_quad && !(sr2 & 1<<WB_SR2_QE_Pos))) {
 800125e:	79bb      	ldrb	r3, [r7, #6]
 8001260:	f003 0341 	and.w	r3, r3, #65	; 0x41
 8001264:	2b00      	cmp	r3, #0
 8001266:	d107      	bne.n	8001278 <init_winbond+0x108>
 8001268:	7dfb      	ldrb	r3, [r7, #23]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d039      	beq.n	80012e2 <init_winbond+0x172>
 800126e:	79bb      	ldrb	r3, [r7, #6]
 8001270:	f003 0302 	and.w	r3, r3, #2
 8001274:	2b00      	cmp	r3, #0
 8001276:	d134      	bne.n	80012e2 <init_winbond+0x172>
		DBG("clearing SR2 protect bits\n");
 8001278:	4846      	ldr	r0, [pc, #280]	; (8001394 <init_winbond+0x224>)
 800127a:	f010 fbe3 	bl	8011a44 <puts>
		sr2 = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	71bb      	strb	r3, [r7, #6]

		if (is_quad) {
 8001282:	7dfb      	ldrb	r3, [r7, #23]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d004      	beq.n	8001292 <init_winbond+0x122>
			DBG("and enabling quad mode\n");
 8001288:	4843      	ldr	r0, [pc, #268]	; (8001398 <init_winbond+0x228>)
 800128a:	f010 fbdb 	bl	8011a44 <puts>
			sr2 = 1<<WB_SR2_QE_Pos;
 800128e:	2302      	movs	r3, #2
 8001290:	71bb      	strb	r3, [r7, #6]
		}

		OSPI_NOR_WriteEnable();
 8001292:	f7ff fe79 	bl	8000f88 <OSPI_NOR_WriteEnable>
		OSPI_WriteBytes(&cmd_wrsr2, 0, &sr2, 1);
 8001296:	1dba      	adds	r2, r7, #6
 8001298:	f107 000c 	add.w	r0, r7, #12
 800129c:	2301      	movs	r3, #1
 800129e:	2100      	movs	r1, #0
 80012a0:	f7ff fd92 	bl	8000dc8 <OSPI_WriteBytes>
		wait_for_status(STATUS_WIP_Msk, 0, TMO_DEFAULT);
 80012a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012a8:	2100      	movs	r1, #0
 80012aa:	2001      	movs	r0, #1
 80012ac:	f7ff fdd4 	bl	8000e58 <wait_for_status>

		OSPI_ReadBytes(&cmd_rdsr2, 0, &sr2, 1);
 80012b0:	1dba      	adds	r2, r7, #6
 80012b2:	f107 0014 	add.w	r0, r7, #20
 80012b6:	2301      	movs	r3, #1
 80012b8:	2100      	movs	r1, #0
 80012ba:	f7ff fd3b 	bl	8000d34 <OSPI_ReadBytes>
		if ((sr2 & WB_SR2_PROTECT_Msk) || (is_quad && !(sr2 & 1<<WB_SR2_QE_Pos)))
 80012be:	79bb      	ldrb	r3, [r7, #6]
 80012c0:	f003 0341 	and.w	r3, r3, #65	; 0x41
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d107      	bne.n	80012d8 <init_winbond+0x168>
 80012c8:	7dfb      	ldrb	r3, [r7, #23]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d009      	beq.n	80012e2 <init_winbond+0x172>
 80012ce:	79bb      	ldrb	r3, [r7, #6]
 80012d0:	f003 0302 	and.w	r3, r3, #2
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d104      	bne.n	80012e2 <init_winbond+0x172>
			DBG("SR2: %02X, change failed\n", sr2);
 80012d8:	79bb      	ldrb	r3, [r7, #6]
 80012da:	4619      	mov	r1, r3
 80012dc:	482f      	ldr	r0, [pc, #188]	; (800139c <init_winbond+0x22c>)
 80012de:	f010 fb4b 	bl	8011978 <iprintf>
	}

	if ((sr3 & WB_SR3_PROTECT_Msk) || ((sr3 & WB_SR3_DRV_Msk) != WB_SR3_DRV_Val_50)) {
 80012e2:	797b      	ldrb	r3, [r7, #5]
 80012e4:	f003 0304 	and.w	r3, r3, #4
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d104      	bne.n	80012f6 <init_winbond+0x186>
 80012ec:	797b      	ldrb	r3, [r7, #5]
 80012ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80012f2:	2b40      	cmp	r3, #64	; 0x40
 80012f4:	d029      	beq.n	800134a <init_winbond+0x1da>
		DBG("clearing SR3 protect bits, setting drive strength 50%%\n");
 80012f6:	482a      	ldr	r0, [pc, #168]	; (80013a0 <init_winbond+0x230>)
 80012f8:	f010 fb3e 	bl	8011978 <iprintf>
		sr3 = WB_SR3_DRV_Val_50;
 80012fc:	2340      	movs	r3, #64	; 0x40
 80012fe:	717b      	strb	r3, [r7, #5]

		OSPI_NOR_WriteEnable();
 8001300:	f7ff fe42 	bl	8000f88 <OSPI_NOR_WriteEnable>
		OSPI_WriteBytes(&cmd_wrsr3, 0, &sr3, 1);
 8001304:	1d7a      	adds	r2, r7, #5
 8001306:	f107 0008 	add.w	r0, r7, #8
 800130a:	2301      	movs	r3, #1
 800130c:	2100      	movs	r1, #0
 800130e:	f7ff fd5b 	bl	8000dc8 <OSPI_WriteBytes>
		wait_for_status(STATUS_WIP_Msk, 0, TMO_DEFAULT);
 8001312:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001316:	2100      	movs	r1, #0
 8001318:	2001      	movs	r0, #1
 800131a:	f7ff fd9d 	bl	8000e58 <wait_for_status>

		OSPI_ReadBytes(&cmd_rdsr3, 0, &sr3, 1);
 800131e:	1d7a      	adds	r2, r7, #5
 8001320:	f107 0010 	add.w	r0, r7, #16
 8001324:	2301      	movs	r3, #1
 8001326:	2100      	movs	r1, #0
 8001328:	f7ff fd04 	bl	8000d34 <OSPI_ReadBytes>
		if ((sr3 & WB_SR3_PROTECT_Msk) || ((sr3 & WB_SR3_DRV_Msk) != WB_SR3_DRV_Val_50))
 800132c:	797b      	ldrb	r3, [r7, #5]
 800132e:	f003 0304 	and.w	r3, r3, #4
 8001332:	2b00      	cmp	r3, #0
 8001334:	d104      	bne.n	8001340 <init_winbond+0x1d0>
 8001336:	797b      	ldrb	r3, [r7, #5]
 8001338:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800133c:	2b40      	cmp	r3, #64	; 0x40
 800133e:	d004      	beq.n	800134a <init_winbond+0x1da>
			DBG("SR3: %02X, change failed\n", sr3);
 8001340:	797b      	ldrb	r3, [r7, #5]
 8001342:	4619      	mov	r1, r3
 8001344:	4817      	ldr	r0, [pc, #92]	; (80013a4 <init_winbond+0x234>)
 8001346:	f010 fb17 	bl	8011978 <iprintf>
	}

    if (is_quad && !(sr2 & 1<<WB_SR2_QE_Pos)) {
 800134a:	7dfb      	ldrb	r3, [r7, #23]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d00d      	beq.n	800136c <init_winbond+0x1fc>
 8001350:	79bb      	ldrb	r3, [r7, #6]
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d108      	bne.n	800136c <init_winbond+0x1fc>
        DBG("Windbond quad mode not enabled, falling back to SPI\n");
 800135a:	4813      	ldr	r0, [pc, #76]	; (80013a8 <init_winbond+0x238>)
 800135c:	f010 fb72 	bl	8011a44 <puts>
        flash.config = &config_spi_24b;
 8001360:	4b08      	ldr	r3, [pc, #32]	; (8001384 <init_winbond+0x214>)
 8001362:	4a12      	ldr	r2, [pc, #72]	; (80013ac <init_winbond+0x23c>)
 8001364:	609a      	str	r2, [r3, #8]
        flash.name = "Winbond SPI";
 8001366:	4b07      	ldr	r3, [pc, #28]	; (8001384 <init_winbond+0x214>)
 8001368:	4a11      	ldr	r2, [pc, #68]	; (80013b0 <init_winbond+0x240>)
 800136a:	60da      	str	r2, [r3, #12]
    }
}
 800136c:	bf00      	nop
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	08012fbc 	.word	0x08012fbc
 8001378:	08012fc0 	.word	0x08012fc0
 800137c:	08012fc4 	.word	0x08012fc4
 8001380:	08012fc8 	.word	0x08012fc8
 8001384:	20000010 	.word	0x20000010
 8001388:	08012e78 	.word	0x08012e78
 800138c:	08012ea0 	.word	0x08012ea0
 8001390:	08012ebc 	.word	0x08012ebc
 8001394:	08012ed8 	.word	0x08012ed8
 8001398:	08012ef4 	.word	0x08012ef4
 800139c:	08012f0c 	.word	0x08012f0c
 80013a0:	08012f28 	.word	0x08012f28
 80013a4:	08012f60 	.word	0x08012f60
 80013a8:	08012f7c 	.word	0x08012f7c
 80013ac:	08014294 	.word	0x08014294
 80013b0:	08012fb0 	.word	0x08012fb0

080013b4 <OSPI_Init>:
    // Assumes that erase sizes are sorted: 4 > 3 > 2 > 1.
    return flash.config->erase_sizes[0];
}

void OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
    uint8_t status;

    flash.hospi = hospi;
 80013bc:	4a4c      	ldr	r2, [pc, #304]	; (80014f0 <OSPI_Init+0x13c>)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6013      	str	r3, [r2, #0]

    // Enable Reset
    OSPI_WriteBytes(CMD(RSTEN), 0, NULL, 0);
 80013c2:	4b4b      	ldr	r3, [pc, #300]	; (80014f0 <OSPI_Init+0x13c>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f103 0012 	add.w	r0, r3, #18
 80013cc:	2300      	movs	r3, #0
 80013ce:	2200      	movs	r2, #0
 80013d0:	2100      	movs	r1, #0
 80013d2:	f7ff fcf9 	bl	8000dc8 <OSPI_WriteBytes>
    HAL_Delay(2);
 80013d6:	2002      	movs	r0, #2
 80013d8:	f002 fe5c 	bl	8004094 <HAL_Delay>

    // Reset
    OSPI_WriteBytes(CMD(RST), 0, NULL, 0);
 80013dc:	4b44      	ldr	r3, [pc, #272]	; (80014f0 <OSPI_Init+0x13c>)
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f103 0015 	add.w	r0, r3, #21
 80013e6:	2300      	movs	r3, #0
 80013e8:	2200      	movs	r2, #0
 80013ea:	2100      	movs	r1, #0
 80013ec:	f7ff fcec 	bl	8000dc8 <OSPI_WriteBytes>
    HAL_Delay(20);
 80013f0:	2014      	movs	r0, #20
 80013f2:	f002 fe4f 	bl	8004094 <HAL_Delay>

    // Read ID
    OSPI_ReadBytes(CMD(RDID), 0, &flash.jedec_id.u8[0], 3);
 80013f6:	4b3e      	ldr	r3, [pc, #248]	; (80014f0 <OSPI_Init+0x13c>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f103 000f 	add.w	r0, r3, #15
 8001400:	2303      	movs	r3, #3
 8001402:	4a3c      	ldr	r2, [pc, #240]	; (80014f4 <OSPI_Init+0x140>)
 8001404:	2100      	movs	r1, #0
 8001406:	f7ff fc95 	bl	8000d34 <OSPI_ReadBytes>
    DBG("JEDEC_ID: %02X %02X %02X\n", flash.jedec_id.u8[0], flash.jedec_id.u8[1], flash.jedec_id.u8[2]);
 800140a:	4b39      	ldr	r3, [pc, #228]	; (80014f0 <OSPI_Init+0x13c>)
 800140c:	791b      	ldrb	r3, [r3, #4]
 800140e:	4619      	mov	r1, r3
 8001410:	4b37      	ldr	r3, [pc, #220]	; (80014f0 <OSPI_Init+0x13c>)
 8001412:	795b      	ldrb	r3, [r3, #5]
 8001414:	461a      	mov	r2, r3
 8001416:	4b36      	ldr	r3, [pc, #216]	; (80014f0 <OSPI_Init+0x13c>)
 8001418:	799b      	ldrb	r3, [r3, #6]
 800141a:	4837      	ldr	r0, [pc, #220]	; (80014f8 <OSPI_Init+0x144>)
 800141c:	f010 faac 	bl	8011978 <iprintf>

    // Check for known bad IDs
    if (((flash.jedec_id.u32 & 0xffffff) == 0xffffff) ||
 8001420:	4b33      	ldr	r3, [pc, #204]	; (80014f0 <OSPI_Init+0x13c>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001428:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800142c:	4293      	cmp	r3, r2
 800142e:	d005      	beq.n	800143c <OSPI_Init+0x88>
        ((flash.jedec_id.u32 & 0xffffff) == 0x000000)) {
 8001430:	4b2f      	ldr	r3, [pc, #188]	; (80014f0 <OSPI_Init+0x13c>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    if (((flash.jedec_id.u32 & 0xffffff) == 0xffffff) ||
 8001438:	2b00      	cmp	r3, #0
 800143a:	d106      	bne.n	800144a <OSPI_Init+0x96>
        assert(!"Can't communicate with the external flash! Please check the soldering.");
 800143c:	4b2f      	ldr	r3, [pc, #188]	; (80014fc <OSPI_Init+0x148>)
 800143e:	4a30      	ldr	r2, [pc, #192]	; (8001500 <OSPI_Init+0x14c>)
 8001440:	f240 3149 	movw	r1, #841	; 0x349
 8001444:	482f      	ldr	r0, [pc, #188]	; (8001504 <OSPI_Init+0x150>)
 8001446:	f010 f939 	bl	80116bc <__assert_func>
    }

    OSPI_ReadBytes(CMD(RDSR), 0, &status, 1);
 800144a:	4b29      	ldr	r3, [pc, #164]	; (80014f0 <OSPI_Init+0x13c>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	1cd8      	adds	r0, r3, #3
 8001452:	f107 020b 	add.w	r2, r7, #11
 8001456:	2301      	movs	r3, #1
 8001458:	2100      	movs	r1, #0
 800145a:	f7ff fc6b 	bl	8000d34 <OSPI_ReadBytes>
    DBG("Status: %02X\n", status);
 800145e:	7afb      	ldrb	r3, [r7, #11]
 8001460:	4619      	mov	r1, r3
 8001462:	4829      	ldr	r0, [pc, #164]	; (8001508 <OSPI_Init+0x154>)
 8001464:	f010 fa88 	bl	8011978 <iprintf>

    for (int i = 0; i < ARRAY_SIZE(jedec_map); i++) {
 8001468:	2300      	movs	r3, #0
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	e02e      	b.n	80014cc <OSPI_Init+0x118>
        if ((flash.jedec_id.u32 & 0xffffff) == (jedec_map[i].jedec_id.u32 & 0xffffff)) {
 800146e:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <OSPI_Init+0x13c>)
 8001470:	6859      	ldr	r1, [r3, #4]
 8001472:	4826      	ldr	r0, [pc, #152]	; (800150c <OSPI_Init+0x158>)
 8001474:	68fa      	ldr	r2, [r7, #12]
 8001476:	4613      	mov	r3, r2
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	4413      	add	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4403      	add	r3, r0
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	404b      	eors	r3, r1
 8001484:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d11c      	bne.n	80014c6 <OSPI_Init+0x112>
            flash.config = jedec_map[i].config;
 800148c:	491f      	ldr	r1, [pc, #124]	; (800150c <OSPI_Init+0x158>)
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	4613      	mov	r3, r2
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	4413      	add	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	440b      	add	r3, r1
 800149a:	3308      	adds	r3, #8
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a14      	ldr	r2, [pc, #80]	; (80014f0 <OSPI_Init+0x13c>)
 80014a0:	6093      	str	r3, [r2, #8]
            flash.name = jedec_map[i].name;
 80014a2:	491a      	ldr	r1, [pc, #104]	; (800150c <OSPI_Init+0x158>)
 80014a4:	68fa      	ldr	r2, [r7, #12]
 80014a6:	4613      	mov	r3, r2
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	4413      	add	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	440b      	add	r3, r1
 80014b0:	3304      	adds	r3, #4
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a0e      	ldr	r2, [pc, #56]	; (80014f0 <OSPI_Init+0x13c>)
 80014b6:	60d3      	str	r3, [r2, #12]
            DBG("Found config: %s\n", flash.name);
 80014b8:	4b0d      	ldr	r3, [pc, #52]	; (80014f0 <OSPI_Init+0x13c>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	4619      	mov	r1, r3
 80014be:	4814      	ldr	r0, [pc, #80]	; (8001510 <OSPI_Init+0x15c>)
 80014c0:	f010 fa5a 	bl	8011978 <iprintf>
            break;
 80014c4:	e005      	b.n	80014d2 <OSPI_Init+0x11e>
    for (int i = 0; i < ARRAY_SIZE(jedec_map); i++) {
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	3301      	adds	r3, #1
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2b10      	cmp	r3, #16
 80014d0:	d9cd      	bls.n	800146e <OSPI_Init+0xba>
        }
    }

    if (flash.config->init_fn) {
 80014d2:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <OSPI_Init+0x13c>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d003      	beq.n	80014e4 <OSPI_Init+0x130>
        flash.config->init_fn();
 80014dc:	4b04      	ldr	r3, [pc, #16]	; (80014f0 <OSPI_Init+0x13c>)
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	4798      	blx	r3
    }

    OSPI_EnableMemoryMappedMode();
 80014e4:	f7ff fcf4 	bl	8000ed0 <OSPI_EnableMemoryMappedMode>
}
 80014e8:	bf00      	nop
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000010 	.word	0x20000010
 80014f4:	20000014 	.word	0x20000014
 80014f8:	08012fcc 	.word	0x08012fcc
 80014fc:	08012fe8 	.word	0x08012fe8
 8001500:	0801449c 	.word	0x0801449c
 8001504:	08012c70 	.word	0x08012c70
 8001508:	08013034 	.word	0x08013034
 800150c:	08014374 	.word	0x08014374
 8001510:	08013044 	.word	0x08013044

08001514 <lcd_backlight_set>:
	HAL_DAC_Stop(&hdac1, DAC_CHANNEL_1);
	HAL_DAC_Stop(&hdac1, DAC_CHANNEL_2);
	HAL_DAC_Stop(&hdac2, DAC_CHANNEL_1);
}

void lcd_backlight_set(uint8_t brightness) {
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_8B_R, brightness);
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	2208      	movs	r2, #8
 8001522:	2100      	movs	r1, #0
 8001524:	480f      	ldr	r0, [pc, #60]	; (8001564 <lcd_backlight_set+0x50>)
 8001526:	f004 fe8e 	bl	8006246 <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_8B_R, brightness);
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	2208      	movs	r2, #8
 800152e:	2110      	movs	r1, #16
 8001530:	480c      	ldr	r0, [pc, #48]	; (8001564 <lcd_backlight_set+0x50>)
 8001532:	f004 fe88 	bl	8006246 <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_8B_R, brightness);
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	2208      	movs	r2, #8
 800153a:	2100      	movs	r1, #0
 800153c:	480a      	ldr	r0, [pc, #40]	; (8001568 <lcd_backlight_set+0x54>)
 800153e:	f004 fe82 	bl	8006246 <HAL_DAC_SetValue>

	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001542:	2100      	movs	r1, #0
 8001544:	4807      	ldr	r0, [pc, #28]	; (8001564 <lcd_backlight_set+0x50>)
 8001546:	f004 fe2c 	bl	80061a2 <HAL_DAC_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 800154a:	2110      	movs	r1, #16
 800154c:	4805      	ldr	r0, [pc, #20]	; (8001564 <lcd_backlight_set+0x50>)
 800154e:	f004 fe28 	bl	80061a2 <HAL_DAC_Start>
	HAL_DAC_Start(&hdac2, DAC_CHANNEL_1);
 8001552:	2100      	movs	r1, #0
 8001554:	4804      	ldr	r0, [pc, #16]	; (8001568 <lcd_backlight_set+0x54>)
 8001556:	f004 fe24 	bl	80061a2 <HAL_DAC_Start>
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000274 	.word	0x20000274
 8001568:	20000288 	.word	0x20000288

0800156c <lcd_init>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
	// Pull reset line(?) low. (Flakey without this)
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
}

void lcd_init(SPI_HandleTypeDef *spi, LTDC_HandleTypeDef *ltdc) {
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
// Wake
// Enable 3.3v
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 8001576:	2200      	movs	r2, #0
 8001578:	2102      	movs	r1, #2
 800157a:	489c      	ldr	r0, [pc, #624]	; (80017ec <lcd_init+0x280>)
 800157c:	f008 f8dc 	bl	8009738 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001580:	2001      	movs	r0, #1
 8001582:	f002 fd87 	bl	8004094 <HAL_Delay>
	// Enable 1.8V
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8001586:	2201      	movs	r2, #1
 8001588:	2110      	movs	r1, #16
 800158a:	4898      	ldr	r0, [pc, #608]	; (80017ec <lcd_init+0x280>)
 800158c:	f008 f8d4 	bl	8009738 <HAL_GPIO_WritePin>
	// also assert CS, not sure where to put this yet
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001590:	2201      	movs	r2, #1
 8001592:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001596:	4896      	ldr	r0, [pc, #600]	; (80017f0 <lcd_init+0x284>)
 8001598:	f008 f8ce 	bl	8009738 <HAL_GPIO_WritePin>
	HAL_Delay(7);
 800159c:	2007      	movs	r0, #7
 800159e:	f002 fd79 	bl	8004094 <HAL_Delay>

// HAL_SPI_Transmit(spi, (uint8_t *)"\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55", 10, 100);
	// Lets go, bootup sequence.
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
 80015a2:	2201      	movs	r2, #1
 80015a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015a8:	4890      	ldr	r0, [pc, #576]	; (80017ec <lcd_init+0x280>)
 80015aa:	f008 f8c5 	bl	8009738 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80015ae:	2002      	movs	r0, #2
 80015b0:	f002 fd70 	bl	8004094 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 80015b4:	2200      	movs	r2, #0
 80015b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015ba:	488c      	ldr	r0, [pc, #560]	; (80017ec <lcd_init+0x280>)
 80015bc:	f008 f8bc 	bl	8009738 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80015c0:	2002      	movs	r0, #2
 80015c2:	f002 fd67 	bl	8004094 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
 80015c6:	2201      	movs	r2, #1
 80015c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015cc:	4887      	ldr	r0, [pc, #540]	; (80017ec <lcd_init+0x280>)
 80015ce:	f008 f8b3 	bl	8009738 <HAL_GPIO_WritePin>

	HAL_Delay(10);
 80015d2:	200a      	movs	r0, #10
 80015d4:	f002 fd5e 	bl	8004094 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80015d8:	2200      	movs	r2, #0
 80015da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015de:	4884      	ldr	r0, [pc, #528]	; (80017f0 <lcd_init+0x284>)
 80015e0:	f008 f8aa 	bl	8009738 <HAL_GPIO_WritePin>
	HAL_Delay(45);
 80015e4:	202d      	movs	r0, #45	; 0x2d
 80015e6:	f002 fd55 	bl	8004094 <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\x08\x80", 2, 100);
 80015ea:	2364      	movs	r3, #100	; 0x64
 80015ec:	2202      	movs	r2, #2
 80015ee:	4981      	ldr	r1, [pc, #516]	; (80017f4 <lcd_init+0x288>)
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f00f f881 	bl	80106f8 <HAL_SPI_Transmit>
	HAL_Delay(2);
 80015f6:	2002      	movs	r0, #2
 80015f8:	f002 fd4c 	bl	8004094 <HAL_Delay>
	//wdog_refresh();

	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80015fc:	2201      	movs	r2, #1
 80015fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001602:	487b      	ldr	r0, [pc, #492]	; (80017f0 <lcd_init+0x284>)
 8001604:	f008 f898 	bl	8009738 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001608:	2200      	movs	r2, #0
 800160a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800160e:	4878      	ldr	r0, [pc, #480]	; (80017f0 <lcd_init+0x284>)
 8001610:	f008 f892 	bl	8009738 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8001614:	2002      	movs	r0, #2
 8001616:	f002 fd3d 	bl	8004094 <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\x6E\x80", 2, 100);
 800161a:	2364      	movs	r3, #100	; 0x64
 800161c:	2202      	movs	r2, #2
 800161e:	4976      	ldr	r1, [pc, #472]	; (80017f8 <lcd_init+0x28c>)
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f00f f869 	bl	80106f8 <HAL_SPI_Transmit>
	HAL_Delay(2);
 8001626:	2002      	movs	r0, #2
 8001628:	f002 fd34 	bl	8004094 <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800162c:	2201      	movs	r2, #1
 800162e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001632:	486f      	ldr	r0, [pc, #444]	; (80017f0 <lcd_init+0x284>)
 8001634:	f008 f880 	bl	8009738 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001638:	2200      	movs	r2, #0
 800163a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800163e:	486c      	ldr	r0, [pc, #432]	; (80017f0 <lcd_init+0x284>)
 8001640:	f008 f87a 	bl	8009738 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8001644:	2002      	movs	r0, #2
 8001646:	f002 fd25 	bl	8004094 <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\x80\x80", 2, 100);
 800164a:	2364      	movs	r3, #100	; 0x64
 800164c:	2202      	movs	r2, #2
 800164e:	496b      	ldr	r1, [pc, #428]	; (80017fc <lcd_init+0x290>)
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f00f f851 	bl	80106f8 <HAL_SPI_Transmit>

	HAL_Delay(2);
 8001656:	2002      	movs	r0, #2
 8001658:	f002 fd1c 	bl	8004094 <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800165c:	2201      	movs	r2, #1
 800165e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001662:	4863      	ldr	r0, [pc, #396]	; (80017f0 <lcd_init+0x284>)
 8001664:	f008 f868 	bl	8009738 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001668:	2200      	movs	r2, #0
 800166a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800166e:	4860      	ldr	r0, [pc, #384]	; (80017f0 <lcd_init+0x284>)
 8001670:	f008 f862 	bl	8009738 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8001674:	2002      	movs	r0, #2
 8001676:	f002 fd0d 	bl	8004094 <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\x68\x00", 2, 100);
 800167a:	2364      	movs	r3, #100	; 0x64
 800167c:	2202      	movs	r2, #2
 800167e:	4960      	ldr	r1, [pc, #384]	; (8001800 <lcd_init+0x294>)
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f00f f839 	bl	80106f8 <HAL_SPI_Transmit>
	HAL_Delay(2);
 8001686:	2002      	movs	r0, #2
 8001688:	f002 fd04 	bl	8004094 <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800168c:	2201      	movs	r2, #1
 800168e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001692:	4857      	ldr	r0, [pc, #348]	; (80017f0 <lcd_init+0x284>)
 8001694:	f008 f850 	bl	8009738 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001698:	2200      	movs	r2, #0
 800169a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800169e:	4854      	ldr	r0, [pc, #336]	; (80017f0 <lcd_init+0x284>)
 80016a0:	f008 f84a 	bl	8009738 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80016a4:	2002      	movs	r0, #2
 80016a6:	f002 fcf5 	bl	8004094 <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\xd0\x00", 2, 100);
 80016aa:	2364      	movs	r3, #100	; 0x64
 80016ac:	2202      	movs	r2, #2
 80016ae:	4955      	ldr	r1, [pc, #340]	; (8001804 <lcd_init+0x298>)
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f00f f821 	bl	80106f8 <HAL_SPI_Transmit>
	HAL_Delay(2);
 80016b6:	2002      	movs	r0, #2
 80016b8:	f002 fcec 	bl	8004094 <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80016bc:	2201      	movs	r2, #1
 80016be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016c2:	484b      	ldr	r0, [pc, #300]	; (80017f0 <lcd_init+0x284>)
 80016c4:	f008 f838 	bl	8009738 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80016c8:	2200      	movs	r2, #0
 80016ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016ce:	4848      	ldr	r0, [pc, #288]	; (80017f0 <lcd_init+0x284>)
 80016d0:	f008 f832 	bl	8009738 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80016d4:	2002      	movs	r0, #2
 80016d6:	f002 fcdd 	bl	8004094 <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\x1b\x00", 2, 100);
 80016da:	2364      	movs	r3, #100	; 0x64
 80016dc:	2202      	movs	r2, #2
 80016de:	494a      	ldr	r1, [pc, #296]	; (8001808 <lcd_init+0x29c>)
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f00f f809 	bl	80106f8 <HAL_SPI_Transmit>

	HAL_Delay(2);
 80016e6:	2002      	movs	r0, #2
 80016e8:	f002 fcd4 	bl	8004094 <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80016ec:	2201      	movs	r2, #1
 80016ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016f2:	483f      	ldr	r0, [pc, #252]	; (80017f0 <lcd_init+0x284>)
 80016f4:	f008 f820 	bl	8009738 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80016f8:	2200      	movs	r2, #0
 80016fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016fe:	483c      	ldr	r0, [pc, #240]	; (80017f0 <lcd_init+0x284>)
 8001700:	f008 f81a 	bl	8009738 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8001704:	2002      	movs	r0, #2
 8001706:	f002 fcc5 	bl	8004094 <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\xe0\x00", 2, 100);
 800170a:	2364      	movs	r3, #100	; 0x64
 800170c:	2202      	movs	r2, #2
 800170e:	493f      	ldr	r1, [pc, #252]	; (800180c <lcd_init+0x2a0>)
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f00e fff1 	bl	80106f8 <HAL_SPI_Transmit>

	HAL_Delay(2);
 8001716:	2002      	movs	r0, #2
 8001718:	f002 fcbc 	bl	8004094 <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800171c:	2201      	movs	r2, #1
 800171e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001722:	4833      	ldr	r0, [pc, #204]	; (80017f0 <lcd_init+0x284>)
 8001724:	f008 f808 	bl	8009738 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001728:	2200      	movs	r2, #0
 800172a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800172e:	4830      	ldr	r0, [pc, #192]	; (80017f0 <lcd_init+0x284>)
 8001730:	f008 f802 	bl	8009738 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8001734:	2002      	movs	r0, #2
 8001736:	f002 fcad 	bl	8004094 <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\x6a\x80", 2, 100);
 800173a:	2364      	movs	r3, #100	; 0x64
 800173c:	2202      	movs	r2, #2
 800173e:	4934      	ldr	r1, [pc, #208]	; (8001810 <lcd_init+0x2a4>)
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f00e ffd9 	bl	80106f8 <HAL_SPI_Transmit>

	HAL_Delay(2);
 8001746:	2002      	movs	r0, #2
 8001748:	f002 fca4 	bl	8004094 <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800174c:	2201      	movs	r2, #1
 800174e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001752:	4827      	ldr	r0, [pc, #156]	; (80017f0 <lcd_init+0x284>)
 8001754:	f007 fff0 	bl	8009738 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001758:	2200      	movs	r2, #0
 800175a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800175e:	4824      	ldr	r0, [pc, #144]	; (80017f0 <lcd_init+0x284>)
 8001760:	f007 ffea 	bl	8009738 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8001764:	2002      	movs	r0, #2
 8001766:	f002 fc95 	bl	8004094 <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\x80\x00", 2, 100);
 800176a:	2364      	movs	r3, #100	; 0x64
 800176c:	2202      	movs	r2, #2
 800176e:	4929      	ldr	r1, [pc, #164]	; (8001814 <lcd_init+0x2a8>)
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f00e ffc1 	bl	80106f8 <HAL_SPI_Transmit>
	HAL_Delay(2);
 8001776:	2002      	movs	r0, #2
 8001778:	f002 fc8c 	bl	8004094 <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800177c:	2201      	movs	r2, #1
 800177e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001782:	481b      	ldr	r0, [pc, #108]	; (80017f0 <lcd_init+0x284>)
 8001784:	f007 ffd8 	bl	8009738 <HAL_GPIO_WritePin>
	// HAL_Delay(100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001788:	2200      	movs	r2, #0
 800178a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800178e:	4818      	ldr	r0, [pc, #96]	; (80017f0 <lcd_init+0x284>)
 8001790:	f007 ffd2 	bl	8009738 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8001794:	2002      	movs	r0, #2
 8001796:	f002 fc7d 	bl	8004094 <HAL_Delay>
	HAL_SPI_Transmit(spi, (uint8_t*) "\x14\x80", 2, 100);
 800179a:	2364      	movs	r3, #100	; 0x64
 800179c:	2202      	movs	r2, #2
 800179e:	491e      	ldr	r1, [pc, #120]	; (8001818 <lcd_init+0x2ac>)
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f00e ffa9 	bl	80106f8 <HAL_SPI_Transmit>
	HAL_Delay(2);
 80017a6:	2002      	movs	r0, #2
 80017a8:	f002 fc74 	bl	8004094 <HAL_Delay>
	// CS
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80017ac:	2201      	movs	r2, #1
 80017ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017b2:	480f      	ldr	r0, [pc, #60]	; (80017f0 <lcd_init+0x284>)
 80017b4:	f007 ffc0 	bl	8009738 <HAL_GPIO_WritePin>
	//wdog_refresh();

	HAL_LTDC_SetAddress(ltdc, (uint32_t) &fb1, 0);
 80017b8:	4b18      	ldr	r3, [pc, #96]	; (800181c <lcd_init+0x2b0>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	4619      	mov	r1, r3
 80017be:	6838      	ldr	r0, [r7, #0]
 80017c0:	f008 f9be 	bl	8009b40 <HAL_LTDC_SetAddress>

	memset(fb1, 0, sizeof(framebuffer1));
 80017c4:	4b15      	ldr	r3, [pc, #84]	; (800181c <lcd_init+0x2b0>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f44f 3216 	mov.w	r2, #153600	; 0x25800
 80017cc:	2100      	movs	r1, #0
 80017ce:	4618      	mov	r0, r3
 80017d0:	f010 fa38 	bl	8011c44 <memset>
	memset(fb2, 0, sizeof(framebuffer1));
 80017d4:	4b12      	ldr	r3, [pc, #72]	; (8001820 <lcd_init+0x2b4>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f44f 3216 	mov.w	r2, #153600	; 0x25800
 80017dc:	2100      	movs	r1, #0
 80017de:	4618      	mov	r0, r3
 80017e0:	f010 fa30 	bl	8011c44 <memset>
}
 80017e4:	bf00      	nop
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	58020c00 	.word	0x58020c00
 80017f0:	58020400 	.word	0x58020400
 80017f4:	08013058 	.word	0x08013058
 80017f8:	0801305c 	.word	0x0801305c
 80017fc:	08013060 	.word	0x08013060
 8001800:	08013064 	.word	0x08013064
 8001804:	08013068 	.word	0x08013068
 8001808:	0801306c 	.word	0x0801306c
 800180c:	08013070 	.word	0x08013070
 8001810:	08013074 	.word	0x08013074
 8001814:	08013078 	.word	0x08013078
 8001818:	0801307c 	.word	0x0801307c
 800181c:	20000024 	.word	0x20000024
 8001820:	20000028 	.word	0x20000028

08001824 <HAL_LTDC_ReloadEventCallback>:

void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc) {
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
	frame_counter++;
 800182c:	4b0d      	ldr	r3, [pc, #52]	; (8001864 <HAL_LTDC_ReloadEventCallback+0x40>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	3301      	adds	r3, #1
 8001832:	4a0c      	ldr	r2, [pc, #48]	; (8001864 <HAL_LTDC_ReloadEventCallback+0x40>)
 8001834:	6013      	str	r3, [r2, #0]
	if (active_framebuffer == 0) {
 8001836:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <HAL_LTDC_ReloadEventCallback+0x44>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d107      	bne.n	800184e <HAL_LTDC_ReloadEventCallback+0x2a>
		HAL_LTDC_SetAddress(hltdc, (uint32_t) fb2, 0);
 800183e:	4b0b      	ldr	r3, [pc, #44]	; (800186c <HAL_LTDC_ReloadEventCallback+0x48>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2200      	movs	r2, #0
 8001844:	4619      	mov	r1, r3
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f008 f97a 	bl	8009b40 <HAL_LTDC_SetAddress>
	} else {
		HAL_LTDC_SetAddress(hltdc, (uint32_t) fb1, 0);
	}
}
 800184c:	e006      	b.n	800185c <HAL_LTDC_ReloadEventCallback+0x38>
		HAL_LTDC_SetAddress(hltdc, (uint32_t) fb1, 0);
 800184e:	4b08      	ldr	r3, [pc, #32]	; (8001870 <HAL_LTDC_ReloadEventCallback+0x4c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2200      	movs	r2, #0
 8001854:	4619      	mov	r1, r3
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f008 f972 	bl	8009b40 <HAL_LTDC_SetAddress>
}
 800185c:	bf00      	nop
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	200000e0 	.word	0x200000e0
 8001868:	200000dc 	.word	0x200000dc
 800186c:	20000028 	.word	0x20000028
 8001870:	20000024 	.word	0x20000024

08001874 <lcd_swap>:

uint32_t is_lcd_swap_pending(void) {
	return (uint32_t) ((hltdc.Instance->SRCR) & (LTDC_SRCR_VBR | LTDC_SRCR_IMR));
}

void lcd_swap(void) {
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
	HAL_LTDC_Reload(&hltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 8001878:	2102      	movs	r1, #2
 800187a:	4807      	ldr	r0, [pc, #28]	; (8001898 <lcd_swap+0x24>)
 800187c:	f008 f996 	bl	8009bac <HAL_LTDC_Reload>
	active_framebuffer = active_framebuffer ? 0 : 1;
 8001880:	4b06      	ldr	r3, [pc, #24]	; (800189c <lcd_swap+0x28>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	bf0c      	ite	eq
 8001888:	2301      	moveq	r3, #1
 800188a:	2300      	movne	r3, #0
 800188c:	b2db      	uxtb	r3, r3
 800188e:	461a      	mov	r2, r3
 8001890:	4b02      	ldr	r3, [pc, #8]	; (800189c <lcd_swap+0x28>)
 8001892:	601a      	str	r2, [r3, #0]
}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20000304 	.word	0x20000304
 800189c:	200000dc 	.word	0x200000dc

080018a0 <lcd_sync>:

void lcd_sync(void) {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
	void *active = lcd_get_active_buffer();
 80018a6:	f000 f813 	bl	80018d0 <lcd_get_active_buffer>
 80018aa:	6078      	str	r0, [r7, #4]
	void *inactive = lcd_get_inactive_buffer();
 80018ac:	f000 f826 	bl	80018fc <lcd_get_inactive_buffer>
 80018b0:	6038      	str	r0, [r7, #0]

	if (active != inactive) {
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d005      	beq.n	80018c6 <lcd_sync+0x26>
		memcpy(inactive, active, sizeof(framebuffer1));
 80018ba:	f44f 3216 	mov.w	r2, #153600	; 0x25800
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	6838      	ldr	r0, [r7, #0]
 80018c2:	f010 fa3a 	bl	8011d3a <memcpy>
	}
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
	...

080018d0 <lcd_get_active_buffer>:

void* lcd_get_active_buffer(void) {
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
	return active_framebuffer ? fb2 : fb1;
 80018d4:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <lcd_get_active_buffer+0x20>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d002      	beq.n	80018e2 <lcd_get_active_buffer+0x12>
 80018dc:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <lcd_get_active_buffer+0x24>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	e001      	b.n	80018e6 <lcd_get_active_buffer+0x16>
 80018e2:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <lcd_get_active_buffer+0x28>)
 80018e4:	681b      	ldr	r3, [r3, #0]
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	200000dc 	.word	0x200000dc
 80018f4:	20000028 	.word	0x20000028
 80018f8:	20000024 	.word	0x20000024

080018fc <lcd_get_inactive_buffer>:

void* lcd_get_inactive_buffer(void) {
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
	return active_framebuffer ? fb1 : fb2;
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <lcd_get_inactive_buffer+0x20>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d002      	beq.n	800190e <lcd_get_inactive_buffer+0x12>
 8001908:	4b05      	ldr	r3, [pc, #20]	; (8001920 <lcd_get_inactive_buffer+0x24>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	e001      	b.n	8001912 <lcd_get_inactive_buffer+0x16>
 800190e:	4b05      	ldr	r3, [pc, #20]	; (8001924 <lcd_get_inactive_buffer+0x28>)
 8001910:	681b      	ldr	r3, [r3, #0]
}
 8001912:	4618      	mov	r0, r3
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	200000dc 	.word	0x200000dc
 8001920:	20000024 	.word	0x20000024
 8001924:	20000028 	.word	0x20000028

08001928 <lcd_wait_for_vblank>:
void lcd_set_buffers(uint16_t *buf1, uint16_t *buf2) {
	fb1 = buf1;
	fb2 = buf2;
}

void lcd_wait_for_vblank(void) {
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
	uint32_t old_counter = frame_counter;
 800192e:	4b08      	ldr	r3, [pc, #32]	; (8001950 <lcd_wait_for_vblank+0x28>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	607b      	str	r3, [r7, #4]
	while (old_counter == frame_counter) {
 8001934:	e000      	b.n	8001938 <lcd_wait_for_vblank+0x10>
		__asm("nop");
 8001936:	bf00      	nop
	while (old_counter == frame_counter) {
 8001938:	4b05      	ldr	r3, [pc, #20]	; (8001950 <lcd_wait_for_vblank+0x28>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	429a      	cmp	r2, r3
 8001940:	d0f9      	beq.n	8001936 <lcd_wait_for_vblank+0xe>
	}
}
 8001942:	bf00      	nop
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	200000e0 	.word	0x200000e0

08001954 <game_init>:
int ball_xspeed;
int ball_yspeed;
int ball_x;
int ball_y;

void game_init(void) {
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
	uint16_t *buf = lcd_get_active_buffer();
 800195a:	f7ff ffb9 	bl	80018d0 <lcd_get_active_buffer>
 800195e:	6078      	str	r0, [r7, #4]
	draw_background(buf);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f000 f863 	bl	8001a2c <draw_background>
	ball_xspeed = randsing() * ball_speed;
 8001966:	f00f fef5 	bl	8011754 <rand>
 800196a:	4603      	mov	r3, r0
 800196c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001970:	db02      	blt.n	8001978 <game_init+0x24>
 8001972:	f04f 33ff 	mov.w	r3, #4294967295
 8001976:	e000      	b.n	800197a <game_init+0x26>
 8001978:	2301      	movs	r3, #1
 800197a:	2203      	movs	r2, #3
 800197c:	fb02 f303 	mul.w	r3, r2, r3
 8001980:	4a18      	ldr	r2, [pc, #96]	; (80019e4 <game_init+0x90>)
 8001982:	6013      	str	r3, [r2, #0]
	ball_yspeed = randsing() * ball_speed;
 8001984:	f00f fee6 	bl	8011754 <rand>
 8001988:	4603      	mov	r3, r0
 800198a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800198e:	db02      	blt.n	8001996 <game_init+0x42>
 8001990:	f04f 33ff 	mov.w	r3, #4294967295
 8001994:	e000      	b.n	8001998 <game_init+0x44>
 8001996:	2301      	movs	r3, #1
 8001998:	2203      	movs	r2, #3
 800199a:	fb02 f303 	mul.w	r3, r2, r3
 800199e:	4a12      	ldr	r2, [pc, #72]	; (80019e8 <game_init+0x94>)
 80019a0:	6013      	str	r3, [r2, #0]
	ball_x = 160;
 80019a2:	4b12      	ldr	r3, [pc, #72]	; (80019ec <game_init+0x98>)
 80019a4:	22a0      	movs	r2, #160	; 0xa0
 80019a6:	601a      	str	r2, [r3, #0]
	ball_y = randint(190, 70);
 80019a8:	f00f fed4 	bl	8011754 <rand>
 80019ac:	4601      	mov	r1, r0
 80019ae:	4b10      	ldr	r3, [pc, #64]	; (80019f0 <game_init+0x9c>)
 80019b0:	fb83 2301 	smull	r2, r3, r3, r1
 80019b4:	105a      	asrs	r2, r3, #1
 80019b6:	17cb      	asrs	r3, r1, #31
 80019b8:	1ad2      	subs	r2, r2, r3
 80019ba:	4613      	mov	r3, r2
 80019bc:	011b      	lsls	r3, r3, #4
 80019be:	1a9b      	subs	r3, r3, r2
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	4413      	add	r3, r2
 80019c4:	1aca      	subs	r2, r1, r3
 80019c6:	f102 0346 	add.w	r3, r2, #70	; 0x46
 80019ca:	4a0a      	ldr	r2, [pc, #40]	; (80019f4 <game_init+0xa0>)
 80019cc:	6013      	str	r3, [r2, #0]
	lcd_sync();
 80019ce:	f7ff ff67 	bl	80018a0 <lcd_sync>
	lcd_swap();
 80019d2:	f7ff ff4f 	bl	8001874 <lcd_swap>
	lcd_wait_for_vblank();
 80019d6:	f7ff ffa7 	bl	8001928 <lcd_wait_for_vblank>
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	200001fc 	.word	0x200001fc
 80019e8:	20000200 	.word	0x20000200
 80019ec:	20000204 	.word	0x20000204
 80019f0:	043b3d5b 	.word	0x043b3d5b
 80019f4:	20000208 	.word	0x20000208

080019f8 <game_loop>:

void game_loop(void) {
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
	uint16_t *buf = lcd_get_active_buffer();
 80019fe:	f7ff ff67 	bl	80018d0 <lcd_get_active_buffer>
 8001a02:	6078      	str	r0, [r7, #4]
	draw_background(buf);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f000 f811 	bl	8001a2c <draw_background>
	update_player(buf);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 f878 	bl	8001b00 <update_player>
	update_ai(buf);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f000 f9e1 	bl	8001dd8 <update_ai>
	update_ball(buf);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f000 f8ec 	bl	8001bf4 <update_ball>
	lcd_swap();
 8001a1c:	f7ff ff2a 	bl	8001874 <lcd_swap>
	lcd_wait_for_vblank();
 8001a20:	f7ff ff82 	bl	8001928 <lcd_wait_for_vblank>
}
 8001a24:	bf00      	nop
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <draw_background>:

void draw_background(uint16_t *buf) {
 8001a2c:	b590      	push	{r4, r7, lr}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af02      	add	r7, sp, #8
 8001a32:	6078      	str	r0, [r7, #4]
	LCD_Clear(buf, LCD_COLOR_BLACK);
 8001a34:	2100      	movs	r1, #0
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 fa76 	bl	8001f28 <LCD_Clear>
	LCD_DrawRect(buf, 0, 20, LCD_GetXSize() - 1, LCD_GetYSize() - 21,
 8001a3c:	f000 fa26 	bl	8001e8c <LCD_GetXSize>
 8001a40:	4603      	mov	r3, r0
 8001a42:	3b01      	subs	r3, #1
 8001a44:	b29c      	uxth	r4, r3
 8001a46:	f000 fa2a 	bl	8001e9e <LCD_GetYSize>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	3b15      	subs	r3, #21
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a54:	9201      	str	r2, [sp, #4]
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	4623      	mov	r3, r4
 8001a5a:	2214      	movs	r2, #20
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 fb90 	bl	8002184 <LCD_DrawRect>
	LCD_COLOR_WHITE);
	draw_score(buf);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f000 f805 	bl	8001a74 <draw_score>
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd90      	pop	{r4, r7, pc}
	...

08001a74 <draw_score>:

void draw_score(uint16_t *buf) {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af02      	add	r7, sp, #8
 8001a7a:	6078      	str	r0, [r7, #4]
	LCD_SetFont(&Font16);
 8001a7c:	4818      	ldr	r0, [pc, #96]	; (8001ae0 <draw_score+0x6c>)
 8001a7e:	f000 fa17 	bl	8001eb0 <LCD_SetFont>
	sprintf(score_p1_buf, "%d", score_p1);
 8001a82:	4b18      	ldr	r3, [pc, #96]	; (8001ae4 <draw_score+0x70>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	461a      	mov	r2, r3
 8001a88:	4917      	ldr	r1, [pc, #92]	; (8001ae8 <draw_score+0x74>)
 8001a8a:	4818      	ldr	r0, [pc, #96]	; (8001aec <draw_score+0x78>)
 8001a8c:	f00f ffe2 	bl	8011a54 <siprintf>
	LCD_DisplayStringAt(buf, 0, 4, (uint8_t*) score_p1_buf, LEFT_MODE);
 8001a90:	2303      	movs	r3, #3
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	4b15      	ldr	r3, [pc, #84]	; (8001aec <draw_score+0x78>)
 8001a96:	2204      	movs	r2, #4
 8001a98:	2100      	movs	r1, #0
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f000 fa5e 	bl	8001f5c <LCD_DisplayStringAt>
	sprintf(score_p2_buf, "%d", score_p2);
 8001aa0:	4b13      	ldr	r3, [pc, #76]	; (8001af0 <draw_score+0x7c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4910      	ldr	r1, [pc, #64]	; (8001ae8 <draw_score+0x74>)
 8001aa8:	4812      	ldr	r0, [pc, #72]	; (8001af4 <draw_score+0x80>)
 8001aaa:	f00f ffd3 	bl	8011a54 <siprintf>
	LCD_DisplayStringAt(buf, 2, 4, (uint8_t*) score_p2_buf, RIGHT_MODE);
 8001aae:	2302      	movs	r3, #2
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	4b10      	ldr	r3, [pc, #64]	; (8001af4 <draw_score+0x80>)
 8001ab4:	2204      	movs	r2, #4
 8001ab6:	2102      	movs	r1, #2
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 fa4f 	bl	8001f5c <LCD_DisplayStringAt>
	sprintf(text_buf, "SCORE");
 8001abe:	490e      	ldr	r1, [pc, #56]	; (8001af8 <draw_score+0x84>)
 8001ac0:	480e      	ldr	r0, [pc, #56]	; (8001afc <draw_score+0x88>)
 8001ac2:	f00f ffc7 	bl	8011a54 <siprintf>
	LCD_DisplayStringAt(buf, 1, 4, (uint8_t*) text_buf, CENTER_MODE);
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <draw_score+0x88>)
 8001acc:	2204      	movs	r2, #4
 8001ace:	2101      	movs	r1, #1
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 fa43 	bl	8001f5c <LCD_DisplayStringAt>
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000008 	.word	0x20000008
 8001ae4:	200000e4 	.word	0x200000e4
 8001ae8:	08013080 	.word	0x08013080
 8001aec:	200000ec 	.word	0x200000ec
 8001af0:	200000e8 	.word	0x200000e8
 8001af4:	200000f4 	.word	0x200000f4
 8001af8:	08013084 	.word	0x08013084
 8001afc:	200000fc 	.word	0x200000fc

08001b00 <update_player>:

void update_player(uint16_t *buf) {
 8001b00:	b590      	push	{r4, r7, lr}
 8001b02:	b087      	sub	sp, #28
 8001b04:	af02      	add	r7, sp, #8
 8001b06:	6078      	str	r0, [r7, #4]
	uint32_t buttons = buttons_get();
 8001b08:	f7ff f818 	bl	8000b3c <buttons_get>
 8001b0c:	60f8      	str	r0, [r7, #12]
	if (buttons & B_Up) {
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d00c      	beq.n	8001b32 <update_player+0x32>
		if (p1_y >= 20 + p1_speed + 2) {
 8001b18:	2302      	movs	r3, #2
 8001b1a:	f103 0215 	add.w	r2, r3, #21
 8001b1e:	4b2f      	ldr	r3, [pc, #188]	; (8001bdc <update_player+0xdc>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	da05      	bge.n	8001b32 <update_player+0x32>
			p1_y = p1_y - p1_speed;
 8001b26:	4b2d      	ldr	r3, [pc, #180]	; (8001bdc <update_player+0xdc>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	1a9b      	subs	r3, r3, r2
 8001b2e:	4a2b      	ldr	r2, [pc, #172]	; (8001bdc <update_player+0xdc>)
 8001b30:	6013      	str	r3, [r2, #0]
		}
	}
	if (buttons & B_Down) {
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f003 0308 	and.w	r3, r3, #8
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d012      	beq.n	8001b62 <update_player+0x62>
		if (p1_y <= LCD_GetYSize() - p1_height - p1_speed - 2) {
 8001b3c:	f000 f9af 	bl	8001e9e <LCD_GetYSize>
 8001b40:	4603      	mov	r3, r0
 8001b42:	461a      	mov	r2, r3
 8001b44:	2328      	movs	r3, #40	; 0x28
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2202      	movs	r2, #2
 8001b4a:	1a9b      	subs	r3, r3, r2
 8001b4c:	1e5a      	subs	r2, r3, #1
 8001b4e:	4b23      	ldr	r3, [pc, #140]	; (8001bdc <update_player+0xdc>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	dd05      	ble.n	8001b62 <update_player+0x62>
			p1_y = p1_y + p1_speed;
 8001b56:	4b21      	ldr	r3, [pc, #132]	; (8001bdc <update_player+0xdc>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	4a1f      	ldr	r2, [pc, #124]	; (8001bdc <update_player+0xdc>)
 8001b60:	6013      	str	r3, [r2, #0]
		}
	}
	if (buttons & B_GAME) {
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d01a      	beq.n	8001ba2 <update_player+0xa2>
		score_p1 = 0;
 8001b6c:	4b1c      	ldr	r3, [pc, #112]	; (8001be0 <update_player+0xe0>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
		score_p2 = 0;
 8001b72:	4b1c      	ldr	r3, [pc, #112]	; (8001be4 <update_player+0xe4>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
		p1_x = 3;
 8001b78:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <update_player+0xe8>)
 8001b7a:	2203      	movs	r2, #3
 8001b7c:	601a      	str	r2, [r3, #0]
		p1_y = 110;
 8001b7e:	4b17      	ldr	r3, [pc, #92]	; (8001bdc <update_player+0xdc>)
 8001b80:	226e      	movs	r2, #110	; 0x6e
 8001b82:	601a      	str	r2, [r3, #0]
		p2_x = 320 - 3 - p2_width;
 8001b84:	2205      	movs	r2, #5
 8001b86:	f240 133d 	movw	r3, #317	; 0x13d
 8001b8a:	1a9b      	subs	r3, r3, r2
 8001b8c:	4a17      	ldr	r2, [pc, #92]	; (8001bec <update_player+0xec>)
 8001b8e:	6013      	str	r3, [r2, #0]
		p2_y = 110;
 8001b90:	4b17      	ldr	r3, [pc, #92]	; (8001bf0 <update_player+0xf0>)
 8001b92:	226e      	movs	r2, #110	; 0x6e
 8001b94:	601a      	str	r2, [r3, #0]
		HAL_Delay(500);
 8001b96:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b9a:	f002 fa7b 	bl	8004094 <HAL_Delay>
		game_init();
 8001b9e:	f7ff fed9 	bl	8001954 <game_init>
	}
	if (buttons & B_POWER) {
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <update_player+0xb0>
		HAL_NVIC_SystemReset();
 8001bac:	f004 fac7 	bl	800613e <HAL_NVIC_SystemReset>
	}
	LCD_FillRect(buf, p1_x, p1_y, p1_width, p1_height, LCD_COLOR_WHITE);
 8001bb0:	4b0d      	ldr	r3, [pc, #52]	; (8001be8 <update_player+0xe8>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	b299      	uxth	r1, r3
 8001bb6:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <update_player+0xdc>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	2305      	movs	r3, #5
 8001bbe:	b298      	uxth	r0, r3
 8001bc0:	2328      	movs	r3, #40	; 0x28
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8001bc8:	9401      	str	r4, [sp, #4]
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	4603      	mov	r3, r0
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 fbbc 	bl	800234c <LCD_FillRect>
}
 8001bd4:	bf00      	nop
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd90      	pop	{r4, r7, pc}
 8001bdc:	20000030 	.word	0x20000030
 8001be0:	200000e4 	.word	0x200000e4
 8001be4:	200000e8 	.word	0x200000e8
 8001be8:	2000002c 	.word	0x2000002c
 8001bec:	20000034 	.word	0x20000034
 8001bf0:	20000038 	.word	0x20000038

08001bf4 <update_ball>:

void update_ball(uint16_t *buf) {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af02      	add	r7, sp, #8
 8001bfa:	6078      	str	r0, [r7, #4]

	if (ball_x <= ball_r + ball_speed + p1_x + p1_width / 2
 8001bfc:	2208      	movs	r2, #8
 8001bfe:	2303      	movs	r3, #3
 8001c00:	441a      	add	r2, r3
 8001c02:	4b6b      	ldr	r3, [pc, #428]	; (8001db0 <update_ball+0x1bc>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	441a      	add	r2, r3
 8001c08:	2305      	movs	r3, #5
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	da00      	bge.n	8001c10 <update_ball+0x1c>
 8001c0e:	3301      	adds	r3, #1
 8001c10:	105b      	asrs	r3, r3, #1
 8001c12:	441a      	add	r2, r3
 8001c14:	4b67      	ldr	r3, [pc, #412]	; (8001db4 <update_ball+0x1c0>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	db38      	blt.n	8001c8e <update_ball+0x9a>
			&& ball_xspeed == -ball_speed) {
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	425a      	negs	r2, r3
 8001c20:	4b65      	ldr	r3, [pc, #404]	; (8001db8 <update_ball+0x1c4>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d132      	bne.n	8001c8e <update_ball+0x9a>
		ball_xspeed = ball_speed;
 8001c28:	2203      	movs	r2, #3
 8001c2a:	4b63      	ldr	r3, [pc, #396]	; (8001db8 <update_ball+0x1c4>)
 8001c2c:	601a      	str	r2, [r3, #0]
		if (ball_y >= p1_y - 2 && ball_y <= p1_y + p1_height + 2) {
 8001c2e:	4b63      	ldr	r3, [pc, #396]	; (8001dbc <update_ball+0x1c8>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	1e9a      	subs	r2, r3, #2
 8001c34:	4b62      	ldr	r3, [pc, #392]	; (8001dc0 <update_ball+0x1cc>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	dc08      	bgt.n	8001c4e <update_ball+0x5a>
 8001c3c:	4b5f      	ldr	r3, [pc, #380]	; (8001dbc <update_ball+0x1c8>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2228      	movs	r2, #40	; 0x28
 8001c42:	4413      	add	r3, r2
 8001c44:	1c9a      	adds	r2, r3, #2
 8001c46:	4b5e      	ldr	r3, [pc, #376]	; (8001dc0 <update_ball+0x1cc>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	da1f      	bge.n	8001c8e <update_ball+0x9a>

		} else {
			score_p2++;
 8001c4e:	4b5d      	ldr	r3, [pc, #372]	; (8001dc4 <update_ball+0x1d0>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	3301      	adds	r3, #1
 8001c54:	4a5b      	ldr	r2, [pc, #364]	; (8001dc4 <update_ball+0x1d0>)
 8001c56:	6013      	str	r3, [r2, #0]
			draw_score(buf);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f7ff ff0b 	bl	8001a74 <draw_score>
			LCD_FillCircle(buf, ball_x, ball_y, ball_r, LCD_COLOR_RED);
 8001c5e:	4b55      	ldr	r3, [pc, #340]	; (8001db4 <update_ball+0x1c0>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	b299      	uxth	r1, r3
 8001c64:	4b56      	ldr	r3, [pc, #344]	; (8001dc0 <update_ball+0x1cc>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	2308      	movs	r3, #8
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001c72:	9000      	str	r0, [sp, #0]
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f000 fb9a 	bl	80023ae <LCD_FillCircle>
			lcd_swap();
 8001c7a:	f7ff fdfb 	bl	8001874 <lcd_swap>
			lcd_wait_for_vblank();
 8001c7e:	f7ff fe53 	bl	8001928 <lcd_wait_for_vblank>
			HAL_Delay(1000);
 8001c82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c86:	f002 fa05 	bl	8004094 <HAL_Delay>
			game_init();
 8001c8a:	f7ff fe63 	bl	8001954 <game_init>
		}
	}
	if (ball_x >= p2_x + p2_width / 2 - ball_r - ball_speed
 8001c8e:	2305      	movs	r3, #5
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	da00      	bge.n	8001c96 <update_ball+0xa2>
 8001c94:	3301      	adds	r3, #1
 8001c96:	105b      	asrs	r3, r3, #1
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4b4b      	ldr	r3, [pc, #300]	; (8001dc8 <update_ball+0x1d4>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	2208      	movs	r2, #8
 8001ca2:	1a9b      	subs	r3, r3, r2
 8001ca4:	2203      	movs	r2, #3
 8001ca6:	1a9a      	subs	r2, r3, r2
 8001ca8:	4b42      	ldr	r3, [pc, #264]	; (8001db4 <update_ball+0x1c0>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	dc38      	bgt.n	8001d22 <update_ball+0x12e>
			&& ball_xspeed == ball_speed) {
 8001cb0:	4b41      	ldr	r3, [pc, #260]	; (8001db8 <update_ball+0x1c4>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2203      	movs	r2, #3
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d133      	bne.n	8001d22 <update_ball+0x12e>
		ball_xspeed = -ball_speed;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	425b      	negs	r3, r3
 8001cbe:	4a3e      	ldr	r2, [pc, #248]	; (8001db8 <update_ball+0x1c4>)
 8001cc0:	6013      	str	r3, [r2, #0]
		if (ball_y >= p2_y - 2 && ball_y <= p2_y + p2_height + 2) {
 8001cc2:	4b42      	ldr	r3, [pc, #264]	; (8001dcc <update_ball+0x1d8>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	1e9a      	subs	r2, r3, #2
 8001cc8:	4b3d      	ldr	r3, [pc, #244]	; (8001dc0 <update_ball+0x1cc>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	dc08      	bgt.n	8001ce2 <update_ball+0xee>
 8001cd0:	4b3e      	ldr	r3, [pc, #248]	; (8001dcc <update_ball+0x1d8>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2228      	movs	r2, #40	; 0x28
 8001cd6:	4413      	add	r3, r2
 8001cd8:	1c9a      	adds	r2, r3, #2
 8001cda:	4b39      	ldr	r3, [pc, #228]	; (8001dc0 <update_ball+0x1cc>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	da1f      	bge.n	8001d22 <update_ball+0x12e>

		} else {
			score_p1++;
 8001ce2:	4b3b      	ldr	r3, [pc, #236]	; (8001dd0 <update_ball+0x1dc>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	4a39      	ldr	r2, [pc, #228]	; (8001dd0 <update_ball+0x1dc>)
 8001cea:	6013      	str	r3, [r2, #0]
			draw_score(buf);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff fec1 	bl	8001a74 <draw_score>
			LCD_FillCircle(buf, ball_x, ball_y, ball_r, LCD_COLOR_RED);
 8001cf2:	4b30      	ldr	r3, [pc, #192]	; (8001db4 <update_ball+0x1c0>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	b299      	uxth	r1, r3
 8001cf8:	4b31      	ldr	r3, [pc, #196]	; (8001dc0 <update_ball+0x1cc>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	2308      	movs	r3, #8
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001d06:	9000      	str	r0, [sp, #0]
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 fb50 	bl	80023ae <LCD_FillCircle>
			lcd_swap();
 8001d0e:	f7ff fdb1 	bl	8001874 <lcd_swap>
			lcd_wait_for_vblank();
 8001d12:	f7ff fe09 	bl	8001928 <lcd_wait_for_vblank>
			HAL_Delay(1000);
 8001d16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d1a:	f002 f9bb 	bl	8004094 <HAL_Delay>
			game_init();
 8001d1e:	f7ff fe19 	bl	8001954 <game_init>
		}
	}
	if (ball_y <= 20 + ball_r + ball_speed && ball_yspeed == -ball_speed) {
 8001d22:	2308      	movs	r3, #8
 8001d24:	3314      	adds	r3, #20
 8001d26:	2203      	movs	r2, #3
 8001d28:	441a      	add	r2, r3
 8001d2a:	4b25      	ldr	r3, [pc, #148]	; (8001dc0 <update_ball+0x1cc>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	db08      	blt.n	8001d44 <update_ball+0x150>
 8001d32:	2303      	movs	r3, #3
 8001d34:	425a      	negs	r2, r3
 8001d36:	4b27      	ldr	r3, [pc, #156]	; (8001dd4 <update_ball+0x1e0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d102      	bne.n	8001d44 <update_ball+0x150>
		ball_yspeed = ball_speed;
 8001d3e:	2203      	movs	r2, #3
 8001d40:	4b24      	ldr	r3, [pc, #144]	; (8001dd4 <update_ball+0x1e0>)
 8001d42:	601a      	str	r2, [r3, #0]
	}
	if (ball_y >= LCD_GetYSize() - ball_r - ball_speed
 8001d44:	f000 f8ab 	bl	8001e9e <LCD_GetYSize>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	2308      	movs	r3, #8
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2203      	movs	r2, #3
 8001d52:	1a9a      	subs	r2, r3, r2
 8001d54:	4b1a      	ldr	r3, [pc, #104]	; (8001dc0 <update_ball+0x1cc>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	dc08      	bgt.n	8001d6e <update_ball+0x17a>
			&& ball_yspeed == ball_speed) {
 8001d5c:	4b1d      	ldr	r3, [pc, #116]	; (8001dd4 <update_ball+0x1e0>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2203      	movs	r2, #3
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d103      	bne.n	8001d6e <update_ball+0x17a>
		ball_yspeed = -ball_speed;
 8001d66:	2303      	movs	r3, #3
 8001d68:	425b      	negs	r3, r3
 8001d6a:	4a1a      	ldr	r2, [pc, #104]	; (8001dd4 <update_ball+0x1e0>)
 8001d6c:	6013      	str	r3, [r2, #0]
	}
	ball_x = ball_x + ball_xspeed;
 8001d6e:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <update_ball+0x1c0>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <update_ball+0x1c4>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4413      	add	r3, r2
 8001d78:	4a0e      	ldr	r2, [pc, #56]	; (8001db4 <update_ball+0x1c0>)
 8001d7a:	6013      	str	r3, [r2, #0]
	ball_y = ball_y + ball_yspeed;
 8001d7c:	4b10      	ldr	r3, [pc, #64]	; (8001dc0 <update_ball+0x1cc>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	4b14      	ldr	r3, [pc, #80]	; (8001dd4 <update_ball+0x1e0>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4413      	add	r3, r2
 8001d86:	4a0e      	ldr	r2, [pc, #56]	; (8001dc0 <update_ball+0x1cc>)
 8001d88:	6013      	str	r3, [r2, #0]

	LCD_FillCircle(buf, ball_x, ball_y, ball_r, LCD_COLOR_WHITE);
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <update_ball+0x1c0>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	b299      	uxth	r1, r3
 8001d90:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <update_ball+0x1cc>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	2308      	movs	r3, #8
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001d9e:	9000      	str	r0, [sp, #0]
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f000 fb04 	bl	80023ae <LCD_FillCircle>
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	2000002c 	.word	0x2000002c
 8001db4:	20000204 	.word	0x20000204
 8001db8:	200001fc 	.word	0x200001fc
 8001dbc:	20000030 	.word	0x20000030
 8001dc0:	20000208 	.word	0x20000208
 8001dc4:	200000e8 	.word	0x200000e8
 8001dc8:	20000034 	.word	0x20000034
 8001dcc:	20000038 	.word	0x20000038
 8001dd0:	200000e4 	.word	0x200000e4
 8001dd4:	20000200 	.word	0x20000200

08001dd8 <update_ai>:

void update_ai(uint16_t *buf) {
 8001dd8:	b590      	push	{r4, r7, lr}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af02      	add	r7, sp, #8
 8001dde:	6078      	str	r0, [r7, #4]
	if (ball_y < (p2_y + (p2_height / 2))) {
 8001de0:	2328      	movs	r3, #40	; 0x28
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	da00      	bge.n	8001de8 <update_ai+0x10>
 8001de6:	3301      	adds	r3, #1
 8001de8:	105b      	asrs	r3, r3, #1
 8001dea:	461a      	mov	r2, r3
 8001dec:	4b24      	ldr	r3, [pc, #144]	; (8001e80 <update_ai+0xa8>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	441a      	add	r2, r3
 8001df2:	4b24      	ldr	r3, [pc, #144]	; (8001e84 <update_ai+0xac>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	dd0c      	ble.n	8001e14 <update_ai+0x3c>
		if (p2_y >= 20 + p2_speed + 2) {
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	f103 0215 	add.w	r2, r3, #21
 8001e00:	4b1f      	ldr	r3, [pc, #124]	; (8001e80 <update_ai+0xa8>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	da05      	bge.n	8001e14 <update_ai+0x3c>
			p2_y = p2_y - p2_speed;
 8001e08:	4b1d      	ldr	r3, [pc, #116]	; (8001e80 <update_ai+0xa8>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2202      	movs	r2, #2
 8001e0e:	1a9b      	subs	r3, r3, r2
 8001e10:	4a1b      	ldr	r2, [pc, #108]	; (8001e80 <update_ai+0xa8>)
 8001e12:	6013      	str	r3, [r2, #0]
		}
	}
	if (ball_y > (p2_y + (p2_height / 2))) {
 8001e14:	2328      	movs	r3, #40	; 0x28
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	da00      	bge.n	8001e1c <update_ai+0x44>
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	105b      	asrs	r3, r3, #1
 8001e1e:	461a      	mov	r2, r3
 8001e20:	4b17      	ldr	r3, [pc, #92]	; (8001e80 <update_ai+0xa8>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	441a      	add	r2, r3
 8001e26:	4b17      	ldr	r3, [pc, #92]	; (8001e84 <update_ai+0xac>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	da12      	bge.n	8001e54 <update_ai+0x7c>
		if (p2_y <= LCD_GetYSize() - p2_height - p2_speed - 2) {
 8001e2e:	f000 f836 	bl	8001e9e <LCD_GetYSize>
 8001e32:	4603      	mov	r3, r0
 8001e34:	461a      	mov	r2, r3
 8001e36:	2328      	movs	r3, #40	; 0x28
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	1a9b      	subs	r3, r3, r2
 8001e3e:	1e5a      	subs	r2, r3, #1
 8001e40:	4b0f      	ldr	r3, [pc, #60]	; (8001e80 <update_ai+0xa8>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	dd05      	ble.n	8001e54 <update_ai+0x7c>
			p2_y = p2_y + p2_speed;
 8001e48:	4b0d      	ldr	r3, [pc, #52]	; (8001e80 <update_ai+0xa8>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	4413      	add	r3, r2
 8001e50:	4a0b      	ldr	r2, [pc, #44]	; (8001e80 <update_ai+0xa8>)
 8001e52:	6013      	str	r3, [r2, #0]
		}
	}
	LCD_FillRect(buf, p2_x, p2_y, p2_width, p2_height, LCD_COLOR_WHITE);
 8001e54:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <update_ai+0xb0>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	b299      	uxth	r1, r3
 8001e5a:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <update_ai+0xa8>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	2305      	movs	r3, #5
 8001e62:	b298      	uxth	r0, r3
 8001e64:	2328      	movs	r3, #40	; 0x28
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8001e6c:	9401      	str	r4, [sp, #4]
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	4603      	mov	r3, r0
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 fa6a 	bl	800234c <LCD_FillRect>
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd90      	pop	{r4, r7, pc}
 8001e80:	20000038 	.word	0x20000038
 8001e84:	20000208 	.word	0x20000208
 8001e88:	20000034 	.word	0x20000034

08001e8c <LCD_GetXSize>:
/**
 * @brief  Gets the LCD X size.
 * @param  None
 * @retval The used LCD X size
 */
uint16_t LCD_GetXSize(void) {
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
	return GW_LCD_WIDTH;
 8001e90:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <LCD_GetYSize>:
/**
 * @brief  Gets the LCD Y size.
 * @param  None
 * @retval The used LCD Y size
 */
uint16_t LCD_GetYSize(void) {
 8001e9e:	b480      	push	{r7}
 8001ea0:	af00      	add	r7, sp, #0
	return GW_LCD_HEIGHT;
 8001ea2:	23f0      	movs	r3, #240	; 0xf0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
	...

08001eb0 <LCD_SetFont>:
/**
 * @brief  Sets the Text Font.
 * @param  pFonts: the layer font to be used
 * @retval None
 */
void LCD_SetFont(sFONT *pFonts) {
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
	font = pFonts;
 8001eb8:	4a04      	ldr	r2, [pc, #16]	; (8001ecc <LCD_SetFont+0x1c>)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6013      	str	r3, [r2, #0]
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	2000003c 	.word	0x2000003c

08001ed0 <LCD_DrawPixel>:
 * @param  Xpos: the X position
 * @param  Ypos: the Y position
 * @param  RGB_Code: the pixel color in RGB(5-6-5)
 * @retval None
 */
void LCD_DrawPixel(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint16_t pixel) {
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	4608      	mov	r0, r1
 8001eda:	4611      	mov	r1, r2
 8001edc:	461a      	mov	r2, r3
 8001ede:	4603      	mov	r3, r0
 8001ee0:	817b      	strh	r3, [r7, #10]
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	813b      	strh	r3, [r7, #8]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	80fb      	strh	r3, [r7, #6]
	if (PPOS(Xpos, Ypos) > GW_LCD_WIDTH * GW_LCD_HEIGHT) {
 8001eea:	893a      	ldrh	r2, [r7, #8]
 8001eec:	4613      	mov	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	4413      	add	r3, r2
 8001ef2:	019b      	lsls	r3, r3, #6
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	897b      	ldrh	r3, [r7, #10]
 8001ef8:	4413      	add	r3, r2
 8001efa:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 8001efe:	dc0d      	bgt.n	8001f1c <LCD_DrawPixel+0x4c>
		return;
	}
	buf[PPOS(Xpos, Ypos)] = pixel;
 8001f00:	893a      	ldrh	r2, [r7, #8]
 8001f02:	4613      	mov	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	019b      	lsls	r3, r3, #6
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	897b      	ldrh	r3, [r7, #10]
 8001f0e:	4413      	add	r3, r2
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	4413      	add	r3, r2
 8001f16:	88fa      	ldrh	r2, [r7, #6]
 8001f18:	801a      	strh	r2, [r3, #0]
 8001f1a:	e000      	b.n	8001f1e <LCD_DrawPixel+0x4e>
		return;
 8001f1c:	bf00      	nop
}
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <LCD_Clear>:
/**
 * @brief  Clears the whole LCD.
 * @param  Color: the color of the background
 * @retval None
 */
void LCD_Clear(uint16_t *buf, uint16_t color) {
 8001f28:	b590      	push	{r4, r7, lr}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af02      	add	r7, sp, #8
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	460b      	mov	r3, r1
 8001f32:	807b      	strh	r3, [r7, #2]
	FillBuffer((uint32_t*) buf, LCD_GetXSize(), LCD_GetYSize(), 0, color);
 8001f34:	f7ff ffaa 	bl	8001e8c <LCD_GetXSize>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	461c      	mov	r4, r3
 8001f3c:	f7ff ffaf 	bl	8001e9e <LCD_GetYSize>
 8001f40:	4603      	mov	r3, r0
 8001f42:	461a      	mov	r2, r3
 8001f44:	887b      	ldrh	r3, [r7, #2]
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	2300      	movs	r3, #0
 8001f4a:	4621      	mov	r1, r4
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 fb63 	bl	8002618 <FillBuffer>
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd90      	pop	{r4, r7, pc}
	...

08001f5c <LCD_DisplayStringAt>:
 *                @arg RIGHT_MODE
 *                @arg LEFT_MODE
 * @retval None
 */
void LCD_DisplayStringAt(uint16_t *buf, uint16_t X, uint16_t Y, uint8_t *pText,
		Text_AlignModeTypdef mode) {
 8001f5c:	b590      	push	{r4, r7, lr}
 8001f5e:	b089      	sub	sp, #36	; 0x24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	607b      	str	r3, [r7, #4]
 8001f66:	460b      	mov	r3, r1
 8001f68:	817b      	strh	r3, [r7, #10]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	813b      	strh	r3, [r7, #8]
	uint16_t refcolumn = 1, i = 0;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	83fb      	strh	r3, [r7, #30]
 8001f72:	2300      	movs	r3, #0
 8001f74:	83bb      	strh	r3, [r7, #28]
	uint32_t size = 0, xsize = 0;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61bb      	str	r3, [r7, #24]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	613b      	str	r3, [r7, #16]
	uint8_t *ptr = pText;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	617b      	str	r3, [r7, #20]

	/* Get the text size */
	while (*ptr++)
 8001f82:	e002      	b.n	8001f8a <LCD_DisplayStringAt+0x2e>
		size++;
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	3301      	adds	r3, #1
 8001f88:	61bb      	str	r3, [r7, #24]
	while (*ptr++)
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	1c5a      	adds	r2, r3, #1
 8001f8e:	617a      	str	r2, [r7, #20]
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1f6      	bne.n	8001f84 <LCD_DisplayStringAt+0x28>

	/* Characters number per line */
	xsize = (LCD_GetXSize() / font->Width);
 8001f96:	f7ff ff79 	bl	8001e8c <LCD_GetXSize>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4b36      	ldr	r3, [pc, #216]	; (8002078 <LCD_DisplayStringAt+0x11c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	889b      	ldrh	r3, [r3, #4]
 8001fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	613b      	str	r3, [r7, #16]

	switch (mode) {
 8001fac:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001fb0:	2b03      	cmp	r3, #3
 8001fb2:	d014      	beq.n	8001fde <LCD_DisplayStringAt+0x82>
 8001fb4:	2b03      	cmp	r3, #3
 8001fb6:	dc23      	bgt.n	8002000 <LCD_DisplayStringAt+0xa4>
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d002      	beq.n	8001fc2 <LCD_DisplayStringAt+0x66>
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d011      	beq.n	8001fe4 <LCD_DisplayStringAt+0x88>
 8001fc0:	e01e      	b.n	8002000 <LCD_DisplayStringAt+0xa4>
	case CENTER_MODE: {
		refcolumn = X + ((xsize - size) * font->Width) / 2;
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	4a2b      	ldr	r2, [pc, #172]	; (8002078 <LCD_DisplayStringAt+0x11c>)
 8001fca:	6812      	ldr	r2, [r2, #0]
 8001fcc:	8892      	ldrh	r2, [r2, #4]
 8001fce:	fb02 f303 	mul.w	r3, r2, r3
 8001fd2:	085b      	lsrs	r3, r3, #1
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	897b      	ldrh	r3, [r7, #10]
 8001fd8:	4413      	add	r3, r2
 8001fda:	83fb      	strh	r3, [r7, #30]
		break;
 8001fdc:	e013      	b.n	8002006 <LCD_DisplayStringAt+0xaa>
	}
	case LEFT_MODE: {
		refcolumn = X;
 8001fde:	897b      	ldrh	r3, [r7, #10]
 8001fe0:	83fb      	strh	r3, [r7, #30]
		break;
 8001fe2:	e010      	b.n	8002006 <LCD_DisplayStringAt+0xaa>
	}
	case RIGHT_MODE: {
		refcolumn = X + ((xsize - size) * font->Width);
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	4b22      	ldr	r3, [pc, #136]	; (8002078 <LCD_DisplayStringAt+0x11c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	889b      	ldrh	r3, [r3, #4]
 8001ff2:	fb12 f303 	smulbb	r3, r2, r3
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	897b      	ldrh	r3, [r7, #10]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	83fb      	strh	r3, [r7, #30]
		break;
 8001ffe:	e002      	b.n	8002006 <LCD_DisplayStringAt+0xaa>
	}
	default: {
		refcolumn = X;
 8002000:	897b      	ldrh	r3, [r7, #10]
 8002002:	83fb      	strh	r3, [r7, #30]
		break;
 8002004:	bf00      	nop
	}
	}

	/* Send the string character by character on LCD */
	while ((*pText != 0)
 8002006:	e012      	b.n	800202e <LCD_DisplayStringAt+0xd2>
			& (((LCD_GetXSize() - (i * font->Width)) & 0xFFFF) >= font->Width)) {
		/* Display one character on LCD */
		LCD_DisplayChar(buf, refcolumn, Y, *pText);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	893a      	ldrh	r2, [r7, #8]
 800200e:	8bf9      	ldrh	r1, [r7, #30]
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f000 f833 	bl	800207c <LCD_DisplayChar>
		/* Decrement the column position by 16 */
		refcolumn += font->Width;
 8002016:	4b18      	ldr	r3, [pc, #96]	; (8002078 <LCD_DisplayStringAt+0x11c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	889a      	ldrh	r2, [r3, #4]
 800201c:	8bfb      	ldrh	r3, [r7, #30]
 800201e:	4413      	add	r3, r2
 8002020:	83fb      	strh	r3, [r7, #30]
		/* Point on the next character */
		pText++;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3301      	adds	r3, #1
 8002026:	607b      	str	r3, [r7, #4]
		i++;
 8002028:	8bbb      	ldrh	r3, [r7, #28]
 800202a:	3301      	adds	r3, #1
 800202c:	83bb      	strh	r3, [r7, #28]
	while ((*pText != 0)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	781b      	ldrb	r3, [r3, #0]
			& (((LCD_GetXSize() - (i * font->Width)) & 0xFFFF) >= font->Width)) {
 8002032:	2b00      	cmp	r3, #0
 8002034:	bf14      	ite	ne
 8002036:	2301      	movne	r3, #1
 8002038:	2300      	moveq	r3, #0
 800203a:	b2dc      	uxtb	r4, r3
 800203c:	f7ff ff26 	bl	8001e8c <LCD_GetXSize>
 8002040:	4603      	mov	r3, r0
 8002042:	4619      	mov	r1, r3
 8002044:	8bbb      	ldrh	r3, [r7, #28]
 8002046:	4a0c      	ldr	r2, [pc, #48]	; (8002078 <LCD_DisplayStringAt+0x11c>)
 8002048:	6812      	ldr	r2, [r2, #0]
 800204a:	8892      	ldrh	r2, [r2, #4]
 800204c:	fb02 f303 	mul.w	r3, r2, r3
 8002050:	1acb      	subs	r3, r1, r3
 8002052:	b29b      	uxth	r3, r3
 8002054:	4a08      	ldr	r2, [pc, #32]	; (8002078 <LCD_DisplayStringAt+0x11c>)
 8002056:	6812      	ldr	r2, [r2, #0]
 8002058:	8892      	ldrh	r2, [r2, #4]
 800205a:	4293      	cmp	r3, r2
 800205c:	bfac      	ite	ge
 800205e:	2301      	movge	r3, #1
 8002060:	2300      	movlt	r3, #0
 8002062:	b2db      	uxtb	r3, r3
 8002064:	4023      	ands	r3, r4
 8002066:	b2db      	uxtb	r3, r3
	while ((*pText != 0)
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1cd      	bne.n	8002008 <LCD_DisplayStringAt+0xac>
	}
}
 800206c:	bf00      	nop
 800206e:	bf00      	nop
 8002070:	3724      	adds	r7, #36	; 0x24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd90      	pop	{r4, r7, pc}
 8002076:	bf00      	nop
 8002078:	2000003c 	.word	0x2000003c

0800207c <LCD_DisplayChar>:
 * @param  Xpos: start column address
 * @param  Ypos: the Line where to display the character shape
 * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
 * @retval None
 */
void LCD_DisplayChar(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint8_t Ascii) {
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	4608      	mov	r0, r1
 8002086:	4611      	mov	r1, r2
 8002088:	461a      	mov	r2, r3
 800208a:	4603      	mov	r3, r0
 800208c:	817b      	strh	r3, [r7, #10]
 800208e:	460b      	mov	r3, r1
 8002090:	813b      	strh	r3, [r7, #8]
 8002092:	4613      	mov	r3, r2
 8002094:	71fb      	strb	r3, [r7, #7]
	DrawChar(buf, Xpos, Ypos,
			&font->table[(Ascii - ' ') * font->Height * ((font->Width + 7) / 8)]);
 8002096:	4b0f      	ldr	r3, [pc, #60]	; (80020d4 <LCD_DisplayChar+0x58>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	79fb      	ldrb	r3, [r7, #7]
 800209e:	3b20      	subs	r3, #32
 80020a0:	490c      	ldr	r1, [pc, #48]	; (80020d4 <LCD_DisplayChar+0x58>)
 80020a2:	6809      	ldr	r1, [r1, #0]
 80020a4:	88c9      	ldrh	r1, [r1, #6]
 80020a6:	fb03 f101 	mul.w	r1, r3, r1
 80020aa:	4b0a      	ldr	r3, [pc, #40]	; (80020d4 <LCD_DisplayChar+0x58>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	889b      	ldrh	r3, [r3, #4]
 80020b0:	3307      	adds	r3, #7
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	da00      	bge.n	80020b8 <LCD_DisplayChar+0x3c>
 80020b6:	3307      	adds	r3, #7
 80020b8:	10db      	asrs	r3, r3, #3
 80020ba:	fb01 f303 	mul.w	r3, r1, r3
	DrawChar(buf, Xpos, Ypos,
 80020be:	4413      	add	r3, r2
 80020c0:	893a      	ldrh	r2, [r7, #8]
 80020c2:	8979      	ldrh	r1, [r7, #10]
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f000 fa09 	bl	80024dc <DrawChar>
}
 80020ca:	bf00      	nop
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	2000003c 	.word	0x2000003c

080020d8 <LCD_DrawHLine>:
 * @param  Ypos: the Y position
 * @param  Length: line length
 * @retval None
 */
void LCD_DrawHLine(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint16_t Length,
		uint16_t color) {
 80020d8:	b580      	push	{r7, lr}
 80020da:	b088      	sub	sp, #32
 80020dc:	af02      	add	r7, sp, #8
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	4608      	mov	r0, r1
 80020e2:	4611      	mov	r1, r2
 80020e4:	461a      	mov	r2, r3
 80020e6:	4603      	mov	r3, r0
 80020e8:	817b      	strh	r3, [r7, #10]
 80020ea:	460b      	mov	r3, r1
 80020ec:	813b      	strh	r3, [r7, #8]
 80020ee:	4613      	mov	r3, r2
 80020f0:	80fb      	strh	r3, [r7, #6]
	uint16_t *xaddress = 0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	617b      	str	r3, [r7, #20]

	/* Get the line address */
	xaddress = (buf) + (LCD_GetXSize() * Ypos + Xpos);
 80020f6:	f7ff fec9 	bl	8001e8c <LCD_GetXSize>
 80020fa:	4603      	mov	r3, r0
 80020fc:	461a      	mov	r2, r3
 80020fe:	893b      	ldrh	r3, [r7, #8]
 8002100:	fb03 f202 	mul.w	r2, r3, r2
 8002104:	897b      	ldrh	r3, [r7, #10]
 8002106:	4413      	add	r3, r2
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	4413      	add	r3, r2
 800210e:	617b      	str	r3, [r7, #20]

	/* Write line */
	FillBuffer((uint32_t*) xaddress, Length, 1, 0, color);
 8002110:	88f9      	ldrh	r1, [r7, #6]
 8002112:	8c3b      	ldrh	r3, [r7, #32]
 8002114:	9300      	str	r3, [sp, #0]
 8002116:	2300      	movs	r3, #0
 8002118:	2201      	movs	r2, #1
 800211a:	6978      	ldr	r0, [r7, #20]
 800211c:	f000 fa7c 	bl	8002618 <FillBuffer>
}
 8002120:	bf00      	nop
 8002122:	3718      	adds	r7, #24
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <LCD_DrawVLine>:
 * @param  Ypos: the Y position
 * @param  Length: line length
 * @retval None
 */
void LCD_DrawVLine(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint16_t Length,
		uint16_t color) {
 8002128:	b590      	push	{r4, r7, lr}
 800212a:	b089      	sub	sp, #36	; 0x24
 800212c:	af02      	add	r7, sp, #8
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	4608      	mov	r0, r1
 8002132:	4611      	mov	r1, r2
 8002134:	461a      	mov	r2, r3
 8002136:	4603      	mov	r3, r0
 8002138:	817b      	strh	r3, [r7, #10]
 800213a:	460b      	mov	r3, r1
 800213c:	813b      	strh	r3, [r7, #8]
 800213e:	4613      	mov	r3, r2
 8002140:	80fb      	strh	r3, [r7, #6]
	uint16_t *xaddress = 0;
 8002142:	2300      	movs	r3, #0
 8002144:	617b      	str	r3, [r7, #20]

	/* Get the line address */
	xaddress = (buf) + (LCD_GetXSize() * Ypos + Xpos);
 8002146:	f7ff fea1 	bl	8001e8c <LCD_GetXSize>
 800214a:	4603      	mov	r3, r0
 800214c:	461a      	mov	r2, r3
 800214e:	893b      	ldrh	r3, [r7, #8]
 8002150:	fb03 f202 	mul.w	r2, r3, r2
 8002154:	897b      	ldrh	r3, [r7, #10]
 8002156:	4413      	add	r3, r2
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	4413      	add	r3, r2
 800215e:	617b      	str	r3, [r7, #20]

	/* Write line */
	FillBuffer((uint32_t*) xaddress, 1, Length, (LCD_GetXSize() - 1), color);
 8002160:	88fc      	ldrh	r4, [r7, #6]
 8002162:	f7ff fe93 	bl	8001e8c <LCD_GetXSize>
 8002166:	4603      	mov	r3, r0
 8002168:	3b01      	subs	r3, #1
 800216a:	461a      	mov	r2, r3
 800216c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	4613      	mov	r3, r2
 8002172:	4622      	mov	r2, r4
 8002174:	2101      	movs	r1, #1
 8002176:	6978      	ldr	r0, [r7, #20]
 8002178:	f000 fa4e 	bl	8002618 <FillBuffer>
}
 800217c:	bf00      	nop
 800217e:	371c      	adds	r7, #28
 8002180:	46bd      	mov	sp, r7
 8002182:	bd90      	pop	{r4, r7, pc}

08002184 <LCD_DrawRect>:
 * @param  Height: display rectangle height
 * @param  Width: display rectangle width
 * @retval None
 */
void LCD_DrawRect(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint16_t Width,
		uint16_t Height, uint16_t color) {
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af02      	add	r7, sp, #8
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	4608      	mov	r0, r1
 800218e:	4611      	mov	r1, r2
 8002190:	461a      	mov	r2, r3
 8002192:	4603      	mov	r3, r0
 8002194:	817b      	strh	r3, [r7, #10]
 8002196:	460b      	mov	r3, r1
 8002198:	813b      	strh	r3, [r7, #8]
 800219a:	4613      	mov	r3, r2
 800219c:	80fb      	strh	r3, [r7, #6]
	/* Draw horizontal lines */
	LCD_DrawHLine(buf, Xpos, Ypos, Width, color);
 800219e:	88f8      	ldrh	r0, [r7, #6]
 80021a0:	893a      	ldrh	r2, [r7, #8]
 80021a2:	8979      	ldrh	r1, [r7, #10]
 80021a4:	8bbb      	ldrh	r3, [r7, #28]
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	4603      	mov	r3, r0
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f7ff ff94 	bl	80020d8 <LCD_DrawHLine>
	LCD_DrawHLine(buf, Xpos, (Ypos + Height), Width, color);
 80021b0:	893a      	ldrh	r2, [r7, #8]
 80021b2:	8b3b      	ldrh	r3, [r7, #24]
 80021b4:	4413      	add	r3, r2
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	88f8      	ldrh	r0, [r7, #6]
 80021ba:	8979      	ldrh	r1, [r7, #10]
 80021bc:	8bbb      	ldrh	r3, [r7, #28]
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	4603      	mov	r3, r0
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f7ff ff88 	bl	80020d8 <LCD_DrawHLine>

	/* Draw vertical lines */
	LCD_DrawVLine(buf, Xpos, Ypos, Height, color);
 80021c8:	8b38      	ldrh	r0, [r7, #24]
 80021ca:	893a      	ldrh	r2, [r7, #8]
 80021cc:	8979      	ldrh	r1, [r7, #10]
 80021ce:	8bbb      	ldrh	r3, [r7, #28]
 80021d0:	9300      	str	r3, [sp, #0]
 80021d2:	4603      	mov	r3, r0
 80021d4:	68f8      	ldr	r0, [r7, #12]
 80021d6:	f7ff ffa7 	bl	8002128 <LCD_DrawVLine>
	LCD_DrawVLine(buf, (Xpos + Width), Ypos, Height, color);
 80021da:	897a      	ldrh	r2, [r7, #10]
 80021dc:	88fb      	ldrh	r3, [r7, #6]
 80021de:	4413      	add	r3, r2
 80021e0:	b299      	uxth	r1, r3
 80021e2:	8b38      	ldrh	r0, [r7, #24]
 80021e4:	893a      	ldrh	r2, [r7, #8]
 80021e6:	8bbb      	ldrh	r3, [r7, #28]
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	4603      	mov	r3, r0
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f7ff ff9b 	bl	8002128 <LCD_DrawVLine>
}
 80021f2:	bf00      	nop
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <LCD_DrawCircle>:
 * @param  Ypos: the Y position
 * @param  Radius: the circle radius
 * @retval None
 */
void LCD_DrawCircle(uint16_t *buf, uint16_t Xpos, uint16_t Ypos,
		uint16_t Radius, uint16_t color) {
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b088      	sub	sp, #32
 80021fe:	af00      	add	r7, sp, #0
 8002200:	60f8      	str	r0, [r7, #12]
 8002202:	4608      	mov	r0, r1
 8002204:	4611      	mov	r1, r2
 8002206:	461a      	mov	r2, r3
 8002208:	4603      	mov	r3, r0
 800220a:	817b      	strh	r3, [r7, #10]
 800220c:	460b      	mov	r3, r1
 800220e:	813b      	strh	r3, [r7, #8]
 8002210:	4613      	mov	r3, r2
 8002212:	80fb      	strh	r3, [r7, #6]
	int32_t d;/* Decision Variable */
	uint32_t curx;/* Current X Value */
	uint32_t cury;/* Current Y Value */

	d = 3 - (Radius << 1);
 8002214:	88fb      	ldrh	r3, [r7, #6]
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	f1c3 0303 	rsb	r3, r3, #3
 800221c:	61fb      	str	r3, [r7, #28]
	curx = 0;
 800221e:	2300      	movs	r3, #0
 8002220:	61bb      	str	r3, [r7, #24]
	cury = Radius;
 8002222:	88fb      	ldrh	r3, [r7, #6]
 8002224:	617b      	str	r3, [r7, #20]

	while (curx <= cury) {
 8002226:	e087      	b.n	8002338 <LCD_DrawCircle+0x13e>
		LCD_DrawPixel(buf, (Xpos + curx), (Ypos - cury), color);
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	b29a      	uxth	r2, r3
 800222c:	897b      	ldrh	r3, [r7, #10]
 800222e:	4413      	add	r3, r2
 8002230:	b299      	uxth	r1, r3
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	b29b      	uxth	r3, r3
 8002236:	893a      	ldrh	r2, [r7, #8]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	b29a      	uxth	r2, r3
 800223c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f7ff fe46 	bl	8001ed0 <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos - curx), (Ypos - cury), color);
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	b29b      	uxth	r3, r3
 8002248:	897a      	ldrh	r2, [r7, #10]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	b299      	uxth	r1, r3
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	b29b      	uxth	r3, r3
 8002252:	893a      	ldrh	r2, [r7, #8]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	b29a      	uxth	r2, r3
 8002258:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800225a:	68f8      	ldr	r0, [r7, #12]
 800225c:	f7ff fe38 	bl	8001ed0 <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos + cury), (Ypos - curx), color);
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	b29a      	uxth	r2, r3
 8002264:	897b      	ldrh	r3, [r7, #10]
 8002266:	4413      	add	r3, r2
 8002268:	b299      	uxth	r1, r3
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	b29b      	uxth	r3, r3
 800226e:	893a      	ldrh	r2, [r7, #8]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	b29a      	uxth	r2, r3
 8002274:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f7ff fe2a 	bl	8001ed0 <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos - cury), (Ypos - curx), color);
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	b29b      	uxth	r3, r3
 8002280:	897a      	ldrh	r2, [r7, #10]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	b299      	uxth	r1, r3
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	b29b      	uxth	r3, r3
 800228a:	893a      	ldrh	r2, [r7, #8]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	b29a      	uxth	r2, r3
 8002290:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f7ff fe1c 	bl	8001ed0 <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos + curx), (Ypos + cury), color);
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	b29a      	uxth	r2, r3
 800229c:	897b      	ldrh	r3, [r7, #10]
 800229e:	4413      	add	r3, r2
 80022a0:	b299      	uxth	r1, r3
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	893b      	ldrh	r3, [r7, #8]
 80022a8:	4413      	add	r3, r2
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f7ff fe0e 	bl	8001ed0 <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos - curx), (Ypos + cury), color);
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	897a      	ldrh	r2, [r7, #10]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	b299      	uxth	r1, r3
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	893b      	ldrh	r3, [r7, #8]
 80022c4:	4413      	add	r3, r2
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f7ff fe00 	bl	8001ed0 <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos + cury), (Ypos + curx), color);
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	897b      	ldrh	r3, [r7, #10]
 80022d6:	4413      	add	r3, r2
 80022d8:	b299      	uxth	r1, r3
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	b29a      	uxth	r2, r3
 80022de:	893b      	ldrh	r3, [r7, #8]
 80022e0:	4413      	add	r3, r2
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f7ff fdf2 	bl	8001ed0 <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos - cury), (Ypos + curx), color);
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	897a      	ldrh	r2, [r7, #10]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	b299      	uxth	r1, r3
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	893b      	ldrh	r3, [r7, #8]
 80022fc:	4413      	add	r3, r2
 80022fe:	b29a      	uxth	r2, r3
 8002300:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002302:	68f8      	ldr	r0, [r7, #12]
 8002304:	f7ff fde4 	bl	8001ed0 <LCD_DrawPixel>

		if (d < 0) {
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	2b00      	cmp	r3, #0
 800230c:	da06      	bge.n	800231c <LCD_DrawCircle+0x122>
			d += (curx << 2) + 6;
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	009a      	lsls	r2, r3, #2
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	4413      	add	r3, r2
 8002316:	3306      	adds	r3, #6
 8002318:	61fb      	str	r3, [r7, #28]
 800231a:	e00a      	b.n	8002332 <LCD_DrawCircle+0x138>
		} else {
			d += ((curx - cury) << 2) + 10;
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	009a      	lsls	r2, r3, #2
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	4413      	add	r3, r2
 8002328:	330a      	adds	r3, #10
 800232a:	61fb      	str	r3, [r7, #28]
			cury--;
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	3b01      	subs	r3, #1
 8002330:	617b      	str	r3, [r7, #20]
		}
		curx++;
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	3301      	adds	r3, #1
 8002336:	61bb      	str	r3, [r7, #24]
	while (curx <= cury) {
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	429a      	cmp	r2, r3
 800233e:	f67f af73 	bls.w	8002228 <LCD_DrawCircle+0x2e>
	}
}
 8002342:	bf00      	nop
 8002344:	bf00      	nop
 8002346:	3720      	adds	r7, #32
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <LCD_FillRect>:
 * @param  Height: rectangle height
 * @param  Width: rectangle width
 * @retval None
 */
void LCD_FillRect(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint16_t Width,
		uint16_t Height, uint16_t color) {
 800234c:	b5b0      	push	{r4, r5, r7, lr}
 800234e:	b088      	sub	sp, #32
 8002350:	af02      	add	r7, sp, #8
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	4608      	mov	r0, r1
 8002356:	4611      	mov	r1, r2
 8002358:	461a      	mov	r2, r3
 800235a:	4603      	mov	r3, r0
 800235c:	817b      	strh	r3, [r7, #10]
 800235e:	460b      	mov	r3, r1
 8002360:	813b      	strh	r3, [r7, #8]
 8002362:	4613      	mov	r3, r2
 8002364:	80fb      	strh	r3, [r7, #6]
	uint16_t *xaddress = 0;
 8002366:	2300      	movs	r3, #0
 8002368:	617b      	str	r3, [r7, #20]

	/* Get the rectangle start address */
	xaddress = (buf) + (LCD_GetXSize() * Ypos + Xpos);
 800236a:	f7ff fd8f 	bl	8001e8c <LCD_GetXSize>
 800236e:	4603      	mov	r3, r0
 8002370:	461a      	mov	r2, r3
 8002372:	893b      	ldrh	r3, [r7, #8]
 8002374:	fb03 f202 	mul.w	r2, r3, r2
 8002378:	897b      	ldrh	r3, [r7, #10]
 800237a:	4413      	add	r3, r2
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	4413      	add	r3, r2
 8002382:	617b      	str	r3, [r7, #20]

	/* Fill the rectangle */
	FillBuffer((uint32_t*) xaddress, Width, Height, (LCD_GetXSize() - Width),
 8002384:	88fc      	ldrh	r4, [r7, #6]
 8002386:	8d3d      	ldrh	r5, [r7, #40]	; 0x28
 8002388:	f7ff fd80 	bl	8001e8c <LCD_GetXSize>
 800238c:	4603      	mov	r3, r0
 800238e:	461a      	mov	r2, r3
 8002390:	88fb      	ldrh	r3, [r7, #6]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	461a      	mov	r2, r3
 8002396:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	4613      	mov	r3, r2
 800239c:	462a      	mov	r2, r5
 800239e:	4621      	mov	r1, r4
 80023a0:	6978      	ldr	r0, [r7, #20]
 80023a2:	f000 f939 	bl	8002618 <FillBuffer>
			color);
}
 80023a6:	bf00      	nop
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bdb0      	pop	{r4, r5, r7, pc}

080023ae <LCD_FillCircle>:
 * @param  Ypos: the Y position
 * @param  Radius: the circle radius
 * @retval None
 */
void LCD_FillCircle(uint16_t *buf, uint16_t Xpos, uint16_t Ypos,
		uint16_t Radius, uint16_t color) {
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b08a      	sub	sp, #40	; 0x28
 80023b2:	af02      	add	r7, sp, #8
 80023b4:	60f8      	str	r0, [r7, #12]
 80023b6:	4608      	mov	r0, r1
 80023b8:	4611      	mov	r1, r2
 80023ba:	461a      	mov	r2, r3
 80023bc:	4603      	mov	r3, r0
 80023be:	817b      	strh	r3, [r7, #10]
 80023c0:	460b      	mov	r3, r1
 80023c2:	813b      	strh	r3, [r7, #8]
 80023c4:	4613      	mov	r3, r2
 80023c6:	80fb      	strh	r3, [r7, #6]
	int32_t d; /* Decision Variable */
	uint32_t curx;/* Current X Value */
	uint32_t cury;/* Current Y Value */

	d = 3 - (Radius << 1);
 80023c8:	88fb      	ldrh	r3, [r7, #6]
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	f1c3 0303 	rsb	r3, r3, #3
 80023d0:	61fb      	str	r3, [r7, #28]

	curx = 0;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61bb      	str	r3, [r7, #24]
	cury = Radius;
 80023d6:	88fb      	ldrh	r3, [r7, #6]
 80023d8:	617b      	str	r3, [r7, #20]

	while (curx <= cury) {
 80023da:	e06d      	b.n	80024b8 <LCD_FillCircle+0x10a>
		if (cury > 0) {
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d027      	beq.n	8002432 <LCD_FillCircle+0x84>
			LCD_DrawHLine(buf, Xpos - cury, Ypos + curx, 2 * cury, color);
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	897a      	ldrh	r2, [r7, #10]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	b299      	uxth	r1, r3
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	893b      	ldrh	r3, [r7, #8]
 80023f2:	4413      	add	r3, r2
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	b298      	uxth	r0, r3
 80023fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	4603      	mov	r3, r0
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	f7ff fe67 	bl	80020d8 <LCD_DrawHLine>
			LCD_DrawHLine(buf, Xpos - cury, Ypos - curx, 2 * cury, color);
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	b29b      	uxth	r3, r3
 800240e:	897a      	ldrh	r2, [r7, #10]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	b299      	uxth	r1, r3
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	b29b      	uxth	r3, r3
 8002418:	893a      	ldrh	r2, [r7, #8]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	b29a      	uxth	r2, r3
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	b29b      	uxth	r3, r3
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	b298      	uxth	r0, r3
 8002426:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	4603      	mov	r3, r0
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	f7ff fe53 	bl	80020d8 <LCD_DrawHLine>
		}

		if (curx > 0) {
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d027      	beq.n	8002488 <LCD_FillCircle+0xda>
			LCD_DrawHLine(buf, Xpos - curx, Ypos - cury, 2 * curx, color);
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	b29b      	uxth	r3, r3
 800243c:	897a      	ldrh	r2, [r7, #10]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	b299      	uxth	r1, r3
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	b29b      	uxth	r3, r3
 8002446:	893a      	ldrh	r2, [r7, #8]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	b29a      	uxth	r2, r3
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	b29b      	uxth	r3, r3
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	b298      	uxth	r0, r3
 8002454:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	4603      	mov	r3, r0
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f7ff fe3c 	bl	80020d8 <LCD_DrawHLine>
			LCD_DrawHLine(buf, Xpos - curx, Ypos + cury, 2 * curx, color);
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	b29b      	uxth	r3, r3
 8002464:	897a      	ldrh	r2, [r7, #10]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	b299      	uxth	r1, r3
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	b29a      	uxth	r2, r3
 800246e:	893b      	ldrh	r3, [r7, #8]
 8002470:	4413      	add	r3, r2
 8002472:	b29a      	uxth	r2, r3
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	b29b      	uxth	r3, r3
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	b298      	uxth	r0, r3
 800247c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	4603      	mov	r3, r0
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f7ff fe28 	bl	80020d8 <LCD_DrawHLine>
		}
		if (d < 0) {
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	2b00      	cmp	r3, #0
 800248c:	da06      	bge.n	800249c <LCD_FillCircle+0xee>
			d += (curx << 2) + 6;
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	009a      	lsls	r2, r3, #2
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	4413      	add	r3, r2
 8002496:	3306      	adds	r3, #6
 8002498:	61fb      	str	r3, [r7, #28]
 800249a:	e00a      	b.n	80024b2 <LCD_FillCircle+0x104>
		} else {
			d += ((curx - cury) << 2) + 10;
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	009a      	lsls	r2, r3, #2
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	4413      	add	r3, r2
 80024a8:	330a      	adds	r3, #10
 80024aa:	61fb      	str	r3, [r7, #28]
			cury--;
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	617b      	str	r3, [r7, #20]
		}
		curx++;
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	3301      	adds	r3, #1
 80024b6:	61bb      	str	r3, [r7, #24]
	while (curx <= cury) {
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d98d      	bls.n	80023dc <LCD_FillCircle+0x2e>
	}
	LCD_DrawCircle(buf, Xpos, Ypos, Radius, color);
 80024c0:	88f8      	ldrh	r0, [r7, #6]
 80024c2:	893a      	ldrh	r2, [r7, #8]
 80024c4:	8979      	ldrh	r1, [r7, #10]
 80024c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80024c8:	9300      	str	r3, [sp, #0]
 80024ca:	4603      	mov	r3, r0
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f7ff fe94 	bl	80021fa <LCD_DrawCircle>
}
 80024d2:	bf00      	nop
 80024d4:	3720      	adds	r7, #32
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
	...

080024dc <DrawChar>:
 * @param  Ypos: start column address
 * @param  c: pointer to the character data
 * @retval None
 */
static void DrawChar(uint16_t *buf, uint16_t Xpos, uint16_t Ypos,
		const uint8_t *c) {
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08a      	sub	sp, #40	; 0x28
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	607b      	str	r3, [r7, #4]
 80024e6:	460b      	mov	r3, r1
 80024e8:	817b      	strh	r3, [r7, #10]
 80024ea:	4613      	mov	r3, r2
 80024ec:	813b      	strh	r3, [r7, #8]
	uint32_t i = 0, j = 0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	627b      	str	r3, [r7, #36]	; 0x24
 80024f2:	2300      	movs	r3, #0
 80024f4:	623b      	str	r3, [r7, #32]
	uint16_t height, width;
	uint8_t offset;
	uint8_t *pchar;
	uint32_t line = 0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	61fb      	str	r3, [r7, #28]

	height = font->Height;
 80024fa:	4b44      	ldr	r3, [pc, #272]	; (800260c <DrawChar+0x130>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	88db      	ldrh	r3, [r3, #6]
 8002500:	837b      	strh	r3, [r7, #26]
	width = font->Width;
 8002502:	4b42      	ldr	r3, [pc, #264]	; (800260c <DrawChar+0x130>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	889b      	ldrh	r3, [r3, #4]
 8002508:	833b      	strh	r3, [r7, #24]

	offset = 8 * ((width + 7) / 8) - width;
 800250a:	8b3b      	ldrh	r3, [r7, #24]
 800250c:	3307      	adds	r3, #7
 800250e:	2b00      	cmp	r3, #0
 8002510:	da00      	bge.n	8002514 <DrawChar+0x38>
 8002512:	3307      	adds	r3, #7
 8002514:	10db      	asrs	r3, r3, #3
 8002516:	b2db      	uxtb	r3, r3
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	b2da      	uxtb	r2, r3
 800251c:	8b3b      	ldrh	r3, [r7, #24]
 800251e:	b2db      	uxtb	r3, r3
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	75fb      	strb	r3, [r7, #23]

	for (i = 0; i < height; i++) {
 8002524:	2300      	movs	r3, #0
 8002526:	627b      	str	r3, [r7, #36]	; 0x24
 8002528:	e067      	b.n	80025fa <DrawChar+0x11e>
		pchar = ((uint8_t*) c + (width + 7) / 8 * i);
 800252a:	8b3b      	ldrh	r3, [r7, #24]
 800252c:	3307      	adds	r3, #7
 800252e:	2b00      	cmp	r3, #0
 8002530:	da00      	bge.n	8002534 <DrawChar+0x58>
 8002532:	3307      	adds	r3, #7
 8002534:	10db      	asrs	r3, r3, #3
 8002536:	461a      	mov	r2, r3
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	fb02 f303 	mul.w	r3, r2, r3
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	4413      	add	r3, r2
 8002542:	613b      	str	r3, [r7, #16]

		switch (((width + 7) / 8)) {
 8002544:	8b3b      	ldrh	r3, [r7, #24]
 8002546:	3307      	adds	r3, #7
 8002548:	2b00      	cmp	r3, #0
 800254a:	da00      	bge.n	800254e <DrawChar+0x72>
 800254c:	3307      	adds	r3, #7
 800254e:	10db      	asrs	r3, r3, #3
 8002550:	2b01      	cmp	r3, #1
 8002552:	d002      	beq.n	800255a <DrawChar+0x7e>
 8002554:	2b02      	cmp	r3, #2
 8002556:	d004      	beq.n	8002562 <DrawChar+0x86>
 8002558:	e00c      	b.n	8002574 <DrawChar+0x98>
		case 1:
			line = pchar[0];
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	61fb      	str	r3, [r7, #28]
			break;
 8002560:	e016      	b.n	8002590 <DrawChar+0xb4>

		case 2:
			line = (pchar[0] << 8) | pchar[1];
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	021b      	lsls	r3, r3, #8
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	3201      	adds	r2, #1
 800256c:	7812      	ldrb	r2, [r2, #0]
 800256e:	4313      	orrs	r3, r2
 8002570:	61fb      	str	r3, [r7, #28]
			break;
 8002572:	e00d      	b.n	8002590 <DrawChar+0xb4>

		case 3:
		default:
			line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	041a      	lsls	r2, r3, #16
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	3301      	adds	r3, #1
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	021b      	lsls	r3, r3, #8
 8002582:	4313      	orrs	r3, r2
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	3202      	adds	r2, #2
 8002588:	7812      	ldrb	r2, [r2, #0]
 800258a:	4313      	orrs	r3, r2
 800258c:	61fb      	str	r3, [r7, #28]
			break;
 800258e:	bf00      	nop
		}

		for (j = 0; j < width; j++) {
 8002590:	2300      	movs	r3, #0
 8002592:	623b      	str	r3, [r7, #32]
 8002594:	e027      	b.n	80025e6 <DrawChar+0x10a>
			if (line & (1 << (width - j + offset - 1))) {
 8002596:	8b3a      	ldrh	r2, [r7, #24]
 8002598:	6a3b      	ldr	r3, [r7, #32]
 800259a:	1ad2      	subs	r2, r2, r3
 800259c:	7dfb      	ldrb	r3, [r7, #23]
 800259e:	4413      	add	r3, r2
 80025a0:	3b01      	subs	r3, #1
 80025a2:	2201      	movs	r2, #1
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	461a      	mov	r2, r3
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	4013      	ands	r3, r2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00b      	beq.n	80025ca <DrawChar+0xee>
				LCD_DrawPixel(buf, (Xpos + j), Ypos, font_color);
 80025b2:	6a3b      	ldr	r3, [r7, #32]
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	897b      	ldrh	r3, [r7, #10]
 80025b8:	4413      	add	r3, r2
 80025ba:	b299      	uxth	r1, r3
 80025bc:	4b14      	ldr	r3, [pc, #80]	; (8002610 <DrawChar+0x134>)
 80025be:	881b      	ldrh	r3, [r3, #0]
 80025c0:	893a      	ldrh	r2, [r7, #8]
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f7ff fc84 	bl	8001ed0 <LCD_DrawPixel>
 80025c8:	e00a      	b.n	80025e0 <DrawChar+0x104>
			} else {
				LCD_DrawPixel(buf, (Xpos + j), Ypos, font_bcolor);
 80025ca:	6a3b      	ldr	r3, [r7, #32]
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	897b      	ldrh	r3, [r7, #10]
 80025d0:	4413      	add	r3, r2
 80025d2:	b299      	uxth	r1, r3
 80025d4:	4b0f      	ldr	r3, [pc, #60]	; (8002614 <DrawChar+0x138>)
 80025d6:	881b      	ldrh	r3, [r3, #0]
 80025d8:	893a      	ldrh	r2, [r7, #8]
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f7ff fc78 	bl	8001ed0 <LCD_DrawPixel>
		for (j = 0; j < width; j++) {
 80025e0:	6a3b      	ldr	r3, [r7, #32]
 80025e2:	3301      	adds	r3, #1
 80025e4:	623b      	str	r3, [r7, #32]
 80025e6:	8b3b      	ldrh	r3, [r7, #24]
 80025e8:	6a3a      	ldr	r2, [r7, #32]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d3d3      	bcc.n	8002596 <DrawChar+0xba>
			}
		}
		Ypos++;
 80025ee:	893b      	ldrh	r3, [r7, #8]
 80025f0:	3301      	adds	r3, #1
 80025f2:	813b      	strh	r3, [r7, #8]
	for (i = 0; i < height; i++) {
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	3301      	adds	r3, #1
 80025f8:	627b      	str	r3, [r7, #36]	; 0x24
 80025fa:	8b7b      	ldrh	r3, [r7, #26]
 80025fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025fe:	429a      	cmp	r2, r3
 8002600:	d393      	bcc.n	800252a <DrawChar+0x4e>
	}
}
 8002602:	bf00      	nop
 8002604:	bf00      	nop
 8002606:	3728      	adds	r7, #40	; 0x28
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	2000003c 	.word	0x2000003c
 8002610:	20000040 	.word	0x20000040
 8002614:	2000020c 	.word	0x2000020c

08002618 <FillBuffer>:
 * @param  OffLine: offset
 * @param  ColorIndex: color Index
 * @retval None
 */
static void FillBuffer(void *pDst, uint32_t xSize, uint32_t ySize,
		uint32_t OffLine, uint16_t ColorIndex) {
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
 8002624:	603b      	str	r3, [r7, #0]

	DMA2D->CR = DMA2D_R2M;
 8002626:	4b16      	ldr	r3, [pc, #88]	; (8002680 <FillBuffer+0x68>)
 8002628:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800262c:	601a      	str	r2, [r3, #0]
	DMA2D->OCOLR = 0x0000FFFF & ColorIndex;
 800262e:	4a14      	ldr	r2, [pc, #80]	; (8002680 <FillBuffer+0x68>)
 8002630:	8b3b      	ldrh	r3, [r7, #24]
 8002632:	6393      	str	r3, [r2, #56]	; 0x38
	DMA2D->OMAR = (uint32_t) pDst;
 8002634:	4a12      	ldr	r2, [pc, #72]	; (8002680 <FillBuffer+0x68>)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	63d3      	str	r3, [r2, #60]	; 0x3c
	DMA2D->OOR = OffLine;
 800263a:	4a11      	ldr	r2, [pc, #68]	; (8002680 <FillBuffer+0x68>)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	6413      	str	r3, [r2, #64]	; 0x40
	DMA2D->OPFCCR = LTDC_PIXEL_FORMAT_RGB565;
 8002640:	4b0f      	ldr	r3, [pc, #60]	; (8002680 <FillBuffer+0x68>)
 8002642:	2202      	movs	r2, #2
 8002644:	635a      	str	r2, [r3, #52]	; 0x34
	DMA2D->NLR = (uint32_t) (xSize << 16) | (uint16_t) ySize;
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	041b      	lsls	r3, r3, #16
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	b292      	uxth	r2, r2
 800264e:	4611      	mov	r1, r2
 8002650:	4a0b      	ldr	r2, [pc, #44]	; (8002680 <FillBuffer+0x68>)
 8002652:	430b      	orrs	r3, r1
 8002654:	6453      	str	r3, [r2, #68]	; 0x44

	DMA2D->CR |= DMA2D_CR_START;
 8002656:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <FillBuffer+0x68>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a09      	ldr	r2, [pc, #36]	; (8002680 <FillBuffer+0x68>)
 800265c:	f043 0301 	orr.w	r3, r3, #1
 8002660:	6013      	str	r3, [r2, #0]

	while (DMA2D->CR & DMA2D_CR_START) {
 8002662:	bf00      	nop
 8002664:	4b06      	ldr	r3, [pc, #24]	; (8002680 <FillBuffer+0x68>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1f9      	bne.n	8002664 <FillBuffer+0x4c>

	}
}
 8002670:	bf00      	nop
 8002672:	bf00      	nop
 8002674:	3714      	adds	r7, #20
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	52001000 	.word	0x52001000

08002684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b088      	sub	sp, #32
 8002688:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800268a:	f001 fc71 	bl	8003f70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800268e:	f000 f86d 	bl	800276c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002692:	f000 f8ed 	bl	8002870 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002696:	f000 fc93 	bl	8002fc0 <MX_GPIO_Init>
  MX_DMA_Init();
 800269a:	f000 fc71 	bl	8002f80 <MX_DMA_Init>
  MX_LTDC_Init();
 800269e:	f000 fa2f 	bl	8002b00 <MX_LTDC_Init>
  MX_SPI2_Init();
 80026a2:	f000 fbc3 	bl	8002e2c <MX_SPI2_Init>
  MX_OCTOSPI1_Init();
 80026a6:	f000 faab 	bl	8002c00 <MX_OCTOSPI1_Init>
  MX_SAI1_Init();
 80026aa:	f000 fb89 	bl	8002dc0 <MX_SAI1_Init>
  MX_RTC_Init();
 80026ae:	f000 fb07 	bl	8002cc0 <MX_RTC_Init>
  MX_DAC1_Init();
 80026b2:	f000 f999 	bl	80029e8 <MX_DAC1_Init>
  MX_DAC2_Init();
 80026b6:	f000 f9d3 	bl	8002a60 <MX_DAC2_Init>
  MX_ADC1_Init();
 80026ba:	f000 f91d 	bl	80028f8 <MX_ADC1_Init>
  MX_TIM1_Init();
 80026be:	f000 fc0b 	bl	8002ed8 <MX_TIM1_Init>
  MX_DMA2D_Init();
 80026c2:	f000 f9ff 	bl	8002ac4 <MX_DMA2D_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80026c6:	f000 f90b 	bl	80028e0 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	lcd_init(&hspi2, &hltdc);
 80026ca:	4923      	ldr	r1, [pc, #140]	; (8002758 <main+0xd4>)
 80026cc:	4823      	ldr	r0, [pc, #140]	; (800275c <main+0xd8>)
 80026ce:	f7fe ff4d 	bl	800156c <lcd_init>
	lcd_backlight_set(backlightLevels[6]);
 80026d2:	23b2      	movs	r3, #178	; 0xb2
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7fe ff1d 	bl	8001514 <lcd_backlight_set>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	OSPI_Init(&hospi1);
 80026da:	4821      	ldr	r0, [pc, #132]	; (8002760 <main+0xdc>)
 80026dc:	f7fe fe6a 	bl	80013b4 <OSPI_Init>

	// Sanity check, sometimes this is triggered
	uint32_t add = 0x90000000;
 80026e0:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 80026e4:	61fb      	str	r3, [r7, #28]
	uint32_t *ptr = (uint32_t*) add;
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	61bb      	str	r3, [r7, #24]
	if (*ptr == 0x88888888) {
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f1b3 3f88 	cmp.w	r3, #2290649224	; 0x88888888
 80026f2:	d101      	bne.n	80026f8 <main+0x74>
		Error_Handler();
 80026f4:	f000 fd64 	bl	80031c0 <Error_Handler>
	}

	bq24072_init();
 80026f8:	f7fe f9d6 	bl	8000aa8 <bq24072_init>

	gw_audio_init();
 80026fc:	f7fd fe48 	bl	8000390 <gw_audio_init>

	RTC_TimeTypeDef sTime = { 0 };
 8002700:	1d3b      	adds	r3, r7, #4
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	605a      	str	r2, [r3, #4]
 8002708:	609a      	str	r2, [r3, #8]
 800270a:	60da      	str	r2, [r3, #12]
 800270c:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 800270e:	2300      	movs	r3, #0
 8002710:	603b      	str	r3, [r7, #0]
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002712:	1d3b      	adds	r3, r7, #4
 8002714:	2200      	movs	r2, #0
 8002716:	4619      	mov	r1, r3
 8002718:	4812      	ldr	r0, [pc, #72]	; (8002764 <main+0xe0>)
 800271a:	f00c fd39 	bl	800f190 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800271e:	463b      	mov	r3, r7
 8002720:	2200      	movs	r2, #0
 8002722:	4619      	mov	r1, r3
 8002724:	480f      	ldr	r0, [pc, #60]	; (8002764 <main+0xe0>)
 8002726:	f00c fe17 	bl	800f358 <HAL_RTC_GetDate>
	HAL_ADC_Start(&hadc1);
 800272a:	480f      	ldr	r0, [pc, #60]	; (8002768 <main+0xe4>)
 800272c:	f002 f876 	bl	800481c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002730:	f04f 31ff 	mov.w	r1, #4294967295
 8002734:	480c      	ldr	r0, [pc, #48]	; (8002768 <main+0xe4>)
 8002736:	f002 f92b 	bl	8004990 <HAL_ADC_PollForConversion>
	srand(HAL_ADC_GetValue(&hadc1) ^ sTime.SubSeconds);
 800273a:	480b      	ldr	r0, [pc, #44]	; (8002768 <main+0xe4>)
 800273c:	f002 fb6a 	bl	8004e14 <HAL_ADC_GetValue>
 8002740:	4602      	mov	r2, r0
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	4053      	eors	r3, r2
 8002746:	4618      	mov	r0, r3
 8002748:	f00e ffd6 	bl	80116f8 <srand>

	game_init();
 800274c:	f7ff f902 	bl	8001954 <game_init>

	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		game_loop();
 8002750:	f7ff f952 	bl	80019f8 <game_loop>
 8002754:	e7fc      	b.n	8002750 <main+0xcc>
 8002756:	bf00      	nop
 8002758:	20000304 	.word	0x20000304
 800275c:	20000540 	.word	0x20000540
 8002760:	200003ac 	.word	0x200003ac
 8002764:	20000408 	.word	0x20000408
 8002768:	20000210 	.word	0x20000210

0800276c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b09c      	sub	sp, #112	; 0x70
 8002770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002776:	224c      	movs	r2, #76	; 0x4c
 8002778:	2100      	movs	r1, #0
 800277a:	4618      	mov	r0, r3
 800277c:	f00f fa62 	bl	8011c44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002780:	1d3b      	adds	r3, r7, #4
 8002782:	2220      	movs	r2, #32
 8002784:	2100      	movs	r1, #0
 8002786:	4618      	mov	r0, r3
 8002788:	f00f fa5c 	bl	8011c44 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 800278c:	4b36      	ldr	r3, [pc, #216]	; (8002868 <SystemClock_Config+0xfc>)
 800278e:	f04f 32ff 	mov.w	r2, #4294967295
 8002792:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002796:	2002      	movs	r0, #2
 8002798:	f008 ffea 	bl	800b770 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800279c:	2300      	movs	r3, #0
 800279e:	603b      	str	r3, [r7, #0]
 80027a0:	4b32      	ldr	r3, [pc, #200]	; (800286c <SystemClock_Config+0x100>)
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	4a31      	ldr	r2, [pc, #196]	; (800286c <SystemClock_Config+0x100>)
 80027a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027aa:	6193      	str	r3, [r2, #24]
 80027ac:	4b2f      	ldr	r3, [pc, #188]	; (800286c <SystemClock_Config+0x100>)
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80027b4:	603b      	str	r3, [r7, #0]
 80027b6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80027b8:	bf00      	nop
 80027ba:	4b2c      	ldr	r3, [pc, #176]	; (800286c <SystemClock_Config+0x100>)
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027c6:	d1f8      	bne.n	80027ba <SystemClock_Config+0x4e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80027c8:	f008 ffc2 	bl	800b750 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80027cc:	4b26      	ldr	r3, [pc, #152]	; (8002868 <SystemClock_Config+0xfc>)
 80027ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d0:	4a25      	ldr	r2, [pc, #148]	; (8002868 <SystemClock_Config+0xfc>)
 80027d2:	f023 0318 	bic.w	r3, r3, #24
 80027d6:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80027d8:	230e      	movs	r3, #14
 80027da:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80027dc:	2301      	movs	r3, #1
 80027de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80027e0:	2301      	movs	r3, #1
 80027e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80027e4:	2340      	movs	r3, #64	; 0x40
 80027e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80027e8:	2301      	movs	r3, #1
 80027ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027ec:	2302      	movs	r3, #2
 80027ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80027f0:	2300      	movs	r3, #0
 80027f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80027f4:	2310      	movs	r3, #16
 80027f6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 140;
 80027f8:	238c      	movs	r3, #140	; 0x8c
 80027fa:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80027fc:	2302      	movs	r3, #2
 80027fe:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002800:	2302      	movs	r3, #2
 8002802:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002804:	2302      	movs	r3, #2
 8002806:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8002808:	2308      	movs	r3, #8
 800280a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800280c:	2300      	movs	r3, #0
 800280e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002810:	2300      	movs	r3, #0
 8002812:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002814:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002818:	4618      	mov	r0, r3
 800281a:	f008 ffe3 	bl	800b7e4 <HAL_RCC_OscConfig>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8002824:	f000 fccc 	bl	80031c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002828:	233f      	movs	r3, #63	; 0x3f
 800282a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800282c:	2303      	movs	r3, #3
 800282e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002830:	2300      	movs	r3, #0
 8002832:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8002834:	2300      	movs	r3, #0
 8002836:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002838:	2340      	movs	r3, #64	; 0x40
 800283a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800283c:	2340      	movs	r3, #64	; 0x40
 800283e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002840:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002844:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002846:	2340      	movs	r3, #64	; 0x40
 8002848:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800284a:	1d3b      	adds	r3, r7, #4
 800284c:	2106      	movs	r1, #6
 800284e:	4618      	mov	r0, r3
 8002850:	f009 fbfa 	bl	800c048 <HAL_RCC_ClockConfig>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800285a:	f000 fcb1 	bl	80031c0 <Error_Handler>
  }
}
 800285e:	bf00      	nop
 8002860:	3770      	adds	r7, #112	; 0x70
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	58024400 	.word	0x58024400
 800286c:	58024800 	.word	0x58024800

08002870 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b0b0      	sub	sp, #192	; 0xc0
 8002874:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002876:	463b      	mov	r3, r7
 8002878:	22c0      	movs	r2, #192	; 0xc0
 800287a:	2100      	movs	r1, #0
 800287c:	4618      	mov	r0, r3
 800287e:	f00f f9e1 	bl	8011c44 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_CKPER
 8002882:	4a16      	ldr	r2, [pc, #88]	; (80028dc <PeriphCommonClock_Config+0x6c>)
 8002884:	f04f 0300 	mov.w	r3, #0
 8002888:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLL3.PLL3M = 4;
 800288c:	2304      	movs	r3, #4
 800288e:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 9;
 8002890:	2309      	movs	r3, #9
 8002892:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8002894:	2302      	movs	r3, #2
 8002896:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8002898:	2302      	movs	r3, #2
 800289a:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 24;
 800289c:	2318      	movs	r3, #24
 800289e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80028a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80028a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80028a6:	2300      	movs	r3, #0
 80028a8:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80028aa:	2300      	movs	r3, #0
 80028ac:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 80028ae:	2300      	movs	r3, #0
 80028b0:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 80028b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80028ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028c2:	463b      	mov	r3, r7
 80028c4:	4618      	mov	r0, r3
 80028c6:	f009 ff35 	bl	800c734 <HAL_RCCEx_PeriphCLKConfig>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <PeriphCommonClock_Config+0x64>
  {
    Error_Handler();
 80028d0:	f000 fc76 	bl	80031c0 <Error_Handler>
  }
}
 80028d4:	bf00      	nop
 80028d6:	37c0      	adds	r7, #192	; 0xc0
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	a0080000 	.word	0xa0080000

080028e0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* OCTOSPI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 0, 0);
 80028e4:	2200      	movs	r2, #0
 80028e6:	2100      	movs	r1, #0
 80028e8:	205c      	movs	r0, #92	; 0x5c
 80028ea:	f003 fc00 	bl	80060ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 80028ee:	205c      	movs	r0, #92	; 0x5c
 80028f0:	f003 fc17 	bl	8006122 <HAL_NVIC_EnableIRQ>
}
 80028f4:	bf00      	nop
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b08a      	sub	sp, #40	; 0x28
 80028fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80028fe:	f107 031c 	add.w	r3, r7, #28
 8002902:	2200      	movs	r2, #0
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	605a      	str	r2, [r3, #4]
 8002908:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800290a:	463b      	mov	r3, r7
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	605a      	str	r2, [r3, #4]
 8002912:	609a      	str	r2, [r3, #8]
 8002914:	60da      	str	r2, [r3, #12]
 8002916:	611a      	str	r2, [r3, #16]
 8002918:	615a      	str	r2, [r3, #20]
 800291a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800291c:	4b2f      	ldr	r3, [pc, #188]	; (80029dc <MX_ADC1_Init+0xe4>)
 800291e:	4a30      	ldr	r2, [pc, #192]	; (80029e0 <MX_ADC1_Init+0xe8>)
 8002920:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002922:	4b2e      	ldr	r3, [pc, #184]	; (80029dc <MX_ADC1_Init+0xe4>)
 8002924:	2200      	movs	r2, #0
 8002926:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8002928:	4b2c      	ldr	r3, [pc, #176]	; (80029dc <MX_ADC1_Init+0xe4>)
 800292a:	2200      	movs	r2, #0
 800292c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800292e:	4b2b      	ldr	r3, [pc, #172]	; (80029dc <MX_ADC1_Init+0xe4>)
 8002930:	2200      	movs	r2, #0
 8002932:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002934:	4b29      	ldr	r3, [pc, #164]	; (80029dc <MX_ADC1_Init+0xe4>)
 8002936:	2204      	movs	r2, #4
 8002938:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800293a:	4b28      	ldr	r3, [pc, #160]	; (80029dc <MX_ADC1_Init+0xe4>)
 800293c:	2200      	movs	r2, #0
 800293e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002940:	4b26      	ldr	r3, [pc, #152]	; (80029dc <MX_ADC1_Init+0xe4>)
 8002942:	2200      	movs	r2, #0
 8002944:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8002946:	4b25      	ldr	r3, [pc, #148]	; (80029dc <MX_ADC1_Init+0xe4>)
 8002948:	2201      	movs	r2, #1
 800294a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800294c:	4b23      	ldr	r3, [pc, #140]	; (80029dc <MX_ADC1_Init+0xe4>)
 800294e:	2200      	movs	r2, #0
 8002950:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002952:	4b22      	ldr	r3, [pc, #136]	; (80029dc <MX_ADC1_Init+0xe4>)
 8002954:	2200      	movs	r2, #0
 8002956:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002958:	4b20      	ldr	r3, [pc, #128]	; (80029dc <MX_ADC1_Init+0xe4>)
 800295a:	2200      	movs	r2, #0
 800295c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800295e:	4b1f      	ldr	r3, [pc, #124]	; (80029dc <MX_ADC1_Init+0xe4>)
 8002960:	2200      	movs	r2, #0
 8002962:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002964:	4b1d      	ldr	r3, [pc, #116]	; (80029dc <MX_ADC1_Init+0xe4>)
 8002966:	2200      	movs	r2, #0
 8002968:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800296a:	4b1c      	ldr	r3, [pc, #112]	; (80029dc <MX_ADC1_Init+0xe4>)
 800296c:	2200      	movs	r2, #0
 800296e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002970:	4b1a      	ldr	r3, [pc, #104]	; (80029dc <MX_ADC1_Init+0xe4>)
 8002972:	2200      	movs	r2, #0
 8002974:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002978:	4818      	ldr	r0, [pc, #96]	; (80029dc <MX_ADC1_Init+0xe4>)
 800297a:	f001 fdf5 	bl	8004568 <HAL_ADC_Init>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002984:	f000 fc1c 	bl	80031c0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002988:	2300      	movs	r3, #0
 800298a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800298c:	f107 031c 	add.w	r3, r7, #28
 8002990:	4619      	mov	r1, r3
 8002992:	4812      	ldr	r0, [pc, #72]	; (80029dc <MX_ADC1_Init+0xe4>)
 8002994:	f003 fa1e 	bl	8005dd4 <HAL_ADCEx_MultiModeConfigChannel>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800299e:	f000 fc0f 	bl	80031c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80029a2:	4b10      	ldr	r3, [pc, #64]	; (80029e4 <MX_ADC1_Init+0xec>)
 80029a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80029a6:	2306      	movs	r3, #6
 80029a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80029aa:	2300      	movs	r3, #0
 80029ac:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80029ae:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80029b2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80029b4:	2304      	movs	r3, #4
 80029b6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80029b8:	2300      	movs	r3, #0
 80029ba:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80029bc:	2300      	movs	r3, #0
 80029be:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029c0:	463b      	mov	r3, r7
 80029c2:	4619      	mov	r1, r3
 80029c4:	4805      	ldr	r0, [pc, #20]	; (80029dc <MX_ADC1_Init+0xe4>)
 80029c6:	f002 fc61 	bl	800528c <HAL_ADC_ConfigChannel>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80029d0:	f000 fbf6 	bl	80031c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80029d4:	bf00      	nop
 80029d6:	3728      	adds	r7, #40	; 0x28
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	20000210 	.word	0x20000210
 80029e0:	40022000 	.word	0x40022000
 80029e4:	10c00010 	.word	0x10c00010

080029e8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b08a      	sub	sp, #40	; 0x28
 80029ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80029ee:	1d3b      	adds	r3, r7, #4
 80029f0:	2224      	movs	r2, #36	; 0x24
 80029f2:	2100      	movs	r1, #0
 80029f4:	4618      	mov	r0, r3
 80029f6:	f00f f925 	bl	8011c44 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80029fa:	4b17      	ldr	r3, [pc, #92]	; (8002a58 <MX_DAC1_Init+0x70>)
 80029fc:	4a17      	ldr	r2, [pc, #92]	; (8002a5c <MX_DAC1_Init+0x74>)
 80029fe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002a00:	4815      	ldr	r0, [pc, #84]	; (8002a58 <MX_DAC1_Init+0x70>)
 8002a02:	f003 fbac 	bl	800615e <HAL_DAC_Init>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8002a0c:	f000 fbd8 	bl	80031c0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002a10:	2300      	movs	r3, #0
 8002a12:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002a14:	2300      	movs	r3, #0
 8002a16:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002a20:	2300      	movs	r3, #0
 8002a22:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002a24:	1d3b      	adds	r3, r7, #4
 8002a26:	2200      	movs	r2, #0
 8002a28:	4619      	mov	r1, r3
 8002a2a:	480b      	ldr	r0, [pc, #44]	; (8002a58 <MX_DAC1_Init+0x70>)
 8002a2c:	f003 fc30 	bl	8006290 <HAL_DAC_ConfigChannel>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8002a36:	f000 fbc3 	bl	80031c0 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002a3a:	1d3b      	adds	r3, r7, #4
 8002a3c:	2210      	movs	r2, #16
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4805      	ldr	r0, [pc, #20]	; (8002a58 <MX_DAC1_Init+0x70>)
 8002a42:	f003 fc25 	bl	8006290 <HAL_DAC_ConfigChannel>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8002a4c:	f000 fbb8 	bl	80031c0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8002a50:	bf00      	nop
 8002a52:	3728      	adds	r7, #40	; 0x28
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	20000274 	.word	0x20000274
 8002a5c:	40007400 	.word	0x40007400

08002a60 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b08a      	sub	sp, #40	; 0x28
 8002a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002a66:	1d3b      	adds	r3, r7, #4
 8002a68:	2224      	movs	r2, #36	; 0x24
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f00f f8e9 	bl	8011c44 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8002a72:	4b12      	ldr	r3, [pc, #72]	; (8002abc <MX_DAC2_Init+0x5c>)
 8002a74:	4a12      	ldr	r2, [pc, #72]	; (8002ac0 <MX_DAC2_Init+0x60>)
 8002a76:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8002a78:	4810      	ldr	r0, [pc, #64]	; (8002abc <MX_DAC2_Init+0x5c>)
 8002a7a:	f003 fb70 	bl	800615e <HAL_DAC_Init>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8002a84:	f000 fb9c 	bl	80031c0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002a90:	2300      	movs	r3, #0
 8002a92:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8002a94:	2301      	movs	r3, #1
 8002a96:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002a9c:	1d3b      	adds	r3, r7, #4
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	4806      	ldr	r0, [pc, #24]	; (8002abc <MX_DAC2_Init+0x5c>)
 8002aa4:	f003 fbf4 	bl	8006290 <HAL_DAC_ConfigChannel>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <MX_DAC2_Init+0x52>
  {
    Error_Handler();
 8002aae:	f000 fb87 	bl	80031c0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8002ab2:	bf00      	nop
 8002ab4:	3728      	adds	r7, #40	; 0x28
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	20000288 	.word	0x20000288
 8002ac0:	58003400 	.word	0x58003400

08002ac4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8002ac8:	4b0b      	ldr	r3, [pc, #44]	; (8002af8 <MX_DMA2D_Init+0x34>)
 8002aca:	4a0c      	ldr	r2, [pc, #48]	; (8002afc <MX_DMA2D_Init+0x38>)
 8002acc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 8002ace:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <MX_DMA2D_Init+0x34>)
 8002ad0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002ad4:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8002ad6:	4b08      	ldr	r3, [pc, #32]	; (8002af8 <MX_DMA2D_Init+0x34>)
 8002ad8:	2202      	movs	r2, #2
 8002ada:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8002adc:	4b06      	ldr	r3, [pc, #24]	; (8002af8 <MX_DMA2D_Init+0x34>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	60da      	str	r2, [r3, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8002ae2:	4805      	ldr	r0, [pc, #20]	; (8002af8 <MX_DMA2D_Init+0x34>)
 8002ae4:	f006 fbfc 	bl	80092e0 <HAL_DMA2D_Init>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <MX_DMA2D_Init+0x2e>
  {
    Error_Handler();
 8002aee:	f000 fb67 	bl	80031c0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8002af2:	bf00      	nop
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	2000029c 	.word	0x2000029c
 8002afc:	52001000 	.word	0x52001000

08002b00 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08e      	sub	sp, #56	; 0x38
 8002b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002b06:	1d3b      	adds	r3, r7, #4
 8002b08:	2234      	movs	r2, #52	; 0x34
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f00f f899 	bl	8011c44 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8002b12:	4b39      	ldr	r3, [pc, #228]	; (8002bf8 <MX_LTDC_Init+0xf8>)
 8002b14:	4a39      	ldr	r2, [pc, #228]	; (8002bfc <MX_LTDC_Init+0xfc>)
 8002b16:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002b18:	4b37      	ldr	r3, [pc, #220]	; (8002bf8 <MX_LTDC_Init+0xf8>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002b1e:	4b36      	ldr	r3, [pc, #216]	; (8002bf8 <MX_LTDC_Init+0xf8>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002b24:	4b34      	ldr	r3, [pc, #208]	; (8002bf8 <MX_LTDC_Init+0xf8>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IIPC;
 8002b2a:	4b33      	ldr	r3, [pc, #204]	; (8002bf8 <MX_LTDC_Init+0xf8>)
 8002b2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b30:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8002b32:	4b31      	ldr	r3, [pc, #196]	; (8002bf8 <MX_LTDC_Init+0xf8>)
 8002b34:	2209      	movs	r2, #9
 8002b36:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8002b38:	4b2f      	ldr	r3, [pc, #188]	; (8002bf8 <MX_LTDC_Init+0xf8>)
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 60;
 8002b3e:	4b2e      	ldr	r3, [pc, #184]	; (8002bf8 <MX_LTDC_Init+0xf8>)
 8002b40:	223c      	movs	r2, #60	; 0x3c
 8002b42:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 7;
 8002b44:	4b2c      	ldr	r3, [pc, #176]	; (8002bf8 <MX_LTDC_Init+0xf8>)
 8002b46:	2207      	movs	r2, #7
 8002b48:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 380;
 8002b4a:	4b2b      	ldr	r3, [pc, #172]	; (8002bf8 <MX_LTDC_Init+0xf8>)
 8002b4c:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8002b50:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 247;
 8002b52:	4b29      	ldr	r3, [pc, #164]	; (8002bf8 <MX_LTDC_Init+0xf8>)
 8002b54:	22f7      	movs	r2, #247	; 0xf7
 8002b56:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 392;
 8002b58:	4b27      	ldr	r3, [pc, #156]	; (8002bf8 <MX_LTDC_Init+0xf8>)
 8002b5a:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8002b5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 255;
 8002b60:	4b25      	ldr	r3, [pc, #148]	; (8002bf8 <MX_LTDC_Init+0xf8>)
 8002b62:	22ff      	movs	r2, #255	; 0xff
 8002b64:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002b66:	4b24      	ldr	r3, [pc, #144]	; (8002bf8 <MX_LTDC_Init+0xf8>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002b6e:	4b22      	ldr	r3, [pc, #136]	; (8002bf8 <MX_LTDC_Init+0xf8>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002b76:	4b20      	ldr	r3, [pc, #128]	; (8002bf8 <MX_LTDC_Init+0xf8>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002b7e:	481e      	ldr	r0, [pc, #120]	; (8002bf8 <MX_LTDC_Init+0xf8>)
 8002b80:	f006 fe18 	bl	80097b4 <HAL_LTDC_Init>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <MX_LTDC_Init+0x8e>
  {
    Error_Handler();
 8002b8a:	f000 fb19 	bl	80031c0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 320;
 8002b92:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002b96:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 240;
 8002b9c:	23f0      	movs	r3, #240	; 0xf0
 8002b9e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8002ba4:	23ff      	movs	r3, #255	; 0xff
 8002ba6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 255;
 8002ba8:	23ff      	movs	r3, #255	; 0xff
 8002baa:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002bac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bb0:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002bb2:	2305      	movs	r3, #5
 8002bb4:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0x24000000;
 8002bb6:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8002bba:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 320;
 8002bbc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 240;
 8002bc2:	23f0      	movs	r3, #240	; 0xf0
 8002bc4:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 255;
 8002bcc:	23ff      	movs	r3, #255	; 0xff
 8002bce:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002bd8:	1d3b      	adds	r3, r7, #4
 8002bda:	2200      	movs	r2, #0
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4806      	ldr	r0, [pc, #24]	; (8002bf8 <MX_LTDC_Init+0xf8>)
 8002be0:	f006 ff70 	bl	8009ac4 <HAL_LTDC_ConfigLayer>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 8002bea:	f000 fae9 	bl	80031c0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002bee:	bf00      	nop
 8002bf0:	3738      	adds	r7, #56	; 0x38
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	20000304 	.word	0x20000304
 8002bfc:	50001000 	.word	0x50001000

08002c00 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8002c06:	463b      	mov	r3, r7
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	605a      	str	r2, [r3, #4]
 8002c0e:	609a      	str	r2, [r3, #8]
 8002c10:	60da      	str	r2, [r3, #12]
 8002c12:	611a      	str	r2, [r3, #16]
 8002c14:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8002c16:	4b28      	ldr	r3, [pc, #160]	; (8002cb8 <MX_OCTOSPI1_Init+0xb8>)
 8002c18:	4a28      	ldr	r2, [pc, #160]	; (8002cbc <MX_OCTOSPI1_Init+0xbc>)
 8002c1a:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 4;
 8002c1c:	4b26      	ldr	r3, [pc, #152]	; (8002cb8 <MX_OCTOSPI1_Init+0xb8>)
 8002c1e:	2204      	movs	r2, #4
 8002c20:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8002c22:	4b25      	ldr	r3, [pc, #148]	; (8002cb8 <MX_OCTOSPI1_Init+0xb8>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8002c28:	4b23      	ldr	r3, [pc, #140]	; (8002cb8 <MX_OCTOSPI1_Init+0xb8>)
 8002c2a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c2e:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 24;
 8002c30:	4b21      	ldr	r3, [pc, #132]	; (8002cb8 <MX_OCTOSPI1_Init+0xb8>)
 8002c32:	2218      	movs	r2, #24
 8002c34:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 8002c36:	4b20      	ldr	r3, [pc, #128]	; (8002cb8 <MX_OCTOSPI1_Init+0xb8>)
 8002c38:	2202      	movs	r2, #2
 8002c3a:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8002c3c:	4b1e      	ldr	r3, [pc, #120]	; (8002cb8 <MX_OCTOSPI1_Init+0xb8>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8002c42:	4b1d      	ldr	r3, [pc, #116]	; (8002cb8 <MX_OCTOSPI1_Init+0xb8>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8002c48:	4b1b      	ldr	r3, [pc, #108]	; (8002cb8 <MX_OCTOSPI1_Init+0xb8>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
 8002c4e:	4b1a      	ldr	r3, [pc, #104]	; (8002cb8 <MX_OCTOSPI1_Init+0xb8>)
 8002c50:	2201      	movs	r2, #1
 8002c52:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8002c54:	4b18      	ldr	r3, [pc, #96]	; (8002cb8 <MX_OCTOSPI1_Init+0xb8>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8002c5a:	4b17      	ldr	r3, [pc, #92]	; (8002cb8 <MX_OCTOSPI1_Init+0xb8>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8002c60:	4b15      	ldr	r3, [pc, #84]	; (8002cb8 <MX_OCTOSPI1_Init+0xb8>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8002c66:	4b14      	ldr	r3, [pc, #80]	; (8002cb8 <MX_OCTOSPI1_Init+0xb8>)
 8002c68:	2208      	movs	r2, #8
 8002c6a:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 8002c6c:	4b12      	ldr	r3, [pc, #72]	; (8002cb8 <MX_OCTOSPI1_Init+0xb8>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 0;
 8002c72:	4b11      	ldr	r3, [pc, #68]	; (8002cb8 <MX_OCTOSPI1_Init+0xb8>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8002c78:	480f      	ldr	r0, [pc, #60]	; (8002cb8 <MX_OCTOSPI1_Init+0xb8>)
 8002c7a:	f007 f989 	bl	8009f90 <HAL_OSPI_Init>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <MX_OCTOSPI1_Init+0x88>
  {
    Error_Handler();
 8002c84:	f000 fa9c 	bl	80031c0 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.NCSPort = 1;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8002c90:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002c94:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002c96:	463b      	mov	r3, r7
 8002c98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4806      	ldr	r0, [pc, #24]	; (8002cb8 <MX_OCTOSPI1_Init+0xb8>)
 8002ca0:	f007 fdc6 	bl	800a830 <HAL_OSPIM_Config>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <MX_OCTOSPI1_Init+0xae>
  {
    Error_Handler();
 8002caa:	f000 fa89 	bl	80031c0 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8002cae:	bf00      	nop
 8002cb0:	3718      	adds	r7, #24
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	200003ac 	.word	0x200003ac
 8002cbc:	52005000 	.word	0x52005000

08002cc0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002cc6:	1d3b      	adds	r3, r7, #4
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	605a      	str	r2, [r3, #4]
 8002cce:	609a      	str	r2, [r3, #8]
 8002cd0:	60da      	str	r2, [r3, #12]
 8002cd2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	603b      	str	r3, [r7, #0]

  /* USER CODE BEGIN RTC_Init 1 */
	hrtc.Instance = RTC;
 8002cd8:	4b36      	ldr	r3, [pc, #216]	; (8002db4 <MX_RTC_Init+0xf4>)
 8002cda:	4a37      	ldr	r2, [pc, #220]	; (8002db8 <MX_RTC_Init+0xf8>)
 8002cdc:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002cde:	4b35      	ldr	r3, [pc, #212]	; (8002db4 <MX_RTC_Init+0xf4>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8002ce4:	4b33      	ldr	r3, [pc, #204]	; (8002db4 <MX_RTC_Init+0xf4>)
 8002ce6:	227f      	movs	r2, #127	; 0x7f
 8002ce8:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8002cea:	4b32      	ldr	r3, [pc, #200]	; (8002db4 <MX_RTC_Init+0xf4>)
 8002cec:	22ff      	movs	r2, #255	; 0xff
 8002cee:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002cf0:	4b30      	ldr	r3, [pc, #192]	; (8002db4 <MX_RTC_Init+0xf4>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002cf6:	4b2f      	ldr	r3, [pc, #188]	; (8002db4 <MX_RTC_Init+0xf4>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002cfc:	4b2d      	ldr	r3, [pc, #180]	; (8002db4 <MX_RTC_Init+0xf4>)
 8002cfe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d02:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002d04:	4b2b      	ldr	r3, [pc, #172]	; (8002db4 <MX_RTC_Init+0xf4>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	615a      	str	r2, [r3, #20]
	if ((RCC->BDCR & RCC_BDCR_RTCEN) != 0) {
 8002d0a:	4b2c      	ldr	r3, [pc, #176]	; (8002dbc <MX_RTC_Init+0xfc>)
 8002d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d002      	beq.n	8002d1c <MX_RTC_Init+0x5c>
		HAL_PWR_EnableBkUpAccess();
 8002d16:	f008 fd1b 	bl	800b750 <HAL_PWR_EnableBkUpAccess>
 8002d1a:	e048      	b.n	8002dae <MX_RTC_Init+0xee>
	}
  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002d1c:	4b25      	ldr	r3, [pc, #148]	; (8002db4 <MX_RTC_Init+0xf4>)
 8002d1e:	4a26      	ldr	r2, [pc, #152]	; (8002db8 <MX_RTC_Init+0xf8>)
 8002d20:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002d22:	4b24      	ldr	r3, [pc, #144]	; (8002db4 <MX_RTC_Init+0xf4>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002d28:	4b22      	ldr	r3, [pc, #136]	; (8002db4 <MX_RTC_Init+0xf4>)
 8002d2a:	227f      	movs	r2, #127	; 0x7f
 8002d2c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002d2e:	4b21      	ldr	r3, [pc, #132]	; (8002db4 <MX_RTC_Init+0xf4>)
 8002d30:	22ff      	movs	r2, #255	; 0xff
 8002d32:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002d34:	4b1f      	ldr	r3, [pc, #124]	; (8002db4 <MX_RTC_Init+0xf4>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002d3a:	4b1e      	ldr	r3, [pc, #120]	; (8002db4 <MX_RTC_Init+0xf4>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002d40:	4b1c      	ldr	r3, [pc, #112]	; (8002db4 <MX_RTC_Init+0xf4>)
 8002d42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d46:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002d48:	4b1a      	ldr	r3, [pc, #104]	; (8002db4 <MX_RTC_Init+0xf4>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002d4e:	4819      	ldr	r0, [pc, #100]	; (8002db4 <MX_RTC_Init+0xf4>)
 8002d50:	f00c f8fa 	bl	800ef48 <HAL_RTC_Init>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <MX_RTC_Init+0x9e>
  {
    Error_Handler();
 8002d5a:	f000 fa31 	bl	80031c0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8002d62:	2300      	movs	r3, #0
 8002d64:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8002d66:	2300      	movs	r3, #0
 8002d68:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002d72:	1d3b      	adds	r3, r7, #4
 8002d74:	2200      	movs	r2, #0
 8002d76:	4619      	mov	r1, r3
 8002d78:	480e      	ldr	r0, [pc, #56]	; (8002db4 <MX_RTC_Init+0xf4>)
 8002d7a:	f00c f96b 	bl	800f054 <HAL_RTC_SetTime>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8002d84:	f000 fa1c 	bl	80031c0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8002d90:	2301      	movs	r3, #1
 8002d92:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8002d94:	2300      	movs	r3, #0
 8002d96:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002d98:	463b      	mov	r3, r7
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	4805      	ldr	r0, [pc, #20]	; (8002db4 <MX_RTC_Init+0xf4>)
 8002da0:	f00c fa52 	bl	800f248 <HAL_RTC_SetDate>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <MX_RTC_Init+0xee>
  {
    Error_Handler();
 8002daa:	f000 fa09 	bl	80031c0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002dae:	3718      	adds	r7, #24
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	20000408 	.word	0x20000408
 8002db8:	58004000 	.word	0x58004000
 8002dbc:	58024400 	.word	0x58024400

08002dc0 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8002dc4:	4b17      	ldr	r3, [pc, #92]	; (8002e24 <MX_SAI1_Init+0x64>)
 8002dc6:	4a18      	ldr	r2, [pc, #96]	; (8002e28 <MX_SAI1_Init+0x68>)
 8002dc8:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8002dca:	4b16      	ldr	r3, [pc, #88]	; (8002e24 <MX_SAI1_Init+0x64>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8002dd0:	4b14      	ldr	r3, [pc, #80]	; (8002e24 <MX_SAI1_Init+0x64>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002dd6:	4b13      	ldr	r3, [pc, #76]	; (8002e24 <MX_SAI1_Init+0x64>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002ddc:	4b11      	ldr	r3, [pc, #68]	; (8002e24 <MX_SAI1_Init+0x64>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_FULL;
 8002de2:	4b10      	ldr	r3, [pc, #64]	; (8002e24 <MX_SAI1_Init+0x64>)
 8002de4:	2204      	movs	r2, #4
 8002de6:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8002de8:	4b0e      	ldr	r3, [pc, #56]	; (8002e24 <MX_SAI1_Init+0x64>)
 8002dea:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8002dee:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002df0:	4b0c      	ldr	r3, [pc, #48]	; (8002e24 <MX_SAI1_Init+0x64>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_MONOMODE;
 8002df6:	4b0b      	ldr	r3, [pc, #44]	; (8002e24 <MX_SAI1_Init+0x64>)
 8002df8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002dfc:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002dfe:	4b09      	ldr	r3, [pc, #36]	; (8002e24 <MX_SAI1_Init+0x64>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002e04:	4b07      	ldr	r3, [pc, #28]	; (8002e24 <MX_SAI1_Init+0x64>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	2100      	movs	r1, #0
 8002e10:	4804      	ldr	r0, [pc, #16]	; (8002e24 <MX_SAI1_Init+0x64>)
 8002e12:	f00c fbc1 	bl	800f598 <HAL_SAI_InitProtocol>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <MX_SAI1_Init+0x60>
  {
    Error_Handler();
 8002e1c:	f000 f9d0 	bl	80031c0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8002e20:	bf00      	nop
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	20000430 	.word	0x20000430
 8002e28:	40015804 	.word	0x40015804

08002e2c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002e30:	4b27      	ldr	r3, [pc, #156]	; (8002ed0 <MX_SPI2_Init+0xa4>)
 8002e32:	4a28      	ldr	r2, [pc, #160]	; (8002ed4 <MX_SPI2_Init+0xa8>)
 8002e34:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002e36:	4b26      	ldr	r3, [pc, #152]	; (8002ed0 <MX_SPI2_Init+0xa4>)
 8002e38:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002e3c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8002e3e:	4b24      	ldr	r3, [pc, #144]	; (8002ed0 <MX_SPI2_Init+0xa4>)
 8002e40:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e44:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e46:	4b22      	ldr	r3, [pc, #136]	; (8002ed0 <MX_SPI2_Init+0xa4>)
 8002e48:	2207      	movs	r2, #7
 8002e4a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e4c:	4b20      	ldr	r3, [pc, #128]	; (8002ed0 <MX_SPI2_Init+0xa4>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e52:	4b1f      	ldr	r3, [pc, #124]	; (8002ed0 <MX_SPI2_Init+0xa4>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002e58:	4b1d      	ldr	r3, [pc, #116]	; (8002ed0 <MX_SPI2_Init+0xa4>)
 8002e5a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002e5e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002e60:	4b1b      	ldr	r3, [pc, #108]	; (8002ed0 <MX_SPI2_Init+0xa4>)
 8002e62:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8002e66:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e68:	4b19      	ldr	r3, [pc, #100]	; (8002ed0 <MX_SPI2_Init+0xa4>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e6e:	4b18      	ldr	r3, [pc, #96]	; (8002ed0 <MX_SPI2_Init+0xa4>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e74:	4b16      	ldr	r3, [pc, #88]	; (8002ed0 <MX_SPI2_Init+0xa4>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002e7a:	4b15      	ldr	r3, [pc, #84]	; (8002ed0 <MX_SPI2_Init+0xa4>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002e80:	4b13      	ldr	r3, [pc, #76]	; (8002ed0 <MX_SPI2_Init+0xa4>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002e86:	4b12      	ldr	r3, [pc, #72]	; (8002ed0 <MX_SPI2_Init+0xa4>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002e8c:	4b10      	ldr	r3, [pc, #64]	; (8002ed0 <MX_SPI2_Init+0xa4>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002e92:	4b0f      	ldr	r3, [pc, #60]	; (8002ed0 <MX_SPI2_Init+0xa4>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002e98:	4b0d      	ldr	r3, [pc, #52]	; (8002ed0 <MX_SPI2_Init+0xa4>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002e9e:	4b0c      	ldr	r3, [pc, #48]	; (8002ed0 <MX_SPI2_Init+0xa4>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002ea4:	4b0a      	ldr	r3, [pc, #40]	; (8002ed0 <MX_SPI2_Init+0xa4>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002eaa:	4b09      	ldr	r3, [pc, #36]	; (8002ed0 <MX_SPI2_Init+0xa4>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002eb0:	4b07      	ldr	r3, [pc, #28]	; (8002ed0 <MX_SPI2_Init+0xa4>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002eb6:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <MX_SPI2_Init+0xa4>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002ebc:	4804      	ldr	r0, [pc, #16]	; (8002ed0 <MX_SPI2_Init+0xa4>)
 8002ebe:	f00d faf7 	bl	80104b0 <HAL_SPI_Init>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8002ec8:	f000 f97a 	bl	80031c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002ecc:	bf00      	nop
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	20000540 	.word	0x20000540
 8002ed4:	40003800 	.word	0x40003800

08002ed8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b088      	sub	sp, #32
 8002edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ede:	f107 0310 	add.w	r3, r7, #16
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	605a      	str	r2, [r3, #4]
 8002ee8:	609a      	str	r2, [r3, #8]
 8002eea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eec:	1d3b      	adds	r3, r7, #4
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	605a      	str	r2, [r3, #4]
 8002ef4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ef6:	4b20      	ldr	r3, [pc, #128]	; (8002f78 <MX_TIM1_Init+0xa0>)
 8002ef8:	4a20      	ldr	r2, [pc, #128]	; (8002f7c <MX_TIM1_Init+0xa4>)
 8002efa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 14000;
 8002efc:	4b1e      	ldr	r3, [pc, #120]	; (8002f78 <MX_TIM1_Init+0xa0>)
 8002efe:	f243 62b0 	movw	r2, #14000	; 0x36b0
 8002f02:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f04:	4b1c      	ldr	r3, [pc, #112]	; (8002f78 <MX_TIM1_Init+0xa0>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000;
 8002f0a:	4b1b      	ldr	r3, [pc, #108]	; (8002f78 <MX_TIM1_Init+0xa0>)
 8002f0c:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002f10:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f12:	4b19      	ldr	r3, [pc, #100]	; (8002f78 <MX_TIM1_Init+0xa0>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002f18:	4b17      	ldr	r3, [pc, #92]	; (8002f78 <MX_TIM1_Init+0xa0>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f1e:	4b16      	ldr	r3, [pc, #88]	; (8002f78 <MX_TIM1_Init+0xa0>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002f24:	4814      	ldr	r0, [pc, #80]	; (8002f78 <MX_TIM1_Init+0xa0>)
 8002f26:	f00d fecc 	bl	8010cc2 <HAL_TIM_Base_Init>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8002f30:	f000 f946 	bl	80031c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f38:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002f3a:	f107 0310 	add.w	r3, r7, #16
 8002f3e:	4619      	mov	r1, r3
 8002f40:	480d      	ldr	r0, [pc, #52]	; (8002f78 <MX_TIM1_Init+0xa0>)
 8002f42:	f00e f8ad 	bl	80110a0 <HAL_TIM_ConfigClockSource>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002f4c:	f000 f938 	bl	80031c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f50:	2300      	movs	r3, #0
 8002f52:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002f54:	2300      	movs	r3, #0
 8002f56:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002f5c:	1d3b      	adds	r3, r7, #4
 8002f5e:	4619      	mov	r1, r3
 8002f60:	4805      	ldr	r0, [pc, #20]	; (8002f78 <MX_TIM1_Init+0xa0>)
 8002f62:	f00e faff 	bl	8011564 <HAL_TIMEx_MasterConfigSynchronization>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002f6c:	f000 f928 	bl	80031c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002f70:	bf00      	nop
 8002f72:	3720      	adds	r7, #32
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	200005c8 	.word	0x200005c8
 8002f7c:	40010000 	.word	0x40010000

08002f80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f86:	4b0d      	ldr	r3, [pc, #52]	; (8002fbc <MX_DMA_Init+0x3c>)
 8002f88:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8002f8c:	4a0b      	ldr	r2, [pc, #44]	; (8002fbc <MX_DMA_Init+0x3c>)
 8002f8e:	f043 0301 	orr.w	r3, r3, #1
 8002f92:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8002f96:	4b09      	ldr	r3, [pc, #36]	; (8002fbc <MX_DMA_Init+0x3c>)
 8002f98:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8002f9c:	f003 0301 	and.w	r3, r3, #1
 8002fa0:	607b      	str	r3, [r7, #4]
 8002fa2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	200b      	movs	r0, #11
 8002faa:	f003 f8a0 	bl	80060ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002fae:	200b      	movs	r0, #11
 8002fb0:	f003 f8b7 	bl	8006122 <HAL_NVIC_EnableIRQ>

}
 8002fb4:	bf00      	nop
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	58024400 	.word	0x58024400

08002fc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b08a      	sub	sp, #40	; 0x28
 8002fc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc6:	f107 0314 	add.w	r3, r7, #20
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	605a      	str	r2, [r3, #4]
 8002fd0:	609a      	str	r2, [r3, #8]
 8002fd2:	60da      	str	r2, [r3, #12]
 8002fd4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002fd6:	4b74      	ldr	r3, [pc, #464]	; (80031a8 <MX_GPIO_Init+0x1e8>)
 8002fd8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002fdc:	4a72      	ldr	r2, [pc, #456]	; (80031a8 <MX_GPIO_Init+0x1e8>)
 8002fde:	f043 0310 	orr.w	r3, r3, #16
 8002fe2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002fe6:	4b70      	ldr	r3, [pc, #448]	; (80031a8 <MX_GPIO_Init+0x1e8>)
 8002fe8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002fec:	f003 0310 	and.w	r3, r3, #16
 8002ff0:	613b      	str	r3, [r7, #16]
 8002ff2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ff4:	4b6c      	ldr	r3, [pc, #432]	; (80031a8 <MX_GPIO_Init+0x1e8>)
 8002ff6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002ffa:	4a6b      	ldr	r2, [pc, #428]	; (80031a8 <MX_GPIO_Init+0x1e8>)
 8002ffc:	f043 0304 	orr.w	r3, r3, #4
 8003000:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003004:	4b68      	ldr	r3, [pc, #416]	; (80031a8 <MX_GPIO_Init+0x1e8>)
 8003006:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800300a:	f003 0304 	and.w	r3, r3, #4
 800300e:	60fb      	str	r3, [r7, #12]
 8003010:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003012:	4b65      	ldr	r3, [pc, #404]	; (80031a8 <MX_GPIO_Init+0x1e8>)
 8003014:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003018:	4a63      	ldr	r2, [pc, #396]	; (80031a8 <MX_GPIO_Init+0x1e8>)
 800301a:	f043 0301 	orr.w	r3, r3, #1
 800301e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003022:	4b61      	ldr	r3, [pc, #388]	; (80031a8 <MX_GPIO_Init+0x1e8>)
 8003024:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	60bb      	str	r3, [r7, #8]
 800302e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003030:	4b5d      	ldr	r3, [pc, #372]	; (80031a8 <MX_GPIO_Init+0x1e8>)
 8003032:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003036:	4a5c      	ldr	r2, [pc, #368]	; (80031a8 <MX_GPIO_Init+0x1e8>)
 8003038:	f043 0302 	orr.w	r3, r3, #2
 800303c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003040:	4b59      	ldr	r3, [pc, #356]	; (80031a8 <MX_GPIO_Init+0x1e8>)
 8003042:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	607b      	str	r3, [r7, #4]
 800304c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800304e:	4b56      	ldr	r3, [pc, #344]	; (80031a8 <MX_GPIO_Init+0x1e8>)
 8003050:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003054:	4a54      	ldr	r2, [pc, #336]	; (80031a8 <MX_GPIO_Init+0x1e8>)
 8003056:	f043 0308 	orr.w	r3, r3, #8
 800305a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800305e:	4b52      	ldr	r3, [pc, #328]	; (80031a8 <MX_GPIO_Init+0x1e8>)
 8003060:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003064:	f003 0308 	and.w	r3, r3, #8
 8003068:	603b      	str	r3, [r7, #0]
 800306a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_Speaker_enable_GPIO_Port, GPIO_Speaker_enable_Pin, GPIO_PIN_SET);
 800306c:	2201      	movs	r2, #1
 800306e:	2108      	movs	r1, #8
 8003070:	484e      	ldr	r0, [pc, #312]	; (80031ac <MX_GPIO_Init+0x1ec>)
 8003072:	f006 fb61 	bl	8009738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8003076:	2200      	movs	r2, #0
 8003078:	f44f 7180 	mov.w	r1, #256	; 0x100
 800307c:	484b      	ldr	r0, [pc, #300]	; (80031ac <MX_GPIO_Init+0x1ec>)
 800307e:	f006 fb5b 	bl	8009738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8003082:	2201      	movs	r2, #1
 8003084:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003088:	4849      	ldr	r0, [pc, #292]	; (80031b0 <MX_GPIO_Init+0x1f0>)
 800308a:	f006 fb55 	bl	8009738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
 800308e:	2201      	movs	r2, #1
 8003090:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003094:	4847      	ldr	r0, [pc, #284]	; (80031b4 <MX_GPIO_Init+0x1f4>)
 8003096:	f006 fb4f 	bl	8009738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
 800309a:	2200      	movs	r2, #0
 800309c:	2112      	movs	r1, #18
 800309e:	4845      	ldr	r0, [pc, #276]	; (80031b4 <MX_GPIO_Init+0x1f4>)
 80030a0:	f006 fb4a 	bl	8009738 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_Speaker_enable_Pin PE8 */
  GPIO_InitStruct.Pin = GPIO_Speaker_enable_Pin|GPIO_PIN_8;
 80030a4:	f44f 7384 	mov.w	r3, #264	; 0x108
 80030a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030aa:	2301      	movs	r3, #1
 80030ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ae:	2300      	movs	r3, #0
 80030b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b2:	2300      	movs	r3, #0
 80030b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80030b6:	f107 0314 	add.w	r3, r7, #20
 80030ba:	4619      	mov	r1, r3
 80030bc:	483b      	ldr	r0, [pc, #236]	; (80031ac <MX_GPIO_Init+0x1ec>)
 80030be:	f006 f973 	bl	80093a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_PAUSE_Pin BTN_GAME_Pin BTN_TIME_Pin */
  GPIO_InitStruct.Pin = BTN_PAUSE_Pin|BTN_GAME_Pin|BTN_TIME_Pin;
 80030c2:	f242 0322 	movw	r3, #8226	; 0x2022
 80030c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030c8:	2300      	movs	r3, #0
 80030ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030cc:	2301      	movs	r3, #1
 80030ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030d0:	f107 0314 	add.w	r3, r7, #20
 80030d4:	4619      	mov	r1, r3
 80030d6:	4838      	ldr	r0, [pc, #224]	; (80031b8 <MX_GPIO_Init+0x1f8>)
 80030d8:	f006 f966 	bl	80093a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_PWR_Pin */
  GPIO_InitStruct.Pin = BTN_PWR_Pin;
 80030dc:	2301      	movs	r3, #1
 80030de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030e0:	2300      	movs	r3, #0
 80030e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e4:	2300      	movs	r3, #0
 80030e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_PWR_GPIO_Port, &GPIO_InitStruct);
 80030e8:	f107 0314 	add.w	r3, r7, #20
 80030ec:	4619      	mov	r1, r3
 80030ee:	4833      	ldr	r0, [pc, #204]	; (80031bc <MX_GPIO_Init+0x1fc>)
 80030f0:	f006 f95a 	bl	80093a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80030f4:	2304      	movs	r3, #4
 80030f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80030f8:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80030fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fe:	2300      	movs	r3, #0
 8003100:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003102:	f107 0314 	add.w	r3, r7, #20
 8003106:	4619      	mov	r1, r3
 8003108:	482c      	ldr	r0, [pc, #176]	; (80031bc <MX_GPIO_Init+0x1fc>)
 800310a:	f006 f94d 	bl	80093a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800310e:	2380      	movs	r3, #128	; 0x80
 8003110:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003112:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8003116:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003118:	2300      	movs	r3, #0
 800311a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800311c:	f107 0314 	add.w	r3, r7, #20
 8003120:	4619      	mov	r1, r3
 8003122:	4822      	ldr	r0, [pc, #136]	; (80031ac <MX_GPIO_Init+0x1ec>)
 8003124:	f006 f940 	bl	80093a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003128:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800312c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800312e:	2301      	movs	r3, #1
 8003130:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003132:	2300      	movs	r3, #0
 8003134:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003136:	2300      	movs	r3, #0
 8003138:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800313a:	f107 0314 	add.w	r3, r7, #20
 800313e:	4619      	mov	r1, r3
 8003140:	481b      	ldr	r0, [pc, #108]	; (80031b0 <MX_GPIO_Init+0x1f0>)
 8003142:	f006 f931 	bl	80093a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD1 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_4;
 8003146:	f44f 7389 	mov.w	r3, #274	; 0x112
 800314a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800314c:	2301      	movs	r3, #1
 800314e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003150:	2300      	movs	r3, #0
 8003152:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003154:	2300      	movs	r3, #0
 8003156:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003158:	f107 0314 	add.w	r3, r7, #20
 800315c:	4619      	mov	r1, r3
 800315e:	4815      	ldr	r0, [pc, #84]	; (80031b4 <MX_GPIO_Init+0x1f4>)
 8003160:	f006 f922 	bl	80093a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_A_Pin BTN_Left_Pin BTN_Down_Pin BTN_Right_Pin
                           BTN_Up_Pin BTN_B_Pin */
  GPIO_InitStruct.Pin = BTN_A_Pin|BTN_Left_Pin|BTN_Down_Pin|BTN_Right_Pin
 8003164:	f64c 2321 	movw	r3, #51745	; 0xca21
 8003168:	617b      	str	r3, [r7, #20]
                          |BTN_Up_Pin|BTN_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800316a:	2300      	movs	r3, #0
 800316c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800316e:	2301      	movs	r3, #1
 8003170:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003172:	f107 0314 	add.w	r3, r7, #20
 8003176:	4619      	mov	r1, r3
 8003178:	480e      	ldr	r0, [pc, #56]	; (80031b4 <MX_GPIO_Init+0x1f4>)
 800317a:	f006 f915 	bl	80093a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800317e:	2200      	movs	r2, #0
 8003180:	2100      	movs	r1, #0
 8003182:	2008      	movs	r0, #8
 8003184:	f002 ffb3 	bl	80060ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003188:	2008      	movs	r0, #8
 800318a:	f002 ffca 	bl	8006122 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800318e:	2200      	movs	r2, #0
 8003190:	2100      	movs	r1, #0
 8003192:	2017      	movs	r0, #23
 8003194:	f002 ffab 	bl	80060ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003198:	2017      	movs	r0, #23
 800319a:	f002 ffc2 	bl	8006122 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800319e:	bf00      	nop
 80031a0:	3728      	adds	r7, #40	; 0x28
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	58024400 	.word	0x58024400
 80031ac:	58021000 	.word	0x58021000
 80031b0:	58020400 	.word	0x58020400
 80031b4:	58020c00 	.word	0x58020c00
 80031b8:	58020800 	.word	0x58020800
 80031bc:	58020000 	.word	0x58020000

080031c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031c4:	b672      	cpsid	i
}
 80031c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80031c8:	e7fe      	b.n	80031c8 <Error_Handler+0x8>
	...

080031cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031d2:	4b0a      	ldr	r3, [pc, #40]	; (80031fc <HAL_MspInit+0x30>)
 80031d4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80031d8:	4a08      	ldr	r2, [pc, #32]	; (80031fc <HAL_MspInit+0x30>)
 80031da:	f043 0302 	orr.w	r3, r3, #2
 80031de:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80031e2:	4b06      	ldr	r3, [pc, #24]	; (80031fc <HAL_MspInit+0x30>)
 80031e4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	607b      	str	r3, [r7, #4]
 80031ee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	58024400 	.word	0x58024400

08003200 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b08a      	sub	sp, #40	; 0x28
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003208:	f107 0314 	add.w	r3, r7, #20
 800320c:	2200      	movs	r2, #0
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	605a      	str	r2, [r3, #4]
 8003212:	609a      	str	r2, [r3, #8]
 8003214:	60da      	str	r2, [r3, #12]
 8003216:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a1c      	ldr	r2, [pc, #112]	; (8003290 <HAL_ADC_MspInit+0x90>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d131      	bne.n	8003286 <HAL_ADC_MspInit+0x86>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003222:	4b1c      	ldr	r3, [pc, #112]	; (8003294 <HAL_ADC_MspInit+0x94>)
 8003224:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8003228:	4a1a      	ldr	r2, [pc, #104]	; (8003294 <HAL_ADC_MspInit+0x94>)
 800322a:	f043 0320 	orr.w	r3, r3, #32
 800322e:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8003232:	4b18      	ldr	r3, [pc, #96]	; (8003294 <HAL_ADC_MspInit+0x94>)
 8003234:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8003238:	f003 0320 	and.w	r3, r3, #32
 800323c:	613b      	str	r3, [r7, #16]
 800323e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003240:	4b14      	ldr	r3, [pc, #80]	; (8003294 <HAL_ADC_MspInit+0x94>)
 8003242:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003246:	4a13      	ldr	r2, [pc, #76]	; (8003294 <HAL_ADC_MspInit+0x94>)
 8003248:	f043 0304 	orr.w	r3, r3, #4
 800324c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003250:	4b10      	ldr	r3, [pc, #64]	; (8003294 <HAL_ADC_MspInit+0x94>)
 8003252:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003256:	f003 0304 	and.w	r3, r3, #4
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800325e:	2310      	movs	r3, #16
 8003260:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003262:	2303      	movs	r3, #3
 8003264:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003266:	2300      	movs	r3, #0
 8003268:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800326a:	f107 0314 	add.w	r3, r7, #20
 800326e:	4619      	mov	r1, r3
 8003270:	4809      	ldr	r0, [pc, #36]	; (8003298 <HAL_ADC_MspInit+0x98>)
 8003272:	f006 f899 	bl	80093a8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003276:	2200      	movs	r2, #0
 8003278:	2100      	movs	r1, #0
 800327a:	2012      	movs	r0, #18
 800327c:	f002 ff37 	bl	80060ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003280:	2012      	movs	r0, #18
 8003282:	f002 ff4e 	bl	8006122 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003286:	bf00      	nop
 8003288:	3728      	adds	r7, #40	; 0x28
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	40022000 	.word	0x40022000
 8003294:	58024400 	.word	0x58024400
 8003298:	58020800 	.word	0x58020800

0800329c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b08c      	sub	sp, #48	; 0x30
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a4:	f107 031c 	add.w	r3, r7, #28
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	605a      	str	r2, [r3, #4]
 80032ae:	609a      	str	r2, [r3, #8]
 80032b0:	60da      	str	r2, [r3, #12]
 80032b2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a30      	ldr	r2, [pc, #192]	; (800337c <HAL_DAC_MspInit+0xe0>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d12a      	bne.n	8003314 <HAL_DAC_MspInit+0x78>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80032be:	4b30      	ldr	r3, [pc, #192]	; (8003380 <HAL_DAC_MspInit+0xe4>)
 80032c0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80032c4:	4a2e      	ldr	r2, [pc, #184]	; (8003380 <HAL_DAC_MspInit+0xe4>)
 80032c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80032ca:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80032ce:	4b2c      	ldr	r3, [pc, #176]	; (8003380 <HAL_DAC_MspInit+0xe4>)
 80032d0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80032d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032d8:	61bb      	str	r3, [r7, #24]
 80032da:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032dc:	4b28      	ldr	r3, [pc, #160]	; (8003380 <HAL_DAC_MspInit+0xe4>)
 80032de:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80032e2:	4a27      	ldr	r2, [pc, #156]	; (8003380 <HAL_DAC_MspInit+0xe4>)
 80032e4:	f043 0301 	orr.w	r3, r3, #1
 80032e8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80032ec:	4b24      	ldr	r3, [pc, #144]	; (8003380 <HAL_DAC_MspInit+0xe4>)
 80032ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	617b      	str	r3, [r7, #20]
 80032f8:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80032fa:	2330      	movs	r3, #48	; 0x30
 80032fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032fe:	2303      	movs	r3, #3
 8003300:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003302:	2300      	movs	r3, #0
 8003304:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003306:	f107 031c 	add.w	r3, r7, #28
 800330a:	4619      	mov	r1, r3
 800330c:	481d      	ldr	r0, [pc, #116]	; (8003384 <HAL_DAC_MspInit+0xe8>)
 800330e:	f006 f84b 	bl	80093a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }

}
 8003312:	e02e      	b.n	8003372 <HAL_DAC_MspInit+0xd6>
  else if(hdac->Instance==DAC2)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a1b      	ldr	r2, [pc, #108]	; (8003388 <HAL_DAC_MspInit+0xec>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d129      	bne.n	8003372 <HAL_DAC_MspInit+0xd6>
    __HAL_RCC_DAC2_CLK_ENABLE();
 800331e:	4b18      	ldr	r3, [pc, #96]	; (8003380 <HAL_DAC_MspInit+0xe4>)
 8003320:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003324:	4a16      	ldr	r2, [pc, #88]	; (8003380 <HAL_DAC_MspInit+0xe4>)
 8003326:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800332a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800332e:	4b14      	ldr	r3, [pc, #80]	; (8003380 <HAL_DAC_MspInit+0xe4>)
 8003330:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003334:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003338:	613b      	str	r3, [r7, #16]
 800333a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800333c:	4b10      	ldr	r3, [pc, #64]	; (8003380 <HAL_DAC_MspInit+0xe4>)
 800333e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003342:	4a0f      	ldr	r2, [pc, #60]	; (8003380 <HAL_DAC_MspInit+0xe4>)
 8003344:	f043 0301 	orr.w	r3, r3, #1
 8003348:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800334c:	4b0c      	ldr	r3, [pc, #48]	; (8003380 <HAL_DAC_MspInit+0xe4>)
 800334e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800335a:	2340      	movs	r3, #64	; 0x40
 800335c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800335e:	2303      	movs	r3, #3
 8003360:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003362:	2300      	movs	r3, #0
 8003364:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003366:	f107 031c 	add.w	r3, r7, #28
 800336a:	4619      	mov	r1, r3
 800336c:	4805      	ldr	r0, [pc, #20]	; (8003384 <HAL_DAC_MspInit+0xe8>)
 800336e:	f006 f81b 	bl	80093a8 <HAL_GPIO_Init>
}
 8003372:	bf00      	nop
 8003374:	3730      	adds	r7, #48	; 0x30
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	40007400 	.word	0x40007400
 8003380:	58024400 	.word	0x58024400
 8003384:	58020000 	.word	0x58020000
 8003388:	58003400 	.word	0x58003400

0800338c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a0b      	ldr	r2, [pc, #44]	; (80033c8 <HAL_DMA2D_MspInit+0x3c>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d10e      	bne.n	80033bc <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800339e:	4b0b      	ldr	r3, [pc, #44]	; (80033cc <HAL_DMA2D_MspInit+0x40>)
 80033a0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80033a4:	4a09      	ldr	r2, [pc, #36]	; (80033cc <HAL_DMA2D_MspInit+0x40>)
 80033a6:	f043 0310 	orr.w	r3, r3, #16
 80033aa:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 80033ae:	4b07      	ldr	r3, [pc, #28]	; (80033cc <HAL_DMA2D_MspInit+0x40>)
 80033b0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80033b4:	f003 0310 	and.w	r3, r3, #16
 80033b8:	60fb      	str	r3, [r7, #12]
 80033ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80033bc:	bf00      	nop
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	52001000 	.word	0x52001000
 80033cc:	58024400 	.word	0x58024400

080033d0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b08e      	sub	sp, #56	; 0x38
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033dc:	2200      	movs	r2, #0
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	605a      	str	r2, [r3, #4]
 80033e2:	609a      	str	r2, [r3, #8]
 80033e4:	60da      	str	r2, [r3, #12]
 80033e6:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a90      	ldr	r2, [pc, #576]	; (8003630 <HAL_LTDC_MspInit+0x260>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	f040 8119 	bne.w	8003626 <HAL_LTDC_MspInit+0x256>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80033f4:	4b8f      	ldr	r3, [pc, #572]	; (8003634 <HAL_LTDC_MspInit+0x264>)
 80033f6:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80033fa:	4a8e      	ldr	r2, [pc, #568]	; (8003634 <HAL_LTDC_MspInit+0x264>)
 80033fc:	f043 0308 	orr.w	r3, r3, #8
 8003400:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 8003404:	4b8b      	ldr	r3, [pc, #556]	; (8003634 <HAL_LTDC_MspInit+0x264>)
 8003406:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	623b      	str	r3, [r7, #32]
 8003410:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003412:	4b88      	ldr	r3, [pc, #544]	; (8003634 <HAL_LTDC_MspInit+0x264>)
 8003414:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003418:	4a86      	ldr	r2, [pc, #536]	; (8003634 <HAL_LTDC_MspInit+0x264>)
 800341a:	f043 0304 	orr.w	r3, r3, #4
 800341e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003422:	4b84      	ldr	r3, [pc, #528]	; (8003634 <HAL_LTDC_MspInit+0x264>)
 8003424:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	61fb      	str	r3, [r7, #28]
 800342e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003430:	4b80      	ldr	r3, [pc, #512]	; (8003634 <HAL_LTDC_MspInit+0x264>)
 8003432:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003436:	4a7f      	ldr	r2, [pc, #508]	; (8003634 <HAL_LTDC_MspInit+0x264>)
 8003438:	f043 0301 	orr.w	r3, r3, #1
 800343c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003440:	4b7c      	ldr	r3, [pc, #496]	; (8003634 <HAL_LTDC_MspInit+0x264>)
 8003442:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	61bb      	str	r3, [r7, #24]
 800344c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800344e:	4b79      	ldr	r3, [pc, #484]	; (8003634 <HAL_LTDC_MspInit+0x264>)
 8003450:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003454:	4a77      	ldr	r2, [pc, #476]	; (8003634 <HAL_LTDC_MspInit+0x264>)
 8003456:	f043 0302 	orr.w	r3, r3, #2
 800345a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800345e:	4b75      	ldr	r3, [pc, #468]	; (8003634 <HAL_LTDC_MspInit+0x264>)
 8003460:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	617b      	str	r3, [r7, #20]
 800346a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800346c:	4b71      	ldr	r3, [pc, #452]	; (8003634 <HAL_LTDC_MspInit+0x264>)
 800346e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003472:	4a70      	ldr	r2, [pc, #448]	; (8003634 <HAL_LTDC_MspInit+0x264>)
 8003474:	f043 0310 	orr.w	r3, r3, #16
 8003478:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800347c:	4b6d      	ldr	r3, [pc, #436]	; (8003634 <HAL_LTDC_MspInit+0x264>)
 800347e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003482:	f003 0310 	and.w	r3, r3, #16
 8003486:	613b      	str	r3, [r7, #16]
 8003488:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800348a:	4b6a      	ldr	r3, [pc, #424]	; (8003634 <HAL_LTDC_MspInit+0x264>)
 800348c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003490:	4a68      	ldr	r2, [pc, #416]	; (8003634 <HAL_LTDC_MspInit+0x264>)
 8003492:	f043 0308 	orr.w	r3, r3, #8
 8003496:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800349a:	4b66      	ldr	r3, [pc, #408]	; (8003634 <HAL_LTDC_MspInit+0x264>)
 800349c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80034a0:	f003 0308 	and.w	r3, r3, #8
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	68fb      	ldr	r3, [r7, #12]
    PD3     ------> LTDC_G7
    PD6     ------> LTDC_B2
    PB5     ------> LTDC_B5
    PB8     ------> LTDC_B6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80034a8:	2301      	movs	r3, #1
 80034aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ac:	2302      	movs	r3, #2
 80034ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b0:	2300      	movs	r3, #0
 80034b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b4:	2300      	movs	r3, #0
 80034b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 80034b8:	230b      	movs	r3, #11
 80034ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034c0:	4619      	mov	r1, r3
 80034c2:	485d      	ldr	r0, [pc, #372]	; (8003638 <HAL_LTDC_MspInit+0x268>)
 80034c4:	f005 ff70 	bl	80093a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
 80034c8:	f44f 6338 	mov.w	r3, #2944	; 0xb80
 80034cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ce:	2302      	movs	r3, #2
 80034d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d2:	2300      	movs	r3, #0
 80034d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d6:	2300      	movs	r3, #0
 80034d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80034da:	230e      	movs	r3, #14
 80034dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034e2:	4619      	mov	r1, r3
 80034e4:	4855      	ldr	r0, [pc, #340]	; (800363c <HAL_LTDC_MspInit+0x26c>)
 80034e6:	f005 ff5f 	bl	80093a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80034ea:	2301      	movs	r3, #1
 80034ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ee:	2302      	movs	r3, #2
 80034f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f2:	2300      	movs	r3, #0
 80034f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f6:	2300      	movs	r3, #0
 80034f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80034fa:	2309      	movs	r3, #9
 80034fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003502:	4619      	mov	r1, r3
 8003504:	484e      	ldr	r0, [pc, #312]	; (8003640 <HAL_LTDC_MspInit+0x270>)
 8003506:	f005 ff4f 	bl	80093a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800350a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800350e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003510:	2302      	movs	r3, #2
 8003512:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003514:	2300      	movs	r3, #0
 8003516:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003518:	2300      	movs	r3, #0
 800351a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800351c:	230e      	movs	r3, #14
 800351e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003520:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003524:	4619      	mov	r1, r3
 8003526:	4847      	ldr	r0, [pc, #284]	; (8003644 <HAL_LTDC_MspInit+0x274>)
 8003528:	f005 ff3e 	bl	80093a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_8;
 800352c:	f44f 439a 	mov.w	r3, #19712	; 0x4d00
 8003530:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003532:	2302      	movs	r3, #2
 8003534:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003536:	2300      	movs	r3, #0
 8003538:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800353a:	2300      	movs	r3, #0
 800353c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800353e:	230e      	movs	r3, #14
 8003540:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003546:	4619      	mov	r1, r3
 8003548:	483d      	ldr	r0, [pc, #244]	; (8003640 <HAL_LTDC_MspInit+0x270>)
 800354a:	f005 ff2d 	bl	80093a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_6;
 800354e:	f44f 6389 	mov.w	r3, #1096	; 0x448
 8003552:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003554:	2302      	movs	r3, #2
 8003556:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003558:	2300      	movs	r3, #0
 800355a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800355c:	2300      	movs	r3, #0
 800355e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003560:	230e      	movs	r3, #14
 8003562:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003564:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003568:	4619      	mov	r1, r3
 800356a:	4837      	ldr	r0, [pc, #220]	; (8003648 <HAL_LTDC_MspInit+0x278>)
 800356c:	f005 ff1c 	bl	80093a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8003570:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8003574:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003576:	2302      	movs	r3, #2
 8003578:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357a:	2300      	movs	r3, #0
 800357c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800357e:	2300      	movs	r3, #0
 8003580:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003582:	230e      	movs	r3, #14
 8003584:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800358a:	4619      	mov	r1, r3
 800358c:	482a      	ldr	r0, [pc, #168]	; (8003638 <HAL_LTDC_MspInit+0x268>)
 800358e:	f005 ff0b 	bl	80093a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003592:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003596:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003598:	2302      	movs	r3, #2
 800359a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359c:	2300      	movs	r3, #0
 800359e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035a0:	2300      	movs	r3, #0
 80035a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_LTDC;
 80035a4:	230a      	movs	r3, #10
 80035a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035ac:	4619      	mov	r1, r3
 80035ae:	4822      	ldr	r0, [pc, #136]	; (8003638 <HAL_LTDC_MspInit+0x268>)
 80035b0:	f005 fefa 	bl	80093a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80035b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ba:	2302      	movs	r3, #2
 80035bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035be:	2300      	movs	r3, #0
 80035c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035c2:	2300      	movs	r3, #0
 80035c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF12_LTDC;
 80035c6:	230c      	movs	r3, #12
 80035c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035ce:	4619      	mov	r1, r3
 80035d0:	481a      	ldr	r0, [pc, #104]	; (800363c <HAL_LTDC_MspInit+0x26c>)
 80035d2:	f005 fee9 	bl	80093a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80035d6:	2304      	movs	r3, #4
 80035d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035da:	2302      	movs	r3, #2
 80035dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035de:	2300      	movs	r3, #0
 80035e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035e2:	2300      	movs	r3, #0
 80035e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80035e6:	2309      	movs	r3, #9
 80035e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035ee:	4619      	mov	r1, r3
 80035f0:	4815      	ldr	r0, [pc, #84]	; (8003648 <HAL_LTDC_MspInit+0x278>)
 80035f2:	f005 fed9 	bl	80093a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80035f6:	2320      	movs	r3, #32
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035fa:	2302      	movs	r3, #2
 80035fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fe:	2300      	movs	r3, #0
 8003600:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003602:	2300      	movs	r3, #0
 8003604:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 8003606:	230b      	movs	r3, #11
 8003608:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800360a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800360e:	4619      	mov	r1, r3
 8003610:	480b      	ldr	r0, [pc, #44]	; (8003640 <HAL_LTDC_MspInit+0x270>)
 8003612:	f005 fec9 	bl	80093a8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8003616:	2200      	movs	r2, #0
 8003618:	2100      	movs	r1, #0
 800361a:	2058      	movs	r0, #88	; 0x58
 800361c:	f002 fd67 	bl	80060ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003620:	2058      	movs	r0, #88	; 0x58
 8003622:	f002 fd7e 	bl	8006122 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8003626:	bf00      	nop
 8003628:	3738      	adds	r7, #56	; 0x38
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	50001000 	.word	0x50001000
 8003634:	58024400 	.word	0x58024400
 8003638:	58020800 	.word	0x58020800
 800363c:	58020000 	.word	0x58020000
 8003640:	58020400 	.word	0x58020400
 8003644:	58021000 	.word	0x58021000
 8003648:	58020c00 	.word	0x58020c00

0800364c <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b0be      	sub	sp, #248	; 0xf8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003654:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003658:	2200      	movs	r2, #0
 800365a:	601a      	str	r2, [r3, #0]
 800365c:	605a      	str	r2, [r3, #4]
 800365e:	609a      	str	r2, [r3, #8]
 8003660:	60da      	str	r2, [r3, #12]
 8003662:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003664:	f107 0320 	add.w	r3, r7, #32
 8003668:	22c0      	movs	r2, #192	; 0xc0
 800366a:	2100      	movs	r1, #0
 800366c:	4618      	mov	r0, r3
 800366e:	f00e fae9 	bl	8011c44 <memset>
  if(hospi->Instance==OCTOSPI1)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a7a      	ldr	r2, [pc, #488]	; (8003860 <HAL_OSPI_MspInit+0x214>)
 8003678:	4293      	cmp	r3, r2
 800367a:	f040 80ec 	bne.w	8003856 <HAL_OSPI_MspInit+0x20a>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 800367e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003682:	f04f 0300 	mov.w	r3, #0
 8003686:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_CLKP;
 800368a:	2330      	movs	r3, #48	; 0x30
 800368c:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800368e:	f107 0320 	add.w	r3, r7, #32
 8003692:	4618      	mov	r0, r3
 8003694:	f009 f84e 	bl	800c734 <HAL_RCCEx_PeriphCLKConfig>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <HAL_OSPI_MspInit+0x56>
    {
      Error_Handler();
 800369e:	f7ff fd8f 	bl	80031c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 80036a2:	4b70      	ldr	r3, [pc, #448]	; (8003864 <HAL_OSPI_MspInit+0x218>)
 80036a4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80036a8:	4a6e      	ldr	r2, [pc, #440]	; (8003864 <HAL_OSPI_MspInit+0x218>)
 80036aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80036ae:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 80036b2:	4b6c      	ldr	r3, [pc, #432]	; (8003864 <HAL_OSPI_MspInit+0x218>)
 80036b4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80036b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036bc:	61fb      	str	r3, [r7, #28]
 80036be:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80036c0:	4b68      	ldr	r3, [pc, #416]	; (8003864 <HAL_OSPI_MspInit+0x218>)
 80036c2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80036c6:	4a67      	ldr	r2, [pc, #412]	; (8003864 <HAL_OSPI_MspInit+0x218>)
 80036c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036cc:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 80036d0:	4b64      	ldr	r3, [pc, #400]	; (8003864 <HAL_OSPI_MspInit+0x218>)
 80036d2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80036d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036da:	61bb      	str	r3, [r7, #24]
 80036dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80036de:	4b61      	ldr	r3, [pc, #388]	; (8003864 <HAL_OSPI_MspInit+0x218>)
 80036e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80036e4:	4a5f      	ldr	r2, [pc, #380]	; (8003864 <HAL_OSPI_MspInit+0x218>)
 80036e6:	f043 0310 	orr.w	r3, r3, #16
 80036ea:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80036ee:	4b5d      	ldr	r3, [pc, #372]	; (8003864 <HAL_OSPI_MspInit+0x218>)
 80036f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80036f4:	f003 0310 	and.w	r3, r3, #16
 80036f8:	617b      	str	r3, [r7, #20]
 80036fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036fc:	4b59      	ldr	r3, [pc, #356]	; (8003864 <HAL_OSPI_MspInit+0x218>)
 80036fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003702:	4a58      	ldr	r2, [pc, #352]	; (8003864 <HAL_OSPI_MspInit+0x218>)
 8003704:	f043 0301 	orr.w	r3, r3, #1
 8003708:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800370c:	4b55      	ldr	r3, [pc, #340]	; (8003864 <HAL_OSPI_MspInit+0x218>)
 800370e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	613b      	str	r3, [r7, #16]
 8003718:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800371a:	4b52      	ldr	r3, [pc, #328]	; (8003864 <HAL_OSPI_MspInit+0x218>)
 800371c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003720:	4a50      	ldr	r2, [pc, #320]	; (8003864 <HAL_OSPI_MspInit+0x218>)
 8003722:	f043 0302 	orr.w	r3, r3, #2
 8003726:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800372a:	4b4e      	ldr	r3, [pc, #312]	; (8003864 <HAL_OSPI_MspInit+0x218>)
 800372c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	60fb      	str	r3, [r7, #12]
 8003736:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003738:	4b4a      	ldr	r3, [pc, #296]	; (8003864 <HAL_OSPI_MspInit+0x218>)
 800373a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800373e:	4a49      	ldr	r2, [pc, #292]	; (8003864 <HAL_OSPI_MspInit+0x218>)
 8003740:	f043 0308 	orr.w	r3, r3, #8
 8003744:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003748:	4b46      	ldr	r3, [pc, #280]	; (8003864 <HAL_OSPI_MspInit+0x218>)
 800374a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800374e:	f003 0308 	and.w	r3, r3, #8
 8003752:	60bb      	str	r3, [r7, #8]
 8003754:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> OCTOSPIM_P1_IO0
    PB2     ------> OCTOSPIM_P1_CLK
    PE11     ------> OCTOSPIM_P1_NCS
    PD12     ------> OCTOSPIM_P1_IO1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003756:	2304      	movs	r3, #4
 8003758:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800375c:	2302      	movs	r3, #2
 800375e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003762:	2300      	movs	r3, #0
 8003764:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003768:	2303      	movs	r3, #3
 800376a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800376e:	2309      	movs	r3, #9
 8003770:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003774:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003778:	4619      	mov	r1, r3
 800377a:	483b      	ldr	r0, [pc, #236]	; (8003868 <HAL_OSPI_MspInit+0x21c>)
 800377c:	f005 fe14 	bl	80093a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003780:	2302      	movs	r3, #2
 8003782:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003786:	2302      	movs	r3, #2
 8003788:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800378c:	2300      	movs	r3, #0
 800378e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003792:	2303      	movs	r3, #3
 8003794:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8003798:	2309      	movs	r3, #9
 800379a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800379e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80037a2:	4619      	mov	r1, r3
 80037a4:	4831      	ldr	r0, [pc, #196]	; (800386c <HAL_OSPI_MspInit+0x220>)
 80037a6:	f005 fdff 	bl	80093a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80037aa:	2302      	movs	r3, #2
 80037ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b0:	2302      	movs	r3, #2
 80037b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b6:	2300      	movs	r3, #0
 80037b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037bc:	2303      	movs	r3, #3
 80037be:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
 80037c2:	230b      	movs	r3, #11
 80037c4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037c8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80037cc:	4619      	mov	r1, r3
 80037ce:	4828      	ldr	r0, [pc, #160]	; (8003870 <HAL_OSPI_MspInit+0x224>)
 80037d0:	f005 fdea 	bl	80093a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80037d4:	2304      	movs	r3, #4
 80037d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037da:	2302      	movs	r3, #2
 80037dc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e0:	2300      	movs	r3, #0
 80037e2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037e6:	2303      	movs	r3, #3
 80037e8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80037ec:	2309      	movs	r3, #9
 80037ee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037f2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80037f6:	4619      	mov	r1, r3
 80037f8:	481d      	ldr	r0, [pc, #116]	; (8003870 <HAL_OSPI_MspInit+0x224>)
 80037fa:	f005 fdd5 	bl	80093a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80037fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003802:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003806:	2302      	movs	r3, #2
 8003808:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800380c:	2300      	movs	r3, #0
 800380e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003812:	2303      	movs	r3, #3
 8003814:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
 8003818:	230b      	movs	r3, #11
 800381a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800381e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003822:	4619      	mov	r1, r3
 8003824:	4810      	ldr	r0, [pc, #64]	; (8003868 <HAL_OSPI_MspInit+0x21c>)
 8003826:	f005 fdbf 	bl	80093a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800382a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800382e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003832:	2302      	movs	r3, #2
 8003834:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003838:	2300      	movs	r3, #0
 800383a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800383e:	2303      	movs	r3, #3
 8003840:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8003844:	2309      	movs	r3, #9
 8003846:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800384a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800384e:	4619      	mov	r1, r3
 8003850:	4808      	ldr	r0, [pc, #32]	; (8003874 <HAL_OSPI_MspInit+0x228>)
 8003852:	f005 fda9 	bl	80093a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8003856:	bf00      	nop
 8003858:	37f8      	adds	r7, #248	; 0xf8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	52005000 	.word	0x52005000
 8003864:	58024400 	.word	0x58024400
 8003868:	58021000 	.word	0x58021000
 800386c:	58020000 	.word	0x58020000
 8003870:	58020400 	.word	0x58020400
 8003874:	58020c00 	.word	0x58020c00

08003878 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b0b2      	sub	sp, #200	; 0xc8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003880:	f107 0308 	add.w	r3, r7, #8
 8003884:	22c0      	movs	r2, #192	; 0xc0
 8003886:	2100      	movs	r1, #0
 8003888:	4618      	mov	r0, r3
 800388a:	f00e f9db 	bl	8011c44 <memset>
  if(hrtc->Instance==RTC)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a10      	ldr	r2, [pc, #64]	; (80038d4 <HAL_RTC_MspInit+0x5c>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d119      	bne.n	80038cc <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003898:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800389c:	f04f 0300 	mov.w	r3, #0
 80038a0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80038a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80038ac:	f107 0308 	add.w	r3, r7, #8
 80038b0:	4618      	mov	r0, r3
 80038b2:	f008 ff3f 	bl	800c734 <HAL_RCCEx_PeriphCLKConfig>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 80038bc:	f7ff fc80 	bl	80031c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80038c0:	4b05      	ldr	r3, [pc, #20]	; (80038d8 <HAL_RTC_MspInit+0x60>)
 80038c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c4:	4a04      	ldr	r2, [pc, #16]	; (80038d8 <HAL_RTC_MspInit+0x60>)
 80038c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038ca:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80038cc:	bf00      	nop
 80038ce:	37c8      	adds	r7, #200	; 0xc8
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	58004000 	.word	0x58004000
 80038d8:	58024400 	.word	0x58024400

080038dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b0ba      	sub	sp, #232	; 0xe8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038e4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	605a      	str	r2, [r3, #4]
 80038ee:	609a      	str	r2, [r3, #8]
 80038f0:	60da      	str	r2, [r3, #12]
 80038f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80038f4:	f107 0310 	add.w	r3, r7, #16
 80038f8:	22c0      	movs	r2, #192	; 0xc0
 80038fa:	2100      	movs	r1, #0
 80038fc:	4618      	mov	r0, r3
 80038fe:	f00e f9a1 	bl	8011c44 <memset>
  if(hspi->Instance==SPI2)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a27      	ldr	r2, [pc, #156]	; (80039a4 <HAL_SPI_MspInit+0xc8>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d146      	bne.n	800399a <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800390c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003910:	f04f 0300 	mov.w	r3, #0
 8003914:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8003918:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800391c:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800391e:	f107 0310 	add.w	r3, r7, #16
 8003922:	4618      	mov	r0, r3
 8003924:	f008 ff06 	bl	800c734 <HAL_RCCEx_PeriphCLKConfig>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800392e:	f7ff fc47 	bl	80031c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003932:	4b1d      	ldr	r3, [pc, #116]	; (80039a8 <HAL_SPI_MspInit+0xcc>)
 8003934:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8003938:	4a1b      	ldr	r2, [pc, #108]	; (80039a8 <HAL_SPI_MspInit+0xcc>)
 800393a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800393e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8003942:	4b19      	ldr	r3, [pc, #100]	; (80039a8 <HAL_SPI_MspInit+0xcc>)
 8003944:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8003948:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800394c:	60fb      	str	r3, [r7, #12]
 800394e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003950:	4b15      	ldr	r3, [pc, #84]	; (80039a8 <HAL_SPI_MspInit+0xcc>)
 8003952:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003956:	4a14      	ldr	r2, [pc, #80]	; (80039a8 <HAL_SPI_MspInit+0xcc>)
 8003958:	f043 0302 	orr.w	r3, r3, #2
 800395c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003960:	4b11      	ldr	r3, [pc, #68]	; (80039a8 <HAL_SPI_MspInit+0xcc>)
 8003962:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	60bb      	str	r3, [r7, #8]
 800396c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800396e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003972:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003976:	2302      	movs	r3, #2
 8003978:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800397c:	2300      	movs	r3, #0
 800397e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003982:	2300      	movs	r3, #0
 8003984:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003988:	2305      	movs	r3, #5
 800398a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800398e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003992:	4619      	mov	r1, r3
 8003994:	4805      	ldr	r0, [pc, #20]	; (80039ac <HAL_SPI_MspInit+0xd0>)
 8003996:	f005 fd07 	bl	80093a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800399a:	bf00      	nop
 800399c:	37e8      	adds	r7, #232	; 0xe8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	40003800 	.word	0x40003800
 80039a8:	58024400 	.word	0x58024400
 80039ac:	58020400 	.word	0x58020400

080039b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a0e      	ldr	r2, [pc, #56]	; (80039f8 <HAL_TIM_Base_MspInit+0x48>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d116      	bne.n	80039f0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80039c2:	4b0e      	ldr	r3, [pc, #56]	; (80039fc <HAL_TIM_Base_MspInit+0x4c>)
 80039c4:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80039c8:	4a0c      	ldr	r2, [pc, #48]	; (80039fc <HAL_TIM_Base_MspInit+0x4c>)
 80039ca:	f043 0301 	orr.w	r3, r3, #1
 80039ce:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 80039d2:	4b0a      	ldr	r3, [pc, #40]	; (80039fc <HAL_TIM_Base_MspInit+0x4c>)
 80039d4:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	60fb      	str	r3, [r7, #12]
 80039de:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80039e0:	2200      	movs	r2, #0
 80039e2:	2100      	movs	r1, #0
 80039e4:	2019      	movs	r0, #25
 80039e6:	f002 fb82 	bl	80060ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80039ea:	2019      	movs	r0, #25
 80039ec:	f002 fb99 	bl	8006122 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80039f0:	bf00      	nop
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	40010000 	.word	0x40010000
 80039fc:	58024400 	.word	0x58024400

08003a00 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_a;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b0ba      	sub	sp, #232	; 0xe8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a08:	f107 0310 	add.w	r3, r7, #16
 8003a0c:	22c0      	movs	r2, #192	; 0xc0
 8003a0e:	2100      	movs	r1, #0
 8003a10:	4618      	mov	r0, r3
 8003a12:	f00e f917 	bl	8011c44 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a50      	ldr	r2, [pc, #320]	; (8003b5c <HAL_SAI_MspInit+0x15c>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	f040 8098 	bne.w	8003b52 <HAL_SAI_MspInit+0x152>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8003a22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a26:	f04f 0300 	mov.w	r3, #0
 8003a2a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 25;
 8003a2e:	2319      	movs	r3, #25
 8003a30:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 192;
 8003a32:	23c0      	movs	r3, #192	; 0xc0
 8003a34:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 5;
 8003a36:	2305      	movs	r3, #5
 8003a38:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 5;
 8003a3e:	2305      	movs	r3, #5
 8003a40:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8003a42:	2340      	movs	r3, #64	; 0x40
 8003a44:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8003a46:	2300      	movs	r3, #0
 8003a48:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a52:	f107 0310 	add.w	r3, r7, #16
 8003a56:	4618      	mov	r0, r3
 8003a58:	f008 fe6c 	bl	800c734 <HAL_RCCEx_PeriphCLKConfig>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <HAL_SAI_MspInit+0x66>
    {
      Error_Handler();
 8003a62:	f7ff fbad 	bl	80031c0 <Error_Handler>
    }

    if (SAI1_client == 0)
 8003a66:	4b3e      	ldr	r3, [pc, #248]	; (8003b60 <HAL_SAI_MspInit+0x160>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d116      	bne.n	8003a9c <HAL_SAI_MspInit+0x9c>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8003a6e:	4b3d      	ldr	r3, [pc, #244]	; (8003b64 <HAL_SAI_MspInit+0x164>)
 8003a70:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8003a74:	4a3b      	ldr	r2, [pc, #236]	; (8003b64 <HAL_SAI_MspInit+0x164>)
 8003a76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a7a:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8003a7e:	4b39      	ldr	r3, [pc, #228]	; (8003b64 <HAL_SAI_MspInit+0x164>)
 8003a80:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8003a84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a88:	60fb      	str	r3, [r7, #12]
 8003a8a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	2100      	movs	r1, #0
 8003a90:	2057      	movs	r0, #87	; 0x57
 8003a92:	f002 fb2c 	bl	80060ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
 8003a96:	2057      	movs	r0, #87	; 0x57
 8003a98:	f002 fb43 	bl	8006122 <HAL_NVIC_EnableIRQ>
    }
    SAI1_client ++;
 8003a9c:	4b30      	ldr	r3, [pc, #192]	; (8003b60 <HAL_SAI_MspInit+0x160>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	4a2f      	ldr	r2, [pc, #188]	; (8003b60 <HAL_SAI_MspInit+0x160>)
 8003aa4:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8003aa6:	2370      	movs	r3, #112	; 0x70
 8003aa8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aac:	2302      	movs	r3, #2
 8003aae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8003abe:	2306      	movs	r3, #6
 8003ac0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003ac4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003ac8:	4619      	mov	r1, r3
 8003aca:	4827      	ldr	r0, [pc, #156]	; (8003b68 <HAL_SAI_MspInit+0x168>)
 8003acc:	f005 fc6c 	bl	80093a8 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream0;
 8003ad0:	4b26      	ldr	r3, [pc, #152]	; (8003b6c <HAL_SAI_MspInit+0x16c>)
 8003ad2:	4a27      	ldr	r2, [pc, #156]	; (8003b70 <HAL_SAI_MspInit+0x170>)
 8003ad4:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8003ad6:	4b25      	ldr	r3, [pc, #148]	; (8003b6c <HAL_SAI_MspInit+0x16c>)
 8003ad8:	2257      	movs	r2, #87	; 0x57
 8003ada:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003adc:	4b23      	ldr	r3, [pc, #140]	; (8003b6c <HAL_SAI_MspInit+0x16c>)
 8003ade:	2240      	movs	r2, #64	; 0x40
 8003ae0:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ae2:	4b22      	ldr	r3, [pc, #136]	; (8003b6c <HAL_SAI_MspInit+0x16c>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8003ae8:	4b20      	ldr	r3, [pc, #128]	; (8003b6c <HAL_SAI_MspInit+0x16c>)
 8003aea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003aee:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003af0:	4b1e      	ldr	r3, [pc, #120]	; (8003b6c <HAL_SAI_MspInit+0x16c>)
 8003af2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003af6:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003af8:	4b1c      	ldr	r3, [pc, #112]	; (8003b6c <HAL_SAI_MspInit+0x16c>)
 8003afa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003afe:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 8003b00:	4b1a      	ldr	r3, [pc, #104]	; (8003b6c <HAL_SAI_MspInit+0x16c>)
 8003b02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b06:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 8003b08:	4b18      	ldr	r3, [pc, #96]	; (8003b6c <HAL_SAI_MspInit+0x16c>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003b0e:	4b17      	ldr	r3, [pc, #92]	; (8003b6c <HAL_SAI_MspInit+0x16c>)
 8003b10:	2204      	movs	r2, #4
 8003b12:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003b14:	4b15      	ldr	r3, [pc, #84]	; (8003b6c <HAL_SAI_MspInit+0x16c>)
 8003b16:	2203      	movs	r2, #3
 8003b18:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
 8003b1a:	4b14      	ldr	r3, [pc, #80]	; (8003b6c <HAL_SAI_MspInit+0x16c>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003b20:	4b12      	ldr	r3, [pc, #72]	; (8003b6c <HAL_SAI_MspInit+0x16c>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8003b26:	4811      	ldr	r0, [pc, #68]	; (8003b6c <HAL_SAI_MspInit+0x16c>)
 8003b28:	f002 fcf0 	bl	800650c <HAL_DMA_Init>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <HAL_SAI_MspInit+0x136>
    {
      Error_Handler();
 8003b32:	f7ff fb45 	bl	80031c0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a0c      	ldr	r2, [pc, #48]	; (8003b6c <HAL_SAI_MspInit+0x16c>)
 8003b3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8003b3e:	4a0b      	ldr	r2, [pc, #44]	; (8003b6c <HAL_SAI_MspInit+0x16c>)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a09      	ldr	r2, [pc, #36]	; (8003b6c <HAL_SAI_MspInit+0x16c>)
 8003b48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003b4c:	4a07      	ldr	r2, [pc, #28]	; (8003b6c <HAL_SAI_MspInit+0x16c>)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 8003b52:	bf00      	nop
 8003b54:	37e8      	adds	r7, #232	; 0xe8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	40015804 	.word	0x40015804
 8003b60:	20000614 	.word	0x20000614
 8003b64:	58024400 	.word	0x58024400
 8003b68:	58021000 	.word	0x58021000
 8003b6c:	200004c8 	.word	0x200004c8
 8003b70:	40020010 	.word	0x40020010

08003b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003b78:	e7fe      	b.n	8003b78 <NMI_Handler+0x4>

08003b7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b7e:	e7fe      	b.n	8003b7e <HardFault_Handler+0x4>

08003b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b84:	e7fe      	b.n	8003b84 <MemManage_Handler+0x4>

08003b86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b86:	b480      	push	{r7}
 8003b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b8a:	e7fe      	b.n	8003b8a <BusFault_Handler+0x4>

08003b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b90:	e7fe      	b.n	8003b90 <UsageFault_Handler+0x4>

08003b92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b92:	b480      	push	{r7}
 8003b94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b96:	bf00      	nop
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ba4:	bf00      	nop
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003bb2:	bf00      	nop
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003bc0:	f000 fa48 	bl	8004054 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
#if 1
	if (HAL_GPIO_ReadPin(BTN_PWR_GPIO_Port, BTN_PWR_Pin) == 0) // is power button down ?
 8003bc4:	2101      	movs	r1, #1
 8003bc6:	480c      	ldr	r0, [pc, #48]	; (8003bf8 <SysTick_Handler+0x3c>)
 8003bc8:	f005 fd9e 	bl	8009708 <HAL_GPIO_ReadPin>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10d      	bne.n	8003bee <SysTick_Handler+0x32>
			{
		g_system_reset_ticks++;
 8003bd2:	4b0a      	ldr	r3, [pc, #40]	; (8003bfc <SysTick_Handler+0x40>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	4a08      	ldr	r2, [pc, #32]	; (8003bfc <SysTick_Handler+0x40>)
 8003bda:	6013      	str	r3, [r2, #0]
		if (g_system_reset_ticks >= 5000) {
 8003bdc:	4b07      	ldr	r3, [pc, #28]	; (8003bfc <SysTick_Handler+0x40>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f241 3287 	movw	r2, #4999	; 0x1387
 8003be4:	4293      	cmp	r3, r2
 8003be6:	dd05      	ble.n	8003bf4 <SysTick_Handler+0x38>
			HAL_NVIC_SystemReset();
 8003be8:	f002 faa9 	bl	800613e <HAL_NVIC_SystemReset>
	} else {
		g_system_reset_ticks = 0;
	}
#endif
  /* USER CODE END SysTick_IRQn 1 */
}
 8003bec:	e002      	b.n	8003bf4 <SysTick_Handler+0x38>
		g_system_reset_ticks = 0;
 8003bee:	4b03      	ldr	r3, [pc, #12]	; (8003bfc <SysTick_Handler+0x40>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	601a      	str	r2, [r3, #0]
}
 8003bf4:	bf00      	nop
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	58020000 	.word	0x58020000
 8003bfc:	20000618 	.word	0x20000618

08003c00 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003c04:	2004      	movs	r0, #4
 8003c06:	f005 fdb0 	bl	800976a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003c0a:	bf00      	nop
 8003c0c:	bd80      	pop	{r7, pc}
	...

08003c10 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8003c14:	4802      	ldr	r0, [pc, #8]	; (8003c20 <DMA1_Stream0_IRQHandler+0x10>)
 8003c16:	f003 ffd5 	bl	8007bc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003c1a:	bf00      	nop
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	200004c8 	.word	0x200004c8

08003c24 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003c28:	4802      	ldr	r0, [pc, #8]	; (8003c34 <ADC_IRQHandler+0x10>)
 8003c2a:	f001 f901 	bl	8004e30 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003c2e:	bf00      	nop
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	20000210 	.word	0x20000210

08003c38 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003c3c:	2080      	movs	r0, #128	; 0x80
 8003c3e:	f005 fd94 	bl	800976a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003c42:	bf00      	nop
 8003c44:	bd80      	pop	{r7, pc}
	...

08003c48 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003c4c:	4802      	ldr	r0, [pc, #8]	; (8003c58 <TIM1_UP_IRQHandler+0x10>)
 8003c4e:	f00d f907 	bl	8010e60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003c52:	bf00      	nop
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	200005c8 	.word	0x200005c8

08003c5c <SAI1_IRQHandler>:

/**
  * @brief This function handles SAI1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
 8003c60:	4802      	ldr	r0, [pc, #8]	; (8003c6c <SAI1_IRQHandler+0x10>)
 8003c62:	f00c f819 	bl	800fc98 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
 8003c66:	bf00      	nop
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	20000430 	.word	0x20000430

08003c70 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003c74:	4802      	ldr	r0, [pc, #8]	; (8003c80 <LTDC_IRQHandler+0x10>)
 8003c76:	f005 fe6d 	bl	8009954 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003c7a:	bf00      	nop
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	20000304 	.word	0x20000304

08003c84 <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
 8003c88:	4802      	ldr	r0, [pc, #8]	; (8003c94 <OCTOSPI1_IRQHandler+0x10>)
 8003c8a:	f006 fa3d 	bl	800a108 <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
 8003c8e:	bf00      	nop
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	200003ac 	.word	0x200003ac

08003c98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	af00      	add	r7, sp, #0
	return 1;
 8003c9c:	2301      	movs	r3, #1
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <_kill>:

int _kill(int pid, int sig)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003cb2:	f00e f815 	bl	8011ce0 <__errno>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2216      	movs	r2, #22
 8003cba:	601a      	str	r2, [r3, #0]
	return -1;
 8003cbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3708      	adds	r7, #8
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <_exit>:

void _exit (int status)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f7ff ffe7 	bl	8003ca8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003cda:	e7fe      	b.n	8003cda <_exit+0x12>

08003cdc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ce8:	2300      	movs	r3, #0
 8003cea:	617b      	str	r3, [r7, #20]
 8003cec:	e00a      	b.n	8003d04 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003cee:	f3af 8000 	nop.w
 8003cf2:	4601      	mov	r1, r0
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	1c5a      	adds	r2, r3, #1
 8003cf8:	60ba      	str	r2, [r7, #8]
 8003cfa:	b2ca      	uxtb	r2, r1
 8003cfc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	3301      	adds	r3, #1
 8003d02:	617b      	str	r3, [r7, #20]
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	dbf0      	blt.n	8003cee <_read+0x12>
	}

return len;
 8003d0c:	687b      	ldr	r3, [r7, #4]
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3718      	adds	r7, #24
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b086      	sub	sp, #24
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	60f8      	str	r0, [r7, #12]
 8003d1e:	60b9      	str	r1, [r7, #8]
 8003d20:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d22:	2300      	movs	r3, #0
 8003d24:	617b      	str	r3, [r7, #20]
 8003d26:	e009      	b.n	8003d3c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	1c5a      	adds	r2, r3, #1
 8003d2c:	60ba      	str	r2, [r7, #8]
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	617b      	str	r3, [r7, #20]
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	dbf1      	blt.n	8003d28 <_write+0x12>
	}
	return len;
 8003d44:	687b      	ldr	r3, [r7, #4]
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3718      	adds	r7, #24
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <_close>:

int _close(int file)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
	return -1;
 8003d56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr

08003d66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d66:	b480      	push	{r7}
 8003d68:	b083      	sub	sp, #12
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
 8003d6e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d76:	605a      	str	r2, [r3, #4]
	return 0;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr

08003d86 <_isatty>:

int _isatty(int file)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
	return 1;
 8003d8e:	2301      	movs	r3, #1
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
	return 0;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3714      	adds	r7, #20
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
	...

08003db8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003dc0:	4a14      	ldr	r2, [pc, #80]	; (8003e14 <_sbrk+0x5c>)
 8003dc2:	4b15      	ldr	r3, [pc, #84]	; (8003e18 <_sbrk+0x60>)
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003dcc:	4b13      	ldr	r3, [pc, #76]	; (8003e1c <_sbrk+0x64>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d102      	bne.n	8003dda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003dd4:	4b11      	ldr	r3, [pc, #68]	; (8003e1c <_sbrk+0x64>)
 8003dd6:	4a12      	ldr	r2, [pc, #72]	; (8003e20 <_sbrk+0x68>)
 8003dd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003dda:	4b10      	ldr	r3, [pc, #64]	; (8003e1c <_sbrk+0x64>)
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4413      	add	r3, r2
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d207      	bcs.n	8003df8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003de8:	f00d ff7a 	bl	8011ce0 <__errno>
 8003dec:	4603      	mov	r3, r0
 8003dee:	220c      	movs	r2, #12
 8003df0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003df2:	f04f 33ff 	mov.w	r3, #4294967295
 8003df6:	e009      	b.n	8003e0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003df8:	4b08      	ldr	r3, [pc, #32]	; (8003e1c <_sbrk+0x64>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003dfe:	4b07      	ldr	r3, [pc, #28]	; (8003e1c <_sbrk+0x64>)
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4413      	add	r3, r2
 8003e06:	4a05      	ldr	r2, [pc, #20]	; (8003e1c <_sbrk+0x64>)
 8003e08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3718      	adds	r7, #24
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	20020000 	.word	0x20020000
 8003e18:	00005000 	.word	0x00005000
 8003e1c:	2000061c 	.word	0x2000061c
 8003e20:	20000770 	.word	0x20000770

08003e24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003e28:	4b34      	ldr	r3, [pc, #208]	; (8003efc <SystemInit+0xd8>)
 8003e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e2e:	4a33      	ldr	r2, [pc, #204]	; (8003efc <SystemInit+0xd8>)
 8003e30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003e38:	4b31      	ldr	r3, [pc, #196]	; (8003f00 <SystemInit+0xdc>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 030f 	and.w	r3, r3, #15
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d807      	bhi.n	8003e54 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003e44:	4b2e      	ldr	r3, [pc, #184]	; (8003f00 <SystemInit+0xdc>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f023 030f 	bic.w	r3, r3, #15
 8003e4c:	4a2c      	ldr	r2, [pc, #176]	; (8003f00 <SystemInit+0xdc>)
 8003e4e:	f043 0303 	orr.w	r3, r3, #3
 8003e52:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003e54:	4b2b      	ldr	r3, [pc, #172]	; (8003f04 <SystemInit+0xe0>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a2a      	ldr	r2, [pc, #168]	; (8003f04 <SystemInit+0xe0>)
 8003e5a:	f043 0301 	orr.w	r3, r3, #1
 8003e5e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003e60:	4b28      	ldr	r3, [pc, #160]	; (8003f04 <SystemInit+0xe0>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003e66:	4b27      	ldr	r3, [pc, #156]	; (8003f04 <SystemInit+0xe0>)
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	4926      	ldr	r1, [pc, #152]	; (8003f04 <SystemInit+0xe0>)
 8003e6c:	4b26      	ldr	r3, [pc, #152]	; (8003f08 <SystemInit+0xe4>)
 8003e6e:	4013      	ands	r3, r2
 8003e70:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003e72:	4b23      	ldr	r3, [pc, #140]	; (8003f00 <SystemInit+0xdc>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 030c 	and.w	r3, r3, #12
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d007      	beq.n	8003e8e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003e7e:	4b20      	ldr	r3, [pc, #128]	; (8003f00 <SystemInit+0xdc>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f023 030f 	bic.w	r3, r3, #15
 8003e86:	4a1e      	ldr	r2, [pc, #120]	; (8003f00 <SystemInit+0xdc>)
 8003e88:	f043 0303 	orr.w	r3, r3, #3
 8003e8c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8003e8e:	4b1d      	ldr	r3, [pc, #116]	; (8003f04 <SystemInit+0xe0>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8003e94:	4b1b      	ldr	r3, [pc, #108]	; (8003f04 <SystemInit+0xe0>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8003e9a:	4b1a      	ldr	r3, [pc, #104]	; (8003f04 <SystemInit+0xe0>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003ea0:	4b18      	ldr	r3, [pc, #96]	; (8003f04 <SystemInit+0xe0>)
 8003ea2:	4a1a      	ldr	r2, [pc, #104]	; (8003f0c <SystemInit+0xe8>)
 8003ea4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003ea6:	4b17      	ldr	r3, [pc, #92]	; (8003f04 <SystemInit+0xe0>)
 8003ea8:	4a19      	ldr	r2, [pc, #100]	; (8003f10 <SystemInit+0xec>)
 8003eaa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003eac:	4b15      	ldr	r3, [pc, #84]	; (8003f04 <SystemInit+0xe0>)
 8003eae:	4a19      	ldr	r2, [pc, #100]	; (8003f14 <SystemInit+0xf0>)
 8003eb0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003eb2:	4b14      	ldr	r3, [pc, #80]	; (8003f04 <SystemInit+0xe0>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003eb8:	4b12      	ldr	r3, [pc, #72]	; (8003f04 <SystemInit+0xe0>)
 8003eba:	4a16      	ldr	r2, [pc, #88]	; (8003f14 <SystemInit+0xf0>)
 8003ebc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003ebe:	4b11      	ldr	r3, [pc, #68]	; (8003f04 <SystemInit+0xe0>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003ec4:	4b0f      	ldr	r3, [pc, #60]	; (8003f04 <SystemInit+0xe0>)
 8003ec6:	4a13      	ldr	r2, [pc, #76]	; (8003f14 <SystemInit+0xf0>)
 8003ec8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003eca:	4b0e      	ldr	r3, [pc, #56]	; (8003f04 <SystemInit+0xe0>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003ed0:	4b0c      	ldr	r3, [pc, #48]	; (8003f04 <SystemInit+0xe0>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a0b      	ldr	r2, [pc, #44]	; (8003f04 <SystemInit+0xe0>)
 8003ed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eda:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003edc:	4b09      	ldr	r3, [pc, #36]	; (8003f04 <SystemInit+0xe0>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003ee2:	4b0d      	ldr	r3, [pc, #52]	; (8003f18 <SystemInit+0xf4>)
 8003ee4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003ee8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003eea:	4b04      	ldr	r3, [pc, #16]	; (8003efc <SystemInit+0xd8>)
 8003eec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ef0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003ef2:	bf00      	nop
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr
 8003efc:	e000ed00 	.word	0xe000ed00
 8003f00:	52002000 	.word	0x52002000
 8003f04:	58024400 	.word	0x58024400
 8003f08:	eaf6ed7f 	.word	0xeaf6ed7f
 8003f0c:	02020200 	.word	0x02020200
 8003f10:	01ff0000 	.word	0x01ff0000
 8003f14:	01010280 	.word	0x01010280
 8003f18:	52004000 	.word	0x52004000

08003f1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003f1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f54 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003f20:	f7ff ff80 	bl	8003e24 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003f24:	480c      	ldr	r0, [pc, #48]	; (8003f58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003f26:	490d      	ldr	r1, [pc, #52]	; (8003f5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003f28:	4a0d      	ldr	r2, [pc, #52]	; (8003f60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003f2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f2c:	e002      	b.n	8003f34 <LoopCopyDataInit>

08003f2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f32:	3304      	adds	r3, #4

08003f34 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8003f34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f38:	d3f9      	bcc.n	8003f2e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f3a:	4a0a      	ldr	r2, [pc, #40]	; (8003f64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003f3c:	4c0a      	ldr	r4, [pc, #40]	; (8003f68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003f3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f40:	e001      	b.n	8003f46 <LoopFillZerobss>

08003f42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f44:	3204      	adds	r2, #4

08003f46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f48:	d3fb      	bcc.n	8003f42 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003f4a:	f00d fecf 	bl	8011cec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f4e:	f7fe fb99 	bl	8002684 <main>
  bx  lr
 8003f52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003f54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f5c:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8003f60:	080145a8 	.word	0x080145a8
  ldr r2, =_sbss
 8003f64:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8003f68:	20000770 	.word	0x20000770

08003f6c <BDMA1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f6c:	e7fe      	b.n	8003f6c <BDMA1_IRQHandler>
	...

08003f70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f76:	2003      	movs	r0, #3
 8003f78:	f002 f8ae 	bl	80060d8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003f7c:	f008 fa1a 	bl	800c3b4 <HAL_RCC_GetSysClockFreq>
 8003f80:	4602      	mov	r2, r0
 8003f82:	4b15      	ldr	r3, [pc, #84]	; (8003fd8 <HAL_Init+0x68>)
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	0a1b      	lsrs	r3, r3, #8
 8003f88:	f003 030f 	and.w	r3, r3, #15
 8003f8c:	4913      	ldr	r1, [pc, #76]	; (8003fdc <HAL_Init+0x6c>)
 8003f8e:	5ccb      	ldrb	r3, [r1, r3]
 8003f90:	f003 031f 	and.w	r3, r3, #31
 8003f94:	fa22 f303 	lsr.w	r3, r2, r3
 8003f98:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003f9a:	4b0f      	ldr	r3, [pc, #60]	; (8003fd8 <HAL_Init+0x68>)
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	f003 030f 	and.w	r3, r3, #15
 8003fa2:	4a0e      	ldr	r2, [pc, #56]	; (8003fdc <HAL_Init+0x6c>)
 8003fa4:	5cd3      	ldrb	r3, [r2, r3]
 8003fa6:	f003 031f 	and.w	r3, r3, #31
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	fa22 f303 	lsr.w	r3, r2, r3
 8003fb0:	4a0b      	ldr	r2, [pc, #44]	; (8003fe0 <HAL_Init+0x70>)
 8003fb2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003fb4:	4a0b      	ldr	r2, [pc, #44]	; (8003fe4 <HAL_Init+0x74>)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003fba:	2000      	movs	r0, #0
 8003fbc:	f000 f814 	bl	8003fe8 <HAL_InitTick>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e002      	b.n	8003fd0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003fca:	f7ff f8ff 	bl	80031cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3708      	adds	r7, #8
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	58024400 	.word	0x58024400
 8003fdc:	080144a8 	.word	0x080144a8
 8003fe0:	20000048 	.word	0x20000048
 8003fe4:	20000044 	.word	0x20000044

08003fe8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003ff0:	4b15      	ldr	r3, [pc, #84]	; (8004048 <HAL_InitTick+0x60>)
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d101      	bne.n	8003ffc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e021      	b.n	8004040 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003ffc:	4b13      	ldr	r3, [pc, #76]	; (800404c <HAL_InitTick+0x64>)
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	4b11      	ldr	r3, [pc, #68]	; (8004048 <HAL_InitTick+0x60>)
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	4619      	mov	r1, r3
 8004006:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800400a:	fbb3 f3f1 	udiv	r3, r3, r1
 800400e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004012:	4618      	mov	r0, r3
 8004014:	f002 f897 	bl	8006146 <HAL_SYSTICK_Config>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e00e      	b.n	8004040 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2b0f      	cmp	r3, #15
 8004026:	d80a      	bhi.n	800403e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004028:	2200      	movs	r2, #0
 800402a:	6879      	ldr	r1, [r7, #4]
 800402c:	f04f 30ff 	mov.w	r0, #4294967295
 8004030:	f002 f85d 	bl	80060ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004034:	4a06      	ldr	r2, [pc, #24]	; (8004050 <HAL_InitTick+0x68>)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800403a:	2300      	movs	r3, #0
 800403c:	e000      	b.n	8004040 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
}
 8004040:	4618      	mov	r0, r3
 8004042:	3708      	adds	r7, #8
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	20000050 	.word	0x20000050
 800404c:	20000044 	.word	0x20000044
 8004050:	2000004c 	.word	0x2000004c

08004054 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004058:	4b06      	ldr	r3, [pc, #24]	; (8004074 <HAL_IncTick+0x20>)
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	461a      	mov	r2, r3
 800405e:	4b06      	ldr	r3, [pc, #24]	; (8004078 <HAL_IncTick+0x24>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4413      	add	r3, r2
 8004064:	4a04      	ldr	r2, [pc, #16]	; (8004078 <HAL_IncTick+0x24>)
 8004066:	6013      	str	r3, [r2, #0]
}
 8004068:	bf00      	nop
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	20000050 	.word	0x20000050
 8004078:	20000620 	.word	0x20000620

0800407c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800407c:	b480      	push	{r7}
 800407e:	af00      	add	r7, sp, #0
  return uwTick;
 8004080:	4b03      	ldr	r3, [pc, #12]	; (8004090 <HAL_GetTick+0x14>)
 8004082:	681b      	ldr	r3, [r3, #0]
}
 8004084:	4618      	mov	r0, r3
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	20000620 	.word	0x20000620

08004094 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800409c:	f7ff ffee 	bl	800407c <HAL_GetTick>
 80040a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ac:	d005      	beq.n	80040ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80040ae:	4b0a      	ldr	r3, [pc, #40]	; (80040d8 <HAL_Delay+0x44>)
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	461a      	mov	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	4413      	add	r3, r2
 80040b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80040ba:	bf00      	nop
 80040bc:	f7ff ffde 	bl	800407c <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d8f7      	bhi.n	80040bc <HAL_Delay+0x28>
  {
  }
}
 80040cc:	bf00      	nop
 80040ce:	bf00      	nop
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	20000050 	.word	0x20000050

080040dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	431a      	orrs	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	609a      	str	r2, [r3, #8]
}
 80040f6:	bf00      	nop
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004102:	b480      	push	{r7}
 8004104:	b083      	sub	sp, #12
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
 800410a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	431a      	orrs	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	609a      	str	r2, [r3, #8]
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004138:	4618      	mov	r0, r3
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004144:	b480      	push	{r7}
 8004146:	b087      	sub	sp, #28
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
 8004150:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	3360      	adds	r3, #96	; 0x60
 8004156:	461a      	mov	r2, r3
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4413      	add	r3, r2
 800415e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	430b      	orrs	r3, r1
 8004172:	431a      	orrs	r2, r3
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004178:	bf00      	nop
 800417a:	371c      	adds	r7, #28
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	f003 031f 	and.w	r3, r3, #31
 800419e:	6879      	ldr	r1, [r7, #4]
 80041a0:	fa01 f303 	lsl.w	r3, r1, r3
 80041a4:	431a      	orrs	r2, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	611a      	str	r2, [r3, #16]
}
 80041aa:	bf00      	nop
 80041ac:	3714      	adds	r7, #20
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80041b6:	b480      	push	{r7}
 80041b8:	b087      	sub	sp, #28
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	60f8      	str	r0, [r7, #12]
 80041be:	60b9      	str	r1, [r7, #8]
 80041c0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	3360      	adds	r3, #96	; 0x60
 80041c6:	461a      	mov	r2, r3
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4413      	add	r3, r2
 80041ce:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	431a      	orrs	r2, r3
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	601a      	str	r2, [r3, #0]
  }
}
 80041e0:	bf00      	nop
 80041e2:	371c      	adds	r7, #28
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d101      	bne.n	8004204 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004200:	2301      	movs	r3, #1
 8004202:	e000      	b.n	8004206 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr

08004212 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004212:	b480      	push	{r7}
 8004214:	b087      	sub	sp, #28
 8004216:	af00      	add	r7, sp, #0
 8004218:	60f8      	str	r0, [r7, #12]
 800421a:	60b9      	str	r1, [r7, #8]
 800421c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	3330      	adds	r3, #48	; 0x30
 8004222:	461a      	mov	r2, r3
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	0a1b      	lsrs	r3, r3, #8
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	f003 030c 	and.w	r3, r3, #12
 800422e:	4413      	add	r3, r2
 8004230:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	f003 031f 	and.w	r3, r3, #31
 800423c:	211f      	movs	r1, #31
 800423e:	fa01 f303 	lsl.w	r3, r1, r3
 8004242:	43db      	mvns	r3, r3
 8004244:	401a      	ands	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	0e9b      	lsrs	r3, r3, #26
 800424a:	f003 011f 	and.w	r1, r3, #31
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	f003 031f 	and.w	r3, r3, #31
 8004254:	fa01 f303 	lsl.w	r3, r1, r3
 8004258:	431a      	orrs	r2, r3
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800425e:	bf00      	nop
 8004260:	371c      	adds	r7, #28
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800426a:	b480      	push	{r7}
 800426c:	b083      	sub	sp, #12
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004276:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800427e:	2301      	movs	r3, #1
 8004280:	e000      	b.n	8004284 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004290:	b480      	push	{r7}
 8004292:	b087      	sub	sp, #28
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	3314      	adds	r3, #20
 80042a0:	461a      	mov	r2, r3
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	0e5b      	lsrs	r3, r3, #25
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	f003 0304 	and.w	r3, r3, #4
 80042ac:	4413      	add	r3, r2
 80042ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	0d1b      	lsrs	r3, r3, #20
 80042b8:	f003 031f 	and.w	r3, r3, #31
 80042bc:	2107      	movs	r1, #7
 80042be:	fa01 f303 	lsl.w	r3, r1, r3
 80042c2:	43db      	mvns	r3, r3
 80042c4:	401a      	ands	r2, r3
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	0d1b      	lsrs	r3, r3, #20
 80042ca:	f003 031f 	and.w	r3, r3, #31
 80042ce:	6879      	ldr	r1, [r7, #4]
 80042d0:	fa01 f303 	lsl.w	r3, r1, r3
 80042d4:	431a      	orrs	r2, r3
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80042da:	bf00      	nop
 80042dc:	371c      	adds	r7, #28
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
	...

080042e8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004300:	43db      	mvns	r3, r3
 8004302:	401a      	ands	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f003 0318 	and.w	r3, r3, #24
 800430a:	4908      	ldr	r1, [pc, #32]	; (800432c <LL_ADC_SetChannelSingleDiff+0x44>)
 800430c:	40d9      	lsrs	r1, r3
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	400b      	ands	r3, r1
 8004312:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004316:	431a      	orrs	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800431e:	bf00      	nop
 8004320:	3714      	adds	r7, #20
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	000fffff 	.word	0x000fffff

08004330 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f003 031f 	and.w	r3, r3, #31
}
 8004340:	4618      	mov	r0, r3
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 800435c:	4618      	mov	r0, r3
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	4b04      	ldr	r3, [pc, #16]	; (8004388 <LL_ADC_DisableDeepPowerDown+0x20>)
 8004376:	4013      	ands	r3, r2
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	6093      	str	r3, [r2, #8]
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr
 8004388:	5fffffc0 	.word	0x5fffffc0

0800438c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800439c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043a0:	d101      	bne.n	80043a6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80043a2:	2301      	movs	r3, #1
 80043a4:	e000      	b.n	80043a8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689a      	ldr	r2, [r3, #8]
 80043c0:	4b05      	ldr	r3, [pc, #20]	; (80043d8 <LL_ADC_EnableInternalRegulator+0x24>)
 80043c2:	4013      	ands	r3, r2
 80043c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	6fffffc0 	.word	0x6fffffc0

080043dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043f0:	d101      	bne.n	80043f6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80043f2:	2301      	movs	r3, #1
 80043f4:	e000      	b.n	80043f8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	689a      	ldr	r2, [r3, #8]
 8004410:	4b05      	ldr	r3, [pc, #20]	; (8004428 <LL_ADC_Enable+0x24>)
 8004412:	4013      	ands	r3, r2
 8004414:	f043 0201 	orr.w	r2, r3, #1
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr
 8004428:	7fffffc0 	.word	0x7fffffc0

0800442c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689a      	ldr	r2, [r3, #8]
 8004438:	4b05      	ldr	r3, [pc, #20]	; (8004450 <LL_ADC_Disable+0x24>)
 800443a:	4013      	ands	r3, r2
 800443c:	f043 0202 	orr.w	r2, r3, #2
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	7fffffc0 	.word	0x7fffffc0

08004454 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	2b01      	cmp	r3, #1
 8004466:	d101      	bne.n	800446c <LL_ADC_IsEnabled+0x18>
 8004468:	2301      	movs	r3, #1
 800446a:	e000      	b.n	800446e <LL_ADC_IsEnabled+0x1a>
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800447a:	b480      	push	{r7}
 800447c:	b083      	sub	sp, #12
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b02      	cmp	r3, #2
 800448c:	d101      	bne.n	8004492 <LL_ADC_IsDisableOngoing+0x18>
 800448e:	2301      	movs	r3, #1
 8004490:	e000      	b.n	8004494 <LL_ADC_IsDisableOngoing+0x1a>
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689a      	ldr	r2, [r3, #8]
 80044ac:	4b05      	ldr	r3, [pc, #20]	; (80044c4 <LL_ADC_REG_StartConversion+0x24>)
 80044ae:	4013      	ands	r3, r2
 80044b0:	f043 0204 	orr.w	r2, r3, #4
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr
 80044c4:	7fffffc0 	.word	0x7fffffc0

080044c8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	4b05      	ldr	r3, [pc, #20]	; (80044ec <LL_ADC_REG_StopConversion+0x24>)
 80044d6:	4013      	ands	r3, r2
 80044d8:	f043 0210 	orr.w	r2, r3, #16
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr
 80044ec:	7fffffc0 	.word	0x7fffffc0

080044f0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f003 0304 	and.w	r3, r3, #4
 8004500:	2b04      	cmp	r3, #4
 8004502:	d101      	bne.n	8004508 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004504:	2301      	movs	r3, #1
 8004506:	e000      	b.n	800450a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	370c      	adds	r7, #12
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
	...

08004518 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689a      	ldr	r2, [r3, #8]
 8004524:	4b05      	ldr	r3, [pc, #20]	; (800453c <LL_ADC_INJ_StopConversion+0x24>)
 8004526:	4013      	ands	r3, r2
 8004528:	f043 0220 	orr.w	r2, r3, #32
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	7fffffc0 	.word	0x7fffffc0

08004540 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f003 0308 	and.w	r3, r3, #8
 8004550:	2b08      	cmp	r3, #8
 8004552:	d101      	bne.n	8004558 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004554:	2301      	movs	r3, #1
 8004556:	e000      	b.n	800455a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	370c      	adds	r7, #12
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
	...

08004568 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004568:	b590      	push	{r4, r7, lr}
 800456a:	b089      	sub	sp, #36	; 0x24
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004570:	2300      	movs	r3, #0
 8004572:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004574:	2300      	movs	r3, #0
 8004576:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e138      	b.n	80047f4 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800458c:	2b00      	cmp	r3, #0
 800458e:	d109      	bne.n	80045a4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f7fe fe35 	bl	8003200 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7ff feef 	bl	800438c <LL_ADC_IsDeepPowerDownEnabled>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d004      	beq.n	80045be <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7ff fed5 	bl	8004368 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7ff ff0a 	bl	80043dc <LL_ADC_IsInternalRegulatorEnabled>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d114      	bne.n	80045f8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7ff feee 	bl	80043b4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045d8:	4b88      	ldr	r3, [pc, #544]	; (80047fc <HAL_ADC_Init+0x294>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	099b      	lsrs	r3, r3, #6
 80045de:	4a88      	ldr	r2, [pc, #544]	; (8004800 <HAL_ADC_Init+0x298>)
 80045e0:	fba2 2303 	umull	r2, r3, r2, r3
 80045e4:	099b      	lsrs	r3, r3, #6
 80045e6:	3301      	adds	r3, #1
 80045e8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80045ea:	e002      	b.n	80045f2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	3b01      	subs	r3, #1
 80045f0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1f9      	bne.n	80045ec <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7ff feed 	bl	80043dc <LL_ADC_IsInternalRegulatorEnabled>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10d      	bne.n	8004624 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800460c:	f043 0210 	orr.w	r2, r3, #16
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004618:	f043 0201 	orr.w	r2, r3, #1
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4618      	mov	r0, r3
 800462a:	f7ff ff61 	bl	80044f0 <LL_ADC_REG_IsConversionOngoing>
 800462e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004634:	f003 0310 	and.w	r3, r3, #16
 8004638:	2b00      	cmp	r3, #0
 800463a:	f040 80d2 	bne.w	80047e2 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	2b00      	cmp	r3, #0
 8004642:	f040 80ce 	bne.w	80047e2 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800464a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800464e:	f043 0202 	orr.w	r2, r3, #2
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4618      	mov	r0, r3
 800465c:	f7ff fefa 	bl	8004454 <LL_ADC_IsEnabled>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d110      	bne.n	8004688 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004666:	4867      	ldr	r0, [pc, #412]	; (8004804 <HAL_ADC_Init+0x29c>)
 8004668:	f7ff fef4 	bl	8004454 <LL_ADC_IsEnabled>
 800466c:	4604      	mov	r4, r0
 800466e:	4866      	ldr	r0, [pc, #408]	; (8004808 <HAL_ADC_Init+0x2a0>)
 8004670:	f7ff fef0 	bl	8004454 <LL_ADC_IsEnabled>
 8004674:	4603      	mov	r3, r0
 8004676:	4323      	orrs	r3, r4
 8004678:	2b00      	cmp	r3, #0
 800467a:	d105      	bne.n	8004688 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	4619      	mov	r1, r3
 8004682:	4862      	ldr	r0, [pc, #392]	; (800480c <HAL_ADC_Init+0x2a4>)
 8004684:	f7ff fd2a 	bl	80040dc <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	7d5b      	ldrb	r3, [r3, #21]
 800468c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004692:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8004698:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	7f1b      	ldrb	r3, [r3, #28]
 800469e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80046a0:	4313      	orrs	r3, r2
 80046a2:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	7f1b      	ldrb	r3, [r3, #28]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d106      	bne.n	80046ba <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a1b      	ldr	r3, [r3, #32]
 80046b0:	3b01      	subs	r3, #1
 80046b2:	045b      	lsls	r3, r3, #17
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d009      	beq.n	80046d6 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ce:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68da      	ldr	r2, [r3, #12]
 80046dc:	4b4c      	ldr	r3, [pc, #304]	; (8004810 <HAL_ADC_Init+0x2a8>)
 80046de:	4013      	ands	r3, r2
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	6812      	ldr	r2, [r2, #0]
 80046e4:	69b9      	ldr	r1, [r7, #24]
 80046e6:	430b      	orrs	r3, r1
 80046e8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7ff fefe 	bl	80044f0 <LL_ADC_REG_IsConversionOngoing>
 80046f4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7ff ff20 	bl	8004540 <LL_ADC_INJ_IsConversionOngoing>
 8004700:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d14a      	bne.n	800479e <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d147      	bne.n	800479e <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	7d1b      	ldrb	r3, [r3, #20]
 8004712:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8004718:	4313      	orrs	r3, r2
 800471a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68da      	ldr	r2, [r3, #12]
 8004722:	4b3c      	ldr	r3, [pc, #240]	; (8004814 <HAL_ADC_Init+0x2ac>)
 8004724:	4013      	ands	r3, r2
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	6812      	ldr	r2, [r2, #0]
 800472a:	69b9      	ldr	r1, [r7, #24]
 800472c:	430b      	orrs	r3, r1
 800472e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004736:	2b01      	cmp	r3, #1
 8004738:	d11b      	bne.n	8004772 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	691a      	ldr	r2, [r3, #16]
 8004746:	4b34      	ldr	r3, [pc, #208]	; (8004818 <HAL_ADC_Init+0x2b0>)
 8004748:	4013      	ands	r3, r2
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800474e:	3a01      	subs	r2, #1
 8004750:	0411      	lsls	r1, r2, #16
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004756:	4311      	orrs	r1, r2
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800475c:	4311      	orrs	r1, r2
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004762:	430a      	orrs	r2, r1
 8004764:	431a      	orrs	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f042 0201 	orr.w	r2, r2, #1
 800476e:	611a      	str	r2, [r3, #16]
 8004770:	e007      	b.n	8004782 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	691a      	ldr	r2, [r3, #16]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f022 0201 	bic.w	r2, r2, #1
 8004780:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f001 f9f5 	bl	8005b88 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d10c      	bne.n	80047c0 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ac:	f023 010f 	bic.w	r1, r3, #15
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	1e5a      	subs	r2, r3, #1
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	631a      	str	r2, [r3, #48]	; 0x30
 80047be:	e007      	b.n	80047d0 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f022 020f 	bic.w	r2, r2, #15
 80047ce:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d4:	f023 0303 	bic.w	r3, r3, #3
 80047d8:	f043 0201 	orr.w	r2, r3, #1
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	655a      	str	r2, [r3, #84]	; 0x54
 80047e0:	e007      	b.n	80047f2 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e6:	f043 0210 	orr.w	r2, r3, #16
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80047f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3724      	adds	r7, #36	; 0x24
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd90      	pop	{r4, r7, pc}
 80047fc:	20000044 	.word	0x20000044
 8004800:	053e2d63 	.word	0x053e2d63
 8004804:	40022000 	.word	0x40022000
 8004808:	40022100 	.word	0x40022100
 800480c:	40022300 	.word	0x40022300
 8004810:	fff0c003 	.word	0xfff0c003
 8004814:	ffffbffc 	.word	0xffffbffc
 8004818:	fc00f81e 	.word	0xfc00f81e

0800481c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b086      	sub	sp, #24
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004824:	4856      	ldr	r0, [pc, #344]	; (8004980 <HAL_ADC_Start+0x164>)
 8004826:	f7ff fd83 	bl	8004330 <LL_ADC_GetMultimode>
 800482a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4618      	mov	r0, r3
 8004832:	f7ff fe5d 	bl	80044f0 <LL_ADC_REG_IsConversionOngoing>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	f040 809a 	bne.w	8004972 <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004844:	2b01      	cmp	r3, #1
 8004846:	d101      	bne.n	800484c <HAL_ADC_Start+0x30>
 8004848:	2302      	movs	r3, #2
 800484a:	e095      	b.n	8004978 <HAL_ADC_Start+0x15c>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f001 f8bb 	bl	80059d0 <ADC_Enable>
 800485a:	4603      	mov	r3, r0
 800485c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800485e:	7dfb      	ldrb	r3, [r7, #23]
 8004860:	2b00      	cmp	r3, #0
 8004862:	f040 8081 	bne.w	8004968 <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800486a:	4b46      	ldr	r3, [pc, #280]	; (8004984 <HAL_ADC_Start+0x168>)
 800486c:	4013      	ands	r3, r2
 800486e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a43      	ldr	r2, [pc, #268]	; (8004988 <HAL_ADC_Start+0x16c>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d002      	beq.n	8004886 <HAL_ADC_Start+0x6a>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	e000      	b.n	8004888 <HAL_ADC_Start+0x6c>
 8004886:	4b41      	ldr	r3, [pc, #260]	; (800498c <HAL_ADC_Start+0x170>)
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	6812      	ldr	r2, [r2, #0]
 800488c:	4293      	cmp	r3, r2
 800488e:	d002      	beq.n	8004896 <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d105      	bne.n	80048a2 <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800489a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ae:	d106      	bne.n	80048be <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048b4:	f023 0206 	bic.w	r2, r3, #6
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	659a      	str	r2, [r3, #88]	; 0x58
 80048bc:	e002      	b.n	80048c4 <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	221c      	movs	r2, #28
 80048ca:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a2b      	ldr	r2, [pc, #172]	; (8004988 <HAL_ADC_Start+0x16c>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d002      	beq.n	80048e4 <HAL_ADC_Start+0xc8>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	e000      	b.n	80048e6 <HAL_ADC_Start+0xca>
 80048e4:	4b29      	ldr	r3, [pc, #164]	; (800498c <HAL_ADC_Start+0x170>)
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	6812      	ldr	r2, [r2, #0]
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d008      	beq.n	8004900 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d005      	beq.n	8004900 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	2b05      	cmp	r3, #5
 80048f8:	d002      	beq.n	8004900 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	2b09      	cmp	r3, #9
 80048fe:	d114      	bne.n	800492a <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d007      	beq.n	800491e <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004912:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004916:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4618      	mov	r0, r3
 8004924:	f7ff fdbc 	bl	80044a0 <LL_ADC_REG_StartConversion>
 8004928:	e025      	b.n	8004976 <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800492e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a13      	ldr	r2, [pc, #76]	; (8004988 <HAL_ADC_Start+0x16c>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d002      	beq.n	8004946 <HAL_ADC_Start+0x12a>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	e000      	b.n	8004948 <HAL_ADC_Start+0x12c>
 8004946:	4b11      	ldr	r3, [pc, #68]	; (800498c <HAL_ADC_Start+0x170>)
 8004948:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00f      	beq.n	8004976 <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800495a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800495e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	655a      	str	r2, [r3, #84]	; 0x54
 8004966:	e006      	b.n	8004976 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004970:	e001      	b.n	8004976 <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004972:	2302      	movs	r3, #2
 8004974:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004976:	7dfb      	ldrb	r3, [r7, #23]
}
 8004978:	4618      	mov	r0, r3
 800497a:	3718      	adds	r7, #24
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	40022300 	.word	0x40022300
 8004984:	fffff0fe 	.word	0xfffff0fe
 8004988:	40022100 	.word	0x40022100
 800498c:	40022000 	.word	0x40022000

08004990 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b088      	sub	sp, #32
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800499a:	4866      	ldr	r0, [pc, #408]	; (8004b34 <HAL_ADC_PollForConversion+0x1a4>)
 800499c:	f7ff fcc8 	bl	8004330 <LL_ADC_GetMultimode>
 80049a0:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	2b08      	cmp	r3, #8
 80049a8:	d102      	bne.n	80049b0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80049aa:	2308      	movs	r3, #8
 80049ac:	61fb      	str	r3, [r7, #28]
 80049ae:	e02a      	b.n	8004a06 <HAL_ADC_PollForConversion+0x76>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d005      	beq.n	80049c2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	2b05      	cmp	r3, #5
 80049ba:	d002      	beq.n	80049c2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	2b09      	cmp	r3, #9
 80049c0:	d111      	bne.n	80049e6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	f003 0301 	and.w	r3, r3, #1
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d007      	beq.n	80049e0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d4:	f043 0220 	orr.w	r2, r3, #32
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e0a4      	b.n	8004b2a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80049e0:	2304      	movs	r3, #4
 80049e2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80049e4:	e00f      	b.n	8004a06 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80049e6:	4853      	ldr	r0, [pc, #332]	; (8004b34 <HAL_ADC_PollForConversion+0x1a4>)
 80049e8:	f7ff fcb0 	bl	800434c <LL_ADC_GetMultiDMATransfer>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d007      	beq.n	8004a02 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f6:	f043 0220 	orr.w	r2, r3, #32
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e093      	b.n	8004b2a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004a02:	2304      	movs	r3, #4
 8004a04:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004a06:	f7ff fb39 	bl	800407c <HAL_GetTick>
 8004a0a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004a0c:	e021      	b.n	8004a52 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a14:	d01d      	beq.n	8004a52 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004a16:	f7ff fb31 	bl	800407c <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	683a      	ldr	r2, [r7, #0]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d302      	bcc.n	8004a2c <HAL_ADC_PollForConversion+0x9c>
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d112      	bne.n	8004a52 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	4013      	ands	r3, r2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d10b      	bne.n	8004a52 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a3e:	f043 0204 	orr.w	r2, r3, #4
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e06b      	b.n	8004b2a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d0d6      	beq.n	8004a0e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a64:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4618      	mov	r0, r3
 8004a72:	f7ff fbbb 	bl	80041ec <LL_ADC_REG_IsTriggerSourceSWStart>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d01c      	beq.n	8004ab6 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	7d5b      	ldrb	r3, [r3, #21]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d118      	bne.n	8004ab6 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0308 	and.w	r3, r3, #8
 8004a8e:	2b08      	cmp	r3, #8
 8004a90:	d111      	bne.n	8004ab6 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d105      	bne.n	8004ab6 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aae:	f043 0201 	orr.w	r2, r3, #1
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a1f      	ldr	r2, [pc, #124]	; (8004b38 <HAL_ADC_PollForConversion+0x1a8>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d002      	beq.n	8004ac6 <HAL_ADC_PollForConversion+0x136>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	e000      	b.n	8004ac8 <HAL_ADC_PollForConversion+0x138>
 8004ac6:	4b1d      	ldr	r3, [pc, #116]	; (8004b3c <HAL_ADC_PollForConversion+0x1ac>)
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	6812      	ldr	r2, [r2, #0]
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d008      	beq.n	8004ae2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d005      	beq.n	8004ae2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	2b05      	cmp	r3, #5
 8004ada:	d002      	beq.n	8004ae2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	2b09      	cmp	r3, #9
 8004ae0:	d104      	bne.n	8004aec <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	61bb      	str	r3, [r7, #24]
 8004aea:	e00c      	b.n	8004b06 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a11      	ldr	r2, [pc, #68]	; (8004b38 <HAL_ADC_PollForConversion+0x1a8>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d002      	beq.n	8004afc <HAL_ADC_PollForConversion+0x16c>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	e000      	b.n	8004afe <HAL_ADC_PollForConversion+0x16e>
 8004afc:	4b0f      	ldr	r3, [pc, #60]	; (8004b3c <HAL_ADC_PollForConversion+0x1ac>)
 8004afe:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	2b08      	cmp	r3, #8
 8004b0a:	d104      	bne.n	8004b16 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2208      	movs	r2, #8
 8004b12:	601a      	str	r2, [r3, #0]
 8004b14:	e008      	b.n	8004b28 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d103      	bne.n	8004b28 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	220c      	movs	r2, #12
 8004b26:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3720      	adds	r7, #32
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	40022300 	.word	0x40022300
 8004b38:	40022100 	.word	0x40022100
 8004b3c:	40022000 	.word	0x40022000

08004b40 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b086      	sub	sp, #24
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b48:	4890      	ldr	r0, [pc, #576]	; (8004d8c <HAL_ADC_Start_IT+0x24c>)
 8004b4a:	f7ff fbf1 	bl	8004330 <LL_ADC_GetMultimode>
 8004b4e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7ff fccb 	bl	80044f0 <LL_ADC_REG_IsConversionOngoing>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f040 810e 	bne.w	8004d7e <HAL_ADC_Start_IT+0x23e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d101      	bne.n	8004b70 <HAL_ADC_Start_IT+0x30>
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	e109      	b.n	8004d84 <HAL_ADC_Start_IT+0x244>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 ff29 	bl	80059d0 <ADC_Enable>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004b82:	7dfb      	ldrb	r3, [r7, #23]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f040 80f5 	bne.w	8004d74 <HAL_ADC_Start_IT+0x234>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b8e:	4b80      	ldr	r3, [pc, #512]	; (8004d90 <HAL_ADC_Start_IT+0x250>)
 8004b90:	4013      	ands	r3, r2
 8004b92:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a7d      	ldr	r2, [pc, #500]	; (8004d94 <HAL_ADC_Start_IT+0x254>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d002      	beq.n	8004baa <HAL_ADC_Start_IT+0x6a>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	e000      	b.n	8004bac <HAL_ADC_Start_IT+0x6c>
 8004baa:	4b7b      	ldr	r3, [pc, #492]	; (8004d98 <HAL_ADC_Start_IT+0x258>)
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6812      	ldr	r2, [r2, #0]
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d002      	beq.n	8004bba <HAL_ADC_Start_IT+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d105      	bne.n	8004bc6 <HAL_ADC_Start_IT+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bbe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d006      	beq.n	8004be0 <HAL_ADC_Start_IT+0xa0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd6:	f023 0206 	bic.w	r2, r3, #6
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	659a      	str	r2, [r3, #88]	; 0x58
 8004bde:	e002      	b.n	8004be6 <HAL_ADC_Start_IT+0xa6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	221c      	movs	r2, #28
 8004bec:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 021c 	bic.w	r2, r2, #28
 8004c04:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	2b08      	cmp	r3, #8
 8004c0c:	d108      	bne.n	8004c20 <HAL_ADC_Start_IT+0xe0>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f042 0208 	orr.w	r2, r2, #8
 8004c1c:	605a      	str	r2, [r3, #4]
          break;
 8004c1e:	e008      	b.n	8004c32 <HAL_ADC_Start_IT+0xf2>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685a      	ldr	r2, [r3, #4]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f042 0204 	orr.w	r2, r2, #4
 8004c2e:	605a      	str	r2, [r3, #4]
          break;
 8004c30:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d107      	bne.n	8004c4a <HAL_ADC_Start_IT+0x10a>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	685a      	ldr	r2, [r3, #4]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f042 0210 	orr.w	r2, r2, #16
 8004c48:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a51      	ldr	r2, [pc, #324]	; (8004d94 <HAL_ADC_Start_IT+0x254>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d002      	beq.n	8004c5a <HAL_ADC_Start_IT+0x11a>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	e000      	b.n	8004c5c <HAL_ADC_Start_IT+0x11c>
 8004c5a:	4b4f      	ldr	r3, [pc, #316]	; (8004d98 <HAL_ADC_Start_IT+0x258>)
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	6812      	ldr	r2, [r2, #0]
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d008      	beq.n	8004c76 <HAL_ADC_Start_IT+0x136>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d005      	beq.n	8004c76 <HAL_ADC_Start_IT+0x136>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	2b05      	cmp	r3, #5
 8004c6e:	d002      	beq.n	8004c76 <HAL_ADC_Start_IT+0x136>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	2b09      	cmp	r3, #9
 8004c74:	d13a      	bne.n	8004cec <HAL_ADC_Start_IT+0x1ac>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d02d      	beq.n	8004ce0 <HAL_ADC_Start_IT+0x1a0>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c88:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004c8c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	2b08      	cmp	r3, #8
 8004c9a:	d110      	bne.n	8004cbe <HAL_ADC_Start_IT+0x17e>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	685a      	ldr	r2, [r3, #4]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f022 0220 	bic.w	r2, r2, #32
 8004caa:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685a      	ldr	r2, [r3, #4]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cba:	605a      	str	r2, [r3, #4]
              break;
 8004cbc:	e010      	b.n	8004ce0 <HAL_ADC_Start_IT+0x1a0>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	685a      	ldr	r2, [r3, #4]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ccc:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f042 0220 	orr.w	r2, r2, #32
 8004cdc:	605a      	str	r2, [r3, #4]
              break;
 8004cde:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7ff fbdb 	bl	80044a0 <LL_ADC_REG_StartConversion>
 8004cea:	e04a      	b.n	8004d82 <HAL_ADC_Start_IT+0x242>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a25      	ldr	r2, [pc, #148]	; (8004d94 <HAL_ADC_Start_IT+0x254>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d002      	beq.n	8004d08 <HAL_ADC_Start_IT+0x1c8>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	e000      	b.n	8004d0a <HAL_ADC_Start_IT+0x1ca>
 8004d08:	4b23      	ldr	r3, [pc, #140]	; (8004d98 <HAL_ADC_Start_IT+0x258>)
 8004d0a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d034      	beq.n	8004d82 <HAL_ADC_Start_IT+0x242>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d1c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004d20:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	2b08      	cmp	r3, #8
 8004d2e:	d110      	bne.n	8004d52 <HAL_ADC_Start_IT+0x212>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	685a      	ldr	r2, [r3, #4]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f022 0220 	bic.w	r2, r2, #32
 8004d3e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685a      	ldr	r2, [r3, #4]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d4e:	605a      	str	r2, [r3, #4]
              break;
 8004d50:	e017      	b.n	8004d82 <HAL_ADC_Start_IT+0x242>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d60:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	685a      	ldr	r2, [r3, #4]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f042 0220 	orr.w	r2, r2, #32
 8004d70:	605a      	str	r2, [r3, #4]
              break;
 8004d72:	e006      	b.n	8004d82 <HAL_ADC_Start_IT+0x242>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004d7c:	e001      	b.n	8004d82 <HAL_ADC_Start_IT+0x242>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004d7e:	2302      	movs	r3, #2
 8004d80:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004d82:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3718      	adds	r7, #24
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	40022300 	.word	0x40022300
 8004d90:	fffff0fe 	.word	0xfffff0fe
 8004d94:	40022100 	.word	0x40022100
 8004d98:	40022000 	.word	0x40022000

08004d9c <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d101      	bne.n	8004db2 <HAL_ADC_Stop_IT+0x16>
 8004dae:	2302      	movs	r3, #2
 8004db0:	e029      	b.n	8004e06 <HAL_ADC_Stop_IT+0x6a>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004dba:	2103      	movs	r1, #3
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 fd4b 	bl	8005858 <ADC_ConversionStop>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004dc6:	7bfb      	ldrb	r3, [r7, #15]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d117      	bne.n	8004dfc <HAL_ADC_Stop_IT+0x60>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f022 021c 	bic.w	r2, r2, #28
 8004dda:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 fe73 	bl	8005ac8 <ADC_Disable>
 8004de2:	4603      	mov	r3, r0
 8004de4:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004de6:	7bfb      	ldrb	r3, [r7, #15]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d107      	bne.n	8004dfc <HAL_ADC_Stop_IT+0x60>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004df0:	4b07      	ldr	r3, [pc, #28]	; (8004e10 <HAL_ADC_Stop_IT+0x74>)
 8004df2:	4013      	ands	r3, r2
 8004df4:	f043 0201 	orr.w	r2, r3, #1
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3710      	adds	r7, #16
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	ffffeefe 	.word	0xffffeefe

08004e14 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
	...

08004e30 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b08a      	sub	sp, #40	; 0x28
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004e38:	2300      	movs	r3, #0
 8004e3a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004e4c:	4882      	ldr	r0, [pc, #520]	; (8005058 <HAL_ADC_IRQHandler+0x228>)
 8004e4e:	f7ff fa6f 	bl	8004330 <LL_ADC_GetMultimode>
 8004e52:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d017      	beq.n	8004e8e <HAL_ADC_IRQHandler+0x5e>
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	f003 0302 	and.w	r3, r3, #2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d012      	beq.n	8004e8e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e6c:	f003 0310 	and.w	r3, r3, #16
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d105      	bne.n	8004e80 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e78:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 ff9d 	bl	8005dc0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	f003 0304 	and.w	r3, r3, #4
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d004      	beq.n	8004ea2 <HAL_ADC_IRQHandler+0x72>
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	f003 0304 	and.w	r3, r3, #4
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10a      	bne.n	8004eb8 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f000 8083 	beq.w	8004fb4 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	f003 0308 	and.w	r3, r3, #8
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d07d      	beq.n	8004fb4 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ebc:	f003 0310 	and.w	r3, r3, #16
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d105      	bne.n	8004ed0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7ff f989 	bl	80041ec <LL_ADC_REG_IsTriggerSourceSWStart>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d062      	beq.n	8004fa6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a5d      	ldr	r2, [pc, #372]	; (800505c <HAL_ADC_IRQHandler+0x22c>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d002      	beq.n	8004ef0 <HAL_ADC_IRQHandler+0xc0>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	e000      	b.n	8004ef2 <HAL_ADC_IRQHandler+0xc2>
 8004ef0:	4b5b      	ldr	r3, [pc, #364]	; (8005060 <HAL_ADC_IRQHandler+0x230>)
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	6812      	ldr	r2, [r2, #0]
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d008      	beq.n	8004f0c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d005      	beq.n	8004f0c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	2b05      	cmp	r3, #5
 8004f04:	d002      	beq.n	8004f0c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	2b09      	cmp	r3, #9
 8004f0a:	d104      	bne.n	8004f16 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	623b      	str	r3, [r7, #32]
 8004f14:	e00c      	b.n	8004f30 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a50      	ldr	r2, [pc, #320]	; (800505c <HAL_ADC_IRQHandler+0x22c>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d002      	beq.n	8004f26 <HAL_ADC_IRQHandler+0xf6>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	e000      	b.n	8004f28 <HAL_ADC_IRQHandler+0xf8>
 8004f26:	4b4e      	ldr	r3, [pc, #312]	; (8005060 <HAL_ADC_IRQHandler+0x230>)
 8004f28:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004f30:	6a3b      	ldr	r3, [r7, #32]
 8004f32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d135      	bne.n	8004fa6 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0308 	and.w	r3, r3, #8
 8004f44:	2b08      	cmp	r3, #8
 8004f46:	d12e      	bne.n	8004fa6 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f7ff facf 	bl	80044f0 <LL_ADC_REG_IsConversionOngoing>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d11a      	bne.n	8004f8e <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	685a      	ldr	r2, [r3, #4]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f022 020c 	bic.w	r2, r2, #12
 8004f66:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d112      	bne.n	8004fa6 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f84:	f043 0201 	orr.w	r2, r3, #1
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	655a      	str	r2, [r3, #84]	; 0x54
 8004f8c:	e00b      	b.n	8004fa6 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f92:	f043 0210 	orr.w	r2, r3, #16
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f9e:	f043 0201 	orr.w	r2, r3, #1
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f7fb fd6a 	bl	8000a80 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	220c      	movs	r2, #12
 8004fb2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	f003 0320 	and.w	r3, r3, #32
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d004      	beq.n	8004fc8 <HAL_ADC_IRQHandler+0x198>
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	f003 0320 	and.w	r3, r3, #32
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d10b      	bne.n	8004fe0 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f000 809f 	beq.w	8005112 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f000 8099 	beq.w	8005112 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe4:	f003 0310 	and.w	r3, r3, #16
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d105      	bne.n	8004ff8 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ff0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f7ff f934 	bl	800426a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005002:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4618      	mov	r0, r3
 800500a:	f7ff f8ef 	bl	80041ec <LL_ADC_REG_IsTriggerSourceSWStart>
 800500e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a11      	ldr	r2, [pc, #68]	; (800505c <HAL_ADC_IRQHandler+0x22c>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d002      	beq.n	8005020 <HAL_ADC_IRQHandler+0x1f0>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	e000      	b.n	8005022 <HAL_ADC_IRQHandler+0x1f2>
 8005020:	4b0f      	ldr	r3, [pc, #60]	; (8005060 <HAL_ADC_IRQHandler+0x230>)
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	6812      	ldr	r2, [r2, #0]
 8005026:	4293      	cmp	r3, r2
 8005028:	d008      	beq.n	800503c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d005      	beq.n	800503c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	2b06      	cmp	r3, #6
 8005034:	d002      	beq.n	800503c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	2b07      	cmp	r3, #7
 800503a:	d104      	bne.n	8005046 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	623b      	str	r3, [r7, #32]
 8005044:	e013      	b.n	800506e <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a04      	ldr	r2, [pc, #16]	; (800505c <HAL_ADC_IRQHandler+0x22c>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d009      	beq.n	8005064 <HAL_ADC_IRQHandler+0x234>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	e007      	b.n	8005066 <HAL_ADC_IRQHandler+0x236>
 8005056:	bf00      	nop
 8005058:	40022300 	.word	0x40022300
 800505c:	40022100 	.word	0x40022100
 8005060:	40022000 	.word	0x40022000
 8005064:	4b7d      	ldr	r3, [pc, #500]	; (800525c <HAL_ADC_IRQHandler+0x42c>)
 8005066:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d047      	beq.n	8005104 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005074:	6a3b      	ldr	r3, [r7, #32]
 8005076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d007      	beq.n	800508e <HAL_ADC_IRQHandler+0x25e>
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d03f      	beq.n	8005104 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005084:	6a3b      	ldr	r3, [r7, #32]
 8005086:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800508a:	2b00      	cmp	r3, #0
 800508c:	d13a      	bne.n	8005104 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005098:	2b40      	cmp	r3, #64	; 0x40
 800509a:	d133      	bne.n	8005104 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800509c:	6a3b      	ldr	r3, [r7, #32]
 800509e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d12e      	bne.n	8005104 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7ff fa48 	bl	8004540 <LL_ADC_INJ_IsConversionOngoing>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d11a      	bne.n	80050ec <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80050c4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d112      	bne.n	8005104 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e2:	f043 0201 	orr.w	r2, r3, #1
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	655a      	str	r2, [r3, #84]	; 0x54
 80050ea:	e00b      	b.n	8005104 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f0:	f043 0210 	orr.w	r2, r3, #16
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050fc:	f043 0201 	orr.w	r2, r3, #1
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 fe33 	bl	8005d70 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2260      	movs	r2, #96	; 0x60
 8005110:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005118:	2b00      	cmp	r3, #0
 800511a:	d011      	beq.n	8005140 <HAL_ADC_IRQHandler+0x310>
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00c      	beq.n	8005140 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800512a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 f896 	bl	8005264 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2280      	movs	r2, #128	; 0x80
 800513e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005146:	2b00      	cmp	r3, #0
 8005148:	d012      	beq.n	8005170 <HAL_ADC_IRQHandler+0x340>
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00d      	beq.n	8005170 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005158:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 fe19 	bl	8005d98 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800516e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005176:	2b00      	cmp	r3, #0
 8005178:	d012      	beq.n	80051a0 <HAL_ADC_IRQHandler+0x370>
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00d      	beq.n	80051a0 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005188:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 fe0b 	bl	8005dac <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800519e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	f003 0310 	and.w	r3, r3, #16
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d036      	beq.n	8005218 <HAL_ADC_IRQHandler+0x3e8>
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	f003 0310 	and.w	r3, r3, #16
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d031      	beq.n	8005218 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d102      	bne.n	80051c2 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 80051bc:	2301      	movs	r3, #1
 80051be:	627b      	str	r3, [r7, #36]	; 0x24
 80051c0:	e014      	b.n	80051ec <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d008      	beq.n	80051da <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80051c8:	4825      	ldr	r0, [pc, #148]	; (8005260 <HAL_ADC_IRQHandler+0x430>)
 80051ca:	f7ff f8bf 	bl	800434c <LL_ADC_GetMultiDMATransfer>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00b      	beq.n	80051ec <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80051d4:	2301      	movs	r3, #1
 80051d6:	627b      	str	r3, [r7, #36]	; 0x24
 80051d8:	e008      	b.n	80051ec <HAL_ADC_IRQHandler+0x3bc>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	f003 0303 	and.w	r3, r3, #3
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d001      	beq.n	80051ec <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80051e8:	2301      	movs	r3, #1
 80051ea:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80051ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d10e      	bne.n	8005210 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051f6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005202:	f043 0202 	orr.w	r2, r3, #2
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 f834 	bl	8005278 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2210      	movs	r2, #16
 8005216:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800521e:	2b00      	cmp	r3, #0
 8005220:	d018      	beq.n	8005254 <HAL_ADC_IRQHandler+0x424>
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005228:	2b00      	cmp	r3, #0
 800522a:	d013      	beq.n	8005254 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005230:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800523c:	f043 0208 	orr.w	r2, r3, #8
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800524c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 fd98 	bl	8005d84 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8005254:	bf00      	nop
 8005256:	3728      	adds	r7, #40	; 0x28
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	40022000 	.word	0x40022000
 8005260:	40022300 	.word	0x40022300

08005264 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800526c:	bf00      	nop
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005280:	bf00      	nop
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800528c:	b590      	push	{r4, r7, lr}
 800528e:	b0a1      	sub	sp, #132	; 0x84
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005296:	2300      	movs	r3, #0
 8005298:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800529c:	2300      	movs	r3, #0
 800529e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	4a9a      	ldr	r2, [pc, #616]	; (8005510 <HAL_ADC_ConfigChannel+0x284>)
 80052a6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d101      	bne.n	80052b6 <HAL_ADC_ConfigChannel+0x2a>
 80052b2:	2302      	movs	r3, #2
 80052b4:	e2bc      	b.n	8005830 <HAL_ADC_ConfigChannel+0x5a4>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2201      	movs	r2, #1
 80052ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7ff f914 	bl	80044f0 <LL_ADC_REG_IsConversionOngoing>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f040 82a1 	bne.w	8005812 <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d108      	bne.n	80052ee <HAL_ADC_ConfigChannel+0x62>
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	0e9b      	lsrs	r3, r3, #26
 80052e2:	f003 031f 	and.w	r3, r3, #31
 80052e6:	2201      	movs	r2, #1
 80052e8:	fa02 f303 	lsl.w	r3, r2, r3
 80052ec:	e016      	b.n	800531c <HAL_ADC_ConfigChannel+0x90>
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052f6:	fa93 f3a3 	rbit	r3, r3
 80052fa:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80052fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052fe:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005300:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005302:	2b00      	cmp	r3, #0
 8005304:	d101      	bne.n	800530a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8005306:	2320      	movs	r3, #32
 8005308:	e003      	b.n	8005312 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800530a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800530c:	fab3 f383 	clz	r3, r3
 8005310:	b2db      	uxtb	r3, r3
 8005312:	f003 031f 	and.w	r3, r3, #31
 8005316:	2201      	movs	r2, #1
 8005318:	fa02 f303 	lsl.w	r3, r2, r3
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	6812      	ldr	r2, [r2, #0]
 8005320:	69d1      	ldr	r1, [r2, #28]
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	6812      	ldr	r2, [r2, #0]
 8005326:	430b      	orrs	r3, r1
 8005328:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6818      	ldr	r0, [r3, #0]
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	6859      	ldr	r1, [r3, #4]
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	461a      	mov	r2, r3
 8005338:	f7fe ff6b 	bl	8004212 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4618      	mov	r0, r3
 8005342:	f7ff f8d5 	bl	80044f0 <LL_ADC_REG_IsConversionOngoing>
 8005346:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4618      	mov	r0, r3
 800534e:	f7ff f8f7 	bl	8004540 <LL_ADC_INJ_IsConversionOngoing>
 8005352:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005354:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005356:	2b00      	cmp	r3, #0
 8005358:	f040 80a0 	bne.w	800549c <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800535c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800535e:	2b00      	cmp	r3, #0
 8005360:	f040 809c 	bne.w	800549c <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6818      	ldr	r0, [r3, #0]
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	6819      	ldr	r1, [r3, #0]
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	461a      	mov	r2, r3
 8005372:	f7fe ff8d 	bl	8004290 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	f003 0310 	and.w	r3, r3, #16
 8005380:	2b00      	cmp	r3, #0
 8005382:	d10b      	bne.n	800539c <HAL_ADC_ConfigChannel+0x110>
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	695a      	ldr	r2, [r3, #20]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	089b      	lsrs	r3, r3, #2
 8005390:	f003 0307 	and.w	r3, r3, #7
 8005394:	005b      	lsls	r3, r3, #1
 8005396:	fa02 f303 	lsl.w	r3, r2, r3
 800539a:	e00a      	b.n	80053b2 <HAL_ADC_ConfigChannel+0x126>
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	695a      	ldr	r2, [r3, #20]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	089b      	lsrs	r3, r3, #2
 80053a8:	f003 0304 	and.w	r3, r3, #4
 80053ac:	005b      	lsls	r3, r3, #1
 80053ae:	fa02 f303 	lsl.w	r3, r2, r3
 80053b2:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	2b04      	cmp	r3, #4
 80053ba:	d027      	beq.n	800540c <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6818      	ldr	r0, [r3, #0]
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	6919      	ldr	r1, [r3, #16]
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053ca:	f7fe febb 	bl	8004144 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6818      	ldr	r0, [r3, #0]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	6919      	ldr	r1, [r3, #16]
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	7e5b      	ldrb	r3, [r3, #25]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d102      	bne.n	80053e4 <HAL_ADC_ConfigChannel+0x158>
 80053de:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80053e2:	e000      	b.n	80053e6 <HAL_ADC_ConfigChannel+0x15a>
 80053e4:	2300      	movs	r3, #0
 80053e6:	461a      	mov	r2, r3
 80053e8:	f7fe fee5 	bl	80041b6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6818      	ldr	r0, [r3, #0]
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	6919      	ldr	r1, [r3, #16]
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	7e1b      	ldrb	r3, [r3, #24]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d102      	bne.n	8005402 <HAL_ADC_ConfigChannel+0x176>
 80053fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005400:	e000      	b.n	8005404 <HAL_ADC_ConfigChannel+0x178>
 8005402:	2300      	movs	r3, #0
 8005404:	461a      	mov	r2, r3
 8005406:	f7fe febd 	bl	8004184 <LL_ADC_SetDataRightShift>
 800540a:	e047      	b.n	800549c <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005412:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	069b      	lsls	r3, r3, #26
 800541c:	429a      	cmp	r2, r3
 800541e:	d107      	bne.n	8005430 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800542e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005436:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	069b      	lsls	r3, r3, #26
 8005440:	429a      	cmp	r2, r3
 8005442:	d107      	bne.n	8005454 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005452:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800545a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	069b      	lsls	r3, r3, #26
 8005464:	429a      	cmp	r2, r3
 8005466:	d107      	bne.n	8005478 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005476:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800547e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	069b      	lsls	r3, r3, #26
 8005488:	429a      	cmp	r2, r3
 800548a:	d107      	bne.n	800549c <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800549a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4618      	mov	r0, r3
 80054a2:	f7fe ffd7 	bl	8004454 <LL_ADC_IsEnabled>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	f040 81bb 	bne.w	8005824 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6818      	ldr	r0, [r3, #0]
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	6819      	ldr	r1, [r3, #0]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	461a      	mov	r2, r3
 80054bc:	f7fe ff14 	bl	80042e8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	4a12      	ldr	r2, [pc, #72]	; (8005510 <HAL_ADC_ConfigChannel+0x284>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	f040 8130 	bne.w	800572c <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d10b      	bne.n	80054f4 <HAL_ADC_ConfigChannel+0x268>
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	0e9b      	lsrs	r3, r3, #26
 80054e2:	3301      	adds	r3, #1
 80054e4:	f003 031f 	and.w	r3, r3, #31
 80054e8:	2b09      	cmp	r3, #9
 80054ea:	bf94      	ite	ls
 80054ec:	2301      	movls	r3, #1
 80054ee:	2300      	movhi	r3, #0
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	e01b      	b.n	800552c <HAL_ADC_ConfigChannel+0x2a0>
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054fc:	fa93 f3a3 	rbit	r3, r3
 8005500:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8005502:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005504:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8005506:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005508:	2b00      	cmp	r3, #0
 800550a:	d103      	bne.n	8005514 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 800550c:	2320      	movs	r3, #32
 800550e:	e005      	b.n	800551c <HAL_ADC_ConfigChannel+0x290>
 8005510:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8005514:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005516:	fab3 f383 	clz	r3, r3
 800551a:	b2db      	uxtb	r3, r3
 800551c:	3301      	adds	r3, #1
 800551e:	f003 031f 	and.w	r3, r3, #31
 8005522:	2b09      	cmp	r3, #9
 8005524:	bf94      	ite	ls
 8005526:	2301      	movls	r3, #1
 8005528:	2300      	movhi	r3, #0
 800552a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800552c:	2b00      	cmp	r3, #0
 800552e:	d079      	beq.n	8005624 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005538:	2b00      	cmp	r3, #0
 800553a:	d107      	bne.n	800554c <HAL_ADC_ConfigChannel+0x2c0>
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	0e9b      	lsrs	r3, r3, #26
 8005542:	3301      	adds	r3, #1
 8005544:	069b      	lsls	r3, r3, #26
 8005546:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800554a:	e015      	b.n	8005578 <HAL_ADC_ConfigChannel+0x2ec>
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005554:	fa93 f3a3 	rbit	r3, r3
 8005558:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800555a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800555c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800555e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005560:	2b00      	cmp	r3, #0
 8005562:	d101      	bne.n	8005568 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8005564:	2320      	movs	r3, #32
 8005566:	e003      	b.n	8005570 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8005568:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800556a:	fab3 f383 	clz	r3, r3
 800556e:	b2db      	uxtb	r3, r3
 8005570:	3301      	adds	r3, #1
 8005572:	069b      	lsls	r3, r3, #26
 8005574:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005580:	2b00      	cmp	r3, #0
 8005582:	d109      	bne.n	8005598 <HAL_ADC_ConfigChannel+0x30c>
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	0e9b      	lsrs	r3, r3, #26
 800558a:	3301      	adds	r3, #1
 800558c:	f003 031f 	and.w	r3, r3, #31
 8005590:	2101      	movs	r1, #1
 8005592:	fa01 f303 	lsl.w	r3, r1, r3
 8005596:	e017      	b.n	80055c8 <HAL_ADC_ConfigChannel+0x33c>
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800559e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055a0:	fa93 f3a3 	rbit	r3, r3
 80055a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80055a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055a8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80055aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d101      	bne.n	80055b4 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 80055b0:	2320      	movs	r3, #32
 80055b2:	e003      	b.n	80055bc <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 80055b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055b6:	fab3 f383 	clz	r3, r3
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	3301      	adds	r3, #1
 80055be:	f003 031f 	and.w	r3, r3, #31
 80055c2:	2101      	movs	r1, #1
 80055c4:	fa01 f303 	lsl.w	r3, r1, r3
 80055c8:	ea42 0103 	orr.w	r1, r2, r3
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d10a      	bne.n	80055ee <HAL_ADC_ConfigChannel+0x362>
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	0e9b      	lsrs	r3, r3, #26
 80055de:	3301      	adds	r3, #1
 80055e0:	f003 021f 	and.w	r2, r3, #31
 80055e4:	4613      	mov	r3, r2
 80055e6:	005b      	lsls	r3, r3, #1
 80055e8:	4413      	add	r3, r2
 80055ea:	051b      	lsls	r3, r3, #20
 80055ec:	e018      	b.n	8005620 <HAL_ADC_ConfigChannel+0x394>
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055f6:	fa93 f3a3 	rbit	r3, r3
 80055fa:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80055fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fe:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8005600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8005606:	2320      	movs	r3, #32
 8005608:	e003      	b.n	8005612 <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 800560a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560c:	fab3 f383 	clz	r3, r3
 8005610:	b2db      	uxtb	r3, r3
 8005612:	3301      	adds	r3, #1
 8005614:	f003 021f 	and.w	r2, r3, #31
 8005618:	4613      	mov	r3, r2
 800561a:	005b      	lsls	r3, r3, #1
 800561c:	4413      	add	r3, r2
 800561e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005620:	430b      	orrs	r3, r1
 8005622:	e07e      	b.n	8005722 <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800562c:	2b00      	cmp	r3, #0
 800562e:	d107      	bne.n	8005640 <HAL_ADC_ConfigChannel+0x3b4>
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	0e9b      	lsrs	r3, r3, #26
 8005636:	3301      	adds	r3, #1
 8005638:	069b      	lsls	r3, r3, #26
 800563a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800563e:	e015      	b.n	800566c <HAL_ADC_ConfigChannel+0x3e0>
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005648:	fa93 f3a3 	rbit	r3, r3
 800564c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800564e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005650:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8005652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005654:	2b00      	cmp	r3, #0
 8005656:	d101      	bne.n	800565c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8005658:	2320      	movs	r3, #32
 800565a:	e003      	b.n	8005664 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800565c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800565e:	fab3 f383 	clz	r3, r3
 8005662:	b2db      	uxtb	r3, r3
 8005664:	3301      	adds	r3, #1
 8005666:	069b      	lsls	r3, r3, #26
 8005668:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005674:	2b00      	cmp	r3, #0
 8005676:	d109      	bne.n	800568c <HAL_ADC_ConfigChannel+0x400>
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	0e9b      	lsrs	r3, r3, #26
 800567e:	3301      	adds	r3, #1
 8005680:	f003 031f 	and.w	r3, r3, #31
 8005684:	2101      	movs	r1, #1
 8005686:	fa01 f303 	lsl.w	r3, r1, r3
 800568a:	e017      	b.n	80056bc <HAL_ADC_ConfigChannel+0x430>
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	fa93 f3a3 	rbit	r3, r3
 8005698:	61bb      	str	r3, [r7, #24]
  return result;
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800569e:	6a3b      	ldr	r3, [r7, #32]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d101      	bne.n	80056a8 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 80056a4:	2320      	movs	r3, #32
 80056a6:	e003      	b.n	80056b0 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 80056a8:	6a3b      	ldr	r3, [r7, #32]
 80056aa:	fab3 f383 	clz	r3, r3
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	3301      	adds	r3, #1
 80056b2:	f003 031f 	and.w	r3, r3, #31
 80056b6:	2101      	movs	r1, #1
 80056b8:	fa01 f303 	lsl.w	r3, r1, r3
 80056bc:	ea42 0103 	orr.w	r1, r2, r3
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d10d      	bne.n	80056e8 <HAL_ADC_ConfigChannel+0x45c>
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	0e9b      	lsrs	r3, r3, #26
 80056d2:	3301      	adds	r3, #1
 80056d4:	f003 021f 	and.w	r2, r3, #31
 80056d8:	4613      	mov	r3, r2
 80056da:	005b      	lsls	r3, r3, #1
 80056dc:	4413      	add	r3, r2
 80056de:	3b1e      	subs	r3, #30
 80056e0:	051b      	lsls	r3, r3, #20
 80056e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80056e6:	e01b      	b.n	8005720 <HAL_ADC_ConfigChannel+0x494>
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	fa93 f3a3 	rbit	r3, r3
 80056f4:	60fb      	str	r3, [r7, #12]
  return result;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d101      	bne.n	8005704 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 8005700:	2320      	movs	r3, #32
 8005702:	e003      	b.n	800570c <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	fab3 f383 	clz	r3, r3
 800570a:	b2db      	uxtb	r3, r3
 800570c:	3301      	adds	r3, #1
 800570e:	f003 021f 	and.w	r2, r3, #31
 8005712:	4613      	mov	r3, r2
 8005714:	005b      	lsls	r3, r3, #1
 8005716:	4413      	add	r3, r2
 8005718:	3b1e      	subs	r3, #30
 800571a:	051b      	lsls	r3, r3, #20
 800571c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005720:	430b      	orrs	r3, r1
 8005722:	683a      	ldr	r2, [r7, #0]
 8005724:	6892      	ldr	r2, [r2, #8]
 8005726:	4619      	mov	r1, r3
 8005728:	f7fe fdb2 	bl	8004290 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	da77      	bge.n	8005824 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005734:	4840      	ldr	r0, [pc, #256]	; (8005838 <HAL_ADC_ConfigChannel+0x5ac>)
 8005736:	f7fe fcf7 	bl	8004128 <LL_ADC_GetCommonPathInternalCh>
 800573a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800573c:	483f      	ldr	r0, [pc, #252]	; (800583c <HAL_ADC_ConfigChannel+0x5b0>)
 800573e:	f7fe fe89 	bl	8004454 <LL_ADC_IsEnabled>
 8005742:	4604      	mov	r4, r0
 8005744:	483e      	ldr	r0, [pc, #248]	; (8005840 <HAL_ADC_ConfigChannel+0x5b4>)
 8005746:	f7fe fe85 	bl	8004454 <LL_ADC_IsEnabled>
 800574a:	4603      	mov	r3, r0
 800574c:	4323      	orrs	r3, r4
 800574e:	2b00      	cmp	r3, #0
 8005750:	d155      	bne.n	80057fe <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a3b      	ldr	r2, [pc, #236]	; (8005844 <HAL_ADC_ConfigChannel+0x5b8>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d122      	bne.n	80057a2 <HAL_ADC_ConfigChannel+0x516>
 800575c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800575e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d11d      	bne.n	80057a2 <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a35      	ldr	r2, [pc, #212]	; (8005840 <HAL_ADC_ConfigChannel+0x5b4>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d159      	bne.n	8005824 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005770:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005772:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005776:	4619      	mov	r1, r3
 8005778:	482f      	ldr	r0, [pc, #188]	; (8005838 <HAL_ADC_ConfigChannel+0x5ac>)
 800577a:	f7fe fcc2 	bl	8004102 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800577e:	4b32      	ldr	r3, [pc, #200]	; (8005848 <HAL_ADC_ConfigChannel+0x5bc>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	099b      	lsrs	r3, r3, #6
 8005784:	4a31      	ldr	r2, [pc, #196]	; (800584c <HAL_ADC_ConfigChannel+0x5c0>)
 8005786:	fba2 2303 	umull	r2, r3, r2, r3
 800578a:	099b      	lsrs	r3, r3, #6
 800578c:	3301      	adds	r3, #1
 800578e:	005b      	lsls	r3, r3, #1
 8005790:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005792:	e002      	b.n	800579a <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	3b01      	subs	r3, #1
 8005798:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1f9      	bne.n	8005794 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80057a0:	e040      	b.n	8005824 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a2a      	ldr	r2, [pc, #168]	; (8005850 <HAL_ADC_ConfigChannel+0x5c4>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d111      	bne.n	80057d0 <HAL_ADC_ConfigChannel+0x544>
 80057ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10c      	bne.n	80057d0 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a21      	ldr	r2, [pc, #132]	; (8005840 <HAL_ADC_ConfigChannel+0x5b4>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d131      	bne.n	8005824 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80057c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057c6:	4619      	mov	r1, r3
 80057c8:	481b      	ldr	r0, [pc, #108]	; (8005838 <HAL_ADC_ConfigChannel+0x5ac>)
 80057ca:	f7fe fc9a 	bl	8004102 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80057ce:	e029      	b.n	8005824 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a1f      	ldr	r2, [pc, #124]	; (8005854 <HAL_ADC_ConfigChannel+0x5c8>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d124      	bne.n	8005824 <HAL_ADC_ConfigChannel+0x598>
 80057da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d11f      	bne.n	8005824 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a15      	ldr	r2, [pc, #84]	; (8005840 <HAL_ADC_ConfigChannel+0x5b4>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d11a      	bne.n	8005824 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80057ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80057f4:	4619      	mov	r1, r3
 80057f6:	4810      	ldr	r0, [pc, #64]	; (8005838 <HAL_ADC_ConfigChannel+0x5ac>)
 80057f8:	f7fe fc83 	bl	8004102 <LL_ADC_SetCommonPathInternalCh>
 80057fc:	e012      	b.n	8005824 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005802:	f043 0220 	orr.w	r2, r3, #32
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005810:	e008      	b.n	8005824 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005816:	f043 0220 	orr.w	r2, r3, #32
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800582c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005830:	4618      	mov	r0, r3
 8005832:	3784      	adds	r7, #132	; 0x84
 8005834:	46bd      	mov	sp, r7
 8005836:	bd90      	pop	{r4, r7, pc}
 8005838:	40022300 	.word	0x40022300
 800583c:	40022000 	.word	0x40022000
 8005840:	40022100 	.word	0x40022100
 8005844:	cb840000 	.word	0xcb840000
 8005848:	20000044 	.word	0x20000044
 800584c:	053e2d63 	.word	0x053e2d63
 8005850:	bac04000 	.word	0xbac04000
 8005854:	cfb80000 	.word	0xcfb80000

08005858 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b088      	sub	sp, #32
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8005862:	2300      	movs	r3, #0
 8005864:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4618      	mov	r0, r3
 8005870:	f7fe fe3e 	bl	80044f0 <LL_ADC_REG_IsConversionOngoing>
 8005874:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4618      	mov	r0, r3
 800587c:	f7fe fe60 	bl	8004540 <LL_ADC_INJ_IsConversionOngoing>
 8005880:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d103      	bne.n	8005890 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2b00      	cmp	r3, #0
 800588c:	f000 8098 	beq.w	80059c0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d02a      	beq.n	80058f4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	7d5b      	ldrb	r3, [r3, #21]
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d126      	bne.n	80058f4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	7d1b      	ldrb	r3, [r3, #20]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d122      	bne.n	80058f4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80058ae:	2301      	movs	r3, #1
 80058b0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80058b2:	e014      	b.n	80058de <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	4a45      	ldr	r2, [pc, #276]	; (80059cc <ADC_ConversionStop+0x174>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d90d      	bls.n	80058d8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058c0:	f043 0210 	orr.w	r2, r3, #16
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058cc:	f043 0201 	orr.w	r2, r3, #1
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e074      	b.n	80059c2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	3301      	adds	r3, #1
 80058dc:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e8:	2b40      	cmp	r3, #64	; 0x40
 80058ea:	d1e3      	bne.n	80058b4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2240      	movs	r2, #64	; 0x40
 80058f2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d014      	beq.n	8005924 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4618      	mov	r0, r3
 8005900:	f7fe fdf6 	bl	80044f0 <LL_ADC_REG_IsConversionOngoing>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00c      	beq.n	8005924 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4618      	mov	r0, r3
 8005910:	f7fe fdb3 	bl	800447a <LL_ADC_IsDisableOngoing>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d104      	bne.n	8005924 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4618      	mov	r0, r3
 8005920:	f7fe fdd2 	bl	80044c8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	2b01      	cmp	r3, #1
 8005928:	d014      	beq.n	8005954 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4618      	mov	r0, r3
 8005930:	f7fe fe06 	bl	8004540 <LL_ADC_INJ_IsConversionOngoing>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00c      	beq.n	8005954 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4618      	mov	r0, r3
 8005940:	f7fe fd9b 	bl	800447a <LL_ADC_IsDisableOngoing>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d104      	bne.n	8005954 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4618      	mov	r0, r3
 8005950:	f7fe fde2 	bl	8004518 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	2b02      	cmp	r3, #2
 8005958:	d005      	beq.n	8005966 <ADC_ConversionStop+0x10e>
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	2b03      	cmp	r3, #3
 800595e:	d105      	bne.n	800596c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8005960:	230c      	movs	r3, #12
 8005962:	617b      	str	r3, [r7, #20]
        break;
 8005964:	e005      	b.n	8005972 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8005966:	2308      	movs	r3, #8
 8005968:	617b      	str	r3, [r7, #20]
        break;
 800596a:	e002      	b.n	8005972 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800596c:	2304      	movs	r3, #4
 800596e:	617b      	str	r3, [r7, #20]
        break;
 8005970:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8005972:	f7fe fb83 	bl	800407c <HAL_GetTick>
 8005976:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005978:	e01b      	b.n	80059b2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800597a:	f7fe fb7f 	bl	800407c <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	2b05      	cmp	r3, #5
 8005986:	d914      	bls.n	80059b2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	689a      	ldr	r2, [r3, #8]
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	4013      	ands	r3, r2
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00d      	beq.n	80059b2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800599a:	f043 0210 	orr.w	r2, r3, #16
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059a6:	f043 0201 	orr.w	r2, r3, #1
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e007      	b.n	80059c2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	689a      	ldr	r2, [r3, #8]
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	4013      	ands	r3, r2
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d1dc      	bne.n	800597a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3720      	adds	r7, #32
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	000cdbff 	.word	0x000cdbff

080059d0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4618      	mov	r0, r3
 80059de:	f7fe fd39 	bl	8004454 <LL_ADC_IsEnabled>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d161      	bne.n	8005aac <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	689a      	ldr	r2, [r3, #8]
 80059ee:	4b32      	ldr	r3, [pc, #200]	; (8005ab8 <ADC_Enable+0xe8>)
 80059f0:	4013      	ands	r3, r2
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00d      	beq.n	8005a12 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059fa:	f043 0210 	orr.w	r2, r3, #16
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a06:	f043 0201 	orr.w	r2, r3, #1
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e04d      	b.n	8005aae <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7fe fcf4 	bl	8004404 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005a1c:	f7fe fb2e 	bl	800407c <HAL_GetTick>
 8005a20:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005a22:	4826      	ldr	r0, [pc, #152]	; (8005abc <ADC_Enable+0xec>)
 8005a24:	f7fe fc84 	bl	8004330 <LL_ADC_GetMultimode>
 8005a28:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a24      	ldr	r2, [pc, #144]	; (8005ac0 <ADC_Enable+0xf0>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d002      	beq.n	8005a3a <ADC_Enable+0x6a>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	e000      	b.n	8005a3c <ADC_Enable+0x6c>
 8005a3a:	4b22      	ldr	r3, [pc, #136]	; (8005ac4 <ADC_Enable+0xf4>)
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	6812      	ldr	r2, [r2, #0]
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d02c      	beq.n	8005a9e <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d130      	bne.n	8005aac <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a4a:	e028      	b.n	8005a9e <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4618      	mov	r0, r3
 8005a52:	f7fe fcff 	bl	8004454 <LL_ADC_IsEnabled>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d104      	bne.n	8005a66 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7fe fccf 	bl	8004404 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005a66:	f7fe fb09 	bl	800407c <HAL_GetTick>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d914      	bls.n	8005a9e <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0301 	and.w	r3, r3, #1
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d00d      	beq.n	8005a9e <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a86:	f043 0210 	orr.w	r2, r3, #16
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a92:	f043 0201 	orr.w	r2, r3, #1
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e007      	b.n	8005aae <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0301 	and.w	r3, r3, #1
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d1cf      	bne.n	8005a4c <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3710      	adds	r7, #16
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	8000003f 	.word	0x8000003f
 8005abc:	40022300 	.word	0x40022300
 8005ac0:	40022100 	.word	0x40022100
 8005ac4:	40022000 	.word	0x40022000

08005ac8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f7fe fcd0 	bl	800447a <LL_ADC_IsDisableOngoing>
 8005ada:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f7fe fcb7 	bl	8004454 <LL_ADC_IsEnabled>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d047      	beq.n	8005b7c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d144      	bne.n	8005b7c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	f003 030d 	and.w	r3, r3, #13
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d10c      	bne.n	8005b1a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4618      	mov	r0, r3
 8005b06:	f7fe fc91 	bl	800442c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2203      	movs	r2, #3
 8005b10:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005b12:	f7fe fab3 	bl	800407c <HAL_GetTick>
 8005b16:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005b18:	e029      	b.n	8005b6e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b1e:	f043 0210 	orr.w	r2, r3, #16
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b2a:	f043 0201 	orr.w	r2, r3, #1
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e023      	b.n	8005b7e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005b36:	f7fe faa1 	bl	800407c <HAL_GetTick>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d914      	bls.n	8005b6e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	f003 0301 	and.w	r3, r3, #1
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00d      	beq.n	8005b6e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b56:	f043 0210 	orr.w	r2, r3, #16
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b62:	f043 0201 	orr.w	r2, r3, #1
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e007      	b.n	8005b7e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	f003 0301 	and.w	r3, r3, #1
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1dc      	bne.n	8005b36 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3710      	adds	r7, #16
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
	...

08005b88 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005b90:	4b60      	ldr	r3, [pc, #384]	; (8005d14 <ADC_ConfigureBoostMode+0x18c>)
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d01c      	beq.n	8005bd6 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005b9c:	f006 fd84 	bl	800c6a8 <HAL_RCC_GetHCLKFreq>
 8005ba0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005baa:	d010      	beq.n	8005bce <ADC_ConfigureBoostMode+0x46>
 8005bac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005bb0:	d873      	bhi.n	8005c9a <ADC_ConfigureBoostMode+0x112>
 8005bb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bb6:	d002      	beq.n	8005bbe <ADC_ConfigureBoostMode+0x36>
 8005bb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bbc:	d16d      	bne.n	8005c9a <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	0c1b      	lsrs	r3, r3, #16
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bca:	60fb      	str	r3, [r7, #12]
        break;
 8005bcc:	e068      	b.n	8005ca0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	089b      	lsrs	r3, r3, #2
 8005bd2:	60fb      	str	r3, [r7, #12]
        break;
 8005bd4:	e064      	b.n	8005ca0 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005bd6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005bda:	f04f 0100 	mov.w	r1, #0
 8005bde:	f007 ff67 	bl	800dab0 <HAL_RCCEx_GetPeriphCLKFreq>
 8005be2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005bec:	d051      	beq.n	8005c92 <ADC_ConfigureBoostMode+0x10a>
 8005bee:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005bf2:	d854      	bhi.n	8005c9e <ADC_ConfigureBoostMode+0x116>
 8005bf4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005bf8:	d047      	beq.n	8005c8a <ADC_ConfigureBoostMode+0x102>
 8005bfa:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005bfe:	d84e      	bhi.n	8005c9e <ADC_ConfigureBoostMode+0x116>
 8005c00:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005c04:	d03d      	beq.n	8005c82 <ADC_ConfigureBoostMode+0xfa>
 8005c06:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005c0a:	d848      	bhi.n	8005c9e <ADC_ConfigureBoostMode+0x116>
 8005c0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c10:	d033      	beq.n	8005c7a <ADC_ConfigureBoostMode+0xf2>
 8005c12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c16:	d842      	bhi.n	8005c9e <ADC_ConfigureBoostMode+0x116>
 8005c18:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005c1c:	d029      	beq.n	8005c72 <ADC_ConfigureBoostMode+0xea>
 8005c1e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005c22:	d83c      	bhi.n	8005c9e <ADC_ConfigureBoostMode+0x116>
 8005c24:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005c28:	d01a      	beq.n	8005c60 <ADC_ConfigureBoostMode+0xd8>
 8005c2a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005c2e:	d836      	bhi.n	8005c9e <ADC_ConfigureBoostMode+0x116>
 8005c30:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005c34:	d014      	beq.n	8005c60 <ADC_ConfigureBoostMode+0xd8>
 8005c36:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005c3a:	d830      	bhi.n	8005c9e <ADC_ConfigureBoostMode+0x116>
 8005c3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c40:	d00e      	beq.n	8005c60 <ADC_ConfigureBoostMode+0xd8>
 8005c42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c46:	d82a      	bhi.n	8005c9e <ADC_ConfigureBoostMode+0x116>
 8005c48:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005c4c:	d008      	beq.n	8005c60 <ADC_ConfigureBoostMode+0xd8>
 8005c4e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005c52:	d824      	bhi.n	8005c9e <ADC_ConfigureBoostMode+0x116>
 8005c54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c58:	d002      	beq.n	8005c60 <ADC_ConfigureBoostMode+0xd8>
 8005c5a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005c5e:	d11e      	bne.n	8005c9e <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	0c9b      	lsrs	r3, r3, #18
 8005c66:	005b      	lsls	r3, r3, #1
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c6e:	60fb      	str	r3, [r7, #12]
        break;
 8005c70:	e016      	b.n	8005ca0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	091b      	lsrs	r3, r3, #4
 8005c76:	60fb      	str	r3, [r7, #12]
        break;
 8005c78:	e012      	b.n	8005ca0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	095b      	lsrs	r3, r3, #5
 8005c7e:	60fb      	str	r3, [r7, #12]
        break;
 8005c80:	e00e      	b.n	8005ca0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	099b      	lsrs	r3, r3, #6
 8005c86:	60fb      	str	r3, [r7, #12]
        break;
 8005c88:	e00a      	b.n	8005ca0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	09db      	lsrs	r3, r3, #7
 8005c8e:	60fb      	str	r3, [r7, #12]
        break;
 8005c90:	e006      	b.n	8005ca0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	0a1b      	lsrs	r3, r3, #8
 8005c96:	60fb      	str	r3, [r7, #12]
        break;
 8005c98:	e002      	b.n	8005ca0 <ADC_ConfigureBoostMode+0x118>
        break;
 8005c9a:	bf00      	nop
 8005c9c:	e000      	b.n	8005ca0 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 8005c9e:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	085b      	lsrs	r3, r3, #1
 8005ca4:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	4a1b      	ldr	r2, [pc, #108]	; (8005d18 <ADC_ConfigureBoostMode+0x190>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d808      	bhi.n	8005cc0 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	689a      	ldr	r2, [r3, #8]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005cbc:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005cbe:	e025      	b.n	8005d0c <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	4a16      	ldr	r2, [pc, #88]	; (8005d1c <ADC_ConfigureBoostMode+0x194>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d80a      	bhi.n	8005cde <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cda:	609a      	str	r2, [r3, #8]
}
 8005cdc:	e016      	b.n	8005d0c <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	4a0f      	ldr	r2, [pc, #60]	; (8005d20 <ADC_ConfigureBoostMode+0x198>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d80a      	bhi.n	8005cfc <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cf8:	609a      	str	r2, [r3, #8]
}
 8005cfa:	e007      	b.n	8005d0c <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	689a      	ldr	r2, [r3, #8]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005d0a:	609a      	str	r2, [r3, #8]
}
 8005d0c:	bf00      	nop
 8005d0e:	3710      	adds	r7, #16
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	40022300 	.word	0x40022300
 8005d18:	005f5e10 	.word	0x005f5e10
 8005d1c:	00bebc20 	.word	0x00bebc20
 8005d20:	017d7840 	.word	0x017d7840

08005d24 <LL_ADC_IsEnabled>:
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f003 0301 	and.w	r3, r3, #1
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d101      	bne.n	8005d3c <LL_ADC_IsEnabled+0x18>
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e000      	b.n	8005d3e <LL_ADC_IsEnabled+0x1a>
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	370c      	adds	r7, #12
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr

08005d4a <LL_ADC_REG_IsConversionOngoing>:
{
 8005d4a:	b480      	push	{r7}
 8005d4c:	b083      	sub	sp, #12
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	f003 0304 	and.w	r3, r3, #4
 8005d5a:	2b04      	cmp	r3, #4
 8005d5c:	d101      	bne.n	8005d62 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e000      	b.n	8005d64 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005d78:	bf00      	nop
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005d8c:	bf00      	nop
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005da0:	bf00      	nop
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005db4:	bf00      	nop
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005dc8:	bf00      	nop
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005dd4:	b590      	push	{r4, r7, lr}
 8005dd6:	b09f      	sub	sp, #124	; 0x7c
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005dde:	2300      	movs	r3, #0
 8005de0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d101      	bne.n	8005df2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005dee:	2302      	movs	r3, #2
 8005df0:	e080      	b.n	8005ef4 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2201      	movs	r2, #1
 8005df6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a3d      	ldr	r2, [pc, #244]	; (8005efc <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d102      	bne.n	8005e12 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005e0c:	4b3c      	ldr	r3, [pc, #240]	; (8005f00 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8005e0e:	60bb      	str	r3, [r7, #8]
 8005e10:	e001      	b.n	8005e16 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005e12:	2300      	movs	r3, #0
 8005e14:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d10b      	bne.n	8005e34 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e20:	f043 0220 	orr.w	r2, r3, #32
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e05f      	b.n	8005ef4 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7ff ff87 	bl	8005d4a <LL_ADC_REG_IsConversionOngoing>
 8005e3c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7ff ff81 	bl	8005d4a <LL_ADC_REG_IsConversionOngoing>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d141      	bne.n	8005ed2 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005e4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d13e      	bne.n	8005ed2 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005e54:	4b2b      	ldr	r3, [pc, #172]	; (8005f04 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8005e56:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d020      	beq.n	8005ea2 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	431a      	orrs	r2, r3
 8005e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e70:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005e72:	4822      	ldr	r0, [pc, #136]	; (8005efc <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8005e74:	f7ff ff56 	bl	8005d24 <LL_ADC_IsEnabled>
 8005e78:	4604      	mov	r4, r0
 8005e7a:	4821      	ldr	r0, [pc, #132]	; (8005f00 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8005e7c:	f7ff ff52 	bl	8005d24 <LL_ADC_IsEnabled>
 8005e80:	4603      	mov	r3, r0
 8005e82:	4323      	orrs	r3, r4
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d12e      	bne.n	8005ee6 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e8a:	689a      	ldr	r2, [r3, #8]
 8005e8c:	4b1e      	ldr	r3, [pc, #120]	; (8005f08 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8005e8e:	4013      	ands	r3, r2
 8005e90:	683a      	ldr	r2, [r7, #0]
 8005e92:	6811      	ldr	r1, [r2, #0]
 8005e94:	683a      	ldr	r2, [r7, #0]
 8005e96:	6892      	ldr	r2, [r2, #8]
 8005e98:	430a      	orrs	r2, r1
 8005e9a:	431a      	orrs	r2, r3
 8005e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e9e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005ea0:	e021      	b.n	8005ee6 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005eaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eac:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005eae:	4813      	ldr	r0, [pc, #76]	; (8005efc <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8005eb0:	f7ff ff38 	bl	8005d24 <LL_ADC_IsEnabled>
 8005eb4:	4604      	mov	r4, r0
 8005eb6:	4812      	ldr	r0, [pc, #72]	; (8005f00 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8005eb8:	f7ff ff34 	bl	8005d24 <LL_ADC_IsEnabled>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	4323      	orrs	r3, r4
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d110      	bne.n	8005ee6 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005ec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ec6:	689a      	ldr	r2, [r3, #8]
 8005ec8:	4b0f      	ldr	r3, [pc, #60]	; (8005f08 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8005eca:	4013      	ands	r3, r2
 8005ecc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005ece:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005ed0:	e009      	b.n	8005ee6 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ed6:	f043 0220 	orr.w	r2, r3, #32
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005ee4:	e000      	b.n	8005ee8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005ee6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005ef0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	377c      	adds	r7, #124	; 0x7c
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd90      	pop	{r4, r7, pc}
 8005efc:	40022000 	.word	0x40022000
 8005f00:	40022100 	.word	0x40022100
 8005f04:	40022300 	.word	0x40022300
 8005f08:	fffff0e0 	.word	0xfffff0e0

08005f0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b085      	sub	sp, #20
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f003 0307 	and.w	r3, r3, #7
 8005f1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f1c:	4b0b      	ldr	r3, [pc, #44]	; (8005f4c <__NVIC_SetPriorityGrouping+0x40>)
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005f28:	4013      	ands	r3, r2
 8005f2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005f34:	4b06      	ldr	r3, [pc, #24]	; (8005f50 <__NVIC_SetPriorityGrouping+0x44>)
 8005f36:	4313      	orrs	r3, r2
 8005f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f3a:	4a04      	ldr	r2, [pc, #16]	; (8005f4c <__NVIC_SetPriorityGrouping+0x40>)
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	60d3      	str	r3, [r2, #12]
}
 8005f40:	bf00      	nop
 8005f42:	3714      	adds	r7, #20
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr
 8005f4c:	e000ed00 	.word	0xe000ed00
 8005f50:	05fa0000 	.word	0x05fa0000

08005f54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f54:	b480      	push	{r7}
 8005f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f58:	4b04      	ldr	r3, [pc, #16]	; (8005f6c <__NVIC_GetPriorityGrouping+0x18>)
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	0a1b      	lsrs	r3, r3, #8
 8005f5e:	f003 0307 	and.w	r3, r3, #7
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr
 8005f6c:	e000ed00 	.word	0xe000ed00

08005f70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	4603      	mov	r3, r0
 8005f78:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005f7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	db0b      	blt.n	8005f9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f82:	88fb      	ldrh	r3, [r7, #6]
 8005f84:	f003 021f 	and.w	r2, r3, #31
 8005f88:	4907      	ldr	r1, [pc, #28]	; (8005fa8 <__NVIC_EnableIRQ+0x38>)
 8005f8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f8e:	095b      	lsrs	r3, r3, #5
 8005f90:	2001      	movs	r0, #1
 8005f92:	fa00 f202 	lsl.w	r2, r0, r2
 8005f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005f9a:	bf00      	nop
 8005f9c:	370c      	adds	r7, #12
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	e000e100 	.word	0xe000e100

08005fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	6039      	str	r1, [r7, #0]
 8005fb6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005fb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	db0a      	blt.n	8005fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	b2da      	uxtb	r2, r3
 8005fc4:	490c      	ldr	r1, [pc, #48]	; (8005ff8 <__NVIC_SetPriority+0x4c>)
 8005fc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005fca:	0112      	lsls	r2, r2, #4
 8005fcc:	b2d2      	uxtb	r2, r2
 8005fce:	440b      	add	r3, r1
 8005fd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005fd4:	e00a      	b.n	8005fec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	b2da      	uxtb	r2, r3
 8005fda:	4908      	ldr	r1, [pc, #32]	; (8005ffc <__NVIC_SetPriority+0x50>)
 8005fdc:	88fb      	ldrh	r3, [r7, #6]
 8005fde:	f003 030f 	and.w	r3, r3, #15
 8005fe2:	3b04      	subs	r3, #4
 8005fe4:	0112      	lsls	r2, r2, #4
 8005fe6:	b2d2      	uxtb	r2, r2
 8005fe8:	440b      	add	r3, r1
 8005fea:	761a      	strb	r2, [r3, #24]
}
 8005fec:	bf00      	nop
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr
 8005ff8:	e000e100 	.word	0xe000e100
 8005ffc:	e000ed00 	.word	0xe000ed00

08006000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006000:	b480      	push	{r7}
 8006002:	b089      	sub	sp, #36	; 0x24
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f003 0307 	and.w	r3, r3, #7
 8006012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	f1c3 0307 	rsb	r3, r3, #7
 800601a:	2b04      	cmp	r3, #4
 800601c:	bf28      	it	cs
 800601e:	2304      	movcs	r3, #4
 8006020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	3304      	adds	r3, #4
 8006026:	2b06      	cmp	r3, #6
 8006028:	d902      	bls.n	8006030 <NVIC_EncodePriority+0x30>
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	3b03      	subs	r3, #3
 800602e:	e000      	b.n	8006032 <NVIC_EncodePriority+0x32>
 8006030:	2300      	movs	r3, #0
 8006032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006034:	f04f 32ff 	mov.w	r2, #4294967295
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	fa02 f303 	lsl.w	r3, r2, r3
 800603e:	43da      	mvns	r2, r3
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	401a      	ands	r2, r3
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006048:	f04f 31ff 	mov.w	r1, #4294967295
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	fa01 f303 	lsl.w	r3, r1, r3
 8006052:	43d9      	mvns	r1, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006058:	4313      	orrs	r3, r2
         );
}
 800605a:	4618      	mov	r0, r3
 800605c:	3724      	adds	r7, #36	; 0x24
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
	...

08006068 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8006068:	b480      	push	{r7}
 800606a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800606c:	f3bf 8f4f 	dsb	sy
}
 8006070:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006072:	4b06      	ldr	r3, [pc, #24]	; (800608c <__NVIC_SystemReset+0x24>)
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800607a:	4904      	ldr	r1, [pc, #16]	; (800608c <__NVIC_SystemReset+0x24>)
 800607c:	4b04      	ldr	r3, [pc, #16]	; (8006090 <__NVIC_SystemReset+0x28>)
 800607e:	4313      	orrs	r3, r2
 8006080:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8006082:	f3bf 8f4f 	dsb	sy
}
 8006086:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8006088:	bf00      	nop
 800608a:	e7fd      	b.n	8006088 <__NVIC_SystemReset+0x20>
 800608c:	e000ed00 	.word	0xe000ed00
 8006090:	05fa0004 	.word	0x05fa0004

08006094 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	3b01      	subs	r3, #1
 80060a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80060a4:	d301      	bcc.n	80060aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80060a6:	2301      	movs	r3, #1
 80060a8:	e00f      	b.n	80060ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80060aa:	4a0a      	ldr	r2, [pc, #40]	; (80060d4 <SysTick_Config+0x40>)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	3b01      	subs	r3, #1
 80060b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80060b2:	210f      	movs	r1, #15
 80060b4:	f04f 30ff 	mov.w	r0, #4294967295
 80060b8:	f7ff ff78 	bl	8005fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80060bc:	4b05      	ldr	r3, [pc, #20]	; (80060d4 <SysTick_Config+0x40>)
 80060be:	2200      	movs	r2, #0
 80060c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80060c2:	4b04      	ldr	r3, [pc, #16]	; (80060d4 <SysTick_Config+0x40>)
 80060c4:	2207      	movs	r2, #7
 80060c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	e000e010 	.word	0xe000e010

080060d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f7ff ff13 	bl	8005f0c <__NVIC_SetPriorityGrouping>
}
 80060e6:	bf00      	nop
 80060e8:	3708      	adds	r7, #8
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b086      	sub	sp, #24
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	4603      	mov	r3, r0
 80060f6:	60b9      	str	r1, [r7, #8]
 80060f8:	607a      	str	r2, [r7, #4]
 80060fa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80060fc:	f7ff ff2a 	bl	8005f54 <__NVIC_GetPriorityGrouping>
 8006100:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	68b9      	ldr	r1, [r7, #8]
 8006106:	6978      	ldr	r0, [r7, #20]
 8006108:	f7ff ff7a 	bl	8006000 <NVIC_EncodePriority>
 800610c:	4602      	mov	r2, r0
 800610e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006112:	4611      	mov	r1, r2
 8006114:	4618      	mov	r0, r3
 8006116:	f7ff ff49 	bl	8005fac <__NVIC_SetPriority>
}
 800611a:	bf00      	nop
 800611c:	3718      	adds	r7, #24
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b082      	sub	sp, #8
 8006126:	af00      	add	r7, sp, #0
 8006128:	4603      	mov	r3, r0
 800612a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800612c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006130:	4618      	mov	r0, r3
 8006132:	f7ff ff1d 	bl	8005f70 <__NVIC_EnableIRQ>
}
 8006136:	bf00      	nop
 8006138:	3708      	adds	r7, #8
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}

0800613e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800613e:	b580      	push	{r7, lr}
 8006140:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8006142:	f7ff ff91 	bl	8006068 <__NVIC_SystemReset>

08006146 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006146:	b580      	push	{r7, lr}
 8006148:	b082      	sub	sp, #8
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f7ff ffa0 	bl	8006094 <SysTick_Config>
 8006154:	4603      	mov	r3, r0
}
 8006156:	4618      	mov	r0, r3
 8006158:	3708      	adds	r7, #8
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}

0800615e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800615e:	b580      	push	{r7, lr}
 8006160:	b082      	sub	sp, #8
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d101      	bne.n	8006170 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	e014      	b.n	800619a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	791b      	ldrb	r3, [r3, #4]
 8006174:	b2db      	uxtb	r3, r3
 8006176:	2b00      	cmp	r3, #0
 8006178:	d105      	bne.n	8006186 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f7fd f88b 	bl	800329c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2202      	movs	r2, #2
 800618a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2201      	movs	r2, #1
 8006196:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3708      	adds	r7, #8
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80061a2:	b480      	push	{r7}
 80061a4:	b083      	sub	sp, #12
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
 80061aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	795b      	ldrb	r3, [r3, #5]
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d101      	bne.n	80061b8 <HAL_DAC_Start+0x16>
 80061b4:	2302      	movs	r3, #2
 80061b6:	e040      	b.n	800623a <HAL_DAC_Start+0x98>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2202      	movs	r2, #2
 80061c2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	6819      	ldr	r1, [r3, #0]
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	f003 0310 	and.w	r3, r3, #16
 80061d0:	2201      	movs	r2, #1
 80061d2:	409a      	lsls	r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	430a      	orrs	r2, r1
 80061da:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d10f      	bne.n	8006202 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d11d      	bne.n	800622c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f042 0201 	orr.w	r2, r2, #1
 80061fe:	605a      	str	r2, [r3, #4]
 8006200:	e014      	b.n	800622c <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	f003 0310 	and.w	r3, r3, #16
 8006212:	2102      	movs	r1, #2
 8006214:	fa01 f303 	lsl.w	r3, r1, r3
 8006218:	429a      	cmp	r2, r3
 800621a:	d107      	bne.n	800622c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	685a      	ldr	r2, [r3, #4]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f042 0202 	orr.w	r2, r2, #2
 800622a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	370c      	adds	r7, #12
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8006246:	b480      	push	{r7}
 8006248:	b087      	sub	sp, #28
 800624a:	af00      	add	r7, sp, #0
 800624c:	60f8      	str	r0, [r7, #12]
 800624e:	60b9      	str	r1, [r7, #8]
 8006250:	607a      	str	r2, [r7, #4]
 8006252:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8006254:	2300      	movs	r3, #0
 8006256:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d105      	bne.n	8006270 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8006264:	697a      	ldr	r2, [r7, #20]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4413      	add	r3, r2
 800626a:	3308      	adds	r3, #8
 800626c:	617b      	str	r3, [r7, #20]
 800626e:	e004      	b.n	800627a <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4413      	add	r3, r2
 8006276:	3314      	adds	r3, #20
 8006278:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	461a      	mov	r2, r3
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	371c      	adds	r7, #28
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b088      	sub	sp, #32
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	795b      	ldrb	r3, [r3, #5]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d101      	bne.n	80062a8 <HAL_DAC_ConfigChannel+0x18>
 80062a4:	2302      	movs	r3, #2
 80062a6:	e12a      	b.n	80064fe <HAL_DAC_ConfigChannel+0x26e>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2201      	movs	r2, #1
 80062ac:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2202      	movs	r2, #2
 80062b2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2b04      	cmp	r3, #4
 80062ba:	f040 8081 	bne.w	80063c0 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80062be:	f7fd fedd 	bl	800407c <HAL_GetTick>
 80062c2:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d140      	bne.n	800634c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80062ca:	e018      	b.n	80062fe <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80062cc:	f7fd fed6 	bl	800407c <HAL_GetTick>
 80062d0:	4602      	mov	r2, r0
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d911      	bls.n	80062fe <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062e0:	4b89      	ldr	r3, [pc, #548]	; (8006508 <HAL_DAC_ConfigChannel+0x278>)
 80062e2:	4013      	ands	r3, r2
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00a      	beq.n	80062fe <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	f043 0208 	orr.w	r2, r3, #8
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2203      	movs	r2, #3
 80062f8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	e0ff      	b.n	80064fe <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006304:	4b80      	ldr	r3, [pc, #512]	; (8006508 <HAL_DAC_ConfigChannel+0x278>)
 8006306:	4013      	ands	r3, r2
 8006308:	2b00      	cmp	r3, #0
 800630a:	d1df      	bne.n	80062cc <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 800630c:	2001      	movs	r0, #1
 800630e:	f7fd fec1 	bl	8004094 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68ba      	ldr	r2, [r7, #8]
 8006318:	6992      	ldr	r2, [r2, #24]
 800631a:	641a      	str	r2, [r3, #64]	; 0x40
 800631c:	e023      	b.n	8006366 <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800631e:	f7fd fead 	bl	800407c <HAL_GetTick>
 8006322:	4602      	mov	r2, r0
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	2b01      	cmp	r3, #1
 800632a:	d90f      	bls.n	800634c <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006332:	2b00      	cmp	r3, #0
 8006334:	da0a      	bge.n	800634c <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	f043 0208 	orr.w	r2, r3, #8
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2203      	movs	r2, #3
 8006346:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006348:	2303      	movs	r3, #3
 800634a:	e0d8      	b.n	80064fe <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006352:	2b00      	cmp	r3, #0
 8006354:	dbe3      	blt.n	800631e <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 8006356:	2001      	movs	r0, #1
 8006358:	f7fd fe9c 	bl	8004094 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68ba      	ldr	r2, [r7, #8]
 8006362:	6992      	ldr	r2, [r2, #24]
 8006364:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f003 0310 	and.w	r3, r3, #16
 8006372:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006376:	fa01 f303 	lsl.w	r3, r1, r3
 800637a:	43db      	mvns	r3, r3
 800637c:	ea02 0103 	and.w	r1, r2, r3
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	69da      	ldr	r2, [r3, #28]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f003 0310 	and.w	r3, r3, #16
 800638a:	409a      	lsls	r2, r3
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	430a      	orrs	r2, r1
 8006392:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f003 0310 	and.w	r3, r3, #16
 80063a0:	21ff      	movs	r1, #255	; 0xff
 80063a2:	fa01 f303 	lsl.w	r3, r1, r3
 80063a6:	43db      	mvns	r3, r3
 80063a8:	ea02 0103 	and.w	r1, r2, r3
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	6a1a      	ldr	r2, [r3, #32]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f003 0310 	and.w	r3, r3, #16
 80063b6:	409a      	lsls	r2, r3
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	430a      	orrs	r2, r1
 80063be:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d11d      	bne.n	8006404 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ce:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f003 0310 	and.w	r3, r3, #16
 80063d6:	221f      	movs	r2, #31
 80063d8:	fa02 f303 	lsl.w	r3, r2, r3
 80063dc:	43db      	mvns	r3, r3
 80063de:	697a      	ldr	r2, [r7, #20]
 80063e0:	4013      	ands	r3, r2
 80063e2:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	695b      	ldr	r3, [r3, #20]
 80063e8:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f003 0310 	and.w	r3, r3, #16
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	fa02 f303 	lsl.w	r3, r2, r3
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	697a      	ldr	r2, [r7, #20]
 8006402:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800640a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f003 0310 	and.w	r3, r3, #16
 8006412:	2207      	movs	r2, #7
 8006414:	fa02 f303 	lsl.w	r3, r2, r3
 8006418:	43db      	mvns	r3, r3
 800641a:	697a      	ldr	r2, [r7, #20]
 800641c:	4013      	ands	r3, r2
 800641e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	2b01      	cmp	r3, #1
 8006426:	d102      	bne.n	800642e <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 8006428:	2300      	movs	r3, #0
 800642a:	61fb      	str	r3, [r7, #28]
 800642c:	e00f      	b.n	800644e <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	2b02      	cmp	r3, #2
 8006434:	d102      	bne.n	800643c <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8006436:	2301      	movs	r3, #1
 8006438:	61fb      	str	r3, [r7, #28]
 800643a:	e008      	b.n	800644e <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d102      	bne.n	800644a <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8006444:	2301      	movs	r3, #1
 8006446:	61fb      	str	r3, [r7, #28]
 8006448:	e001      	b.n	800644e <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800644a:	2300      	movs	r3, #0
 800644c:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	4313      	orrs	r3, r2
 8006458:	69fa      	ldr	r2, [r7, #28]
 800645a:	4313      	orrs	r3, r2
 800645c:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f003 0310 	and.w	r3, r3, #16
 8006464:	693a      	ldr	r2, [r7, #16]
 8006466:	fa02 f303 	lsl.w	r3, r2, r3
 800646a:	697a      	ldr	r2, [r7, #20]
 800646c:	4313      	orrs	r3, r2
 800646e:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	697a      	ldr	r2, [r7, #20]
 8006476:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	6819      	ldr	r1, [r3, #0]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f003 0310 	and.w	r3, r3, #16
 8006484:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006488:	fa02 f303 	lsl.w	r3, r2, r3
 800648c:	43da      	mvns	r2, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	400a      	ands	r2, r1
 8006494:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f003 0310 	and.w	r3, r3, #16
 80064a4:	f640 72fe 	movw	r2, #4094	; 0xffe
 80064a8:	fa02 f303 	lsl.w	r3, r2, r3
 80064ac:	43db      	mvns	r3, r3
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	4013      	ands	r3, r2
 80064b2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f003 0310 	and.w	r3, r3, #16
 80064c0:	693a      	ldr	r2, [r7, #16]
 80064c2:	fa02 f303 	lsl.w	r3, r2, r3
 80064c6:	697a      	ldr	r2, [r7, #20]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	697a      	ldr	r2, [r7, #20]
 80064d2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	6819      	ldr	r1, [r3, #0]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f003 0310 	and.w	r3, r3, #16
 80064e0:	22c0      	movs	r2, #192	; 0xc0
 80064e2:	fa02 f303 	lsl.w	r3, r2, r3
 80064e6:	43da      	mvns	r2, r3
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	400a      	ands	r2, r1
 80064ee:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2201      	movs	r2, #1
 80064f4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3720      	adds	r7, #32
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	20008000 	.word	0x20008000

0800650c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b086      	sub	sp, #24
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006514:	f7fd fdb2 	bl	800407c <HAL_GetTick>
 8006518:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d101      	bne.n	8006524 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	e37d      	b.n	8006c20 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a66      	ldr	r2, [pc, #408]	; (80066c4 <HAL_DMA_Init+0x1b8>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d04a      	beq.n	80065c4 <HAL_DMA_Init+0xb8>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a65      	ldr	r2, [pc, #404]	; (80066c8 <HAL_DMA_Init+0x1bc>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d045      	beq.n	80065c4 <HAL_DMA_Init+0xb8>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a63      	ldr	r2, [pc, #396]	; (80066cc <HAL_DMA_Init+0x1c0>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d040      	beq.n	80065c4 <HAL_DMA_Init+0xb8>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a62      	ldr	r2, [pc, #392]	; (80066d0 <HAL_DMA_Init+0x1c4>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d03b      	beq.n	80065c4 <HAL_DMA_Init+0xb8>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a60      	ldr	r2, [pc, #384]	; (80066d4 <HAL_DMA_Init+0x1c8>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d036      	beq.n	80065c4 <HAL_DMA_Init+0xb8>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a5f      	ldr	r2, [pc, #380]	; (80066d8 <HAL_DMA_Init+0x1cc>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d031      	beq.n	80065c4 <HAL_DMA_Init+0xb8>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a5d      	ldr	r2, [pc, #372]	; (80066dc <HAL_DMA_Init+0x1d0>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d02c      	beq.n	80065c4 <HAL_DMA_Init+0xb8>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a5c      	ldr	r2, [pc, #368]	; (80066e0 <HAL_DMA_Init+0x1d4>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d027      	beq.n	80065c4 <HAL_DMA_Init+0xb8>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a5a      	ldr	r2, [pc, #360]	; (80066e4 <HAL_DMA_Init+0x1d8>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d022      	beq.n	80065c4 <HAL_DMA_Init+0xb8>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a59      	ldr	r2, [pc, #356]	; (80066e8 <HAL_DMA_Init+0x1dc>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d01d      	beq.n	80065c4 <HAL_DMA_Init+0xb8>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a57      	ldr	r2, [pc, #348]	; (80066ec <HAL_DMA_Init+0x1e0>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d018      	beq.n	80065c4 <HAL_DMA_Init+0xb8>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a56      	ldr	r2, [pc, #344]	; (80066f0 <HAL_DMA_Init+0x1e4>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d013      	beq.n	80065c4 <HAL_DMA_Init+0xb8>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a54      	ldr	r2, [pc, #336]	; (80066f4 <HAL_DMA_Init+0x1e8>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d00e      	beq.n	80065c4 <HAL_DMA_Init+0xb8>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a53      	ldr	r2, [pc, #332]	; (80066f8 <HAL_DMA_Init+0x1ec>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d009      	beq.n	80065c4 <HAL_DMA_Init+0xb8>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a51      	ldr	r2, [pc, #324]	; (80066fc <HAL_DMA_Init+0x1f0>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d004      	beq.n	80065c4 <HAL_DMA_Init+0xb8>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a50      	ldr	r2, [pc, #320]	; (8006700 <HAL_DMA_Init+0x1f4>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d101      	bne.n	80065c8 <HAL_DMA_Init+0xbc>
 80065c4:	2301      	movs	r3, #1
 80065c6:	e000      	b.n	80065ca <HAL_DMA_Init+0xbe>
 80065c8:	2300      	movs	r3, #0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	f000 813c 	beq.w	8006848 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2202      	movs	r2, #2
 80065d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a37      	ldr	r2, [pc, #220]	; (80066c4 <HAL_DMA_Init+0x1b8>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d04a      	beq.n	8006680 <HAL_DMA_Init+0x174>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a36      	ldr	r2, [pc, #216]	; (80066c8 <HAL_DMA_Init+0x1bc>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d045      	beq.n	8006680 <HAL_DMA_Init+0x174>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a34      	ldr	r2, [pc, #208]	; (80066cc <HAL_DMA_Init+0x1c0>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d040      	beq.n	8006680 <HAL_DMA_Init+0x174>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a33      	ldr	r2, [pc, #204]	; (80066d0 <HAL_DMA_Init+0x1c4>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d03b      	beq.n	8006680 <HAL_DMA_Init+0x174>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a31      	ldr	r2, [pc, #196]	; (80066d4 <HAL_DMA_Init+0x1c8>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d036      	beq.n	8006680 <HAL_DMA_Init+0x174>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a30      	ldr	r2, [pc, #192]	; (80066d8 <HAL_DMA_Init+0x1cc>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d031      	beq.n	8006680 <HAL_DMA_Init+0x174>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a2e      	ldr	r2, [pc, #184]	; (80066dc <HAL_DMA_Init+0x1d0>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d02c      	beq.n	8006680 <HAL_DMA_Init+0x174>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a2d      	ldr	r2, [pc, #180]	; (80066e0 <HAL_DMA_Init+0x1d4>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d027      	beq.n	8006680 <HAL_DMA_Init+0x174>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a2b      	ldr	r2, [pc, #172]	; (80066e4 <HAL_DMA_Init+0x1d8>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d022      	beq.n	8006680 <HAL_DMA_Init+0x174>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a2a      	ldr	r2, [pc, #168]	; (80066e8 <HAL_DMA_Init+0x1dc>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d01d      	beq.n	8006680 <HAL_DMA_Init+0x174>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a28      	ldr	r2, [pc, #160]	; (80066ec <HAL_DMA_Init+0x1e0>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d018      	beq.n	8006680 <HAL_DMA_Init+0x174>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a27      	ldr	r2, [pc, #156]	; (80066f0 <HAL_DMA_Init+0x1e4>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d013      	beq.n	8006680 <HAL_DMA_Init+0x174>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a25      	ldr	r2, [pc, #148]	; (80066f4 <HAL_DMA_Init+0x1e8>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d00e      	beq.n	8006680 <HAL_DMA_Init+0x174>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a24      	ldr	r2, [pc, #144]	; (80066f8 <HAL_DMA_Init+0x1ec>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d009      	beq.n	8006680 <HAL_DMA_Init+0x174>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a22      	ldr	r2, [pc, #136]	; (80066fc <HAL_DMA_Init+0x1f0>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d004      	beq.n	8006680 <HAL_DMA_Init+0x174>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a21      	ldr	r2, [pc, #132]	; (8006700 <HAL_DMA_Init+0x1f4>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d108      	bne.n	8006692 <HAL_DMA_Init+0x186>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f022 0201 	bic.w	r2, r2, #1
 800668e:	601a      	str	r2, [r3, #0]
 8006690:	e007      	b.n	80066a2 <HAL_DMA_Init+0x196>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f022 0201 	bic.w	r2, r2, #1
 80066a0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80066a2:	e02f      	b.n	8006704 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80066a4:	f7fd fcea 	bl	800407c <HAL_GetTick>
 80066a8:	4602      	mov	r2, r0
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	2b05      	cmp	r3, #5
 80066b0:	d928      	bls.n	8006704 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2220      	movs	r2, #32
 80066b6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2203      	movs	r2, #3
 80066bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e2ad      	b.n	8006c20 <HAL_DMA_Init+0x714>
 80066c4:	40020010 	.word	0x40020010
 80066c8:	40020028 	.word	0x40020028
 80066cc:	40020040 	.word	0x40020040
 80066d0:	40020058 	.word	0x40020058
 80066d4:	40020070 	.word	0x40020070
 80066d8:	40020088 	.word	0x40020088
 80066dc:	400200a0 	.word	0x400200a0
 80066e0:	400200b8 	.word	0x400200b8
 80066e4:	40020410 	.word	0x40020410
 80066e8:	40020428 	.word	0x40020428
 80066ec:	40020440 	.word	0x40020440
 80066f0:	40020458 	.word	0x40020458
 80066f4:	40020470 	.word	0x40020470
 80066f8:	40020488 	.word	0x40020488
 80066fc:	400204a0 	.word	0x400204a0
 8006700:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 0301 	and.w	r3, r3, #1
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1c8      	bne.n	80066a4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800671a:	697a      	ldr	r2, [r7, #20]
 800671c:	4b73      	ldr	r3, [pc, #460]	; (80068ec <HAL_DMA_Init+0x3e0>)
 800671e:	4013      	ands	r3, r2
 8006720:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800672a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006736:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006742:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6a1b      	ldr	r3, [r3, #32]
 8006748:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800674a:	697a      	ldr	r2, [r7, #20]
 800674c:	4313      	orrs	r3, r2
 800674e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006754:	2b04      	cmp	r3, #4
 8006756:	d107      	bne.n	8006768 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006760:	4313      	orrs	r3, r2
 8006762:	697a      	ldr	r2, [r7, #20]
 8006764:	4313      	orrs	r3, r2
 8006766:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	2b28      	cmp	r3, #40	; 0x28
 800676e:	d903      	bls.n	8006778 <HAL_DMA_Init+0x26c>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	2b2e      	cmp	r3, #46	; 0x2e
 8006776:	d91f      	bls.n	80067b8 <HAL_DMA_Init+0x2ac>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	2b3e      	cmp	r3, #62	; 0x3e
 800677e:	d903      	bls.n	8006788 <HAL_DMA_Init+0x27c>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	2b42      	cmp	r3, #66	; 0x42
 8006786:	d917      	bls.n	80067b8 <HAL_DMA_Init+0x2ac>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	2b46      	cmp	r3, #70	; 0x46
 800678e:	d903      	bls.n	8006798 <HAL_DMA_Init+0x28c>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	2b48      	cmp	r3, #72	; 0x48
 8006796:	d90f      	bls.n	80067b8 <HAL_DMA_Init+0x2ac>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	2b4e      	cmp	r3, #78	; 0x4e
 800679e:	d903      	bls.n	80067a8 <HAL_DMA_Init+0x29c>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	2b52      	cmp	r3, #82	; 0x52
 80067a6:	d907      	bls.n	80067b8 <HAL_DMA_Init+0x2ac>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	2b73      	cmp	r3, #115	; 0x73
 80067ae:	d905      	bls.n	80067bc <HAL_DMA_Init+0x2b0>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	2b77      	cmp	r3, #119	; 0x77
 80067b6:	d801      	bhi.n	80067bc <HAL_DMA_Init+0x2b0>
 80067b8:	2301      	movs	r3, #1
 80067ba:	e000      	b.n	80067be <HAL_DMA_Init+0x2b2>
 80067bc:	2300      	movs	r3, #0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d003      	beq.n	80067ca <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067c8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	697a      	ldr	r2, [r7, #20]
 80067d0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	f023 0307 	bic.w	r3, r3, #7
 80067e0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e6:	697a      	ldr	r2, [r7, #20]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f0:	2b04      	cmp	r3, #4
 80067f2:	d117      	bne.n	8006824 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f8:	697a      	ldr	r2, [r7, #20]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00e      	beq.n	8006824 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f002 fbe0 	bl	8008fcc <DMA_CheckFifoParam>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d008      	beq.n	8006824 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2240      	movs	r2, #64	; 0x40
 8006816:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e1fd      	b.n	8006c20 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	697a      	ldr	r2, [r7, #20]
 800682a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f002 fb1b 	bl	8008e68 <DMA_CalcBaseAndBitshift>
 8006832:	4603      	mov	r3, r0
 8006834:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800683a:	f003 031f 	and.w	r3, r3, #31
 800683e:	223f      	movs	r2, #63	; 0x3f
 8006840:	409a      	lsls	r2, r3
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	609a      	str	r2, [r3, #8]
 8006846:	e0fd      	b.n	8006a44 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a28      	ldr	r2, [pc, #160]	; (80068f0 <HAL_DMA_Init+0x3e4>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d04a      	beq.n	80068e8 <HAL_DMA_Init+0x3dc>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a27      	ldr	r2, [pc, #156]	; (80068f4 <HAL_DMA_Init+0x3e8>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d045      	beq.n	80068e8 <HAL_DMA_Init+0x3dc>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a25      	ldr	r2, [pc, #148]	; (80068f8 <HAL_DMA_Init+0x3ec>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d040      	beq.n	80068e8 <HAL_DMA_Init+0x3dc>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a24      	ldr	r2, [pc, #144]	; (80068fc <HAL_DMA_Init+0x3f0>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d03b      	beq.n	80068e8 <HAL_DMA_Init+0x3dc>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a22      	ldr	r2, [pc, #136]	; (8006900 <HAL_DMA_Init+0x3f4>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d036      	beq.n	80068e8 <HAL_DMA_Init+0x3dc>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a21      	ldr	r2, [pc, #132]	; (8006904 <HAL_DMA_Init+0x3f8>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d031      	beq.n	80068e8 <HAL_DMA_Init+0x3dc>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a1f      	ldr	r2, [pc, #124]	; (8006908 <HAL_DMA_Init+0x3fc>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d02c      	beq.n	80068e8 <HAL_DMA_Init+0x3dc>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a1e      	ldr	r2, [pc, #120]	; (800690c <HAL_DMA_Init+0x400>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d027      	beq.n	80068e8 <HAL_DMA_Init+0x3dc>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a1c      	ldr	r2, [pc, #112]	; (8006910 <HAL_DMA_Init+0x404>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d022      	beq.n	80068e8 <HAL_DMA_Init+0x3dc>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a1b      	ldr	r2, [pc, #108]	; (8006914 <HAL_DMA_Init+0x408>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d01d      	beq.n	80068e8 <HAL_DMA_Init+0x3dc>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a19      	ldr	r2, [pc, #100]	; (8006918 <HAL_DMA_Init+0x40c>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d018      	beq.n	80068e8 <HAL_DMA_Init+0x3dc>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a18      	ldr	r2, [pc, #96]	; (800691c <HAL_DMA_Init+0x410>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d013      	beq.n	80068e8 <HAL_DMA_Init+0x3dc>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a16      	ldr	r2, [pc, #88]	; (8006920 <HAL_DMA_Init+0x414>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d00e      	beq.n	80068e8 <HAL_DMA_Init+0x3dc>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a15      	ldr	r2, [pc, #84]	; (8006924 <HAL_DMA_Init+0x418>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d009      	beq.n	80068e8 <HAL_DMA_Init+0x3dc>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a13      	ldr	r2, [pc, #76]	; (8006928 <HAL_DMA_Init+0x41c>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d004      	beq.n	80068e8 <HAL_DMA_Init+0x3dc>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a12      	ldr	r2, [pc, #72]	; (800692c <HAL_DMA_Init+0x420>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d123      	bne.n	8006930 <HAL_DMA_Init+0x424>
 80068e8:	2301      	movs	r3, #1
 80068ea:	e022      	b.n	8006932 <HAL_DMA_Init+0x426>
 80068ec:	fe10803f 	.word	0xfe10803f
 80068f0:	48022c08 	.word	0x48022c08
 80068f4:	48022c1c 	.word	0x48022c1c
 80068f8:	48022c30 	.word	0x48022c30
 80068fc:	48022c44 	.word	0x48022c44
 8006900:	48022c58 	.word	0x48022c58
 8006904:	48022c6c 	.word	0x48022c6c
 8006908:	48022c80 	.word	0x48022c80
 800690c:	48022c94 	.word	0x48022c94
 8006910:	58025408 	.word	0x58025408
 8006914:	5802541c 	.word	0x5802541c
 8006918:	58025430 	.word	0x58025430
 800691c:	58025444 	.word	0x58025444
 8006920:	58025458 	.word	0x58025458
 8006924:	5802546c 	.word	0x5802546c
 8006928:	58025480 	.word	0x58025480
 800692c:	58025494 	.word	0x58025494
 8006930:	2300      	movs	r3, #0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d07d      	beq.n	8006a32 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a7f      	ldr	r2, [pc, #508]	; (8006b38 <HAL_DMA_Init+0x62c>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d021      	beq.n	8006984 <HAL_DMA_Init+0x478>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a7d      	ldr	r2, [pc, #500]	; (8006b3c <HAL_DMA_Init+0x630>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d01c      	beq.n	8006984 <HAL_DMA_Init+0x478>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a7c      	ldr	r2, [pc, #496]	; (8006b40 <HAL_DMA_Init+0x634>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d017      	beq.n	8006984 <HAL_DMA_Init+0x478>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a7a      	ldr	r2, [pc, #488]	; (8006b44 <HAL_DMA_Init+0x638>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d012      	beq.n	8006984 <HAL_DMA_Init+0x478>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a79      	ldr	r2, [pc, #484]	; (8006b48 <HAL_DMA_Init+0x63c>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d00d      	beq.n	8006984 <HAL_DMA_Init+0x478>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a77      	ldr	r2, [pc, #476]	; (8006b4c <HAL_DMA_Init+0x640>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d008      	beq.n	8006984 <HAL_DMA_Init+0x478>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a76      	ldr	r2, [pc, #472]	; (8006b50 <HAL_DMA_Init+0x644>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d003      	beq.n	8006984 <HAL_DMA_Init+0x478>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a74      	ldr	r2, [pc, #464]	; (8006b54 <HAL_DMA_Init+0x648>)
 8006982:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2202      	movs	r2, #2
 8006988:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800699c:	697a      	ldr	r2, [r7, #20]
 800699e:	4b6e      	ldr	r3, [pc, #440]	; (8006b58 <HAL_DMA_Init+0x64c>)
 80069a0:	4013      	ands	r3, r2
 80069a2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	2b40      	cmp	r3, #64	; 0x40
 80069aa:	d008      	beq.n	80069be <HAL_DMA_Init+0x4b2>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	2b80      	cmp	r3, #128	; 0x80
 80069b2:	d102      	bne.n	80069ba <HAL_DMA_Init+0x4ae>
 80069b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80069b8:	e002      	b.n	80069c0 <HAL_DMA_Init+0x4b4>
 80069ba:	2300      	movs	r3, #0
 80069bc:	e000      	b.n	80069c0 <HAL_DMA_Init+0x4b4>
 80069be:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	68d2      	ldr	r2, [r2, #12]
 80069c4:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80069c6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80069ce:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	695b      	ldr	r3, [r3, #20]
 80069d4:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80069d6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	699b      	ldr	r3, [r3, #24]
 80069dc:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80069de:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	69db      	ldr	r3, [r3, #28]
 80069e4:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80069e6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6a1b      	ldr	r3, [r3, #32]
 80069ec:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80069ee:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80069f0:	697a      	ldr	r2, [r7, #20]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	697a      	ldr	r2, [r7, #20]
 80069fc:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	461a      	mov	r2, r3
 8006a04:	4b55      	ldr	r3, [pc, #340]	; (8006b5c <HAL_DMA_Init+0x650>)
 8006a06:	4413      	add	r3, r2
 8006a08:	4a55      	ldr	r2, [pc, #340]	; (8006b60 <HAL_DMA_Init+0x654>)
 8006a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a0e:	091b      	lsrs	r3, r3, #4
 8006a10:	009a      	lsls	r2, r3, #2
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f002 fa26 	bl	8008e68 <DMA_CalcBaseAndBitshift>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a24:	f003 031f 	and.w	r3, r3, #31
 8006a28:	2201      	movs	r2, #1
 8006a2a:	409a      	lsls	r2, r3
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	605a      	str	r2, [r3, #4]
 8006a30:	e008      	b.n	8006a44 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2240      	movs	r2, #64	; 0x40
 8006a36:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2203      	movs	r2, #3
 8006a3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	e0ed      	b.n	8006c20 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a46      	ldr	r2, [pc, #280]	; (8006b64 <HAL_DMA_Init+0x658>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d072      	beq.n	8006b34 <HAL_DMA_Init+0x628>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a45      	ldr	r2, [pc, #276]	; (8006b68 <HAL_DMA_Init+0x65c>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d06d      	beq.n	8006b34 <HAL_DMA_Init+0x628>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a43      	ldr	r2, [pc, #268]	; (8006b6c <HAL_DMA_Init+0x660>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d068      	beq.n	8006b34 <HAL_DMA_Init+0x628>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a42      	ldr	r2, [pc, #264]	; (8006b70 <HAL_DMA_Init+0x664>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d063      	beq.n	8006b34 <HAL_DMA_Init+0x628>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a40      	ldr	r2, [pc, #256]	; (8006b74 <HAL_DMA_Init+0x668>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d05e      	beq.n	8006b34 <HAL_DMA_Init+0x628>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a3f      	ldr	r2, [pc, #252]	; (8006b78 <HAL_DMA_Init+0x66c>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d059      	beq.n	8006b34 <HAL_DMA_Init+0x628>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a3d      	ldr	r2, [pc, #244]	; (8006b7c <HAL_DMA_Init+0x670>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d054      	beq.n	8006b34 <HAL_DMA_Init+0x628>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a3c      	ldr	r2, [pc, #240]	; (8006b80 <HAL_DMA_Init+0x674>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d04f      	beq.n	8006b34 <HAL_DMA_Init+0x628>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a3a      	ldr	r2, [pc, #232]	; (8006b84 <HAL_DMA_Init+0x678>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d04a      	beq.n	8006b34 <HAL_DMA_Init+0x628>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a39      	ldr	r2, [pc, #228]	; (8006b88 <HAL_DMA_Init+0x67c>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d045      	beq.n	8006b34 <HAL_DMA_Init+0x628>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a37      	ldr	r2, [pc, #220]	; (8006b8c <HAL_DMA_Init+0x680>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d040      	beq.n	8006b34 <HAL_DMA_Init+0x628>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a36      	ldr	r2, [pc, #216]	; (8006b90 <HAL_DMA_Init+0x684>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d03b      	beq.n	8006b34 <HAL_DMA_Init+0x628>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a34      	ldr	r2, [pc, #208]	; (8006b94 <HAL_DMA_Init+0x688>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d036      	beq.n	8006b34 <HAL_DMA_Init+0x628>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a33      	ldr	r2, [pc, #204]	; (8006b98 <HAL_DMA_Init+0x68c>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d031      	beq.n	8006b34 <HAL_DMA_Init+0x628>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a31      	ldr	r2, [pc, #196]	; (8006b9c <HAL_DMA_Init+0x690>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d02c      	beq.n	8006b34 <HAL_DMA_Init+0x628>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a30      	ldr	r2, [pc, #192]	; (8006ba0 <HAL_DMA_Init+0x694>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d027      	beq.n	8006b34 <HAL_DMA_Init+0x628>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a13      	ldr	r2, [pc, #76]	; (8006b38 <HAL_DMA_Init+0x62c>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d022      	beq.n	8006b34 <HAL_DMA_Init+0x628>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a12      	ldr	r2, [pc, #72]	; (8006b3c <HAL_DMA_Init+0x630>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d01d      	beq.n	8006b34 <HAL_DMA_Init+0x628>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a10      	ldr	r2, [pc, #64]	; (8006b40 <HAL_DMA_Init+0x634>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d018      	beq.n	8006b34 <HAL_DMA_Init+0x628>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a0f      	ldr	r2, [pc, #60]	; (8006b44 <HAL_DMA_Init+0x638>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d013      	beq.n	8006b34 <HAL_DMA_Init+0x628>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a0d      	ldr	r2, [pc, #52]	; (8006b48 <HAL_DMA_Init+0x63c>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d00e      	beq.n	8006b34 <HAL_DMA_Init+0x628>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a0c      	ldr	r2, [pc, #48]	; (8006b4c <HAL_DMA_Init+0x640>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d009      	beq.n	8006b34 <HAL_DMA_Init+0x628>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a0a      	ldr	r2, [pc, #40]	; (8006b50 <HAL_DMA_Init+0x644>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d004      	beq.n	8006b34 <HAL_DMA_Init+0x628>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a09      	ldr	r2, [pc, #36]	; (8006b54 <HAL_DMA_Init+0x648>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d137      	bne.n	8006ba4 <HAL_DMA_Init+0x698>
 8006b34:	2301      	movs	r3, #1
 8006b36:	e036      	b.n	8006ba6 <HAL_DMA_Init+0x69a>
 8006b38:	58025408 	.word	0x58025408
 8006b3c:	5802541c 	.word	0x5802541c
 8006b40:	58025430 	.word	0x58025430
 8006b44:	58025444 	.word	0x58025444
 8006b48:	58025458 	.word	0x58025458
 8006b4c:	5802546c 	.word	0x5802546c
 8006b50:	58025480 	.word	0x58025480
 8006b54:	58025494 	.word	0x58025494
 8006b58:	fffe000f 	.word	0xfffe000f
 8006b5c:	a7fdabf8 	.word	0xa7fdabf8
 8006b60:	cccccccd 	.word	0xcccccccd
 8006b64:	40020010 	.word	0x40020010
 8006b68:	40020028 	.word	0x40020028
 8006b6c:	40020040 	.word	0x40020040
 8006b70:	40020058 	.word	0x40020058
 8006b74:	40020070 	.word	0x40020070
 8006b78:	40020088 	.word	0x40020088
 8006b7c:	400200a0 	.word	0x400200a0
 8006b80:	400200b8 	.word	0x400200b8
 8006b84:	40020410 	.word	0x40020410
 8006b88:	40020428 	.word	0x40020428
 8006b8c:	40020440 	.word	0x40020440
 8006b90:	40020458 	.word	0x40020458
 8006b94:	40020470 	.word	0x40020470
 8006b98:	40020488 	.word	0x40020488
 8006b9c:	400204a0 	.word	0x400204a0
 8006ba0:	400204b8 	.word	0x400204b8
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d032      	beq.n	8006c10 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f002 fa8a 	bl	80090c4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	2b80      	cmp	r3, #128	; 0x80
 8006bb6:	d102      	bne.n	8006bbe <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	685a      	ldr	r2, [r3, #4]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bc6:	b2d2      	uxtb	r2, r2
 8006bc8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006bd2:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d010      	beq.n	8006bfe <HAL_DMA_Init+0x6f2>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	2b08      	cmp	r3, #8
 8006be2:	d80c      	bhi.n	8006bfe <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f002 fb07 	bl	80091f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bee:	2200      	movs	r2, #0
 8006bf0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006bfa:	605a      	str	r2, [r3, #4]
 8006bfc:	e008      	b.n	8006c10 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3718      	adds	r7, #24
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b086      	sub	sp, #24
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	607a      	str	r2, [r7, #4]
 8006c34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c36:	2300      	movs	r3, #0
 8006c38:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d101      	bne.n	8006c44 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	e226      	b.n	8007092 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d101      	bne.n	8006c52 <HAL_DMA_Start_IT+0x2a>
 8006c4e:	2302      	movs	r3, #2
 8006c50:	e21f      	b.n	8007092 <HAL_DMA_Start_IT+0x46a>
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2201      	movs	r2, #1
 8006c56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	f040 820a 	bne.w	800707c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2202      	movs	r2, #2
 8006c6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2200      	movs	r2, #0
 8006c74:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a68      	ldr	r2, [pc, #416]	; (8006e1c <HAL_DMA_Start_IT+0x1f4>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d04a      	beq.n	8006d16 <HAL_DMA_Start_IT+0xee>
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a66      	ldr	r2, [pc, #408]	; (8006e20 <HAL_DMA_Start_IT+0x1f8>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d045      	beq.n	8006d16 <HAL_DMA_Start_IT+0xee>
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a65      	ldr	r2, [pc, #404]	; (8006e24 <HAL_DMA_Start_IT+0x1fc>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d040      	beq.n	8006d16 <HAL_DMA_Start_IT+0xee>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a63      	ldr	r2, [pc, #396]	; (8006e28 <HAL_DMA_Start_IT+0x200>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d03b      	beq.n	8006d16 <HAL_DMA_Start_IT+0xee>
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a62      	ldr	r2, [pc, #392]	; (8006e2c <HAL_DMA_Start_IT+0x204>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d036      	beq.n	8006d16 <HAL_DMA_Start_IT+0xee>
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a60      	ldr	r2, [pc, #384]	; (8006e30 <HAL_DMA_Start_IT+0x208>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d031      	beq.n	8006d16 <HAL_DMA_Start_IT+0xee>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a5f      	ldr	r2, [pc, #380]	; (8006e34 <HAL_DMA_Start_IT+0x20c>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d02c      	beq.n	8006d16 <HAL_DMA_Start_IT+0xee>
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a5d      	ldr	r2, [pc, #372]	; (8006e38 <HAL_DMA_Start_IT+0x210>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d027      	beq.n	8006d16 <HAL_DMA_Start_IT+0xee>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a5c      	ldr	r2, [pc, #368]	; (8006e3c <HAL_DMA_Start_IT+0x214>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d022      	beq.n	8006d16 <HAL_DMA_Start_IT+0xee>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a5a      	ldr	r2, [pc, #360]	; (8006e40 <HAL_DMA_Start_IT+0x218>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d01d      	beq.n	8006d16 <HAL_DMA_Start_IT+0xee>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a59      	ldr	r2, [pc, #356]	; (8006e44 <HAL_DMA_Start_IT+0x21c>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d018      	beq.n	8006d16 <HAL_DMA_Start_IT+0xee>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a57      	ldr	r2, [pc, #348]	; (8006e48 <HAL_DMA_Start_IT+0x220>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d013      	beq.n	8006d16 <HAL_DMA_Start_IT+0xee>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a56      	ldr	r2, [pc, #344]	; (8006e4c <HAL_DMA_Start_IT+0x224>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d00e      	beq.n	8006d16 <HAL_DMA_Start_IT+0xee>
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a54      	ldr	r2, [pc, #336]	; (8006e50 <HAL_DMA_Start_IT+0x228>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d009      	beq.n	8006d16 <HAL_DMA_Start_IT+0xee>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a53      	ldr	r2, [pc, #332]	; (8006e54 <HAL_DMA_Start_IT+0x22c>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d004      	beq.n	8006d16 <HAL_DMA_Start_IT+0xee>
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a51      	ldr	r2, [pc, #324]	; (8006e58 <HAL_DMA_Start_IT+0x230>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d108      	bne.n	8006d28 <HAL_DMA_Start_IT+0x100>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f022 0201 	bic.w	r2, r2, #1
 8006d24:	601a      	str	r2, [r3, #0]
 8006d26:	e007      	b.n	8006d38 <HAL_DMA_Start_IT+0x110>
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f022 0201 	bic.w	r2, r2, #1
 8006d36:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	68b9      	ldr	r1, [r7, #8]
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f001 feae 	bl	8008aa0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a34      	ldr	r2, [pc, #208]	; (8006e1c <HAL_DMA_Start_IT+0x1f4>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d04a      	beq.n	8006de4 <HAL_DMA_Start_IT+0x1bc>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a33      	ldr	r2, [pc, #204]	; (8006e20 <HAL_DMA_Start_IT+0x1f8>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d045      	beq.n	8006de4 <HAL_DMA_Start_IT+0x1bc>
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a31      	ldr	r2, [pc, #196]	; (8006e24 <HAL_DMA_Start_IT+0x1fc>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d040      	beq.n	8006de4 <HAL_DMA_Start_IT+0x1bc>
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a30      	ldr	r2, [pc, #192]	; (8006e28 <HAL_DMA_Start_IT+0x200>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d03b      	beq.n	8006de4 <HAL_DMA_Start_IT+0x1bc>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a2e      	ldr	r2, [pc, #184]	; (8006e2c <HAL_DMA_Start_IT+0x204>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d036      	beq.n	8006de4 <HAL_DMA_Start_IT+0x1bc>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a2d      	ldr	r2, [pc, #180]	; (8006e30 <HAL_DMA_Start_IT+0x208>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d031      	beq.n	8006de4 <HAL_DMA_Start_IT+0x1bc>
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a2b      	ldr	r2, [pc, #172]	; (8006e34 <HAL_DMA_Start_IT+0x20c>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d02c      	beq.n	8006de4 <HAL_DMA_Start_IT+0x1bc>
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a2a      	ldr	r2, [pc, #168]	; (8006e38 <HAL_DMA_Start_IT+0x210>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d027      	beq.n	8006de4 <HAL_DMA_Start_IT+0x1bc>
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a28      	ldr	r2, [pc, #160]	; (8006e3c <HAL_DMA_Start_IT+0x214>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d022      	beq.n	8006de4 <HAL_DMA_Start_IT+0x1bc>
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a27      	ldr	r2, [pc, #156]	; (8006e40 <HAL_DMA_Start_IT+0x218>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d01d      	beq.n	8006de4 <HAL_DMA_Start_IT+0x1bc>
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a25      	ldr	r2, [pc, #148]	; (8006e44 <HAL_DMA_Start_IT+0x21c>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d018      	beq.n	8006de4 <HAL_DMA_Start_IT+0x1bc>
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a24      	ldr	r2, [pc, #144]	; (8006e48 <HAL_DMA_Start_IT+0x220>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d013      	beq.n	8006de4 <HAL_DMA_Start_IT+0x1bc>
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a22      	ldr	r2, [pc, #136]	; (8006e4c <HAL_DMA_Start_IT+0x224>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d00e      	beq.n	8006de4 <HAL_DMA_Start_IT+0x1bc>
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a21      	ldr	r2, [pc, #132]	; (8006e50 <HAL_DMA_Start_IT+0x228>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d009      	beq.n	8006de4 <HAL_DMA_Start_IT+0x1bc>
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a1f      	ldr	r2, [pc, #124]	; (8006e54 <HAL_DMA_Start_IT+0x22c>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d004      	beq.n	8006de4 <HAL_DMA_Start_IT+0x1bc>
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a1e      	ldr	r2, [pc, #120]	; (8006e58 <HAL_DMA_Start_IT+0x230>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d101      	bne.n	8006de8 <HAL_DMA_Start_IT+0x1c0>
 8006de4:	2301      	movs	r3, #1
 8006de6:	e000      	b.n	8006dea <HAL_DMA_Start_IT+0x1c2>
 8006de8:	2300      	movs	r3, #0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d036      	beq.n	8006e5c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f023 021e 	bic.w	r2, r3, #30
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f042 0216 	orr.w	r2, r2, #22
 8006e00:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d03e      	beq.n	8006e88 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f042 0208 	orr.w	r2, r2, #8
 8006e18:	601a      	str	r2, [r3, #0]
 8006e1a:	e035      	b.n	8006e88 <HAL_DMA_Start_IT+0x260>
 8006e1c:	40020010 	.word	0x40020010
 8006e20:	40020028 	.word	0x40020028
 8006e24:	40020040 	.word	0x40020040
 8006e28:	40020058 	.word	0x40020058
 8006e2c:	40020070 	.word	0x40020070
 8006e30:	40020088 	.word	0x40020088
 8006e34:	400200a0 	.word	0x400200a0
 8006e38:	400200b8 	.word	0x400200b8
 8006e3c:	40020410 	.word	0x40020410
 8006e40:	40020428 	.word	0x40020428
 8006e44:	40020440 	.word	0x40020440
 8006e48:	40020458 	.word	0x40020458
 8006e4c:	40020470 	.word	0x40020470
 8006e50:	40020488 	.word	0x40020488
 8006e54:	400204a0 	.word	0x400204a0
 8006e58:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f023 020e 	bic.w	r2, r3, #14
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f042 020a 	orr.w	r2, r2, #10
 8006e6e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d007      	beq.n	8006e88 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f042 0204 	orr.w	r2, r2, #4
 8006e86:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a83      	ldr	r2, [pc, #524]	; (800709c <HAL_DMA_Start_IT+0x474>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d072      	beq.n	8006f78 <HAL_DMA_Start_IT+0x350>
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a82      	ldr	r2, [pc, #520]	; (80070a0 <HAL_DMA_Start_IT+0x478>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d06d      	beq.n	8006f78 <HAL_DMA_Start_IT+0x350>
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a80      	ldr	r2, [pc, #512]	; (80070a4 <HAL_DMA_Start_IT+0x47c>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d068      	beq.n	8006f78 <HAL_DMA_Start_IT+0x350>
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a7f      	ldr	r2, [pc, #508]	; (80070a8 <HAL_DMA_Start_IT+0x480>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d063      	beq.n	8006f78 <HAL_DMA_Start_IT+0x350>
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a7d      	ldr	r2, [pc, #500]	; (80070ac <HAL_DMA_Start_IT+0x484>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d05e      	beq.n	8006f78 <HAL_DMA_Start_IT+0x350>
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a7c      	ldr	r2, [pc, #496]	; (80070b0 <HAL_DMA_Start_IT+0x488>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d059      	beq.n	8006f78 <HAL_DMA_Start_IT+0x350>
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a7a      	ldr	r2, [pc, #488]	; (80070b4 <HAL_DMA_Start_IT+0x48c>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d054      	beq.n	8006f78 <HAL_DMA_Start_IT+0x350>
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a79      	ldr	r2, [pc, #484]	; (80070b8 <HAL_DMA_Start_IT+0x490>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d04f      	beq.n	8006f78 <HAL_DMA_Start_IT+0x350>
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a77      	ldr	r2, [pc, #476]	; (80070bc <HAL_DMA_Start_IT+0x494>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d04a      	beq.n	8006f78 <HAL_DMA_Start_IT+0x350>
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a76      	ldr	r2, [pc, #472]	; (80070c0 <HAL_DMA_Start_IT+0x498>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d045      	beq.n	8006f78 <HAL_DMA_Start_IT+0x350>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a74      	ldr	r2, [pc, #464]	; (80070c4 <HAL_DMA_Start_IT+0x49c>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d040      	beq.n	8006f78 <HAL_DMA_Start_IT+0x350>
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a73      	ldr	r2, [pc, #460]	; (80070c8 <HAL_DMA_Start_IT+0x4a0>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d03b      	beq.n	8006f78 <HAL_DMA_Start_IT+0x350>
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a71      	ldr	r2, [pc, #452]	; (80070cc <HAL_DMA_Start_IT+0x4a4>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d036      	beq.n	8006f78 <HAL_DMA_Start_IT+0x350>
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a70      	ldr	r2, [pc, #448]	; (80070d0 <HAL_DMA_Start_IT+0x4a8>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d031      	beq.n	8006f78 <HAL_DMA_Start_IT+0x350>
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a6e      	ldr	r2, [pc, #440]	; (80070d4 <HAL_DMA_Start_IT+0x4ac>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d02c      	beq.n	8006f78 <HAL_DMA_Start_IT+0x350>
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a6d      	ldr	r2, [pc, #436]	; (80070d8 <HAL_DMA_Start_IT+0x4b0>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d027      	beq.n	8006f78 <HAL_DMA_Start_IT+0x350>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a6b      	ldr	r2, [pc, #428]	; (80070dc <HAL_DMA_Start_IT+0x4b4>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d022      	beq.n	8006f78 <HAL_DMA_Start_IT+0x350>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a6a      	ldr	r2, [pc, #424]	; (80070e0 <HAL_DMA_Start_IT+0x4b8>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d01d      	beq.n	8006f78 <HAL_DMA_Start_IT+0x350>
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a68      	ldr	r2, [pc, #416]	; (80070e4 <HAL_DMA_Start_IT+0x4bc>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d018      	beq.n	8006f78 <HAL_DMA_Start_IT+0x350>
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a67      	ldr	r2, [pc, #412]	; (80070e8 <HAL_DMA_Start_IT+0x4c0>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d013      	beq.n	8006f78 <HAL_DMA_Start_IT+0x350>
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a65      	ldr	r2, [pc, #404]	; (80070ec <HAL_DMA_Start_IT+0x4c4>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d00e      	beq.n	8006f78 <HAL_DMA_Start_IT+0x350>
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a64      	ldr	r2, [pc, #400]	; (80070f0 <HAL_DMA_Start_IT+0x4c8>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d009      	beq.n	8006f78 <HAL_DMA_Start_IT+0x350>
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a62      	ldr	r2, [pc, #392]	; (80070f4 <HAL_DMA_Start_IT+0x4cc>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d004      	beq.n	8006f78 <HAL_DMA_Start_IT+0x350>
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a61      	ldr	r2, [pc, #388]	; (80070f8 <HAL_DMA_Start_IT+0x4d0>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d101      	bne.n	8006f7c <HAL_DMA_Start_IT+0x354>
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e000      	b.n	8006f7e <HAL_DMA_Start_IT+0x356>
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d01a      	beq.n	8006fb8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d007      	beq.n	8006fa0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f9e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d007      	beq.n	8006fb8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fb6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a37      	ldr	r2, [pc, #220]	; (800709c <HAL_DMA_Start_IT+0x474>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d04a      	beq.n	8007058 <HAL_DMA_Start_IT+0x430>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a36      	ldr	r2, [pc, #216]	; (80070a0 <HAL_DMA_Start_IT+0x478>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d045      	beq.n	8007058 <HAL_DMA_Start_IT+0x430>
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a34      	ldr	r2, [pc, #208]	; (80070a4 <HAL_DMA_Start_IT+0x47c>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d040      	beq.n	8007058 <HAL_DMA_Start_IT+0x430>
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a33      	ldr	r2, [pc, #204]	; (80070a8 <HAL_DMA_Start_IT+0x480>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d03b      	beq.n	8007058 <HAL_DMA_Start_IT+0x430>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a31      	ldr	r2, [pc, #196]	; (80070ac <HAL_DMA_Start_IT+0x484>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d036      	beq.n	8007058 <HAL_DMA_Start_IT+0x430>
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a30      	ldr	r2, [pc, #192]	; (80070b0 <HAL_DMA_Start_IT+0x488>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d031      	beq.n	8007058 <HAL_DMA_Start_IT+0x430>
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a2e      	ldr	r2, [pc, #184]	; (80070b4 <HAL_DMA_Start_IT+0x48c>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d02c      	beq.n	8007058 <HAL_DMA_Start_IT+0x430>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a2d      	ldr	r2, [pc, #180]	; (80070b8 <HAL_DMA_Start_IT+0x490>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d027      	beq.n	8007058 <HAL_DMA_Start_IT+0x430>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a2b      	ldr	r2, [pc, #172]	; (80070bc <HAL_DMA_Start_IT+0x494>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d022      	beq.n	8007058 <HAL_DMA_Start_IT+0x430>
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a2a      	ldr	r2, [pc, #168]	; (80070c0 <HAL_DMA_Start_IT+0x498>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d01d      	beq.n	8007058 <HAL_DMA_Start_IT+0x430>
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a28      	ldr	r2, [pc, #160]	; (80070c4 <HAL_DMA_Start_IT+0x49c>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d018      	beq.n	8007058 <HAL_DMA_Start_IT+0x430>
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a27      	ldr	r2, [pc, #156]	; (80070c8 <HAL_DMA_Start_IT+0x4a0>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d013      	beq.n	8007058 <HAL_DMA_Start_IT+0x430>
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a25      	ldr	r2, [pc, #148]	; (80070cc <HAL_DMA_Start_IT+0x4a4>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d00e      	beq.n	8007058 <HAL_DMA_Start_IT+0x430>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a24      	ldr	r2, [pc, #144]	; (80070d0 <HAL_DMA_Start_IT+0x4a8>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d009      	beq.n	8007058 <HAL_DMA_Start_IT+0x430>
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a22      	ldr	r2, [pc, #136]	; (80070d4 <HAL_DMA_Start_IT+0x4ac>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d004      	beq.n	8007058 <HAL_DMA_Start_IT+0x430>
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a21      	ldr	r2, [pc, #132]	; (80070d8 <HAL_DMA_Start_IT+0x4b0>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d108      	bne.n	800706a <HAL_DMA_Start_IT+0x442>
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f042 0201 	orr.w	r2, r2, #1
 8007066:	601a      	str	r2, [r3, #0]
 8007068:	e012      	b.n	8007090 <HAL_DMA_Start_IT+0x468>
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f042 0201 	orr.w	r2, r2, #1
 8007078:	601a      	str	r2, [r3, #0]
 800707a:	e009      	b.n	8007090 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007082:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2200      	movs	r2, #0
 8007088:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007090:	7dfb      	ldrb	r3, [r7, #23]
}
 8007092:	4618      	mov	r0, r3
 8007094:	3718      	adds	r7, #24
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	40020010 	.word	0x40020010
 80070a0:	40020028 	.word	0x40020028
 80070a4:	40020040 	.word	0x40020040
 80070a8:	40020058 	.word	0x40020058
 80070ac:	40020070 	.word	0x40020070
 80070b0:	40020088 	.word	0x40020088
 80070b4:	400200a0 	.word	0x400200a0
 80070b8:	400200b8 	.word	0x400200b8
 80070bc:	40020410 	.word	0x40020410
 80070c0:	40020428 	.word	0x40020428
 80070c4:	40020440 	.word	0x40020440
 80070c8:	40020458 	.word	0x40020458
 80070cc:	40020470 	.word	0x40020470
 80070d0:	40020488 	.word	0x40020488
 80070d4:	400204a0 	.word	0x400204a0
 80070d8:	400204b8 	.word	0x400204b8
 80070dc:	58025408 	.word	0x58025408
 80070e0:	5802541c 	.word	0x5802541c
 80070e4:	58025430 	.word	0x58025430
 80070e8:	58025444 	.word	0x58025444
 80070ec:	58025458 	.word	0x58025458
 80070f0:	5802546c 	.word	0x5802546c
 80070f4:	58025480 	.word	0x58025480
 80070f8:	58025494 	.word	0x58025494

080070fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b086      	sub	sp, #24
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8007104:	f7fc ffba 	bl	800407c <HAL_GetTick>
 8007108:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d101      	bne.n	8007114 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	e2dc      	b.n	80076ce <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800711a:	b2db      	uxtb	r3, r3
 800711c:	2b02      	cmp	r3, #2
 800711e:	d008      	beq.n	8007132 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2280      	movs	r2, #128	; 0x80
 8007124:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	e2cd      	b.n	80076ce <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a76      	ldr	r2, [pc, #472]	; (8007310 <HAL_DMA_Abort+0x214>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d04a      	beq.n	80071d2 <HAL_DMA_Abort+0xd6>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a74      	ldr	r2, [pc, #464]	; (8007314 <HAL_DMA_Abort+0x218>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d045      	beq.n	80071d2 <HAL_DMA_Abort+0xd6>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a73      	ldr	r2, [pc, #460]	; (8007318 <HAL_DMA_Abort+0x21c>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d040      	beq.n	80071d2 <HAL_DMA_Abort+0xd6>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a71      	ldr	r2, [pc, #452]	; (800731c <HAL_DMA_Abort+0x220>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d03b      	beq.n	80071d2 <HAL_DMA_Abort+0xd6>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a70      	ldr	r2, [pc, #448]	; (8007320 <HAL_DMA_Abort+0x224>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d036      	beq.n	80071d2 <HAL_DMA_Abort+0xd6>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a6e      	ldr	r2, [pc, #440]	; (8007324 <HAL_DMA_Abort+0x228>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d031      	beq.n	80071d2 <HAL_DMA_Abort+0xd6>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a6d      	ldr	r2, [pc, #436]	; (8007328 <HAL_DMA_Abort+0x22c>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d02c      	beq.n	80071d2 <HAL_DMA_Abort+0xd6>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a6b      	ldr	r2, [pc, #428]	; (800732c <HAL_DMA_Abort+0x230>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d027      	beq.n	80071d2 <HAL_DMA_Abort+0xd6>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a6a      	ldr	r2, [pc, #424]	; (8007330 <HAL_DMA_Abort+0x234>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d022      	beq.n	80071d2 <HAL_DMA_Abort+0xd6>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a68      	ldr	r2, [pc, #416]	; (8007334 <HAL_DMA_Abort+0x238>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d01d      	beq.n	80071d2 <HAL_DMA_Abort+0xd6>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a67      	ldr	r2, [pc, #412]	; (8007338 <HAL_DMA_Abort+0x23c>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d018      	beq.n	80071d2 <HAL_DMA_Abort+0xd6>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a65      	ldr	r2, [pc, #404]	; (800733c <HAL_DMA_Abort+0x240>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d013      	beq.n	80071d2 <HAL_DMA_Abort+0xd6>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a64      	ldr	r2, [pc, #400]	; (8007340 <HAL_DMA_Abort+0x244>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d00e      	beq.n	80071d2 <HAL_DMA_Abort+0xd6>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a62      	ldr	r2, [pc, #392]	; (8007344 <HAL_DMA_Abort+0x248>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d009      	beq.n	80071d2 <HAL_DMA_Abort+0xd6>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a61      	ldr	r2, [pc, #388]	; (8007348 <HAL_DMA_Abort+0x24c>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d004      	beq.n	80071d2 <HAL_DMA_Abort+0xd6>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a5f      	ldr	r2, [pc, #380]	; (800734c <HAL_DMA_Abort+0x250>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d101      	bne.n	80071d6 <HAL_DMA_Abort+0xda>
 80071d2:	2301      	movs	r3, #1
 80071d4:	e000      	b.n	80071d8 <HAL_DMA_Abort+0xdc>
 80071d6:	2300      	movs	r3, #0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d013      	beq.n	8007204 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f022 021e 	bic.w	r2, r2, #30
 80071ea:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	695a      	ldr	r2, [r3, #20]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071fa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	617b      	str	r3, [r7, #20]
 8007202:	e00a      	b.n	800721a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f022 020e 	bic.w	r2, r2, #14
 8007212:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a3c      	ldr	r2, [pc, #240]	; (8007310 <HAL_DMA_Abort+0x214>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d072      	beq.n	800730a <HAL_DMA_Abort+0x20e>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a3a      	ldr	r2, [pc, #232]	; (8007314 <HAL_DMA_Abort+0x218>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d06d      	beq.n	800730a <HAL_DMA_Abort+0x20e>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a39      	ldr	r2, [pc, #228]	; (8007318 <HAL_DMA_Abort+0x21c>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d068      	beq.n	800730a <HAL_DMA_Abort+0x20e>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a37      	ldr	r2, [pc, #220]	; (800731c <HAL_DMA_Abort+0x220>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d063      	beq.n	800730a <HAL_DMA_Abort+0x20e>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a36      	ldr	r2, [pc, #216]	; (8007320 <HAL_DMA_Abort+0x224>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d05e      	beq.n	800730a <HAL_DMA_Abort+0x20e>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a34      	ldr	r2, [pc, #208]	; (8007324 <HAL_DMA_Abort+0x228>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d059      	beq.n	800730a <HAL_DMA_Abort+0x20e>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a33      	ldr	r2, [pc, #204]	; (8007328 <HAL_DMA_Abort+0x22c>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d054      	beq.n	800730a <HAL_DMA_Abort+0x20e>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a31      	ldr	r2, [pc, #196]	; (800732c <HAL_DMA_Abort+0x230>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d04f      	beq.n	800730a <HAL_DMA_Abort+0x20e>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a30      	ldr	r2, [pc, #192]	; (8007330 <HAL_DMA_Abort+0x234>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d04a      	beq.n	800730a <HAL_DMA_Abort+0x20e>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a2e      	ldr	r2, [pc, #184]	; (8007334 <HAL_DMA_Abort+0x238>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d045      	beq.n	800730a <HAL_DMA_Abort+0x20e>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a2d      	ldr	r2, [pc, #180]	; (8007338 <HAL_DMA_Abort+0x23c>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d040      	beq.n	800730a <HAL_DMA_Abort+0x20e>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a2b      	ldr	r2, [pc, #172]	; (800733c <HAL_DMA_Abort+0x240>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d03b      	beq.n	800730a <HAL_DMA_Abort+0x20e>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a2a      	ldr	r2, [pc, #168]	; (8007340 <HAL_DMA_Abort+0x244>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d036      	beq.n	800730a <HAL_DMA_Abort+0x20e>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a28      	ldr	r2, [pc, #160]	; (8007344 <HAL_DMA_Abort+0x248>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d031      	beq.n	800730a <HAL_DMA_Abort+0x20e>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a27      	ldr	r2, [pc, #156]	; (8007348 <HAL_DMA_Abort+0x24c>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d02c      	beq.n	800730a <HAL_DMA_Abort+0x20e>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a25      	ldr	r2, [pc, #148]	; (800734c <HAL_DMA_Abort+0x250>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d027      	beq.n	800730a <HAL_DMA_Abort+0x20e>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a24      	ldr	r2, [pc, #144]	; (8007350 <HAL_DMA_Abort+0x254>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d022      	beq.n	800730a <HAL_DMA_Abort+0x20e>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a22      	ldr	r2, [pc, #136]	; (8007354 <HAL_DMA_Abort+0x258>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d01d      	beq.n	800730a <HAL_DMA_Abort+0x20e>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a21      	ldr	r2, [pc, #132]	; (8007358 <HAL_DMA_Abort+0x25c>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d018      	beq.n	800730a <HAL_DMA_Abort+0x20e>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a1f      	ldr	r2, [pc, #124]	; (800735c <HAL_DMA_Abort+0x260>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d013      	beq.n	800730a <HAL_DMA_Abort+0x20e>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a1e      	ldr	r2, [pc, #120]	; (8007360 <HAL_DMA_Abort+0x264>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d00e      	beq.n	800730a <HAL_DMA_Abort+0x20e>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a1c      	ldr	r2, [pc, #112]	; (8007364 <HAL_DMA_Abort+0x268>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d009      	beq.n	800730a <HAL_DMA_Abort+0x20e>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a1b      	ldr	r2, [pc, #108]	; (8007368 <HAL_DMA_Abort+0x26c>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d004      	beq.n	800730a <HAL_DMA_Abort+0x20e>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a19      	ldr	r2, [pc, #100]	; (800736c <HAL_DMA_Abort+0x270>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d132      	bne.n	8007370 <HAL_DMA_Abort+0x274>
 800730a:	2301      	movs	r3, #1
 800730c:	e031      	b.n	8007372 <HAL_DMA_Abort+0x276>
 800730e:	bf00      	nop
 8007310:	40020010 	.word	0x40020010
 8007314:	40020028 	.word	0x40020028
 8007318:	40020040 	.word	0x40020040
 800731c:	40020058 	.word	0x40020058
 8007320:	40020070 	.word	0x40020070
 8007324:	40020088 	.word	0x40020088
 8007328:	400200a0 	.word	0x400200a0
 800732c:	400200b8 	.word	0x400200b8
 8007330:	40020410 	.word	0x40020410
 8007334:	40020428 	.word	0x40020428
 8007338:	40020440 	.word	0x40020440
 800733c:	40020458 	.word	0x40020458
 8007340:	40020470 	.word	0x40020470
 8007344:	40020488 	.word	0x40020488
 8007348:	400204a0 	.word	0x400204a0
 800734c:	400204b8 	.word	0x400204b8
 8007350:	58025408 	.word	0x58025408
 8007354:	5802541c 	.word	0x5802541c
 8007358:	58025430 	.word	0x58025430
 800735c:	58025444 	.word	0x58025444
 8007360:	58025458 	.word	0x58025458
 8007364:	5802546c 	.word	0x5802546c
 8007368:	58025480 	.word	0x58025480
 800736c:	58025494 	.word	0x58025494
 8007370:	2300      	movs	r3, #0
 8007372:	2b00      	cmp	r3, #0
 8007374:	d007      	beq.n	8007386 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007380:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007384:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a6d      	ldr	r2, [pc, #436]	; (8007540 <HAL_DMA_Abort+0x444>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d04a      	beq.n	8007426 <HAL_DMA_Abort+0x32a>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a6b      	ldr	r2, [pc, #428]	; (8007544 <HAL_DMA_Abort+0x448>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d045      	beq.n	8007426 <HAL_DMA_Abort+0x32a>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a6a      	ldr	r2, [pc, #424]	; (8007548 <HAL_DMA_Abort+0x44c>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d040      	beq.n	8007426 <HAL_DMA_Abort+0x32a>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a68      	ldr	r2, [pc, #416]	; (800754c <HAL_DMA_Abort+0x450>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d03b      	beq.n	8007426 <HAL_DMA_Abort+0x32a>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a67      	ldr	r2, [pc, #412]	; (8007550 <HAL_DMA_Abort+0x454>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d036      	beq.n	8007426 <HAL_DMA_Abort+0x32a>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a65      	ldr	r2, [pc, #404]	; (8007554 <HAL_DMA_Abort+0x458>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d031      	beq.n	8007426 <HAL_DMA_Abort+0x32a>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a64      	ldr	r2, [pc, #400]	; (8007558 <HAL_DMA_Abort+0x45c>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d02c      	beq.n	8007426 <HAL_DMA_Abort+0x32a>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a62      	ldr	r2, [pc, #392]	; (800755c <HAL_DMA_Abort+0x460>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d027      	beq.n	8007426 <HAL_DMA_Abort+0x32a>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a61      	ldr	r2, [pc, #388]	; (8007560 <HAL_DMA_Abort+0x464>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d022      	beq.n	8007426 <HAL_DMA_Abort+0x32a>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a5f      	ldr	r2, [pc, #380]	; (8007564 <HAL_DMA_Abort+0x468>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d01d      	beq.n	8007426 <HAL_DMA_Abort+0x32a>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a5e      	ldr	r2, [pc, #376]	; (8007568 <HAL_DMA_Abort+0x46c>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d018      	beq.n	8007426 <HAL_DMA_Abort+0x32a>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a5c      	ldr	r2, [pc, #368]	; (800756c <HAL_DMA_Abort+0x470>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d013      	beq.n	8007426 <HAL_DMA_Abort+0x32a>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a5b      	ldr	r2, [pc, #364]	; (8007570 <HAL_DMA_Abort+0x474>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d00e      	beq.n	8007426 <HAL_DMA_Abort+0x32a>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a59      	ldr	r2, [pc, #356]	; (8007574 <HAL_DMA_Abort+0x478>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d009      	beq.n	8007426 <HAL_DMA_Abort+0x32a>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a58      	ldr	r2, [pc, #352]	; (8007578 <HAL_DMA_Abort+0x47c>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d004      	beq.n	8007426 <HAL_DMA_Abort+0x32a>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a56      	ldr	r2, [pc, #344]	; (800757c <HAL_DMA_Abort+0x480>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d108      	bne.n	8007438 <HAL_DMA_Abort+0x33c>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f022 0201 	bic.w	r2, r2, #1
 8007434:	601a      	str	r2, [r3, #0]
 8007436:	e007      	b.n	8007448 <HAL_DMA_Abort+0x34c>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f022 0201 	bic.w	r2, r2, #1
 8007446:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007448:	e013      	b.n	8007472 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800744a:	f7fc fe17 	bl	800407c <HAL_GetTick>
 800744e:	4602      	mov	r2, r0
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	1ad3      	subs	r3, r2, r3
 8007454:	2b05      	cmp	r3, #5
 8007456:	d90c      	bls.n	8007472 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2220      	movs	r2, #32
 800745c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2203      	movs	r2, #3
 8007462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e12d      	b.n	80076ce <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f003 0301 	and.w	r3, r3, #1
 800747a:	2b00      	cmp	r3, #0
 800747c:	d1e5      	bne.n	800744a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a2f      	ldr	r2, [pc, #188]	; (8007540 <HAL_DMA_Abort+0x444>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d04a      	beq.n	800751e <HAL_DMA_Abort+0x422>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a2d      	ldr	r2, [pc, #180]	; (8007544 <HAL_DMA_Abort+0x448>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d045      	beq.n	800751e <HAL_DMA_Abort+0x422>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a2c      	ldr	r2, [pc, #176]	; (8007548 <HAL_DMA_Abort+0x44c>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d040      	beq.n	800751e <HAL_DMA_Abort+0x422>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a2a      	ldr	r2, [pc, #168]	; (800754c <HAL_DMA_Abort+0x450>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d03b      	beq.n	800751e <HAL_DMA_Abort+0x422>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a29      	ldr	r2, [pc, #164]	; (8007550 <HAL_DMA_Abort+0x454>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d036      	beq.n	800751e <HAL_DMA_Abort+0x422>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a27      	ldr	r2, [pc, #156]	; (8007554 <HAL_DMA_Abort+0x458>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d031      	beq.n	800751e <HAL_DMA_Abort+0x422>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a26      	ldr	r2, [pc, #152]	; (8007558 <HAL_DMA_Abort+0x45c>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d02c      	beq.n	800751e <HAL_DMA_Abort+0x422>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a24      	ldr	r2, [pc, #144]	; (800755c <HAL_DMA_Abort+0x460>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d027      	beq.n	800751e <HAL_DMA_Abort+0x422>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a23      	ldr	r2, [pc, #140]	; (8007560 <HAL_DMA_Abort+0x464>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d022      	beq.n	800751e <HAL_DMA_Abort+0x422>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a21      	ldr	r2, [pc, #132]	; (8007564 <HAL_DMA_Abort+0x468>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d01d      	beq.n	800751e <HAL_DMA_Abort+0x422>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a20      	ldr	r2, [pc, #128]	; (8007568 <HAL_DMA_Abort+0x46c>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d018      	beq.n	800751e <HAL_DMA_Abort+0x422>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a1e      	ldr	r2, [pc, #120]	; (800756c <HAL_DMA_Abort+0x470>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d013      	beq.n	800751e <HAL_DMA_Abort+0x422>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a1d      	ldr	r2, [pc, #116]	; (8007570 <HAL_DMA_Abort+0x474>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d00e      	beq.n	800751e <HAL_DMA_Abort+0x422>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a1b      	ldr	r2, [pc, #108]	; (8007574 <HAL_DMA_Abort+0x478>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d009      	beq.n	800751e <HAL_DMA_Abort+0x422>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a1a      	ldr	r2, [pc, #104]	; (8007578 <HAL_DMA_Abort+0x47c>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d004      	beq.n	800751e <HAL_DMA_Abort+0x422>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a18      	ldr	r2, [pc, #96]	; (800757c <HAL_DMA_Abort+0x480>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d101      	bne.n	8007522 <HAL_DMA_Abort+0x426>
 800751e:	2301      	movs	r3, #1
 8007520:	e000      	b.n	8007524 <HAL_DMA_Abort+0x428>
 8007522:	2300      	movs	r3, #0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d02b      	beq.n	8007580 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800752c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007532:	f003 031f 	and.w	r3, r3, #31
 8007536:	223f      	movs	r2, #63	; 0x3f
 8007538:	409a      	lsls	r2, r3
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	609a      	str	r2, [r3, #8]
 800753e:	e02a      	b.n	8007596 <HAL_DMA_Abort+0x49a>
 8007540:	40020010 	.word	0x40020010
 8007544:	40020028 	.word	0x40020028
 8007548:	40020040 	.word	0x40020040
 800754c:	40020058 	.word	0x40020058
 8007550:	40020070 	.word	0x40020070
 8007554:	40020088 	.word	0x40020088
 8007558:	400200a0 	.word	0x400200a0
 800755c:	400200b8 	.word	0x400200b8
 8007560:	40020410 	.word	0x40020410
 8007564:	40020428 	.word	0x40020428
 8007568:	40020440 	.word	0x40020440
 800756c:	40020458 	.word	0x40020458
 8007570:	40020470 	.word	0x40020470
 8007574:	40020488 	.word	0x40020488
 8007578:	400204a0 	.word	0x400204a0
 800757c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007584:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800758a:	f003 031f 	and.w	r3, r3, #31
 800758e:	2201      	movs	r2, #1
 8007590:	409a      	lsls	r2, r3
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a4f      	ldr	r2, [pc, #316]	; (80076d8 <HAL_DMA_Abort+0x5dc>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d072      	beq.n	8007686 <HAL_DMA_Abort+0x58a>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a4d      	ldr	r2, [pc, #308]	; (80076dc <HAL_DMA_Abort+0x5e0>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d06d      	beq.n	8007686 <HAL_DMA_Abort+0x58a>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a4c      	ldr	r2, [pc, #304]	; (80076e0 <HAL_DMA_Abort+0x5e4>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d068      	beq.n	8007686 <HAL_DMA_Abort+0x58a>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a4a      	ldr	r2, [pc, #296]	; (80076e4 <HAL_DMA_Abort+0x5e8>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d063      	beq.n	8007686 <HAL_DMA_Abort+0x58a>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a49      	ldr	r2, [pc, #292]	; (80076e8 <HAL_DMA_Abort+0x5ec>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d05e      	beq.n	8007686 <HAL_DMA_Abort+0x58a>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a47      	ldr	r2, [pc, #284]	; (80076ec <HAL_DMA_Abort+0x5f0>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d059      	beq.n	8007686 <HAL_DMA_Abort+0x58a>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a46      	ldr	r2, [pc, #280]	; (80076f0 <HAL_DMA_Abort+0x5f4>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d054      	beq.n	8007686 <HAL_DMA_Abort+0x58a>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a44      	ldr	r2, [pc, #272]	; (80076f4 <HAL_DMA_Abort+0x5f8>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d04f      	beq.n	8007686 <HAL_DMA_Abort+0x58a>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a43      	ldr	r2, [pc, #268]	; (80076f8 <HAL_DMA_Abort+0x5fc>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d04a      	beq.n	8007686 <HAL_DMA_Abort+0x58a>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a41      	ldr	r2, [pc, #260]	; (80076fc <HAL_DMA_Abort+0x600>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d045      	beq.n	8007686 <HAL_DMA_Abort+0x58a>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a40      	ldr	r2, [pc, #256]	; (8007700 <HAL_DMA_Abort+0x604>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d040      	beq.n	8007686 <HAL_DMA_Abort+0x58a>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a3e      	ldr	r2, [pc, #248]	; (8007704 <HAL_DMA_Abort+0x608>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d03b      	beq.n	8007686 <HAL_DMA_Abort+0x58a>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a3d      	ldr	r2, [pc, #244]	; (8007708 <HAL_DMA_Abort+0x60c>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d036      	beq.n	8007686 <HAL_DMA_Abort+0x58a>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a3b      	ldr	r2, [pc, #236]	; (800770c <HAL_DMA_Abort+0x610>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d031      	beq.n	8007686 <HAL_DMA_Abort+0x58a>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a3a      	ldr	r2, [pc, #232]	; (8007710 <HAL_DMA_Abort+0x614>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d02c      	beq.n	8007686 <HAL_DMA_Abort+0x58a>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a38      	ldr	r2, [pc, #224]	; (8007714 <HAL_DMA_Abort+0x618>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d027      	beq.n	8007686 <HAL_DMA_Abort+0x58a>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a37      	ldr	r2, [pc, #220]	; (8007718 <HAL_DMA_Abort+0x61c>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d022      	beq.n	8007686 <HAL_DMA_Abort+0x58a>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a35      	ldr	r2, [pc, #212]	; (800771c <HAL_DMA_Abort+0x620>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d01d      	beq.n	8007686 <HAL_DMA_Abort+0x58a>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a34      	ldr	r2, [pc, #208]	; (8007720 <HAL_DMA_Abort+0x624>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d018      	beq.n	8007686 <HAL_DMA_Abort+0x58a>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a32      	ldr	r2, [pc, #200]	; (8007724 <HAL_DMA_Abort+0x628>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d013      	beq.n	8007686 <HAL_DMA_Abort+0x58a>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a31      	ldr	r2, [pc, #196]	; (8007728 <HAL_DMA_Abort+0x62c>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d00e      	beq.n	8007686 <HAL_DMA_Abort+0x58a>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a2f      	ldr	r2, [pc, #188]	; (800772c <HAL_DMA_Abort+0x630>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d009      	beq.n	8007686 <HAL_DMA_Abort+0x58a>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a2e      	ldr	r2, [pc, #184]	; (8007730 <HAL_DMA_Abort+0x634>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d004      	beq.n	8007686 <HAL_DMA_Abort+0x58a>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a2c      	ldr	r2, [pc, #176]	; (8007734 <HAL_DMA_Abort+0x638>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d101      	bne.n	800768a <HAL_DMA_Abort+0x58e>
 8007686:	2301      	movs	r3, #1
 8007688:	e000      	b.n	800768c <HAL_DMA_Abort+0x590>
 800768a:	2300      	movs	r3, #0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d015      	beq.n	80076bc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007698:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00c      	beq.n	80076bc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076b0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80076ba:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80076cc:	2300      	movs	r3, #0
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3718      	adds	r7, #24
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	40020010 	.word	0x40020010
 80076dc:	40020028 	.word	0x40020028
 80076e0:	40020040 	.word	0x40020040
 80076e4:	40020058 	.word	0x40020058
 80076e8:	40020070 	.word	0x40020070
 80076ec:	40020088 	.word	0x40020088
 80076f0:	400200a0 	.word	0x400200a0
 80076f4:	400200b8 	.word	0x400200b8
 80076f8:	40020410 	.word	0x40020410
 80076fc:	40020428 	.word	0x40020428
 8007700:	40020440 	.word	0x40020440
 8007704:	40020458 	.word	0x40020458
 8007708:	40020470 	.word	0x40020470
 800770c:	40020488 	.word	0x40020488
 8007710:	400204a0 	.word	0x400204a0
 8007714:	400204b8 	.word	0x400204b8
 8007718:	58025408 	.word	0x58025408
 800771c:	5802541c 	.word	0x5802541c
 8007720:	58025430 	.word	0x58025430
 8007724:	58025444 	.word	0x58025444
 8007728:	58025458 	.word	0x58025458
 800772c:	5802546c 	.word	0x5802546c
 8007730:	58025480 	.word	0x58025480
 8007734:	58025494 	.word	0x58025494

08007738 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d101      	bne.n	800774a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	e237      	b.n	8007bba <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007750:	b2db      	uxtb	r3, r3
 8007752:	2b02      	cmp	r3, #2
 8007754:	d004      	beq.n	8007760 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2280      	movs	r2, #128	; 0x80
 800775a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	e22c      	b.n	8007bba <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a5c      	ldr	r2, [pc, #368]	; (80078d8 <HAL_DMA_Abort_IT+0x1a0>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d04a      	beq.n	8007800 <HAL_DMA_Abort_IT+0xc8>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a5b      	ldr	r2, [pc, #364]	; (80078dc <HAL_DMA_Abort_IT+0x1a4>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d045      	beq.n	8007800 <HAL_DMA_Abort_IT+0xc8>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a59      	ldr	r2, [pc, #356]	; (80078e0 <HAL_DMA_Abort_IT+0x1a8>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d040      	beq.n	8007800 <HAL_DMA_Abort_IT+0xc8>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a58      	ldr	r2, [pc, #352]	; (80078e4 <HAL_DMA_Abort_IT+0x1ac>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d03b      	beq.n	8007800 <HAL_DMA_Abort_IT+0xc8>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a56      	ldr	r2, [pc, #344]	; (80078e8 <HAL_DMA_Abort_IT+0x1b0>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d036      	beq.n	8007800 <HAL_DMA_Abort_IT+0xc8>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a55      	ldr	r2, [pc, #340]	; (80078ec <HAL_DMA_Abort_IT+0x1b4>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d031      	beq.n	8007800 <HAL_DMA_Abort_IT+0xc8>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a53      	ldr	r2, [pc, #332]	; (80078f0 <HAL_DMA_Abort_IT+0x1b8>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d02c      	beq.n	8007800 <HAL_DMA_Abort_IT+0xc8>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a52      	ldr	r2, [pc, #328]	; (80078f4 <HAL_DMA_Abort_IT+0x1bc>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d027      	beq.n	8007800 <HAL_DMA_Abort_IT+0xc8>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a50      	ldr	r2, [pc, #320]	; (80078f8 <HAL_DMA_Abort_IT+0x1c0>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d022      	beq.n	8007800 <HAL_DMA_Abort_IT+0xc8>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a4f      	ldr	r2, [pc, #316]	; (80078fc <HAL_DMA_Abort_IT+0x1c4>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d01d      	beq.n	8007800 <HAL_DMA_Abort_IT+0xc8>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a4d      	ldr	r2, [pc, #308]	; (8007900 <HAL_DMA_Abort_IT+0x1c8>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d018      	beq.n	8007800 <HAL_DMA_Abort_IT+0xc8>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a4c      	ldr	r2, [pc, #304]	; (8007904 <HAL_DMA_Abort_IT+0x1cc>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d013      	beq.n	8007800 <HAL_DMA_Abort_IT+0xc8>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a4a      	ldr	r2, [pc, #296]	; (8007908 <HAL_DMA_Abort_IT+0x1d0>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d00e      	beq.n	8007800 <HAL_DMA_Abort_IT+0xc8>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a49      	ldr	r2, [pc, #292]	; (800790c <HAL_DMA_Abort_IT+0x1d4>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d009      	beq.n	8007800 <HAL_DMA_Abort_IT+0xc8>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a47      	ldr	r2, [pc, #284]	; (8007910 <HAL_DMA_Abort_IT+0x1d8>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d004      	beq.n	8007800 <HAL_DMA_Abort_IT+0xc8>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a46      	ldr	r2, [pc, #280]	; (8007914 <HAL_DMA_Abort_IT+0x1dc>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d101      	bne.n	8007804 <HAL_DMA_Abort_IT+0xcc>
 8007800:	2301      	movs	r3, #1
 8007802:	e000      	b.n	8007806 <HAL_DMA_Abort_IT+0xce>
 8007804:	2300      	movs	r3, #0
 8007806:	2b00      	cmp	r3, #0
 8007808:	f000 8086 	beq.w	8007918 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2204      	movs	r2, #4
 8007810:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a2f      	ldr	r2, [pc, #188]	; (80078d8 <HAL_DMA_Abort_IT+0x1a0>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d04a      	beq.n	80078b4 <HAL_DMA_Abort_IT+0x17c>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a2e      	ldr	r2, [pc, #184]	; (80078dc <HAL_DMA_Abort_IT+0x1a4>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d045      	beq.n	80078b4 <HAL_DMA_Abort_IT+0x17c>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a2c      	ldr	r2, [pc, #176]	; (80078e0 <HAL_DMA_Abort_IT+0x1a8>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d040      	beq.n	80078b4 <HAL_DMA_Abort_IT+0x17c>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a2b      	ldr	r2, [pc, #172]	; (80078e4 <HAL_DMA_Abort_IT+0x1ac>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d03b      	beq.n	80078b4 <HAL_DMA_Abort_IT+0x17c>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a29      	ldr	r2, [pc, #164]	; (80078e8 <HAL_DMA_Abort_IT+0x1b0>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d036      	beq.n	80078b4 <HAL_DMA_Abort_IT+0x17c>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a28      	ldr	r2, [pc, #160]	; (80078ec <HAL_DMA_Abort_IT+0x1b4>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d031      	beq.n	80078b4 <HAL_DMA_Abort_IT+0x17c>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a26      	ldr	r2, [pc, #152]	; (80078f0 <HAL_DMA_Abort_IT+0x1b8>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d02c      	beq.n	80078b4 <HAL_DMA_Abort_IT+0x17c>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a25      	ldr	r2, [pc, #148]	; (80078f4 <HAL_DMA_Abort_IT+0x1bc>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d027      	beq.n	80078b4 <HAL_DMA_Abort_IT+0x17c>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a23      	ldr	r2, [pc, #140]	; (80078f8 <HAL_DMA_Abort_IT+0x1c0>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d022      	beq.n	80078b4 <HAL_DMA_Abort_IT+0x17c>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a22      	ldr	r2, [pc, #136]	; (80078fc <HAL_DMA_Abort_IT+0x1c4>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d01d      	beq.n	80078b4 <HAL_DMA_Abort_IT+0x17c>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a20      	ldr	r2, [pc, #128]	; (8007900 <HAL_DMA_Abort_IT+0x1c8>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d018      	beq.n	80078b4 <HAL_DMA_Abort_IT+0x17c>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a1f      	ldr	r2, [pc, #124]	; (8007904 <HAL_DMA_Abort_IT+0x1cc>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d013      	beq.n	80078b4 <HAL_DMA_Abort_IT+0x17c>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a1d      	ldr	r2, [pc, #116]	; (8007908 <HAL_DMA_Abort_IT+0x1d0>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d00e      	beq.n	80078b4 <HAL_DMA_Abort_IT+0x17c>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a1c      	ldr	r2, [pc, #112]	; (800790c <HAL_DMA_Abort_IT+0x1d4>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d009      	beq.n	80078b4 <HAL_DMA_Abort_IT+0x17c>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a1a      	ldr	r2, [pc, #104]	; (8007910 <HAL_DMA_Abort_IT+0x1d8>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d004      	beq.n	80078b4 <HAL_DMA_Abort_IT+0x17c>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a19      	ldr	r2, [pc, #100]	; (8007914 <HAL_DMA_Abort_IT+0x1dc>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d108      	bne.n	80078c6 <HAL_DMA_Abort_IT+0x18e>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f022 0201 	bic.w	r2, r2, #1
 80078c2:	601a      	str	r2, [r3, #0]
 80078c4:	e178      	b.n	8007bb8 <HAL_DMA_Abort_IT+0x480>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f022 0201 	bic.w	r2, r2, #1
 80078d4:	601a      	str	r2, [r3, #0]
 80078d6:	e16f      	b.n	8007bb8 <HAL_DMA_Abort_IT+0x480>
 80078d8:	40020010 	.word	0x40020010
 80078dc:	40020028 	.word	0x40020028
 80078e0:	40020040 	.word	0x40020040
 80078e4:	40020058 	.word	0x40020058
 80078e8:	40020070 	.word	0x40020070
 80078ec:	40020088 	.word	0x40020088
 80078f0:	400200a0 	.word	0x400200a0
 80078f4:	400200b8 	.word	0x400200b8
 80078f8:	40020410 	.word	0x40020410
 80078fc:	40020428 	.word	0x40020428
 8007900:	40020440 	.word	0x40020440
 8007904:	40020458 	.word	0x40020458
 8007908:	40020470 	.word	0x40020470
 800790c:	40020488 	.word	0x40020488
 8007910:	400204a0 	.word	0x400204a0
 8007914:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f022 020e 	bic.w	r2, r2, #14
 8007926:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a6c      	ldr	r2, [pc, #432]	; (8007ae0 <HAL_DMA_Abort_IT+0x3a8>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d04a      	beq.n	80079c8 <HAL_DMA_Abort_IT+0x290>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a6b      	ldr	r2, [pc, #428]	; (8007ae4 <HAL_DMA_Abort_IT+0x3ac>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d045      	beq.n	80079c8 <HAL_DMA_Abort_IT+0x290>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a69      	ldr	r2, [pc, #420]	; (8007ae8 <HAL_DMA_Abort_IT+0x3b0>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d040      	beq.n	80079c8 <HAL_DMA_Abort_IT+0x290>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a68      	ldr	r2, [pc, #416]	; (8007aec <HAL_DMA_Abort_IT+0x3b4>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d03b      	beq.n	80079c8 <HAL_DMA_Abort_IT+0x290>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a66      	ldr	r2, [pc, #408]	; (8007af0 <HAL_DMA_Abort_IT+0x3b8>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d036      	beq.n	80079c8 <HAL_DMA_Abort_IT+0x290>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a65      	ldr	r2, [pc, #404]	; (8007af4 <HAL_DMA_Abort_IT+0x3bc>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d031      	beq.n	80079c8 <HAL_DMA_Abort_IT+0x290>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a63      	ldr	r2, [pc, #396]	; (8007af8 <HAL_DMA_Abort_IT+0x3c0>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d02c      	beq.n	80079c8 <HAL_DMA_Abort_IT+0x290>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a62      	ldr	r2, [pc, #392]	; (8007afc <HAL_DMA_Abort_IT+0x3c4>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d027      	beq.n	80079c8 <HAL_DMA_Abort_IT+0x290>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a60      	ldr	r2, [pc, #384]	; (8007b00 <HAL_DMA_Abort_IT+0x3c8>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d022      	beq.n	80079c8 <HAL_DMA_Abort_IT+0x290>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a5f      	ldr	r2, [pc, #380]	; (8007b04 <HAL_DMA_Abort_IT+0x3cc>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d01d      	beq.n	80079c8 <HAL_DMA_Abort_IT+0x290>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a5d      	ldr	r2, [pc, #372]	; (8007b08 <HAL_DMA_Abort_IT+0x3d0>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d018      	beq.n	80079c8 <HAL_DMA_Abort_IT+0x290>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a5c      	ldr	r2, [pc, #368]	; (8007b0c <HAL_DMA_Abort_IT+0x3d4>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d013      	beq.n	80079c8 <HAL_DMA_Abort_IT+0x290>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a5a      	ldr	r2, [pc, #360]	; (8007b10 <HAL_DMA_Abort_IT+0x3d8>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d00e      	beq.n	80079c8 <HAL_DMA_Abort_IT+0x290>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a59      	ldr	r2, [pc, #356]	; (8007b14 <HAL_DMA_Abort_IT+0x3dc>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d009      	beq.n	80079c8 <HAL_DMA_Abort_IT+0x290>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a57      	ldr	r2, [pc, #348]	; (8007b18 <HAL_DMA_Abort_IT+0x3e0>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d004      	beq.n	80079c8 <HAL_DMA_Abort_IT+0x290>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a56      	ldr	r2, [pc, #344]	; (8007b1c <HAL_DMA_Abort_IT+0x3e4>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d108      	bne.n	80079da <HAL_DMA_Abort_IT+0x2a2>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f022 0201 	bic.w	r2, r2, #1
 80079d6:	601a      	str	r2, [r3, #0]
 80079d8:	e007      	b.n	80079ea <HAL_DMA_Abort_IT+0x2b2>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f022 0201 	bic.w	r2, r2, #1
 80079e8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a3c      	ldr	r2, [pc, #240]	; (8007ae0 <HAL_DMA_Abort_IT+0x3a8>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d072      	beq.n	8007ada <HAL_DMA_Abort_IT+0x3a2>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a3a      	ldr	r2, [pc, #232]	; (8007ae4 <HAL_DMA_Abort_IT+0x3ac>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d06d      	beq.n	8007ada <HAL_DMA_Abort_IT+0x3a2>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a39      	ldr	r2, [pc, #228]	; (8007ae8 <HAL_DMA_Abort_IT+0x3b0>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d068      	beq.n	8007ada <HAL_DMA_Abort_IT+0x3a2>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a37      	ldr	r2, [pc, #220]	; (8007aec <HAL_DMA_Abort_IT+0x3b4>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d063      	beq.n	8007ada <HAL_DMA_Abort_IT+0x3a2>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a36      	ldr	r2, [pc, #216]	; (8007af0 <HAL_DMA_Abort_IT+0x3b8>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d05e      	beq.n	8007ada <HAL_DMA_Abort_IT+0x3a2>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a34      	ldr	r2, [pc, #208]	; (8007af4 <HAL_DMA_Abort_IT+0x3bc>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d059      	beq.n	8007ada <HAL_DMA_Abort_IT+0x3a2>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a33      	ldr	r2, [pc, #204]	; (8007af8 <HAL_DMA_Abort_IT+0x3c0>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d054      	beq.n	8007ada <HAL_DMA_Abort_IT+0x3a2>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a31      	ldr	r2, [pc, #196]	; (8007afc <HAL_DMA_Abort_IT+0x3c4>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d04f      	beq.n	8007ada <HAL_DMA_Abort_IT+0x3a2>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a30      	ldr	r2, [pc, #192]	; (8007b00 <HAL_DMA_Abort_IT+0x3c8>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d04a      	beq.n	8007ada <HAL_DMA_Abort_IT+0x3a2>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a2e      	ldr	r2, [pc, #184]	; (8007b04 <HAL_DMA_Abort_IT+0x3cc>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d045      	beq.n	8007ada <HAL_DMA_Abort_IT+0x3a2>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a2d      	ldr	r2, [pc, #180]	; (8007b08 <HAL_DMA_Abort_IT+0x3d0>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d040      	beq.n	8007ada <HAL_DMA_Abort_IT+0x3a2>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a2b      	ldr	r2, [pc, #172]	; (8007b0c <HAL_DMA_Abort_IT+0x3d4>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d03b      	beq.n	8007ada <HAL_DMA_Abort_IT+0x3a2>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a2a      	ldr	r2, [pc, #168]	; (8007b10 <HAL_DMA_Abort_IT+0x3d8>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d036      	beq.n	8007ada <HAL_DMA_Abort_IT+0x3a2>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a28      	ldr	r2, [pc, #160]	; (8007b14 <HAL_DMA_Abort_IT+0x3dc>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d031      	beq.n	8007ada <HAL_DMA_Abort_IT+0x3a2>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a27      	ldr	r2, [pc, #156]	; (8007b18 <HAL_DMA_Abort_IT+0x3e0>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d02c      	beq.n	8007ada <HAL_DMA_Abort_IT+0x3a2>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a25      	ldr	r2, [pc, #148]	; (8007b1c <HAL_DMA_Abort_IT+0x3e4>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d027      	beq.n	8007ada <HAL_DMA_Abort_IT+0x3a2>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a24      	ldr	r2, [pc, #144]	; (8007b20 <HAL_DMA_Abort_IT+0x3e8>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d022      	beq.n	8007ada <HAL_DMA_Abort_IT+0x3a2>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a22      	ldr	r2, [pc, #136]	; (8007b24 <HAL_DMA_Abort_IT+0x3ec>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d01d      	beq.n	8007ada <HAL_DMA_Abort_IT+0x3a2>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a21      	ldr	r2, [pc, #132]	; (8007b28 <HAL_DMA_Abort_IT+0x3f0>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d018      	beq.n	8007ada <HAL_DMA_Abort_IT+0x3a2>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a1f      	ldr	r2, [pc, #124]	; (8007b2c <HAL_DMA_Abort_IT+0x3f4>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d013      	beq.n	8007ada <HAL_DMA_Abort_IT+0x3a2>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a1e      	ldr	r2, [pc, #120]	; (8007b30 <HAL_DMA_Abort_IT+0x3f8>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d00e      	beq.n	8007ada <HAL_DMA_Abort_IT+0x3a2>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a1c      	ldr	r2, [pc, #112]	; (8007b34 <HAL_DMA_Abort_IT+0x3fc>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d009      	beq.n	8007ada <HAL_DMA_Abort_IT+0x3a2>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a1b      	ldr	r2, [pc, #108]	; (8007b38 <HAL_DMA_Abort_IT+0x400>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d004      	beq.n	8007ada <HAL_DMA_Abort_IT+0x3a2>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a19      	ldr	r2, [pc, #100]	; (8007b3c <HAL_DMA_Abort_IT+0x404>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d132      	bne.n	8007b40 <HAL_DMA_Abort_IT+0x408>
 8007ada:	2301      	movs	r3, #1
 8007adc:	e031      	b.n	8007b42 <HAL_DMA_Abort_IT+0x40a>
 8007ade:	bf00      	nop
 8007ae0:	40020010 	.word	0x40020010
 8007ae4:	40020028 	.word	0x40020028
 8007ae8:	40020040 	.word	0x40020040
 8007aec:	40020058 	.word	0x40020058
 8007af0:	40020070 	.word	0x40020070
 8007af4:	40020088 	.word	0x40020088
 8007af8:	400200a0 	.word	0x400200a0
 8007afc:	400200b8 	.word	0x400200b8
 8007b00:	40020410 	.word	0x40020410
 8007b04:	40020428 	.word	0x40020428
 8007b08:	40020440 	.word	0x40020440
 8007b0c:	40020458 	.word	0x40020458
 8007b10:	40020470 	.word	0x40020470
 8007b14:	40020488 	.word	0x40020488
 8007b18:	400204a0 	.word	0x400204a0
 8007b1c:	400204b8 	.word	0x400204b8
 8007b20:	58025408 	.word	0x58025408
 8007b24:	5802541c 	.word	0x5802541c
 8007b28:	58025430 	.word	0x58025430
 8007b2c:	58025444 	.word	0x58025444
 8007b30:	58025458 	.word	0x58025458
 8007b34:	5802546c 	.word	0x5802546c
 8007b38:	58025480 	.word	0x58025480
 8007b3c:	58025494 	.word	0x58025494
 8007b40:	2300      	movs	r3, #0
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d028      	beq.n	8007b98 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b54:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b5a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b60:	f003 031f 	and.w	r3, r3, #31
 8007b64:	2201      	movs	r2, #1
 8007b66:	409a      	lsls	r2, r3
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007b74:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00c      	beq.n	8007b98 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b8c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007b96:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d003      	beq.n	8007bb8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3710      	adds	r7, #16
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
 8007bc2:	bf00      	nop

08007bc4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b08a      	sub	sp, #40	; 0x28
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007bd0:	4b67      	ldr	r3, [pc, #412]	; (8007d70 <HAL_DMA_IRQHandler+0x1ac>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a67      	ldr	r2, [pc, #412]	; (8007d74 <HAL_DMA_IRQHandler+0x1b0>)
 8007bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8007bda:	0a9b      	lsrs	r3, r3, #10
 8007bdc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007be2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007be8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007bea:	6a3b      	ldr	r3, [r7, #32]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a5f      	ldr	r2, [pc, #380]	; (8007d78 <HAL_DMA_IRQHandler+0x1b4>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d04a      	beq.n	8007c96 <HAL_DMA_IRQHandler+0xd2>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a5d      	ldr	r2, [pc, #372]	; (8007d7c <HAL_DMA_IRQHandler+0x1b8>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d045      	beq.n	8007c96 <HAL_DMA_IRQHandler+0xd2>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a5c      	ldr	r2, [pc, #368]	; (8007d80 <HAL_DMA_IRQHandler+0x1bc>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d040      	beq.n	8007c96 <HAL_DMA_IRQHandler+0xd2>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a5a      	ldr	r2, [pc, #360]	; (8007d84 <HAL_DMA_IRQHandler+0x1c0>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d03b      	beq.n	8007c96 <HAL_DMA_IRQHandler+0xd2>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a59      	ldr	r2, [pc, #356]	; (8007d88 <HAL_DMA_IRQHandler+0x1c4>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d036      	beq.n	8007c96 <HAL_DMA_IRQHandler+0xd2>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a57      	ldr	r2, [pc, #348]	; (8007d8c <HAL_DMA_IRQHandler+0x1c8>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d031      	beq.n	8007c96 <HAL_DMA_IRQHandler+0xd2>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a56      	ldr	r2, [pc, #344]	; (8007d90 <HAL_DMA_IRQHandler+0x1cc>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d02c      	beq.n	8007c96 <HAL_DMA_IRQHandler+0xd2>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a54      	ldr	r2, [pc, #336]	; (8007d94 <HAL_DMA_IRQHandler+0x1d0>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d027      	beq.n	8007c96 <HAL_DMA_IRQHandler+0xd2>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a53      	ldr	r2, [pc, #332]	; (8007d98 <HAL_DMA_IRQHandler+0x1d4>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d022      	beq.n	8007c96 <HAL_DMA_IRQHandler+0xd2>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a51      	ldr	r2, [pc, #324]	; (8007d9c <HAL_DMA_IRQHandler+0x1d8>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d01d      	beq.n	8007c96 <HAL_DMA_IRQHandler+0xd2>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a50      	ldr	r2, [pc, #320]	; (8007da0 <HAL_DMA_IRQHandler+0x1dc>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d018      	beq.n	8007c96 <HAL_DMA_IRQHandler+0xd2>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a4e      	ldr	r2, [pc, #312]	; (8007da4 <HAL_DMA_IRQHandler+0x1e0>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d013      	beq.n	8007c96 <HAL_DMA_IRQHandler+0xd2>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a4d      	ldr	r2, [pc, #308]	; (8007da8 <HAL_DMA_IRQHandler+0x1e4>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d00e      	beq.n	8007c96 <HAL_DMA_IRQHandler+0xd2>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a4b      	ldr	r2, [pc, #300]	; (8007dac <HAL_DMA_IRQHandler+0x1e8>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d009      	beq.n	8007c96 <HAL_DMA_IRQHandler+0xd2>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a4a      	ldr	r2, [pc, #296]	; (8007db0 <HAL_DMA_IRQHandler+0x1ec>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d004      	beq.n	8007c96 <HAL_DMA_IRQHandler+0xd2>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a48      	ldr	r2, [pc, #288]	; (8007db4 <HAL_DMA_IRQHandler+0x1f0>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d101      	bne.n	8007c9a <HAL_DMA_IRQHandler+0xd6>
 8007c96:	2301      	movs	r3, #1
 8007c98:	e000      	b.n	8007c9c <HAL_DMA_IRQHandler+0xd8>
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	f000 842b 	beq.w	80084f8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ca6:	f003 031f 	and.w	r3, r3, #31
 8007caa:	2208      	movs	r2, #8
 8007cac:	409a      	lsls	r2, r3
 8007cae:	69bb      	ldr	r3, [r7, #24]
 8007cb0:	4013      	ands	r3, r2
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	f000 80a2 	beq.w	8007dfc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a2e      	ldr	r2, [pc, #184]	; (8007d78 <HAL_DMA_IRQHandler+0x1b4>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d04a      	beq.n	8007d58 <HAL_DMA_IRQHandler+0x194>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a2d      	ldr	r2, [pc, #180]	; (8007d7c <HAL_DMA_IRQHandler+0x1b8>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d045      	beq.n	8007d58 <HAL_DMA_IRQHandler+0x194>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a2b      	ldr	r2, [pc, #172]	; (8007d80 <HAL_DMA_IRQHandler+0x1bc>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d040      	beq.n	8007d58 <HAL_DMA_IRQHandler+0x194>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a2a      	ldr	r2, [pc, #168]	; (8007d84 <HAL_DMA_IRQHandler+0x1c0>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d03b      	beq.n	8007d58 <HAL_DMA_IRQHandler+0x194>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a28      	ldr	r2, [pc, #160]	; (8007d88 <HAL_DMA_IRQHandler+0x1c4>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d036      	beq.n	8007d58 <HAL_DMA_IRQHandler+0x194>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a27      	ldr	r2, [pc, #156]	; (8007d8c <HAL_DMA_IRQHandler+0x1c8>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d031      	beq.n	8007d58 <HAL_DMA_IRQHandler+0x194>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a25      	ldr	r2, [pc, #148]	; (8007d90 <HAL_DMA_IRQHandler+0x1cc>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d02c      	beq.n	8007d58 <HAL_DMA_IRQHandler+0x194>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a24      	ldr	r2, [pc, #144]	; (8007d94 <HAL_DMA_IRQHandler+0x1d0>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d027      	beq.n	8007d58 <HAL_DMA_IRQHandler+0x194>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a22      	ldr	r2, [pc, #136]	; (8007d98 <HAL_DMA_IRQHandler+0x1d4>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d022      	beq.n	8007d58 <HAL_DMA_IRQHandler+0x194>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a21      	ldr	r2, [pc, #132]	; (8007d9c <HAL_DMA_IRQHandler+0x1d8>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d01d      	beq.n	8007d58 <HAL_DMA_IRQHandler+0x194>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a1f      	ldr	r2, [pc, #124]	; (8007da0 <HAL_DMA_IRQHandler+0x1dc>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d018      	beq.n	8007d58 <HAL_DMA_IRQHandler+0x194>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a1e      	ldr	r2, [pc, #120]	; (8007da4 <HAL_DMA_IRQHandler+0x1e0>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d013      	beq.n	8007d58 <HAL_DMA_IRQHandler+0x194>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a1c      	ldr	r2, [pc, #112]	; (8007da8 <HAL_DMA_IRQHandler+0x1e4>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d00e      	beq.n	8007d58 <HAL_DMA_IRQHandler+0x194>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a1b      	ldr	r2, [pc, #108]	; (8007dac <HAL_DMA_IRQHandler+0x1e8>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d009      	beq.n	8007d58 <HAL_DMA_IRQHandler+0x194>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a19      	ldr	r2, [pc, #100]	; (8007db0 <HAL_DMA_IRQHandler+0x1ec>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d004      	beq.n	8007d58 <HAL_DMA_IRQHandler+0x194>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a18      	ldr	r2, [pc, #96]	; (8007db4 <HAL_DMA_IRQHandler+0x1f0>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d12f      	bne.n	8007db8 <HAL_DMA_IRQHandler+0x1f4>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f003 0304 	and.w	r3, r3, #4
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	bf14      	ite	ne
 8007d66:	2301      	movne	r3, #1
 8007d68:	2300      	moveq	r3, #0
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	e02e      	b.n	8007dcc <HAL_DMA_IRQHandler+0x208>
 8007d6e:	bf00      	nop
 8007d70:	20000044 	.word	0x20000044
 8007d74:	1b4e81b5 	.word	0x1b4e81b5
 8007d78:	40020010 	.word	0x40020010
 8007d7c:	40020028 	.word	0x40020028
 8007d80:	40020040 	.word	0x40020040
 8007d84:	40020058 	.word	0x40020058
 8007d88:	40020070 	.word	0x40020070
 8007d8c:	40020088 	.word	0x40020088
 8007d90:	400200a0 	.word	0x400200a0
 8007d94:	400200b8 	.word	0x400200b8
 8007d98:	40020410 	.word	0x40020410
 8007d9c:	40020428 	.word	0x40020428
 8007da0:	40020440 	.word	0x40020440
 8007da4:	40020458 	.word	0x40020458
 8007da8:	40020470 	.word	0x40020470
 8007dac:	40020488 	.word	0x40020488
 8007db0:	400204a0 	.word	0x400204a0
 8007db4:	400204b8 	.word	0x400204b8
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f003 0308 	and.w	r3, r3, #8
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	bf14      	ite	ne
 8007dc6:	2301      	movne	r3, #1
 8007dc8:	2300      	moveq	r3, #0
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d015      	beq.n	8007dfc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f022 0204 	bic.w	r2, r2, #4
 8007dde:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007de4:	f003 031f 	and.w	r3, r3, #31
 8007de8:	2208      	movs	r2, #8
 8007dea:	409a      	lsls	r2, r3
 8007dec:	6a3b      	ldr	r3, [r7, #32]
 8007dee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007df4:	f043 0201 	orr.w	r2, r3, #1
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e00:	f003 031f 	and.w	r3, r3, #31
 8007e04:	69ba      	ldr	r2, [r7, #24]
 8007e06:	fa22 f303 	lsr.w	r3, r2, r3
 8007e0a:	f003 0301 	and.w	r3, r3, #1
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d06e      	beq.n	8007ef0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a69      	ldr	r2, [pc, #420]	; (8007fbc <HAL_DMA_IRQHandler+0x3f8>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d04a      	beq.n	8007eb2 <HAL_DMA_IRQHandler+0x2ee>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a67      	ldr	r2, [pc, #412]	; (8007fc0 <HAL_DMA_IRQHandler+0x3fc>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d045      	beq.n	8007eb2 <HAL_DMA_IRQHandler+0x2ee>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a66      	ldr	r2, [pc, #408]	; (8007fc4 <HAL_DMA_IRQHandler+0x400>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d040      	beq.n	8007eb2 <HAL_DMA_IRQHandler+0x2ee>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a64      	ldr	r2, [pc, #400]	; (8007fc8 <HAL_DMA_IRQHandler+0x404>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d03b      	beq.n	8007eb2 <HAL_DMA_IRQHandler+0x2ee>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a63      	ldr	r2, [pc, #396]	; (8007fcc <HAL_DMA_IRQHandler+0x408>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d036      	beq.n	8007eb2 <HAL_DMA_IRQHandler+0x2ee>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a61      	ldr	r2, [pc, #388]	; (8007fd0 <HAL_DMA_IRQHandler+0x40c>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d031      	beq.n	8007eb2 <HAL_DMA_IRQHandler+0x2ee>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a60      	ldr	r2, [pc, #384]	; (8007fd4 <HAL_DMA_IRQHandler+0x410>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d02c      	beq.n	8007eb2 <HAL_DMA_IRQHandler+0x2ee>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a5e      	ldr	r2, [pc, #376]	; (8007fd8 <HAL_DMA_IRQHandler+0x414>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d027      	beq.n	8007eb2 <HAL_DMA_IRQHandler+0x2ee>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a5d      	ldr	r2, [pc, #372]	; (8007fdc <HAL_DMA_IRQHandler+0x418>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d022      	beq.n	8007eb2 <HAL_DMA_IRQHandler+0x2ee>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a5b      	ldr	r2, [pc, #364]	; (8007fe0 <HAL_DMA_IRQHandler+0x41c>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d01d      	beq.n	8007eb2 <HAL_DMA_IRQHandler+0x2ee>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a5a      	ldr	r2, [pc, #360]	; (8007fe4 <HAL_DMA_IRQHandler+0x420>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d018      	beq.n	8007eb2 <HAL_DMA_IRQHandler+0x2ee>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a58      	ldr	r2, [pc, #352]	; (8007fe8 <HAL_DMA_IRQHandler+0x424>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d013      	beq.n	8007eb2 <HAL_DMA_IRQHandler+0x2ee>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a57      	ldr	r2, [pc, #348]	; (8007fec <HAL_DMA_IRQHandler+0x428>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d00e      	beq.n	8007eb2 <HAL_DMA_IRQHandler+0x2ee>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a55      	ldr	r2, [pc, #340]	; (8007ff0 <HAL_DMA_IRQHandler+0x42c>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d009      	beq.n	8007eb2 <HAL_DMA_IRQHandler+0x2ee>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a54      	ldr	r2, [pc, #336]	; (8007ff4 <HAL_DMA_IRQHandler+0x430>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d004      	beq.n	8007eb2 <HAL_DMA_IRQHandler+0x2ee>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a52      	ldr	r2, [pc, #328]	; (8007ff8 <HAL_DMA_IRQHandler+0x434>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d10a      	bne.n	8007ec8 <HAL_DMA_IRQHandler+0x304>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	695b      	ldr	r3, [r3, #20]
 8007eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	bf14      	ite	ne
 8007ec0:	2301      	movne	r3, #1
 8007ec2:	2300      	moveq	r3, #0
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	e003      	b.n	8007ed0 <HAL_DMA_IRQHandler+0x30c>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	2300      	movs	r3, #0
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d00d      	beq.n	8007ef0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ed8:	f003 031f 	and.w	r3, r3, #31
 8007edc:	2201      	movs	r2, #1
 8007ede:	409a      	lsls	r2, r3
 8007ee0:	6a3b      	ldr	r3, [r7, #32]
 8007ee2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ee8:	f043 0202 	orr.w	r2, r3, #2
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ef4:	f003 031f 	and.w	r3, r3, #31
 8007ef8:	2204      	movs	r2, #4
 8007efa:	409a      	lsls	r2, r3
 8007efc:	69bb      	ldr	r3, [r7, #24]
 8007efe:	4013      	ands	r3, r2
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	f000 808f 	beq.w	8008024 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a2c      	ldr	r2, [pc, #176]	; (8007fbc <HAL_DMA_IRQHandler+0x3f8>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d04a      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0x3e2>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a2a      	ldr	r2, [pc, #168]	; (8007fc0 <HAL_DMA_IRQHandler+0x3fc>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d045      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0x3e2>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a29      	ldr	r2, [pc, #164]	; (8007fc4 <HAL_DMA_IRQHandler+0x400>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d040      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0x3e2>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a27      	ldr	r2, [pc, #156]	; (8007fc8 <HAL_DMA_IRQHandler+0x404>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d03b      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0x3e2>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a26      	ldr	r2, [pc, #152]	; (8007fcc <HAL_DMA_IRQHandler+0x408>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d036      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0x3e2>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a24      	ldr	r2, [pc, #144]	; (8007fd0 <HAL_DMA_IRQHandler+0x40c>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d031      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0x3e2>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a23      	ldr	r2, [pc, #140]	; (8007fd4 <HAL_DMA_IRQHandler+0x410>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d02c      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0x3e2>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a21      	ldr	r2, [pc, #132]	; (8007fd8 <HAL_DMA_IRQHandler+0x414>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d027      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0x3e2>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a20      	ldr	r2, [pc, #128]	; (8007fdc <HAL_DMA_IRQHandler+0x418>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d022      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0x3e2>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a1e      	ldr	r2, [pc, #120]	; (8007fe0 <HAL_DMA_IRQHandler+0x41c>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d01d      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0x3e2>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a1d      	ldr	r2, [pc, #116]	; (8007fe4 <HAL_DMA_IRQHandler+0x420>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d018      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0x3e2>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a1b      	ldr	r2, [pc, #108]	; (8007fe8 <HAL_DMA_IRQHandler+0x424>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d013      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0x3e2>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a1a      	ldr	r2, [pc, #104]	; (8007fec <HAL_DMA_IRQHandler+0x428>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d00e      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0x3e2>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a18      	ldr	r2, [pc, #96]	; (8007ff0 <HAL_DMA_IRQHandler+0x42c>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d009      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0x3e2>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a17      	ldr	r2, [pc, #92]	; (8007ff4 <HAL_DMA_IRQHandler+0x430>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d004      	beq.n	8007fa6 <HAL_DMA_IRQHandler+0x3e2>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a15      	ldr	r2, [pc, #84]	; (8007ff8 <HAL_DMA_IRQHandler+0x434>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d12a      	bne.n	8007ffc <HAL_DMA_IRQHandler+0x438>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f003 0302 	and.w	r3, r3, #2
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	bf14      	ite	ne
 8007fb4:	2301      	movne	r3, #1
 8007fb6:	2300      	moveq	r3, #0
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	e023      	b.n	8008004 <HAL_DMA_IRQHandler+0x440>
 8007fbc:	40020010 	.word	0x40020010
 8007fc0:	40020028 	.word	0x40020028
 8007fc4:	40020040 	.word	0x40020040
 8007fc8:	40020058 	.word	0x40020058
 8007fcc:	40020070 	.word	0x40020070
 8007fd0:	40020088 	.word	0x40020088
 8007fd4:	400200a0 	.word	0x400200a0
 8007fd8:	400200b8 	.word	0x400200b8
 8007fdc:	40020410 	.word	0x40020410
 8007fe0:	40020428 	.word	0x40020428
 8007fe4:	40020440 	.word	0x40020440
 8007fe8:	40020458 	.word	0x40020458
 8007fec:	40020470 	.word	0x40020470
 8007ff0:	40020488 	.word	0x40020488
 8007ff4:	400204a0 	.word	0x400204a0
 8007ff8:	400204b8 	.word	0x400204b8
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	2300      	movs	r3, #0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d00d      	beq.n	8008024 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800800c:	f003 031f 	and.w	r3, r3, #31
 8008010:	2204      	movs	r2, #4
 8008012:	409a      	lsls	r2, r3
 8008014:	6a3b      	ldr	r3, [r7, #32]
 8008016:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800801c:	f043 0204 	orr.w	r2, r3, #4
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008028:	f003 031f 	and.w	r3, r3, #31
 800802c:	2210      	movs	r2, #16
 800802e:	409a      	lsls	r2, r3
 8008030:	69bb      	ldr	r3, [r7, #24]
 8008032:	4013      	ands	r3, r2
 8008034:	2b00      	cmp	r3, #0
 8008036:	f000 80a6 	beq.w	8008186 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a85      	ldr	r2, [pc, #532]	; (8008254 <HAL_DMA_IRQHandler+0x690>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d04a      	beq.n	80080da <HAL_DMA_IRQHandler+0x516>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a83      	ldr	r2, [pc, #524]	; (8008258 <HAL_DMA_IRQHandler+0x694>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d045      	beq.n	80080da <HAL_DMA_IRQHandler+0x516>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a82      	ldr	r2, [pc, #520]	; (800825c <HAL_DMA_IRQHandler+0x698>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d040      	beq.n	80080da <HAL_DMA_IRQHandler+0x516>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a80      	ldr	r2, [pc, #512]	; (8008260 <HAL_DMA_IRQHandler+0x69c>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d03b      	beq.n	80080da <HAL_DMA_IRQHandler+0x516>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a7f      	ldr	r2, [pc, #508]	; (8008264 <HAL_DMA_IRQHandler+0x6a0>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d036      	beq.n	80080da <HAL_DMA_IRQHandler+0x516>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a7d      	ldr	r2, [pc, #500]	; (8008268 <HAL_DMA_IRQHandler+0x6a4>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d031      	beq.n	80080da <HAL_DMA_IRQHandler+0x516>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a7c      	ldr	r2, [pc, #496]	; (800826c <HAL_DMA_IRQHandler+0x6a8>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d02c      	beq.n	80080da <HAL_DMA_IRQHandler+0x516>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a7a      	ldr	r2, [pc, #488]	; (8008270 <HAL_DMA_IRQHandler+0x6ac>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d027      	beq.n	80080da <HAL_DMA_IRQHandler+0x516>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a79      	ldr	r2, [pc, #484]	; (8008274 <HAL_DMA_IRQHandler+0x6b0>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d022      	beq.n	80080da <HAL_DMA_IRQHandler+0x516>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a77      	ldr	r2, [pc, #476]	; (8008278 <HAL_DMA_IRQHandler+0x6b4>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d01d      	beq.n	80080da <HAL_DMA_IRQHandler+0x516>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a76      	ldr	r2, [pc, #472]	; (800827c <HAL_DMA_IRQHandler+0x6b8>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d018      	beq.n	80080da <HAL_DMA_IRQHandler+0x516>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a74      	ldr	r2, [pc, #464]	; (8008280 <HAL_DMA_IRQHandler+0x6bc>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d013      	beq.n	80080da <HAL_DMA_IRQHandler+0x516>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a73      	ldr	r2, [pc, #460]	; (8008284 <HAL_DMA_IRQHandler+0x6c0>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d00e      	beq.n	80080da <HAL_DMA_IRQHandler+0x516>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a71      	ldr	r2, [pc, #452]	; (8008288 <HAL_DMA_IRQHandler+0x6c4>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d009      	beq.n	80080da <HAL_DMA_IRQHandler+0x516>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a70      	ldr	r2, [pc, #448]	; (800828c <HAL_DMA_IRQHandler+0x6c8>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d004      	beq.n	80080da <HAL_DMA_IRQHandler+0x516>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a6e      	ldr	r2, [pc, #440]	; (8008290 <HAL_DMA_IRQHandler+0x6cc>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d10a      	bne.n	80080f0 <HAL_DMA_IRQHandler+0x52c>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f003 0308 	and.w	r3, r3, #8
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	bf14      	ite	ne
 80080e8:	2301      	movne	r3, #1
 80080ea:	2300      	moveq	r3, #0
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	e009      	b.n	8008104 <HAL_DMA_IRQHandler+0x540>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f003 0304 	and.w	r3, r3, #4
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	bf14      	ite	ne
 80080fe:	2301      	movne	r3, #1
 8008100:	2300      	moveq	r3, #0
 8008102:	b2db      	uxtb	r3, r3
 8008104:	2b00      	cmp	r3, #0
 8008106:	d03e      	beq.n	8008186 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800810c:	f003 031f 	and.w	r3, r3, #31
 8008110:	2210      	movs	r2, #16
 8008112:	409a      	lsls	r2, r3
 8008114:	6a3b      	ldr	r3, [r7, #32]
 8008116:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008122:	2b00      	cmp	r3, #0
 8008124:	d018      	beq.n	8008158 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008130:	2b00      	cmp	r3, #0
 8008132:	d108      	bne.n	8008146 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008138:	2b00      	cmp	r3, #0
 800813a:	d024      	beq.n	8008186 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	4798      	blx	r3
 8008144:	e01f      	b.n	8008186 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800814a:	2b00      	cmp	r3, #0
 800814c:	d01b      	beq.n	8008186 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	4798      	blx	r3
 8008156:	e016      	b.n	8008186 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008162:	2b00      	cmp	r3, #0
 8008164:	d107      	bne.n	8008176 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f022 0208 	bic.w	r2, r2, #8
 8008174:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800817a:	2b00      	cmp	r3, #0
 800817c:	d003      	beq.n	8008186 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800818a:	f003 031f 	and.w	r3, r3, #31
 800818e:	2220      	movs	r2, #32
 8008190:	409a      	lsls	r2, r3
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	4013      	ands	r3, r2
 8008196:	2b00      	cmp	r3, #0
 8008198:	f000 8110 	beq.w	80083bc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a2c      	ldr	r2, [pc, #176]	; (8008254 <HAL_DMA_IRQHandler+0x690>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d04a      	beq.n	800823c <HAL_DMA_IRQHandler+0x678>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a2b      	ldr	r2, [pc, #172]	; (8008258 <HAL_DMA_IRQHandler+0x694>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d045      	beq.n	800823c <HAL_DMA_IRQHandler+0x678>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a29      	ldr	r2, [pc, #164]	; (800825c <HAL_DMA_IRQHandler+0x698>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d040      	beq.n	800823c <HAL_DMA_IRQHandler+0x678>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a28      	ldr	r2, [pc, #160]	; (8008260 <HAL_DMA_IRQHandler+0x69c>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d03b      	beq.n	800823c <HAL_DMA_IRQHandler+0x678>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a26      	ldr	r2, [pc, #152]	; (8008264 <HAL_DMA_IRQHandler+0x6a0>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d036      	beq.n	800823c <HAL_DMA_IRQHandler+0x678>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a25      	ldr	r2, [pc, #148]	; (8008268 <HAL_DMA_IRQHandler+0x6a4>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d031      	beq.n	800823c <HAL_DMA_IRQHandler+0x678>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a23      	ldr	r2, [pc, #140]	; (800826c <HAL_DMA_IRQHandler+0x6a8>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d02c      	beq.n	800823c <HAL_DMA_IRQHandler+0x678>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a22      	ldr	r2, [pc, #136]	; (8008270 <HAL_DMA_IRQHandler+0x6ac>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d027      	beq.n	800823c <HAL_DMA_IRQHandler+0x678>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a20      	ldr	r2, [pc, #128]	; (8008274 <HAL_DMA_IRQHandler+0x6b0>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d022      	beq.n	800823c <HAL_DMA_IRQHandler+0x678>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a1f      	ldr	r2, [pc, #124]	; (8008278 <HAL_DMA_IRQHandler+0x6b4>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d01d      	beq.n	800823c <HAL_DMA_IRQHandler+0x678>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a1d      	ldr	r2, [pc, #116]	; (800827c <HAL_DMA_IRQHandler+0x6b8>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d018      	beq.n	800823c <HAL_DMA_IRQHandler+0x678>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a1c      	ldr	r2, [pc, #112]	; (8008280 <HAL_DMA_IRQHandler+0x6bc>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d013      	beq.n	800823c <HAL_DMA_IRQHandler+0x678>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a1a      	ldr	r2, [pc, #104]	; (8008284 <HAL_DMA_IRQHandler+0x6c0>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d00e      	beq.n	800823c <HAL_DMA_IRQHandler+0x678>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a19      	ldr	r2, [pc, #100]	; (8008288 <HAL_DMA_IRQHandler+0x6c4>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d009      	beq.n	800823c <HAL_DMA_IRQHandler+0x678>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a17      	ldr	r2, [pc, #92]	; (800828c <HAL_DMA_IRQHandler+0x6c8>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d004      	beq.n	800823c <HAL_DMA_IRQHandler+0x678>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a16      	ldr	r2, [pc, #88]	; (8008290 <HAL_DMA_IRQHandler+0x6cc>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d12b      	bne.n	8008294 <HAL_DMA_IRQHandler+0x6d0>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f003 0310 	and.w	r3, r3, #16
 8008246:	2b00      	cmp	r3, #0
 8008248:	bf14      	ite	ne
 800824a:	2301      	movne	r3, #1
 800824c:	2300      	moveq	r3, #0
 800824e:	b2db      	uxtb	r3, r3
 8008250:	e02a      	b.n	80082a8 <HAL_DMA_IRQHandler+0x6e4>
 8008252:	bf00      	nop
 8008254:	40020010 	.word	0x40020010
 8008258:	40020028 	.word	0x40020028
 800825c:	40020040 	.word	0x40020040
 8008260:	40020058 	.word	0x40020058
 8008264:	40020070 	.word	0x40020070
 8008268:	40020088 	.word	0x40020088
 800826c:	400200a0 	.word	0x400200a0
 8008270:	400200b8 	.word	0x400200b8
 8008274:	40020410 	.word	0x40020410
 8008278:	40020428 	.word	0x40020428
 800827c:	40020440 	.word	0x40020440
 8008280:	40020458 	.word	0x40020458
 8008284:	40020470 	.word	0x40020470
 8008288:	40020488 	.word	0x40020488
 800828c:	400204a0 	.word	0x400204a0
 8008290:	400204b8 	.word	0x400204b8
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f003 0302 	and.w	r3, r3, #2
 800829e:	2b00      	cmp	r3, #0
 80082a0:	bf14      	ite	ne
 80082a2:	2301      	movne	r3, #1
 80082a4:	2300      	moveq	r3, #0
 80082a6:	b2db      	uxtb	r3, r3
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	f000 8087 	beq.w	80083bc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082b2:	f003 031f 	and.w	r3, r3, #31
 80082b6:	2220      	movs	r2, #32
 80082b8:	409a      	lsls	r2, r3
 80082ba:	6a3b      	ldr	r3, [r7, #32]
 80082bc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	2b04      	cmp	r3, #4
 80082c8:	d139      	bne.n	800833e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f022 0216 	bic.w	r2, r2, #22
 80082d8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	695a      	ldr	r2, [r3, #20]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80082e8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d103      	bne.n	80082fa <HAL_DMA_IRQHandler+0x736>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d007      	beq.n	800830a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f022 0208 	bic.w	r2, r2, #8
 8008308:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800830e:	f003 031f 	and.w	r3, r3, #31
 8008312:	223f      	movs	r2, #63	; 0x3f
 8008314:	409a      	lsls	r2, r3
 8008316:	6a3b      	ldr	r3, [r7, #32]
 8008318:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2201      	movs	r2, #1
 800831e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2200      	movs	r2, #0
 8008326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800832e:	2b00      	cmp	r3, #0
 8008330:	f000 8382 	beq.w	8008a38 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	4798      	blx	r3
          }
          return;
 800833c:	e37c      	b.n	8008a38 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008348:	2b00      	cmp	r3, #0
 800834a:	d018      	beq.n	800837e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008356:	2b00      	cmp	r3, #0
 8008358:	d108      	bne.n	800836c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800835e:	2b00      	cmp	r3, #0
 8008360:	d02c      	beq.n	80083bc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	4798      	blx	r3
 800836a:	e027      	b.n	80083bc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008370:	2b00      	cmp	r3, #0
 8008372:	d023      	beq.n	80083bc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	4798      	blx	r3
 800837c:	e01e      	b.n	80083bc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008388:	2b00      	cmp	r3, #0
 800838a:	d10f      	bne.n	80083ac <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f022 0210 	bic.w	r2, r2, #16
 800839a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2201      	movs	r2, #1
 80083a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d003      	beq.n	80083bc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f000 833e 	beq.w	8008a42 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083ca:	f003 0301 	and.w	r3, r3, #1
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	f000 8088 	beq.w	80084e4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2204      	movs	r2, #4
 80083d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a89      	ldr	r2, [pc, #548]	; (8008608 <HAL_DMA_IRQHandler+0xa44>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d04a      	beq.n	800847c <HAL_DMA_IRQHandler+0x8b8>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a88      	ldr	r2, [pc, #544]	; (800860c <HAL_DMA_IRQHandler+0xa48>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d045      	beq.n	800847c <HAL_DMA_IRQHandler+0x8b8>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a86      	ldr	r2, [pc, #536]	; (8008610 <HAL_DMA_IRQHandler+0xa4c>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d040      	beq.n	800847c <HAL_DMA_IRQHandler+0x8b8>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a85      	ldr	r2, [pc, #532]	; (8008614 <HAL_DMA_IRQHandler+0xa50>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d03b      	beq.n	800847c <HAL_DMA_IRQHandler+0x8b8>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a83      	ldr	r2, [pc, #524]	; (8008618 <HAL_DMA_IRQHandler+0xa54>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d036      	beq.n	800847c <HAL_DMA_IRQHandler+0x8b8>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a82      	ldr	r2, [pc, #520]	; (800861c <HAL_DMA_IRQHandler+0xa58>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d031      	beq.n	800847c <HAL_DMA_IRQHandler+0x8b8>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a80      	ldr	r2, [pc, #512]	; (8008620 <HAL_DMA_IRQHandler+0xa5c>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d02c      	beq.n	800847c <HAL_DMA_IRQHandler+0x8b8>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a7f      	ldr	r2, [pc, #508]	; (8008624 <HAL_DMA_IRQHandler+0xa60>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d027      	beq.n	800847c <HAL_DMA_IRQHandler+0x8b8>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a7d      	ldr	r2, [pc, #500]	; (8008628 <HAL_DMA_IRQHandler+0xa64>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d022      	beq.n	800847c <HAL_DMA_IRQHandler+0x8b8>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a7c      	ldr	r2, [pc, #496]	; (800862c <HAL_DMA_IRQHandler+0xa68>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d01d      	beq.n	800847c <HAL_DMA_IRQHandler+0x8b8>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a7a      	ldr	r2, [pc, #488]	; (8008630 <HAL_DMA_IRQHandler+0xa6c>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d018      	beq.n	800847c <HAL_DMA_IRQHandler+0x8b8>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a79      	ldr	r2, [pc, #484]	; (8008634 <HAL_DMA_IRQHandler+0xa70>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d013      	beq.n	800847c <HAL_DMA_IRQHandler+0x8b8>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a77      	ldr	r2, [pc, #476]	; (8008638 <HAL_DMA_IRQHandler+0xa74>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d00e      	beq.n	800847c <HAL_DMA_IRQHandler+0x8b8>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a76      	ldr	r2, [pc, #472]	; (800863c <HAL_DMA_IRQHandler+0xa78>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d009      	beq.n	800847c <HAL_DMA_IRQHandler+0x8b8>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a74      	ldr	r2, [pc, #464]	; (8008640 <HAL_DMA_IRQHandler+0xa7c>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d004      	beq.n	800847c <HAL_DMA_IRQHandler+0x8b8>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a73      	ldr	r2, [pc, #460]	; (8008644 <HAL_DMA_IRQHandler+0xa80>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d108      	bne.n	800848e <HAL_DMA_IRQHandler+0x8ca>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f022 0201 	bic.w	r2, r2, #1
 800848a:	601a      	str	r2, [r3, #0]
 800848c:	e007      	b.n	800849e <HAL_DMA_IRQHandler+0x8da>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f022 0201 	bic.w	r2, r2, #1
 800849c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	3301      	adds	r3, #1
 80084a2:	60fb      	str	r3, [r7, #12]
 80084a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d307      	bcc.n	80084ba <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f003 0301 	and.w	r3, r3, #1
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d1f2      	bne.n	800849e <HAL_DMA_IRQHandler+0x8da>
 80084b8:	e000      	b.n	80084bc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80084ba:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f003 0301 	and.w	r3, r3, #1
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d004      	beq.n	80084d4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2203      	movs	r2, #3
 80084ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80084d2:	e003      	b.n	80084dc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2201      	movs	r2, #1
 80084d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2200      	movs	r2, #0
 80084e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	f000 82aa 	beq.w	8008a42 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	4798      	blx	r3
 80084f6:	e2a4      	b.n	8008a42 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a52      	ldr	r2, [pc, #328]	; (8008648 <HAL_DMA_IRQHandler+0xa84>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d04a      	beq.n	8008598 <HAL_DMA_IRQHandler+0x9d4>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a51      	ldr	r2, [pc, #324]	; (800864c <HAL_DMA_IRQHandler+0xa88>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d045      	beq.n	8008598 <HAL_DMA_IRQHandler+0x9d4>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a4f      	ldr	r2, [pc, #316]	; (8008650 <HAL_DMA_IRQHandler+0xa8c>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d040      	beq.n	8008598 <HAL_DMA_IRQHandler+0x9d4>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a4e      	ldr	r2, [pc, #312]	; (8008654 <HAL_DMA_IRQHandler+0xa90>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d03b      	beq.n	8008598 <HAL_DMA_IRQHandler+0x9d4>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a4c      	ldr	r2, [pc, #304]	; (8008658 <HAL_DMA_IRQHandler+0xa94>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d036      	beq.n	8008598 <HAL_DMA_IRQHandler+0x9d4>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a4b      	ldr	r2, [pc, #300]	; (800865c <HAL_DMA_IRQHandler+0xa98>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d031      	beq.n	8008598 <HAL_DMA_IRQHandler+0x9d4>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a49      	ldr	r2, [pc, #292]	; (8008660 <HAL_DMA_IRQHandler+0xa9c>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d02c      	beq.n	8008598 <HAL_DMA_IRQHandler+0x9d4>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a48      	ldr	r2, [pc, #288]	; (8008664 <HAL_DMA_IRQHandler+0xaa0>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d027      	beq.n	8008598 <HAL_DMA_IRQHandler+0x9d4>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a46      	ldr	r2, [pc, #280]	; (8008668 <HAL_DMA_IRQHandler+0xaa4>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d022      	beq.n	8008598 <HAL_DMA_IRQHandler+0x9d4>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a45      	ldr	r2, [pc, #276]	; (800866c <HAL_DMA_IRQHandler+0xaa8>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d01d      	beq.n	8008598 <HAL_DMA_IRQHandler+0x9d4>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a43      	ldr	r2, [pc, #268]	; (8008670 <HAL_DMA_IRQHandler+0xaac>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d018      	beq.n	8008598 <HAL_DMA_IRQHandler+0x9d4>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a42      	ldr	r2, [pc, #264]	; (8008674 <HAL_DMA_IRQHandler+0xab0>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d013      	beq.n	8008598 <HAL_DMA_IRQHandler+0x9d4>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a40      	ldr	r2, [pc, #256]	; (8008678 <HAL_DMA_IRQHandler+0xab4>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d00e      	beq.n	8008598 <HAL_DMA_IRQHandler+0x9d4>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a3f      	ldr	r2, [pc, #252]	; (800867c <HAL_DMA_IRQHandler+0xab8>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d009      	beq.n	8008598 <HAL_DMA_IRQHandler+0x9d4>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a3d      	ldr	r2, [pc, #244]	; (8008680 <HAL_DMA_IRQHandler+0xabc>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d004      	beq.n	8008598 <HAL_DMA_IRQHandler+0x9d4>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a3c      	ldr	r2, [pc, #240]	; (8008684 <HAL_DMA_IRQHandler+0xac0>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d101      	bne.n	800859c <HAL_DMA_IRQHandler+0x9d8>
 8008598:	2301      	movs	r3, #1
 800859a:	e000      	b.n	800859e <HAL_DMA_IRQHandler+0x9da>
 800859c:	2300      	movs	r3, #0
 800859e:	2b00      	cmp	r3, #0
 80085a0:	f000 824f 	beq.w	8008a42 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085b0:	f003 031f 	and.w	r3, r3, #31
 80085b4:	2204      	movs	r2, #4
 80085b6:	409a      	lsls	r2, r3
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	4013      	ands	r3, r2
 80085bc:	2b00      	cmp	r3, #0
 80085be:	f000 80dd 	beq.w	800877c <HAL_DMA_IRQHandler+0xbb8>
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	f003 0304 	and.w	r3, r3, #4
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	f000 80d7 	beq.w	800877c <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085d2:	f003 031f 	and.w	r3, r3, #31
 80085d6:	2204      	movs	r2, #4
 80085d8:	409a      	lsls	r2, r3
 80085da:	69fb      	ldr	r3, [r7, #28]
 80085dc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d059      	beq.n	800869c <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d14a      	bne.n	8008688 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	f000 8220 	beq.w	8008a3c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008604:	e21a      	b.n	8008a3c <HAL_DMA_IRQHandler+0xe78>
 8008606:	bf00      	nop
 8008608:	40020010 	.word	0x40020010
 800860c:	40020028 	.word	0x40020028
 8008610:	40020040 	.word	0x40020040
 8008614:	40020058 	.word	0x40020058
 8008618:	40020070 	.word	0x40020070
 800861c:	40020088 	.word	0x40020088
 8008620:	400200a0 	.word	0x400200a0
 8008624:	400200b8 	.word	0x400200b8
 8008628:	40020410 	.word	0x40020410
 800862c:	40020428 	.word	0x40020428
 8008630:	40020440 	.word	0x40020440
 8008634:	40020458 	.word	0x40020458
 8008638:	40020470 	.word	0x40020470
 800863c:	40020488 	.word	0x40020488
 8008640:	400204a0 	.word	0x400204a0
 8008644:	400204b8 	.word	0x400204b8
 8008648:	48022c08 	.word	0x48022c08
 800864c:	48022c1c 	.word	0x48022c1c
 8008650:	48022c30 	.word	0x48022c30
 8008654:	48022c44 	.word	0x48022c44
 8008658:	48022c58 	.word	0x48022c58
 800865c:	48022c6c 	.word	0x48022c6c
 8008660:	48022c80 	.word	0x48022c80
 8008664:	48022c94 	.word	0x48022c94
 8008668:	58025408 	.word	0x58025408
 800866c:	5802541c 	.word	0x5802541c
 8008670:	58025430 	.word	0x58025430
 8008674:	58025444 	.word	0x58025444
 8008678:	58025458 	.word	0x58025458
 800867c:	5802546c 	.word	0x5802546c
 8008680:	58025480 	.word	0x58025480
 8008684:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800868c:	2b00      	cmp	r3, #0
 800868e:	f000 81d5 	beq.w	8008a3c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800869a:	e1cf      	b.n	8008a3c <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	f003 0320 	and.w	r3, r3, #32
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d160      	bne.n	8008768 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a7f      	ldr	r2, [pc, #508]	; (80088a8 <HAL_DMA_IRQHandler+0xce4>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d04a      	beq.n	8008746 <HAL_DMA_IRQHandler+0xb82>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a7d      	ldr	r2, [pc, #500]	; (80088ac <HAL_DMA_IRQHandler+0xce8>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d045      	beq.n	8008746 <HAL_DMA_IRQHandler+0xb82>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a7c      	ldr	r2, [pc, #496]	; (80088b0 <HAL_DMA_IRQHandler+0xcec>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d040      	beq.n	8008746 <HAL_DMA_IRQHandler+0xb82>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a7a      	ldr	r2, [pc, #488]	; (80088b4 <HAL_DMA_IRQHandler+0xcf0>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d03b      	beq.n	8008746 <HAL_DMA_IRQHandler+0xb82>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a79      	ldr	r2, [pc, #484]	; (80088b8 <HAL_DMA_IRQHandler+0xcf4>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d036      	beq.n	8008746 <HAL_DMA_IRQHandler+0xb82>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a77      	ldr	r2, [pc, #476]	; (80088bc <HAL_DMA_IRQHandler+0xcf8>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d031      	beq.n	8008746 <HAL_DMA_IRQHandler+0xb82>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a76      	ldr	r2, [pc, #472]	; (80088c0 <HAL_DMA_IRQHandler+0xcfc>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d02c      	beq.n	8008746 <HAL_DMA_IRQHandler+0xb82>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a74      	ldr	r2, [pc, #464]	; (80088c4 <HAL_DMA_IRQHandler+0xd00>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d027      	beq.n	8008746 <HAL_DMA_IRQHandler+0xb82>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a73      	ldr	r2, [pc, #460]	; (80088c8 <HAL_DMA_IRQHandler+0xd04>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d022      	beq.n	8008746 <HAL_DMA_IRQHandler+0xb82>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a71      	ldr	r2, [pc, #452]	; (80088cc <HAL_DMA_IRQHandler+0xd08>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d01d      	beq.n	8008746 <HAL_DMA_IRQHandler+0xb82>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a70      	ldr	r2, [pc, #448]	; (80088d0 <HAL_DMA_IRQHandler+0xd0c>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d018      	beq.n	8008746 <HAL_DMA_IRQHandler+0xb82>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a6e      	ldr	r2, [pc, #440]	; (80088d4 <HAL_DMA_IRQHandler+0xd10>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d013      	beq.n	8008746 <HAL_DMA_IRQHandler+0xb82>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a6d      	ldr	r2, [pc, #436]	; (80088d8 <HAL_DMA_IRQHandler+0xd14>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d00e      	beq.n	8008746 <HAL_DMA_IRQHandler+0xb82>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a6b      	ldr	r2, [pc, #428]	; (80088dc <HAL_DMA_IRQHandler+0xd18>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d009      	beq.n	8008746 <HAL_DMA_IRQHandler+0xb82>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a6a      	ldr	r2, [pc, #424]	; (80088e0 <HAL_DMA_IRQHandler+0xd1c>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d004      	beq.n	8008746 <HAL_DMA_IRQHandler+0xb82>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a68      	ldr	r2, [pc, #416]	; (80088e4 <HAL_DMA_IRQHandler+0xd20>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d108      	bne.n	8008758 <HAL_DMA_IRQHandler+0xb94>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f022 0208 	bic.w	r2, r2, #8
 8008754:	601a      	str	r2, [r3, #0]
 8008756:	e007      	b.n	8008768 <HAL_DMA_IRQHandler+0xba4>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f022 0204 	bic.w	r2, r2, #4
 8008766:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800876c:	2b00      	cmp	r3, #0
 800876e:	f000 8165 	beq.w	8008a3c <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800877a:	e15f      	b.n	8008a3c <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008780:	f003 031f 	and.w	r3, r3, #31
 8008784:	2202      	movs	r2, #2
 8008786:	409a      	lsls	r2, r3
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	4013      	ands	r3, r2
 800878c:	2b00      	cmp	r3, #0
 800878e:	f000 80c5 	beq.w	800891c <HAL_DMA_IRQHandler+0xd58>
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	f003 0302 	and.w	r3, r3, #2
 8008798:	2b00      	cmp	r3, #0
 800879a:	f000 80bf 	beq.w	800891c <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087a2:	f003 031f 	and.w	r3, r3, #31
 80087a6:	2202      	movs	r2, #2
 80087a8:	409a      	lsls	r2, r3
 80087aa:	69fb      	ldr	r3, [r7, #28]
 80087ac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d018      	beq.n	80087ea <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d109      	bne.n	80087d6 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	f000 813a 	beq.w	8008a40 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80087d4:	e134      	b.n	8008a40 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087da:	2b00      	cmp	r3, #0
 80087dc:	f000 8130 	beq.w	8008a40 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80087e8:	e12a      	b.n	8008a40 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	f003 0320 	and.w	r3, r3, #32
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	f040 8089 	bne.w	8008908 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a2b      	ldr	r2, [pc, #172]	; (80088a8 <HAL_DMA_IRQHandler+0xce4>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d04a      	beq.n	8008896 <HAL_DMA_IRQHandler+0xcd2>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a29      	ldr	r2, [pc, #164]	; (80088ac <HAL_DMA_IRQHandler+0xce8>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d045      	beq.n	8008896 <HAL_DMA_IRQHandler+0xcd2>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a28      	ldr	r2, [pc, #160]	; (80088b0 <HAL_DMA_IRQHandler+0xcec>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d040      	beq.n	8008896 <HAL_DMA_IRQHandler+0xcd2>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a26      	ldr	r2, [pc, #152]	; (80088b4 <HAL_DMA_IRQHandler+0xcf0>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d03b      	beq.n	8008896 <HAL_DMA_IRQHandler+0xcd2>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a25      	ldr	r2, [pc, #148]	; (80088b8 <HAL_DMA_IRQHandler+0xcf4>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d036      	beq.n	8008896 <HAL_DMA_IRQHandler+0xcd2>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a23      	ldr	r2, [pc, #140]	; (80088bc <HAL_DMA_IRQHandler+0xcf8>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d031      	beq.n	8008896 <HAL_DMA_IRQHandler+0xcd2>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a22      	ldr	r2, [pc, #136]	; (80088c0 <HAL_DMA_IRQHandler+0xcfc>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d02c      	beq.n	8008896 <HAL_DMA_IRQHandler+0xcd2>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a20      	ldr	r2, [pc, #128]	; (80088c4 <HAL_DMA_IRQHandler+0xd00>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d027      	beq.n	8008896 <HAL_DMA_IRQHandler+0xcd2>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a1f      	ldr	r2, [pc, #124]	; (80088c8 <HAL_DMA_IRQHandler+0xd04>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d022      	beq.n	8008896 <HAL_DMA_IRQHandler+0xcd2>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a1d      	ldr	r2, [pc, #116]	; (80088cc <HAL_DMA_IRQHandler+0xd08>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d01d      	beq.n	8008896 <HAL_DMA_IRQHandler+0xcd2>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a1c      	ldr	r2, [pc, #112]	; (80088d0 <HAL_DMA_IRQHandler+0xd0c>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d018      	beq.n	8008896 <HAL_DMA_IRQHandler+0xcd2>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a1a      	ldr	r2, [pc, #104]	; (80088d4 <HAL_DMA_IRQHandler+0xd10>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d013      	beq.n	8008896 <HAL_DMA_IRQHandler+0xcd2>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a19      	ldr	r2, [pc, #100]	; (80088d8 <HAL_DMA_IRQHandler+0xd14>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d00e      	beq.n	8008896 <HAL_DMA_IRQHandler+0xcd2>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a17      	ldr	r2, [pc, #92]	; (80088dc <HAL_DMA_IRQHandler+0xd18>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d009      	beq.n	8008896 <HAL_DMA_IRQHandler+0xcd2>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a16      	ldr	r2, [pc, #88]	; (80088e0 <HAL_DMA_IRQHandler+0xd1c>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d004      	beq.n	8008896 <HAL_DMA_IRQHandler+0xcd2>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a14      	ldr	r2, [pc, #80]	; (80088e4 <HAL_DMA_IRQHandler+0xd20>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d128      	bne.n	80088e8 <HAL_DMA_IRQHandler+0xd24>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f022 0214 	bic.w	r2, r2, #20
 80088a4:	601a      	str	r2, [r3, #0]
 80088a6:	e027      	b.n	80088f8 <HAL_DMA_IRQHandler+0xd34>
 80088a8:	40020010 	.word	0x40020010
 80088ac:	40020028 	.word	0x40020028
 80088b0:	40020040 	.word	0x40020040
 80088b4:	40020058 	.word	0x40020058
 80088b8:	40020070 	.word	0x40020070
 80088bc:	40020088 	.word	0x40020088
 80088c0:	400200a0 	.word	0x400200a0
 80088c4:	400200b8 	.word	0x400200b8
 80088c8:	40020410 	.word	0x40020410
 80088cc:	40020428 	.word	0x40020428
 80088d0:	40020440 	.word	0x40020440
 80088d4:	40020458 	.word	0x40020458
 80088d8:	40020470 	.word	0x40020470
 80088dc:	40020488 	.word	0x40020488
 80088e0:	400204a0 	.word	0x400204a0
 80088e4:	400204b8 	.word	0x400204b8
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f022 020a 	bic.w	r2, r2, #10
 80088f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2201      	movs	r2, #1
 80088fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2200      	movs	r2, #0
 8008904:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800890c:	2b00      	cmp	r3, #0
 800890e:	f000 8097 	beq.w	8008a40 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800891a:	e091      	b.n	8008a40 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008920:	f003 031f 	and.w	r3, r3, #31
 8008924:	2208      	movs	r2, #8
 8008926:	409a      	lsls	r2, r3
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	4013      	ands	r3, r2
 800892c:	2b00      	cmp	r3, #0
 800892e:	f000 8088 	beq.w	8008a42 <HAL_DMA_IRQHandler+0xe7e>
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	f003 0308 	and.w	r3, r3, #8
 8008938:	2b00      	cmp	r3, #0
 800893a:	f000 8082 	beq.w	8008a42 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a41      	ldr	r2, [pc, #260]	; (8008a48 <HAL_DMA_IRQHandler+0xe84>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d04a      	beq.n	80089de <HAL_DMA_IRQHandler+0xe1a>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a3f      	ldr	r2, [pc, #252]	; (8008a4c <HAL_DMA_IRQHandler+0xe88>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d045      	beq.n	80089de <HAL_DMA_IRQHandler+0xe1a>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a3e      	ldr	r2, [pc, #248]	; (8008a50 <HAL_DMA_IRQHandler+0xe8c>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d040      	beq.n	80089de <HAL_DMA_IRQHandler+0xe1a>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a3c      	ldr	r2, [pc, #240]	; (8008a54 <HAL_DMA_IRQHandler+0xe90>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d03b      	beq.n	80089de <HAL_DMA_IRQHandler+0xe1a>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a3b      	ldr	r2, [pc, #236]	; (8008a58 <HAL_DMA_IRQHandler+0xe94>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d036      	beq.n	80089de <HAL_DMA_IRQHandler+0xe1a>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a39      	ldr	r2, [pc, #228]	; (8008a5c <HAL_DMA_IRQHandler+0xe98>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d031      	beq.n	80089de <HAL_DMA_IRQHandler+0xe1a>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a38      	ldr	r2, [pc, #224]	; (8008a60 <HAL_DMA_IRQHandler+0xe9c>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d02c      	beq.n	80089de <HAL_DMA_IRQHandler+0xe1a>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a36      	ldr	r2, [pc, #216]	; (8008a64 <HAL_DMA_IRQHandler+0xea0>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d027      	beq.n	80089de <HAL_DMA_IRQHandler+0xe1a>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a35      	ldr	r2, [pc, #212]	; (8008a68 <HAL_DMA_IRQHandler+0xea4>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d022      	beq.n	80089de <HAL_DMA_IRQHandler+0xe1a>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a33      	ldr	r2, [pc, #204]	; (8008a6c <HAL_DMA_IRQHandler+0xea8>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d01d      	beq.n	80089de <HAL_DMA_IRQHandler+0xe1a>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a32      	ldr	r2, [pc, #200]	; (8008a70 <HAL_DMA_IRQHandler+0xeac>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d018      	beq.n	80089de <HAL_DMA_IRQHandler+0xe1a>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a30      	ldr	r2, [pc, #192]	; (8008a74 <HAL_DMA_IRQHandler+0xeb0>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d013      	beq.n	80089de <HAL_DMA_IRQHandler+0xe1a>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a2f      	ldr	r2, [pc, #188]	; (8008a78 <HAL_DMA_IRQHandler+0xeb4>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d00e      	beq.n	80089de <HAL_DMA_IRQHandler+0xe1a>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a2d      	ldr	r2, [pc, #180]	; (8008a7c <HAL_DMA_IRQHandler+0xeb8>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d009      	beq.n	80089de <HAL_DMA_IRQHandler+0xe1a>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a2c      	ldr	r2, [pc, #176]	; (8008a80 <HAL_DMA_IRQHandler+0xebc>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d004      	beq.n	80089de <HAL_DMA_IRQHandler+0xe1a>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a2a      	ldr	r2, [pc, #168]	; (8008a84 <HAL_DMA_IRQHandler+0xec0>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d108      	bne.n	80089f0 <HAL_DMA_IRQHandler+0xe2c>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	681a      	ldr	r2, [r3, #0]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f022 021c 	bic.w	r2, r2, #28
 80089ec:	601a      	str	r2, [r3, #0]
 80089ee:	e007      	b.n	8008a00 <HAL_DMA_IRQHandler+0xe3c>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f022 020e 	bic.w	r2, r2, #14
 80089fe:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a04:	f003 031f 	and.w	r3, r3, #31
 8008a08:	2201      	movs	r2, #1
 8008a0a:	409a      	lsls	r2, r3
 8008a0c:	69fb      	ldr	r3, [r7, #28]
 8008a0e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2201      	movs	r2, #1
 8008a14:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2201      	movs	r2, #1
 8008a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2200      	movs	r2, #0
 8008a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d009      	beq.n	8008a42 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	4798      	blx	r3
 8008a36:	e004      	b.n	8008a42 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8008a38:	bf00      	nop
 8008a3a:	e002      	b.n	8008a42 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008a3c:	bf00      	nop
 8008a3e:	e000      	b.n	8008a42 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008a40:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008a42:	3728      	adds	r7, #40	; 0x28
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}
 8008a48:	40020010 	.word	0x40020010
 8008a4c:	40020028 	.word	0x40020028
 8008a50:	40020040 	.word	0x40020040
 8008a54:	40020058 	.word	0x40020058
 8008a58:	40020070 	.word	0x40020070
 8008a5c:	40020088 	.word	0x40020088
 8008a60:	400200a0 	.word	0x400200a0
 8008a64:	400200b8 	.word	0x400200b8
 8008a68:	40020410 	.word	0x40020410
 8008a6c:	40020428 	.word	0x40020428
 8008a70:	40020440 	.word	0x40020440
 8008a74:	40020458 	.word	0x40020458
 8008a78:	40020470 	.word	0x40020470
 8008a7c:	40020488 	.word	0x40020488
 8008a80:	400204a0 	.word	0x400204a0
 8008a84:	400204b8 	.word	0x400204b8

08008a88 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b083      	sub	sp, #12
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	370c      	adds	r7, #12
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr

08008aa0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b087      	sub	sp, #28
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	607a      	str	r2, [r7, #4]
 8008aac:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ab2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ab8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4a7f      	ldr	r2, [pc, #508]	; (8008cbc <DMA_SetConfig+0x21c>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d072      	beq.n	8008baa <DMA_SetConfig+0x10a>
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a7d      	ldr	r2, [pc, #500]	; (8008cc0 <DMA_SetConfig+0x220>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d06d      	beq.n	8008baa <DMA_SetConfig+0x10a>
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a7c      	ldr	r2, [pc, #496]	; (8008cc4 <DMA_SetConfig+0x224>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d068      	beq.n	8008baa <DMA_SetConfig+0x10a>
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a7a      	ldr	r2, [pc, #488]	; (8008cc8 <DMA_SetConfig+0x228>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d063      	beq.n	8008baa <DMA_SetConfig+0x10a>
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a79      	ldr	r2, [pc, #484]	; (8008ccc <DMA_SetConfig+0x22c>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d05e      	beq.n	8008baa <DMA_SetConfig+0x10a>
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a77      	ldr	r2, [pc, #476]	; (8008cd0 <DMA_SetConfig+0x230>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d059      	beq.n	8008baa <DMA_SetConfig+0x10a>
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a76      	ldr	r2, [pc, #472]	; (8008cd4 <DMA_SetConfig+0x234>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d054      	beq.n	8008baa <DMA_SetConfig+0x10a>
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a74      	ldr	r2, [pc, #464]	; (8008cd8 <DMA_SetConfig+0x238>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d04f      	beq.n	8008baa <DMA_SetConfig+0x10a>
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a73      	ldr	r2, [pc, #460]	; (8008cdc <DMA_SetConfig+0x23c>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d04a      	beq.n	8008baa <DMA_SetConfig+0x10a>
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a71      	ldr	r2, [pc, #452]	; (8008ce0 <DMA_SetConfig+0x240>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d045      	beq.n	8008baa <DMA_SetConfig+0x10a>
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4a70      	ldr	r2, [pc, #448]	; (8008ce4 <DMA_SetConfig+0x244>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d040      	beq.n	8008baa <DMA_SetConfig+0x10a>
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a6e      	ldr	r2, [pc, #440]	; (8008ce8 <DMA_SetConfig+0x248>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d03b      	beq.n	8008baa <DMA_SetConfig+0x10a>
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a6d      	ldr	r2, [pc, #436]	; (8008cec <DMA_SetConfig+0x24c>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d036      	beq.n	8008baa <DMA_SetConfig+0x10a>
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a6b      	ldr	r2, [pc, #428]	; (8008cf0 <DMA_SetConfig+0x250>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d031      	beq.n	8008baa <DMA_SetConfig+0x10a>
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a6a      	ldr	r2, [pc, #424]	; (8008cf4 <DMA_SetConfig+0x254>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d02c      	beq.n	8008baa <DMA_SetConfig+0x10a>
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4a68      	ldr	r2, [pc, #416]	; (8008cf8 <DMA_SetConfig+0x258>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d027      	beq.n	8008baa <DMA_SetConfig+0x10a>
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4a67      	ldr	r2, [pc, #412]	; (8008cfc <DMA_SetConfig+0x25c>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d022      	beq.n	8008baa <DMA_SetConfig+0x10a>
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a65      	ldr	r2, [pc, #404]	; (8008d00 <DMA_SetConfig+0x260>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d01d      	beq.n	8008baa <DMA_SetConfig+0x10a>
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4a64      	ldr	r2, [pc, #400]	; (8008d04 <DMA_SetConfig+0x264>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d018      	beq.n	8008baa <DMA_SetConfig+0x10a>
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a62      	ldr	r2, [pc, #392]	; (8008d08 <DMA_SetConfig+0x268>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d013      	beq.n	8008baa <DMA_SetConfig+0x10a>
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a61      	ldr	r2, [pc, #388]	; (8008d0c <DMA_SetConfig+0x26c>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d00e      	beq.n	8008baa <DMA_SetConfig+0x10a>
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a5f      	ldr	r2, [pc, #380]	; (8008d10 <DMA_SetConfig+0x270>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d009      	beq.n	8008baa <DMA_SetConfig+0x10a>
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a5e      	ldr	r2, [pc, #376]	; (8008d14 <DMA_SetConfig+0x274>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d004      	beq.n	8008baa <DMA_SetConfig+0x10a>
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a5c      	ldr	r2, [pc, #368]	; (8008d18 <DMA_SetConfig+0x278>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d101      	bne.n	8008bae <DMA_SetConfig+0x10e>
 8008baa:	2301      	movs	r3, #1
 8008bac:	e000      	b.n	8008bb0 <DMA_SetConfig+0x110>
 8008bae:	2300      	movs	r3, #0
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d00d      	beq.n	8008bd0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bb8:	68fa      	ldr	r2, [r7, #12]
 8008bba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008bbc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d004      	beq.n	8008bd0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bca:	68fa      	ldr	r2, [r7, #12]
 8008bcc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008bce:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a39      	ldr	r2, [pc, #228]	; (8008cbc <DMA_SetConfig+0x21c>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d04a      	beq.n	8008c70 <DMA_SetConfig+0x1d0>
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a38      	ldr	r2, [pc, #224]	; (8008cc0 <DMA_SetConfig+0x220>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d045      	beq.n	8008c70 <DMA_SetConfig+0x1d0>
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a36      	ldr	r2, [pc, #216]	; (8008cc4 <DMA_SetConfig+0x224>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d040      	beq.n	8008c70 <DMA_SetConfig+0x1d0>
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a35      	ldr	r2, [pc, #212]	; (8008cc8 <DMA_SetConfig+0x228>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d03b      	beq.n	8008c70 <DMA_SetConfig+0x1d0>
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a33      	ldr	r2, [pc, #204]	; (8008ccc <DMA_SetConfig+0x22c>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d036      	beq.n	8008c70 <DMA_SetConfig+0x1d0>
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a32      	ldr	r2, [pc, #200]	; (8008cd0 <DMA_SetConfig+0x230>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d031      	beq.n	8008c70 <DMA_SetConfig+0x1d0>
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a30      	ldr	r2, [pc, #192]	; (8008cd4 <DMA_SetConfig+0x234>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d02c      	beq.n	8008c70 <DMA_SetConfig+0x1d0>
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a2f      	ldr	r2, [pc, #188]	; (8008cd8 <DMA_SetConfig+0x238>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d027      	beq.n	8008c70 <DMA_SetConfig+0x1d0>
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a2d      	ldr	r2, [pc, #180]	; (8008cdc <DMA_SetConfig+0x23c>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d022      	beq.n	8008c70 <DMA_SetConfig+0x1d0>
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a2c      	ldr	r2, [pc, #176]	; (8008ce0 <DMA_SetConfig+0x240>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d01d      	beq.n	8008c70 <DMA_SetConfig+0x1d0>
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4a2a      	ldr	r2, [pc, #168]	; (8008ce4 <DMA_SetConfig+0x244>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d018      	beq.n	8008c70 <DMA_SetConfig+0x1d0>
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a29      	ldr	r2, [pc, #164]	; (8008ce8 <DMA_SetConfig+0x248>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d013      	beq.n	8008c70 <DMA_SetConfig+0x1d0>
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a27      	ldr	r2, [pc, #156]	; (8008cec <DMA_SetConfig+0x24c>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d00e      	beq.n	8008c70 <DMA_SetConfig+0x1d0>
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4a26      	ldr	r2, [pc, #152]	; (8008cf0 <DMA_SetConfig+0x250>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d009      	beq.n	8008c70 <DMA_SetConfig+0x1d0>
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a24      	ldr	r2, [pc, #144]	; (8008cf4 <DMA_SetConfig+0x254>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d004      	beq.n	8008c70 <DMA_SetConfig+0x1d0>
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a23      	ldr	r2, [pc, #140]	; (8008cf8 <DMA_SetConfig+0x258>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d101      	bne.n	8008c74 <DMA_SetConfig+0x1d4>
 8008c70:	2301      	movs	r3, #1
 8008c72:	e000      	b.n	8008c76 <DMA_SetConfig+0x1d6>
 8008c74:	2300      	movs	r3, #0
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d059      	beq.n	8008d2e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c7e:	f003 031f 	and.w	r3, r3, #31
 8008c82:	223f      	movs	r2, #63	; 0x3f
 8008c84:	409a      	lsls	r2, r3
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008c98:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	683a      	ldr	r2, [r7, #0]
 8008ca0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	2b40      	cmp	r3, #64	; 0x40
 8008ca8:	d138      	bne.n	8008d1c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	68ba      	ldr	r2, [r7, #8]
 8008cb8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008cba:	e0ae      	b.n	8008e1a <DMA_SetConfig+0x37a>
 8008cbc:	40020010 	.word	0x40020010
 8008cc0:	40020028 	.word	0x40020028
 8008cc4:	40020040 	.word	0x40020040
 8008cc8:	40020058 	.word	0x40020058
 8008ccc:	40020070 	.word	0x40020070
 8008cd0:	40020088 	.word	0x40020088
 8008cd4:	400200a0 	.word	0x400200a0
 8008cd8:	400200b8 	.word	0x400200b8
 8008cdc:	40020410 	.word	0x40020410
 8008ce0:	40020428 	.word	0x40020428
 8008ce4:	40020440 	.word	0x40020440
 8008ce8:	40020458 	.word	0x40020458
 8008cec:	40020470 	.word	0x40020470
 8008cf0:	40020488 	.word	0x40020488
 8008cf4:	400204a0 	.word	0x400204a0
 8008cf8:	400204b8 	.word	0x400204b8
 8008cfc:	58025408 	.word	0x58025408
 8008d00:	5802541c 	.word	0x5802541c
 8008d04:	58025430 	.word	0x58025430
 8008d08:	58025444 	.word	0x58025444
 8008d0c:	58025458 	.word	0x58025458
 8008d10:	5802546c 	.word	0x5802546c
 8008d14:	58025480 	.word	0x58025480
 8008d18:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	68ba      	ldr	r2, [r7, #8]
 8008d22:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	60da      	str	r2, [r3, #12]
}
 8008d2c:	e075      	b.n	8008e1a <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a3d      	ldr	r2, [pc, #244]	; (8008e28 <DMA_SetConfig+0x388>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d04a      	beq.n	8008dce <DMA_SetConfig+0x32e>
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a3b      	ldr	r2, [pc, #236]	; (8008e2c <DMA_SetConfig+0x38c>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d045      	beq.n	8008dce <DMA_SetConfig+0x32e>
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a3a      	ldr	r2, [pc, #232]	; (8008e30 <DMA_SetConfig+0x390>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d040      	beq.n	8008dce <DMA_SetConfig+0x32e>
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a38      	ldr	r2, [pc, #224]	; (8008e34 <DMA_SetConfig+0x394>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d03b      	beq.n	8008dce <DMA_SetConfig+0x32e>
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a37      	ldr	r2, [pc, #220]	; (8008e38 <DMA_SetConfig+0x398>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d036      	beq.n	8008dce <DMA_SetConfig+0x32e>
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a35      	ldr	r2, [pc, #212]	; (8008e3c <DMA_SetConfig+0x39c>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d031      	beq.n	8008dce <DMA_SetConfig+0x32e>
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a34      	ldr	r2, [pc, #208]	; (8008e40 <DMA_SetConfig+0x3a0>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d02c      	beq.n	8008dce <DMA_SetConfig+0x32e>
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a32      	ldr	r2, [pc, #200]	; (8008e44 <DMA_SetConfig+0x3a4>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d027      	beq.n	8008dce <DMA_SetConfig+0x32e>
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a31      	ldr	r2, [pc, #196]	; (8008e48 <DMA_SetConfig+0x3a8>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d022      	beq.n	8008dce <DMA_SetConfig+0x32e>
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a2f      	ldr	r2, [pc, #188]	; (8008e4c <DMA_SetConfig+0x3ac>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d01d      	beq.n	8008dce <DMA_SetConfig+0x32e>
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a2e      	ldr	r2, [pc, #184]	; (8008e50 <DMA_SetConfig+0x3b0>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d018      	beq.n	8008dce <DMA_SetConfig+0x32e>
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a2c      	ldr	r2, [pc, #176]	; (8008e54 <DMA_SetConfig+0x3b4>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d013      	beq.n	8008dce <DMA_SetConfig+0x32e>
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a2b      	ldr	r2, [pc, #172]	; (8008e58 <DMA_SetConfig+0x3b8>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d00e      	beq.n	8008dce <DMA_SetConfig+0x32e>
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a29      	ldr	r2, [pc, #164]	; (8008e5c <DMA_SetConfig+0x3bc>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d009      	beq.n	8008dce <DMA_SetConfig+0x32e>
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a28      	ldr	r2, [pc, #160]	; (8008e60 <DMA_SetConfig+0x3c0>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d004      	beq.n	8008dce <DMA_SetConfig+0x32e>
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a26      	ldr	r2, [pc, #152]	; (8008e64 <DMA_SetConfig+0x3c4>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d101      	bne.n	8008dd2 <DMA_SetConfig+0x332>
 8008dce:	2301      	movs	r3, #1
 8008dd0:	e000      	b.n	8008dd4 <DMA_SetConfig+0x334>
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d020      	beq.n	8008e1a <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ddc:	f003 031f 	and.w	r3, r3, #31
 8008de0:	2201      	movs	r2, #1
 8008de2:	409a      	lsls	r2, r3
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	683a      	ldr	r2, [r7, #0]
 8008dee:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	689b      	ldr	r3, [r3, #8]
 8008df4:	2b40      	cmp	r3, #64	; 0x40
 8008df6:	d108      	bne.n	8008e0a <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	687a      	ldr	r2, [r7, #4]
 8008dfe:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	68ba      	ldr	r2, [r7, #8]
 8008e06:	60da      	str	r2, [r3, #12]
}
 8008e08:	e007      	b.n	8008e1a <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	68ba      	ldr	r2, [r7, #8]
 8008e10:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	60da      	str	r2, [r3, #12]
}
 8008e1a:	bf00      	nop
 8008e1c:	371c      	adds	r7, #28
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e24:	4770      	bx	lr
 8008e26:	bf00      	nop
 8008e28:	48022c08 	.word	0x48022c08
 8008e2c:	48022c1c 	.word	0x48022c1c
 8008e30:	48022c30 	.word	0x48022c30
 8008e34:	48022c44 	.word	0x48022c44
 8008e38:	48022c58 	.word	0x48022c58
 8008e3c:	48022c6c 	.word	0x48022c6c
 8008e40:	48022c80 	.word	0x48022c80
 8008e44:	48022c94 	.word	0x48022c94
 8008e48:	58025408 	.word	0x58025408
 8008e4c:	5802541c 	.word	0x5802541c
 8008e50:	58025430 	.word	0x58025430
 8008e54:	58025444 	.word	0x58025444
 8008e58:	58025458 	.word	0x58025458
 8008e5c:	5802546c 	.word	0x5802546c
 8008e60:	58025480 	.word	0x58025480
 8008e64:	58025494 	.word	0x58025494

08008e68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b085      	sub	sp, #20
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a42      	ldr	r2, [pc, #264]	; (8008f80 <DMA_CalcBaseAndBitshift+0x118>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d04a      	beq.n	8008f10 <DMA_CalcBaseAndBitshift+0xa8>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a41      	ldr	r2, [pc, #260]	; (8008f84 <DMA_CalcBaseAndBitshift+0x11c>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d045      	beq.n	8008f10 <DMA_CalcBaseAndBitshift+0xa8>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a3f      	ldr	r2, [pc, #252]	; (8008f88 <DMA_CalcBaseAndBitshift+0x120>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d040      	beq.n	8008f10 <DMA_CalcBaseAndBitshift+0xa8>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a3e      	ldr	r2, [pc, #248]	; (8008f8c <DMA_CalcBaseAndBitshift+0x124>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d03b      	beq.n	8008f10 <DMA_CalcBaseAndBitshift+0xa8>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a3c      	ldr	r2, [pc, #240]	; (8008f90 <DMA_CalcBaseAndBitshift+0x128>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d036      	beq.n	8008f10 <DMA_CalcBaseAndBitshift+0xa8>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a3b      	ldr	r2, [pc, #236]	; (8008f94 <DMA_CalcBaseAndBitshift+0x12c>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d031      	beq.n	8008f10 <DMA_CalcBaseAndBitshift+0xa8>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a39      	ldr	r2, [pc, #228]	; (8008f98 <DMA_CalcBaseAndBitshift+0x130>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d02c      	beq.n	8008f10 <DMA_CalcBaseAndBitshift+0xa8>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a38      	ldr	r2, [pc, #224]	; (8008f9c <DMA_CalcBaseAndBitshift+0x134>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d027      	beq.n	8008f10 <DMA_CalcBaseAndBitshift+0xa8>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a36      	ldr	r2, [pc, #216]	; (8008fa0 <DMA_CalcBaseAndBitshift+0x138>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d022      	beq.n	8008f10 <DMA_CalcBaseAndBitshift+0xa8>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4a35      	ldr	r2, [pc, #212]	; (8008fa4 <DMA_CalcBaseAndBitshift+0x13c>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d01d      	beq.n	8008f10 <DMA_CalcBaseAndBitshift+0xa8>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a33      	ldr	r2, [pc, #204]	; (8008fa8 <DMA_CalcBaseAndBitshift+0x140>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d018      	beq.n	8008f10 <DMA_CalcBaseAndBitshift+0xa8>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a32      	ldr	r2, [pc, #200]	; (8008fac <DMA_CalcBaseAndBitshift+0x144>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d013      	beq.n	8008f10 <DMA_CalcBaseAndBitshift+0xa8>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4a30      	ldr	r2, [pc, #192]	; (8008fb0 <DMA_CalcBaseAndBitshift+0x148>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d00e      	beq.n	8008f10 <DMA_CalcBaseAndBitshift+0xa8>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a2f      	ldr	r2, [pc, #188]	; (8008fb4 <DMA_CalcBaseAndBitshift+0x14c>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d009      	beq.n	8008f10 <DMA_CalcBaseAndBitshift+0xa8>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a2d      	ldr	r2, [pc, #180]	; (8008fb8 <DMA_CalcBaseAndBitshift+0x150>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d004      	beq.n	8008f10 <DMA_CalcBaseAndBitshift+0xa8>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4a2c      	ldr	r2, [pc, #176]	; (8008fbc <DMA_CalcBaseAndBitshift+0x154>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d101      	bne.n	8008f14 <DMA_CalcBaseAndBitshift+0xac>
 8008f10:	2301      	movs	r3, #1
 8008f12:	e000      	b.n	8008f16 <DMA_CalcBaseAndBitshift+0xae>
 8008f14:	2300      	movs	r3, #0
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d024      	beq.n	8008f64 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	3b10      	subs	r3, #16
 8008f22:	4a27      	ldr	r2, [pc, #156]	; (8008fc0 <DMA_CalcBaseAndBitshift+0x158>)
 8008f24:	fba2 2303 	umull	r2, r3, r2, r3
 8008f28:	091b      	lsrs	r3, r3, #4
 8008f2a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f003 0307 	and.w	r3, r3, #7
 8008f32:	4a24      	ldr	r2, [pc, #144]	; (8008fc4 <DMA_CalcBaseAndBitshift+0x15c>)
 8008f34:	5cd3      	ldrb	r3, [r2, r3]
 8008f36:	461a      	mov	r2, r3
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2b03      	cmp	r3, #3
 8008f40:	d908      	bls.n	8008f54 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	461a      	mov	r2, r3
 8008f48:	4b1f      	ldr	r3, [pc, #124]	; (8008fc8 <DMA_CalcBaseAndBitshift+0x160>)
 8008f4a:	4013      	ands	r3, r2
 8008f4c:	1d1a      	adds	r2, r3, #4
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	659a      	str	r2, [r3, #88]	; 0x58
 8008f52:	e00d      	b.n	8008f70 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	461a      	mov	r2, r3
 8008f5a:	4b1b      	ldr	r3, [pc, #108]	; (8008fc8 <DMA_CalcBaseAndBitshift+0x160>)
 8008f5c:	4013      	ands	r3, r2
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	6593      	str	r3, [r2, #88]	; 0x58
 8008f62:	e005      	b.n	8008f70 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3714      	adds	r7, #20
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr
 8008f80:	40020010 	.word	0x40020010
 8008f84:	40020028 	.word	0x40020028
 8008f88:	40020040 	.word	0x40020040
 8008f8c:	40020058 	.word	0x40020058
 8008f90:	40020070 	.word	0x40020070
 8008f94:	40020088 	.word	0x40020088
 8008f98:	400200a0 	.word	0x400200a0
 8008f9c:	400200b8 	.word	0x400200b8
 8008fa0:	40020410 	.word	0x40020410
 8008fa4:	40020428 	.word	0x40020428
 8008fa8:	40020440 	.word	0x40020440
 8008fac:	40020458 	.word	0x40020458
 8008fb0:	40020470 	.word	0x40020470
 8008fb4:	40020488 	.word	0x40020488
 8008fb8:	400204a0 	.word	0x400204a0
 8008fbc:	400204b8 	.word	0x400204b8
 8008fc0:	aaaaaaab 	.word	0xaaaaaaab
 8008fc4:	080144b8 	.word	0x080144b8
 8008fc8:	fffffc00 	.word	0xfffffc00

08008fcc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b085      	sub	sp, #20
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	699b      	ldr	r3, [r3, #24]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d120      	bne.n	8009022 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fe4:	2b03      	cmp	r3, #3
 8008fe6:	d858      	bhi.n	800909a <DMA_CheckFifoParam+0xce>
 8008fe8:	a201      	add	r2, pc, #4	; (adr r2, 8008ff0 <DMA_CheckFifoParam+0x24>)
 8008fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fee:	bf00      	nop
 8008ff0:	08009001 	.word	0x08009001
 8008ff4:	08009013 	.word	0x08009013
 8008ff8:	08009001 	.word	0x08009001
 8008ffc:	0800909b 	.word	0x0800909b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009004:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009008:	2b00      	cmp	r3, #0
 800900a:	d048      	beq.n	800909e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800900c:	2301      	movs	r3, #1
 800900e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009010:	e045      	b.n	800909e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009016:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800901a:	d142      	bne.n	80090a2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800901c:	2301      	movs	r3, #1
 800901e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009020:	e03f      	b.n	80090a2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	699b      	ldr	r3, [r3, #24]
 8009026:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800902a:	d123      	bne.n	8009074 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009030:	2b03      	cmp	r3, #3
 8009032:	d838      	bhi.n	80090a6 <DMA_CheckFifoParam+0xda>
 8009034:	a201      	add	r2, pc, #4	; (adr r2, 800903c <DMA_CheckFifoParam+0x70>)
 8009036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800903a:	bf00      	nop
 800903c:	0800904d 	.word	0x0800904d
 8009040:	08009053 	.word	0x08009053
 8009044:	0800904d 	.word	0x0800904d
 8009048:	08009065 	.word	0x08009065
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800904c:	2301      	movs	r3, #1
 800904e:	73fb      	strb	r3, [r7, #15]
        break;
 8009050:	e030      	b.n	80090b4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009056:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800905a:	2b00      	cmp	r3, #0
 800905c:	d025      	beq.n	80090aa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800905e:	2301      	movs	r3, #1
 8009060:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009062:	e022      	b.n	80090aa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009068:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800906c:	d11f      	bne.n	80090ae <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800906e:	2301      	movs	r3, #1
 8009070:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009072:	e01c      	b.n	80090ae <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009078:	2b02      	cmp	r3, #2
 800907a:	d902      	bls.n	8009082 <DMA_CheckFifoParam+0xb6>
 800907c:	2b03      	cmp	r3, #3
 800907e:	d003      	beq.n	8009088 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009080:	e018      	b.n	80090b4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8009082:	2301      	movs	r3, #1
 8009084:	73fb      	strb	r3, [r7, #15]
        break;
 8009086:	e015      	b.n	80090b4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800908c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009090:	2b00      	cmp	r3, #0
 8009092:	d00e      	beq.n	80090b2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009094:	2301      	movs	r3, #1
 8009096:	73fb      	strb	r3, [r7, #15]
    break;
 8009098:	e00b      	b.n	80090b2 <DMA_CheckFifoParam+0xe6>
        break;
 800909a:	bf00      	nop
 800909c:	e00a      	b.n	80090b4 <DMA_CheckFifoParam+0xe8>
        break;
 800909e:	bf00      	nop
 80090a0:	e008      	b.n	80090b4 <DMA_CheckFifoParam+0xe8>
        break;
 80090a2:	bf00      	nop
 80090a4:	e006      	b.n	80090b4 <DMA_CheckFifoParam+0xe8>
        break;
 80090a6:	bf00      	nop
 80090a8:	e004      	b.n	80090b4 <DMA_CheckFifoParam+0xe8>
        break;
 80090aa:	bf00      	nop
 80090ac:	e002      	b.n	80090b4 <DMA_CheckFifoParam+0xe8>
        break;
 80090ae:	bf00      	nop
 80090b0:	e000      	b.n	80090b4 <DMA_CheckFifoParam+0xe8>
    break;
 80090b2:	bf00      	nop
    }
  }

  return status;
 80090b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3714      	adds	r7, #20
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr
 80090c2:	bf00      	nop

080090c4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b085      	sub	sp, #20
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a38      	ldr	r2, [pc, #224]	; (80091b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d022      	beq.n	8009122 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a36      	ldr	r2, [pc, #216]	; (80091bc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d01d      	beq.n	8009122 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a35      	ldr	r2, [pc, #212]	; (80091c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d018      	beq.n	8009122 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a33      	ldr	r2, [pc, #204]	; (80091c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d013      	beq.n	8009122 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4a32      	ldr	r2, [pc, #200]	; (80091c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d00e      	beq.n	8009122 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a30      	ldr	r2, [pc, #192]	; (80091cc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d009      	beq.n	8009122 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4a2f      	ldr	r2, [pc, #188]	; (80091d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d004      	beq.n	8009122 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a2d      	ldr	r2, [pc, #180]	; (80091d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d101      	bne.n	8009126 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8009122:	2301      	movs	r3, #1
 8009124:	e000      	b.n	8009128 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8009126:	2300      	movs	r3, #0
 8009128:	2b00      	cmp	r3, #0
 800912a:	d01a      	beq.n	8009162 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	b2db      	uxtb	r3, r3
 8009132:	3b08      	subs	r3, #8
 8009134:	4a28      	ldr	r2, [pc, #160]	; (80091d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8009136:	fba2 2303 	umull	r2, r3, r2, r3
 800913a:	091b      	lsrs	r3, r3, #4
 800913c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800913e:	68fa      	ldr	r2, [r7, #12]
 8009140:	4b26      	ldr	r3, [pc, #152]	; (80091dc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8009142:	4413      	add	r3, r2
 8009144:	009b      	lsls	r3, r3, #2
 8009146:	461a      	mov	r2, r3
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	4a24      	ldr	r2, [pc, #144]	; (80091e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009150:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	f003 031f 	and.w	r3, r3, #31
 8009158:	2201      	movs	r2, #1
 800915a:	409a      	lsls	r2, r3
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009160:	e024      	b.n	80091ac <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	b2db      	uxtb	r3, r3
 8009168:	3b10      	subs	r3, #16
 800916a:	4a1e      	ldr	r2, [pc, #120]	; (80091e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800916c:	fba2 2303 	umull	r2, r3, r2, r3
 8009170:	091b      	lsrs	r3, r3, #4
 8009172:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	4a1c      	ldr	r2, [pc, #112]	; (80091e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d806      	bhi.n	800918a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	4a1b      	ldr	r2, [pc, #108]	; (80091ec <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d902      	bls.n	800918a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	3308      	adds	r3, #8
 8009188:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800918a:	68fa      	ldr	r2, [r7, #12]
 800918c:	4b18      	ldr	r3, [pc, #96]	; (80091f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800918e:	4413      	add	r3, r2
 8009190:	009b      	lsls	r3, r3, #2
 8009192:	461a      	mov	r2, r3
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	4a16      	ldr	r2, [pc, #88]	; (80091f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800919c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	f003 031f 	and.w	r3, r3, #31
 80091a4:	2201      	movs	r2, #1
 80091a6:	409a      	lsls	r2, r3
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	669a      	str	r2, [r3, #104]	; 0x68
}
 80091ac:	bf00      	nop
 80091ae:	3714      	adds	r7, #20
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr
 80091b8:	58025408 	.word	0x58025408
 80091bc:	5802541c 	.word	0x5802541c
 80091c0:	58025430 	.word	0x58025430
 80091c4:	58025444 	.word	0x58025444
 80091c8:	58025458 	.word	0x58025458
 80091cc:	5802546c 	.word	0x5802546c
 80091d0:	58025480 	.word	0x58025480
 80091d4:	58025494 	.word	0x58025494
 80091d8:	cccccccd 	.word	0xcccccccd
 80091dc:	16009600 	.word	0x16009600
 80091e0:	58025880 	.word	0x58025880
 80091e4:	aaaaaaab 	.word	0xaaaaaaab
 80091e8:	400204b8 	.word	0x400204b8
 80091ec:	4002040f 	.word	0x4002040f
 80091f0:	10008200 	.word	0x10008200
 80091f4:	40020880 	.word	0x40020880

080091f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b085      	sub	sp, #20
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	b2db      	uxtb	r3, r3
 8009206:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d04a      	beq.n	80092a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2b08      	cmp	r3, #8
 8009212:	d847      	bhi.n	80092a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4a25      	ldr	r2, [pc, #148]	; (80092b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d022      	beq.n	8009264 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4a24      	ldr	r2, [pc, #144]	; (80092b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d01d      	beq.n	8009264 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a22      	ldr	r2, [pc, #136]	; (80092b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d018      	beq.n	8009264 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4a21      	ldr	r2, [pc, #132]	; (80092bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d013      	beq.n	8009264 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a1f      	ldr	r2, [pc, #124]	; (80092c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d00e      	beq.n	8009264 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a1e      	ldr	r2, [pc, #120]	; (80092c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d009      	beq.n	8009264 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a1c      	ldr	r2, [pc, #112]	; (80092c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d004      	beq.n	8009264 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4a1b      	ldr	r2, [pc, #108]	; (80092cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d101      	bne.n	8009268 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009264:	2301      	movs	r3, #1
 8009266:	e000      	b.n	800926a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009268:	2300      	movs	r3, #0
 800926a:	2b00      	cmp	r3, #0
 800926c:	d00a      	beq.n	8009284 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800926e:	68fa      	ldr	r2, [r7, #12]
 8009270:	4b17      	ldr	r3, [pc, #92]	; (80092d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8009272:	4413      	add	r3, r2
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	461a      	mov	r2, r3
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	4a15      	ldr	r2, [pc, #84]	; (80092d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009280:	671a      	str	r2, [r3, #112]	; 0x70
 8009282:	e009      	b.n	8009298 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009284:	68fa      	ldr	r2, [r7, #12]
 8009286:	4b14      	ldr	r3, [pc, #80]	; (80092d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009288:	4413      	add	r3, r2
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	461a      	mov	r2, r3
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	4a11      	ldr	r2, [pc, #68]	; (80092dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8009296:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	3b01      	subs	r3, #1
 800929c:	2201      	movs	r2, #1
 800929e:	409a      	lsls	r2, r3
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80092a4:	bf00      	nop
 80092a6:	3714      	adds	r7, #20
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr
 80092b0:	58025408 	.word	0x58025408
 80092b4:	5802541c 	.word	0x5802541c
 80092b8:	58025430 	.word	0x58025430
 80092bc:	58025444 	.word	0x58025444
 80092c0:	58025458 	.word	0x58025458
 80092c4:	5802546c 	.word	0x5802546c
 80092c8:	58025480 	.word	0x58025480
 80092cc:	58025494 	.word	0x58025494
 80092d0:	1600963f 	.word	0x1600963f
 80092d4:	58025940 	.word	0x58025940
 80092d8:	1000823f 	.word	0x1000823f
 80092dc:	40020940 	.word	0x40020940

080092e0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b082      	sub	sp, #8
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d101      	bne.n	80092f2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80092ee:	2301      	movs	r3, #1
 80092f0:	e04f      	b.n	8009392 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80092f8:	b2db      	uxtb	r3, r3
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d106      	bne.n	800930c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2200      	movs	r2, #0
 8009302:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f7fa f840 	bl	800338c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2202      	movs	r2, #2
 8009310:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	4b20      	ldr	r3, [pc, #128]	; (800939c <HAL_DMA2D_Init+0xbc>)
 800931c:	4013      	ands	r3, r2
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	6851      	ldr	r1, [r2, #4]
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	69d2      	ldr	r2, [r2, #28]
 8009326:	4311      	orrs	r1, r2
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	6812      	ldr	r2, [r2, #0]
 800932c:	430b      	orrs	r3, r1
 800932e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009336:	4b1a      	ldr	r3, [pc, #104]	; (80093a0 <HAL_DMA2D_Init+0xc0>)
 8009338:	4013      	ands	r3, r2
 800933a:	687a      	ldr	r2, [r7, #4]
 800933c:	6891      	ldr	r1, [r2, #8]
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	6992      	ldr	r2, [r2, #24]
 8009342:	4311      	orrs	r1, r2
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	6812      	ldr	r2, [r2, #0]
 8009348:	430b      	orrs	r3, r1
 800934a:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009352:	4b14      	ldr	r3, [pc, #80]	; (80093a4 <HAL_DMA2D_Init+0xc4>)
 8009354:	4013      	ands	r3, r2
 8009356:	687a      	ldr	r2, [r7, #4]
 8009358:	68d1      	ldr	r1, [r2, #12]
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	6812      	ldr	r2, [r2, #0]
 800935e:	430b      	orrs	r3, r1
 8009360:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009368:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	691b      	ldr	r3, [r3, #16]
 8009370:	051a      	lsls	r2, r3, #20
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	695b      	ldr	r3, [r3, #20]
 8009376:	055b      	lsls	r3, r3, #21
 8009378:	431a      	orrs	r2, r3
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	430a      	orrs	r2, r1
 8009380:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2200      	movs	r2, #0
 8009386:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2201      	movs	r2, #1
 800938c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8009390:	2300      	movs	r3, #0
}
 8009392:	4618      	mov	r0, r3
 8009394:	3708      	adds	r7, #8
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
 800939a:	bf00      	nop
 800939c:	fff8ffbf 	.word	0xfff8ffbf
 80093a0:	fffffef8 	.word	0xfffffef8
 80093a4:	ffff0000 	.word	0xffff0000

080093a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b089      	sub	sp, #36	; 0x24
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80093b2:	2300      	movs	r3, #0
 80093b4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80093b6:	4b89      	ldr	r3, [pc, #548]	; (80095dc <HAL_GPIO_Init+0x234>)
 80093b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80093ba:	e194      	b.n	80096e6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	2101      	movs	r1, #1
 80093c2:	69fb      	ldr	r3, [r7, #28]
 80093c4:	fa01 f303 	lsl.w	r3, r1, r3
 80093c8:	4013      	ands	r3, r2
 80093ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	f000 8186 	beq.w	80096e0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	f003 0303 	and.w	r3, r3, #3
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d005      	beq.n	80093ec <HAL_GPIO_Init+0x44>
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	685b      	ldr	r3, [r3, #4]
 80093e4:	f003 0303 	and.w	r3, r3, #3
 80093e8:	2b02      	cmp	r3, #2
 80093ea:	d130      	bne.n	800944e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	689b      	ldr	r3, [r3, #8]
 80093f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80093f2:	69fb      	ldr	r3, [r7, #28]
 80093f4:	005b      	lsls	r3, r3, #1
 80093f6:	2203      	movs	r2, #3
 80093f8:	fa02 f303 	lsl.w	r3, r2, r3
 80093fc:	43db      	mvns	r3, r3
 80093fe:	69ba      	ldr	r2, [r7, #24]
 8009400:	4013      	ands	r3, r2
 8009402:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	68da      	ldr	r2, [r3, #12]
 8009408:	69fb      	ldr	r3, [r7, #28]
 800940a:	005b      	lsls	r3, r3, #1
 800940c:	fa02 f303 	lsl.w	r3, r2, r3
 8009410:	69ba      	ldr	r2, [r7, #24]
 8009412:	4313      	orrs	r3, r2
 8009414:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	69ba      	ldr	r2, [r7, #24]
 800941a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009422:	2201      	movs	r2, #1
 8009424:	69fb      	ldr	r3, [r7, #28]
 8009426:	fa02 f303 	lsl.w	r3, r2, r3
 800942a:	43db      	mvns	r3, r3
 800942c:	69ba      	ldr	r2, [r7, #24]
 800942e:	4013      	ands	r3, r2
 8009430:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	091b      	lsrs	r3, r3, #4
 8009438:	f003 0201 	and.w	r2, r3, #1
 800943c:	69fb      	ldr	r3, [r7, #28]
 800943e:	fa02 f303 	lsl.w	r3, r2, r3
 8009442:	69ba      	ldr	r2, [r7, #24]
 8009444:	4313      	orrs	r3, r2
 8009446:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	69ba      	ldr	r2, [r7, #24]
 800944c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	f003 0303 	and.w	r3, r3, #3
 8009456:	2b03      	cmp	r3, #3
 8009458:	d017      	beq.n	800948a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	68db      	ldr	r3, [r3, #12]
 800945e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009460:	69fb      	ldr	r3, [r7, #28]
 8009462:	005b      	lsls	r3, r3, #1
 8009464:	2203      	movs	r2, #3
 8009466:	fa02 f303 	lsl.w	r3, r2, r3
 800946a:	43db      	mvns	r3, r3
 800946c:	69ba      	ldr	r2, [r7, #24]
 800946e:	4013      	ands	r3, r2
 8009470:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	689a      	ldr	r2, [r3, #8]
 8009476:	69fb      	ldr	r3, [r7, #28]
 8009478:	005b      	lsls	r3, r3, #1
 800947a:	fa02 f303 	lsl.w	r3, r2, r3
 800947e:	69ba      	ldr	r2, [r7, #24]
 8009480:	4313      	orrs	r3, r2
 8009482:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	69ba      	ldr	r2, [r7, #24]
 8009488:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	f003 0303 	and.w	r3, r3, #3
 8009492:	2b02      	cmp	r3, #2
 8009494:	d123      	bne.n	80094de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009496:	69fb      	ldr	r3, [r7, #28]
 8009498:	08da      	lsrs	r2, r3, #3
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	3208      	adds	r2, #8
 800949e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80094a4:	69fb      	ldr	r3, [r7, #28]
 80094a6:	f003 0307 	and.w	r3, r3, #7
 80094aa:	009b      	lsls	r3, r3, #2
 80094ac:	220f      	movs	r2, #15
 80094ae:	fa02 f303 	lsl.w	r3, r2, r3
 80094b2:	43db      	mvns	r3, r3
 80094b4:	69ba      	ldr	r2, [r7, #24]
 80094b6:	4013      	ands	r3, r2
 80094b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	691a      	ldr	r2, [r3, #16]
 80094be:	69fb      	ldr	r3, [r7, #28]
 80094c0:	f003 0307 	and.w	r3, r3, #7
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	fa02 f303 	lsl.w	r3, r2, r3
 80094ca:	69ba      	ldr	r2, [r7, #24]
 80094cc:	4313      	orrs	r3, r2
 80094ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80094d0:	69fb      	ldr	r3, [r7, #28]
 80094d2:	08da      	lsrs	r2, r3, #3
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	3208      	adds	r2, #8
 80094d8:	69b9      	ldr	r1, [r7, #24]
 80094da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80094e4:	69fb      	ldr	r3, [r7, #28]
 80094e6:	005b      	lsls	r3, r3, #1
 80094e8:	2203      	movs	r2, #3
 80094ea:	fa02 f303 	lsl.w	r3, r2, r3
 80094ee:	43db      	mvns	r3, r3
 80094f0:	69ba      	ldr	r2, [r7, #24]
 80094f2:	4013      	ands	r3, r2
 80094f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	f003 0203 	and.w	r2, r3, #3
 80094fe:	69fb      	ldr	r3, [r7, #28]
 8009500:	005b      	lsls	r3, r3, #1
 8009502:	fa02 f303 	lsl.w	r3, r2, r3
 8009506:	69ba      	ldr	r2, [r7, #24]
 8009508:	4313      	orrs	r3, r2
 800950a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	69ba      	ldr	r2, [r7, #24]
 8009510:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800951a:	2b00      	cmp	r3, #0
 800951c:	f000 80e0 	beq.w	80096e0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009520:	4b2f      	ldr	r3, [pc, #188]	; (80095e0 <HAL_GPIO_Init+0x238>)
 8009522:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8009526:	4a2e      	ldr	r2, [pc, #184]	; (80095e0 <HAL_GPIO_Init+0x238>)
 8009528:	f043 0302 	orr.w	r3, r3, #2
 800952c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8009530:	4b2b      	ldr	r3, [pc, #172]	; (80095e0 <HAL_GPIO_Init+0x238>)
 8009532:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8009536:	f003 0302 	and.w	r3, r3, #2
 800953a:	60fb      	str	r3, [r7, #12]
 800953c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800953e:	4a29      	ldr	r2, [pc, #164]	; (80095e4 <HAL_GPIO_Init+0x23c>)
 8009540:	69fb      	ldr	r3, [r7, #28]
 8009542:	089b      	lsrs	r3, r3, #2
 8009544:	3302      	adds	r3, #2
 8009546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800954a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800954c:	69fb      	ldr	r3, [r7, #28]
 800954e:	f003 0303 	and.w	r3, r3, #3
 8009552:	009b      	lsls	r3, r3, #2
 8009554:	220f      	movs	r2, #15
 8009556:	fa02 f303 	lsl.w	r3, r2, r3
 800955a:	43db      	mvns	r3, r3
 800955c:	69ba      	ldr	r2, [r7, #24]
 800955e:	4013      	ands	r3, r2
 8009560:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	4a20      	ldr	r2, [pc, #128]	; (80095e8 <HAL_GPIO_Init+0x240>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d052      	beq.n	8009610 <HAL_GPIO_Init+0x268>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	4a1f      	ldr	r2, [pc, #124]	; (80095ec <HAL_GPIO_Init+0x244>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d031      	beq.n	80095d6 <HAL_GPIO_Init+0x22e>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	4a1e      	ldr	r2, [pc, #120]	; (80095f0 <HAL_GPIO_Init+0x248>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d02b      	beq.n	80095d2 <HAL_GPIO_Init+0x22a>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	4a1d      	ldr	r2, [pc, #116]	; (80095f4 <HAL_GPIO_Init+0x24c>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d025      	beq.n	80095ce <HAL_GPIO_Init+0x226>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	4a1c      	ldr	r2, [pc, #112]	; (80095f8 <HAL_GPIO_Init+0x250>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d01f      	beq.n	80095ca <HAL_GPIO_Init+0x222>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	4a1b      	ldr	r2, [pc, #108]	; (80095fc <HAL_GPIO_Init+0x254>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d019      	beq.n	80095c6 <HAL_GPIO_Init+0x21e>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	4a1a      	ldr	r2, [pc, #104]	; (8009600 <HAL_GPIO_Init+0x258>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d013      	beq.n	80095c2 <HAL_GPIO_Init+0x21a>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	4a19      	ldr	r2, [pc, #100]	; (8009604 <HAL_GPIO_Init+0x25c>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d00d      	beq.n	80095be <HAL_GPIO_Init+0x216>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	4a18      	ldr	r2, [pc, #96]	; (8009608 <HAL_GPIO_Init+0x260>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d007      	beq.n	80095ba <HAL_GPIO_Init+0x212>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	4a17      	ldr	r2, [pc, #92]	; (800960c <HAL_GPIO_Init+0x264>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d101      	bne.n	80095b6 <HAL_GPIO_Init+0x20e>
 80095b2:	2309      	movs	r3, #9
 80095b4:	e02d      	b.n	8009612 <HAL_GPIO_Init+0x26a>
 80095b6:	230a      	movs	r3, #10
 80095b8:	e02b      	b.n	8009612 <HAL_GPIO_Init+0x26a>
 80095ba:	2308      	movs	r3, #8
 80095bc:	e029      	b.n	8009612 <HAL_GPIO_Init+0x26a>
 80095be:	2307      	movs	r3, #7
 80095c0:	e027      	b.n	8009612 <HAL_GPIO_Init+0x26a>
 80095c2:	2306      	movs	r3, #6
 80095c4:	e025      	b.n	8009612 <HAL_GPIO_Init+0x26a>
 80095c6:	2305      	movs	r3, #5
 80095c8:	e023      	b.n	8009612 <HAL_GPIO_Init+0x26a>
 80095ca:	2304      	movs	r3, #4
 80095cc:	e021      	b.n	8009612 <HAL_GPIO_Init+0x26a>
 80095ce:	2303      	movs	r3, #3
 80095d0:	e01f      	b.n	8009612 <HAL_GPIO_Init+0x26a>
 80095d2:	2302      	movs	r3, #2
 80095d4:	e01d      	b.n	8009612 <HAL_GPIO_Init+0x26a>
 80095d6:	2301      	movs	r3, #1
 80095d8:	e01b      	b.n	8009612 <HAL_GPIO_Init+0x26a>
 80095da:	bf00      	nop
 80095dc:	58000080 	.word	0x58000080
 80095e0:	58024400 	.word	0x58024400
 80095e4:	58000400 	.word	0x58000400
 80095e8:	58020000 	.word	0x58020000
 80095ec:	58020400 	.word	0x58020400
 80095f0:	58020800 	.word	0x58020800
 80095f4:	58020c00 	.word	0x58020c00
 80095f8:	58021000 	.word	0x58021000
 80095fc:	58021400 	.word	0x58021400
 8009600:	58021800 	.word	0x58021800
 8009604:	58021c00 	.word	0x58021c00
 8009608:	58022000 	.word	0x58022000
 800960c:	58022400 	.word	0x58022400
 8009610:	2300      	movs	r3, #0
 8009612:	69fa      	ldr	r2, [r7, #28]
 8009614:	f002 0203 	and.w	r2, r2, #3
 8009618:	0092      	lsls	r2, r2, #2
 800961a:	4093      	lsls	r3, r2
 800961c:	69ba      	ldr	r2, [r7, #24]
 800961e:	4313      	orrs	r3, r2
 8009620:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009622:	4938      	ldr	r1, [pc, #224]	; (8009704 <HAL_GPIO_Init+0x35c>)
 8009624:	69fb      	ldr	r3, [r7, #28]
 8009626:	089b      	lsrs	r3, r3, #2
 8009628:	3302      	adds	r3, #2
 800962a:	69ba      	ldr	r2, [r7, #24]
 800962c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009630:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	43db      	mvns	r3, r3
 800963c:	69ba      	ldr	r2, [r7, #24]
 800963e:	4013      	ands	r3, r2
 8009640:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800964a:	2b00      	cmp	r3, #0
 800964c:	d003      	beq.n	8009656 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800964e:	69ba      	ldr	r2, [r7, #24]
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	4313      	orrs	r3, r2
 8009654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8009656:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800965a:	69bb      	ldr	r3, [r7, #24]
 800965c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800965e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	43db      	mvns	r3, r3
 800966a:	69ba      	ldr	r2, [r7, #24]
 800966c:	4013      	ands	r3, r2
 800966e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	685b      	ldr	r3, [r3, #4]
 8009674:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009678:	2b00      	cmp	r3, #0
 800967a:	d003      	beq.n	8009684 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800967c:	69ba      	ldr	r2, [r7, #24]
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	4313      	orrs	r3, r2
 8009682:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009684:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009688:	69bb      	ldr	r3, [r7, #24]
 800968a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	43db      	mvns	r3, r3
 8009696:	69ba      	ldr	r2, [r7, #24]
 8009698:	4013      	ands	r3, r2
 800969a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d003      	beq.n	80096b0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80096a8:	69ba      	ldr	r2, [r7, #24]
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	4313      	orrs	r3, r2
 80096ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	69ba      	ldr	r2, [r7, #24]
 80096b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	43db      	mvns	r3, r3
 80096c0:	69ba      	ldr	r2, [r7, #24]
 80096c2:	4013      	ands	r3, r2
 80096c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d003      	beq.n	80096da <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80096d2:	69ba      	ldr	r2, [r7, #24]
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	4313      	orrs	r3, r2
 80096d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	69ba      	ldr	r2, [r7, #24]
 80096de:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80096e0:	69fb      	ldr	r3, [r7, #28]
 80096e2:	3301      	adds	r3, #1
 80096e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	681a      	ldr	r2, [r3, #0]
 80096ea:	69fb      	ldr	r3, [r7, #28]
 80096ec:	fa22 f303 	lsr.w	r3, r2, r3
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	f47f ae63 	bne.w	80093bc <HAL_GPIO_Init+0x14>
  }
}
 80096f6:	bf00      	nop
 80096f8:	bf00      	nop
 80096fa:	3724      	adds	r7, #36	; 0x24
 80096fc:	46bd      	mov	sp, r7
 80096fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009702:	4770      	bx	lr
 8009704:	58000400 	.word	0x58000400

08009708 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009708:	b480      	push	{r7}
 800970a:	b085      	sub	sp, #20
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	460b      	mov	r3, r1
 8009712:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	691a      	ldr	r2, [r3, #16]
 8009718:	887b      	ldrh	r3, [r7, #2]
 800971a:	4013      	ands	r3, r2
 800971c:	2b00      	cmp	r3, #0
 800971e:	d002      	beq.n	8009726 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009720:	2301      	movs	r3, #1
 8009722:	73fb      	strb	r3, [r7, #15]
 8009724:	e001      	b.n	800972a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009726:	2300      	movs	r3, #0
 8009728:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800972a:	7bfb      	ldrb	r3, [r7, #15]
}
 800972c:	4618      	mov	r0, r3
 800972e:	3714      	adds	r7, #20
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr

08009738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009738:	b480      	push	{r7}
 800973a:	b083      	sub	sp, #12
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	460b      	mov	r3, r1
 8009742:	807b      	strh	r3, [r7, #2]
 8009744:	4613      	mov	r3, r2
 8009746:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009748:	787b      	ldrb	r3, [r7, #1]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d003      	beq.n	8009756 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800974e:	887a      	ldrh	r2, [r7, #2]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009754:	e003      	b.n	800975e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009756:	887b      	ldrh	r3, [r7, #2]
 8009758:	041a      	lsls	r2, r3, #16
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	619a      	str	r2, [r3, #24]
}
 800975e:	bf00      	nop
 8009760:	370c      	adds	r7, #12
 8009762:	46bd      	mov	sp, r7
 8009764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009768:	4770      	bx	lr

0800976a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800976a:	b580      	push	{r7, lr}
 800976c:	b082      	sub	sp, #8
 800976e:	af00      	add	r7, sp, #0
 8009770:	4603      	mov	r3, r0
 8009772:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8009774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009778:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800977c:	88fb      	ldrh	r3, [r7, #6]
 800977e:	4013      	ands	r3, r2
 8009780:	2b00      	cmp	r3, #0
 8009782:	d008      	beq.n	8009796 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009784:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009788:	88fb      	ldrh	r3, [r7, #6]
 800978a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800978e:	88fb      	ldrh	r3, [r7, #6]
 8009790:	4618      	mov	r0, r3
 8009792:	f000 f804 	bl	800979e <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8009796:	bf00      	nop
 8009798:	3708      	adds	r7, #8
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}

0800979e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800979e:	b480      	push	{r7}
 80097a0:	b083      	sub	sp, #12
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	4603      	mov	r3, r0
 80097a6:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80097a8:	bf00      	nop
 80097aa:	370c      	adds	r7, #12
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr

080097b4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d101      	bne.n	80097c6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80097c2:	2301      	movs	r3, #1
 80097c4:	e0bf      	b.n	8009946 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d106      	bne.n	80097e0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2200      	movs	r2, #0
 80097d6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f7f9 fdf8 	bl	80033d0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2202      	movs	r2, #2
 80097e4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	699a      	ldr	r2, [r3, #24]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80097f6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	6999      	ldr	r1, [r3, #24]
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	685a      	ldr	r2, [r3, #4]
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	689b      	ldr	r3, [r3, #8]
 8009806:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800980c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	691b      	ldr	r3, [r3, #16]
 8009812:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	430a      	orrs	r2, r1
 800981a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	6899      	ldr	r1, [r3, #8]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681a      	ldr	r2, [r3, #0]
 8009826:	4b4a      	ldr	r3, [pc, #296]	; (8009950 <HAL_LTDC_Init+0x19c>)
 8009828:	400b      	ands	r3, r1
 800982a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	695b      	ldr	r3, [r3, #20]
 8009830:	041b      	lsls	r3, r3, #16
 8009832:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	6899      	ldr	r1, [r3, #8]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	699a      	ldr	r2, [r3, #24]
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	431a      	orrs	r2, r3
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	430a      	orrs	r2, r1
 8009848:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	68d9      	ldr	r1, [r3, #12]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681a      	ldr	r2, [r3, #0]
 8009854:	4b3e      	ldr	r3, [pc, #248]	; (8009950 <HAL_LTDC_Init+0x19c>)
 8009856:	400b      	ands	r3, r1
 8009858:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	69db      	ldr	r3, [r3, #28]
 800985e:	041b      	lsls	r3, r3, #16
 8009860:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	68d9      	ldr	r1, [r3, #12]
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6a1a      	ldr	r2, [r3, #32]
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	431a      	orrs	r2, r3
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	430a      	orrs	r2, r1
 8009876:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	6919      	ldr	r1, [r3, #16]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	4b33      	ldr	r3, [pc, #204]	; (8009950 <HAL_LTDC_Init+0x19c>)
 8009884:	400b      	ands	r3, r1
 8009886:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800988c:	041b      	lsls	r3, r3, #16
 800988e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	6919      	ldr	r1, [r3, #16]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	431a      	orrs	r2, r3
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	430a      	orrs	r2, r1
 80098a4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	6959      	ldr	r1, [r3, #20]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681a      	ldr	r2, [r3, #0]
 80098b0:	4b27      	ldr	r3, [pc, #156]	; (8009950 <HAL_LTDC_Init+0x19c>)
 80098b2:	400b      	ands	r3, r1
 80098b4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ba:	041b      	lsls	r3, r3, #16
 80098bc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	6959      	ldr	r1, [r3, #20]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	431a      	orrs	r2, r3
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	430a      	orrs	r2, r1
 80098d2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80098da:	021b      	lsls	r3, r3, #8
 80098dc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80098e4:	041b      	lsls	r3, r3, #16
 80098e6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80098f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80098fe:	68ba      	ldr	r2, [r7, #8]
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	4313      	orrs	r3, r2
 8009904:	687a      	ldr	r2, [r7, #4]
 8009906:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800990a:	431a      	orrs	r2, r3
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	430a      	orrs	r2, r1
 8009912:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f042 0206 	orr.w	r2, r2, #6
 8009922:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	699a      	ldr	r2, [r3, #24]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f042 0201 	orr.w	r2, r2, #1
 8009932:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2200      	movs	r2, #0
 8009938:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2201      	movs	r2, #1
 8009940:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8009944:	2300      	movs	r3, #0
}
 8009946:	4618      	mov	r0, r3
 8009948:	3710      	adds	r7, #16
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}
 800994e:	bf00      	nop
 8009950:	f000f800 	.word	0xf000f800

08009954 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b084      	sub	sp, #16
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009962:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800996a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	f003 0304 	and.w	r3, r3, #4
 8009972:	2b00      	cmp	r3, #0
 8009974:	d023      	beq.n	80099be <HAL_LTDC_IRQHandler+0x6a>
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	f003 0304 	and.w	r3, r3, #4
 800997c:	2b00      	cmp	r3, #0
 800997e:	d01e      	beq.n	80099be <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f022 0204 	bic.w	r2, r2, #4
 800998e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	2204      	movs	r2, #4
 8009996:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800999e:	f043 0201 	orr.w	r2, r3, #1
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2204      	movs	r2, #4
 80099ac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2200      	movs	r2, #0
 80099b4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 f86f 	bl	8009a9c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	f003 0302 	and.w	r3, r3, #2
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d023      	beq.n	8009a10 <HAL_LTDC_IRQHandler+0xbc>
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	f003 0302 	and.w	r3, r3, #2
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d01e      	beq.n	8009a10 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f022 0202 	bic.w	r2, r2, #2
 80099e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	2202      	movs	r2, #2
 80099e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80099f0:	f043 0202 	orr.w	r2, r3, #2
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2204      	movs	r2, #4
 80099fe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2200      	movs	r2, #0
 8009a06:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f000 f846 	bl	8009a9c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	f003 0301 	and.w	r3, r3, #1
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d01b      	beq.n	8009a52 <HAL_LTDC_IRQHandler+0xfe>
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	f003 0301 	and.w	r3, r3, #1
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d016      	beq.n	8009a52 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f022 0201 	bic.w	r2, r2, #1
 8009a32:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	2201      	movs	r2, #1
 8009a3a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2201      	movs	r2, #1
 8009a40:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2200      	movs	r2, #0
 8009a48:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f000 f82f 	bl	8009ab0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	f003 0308 	and.w	r3, r3, #8
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d01b      	beq.n	8009a94 <HAL_LTDC_IRQHandler+0x140>
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	f003 0308 	and.w	r3, r3, #8
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d016      	beq.n	8009a94 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f022 0208 	bic.w	r2, r2, #8
 8009a74:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	2208      	movs	r2, #8
 8009a7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2201      	movs	r2, #1
 8009a82:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f7f7 fec8 	bl	8001824 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8009a94:	bf00      	nop
 8009a96:	3710      	adds	r7, #16
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b083      	sub	sp, #12
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8009aa4:	bf00      	nop
 8009aa6:	370c      	adds	r7, #12
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr

08009ab0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b083      	sub	sp, #12
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8009ab8:	bf00      	nop
 8009aba:	370c      	adds	r7, #12
 8009abc:	46bd      	mov	sp, r7
 8009abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac2:	4770      	bx	lr

08009ac4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009ac4:	b5b0      	push	{r4, r5, r7, lr}
 8009ac6:	b084      	sub	sp, #16
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	60f8      	str	r0, [r7, #12]
 8009acc:	60b9      	str	r1, [r7, #8]
 8009ace:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d101      	bne.n	8009ade <HAL_LTDC_ConfigLayer+0x1a>
 8009ada:	2302      	movs	r3, #2
 8009adc:	e02c      	b.n	8009b38 <HAL_LTDC_ConfigLayer+0x74>
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2202      	movs	r2, #2
 8009aea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009aee:	68fa      	ldr	r2, [r7, #12]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2134      	movs	r1, #52	; 0x34
 8009af4:	fb01 f303 	mul.w	r3, r1, r3
 8009af8:	4413      	add	r3, r2
 8009afa:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	4614      	mov	r4, r2
 8009b02:	461d      	mov	r5, r3
 8009b04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009b06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009b08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009b0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009b0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009b0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009b10:	682b      	ldr	r3, [r5, #0]
 8009b12:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009b14:	687a      	ldr	r2, [r7, #4]
 8009b16:	68b9      	ldr	r1, [r7, #8]
 8009b18:	68f8      	ldr	r0, [r7, #12]
 8009b1a:	f000 f877 	bl	8009c0c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	2201      	movs	r2, #1
 8009b24:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2201      	movs	r2, #1
 8009b2a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	2200      	movs	r2, #0
 8009b32:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8009b36:	2300      	movs	r3, #0
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3710      	adds	r7, #16
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bdb0      	pop	{r4, r5, r7, pc}

08009b40 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b086      	sub	sp, #24
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	60f8      	str	r0, [r7, #12]
 8009b48:	60b9      	str	r1, [r7, #8]
 8009b4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d101      	bne.n	8009b5a <HAL_LTDC_SetAddress+0x1a>
 8009b56:	2302      	movs	r3, #2
 8009b58:	e024      	b.n	8009ba4 <HAL_LTDC_SetAddress+0x64>
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2202      	movs	r2, #2
 8009b66:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2234      	movs	r2, #52	; 0x34
 8009b6e:	fb02 f303 	mul.w	r3, r2, r3
 8009b72:	3338      	adds	r3, #56	; 0x38
 8009b74:	68fa      	ldr	r2, [r7, #12]
 8009b76:	4413      	add	r3, r2
 8009b78:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	68ba      	ldr	r2, [r7, #8]
 8009b7e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009b80:	687a      	ldr	r2, [r7, #4]
 8009b82:	6979      	ldr	r1, [r7, #20]
 8009b84:	68f8      	ldr	r0, [r7, #12]
 8009b86:	f000 f841 	bl	8009c0c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	2201      	movs	r2, #1
 8009b90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	2201      	movs	r2, #1
 8009b96:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8009ba2:	2300      	movs	r3, #0
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3718      	adds	r7, #24
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <HAL_LTDC_Reload>:
  *                      LTDC_RELOAD_VERTICAL_BLANKING  : Reload in the next Vertical Blanking
  * @note   User application may resort to HAL_LTDC_ReloadEventCallback() at reload interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef  HAL_LTDC_Reload(LTDC_HandleTypeDef *hltdc, uint32_t ReloadType)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b083      	sub	sp, #12
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_RELOAD(ReloadType));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d101      	bne.n	8009bc4 <HAL_LTDC_Reload+0x18>
 8009bc0:	2302      	movs	r3, #2
 8009bc2:	e01c      	b.n	8009bfe <HAL_LTDC_Reload+0x52>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2202      	movs	r2, #2
 8009bd0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable the Reload interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f042 0208 	orr.w	r2, r2, #8
 8009be2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Apply Reload type */
  hltdc->Instance->SRCR = ReloadType;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	683a      	ldr	r2, [r7, #0]
 8009bea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2201      	movs	r2, #1
 8009bf0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8009bfc:	2300      	movs	r3, #0
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	370c      	adds	r7, #12
 8009c02:	46bd      	mov	sp, r7
 8009c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c08:	4770      	bx	lr
	...

08009c0c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b089      	sub	sp, #36	; 0x24
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	60f8      	str	r0, [r7, #12]
 8009c14:	60b9      	str	r1, [r7, #8]
 8009c16:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	685a      	ldr	r2, [r3, #4]
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	68db      	ldr	r3, [r3, #12]
 8009c22:	0c1b      	lsrs	r3, r3, #16
 8009c24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009c28:	4413      	add	r3, r2
 8009c2a:	041b      	lsls	r3, r3, #16
 8009c2c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	461a      	mov	r2, r3
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	01db      	lsls	r3, r3, #7
 8009c38:	4413      	add	r3, r2
 8009c3a:	3384      	adds	r3, #132	; 0x84
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	68fa      	ldr	r2, [r7, #12]
 8009c40:	6812      	ldr	r2, [r2, #0]
 8009c42:	4611      	mov	r1, r2
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	01d2      	lsls	r2, r2, #7
 8009c48:	440a      	add	r2, r1
 8009c4a:	3284      	adds	r2, #132	; 0x84
 8009c4c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8009c50:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	68db      	ldr	r3, [r3, #12]
 8009c5c:	0c1b      	lsrs	r3, r3, #16
 8009c5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009c62:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009c64:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4619      	mov	r1, r3
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	01db      	lsls	r3, r3, #7
 8009c70:	440b      	add	r3, r1
 8009c72:	3384      	adds	r3, #132	; 0x84
 8009c74:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009c76:	69fb      	ldr	r3, [r7, #28]
 8009c78:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009c7a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	68da      	ldr	r2, [r3, #12]
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	68db      	ldr	r3, [r3, #12]
 8009c86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009c8a:	4413      	add	r3, r2
 8009c8c:	041b      	lsls	r3, r3, #16
 8009c8e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	461a      	mov	r2, r3
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	01db      	lsls	r3, r3, #7
 8009c9a:	4413      	add	r3, r2
 8009c9c:	3384      	adds	r3, #132	; 0x84
 8009c9e:	689b      	ldr	r3, [r3, #8]
 8009ca0:	68fa      	ldr	r2, [r7, #12]
 8009ca2:	6812      	ldr	r2, [r2, #0]
 8009ca4:	4611      	mov	r1, r2
 8009ca6:	687a      	ldr	r2, [r7, #4]
 8009ca8:	01d2      	lsls	r2, r2, #7
 8009caa:	440a      	add	r2, r1
 8009cac:	3284      	adds	r2, #132	; 0x84
 8009cae:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8009cb2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	689a      	ldr	r2, [r3, #8]
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	68db      	ldr	r3, [r3, #12]
 8009cbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009cc2:	4413      	add	r3, r2
 8009cc4:	1c5a      	adds	r2, r3, #1
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	4619      	mov	r1, r3
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	01db      	lsls	r3, r3, #7
 8009cd0:	440b      	add	r3, r1
 8009cd2:	3384      	adds	r3, #132	; 0x84
 8009cd4:	4619      	mov	r1, r3
 8009cd6:	69fb      	ldr	r3, [r7, #28]
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	01db      	lsls	r3, r3, #7
 8009ce6:	4413      	add	r3, r2
 8009ce8:	3384      	adds	r3, #132	; 0x84
 8009cea:	691b      	ldr	r3, [r3, #16]
 8009cec:	68fa      	ldr	r2, [r7, #12]
 8009cee:	6812      	ldr	r2, [r2, #0]
 8009cf0:	4611      	mov	r1, r2
 8009cf2:	687a      	ldr	r2, [r7, #4]
 8009cf4:	01d2      	lsls	r2, r2, #7
 8009cf6:	440a      	add	r2, r1
 8009cf8:	3284      	adds	r2, #132	; 0x84
 8009cfa:	f023 0307 	bic.w	r3, r3, #7
 8009cfe:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	461a      	mov	r2, r3
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	01db      	lsls	r3, r3, #7
 8009d0a:	4413      	add	r3, r2
 8009d0c:	3384      	adds	r3, #132	; 0x84
 8009d0e:	461a      	mov	r2, r3
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	691b      	ldr	r3, [r3, #16]
 8009d14:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009d1c:	021b      	lsls	r3, r3, #8
 8009d1e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009d26:	041b      	lsls	r3, r3, #16
 8009d28:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	699b      	ldr	r3, [r3, #24]
 8009d2e:	061b      	lsls	r3, r3, #24
 8009d30:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	461a      	mov	r2, r3
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	01db      	lsls	r3, r3, #7
 8009d3c:	4413      	add	r3, r2
 8009d3e:	3384      	adds	r3, #132	; 0x84
 8009d40:	699b      	ldr	r3, [r3, #24]
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	461a      	mov	r2, r3
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	01db      	lsls	r3, r3, #7
 8009d4c:	4413      	add	r3, r2
 8009d4e:	3384      	adds	r3, #132	; 0x84
 8009d50:	461a      	mov	r2, r3
 8009d52:	2300      	movs	r3, #0
 8009d54:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009d5c:	461a      	mov	r2, r3
 8009d5e:	69fb      	ldr	r3, [r7, #28]
 8009d60:	431a      	orrs	r2, r3
 8009d62:	69bb      	ldr	r3, [r7, #24]
 8009d64:	431a      	orrs	r2, r3
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4619      	mov	r1, r3
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	01db      	lsls	r3, r3, #7
 8009d70:	440b      	add	r3, r1
 8009d72:	3384      	adds	r3, #132	; 0x84
 8009d74:	4619      	mov	r1, r3
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	461a      	mov	r2, r3
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	01db      	lsls	r3, r3, #7
 8009d86:	4413      	add	r3, r2
 8009d88:	3384      	adds	r3, #132	; 0x84
 8009d8a:	695b      	ldr	r3, [r3, #20]
 8009d8c:	68fa      	ldr	r2, [r7, #12]
 8009d8e:	6812      	ldr	r2, [r2, #0]
 8009d90:	4611      	mov	r1, r2
 8009d92:	687a      	ldr	r2, [r7, #4]
 8009d94:	01d2      	lsls	r2, r2, #7
 8009d96:	440a      	add	r2, r1
 8009d98:	3284      	adds	r2, #132	; 0x84
 8009d9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009d9e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	461a      	mov	r2, r3
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	01db      	lsls	r3, r3, #7
 8009daa:	4413      	add	r3, r2
 8009dac:	3384      	adds	r3, #132	; 0x84
 8009dae:	461a      	mov	r2, r3
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	695b      	ldr	r3, [r3, #20]
 8009db4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	461a      	mov	r2, r3
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	01db      	lsls	r3, r3, #7
 8009dc0:	4413      	add	r3, r2
 8009dc2:	3384      	adds	r3, #132	; 0x84
 8009dc4:	69da      	ldr	r2, [r3, #28]
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4619      	mov	r1, r3
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	01db      	lsls	r3, r3, #7
 8009dd0:	440b      	add	r3, r1
 8009dd2:	3384      	adds	r3, #132	; 0x84
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	4b58      	ldr	r3, [pc, #352]	; (8009f38 <LTDC_SetConfig+0x32c>)
 8009dd8:	4013      	ands	r3, r2
 8009dda:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	69da      	ldr	r2, [r3, #28]
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	6a1b      	ldr	r3, [r3, #32]
 8009de4:	68f9      	ldr	r1, [r7, #12]
 8009de6:	6809      	ldr	r1, [r1, #0]
 8009de8:	4608      	mov	r0, r1
 8009dea:	6879      	ldr	r1, [r7, #4]
 8009dec:	01c9      	lsls	r1, r1, #7
 8009dee:	4401      	add	r1, r0
 8009df0:	3184      	adds	r1, #132	; 0x84
 8009df2:	4313      	orrs	r3, r2
 8009df4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	461a      	mov	r2, r3
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	01db      	lsls	r3, r3, #7
 8009e00:	4413      	add	r3, r2
 8009e02:	3384      	adds	r3, #132	; 0x84
 8009e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	01db      	lsls	r3, r3, #7
 8009e10:	4413      	add	r3, r2
 8009e12:	3384      	adds	r3, #132	; 0x84
 8009e14:	461a      	mov	r2, r3
 8009e16:	2300      	movs	r3, #0
 8009e18:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	461a      	mov	r2, r3
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	01db      	lsls	r3, r3, #7
 8009e24:	4413      	add	r3, r2
 8009e26:	3384      	adds	r3, #132	; 0x84
 8009e28:	461a      	mov	r2, r3
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e2e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	691b      	ldr	r3, [r3, #16]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d102      	bne.n	8009e3e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8009e38:	2304      	movs	r3, #4
 8009e3a:	61fb      	str	r3, [r7, #28]
 8009e3c:	e01b      	b.n	8009e76 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	691b      	ldr	r3, [r3, #16]
 8009e42:	2b01      	cmp	r3, #1
 8009e44:	d102      	bne.n	8009e4c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8009e46:	2303      	movs	r3, #3
 8009e48:	61fb      	str	r3, [r7, #28]
 8009e4a:	e014      	b.n	8009e76 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	691b      	ldr	r3, [r3, #16]
 8009e50:	2b04      	cmp	r3, #4
 8009e52:	d00b      	beq.n	8009e6c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009e58:	2b02      	cmp	r3, #2
 8009e5a:	d007      	beq.n	8009e6c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009e60:	2b03      	cmp	r3, #3
 8009e62:	d003      	beq.n	8009e6c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009e68:	2b07      	cmp	r3, #7
 8009e6a:	d102      	bne.n	8009e72 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8009e6c:	2302      	movs	r3, #2
 8009e6e:	61fb      	str	r3, [r7, #28]
 8009e70:	e001      	b.n	8009e76 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8009e72:	2301      	movs	r3, #1
 8009e74:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	01db      	lsls	r3, r3, #7
 8009e80:	4413      	add	r3, r2
 8009e82:	3384      	adds	r3, #132	; 0x84
 8009e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e86:	68fa      	ldr	r2, [r7, #12]
 8009e88:	6812      	ldr	r2, [r2, #0]
 8009e8a:	4611      	mov	r1, r2
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	01d2      	lsls	r2, r2, #7
 8009e90:	440a      	add	r2, r1
 8009e92:	3284      	adds	r2, #132	; 0x84
 8009e94:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8009e98:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e9e:	69fa      	ldr	r2, [r7, #28]
 8009ea0:	fb02 f303 	mul.w	r3, r2, r3
 8009ea4:	041a      	lsls	r2, r3, #16
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	6859      	ldr	r1, [r3, #4]
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	1acb      	subs	r3, r1, r3
 8009eb0:	69f9      	ldr	r1, [r7, #28]
 8009eb2:	fb01 f303 	mul.w	r3, r1, r3
 8009eb6:	3307      	adds	r3, #7
 8009eb8:	68f9      	ldr	r1, [r7, #12]
 8009eba:	6809      	ldr	r1, [r1, #0]
 8009ebc:	4608      	mov	r0, r1
 8009ebe:	6879      	ldr	r1, [r7, #4]
 8009ec0:	01c9      	lsls	r1, r1, #7
 8009ec2:	4401      	add	r1, r0
 8009ec4:	3184      	adds	r1, #132	; 0x84
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	461a      	mov	r2, r3
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	01db      	lsls	r3, r3, #7
 8009ed4:	4413      	add	r3, r2
 8009ed6:	3384      	adds	r3, #132	; 0x84
 8009ed8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	4619      	mov	r1, r3
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	01db      	lsls	r3, r3, #7
 8009ee4:	440b      	add	r3, r1
 8009ee6:	3384      	adds	r3, #132	; 0x84
 8009ee8:	4619      	mov	r1, r3
 8009eea:	4b14      	ldr	r3, [pc, #80]	; (8009f3c <LTDC_SetConfig+0x330>)
 8009eec:	4013      	ands	r3, r2
 8009eee:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	461a      	mov	r2, r3
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	01db      	lsls	r3, r3, #7
 8009efa:	4413      	add	r3, r2
 8009efc:	3384      	adds	r3, #132	; 0x84
 8009efe:	461a      	mov	r2, r3
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f04:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	01db      	lsls	r3, r3, #7
 8009f10:	4413      	add	r3, r2
 8009f12:	3384      	adds	r3, #132	; 0x84
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	68fa      	ldr	r2, [r7, #12]
 8009f18:	6812      	ldr	r2, [r2, #0]
 8009f1a:	4611      	mov	r1, r2
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	01d2      	lsls	r2, r2, #7
 8009f20:	440a      	add	r2, r1
 8009f22:	3284      	adds	r2, #132	; 0x84
 8009f24:	f043 0301 	orr.w	r3, r3, #1
 8009f28:	6013      	str	r3, [r2, #0]
}
 8009f2a:	bf00      	nop
 8009f2c:	3724      	adds	r7, #36	; 0x24
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f34:	4770      	bx	lr
 8009f36:	bf00      	nop
 8009f38:	fffff8f8 	.word	0xfffff8f8
 8009f3c:	fffff800 	.word	0xfffff800

08009f40 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b083      	sub	sp, #12
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d101      	bne.n	8009f52 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	e017      	b.n	8009f82 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f58:	b2db      	uxtb	r3, r3
 8009f5a:	2b02      	cmp	r3, #2
 8009f5c:	d004      	beq.n	8009f68 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2280      	movs	r2, #128	; 0x80
 8009f62:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
 8009f64:	2301      	movs	r3, #1
 8009f66:	e00c      	b.n	8009f82 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2204      	movs	r2, #4
 8009f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	68da      	ldr	r2, [r3, #12]
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f022 0201 	bic.w	r2, r2, #1
 8009f7e:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 8009f80:	2300      	movs	r3, #0
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	370c      	adds	r7, #12
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr
	...

08009f90 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b086      	sub	sp, #24
 8009f94:	af02      	add	r7, sp, #8
 8009f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8009f9c:	f7fa f86e 	bl	800407c <HAL_GetTick>
 8009fa0:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d102      	bne.n	8009fae <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8009fa8:	2301      	movs	r3, #1
 8009faa:	73fb      	strb	r3, [r7, #15]
 8009fac:	e0a5      	b.n	800a0fa <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	f040 809e 	bne.w	800a0fa <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f7f9 fb44 	bl	800364c <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8009fc4:	f241 3188 	movw	r1, #5000	; 0x1388
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f000 fc21 	bl	800a810 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	689a      	ldr	r2, [r3, #8]
 8009fd4:	4b4b      	ldr	r3, [pc, #300]	; (800a104 <HAL_OSPI_Init+0x174>)
 8009fd6:	4013      	ands	r3, r2
 8009fd8:	687a      	ldr	r2, [r7, #4]
 8009fda:	68d1      	ldr	r1, [r2, #12]
 8009fdc:	687a      	ldr	r2, [r7, #4]
 8009fde:	6912      	ldr	r2, [r2, #16]
 8009fe0:	3a01      	subs	r2, #1
 8009fe2:	0412      	lsls	r2, r2, #16
 8009fe4:	4311      	orrs	r1, r2
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	6952      	ldr	r2, [r2, #20]
 8009fea:	3a01      	subs	r2, #1
 8009fec:	0212      	lsls	r2, r2, #8
 8009fee:	4311      	orrs	r1, r2
 8009ff0:	687a      	ldr	r2, [r7, #4]
 8009ff2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009ff4:	4311      	orrs	r1, r2
 8009ff6:	687a      	ldr	r2, [r7, #4]
 8009ff8:	69d2      	ldr	r2, [r2, #28]
 8009ffa:	4311      	orrs	r1, r2
 8009ffc:	687a      	ldr	r2, [r7, #4]
 8009ffe:	6812      	ldr	r2, [r2, #0]
 800a000:	430b      	orrs	r3, r1
 800a002:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	68db      	ldr	r3, [r3, #12]
 800a00a:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6a1a      	ldr	r2, [r3, #32]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	430a      	orrs	r2, r1
 800a018:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a01e:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	430a      	orrs	r2, r1
 800a02a:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	687a      	ldr	r2, [r7, #4]
 800a032:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a034:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	685b      	ldr	r3, [r3, #4]
 800a044:	3b01      	subs	r3, #1
 800a046:	021a      	lsls	r2, r3, #8
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	430a      	orrs	r2, r1
 800a04e:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a054:	9300      	str	r3, [sp, #0]
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	2200      	movs	r2, #0
 800a05a:	2120      	movs	r1, #32
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f001 f90b 	bl	800b278 <OSPI_WaitFlagStateUntilTimeout>
 800a062:	4603      	mov	r3, r0
 800a064:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800a066:	7bfb      	ldrb	r3, [r7, #15]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d146      	bne.n	800a0fa <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	68db      	ldr	r3, [r3, #12]
 800a072:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a07a:	1e5a      	subs	r2, r3, #1
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	430a      	orrs	r2, r1
 800a082:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	689a      	ldr	r2, [r3, #8]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	430a      	orrs	r2, r1
 800a098:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800a0a2:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ae:	431a      	orrs	r2, r3
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	430a      	orrs	r2, r1
 800a0b6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	681a      	ldr	r2, [r3, #0]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f042 0201 	orr.w	r2, r2, #1
 800a0c8:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	699b      	ldr	r3, [r3, #24]
 800a0ce:	2b02      	cmp	r3, #2
 800a0d0:	d107      	bne.n	800a0e2 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	689a      	ldr	r2, [r3, #8]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f042 0202 	orr.w	r2, r2, #2
 800a0e0:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	68db      	ldr	r3, [r3, #12]
 800a0e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a0ea:	d103      	bne.n	800a0f4 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2201      	movs	r2, #1
 800a0f0:	651a      	str	r2, [r3, #80]	; 0x50
 800a0f2:	e002      	b.n	800a0fa <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2202      	movs	r2, #2
 800a0f8:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 800a0fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3710      	adds	r7, #16
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}
 800a104:	f8e0f8f4 	.word	0xf8e0f8f4

0800a108 <HAL_OSPI_IRQHandler>:
  * @brief  Handle OSPI interrupt request.
  * @param  hospi : OSPI handle
  * @retval None
  */
void HAL_OSPI_IRQHandler(OSPI_HandleTypeDef *hospi)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b086      	sub	sp, #24
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	3350      	adds	r3, #80	; 0x50
 800a116:	617b      	str	r3, [r7, #20]
  uint32_t flag           = hospi->Instance->SR;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	6a1b      	ldr	r3, [r3, #32]
 800a11e:	613b      	str	r3, [r7, #16]
  uint32_t itsource       = hospi->Instance->CR;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	60fb      	str	r3, [r7, #12]
  uint32_t currentstate   = hospi->State;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a12c:	60bb      	str	r3, [r7, #8]

  /* OctoSPI fifo threshold interrupt occurred -------------------------------*/
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	f003 0304 	and.w	r3, r3, #4
 800a134:	2b00      	cmp	r3, #0
 800a136:	d03a      	beq.n	800a1ae <HAL_OSPI_IRQHandler+0xa6>
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d035      	beq.n	800a1ae <HAL_OSPI_IRQHandler+0xa6>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	2b18      	cmp	r3, #24
 800a146:	d10f      	bne.n	800a168 <HAL_OSPI_IRQHandler+0x60>
    {
      /* Write a data in the fifo */
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a14c:	781a      	ldrb	r2, [r3, #0]
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a156:	1c5a      	adds	r2, r3, #1
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	641a      	str	r2, [r3, #64]	; 0x40
      hospi->XferCount--;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a160:	1e5a      	subs	r2, r3, #1
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	649a      	str	r2, [r3, #72]	; 0x48
 800a166:	e012      	b.n	800a18e <HAL_OSPI_IRQHandler+0x86>
    }
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	2b28      	cmp	r3, #40	; 0x28
 800a16c:	d10f      	bne.n	800a18e <HAL_OSPI_IRQHandler+0x86>
    {
      /* Read a data from the fifo */
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a172:	697a      	ldr	r2, [r7, #20]
 800a174:	7812      	ldrb	r2, [r2, #0]
 800a176:	b2d2      	uxtb	r2, r2
 800a178:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a17e:	1c5a      	adds	r2, r3, #1
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	641a      	str	r2, [r3, #64]	; 0x40
      hospi->XferCount--;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a188:	1e5a      	subs	r2, r3, #1
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	649a      	str	r2, [r3, #72]	; 0x48
    else
    {
      /* Nothing to do */
    }

    if (hospi->XferCount == 0U)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a192:	2b00      	cmp	r3, #0
 800a194:	d107      	bne.n	800a1a6 <HAL_OSPI_IRQHandler+0x9e>
    {
      /* All data have been received or transmitted for the transfer */
      /* Disable fifo threshold interrupt */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	681a      	ldr	r2, [r3, #0]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a1a4:	601a      	str	r2, [r3, #0]

    /* Fifo threshold callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->FifoThresholdCallback(hospi);
#else
    HAL_OSPI_FifoThresholdCallback(hospi);
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f000 faf6 	bl	800a798 <HAL_OSPI_FifoThresholdCallback>
 800a1ac:	e0e7      	b.n	800a37e <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
  /* OctoSPI transfer complete interrupt occurred ----------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	f003 0302 	and.w	r3, r3, #2
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d067      	beq.n	800a288 <HAL_OSPI_IRQHandler+0x180>
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d062      	beq.n	800a288 <HAL_OSPI_IRQHandler+0x180>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	2b28      	cmp	r3, #40	; 0x28
 800a1c6:	d131      	bne.n	800a22c <HAL_OSPI_IRQHandler+0x124>
    {
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d015      	beq.n	800a1fc <HAL_OSPI_IRQHandler+0xf4>
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d010      	beq.n	800a1fc <HAL_OSPI_IRQHandler+0xf4>
      {
        /* Read the last data received in the fifo */
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1de:	697a      	ldr	r2, [r7, #20]
 800a1e0:	7812      	ldrb	r2, [r2, #0]
 800a1e2:	b2d2      	uxtb	r2, r2
 800a1e4:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ea:	1c5a      	adds	r2, r3, #1
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1f4:	1e5a      	subs	r2, r3, #1
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	649a      	str	r2, [r3, #72]	; 0x48
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800a1fa:	e0bd      	b.n	800a378 <HAL_OSPI_IRQHandler+0x270>
      }
      else if(hospi->XferCount == 0U)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a200:	2b00      	cmp	r3, #0
 800a202:	f040 80b9 	bne.w	800a378 <HAL_OSPI_IRQHandler+0x270>
      {
        /* Clear flag */
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	2202      	movs	r2, #2
 800a20c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Disable the interrupts */
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	681a      	ldr	r2, [r3, #0]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800a21c:	601a      	str	r2, [r3, #0]

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2202      	movs	r2, #2
 800a222:	651a      	str	r2, [r3, #80]	; 0x50

        /* RX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->RxCpltCallback(hospi);
#else
        HAL_OSPI_RxCpltCallback(hospi);
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f000 facb 	bl	800a7c0 <HAL_OSPI_RxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800a22a:	e0a5      	b.n	800a378 <HAL_OSPI_IRQHandler+0x270>
      }
    }
    else
    {
      /* Clear flag */
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	2202      	movs	r2, #2
 800a232:	625a      	str	r2, [r3, #36]	; 0x24

      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	681a      	ldr	r2, [r3, #0]
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800a242:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2202      	movs	r2, #2
 800a248:	651a      	str	r2, [r3, #80]	; 0x50

      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	2b18      	cmp	r3, #24
 800a24e:	d103      	bne.n	800a258 <HAL_OSPI_IRQHandler+0x150>
      {
        /* TX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->TxCpltCallback(hospi);
#else
        HAL_OSPI_TxCpltCallback(hospi);
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f000 fabf 	bl	800a7d4 <HAL_OSPI_TxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800a256:	e08f      	b.n	800a378 <HAL_OSPI_IRQHandler+0x270>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	2b08      	cmp	r3, #8
 800a25c:	d103      	bne.n	800a266 <HAL_OSPI_IRQHandler+0x15e>
      {
        /* Command complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->CmdCpltCallback(hospi);
#else
        HAL_OSPI_CmdCpltCallback(hospi);
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f000 faa4 	bl	800a7ac <HAL_OSPI_CmdCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800a264:	e088      	b.n	800a378 <HAL_OSPI_IRQHandler+0x270>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a26c:	f040 8084 	bne.w	800a378 <HAL_OSPI_IRQHandler+0x270>
      {
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a274:	2b00      	cmp	r3, #0
 800a276:	d103      	bne.n	800a280 <HAL_OSPI_IRQHandler+0x178>
          /* Abort called by the user */
          /* Abort complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->AbortCpltCallback(hospi);
#else
          HAL_OSPI_AbortCpltCallback(hospi);
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f000 fa83 	bl	800a784 <HAL_OSPI_AbortCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800a27e:	e07b      	b.n	800a378 <HAL_OSPI_IRQHandler+0x270>
          /* Abort due to an error (eg : DMA error) */
          /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->ErrorCallback(hospi);
#else
          HAL_OSPI_ErrorCallback(hospi);
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f000 fa75 	bl	800a770 <HAL_OSPI_ErrorCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800a286:	e077      	b.n	800a378 <HAL_OSPI_IRQHandler+0x270>
        /* Nothing to do */
      }
    }
  }
  /* OctoSPI status match interrupt occurred ---------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	f003 0308 	and.w	r3, r3, #8
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d01e      	beq.n	800a2d0 <HAL_OSPI_IRQHandler+0x1c8>
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d019      	beq.n	800a2d0 <HAL_OSPI_IRQHandler+0x1c8>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	2208      	movs	r2, #8
 800a2a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Check if automatic poll mode stop is activated */
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d00a      	beq.n	800a2c8 <HAL_OSPI_IRQHandler+0x1c0>
    {
      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	681a      	ldr	r2, [r3, #0]
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800a2c0:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2202      	movs	r2, #2
 800a2c6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Status match callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->StatusMatchCallback(hospi);
#else
    HAL_OSPI_StatusMatchCallback(hospi);
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f000 fa8d 	bl	800a7e8 <HAL_OSPI_StatusMatchCallback>
 800a2ce:	e056      	b.n	800a37e <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* OctoSPI transfer error interrupt occurred -------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	f003 0301 	and.w	r3, r3, #1
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d03c      	beq.n	800a354 <HAL_OSPI_IRQHandler+0x24c>
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d037      	beq.n	800a354 <HAL_OSPI_IRQHandler+0x24c>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	2201      	movs	r2, #1
 800a2ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable all interrupts */
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800a2fa:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2202      	movs	r2, #2
 800a300:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f003 0304 	and.w	r3, r3, #4
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d01a      	beq.n	800a346 <HAL_OSPI_IRQHandler+0x23e>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	681a      	ldr	r2, [r3, #0]
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f022 0204 	bic.w	r2, r2, #4
 800a31e:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      hospi->hmdma->XferAbortCallback = OSPI_DMAAbortCplt;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a324:	4a18      	ldr	r2, [pc, #96]	; (800a388 <HAL_OSPI_IRQHandler+0x280>)
 800a326:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hospi->hmdma) != HAL_OK)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a32c:	4618      	mov	r0, r3
 800a32e:	f7ff fe07 	bl	8009f40 <HAL_MDMA_Abort_IT>
 800a332:	4603      	mov	r3, r0
 800a334:	2b00      	cmp	r3, #0
 800a336:	d021      	beq.n	800a37c <HAL_OSPI_IRQHandler+0x274>
      {
        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2202      	movs	r2, #2
 800a33c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->ErrorCallback(hospi);
#else
        HAL_OSPI_ErrorCallback(hospi);
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f000 fa16 	bl	800a770 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800a344:	e01a      	b.n	800a37c <HAL_OSPI_IRQHandler+0x274>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2202      	movs	r2, #2
 800a34a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
      hospi->ErrorCallback(hospi);
#else
      HAL_OSPI_ErrorCallback(hospi);
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f000 fa0f 	bl	800a770 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800a352:	e013      	b.n	800a37c <HAL_OSPI_IRQHandler+0x274>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
    }
  }
  /* OctoSPI timeout interrupt occurred --------------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	f003 0310 	and.w	r3, r3, #16
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d00f      	beq.n	800a37e <HAL_OSPI_IRQHandler+0x276>
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a364:	2b00      	cmp	r3, #0
 800a366:	d00a      	beq.n	800a37e <HAL_OSPI_IRQHandler+0x276>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	2210      	movs	r2, #16
 800a36e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Timeout callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->TimeOutCallback(hospi);
#else
    HAL_OSPI_TimeOutCallback(hospi);
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f000 fa43 	bl	800a7fc <HAL_OSPI_TimeOutCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a376:	e002      	b.n	800a37e <HAL_OSPI_IRQHandler+0x276>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800a378:	bf00      	nop
 800a37a:	e000      	b.n	800a37e <HAL_OSPI_IRQHandler+0x276>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800a37c:	bf00      	nop
}
 800a37e:	bf00      	nop
 800a380:	3718      	adds	r7, #24
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
 800a386:	bf00      	nop
 800a388:	0800b201 	.word	0x0800b201

0800a38c <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b08a      	sub	sp, #40	; 0x28
 800a390:	af02      	add	r7, sp, #8
 800a392:	60f8      	str	r0, [r7, #12]
 800a394:	60b9      	str	r1, [r7, #8]
 800a396:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 800a398:	f7f9 fe70 	bl	800407c <HAL_GetTick>
 800a39c:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3a2:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3a8:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	2b02      	cmp	r3, #2
 800a3ae:	d104      	bne.n	800a3ba <HAL_OSPI_Command+0x2e>
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	68db      	ldr	r3, [r3, #12]
 800a3b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a3b8:	d115      	bne.n	800a3e6 <HAL_OSPI_Command+0x5a>
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	2b14      	cmp	r3, #20
 800a3be:	d107      	bne.n	800a3d0 <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	2b02      	cmp	r3, #2
 800a3c6:	d00e      	beq.n	800a3e6 <HAL_OSPI_Command+0x5a>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	2b03      	cmp	r3, #3
 800a3ce:	d00a      	beq.n	800a3e6 <HAL_OSPI_Command+0x5a>
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	2b24      	cmp	r3, #36	; 0x24
 800a3d4:	d15b      	bne.n	800a48e <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	2b01      	cmp	r3, #1
 800a3dc:	d003      	beq.n	800a3e6 <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 800a3e2:	2b03      	cmp	r3, #3
 800a3e4:	d153      	bne.n	800a48e <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	9300      	str	r3, [sp, #0]
 800a3ea:	69bb      	ldr	r3, [r7, #24]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	2120      	movs	r1, #32
 800a3f0:	68f8      	ldr	r0, [r7, #12]
 800a3f2:	f000 ff41 	bl	800b278 <OSPI_WaitFlagStateUntilTimeout>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800a3fa:	7ffb      	ldrb	r3, [r7, #31]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d14c      	bne.n	800a49a <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2200      	movs	r2, #0
 800a404:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 800a406:	68b9      	ldr	r1, [r7, #8]
 800a408:	68f8      	ldr	r0, [r7, #12]
 800a40a:	f000 ff6d 	bl	800b2e8 <OSPI_ConfigCmd>
 800a40e:	4603      	mov	r3, r0
 800a410:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800a412:	7ffb      	ldrb	r3, [r7, #31]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d140      	bne.n	800a49a <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d10e      	bne.n	800a43e <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	9300      	str	r3, [sp, #0]
 800a424:	69bb      	ldr	r3, [r7, #24]
 800a426:	2201      	movs	r2, #1
 800a428:	2102      	movs	r1, #2
 800a42a:	68f8      	ldr	r0, [r7, #12]
 800a42c:	f000 ff24 	bl	800b278 <OSPI_WaitFlagStateUntilTimeout>
 800a430:	4603      	mov	r3, r0
 800a432:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	2202      	movs	r2, #2
 800a43a:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800a43c:	e02d      	b.n	800a49a <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d103      	bne.n	800a44e <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2204      	movs	r2, #4
 800a44a:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800a44c:	e025      	b.n	800a49a <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	2b01      	cmp	r3, #1
 800a454:	d10b      	bne.n	800a46e <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a45a:	2b24      	cmp	r3, #36	; 0x24
 800a45c:	d103      	bne.n	800a466 <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2204      	movs	r2, #4
 800a462:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800a464:	e019      	b.n	800a49a <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	2214      	movs	r2, #20
 800a46a:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800a46c:	e015      	b.n	800a49a <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	2b02      	cmp	r3, #2
 800a474:	d111      	bne.n	800a49a <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a47a:	2b14      	cmp	r3, #20
 800a47c:	d103      	bne.n	800a486 <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2204      	movs	r2, #4
 800a482:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800a484:	e009      	b.n	800a49a <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2224      	movs	r2, #36	; 0x24
 800a48a:	651a      	str	r2, [r3, #80]	; 0x50
    if (status == HAL_OK)
 800a48c:	e005      	b.n	800a49a <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 800a48e:	2301      	movs	r3, #1
 800a490:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2210      	movs	r2, #16
 800a496:	655a      	str	r2, [r3, #84]	; 0x54
 800a498:	e000      	b.n	800a49c <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 800a49a:	bf00      	nop
  }

  /* Return function status */
  return status;
 800a49c:	7ffb      	ldrb	r3, [r7, #31]
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3720      	adds	r7, #32
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}

0800a4a6 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 800a4a6:	b580      	push	{r7, lr}
 800a4a8:	b08a      	sub	sp, #40	; 0x28
 800a4aa:	af02      	add	r7, sp, #8
 800a4ac:	60f8      	str	r0, [r7, #12]
 800a4ae:	60b9      	str	r1, [r7, #8]
 800a4b0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a4b2:	f7f9 fde3 	bl	800407c <HAL_GetTick>
 800a4b6:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	3350      	adds	r3, #80	; 0x50
 800a4be:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d105      	bne.n	800a4d2 <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2208      	movs	r2, #8
 800a4ce:	655a      	str	r2, [r3, #84]	; 0x54
 800a4d0:	e057      	b.n	800a582 <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4d6:	2b04      	cmp	r3, #4
 800a4d8:	d14e      	bne.n	800a578 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4e0:	1c5a      	adds	r2, r3, #1
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	68ba      	ldr	r2, [r7, #8]
 800a4f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	681a      	ldr	r2, [r3, #0]
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a502:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	9300      	str	r3, [sp, #0]
 800a508:	69bb      	ldr	r3, [r7, #24]
 800a50a:	2201      	movs	r2, #1
 800a50c:	2104      	movs	r1, #4
 800a50e:	68f8      	ldr	r0, [r7, #12]
 800a510:	f000 feb2 	bl	800b278 <OSPI_WaitFlagStateUntilTimeout>
 800a514:	4603      	mov	r3, r0
 800a516:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800a518:	7ffb      	ldrb	r3, [r7, #31]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d113      	bne.n	800a546 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a522:	781a      	ldrb	r2, [r3, #0]
 800a524:	697b      	ldr	r3, [r7, #20]
 800a526:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a52c:	1c5a      	adds	r2, r3, #1
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a536:	1e5a      	subs	r2, r3, #1
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	649a      	str	r2, [r3, #72]	; 0x48
      } while (hospi->XferCount > 0U);
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a540:	2b00      	cmp	r3, #0
 800a542:	d1df      	bne.n	800a504 <HAL_OSPI_Transmit+0x5e>
 800a544:	e000      	b.n	800a548 <HAL_OSPI_Transmit+0xa2>
          break;
 800a546:	bf00      	nop

      if (status == HAL_OK)
 800a548:	7ffb      	ldrb	r3, [r7, #31]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d119      	bne.n	800a582 <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	9300      	str	r3, [sp, #0]
 800a552:	69bb      	ldr	r3, [r7, #24]
 800a554:	2201      	movs	r2, #1
 800a556:	2102      	movs	r1, #2
 800a558:	68f8      	ldr	r0, [r7, #12]
 800a55a:	f000 fe8d 	bl	800b278 <OSPI_WaitFlagStateUntilTimeout>
 800a55e:	4603      	mov	r3, r0
 800a560:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800a562:	7ffb      	ldrb	r3, [r7, #31]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d10c      	bne.n	800a582 <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	2202      	movs	r2, #2
 800a56e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	2202      	movs	r2, #2
 800a574:	651a      	str	r2, [r3, #80]	; 0x50
 800a576:	e004      	b.n	800a582 <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 800a578:	2301      	movs	r3, #1
 800a57a:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	2210      	movs	r2, #16
 800a580:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 800a582:	7ffb      	ldrb	r3, [r7, #31]
}
 800a584:	4618      	mov	r0, r3
 800a586:	3720      	adds	r7, #32
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}

0800a58c <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b08c      	sub	sp, #48	; 0x30
 800a590:	af02      	add	r7, sp, #8
 800a592:	60f8      	str	r0, [r7, #12]
 800a594:	60b9      	str	r1, [r7, #8]
 800a596:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a598:	f7f9 fd70 	bl	800407c <HAL_GetTick>
 800a59c:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	3350      	adds	r3, #80	; 0x50
 800a5a4:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5ac:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800a5b6:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d106      	bne.n	800a5cc <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 800a5be:	2301      	movs	r3, #1
 800a5c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2208      	movs	r2, #8
 800a5c8:	655a      	str	r2, [r3, #84]	; 0x54
 800a5ca:	e07c      	b.n	800a6c6 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5d0:	2b04      	cmp	r3, #4
 800a5d2:	d172      	bne.n	800a6ba <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5da:	1c5a      	adds	r2, r3, #1
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->pBuffPtr  = pData;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	68ba      	ldr	r2, [r7, #8]
 800a5ec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a600:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	68db      	ldr	r3, [r3, #12]
 800a606:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a60a:	d104      	bne.n	800a616 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	69ba      	ldr	r2, [r7, #24]
 800a612:	649a      	str	r2, [r3, #72]	; 0x48
 800a614:	e011      	b.n	800a63a <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800a61e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a622:	2b00      	cmp	r3, #0
 800a624:	d004      	beq.n	800a630 <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	69ba      	ldr	r2, [r7, #24]
 800a62c:	649a      	str	r2, [r3, #72]	; 0x48
 800a62e:	e004      	b.n	800a63a <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	697a      	ldr	r2, [r7, #20]
 800a636:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	9300      	str	r3, [sp, #0]
 800a63e:	6a3b      	ldr	r3, [r7, #32]
 800a640:	2201      	movs	r2, #1
 800a642:	2106      	movs	r1, #6
 800a644:	68f8      	ldr	r0, [r7, #12]
 800a646:	f000 fe17 	bl	800b278 <OSPI_WaitFlagStateUntilTimeout>
 800a64a:	4603      	mov	r3, r0
 800a64c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 800a650:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a654:	2b00      	cmp	r3, #0
 800a656:	d114      	bne.n	800a682 <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a65c:	69fa      	ldr	r2, [r7, #28]
 800a65e:	7812      	ldrb	r2, [r2, #0]
 800a660:	b2d2      	uxtb	r2, r2
 800a662:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a668:	1c5a      	adds	r2, r3, #1
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	641a      	str	r2, [r3, #64]	; 0x40
        hospi->XferCount--;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a672:	1e5a      	subs	r2, r3, #1
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	649a      	str	r2, [r3, #72]	; 0x48
      } while(hospi->XferCount > 0U);
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d1dc      	bne.n	800a63a <HAL_OSPI_Receive+0xae>
 800a680:	e000      	b.n	800a684 <HAL_OSPI_Receive+0xf8>
          break;
 800a682:	bf00      	nop

      if (status == HAL_OK)
 800a684:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d11c      	bne.n	800a6c6 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	9300      	str	r3, [sp, #0]
 800a690:	6a3b      	ldr	r3, [r7, #32]
 800a692:	2201      	movs	r2, #1
 800a694:	2102      	movs	r1, #2
 800a696:	68f8      	ldr	r0, [r7, #12]
 800a698:	f000 fdee 	bl	800b278 <OSPI_WaitFlagStateUntilTimeout>
 800a69c:	4603      	mov	r3, r0
 800a69e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 800a6a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d10d      	bne.n	800a6c6 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	2202      	movs	r2, #2
 800a6b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	2202      	movs	r2, #2
 800a6b6:	651a      	str	r2, [r3, #80]	; 0x50
 800a6b8:	e005      	b.n	800a6c6 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	2210      	movs	r2, #16
 800a6c4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 800a6c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3728      	adds	r7, #40	; 0x28
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}
	...

0800a6d4 <HAL_OSPI_MemoryMapped>:
  * @param  cfg   : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_MemoryMapped(OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b086      	sub	sp, #24
 800a6d8:	af02      	add	r7, sp, #8
 800a6da:	6078      	str	r0, [r7, #4]
 800a6dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a6de:	f7f9 fccd 	bl	800407c <HAL_GetTick>
 800a6e2:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_OSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6e8:	2b04      	cmp	r3, #4
 800a6ea:	d134      	bne.n	800a756 <HAL_OSPI_MemoryMapped+0x82>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6f0:	9300      	str	r3, [sp, #0]
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	2120      	movs	r1, #32
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f000 fdbd 	bl	800b278 <OSPI_WaitFlagStateUntilTimeout>
 800a6fe:	4603      	mov	r3, r0
 800a700:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800a702:	7bfb      	ldrb	r3, [r7, #15]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d12b      	bne.n	800a760 <HAL_OSPI_MemoryMapped+0x8c>
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2288      	movs	r2, #136	; 0x88
 800a70c:	651a      	str	r2, [r3, #80]	; 0x50

      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	2b08      	cmp	r3, #8
 800a714:	d111      	bne.n	800a73a <HAL_OSPI_MemoryMapped+0x66>
      {
        assert_param(IS_OSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure register */
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	683a      	ldr	r2, [r7, #0]
 800a71c:	6852      	ldr	r2, [r2, #4]
 800a71e:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	2210      	movs	r2, #16
 800a728:	625a      	str	r2, [r3, #36]	; 0x24

        /* Enable the timeout interrupt */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	681a      	ldr	r2, [r3, #0]
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a738:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	681a      	ldr	r2, [r3, #0]
 800a740:	4b0a      	ldr	r3, [pc, #40]	; (800a76c <HAL_OSPI_MemoryMapped+0x98>)
 800a742:	4013      	ands	r3, r2
 800a744:	683a      	ldr	r2, [r7, #0]
 800a746:	6812      	ldr	r2, [r2, #0]
 800a748:	431a      	orrs	r2, r3
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800a752:	601a      	str	r2, [r3, #0]
 800a754:	e004      	b.n	800a760 <HAL_OSPI_MemoryMapped+0x8c>
                 (cfg->TimeOutActivation | OSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 800a756:	2301      	movs	r3, #1
 800a758:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2210      	movs	r2, #16
 800a75e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Return function status */
  return status;
 800a760:	7bfb      	ldrb	r3, [r7, #15]
}
 800a762:	4618      	mov	r0, r3
 800a764:	3710      	adds	r7, #16
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}
 800a76a:	bf00      	nop
 800a76c:	cffffff7 	.word	0xcffffff7

0800a770 <HAL_OSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_ErrorCallback(OSPI_HandleTypeDef *hospi)
{
 800a770:	b480      	push	{r7}
 800a772:	b083      	sub	sp, #12
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_ErrorCallback could be implemented in the user file
   */
}
 800a778:	bf00      	nop
 800a77a:	370c      	adds	r7, #12
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr

0800a784 <HAL_OSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_AbortCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800a784:	b480      	push	{r7}
 800a786:	b083      	sub	sp, #12
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_AbortCpltCallback could be implemented in the user file
   */
}
 800a78c:	bf00      	nop
 800a78e:	370c      	adds	r7, #12
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr

0800a798 <HAL_OSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_FifoThresholdCallback(OSPI_HandleTypeDef *hospi)
{
 800a798:	b480      	push	{r7}
 800a79a:	b083      	sub	sp, #12
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 800a7a0:	bf00      	nop
 800a7a2:	370c      	adds	r7, #12
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr

0800a7ac <HAL_OSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_CmdCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_CmdCpltCallback could be implemented in the user file
   */
}
 800a7b4:	bf00      	nop
 800a7b6:	370c      	adds	r7, #12
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr

0800a7c0 <HAL_OSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_RxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b083      	sub	sp, #12
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_RxCpltCallback could be implemented in the user file
   */
}
 800a7c8:	bf00      	nop
 800a7ca:	370c      	adds	r7, #12
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr

0800a7d4 <HAL_OSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
 __weak void HAL_OSPI_TxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b083      	sub	sp, #12
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_TxCpltCallback could be implemented in the user file
   */
}
 800a7dc:	bf00      	nop
 800a7de:	370c      	adds	r7, #12
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e6:	4770      	bx	lr

0800a7e8 <HAL_OSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_StatusMatchCallback(OSPI_HandleTypeDef *hospi)
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b083      	sub	sp, #12
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_StatusMatchCallback could be implemented in the user file
   */
}
 800a7f0:	bf00      	nop
 800a7f2:	370c      	adds	r7, #12
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fa:	4770      	bx	lr

0800a7fc <HAL_OSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TimeOutCallback(OSPI_HandleTypeDef *hospi)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b083      	sub	sp, #12
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_TimeOutCallback could be implemented in the user file
   */
}
 800a804:	bf00      	nop
 800a806:	370c      	adds	r7, #12
 800a808:	46bd      	mov	sp, r7
 800a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80e:	4770      	bx	lr

0800a810 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800a810:	b480      	push	{r7}
 800a812:	b083      	sub	sp, #12
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
 800a818:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	683a      	ldr	r2, [r7, #0]
 800a81e:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 800a820:	2300      	movs	r3, #0
}
 800a822:	4618      	mov	r0, r3
 800a824:	370c      	adds	r7, #12
 800a826:	46bd      	mov	sp, r7
 800a828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82c:	4770      	bx	lr
	...

0800a830 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b094      	sub	sp, #80	; 0x50
 800a834:	af00      	add	r7, sp, #0
 800a836:	60f8      	str	r0, [r7, #12]
 800a838:	60b9      	str	r1, [r7, #8]
 800a83a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a83c:	2300      	movs	r3, #0
 800a83e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 800a842:	2300      	movs	r3, #0
 800a844:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	4a9d      	ldr	r2, [pc, #628]	; (800aac4 <HAL_OSPIM_Config+0x294>)
 800a84e:	4293      	cmp	r3, r2
 800a850:	d105      	bne.n	800a85e <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 800a852:	2300      	movs	r3, #0
 800a854:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 800a856:	2301      	movs	r3, #1
 800a858:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800a85c:	e004      	b.n	800a868 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 800a85e:	2301      	movs	r3, #1
 800a860:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 800a862:	2300      	movs	r3, #0
 800a864:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800a868:	2300      	movs	r3, #0
 800a86a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a86e:	e01d      	b.n	800a8ac <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 800a870:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a874:	3301      	adds	r3, #1
 800a876:	b2d8      	uxtb	r0, r3
 800a878:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800a87c:	f107 0114 	add.w	r1, r7, #20
 800a880:	4613      	mov	r3, r2
 800a882:	005b      	lsls	r3, r3, #1
 800a884:	4413      	add	r3, r2
 800a886:	00db      	lsls	r3, r3, #3
 800a888:	440b      	add	r3, r1
 800a88a:	4619      	mov	r1, r3
 800a88c:	f000 fea6 	bl	800b5dc <OSPIM_GetConfig>
 800a890:	4603      	mov	r3, r0
 800a892:	2b00      	cmp	r3, #0
 800a894:	d005      	beq.n	800a8a2 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 800a896:	2301      	movs	r3, #1
 800a898:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2208      	movs	r2, #8
 800a8a0:	655a      	str	r2, [r3, #84]	; 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800a8a2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a8a6:	3301      	adds	r3, #1
 800a8a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a8ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	d9dd      	bls.n	800a870 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 800a8b4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	f040 8495 	bne.w	800b1e8 <HAL_OSPIM_Config+0x9b8>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800a8be:	4b81      	ldr	r3, [pc, #516]	; (800aac4 <HAL_OSPIM_Config+0x294>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f003 0301 	and.w	r3, r3, #1
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d00b      	beq.n	800a8e2 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800a8ca:	4b7e      	ldr	r3, [pc, #504]	; (800aac4 <HAL_OSPIM_Config+0x294>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	4a7d      	ldr	r2, [pc, #500]	; (800aac4 <HAL_OSPIM_Config+0x294>)
 800a8d0:	f023 0301 	bic.w	r3, r3, #1
 800a8d4:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 800a8d6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800a8da:	f043 0301 	orr.w	r3, r3, #1
 800a8de:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800a8e2:	4b79      	ldr	r3, [pc, #484]	; (800aac8 <HAL_OSPIM_Config+0x298>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f003 0301 	and.w	r3, r3, #1
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d00b      	beq.n	800a906 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800a8ee:	4b76      	ldr	r3, [pc, #472]	; (800aac8 <HAL_OSPIM_Config+0x298>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	4a75      	ldr	r2, [pc, #468]	; (800aac8 <HAL_OSPIM_Config+0x298>)
 800a8f4:	f023 0301 	bic.w	r3, r3, #1
 800a8f8:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800a8fa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800a8fe:	f043 0302 	orr.w	r3, r3, #2
 800a902:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 800a906:	4971      	ldr	r1, [pc, #452]	; (800aacc <HAL_OSPIM_Config+0x29c>)
 800a908:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a90a:	4613      	mov	r3, r2
 800a90c:	005b      	lsls	r3, r3, #1
 800a90e:	4413      	add	r3, r2
 800a910:	00db      	lsls	r3, r3, #3
 800a912:	3350      	adds	r3, #80	; 0x50
 800a914:	443b      	add	r3, r7
 800a916:	3b34      	subs	r3, #52	; 0x34
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	3b01      	subs	r3, #1
 800a91c:	009b      	lsls	r3, r3, #2
 800a91e:	440b      	add	r3, r1
 800a920:	6859      	ldr	r1, [r3, #4]
 800a922:	486a      	ldr	r0, [pc, #424]	; (800aacc <HAL_OSPIM_Config+0x29c>)
 800a924:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a926:	4613      	mov	r3, r2
 800a928:	005b      	lsls	r3, r3, #1
 800a92a:	4413      	add	r3, r2
 800a92c:	00db      	lsls	r3, r3, #3
 800a92e:	3350      	adds	r3, #80	; 0x50
 800a930:	443b      	add	r3, r7
 800a932:	3b34      	subs	r3, #52	; 0x34
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	3b01      	subs	r3, #1
 800a938:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800a93c:	009b      	lsls	r3, r3, #2
 800a93e:	4403      	add	r3, r0
 800a940:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800a942:	4b62      	ldr	r3, [pc, #392]	; (800aacc <HAL_OSPIM_Config+0x29c>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f003 0301 	and.w	r3, r3, #1
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	f000 80c0 	beq.w	800aad0 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 800a950:	4b5e      	ldr	r3, [pc, #376]	; (800aacc <HAL_OSPIM_Config+0x29c>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	4a5d      	ldr	r2, [pc, #372]	; (800aacc <HAL_OSPIM_Config+0x29c>)
 800a956:	f023 0301 	bic.w	r3, r3, #1
 800a95a:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 800a95c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800a960:	2b01      	cmp	r3, #1
 800a962:	f040 8162 	bne.w	800ac2a <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKSRC);
 800a966:	4959      	ldr	r1, [pc, #356]	; (800aacc <HAL_OSPIM_Config+0x29c>)
 800a968:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a96c:	4613      	mov	r3, r2
 800a96e:	005b      	lsls	r3, r3, #1
 800a970:	4413      	add	r3, r2
 800a972:	00db      	lsls	r3, r3, #3
 800a974:	3350      	adds	r3, #80	; 0x50
 800a976:	443b      	add	r3, r7
 800a978:	3b3c      	subs	r3, #60	; 0x3c
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	3b01      	subs	r3, #1
 800a97e:	009b      	lsls	r3, r3, #2
 800a980:	440b      	add	r3, r1
 800a982:	6859      	ldr	r1, [r3, #4]
 800a984:	4851      	ldr	r0, [pc, #324]	; (800aacc <HAL_OSPIM_Config+0x29c>)
 800a986:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a98a:	4613      	mov	r3, r2
 800a98c:	005b      	lsls	r3, r3, #1
 800a98e:	4413      	add	r3, r2
 800a990:	00db      	lsls	r3, r3, #3
 800a992:	3350      	adds	r3, #80	; 0x50
 800a994:	443b      	add	r3, r7
 800a996:	3b3c      	subs	r3, #60	; 0x3c
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	3b01      	subs	r3, #1
 800a99c:	f041 0202 	orr.w	r2, r1, #2
 800a9a0:	009b      	lsls	r3, r3, #2
 800a9a2:	4403      	add	r3, r0
 800a9a4:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800a9a6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a9aa:	4613      	mov	r3, r2
 800a9ac:	005b      	lsls	r3, r3, #1
 800a9ae:	4413      	add	r3, r2
 800a9b0:	00db      	lsls	r3, r3, #3
 800a9b2:	3350      	adds	r3, #80	; 0x50
 800a9b4:	443b      	add	r3, r7
 800a9b6:	3b38      	subs	r3, #56	; 0x38
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d01f      	beq.n	800a9fe <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSSRC);
 800a9be:	4943      	ldr	r1, [pc, #268]	; (800aacc <HAL_OSPIM_Config+0x29c>)
 800a9c0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a9c4:	4613      	mov	r3, r2
 800a9c6:	005b      	lsls	r3, r3, #1
 800a9c8:	4413      	add	r3, r2
 800a9ca:	00db      	lsls	r3, r3, #3
 800a9cc:	3350      	adds	r3, #80	; 0x50
 800a9ce:	443b      	add	r3, r7
 800a9d0:	3b38      	subs	r3, #56	; 0x38
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	3b01      	subs	r3, #1
 800a9d6:	009b      	lsls	r3, r3, #2
 800a9d8:	440b      	add	r3, r1
 800a9da:	6859      	ldr	r1, [r3, #4]
 800a9dc:	483b      	ldr	r0, [pc, #236]	; (800aacc <HAL_OSPIM_Config+0x29c>)
 800a9de:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800a9e2:	4613      	mov	r3, r2
 800a9e4:	005b      	lsls	r3, r3, #1
 800a9e6:	4413      	add	r3, r2
 800a9e8:	00db      	lsls	r3, r3, #3
 800a9ea:	3350      	adds	r3, #80	; 0x50
 800a9ec:	443b      	add	r3, r7
 800a9ee:	3b38      	subs	r3, #56	; 0x38
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	3b01      	subs	r3, #1
 800a9f4:	f041 0220 	orr.w	r2, r1, #32
 800a9f8:	009b      	lsls	r3, r3, #2
 800a9fa:	4403      	add	r3, r0
 800a9fc:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800a9fe:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800aa02:	4613      	mov	r3, r2
 800aa04:	005b      	lsls	r3, r3, #1
 800aa06:	4413      	add	r3, r2
 800aa08:	00db      	lsls	r3, r3, #3
 800aa0a:	3350      	adds	r3, #80	; 0x50
 800aa0c:	443b      	add	r3, r7
 800aa0e:	3b30      	subs	r3, #48	; 0x30
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d023      	beq.n	800aa5e <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLSRC_1);
 800aa16:	492d      	ldr	r1, [pc, #180]	; (800aacc <HAL_OSPIM_Config+0x29c>)
 800aa18:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800aa1c:	4613      	mov	r3, r2
 800aa1e:	005b      	lsls	r3, r3, #1
 800aa20:	4413      	add	r3, r2
 800aa22:	00db      	lsls	r3, r3, #3
 800aa24:	3350      	adds	r3, #80	; 0x50
 800aa26:	443b      	add	r3, r7
 800aa28:	3b30      	subs	r3, #48	; 0x30
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	3b01      	subs	r3, #1
 800aa2e:	f003 0301 	and.w	r3, r3, #1
 800aa32:	009b      	lsls	r3, r3, #2
 800aa34:	440b      	add	r3, r1
 800aa36:	6859      	ldr	r1, [r3, #4]
 800aa38:	4824      	ldr	r0, [pc, #144]	; (800aacc <HAL_OSPIM_Config+0x29c>)
 800aa3a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800aa3e:	4613      	mov	r3, r2
 800aa40:	005b      	lsls	r3, r3, #1
 800aa42:	4413      	add	r3, r2
 800aa44:	00db      	lsls	r3, r3, #3
 800aa46:	3350      	adds	r3, #80	; 0x50
 800aa48:	443b      	add	r3, r7
 800aa4a:	3b30      	subs	r3, #48	; 0x30
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	3b01      	subs	r3, #1
 800aa50:	f003 0301 	and.w	r3, r3, #1
 800aa54:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 800aa58:	009b      	lsls	r3, r3, #2
 800aa5a:	4403      	add	r3, r0
 800aa5c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800aa5e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800aa62:	4613      	mov	r3, r2
 800aa64:	005b      	lsls	r3, r3, #1
 800aa66:	4413      	add	r3, r2
 800aa68:	00db      	lsls	r3, r3, #3
 800aa6a:	3350      	adds	r3, #80	; 0x50
 800aa6c:	443b      	add	r3, r7
 800aa6e:	3b2c      	subs	r3, #44	; 0x2c
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	f000 80d9 	beq.w	800ac2a <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHSRC_1);
 800aa78:	4914      	ldr	r1, [pc, #80]	; (800aacc <HAL_OSPIM_Config+0x29c>)
 800aa7a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800aa7e:	4613      	mov	r3, r2
 800aa80:	005b      	lsls	r3, r3, #1
 800aa82:	4413      	add	r3, r2
 800aa84:	00db      	lsls	r3, r3, #3
 800aa86:	3350      	adds	r3, #80	; 0x50
 800aa88:	443b      	add	r3, r7
 800aa8a:	3b2c      	subs	r3, #44	; 0x2c
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	3b01      	subs	r3, #1
 800aa90:	f003 0301 	and.w	r3, r3, #1
 800aa94:	009b      	lsls	r3, r3, #2
 800aa96:	440b      	add	r3, r1
 800aa98:	6859      	ldr	r1, [r3, #4]
 800aa9a:	480c      	ldr	r0, [pc, #48]	; (800aacc <HAL_OSPIM_Config+0x29c>)
 800aa9c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800aaa0:	4613      	mov	r3, r2
 800aaa2:	005b      	lsls	r3, r3, #1
 800aaa4:	4413      	add	r3, r2
 800aaa6:	00db      	lsls	r3, r3, #3
 800aaa8:	3350      	adds	r3, #80	; 0x50
 800aaaa:	443b      	add	r3, r7
 800aaac:	3b2c      	subs	r3, #44	; 0x2c
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	3b01      	subs	r3, #1
 800aab2:	f003 0301 	and.w	r3, r3, #1
 800aab6:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 800aaba:	009b      	lsls	r3, r3, #2
 800aabc:	4403      	add	r3, r0
 800aabe:	605a      	str	r2, [r3, #4]
 800aac0:	e0b3      	b.n	800ac2a <HAL_OSPIM_Config+0x3fa>
 800aac2:	bf00      	nop
 800aac4:	52005000 	.word	0x52005000
 800aac8:	5200a000 	.word	0x5200a000
 800aacc:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 800aad0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aad2:	4613      	mov	r3, r2
 800aad4:	005b      	lsls	r3, r3, #1
 800aad6:	4413      	add	r3, r2
 800aad8:	00db      	lsls	r3, r3, #3
 800aada:	3350      	adds	r3, #80	; 0x50
 800aadc:	443b      	add	r3, r7
 800aade:	3b3c      	subs	r3, #60	; 0x3c
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	f000 80a1 	beq.w	800ac2a <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 800aae8:	4993      	ldr	r1, [pc, #588]	; (800ad38 <HAL_OSPIM_Config+0x508>)
 800aaea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aaec:	4613      	mov	r3, r2
 800aaee:	005b      	lsls	r3, r3, #1
 800aaf0:	4413      	add	r3, r2
 800aaf2:	00db      	lsls	r3, r3, #3
 800aaf4:	3350      	adds	r3, #80	; 0x50
 800aaf6:	443b      	add	r3, r7
 800aaf8:	3b3c      	subs	r3, #60	; 0x3c
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	3b01      	subs	r3, #1
 800aafe:	009b      	lsls	r3, r3, #2
 800ab00:	440b      	add	r3, r1
 800ab02:	6859      	ldr	r1, [r3, #4]
 800ab04:	488c      	ldr	r0, [pc, #560]	; (800ad38 <HAL_OSPIM_Config+0x508>)
 800ab06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab08:	4613      	mov	r3, r2
 800ab0a:	005b      	lsls	r3, r3, #1
 800ab0c:	4413      	add	r3, r2
 800ab0e:	00db      	lsls	r3, r3, #3
 800ab10:	3350      	adds	r3, #80	; 0x50
 800ab12:	443b      	add	r3, r7
 800ab14:	3b3c      	subs	r3, #60	; 0x3c
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	3b01      	subs	r3, #1
 800ab1a:	f021 0201 	bic.w	r2, r1, #1
 800ab1e:	009b      	lsls	r3, r3, #2
 800ab20:	4403      	add	r3, r0
 800ab22:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 800ab24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab26:	4613      	mov	r3, r2
 800ab28:	005b      	lsls	r3, r3, #1
 800ab2a:	4413      	add	r3, r2
 800ab2c:	00db      	lsls	r3, r3, #3
 800ab2e:	3350      	adds	r3, #80	; 0x50
 800ab30:	443b      	add	r3, r7
 800ab32:	3b38      	subs	r3, #56	; 0x38
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d01d      	beq.n	800ab76 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 800ab3a:	497f      	ldr	r1, [pc, #508]	; (800ad38 <HAL_OSPIM_Config+0x508>)
 800ab3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab3e:	4613      	mov	r3, r2
 800ab40:	005b      	lsls	r3, r3, #1
 800ab42:	4413      	add	r3, r2
 800ab44:	00db      	lsls	r3, r3, #3
 800ab46:	3350      	adds	r3, #80	; 0x50
 800ab48:	443b      	add	r3, r7
 800ab4a:	3b38      	subs	r3, #56	; 0x38
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	3b01      	subs	r3, #1
 800ab50:	009b      	lsls	r3, r3, #2
 800ab52:	440b      	add	r3, r1
 800ab54:	6859      	ldr	r1, [r3, #4]
 800ab56:	4878      	ldr	r0, [pc, #480]	; (800ad38 <HAL_OSPIM_Config+0x508>)
 800ab58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab5a:	4613      	mov	r3, r2
 800ab5c:	005b      	lsls	r3, r3, #1
 800ab5e:	4413      	add	r3, r2
 800ab60:	00db      	lsls	r3, r3, #3
 800ab62:	3350      	adds	r3, #80	; 0x50
 800ab64:	443b      	add	r3, r7
 800ab66:	3b38      	subs	r3, #56	; 0x38
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	3b01      	subs	r3, #1
 800ab6c:	f021 0210 	bic.w	r2, r1, #16
 800ab70:	009b      	lsls	r3, r3, #2
 800ab72:	4403      	add	r3, r0
 800ab74:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800ab76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab78:	4613      	mov	r3, r2
 800ab7a:	005b      	lsls	r3, r3, #1
 800ab7c:	4413      	add	r3, r2
 800ab7e:	00db      	lsls	r3, r3, #3
 800ab80:	3350      	adds	r3, #80	; 0x50
 800ab82:	443b      	add	r3, r7
 800ab84:	3b30      	subs	r3, #48	; 0x30
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d021      	beq.n	800abd0 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800ab8c:	496a      	ldr	r1, [pc, #424]	; (800ad38 <HAL_OSPIM_Config+0x508>)
 800ab8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab90:	4613      	mov	r3, r2
 800ab92:	005b      	lsls	r3, r3, #1
 800ab94:	4413      	add	r3, r2
 800ab96:	00db      	lsls	r3, r3, #3
 800ab98:	3350      	adds	r3, #80	; 0x50
 800ab9a:	443b      	add	r3, r7
 800ab9c:	3b30      	subs	r3, #48	; 0x30
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	3b01      	subs	r3, #1
 800aba2:	f003 0301 	and.w	r3, r3, #1
 800aba6:	009b      	lsls	r3, r3, #2
 800aba8:	440b      	add	r3, r1
 800abaa:	6859      	ldr	r1, [r3, #4]
 800abac:	4862      	ldr	r0, [pc, #392]	; (800ad38 <HAL_OSPIM_Config+0x508>)
 800abae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800abb0:	4613      	mov	r3, r2
 800abb2:	005b      	lsls	r3, r3, #1
 800abb4:	4413      	add	r3, r2
 800abb6:	00db      	lsls	r3, r3, #3
 800abb8:	3350      	adds	r3, #80	; 0x50
 800abba:	443b      	add	r3, r7
 800abbc:	3b30      	subs	r3, #48	; 0x30
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	3b01      	subs	r3, #1
 800abc2:	f003 0301 	and.w	r3, r3, #1
 800abc6:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800abca:	009b      	lsls	r3, r3, #2
 800abcc:	4403      	add	r3, r0
 800abce:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800abd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800abd2:	4613      	mov	r3, r2
 800abd4:	005b      	lsls	r3, r3, #1
 800abd6:	4413      	add	r3, r2
 800abd8:	00db      	lsls	r3, r3, #3
 800abda:	3350      	adds	r3, #80	; 0x50
 800abdc:	443b      	add	r3, r7
 800abde:	3b2c      	subs	r3, #44	; 0x2c
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d021      	beq.n	800ac2a <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 800abe6:	4954      	ldr	r1, [pc, #336]	; (800ad38 <HAL_OSPIM_Config+0x508>)
 800abe8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800abea:	4613      	mov	r3, r2
 800abec:	005b      	lsls	r3, r3, #1
 800abee:	4413      	add	r3, r2
 800abf0:	00db      	lsls	r3, r3, #3
 800abf2:	3350      	adds	r3, #80	; 0x50
 800abf4:	443b      	add	r3, r7
 800abf6:	3b2c      	subs	r3, #44	; 0x2c
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	3b01      	subs	r3, #1
 800abfc:	f003 0301 	and.w	r3, r3, #1
 800ac00:	009b      	lsls	r3, r3, #2
 800ac02:	440b      	add	r3, r1
 800ac04:	6859      	ldr	r1, [r3, #4]
 800ac06:	484c      	ldr	r0, [pc, #304]	; (800ad38 <HAL_OSPIM_Config+0x508>)
 800ac08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac0a:	4613      	mov	r3, r2
 800ac0c:	005b      	lsls	r3, r3, #1
 800ac0e:	4413      	add	r3, r2
 800ac10:	00db      	lsls	r3, r3, #3
 800ac12:	3350      	adds	r3, #80	; 0x50
 800ac14:	443b      	add	r3, r7
 800ac16:	3b2c      	subs	r3, #44	; 0x2c
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	3b01      	subs	r3, #1
 800ac1c:	f003 0301 	and.w	r3, r3, #1
 800ac20:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800ac24:	009b      	lsls	r3, r3, #2
 800ac26:	4403      	add	r3, r0
 800ac28:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	6819      	ldr	r1, [r3, #0]
 800ac2e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800ac32:	4613      	mov	r3, r2
 800ac34:	005b      	lsls	r3, r3, #1
 800ac36:	4413      	add	r3, r2
 800ac38:	00db      	lsls	r3, r3, #3
 800ac3a:	3350      	adds	r3, #80	; 0x50
 800ac3c:	443b      	add	r3, r7
 800ac3e:	3b3c      	subs	r3, #60	; 0x3c
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	4299      	cmp	r1, r3
 800ac44:	d038      	beq.n	800acb8 <HAL_OSPIM_Config+0x488>
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	6859      	ldr	r1, [r3, #4]
 800ac4a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800ac4e:	4613      	mov	r3, r2
 800ac50:	005b      	lsls	r3, r3, #1
 800ac52:	4413      	add	r3, r2
 800ac54:	00db      	lsls	r3, r3, #3
 800ac56:	3350      	adds	r3, #80	; 0x50
 800ac58:	443b      	add	r3, r7
 800ac5a:	3b38      	subs	r3, #56	; 0x38
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	4299      	cmp	r1, r3
 800ac60:	d02a      	beq.n	800acb8 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	6899      	ldr	r1, [r3, #8]
 800ac66:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800ac6a:	4613      	mov	r3, r2
 800ac6c:	005b      	lsls	r3, r3, #1
 800ac6e:	4413      	add	r3, r2
 800ac70:	00db      	lsls	r3, r3, #3
 800ac72:	3350      	adds	r3, #80	; 0x50
 800ac74:	443b      	add	r3, r7
 800ac76:	3b34      	subs	r3, #52	; 0x34
 800ac78:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800ac7a:	4299      	cmp	r1, r3
 800ac7c:	d01c      	beq.n	800acb8 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	68d9      	ldr	r1, [r3, #12]
 800ac82:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800ac86:	4613      	mov	r3, r2
 800ac88:	005b      	lsls	r3, r3, #1
 800ac8a:	4413      	add	r3, r2
 800ac8c:	00db      	lsls	r3, r3, #3
 800ac8e:	3350      	adds	r3, #80	; 0x50
 800ac90:	443b      	add	r3, r7
 800ac92:	3b30      	subs	r3, #48	; 0x30
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	4299      	cmp	r1, r3
 800ac98:	d00e      	beq.n	800acb8 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	6919      	ldr	r1, [r3, #16]
 800ac9e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800aca2:	4613      	mov	r3, r2
 800aca4:	005b      	lsls	r3, r3, #1
 800aca6:	4413      	add	r3, r2
 800aca8:	00db      	lsls	r3, r3, #3
 800acaa:	3350      	adds	r3, #80	; 0x50
 800acac:	443b      	add	r3, r7
 800acae:	3b2c      	subs	r3, #44	; 0x2c
 800acb0:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800acb2:	4299      	cmp	r1, r3
 800acb4:	f040 810e 	bne.w	800aed4 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	6819      	ldr	r1, [r3, #0]
 800acbc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800acc0:	4613      	mov	r3, r2
 800acc2:	005b      	lsls	r3, r3, #1
 800acc4:	4413      	add	r3, r2
 800acc6:	00db      	lsls	r3, r3, #3
 800acc8:	3350      	adds	r3, #80	; 0x50
 800acca:	443b      	add	r3, r7
 800accc:	3b3c      	subs	r3, #60	; 0x3c
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	4299      	cmp	r1, r3
 800acd2:	d133      	bne.n	800ad3c <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	6859      	ldr	r1, [r3, #4]
 800acd8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800acdc:	4613      	mov	r3, r2
 800acde:	005b      	lsls	r3, r3, #1
 800ace0:	4413      	add	r3, r2
 800ace2:	00db      	lsls	r3, r3, #3
 800ace4:	3350      	adds	r3, #80	; 0x50
 800ace6:	443b      	add	r3, r7
 800ace8:	3b38      	subs	r3, #56	; 0x38
 800acea:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800acec:	4299      	cmp	r1, r3
 800acee:	d125      	bne.n	800ad3c <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	68d9      	ldr	r1, [r3, #12]
 800acf4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800acf8:	4613      	mov	r3, r2
 800acfa:	005b      	lsls	r3, r3, #1
 800acfc:	4413      	add	r3, r2
 800acfe:	00db      	lsls	r3, r3, #3
 800ad00:	3350      	adds	r3, #80	; 0x50
 800ad02:	443b      	add	r3, r7
 800ad04:	3b30      	subs	r3, #48	; 0x30
 800ad06:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 800ad08:	4299      	cmp	r1, r3
 800ad0a:	d117      	bne.n	800ad3c <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	6919      	ldr	r1, [r3, #16]
 800ad10:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800ad14:	4613      	mov	r3, r2
 800ad16:	005b      	lsls	r3, r3, #1
 800ad18:	4413      	add	r3, r2
 800ad1a:	00db      	lsls	r3, r3, #3
 800ad1c:	3350      	adds	r3, #80	; 0x50
 800ad1e:	443b      	add	r3, r7
 800ad20:	3b2c      	subs	r3, #44	; 0x2c
 800ad22:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 800ad24:	4299      	cmp	r1, r3
 800ad26:	d109      	bne.n	800ad3c <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 800ad28:	4b03      	ldr	r3, [pc, #12]	; (800ad38 <HAL_OSPIM_Config+0x508>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	4a02      	ldr	r2, [pc, #8]	; (800ad38 <HAL_OSPIM_Config+0x508>)
 800ad2e:	f043 0301 	orr.w	r3, r3, #1
 800ad32:	6013      	str	r3, [r2, #0]
 800ad34:	e0ce      	b.n	800aed4 <HAL_OSPIM_Config+0x6a4>
 800ad36:	bf00      	nop
 800ad38:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 800ad3c:	49bb      	ldr	r1, [pc, #748]	; (800b02c <HAL_OSPIM_Config+0x7fc>)
 800ad3e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800ad42:	4613      	mov	r3, r2
 800ad44:	005b      	lsls	r3, r3, #1
 800ad46:	4413      	add	r3, r2
 800ad48:	00db      	lsls	r3, r3, #3
 800ad4a:	3350      	adds	r3, #80	; 0x50
 800ad4c:	443b      	add	r3, r7
 800ad4e:	3b3c      	subs	r3, #60	; 0x3c
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	3b01      	subs	r3, #1
 800ad54:	009b      	lsls	r3, r3, #2
 800ad56:	440b      	add	r3, r1
 800ad58:	6859      	ldr	r1, [r3, #4]
 800ad5a:	48b4      	ldr	r0, [pc, #720]	; (800b02c <HAL_OSPIM_Config+0x7fc>)
 800ad5c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800ad60:	4613      	mov	r3, r2
 800ad62:	005b      	lsls	r3, r3, #1
 800ad64:	4413      	add	r3, r2
 800ad66:	00db      	lsls	r3, r3, #3
 800ad68:	3350      	adds	r3, #80	; 0x50
 800ad6a:	443b      	add	r3, r7
 800ad6c:	3b3c      	subs	r3, #60	; 0x3c
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	3b01      	subs	r3, #1
 800ad72:	f021 0201 	bic.w	r2, r1, #1
 800ad76:	009b      	lsls	r3, r3, #2
 800ad78:	4403      	add	r3, r0
 800ad7a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800ad7c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800ad80:	4613      	mov	r3, r2
 800ad82:	005b      	lsls	r3, r3, #1
 800ad84:	4413      	add	r3, r2
 800ad86:	00db      	lsls	r3, r3, #3
 800ad88:	3350      	adds	r3, #80	; 0x50
 800ad8a:	443b      	add	r3, r7
 800ad8c:	3b38      	subs	r3, #56	; 0x38
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d01f      	beq.n	800add4 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 800ad94:	49a5      	ldr	r1, [pc, #660]	; (800b02c <HAL_OSPIM_Config+0x7fc>)
 800ad96:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800ad9a:	4613      	mov	r3, r2
 800ad9c:	005b      	lsls	r3, r3, #1
 800ad9e:	4413      	add	r3, r2
 800ada0:	00db      	lsls	r3, r3, #3
 800ada2:	3350      	adds	r3, #80	; 0x50
 800ada4:	443b      	add	r3, r7
 800ada6:	3b38      	subs	r3, #56	; 0x38
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	3b01      	subs	r3, #1
 800adac:	009b      	lsls	r3, r3, #2
 800adae:	440b      	add	r3, r1
 800adb0:	6859      	ldr	r1, [r3, #4]
 800adb2:	489e      	ldr	r0, [pc, #632]	; (800b02c <HAL_OSPIM_Config+0x7fc>)
 800adb4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800adb8:	4613      	mov	r3, r2
 800adba:	005b      	lsls	r3, r3, #1
 800adbc:	4413      	add	r3, r2
 800adbe:	00db      	lsls	r3, r3, #3
 800adc0:	3350      	adds	r3, #80	; 0x50
 800adc2:	443b      	add	r3, r7
 800adc4:	3b38      	subs	r3, #56	; 0x38
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	3b01      	subs	r3, #1
 800adca:	f021 0210 	bic.w	r2, r1, #16
 800adce:	009b      	lsls	r3, r3, #2
 800add0:	4403      	add	r3, r0
 800add2:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 800add4:	4995      	ldr	r1, [pc, #596]	; (800b02c <HAL_OSPIM_Config+0x7fc>)
 800add6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800adda:	4613      	mov	r3, r2
 800addc:	005b      	lsls	r3, r3, #1
 800adde:	4413      	add	r3, r2
 800ade0:	00db      	lsls	r3, r3, #3
 800ade2:	3350      	adds	r3, #80	; 0x50
 800ade4:	443b      	add	r3, r7
 800ade6:	3b34      	subs	r3, #52	; 0x34
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	3b01      	subs	r3, #1
 800adec:	009b      	lsls	r3, r3, #2
 800adee:	440b      	add	r3, r1
 800adf0:	6859      	ldr	r1, [r3, #4]
 800adf2:	488e      	ldr	r0, [pc, #568]	; (800b02c <HAL_OSPIM_Config+0x7fc>)
 800adf4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800adf8:	4613      	mov	r3, r2
 800adfa:	005b      	lsls	r3, r3, #1
 800adfc:	4413      	add	r3, r2
 800adfe:	00db      	lsls	r3, r3, #3
 800ae00:	3350      	adds	r3, #80	; 0x50
 800ae02:	443b      	add	r3, r7
 800ae04:	3b34      	subs	r3, #52	; 0x34
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	3b01      	subs	r3, #1
 800ae0a:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800ae0e:	009b      	lsls	r3, r3, #2
 800ae10:	4403      	add	r3, r0
 800ae12:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800ae14:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800ae18:	4613      	mov	r3, r2
 800ae1a:	005b      	lsls	r3, r3, #1
 800ae1c:	4413      	add	r3, r2
 800ae1e:	00db      	lsls	r3, r3, #3
 800ae20:	3350      	adds	r3, #80	; 0x50
 800ae22:	443b      	add	r3, r7
 800ae24:	3b30      	subs	r3, #48	; 0x30
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d023      	beq.n	800ae74 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800ae2c:	497f      	ldr	r1, [pc, #508]	; (800b02c <HAL_OSPIM_Config+0x7fc>)
 800ae2e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800ae32:	4613      	mov	r3, r2
 800ae34:	005b      	lsls	r3, r3, #1
 800ae36:	4413      	add	r3, r2
 800ae38:	00db      	lsls	r3, r3, #3
 800ae3a:	3350      	adds	r3, #80	; 0x50
 800ae3c:	443b      	add	r3, r7
 800ae3e:	3b30      	subs	r3, #48	; 0x30
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	3b01      	subs	r3, #1
 800ae44:	f003 0301 	and.w	r3, r3, #1
 800ae48:	009b      	lsls	r3, r3, #2
 800ae4a:	440b      	add	r3, r1
 800ae4c:	6859      	ldr	r1, [r3, #4]
 800ae4e:	4877      	ldr	r0, [pc, #476]	; (800b02c <HAL_OSPIM_Config+0x7fc>)
 800ae50:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800ae54:	4613      	mov	r3, r2
 800ae56:	005b      	lsls	r3, r3, #1
 800ae58:	4413      	add	r3, r2
 800ae5a:	00db      	lsls	r3, r3, #3
 800ae5c:	3350      	adds	r3, #80	; 0x50
 800ae5e:	443b      	add	r3, r7
 800ae60:	3b30      	subs	r3, #48	; 0x30
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	3b01      	subs	r3, #1
 800ae66:	f003 0301 	and.w	r3, r3, #1
 800ae6a:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800ae6e:	009b      	lsls	r3, r3, #2
 800ae70:	4403      	add	r3, r0
 800ae72:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800ae74:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800ae78:	4613      	mov	r3, r2
 800ae7a:	005b      	lsls	r3, r3, #1
 800ae7c:	4413      	add	r3, r2
 800ae7e:	00db      	lsls	r3, r3, #3
 800ae80:	3350      	adds	r3, #80	; 0x50
 800ae82:	443b      	add	r3, r7
 800ae84:	3b2c      	subs	r3, #44	; 0x2c
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d023      	beq.n	800aed4 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800ae8c:	4967      	ldr	r1, [pc, #412]	; (800b02c <HAL_OSPIM_Config+0x7fc>)
 800ae8e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800ae92:	4613      	mov	r3, r2
 800ae94:	005b      	lsls	r3, r3, #1
 800ae96:	4413      	add	r3, r2
 800ae98:	00db      	lsls	r3, r3, #3
 800ae9a:	3350      	adds	r3, #80	; 0x50
 800ae9c:	443b      	add	r3, r7
 800ae9e:	3b2c      	subs	r3, #44	; 0x2c
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	3b01      	subs	r3, #1
 800aea4:	f003 0301 	and.w	r3, r3, #1
 800aea8:	009b      	lsls	r3, r3, #2
 800aeaa:	440b      	add	r3, r1
 800aeac:	6859      	ldr	r1, [r3, #4]
 800aeae:	485f      	ldr	r0, [pc, #380]	; (800b02c <HAL_OSPIM_Config+0x7fc>)
 800aeb0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800aeb4:	4613      	mov	r3, r2
 800aeb6:	005b      	lsls	r3, r3, #1
 800aeb8:	4413      	add	r3, r2
 800aeba:	00db      	lsls	r3, r3, #3
 800aebc:	3350      	adds	r3, #80	; 0x50
 800aebe:	443b      	add	r3, r7
 800aec0:	3b2c      	subs	r3, #44	; 0x2c
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	3b01      	subs	r3, #1
 800aec6:	f003 0301 	and.w	r3, r3, #1
 800aeca:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800aece:	009b      	lsls	r3, r3, #2
 800aed0:	4403      	add	r3, r0
 800aed2:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 800aed4:	4a55      	ldr	r2, [pc, #340]	; (800b02c <HAL_OSPIM_Config+0x7fc>)
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	689b      	ldr	r3, [r3, #8]
 800aeda:	3b01      	subs	r3, #1
 800aedc:	009b      	lsls	r3, r3, #2
 800aede:	4413      	add	r3, r2
 800aee0:	685b      	ldr	r3, [r3, #4]
 800aee2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aee8:	025b      	lsls	r3, r3, #9
 800aeea:	431a      	orrs	r2, r3
 800aeec:	494f      	ldr	r1, [pc, #316]	; (800b02c <HAL_OSPIM_Config+0x7fc>)
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	689b      	ldr	r3, [r3, #8]
 800aef2:	3b01      	subs	r3, #1
 800aef4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aef8:	009b      	lsls	r3, r3, #2
 800aefa:	440b      	add	r3, r1
 800aefc:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	695b      	ldr	r3, [r3, #20]
 800af02:	1e5a      	subs	r2, r3, #1
 800af04:	4b49      	ldr	r3, [pc, #292]	; (800b02c <HAL_OSPIM_Config+0x7fc>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	0c1b      	lsrs	r3, r3, #16
 800af0a:	b2db      	uxtb	r3, r3
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d90a      	bls.n	800af26 <HAL_OSPIM_Config+0x6f6>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 800af10:	4b46      	ldr	r3, [pc, #280]	; (800b02c <HAL_OSPIM_Config+0x7fc>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	695b      	ldr	r3, [r3, #20]
 800af1c:	3b01      	subs	r3, #1
 800af1e:	041b      	lsls	r3, r3, #16
 800af20:	4942      	ldr	r1, [pc, #264]	; (800b02c <HAL_OSPIM_Config+0x7fc>)
 800af22:	4313      	orrs	r3, r2
 800af24:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800af26:	4b41      	ldr	r3, [pc, #260]	; (800b02c <HAL_OSPIM_Config+0x7fc>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f003 0301 	and.w	r3, r3, #1
 800af2e:	2b00      	cmp	r3, #0
 800af30:	f000 809a 	beq.w	800b068 <HAL_OSPIM_Config+0x838>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 800af34:	4a3d      	ldr	r2, [pc, #244]	; (800b02c <HAL_OSPIM_Config+0x7fc>)
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	3b01      	subs	r3, #1
 800af3c:	009b      	lsls	r3, r3, #2
 800af3e:	4413      	add	r3, r2
 800af40:	685b      	ldr	r3, [r3, #4]
 800af42:	f023 0203 	bic.w	r2, r3, #3
 800af46:	4939      	ldr	r1, [pc, #228]	; (800b02c <HAL_OSPIM_Config+0x7fc>)
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	3b01      	subs	r3, #1
 800af4e:	f042 0201 	orr.w	r2, r2, #1
 800af52:	009b      	lsls	r3, r3, #2
 800af54:	440b      	add	r3, r1
 800af56:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	685b      	ldr	r3, [r3, #4]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d011      	beq.n	800af84 <HAL_OSPIM_Config+0x754>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 800af60:	4a32      	ldr	r2, [pc, #200]	; (800b02c <HAL_OSPIM_Config+0x7fc>)
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	685b      	ldr	r3, [r3, #4]
 800af66:	3b01      	subs	r3, #1
 800af68:	009b      	lsls	r3, r3, #2
 800af6a:	4413      	add	r3, r2
 800af6c:	685b      	ldr	r3, [r3, #4]
 800af6e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800af72:	492e      	ldr	r1, [pc, #184]	; (800b02c <HAL_OSPIM_Config+0x7fc>)
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	685b      	ldr	r3, [r3, #4]
 800af78:	3b01      	subs	r3, #1
 800af7a:	f042 0210 	orr.w	r2, r2, #16
 800af7e:	009b      	lsls	r3, r3, #2
 800af80:	440b      	add	r3, r1
 800af82:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	68db      	ldr	r3, [r3, #12]
 800af88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d016      	beq.n	800afbe <HAL_OSPIM_Config+0x78e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800af90:	4a26      	ldr	r2, [pc, #152]	; (800b02c <HAL_OSPIM_Config+0x7fc>)
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	68db      	ldr	r3, [r3, #12]
 800af96:	3b01      	subs	r3, #1
 800af98:	f003 0301 	and.w	r3, r3, #1
 800af9c:	009b      	lsls	r3, r3, #2
 800af9e:	4413      	add	r3, r2
 800afa0:	685b      	ldr	r3, [r3, #4]
 800afa2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800afa6:	4921      	ldr	r1, [pc, #132]	; (800b02c <HAL_OSPIM_Config+0x7fc>)
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	68db      	ldr	r3, [r3, #12]
 800afac:	3b01      	subs	r3, #1
 800afae:	f003 0301 	and.w	r3, r3, #1
 800afb2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800afb6:	009b      	lsls	r3, r3, #2
 800afb8:	440b      	add	r3, r1
 800afba:	605a      	str	r2, [r3, #4]
 800afbc:	e019      	b.n	800aff2 <HAL_OSPIM_Config+0x7c2>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	68db      	ldr	r3, [r3, #12]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d015      	beq.n	800aff2 <HAL_OSPIM_Config+0x7c2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800afc6:	4a19      	ldr	r2, [pc, #100]	; (800b02c <HAL_OSPIM_Config+0x7fc>)
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	68db      	ldr	r3, [r3, #12]
 800afcc:	3b01      	subs	r3, #1
 800afce:	f003 0301 	and.w	r3, r3, #1
 800afd2:	009b      	lsls	r3, r3, #2
 800afd4:	4413      	add	r3, r2
 800afd6:	685b      	ldr	r3, [r3, #4]
 800afd8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800afdc:	4913      	ldr	r1, [pc, #76]	; (800b02c <HAL_OSPIM_Config+0x7fc>)
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	68db      	ldr	r3, [r3, #12]
 800afe2:	3b01      	subs	r3, #1
 800afe4:	f003 0301 	and.w	r3, r3, #1
 800afe8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800afec:	009b      	lsls	r3, r3, #2
 800afee:	440b      	add	r3, r1
 800aff0:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800aff2:	68bb      	ldr	r3, [r7, #8]
 800aff4:	691b      	ldr	r3, [r3, #16]
 800aff6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800affa:	2b00      	cmp	r3, #0
 800affc:	d018      	beq.n	800b030 <HAL_OSPIM_Config+0x800>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800affe:	4a0b      	ldr	r2, [pc, #44]	; (800b02c <HAL_OSPIM_Config+0x7fc>)
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	691b      	ldr	r3, [r3, #16]
 800b004:	3b01      	subs	r3, #1
 800b006:	f003 0301 	and.w	r3, r3, #1
 800b00a:	009b      	lsls	r3, r3, #2
 800b00c:	4413      	add	r3, r2
 800b00e:	685b      	ldr	r3, [r3, #4]
 800b010:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800b014:	4905      	ldr	r1, [pc, #20]	; (800b02c <HAL_OSPIM_Config+0x7fc>)
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	691b      	ldr	r3, [r3, #16]
 800b01a:	3b01      	subs	r3, #1
 800b01c:	f003 0301 	and.w	r3, r3, #1
 800b020:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 800b024:	009b      	lsls	r3, r3, #2
 800b026:	440b      	add	r3, r1
 800b028:	605a      	str	r2, [r3, #4]
 800b02a:	e0c5      	b.n	800b1b8 <HAL_OSPIM_Config+0x988>
 800b02c:	5200b400 	.word	0x5200b400
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	691b      	ldr	r3, [r3, #16]
 800b034:	2b00      	cmp	r3, #0
 800b036:	f000 80bf 	beq.w	800b1b8 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800b03a:	4a6e      	ldr	r2, [pc, #440]	; (800b1f4 <HAL_OSPIM_Config+0x9c4>)
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	691b      	ldr	r3, [r3, #16]
 800b040:	3b01      	subs	r3, #1
 800b042:	f003 0301 	and.w	r3, r3, #1
 800b046:	009b      	lsls	r3, r3, #2
 800b048:	4413      	add	r3, r2
 800b04a:	685b      	ldr	r3, [r3, #4]
 800b04c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800b050:	4968      	ldr	r1, [pc, #416]	; (800b1f4 <HAL_OSPIM_Config+0x9c4>)
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	691b      	ldr	r3, [r3, #16]
 800b056:	3b01      	subs	r3, #1
 800b058:	f003 0301 	and.w	r3, r3, #1
 800b05c:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 800b060:	009b      	lsls	r3, r3, #2
 800b062:	440b      	add	r3, r1
 800b064:	605a      	str	r2, [r3, #4]
 800b066:	e0a7      	b.n	800b1b8 <HAL_OSPIM_Config+0x988>
         /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 800b068:	4a62      	ldr	r2, [pc, #392]	; (800b1f4 <HAL_OSPIM_Config+0x9c4>)
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	3b01      	subs	r3, #1
 800b070:	009b      	lsls	r3, r3, #2
 800b072:	4413      	add	r3, r2
 800b074:	685b      	ldr	r3, [r3, #4]
 800b076:	f023 0203 	bic.w	r2, r3, #3
 800b07a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b07c:	005b      	lsls	r3, r3, #1
 800b07e:	431a      	orrs	r2, r3
 800b080:	495c      	ldr	r1, [pc, #368]	; (800b1f4 <HAL_OSPIM_Config+0x9c4>)
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	3b01      	subs	r3, #1
 800b088:	f042 0201 	orr.w	r2, r2, #1
 800b08c:	009b      	lsls	r3, r3, #2
 800b08e:	440b      	add	r3, r1
 800b090:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	685b      	ldr	r3, [r3, #4]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d014      	beq.n	800b0c4 <HAL_OSPIM_Config+0x894>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 800b09a:	4a56      	ldr	r2, [pc, #344]	; (800b1f4 <HAL_OSPIM_Config+0x9c4>)
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	685b      	ldr	r3, [r3, #4]
 800b0a0:	3b01      	subs	r3, #1
 800b0a2:	009b      	lsls	r3, r3, #2
 800b0a4:	4413      	add	r3, r2
 800b0a6:	685b      	ldr	r3, [r3, #4]
 800b0a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b0ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b0ae:	015b      	lsls	r3, r3, #5
 800b0b0:	431a      	orrs	r2, r3
 800b0b2:	4950      	ldr	r1, [pc, #320]	; (800b1f4 <HAL_OSPIM_Config+0x9c4>)
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	685b      	ldr	r3, [r3, #4]
 800b0b8:	3b01      	subs	r3, #1
 800b0ba:	f042 0210 	orr.w	r2, r2, #16
 800b0be:	009b      	lsls	r3, r3, #2
 800b0c0:	440b      	add	r3, r1
 800b0c2:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	68db      	ldr	r3, [r3, #12]
 800b0c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d019      	beq.n	800b104 <HAL_OSPIM_Config+0x8d4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800b0d0:	4a48      	ldr	r2, [pc, #288]	; (800b1f4 <HAL_OSPIM_Config+0x9c4>)
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	68db      	ldr	r3, [r3, #12]
 800b0d6:	3b01      	subs	r3, #1
 800b0d8:	f003 0301 	and.w	r3, r3, #1
 800b0dc:	009b      	lsls	r3, r3, #2
 800b0de:	4413      	add	r3, r2
 800b0e0:	685b      	ldr	r3, [r3, #4]
 800b0e2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800b0e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b0e8:	049b      	lsls	r3, r3, #18
 800b0ea:	431a      	orrs	r2, r3
 800b0ec:	4941      	ldr	r1, [pc, #260]	; (800b1f4 <HAL_OSPIM_Config+0x9c4>)
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	68db      	ldr	r3, [r3, #12]
 800b0f2:	3b01      	subs	r3, #1
 800b0f4:	f003 0301 	and.w	r3, r3, #1
 800b0f8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b0fc:	009b      	lsls	r3, r3, #2
 800b0fe:	440b      	add	r3, r1
 800b100:	605a      	str	r2, [r3, #4]
 800b102:	e01c      	b.n	800b13e <HAL_OSPIM_Config+0x90e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	68db      	ldr	r3, [r3, #12]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d018      	beq.n	800b13e <HAL_OSPIM_Config+0x90e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800b10c:	4a39      	ldr	r2, [pc, #228]	; (800b1f4 <HAL_OSPIM_Config+0x9c4>)
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	68db      	ldr	r3, [r3, #12]
 800b112:	3b01      	subs	r3, #1
 800b114:	f003 0301 	and.w	r3, r3, #1
 800b118:	009b      	lsls	r3, r3, #2
 800b11a:	4413      	add	r3, r2
 800b11c:	685b      	ldr	r3, [r3, #4]
 800b11e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800b122:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b124:	069b      	lsls	r3, r3, #26
 800b126:	431a      	orrs	r2, r3
 800b128:	4932      	ldr	r1, [pc, #200]	; (800b1f4 <HAL_OSPIM_Config+0x9c4>)
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	68db      	ldr	r3, [r3, #12]
 800b12e:	3b01      	subs	r3, #1
 800b130:	f003 0301 	and.w	r3, r3, #1
 800b134:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800b138:	009b      	lsls	r3, r3, #2
 800b13a:	440b      	add	r3, r1
 800b13c:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	691b      	ldr	r3, [r3, #16]
 800b142:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b146:	2b00      	cmp	r3, #0
 800b148:	d019      	beq.n	800b17e <HAL_OSPIM_Config+0x94e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800b14a:	4a2a      	ldr	r2, [pc, #168]	; (800b1f4 <HAL_OSPIM_Config+0x9c4>)
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	691b      	ldr	r3, [r3, #16]
 800b150:	3b01      	subs	r3, #1
 800b152:	f003 0301 	and.w	r3, r3, #1
 800b156:	009b      	lsls	r3, r3, #2
 800b158:	4413      	add	r3, r2
 800b15a:	685b      	ldr	r3, [r3, #4]
 800b15c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800b160:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b162:	049b      	lsls	r3, r3, #18
 800b164:	431a      	orrs	r2, r3
 800b166:	4923      	ldr	r1, [pc, #140]	; (800b1f4 <HAL_OSPIM_Config+0x9c4>)
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	691b      	ldr	r3, [r3, #16]
 800b16c:	3b01      	subs	r3, #1
 800b16e:	f003 0301 	and.w	r3, r3, #1
 800b172:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 800b176:	009b      	lsls	r3, r3, #2
 800b178:	440b      	add	r3, r1
 800b17a:	605a      	str	r2, [r3, #4]
 800b17c:	e01c      	b.n	800b1b8 <HAL_OSPIM_Config+0x988>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	691b      	ldr	r3, [r3, #16]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d018      	beq.n	800b1b8 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800b186:	4a1b      	ldr	r2, [pc, #108]	; (800b1f4 <HAL_OSPIM_Config+0x9c4>)
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	691b      	ldr	r3, [r3, #16]
 800b18c:	3b01      	subs	r3, #1
 800b18e:	f003 0301 	and.w	r3, r3, #1
 800b192:	009b      	lsls	r3, r3, #2
 800b194:	4413      	add	r3, r2
 800b196:	685b      	ldr	r3, [r3, #4]
 800b198:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800b19c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b19e:	069b      	lsls	r3, r3, #26
 800b1a0:	431a      	orrs	r2, r3
 800b1a2:	4914      	ldr	r1, [pc, #80]	; (800b1f4 <HAL_OSPIM_Config+0x9c4>)
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	691b      	ldr	r3, [r3, #16]
 800b1a8:	3b01      	subs	r3, #1
 800b1aa:	f003 0301 	and.w	r3, r3, #1
 800b1ae:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 800b1b2:	009b      	lsls	r3, r3, #2
 800b1b4:	440b      	add	r3, r1
 800b1b6:	605a      	str	r2, [r3, #4]
         /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 800b1b8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800b1bc:	f003 0301 	and.w	r3, r3, #1
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d005      	beq.n	800b1d0 <HAL_OSPIM_Config+0x9a0>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800b1c4:	4b0c      	ldr	r3, [pc, #48]	; (800b1f8 <HAL_OSPIM_Config+0x9c8>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	4a0b      	ldr	r2, [pc, #44]	; (800b1f8 <HAL_OSPIM_Config+0x9c8>)
 800b1ca:	f043 0301 	orr.w	r3, r3, #1
 800b1ce:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 800b1d0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800b1d4:	f003 0302 	and.w	r3, r3, #2
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d005      	beq.n	800b1e8 <HAL_OSPIM_Config+0x9b8>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800b1dc:	4b07      	ldr	r3, [pc, #28]	; (800b1fc <HAL_OSPIM_Config+0x9cc>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	4a06      	ldr	r2, [pc, #24]	; (800b1fc <HAL_OSPIM_Config+0x9cc>)
 800b1e2:	f043 0301 	orr.w	r3, r3, #1
 800b1e6:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 800b1e8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	3750      	adds	r7, #80	; 0x50
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}
 800b1f4:	5200b400 	.word	0x5200b400
 800b1f8:	52005000 	.word	0x52005000
 800b1fc:	5200a000 	.word	0x5200a000

0800b200 <OSPI_DMAAbortCplt>:
  * @brief  DMA OSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void OSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b084      	sub	sp, #16
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
  OSPI_HandleTypeDef* hospi = ( OSPI_HandleTypeDef* )(hmdma->Parent);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b20c:	60fb      	str	r3, [r7, #12]
  hospi->XferCount = 0;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	2200      	movs	r2, #0
 800b212:	649a      	str	r2, [r3, #72]	; 0x48

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b218:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b21c:	d122      	bne.n	800b264 <OSPI_DMAAbortCplt+0x64>
  {
    /* DMA abort called by OctoSPI abort */
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	6a1b      	ldr	r3, [r3, #32]
 800b224:	f003 0320 	and.w	r3, r3, #32
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d014      	beq.n	800b256 <OSPI_DMAAbortCplt+0x56>
    {
      /* Clear transfer complete flag */
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	2202      	movs	r2, #2
 800b232:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enable the transfer complete interrupts */
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	681a      	ldr	r2, [r3, #0]
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800b242:	601a      	str	r2, [r3, #0]

      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	681a      	ldr	r2, [r3, #0]
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f042 0202 	orr.w	r2, r2, #2
 800b252:	601a      	str	r2, [r3, #0]
    hospi->ErrorCallback(hospi);
#else
    HAL_OSPI_ErrorCallback(hospi);
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
}
 800b254:	e00c      	b.n	800b270 <OSPI_DMAAbortCplt+0x70>
      hospi->State = HAL_OSPI_STATE_READY;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	2202      	movs	r2, #2
 800b25a:	651a      	str	r2, [r3, #80]	; 0x50
      HAL_OSPI_AbortCpltCallback(hospi);
 800b25c:	68f8      	ldr	r0, [r7, #12]
 800b25e:	f7ff fa91 	bl	800a784 <HAL_OSPI_AbortCpltCallback>
}
 800b262:	e005      	b.n	800b270 <OSPI_DMAAbortCplt+0x70>
    hospi->State = HAL_OSPI_STATE_READY;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	2202      	movs	r2, #2
 800b268:	651a      	str	r2, [r3, #80]	; 0x50
    HAL_OSPI_ErrorCallback(hospi);
 800b26a:	68f8      	ldr	r0, [r7, #12]
 800b26c:	f7ff fa80 	bl	800a770 <HAL_OSPI_ErrorCallback>
}
 800b270:	bf00      	nop
 800b272:	3710      	adds	r7, #16
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}

0800b278 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b084      	sub	sp, #16
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	60f8      	str	r0, [r7, #12]
 800b280:	60b9      	str	r1, [r7, #8]
 800b282:	603b      	str	r3, [r7, #0]
 800b284:	4613      	mov	r3, r2
 800b286:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800b288:	e01a      	b.n	800b2c0 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b28a:	69bb      	ldr	r3, [r7, #24]
 800b28c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b290:	d016      	beq.n	800b2c0 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b292:	f7f8 fef3 	bl	800407c <HAL_GetTick>
 800b296:	4602      	mov	r2, r0
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	1ad3      	subs	r3, r2, r3
 800b29c:	69ba      	ldr	r2, [r7, #24]
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	d302      	bcc.n	800b2a8 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800b2a2:	69bb      	ldr	r3, [r7, #24]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d10b      	bne.n	800b2c0 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b2ae:	651a      	str	r2, [r3, #80]	; 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2b4:	f043 0201 	orr.w	r2, r3, #1
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	655a      	str	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 800b2bc:	2301      	movs	r3, #1
 800b2be:	e00e      	b.n	800b2de <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	6a1a      	ldr	r2, [r3, #32]
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	4013      	ands	r3, r2
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	bf14      	ite	ne
 800b2ce:	2301      	movne	r3, #1
 800b2d0:	2300      	moveq	r3, #0
 800b2d2:	b2db      	uxtb	r3, r3
 800b2d4:	461a      	mov	r2, r3
 800b2d6:	79fb      	ldrb	r3, [r7, #7]
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d1d6      	bne.n	800b28a <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b2dc:	2300      	movs	r3, #0
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3710      	adds	r7, #16
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}
	...

0800b2e8 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b089      	sub	sp, #36	; 0x24
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
 800b2f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	681a      	ldr	r2, [r3, #0]
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800b304:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	689b      	ldr	r3, [r3, #8]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d10a      	bne.n	800b324 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	685a      	ldr	r2, [r3, #4]
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	430a      	orrs	r2, r1
 800b322:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	2b02      	cmp	r3, #2
 800b32a:	d114      	bne.n	800b356 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800b334:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800b33e:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800b348:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800b352:	60fb      	str	r3, [r7, #12]
 800b354:	e02c      	b.n	800b3b0 <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	2b03      	cmp	r3, #3
 800b35c:	d114      	bne.n	800b388 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800b366:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800b370:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b37a:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800b384:	60fb      	str	r3, [r7, #12]
 800b386:	e013      	b.n	800b3b0 <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b390:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800b39a:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800b3a4:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800b3ae:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3b8:	431a      	orrs	r2, r3
 800b3ba:	69bb      	ldr	r3, [r7, #24]
 800b3bc:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d012      	beq.n	800b3ec <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 800b3ce:	69bb      	ldr	r3, [r7, #24]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3de:	4319      	orrs	r1, r3
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3e4:	430b      	orrs	r3, r1
 800b3e6:	431a      	orrs	r2, r3
 800b3e8:	69bb      	ldr	r3, [r7, #24]
 800b3ea:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	f023 021f 	bic.w	r2, r3, #31
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3f8:	431a      	orrs	r2, r3
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b402:	2b00      	cmp	r3, #0
 800b404:	d009      	beq.n	800b41a <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d105      	bne.n	800b41a <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	3a01      	subs	r2, #1
 800b418:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	68db      	ldr	r3, [r3, #12]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	f000 8095 	beq.w	800b54e <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	69db      	ldr	r3, [r3, #28]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d053      	beq.n	800b4d4 <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b430:	2b00      	cmp	r3, #0
 800b432:	d01e      	beq.n	800b472 <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800b434:	69bb      	ldr	r3, [r7, #24]
 800b436:	681a      	ldr	r2, [r3, #0]
 800b438:	4b64      	ldr	r3, [pc, #400]	; (800b5cc <OSPI_ConfigCmd+0x2e4>)
 800b43a:	4013      	ands	r3, r2
 800b43c:	683a      	ldr	r2, [r7, #0]
 800b43e:	68d1      	ldr	r1, [r2, #12]
 800b440:	683a      	ldr	r2, [r7, #0]
 800b442:	6952      	ldr	r2, [r2, #20]
 800b444:	4311      	orrs	r1, r2
 800b446:	683a      	ldr	r2, [r7, #0]
 800b448:	6912      	ldr	r2, [r2, #16]
 800b44a:	4311      	orrs	r1, r2
 800b44c:	683a      	ldr	r2, [r7, #0]
 800b44e:	69d2      	ldr	r2, [r2, #28]
 800b450:	4311      	orrs	r1, r2
 800b452:	683a      	ldr	r2, [r7, #0]
 800b454:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b456:	4311      	orrs	r1, r2
 800b458:	683a      	ldr	r2, [r7, #0]
 800b45a:	6a12      	ldr	r2, [r2, #32]
 800b45c:	4311      	orrs	r1, r2
 800b45e:	683a      	ldr	r2, [r7, #0]
 800b460:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b462:	4311      	orrs	r1, r2
 800b464:	683a      	ldr	r2, [r7, #0]
 800b466:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b468:	430a      	orrs	r2, r1
 800b46a:	431a      	orrs	r2, r3
 800b46c:	69bb      	ldr	r3, [r7, #24]
 800b46e:	601a      	str	r2, [r3, #0]
 800b470:	e026      	b.n	800b4c0 <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800b472:	69bb      	ldr	r3, [r7, #24]
 800b474:	681a      	ldr	r2, [r3, #0]
 800b476:	4b56      	ldr	r3, [pc, #344]	; (800b5d0 <OSPI_ConfigCmd+0x2e8>)
 800b478:	4013      	ands	r3, r2
 800b47a:	683a      	ldr	r2, [r7, #0]
 800b47c:	68d1      	ldr	r1, [r2, #12]
 800b47e:	683a      	ldr	r2, [r7, #0]
 800b480:	6952      	ldr	r2, [r2, #20]
 800b482:	4311      	orrs	r1, r2
 800b484:	683a      	ldr	r2, [r7, #0]
 800b486:	6912      	ldr	r2, [r2, #16]
 800b488:	4311      	orrs	r1, r2
 800b48a:	683a      	ldr	r2, [r7, #0]
 800b48c:	69d2      	ldr	r2, [r2, #28]
 800b48e:	4311      	orrs	r1, r2
 800b490:	683a      	ldr	r2, [r7, #0]
 800b492:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b494:	4311      	orrs	r1, r2
 800b496:	683a      	ldr	r2, [r7, #0]
 800b498:	6a12      	ldr	r2, [r2, #32]
 800b49a:	430a      	orrs	r2, r1
 800b49c:	431a      	orrs	r2, r3
 800b49e:	69bb      	ldr	r3, [r7, #24]
 800b4a0:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b4aa:	d109      	bne.n	800b4c0 <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800b4b0:	2b08      	cmp	r3, #8
 800b4b2:	d105      	bne.n	800b4c0 <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800b4b4:	69bb      	ldr	r3, [r7, #24]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b4bc:	69bb      	ldr	r3, [r7, #24]
 800b4be:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	689a      	ldr	r2, [r3, #8]
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	683a      	ldr	r2, [r7, #0]
 800b4ce:	6992      	ldr	r2, [r2, #24]
 800b4d0:	649a      	str	r2, [r3, #72]	; 0x48
 800b4d2:	e074      	b.n	800b5be <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d015      	beq.n	800b508 <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 800b4dc:	69bb      	ldr	r3, [r7, #24]
 800b4de:	681a      	ldr	r2, [r3, #0]
 800b4e0:	4b3c      	ldr	r3, [pc, #240]	; (800b5d4 <OSPI_ConfigCmd+0x2ec>)
 800b4e2:	4013      	ands	r3, r2
 800b4e4:	683a      	ldr	r2, [r7, #0]
 800b4e6:	68d1      	ldr	r1, [r2, #12]
 800b4e8:	683a      	ldr	r2, [r7, #0]
 800b4ea:	6952      	ldr	r2, [r2, #20]
 800b4ec:	4311      	orrs	r1, r2
 800b4ee:	683a      	ldr	r2, [r7, #0]
 800b4f0:	6912      	ldr	r2, [r2, #16]
 800b4f2:	4311      	orrs	r1, r2
 800b4f4:	683a      	ldr	r2, [r7, #0]
 800b4f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b4f8:	4311      	orrs	r1, r2
 800b4fa:	683a      	ldr	r2, [r7, #0]
 800b4fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b4fe:	430a      	orrs	r2, r1
 800b500:	431a      	orrs	r2, r3
 800b502:	69bb      	ldr	r3, [r7, #24]
 800b504:	601a      	str	r2, [r3, #0]
 800b506:	e01d      	b.n	800b544 <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 800b508:	69bb      	ldr	r3, [r7, #24]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	68d9      	ldr	r1, [r3, #12]
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	695b      	ldr	r3, [r3, #20]
 800b518:	4319      	orrs	r1, r3
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	691b      	ldr	r3, [r3, #16]
 800b51e:	430b      	orrs	r3, r1
 800b520:	431a      	orrs	r2, r3
 800b522:	69bb      	ldr	r3, [r7, #24]
 800b524:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b52a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b52e:	d109      	bne.n	800b544 <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800b534:	2b08      	cmp	r3, #8
 800b536:	d105      	bne.n	800b544 <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800b538:	69bb      	ldr	r3, [r7, #24]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b540:	69bb      	ldr	r3, [r7, #24]
 800b542:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	689a      	ldr	r2, [r3, #8]
 800b548:	693b      	ldr	r3, [r7, #16]
 800b54a:	601a      	str	r2, [r3, #0]
 800b54c:	e037      	b.n	800b5be <OSPI_ConfigCmd+0x2d6>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	69db      	ldr	r3, [r3, #28]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d02e      	beq.n	800b5b4 <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d015      	beq.n	800b58a <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 800b55e:	69bb      	ldr	r3, [r7, #24]
 800b560:	681a      	ldr	r2, [r3, #0]
 800b562:	4b1d      	ldr	r3, [pc, #116]	; (800b5d8 <OSPI_ConfigCmd+0x2f0>)
 800b564:	4013      	ands	r3, r2
 800b566:	683a      	ldr	r2, [r7, #0]
 800b568:	69d1      	ldr	r1, [r2, #28]
 800b56a:	683a      	ldr	r2, [r7, #0]
 800b56c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b56e:	4311      	orrs	r1, r2
 800b570:	683a      	ldr	r2, [r7, #0]
 800b572:	6a12      	ldr	r2, [r2, #32]
 800b574:	4311      	orrs	r1, r2
 800b576:	683a      	ldr	r2, [r7, #0]
 800b578:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b57a:	4311      	orrs	r1, r2
 800b57c:	683a      	ldr	r2, [r7, #0]
 800b57e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b580:	430a      	orrs	r2, r1
 800b582:	431a      	orrs	r2, r3
 800b584:	69bb      	ldr	r3, [r7, #24]
 800b586:	601a      	str	r2, [r3, #0]
 800b588:	e00e      	b.n	800b5a8 <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 800b58a:	69bb      	ldr	r3, [r7, #24]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	69d9      	ldr	r1, [r3, #28]
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b59a:	4319      	orrs	r1, r3
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	6a1b      	ldr	r3, [r3, #32]
 800b5a0:	430b      	orrs	r3, r1
 800b5a2:	431a      	orrs	r2, r3
 800b5a4:	69bb      	ldr	r3, [r7, #24]
 800b5a6:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	683a      	ldr	r2, [r7, #0]
 800b5ae:	6992      	ldr	r2, [r2, #24]
 800b5b0:	649a      	str	r2, [r3, #72]	; 0x48
 800b5b2:	e004      	b.n	800b5be <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2208      	movs	r2, #8
 800b5bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }

  /* Return function status */
  return status;
 800b5be:	7ffb      	ldrb	r3, [r7, #31]
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3724      	adds	r7, #36	; 0x24
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr
 800b5cc:	f0ffc0c0 	.word	0xf0ffc0c0
 800b5d0:	ffffc0c0 	.word	0xffffc0c0
 800b5d4:	f0ffffc0 	.word	0xf0ffffc0
 800b5d8:	f0ffc0ff 	.word	0xf0ffc0ff

0800b5dc <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b087      	sub	sp, #28
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	6039      	str	r1, [r7, #0]
 800b5e6:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 800b5f0:	79fb      	ldrb	r3, [r7, #7]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d005      	beq.n	800b602 <OSPIM_GetConfig+0x26>
 800b5f6:	79fb      	ldrb	r3, [r7, #7]
 800b5f8:	2b02      	cmp	r3, #2
 800b5fa:	d802      	bhi.n	800b602 <OSPIM_GetConfig+0x26>
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d102      	bne.n	800b608 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800b602:	2301      	movs	r3, #1
 800b604:	75fb      	strb	r3, [r7, #23]
 800b606:	e098      	b.n	800b73a <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	2200      	movs	r2, #0
 800b60c:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	2200      	movs	r2, #0
 800b612:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	2200      	movs	r2, #0
 800b618:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	2200      	movs	r2, #0
 800b61e:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	2200      	movs	r2, #0
 800b624:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 800b626:	79fb      	ldrb	r3, [r7, #7]
 800b628:	2b02      	cmp	r3, #2
 800b62a:	d10b      	bne.n	800b644 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 800b62c:	4b46      	ldr	r3, [pc, #280]	; (800b748 <OSPIM_GetConfig+0x16c>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f003 0301 	and.w	r3, r3, #1
 800b634:	2b00      	cmp	r3, #0
 800b636:	d102      	bne.n	800b63e <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 800b638:	4b44      	ldr	r3, [pc, #272]	; (800b74c <OSPIM_GetConfig+0x170>)
 800b63a:	613b      	str	r3, [r7, #16]
 800b63c:	e002      	b.n	800b644 <OSPIM_GetConfig+0x68>
               | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 800b63e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b642:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800b644:	2300      	movs	r3, #0
 800b646:	60fb      	str	r3, [r7, #12]
 800b648:	e074      	b.n	800b734 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 800b64a:	4a3f      	ldr	r2, [pc, #252]	; (800b748 <OSPIM_GetConfig+0x16c>)
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	009b      	lsls	r3, r3, #2
 800b650:	4413      	add	r3, r2
 800b652:	685b      	ldr	r3, [r3, #4]
 800b654:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	f003 0301 	and.w	r3, r3, #1
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d00a      	beq.n	800b676 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 800b660:	68ba      	ldr	r2, [r7, #8]
 800b662:	693b      	ldr	r3, [r7, #16]
 800b664:	4053      	eors	r3, r2
 800b666:	f003 0302 	and.w	r3, r3, #2
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d103      	bne.n	800b676 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	1c5a      	adds	r2, r3, #1
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	f003 0310 	and.w	r3, r3, #16
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d00a      	beq.n	800b696 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 800b680:	68ba      	ldr	r2, [r7, #8]
 800b682:	693b      	ldr	r3, [r7, #16]
 800b684:	4053      	eors	r3, r2
 800b686:	f003 0320 	and.w	r3, r3, #32
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d103      	bne.n	800b696 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	1c5a      	adds	r2, r3, #1
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d00a      	beq.n	800b6b6 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 800b6a0:	68ba      	ldr	r2, [r7, #8]
 800b6a2:	693b      	ldr	r3, [r7, #16]
 800b6a4:	4053      	eors	r3, r2
 800b6a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d103      	bne.n	800b6b6 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	1c5a      	adds	r2, r3, #1
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d018      	beq.n	800b6f2 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 800b6c0:	68ba      	ldr	r2, [r7, #8]
 800b6c2:	693b      	ldr	r3, [r7, #16]
 800b6c4:	4053      	eors	r3, r2
 800b6c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d111      	bne.n	800b6f2 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d106      	bne.n	800b6e6 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	3301      	adds	r3, #1
 800b6dc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	60da      	str	r2, [r3, #12]
 800b6e4:	e005      	b.n	800b6f2 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	3301      	adds	r3, #1
 800b6ea:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d018      	beq.n	800b72e <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 800b6fc:	68ba      	ldr	r2, [r7, #8]
 800b6fe:	693b      	ldr	r3, [r7, #16]
 800b700:	4053      	eors	r3, r2
 800b702:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b706:	2b00      	cmp	r3, #0
 800b708:	d111      	bne.n	800b72e <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b710:	2b00      	cmp	r3, #0
 800b712:	d106      	bne.n	800b722 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	3301      	adds	r3, #1
 800b718:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	611a      	str	r2, [r3, #16]
 800b720:	e005      	b.n	800b72e <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	3301      	adds	r3, #1
 800b726:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	3301      	adds	r3, #1
 800b732:	60fb      	str	r3, [r7, #12]
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	2b01      	cmp	r3, #1
 800b738:	d987      	bls.n	800b64a <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 800b73a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	371c      	adds	r7, #28
 800b740:	46bd      	mov	sp, r7
 800b742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b746:	4770      	bx	lr
 800b748:	5200b400 	.word	0x5200b400
 800b74c:	04040222 	.word	0x04040222

0800b750 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 800b750:	b480      	push	{r7}
 800b752:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 800b754:	4b05      	ldr	r3, [pc, #20]	; (800b76c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	4a04      	ldr	r2, [pc, #16]	; (800b76c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b75a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b75e:	6013      	str	r3, [r2, #0]
}
 800b760:	bf00      	nop
 800b762:	46bd      	mov	sp, r7
 800b764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b768:	4770      	bx	lr
 800b76a:	bf00      	nop
 800b76c:	58024800 	.word	0x58024800

0800b770 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b084      	sub	sp, #16
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800b778:	4b19      	ldr	r3, [pc, #100]	; (800b7e0 <HAL_PWREx_ConfigSupply+0x70>)
 800b77a:	68db      	ldr	r3, [r3, #12]
 800b77c:	f003 0304 	and.w	r3, r3, #4
 800b780:	2b04      	cmp	r3, #4
 800b782:	d00a      	beq.n	800b79a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b784:	4b16      	ldr	r3, [pc, #88]	; (800b7e0 <HAL_PWREx_ConfigSupply+0x70>)
 800b786:	68db      	ldr	r3, [r3, #12]
 800b788:	f003 0307 	and.w	r3, r3, #7
 800b78c:	687a      	ldr	r2, [r7, #4]
 800b78e:	429a      	cmp	r2, r3
 800b790:	d001      	beq.n	800b796 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800b792:	2301      	movs	r3, #1
 800b794:	e01f      	b.n	800b7d6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800b796:	2300      	movs	r3, #0
 800b798:	e01d      	b.n	800b7d6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b79a:	4b11      	ldr	r3, [pc, #68]	; (800b7e0 <HAL_PWREx_ConfigSupply+0x70>)
 800b79c:	68db      	ldr	r3, [r3, #12]
 800b79e:	f023 0207 	bic.w	r2, r3, #7
 800b7a2:	490f      	ldr	r1, [pc, #60]	; (800b7e0 <HAL_PWREx_ConfigSupply+0x70>)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	4313      	orrs	r3, r2
 800b7a8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800b7aa:	f7f8 fc67 	bl	800407c <HAL_GetTick>
 800b7ae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b7b0:	e009      	b.n	800b7c6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b7b2:	f7f8 fc63 	bl	800407c <HAL_GetTick>
 800b7b6:	4602      	mov	r2, r0
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	1ad3      	subs	r3, r2, r3
 800b7bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b7c0:	d901      	bls.n	800b7c6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	e007      	b.n	800b7d6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b7c6:	4b06      	ldr	r3, [pc, #24]	; (800b7e0 <HAL_PWREx_ConfigSupply+0x70>)
 800b7c8:	685b      	ldr	r3, [r3, #4]
 800b7ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b7ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7d2:	d1ee      	bne.n	800b7b2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800b7d4:	2300      	movs	r3, #0
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	3710      	adds	r7, #16
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}
 800b7de:	bf00      	nop
 800b7e0:	58024800 	.word	0x58024800

0800b7e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b08c      	sub	sp, #48	; 0x30
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d102      	bne.n	800b7f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	f000 bc1f 	b.w	800c036 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f003 0301 	and.w	r3, r3, #1
 800b800:	2b00      	cmp	r3, #0
 800b802:	f000 80b3 	beq.w	800b96c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b806:	4b95      	ldr	r3, [pc, #596]	; (800ba5c <HAL_RCC_OscConfig+0x278>)
 800b808:	691b      	ldr	r3, [r3, #16]
 800b80a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b80e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b810:	4b92      	ldr	r3, [pc, #584]	; (800ba5c <HAL_RCC_OscConfig+0x278>)
 800b812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b814:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b818:	2b10      	cmp	r3, #16
 800b81a:	d007      	beq.n	800b82c <HAL_RCC_OscConfig+0x48>
 800b81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b81e:	2b18      	cmp	r3, #24
 800b820:	d112      	bne.n	800b848 <HAL_RCC_OscConfig+0x64>
 800b822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b824:	f003 0303 	and.w	r3, r3, #3
 800b828:	2b02      	cmp	r3, #2
 800b82a:	d10d      	bne.n	800b848 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b82c:	4b8b      	ldr	r3, [pc, #556]	; (800ba5c <HAL_RCC_OscConfig+0x278>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b834:	2b00      	cmp	r3, #0
 800b836:	f000 8098 	beq.w	800b96a <HAL_RCC_OscConfig+0x186>
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	685b      	ldr	r3, [r3, #4]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	f040 8093 	bne.w	800b96a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800b844:	2301      	movs	r3, #1
 800b846:	e3f6      	b.n	800c036 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	685b      	ldr	r3, [r3, #4]
 800b84c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b850:	d106      	bne.n	800b860 <HAL_RCC_OscConfig+0x7c>
 800b852:	4b82      	ldr	r3, [pc, #520]	; (800ba5c <HAL_RCC_OscConfig+0x278>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	4a81      	ldr	r2, [pc, #516]	; (800ba5c <HAL_RCC_OscConfig+0x278>)
 800b858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b85c:	6013      	str	r3, [r2, #0]
 800b85e:	e058      	b.n	800b912 <HAL_RCC_OscConfig+0x12e>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	685b      	ldr	r3, [r3, #4]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d112      	bne.n	800b88e <HAL_RCC_OscConfig+0xaa>
 800b868:	4b7c      	ldr	r3, [pc, #496]	; (800ba5c <HAL_RCC_OscConfig+0x278>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	4a7b      	ldr	r2, [pc, #492]	; (800ba5c <HAL_RCC_OscConfig+0x278>)
 800b86e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b872:	6013      	str	r3, [r2, #0]
 800b874:	4b79      	ldr	r3, [pc, #484]	; (800ba5c <HAL_RCC_OscConfig+0x278>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	4a78      	ldr	r2, [pc, #480]	; (800ba5c <HAL_RCC_OscConfig+0x278>)
 800b87a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b87e:	6013      	str	r3, [r2, #0]
 800b880:	4b76      	ldr	r3, [pc, #472]	; (800ba5c <HAL_RCC_OscConfig+0x278>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	4a75      	ldr	r2, [pc, #468]	; (800ba5c <HAL_RCC_OscConfig+0x278>)
 800b886:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b88a:	6013      	str	r3, [r2, #0]
 800b88c:	e041      	b.n	800b912 <HAL_RCC_OscConfig+0x12e>
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	685b      	ldr	r3, [r3, #4]
 800b892:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b896:	d112      	bne.n	800b8be <HAL_RCC_OscConfig+0xda>
 800b898:	4b70      	ldr	r3, [pc, #448]	; (800ba5c <HAL_RCC_OscConfig+0x278>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	4a6f      	ldr	r2, [pc, #444]	; (800ba5c <HAL_RCC_OscConfig+0x278>)
 800b89e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b8a2:	6013      	str	r3, [r2, #0]
 800b8a4:	4b6d      	ldr	r3, [pc, #436]	; (800ba5c <HAL_RCC_OscConfig+0x278>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	4a6c      	ldr	r2, [pc, #432]	; (800ba5c <HAL_RCC_OscConfig+0x278>)
 800b8aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b8ae:	6013      	str	r3, [r2, #0]
 800b8b0:	4b6a      	ldr	r3, [pc, #424]	; (800ba5c <HAL_RCC_OscConfig+0x278>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	4a69      	ldr	r2, [pc, #420]	; (800ba5c <HAL_RCC_OscConfig+0x278>)
 800b8b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b8ba:	6013      	str	r3, [r2, #0]
 800b8bc:	e029      	b.n	800b912 <HAL_RCC_OscConfig+0x12e>
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	685b      	ldr	r3, [r3, #4]
 800b8c2:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800b8c6:	d112      	bne.n	800b8ee <HAL_RCC_OscConfig+0x10a>
 800b8c8:	4b64      	ldr	r3, [pc, #400]	; (800ba5c <HAL_RCC_OscConfig+0x278>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	4a63      	ldr	r2, [pc, #396]	; (800ba5c <HAL_RCC_OscConfig+0x278>)
 800b8ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b8d2:	6013      	str	r3, [r2, #0]
 800b8d4:	4b61      	ldr	r3, [pc, #388]	; (800ba5c <HAL_RCC_OscConfig+0x278>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	4a60      	ldr	r2, [pc, #384]	; (800ba5c <HAL_RCC_OscConfig+0x278>)
 800b8da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b8de:	6013      	str	r3, [r2, #0]
 800b8e0:	4b5e      	ldr	r3, [pc, #376]	; (800ba5c <HAL_RCC_OscConfig+0x278>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	4a5d      	ldr	r2, [pc, #372]	; (800ba5c <HAL_RCC_OscConfig+0x278>)
 800b8e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b8ea:	6013      	str	r3, [r2, #0]
 800b8ec:	e011      	b.n	800b912 <HAL_RCC_OscConfig+0x12e>
 800b8ee:	4b5b      	ldr	r3, [pc, #364]	; (800ba5c <HAL_RCC_OscConfig+0x278>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	4a5a      	ldr	r2, [pc, #360]	; (800ba5c <HAL_RCC_OscConfig+0x278>)
 800b8f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b8f8:	6013      	str	r3, [r2, #0]
 800b8fa:	4b58      	ldr	r3, [pc, #352]	; (800ba5c <HAL_RCC_OscConfig+0x278>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	4a57      	ldr	r2, [pc, #348]	; (800ba5c <HAL_RCC_OscConfig+0x278>)
 800b900:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b904:	6013      	str	r3, [r2, #0]
 800b906:	4b55      	ldr	r3, [pc, #340]	; (800ba5c <HAL_RCC_OscConfig+0x278>)
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	4a54      	ldr	r2, [pc, #336]	; (800ba5c <HAL_RCC_OscConfig+0x278>)
 800b90c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b910:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	685b      	ldr	r3, [r3, #4]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d013      	beq.n	800b942 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b91a:	f7f8 fbaf 	bl	800407c <HAL_GetTick>
 800b91e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b920:	e008      	b.n	800b934 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b922:	f7f8 fbab 	bl	800407c <HAL_GetTick>
 800b926:	4602      	mov	r2, r0
 800b928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b92a:	1ad3      	subs	r3, r2, r3
 800b92c:	2b64      	cmp	r3, #100	; 0x64
 800b92e:	d901      	bls.n	800b934 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800b930:	2303      	movs	r3, #3
 800b932:	e380      	b.n	800c036 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b934:	4b49      	ldr	r3, [pc, #292]	; (800ba5c <HAL_RCC_OscConfig+0x278>)
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d0f0      	beq.n	800b922 <HAL_RCC_OscConfig+0x13e>
 800b940:	e014      	b.n	800b96c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b942:	f7f8 fb9b 	bl	800407c <HAL_GetTick>
 800b946:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b948:	e008      	b.n	800b95c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b94a:	f7f8 fb97 	bl	800407c <HAL_GetTick>
 800b94e:	4602      	mov	r2, r0
 800b950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b952:	1ad3      	subs	r3, r2, r3
 800b954:	2b64      	cmp	r3, #100	; 0x64
 800b956:	d901      	bls.n	800b95c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800b958:	2303      	movs	r3, #3
 800b95a:	e36c      	b.n	800c036 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b95c:	4b3f      	ldr	r3, [pc, #252]	; (800ba5c <HAL_RCC_OscConfig+0x278>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b964:	2b00      	cmp	r3, #0
 800b966:	d1f0      	bne.n	800b94a <HAL_RCC_OscConfig+0x166>
 800b968:	e000      	b.n	800b96c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b96a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	f003 0302 	and.w	r3, r3, #2
 800b974:	2b00      	cmp	r3, #0
 800b976:	f000 808c 	beq.w	800ba92 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b97a:	4b38      	ldr	r3, [pc, #224]	; (800ba5c <HAL_RCC_OscConfig+0x278>)
 800b97c:	691b      	ldr	r3, [r3, #16]
 800b97e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b982:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b984:	4b35      	ldr	r3, [pc, #212]	; (800ba5c <HAL_RCC_OscConfig+0x278>)
 800b986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b988:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b98a:	6a3b      	ldr	r3, [r7, #32]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d007      	beq.n	800b9a0 <HAL_RCC_OscConfig+0x1bc>
 800b990:	6a3b      	ldr	r3, [r7, #32]
 800b992:	2b18      	cmp	r3, #24
 800b994:	d137      	bne.n	800ba06 <HAL_RCC_OscConfig+0x222>
 800b996:	69fb      	ldr	r3, [r7, #28]
 800b998:	f003 0303 	and.w	r3, r3, #3
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d132      	bne.n	800ba06 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b9a0:	4b2e      	ldr	r3, [pc, #184]	; (800ba5c <HAL_RCC_OscConfig+0x278>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	f003 0304 	and.w	r3, r3, #4
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d005      	beq.n	800b9b8 <HAL_RCC_OscConfig+0x1d4>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	68db      	ldr	r3, [r3, #12]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d101      	bne.n	800b9b8 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	e33e      	b.n	800c036 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b9b8:	4b28      	ldr	r3, [pc, #160]	; (800ba5c <HAL_RCC_OscConfig+0x278>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f023 0219 	bic.w	r2, r3, #25
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	68db      	ldr	r3, [r3, #12]
 800b9c4:	4925      	ldr	r1, [pc, #148]	; (800ba5c <HAL_RCC_OscConfig+0x278>)
 800b9c6:	4313      	orrs	r3, r2
 800b9c8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9ca:	f7f8 fb57 	bl	800407c <HAL_GetTick>
 800b9ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b9d0:	e008      	b.n	800b9e4 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b9d2:	f7f8 fb53 	bl	800407c <HAL_GetTick>
 800b9d6:	4602      	mov	r2, r0
 800b9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9da:	1ad3      	subs	r3, r2, r3
 800b9dc:	2b02      	cmp	r3, #2
 800b9de:	d901      	bls.n	800b9e4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800b9e0:	2303      	movs	r3, #3
 800b9e2:	e328      	b.n	800c036 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b9e4:	4b1d      	ldr	r3, [pc, #116]	; (800ba5c <HAL_RCC_OscConfig+0x278>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	f003 0304 	and.w	r3, r3, #4
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d0f0      	beq.n	800b9d2 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b9f0:	4b1a      	ldr	r3, [pc, #104]	; (800ba5c <HAL_RCC_OscConfig+0x278>)
 800b9f2:	685b      	ldr	r3, [r3, #4]
 800b9f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	691b      	ldr	r3, [r3, #16]
 800b9fc:	061b      	lsls	r3, r3, #24
 800b9fe:	4917      	ldr	r1, [pc, #92]	; (800ba5c <HAL_RCC_OscConfig+0x278>)
 800ba00:	4313      	orrs	r3, r2
 800ba02:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ba04:	e045      	b.n	800ba92 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	68db      	ldr	r3, [r3, #12]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d028      	beq.n	800ba60 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ba0e:	4b13      	ldr	r3, [pc, #76]	; (800ba5c <HAL_RCC_OscConfig+0x278>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f023 0219 	bic.w	r2, r3, #25
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	68db      	ldr	r3, [r3, #12]
 800ba1a:	4910      	ldr	r1, [pc, #64]	; (800ba5c <HAL_RCC_OscConfig+0x278>)
 800ba1c:	4313      	orrs	r3, r2
 800ba1e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba20:	f7f8 fb2c 	bl	800407c <HAL_GetTick>
 800ba24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ba26:	e008      	b.n	800ba3a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ba28:	f7f8 fb28 	bl	800407c <HAL_GetTick>
 800ba2c:	4602      	mov	r2, r0
 800ba2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba30:	1ad3      	subs	r3, r2, r3
 800ba32:	2b02      	cmp	r3, #2
 800ba34:	d901      	bls.n	800ba3a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800ba36:	2303      	movs	r3, #3
 800ba38:	e2fd      	b.n	800c036 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ba3a:	4b08      	ldr	r3, [pc, #32]	; (800ba5c <HAL_RCC_OscConfig+0x278>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	f003 0304 	and.w	r3, r3, #4
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d0f0      	beq.n	800ba28 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ba46:	4b05      	ldr	r3, [pc, #20]	; (800ba5c <HAL_RCC_OscConfig+0x278>)
 800ba48:	685b      	ldr	r3, [r3, #4]
 800ba4a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	691b      	ldr	r3, [r3, #16]
 800ba52:	061b      	lsls	r3, r3, #24
 800ba54:	4901      	ldr	r1, [pc, #4]	; (800ba5c <HAL_RCC_OscConfig+0x278>)
 800ba56:	4313      	orrs	r3, r2
 800ba58:	604b      	str	r3, [r1, #4]
 800ba5a:	e01a      	b.n	800ba92 <HAL_RCC_OscConfig+0x2ae>
 800ba5c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ba60:	4b97      	ldr	r3, [pc, #604]	; (800bcc0 <HAL_RCC_OscConfig+0x4dc>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	4a96      	ldr	r2, [pc, #600]	; (800bcc0 <HAL_RCC_OscConfig+0x4dc>)
 800ba66:	f023 0301 	bic.w	r3, r3, #1
 800ba6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba6c:	f7f8 fb06 	bl	800407c <HAL_GetTick>
 800ba70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ba72:	e008      	b.n	800ba86 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ba74:	f7f8 fb02 	bl	800407c <HAL_GetTick>
 800ba78:	4602      	mov	r2, r0
 800ba7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba7c:	1ad3      	subs	r3, r2, r3
 800ba7e:	2b02      	cmp	r3, #2
 800ba80:	d901      	bls.n	800ba86 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800ba82:	2303      	movs	r3, #3
 800ba84:	e2d7      	b.n	800c036 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ba86:	4b8e      	ldr	r3, [pc, #568]	; (800bcc0 <HAL_RCC_OscConfig+0x4dc>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f003 0304 	and.w	r3, r3, #4
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d1f0      	bne.n	800ba74 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	f003 0310 	and.w	r3, r3, #16
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d06a      	beq.n	800bb74 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ba9e:	4b88      	ldr	r3, [pc, #544]	; (800bcc0 <HAL_RCC_OscConfig+0x4dc>)
 800baa0:	691b      	ldr	r3, [r3, #16]
 800baa2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800baa6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800baa8:	4b85      	ldr	r3, [pc, #532]	; (800bcc0 <HAL_RCC_OscConfig+0x4dc>)
 800baaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baac:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800baae:	69bb      	ldr	r3, [r7, #24]
 800bab0:	2b08      	cmp	r3, #8
 800bab2:	d007      	beq.n	800bac4 <HAL_RCC_OscConfig+0x2e0>
 800bab4:	69bb      	ldr	r3, [r7, #24]
 800bab6:	2b18      	cmp	r3, #24
 800bab8:	d11b      	bne.n	800baf2 <HAL_RCC_OscConfig+0x30e>
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	f003 0303 	and.w	r3, r3, #3
 800bac0:	2b01      	cmp	r3, #1
 800bac2:	d116      	bne.n	800baf2 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bac4:	4b7e      	ldr	r3, [pc, #504]	; (800bcc0 <HAL_RCC_OscConfig+0x4dc>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d005      	beq.n	800badc <HAL_RCC_OscConfig+0x2f8>
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	69db      	ldr	r3, [r3, #28]
 800bad4:	2b80      	cmp	r3, #128	; 0x80
 800bad6:	d001      	beq.n	800badc <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800bad8:	2301      	movs	r3, #1
 800bada:	e2ac      	b.n	800c036 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800badc:	4b78      	ldr	r3, [pc, #480]	; (800bcc0 <HAL_RCC_OscConfig+0x4dc>)
 800bade:	68db      	ldr	r3, [r3, #12]
 800bae0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6a1b      	ldr	r3, [r3, #32]
 800bae8:	061b      	lsls	r3, r3, #24
 800baea:	4975      	ldr	r1, [pc, #468]	; (800bcc0 <HAL_RCC_OscConfig+0x4dc>)
 800baec:	4313      	orrs	r3, r2
 800baee:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800baf0:	e040      	b.n	800bb74 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	69db      	ldr	r3, [r3, #28]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d023      	beq.n	800bb42 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800bafa:	4b71      	ldr	r3, [pc, #452]	; (800bcc0 <HAL_RCC_OscConfig+0x4dc>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	4a70      	ldr	r2, [pc, #448]	; (800bcc0 <HAL_RCC_OscConfig+0x4dc>)
 800bb00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb06:	f7f8 fab9 	bl	800407c <HAL_GetTick>
 800bb0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bb0c:	e008      	b.n	800bb20 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800bb0e:	f7f8 fab5 	bl	800407c <HAL_GetTick>
 800bb12:	4602      	mov	r2, r0
 800bb14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb16:	1ad3      	subs	r3, r2, r3
 800bb18:	2b02      	cmp	r3, #2
 800bb1a:	d901      	bls.n	800bb20 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800bb1c:	2303      	movs	r3, #3
 800bb1e:	e28a      	b.n	800c036 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bb20:	4b67      	ldr	r3, [pc, #412]	; (800bcc0 <HAL_RCC_OscConfig+0x4dc>)
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d0f0      	beq.n	800bb0e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bb2c:	4b64      	ldr	r3, [pc, #400]	; (800bcc0 <HAL_RCC_OscConfig+0x4dc>)
 800bb2e:	68db      	ldr	r3, [r3, #12]
 800bb30:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	6a1b      	ldr	r3, [r3, #32]
 800bb38:	061b      	lsls	r3, r3, #24
 800bb3a:	4961      	ldr	r1, [pc, #388]	; (800bcc0 <HAL_RCC_OscConfig+0x4dc>)
 800bb3c:	4313      	orrs	r3, r2
 800bb3e:	60cb      	str	r3, [r1, #12]
 800bb40:	e018      	b.n	800bb74 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800bb42:	4b5f      	ldr	r3, [pc, #380]	; (800bcc0 <HAL_RCC_OscConfig+0x4dc>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	4a5e      	ldr	r2, [pc, #376]	; (800bcc0 <HAL_RCC_OscConfig+0x4dc>)
 800bb48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb4e:	f7f8 fa95 	bl	800407c <HAL_GetTick>
 800bb52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800bb54:	e008      	b.n	800bb68 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800bb56:	f7f8 fa91 	bl	800407c <HAL_GetTick>
 800bb5a:	4602      	mov	r2, r0
 800bb5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb5e:	1ad3      	subs	r3, r2, r3
 800bb60:	2b02      	cmp	r3, #2
 800bb62:	d901      	bls.n	800bb68 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800bb64:	2303      	movs	r3, #3
 800bb66:	e266      	b.n	800c036 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800bb68:	4b55      	ldr	r3, [pc, #340]	; (800bcc0 <HAL_RCC_OscConfig+0x4dc>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d1f0      	bne.n	800bb56 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f003 0308 	and.w	r3, r3, #8
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d036      	beq.n	800bbee <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	695b      	ldr	r3, [r3, #20]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d019      	beq.n	800bbbc <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bb88:	4b4d      	ldr	r3, [pc, #308]	; (800bcc0 <HAL_RCC_OscConfig+0x4dc>)
 800bb8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb8c:	4a4c      	ldr	r2, [pc, #304]	; (800bcc0 <HAL_RCC_OscConfig+0x4dc>)
 800bb8e:	f043 0301 	orr.w	r3, r3, #1
 800bb92:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb94:	f7f8 fa72 	bl	800407c <HAL_GetTick>
 800bb98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800bb9a:	e008      	b.n	800bbae <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bb9c:	f7f8 fa6e 	bl	800407c <HAL_GetTick>
 800bba0:	4602      	mov	r2, r0
 800bba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bba4:	1ad3      	subs	r3, r2, r3
 800bba6:	2b02      	cmp	r3, #2
 800bba8:	d901      	bls.n	800bbae <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800bbaa:	2303      	movs	r3, #3
 800bbac:	e243      	b.n	800c036 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800bbae:	4b44      	ldr	r3, [pc, #272]	; (800bcc0 <HAL_RCC_OscConfig+0x4dc>)
 800bbb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbb2:	f003 0302 	and.w	r3, r3, #2
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d0f0      	beq.n	800bb9c <HAL_RCC_OscConfig+0x3b8>
 800bbba:	e018      	b.n	800bbee <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bbbc:	4b40      	ldr	r3, [pc, #256]	; (800bcc0 <HAL_RCC_OscConfig+0x4dc>)
 800bbbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbc0:	4a3f      	ldr	r2, [pc, #252]	; (800bcc0 <HAL_RCC_OscConfig+0x4dc>)
 800bbc2:	f023 0301 	bic.w	r3, r3, #1
 800bbc6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bbc8:	f7f8 fa58 	bl	800407c <HAL_GetTick>
 800bbcc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800bbce:	e008      	b.n	800bbe2 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bbd0:	f7f8 fa54 	bl	800407c <HAL_GetTick>
 800bbd4:	4602      	mov	r2, r0
 800bbd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd8:	1ad3      	subs	r3, r2, r3
 800bbda:	2b02      	cmp	r3, #2
 800bbdc:	d901      	bls.n	800bbe2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800bbde:	2303      	movs	r3, #3
 800bbe0:	e229      	b.n	800c036 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800bbe2:	4b37      	ldr	r3, [pc, #220]	; (800bcc0 <HAL_RCC_OscConfig+0x4dc>)
 800bbe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbe6:	f003 0302 	and.w	r3, r3, #2
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d1f0      	bne.n	800bbd0 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	f003 0320 	and.w	r3, r3, #32
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d036      	beq.n	800bc68 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	699b      	ldr	r3, [r3, #24]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d019      	beq.n	800bc36 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800bc02:	4b2f      	ldr	r3, [pc, #188]	; (800bcc0 <HAL_RCC_OscConfig+0x4dc>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	4a2e      	ldr	r2, [pc, #184]	; (800bcc0 <HAL_RCC_OscConfig+0x4dc>)
 800bc08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bc0c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800bc0e:	f7f8 fa35 	bl	800407c <HAL_GetTick>
 800bc12:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800bc14:	e008      	b.n	800bc28 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bc16:	f7f8 fa31 	bl	800407c <HAL_GetTick>
 800bc1a:	4602      	mov	r2, r0
 800bc1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc1e:	1ad3      	subs	r3, r2, r3
 800bc20:	2b02      	cmp	r3, #2
 800bc22:	d901      	bls.n	800bc28 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800bc24:	2303      	movs	r3, #3
 800bc26:	e206      	b.n	800c036 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800bc28:	4b25      	ldr	r3, [pc, #148]	; (800bcc0 <HAL_RCC_OscConfig+0x4dc>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d0f0      	beq.n	800bc16 <HAL_RCC_OscConfig+0x432>
 800bc34:	e018      	b.n	800bc68 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800bc36:	4b22      	ldr	r3, [pc, #136]	; (800bcc0 <HAL_RCC_OscConfig+0x4dc>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	4a21      	ldr	r2, [pc, #132]	; (800bcc0 <HAL_RCC_OscConfig+0x4dc>)
 800bc3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc40:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800bc42:	f7f8 fa1b 	bl	800407c <HAL_GetTick>
 800bc46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800bc48:	e008      	b.n	800bc5c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bc4a:	f7f8 fa17 	bl	800407c <HAL_GetTick>
 800bc4e:	4602      	mov	r2, r0
 800bc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc52:	1ad3      	subs	r3, r2, r3
 800bc54:	2b02      	cmp	r3, #2
 800bc56:	d901      	bls.n	800bc5c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800bc58:	2303      	movs	r3, #3
 800bc5a:	e1ec      	b.n	800c036 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800bc5c:	4b18      	ldr	r3, [pc, #96]	; (800bcc0 <HAL_RCC_OscConfig+0x4dc>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d1f0      	bne.n	800bc4a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f003 0304 	and.w	r3, r3, #4
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	f000 80af 	beq.w	800bdd4 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800bc76:	4b13      	ldr	r3, [pc, #76]	; (800bcc4 <HAL_RCC_OscConfig+0x4e0>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	4a12      	ldr	r2, [pc, #72]	; (800bcc4 <HAL_RCC_OscConfig+0x4e0>)
 800bc7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bc82:	f7f8 f9fb 	bl	800407c <HAL_GetTick>
 800bc86:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bc88:	e008      	b.n	800bc9c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bc8a:	f7f8 f9f7 	bl	800407c <HAL_GetTick>
 800bc8e:	4602      	mov	r2, r0
 800bc90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc92:	1ad3      	subs	r3, r2, r3
 800bc94:	2b64      	cmp	r3, #100	; 0x64
 800bc96:	d901      	bls.n	800bc9c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800bc98:	2303      	movs	r3, #3
 800bc9a:	e1cc      	b.n	800c036 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bc9c:	4b09      	ldr	r3, [pc, #36]	; (800bcc4 <HAL_RCC_OscConfig+0x4e0>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d0f0      	beq.n	800bc8a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	689b      	ldr	r3, [r3, #8]
 800bcac:	2b01      	cmp	r3, #1
 800bcae:	d10b      	bne.n	800bcc8 <HAL_RCC_OscConfig+0x4e4>
 800bcb0:	4b03      	ldr	r3, [pc, #12]	; (800bcc0 <HAL_RCC_OscConfig+0x4dc>)
 800bcb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcb4:	4a02      	ldr	r2, [pc, #8]	; (800bcc0 <HAL_RCC_OscConfig+0x4dc>)
 800bcb6:	f043 0301 	orr.w	r3, r3, #1
 800bcba:	6713      	str	r3, [r2, #112]	; 0x70
 800bcbc:	e05b      	b.n	800bd76 <HAL_RCC_OscConfig+0x592>
 800bcbe:	bf00      	nop
 800bcc0:	58024400 	.word	0x58024400
 800bcc4:	58024800 	.word	0x58024800
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	689b      	ldr	r3, [r3, #8]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d112      	bne.n	800bcf6 <HAL_RCC_OscConfig+0x512>
 800bcd0:	4b9d      	ldr	r3, [pc, #628]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800bcd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcd4:	4a9c      	ldr	r2, [pc, #624]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800bcd6:	f023 0301 	bic.w	r3, r3, #1
 800bcda:	6713      	str	r3, [r2, #112]	; 0x70
 800bcdc:	4b9a      	ldr	r3, [pc, #616]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800bcde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bce0:	4a99      	ldr	r2, [pc, #612]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800bce2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bce6:	6713      	str	r3, [r2, #112]	; 0x70
 800bce8:	4b97      	ldr	r3, [pc, #604]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800bcea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcec:	4a96      	ldr	r2, [pc, #600]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800bcee:	f023 0304 	bic.w	r3, r3, #4
 800bcf2:	6713      	str	r3, [r2, #112]	; 0x70
 800bcf4:	e03f      	b.n	800bd76 <HAL_RCC_OscConfig+0x592>
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	689b      	ldr	r3, [r3, #8]
 800bcfa:	2b05      	cmp	r3, #5
 800bcfc:	d112      	bne.n	800bd24 <HAL_RCC_OscConfig+0x540>
 800bcfe:	4b92      	ldr	r3, [pc, #584]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800bd00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd02:	4a91      	ldr	r2, [pc, #580]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800bd04:	f043 0304 	orr.w	r3, r3, #4
 800bd08:	6713      	str	r3, [r2, #112]	; 0x70
 800bd0a:	4b8f      	ldr	r3, [pc, #572]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800bd0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd0e:	4a8e      	ldr	r2, [pc, #568]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800bd10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd14:	6713      	str	r3, [r2, #112]	; 0x70
 800bd16:	4b8c      	ldr	r3, [pc, #560]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800bd18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd1a:	4a8b      	ldr	r2, [pc, #556]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800bd1c:	f043 0301 	orr.w	r3, r3, #1
 800bd20:	6713      	str	r3, [r2, #112]	; 0x70
 800bd22:	e028      	b.n	800bd76 <HAL_RCC_OscConfig+0x592>
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	689b      	ldr	r3, [r3, #8]
 800bd28:	2b85      	cmp	r3, #133	; 0x85
 800bd2a:	d112      	bne.n	800bd52 <HAL_RCC_OscConfig+0x56e>
 800bd2c:	4b86      	ldr	r3, [pc, #536]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800bd2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd30:	4a85      	ldr	r2, [pc, #532]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800bd32:	f043 0304 	orr.w	r3, r3, #4
 800bd36:	6713      	str	r3, [r2, #112]	; 0x70
 800bd38:	4b83      	ldr	r3, [pc, #524]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800bd3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd3c:	4a82      	ldr	r2, [pc, #520]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800bd3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd42:	6713      	str	r3, [r2, #112]	; 0x70
 800bd44:	4b80      	ldr	r3, [pc, #512]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800bd46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd48:	4a7f      	ldr	r2, [pc, #508]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800bd4a:	f043 0301 	orr.w	r3, r3, #1
 800bd4e:	6713      	str	r3, [r2, #112]	; 0x70
 800bd50:	e011      	b.n	800bd76 <HAL_RCC_OscConfig+0x592>
 800bd52:	4b7d      	ldr	r3, [pc, #500]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800bd54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd56:	4a7c      	ldr	r2, [pc, #496]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800bd58:	f023 0301 	bic.w	r3, r3, #1
 800bd5c:	6713      	str	r3, [r2, #112]	; 0x70
 800bd5e:	4b7a      	ldr	r3, [pc, #488]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800bd60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd62:	4a79      	ldr	r2, [pc, #484]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800bd64:	f023 0304 	bic.w	r3, r3, #4
 800bd68:	6713      	str	r3, [r2, #112]	; 0x70
 800bd6a:	4b77      	ldr	r3, [pc, #476]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800bd6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd6e:	4a76      	ldr	r2, [pc, #472]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800bd70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	689b      	ldr	r3, [r3, #8]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d015      	beq.n	800bdaa <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bd7e:	f7f8 f97d 	bl	800407c <HAL_GetTick>
 800bd82:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bd84:	e00a      	b.n	800bd9c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bd86:	f7f8 f979 	bl	800407c <HAL_GetTick>
 800bd8a:	4602      	mov	r2, r0
 800bd8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd8e:	1ad3      	subs	r3, r2, r3
 800bd90:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd94:	4293      	cmp	r3, r2
 800bd96:	d901      	bls.n	800bd9c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800bd98:	2303      	movs	r3, #3
 800bd9a:	e14c      	b.n	800c036 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bd9c:	4b6a      	ldr	r3, [pc, #424]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800bd9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bda0:	f003 0302 	and.w	r3, r3, #2
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d0ee      	beq.n	800bd86 <HAL_RCC_OscConfig+0x5a2>
 800bda8:	e014      	b.n	800bdd4 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bdaa:	f7f8 f967 	bl	800407c <HAL_GetTick>
 800bdae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bdb0:	e00a      	b.n	800bdc8 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bdb2:	f7f8 f963 	bl	800407c <HAL_GetTick>
 800bdb6:	4602      	mov	r2, r0
 800bdb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdba:	1ad3      	subs	r3, r2, r3
 800bdbc:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	d901      	bls.n	800bdc8 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800bdc4:	2303      	movs	r3, #3
 800bdc6:	e136      	b.n	800c036 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bdc8:	4b5f      	ldr	r3, [pc, #380]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800bdca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdcc:	f003 0302 	and.w	r3, r3, #2
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d1ee      	bne.n	800bdb2 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	f000 812b 	beq.w	800c034 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800bdde:	4b5a      	ldr	r3, [pc, #360]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800bde0:	691b      	ldr	r3, [r3, #16]
 800bde2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bde6:	2b18      	cmp	r3, #24
 800bde8:	f000 80bb 	beq.w	800bf62 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdf0:	2b02      	cmp	r3, #2
 800bdf2:	f040 8095 	bne.w	800bf20 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bdf6:	4b54      	ldr	r3, [pc, #336]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	4a53      	ldr	r2, [pc, #332]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800bdfc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800be00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be02:	f7f8 f93b 	bl	800407c <HAL_GetTick>
 800be06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800be08:	e008      	b.n	800be1c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800be0a:	f7f8 f937 	bl	800407c <HAL_GetTick>
 800be0e:	4602      	mov	r2, r0
 800be10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be12:	1ad3      	subs	r3, r2, r3
 800be14:	2b02      	cmp	r3, #2
 800be16:	d901      	bls.n	800be1c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800be18:	2303      	movs	r3, #3
 800be1a:	e10c      	b.n	800c036 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800be1c:	4b4a      	ldr	r3, [pc, #296]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be24:	2b00      	cmp	r3, #0
 800be26:	d1f0      	bne.n	800be0a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800be28:	4b47      	ldr	r3, [pc, #284]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800be2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800be2c:	4b47      	ldr	r3, [pc, #284]	; (800bf4c <HAL_RCC_OscConfig+0x768>)
 800be2e:	4013      	ands	r3, r2
 800be30:	687a      	ldr	r2, [r7, #4]
 800be32:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800be34:	687a      	ldr	r2, [r7, #4]
 800be36:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800be38:	0112      	lsls	r2, r2, #4
 800be3a:	430a      	orrs	r2, r1
 800be3c:	4942      	ldr	r1, [pc, #264]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800be3e:	4313      	orrs	r3, r2
 800be40:	628b      	str	r3, [r1, #40]	; 0x28
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be46:	3b01      	subs	r3, #1
 800be48:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be50:	3b01      	subs	r3, #1
 800be52:	025b      	lsls	r3, r3, #9
 800be54:	b29b      	uxth	r3, r3
 800be56:	431a      	orrs	r2, r3
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be5c:	3b01      	subs	r3, #1
 800be5e:	041b      	lsls	r3, r3, #16
 800be60:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800be64:	431a      	orrs	r2, r3
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be6a:	3b01      	subs	r3, #1
 800be6c:	061b      	lsls	r3, r3, #24
 800be6e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800be72:	4935      	ldr	r1, [pc, #212]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800be74:	4313      	orrs	r3, r2
 800be76:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800be78:	4b33      	ldr	r3, [pc, #204]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800be7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be7c:	4a32      	ldr	r2, [pc, #200]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800be7e:	f023 0301 	bic.w	r3, r3, #1
 800be82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800be84:	4b30      	ldr	r3, [pc, #192]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800be86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800be88:	4b31      	ldr	r3, [pc, #196]	; (800bf50 <HAL_RCC_OscConfig+0x76c>)
 800be8a:	4013      	ands	r3, r2
 800be8c:	687a      	ldr	r2, [r7, #4]
 800be8e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800be90:	00d2      	lsls	r2, r2, #3
 800be92:	492d      	ldr	r1, [pc, #180]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800be94:	4313      	orrs	r3, r2
 800be96:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800be98:	4b2b      	ldr	r3, [pc, #172]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800be9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be9c:	f023 020c 	bic.w	r2, r3, #12
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bea4:	4928      	ldr	r1, [pc, #160]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800bea6:	4313      	orrs	r3, r2
 800bea8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800beaa:	4b27      	ldr	r3, [pc, #156]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800beac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beae:	f023 0202 	bic.w	r2, r3, #2
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800beb6:	4924      	ldr	r1, [pc, #144]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800beb8:	4313      	orrs	r3, r2
 800beba:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bebc:	4b22      	ldr	r3, [pc, #136]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800bebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bec0:	4a21      	ldr	r2, [pc, #132]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800bec2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bec6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bec8:	4b1f      	ldr	r3, [pc, #124]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800beca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800becc:	4a1e      	ldr	r2, [pc, #120]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800bece:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bed2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800bed4:	4b1c      	ldr	r3, [pc, #112]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800bed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bed8:	4a1b      	ldr	r2, [pc, #108]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800beda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bede:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800bee0:	4b19      	ldr	r3, [pc, #100]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800bee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bee4:	4a18      	ldr	r2, [pc, #96]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800bee6:	f043 0301 	orr.w	r3, r3, #1
 800beea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800beec:	4b16      	ldr	r3, [pc, #88]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	4a15      	ldr	r2, [pc, #84]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800bef2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bef6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bef8:	f7f8 f8c0 	bl	800407c <HAL_GetTick>
 800befc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800befe:	e008      	b.n	800bf12 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bf00:	f7f8 f8bc 	bl	800407c <HAL_GetTick>
 800bf04:	4602      	mov	r2, r0
 800bf06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf08:	1ad3      	subs	r3, r2, r3
 800bf0a:	2b02      	cmp	r3, #2
 800bf0c:	d901      	bls.n	800bf12 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800bf0e:	2303      	movs	r3, #3
 800bf10:	e091      	b.n	800c036 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bf12:	4b0d      	ldr	r3, [pc, #52]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d0f0      	beq.n	800bf00 <HAL_RCC_OscConfig+0x71c>
 800bf1e:	e089      	b.n	800c034 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bf20:	4b09      	ldr	r3, [pc, #36]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	4a08      	ldr	r2, [pc, #32]	; (800bf48 <HAL_RCC_OscConfig+0x764>)
 800bf26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bf2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf2c:	f7f8 f8a6 	bl	800407c <HAL_GetTick>
 800bf30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bf32:	e00f      	b.n	800bf54 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bf34:	f7f8 f8a2 	bl	800407c <HAL_GetTick>
 800bf38:	4602      	mov	r2, r0
 800bf3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf3c:	1ad3      	subs	r3, r2, r3
 800bf3e:	2b02      	cmp	r3, #2
 800bf40:	d908      	bls.n	800bf54 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800bf42:	2303      	movs	r3, #3
 800bf44:	e077      	b.n	800c036 <HAL_RCC_OscConfig+0x852>
 800bf46:	bf00      	nop
 800bf48:	58024400 	.word	0x58024400
 800bf4c:	fffffc0c 	.word	0xfffffc0c
 800bf50:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bf54:	4b3a      	ldr	r3, [pc, #232]	; (800c040 <HAL_RCC_OscConfig+0x85c>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d1e9      	bne.n	800bf34 <HAL_RCC_OscConfig+0x750>
 800bf60:	e068      	b.n	800c034 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800bf62:	4b37      	ldr	r3, [pc, #220]	; (800c040 <HAL_RCC_OscConfig+0x85c>)
 800bf64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf66:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800bf68:	4b35      	ldr	r3, [pc, #212]	; (800c040 <HAL_RCC_OscConfig+0x85c>)
 800bf6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf6c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf72:	2b01      	cmp	r3, #1
 800bf74:	d031      	beq.n	800bfda <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bf76:	693b      	ldr	r3, [r7, #16]
 800bf78:	f003 0203 	and.w	r2, r3, #3
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bf80:	429a      	cmp	r2, r3
 800bf82:	d12a      	bne.n	800bfda <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800bf84:	693b      	ldr	r3, [r7, #16]
 800bf86:	091b      	lsrs	r3, r3, #4
 800bf88:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bf90:	429a      	cmp	r2, r3
 800bf92:	d122      	bne.n	800bfda <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf9e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800bfa0:	429a      	cmp	r2, r3
 800bfa2:	d11a      	bne.n	800bfda <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	0a5b      	lsrs	r3, r3, #9
 800bfa8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfb0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800bfb2:	429a      	cmp	r2, r3
 800bfb4:	d111      	bne.n	800bfda <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	0c1b      	lsrs	r3, r3, #16
 800bfba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfc2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800bfc4:	429a      	cmp	r2, r3
 800bfc6:	d108      	bne.n	800bfda <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	0e1b      	lsrs	r3, r3, #24
 800bfcc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfd4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	d001      	beq.n	800bfde <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800bfda:	2301      	movs	r3, #1
 800bfdc:	e02b      	b.n	800c036 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800bfde:	4b18      	ldr	r3, [pc, #96]	; (800c040 <HAL_RCC_OscConfig+0x85c>)
 800bfe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfe2:	08db      	lsrs	r3, r3, #3
 800bfe4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bfe8:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bfee:	693a      	ldr	r2, [r7, #16]
 800bff0:	429a      	cmp	r2, r3
 800bff2:	d01f      	beq.n	800c034 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800bff4:	4b12      	ldr	r3, [pc, #72]	; (800c040 <HAL_RCC_OscConfig+0x85c>)
 800bff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bff8:	4a11      	ldr	r2, [pc, #68]	; (800c040 <HAL_RCC_OscConfig+0x85c>)
 800bffa:	f023 0301 	bic.w	r3, r3, #1
 800bffe:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c000:	f7f8 f83c 	bl	800407c <HAL_GetTick>
 800c004:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800c006:	bf00      	nop
 800c008:	f7f8 f838 	bl	800407c <HAL_GetTick>
 800c00c:	4602      	mov	r2, r0
 800c00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c010:	4293      	cmp	r3, r2
 800c012:	d0f9      	beq.n	800c008 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c014:	4b0a      	ldr	r3, [pc, #40]	; (800c040 <HAL_RCC_OscConfig+0x85c>)
 800c016:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c018:	4b0a      	ldr	r3, [pc, #40]	; (800c044 <HAL_RCC_OscConfig+0x860>)
 800c01a:	4013      	ands	r3, r2
 800c01c:	687a      	ldr	r2, [r7, #4]
 800c01e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800c020:	00d2      	lsls	r2, r2, #3
 800c022:	4907      	ldr	r1, [pc, #28]	; (800c040 <HAL_RCC_OscConfig+0x85c>)
 800c024:	4313      	orrs	r3, r2
 800c026:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800c028:	4b05      	ldr	r3, [pc, #20]	; (800c040 <HAL_RCC_OscConfig+0x85c>)
 800c02a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c02c:	4a04      	ldr	r2, [pc, #16]	; (800c040 <HAL_RCC_OscConfig+0x85c>)
 800c02e:	f043 0301 	orr.w	r3, r3, #1
 800c032:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800c034:	2300      	movs	r3, #0
}
 800c036:	4618      	mov	r0, r3
 800c038:	3730      	adds	r7, #48	; 0x30
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}
 800c03e:	bf00      	nop
 800c040:	58024400 	.word	0x58024400
 800c044:	ffff0007 	.word	0xffff0007

0800c048 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b086      	sub	sp, #24
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
 800c050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d101      	bne.n	800c05c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c058:	2301      	movs	r3, #1
 800c05a:	e19c      	b.n	800c396 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c05c:	4b8a      	ldr	r3, [pc, #552]	; (800c288 <HAL_RCC_ClockConfig+0x240>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	f003 030f 	and.w	r3, r3, #15
 800c064:	683a      	ldr	r2, [r7, #0]
 800c066:	429a      	cmp	r2, r3
 800c068:	d910      	bls.n	800c08c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c06a:	4b87      	ldr	r3, [pc, #540]	; (800c288 <HAL_RCC_ClockConfig+0x240>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	f023 020f 	bic.w	r2, r3, #15
 800c072:	4985      	ldr	r1, [pc, #532]	; (800c288 <HAL_RCC_ClockConfig+0x240>)
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	4313      	orrs	r3, r2
 800c078:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c07a:	4b83      	ldr	r3, [pc, #524]	; (800c288 <HAL_RCC_ClockConfig+0x240>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f003 030f 	and.w	r3, r3, #15
 800c082:	683a      	ldr	r2, [r7, #0]
 800c084:	429a      	cmp	r2, r3
 800c086:	d001      	beq.n	800c08c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c088:	2301      	movs	r3, #1
 800c08a:	e184      	b.n	800c396 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	f003 0304 	and.w	r3, r3, #4
 800c094:	2b00      	cmp	r3, #0
 800c096:	d010      	beq.n	800c0ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	691a      	ldr	r2, [r3, #16]
 800c09c:	4b7b      	ldr	r3, [pc, #492]	; (800c28c <HAL_RCC_ClockConfig+0x244>)
 800c09e:	699b      	ldr	r3, [r3, #24]
 800c0a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c0a4:	429a      	cmp	r2, r3
 800c0a6:	d908      	bls.n	800c0ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c0a8:	4b78      	ldr	r3, [pc, #480]	; (800c28c <HAL_RCC_ClockConfig+0x244>)
 800c0aa:	699b      	ldr	r3, [r3, #24]
 800c0ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	691b      	ldr	r3, [r3, #16]
 800c0b4:	4975      	ldr	r1, [pc, #468]	; (800c28c <HAL_RCC_ClockConfig+0x244>)
 800c0b6:	4313      	orrs	r3, r2
 800c0b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	f003 0308 	and.w	r3, r3, #8
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d010      	beq.n	800c0e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	695a      	ldr	r2, [r3, #20]
 800c0ca:	4b70      	ldr	r3, [pc, #448]	; (800c28c <HAL_RCC_ClockConfig+0x244>)
 800c0cc:	69db      	ldr	r3, [r3, #28]
 800c0ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c0d2:	429a      	cmp	r2, r3
 800c0d4:	d908      	bls.n	800c0e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c0d6:	4b6d      	ldr	r3, [pc, #436]	; (800c28c <HAL_RCC_ClockConfig+0x244>)
 800c0d8:	69db      	ldr	r3, [r3, #28]
 800c0da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	695b      	ldr	r3, [r3, #20]
 800c0e2:	496a      	ldr	r1, [pc, #424]	; (800c28c <HAL_RCC_ClockConfig+0x244>)
 800c0e4:	4313      	orrs	r3, r2
 800c0e6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	f003 0310 	and.w	r3, r3, #16
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d010      	beq.n	800c116 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	699a      	ldr	r2, [r3, #24]
 800c0f8:	4b64      	ldr	r3, [pc, #400]	; (800c28c <HAL_RCC_ClockConfig+0x244>)
 800c0fa:	69db      	ldr	r3, [r3, #28]
 800c0fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c100:	429a      	cmp	r2, r3
 800c102:	d908      	bls.n	800c116 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c104:	4b61      	ldr	r3, [pc, #388]	; (800c28c <HAL_RCC_ClockConfig+0x244>)
 800c106:	69db      	ldr	r3, [r3, #28]
 800c108:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	699b      	ldr	r3, [r3, #24]
 800c110:	495e      	ldr	r1, [pc, #376]	; (800c28c <HAL_RCC_ClockConfig+0x244>)
 800c112:	4313      	orrs	r3, r2
 800c114:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	f003 0320 	and.w	r3, r3, #32
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d010      	beq.n	800c144 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	69da      	ldr	r2, [r3, #28]
 800c126:	4b59      	ldr	r3, [pc, #356]	; (800c28c <HAL_RCC_ClockConfig+0x244>)
 800c128:	6a1b      	ldr	r3, [r3, #32]
 800c12a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c12e:	429a      	cmp	r2, r3
 800c130:	d908      	bls.n	800c144 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c132:	4b56      	ldr	r3, [pc, #344]	; (800c28c <HAL_RCC_ClockConfig+0x244>)
 800c134:	6a1b      	ldr	r3, [r3, #32]
 800c136:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	69db      	ldr	r3, [r3, #28]
 800c13e:	4953      	ldr	r1, [pc, #332]	; (800c28c <HAL_RCC_ClockConfig+0x244>)
 800c140:	4313      	orrs	r3, r2
 800c142:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	f003 0302 	and.w	r3, r3, #2
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d010      	beq.n	800c172 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	68da      	ldr	r2, [r3, #12]
 800c154:	4b4d      	ldr	r3, [pc, #308]	; (800c28c <HAL_RCC_ClockConfig+0x244>)
 800c156:	699b      	ldr	r3, [r3, #24]
 800c158:	f003 030f 	and.w	r3, r3, #15
 800c15c:	429a      	cmp	r2, r3
 800c15e:	d908      	bls.n	800c172 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c160:	4b4a      	ldr	r3, [pc, #296]	; (800c28c <HAL_RCC_ClockConfig+0x244>)
 800c162:	699b      	ldr	r3, [r3, #24]
 800c164:	f023 020f 	bic.w	r2, r3, #15
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	68db      	ldr	r3, [r3, #12]
 800c16c:	4947      	ldr	r1, [pc, #284]	; (800c28c <HAL_RCC_ClockConfig+0x244>)
 800c16e:	4313      	orrs	r3, r2
 800c170:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	f003 0301 	and.w	r3, r3, #1
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d055      	beq.n	800c22a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800c17e:	4b43      	ldr	r3, [pc, #268]	; (800c28c <HAL_RCC_ClockConfig+0x244>)
 800c180:	699b      	ldr	r3, [r3, #24]
 800c182:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	689b      	ldr	r3, [r3, #8]
 800c18a:	4940      	ldr	r1, [pc, #256]	; (800c28c <HAL_RCC_ClockConfig+0x244>)
 800c18c:	4313      	orrs	r3, r2
 800c18e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	685b      	ldr	r3, [r3, #4]
 800c194:	2b02      	cmp	r3, #2
 800c196:	d107      	bne.n	800c1a8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c198:	4b3c      	ldr	r3, [pc, #240]	; (800c28c <HAL_RCC_ClockConfig+0x244>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d121      	bne.n	800c1e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	e0f6      	b.n	800c396 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	685b      	ldr	r3, [r3, #4]
 800c1ac:	2b03      	cmp	r3, #3
 800c1ae:	d107      	bne.n	800c1c0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c1b0:	4b36      	ldr	r3, [pc, #216]	; (800c28c <HAL_RCC_ClockConfig+0x244>)
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d115      	bne.n	800c1e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c1bc:	2301      	movs	r3, #1
 800c1be:	e0ea      	b.n	800c396 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	685b      	ldr	r3, [r3, #4]
 800c1c4:	2b01      	cmp	r3, #1
 800c1c6:	d107      	bne.n	800c1d8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c1c8:	4b30      	ldr	r3, [pc, #192]	; (800c28c <HAL_RCC_ClockConfig+0x244>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d109      	bne.n	800c1e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	e0de      	b.n	800c396 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c1d8:	4b2c      	ldr	r3, [pc, #176]	; (800c28c <HAL_RCC_ClockConfig+0x244>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	f003 0304 	and.w	r3, r3, #4
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d101      	bne.n	800c1e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	e0d6      	b.n	800c396 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c1e8:	4b28      	ldr	r3, [pc, #160]	; (800c28c <HAL_RCC_ClockConfig+0x244>)
 800c1ea:	691b      	ldr	r3, [r3, #16]
 800c1ec:	f023 0207 	bic.w	r2, r3, #7
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	685b      	ldr	r3, [r3, #4]
 800c1f4:	4925      	ldr	r1, [pc, #148]	; (800c28c <HAL_RCC_ClockConfig+0x244>)
 800c1f6:	4313      	orrs	r3, r2
 800c1f8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c1fa:	f7f7 ff3f 	bl	800407c <HAL_GetTick>
 800c1fe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c200:	e00a      	b.n	800c218 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c202:	f7f7 ff3b 	bl	800407c <HAL_GetTick>
 800c206:	4602      	mov	r2, r0
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	1ad3      	subs	r3, r2, r3
 800c20c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c210:	4293      	cmp	r3, r2
 800c212:	d901      	bls.n	800c218 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800c214:	2303      	movs	r3, #3
 800c216:	e0be      	b.n	800c396 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c218:	4b1c      	ldr	r3, [pc, #112]	; (800c28c <HAL_RCC_ClockConfig+0x244>)
 800c21a:	691b      	ldr	r3, [r3, #16]
 800c21c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	685b      	ldr	r3, [r3, #4]
 800c224:	00db      	lsls	r3, r3, #3
 800c226:	429a      	cmp	r2, r3
 800c228:	d1eb      	bne.n	800c202 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	f003 0302 	and.w	r3, r3, #2
 800c232:	2b00      	cmp	r3, #0
 800c234:	d010      	beq.n	800c258 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	68da      	ldr	r2, [r3, #12]
 800c23a:	4b14      	ldr	r3, [pc, #80]	; (800c28c <HAL_RCC_ClockConfig+0x244>)
 800c23c:	699b      	ldr	r3, [r3, #24]
 800c23e:	f003 030f 	and.w	r3, r3, #15
 800c242:	429a      	cmp	r2, r3
 800c244:	d208      	bcs.n	800c258 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c246:	4b11      	ldr	r3, [pc, #68]	; (800c28c <HAL_RCC_ClockConfig+0x244>)
 800c248:	699b      	ldr	r3, [r3, #24]
 800c24a:	f023 020f 	bic.w	r2, r3, #15
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	68db      	ldr	r3, [r3, #12]
 800c252:	490e      	ldr	r1, [pc, #56]	; (800c28c <HAL_RCC_ClockConfig+0x244>)
 800c254:	4313      	orrs	r3, r2
 800c256:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c258:	4b0b      	ldr	r3, [pc, #44]	; (800c288 <HAL_RCC_ClockConfig+0x240>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	f003 030f 	and.w	r3, r3, #15
 800c260:	683a      	ldr	r2, [r7, #0]
 800c262:	429a      	cmp	r2, r3
 800c264:	d214      	bcs.n	800c290 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c266:	4b08      	ldr	r3, [pc, #32]	; (800c288 <HAL_RCC_ClockConfig+0x240>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	f023 020f 	bic.w	r2, r3, #15
 800c26e:	4906      	ldr	r1, [pc, #24]	; (800c288 <HAL_RCC_ClockConfig+0x240>)
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	4313      	orrs	r3, r2
 800c274:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c276:	4b04      	ldr	r3, [pc, #16]	; (800c288 <HAL_RCC_ClockConfig+0x240>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f003 030f 	and.w	r3, r3, #15
 800c27e:	683a      	ldr	r2, [r7, #0]
 800c280:	429a      	cmp	r2, r3
 800c282:	d005      	beq.n	800c290 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800c284:	2301      	movs	r3, #1
 800c286:	e086      	b.n	800c396 <HAL_RCC_ClockConfig+0x34e>
 800c288:	52002000 	.word	0x52002000
 800c28c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	f003 0304 	and.w	r3, r3, #4
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d010      	beq.n	800c2be <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	691a      	ldr	r2, [r3, #16]
 800c2a0:	4b3f      	ldr	r3, [pc, #252]	; (800c3a0 <HAL_RCC_ClockConfig+0x358>)
 800c2a2:	699b      	ldr	r3, [r3, #24]
 800c2a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c2a8:	429a      	cmp	r2, r3
 800c2aa:	d208      	bcs.n	800c2be <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c2ac:	4b3c      	ldr	r3, [pc, #240]	; (800c3a0 <HAL_RCC_ClockConfig+0x358>)
 800c2ae:	699b      	ldr	r3, [r3, #24]
 800c2b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	691b      	ldr	r3, [r3, #16]
 800c2b8:	4939      	ldr	r1, [pc, #228]	; (800c3a0 <HAL_RCC_ClockConfig+0x358>)
 800c2ba:	4313      	orrs	r3, r2
 800c2bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	f003 0308 	and.w	r3, r3, #8
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d010      	beq.n	800c2ec <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	695a      	ldr	r2, [r3, #20]
 800c2ce:	4b34      	ldr	r3, [pc, #208]	; (800c3a0 <HAL_RCC_ClockConfig+0x358>)
 800c2d0:	69db      	ldr	r3, [r3, #28]
 800c2d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c2d6:	429a      	cmp	r2, r3
 800c2d8:	d208      	bcs.n	800c2ec <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c2da:	4b31      	ldr	r3, [pc, #196]	; (800c3a0 <HAL_RCC_ClockConfig+0x358>)
 800c2dc:	69db      	ldr	r3, [r3, #28]
 800c2de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	695b      	ldr	r3, [r3, #20]
 800c2e6:	492e      	ldr	r1, [pc, #184]	; (800c3a0 <HAL_RCC_ClockConfig+0x358>)
 800c2e8:	4313      	orrs	r3, r2
 800c2ea:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	f003 0310 	and.w	r3, r3, #16
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d010      	beq.n	800c31a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	699a      	ldr	r2, [r3, #24]
 800c2fc:	4b28      	ldr	r3, [pc, #160]	; (800c3a0 <HAL_RCC_ClockConfig+0x358>)
 800c2fe:	69db      	ldr	r3, [r3, #28]
 800c300:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c304:	429a      	cmp	r2, r3
 800c306:	d208      	bcs.n	800c31a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c308:	4b25      	ldr	r3, [pc, #148]	; (800c3a0 <HAL_RCC_ClockConfig+0x358>)
 800c30a:	69db      	ldr	r3, [r3, #28]
 800c30c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	699b      	ldr	r3, [r3, #24]
 800c314:	4922      	ldr	r1, [pc, #136]	; (800c3a0 <HAL_RCC_ClockConfig+0x358>)
 800c316:	4313      	orrs	r3, r2
 800c318:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	f003 0320 	and.w	r3, r3, #32
 800c322:	2b00      	cmp	r3, #0
 800c324:	d010      	beq.n	800c348 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	69da      	ldr	r2, [r3, #28]
 800c32a:	4b1d      	ldr	r3, [pc, #116]	; (800c3a0 <HAL_RCC_ClockConfig+0x358>)
 800c32c:	6a1b      	ldr	r3, [r3, #32]
 800c32e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c332:	429a      	cmp	r2, r3
 800c334:	d208      	bcs.n	800c348 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c336:	4b1a      	ldr	r3, [pc, #104]	; (800c3a0 <HAL_RCC_ClockConfig+0x358>)
 800c338:	6a1b      	ldr	r3, [r3, #32]
 800c33a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	69db      	ldr	r3, [r3, #28]
 800c342:	4917      	ldr	r1, [pc, #92]	; (800c3a0 <HAL_RCC_ClockConfig+0x358>)
 800c344:	4313      	orrs	r3, r2
 800c346:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800c348:	f000 f834 	bl	800c3b4 <HAL_RCC_GetSysClockFreq>
 800c34c:	4602      	mov	r2, r0
 800c34e:	4b14      	ldr	r3, [pc, #80]	; (800c3a0 <HAL_RCC_ClockConfig+0x358>)
 800c350:	699b      	ldr	r3, [r3, #24]
 800c352:	0a1b      	lsrs	r3, r3, #8
 800c354:	f003 030f 	and.w	r3, r3, #15
 800c358:	4912      	ldr	r1, [pc, #72]	; (800c3a4 <HAL_RCC_ClockConfig+0x35c>)
 800c35a:	5ccb      	ldrb	r3, [r1, r3]
 800c35c:	f003 031f 	and.w	r3, r3, #31
 800c360:	fa22 f303 	lsr.w	r3, r2, r3
 800c364:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800c366:	4b0e      	ldr	r3, [pc, #56]	; (800c3a0 <HAL_RCC_ClockConfig+0x358>)
 800c368:	699b      	ldr	r3, [r3, #24]
 800c36a:	f003 030f 	and.w	r3, r3, #15
 800c36e:	4a0d      	ldr	r2, [pc, #52]	; (800c3a4 <HAL_RCC_ClockConfig+0x35c>)
 800c370:	5cd3      	ldrb	r3, [r2, r3]
 800c372:	f003 031f 	and.w	r3, r3, #31
 800c376:	693a      	ldr	r2, [r7, #16]
 800c378:	fa22 f303 	lsr.w	r3, r2, r3
 800c37c:	4a0a      	ldr	r2, [pc, #40]	; (800c3a8 <HAL_RCC_ClockConfig+0x360>)
 800c37e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c380:	4a0a      	ldr	r2, [pc, #40]	; (800c3ac <HAL_RCC_ClockConfig+0x364>)
 800c382:	693b      	ldr	r3, [r7, #16]
 800c384:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800c386:	4b0a      	ldr	r3, [pc, #40]	; (800c3b0 <HAL_RCC_ClockConfig+0x368>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	4618      	mov	r0, r3
 800c38c:	f7f7 fe2c 	bl	8003fe8 <HAL_InitTick>
 800c390:	4603      	mov	r3, r0
 800c392:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800c394:	7bfb      	ldrb	r3, [r7, #15]
}
 800c396:	4618      	mov	r0, r3
 800c398:	3718      	adds	r7, #24
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}
 800c39e:	bf00      	nop
 800c3a0:	58024400 	.word	0x58024400
 800c3a4:	080144a8 	.word	0x080144a8
 800c3a8:	20000048 	.word	0x20000048
 800c3ac:	20000044 	.word	0x20000044
 800c3b0:	2000004c 	.word	0x2000004c

0800c3b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c3b4:	b480      	push	{r7}
 800c3b6:	b089      	sub	sp, #36	; 0x24
 800c3b8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c3ba:	4bb3      	ldr	r3, [pc, #716]	; (800c688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c3bc:	691b      	ldr	r3, [r3, #16]
 800c3be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c3c2:	2b18      	cmp	r3, #24
 800c3c4:	f200 8155 	bhi.w	800c672 <HAL_RCC_GetSysClockFreq+0x2be>
 800c3c8:	a201      	add	r2, pc, #4	; (adr r2, 800c3d0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800c3ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3ce:	bf00      	nop
 800c3d0:	0800c435 	.word	0x0800c435
 800c3d4:	0800c673 	.word	0x0800c673
 800c3d8:	0800c673 	.word	0x0800c673
 800c3dc:	0800c673 	.word	0x0800c673
 800c3e0:	0800c673 	.word	0x0800c673
 800c3e4:	0800c673 	.word	0x0800c673
 800c3e8:	0800c673 	.word	0x0800c673
 800c3ec:	0800c673 	.word	0x0800c673
 800c3f0:	0800c45b 	.word	0x0800c45b
 800c3f4:	0800c673 	.word	0x0800c673
 800c3f8:	0800c673 	.word	0x0800c673
 800c3fc:	0800c673 	.word	0x0800c673
 800c400:	0800c673 	.word	0x0800c673
 800c404:	0800c673 	.word	0x0800c673
 800c408:	0800c673 	.word	0x0800c673
 800c40c:	0800c673 	.word	0x0800c673
 800c410:	0800c461 	.word	0x0800c461
 800c414:	0800c673 	.word	0x0800c673
 800c418:	0800c673 	.word	0x0800c673
 800c41c:	0800c673 	.word	0x0800c673
 800c420:	0800c673 	.word	0x0800c673
 800c424:	0800c673 	.word	0x0800c673
 800c428:	0800c673 	.word	0x0800c673
 800c42c:	0800c673 	.word	0x0800c673
 800c430:	0800c467 	.word	0x0800c467
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c434:	4b94      	ldr	r3, [pc, #592]	; (800c688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	f003 0320 	and.w	r3, r3, #32
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d009      	beq.n	800c454 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c440:	4b91      	ldr	r3, [pc, #580]	; (800c688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	08db      	lsrs	r3, r3, #3
 800c446:	f003 0303 	and.w	r3, r3, #3
 800c44a:	4a90      	ldr	r2, [pc, #576]	; (800c68c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c44c:	fa22 f303 	lsr.w	r3, r2, r3
 800c450:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800c452:	e111      	b.n	800c678 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800c454:	4b8d      	ldr	r3, [pc, #564]	; (800c68c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c456:	61bb      	str	r3, [r7, #24]
      break;
 800c458:	e10e      	b.n	800c678 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800c45a:	4b8d      	ldr	r3, [pc, #564]	; (800c690 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c45c:	61bb      	str	r3, [r7, #24]
      break;
 800c45e:	e10b      	b.n	800c678 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800c460:	4b8c      	ldr	r3, [pc, #560]	; (800c694 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800c462:	61bb      	str	r3, [r7, #24]
      break;
 800c464:	e108      	b.n	800c678 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c466:	4b88      	ldr	r3, [pc, #544]	; (800c688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c46a:	f003 0303 	and.w	r3, r3, #3
 800c46e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800c470:	4b85      	ldr	r3, [pc, #532]	; (800c688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c474:	091b      	lsrs	r3, r3, #4
 800c476:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c47a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c47c:	4b82      	ldr	r3, [pc, #520]	; (800c688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c47e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c480:	f003 0301 	and.w	r3, r3, #1
 800c484:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c486:	4b80      	ldr	r3, [pc, #512]	; (800c688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c48a:	08db      	lsrs	r3, r3, #3
 800c48c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c490:	68fa      	ldr	r2, [r7, #12]
 800c492:	fb02 f303 	mul.w	r3, r2, r3
 800c496:	ee07 3a90 	vmov	s15, r3
 800c49a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c49e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800c4a2:	693b      	ldr	r3, [r7, #16]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	f000 80e1 	beq.w	800c66c <HAL_RCC_GetSysClockFreq+0x2b8>
 800c4aa:	697b      	ldr	r3, [r7, #20]
 800c4ac:	2b02      	cmp	r3, #2
 800c4ae:	f000 8083 	beq.w	800c5b8 <HAL_RCC_GetSysClockFreq+0x204>
 800c4b2:	697b      	ldr	r3, [r7, #20]
 800c4b4:	2b02      	cmp	r3, #2
 800c4b6:	f200 80a1 	bhi.w	800c5fc <HAL_RCC_GetSysClockFreq+0x248>
 800c4ba:	697b      	ldr	r3, [r7, #20]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d003      	beq.n	800c4c8 <HAL_RCC_GetSysClockFreq+0x114>
 800c4c0:	697b      	ldr	r3, [r7, #20]
 800c4c2:	2b01      	cmp	r3, #1
 800c4c4:	d056      	beq.n	800c574 <HAL_RCC_GetSysClockFreq+0x1c0>
 800c4c6:	e099      	b.n	800c5fc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c4c8:	4b6f      	ldr	r3, [pc, #444]	; (800c688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	f003 0320 	and.w	r3, r3, #32
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d02d      	beq.n	800c530 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c4d4:	4b6c      	ldr	r3, [pc, #432]	; (800c688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	08db      	lsrs	r3, r3, #3
 800c4da:	f003 0303 	and.w	r3, r3, #3
 800c4de:	4a6b      	ldr	r2, [pc, #428]	; (800c68c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c4e0:	fa22 f303 	lsr.w	r3, r2, r3
 800c4e4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	ee07 3a90 	vmov	s15, r3
 800c4ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4f0:	693b      	ldr	r3, [r7, #16]
 800c4f2:	ee07 3a90 	vmov	s15, r3
 800c4f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4fe:	4b62      	ldr	r3, [pc, #392]	; (800c688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c506:	ee07 3a90 	vmov	s15, r3
 800c50a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c50e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c512:	eddf 5a61 	vldr	s11, [pc, #388]	; 800c698 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c51a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c51e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c52a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800c52e:	e087      	b.n	800c640 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c530:	693b      	ldr	r3, [r7, #16]
 800c532:	ee07 3a90 	vmov	s15, r3
 800c536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c53a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800c69c <HAL_RCC_GetSysClockFreq+0x2e8>
 800c53e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c542:	4b51      	ldr	r3, [pc, #324]	; (800c688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c54a:	ee07 3a90 	vmov	s15, r3
 800c54e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c552:	ed97 6a02 	vldr	s12, [r7, #8]
 800c556:	eddf 5a50 	vldr	s11, [pc, #320]	; 800c698 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c55a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c55e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c562:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c56a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c56e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c572:	e065      	b.n	800c640 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	ee07 3a90 	vmov	s15, r3
 800c57a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c57e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800c6a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c586:	4b40      	ldr	r3, [pc, #256]	; (800c688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c58a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c58e:	ee07 3a90 	vmov	s15, r3
 800c592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c596:	ed97 6a02 	vldr	s12, [r7, #8]
 800c59a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800c698 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c59e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c5aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c5b6:	e043      	b.n	800c640 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c5b8:	693b      	ldr	r3, [r7, #16]
 800c5ba:	ee07 3a90 	vmov	s15, r3
 800c5be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5c2:	eddf 6a38 	vldr	s13, [pc, #224]	; 800c6a4 <HAL_RCC_GetSysClockFreq+0x2f0>
 800c5c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5ca:	4b2f      	ldr	r3, [pc, #188]	; (800c688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c5cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5d2:	ee07 3a90 	vmov	s15, r3
 800c5d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5da:	ed97 6a02 	vldr	s12, [r7, #8]
 800c5de:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800c698 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c5e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c5ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c5fa:	e021      	b.n	800c640 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c5fc:	693b      	ldr	r3, [r7, #16]
 800c5fe:	ee07 3a90 	vmov	s15, r3
 800c602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c606:	eddf 6a26 	vldr	s13, [pc, #152]	; 800c6a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c60a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c60e:	4b1e      	ldr	r3, [pc, #120]	; (800c688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c616:	ee07 3a90 	vmov	s15, r3
 800c61a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c61e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c622:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800c698 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c62a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c62e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c63a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c63e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800c640:	4b11      	ldr	r3, [pc, #68]	; (800c688 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c644:	0a5b      	lsrs	r3, r3, #9
 800c646:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c64a:	3301      	adds	r3, #1
 800c64c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	ee07 3a90 	vmov	s15, r3
 800c654:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c658:	edd7 6a07 	vldr	s13, [r7, #28]
 800c65c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c660:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c664:	ee17 3a90 	vmov	r3, s15
 800c668:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800c66a:	e005      	b.n	800c678 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800c66c:	2300      	movs	r3, #0
 800c66e:	61bb      	str	r3, [r7, #24]
      break;
 800c670:	e002      	b.n	800c678 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800c672:	4b07      	ldr	r3, [pc, #28]	; (800c690 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c674:	61bb      	str	r3, [r7, #24]
      break;
 800c676:	bf00      	nop
  }

  return sysclockfreq;
 800c678:	69bb      	ldr	r3, [r7, #24]
}
 800c67a:	4618      	mov	r0, r3
 800c67c:	3724      	adds	r7, #36	; 0x24
 800c67e:	46bd      	mov	sp, r7
 800c680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c684:	4770      	bx	lr
 800c686:	bf00      	nop
 800c688:	58024400 	.word	0x58024400
 800c68c:	03d09000 	.word	0x03d09000
 800c690:	003d0900 	.word	0x003d0900
 800c694:	016e3600 	.word	0x016e3600
 800c698:	46000000 	.word	0x46000000
 800c69c:	4c742400 	.word	0x4c742400
 800c6a0:	4a742400 	.word	0x4a742400
 800c6a4:	4bb71b00 	.word	0x4bb71b00

0800c6a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b082      	sub	sp, #8
 800c6ac:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800c6ae:	f7ff fe81 	bl	800c3b4 <HAL_RCC_GetSysClockFreq>
 800c6b2:	4602      	mov	r2, r0
 800c6b4:	4b10      	ldr	r3, [pc, #64]	; (800c6f8 <HAL_RCC_GetHCLKFreq+0x50>)
 800c6b6:	699b      	ldr	r3, [r3, #24]
 800c6b8:	0a1b      	lsrs	r3, r3, #8
 800c6ba:	f003 030f 	and.w	r3, r3, #15
 800c6be:	490f      	ldr	r1, [pc, #60]	; (800c6fc <HAL_RCC_GetHCLKFreq+0x54>)
 800c6c0:	5ccb      	ldrb	r3, [r1, r3]
 800c6c2:	f003 031f 	and.w	r3, r3, #31
 800c6c6:	fa22 f303 	lsr.w	r3, r2, r3
 800c6ca:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800c6cc:	4b0a      	ldr	r3, [pc, #40]	; (800c6f8 <HAL_RCC_GetHCLKFreq+0x50>)
 800c6ce:	699b      	ldr	r3, [r3, #24]
 800c6d0:	f003 030f 	and.w	r3, r3, #15
 800c6d4:	4a09      	ldr	r2, [pc, #36]	; (800c6fc <HAL_RCC_GetHCLKFreq+0x54>)
 800c6d6:	5cd3      	ldrb	r3, [r2, r3]
 800c6d8:	f003 031f 	and.w	r3, r3, #31
 800c6dc:	687a      	ldr	r2, [r7, #4]
 800c6de:	fa22 f303 	lsr.w	r3, r2, r3
 800c6e2:	4a07      	ldr	r2, [pc, #28]	; (800c700 <HAL_RCC_GetHCLKFreq+0x58>)
 800c6e4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c6e6:	4a07      	ldr	r2, [pc, #28]	; (800c704 <HAL_RCC_GetHCLKFreq+0x5c>)
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800c6ec:	4b04      	ldr	r3, [pc, #16]	; (800c700 <HAL_RCC_GetHCLKFreq+0x58>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
}
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	3708      	adds	r7, #8
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bd80      	pop	{r7, pc}
 800c6f8:	58024400 	.word	0x58024400
 800c6fc:	080144a8 	.word	0x080144a8
 800c700:	20000048 	.word	0x20000048
 800c704:	20000044 	.word	0x20000044

0800c708 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800c70c:	f7ff ffcc 	bl	800c6a8 <HAL_RCC_GetHCLKFreq>
 800c710:	4602      	mov	r2, r0
 800c712:	4b06      	ldr	r3, [pc, #24]	; (800c72c <HAL_RCC_GetPCLK1Freq+0x24>)
 800c714:	69db      	ldr	r3, [r3, #28]
 800c716:	091b      	lsrs	r3, r3, #4
 800c718:	f003 0307 	and.w	r3, r3, #7
 800c71c:	4904      	ldr	r1, [pc, #16]	; (800c730 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c71e:	5ccb      	ldrb	r3, [r1, r3]
 800c720:	f003 031f 	and.w	r3, r3, #31
 800c724:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800c728:	4618      	mov	r0, r3
 800c72a:	bd80      	pop	{r7, pc}
 800c72c:	58024400 	.word	0x58024400
 800c730:	080144a8 	.word	0x080144a8

0800c734 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c734:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c738:	b0c8      	sub	sp, #288	; 0x120
 800c73a:	af00      	add	r7, sp, #0
 800c73c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c740:	2300      	movs	r3, #0
 800c742:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c746:	2300      	movs	r3, #0
 800c748:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c74c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c754:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800c758:	2500      	movs	r5, #0
 800c75a:	ea54 0305 	orrs.w	r3, r4, r5
 800c75e:	d049      	beq.n	800c7f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800c760:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c764:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c766:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c76a:	d02f      	beq.n	800c7cc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800c76c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c770:	d828      	bhi.n	800c7c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c772:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c776:	d01a      	beq.n	800c7ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800c778:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c77c:	d822      	bhi.n	800c7c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d003      	beq.n	800c78a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800c782:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c786:	d007      	beq.n	800c798 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c788:	e01c      	b.n	800c7c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c78a:	4ba7      	ldr	r3, [pc, #668]	; (800ca28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c78c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c78e:	4aa6      	ldr	r2, [pc, #664]	; (800ca28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c794:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c796:	e01a      	b.n	800c7ce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c798:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c79c:	3308      	adds	r3, #8
 800c79e:	2102      	movs	r1, #2
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	f002 fa6d 	bl	800ec80 <RCCEx_PLL2_Config>
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c7ac:	e00f      	b.n	800c7ce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c7ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c7b2:	3328      	adds	r3, #40	; 0x28
 800c7b4:	2102      	movs	r1, #2
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f002 fb14 	bl	800ede4 <RCCEx_PLL3_Config>
 800c7bc:	4603      	mov	r3, r0
 800c7be:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c7c2:	e004      	b.n	800c7ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c7c4:	2301      	movs	r3, #1
 800c7c6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c7ca:	e000      	b.n	800c7ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800c7cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c7ce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d10a      	bne.n	800c7ec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c7d6:	4b94      	ldr	r3, [pc, #592]	; (800ca28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c7d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7da:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c7de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c7e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7e4:	4a90      	ldr	r2, [pc, #576]	; (800ca28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c7e6:	430b      	orrs	r3, r1
 800c7e8:	6513      	str	r3, [r2, #80]	; 0x50
 800c7ea:	e003      	b.n	800c7f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7ec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c7f0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c7f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7fc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800c800:	f04f 0900 	mov.w	r9, #0
 800c804:	ea58 0309 	orrs.w	r3, r8, r9
 800c808:	d047      	beq.n	800c89a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800c80a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c80e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c810:	2b04      	cmp	r3, #4
 800c812:	d82a      	bhi.n	800c86a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800c814:	a201      	add	r2, pc, #4	; (adr r2, 800c81c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800c816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c81a:	bf00      	nop
 800c81c:	0800c831 	.word	0x0800c831
 800c820:	0800c83f 	.word	0x0800c83f
 800c824:	0800c855 	.word	0x0800c855
 800c828:	0800c873 	.word	0x0800c873
 800c82c:	0800c873 	.word	0x0800c873
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c830:	4b7d      	ldr	r3, [pc, #500]	; (800ca28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c834:	4a7c      	ldr	r2, [pc, #496]	; (800ca28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c83a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c83c:	e01a      	b.n	800c874 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c83e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c842:	3308      	adds	r3, #8
 800c844:	2100      	movs	r1, #0
 800c846:	4618      	mov	r0, r3
 800c848:	f002 fa1a 	bl	800ec80 <RCCEx_PLL2_Config>
 800c84c:	4603      	mov	r3, r0
 800c84e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c852:	e00f      	b.n	800c874 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c854:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c858:	3328      	adds	r3, #40	; 0x28
 800c85a:	2100      	movs	r1, #0
 800c85c:	4618      	mov	r0, r3
 800c85e:	f002 fac1 	bl	800ede4 <RCCEx_PLL3_Config>
 800c862:	4603      	mov	r3, r0
 800c864:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c868:	e004      	b.n	800c874 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c86a:	2301      	movs	r3, #1
 800c86c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c870:	e000      	b.n	800c874 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800c872:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c874:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d10a      	bne.n	800c892 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c87c:	4b6a      	ldr	r3, [pc, #424]	; (800ca28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c87e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c880:	f023 0107 	bic.w	r1, r3, #7
 800c884:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c88a:	4a67      	ldr	r2, [pc, #412]	; (800ca28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c88c:	430b      	orrs	r3, r1
 800c88e:	6513      	str	r3, [r2, #80]	; 0x50
 800c890:	e003      	b.n	800c89a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c892:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c896:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800c89a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8a2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800c8a6:	f04f 0b00 	mov.w	fp, #0
 800c8aa:	ea5a 030b 	orrs.w	r3, sl, fp
 800c8ae:	d054      	beq.n	800c95a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800c8b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c8b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c8b6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800c8ba:	d036      	beq.n	800c92a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800c8bc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800c8c0:	d82f      	bhi.n	800c922 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800c8c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8c6:	d032      	beq.n	800c92e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c8c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8cc:	d829      	bhi.n	800c922 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800c8ce:	2bc0      	cmp	r3, #192	; 0xc0
 800c8d0:	d02f      	beq.n	800c932 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800c8d2:	2bc0      	cmp	r3, #192	; 0xc0
 800c8d4:	d825      	bhi.n	800c922 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800c8d6:	2b80      	cmp	r3, #128	; 0x80
 800c8d8:	d018      	beq.n	800c90c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800c8da:	2b80      	cmp	r3, #128	; 0x80
 800c8dc:	d821      	bhi.n	800c922 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d002      	beq.n	800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800c8e2:	2b40      	cmp	r3, #64	; 0x40
 800c8e4:	d007      	beq.n	800c8f6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800c8e6:	e01c      	b.n	800c922 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c8e8:	4b4f      	ldr	r3, [pc, #316]	; (800ca28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c8ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8ec:	4a4e      	ldr	r2, [pc, #312]	; (800ca28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c8ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c8f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800c8f4:	e01e      	b.n	800c934 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c8f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c8fa:	3308      	adds	r3, #8
 800c8fc:	2100      	movs	r1, #0
 800c8fe:	4618      	mov	r0, r3
 800c900:	f002 f9be 	bl	800ec80 <RCCEx_PLL2_Config>
 800c904:	4603      	mov	r3, r0
 800c906:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800c90a:	e013      	b.n	800c934 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c90c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c910:	3328      	adds	r3, #40	; 0x28
 800c912:	2100      	movs	r1, #0
 800c914:	4618      	mov	r0, r3
 800c916:	f002 fa65 	bl	800ede4 <RCCEx_PLL3_Config>
 800c91a:	4603      	mov	r3, r0
 800c91c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800c920:	e008      	b.n	800c934 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c922:	2301      	movs	r3, #1
 800c924:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c928:	e004      	b.n	800c934 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800c92a:	bf00      	nop
 800c92c:	e002      	b.n	800c934 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800c92e:	bf00      	nop
 800c930:	e000      	b.n	800c934 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800c932:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c934:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d10a      	bne.n	800c952 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800c93c:	4b3a      	ldr	r3, [pc, #232]	; (800ca28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c93e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c940:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800c944:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c94a:	4a37      	ldr	r2, [pc, #220]	; (800ca28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c94c:	430b      	orrs	r3, r1
 800c94e:	6513      	str	r3, [r2, #80]	; 0x50
 800c950:	e003      	b.n	800c95a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c952:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c956:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800c95a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c962:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800c966:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c96a:	2300      	movs	r3, #0
 800c96c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c970:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800c974:	460b      	mov	r3, r1
 800c976:	4313      	orrs	r3, r2
 800c978:	d05c      	beq.n	800ca34 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800c97a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c97e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c980:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800c984:	d03b      	beq.n	800c9fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800c986:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800c98a:	d834      	bhi.n	800c9f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800c98c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c990:	d037      	beq.n	800ca02 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800c992:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c996:	d82e      	bhi.n	800c9f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800c998:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c99c:	d033      	beq.n	800ca06 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c99e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c9a2:	d828      	bhi.n	800c9f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800c9a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c9a8:	d01a      	beq.n	800c9e0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800c9aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c9ae:	d822      	bhi.n	800c9f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d003      	beq.n	800c9bc <HAL_RCCEx_PeriphCLKConfig+0x288>
 800c9b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c9b8:	d007      	beq.n	800c9ca <HAL_RCCEx_PeriphCLKConfig+0x296>
 800c9ba:	e01c      	b.n	800c9f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c9bc:	4b1a      	ldr	r3, [pc, #104]	; (800ca28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c9be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9c0:	4a19      	ldr	r2, [pc, #100]	; (800ca28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c9c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c9c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800c9c8:	e01e      	b.n	800ca08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c9ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c9ce:	3308      	adds	r3, #8
 800c9d0:	2100      	movs	r1, #0
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	f002 f954 	bl	800ec80 <RCCEx_PLL2_Config>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800c9de:	e013      	b.n	800ca08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c9e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c9e4:	3328      	adds	r3, #40	; 0x28
 800c9e6:	2100      	movs	r1, #0
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	f002 f9fb 	bl	800ede4 <RCCEx_PLL3_Config>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800c9f4:	e008      	b.n	800ca08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c9fc:	e004      	b.n	800ca08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800c9fe:	bf00      	nop
 800ca00:	e002      	b.n	800ca08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800ca02:	bf00      	nop
 800ca04:	e000      	b.n	800ca08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800ca06:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ca08:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d10d      	bne.n	800ca2c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800ca10:	4b05      	ldr	r3, [pc, #20]	; (800ca28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ca12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca14:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800ca18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ca1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ca1e:	4a02      	ldr	r2, [pc, #8]	; (800ca28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ca20:	430b      	orrs	r3, r1
 800ca22:	6513      	str	r3, [r2, #80]	; 0x50
 800ca24:	e006      	b.n	800ca34 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800ca26:	bf00      	nop
 800ca28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca2c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ca30:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800ca34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ca38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca3c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800ca40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ca44:	2300      	movs	r3, #0
 800ca46:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ca4a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800ca4e:	460b      	mov	r3, r1
 800ca50:	4313      	orrs	r3, r2
 800ca52:	d03a      	beq.n	800caca <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800ca54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ca58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca5a:	2b30      	cmp	r3, #48	; 0x30
 800ca5c:	d01f      	beq.n	800ca9e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800ca5e:	2b30      	cmp	r3, #48	; 0x30
 800ca60:	d819      	bhi.n	800ca96 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800ca62:	2b20      	cmp	r3, #32
 800ca64:	d00c      	beq.n	800ca80 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800ca66:	2b20      	cmp	r3, #32
 800ca68:	d815      	bhi.n	800ca96 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d019      	beq.n	800caa2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800ca6e:	2b10      	cmp	r3, #16
 800ca70:	d111      	bne.n	800ca96 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ca72:	4bae      	ldr	r3, [pc, #696]	; (800cd2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ca74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca76:	4aad      	ldr	r2, [pc, #692]	; (800cd2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ca78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ca7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800ca7e:	e011      	b.n	800caa4 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ca80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ca84:	3308      	adds	r3, #8
 800ca86:	2102      	movs	r1, #2
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f002 f8f9 	bl	800ec80 <RCCEx_PLL2_Config>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800ca94:	e006      	b.n	800caa4 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ca96:	2301      	movs	r3, #1
 800ca98:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800ca9c:	e002      	b.n	800caa4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800ca9e:	bf00      	nop
 800caa0:	e000      	b.n	800caa4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800caa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800caa4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d10a      	bne.n	800cac2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800caac:	4b9f      	ldr	r3, [pc, #636]	; (800cd2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800caae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cab0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800cab4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800caba:	4a9c      	ldr	r2, [pc, #624]	; (800cd2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cabc:	430b      	orrs	r3, r1
 800cabe:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cac0:	e003      	b.n	800caca <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cac2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cac6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800caca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cace:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800cad6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800cada:	2300      	movs	r3, #0
 800cadc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800cae0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800cae4:	460b      	mov	r3, r1
 800cae6:	4313      	orrs	r3, r2
 800cae8:	d051      	beq.n	800cb8e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800caea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800caee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800caf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800caf4:	d035      	beq.n	800cb62 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800caf6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cafa:	d82e      	bhi.n	800cb5a <HAL_RCCEx_PeriphCLKConfig+0x426>
 800cafc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cb00:	d031      	beq.n	800cb66 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800cb02:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cb06:	d828      	bhi.n	800cb5a <HAL_RCCEx_PeriphCLKConfig+0x426>
 800cb08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cb0c:	d01a      	beq.n	800cb44 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800cb0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cb12:	d822      	bhi.n	800cb5a <HAL_RCCEx_PeriphCLKConfig+0x426>
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d003      	beq.n	800cb20 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800cb18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb1c:	d007      	beq.n	800cb2e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800cb1e:	e01c      	b.n	800cb5a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cb20:	4b82      	ldr	r3, [pc, #520]	; (800cd2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cb22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb24:	4a81      	ldr	r2, [pc, #516]	; (800cd2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cb26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cb2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800cb2c:	e01c      	b.n	800cb68 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cb2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cb32:	3308      	adds	r3, #8
 800cb34:	2100      	movs	r1, #0
 800cb36:	4618      	mov	r0, r3
 800cb38:	f002 f8a2 	bl	800ec80 <RCCEx_PLL2_Config>
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800cb42:	e011      	b.n	800cb68 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cb44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cb48:	3328      	adds	r3, #40	; 0x28
 800cb4a:	2100      	movs	r1, #0
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	f002 f949 	bl	800ede4 <RCCEx_PLL3_Config>
 800cb52:	4603      	mov	r3, r0
 800cb54:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800cb58:	e006      	b.n	800cb68 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800cb60:	e002      	b.n	800cb68 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800cb62:	bf00      	nop
 800cb64:	e000      	b.n	800cb68 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800cb66:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cb68:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d10a      	bne.n	800cb86 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800cb70:	4b6e      	ldr	r3, [pc, #440]	; (800cd2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cb72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb74:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800cb78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cb7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb7e:	4a6b      	ldr	r2, [pc, #428]	; (800cd2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cb80:	430b      	orrs	r3, r1
 800cb82:	6513      	str	r3, [r2, #80]	; 0x50
 800cb84:	e003      	b.n	800cb8e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb86:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cb8a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800cb8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cb92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb96:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800cb9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cb9e:	2300      	movs	r3, #0
 800cba0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800cba4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800cba8:	460b      	mov	r3, r1
 800cbaa:	4313      	orrs	r3, r2
 800cbac:	d053      	beq.n	800cc56 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800cbae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cbb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cbb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cbb8:	d033      	beq.n	800cc22 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800cbba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cbbe:	d82c      	bhi.n	800cc1a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800cbc0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cbc4:	d02f      	beq.n	800cc26 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800cbc6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cbca:	d826      	bhi.n	800cc1a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800cbcc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cbd0:	d02b      	beq.n	800cc2a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800cbd2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cbd6:	d820      	bhi.n	800cc1a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800cbd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cbdc:	d012      	beq.n	800cc04 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800cbde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cbe2:	d81a      	bhi.n	800cc1a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d022      	beq.n	800cc2e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800cbe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbec:	d115      	bne.n	800cc1a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cbee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cbf2:	3308      	adds	r3, #8
 800cbf4:	2101      	movs	r1, #1
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f002 f842 	bl	800ec80 <RCCEx_PLL2_Config>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800cc02:	e015      	b.n	800cc30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cc04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cc08:	3328      	adds	r3, #40	; 0x28
 800cc0a:	2101      	movs	r1, #1
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	f002 f8e9 	bl	800ede4 <RCCEx_PLL3_Config>
 800cc12:	4603      	mov	r3, r0
 800cc14:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800cc18:	e00a      	b.n	800cc30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800cc20:	e006      	b.n	800cc30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800cc22:	bf00      	nop
 800cc24:	e004      	b.n	800cc30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800cc26:	bf00      	nop
 800cc28:	e002      	b.n	800cc30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800cc2a:	bf00      	nop
 800cc2c:	e000      	b.n	800cc30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800cc2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cc30:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d10a      	bne.n	800cc4e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800cc38:	4b3c      	ldr	r3, [pc, #240]	; (800cd2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cc3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc3c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800cc40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cc44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cc46:	4a39      	ldr	r2, [pc, #228]	; (800cd2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cc48:	430b      	orrs	r3, r1
 800cc4a:	6513      	str	r3, [r2, #80]	; 0x50
 800cc4c:	e003      	b.n	800cc56 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc4e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cc52:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800cc56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cc5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc5e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800cc62:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cc66:	2300      	movs	r3, #0
 800cc68:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cc6c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800cc70:	460b      	mov	r3, r1
 800cc72:	4313      	orrs	r3, r2
 800cc74:	d060      	beq.n	800cd38 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800cc76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cc7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cc7e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800cc82:	d039      	beq.n	800ccf8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800cc84:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800cc88:	d832      	bhi.n	800ccf0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800cc8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cc8e:	d035      	beq.n	800ccfc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800cc90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cc94:	d82c      	bhi.n	800ccf0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800cc96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc9a:	d031      	beq.n	800cd00 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800cc9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cca0:	d826      	bhi.n	800ccf0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800cca2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cca6:	d02d      	beq.n	800cd04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800cca8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ccac:	d820      	bhi.n	800ccf0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800ccae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ccb2:	d012      	beq.n	800ccda <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800ccb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ccb8:	d81a      	bhi.n	800ccf0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d024      	beq.n	800cd08 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800ccbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ccc2:	d115      	bne.n	800ccf0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ccc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ccc8:	3308      	adds	r3, #8
 800ccca:	2101      	movs	r1, #1
 800cccc:	4618      	mov	r0, r3
 800ccce:	f001 ffd7 	bl	800ec80 <RCCEx_PLL2_Config>
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ccd8:	e017      	b.n	800cd0a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ccda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ccde:	3328      	adds	r3, #40	; 0x28
 800cce0:	2101      	movs	r1, #1
 800cce2:	4618      	mov	r0, r3
 800cce4:	f002 f87e 	bl	800ede4 <RCCEx_PLL3_Config>
 800cce8:	4603      	mov	r3, r0
 800ccea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ccee:	e00c      	b.n	800cd0a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800ccf0:	2301      	movs	r3, #1
 800ccf2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800ccf6:	e008      	b.n	800cd0a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ccf8:	bf00      	nop
 800ccfa:	e006      	b.n	800cd0a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ccfc:	bf00      	nop
 800ccfe:	e004      	b.n	800cd0a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800cd00:	bf00      	nop
 800cd02:	e002      	b.n	800cd0a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800cd04:	bf00      	nop
 800cd06:	e000      	b.n	800cd0a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800cd08:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cd0a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d10e      	bne.n	800cd30 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800cd12:	4b06      	ldr	r3, [pc, #24]	; (800cd2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cd14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd16:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800cd1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cd1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cd22:	4a02      	ldr	r2, [pc, #8]	; (800cd2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cd24:	430b      	orrs	r3, r1
 800cd26:	6593      	str	r3, [r2, #88]	; 0x58
 800cd28:	e006      	b.n	800cd38 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800cd2a:	bf00      	nop
 800cd2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd30:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cd34:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800cd38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cd3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd40:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800cd44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cd48:	2300      	movs	r3, #0
 800cd4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800cd4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800cd52:	460b      	mov	r3, r1
 800cd54:	4313      	orrs	r3, r2
 800cd56:	d037      	beq.n	800cdc8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800cd58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cd5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd62:	d00e      	beq.n	800cd82 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800cd64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd68:	d816      	bhi.n	800cd98 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d018      	beq.n	800cda0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800cd6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cd72:	d111      	bne.n	800cd98 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cd74:	4bc4      	ldr	r3, [pc, #784]	; (800d088 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cd76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd78:	4ac3      	ldr	r2, [pc, #780]	; (800d088 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cd7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cd7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800cd80:	e00f      	b.n	800cda2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cd82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cd86:	3308      	adds	r3, #8
 800cd88:	2101      	movs	r1, #1
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f001 ff78 	bl	800ec80 <RCCEx_PLL2_Config>
 800cd90:	4603      	mov	r3, r0
 800cd92:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800cd96:	e004      	b.n	800cda2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cd98:	2301      	movs	r3, #1
 800cd9a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800cd9e:	e000      	b.n	800cda2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800cda0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cda2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d10a      	bne.n	800cdc0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800cdaa:	4bb7      	ldr	r3, [pc, #732]	; (800d088 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cdac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cdae:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800cdb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cdb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cdb8:	4ab3      	ldr	r2, [pc, #716]	; (800d088 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cdba:	430b      	orrs	r3, r1
 800cdbc:	6513      	str	r3, [r2, #80]	; 0x50
 800cdbe:	e003      	b.n	800cdc8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cdc0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cdc4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800cdc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cdcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdd0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800cdd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cdd8:	2300      	movs	r3, #0
 800cdda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800cdde:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800cde2:	460b      	mov	r3, r1
 800cde4:	4313      	orrs	r3, r2
 800cde6:	d039      	beq.n	800ce5c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800cde8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cdec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cdee:	2b03      	cmp	r3, #3
 800cdf0:	d81c      	bhi.n	800ce2c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800cdf2:	a201      	add	r2, pc, #4	; (adr r2, 800cdf8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800cdf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdf8:	0800ce35 	.word	0x0800ce35
 800cdfc:	0800ce09 	.word	0x0800ce09
 800ce00:	0800ce17 	.word	0x0800ce17
 800ce04:	0800ce35 	.word	0x0800ce35
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ce08:	4b9f      	ldr	r3, [pc, #636]	; (800d088 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ce0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce0c:	4a9e      	ldr	r2, [pc, #632]	; (800d088 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ce0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ce12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ce14:	e00f      	b.n	800ce36 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ce16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ce1a:	3308      	adds	r3, #8
 800ce1c:	2102      	movs	r1, #2
 800ce1e:	4618      	mov	r0, r3
 800ce20:	f001 ff2e 	bl	800ec80 <RCCEx_PLL2_Config>
 800ce24:	4603      	mov	r3, r0
 800ce26:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ce2a:	e004      	b.n	800ce36 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ce2c:	2301      	movs	r3, #1
 800ce2e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800ce32:	e000      	b.n	800ce36 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800ce34:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ce36:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d10a      	bne.n	800ce54 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ce3e:	4b92      	ldr	r3, [pc, #584]	; (800d088 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ce40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce42:	f023 0103 	bic.w	r1, r3, #3
 800ce46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ce4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ce4c:	4a8e      	ldr	r2, [pc, #568]	; (800d088 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ce4e:	430b      	orrs	r3, r1
 800ce50:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ce52:	e003      	b.n	800ce5c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce54:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ce58:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ce5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ce60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce64:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800ce68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ce72:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800ce76:	460b      	mov	r3, r1
 800ce78:	4313      	orrs	r3, r2
 800ce7a:	f000 8099 	beq.w	800cfb0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ce7e:	4b83      	ldr	r3, [pc, #524]	; (800d08c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	4a82      	ldr	r2, [pc, #520]	; (800d08c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ce84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ce8a:	f7f7 f8f7 	bl	800407c <HAL_GetTick>
 800ce8e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ce92:	e00b      	b.n	800ceac <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ce94:	f7f7 f8f2 	bl	800407c <HAL_GetTick>
 800ce98:	4602      	mov	r2, r0
 800ce9a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800ce9e:	1ad3      	subs	r3, r2, r3
 800cea0:	2b64      	cmp	r3, #100	; 0x64
 800cea2:	d903      	bls.n	800ceac <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800cea4:	2303      	movs	r3, #3
 800cea6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800ceaa:	e005      	b.n	800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ceac:	4b77      	ldr	r3, [pc, #476]	; (800d08c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d0ed      	beq.n	800ce94 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800ceb8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d173      	bne.n	800cfa8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800cec0:	4b71      	ldr	r3, [pc, #452]	; (800d088 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cec2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cec4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cec8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800cecc:	4053      	eors	r3, r2
 800cece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d015      	beq.n	800cf02 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ced6:	4b6c      	ldr	r3, [pc, #432]	; (800d088 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ced8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ceda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cede:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800cee2:	4b69      	ldr	r3, [pc, #420]	; (800d088 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cee6:	4a68      	ldr	r2, [pc, #416]	; (800d088 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ceec:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ceee:	4b66      	ldr	r3, [pc, #408]	; (800d088 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cef2:	4a65      	ldr	r2, [pc, #404]	; (800d088 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cef4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cef8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800cefa:	4a63      	ldr	r2, [pc, #396]	; (800d088 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cefc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf00:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800cf02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cf06:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800cf0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf0e:	d118      	bne.n	800cf42 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf10:	f7f7 f8b4 	bl	800407c <HAL_GetTick>
 800cf14:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cf18:	e00d      	b.n	800cf36 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cf1a:	f7f7 f8af 	bl	800407c <HAL_GetTick>
 800cf1e:	4602      	mov	r2, r0
 800cf20:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800cf24:	1ad2      	subs	r2, r2, r3
 800cf26:	f241 3388 	movw	r3, #5000	; 0x1388
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	d903      	bls.n	800cf36 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800cf2e:	2303      	movs	r3, #3
 800cf30:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 800cf34:	e005      	b.n	800cf42 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cf36:	4b54      	ldr	r3, [pc, #336]	; (800d088 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cf38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf3a:	f003 0302 	and.w	r3, r3, #2
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d0eb      	beq.n	800cf1a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800cf42:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d129      	bne.n	800cf9e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cf4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cf4e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800cf52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cf56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cf5a:	d10e      	bne.n	800cf7a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800cf5c:	4b4a      	ldr	r3, [pc, #296]	; (800d088 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cf5e:	691b      	ldr	r3, [r3, #16]
 800cf60:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800cf64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cf68:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800cf6c:	091a      	lsrs	r2, r3, #4
 800cf6e:	4b48      	ldr	r3, [pc, #288]	; (800d090 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800cf70:	4013      	ands	r3, r2
 800cf72:	4a45      	ldr	r2, [pc, #276]	; (800d088 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cf74:	430b      	orrs	r3, r1
 800cf76:	6113      	str	r3, [r2, #16]
 800cf78:	e005      	b.n	800cf86 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800cf7a:	4b43      	ldr	r3, [pc, #268]	; (800d088 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cf7c:	691b      	ldr	r3, [r3, #16]
 800cf7e:	4a42      	ldr	r2, [pc, #264]	; (800d088 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cf80:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cf84:	6113      	str	r3, [r2, #16]
 800cf86:	4b40      	ldr	r3, [pc, #256]	; (800d088 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cf88:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800cf8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cf8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800cf92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cf96:	4a3c      	ldr	r2, [pc, #240]	; (800d088 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cf98:	430b      	orrs	r3, r1
 800cf9a:	6713      	str	r3, [r2, #112]	; 0x70
 800cf9c:	e008      	b.n	800cfb0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800cf9e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cfa2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800cfa6:	e003      	b.n	800cfb0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cfa8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cfac:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800cfb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cfb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfb8:	f002 0301 	and.w	r3, r2, #1
 800cfbc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cfc6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800cfca:	460b      	mov	r3, r1
 800cfcc:	4313      	orrs	r3, r2
 800cfce:	f000 8090 	beq.w	800d0f2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800cfd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cfd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cfda:	2b28      	cmp	r3, #40	; 0x28
 800cfdc:	d870      	bhi.n	800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800cfde:	a201      	add	r2, pc, #4	; (adr r2, 800cfe4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800cfe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfe4:	0800d0c9 	.word	0x0800d0c9
 800cfe8:	0800d0c1 	.word	0x0800d0c1
 800cfec:	0800d0c1 	.word	0x0800d0c1
 800cff0:	0800d0c1 	.word	0x0800d0c1
 800cff4:	0800d0c1 	.word	0x0800d0c1
 800cff8:	0800d0c1 	.word	0x0800d0c1
 800cffc:	0800d0c1 	.word	0x0800d0c1
 800d000:	0800d0c1 	.word	0x0800d0c1
 800d004:	0800d095 	.word	0x0800d095
 800d008:	0800d0c1 	.word	0x0800d0c1
 800d00c:	0800d0c1 	.word	0x0800d0c1
 800d010:	0800d0c1 	.word	0x0800d0c1
 800d014:	0800d0c1 	.word	0x0800d0c1
 800d018:	0800d0c1 	.word	0x0800d0c1
 800d01c:	0800d0c1 	.word	0x0800d0c1
 800d020:	0800d0c1 	.word	0x0800d0c1
 800d024:	0800d0ab 	.word	0x0800d0ab
 800d028:	0800d0c1 	.word	0x0800d0c1
 800d02c:	0800d0c1 	.word	0x0800d0c1
 800d030:	0800d0c1 	.word	0x0800d0c1
 800d034:	0800d0c1 	.word	0x0800d0c1
 800d038:	0800d0c1 	.word	0x0800d0c1
 800d03c:	0800d0c1 	.word	0x0800d0c1
 800d040:	0800d0c1 	.word	0x0800d0c1
 800d044:	0800d0c9 	.word	0x0800d0c9
 800d048:	0800d0c1 	.word	0x0800d0c1
 800d04c:	0800d0c1 	.word	0x0800d0c1
 800d050:	0800d0c1 	.word	0x0800d0c1
 800d054:	0800d0c1 	.word	0x0800d0c1
 800d058:	0800d0c1 	.word	0x0800d0c1
 800d05c:	0800d0c1 	.word	0x0800d0c1
 800d060:	0800d0c1 	.word	0x0800d0c1
 800d064:	0800d0c9 	.word	0x0800d0c9
 800d068:	0800d0c1 	.word	0x0800d0c1
 800d06c:	0800d0c1 	.word	0x0800d0c1
 800d070:	0800d0c1 	.word	0x0800d0c1
 800d074:	0800d0c1 	.word	0x0800d0c1
 800d078:	0800d0c1 	.word	0x0800d0c1
 800d07c:	0800d0c1 	.word	0x0800d0c1
 800d080:	0800d0c1 	.word	0x0800d0c1
 800d084:	0800d0c9 	.word	0x0800d0c9
 800d088:	58024400 	.word	0x58024400
 800d08c:	58024800 	.word	0x58024800
 800d090:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d094:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d098:	3308      	adds	r3, #8
 800d09a:	2101      	movs	r1, #1
 800d09c:	4618      	mov	r0, r3
 800d09e:	f001 fdef 	bl	800ec80 <RCCEx_PLL2_Config>
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800d0a8:	e00f      	b.n	800d0ca <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d0aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d0ae:	3328      	adds	r3, #40	; 0x28
 800d0b0:	2101      	movs	r1, #1
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f001 fe96 	bl	800ede4 <RCCEx_PLL3_Config>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800d0be:	e004      	b.n	800d0ca <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d0c0:	2301      	movs	r3, #1
 800d0c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d0c6:	e000      	b.n	800d0ca <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800d0c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d0ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d10b      	bne.n	800d0ea <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800d0d2:	4bc0      	ldr	r3, [pc, #768]	; (800d3d4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800d0d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0d6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800d0da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d0de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d0e2:	4abc      	ldr	r2, [pc, #752]	; (800d3d4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800d0e4:	430b      	orrs	r3, r1
 800d0e6:	6553      	str	r3, [r2, #84]	; 0x54
 800d0e8:	e003      	b.n	800d0f2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d0ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d0ee:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800d0f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0fa:	f002 0302 	and.w	r3, r2, #2
 800d0fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d102:	2300      	movs	r3, #0
 800d104:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d108:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800d10c:	460b      	mov	r3, r1
 800d10e:	4313      	orrs	r3, r2
 800d110:	d043      	beq.n	800d19a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800d112:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d116:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d11a:	2b05      	cmp	r3, #5
 800d11c:	d824      	bhi.n	800d168 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800d11e:	a201      	add	r2, pc, #4	; (adr r2, 800d124 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800d120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d124:	0800d171 	.word	0x0800d171
 800d128:	0800d13d 	.word	0x0800d13d
 800d12c:	0800d153 	.word	0x0800d153
 800d130:	0800d171 	.word	0x0800d171
 800d134:	0800d171 	.word	0x0800d171
 800d138:	0800d171 	.word	0x0800d171
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d13c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d140:	3308      	adds	r3, #8
 800d142:	2101      	movs	r1, #1
 800d144:	4618      	mov	r0, r3
 800d146:	f001 fd9b 	bl	800ec80 <RCCEx_PLL2_Config>
 800d14a:	4603      	mov	r3, r0
 800d14c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800d150:	e00f      	b.n	800d172 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d152:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d156:	3328      	adds	r3, #40	; 0x28
 800d158:	2101      	movs	r1, #1
 800d15a:	4618      	mov	r0, r3
 800d15c:	f001 fe42 	bl	800ede4 <RCCEx_PLL3_Config>
 800d160:	4603      	mov	r3, r0
 800d162:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800d166:	e004      	b.n	800d172 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d168:	2301      	movs	r3, #1
 800d16a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d16e:	e000      	b.n	800d172 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800d170:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d172:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d176:	2b00      	cmp	r3, #0
 800d178:	d10b      	bne.n	800d192 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800d17a:	4b96      	ldr	r3, [pc, #600]	; (800d3d4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800d17c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d17e:	f023 0107 	bic.w	r1, r3, #7
 800d182:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d186:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d18a:	4a92      	ldr	r2, [pc, #584]	; (800d3d4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800d18c:	430b      	orrs	r3, r1
 800d18e:	6553      	str	r3, [r2, #84]	; 0x54
 800d190:	e003      	b.n	800d19a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d192:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d196:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d19a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1a2:	f002 0304 	and.w	r3, r2, #4
 800d1a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d1b0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800d1b4:	460b      	mov	r3, r1
 800d1b6:	4313      	orrs	r3, r2
 800d1b8:	d043      	beq.n	800d242 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800d1ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d1be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d1c2:	2b05      	cmp	r3, #5
 800d1c4:	d824      	bhi.n	800d210 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800d1c6:	a201      	add	r2, pc, #4	; (adr r2, 800d1cc <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800d1c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1cc:	0800d219 	.word	0x0800d219
 800d1d0:	0800d1e5 	.word	0x0800d1e5
 800d1d4:	0800d1fb 	.word	0x0800d1fb
 800d1d8:	0800d219 	.word	0x0800d219
 800d1dc:	0800d219 	.word	0x0800d219
 800d1e0:	0800d219 	.word	0x0800d219
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d1e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d1e8:	3308      	adds	r3, #8
 800d1ea:	2101      	movs	r1, #1
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	f001 fd47 	bl	800ec80 <RCCEx_PLL2_Config>
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d1f8:	e00f      	b.n	800d21a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d1fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d1fe:	3328      	adds	r3, #40	; 0x28
 800d200:	2101      	movs	r1, #1
 800d202:	4618      	mov	r0, r3
 800d204:	f001 fdee 	bl	800ede4 <RCCEx_PLL3_Config>
 800d208:	4603      	mov	r3, r0
 800d20a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d20e:	e004      	b.n	800d21a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d210:	2301      	movs	r3, #1
 800d212:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d216:	e000      	b.n	800d21a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800d218:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d21a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d10b      	bne.n	800d23a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d222:	4b6c      	ldr	r3, [pc, #432]	; (800d3d4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800d224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d226:	f023 0107 	bic.w	r1, r3, #7
 800d22a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d22e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d232:	4a68      	ldr	r2, [pc, #416]	; (800d3d4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800d234:	430b      	orrs	r3, r1
 800d236:	6593      	str	r3, [r2, #88]	; 0x58
 800d238:	e003      	b.n	800d242 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d23a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d23e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d242:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d24a:	f002 0320 	and.w	r3, r2, #32
 800d24e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d252:	2300      	movs	r3, #0
 800d254:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d258:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800d25c:	460b      	mov	r3, r1
 800d25e:	4313      	orrs	r3, r2
 800d260:	d055      	beq.n	800d30e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800d262:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d266:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d26a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d26e:	d033      	beq.n	800d2d8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800d270:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d274:	d82c      	bhi.n	800d2d0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800d276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d27a:	d02f      	beq.n	800d2dc <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800d27c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d280:	d826      	bhi.n	800d2d0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800d282:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d286:	d02b      	beq.n	800d2e0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800d288:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d28c:	d820      	bhi.n	800d2d0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800d28e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d292:	d012      	beq.n	800d2ba <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800d294:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d298:	d81a      	bhi.n	800d2d0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d022      	beq.n	800d2e4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800d29e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d2a2:	d115      	bne.n	800d2d0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d2a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d2a8:	3308      	adds	r3, #8
 800d2aa:	2100      	movs	r1, #0
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	f001 fce7 	bl	800ec80 <RCCEx_PLL2_Config>
 800d2b2:	4603      	mov	r3, r0
 800d2b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d2b8:	e015      	b.n	800d2e6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d2ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d2be:	3328      	adds	r3, #40	; 0x28
 800d2c0:	2102      	movs	r1, #2
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	f001 fd8e 	bl	800ede4 <RCCEx_PLL3_Config>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d2ce:	e00a      	b.n	800d2e6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d2d0:	2301      	movs	r3, #1
 800d2d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d2d6:	e006      	b.n	800d2e6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800d2d8:	bf00      	nop
 800d2da:	e004      	b.n	800d2e6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800d2dc:	bf00      	nop
 800d2de:	e002      	b.n	800d2e6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800d2e0:	bf00      	nop
 800d2e2:	e000      	b.n	800d2e6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800d2e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d2e6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d10b      	bne.n	800d306 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d2ee:	4b39      	ldr	r3, [pc, #228]	; (800d3d4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800d2f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2f2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800d2f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d2fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d2fe:	4a35      	ldr	r2, [pc, #212]	; (800d3d4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800d300:	430b      	orrs	r3, r1
 800d302:	6553      	str	r3, [r2, #84]	; 0x54
 800d304:	e003      	b.n	800d30e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d306:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d30a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800d30e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d312:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d316:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800d31a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d31e:	2300      	movs	r3, #0
 800d320:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d324:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800d328:	460b      	mov	r3, r1
 800d32a:	4313      	orrs	r3, r2
 800d32c:	d058      	beq.n	800d3e0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800d32e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d332:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d336:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800d33a:	d033      	beq.n	800d3a4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800d33c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800d340:	d82c      	bhi.n	800d39c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800d342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d346:	d02f      	beq.n	800d3a8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800d348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d34c:	d826      	bhi.n	800d39c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800d34e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d352:	d02b      	beq.n	800d3ac <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800d354:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d358:	d820      	bhi.n	800d39c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800d35a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d35e:	d012      	beq.n	800d386 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800d360:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d364:	d81a      	bhi.n	800d39c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800d366:	2b00      	cmp	r3, #0
 800d368:	d022      	beq.n	800d3b0 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800d36a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d36e:	d115      	bne.n	800d39c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d370:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d374:	3308      	adds	r3, #8
 800d376:	2100      	movs	r1, #0
 800d378:	4618      	mov	r0, r3
 800d37a:	f001 fc81 	bl	800ec80 <RCCEx_PLL2_Config>
 800d37e:	4603      	mov	r3, r0
 800d380:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d384:	e015      	b.n	800d3b2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d386:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d38a:	3328      	adds	r3, #40	; 0x28
 800d38c:	2102      	movs	r1, #2
 800d38e:	4618      	mov	r0, r3
 800d390:	f001 fd28 	bl	800ede4 <RCCEx_PLL3_Config>
 800d394:	4603      	mov	r3, r0
 800d396:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d39a:	e00a      	b.n	800d3b2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d39c:	2301      	movs	r3, #1
 800d39e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d3a2:	e006      	b.n	800d3b2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800d3a4:	bf00      	nop
 800d3a6:	e004      	b.n	800d3b2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800d3a8:	bf00      	nop
 800d3aa:	e002      	b.n	800d3b2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800d3ac:	bf00      	nop
 800d3ae:	e000      	b.n	800d3b2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800d3b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d3b2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d10e      	bne.n	800d3d8 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d3ba:	4b06      	ldr	r3, [pc, #24]	; (800d3d4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800d3bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d3be:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800d3c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d3c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800d3ca:	4a02      	ldr	r2, [pc, #8]	; (800d3d4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800d3cc:	430b      	orrs	r3, r1
 800d3ce:	6593      	str	r3, [r2, #88]	; 0x58
 800d3d0:	e006      	b.n	800d3e0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800d3d2:	bf00      	nop
 800d3d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d3d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d3dc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800d3e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3e8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800d3ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d3f6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800d3fa:	460b      	mov	r3, r1
 800d3fc:	4313      	orrs	r3, r2
 800d3fe:	d055      	beq.n	800d4ac <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800d400:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d404:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d408:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800d40c:	d033      	beq.n	800d476 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800d40e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800d412:	d82c      	bhi.n	800d46e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800d414:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d418:	d02f      	beq.n	800d47a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800d41a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d41e:	d826      	bhi.n	800d46e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800d420:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800d424:	d02b      	beq.n	800d47e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800d426:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800d42a:	d820      	bhi.n	800d46e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800d42c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d430:	d012      	beq.n	800d458 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800d432:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d436:	d81a      	bhi.n	800d46e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d022      	beq.n	800d482 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800d43c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d440:	d115      	bne.n	800d46e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d442:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d446:	3308      	adds	r3, #8
 800d448:	2100      	movs	r1, #0
 800d44a:	4618      	mov	r0, r3
 800d44c:	f001 fc18 	bl	800ec80 <RCCEx_PLL2_Config>
 800d450:	4603      	mov	r3, r0
 800d452:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d456:	e015      	b.n	800d484 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d458:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d45c:	3328      	adds	r3, #40	; 0x28
 800d45e:	2102      	movs	r1, #2
 800d460:	4618      	mov	r0, r3
 800d462:	f001 fcbf 	bl	800ede4 <RCCEx_PLL3_Config>
 800d466:	4603      	mov	r3, r0
 800d468:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d46c:	e00a      	b.n	800d484 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d46e:	2301      	movs	r3, #1
 800d470:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d474:	e006      	b.n	800d484 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800d476:	bf00      	nop
 800d478:	e004      	b.n	800d484 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800d47a:	bf00      	nop
 800d47c:	e002      	b.n	800d484 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800d47e:	bf00      	nop
 800d480:	e000      	b.n	800d484 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800d482:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d484:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d10b      	bne.n	800d4a4 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800d48c:	4ba1      	ldr	r3, [pc, #644]	; (800d714 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d48e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d490:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800d494:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d498:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d49c:	4a9d      	ldr	r2, [pc, #628]	; (800d714 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d49e:	430b      	orrs	r3, r1
 800d4a0:	6593      	str	r3, [r2, #88]	; 0x58
 800d4a2:	e003      	b.n	800d4ac <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d4a4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d4a8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800d4ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4b4:	f002 0308 	and.w	r3, r2, #8
 800d4b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d4bc:	2300      	movs	r3, #0
 800d4be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d4c2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800d4c6:	460b      	mov	r3, r1
 800d4c8:	4313      	orrs	r3, r2
 800d4ca:	d01e      	beq.n	800d50a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800d4cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d4d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d4d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d4d8:	d10c      	bne.n	800d4f4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d4da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d4de:	3328      	adds	r3, #40	; 0x28
 800d4e0:	2102      	movs	r1, #2
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	f001 fc7e 	bl	800ede4 <RCCEx_PLL3_Config>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d002      	beq.n	800d4f4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800d4ee:	2301      	movs	r3, #1
 800d4f0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800d4f4:	4b87      	ldr	r3, [pc, #540]	; (800d714 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d4f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4f8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d4fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d500:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d504:	4a83      	ldr	r2, [pc, #524]	; (800d714 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d506:	430b      	orrs	r3, r1
 800d508:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d50a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d512:	f002 0310 	and.w	r3, r2, #16
 800d516:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d51a:	2300      	movs	r3, #0
 800d51c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d520:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800d524:	460b      	mov	r3, r1
 800d526:	4313      	orrs	r3, r2
 800d528:	d01e      	beq.n	800d568 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800d52a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d52e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d532:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d536:	d10c      	bne.n	800d552 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d538:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d53c:	3328      	adds	r3, #40	; 0x28
 800d53e:	2102      	movs	r1, #2
 800d540:	4618      	mov	r0, r3
 800d542:	f001 fc4f 	bl	800ede4 <RCCEx_PLL3_Config>
 800d546:	4603      	mov	r3, r0
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d002      	beq.n	800d552 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800d54c:	2301      	movs	r3, #1
 800d54e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d552:	4b70      	ldr	r3, [pc, #448]	; (800d714 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d556:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d55a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d55e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d562:	4a6c      	ldr	r2, [pc, #432]	; (800d714 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d564:	430b      	orrs	r3, r1
 800d566:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d568:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d570:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800d574:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d578:	2300      	movs	r3, #0
 800d57a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d57e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800d582:	460b      	mov	r3, r1
 800d584:	4313      	orrs	r3, r2
 800d586:	d03e      	beq.n	800d606 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800d588:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d58c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d590:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d594:	d022      	beq.n	800d5dc <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800d596:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d59a:	d81b      	bhi.n	800d5d4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d003      	beq.n	800d5a8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800d5a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d5a4:	d00b      	beq.n	800d5be <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800d5a6:	e015      	b.n	800d5d4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d5a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d5ac:	3308      	adds	r3, #8
 800d5ae:	2100      	movs	r1, #0
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	f001 fb65 	bl	800ec80 <RCCEx_PLL2_Config>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d5bc:	e00f      	b.n	800d5de <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d5be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d5c2:	3328      	adds	r3, #40	; 0x28
 800d5c4:	2102      	movs	r1, #2
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f001 fc0c 	bl	800ede4 <RCCEx_PLL3_Config>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d5d2:	e004      	b.n	800d5de <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d5d4:	2301      	movs	r3, #1
 800d5d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d5da:	e000      	b.n	800d5de <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800d5dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d5de:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d10b      	bne.n	800d5fe <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d5e6:	4b4b      	ldr	r3, [pc, #300]	; (800d714 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d5e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d5ea:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800d5ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d5f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d5f6:	4a47      	ldr	r2, [pc, #284]	; (800d714 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d5f8:	430b      	orrs	r3, r1
 800d5fa:	6593      	str	r3, [r2, #88]	; 0x58
 800d5fc:	e003      	b.n	800d606 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d5fe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d602:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800d606:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d60e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800d612:	67bb      	str	r3, [r7, #120]	; 0x78
 800d614:	2300      	movs	r3, #0
 800d616:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d618:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800d61c:	460b      	mov	r3, r1
 800d61e:	4313      	orrs	r3, r2
 800d620:	d03b      	beq.n	800d69a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800d622:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d62a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d62e:	d01f      	beq.n	800d670 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800d630:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d634:	d818      	bhi.n	800d668 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800d636:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d63a:	d003      	beq.n	800d644 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800d63c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d640:	d007      	beq.n	800d652 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800d642:	e011      	b.n	800d668 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d644:	4b33      	ldr	r3, [pc, #204]	; (800d714 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d648:	4a32      	ldr	r2, [pc, #200]	; (800d714 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d64a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d64e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800d650:	e00f      	b.n	800d672 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d652:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d656:	3328      	adds	r3, #40	; 0x28
 800d658:	2101      	movs	r1, #1
 800d65a:	4618      	mov	r0, r3
 800d65c:	f001 fbc2 	bl	800ede4 <RCCEx_PLL3_Config>
 800d660:	4603      	mov	r3, r0
 800d662:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800d666:	e004      	b.n	800d672 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d668:	2301      	movs	r3, #1
 800d66a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d66e:	e000      	b.n	800d672 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800d670:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d672:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d676:	2b00      	cmp	r3, #0
 800d678:	d10b      	bne.n	800d692 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d67a:	4b26      	ldr	r3, [pc, #152]	; (800d714 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d67c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d67e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800d682:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d68a:	4a22      	ldr	r2, [pc, #136]	; (800d714 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d68c:	430b      	orrs	r3, r1
 800d68e:	6553      	str	r3, [r2, #84]	; 0x54
 800d690:	e003      	b.n	800d69a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d692:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d696:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800d69a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6a2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800d6a6:	673b      	str	r3, [r7, #112]	; 0x70
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	677b      	str	r3, [r7, #116]	; 0x74
 800d6ac:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800d6b0:	460b      	mov	r3, r1
 800d6b2:	4313      	orrs	r3, r2
 800d6b4:	d034      	beq.n	800d720 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800d6b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d6ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d003      	beq.n	800d6c8 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800d6c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d6c4:	d007      	beq.n	800d6d6 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800d6c6:	e011      	b.n	800d6ec <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d6c8:	4b12      	ldr	r3, [pc, #72]	; (800d714 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d6ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6cc:	4a11      	ldr	r2, [pc, #68]	; (800d714 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d6ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d6d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d6d4:	e00e      	b.n	800d6f4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d6d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d6da:	3308      	adds	r3, #8
 800d6dc:	2102      	movs	r1, #2
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f001 face 	bl	800ec80 <RCCEx_PLL2_Config>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d6ea:	e003      	b.n	800d6f4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800d6ec:	2301      	movs	r3, #1
 800d6ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d6f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d6f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d10d      	bne.n	800d718 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800d6fc:	4b05      	ldr	r3, [pc, #20]	; (800d714 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d6fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d700:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d704:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d70a:	4a02      	ldr	r2, [pc, #8]	; (800d714 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d70c:	430b      	orrs	r3, r1
 800d70e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d710:	e006      	b.n	800d720 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800d712:	bf00      	nop
 800d714:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d718:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d71c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d720:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d728:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800d72c:	66bb      	str	r3, [r7, #104]	; 0x68
 800d72e:	2300      	movs	r3, #0
 800d730:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d732:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800d736:	460b      	mov	r3, r1
 800d738:	4313      	orrs	r3, r2
 800d73a:	d00c      	beq.n	800d756 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d73c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d740:	3328      	adds	r3, #40	; 0x28
 800d742:	2102      	movs	r1, #2
 800d744:	4618      	mov	r0, r3
 800d746:	f001 fb4d 	bl	800ede4 <RCCEx_PLL3_Config>
 800d74a:	4603      	mov	r3, r0
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d002      	beq.n	800d756 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800d750:	2301      	movs	r3, #1
 800d752:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800d756:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d75e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800d762:	663b      	str	r3, [r7, #96]	; 0x60
 800d764:	2300      	movs	r3, #0
 800d766:	667b      	str	r3, [r7, #100]	; 0x64
 800d768:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800d76c:	460b      	mov	r3, r1
 800d76e:	4313      	orrs	r3, r2
 800d770:	d038      	beq.n	800d7e4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800d772:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d77a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d77e:	d018      	beq.n	800d7b2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800d780:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d784:	d811      	bhi.n	800d7aa <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800d786:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d78a:	d014      	beq.n	800d7b6 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800d78c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d790:	d80b      	bhi.n	800d7aa <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800d792:	2b00      	cmp	r3, #0
 800d794:	d011      	beq.n	800d7ba <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800d796:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d79a:	d106      	bne.n	800d7aa <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d79c:	4bc3      	ldr	r3, [pc, #780]	; (800daac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d79e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7a0:	4ac2      	ldr	r2, [pc, #776]	; (800daac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d7a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d7a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800d7a8:	e008      	b.n	800d7bc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d7aa:	2301      	movs	r3, #1
 800d7ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d7b0:	e004      	b.n	800d7bc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800d7b2:	bf00      	nop
 800d7b4:	e002      	b.n	800d7bc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800d7b6:	bf00      	nop
 800d7b8:	e000      	b.n	800d7bc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800d7ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d7bc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d10b      	bne.n	800d7dc <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d7c4:	4bb9      	ldr	r3, [pc, #740]	; (800daac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d7c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7c8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d7cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d7d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d7d4:	4ab5      	ldr	r2, [pc, #724]	; (800daac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d7d6:	430b      	orrs	r3, r1
 800d7d8:	6553      	str	r3, [r2, #84]	; 0x54
 800d7da:	e003      	b.n	800d7e4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d7dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d7e0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d7e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ec:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800d7f0:	65bb      	str	r3, [r7, #88]	; 0x58
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d7f6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800d7fa:	460b      	mov	r3, r1
 800d7fc:	4313      	orrs	r3, r2
 800d7fe:	d009      	beq.n	800d814 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d800:	4baa      	ldr	r3, [pc, #680]	; (800daac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d804:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d808:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d80c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d80e:	4aa7      	ldr	r2, [pc, #668]	; (800daac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d810:	430b      	orrs	r3, r1
 800d812:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d814:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d81c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800d820:	653b      	str	r3, [r7, #80]	; 0x50
 800d822:	2300      	movs	r3, #0
 800d824:	657b      	str	r3, [r7, #84]	; 0x54
 800d826:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800d82a:	460b      	mov	r3, r1
 800d82c:	4313      	orrs	r3, r2
 800d82e:	d009      	beq.n	800d844 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d830:	4b9e      	ldr	r3, [pc, #632]	; (800daac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d834:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800d838:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d83c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d83e:	4a9b      	ldr	r2, [pc, #620]	; (800daac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d840:	430b      	orrs	r3, r1
 800d842:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800d844:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d84c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800d850:	64bb      	str	r3, [r7, #72]	; 0x48
 800d852:	2300      	movs	r3, #0
 800d854:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d856:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800d85a:	460b      	mov	r3, r1
 800d85c:	4313      	orrs	r3, r2
 800d85e:	d009      	beq.n	800d874 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800d860:	4b92      	ldr	r3, [pc, #584]	; (800daac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d864:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 800d868:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d86c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d86e:	4a8f      	ldr	r2, [pc, #572]	; (800daac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d870:	430b      	orrs	r3, r1
 800d872:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800d874:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d87c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800d880:	643b      	str	r3, [r7, #64]	; 0x40
 800d882:	2300      	movs	r3, #0
 800d884:	647b      	str	r3, [r7, #68]	; 0x44
 800d886:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800d88a:	460b      	mov	r3, r1
 800d88c:	4313      	orrs	r3, r2
 800d88e:	d00e      	beq.n	800d8ae <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d890:	4b86      	ldr	r3, [pc, #536]	; (800daac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d892:	691b      	ldr	r3, [r3, #16]
 800d894:	4a85      	ldr	r2, [pc, #532]	; (800daac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d896:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d89a:	6113      	str	r3, [r2, #16]
 800d89c:	4b83      	ldr	r3, [pc, #524]	; (800daac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d89e:	6919      	ldr	r1, [r3, #16]
 800d8a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d8a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800d8a8:	4a80      	ldr	r2, [pc, #512]	; (800daac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d8aa:	430b      	orrs	r3, r1
 800d8ac:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800d8ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8b6:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800d8ba:	63bb      	str	r3, [r7, #56]	; 0x38
 800d8bc:	2300      	movs	r3, #0
 800d8be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d8c0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800d8c4:	460b      	mov	r3, r1
 800d8c6:	4313      	orrs	r3, r2
 800d8c8:	d009      	beq.n	800d8de <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800d8ca:	4b78      	ldr	r3, [pc, #480]	; (800daac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d8cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d8ce:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800d8d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d8d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8d8:	4a74      	ldr	r2, [pc, #464]	; (800daac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d8da:	430b      	orrs	r3, r1
 800d8dc:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d8de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8e6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800d8ea:	633b      	str	r3, [r7, #48]	; 0x30
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	637b      	str	r3, [r7, #52]	; 0x34
 800d8f0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800d8f4:	460b      	mov	r3, r1
 800d8f6:	4313      	orrs	r3, r2
 800d8f8:	d00a      	beq.n	800d910 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d8fa:	4b6c      	ldr	r3, [pc, #432]	; (800daac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d8fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8fe:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800d902:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d90a:	4a68      	ldr	r2, [pc, #416]	; (800daac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d90c:	430b      	orrs	r3, r1
 800d90e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800d910:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d918:	2100      	movs	r1, #0
 800d91a:	62b9      	str	r1, [r7, #40]	; 0x28
 800d91c:	f003 0301 	and.w	r3, r3, #1
 800d920:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d922:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800d926:	460b      	mov	r3, r1
 800d928:	4313      	orrs	r3, r2
 800d92a:	d011      	beq.n	800d950 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d92c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d930:	3308      	adds	r3, #8
 800d932:	2100      	movs	r1, #0
 800d934:	4618      	mov	r0, r3
 800d936:	f001 f9a3 	bl	800ec80 <RCCEx_PLL2_Config>
 800d93a:	4603      	mov	r3, r0
 800d93c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800d940:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d944:	2b00      	cmp	r3, #0
 800d946:	d003      	beq.n	800d950 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d948:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d94c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800d950:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d958:	2100      	movs	r1, #0
 800d95a:	6239      	str	r1, [r7, #32]
 800d95c:	f003 0302 	and.w	r3, r3, #2
 800d960:	627b      	str	r3, [r7, #36]	; 0x24
 800d962:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d966:	460b      	mov	r3, r1
 800d968:	4313      	orrs	r3, r2
 800d96a:	d011      	beq.n	800d990 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d96c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d970:	3308      	adds	r3, #8
 800d972:	2101      	movs	r1, #1
 800d974:	4618      	mov	r0, r3
 800d976:	f001 f983 	bl	800ec80 <RCCEx_PLL2_Config>
 800d97a:	4603      	mov	r3, r0
 800d97c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800d980:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d984:	2b00      	cmp	r3, #0
 800d986:	d003      	beq.n	800d990 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d988:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d98c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800d990:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d998:	2100      	movs	r1, #0
 800d99a:	61b9      	str	r1, [r7, #24]
 800d99c:	f003 0304 	and.w	r3, r3, #4
 800d9a0:	61fb      	str	r3, [r7, #28]
 800d9a2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d9a6:	460b      	mov	r3, r1
 800d9a8:	4313      	orrs	r3, r2
 800d9aa:	d011      	beq.n	800d9d0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d9ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d9b0:	3308      	adds	r3, #8
 800d9b2:	2102      	movs	r1, #2
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	f001 f963 	bl	800ec80 <RCCEx_PLL2_Config>
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800d9c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d003      	beq.n	800d9d0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d9c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d9cc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800d9d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9d8:	2100      	movs	r1, #0
 800d9da:	6139      	str	r1, [r7, #16]
 800d9dc:	f003 0308 	and.w	r3, r3, #8
 800d9e0:	617b      	str	r3, [r7, #20]
 800d9e2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800d9e6:	460b      	mov	r3, r1
 800d9e8:	4313      	orrs	r3, r2
 800d9ea:	d011      	beq.n	800da10 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d9ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d9f0:	3328      	adds	r3, #40	; 0x28
 800d9f2:	2100      	movs	r1, #0
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	f001 f9f5 	bl	800ede4 <RCCEx_PLL3_Config>
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 800da00:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800da04:	2b00      	cmp	r3, #0
 800da06:	d003      	beq.n	800da10 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800da08:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800da0c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800da10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da18:	2100      	movs	r1, #0
 800da1a:	60b9      	str	r1, [r7, #8]
 800da1c:	f003 0310 	and.w	r3, r3, #16
 800da20:	60fb      	str	r3, [r7, #12]
 800da22:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800da26:	460b      	mov	r3, r1
 800da28:	4313      	orrs	r3, r2
 800da2a:	d011      	beq.n	800da50 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800da2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da30:	3328      	adds	r3, #40	; 0x28
 800da32:	2101      	movs	r1, #1
 800da34:	4618      	mov	r0, r3
 800da36:	f001 f9d5 	bl	800ede4 <RCCEx_PLL3_Config>
 800da3a:	4603      	mov	r3, r0
 800da3c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800da40:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800da44:	2b00      	cmp	r3, #0
 800da46:	d003      	beq.n	800da50 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800da48:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800da4c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800da50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da58:	2100      	movs	r1, #0
 800da5a:	6039      	str	r1, [r7, #0]
 800da5c:	f003 0320 	and.w	r3, r3, #32
 800da60:	607b      	str	r3, [r7, #4]
 800da62:	e9d7 1200 	ldrd	r1, r2, [r7]
 800da66:	460b      	mov	r3, r1
 800da68:	4313      	orrs	r3, r2
 800da6a:	d011      	beq.n	800da90 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800da6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da70:	3328      	adds	r3, #40	; 0x28
 800da72:	2102      	movs	r1, #2
 800da74:	4618      	mov	r0, r3
 800da76:	f001 f9b5 	bl	800ede4 <RCCEx_PLL3_Config>
 800da7a:	4603      	mov	r3, r0
 800da7c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800da80:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800da84:	2b00      	cmp	r3, #0
 800da86:	d003      	beq.n	800da90 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800da88:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800da8c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 800da90:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800da94:	2b00      	cmp	r3, #0
 800da96:	d101      	bne.n	800da9c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800da98:	2300      	movs	r3, #0
 800da9a:	e000      	b.n	800da9e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800da9c:	2301      	movs	r3, #1
}
 800da9e:	4618      	mov	r0, r3
 800daa0:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800daa4:	46bd      	mov	sp, r7
 800daa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800daaa:	bf00      	nop
 800daac:	58024400 	.word	0x58024400

0800dab0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b090      	sub	sp, #64	; 0x40
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800daba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dabe:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800dac2:	430b      	orrs	r3, r1
 800dac4:	f040 8094 	bne.w	800dbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800dac8:	4b97      	ldr	r3, [pc, #604]	; (800dd28 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800daca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dacc:	f003 0307 	and.w	r3, r3, #7
 800dad0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800dad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dad4:	2b04      	cmp	r3, #4
 800dad6:	f200 8087 	bhi.w	800dbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800dada:	a201      	add	r2, pc, #4	; (adr r2, 800dae0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800dadc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dae0:	0800daf5 	.word	0x0800daf5
 800dae4:	0800db1d 	.word	0x0800db1d
 800dae8:	0800db45 	.word	0x0800db45
 800daec:	0800dbe1 	.word	0x0800dbe1
 800daf0:	0800db6d 	.word	0x0800db6d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800daf4:	4b8c      	ldr	r3, [pc, #560]	; (800dd28 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dafc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800db00:	d108      	bne.n	800db14 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800db02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800db06:	4618      	mov	r0, r3
 800db08:	f000 ff68 	bl	800e9dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800db0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800db10:	f000 bc97 	b.w	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800db14:	2300      	movs	r3, #0
 800db16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db18:	f000 bc93 	b.w	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800db1c:	4b82      	ldr	r3, [pc, #520]	; (800dd28 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800db24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800db28:	d108      	bne.n	800db3c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800db2a:	f107 0318 	add.w	r3, r7, #24
 800db2e:	4618      	mov	r0, r3
 800db30:	f000 fcac 	bl	800e48c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800db34:	69bb      	ldr	r3, [r7, #24]
 800db36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800db38:	f000 bc83 	b.w	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800db3c:	2300      	movs	r3, #0
 800db3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db40:	f000 bc7f 	b.w	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800db44:	4b78      	ldr	r3, [pc, #480]	; (800dd28 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800db4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800db50:	d108      	bne.n	800db64 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800db52:	f107 030c 	add.w	r3, r7, #12
 800db56:	4618      	mov	r0, r3
 800db58:	f000 fdec 	bl	800e734 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800db60:	f000 bc6f 	b.w	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800db64:	2300      	movs	r3, #0
 800db66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db68:	f000 bc6b 	b.w	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800db6c:	4b6e      	ldr	r3, [pc, #440]	; (800dd28 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800db6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db70:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800db74:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800db76:	4b6c      	ldr	r3, [pc, #432]	; (800dd28 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	f003 0304 	and.w	r3, r3, #4
 800db7e:	2b04      	cmp	r3, #4
 800db80:	d10c      	bne.n	800db9c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800db82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db84:	2b00      	cmp	r3, #0
 800db86:	d109      	bne.n	800db9c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800db88:	4b67      	ldr	r3, [pc, #412]	; (800dd28 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	08db      	lsrs	r3, r3, #3
 800db8e:	f003 0303 	and.w	r3, r3, #3
 800db92:	4a66      	ldr	r2, [pc, #408]	; (800dd2c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800db94:	fa22 f303 	lsr.w	r3, r2, r3
 800db98:	63fb      	str	r3, [r7, #60]	; 0x3c
 800db9a:	e01f      	b.n	800dbdc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800db9c:	4b62      	ldr	r3, [pc, #392]	; (800dd28 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dba4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dba8:	d106      	bne.n	800dbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800dbaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dbb0:	d102      	bne.n	800dbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800dbb2:	4b5f      	ldr	r3, [pc, #380]	; (800dd30 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800dbb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dbb6:	e011      	b.n	800dbdc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800dbb8:	4b5b      	ldr	r3, [pc, #364]	; (800dd28 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dbc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dbc4:	d106      	bne.n	800dbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800dbc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dbcc:	d102      	bne.n	800dbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800dbce:	4b59      	ldr	r3, [pc, #356]	; (800dd34 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800dbd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dbd2:	e003      	b.n	800dbdc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800dbd8:	f000 bc33 	b.w	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800dbdc:	f000 bc31 	b.w	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800dbe0:	4b55      	ldr	r3, [pc, #340]	; (800dd38 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800dbe2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dbe4:	f000 bc2d 	b.w	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800dbe8:	2300      	movs	r3, #0
 800dbea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dbec:	f000 bc29 	b.w	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 800dbf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dbf4:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800dbf8:	430b      	orrs	r3, r1
 800dbfa:	f040 809f 	bne.w	800dd3c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 800dbfe:	4b4a      	ldr	r3, [pc, #296]	; (800dd28 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dc00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc02:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800dc06:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800dc08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dc0e:	d04d      	beq.n	800dcac <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800dc10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dc16:	f200 8084 	bhi.w	800dd22 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800dc1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc1c:	2bc0      	cmp	r3, #192	; 0xc0
 800dc1e:	d07d      	beq.n	800dd1c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 800dc20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc22:	2bc0      	cmp	r3, #192	; 0xc0
 800dc24:	d87d      	bhi.n	800dd22 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800dc26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc28:	2b80      	cmp	r3, #128	; 0x80
 800dc2a:	d02d      	beq.n	800dc88 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 800dc2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc2e:	2b80      	cmp	r3, #128	; 0x80
 800dc30:	d877      	bhi.n	800dd22 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800dc32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d003      	beq.n	800dc40 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 800dc38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc3a:	2b40      	cmp	r3, #64	; 0x40
 800dc3c:	d012      	beq.n	800dc64 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800dc3e:	e070      	b.n	800dd22 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800dc40:	4b39      	ldr	r3, [pc, #228]	; (800dd28 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dc48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dc4c:	d107      	bne.n	800dc5e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dc4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dc52:	4618      	mov	r0, r3
 800dc54:	f000 fec2 	bl	800e9dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800dc58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dc5c:	e3f1      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800dc5e:	2300      	movs	r3, #0
 800dc60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc62:	e3ee      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800dc64:	4b30      	ldr	r3, [pc, #192]	; (800dd28 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dc6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dc70:	d107      	bne.n	800dc82 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dc72:	f107 0318 	add.w	r3, r7, #24
 800dc76:	4618      	mov	r0, r3
 800dc78:	f000 fc08 	bl	800e48c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800dc7c:	69bb      	ldr	r3, [r7, #24]
 800dc7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dc80:	e3df      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800dc82:	2300      	movs	r3, #0
 800dc84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dc86:	e3dc      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800dc88:	4b27      	ldr	r3, [pc, #156]	; (800dd28 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dc90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dc94:	d107      	bne.n	800dca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dc96:	f107 030c 	add.w	r3, r7, #12
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	f000 fd4a 	bl	800e734 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dca4:	e3cd      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800dca6:	2300      	movs	r3, #0
 800dca8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dcaa:	e3ca      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800dcac:	4b1e      	ldr	r3, [pc, #120]	; (800dd28 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dcae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dcb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800dcb4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800dcb6:	4b1c      	ldr	r3, [pc, #112]	; (800dd28 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	f003 0304 	and.w	r3, r3, #4
 800dcbe:	2b04      	cmp	r3, #4
 800dcc0:	d10c      	bne.n	800dcdc <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 800dcc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d109      	bne.n	800dcdc <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dcc8:	4b17      	ldr	r3, [pc, #92]	; (800dd28 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	08db      	lsrs	r3, r3, #3
 800dcce:	f003 0303 	and.w	r3, r3, #3
 800dcd2:	4a16      	ldr	r2, [pc, #88]	; (800dd2c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800dcd4:	fa22 f303 	lsr.w	r3, r2, r3
 800dcd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dcda:	e01e      	b.n	800dd1a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800dcdc:	4b12      	ldr	r3, [pc, #72]	; (800dd28 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dce4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dce8:	d106      	bne.n	800dcf8 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 800dcea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dcf0:	d102      	bne.n	800dcf8 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800dcf2:	4b0f      	ldr	r3, [pc, #60]	; (800dd30 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800dcf4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dcf6:	e010      	b.n	800dd1a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800dcf8:	4b0b      	ldr	r3, [pc, #44]	; (800dd28 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dd00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dd04:	d106      	bne.n	800dd14 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800dd06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dd0c:	d102      	bne.n	800dd14 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800dd0e:	4b09      	ldr	r3, [pc, #36]	; (800dd34 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800dd10:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dd12:	e002      	b.n	800dd1a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800dd14:	2300      	movs	r3, #0
 800dd16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800dd18:	e393      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800dd1a:	e392      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800dd1c:	4b06      	ldr	r3, [pc, #24]	; (800dd38 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800dd1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd20:	e38f      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800dd22:	2300      	movs	r3, #0
 800dd24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd26:	e38c      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800dd28:	58024400 	.word	0x58024400
 800dd2c:	03d09000 	.word	0x03d09000
 800dd30:	003d0900 	.word	0x003d0900
 800dd34:	016e3600 	.word	0x016e3600
 800dd38:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 800dd3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd40:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800dd44:	430b      	orrs	r3, r1
 800dd46:	f040 809c 	bne.w	800de82 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 800dd4a:	4b9e      	ldr	r3, [pc, #632]	; (800dfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800dd4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd4e:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800dd52:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800dd54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dd5a:	d054      	beq.n	800de06 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 800dd5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dd62:	f200 808b 	bhi.w	800de7c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800dd66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd68:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800dd6c:	f000 8083 	beq.w	800de76 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 800dd70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd72:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800dd76:	f200 8081 	bhi.w	800de7c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800dd7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dd80:	d02f      	beq.n	800dde2 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800dd82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dd88:	d878      	bhi.n	800de7c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800dd8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d004      	beq.n	800dd9a <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 800dd90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dd96:	d012      	beq.n	800ddbe <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 800dd98:	e070      	b.n	800de7c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800dd9a:	4b8a      	ldr	r3, [pc, #552]	; (800dfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dda2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dda6:	d107      	bne.n	800ddb8 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dda8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ddac:	4618      	mov	r0, r3
 800ddae:	f000 fe15 	bl	800e9dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ddb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ddb6:	e344      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ddb8:	2300      	movs	r3, #0
 800ddba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ddbc:	e341      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ddbe:	4b81      	ldr	r3, [pc, #516]	; (800dfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ddc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ddca:	d107      	bne.n	800dddc <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ddcc:	f107 0318 	add.w	r3, r7, #24
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	f000 fb5b 	bl	800e48c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ddd6:	69bb      	ldr	r3, [r7, #24]
 800ddd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ddda:	e332      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800dddc:	2300      	movs	r3, #0
 800ddde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dde0:	e32f      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800dde2:	4b78      	ldr	r3, [pc, #480]	; (800dfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ddea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ddee:	d107      	bne.n	800de00 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ddf0:	f107 030c 	add.w	r3, r7, #12
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f000 fc9d 	bl	800e734 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ddfe:	e320      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800de00:	2300      	movs	r3, #0
 800de02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de04:	e31d      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800de06:	4b6f      	ldr	r3, [pc, #444]	; (800dfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800de08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de0a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800de0e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800de10:	4b6c      	ldr	r3, [pc, #432]	; (800dfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	f003 0304 	and.w	r3, r3, #4
 800de18:	2b04      	cmp	r3, #4
 800de1a:	d10c      	bne.n	800de36 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 800de1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d109      	bne.n	800de36 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800de22:	4b68      	ldr	r3, [pc, #416]	; (800dfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	08db      	lsrs	r3, r3, #3
 800de28:	f003 0303 	and.w	r3, r3, #3
 800de2c:	4a66      	ldr	r2, [pc, #408]	; (800dfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800de2e:	fa22 f303 	lsr.w	r3, r2, r3
 800de32:	63fb      	str	r3, [r7, #60]	; 0x3c
 800de34:	e01e      	b.n	800de74 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800de36:	4b63      	ldr	r3, [pc, #396]	; (800dfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800de42:	d106      	bne.n	800de52 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800de44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800de4a:	d102      	bne.n	800de52 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800de4c:	4b5f      	ldr	r3, [pc, #380]	; (800dfcc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800de4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800de50:	e010      	b.n	800de74 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800de52:	4b5c      	ldr	r3, [pc, #368]	; (800dfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800de5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800de5e:	d106      	bne.n	800de6e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800de60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800de66:	d102      	bne.n	800de6e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800de68:	4b59      	ldr	r3, [pc, #356]	; (800dfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800de6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800de6c:	e002      	b.n	800de74 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800de6e:	2300      	movs	r3, #0
 800de70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 800de72:	e2e6      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800de74:	e2e5      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800de76:	4b57      	ldr	r3, [pc, #348]	; (800dfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800de78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de7a:	e2e2      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800de7c:	2300      	movs	r3, #0
 800de7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de80:	e2df      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800de82:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de86:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800de8a:	430b      	orrs	r3, r1
 800de8c:	f040 80a7 	bne.w	800dfde <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800de90:	4b4c      	ldr	r3, [pc, #304]	; (800dfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800de92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de94:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800de98:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800de9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dea0:	d055      	beq.n	800df4e <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 800dea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dea4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dea8:	f200 8096 	bhi.w	800dfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800deac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800deb2:	f000 8084 	beq.w	800dfbe <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 800deb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deb8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800debc:	f200 808c 	bhi.w	800dfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800dec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dec2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dec6:	d030      	beq.n	800df2a <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 800dec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dece:	f200 8083 	bhi.w	800dfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800ded2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d004      	beq.n	800dee2 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800ded8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dede:	d012      	beq.n	800df06 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 800dee0:	e07a      	b.n	800dfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800dee2:	4b38      	ldr	r3, [pc, #224]	; (800dfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800deea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800deee:	d107      	bne.n	800df00 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800def0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800def4:	4618      	mov	r0, r3
 800def6:	f000 fd71 	bl	800e9dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800defa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800defc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800defe:	e2a0      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800df00:	2300      	movs	r3, #0
 800df02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df04:	e29d      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800df06:	4b2f      	ldr	r3, [pc, #188]	; (800dfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800df0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800df12:	d107      	bne.n	800df24 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800df14:	f107 0318 	add.w	r3, r7, #24
 800df18:	4618      	mov	r0, r3
 800df1a:	f000 fab7 	bl	800e48c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800df1e:	69bb      	ldr	r3, [r7, #24]
 800df20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800df22:	e28e      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800df24:	2300      	movs	r3, #0
 800df26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df28:	e28b      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800df2a:	4b26      	ldr	r3, [pc, #152]	; (800dfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800df32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800df36:	d107      	bne.n	800df48 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800df38:	f107 030c 	add.w	r3, r7, #12
 800df3c:	4618      	mov	r0, r3
 800df3e:	f000 fbf9 	bl	800e734 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800df46:	e27c      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800df48:	2300      	movs	r3, #0
 800df4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df4c:	e279      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800df4e:	4b1d      	ldr	r3, [pc, #116]	; (800dfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800df50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800df56:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800df58:	4b1a      	ldr	r3, [pc, #104]	; (800dfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	f003 0304 	and.w	r3, r3, #4
 800df60:	2b04      	cmp	r3, #4
 800df62:	d10c      	bne.n	800df7e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 800df64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df66:	2b00      	cmp	r3, #0
 800df68:	d109      	bne.n	800df7e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800df6a:	4b16      	ldr	r3, [pc, #88]	; (800dfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	08db      	lsrs	r3, r3, #3
 800df70:	f003 0303 	and.w	r3, r3, #3
 800df74:	4a14      	ldr	r2, [pc, #80]	; (800dfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800df76:	fa22 f303 	lsr.w	r3, r2, r3
 800df7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800df7c:	e01e      	b.n	800dfbc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800df7e:	4b11      	ldr	r3, [pc, #68]	; (800dfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800df8a:	d106      	bne.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800df8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800df92:	d102      	bne.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800df94:	4b0d      	ldr	r3, [pc, #52]	; (800dfcc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800df96:	63fb      	str	r3, [r7, #60]	; 0x3c
 800df98:	e010      	b.n	800dfbc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800df9a:	4b0a      	ldr	r3, [pc, #40]	; (800dfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dfa2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dfa6:	d106      	bne.n	800dfb6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800dfa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dfae:	d102      	bne.n	800dfb6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800dfb0:	4b07      	ldr	r3, [pc, #28]	; (800dfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800dfb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dfb4:	e002      	b.n	800dfbc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800dfba:	e242      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800dfbc:	e241      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800dfbe:	4b05      	ldr	r3, [pc, #20]	; (800dfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800dfc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dfc2:	e23e      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800dfc4:	58024400 	.word	0x58024400
 800dfc8:	03d09000 	.word	0x03d09000
 800dfcc:	003d0900 	.word	0x003d0900
 800dfd0:	016e3600 	.word	0x016e3600
 800dfd4:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800dfd8:	2300      	movs	r3, #0
 800dfda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dfdc:	e231      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800dfde:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dfe2:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800dfe6:	430b      	orrs	r3, r1
 800dfe8:	f040 8085 	bne.w	800e0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800dfec:	4b9c      	ldr	r3, [pc, #624]	; (800e260 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800dfee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dff0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800dff4:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800dff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dff8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800dffc:	d06b      	beq.n	800e0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800dffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e000:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e004:	d874      	bhi.n	800e0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800e006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e008:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e00c:	d056      	beq.n	800e0bc <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 800e00e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e010:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e014:	d86c      	bhi.n	800e0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800e016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e018:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e01c:	d03b      	beq.n	800e096 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 800e01e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e020:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e024:	d864      	bhi.n	800e0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800e026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e028:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e02c:	d021      	beq.n	800e072 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 800e02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e030:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e034:	d85c      	bhi.n	800e0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800e036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d004      	beq.n	800e046 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 800e03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e03e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e042:	d004      	beq.n	800e04e <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 800e044:	e054      	b.n	800e0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800e046:	f7fe fb5f 	bl	800c708 <HAL_RCC_GetPCLK1Freq>
 800e04a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e04c:	e1f9      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e04e:	4b84      	ldr	r3, [pc, #528]	; (800e260 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e056:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e05a:	d107      	bne.n	800e06c <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e05c:	f107 0318 	add.w	r3, r7, #24
 800e060:	4618      	mov	r0, r3
 800e062:	f000 fa13 	bl	800e48c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e066:	69fb      	ldr	r3, [r7, #28]
 800e068:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e06a:	e1ea      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800e06c:	2300      	movs	r3, #0
 800e06e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e070:	e1e7      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e072:	4b7b      	ldr	r3, [pc, #492]	; (800e260 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e07a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e07e:	d107      	bne.n	800e090 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e080:	f107 030c 	add.w	r3, r7, #12
 800e084:	4618      	mov	r0, r3
 800e086:	f000 fb55 	bl	800e734 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e08a:	693b      	ldr	r3, [r7, #16]
 800e08c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e08e:	e1d8      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800e090:	2300      	movs	r3, #0
 800e092:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e094:	e1d5      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e096:	4b72      	ldr	r3, [pc, #456]	; (800e260 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	f003 0304 	and.w	r3, r3, #4
 800e09e:	2b04      	cmp	r3, #4
 800e0a0:	d109      	bne.n	800e0b6 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e0a2:	4b6f      	ldr	r3, [pc, #444]	; (800e260 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	08db      	lsrs	r3, r3, #3
 800e0a8:	f003 0303 	and.w	r3, r3, #3
 800e0ac:	4a6d      	ldr	r2, [pc, #436]	; (800e264 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800e0ae:	fa22 f303 	lsr.w	r3, r2, r3
 800e0b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e0b4:	e1c5      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0ba:	e1c2      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800e0bc:	4b68      	ldr	r3, [pc, #416]	; (800e260 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e0c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e0c8:	d102      	bne.n	800e0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 800e0ca:	4b67      	ldr	r3, [pc, #412]	; (800e268 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800e0cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e0ce:	e1b8      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0d4:	e1b5      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e0d6:	4b62      	ldr	r3, [pc, #392]	; (800e260 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e0de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e0e2:	d102      	bne.n	800e0ea <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 800e0e4:	4b61      	ldr	r3, [pc, #388]	; (800e26c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800e0e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e0e8:	e1ab      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0ee:	e1a8      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0f4:	e1a5      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800e0f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e0fa:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800e0fe:	430b      	orrs	r3, r1
 800e100:	d173      	bne.n	800e1ea <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800e102:	4b57      	ldr	r3, [pc, #348]	; (800e260 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e106:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800e10a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e10c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e10e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e112:	d02f      	beq.n	800e174 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 800e114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e116:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e11a:	d863      	bhi.n	800e1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800e11c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d004      	beq.n	800e12c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800e122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e128:	d012      	beq.n	800e150 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 800e12a:	e05b      	b.n	800e1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e12c:	4b4c      	ldr	r3, [pc, #304]	; (800e260 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e134:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e138:	d107      	bne.n	800e14a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e13a:	f107 0318 	add.w	r3, r7, #24
 800e13e:	4618      	mov	r0, r3
 800e140:	f000 f9a4 	bl	800e48c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e144:	69bb      	ldr	r3, [r7, #24]
 800e146:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e148:	e17b      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800e14a:	2300      	movs	r3, #0
 800e14c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e14e:	e178      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e150:	4b43      	ldr	r3, [pc, #268]	; (800e260 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e158:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e15c:	d107      	bne.n	800e16e <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e15e:	f107 030c 	add.w	r3, r7, #12
 800e162:	4618      	mov	r0, r3
 800e164:	f000 fae6 	bl	800e734 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800e168:	697b      	ldr	r3, [r7, #20]
 800e16a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e16c:	e169      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800e16e:	2300      	movs	r3, #0
 800e170:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e172:	e166      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e174:	4b3a      	ldr	r3, [pc, #232]	; (800e260 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e178:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e17c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e17e:	4b38      	ldr	r3, [pc, #224]	; (800e260 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	f003 0304 	and.w	r3, r3, #4
 800e186:	2b04      	cmp	r3, #4
 800e188:	d10c      	bne.n	800e1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 800e18a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d109      	bne.n	800e1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e190:	4b33      	ldr	r3, [pc, #204]	; (800e260 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	08db      	lsrs	r3, r3, #3
 800e196:	f003 0303 	and.w	r3, r3, #3
 800e19a:	4a32      	ldr	r2, [pc, #200]	; (800e264 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800e19c:	fa22 f303 	lsr.w	r3, r2, r3
 800e1a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e1a2:	e01e      	b.n	800e1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e1a4:	4b2e      	ldr	r3, [pc, #184]	; (800e260 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e1ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e1b0:	d106      	bne.n	800e1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 800e1b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e1b8:	d102      	bne.n	800e1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e1ba:	4b2b      	ldr	r3, [pc, #172]	; (800e268 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800e1bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e1be:	e010      	b.n	800e1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e1c0:	4b27      	ldr	r3, [pc, #156]	; (800e260 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e1c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e1cc:	d106      	bne.n	800e1dc <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800e1ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e1d4:	d102      	bne.n	800e1dc <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e1d6:	4b25      	ldr	r3, [pc, #148]	; (800e26c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800e1d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e1da:	e002      	b.n	800e1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e1dc:	2300      	movs	r3, #0
 800e1de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e1e0:	e12f      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800e1e2:	e12e      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1e8:	e12b      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800e1ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e1ee:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800e1f2:	430b      	orrs	r3, r1
 800e1f4:	d13c      	bne.n	800e270 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800e1f6:	4b1a      	ldr	r3, [pc, #104]	; (800e260 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e1f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e1fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e1fe:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e202:	2b00      	cmp	r3, #0
 800e204:	d004      	beq.n	800e210 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800e206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e20c:	d012      	beq.n	800e234 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800e20e:	e023      	b.n	800e258 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e210:	4b13      	ldr	r3, [pc, #76]	; (800e260 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e218:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e21c:	d107      	bne.n	800e22e <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e21e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e222:	4618      	mov	r0, r3
 800e224:	f000 fbda 	bl	800e9dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e22a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e22c:	e109      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800e22e:	2300      	movs	r3, #0
 800e230:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e232:	e106      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e234:	4b0a      	ldr	r3, [pc, #40]	; (800e260 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e23c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e240:	d107      	bne.n	800e252 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e242:	f107 0318 	add.w	r3, r7, #24
 800e246:	4618      	mov	r0, r3
 800e248:	f000 f920 	bl	800e48c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800e24c:	6a3b      	ldr	r3, [r7, #32]
 800e24e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e250:	e0f7      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800e252:	2300      	movs	r3, #0
 800e254:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e256:	e0f4      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800e258:	2300      	movs	r3, #0
 800e25a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e25c:	e0f1      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800e25e:	bf00      	nop
 800e260:	58024400 	.word	0x58024400
 800e264:	03d09000 	.word	0x03d09000
 800e268:	003d0900 	.word	0x003d0900
 800e26c:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800e270:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e274:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800e278:	430b      	orrs	r3, r1
 800e27a:	f040 8091 	bne.w	800e3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800e27e:	4b73      	ldr	r3, [pc, #460]	; (800e44c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800e280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e282:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800e286:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e28a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800e28e:	f000 8081 	beq.w	800e394 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800e292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e294:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800e298:	d87f      	bhi.n	800e39a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800e29a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e29c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e2a0:	d06b      	beq.n	800e37a <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800e2a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e2a8:	d877      	bhi.n	800e39a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800e2aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e2b0:	d056      	beq.n	800e360 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800e2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e2b8:	d86f      	bhi.n	800e39a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800e2ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e2c0:	d03b      	beq.n	800e33a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800e2c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e2c8:	d867      	bhi.n	800e39a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800e2ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e2d0:	d021      	beq.n	800e316 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800e2d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e2d8:	d85f      	bhi.n	800e39a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800e2da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d004      	beq.n	800e2ea <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800e2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e2e6:	d004      	beq.n	800e2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800e2e8:	e057      	b.n	800e39a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800e2ea:	f000 f8b9 	bl	800e460 <HAL_RCCEx_GetD3PCLK1Freq>
 800e2ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e2f0:	e0a7      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e2f2:	4b56      	ldr	r3, [pc, #344]	; (800e44c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e2fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e2fe:	d107      	bne.n	800e310 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e300:	f107 0318 	add.w	r3, r7, #24
 800e304:	4618      	mov	r0, r3
 800e306:	f000 f8c1 	bl	800e48c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e30a:	69fb      	ldr	r3, [r7, #28]
 800e30c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e30e:	e098      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800e310:	2300      	movs	r3, #0
 800e312:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e314:	e095      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e316:	4b4d      	ldr	r3, [pc, #308]	; (800e44c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e31e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e322:	d107      	bne.n	800e334 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e324:	f107 030c 	add.w	r3, r7, #12
 800e328:	4618      	mov	r0, r3
 800e32a:	f000 fa03 	bl	800e734 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e32e:	693b      	ldr	r3, [r7, #16]
 800e330:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e332:	e086      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800e334:	2300      	movs	r3, #0
 800e336:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e338:	e083      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e33a:	4b44      	ldr	r3, [pc, #272]	; (800e44c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	f003 0304 	and.w	r3, r3, #4
 800e342:	2b04      	cmp	r3, #4
 800e344:	d109      	bne.n	800e35a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e346:	4b41      	ldr	r3, [pc, #260]	; (800e44c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	08db      	lsrs	r3, r3, #3
 800e34c:	f003 0303 	and.w	r3, r3, #3
 800e350:	4a3f      	ldr	r2, [pc, #252]	; (800e450 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800e352:	fa22 f303 	lsr.w	r3, r2, r3
 800e356:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e358:	e073      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800e35a:	2300      	movs	r3, #0
 800e35c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e35e:	e070      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800e360:	4b3a      	ldr	r3, [pc, #232]	; (800e44c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e368:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e36c:	d102      	bne.n	800e374 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 800e36e:	4b39      	ldr	r3, [pc, #228]	; (800e454 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 800e370:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e372:	e066      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800e374:	2300      	movs	r3, #0
 800e376:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e378:	e063      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e37a:	4b34      	ldr	r3, [pc, #208]	; (800e44c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e382:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e386:	d102      	bne.n	800e38e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 800e388:	4b33      	ldr	r3, [pc, #204]	; (800e458 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800e38a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e38c:	e059      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800e38e:	2300      	movs	r3, #0
 800e390:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e392:	e056      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e394:	4b31      	ldr	r3, [pc, #196]	; (800e45c <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 800e396:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e398:	e053      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800e39a:	2300      	movs	r3, #0
 800e39c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e39e:	e050      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800e3a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e3a4:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800e3a8:	430b      	orrs	r3, r1
 800e3aa:	d148      	bne.n	800e43e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800e3ac:	4b27      	ldr	r3, [pc, #156]	; (800e44c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800e3ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e3b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e3b4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e3b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e3bc:	d02a      	beq.n	800e414 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800e3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e3c4:	d838      	bhi.n	800e438 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800e3c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d004      	beq.n	800e3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 800e3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e3d2:	d00d      	beq.n	800e3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 800e3d4:	e030      	b.n	800e438 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e3d6:	4b1d      	ldr	r3, [pc, #116]	; (800e44c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e3de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e3e2:	d102      	bne.n	800e3ea <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 800e3e4:	4b1c      	ldr	r3, [pc, #112]	; (800e458 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800e3e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e3e8:	e02b      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3ee:	e028      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e3f0:	4b16      	ldr	r3, [pc, #88]	; (800e44c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e3f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e3fc:	d107      	bne.n	800e40e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e3fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e402:	4618      	mov	r0, r3
 800e404:	f000 faea 	bl	800e9dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e40a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e40c:	e019      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800e40e:	2300      	movs	r3, #0
 800e410:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e412:	e016      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e414:	4b0d      	ldr	r3, [pc, #52]	; (800e44c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e41c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e420:	d107      	bne.n	800e432 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e422:	f107 0318 	add.w	r3, r7, #24
 800e426:	4618      	mov	r0, r3
 800e428:	f000 f830 	bl	800e48c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e42c:	69fb      	ldr	r3, [r7, #28]
 800e42e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e430:	e007      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800e432:	2300      	movs	r3, #0
 800e434:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e436:	e004      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800e438:	2300      	movs	r3, #0
 800e43a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e43c:	e001      	b.n	800e442 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 800e43e:	2300      	movs	r3, #0
 800e440:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800e442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e444:	4618      	mov	r0, r3
 800e446:	3740      	adds	r7, #64	; 0x40
 800e448:	46bd      	mov	sp, r7
 800e44a:	bd80      	pop	{r7, pc}
 800e44c:	58024400 	.word	0x58024400
 800e450:	03d09000 	.word	0x03d09000
 800e454:	003d0900 	.word	0x003d0900
 800e458:	016e3600 	.word	0x016e3600
 800e45c:	00bb8000 	.word	0x00bb8000

0800e460 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800e460:	b580      	push	{r7, lr}
 800e462:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800e464:	f7fe f920 	bl	800c6a8 <HAL_RCC_GetHCLKFreq>
 800e468:	4602      	mov	r2, r0
 800e46a:	4b06      	ldr	r3, [pc, #24]	; (800e484 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800e46c:	6a1b      	ldr	r3, [r3, #32]
 800e46e:	091b      	lsrs	r3, r3, #4
 800e470:	f003 0307 	and.w	r3, r3, #7
 800e474:	4904      	ldr	r1, [pc, #16]	; (800e488 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800e476:	5ccb      	ldrb	r3, [r1, r3]
 800e478:	f003 031f 	and.w	r3, r3, #31
 800e47c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800e480:	4618      	mov	r0, r3
 800e482:	bd80      	pop	{r7, pc}
 800e484:	58024400 	.word	0x58024400
 800e488:	080144a8 	.word	0x080144a8

0800e48c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800e48c:	b480      	push	{r7}
 800e48e:	b089      	sub	sp, #36	; 0x24
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e494:	4ba1      	ldr	r3, [pc, #644]	; (800e71c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e498:	f003 0303 	and.w	r3, r3, #3
 800e49c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800e49e:	4b9f      	ldr	r3, [pc, #636]	; (800e71c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e4a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4a2:	0b1b      	lsrs	r3, r3, #12
 800e4a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e4a8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800e4aa:	4b9c      	ldr	r3, [pc, #624]	; (800e71c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e4ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4ae:	091b      	lsrs	r3, r3, #4
 800e4b0:	f003 0301 	and.w	r3, r3, #1
 800e4b4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800e4b6:	4b99      	ldr	r3, [pc, #612]	; (800e71c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e4b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4ba:	08db      	lsrs	r3, r3, #3
 800e4bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e4c0:	693a      	ldr	r2, [r7, #16]
 800e4c2:	fb02 f303 	mul.w	r3, r2, r3
 800e4c6:	ee07 3a90 	vmov	s15, r3
 800e4ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e4ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800e4d2:	697b      	ldr	r3, [r7, #20]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	f000 8111 	beq.w	800e6fc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800e4da:	69bb      	ldr	r3, [r7, #24]
 800e4dc:	2b02      	cmp	r3, #2
 800e4de:	f000 8083 	beq.w	800e5e8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800e4e2:	69bb      	ldr	r3, [r7, #24]
 800e4e4:	2b02      	cmp	r3, #2
 800e4e6:	f200 80a1 	bhi.w	800e62c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800e4ea:	69bb      	ldr	r3, [r7, #24]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d003      	beq.n	800e4f8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800e4f0:	69bb      	ldr	r3, [r7, #24]
 800e4f2:	2b01      	cmp	r3, #1
 800e4f4:	d056      	beq.n	800e5a4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800e4f6:	e099      	b.n	800e62c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e4f8:	4b88      	ldr	r3, [pc, #544]	; (800e71c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	f003 0320 	and.w	r3, r3, #32
 800e500:	2b00      	cmp	r3, #0
 800e502:	d02d      	beq.n	800e560 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e504:	4b85      	ldr	r3, [pc, #532]	; (800e71c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	08db      	lsrs	r3, r3, #3
 800e50a:	f003 0303 	and.w	r3, r3, #3
 800e50e:	4a84      	ldr	r2, [pc, #528]	; (800e720 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800e510:	fa22 f303 	lsr.w	r3, r2, r3
 800e514:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e516:	68bb      	ldr	r3, [r7, #8]
 800e518:	ee07 3a90 	vmov	s15, r3
 800e51c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e520:	697b      	ldr	r3, [r7, #20]
 800e522:	ee07 3a90 	vmov	s15, r3
 800e526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e52a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e52e:	4b7b      	ldr	r3, [pc, #492]	; (800e71c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e536:	ee07 3a90 	vmov	s15, r3
 800e53a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e53e:	ed97 6a03 	vldr	s12, [r7, #12]
 800e542:	eddf 5a78 	vldr	s11, [pc, #480]	; 800e724 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e546:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e54a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e54e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e55a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e55e:	e087      	b.n	800e670 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e560:	697b      	ldr	r3, [r7, #20]
 800e562:	ee07 3a90 	vmov	s15, r3
 800e566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e56a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800e728 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800e56e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e572:	4b6a      	ldr	r3, [pc, #424]	; (800e71c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e57a:	ee07 3a90 	vmov	s15, r3
 800e57e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e582:	ed97 6a03 	vldr	s12, [r7, #12]
 800e586:	eddf 5a67 	vldr	s11, [pc, #412]	; 800e724 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e58a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e58e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e592:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e59a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e59e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e5a2:	e065      	b.n	800e670 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e5a4:	697b      	ldr	r3, [r7, #20]
 800e5a6:	ee07 3a90 	vmov	s15, r3
 800e5aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e5ae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800e72c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800e5b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e5b6:	4b59      	ldr	r3, [pc, #356]	; (800e71c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e5b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e5be:	ee07 3a90 	vmov	s15, r3
 800e5c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e5c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800e5ca:	eddf 5a56 	vldr	s11, [pc, #344]	; 800e724 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e5ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e5d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e5d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e5da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e5de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e5e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e5e6:	e043      	b.n	800e670 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e5e8:	697b      	ldr	r3, [r7, #20]
 800e5ea:	ee07 3a90 	vmov	s15, r3
 800e5ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e5f2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800e730 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800e5f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e5fa:	4b48      	ldr	r3, [pc, #288]	; (800e71c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e5fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e602:	ee07 3a90 	vmov	s15, r3
 800e606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e60a:	ed97 6a03 	vldr	s12, [r7, #12]
 800e60e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800e724 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e61a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e61e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e622:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e626:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e62a:	e021      	b.n	800e670 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e62c:	697b      	ldr	r3, [r7, #20]
 800e62e:	ee07 3a90 	vmov	s15, r3
 800e632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e636:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800e72c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800e63a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e63e:	4b37      	ldr	r3, [pc, #220]	; (800e71c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e646:	ee07 3a90 	vmov	s15, r3
 800e64a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e64e:	ed97 6a03 	vldr	s12, [r7, #12]
 800e652:	eddf 5a34 	vldr	s11, [pc, #208]	; 800e724 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e65a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e65e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e66a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e66e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800e670:	4b2a      	ldr	r3, [pc, #168]	; (800e71c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e674:	0a5b      	lsrs	r3, r3, #9
 800e676:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e67a:	ee07 3a90 	vmov	s15, r3
 800e67e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e682:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e686:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e68a:	edd7 6a07 	vldr	s13, [r7, #28]
 800e68e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e692:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e696:	ee17 2a90 	vmov	r2, s15
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800e69e:	4b1f      	ldr	r3, [pc, #124]	; (800e71c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e6a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6a2:	0c1b      	lsrs	r3, r3, #16
 800e6a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e6a8:	ee07 3a90 	vmov	s15, r3
 800e6ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e6b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e6b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e6b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800e6bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e6c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e6c4:	ee17 2a90 	vmov	r2, s15
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800e6cc:	4b13      	ldr	r3, [pc, #76]	; (800e71c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e6ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6d0:	0e1b      	lsrs	r3, r3, #24
 800e6d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e6d6:	ee07 3a90 	vmov	s15, r3
 800e6da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e6de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e6e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e6e6:	edd7 6a07 	vldr	s13, [r7, #28]
 800e6ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e6ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e6f2:	ee17 2a90 	vmov	r2, s15
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800e6fa:	e008      	b.n	800e70e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	2200      	movs	r2, #0
 800e700:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	2200      	movs	r2, #0
 800e706:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	2200      	movs	r2, #0
 800e70c:	609a      	str	r2, [r3, #8]
}
 800e70e:	bf00      	nop
 800e710:	3724      	adds	r7, #36	; 0x24
 800e712:	46bd      	mov	sp, r7
 800e714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e718:	4770      	bx	lr
 800e71a:	bf00      	nop
 800e71c:	58024400 	.word	0x58024400
 800e720:	03d09000 	.word	0x03d09000
 800e724:	46000000 	.word	0x46000000
 800e728:	4c742400 	.word	0x4c742400
 800e72c:	4a742400 	.word	0x4a742400
 800e730:	4bb71b00 	.word	0x4bb71b00

0800e734 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800e734:	b480      	push	{r7}
 800e736:	b089      	sub	sp, #36	; 0x24
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e73c:	4ba1      	ldr	r3, [pc, #644]	; (800e9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e73e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e740:	f003 0303 	and.w	r3, r3, #3
 800e744:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800e746:	4b9f      	ldr	r3, [pc, #636]	; (800e9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e74a:	0d1b      	lsrs	r3, r3, #20
 800e74c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e750:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800e752:	4b9c      	ldr	r3, [pc, #624]	; (800e9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e756:	0a1b      	lsrs	r3, r3, #8
 800e758:	f003 0301 	and.w	r3, r3, #1
 800e75c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800e75e:	4b99      	ldr	r3, [pc, #612]	; (800e9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e762:	08db      	lsrs	r3, r3, #3
 800e764:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e768:	693a      	ldr	r2, [r7, #16]
 800e76a:	fb02 f303 	mul.w	r3, r2, r3
 800e76e:	ee07 3a90 	vmov	s15, r3
 800e772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e776:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800e77a:	697b      	ldr	r3, [r7, #20]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	f000 8111 	beq.w	800e9a4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800e782:	69bb      	ldr	r3, [r7, #24]
 800e784:	2b02      	cmp	r3, #2
 800e786:	f000 8083 	beq.w	800e890 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800e78a:	69bb      	ldr	r3, [r7, #24]
 800e78c:	2b02      	cmp	r3, #2
 800e78e:	f200 80a1 	bhi.w	800e8d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800e792:	69bb      	ldr	r3, [r7, #24]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d003      	beq.n	800e7a0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800e798:	69bb      	ldr	r3, [r7, #24]
 800e79a:	2b01      	cmp	r3, #1
 800e79c:	d056      	beq.n	800e84c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800e79e:	e099      	b.n	800e8d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e7a0:	4b88      	ldr	r3, [pc, #544]	; (800e9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	f003 0320 	and.w	r3, r3, #32
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d02d      	beq.n	800e808 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e7ac:	4b85      	ldr	r3, [pc, #532]	; (800e9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	08db      	lsrs	r3, r3, #3
 800e7b2:	f003 0303 	and.w	r3, r3, #3
 800e7b6:	4a84      	ldr	r2, [pc, #528]	; (800e9c8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800e7b8:	fa22 f303 	lsr.w	r3, r2, r3
 800e7bc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e7be:	68bb      	ldr	r3, [r7, #8]
 800e7c0:	ee07 3a90 	vmov	s15, r3
 800e7c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e7c8:	697b      	ldr	r3, [r7, #20]
 800e7ca:	ee07 3a90 	vmov	s15, r3
 800e7ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e7d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e7d6:	4b7b      	ldr	r3, [pc, #492]	; (800e9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e7d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e7de:	ee07 3a90 	vmov	s15, r3
 800e7e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e7e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800e7ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 800e9cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e7ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e7f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e7f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e7fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e7fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e802:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e806:	e087      	b.n	800e918 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e808:	697b      	ldr	r3, [r7, #20]
 800e80a:	ee07 3a90 	vmov	s15, r3
 800e80e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e812:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800e9d0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800e816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e81a:	4b6a      	ldr	r3, [pc, #424]	; (800e9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e81c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e81e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e822:	ee07 3a90 	vmov	s15, r3
 800e826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e82a:	ed97 6a03 	vldr	s12, [r7, #12]
 800e82e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800e9cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e83a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e83e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e842:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e846:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e84a:	e065      	b.n	800e918 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e84c:	697b      	ldr	r3, [r7, #20]
 800e84e:	ee07 3a90 	vmov	s15, r3
 800e852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e856:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800e9d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800e85a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e85e:	4b59      	ldr	r3, [pc, #356]	; (800e9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e866:	ee07 3a90 	vmov	s15, r3
 800e86a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e86e:	ed97 6a03 	vldr	s12, [r7, #12]
 800e872:	eddf 5a56 	vldr	s11, [pc, #344]	; 800e9cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e87a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e87e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e88a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e88e:	e043      	b.n	800e918 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e890:	697b      	ldr	r3, [r7, #20]
 800e892:	ee07 3a90 	vmov	s15, r3
 800e896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e89a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800e9d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800e89e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e8a2:	4b48      	ldr	r3, [pc, #288]	; (800e9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e8a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8aa:	ee07 3a90 	vmov	s15, r3
 800e8ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e8b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800e8b6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800e9cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e8ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e8be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e8c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e8c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e8ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e8ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e8d2:	e021      	b.n	800e918 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e8d4:	697b      	ldr	r3, [r7, #20]
 800e8d6:	ee07 3a90 	vmov	s15, r3
 800e8da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e8de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800e9d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800e8e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e8e6:	4b37      	ldr	r3, [pc, #220]	; (800e9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e8e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8ee:	ee07 3a90 	vmov	s15, r3
 800e8f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e8f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800e8fa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800e9cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e8fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e906:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e90a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e90e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e912:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e916:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800e918:	4b2a      	ldr	r3, [pc, #168]	; (800e9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e91a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e91c:	0a5b      	lsrs	r3, r3, #9
 800e91e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e922:	ee07 3a90 	vmov	s15, r3
 800e926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e92a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e92e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e932:	edd7 6a07 	vldr	s13, [r7, #28]
 800e936:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e93a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e93e:	ee17 2a90 	vmov	r2, s15
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800e946:	4b1f      	ldr	r3, [pc, #124]	; (800e9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e94a:	0c1b      	lsrs	r3, r3, #16
 800e94c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e950:	ee07 3a90 	vmov	s15, r3
 800e954:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e958:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e95c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e960:	edd7 6a07 	vldr	s13, [r7, #28]
 800e964:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e968:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e96c:	ee17 2a90 	vmov	r2, s15
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800e974:	4b13      	ldr	r3, [pc, #76]	; (800e9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e978:	0e1b      	lsrs	r3, r3, #24
 800e97a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e97e:	ee07 3a90 	vmov	s15, r3
 800e982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e986:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e98a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e98e:	edd7 6a07 	vldr	s13, [r7, #28]
 800e992:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e996:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e99a:	ee17 2a90 	vmov	r2, s15
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800e9a2:	e008      	b.n	800e9b6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	2200      	movs	r2, #0
 800e9ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	609a      	str	r2, [r3, #8]
}
 800e9b6:	bf00      	nop
 800e9b8:	3724      	adds	r7, #36	; 0x24
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c0:	4770      	bx	lr
 800e9c2:	bf00      	nop
 800e9c4:	58024400 	.word	0x58024400
 800e9c8:	03d09000 	.word	0x03d09000
 800e9cc:	46000000 	.word	0x46000000
 800e9d0:	4c742400 	.word	0x4c742400
 800e9d4:	4a742400 	.word	0x4a742400
 800e9d8:	4bb71b00 	.word	0x4bb71b00

0800e9dc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800e9dc:	b480      	push	{r7}
 800e9de:	b089      	sub	sp, #36	; 0x24
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e9e4:	4ba0      	ldr	r3, [pc, #640]	; (800ec68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e9e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9e8:	f003 0303 	and.w	r3, r3, #3
 800e9ec:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800e9ee:	4b9e      	ldr	r3, [pc, #632]	; (800ec68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e9f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9f2:	091b      	lsrs	r3, r3, #4
 800e9f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e9f8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800e9fa:	4b9b      	ldr	r3, [pc, #620]	; (800ec68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e9fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9fe:	f003 0301 	and.w	r3, r3, #1
 800ea02:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ea04:	4b98      	ldr	r3, [pc, #608]	; (800ec68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ea06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea08:	08db      	lsrs	r3, r3, #3
 800ea0a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ea0e:	693a      	ldr	r2, [r7, #16]
 800ea10:	fb02 f303 	mul.w	r3, r2, r3
 800ea14:	ee07 3a90 	vmov	s15, r3
 800ea18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea1c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ea20:	697b      	ldr	r3, [r7, #20]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	f000 8111 	beq.w	800ec4a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800ea28:	69bb      	ldr	r3, [r7, #24]
 800ea2a:	2b02      	cmp	r3, #2
 800ea2c:	f000 8083 	beq.w	800eb36 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ea30:	69bb      	ldr	r3, [r7, #24]
 800ea32:	2b02      	cmp	r3, #2
 800ea34:	f200 80a1 	bhi.w	800eb7a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ea38:	69bb      	ldr	r3, [r7, #24]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d003      	beq.n	800ea46 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ea3e:	69bb      	ldr	r3, [r7, #24]
 800ea40:	2b01      	cmp	r3, #1
 800ea42:	d056      	beq.n	800eaf2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ea44:	e099      	b.n	800eb7a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ea46:	4b88      	ldr	r3, [pc, #544]	; (800ec68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	f003 0320 	and.w	r3, r3, #32
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d02d      	beq.n	800eaae <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ea52:	4b85      	ldr	r3, [pc, #532]	; (800ec68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	08db      	lsrs	r3, r3, #3
 800ea58:	f003 0303 	and.w	r3, r3, #3
 800ea5c:	4a83      	ldr	r2, [pc, #524]	; (800ec6c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800ea5e:	fa22 f303 	lsr.w	r3, r2, r3
 800ea62:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ea64:	68bb      	ldr	r3, [r7, #8]
 800ea66:	ee07 3a90 	vmov	s15, r3
 800ea6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ea6e:	697b      	ldr	r3, [r7, #20]
 800ea70:	ee07 3a90 	vmov	s15, r3
 800ea74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ea7c:	4b7a      	ldr	r3, [pc, #488]	; (800ec68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ea7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea84:	ee07 3a90 	vmov	s15, r3
 800ea88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ea8c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ea90:	eddf 5a77 	vldr	s11, [pc, #476]	; 800ec70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ea94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ea98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ea9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eaa0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eaa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eaa8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800eaac:	e087      	b.n	800ebbe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800eaae:	697b      	ldr	r3, [r7, #20]
 800eab0:	ee07 3a90 	vmov	s15, r3
 800eab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eab8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800ec74 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800eabc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eac0:	4b69      	ldr	r3, [pc, #420]	; (800ec68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800eac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eac8:	ee07 3a90 	vmov	s15, r3
 800eacc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ead0:	ed97 6a03 	vldr	s12, [r7, #12]
 800ead4:	eddf 5a66 	vldr	s11, [pc, #408]	; 800ec70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ead8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800eadc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eae0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eae4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eaec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800eaf0:	e065      	b.n	800ebbe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800eaf2:	697b      	ldr	r3, [r7, #20]
 800eaf4:	ee07 3a90 	vmov	s15, r3
 800eaf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eafc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800ec78 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800eb00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eb04:	4b58      	ldr	r3, [pc, #352]	; (800ec68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800eb06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb0c:	ee07 3a90 	vmov	s15, r3
 800eb10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eb14:	ed97 6a03 	vldr	s12, [r7, #12]
 800eb18:	eddf 5a55 	vldr	s11, [pc, #340]	; 800ec70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800eb1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800eb20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eb24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eb28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eb2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eb30:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800eb34:	e043      	b.n	800ebbe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800eb36:	697b      	ldr	r3, [r7, #20]
 800eb38:	ee07 3a90 	vmov	s15, r3
 800eb3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eb40:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800ec7c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800eb44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eb48:	4b47      	ldr	r3, [pc, #284]	; (800ec68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800eb4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb50:	ee07 3a90 	vmov	s15, r3
 800eb54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eb58:	ed97 6a03 	vldr	s12, [r7, #12]
 800eb5c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800ec70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800eb60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800eb64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eb68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eb6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eb70:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eb74:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800eb78:	e021      	b.n	800ebbe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800eb7a:	697b      	ldr	r3, [r7, #20]
 800eb7c:	ee07 3a90 	vmov	s15, r3
 800eb80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eb84:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800ec74 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800eb88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eb8c:	4b36      	ldr	r3, [pc, #216]	; (800ec68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800eb8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb94:	ee07 3a90 	vmov	s15, r3
 800eb98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eb9c:	ed97 6a03 	vldr	s12, [r7, #12]
 800eba0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ec70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800eba4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800eba8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ebac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ebb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ebb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ebb8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ebbc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800ebbe:	4b2a      	ldr	r3, [pc, #168]	; (800ec68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ebc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebc2:	0a5b      	lsrs	r3, r3, #9
 800ebc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ebc8:	ee07 3a90 	vmov	s15, r3
 800ebcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ebd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ebd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ebd8:	edd7 6a07 	vldr	s13, [r7, #28]
 800ebdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ebe0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ebe4:	ee17 2a90 	vmov	r2, s15
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800ebec:	4b1e      	ldr	r3, [pc, #120]	; (800ec68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ebee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebf0:	0c1b      	lsrs	r3, r3, #16
 800ebf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ebf6:	ee07 3a90 	vmov	s15, r3
 800ebfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ebfe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ec02:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ec06:	edd7 6a07 	vldr	s13, [r7, #28]
 800ec0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ec0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ec12:	ee17 2a90 	vmov	r2, s15
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800ec1a:	4b13      	ldr	r3, [pc, #76]	; (800ec68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ec1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec1e:	0e1b      	lsrs	r3, r3, #24
 800ec20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec24:	ee07 3a90 	vmov	s15, r3
 800ec28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ec30:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ec34:	edd7 6a07 	vldr	s13, [r7, #28]
 800ec38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ec3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ec40:	ee17 2a90 	vmov	r2, s15
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ec48:	e008      	b.n	800ec5c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	2200      	movs	r2, #0
 800ec54:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	2200      	movs	r2, #0
 800ec5a:	609a      	str	r2, [r3, #8]
}
 800ec5c:	bf00      	nop
 800ec5e:	3724      	adds	r7, #36	; 0x24
 800ec60:	46bd      	mov	sp, r7
 800ec62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec66:	4770      	bx	lr
 800ec68:	58024400 	.word	0x58024400
 800ec6c:	03d09000 	.word	0x03d09000
 800ec70:	46000000 	.word	0x46000000
 800ec74:	4c742400 	.word	0x4c742400
 800ec78:	4a742400 	.word	0x4a742400
 800ec7c:	4bb71b00 	.word	0x4bb71b00

0800ec80 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b084      	sub	sp, #16
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
 800ec88:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ec8e:	4b53      	ldr	r3, [pc, #332]	; (800eddc <RCCEx_PLL2_Config+0x15c>)
 800ec90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec92:	f003 0303 	and.w	r3, r3, #3
 800ec96:	2b03      	cmp	r3, #3
 800ec98:	d101      	bne.n	800ec9e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ec9a:	2301      	movs	r3, #1
 800ec9c:	e099      	b.n	800edd2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ec9e:	4b4f      	ldr	r3, [pc, #316]	; (800eddc <RCCEx_PLL2_Config+0x15c>)
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	4a4e      	ldr	r2, [pc, #312]	; (800eddc <RCCEx_PLL2_Config+0x15c>)
 800eca4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800eca8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ecaa:	f7f5 f9e7 	bl	800407c <HAL_GetTick>
 800ecae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ecb0:	e008      	b.n	800ecc4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ecb2:	f7f5 f9e3 	bl	800407c <HAL_GetTick>
 800ecb6:	4602      	mov	r2, r0
 800ecb8:	68bb      	ldr	r3, [r7, #8]
 800ecba:	1ad3      	subs	r3, r2, r3
 800ecbc:	2b02      	cmp	r3, #2
 800ecbe:	d901      	bls.n	800ecc4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ecc0:	2303      	movs	r3, #3
 800ecc2:	e086      	b.n	800edd2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ecc4:	4b45      	ldr	r3, [pc, #276]	; (800eddc <RCCEx_PLL2_Config+0x15c>)
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d1f0      	bne.n	800ecb2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ecd0:	4b42      	ldr	r3, [pc, #264]	; (800eddc <RCCEx_PLL2_Config+0x15c>)
 800ecd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecd4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	031b      	lsls	r3, r3, #12
 800ecde:	493f      	ldr	r1, [pc, #252]	; (800eddc <RCCEx_PLL2_Config+0x15c>)
 800ece0:	4313      	orrs	r3, r2
 800ece2:	628b      	str	r3, [r1, #40]	; 0x28
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	685b      	ldr	r3, [r3, #4]
 800ece8:	3b01      	subs	r3, #1
 800ecea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	689b      	ldr	r3, [r3, #8]
 800ecf2:	3b01      	subs	r3, #1
 800ecf4:	025b      	lsls	r3, r3, #9
 800ecf6:	b29b      	uxth	r3, r3
 800ecf8:	431a      	orrs	r2, r3
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	68db      	ldr	r3, [r3, #12]
 800ecfe:	3b01      	subs	r3, #1
 800ed00:	041b      	lsls	r3, r3, #16
 800ed02:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ed06:	431a      	orrs	r2, r3
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	691b      	ldr	r3, [r3, #16]
 800ed0c:	3b01      	subs	r3, #1
 800ed0e:	061b      	lsls	r3, r3, #24
 800ed10:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ed14:	4931      	ldr	r1, [pc, #196]	; (800eddc <RCCEx_PLL2_Config+0x15c>)
 800ed16:	4313      	orrs	r3, r2
 800ed18:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ed1a:	4b30      	ldr	r3, [pc, #192]	; (800eddc <RCCEx_PLL2_Config+0x15c>)
 800ed1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed1e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	695b      	ldr	r3, [r3, #20]
 800ed26:	492d      	ldr	r1, [pc, #180]	; (800eddc <RCCEx_PLL2_Config+0x15c>)
 800ed28:	4313      	orrs	r3, r2
 800ed2a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ed2c:	4b2b      	ldr	r3, [pc, #172]	; (800eddc <RCCEx_PLL2_Config+0x15c>)
 800ed2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed30:	f023 0220 	bic.w	r2, r3, #32
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	699b      	ldr	r3, [r3, #24]
 800ed38:	4928      	ldr	r1, [pc, #160]	; (800eddc <RCCEx_PLL2_Config+0x15c>)
 800ed3a:	4313      	orrs	r3, r2
 800ed3c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ed3e:	4b27      	ldr	r3, [pc, #156]	; (800eddc <RCCEx_PLL2_Config+0x15c>)
 800ed40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed42:	4a26      	ldr	r2, [pc, #152]	; (800eddc <RCCEx_PLL2_Config+0x15c>)
 800ed44:	f023 0310 	bic.w	r3, r3, #16
 800ed48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ed4a:	4b24      	ldr	r3, [pc, #144]	; (800eddc <RCCEx_PLL2_Config+0x15c>)
 800ed4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ed4e:	4b24      	ldr	r3, [pc, #144]	; (800ede0 <RCCEx_PLL2_Config+0x160>)
 800ed50:	4013      	ands	r3, r2
 800ed52:	687a      	ldr	r2, [r7, #4]
 800ed54:	69d2      	ldr	r2, [r2, #28]
 800ed56:	00d2      	lsls	r2, r2, #3
 800ed58:	4920      	ldr	r1, [pc, #128]	; (800eddc <RCCEx_PLL2_Config+0x15c>)
 800ed5a:	4313      	orrs	r3, r2
 800ed5c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ed5e:	4b1f      	ldr	r3, [pc, #124]	; (800eddc <RCCEx_PLL2_Config+0x15c>)
 800ed60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed62:	4a1e      	ldr	r2, [pc, #120]	; (800eddc <RCCEx_PLL2_Config+0x15c>)
 800ed64:	f043 0310 	orr.w	r3, r3, #16
 800ed68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ed6a:	683b      	ldr	r3, [r7, #0]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d106      	bne.n	800ed7e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ed70:	4b1a      	ldr	r3, [pc, #104]	; (800eddc <RCCEx_PLL2_Config+0x15c>)
 800ed72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed74:	4a19      	ldr	r2, [pc, #100]	; (800eddc <RCCEx_PLL2_Config+0x15c>)
 800ed76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ed7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ed7c:	e00f      	b.n	800ed9e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ed7e:	683b      	ldr	r3, [r7, #0]
 800ed80:	2b01      	cmp	r3, #1
 800ed82:	d106      	bne.n	800ed92 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ed84:	4b15      	ldr	r3, [pc, #84]	; (800eddc <RCCEx_PLL2_Config+0x15c>)
 800ed86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed88:	4a14      	ldr	r2, [pc, #80]	; (800eddc <RCCEx_PLL2_Config+0x15c>)
 800ed8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ed8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ed90:	e005      	b.n	800ed9e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ed92:	4b12      	ldr	r3, [pc, #72]	; (800eddc <RCCEx_PLL2_Config+0x15c>)
 800ed94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed96:	4a11      	ldr	r2, [pc, #68]	; (800eddc <RCCEx_PLL2_Config+0x15c>)
 800ed98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ed9c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ed9e:	4b0f      	ldr	r3, [pc, #60]	; (800eddc <RCCEx_PLL2_Config+0x15c>)
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	4a0e      	ldr	r2, [pc, #56]	; (800eddc <RCCEx_PLL2_Config+0x15c>)
 800eda4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800eda8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800edaa:	f7f5 f967 	bl	800407c <HAL_GetTick>
 800edae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800edb0:	e008      	b.n	800edc4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800edb2:	f7f5 f963 	bl	800407c <HAL_GetTick>
 800edb6:	4602      	mov	r2, r0
 800edb8:	68bb      	ldr	r3, [r7, #8]
 800edba:	1ad3      	subs	r3, r2, r3
 800edbc:	2b02      	cmp	r3, #2
 800edbe:	d901      	bls.n	800edc4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800edc0:	2303      	movs	r3, #3
 800edc2:	e006      	b.n	800edd2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800edc4:	4b05      	ldr	r3, [pc, #20]	; (800eddc <RCCEx_PLL2_Config+0x15c>)
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d0f0      	beq.n	800edb2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800edd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800edd2:	4618      	mov	r0, r3
 800edd4:	3710      	adds	r7, #16
 800edd6:	46bd      	mov	sp, r7
 800edd8:	bd80      	pop	{r7, pc}
 800edda:	bf00      	nop
 800eddc:	58024400 	.word	0x58024400
 800ede0:	ffff0007 	.word	0xffff0007

0800ede4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b084      	sub	sp, #16
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
 800edec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800edee:	2300      	movs	r3, #0
 800edf0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800edf2:	4b53      	ldr	r3, [pc, #332]	; (800ef40 <RCCEx_PLL3_Config+0x15c>)
 800edf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edf6:	f003 0303 	and.w	r3, r3, #3
 800edfa:	2b03      	cmp	r3, #3
 800edfc:	d101      	bne.n	800ee02 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800edfe:	2301      	movs	r3, #1
 800ee00:	e099      	b.n	800ef36 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ee02:	4b4f      	ldr	r3, [pc, #316]	; (800ef40 <RCCEx_PLL3_Config+0x15c>)
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	4a4e      	ldr	r2, [pc, #312]	; (800ef40 <RCCEx_PLL3_Config+0x15c>)
 800ee08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ee0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ee0e:	f7f5 f935 	bl	800407c <HAL_GetTick>
 800ee12:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ee14:	e008      	b.n	800ee28 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ee16:	f7f5 f931 	bl	800407c <HAL_GetTick>
 800ee1a:	4602      	mov	r2, r0
 800ee1c:	68bb      	ldr	r3, [r7, #8]
 800ee1e:	1ad3      	subs	r3, r2, r3
 800ee20:	2b02      	cmp	r3, #2
 800ee22:	d901      	bls.n	800ee28 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ee24:	2303      	movs	r3, #3
 800ee26:	e086      	b.n	800ef36 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ee28:	4b45      	ldr	r3, [pc, #276]	; (800ef40 <RCCEx_PLL3_Config+0x15c>)
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d1f0      	bne.n	800ee16 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ee34:	4b42      	ldr	r3, [pc, #264]	; (800ef40 <RCCEx_PLL3_Config+0x15c>)
 800ee36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee38:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	051b      	lsls	r3, r3, #20
 800ee42:	493f      	ldr	r1, [pc, #252]	; (800ef40 <RCCEx_PLL3_Config+0x15c>)
 800ee44:	4313      	orrs	r3, r2
 800ee46:	628b      	str	r3, [r1, #40]	; 0x28
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	685b      	ldr	r3, [r3, #4]
 800ee4c:	3b01      	subs	r3, #1
 800ee4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	689b      	ldr	r3, [r3, #8]
 800ee56:	3b01      	subs	r3, #1
 800ee58:	025b      	lsls	r3, r3, #9
 800ee5a:	b29b      	uxth	r3, r3
 800ee5c:	431a      	orrs	r2, r3
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	68db      	ldr	r3, [r3, #12]
 800ee62:	3b01      	subs	r3, #1
 800ee64:	041b      	lsls	r3, r3, #16
 800ee66:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ee6a:	431a      	orrs	r2, r3
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	691b      	ldr	r3, [r3, #16]
 800ee70:	3b01      	subs	r3, #1
 800ee72:	061b      	lsls	r3, r3, #24
 800ee74:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ee78:	4931      	ldr	r1, [pc, #196]	; (800ef40 <RCCEx_PLL3_Config+0x15c>)
 800ee7a:	4313      	orrs	r3, r2
 800ee7c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ee7e:	4b30      	ldr	r3, [pc, #192]	; (800ef40 <RCCEx_PLL3_Config+0x15c>)
 800ee80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee82:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	695b      	ldr	r3, [r3, #20]
 800ee8a:	492d      	ldr	r1, [pc, #180]	; (800ef40 <RCCEx_PLL3_Config+0x15c>)
 800ee8c:	4313      	orrs	r3, r2
 800ee8e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ee90:	4b2b      	ldr	r3, [pc, #172]	; (800ef40 <RCCEx_PLL3_Config+0x15c>)
 800ee92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee94:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	699b      	ldr	r3, [r3, #24]
 800ee9c:	4928      	ldr	r1, [pc, #160]	; (800ef40 <RCCEx_PLL3_Config+0x15c>)
 800ee9e:	4313      	orrs	r3, r2
 800eea0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800eea2:	4b27      	ldr	r3, [pc, #156]	; (800ef40 <RCCEx_PLL3_Config+0x15c>)
 800eea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eea6:	4a26      	ldr	r2, [pc, #152]	; (800ef40 <RCCEx_PLL3_Config+0x15c>)
 800eea8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800eeac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800eeae:	4b24      	ldr	r3, [pc, #144]	; (800ef40 <RCCEx_PLL3_Config+0x15c>)
 800eeb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eeb2:	4b24      	ldr	r3, [pc, #144]	; (800ef44 <RCCEx_PLL3_Config+0x160>)
 800eeb4:	4013      	ands	r3, r2
 800eeb6:	687a      	ldr	r2, [r7, #4]
 800eeb8:	69d2      	ldr	r2, [r2, #28]
 800eeba:	00d2      	lsls	r2, r2, #3
 800eebc:	4920      	ldr	r1, [pc, #128]	; (800ef40 <RCCEx_PLL3_Config+0x15c>)
 800eebe:	4313      	orrs	r3, r2
 800eec0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800eec2:	4b1f      	ldr	r3, [pc, #124]	; (800ef40 <RCCEx_PLL3_Config+0x15c>)
 800eec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eec6:	4a1e      	ldr	r2, [pc, #120]	; (800ef40 <RCCEx_PLL3_Config+0x15c>)
 800eec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800eecc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800eece:	683b      	ldr	r3, [r7, #0]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d106      	bne.n	800eee2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800eed4:	4b1a      	ldr	r3, [pc, #104]	; (800ef40 <RCCEx_PLL3_Config+0x15c>)
 800eed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eed8:	4a19      	ldr	r2, [pc, #100]	; (800ef40 <RCCEx_PLL3_Config+0x15c>)
 800eeda:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800eede:	62d3      	str	r3, [r2, #44]	; 0x2c
 800eee0:	e00f      	b.n	800ef02 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800eee2:	683b      	ldr	r3, [r7, #0]
 800eee4:	2b01      	cmp	r3, #1
 800eee6:	d106      	bne.n	800eef6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800eee8:	4b15      	ldr	r3, [pc, #84]	; (800ef40 <RCCEx_PLL3_Config+0x15c>)
 800eeea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eeec:	4a14      	ldr	r2, [pc, #80]	; (800ef40 <RCCEx_PLL3_Config+0x15c>)
 800eeee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800eef2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800eef4:	e005      	b.n	800ef02 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800eef6:	4b12      	ldr	r3, [pc, #72]	; (800ef40 <RCCEx_PLL3_Config+0x15c>)
 800eef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eefa:	4a11      	ldr	r2, [pc, #68]	; (800ef40 <RCCEx_PLL3_Config+0x15c>)
 800eefc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ef00:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ef02:	4b0f      	ldr	r3, [pc, #60]	; (800ef40 <RCCEx_PLL3_Config+0x15c>)
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	4a0e      	ldr	r2, [pc, #56]	; (800ef40 <RCCEx_PLL3_Config+0x15c>)
 800ef08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ef0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ef0e:	f7f5 f8b5 	bl	800407c <HAL_GetTick>
 800ef12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ef14:	e008      	b.n	800ef28 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ef16:	f7f5 f8b1 	bl	800407c <HAL_GetTick>
 800ef1a:	4602      	mov	r2, r0
 800ef1c:	68bb      	ldr	r3, [r7, #8]
 800ef1e:	1ad3      	subs	r3, r2, r3
 800ef20:	2b02      	cmp	r3, #2
 800ef22:	d901      	bls.n	800ef28 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ef24:	2303      	movs	r3, #3
 800ef26:	e006      	b.n	800ef36 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ef28:	4b05      	ldr	r3, [pc, #20]	; (800ef40 <RCCEx_PLL3_Config+0x15c>)
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d0f0      	beq.n	800ef16 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ef34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef36:	4618      	mov	r0, r3
 800ef38:	3710      	adds	r7, #16
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	bd80      	pop	{r7, pc}
 800ef3e:	bf00      	nop
 800ef40:	58024400 	.word	0x58024400
 800ef44:	ffff0007 	.word	0xffff0007

0800ef48 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b084      	sub	sp, #16
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ef50:	2301      	movs	r3, #1
 800ef52:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d074      	beq.n	800f044 <HAL_RTC_Init+0xfc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800ef60:	b2db      	uxtb	r3, r3
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d106      	bne.n	800ef74 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	2200      	movs	r2, #0
 800ef6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800ef6e:	6878      	ldr	r0, [r7, #4]
 800ef70:	f7f4 fc82 	bl	8003878 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	2202      	movs	r2, #2
 800ef78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	68db      	ldr	r3, [r3, #12]
 800ef82:	f003 0310 	and.w	r3, r3, #16
 800ef86:	2b10      	cmp	r3, #16
 800ef88:	d053      	beq.n	800f032 <HAL_RTC_Init+0xea>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	22ca      	movs	r2, #202	; 0xca
 800ef90:	625a      	str	r2, [r3, #36]	; 0x24
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	2253      	movs	r2, #83	; 0x53
 800ef98:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800ef9a:	6878      	ldr	r0, [r7, #4]
 800ef9c:	f000 fa4e 	bl	800f43c <RTC_EnterInitMode>
 800efa0:	4603      	mov	r3, r0
 800efa2:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800efa4:	7bfb      	ldrb	r3, [r7, #15]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d124      	bne.n	800eff4 <HAL_RTC_Init+0xac>
      {
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	6999      	ldr	r1, [r3, #24]
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681a      	ldr	r2, [r3, #0]
 800efb4:	4b26      	ldr	r3, [pc, #152]	; (800f050 <HAL_RTC_Init+0x108>)
 800efb6:	400b      	ands	r3, r1
 800efb8:	6193      	str	r3, [r2, #24]
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	6999      	ldr	r1, [r3, #24]
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	685a      	ldr	r2, [r3, #4]
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	691b      	ldr	r3, [r3, #16]
 800efc8:	431a      	orrs	r2, r3
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	699b      	ldr	r3, [r3, #24]
 800efce:	431a      	orrs	r2, r3
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	430a      	orrs	r2, r1
 800efd6:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	689b      	ldr	r3, [r3, #8]
 800efdc:	0419      	lsls	r1, r3, #16
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	68da      	ldr	r2, [r3, #12]
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	430a      	orrs	r2, r1
 800efe8:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800efea:	6878      	ldr	r0, [r7, #4]
 800efec:	f000 fa5c 	bl	800f4a8 <RTC_ExitInitMode>
 800eff0:	4603      	mov	r3, r0
 800eff2:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800eff4:	7bfb      	ldrb	r3, [r7, #15]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d116      	bne.n	800f028 <HAL_RTC_Init+0xe0>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	699a      	ldr	r2, [r3, #24]
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800f008:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	6999      	ldr	r1, [r3, #24]
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	6a1a      	ldr	r2, [r3, #32]
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	69db      	ldr	r3, [r3, #28]
 800f018:	431a      	orrs	r2, r3
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	695b      	ldr	r3, [r3, #20]
 800f01e:	431a      	orrs	r2, r3
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	430a      	orrs	r2, r1
 800f026:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	22ff      	movs	r2, #255	; 0xff
 800f02e:	625a      	str	r2, [r3, #36]	; 0x24
 800f030:	e001      	b.n	800f036 <HAL_RTC_Init+0xee>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800f032:	2300      	movs	r3, #0
 800f034:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800f036:	7bfb      	ldrb	r3, [r7, #15]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d103      	bne.n	800f044 <HAL_RTC_Init+0xfc>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	2201      	movs	r2, #1
 800f040:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  /* return status */
  return status;
 800f044:	7bfb      	ldrb	r3, [r7, #15]
}
 800f046:	4618      	mov	r0, r3
 800f048:	3710      	adds	r7, #16
 800f04a:	46bd      	mov	sp, r7
 800f04c:	bd80      	pop	{r7, pc}
 800f04e:	bf00      	nop
 800f050:	fb8fffbf 	.word	0xfb8fffbf

0800f054 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800f054:	b590      	push	{r4, r7, lr}
 800f056:	b087      	sub	sp, #28
 800f058:	af00      	add	r7, sp, #0
 800f05a:	60f8      	str	r0, [r7, #12]
 800f05c:	60b9      	str	r1, [r7, #8]
 800f05e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f066:	2b01      	cmp	r3, #1
 800f068:	d101      	bne.n	800f06e <HAL_RTC_SetTime+0x1a>
 800f06a:	2302      	movs	r3, #2
 800f06c:	e089      	b.n	800f182 <HAL_RTC_SetTime+0x12e>
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	2201      	movs	r2, #1
 800f072:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	2202      	movs	r2, #2
 800f07a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	22ca      	movs	r2, #202	; 0xca
 800f084:	625a      	str	r2, [r3, #36]	; 0x24
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	2253      	movs	r2, #83	; 0x53
 800f08c:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800f08e:	68f8      	ldr	r0, [r7, #12]
 800f090:	f000 f9d4 	bl	800f43c <RTC_EnterInitMode>
 800f094:	4603      	mov	r3, r0
 800f096:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800f098:	7cfb      	ldrb	r3, [r7, #19]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d161      	bne.n	800f162 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d126      	bne.n	800f0f2 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	699b      	ldr	r3, [r3, #24]
 800f0aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d102      	bne.n	800f0b8 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800f0b2:	68bb      	ldr	r3, [r7, #8]
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800f0b8:	68bb      	ldr	r3, [r7, #8]
 800f0ba:	781b      	ldrb	r3, [r3, #0]
 800f0bc:	4618      	mov	r0, r3
 800f0be:	f000 fa31 	bl	800f524 <RTC_ByteToBcd2>
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800f0c6:	68bb      	ldr	r3, [r7, #8]
 800f0c8:	785b      	ldrb	r3, [r3, #1]
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	f000 fa2a 	bl	800f524 <RTC_ByteToBcd2>
 800f0d0:	4603      	mov	r3, r0
 800f0d2:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800f0d4:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800f0d6:	68bb      	ldr	r3, [r7, #8]
 800f0d8:	789b      	ldrb	r3, [r3, #2]
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f000 fa22 	bl	800f524 <RTC_ByteToBcd2>
 800f0e0:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800f0e2:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800f0e6:	68bb      	ldr	r3, [r7, #8]
 800f0e8:	78db      	ldrb	r3, [r3, #3]
 800f0ea:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800f0ec:	4313      	orrs	r3, r2
 800f0ee:	617b      	str	r3, [r7, #20]
 800f0f0:	e018      	b.n	800f124 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	699b      	ldr	r3, [r3, #24]
 800f0f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d102      	bne.n	800f106 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800f100:	68bb      	ldr	r3, [r7, #8]
 800f102:	2200      	movs	r2, #0
 800f104:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800f106:	68bb      	ldr	r3, [r7, #8]
 800f108:	781b      	ldrb	r3, [r3, #0]
 800f10a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800f10c:	68bb      	ldr	r3, [r7, #8]
 800f10e:	785b      	ldrb	r3, [r3, #1]
 800f110:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800f112:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800f114:	68ba      	ldr	r2, [r7, #8]
 800f116:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800f118:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800f11a:	68bb      	ldr	r3, [r7, #8]
 800f11c:	78db      	ldrb	r3, [r3, #3]
 800f11e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800f120:	4313      	orrs	r3, r2
 800f122:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	681a      	ldr	r2, [r3, #0]
 800f128:	6979      	ldr	r1, [r7, #20]
 800f12a:	4b18      	ldr	r3, [pc, #96]	; (800f18c <HAL_RTC_SetTime+0x138>)
 800f12c:	400b      	ands	r3, r1
 800f12e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	699a      	ldr	r2, [r3, #24]
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f13e:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	6999      	ldr	r1, [r3, #24]
 800f146:	68bb      	ldr	r3, [r7, #8]
 800f148:	68da      	ldr	r2, [r3, #12]
 800f14a:	68bb      	ldr	r3, [r7, #8]
 800f14c:	691b      	ldr	r3, [r3, #16]
 800f14e:	431a      	orrs	r2, r3
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	430a      	orrs	r2, r1
 800f156:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800f158:	68f8      	ldr	r0, [r7, #12]
 800f15a:	f000 f9a5 	bl	800f4a8 <RTC_ExitInitMode>
 800f15e:	4603      	mov	r3, r0
 800f160:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	22ff      	movs	r2, #255	; 0xff
 800f168:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800f16a:	7cfb      	ldrb	r3, [r7, #19]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d103      	bne.n	800f178 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	2201      	movs	r2, #1
 800f174:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	2200      	movs	r2, #0
 800f17c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800f180:	7cfb      	ldrb	r3, [r7, #19]
}
 800f182:	4618      	mov	r0, r3
 800f184:	371c      	adds	r7, #28
 800f186:	46bd      	mov	sp, r7
 800f188:	bd90      	pop	{r4, r7, pc}
 800f18a:	bf00      	nop
 800f18c:	007f7f7f 	.word	0x007f7f7f

0800f190 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b086      	sub	sp, #24
 800f194:	af00      	add	r7, sp, #0
 800f196:	60f8      	str	r0, [r7, #12]
 800f198:	60b9      	str	r1, [r7, #8]
 800f19a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	689a      	ldr	r2, [r3, #8]
 800f1a2:	68bb      	ldr	r3, [r7, #8]
 800f1a4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	691b      	ldr	r3, [r3, #16]
 800f1ac:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800f1b0:	68bb      	ldr	r3, [r7, #8]
 800f1b2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	681a      	ldr	r2, [r3, #0]
 800f1ba:	4b22      	ldr	r3, [pc, #136]	; (800f244 <HAL_RTC_GetTime+0xb4>)
 800f1bc:	4013      	ands	r3, r2
 800f1be:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800f1c0:	697b      	ldr	r3, [r7, #20]
 800f1c2:	0c1b      	lsrs	r3, r3, #16
 800f1c4:	b2db      	uxtb	r3, r3
 800f1c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f1ca:	b2da      	uxtb	r2, r3
 800f1cc:	68bb      	ldr	r3, [r7, #8]
 800f1ce:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800f1d0:	697b      	ldr	r3, [r7, #20]
 800f1d2:	0a1b      	lsrs	r3, r3, #8
 800f1d4:	b2db      	uxtb	r3, r3
 800f1d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f1da:	b2da      	uxtb	r2, r3
 800f1dc:	68bb      	ldr	r3, [r7, #8]
 800f1de:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800f1e0:	697b      	ldr	r3, [r7, #20]
 800f1e2:	b2db      	uxtb	r3, r3
 800f1e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f1e8:	b2da      	uxtb	r2, r3
 800f1ea:	68bb      	ldr	r3, [r7, #8]
 800f1ec:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800f1ee:	697b      	ldr	r3, [r7, #20]
 800f1f0:	0d9b      	lsrs	r3, r3, #22
 800f1f2:	b2db      	uxtb	r3, r3
 800f1f4:	f003 0301 	and.w	r3, r3, #1
 800f1f8:	b2da      	uxtb	r2, r3
 800f1fa:	68bb      	ldr	r3, [r7, #8]
 800f1fc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d11a      	bne.n	800f23a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800f204:	68bb      	ldr	r3, [r7, #8]
 800f206:	781b      	ldrb	r3, [r3, #0]
 800f208:	4618      	mov	r0, r3
 800f20a:	f000 f9ab 	bl	800f564 <RTC_Bcd2ToByte>
 800f20e:	4603      	mov	r3, r0
 800f210:	461a      	mov	r2, r3
 800f212:	68bb      	ldr	r3, [r7, #8]
 800f214:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800f216:	68bb      	ldr	r3, [r7, #8]
 800f218:	785b      	ldrb	r3, [r3, #1]
 800f21a:	4618      	mov	r0, r3
 800f21c:	f000 f9a2 	bl	800f564 <RTC_Bcd2ToByte>
 800f220:	4603      	mov	r3, r0
 800f222:	461a      	mov	r2, r3
 800f224:	68bb      	ldr	r3, [r7, #8]
 800f226:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800f228:	68bb      	ldr	r3, [r7, #8]
 800f22a:	789b      	ldrb	r3, [r3, #2]
 800f22c:	4618      	mov	r0, r3
 800f22e:	f000 f999 	bl	800f564 <RTC_Bcd2ToByte>
 800f232:	4603      	mov	r3, r0
 800f234:	461a      	mov	r2, r3
 800f236:	68bb      	ldr	r3, [r7, #8]
 800f238:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800f23a:	2300      	movs	r3, #0
}
 800f23c:	4618      	mov	r0, r3
 800f23e:	3718      	adds	r7, #24
 800f240:	46bd      	mov	sp, r7
 800f242:	bd80      	pop	{r7, pc}
 800f244:	007f7f7f 	.word	0x007f7f7f

0800f248 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800f248:	b590      	push	{r4, r7, lr}
 800f24a:	b087      	sub	sp, #28
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	60f8      	str	r0, [r7, #12]
 800f250:	60b9      	str	r1, [r7, #8]
 800f252:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f25a:	2b01      	cmp	r3, #1
 800f25c:	d101      	bne.n	800f262 <HAL_RTC_SetDate+0x1a>
 800f25e:	2302      	movs	r3, #2
 800f260:	e073      	b.n	800f34a <HAL_RTC_SetDate+0x102>
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	2201      	movs	r2, #1
 800f266:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	2202      	movs	r2, #2
 800f26e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d10e      	bne.n	800f296 <HAL_RTC_SetDate+0x4e>
 800f278:	68bb      	ldr	r3, [r7, #8]
 800f27a:	785b      	ldrb	r3, [r3, #1]
 800f27c:	f003 0310 	and.w	r3, r3, #16
 800f280:	2b00      	cmp	r3, #0
 800f282:	d008      	beq.n	800f296 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800f284:	68bb      	ldr	r3, [r7, #8]
 800f286:	785b      	ldrb	r3, [r3, #1]
 800f288:	f023 0310 	bic.w	r3, r3, #16
 800f28c:	b2db      	uxtb	r3, r3
 800f28e:	330a      	adds	r3, #10
 800f290:	b2da      	uxtb	r2, r3
 800f292:	68bb      	ldr	r3, [r7, #8]
 800f294:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d11c      	bne.n	800f2d6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800f29c:	68bb      	ldr	r3, [r7, #8]
 800f29e:	78db      	ldrb	r3, [r3, #3]
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	f000 f93f 	bl	800f524 <RTC_ByteToBcd2>
 800f2a6:	4603      	mov	r3, r0
 800f2a8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800f2aa:	68bb      	ldr	r3, [r7, #8]
 800f2ac:	785b      	ldrb	r3, [r3, #1]
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	f000 f938 	bl	800f524 <RTC_ByteToBcd2>
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800f2b8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800f2ba:	68bb      	ldr	r3, [r7, #8]
 800f2bc:	789b      	ldrb	r3, [r3, #2]
 800f2be:	4618      	mov	r0, r3
 800f2c0:	f000 f930 	bl	800f524 <RTC_ByteToBcd2>
 800f2c4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800f2c6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800f2ca:	68bb      	ldr	r3, [r7, #8]
 800f2cc:	781b      	ldrb	r3, [r3, #0]
 800f2ce:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800f2d0:	4313      	orrs	r3, r2
 800f2d2:	617b      	str	r3, [r7, #20]
 800f2d4:	e00e      	b.n	800f2f4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800f2d6:	68bb      	ldr	r3, [r7, #8]
 800f2d8:	78db      	ldrb	r3, [r3, #3]
 800f2da:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800f2dc:	68bb      	ldr	r3, [r7, #8]
 800f2de:	785b      	ldrb	r3, [r3, #1]
 800f2e0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800f2e2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800f2e4:	68ba      	ldr	r2, [r7, #8]
 800f2e6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800f2e8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800f2ea:	68bb      	ldr	r3, [r7, #8]
 800f2ec:	781b      	ldrb	r3, [r3, #0]
 800f2ee:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800f2f0:	4313      	orrs	r3, r2
 800f2f2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	22ca      	movs	r2, #202	; 0xca
 800f2fa:	625a      	str	r2, [r3, #36]	; 0x24
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	2253      	movs	r2, #83	; 0x53
 800f302:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800f304:	68f8      	ldr	r0, [r7, #12]
 800f306:	f000 f899 	bl	800f43c <RTC_EnterInitMode>
 800f30a:	4603      	mov	r3, r0
 800f30c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800f30e:	7cfb      	ldrb	r3, [r7, #19]
 800f310:	2b00      	cmp	r3, #0
 800f312:	d10a      	bne.n	800f32a <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	681a      	ldr	r2, [r3, #0]
 800f318:	6979      	ldr	r1, [r7, #20]
 800f31a:	4b0e      	ldr	r3, [pc, #56]	; (800f354 <HAL_RTC_SetDate+0x10c>)
 800f31c:	400b      	ands	r3, r1
 800f31e:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800f320:	68f8      	ldr	r0, [r7, #12]
 800f322:	f000 f8c1 	bl	800f4a8 <RTC_ExitInitMode>
 800f326:	4603      	mov	r3, r0
 800f328:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	22ff      	movs	r2, #255	; 0xff
 800f330:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800f332:	7cfb      	ldrb	r3, [r7, #19]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d103      	bne.n	800f340 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	2201      	movs	r2, #1
 800f33c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	2200      	movs	r2, #0
 800f344:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800f348:	7cfb      	ldrb	r3, [r7, #19]


}
 800f34a:	4618      	mov	r0, r3
 800f34c:	371c      	adds	r7, #28
 800f34e:	46bd      	mov	sp, r7
 800f350:	bd90      	pop	{r4, r7, pc}
 800f352:	bf00      	nop
 800f354:	00ffff3f 	.word	0x00ffff3f

0800f358 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b086      	sub	sp, #24
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	60f8      	str	r0, [r7, #12]
 800f360:	60b9      	str	r1, [r7, #8]
 800f362:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	685a      	ldr	r2, [r3, #4]
 800f36a:	4b21      	ldr	r3, [pc, #132]	; (800f3f0 <HAL_RTC_GetDate+0x98>)
 800f36c:	4013      	ands	r3, r2
 800f36e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800f370:	697b      	ldr	r3, [r7, #20]
 800f372:	0c1b      	lsrs	r3, r3, #16
 800f374:	b2da      	uxtb	r2, r3
 800f376:	68bb      	ldr	r3, [r7, #8]
 800f378:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800f37a:	697b      	ldr	r3, [r7, #20]
 800f37c:	0a1b      	lsrs	r3, r3, #8
 800f37e:	b2db      	uxtb	r3, r3
 800f380:	f003 031f 	and.w	r3, r3, #31
 800f384:	b2da      	uxtb	r2, r3
 800f386:	68bb      	ldr	r3, [r7, #8]
 800f388:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800f38a:	697b      	ldr	r3, [r7, #20]
 800f38c:	b2db      	uxtb	r3, r3
 800f38e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f392:	b2da      	uxtb	r2, r3
 800f394:	68bb      	ldr	r3, [r7, #8]
 800f396:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800f398:	697b      	ldr	r3, [r7, #20]
 800f39a:	0b5b      	lsrs	r3, r3, #13
 800f39c:	b2db      	uxtb	r3, r3
 800f39e:	f003 0307 	and.w	r3, r3, #7
 800f3a2:	b2da      	uxtb	r2, r3
 800f3a4:	68bb      	ldr	r3, [r7, #8]
 800f3a6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d11a      	bne.n	800f3e4 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800f3ae:	68bb      	ldr	r3, [r7, #8]
 800f3b0:	78db      	ldrb	r3, [r3, #3]
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	f000 f8d6 	bl	800f564 <RTC_Bcd2ToByte>
 800f3b8:	4603      	mov	r3, r0
 800f3ba:	461a      	mov	r2, r3
 800f3bc:	68bb      	ldr	r3, [r7, #8]
 800f3be:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800f3c0:	68bb      	ldr	r3, [r7, #8]
 800f3c2:	785b      	ldrb	r3, [r3, #1]
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	f000 f8cd 	bl	800f564 <RTC_Bcd2ToByte>
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	461a      	mov	r2, r3
 800f3ce:	68bb      	ldr	r3, [r7, #8]
 800f3d0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800f3d2:	68bb      	ldr	r3, [r7, #8]
 800f3d4:	789b      	ldrb	r3, [r3, #2]
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f000 f8c4 	bl	800f564 <RTC_Bcd2ToByte>
 800f3dc:	4603      	mov	r3, r0
 800f3de:	461a      	mov	r2, r3
 800f3e0:	68bb      	ldr	r3, [r7, #8]
 800f3e2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800f3e4:	2300      	movs	r3, #0
}
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	3718      	adds	r7, #24
 800f3ea:	46bd      	mov	sp, r7
 800f3ec:	bd80      	pop	{r7, pc}
 800f3ee:	bf00      	nop
 800f3f0:	00ffff3f 	.word	0x00ffff3f

0800f3f4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	b084      	sub	sp, #16
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	4a0d      	ldr	r2, [pc, #52]	; (800f438 <HAL_RTC_WaitForSynchro+0x44>)
 800f402:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800f404:	f7f4 fe3a 	bl	800407c <HAL_GetTick>
 800f408:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800f40a:	e009      	b.n	800f420 <HAL_RTC_WaitForSynchro+0x2c>
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f40c:	f7f4 fe36 	bl	800407c <HAL_GetTick>
 800f410:	4602      	mov	r2, r0
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	1ad3      	subs	r3, r2, r3
 800f416:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f41a:	d901      	bls.n	800f420 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800f41c:	2303      	movs	r3, #3
 800f41e:	e007      	b.n	800f430 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	68db      	ldr	r3, [r3, #12]
 800f426:	f003 0320 	and.w	r3, r3, #32
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d0ee      	beq.n	800f40c <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800f42e:	2300      	movs	r3, #0
}
 800f430:	4618      	mov	r0, r3
 800f432:	3710      	adds	r7, #16
 800f434:	46bd      	mov	sp, r7
 800f436:	bd80      	pop	{r7, pc}
 800f438:	0001005f 	.word	0x0001005f

0800f43c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b084      	sub	sp, #16
 800f440:	af00      	add	r7, sp, #0
 800f442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f444:	2300      	movs	r3, #0
 800f446:	73fb      	strb	r3, [r7, #15]
  /* Check if the Initialization mode is set */
#if defined(TAMP)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	68db      	ldr	r3, [r3, #12]
 800f44e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f452:	2b00      	cmp	r3, #0
 800f454:	d123      	bne.n	800f49e <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	68da      	ldr	r2, [r3, #12]
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800f464:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800f466:	f7f4 fe09 	bl	800407c <HAL_GetTick>
 800f46a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800f46c:	e00d      	b.n	800f48a <RTC_EnterInitMode+0x4e>

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800f46e:	f7f4 fe05 	bl	800407c <HAL_GetTick>
 800f472:	4602      	mov	r2, r0
 800f474:	68bb      	ldr	r3, [r7, #8]
 800f476:	1ad3      	subs	r3, r2, r3
 800f478:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f47c:	d905      	bls.n	800f48a <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800f47e:	2303      	movs	r3, #3
 800f480:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	2203      	movs	r2, #3
 800f486:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	68db      	ldr	r3, [r3, #12]
 800f490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f494:	2b00      	cmp	r3, #0
 800f496:	d102      	bne.n	800f49e <RTC_EnterInitMode+0x62>
 800f498:	7bfb      	ldrb	r3, [r7, #15]
 800f49a:	2b03      	cmp	r3, #3
 800f49c:	d1e7      	bne.n	800f46e <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 800f49e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	3710      	adds	r7, #16
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	bd80      	pop	{r7, pc}

0800f4a8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	b084      	sub	sp, #16
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800f4b4:	4b1a      	ldr	r3, [pc, #104]	; (800f520 <RTC_ExitInitMode+0x78>)
 800f4b6:	68db      	ldr	r3, [r3, #12]
 800f4b8:	4a19      	ldr	r2, [pc, #100]	; (800f520 <RTC_ExitInitMode+0x78>)
 800f4ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f4be:	60d3      	str	r3, [r2, #12]
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800f4c0:	4b17      	ldr	r3, [pc, #92]	; (800f520 <RTC_ExitInitMode+0x78>)
 800f4c2:	699b      	ldr	r3, [r3, #24]
 800f4c4:	f003 0320 	and.w	r3, r3, #32
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d10c      	bne.n	800f4e6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800f4cc:	6878      	ldr	r0, [r7, #4]
 800f4ce:	f7ff ff91 	bl	800f3f4 <HAL_RTC_WaitForSynchro>
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d01e      	beq.n	800f516 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	2203      	movs	r2, #3
 800f4dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800f4e0:	2303      	movs	r3, #3
 800f4e2:	73fb      	strb	r3, [r7, #15]
 800f4e4:	e017      	b.n	800f516 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800f4e6:	4b0e      	ldr	r3, [pc, #56]	; (800f520 <RTC_ExitInitMode+0x78>)
 800f4e8:	699b      	ldr	r3, [r3, #24]
 800f4ea:	4a0d      	ldr	r2, [pc, #52]	; (800f520 <RTC_ExitInitMode+0x78>)
 800f4ec:	f023 0320 	bic.w	r3, r3, #32
 800f4f0:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800f4f2:	6878      	ldr	r0, [r7, #4]
 800f4f4:	f7ff ff7e 	bl	800f3f4 <HAL_RTC_WaitForSynchro>
 800f4f8:	4603      	mov	r3, r0
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d005      	beq.n	800f50a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	2203      	movs	r2, #3
 800f502:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800f506:	2303      	movs	r3, #3
 800f508:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800f50a:	4b05      	ldr	r3, [pc, #20]	; (800f520 <RTC_ExitInitMode+0x78>)
 800f50c:	699b      	ldr	r3, [r3, #24]
 800f50e:	4a04      	ldr	r2, [pc, #16]	; (800f520 <RTC_ExitInitMode+0x78>)
 800f510:	f043 0320 	orr.w	r3, r3, #32
 800f514:	6193      	str	r3, [r2, #24]
  }

  return status;
 800f516:	7bfb      	ldrb	r3, [r7, #15]
}
 800f518:	4618      	mov	r0, r3
 800f51a:	3710      	adds	r7, #16
 800f51c:	46bd      	mov	sp, r7
 800f51e:	bd80      	pop	{r7, pc}
 800f520:	58004000 	.word	0x58004000

0800f524 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800f524:	b480      	push	{r7}
 800f526:	b085      	sub	sp, #20
 800f528:	af00      	add	r7, sp, #0
 800f52a:	4603      	mov	r3, r0
 800f52c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800f52e:	2300      	movs	r3, #0
 800f530:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800f532:	79fb      	ldrb	r3, [r7, #7]
 800f534:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800f536:	e005      	b.n	800f544 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	3301      	adds	r3, #1
 800f53c:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800f53e:	7afb      	ldrb	r3, [r7, #11]
 800f540:	3b0a      	subs	r3, #10
 800f542:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800f544:	7afb      	ldrb	r3, [r7, #11]
 800f546:	2b09      	cmp	r3, #9
 800f548:	d8f6      	bhi.n	800f538 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	b2db      	uxtb	r3, r3
 800f54e:	011b      	lsls	r3, r3, #4
 800f550:	b2da      	uxtb	r2, r3
 800f552:	7afb      	ldrb	r3, [r7, #11]
 800f554:	4313      	orrs	r3, r2
 800f556:	b2db      	uxtb	r3, r3
}
 800f558:	4618      	mov	r0, r3
 800f55a:	3714      	adds	r7, #20
 800f55c:	46bd      	mov	sp, r7
 800f55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f562:	4770      	bx	lr

0800f564 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800f564:	b480      	push	{r7}
 800f566:	b085      	sub	sp, #20
 800f568:	af00      	add	r7, sp, #0
 800f56a:	4603      	mov	r3, r0
 800f56c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800f56e:	79fb      	ldrb	r3, [r7, #7]
 800f570:	091b      	lsrs	r3, r3, #4
 800f572:	b2db      	uxtb	r3, r3
 800f574:	461a      	mov	r2, r3
 800f576:	0092      	lsls	r2, r2, #2
 800f578:	4413      	add	r3, r2
 800f57a:	005b      	lsls	r3, r3, #1
 800f57c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800f57e:	79fb      	ldrb	r3, [r7, #7]
 800f580:	f003 030f 	and.w	r3, r3, #15
 800f584:	b2da      	uxtb	r2, r3
 800f586:	7bfb      	ldrb	r3, [r7, #15]
 800f588:	4413      	add	r3, r2
 800f58a:	b2db      	uxtb	r3, r3
}
 800f58c:	4618      	mov	r0, r3
 800f58e:	3714      	adds	r7, #20
 800f590:	46bd      	mov	sp, r7
 800f592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f596:	4770      	bx	lr

0800f598 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800f598:	b580      	push	{r7, lr}
 800f59a:	b086      	sub	sp, #24
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	60f8      	str	r0, [r7, #12]
 800f5a0:	60b9      	str	r1, [r7, #8]
 800f5a2:	607a      	str	r2, [r7, #4]
 800f5a4:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800f5a6:	68bb      	ldr	r3, [r7, #8]
 800f5a8:	2b02      	cmp	r3, #2
 800f5aa:	d904      	bls.n	800f5b6 <HAL_SAI_InitProtocol+0x1e>
 800f5ac:	68bb      	ldr	r3, [r7, #8]
 800f5ae:	3b03      	subs	r3, #3
 800f5b0:	2b01      	cmp	r3, #1
 800f5b2:	d812      	bhi.n	800f5da <HAL_SAI_InitProtocol+0x42>
 800f5b4:	e008      	b.n	800f5c8 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800f5b6:	683b      	ldr	r3, [r7, #0]
 800f5b8:	687a      	ldr	r2, [r7, #4]
 800f5ba:	68b9      	ldr	r1, [r7, #8]
 800f5bc:	68f8      	ldr	r0, [r7, #12]
 800f5be:	f000 fd2d 	bl	801001c <SAI_InitI2S>
 800f5c2:	4603      	mov	r3, r0
 800f5c4:	75fb      	strb	r3, [r7, #23]
      break;
 800f5c6:	e00b      	b.n	800f5e0 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800f5c8:	683b      	ldr	r3, [r7, #0]
 800f5ca:	687a      	ldr	r2, [r7, #4]
 800f5cc:	68b9      	ldr	r1, [r7, #8]
 800f5ce:	68f8      	ldr	r0, [r7, #12]
 800f5d0:	f000 fdd6 	bl	8010180 <SAI_InitPCM>
 800f5d4:	4603      	mov	r3, r0
 800f5d6:	75fb      	strb	r3, [r7, #23]
      break;
 800f5d8:	e002      	b.n	800f5e0 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800f5da:	2301      	movs	r3, #1
 800f5dc:	75fb      	strb	r3, [r7, #23]
      break;
 800f5de:	bf00      	nop
  }

  if (status == HAL_OK)
 800f5e0:	7dfb      	ldrb	r3, [r7, #23]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d104      	bne.n	800f5f0 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800f5e6:	68f8      	ldr	r0, [r7, #12]
 800f5e8:	f000 f808 	bl	800f5fc <HAL_SAI_Init>
 800f5ec:	4603      	mov	r3, r0
 800f5ee:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800f5f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	3718      	adds	r7, #24
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	bd80      	pop	{r7, pc}
	...

0800f5fc <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800f5fc:	b580      	push	{r7, lr}
 800f5fe:	b08a      	sub	sp, #40	; 0x28
 800f600:	af00      	add	r7, sp, #0
 800f602:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d101      	bne.n	800f60e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800f60a:	2301      	movs	r3, #1
 800f60c:	e1f2      	b.n	800f9f4 <HAL_SAI_Init+0x3f8>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f614:	2b01      	cmp	r3, #1
 800f616:	d10e      	bne.n	800f636 <HAL_SAI_Init+0x3a>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
    {
      return HAL_ERROR;
    }
#else
    if ((hsai->Instance != SAI1_Block_A) ||
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	4a94      	ldr	r2, [pc, #592]	; (800f870 <HAL_SAI_Init+0x274>)
 800f61e:	4293      	cmp	r3, r2
 800f620:	d107      	bne.n	800f632 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800f626:	2b01      	cmp	r3, #1
 800f628:	d103      	bne.n	800f632 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d001      	beq.n	800f636 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800f632:	2301      	movs	r3, #1
 800f634:	e1de      	b.n	800f9f4 <HAL_SAI_Init+0x3f8>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	4a8d      	ldr	r2, [pc, #564]	; (800f870 <HAL_SAI_Init+0x274>)
 800f63c:	4293      	cmp	r3, r2
 800f63e:	d004      	beq.n	800f64a <HAL_SAI_Init+0x4e>
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	4a8b      	ldr	r2, [pc, #556]	; (800f874 <HAL_SAI_Init+0x278>)
 800f646:	4293      	cmp	r3, r2
 800f648:	d102      	bne.n	800f650 <HAL_SAI_Init+0x54>
  {
    SaiBaseAddress = SAI1;
 800f64a:	4b8b      	ldr	r3, [pc, #556]	; (800f878 <HAL_SAI_Init+0x27c>)
 800f64c:	61bb      	str	r3, [r7, #24]
 800f64e:	e00e      	b.n	800f66e <HAL_SAI_Init+0x72>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	4a89      	ldr	r2, [pc, #548]	; (800f87c <HAL_SAI_Init+0x280>)
 800f656:	4293      	cmp	r3, r2
 800f658:	d004      	beq.n	800f664 <HAL_SAI_Init+0x68>
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	4a88      	ldr	r2, [pc, #544]	; (800f880 <HAL_SAI_Init+0x284>)
 800f660:	4293      	cmp	r3, r2
 800f662:	d102      	bne.n	800f66a <HAL_SAI_Init+0x6e>
  {
    SaiBaseAddress = SAI2;
 800f664:	4b87      	ldr	r3, [pc, #540]	; (800f884 <HAL_SAI_Init+0x288>)
 800f666:	61bb      	str	r3, [r7, #24]
 800f668:	e001      	b.n	800f66e <HAL_SAI_Init+0x72>
    SaiBaseAddress = SAI4;
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800f66a:	2301      	movs	r3, #1
 800f66c:	e1c2      	b.n	800f9f4 <HAL_SAI_Init+0x3f8>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800f674:	b2db      	uxtb	r3, r3
 800f676:	2b00      	cmp	r3, #0
 800f678:	d106      	bne.n	800f688 <HAL_SAI_Init+0x8c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	2200      	movs	r2, #0
 800f67e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800f682:	6878      	ldr	r0, [r7, #4]
 800f684:	f7f4 f9bc 	bl	8003a00 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800f688:	6878      	ldr	r0, [r7, #4]
 800f68a:	f000 fe33 	bl	80102f4 <SAI_Disable>
 800f68e:	4603      	mov	r3, r0
 800f690:	2b00      	cmp	r3, #0
 800f692:	d001      	beq.n	800f698 <HAL_SAI_Init+0x9c>
  {
    return HAL_ERROR;
 800f694:	2301      	movs	r3, #1
 800f696:	e1ad      	b.n	800f9f4 <HAL_SAI_Init+0x3f8>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	2202      	movs	r2, #2
 800f69c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	68db      	ldr	r3, [r3, #12]
 800f6a4:	2b02      	cmp	r3, #2
 800f6a6:	d00c      	beq.n	800f6c2 <HAL_SAI_Init+0xc6>
 800f6a8:	2b02      	cmp	r3, #2
 800f6aa:	d80d      	bhi.n	800f6c8 <HAL_SAI_Init+0xcc>
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d002      	beq.n	800f6b6 <HAL_SAI_Init+0xba>
 800f6b0:	2b01      	cmp	r3, #1
 800f6b2:	d003      	beq.n	800f6bc <HAL_SAI_Init+0xc0>
 800f6b4:	e008      	b.n	800f6c8 <HAL_SAI_Init+0xcc>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f6ba:	e008      	b.n	800f6ce <HAL_SAI_Init+0xd2>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800f6bc:	2310      	movs	r3, #16
 800f6be:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f6c0:	e005      	b.n	800f6ce <HAL_SAI_Init+0xd2>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800f6c2:	2320      	movs	r3, #32
 800f6c4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f6c6:	e002      	b.n	800f6ce <HAL_SAI_Init+0xd2>
    default:
      tmpregisterGCR = 0;
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f6cc:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	689b      	ldr	r3, [r3, #8]
 800f6d2:	2b03      	cmp	r3, #3
 800f6d4:	d81d      	bhi.n	800f712 <HAL_SAI_Init+0x116>
 800f6d6:	a201      	add	r2, pc, #4	; (adr r2, 800f6dc <HAL_SAI_Init+0xe0>)
 800f6d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6dc:	0800f6ed 	.word	0x0800f6ed
 800f6e0:	0800f6f3 	.word	0x0800f6f3
 800f6e4:	0800f6fb 	.word	0x0800f6fb
 800f6e8:	0800f703 	.word	0x0800f703
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	61fb      	str	r3, [r7, #28]
      break;
 800f6f0:	e012      	b.n	800f718 <HAL_SAI_Init+0x11c>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800f6f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f6f6:	61fb      	str	r3, [r7, #28]
      break;
 800f6f8:	e00e      	b.n	800f718 <HAL_SAI_Init+0x11c>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800f6fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f6fe:	61fb      	str	r3, [r7, #28]
      break;
 800f700:	e00a      	b.n	800f718 <HAL_SAI_Init+0x11c>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800f702:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f706:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800f708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f70a:	f043 0301 	orr.w	r3, r3, #1
 800f70e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f710:	e002      	b.n	800f718 <HAL_SAI_Init+0x11c>
      syncen_bits = SAI_xCR1_SYNCEN_1;
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
      break;
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800f712:	2300      	movs	r3, #0
 800f714:	61fb      	str	r3, [r7, #28]
      break;
 800f716:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800f718:	69bb      	ldr	r3, [r7, #24]
 800f71a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f71c:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	6a1b      	ldr	r3, [r3, #32]
 800f722:	2b00      	cmp	r3, #0
 800f724:	f000 808a 	beq.w	800f83c <HAL_SAI_Init+0x240>
  {
    uint32_t freq = 0;
 800f728:	2300      	movs	r3, #0
 800f72a:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	4a4f      	ldr	r2, [pc, #316]	; (800f870 <HAL_SAI_Init+0x274>)
 800f732:	4293      	cmp	r3, r2
 800f734:	d004      	beq.n	800f740 <HAL_SAI_Init+0x144>
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	4a4e      	ldr	r2, [pc, #312]	; (800f874 <HAL_SAI_Init+0x278>)
 800f73c:	4293      	cmp	r3, r2
 800f73e:	d106      	bne.n	800f74e <HAL_SAI_Init+0x152>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800f740:	f44f 7080 	mov.w	r0, #256	; 0x100
 800f744:	f04f 0100 	mov.w	r1, #0
 800f748:	f7fe f9b2 	bl	800dab0 <HAL_RCCEx_GetPeriphCLKFreq>
 800f74c:	6178      	str	r0, [r7, #20]
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
    }
#else
    if (hsai->Instance == SAI2_Block_A)
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	4a4a      	ldr	r2, [pc, #296]	; (800f87c <HAL_SAI_Init+0x280>)
 800f754:	4293      	cmp	r3, r2
 800f756:	d106      	bne.n	800f766 <HAL_SAI_Init+0x16a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2A);
 800f758:	f44f 7000 	mov.w	r0, #512	; 0x200
 800f75c:	f04f 0100 	mov.w	r1, #0
 800f760:	f7fe f9a6 	bl	800dab0 <HAL_RCCEx_GetPeriphCLKFreq>
 800f764:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI2_Block_B)
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	4a45      	ldr	r2, [pc, #276]	; (800f880 <HAL_SAI_Init+0x284>)
 800f76c:	4293      	cmp	r3, r2
 800f76e:	d106      	bne.n	800f77e <HAL_SAI_Init+0x182>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2B);
 800f770:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800f774:	f04f 0100 	mov.w	r1, #0
 800f778:	f7fe f99a 	bl	800dab0 <HAL_RCCEx_GetPeriphCLKFreq>
 800f77c:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	699b      	ldr	r3, [r3, #24]
 800f782:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800f786:	d120      	bne.n	800f7ca <HAL_SAI_Init+0x1ce>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f78c:	2b04      	cmp	r3, #4
 800f78e:	d102      	bne.n	800f796 <HAL_SAI_Init+0x19a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800f790:	2340      	movs	r3, #64	; 0x40
 800f792:	60fb      	str	r3, [r7, #12]
 800f794:	e00a      	b.n	800f7ac <HAL_SAI_Init+0x1b0>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f79a:	2b08      	cmp	r3, #8
 800f79c:	d103      	bne.n	800f7a6 <HAL_SAI_Init+0x1aa>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800f79e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f7a2:	60fb      	str	r3, [r7, #12]
 800f7a4:	e002      	b.n	800f7ac <HAL_SAI_Init+0x1b0>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7aa:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800f7ac:	697a      	ldr	r2, [r7, #20]
 800f7ae:	4613      	mov	r3, r2
 800f7b0:	009b      	lsls	r3, r3, #2
 800f7b2:	4413      	add	r3, r2
 800f7b4:	005b      	lsls	r3, r3, #1
 800f7b6:	4619      	mov	r1, r3
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	6a1b      	ldr	r3, [r3, #32]
 800f7bc:	68fa      	ldr	r2, [r7, #12]
 800f7be:	fb02 f303 	mul.w	r3, r2, r3
 800f7c2:	fbb1 f3f3 	udiv	r3, r1, r3
 800f7c6:	613b      	str	r3, [r7, #16]
 800f7c8:	e017      	b.n	800f7fa <HAL_SAI_Init+0x1fe>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f7d2:	d101      	bne.n	800f7d8 <HAL_SAI_Init+0x1dc>
 800f7d4:	2302      	movs	r3, #2
 800f7d6:	e000      	b.n	800f7da <HAL_SAI_Init+0x1de>
 800f7d8:	2301      	movs	r3, #1
 800f7da:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800f7dc:	697a      	ldr	r2, [r7, #20]
 800f7de:	4613      	mov	r3, r2
 800f7e0:	009b      	lsls	r3, r3, #2
 800f7e2:	4413      	add	r3, r2
 800f7e4:	005b      	lsls	r3, r3, #1
 800f7e6:	4619      	mov	r1, r3
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	6a1b      	ldr	r3, [r3, #32]
 800f7ec:	68ba      	ldr	r2, [r7, #8]
 800f7ee:	fb02 f303 	mul.w	r3, r2, r3
 800f7f2:	021b      	lsls	r3, r3, #8
 800f7f4:	fbb1 f3f3 	udiv	r3, r1, r3
 800f7f8:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800f7fa:	693b      	ldr	r3, [r7, #16]
 800f7fc:	4a22      	ldr	r2, [pc, #136]	; (800f888 <HAL_SAI_Init+0x28c>)
 800f7fe:	fba2 2303 	umull	r2, r3, r2, r3
 800f802:	08da      	lsrs	r2, r3, #3
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800f808:	6939      	ldr	r1, [r7, #16]
 800f80a:	4b1f      	ldr	r3, [pc, #124]	; (800f888 <HAL_SAI_Init+0x28c>)
 800f80c:	fba3 2301 	umull	r2, r3, r3, r1
 800f810:	08da      	lsrs	r2, r3, #3
 800f812:	4613      	mov	r3, r2
 800f814:	009b      	lsls	r3, r3, #2
 800f816:	4413      	add	r3, r2
 800f818:	005b      	lsls	r3, r3, #1
 800f81a:	1aca      	subs	r2, r1, r3
 800f81c:	2a08      	cmp	r2, #8
 800f81e:	d904      	bls.n	800f82a <HAL_SAI_Init+0x22e>
    {
      hsai->Init.Mckdiv += 1U;
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f824:	1c5a      	adds	r2, r3, #1
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f82e:	2b04      	cmp	r3, #4
 800f830:	d104      	bne.n	800f83c <HAL_SAI_Init+0x240>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f836:	085a      	lsrs	r2, r3, #1
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	685b      	ldr	r3, [r3, #4]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d003      	beq.n	800f84c <HAL_SAI_Init+0x250>
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	685b      	ldr	r3, [r3, #4]
 800f848:	2b02      	cmp	r3, #2
 800f84a:	d109      	bne.n	800f860 <HAL_SAI_Init+0x264>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f850:	2b01      	cmp	r3, #1
 800f852:	d101      	bne.n	800f858 <HAL_SAI_Init+0x25c>
 800f854:	2300      	movs	r3, #0
 800f856:	e001      	b.n	800f85c <HAL_SAI_Init+0x260>
 800f858:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f85c:	623b      	str	r3, [r7, #32]
 800f85e:	e017      	b.n	800f890 <HAL_SAI_Init+0x294>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f864:	2b01      	cmp	r3, #1
 800f866:	d111      	bne.n	800f88c <HAL_SAI_Init+0x290>
 800f868:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f86c:	e00f      	b.n	800f88e <HAL_SAI_Init+0x292>
 800f86e:	bf00      	nop
 800f870:	40015804 	.word	0x40015804
 800f874:	40015824 	.word	0x40015824
 800f878:	40015800 	.word	0x40015800
 800f87c:	40015c04 	.word	0x40015c04
 800f880:	40015c24 	.word	0x40015c24
 800f884:	40015c00 	.word	0x40015c00
 800f888:	cccccccd 	.word	0xcccccccd
 800f88c:	2300      	movs	r3, #0
 800f88e:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	6819      	ldr	r1, [r3, #0]
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	681a      	ldr	r2, [r3, #0]
 800f89a:	4b58      	ldr	r3, [pc, #352]	; (800f9fc <HAL_SAI_Init+0x400>)
 800f89c:	400b      	ands	r3, r1
 800f89e:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	6819      	ldr	r1, [r3, #0]
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	685a      	ldr	r2, [r3, #4]
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8ae:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f8b4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f8ba:	431a      	orrs	r2, r3
 800f8bc:	6a3b      	ldr	r3, [r7, #32]
 800f8be:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800f8c0:	69fb      	ldr	r3, [r7, #28]
 800f8c2:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 800f8c8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	695b      	ldr	r3, [r3, #20]
 800f8ce:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f8d4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8da:	051b      	lsls	r3, r3, #20
 800f8dc:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800f8e2:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	691b      	ldr	r3, [r3, #16]
 800f8e8:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	430a      	orrs	r2, r1
 800f8f0:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	6859      	ldr	r1, [r3, #4]
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	681a      	ldr	r2, [r3, #0]
 800f8fc:	4b40      	ldr	r3, [pc, #256]	; (800fa00 <HAL_SAI_Init+0x404>)
 800f8fe:	400b      	ands	r3, r1
 800f900:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	6859      	ldr	r1, [r3, #4]
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	69da      	ldr	r2, [r3, #28]
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f910:	431a      	orrs	r2, r3
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f916:	431a      	orrs	r2, r3
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	430a      	orrs	r2, r1
 800f91e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	6899      	ldr	r1, [r3, #8]
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	681a      	ldr	r2, [r3, #0]
 800f92a:	4b36      	ldr	r3, [pc, #216]	; (800fa04 <HAL_SAI_Init+0x408>)
 800f92c:	400b      	ands	r3, r1
 800f92e:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	6899      	ldr	r1, [r3, #8]
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f93a:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800f940:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800f946:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800f94c:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f952:	3b01      	subs	r3, #1
 800f954:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800f956:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	430a      	orrs	r2, r1
 800f95e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	68d9      	ldr	r1, [r3, #12]
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	681a      	ldr	r2, [r3, #0]
 800f96a:	f24f 0320 	movw	r3, #61472	; 0xf020
 800f96e:	400b      	ands	r3, r1
 800f970:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	68d9      	ldr	r1, [r3, #12]
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f980:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f986:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800f988:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f98e:	3b01      	subs	r3, #1
 800f990:	021b      	lsls	r3, r3, #8
 800f992:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	430a      	orrs	r2, r1
 800f99a:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
#else
  if (hsai->Instance == SAI1_Block_A)
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	4a19      	ldr	r2, [pc, #100]	; (800fa08 <HAL_SAI_Init+0x40c>)
 800f9a2:	4293      	cmp	r3, r2
 800f9a4:	d119      	bne.n	800f9da <HAL_SAI_Init+0x3de>
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800f9a6:	69bb      	ldr	r3, [r7, #24]
 800f9a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f9aa:	f023 0201 	bic.w	r2, r3, #1
 800f9ae:	69bb      	ldr	r3, [r7, #24]
 800f9b0:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f9b8:	2b01      	cmp	r3, #1
 800f9ba:	d10e      	bne.n	800f9da <HAL_SAI_Init+0x3de>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f9c4:	3b01      	subs	r3, #1
 800f9c6:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800f9c8:	431a      	orrs	r2, r3
 800f9ca:	69bb      	ldr	r3, [r7, #24]
 800f9cc:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800f9ce:	69bb      	ldr	r3, [r7, #24]
 800f9d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f9d2:	f043 0201 	orr.w	r2, r3, #1
 800f9d6:	69bb      	ldr	r3, [r7, #24]
 800f9d8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	2200      	movs	r2, #0
 800f9de:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	2201      	movs	r2, #1
 800f9e6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	2200      	movs	r2, #0
 800f9ee:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800f9f2:	2300      	movs	r3, #0
}
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	3728      	adds	r7, #40	; 0x28
 800f9f8:	46bd      	mov	sp, r7
 800f9fa:	bd80      	pop	{r7, pc}
 800f9fc:	f005c010 	.word	0xf005c010
 800fa00:	ffff1ff0 	.word	0xffff1ff0
 800fa04:	fff88000 	.word	0xfff88000
 800fa08:	40015804 	.word	0x40015804

0800fa0c <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 800fa0c:	b580      	push	{r7, lr}
 800fa0e:	b084      	sub	sp, #16
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fa14:	2300      	movs	r3, #0
 800fa16:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800fa1e:	2b01      	cmp	r3, #1
 800fa20:	d101      	bne.n	800fa26 <HAL_SAI_Abort+0x1a>
 800fa22:	2302      	movs	r3, #2
 800fa24:	e07d      	b.n	800fb22 <HAL_SAI_Abort+0x116>
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	2201      	movs	r2, #1
 800fa2a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fa38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fa3c:	d14f      	bne.n	800fade <HAL_SAI_Abort+0xd2>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	681a      	ldr	r2, [r3, #0]
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800fa4c:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX)&& (hsai->hdmatx != NULL))
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800fa54:	b2db      	uxtb	r3, r3
 800fa56:	2b12      	cmp	r3, #18
 800fa58:	d11d      	bne.n	800fa96 <HAL_SAI_Abort+0x8a>
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d018      	beq.n	800fa96 <HAL_SAI_Abort+0x8a>
    {
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	f7f7 fb46 	bl	80070fc <HAL_DMA_Abort>
 800fa70:	4603      	mov	r3, r0
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d00f      	beq.n	800fa96 <HAL_SAI_Abort+0x8a>
      {
        /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fa7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa7e:	2b80      	cmp	r3, #128	; 0x80
 800fa80:	d009      	beq.n	800fa96 <HAL_SAI_Abort+0x8a>
        {
          status = HAL_ERROR;
 800fa82:	2301      	movs	r3, #1
 800fa84:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fa8c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        }
      }
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800fa9c:	b2db      	uxtb	r3, r3
 800fa9e:	2b22      	cmp	r3, #34	; 0x22
 800faa0:	d11d      	bne.n	800fade <HAL_SAI_Abort+0xd2>
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d018      	beq.n	800fade <HAL_SAI_Abort+0xd2>
    {
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fab2:	4618      	mov	r0, r3
 800fab4:	f7f7 fb22 	bl	80070fc <HAL_DMA_Abort>
 800fab8:	4603      	mov	r3, r0
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d00f      	beq.n	800fade <HAL_SAI_Abort+0xd2>
      {
        /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fac6:	2b80      	cmp	r3, #128	; 0x80
 800fac8:	d009      	beq.n	800fade <HAL_SAI_Abort+0xd2>
        {
          status = HAL_ERROR;
 800faca:	2301      	movs	r3, #1
 800facc:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fad4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      }
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	2200      	movs	r2, #0
 800fae4:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	f04f 32ff 	mov.w	r2, #4294967295
 800faee:	619a      	str	r2, [r3, #24]

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800faf0:	6878      	ldr	r0, [r7, #4]
 800faf2:	f000 fbff 	bl	80102f4 <SAI_Disable>
 800faf6:	4603      	mov	r3, r0
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d001      	beq.n	800fb00 <HAL_SAI_Abort+0xf4>
  {
    status = HAL_ERROR;
 800fafc:	2301      	movs	r3, #1
 800fafe:	73fb      	strb	r3, [r7, #15]
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	685a      	ldr	r2, [r3, #4]
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	f042 0208 	orr.w	r2, r2, #8
 800fb0e:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	2201      	movs	r2, #1
 800fb14:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	2200      	movs	r2, #0
 800fb1c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return status;
 800fb20:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb22:	4618      	mov	r0, r3
 800fb24:	3710      	adds	r7, #16
 800fb26:	46bd      	mov	sp, r7
 800fb28:	bd80      	pop	{r7, pc}
	...

0800fb2c <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b086      	sub	sp, #24
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	60f8      	str	r0, [r7, #12]
 800fb34:	60b9      	str	r1, [r7, #8]
 800fb36:	4613      	mov	r3, r2
 800fb38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800fb3a:	f7f4 fa9f 	bl	800407c <HAL_GetTick>
 800fb3e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800fb40:	68bb      	ldr	r3, [r7, #8]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d002      	beq.n	800fb4c <HAL_SAI_Transmit_DMA+0x20>
 800fb46:	88fb      	ldrh	r3, [r7, #6]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d101      	bne.n	800fb50 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800fb4c:	2301      	movs	r3, #1
 800fb4e:	e098      	b.n	800fc82 <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800fb56:	b2db      	uxtb	r3, r3
 800fb58:	2b01      	cmp	r3, #1
 800fb5a:	f040 8091 	bne.w	800fc80 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800fb64:	2b01      	cmp	r3, #1
 800fb66:	d101      	bne.n	800fb6c <HAL_SAI_Transmit_DMA+0x40>
 800fb68:	2302      	movs	r3, #2
 800fb6a:	e08a      	b.n	800fc82 <HAL_SAI_Transmit_DMA+0x156>
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	2201      	movs	r2, #1
 800fb70:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	68ba      	ldr	r2, [r7, #8]
 800fb78:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	88fa      	ldrh	r2, [r7, #6]
 800fb7e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	88fa      	ldrh	r2, [r7, #6]
 800fb86:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	2212      	movs	r2, #18
 800fb96:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fba0:	4a3a      	ldr	r2, [pc, #232]	; (800fc8c <HAL_SAI_Transmit_DMA+0x160>)
 800fba2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fbaa:	4a39      	ldr	r2, [pc, #228]	; (800fc90 <HAL_SAI_Transmit_DMA+0x164>)
 800fbac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fbb4:	4a37      	ldr	r2, [pc, #220]	; (800fc94 <HAL_SAI_Transmit_DMA+0x168>)
 800fbb6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fbbe:	2200      	movs	r2, #0
 800fbc0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fbcc:	4619      	mov	r1, r3
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	331c      	adds	r3, #28
 800fbd4:	461a      	mov	r2, r3
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800fbdc:	f7f7 f824 	bl	8006c28 <HAL_DMA_Start_IT>
 800fbe0:	4603      	mov	r3, r0
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d005      	beq.n	800fbf2 <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	2200      	movs	r2, #0
 800fbea:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800fbee:	2301      	movs	r3, #1
 800fbf0:	e047      	b.n	800fc82 <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800fbf2:	2100      	movs	r1, #0
 800fbf4:	68f8      	ldr	r0, [r7, #12]
 800fbf6:	f000 fb45 	bl	8010284 <SAI_InterruptFlag>
 800fbfa:	4601      	mov	r1, r0
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	691a      	ldr	r2, [r3, #16]
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	430a      	orrs	r2, r1
 800fc08:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	681a      	ldr	r2, [r3, #0]
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800fc18:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800fc1a:	e015      	b.n	800fc48 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800fc1c:	f7f4 fa2e 	bl	800407c <HAL_GetTick>
 800fc20:	4602      	mov	r2, r0
 800fc22:	697b      	ldr	r3, [r7, #20]
 800fc24:	1ad3      	subs	r3, r2, r3
 800fc26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fc2a:	d90d      	bls.n	800fc48 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fc32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	2200      	movs	r2, #0
 800fc40:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
 800fc44:	2303      	movs	r3, #3
 800fc46:	e01c      	b.n	800fc82 <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	695b      	ldr	r3, [r3, #20]
 800fc4e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d0e2      	beq.n	800fc1c <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d107      	bne.n	800fc74 <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	681a      	ldr	r2, [r3, #0]
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800fc72:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	2200      	movs	r2, #0
 800fc78:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800fc7c:	2300      	movs	r3, #0
 800fc7e:	e000      	b.n	800fc82 <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 800fc80:	2302      	movs	r3, #2
  }
}
 800fc82:	4618      	mov	r0, r3
 800fc84:	3718      	adds	r7, #24
 800fc86:	46bd      	mov	sp, r7
 800fc88:	bd80      	pop	{r7, pc}
 800fc8a:	bf00      	nop
 800fc8c:	080103c9 	.word	0x080103c9
 800fc90:	08010369 	.word	0x08010369
 800fc94:	080103e5 	.word	0x080103e5

0800fc98 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b086      	sub	sp, #24
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800fca6:	b2db      	uxtb	r3, r3
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	f000 81a7 	beq.w	800fffc <HAL_SAI_IRQHandler+0x364>
  {
    uint32_t itflags = hsai->Instance->SR;
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	695b      	ldr	r3, [r3, #20]
 800fcb4:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	691b      	ldr	r3, [r3, #16]
 800fcbc:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred ------------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 800fcc6:	697b      	ldr	r3, [r7, #20]
 800fcc8:	f003 0308 	and.w	r3, r3, #8
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d00a      	beq.n	800fce6 <HAL_SAI_IRQHandler+0x4e>
 800fcd0:	693b      	ldr	r3, [r7, #16]
 800fcd2:	f003 0308 	and.w	r3, r3, #8
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d005      	beq.n	800fce6 <HAL_SAI_IRQHandler+0x4e>
    {
      hsai->InterruptServiceRoutine(hsai);
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fce0:	6878      	ldr	r0, [r7, #4]
 800fce2:	4798      	blx	r3
 800fce4:	e18a      	b.n	800fffc <HAL_SAI_IRQHandler+0x364>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 800fce6:	697b      	ldr	r3, [r7, #20]
 800fce8:	f003 0301 	and.w	r3, r3, #1
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d01e      	beq.n	800fd2e <HAL_SAI_IRQHandler+0x96>
 800fcf0:	693b      	ldr	r3, [r7, #16]
 800fcf2:	f003 0301 	and.w	r3, r3, #1
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d019      	beq.n	800fd2e <HAL_SAI_IRQHandler+0x96>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	2201      	movs	r2, #1
 800fd00:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800fd08:	b2db      	uxtb	r3, r3
 800fd0a:	2b22      	cmp	r3, #34	; 0x22
 800fd0c:	d101      	bne.n	800fd12 <HAL_SAI_IRQHandler+0x7a>
 800fd0e:	2301      	movs	r3, #1
 800fd10:	e000      	b.n	800fd14 <HAL_SAI_IRQHandler+0x7c>
 800fd12:	2302      	movs	r3, #2
 800fd14:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800fd1c:	68bb      	ldr	r3, [r7, #8]
 800fd1e:	431a      	orrs	r2, r3
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800fd26:	6878      	ldr	r0, [r7, #4]
 800fd28:	f000 f96e 	bl	8010008 <HAL_SAI_ErrorCallback>
 800fd2c:	e166      	b.n	800fffc <HAL_SAI_IRQHandler+0x364>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 800fd2e:	697b      	ldr	r3, [r7, #20]
 800fd30:	f003 0302 	and.w	r3, r3, #2
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d013      	beq.n	800fd60 <HAL_SAI_IRQHandler+0xc8>
 800fd38:	693b      	ldr	r3, [r7, #16]
 800fd3a:	f003 0302 	and.w	r3, r3, #2
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d00e      	beq.n	800fd60 <HAL_SAI_IRQHandler+0xc8>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	2202      	movs	r2, #2
 800fd48:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	f000 8153 	beq.w	800fffc <HAL_SAI_IRQHandler+0x364>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fd5c:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 800fd5e:	e14d      	b.n	800fffc <HAL_SAI_IRQHandler+0x364>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 800fd60:	697b      	ldr	r3, [r7, #20]
 800fd62:	f003 0320 	and.w	r3, r3, #32
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d05b      	beq.n	800fe22 <HAL_SAI_IRQHandler+0x18a>
 800fd6a:	693b      	ldr	r3, [r7, #16]
 800fd6c:	f003 0320 	and.w	r3, r3, #32
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d056      	beq.n	800fe22 <HAL_SAI_IRQHandler+0x18a>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	2220      	movs	r2, #32
 800fd7a:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fd82:	f043 0204 	orr.w	r2, r3, #4
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d03e      	beq.n	800fe14 <HAL_SAI_IRQHandler+0x17c>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d018      	beq.n	800fdd2 <HAL_SAI_IRQHandler+0x13a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fda6:	4a97      	ldr	r2, [pc, #604]	; (8010004 <HAL_SAI_IRQHandler+0x36c>)
 800fda8:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	f7f7 fcc1 	bl	8007738 <HAL_DMA_Abort_IT>
 800fdb6:	4603      	mov	r3, r0
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d00a      	beq.n	800fdd2 <HAL_SAI_IRQHandler+0x13a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fdc2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800fdcc:	6878      	ldr	r0, [r7, #4]
 800fdce:	f000 f91b 	bl	8010008 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	f000 810a 	beq.w	800fff2 <HAL_SAI_IRQHandler+0x35a>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fde4:	4a87      	ldr	r2, [pc, #540]	; (8010004 <HAL_SAI_IRQHandler+0x36c>)
 800fde6:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fdee:	4618      	mov	r0, r3
 800fdf0:	f7f7 fca2 	bl	8007738 <HAL_DMA_Abort_IT>
 800fdf4:	4603      	mov	r3, r0
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	f000 80fb 	beq.w	800fff2 <HAL_SAI_IRQHandler+0x35a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fe02:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800fe0c:	6878      	ldr	r0, [r7, #4]
 800fe0e:	f000 f8fb 	bl	8010008 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800fe12:	e0ee      	b.n	800fff2 <HAL_SAI_IRQHandler+0x35a>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 800fe14:	6878      	ldr	r0, [r7, #4]
 800fe16:	f7ff fdf9 	bl	800fa0c <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800fe1a:	6878      	ldr	r0, [r7, #4]
 800fe1c:	f000 f8f4 	bl	8010008 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800fe20:	e0e7      	b.n	800fff2 <HAL_SAI_IRQHandler+0x35a>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 800fe22:	697b      	ldr	r3, [r7, #20]
 800fe24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d05b      	beq.n	800fee4 <HAL_SAI_IRQHandler+0x24c>
 800fe2c:	693b      	ldr	r3, [r7, #16]
 800fe2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d056      	beq.n	800fee4 <HAL_SAI_IRQHandler+0x24c>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	2240      	movs	r2, #64	; 0x40
 800fe3c:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fe44:	f043 0208 	orr.w	r2, r3, #8
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d03e      	beq.n	800fed6 <HAL_SAI_IRQHandler+0x23e>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d018      	beq.n	800fe94 <HAL_SAI_IRQHandler+0x1fc>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fe68:	4a66      	ldr	r2, [pc, #408]	; (8010004 <HAL_SAI_IRQHandler+0x36c>)
 800fe6a:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fe72:	4618      	mov	r0, r3
 800fe74:	f7f7 fc60 	bl	8007738 <HAL_DMA_Abort_IT>
 800fe78:	4603      	mov	r3, r0
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d00a      	beq.n	800fe94 <HAL_SAI_IRQHandler+0x1fc>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fe84:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800fe8e:	6878      	ldr	r0, [r7, #4]
 800fe90:	f000 f8ba 	bl	8010008 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	f000 80ab 	beq.w	800fff6 <HAL_SAI_IRQHandler+0x35e>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fea6:	4a57      	ldr	r2, [pc, #348]	; (8010004 <HAL_SAI_IRQHandler+0x36c>)
 800fea8:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800feb0:	4618      	mov	r0, r3
 800feb2:	f7f7 fc41 	bl	8007738 <HAL_DMA_Abort_IT>
 800feb6:	4603      	mov	r3, r0
 800feb8:	2b00      	cmp	r3, #0
 800feba:	f000 809c 	beq.w	800fff6 <HAL_SAI_IRQHandler+0x35e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fec4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800fece:	6878      	ldr	r0, [r7, #4]
 800fed0:	f000 f89a 	bl	8010008 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800fed4:	e08f      	b.n	800fff6 <HAL_SAI_IRQHandler+0x35e>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 800fed6:	6878      	ldr	r0, [r7, #4]
 800fed8:	f7ff fd98 	bl	800fa0c <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800fedc:	6878      	ldr	r0, [r7, #4]
 800fede:	f000 f893 	bl	8010008 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800fee2:	e088      	b.n	800fff6 <HAL_SAI_IRQHandler+0x35e>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 800fee4:	697b      	ldr	r3, [r7, #20]
 800fee6:	f003 0304 	and.w	r3, r3, #4
 800feea:	2b00      	cmp	r3, #0
 800feec:	d067      	beq.n	800ffbe <HAL_SAI_IRQHandler+0x326>
 800feee:	693b      	ldr	r3, [r7, #16]
 800fef0:	f003 0304 	and.w	r3, r3, #4
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d062      	beq.n	800ffbe <HAL_SAI_IRQHandler+0x326>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	2204      	movs	r2, #4
 800fefe:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ff06:	f043 0220 	orr.w	r2, r3, #32
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d03c      	beq.n	800ff94 <HAL_SAI_IRQHandler+0x2fc>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d018      	beq.n	800ff56 <HAL_SAI_IRQHandler+0x2be>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ff2a:	4a36      	ldr	r2, [pc, #216]	; (8010004 <HAL_SAI_IRQHandler+0x36c>)
 800ff2c:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ff34:	4618      	mov	r0, r3
 800ff36:	f7f7 fbff 	bl	8007738 <HAL_DMA_Abort_IT>
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d00a      	beq.n	800ff56 <HAL_SAI_IRQHandler+0x2be>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ff46:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800ff50:	6878      	ldr	r0, [r7, #4]
 800ff52:	f000 f859 	bl	8010008 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d04c      	beq.n	800fffa <HAL_SAI_IRQHandler+0x362>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ff66:	4a27      	ldr	r2, [pc, #156]	; (8010004 <HAL_SAI_IRQHandler+0x36c>)
 800ff68:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ff70:	4618      	mov	r0, r3
 800ff72:	f7f7 fbe1 	bl	8007738 <HAL_DMA_Abort_IT>
 800ff76:	4603      	mov	r3, r0
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d03e      	beq.n	800fffa <HAL_SAI_IRQHandler+0x362>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ff82:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800ff8c:	6878      	ldr	r0, [r7, #4]
 800ff8e:	f000 f83b 	bl	8010008 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800ff92:	e032      	b.n	800fffa <HAL_SAI_IRQHandler+0x362>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	2200      	movs	r2, #0
 800ff9a:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	f04f 32ff 	mov.w	r2, #4294967295
 800ffa4:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	2201      	movs	r2, #1
 800ffaa:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	2200      	movs	r2, #0
 800ffb2:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800ffb6:	6878      	ldr	r0, [r7, #4]
 800ffb8:	f000 f826 	bl	8010008 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800ffbc:	e01d      	b.n	800fffa <HAL_SAI_IRQHandler+0x362>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 800ffbe:	697b      	ldr	r3, [r7, #20]
 800ffc0:	f003 0310 	and.w	r3, r3, #16
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d019      	beq.n	800fffc <HAL_SAI_IRQHandler+0x364>
 800ffc8:	693b      	ldr	r3, [r7, #16]
 800ffca:	f003 0310 	and.w	r3, r3, #16
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d014      	beq.n	800fffc <HAL_SAI_IRQHandler+0x364>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	2210      	movs	r2, #16
 800ffd8:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ffe0:	f043 0210 	orr.w	r2, r3, #16
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800ffea:	6878      	ldr	r0, [r7, #4]
 800ffec:	f000 f80c 	bl	8010008 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 800fff0:	e004      	b.n	800fffc <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800fff2:	bf00      	nop
 800fff4:	e002      	b.n	800fffc <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800fff6:	bf00      	nop
 800fff8:	e000      	b.n	800fffc <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800fffa:	bf00      	nop
}
 800fffc:	bf00      	nop
 800fffe:	3718      	adds	r7, #24
 8010000:	46bd      	mov	sp, r7
 8010002:	bd80      	pop	{r7, pc}
 8010004:	08010443 	.word	0x08010443

08010008 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8010008:	b480      	push	{r7}
 801000a:	b083      	sub	sp, #12
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8010010:	bf00      	nop
 8010012:	370c      	adds	r7, #12
 8010014:	46bd      	mov	sp, r7
 8010016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001a:	4770      	bx	lr

0801001c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 801001c:	b480      	push	{r7}
 801001e:	b087      	sub	sp, #28
 8010020:	af00      	add	r7, sp, #0
 8010022:	60f8      	str	r0, [r7, #12]
 8010024:	60b9      	str	r1, [r7, #8]
 8010026:	607a      	str	r2, [r7, #4]
 8010028:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801002a:	2300      	movs	r3, #0
 801002c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	2200      	movs	r2, #0
 8010032:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	2200      	movs	r2, #0
 8010038:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	685b      	ldr	r3, [r3, #4]
 801003e:	2b00      	cmp	r3, #0
 8010040:	d003      	beq.n	801004a <SAI_InitI2S+0x2e>
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	685b      	ldr	r3, [r3, #4]
 8010046:	2b02      	cmp	r3, #2
 8010048:	d103      	bne.n	8010052 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	2200      	movs	r2, #0
 801004e:	651a      	str	r2, [r3, #80]	; 0x50
 8010050:	e002      	b.n	8010058 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	2201      	movs	r2, #1
 8010056:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801005e:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010066:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	2200      	movs	r2, #0
 801006c:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	683a      	ldr	r2, [r7, #0]
 8010072:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8010074:	683b      	ldr	r3, [r7, #0]
 8010076:	f003 0301 	and.w	r3, r3, #1
 801007a:	2b00      	cmp	r3, #0
 801007c:	d001      	beq.n	8010082 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 801007e:	2301      	movs	r3, #1
 8010080:	e077      	b.n	8010172 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8010082:	68bb      	ldr	r3, [r7, #8]
 8010084:	2b00      	cmp	r3, #0
 8010086:	d107      	bne.n	8010098 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	2200      	movs	r2, #0
 801008c:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8010094:	665a      	str	r2, [r3, #100]	; 0x64
 8010096:	e006      	b.n	80100a6 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 801009e:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	2200      	movs	r2, #0
 80100a4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Frame definition */
  switch (datasize)
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	2b03      	cmp	r3, #3
 80100aa:	d84f      	bhi.n	801014c <SAI_InitI2S+0x130>
 80100ac:	a201      	add	r2, pc, #4	; (adr r2, 80100b4 <SAI_InitI2S+0x98>)
 80100ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100b2:	bf00      	nop
 80100b4:	080100c5 	.word	0x080100c5
 80100b8:	080100e7 	.word	0x080100e7
 80100bc:	08010109 	.word	0x08010109
 80100c0:	0801012b 	.word	0x0801012b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	2280      	movs	r2, #128	; 0x80
 80100c8:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 80100ca:	683b      	ldr	r3, [r7, #0]
 80100cc:	085b      	lsrs	r3, r3, #1
 80100ce:	015a      	lsls	r2, r3, #5
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 80100d4:	683b      	ldr	r3, [r7, #0]
 80100d6:	085b      	lsrs	r3, r3, #1
 80100d8:	011a      	lsls	r2, r3, #4
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	2240      	movs	r2, #64	; 0x40
 80100e2:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80100e4:	e035      	b.n	8010152 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	2280      	movs	r2, #128	; 0x80
 80100ea:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80100ec:	683b      	ldr	r3, [r7, #0]
 80100ee:	085b      	lsrs	r3, r3, #1
 80100f0:	019a      	lsls	r2, r3, #6
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80100f6:	683b      	ldr	r3, [r7, #0]
 80100f8:	085b      	lsrs	r3, r3, #1
 80100fa:	015a      	lsls	r2, r3, #5
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	2280      	movs	r2, #128	; 0x80
 8010104:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8010106:	e024      	b.n	8010152 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	22c0      	movs	r2, #192	; 0xc0
 801010c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 801010e:	683b      	ldr	r3, [r7, #0]
 8010110:	085b      	lsrs	r3, r3, #1
 8010112:	019a      	lsls	r2, r3, #6
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8010118:	683b      	ldr	r3, [r7, #0]
 801011a:	085b      	lsrs	r3, r3, #1
 801011c:	015a      	lsls	r2, r3, #5
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	2280      	movs	r2, #128	; 0x80
 8010126:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8010128:	e013      	b.n	8010152 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	22e0      	movs	r2, #224	; 0xe0
 801012e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8010130:	683b      	ldr	r3, [r7, #0]
 8010132:	085b      	lsrs	r3, r3, #1
 8010134:	019a      	lsls	r2, r3, #6
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 801013a:	683b      	ldr	r3, [r7, #0]
 801013c:	085b      	lsrs	r3, r3, #1
 801013e:	015a      	lsls	r2, r3, #5
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	2280      	movs	r2, #128	; 0x80
 8010148:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 801014a:	e002      	b.n	8010152 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 801014c:	2301      	movs	r3, #1
 801014e:	75fb      	strb	r3, [r7, #23]
      break;
 8010150:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8010152:	68bb      	ldr	r3, [r7, #8]
 8010154:	2b02      	cmp	r3, #2
 8010156:	d10b      	bne.n	8010170 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	2b01      	cmp	r3, #1
 801015c:	d102      	bne.n	8010164 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	2210      	movs	r2, #16
 8010162:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	2b02      	cmp	r3, #2
 8010168:	d102      	bne.n	8010170 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	2208      	movs	r2, #8
 801016e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 8010170:	7dfb      	ldrb	r3, [r7, #23]
}
 8010172:	4618      	mov	r0, r3
 8010174:	371c      	adds	r7, #28
 8010176:	46bd      	mov	sp, r7
 8010178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801017c:	4770      	bx	lr
 801017e:	bf00      	nop

08010180 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8010180:	b480      	push	{r7}
 8010182:	b087      	sub	sp, #28
 8010184:	af00      	add	r7, sp, #0
 8010186:	60f8      	str	r0, [r7, #12]
 8010188:	60b9      	str	r1, [r7, #8]
 801018a:	607a      	str	r2, [r7, #4]
 801018c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801018e:	2300      	movs	r3, #0
 8010190:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	2200      	movs	r2, #0
 8010196:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	2200      	movs	r2, #0
 801019c:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	685b      	ldr	r3, [r3, #4]
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d003      	beq.n	80101ae <SAI_InitPCM+0x2e>
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	685b      	ldr	r3, [r3, #4]
 80101aa:	2b02      	cmp	r3, #2
 80101ac:	d103      	bne.n	80101b6 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	2201      	movs	r2, #1
 80101b2:	651a      	str	r2, [r3, #80]	; 0x50
 80101b4:	e002      	b.n	80101bc <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	2200      	movs	r2, #0
 80101ba:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	2200      	movs	r2, #0
 80101c0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80101c8:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80101d0:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	2200      	movs	r2, #0
 80101d6:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	683a      	ldr	r2, [r7, #0]
 80101dc:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80101e4:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 80101e6:	68bb      	ldr	r3, [r7, #8]
 80101e8:	2b04      	cmp	r3, #4
 80101ea:	d103      	bne.n	80101f4 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	2201      	movs	r2, #1
 80101f0:	659a      	str	r2, [r3, #88]	; 0x58
 80101f2:	e002      	b.n	80101fa <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	220d      	movs	r2, #13
 80101f8:	659a      	str	r2, [r3, #88]	; 0x58
  }

  switch (datasize)
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	2b03      	cmp	r3, #3
 80101fe:	d837      	bhi.n	8010270 <SAI_InitPCM+0xf0>
 8010200:	a201      	add	r2, pc, #4	; (adr r2, 8010208 <SAI_InitPCM+0x88>)
 8010202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010206:	bf00      	nop
 8010208:	08010219 	.word	0x08010219
 801020c:	0801022f 	.word	0x0801022f
 8010210:	08010245 	.word	0x08010245
 8010214:	0801025b 	.word	0x0801025b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	2280      	movs	r2, #128	; 0x80
 801021c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 801021e:	683b      	ldr	r3, [r7, #0]
 8010220:	011a      	lsls	r2, r3, #4
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	2240      	movs	r2, #64	; 0x40
 801022a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 801022c:	e023      	b.n	8010276 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	2280      	movs	r2, #128	; 0x80
 8010232:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8010234:	683b      	ldr	r3, [r7, #0]
 8010236:	015a      	lsls	r2, r3, #5
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	2280      	movs	r2, #128	; 0x80
 8010240:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8010242:	e018      	b.n	8010276 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	22c0      	movs	r2, #192	; 0xc0
 8010248:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 801024a:	683b      	ldr	r3, [r7, #0]
 801024c:	015a      	lsls	r2, r3, #5
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	2280      	movs	r2, #128	; 0x80
 8010256:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8010258:	e00d      	b.n	8010276 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	22e0      	movs	r2, #224	; 0xe0
 801025e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8010260:	683b      	ldr	r3, [r7, #0]
 8010262:	015a      	lsls	r2, r3, #5
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	2280      	movs	r2, #128	; 0x80
 801026c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 801026e:	e002      	b.n	8010276 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8010270:	2301      	movs	r3, #1
 8010272:	75fb      	strb	r3, [r7, #23]
      break;
 8010274:	bf00      	nop
  }

  return status;
 8010276:	7dfb      	ldrb	r3, [r7, #23]
}
 8010278:	4618      	mov	r0, r3
 801027a:	371c      	adds	r7, #28
 801027c:	46bd      	mov	sp, r7
 801027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010282:	4770      	bx	lr

08010284 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8010284:	b480      	push	{r7}
 8010286:	b085      	sub	sp, #20
 8010288:	af00      	add	r7, sp, #0
 801028a:	6078      	str	r0, [r7, #4]
 801028c:	460b      	mov	r3, r1
 801028e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8010290:	2301      	movs	r3, #1
 8010292:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8010294:	78fb      	ldrb	r3, [r7, #3]
 8010296:	2b01      	cmp	r3, #1
 8010298:	d103      	bne.n	80102a2 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	f043 0308 	orr.w	r3, r3, #8
 80102a0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102a6:	2b08      	cmp	r3, #8
 80102a8:	d10b      	bne.n	80102c2 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80102ae:	2b03      	cmp	r3, #3
 80102b0:	d003      	beq.n	80102ba <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	685b      	ldr	r3, [r3, #4]
 80102b6:	2b01      	cmp	r3, #1
 80102b8:	d103      	bne.n	80102c2 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	f043 0310 	orr.w	r3, r3, #16
 80102c0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	685b      	ldr	r3, [r3, #4]
 80102c6:	2b03      	cmp	r3, #3
 80102c8:	d003      	beq.n	80102d2 <SAI_InterruptFlag+0x4e>
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	685b      	ldr	r3, [r3, #4]
 80102ce:	2b02      	cmp	r3, #2
 80102d0:	d104      	bne.n	80102dc <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80102d8:	60fb      	str	r3, [r7, #12]
 80102da:	e003      	b.n	80102e4 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	f043 0304 	orr.w	r3, r3, #4
 80102e2:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 80102e4:	68fb      	ldr	r3, [r7, #12]
}
 80102e6:	4618      	mov	r0, r3
 80102e8:	3714      	adds	r7, #20
 80102ea:	46bd      	mov	sp, r7
 80102ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f0:	4770      	bx	lr
	...

080102f4 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80102f4:	b480      	push	{r7}
 80102f6:	b085      	sub	sp, #20
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80102fc:	4b18      	ldr	r3, [pc, #96]	; (8010360 <SAI_Disable+0x6c>)
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	4a18      	ldr	r2, [pc, #96]	; (8010364 <SAI_Disable+0x70>)
 8010302:	fba2 2303 	umull	r2, r3, r2, r3
 8010306:	0b1b      	lsrs	r3, r3, #12
 8010308:	009b      	lsls	r3, r3, #2
 801030a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 801030c:	2300      	movs	r3, #0
 801030e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	681a      	ldr	r2, [r3, #0]
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 801031e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d10a      	bne.n	801033c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801032c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8010336:	2303      	movs	r3, #3
 8010338:	72fb      	strb	r3, [r7, #11]
      break;
 801033a:	e009      	b.n	8010350 <SAI_Disable+0x5c>
    }
    count--;
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	3b01      	subs	r3, #1
 8010340:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801034c:	2b00      	cmp	r3, #0
 801034e:	d1e7      	bne.n	8010320 <SAI_Disable+0x2c>

  return status;
 8010350:	7afb      	ldrb	r3, [r7, #11]
}
 8010352:	4618      	mov	r0, r3
 8010354:	3714      	adds	r7, #20
 8010356:	46bd      	mov	sp, r7
 8010358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801035c:	4770      	bx	lr
 801035e:	bf00      	nop
 8010360:	20000044 	.word	0x20000044
 8010364:	95cbec1b 	.word	0x95cbec1b

08010368 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8010368:	b580      	push	{r7, lr}
 801036a:	b084      	sub	sp, #16
 801036c:	af00      	add	r7, sp, #0
 801036e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010374:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	69db      	ldr	r3, [r3, #28]
 801037a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801037e:	d01c      	beq.n	80103ba <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	2200      	movs	r2, #0
 8010384:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	681a      	ldr	r2, [r3, #0]
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8010396:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8010398:	2100      	movs	r1, #0
 801039a:	68f8      	ldr	r0, [r7, #12]
 801039c:	f7ff ff72 	bl	8010284 <SAI_InterruptFlag>
 80103a0:	4603      	mov	r3, r0
 80103a2:	43d9      	mvns	r1, r3
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	691a      	ldr	r2, [r3, #16]
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	400a      	ands	r2, r1
 80103b0:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	2201      	movs	r2, #1
 80103b6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 80103ba:	68f8      	ldr	r0, [r7, #12]
 80103bc:	f7f0 f904 	bl	80005c8 <HAL_SAI_TxCpltCallback>
#endif
}
 80103c0:	bf00      	nop
 80103c2:	3710      	adds	r7, #16
 80103c4:	46bd      	mov	sp, r7
 80103c6:	bd80      	pop	{r7, pc}

080103c8 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b084      	sub	sp, #16
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103d4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 80103d6:	68f8      	ldr	r0, [r7, #12]
 80103d8:	f7f0 f894 	bl	8000504 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 80103dc:	bf00      	nop
 80103de:	3710      	adds	r7, #16
 80103e0:	46bd      	mov	sp, r7
 80103e2:	bd80      	pop	{r7, pc}

080103e4 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b084      	sub	sp, #16
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103f0:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80103f2:	6878      	ldr	r0, [r7, #4]
 80103f4:	f7f8 fb48 	bl	8008a88 <HAL_DMA_GetError>
 80103f8:	4603      	mov	r3, r0
 80103fa:	2b02      	cmp	r3, #2
 80103fc:	d01d      	beq.n	801043a <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010404:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	681a      	ldr	r2, [r3, #0]
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 801041c:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 801041e:	68f8      	ldr	r0, [r7, #12]
 8010420:	f7ff ff68 	bl	80102f4 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	2201      	movs	r2, #1
 8010428:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	2200      	movs	r2, #0
 8010430:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 8010434:	68f8      	ldr	r0, [r7, #12]
 8010436:	f7ff fde7 	bl	8010008 <HAL_SAI_ErrorCallback>
#endif
  }
}
 801043a:	bf00      	nop
 801043c:	3710      	adds	r7, #16
 801043e:	46bd      	mov	sp, r7
 8010440:	bd80      	pop	{r7, pc}

08010442 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8010442:	b580      	push	{r7, lr}
 8010444:	b084      	sub	sp, #16
 8010446:	af00      	add	r7, sp, #0
 8010448:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801044e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	681a      	ldr	r2, [r3, #0]
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 801045e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	2200      	movs	r2, #0
 8010466:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	f04f 32ff 	mov.w	r2, #4294967295
 8010470:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010478:	2b20      	cmp	r3, #32
 801047a:	d00a      	beq.n	8010492 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 801047c:	68f8      	ldr	r0, [r7, #12]
 801047e:	f7ff ff39 	bl	80102f4 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	685a      	ldr	r2, [r3, #4]
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	f042 0208 	orr.w	r2, r2, #8
 8010490:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	2201      	movs	r2, #1
 8010496:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	2200      	movs	r2, #0
 801049e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80104a2:	68f8      	ldr	r0, [r7, #12]
 80104a4:	f7ff fdb0 	bl	8010008 <HAL_SAI_ErrorCallback>
#endif
}
 80104a8:	bf00      	nop
 80104aa:	3710      	adds	r7, #16
 80104ac:	46bd      	mov	sp, r7
 80104ae:	bd80      	pop	{r7, pc}

080104b0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80104b0:	b580      	push	{r7, lr}
 80104b2:	b084      	sub	sp, #16
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d101      	bne.n	80104c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80104be:	2301      	movs	r3, #1
 80104c0:	e10f      	b.n	80106e2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	2200      	movs	r2, #0
 80104c6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	4a87      	ldr	r2, [pc, #540]	; (80106ec <HAL_SPI_Init+0x23c>)
 80104ce:	4293      	cmp	r3, r2
 80104d0:	d00f      	beq.n	80104f2 <HAL_SPI_Init+0x42>
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	4a86      	ldr	r2, [pc, #536]	; (80106f0 <HAL_SPI_Init+0x240>)
 80104d8:	4293      	cmp	r3, r2
 80104da:	d00a      	beq.n	80104f2 <HAL_SPI_Init+0x42>
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	4a84      	ldr	r2, [pc, #528]	; (80106f4 <HAL_SPI_Init+0x244>)
 80104e2:	4293      	cmp	r3, r2
 80104e4:	d005      	beq.n	80104f2 <HAL_SPI_Init+0x42>
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	68db      	ldr	r3, [r3, #12]
 80104ea:	2b0f      	cmp	r3, #15
 80104ec:	d901      	bls.n	80104f2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80104ee:	2301      	movs	r3, #1
 80104f0:	e0f7      	b.n	80106e2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80104f2:	6878      	ldr	r0, [r7, #4]
 80104f4:	f000 fbca 	bl	8010c8c <SPI_GetPacketSize>
 80104f8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	4a7b      	ldr	r2, [pc, #492]	; (80106ec <HAL_SPI_Init+0x23c>)
 8010500:	4293      	cmp	r3, r2
 8010502:	d00c      	beq.n	801051e <HAL_SPI_Init+0x6e>
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	4a79      	ldr	r2, [pc, #484]	; (80106f0 <HAL_SPI_Init+0x240>)
 801050a:	4293      	cmp	r3, r2
 801050c:	d007      	beq.n	801051e <HAL_SPI_Init+0x6e>
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	4a78      	ldr	r2, [pc, #480]	; (80106f4 <HAL_SPI_Init+0x244>)
 8010514:	4293      	cmp	r3, r2
 8010516:	d002      	beq.n	801051e <HAL_SPI_Init+0x6e>
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	2b08      	cmp	r3, #8
 801051c:	d811      	bhi.n	8010542 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8010522:	4a72      	ldr	r2, [pc, #456]	; (80106ec <HAL_SPI_Init+0x23c>)
 8010524:	4293      	cmp	r3, r2
 8010526:	d009      	beq.n	801053c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	4a70      	ldr	r2, [pc, #448]	; (80106f0 <HAL_SPI_Init+0x240>)
 801052e:	4293      	cmp	r3, r2
 8010530:	d004      	beq.n	801053c <HAL_SPI_Init+0x8c>
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	4a6f      	ldr	r2, [pc, #444]	; (80106f4 <HAL_SPI_Init+0x244>)
 8010538:	4293      	cmp	r3, r2
 801053a:	d104      	bne.n	8010546 <HAL_SPI_Init+0x96>
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	2b10      	cmp	r3, #16
 8010540:	d901      	bls.n	8010546 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8010542:	2301      	movs	r3, #1
 8010544:	e0cd      	b.n	80106e2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801054c:	b2db      	uxtb	r3, r3
 801054e:	2b00      	cmp	r3, #0
 8010550:	d106      	bne.n	8010560 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	2200      	movs	r2, #0
 8010556:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801055a:	6878      	ldr	r0, [r7, #4]
 801055c:	f7f3 f9be 	bl	80038dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	2202      	movs	r2, #2
 8010564:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	681a      	ldr	r2, [r3, #0]
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	f022 0201 	bic.w	r2, r2, #1
 8010576:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	689b      	ldr	r3, [r3, #8]
 801057e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8010582:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	699b      	ldr	r3, [r3, #24]
 8010588:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801058c:	d119      	bne.n	80105c2 <HAL_SPI_Init+0x112>
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	685b      	ldr	r3, [r3, #4]
 8010592:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010596:	d103      	bne.n	80105a0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801059c:	2b00      	cmp	r3, #0
 801059e:	d008      	beq.n	80105b2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d10c      	bne.n	80105c2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80105ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80105b0:	d107      	bne.n	80105c2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	681a      	ldr	r2, [r3, #0]
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80105c0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	685b      	ldr	r3, [r3, #4]
 80105c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d00f      	beq.n	80105ee <HAL_SPI_Init+0x13e>
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	68db      	ldr	r3, [r3, #12]
 80105d2:	2b06      	cmp	r3, #6
 80105d4:	d90b      	bls.n	80105ee <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	430a      	orrs	r2, r1
 80105ea:	601a      	str	r2, [r3, #0]
 80105ec:	e007      	b.n	80105fe <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	681a      	ldr	r2, [r3, #0]
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80105fc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	69da      	ldr	r2, [r3, #28]
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010606:	431a      	orrs	r2, r3
 8010608:	68bb      	ldr	r3, [r7, #8]
 801060a:	431a      	orrs	r2, r3
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010610:	ea42 0103 	orr.w	r1, r2, r3
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	68da      	ldr	r2, [r3, #12]
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	430a      	orrs	r2, r1
 801061e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010628:	431a      	orrs	r2, r3
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801062e:	431a      	orrs	r2, r3
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	699b      	ldr	r3, [r3, #24]
 8010634:	431a      	orrs	r2, r3
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	691b      	ldr	r3, [r3, #16]
 801063a:	431a      	orrs	r2, r3
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	695b      	ldr	r3, [r3, #20]
 8010640:	431a      	orrs	r2, r3
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	6a1b      	ldr	r3, [r3, #32]
 8010646:	431a      	orrs	r2, r3
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	685b      	ldr	r3, [r3, #4]
 801064c:	431a      	orrs	r2, r3
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010652:	431a      	orrs	r2, r3
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	689b      	ldr	r3, [r3, #8]
 8010658:	431a      	orrs	r2, r3
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801065e:	ea42 0103 	orr.w	r1, r2, r3
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	430a      	orrs	r2, r1
 801066c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	685b      	ldr	r3, [r3, #4]
 8010672:	2b00      	cmp	r3, #0
 8010674:	d113      	bne.n	801069e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	689b      	ldr	r3, [r3, #8]
 801067c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010688:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	689b      	ldr	r3, [r3, #8]
 8010690:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801069c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	f022 0201 	bic.w	r2, r2, #1
 80106ac:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	685b      	ldr	r3, [r3, #4]
 80106b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d00a      	beq.n	80106d0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	68db      	ldr	r3, [r3, #12]
 80106c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	430a      	orrs	r2, r1
 80106ce:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	2200      	movs	r2, #0
 80106d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	2201      	movs	r2, #1
 80106dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80106e0:	2300      	movs	r3, #0
}
 80106e2:	4618      	mov	r0, r3
 80106e4:	3710      	adds	r7, #16
 80106e6:	46bd      	mov	sp, r7
 80106e8:	bd80      	pop	{r7, pc}
 80106ea:	bf00      	nop
 80106ec:	40013000 	.word	0x40013000
 80106f0:	40003800 	.word	0x40003800
 80106f4:	40003c00 	.word	0x40003c00

080106f8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80106f8:	b580      	push	{r7, lr}
 80106fa:	b08a      	sub	sp, #40	; 0x28
 80106fc:	af02      	add	r7, sp, #8
 80106fe:	60f8      	str	r0, [r7, #12]
 8010700:	60b9      	str	r1, [r7, #8]
 8010702:	603b      	str	r3, [r7, #0]
 8010704:	4613      	mov	r3, r2
 8010706:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	3320      	adds	r3, #32
 801070e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8010710:	2300      	movs	r3, #0
 8010712:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801071a:	2b01      	cmp	r3, #1
 801071c:	d101      	bne.n	8010722 <HAL_SPI_Transmit+0x2a>
 801071e:	2302      	movs	r3, #2
 8010720:	e1e1      	b.n	8010ae6 <HAL_SPI_Transmit+0x3ee>
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	2201      	movs	r2, #1
 8010726:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801072a:	f7f3 fca7 	bl	800407c <HAL_GetTick>
 801072e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010736:	b2db      	uxtb	r3, r3
 8010738:	2b01      	cmp	r3, #1
 801073a:	d007      	beq.n	801074c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 801073c:	2302      	movs	r3, #2
 801073e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	2200      	movs	r2, #0
 8010744:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8010748:	7efb      	ldrb	r3, [r7, #27]
 801074a:	e1cc      	b.n	8010ae6 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 801074c:	68bb      	ldr	r3, [r7, #8]
 801074e:	2b00      	cmp	r3, #0
 8010750:	d002      	beq.n	8010758 <HAL_SPI_Transmit+0x60>
 8010752:	88fb      	ldrh	r3, [r7, #6]
 8010754:	2b00      	cmp	r3, #0
 8010756:	d107      	bne.n	8010768 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8010758:	2301      	movs	r3, #1
 801075a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	2200      	movs	r2, #0
 8010760:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8010764:	7efb      	ldrb	r3, [r7, #27]
 8010766:	e1be      	b.n	8010ae6 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	2203      	movs	r2, #3
 801076c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	2200      	movs	r2, #0
 8010774:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	68ba      	ldr	r2, [r7, #8]
 801077c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	88fa      	ldrh	r2, [r7, #6]
 8010782:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	88fa      	ldrh	r2, [r7, #6]
 801078a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	2200      	movs	r2, #0
 8010792:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	2200      	movs	r2, #0
 8010798:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	2200      	movs	r2, #0
 80107a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	2200      	movs	r2, #0
 80107a8:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	2200      	movs	r2, #0
 80107ae:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	689b      	ldr	r3, [r3, #8]
 80107b4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80107b8:	d108      	bne.n	80107cc <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	681a      	ldr	r2, [r3, #0]
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80107c8:	601a      	str	r2, [r3, #0]
 80107ca:	e009      	b.n	80107e0 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	68db      	ldr	r3, [r3, #12]
 80107d2:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80107de:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	685a      	ldr	r2, [r3, #4]
 80107e6:	4b96      	ldr	r3, [pc, #600]	; (8010a40 <HAL_SPI_Transmit+0x348>)
 80107e8:	4013      	ands	r3, r2
 80107ea:	88f9      	ldrh	r1, [r7, #6]
 80107ec:	68fa      	ldr	r2, [r7, #12]
 80107ee:	6812      	ldr	r2, [r2, #0]
 80107f0:	430b      	orrs	r3, r1
 80107f2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	681a      	ldr	r2, [r3, #0]
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	f042 0201 	orr.w	r2, r2, #1
 8010802:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	685b      	ldr	r3, [r3, #4]
 8010808:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801080c:	d107      	bne.n	801081e <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	681a      	ldr	r2, [r3, #0]
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801081c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	68db      	ldr	r3, [r3, #12]
 8010822:	2b0f      	cmp	r3, #15
 8010824:	d947      	bls.n	80108b6 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8010826:	e03f      	b.n	80108a8 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	695b      	ldr	r3, [r3, #20]
 801082e:	f003 0302 	and.w	r3, r3, #2
 8010832:	2b02      	cmp	r3, #2
 8010834:	d114      	bne.n	8010860 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	6812      	ldr	r2, [r2, #0]
 8010840:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010846:	1d1a      	adds	r2, r3, #4
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010852:	b29b      	uxth	r3, r3
 8010854:	3b01      	subs	r3, #1
 8010856:	b29a      	uxth	r2, r3
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 801085e:	e023      	b.n	80108a8 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010860:	f7f3 fc0c 	bl	800407c <HAL_GetTick>
 8010864:	4602      	mov	r2, r0
 8010866:	697b      	ldr	r3, [r7, #20]
 8010868:	1ad3      	subs	r3, r2, r3
 801086a:	683a      	ldr	r2, [r7, #0]
 801086c:	429a      	cmp	r2, r3
 801086e:	d803      	bhi.n	8010878 <HAL_SPI_Transmit+0x180>
 8010870:	683b      	ldr	r3, [r7, #0]
 8010872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010876:	d102      	bne.n	801087e <HAL_SPI_Transmit+0x186>
 8010878:	683b      	ldr	r3, [r7, #0]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d114      	bne.n	80108a8 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801087e:	68f8      	ldr	r0, [r7, #12]
 8010880:	f000 f936 	bl	8010af0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	2200      	movs	r2, #0
 8010888:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010892:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	2201      	movs	r2, #1
 80108a0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80108a4:	2303      	movs	r3, #3
 80108a6:	e11e      	b.n	8010ae6 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80108ae:	b29b      	uxth	r3, r3
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d1b9      	bne.n	8010828 <HAL_SPI_Transmit+0x130>
 80108b4:	e0f1      	b.n	8010a9a <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	68db      	ldr	r3, [r3, #12]
 80108ba:	2b07      	cmp	r3, #7
 80108bc:	f240 80e6 	bls.w	8010a8c <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80108c0:	e05d      	b.n	801097e <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	695b      	ldr	r3, [r3, #20]
 80108c8:	f003 0302 	and.w	r3, r3, #2
 80108cc:	2b02      	cmp	r3, #2
 80108ce:	d132      	bne.n	8010936 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80108d6:	b29b      	uxth	r3, r3
 80108d8:	2b01      	cmp	r3, #1
 80108da:	d918      	bls.n	801090e <HAL_SPI_Transmit+0x216>
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d014      	beq.n	801090e <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	6812      	ldr	r2, [r2, #0]
 80108ee:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80108f4:	1d1a      	adds	r2, r3, #4
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010900:	b29b      	uxth	r3, r3
 8010902:	3b02      	subs	r3, #2
 8010904:	b29a      	uxth	r2, r3
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 801090c:	e037      	b.n	801097e <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010912:	881a      	ldrh	r2, [r3, #0]
 8010914:	69fb      	ldr	r3, [r7, #28]
 8010916:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801091c:	1c9a      	adds	r2, r3, #2
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010928:	b29b      	uxth	r3, r3
 801092a:	3b01      	subs	r3, #1
 801092c:	b29a      	uxth	r2, r3
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8010934:	e023      	b.n	801097e <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010936:	f7f3 fba1 	bl	800407c <HAL_GetTick>
 801093a:	4602      	mov	r2, r0
 801093c:	697b      	ldr	r3, [r7, #20]
 801093e:	1ad3      	subs	r3, r2, r3
 8010940:	683a      	ldr	r2, [r7, #0]
 8010942:	429a      	cmp	r2, r3
 8010944:	d803      	bhi.n	801094e <HAL_SPI_Transmit+0x256>
 8010946:	683b      	ldr	r3, [r7, #0]
 8010948:	f1b3 3fff 	cmp.w	r3, #4294967295
 801094c:	d102      	bne.n	8010954 <HAL_SPI_Transmit+0x25c>
 801094e:	683b      	ldr	r3, [r7, #0]
 8010950:	2b00      	cmp	r3, #0
 8010952:	d114      	bne.n	801097e <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010954:	68f8      	ldr	r0, [r7, #12]
 8010956:	f000 f8cb 	bl	8010af0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	2200      	movs	r2, #0
 801095e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010968:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	2201      	movs	r2, #1
 8010976:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 801097a:	2303      	movs	r3, #3
 801097c:	e0b3      	b.n	8010ae6 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010984:	b29b      	uxth	r3, r3
 8010986:	2b00      	cmp	r3, #0
 8010988:	d19b      	bne.n	80108c2 <HAL_SPI_Transmit+0x1ca>
 801098a:	e086      	b.n	8010a9a <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	695b      	ldr	r3, [r3, #20]
 8010992:	f003 0302 	and.w	r3, r3, #2
 8010996:	2b02      	cmp	r3, #2
 8010998:	d154      	bne.n	8010a44 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80109a0:	b29b      	uxth	r3, r3
 80109a2:	2b03      	cmp	r3, #3
 80109a4:	d918      	bls.n	80109d8 <HAL_SPI_Transmit+0x2e0>
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80109aa:	2b40      	cmp	r3, #64	; 0x40
 80109ac:	d914      	bls.n	80109d8 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	6812      	ldr	r2, [r2, #0]
 80109b8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80109be:	1d1a      	adds	r2, r3, #4
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80109ca:	b29b      	uxth	r3, r3
 80109cc:	3b04      	subs	r3, #4
 80109ce:	b29a      	uxth	r2, r3
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80109d6:	e059      	b.n	8010a8c <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80109de:	b29b      	uxth	r3, r3
 80109e0:	2b01      	cmp	r3, #1
 80109e2:	d917      	bls.n	8010a14 <HAL_SPI_Transmit+0x31c>
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d013      	beq.n	8010a14 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80109f0:	881a      	ldrh	r2, [r3, #0]
 80109f2:	69fb      	ldr	r3, [r7, #28]
 80109f4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80109fa:	1c9a      	adds	r2, r3, #2
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010a06:	b29b      	uxth	r3, r3
 8010a08:	3b02      	subs	r3, #2
 8010a0a:	b29a      	uxth	r2, r3
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8010a12:	e03b      	b.n	8010a8c <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	3320      	adds	r3, #32
 8010a1e:	7812      	ldrb	r2, [r2, #0]
 8010a20:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a26:	1c5a      	adds	r2, r3, #1
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010a32:	b29b      	uxth	r3, r3
 8010a34:	3b01      	subs	r3, #1
 8010a36:	b29a      	uxth	r2, r3
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8010a3e:	e025      	b.n	8010a8c <HAL_SPI_Transmit+0x394>
 8010a40:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010a44:	f7f3 fb1a 	bl	800407c <HAL_GetTick>
 8010a48:	4602      	mov	r2, r0
 8010a4a:	697b      	ldr	r3, [r7, #20]
 8010a4c:	1ad3      	subs	r3, r2, r3
 8010a4e:	683a      	ldr	r2, [r7, #0]
 8010a50:	429a      	cmp	r2, r3
 8010a52:	d803      	bhi.n	8010a5c <HAL_SPI_Transmit+0x364>
 8010a54:	683b      	ldr	r3, [r7, #0]
 8010a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a5a:	d102      	bne.n	8010a62 <HAL_SPI_Transmit+0x36a>
 8010a5c:	683b      	ldr	r3, [r7, #0]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d114      	bne.n	8010a8c <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010a62:	68f8      	ldr	r0, [r7, #12]
 8010a64:	f000 f844 	bl	8010af0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	2200      	movs	r2, #0
 8010a6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010a76:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	2201      	movs	r2, #1
 8010a84:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8010a88:	2303      	movs	r3, #3
 8010a8a:	e02c      	b.n	8010ae6 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010a92:	b29b      	uxth	r3, r3
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	f47f af79 	bne.w	801098c <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8010a9a:	697b      	ldr	r3, [r7, #20]
 8010a9c:	9300      	str	r3, [sp, #0]
 8010a9e:	683b      	ldr	r3, [r7, #0]
 8010aa0:	2200      	movs	r2, #0
 8010aa2:	2108      	movs	r1, #8
 8010aa4:	68f8      	ldr	r0, [r7, #12]
 8010aa6:	f000 f8c3 	bl	8010c30 <SPI_WaitOnFlagUntilTimeout>
 8010aaa:	4603      	mov	r3, r0
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d007      	beq.n	8010ac0 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010ab6:	f043 0220 	orr.w	r2, r3, #32
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8010ac0:	68f8      	ldr	r0, [r7, #12]
 8010ac2:	f000 f815 	bl	8010af0 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	2200      	movs	r2, #0
 8010aca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	2201      	movs	r2, #1
 8010ad2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d001      	beq.n	8010ae4 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 8010ae0:	2301      	movs	r3, #1
 8010ae2:	e000      	b.n	8010ae6 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 8010ae4:	7efb      	ldrb	r3, [r7, #27]
}
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	3720      	adds	r7, #32
 8010aea:	46bd      	mov	sp, r7
 8010aec:	bd80      	pop	{r7, pc}
 8010aee:	bf00      	nop

08010af0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8010af0:	b480      	push	{r7}
 8010af2:	b085      	sub	sp, #20
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	695b      	ldr	r3, [r3, #20]
 8010afe:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	699a      	ldr	r2, [r3, #24]
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	f042 0208 	orr.w	r2, r2, #8
 8010b0e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	699a      	ldr	r2, [r3, #24]
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	f042 0210 	orr.w	r2, r2, #16
 8010b1e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	681a      	ldr	r2, [r3, #0]
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	f022 0201 	bic.w	r2, r2, #1
 8010b2e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	6919      	ldr	r1, [r3, #16]
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	681a      	ldr	r2, [r3, #0]
 8010b3a:	4b3c      	ldr	r3, [pc, #240]	; (8010c2c <SPI_CloseTransfer+0x13c>)
 8010b3c:	400b      	ands	r3, r1
 8010b3e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	689a      	ldr	r2, [r3, #8]
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8010b4e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010b56:	b2db      	uxtb	r3, r3
 8010b58:	2b04      	cmp	r3, #4
 8010b5a:	d014      	beq.n	8010b86 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	f003 0320 	and.w	r3, r3, #32
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d00f      	beq.n	8010b86 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010b6c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	699a      	ldr	r2, [r3, #24]
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	f042 0220 	orr.w	r2, r2, #32
 8010b84:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010b8c:	b2db      	uxtb	r3, r3
 8010b8e:	2b03      	cmp	r3, #3
 8010b90:	d014      	beq.n	8010bbc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d00f      	beq.n	8010bbc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010ba2:	f043 0204 	orr.w	r2, r3, #4
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	699a      	ldr	r2, [r3, #24]
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010bba:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d00f      	beq.n	8010be6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010bcc:	f043 0201 	orr.w	r2, r3, #1
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	699a      	ldr	r2, [r3, #24]
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010be4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d00f      	beq.n	8010c10 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010bf6:	f043 0208 	orr.w	r2, r3, #8
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	699a      	ldr	r2, [r3, #24]
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010c0e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	2200      	movs	r2, #0
 8010c14:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	2200      	movs	r2, #0
 8010c1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8010c20:	bf00      	nop
 8010c22:	3714      	adds	r7, #20
 8010c24:	46bd      	mov	sp, r7
 8010c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c2a:	4770      	bx	lr
 8010c2c:	fffffc90 	.word	0xfffffc90

08010c30 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8010c30:	b580      	push	{r7, lr}
 8010c32:	b084      	sub	sp, #16
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	60f8      	str	r0, [r7, #12]
 8010c38:	60b9      	str	r1, [r7, #8]
 8010c3a:	603b      	str	r3, [r7, #0]
 8010c3c:	4613      	mov	r3, r2
 8010c3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8010c40:	e010      	b.n	8010c64 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010c42:	f7f3 fa1b 	bl	800407c <HAL_GetTick>
 8010c46:	4602      	mov	r2, r0
 8010c48:	69bb      	ldr	r3, [r7, #24]
 8010c4a:	1ad3      	subs	r3, r2, r3
 8010c4c:	683a      	ldr	r2, [r7, #0]
 8010c4e:	429a      	cmp	r2, r3
 8010c50:	d803      	bhi.n	8010c5a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8010c52:	683b      	ldr	r3, [r7, #0]
 8010c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c58:	d102      	bne.n	8010c60 <SPI_WaitOnFlagUntilTimeout+0x30>
 8010c5a:	683b      	ldr	r3, [r7, #0]
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d101      	bne.n	8010c64 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8010c60:	2303      	movs	r3, #3
 8010c62:	e00f      	b.n	8010c84 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	695a      	ldr	r2, [r3, #20]
 8010c6a:	68bb      	ldr	r3, [r7, #8]
 8010c6c:	4013      	ands	r3, r2
 8010c6e:	68ba      	ldr	r2, [r7, #8]
 8010c70:	429a      	cmp	r2, r3
 8010c72:	bf0c      	ite	eq
 8010c74:	2301      	moveq	r3, #1
 8010c76:	2300      	movne	r3, #0
 8010c78:	b2db      	uxtb	r3, r3
 8010c7a:	461a      	mov	r2, r3
 8010c7c:	79fb      	ldrb	r3, [r7, #7]
 8010c7e:	429a      	cmp	r2, r3
 8010c80:	d0df      	beq.n	8010c42 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8010c82:	2300      	movs	r3, #0
}
 8010c84:	4618      	mov	r0, r3
 8010c86:	3710      	adds	r7, #16
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	bd80      	pop	{r7, pc}

08010c8c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8010c8c:	b480      	push	{r7}
 8010c8e:	b085      	sub	sp, #20
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c98:	095b      	lsrs	r3, r3, #5
 8010c9a:	3301      	adds	r3, #1
 8010c9c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	68db      	ldr	r3, [r3, #12]
 8010ca2:	3301      	adds	r3, #1
 8010ca4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8010ca6:	68bb      	ldr	r3, [r7, #8]
 8010ca8:	3307      	adds	r3, #7
 8010caa:	08db      	lsrs	r3, r3, #3
 8010cac:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8010cae:	68bb      	ldr	r3, [r7, #8]
 8010cb0:	68fa      	ldr	r2, [r7, #12]
 8010cb2:	fb02 f303 	mul.w	r3, r2, r3
}
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	3714      	adds	r7, #20
 8010cba:	46bd      	mov	sp, r7
 8010cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc0:	4770      	bx	lr

08010cc2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010cc2:	b580      	push	{r7, lr}
 8010cc4:	b082      	sub	sp, #8
 8010cc6:	af00      	add	r7, sp, #0
 8010cc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d101      	bne.n	8010cd4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010cd0:	2301      	movs	r3, #1
 8010cd2:	e049      	b.n	8010d68 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010cda:	b2db      	uxtb	r3, r3
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d106      	bne.n	8010cee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	2200      	movs	r2, #0
 8010ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010ce8:	6878      	ldr	r0, [r7, #4]
 8010cea:	f7f2 fe61 	bl	80039b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	2202      	movs	r2, #2
 8010cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	681a      	ldr	r2, [r3, #0]
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	3304      	adds	r3, #4
 8010cfe:	4619      	mov	r1, r3
 8010d00:	4610      	mov	r0, r2
 8010d02:	f000 faf7 	bl	80112f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	2201      	movs	r2, #1
 8010d0a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	2201      	movs	r2, #1
 8010d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	2201      	movs	r2, #1
 8010d1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	2201      	movs	r2, #1
 8010d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	2201      	movs	r2, #1
 8010d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	2201      	movs	r2, #1
 8010d32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	2201      	movs	r2, #1
 8010d3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	2201      	movs	r2, #1
 8010d42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	2201      	movs	r2, #1
 8010d4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	2201      	movs	r2, #1
 8010d52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	2201      	movs	r2, #1
 8010d5a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	2201      	movs	r2, #1
 8010d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010d66:	2300      	movs	r3, #0
}
 8010d68:	4618      	mov	r0, r3
 8010d6a:	3708      	adds	r7, #8
 8010d6c:	46bd      	mov	sp, r7
 8010d6e:	bd80      	pop	{r7, pc}

08010d70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010d70:	b480      	push	{r7}
 8010d72:	b085      	sub	sp, #20
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010d7e:	b2db      	uxtb	r3, r3
 8010d80:	2b01      	cmp	r3, #1
 8010d82:	d001      	beq.n	8010d88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010d84:	2301      	movs	r3, #1
 8010d86:	e054      	b.n	8010e32 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	2202      	movs	r2, #2
 8010d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	68da      	ldr	r2, [r3, #12]
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	f042 0201 	orr.w	r2, r2, #1
 8010d9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	4a26      	ldr	r2, [pc, #152]	; (8010e40 <HAL_TIM_Base_Start_IT+0xd0>)
 8010da6:	4293      	cmp	r3, r2
 8010da8:	d022      	beq.n	8010df0 <HAL_TIM_Base_Start_IT+0x80>
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010db2:	d01d      	beq.n	8010df0 <HAL_TIM_Base_Start_IT+0x80>
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	4a22      	ldr	r2, [pc, #136]	; (8010e44 <HAL_TIM_Base_Start_IT+0xd4>)
 8010dba:	4293      	cmp	r3, r2
 8010dbc:	d018      	beq.n	8010df0 <HAL_TIM_Base_Start_IT+0x80>
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	4a21      	ldr	r2, [pc, #132]	; (8010e48 <HAL_TIM_Base_Start_IT+0xd8>)
 8010dc4:	4293      	cmp	r3, r2
 8010dc6:	d013      	beq.n	8010df0 <HAL_TIM_Base_Start_IT+0x80>
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	4a1f      	ldr	r2, [pc, #124]	; (8010e4c <HAL_TIM_Base_Start_IT+0xdc>)
 8010dce:	4293      	cmp	r3, r2
 8010dd0:	d00e      	beq.n	8010df0 <HAL_TIM_Base_Start_IT+0x80>
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	4a1e      	ldr	r2, [pc, #120]	; (8010e50 <HAL_TIM_Base_Start_IT+0xe0>)
 8010dd8:	4293      	cmp	r3, r2
 8010dda:	d009      	beq.n	8010df0 <HAL_TIM_Base_Start_IT+0x80>
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	4a1c      	ldr	r2, [pc, #112]	; (8010e54 <HAL_TIM_Base_Start_IT+0xe4>)
 8010de2:	4293      	cmp	r3, r2
 8010de4:	d004      	beq.n	8010df0 <HAL_TIM_Base_Start_IT+0x80>
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	4a1b      	ldr	r2, [pc, #108]	; (8010e58 <HAL_TIM_Base_Start_IT+0xe8>)
 8010dec:	4293      	cmp	r3, r2
 8010dee:	d115      	bne.n	8010e1c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	689a      	ldr	r2, [r3, #8]
 8010df6:	4b19      	ldr	r3, [pc, #100]	; (8010e5c <HAL_TIM_Base_Start_IT+0xec>)
 8010df8:	4013      	ands	r3, r2
 8010dfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	2b06      	cmp	r3, #6
 8010e00:	d015      	beq.n	8010e2e <HAL_TIM_Base_Start_IT+0xbe>
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010e08:	d011      	beq.n	8010e2e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	681a      	ldr	r2, [r3, #0]
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	f042 0201 	orr.w	r2, r2, #1
 8010e18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010e1a:	e008      	b.n	8010e2e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	681a      	ldr	r2, [r3, #0]
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	f042 0201 	orr.w	r2, r2, #1
 8010e2a:	601a      	str	r2, [r3, #0]
 8010e2c:	e000      	b.n	8010e30 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010e2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010e30:	2300      	movs	r3, #0
}
 8010e32:	4618      	mov	r0, r3
 8010e34:	3714      	adds	r7, #20
 8010e36:	46bd      	mov	sp, r7
 8010e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e3c:	4770      	bx	lr
 8010e3e:	bf00      	nop
 8010e40:	40010000 	.word	0x40010000
 8010e44:	40000400 	.word	0x40000400
 8010e48:	40000800 	.word	0x40000800
 8010e4c:	40000c00 	.word	0x40000c00
 8010e50:	40010400 	.word	0x40010400
 8010e54:	40001800 	.word	0x40001800
 8010e58:	40014000 	.word	0x40014000
 8010e5c:	00010007 	.word	0x00010007

08010e60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010e60:	b580      	push	{r7, lr}
 8010e62:	b082      	sub	sp, #8
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	691b      	ldr	r3, [r3, #16]
 8010e6e:	f003 0302 	and.w	r3, r3, #2
 8010e72:	2b02      	cmp	r3, #2
 8010e74:	d122      	bne.n	8010ebc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	68db      	ldr	r3, [r3, #12]
 8010e7c:	f003 0302 	and.w	r3, r3, #2
 8010e80:	2b02      	cmp	r3, #2
 8010e82:	d11b      	bne.n	8010ebc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	f06f 0202 	mvn.w	r2, #2
 8010e8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	2201      	movs	r2, #1
 8010e92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	699b      	ldr	r3, [r3, #24]
 8010e9a:	f003 0303 	and.w	r3, r3, #3
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d003      	beq.n	8010eaa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010ea2:	6878      	ldr	r0, [r7, #4]
 8010ea4:	f000 fa08 	bl	80112b8 <HAL_TIM_IC_CaptureCallback>
 8010ea8:	e005      	b.n	8010eb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010eaa:	6878      	ldr	r0, [r7, #4]
 8010eac:	f000 f9fa 	bl	80112a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010eb0:	6878      	ldr	r0, [r7, #4]
 8010eb2:	f000 fa0b 	bl	80112cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	2200      	movs	r2, #0
 8010eba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	691b      	ldr	r3, [r3, #16]
 8010ec2:	f003 0304 	and.w	r3, r3, #4
 8010ec6:	2b04      	cmp	r3, #4
 8010ec8:	d122      	bne.n	8010f10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	68db      	ldr	r3, [r3, #12]
 8010ed0:	f003 0304 	and.w	r3, r3, #4
 8010ed4:	2b04      	cmp	r3, #4
 8010ed6:	d11b      	bne.n	8010f10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	f06f 0204 	mvn.w	r2, #4
 8010ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	2202      	movs	r2, #2
 8010ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	699b      	ldr	r3, [r3, #24]
 8010eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d003      	beq.n	8010efe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010ef6:	6878      	ldr	r0, [r7, #4]
 8010ef8:	f000 f9de 	bl	80112b8 <HAL_TIM_IC_CaptureCallback>
 8010efc:	e005      	b.n	8010f0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010efe:	6878      	ldr	r0, [r7, #4]
 8010f00:	f000 f9d0 	bl	80112a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010f04:	6878      	ldr	r0, [r7, #4]
 8010f06:	f000 f9e1 	bl	80112cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	2200      	movs	r2, #0
 8010f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	691b      	ldr	r3, [r3, #16]
 8010f16:	f003 0308 	and.w	r3, r3, #8
 8010f1a:	2b08      	cmp	r3, #8
 8010f1c:	d122      	bne.n	8010f64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	68db      	ldr	r3, [r3, #12]
 8010f24:	f003 0308 	and.w	r3, r3, #8
 8010f28:	2b08      	cmp	r3, #8
 8010f2a:	d11b      	bne.n	8010f64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	f06f 0208 	mvn.w	r2, #8
 8010f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	2204      	movs	r2, #4
 8010f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	69db      	ldr	r3, [r3, #28]
 8010f42:	f003 0303 	and.w	r3, r3, #3
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d003      	beq.n	8010f52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010f4a:	6878      	ldr	r0, [r7, #4]
 8010f4c:	f000 f9b4 	bl	80112b8 <HAL_TIM_IC_CaptureCallback>
 8010f50:	e005      	b.n	8010f5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010f52:	6878      	ldr	r0, [r7, #4]
 8010f54:	f000 f9a6 	bl	80112a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010f58:	6878      	ldr	r0, [r7, #4]
 8010f5a:	f000 f9b7 	bl	80112cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	2200      	movs	r2, #0
 8010f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	691b      	ldr	r3, [r3, #16]
 8010f6a:	f003 0310 	and.w	r3, r3, #16
 8010f6e:	2b10      	cmp	r3, #16
 8010f70:	d122      	bne.n	8010fb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	68db      	ldr	r3, [r3, #12]
 8010f78:	f003 0310 	and.w	r3, r3, #16
 8010f7c:	2b10      	cmp	r3, #16
 8010f7e:	d11b      	bne.n	8010fb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	f06f 0210 	mvn.w	r2, #16
 8010f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	2208      	movs	r2, #8
 8010f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	69db      	ldr	r3, [r3, #28]
 8010f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d003      	beq.n	8010fa6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010f9e:	6878      	ldr	r0, [r7, #4]
 8010fa0:	f000 f98a 	bl	80112b8 <HAL_TIM_IC_CaptureCallback>
 8010fa4:	e005      	b.n	8010fb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010fa6:	6878      	ldr	r0, [r7, #4]
 8010fa8:	f000 f97c 	bl	80112a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010fac:	6878      	ldr	r0, [r7, #4]
 8010fae:	f000 f98d 	bl	80112cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	2200      	movs	r2, #0
 8010fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	691b      	ldr	r3, [r3, #16]
 8010fbe:	f003 0301 	and.w	r3, r3, #1
 8010fc2:	2b01      	cmp	r3, #1
 8010fc4:	d10e      	bne.n	8010fe4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	68db      	ldr	r3, [r3, #12]
 8010fcc:	f003 0301 	and.w	r3, r3, #1
 8010fd0:	2b01      	cmp	r3, #1
 8010fd2:	d107      	bne.n	8010fe4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	f06f 0201 	mvn.w	r2, #1
 8010fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010fde:	6878      	ldr	r0, [r7, #4]
 8010fe0:	f000 f956 	bl	8011290 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	691b      	ldr	r3, [r3, #16]
 8010fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010fee:	2b80      	cmp	r3, #128	; 0x80
 8010ff0:	d10e      	bne.n	8011010 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	68db      	ldr	r3, [r3, #12]
 8010ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ffc:	2b80      	cmp	r3, #128	; 0x80
 8010ffe:	d107      	bne.n	8011010 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8011008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801100a:	6878      	ldr	r0, [r7, #4]
 801100c:	f000 fb42 	bl	8011694 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	691b      	ldr	r3, [r3, #16]
 8011016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801101a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801101e:	d10e      	bne.n	801103e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	68db      	ldr	r3, [r3, #12]
 8011026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801102a:	2b80      	cmp	r3, #128	; 0x80
 801102c:	d107      	bne.n	801103e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8011036:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8011038:	6878      	ldr	r0, [r7, #4]
 801103a:	f000 fb35 	bl	80116a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	691b      	ldr	r3, [r3, #16]
 8011044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011048:	2b40      	cmp	r3, #64	; 0x40
 801104a:	d10e      	bne.n	801106a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	68db      	ldr	r3, [r3, #12]
 8011052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011056:	2b40      	cmp	r3, #64	; 0x40
 8011058:	d107      	bne.n	801106a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8011062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8011064:	6878      	ldr	r0, [r7, #4]
 8011066:	f000 f93b 	bl	80112e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	691b      	ldr	r3, [r3, #16]
 8011070:	f003 0320 	and.w	r3, r3, #32
 8011074:	2b20      	cmp	r3, #32
 8011076:	d10e      	bne.n	8011096 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	68db      	ldr	r3, [r3, #12]
 801107e:	f003 0320 	and.w	r3, r3, #32
 8011082:	2b20      	cmp	r3, #32
 8011084:	d107      	bne.n	8011096 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	f06f 0220 	mvn.w	r2, #32
 801108e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8011090:	6878      	ldr	r0, [r7, #4]
 8011092:	f000 faf5 	bl	8011680 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8011096:	bf00      	nop
 8011098:	3708      	adds	r7, #8
 801109a:	46bd      	mov	sp, r7
 801109c:	bd80      	pop	{r7, pc}
	...

080110a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80110a0:	b580      	push	{r7, lr}
 80110a2:	b084      	sub	sp, #16
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	6078      	str	r0, [r7, #4]
 80110a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80110aa:	2300      	movs	r3, #0
 80110ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80110b4:	2b01      	cmp	r3, #1
 80110b6:	d101      	bne.n	80110bc <HAL_TIM_ConfigClockSource+0x1c>
 80110b8:	2302      	movs	r3, #2
 80110ba:	e0dc      	b.n	8011276 <HAL_TIM_ConfigClockSource+0x1d6>
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	2201      	movs	r2, #1
 80110c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	2202      	movs	r2, #2
 80110c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	689b      	ldr	r3, [r3, #8]
 80110d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80110d4:	68ba      	ldr	r2, [r7, #8]
 80110d6:	4b6a      	ldr	r3, [pc, #424]	; (8011280 <HAL_TIM_ConfigClockSource+0x1e0>)
 80110d8:	4013      	ands	r3, r2
 80110da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80110dc:	68bb      	ldr	r3, [r7, #8]
 80110de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80110e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	68ba      	ldr	r2, [r7, #8]
 80110ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80110ec:	683b      	ldr	r3, [r7, #0]
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	4a64      	ldr	r2, [pc, #400]	; (8011284 <HAL_TIM_ConfigClockSource+0x1e4>)
 80110f2:	4293      	cmp	r3, r2
 80110f4:	f000 80a9 	beq.w	801124a <HAL_TIM_ConfigClockSource+0x1aa>
 80110f8:	4a62      	ldr	r2, [pc, #392]	; (8011284 <HAL_TIM_ConfigClockSource+0x1e4>)
 80110fa:	4293      	cmp	r3, r2
 80110fc:	f200 80ae 	bhi.w	801125c <HAL_TIM_ConfigClockSource+0x1bc>
 8011100:	4a61      	ldr	r2, [pc, #388]	; (8011288 <HAL_TIM_ConfigClockSource+0x1e8>)
 8011102:	4293      	cmp	r3, r2
 8011104:	f000 80a1 	beq.w	801124a <HAL_TIM_ConfigClockSource+0x1aa>
 8011108:	4a5f      	ldr	r2, [pc, #380]	; (8011288 <HAL_TIM_ConfigClockSource+0x1e8>)
 801110a:	4293      	cmp	r3, r2
 801110c:	f200 80a6 	bhi.w	801125c <HAL_TIM_ConfigClockSource+0x1bc>
 8011110:	4a5e      	ldr	r2, [pc, #376]	; (801128c <HAL_TIM_ConfigClockSource+0x1ec>)
 8011112:	4293      	cmp	r3, r2
 8011114:	f000 8099 	beq.w	801124a <HAL_TIM_ConfigClockSource+0x1aa>
 8011118:	4a5c      	ldr	r2, [pc, #368]	; (801128c <HAL_TIM_ConfigClockSource+0x1ec>)
 801111a:	4293      	cmp	r3, r2
 801111c:	f200 809e 	bhi.w	801125c <HAL_TIM_ConfigClockSource+0x1bc>
 8011120:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011124:	f000 8091 	beq.w	801124a <HAL_TIM_ConfigClockSource+0x1aa>
 8011128:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 801112c:	f200 8096 	bhi.w	801125c <HAL_TIM_ConfigClockSource+0x1bc>
 8011130:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011134:	f000 8089 	beq.w	801124a <HAL_TIM_ConfigClockSource+0x1aa>
 8011138:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801113c:	f200 808e 	bhi.w	801125c <HAL_TIM_ConfigClockSource+0x1bc>
 8011140:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011144:	d03e      	beq.n	80111c4 <HAL_TIM_ConfigClockSource+0x124>
 8011146:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801114a:	f200 8087 	bhi.w	801125c <HAL_TIM_ConfigClockSource+0x1bc>
 801114e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011152:	f000 8086 	beq.w	8011262 <HAL_TIM_ConfigClockSource+0x1c2>
 8011156:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801115a:	d87f      	bhi.n	801125c <HAL_TIM_ConfigClockSource+0x1bc>
 801115c:	2b70      	cmp	r3, #112	; 0x70
 801115e:	d01a      	beq.n	8011196 <HAL_TIM_ConfigClockSource+0xf6>
 8011160:	2b70      	cmp	r3, #112	; 0x70
 8011162:	d87b      	bhi.n	801125c <HAL_TIM_ConfigClockSource+0x1bc>
 8011164:	2b60      	cmp	r3, #96	; 0x60
 8011166:	d050      	beq.n	801120a <HAL_TIM_ConfigClockSource+0x16a>
 8011168:	2b60      	cmp	r3, #96	; 0x60
 801116a:	d877      	bhi.n	801125c <HAL_TIM_ConfigClockSource+0x1bc>
 801116c:	2b50      	cmp	r3, #80	; 0x50
 801116e:	d03c      	beq.n	80111ea <HAL_TIM_ConfigClockSource+0x14a>
 8011170:	2b50      	cmp	r3, #80	; 0x50
 8011172:	d873      	bhi.n	801125c <HAL_TIM_ConfigClockSource+0x1bc>
 8011174:	2b40      	cmp	r3, #64	; 0x40
 8011176:	d058      	beq.n	801122a <HAL_TIM_ConfigClockSource+0x18a>
 8011178:	2b40      	cmp	r3, #64	; 0x40
 801117a:	d86f      	bhi.n	801125c <HAL_TIM_ConfigClockSource+0x1bc>
 801117c:	2b30      	cmp	r3, #48	; 0x30
 801117e:	d064      	beq.n	801124a <HAL_TIM_ConfigClockSource+0x1aa>
 8011180:	2b30      	cmp	r3, #48	; 0x30
 8011182:	d86b      	bhi.n	801125c <HAL_TIM_ConfigClockSource+0x1bc>
 8011184:	2b20      	cmp	r3, #32
 8011186:	d060      	beq.n	801124a <HAL_TIM_ConfigClockSource+0x1aa>
 8011188:	2b20      	cmp	r3, #32
 801118a:	d867      	bhi.n	801125c <HAL_TIM_ConfigClockSource+0x1bc>
 801118c:	2b00      	cmp	r3, #0
 801118e:	d05c      	beq.n	801124a <HAL_TIM_ConfigClockSource+0x1aa>
 8011190:	2b10      	cmp	r3, #16
 8011192:	d05a      	beq.n	801124a <HAL_TIM_ConfigClockSource+0x1aa>
 8011194:	e062      	b.n	801125c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801119a:	683b      	ldr	r3, [r7, #0]
 801119c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801119e:	683b      	ldr	r3, [r7, #0]
 80111a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80111a2:	683b      	ldr	r3, [r7, #0]
 80111a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80111a6:	f000 f9bd 	bl	8011524 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	689b      	ldr	r3, [r3, #8]
 80111b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80111b2:	68bb      	ldr	r3, [r7, #8]
 80111b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80111b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	68ba      	ldr	r2, [r7, #8]
 80111c0:	609a      	str	r2, [r3, #8]
      break;
 80111c2:	e04f      	b.n	8011264 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80111c8:	683b      	ldr	r3, [r7, #0]
 80111ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80111cc:	683b      	ldr	r3, [r7, #0]
 80111ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80111d0:	683b      	ldr	r3, [r7, #0]
 80111d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80111d4:	f000 f9a6 	bl	8011524 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	689a      	ldr	r2, [r3, #8]
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80111e6:	609a      	str	r2, [r3, #8]
      break;
 80111e8:	e03c      	b.n	8011264 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80111ee:	683b      	ldr	r3, [r7, #0]
 80111f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80111f2:	683b      	ldr	r3, [r7, #0]
 80111f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80111f6:	461a      	mov	r2, r3
 80111f8:	f000 f916 	bl	8011428 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	2150      	movs	r1, #80	; 0x50
 8011202:	4618      	mov	r0, r3
 8011204:	f000 f970 	bl	80114e8 <TIM_ITRx_SetConfig>
      break;
 8011208:	e02c      	b.n	8011264 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801120e:	683b      	ldr	r3, [r7, #0]
 8011210:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8011212:	683b      	ldr	r3, [r7, #0]
 8011214:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8011216:	461a      	mov	r2, r3
 8011218:	f000 f935 	bl	8011486 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	2160      	movs	r1, #96	; 0x60
 8011222:	4618      	mov	r0, r3
 8011224:	f000 f960 	bl	80114e8 <TIM_ITRx_SetConfig>
      break;
 8011228:	e01c      	b.n	8011264 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801122e:	683b      	ldr	r3, [r7, #0]
 8011230:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8011232:	683b      	ldr	r3, [r7, #0]
 8011234:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011236:	461a      	mov	r2, r3
 8011238:	f000 f8f6 	bl	8011428 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	2140      	movs	r1, #64	; 0x40
 8011242:	4618      	mov	r0, r3
 8011244:	f000 f950 	bl	80114e8 <TIM_ITRx_SetConfig>
      break;
 8011248:	e00c      	b.n	8011264 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	681a      	ldr	r2, [r3, #0]
 801124e:	683b      	ldr	r3, [r7, #0]
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	4619      	mov	r1, r3
 8011254:	4610      	mov	r0, r2
 8011256:	f000 f947 	bl	80114e8 <TIM_ITRx_SetConfig>
      break;
 801125a:	e003      	b.n	8011264 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 801125c:	2301      	movs	r3, #1
 801125e:	73fb      	strb	r3, [r7, #15]
      break;
 8011260:	e000      	b.n	8011264 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8011262:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	2201      	movs	r2, #1
 8011268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	2200      	movs	r2, #0
 8011270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8011274:	7bfb      	ldrb	r3, [r7, #15]
}
 8011276:	4618      	mov	r0, r3
 8011278:	3710      	adds	r7, #16
 801127a:	46bd      	mov	sp, r7
 801127c:	bd80      	pop	{r7, pc}
 801127e:	bf00      	nop
 8011280:	ffceff88 	.word	0xffceff88
 8011284:	00100040 	.word	0x00100040
 8011288:	00100030 	.word	0x00100030
 801128c:	00100020 	.word	0x00100020

08011290 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011290:	b480      	push	{r7}
 8011292:	b083      	sub	sp, #12
 8011294:	af00      	add	r7, sp, #0
 8011296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8011298:	bf00      	nop
 801129a:	370c      	adds	r7, #12
 801129c:	46bd      	mov	sp, r7
 801129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a2:	4770      	bx	lr

080112a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80112a4:	b480      	push	{r7}
 80112a6:	b083      	sub	sp, #12
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80112ac:	bf00      	nop
 80112ae:	370c      	adds	r7, #12
 80112b0:	46bd      	mov	sp, r7
 80112b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b6:	4770      	bx	lr

080112b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80112b8:	b480      	push	{r7}
 80112ba:	b083      	sub	sp, #12
 80112bc:	af00      	add	r7, sp, #0
 80112be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80112c0:	bf00      	nop
 80112c2:	370c      	adds	r7, #12
 80112c4:	46bd      	mov	sp, r7
 80112c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ca:	4770      	bx	lr

080112cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80112cc:	b480      	push	{r7}
 80112ce:	b083      	sub	sp, #12
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80112d4:	bf00      	nop
 80112d6:	370c      	adds	r7, #12
 80112d8:	46bd      	mov	sp, r7
 80112da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112de:	4770      	bx	lr

080112e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80112e0:	b480      	push	{r7}
 80112e2:	b083      	sub	sp, #12
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80112e8:	bf00      	nop
 80112ea:	370c      	adds	r7, #12
 80112ec:	46bd      	mov	sp, r7
 80112ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112f2:	4770      	bx	lr

080112f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80112f4:	b480      	push	{r7}
 80112f6:	b085      	sub	sp, #20
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	6078      	str	r0, [r7, #4]
 80112fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	4a40      	ldr	r2, [pc, #256]	; (8011408 <TIM_Base_SetConfig+0x114>)
 8011308:	4293      	cmp	r3, r2
 801130a:	d013      	beq.n	8011334 <TIM_Base_SetConfig+0x40>
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011312:	d00f      	beq.n	8011334 <TIM_Base_SetConfig+0x40>
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	4a3d      	ldr	r2, [pc, #244]	; (801140c <TIM_Base_SetConfig+0x118>)
 8011318:	4293      	cmp	r3, r2
 801131a:	d00b      	beq.n	8011334 <TIM_Base_SetConfig+0x40>
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	4a3c      	ldr	r2, [pc, #240]	; (8011410 <TIM_Base_SetConfig+0x11c>)
 8011320:	4293      	cmp	r3, r2
 8011322:	d007      	beq.n	8011334 <TIM_Base_SetConfig+0x40>
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	4a3b      	ldr	r2, [pc, #236]	; (8011414 <TIM_Base_SetConfig+0x120>)
 8011328:	4293      	cmp	r3, r2
 801132a:	d003      	beq.n	8011334 <TIM_Base_SetConfig+0x40>
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	4a3a      	ldr	r2, [pc, #232]	; (8011418 <TIM_Base_SetConfig+0x124>)
 8011330:	4293      	cmp	r3, r2
 8011332:	d108      	bne.n	8011346 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801133a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801133c:	683b      	ldr	r3, [r7, #0]
 801133e:	685b      	ldr	r3, [r3, #4]
 8011340:	68fa      	ldr	r2, [r7, #12]
 8011342:	4313      	orrs	r3, r2
 8011344:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	4a2f      	ldr	r2, [pc, #188]	; (8011408 <TIM_Base_SetConfig+0x114>)
 801134a:	4293      	cmp	r3, r2
 801134c:	d01f      	beq.n	801138e <TIM_Base_SetConfig+0x9a>
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011354:	d01b      	beq.n	801138e <TIM_Base_SetConfig+0x9a>
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	4a2c      	ldr	r2, [pc, #176]	; (801140c <TIM_Base_SetConfig+0x118>)
 801135a:	4293      	cmp	r3, r2
 801135c:	d017      	beq.n	801138e <TIM_Base_SetConfig+0x9a>
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	4a2b      	ldr	r2, [pc, #172]	; (8011410 <TIM_Base_SetConfig+0x11c>)
 8011362:	4293      	cmp	r3, r2
 8011364:	d013      	beq.n	801138e <TIM_Base_SetConfig+0x9a>
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	4a2a      	ldr	r2, [pc, #168]	; (8011414 <TIM_Base_SetConfig+0x120>)
 801136a:	4293      	cmp	r3, r2
 801136c:	d00f      	beq.n	801138e <TIM_Base_SetConfig+0x9a>
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	4a29      	ldr	r2, [pc, #164]	; (8011418 <TIM_Base_SetConfig+0x124>)
 8011372:	4293      	cmp	r3, r2
 8011374:	d00b      	beq.n	801138e <TIM_Base_SetConfig+0x9a>
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	4a28      	ldr	r2, [pc, #160]	; (801141c <TIM_Base_SetConfig+0x128>)
 801137a:	4293      	cmp	r3, r2
 801137c:	d007      	beq.n	801138e <TIM_Base_SetConfig+0x9a>
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	4a27      	ldr	r2, [pc, #156]	; (8011420 <TIM_Base_SetConfig+0x12c>)
 8011382:	4293      	cmp	r3, r2
 8011384:	d003      	beq.n	801138e <TIM_Base_SetConfig+0x9a>
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	4a26      	ldr	r2, [pc, #152]	; (8011424 <TIM_Base_SetConfig+0x130>)
 801138a:	4293      	cmp	r3, r2
 801138c:	d108      	bne.n	80113a0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011394:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011396:	683b      	ldr	r3, [r7, #0]
 8011398:	68db      	ldr	r3, [r3, #12]
 801139a:	68fa      	ldr	r2, [r7, #12]
 801139c:	4313      	orrs	r3, r2
 801139e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80113a6:	683b      	ldr	r3, [r7, #0]
 80113a8:	695b      	ldr	r3, [r3, #20]
 80113aa:	4313      	orrs	r3, r2
 80113ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	68fa      	ldr	r2, [r7, #12]
 80113b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80113b4:	683b      	ldr	r3, [r7, #0]
 80113b6:	689a      	ldr	r2, [r3, #8]
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80113bc:	683b      	ldr	r3, [r7, #0]
 80113be:	681a      	ldr	r2, [r3, #0]
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	4a10      	ldr	r2, [pc, #64]	; (8011408 <TIM_Base_SetConfig+0x114>)
 80113c8:	4293      	cmp	r3, r2
 80113ca:	d00f      	beq.n	80113ec <TIM_Base_SetConfig+0xf8>
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	4a12      	ldr	r2, [pc, #72]	; (8011418 <TIM_Base_SetConfig+0x124>)
 80113d0:	4293      	cmp	r3, r2
 80113d2:	d00b      	beq.n	80113ec <TIM_Base_SetConfig+0xf8>
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	4a11      	ldr	r2, [pc, #68]	; (801141c <TIM_Base_SetConfig+0x128>)
 80113d8:	4293      	cmp	r3, r2
 80113da:	d007      	beq.n	80113ec <TIM_Base_SetConfig+0xf8>
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	4a10      	ldr	r2, [pc, #64]	; (8011420 <TIM_Base_SetConfig+0x12c>)
 80113e0:	4293      	cmp	r3, r2
 80113e2:	d003      	beq.n	80113ec <TIM_Base_SetConfig+0xf8>
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	4a0f      	ldr	r2, [pc, #60]	; (8011424 <TIM_Base_SetConfig+0x130>)
 80113e8:	4293      	cmp	r3, r2
 80113ea:	d103      	bne.n	80113f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80113ec:	683b      	ldr	r3, [r7, #0]
 80113ee:	691a      	ldr	r2, [r3, #16]
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	2201      	movs	r2, #1
 80113f8:	615a      	str	r2, [r3, #20]
}
 80113fa:	bf00      	nop
 80113fc:	3714      	adds	r7, #20
 80113fe:	46bd      	mov	sp, r7
 8011400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011404:	4770      	bx	lr
 8011406:	bf00      	nop
 8011408:	40010000 	.word	0x40010000
 801140c:	40000400 	.word	0x40000400
 8011410:	40000800 	.word	0x40000800
 8011414:	40000c00 	.word	0x40000c00
 8011418:	40010400 	.word	0x40010400
 801141c:	40014000 	.word	0x40014000
 8011420:	40014400 	.word	0x40014400
 8011424:	40014800 	.word	0x40014800

08011428 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011428:	b480      	push	{r7}
 801142a:	b087      	sub	sp, #28
 801142c:	af00      	add	r7, sp, #0
 801142e:	60f8      	str	r0, [r7, #12]
 8011430:	60b9      	str	r1, [r7, #8]
 8011432:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	6a1b      	ldr	r3, [r3, #32]
 8011438:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	6a1b      	ldr	r3, [r3, #32]
 801143e:	f023 0201 	bic.w	r2, r3, #1
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	699b      	ldr	r3, [r3, #24]
 801144a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801144c:	693b      	ldr	r3, [r7, #16]
 801144e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011452:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	011b      	lsls	r3, r3, #4
 8011458:	693a      	ldr	r2, [r7, #16]
 801145a:	4313      	orrs	r3, r2
 801145c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801145e:	697b      	ldr	r3, [r7, #20]
 8011460:	f023 030a 	bic.w	r3, r3, #10
 8011464:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8011466:	697a      	ldr	r2, [r7, #20]
 8011468:	68bb      	ldr	r3, [r7, #8]
 801146a:	4313      	orrs	r3, r2
 801146c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	693a      	ldr	r2, [r7, #16]
 8011472:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	697a      	ldr	r2, [r7, #20]
 8011478:	621a      	str	r2, [r3, #32]
}
 801147a:	bf00      	nop
 801147c:	371c      	adds	r7, #28
 801147e:	46bd      	mov	sp, r7
 8011480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011484:	4770      	bx	lr

08011486 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011486:	b480      	push	{r7}
 8011488:	b087      	sub	sp, #28
 801148a:	af00      	add	r7, sp, #0
 801148c:	60f8      	str	r0, [r7, #12]
 801148e:	60b9      	str	r1, [r7, #8]
 8011490:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	6a1b      	ldr	r3, [r3, #32]
 8011496:	f023 0210 	bic.w	r2, r3, #16
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	699b      	ldr	r3, [r3, #24]
 80114a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	6a1b      	ldr	r3, [r3, #32]
 80114a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80114aa:	697b      	ldr	r3, [r7, #20]
 80114ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80114b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	031b      	lsls	r3, r3, #12
 80114b6:	697a      	ldr	r2, [r7, #20]
 80114b8:	4313      	orrs	r3, r2
 80114ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80114bc:	693b      	ldr	r3, [r7, #16]
 80114be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80114c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80114c4:	68bb      	ldr	r3, [r7, #8]
 80114c6:	011b      	lsls	r3, r3, #4
 80114c8:	693a      	ldr	r2, [r7, #16]
 80114ca:	4313      	orrs	r3, r2
 80114cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	697a      	ldr	r2, [r7, #20]
 80114d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	693a      	ldr	r2, [r7, #16]
 80114d8:	621a      	str	r2, [r3, #32]
}
 80114da:	bf00      	nop
 80114dc:	371c      	adds	r7, #28
 80114de:	46bd      	mov	sp, r7
 80114e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e4:	4770      	bx	lr
	...

080114e8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80114e8:	b480      	push	{r7}
 80114ea:	b085      	sub	sp, #20
 80114ec:	af00      	add	r7, sp, #0
 80114ee:	6078      	str	r0, [r7, #4]
 80114f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	689b      	ldr	r3, [r3, #8]
 80114f6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80114f8:	68fa      	ldr	r2, [r7, #12]
 80114fa:	4b09      	ldr	r3, [pc, #36]	; (8011520 <TIM_ITRx_SetConfig+0x38>)
 80114fc:	4013      	ands	r3, r2
 80114fe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011500:	683a      	ldr	r2, [r7, #0]
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	4313      	orrs	r3, r2
 8011506:	f043 0307 	orr.w	r3, r3, #7
 801150a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	68fa      	ldr	r2, [r7, #12]
 8011510:	609a      	str	r2, [r3, #8]
}
 8011512:	bf00      	nop
 8011514:	3714      	adds	r7, #20
 8011516:	46bd      	mov	sp, r7
 8011518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801151c:	4770      	bx	lr
 801151e:	bf00      	nop
 8011520:	ffcfff8f 	.word	0xffcfff8f

08011524 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011524:	b480      	push	{r7}
 8011526:	b087      	sub	sp, #28
 8011528:	af00      	add	r7, sp, #0
 801152a:	60f8      	str	r0, [r7, #12]
 801152c:	60b9      	str	r1, [r7, #8]
 801152e:	607a      	str	r2, [r7, #4]
 8011530:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	689b      	ldr	r3, [r3, #8]
 8011536:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011538:	697b      	ldr	r3, [r7, #20]
 801153a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801153e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011540:	683b      	ldr	r3, [r7, #0]
 8011542:	021a      	lsls	r2, r3, #8
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	431a      	orrs	r2, r3
 8011548:	68bb      	ldr	r3, [r7, #8]
 801154a:	4313      	orrs	r3, r2
 801154c:	697a      	ldr	r2, [r7, #20]
 801154e:	4313      	orrs	r3, r2
 8011550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	697a      	ldr	r2, [r7, #20]
 8011556:	609a      	str	r2, [r3, #8]
}
 8011558:	bf00      	nop
 801155a:	371c      	adds	r7, #28
 801155c:	46bd      	mov	sp, r7
 801155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011562:	4770      	bx	lr

08011564 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011564:	b480      	push	{r7}
 8011566:	b085      	sub	sp, #20
 8011568:	af00      	add	r7, sp, #0
 801156a:	6078      	str	r0, [r7, #4]
 801156c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011574:	2b01      	cmp	r3, #1
 8011576:	d101      	bne.n	801157c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011578:	2302      	movs	r3, #2
 801157a:	e06d      	b.n	8011658 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	2201      	movs	r2, #1
 8011580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	2202      	movs	r2, #2
 8011588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	685b      	ldr	r3, [r3, #4]
 8011592:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	689b      	ldr	r3, [r3, #8]
 801159a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	4a30      	ldr	r2, [pc, #192]	; (8011664 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80115a2:	4293      	cmp	r3, r2
 80115a4:	d004      	beq.n	80115b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	4a2f      	ldr	r2, [pc, #188]	; (8011668 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80115ac:	4293      	cmp	r3, r2
 80115ae:	d108      	bne.n	80115c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80115b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80115b8:	683b      	ldr	r3, [r7, #0]
 80115ba:	685b      	ldr	r3, [r3, #4]
 80115bc:	68fa      	ldr	r2, [r7, #12]
 80115be:	4313      	orrs	r3, r2
 80115c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80115c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80115ca:	683b      	ldr	r3, [r7, #0]
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	68fa      	ldr	r2, [r7, #12]
 80115d0:	4313      	orrs	r3, r2
 80115d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	68fa      	ldr	r2, [r7, #12]
 80115da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	4a20      	ldr	r2, [pc, #128]	; (8011664 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80115e2:	4293      	cmp	r3, r2
 80115e4:	d022      	beq.n	801162c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80115ee:	d01d      	beq.n	801162c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	4a1d      	ldr	r2, [pc, #116]	; (801166c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80115f6:	4293      	cmp	r3, r2
 80115f8:	d018      	beq.n	801162c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	4a1c      	ldr	r2, [pc, #112]	; (8011670 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8011600:	4293      	cmp	r3, r2
 8011602:	d013      	beq.n	801162c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	4a1a      	ldr	r2, [pc, #104]	; (8011674 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801160a:	4293      	cmp	r3, r2
 801160c:	d00e      	beq.n	801162c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	4a15      	ldr	r2, [pc, #84]	; (8011668 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8011614:	4293      	cmp	r3, r2
 8011616:	d009      	beq.n	801162c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	4a16      	ldr	r2, [pc, #88]	; (8011678 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801161e:	4293      	cmp	r3, r2
 8011620:	d004      	beq.n	801162c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	4a15      	ldr	r2, [pc, #84]	; (801167c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8011628:	4293      	cmp	r3, r2
 801162a:	d10c      	bne.n	8011646 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801162c:	68bb      	ldr	r3, [r7, #8]
 801162e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011632:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011634:	683b      	ldr	r3, [r7, #0]
 8011636:	689b      	ldr	r3, [r3, #8]
 8011638:	68ba      	ldr	r2, [r7, #8]
 801163a:	4313      	orrs	r3, r2
 801163c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	68ba      	ldr	r2, [r7, #8]
 8011644:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	2201      	movs	r2, #1
 801164a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	2200      	movs	r2, #0
 8011652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011656:	2300      	movs	r3, #0
}
 8011658:	4618      	mov	r0, r3
 801165a:	3714      	adds	r7, #20
 801165c:	46bd      	mov	sp, r7
 801165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011662:	4770      	bx	lr
 8011664:	40010000 	.word	0x40010000
 8011668:	40010400 	.word	0x40010400
 801166c:	40000400 	.word	0x40000400
 8011670:	40000800 	.word	0x40000800
 8011674:	40000c00 	.word	0x40000c00
 8011678:	40001800 	.word	0x40001800
 801167c:	40014000 	.word	0x40014000

08011680 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011680:	b480      	push	{r7}
 8011682:	b083      	sub	sp, #12
 8011684:	af00      	add	r7, sp, #0
 8011686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011688:	bf00      	nop
 801168a:	370c      	adds	r7, #12
 801168c:	46bd      	mov	sp, r7
 801168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011692:	4770      	bx	lr

08011694 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011694:	b480      	push	{r7}
 8011696:	b083      	sub	sp, #12
 8011698:	af00      	add	r7, sp, #0
 801169a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801169c:	bf00      	nop
 801169e:	370c      	adds	r7, #12
 80116a0:	46bd      	mov	sp, r7
 80116a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a6:	4770      	bx	lr

080116a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80116a8:	b480      	push	{r7}
 80116aa:	b083      	sub	sp, #12
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80116b0:	bf00      	nop
 80116b2:	370c      	adds	r7, #12
 80116b4:	46bd      	mov	sp, r7
 80116b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ba:	4770      	bx	lr

080116bc <__assert_func>:
 80116bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80116be:	4614      	mov	r4, r2
 80116c0:	461a      	mov	r2, r3
 80116c2:	4b09      	ldr	r3, [pc, #36]	; (80116e8 <__assert_func+0x2c>)
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	4605      	mov	r5, r0
 80116c8:	68d8      	ldr	r0, [r3, #12]
 80116ca:	b14c      	cbz	r4, 80116e0 <__assert_func+0x24>
 80116cc:	4b07      	ldr	r3, [pc, #28]	; (80116ec <__assert_func+0x30>)
 80116ce:	9100      	str	r1, [sp, #0]
 80116d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80116d4:	4906      	ldr	r1, [pc, #24]	; (80116f0 <__assert_func+0x34>)
 80116d6:	462b      	mov	r3, r5
 80116d8:	f000 f91e 	bl	8011918 <fiprintf>
 80116dc:	f000 fb3b 	bl	8011d56 <abort>
 80116e0:	4b04      	ldr	r3, [pc, #16]	; (80116f4 <__assert_func+0x38>)
 80116e2:	461c      	mov	r4, r3
 80116e4:	e7f3      	b.n	80116ce <__assert_func+0x12>
 80116e6:	bf00      	nop
 80116e8:	200000ac 	.word	0x200000ac
 80116ec:	080144c0 	.word	0x080144c0
 80116f0:	080144cd 	.word	0x080144cd
 80116f4:	080144fb 	.word	0x080144fb

080116f8 <srand>:
 80116f8:	b538      	push	{r3, r4, r5, lr}
 80116fa:	4b10      	ldr	r3, [pc, #64]	; (801173c <srand+0x44>)
 80116fc:	681d      	ldr	r5, [r3, #0]
 80116fe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8011700:	4604      	mov	r4, r0
 8011702:	b9b3      	cbnz	r3, 8011732 <srand+0x3a>
 8011704:	2018      	movs	r0, #24
 8011706:	f000 fb79 	bl	8011dfc <malloc>
 801170a:	4602      	mov	r2, r0
 801170c:	6328      	str	r0, [r5, #48]	; 0x30
 801170e:	b920      	cbnz	r0, 801171a <srand+0x22>
 8011710:	4b0b      	ldr	r3, [pc, #44]	; (8011740 <srand+0x48>)
 8011712:	480c      	ldr	r0, [pc, #48]	; (8011744 <srand+0x4c>)
 8011714:	2146      	movs	r1, #70	; 0x46
 8011716:	f7ff ffd1 	bl	80116bc <__assert_func>
 801171a:	490b      	ldr	r1, [pc, #44]	; (8011748 <srand+0x50>)
 801171c:	4b0b      	ldr	r3, [pc, #44]	; (801174c <srand+0x54>)
 801171e:	e9c0 1300 	strd	r1, r3, [r0]
 8011722:	4b0b      	ldr	r3, [pc, #44]	; (8011750 <srand+0x58>)
 8011724:	6083      	str	r3, [r0, #8]
 8011726:	230b      	movs	r3, #11
 8011728:	8183      	strh	r3, [r0, #12]
 801172a:	2100      	movs	r1, #0
 801172c:	2001      	movs	r0, #1
 801172e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8011732:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8011734:	2200      	movs	r2, #0
 8011736:	611c      	str	r4, [r3, #16]
 8011738:	615a      	str	r2, [r3, #20]
 801173a:	bd38      	pop	{r3, r4, r5, pc}
 801173c:	200000ac 	.word	0x200000ac
 8011740:	080144fc 	.word	0x080144fc
 8011744:	08014513 	.word	0x08014513
 8011748:	abcd330e 	.word	0xabcd330e
 801174c:	e66d1234 	.word	0xe66d1234
 8011750:	0005deec 	.word	0x0005deec

08011754 <rand>:
 8011754:	4b16      	ldr	r3, [pc, #88]	; (80117b0 <rand+0x5c>)
 8011756:	b510      	push	{r4, lr}
 8011758:	681c      	ldr	r4, [r3, #0]
 801175a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801175c:	b9b3      	cbnz	r3, 801178c <rand+0x38>
 801175e:	2018      	movs	r0, #24
 8011760:	f000 fb4c 	bl	8011dfc <malloc>
 8011764:	4602      	mov	r2, r0
 8011766:	6320      	str	r0, [r4, #48]	; 0x30
 8011768:	b920      	cbnz	r0, 8011774 <rand+0x20>
 801176a:	4b12      	ldr	r3, [pc, #72]	; (80117b4 <rand+0x60>)
 801176c:	4812      	ldr	r0, [pc, #72]	; (80117b8 <rand+0x64>)
 801176e:	2152      	movs	r1, #82	; 0x52
 8011770:	f7ff ffa4 	bl	80116bc <__assert_func>
 8011774:	4911      	ldr	r1, [pc, #68]	; (80117bc <rand+0x68>)
 8011776:	4b12      	ldr	r3, [pc, #72]	; (80117c0 <rand+0x6c>)
 8011778:	e9c0 1300 	strd	r1, r3, [r0]
 801177c:	4b11      	ldr	r3, [pc, #68]	; (80117c4 <rand+0x70>)
 801177e:	6083      	str	r3, [r0, #8]
 8011780:	230b      	movs	r3, #11
 8011782:	8183      	strh	r3, [r0, #12]
 8011784:	2100      	movs	r1, #0
 8011786:	2001      	movs	r0, #1
 8011788:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801178c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801178e:	480e      	ldr	r0, [pc, #56]	; (80117c8 <rand+0x74>)
 8011790:	690b      	ldr	r3, [r1, #16]
 8011792:	694c      	ldr	r4, [r1, #20]
 8011794:	4a0d      	ldr	r2, [pc, #52]	; (80117cc <rand+0x78>)
 8011796:	4358      	muls	r0, r3
 8011798:	fb02 0004 	mla	r0, r2, r4, r0
 801179c:	fba3 3202 	umull	r3, r2, r3, r2
 80117a0:	3301      	adds	r3, #1
 80117a2:	eb40 0002 	adc.w	r0, r0, r2
 80117a6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80117aa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80117ae:	bd10      	pop	{r4, pc}
 80117b0:	200000ac 	.word	0x200000ac
 80117b4:	080144fc 	.word	0x080144fc
 80117b8:	08014513 	.word	0x08014513
 80117bc:	abcd330e 	.word	0xabcd330e
 80117c0:	e66d1234 	.word	0xe66d1234
 80117c4:	0005deec 	.word	0x0005deec
 80117c8:	5851f42d 	.word	0x5851f42d
 80117cc:	4c957f2d 	.word	0x4c957f2d

080117d0 <std>:
 80117d0:	2300      	movs	r3, #0
 80117d2:	b510      	push	{r4, lr}
 80117d4:	4604      	mov	r4, r0
 80117d6:	e9c0 3300 	strd	r3, r3, [r0]
 80117da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80117de:	6083      	str	r3, [r0, #8]
 80117e0:	8181      	strh	r1, [r0, #12]
 80117e2:	6643      	str	r3, [r0, #100]	; 0x64
 80117e4:	81c2      	strh	r2, [r0, #14]
 80117e6:	6183      	str	r3, [r0, #24]
 80117e8:	4619      	mov	r1, r3
 80117ea:	2208      	movs	r2, #8
 80117ec:	305c      	adds	r0, #92	; 0x5c
 80117ee:	f000 fa29 	bl	8011c44 <memset>
 80117f2:	4b0d      	ldr	r3, [pc, #52]	; (8011828 <std+0x58>)
 80117f4:	6263      	str	r3, [r4, #36]	; 0x24
 80117f6:	4b0d      	ldr	r3, [pc, #52]	; (801182c <std+0x5c>)
 80117f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80117fa:	4b0d      	ldr	r3, [pc, #52]	; (8011830 <std+0x60>)
 80117fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80117fe:	4b0d      	ldr	r3, [pc, #52]	; (8011834 <std+0x64>)
 8011800:	6323      	str	r3, [r4, #48]	; 0x30
 8011802:	4b0d      	ldr	r3, [pc, #52]	; (8011838 <std+0x68>)
 8011804:	6224      	str	r4, [r4, #32]
 8011806:	429c      	cmp	r4, r3
 8011808:	d006      	beq.n	8011818 <std+0x48>
 801180a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801180e:	4294      	cmp	r4, r2
 8011810:	d002      	beq.n	8011818 <std+0x48>
 8011812:	33d0      	adds	r3, #208	; 0xd0
 8011814:	429c      	cmp	r4, r3
 8011816:	d105      	bne.n	8011824 <std+0x54>
 8011818:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801181c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011820:	f000 ba88 	b.w	8011d34 <__retarget_lock_init_recursive>
 8011824:	bd10      	pop	{r4, pc}
 8011826:	bf00      	nop
 8011828:	08011a95 	.word	0x08011a95
 801182c:	08011ab7 	.word	0x08011ab7
 8011830:	08011aef 	.word	0x08011aef
 8011834:	08011b13 	.word	0x08011b13
 8011838:	20000624 	.word	0x20000624

0801183c <stdio_exit_handler>:
 801183c:	4a02      	ldr	r2, [pc, #8]	; (8011848 <stdio_exit_handler+0xc>)
 801183e:	4903      	ldr	r1, [pc, #12]	; (801184c <stdio_exit_handler+0x10>)
 8011840:	4803      	ldr	r0, [pc, #12]	; (8011850 <stdio_exit_handler+0x14>)
 8011842:	f000 b87b 	b.w	801193c <_fwalk_sglue>
 8011846:	bf00      	nop
 8011848:	20000054 	.word	0x20000054
 801184c:	080128c9 	.word	0x080128c9
 8011850:	20000060 	.word	0x20000060

08011854 <cleanup_stdio>:
 8011854:	6841      	ldr	r1, [r0, #4]
 8011856:	4b0c      	ldr	r3, [pc, #48]	; (8011888 <cleanup_stdio+0x34>)
 8011858:	4299      	cmp	r1, r3
 801185a:	b510      	push	{r4, lr}
 801185c:	4604      	mov	r4, r0
 801185e:	d001      	beq.n	8011864 <cleanup_stdio+0x10>
 8011860:	f001 f832 	bl	80128c8 <_fflush_r>
 8011864:	68a1      	ldr	r1, [r4, #8]
 8011866:	4b09      	ldr	r3, [pc, #36]	; (801188c <cleanup_stdio+0x38>)
 8011868:	4299      	cmp	r1, r3
 801186a:	d002      	beq.n	8011872 <cleanup_stdio+0x1e>
 801186c:	4620      	mov	r0, r4
 801186e:	f001 f82b 	bl	80128c8 <_fflush_r>
 8011872:	68e1      	ldr	r1, [r4, #12]
 8011874:	4b06      	ldr	r3, [pc, #24]	; (8011890 <cleanup_stdio+0x3c>)
 8011876:	4299      	cmp	r1, r3
 8011878:	d004      	beq.n	8011884 <cleanup_stdio+0x30>
 801187a:	4620      	mov	r0, r4
 801187c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011880:	f001 b822 	b.w	80128c8 <_fflush_r>
 8011884:	bd10      	pop	{r4, pc}
 8011886:	bf00      	nop
 8011888:	20000624 	.word	0x20000624
 801188c:	2000068c 	.word	0x2000068c
 8011890:	200006f4 	.word	0x200006f4

08011894 <global_stdio_init.part.0>:
 8011894:	b510      	push	{r4, lr}
 8011896:	4b0b      	ldr	r3, [pc, #44]	; (80118c4 <global_stdio_init.part.0+0x30>)
 8011898:	4c0b      	ldr	r4, [pc, #44]	; (80118c8 <global_stdio_init.part.0+0x34>)
 801189a:	4a0c      	ldr	r2, [pc, #48]	; (80118cc <global_stdio_init.part.0+0x38>)
 801189c:	601a      	str	r2, [r3, #0]
 801189e:	4620      	mov	r0, r4
 80118a0:	2200      	movs	r2, #0
 80118a2:	2104      	movs	r1, #4
 80118a4:	f7ff ff94 	bl	80117d0 <std>
 80118a8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80118ac:	2201      	movs	r2, #1
 80118ae:	2109      	movs	r1, #9
 80118b0:	f7ff ff8e 	bl	80117d0 <std>
 80118b4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80118b8:	2202      	movs	r2, #2
 80118ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80118be:	2112      	movs	r1, #18
 80118c0:	f7ff bf86 	b.w	80117d0 <std>
 80118c4:	2000075c 	.word	0x2000075c
 80118c8:	20000624 	.word	0x20000624
 80118cc:	0801183d 	.word	0x0801183d

080118d0 <__sfp_lock_acquire>:
 80118d0:	4801      	ldr	r0, [pc, #4]	; (80118d8 <__sfp_lock_acquire+0x8>)
 80118d2:	f000 ba30 	b.w	8011d36 <__retarget_lock_acquire_recursive>
 80118d6:	bf00      	nop
 80118d8:	20000765 	.word	0x20000765

080118dc <__sfp_lock_release>:
 80118dc:	4801      	ldr	r0, [pc, #4]	; (80118e4 <__sfp_lock_release+0x8>)
 80118de:	f000 ba2b 	b.w	8011d38 <__retarget_lock_release_recursive>
 80118e2:	bf00      	nop
 80118e4:	20000765 	.word	0x20000765

080118e8 <__sinit>:
 80118e8:	b510      	push	{r4, lr}
 80118ea:	4604      	mov	r4, r0
 80118ec:	f7ff fff0 	bl	80118d0 <__sfp_lock_acquire>
 80118f0:	6a23      	ldr	r3, [r4, #32]
 80118f2:	b11b      	cbz	r3, 80118fc <__sinit+0x14>
 80118f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80118f8:	f7ff bff0 	b.w	80118dc <__sfp_lock_release>
 80118fc:	4b04      	ldr	r3, [pc, #16]	; (8011910 <__sinit+0x28>)
 80118fe:	6223      	str	r3, [r4, #32]
 8011900:	4b04      	ldr	r3, [pc, #16]	; (8011914 <__sinit+0x2c>)
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	2b00      	cmp	r3, #0
 8011906:	d1f5      	bne.n	80118f4 <__sinit+0xc>
 8011908:	f7ff ffc4 	bl	8011894 <global_stdio_init.part.0>
 801190c:	e7f2      	b.n	80118f4 <__sinit+0xc>
 801190e:	bf00      	nop
 8011910:	08011855 	.word	0x08011855
 8011914:	2000075c 	.word	0x2000075c

08011918 <fiprintf>:
 8011918:	b40e      	push	{r1, r2, r3}
 801191a:	b503      	push	{r0, r1, lr}
 801191c:	4601      	mov	r1, r0
 801191e:	ab03      	add	r3, sp, #12
 8011920:	4805      	ldr	r0, [pc, #20]	; (8011938 <fiprintf+0x20>)
 8011922:	f853 2b04 	ldr.w	r2, [r3], #4
 8011926:	6800      	ldr	r0, [r0, #0]
 8011928:	9301      	str	r3, [sp, #4]
 801192a:	f000 fc9d 	bl	8012268 <_vfiprintf_r>
 801192e:	b002      	add	sp, #8
 8011930:	f85d eb04 	ldr.w	lr, [sp], #4
 8011934:	b003      	add	sp, #12
 8011936:	4770      	bx	lr
 8011938:	200000ac 	.word	0x200000ac

0801193c <_fwalk_sglue>:
 801193c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011940:	4607      	mov	r7, r0
 8011942:	4688      	mov	r8, r1
 8011944:	4614      	mov	r4, r2
 8011946:	2600      	movs	r6, #0
 8011948:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801194c:	f1b9 0901 	subs.w	r9, r9, #1
 8011950:	d505      	bpl.n	801195e <_fwalk_sglue+0x22>
 8011952:	6824      	ldr	r4, [r4, #0]
 8011954:	2c00      	cmp	r4, #0
 8011956:	d1f7      	bne.n	8011948 <_fwalk_sglue+0xc>
 8011958:	4630      	mov	r0, r6
 801195a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801195e:	89ab      	ldrh	r3, [r5, #12]
 8011960:	2b01      	cmp	r3, #1
 8011962:	d907      	bls.n	8011974 <_fwalk_sglue+0x38>
 8011964:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011968:	3301      	adds	r3, #1
 801196a:	d003      	beq.n	8011974 <_fwalk_sglue+0x38>
 801196c:	4629      	mov	r1, r5
 801196e:	4638      	mov	r0, r7
 8011970:	47c0      	blx	r8
 8011972:	4306      	orrs	r6, r0
 8011974:	3568      	adds	r5, #104	; 0x68
 8011976:	e7e9      	b.n	801194c <_fwalk_sglue+0x10>

08011978 <iprintf>:
 8011978:	b40f      	push	{r0, r1, r2, r3}
 801197a:	b507      	push	{r0, r1, r2, lr}
 801197c:	4906      	ldr	r1, [pc, #24]	; (8011998 <iprintf+0x20>)
 801197e:	ab04      	add	r3, sp, #16
 8011980:	6808      	ldr	r0, [r1, #0]
 8011982:	f853 2b04 	ldr.w	r2, [r3], #4
 8011986:	6881      	ldr	r1, [r0, #8]
 8011988:	9301      	str	r3, [sp, #4]
 801198a:	f000 fc6d 	bl	8012268 <_vfiprintf_r>
 801198e:	b003      	add	sp, #12
 8011990:	f85d eb04 	ldr.w	lr, [sp], #4
 8011994:	b004      	add	sp, #16
 8011996:	4770      	bx	lr
 8011998:	200000ac 	.word	0x200000ac

0801199c <_puts_r>:
 801199c:	6a03      	ldr	r3, [r0, #32]
 801199e:	b570      	push	{r4, r5, r6, lr}
 80119a0:	6884      	ldr	r4, [r0, #8]
 80119a2:	4605      	mov	r5, r0
 80119a4:	460e      	mov	r6, r1
 80119a6:	b90b      	cbnz	r3, 80119ac <_puts_r+0x10>
 80119a8:	f7ff ff9e 	bl	80118e8 <__sinit>
 80119ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80119ae:	07db      	lsls	r3, r3, #31
 80119b0:	d405      	bmi.n	80119be <_puts_r+0x22>
 80119b2:	89a3      	ldrh	r3, [r4, #12]
 80119b4:	0598      	lsls	r0, r3, #22
 80119b6:	d402      	bmi.n	80119be <_puts_r+0x22>
 80119b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80119ba:	f000 f9bc 	bl	8011d36 <__retarget_lock_acquire_recursive>
 80119be:	89a3      	ldrh	r3, [r4, #12]
 80119c0:	0719      	lsls	r1, r3, #28
 80119c2:	d513      	bpl.n	80119ec <_puts_r+0x50>
 80119c4:	6923      	ldr	r3, [r4, #16]
 80119c6:	b18b      	cbz	r3, 80119ec <_puts_r+0x50>
 80119c8:	3e01      	subs	r6, #1
 80119ca:	68a3      	ldr	r3, [r4, #8]
 80119cc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80119d0:	3b01      	subs	r3, #1
 80119d2:	60a3      	str	r3, [r4, #8]
 80119d4:	b9e9      	cbnz	r1, 8011a12 <_puts_r+0x76>
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	da2e      	bge.n	8011a38 <_puts_r+0x9c>
 80119da:	4622      	mov	r2, r4
 80119dc:	210a      	movs	r1, #10
 80119de:	4628      	mov	r0, r5
 80119e0:	f000 f89b 	bl	8011b1a <__swbuf_r>
 80119e4:	3001      	adds	r0, #1
 80119e6:	d007      	beq.n	80119f8 <_puts_r+0x5c>
 80119e8:	250a      	movs	r5, #10
 80119ea:	e007      	b.n	80119fc <_puts_r+0x60>
 80119ec:	4621      	mov	r1, r4
 80119ee:	4628      	mov	r0, r5
 80119f0:	f000 f8d0 	bl	8011b94 <__swsetup_r>
 80119f4:	2800      	cmp	r0, #0
 80119f6:	d0e7      	beq.n	80119c8 <_puts_r+0x2c>
 80119f8:	f04f 35ff 	mov.w	r5, #4294967295
 80119fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80119fe:	07da      	lsls	r2, r3, #31
 8011a00:	d405      	bmi.n	8011a0e <_puts_r+0x72>
 8011a02:	89a3      	ldrh	r3, [r4, #12]
 8011a04:	059b      	lsls	r3, r3, #22
 8011a06:	d402      	bmi.n	8011a0e <_puts_r+0x72>
 8011a08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011a0a:	f000 f995 	bl	8011d38 <__retarget_lock_release_recursive>
 8011a0e:	4628      	mov	r0, r5
 8011a10:	bd70      	pop	{r4, r5, r6, pc}
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	da04      	bge.n	8011a20 <_puts_r+0x84>
 8011a16:	69a2      	ldr	r2, [r4, #24]
 8011a18:	429a      	cmp	r2, r3
 8011a1a:	dc06      	bgt.n	8011a2a <_puts_r+0x8e>
 8011a1c:	290a      	cmp	r1, #10
 8011a1e:	d004      	beq.n	8011a2a <_puts_r+0x8e>
 8011a20:	6823      	ldr	r3, [r4, #0]
 8011a22:	1c5a      	adds	r2, r3, #1
 8011a24:	6022      	str	r2, [r4, #0]
 8011a26:	7019      	strb	r1, [r3, #0]
 8011a28:	e7cf      	b.n	80119ca <_puts_r+0x2e>
 8011a2a:	4622      	mov	r2, r4
 8011a2c:	4628      	mov	r0, r5
 8011a2e:	f000 f874 	bl	8011b1a <__swbuf_r>
 8011a32:	3001      	adds	r0, #1
 8011a34:	d1c9      	bne.n	80119ca <_puts_r+0x2e>
 8011a36:	e7df      	b.n	80119f8 <_puts_r+0x5c>
 8011a38:	6823      	ldr	r3, [r4, #0]
 8011a3a:	250a      	movs	r5, #10
 8011a3c:	1c5a      	adds	r2, r3, #1
 8011a3e:	6022      	str	r2, [r4, #0]
 8011a40:	701d      	strb	r5, [r3, #0]
 8011a42:	e7db      	b.n	80119fc <_puts_r+0x60>

08011a44 <puts>:
 8011a44:	4b02      	ldr	r3, [pc, #8]	; (8011a50 <puts+0xc>)
 8011a46:	4601      	mov	r1, r0
 8011a48:	6818      	ldr	r0, [r3, #0]
 8011a4a:	f7ff bfa7 	b.w	801199c <_puts_r>
 8011a4e:	bf00      	nop
 8011a50:	200000ac 	.word	0x200000ac

08011a54 <siprintf>:
 8011a54:	b40e      	push	{r1, r2, r3}
 8011a56:	b500      	push	{lr}
 8011a58:	b09c      	sub	sp, #112	; 0x70
 8011a5a:	ab1d      	add	r3, sp, #116	; 0x74
 8011a5c:	9002      	str	r0, [sp, #8]
 8011a5e:	9006      	str	r0, [sp, #24]
 8011a60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011a64:	4809      	ldr	r0, [pc, #36]	; (8011a8c <siprintf+0x38>)
 8011a66:	9107      	str	r1, [sp, #28]
 8011a68:	9104      	str	r1, [sp, #16]
 8011a6a:	4909      	ldr	r1, [pc, #36]	; (8011a90 <siprintf+0x3c>)
 8011a6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a70:	9105      	str	r1, [sp, #20]
 8011a72:	6800      	ldr	r0, [r0, #0]
 8011a74:	9301      	str	r3, [sp, #4]
 8011a76:	a902      	add	r1, sp, #8
 8011a78:	f000 face 	bl	8012018 <_svfiprintf_r>
 8011a7c:	9b02      	ldr	r3, [sp, #8]
 8011a7e:	2200      	movs	r2, #0
 8011a80:	701a      	strb	r2, [r3, #0]
 8011a82:	b01c      	add	sp, #112	; 0x70
 8011a84:	f85d eb04 	ldr.w	lr, [sp], #4
 8011a88:	b003      	add	sp, #12
 8011a8a:	4770      	bx	lr
 8011a8c:	200000ac 	.word	0x200000ac
 8011a90:	ffff0208 	.word	0xffff0208

08011a94 <__sread>:
 8011a94:	b510      	push	{r4, lr}
 8011a96:	460c      	mov	r4, r1
 8011a98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a9c:	f000 f8fc 	bl	8011c98 <_read_r>
 8011aa0:	2800      	cmp	r0, #0
 8011aa2:	bfab      	itete	ge
 8011aa4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011aa6:	89a3      	ldrhlt	r3, [r4, #12]
 8011aa8:	181b      	addge	r3, r3, r0
 8011aaa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011aae:	bfac      	ite	ge
 8011ab0:	6563      	strge	r3, [r4, #84]	; 0x54
 8011ab2:	81a3      	strhlt	r3, [r4, #12]
 8011ab4:	bd10      	pop	{r4, pc}

08011ab6 <__swrite>:
 8011ab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011aba:	461f      	mov	r7, r3
 8011abc:	898b      	ldrh	r3, [r1, #12]
 8011abe:	05db      	lsls	r3, r3, #23
 8011ac0:	4605      	mov	r5, r0
 8011ac2:	460c      	mov	r4, r1
 8011ac4:	4616      	mov	r6, r2
 8011ac6:	d505      	bpl.n	8011ad4 <__swrite+0x1e>
 8011ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011acc:	2302      	movs	r3, #2
 8011ace:	2200      	movs	r2, #0
 8011ad0:	f000 f8d0 	bl	8011c74 <_lseek_r>
 8011ad4:	89a3      	ldrh	r3, [r4, #12]
 8011ad6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011ada:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011ade:	81a3      	strh	r3, [r4, #12]
 8011ae0:	4632      	mov	r2, r6
 8011ae2:	463b      	mov	r3, r7
 8011ae4:	4628      	mov	r0, r5
 8011ae6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011aea:	f000 b8e7 	b.w	8011cbc <_write_r>

08011aee <__sseek>:
 8011aee:	b510      	push	{r4, lr}
 8011af0:	460c      	mov	r4, r1
 8011af2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011af6:	f000 f8bd 	bl	8011c74 <_lseek_r>
 8011afa:	1c43      	adds	r3, r0, #1
 8011afc:	89a3      	ldrh	r3, [r4, #12]
 8011afe:	bf15      	itete	ne
 8011b00:	6560      	strne	r0, [r4, #84]	; 0x54
 8011b02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011b06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011b0a:	81a3      	strheq	r3, [r4, #12]
 8011b0c:	bf18      	it	ne
 8011b0e:	81a3      	strhne	r3, [r4, #12]
 8011b10:	bd10      	pop	{r4, pc}

08011b12 <__sclose>:
 8011b12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b16:	f000 b89d 	b.w	8011c54 <_close_r>

08011b1a <__swbuf_r>:
 8011b1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b1c:	460e      	mov	r6, r1
 8011b1e:	4614      	mov	r4, r2
 8011b20:	4605      	mov	r5, r0
 8011b22:	b118      	cbz	r0, 8011b2c <__swbuf_r+0x12>
 8011b24:	6a03      	ldr	r3, [r0, #32]
 8011b26:	b90b      	cbnz	r3, 8011b2c <__swbuf_r+0x12>
 8011b28:	f7ff fede 	bl	80118e8 <__sinit>
 8011b2c:	69a3      	ldr	r3, [r4, #24]
 8011b2e:	60a3      	str	r3, [r4, #8]
 8011b30:	89a3      	ldrh	r3, [r4, #12]
 8011b32:	071a      	lsls	r2, r3, #28
 8011b34:	d525      	bpl.n	8011b82 <__swbuf_r+0x68>
 8011b36:	6923      	ldr	r3, [r4, #16]
 8011b38:	b31b      	cbz	r3, 8011b82 <__swbuf_r+0x68>
 8011b3a:	6823      	ldr	r3, [r4, #0]
 8011b3c:	6922      	ldr	r2, [r4, #16]
 8011b3e:	1a98      	subs	r0, r3, r2
 8011b40:	6963      	ldr	r3, [r4, #20]
 8011b42:	b2f6      	uxtb	r6, r6
 8011b44:	4283      	cmp	r3, r0
 8011b46:	4637      	mov	r7, r6
 8011b48:	dc04      	bgt.n	8011b54 <__swbuf_r+0x3a>
 8011b4a:	4621      	mov	r1, r4
 8011b4c:	4628      	mov	r0, r5
 8011b4e:	f000 febb 	bl	80128c8 <_fflush_r>
 8011b52:	b9e0      	cbnz	r0, 8011b8e <__swbuf_r+0x74>
 8011b54:	68a3      	ldr	r3, [r4, #8]
 8011b56:	3b01      	subs	r3, #1
 8011b58:	60a3      	str	r3, [r4, #8]
 8011b5a:	6823      	ldr	r3, [r4, #0]
 8011b5c:	1c5a      	adds	r2, r3, #1
 8011b5e:	6022      	str	r2, [r4, #0]
 8011b60:	701e      	strb	r6, [r3, #0]
 8011b62:	6962      	ldr	r2, [r4, #20]
 8011b64:	1c43      	adds	r3, r0, #1
 8011b66:	429a      	cmp	r2, r3
 8011b68:	d004      	beq.n	8011b74 <__swbuf_r+0x5a>
 8011b6a:	89a3      	ldrh	r3, [r4, #12]
 8011b6c:	07db      	lsls	r3, r3, #31
 8011b6e:	d506      	bpl.n	8011b7e <__swbuf_r+0x64>
 8011b70:	2e0a      	cmp	r6, #10
 8011b72:	d104      	bne.n	8011b7e <__swbuf_r+0x64>
 8011b74:	4621      	mov	r1, r4
 8011b76:	4628      	mov	r0, r5
 8011b78:	f000 fea6 	bl	80128c8 <_fflush_r>
 8011b7c:	b938      	cbnz	r0, 8011b8e <__swbuf_r+0x74>
 8011b7e:	4638      	mov	r0, r7
 8011b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b82:	4621      	mov	r1, r4
 8011b84:	4628      	mov	r0, r5
 8011b86:	f000 f805 	bl	8011b94 <__swsetup_r>
 8011b8a:	2800      	cmp	r0, #0
 8011b8c:	d0d5      	beq.n	8011b3a <__swbuf_r+0x20>
 8011b8e:	f04f 37ff 	mov.w	r7, #4294967295
 8011b92:	e7f4      	b.n	8011b7e <__swbuf_r+0x64>

08011b94 <__swsetup_r>:
 8011b94:	b538      	push	{r3, r4, r5, lr}
 8011b96:	4b2a      	ldr	r3, [pc, #168]	; (8011c40 <__swsetup_r+0xac>)
 8011b98:	4605      	mov	r5, r0
 8011b9a:	6818      	ldr	r0, [r3, #0]
 8011b9c:	460c      	mov	r4, r1
 8011b9e:	b118      	cbz	r0, 8011ba8 <__swsetup_r+0x14>
 8011ba0:	6a03      	ldr	r3, [r0, #32]
 8011ba2:	b90b      	cbnz	r3, 8011ba8 <__swsetup_r+0x14>
 8011ba4:	f7ff fea0 	bl	80118e8 <__sinit>
 8011ba8:	89a3      	ldrh	r3, [r4, #12]
 8011baa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011bae:	0718      	lsls	r0, r3, #28
 8011bb0:	d422      	bmi.n	8011bf8 <__swsetup_r+0x64>
 8011bb2:	06d9      	lsls	r1, r3, #27
 8011bb4:	d407      	bmi.n	8011bc6 <__swsetup_r+0x32>
 8011bb6:	2309      	movs	r3, #9
 8011bb8:	602b      	str	r3, [r5, #0]
 8011bba:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011bbe:	81a3      	strh	r3, [r4, #12]
 8011bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8011bc4:	e034      	b.n	8011c30 <__swsetup_r+0x9c>
 8011bc6:	0758      	lsls	r0, r3, #29
 8011bc8:	d512      	bpl.n	8011bf0 <__swsetup_r+0x5c>
 8011bca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011bcc:	b141      	cbz	r1, 8011be0 <__swsetup_r+0x4c>
 8011bce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011bd2:	4299      	cmp	r1, r3
 8011bd4:	d002      	beq.n	8011bdc <__swsetup_r+0x48>
 8011bd6:	4628      	mov	r0, r5
 8011bd8:	f000 f8c4 	bl	8011d64 <_free_r>
 8011bdc:	2300      	movs	r3, #0
 8011bde:	6363      	str	r3, [r4, #52]	; 0x34
 8011be0:	89a3      	ldrh	r3, [r4, #12]
 8011be2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011be6:	81a3      	strh	r3, [r4, #12]
 8011be8:	2300      	movs	r3, #0
 8011bea:	6063      	str	r3, [r4, #4]
 8011bec:	6923      	ldr	r3, [r4, #16]
 8011bee:	6023      	str	r3, [r4, #0]
 8011bf0:	89a3      	ldrh	r3, [r4, #12]
 8011bf2:	f043 0308 	orr.w	r3, r3, #8
 8011bf6:	81a3      	strh	r3, [r4, #12]
 8011bf8:	6923      	ldr	r3, [r4, #16]
 8011bfa:	b94b      	cbnz	r3, 8011c10 <__swsetup_r+0x7c>
 8011bfc:	89a3      	ldrh	r3, [r4, #12]
 8011bfe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011c02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011c06:	d003      	beq.n	8011c10 <__swsetup_r+0x7c>
 8011c08:	4621      	mov	r1, r4
 8011c0a:	4628      	mov	r0, r5
 8011c0c:	f000 feaa 	bl	8012964 <__smakebuf_r>
 8011c10:	89a0      	ldrh	r0, [r4, #12]
 8011c12:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011c16:	f010 0301 	ands.w	r3, r0, #1
 8011c1a:	d00a      	beq.n	8011c32 <__swsetup_r+0x9e>
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	60a3      	str	r3, [r4, #8]
 8011c20:	6963      	ldr	r3, [r4, #20]
 8011c22:	425b      	negs	r3, r3
 8011c24:	61a3      	str	r3, [r4, #24]
 8011c26:	6923      	ldr	r3, [r4, #16]
 8011c28:	b943      	cbnz	r3, 8011c3c <__swsetup_r+0xa8>
 8011c2a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011c2e:	d1c4      	bne.n	8011bba <__swsetup_r+0x26>
 8011c30:	bd38      	pop	{r3, r4, r5, pc}
 8011c32:	0781      	lsls	r1, r0, #30
 8011c34:	bf58      	it	pl
 8011c36:	6963      	ldrpl	r3, [r4, #20]
 8011c38:	60a3      	str	r3, [r4, #8]
 8011c3a:	e7f4      	b.n	8011c26 <__swsetup_r+0x92>
 8011c3c:	2000      	movs	r0, #0
 8011c3e:	e7f7      	b.n	8011c30 <__swsetup_r+0x9c>
 8011c40:	200000ac 	.word	0x200000ac

08011c44 <memset>:
 8011c44:	4402      	add	r2, r0
 8011c46:	4603      	mov	r3, r0
 8011c48:	4293      	cmp	r3, r2
 8011c4a:	d100      	bne.n	8011c4e <memset+0xa>
 8011c4c:	4770      	bx	lr
 8011c4e:	f803 1b01 	strb.w	r1, [r3], #1
 8011c52:	e7f9      	b.n	8011c48 <memset+0x4>

08011c54 <_close_r>:
 8011c54:	b538      	push	{r3, r4, r5, lr}
 8011c56:	4d06      	ldr	r5, [pc, #24]	; (8011c70 <_close_r+0x1c>)
 8011c58:	2300      	movs	r3, #0
 8011c5a:	4604      	mov	r4, r0
 8011c5c:	4608      	mov	r0, r1
 8011c5e:	602b      	str	r3, [r5, #0]
 8011c60:	f7f2 f875 	bl	8003d4e <_close>
 8011c64:	1c43      	adds	r3, r0, #1
 8011c66:	d102      	bne.n	8011c6e <_close_r+0x1a>
 8011c68:	682b      	ldr	r3, [r5, #0]
 8011c6a:	b103      	cbz	r3, 8011c6e <_close_r+0x1a>
 8011c6c:	6023      	str	r3, [r4, #0]
 8011c6e:	bd38      	pop	{r3, r4, r5, pc}
 8011c70:	20000760 	.word	0x20000760

08011c74 <_lseek_r>:
 8011c74:	b538      	push	{r3, r4, r5, lr}
 8011c76:	4d07      	ldr	r5, [pc, #28]	; (8011c94 <_lseek_r+0x20>)
 8011c78:	4604      	mov	r4, r0
 8011c7a:	4608      	mov	r0, r1
 8011c7c:	4611      	mov	r1, r2
 8011c7e:	2200      	movs	r2, #0
 8011c80:	602a      	str	r2, [r5, #0]
 8011c82:	461a      	mov	r2, r3
 8011c84:	f7f2 f88a 	bl	8003d9c <_lseek>
 8011c88:	1c43      	adds	r3, r0, #1
 8011c8a:	d102      	bne.n	8011c92 <_lseek_r+0x1e>
 8011c8c:	682b      	ldr	r3, [r5, #0]
 8011c8e:	b103      	cbz	r3, 8011c92 <_lseek_r+0x1e>
 8011c90:	6023      	str	r3, [r4, #0]
 8011c92:	bd38      	pop	{r3, r4, r5, pc}
 8011c94:	20000760 	.word	0x20000760

08011c98 <_read_r>:
 8011c98:	b538      	push	{r3, r4, r5, lr}
 8011c9a:	4d07      	ldr	r5, [pc, #28]	; (8011cb8 <_read_r+0x20>)
 8011c9c:	4604      	mov	r4, r0
 8011c9e:	4608      	mov	r0, r1
 8011ca0:	4611      	mov	r1, r2
 8011ca2:	2200      	movs	r2, #0
 8011ca4:	602a      	str	r2, [r5, #0]
 8011ca6:	461a      	mov	r2, r3
 8011ca8:	f7f2 f818 	bl	8003cdc <_read>
 8011cac:	1c43      	adds	r3, r0, #1
 8011cae:	d102      	bne.n	8011cb6 <_read_r+0x1e>
 8011cb0:	682b      	ldr	r3, [r5, #0]
 8011cb2:	b103      	cbz	r3, 8011cb6 <_read_r+0x1e>
 8011cb4:	6023      	str	r3, [r4, #0]
 8011cb6:	bd38      	pop	{r3, r4, r5, pc}
 8011cb8:	20000760 	.word	0x20000760

08011cbc <_write_r>:
 8011cbc:	b538      	push	{r3, r4, r5, lr}
 8011cbe:	4d07      	ldr	r5, [pc, #28]	; (8011cdc <_write_r+0x20>)
 8011cc0:	4604      	mov	r4, r0
 8011cc2:	4608      	mov	r0, r1
 8011cc4:	4611      	mov	r1, r2
 8011cc6:	2200      	movs	r2, #0
 8011cc8:	602a      	str	r2, [r5, #0]
 8011cca:	461a      	mov	r2, r3
 8011ccc:	f7f2 f823 	bl	8003d16 <_write>
 8011cd0:	1c43      	adds	r3, r0, #1
 8011cd2:	d102      	bne.n	8011cda <_write_r+0x1e>
 8011cd4:	682b      	ldr	r3, [r5, #0]
 8011cd6:	b103      	cbz	r3, 8011cda <_write_r+0x1e>
 8011cd8:	6023      	str	r3, [r4, #0]
 8011cda:	bd38      	pop	{r3, r4, r5, pc}
 8011cdc:	20000760 	.word	0x20000760

08011ce0 <__errno>:
 8011ce0:	4b01      	ldr	r3, [pc, #4]	; (8011ce8 <__errno+0x8>)
 8011ce2:	6818      	ldr	r0, [r3, #0]
 8011ce4:	4770      	bx	lr
 8011ce6:	bf00      	nop
 8011ce8:	200000ac 	.word	0x200000ac

08011cec <__libc_init_array>:
 8011cec:	b570      	push	{r4, r5, r6, lr}
 8011cee:	4d0d      	ldr	r5, [pc, #52]	; (8011d24 <__libc_init_array+0x38>)
 8011cf0:	4c0d      	ldr	r4, [pc, #52]	; (8011d28 <__libc_init_array+0x3c>)
 8011cf2:	1b64      	subs	r4, r4, r5
 8011cf4:	10a4      	asrs	r4, r4, #2
 8011cf6:	2600      	movs	r6, #0
 8011cf8:	42a6      	cmp	r6, r4
 8011cfa:	d109      	bne.n	8011d10 <__libc_init_array+0x24>
 8011cfc:	4d0b      	ldr	r5, [pc, #44]	; (8011d2c <__libc_init_array+0x40>)
 8011cfe:	4c0c      	ldr	r4, [pc, #48]	; (8011d30 <__libc_init_array+0x44>)
 8011d00:	f000 ff34 	bl	8012b6c <_init>
 8011d04:	1b64      	subs	r4, r4, r5
 8011d06:	10a4      	asrs	r4, r4, #2
 8011d08:	2600      	movs	r6, #0
 8011d0a:	42a6      	cmp	r6, r4
 8011d0c:	d105      	bne.n	8011d1a <__libc_init_array+0x2e>
 8011d0e:	bd70      	pop	{r4, r5, r6, pc}
 8011d10:	f855 3b04 	ldr.w	r3, [r5], #4
 8011d14:	4798      	blx	r3
 8011d16:	3601      	adds	r6, #1
 8011d18:	e7ee      	b.n	8011cf8 <__libc_init_array+0xc>
 8011d1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8011d1e:	4798      	blx	r3
 8011d20:	3601      	adds	r6, #1
 8011d22:	e7f2      	b.n	8011d0a <__libc_init_array+0x1e>
 8011d24:	080145a0 	.word	0x080145a0
 8011d28:	080145a0 	.word	0x080145a0
 8011d2c:	080145a0 	.word	0x080145a0
 8011d30:	080145a4 	.word	0x080145a4

08011d34 <__retarget_lock_init_recursive>:
 8011d34:	4770      	bx	lr

08011d36 <__retarget_lock_acquire_recursive>:
 8011d36:	4770      	bx	lr

08011d38 <__retarget_lock_release_recursive>:
 8011d38:	4770      	bx	lr

08011d3a <memcpy>:
 8011d3a:	440a      	add	r2, r1
 8011d3c:	4291      	cmp	r1, r2
 8011d3e:	f100 33ff 	add.w	r3, r0, #4294967295
 8011d42:	d100      	bne.n	8011d46 <memcpy+0xc>
 8011d44:	4770      	bx	lr
 8011d46:	b510      	push	{r4, lr}
 8011d48:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011d4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011d50:	4291      	cmp	r1, r2
 8011d52:	d1f9      	bne.n	8011d48 <memcpy+0xe>
 8011d54:	bd10      	pop	{r4, pc}

08011d56 <abort>:
 8011d56:	b508      	push	{r3, lr}
 8011d58:	2006      	movs	r0, #6
 8011d5a:	f000 fe81 	bl	8012a60 <raise>
 8011d5e:	2001      	movs	r0, #1
 8011d60:	f7f1 ffb2 	bl	8003cc8 <_exit>

08011d64 <_free_r>:
 8011d64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011d66:	2900      	cmp	r1, #0
 8011d68:	d044      	beq.n	8011df4 <_free_r+0x90>
 8011d6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011d6e:	9001      	str	r0, [sp, #4]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	f1a1 0404 	sub.w	r4, r1, #4
 8011d76:	bfb8      	it	lt
 8011d78:	18e4      	addlt	r4, r4, r3
 8011d7a:	f000 f8e7 	bl	8011f4c <__malloc_lock>
 8011d7e:	4a1e      	ldr	r2, [pc, #120]	; (8011df8 <_free_r+0x94>)
 8011d80:	9801      	ldr	r0, [sp, #4]
 8011d82:	6813      	ldr	r3, [r2, #0]
 8011d84:	b933      	cbnz	r3, 8011d94 <_free_r+0x30>
 8011d86:	6063      	str	r3, [r4, #4]
 8011d88:	6014      	str	r4, [r2, #0]
 8011d8a:	b003      	add	sp, #12
 8011d8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011d90:	f000 b8e2 	b.w	8011f58 <__malloc_unlock>
 8011d94:	42a3      	cmp	r3, r4
 8011d96:	d908      	bls.n	8011daa <_free_r+0x46>
 8011d98:	6825      	ldr	r5, [r4, #0]
 8011d9a:	1961      	adds	r1, r4, r5
 8011d9c:	428b      	cmp	r3, r1
 8011d9e:	bf01      	itttt	eq
 8011da0:	6819      	ldreq	r1, [r3, #0]
 8011da2:	685b      	ldreq	r3, [r3, #4]
 8011da4:	1949      	addeq	r1, r1, r5
 8011da6:	6021      	streq	r1, [r4, #0]
 8011da8:	e7ed      	b.n	8011d86 <_free_r+0x22>
 8011daa:	461a      	mov	r2, r3
 8011dac:	685b      	ldr	r3, [r3, #4]
 8011dae:	b10b      	cbz	r3, 8011db4 <_free_r+0x50>
 8011db0:	42a3      	cmp	r3, r4
 8011db2:	d9fa      	bls.n	8011daa <_free_r+0x46>
 8011db4:	6811      	ldr	r1, [r2, #0]
 8011db6:	1855      	adds	r5, r2, r1
 8011db8:	42a5      	cmp	r5, r4
 8011dba:	d10b      	bne.n	8011dd4 <_free_r+0x70>
 8011dbc:	6824      	ldr	r4, [r4, #0]
 8011dbe:	4421      	add	r1, r4
 8011dc0:	1854      	adds	r4, r2, r1
 8011dc2:	42a3      	cmp	r3, r4
 8011dc4:	6011      	str	r1, [r2, #0]
 8011dc6:	d1e0      	bne.n	8011d8a <_free_r+0x26>
 8011dc8:	681c      	ldr	r4, [r3, #0]
 8011dca:	685b      	ldr	r3, [r3, #4]
 8011dcc:	6053      	str	r3, [r2, #4]
 8011dce:	440c      	add	r4, r1
 8011dd0:	6014      	str	r4, [r2, #0]
 8011dd2:	e7da      	b.n	8011d8a <_free_r+0x26>
 8011dd4:	d902      	bls.n	8011ddc <_free_r+0x78>
 8011dd6:	230c      	movs	r3, #12
 8011dd8:	6003      	str	r3, [r0, #0]
 8011dda:	e7d6      	b.n	8011d8a <_free_r+0x26>
 8011ddc:	6825      	ldr	r5, [r4, #0]
 8011dde:	1961      	adds	r1, r4, r5
 8011de0:	428b      	cmp	r3, r1
 8011de2:	bf04      	itt	eq
 8011de4:	6819      	ldreq	r1, [r3, #0]
 8011de6:	685b      	ldreq	r3, [r3, #4]
 8011de8:	6063      	str	r3, [r4, #4]
 8011dea:	bf04      	itt	eq
 8011dec:	1949      	addeq	r1, r1, r5
 8011dee:	6021      	streq	r1, [r4, #0]
 8011df0:	6054      	str	r4, [r2, #4]
 8011df2:	e7ca      	b.n	8011d8a <_free_r+0x26>
 8011df4:	b003      	add	sp, #12
 8011df6:	bd30      	pop	{r4, r5, pc}
 8011df8:	20000768 	.word	0x20000768

08011dfc <malloc>:
 8011dfc:	4b02      	ldr	r3, [pc, #8]	; (8011e08 <malloc+0xc>)
 8011dfe:	4601      	mov	r1, r0
 8011e00:	6818      	ldr	r0, [r3, #0]
 8011e02:	f000 b823 	b.w	8011e4c <_malloc_r>
 8011e06:	bf00      	nop
 8011e08:	200000ac 	.word	0x200000ac

08011e0c <sbrk_aligned>:
 8011e0c:	b570      	push	{r4, r5, r6, lr}
 8011e0e:	4e0e      	ldr	r6, [pc, #56]	; (8011e48 <sbrk_aligned+0x3c>)
 8011e10:	460c      	mov	r4, r1
 8011e12:	6831      	ldr	r1, [r6, #0]
 8011e14:	4605      	mov	r5, r0
 8011e16:	b911      	cbnz	r1, 8011e1e <sbrk_aligned+0x12>
 8011e18:	f000 fe60 	bl	8012adc <_sbrk_r>
 8011e1c:	6030      	str	r0, [r6, #0]
 8011e1e:	4621      	mov	r1, r4
 8011e20:	4628      	mov	r0, r5
 8011e22:	f000 fe5b 	bl	8012adc <_sbrk_r>
 8011e26:	1c43      	adds	r3, r0, #1
 8011e28:	d00a      	beq.n	8011e40 <sbrk_aligned+0x34>
 8011e2a:	1cc4      	adds	r4, r0, #3
 8011e2c:	f024 0403 	bic.w	r4, r4, #3
 8011e30:	42a0      	cmp	r0, r4
 8011e32:	d007      	beq.n	8011e44 <sbrk_aligned+0x38>
 8011e34:	1a21      	subs	r1, r4, r0
 8011e36:	4628      	mov	r0, r5
 8011e38:	f000 fe50 	bl	8012adc <_sbrk_r>
 8011e3c:	3001      	adds	r0, #1
 8011e3e:	d101      	bne.n	8011e44 <sbrk_aligned+0x38>
 8011e40:	f04f 34ff 	mov.w	r4, #4294967295
 8011e44:	4620      	mov	r0, r4
 8011e46:	bd70      	pop	{r4, r5, r6, pc}
 8011e48:	2000076c 	.word	0x2000076c

08011e4c <_malloc_r>:
 8011e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e50:	1ccd      	adds	r5, r1, #3
 8011e52:	f025 0503 	bic.w	r5, r5, #3
 8011e56:	3508      	adds	r5, #8
 8011e58:	2d0c      	cmp	r5, #12
 8011e5a:	bf38      	it	cc
 8011e5c:	250c      	movcc	r5, #12
 8011e5e:	2d00      	cmp	r5, #0
 8011e60:	4607      	mov	r7, r0
 8011e62:	db01      	blt.n	8011e68 <_malloc_r+0x1c>
 8011e64:	42a9      	cmp	r1, r5
 8011e66:	d905      	bls.n	8011e74 <_malloc_r+0x28>
 8011e68:	230c      	movs	r3, #12
 8011e6a:	603b      	str	r3, [r7, #0]
 8011e6c:	2600      	movs	r6, #0
 8011e6e:	4630      	mov	r0, r6
 8011e70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e74:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8011f48 <_malloc_r+0xfc>
 8011e78:	f000 f868 	bl	8011f4c <__malloc_lock>
 8011e7c:	f8d8 3000 	ldr.w	r3, [r8]
 8011e80:	461c      	mov	r4, r3
 8011e82:	bb5c      	cbnz	r4, 8011edc <_malloc_r+0x90>
 8011e84:	4629      	mov	r1, r5
 8011e86:	4638      	mov	r0, r7
 8011e88:	f7ff ffc0 	bl	8011e0c <sbrk_aligned>
 8011e8c:	1c43      	adds	r3, r0, #1
 8011e8e:	4604      	mov	r4, r0
 8011e90:	d155      	bne.n	8011f3e <_malloc_r+0xf2>
 8011e92:	f8d8 4000 	ldr.w	r4, [r8]
 8011e96:	4626      	mov	r6, r4
 8011e98:	2e00      	cmp	r6, #0
 8011e9a:	d145      	bne.n	8011f28 <_malloc_r+0xdc>
 8011e9c:	2c00      	cmp	r4, #0
 8011e9e:	d048      	beq.n	8011f32 <_malloc_r+0xe6>
 8011ea0:	6823      	ldr	r3, [r4, #0]
 8011ea2:	4631      	mov	r1, r6
 8011ea4:	4638      	mov	r0, r7
 8011ea6:	eb04 0903 	add.w	r9, r4, r3
 8011eaa:	f000 fe17 	bl	8012adc <_sbrk_r>
 8011eae:	4581      	cmp	r9, r0
 8011eb0:	d13f      	bne.n	8011f32 <_malloc_r+0xe6>
 8011eb2:	6821      	ldr	r1, [r4, #0]
 8011eb4:	1a6d      	subs	r5, r5, r1
 8011eb6:	4629      	mov	r1, r5
 8011eb8:	4638      	mov	r0, r7
 8011eba:	f7ff ffa7 	bl	8011e0c <sbrk_aligned>
 8011ebe:	3001      	adds	r0, #1
 8011ec0:	d037      	beq.n	8011f32 <_malloc_r+0xe6>
 8011ec2:	6823      	ldr	r3, [r4, #0]
 8011ec4:	442b      	add	r3, r5
 8011ec6:	6023      	str	r3, [r4, #0]
 8011ec8:	f8d8 3000 	ldr.w	r3, [r8]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d038      	beq.n	8011f42 <_malloc_r+0xf6>
 8011ed0:	685a      	ldr	r2, [r3, #4]
 8011ed2:	42a2      	cmp	r2, r4
 8011ed4:	d12b      	bne.n	8011f2e <_malloc_r+0xe2>
 8011ed6:	2200      	movs	r2, #0
 8011ed8:	605a      	str	r2, [r3, #4]
 8011eda:	e00f      	b.n	8011efc <_malloc_r+0xb0>
 8011edc:	6822      	ldr	r2, [r4, #0]
 8011ede:	1b52      	subs	r2, r2, r5
 8011ee0:	d41f      	bmi.n	8011f22 <_malloc_r+0xd6>
 8011ee2:	2a0b      	cmp	r2, #11
 8011ee4:	d917      	bls.n	8011f16 <_malloc_r+0xca>
 8011ee6:	1961      	adds	r1, r4, r5
 8011ee8:	42a3      	cmp	r3, r4
 8011eea:	6025      	str	r5, [r4, #0]
 8011eec:	bf18      	it	ne
 8011eee:	6059      	strne	r1, [r3, #4]
 8011ef0:	6863      	ldr	r3, [r4, #4]
 8011ef2:	bf08      	it	eq
 8011ef4:	f8c8 1000 	streq.w	r1, [r8]
 8011ef8:	5162      	str	r2, [r4, r5]
 8011efa:	604b      	str	r3, [r1, #4]
 8011efc:	4638      	mov	r0, r7
 8011efe:	f104 060b 	add.w	r6, r4, #11
 8011f02:	f000 f829 	bl	8011f58 <__malloc_unlock>
 8011f06:	f026 0607 	bic.w	r6, r6, #7
 8011f0a:	1d23      	adds	r3, r4, #4
 8011f0c:	1af2      	subs	r2, r6, r3
 8011f0e:	d0ae      	beq.n	8011e6e <_malloc_r+0x22>
 8011f10:	1b9b      	subs	r3, r3, r6
 8011f12:	50a3      	str	r3, [r4, r2]
 8011f14:	e7ab      	b.n	8011e6e <_malloc_r+0x22>
 8011f16:	42a3      	cmp	r3, r4
 8011f18:	6862      	ldr	r2, [r4, #4]
 8011f1a:	d1dd      	bne.n	8011ed8 <_malloc_r+0x8c>
 8011f1c:	f8c8 2000 	str.w	r2, [r8]
 8011f20:	e7ec      	b.n	8011efc <_malloc_r+0xb0>
 8011f22:	4623      	mov	r3, r4
 8011f24:	6864      	ldr	r4, [r4, #4]
 8011f26:	e7ac      	b.n	8011e82 <_malloc_r+0x36>
 8011f28:	4634      	mov	r4, r6
 8011f2a:	6876      	ldr	r6, [r6, #4]
 8011f2c:	e7b4      	b.n	8011e98 <_malloc_r+0x4c>
 8011f2e:	4613      	mov	r3, r2
 8011f30:	e7cc      	b.n	8011ecc <_malloc_r+0x80>
 8011f32:	230c      	movs	r3, #12
 8011f34:	603b      	str	r3, [r7, #0]
 8011f36:	4638      	mov	r0, r7
 8011f38:	f000 f80e 	bl	8011f58 <__malloc_unlock>
 8011f3c:	e797      	b.n	8011e6e <_malloc_r+0x22>
 8011f3e:	6025      	str	r5, [r4, #0]
 8011f40:	e7dc      	b.n	8011efc <_malloc_r+0xb0>
 8011f42:	605b      	str	r3, [r3, #4]
 8011f44:	deff      	udf	#255	; 0xff
 8011f46:	bf00      	nop
 8011f48:	20000768 	.word	0x20000768

08011f4c <__malloc_lock>:
 8011f4c:	4801      	ldr	r0, [pc, #4]	; (8011f54 <__malloc_lock+0x8>)
 8011f4e:	f7ff bef2 	b.w	8011d36 <__retarget_lock_acquire_recursive>
 8011f52:	bf00      	nop
 8011f54:	20000764 	.word	0x20000764

08011f58 <__malloc_unlock>:
 8011f58:	4801      	ldr	r0, [pc, #4]	; (8011f60 <__malloc_unlock+0x8>)
 8011f5a:	f7ff beed 	b.w	8011d38 <__retarget_lock_release_recursive>
 8011f5e:	bf00      	nop
 8011f60:	20000764 	.word	0x20000764

08011f64 <__ssputs_r>:
 8011f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f68:	688e      	ldr	r6, [r1, #8]
 8011f6a:	461f      	mov	r7, r3
 8011f6c:	42be      	cmp	r6, r7
 8011f6e:	680b      	ldr	r3, [r1, #0]
 8011f70:	4682      	mov	sl, r0
 8011f72:	460c      	mov	r4, r1
 8011f74:	4690      	mov	r8, r2
 8011f76:	d82c      	bhi.n	8011fd2 <__ssputs_r+0x6e>
 8011f78:	898a      	ldrh	r2, [r1, #12]
 8011f7a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011f7e:	d026      	beq.n	8011fce <__ssputs_r+0x6a>
 8011f80:	6965      	ldr	r5, [r4, #20]
 8011f82:	6909      	ldr	r1, [r1, #16]
 8011f84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011f88:	eba3 0901 	sub.w	r9, r3, r1
 8011f8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011f90:	1c7b      	adds	r3, r7, #1
 8011f92:	444b      	add	r3, r9
 8011f94:	106d      	asrs	r5, r5, #1
 8011f96:	429d      	cmp	r5, r3
 8011f98:	bf38      	it	cc
 8011f9a:	461d      	movcc	r5, r3
 8011f9c:	0553      	lsls	r3, r2, #21
 8011f9e:	d527      	bpl.n	8011ff0 <__ssputs_r+0x8c>
 8011fa0:	4629      	mov	r1, r5
 8011fa2:	f7ff ff53 	bl	8011e4c <_malloc_r>
 8011fa6:	4606      	mov	r6, r0
 8011fa8:	b360      	cbz	r0, 8012004 <__ssputs_r+0xa0>
 8011faa:	6921      	ldr	r1, [r4, #16]
 8011fac:	464a      	mov	r2, r9
 8011fae:	f7ff fec4 	bl	8011d3a <memcpy>
 8011fb2:	89a3      	ldrh	r3, [r4, #12]
 8011fb4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011fbc:	81a3      	strh	r3, [r4, #12]
 8011fbe:	6126      	str	r6, [r4, #16]
 8011fc0:	6165      	str	r5, [r4, #20]
 8011fc2:	444e      	add	r6, r9
 8011fc4:	eba5 0509 	sub.w	r5, r5, r9
 8011fc8:	6026      	str	r6, [r4, #0]
 8011fca:	60a5      	str	r5, [r4, #8]
 8011fcc:	463e      	mov	r6, r7
 8011fce:	42be      	cmp	r6, r7
 8011fd0:	d900      	bls.n	8011fd4 <__ssputs_r+0x70>
 8011fd2:	463e      	mov	r6, r7
 8011fd4:	6820      	ldr	r0, [r4, #0]
 8011fd6:	4632      	mov	r2, r6
 8011fd8:	4641      	mov	r1, r8
 8011fda:	f000 fcff 	bl	80129dc <memmove>
 8011fde:	68a3      	ldr	r3, [r4, #8]
 8011fe0:	1b9b      	subs	r3, r3, r6
 8011fe2:	60a3      	str	r3, [r4, #8]
 8011fe4:	6823      	ldr	r3, [r4, #0]
 8011fe6:	4433      	add	r3, r6
 8011fe8:	6023      	str	r3, [r4, #0]
 8011fea:	2000      	movs	r0, #0
 8011fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ff0:	462a      	mov	r2, r5
 8011ff2:	f000 fd83 	bl	8012afc <_realloc_r>
 8011ff6:	4606      	mov	r6, r0
 8011ff8:	2800      	cmp	r0, #0
 8011ffa:	d1e0      	bne.n	8011fbe <__ssputs_r+0x5a>
 8011ffc:	6921      	ldr	r1, [r4, #16]
 8011ffe:	4650      	mov	r0, sl
 8012000:	f7ff feb0 	bl	8011d64 <_free_r>
 8012004:	230c      	movs	r3, #12
 8012006:	f8ca 3000 	str.w	r3, [sl]
 801200a:	89a3      	ldrh	r3, [r4, #12]
 801200c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012010:	81a3      	strh	r3, [r4, #12]
 8012012:	f04f 30ff 	mov.w	r0, #4294967295
 8012016:	e7e9      	b.n	8011fec <__ssputs_r+0x88>

08012018 <_svfiprintf_r>:
 8012018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801201c:	4698      	mov	r8, r3
 801201e:	898b      	ldrh	r3, [r1, #12]
 8012020:	061b      	lsls	r3, r3, #24
 8012022:	b09d      	sub	sp, #116	; 0x74
 8012024:	4607      	mov	r7, r0
 8012026:	460d      	mov	r5, r1
 8012028:	4614      	mov	r4, r2
 801202a:	d50e      	bpl.n	801204a <_svfiprintf_r+0x32>
 801202c:	690b      	ldr	r3, [r1, #16]
 801202e:	b963      	cbnz	r3, 801204a <_svfiprintf_r+0x32>
 8012030:	2140      	movs	r1, #64	; 0x40
 8012032:	f7ff ff0b 	bl	8011e4c <_malloc_r>
 8012036:	6028      	str	r0, [r5, #0]
 8012038:	6128      	str	r0, [r5, #16]
 801203a:	b920      	cbnz	r0, 8012046 <_svfiprintf_r+0x2e>
 801203c:	230c      	movs	r3, #12
 801203e:	603b      	str	r3, [r7, #0]
 8012040:	f04f 30ff 	mov.w	r0, #4294967295
 8012044:	e0d0      	b.n	80121e8 <_svfiprintf_r+0x1d0>
 8012046:	2340      	movs	r3, #64	; 0x40
 8012048:	616b      	str	r3, [r5, #20]
 801204a:	2300      	movs	r3, #0
 801204c:	9309      	str	r3, [sp, #36]	; 0x24
 801204e:	2320      	movs	r3, #32
 8012050:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012054:	f8cd 800c 	str.w	r8, [sp, #12]
 8012058:	2330      	movs	r3, #48	; 0x30
 801205a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8012200 <_svfiprintf_r+0x1e8>
 801205e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012062:	f04f 0901 	mov.w	r9, #1
 8012066:	4623      	mov	r3, r4
 8012068:	469a      	mov	sl, r3
 801206a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801206e:	b10a      	cbz	r2, 8012074 <_svfiprintf_r+0x5c>
 8012070:	2a25      	cmp	r2, #37	; 0x25
 8012072:	d1f9      	bne.n	8012068 <_svfiprintf_r+0x50>
 8012074:	ebba 0b04 	subs.w	fp, sl, r4
 8012078:	d00b      	beq.n	8012092 <_svfiprintf_r+0x7a>
 801207a:	465b      	mov	r3, fp
 801207c:	4622      	mov	r2, r4
 801207e:	4629      	mov	r1, r5
 8012080:	4638      	mov	r0, r7
 8012082:	f7ff ff6f 	bl	8011f64 <__ssputs_r>
 8012086:	3001      	adds	r0, #1
 8012088:	f000 80a9 	beq.w	80121de <_svfiprintf_r+0x1c6>
 801208c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801208e:	445a      	add	r2, fp
 8012090:	9209      	str	r2, [sp, #36]	; 0x24
 8012092:	f89a 3000 	ldrb.w	r3, [sl]
 8012096:	2b00      	cmp	r3, #0
 8012098:	f000 80a1 	beq.w	80121de <_svfiprintf_r+0x1c6>
 801209c:	2300      	movs	r3, #0
 801209e:	f04f 32ff 	mov.w	r2, #4294967295
 80120a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80120a6:	f10a 0a01 	add.w	sl, sl, #1
 80120aa:	9304      	str	r3, [sp, #16]
 80120ac:	9307      	str	r3, [sp, #28]
 80120ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80120b2:	931a      	str	r3, [sp, #104]	; 0x68
 80120b4:	4654      	mov	r4, sl
 80120b6:	2205      	movs	r2, #5
 80120b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120bc:	4850      	ldr	r0, [pc, #320]	; (8012200 <_svfiprintf_r+0x1e8>)
 80120be:	f7ee f917 	bl	80002f0 <memchr>
 80120c2:	9a04      	ldr	r2, [sp, #16]
 80120c4:	b9d8      	cbnz	r0, 80120fe <_svfiprintf_r+0xe6>
 80120c6:	06d0      	lsls	r0, r2, #27
 80120c8:	bf44      	itt	mi
 80120ca:	2320      	movmi	r3, #32
 80120cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80120d0:	0711      	lsls	r1, r2, #28
 80120d2:	bf44      	itt	mi
 80120d4:	232b      	movmi	r3, #43	; 0x2b
 80120d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80120da:	f89a 3000 	ldrb.w	r3, [sl]
 80120de:	2b2a      	cmp	r3, #42	; 0x2a
 80120e0:	d015      	beq.n	801210e <_svfiprintf_r+0xf6>
 80120e2:	9a07      	ldr	r2, [sp, #28]
 80120e4:	4654      	mov	r4, sl
 80120e6:	2000      	movs	r0, #0
 80120e8:	f04f 0c0a 	mov.w	ip, #10
 80120ec:	4621      	mov	r1, r4
 80120ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80120f2:	3b30      	subs	r3, #48	; 0x30
 80120f4:	2b09      	cmp	r3, #9
 80120f6:	d94d      	bls.n	8012194 <_svfiprintf_r+0x17c>
 80120f8:	b1b0      	cbz	r0, 8012128 <_svfiprintf_r+0x110>
 80120fa:	9207      	str	r2, [sp, #28]
 80120fc:	e014      	b.n	8012128 <_svfiprintf_r+0x110>
 80120fe:	eba0 0308 	sub.w	r3, r0, r8
 8012102:	fa09 f303 	lsl.w	r3, r9, r3
 8012106:	4313      	orrs	r3, r2
 8012108:	9304      	str	r3, [sp, #16]
 801210a:	46a2      	mov	sl, r4
 801210c:	e7d2      	b.n	80120b4 <_svfiprintf_r+0x9c>
 801210e:	9b03      	ldr	r3, [sp, #12]
 8012110:	1d19      	adds	r1, r3, #4
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	9103      	str	r1, [sp, #12]
 8012116:	2b00      	cmp	r3, #0
 8012118:	bfbb      	ittet	lt
 801211a:	425b      	neglt	r3, r3
 801211c:	f042 0202 	orrlt.w	r2, r2, #2
 8012120:	9307      	strge	r3, [sp, #28]
 8012122:	9307      	strlt	r3, [sp, #28]
 8012124:	bfb8      	it	lt
 8012126:	9204      	strlt	r2, [sp, #16]
 8012128:	7823      	ldrb	r3, [r4, #0]
 801212a:	2b2e      	cmp	r3, #46	; 0x2e
 801212c:	d10c      	bne.n	8012148 <_svfiprintf_r+0x130>
 801212e:	7863      	ldrb	r3, [r4, #1]
 8012130:	2b2a      	cmp	r3, #42	; 0x2a
 8012132:	d134      	bne.n	801219e <_svfiprintf_r+0x186>
 8012134:	9b03      	ldr	r3, [sp, #12]
 8012136:	1d1a      	adds	r2, r3, #4
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	9203      	str	r2, [sp, #12]
 801213c:	2b00      	cmp	r3, #0
 801213e:	bfb8      	it	lt
 8012140:	f04f 33ff 	movlt.w	r3, #4294967295
 8012144:	3402      	adds	r4, #2
 8012146:	9305      	str	r3, [sp, #20]
 8012148:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8012210 <_svfiprintf_r+0x1f8>
 801214c:	7821      	ldrb	r1, [r4, #0]
 801214e:	2203      	movs	r2, #3
 8012150:	4650      	mov	r0, sl
 8012152:	f7ee f8cd 	bl	80002f0 <memchr>
 8012156:	b138      	cbz	r0, 8012168 <_svfiprintf_r+0x150>
 8012158:	9b04      	ldr	r3, [sp, #16]
 801215a:	eba0 000a 	sub.w	r0, r0, sl
 801215e:	2240      	movs	r2, #64	; 0x40
 8012160:	4082      	lsls	r2, r0
 8012162:	4313      	orrs	r3, r2
 8012164:	3401      	adds	r4, #1
 8012166:	9304      	str	r3, [sp, #16]
 8012168:	f814 1b01 	ldrb.w	r1, [r4], #1
 801216c:	4825      	ldr	r0, [pc, #148]	; (8012204 <_svfiprintf_r+0x1ec>)
 801216e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012172:	2206      	movs	r2, #6
 8012174:	f7ee f8bc 	bl	80002f0 <memchr>
 8012178:	2800      	cmp	r0, #0
 801217a:	d038      	beq.n	80121ee <_svfiprintf_r+0x1d6>
 801217c:	4b22      	ldr	r3, [pc, #136]	; (8012208 <_svfiprintf_r+0x1f0>)
 801217e:	bb1b      	cbnz	r3, 80121c8 <_svfiprintf_r+0x1b0>
 8012180:	9b03      	ldr	r3, [sp, #12]
 8012182:	3307      	adds	r3, #7
 8012184:	f023 0307 	bic.w	r3, r3, #7
 8012188:	3308      	adds	r3, #8
 801218a:	9303      	str	r3, [sp, #12]
 801218c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801218e:	4433      	add	r3, r6
 8012190:	9309      	str	r3, [sp, #36]	; 0x24
 8012192:	e768      	b.n	8012066 <_svfiprintf_r+0x4e>
 8012194:	fb0c 3202 	mla	r2, ip, r2, r3
 8012198:	460c      	mov	r4, r1
 801219a:	2001      	movs	r0, #1
 801219c:	e7a6      	b.n	80120ec <_svfiprintf_r+0xd4>
 801219e:	2300      	movs	r3, #0
 80121a0:	3401      	adds	r4, #1
 80121a2:	9305      	str	r3, [sp, #20]
 80121a4:	4619      	mov	r1, r3
 80121a6:	f04f 0c0a 	mov.w	ip, #10
 80121aa:	4620      	mov	r0, r4
 80121ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80121b0:	3a30      	subs	r2, #48	; 0x30
 80121b2:	2a09      	cmp	r2, #9
 80121b4:	d903      	bls.n	80121be <_svfiprintf_r+0x1a6>
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d0c6      	beq.n	8012148 <_svfiprintf_r+0x130>
 80121ba:	9105      	str	r1, [sp, #20]
 80121bc:	e7c4      	b.n	8012148 <_svfiprintf_r+0x130>
 80121be:	fb0c 2101 	mla	r1, ip, r1, r2
 80121c2:	4604      	mov	r4, r0
 80121c4:	2301      	movs	r3, #1
 80121c6:	e7f0      	b.n	80121aa <_svfiprintf_r+0x192>
 80121c8:	ab03      	add	r3, sp, #12
 80121ca:	9300      	str	r3, [sp, #0]
 80121cc:	462a      	mov	r2, r5
 80121ce:	4b0f      	ldr	r3, [pc, #60]	; (801220c <_svfiprintf_r+0x1f4>)
 80121d0:	a904      	add	r1, sp, #16
 80121d2:	4638      	mov	r0, r7
 80121d4:	f3af 8000 	nop.w
 80121d8:	1c42      	adds	r2, r0, #1
 80121da:	4606      	mov	r6, r0
 80121dc:	d1d6      	bne.n	801218c <_svfiprintf_r+0x174>
 80121de:	89ab      	ldrh	r3, [r5, #12]
 80121e0:	065b      	lsls	r3, r3, #25
 80121e2:	f53f af2d 	bmi.w	8012040 <_svfiprintf_r+0x28>
 80121e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80121e8:	b01d      	add	sp, #116	; 0x74
 80121ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121ee:	ab03      	add	r3, sp, #12
 80121f0:	9300      	str	r3, [sp, #0]
 80121f2:	462a      	mov	r2, r5
 80121f4:	4b05      	ldr	r3, [pc, #20]	; (801220c <_svfiprintf_r+0x1f4>)
 80121f6:	a904      	add	r1, sp, #16
 80121f8:	4638      	mov	r0, r7
 80121fa:	f000 f9bd 	bl	8012578 <_printf_i>
 80121fe:	e7eb      	b.n	80121d8 <_svfiprintf_r+0x1c0>
 8012200:	0801456b 	.word	0x0801456b
 8012204:	08014575 	.word	0x08014575
 8012208:	00000000 	.word	0x00000000
 801220c:	08011f65 	.word	0x08011f65
 8012210:	08014571 	.word	0x08014571

08012214 <__sfputc_r>:
 8012214:	6893      	ldr	r3, [r2, #8]
 8012216:	3b01      	subs	r3, #1
 8012218:	2b00      	cmp	r3, #0
 801221a:	b410      	push	{r4}
 801221c:	6093      	str	r3, [r2, #8]
 801221e:	da08      	bge.n	8012232 <__sfputc_r+0x1e>
 8012220:	6994      	ldr	r4, [r2, #24]
 8012222:	42a3      	cmp	r3, r4
 8012224:	db01      	blt.n	801222a <__sfputc_r+0x16>
 8012226:	290a      	cmp	r1, #10
 8012228:	d103      	bne.n	8012232 <__sfputc_r+0x1e>
 801222a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801222e:	f7ff bc74 	b.w	8011b1a <__swbuf_r>
 8012232:	6813      	ldr	r3, [r2, #0]
 8012234:	1c58      	adds	r0, r3, #1
 8012236:	6010      	str	r0, [r2, #0]
 8012238:	7019      	strb	r1, [r3, #0]
 801223a:	4608      	mov	r0, r1
 801223c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012240:	4770      	bx	lr

08012242 <__sfputs_r>:
 8012242:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012244:	4606      	mov	r6, r0
 8012246:	460f      	mov	r7, r1
 8012248:	4614      	mov	r4, r2
 801224a:	18d5      	adds	r5, r2, r3
 801224c:	42ac      	cmp	r4, r5
 801224e:	d101      	bne.n	8012254 <__sfputs_r+0x12>
 8012250:	2000      	movs	r0, #0
 8012252:	e007      	b.n	8012264 <__sfputs_r+0x22>
 8012254:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012258:	463a      	mov	r2, r7
 801225a:	4630      	mov	r0, r6
 801225c:	f7ff ffda 	bl	8012214 <__sfputc_r>
 8012260:	1c43      	adds	r3, r0, #1
 8012262:	d1f3      	bne.n	801224c <__sfputs_r+0xa>
 8012264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012268 <_vfiprintf_r>:
 8012268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801226c:	460d      	mov	r5, r1
 801226e:	b09d      	sub	sp, #116	; 0x74
 8012270:	4614      	mov	r4, r2
 8012272:	4698      	mov	r8, r3
 8012274:	4606      	mov	r6, r0
 8012276:	b118      	cbz	r0, 8012280 <_vfiprintf_r+0x18>
 8012278:	6a03      	ldr	r3, [r0, #32]
 801227a:	b90b      	cbnz	r3, 8012280 <_vfiprintf_r+0x18>
 801227c:	f7ff fb34 	bl	80118e8 <__sinit>
 8012280:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012282:	07d9      	lsls	r1, r3, #31
 8012284:	d405      	bmi.n	8012292 <_vfiprintf_r+0x2a>
 8012286:	89ab      	ldrh	r3, [r5, #12]
 8012288:	059a      	lsls	r2, r3, #22
 801228a:	d402      	bmi.n	8012292 <_vfiprintf_r+0x2a>
 801228c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801228e:	f7ff fd52 	bl	8011d36 <__retarget_lock_acquire_recursive>
 8012292:	89ab      	ldrh	r3, [r5, #12]
 8012294:	071b      	lsls	r3, r3, #28
 8012296:	d501      	bpl.n	801229c <_vfiprintf_r+0x34>
 8012298:	692b      	ldr	r3, [r5, #16]
 801229a:	b99b      	cbnz	r3, 80122c4 <_vfiprintf_r+0x5c>
 801229c:	4629      	mov	r1, r5
 801229e:	4630      	mov	r0, r6
 80122a0:	f7ff fc78 	bl	8011b94 <__swsetup_r>
 80122a4:	b170      	cbz	r0, 80122c4 <_vfiprintf_r+0x5c>
 80122a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80122a8:	07dc      	lsls	r4, r3, #31
 80122aa:	d504      	bpl.n	80122b6 <_vfiprintf_r+0x4e>
 80122ac:	f04f 30ff 	mov.w	r0, #4294967295
 80122b0:	b01d      	add	sp, #116	; 0x74
 80122b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122b6:	89ab      	ldrh	r3, [r5, #12]
 80122b8:	0598      	lsls	r0, r3, #22
 80122ba:	d4f7      	bmi.n	80122ac <_vfiprintf_r+0x44>
 80122bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80122be:	f7ff fd3b 	bl	8011d38 <__retarget_lock_release_recursive>
 80122c2:	e7f3      	b.n	80122ac <_vfiprintf_r+0x44>
 80122c4:	2300      	movs	r3, #0
 80122c6:	9309      	str	r3, [sp, #36]	; 0x24
 80122c8:	2320      	movs	r3, #32
 80122ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80122ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80122d2:	2330      	movs	r3, #48	; 0x30
 80122d4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8012488 <_vfiprintf_r+0x220>
 80122d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80122dc:	f04f 0901 	mov.w	r9, #1
 80122e0:	4623      	mov	r3, r4
 80122e2:	469a      	mov	sl, r3
 80122e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80122e8:	b10a      	cbz	r2, 80122ee <_vfiprintf_r+0x86>
 80122ea:	2a25      	cmp	r2, #37	; 0x25
 80122ec:	d1f9      	bne.n	80122e2 <_vfiprintf_r+0x7a>
 80122ee:	ebba 0b04 	subs.w	fp, sl, r4
 80122f2:	d00b      	beq.n	801230c <_vfiprintf_r+0xa4>
 80122f4:	465b      	mov	r3, fp
 80122f6:	4622      	mov	r2, r4
 80122f8:	4629      	mov	r1, r5
 80122fa:	4630      	mov	r0, r6
 80122fc:	f7ff ffa1 	bl	8012242 <__sfputs_r>
 8012300:	3001      	adds	r0, #1
 8012302:	f000 80a9 	beq.w	8012458 <_vfiprintf_r+0x1f0>
 8012306:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012308:	445a      	add	r2, fp
 801230a:	9209      	str	r2, [sp, #36]	; 0x24
 801230c:	f89a 3000 	ldrb.w	r3, [sl]
 8012310:	2b00      	cmp	r3, #0
 8012312:	f000 80a1 	beq.w	8012458 <_vfiprintf_r+0x1f0>
 8012316:	2300      	movs	r3, #0
 8012318:	f04f 32ff 	mov.w	r2, #4294967295
 801231c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012320:	f10a 0a01 	add.w	sl, sl, #1
 8012324:	9304      	str	r3, [sp, #16]
 8012326:	9307      	str	r3, [sp, #28]
 8012328:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801232c:	931a      	str	r3, [sp, #104]	; 0x68
 801232e:	4654      	mov	r4, sl
 8012330:	2205      	movs	r2, #5
 8012332:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012336:	4854      	ldr	r0, [pc, #336]	; (8012488 <_vfiprintf_r+0x220>)
 8012338:	f7ed ffda 	bl	80002f0 <memchr>
 801233c:	9a04      	ldr	r2, [sp, #16]
 801233e:	b9d8      	cbnz	r0, 8012378 <_vfiprintf_r+0x110>
 8012340:	06d1      	lsls	r1, r2, #27
 8012342:	bf44      	itt	mi
 8012344:	2320      	movmi	r3, #32
 8012346:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801234a:	0713      	lsls	r3, r2, #28
 801234c:	bf44      	itt	mi
 801234e:	232b      	movmi	r3, #43	; 0x2b
 8012350:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012354:	f89a 3000 	ldrb.w	r3, [sl]
 8012358:	2b2a      	cmp	r3, #42	; 0x2a
 801235a:	d015      	beq.n	8012388 <_vfiprintf_r+0x120>
 801235c:	9a07      	ldr	r2, [sp, #28]
 801235e:	4654      	mov	r4, sl
 8012360:	2000      	movs	r0, #0
 8012362:	f04f 0c0a 	mov.w	ip, #10
 8012366:	4621      	mov	r1, r4
 8012368:	f811 3b01 	ldrb.w	r3, [r1], #1
 801236c:	3b30      	subs	r3, #48	; 0x30
 801236e:	2b09      	cmp	r3, #9
 8012370:	d94d      	bls.n	801240e <_vfiprintf_r+0x1a6>
 8012372:	b1b0      	cbz	r0, 80123a2 <_vfiprintf_r+0x13a>
 8012374:	9207      	str	r2, [sp, #28]
 8012376:	e014      	b.n	80123a2 <_vfiprintf_r+0x13a>
 8012378:	eba0 0308 	sub.w	r3, r0, r8
 801237c:	fa09 f303 	lsl.w	r3, r9, r3
 8012380:	4313      	orrs	r3, r2
 8012382:	9304      	str	r3, [sp, #16]
 8012384:	46a2      	mov	sl, r4
 8012386:	e7d2      	b.n	801232e <_vfiprintf_r+0xc6>
 8012388:	9b03      	ldr	r3, [sp, #12]
 801238a:	1d19      	adds	r1, r3, #4
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	9103      	str	r1, [sp, #12]
 8012390:	2b00      	cmp	r3, #0
 8012392:	bfbb      	ittet	lt
 8012394:	425b      	neglt	r3, r3
 8012396:	f042 0202 	orrlt.w	r2, r2, #2
 801239a:	9307      	strge	r3, [sp, #28]
 801239c:	9307      	strlt	r3, [sp, #28]
 801239e:	bfb8      	it	lt
 80123a0:	9204      	strlt	r2, [sp, #16]
 80123a2:	7823      	ldrb	r3, [r4, #0]
 80123a4:	2b2e      	cmp	r3, #46	; 0x2e
 80123a6:	d10c      	bne.n	80123c2 <_vfiprintf_r+0x15a>
 80123a8:	7863      	ldrb	r3, [r4, #1]
 80123aa:	2b2a      	cmp	r3, #42	; 0x2a
 80123ac:	d134      	bne.n	8012418 <_vfiprintf_r+0x1b0>
 80123ae:	9b03      	ldr	r3, [sp, #12]
 80123b0:	1d1a      	adds	r2, r3, #4
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	9203      	str	r2, [sp, #12]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	bfb8      	it	lt
 80123ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80123be:	3402      	adds	r4, #2
 80123c0:	9305      	str	r3, [sp, #20]
 80123c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8012498 <_vfiprintf_r+0x230>
 80123c6:	7821      	ldrb	r1, [r4, #0]
 80123c8:	2203      	movs	r2, #3
 80123ca:	4650      	mov	r0, sl
 80123cc:	f7ed ff90 	bl	80002f0 <memchr>
 80123d0:	b138      	cbz	r0, 80123e2 <_vfiprintf_r+0x17a>
 80123d2:	9b04      	ldr	r3, [sp, #16]
 80123d4:	eba0 000a 	sub.w	r0, r0, sl
 80123d8:	2240      	movs	r2, #64	; 0x40
 80123da:	4082      	lsls	r2, r0
 80123dc:	4313      	orrs	r3, r2
 80123de:	3401      	adds	r4, #1
 80123e0:	9304      	str	r3, [sp, #16]
 80123e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123e6:	4829      	ldr	r0, [pc, #164]	; (801248c <_vfiprintf_r+0x224>)
 80123e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80123ec:	2206      	movs	r2, #6
 80123ee:	f7ed ff7f 	bl	80002f0 <memchr>
 80123f2:	2800      	cmp	r0, #0
 80123f4:	d03f      	beq.n	8012476 <_vfiprintf_r+0x20e>
 80123f6:	4b26      	ldr	r3, [pc, #152]	; (8012490 <_vfiprintf_r+0x228>)
 80123f8:	bb1b      	cbnz	r3, 8012442 <_vfiprintf_r+0x1da>
 80123fa:	9b03      	ldr	r3, [sp, #12]
 80123fc:	3307      	adds	r3, #7
 80123fe:	f023 0307 	bic.w	r3, r3, #7
 8012402:	3308      	adds	r3, #8
 8012404:	9303      	str	r3, [sp, #12]
 8012406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012408:	443b      	add	r3, r7
 801240a:	9309      	str	r3, [sp, #36]	; 0x24
 801240c:	e768      	b.n	80122e0 <_vfiprintf_r+0x78>
 801240e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012412:	460c      	mov	r4, r1
 8012414:	2001      	movs	r0, #1
 8012416:	e7a6      	b.n	8012366 <_vfiprintf_r+0xfe>
 8012418:	2300      	movs	r3, #0
 801241a:	3401      	adds	r4, #1
 801241c:	9305      	str	r3, [sp, #20]
 801241e:	4619      	mov	r1, r3
 8012420:	f04f 0c0a 	mov.w	ip, #10
 8012424:	4620      	mov	r0, r4
 8012426:	f810 2b01 	ldrb.w	r2, [r0], #1
 801242a:	3a30      	subs	r2, #48	; 0x30
 801242c:	2a09      	cmp	r2, #9
 801242e:	d903      	bls.n	8012438 <_vfiprintf_r+0x1d0>
 8012430:	2b00      	cmp	r3, #0
 8012432:	d0c6      	beq.n	80123c2 <_vfiprintf_r+0x15a>
 8012434:	9105      	str	r1, [sp, #20]
 8012436:	e7c4      	b.n	80123c2 <_vfiprintf_r+0x15a>
 8012438:	fb0c 2101 	mla	r1, ip, r1, r2
 801243c:	4604      	mov	r4, r0
 801243e:	2301      	movs	r3, #1
 8012440:	e7f0      	b.n	8012424 <_vfiprintf_r+0x1bc>
 8012442:	ab03      	add	r3, sp, #12
 8012444:	9300      	str	r3, [sp, #0]
 8012446:	462a      	mov	r2, r5
 8012448:	4b12      	ldr	r3, [pc, #72]	; (8012494 <_vfiprintf_r+0x22c>)
 801244a:	a904      	add	r1, sp, #16
 801244c:	4630      	mov	r0, r6
 801244e:	f3af 8000 	nop.w
 8012452:	4607      	mov	r7, r0
 8012454:	1c78      	adds	r0, r7, #1
 8012456:	d1d6      	bne.n	8012406 <_vfiprintf_r+0x19e>
 8012458:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801245a:	07d9      	lsls	r1, r3, #31
 801245c:	d405      	bmi.n	801246a <_vfiprintf_r+0x202>
 801245e:	89ab      	ldrh	r3, [r5, #12]
 8012460:	059a      	lsls	r2, r3, #22
 8012462:	d402      	bmi.n	801246a <_vfiprintf_r+0x202>
 8012464:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012466:	f7ff fc67 	bl	8011d38 <__retarget_lock_release_recursive>
 801246a:	89ab      	ldrh	r3, [r5, #12]
 801246c:	065b      	lsls	r3, r3, #25
 801246e:	f53f af1d 	bmi.w	80122ac <_vfiprintf_r+0x44>
 8012472:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012474:	e71c      	b.n	80122b0 <_vfiprintf_r+0x48>
 8012476:	ab03      	add	r3, sp, #12
 8012478:	9300      	str	r3, [sp, #0]
 801247a:	462a      	mov	r2, r5
 801247c:	4b05      	ldr	r3, [pc, #20]	; (8012494 <_vfiprintf_r+0x22c>)
 801247e:	a904      	add	r1, sp, #16
 8012480:	4630      	mov	r0, r6
 8012482:	f000 f879 	bl	8012578 <_printf_i>
 8012486:	e7e4      	b.n	8012452 <_vfiprintf_r+0x1ea>
 8012488:	0801456b 	.word	0x0801456b
 801248c:	08014575 	.word	0x08014575
 8012490:	00000000 	.word	0x00000000
 8012494:	08012243 	.word	0x08012243
 8012498:	08014571 	.word	0x08014571

0801249c <_printf_common>:
 801249c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80124a0:	4616      	mov	r6, r2
 80124a2:	4699      	mov	r9, r3
 80124a4:	688a      	ldr	r2, [r1, #8]
 80124a6:	690b      	ldr	r3, [r1, #16]
 80124a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80124ac:	4293      	cmp	r3, r2
 80124ae:	bfb8      	it	lt
 80124b0:	4613      	movlt	r3, r2
 80124b2:	6033      	str	r3, [r6, #0]
 80124b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80124b8:	4607      	mov	r7, r0
 80124ba:	460c      	mov	r4, r1
 80124bc:	b10a      	cbz	r2, 80124c2 <_printf_common+0x26>
 80124be:	3301      	adds	r3, #1
 80124c0:	6033      	str	r3, [r6, #0]
 80124c2:	6823      	ldr	r3, [r4, #0]
 80124c4:	0699      	lsls	r1, r3, #26
 80124c6:	bf42      	ittt	mi
 80124c8:	6833      	ldrmi	r3, [r6, #0]
 80124ca:	3302      	addmi	r3, #2
 80124cc:	6033      	strmi	r3, [r6, #0]
 80124ce:	6825      	ldr	r5, [r4, #0]
 80124d0:	f015 0506 	ands.w	r5, r5, #6
 80124d4:	d106      	bne.n	80124e4 <_printf_common+0x48>
 80124d6:	f104 0a19 	add.w	sl, r4, #25
 80124da:	68e3      	ldr	r3, [r4, #12]
 80124dc:	6832      	ldr	r2, [r6, #0]
 80124de:	1a9b      	subs	r3, r3, r2
 80124e0:	42ab      	cmp	r3, r5
 80124e2:	dc26      	bgt.n	8012532 <_printf_common+0x96>
 80124e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80124e8:	1e13      	subs	r3, r2, #0
 80124ea:	6822      	ldr	r2, [r4, #0]
 80124ec:	bf18      	it	ne
 80124ee:	2301      	movne	r3, #1
 80124f0:	0692      	lsls	r2, r2, #26
 80124f2:	d42b      	bmi.n	801254c <_printf_common+0xb0>
 80124f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80124f8:	4649      	mov	r1, r9
 80124fa:	4638      	mov	r0, r7
 80124fc:	47c0      	blx	r8
 80124fe:	3001      	adds	r0, #1
 8012500:	d01e      	beq.n	8012540 <_printf_common+0xa4>
 8012502:	6823      	ldr	r3, [r4, #0]
 8012504:	6922      	ldr	r2, [r4, #16]
 8012506:	f003 0306 	and.w	r3, r3, #6
 801250a:	2b04      	cmp	r3, #4
 801250c:	bf02      	ittt	eq
 801250e:	68e5      	ldreq	r5, [r4, #12]
 8012510:	6833      	ldreq	r3, [r6, #0]
 8012512:	1aed      	subeq	r5, r5, r3
 8012514:	68a3      	ldr	r3, [r4, #8]
 8012516:	bf0c      	ite	eq
 8012518:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801251c:	2500      	movne	r5, #0
 801251e:	4293      	cmp	r3, r2
 8012520:	bfc4      	itt	gt
 8012522:	1a9b      	subgt	r3, r3, r2
 8012524:	18ed      	addgt	r5, r5, r3
 8012526:	2600      	movs	r6, #0
 8012528:	341a      	adds	r4, #26
 801252a:	42b5      	cmp	r5, r6
 801252c:	d11a      	bne.n	8012564 <_printf_common+0xc8>
 801252e:	2000      	movs	r0, #0
 8012530:	e008      	b.n	8012544 <_printf_common+0xa8>
 8012532:	2301      	movs	r3, #1
 8012534:	4652      	mov	r2, sl
 8012536:	4649      	mov	r1, r9
 8012538:	4638      	mov	r0, r7
 801253a:	47c0      	blx	r8
 801253c:	3001      	adds	r0, #1
 801253e:	d103      	bne.n	8012548 <_printf_common+0xac>
 8012540:	f04f 30ff 	mov.w	r0, #4294967295
 8012544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012548:	3501      	adds	r5, #1
 801254a:	e7c6      	b.n	80124da <_printf_common+0x3e>
 801254c:	18e1      	adds	r1, r4, r3
 801254e:	1c5a      	adds	r2, r3, #1
 8012550:	2030      	movs	r0, #48	; 0x30
 8012552:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012556:	4422      	add	r2, r4
 8012558:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801255c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012560:	3302      	adds	r3, #2
 8012562:	e7c7      	b.n	80124f4 <_printf_common+0x58>
 8012564:	2301      	movs	r3, #1
 8012566:	4622      	mov	r2, r4
 8012568:	4649      	mov	r1, r9
 801256a:	4638      	mov	r0, r7
 801256c:	47c0      	blx	r8
 801256e:	3001      	adds	r0, #1
 8012570:	d0e6      	beq.n	8012540 <_printf_common+0xa4>
 8012572:	3601      	adds	r6, #1
 8012574:	e7d9      	b.n	801252a <_printf_common+0x8e>
	...

08012578 <_printf_i>:
 8012578:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801257c:	7e0f      	ldrb	r7, [r1, #24]
 801257e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012580:	2f78      	cmp	r7, #120	; 0x78
 8012582:	4691      	mov	r9, r2
 8012584:	4680      	mov	r8, r0
 8012586:	460c      	mov	r4, r1
 8012588:	469a      	mov	sl, r3
 801258a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801258e:	d807      	bhi.n	80125a0 <_printf_i+0x28>
 8012590:	2f62      	cmp	r7, #98	; 0x62
 8012592:	d80a      	bhi.n	80125aa <_printf_i+0x32>
 8012594:	2f00      	cmp	r7, #0
 8012596:	f000 80d4 	beq.w	8012742 <_printf_i+0x1ca>
 801259a:	2f58      	cmp	r7, #88	; 0x58
 801259c:	f000 80c0 	beq.w	8012720 <_printf_i+0x1a8>
 80125a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80125a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80125a8:	e03a      	b.n	8012620 <_printf_i+0xa8>
 80125aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80125ae:	2b15      	cmp	r3, #21
 80125b0:	d8f6      	bhi.n	80125a0 <_printf_i+0x28>
 80125b2:	a101      	add	r1, pc, #4	; (adr r1, 80125b8 <_printf_i+0x40>)
 80125b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80125b8:	08012611 	.word	0x08012611
 80125bc:	08012625 	.word	0x08012625
 80125c0:	080125a1 	.word	0x080125a1
 80125c4:	080125a1 	.word	0x080125a1
 80125c8:	080125a1 	.word	0x080125a1
 80125cc:	080125a1 	.word	0x080125a1
 80125d0:	08012625 	.word	0x08012625
 80125d4:	080125a1 	.word	0x080125a1
 80125d8:	080125a1 	.word	0x080125a1
 80125dc:	080125a1 	.word	0x080125a1
 80125e0:	080125a1 	.word	0x080125a1
 80125e4:	08012729 	.word	0x08012729
 80125e8:	08012651 	.word	0x08012651
 80125ec:	080126e3 	.word	0x080126e3
 80125f0:	080125a1 	.word	0x080125a1
 80125f4:	080125a1 	.word	0x080125a1
 80125f8:	0801274b 	.word	0x0801274b
 80125fc:	080125a1 	.word	0x080125a1
 8012600:	08012651 	.word	0x08012651
 8012604:	080125a1 	.word	0x080125a1
 8012608:	080125a1 	.word	0x080125a1
 801260c:	080126eb 	.word	0x080126eb
 8012610:	682b      	ldr	r3, [r5, #0]
 8012612:	1d1a      	adds	r2, r3, #4
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	602a      	str	r2, [r5, #0]
 8012618:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801261c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012620:	2301      	movs	r3, #1
 8012622:	e09f      	b.n	8012764 <_printf_i+0x1ec>
 8012624:	6820      	ldr	r0, [r4, #0]
 8012626:	682b      	ldr	r3, [r5, #0]
 8012628:	0607      	lsls	r7, r0, #24
 801262a:	f103 0104 	add.w	r1, r3, #4
 801262e:	6029      	str	r1, [r5, #0]
 8012630:	d501      	bpl.n	8012636 <_printf_i+0xbe>
 8012632:	681e      	ldr	r6, [r3, #0]
 8012634:	e003      	b.n	801263e <_printf_i+0xc6>
 8012636:	0646      	lsls	r6, r0, #25
 8012638:	d5fb      	bpl.n	8012632 <_printf_i+0xba>
 801263a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801263e:	2e00      	cmp	r6, #0
 8012640:	da03      	bge.n	801264a <_printf_i+0xd2>
 8012642:	232d      	movs	r3, #45	; 0x2d
 8012644:	4276      	negs	r6, r6
 8012646:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801264a:	485a      	ldr	r0, [pc, #360]	; (80127b4 <_printf_i+0x23c>)
 801264c:	230a      	movs	r3, #10
 801264e:	e012      	b.n	8012676 <_printf_i+0xfe>
 8012650:	682b      	ldr	r3, [r5, #0]
 8012652:	6820      	ldr	r0, [r4, #0]
 8012654:	1d19      	adds	r1, r3, #4
 8012656:	6029      	str	r1, [r5, #0]
 8012658:	0605      	lsls	r5, r0, #24
 801265a:	d501      	bpl.n	8012660 <_printf_i+0xe8>
 801265c:	681e      	ldr	r6, [r3, #0]
 801265e:	e002      	b.n	8012666 <_printf_i+0xee>
 8012660:	0641      	lsls	r1, r0, #25
 8012662:	d5fb      	bpl.n	801265c <_printf_i+0xe4>
 8012664:	881e      	ldrh	r6, [r3, #0]
 8012666:	4853      	ldr	r0, [pc, #332]	; (80127b4 <_printf_i+0x23c>)
 8012668:	2f6f      	cmp	r7, #111	; 0x6f
 801266a:	bf0c      	ite	eq
 801266c:	2308      	moveq	r3, #8
 801266e:	230a      	movne	r3, #10
 8012670:	2100      	movs	r1, #0
 8012672:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012676:	6865      	ldr	r5, [r4, #4]
 8012678:	60a5      	str	r5, [r4, #8]
 801267a:	2d00      	cmp	r5, #0
 801267c:	bfa2      	ittt	ge
 801267e:	6821      	ldrge	r1, [r4, #0]
 8012680:	f021 0104 	bicge.w	r1, r1, #4
 8012684:	6021      	strge	r1, [r4, #0]
 8012686:	b90e      	cbnz	r6, 801268c <_printf_i+0x114>
 8012688:	2d00      	cmp	r5, #0
 801268a:	d04b      	beq.n	8012724 <_printf_i+0x1ac>
 801268c:	4615      	mov	r5, r2
 801268e:	fbb6 f1f3 	udiv	r1, r6, r3
 8012692:	fb03 6711 	mls	r7, r3, r1, r6
 8012696:	5dc7      	ldrb	r7, [r0, r7]
 8012698:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801269c:	4637      	mov	r7, r6
 801269e:	42bb      	cmp	r3, r7
 80126a0:	460e      	mov	r6, r1
 80126a2:	d9f4      	bls.n	801268e <_printf_i+0x116>
 80126a4:	2b08      	cmp	r3, #8
 80126a6:	d10b      	bne.n	80126c0 <_printf_i+0x148>
 80126a8:	6823      	ldr	r3, [r4, #0]
 80126aa:	07de      	lsls	r6, r3, #31
 80126ac:	d508      	bpl.n	80126c0 <_printf_i+0x148>
 80126ae:	6923      	ldr	r3, [r4, #16]
 80126b0:	6861      	ldr	r1, [r4, #4]
 80126b2:	4299      	cmp	r1, r3
 80126b4:	bfde      	ittt	le
 80126b6:	2330      	movle	r3, #48	; 0x30
 80126b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80126bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80126c0:	1b52      	subs	r2, r2, r5
 80126c2:	6122      	str	r2, [r4, #16]
 80126c4:	f8cd a000 	str.w	sl, [sp]
 80126c8:	464b      	mov	r3, r9
 80126ca:	aa03      	add	r2, sp, #12
 80126cc:	4621      	mov	r1, r4
 80126ce:	4640      	mov	r0, r8
 80126d0:	f7ff fee4 	bl	801249c <_printf_common>
 80126d4:	3001      	adds	r0, #1
 80126d6:	d14a      	bne.n	801276e <_printf_i+0x1f6>
 80126d8:	f04f 30ff 	mov.w	r0, #4294967295
 80126dc:	b004      	add	sp, #16
 80126de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126e2:	6823      	ldr	r3, [r4, #0]
 80126e4:	f043 0320 	orr.w	r3, r3, #32
 80126e8:	6023      	str	r3, [r4, #0]
 80126ea:	4833      	ldr	r0, [pc, #204]	; (80127b8 <_printf_i+0x240>)
 80126ec:	2778      	movs	r7, #120	; 0x78
 80126ee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80126f2:	6823      	ldr	r3, [r4, #0]
 80126f4:	6829      	ldr	r1, [r5, #0]
 80126f6:	061f      	lsls	r7, r3, #24
 80126f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80126fc:	d402      	bmi.n	8012704 <_printf_i+0x18c>
 80126fe:	065f      	lsls	r7, r3, #25
 8012700:	bf48      	it	mi
 8012702:	b2b6      	uxthmi	r6, r6
 8012704:	07df      	lsls	r7, r3, #31
 8012706:	bf48      	it	mi
 8012708:	f043 0320 	orrmi.w	r3, r3, #32
 801270c:	6029      	str	r1, [r5, #0]
 801270e:	bf48      	it	mi
 8012710:	6023      	strmi	r3, [r4, #0]
 8012712:	b91e      	cbnz	r6, 801271c <_printf_i+0x1a4>
 8012714:	6823      	ldr	r3, [r4, #0]
 8012716:	f023 0320 	bic.w	r3, r3, #32
 801271a:	6023      	str	r3, [r4, #0]
 801271c:	2310      	movs	r3, #16
 801271e:	e7a7      	b.n	8012670 <_printf_i+0xf8>
 8012720:	4824      	ldr	r0, [pc, #144]	; (80127b4 <_printf_i+0x23c>)
 8012722:	e7e4      	b.n	80126ee <_printf_i+0x176>
 8012724:	4615      	mov	r5, r2
 8012726:	e7bd      	b.n	80126a4 <_printf_i+0x12c>
 8012728:	682b      	ldr	r3, [r5, #0]
 801272a:	6826      	ldr	r6, [r4, #0]
 801272c:	6961      	ldr	r1, [r4, #20]
 801272e:	1d18      	adds	r0, r3, #4
 8012730:	6028      	str	r0, [r5, #0]
 8012732:	0635      	lsls	r5, r6, #24
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	d501      	bpl.n	801273c <_printf_i+0x1c4>
 8012738:	6019      	str	r1, [r3, #0]
 801273a:	e002      	b.n	8012742 <_printf_i+0x1ca>
 801273c:	0670      	lsls	r0, r6, #25
 801273e:	d5fb      	bpl.n	8012738 <_printf_i+0x1c0>
 8012740:	8019      	strh	r1, [r3, #0]
 8012742:	2300      	movs	r3, #0
 8012744:	6123      	str	r3, [r4, #16]
 8012746:	4615      	mov	r5, r2
 8012748:	e7bc      	b.n	80126c4 <_printf_i+0x14c>
 801274a:	682b      	ldr	r3, [r5, #0]
 801274c:	1d1a      	adds	r2, r3, #4
 801274e:	602a      	str	r2, [r5, #0]
 8012750:	681d      	ldr	r5, [r3, #0]
 8012752:	6862      	ldr	r2, [r4, #4]
 8012754:	2100      	movs	r1, #0
 8012756:	4628      	mov	r0, r5
 8012758:	f7ed fdca 	bl	80002f0 <memchr>
 801275c:	b108      	cbz	r0, 8012762 <_printf_i+0x1ea>
 801275e:	1b40      	subs	r0, r0, r5
 8012760:	6060      	str	r0, [r4, #4]
 8012762:	6863      	ldr	r3, [r4, #4]
 8012764:	6123      	str	r3, [r4, #16]
 8012766:	2300      	movs	r3, #0
 8012768:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801276c:	e7aa      	b.n	80126c4 <_printf_i+0x14c>
 801276e:	6923      	ldr	r3, [r4, #16]
 8012770:	462a      	mov	r2, r5
 8012772:	4649      	mov	r1, r9
 8012774:	4640      	mov	r0, r8
 8012776:	47d0      	blx	sl
 8012778:	3001      	adds	r0, #1
 801277a:	d0ad      	beq.n	80126d8 <_printf_i+0x160>
 801277c:	6823      	ldr	r3, [r4, #0]
 801277e:	079b      	lsls	r3, r3, #30
 8012780:	d413      	bmi.n	80127aa <_printf_i+0x232>
 8012782:	68e0      	ldr	r0, [r4, #12]
 8012784:	9b03      	ldr	r3, [sp, #12]
 8012786:	4298      	cmp	r0, r3
 8012788:	bfb8      	it	lt
 801278a:	4618      	movlt	r0, r3
 801278c:	e7a6      	b.n	80126dc <_printf_i+0x164>
 801278e:	2301      	movs	r3, #1
 8012790:	4632      	mov	r2, r6
 8012792:	4649      	mov	r1, r9
 8012794:	4640      	mov	r0, r8
 8012796:	47d0      	blx	sl
 8012798:	3001      	adds	r0, #1
 801279a:	d09d      	beq.n	80126d8 <_printf_i+0x160>
 801279c:	3501      	adds	r5, #1
 801279e:	68e3      	ldr	r3, [r4, #12]
 80127a0:	9903      	ldr	r1, [sp, #12]
 80127a2:	1a5b      	subs	r3, r3, r1
 80127a4:	42ab      	cmp	r3, r5
 80127a6:	dcf2      	bgt.n	801278e <_printf_i+0x216>
 80127a8:	e7eb      	b.n	8012782 <_printf_i+0x20a>
 80127aa:	2500      	movs	r5, #0
 80127ac:	f104 0619 	add.w	r6, r4, #25
 80127b0:	e7f5      	b.n	801279e <_printf_i+0x226>
 80127b2:	bf00      	nop
 80127b4:	0801457c 	.word	0x0801457c
 80127b8:	0801458d 	.word	0x0801458d

080127bc <__sflush_r>:
 80127bc:	898a      	ldrh	r2, [r1, #12]
 80127be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127c2:	4605      	mov	r5, r0
 80127c4:	0710      	lsls	r0, r2, #28
 80127c6:	460c      	mov	r4, r1
 80127c8:	d458      	bmi.n	801287c <__sflush_r+0xc0>
 80127ca:	684b      	ldr	r3, [r1, #4]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	dc05      	bgt.n	80127dc <__sflush_r+0x20>
 80127d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	dc02      	bgt.n	80127dc <__sflush_r+0x20>
 80127d6:	2000      	movs	r0, #0
 80127d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80127de:	2e00      	cmp	r6, #0
 80127e0:	d0f9      	beq.n	80127d6 <__sflush_r+0x1a>
 80127e2:	2300      	movs	r3, #0
 80127e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80127e8:	682f      	ldr	r7, [r5, #0]
 80127ea:	6a21      	ldr	r1, [r4, #32]
 80127ec:	602b      	str	r3, [r5, #0]
 80127ee:	d032      	beq.n	8012856 <__sflush_r+0x9a>
 80127f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80127f2:	89a3      	ldrh	r3, [r4, #12]
 80127f4:	075a      	lsls	r2, r3, #29
 80127f6:	d505      	bpl.n	8012804 <__sflush_r+0x48>
 80127f8:	6863      	ldr	r3, [r4, #4]
 80127fa:	1ac0      	subs	r0, r0, r3
 80127fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80127fe:	b10b      	cbz	r3, 8012804 <__sflush_r+0x48>
 8012800:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012802:	1ac0      	subs	r0, r0, r3
 8012804:	2300      	movs	r3, #0
 8012806:	4602      	mov	r2, r0
 8012808:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801280a:	6a21      	ldr	r1, [r4, #32]
 801280c:	4628      	mov	r0, r5
 801280e:	47b0      	blx	r6
 8012810:	1c43      	adds	r3, r0, #1
 8012812:	89a3      	ldrh	r3, [r4, #12]
 8012814:	d106      	bne.n	8012824 <__sflush_r+0x68>
 8012816:	6829      	ldr	r1, [r5, #0]
 8012818:	291d      	cmp	r1, #29
 801281a:	d82b      	bhi.n	8012874 <__sflush_r+0xb8>
 801281c:	4a29      	ldr	r2, [pc, #164]	; (80128c4 <__sflush_r+0x108>)
 801281e:	410a      	asrs	r2, r1
 8012820:	07d6      	lsls	r6, r2, #31
 8012822:	d427      	bmi.n	8012874 <__sflush_r+0xb8>
 8012824:	2200      	movs	r2, #0
 8012826:	6062      	str	r2, [r4, #4]
 8012828:	04d9      	lsls	r1, r3, #19
 801282a:	6922      	ldr	r2, [r4, #16]
 801282c:	6022      	str	r2, [r4, #0]
 801282e:	d504      	bpl.n	801283a <__sflush_r+0x7e>
 8012830:	1c42      	adds	r2, r0, #1
 8012832:	d101      	bne.n	8012838 <__sflush_r+0x7c>
 8012834:	682b      	ldr	r3, [r5, #0]
 8012836:	b903      	cbnz	r3, 801283a <__sflush_r+0x7e>
 8012838:	6560      	str	r0, [r4, #84]	; 0x54
 801283a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801283c:	602f      	str	r7, [r5, #0]
 801283e:	2900      	cmp	r1, #0
 8012840:	d0c9      	beq.n	80127d6 <__sflush_r+0x1a>
 8012842:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012846:	4299      	cmp	r1, r3
 8012848:	d002      	beq.n	8012850 <__sflush_r+0x94>
 801284a:	4628      	mov	r0, r5
 801284c:	f7ff fa8a 	bl	8011d64 <_free_r>
 8012850:	2000      	movs	r0, #0
 8012852:	6360      	str	r0, [r4, #52]	; 0x34
 8012854:	e7c0      	b.n	80127d8 <__sflush_r+0x1c>
 8012856:	2301      	movs	r3, #1
 8012858:	4628      	mov	r0, r5
 801285a:	47b0      	blx	r6
 801285c:	1c41      	adds	r1, r0, #1
 801285e:	d1c8      	bne.n	80127f2 <__sflush_r+0x36>
 8012860:	682b      	ldr	r3, [r5, #0]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d0c5      	beq.n	80127f2 <__sflush_r+0x36>
 8012866:	2b1d      	cmp	r3, #29
 8012868:	d001      	beq.n	801286e <__sflush_r+0xb2>
 801286a:	2b16      	cmp	r3, #22
 801286c:	d101      	bne.n	8012872 <__sflush_r+0xb6>
 801286e:	602f      	str	r7, [r5, #0]
 8012870:	e7b1      	b.n	80127d6 <__sflush_r+0x1a>
 8012872:	89a3      	ldrh	r3, [r4, #12]
 8012874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012878:	81a3      	strh	r3, [r4, #12]
 801287a:	e7ad      	b.n	80127d8 <__sflush_r+0x1c>
 801287c:	690f      	ldr	r7, [r1, #16]
 801287e:	2f00      	cmp	r7, #0
 8012880:	d0a9      	beq.n	80127d6 <__sflush_r+0x1a>
 8012882:	0793      	lsls	r3, r2, #30
 8012884:	680e      	ldr	r6, [r1, #0]
 8012886:	bf08      	it	eq
 8012888:	694b      	ldreq	r3, [r1, #20]
 801288a:	600f      	str	r7, [r1, #0]
 801288c:	bf18      	it	ne
 801288e:	2300      	movne	r3, #0
 8012890:	eba6 0807 	sub.w	r8, r6, r7
 8012894:	608b      	str	r3, [r1, #8]
 8012896:	f1b8 0f00 	cmp.w	r8, #0
 801289a:	dd9c      	ble.n	80127d6 <__sflush_r+0x1a>
 801289c:	6a21      	ldr	r1, [r4, #32]
 801289e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80128a0:	4643      	mov	r3, r8
 80128a2:	463a      	mov	r2, r7
 80128a4:	4628      	mov	r0, r5
 80128a6:	47b0      	blx	r6
 80128a8:	2800      	cmp	r0, #0
 80128aa:	dc06      	bgt.n	80128ba <__sflush_r+0xfe>
 80128ac:	89a3      	ldrh	r3, [r4, #12]
 80128ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80128b2:	81a3      	strh	r3, [r4, #12]
 80128b4:	f04f 30ff 	mov.w	r0, #4294967295
 80128b8:	e78e      	b.n	80127d8 <__sflush_r+0x1c>
 80128ba:	4407      	add	r7, r0
 80128bc:	eba8 0800 	sub.w	r8, r8, r0
 80128c0:	e7e9      	b.n	8012896 <__sflush_r+0xda>
 80128c2:	bf00      	nop
 80128c4:	dfbffffe 	.word	0xdfbffffe

080128c8 <_fflush_r>:
 80128c8:	b538      	push	{r3, r4, r5, lr}
 80128ca:	690b      	ldr	r3, [r1, #16]
 80128cc:	4605      	mov	r5, r0
 80128ce:	460c      	mov	r4, r1
 80128d0:	b913      	cbnz	r3, 80128d8 <_fflush_r+0x10>
 80128d2:	2500      	movs	r5, #0
 80128d4:	4628      	mov	r0, r5
 80128d6:	bd38      	pop	{r3, r4, r5, pc}
 80128d8:	b118      	cbz	r0, 80128e2 <_fflush_r+0x1a>
 80128da:	6a03      	ldr	r3, [r0, #32]
 80128dc:	b90b      	cbnz	r3, 80128e2 <_fflush_r+0x1a>
 80128de:	f7ff f803 	bl	80118e8 <__sinit>
 80128e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d0f3      	beq.n	80128d2 <_fflush_r+0xa>
 80128ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80128ec:	07d0      	lsls	r0, r2, #31
 80128ee:	d404      	bmi.n	80128fa <_fflush_r+0x32>
 80128f0:	0599      	lsls	r1, r3, #22
 80128f2:	d402      	bmi.n	80128fa <_fflush_r+0x32>
 80128f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80128f6:	f7ff fa1e 	bl	8011d36 <__retarget_lock_acquire_recursive>
 80128fa:	4628      	mov	r0, r5
 80128fc:	4621      	mov	r1, r4
 80128fe:	f7ff ff5d 	bl	80127bc <__sflush_r>
 8012902:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012904:	07da      	lsls	r2, r3, #31
 8012906:	4605      	mov	r5, r0
 8012908:	d4e4      	bmi.n	80128d4 <_fflush_r+0xc>
 801290a:	89a3      	ldrh	r3, [r4, #12]
 801290c:	059b      	lsls	r3, r3, #22
 801290e:	d4e1      	bmi.n	80128d4 <_fflush_r+0xc>
 8012910:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012912:	f7ff fa11 	bl	8011d38 <__retarget_lock_release_recursive>
 8012916:	e7dd      	b.n	80128d4 <_fflush_r+0xc>

08012918 <__swhatbuf_r>:
 8012918:	b570      	push	{r4, r5, r6, lr}
 801291a:	460c      	mov	r4, r1
 801291c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012920:	2900      	cmp	r1, #0
 8012922:	b096      	sub	sp, #88	; 0x58
 8012924:	4615      	mov	r5, r2
 8012926:	461e      	mov	r6, r3
 8012928:	da0d      	bge.n	8012946 <__swhatbuf_r+0x2e>
 801292a:	89a3      	ldrh	r3, [r4, #12]
 801292c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012930:	f04f 0100 	mov.w	r1, #0
 8012934:	bf0c      	ite	eq
 8012936:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801293a:	2340      	movne	r3, #64	; 0x40
 801293c:	2000      	movs	r0, #0
 801293e:	6031      	str	r1, [r6, #0]
 8012940:	602b      	str	r3, [r5, #0]
 8012942:	b016      	add	sp, #88	; 0x58
 8012944:	bd70      	pop	{r4, r5, r6, pc}
 8012946:	466a      	mov	r2, sp
 8012948:	f000 f892 	bl	8012a70 <_fstat_r>
 801294c:	2800      	cmp	r0, #0
 801294e:	dbec      	blt.n	801292a <__swhatbuf_r+0x12>
 8012950:	9901      	ldr	r1, [sp, #4]
 8012952:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8012956:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801295a:	4259      	negs	r1, r3
 801295c:	4159      	adcs	r1, r3
 801295e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012962:	e7eb      	b.n	801293c <__swhatbuf_r+0x24>

08012964 <__smakebuf_r>:
 8012964:	898b      	ldrh	r3, [r1, #12]
 8012966:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012968:	079d      	lsls	r5, r3, #30
 801296a:	4606      	mov	r6, r0
 801296c:	460c      	mov	r4, r1
 801296e:	d507      	bpl.n	8012980 <__smakebuf_r+0x1c>
 8012970:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012974:	6023      	str	r3, [r4, #0]
 8012976:	6123      	str	r3, [r4, #16]
 8012978:	2301      	movs	r3, #1
 801297a:	6163      	str	r3, [r4, #20]
 801297c:	b002      	add	sp, #8
 801297e:	bd70      	pop	{r4, r5, r6, pc}
 8012980:	ab01      	add	r3, sp, #4
 8012982:	466a      	mov	r2, sp
 8012984:	f7ff ffc8 	bl	8012918 <__swhatbuf_r>
 8012988:	9900      	ldr	r1, [sp, #0]
 801298a:	4605      	mov	r5, r0
 801298c:	4630      	mov	r0, r6
 801298e:	f7ff fa5d 	bl	8011e4c <_malloc_r>
 8012992:	b948      	cbnz	r0, 80129a8 <__smakebuf_r+0x44>
 8012994:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012998:	059a      	lsls	r2, r3, #22
 801299a:	d4ef      	bmi.n	801297c <__smakebuf_r+0x18>
 801299c:	f023 0303 	bic.w	r3, r3, #3
 80129a0:	f043 0302 	orr.w	r3, r3, #2
 80129a4:	81a3      	strh	r3, [r4, #12]
 80129a6:	e7e3      	b.n	8012970 <__smakebuf_r+0xc>
 80129a8:	89a3      	ldrh	r3, [r4, #12]
 80129aa:	6020      	str	r0, [r4, #0]
 80129ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80129b0:	81a3      	strh	r3, [r4, #12]
 80129b2:	9b00      	ldr	r3, [sp, #0]
 80129b4:	6163      	str	r3, [r4, #20]
 80129b6:	9b01      	ldr	r3, [sp, #4]
 80129b8:	6120      	str	r0, [r4, #16]
 80129ba:	b15b      	cbz	r3, 80129d4 <__smakebuf_r+0x70>
 80129bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80129c0:	4630      	mov	r0, r6
 80129c2:	f000 f867 	bl	8012a94 <_isatty_r>
 80129c6:	b128      	cbz	r0, 80129d4 <__smakebuf_r+0x70>
 80129c8:	89a3      	ldrh	r3, [r4, #12]
 80129ca:	f023 0303 	bic.w	r3, r3, #3
 80129ce:	f043 0301 	orr.w	r3, r3, #1
 80129d2:	81a3      	strh	r3, [r4, #12]
 80129d4:	89a3      	ldrh	r3, [r4, #12]
 80129d6:	431d      	orrs	r5, r3
 80129d8:	81a5      	strh	r5, [r4, #12]
 80129da:	e7cf      	b.n	801297c <__smakebuf_r+0x18>

080129dc <memmove>:
 80129dc:	4288      	cmp	r0, r1
 80129de:	b510      	push	{r4, lr}
 80129e0:	eb01 0402 	add.w	r4, r1, r2
 80129e4:	d902      	bls.n	80129ec <memmove+0x10>
 80129e6:	4284      	cmp	r4, r0
 80129e8:	4623      	mov	r3, r4
 80129ea:	d807      	bhi.n	80129fc <memmove+0x20>
 80129ec:	1e43      	subs	r3, r0, #1
 80129ee:	42a1      	cmp	r1, r4
 80129f0:	d008      	beq.n	8012a04 <memmove+0x28>
 80129f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80129f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80129fa:	e7f8      	b.n	80129ee <memmove+0x12>
 80129fc:	4402      	add	r2, r0
 80129fe:	4601      	mov	r1, r0
 8012a00:	428a      	cmp	r2, r1
 8012a02:	d100      	bne.n	8012a06 <memmove+0x2a>
 8012a04:	bd10      	pop	{r4, pc}
 8012a06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012a0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012a0e:	e7f7      	b.n	8012a00 <memmove+0x24>

08012a10 <_raise_r>:
 8012a10:	291f      	cmp	r1, #31
 8012a12:	b538      	push	{r3, r4, r5, lr}
 8012a14:	4604      	mov	r4, r0
 8012a16:	460d      	mov	r5, r1
 8012a18:	d904      	bls.n	8012a24 <_raise_r+0x14>
 8012a1a:	2316      	movs	r3, #22
 8012a1c:	6003      	str	r3, [r0, #0]
 8012a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8012a22:	bd38      	pop	{r3, r4, r5, pc}
 8012a24:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8012a26:	b112      	cbz	r2, 8012a2e <_raise_r+0x1e>
 8012a28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012a2c:	b94b      	cbnz	r3, 8012a42 <_raise_r+0x32>
 8012a2e:	4620      	mov	r0, r4
 8012a30:	f000 f852 	bl	8012ad8 <_getpid_r>
 8012a34:	462a      	mov	r2, r5
 8012a36:	4601      	mov	r1, r0
 8012a38:	4620      	mov	r0, r4
 8012a3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012a3e:	f000 b839 	b.w	8012ab4 <_kill_r>
 8012a42:	2b01      	cmp	r3, #1
 8012a44:	d00a      	beq.n	8012a5c <_raise_r+0x4c>
 8012a46:	1c59      	adds	r1, r3, #1
 8012a48:	d103      	bne.n	8012a52 <_raise_r+0x42>
 8012a4a:	2316      	movs	r3, #22
 8012a4c:	6003      	str	r3, [r0, #0]
 8012a4e:	2001      	movs	r0, #1
 8012a50:	e7e7      	b.n	8012a22 <_raise_r+0x12>
 8012a52:	2400      	movs	r4, #0
 8012a54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012a58:	4628      	mov	r0, r5
 8012a5a:	4798      	blx	r3
 8012a5c:	2000      	movs	r0, #0
 8012a5e:	e7e0      	b.n	8012a22 <_raise_r+0x12>

08012a60 <raise>:
 8012a60:	4b02      	ldr	r3, [pc, #8]	; (8012a6c <raise+0xc>)
 8012a62:	4601      	mov	r1, r0
 8012a64:	6818      	ldr	r0, [r3, #0]
 8012a66:	f7ff bfd3 	b.w	8012a10 <_raise_r>
 8012a6a:	bf00      	nop
 8012a6c:	200000ac 	.word	0x200000ac

08012a70 <_fstat_r>:
 8012a70:	b538      	push	{r3, r4, r5, lr}
 8012a72:	4d07      	ldr	r5, [pc, #28]	; (8012a90 <_fstat_r+0x20>)
 8012a74:	2300      	movs	r3, #0
 8012a76:	4604      	mov	r4, r0
 8012a78:	4608      	mov	r0, r1
 8012a7a:	4611      	mov	r1, r2
 8012a7c:	602b      	str	r3, [r5, #0]
 8012a7e:	f7f1 f972 	bl	8003d66 <_fstat>
 8012a82:	1c43      	adds	r3, r0, #1
 8012a84:	d102      	bne.n	8012a8c <_fstat_r+0x1c>
 8012a86:	682b      	ldr	r3, [r5, #0]
 8012a88:	b103      	cbz	r3, 8012a8c <_fstat_r+0x1c>
 8012a8a:	6023      	str	r3, [r4, #0]
 8012a8c:	bd38      	pop	{r3, r4, r5, pc}
 8012a8e:	bf00      	nop
 8012a90:	20000760 	.word	0x20000760

08012a94 <_isatty_r>:
 8012a94:	b538      	push	{r3, r4, r5, lr}
 8012a96:	4d06      	ldr	r5, [pc, #24]	; (8012ab0 <_isatty_r+0x1c>)
 8012a98:	2300      	movs	r3, #0
 8012a9a:	4604      	mov	r4, r0
 8012a9c:	4608      	mov	r0, r1
 8012a9e:	602b      	str	r3, [r5, #0]
 8012aa0:	f7f1 f971 	bl	8003d86 <_isatty>
 8012aa4:	1c43      	adds	r3, r0, #1
 8012aa6:	d102      	bne.n	8012aae <_isatty_r+0x1a>
 8012aa8:	682b      	ldr	r3, [r5, #0]
 8012aaa:	b103      	cbz	r3, 8012aae <_isatty_r+0x1a>
 8012aac:	6023      	str	r3, [r4, #0]
 8012aae:	bd38      	pop	{r3, r4, r5, pc}
 8012ab0:	20000760 	.word	0x20000760

08012ab4 <_kill_r>:
 8012ab4:	b538      	push	{r3, r4, r5, lr}
 8012ab6:	4d07      	ldr	r5, [pc, #28]	; (8012ad4 <_kill_r+0x20>)
 8012ab8:	2300      	movs	r3, #0
 8012aba:	4604      	mov	r4, r0
 8012abc:	4608      	mov	r0, r1
 8012abe:	4611      	mov	r1, r2
 8012ac0:	602b      	str	r3, [r5, #0]
 8012ac2:	f7f1 f8f1 	bl	8003ca8 <_kill>
 8012ac6:	1c43      	adds	r3, r0, #1
 8012ac8:	d102      	bne.n	8012ad0 <_kill_r+0x1c>
 8012aca:	682b      	ldr	r3, [r5, #0]
 8012acc:	b103      	cbz	r3, 8012ad0 <_kill_r+0x1c>
 8012ace:	6023      	str	r3, [r4, #0]
 8012ad0:	bd38      	pop	{r3, r4, r5, pc}
 8012ad2:	bf00      	nop
 8012ad4:	20000760 	.word	0x20000760

08012ad8 <_getpid_r>:
 8012ad8:	f7f1 b8de 	b.w	8003c98 <_getpid>

08012adc <_sbrk_r>:
 8012adc:	b538      	push	{r3, r4, r5, lr}
 8012ade:	4d06      	ldr	r5, [pc, #24]	; (8012af8 <_sbrk_r+0x1c>)
 8012ae0:	2300      	movs	r3, #0
 8012ae2:	4604      	mov	r4, r0
 8012ae4:	4608      	mov	r0, r1
 8012ae6:	602b      	str	r3, [r5, #0]
 8012ae8:	f7f1 f966 	bl	8003db8 <_sbrk>
 8012aec:	1c43      	adds	r3, r0, #1
 8012aee:	d102      	bne.n	8012af6 <_sbrk_r+0x1a>
 8012af0:	682b      	ldr	r3, [r5, #0]
 8012af2:	b103      	cbz	r3, 8012af6 <_sbrk_r+0x1a>
 8012af4:	6023      	str	r3, [r4, #0]
 8012af6:	bd38      	pop	{r3, r4, r5, pc}
 8012af8:	20000760 	.word	0x20000760

08012afc <_realloc_r>:
 8012afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b00:	4680      	mov	r8, r0
 8012b02:	4614      	mov	r4, r2
 8012b04:	460e      	mov	r6, r1
 8012b06:	b921      	cbnz	r1, 8012b12 <_realloc_r+0x16>
 8012b08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012b0c:	4611      	mov	r1, r2
 8012b0e:	f7ff b99d 	b.w	8011e4c <_malloc_r>
 8012b12:	b92a      	cbnz	r2, 8012b20 <_realloc_r+0x24>
 8012b14:	f7ff f926 	bl	8011d64 <_free_r>
 8012b18:	4625      	mov	r5, r4
 8012b1a:	4628      	mov	r0, r5
 8012b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b20:	f000 f81b 	bl	8012b5a <_malloc_usable_size_r>
 8012b24:	4284      	cmp	r4, r0
 8012b26:	4607      	mov	r7, r0
 8012b28:	d802      	bhi.n	8012b30 <_realloc_r+0x34>
 8012b2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012b2e:	d812      	bhi.n	8012b56 <_realloc_r+0x5a>
 8012b30:	4621      	mov	r1, r4
 8012b32:	4640      	mov	r0, r8
 8012b34:	f7ff f98a 	bl	8011e4c <_malloc_r>
 8012b38:	4605      	mov	r5, r0
 8012b3a:	2800      	cmp	r0, #0
 8012b3c:	d0ed      	beq.n	8012b1a <_realloc_r+0x1e>
 8012b3e:	42bc      	cmp	r4, r7
 8012b40:	4622      	mov	r2, r4
 8012b42:	4631      	mov	r1, r6
 8012b44:	bf28      	it	cs
 8012b46:	463a      	movcs	r2, r7
 8012b48:	f7ff f8f7 	bl	8011d3a <memcpy>
 8012b4c:	4631      	mov	r1, r6
 8012b4e:	4640      	mov	r0, r8
 8012b50:	f7ff f908 	bl	8011d64 <_free_r>
 8012b54:	e7e1      	b.n	8012b1a <_realloc_r+0x1e>
 8012b56:	4635      	mov	r5, r6
 8012b58:	e7df      	b.n	8012b1a <_realloc_r+0x1e>

08012b5a <_malloc_usable_size_r>:
 8012b5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012b5e:	1f18      	subs	r0, r3, #4
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	bfbc      	itt	lt
 8012b64:	580b      	ldrlt	r3, [r1, r0]
 8012b66:	18c0      	addlt	r0, r0, r3
 8012b68:	4770      	bx	lr
	...

08012b6c <_init>:
 8012b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b6e:	bf00      	nop
 8012b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012b72:	bc08      	pop	{r3}
 8012b74:	469e      	mov	lr, r3
 8012b76:	4770      	bx	lr

08012b78 <_fini>:
 8012b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b7a:	bf00      	nop
 8012b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012b7e:	bc08      	pop	{r3}
 8012b80:	469e      	mov	lr, r3
 8012b82:	4770      	bx	lr
