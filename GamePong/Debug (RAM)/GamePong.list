
GamePong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  24000000  24000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 ._itcram      00000000  00000100  00000100  000400a4  2**0
                  CONTENTS
  2 ._itcram_hot  00000000  00000100  00000100  000400a4  2**0
                  CONTENTS
  3 ._ram_uc      0004b000  240002b0  240002b0  000102ac  2**4
                  ALLOC
  4 ._ram_exec    00000000  24050000  24050000  000400a4  2**0
                  CONTENTS
  5 ._extflash    00000000  90000000  90000000  000400a4  2**0
                  CONTENTS
  6 ._configflash 00000000  900ff000  900ff000  000400a4  2**0
                  CONTENTS
  7 ._ram         00000000  24050000  24050000  000400a4  2**0
                  CONTENTS
  8 ._ahbram      00017700  30000000  30000000  00050000  2**2
                  ALLOC
  9 .text         0000fe94  24050000  24050000  00020000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .rodata       000011ec  2405fe94  2405fe94  0002fe94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .init_array   00000004  24061080  24061080  00031080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .fini_array   00000004  24061084  24061084  00031084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .data         000000a4  20000000  24061088  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 ._flash_end   00000000  24061088  24061088  000400a4  2**0
                  CONTENTS
 15 .bss          00000548  200000a4  200000a4  000100a4  2**2
                  ALLOC
 16 ._persistent  00000004  200005ec  200005ec  000100a4  2**0
                  ALLOC
 17 ._user_heap   00008000  200005f0  200005f0  000100a4  2**0
                  ALLOC
 18 ._user_stack  00017a10  200085f0  200085f0  000100a4  2**0
                  ALLOC
 19 .ARM.attributes 0000002e  00000000  00000000  000400a4  2**0
                  CONTENTS, READONLY
 20 .debug_info   0003511f  00000000  00000000  000400d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_abbrev 000053c9  00000000  00000000  000751f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_aranges 000019b0  00000000  00000000  0007a5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000017c0  00000000  00000000  0007bf70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_macro  00037b86  00000000  00000000  0007d730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line   000224c6  00000000  00000000  000b52b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_str    0015da70  00000000  00000000  000d777c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .comment      00000053  00000000  00000000  002351ec  2**0
                  CONTENTS, READONLY
 28 .debug_frame  000076cc  00000000  00000000  00235240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

24050000 <__do_global_dtors_aux>:
24050000:	b510      	push	{r4, lr}
24050002:	4c05      	ldr	r4, [pc, #20]	; (24050018 <__do_global_dtors_aux+0x18>)
24050004:	7823      	ldrb	r3, [r4, #0]
24050006:	b933      	cbnz	r3, 24050016 <__do_global_dtors_aux+0x16>
24050008:	4b04      	ldr	r3, [pc, #16]	; (2405001c <__do_global_dtors_aux+0x1c>)
2405000a:	b113      	cbz	r3, 24050012 <__do_global_dtors_aux+0x12>
2405000c:	4804      	ldr	r0, [pc, #16]	; (24050020 <__do_global_dtors_aux+0x20>)
2405000e:	f3af 8000 	nop.w
24050012:	2301      	movs	r3, #1
24050014:	7023      	strb	r3, [r4, #0]
24050016:	bd10      	pop	{r4, pc}
24050018:	200000a4 	.word	0x200000a4
2405001c:	00000000 	.word	0x00000000
24050020:	2405fe7c 	.word	0x2405fe7c

24050024 <frame_dummy>:
24050024:	b508      	push	{r3, lr}
24050026:	4b03      	ldr	r3, [pc, #12]	; (24050034 <frame_dummy+0x10>)
24050028:	b11b      	cbz	r3, 24050032 <frame_dummy+0xe>
2405002a:	4903      	ldr	r1, [pc, #12]	; (24050038 <frame_dummy+0x14>)
2405002c:	4803      	ldr	r0, [pc, #12]	; (2405003c <frame_dummy+0x18>)
2405002e:	f3af 8000 	nop.w
24050032:	bd08      	pop	{r3, pc}
24050034:	00000000 	.word	0x00000000
24050038:	200000a8 	.word	0x200000a8
2405003c:	2405fe7c 	.word	0x2405fe7c

24050040 <memchr>:
24050040:	f001 01ff 	and.w	r1, r1, #255	; 0xff
24050044:	2a10      	cmp	r2, #16
24050046:	db2b      	blt.n	240500a0 <memchr+0x60>
24050048:	f010 0f07 	tst.w	r0, #7
2405004c:	d008      	beq.n	24050060 <memchr+0x20>
2405004e:	f810 3b01 	ldrb.w	r3, [r0], #1
24050052:	3a01      	subs	r2, #1
24050054:	428b      	cmp	r3, r1
24050056:	d02d      	beq.n	240500b4 <memchr+0x74>
24050058:	f010 0f07 	tst.w	r0, #7
2405005c:	b342      	cbz	r2, 240500b0 <memchr+0x70>
2405005e:	d1f6      	bne.n	2405004e <memchr+0xe>
24050060:	b4f0      	push	{r4, r5, r6, r7}
24050062:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
24050066:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
2405006a:	f022 0407 	bic.w	r4, r2, #7
2405006e:	f07f 0700 	mvns.w	r7, #0
24050072:	2300      	movs	r3, #0
24050074:	e8f0 5602 	ldrd	r5, r6, [r0], #8
24050078:	3c08      	subs	r4, #8
2405007a:	ea85 0501 	eor.w	r5, r5, r1
2405007e:	ea86 0601 	eor.w	r6, r6, r1
24050082:	fa85 f547 	uadd8	r5, r5, r7
24050086:	faa3 f587 	sel	r5, r3, r7
2405008a:	fa86 f647 	uadd8	r6, r6, r7
2405008e:	faa5 f687 	sel	r6, r5, r7
24050092:	b98e      	cbnz	r6, 240500b8 <memchr+0x78>
24050094:	d1ee      	bne.n	24050074 <memchr+0x34>
24050096:	bcf0      	pop	{r4, r5, r6, r7}
24050098:	f001 01ff 	and.w	r1, r1, #255	; 0xff
2405009c:	f002 0207 	and.w	r2, r2, #7
240500a0:	b132      	cbz	r2, 240500b0 <memchr+0x70>
240500a2:	f810 3b01 	ldrb.w	r3, [r0], #1
240500a6:	3a01      	subs	r2, #1
240500a8:	ea83 0301 	eor.w	r3, r3, r1
240500ac:	b113      	cbz	r3, 240500b4 <memchr+0x74>
240500ae:	d1f8      	bne.n	240500a2 <memchr+0x62>
240500b0:	2000      	movs	r0, #0
240500b2:	4770      	bx	lr
240500b4:	3801      	subs	r0, #1
240500b6:	4770      	bx	lr
240500b8:	2d00      	cmp	r5, #0
240500ba:	bf06      	itte	eq
240500bc:	4635      	moveq	r5, r6
240500be:	3803      	subeq	r0, #3
240500c0:	3807      	subne	r0, #7
240500c2:	f015 0f01 	tst.w	r5, #1
240500c6:	d107      	bne.n	240500d8 <memchr+0x98>
240500c8:	3001      	adds	r0, #1
240500ca:	f415 7f80 	tst.w	r5, #256	; 0x100
240500ce:	bf02      	ittt	eq
240500d0:	3001      	addeq	r0, #1
240500d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
240500d6:	3001      	addeq	r0, #1
240500d8:	bcf0      	pop	{r4, r5, r6, r7}
240500da:	3801      	subs	r0, #1
240500dc:	4770      	bx	lr
240500de:	bf00      	nop

240500e0 <buttons_get>:
#define B_TIME (1 << 6)
#define B_GAME (1 << 7)
#define B_PAUSE (1 << 8)
#define B_POWER (1 << 9)

uint32_t buttons_get() {
240500e0:	b580      	push	{r7, lr}
240500e2:	b084      	sub	sp, #16
240500e4:	af00      	add	r7, sp, #0
    bool left = HAL_GPIO_ReadPin(BTN_Left_GPIO_Port, BTN_Left_Pin) == GPIO_PIN_RESET;
240500e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
240500ea:	4843      	ldr	r0, [pc, #268]	; (240501f8 <buttons_get+0x118>)
240500ec:	f007 fe84 	bl	24057df8 <HAL_GPIO_ReadPin>
240500f0:	4603      	mov	r3, r0
240500f2:	2b00      	cmp	r3, #0
240500f4:	bf0c      	ite	eq
240500f6:	2301      	moveq	r3, #1
240500f8:	2300      	movne	r3, #0
240500fa:	73fb      	strb	r3, [r7, #15]
    bool right = HAL_GPIO_ReadPin(BTN_Right_GPIO_Port, BTN_Right_Pin) == GPIO_PIN_RESET;
240500fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
24050100:	483d      	ldr	r0, [pc, #244]	; (240501f8 <buttons_get+0x118>)
24050102:	f007 fe79 	bl	24057df8 <HAL_GPIO_ReadPin>
24050106:	4603      	mov	r3, r0
24050108:	2b00      	cmp	r3, #0
2405010a:	bf0c      	ite	eq
2405010c:	2301      	moveq	r3, #1
2405010e:	2300      	movne	r3, #0
24050110:	73bb      	strb	r3, [r7, #14]
    bool up = HAL_GPIO_ReadPin(BTN_Up_GPIO_Port, BTN_Up_Pin) == GPIO_PIN_RESET ;
24050112:	2101      	movs	r1, #1
24050114:	4838      	ldr	r0, [pc, #224]	; (240501f8 <buttons_get+0x118>)
24050116:	f007 fe6f 	bl	24057df8 <HAL_GPIO_ReadPin>
2405011a:	4603      	mov	r3, r0
2405011c:	2b00      	cmp	r3, #0
2405011e:	bf0c      	ite	eq
24050120:	2301      	moveq	r3, #1
24050122:	2300      	movne	r3, #0
24050124:	737b      	strb	r3, [r7, #13]
    bool down = HAL_GPIO_ReadPin(BTN_Down_GPIO_Port, BTN_Down_Pin) == GPIO_PIN_RESET;
24050126:	f44f 4180 	mov.w	r1, #16384	; 0x4000
2405012a:	4833      	ldr	r0, [pc, #204]	; (240501f8 <buttons_get+0x118>)
2405012c:	f007 fe64 	bl	24057df8 <HAL_GPIO_ReadPin>
24050130:	4603      	mov	r3, r0
24050132:	2b00      	cmp	r3, #0
24050134:	bf0c      	ite	eq
24050136:	2301      	moveq	r3, #1
24050138:	2300      	movne	r3, #0
2405013a:	733b      	strb	r3, [r7, #12]
    bool a = HAL_GPIO_ReadPin(BTN_A_GPIO_Port, BTN_A_Pin) == GPIO_PIN_RESET;
2405013c:	f44f 7100 	mov.w	r1, #512	; 0x200
24050140:	482d      	ldr	r0, [pc, #180]	; (240501f8 <buttons_get+0x118>)
24050142:	f007 fe59 	bl	24057df8 <HAL_GPIO_ReadPin>
24050146:	4603      	mov	r3, r0
24050148:	2b00      	cmp	r3, #0
2405014a:	bf0c      	ite	eq
2405014c:	2301      	moveq	r3, #1
2405014e:	2300      	movne	r3, #0
24050150:	72fb      	strb	r3, [r7, #11]
    bool b = HAL_GPIO_ReadPin(BTN_A_GPIO_Port, BTN_B_Pin) == GPIO_PIN_RESET;
24050152:	2120      	movs	r1, #32
24050154:	4828      	ldr	r0, [pc, #160]	; (240501f8 <buttons_get+0x118>)
24050156:	f007 fe4f 	bl	24057df8 <HAL_GPIO_ReadPin>
2405015a:	4603      	mov	r3, r0
2405015c:	2b00      	cmp	r3, #0
2405015e:	bf0c      	ite	eq
24050160:	2301      	moveq	r3, #1
24050162:	2300      	movne	r3, #0
24050164:	72bb      	strb	r3, [r7, #10]
    bool time = HAL_GPIO_ReadPin(BTN_TIME_GPIO_Port, BTN_TIME_Pin) == GPIO_PIN_RESET;
24050166:	2120      	movs	r1, #32
24050168:	4824      	ldr	r0, [pc, #144]	; (240501fc <buttons_get+0x11c>)
2405016a:	f007 fe45 	bl	24057df8 <HAL_GPIO_ReadPin>
2405016e:	4603      	mov	r3, r0
24050170:	2b00      	cmp	r3, #0
24050172:	bf0c      	ite	eq
24050174:	2301      	moveq	r3, #1
24050176:	2300      	movne	r3, #0
24050178:	727b      	strb	r3, [r7, #9]
    bool game = HAL_GPIO_ReadPin(BTN_GAME_GPIO_Port, BTN_GAME_Pin) == GPIO_PIN_RESET;
2405017a:	2102      	movs	r1, #2
2405017c:	481f      	ldr	r0, [pc, #124]	; (240501fc <buttons_get+0x11c>)
2405017e:	f007 fe3b 	bl	24057df8 <HAL_GPIO_ReadPin>
24050182:	4603      	mov	r3, r0
24050184:	2b00      	cmp	r3, #0
24050186:	bf0c      	ite	eq
24050188:	2301      	moveq	r3, #1
2405018a:	2300      	movne	r3, #0
2405018c:	723b      	strb	r3, [r7, #8]
    bool pause = HAL_GPIO_ReadPin(BTN_PAUSE_GPIO_Port, BTN_PAUSE_Pin) == GPIO_PIN_RESET;
2405018e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
24050192:	481a      	ldr	r0, [pc, #104]	; (240501fc <buttons_get+0x11c>)
24050194:	f007 fe30 	bl	24057df8 <HAL_GPIO_ReadPin>
24050198:	4603      	mov	r3, r0
2405019a:	2b00      	cmp	r3, #0
2405019c:	bf0c      	ite	eq
2405019e:	2301      	moveq	r3, #1
240501a0:	2300      	movne	r3, #0
240501a2:	71fb      	strb	r3, [r7, #7]
    bool power = HAL_GPIO_ReadPin(BTN_PWR_GPIO_Port, BTN_PWR_Pin) == GPIO_PIN_RESET;
240501a4:	2101      	movs	r1, #1
240501a6:	4816      	ldr	r0, [pc, #88]	; (24050200 <buttons_get+0x120>)
240501a8:	f007 fe26 	bl	24057df8 <HAL_GPIO_ReadPin>
240501ac:	4603      	mov	r3, r0
240501ae:	2b00      	cmp	r3, #0
240501b0:	bf0c      	ite	eq
240501b2:	2301      	moveq	r3, #1
240501b4:	2300      	movne	r3, #0
240501b6:	71bb      	strb	r3, [r7, #6]

    return (
        left | (up << 1) | (right << 2) | (down << 3) | (a << 4) | (b << 5) | (time << 6) | (game << 7) | (pause << 8) | (power << 9)
240501b8:	7bfa      	ldrb	r2, [r7, #15]
240501ba:	7b7b      	ldrb	r3, [r7, #13]
240501bc:	005b      	lsls	r3, r3, #1
240501be:	431a      	orrs	r2, r3
240501c0:	7bbb      	ldrb	r3, [r7, #14]
240501c2:	009b      	lsls	r3, r3, #2
240501c4:	431a      	orrs	r2, r3
240501c6:	7b3b      	ldrb	r3, [r7, #12]
240501c8:	00db      	lsls	r3, r3, #3
240501ca:	431a      	orrs	r2, r3
240501cc:	7afb      	ldrb	r3, [r7, #11]
240501ce:	011b      	lsls	r3, r3, #4
240501d0:	431a      	orrs	r2, r3
240501d2:	7abb      	ldrb	r3, [r7, #10]
240501d4:	015b      	lsls	r3, r3, #5
240501d6:	431a      	orrs	r2, r3
240501d8:	7a7b      	ldrb	r3, [r7, #9]
240501da:	019b      	lsls	r3, r3, #6
240501dc:	431a      	orrs	r2, r3
240501de:	7a3b      	ldrb	r3, [r7, #8]
240501e0:	01db      	lsls	r3, r3, #7
240501e2:	431a      	orrs	r2, r3
240501e4:	79fb      	ldrb	r3, [r7, #7]
240501e6:	021b      	lsls	r3, r3, #8
240501e8:	431a      	orrs	r2, r3
240501ea:	79bb      	ldrb	r3, [r7, #6]
240501ec:	025b      	lsls	r3, r3, #9
240501ee:	4313      	orrs	r3, r2
    );


}
240501f0:	4618      	mov	r0, r3
240501f2:	3710      	adds	r7, #16
240501f4:	46bd      	mov	sp, r7
240501f6:	bd80      	pop	{r7, pc}
240501f8:	58020c00 	.word	0x58020c00
240501fc:	58020800 	.word	0x58020800
24050200:	58020000 	.word	0x58020000

24050204 <flash_memory_map>:
#include "flash.h"
#include "main.h"

void flash_memory_map(OSPI_HandleTypeDef *spi) {
24050204:	b580      	push	{r7, lr}
24050206:	b0ac      	sub	sp, #176	; 0xb0
24050208:	af00      	add	r7, sp, #0
2405020a:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef cmd = {
2405020c:	f107 0360 	add.w	r3, r7, #96	; 0x60
24050210:	2250      	movs	r2, #80	; 0x50
24050212:	2100      	movs	r1, #0
24050214:	4618      	mov	r0, r3
24050216:	f00e fc35 	bl	2405ea84 <memset>
2405021a:	23eb      	movs	r3, #235	; 0xeb
2405021c:	66bb      	str	r3, [r7, #104]	; 0x68
2405021e:	2301      	movs	r3, #1
24050220:	66fb      	str	r3, [r7, #108]	; 0x6c
24050222:	f44f 7340 	mov.w	r3, #768	; 0x300
24050226:	67fb      	str	r3, [r7, #124]	; 0x7c
24050228:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2405022c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
24050230:	2304      	movs	r3, #4
24050232:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
24050236:	f44f 3340 	mov.w	r3, #196608	; 0x30000
2405023a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
2405023e:	2301      	movs	r3, #1
24050240:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
24050244:	2304      	movs	r3, #4
24050246:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    .AlternateBytesSize = HAL_OSPI_ALTERNATE_BYTES_8_BITS, // ??? firmware uses '1' ??
    .NbData = 1, // Data length
    .AlternateBytes = 0b000100, //0xa5, // Hmmmm
  };

  HAL_Delay(1);
2405024a:	2001      	movs	r0, #1
2405024c:	f002 fd76 	bl	24052d3c <HAL_Delay>
  
  if(HAL_OSPI_Command(spi, &cmd, 1000) != HAL_OK) {
24050250:	f107 0360 	add.w	r3, r7, #96	; 0x60
24050254:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
24050258:	4619      	mov	r1, r3
2405025a:	6878      	ldr	r0, [r7, #4]
2405025c:	f008 fbec 	bl	24058a38 <HAL_OSPI_Command>
24050260:	4603      	mov	r3, r0
24050262:	2b00      	cmp	r3, #0
24050264:	d001      	beq.n	2405026a <flash_memory_map+0x66>
      Error_Handler();
24050266:	f001 fe43 	bl	24051ef0 <Error_Handler>
  }
  HAL_Delay(50);
2405026a:	2032      	movs	r0, #50	; 0x32
2405026c:	f002 fd66 	bl	24052d3c <HAL_Delay>


  OSPI_MemoryMappedTypeDef sMemMappedCfg;

  OSPI_RegularCmdTypeDef sCommand = {
24050270:	f107 0308 	add.w	r3, r7, #8
24050274:	2250      	movs	r2, #80	; 0x50
24050276:	2100      	movs	r1, #0
24050278:	4618      	mov	r0, r3
2405027a:	f00e fc03 	bl	2405ea84 <memset>
2405027e:	2301      	movs	r3, #1
24050280:	60bb      	str	r3, [r7, #8]
24050282:	23eb      	movs	r3, #235	; 0xeb
24050284:	613b      	str	r3, [r7, #16]
24050286:	2301      	movs	r3, #1
24050288:	617b      	str	r3, [r7, #20]
2405028a:	f44f 7340 	mov.w	r3, #768	; 0x300
2405028e:	627b      	str	r3, [r7, #36]	; 0x24
24050290:	f44f 5300 	mov.w	r3, #8192	; 0x2000
24050294:	62bb      	str	r3, [r7, #40]	; 0x28
24050296:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
2405029a:	643b      	str	r3, [r7, #64]	; 0x40
2405029c:	2301      	movs	r3, #1
2405029e:	647b      	str	r3, [r7, #68]	; 0x44
240502a0:	2304      	movs	r3, #4
240502a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  // }
  // HAL_Delay(100);



  sCommand.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
240502a4:	2302      	movs	r3, #2
240502a6:	60bb      	str	r3, [r7, #8]
  sCommand.Instruction = 0x38; /* 4PP / 4 x page program */ // LINEAR_BURST_WRITE;
240502a8:	2338      	movs	r3, #56	; 0x38
240502aa:	613b      	str	r3, [r7, #16]
  sCommand.DummyCycles = 0; //DUMMY_CLOCK_CYCLES_SRAM_WRITE;
240502ac:	2300      	movs	r3, #0
240502ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_OSPI_Command(spi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) !=
240502b0:	f107 0308 	add.w	r3, r7, #8
240502b4:	f241 3288 	movw	r2, #5000	; 0x1388
240502b8:	4619      	mov	r1, r3
240502ba:	6878      	ldr	r0, [r7, #4]
240502bc:	f008 fbbc 	bl	24058a38 <HAL_OSPI_Command>
240502c0:	4603      	mov	r3, r0
240502c2:	2b00      	cmp	r3, #0
240502c4:	d001      	beq.n	240502ca <flash_memory_map+0xc6>
      HAL_OK) {
    Error_Handler();
240502c6:	f001 fe13 	bl	24051ef0 <Error_Handler>
  }
  /* Memory-mapped mode configuration for Linear burst read operations */
  sCommand.OperationType = HAL_OSPI_OPTYPE_READ_CFG;
240502ca:	2301      	movs	r3, #1
240502cc:	60bb      	str	r3, [r7, #8]
  sCommand.Instruction = 0xEB; /* 4READ */  //LINEAR_BURST_READ;
240502ce:	23eb      	movs	r3, #235	; 0xeb
240502d0:	613b      	str	r3, [r7, #16]
  sCommand.DummyCycles = 6; //DUMMY_CLOCK_CYCLES_SRAM_READ;
240502d2:	2306      	movs	r3, #6
240502d4:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(spi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) !=
240502d6:	f107 0308 	add.w	r3, r7, #8
240502da:	f241 3288 	movw	r2, #5000	; 0x1388
240502de:	4619      	mov	r1, r3
240502e0:	6878      	ldr	r0, [r7, #4]
240502e2:	f008 fba9 	bl	24058a38 <HAL_OSPI_Command>
240502e6:	4603      	mov	r3, r0
240502e8:	2b00      	cmp	r3, #0
240502ea:	d001      	beq.n	240502f0 <flash_memory_map+0xec>
      HAL_OK) {
    Error_Handler();
240502ec:	f001 fe00 	bl	24051ef0 <Error_Handler>
  }
  /*Disable timeout counter for memory mapped mode*/
  sMemMappedCfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
240502f0:	2300      	movs	r3, #0
240502f2:	65bb      	str	r3, [r7, #88]	; 0x58
  sMemMappedCfg.TimeOutPeriod = 0;
240502f4:	2300      	movs	r3, #0
240502f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  /*Enable memory mapped mode*/
  if (HAL_OSPI_MemoryMapped(spi, &sMemMappedCfg) != HAL_OK) {
240502f8:	f107 0358 	add.w	r3, r7, #88	; 0x58
240502fc:	4619      	mov	r1, r3
240502fe:	6878      	ldr	r0, [r7, #4]
24050300:	f008 fc28 	bl	24058b54 <HAL_OSPI_MemoryMapped>
24050304:	4603      	mov	r3, r0
24050306:	2b00      	cmp	r3, #0
24050308:	d001      	beq.n	2405030e <flash_memory_map+0x10a>
    Error_Handler();
2405030a:	f001 fdf1 	bl	24051ef0 <Error_Handler>
  }
}
2405030e:	bf00      	nop
24050310:	37b0      	adds	r7, #176	; 0xb0
24050312:	46bd      	mov	sp, r7
24050314:	bd80      	pop	{r7, pc}
	...

24050318 <game_init>:
int ball_xspeed;
int ball_yspeed;
int ball_x;
int ball_y;

void game_init(void) {
24050318:	b580      	push	{r7, lr}
2405031a:	b082      	sub	sp, #8
2405031c:	af00      	add	r7, sp, #0
	uint16_t *buf = lcd_get_active_buffer();
2405031e:	f001 f8ab 	bl	24051478 <lcd_get_active_buffer>
24050322:	6078      	str	r0, [r7, #4]
	draw_background(buf);
24050324:	6878      	ldr	r0, [r7, #4]
24050326:	f000 f887 	bl	24050438 <draw_background>
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
2405032a:	2200      	movs	r2, #0
2405032c:	492c      	ldr	r1, [pc, #176]	; (240503e0 <game_init+0xc8>)
2405032e:	482d      	ldr	r0, [pc, #180]	; (240503e4 <game_init+0xcc>)
24050330:	f00c fdee 	bl	2405cf10 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
24050334:	2200      	movs	r2, #0
24050336:	492c      	ldr	r1, [pc, #176]	; (240503e8 <game_init+0xd0>)
24050338:	482a      	ldr	r0, [pc, #168]	; (240503e4 <game_init+0xcc>)
2405033a:	f00c fecd 	bl	2405d0d8 <HAL_RTC_GetDate>
	HAL_ADC_Start(&hadc1);
2405033e:	482b      	ldr	r0, [pc, #172]	; (240503ec <game_init+0xd4>)
24050340:	f003 f870 	bl	24053424 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
24050344:	f04f 31ff 	mov.w	r1, #4294967295
24050348:	4828      	ldr	r0, [pc, #160]	; (240503ec <game_init+0xd4>)
2405034a:	f003 f925 	bl	24053598 <HAL_ADC_PollForConversion>
	srand(HAL_ADC_GetValue(&hadc1) ^ sTime.SubSeconds);
2405034e:	4827      	ldr	r0, [pc, #156]	; (240503ec <game_init+0xd4>)
24050350:	f003 f9fa 	bl	24053748 <HAL_ADC_GetValue>
24050354:	4602      	mov	r2, r0
24050356:	4b22      	ldr	r3, [pc, #136]	; (240503e0 <game_init+0xc8>)
24050358:	685b      	ldr	r3, [r3, #4]
2405035a:	4053      	eors	r3, r2
2405035c:	4618      	mov	r0, r3
2405035e:	f00e fb99 	bl	2405ea94 <srand>
	ball_xspeed = randsing() * ball_speed;
24050362:	f00e fbc5 	bl	2405eaf0 <rand>
24050366:	4603      	mov	r3, r0
24050368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2405036c:	db02      	blt.n	24050374 <game_init+0x5c>
2405036e:	f04f 33ff 	mov.w	r3, #4294967295
24050372:	e000      	b.n	24050376 <game_init+0x5e>
24050374:	2301      	movs	r3, #1
24050376:	2203      	movs	r2, #3
24050378:	fb02 f303 	mul.w	r3, r2, r3
2405037c:	4a1c      	ldr	r2, [pc, #112]	; (240503f0 <game_init+0xd8>)
2405037e:	6013      	str	r3, [r2, #0]
	ball_yspeed = randsing() * ball_speed;
24050380:	f00e fbb6 	bl	2405eaf0 <rand>
24050384:	4603      	mov	r3, r0
24050386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2405038a:	db02      	blt.n	24050392 <game_init+0x7a>
2405038c:	f04f 33ff 	mov.w	r3, #4294967295
24050390:	e000      	b.n	24050394 <game_init+0x7c>
24050392:	2301      	movs	r3, #1
24050394:	2203      	movs	r2, #3
24050396:	fb02 f303 	mul.w	r3, r2, r3
2405039a:	4a16      	ldr	r2, [pc, #88]	; (240503f4 <game_init+0xdc>)
2405039c:	6013      	str	r3, [r2, #0]
	ball_x = 160;
2405039e:	4b16      	ldr	r3, [pc, #88]	; (240503f8 <game_init+0xe0>)
240503a0:	22a0      	movs	r2, #160	; 0xa0
240503a2:	601a      	str	r2, [r3, #0]
	ball_y = randint(190, 70);
240503a4:	f00e fba4 	bl	2405eaf0 <rand>
240503a8:	4601      	mov	r1, r0
240503aa:	4b14      	ldr	r3, [pc, #80]	; (240503fc <game_init+0xe4>)
240503ac:	fb83 2301 	smull	r2, r3, r3, r1
240503b0:	105a      	asrs	r2, r3, #1
240503b2:	17cb      	asrs	r3, r1, #31
240503b4:	1ad2      	subs	r2, r2, r3
240503b6:	4613      	mov	r3, r2
240503b8:	011b      	lsls	r3, r3, #4
240503ba:	1a9b      	subs	r3, r3, r2
240503bc:	00db      	lsls	r3, r3, #3
240503be:	4413      	add	r3, r2
240503c0:	1aca      	subs	r2, r1, r3
240503c2:	f102 0346 	add.w	r3, r2, #70	; 0x46
240503c6:	4a0e      	ldr	r2, [pc, #56]	; (24050400 <game_init+0xe8>)
240503c8:	6013      	str	r3, [r2, #0]
	lcd_sync();
240503ca:	f001 f83d 	bl	24051448 <lcd_sync>
	lcd_swap();
240503ce:	f001 f825 	bl	2405141c <lcd_swap>
	lcd_wait_for_vblank();
240503d2:	f001 f87d 	bl	240514d0 <lcd_wait_for_vblank>
}
240503d6:	bf00      	nop
240503d8:	3708      	adds	r7, #8
240503da:	46bd      	mov	sp, r7
240503dc:	bd80      	pop	{r7, pc}
240503de:	bf00      	nop
240503e0:	200000c0 	.word	0x200000c0
240503e4:	200004b0 	.word	0x200004b0
240503e8:	200000d4 	.word	0x200000d4
240503ec:	2000044c 	.word	0x2000044c
240503f0:	20000204 	.word	0x20000204
240503f4:	20000200 	.word	0x20000200
240503f8:	20000208 	.word	0x20000208
240503fc:	043b3d5b 	.word	0x043b3d5b
24050400:	200001fc 	.word	0x200001fc

24050404 <game_loop>:

void game_loop(void) {
24050404:	b580      	push	{r7, lr}
24050406:	b082      	sub	sp, #8
24050408:	af00      	add	r7, sp, #0
	uint16_t *buf = lcd_get_active_buffer();
2405040a:	f001 f835 	bl	24051478 <lcd_get_active_buffer>
2405040e:	6078      	str	r0, [r7, #4]
	draw_background(buf);
24050410:	6878      	ldr	r0, [r7, #4]
24050412:	f000 f811 	bl	24050438 <draw_background>
	update_player(buf);
24050416:	6878      	ldr	r0, [r7, #4]
24050418:	f000 f878 	bl	2405050c <update_player>
	update_ai(buf);
2405041c:	6878      	ldr	r0, [r7, #4]
2405041e:	f000 f9e1 	bl	240507e4 <update_ai>
	update_ball(buf);
24050422:	6878      	ldr	r0, [r7, #4]
24050424:	f000 f8ec 	bl	24050600 <update_ball>
	lcd_swap();
24050428:	f000 fff8 	bl	2405141c <lcd_swap>
	lcd_wait_for_vblank();
2405042c:	f001 f850 	bl	240514d0 <lcd_wait_for_vblank>
}
24050430:	bf00      	nop
24050432:	3708      	adds	r7, #8
24050434:	46bd      	mov	sp, r7
24050436:	bd80      	pop	{r7, pc}

24050438 <draw_background>:

void draw_background(uint16_t *buf) {
24050438:	b590      	push	{r4, r7, lr}
2405043a:	b085      	sub	sp, #20
2405043c:	af02      	add	r7, sp, #8
2405043e:	6078      	str	r0, [r7, #4]
	LCD_Clear(buf, LCD_COLOR_BLACK);
24050440:	2100      	movs	r1, #0
24050442:	6878      	ldr	r0, [r7, #4]
24050444:	f000 fa6a 	bl	2405091c <LCD_Clear>
	LCD_DrawRect(buf, 0, 20, LCD_GetXSize() - 1, LCD_GetYSize() - 21,
24050448:	f000 fa26 	bl	24050898 <LCD_GetXSize>
2405044c:	4603      	mov	r3, r0
2405044e:	3b01      	subs	r3, #1
24050450:	b29c      	uxth	r4, r3
24050452:	f000 fa2a 	bl	240508aa <LCD_GetYSize>
24050456:	4603      	mov	r3, r0
24050458:	3b15      	subs	r3, #21
2405045a:	b29b      	uxth	r3, r3
2405045c:	f64f 72ff 	movw	r2, #65535	; 0xffff
24050460:	9201      	str	r2, [sp, #4]
24050462:	9300      	str	r3, [sp, #0]
24050464:	4623      	mov	r3, r4
24050466:	2214      	movs	r2, #20
24050468:	2100      	movs	r1, #0
2405046a:	6878      	ldr	r0, [r7, #4]
2405046c:	f000 fb84 	bl	24050b78 <LCD_DrawRect>
	LCD_COLOR_WHITE);
	draw_score(buf);
24050470:	6878      	ldr	r0, [r7, #4]
24050472:	f000 f805 	bl	24050480 <draw_score>
}
24050476:	bf00      	nop
24050478:	370c      	adds	r7, #12
2405047a:	46bd      	mov	sp, r7
2405047c:	bd90      	pop	{r4, r7, pc}
	...

24050480 <draw_score>:

void draw_score(uint16_t *buf) {
24050480:	b580      	push	{r7, lr}
24050482:	b084      	sub	sp, #16
24050484:	af02      	add	r7, sp, #8
24050486:	6078      	str	r0, [r7, #4]
	LCD_SetFont(&Font16);
24050488:	4818      	ldr	r0, [pc, #96]	; (240504ec <draw_score+0x6c>)
2405048a:	f000 fa17 	bl	240508bc <LCD_SetFont>
	sprintf(score_p1_buf, "%d", score_p1);
2405048e:	4b18      	ldr	r3, [pc, #96]	; (240504f0 <draw_score+0x70>)
24050490:	681b      	ldr	r3, [r3, #0]
24050492:	461a      	mov	r2, r3
24050494:	4917      	ldr	r1, [pc, #92]	; (240504f4 <draw_score+0x74>)
24050496:	4818      	ldr	r0, [pc, #96]	; (240504f8 <draw_score+0x78>)
24050498:	f00e fb6a 	bl	2405eb70 <siprintf>
	LCD_DisplayStringAt(buf, 0, 4, (uint8_t*) score_p1_buf, LEFT_MODE);
2405049c:	2303      	movs	r3, #3
2405049e:	9300      	str	r3, [sp, #0]
240504a0:	4b15      	ldr	r3, [pc, #84]	; (240504f8 <draw_score+0x78>)
240504a2:	2204      	movs	r2, #4
240504a4:	2100      	movs	r1, #0
240504a6:	6878      	ldr	r0, [r7, #4]
240504a8:	f000 fa52 	bl	24050950 <LCD_DisplayStringAt>
	sprintf(score_p2_buf, "%d", score_p2);
240504ac:	4b13      	ldr	r3, [pc, #76]	; (240504fc <draw_score+0x7c>)
240504ae:	681b      	ldr	r3, [r3, #0]
240504b0:	461a      	mov	r2, r3
240504b2:	4910      	ldr	r1, [pc, #64]	; (240504f4 <draw_score+0x74>)
240504b4:	4812      	ldr	r0, [pc, #72]	; (24050500 <draw_score+0x80>)
240504b6:	f00e fb5b 	bl	2405eb70 <siprintf>
	LCD_DisplayStringAt(buf, 2, 4, (uint8_t*) score_p2_buf, RIGHT_MODE);
240504ba:	2302      	movs	r3, #2
240504bc:	9300      	str	r3, [sp, #0]
240504be:	4b10      	ldr	r3, [pc, #64]	; (24050500 <draw_score+0x80>)
240504c0:	2204      	movs	r2, #4
240504c2:	2102      	movs	r1, #2
240504c4:	6878      	ldr	r0, [r7, #4]
240504c6:	f000 fa43 	bl	24050950 <LCD_DisplayStringAt>
	sprintf(text_buf, "SCORE");
240504ca:	490e      	ldr	r1, [pc, #56]	; (24050504 <draw_score+0x84>)
240504cc:	480e      	ldr	r0, [pc, #56]	; (24050508 <draw_score+0x88>)
240504ce:	f00e fb4f 	bl	2405eb70 <siprintf>
	LCD_DisplayStringAt(buf, 1, 4, (uint8_t*) text_buf, CENTER_MODE);
240504d2:	2301      	movs	r3, #1
240504d4:	9300      	str	r3, [sp, #0]
240504d6:	4b0c      	ldr	r3, [pc, #48]	; (24050508 <draw_score+0x88>)
240504d8:	2204      	movs	r2, #4
240504da:	2101      	movs	r1, #1
240504dc:	6878      	ldr	r0, [r7, #4]
240504de:	f000 fa37 	bl	24050950 <LCD_DisplayStringAt>
}
240504e2:	bf00      	nop
240504e4:	3708      	adds	r7, #8
240504e6:	46bd      	mov	sp, r7
240504e8:	bd80      	pop	{r7, pc}
240504ea:	bf00      	nop
240504ec:	20000008 	.word	0x20000008
240504f0:	200000d8 	.word	0x200000d8
240504f4:	2405fe94 	.word	0x2405fe94
240504f8:	2000020c 	.word	0x2000020c
240504fc:	200000dc 	.word	0x200000dc
24050500:	200001f4 	.word	0x200001f4
24050504:	2405fe98 	.word	0x2405fe98
24050508:	200000f4 	.word	0x200000f4

2405050c <update_player>:

void update_player(uint16_t *buf) {
2405050c:	b590      	push	{r4, r7, lr}
2405050e:	b087      	sub	sp, #28
24050510:	af02      	add	r7, sp, #8
24050512:	6078      	str	r0, [r7, #4]
	uint32_t buttons = buttons_get();
24050514:	f7ff fde4 	bl	240500e0 <buttons_get>
24050518:	60f8      	str	r0, [r7, #12]
	if (buttons & B_Up) {
2405051a:	68fb      	ldr	r3, [r7, #12]
2405051c:	f003 0302 	and.w	r3, r3, #2
24050520:	2b00      	cmp	r3, #0
24050522:	d00c      	beq.n	2405053e <update_player+0x32>
		if (p1_y >= 20 + p1_speed + 2) {
24050524:	2302      	movs	r3, #2
24050526:	f103 0215 	add.w	r2, r3, #21
2405052a:	4b2f      	ldr	r3, [pc, #188]	; (240505e8 <update_player+0xdc>)
2405052c:	681b      	ldr	r3, [r3, #0]
2405052e:	429a      	cmp	r2, r3
24050530:	da05      	bge.n	2405053e <update_player+0x32>
			p1_y = p1_y - p1_speed;
24050532:	4b2d      	ldr	r3, [pc, #180]	; (240505e8 <update_player+0xdc>)
24050534:	681b      	ldr	r3, [r3, #0]
24050536:	2202      	movs	r2, #2
24050538:	1a9b      	subs	r3, r3, r2
2405053a:	4a2b      	ldr	r2, [pc, #172]	; (240505e8 <update_player+0xdc>)
2405053c:	6013      	str	r3, [r2, #0]
		}
	}
	if (buttons & B_Down) {
2405053e:	68fb      	ldr	r3, [r7, #12]
24050540:	f003 0308 	and.w	r3, r3, #8
24050544:	2b00      	cmp	r3, #0
24050546:	d012      	beq.n	2405056e <update_player+0x62>
		if (p1_y <= LCD_GetYSize() - p1_height - p1_speed - 2) {
24050548:	f000 f9af 	bl	240508aa <LCD_GetYSize>
2405054c:	4603      	mov	r3, r0
2405054e:	461a      	mov	r2, r3
24050550:	2328      	movs	r3, #40	; 0x28
24050552:	1ad3      	subs	r3, r2, r3
24050554:	2202      	movs	r2, #2
24050556:	1a9b      	subs	r3, r3, r2
24050558:	1e5a      	subs	r2, r3, #1
2405055a:	4b23      	ldr	r3, [pc, #140]	; (240505e8 <update_player+0xdc>)
2405055c:	681b      	ldr	r3, [r3, #0]
2405055e:	429a      	cmp	r2, r3
24050560:	dd05      	ble.n	2405056e <update_player+0x62>
			p1_y = p1_y + p1_speed;
24050562:	4b21      	ldr	r3, [pc, #132]	; (240505e8 <update_player+0xdc>)
24050564:	681b      	ldr	r3, [r3, #0]
24050566:	2202      	movs	r2, #2
24050568:	4413      	add	r3, r2
2405056a:	4a1f      	ldr	r2, [pc, #124]	; (240505e8 <update_player+0xdc>)
2405056c:	6013      	str	r3, [r2, #0]
		}
	}
	if (buttons & B_GAME) {
2405056e:	68fb      	ldr	r3, [r7, #12]
24050570:	f003 0380 	and.w	r3, r3, #128	; 0x80
24050574:	2b00      	cmp	r3, #0
24050576:	d01a      	beq.n	240505ae <update_player+0xa2>
		score_p1 = 0;
24050578:	4b1c      	ldr	r3, [pc, #112]	; (240505ec <update_player+0xe0>)
2405057a:	2200      	movs	r2, #0
2405057c:	601a      	str	r2, [r3, #0]
		score_p2 = 0;
2405057e:	4b1c      	ldr	r3, [pc, #112]	; (240505f0 <update_player+0xe4>)
24050580:	2200      	movs	r2, #0
24050582:	601a      	str	r2, [r3, #0]
		p1_x = 3;
24050584:	4b1b      	ldr	r3, [pc, #108]	; (240505f4 <update_player+0xe8>)
24050586:	2203      	movs	r2, #3
24050588:	601a      	str	r2, [r3, #0]
		p1_y = 110;
2405058a:	4b17      	ldr	r3, [pc, #92]	; (240505e8 <update_player+0xdc>)
2405058c:	226e      	movs	r2, #110	; 0x6e
2405058e:	601a      	str	r2, [r3, #0]
		p2_x = 320 - 3 - p2_width;
24050590:	2205      	movs	r2, #5
24050592:	f240 133d 	movw	r3, #317	; 0x13d
24050596:	1a9b      	subs	r3, r3, r2
24050598:	4a17      	ldr	r2, [pc, #92]	; (240505f8 <update_player+0xec>)
2405059a:	6013      	str	r3, [r2, #0]
		p2_y = 110;
2405059c:	4b17      	ldr	r3, [pc, #92]	; (240505fc <update_player+0xf0>)
2405059e:	226e      	movs	r2, #110	; 0x6e
240505a0:	601a      	str	r2, [r3, #0]
		HAL_Delay(500);
240505a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
240505a6:	f002 fbc9 	bl	24052d3c <HAL_Delay>
		game_init();
240505aa:	f7ff feb5 	bl	24050318 <game_init>
	}
	if (buttons & B_POWER) {
240505ae:	68fb      	ldr	r3, [r7, #12]
240505b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
240505b4:	2b00      	cmp	r3, #0
240505b6:	d001      	beq.n	240505bc <update_player+0xb0>
		HAL_NVIC_SystemReset();
240505b8:	f004 f947 	bl	2405484a <HAL_NVIC_SystemReset>
	}
	LCD_FillRect(buf, p1_x, p1_y, p1_width, p1_height, LCD_COLOR_WHITE);
240505bc:	4b0d      	ldr	r3, [pc, #52]	; (240505f4 <update_player+0xe8>)
240505be:	681b      	ldr	r3, [r3, #0]
240505c0:	b299      	uxth	r1, r3
240505c2:	4b09      	ldr	r3, [pc, #36]	; (240505e8 <update_player+0xdc>)
240505c4:	681b      	ldr	r3, [r3, #0]
240505c6:	b29a      	uxth	r2, r3
240505c8:	2305      	movs	r3, #5
240505ca:	b298      	uxth	r0, r3
240505cc:	2328      	movs	r3, #40	; 0x28
240505ce:	b29b      	uxth	r3, r3
240505d0:	f64f 74ff 	movw	r4, #65535	; 0xffff
240505d4:	9401      	str	r4, [sp, #4]
240505d6:	9300      	str	r3, [sp, #0]
240505d8:	4603      	mov	r3, r0
240505da:	6878      	ldr	r0, [r7, #4]
240505dc:	f000 fbb0 	bl	24050d40 <LCD_FillRect>
}
240505e0:	bf00      	nop
240505e2:	3714      	adds	r7, #20
240505e4:	46bd      	mov	sp, r7
240505e6:	bd90      	pop	{r4, r7, pc}
240505e8:	20000014 	.word	0x20000014
240505ec:	200000d8 	.word	0x200000d8
240505f0:	200000dc 	.word	0x200000dc
240505f4:	20000010 	.word	0x20000010
240505f8:	20000018 	.word	0x20000018
240505fc:	2000001c 	.word	0x2000001c

24050600 <update_ball>:

void update_ball(uint16_t *buf) {
24050600:	b580      	push	{r7, lr}
24050602:	b084      	sub	sp, #16
24050604:	af02      	add	r7, sp, #8
24050606:	6078      	str	r0, [r7, #4]

	if (ball_x <= ball_r + ball_speed + p1_x + p1_width / 2
24050608:	2208      	movs	r2, #8
2405060a:	2303      	movs	r3, #3
2405060c:	441a      	add	r2, r3
2405060e:	4b6b      	ldr	r3, [pc, #428]	; (240507bc <update_ball+0x1bc>)
24050610:	681b      	ldr	r3, [r3, #0]
24050612:	441a      	add	r2, r3
24050614:	2305      	movs	r3, #5
24050616:	2b00      	cmp	r3, #0
24050618:	da00      	bge.n	2405061c <update_ball+0x1c>
2405061a:	3301      	adds	r3, #1
2405061c:	105b      	asrs	r3, r3, #1
2405061e:	441a      	add	r2, r3
24050620:	4b67      	ldr	r3, [pc, #412]	; (240507c0 <update_ball+0x1c0>)
24050622:	681b      	ldr	r3, [r3, #0]
24050624:	429a      	cmp	r2, r3
24050626:	db38      	blt.n	2405069a <update_ball+0x9a>
			&& ball_xspeed == -ball_speed) {
24050628:	2303      	movs	r3, #3
2405062a:	425a      	negs	r2, r3
2405062c:	4b65      	ldr	r3, [pc, #404]	; (240507c4 <update_ball+0x1c4>)
2405062e:	681b      	ldr	r3, [r3, #0]
24050630:	429a      	cmp	r2, r3
24050632:	d132      	bne.n	2405069a <update_ball+0x9a>
		ball_xspeed = ball_speed;
24050634:	2203      	movs	r2, #3
24050636:	4b63      	ldr	r3, [pc, #396]	; (240507c4 <update_ball+0x1c4>)
24050638:	601a      	str	r2, [r3, #0]
		if (ball_y >= p1_y - 2 && ball_y <= p1_y + p1_height + 2) {
2405063a:	4b63      	ldr	r3, [pc, #396]	; (240507c8 <update_ball+0x1c8>)
2405063c:	681b      	ldr	r3, [r3, #0]
2405063e:	1e9a      	subs	r2, r3, #2
24050640:	4b62      	ldr	r3, [pc, #392]	; (240507cc <update_ball+0x1cc>)
24050642:	681b      	ldr	r3, [r3, #0]
24050644:	429a      	cmp	r2, r3
24050646:	dc08      	bgt.n	2405065a <update_ball+0x5a>
24050648:	4b5f      	ldr	r3, [pc, #380]	; (240507c8 <update_ball+0x1c8>)
2405064a:	681b      	ldr	r3, [r3, #0]
2405064c:	2228      	movs	r2, #40	; 0x28
2405064e:	4413      	add	r3, r2
24050650:	1c9a      	adds	r2, r3, #2
24050652:	4b5e      	ldr	r3, [pc, #376]	; (240507cc <update_ball+0x1cc>)
24050654:	681b      	ldr	r3, [r3, #0]
24050656:	429a      	cmp	r2, r3
24050658:	da1f      	bge.n	2405069a <update_ball+0x9a>

		} else {
			score_p2++;
2405065a:	4b5d      	ldr	r3, [pc, #372]	; (240507d0 <update_ball+0x1d0>)
2405065c:	681b      	ldr	r3, [r3, #0]
2405065e:	3301      	adds	r3, #1
24050660:	4a5b      	ldr	r2, [pc, #364]	; (240507d0 <update_ball+0x1d0>)
24050662:	6013      	str	r3, [r2, #0]
			draw_score(buf);
24050664:	6878      	ldr	r0, [r7, #4]
24050666:	f7ff ff0b 	bl	24050480 <draw_score>
			LCD_FillCircle(buf, ball_x, ball_y, ball_r, LCD_COLOR_RED);
2405066a:	4b55      	ldr	r3, [pc, #340]	; (240507c0 <update_ball+0x1c0>)
2405066c:	681b      	ldr	r3, [r3, #0]
2405066e:	b299      	uxth	r1, r3
24050670:	4b56      	ldr	r3, [pc, #344]	; (240507cc <update_ball+0x1cc>)
24050672:	681b      	ldr	r3, [r3, #0]
24050674:	b29a      	uxth	r2, r3
24050676:	2308      	movs	r3, #8
24050678:	b29b      	uxth	r3, r3
2405067a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
2405067e:	9000      	str	r0, [sp, #0]
24050680:	6878      	ldr	r0, [r7, #4]
24050682:	f000 fb8e 	bl	24050da2 <LCD_FillCircle>
			lcd_swap();
24050686:	f000 fec9 	bl	2405141c <lcd_swap>
			lcd_wait_for_vblank();
2405068a:	f000 ff21 	bl	240514d0 <lcd_wait_for_vblank>
			HAL_Delay(1000);
2405068e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
24050692:	f002 fb53 	bl	24052d3c <HAL_Delay>
			game_init();
24050696:	f7ff fe3f 	bl	24050318 <game_init>
		}
	}
	if (ball_x >= p2_x + p2_width / 2 - ball_r - ball_speed
2405069a:	2305      	movs	r3, #5
2405069c:	2b00      	cmp	r3, #0
2405069e:	da00      	bge.n	240506a2 <update_ball+0xa2>
240506a0:	3301      	adds	r3, #1
240506a2:	105b      	asrs	r3, r3, #1
240506a4:	461a      	mov	r2, r3
240506a6:	4b4b      	ldr	r3, [pc, #300]	; (240507d4 <update_ball+0x1d4>)
240506a8:	681b      	ldr	r3, [r3, #0]
240506aa:	4413      	add	r3, r2
240506ac:	2208      	movs	r2, #8
240506ae:	1a9b      	subs	r3, r3, r2
240506b0:	2203      	movs	r2, #3
240506b2:	1a9a      	subs	r2, r3, r2
240506b4:	4b42      	ldr	r3, [pc, #264]	; (240507c0 <update_ball+0x1c0>)
240506b6:	681b      	ldr	r3, [r3, #0]
240506b8:	429a      	cmp	r2, r3
240506ba:	dc38      	bgt.n	2405072e <update_ball+0x12e>
			&& ball_xspeed == ball_speed) {
240506bc:	4b41      	ldr	r3, [pc, #260]	; (240507c4 <update_ball+0x1c4>)
240506be:	681b      	ldr	r3, [r3, #0]
240506c0:	2203      	movs	r2, #3
240506c2:	4293      	cmp	r3, r2
240506c4:	d133      	bne.n	2405072e <update_ball+0x12e>
		ball_xspeed = -ball_speed;
240506c6:	2303      	movs	r3, #3
240506c8:	425b      	negs	r3, r3
240506ca:	4a3e      	ldr	r2, [pc, #248]	; (240507c4 <update_ball+0x1c4>)
240506cc:	6013      	str	r3, [r2, #0]
		if (ball_y >= p2_y - 2 && ball_y <= p2_y + p2_height + 2) {
240506ce:	4b42      	ldr	r3, [pc, #264]	; (240507d8 <update_ball+0x1d8>)
240506d0:	681b      	ldr	r3, [r3, #0]
240506d2:	1e9a      	subs	r2, r3, #2
240506d4:	4b3d      	ldr	r3, [pc, #244]	; (240507cc <update_ball+0x1cc>)
240506d6:	681b      	ldr	r3, [r3, #0]
240506d8:	429a      	cmp	r2, r3
240506da:	dc08      	bgt.n	240506ee <update_ball+0xee>
240506dc:	4b3e      	ldr	r3, [pc, #248]	; (240507d8 <update_ball+0x1d8>)
240506de:	681b      	ldr	r3, [r3, #0]
240506e0:	2228      	movs	r2, #40	; 0x28
240506e2:	4413      	add	r3, r2
240506e4:	1c9a      	adds	r2, r3, #2
240506e6:	4b39      	ldr	r3, [pc, #228]	; (240507cc <update_ball+0x1cc>)
240506e8:	681b      	ldr	r3, [r3, #0]
240506ea:	429a      	cmp	r2, r3
240506ec:	da1f      	bge.n	2405072e <update_ball+0x12e>

		} else {
			score_p1++;
240506ee:	4b3b      	ldr	r3, [pc, #236]	; (240507dc <update_ball+0x1dc>)
240506f0:	681b      	ldr	r3, [r3, #0]
240506f2:	3301      	adds	r3, #1
240506f4:	4a39      	ldr	r2, [pc, #228]	; (240507dc <update_ball+0x1dc>)
240506f6:	6013      	str	r3, [r2, #0]
			draw_score(buf);
240506f8:	6878      	ldr	r0, [r7, #4]
240506fa:	f7ff fec1 	bl	24050480 <draw_score>
			LCD_FillCircle(buf, ball_x, ball_y, ball_r, LCD_COLOR_RED);
240506fe:	4b30      	ldr	r3, [pc, #192]	; (240507c0 <update_ball+0x1c0>)
24050700:	681b      	ldr	r3, [r3, #0]
24050702:	b299      	uxth	r1, r3
24050704:	4b31      	ldr	r3, [pc, #196]	; (240507cc <update_ball+0x1cc>)
24050706:	681b      	ldr	r3, [r3, #0]
24050708:	b29a      	uxth	r2, r3
2405070a:	2308      	movs	r3, #8
2405070c:	b29b      	uxth	r3, r3
2405070e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
24050712:	9000      	str	r0, [sp, #0]
24050714:	6878      	ldr	r0, [r7, #4]
24050716:	f000 fb44 	bl	24050da2 <LCD_FillCircle>
			lcd_swap();
2405071a:	f000 fe7f 	bl	2405141c <lcd_swap>
			lcd_wait_for_vblank();
2405071e:	f000 fed7 	bl	240514d0 <lcd_wait_for_vblank>
			HAL_Delay(1000);
24050722:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
24050726:	f002 fb09 	bl	24052d3c <HAL_Delay>
			game_init();
2405072a:	f7ff fdf5 	bl	24050318 <game_init>
		}
	}
	if (ball_y <= 20 + ball_r + ball_speed && ball_yspeed == -ball_speed) {
2405072e:	2308      	movs	r3, #8
24050730:	3314      	adds	r3, #20
24050732:	2203      	movs	r2, #3
24050734:	441a      	add	r2, r3
24050736:	4b25      	ldr	r3, [pc, #148]	; (240507cc <update_ball+0x1cc>)
24050738:	681b      	ldr	r3, [r3, #0]
2405073a:	429a      	cmp	r2, r3
2405073c:	db08      	blt.n	24050750 <update_ball+0x150>
2405073e:	2303      	movs	r3, #3
24050740:	425a      	negs	r2, r3
24050742:	4b27      	ldr	r3, [pc, #156]	; (240507e0 <update_ball+0x1e0>)
24050744:	681b      	ldr	r3, [r3, #0]
24050746:	429a      	cmp	r2, r3
24050748:	d102      	bne.n	24050750 <update_ball+0x150>
		ball_yspeed = ball_speed;
2405074a:	2203      	movs	r2, #3
2405074c:	4b24      	ldr	r3, [pc, #144]	; (240507e0 <update_ball+0x1e0>)
2405074e:	601a      	str	r2, [r3, #0]
	}
	if (ball_y >= LCD_GetYSize() - ball_r - ball_speed
24050750:	f000 f8ab 	bl	240508aa <LCD_GetYSize>
24050754:	4603      	mov	r3, r0
24050756:	461a      	mov	r2, r3
24050758:	2308      	movs	r3, #8
2405075a:	1ad3      	subs	r3, r2, r3
2405075c:	2203      	movs	r2, #3
2405075e:	1a9a      	subs	r2, r3, r2
24050760:	4b1a      	ldr	r3, [pc, #104]	; (240507cc <update_ball+0x1cc>)
24050762:	681b      	ldr	r3, [r3, #0]
24050764:	429a      	cmp	r2, r3
24050766:	dc08      	bgt.n	2405077a <update_ball+0x17a>
			&& ball_yspeed == ball_speed) {
24050768:	4b1d      	ldr	r3, [pc, #116]	; (240507e0 <update_ball+0x1e0>)
2405076a:	681b      	ldr	r3, [r3, #0]
2405076c:	2203      	movs	r2, #3
2405076e:	4293      	cmp	r3, r2
24050770:	d103      	bne.n	2405077a <update_ball+0x17a>
		ball_yspeed = -ball_speed;
24050772:	2303      	movs	r3, #3
24050774:	425b      	negs	r3, r3
24050776:	4a1a      	ldr	r2, [pc, #104]	; (240507e0 <update_ball+0x1e0>)
24050778:	6013      	str	r3, [r2, #0]
	}
	ball_x = ball_x + ball_xspeed;
2405077a:	4b11      	ldr	r3, [pc, #68]	; (240507c0 <update_ball+0x1c0>)
2405077c:	681a      	ldr	r2, [r3, #0]
2405077e:	4b11      	ldr	r3, [pc, #68]	; (240507c4 <update_ball+0x1c4>)
24050780:	681b      	ldr	r3, [r3, #0]
24050782:	4413      	add	r3, r2
24050784:	4a0e      	ldr	r2, [pc, #56]	; (240507c0 <update_ball+0x1c0>)
24050786:	6013      	str	r3, [r2, #0]
	ball_y = ball_y + ball_yspeed;
24050788:	4b10      	ldr	r3, [pc, #64]	; (240507cc <update_ball+0x1cc>)
2405078a:	681a      	ldr	r2, [r3, #0]
2405078c:	4b14      	ldr	r3, [pc, #80]	; (240507e0 <update_ball+0x1e0>)
2405078e:	681b      	ldr	r3, [r3, #0]
24050790:	4413      	add	r3, r2
24050792:	4a0e      	ldr	r2, [pc, #56]	; (240507cc <update_ball+0x1cc>)
24050794:	6013      	str	r3, [r2, #0]

	LCD_FillCircle(buf, ball_x, ball_y, ball_r, LCD_COLOR_WHITE);
24050796:	4b0a      	ldr	r3, [pc, #40]	; (240507c0 <update_ball+0x1c0>)
24050798:	681b      	ldr	r3, [r3, #0]
2405079a:	b299      	uxth	r1, r3
2405079c:	4b0b      	ldr	r3, [pc, #44]	; (240507cc <update_ball+0x1cc>)
2405079e:	681b      	ldr	r3, [r3, #0]
240507a0:	b29a      	uxth	r2, r3
240507a2:	2308      	movs	r3, #8
240507a4:	b29b      	uxth	r3, r3
240507a6:	f64f 70ff 	movw	r0, #65535	; 0xffff
240507aa:	9000      	str	r0, [sp, #0]
240507ac:	6878      	ldr	r0, [r7, #4]
240507ae:	f000 faf8 	bl	24050da2 <LCD_FillCircle>
}
240507b2:	bf00      	nop
240507b4:	3708      	adds	r7, #8
240507b6:	46bd      	mov	sp, r7
240507b8:	bd80      	pop	{r7, pc}
240507ba:	bf00      	nop
240507bc:	20000010 	.word	0x20000010
240507c0:	20000208 	.word	0x20000208
240507c4:	20000204 	.word	0x20000204
240507c8:	20000014 	.word	0x20000014
240507cc:	200001fc 	.word	0x200001fc
240507d0:	200000dc 	.word	0x200000dc
240507d4:	20000018 	.word	0x20000018
240507d8:	2000001c 	.word	0x2000001c
240507dc:	200000d8 	.word	0x200000d8
240507e0:	20000200 	.word	0x20000200

240507e4 <update_ai>:

void update_ai(uint16_t *buf) {
240507e4:	b590      	push	{r4, r7, lr}
240507e6:	b085      	sub	sp, #20
240507e8:	af02      	add	r7, sp, #8
240507ea:	6078      	str	r0, [r7, #4]
	if (ball_y < (p2_y + (p2_height / 2))) {
240507ec:	2328      	movs	r3, #40	; 0x28
240507ee:	2b00      	cmp	r3, #0
240507f0:	da00      	bge.n	240507f4 <update_ai+0x10>
240507f2:	3301      	adds	r3, #1
240507f4:	105b      	asrs	r3, r3, #1
240507f6:	461a      	mov	r2, r3
240507f8:	4b24      	ldr	r3, [pc, #144]	; (2405088c <update_ai+0xa8>)
240507fa:	681b      	ldr	r3, [r3, #0]
240507fc:	441a      	add	r2, r3
240507fe:	4b24      	ldr	r3, [pc, #144]	; (24050890 <update_ai+0xac>)
24050800:	681b      	ldr	r3, [r3, #0]
24050802:	429a      	cmp	r2, r3
24050804:	dd0c      	ble.n	24050820 <update_ai+0x3c>
		if (p2_y >= 20 + p2_speed + 2) {
24050806:	2302      	movs	r3, #2
24050808:	f103 0215 	add.w	r2, r3, #21
2405080c:	4b1f      	ldr	r3, [pc, #124]	; (2405088c <update_ai+0xa8>)
2405080e:	681b      	ldr	r3, [r3, #0]
24050810:	429a      	cmp	r2, r3
24050812:	da05      	bge.n	24050820 <update_ai+0x3c>
			p2_y = p2_y - p2_speed;
24050814:	4b1d      	ldr	r3, [pc, #116]	; (2405088c <update_ai+0xa8>)
24050816:	681b      	ldr	r3, [r3, #0]
24050818:	2202      	movs	r2, #2
2405081a:	1a9b      	subs	r3, r3, r2
2405081c:	4a1b      	ldr	r2, [pc, #108]	; (2405088c <update_ai+0xa8>)
2405081e:	6013      	str	r3, [r2, #0]
		}
	}
	if (ball_y > (p2_y + (p2_height / 2))) {
24050820:	2328      	movs	r3, #40	; 0x28
24050822:	2b00      	cmp	r3, #0
24050824:	da00      	bge.n	24050828 <update_ai+0x44>
24050826:	3301      	adds	r3, #1
24050828:	105b      	asrs	r3, r3, #1
2405082a:	461a      	mov	r2, r3
2405082c:	4b17      	ldr	r3, [pc, #92]	; (2405088c <update_ai+0xa8>)
2405082e:	681b      	ldr	r3, [r3, #0]
24050830:	441a      	add	r2, r3
24050832:	4b17      	ldr	r3, [pc, #92]	; (24050890 <update_ai+0xac>)
24050834:	681b      	ldr	r3, [r3, #0]
24050836:	429a      	cmp	r2, r3
24050838:	da12      	bge.n	24050860 <update_ai+0x7c>
		if (p2_y <= LCD_GetYSize() - p2_height - p2_speed - 2) {
2405083a:	f000 f836 	bl	240508aa <LCD_GetYSize>
2405083e:	4603      	mov	r3, r0
24050840:	461a      	mov	r2, r3
24050842:	2328      	movs	r3, #40	; 0x28
24050844:	1ad3      	subs	r3, r2, r3
24050846:	2202      	movs	r2, #2
24050848:	1a9b      	subs	r3, r3, r2
2405084a:	1e5a      	subs	r2, r3, #1
2405084c:	4b0f      	ldr	r3, [pc, #60]	; (2405088c <update_ai+0xa8>)
2405084e:	681b      	ldr	r3, [r3, #0]
24050850:	429a      	cmp	r2, r3
24050852:	dd05      	ble.n	24050860 <update_ai+0x7c>
			p2_y = p2_y + p2_speed;
24050854:	4b0d      	ldr	r3, [pc, #52]	; (2405088c <update_ai+0xa8>)
24050856:	681b      	ldr	r3, [r3, #0]
24050858:	2202      	movs	r2, #2
2405085a:	4413      	add	r3, r2
2405085c:	4a0b      	ldr	r2, [pc, #44]	; (2405088c <update_ai+0xa8>)
2405085e:	6013      	str	r3, [r2, #0]
		}
	}
	LCD_FillRect(buf, p2_x, p2_y, p2_width, p2_height, LCD_COLOR_WHITE);
24050860:	4b0c      	ldr	r3, [pc, #48]	; (24050894 <update_ai+0xb0>)
24050862:	681b      	ldr	r3, [r3, #0]
24050864:	b299      	uxth	r1, r3
24050866:	4b09      	ldr	r3, [pc, #36]	; (2405088c <update_ai+0xa8>)
24050868:	681b      	ldr	r3, [r3, #0]
2405086a:	b29a      	uxth	r2, r3
2405086c:	2305      	movs	r3, #5
2405086e:	b298      	uxth	r0, r3
24050870:	2328      	movs	r3, #40	; 0x28
24050872:	b29b      	uxth	r3, r3
24050874:	f64f 74ff 	movw	r4, #65535	; 0xffff
24050878:	9401      	str	r4, [sp, #4]
2405087a:	9300      	str	r3, [sp, #0]
2405087c:	4603      	mov	r3, r0
2405087e:	6878      	ldr	r0, [r7, #4]
24050880:	f000 fa5e 	bl	24050d40 <LCD_FillRect>
}
24050884:	bf00      	nop
24050886:	370c      	adds	r7, #12
24050888:	46bd      	mov	sp, r7
2405088a:	bd90      	pop	{r4, r7, pc}
2405088c:	2000001c 	.word	0x2000001c
24050890:	200001fc 	.word	0x200001fc
24050894:	20000018 	.word	0x20000018

24050898 <LCD_GetXSize>:
/**
 * @brief  Gets the LCD X size.
 * @param  None
 * @retval The used LCD X size
 */
uint16_t LCD_GetXSize(void) {
24050898:	b480      	push	{r7}
2405089a:	af00      	add	r7, sp, #0
	return GW_LCD_WIDTH;
2405089c:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
240508a0:	4618      	mov	r0, r3
240508a2:	46bd      	mov	sp, r7
240508a4:	f85d 7b04 	ldr.w	r7, [sp], #4
240508a8:	4770      	bx	lr

240508aa <LCD_GetYSize>:
/**
 * @brief  Gets the LCD Y size.
 * @param  None
 * @retval The used LCD Y size
 */
uint16_t LCD_GetYSize(void) {
240508aa:	b480      	push	{r7}
240508ac:	af00      	add	r7, sp, #0
	return GW_LCD_HEIGHT;
240508ae:	23f0      	movs	r3, #240	; 0xf0
}
240508b0:	4618      	mov	r0, r3
240508b2:	46bd      	mov	sp, r7
240508b4:	f85d 7b04 	ldr.w	r7, [sp], #4
240508b8:	4770      	bx	lr
	...

240508bc <LCD_SetFont>:
/**
 * @brief  Sets the Text Font.
 * @param  pFonts: the layer font to be used
 * @retval None
 */
void LCD_SetFont(sFONT *pFonts) {
240508bc:	b480      	push	{r7}
240508be:	b083      	sub	sp, #12
240508c0:	af00      	add	r7, sp, #0
240508c2:	6078      	str	r0, [r7, #4]
	font = pFonts;
240508c4:	4a04      	ldr	r2, [pc, #16]	; (240508d8 <LCD_SetFont+0x1c>)
240508c6:	687b      	ldr	r3, [r7, #4]
240508c8:	6013      	str	r3, [r2, #0]
}
240508ca:	bf00      	nop
240508cc:	370c      	adds	r7, #12
240508ce:	46bd      	mov	sp, r7
240508d0:	f85d 7b04 	ldr.w	r7, [sp], #4
240508d4:	4770      	bx	lr
240508d6:	bf00      	nop
240508d8:	20000020 	.word	0x20000020

240508dc <LCD_DrawPixel>:
 * @param  Xpos: the X position
 * @param  Ypos: the Y position
 * @param  RGB_Code: the pixel color in RGB(5-6-5)
 * @retval None
 */
void LCD_DrawPixel(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint16_t pixel) {
240508dc:	b480      	push	{r7}
240508de:	b085      	sub	sp, #20
240508e0:	af00      	add	r7, sp, #0
240508e2:	60f8      	str	r0, [r7, #12]
240508e4:	4608      	mov	r0, r1
240508e6:	4611      	mov	r1, r2
240508e8:	461a      	mov	r2, r3
240508ea:	4603      	mov	r3, r0
240508ec:	817b      	strh	r3, [r7, #10]
240508ee:	460b      	mov	r3, r1
240508f0:	813b      	strh	r3, [r7, #8]
240508f2:	4613      	mov	r3, r2
240508f4:	80fb      	strh	r3, [r7, #6]
	buf[PPOS(Xpos, Ypos)] = pixel;
240508f6:	893a      	ldrh	r2, [r7, #8]
240508f8:	4613      	mov	r3, r2
240508fa:	009b      	lsls	r3, r3, #2
240508fc:	4413      	add	r3, r2
240508fe:	019b      	lsls	r3, r3, #6
24050900:	461a      	mov	r2, r3
24050902:	897b      	ldrh	r3, [r7, #10]
24050904:	4413      	add	r3, r2
24050906:	005b      	lsls	r3, r3, #1
24050908:	68fa      	ldr	r2, [r7, #12]
2405090a:	4413      	add	r3, r2
2405090c:	88fa      	ldrh	r2, [r7, #6]
2405090e:	801a      	strh	r2, [r3, #0]
}
24050910:	bf00      	nop
24050912:	3714      	adds	r7, #20
24050914:	46bd      	mov	sp, r7
24050916:	f85d 7b04 	ldr.w	r7, [sp], #4
2405091a:	4770      	bx	lr

2405091c <LCD_Clear>:
/**
 * @brief  Clears the whole LCD.
 * @param  Color: the color of the background
 * @retval None
 */
void LCD_Clear(uint16_t *buf, uint16_t color) {
2405091c:	b590      	push	{r4, r7, lr}
2405091e:	b085      	sub	sp, #20
24050920:	af02      	add	r7, sp, #8
24050922:	6078      	str	r0, [r7, #4]
24050924:	460b      	mov	r3, r1
24050926:	807b      	strh	r3, [r7, #2]
	FillBuffer((uint32_t*) buf, LCD_GetXSize(), LCD_GetYSize(), 0, color);
24050928:	f7ff ffb6 	bl	24050898 <LCD_GetXSize>
2405092c:	4603      	mov	r3, r0
2405092e:	461c      	mov	r4, r3
24050930:	f7ff ffbb 	bl	240508aa <LCD_GetYSize>
24050934:	4603      	mov	r3, r0
24050936:	461a      	mov	r2, r3
24050938:	887b      	ldrh	r3, [r7, #2]
2405093a:	9300      	str	r3, [sp, #0]
2405093c:	2300      	movs	r3, #0
2405093e:	4621      	mov	r1, r4
24050940:	6878      	ldr	r0, [r7, #4]
24050942:	f000 fb63 	bl	2405100c <FillBuffer>
}
24050946:	bf00      	nop
24050948:	370c      	adds	r7, #12
2405094a:	46bd      	mov	sp, r7
2405094c:	bd90      	pop	{r4, r7, pc}
	...

24050950 <LCD_DisplayStringAt>:
 *                @arg RIGHT_MODE
 *                @arg LEFT_MODE
 * @retval None
 */
void LCD_DisplayStringAt(uint16_t *buf, uint16_t X, uint16_t Y, uint8_t *pText,
		Text_AlignModeTypdef mode) {
24050950:	b590      	push	{r4, r7, lr}
24050952:	b089      	sub	sp, #36	; 0x24
24050954:	af00      	add	r7, sp, #0
24050956:	60f8      	str	r0, [r7, #12]
24050958:	607b      	str	r3, [r7, #4]
2405095a:	460b      	mov	r3, r1
2405095c:	817b      	strh	r3, [r7, #10]
2405095e:	4613      	mov	r3, r2
24050960:	813b      	strh	r3, [r7, #8]
	uint16_t refcolumn = 1, i = 0;
24050962:	2301      	movs	r3, #1
24050964:	83fb      	strh	r3, [r7, #30]
24050966:	2300      	movs	r3, #0
24050968:	83bb      	strh	r3, [r7, #28]
	uint32_t size = 0, xsize = 0;
2405096a:	2300      	movs	r3, #0
2405096c:	61bb      	str	r3, [r7, #24]
2405096e:	2300      	movs	r3, #0
24050970:	613b      	str	r3, [r7, #16]
	uint8_t *ptr = pText;
24050972:	687b      	ldr	r3, [r7, #4]
24050974:	617b      	str	r3, [r7, #20]

	/* Get the text size */
	while (*ptr++)
24050976:	e002      	b.n	2405097e <LCD_DisplayStringAt+0x2e>
		size++;
24050978:	69bb      	ldr	r3, [r7, #24]
2405097a:	3301      	adds	r3, #1
2405097c:	61bb      	str	r3, [r7, #24]
	while (*ptr++)
2405097e:	697b      	ldr	r3, [r7, #20]
24050980:	1c5a      	adds	r2, r3, #1
24050982:	617a      	str	r2, [r7, #20]
24050984:	781b      	ldrb	r3, [r3, #0]
24050986:	2b00      	cmp	r3, #0
24050988:	d1f6      	bne.n	24050978 <LCD_DisplayStringAt+0x28>

	/* Characters number per line */
	xsize = (LCD_GetXSize() / font->Width);
2405098a:	f7ff ff85 	bl	24050898 <LCD_GetXSize>
2405098e:	4603      	mov	r3, r0
24050990:	461a      	mov	r2, r3
24050992:	4b36      	ldr	r3, [pc, #216]	; (24050a6c <LCD_DisplayStringAt+0x11c>)
24050994:	681b      	ldr	r3, [r3, #0]
24050996:	889b      	ldrh	r3, [r3, #4]
24050998:	fbb2 f3f3 	udiv	r3, r2, r3
2405099c:	b29b      	uxth	r3, r3
2405099e:	613b      	str	r3, [r7, #16]

	switch (mode) {
240509a0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
240509a4:	2b03      	cmp	r3, #3
240509a6:	d014      	beq.n	240509d2 <LCD_DisplayStringAt+0x82>
240509a8:	2b03      	cmp	r3, #3
240509aa:	dc23      	bgt.n	240509f4 <LCD_DisplayStringAt+0xa4>
240509ac:	2b01      	cmp	r3, #1
240509ae:	d002      	beq.n	240509b6 <LCD_DisplayStringAt+0x66>
240509b0:	2b02      	cmp	r3, #2
240509b2:	d011      	beq.n	240509d8 <LCD_DisplayStringAt+0x88>
240509b4:	e01e      	b.n	240509f4 <LCD_DisplayStringAt+0xa4>
	case CENTER_MODE: {
		refcolumn = X + ((xsize - size) * font->Width) / 2;
240509b6:	693a      	ldr	r2, [r7, #16]
240509b8:	69bb      	ldr	r3, [r7, #24]
240509ba:	1ad3      	subs	r3, r2, r3
240509bc:	4a2b      	ldr	r2, [pc, #172]	; (24050a6c <LCD_DisplayStringAt+0x11c>)
240509be:	6812      	ldr	r2, [r2, #0]
240509c0:	8892      	ldrh	r2, [r2, #4]
240509c2:	fb02 f303 	mul.w	r3, r2, r3
240509c6:	085b      	lsrs	r3, r3, #1
240509c8:	b29a      	uxth	r2, r3
240509ca:	897b      	ldrh	r3, [r7, #10]
240509cc:	4413      	add	r3, r2
240509ce:	83fb      	strh	r3, [r7, #30]
		break;
240509d0:	e013      	b.n	240509fa <LCD_DisplayStringAt+0xaa>
	}
	case LEFT_MODE: {
		refcolumn = X;
240509d2:	897b      	ldrh	r3, [r7, #10]
240509d4:	83fb      	strh	r3, [r7, #30]
		break;
240509d6:	e010      	b.n	240509fa <LCD_DisplayStringAt+0xaa>
	}
	case RIGHT_MODE: {
		refcolumn = X + ((xsize - size) * font->Width);
240509d8:	693a      	ldr	r2, [r7, #16]
240509da:	69bb      	ldr	r3, [r7, #24]
240509dc:	1ad3      	subs	r3, r2, r3
240509de:	b29a      	uxth	r2, r3
240509e0:	4b22      	ldr	r3, [pc, #136]	; (24050a6c <LCD_DisplayStringAt+0x11c>)
240509e2:	681b      	ldr	r3, [r3, #0]
240509e4:	889b      	ldrh	r3, [r3, #4]
240509e6:	fb12 f303 	smulbb	r3, r2, r3
240509ea:	b29a      	uxth	r2, r3
240509ec:	897b      	ldrh	r3, [r7, #10]
240509ee:	4413      	add	r3, r2
240509f0:	83fb      	strh	r3, [r7, #30]
		break;
240509f2:	e002      	b.n	240509fa <LCD_DisplayStringAt+0xaa>
	}
	default: {
		refcolumn = X;
240509f4:	897b      	ldrh	r3, [r7, #10]
240509f6:	83fb      	strh	r3, [r7, #30]
		break;
240509f8:	bf00      	nop
	}
	}

	/* Send the string character by character on LCD */
	while ((*pText != 0)
240509fa:	e012      	b.n	24050a22 <LCD_DisplayStringAt+0xd2>
			& (((LCD_GetXSize() - (i * font->Width)) & 0xFFFF) >= font->Width)) {
		/* Display one character on LCD */
		LCD_DisplayChar(buf, refcolumn, Y, *pText);
240509fc:	687b      	ldr	r3, [r7, #4]
240509fe:	781b      	ldrb	r3, [r3, #0]
24050a00:	893a      	ldrh	r2, [r7, #8]
24050a02:	8bf9      	ldrh	r1, [r7, #30]
24050a04:	68f8      	ldr	r0, [r7, #12]
24050a06:	f000 f833 	bl	24050a70 <LCD_DisplayChar>
		/* Decrement the column position by 16 */
		refcolumn += font->Width;
24050a0a:	4b18      	ldr	r3, [pc, #96]	; (24050a6c <LCD_DisplayStringAt+0x11c>)
24050a0c:	681b      	ldr	r3, [r3, #0]
24050a0e:	889a      	ldrh	r2, [r3, #4]
24050a10:	8bfb      	ldrh	r3, [r7, #30]
24050a12:	4413      	add	r3, r2
24050a14:	83fb      	strh	r3, [r7, #30]
		/* Point on the next character */
		pText++;
24050a16:	687b      	ldr	r3, [r7, #4]
24050a18:	3301      	adds	r3, #1
24050a1a:	607b      	str	r3, [r7, #4]
		i++;
24050a1c:	8bbb      	ldrh	r3, [r7, #28]
24050a1e:	3301      	adds	r3, #1
24050a20:	83bb      	strh	r3, [r7, #28]
	while ((*pText != 0)
24050a22:	687b      	ldr	r3, [r7, #4]
24050a24:	781b      	ldrb	r3, [r3, #0]
			& (((LCD_GetXSize() - (i * font->Width)) & 0xFFFF) >= font->Width)) {
24050a26:	2b00      	cmp	r3, #0
24050a28:	bf14      	ite	ne
24050a2a:	2301      	movne	r3, #1
24050a2c:	2300      	moveq	r3, #0
24050a2e:	b2dc      	uxtb	r4, r3
24050a30:	f7ff ff32 	bl	24050898 <LCD_GetXSize>
24050a34:	4603      	mov	r3, r0
24050a36:	4619      	mov	r1, r3
24050a38:	8bbb      	ldrh	r3, [r7, #28]
24050a3a:	4a0c      	ldr	r2, [pc, #48]	; (24050a6c <LCD_DisplayStringAt+0x11c>)
24050a3c:	6812      	ldr	r2, [r2, #0]
24050a3e:	8892      	ldrh	r2, [r2, #4]
24050a40:	fb02 f303 	mul.w	r3, r2, r3
24050a44:	1acb      	subs	r3, r1, r3
24050a46:	b29b      	uxth	r3, r3
24050a48:	4a08      	ldr	r2, [pc, #32]	; (24050a6c <LCD_DisplayStringAt+0x11c>)
24050a4a:	6812      	ldr	r2, [r2, #0]
24050a4c:	8892      	ldrh	r2, [r2, #4]
24050a4e:	4293      	cmp	r3, r2
24050a50:	bfac      	ite	ge
24050a52:	2301      	movge	r3, #1
24050a54:	2300      	movlt	r3, #0
24050a56:	b2db      	uxtb	r3, r3
24050a58:	4023      	ands	r3, r4
24050a5a:	b2db      	uxtb	r3, r3
	while ((*pText != 0)
24050a5c:	2b00      	cmp	r3, #0
24050a5e:	d1cd      	bne.n	240509fc <LCD_DisplayStringAt+0xac>
	}
}
24050a60:	bf00      	nop
24050a62:	bf00      	nop
24050a64:	3724      	adds	r7, #36	; 0x24
24050a66:	46bd      	mov	sp, r7
24050a68:	bd90      	pop	{r4, r7, pc}
24050a6a:	bf00      	nop
24050a6c:	20000020 	.word	0x20000020

24050a70 <LCD_DisplayChar>:
 * @param  Xpos: start column address
 * @param  Ypos: the Line where to display the character shape
 * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
 * @retval None
 */
void LCD_DisplayChar(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint8_t Ascii) {
24050a70:	b580      	push	{r7, lr}
24050a72:	b084      	sub	sp, #16
24050a74:	af00      	add	r7, sp, #0
24050a76:	60f8      	str	r0, [r7, #12]
24050a78:	4608      	mov	r0, r1
24050a7a:	4611      	mov	r1, r2
24050a7c:	461a      	mov	r2, r3
24050a7e:	4603      	mov	r3, r0
24050a80:	817b      	strh	r3, [r7, #10]
24050a82:	460b      	mov	r3, r1
24050a84:	813b      	strh	r3, [r7, #8]
24050a86:	4613      	mov	r3, r2
24050a88:	71fb      	strb	r3, [r7, #7]
	DrawChar(buf, Xpos, Ypos,
			&font->table[(Ascii - ' ') * font->Height * ((font->Width + 7) / 8)]);
24050a8a:	4b0f      	ldr	r3, [pc, #60]	; (24050ac8 <LCD_DisplayChar+0x58>)
24050a8c:	681b      	ldr	r3, [r3, #0]
24050a8e:	681a      	ldr	r2, [r3, #0]
24050a90:	79fb      	ldrb	r3, [r7, #7]
24050a92:	3b20      	subs	r3, #32
24050a94:	490c      	ldr	r1, [pc, #48]	; (24050ac8 <LCD_DisplayChar+0x58>)
24050a96:	6809      	ldr	r1, [r1, #0]
24050a98:	88c9      	ldrh	r1, [r1, #6]
24050a9a:	fb01 f103 	mul.w	r1, r1, r3
24050a9e:	4b0a      	ldr	r3, [pc, #40]	; (24050ac8 <LCD_DisplayChar+0x58>)
24050aa0:	681b      	ldr	r3, [r3, #0]
24050aa2:	889b      	ldrh	r3, [r3, #4]
24050aa4:	3307      	adds	r3, #7
24050aa6:	2b00      	cmp	r3, #0
24050aa8:	da00      	bge.n	24050aac <LCD_DisplayChar+0x3c>
24050aaa:	3307      	adds	r3, #7
24050aac:	10db      	asrs	r3, r3, #3
24050aae:	fb03 f301 	mul.w	r3, r3, r1
	DrawChar(buf, Xpos, Ypos,
24050ab2:	4413      	add	r3, r2
24050ab4:	893a      	ldrh	r2, [r7, #8]
24050ab6:	8979      	ldrh	r1, [r7, #10]
24050ab8:	68f8      	ldr	r0, [r7, #12]
24050aba:	f000 fa09 	bl	24050ed0 <DrawChar>
}
24050abe:	bf00      	nop
24050ac0:	3710      	adds	r7, #16
24050ac2:	46bd      	mov	sp, r7
24050ac4:	bd80      	pop	{r7, pc}
24050ac6:	bf00      	nop
24050ac8:	20000020 	.word	0x20000020

24050acc <LCD_DrawHLine>:
 * @param  Ypos: the Y position
 * @param  Length: line length
 * @retval None
 */
void LCD_DrawHLine(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint16_t Length,
		uint16_t color) {
24050acc:	b580      	push	{r7, lr}
24050ace:	b088      	sub	sp, #32
24050ad0:	af02      	add	r7, sp, #8
24050ad2:	60f8      	str	r0, [r7, #12]
24050ad4:	4608      	mov	r0, r1
24050ad6:	4611      	mov	r1, r2
24050ad8:	461a      	mov	r2, r3
24050ada:	4603      	mov	r3, r0
24050adc:	817b      	strh	r3, [r7, #10]
24050ade:	460b      	mov	r3, r1
24050ae0:	813b      	strh	r3, [r7, #8]
24050ae2:	4613      	mov	r3, r2
24050ae4:	80fb      	strh	r3, [r7, #6]
	uint16_t *xaddress = 0;
24050ae6:	2300      	movs	r3, #0
24050ae8:	617b      	str	r3, [r7, #20]

	/* Get the line address */
	xaddress = (buf) + (LCD_GetXSize() * Ypos + Xpos);
24050aea:	f7ff fed5 	bl	24050898 <LCD_GetXSize>
24050aee:	4603      	mov	r3, r0
24050af0:	461a      	mov	r2, r3
24050af2:	893b      	ldrh	r3, [r7, #8]
24050af4:	fb03 f202 	mul.w	r2, r3, r2
24050af8:	897b      	ldrh	r3, [r7, #10]
24050afa:	4413      	add	r3, r2
24050afc:	005b      	lsls	r3, r3, #1
24050afe:	68fa      	ldr	r2, [r7, #12]
24050b00:	4413      	add	r3, r2
24050b02:	617b      	str	r3, [r7, #20]

	/* Write line */
	FillBuffer((uint32_t*) xaddress, Length, 1, 0, color);
24050b04:	88f9      	ldrh	r1, [r7, #6]
24050b06:	8c3b      	ldrh	r3, [r7, #32]
24050b08:	9300      	str	r3, [sp, #0]
24050b0a:	2300      	movs	r3, #0
24050b0c:	2201      	movs	r2, #1
24050b0e:	6978      	ldr	r0, [r7, #20]
24050b10:	f000 fa7c 	bl	2405100c <FillBuffer>
}
24050b14:	bf00      	nop
24050b16:	3718      	adds	r7, #24
24050b18:	46bd      	mov	sp, r7
24050b1a:	bd80      	pop	{r7, pc}

24050b1c <LCD_DrawVLine>:
 * @param  Ypos: the Y position
 * @param  Length: line length
 * @retval None
 */
void LCD_DrawVLine(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint16_t Length,
		uint16_t color) {
24050b1c:	b590      	push	{r4, r7, lr}
24050b1e:	b089      	sub	sp, #36	; 0x24
24050b20:	af02      	add	r7, sp, #8
24050b22:	60f8      	str	r0, [r7, #12]
24050b24:	4608      	mov	r0, r1
24050b26:	4611      	mov	r1, r2
24050b28:	461a      	mov	r2, r3
24050b2a:	4603      	mov	r3, r0
24050b2c:	817b      	strh	r3, [r7, #10]
24050b2e:	460b      	mov	r3, r1
24050b30:	813b      	strh	r3, [r7, #8]
24050b32:	4613      	mov	r3, r2
24050b34:	80fb      	strh	r3, [r7, #6]
	uint16_t *xaddress = 0;
24050b36:	2300      	movs	r3, #0
24050b38:	617b      	str	r3, [r7, #20]

	/* Get the line address */
	xaddress = (buf) + (LCD_GetXSize() * Ypos + Xpos);
24050b3a:	f7ff fead 	bl	24050898 <LCD_GetXSize>
24050b3e:	4603      	mov	r3, r0
24050b40:	461a      	mov	r2, r3
24050b42:	893b      	ldrh	r3, [r7, #8]
24050b44:	fb03 f202 	mul.w	r2, r3, r2
24050b48:	897b      	ldrh	r3, [r7, #10]
24050b4a:	4413      	add	r3, r2
24050b4c:	005b      	lsls	r3, r3, #1
24050b4e:	68fa      	ldr	r2, [r7, #12]
24050b50:	4413      	add	r3, r2
24050b52:	617b      	str	r3, [r7, #20]

	/* Write line */
	FillBuffer((uint32_t*) xaddress, 1, Length, (LCD_GetXSize() - 1), color);
24050b54:	88fc      	ldrh	r4, [r7, #6]
24050b56:	f7ff fe9f 	bl	24050898 <LCD_GetXSize>
24050b5a:	4603      	mov	r3, r0
24050b5c:	3b01      	subs	r3, #1
24050b5e:	461a      	mov	r2, r3
24050b60:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
24050b62:	9300      	str	r3, [sp, #0]
24050b64:	4613      	mov	r3, r2
24050b66:	4622      	mov	r2, r4
24050b68:	2101      	movs	r1, #1
24050b6a:	6978      	ldr	r0, [r7, #20]
24050b6c:	f000 fa4e 	bl	2405100c <FillBuffer>
}
24050b70:	bf00      	nop
24050b72:	371c      	adds	r7, #28
24050b74:	46bd      	mov	sp, r7
24050b76:	bd90      	pop	{r4, r7, pc}

24050b78 <LCD_DrawRect>:
 * @param  Height: display rectangle height
 * @param  Width: display rectangle width
 * @retval None
 */
void LCD_DrawRect(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint16_t Width,
		uint16_t Height, uint16_t color) {
24050b78:	b580      	push	{r7, lr}
24050b7a:	b086      	sub	sp, #24
24050b7c:	af02      	add	r7, sp, #8
24050b7e:	60f8      	str	r0, [r7, #12]
24050b80:	4608      	mov	r0, r1
24050b82:	4611      	mov	r1, r2
24050b84:	461a      	mov	r2, r3
24050b86:	4603      	mov	r3, r0
24050b88:	817b      	strh	r3, [r7, #10]
24050b8a:	460b      	mov	r3, r1
24050b8c:	813b      	strh	r3, [r7, #8]
24050b8e:	4613      	mov	r3, r2
24050b90:	80fb      	strh	r3, [r7, #6]
	/* Draw horizontal lines */
	LCD_DrawHLine(buf, Xpos, Ypos, Width, color);
24050b92:	88f8      	ldrh	r0, [r7, #6]
24050b94:	893a      	ldrh	r2, [r7, #8]
24050b96:	8979      	ldrh	r1, [r7, #10]
24050b98:	8bbb      	ldrh	r3, [r7, #28]
24050b9a:	9300      	str	r3, [sp, #0]
24050b9c:	4603      	mov	r3, r0
24050b9e:	68f8      	ldr	r0, [r7, #12]
24050ba0:	f7ff ff94 	bl	24050acc <LCD_DrawHLine>
	LCD_DrawHLine(buf, Xpos, (Ypos + Height), Width, color);
24050ba4:	893a      	ldrh	r2, [r7, #8]
24050ba6:	8b3b      	ldrh	r3, [r7, #24]
24050ba8:	4413      	add	r3, r2
24050baa:	b29a      	uxth	r2, r3
24050bac:	88f8      	ldrh	r0, [r7, #6]
24050bae:	8979      	ldrh	r1, [r7, #10]
24050bb0:	8bbb      	ldrh	r3, [r7, #28]
24050bb2:	9300      	str	r3, [sp, #0]
24050bb4:	4603      	mov	r3, r0
24050bb6:	68f8      	ldr	r0, [r7, #12]
24050bb8:	f7ff ff88 	bl	24050acc <LCD_DrawHLine>

	/* Draw vertical lines */
	LCD_DrawVLine(buf, Xpos, Ypos, Height, color);
24050bbc:	8b38      	ldrh	r0, [r7, #24]
24050bbe:	893a      	ldrh	r2, [r7, #8]
24050bc0:	8979      	ldrh	r1, [r7, #10]
24050bc2:	8bbb      	ldrh	r3, [r7, #28]
24050bc4:	9300      	str	r3, [sp, #0]
24050bc6:	4603      	mov	r3, r0
24050bc8:	68f8      	ldr	r0, [r7, #12]
24050bca:	f7ff ffa7 	bl	24050b1c <LCD_DrawVLine>
	LCD_DrawVLine(buf, (Xpos + Width), Ypos, Height, color);
24050bce:	897a      	ldrh	r2, [r7, #10]
24050bd0:	88fb      	ldrh	r3, [r7, #6]
24050bd2:	4413      	add	r3, r2
24050bd4:	b299      	uxth	r1, r3
24050bd6:	8b38      	ldrh	r0, [r7, #24]
24050bd8:	893a      	ldrh	r2, [r7, #8]
24050bda:	8bbb      	ldrh	r3, [r7, #28]
24050bdc:	9300      	str	r3, [sp, #0]
24050bde:	4603      	mov	r3, r0
24050be0:	68f8      	ldr	r0, [r7, #12]
24050be2:	f7ff ff9b 	bl	24050b1c <LCD_DrawVLine>
}
24050be6:	bf00      	nop
24050be8:	3710      	adds	r7, #16
24050bea:	46bd      	mov	sp, r7
24050bec:	bd80      	pop	{r7, pc}

24050bee <LCD_DrawCircle>:
 * @param  Ypos: the Y position
 * @param  Radius: the circle radius
 * @retval None
 */
void LCD_DrawCircle(uint16_t *buf, uint16_t Xpos, uint16_t Ypos,
		uint16_t Radius, uint16_t color) {
24050bee:	b580      	push	{r7, lr}
24050bf0:	b088      	sub	sp, #32
24050bf2:	af00      	add	r7, sp, #0
24050bf4:	60f8      	str	r0, [r7, #12]
24050bf6:	4608      	mov	r0, r1
24050bf8:	4611      	mov	r1, r2
24050bfa:	461a      	mov	r2, r3
24050bfc:	4603      	mov	r3, r0
24050bfe:	817b      	strh	r3, [r7, #10]
24050c00:	460b      	mov	r3, r1
24050c02:	813b      	strh	r3, [r7, #8]
24050c04:	4613      	mov	r3, r2
24050c06:	80fb      	strh	r3, [r7, #6]
	int32_t d;/* Decision Variable */
	uint32_t curx;/* Current X Value */
	uint32_t cury;/* Current Y Value */

	d = 3 - (Radius << 1);
24050c08:	88fb      	ldrh	r3, [r7, #6]
24050c0a:	005b      	lsls	r3, r3, #1
24050c0c:	f1c3 0303 	rsb	r3, r3, #3
24050c10:	61fb      	str	r3, [r7, #28]
	curx = 0;
24050c12:	2300      	movs	r3, #0
24050c14:	61bb      	str	r3, [r7, #24]
	cury = Radius;
24050c16:	88fb      	ldrh	r3, [r7, #6]
24050c18:	617b      	str	r3, [r7, #20]

	while (curx <= cury) {
24050c1a:	e087      	b.n	24050d2c <LCD_DrawCircle+0x13e>
		LCD_DrawPixel(buf, (Xpos + curx), (Ypos - cury), color);
24050c1c:	69bb      	ldr	r3, [r7, #24]
24050c1e:	b29a      	uxth	r2, r3
24050c20:	897b      	ldrh	r3, [r7, #10]
24050c22:	4413      	add	r3, r2
24050c24:	b299      	uxth	r1, r3
24050c26:	697b      	ldr	r3, [r7, #20]
24050c28:	b29b      	uxth	r3, r3
24050c2a:	893a      	ldrh	r2, [r7, #8]
24050c2c:	1ad3      	subs	r3, r2, r3
24050c2e:	b29a      	uxth	r2, r3
24050c30:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
24050c32:	68f8      	ldr	r0, [r7, #12]
24050c34:	f7ff fe52 	bl	240508dc <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos - curx), (Ypos - cury), color);
24050c38:	69bb      	ldr	r3, [r7, #24]
24050c3a:	b29b      	uxth	r3, r3
24050c3c:	897a      	ldrh	r2, [r7, #10]
24050c3e:	1ad3      	subs	r3, r2, r3
24050c40:	b299      	uxth	r1, r3
24050c42:	697b      	ldr	r3, [r7, #20]
24050c44:	b29b      	uxth	r3, r3
24050c46:	893a      	ldrh	r2, [r7, #8]
24050c48:	1ad3      	subs	r3, r2, r3
24050c4a:	b29a      	uxth	r2, r3
24050c4c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
24050c4e:	68f8      	ldr	r0, [r7, #12]
24050c50:	f7ff fe44 	bl	240508dc <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos + cury), (Ypos - curx), color);
24050c54:	697b      	ldr	r3, [r7, #20]
24050c56:	b29a      	uxth	r2, r3
24050c58:	897b      	ldrh	r3, [r7, #10]
24050c5a:	4413      	add	r3, r2
24050c5c:	b299      	uxth	r1, r3
24050c5e:	69bb      	ldr	r3, [r7, #24]
24050c60:	b29b      	uxth	r3, r3
24050c62:	893a      	ldrh	r2, [r7, #8]
24050c64:	1ad3      	subs	r3, r2, r3
24050c66:	b29a      	uxth	r2, r3
24050c68:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
24050c6a:	68f8      	ldr	r0, [r7, #12]
24050c6c:	f7ff fe36 	bl	240508dc <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos - cury), (Ypos - curx), color);
24050c70:	697b      	ldr	r3, [r7, #20]
24050c72:	b29b      	uxth	r3, r3
24050c74:	897a      	ldrh	r2, [r7, #10]
24050c76:	1ad3      	subs	r3, r2, r3
24050c78:	b299      	uxth	r1, r3
24050c7a:	69bb      	ldr	r3, [r7, #24]
24050c7c:	b29b      	uxth	r3, r3
24050c7e:	893a      	ldrh	r2, [r7, #8]
24050c80:	1ad3      	subs	r3, r2, r3
24050c82:	b29a      	uxth	r2, r3
24050c84:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
24050c86:	68f8      	ldr	r0, [r7, #12]
24050c88:	f7ff fe28 	bl	240508dc <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos + curx), (Ypos + cury), color);
24050c8c:	69bb      	ldr	r3, [r7, #24]
24050c8e:	b29a      	uxth	r2, r3
24050c90:	897b      	ldrh	r3, [r7, #10]
24050c92:	4413      	add	r3, r2
24050c94:	b299      	uxth	r1, r3
24050c96:	697b      	ldr	r3, [r7, #20]
24050c98:	b29a      	uxth	r2, r3
24050c9a:	893b      	ldrh	r3, [r7, #8]
24050c9c:	4413      	add	r3, r2
24050c9e:	b29a      	uxth	r2, r3
24050ca0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
24050ca2:	68f8      	ldr	r0, [r7, #12]
24050ca4:	f7ff fe1a 	bl	240508dc <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos - curx), (Ypos + cury), color);
24050ca8:	69bb      	ldr	r3, [r7, #24]
24050caa:	b29b      	uxth	r3, r3
24050cac:	897a      	ldrh	r2, [r7, #10]
24050cae:	1ad3      	subs	r3, r2, r3
24050cb0:	b299      	uxth	r1, r3
24050cb2:	697b      	ldr	r3, [r7, #20]
24050cb4:	b29a      	uxth	r2, r3
24050cb6:	893b      	ldrh	r3, [r7, #8]
24050cb8:	4413      	add	r3, r2
24050cba:	b29a      	uxth	r2, r3
24050cbc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
24050cbe:	68f8      	ldr	r0, [r7, #12]
24050cc0:	f7ff fe0c 	bl	240508dc <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos + cury), (Ypos + curx), color);
24050cc4:	697b      	ldr	r3, [r7, #20]
24050cc6:	b29a      	uxth	r2, r3
24050cc8:	897b      	ldrh	r3, [r7, #10]
24050cca:	4413      	add	r3, r2
24050ccc:	b299      	uxth	r1, r3
24050cce:	69bb      	ldr	r3, [r7, #24]
24050cd0:	b29a      	uxth	r2, r3
24050cd2:	893b      	ldrh	r3, [r7, #8]
24050cd4:	4413      	add	r3, r2
24050cd6:	b29a      	uxth	r2, r3
24050cd8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
24050cda:	68f8      	ldr	r0, [r7, #12]
24050cdc:	f7ff fdfe 	bl	240508dc <LCD_DrawPixel>
		LCD_DrawPixel(buf, (Xpos - cury), (Ypos + curx), color);
24050ce0:	697b      	ldr	r3, [r7, #20]
24050ce2:	b29b      	uxth	r3, r3
24050ce4:	897a      	ldrh	r2, [r7, #10]
24050ce6:	1ad3      	subs	r3, r2, r3
24050ce8:	b299      	uxth	r1, r3
24050cea:	69bb      	ldr	r3, [r7, #24]
24050cec:	b29a      	uxth	r2, r3
24050cee:	893b      	ldrh	r3, [r7, #8]
24050cf0:	4413      	add	r3, r2
24050cf2:	b29a      	uxth	r2, r3
24050cf4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
24050cf6:	68f8      	ldr	r0, [r7, #12]
24050cf8:	f7ff fdf0 	bl	240508dc <LCD_DrawPixel>

		if (d < 0) {
24050cfc:	69fb      	ldr	r3, [r7, #28]
24050cfe:	2b00      	cmp	r3, #0
24050d00:	da06      	bge.n	24050d10 <LCD_DrawCircle+0x122>
			d += (curx << 2) + 6;
24050d02:	69bb      	ldr	r3, [r7, #24]
24050d04:	009a      	lsls	r2, r3, #2
24050d06:	69fb      	ldr	r3, [r7, #28]
24050d08:	4413      	add	r3, r2
24050d0a:	3306      	adds	r3, #6
24050d0c:	61fb      	str	r3, [r7, #28]
24050d0e:	e00a      	b.n	24050d26 <LCD_DrawCircle+0x138>
		} else {
			d += ((curx - cury) << 2) + 10;
24050d10:	69ba      	ldr	r2, [r7, #24]
24050d12:	697b      	ldr	r3, [r7, #20]
24050d14:	1ad3      	subs	r3, r2, r3
24050d16:	009a      	lsls	r2, r3, #2
24050d18:	69fb      	ldr	r3, [r7, #28]
24050d1a:	4413      	add	r3, r2
24050d1c:	330a      	adds	r3, #10
24050d1e:	61fb      	str	r3, [r7, #28]
			cury--;
24050d20:	697b      	ldr	r3, [r7, #20]
24050d22:	3b01      	subs	r3, #1
24050d24:	617b      	str	r3, [r7, #20]
		}
		curx++;
24050d26:	69bb      	ldr	r3, [r7, #24]
24050d28:	3301      	adds	r3, #1
24050d2a:	61bb      	str	r3, [r7, #24]
	while (curx <= cury) {
24050d2c:	69ba      	ldr	r2, [r7, #24]
24050d2e:	697b      	ldr	r3, [r7, #20]
24050d30:	429a      	cmp	r2, r3
24050d32:	f67f af73 	bls.w	24050c1c <LCD_DrawCircle+0x2e>
	}
}
24050d36:	bf00      	nop
24050d38:	bf00      	nop
24050d3a:	3720      	adds	r7, #32
24050d3c:	46bd      	mov	sp, r7
24050d3e:	bd80      	pop	{r7, pc}

24050d40 <LCD_FillRect>:
 * @param  Height: rectangle height
 * @param  Width: rectangle width
 * @retval None
 */
void LCD_FillRect(uint16_t *buf, uint16_t Xpos, uint16_t Ypos, uint16_t Width,
		uint16_t Height, uint16_t color) {
24050d40:	b5b0      	push	{r4, r5, r7, lr}
24050d42:	b088      	sub	sp, #32
24050d44:	af02      	add	r7, sp, #8
24050d46:	60f8      	str	r0, [r7, #12]
24050d48:	4608      	mov	r0, r1
24050d4a:	4611      	mov	r1, r2
24050d4c:	461a      	mov	r2, r3
24050d4e:	4603      	mov	r3, r0
24050d50:	817b      	strh	r3, [r7, #10]
24050d52:	460b      	mov	r3, r1
24050d54:	813b      	strh	r3, [r7, #8]
24050d56:	4613      	mov	r3, r2
24050d58:	80fb      	strh	r3, [r7, #6]
	uint16_t *xaddress = 0;
24050d5a:	2300      	movs	r3, #0
24050d5c:	617b      	str	r3, [r7, #20]

	/* Get the rectangle start address */
	xaddress = (buf) + (LCD_GetXSize() * Ypos + Xpos);
24050d5e:	f7ff fd9b 	bl	24050898 <LCD_GetXSize>
24050d62:	4603      	mov	r3, r0
24050d64:	461a      	mov	r2, r3
24050d66:	893b      	ldrh	r3, [r7, #8]
24050d68:	fb03 f202 	mul.w	r2, r3, r2
24050d6c:	897b      	ldrh	r3, [r7, #10]
24050d6e:	4413      	add	r3, r2
24050d70:	005b      	lsls	r3, r3, #1
24050d72:	68fa      	ldr	r2, [r7, #12]
24050d74:	4413      	add	r3, r2
24050d76:	617b      	str	r3, [r7, #20]

	/* Fill the rectangle */
	FillBuffer((uint32_t*) xaddress, Width, Height, (LCD_GetXSize() - Width),
24050d78:	88fc      	ldrh	r4, [r7, #6]
24050d7a:	8d3d      	ldrh	r5, [r7, #40]	; 0x28
24050d7c:	f7ff fd8c 	bl	24050898 <LCD_GetXSize>
24050d80:	4603      	mov	r3, r0
24050d82:	461a      	mov	r2, r3
24050d84:	88fb      	ldrh	r3, [r7, #6]
24050d86:	1ad3      	subs	r3, r2, r3
24050d88:	461a      	mov	r2, r3
24050d8a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
24050d8c:	9300      	str	r3, [sp, #0]
24050d8e:	4613      	mov	r3, r2
24050d90:	462a      	mov	r2, r5
24050d92:	4621      	mov	r1, r4
24050d94:	6978      	ldr	r0, [r7, #20]
24050d96:	f000 f939 	bl	2405100c <FillBuffer>
			color);
}
24050d9a:	bf00      	nop
24050d9c:	3718      	adds	r7, #24
24050d9e:	46bd      	mov	sp, r7
24050da0:	bdb0      	pop	{r4, r5, r7, pc}

24050da2 <LCD_FillCircle>:
 * @param  Ypos: the Y position
 * @param  Radius: the circle radius
 * @retval None
 */
void LCD_FillCircle(uint16_t *buf, uint16_t Xpos, uint16_t Ypos,
		uint16_t Radius, uint16_t color) {
24050da2:	b580      	push	{r7, lr}
24050da4:	b08a      	sub	sp, #40	; 0x28
24050da6:	af02      	add	r7, sp, #8
24050da8:	60f8      	str	r0, [r7, #12]
24050daa:	4608      	mov	r0, r1
24050dac:	4611      	mov	r1, r2
24050dae:	461a      	mov	r2, r3
24050db0:	4603      	mov	r3, r0
24050db2:	817b      	strh	r3, [r7, #10]
24050db4:	460b      	mov	r3, r1
24050db6:	813b      	strh	r3, [r7, #8]
24050db8:	4613      	mov	r3, r2
24050dba:	80fb      	strh	r3, [r7, #6]
	int32_t d; /* Decision Variable */
	uint32_t curx;/* Current X Value */
	uint32_t cury;/* Current Y Value */

	d = 3 - (Radius << 1);
24050dbc:	88fb      	ldrh	r3, [r7, #6]
24050dbe:	005b      	lsls	r3, r3, #1
24050dc0:	f1c3 0303 	rsb	r3, r3, #3
24050dc4:	61fb      	str	r3, [r7, #28]

	curx = 0;
24050dc6:	2300      	movs	r3, #0
24050dc8:	61bb      	str	r3, [r7, #24]
	cury = Radius;
24050dca:	88fb      	ldrh	r3, [r7, #6]
24050dcc:	617b      	str	r3, [r7, #20]

	while (curx <= cury) {
24050dce:	e06d      	b.n	24050eac <LCD_FillCircle+0x10a>
		if (cury > 0) {
24050dd0:	697b      	ldr	r3, [r7, #20]
24050dd2:	2b00      	cmp	r3, #0
24050dd4:	d027      	beq.n	24050e26 <LCD_FillCircle+0x84>
			LCD_DrawHLine(buf, Xpos - cury, Ypos + curx, 2 * cury, color);
24050dd6:	697b      	ldr	r3, [r7, #20]
24050dd8:	b29b      	uxth	r3, r3
24050dda:	897a      	ldrh	r2, [r7, #10]
24050ddc:	1ad3      	subs	r3, r2, r3
24050dde:	b299      	uxth	r1, r3
24050de0:	69bb      	ldr	r3, [r7, #24]
24050de2:	b29a      	uxth	r2, r3
24050de4:	893b      	ldrh	r3, [r7, #8]
24050de6:	4413      	add	r3, r2
24050de8:	b29a      	uxth	r2, r3
24050dea:	697b      	ldr	r3, [r7, #20]
24050dec:	b29b      	uxth	r3, r3
24050dee:	005b      	lsls	r3, r3, #1
24050df0:	b298      	uxth	r0, r3
24050df2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
24050df4:	9300      	str	r3, [sp, #0]
24050df6:	4603      	mov	r3, r0
24050df8:	68f8      	ldr	r0, [r7, #12]
24050dfa:	f7ff fe67 	bl	24050acc <LCD_DrawHLine>
			LCD_DrawHLine(buf, Xpos - cury, Ypos - curx, 2 * cury, color);
24050dfe:	697b      	ldr	r3, [r7, #20]
24050e00:	b29b      	uxth	r3, r3
24050e02:	897a      	ldrh	r2, [r7, #10]
24050e04:	1ad3      	subs	r3, r2, r3
24050e06:	b299      	uxth	r1, r3
24050e08:	69bb      	ldr	r3, [r7, #24]
24050e0a:	b29b      	uxth	r3, r3
24050e0c:	893a      	ldrh	r2, [r7, #8]
24050e0e:	1ad3      	subs	r3, r2, r3
24050e10:	b29a      	uxth	r2, r3
24050e12:	697b      	ldr	r3, [r7, #20]
24050e14:	b29b      	uxth	r3, r3
24050e16:	005b      	lsls	r3, r3, #1
24050e18:	b298      	uxth	r0, r3
24050e1a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
24050e1c:	9300      	str	r3, [sp, #0]
24050e1e:	4603      	mov	r3, r0
24050e20:	68f8      	ldr	r0, [r7, #12]
24050e22:	f7ff fe53 	bl	24050acc <LCD_DrawHLine>
		}

		if (curx > 0) {
24050e26:	69bb      	ldr	r3, [r7, #24]
24050e28:	2b00      	cmp	r3, #0
24050e2a:	d027      	beq.n	24050e7c <LCD_FillCircle+0xda>
			LCD_DrawHLine(buf, Xpos - curx, Ypos - cury, 2 * curx, color);
24050e2c:	69bb      	ldr	r3, [r7, #24]
24050e2e:	b29b      	uxth	r3, r3
24050e30:	897a      	ldrh	r2, [r7, #10]
24050e32:	1ad3      	subs	r3, r2, r3
24050e34:	b299      	uxth	r1, r3
24050e36:	697b      	ldr	r3, [r7, #20]
24050e38:	b29b      	uxth	r3, r3
24050e3a:	893a      	ldrh	r2, [r7, #8]
24050e3c:	1ad3      	subs	r3, r2, r3
24050e3e:	b29a      	uxth	r2, r3
24050e40:	69bb      	ldr	r3, [r7, #24]
24050e42:	b29b      	uxth	r3, r3
24050e44:	005b      	lsls	r3, r3, #1
24050e46:	b298      	uxth	r0, r3
24050e48:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
24050e4a:	9300      	str	r3, [sp, #0]
24050e4c:	4603      	mov	r3, r0
24050e4e:	68f8      	ldr	r0, [r7, #12]
24050e50:	f7ff fe3c 	bl	24050acc <LCD_DrawHLine>
			LCD_DrawHLine(buf, Xpos - curx, Ypos + cury, 2 * curx, color);
24050e54:	69bb      	ldr	r3, [r7, #24]
24050e56:	b29b      	uxth	r3, r3
24050e58:	897a      	ldrh	r2, [r7, #10]
24050e5a:	1ad3      	subs	r3, r2, r3
24050e5c:	b299      	uxth	r1, r3
24050e5e:	697b      	ldr	r3, [r7, #20]
24050e60:	b29a      	uxth	r2, r3
24050e62:	893b      	ldrh	r3, [r7, #8]
24050e64:	4413      	add	r3, r2
24050e66:	b29a      	uxth	r2, r3
24050e68:	69bb      	ldr	r3, [r7, #24]
24050e6a:	b29b      	uxth	r3, r3
24050e6c:	005b      	lsls	r3, r3, #1
24050e6e:	b298      	uxth	r0, r3
24050e70:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
24050e72:	9300      	str	r3, [sp, #0]
24050e74:	4603      	mov	r3, r0
24050e76:	68f8      	ldr	r0, [r7, #12]
24050e78:	f7ff fe28 	bl	24050acc <LCD_DrawHLine>
		}
		if (d < 0) {
24050e7c:	69fb      	ldr	r3, [r7, #28]
24050e7e:	2b00      	cmp	r3, #0
24050e80:	da06      	bge.n	24050e90 <LCD_FillCircle+0xee>
			d += (curx << 2) + 6;
24050e82:	69bb      	ldr	r3, [r7, #24]
24050e84:	009a      	lsls	r2, r3, #2
24050e86:	69fb      	ldr	r3, [r7, #28]
24050e88:	4413      	add	r3, r2
24050e8a:	3306      	adds	r3, #6
24050e8c:	61fb      	str	r3, [r7, #28]
24050e8e:	e00a      	b.n	24050ea6 <LCD_FillCircle+0x104>
		} else {
			d += ((curx - cury) << 2) + 10;
24050e90:	69ba      	ldr	r2, [r7, #24]
24050e92:	697b      	ldr	r3, [r7, #20]
24050e94:	1ad3      	subs	r3, r2, r3
24050e96:	009a      	lsls	r2, r3, #2
24050e98:	69fb      	ldr	r3, [r7, #28]
24050e9a:	4413      	add	r3, r2
24050e9c:	330a      	adds	r3, #10
24050e9e:	61fb      	str	r3, [r7, #28]
			cury--;
24050ea0:	697b      	ldr	r3, [r7, #20]
24050ea2:	3b01      	subs	r3, #1
24050ea4:	617b      	str	r3, [r7, #20]
		}
		curx++;
24050ea6:	69bb      	ldr	r3, [r7, #24]
24050ea8:	3301      	adds	r3, #1
24050eaa:	61bb      	str	r3, [r7, #24]
	while (curx <= cury) {
24050eac:	69ba      	ldr	r2, [r7, #24]
24050eae:	697b      	ldr	r3, [r7, #20]
24050eb0:	429a      	cmp	r2, r3
24050eb2:	d98d      	bls.n	24050dd0 <LCD_FillCircle+0x2e>
	}
	LCD_DrawCircle(buf, Xpos, Ypos, Radius, color);
24050eb4:	88f8      	ldrh	r0, [r7, #6]
24050eb6:	893a      	ldrh	r2, [r7, #8]
24050eb8:	8979      	ldrh	r1, [r7, #10]
24050eba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
24050ebc:	9300      	str	r3, [sp, #0]
24050ebe:	4603      	mov	r3, r0
24050ec0:	68f8      	ldr	r0, [r7, #12]
24050ec2:	f7ff fe94 	bl	24050bee <LCD_DrawCircle>
}
24050ec6:	bf00      	nop
24050ec8:	3720      	adds	r7, #32
24050eca:	46bd      	mov	sp, r7
24050ecc:	bd80      	pop	{r7, pc}
	...

24050ed0 <DrawChar>:
 * @param  Ypos: start column address
 * @param  c: pointer to the character data
 * @retval None
 */
static void DrawChar(uint16_t *buf, uint16_t Xpos, uint16_t Ypos,
		const uint8_t *c) {
24050ed0:	b580      	push	{r7, lr}
24050ed2:	b08a      	sub	sp, #40	; 0x28
24050ed4:	af00      	add	r7, sp, #0
24050ed6:	60f8      	str	r0, [r7, #12]
24050ed8:	607b      	str	r3, [r7, #4]
24050eda:	460b      	mov	r3, r1
24050edc:	817b      	strh	r3, [r7, #10]
24050ede:	4613      	mov	r3, r2
24050ee0:	813b      	strh	r3, [r7, #8]
	uint32_t i = 0, j = 0;
24050ee2:	2300      	movs	r3, #0
24050ee4:	627b      	str	r3, [r7, #36]	; 0x24
24050ee6:	2300      	movs	r3, #0
24050ee8:	623b      	str	r3, [r7, #32]
	uint16_t height, width;
	uint8_t offset;
	uint8_t *pchar;
	uint32_t line = 0;
24050eea:	2300      	movs	r3, #0
24050eec:	61fb      	str	r3, [r7, #28]

	height = font->Height;
24050eee:	4b44      	ldr	r3, [pc, #272]	; (24051000 <DrawChar+0x130>)
24050ef0:	681b      	ldr	r3, [r3, #0]
24050ef2:	88db      	ldrh	r3, [r3, #6]
24050ef4:	837b      	strh	r3, [r7, #26]
	width = font->Width;
24050ef6:	4b42      	ldr	r3, [pc, #264]	; (24051000 <DrawChar+0x130>)
24050ef8:	681b      	ldr	r3, [r3, #0]
24050efa:	889b      	ldrh	r3, [r3, #4]
24050efc:	833b      	strh	r3, [r7, #24]

	offset = 8 * ((width + 7) / 8) - width;
24050efe:	8b3b      	ldrh	r3, [r7, #24]
24050f00:	3307      	adds	r3, #7
24050f02:	2b00      	cmp	r3, #0
24050f04:	da00      	bge.n	24050f08 <DrawChar+0x38>
24050f06:	3307      	adds	r3, #7
24050f08:	10db      	asrs	r3, r3, #3
24050f0a:	b2db      	uxtb	r3, r3
24050f0c:	00db      	lsls	r3, r3, #3
24050f0e:	b2da      	uxtb	r2, r3
24050f10:	8b3b      	ldrh	r3, [r7, #24]
24050f12:	b2db      	uxtb	r3, r3
24050f14:	1ad3      	subs	r3, r2, r3
24050f16:	75fb      	strb	r3, [r7, #23]

	for (i = 0; i < height; i++) {
24050f18:	2300      	movs	r3, #0
24050f1a:	627b      	str	r3, [r7, #36]	; 0x24
24050f1c:	e067      	b.n	24050fee <DrawChar+0x11e>
		pchar = ((uint8_t*) c + (width + 7) / 8 * i);
24050f1e:	8b3b      	ldrh	r3, [r7, #24]
24050f20:	3307      	adds	r3, #7
24050f22:	2b00      	cmp	r3, #0
24050f24:	da00      	bge.n	24050f28 <DrawChar+0x58>
24050f26:	3307      	adds	r3, #7
24050f28:	10db      	asrs	r3, r3, #3
24050f2a:	461a      	mov	r2, r3
24050f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24050f2e:	fb03 f302 	mul.w	r3, r3, r2
24050f32:	687a      	ldr	r2, [r7, #4]
24050f34:	4413      	add	r3, r2
24050f36:	613b      	str	r3, [r7, #16]

		switch (((width + 7) / 8)) {
24050f38:	8b3b      	ldrh	r3, [r7, #24]
24050f3a:	3307      	adds	r3, #7
24050f3c:	2b00      	cmp	r3, #0
24050f3e:	da00      	bge.n	24050f42 <DrawChar+0x72>
24050f40:	3307      	adds	r3, #7
24050f42:	10db      	asrs	r3, r3, #3
24050f44:	2b01      	cmp	r3, #1
24050f46:	d002      	beq.n	24050f4e <DrawChar+0x7e>
24050f48:	2b02      	cmp	r3, #2
24050f4a:	d004      	beq.n	24050f56 <DrawChar+0x86>
24050f4c:	e00c      	b.n	24050f68 <DrawChar+0x98>
		case 1:
			line = pchar[0];
24050f4e:	693b      	ldr	r3, [r7, #16]
24050f50:	781b      	ldrb	r3, [r3, #0]
24050f52:	61fb      	str	r3, [r7, #28]
			break;
24050f54:	e016      	b.n	24050f84 <DrawChar+0xb4>

		case 2:
			line = (pchar[0] << 8) | pchar[1];
24050f56:	693b      	ldr	r3, [r7, #16]
24050f58:	781b      	ldrb	r3, [r3, #0]
24050f5a:	021b      	lsls	r3, r3, #8
24050f5c:	693a      	ldr	r2, [r7, #16]
24050f5e:	3201      	adds	r2, #1
24050f60:	7812      	ldrb	r2, [r2, #0]
24050f62:	4313      	orrs	r3, r2
24050f64:	61fb      	str	r3, [r7, #28]
			break;
24050f66:	e00d      	b.n	24050f84 <DrawChar+0xb4>

		case 3:
		default:
			line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
24050f68:	693b      	ldr	r3, [r7, #16]
24050f6a:	781b      	ldrb	r3, [r3, #0]
24050f6c:	041a      	lsls	r2, r3, #16
24050f6e:	693b      	ldr	r3, [r7, #16]
24050f70:	3301      	adds	r3, #1
24050f72:	781b      	ldrb	r3, [r3, #0]
24050f74:	021b      	lsls	r3, r3, #8
24050f76:	4313      	orrs	r3, r2
24050f78:	693a      	ldr	r2, [r7, #16]
24050f7a:	3202      	adds	r2, #2
24050f7c:	7812      	ldrb	r2, [r2, #0]
24050f7e:	4313      	orrs	r3, r2
24050f80:	61fb      	str	r3, [r7, #28]
			break;
24050f82:	bf00      	nop
		}

		for (j = 0; j < width; j++) {
24050f84:	2300      	movs	r3, #0
24050f86:	623b      	str	r3, [r7, #32]
24050f88:	e027      	b.n	24050fda <DrawChar+0x10a>
			if (line & (1 << (width - j + offset - 1))) {
24050f8a:	8b3a      	ldrh	r2, [r7, #24]
24050f8c:	6a3b      	ldr	r3, [r7, #32]
24050f8e:	1ad2      	subs	r2, r2, r3
24050f90:	7dfb      	ldrb	r3, [r7, #23]
24050f92:	4413      	add	r3, r2
24050f94:	3b01      	subs	r3, #1
24050f96:	2201      	movs	r2, #1
24050f98:	fa02 f303 	lsl.w	r3, r2, r3
24050f9c:	461a      	mov	r2, r3
24050f9e:	69fb      	ldr	r3, [r7, #28]
24050fa0:	4013      	ands	r3, r2
24050fa2:	2b00      	cmp	r3, #0
24050fa4:	d00b      	beq.n	24050fbe <DrawChar+0xee>
				LCD_DrawPixel(buf, (Xpos + j), Ypos, font_color);
24050fa6:	6a3b      	ldr	r3, [r7, #32]
24050fa8:	b29a      	uxth	r2, r3
24050faa:	897b      	ldrh	r3, [r7, #10]
24050fac:	4413      	add	r3, r2
24050fae:	b299      	uxth	r1, r3
24050fb0:	4b14      	ldr	r3, [pc, #80]	; (24051004 <DrawChar+0x134>)
24050fb2:	881b      	ldrh	r3, [r3, #0]
24050fb4:	893a      	ldrh	r2, [r7, #8]
24050fb6:	68f8      	ldr	r0, [r7, #12]
24050fb8:	f7ff fc90 	bl	240508dc <LCD_DrawPixel>
24050fbc:	e00a      	b.n	24050fd4 <DrawChar+0x104>
			} else {
				LCD_DrawPixel(buf, (Xpos + j), Ypos, font_bcolor);
24050fbe:	6a3b      	ldr	r3, [r7, #32]
24050fc0:	b29a      	uxth	r2, r3
24050fc2:	897b      	ldrh	r3, [r7, #10]
24050fc4:	4413      	add	r3, r2
24050fc6:	b299      	uxth	r1, r3
24050fc8:	4b0f      	ldr	r3, [pc, #60]	; (24051008 <DrawChar+0x138>)
24050fca:	881b      	ldrh	r3, [r3, #0]
24050fcc:	893a      	ldrh	r2, [r7, #8]
24050fce:	68f8      	ldr	r0, [r7, #12]
24050fd0:	f7ff fc84 	bl	240508dc <LCD_DrawPixel>
		for (j = 0; j < width; j++) {
24050fd4:	6a3b      	ldr	r3, [r7, #32]
24050fd6:	3301      	adds	r3, #1
24050fd8:	623b      	str	r3, [r7, #32]
24050fda:	8b3b      	ldrh	r3, [r7, #24]
24050fdc:	6a3a      	ldr	r2, [r7, #32]
24050fde:	429a      	cmp	r2, r3
24050fe0:	d3d3      	bcc.n	24050f8a <DrawChar+0xba>
			}
		}
		Ypos++;
24050fe2:	893b      	ldrh	r3, [r7, #8]
24050fe4:	3301      	adds	r3, #1
24050fe6:	813b      	strh	r3, [r7, #8]
	for (i = 0; i < height; i++) {
24050fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24050fea:	3301      	adds	r3, #1
24050fec:	627b      	str	r3, [r7, #36]	; 0x24
24050fee:	8b7b      	ldrh	r3, [r7, #26]
24050ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
24050ff2:	429a      	cmp	r2, r3
24050ff4:	d393      	bcc.n	24050f1e <DrawChar+0x4e>
	}
}
24050ff6:	bf00      	nop
24050ff8:	bf00      	nop
24050ffa:	3728      	adds	r7, #40	; 0x28
24050ffc:	46bd      	mov	sp, r7
24050ffe:	bd80      	pop	{r7, pc}
24051000:	20000020 	.word	0x20000020
24051004:	20000024 	.word	0x20000024
24051008:	200000e0 	.word	0x200000e0

2405100c <FillBuffer>:
 * @param  OffLine: offset
 * @param  ColorIndex: color Index
 * @retval None
 */
static void FillBuffer(void *pDst, uint32_t xSize, uint32_t ySize,
		uint32_t OffLine, uint16_t ColorIndex) {
2405100c:	b480      	push	{r7}
2405100e:	b085      	sub	sp, #20
24051010:	af00      	add	r7, sp, #0
24051012:	60f8      	str	r0, [r7, #12]
24051014:	60b9      	str	r1, [r7, #8]
24051016:	607a      	str	r2, [r7, #4]
24051018:	603b      	str	r3, [r7, #0]

	DMA2D->CR = DMA2D_R2M;
2405101a:	4b16      	ldr	r3, [pc, #88]	; (24051074 <FillBuffer+0x68>)
2405101c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
24051020:	601a      	str	r2, [r3, #0]
	DMA2D->OCOLR = 0x0000FFFF & ColorIndex;
24051022:	4a14      	ldr	r2, [pc, #80]	; (24051074 <FillBuffer+0x68>)
24051024:	8b3b      	ldrh	r3, [r7, #24]
24051026:	6393      	str	r3, [r2, #56]	; 0x38
	DMA2D->OMAR = (uint32_t) pDst;
24051028:	4a12      	ldr	r2, [pc, #72]	; (24051074 <FillBuffer+0x68>)
2405102a:	68fb      	ldr	r3, [r7, #12]
2405102c:	63d3      	str	r3, [r2, #60]	; 0x3c
	DMA2D->OOR = OffLine;
2405102e:	4a11      	ldr	r2, [pc, #68]	; (24051074 <FillBuffer+0x68>)
24051030:	683b      	ldr	r3, [r7, #0]
24051032:	6413      	str	r3, [r2, #64]	; 0x40
	DMA2D->OPFCCR = LTDC_PIXEL_FORMAT_RGB565;
24051034:	4b0f      	ldr	r3, [pc, #60]	; (24051074 <FillBuffer+0x68>)
24051036:	2202      	movs	r2, #2
24051038:	635a      	str	r2, [r3, #52]	; 0x34
	DMA2D->NLR = (uint32_t) (xSize << 16) | (uint16_t) ySize;
2405103a:	68bb      	ldr	r3, [r7, #8]
2405103c:	041b      	lsls	r3, r3, #16
2405103e:	687a      	ldr	r2, [r7, #4]
24051040:	b292      	uxth	r2, r2
24051042:	4611      	mov	r1, r2
24051044:	4a0b      	ldr	r2, [pc, #44]	; (24051074 <FillBuffer+0x68>)
24051046:	430b      	orrs	r3, r1
24051048:	6453      	str	r3, [r2, #68]	; 0x44

	DMA2D->CR |= DMA2D_CR_START;
2405104a:	4b0a      	ldr	r3, [pc, #40]	; (24051074 <FillBuffer+0x68>)
2405104c:	681b      	ldr	r3, [r3, #0]
2405104e:	4a09      	ldr	r2, [pc, #36]	; (24051074 <FillBuffer+0x68>)
24051050:	f043 0301 	orr.w	r3, r3, #1
24051054:	6013      	str	r3, [r2, #0]

	while (DMA2D->CR & DMA2D_CR_START) {
24051056:	bf00      	nop
24051058:	4b06      	ldr	r3, [pc, #24]	; (24051074 <FillBuffer+0x68>)
2405105a:	681b      	ldr	r3, [r3, #0]
2405105c:	f003 0301 	and.w	r3, r3, #1
24051060:	2b00      	cmp	r3, #0
24051062:	d1f9      	bne.n	24051058 <FillBuffer+0x4c>

	}
}
24051064:	bf00      	nop
24051066:	bf00      	nop
24051068:	3714      	adds	r7, #20
2405106a:	46bd      	mov	sp, r7
2405106c:	f85d 7b04 	ldr.w	r7, [sp], #4
24051070:	4770      	bx	lr
24051072:	bf00      	nop
24051074:	52001000 	.word	0x52001000

24051078 <lcd_backlight_set>:
  HAL_DAC_Stop(&hdac1, DAC_CHANNEL_2);
  HAL_DAC_Stop(&hdac2, DAC_CHANNEL_1);
}

void lcd_backlight_set(uint8_t brightness)
{
24051078:	b580      	push	{r7, lr}
2405107a:	b082      	sub	sp, #8
2405107c:	af00      	add	r7, sp, #0
2405107e:	4603      	mov	r3, r0
24051080:	71fb      	strb	r3, [r7, #7]
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_8B_R, brightness);
24051082:	79fb      	ldrb	r3, [r7, #7]
24051084:	2208      	movs	r2, #8
24051086:	2100      	movs	r1, #0
24051088:	480f      	ldr	r0, [pc, #60]	; (240510c8 <lcd_backlight_set+0x50>)
2405108a:	f003 fc62 	bl	24054952 <HAL_DAC_SetValue>
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_8B_R, brightness);
2405108e:	79fb      	ldrb	r3, [r7, #7]
24051090:	2208      	movs	r2, #8
24051092:	2110      	movs	r1, #16
24051094:	480c      	ldr	r0, [pc, #48]	; (240510c8 <lcd_backlight_set+0x50>)
24051096:	f003 fc5c 	bl	24054952 <HAL_DAC_SetValue>
  HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_8B_R, brightness);
2405109a:	79fb      	ldrb	r3, [r7, #7]
2405109c:	2208      	movs	r2, #8
2405109e:	2100      	movs	r1, #0
240510a0:	480a      	ldr	r0, [pc, #40]	; (240510cc <lcd_backlight_set+0x54>)
240510a2:	f003 fc56 	bl	24054952 <HAL_DAC_SetValue>

  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
240510a6:	2100      	movs	r1, #0
240510a8:	4807      	ldr	r0, [pc, #28]	; (240510c8 <lcd_backlight_set+0x50>)
240510aa:	f003 fc00 	bl	240548ae <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
240510ae:	2110      	movs	r1, #16
240510b0:	4805      	ldr	r0, [pc, #20]	; (240510c8 <lcd_backlight_set+0x50>)
240510b2:	f003 fbfc 	bl	240548ae <HAL_DAC_Start>
  HAL_DAC_Start(&hdac2, DAC_CHANNEL_1);
240510b6:	2100      	movs	r1, #0
240510b8:	4804      	ldr	r0, [pc, #16]	; (240510cc <lcd_backlight_set+0x54>)
240510ba:	f003 fbf8 	bl	240548ae <HAL_DAC_Start>
}
240510be:	bf00      	nop
240510c0:	3708      	adds	r7, #8
240510c2:	46bd      	mov	sp, r7
240510c4:	bd80      	pop	{r7, pc}
240510c6:	bf00      	nop
240510c8:	200002b8 	.word	0x200002b8
240510cc:	2000021c 	.word	0x2000021c

240510d0 <lcd_deinit>:
{
  lcd_backlight_set(255);
}

void lcd_deinit(SPI_HandleTypeDef *spi)
{
240510d0:	b580      	push	{r7, lr}
240510d2:	b082      	sub	sp, #8
240510d4:	af00      	add	r7, sp, #0
240510d6:	6078      	str	r0, [r7, #4]
  // Chip select low.
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
240510d8:	2200      	movs	r2, #0
240510da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
240510de:	480b      	ldr	r0, [pc, #44]	; (2405110c <lcd_deinit+0x3c>)
240510e0:	f006 fea2 	bl	24057e28 <HAL_GPIO_WritePin>
  // 3.3v power to display *SET* to disable supply.
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
240510e4:	2201      	movs	r2, #1
240510e6:	2102      	movs	r1, #2
240510e8:	4809      	ldr	r0, [pc, #36]	; (24051110 <lcd_deinit+0x40>)
240510ea:	f006 fe9d 	bl	24057e28 <HAL_GPIO_WritePin>
  // Disable 1.8v.
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
240510ee:	2200      	movs	r2, #0
240510f0:	2110      	movs	r1, #16
240510f2:	4807      	ldr	r0, [pc, #28]	; (24051110 <lcd_deinit+0x40>)
240510f4:	f006 fe98 	bl	24057e28 <HAL_GPIO_WritePin>
  // Pull reset line(?) low. (Flakey without this)
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
240510f8:	2200      	movs	r2, #0
240510fa:	f44f 7180 	mov.w	r1, #256	; 0x100
240510fe:	4804      	ldr	r0, [pc, #16]	; (24051110 <lcd_deinit+0x40>)
24051100:	f006 fe92 	bl	24057e28 <HAL_GPIO_WritePin>
}
24051104:	bf00      	nop
24051106:	3708      	adds	r7, #8
24051108:	46bd      	mov	sp, r7
2405110a:	bd80      	pop	{r7, pc}
2405110c:	58020400 	.word	0x58020400
24051110:	58020c00 	.word	0x58020c00

24051114 <lcd_init>:

void lcd_init(SPI_HandleTypeDef *spi, LTDC_HandleTypeDef *ltdc)
{
24051114:	b580      	push	{r7, lr}
24051116:	b082      	sub	sp, #8
24051118:	af00      	add	r7, sp, #0
2405111a:	6078      	str	r0, [r7, #4]
2405111c:	6039      	str	r1, [r7, #0]
// Wake
// Enable 3.3v
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
2405111e:	2200      	movs	r2, #0
24051120:	2102      	movs	r1, #2
24051122:	489c      	ldr	r0, [pc, #624]	; (24051394 <lcd_init+0x280>)
24051124:	f006 fe80 	bl	24057e28 <HAL_GPIO_WritePin>
  HAL_Delay(1);
24051128:	2001      	movs	r0, #1
2405112a:	f001 fe07 	bl	24052d3c <HAL_Delay>
  // Enable 1.8V
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
2405112e:	2201      	movs	r2, #1
24051130:	2110      	movs	r1, #16
24051132:	4898      	ldr	r0, [pc, #608]	; (24051394 <lcd_init+0x280>)
24051134:	f006 fe78 	bl	24057e28 <HAL_GPIO_WritePin>
  // also assert CS, not sure where to put this yet
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
24051138:	2201      	movs	r2, #1
2405113a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
2405113e:	4896      	ldr	r0, [pc, #600]	; (24051398 <lcd_init+0x284>)
24051140:	f006 fe72 	bl	24057e28 <HAL_GPIO_WritePin>
  HAL_Delay(7);
24051144:	2007      	movs	r0, #7
24051146:	f001 fdf9 	bl	24052d3c <HAL_Delay>


// HAL_SPI_Transmit(spi, (uint8_t *)"\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55", 10, 100);
  // Lets go, bootup sequence.
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
2405114a:	2201      	movs	r2, #1
2405114c:	f44f 7180 	mov.w	r1, #256	; 0x100
24051150:	4890      	ldr	r0, [pc, #576]	; (24051394 <lcd_init+0x280>)
24051152:	f006 fe69 	bl	24057e28 <HAL_GPIO_WritePin>
  HAL_Delay(2);
24051156:	2002      	movs	r0, #2
24051158:	f001 fdf0 	bl	24052d3c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
2405115c:	2200      	movs	r2, #0
2405115e:	f44f 7180 	mov.w	r1, #256	; 0x100
24051162:	488c      	ldr	r0, [pc, #560]	; (24051394 <lcd_init+0x280>)
24051164:	f006 fe60 	bl	24057e28 <HAL_GPIO_WritePin>
  HAL_Delay(2);
24051168:	2002      	movs	r0, #2
2405116a:	f001 fde7 	bl	24052d3c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET);
2405116e:	2201      	movs	r2, #1
24051170:	f44f 7180 	mov.w	r1, #256	; 0x100
24051174:	4887      	ldr	r0, [pc, #540]	; (24051394 <lcd_init+0x280>)
24051176:	f006 fe57 	bl	24057e28 <HAL_GPIO_WritePin>

  HAL_Delay(10);
2405117a:	200a      	movs	r0, #10
2405117c:	f001 fdde 	bl	24052d3c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
24051180:	2200      	movs	r2, #0
24051182:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24051186:	4884      	ldr	r0, [pc, #528]	; (24051398 <lcd_init+0x284>)
24051188:	f006 fe4e 	bl	24057e28 <HAL_GPIO_WritePin>
  HAL_Delay(45);
2405118c:	202d      	movs	r0, #45	; 0x2d
2405118e:	f001 fdd5 	bl	24052d3c <HAL_Delay>
  HAL_SPI_Transmit(spi, (uint8_t *)"\x08\x80", 2, 100);
24051192:	2364      	movs	r3, #100	; 0x64
24051194:	2202      	movs	r2, #2
24051196:	4981      	ldr	r1, [pc, #516]	; (2405139c <lcd_init+0x288>)
24051198:	6878      	ldr	r0, [r7, #4]
2405119a:	f00d f95f 	bl	2405e45c <HAL_SPI_Transmit>
  HAL_Delay(2);
2405119e:	2002      	movs	r0, #2
240511a0:	f001 fdcc 	bl	24052d3c <HAL_Delay>

  // CS
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
240511a4:	2201      	movs	r2, #1
240511a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
240511aa:	487b      	ldr	r0, [pc, #492]	; (24051398 <lcd_init+0x284>)
240511ac:	f006 fe3c 	bl	24057e28 <HAL_GPIO_WritePin>
  // HAL_Delay(100);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
240511b0:	2200      	movs	r2, #0
240511b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
240511b6:	4878      	ldr	r0, [pc, #480]	; (24051398 <lcd_init+0x284>)
240511b8:	f006 fe36 	bl	24057e28 <HAL_GPIO_WritePin>
  HAL_Delay(2);
240511bc:	2002      	movs	r0, #2
240511be:	f001 fdbd 	bl	24052d3c <HAL_Delay>
  HAL_SPI_Transmit(spi, (uint8_t *)"\x6E\x80", 2, 100);
240511c2:	2364      	movs	r3, #100	; 0x64
240511c4:	2202      	movs	r2, #2
240511c6:	4976      	ldr	r1, [pc, #472]	; (240513a0 <lcd_init+0x28c>)
240511c8:	6878      	ldr	r0, [r7, #4]
240511ca:	f00d f947 	bl	2405e45c <HAL_SPI_Transmit>
  HAL_Delay(2);
240511ce:	2002      	movs	r0, #2
240511d0:	f001 fdb4 	bl	24052d3c <HAL_Delay>
  // CS
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
240511d4:	2201      	movs	r2, #1
240511d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
240511da:	486f      	ldr	r0, [pc, #444]	; (24051398 <lcd_init+0x284>)
240511dc:	f006 fe24 	bl	24057e28 <HAL_GPIO_WritePin>
  // HAL_Delay(100);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
240511e0:	2200      	movs	r2, #0
240511e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
240511e6:	486c      	ldr	r0, [pc, #432]	; (24051398 <lcd_init+0x284>)
240511e8:	f006 fe1e 	bl	24057e28 <HAL_GPIO_WritePin>
  HAL_Delay(2);
240511ec:	2002      	movs	r0, #2
240511ee:	f001 fda5 	bl	24052d3c <HAL_Delay>
  HAL_SPI_Transmit(spi, (uint8_t *)"\x80\x80", 2, 100);
240511f2:	2364      	movs	r3, #100	; 0x64
240511f4:	2202      	movs	r2, #2
240511f6:	496b      	ldr	r1, [pc, #428]	; (240513a4 <lcd_init+0x290>)
240511f8:	6878      	ldr	r0, [r7, #4]
240511fa:	f00d f92f 	bl	2405e45c <HAL_SPI_Transmit>

  HAL_Delay(2);
240511fe:	2002      	movs	r0, #2
24051200:	f001 fd9c 	bl	24052d3c <HAL_Delay>
  // CS
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
24051204:	2201      	movs	r2, #1
24051206:	f44f 5180 	mov.w	r1, #4096	; 0x1000
2405120a:	4863      	ldr	r0, [pc, #396]	; (24051398 <lcd_init+0x284>)
2405120c:	f006 fe0c 	bl	24057e28 <HAL_GPIO_WritePin>
  // HAL_Delay(100);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
24051210:	2200      	movs	r2, #0
24051212:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24051216:	4860      	ldr	r0, [pc, #384]	; (24051398 <lcd_init+0x284>)
24051218:	f006 fe06 	bl	24057e28 <HAL_GPIO_WritePin>
  HAL_Delay(2);
2405121c:	2002      	movs	r0, #2
2405121e:	f001 fd8d 	bl	24052d3c <HAL_Delay>
  HAL_SPI_Transmit(spi, (uint8_t *)"\x68\x00", 2, 100);
24051222:	2364      	movs	r3, #100	; 0x64
24051224:	2202      	movs	r2, #2
24051226:	4960      	ldr	r1, [pc, #384]	; (240513a8 <lcd_init+0x294>)
24051228:	6878      	ldr	r0, [r7, #4]
2405122a:	f00d f917 	bl	2405e45c <HAL_SPI_Transmit>
  HAL_Delay(2);
2405122e:	2002      	movs	r0, #2
24051230:	f001 fd84 	bl	24052d3c <HAL_Delay>
  // CS
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
24051234:	2201      	movs	r2, #1
24051236:	f44f 5180 	mov.w	r1, #4096	; 0x1000
2405123a:	4857      	ldr	r0, [pc, #348]	; (24051398 <lcd_init+0x284>)
2405123c:	f006 fdf4 	bl	24057e28 <HAL_GPIO_WritePin>
  // HAL_Delay(100);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
24051240:	2200      	movs	r2, #0
24051242:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24051246:	4854      	ldr	r0, [pc, #336]	; (24051398 <lcd_init+0x284>)
24051248:	f006 fdee 	bl	24057e28 <HAL_GPIO_WritePin>
  HAL_Delay(2);
2405124c:	2002      	movs	r0, #2
2405124e:	f001 fd75 	bl	24052d3c <HAL_Delay>
  HAL_SPI_Transmit(spi, (uint8_t *)"\xd0\x00", 2, 100);
24051252:	2364      	movs	r3, #100	; 0x64
24051254:	2202      	movs	r2, #2
24051256:	4955      	ldr	r1, [pc, #340]	; (240513ac <lcd_init+0x298>)
24051258:	6878      	ldr	r0, [r7, #4]
2405125a:	f00d f8ff 	bl	2405e45c <HAL_SPI_Transmit>
  HAL_Delay(2);
2405125e:	2002      	movs	r0, #2
24051260:	f001 fd6c 	bl	24052d3c <HAL_Delay>
  // CS
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
24051264:	2201      	movs	r2, #1
24051266:	f44f 5180 	mov.w	r1, #4096	; 0x1000
2405126a:	484b      	ldr	r0, [pc, #300]	; (24051398 <lcd_init+0x284>)
2405126c:	f006 fddc 	bl	24057e28 <HAL_GPIO_WritePin>
  // HAL_Delay(100);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
24051270:	2200      	movs	r2, #0
24051272:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24051276:	4848      	ldr	r0, [pc, #288]	; (24051398 <lcd_init+0x284>)
24051278:	f006 fdd6 	bl	24057e28 <HAL_GPIO_WritePin>
  HAL_Delay(2);
2405127c:	2002      	movs	r0, #2
2405127e:	f001 fd5d 	bl	24052d3c <HAL_Delay>
  HAL_SPI_Transmit(spi, (uint8_t *)"\x1b\x00", 2, 100);
24051282:	2364      	movs	r3, #100	; 0x64
24051284:	2202      	movs	r2, #2
24051286:	494a      	ldr	r1, [pc, #296]	; (240513b0 <lcd_init+0x29c>)
24051288:	6878      	ldr	r0, [r7, #4]
2405128a:	f00d f8e7 	bl	2405e45c <HAL_SPI_Transmit>

  HAL_Delay(2);
2405128e:	2002      	movs	r0, #2
24051290:	f001 fd54 	bl	24052d3c <HAL_Delay>
  // CS
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
24051294:	2201      	movs	r2, #1
24051296:	f44f 5180 	mov.w	r1, #4096	; 0x1000
2405129a:	483f      	ldr	r0, [pc, #252]	; (24051398 <lcd_init+0x284>)
2405129c:	f006 fdc4 	bl	24057e28 <HAL_GPIO_WritePin>
  // HAL_Delay(100);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
240512a0:	2200      	movs	r2, #0
240512a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
240512a6:	483c      	ldr	r0, [pc, #240]	; (24051398 <lcd_init+0x284>)
240512a8:	f006 fdbe 	bl	24057e28 <HAL_GPIO_WritePin>
  HAL_Delay(2);
240512ac:	2002      	movs	r0, #2
240512ae:	f001 fd45 	bl	24052d3c <HAL_Delay>
  HAL_SPI_Transmit(spi, (uint8_t *)"\xe0\x00", 2, 100);
240512b2:	2364      	movs	r3, #100	; 0x64
240512b4:	2202      	movs	r2, #2
240512b6:	493f      	ldr	r1, [pc, #252]	; (240513b4 <lcd_init+0x2a0>)
240512b8:	6878      	ldr	r0, [r7, #4]
240512ba:	f00d f8cf 	bl	2405e45c <HAL_SPI_Transmit>


  HAL_Delay(2);
240512be:	2002      	movs	r0, #2
240512c0:	f001 fd3c 	bl	24052d3c <HAL_Delay>
  // CS
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
240512c4:	2201      	movs	r2, #1
240512c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
240512ca:	4833      	ldr	r0, [pc, #204]	; (24051398 <lcd_init+0x284>)
240512cc:	f006 fdac 	bl	24057e28 <HAL_GPIO_WritePin>
  // HAL_Delay(100);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
240512d0:	2200      	movs	r2, #0
240512d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
240512d6:	4830      	ldr	r0, [pc, #192]	; (24051398 <lcd_init+0x284>)
240512d8:	f006 fda6 	bl	24057e28 <HAL_GPIO_WritePin>
  HAL_Delay(2);
240512dc:	2002      	movs	r0, #2
240512de:	f001 fd2d 	bl	24052d3c <HAL_Delay>
  HAL_SPI_Transmit(spi, (uint8_t *)"\x6a\x80", 2, 100);
240512e2:	2364      	movs	r3, #100	; 0x64
240512e4:	2202      	movs	r2, #2
240512e6:	4934      	ldr	r1, [pc, #208]	; (240513b8 <lcd_init+0x2a4>)
240512e8:	6878      	ldr	r0, [r7, #4]
240512ea:	f00d f8b7 	bl	2405e45c <HAL_SPI_Transmit>

  HAL_Delay(2);
240512ee:	2002      	movs	r0, #2
240512f0:	f001 fd24 	bl	24052d3c <HAL_Delay>
  // CS
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
240512f4:	2201      	movs	r2, #1
240512f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
240512fa:	4827      	ldr	r0, [pc, #156]	; (24051398 <lcd_init+0x284>)
240512fc:	f006 fd94 	bl	24057e28 <HAL_GPIO_WritePin>
  // HAL_Delay(100);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
24051300:	2200      	movs	r2, #0
24051302:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24051306:	4824      	ldr	r0, [pc, #144]	; (24051398 <lcd_init+0x284>)
24051308:	f006 fd8e 	bl	24057e28 <HAL_GPIO_WritePin>
  HAL_Delay(2);
2405130c:	2002      	movs	r0, #2
2405130e:	f001 fd15 	bl	24052d3c <HAL_Delay>
  HAL_SPI_Transmit(spi, (uint8_t *)"\x80\x00", 2, 100);
24051312:	2364      	movs	r3, #100	; 0x64
24051314:	2202      	movs	r2, #2
24051316:	4929      	ldr	r1, [pc, #164]	; (240513bc <lcd_init+0x2a8>)
24051318:	6878      	ldr	r0, [r7, #4]
2405131a:	f00d f89f 	bl	2405e45c <HAL_SPI_Transmit>
  HAL_Delay(2);
2405131e:	2002      	movs	r0, #2
24051320:	f001 fd0c 	bl	24052d3c <HAL_Delay>
  // CS
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
24051324:	2201      	movs	r2, #1
24051326:	f44f 5180 	mov.w	r1, #4096	; 0x1000
2405132a:	481b      	ldr	r0, [pc, #108]	; (24051398 <lcd_init+0x284>)
2405132c:	f006 fd7c 	bl	24057e28 <HAL_GPIO_WritePin>
  // HAL_Delay(100);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
24051330:	2200      	movs	r2, #0
24051332:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24051336:	4818      	ldr	r0, [pc, #96]	; (24051398 <lcd_init+0x284>)
24051338:	f006 fd76 	bl	24057e28 <HAL_GPIO_WritePin>
  HAL_Delay(2);
2405133c:	2002      	movs	r0, #2
2405133e:	f001 fcfd 	bl	24052d3c <HAL_Delay>
  HAL_SPI_Transmit(spi, (uint8_t *)"\x14\x80", 2, 100);
24051342:	2364      	movs	r3, #100	; 0x64
24051344:	2202      	movs	r2, #2
24051346:	491e      	ldr	r1, [pc, #120]	; (240513c0 <lcd_init+0x2ac>)
24051348:	6878      	ldr	r0, [r7, #4]
2405134a:	f00d f887 	bl	2405e45c <HAL_SPI_Transmit>
  HAL_Delay(2);
2405134e:	2002      	movs	r0, #2
24051350:	f001 fcf4 	bl	24052d3c <HAL_Delay>
  // CS
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
24051354:	2201      	movs	r2, #1
24051356:	f44f 5180 	mov.w	r1, #4096	; 0x1000
2405135a:	480f      	ldr	r0, [pc, #60]	; (24051398 <lcd_init+0x284>)
2405135c:	f006 fd64 	bl	24057e28 <HAL_GPIO_WritePin>

  HAL_LTDC_SetAddress(ltdc,(uint32_t) &fb1, 0);
24051360:	4b18      	ldr	r3, [pc, #96]	; (240513c4 <lcd_init+0x2b0>)
24051362:	2200      	movs	r2, #0
24051364:	4619      	mov	r1, r3
24051366:	6838      	ldr	r0, [r7, #0]
24051368:	f006 ff3e 	bl	240581e8 <HAL_LTDC_SetAddress>

  memset(fb1, 0, sizeof(framebuffer1));
2405136c:	4b15      	ldr	r3, [pc, #84]	; (240513c4 <lcd_init+0x2b0>)
2405136e:	681b      	ldr	r3, [r3, #0]
24051370:	f44f 3216 	mov.w	r2, #153600	; 0x25800
24051374:	2100      	movs	r1, #0
24051376:	4618      	mov	r0, r3
24051378:	f00d fb84 	bl	2405ea84 <memset>
  memset(fb2, 0, sizeof(framebuffer1));
2405137c:	4b12      	ldr	r3, [pc, #72]	; (240513c8 <lcd_init+0x2b4>)
2405137e:	681b      	ldr	r3, [r3, #0]
24051380:	f44f 3216 	mov.w	r2, #153600	; 0x25800
24051384:	2100      	movs	r1, #0
24051386:	4618      	mov	r0, r3
24051388:	f00d fb7c 	bl	2405ea84 <memset>
}
2405138c:	bf00      	nop
2405138e:	3708      	adds	r7, #8
24051390:	46bd      	mov	sp, r7
24051392:	bd80      	pop	{r7, pc}
24051394:	58020c00 	.word	0x58020c00
24051398:	58020400 	.word	0x58020400
2405139c:	2405fea0 	.word	0x2405fea0
240513a0:	2405fea4 	.word	0x2405fea4
240513a4:	2405fea8 	.word	0x2405fea8
240513a8:	2405feac 	.word	0x2405feac
240513ac:	2405feb0 	.word	0x2405feb0
240513b0:	2405feb4 	.word	0x2405feb4
240513b4:	2405feb8 	.word	0x2405feb8
240513b8:	2405febc 	.word	0x2405febc
240513bc:	2405fec0 	.word	0x2405fec0
240513c0:	2405fec4 	.word	0x2405fec4
240513c4:	20000028 	.word	0x20000028
240513c8:	2000002c 	.word	0x2000002c

240513cc <HAL_LTDC_ReloadEventCallback>:

void HAL_LTDC_ReloadEventCallback (LTDC_HandleTypeDef *hltdc) {
240513cc:	b580      	push	{r7, lr}
240513ce:	b082      	sub	sp, #8
240513d0:	af00      	add	r7, sp, #0
240513d2:	6078      	str	r0, [r7, #4]
  frame_counter++;
240513d4:	4b0d      	ldr	r3, [pc, #52]	; (2405140c <HAL_LTDC_ReloadEventCallback+0x40>)
240513d6:	681b      	ldr	r3, [r3, #0]
240513d8:	3301      	adds	r3, #1
240513da:	4a0c      	ldr	r2, [pc, #48]	; (2405140c <HAL_LTDC_ReloadEventCallback+0x40>)
240513dc:	6013      	str	r3, [r2, #0]
  if (active_framebuffer == 0) {
240513de:	4b0c      	ldr	r3, [pc, #48]	; (24051410 <HAL_LTDC_ReloadEventCallback+0x44>)
240513e0:	681b      	ldr	r3, [r3, #0]
240513e2:	2b00      	cmp	r3, #0
240513e4:	d107      	bne.n	240513f6 <HAL_LTDC_ReloadEventCallback+0x2a>
    HAL_LTDC_SetAddress(hltdc, (uint32_t) fb2, 0);
240513e6:	4b0b      	ldr	r3, [pc, #44]	; (24051414 <HAL_LTDC_ReloadEventCallback+0x48>)
240513e8:	681b      	ldr	r3, [r3, #0]
240513ea:	2200      	movs	r2, #0
240513ec:	4619      	mov	r1, r3
240513ee:	6878      	ldr	r0, [r7, #4]
240513f0:	f006 fefa 	bl	240581e8 <HAL_LTDC_SetAddress>
  } else {
    HAL_LTDC_SetAddress(hltdc, (uint32_t) fb1, 0);
  }
}
240513f4:	e006      	b.n	24051404 <HAL_LTDC_ReloadEventCallback+0x38>
    HAL_LTDC_SetAddress(hltdc, (uint32_t) fb1, 0);
240513f6:	4b08      	ldr	r3, [pc, #32]	; (24051418 <HAL_LTDC_ReloadEventCallback+0x4c>)
240513f8:	681b      	ldr	r3, [r3, #0]
240513fa:	2200      	movs	r2, #0
240513fc:	4619      	mov	r1, r3
240513fe:	6878      	ldr	r0, [r7, #4]
24051400:	f006 fef2 	bl	240581e8 <HAL_LTDC_SetAddress>
}
24051404:	bf00      	nop
24051406:	3708      	adds	r7, #8
24051408:	46bd      	mov	sp, r7
2405140a:	bd80      	pop	{r7, pc}
2405140c:	20000214 	.word	0x20000214
24051410:	20000218 	.word	0x20000218
24051414:	2000002c 	.word	0x2000002c
24051418:	20000028 	.word	0x20000028

2405141c <lcd_swap>:
{
  return (uint32_t) ((hltdc.Instance->SRCR) & (LTDC_SRCR_VBR | LTDC_SRCR_IMR));
}

void lcd_swap(void)
{
2405141c:	b580      	push	{r7, lr}
2405141e:	af00      	add	r7, sp, #0
  HAL_LTDC_Reload(&hltdc, LTDC_RELOAD_VERTICAL_BLANKING);
24051420:	2102      	movs	r1, #2
24051422:	4807      	ldr	r0, [pc, #28]	; (24051440 <lcd_swap+0x24>)
24051424:	f006 ff16 	bl	24058254 <HAL_LTDC_Reload>
  active_framebuffer = active_framebuffer ? 0 : 1;
24051428:	4b06      	ldr	r3, [pc, #24]	; (24051444 <lcd_swap+0x28>)
2405142a:	681b      	ldr	r3, [r3, #0]
2405142c:	2b00      	cmp	r3, #0
2405142e:	bf0c      	ite	eq
24051430:	2301      	moveq	r3, #1
24051432:	2300      	movne	r3, #0
24051434:	b2db      	uxtb	r3, r3
24051436:	461a      	mov	r2, r3
24051438:	4b02      	ldr	r3, [pc, #8]	; (24051444 <lcd_swap+0x28>)
2405143a:	601a      	str	r2, [r3, #0]
}
2405143c:	bf00      	nop
2405143e:	bd80      	pop	{r7, pc}
24051440:	2000032c 	.word	0x2000032c
24051444:	20000218 	.word	0x20000218

24051448 <lcd_sync>:

void lcd_sync(void)
{
24051448:	b580      	push	{r7, lr}
2405144a:	b082      	sub	sp, #8
2405144c:	af00      	add	r7, sp, #0
  void *active = lcd_get_active_buffer();
2405144e:	f000 f813 	bl	24051478 <lcd_get_active_buffer>
24051452:	6078      	str	r0, [r7, #4]
  void *inactive = lcd_get_inactive_buffer();
24051454:	f000 f826 	bl	240514a4 <lcd_get_inactive_buffer>
24051458:	6038      	str	r0, [r7, #0]

  if (active != inactive) {
2405145a:	687a      	ldr	r2, [r7, #4]
2405145c:	683b      	ldr	r3, [r7, #0]
2405145e:	429a      	cmp	r2, r3
24051460:	d005      	beq.n	2405146e <lcd_sync+0x26>
    memcpy(inactive, active, sizeof(framebuffer1));
24051462:	f44f 3216 	mov.w	r2, #153600	; 0x25800
24051466:	6879      	ldr	r1, [r7, #4]
24051468:	6838      	ldr	r0, [r7, #0]
2405146a:	f00d fafd 	bl	2405ea68 <memcpy>
  }
}
2405146e:	bf00      	nop
24051470:	3708      	adds	r7, #8
24051472:	46bd      	mov	sp, r7
24051474:	bd80      	pop	{r7, pc}
	...

24051478 <lcd_get_active_buffer>:

void* lcd_get_active_buffer(void)
{
24051478:	b480      	push	{r7}
2405147a:	af00      	add	r7, sp, #0
  return active_framebuffer ? fb2 : fb1;
2405147c:	4b06      	ldr	r3, [pc, #24]	; (24051498 <lcd_get_active_buffer+0x20>)
2405147e:	681b      	ldr	r3, [r3, #0]
24051480:	2b00      	cmp	r3, #0
24051482:	d002      	beq.n	2405148a <lcd_get_active_buffer+0x12>
24051484:	4b05      	ldr	r3, [pc, #20]	; (2405149c <lcd_get_active_buffer+0x24>)
24051486:	681b      	ldr	r3, [r3, #0]
24051488:	e001      	b.n	2405148e <lcd_get_active_buffer+0x16>
2405148a:	4b05      	ldr	r3, [pc, #20]	; (240514a0 <lcd_get_active_buffer+0x28>)
2405148c:	681b      	ldr	r3, [r3, #0]
}
2405148e:	4618      	mov	r0, r3
24051490:	46bd      	mov	sp, r7
24051492:	f85d 7b04 	ldr.w	r7, [sp], #4
24051496:	4770      	bx	lr
24051498:	20000218 	.word	0x20000218
2405149c:	2000002c 	.word	0x2000002c
240514a0:	20000028 	.word	0x20000028

240514a4 <lcd_get_inactive_buffer>:

void* lcd_get_inactive_buffer(void)
{
240514a4:	b480      	push	{r7}
240514a6:	af00      	add	r7, sp, #0
  return active_framebuffer ? fb1 : fb2;
240514a8:	4b06      	ldr	r3, [pc, #24]	; (240514c4 <lcd_get_inactive_buffer+0x20>)
240514aa:	681b      	ldr	r3, [r3, #0]
240514ac:	2b00      	cmp	r3, #0
240514ae:	d002      	beq.n	240514b6 <lcd_get_inactive_buffer+0x12>
240514b0:	4b05      	ldr	r3, [pc, #20]	; (240514c8 <lcd_get_inactive_buffer+0x24>)
240514b2:	681b      	ldr	r3, [r3, #0]
240514b4:	e001      	b.n	240514ba <lcd_get_inactive_buffer+0x16>
240514b6:	4b05      	ldr	r3, [pc, #20]	; (240514cc <lcd_get_inactive_buffer+0x28>)
240514b8:	681b      	ldr	r3, [r3, #0]
}
240514ba:	4618      	mov	r0, r3
240514bc:	46bd      	mov	sp, r7
240514be:	f85d 7b04 	ldr.w	r7, [sp], #4
240514c2:	4770      	bx	lr
240514c4:	20000218 	.word	0x20000218
240514c8:	20000028 	.word	0x20000028
240514cc:	2000002c 	.word	0x2000002c

240514d0 <lcd_wait_for_vblank>:
  fb1 = buf1;
  fb2 = buf2;
}

void lcd_wait_for_vblank(void)
{
240514d0:	b480      	push	{r7}
240514d2:	b083      	sub	sp, #12
240514d4:	af00      	add	r7, sp, #0
  uint32_t old_counter = frame_counter;
240514d6:	4b08      	ldr	r3, [pc, #32]	; (240514f8 <lcd_wait_for_vblank+0x28>)
240514d8:	681b      	ldr	r3, [r3, #0]
240514da:	607b      	str	r3, [r7, #4]
  while (old_counter == frame_counter) {
240514dc:	e000      	b.n	240514e0 <lcd_wait_for_vblank+0x10>
    __asm("nop");
240514de:	bf00      	nop
  while (old_counter == frame_counter) {
240514e0:	4b05      	ldr	r3, [pc, #20]	; (240514f8 <lcd_wait_for_vblank+0x28>)
240514e2:	681b      	ldr	r3, [r3, #0]
240514e4:	687a      	ldr	r2, [r7, #4]
240514e6:	429a      	cmp	r2, r3
240514e8:	d0f9      	beq.n	240514de <lcd_wait_for_vblank+0xe>
  }
}
240514ea:	bf00      	nop
240514ec:	bf00      	nop
240514ee:	370c      	adds	r7, #12
240514f0:	46bd      	mov	sp, r7
240514f2:	f85d 7b04 	ldr.w	r7, [sp], #4
240514f6:	4770      	bx	lr
240514f8:	20000214 	.word	0x20000214

240514fc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
240514fc:	b580      	push	{r7, lr}
240514fe:	b082      	sub	sp, #8
24051500:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
24051502:	f001 fb89 	bl	24052c18 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
24051506:	f000 f84f 	bl	240515a8 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
2405150a:	f000 f8cf 	bl	240516ac <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
2405150e:	f000 fbff 	bl	24051d10 <MX_GPIO_Init>
	MX_DMA_Init();
24051512:	f000 fbdd 	bl	24051cd0 <MX_DMA_Init>
	MX_LTDC_Init();
24051516:	f000 fa0f 	bl	24051938 <MX_LTDC_Init>
	MX_SPI2_Init();
2405151a:	f000 fb83 	bl	24051c24 <MX_SPI2_Init>
	MX_OCTOSPI1_Init();
2405151e:	f000 fa8b 	bl	24051a38 <MX_OCTOSPI1_Init>
	MX_SAI1_Init();
24051522:	f000 fb49 	bl	24051bb8 <MX_SAI1_Init>
	MX_ADC1_Init();
24051526:	f000 f903 	bl	24051730 <MX_ADC1_Init>
	MX_DAC1_Init();
2405152a:	f000 f979 	bl	24051820 <MX_DAC1_Init>
	MX_DAC2_Init();
2405152e:	f000 f9b3 	bl	24051898 <MX_DAC2_Init>
	MX_DMA2D_Init();
24051532:	f000 f9e3 	bl	240518fc <MX_DMA2D_Init>
	MX_RTC_Init();
24051536:	f000 fae1 	bl	24051afc <MX_RTC_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
2405153a:	f000 f8ed 	bl	24051718 <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */

	lcd_deinit(&hspi2);
2405153e:	4814      	ldr	r0, [pc, #80]	; (24051590 <main+0x94>)
24051540:	f7ff fdc6 	bl	240510d0 <lcd_deinit>
	lcd_init(&hspi2, &hltdc);
24051544:	4913      	ldr	r1, [pc, #76]	; (24051594 <main+0x98>)
24051546:	4812      	ldr	r0, [pc, #72]	; (24051590 <main+0x94>)
24051548:	f7ff fde4 	bl	24051114 <lcd_init>
	lcd_backlight_set(175);
2405154c:	20af      	movs	r0, #175	; 0xaf
2405154e:	f7ff fd93 	bl	24051078 <lcd_backlight_set>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	flash_memory_map(&hospi1);
24051552:	4811      	ldr	r0, [pc, #68]	; (24051598 <main+0x9c>)
24051554:	f7fe fe56 	bl	24050204 <flash_memory_map>

	// Sanity check, sometimes this is triggered
	uint32_t add = 0x90000000;
24051558:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
2405155c:	607b      	str	r3, [r7, #4]
	uint32_t *ptr = (uint32_t*) add;
2405155e:	687b      	ldr	r3, [r7, #4]
24051560:	603b      	str	r3, [r7, #0]
	if (*ptr == 0x88888888) {
24051562:	683b      	ldr	r3, [r7, #0]
24051564:	681b      	ldr	r3, [r3, #0]
24051566:	f1b3 3f88 	cmp.w	r3, #2290649224	; 0x88888888
2405156a:	d101      	bne.n	24051570 <main+0x74>
		Error_Handler();
2405156c:	f000 fcc0 	bl	24051ef0 <Error_Handler>
	}

	// Create a continuous square wave and loop it using DMA in circular mode
	memset(audiobuffer, 0x00, sizeof(audiobuffer));
24051570:	4a0a      	ldr	r2, [pc, #40]	; (2405159c <main+0xa0>)
24051572:	2100      	movs	r1, #0
24051574:	480a      	ldr	r0, [pc, #40]	; (240515a0 <main+0xa4>)
24051576:	f00d fa85 	bl	2405ea84 <memset>
	HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t*) audiobuffer,
2405157a:	f64b 3280 	movw	r2, #48000	; 0xbb80
2405157e:	4908      	ldr	r1, [pc, #32]	; (240515a0 <main+0xa4>)
24051580:	4808      	ldr	r0, [pc, #32]	; (240515a4 <main+0xa8>)
24051582:	f00c f98f 	bl	2405d8a4 <HAL_SAI_Transmit_DMA>
			sizeof(audiobuffer) / sizeof(audiobuffer[0]));

	game_init();
24051586:	f7fe fec7 	bl	24050318 <game_init>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		game_loop();
2405158a:	f7fe ff3b 	bl	24050404 <game_loop>
2405158e:	e7fc      	b.n	2405158a <main+0x8e>
24051590:	20000230 	.word	0x20000230
24051594:	2000032c 	.word	0x2000032c
24051598:	200002cc 	.word	0x200002cc
2405159c:	00017700 	.word	0x00017700
240515a0:	30000000 	.word	0x30000000
240515a4:	20000540 	.word	0x20000540

240515a8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
240515a8:	b580      	push	{r7, lr}
240515aa:	b09c      	sub	sp, #112	; 0x70
240515ac:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
240515ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
240515b2:	224c      	movs	r2, #76	; 0x4c
240515b4:	2100      	movs	r1, #0
240515b6:	4618      	mov	r0, r3
240515b8:	f00d fa64 	bl	2405ea84 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
240515bc:	1d3b      	adds	r3, r7, #4
240515be:	2220      	movs	r2, #32
240515c0:	2100      	movs	r1, #0
240515c2:	4618      	mov	r0, r3
240515c4:	f00d fa5e 	bl	2405ea84 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
240515c8:	2002      	movs	r0, #2
240515ca:	f008 fb3f 	bl	24059c4c <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
240515ce:	2300      	movs	r3, #0
240515d0:	603b      	str	r3, [r7, #0]
240515d2:	4b34      	ldr	r3, [pc, #208]	; (240516a4 <SystemClock_Config+0xfc>)
240515d4:	699b      	ldr	r3, [r3, #24]
240515d6:	4a33      	ldr	r2, [pc, #204]	; (240516a4 <SystemClock_Config+0xfc>)
240515d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
240515dc:	6193      	str	r3, [r2, #24]
240515de:	4b31      	ldr	r3, [pc, #196]	; (240516a4 <SystemClock_Config+0xfc>)
240515e0:	699b      	ldr	r3, [r3, #24]
240515e2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
240515e6:	603b      	str	r3, [r7, #0]
240515e8:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
240515ea:	bf00      	nop
240515ec:	4b2d      	ldr	r3, [pc, #180]	; (240516a4 <SystemClock_Config+0xfc>)
240515ee:	699b      	ldr	r3, [r3, #24]
240515f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
240515f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
240515f8:	d1f8      	bne.n	240515ec <SystemClock_Config+0x44>
	}
	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
240515fa:	f008 fb17 	bl	24059c2c <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
240515fe:	4b2a      	ldr	r3, [pc, #168]	; (240516a8 <SystemClock_Config+0x100>)
24051600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24051602:	4a29      	ldr	r2, [pc, #164]	; (240516a8 <SystemClock_Config+0x100>)
24051604:	f023 0318 	bic.w	r3, r3, #24
24051608:	6713      	str	r3, [r2, #112]	; 0x70
	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
2405160a:	4b27      	ldr	r3, [pc, #156]	; (240516a8 <SystemClock_Config+0x100>)
2405160c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405160e:	4a26      	ldr	r2, [pc, #152]	; (240516a8 <SystemClock_Config+0x100>)
24051610:	f023 0303 	bic.w	r3, r3, #3
24051614:	6293      	str	r3, [r2, #40]	; 0x28
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
24051616:	230e      	movs	r3, #14
24051618:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
2405161a:	2301      	movs	r3, #1
2405161c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
2405161e:	2301      	movs	r3, #1
24051620:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
24051622:	2340      	movs	r3, #64	; 0x40
24051624:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
24051626:	2301      	movs	r3, #1
24051628:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
2405162a:	2302      	movs	r3, #2
2405162c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
2405162e:	2300      	movs	r3, #0
24051630:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 16;
24051632:	2310      	movs	r3, #16
24051634:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 140;
24051636:	238c      	movs	r3, #140	; 0x8c
24051638:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
2405163a:	2302      	movs	r3, #2
2405163c:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 2;
2405163e:	2302      	movs	r3, #2
24051640:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
24051642:	2302      	movs	r3, #2
24051644:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
24051646:	2308      	movs	r3, #8
24051648:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
2405164a:	2300      	movs	r3, #0
2405164c:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
2405164e:	2300      	movs	r3, #0
24051650:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
24051652:	f107 0324 	add.w	r3, r7, #36	; 0x24
24051656:	4618      	mov	r0, r3
24051658:	f008 fb32 	bl	24059cc0 <HAL_RCC_OscConfig>
2405165c:	4603      	mov	r3, r0
2405165e:	2b00      	cmp	r3, #0
24051660:	d001      	beq.n	24051666 <SystemClock_Config+0xbe>
		Error_Handler();
24051662:	f000 fc45 	bl	24051ef0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
24051666:	233f      	movs	r3, #63	; 0x3f
24051668:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
2405166a:	2303      	movs	r3, #3
2405166c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
2405166e:	2300      	movs	r3, #0
24051670:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
24051672:	2300      	movs	r3, #0
24051674:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
24051676:	2340      	movs	r3, #64	; 0x40
24051678:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
2405167a:	2340      	movs	r3, #64	; 0x40
2405167c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
2405167e:	f44f 6380 	mov.w	r3, #1024	; 0x400
24051682:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
24051684:	2340      	movs	r3, #64	; 0x40
24051686:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
24051688:	1d3b      	adds	r3, r7, #4
2405168a:	2107      	movs	r1, #7
2405168c:	4618      	mov	r0, r3
2405168e:	f008 ff1b 	bl	2405a4c8 <HAL_RCC_ClockConfig>
24051692:	4603      	mov	r3, r0
24051694:	2b00      	cmp	r3, #0
24051696:	d001      	beq.n	2405169c <SystemClock_Config+0xf4>
		Error_Handler();
24051698:	f000 fc2a 	bl	24051ef0 <Error_Handler>
	}
}
2405169c:	bf00      	nop
2405169e:	3770      	adds	r7, #112	; 0x70
240516a0:	46bd      	mov	sp, r7
240516a2:	bd80      	pop	{r7, pc}
240516a4:	58024800 	.word	0x58024800
240516a8:	58024400 	.word	0x58024400

240516ac <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
240516ac:	b580      	push	{r7, lr}
240516ae:	b0ae      	sub	sp, #184	; 0xb8
240516b0:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
240516b2:	463b      	mov	r3, r7
240516b4:	22b8      	movs	r2, #184	; 0xb8
240516b6:	2100      	movs	r1, #0
240516b8:	4618      	mov	r0, r3
240516ba:	f00d f9e3 	bl	2405ea84 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC
240516be:	4b15      	ldr	r3, [pc, #84]	; (24051714 <PeriphCommonClock_Config+0x68>)
240516c0:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_SAI1 | RCC_PERIPHCLK_CKPER;
	PeriphClkInitStruct.PLL2.PLL2M = 25;
240516c2:	2319      	movs	r3, #25
240516c4:	607b      	str	r3, [r7, #4]
	PeriphClkInitStruct.PLL2.PLL2N = 192;
240516c6:	23c0      	movs	r3, #192	; 0xc0
240516c8:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLL2.PLL2P = 5;
240516ca:	2305      	movs	r3, #5
240516cc:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLL2.PLL2Q = 2;
240516ce:	2302      	movs	r3, #2
240516d0:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLL2.PLL2R = 5;
240516d2:	2305      	movs	r3, #5
240516d4:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
240516d6:	2340      	movs	r3, #64	; 0x40
240516d8:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
240516da:	2300      	movs	r3, #0
240516dc:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
240516de:	2300      	movs	r3, #0
240516e0:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
240516e2:	2300      	movs	r3, #0
240516e4:	653b      	str	r3, [r7, #80]	; 0x50
	PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
240516e6:	2301      	movs	r3, #1
240516e8:	657b      	str	r3, [r7, #84]	; 0x54
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
240516ea:	2300      	movs	r3, #0
240516ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
240516f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
240516f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
240516f8:	463b      	mov	r3, r7
240516fa:	4618      	mov	r0, r3
240516fc:	f009 fa44 	bl	2405ab88 <HAL_RCCEx_PeriphCLKConfig>
24051700:	4603      	mov	r3, r0
24051702:	2b00      	cmp	r3, #0
24051704:	d001      	beq.n	2405170a <PeriphCommonClock_Config+0x5e>
		Error_Handler();
24051706:	f000 fbf3 	bl	24051ef0 <Error_Handler>
	}
}
2405170a:	bf00      	nop
2405170c:	37b8      	adds	r7, #184	; 0xb8
2405170e:	46bd      	mov	sp, r7
24051710:	bd80      	pop	{r7, pc}
24051712:	bf00      	nop
24051714:	80080100 	.word	0x80080100

24051718 <MX_NVIC_Init>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
24051718:	b580      	push	{r7, lr}
2405171a:	af00      	add	r7, sp, #0
	/* OCTOSPI1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 0, 0);
2405171c:	2200      	movs	r2, #0
2405171e:	2100      	movs	r1, #0
24051720:	205c      	movs	r0, #92	; 0x5c
24051722:	f003 f86a 	bl	240547fa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
24051726:	205c      	movs	r0, #92	; 0x5c
24051728:	f003 f881 	bl	2405482e <HAL_NVIC_EnableIRQ>
}
2405172c:	bf00      	nop
2405172e:	bd80      	pop	{r7, pc}

24051730 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
24051730:	b580      	push	{r7, lr}
24051732:	b08a      	sub	sp, #40	; 0x28
24051734:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
24051736:	f107 031c 	add.w	r3, r7, #28
2405173a:	2200      	movs	r2, #0
2405173c:	601a      	str	r2, [r3, #0]
2405173e:	605a      	str	r2, [r3, #4]
24051740:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
24051742:	463b      	mov	r3, r7
24051744:	2200      	movs	r2, #0
24051746:	601a      	str	r2, [r3, #0]
24051748:	605a      	str	r2, [r3, #4]
2405174a:	609a      	str	r2, [r3, #8]
2405174c:	60da      	str	r2, [r3, #12]
2405174e:	611a      	str	r2, [r3, #16]
24051750:	615a      	str	r2, [r3, #20]
24051752:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
24051754:	4b2f      	ldr	r3, [pc, #188]	; (24051814 <MX_ADC1_Init+0xe4>)
24051756:	4a30      	ldr	r2, [pc, #192]	; (24051818 <MX_ADC1_Init+0xe8>)
24051758:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
2405175a:	4b2e      	ldr	r3, [pc, #184]	; (24051814 <MX_ADC1_Init+0xe4>)
2405175c:	2200      	movs	r2, #0
2405175e:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_16B;
24051760:	4b2c      	ldr	r3, [pc, #176]	; (24051814 <MX_ADC1_Init+0xe4>)
24051762:	2200      	movs	r2, #0
24051764:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
24051766:	4b2b      	ldr	r3, [pc, #172]	; (24051814 <MX_ADC1_Init+0xe4>)
24051768:	2200      	movs	r2, #0
2405176a:	60da      	str	r2, [r3, #12]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
2405176c:	4b29      	ldr	r3, [pc, #164]	; (24051814 <MX_ADC1_Init+0xe4>)
2405176e:	2204      	movs	r2, #4
24051770:	611a      	str	r2, [r3, #16]
	hadc1.Init.LowPowerAutoWait = DISABLE;
24051772:	4b28      	ldr	r3, [pc, #160]	; (24051814 <MX_ADC1_Init+0xe4>)
24051774:	2200      	movs	r2, #0
24051776:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ContinuousConvMode = DISABLE;
24051778:	4b26      	ldr	r3, [pc, #152]	; (24051814 <MX_ADC1_Init+0xe4>)
2405177a:	2200      	movs	r2, #0
2405177c:	755a      	strb	r2, [r3, #21]
	hadc1.Init.NbrOfConversion = 1;
2405177e:	4b25      	ldr	r3, [pc, #148]	; (24051814 <MX_ADC1_Init+0xe4>)
24051780:	2201      	movs	r2, #1
24051782:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
24051784:	4b23      	ldr	r3, [pc, #140]	; (24051814 <MX_ADC1_Init+0xe4>)
24051786:	2200      	movs	r2, #0
24051788:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
2405178a:	4b22      	ldr	r3, [pc, #136]	; (24051814 <MX_ADC1_Init+0xe4>)
2405178c:	2200      	movs	r2, #0
2405178e:	625a      	str	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
24051790:	4b20      	ldr	r3, [pc, #128]	; (24051814 <MX_ADC1_Init+0xe4>)
24051792:	2200      	movs	r2, #0
24051794:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
24051796:	4b1f      	ldr	r3, [pc, #124]	; (24051814 <MX_ADC1_Init+0xe4>)
24051798:	2200      	movs	r2, #0
2405179a:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
2405179c:	4b1d      	ldr	r3, [pc, #116]	; (24051814 <MX_ADC1_Init+0xe4>)
2405179e:	2200      	movs	r2, #0
240517a0:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
240517a2:	4b1c      	ldr	r3, [pc, #112]	; (24051814 <MX_ADC1_Init+0xe4>)
240517a4:	2200      	movs	r2, #0
240517a6:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
240517a8:	4b1a      	ldr	r3, [pc, #104]	; (24051814 <MX_ADC1_Init+0xe4>)
240517aa:	2200      	movs	r2, #0
240517ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
240517b0:	4818      	ldr	r0, [pc, #96]	; (24051814 <MX_ADC1_Init+0xe4>)
240517b2:	f001 fcdd 	bl	24053170 <HAL_ADC_Init>
240517b6:	4603      	mov	r3, r0
240517b8:	2b00      	cmp	r3, #0
240517ba:	d001      	beq.n	240517c0 <MX_ADC1_Init+0x90>
		Error_Handler();
240517bc:	f000 fb98 	bl	24051ef0 <Error_Handler>
	}
	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
240517c0:	2300      	movs	r3, #0
240517c2:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
240517c4:	f107 031c 	add.w	r3, r7, #28
240517c8:	4619      	mov	r1, r3
240517ca:	4812      	ldr	r0, [pc, #72]	; (24051814 <MX_ADC1_Init+0xe4>)
240517cc:	f002 fe88 	bl	240544e0 <HAL_ADCEx_MultiModeConfigChannel>
240517d0:	4603      	mov	r3, r0
240517d2:	2b00      	cmp	r3, #0
240517d4:	d001      	beq.n	240517da <MX_ADC1_Init+0xaa>
		Error_Handler();
240517d6:	f000 fb8b 	bl	24051ef0 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_4;
240517da:	4b10      	ldr	r3, [pc, #64]	; (2405181c <MX_ADC1_Init+0xec>)
240517dc:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
240517de:	2306      	movs	r3, #6
240517e0:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
240517e2:	2300      	movs	r3, #0
240517e4:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
240517e6:	f240 73ff 	movw	r3, #2047	; 0x7ff
240517ea:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
240517ec:	2304      	movs	r3, #4
240517ee:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
240517f0:	2300      	movs	r3, #0
240517f2:	617b      	str	r3, [r7, #20]
	sConfig.OffsetSignedSaturation = DISABLE;
240517f4:	2300      	movs	r3, #0
240517f6:	767b      	strb	r3, [r7, #25]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
240517f8:	463b      	mov	r3, r7
240517fa:	4619      	mov	r1, r3
240517fc:	4805      	ldr	r0, [pc, #20]	; (24051814 <MX_ADC1_Init+0xe4>)
240517fe:	f002 f9e9 	bl	24053bd4 <HAL_ADC_ConfigChannel>
24051802:	4603      	mov	r3, r0
24051804:	2b00      	cmp	r3, #0
24051806:	d001      	beq.n	2405180c <MX_ADC1_Init+0xdc>
		Error_Handler();
24051808:	f000 fb72 	bl	24051ef0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
2405180c:	bf00      	nop
2405180e:	3728      	adds	r7, #40	; 0x28
24051810:	46bd      	mov	sp, r7
24051812:	bd80      	pop	{r7, pc}
24051814:	2000044c 	.word	0x2000044c
24051818:	40022000 	.word	0x40022000
2405181c:	10c00010 	.word	0x10c00010

24051820 <MX_DAC1_Init>:
/**
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC1_Init(void) {
24051820:	b580      	push	{r7, lr}
24051822:	b08a      	sub	sp, #40	; 0x28
24051824:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC1_Init 0 */

	/* USER CODE END DAC1_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
24051826:	1d3b      	adds	r3, r7, #4
24051828:	2224      	movs	r2, #36	; 0x24
2405182a:	2100      	movs	r1, #0
2405182c:	4618      	mov	r0, r3
2405182e:	f00d f929 	bl	2405ea84 <memset>
	/* USER CODE BEGIN DAC1_Init 1 */

	/* USER CODE END DAC1_Init 1 */
	/** DAC Initialization
	 */
	hdac1.Instance = DAC1;
24051832:	4b17      	ldr	r3, [pc, #92]	; (24051890 <MX_DAC1_Init+0x70>)
24051834:	4a17      	ldr	r2, [pc, #92]	; (24051894 <MX_DAC1_Init+0x74>)
24051836:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK) {
24051838:	4815      	ldr	r0, [pc, #84]	; (24051890 <MX_DAC1_Init+0x70>)
2405183a:	f003 f816 	bl	2405486a <HAL_DAC_Init>
2405183e:	4603      	mov	r3, r0
24051840:	2b00      	cmp	r3, #0
24051842:	d001      	beq.n	24051848 <MX_DAC1_Init+0x28>
		Error_Handler();
24051844:	f000 fb54 	bl	24051ef0 <Error_Handler>
	}
	/** DAC channel OUT1 config
	 */
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
24051848:	2300      	movs	r3, #0
2405184a:	607b      	str	r3, [r7, #4]
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
2405184c:	2300      	movs	r3, #0
2405184e:	60bb      	str	r3, [r7, #8]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
24051850:	2300      	movs	r3, #0
24051852:	60fb      	str	r3, [r7, #12]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
24051854:	2301      	movs	r3, #1
24051856:	613b      	str	r3, [r7, #16]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
24051858:	2300      	movs	r3, #0
2405185a:	617b      	str	r3, [r7, #20]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
2405185c:	1d3b      	adds	r3, r7, #4
2405185e:	2200      	movs	r2, #0
24051860:	4619      	mov	r1, r3
24051862:	480b      	ldr	r0, [pc, #44]	; (24051890 <MX_DAC1_Init+0x70>)
24051864:	f003 f89a 	bl	2405499c <HAL_DAC_ConfigChannel>
24051868:	4603      	mov	r3, r0
2405186a:	2b00      	cmp	r3, #0
2405186c:	d001      	beq.n	24051872 <MX_DAC1_Init+0x52>
		Error_Handler();
2405186e:	f000 fb3f 	bl	24051ef0 <Error_Handler>
	}
	/** DAC channel OUT2 config
	 */
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK) {
24051872:	1d3b      	adds	r3, r7, #4
24051874:	2210      	movs	r2, #16
24051876:	4619      	mov	r1, r3
24051878:	4805      	ldr	r0, [pc, #20]	; (24051890 <MX_DAC1_Init+0x70>)
2405187a:	f003 f88f 	bl	2405499c <HAL_DAC_ConfigChannel>
2405187e:	4603      	mov	r3, r0
24051880:	2b00      	cmp	r3, #0
24051882:	d001      	beq.n	24051888 <MX_DAC1_Init+0x68>
		Error_Handler();
24051884:	f000 fb34 	bl	24051ef0 <Error_Handler>
	}
	/* USER CODE BEGIN DAC1_Init 2 */

	/* USER CODE END DAC1_Init 2 */

}
24051888:	bf00      	nop
2405188a:	3728      	adds	r7, #40	; 0x28
2405188c:	46bd      	mov	sp, r7
2405188e:	bd80      	pop	{r7, pc}
24051890:	200002b8 	.word	0x200002b8
24051894:	40007400 	.word	0x40007400

24051898 <MX_DAC2_Init>:
/**
 * @brief DAC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC2_Init(void) {
24051898:	b580      	push	{r7, lr}
2405189a:	b08a      	sub	sp, #40	; 0x28
2405189c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC2_Init 0 */

	/* USER CODE END DAC2_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
2405189e:	1d3b      	adds	r3, r7, #4
240518a0:	2224      	movs	r2, #36	; 0x24
240518a2:	2100      	movs	r1, #0
240518a4:	4618      	mov	r0, r3
240518a6:	f00d f8ed 	bl	2405ea84 <memset>
	/* USER CODE BEGIN DAC2_Init 1 */

	/* USER CODE END DAC2_Init 1 */
	/** DAC Initialization
	 */
	hdac2.Instance = DAC2;
240518aa:	4b12      	ldr	r3, [pc, #72]	; (240518f4 <MX_DAC2_Init+0x5c>)
240518ac:	4a12      	ldr	r2, [pc, #72]	; (240518f8 <MX_DAC2_Init+0x60>)
240518ae:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac2) != HAL_OK) {
240518b0:	4810      	ldr	r0, [pc, #64]	; (240518f4 <MX_DAC2_Init+0x5c>)
240518b2:	f002 ffda 	bl	2405486a <HAL_DAC_Init>
240518b6:	4603      	mov	r3, r0
240518b8:	2b00      	cmp	r3, #0
240518ba:	d001      	beq.n	240518c0 <MX_DAC2_Init+0x28>
		Error_Handler();
240518bc:	f000 fb18 	bl	24051ef0 <Error_Handler>
	}
	/** DAC channel OUT1 config
	 */
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
240518c0:	2300      	movs	r3, #0
240518c2:	607b      	str	r3, [r7, #4]
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
240518c4:	2300      	movs	r3, #0
240518c6:	60bb      	str	r3, [r7, #8]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
240518c8:	2300      	movs	r3, #0
240518ca:	60fb      	str	r3, [r7, #12]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
240518cc:	2301      	movs	r3, #1
240518ce:	613b      	str	r3, [r7, #16]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
240518d0:	2300      	movs	r3, #0
240518d2:	617b      	str	r3, [r7, #20]
	if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
240518d4:	1d3b      	adds	r3, r7, #4
240518d6:	2200      	movs	r2, #0
240518d8:	4619      	mov	r1, r3
240518da:	4806      	ldr	r0, [pc, #24]	; (240518f4 <MX_DAC2_Init+0x5c>)
240518dc:	f003 f85e 	bl	2405499c <HAL_DAC_ConfigChannel>
240518e0:	4603      	mov	r3, r0
240518e2:	2b00      	cmp	r3, #0
240518e4:	d001      	beq.n	240518ea <MX_DAC2_Init+0x52>
		Error_Handler();
240518e6:	f000 fb03 	bl	24051ef0 <Error_Handler>
	}
	/* USER CODE BEGIN DAC2_Init 2 */

	/* USER CODE END DAC2_Init 2 */

}
240518ea:	bf00      	nop
240518ec:	3728      	adds	r7, #40	; 0x28
240518ee:	46bd      	mov	sp, r7
240518f0:	bd80      	pop	{r7, pc}
240518f2:	bf00      	nop
240518f4:	2000021c 	.word	0x2000021c
240518f8:	58003400 	.word	0x58003400

240518fc <MX_DMA2D_Init>:
/**
 * @brief DMA2D Initialization Function
 * @param None
 * @retval None
 */
static void MX_DMA2D_Init(void) {
240518fc:	b580      	push	{r7, lr}
240518fe:	af00      	add	r7, sp, #0
	/* USER CODE END DMA2D_Init 0 */

	/* USER CODE BEGIN DMA2D_Init 1 */

	/* USER CODE END DMA2D_Init 1 */
	hdma2d.Instance = DMA2D;
24051900:	4b0b      	ldr	r3, [pc, #44]	; (24051930 <MX_DMA2D_Init+0x34>)
24051902:	4a0c      	ldr	r2, [pc, #48]	; (24051934 <MX_DMA2D_Init+0x38>)
24051904:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_R2M;
24051906:	4b0a      	ldr	r3, [pc, #40]	; (24051930 <MX_DMA2D_Init+0x34>)
24051908:	f44f 3240 	mov.w	r2, #196608	; 0x30000
2405190c:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
2405190e:	4b08      	ldr	r3, [pc, #32]	; (24051930 <MX_DMA2D_Init+0x34>)
24051910:	2202      	movs	r2, #2
24051912:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = 0;
24051914:	4b06      	ldr	r3, [pc, #24]	; (24051930 <MX_DMA2D_Init+0x34>)
24051916:	2200      	movs	r2, #0
24051918:	60da      	str	r2, [r3, #12]
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK) {
2405191a:	4805      	ldr	r0, [pc, #20]	; (24051930 <MX_DMA2D_Init+0x34>)
2405191c:	f006 f858 	bl	240579d0 <HAL_DMA2D_Init>
24051920:	4603      	mov	r3, r0
24051922:	2b00      	cmp	r3, #0
24051924:	d001      	beq.n	2405192a <MX_DMA2D_Init+0x2e>
		Error_Handler();
24051926:	f000 fae3 	bl	24051ef0 <Error_Handler>
	}
	/* USER CODE BEGIN DMA2D_Init 2 */

	/* USER CODE END DMA2D_Init 2 */

}
2405192a:	bf00      	nop
2405192c:	bd80      	pop	{r7, pc}
2405192e:	bf00      	nop
24051930:	200004d8 	.word	0x200004d8
24051934:	52001000 	.word	0x52001000

24051938 <MX_LTDC_Init>:
/**
 * @brief LTDC Initialization Function
 * @param None
 * @retval None
 */
static void MX_LTDC_Init(void) {
24051938:	b580      	push	{r7, lr}
2405193a:	b08e      	sub	sp, #56	; 0x38
2405193c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN LTDC_Init 0 */

	/* USER CODE END LTDC_Init 0 */

	LTDC_LayerCfgTypeDef pLayerCfg = { 0 };
2405193e:	1d3b      	adds	r3, r7, #4
24051940:	2234      	movs	r2, #52	; 0x34
24051942:	2100      	movs	r1, #0
24051944:	4618      	mov	r0, r3
24051946:	f00d f89d 	bl	2405ea84 <memset>

	/* USER CODE BEGIN LTDC_Init 1 */

	/* USER CODE END LTDC_Init 1 */
	hltdc.Instance = LTDC;
2405194a:	4b39      	ldr	r3, [pc, #228]	; (24051a30 <MX_LTDC_Init+0xf8>)
2405194c:	4a39      	ldr	r2, [pc, #228]	; (24051a34 <MX_LTDC_Init+0xfc>)
2405194e:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
24051950:	4b37      	ldr	r3, [pc, #220]	; (24051a30 <MX_LTDC_Init+0xf8>)
24051952:	2200      	movs	r2, #0
24051954:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
24051956:	4b36      	ldr	r3, [pc, #216]	; (24051a30 <MX_LTDC_Init+0xf8>)
24051958:	2200      	movs	r2, #0
2405195a:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
2405195c:	4b34      	ldr	r3, [pc, #208]	; (24051a30 <MX_LTDC_Init+0xf8>)
2405195e:	2200      	movs	r2, #0
24051960:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IIPC;
24051962:	4b33      	ldr	r3, [pc, #204]	; (24051a30 <MX_LTDC_Init+0xf8>)
24051964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
24051968:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 9;
2405196a:	4b31      	ldr	r3, [pc, #196]	; (24051a30 <MX_LTDC_Init+0xf8>)
2405196c:	2209      	movs	r2, #9
2405196e:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 1;
24051970:	4b2f      	ldr	r3, [pc, #188]	; (24051a30 <MX_LTDC_Init+0xf8>)
24051972:	2201      	movs	r2, #1
24051974:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 60;
24051976:	4b2e      	ldr	r3, [pc, #184]	; (24051a30 <MX_LTDC_Init+0xf8>)
24051978:	223c      	movs	r2, #60	; 0x3c
2405197a:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 7;
2405197c:	4b2c      	ldr	r3, [pc, #176]	; (24051a30 <MX_LTDC_Init+0xf8>)
2405197e:	2207      	movs	r2, #7
24051980:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 380;
24051982:	4b2b      	ldr	r3, [pc, #172]	; (24051a30 <MX_LTDC_Init+0xf8>)
24051984:	f44f 72be 	mov.w	r2, #380	; 0x17c
24051988:	625a      	str	r2, [r3, #36]	; 0x24
	hltdc.Init.AccumulatedActiveH = 247;
2405198a:	4b29      	ldr	r3, [pc, #164]	; (24051a30 <MX_LTDC_Init+0xf8>)
2405198c:	22f7      	movs	r2, #247	; 0xf7
2405198e:	629a      	str	r2, [r3, #40]	; 0x28
	hltdc.Init.TotalWidth = 392;
24051990:	4b27      	ldr	r3, [pc, #156]	; (24051a30 <MX_LTDC_Init+0xf8>)
24051992:	f44f 72c4 	mov.w	r2, #392	; 0x188
24051996:	62da      	str	r2, [r3, #44]	; 0x2c
	hltdc.Init.TotalHeigh = 255;
24051998:	4b25      	ldr	r3, [pc, #148]	; (24051a30 <MX_LTDC_Init+0xf8>)
2405199a:	22ff      	movs	r2, #255	; 0xff
2405199c:	631a      	str	r2, [r3, #48]	; 0x30
	hltdc.Init.Backcolor.Blue = 0;
2405199e:	4b24      	ldr	r3, [pc, #144]	; (24051a30 <MX_LTDC_Init+0xf8>)
240519a0:	2200      	movs	r2, #0
240519a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hltdc.Init.Backcolor.Green = 0;
240519a6:	4b22      	ldr	r3, [pc, #136]	; (24051a30 <MX_LTDC_Init+0xf8>)
240519a8:	2200      	movs	r2, #0
240519aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	hltdc.Init.Backcolor.Red = 0;
240519ae:	4b20      	ldr	r3, [pc, #128]	; (24051a30 <MX_LTDC_Init+0xf8>)
240519b0:	2200      	movs	r2, #0
240519b2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK) {
240519b6:	481e      	ldr	r0, [pc, #120]	; (24051a30 <MX_LTDC_Init+0xf8>)
240519b8:	f006 fa50 	bl	24057e5c <HAL_LTDC_Init>
240519bc:	4603      	mov	r3, r0
240519be:	2b00      	cmp	r3, #0
240519c0:	d001      	beq.n	240519c6 <MX_LTDC_Init+0x8e>
		Error_Handler();
240519c2:	f000 fa95 	bl	24051ef0 <Error_Handler>
	}
	pLayerCfg.WindowX0 = 0;
240519c6:	2300      	movs	r3, #0
240519c8:	607b      	str	r3, [r7, #4]
	pLayerCfg.WindowX1 = 320;
240519ca:	f44f 73a0 	mov.w	r3, #320	; 0x140
240519ce:	60bb      	str	r3, [r7, #8]
	pLayerCfg.WindowY0 = 0;
240519d0:	2300      	movs	r3, #0
240519d2:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowY1 = 240;
240519d4:	23f0      	movs	r3, #240	; 0xf0
240519d6:	613b      	str	r3, [r7, #16]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
240519d8:	2302      	movs	r3, #2
240519da:	617b      	str	r3, [r7, #20]
	pLayerCfg.Alpha = 255;
240519dc:	23ff      	movs	r3, #255	; 0xff
240519de:	61bb      	str	r3, [r7, #24]
	pLayerCfg.Alpha0 = 255;
240519e0:	23ff      	movs	r3, #255	; 0xff
240519e2:	61fb      	str	r3, [r7, #28]
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
240519e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
240519e8:	623b      	str	r3, [r7, #32]
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
240519ea:	2305      	movs	r3, #5
240519ec:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.FBStartAdress = 0x24000000;
240519ee:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
240519f2:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.ImageWidth = 320;
240519f4:	f44f 73a0 	mov.w	r3, #320	; 0x140
240519f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	pLayerCfg.ImageHeight = 240;
240519fa:	23f0      	movs	r3, #240	; 0xf0
240519fc:	633b      	str	r3, [r7, #48]	; 0x30
	pLayerCfg.Backcolor.Blue = 0;
240519fe:	2300      	movs	r3, #0
24051a00:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	pLayerCfg.Backcolor.Green = 255;
24051a04:	23ff      	movs	r3, #255	; 0xff
24051a06:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	pLayerCfg.Backcolor.Red = 0;
24051a0a:	2300      	movs	r3, #0
24051a0c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK) {
24051a10:	1d3b      	adds	r3, r7, #4
24051a12:	2200      	movs	r2, #0
24051a14:	4619      	mov	r1, r3
24051a16:	4806      	ldr	r0, [pc, #24]	; (24051a30 <MX_LTDC_Init+0xf8>)
24051a18:	f006 fba8 	bl	2405816c <HAL_LTDC_ConfigLayer>
24051a1c:	4603      	mov	r3, r0
24051a1e:	2b00      	cmp	r3, #0
24051a20:	d001      	beq.n	24051a26 <MX_LTDC_Init+0xee>
		Error_Handler();
24051a22:	f000 fa65 	bl	24051ef0 <Error_Handler>
	}
	/* USER CODE BEGIN LTDC_Init 2 */

	/* USER CODE END LTDC_Init 2 */

}
24051a26:	bf00      	nop
24051a28:	3738      	adds	r7, #56	; 0x38
24051a2a:	46bd      	mov	sp, r7
24051a2c:	bd80      	pop	{r7, pc}
24051a2e:	bf00      	nop
24051a30:	2000032c 	.word	0x2000032c
24051a34:	50001000 	.word	0x50001000

24051a38 <MX_OCTOSPI1_Init>:
/**
 * @brief OCTOSPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_OCTOSPI1_Init(void) {
24051a38:	b580      	push	{r7, lr}
24051a3a:	b086      	sub	sp, #24
24051a3c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN OCTOSPI1_Init 0 */

	/* USER CODE END OCTOSPI1_Init 0 */

	OSPIM_CfgTypeDef sOspiManagerCfg = { 0 };
24051a3e:	463b      	mov	r3, r7
24051a40:	2200      	movs	r2, #0
24051a42:	601a      	str	r2, [r3, #0]
24051a44:	605a      	str	r2, [r3, #4]
24051a46:	609a      	str	r2, [r3, #8]
24051a48:	60da      	str	r2, [r3, #12]
24051a4a:	611a      	str	r2, [r3, #16]
24051a4c:	615a      	str	r2, [r3, #20]

	/* USER CODE BEGIN OCTOSPI1_Init 1 */

	/* USER CODE END OCTOSPI1_Init 1 */
	/* OCTOSPI1 parameter configuration*/
	hospi1.Instance = OCTOSPI1;
24051a4e:	4b29      	ldr	r3, [pc, #164]	; (24051af4 <MX_OCTOSPI1_Init+0xbc>)
24051a50:	4a29      	ldr	r2, [pc, #164]	; (24051af8 <MX_OCTOSPI1_Init+0xc0>)
24051a52:	601a      	str	r2, [r3, #0]
	hospi1.Init.FifoThreshold = 4;
24051a54:	4b27      	ldr	r3, [pc, #156]	; (24051af4 <MX_OCTOSPI1_Init+0xbc>)
24051a56:	2204      	movs	r2, #4
24051a58:	605a      	str	r2, [r3, #4]
	hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
24051a5a:	4b26      	ldr	r3, [pc, #152]	; (24051af4 <MX_OCTOSPI1_Init+0xbc>)
24051a5c:	2200      	movs	r2, #0
24051a5e:	609a      	str	r2, [r3, #8]
	hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
24051a60:	4b24      	ldr	r3, [pc, #144]	; (24051af4 <MX_OCTOSPI1_Init+0xbc>)
24051a62:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
24051a66:	60da      	str	r2, [r3, #12]
	hospi1.Init.DeviceSize = 20;
24051a68:	4b22      	ldr	r3, [pc, #136]	; (24051af4 <MX_OCTOSPI1_Init+0xbc>)
24051a6a:	2214      	movs	r2, #20
24051a6c:	611a      	str	r2, [r3, #16]
	hospi1.Init.ChipSelectHighTime = 2;
24051a6e:	4b21      	ldr	r3, [pc, #132]	; (24051af4 <MX_OCTOSPI1_Init+0xbc>)
24051a70:	2202      	movs	r2, #2
24051a72:	615a      	str	r2, [r3, #20]
	hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
24051a74:	4b1f      	ldr	r3, [pc, #124]	; (24051af4 <MX_OCTOSPI1_Init+0xbc>)
24051a76:	2200      	movs	r2, #0
24051a78:	619a      	str	r2, [r3, #24]
	hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
24051a7a:	4b1e      	ldr	r3, [pc, #120]	; (24051af4 <MX_OCTOSPI1_Init+0xbc>)
24051a7c:	2200      	movs	r2, #0
24051a7e:	61da      	str	r2, [r3, #28]
	hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
24051a80:	4b1c      	ldr	r3, [pc, #112]	; (24051af4 <MX_OCTOSPI1_Init+0xbc>)
24051a82:	2200      	movs	r2, #0
24051a84:	621a      	str	r2, [r3, #32]
	hospi1.Init.ClockPrescaler = 1;
24051a86:	4b1b      	ldr	r3, [pc, #108]	; (24051af4 <MX_OCTOSPI1_Init+0xbc>)
24051a88:	2201      	movs	r2, #1
24051a8a:	625a      	str	r2, [r3, #36]	; 0x24
	hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
24051a8c:	4b19      	ldr	r3, [pc, #100]	; (24051af4 <MX_OCTOSPI1_Init+0xbc>)
24051a8e:	2200      	movs	r2, #0
24051a90:	629a      	str	r2, [r3, #40]	; 0x28
	hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
24051a92:	4b18      	ldr	r3, [pc, #96]	; (24051af4 <MX_OCTOSPI1_Init+0xbc>)
24051a94:	2200      	movs	r2, #0
24051a96:	62da      	str	r2, [r3, #44]	; 0x2c
	hospi1.Init.ChipSelectBoundary = 0;
24051a98:	4b16      	ldr	r3, [pc, #88]	; (24051af4 <MX_OCTOSPI1_Init+0xbc>)
24051a9a:	2200      	movs	r2, #0
24051a9c:	631a      	str	r2, [r3, #48]	; 0x30
	hospi1.Init.ClkChipSelectHighTime = 0;
24051a9e:	4b15      	ldr	r3, [pc, #84]	; (24051af4 <MX_OCTOSPI1_Init+0xbc>)
24051aa0:	2200      	movs	r2, #0
24051aa2:	635a      	str	r2, [r3, #52]	; 0x34
	hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
24051aa4:	4b13      	ldr	r3, [pc, #76]	; (24051af4 <MX_OCTOSPI1_Init+0xbc>)
24051aa6:	2208      	movs	r2, #8
24051aa8:	639a      	str	r2, [r3, #56]	; 0x38
	hospi1.Init.MaxTran = 0;
24051aaa:	4b12      	ldr	r3, [pc, #72]	; (24051af4 <MX_OCTOSPI1_Init+0xbc>)
24051aac:	2200      	movs	r2, #0
24051aae:	63da      	str	r2, [r3, #60]	; 0x3c
	hospi1.Init.Refresh = 0;
24051ab0:	4b10      	ldr	r3, [pc, #64]	; (24051af4 <MX_OCTOSPI1_Init+0xbc>)
24051ab2:	2200      	movs	r2, #0
24051ab4:	641a      	str	r2, [r3, #64]	; 0x40
	if (HAL_OSPI_Init(&hospi1) != HAL_OK) {
24051ab6:	480f      	ldr	r0, [pc, #60]	; (24051af4 <MX_OCTOSPI1_Init+0xbc>)
24051ab8:	f006 fdbe 	bl	24058638 <HAL_OSPI_Init>
24051abc:	4603      	mov	r3, r0
24051abe:	2b00      	cmp	r3, #0
24051ac0:	d001      	beq.n	24051ac6 <MX_OCTOSPI1_Init+0x8e>
		Error_Handler();
24051ac2:	f000 fa15 	bl	24051ef0 <Error_Handler>
	}
	sOspiManagerCfg.ClkPort = 1;
24051ac6:	2301      	movs	r3, #1
24051ac8:	603b      	str	r3, [r7, #0]
	sOspiManagerCfg.NCSPort = 1;
24051aca:	2301      	movs	r3, #1
24051acc:	60bb      	str	r3, [r7, #8]
	sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
24051ace:	f04f 1301 	mov.w	r3, #65537	; 0x10001
24051ad2:	60fb      	str	r3, [r7, #12]
	if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg,
24051ad4:	463b      	mov	r3, r7
24051ad6:	f241 3288 	movw	r2, #5000	; 0x1388
24051ada:	4619      	mov	r1, r3
24051adc:	4805      	ldr	r0, [pc, #20]	; (24051af4 <MX_OCTOSPI1_Init+0xbc>)
24051ade:	f007 f8e7 	bl	24058cb0 <HAL_OSPIM_Config>
24051ae2:	4603      	mov	r3, r0
24051ae4:	2b00      	cmp	r3, #0
24051ae6:	d001      	beq.n	24051aec <MX_OCTOSPI1_Init+0xb4>
			HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		Error_Handler();
24051ae8:	f000 fa02 	bl	24051ef0 <Error_Handler>
	}
	/* USER CODE BEGIN OCTOSPI1_Init 2 */

	/* USER CODE END OCTOSPI1_Init 2 */

}
24051aec:	bf00      	nop
24051aee:	3718      	adds	r7, #24
24051af0:	46bd      	mov	sp, r7
24051af2:	bd80      	pop	{r7, pc}
24051af4:	200002cc 	.word	0x200002cc
24051af8:	52005000 	.word	0x52005000

24051afc <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
24051afc:	b580      	push	{r7, lr}
24051afe:	b086      	sub	sp, #24
24051b00:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
24051b02:	1d3b      	adds	r3, r7, #4
24051b04:	2200      	movs	r2, #0
24051b06:	601a      	str	r2, [r3, #0]
24051b08:	605a      	str	r2, [r3, #4]
24051b0a:	609a      	str	r2, [r3, #8]
24051b0c:	60da      	str	r2, [r3, #12]
24051b0e:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
24051b10:	2300      	movs	r3, #0
24051b12:	603b      	str	r3, [r7, #0]
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
24051b14:	4b26      	ldr	r3, [pc, #152]	; (24051bb0 <MX_RTC_Init+0xb4>)
24051b16:	4a27      	ldr	r2, [pc, #156]	; (24051bb4 <MX_RTC_Init+0xb8>)
24051b18:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
24051b1a:	4b25      	ldr	r3, [pc, #148]	; (24051bb0 <MX_RTC_Init+0xb4>)
24051b1c:	2200      	movs	r2, #0
24051b1e:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
24051b20:	4b23      	ldr	r3, [pc, #140]	; (24051bb0 <MX_RTC_Init+0xb4>)
24051b22:	227f      	movs	r2, #127	; 0x7f
24051b24:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
24051b26:	4b22      	ldr	r3, [pc, #136]	; (24051bb0 <MX_RTC_Init+0xb4>)
24051b28:	22ff      	movs	r2, #255	; 0xff
24051b2a:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
24051b2c:	4b20      	ldr	r3, [pc, #128]	; (24051bb0 <MX_RTC_Init+0xb4>)
24051b2e:	2200      	movs	r2, #0
24051b30:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
24051b32:	4b1f      	ldr	r3, [pc, #124]	; (24051bb0 <MX_RTC_Init+0xb4>)
24051b34:	2200      	movs	r2, #0
24051b36:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
24051b38:	4b1d      	ldr	r3, [pc, #116]	; (24051bb0 <MX_RTC_Init+0xb4>)
24051b3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
24051b3e:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
24051b40:	4b1b      	ldr	r3, [pc, #108]	; (24051bb0 <MX_RTC_Init+0xb4>)
24051b42:	2200      	movs	r2, #0
24051b44:	615a      	str	r2, [r3, #20]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
24051b46:	481a      	ldr	r0, [pc, #104]	; (24051bb0 <MX_RTC_Init+0xb4>)
24051b48:	f00b f8c8 	bl	2405ccdc <HAL_RTC_Init>
24051b4c:	4603      	mov	r3, r0
24051b4e:	2b00      	cmp	r3, #0
24051b50:	d001      	beq.n	24051b56 <MX_RTC_Init+0x5a>
		Error_Handler();
24051b52:	f000 f9cd 	bl	24051ef0 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
24051b56:	2300      	movs	r3, #0
24051b58:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
24051b5a:	2300      	movs	r3, #0
24051b5c:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
24051b5e:	2300      	movs	r3, #0
24051b60:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
24051b62:	2300      	movs	r3, #0
24051b64:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
24051b66:	2300      	movs	r3, #0
24051b68:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
24051b6a:	1d3b      	adds	r3, r7, #4
24051b6c:	2201      	movs	r2, #1
24051b6e:	4619      	mov	r1, r3
24051b70:	480f      	ldr	r0, [pc, #60]	; (24051bb0 <MX_RTC_Init+0xb4>)
24051b72:	f00b f92f 	bl	2405cdd4 <HAL_RTC_SetTime>
24051b76:	4603      	mov	r3, r0
24051b78:	2b00      	cmp	r3, #0
24051b7a:	d001      	beq.n	24051b80 <MX_RTC_Init+0x84>
		Error_Handler();
24051b7c:	f000 f9b8 	bl	24051ef0 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
24051b80:	2301      	movs	r3, #1
24051b82:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_JANUARY;
24051b84:	2301      	movs	r3, #1
24051b86:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x1;
24051b88:	2301      	movs	r3, #1
24051b8a:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x0;
24051b8c:	2300      	movs	r3, #0
24051b8e:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
24051b90:	463b      	mov	r3, r7
24051b92:	2201      	movs	r2, #1
24051b94:	4619      	mov	r1, r3
24051b96:	4806      	ldr	r0, [pc, #24]	; (24051bb0 <MX_RTC_Init+0xb4>)
24051b98:	f00b fa16 	bl	2405cfc8 <HAL_RTC_SetDate>
24051b9c:	4603      	mov	r3, r0
24051b9e:	2b00      	cmp	r3, #0
24051ba0:	d001      	beq.n	24051ba6 <MX_RTC_Init+0xaa>
		Error_Handler();
24051ba2:	f000 f9a5 	bl	24051ef0 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
24051ba6:	bf00      	nop
24051ba8:	3718      	adds	r7, #24
24051baa:	46bd      	mov	sp, r7
24051bac:	bd80      	pop	{r7, pc}
24051bae:	bf00      	nop
24051bb0:	200004b0 	.word	0x200004b0
24051bb4:	58004000 	.word	0x58004000

24051bb8 <MX_SAI1_Init>:
/**
 * @brief SAI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SAI1_Init(void) {
24051bb8:	b580      	push	{r7, lr}
24051bba:	af00      	add	r7, sp, #0
	/* USER CODE END SAI1_Init 0 */

	/* USER CODE BEGIN SAI1_Init 1 */

	/* USER CODE END SAI1_Init 1 */
	hsai_BlockA1.Instance = SAI1_Block_A;
24051bbc:	4b17      	ldr	r3, [pc, #92]	; (24051c1c <MX_SAI1_Init+0x64>)
24051bbe:	4a18      	ldr	r2, [pc, #96]	; (24051c20 <MX_SAI1_Init+0x68>)
24051bc0:	601a      	str	r2, [r3, #0]
	hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
24051bc2:	4b16      	ldr	r3, [pc, #88]	; (24051c1c <MX_SAI1_Init+0x64>)
24051bc4:	2200      	movs	r2, #0
24051bc6:	605a      	str	r2, [r3, #4]
	hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
24051bc8:	4b14      	ldr	r3, [pc, #80]	; (24051c1c <MX_SAI1_Init+0x64>)
24051bca:	2200      	movs	r2, #0
24051bcc:	609a      	str	r2, [r3, #8]
	hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
24051bce:	4b13      	ldr	r3, [pc, #76]	; (24051c1c <MX_SAI1_Init+0x64>)
24051bd0:	2200      	movs	r2, #0
24051bd2:	615a      	str	r2, [r3, #20]
	hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
24051bd4:	4b11      	ldr	r3, [pc, #68]	; (24051c1c <MX_SAI1_Init+0x64>)
24051bd6:	2200      	movs	r2, #0
24051bd8:	619a      	str	r2, [r3, #24]
	hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
24051bda:	4b10      	ldr	r3, [pc, #64]	; (24051c1c <MX_SAI1_Init+0x64>)
24051bdc:	2200      	movs	r2, #0
24051bde:	61da      	str	r2, [r3, #28]
	hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
24051be0:	4b0e      	ldr	r3, [pc, #56]	; (24051c1c <MX_SAI1_Init+0x64>)
24051be2:	f64b 3280 	movw	r2, #48000	; 0xbb80
24051be6:	621a      	str	r2, [r3, #32]
	hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
24051be8:	4b0c      	ldr	r3, [pc, #48]	; (24051c1c <MX_SAI1_Init+0x64>)
24051bea:	2200      	movs	r2, #0
24051bec:	60da      	str	r2, [r3, #12]
	hsai_BlockA1.Init.MonoStereoMode = SAI_MONOMODE;
24051bee:	4b0b      	ldr	r3, [pc, #44]	; (24051c1c <MX_SAI1_Init+0x64>)
24051bf0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24051bf4:	62da      	str	r2, [r3, #44]	; 0x2c
	hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
24051bf6:	4b09      	ldr	r3, [pc, #36]	; (24051c1c <MX_SAI1_Init+0x64>)
24051bf8:	2200      	movs	r2, #0
24051bfa:	631a      	str	r2, [r3, #48]	; 0x30
	hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
24051bfc:	4b07      	ldr	r3, [pc, #28]	; (24051c1c <MX_SAI1_Init+0x64>)
24051bfe:	2200      	movs	r2, #0
24051c00:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD,
24051c02:	2302      	movs	r3, #2
24051c04:	2200      	movs	r2, #0
24051c06:	2100      	movs	r1, #0
24051c08:	4804      	ldr	r0, [pc, #16]	; (24051c1c <MX_SAI1_Init+0x64>)
24051c0a:	f00b fb87 	bl	2405d31c <HAL_SAI_InitProtocol>
24051c0e:	4603      	mov	r3, r0
24051c10:	2b00      	cmp	r3, #0
24051c12:	d001      	beq.n	24051c18 <MX_SAI1_Init+0x60>
			SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK) {
		Error_Handler();
24051c14:	f000 f96c 	bl	24051ef0 <Error_Handler>
	}
	/* USER CODE BEGIN SAI1_Init 2 */

	/* USER CODE END SAI1_Init 2 */

}
24051c18:	bf00      	nop
24051c1a:	bd80      	pop	{r7, pc}
24051c1c:	20000540 	.word	0x20000540
24051c20:	40015804 	.word	0x40015804

24051c24 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
24051c24:	b580      	push	{r7, lr}
24051c26:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
24051c28:	4b27      	ldr	r3, [pc, #156]	; (24051cc8 <MX_SPI2_Init+0xa4>)
24051c2a:	4a28      	ldr	r2, [pc, #160]	; (24051ccc <MX_SPI2_Init+0xa8>)
24051c2c:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
24051c2e:	4b26      	ldr	r3, [pc, #152]	; (24051cc8 <MX_SPI2_Init+0xa4>)
24051c30:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
24051c34:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
24051c36:	4b24      	ldr	r3, [pc, #144]	; (24051cc8 <MX_SPI2_Init+0xa4>)
24051c38:	f44f 3200 	mov.w	r2, #131072	; 0x20000
24051c3c:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
24051c3e:	4b22      	ldr	r3, [pc, #136]	; (24051cc8 <MX_SPI2_Init+0xa4>)
24051c40:	2207      	movs	r2, #7
24051c42:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
24051c44:	4b20      	ldr	r3, [pc, #128]	; (24051cc8 <MX_SPI2_Init+0xa4>)
24051c46:	2200      	movs	r2, #0
24051c48:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
24051c4a:	4b1f      	ldr	r3, [pc, #124]	; (24051cc8 <MX_SPI2_Init+0xa4>)
24051c4c:	2200      	movs	r2, #0
24051c4e:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
24051c50:	4b1d      	ldr	r3, [pc, #116]	; (24051cc8 <MX_SPI2_Init+0xa4>)
24051c52:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
24051c56:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
24051c58:	4b1b      	ldr	r3, [pc, #108]	; (24051cc8 <MX_SPI2_Init+0xa4>)
24051c5a:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
24051c5e:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
24051c60:	4b19      	ldr	r3, [pc, #100]	; (24051cc8 <MX_SPI2_Init+0xa4>)
24051c62:	2200      	movs	r2, #0
24051c64:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
24051c66:	4b18      	ldr	r3, [pc, #96]	; (24051cc8 <MX_SPI2_Init+0xa4>)
24051c68:	2200      	movs	r2, #0
24051c6a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
24051c6c:	4b16      	ldr	r3, [pc, #88]	; (24051cc8 <MX_SPI2_Init+0xa4>)
24051c6e:	2200      	movs	r2, #0
24051c70:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 0x0;
24051c72:	4b15      	ldr	r3, [pc, #84]	; (24051cc8 <MX_SPI2_Init+0xa4>)
24051c74:	2200      	movs	r2, #0
24051c76:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
24051c78:	4b13      	ldr	r3, [pc, #76]	; (24051cc8 <MX_SPI2_Init+0xa4>)
24051c7a:	2200      	movs	r2, #0
24051c7c:	635a      	str	r2, [r3, #52]	; 0x34
	hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
24051c7e:	4b12      	ldr	r3, [pc, #72]	; (24051cc8 <MX_SPI2_Init+0xa4>)
24051c80:	2200      	movs	r2, #0
24051c82:	639a      	str	r2, [r3, #56]	; 0x38
	hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
24051c84:	4b10      	ldr	r3, [pc, #64]	; (24051cc8 <MX_SPI2_Init+0xa4>)
24051c86:	2200      	movs	r2, #0
24051c88:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi2.Init.TxCRCInitializationPattern =
24051c8a:	4b0f      	ldr	r3, [pc, #60]	; (24051cc8 <MX_SPI2_Init+0xa4>)
24051c8c:	2200      	movs	r2, #0
24051c8e:	641a      	str	r2, [r3, #64]	; 0x40
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi2.Init.RxCRCInitializationPattern =
24051c90:	4b0d      	ldr	r3, [pc, #52]	; (24051cc8 <MX_SPI2_Init+0xa4>)
24051c92:	2200      	movs	r2, #0
24051c94:	645a      	str	r2, [r3, #68]	; 0x44
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
24051c96:	4b0c      	ldr	r3, [pc, #48]	; (24051cc8 <MX_SPI2_Init+0xa4>)
24051c98:	2200      	movs	r2, #0
24051c9a:	649a      	str	r2, [r3, #72]	; 0x48
	hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
24051c9c:	4b0a      	ldr	r3, [pc, #40]	; (24051cc8 <MX_SPI2_Init+0xa4>)
24051c9e:	2200      	movs	r2, #0
24051ca0:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
24051ca2:	4b09      	ldr	r3, [pc, #36]	; (24051cc8 <MX_SPI2_Init+0xa4>)
24051ca4:	2200      	movs	r2, #0
24051ca6:	651a      	str	r2, [r3, #80]	; 0x50
	hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
24051ca8:	4b07      	ldr	r3, [pc, #28]	; (24051cc8 <MX_SPI2_Init+0xa4>)
24051caa:	2200      	movs	r2, #0
24051cac:	655a      	str	r2, [r3, #84]	; 0x54
	hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
24051cae:	4b06      	ldr	r3, [pc, #24]	; (24051cc8 <MX_SPI2_Init+0xa4>)
24051cb0:	2200      	movs	r2, #0
24051cb2:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
24051cb4:	4804      	ldr	r0, [pc, #16]	; (24051cc8 <MX_SPI2_Init+0xa4>)
24051cb6:	f00c facb 	bl	2405e250 <HAL_SPI_Init>
24051cba:	4603      	mov	r3, r0
24051cbc:	2b00      	cmp	r3, #0
24051cbe:	d001      	beq.n	24051cc4 <MX_SPI2_Init+0xa0>
		Error_Handler();
24051cc0:	f000 f916 	bl	24051ef0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
24051cc4:	bf00      	nop
24051cc6:	bd80      	pop	{r7, pc}
24051cc8:	20000230 	.word	0x20000230
24051ccc:	40003800 	.word	0x40003800

24051cd0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
24051cd0:	b580      	push	{r7, lr}
24051cd2:	b082      	sub	sp, #8
24051cd4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
24051cd6:	4b0d      	ldr	r3, [pc, #52]	; (24051d0c <MX_DMA_Init+0x3c>)
24051cd8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
24051cdc:	4a0b      	ldr	r2, [pc, #44]	; (24051d0c <MX_DMA_Init+0x3c>)
24051cde:	f043 0301 	orr.w	r3, r3, #1
24051ce2:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
24051ce6:	4b09      	ldr	r3, [pc, #36]	; (24051d0c <MX_DMA_Init+0x3c>)
24051ce8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
24051cec:	f003 0301 	and.w	r3, r3, #1
24051cf0:	607b      	str	r3, [r7, #4]
24051cf2:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
24051cf4:	2200      	movs	r2, #0
24051cf6:	2100      	movs	r1, #0
24051cf8:	200b      	movs	r0, #11
24051cfa:	f002 fd7e 	bl	240547fa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
24051cfe:	200b      	movs	r0, #11
24051d00:	f002 fd95 	bl	2405482e <HAL_NVIC_EnableIRQ>

}
24051d04:	bf00      	nop
24051d06:	3708      	adds	r7, #8
24051d08:	46bd      	mov	sp, r7
24051d0a:	bd80      	pop	{r7, pc}
24051d0c:	58024400 	.word	0x58024400

24051d10 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
24051d10:	b580      	push	{r7, lr}
24051d12:	b08a      	sub	sp, #40	; 0x28
24051d14:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
24051d16:	f107 0314 	add.w	r3, r7, #20
24051d1a:	2200      	movs	r2, #0
24051d1c:	601a      	str	r2, [r3, #0]
24051d1e:	605a      	str	r2, [r3, #4]
24051d20:	609a      	str	r2, [r3, #8]
24051d22:	60da      	str	r2, [r3, #12]
24051d24:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
24051d26:	4b6c      	ldr	r3, [pc, #432]	; (24051ed8 <MX_GPIO_Init+0x1c8>)
24051d28:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24051d2c:	4a6a      	ldr	r2, [pc, #424]	; (24051ed8 <MX_GPIO_Init+0x1c8>)
24051d2e:	f043 0310 	orr.w	r3, r3, #16
24051d32:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
24051d36:	4b68      	ldr	r3, [pc, #416]	; (24051ed8 <MX_GPIO_Init+0x1c8>)
24051d38:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24051d3c:	f003 0310 	and.w	r3, r3, #16
24051d40:	613b      	str	r3, [r7, #16]
24051d42:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
24051d44:	4b64      	ldr	r3, [pc, #400]	; (24051ed8 <MX_GPIO_Init+0x1c8>)
24051d46:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24051d4a:	4a63      	ldr	r2, [pc, #396]	; (24051ed8 <MX_GPIO_Init+0x1c8>)
24051d4c:	f043 0304 	orr.w	r3, r3, #4
24051d50:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
24051d54:	4b60      	ldr	r3, [pc, #384]	; (24051ed8 <MX_GPIO_Init+0x1c8>)
24051d56:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24051d5a:	f003 0304 	and.w	r3, r3, #4
24051d5e:	60fb      	str	r3, [r7, #12]
24051d60:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
24051d62:	4b5d      	ldr	r3, [pc, #372]	; (24051ed8 <MX_GPIO_Init+0x1c8>)
24051d64:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24051d68:	4a5b      	ldr	r2, [pc, #364]	; (24051ed8 <MX_GPIO_Init+0x1c8>)
24051d6a:	f043 0301 	orr.w	r3, r3, #1
24051d6e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
24051d72:	4b59      	ldr	r3, [pc, #356]	; (24051ed8 <MX_GPIO_Init+0x1c8>)
24051d74:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24051d78:	f003 0301 	and.w	r3, r3, #1
24051d7c:	60bb      	str	r3, [r7, #8]
24051d7e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
24051d80:	4b55      	ldr	r3, [pc, #340]	; (24051ed8 <MX_GPIO_Init+0x1c8>)
24051d82:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24051d86:	4a54      	ldr	r2, [pc, #336]	; (24051ed8 <MX_GPIO_Init+0x1c8>)
24051d88:	f043 0302 	orr.w	r3, r3, #2
24051d8c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
24051d90:	4b51      	ldr	r3, [pc, #324]	; (24051ed8 <MX_GPIO_Init+0x1c8>)
24051d92:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24051d96:	f003 0302 	and.w	r3, r3, #2
24051d9a:	607b      	str	r3, [r7, #4]
24051d9c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
24051d9e:	4b4e      	ldr	r3, [pc, #312]	; (24051ed8 <MX_GPIO_Init+0x1c8>)
24051da0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24051da4:	4a4c      	ldr	r2, [pc, #304]	; (24051ed8 <MX_GPIO_Init+0x1c8>)
24051da6:	f043 0308 	orr.w	r3, r3, #8
24051daa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
24051dae:	4b4a      	ldr	r3, [pc, #296]	; (24051ed8 <MX_GPIO_Init+0x1c8>)
24051db0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24051db4:	f003 0308 	and.w	r3, r3, #8
24051db8:	603b      	str	r3, [r7, #0]
24051dba:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIO_Speaker_enable_GPIO_Port, GPIO_Speaker_enable_Pin,
24051dbc:	2201      	movs	r2, #1
24051dbe:	2108      	movs	r1, #8
24051dc0:	4846      	ldr	r0, [pc, #280]	; (24051edc <MX_GPIO_Init+0x1cc>)
24051dc2:	f006 f831 	bl	24057e28 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
24051dc6:	2200      	movs	r2, #0
24051dc8:	f44f 7180 	mov.w	r1, #256	; 0x100
24051dcc:	4843      	ldr	r0, [pc, #268]	; (24051edc <MX_GPIO_Init+0x1cc>)
24051dce:	f006 f82b 	bl	24057e28 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
24051dd2:	2201      	movs	r2, #1
24051dd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24051dd8:	4841      	ldr	r0, [pc, #260]	; (24051ee0 <MX_GPIO_Init+0x1d0>)
24051dda:	f006 f825 	bl	24057e28 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8 | GPIO_PIN_4, GPIO_PIN_SET);
24051dde:	2201      	movs	r2, #1
24051de0:	f44f 7188 	mov.w	r1, #272	; 0x110
24051de4:	483f      	ldr	r0, [pc, #252]	; (24051ee4 <MX_GPIO_Init+0x1d4>)
24051de6:	f006 f81f 	bl	24057e28 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
24051dea:	2200      	movs	r2, #0
24051dec:	2102      	movs	r1, #2
24051dee:	483d      	ldr	r0, [pc, #244]	; (24051ee4 <MX_GPIO_Init+0x1d4>)
24051df0:	f006 f81a 	bl	24057e28 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : GPIO_Speaker_enable_Pin PE8 */
	GPIO_InitStruct.Pin = GPIO_Speaker_enable_Pin | GPIO_PIN_8;
24051df4:	f44f 7384 	mov.w	r3, #264	; 0x108
24051df8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
24051dfa:	2301      	movs	r3, #1
24051dfc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
24051dfe:	2300      	movs	r3, #0
24051e00:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24051e02:	2300      	movs	r3, #0
24051e04:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24051e06:	f107 0314 	add.w	r3, r7, #20
24051e0a:	4619      	mov	r1, r3
24051e0c:	4833      	ldr	r0, [pc, #204]	; (24051edc <MX_GPIO_Init+0x1cc>)
24051e0e:	f005 fe43 	bl	24057a98 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN_PAUSE_Pin BTN_GAME_Pin BTN_TIME_Pin */
	GPIO_InitStruct.Pin = BTN_PAUSE_Pin | BTN_GAME_Pin | BTN_TIME_Pin;
24051e12:	f242 0322 	movw	r3, #8226	; 0x2022
24051e16:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
24051e18:	2300      	movs	r3, #0
24051e1a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
24051e1c:	2301      	movs	r3, #1
24051e1e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24051e20:	f107 0314 	add.w	r3, r7, #20
24051e24:	4619      	mov	r1, r3
24051e26:	4830      	ldr	r0, [pc, #192]	; (24051ee8 <MX_GPIO_Init+0x1d8>)
24051e28:	f005 fe36 	bl	24057a98 <HAL_GPIO_Init>

	/*Configure GPIO pin : BTN_PWR_Pin */
	GPIO_InitStruct.Pin = BTN_PWR_Pin;
24051e2c:	2301      	movs	r3, #1
24051e2e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
24051e30:	2300      	movs	r3, #0
24051e32:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
24051e34:	2300      	movs	r3, #0
24051e36:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(BTN_PWR_GPIO_Port, &GPIO_InitStruct);
24051e38:	f107 0314 	add.w	r3, r7, #20
24051e3c:	4619      	mov	r1, r3
24051e3e:	482b      	ldr	r0, [pc, #172]	; (24051eec <MX_GPIO_Init+0x1dc>)
24051e40:	f005 fe2a 	bl	24057a98 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
24051e44:	2304      	movs	r3, #4
24051e46:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
24051e48:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
24051e4c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
24051e4e:	2300      	movs	r3, #0
24051e50:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24051e52:	f107 0314 	add.w	r3, r7, #20
24051e56:	4619      	mov	r1, r3
24051e58:	4824      	ldr	r0, [pc, #144]	; (24051eec <MX_GPIO_Init+0x1dc>)
24051e5a:	f005 fe1d 	bl	24057a98 <HAL_GPIO_Init>

	/*Configure GPIO pin : PE7 */
	GPIO_InitStruct.Pin = GPIO_PIN_7;
24051e5e:	2380      	movs	r3, #128	; 0x80
24051e60:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
24051e62:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
24051e66:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
24051e68:	2300      	movs	r3, #0
24051e6a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24051e6c:	f107 0314 	add.w	r3, r7, #20
24051e70:	4619      	mov	r1, r3
24051e72:	481a      	ldr	r0, [pc, #104]	; (24051edc <MX_GPIO_Init+0x1cc>)
24051e74:	f005 fe10 	bl	24057a98 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
24051e78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
24051e7c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
24051e7e:	2301      	movs	r3, #1
24051e80:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
24051e82:	2300      	movs	r3, #0
24051e84:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24051e86:	2300      	movs	r3, #0
24051e88:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24051e8a:	f107 0314 	add.w	r3, r7, #20
24051e8e:	4619      	mov	r1, r3
24051e90:	4813      	ldr	r0, [pc, #76]	; (24051ee0 <MX_GPIO_Init+0x1d0>)
24051e92:	f005 fe01 	bl	24057a98 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD8 PD1 PD4 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_1 | GPIO_PIN_4;
24051e96:	f44f 7389 	mov.w	r3, #274	; 0x112
24051e9a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
24051e9c:	2301      	movs	r3, #1
24051e9e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
24051ea0:	2300      	movs	r3, #0
24051ea2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24051ea4:	2300      	movs	r3, #0
24051ea6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24051ea8:	f107 0314 	add.w	r3, r7, #20
24051eac:	4619      	mov	r1, r3
24051eae:	480d      	ldr	r0, [pc, #52]	; (24051ee4 <MX_GPIO_Init+0x1d4>)
24051eb0:	f005 fdf2 	bl	24057a98 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN_A_Pin BTN_Left_Pin BTN_Down_Pin BTN_Right_Pin
	 BTN_Up_Pin BTN_B_Pin */
	GPIO_InitStruct.Pin = BTN_A_Pin | BTN_Left_Pin | BTN_Down_Pin
24051eb4:	f64c 2321 	movw	r3, #51745	; 0xca21
24051eb8:	617b      	str	r3, [r7, #20]
			| BTN_Right_Pin | BTN_Up_Pin | BTN_B_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
24051eba:	2300      	movs	r3, #0
24051ebc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
24051ebe:	2301      	movs	r3, #1
24051ec0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24051ec2:	f107 0314 	add.w	r3, r7, #20
24051ec6:	4619      	mov	r1, r3
24051ec8:	4806      	ldr	r0, [pc, #24]	; (24051ee4 <MX_GPIO_Init+0x1d4>)
24051eca:	f005 fde5 	bl	24057a98 <HAL_GPIO_Init>

}
24051ece:	bf00      	nop
24051ed0:	3728      	adds	r7, #40	; 0x28
24051ed2:	46bd      	mov	sp, r7
24051ed4:	bd80      	pop	{r7, pc}
24051ed6:	bf00      	nop
24051ed8:	58024400 	.word	0x58024400
24051edc:	58021000 	.word	0x58021000
24051ee0:	58020400 	.word	0x58020400
24051ee4:	58020c00 	.word	0x58020c00
24051ee8:	58020800 	.word	0x58020800
24051eec:	58020000 	.word	0x58020000

24051ef0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
24051ef0:	b480      	push	{r7}
24051ef2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
24051ef4:	b672      	cpsid	i
}
24051ef6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
24051ef8:	e7fe      	b.n	24051ef8 <Error_Handler+0x8>
	...

24051efc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
24051efc:	b480      	push	{r7}
24051efe:	b083      	sub	sp, #12
24051f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
24051f02:	4b0a      	ldr	r3, [pc, #40]	; (24051f2c <HAL_MspInit+0x30>)
24051f04:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
24051f08:	4a08      	ldr	r2, [pc, #32]	; (24051f2c <HAL_MspInit+0x30>)
24051f0a:	f043 0302 	orr.w	r3, r3, #2
24051f0e:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
24051f12:	4b06      	ldr	r3, [pc, #24]	; (24051f2c <HAL_MspInit+0x30>)
24051f14:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
24051f18:	f003 0302 	and.w	r3, r3, #2
24051f1c:	607b      	str	r3, [r7, #4]
24051f1e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
24051f20:	bf00      	nop
24051f22:	370c      	adds	r7, #12
24051f24:	46bd      	mov	sp, r7
24051f26:	f85d 7b04 	ldr.w	r7, [sp], #4
24051f2a:	4770      	bx	lr
24051f2c:	58024400 	.word	0x58024400

24051f30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
24051f30:	b580      	push	{r7, lr}
24051f32:	b08a      	sub	sp, #40	; 0x28
24051f34:	af00      	add	r7, sp, #0
24051f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24051f38:	f107 0314 	add.w	r3, r7, #20
24051f3c:	2200      	movs	r2, #0
24051f3e:	601a      	str	r2, [r3, #0]
24051f40:	605a      	str	r2, [r3, #4]
24051f42:	609a      	str	r2, [r3, #8]
24051f44:	60da      	str	r2, [r3, #12]
24051f46:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
24051f48:	687b      	ldr	r3, [r7, #4]
24051f4a:	681b      	ldr	r3, [r3, #0]
24051f4c:	4a1c      	ldr	r2, [pc, #112]	; (24051fc0 <HAL_ADC_MspInit+0x90>)
24051f4e:	4293      	cmp	r3, r2
24051f50:	d131      	bne.n	24051fb6 <HAL_ADC_MspInit+0x86>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
24051f52:	4b1c      	ldr	r3, [pc, #112]	; (24051fc4 <HAL_ADC_MspInit+0x94>)
24051f54:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
24051f58:	4a1a      	ldr	r2, [pc, #104]	; (24051fc4 <HAL_ADC_MspInit+0x94>)
24051f5a:	f043 0320 	orr.w	r3, r3, #32
24051f5e:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
24051f62:	4b18      	ldr	r3, [pc, #96]	; (24051fc4 <HAL_ADC_MspInit+0x94>)
24051f64:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
24051f68:	f003 0320 	and.w	r3, r3, #32
24051f6c:	613b      	str	r3, [r7, #16]
24051f6e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
24051f70:	4b14      	ldr	r3, [pc, #80]	; (24051fc4 <HAL_ADC_MspInit+0x94>)
24051f72:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24051f76:	4a13      	ldr	r2, [pc, #76]	; (24051fc4 <HAL_ADC_MspInit+0x94>)
24051f78:	f043 0304 	orr.w	r3, r3, #4
24051f7c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
24051f80:	4b10      	ldr	r3, [pc, #64]	; (24051fc4 <HAL_ADC_MspInit+0x94>)
24051f82:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24051f86:	f003 0304 	and.w	r3, r3, #4
24051f8a:	60fb      	str	r3, [r7, #12]
24051f8c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
24051f8e:	2310      	movs	r3, #16
24051f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
24051f92:	2303      	movs	r3, #3
24051f94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24051f96:	2300      	movs	r3, #0
24051f98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24051f9a:	f107 0314 	add.w	r3, r7, #20
24051f9e:	4619      	mov	r1, r3
24051fa0:	4809      	ldr	r0, [pc, #36]	; (24051fc8 <HAL_ADC_MspInit+0x98>)
24051fa2:	f005 fd79 	bl	24057a98 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
24051fa6:	2200      	movs	r2, #0
24051fa8:	2100      	movs	r1, #0
24051faa:	2012      	movs	r0, #18
24051fac:	f002 fc25 	bl	240547fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
24051fb0:	2012      	movs	r0, #18
24051fb2:	f002 fc3c 	bl	2405482e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
24051fb6:	bf00      	nop
24051fb8:	3728      	adds	r7, #40	; 0x28
24051fba:	46bd      	mov	sp, r7
24051fbc:	bd80      	pop	{r7, pc}
24051fbe:	bf00      	nop
24051fc0:	40022000 	.word	0x40022000
24051fc4:	58024400 	.word	0x58024400
24051fc8:	58020800 	.word	0x58020800

24051fcc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
24051fcc:	b580      	push	{r7, lr}
24051fce:	b08c      	sub	sp, #48	; 0x30
24051fd0:	af00      	add	r7, sp, #0
24051fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24051fd4:	f107 031c 	add.w	r3, r7, #28
24051fd8:	2200      	movs	r2, #0
24051fda:	601a      	str	r2, [r3, #0]
24051fdc:	605a      	str	r2, [r3, #4]
24051fde:	609a      	str	r2, [r3, #8]
24051fe0:	60da      	str	r2, [r3, #12]
24051fe2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
24051fe4:	687b      	ldr	r3, [r7, #4]
24051fe6:	681b      	ldr	r3, [r3, #0]
24051fe8:	4a30      	ldr	r2, [pc, #192]	; (240520ac <HAL_DAC_MspInit+0xe0>)
24051fea:	4293      	cmp	r3, r2
24051fec:	d12a      	bne.n	24052044 <HAL_DAC_MspInit+0x78>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
24051fee:	4b30      	ldr	r3, [pc, #192]	; (240520b0 <HAL_DAC_MspInit+0xe4>)
24051ff0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
24051ff4:	4a2e      	ldr	r2, [pc, #184]	; (240520b0 <HAL_DAC_MspInit+0xe4>)
24051ff6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
24051ffa:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
24051ffe:	4b2c      	ldr	r3, [pc, #176]	; (240520b0 <HAL_DAC_MspInit+0xe4>)
24052000:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
24052004:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
24052008:	61bb      	str	r3, [r7, #24]
2405200a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
2405200c:	4b28      	ldr	r3, [pc, #160]	; (240520b0 <HAL_DAC_MspInit+0xe4>)
2405200e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24052012:	4a27      	ldr	r2, [pc, #156]	; (240520b0 <HAL_DAC_MspInit+0xe4>)
24052014:	f043 0301 	orr.w	r3, r3, #1
24052018:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
2405201c:	4b24      	ldr	r3, [pc, #144]	; (240520b0 <HAL_DAC_MspInit+0xe4>)
2405201e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24052022:	f003 0301 	and.w	r3, r3, #1
24052026:	617b      	str	r3, [r7, #20]
24052028:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
2405202a:	2330      	movs	r3, #48	; 0x30
2405202c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
2405202e:	2303      	movs	r3, #3
24052030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24052032:	2300      	movs	r3, #0
24052034:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24052036:	f107 031c 	add.w	r3, r7, #28
2405203a:	4619      	mov	r1, r3
2405203c:	481d      	ldr	r0, [pc, #116]	; (240520b4 <HAL_DAC_MspInit+0xe8>)
2405203e:	f005 fd2b 	bl	24057a98 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }

}
24052042:	e02e      	b.n	240520a2 <HAL_DAC_MspInit+0xd6>
  else if(hdac->Instance==DAC2)
24052044:	687b      	ldr	r3, [r7, #4]
24052046:	681b      	ldr	r3, [r3, #0]
24052048:	4a1b      	ldr	r2, [pc, #108]	; (240520b8 <HAL_DAC_MspInit+0xec>)
2405204a:	4293      	cmp	r3, r2
2405204c:	d129      	bne.n	240520a2 <HAL_DAC_MspInit+0xd6>
    __HAL_RCC_DAC2_CLK_ENABLE();
2405204e:	4b18      	ldr	r3, [pc, #96]	; (240520b0 <HAL_DAC_MspInit+0xe4>)
24052050:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
24052054:	4a16      	ldr	r2, [pc, #88]	; (240520b0 <HAL_DAC_MspInit+0xe4>)
24052056:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
2405205a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
2405205e:	4b14      	ldr	r3, [pc, #80]	; (240520b0 <HAL_DAC_MspInit+0xe4>)
24052060:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
24052064:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
24052068:	613b      	str	r3, [r7, #16]
2405206a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
2405206c:	4b10      	ldr	r3, [pc, #64]	; (240520b0 <HAL_DAC_MspInit+0xe4>)
2405206e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24052072:	4a0f      	ldr	r2, [pc, #60]	; (240520b0 <HAL_DAC_MspInit+0xe4>)
24052074:	f043 0301 	orr.w	r3, r3, #1
24052078:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
2405207c:	4b0c      	ldr	r3, [pc, #48]	; (240520b0 <HAL_DAC_MspInit+0xe4>)
2405207e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24052082:	f003 0301 	and.w	r3, r3, #1
24052086:	60fb      	str	r3, [r7, #12]
24052088:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
2405208a:	2340      	movs	r3, #64	; 0x40
2405208c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
2405208e:	2303      	movs	r3, #3
24052090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24052092:	2300      	movs	r3, #0
24052094:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24052096:	f107 031c 	add.w	r3, r7, #28
2405209a:	4619      	mov	r1, r3
2405209c:	4805      	ldr	r0, [pc, #20]	; (240520b4 <HAL_DAC_MspInit+0xe8>)
2405209e:	f005 fcfb 	bl	24057a98 <HAL_GPIO_Init>
}
240520a2:	bf00      	nop
240520a4:	3730      	adds	r7, #48	; 0x30
240520a6:	46bd      	mov	sp, r7
240520a8:	bd80      	pop	{r7, pc}
240520aa:	bf00      	nop
240520ac:	40007400 	.word	0x40007400
240520b0:	58024400 	.word	0x58024400
240520b4:	58020000 	.word	0x58020000
240520b8:	58003400 	.word	0x58003400

240520bc <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
240520bc:	b480      	push	{r7}
240520be:	b085      	sub	sp, #20
240520c0:	af00      	add	r7, sp, #0
240520c2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
240520c4:	687b      	ldr	r3, [r7, #4]
240520c6:	681b      	ldr	r3, [r3, #0]
240520c8:	4a0b      	ldr	r2, [pc, #44]	; (240520f8 <HAL_DMA2D_MspInit+0x3c>)
240520ca:	4293      	cmp	r3, r2
240520cc:	d10e      	bne.n	240520ec <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
240520ce:	4b0b      	ldr	r3, [pc, #44]	; (240520fc <HAL_DMA2D_MspInit+0x40>)
240520d0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
240520d4:	4a09      	ldr	r2, [pc, #36]	; (240520fc <HAL_DMA2D_MspInit+0x40>)
240520d6:	f043 0310 	orr.w	r3, r3, #16
240520da:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
240520de:	4b07      	ldr	r3, [pc, #28]	; (240520fc <HAL_DMA2D_MspInit+0x40>)
240520e0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
240520e4:	f003 0310 	and.w	r3, r3, #16
240520e8:	60fb      	str	r3, [r7, #12]
240520ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
240520ec:	bf00      	nop
240520ee:	3714      	adds	r7, #20
240520f0:	46bd      	mov	sp, r7
240520f2:	f85d 7b04 	ldr.w	r7, [sp], #4
240520f6:	4770      	bx	lr
240520f8:	52001000 	.word	0x52001000
240520fc:	58024400 	.word	0x58024400

24052100 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
24052100:	b580      	push	{r7, lr}
24052102:	b0bc      	sub	sp, #240	; 0xf0
24052104:	af00      	add	r7, sp, #0
24052106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24052108:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
2405210c:	2200      	movs	r2, #0
2405210e:	601a      	str	r2, [r3, #0]
24052110:	605a      	str	r2, [r3, #4]
24052112:	609a      	str	r2, [r3, #8]
24052114:	60da      	str	r2, [r3, #12]
24052116:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24052118:	f107 0324 	add.w	r3, r7, #36	; 0x24
2405211c:	22b8      	movs	r2, #184	; 0xb8
2405211e:	2100      	movs	r1, #0
24052120:	4618      	mov	r0, r3
24052122:	f00c fcaf 	bl	2405ea84 <memset>
  if(hltdc->Instance==LTDC)
24052126:	687b      	ldr	r3, [r7, #4]
24052128:	681b      	ldr	r3, [r3, #0]
2405212a:	4abb      	ldr	r2, [pc, #748]	; (24052418 <HAL_LTDC_MspInit+0x318>)
2405212c:	4293      	cmp	r3, r2
2405212e:	f040 816e 	bne.w	2405240e <HAL_LTDC_MspInit+0x30e>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
24052132:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
24052136:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL3.PLL3M = 4;
24052138:	2304      	movs	r3, #4
2405213a:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 9;
2405213c:	2309      	movs	r3, #9
2405213e:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
24052140:	2302      	movs	r3, #2
24052142:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
24052144:	2302      	movs	r3, #2
24052146:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 24;
24052148:	2318      	movs	r3, #24
2405214a:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
2405214c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
24052150:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
24052152:	2300      	movs	r3, #0
24052154:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
24052156:	2300      	movs	r3, #0
24052158:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
2405215a:	f107 0324 	add.w	r3, r7, #36	; 0x24
2405215e:	4618      	mov	r0, r3
24052160:	f008 fd12 	bl	2405ab88 <HAL_RCCEx_PeriphCLKConfig>
24052164:	4603      	mov	r3, r0
24052166:	2b00      	cmp	r3, #0
24052168:	d001      	beq.n	2405216e <HAL_LTDC_MspInit+0x6e>
    {
      Error_Handler();
2405216a:	f7ff fec1 	bl	24051ef0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
2405216e:	4bab      	ldr	r3, [pc, #684]	; (2405241c <HAL_LTDC_MspInit+0x31c>)
24052170:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
24052174:	4aa9      	ldr	r2, [pc, #676]	; (2405241c <HAL_LTDC_MspInit+0x31c>)
24052176:	f043 0308 	orr.w	r3, r3, #8
2405217a:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
2405217e:	4ba7      	ldr	r3, [pc, #668]	; (2405241c <HAL_LTDC_MspInit+0x31c>)
24052180:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
24052184:	f003 0308 	and.w	r3, r3, #8
24052188:	623b      	str	r3, [r7, #32]
2405218a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
2405218c:	4ba3      	ldr	r3, [pc, #652]	; (2405241c <HAL_LTDC_MspInit+0x31c>)
2405218e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24052192:	4aa2      	ldr	r2, [pc, #648]	; (2405241c <HAL_LTDC_MspInit+0x31c>)
24052194:	f043 0304 	orr.w	r3, r3, #4
24052198:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
2405219c:	4b9f      	ldr	r3, [pc, #636]	; (2405241c <HAL_LTDC_MspInit+0x31c>)
2405219e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
240521a2:	f003 0304 	and.w	r3, r3, #4
240521a6:	61fb      	str	r3, [r7, #28]
240521a8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
240521aa:	4b9c      	ldr	r3, [pc, #624]	; (2405241c <HAL_LTDC_MspInit+0x31c>)
240521ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
240521b0:	4a9a      	ldr	r2, [pc, #616]	; (2405241c <HAL_LTDC_MspInit+0x31c>)
240521b2:	f043 0301 	orr.w	r3, r3, #1
240521b6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
240521ba:	4b98      	ldr	r3, [pc, #608]	; (2405241c <HAL_LTDC_MspInit+0x31c>)
240521bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
240521c0:	f003 0301 	and.w	r3, r3, #1
240521c4:	61bb      	str	r3, [r7, #24]
240521c6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
240521c8:	4b94      	ldr	r3, [pc, #592]	; (2405241c <HAL_LTDC_MspInit+0x31c>)
240521ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
240521ce:	4a93      	ldr	r2, [pc, #588]	; (2405241c <HAL_LTDC_MspInit+0x31c>)
240521d0:	f043 0302 	orr.w	r3, r3, #2
240521d4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
240521d8:	4b90      	ldr	r3, [pc, #576]	; (2405241c <HAL_LTDC_MspInit+0x31c>)
240521da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
240521de:	f003 0302 	and.w	r3, r3, #2
240521e2:	617b      	str	r3, [r7, #20]
240521e4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
240521e6:	4b8d      	ldr	r3, [pc, #564]	; (2405241c <HAL_LTDC_MspInit+0x31c>)
240521e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
240521ec:	4a8b      	ldr	r2, [pc, #556]	; (2405241c <HAL_LTDC_MspInit+0x31c>)
240521ee:	f043 0310 	orr.w	r3, r3, #16
240521f2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
240521f6:	4b89      	ldr	r3, [pc, #548]	; (2405241c <HAL_LTDC_MspInit+0x31c>)
240521f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
240521fc:	f003 0310 	and.w	r3, r3, #16
24052200:	613b      	str	r3, [r7, #16]
24052202:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
24052204:	4b85      	ldr	r3, [pc, #532]	; (2405241c <HAL_LTDC_MspInit+0x31c>)
24052206:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
2405220a:	4a84      	ldr	r2, [pc, #528]	; (2405241c <HAL_LTDC_MspInit+0x31c>)
2405220c:	f043 0308 	orr.w	r3, r3, #8
24052210:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
24052214:	4b81      	ldr	r3, [pc, #516]	; (2405241c <HAL_LTDC_MspInit+0x31c>)
24052216:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
2405221a:	f003 0308 	and.w	r3, r3, #8
2405221e:	60fb      	str	r3, [r7, #12]
24052220:	68fb      	ldr	r3, [r7, #12]
    PD3     ------> LTDC_G7
    PD6     ------> LTDC_B2
    PB5     ------> LTDC_B5
    PB8     ------> LTDC_B6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
24052222:	2301      	movs	r3, #1
24052224:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24052228:	2302      	movs	r3, #2
2405222a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2405222e:	2300      	movs	r3, #0
24052230:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24052234:	2300      	movs	r3, #0
24052236:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
2405223a:	230b      	movs	r3, #11
2405223c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24052240:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
24052244:	4619      	mov	r1, r3
24052246:	4876      	ldr	r0, [pc, #472]	; (24052420 <HAL_LTDC_MspInit+0x320>)
24052248:	f005 fc26 	bl	24057a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
2405224c:	f44f 6338 	mov.w	r3, #2944	; 0xb80
24052250:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24052254:	2302      	movs	r3, #2
24052256:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2405225a:	2300      	movs	r3, #0
2405225c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24052260:	2300      	movs	r3, #0
24052262:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
24052266:	230e      	movs	r3, #14
24052268:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
2405226c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
24052270:	4619      	mov	r1, r3
24052272:	486c      	ldr	r0, [pc, #432]	; (24052424 <HAL_LTDC_MspInit+0x324>)
24052274:	f005 fc10 	bl	24057a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
24052278:	2301      	movs	r3, #1
2405227a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2405227e:	2302      	movs	r3, #2
24052280:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24052284:	2300      	movs	r3, #0
24052286:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
2405228a:	2300      	movs	r3, #0
2405228c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
24052290:	2309      	movs	r3, #9
24052292:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24052296:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
2405229a:	4619      	mov	r1, r3
2405229c:	4862      	ldr	r0, [pc, #392]	; (24052428 <HAL_LTDC_MspInit+0x328>)
2405229e:	f005 fbfb 	bl	24057a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
240522a2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
240522a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240522aa:	2302      	movs	r3, #2
240522ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
240522b0:	2300      	movs	r3, #0
240522b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
240522b6:	2300      	movs	r3, #0
240522b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
240522bc:	230e      	movs	r3, #14
240522be:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
240522c2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
240522c6:	4619      	mov	r1, r3
240522c8:	4858      	ldr	r0, [pc, #352]	; (2405242c <HAL_LTDC_MspInit+0x32c>)
240522ca:	f005 fbe5 	bl	24057a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_8;
240522ce:	f44f 439a 	mov.w	r3, #19712	; 0x4d00
240522d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240522d6:	2302      	movs	r3, #2
240522d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
240522dc:	2300      	movs	r3, #0
240522de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
240522e2:	2300      	movs	r3, #0
240522e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
240522e8:	230e      	movs	r3, #14
240522ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240522ee:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
240522f2:	4619      	mov	r1, r3
240522f4:	484c      	ldr	r0, [pc, #304]	; (24052428 <HAL_LTDC_MspInit+0x328>)
240522f6:	f005 fbcf 	bl	24057a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_6;
240522fa:	f44f 6389 	mov.w	r3, #1096	; 0x448
240522fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24052302:	2302      	movs	r3, #2
24052304:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24052308:	2300      	movs	r3, #0
2405230a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
2405230e:	2300      	movs	r3, #0
24052310:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
24052314:	230e      	movs	r3, #14
24052316:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
2405231a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
2405231e:	4619      	mov	r1, r3
24052320:	4843      	ldr	r0, [pc, #268]	; (24052430 <HAL_LTDC_MspInit+0x330>)
24052322:	f005 fbb9 	bl	24057a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
24052326:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
2405232a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2405232e:	2302      	movs	r3, #2
24052330:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24052334:	2300      	movs	r3, #0
24052336:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
2405233a:	2300      	movs	r3, #0
2405233c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
24052340:	230e      	movs	r3, #14
24052342:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24052346:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
2405234a:	4619      	mov	r1, r3
2405234c:	4834      	ldr	r0, [pc, #208]	; (24052420 <HAL_LTDC_MspInit+0x320>)
2405234e:	f005 fba3 	bl	24057a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
24052352:	f44f 7300 	mov.w	r3, #512	; 0x200
24052356:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2405235a:	2302      	movs	r3, #2
2405235c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24052360:	2300      	movs	r3, #0
24052362:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24052366:	2300      	movs	r3, #0
24052368:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_LTDC;
2405236c:	230a      	movs	r3, #10
2405236e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24052372:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
24052376:	4619      	mov	r1, r3
24052378:	4829      	ldr	r0, [pc, #164]	; (24052420 <HAL_LTDC_MspInit+0x320>)
2405237a:	f005 fb8d 	bl	24057a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
2405237e:	f44f 6380 	mov.w	r3, #1024	; 0x400
24052382:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24052386:	2302      	movs	r3, #2
24052388:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2405238c:	2300      	movs	r3, #0
2405238e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24052392:	2300      	movs	r3, #0
24052394:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_LTDC;
24052398:	230c      	movs	r3, #12
2405239a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
2405239e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
240523a2:	4619      	mov	r1, r3
240523a4:	481f      	ldr	r0, [pc, #124]	; (24052424 <HAL_LTDC_MspInit+0x324>)
240523a6:	f005 fb77 	bl	24057a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
240523aa:	2304      	movs	r3, #4
240523ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240523b0:	2302      	movs	r3, #2
240523b2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
240523b6:	2300      	movs	r3, #0
240523b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
240523bc:	2300      	movs	r3, #0
240523be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
240523c2:	2309      	movs	r3, #9
240523c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
240523c8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
240523cc:	4619      	mov	r1, r3
240523ce:	4818      	ldr	r0, [pc, #96]	; (24052430 <HAL_LTDC_MspInit+0x330>)
240523d0:	f005 fb62 	bl	24057a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
240523d4:	2320      	movs	r3, #32
240523d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240523da:	2302      	movs	r3, #2
240523dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
240523e0:	2300      	movs	r3, #0
240523e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
240523e6:	2300      	movs	r3, #0
240523e8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
240523ec:	230b      	movs	r3, #11
240523ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240523f2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
240523f6:	4619      	mov	r1, r3
240523f8:	480b      	ldr	r0, [pc, #44]	; (24052428 <HAL_LTDC_MspInit+0x328>)
240523fa:	f005 fb4d 	bl	24057a98 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
240523fe:	2200      	movs	r2, #0
24052400:	2100      	movs	r1, #0
24052402:	2058      	movs	r0, #88	; 0x58
24052404:	f002 f9f9 	bl	240547fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
24052408:	2058      	movs	r0, #88	; 0x58
2405240a:	f002 fa10 	bl	2405482e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
2405240e:	bf00      	nop
24052410:	37f0      	adds	r7, #240	; 0xf0
24052412:	46bd      	mov	sp, r7
24052414:	bd80      	pop	{r7, pc}
24052416:	bf00      	nop
24052418:	50001000 	.word	0x50001000
2405241c:	58024400 	.word	0x58024400
24052420:	58020800 	.word	0x58020800
24052424:	58020000 	.word	0x58020000
24052428:	58020400 	.word	0x58020400
2405242c:	58021000 	.word	0x58021000
24052430:	58020c00 	.word	0x58020c00

24052434 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
24052434:	b580      	push	{r7, lr}
24052436:	b0bc      	sub	sp, #240	; 0xf0
24052438:	af00      	add	r7, sp, #0
2405243a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
2405243c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
24052440:	2200      	movs	r2, #0
24052442:	601a      	str	r2, [r3, #0]
24052444:	605a      	str	r2, [r3, #4]
24052446:	609a      	str	r2, [r3, #8]
24052448:	60da      	str	r2, [r3, #12]
2405244a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
2405244c:	f107 0324 	add.w	r3, r7, #36	; 0x24
24052450:	22b8      	movs	r2, #184	; 0xb8
24052452:	2100      	movs	r1, #0
24052454:	4618      	mov	r0, r3
24052456:	f00c fb15 	bl	2405ea84 <memset>
  if(hospi->Instance==OCTOSPI1)
2405245a:	687b      	ldr	r3, [r7, #4]
2405245c:	681b      	ldr	r3, [r3, #0]
2405245e:	4a78      	ldr	r2, [pc, #480]	; (24052640 <HAL_OSPI_MspInit+0x20c>)
24052460:	4293      	cmp	r3, r2
24052462:	f040 80e9 	bne.w	24052638 <HAL_OSPI_MspInit+0x204>
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
24052466:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2405246a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_CLKP;
2405246c:	2330      	movs	r3, #48	; 0x30
2405246e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24052470:	f107 0324 	add.w	r3, r7, #36	; 0x24
24052474:	4618      	mov	r0, r3
24052476:	f008 fb87 	bl	2405ab88 <HAL_RCCEx_PeriphCLKConfig>
2405247a:	4603      	mov	r3, r0
2405247c:	2b00      	cmp	r3, #0
2405247e:	d001      	beq.n	24052484 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
24052480:	f7ff fd36 	bl	24051ef0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
24052484:	4b6f      	ldr	r3, [pc, #444]	; (24052644 <HAL_OSPI_MspInit+0x210>)
24052486:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
2405248a:	4a6e      	ldr	r2, [pc, #440]	; (24052644 <HAL_OSPI_MspInit+0x210>)
2405248c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
24052490:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
24052494:	4b6b      	ldr	r3, [pc, #428]	; (24052644 <HAL_OSPI_MspInit+0x210>)
24052496:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
2405249a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
2405249e:	623b      	str	r3, [r7, #32]
240524a0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_OSPI1_CLK_ENABLE();
240524a2:	4b68      	ldr	r3, [pc, #416]	; (24052644 <HAL_OSPI_MspInit+0x210>)
240524a4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
240524a8:	4a66      	ldr	r2, [pc, #408]	; (24052644 <HAL_OSPI_MspInit+0x210>)
240524aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
240524ae:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
240524b2:	4b64      	ldr	r3, [pc, #400]	; (24052644 <HAL_OSPI_MspInit+0x210>)
240524b4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
240524b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
240524bc:	61fb      	str	r3, [r7, #28]
240524be:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
240524c0:	4b60      	ldr	r3, [pc, #384]	; (24052644 <HAL_OSPI_MspInit+0x210>)
240524c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
240524c6:	4a5f      	ldr	r2, [pc, #380]	; (24052644 <HAL_OSPI_MspInit+0x210>)
240524c8:	f043 0310 	orr.w	r3, r3, #16
240524cc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
240524d0:	4b5c      	ldr	r3, [pc, #368]	; (24052644 <HAL_OSPI_MspInit+0x210>)
240524d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
240524d6:	f003 0310 	and.w	r3, r3, #16
240524da:	61bb      	str	r3, [r7, #24]
240524dc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
240524de:	4b59      	ldr	r3, [pc, #356]	; (24052644 <HAL_OSPI_MspInit+0x210>)
240524e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
240524e4:	4a57      	ldr	r2, [pc, #348]	; (24052644 <HAL_OSPI_MspInit+0x210>)
240524e6:	f043 0301 	orr.w	r3, r3, #1
240524ea:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
240524ee:	4b55      	ldr	r3, [pc, #340]	; (24052644 <HAL_OSPI_MspInit+0x210>)
240524f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
240524f4:	f003 0301 	and.w	r3, r3, #1
240524f8:	617b      	str	r3, [r7, #20]
240524fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
240524fc:	4b51      	ldr	r3, [pc, #324]	; (24052644 <HAL_OSPI_MspInit+0x210>)
240524fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24052502:	4a50      	ldr	r2, [pc, #320]	; (24052644 <HAL_OSPI_MspInit+0x210>)
24052504:	f043 0302 	orr.w	r3, r3, #2
24052508:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
2405250c:	4b4d      	ldr	r3, [pc, #308]	; (24052644 <HAL_OSPI_MspInit+0x210>)
2405250e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24052512:	f003 0302 	and.w	r3, r3, #2
24052516:	613b      	str	r3, [r7, #16]
24052518:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
2405251a:	4b4a      	ldr	r3, [pc, #296]	; (24052644 <HAL_OSPI_MspInit+0x210>)
2405251c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24052520:	4a48      	ldr	r2, [pc, #288]	; (24052644 <HAL_OSPI_MspInit+0x210>)
24052522:	f043 0308 	orr.w	r3, r3, #8
24052526:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
2405252a:	4b46      	ldr	r3, [pc, #280]	; (24052644 <HAL_OSPI_MspInit+0x210>)
2405252c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
24052530:	f003 0308 	and.w	r3, r3, #8
24052534:	60fb      	str	r3, [r7, #12]
24052536:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> OCTOSPIM_P1_IO0
    PB2     ------> OCTOSPIM_P1_CLK
    PE11     ------> OCTOSPIM_P1_NCS
    PD12     ------> OCTOSPIM_P1_IO1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
24052538:	2304      	movs	r3, #4
2405253a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2405253e:	2302      	movs	r3, #2
24052540:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24052544:	2300      	movs	r3, #0
24052546:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
2405254a:	2303      	movs	r3, #3
2405254c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
24052550:	2309      	movs	r3, #9
24052552:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24052556:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
2405255a:	4619      	mov	r1, r3
2405255c:	483a      	ldr	r0, [pc, #232]	; (24052648 <HAL_OSPI_MspInit+0x214>)
2405255e:	f005 fa9b 	bl	24057a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
24052562:	2302      	movs	r3, #2
24052564:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24052568:	2302      	movs	r3, #2
2405256a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2405256e:	2300      	movs	r3, #0
24052570:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24052574:	2303      	movs	r3, #3
24052576:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
2405257a:	2309      	movs	r3, #9
2405257c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24052580:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
24052584:	4619      	mov	r1, r3
24052586:	4831      	ldr	r0, [pc, #196]	; (2405264c <HAL_OSPI_MspInit+0x218>)
24052588:	f005 fa86 	bl	24057a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
2405258c:	2302      	movs	r3, #2
2405258e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24052592:	2302      	movs	r3, #2
24052594:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24052598:	2300      	movs	r3, #0
2405259a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
2405259e:	2303      	movs	r3, #3
240525a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
240525a4:	230b      	movs	r3, #11
240525a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240525aa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
240525ae:	4619      	mov	r1, r3
240525b0:	4827      	ldr	r0, [pc, #156]	; (24052650 <HAL_OSPI_MspInit+0x21c>)
240525b2:	f005 fa71 	bl	24057a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
240525b6:	2304      	movs	r3, #4
240525b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240525bc:	2302      	movs	r3, #2
240525be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
240525c2:	2300      	movs	r3, #0
240525c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
240525c8:	2303      	movs	r3, #3
240525ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
240525ce:	2309      	movs	r3, #9
240525d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240525d4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
240525d8:	4619      	mov	r1, r3
240525da:	481d      	ldr	r0, [pc, #116]	; (24052650 <HAL_OSPI_MspInit+0x21c>)
240525dc:	f005 fa5c 	bl	24057a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
240525e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
240525e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240525e8:	2302      	movs	r3, #2
240525ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
240525ee:	2300      	movs	r3, #0
240525f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
240525f4:	2303      	movs	r3, #3
240525f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
240525fa:	230b      	movs	r3, #11
240525fc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24052600:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
24052604:	4619      	mov	r1, r3
24052606:	4810      	ldr	r0, [pc, #64]	; (24052648 <HAL_OSPI_MspInit+0x214>)
24052608:	f005 fa46 	bl	24057a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
2405260c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
24052610:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24052614:	2302      	movs	r3, #2
24052616:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2405261a:	2300      	movs	r3, #0
2405261c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24052620:	2303      	movs	r3, #3
24052622:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
24052626:	2309      	movs	r3, #9
24052628:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
2405262c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
24052630:	4619      	mov	r1, r3
24052632:	4808      	ldr	r0, [pc, #32]	; (24052654 <HAL_OSPI_MspInit+0x220>)
24052634:	f005 fa30 	bl	24057a98 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
24052638:	bf00      	nop
2405263a:	37f0      	adds	r7, #240	; 0xf0
2405263c:	46bd      	mov	sp, r7
2405263e:	bd80      	pop	{r7, pc}
24052640:	52005000 	.word	0x52005000
24052644:	58024400 	.word	0x58024400
24052648:	58021000 	.word	0x58021000
2405264c:	58020000 	.word	0x58020000
24052650:	58020400 	.word	0x58020400
24052654:	58020c00 	.word	0x58020c00

24052658 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
24052658:	b580      	push	{r7, lr}
2405265a:	b0b0      	sub	sp, #192	; 0xc0
2405265c:	af00      	add	r7, sp, #0
2405265e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24052660:	f107 0308 	add.w	r3, r7, #8
24052664:	22b8      	movs	r2, #184	; 0xb8
24052666:	2100      	movs	r1, #0
24052668:	4618      	mov	r0, r3
2405266a:	f00c fa0b 	bl	2405ea84 <memset>
  if(hrtc->Instance==RTC)
2405266e:	687b      	ldr	r3, [r7, #4]
24052670:	681b      	ldr	r3, [r3, #0]
24052672:	4a0f      	ldr	r2, [pc, #60]	; (240526b0 <HAL_RTC_MspInit+0x58>)
24052674:	4293      	cmp	r3, r2
24052676:	d116      	bne.n	240526a6 <HAL_RTC_MspInit+0x4e>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
24052678:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2405267c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
2405267e:	f44f 7380 	mov.w	r3, #256	; 0x100
24052682:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24052686:	f107 0308 	add.w	r3, r7, #8
2405268a:	4618      	mov	r0, r3
2405268c:	f008 fa7c 	bl	2405ab88 <HAL_RCCEx_PeriphCLKConfig>
24052690:	4603      	mov	r3, r0
24052692:	2b00      	cmp	r3, #0
24052694:	d001      	beq.n	2405269a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
24052696:	f7ff fc2b 	bl	24051ef0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
2405269a:	4b06      	ldr	r3, [pc, #24]	; (240526b4 <HAL_RTC_MspInit+0x5c>)
2405269c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405269e:	4a05      	ldr	r2, [pc, #20]	; (240526b4 <HAL_RTC_MspInit+0x5c>)
240526a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
240526a4:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
240526a6:	bf00      	nop
240526a8:	37c0      	adds	r7, #192	; 0xc0
240526aa:	46bd      	mov	sp, r7
240526ac:	bd80      	pop	{r7, pc}
240526ae:	bf00      	nop
240526b0:	58004000 	.word	0x58004000
240526b4:	58024400 	.word	0x58024400

240526b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
240526b8:	b580      	push	{r7, lr}
240526ba:	b0b8      	sub	sp, #224	; 0xe0
240526bc:	af00      	add	r7, sp, #0
240526be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
240526c0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
240526c4:	2200      	movs	r2, #0
240526c6:	601a      	str	r2, [r3, #0]
240526c8:	605a      	str	r2, [r3, #4]
240526ca:	609a      	str	r2, [r3, #8]
240526cc:	60da      	str	r2, [r3, #12]
240526ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
240526d0:	f107 0314 	add.w	r3, r7, #20
240526d4:	22b8      	movs	r2, #184	; 0xb8
240526d6:	2100      	movs	r1, #0
240526d8:	4618      	mov	r0, r3
240526da:	f00c f9d3 	bl	2405ea84 <memset>
  if(hspi->Instance==SPI2)
240526de:	687b      	ldr	r3, [r7, #4]
240526e0:	681b      	ldr	r3, [r3, #0]
240526e2:	4a25      	ldr	r2, [pc, #148]	; (24052778 <HAL_SPI_MspInit+0xc0>)
240526e4:	4293      	cmp	r3, r2
240526e6:	d143      	bne.n	24052770 <HAL_SPI_MspInit+0xb8>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
240526e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
240526ec:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
240526ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
240526f2:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
240526f4:	f107 0314 	add.w	r3, r7, #20
240526f8:	4618      	mov	r0, r3
240526fa:	f008 fa45 	bl	2405ab88 <HAL_RCCEx_PeriphCLKConfig>
240526fe:	4603      	mov	r3, r0
24052700:	2b00      	cmp	r3, #0
24052702:	d001      	beq.n	24052708 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
24052704:	f7ff fbf4 	bl	24051ef0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
24052708:	4b1c      	ldr	r3, [pc, #112]	; (2405277c <HAL_SPI_MspInit+0xc4>)
2405270a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
2405270e:	4a1b      	ldr	r2, [pc, #108]	; (2405277c <HAL_SPI_MspInit+0xc4>)
24052710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
24052714:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
24052718:	4b18      	ldr	r3, [pc, #96]	; (2405277c <HAL_SPI_MspInit+0xc4>)
2405271a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
2405271e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
24052722:	613b      	str	r3, [r7, #16]
24052724:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
24052726:	4b15      	ldr	r3, [pc, #84]	; (2405277c <HAL_SPI_MspInit+0xc4>)
24052728:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
2405272c:	4a13      	ldr	r2, [pc, #76]	; (2405277c <HAL_SPI_MspInit+0xc4>)
2405272e:	f043 0302 	orr.w	r3, r3, #2
24052732:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
24052736:	4b11      	ldr	r3, [pc, #68]	; (2405277c <HAL_SPI_MspInit+0xc4>)
24052738:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
2405273c:	f003 0302 	and.w	r3, r3, #2
24052740:	60fb      	str	r3, [r7, #12]
24052742:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
24052744:	f44f 4320 	mov.w	r3, #40960	; 0xa000
24052748:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2405274c:	2302      	movs	r3, #2
2405274e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24052752:	2300      	movs	r3, #0
24052754:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24052758:	2300      	movs	r3, #0
2405275a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
2405275e:	2305      	movs	r3, #5
24052760:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24052764:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
24052768:	4619      	mov	r1, r3
2405276a:	4805      	ldr	r0, [pc, #20]	; (24052780 <HAL_SPI_MspInit+0xc8>)
2405276c:	f005 f994 	bl	24057a98 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
24052770:	bf00      	nop
24052772:	37e0      	adds	r7, #224	; 0xe0
24052774:	46bd      	mov	sp, r7
24052776:	bd80      	pop	{r7, pc}
24052778:	40003800 	.word	0x40003800
2405277c:	58024400 	.word	0x58024400
24052780:	58020400 	.word	0x58020400

24052784 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_a;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
24052784:	b580      	push	{r7, lr}
24052786:	b088      	sub	sp, #32
24052788:	af00      	add	r7, sp, #0
2405278a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
2405278c:	687b      	ldr	r3, [r7, #4]
2405278e:	681b      	ldr	r3, [r3, #0]
24052790:	4a37      	ldr	r2, [pc, #220]	; (24052870 <HAL_SAI_MspInit+0xec>)
24052792:	4293      	cmp	r3, r2
24052794:	d167      	bne.n	24052866 <HAL_SAI_MspInit+0xe2>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
24052796:	4b37      	ldr	r3, [pc, #220]	; (24052874 <HAL_SAI_MspInit+0xf0>)
24052798:	681b      	ldr	r3, [r3, #0]
2405279a:	2b00      	cmp	r3, #0
2405279c:	d116      	bne.n	240527cc <HAL_SAI_MspInit+0x48>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
2405279e:	4b36      	ldr	r3, [pc, #216]	; (24052878 <HAL_SAI_MspInit+0xf4>)
240527a0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
240527a4:	4a34      	ldr	r2, [pc, #208]	; (24052878 <HAL_SAI_MspInit+0xf4>)
240527a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
240527aa:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
240527ae:	4b32      	ldr	r3, [pc, #200]	; (24052878 <HAL_SAI_MspInit+0xf4>)
240527b0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
240527b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
240527b8:	60bb      	str	r3, [r7, #8]
240527ba:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI1_IRQn, 0, 0);
240527bc:	2200      	movs	r2, #0
240527be:	2100      	movs	r1, #0
240527c0:	2057      	movs	r0, #87	; 0x57
240527c2:	f002 f81a 	bl	240547fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
240527c6:	2057      	movs	r0, #87	; 0x57
240527c8:	f002 f831 	bl	2405482e <HAL_NVIC_EnableIRQ>
    }
    SAI1_client ++;
240527cc:	4b29      	ldr	r3, [pc, #164]	; (24052874 <HAL_SAI_MspInit+0xf0>)
240527ce:	681b      	ldr	r3, [r3, #0]
240527d0:	3301      	adds	r3, #1
240527d2:	4a28      	ldr	r2, [pc, #160]	; (24052874 <HAL_SAI_MspInit+0xf0>)
240527d4:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
240527d6:	2370      	movs	r3, #112	; 0x70
240527d8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
240527da:	2302      	movs	r3, #2
240527dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
240527de:	2300      	movs	r3, #0
240527e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
240527e2:	2300      	movs	r3, #0
240527e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
240527e6:	2306      	movs	r3, #6
240527e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
240527ea:	f107 030c 	add.w	r3, r7, #12
240527ee:	4619      	mov	r1, r3
240527f0:	4822      	ldr	r0, [pc, #136]	; (2405287c <HAL_SAI_MspInit+0xf8>)
240527f2:	f005 f951 	bl	24057a98 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA1_Stream0;
240527f6:	4b22      	ldr	r3, [pc, #136]	; (24052880 <HAL_SAI_MspInit+0xfc>)
240527f8:	4a22      	ldr	r2, [pc, #136]	; (24052884 <HAL_SAI_MspInit+0x100>)
240527fa:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
240527fc:	4b20      	ldr	r3, [pc, #128]	; (24052880 <HAL_SAI_MspInit+0xfc>)
240527fe:	2257      	movs	r2, #87	; 0x57
24052800:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
24052802:	4b1f      	ldr	r3, [pc, #124]	; (24052880 <HAL_SAI_MspInit+0xfc>)
24052804:	2240      	movs	r2, #64	; 0x40
24052806:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
24052808:	4b1d      	ldr	r3, [pc, #116]	; (24052880 <HAL_SAI_MspInit+0xfc>)
2405280a:	2200      	movs	r2, #0
2405280c:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
2405280e:	4b1c      	ldr	r3, [pc, #112]	; (24052880 <HAL_SAI_MspInit+0xfc>)
24052810:	f44f 6280 	mov.w	r2, #1024	; 0x400
24052814:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
24052816:	4b1a      	ldr	r3, [pc, #104]	; (24052880 <HAL_SAI_MspInit+0xfc>)
24052818:	f44f 6200 	mov.w	r2, #2048	; 0x800
2405281c:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
2405281e:	4b18      	ldr	r3, [pc, #96]	; (24052880 <HAL_SAI_MspInit+0xfc>)
24052820:	f44f 5200 	mov.w	r2, #8192	; 0x2000
24052824:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
24052826:	4b16      	ldr	r3, [pc, #88]	; (24052880 <HAL_SAI_MspInit+0xfc>)
24052828:	f44f 7280 	mov.w	r2, #256	; 0x100
2405282c:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
2405282e:	4b14      	ldr	r3, [pc, #80]	; (24052880 <HAL_SAI_MspInit+0xfc>)
24052830:	2200      	movs	r2, #0
24052832:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
24052834:	4b12      	ldr	r3, [pc, #72]	; (24052880 <HAL_SAI_MspInit+0xfc>)
24052836:	2200      	movs	r2, #0
24052838:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
2405283a:	4811      	ldr	r0, [pc, #68]	; (24052880 <HAL_SAI_MspInit+0xfc>)
2405283c:	f002 f9de 	bl	24054bfc <HAL_DMA_Init>
24052840:	4603      	mov	r3, r0
24052842:	2b00      	cmp	r3, #0
24052844:	d001      	beq.n	2405284a <HAL_SAI_MspInit+0xc6>
    {
      Error_Handler();
24052846:	f7ff fb53 	bl	24051ef0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
2405284a:	687b      	ldr	r3, [r7, #4]
2405284c:	4a0c      	ldr	r2, [pc, #48]	; (24052880 <HAL_SAI_MspInit+0xfc>)
2405284e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
24052852:	4a0b      	ldr	r2, [pc, #44]	; (24052880 <HAL_SAI_MspInit+0xfc>)
24052854:	687b      	ldr	r3, [r7, #4]
24052856:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
24052858:	687b      	ldr	r3, [r7, #4]
2405285a:	4a09      	ldr	r2, [pc, #36]	; (24052880 <HAL_SAI_MspInit+0xfc>)
2405285c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
24052860:	4a07      	ldr	r2, [pc, #28]	; (24052880 <HAL_SAI_MspInit+0xfc>)
24052862:	687b      	ldr	r3, [r7, #4]
24052864:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
24052866:	bf00      	nop
24052868:	3720      	adds	r7, #32
2405286a:	46bd      	mov	sp, r7
2405286c:	bd80      	pop	{r7, pc}
2405286e:	bf00      	nop
24052870:	40015804 	.word	0x40015804
24052874:	200000e4 	.word	0x200000e4
24052878:	58024400 	.word	0x58024400
2405287c:	58021000 	.word	0x58021000
24052880:	200003d4 	.word	0x200003d4
24052884:	40020010 	.word	0x40020010

24052888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
24052888:	b480      	push	{r7}
2405288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
2405288c:	e7fe      	b.n	2405288c <NMI_Handler+0x4>

2405288e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
2405288e:	b480      	push	{r7}
24052890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
24052892:	e7fe      	b.n	24052892 <HardFault_Handler+0x4>

24052894 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
24052894:	b480      	push	{r7}
24052896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
24052898:	e7fe      	b.n	24052898 <MemManage_Handler+0x4>

2405289a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
2405289a:	b480      	push	{r7}
2405289c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
2405289e:	e7fe      	b.n	2405289e <BusFault_Handler+0x4>

240528a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
240528a0:	b480      	push	{r7}
240528a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
240528a4:	e7fe      	b.n	240528a4 <UsageFault_Handler+0x4>

240528a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
240528a6:	b480      	push	{r7}
240528a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
240528aa:	bf00      	nop
240528ac:	46bd      	mov	sp, r7
240528ae:	f85d 7b04 	ldr.w	r7, [sp], #4
240528b2:	4770      	bx	lr

240528b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
240528b4:	b480      	push	{r7}
240528b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
240528b8:	bf00      	nop
240528ba:	46bd      	mov	sp, r7
240528bc:	f85d 7b04 	ldr.w	r7, [sp], #4
240528c0:	4770      	bx	lr

240528c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
240528c2:	b480      	push	{r7}
240528c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
240528c6:	bf00      	nop
240528c8:	46bd      	mov	sp, r7
240528ca:	f85d 7b04 	ldr.w	r7, [sp], #4
240528ce:	4770      	bx	lr

240528d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
240528d0:	b580      	push	{r7, lr}
240528d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
240528d4:	f000 fa12 	bl	24052cfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
240528d8:	bf00      	nop
240528da:	bd80      	pop	{r7, pc}

240528dc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
240528dc:	b580      	push	{r7, lr}
240528de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
240528e0:	4802      	ldr	r0, [pc, #8]	; (240528ec <DMA1_Stream0_IRQHandler+0x10>)
240528e2:	f003 fce7 	bl	240562b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
240528e6:	bf00      	nop
240528e8:	bd80      	pop	{r7, pc}
240528ea:	bf00      	nop
240528ec:	200003d4 	.word	0x200003d4

240528f0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
240528f0:	b580      	push	{r7, lr}
240528f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
240528f4:	4802      	ldr	r0, [pc, #8]	; (24052900 <ADC_IRQHandler+0x10>)
240528f6:	f000 ff35 	bl	24053764 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
240528fa:	bf00      	nop
240528fc:	bd80      	pop	{r7, pc}
240528fe:	bf00      	nop
24052900:	2000044c 	.word	0x2000044c

24052904 <SAI1_IRQHandler>:

/**
  * @brief This function handles SAI1 global interrupt.
  */
void SAI1_IRQHandler(void)
{
24052904:	b580      	push	{r7, lr}
24052906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
24052908:	4802      	ldr	r0, [pc, #8]	; (24052914 <SAI1_IRQHandler+0x10>)
2405290a:	f00b f881 	bl	2405da10 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
2405290e:	bf00      	nop
24052910:	bd80      	pop	{r7, pc}
24052912:	bf00      	nop
24052914:	20000540 	.word	0x20000540

24052918 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
24052918:	b580      	push	{r7, lr}
2405291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
2405291c:	4802      	ldr	r0, [pc, #8]	; (24052928 <LTDC_IRQHandler+0x10>)
2405291e:	f005 fb6d 	bl	24057ffc <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
24052922:	bf00      	nop
24052924:	bd80      	pop	{r7, pc}
24052926:	bf00      	nop
24052928:	2000032c 	.word	0x2000032c

2405292c <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
2405292c:	b580      	push	{r7, lr}
2405292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
24052930:	4802      	ldr	r0, [pc, #8]	; (2405293c <OCTOSPI1_IRQHandler+0x10>)
24052932:	f005 ff3f 	bl	240587b4 <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
24052936:	bf00      	nop
24052938:	bd80      	pop	{r7, pc}
2405293a:	bf00      	nop
2405293c:	200002cc 	.word	0x200002cc

24052940 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
24052940:	b480      	push	{r7}
24052942:	af00      	add	r7, sp, #0
	return 1;
24052944:	2301      	movs	r3, #1
}
24052946:	4618      	mov	r0, r3
24052948:	46bd      	mov	sp, r7
2405294a:	f85d 7b04 	ldr.w	r7, [sp], #4
2405294e:	4770      	bx	lr

24052950 <_kill>:

int _kill(int pid, int sig)
{
24052950:	b580      	push	{r7, lr}
24052952:	b082      	sub	sp, #8
24052954:	af00      	add	r7, sp, #0
24052956:	6078      	str	r0, [r7, #4]
24052958:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
2405295a:	f00c f85b 	bl	2405ea14 <__errno>
2405295e:	4603      	mov	r3, r0
24052960:	2216      	movs	r2, #22
24052962:	601a      	str	r2, [r3, #0]
	return -1;
24052964:	f04f 33ff 	mov.w	r3, #4294967295
}
24052968:	4618      	mov	r0, r3
2405296a:	3708      	adds	r7, #8
2405296c:	46bd      	mov	sp, r7
2405296e:	bd80      	pop	{r7, pc}

24052970 <_exit>:

void _exit (int status)
{
24052970:	b580      	push	{r7, lr}
24052972:	b082      	sub	sp, #8
24052974:	af00      	add	r7, sp, #0
24052976:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
24052978:	f04f 31ff 	mov.w	r1, #4294967295
2405297c:	6878      	ldr	r0, [r7, #4]
2405297e:	f7ff ffe7 	bl	24052950 <_kill>
	while (1) {}		/* Make sure we hang here */
24052982:	e7fe      	b.n	24052982 <_exit+0x12>

24052984 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
24052984:	b580      	push	{r7, lr}
24052986:	b086      	sub	sp, #24
24052988:	af00      	add	r7, sp, #0
2405298a:	60f8      	str	r0, [r7, #12]
2405298c:	60b9      	str	r1, [r7, #8]
2405298e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
24052990:	2300      	movs	r3, #0
24052992:	617b      	str	r3, [r7, #20]
24052994:	e00a      	b.n	240529ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
24052996:	f3af 8000 	nop.w
2405299a:	4601      	mov	r1, r0
2405299c:	68bb      	ldr	r3, [r7, #8]
2405299e:	1c5a      	adds	r2, r3, #1
240529a0:	60ba      	str	r2, [r7, #8]
240529a2:	b2ca      	uxtb	r2, r1
240529a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
240529a6:	697b      	ldr	r3, [r7, #20]
240529a8:	3301      	adds	r3, #1
240529aa:	617b      	str	r3, [r7, #20]
240529ac:	697a      	ldr	r2, [r7, #20]
240529ae:	687b      	ldr	r3, [r7, #4]
240529b0:	429a      	cmp	r2, r3
240529b2:	dbf0      	blt.n	24052996 <_read+0x12>
	}

return len;
240529b4:	687b      	ldr	r3, [r7, #4]
}
240529b6:	4618      	mov	r0, r3
240529b8:	3718      	adds	r7, #24
240529ba:	46bd      	mov	sp, r7
240529bc:	bd80      	pop	{r7, pc}

240529be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
240529be:	b580      	push	{r7, lr}
240529c0:	b086      	sub	sp, #24
240529c2:	af00      	add	r7, sp, #0
240529c4:	60f8      	str	r0, [r7, #12]
240529c6:	60b9      	str	r1, [r7, #8]
240529c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
240529ca:	2300      	movs	r3, #0
240529cc:	617b      	str	r3, [r7, #20]
240529ce:	e009      	b.n	240529e4 <_write+0x26>
	{
		__io_putchar(*ptr++);
240529d0:	68bb      	ldr	r3, [r7, #8]
240529d2:	1c5a      	adds	r2, r3, #1
240529d4:	60ba      	str	r2, [r7, #8]
240529d6:	781b      	ldrb	r3, [r3, #0]
240529d8:	4618      	mov	r0, r3
240529da:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
240529de:	697b      	ldr	r3, [r7, #20]
240529e0:	3301      	adds	r3, #1
240529e2:	617b      	str	r3, [r7, #20]
240529e4:	697a      	ldr	r2, [r7, #20]
240529e6:	687b      	ldr	r3, [r7, #4]
240529e8:	429a      	cmp	r2, r3
240529ea:	dbf1      	blt.n	240529d0 <_write+0x12>
	}
	return len;
240529ec:	687b      	ldr	r3, [r7, #4]
}
240529ee:	4618      	mov	r0, r3
240529f0:	3718      	adds	r7, #24
240529f2:	46bd      	mov	sp, r7
240529f4:	bd80      	pop	{r7, pc}

240529f6 <_close>:

int _close(int file)
{
240529f6:	b480      	push	{r7}
240529f8:	b083      	sub	sp, #12
240529fa:	af00      	add	r7, sp, #0
240529fc:	6078      	str	r0, [r7, #4]
	return -1;
240529fe:	f04f 33ff 	mov.w	r3, #4294967295
}
24052a02:	4618      	mov	r0, r3
24052a04:	370c      	adds	r7, #12
24052a06:	46bd      	mov	sp, r7
24052a08:	f85d 7b04 	ldr.w	r7, [sp], #4
24052a0c:	4770      	bx	lr

24052a0e <_fstat>:


int _fstat(int file, struct stat *st)
{
24052a0e:	b480      	push	{r7}
24052a10:	b083      	sub	sp, #12
24052a12:	af00      	add	r7, sp, #0
24052a14:	6078      	str	r0, [r7, #4]
24052a16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
24052a18:	683b      	ldr	r3, [r7, #0]
24052a1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
24052a1e:	605a      	str	r2, [r3, #4]
	return 0;
24052a20:	2300      	movs	r3, #0
}
24052a22:	4618      	mov	r0, r3
24052a24:	370c      	adds	r7, #12
24052a26:	46bd      	mov	sp, r7
24052a28:	f85d 7b04 	ldr.w	r7, [sp], #4
24052a2c:	4770      	bx	lr

24052a2e <_isatty>:

int _isatty(int file)
{
24052a2e:	b480      	push	{r7}
24052a30:	b083      	sub	sp, #12
24052a32:	af00      	add	r7, sp, #0
24052a34:	6078      	str	r0, [r7, #4]
	return 1;
24052a36:	2301      	movs	r3, #1
}
24052a38:	4618      	mov	r0, r3
24052a3a:	370c      	adds	r7, #12
24052a3c:	46bd      	mov	sp, r7
24052a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
24052a42:	4770      	bx	lr

24052a44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
24052a44:	b480      	push	{r7}
24052a46:	b085      	sub	sp, #20
24052a48:	af00      	add	r7, sp, #0
24052a4a:	60f8      	str	r0, [r7, #12]
24052a4c:	60b9      	str	r1, [r7, #8]
24052a4e:	607a      	str	r2, [r7, #4]
	return 0;
24052a50:	2300      	movs	r3, #0
}
24052a52:	4618      	mov	r0, r3
24052a54:	3714      	adds	r7, #20
24052a56:	46bd      	mov	sp, r7
24052a58:	f85d 7b04 	ldr.w	r7, [sp], #4
24052a5c:	4770      	bx	lr
	...

24052a60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
24052a60:	b580      	push	{r7, lr}
24052a62:	b086      	sub	sp, #24
24052a64:	af00      	add	r7, sp, #0
24052a66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
24052a68:	4a14      	ldr	r2, [pc, #80]	; (24052abc <_sbrk+0x5c>)
24052a6a:	4b15      	ldr	r3, [pc, #84]	; (24052ac0 <_sbrk+0x60>)
24052a6c:	1ad3      	subs	r3, r2, r3
24052a6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
24052a70:	697b      	ldr	r3, [r7, #20]
24052a72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
24052a74:	4b13      	ldr	r3, [pc, #76]	; (24052ac4 <_sbrk+0x64>)
24052a76:	681b      	ldr	r3, [r3, #0]
24052a78:	2b00      	cmp	r3, #0
24052a7a:	d102      	bne.n	24052a82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
24052a7c:	4b11      	ldr	r3, [pc, #68]	; (24052ac4 <_sbrk+0x64>)
24052a7e:	4a12      	ldr	r2, [pc, #72]	; (24052ac8 <_sbrk+0x68>)
24052a80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
24052a82:	4b10      	ldr	r3, [pc, #64]	; (24052ac4 <_sbrk+0x64>)
24052a84:	681a      	ldr	r2, [r3, #0]
24052a86:	687b      	ldr	r3, [r7, #4]
24052a88:	4413      	add	r3, r2
24052a8a:	693a      	ldr	r2, [r7, #16]
24052a8c:	429a      	cmp	r2, r3
24052a8e:	d207      	bcs.n	24052aa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
24052a90:	f00b ffc0 	bl	2405ea14 <__errno>
24052a94:	4603      	mov	r3, r0
24052a96:	220c      	movs	r2, #12
24052a98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
24052a9a:	f04f 33ff 	mov.w	r3, #4294967295
24052a9e:	e009      	b.n	24052ab4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
24052aa0:	4b08      	ldr	r3, [pc, #32]	; (24052ac4 <_sbrk+0x64>)
24052aa2:	681b      	ldr	r3, [r3, #0]
24052aa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
24052aa6:	4b07      	ldr	r3, [pc, #28]	; (24052ac4 <_sbrk+0x64>)
24052aa8:	681a      	ldr	r2, [r3, #0]
24052aaa:	687b      	ldr	r3, [r7, #4]
24052aac:	4413      	add	r3, r2
24052aae:	4a05      	ldr	r2, [pc, #20]	; (24052ac4 <_sbrk+0x64>)
24052ab0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
24052ab2:	68fb      	ldr	r3, [r7, #12]
}
24052ab4:	4618      	mov	r0, r3
24052ab6:	3718      	adds	r7, #24
24052ab8:	46bd      	mov	sp, r7
24052aba:	bd80      	pop	{r7, pc}
24052abc:	20020000 	.word	0x20020000
24052ac0:	00005000 	.word	0x00005000
24052ac4:	200000e8 	.word	0x200000e8
24052ac8:	200005f0 	.word	0x200005f0

24052acc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
24052acc:	b480      	push	{r7}
24052ace:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
24052ad0:	4b34      	ldr	r3, [pc, #208]	; (24052ba4 <SystemInit+0xd8>)
24052ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
24052ad6:	4a33      	ldr	r2, [pc, #204]	; (24052ba4 <SystemInit+0xd8>)
24052ad8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
24052adc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
24052ae0:	4b31      	ldr	r3, [pc, #196]	; (24052ba8 <SystemInit+0xdc>)
24052ae2:	681b      	ldr	r3, [r3, #0]
24052ae4:	f003 030f 	and.w	r3, r3, #15
24052ae8:	2b02      	cmp	r3, #2
24052aea:	d807      	bhi.n	24052afc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
24052aec:	4b2e      	ldr	r3, [pc, #184]	; (24052ba8 <SystemInit+0xdc>)
24052aee:	681b      	ldr	r3, [r3, #0]
24052af0:	f023 030f 	bic.w	r3, r3, #15
24052af4:	4a2c      	ldr	r2, [pc, #176]	; (24052ba8 <SystemInit+0xdc>)
24052af6:	f043 0303 	orr.w	r3, r3, #3
24052afa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
24052afc:	4b2b      	ldr	r3, [pc, #172]	; (24052bac <SystemInit+0xe0>)
24052afe:	681b      	ldr	r3, [r3, #0]
24052b00:	4a2a      	ldr	r2, [pc, #168]	; (24052bac <SystemInit+0xe0>)
24052b02:	f043 0301 	orr.w	r3, r3, #1
24052b06:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
24052b08:	4b28      	ldr	r3, [pc, #160]	; (24052bac <SystemInit+0xe0>)
24052b0a:	2200      	movs	r2, #0
24052b0c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
24052b0e:	4b27      	ldr	r3, [pc, #156]	; (24052bac <SystemInit+0xe0>)
24052b10:	681a      	ldr	r2, [r3, #0]
24052b12:	4926      	ldr	r1, [pc, #152]	; (24052bac <SystemInit+0xe0>)
24052b14:	4b26      	ldr	r3, [pc, #152]	; (24052bb0 <SystemInit+0xe4>)
24052b16:	4013      	ands	r3, r2
24052b18:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
24052b1a:	4b23      	ldr	r3, [pc, #140]	; (24052ba8 <SystemInit+0xdc>)
24052b1c:	681b      	ldr	r3, [r3, #0]
24052b1e:	f003 030c 	and.w	r3, r3, #12
24052b22:	2b00      	cmp	r3, #0
24052b24:	d007      	beq.n	24052b36 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
24052b26:	4b20      	ldr	r3, [pc, #128]	; (24052ba8 <SystemInit+0xdc>)
24052b28:	681b      	ldr	r3, [r3, #0]
24052b2a:	f023 030f 	bic.w	r3, r3, #15
24052b2e:	4a1e      	ldr	r2, [pc, #120]	; (24052ba8 <SystemInit+0xdc>)
24052b30:	f043 0303 	orr.w	r3, r3, #3
24052b34:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
24052b36:	4b1d      	ldr	r3, [pc, #116]	; (24052bac <SystemInit+0xe0>)
24052b38:	2200      	movs	r2, #0
24052b3a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
24052b3c:	4b1b      	ldr	r3, [pc, #108]	; (24052bac <SystemInit+0xe0>)
24052b3e:	2200      	movs	r2, #0
24052b40:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
24052b42:	4b1a      	ldr	r3, [pc, #104]	; (24052bac <SystemInit+0xe0>)
24052b44:	2200      	movs	r2, #0
24052b46:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
24052b48:	4b18      	ldr	r3, [pc, #96]	; (24052bac <SystemInit+0xe0>)
24052b4a:	4a1a      	ldr	r2, [pc, #104]	; (24052bb4 <SystemInit+0xe8>)
24052b4c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
24052b4e:	4b17      	ldr	r3, [pc, #92]	; (24052bac <SystemInit+0xe0>)
24052b50:	4a19      	ldr	r2, [pc, #100]	; (24052bb8 <SystemInit+0xec>)
24052b52:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
24052b54:	4b15      	ldr	r3, [pc, #84]	; (24052bac <SystemInit+0xe0>)
24052b56:	4a19      	ldr	r2, [pc, #100]	; (24052bbc <SystemInit+0xf0>)
24052b58:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
24052b5a:	4b14      	ldr	r3, [pc, #80]	; (24052bac <SystemInit+0xe0>)
24052b5c:	2200      	movs	r2, #0
24052b5e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
24052b60:	4b12      	ldr	r3, [pc, #72]	; (24052bac <SystemInit+0xe0>)
24052b62:	4a16      	ldr	r2, [pc, #88]	; (24052bbc <SystemInit+0xf0>)
24052b64:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
24052b66:	4b11      	ldr	r3, [pc, #68]	; (24052bac <SystemInit+0xe0>)
24052b68:	2200      	movs	r2, #0
24052b6a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
24052b6c:	4b0f      	ldr	r3, [pc, #60]	; (24052bac <SystemInit+0xe0>)
24052b6e:	4a13      	ldr	r2, [pc, #76]	; (24052bbc <SystemInit+0xf0>)
24052b70:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
24052b72:	4b0e      	ldr	r3, [pc, #56]	; (24052bac <SystemInit+0xe0>)
24052b74:	2200      	movs	r2, #0
24052b76:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
24052b78:	4b0c      	ldr	r3, [pc, #48]	; (24052bac <SystemInit+0xe0>)
24052b7a:	681b      	ldr	r3, [r3, #0]
24052b7c:	4a0b      	ldr	r2, [pc, #44]	; (24052bac <SystemInit+0xe0>)
24052b7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
24052b82:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
24052b84:	4b09      	ldr	r3, [pc, #36]	; (24052bac <SystemInit+0xe0>)
24052b86:	2200      	movs	r2, #0
24052b88:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
24052b8a:	4b0d      	ldr	r3, [pc, #52]	; (24052bc0 <SystemInit+0xf4>)
24052b8c:	f243 02d2 	movw	r2, #12498	; 0x30d2
24052b90:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
24052b92:	4b04      	ldr	r3, [pc, #16]	; (24052ba4 <SystemInit+0xd8>)
24052b94:	f04f 5210 	mov.w	r2, #603979776	; 0x24000000
24052b98:	609a      	str	r2, [r3, #8]
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
24052b9a:	bf00      	nop
24052b9c:	46bd      	mov	sp, r7
24052b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
24052ba2:	4770      	bx	lr
24052ba4:	e000ed00 	.word	0xe000ed00
24052ba8:	52002000 	.word	0x52002000
24052bac:	58024400 	.word	0x58024400
24052bb0:	eaf6ed7f 	.word	0xeaf6ed7f
24052bb4:	02020200 	.word	0x02020200
24052bb8:	01ff0000 	.word	0x01ff0000
24052bbc:	01010280 	.word	0x01010280
24052bc0:	52004000 	.word	0x52004000

24052bc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
24052bc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 24052bfc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
24052bc8:	f7ff ff80 	bl	24052acc <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
24052bcc:	480c      	ldr	r0, [pc, #48]	; (24052c00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
24052bce:	490d      	ldr	r1, [pc, #52]	; (24052c04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
24052bd0:	4a0d      	ldr	r2, [pc, #52]	; (24052c08 <LoopFillZerobss+0x1a>)
  movs r3, #0
24052bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
24052bd4:	e002      	b.n	24052bdc <LoopCopyDataInit>

24052bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
24052bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
24052bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
24052bda:	3304      	adds	r3, #4

24052bdc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
24052bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
24052bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
24052be0:	d3f9      	bcc.n	24052bd6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
24052be2:	4a0a      	ldr	r2, [pc, #40]	; (24052c0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
24052be4:	4c0a      	ldr	r4, [pc, #40]	; (24052c10 <LoopFillZerobss+0x22>)
  movs r3, #0
24052be6:	2300      	movs	r3, #0
  b LoopFillZerobss
24052be8:	e001      	b.n	24052bee <LoopFillZerobss>

24052bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
24052bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
24052bec:	3204      	adds	r2, #4

24052bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
24052bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
24052bf0:	d3fb      	bcc.n	24052bea <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
24052bf2:	f00b ff15 	bl	2405ea20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
24052bf6:	f7fe fc81 	bl	240514fc <main>
  bx  lr
24052bfa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
24052bfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
24052c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
24052c04:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
24052c08:	24061088 	.word	0x24061088
  ldr r2, =_sbss
24052c0c:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
24052c10:	200005ec 	.word	0x200005ec

24052c14 <BDMA1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
24052c14:	e7fe      	b.n	24052c14 <BDMA1_IRQHandler>
	...

24052c18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
24052c18:	b580      	push	{r7, lr}
24052c1a:	b082      	sub	sp, #8
24052c1c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
24052c1e:	2003      	movs	r0, #3
24052c20:	f001 fde0 	bl	240547e4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
24052c24:	f007 fe06 	bl	2405a834 <HAL_RCC_GetSysClockFreq>
24052c28:	4602      	mov	r2, r0
24052c2a:	4b15      	ldr	r3, [pc, #84]	; (24052c80 <HAL_Init+0x68>)
24052c2c:	699b      	ldr	r3, [r3, #24]
24052c2e:	0a1b      	lsrs	r3, r3, #8
24052c30:	f003 030f 	and.w	r3, r3, #15
24052c34:	4913      	ldr	r1, [pc, #76]	; (24052c84 <HAL_Init+0x6c>)
24052c36:	5ccb      	ldrb	r3, [r1, r3]
24052c38:	f003 031f 	and.w	r3, r3, #31
24052c3c:	fa22 f303 	lsr.w	r3, r2, r3
24052c40:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
24052c42:	4b0f      	ldr	r3, [pc, #60]	; (24052c80 <HAL_Init+0x68>)
24052c44:	699b      	ldr	r3, [r3, #24]
24052c46:	f003 030f 	and.w	r3, r3, #15
24052c4a:	4a0e      	ldr	r2, [pc, #56]	; (24052c84 <HAL_Init+0x6c>)
24052c4c:	5cd3      	ldrb	r3, [r2, r3]
24052c4e:	f003 031f 	and.w	r3, r3, #31
24052c52:	687a      	ldr	r2, [r7, #4]
24052c54:	fa22 f303 	lsr.w	r3, r2, r3
24052c58:	4a0b      	ldr	r2, [pc, #44]	; (24052c88 <HAL_Init+0x70>)
24052c5a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
24052c5c:	4a0b      	ldr	r2, [pc, #44]	; (24052c8c <HAL_Init+0x74>)
24052c5e:	687b      	ldr	r3, [r7, #4]
24052c60:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
24052c62:	2000      	movs	r0, #0
24052c64:	f000 f814 	bl	24052c90 <HAL_InitTick>
24052c68:	4603      	mov	r3, r0
24052c6a:	2b00      	cmp	r3, #0
24052c6c:	d001      	beq.n	24052c72 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
24052c6e:	2301      	movs	r3, #1
24052c70:	e002      	b.n	24052c78 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
24052c72:	f7ff f943 	bl	24051efc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
24052c76:	2300      	movs	r3, #0
}
24052c78:	4618      	mov	r0, r3
24052c7a:	3708      	adds	r7, #8
24052c7c:	46bd      	mov	sp, r7
24052c7e:	bd80      	pop	{r7, pc}
24052c80:	58024400 	.word	0x58024400
24052c84:	24060f1c 	.word	0x24060f1c
24052c88:	20000034 	.word	0x20000034
24052c8c:	20000030 	.word	0x20000030

24052c90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
24052c90:	b580      	push	{r7, lr}
24052c92:	b082      	sub	sp, #8
24052c94:	af00      	add	r7, sp, #0
24052c96:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
24052c98:	4b15      	ldr	r3, [pc, #84]	; (24052cf0 <HAL_InitTick+0x60>)
24052c9a:	781b      	ldrb	r3, [r3, #0]
24052c9c:	2b00      	cmp	r3, #0
24052c9e:	d101      	bne.n	24052ca4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
24052ca0:	2301      	movs	r3, #1
24052ca2:	e021      	b.n	24052ce8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
24052ca4:	4b13      	ldr	r3, [pc, #76]	; (24052cf4 <HAL_InitTick+0x64>)
24052ca6:	681a      	ldr	r2, [r3, #0]
24052ca8:	4b11      	ldr	r3, [pc, #68]	; (24052cf0 <HAL_InitTick+0x60>)
24052caa:	781b      	ldrb	r3, [r3, #0]
24052cac:	4619      	mov	r1, r3
24052cae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
24052cb2:	fbb3 f3f1 	udiv	r3, r3, r1
24052cb6:	fbb2 f3f3 	udiv	r3, r2, r3
24052cba:	4618      	mov	r0, r3
24052cbc:	f001 fdc9 	bl	24054852 <HAL_SYSTICK_Config>
24052cc0:	4603      	mov	r3, r0
24052cc2:	2b00      	cmp	r3, #0
24052cc4:	d001      	beq.n	24052cca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
24052cc6:	2301      	movs	r3, #1
24052cc8:	e00e      	b.n	24052ce8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
24052cca:	687b      	ldr	r3, [r7, #4]
24052ccc:	2b0f      	cmp	r3, #15
24052cce:	d80a      	bhi.n	24052ce6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
24052cd0:	2200      	movs	r2, #0
24052cd2:	6879      	ldr	r1, [r7, #4]
24052cd4:	f04f 30ff 	mov.w	r0, #4294967295
24052cd8:	f001 fd8f 	bl	240547fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
24052cdc:	4a06      	ldr	r2, [pc, #24]	; (24052cf8 <HAL_InitTick+0x68>)
24052cde:	687b      	ldr	r3, [r7, #4]
24052ce0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
24052ce2:	2300      	movs	r3, #0
24052ce4:	e000      	b.n	24052ce8 <HAL_InitTick+0x58>
    return HAL_ERROR;
24052ce6:	2301      	movs	r3, #1
}
24052ce8:	4618      	mov	r0, r3
24052cea:	3708      	adds	r7, #8
24052cec:	46bd      	mov	sp, r7
24052cee:	bd80      	pop	{r7, pc}
24052cf0:	2000003c 	.word	0x2000003c
24052cf4:	20000030 	.word	0x20000030
24052cf8:	20000038 	.word	0x20000038

24052cfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
24052cfc:	b480      	push	{r7}
24052cfe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
24052d00:	4b06      	ldr	r3, [pc, #24]	; (24052d1c <HAL_IncTick+0x20>)
24052d02:	781b      	ldrb	r3, [r3, #0]
24052d04:	461a      	mov	r2, r3
24052d06:	4b06      	ldr	r3, [pc, #24]	; (24052d20 <HAL_IncTick+0x24>)
24052d08:	681b      	ldr	r3, [r3, #0]
24052d0a:	4413      	add	r3, r2
24052d0c:	4a04      	ldr	r2, [pc, #16]	; (24052d20 <HAL_IncTick+0x24>)
24052d0e:	6013      	str	r3, [r2, #0]
}
24052d10:	bf00      	nop
24052d12:	46bd      	mov	sp, r7
24052d14:	f85d 7b04 	ldr.w	r7, [sp], #4
24052d18:	4770      	bx	lr
24052d1a:	bf00      	nop
24052d1c:	2000003c 	.word	0x2000003c
24052d20:	200005d8 	.word	0x200005d8

24052d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
24052d24:	b480      	push	{r7}
24052d26:	af00      	add	r7, sp, #0
  return uwTick;
24052d28:	4b03      	ldr	r3, [pc, #12]	; (24052d38 <HAL_GetTick+0x14>)
24052d2a:	681b      	ldr	r3, [r3, #0]
}
24052d2c:	4618      	mov	r0, r3
24052d2e:	46bd      	mov	sp, r7
24052d30:	f85d 7b04 	ldr.w	r7, [sp], #4
24052d34:	4770      	bx	lr
24052d36:	bf00      	nop
24052d38:	200005d8 	.word	0x200005d8

24052d3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
24052d3c:	b580      	push	{r7, lr}
24052d3e:	b084      	sub	sp, #16
24052d40:	af00      	add	r7, sp, #0
24052d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
24052d44:	f7ff ffee 	bl	24052d24 <HAL_GetTick>
24052d48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
24052d4a:	687b      	ldr	r3, [r7, #4]
24052d4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
24052d4e:	68fb      	ldr	r3, [r7, #12]
24052d50:	f1b3 3fff 	cmp.w	r3, #4294967295
24052d54:	d005      	beq.n	24052d62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
24052d56:	4b0a      	ldr	r3, [pc, #40]	; (24052d80 <HAL_Delay+0x44>)
24052d58:	781b      	ldrb	r3, [r3, #0]
24052d5a:	461a      	mov	r2, r3
24052d5c:	68fb      	ldr	r3, [r7, #12]
24052d5e:	4413      	add	r3, r2
24052d60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
24052d62:	bf00      	nop
24052d64:	f7ff ffde 	bl	24052d24 <HAL_GetTick>
24052d68:	4602      	mov	r2, r0
24052d6a:	68bb      	ldr	r3, [r7, #8]
24052d6c:	1ad3      	subs	r3, r2, r3
24052d6e:	68fa      	ldr	r2, [r7, #12]
24052d70:	429a      	cmp	r2, r3
24052d72:	d8f7      	bhi.n	24052d64 <HAL_Delay+0x28>
  {
  }
}
24052d74:	bf00      	nop
24052d76:	bf00      	nop
24052d78:	3710      	adds	r7, #16
24052d7a:	46bd      	mov	sp, r7
24052d7c:	bd80      	pop	{r7, pc}
24052d7e:	bf00      	nop
24052d80:	2000003c 	.word	0x2000003c

24052d84 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
24052d84:	b480      	push	{r7}
24052d86:	b083      	sub	sp, #12
24052d88:	af00      	add	r7, sp, #0
24052d8a:	6078      	str	r0, [r7, #4]
24052d8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
24052d8e:	687b      	ldr	r3, [r7, #4]
24052d90:	689b      	ldr	r3, [r3, #8]
24052d92:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
24052d96:	683b      	ldr	r3, [r7, #0]
24052d98:	431a      	orrs	r2, r3
24052d9a:	687b      	ldr	r3, [r7, #4]
24052d9c:	609a      	str	r2, [r3, #8]
}
24052d9e:	bf00      	nop
24052da0:	370c      	adds	r7, #12
24052da2:	46bd      	mov	sp, r7
24052da4:	f85d 7b04 	ldr.w	r7, [sp], #4
24052da8:	4770      	bx	lr

24052daa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
24052daa:	b480      	push	{r7}
24052dac:	b083      	sub	sp, #12
24052dae:	af00      	add	r7, sp, #0
24052db0:	6078      	str	r0, [r7, #4]
24052db2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
24052db4:	687b      	ldr	r3, [r7, #4]
24052db6:	689b      	ldr	r3, [r3, #8]
24052db8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
24052dbc:	683b      	ldr	r3, [r7, #0]
24052dbe:	431a      	orrs	r2, r3
24052dc0:	687b      	ldr	r3, [r7, #4]
24052dc2:	609a      	str	r2, [r3, #8]
}
24052dc4:	bf00      	nop
24052dc6:	370c      	adds	r7, #12
24052dc8:	46bd      	mov	sp, r7
24052dca:	f85d 7b04 	ldr.w	r7, [sp], #4
24052dce:	4770      	bx	lr

24052dd0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
24052dd0:	b480      	push	{r7}
24052dd2:	b083      	sub	sp, #12
24052dd4:	af00      	add	r7, sp, #0
24052dd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
24052dd8:	687b      	ldr	r3, [r7, #4]
24052dda:	689b      	ldr	r3, [r3, #8]
24052ddc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
24052de0:	4618      	mov	r0, r3
24052de2:	370c      	adds	r7, #12
24052de4:	46bd      	mov	sp, r7
24052de6:	f85d 7b04 	ldr.w	r7, [sp], #4
24052dea:	4770      	bx	lr

24052dec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
24052dec:	b480      	push	{r7}
24052dee:	b087      	sub	sp, #28
24052df0:	af00      	add	r7, sp, #0
24052df2:	60f8      	str	r0, [r7, #12]
24052df4:	60b9      	str	r1, [r7, #8]
24052df6:	607a      	str	r2, [r7, #4]
24052df8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
24052dfa:	68fb      	ldr	r3, [r7, #12]
24052dfc:	3360      	adds	r3, #96	; 0x60
24052dfe:	461a      	mov	r2, r3
24052e00:	68bb      	ldr	r3, [r7, #8]
24052e02:	009b      	lsls	r3, r3, #2
24052e04:	4413      	add	r3, r2
24052e06:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
24052e08:	697b      	ldr	r3, [r7, #20]
24052e0a:	681b      	ldr	r3, [r3, #0]
24052e0c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
24052e10:	687b      	ldr	r3, [r7, #4]
24052e12:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
24052e16:	683b      	ldr	r3, [r7, #0]
24052e18:	430b      	orrs	r3, r1
24052e1a:	431a      	orrs	r2, r3
24052e1c:	697b      	ldr	r3, [r7, #20]
24052e1e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
24052e20:	bf00      	nop
24052e22:	371c      	adds	r7, #28
24052e24:	46bd      	mov	sp, r7
24052e26:	f85d 7b04 	ldr.w	r7, [sp], #4
24052e2a:	4770      	bx	lr

24052e2c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
24052e2c:	b480      	push	{r7}
24052e2e:	b085      	sub	sp, #20
24052e30:	af00      	add	r7, sp, #0
24052e32:	60f8      	str	r0, [r7, #12]
24052e34:	60b9      	str	r1, [r7, #8]
24052e36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
24052e38:	68fb      	ldr	r3, [r7, #12]
24052e3a:	691b      	ldr	r3, [r3, #16]
24052e3c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
24052e40:	68bb      	ldr	r3, [r7, #8]
24052e42:	f003 031f 	and.w	r3, r3, #31
24052e46:	6879      	ldr	r1, [r7, #4]
24052e48:	fa01 f303 	lsl.w	r3, r1, r3
24052e4c:	431a      	orrs	r2, r3
24052e4e:	68fb      	ldr	r3, [r7, #12]
24052e50:	611a      	str	r2, [r3, #16]
}
24052e52:	bf00      	nop
24052e54:	3714      	adds	r7, #20
24052e56:	46bd      	mov	sp, r7
24052e58:	f85d 7b04 	ldr.w	r7, [sp], #4
24052e5c:	4770      	bx	lr

24052e5e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
24052e5e:	b480      	push	{r7}
24052e60:	b087      	sub	sp, #28
24052e62:	af00      	add	r7, sp, #0
24052e64:	60f8      	str	r0, [r7, #12]
24052e66:	60b9      	str	r1, [r7, #8]
24052e68:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
24052e6a:	68fb      	ldr	r3, [r7, #12]
24052e6c:	3360      	adds	r3, #96	; 0x60
24052e6e:	461a      	mov	r2, r3
24052e70:	68bb      	ldr	r3, [r7, #8]
24052e72:	009b      	lsls	r3, r3, #2
24052e74:	4413      	add	r3, r2
24052e76:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
24052e78:	697b      	ldr	r3, [r7, #20]
24052e7a:	681b      	ldr	r3, [r3, #0]
24052e7c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
24052e80:	687b      	ldr	r3, [r7, #4]
24052e82:	431a      	orrs	r2, r3
24052e84:	697b      	ldr	r3, [r7, #20]
24052e86:	601a      	str	r2, [r3, #0]
  }
}
24052e88:	bf00      	nop
24052e8a:	371c      	adds	r7, #28
24052e8c:	46bd      	mov	sp, r7
24052e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
24052e92:	4770      	bx	lr

24052e94 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
24052e94:	b480      	push	{r7}
24052e96:	b083      	sub	sp, #12
24052e98:	af00      	add	r7, sp, #0
24052e9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
24052e9c:	687b      	ldr	r3, [r7, #4]
24052e9e:	68db      	ldr	r3, [r3, #12]
24052ea0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
24052ea4:	2b00      	cmp	r3, #0
24052ea6:	d101      	bne.n	24052eac <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
24052ea8:	2301      	movs	r3, #1
24052eaa:	e000      	b.n	24052eae <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
24052eac:	2300      	movs	r3, #0
}
24052eae:	4618      	mov	r0, r3
24052eb0:	370c      	adds	r7, #12
24052eb2:	46bd      	mov	sp, r7
24052eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
24052eb8:	4770      	bx	lr

24052eba <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
24052eba:	b480      	push	{r7}
24052ebc:	b087      	sub	sp, #28
24052ebe:	af00      	add	r7, sp, #0
24052ec0:	60f8      	str	r0, [r7, #12]
24052ec2:	60b9      	str	r1, [r7, #8]
24052ec4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
24052ec6:	68fb      	ldr	r3, [r7, #12]
24052ec8:	3330      	adds	r3, #48	; 0x30
24052eca:	461a      	mov	r2, r3
24052ecc:	68bb      	ldr	r3, [r7, #8]
24052ece:	0a1b      	lsrs	r3, r3, #8
24052ed0:	009b      	lsls	r3, r3, #2
24052ed2:	f003 030c 	and.w	r3, r3, #12
24052ed6:	4413      	add	r3, r2
24052ed8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
24052eda:	697b      	ldr	r3, [r7, #20]
24052edc:	681a      	ldr	r2, [r3, #0]
24052ede:	68bb      	ldr	r3, [r7, #8]
24052ee0:	f003 031f 	and.w	r3, r3, #31
24052ee4:	211f      	movs	r1, #31
24052ee6:	fa01 f303 	lsl.w	r3, r1, r3
24052eea:	43db      	mvns	r3, r3
24052eec:	401a      	ands	r2, r3
24052eee:	687b      	ldr	r3, [r7, #4]
24052ef0:	0e9b      	lsrs	r3, r3, #26
24052ef2:	f003 011f 	and.w	r1, r3, #31
24052ef6:	68bb      	ldr	r3, [r7, #8]
24052ef8:	f003 031f 	and.w	r3, r3, #31
24052efc:	fa01 f303 	lsl.w	r3, r1, r3
24052f00:	431a      	orrs	r2, r3
24052f02:	697b      	ldr	r3, [r7, #20]
24052f04:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
24052f06:	bf00      	nop
24052f08:	371c      	adds	r7, #28
24052f0a:	46bd      	mov	sp, r7
24052f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
24052f10:	4770      	bx	lr

24052f12 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
24052f12:	b480      	push	{r7}
24052f14:	b083      	sub	sp, #12
24052f16:	af00      	add	r7, sp, #0
24052f18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
24052f1a:	687b      	ldr	r3, [r7, #4]
24052f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24052f1e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
24052f22:	2b00      	cmp	r3, #0
24052f24:	d101      	bne.n	24052f2a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
24052f26:	2301      	movs	r3, #1
24052f28:	e000      	b.n	24052f2c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
24052f2a:	2300      	movs	r3, #0
}
24052f2c:	4618      	mov	r0, r3
24052f2e:	370c      	adds	r7, #12
24052f30:	46bd      	mov	sp, r7
24052f32:	f85d 7b04 	ldr.w	r7, [sp], #4
24052f36:	4770      	bx	lr

24052f38 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
24052f38:	b480      	push	{r7}
24052f3a:	b087      	sub	sp, #28
24052f3c:	af00      	add	r7, sp, #0
24052f3e:	60f8      	str	r0, [r7, #12]
24052f40:	60b9      	str	r1, [r7, #8]
24052f42:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
24052f44:	68fb      	ldr	r3, [r7, #12]
24052f46:	3314      	adds	r3, #20
24052f48:	461a      	mov	r2, r3
24052f4a:	68bb      	ldr	r3, [r7, #8]
24052f4c:	0e5b      	lsrs	r3, r3, #25
24052f4e:	009b      	lsls	r3, r3, #2
24052f50:	f003 0304 	and.w	r3, r3, #4
24052f54:	4413      	add	r3, r2
24052f56:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
24052f58:	697b      	ldr	r3, [r7, #20]
24052f5a:	681a      	ldr	r2, [r3, #0]
24052f5c:	68bb      	ldr	r3, [r7, #8]
24052f5e:	0d1b      	lsrs	r3, r3, #20
24052f60:	f003 031f 	and.w	r3, r3, #31
24052f64:	2107      	movs	r1, #7
24052f66:	fa01 f303 	lsl.w	r3, r1, r3
24052f6a:	43db      	mvns	r3, r3
24052f6c:	401a      	ands	r2, r3
24052f6e:	68bb      	ldr	r3, [r7, #8]
24052f70:	0d1b      	lsrs	r3, r3, #20
24052f72:	f003 031f 	and.w	r3, r3, #31
24052f76:	6879      	ldr	r1, [r7, #4]
24052f78:	fa01 f303 	lsl.w	r3, r1, r3
24052f7c:	431a      	orrs	r2, r3
24052f7e:	697b      	ldr	r3, [r7, #20]
24052f80:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
24052f82:	bf00      	nop
24052f84:	371c      	adds	r7, #28
24052f86:	46bd      	mov	sp, r7
24052f88:	f85d 7b04 	ldr.w	r7, [sp], #4
24052f8c:	4770      	bx	lr
	...

24052f90 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
24052f90:	b480      	push	{r7}
24052f92:	b085      	sub	sp, #20
24052f94:	af00      	add	r7, sp, #0
24052f96:	60f8      	str	r0, [r7, #12]
24052f98:	60b9      	str	r1, [r7, #8]
24052f9a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
24052f9c:	68fb      	ldr	r3, [r7, #12]
24052f9e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
24052fa2:	68bb      	ldr	r3, [r7, #8]
24052fa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
24052fa8:	43db      	mvns	r3, r3
24052faa:	401a      	ands	r2, r3
24052fac:	687b      	ldr	r3, [r7, #4]
24052fae:	f003 0318 	and.w	r3, r3, #24
24052fb2:	4908      	ldr	r1, [pc, #32]	; (24052fd4 <LL_ADC_SetChannelSingleDiff+0x44>)
24052fb4:	40d9      	lsrs	r1, r3
24052fb6:	68bb      	ldr	r3, [r7, #8]
24052fb8:	400b      	ands	r3, r1
24052fba:	f3c3 0313 	ubfx	r3, r3, #0, #20
24052fbe:	431a      	orrs	r2, r3
24052fc0:	68fb      	ldr	r3, [r7, #12]
24052fc2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
24052fc6:	bf00      	nop
24052fc8:	3714      	adds	r7, #20
24052fca:	46bd      	mov	sp, r7
24052fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
24052fd0:	4770      	bx	lr
24052fd2:	bf00      	nop
24052fd4:	000fffff 	.word	0x000fffff

24052fd8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
24052fd8:	b480      	push	{r7}
24052fda:	b083      	sub	sp, #12
24052fdc:	af00      	add	r7, sp, #0
24052fde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
24052fe0:	687b      	ldr	r3, [r7, #4]
24052fe2:	689b      	ldr	r3, [r3, #8]
24052fe4:	f003 031f 	and.w	r3, r3, #31
}
24052fe8:	4618      	mov	r0, r3
24052fea:	370c      	adds	r7, #12
24052fec:	46bd      	mov	sp, r7
24052fee:	f85d 7b04 	ldr.w	r7, [sp], #4
24052ff2:	4770      	bx	lr

24052ff4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
24052ff4:	b480      	push	{r7}
24052ff6:	b083      	sub	sp, #12
24052ff8:	af00      	add	r7, sp, #0
24052ffa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
24052ffc:	687b      	ldr	r3, [r7, #4]
24052ffe:	689b      	ldr	r3, [r3, #8]
24053000:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
24053004:	4618      	mov	r0, r3
24053006:	370c      	adds	r7, #12
24053008:	46bd      	mov	sp, r7
2405300a:	f85d 7b04 	ldr.w	r7, [sp], #4
2405300e:	4770      	bx	lr

24053010 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
24053010:	b480      	push	{r7}
24053012:	b083      	sub	sp, #12
24053014:	af00      	add	r7, sp, #0
24053016:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
24053018:	687b      	ldr	r3, [r7, #4]
2405301a:	689a      	ldr	r2, [r3, #8]
2405301c:	4b04      	ldr	r3, [pc, #16]	; (24053030 <LL_ADC_DisableDeepPowerDown+0x20>)
2405301e:	4013      	ands	r3, r2
24053020:	687a      	ldr	r2, [r7, #4]
24053022:	6093      	str	r3, [r2, #8]
}
24053024:	bf00      	nop
24053026:	370c      	adds	r7, #12
24053028:	46bd      	mov	sp, r7
2405302a:	f85d 7b04 	ldr.w	r7, [sp], #4
2405302e:	4770      	bx	lr
24053030:	5fffffc0 	.word	0x5fffffc0

24053034 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
24053034:	b480      	push	{r7}
24053036:	b083      	sub	sp, #12
24053038:	af00      	add	r7, sp, #0
2405303a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
2405303c:	687b      	ldr	r3, [r7, #4]
2405303e:	689b      	ldr	r3, [r3, #8]
24053040:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
24053044:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24053048:	d101      	bne.n	2405304e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
2405304a:	2301      	movs	r3, #1
2405304c:	e000      	b.n	24053050 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
2405304e:	2300      	movs	r3, #0
}
24053050:	4618      	mov	r0, r3
24053052:	370c      	adds	r7, #12
24053054:	46bd      	mov	sp, r7
24053056:	f85d 7b04 	ldr.w	r7, [sp], #4
2405305a:	4770      	bx	lr

2405305c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
2405305c:	b480      	push	{r7}
2405305e:	b083      	sub	sp, #12
24053060:	af00      	add	r7, sp, #0
24053062:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
24053064:	687b      	ldr	r3, [r7, #4]
24053066:	689a      	ldr	r2, [r3, #8]
24053068:	4b05      	ldr	r3, [pc, #20]	; (24053080 <LL_ADC_EnableInternalRegulator+0x24>)
2405306a:	4013      	ands	r3, r2
2405306c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
24053070:	687b      	ldr	r3, [r7, #4]
24053072:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
24053074:	bf00      	nop
24053076:	370c      	adds	r7, #12
24053078:	46bd      	mov	sp, r7
2405307a:	f85d 7b04 	ldr.w	r7, [sp], #4
2405307e:	4770      	bx	lr
24053080:	6fffffc0 	.word	0x6fffffc0

24053084 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
24053084:	b480      	push	{r7}
24053086:	b083      	sub	sp, #12
24053088:	af00      	add	r7, sp, #0
2405308a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
2405308c:	687b      	ldr	r3, [r7, #4]
2405308e:	689b      	ldr	r3, [r3, #8]
24053090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
24053094:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24053098:	d101      	bne.n	2405309e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
2405309a:	2301      	movs	r3, #1
2405309c:	e000      	b.n	240530a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
2405309e:	2300      	movs	r3, #0
}
240530a0:	4618      	mov	r0, r3
240530a2:	370c      	adds	r7, #12
240530a4:	46bd      	mov	sp, r7
240530a6:	f85d 7b04 	ldr.w	r7, [sp], #4
240530aa:	4770      	bx	lr

240530ac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
240530ac:	b480      	push	{r7}
240530ae:	b083      	sub	sp, #12
240530b0:	af00      	add	r7, sp, #0
240530b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
240530b4:	687b      	ldr	r3, [r7, #4]
240530b6:	689a      	ldr	r2, [r3, #8]
240530b8:	4b05      	ldr	r3, [pc, #20]	; (240530d0 <LL_ADC_Enable+0x24>)
240530ba:	4013      	ands	r3, r2
240530bc:	f043 0201 	orr.w	r2, r3, #1
240530c0:	687b      	ldr	r3, [r7, #4]
240530c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
240530c4:	bf00      	nop
240530c6:	370c      	adds	r7, #12
240530c8:	46bd      	mov	sp, r7
240530ca:	f85d 7b04 	ldr.w	r7, [sp], #4
240530ce:	4770      	bx	lr
240530d0:	7fffffc0 	.word	0x7fffffc0

240530d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
240530d4:	b480      	push	{r7}
240530d6:	b083      	sub	sp, #12
240530d8:	af00      	add	r7, sp, #0
240530da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
240530dc:	687b      	ldr	r3, [r7, #4]
240530de:	689b      	ldr	r3, [r3, #8]
240530e0:	f003 0301 	and.w	r3, r3, #1
240530e4:	2b01      	cmp	r3, #1
240530e6:	d101      	bne.n	240530ec <LL_ADC_IsEnabled+0x18>
240530e8:	2301      	movs	r3, #1
240530ea:	e000      	b.n	240530ee <LL_ADC_IsEnabled+0x1a>
240530ec:	2300      	movs	r3, #0
}
240530ee:	4618      	mov	r0, r3
240530f0:	370c      	adds	r7, #12
240530f2:	46bd      	mov	sp, r7
240530f4:	f85d 7b04 	ldr.w	r7, [sp], #4
240530f8:	4770      	bx	lr
	...

240530fc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
240530fc:	b480      	push	{r7}
240530fe:	b083      	sub	sp, #12
24053100:	af00      	add	r7, sp, #0
24053102:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
24053104:	687b      	ldr	r3, [r7, #4]
24053106:	689a      	ldr	r2, [r3, #8]
24053108:	4b05      	ldr	r3, [pc, #20]	; (24053120 <LL_ADC_REG_StartConversion+0x24>)
2405310a:	4013      	ands	r3, r2
2405310c:	f043 0204 	orr.w	r2, r3, #4
24053110:	687b      	ldr	r3, [r7, #4]
24053112:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
24053114:	bf00      	nop
24053116:	370c      	adds	r7, #12
24053118:	46bd      	mov	sp, r7
2405311a:	f85d 7b04 	ldr.w	r7, [sp], #4
2405311e:	4770      	bx	lr
24053120:	7fffffc0 	.word	0x7fffffc0

24053124 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
24053124:	b480      	push	{r7}
24053126:	b083      	sub	sp, #12
24053128:	af00      	add	r7, sp, #0
2405312a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
2405312c:	687b      	ldr	r3, [r7, #4]
2405312e:	689b      	ldr	r3, [r3, #8]
24053130:	f003 0304 	and.w	r3, r3, #4
24053134:	2b04      	cmp	r3, #4
24053136:	d101      	bne.n	2405313c <LL_ADC_REG_IsConversionOngoing+0x18>
24053138:	2301      	movs	r3, #1
2405313a:	e000      	b.n	2405313e <LL_ADC_REG_IsConversionOngoing+0x1a>
2405313c:	2300      	movs	r3, #0
}
2405313e:	4618      	mov	r0, r3
24053140:	370c      	adds	r7, #12
24053142:	46bd      	mov	sp, r7
24053144:	f85d 7b04 	ldr.w	r7, [sp], #4
24053148:	4770      	bx	lr

2405314a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
2405314a:	b480      	push	{r7}
2405314c:	b083      	sub	sp, #12
2405314e:	af00      	add	r7, sp, #0
24053150:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
24053152:	687b      	ldr	r3, [r7, #4]
24053154:	689b      	ldr	r3, [r3, #8]
24053156:	f003 0308 	and.w	r3, r3, #8
2405315a:	2b08      	cmp	r3, #8
2405315c:	d101      	bne.n	24053162 <LL_ADC_INJ_IsConversionOngoing+0x18>
2405315e:	2301      	movs	r3, #1
24053160:	e000      	b.n	24053164 <LL_ADC_INJ_IsConversionOngoing+0x1a>
24053162:	2300      	movs	r3, #0
}
24053164:	4618      	mov	r0, r3
24053166:	370c      	adds	r7, #12
24053168:	46bd      	mov	sp, r7
2405316a:	f85d 7b04 	ldr.w	r7, [sp], #4
2405316e:	4770      	bx	lr

24053170 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
24053170:	b590      	push	{r4, r7, lr}
24053172:	b089      	sub	sp, #36	; 0x24
24053174:	af00      	add	r7, sp, #0
24053176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
24053178:	2300      	movs	r3, #0
2405317a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
2405317c:	2300      	movs	r3, #0
2405317e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
24053180:	687b      	ldr	r3, [r7, #4]
24053182:	2b00      	cmp	r3, #0
24053184:	d101      	bne.n	2405318a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
24053186:	2301      	movs	r3, #1
24053188:	e138      	b.n	240533fc <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
2405318a:	687b      	ldr	r3, [r7, #4]
2405318c:	68db      	ldr	r3, [r3, #12]
2405318e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
24053190:	687b      	ldr	r3, [r7, #4]
24053192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24053194:	2b00      	cmp	r3, #0
24053196:	d109      	bne.n	240531ac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
24053198:	6878      	ldr	r0, [r7, #4]
2405319a:	f7fe fec9 	bl	24051f30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
2405319e:	687b      	ldr	r3, [r7, #4]
240531a0:	2200      	movs	r2, #0
240531a2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
240531a4:	687b      	ldr	r3, [r7, #4]
240531a6:	2200      	movs	r2, #0
240531a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
240531ac:	687b      	ldr	r3, [r7, #4]
240531ae:	681b      	ldr	r3, [r3, #0]
240531b0:	4618      	mov	r0, r3
240531b2:	f7ff ff3f 	bl	24053034 <LL_ADC_IsDeepPowerDownEnabled>
240531b6:	4603      	mov	r3, r0
240531b8:	2b00      	cmp	r3, #0
240531ba:	d004      	beq.n	240531c6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
240531bc:	687b      	ldr	r3, [r7, #4]
240531be:	681b      	ldr	r3, [r3, #0]
240531c0:	4618      	mov	r0, r3
240531c2:	f7ff ff25 	bl	24053010 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
240531c6:	687b      	ldr	r3, [r7, #4]
240531c8:	681b      	ldr	r3, [r3, #0]
240531ca:	4618      	mov	r0, r3
240531cc:	f7ff ff5a 	bl	24053084 <LL_ADC_IsInternalRegulatorEnabled>
240531d0:	4603      	mov	r3, r0
240531d2:	2b00      	cmp	r3, #0
240531d4:	d114      	bne.n	24053200 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
240531d6:	687b      	ldr	r3, [r7, #4]
240531d8:	681b      	ldr	r3, [r3, #0]
240531da:	4618      	mov	r0, r3
240531dc:	f7ff ff3e 	bl	2405305c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
240531e0:	4b88      	ldr	r3, [pc, #544]	; (24053404 <HAL_ADC_Init+0x294>)
240531e2:	681b      	ldr	r3, [r3, #0]
240531e4:	099b      	lsrs	r3, r3, #6
240531e6:	4a88      	ldr	r2, [pc, #544]	; (24053408 <HAL_ADC_Init+0x298>)
240531e8:	fba2 2303 	umull	r2, r3, r2, r3
240531ec:	099b      	lsrs	r3, r3, #6
240531ee:	3301      	adds	r3, #1
240531f0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
240531f2:	e002      	b.n	240531fa <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
240531f4:	68bb      	ldr	r3, [r7, #8]
240531f6:	3b01      	subs	r3, #1
240531f8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
240531fa:	68bb      	ldr	r3, [r7, #8]
240531fc:	2b00      	cmp	r3, #0
240531fe:	d1f9      	bne.n	240531f4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
24053200:	687b      	ldr	r3, [r7, #4]
24053202:	681b      	ldr	r3, [r3, #0]
24053204:	4618      	mov	r0, r3
24053206:	f7ff ff3d 	bl	24053084 <LL_ADC_IsInternalRegulatorEnabled>
2405320a:	4603      	mov	r3, r0
2405320c:	2b00      	cmp	r3, #0
2405320e:	d10d      	bne.n	2405322c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
24053210:	687b      	ldr	r3, [r7, #4]
24053212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24053214:	f043 0210 	orr.w	r2, r3, #16
24053218:	687b      	ldr	r3, [r7, #4]
2405321a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2405321c:	687b      	ldr	r3, [r7, #4]
2405321e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24053220:	f043 0201 	orr.w	r2, r3, #1
24053224:	687b      	ldr	r3, [r7, #4]
24053226:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
24053228:	2301      	movs	r3, #1
2405322a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
2405322c:	687b      	ldr	r3, [r7, #4]
2405322e:	681b      	ldr	r3, [r3, #0]
24053230:	4618      	mov	r0, r3
24053232:	f7ff ff77 	bl	24053124 <LL_ADC_REG_IsConversionOngoing>
24053236:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
24053238:	687b      	ldr	r3, [r7, #4]
2405323a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405323c:	f003 0310 	and.w	r3, r3, #16
24053240:	2b00      	cmp	r3, #0
24053242:	f040 80d2 	bne.w	240533ea <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
24053246:	697b      	ldr	r3, [r7, #20]
24053248:	2b00      	cmp	r3, #0
2405324a:	f040 80ce 	bne.w	240533ea <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
2405324e:	687b      	ldr	r3, [r7, #4]
24053250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24053252:	f423 7381 	bic.w	r3, r3, #258	; 0x102
24053256:	f043 0202 	orr.w	r2, r3, #2
2405325a:	687b      	ldr	r3, [r7, #4]
2405325c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
2405325e:	687b      	ldr	r3, [r7, #4]
24053260:	681b      	ldr	r3, [r3, #0]
24053262:	4618      	mov	r0, r3
24053264:	f7ff ff36 	bl	240530d4 <LL_ADC_IsEnabled>
24053268:	4603      	mov	r3, r0
2405326a:	2b00      	cmp	r3, #0
2405326c:	d110      	bne.n	24053290 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
2405326e:	4867      	ldr	r0, [pc, #412]	; (2405340c <HAL_ADC_Init+0x29c>)
24053270:	f7ff ff30 	bl	240530d4 <LL_ADC_IsEnabled>
24053274:	4604      	mov	r4, r0
24053276:	4866      	ldr	r0, [pc, #408]	; (24053410 <HAL_ADC_Init+0x2a0>)
24053278:	f7ff ff2c 	bl	240530d4 <LL_ADC_IsEnabled>
2405327c:	4603      	mov	r3, r0
2405327e:	4323      	orrs	r3, r4
24053280:	2b00      	cmp	r3, #0
24053282:	d105      	bne.n	24053290 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
24053284:	687b      	ldr	r3, [r7, #4]
24053286:	685b      	ldr	r3, [r3, #4]
24053288:	4619      	mov	r1, r3
2405328a:	4862      	ldr	r0, [pc, #392]	; (24053414 <HAL_ADC_Init+0x2a4>)
2405328c:	f7ff fd7a 	bl	24052d84 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
24053290:	687b      	ldr	r3, [r7, #4]
24053292:	7d5b      	ldrb	r3, [r3, #21]
24053294:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
24053296:	687b      	ldr	r3, [r7, #4]
24053298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
2405329a:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
2405329c:	687b      	ldr	r3, [r7, #4]
2405329e:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
240532a0:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
240532a2:	687b      	ldr	r3, [r7, #4]
240532a4:	7f1b      	ldrb	r3, [r3, #28]
240532a6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
240532a8:	4313      	orrs	r3, r2
240532aa:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
240532ac:	687b      	ldr	r3, [r7, #4]
240532ae:	7f1b      	ldrb	r3, [r3, #28]
240532b0:	2b01      	cmp	r3, #1
240532b2:	d106      	bne.n	240532c2 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
240532b4:	687b      	ldr	r3, [r7, #4]
240532b6:	6a1b      	ldr	r3, [r3, #32]
240532b8:	3b01      	subs	r3, #1
240532ba:	045b      	lsls	r3, r3, #17
240532bc:	69ba      	ldr	r2, [r7, #24]
240532be:	4313      	orrs	r3, r2
240532c0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
240532c2:	687b      	ldr	r3, [r7, #4]
240532c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
240532c6:	2b00      	cmp	r3, #0
240532c8:	d009      	beq.n	240532de <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
240532ca:	687b      	ldr	r3, [r7, #4]
240532cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
240532ce:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
240532d2:	687b      	ldr	r3, [r7, #4]
240532d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
240532d6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
240532d8:	69ba      	ldr	r2, [r7, #24]
240532da:	4313      	orrs	r3, r2
240532dc:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
240532de:	687b      	ldr	r3, [r7, #4]
240532e0:	681b      	ldr	r3, [r3, #0]
240532e2:	68da      	ldr	r2, [r3, #12]
240532e4:	4b4c      	ldr	r3, [pc, #304]	; (24053418 <HAL_ADC_Init+0x2a8>)
240532e6:	4013      	ands	r3, r2
240532e8:	687a      	ldr	r2, [r7, #4]
240532ea:	6812      	ldr	r2, [r2, #0]
240532ec:	69b9      	ldr	r1, [r7, #24]
240532ee:	430b      	orrs	r3, r1
240532f0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
240532f2:	687b      	ldr	r3, [r7, #4]
240532f4:	681b      	ldr	r3, [r3, #0]
240532f6:	4618      	mov	r0, r3
240532f8:	f7ff ff14 	bl	24053124 <LL_ADC_REG_IsConversionOngoing>
240532fc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
240532fe:	687b      	ldr	r3, [r7, #4]
24053300:	681b      	ldr	r3, [r3, #0]
24053302:	4618      	mov	r0, r3
24053304:	f7ff ff21 	bl	2405314a <LL_ADC_INJ_IsConversionOngoing>
24053308:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
2405330a:	693b      	ldr	r3, [r7, #16]
2405330c:	2b00      	cmp	r3, #0
2405330e:	d14a      	bne.n	240533a6 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
24053310:	68fb      	ldr	r3, [r7, #12]
24053312:	2b00      	cmp	r3, #0
24053314:	d147      	bne.n	240533a6 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
24053316:	687b      	ldr	r3, [r7, #4]
24053318:	7d1b      	ldrb	r3, [r3, #20]
2405331a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
2405331c:	687b      	ldr	r3, [r7, #4]
2405331e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
24053320:	4313      	orrs	r3, r2
24053322:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
24053324:	687b      	ldr	r3, [r7, #4]
24053326:	681b      	ldr	r3, [r3, #0]
24053328:	68da      	ldr	r2, [r3, #12]
2405332a:	4b3c      	ldr	r3, [pc, #240]	; (2405341c <HAL_ADC_Init+0x2ac>)
2405332c:	4013      	ands	r3, r2
2405332e:	687a      	ldr	r2, [r7, #4]
24053330:	6812      	ldr	r2, [r2, #0]
24053332:	69b9      	ldr	r1, [r7, #24]
24053334:	430b      	orrs	r3, r1
24053336:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
24053338:	687b      	ldr	r3, [r7, #4]
2405333a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
2405333e:	2b01      	cmp	r3, #1
24053340:	d11b      	bne.n	2405337a <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
24053342:	687b      	ldr	r3, [r7, #4]
24053344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24053346:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
24053348:	687b      	ldr	r3, [r7, #4]
2405334a:	681b      	ldr	r3, [r3, #0]
2405334c:	691a      	ldr	r2, [r3, #16]
2405334e:	4b34      	ldr	r3, [pc, #208]	; (24053420 <HAL_ADC_Init+0x2b0>)
24053350:	4013      	ands	r3, r2
24053352:	687a      	ldr	r2, [r7, #4]
24053354:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
24053356:	3a01      	subs	r2, #1
24053358:	0411      	lsls	r1, r2, #16
2405335a:	687a      	ldr	r2, [r7, #4]
2405335c:	6c12      	ldr	r2, [r2, #64]	; 0x40
2405335e:	4311      	orrs	r1, r2
24053360:	687a      	ldr	r2, [r7, #4]
24053362:	6c52      	ldr	r2, [r2, #68]	; 0x44
24053364:	4311      	orrs	r1, r2
24053366:	687a      	ldr	r2, [r7, #4]
24053368:	6c92      	ldr	r2, [r2, #72]	; 0x48
2405336a:	430a      	orrs	r2, r1
2405336c:	431a      	orrs	r2, r3
2405336e:	687b      	ldr	r3, [r7, #4]
24053370:	681b      	ldr	r3, [r3, #0]
24053372:	f042 0201 	orr.w	r2, r2, #1
24053376:	611a      	str	r2, [r3, #16]
24053378:	e007      	b.n	2405338a <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
2405337a:	687b      	ldr	r3, [r7, #4]
2405337c:	681b      	ldr	r3, [r3, #0]
2405337e:	691a      	ldr	r2, [r3, #16]
24053380:	687b      	ldr	r3, [r7, #4]
24053382:	681b      	ldr	r3, [r3, #0]
24053384:	f022 0201 	bic.w	r2, r2, #1
24053388:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
2405338a:	687b      	ldr	r3, [r7, #4]
2405338c:	681b      	ldr	r3, [r3, #0]
2405338e:	691b      	ldr	r3, [r3, #16]
24053390:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
24053394:	687b      	ldr	r3, [r7, #4]
24053396:	6b5a      	ldr	r2, [r3, #52]	; 0x34
24053398:	687b      	ldr	r3, [r7, #4]
2405339a:	681b      	ldr	r3, [r3, #0]
2405339c:	430a      	orrs	r2, r1
2405339e:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
240533a0:	6878      	ldr	r0, [r7, #4]
240533a2:	f000 ff79 	bl	24054298 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
240533a6:	687b      	ldr	r3, [r7, #4]
240533a8:	68db      	ldr	r3, [r3, #12]
240533aa:	2b01      	cmp	r3, #1
240533ac:	d10c      	bne.n	240533c8 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
240533ae:	687b      	ldr	r3, [r7, #4]
240533b0:	681b      	ldr	r3, [r3, #0]
240533b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240533b4:	f023 010f 	bic.w	r1, r3, #15
240533b8:	687b      	ldr	r3, [r7, #4]
240533ba:	699b      	ldr	r3, [r3, #24]
240533bc:	1e5a      	subs	r2, r3, #1
240533be:	687b      	ldr	r3, [r7, #4]
240533c0:	681b      	ldr	r3, [r3, #0]
240533c2:	430a      	orrs	r2, r1
240533c4:	631a      	str	r2, [r3, #48]	; 0x30
240533c6:	e007      	b.n	240533d8 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
240533c8:	687b      	ldr	r3, [r7, #4]
240533ca:	681b      	ldr	r3, [r3, #0]
240533cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
240533ce:	687b      	ldr	r3, [r7, #4]
240533d0:	681b      	ldr	r3, [r3, #0]
240533d2:	f022 020f 	bic.w	r2, r2, #15
240533d6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
240533d8:	687b      	ldr	r3, [r7, #4]
240533da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240533dc:	f023 0303 	bic.w	r3, r3, #3
240533e0:	f043 0201 	orr.w	r2, r3, #1
240533e4:	687b      	ldr	r3, [r7, #4]
240533e6:	655a      	str	r2, [r3, #84]	; 0x54
240533e8:	e007      	b.n	240533fa <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
240533ea:	687b      	ldr	r3, [r7, #4]
240533ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240533ee:	f043 0210 	orr.w	r2, r3, #16
240533f2:	687b      	ldr	r3, [r7, #4]
240533f4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
240533f6:	2301      	movs	r3, #1
240533f8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
240533fa:	7ffb      	ldrb	r3, [r7, #31]
}
240533fc:	4618      	mov	r0, r3
240533fe:	3724      	adds	r7, #36	; 0x24
24053400:	46bd      	mov	sp, r7
24053402:	bd90      	pop	{r4, r7, pc}
24053404:	20000030 	.word	0x20000030
24053408:	053e2d63 	.word	0x053e2d63
2405340c:	40022000 	.word	0x40022000
24053410:	40022100 	.word	0x40022100
24053414:	40022300 	.word	0x40022300
24053418:	fff0c003 	.word	0xfff0c003
2405341c:	ffffbffc 	.word	0xffffbffc
24053420:	fc00f81e 	.word	0xfc00f81e

24053424 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
24053424:	b580      	push	{r7, lr}
24053426:	b086      	sub	sp, #24
24053428:	af00      	add	r7, sp, #0
2405342a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
2405342c:	4856      	ldr	r0, [pc, #344]	; (24053588 <HAL_ADC_Start+0x164>)
2405342e:	f7ff fdd3 	bl	24052fd8 <LL_ADC_GetMultimode>
24053432:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
24053434:	687b      	ldr	r3, [r7, #4]
24053436:	681b      	ldr	r3, [r3, #0]
24053438:	4618      	mov	r0, r3
2405343a:	f7ff fe73 	bl	24053124 <LL_ADC_REG_IsConversionOngoing>
2405343e:	4603      	mov	r3, r0
24053440:	2b00      	cmp	r3, #0
24053442:	f040 809a 	bne.w	2405357a <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
24053446:	687b      	ldr	r3, [r7, #4]
24053448:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
2405344c:	2b01      	cmp	r3, #1
2405344e:	d101      	bne.n	24053454 <HAL_ADC_Start+0x30>
24053450:	2302      	movs	r3, #2
24053452:	e095      	b.n	24053580 <HAL_ADC_Start+0x15c>
24053454:	687b      	ldr	r3, [r7, #4]
24053456:	2201      	movs	r2, #1
24053458:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
2405345c:	6878      	ldr	r0, [r7, #4]
2405345e:	f000 fe9f 	bl	240541a0 <ADC_Enable>
24053462:	4603      	mov	r3, r0
24053464:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
24053466:	7dfb      	ldrb	r3, [r7, #23]
24053468:	2b00      	cmp	r3, #0
2405346a:	f040 8081 	bne.w	24053570 <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
2405346e:	687b      	ldr	r3, [r7, #4]
24053470:	6d5a      	ldr	r2, [r3, #84]	; 0x54
24053472:	4b46      	ldr	r3, [pc, #280]	; (2405358c <HAL_ADC_Start+0x168>)
24053474:	4013      	ands	r3, r2
24053476:	f443 7280 	orr.w	r2, r3, #256	; 0x100
2405347a:	687b      	ldr	r3, [r7, #4]
2405347c:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
2405347e:	687b      	ldr	r3, [r7, #4]
24053480:	681b      	ldr	r3, [r3, #0]
24053482:	4a43      	ldr	r2, [pc, #268]	; (24053590 <HAL_ADC_Start+0x16c>)
24053484:	4293      	cmp	r3, r2
24053486:	d002      	beq.n	2405348e <HAL_ADC_Start+0x6a>
24053488:	687b      	ldr	r3, [r7, #4]
2405348a:	681b      	ldr	r3, [r3, #0]
2405348c:	e000      	b.n	24053490 <HAL_ADC_Start+0x6c>
2405348e:	4b41      	ldr	r3, [pc, #260]	; (24053594 <HAL_ADC_Start+0x170>)
24053490:	687a      	ldr	r2, [r7, #4]
24053492:	6812      	ldr	r2, [r2, #0]
24053494:	4293      	cmp	r3, r2
24053496:	d002      	beq.n	2405349e <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
24053498:	693b      	ldr	r3, [r7, #16]
2405349a:	2b00      	cmp	r3, #0
2405349c:	d105      	bne.n	240534aa <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
2405349e:	687b      	ldr	r3, [r7, #4]
240534a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240534a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
240534a6:	687b      	ldr	r3, [r7, #4]
240534a8:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
240534aa:	687b      	ldr	r3, [r7, #4]
240534ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240534ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
240534b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
240534b6:	d106      	bne.n	240534c6 <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
240534b8:	687b      	ldr	r3, [r7, #4]
240534ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240534bc:	f023 0206 	bic.w	r2, r3, #6
240534c0:	687b      	ldr	r3, [r7, #4]
240534c2:	659a      	str	r2, [r3, #88]	; 0x58
240534c4:	e002      	b.n	240534cc <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
240534c6:	687b      	ldr	r3, [r7, #4]
240534c8:	2200      	movs	r2, #0
240534ca:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
240534cc:	687b      	ldr	r3, [r7, #4]
240534ce:	681b      	ldr	r3, [r3, #0]
240534d0:	221c      	movs	r2, #28
240534d2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
240534d4:	687b      	ldr	r3, [r7, #4]
240534d6:	2200      	movs	r2, #0
240534d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
240534dc:	687b      	ldr	r3, [r7, #4]
240534de:	681b      	ldr	r3, [r3, #0]
240534e0:	4a2b      	ldr	r2, [pc, #172]	; (24053590 <HAL_ADC_Start+0x16c>)
240534e2:	4293      	cmp	r3, r2
240534e4:	d002      	beq.n	240534ec <HAL_ADC_Start+0xc8>
240534e6:	687b      	ldr	r3, [r7, #4]
240534e8:	681b      	ldr	r3, [r3, #0]
240534ea:	e000      	b.n	240534ee <HAL_ADC_Start+0xca>
240534ec:	4b29      	ldr	r3, [pc, #164]	; (24053594 <HAL_ADC_Start+0x170>)
240534ee:	687a      	ldr	r2, [r7, #4]
240534f0:	6812      	ldr	r2, [r2, #0]
240534f2:	4293      	cmp	r3, r2
240534f4:	d008      	beq.n	24053508 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
240534f6:	693b      	ldr	r3, [r7, #16]
240534f8:	2b00      	cmp	r3, #0
240534fa:	d005      	beq.n	24053508 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
240534fc:	693b      	ldr	r3, [r7, #16]
240534fe:	2b05      	cmp	r3, #5
24053500:	d002      	beq.n	24053508 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
24053502:	693b      	ldr	r3, [r7, #16]
24053504:	2b09      	cmp	r3, #9
24053506:	d114      	bne.n	24053532 <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
24053508:	687b      	ldr	r3, [r7, #4]
2405350a:	681b      	ldr	r3, [r3, #0]
2405350c:	68db      	ldr	r3, [r3, #12]
2405350e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24053512:	2b00      	cmp	r3, #0
24053514:	d007      	beq.n	24053526 <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
24053516:	687b      	ldr	r3, [r7, #4]
24053518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405351a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
2405351e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
24053522:	687b      	ldr	r3, [r7, #4]
24053524:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
24053526:	687b      	ldr	r3, [r7, #4]
24053528:	681b      	ldr	r3, [r3, #0]
2405352a:	4618      	mov	r0, r3
2405352c:	f7ff fde6 	bl	240530fc <LL_ADC_REG_StartConversion>
24053530:	e025      	b.n	2405357e <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
24053532:	687b      	ldr	r3, [r7, #4]
24053534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24053536:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
2405353a:	687b      	ldr	r3, [r7, #4]
2405353c:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
2405353e:	687b      	ldr	r3, [r7, #4]
24053540:	681b      	ldr	r3, [r3, #0]
24053542:	4a13      	ldr	r2, [pc, #76]	; (24053590 <HAL_ADC_Start+0x16c>)
24053544:	4293      	cmp	r3, r2
24053546:	d002      	beq.n	2405354e <HAL_ADC_Start+0x12a>
24053548:	687b      	ldr	r3, [r7, #4]
2405354a:	681b      	ldr	r3, [r3, #0]
2405354c:	e000      	b.n	24053550 <HAL_ADC_Start+0x12c>
2405354e:	4b11      	ldr	r3, [pc, #68]	; (24053594 <HAL_ADC_Start+0x170>)
24053550:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
24053552:	68fb      	ldr	r3, [r7, #12]
24053554:	68db      	ldr	r3, [r3, #12]
24053556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2405355a:	2b00      	cmp	r3, #0
2405355c:	d00f      	beq.n	2405357e <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
2405355e:	687b      	ldr	r3, [r7, #4]
24053560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24053562:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
24053566:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
2405356a:	687b      	ldr	r3, [r7, #4]
2405356c:	655a      	str	r2, [r3, #84]	; 0x54
2405356e:	e006      	b.n	2405357e <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
24053570:	687b      	ldr	r3, [r7, #4]
24053572:	2200      	movs	r2, #0
24053574:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
24053578:	e001      	b.n	2405357e <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
2405357a:	2302      	movs	r3, #2
2405357c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
2405357e:	7dfb      	ldrb	r3, [r7, #23]
}
24053580:	4618      	mov	r0, r3
24053582:	3718      	adds	r7, #24
24053584:	46bd      	mov	sp, r7
24053586:	bd80      	pop	{r7, pc}
24053588:	40022300 	.word	0x40022300
2405358c:	fffff0fe 	.word	0xfffff0fe
24053590:	40022100 	.word	0x40022100
24053594:	40022000 	.word	0x40022000

24053598 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
24053598:	b580      	push	{r7, lr}
2405359a:	b088      	sub	sp, #32
2405359c:	af00      	add	r7, sp, #0
2405359e:	6078      	str	r0, [r7, #4]
240535a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
240535a2:	4866      	ldr	r0, [pc, #408]	; (2405373c <HAL_ADC_PollForConversion+0x1a4>)
240535a4:	f7ff fd18 	bl	24052fd8 <LL_ADC_GetMultimode>
240535a8:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
240535aa:	687b      	ldr	r3, [r7, #4]
240535ac:	691b      	ldr	r3, [r3, #16]
240535ae:	2b08      	cmp	r3, #8
240535b0:	d102      	bne.n	240535b8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
240535b2:	2308      	movs	r3, #8
240535b4:	61fb      	str	r3, [r7, #28]
240535b6:	e02a      	b.n	2405360e <HAL_ADC_PollForConversion+0x76>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
240535b8:	697b      	ldr	r3, [r7, #20]
240535ba:	2b00      	cmp	r3, #0
240535bc:	d005      	beq.n	240535ca <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
240535be:	697b      	ldr	r3, [r7, #20]
240535c0:	2b05      	cmp	r3, #5
240535c2:	d002      	beq.n	240535ca <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
240535c4:	697b      	ldr	r3, [r7, #20]
240535c6:	2b09      	cmp	r3, #9
240535c8:	d111      	bne.n	240535ee <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
240535ca:	687b      	ldr	r3, [r7, #4]
240535cc:	681b      	ldr	r3, [r3, #0]
240535ce:	68db      	ldr	r3, [r3, #12]
240535d0:	f003 0301 	and.w	r3, r3, #1
240535d4:	2b00      	cmp	r3, #0
240535d6:	d007      	beq.n	240535e8 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
240535d8:	687b      	ldr	r3, [r7, #4]
240535da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240535dc:	f043 0220 	orr.w	r2, r3, #32
240535e0:	687b      	ldr	r3, [r7, #4]
240535e2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
240535e4:	2301      	movs	r3, #1
240535e6:	e0a4      	b.n	24053732 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
240535e8:	2304      	movs	r3, #4
240535ea:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
240535ec:	e00f      	b.n	2405360e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
240535ee:	4853      	ldr	r0, [pc, #332]	; (2405373c <HAL_ADC_PollForConversion+0x1a4>)
240535f0:	f7ff fd00 	bl	24052ff4 <LL_ADC_GetMultiDMATransfer>
240535f4:	4603      	mov	r3, r0
240535f6:	2b00      	cmp	r3, #0
240535f8:	d007      	beq.n	2405360a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
240535fa:	687b      	ldr	r3, [r7, #4]
240535fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240535fe:	f043 0220 	orr.w	r2, r3, #32
24053602:	687b      	ldr	r3, [r7, #4]
24053604:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
24053606:	2301      	movs	r3, #1
24053608:	e093      	b.n	24053732 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
2405360a:	2304      	movs	r3, #4
2405360c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
2405360e:	f7ff fb89 	bl	24052d24 <HAL_GetTick>
24053612:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
24053614:	e021      	b.n	2405365a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
24053616:	683b      	ldr	r3, [r7, #0]
24053618:	f1b3 3fff 	cmp.w	r3, #4294967295
2405361c:	d01d      	beq.n	2405365a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
2405361e:	f7ff fb81 	bl	24052d24 <HAL_GetTick>
24053622:	4602      	mov	r2, r0
24053624:	693b      	ldr	r3, [r7, #16]
24053626:	1ad3      	subs	r3, r2, r3
24053628:	683a      	ldr	r2, [r7, #0]
2405362a:	429a      	cmp	r2, r3
2405362c:	d302      	bcc.n	24053634 <HAL_ADC_PollForConversion+0x9c>
2405362e:	683b      	ldr	r3, [r7, #0]
24053630:	2b00      	cmp	r3, #0
24053632:	d112      	bne.n	2405365a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
24053634:	687b      	ldr	r3, [r7, #4]
24053636:	681b      	ldr	r3, [r3, #0]
24053638:	681a      	ldr	r2, [r3, #0]
2405363a:	69fb      	ldr	r3, [r7, #28]
2405363c:	4013      	ands	r3, r2
2405363e:	2b00      	cmp	r3, #0
24053640:	d10b      	bne.n	2405365a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
24053642:	687b      	ldr	r3, [r7, #4]
24053644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24053646:	f043 0204 	orr.w	r2, r3, #4
2405364a:	687b      	ldr	r3, [r7, #4]
2405364c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
2405364e:	687b      	ldr	r3, [r7, #4]
24053650:	2200      	movs	r2, #0
24053652:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
24053656:	2303      	movs	r3, #3
24053658:	e06b      	b.n	24053732 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
2405365a:	687b      	ldr	r3, [r7, #4]
2405365c:	681b      	ldr	r3, [r3, #0]
2405365e:	681a      	ldr	r2, [r3, #0]
24053660:	69fb      	ldr	r3, [r7, #28]
24053662:	4013      	ands	r3, r2
24053664:	2b00      	cmp	r3, #0
24053666:	d0d6      	beq.n	24053616 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
24053668:	687b      	ldr	r3, [r7, #4]
2405366a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405366c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
24053670:	687b      	ldr	r3, [r7, #4]
24053672:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
24053674:	687b      	ldr	r3, [r7, #4]
24053676:	681b      	ldr	r3, [r3, #0]
24053678:	4618      	mov	r0, r3
2405367a:	f7ff fc0b 	bl	24052e94 <LL_ADC_REG_IsTriggerSourceSWStart>
2405367e:	4603      	mov	r3, r0
24053680:	2b00      	cmp	r3, #0
24053682:	d01c      	beq.n	240536be <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
24053684:	687b      	ldr	r3, [r7, #4]
24053686:	7d5b      	ldrb	r3, [r3, #21]
24053688:	2b00      	cmp	r3, #0
2405368a:	d118      	bne.n	240536be <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
2405368c:	687b      	ldr	r3, [r7, #4]
2405368e:	681b      	ldr	r3, [r3, #0]
24053690:	681b      	ldr	r3, [r3, #0]
24053692:	f003 0308 	and.w	r3, r3, #8
24053696:	2b08      	cmp	r3, #8
24053698:	d111      	bne.n	240536be <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
2405369a:	687b      	ldr	r3, [r7, #4]
2405369c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405369e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
240536a2:	687b      	ldr	r3, [r7, #4]
240536a4:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
240536a6:	687b      	ldr	r3, [r7, #4]
240536a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240536aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
240536ae:	2b00      	cmp	r3, #0
240536b0:	d105      	bne.n	240536be <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
240536b2:	687b      	ldr	r3, [r7, #4]
240536b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240536b6:	f043 0201 	orr.w	r2, r3, #1
240536ba:	687b      	ldr	r3, [r7, #4]
240536bc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
240536be:	687b      	ldr	r3, [r7, #4]
240536c0:	681b      	ldr	r3, [r3, #0]
240536c2:	4a1f      	ldr	r2, [pc, #124]	; (24053740 <HAL_ADC_PollForConversion+0x1a8>)
240536c4:	4293      	cmp	r3, r2
240536c6:	d002      	beq.n	240536ce <HAL_ADC_PollForConversion+0x136>
240536c8:	687b      	ldr	r3, [r7, #4]
240536ca:	681b      	ldr	r3, [r3, #0]
240536cc:	e000      	b.n	240536d0 <HAL_ADC_PollForConversion+0x138>
240536ce:	4b1d      	ldr	r3, [pc, #116]	; (24053744 <HAL_ADC_PollForConversion+0x1ac>)
240536d0:	687a      	ldr	r2, [r7, #4]
240536d2:	6812      	ldr	r2, [r2, #0]
240536d4:	4293      	cmp	r3, r2
240536d6:	d008      	beq.n	240536ea <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
240536d8:	697b      	ldr	r3, [r7, #20]
240536da:	2b00      	cmp	r3, #0
240536dc:	d005      	beq.n	240536ea <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
240536de:	697b      	ldr	r3, [r7, #20]
240536e0:	2b05      	cmp	r3, #5
240536e2:	d002      	beq.n	240536ea <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
240536e4:	697b      	ldr	r3, [r7, #20]
240536e6:	2b09      	cmp	r3, #9
240536e8:	d104      	bne.n	240536f4 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
240536ea:	687b      	ldr	r3, [r7, #4]
240536ec:	681b      	ldr	r3, [r3, #0]
240536ee:	68db      	ldr	r3, [r3, #12]
240536f0:	61bb      	str	r3, [r7, #24]
240536f2:	e00c      	b.n	2405370e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
240536f4:	687b      	ldr	r3, [r7, #4]
240536f6:	681b      	ldr	r3, [r3, #0]
240536f8:	4a11      	ldr	r2, [pc, #68]	; (24053740 <HAL_ADC_PollForConversion+0x1a8>)
240536fa:	4293      	cmp	r3, r2
240536fc:	d002      	beq.n	24053704 <HAL_ADC_PollForConversion+0x16c>
240536fe:	687b      	ldr	r3, [r7, #4]
24053700:	681b      	ldr	r3, [r3, #0]
24053702:	e000      	b.n	24053706 <HAL_ADC_PollForConversion+0x16e>
24053704:	4b0f      	ldr	r3, [pc, #60]	; (24053744 <HAL_ADC_PollForConversion+0x1ac>)
24053706:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
24053708:	68fb      	ldr	r3, [r7, #12]
2405370a:	68db      	ldr	r3, [r3, #12]
2405370c:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
2405370e:	69fb      	ldr	r3, [r7, #28]
24053710:	2b08      	cmp	r3, #8
24053712:	d104      	bne.n	2405371e <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
24053714:	687b      	ldr	r3, [r7, #4]
24053716:	681b      	ldr	r3, [r3, #0]
24053718:	2208      	movs	r2, #8
2405371a:	601a      	str	r2, [r3, #0]
2405371c:	e008      	b.n	24053730 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
2405371e:	69bb      	ldr	r3, [r7, #24]
24053720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
24053724:	2b00      	cmp	r3, #0
24053726:	d103      	bne.n	24053730 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
24053728:	687b      	ldr	r3, [r7, #4]
2405372a:	681b      	ldr	r3, [r3, #0]
2405372c:	220c      	movs	r2, #12
2405372e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
24053730:	2300      	movs	r3, #0
}
24053732:	4618      	mov	r0, r3
24053734:	3720      	adds	r7, #32
24053736:	46bd      	mov	sp, r7
24053738:	bd80      	pop	{r7, pc}
2405373a:	bf00      	nop
2405373c:	40022300 	.word	0x40022300
24053740:	40022100 	.word	0x40022100
24053744:	40022000 	.word	0x40022000

24053748 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
24053748:	b480      	push	{r7}
2405374a:	b083      	sub	sp, #12
2405374c:	af00      	add	r7, sp, #0
2405374e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
24053750:	687b      	ldr	r3, [r7, #4]
24053752:	681b      	ldr	r3, [r3, #0]
24053754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
24053756:	4618      	mov	r0, r3
24053758:	370c      	adds	r7, #12
2405375a:	46bd      	mov	sp, r7
2405375c:	f85d 7b04 	ldr.w	r7, [sp], #4
24053760:	4770      	bx	lr
	...

24053764 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
24053764:	b580      	push	{r7, lr}
24053766:	b08a      	sub	sp, #40	; 0x28
24053768:	af00      	add	r7, sp, #0
2405376a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
2405376c:	2300      	movs	r3, #0
2405376e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
24053770:	687b      	ldr	r3, [r7, #4]
24053772:	681b      	ldr	r3, [r3, #0]
24053774:	681b      	ldr	r3, [r3, #0]
24053776:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
24053778:	687b      	ldr	r3, [r7, #4]
2405377a:	681b      	ldr	r3, [r3, #0]
2405377c:	685b      	ldr	r3, [r3, #4]
2405377e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
24053780:	4882      	ldr	r0, [pc, #520]	; (2405398c <HAL_ADC_IRQHandler+0x228>)
24053782:	f7ff fc29 	bl	24052fd8 <LL_ADC_GetMultimode>
24053786:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
24053788:	69fb      	ldr	r3, [r7, #28]
2405378a:	f003 0302 	and.w	r3, r3, #2
2405378e:	2b00      	cmp	r3, #0
24053790:	d017      	beq.n	240537c2 <HAL_ADC_IRQHandler+0x5e>
24053792:	69bb      	ldr	r3, [r7, #24]
24053794:	f003 0302 	and.w	r3, r3, #2
24053798:	2b00      	cmp	r3, #0
2405379a:	d012      	beq.n	240537c2 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
2405379c:	687b      	ldr	r3, [r7, #4]
2405379e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240537a0:	f003 0310 	and.w	r3, r3, #16
240537a4:	2b00      	cmp	r3, #0
240537a6:	d105      	bne.n	240537b4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
240537a8:	687b      	ldr	r3, [r7, #4]
240537aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240537ac:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
240537b0:	687b      	ldr	r3, [r7, #4]
240537b2:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
240537b4:	6878      	ldr	r0, [r7, #4]
240537b6:	f000 fe89 	bl	240544cc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
240537ba:	687b      	ldr	r3, [r7, #4]
240537bc:	681b      	ldr	r3, [r3, #0]
240537be:	2202      	movs	r2, #2
240537c0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
240537c2:	69fb      	ldr	r3, [r7, #28]
240537c4:	f003 0304 	and.w	r3, r3, #4
240537c8:	2b00      	cmp	r3, #0
240537ca:	d004      	beq.n	240537d6 <HAL_ADC_IRQHandler+0x72>
240537cc:	69bb      	ldr	r3, [r7, #24]
240537ce:	f003 0304 	and.w	r3, r3, #4
240537d2:	2b00      	cmp	r3, #0
240537d4:	d10a      	bne.n	240537ec <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
240537d6:	69fb      	ldr	r3, [r7, #28]
240537d8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
240537dc:	2b00      	cmp	r3, #0
240537de:	f000 8083 	beq.w	240538e8 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
240537e2:	69bb      	ldr	r3, [r7, #24]
240537e4:	f003 0308 	and.w	r3, r3, #8
240537e8:	2b00      	cmp	r3, #0
240537ea:	d07d      	beq.n	240538e8 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
240537ec:	687b      	ldr	r3, [r7, #4]
240537ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240537f0:	f003 0310 	and.w	r3, r3, #16
240537f4:	2b00      	cmp	r3, #0
240537f6:	d105      	bne.n	24053804 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
240537f8:	687b      	ldr	r3, [r7, #4]
240537fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240537fc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
24053800:	687b      	ldr	r3, [r7, #4]
24053802:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
24053804:	687b      	ldr	r3, [r7, #4]
24053806:	681b      	ldr	r3, [r3, #0]
24053808:	4618      	mov	r0, r3
2405380a:	f7ff fb43 	bl	24052e94 <LL_ADC_REG_IsTriggerSourceSWStart>
2405380e:	4603      	mov	r3, r0
24053810:	2b00      	cmp	r3, #0
24053812:	d062      	beq.n	240538da <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
24053814:	687b      	ldr	r3, [r7, #4]
24053816:	681b      	ldr	r3, [r3, #0]
24053818:	4a5d      	ldr	r2, [pc, #372]	; (24053990 <HAL_ADC_IRQHandler+0x22c>)
2405381a:	4293      	cmp	r3, r2
2405381c:	d002      	beq.n	24053824 <HAL_ADC_IRQHandler+0xc0>
2405381e:	687b      	ldr	r3, [r7, #4]
24053820:	681b      	ldr	r3, [r3, #0]
24053822:	e000      	b.n	24053826 <HAL_ADC_IRQHandler+0xc2>
24053824:	4b5b      	ldr	r3, [pc, #364]	; (24053994 <HAL_ADC_IRQHandler+0x230>)
24053826:	687a      	ldr	r2, [r7, #4]
24053828:	6812      	ldr	r2, [r2, #0]
2405382a:	4293      	cmp	r3, r2
2405382c:	d008      	beq.n	24053840 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
2405382e:	697b      	ldr	r3, [r7, #20]
24053830:	2b00      	cmp	r3, #0
24053832:	d005      	beq.n	24053840 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
24053834:	697b      	ldr	r3, [r7, #20]
24053836:	2b05      	cmp	r3, #5
24053838:	d002      	beq.n	24053840 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
2405383a:	697b      	ldr	r3, [r7, #20]
2405383c:	2b09      	cmp	r3, #9
2405383e:	d104      	bne.n	2405384a <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
24053840:	687b      	ldr	r3, [r7, #4]
24053842:	681b      	ldr	r3, [r3, #0]
24053844:	68db      	ldr	r3, [r3, #12]
24053846:	623b      	str	r3, [r7, #32]
24053848:	e00c      	b.n	24053864 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
2405384a:	687b      	ldr	r3, [r7, #4]
2405384c:	681b      	ldr	r3, [r3, #0]
2405384e:	4a50      	ldr	r2, [pc, #320]	; (24053990 <HAL_ADC_IRQHandler+0x22c>)
24053850:	4293      	cmp	r3, r2
24053852:	d002      	beq.n	2405385a <HAL_ADC_IRQHandler+0xf6>
24053854:	687b      	ldr	r3, [r7, #4]
24053856:	681b      	ldr	r3, [r3, #0]
24053858:	e000      	b.n	2405385c <HAL_ADC_IRQHandler+0xf8>
2405385a:	4b4e      	ldr	r3, [pc, #312]	; (24053994 <HAL_ADC_IRQHandler+0x230>)
2405385c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
2405385e:	693b      	ldr	r3, [r7, #16]
24053860:	68db      	ldr	r3, [r3, #12]
24053862:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
24053864:	6a3b      	ldr	r3, [r7, #32]
24053866:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
2405386a:	2b00      	cmp	r3, #0
2405386c:	d135      	bne.n	240538da <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
2405386e:	687b      	ldr	r3, [r7, #4]
24053870:	681b      	ldr	r3, [r3, #0]
24053872:	681b      	ldr	r3, [r3, #0]
24053874:	f003 0308 	and.w	r3, r3, #8
24053878:	2b08      	cmp	r3, #8
2405387a:	d12e      	bne.n	240538da <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
2405387c:	687b      	ldr	r3, [r7, #4]
2405387e:	681b      	ldr	r3, [r3, #0]
24053880:	4618      	mov	r0, r3
24053882:	f7ff fc4f 	bl	24053124 <LL_ADC_REG_IsConversionOngoing>
24053886:	4603      	mov	r3, r0
24053888:	2b00      	cmp	r3, #0
2405388a:	d11a      	bne.n	240538c2 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
2405388c:	687b      	ldr	r3, [r7, #4]
2405388e:	681b      	ldr	r3, [r3, #0]
24053890:	685a      	ldr	r2, [r3, #4]
24053892:	687b      	ldr	r3, [r7, #4]
24053894:	681b      	ldr	r3, [r3, #0]
24053896:	f022 020c 	bic.w	r2, r2, #12
2405389a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
2405389c:	687b      	ldr	r3, [r7, #4]
2405389e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240538a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
240538a4:	687b      	ldr	r3, [r7, #4]
240538a6:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
240538a8:	687b      	ldr	r3, [r7, #4]
240538aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240538ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
240538b0:	2b00      	cmp	r3, #0
240538b2:	d112      	bne.n	240538da <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
240538b4:	687b      	ldr	r3, [r7, #4]
240538b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240538b8:	f043 0201 	orr.w	r2, r3, #1
240538bc:	687b      	ldr	r3, [r7, #4]
240538be:	655a      	str	r2, [r3, #84]	; 0x54
240538c0:	e00b      	b.n	240538da <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
240538c2:	687b      	ldr	r3, [r7, #4]
240538c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240538c6:	f043 0210 	orr.w	r2, r3, #16
240538ca:	687b      	ldr	r3, [r7, #4]
240538cc:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
240538ce:	687b      	ldr	r3, [r7, #4]
240538d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240538d2:	f043 0201 	orr.w	r2, r3, #1
240538d6:	687b      	ldr	r3, [r7, #4]
240538d8:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
240538da:	6878      	ldr	r0, [r7, #4]
240538dc:	f000 f95c 	bl	24053b98 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
240538e0:	687b      	ldr	r3, [r7, #4]
240538e2:	681b      	ldr	r3, [r3, #0]
240538e4:	220c      	movs	r2, #12
240538e6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
240538e8:	69fb      	ldr	r3, [r7, #28]
240538ea:	f003 0320 	and.w	r3, r3, #32
240538ee:	2b00      	cmp	r3, #0
240538f0:	d004      	beq.n	240538fc <HAL_ADC_IRQHandler+0x198>
240538f2:	69bb      	ldr	r3, [r7, #24]
240538f4:	f003 0320 	and.w	r3, r3, #32
240538f8:	2b00      	cmp	r3, #0
240538fa:	d10b      	bne.n	24053914 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
240538fc:	69fb      	ldr	r3, [r7, #28]
240538fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
24053902:	2b00      	cmp	r3, #0
24053904:	f000 809f 	beq.w	24053a46 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
24053908:	69bb      	ldr	r3, [r7, #24]
2405390a:	f003 0340 	and.w	r3, r3, #64	; 0x40
2405390e:	2b00      	cmp	r3, #0
24053910:	f000 8099 	beq.w	24053a46 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
24053914:	687b      	ldr	r3, [r7, #4]
24053916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24053918:	f003 0310 	and.w	r3, r3, #16
2405391c:	2b00      	cmp	r3, #0
2405391e:	d105      	bne.n	2405392c <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
24053920:	687b      	ldr	r3, [r7, #4]
24053922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24053924:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
24053928:	687b      	ldr	r3, [r7, #4]
2405392a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
2405392c:	687b      	ldr	r3, [r7, #4]
2405392e:	681b      	ldr	r3, [r3, #0]
24053930:	4618      	mov	r0, r3
24053932:	f7ff faee 	bl	24052f12 <LL_ADC_INJ_IsTriggerSourceSWStart>
24053936:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
24053938:	687b      	ldr	r3, [r7, #4]
2405393a:	681b      	ldr	r3, [r3, #0]
2405393c:	4618      	mov	r0, r3
2405393e:	f7ff faa9 	bl	24052e94 <LL_ADC_REG_IsTriggerSourceSWStart>
24053942:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
24053944:	687b      	ldr	r3, [r7, #4]
24053946:	681b      	ldr	r3, [r3, #0]
24053948:	4a11      	ldr	r2, [pc, #68]	; (24053990 <HAL_ADC_IRQHandler+0x22c>)
2405394a:	4293      	cmp	r3, r2
2405394c:	d002      	beq.n	24053954 <HAL_ADC_IRQHandler+0x1f0>
2405394e:	687b      	ldr	r3, [r7, #4]
24053950:	681b      	ldr	r3, [r3, #0]
24053952:	e000      	b.n	24053956 <HAL_ADC_IRQHandler+0x1f2>
24053954:	4b0f      	ldr	r3, [pc, #60]	; (24053994 <HAL_ADC_IRQHandler+0x230>)
24053956:	687a      	ldr	r2, [r7, #4]
24053958:	6812      	ldr	r2, [r2, #0]
2405395a:	4293      	cmp	r3, r2
2405395c:	d008      	beq.n	24053970 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
2405395e:	697b      	ldr	r3, [r7, #20]
24053960:	2b00      	cmp	r3, #0
24053962:	d005      	beq.n	24053970 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
24053964:	697b      	ldr	r3, [r7, #20]
24053966:	2b06      	cmp	r3, #6
24053968:	d002      	beq.n	24053970 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
2405396a:	697b      	ldr	r3, [r7, #20]
2405396c:	2b07      	cmp	r3, #7
2405396e:	d104      	bne.n	2405397a <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
24053970:	687b      	ldr	r3, [r7, #4]
24053972:	681b      	ldr	r3, [r3, #0]
24053974:	68db      	ldr	r3, [r3, #12]
24053976:	623b      	str	r3, [r7, #32]
24053978:	e013      	b.n	240539a2 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
2405397a:	687b      	ldr	r3, [r7, #4]
2405397c:	681b      	ldr	r3, [r3, #0]
2405397e:	4a04      	ldr	r2, [pc, #16]	; (24053990 <HAL_ADC_IRQHandler+0x22c>)
24053980:	4293      	cmp	r3, r2
24053982:	d009      	beq.n	24053998 <HAL_ADC_IRQHandler+0x234>
24053984:	687b      	ldr	r3, [r7, #4]
24053986:	681b      	ldr	r3, [r3, #0]
24053988:	e007      	b.n	2405399a <HAL_ADC_IRQHandler+0x236>
2405398a:	bf00      	nop
2405398c:	40022300 	.word	0x40022300
24053990:	40022100 	.word	0x40022100
24053994:	40022000 	.word	0x40022000
24053998:	4b7d      	ldr	r3, [pc, #500]	; (24053b90 <HAL_ADC_IRQHandler+0x42c>)
2405399a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
2405399c:	693b      	ldr	r3, [r7, #16]
2405399e:	68db      	ldr	r3, [r3, #12]
240539a0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
240539a2:	68fb      	ldr	r3, [r7, #12]
240539a4:	2b00      	cmp	r3, #0
240539a6:	d047      	beq.n	24053a38 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
240539a8:	6a3b      	ldr	r3, [r7, #32]
240539aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
240539ae:	2b00      	cmp	r3, #0
240539b0:	d007      	beq.n	240539c2 <HAL_ADC_IRQHandler+0x25e>
240539b2:	68bb      	ldr	r3, [r7, #8]
240539b4:	2b00      	cmp	r3, #0
240539b6:	d03f      	beq.n	24053a38 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
240539b8:	6a3b      	ldr	r3, [r7, #32]
240539ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
240539be:	2b00      	cmp	r3, #0
240539c0:	d13a      	bne.n	24053a38 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
240539c2:	687b      	ldr	r3, [r7, #4]
240539c4:	681b      	ldr	r3, [r3, #0]
240539c6:	681b      	ldr	r3, [r3, #0]
240539c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
240539cc:	2b40      	cmp	r3, #64	; 0x40
240539ce:	d133      	bne.n	24053a38 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
240539d0:	6a3b      	ldr	r3, [r7, #32]
240539d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
240539d6:	2b00      	cmp	r3, #0
240539d8:	d12e      	bne.n	24053a38 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
240539da:	687b      	ldr	r3, [r7, #4]
240539dc:	681b      	ldr	r3, [r3, #0]
240539de:	4618      	mov	r0, r3
240539e0:	f7ff fbb3 	bl	2405314a <LL_ADC_INJ_IsConversionOngoing>
240539e4:	4603      	mov	r3, r0
240539e6:	2b00      	cmp	r3, #0
240539e8:	d11a      	bne.n	24053a20 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
240539ea:	687b      	ldr	r3, [r7, #4]
240539ec:	681b      	ldr	r3, [r3, #0]
240539ee:	685a      	ldr	r2, [r3, #4]
240539f0:	687b      	ldr	r3, [r7, #4]
240539f2:	681b      	ldr	r3, [r3, #0]
240539f4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
240539f8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
240539fa:	687b      	ldr	r3, [r7, #4]
240539fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240539fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
24053a02:	687b      	ldr	r3, [r7, #4]
24053a04:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
24053a06:	687b      	ldr	r3, [r7, #4]
24053a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24053a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
24053a0e:	2b00      	cmp	r3, #0
24053a10:	d112      	bne.n	24053a38 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
24053a12:	687b      	ldr	r3, [r7, #4]
24053a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24053a16:	f043 0201 	orr.w	r2, r3, #1
24053a1a:	687b      	ldr	r3, [r7, #4]
24053a1c:	655a      	str	r2, [r3, #84]	; 0x54
24053a1e:	e00b      	b.n	24053a38 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
24053a20:	687b      	ldr	r3, [r7, #4]
24053a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24053a24:	f043 0210 	orr.w	r2, r3, #16
24053a28:	687b      	ldr	r3, [r7, #4]
24053a2a:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
24053a2c:	687b      	ldr	r3, [r7, #4]
24053a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24053a30:	f043 0201 	orr.w	r2, r3, #1
24053a34:	687b      	ldr	r3, [r7, #4]
24053a36:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
24053a38:	6878      	ldr	r0, [r7, #4]
24053a3a:	f000 fd1f 	bl	2405447c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
24053a3e:	687b      	ldr	r3, [r7, #4]
24053a40:	681b      	ldr	r3, [r3, #0]
24053a42:	2260      	movs	r2, #96	; 0x60
24053a44:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
24053a46:	69fb      	ldr	r3, [r7, #28]
24053a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
24053a4c:	2b00      	cmp	r3, #0
24053a4e:	d011      	beq.n	24053a74 <HAL_ADC_IRQHandler+0x310>
24053a50:	69bb      	ldr	r3, [r7, #24]
24053a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
24053a56:	2b00      	cmp	r3, #0
24053a58:	d00c      	beq.n	24053a74 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
24053a5a:	687b      	ldr	r3, [r7, #4]
24053a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24053a5e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
24053a62:	687b      	ldr	r3, [r7, #4]
24053a64:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
24053a66:	6878      	ldr	r0, [r7, #4]
24053a68:	f000 f8a0 	bl	24053bac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
24053a6c:	687b      	ldr	r3, [r7, #4]
24053a6e:	681b      	ldr	r3, [r3, #0]
24053a70:	2280      	movs	r2, #128	; 0x80
24053a72:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
24053a74:	69fb      	ldr	r3, [r7, #28]
24053a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
24053a7a:	2b00      	cmp	r3, #0
24053a7c:	d012      	beq.n	24053aa4 <HAL_ADC_IRQHandler+0x340>
24053a7e:	69bb      	ldr	r3, [r7, #24]
24053a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
24053a84:	2b00      	cmp	r3, #0
24053a86:	d00d      	beq.n	24053aa4 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
24053a88:	687b      	ldr	r3, [r7, #4]
24053a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24053a8c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
24053a90:	687b      	ldr	r3, [r7, #4]
24053a92:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
24053a94:	6878      	ldr	r0, [r7, #4]
24053a96:	f000 fd05 	bl	240544a4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
24053a9a:	687b      	ldr	r3, [r7, #4]
24053a9c:	681b      	ldr	r3, [r3, #0]
24053a9e:	f44f 7280 	mov.w	r2, #256	; 0x100
24053aa2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
24053aa4:	69fb      	ldr	r3, [r7, #28]
24053aa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
24053aaa:	2b00      	cmp	r3, #0
24053aac:	d012      	beq.n	24053ad4 <HAL_ADC_IRQHandler+0x370>
24053aae:	69bb      	ldr	r3, [r7, #24]
24053ab0:	f403 7300 	and.w	r3, r3, #512	; 0x200
24053ab4:	2b00      	cmp	r3, #0
24053ab6:	d00d      	beq.n	24053ad4 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
24053ab8:	687b      	ldr	r3, [r7, #4]
24053aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24053abc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
24053ac0:	687b      	ldr	r3, [r7, #4]
24053ac2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
24053ac4:	6878      	ldr	r0, [r7, #4]
24053ac6:	f000 fcf7 	bl	240544b8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
24053aca:	687b      	ldr	r3, [r7, #4]
24053acc:	681b      	ldr	r3, [r3, #0]
24053ace:	f44f 7200 	mov.w	r2, #512	; 0x200
24053ad2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
24053ad4:	69fb      	ldr	r3, [r7, #28]
24053ad6:	f003 0310 	and.w	r3, r3, #16
24053ada:	2b00      	cmp	r3, #0
24053adc:	d036      	beq.n	24053b4c <HAL_ADC_IRQHandler+0x3e8>
24053ade:	69bb      	ldr	r3, [r7, #24]
24053ae0:	f003 0310 	and.w	r3, r3, #16
24053ae4:	2b00      	cmp	r3, #0
24053ae6:	d031      	beq.n	24053b4c <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
24053ae8:	687b      	ldr	r3, [r7, #4]
24053aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24053aec:	2b00      	cmp	r3, #0
24053aee:	d102      	bne.n	24053af6 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
24053af0:	2301      	movs	r3, #1
24053af2:	627b      	str	r3, [r7, #36]	; 0x24
24053af4:	e014      	b.n	24053b20 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
24053af6:	697b      	ldr	r3, [r7, #20]
24053af8:	2b00      	cmp	r3, #0
24053afa:	d008      	beq.n	24053b0e <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
24053afc:	4825      	ldr	r0, [pc, #148]	; (24053b94 <HAL_ADC_IRQHandler+0x430>)
24053afe:	f7ff fa79 	bl	24052ff4 <LL_ADC_GetMultiDMATransfer>
24053b02:	4603      	mov	r3, r0
24053b04:	2b00      	cmp	r3, #0
24053b06:	d00b      	beq.n	24053b20 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
24053b08:	2301      	movs	r3, #1
24053b0a:	627b      	str	r3, [r7, #36]	; 0x24
24053b0c:	e008      	b.n	24053b20 <HAL_ADC_IRQHandler+0x3bc>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
24053b0e:	687b      	ldr	r3, [r7, #4]
24053b10:	681b      	ldr	r3, [r3, #0]
24053b12:	68db      	ldr	r3, [r3, #12]
24053b14:	f003 0303 	and.w	r3, r3, #3
24053b18:	2b00      	cmp	r3, #0
24053b1a:	d001      	beq.n	24053b20 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
24053b1c:	2301      	movs	r3, #1
24053b1e:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
24053b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24053b22:	2b01      	cmp	r3, #1
24053b24:	d10e      	bne.n	24053b44 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
24053b26:	687b      	ldr	r3, [r7, #4]
24053b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24053b2a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
24053b2e:	687b      	ldr	r3, [r7, #4]
24053b30:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
24053b32:	687b      	ldr	r3, [r7, #4]
24053b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24053b36:	f043 0202 	orr.w	r2, r3, #2
24053b3a:	687b      	ldr	r3, [r7, #4]
24053b3c:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
24053b3e:	6878      	ldr	r0, [r7, #4]
24053b40:	f000 f83e 	bl	24053bc0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
24053b44:	687b      	ldr	r3, [r7, #4]
24053b46:	681b      	ldr	r3, [r3, #0]
24053b48:	2210      	movs	r2, #16
24053b4a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
24053b4c:	69fb      	ldr	r3, [r7, #28]
24053b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
24053b52:	2b00      	cmp	r3, #0
24053b54:	d018      	beq.n	24053b88 <HAL_ADC_IRQHandler+0x424>
24053b56:	69bb      	ldr	r3, [r7, #24]
24053b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
24053b5c:	2b00      	cmp	r3, #0
24053b5e:	d013      	beq.n	24053b88 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
24053b60:	687b      	ldr	r3, [r7, #4]
24053b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24053b64:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
24053b68:	687b      	ldr	r3, [r7, #4]
24053b6a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
24053b6c:	687b      	ldr	r3, [r7, #4]
24053b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24053b70:	f043 0208 	orr.w	r2, r3, #8
24053b74:	687b      	ldr	r3, [r7, #4]
24053b76:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
24053b78:	687b      	ldr	r3, [r7, #4]
24053b7a:	681b      	ldr	r3, [r3, #0]
24053b7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
24053b80:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
24053b82:	6878      	ldr	r0, [r7, #4]
24053b84:	f000 fc84 	bl	24054490 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
24053b88:	bf00      	nop
24053b8a:	3728      	adds	r7, #40	; 0x28
24053b8c:	46bd      	mov	sp, r7
24053b8e:	bd80      	pop	{r7, pc}
24053b90:	40022000 	.word	0x40022000
24053b94:	40022300 	.word	0x40022300

24053b98 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
24053b98:	b480      	push	{r7}
24053b9a:	b083      	sub	sp, #12
24053b9c:	af00      	add	r7, sp, #0
24053b9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
24053ba0:	bf00      	nop
24053ba2:	370c      	adds	r7, #12
24053ba4:	46bd      	mov	sp, r7
24053ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
24053baa:	4770      	bx	lr

24053bac <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
24053bac:	b480      	push	{r7}
24053bae:	b083      	sub	sp, #12
24053bb0:	af00      	add	r7, sp, #0
24053bb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
24053bb4:	bf00      	nop
24053bb6:	370c      	adds	r7, #12
24053bb8:	46bd      	mov	sp, r7
24053bba:	f85d 7b04 	ldr.w	r7, [sp], #4
24053bbe:	4770      	bx	lr

24053bc0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
24053bc0:	b480      	push	{r7}
24053bc2:	b083      	sub	sp, #12
24053bc4:	af00      	add	r7, sp, #0
24053bc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
24053bc8:	bf00      	nop
24053bca:	370c      	adds	r7, #12
24053bcc:	46bd      	mov	sp, r7
24053bce:	f85d 7b04 	ldr.w	r7, [sp], #4
24053bd2:	4770      	bx	lr

24053bd4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
24053bd4:	b590      	push	{r4, r7, lr}
24053bd6:	b0a1      	sub	sp, #132	; 0x84
24053bd8:	af00      	add	r7, sp, #0
24053bda:	6078      	str	r0, [r7, #4]
24053bdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
24053bde:	2300      	movs	r3, #0
24053be0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
24053be4:	2300      	movs	r3, #0
24053be6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
24053be8:	683b      	ldr	r3, [r7, #0]
24053bea:	68db      	ldr	r3, [r3, #12]
24053bec:	4a9a      	ldr	r2, [pc, #616]	; (24053e58 <HAL_ADC_ConfigChannel+0x284>)
24053bee:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
24053bf0:	687b      	ldr	r3, [r7, #4]
24053bf2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
24053bf6:	2b01      	cmp	r3, #1
24053bf8:	d101      	bne.n	24053bfe <HAL_ADC_ConfigChannel+0x2a>
24053bfa:	2302      	movs	r3, #2
24053bfc:	e2bc      	b.n	24054178 <HAL_ADC_ConfigChannel+0x5a4>
24053bfe:	687b      	ldr	r3, [r7, #4]
24053c00:	2201      	movs	r2, #1
24053c02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
24053c06:	687b      	ldr	r3, [r7, #4]
24053c08:	681b      	ldr	r3, [r3, #0]
24053c0a:	4618      	mov	r0, r3
24053c0c:	f7ff fa8a 	bl	24053124 <LL_ADC_REG_IsConversionOngoing>
24053c10:	4603      	mov	r3, r0
24053c12:	2b00      	cmp	r3, #0
24053c14:	f040 82a1 	bne.w	2405415a <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
24053c18:	683b      	ldr	r3, [r7, #0]
24053c1a:	681b      	ldr	r3, [r3, #0]
24053c1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
24053c20:	2b00      	cmp	r3, #0
24053c22:	d108      	bne.n	24053c36 <HAL_ADC_ConfigChannel+0x62>
24053c24:	683b      	ldr	r3, [r7, #0]
24053c26:	681b      	ldr	r3, [r3, #0]
24053c28:	0e9b      	lsrs	r3, r3, #26
24053c2a:	f003 031f 	and.w	r3, r3, #31
24053c2e:	2201      	movs	r2, #1
24053c30:	fa02 f303 	lsl.w	r3, r2, r3
24053c34:	e016      	b.n	24053c64 <HAL_ADC_ConfigChannel+0x90>
24053c36:	683b      	ldr	r3, [r7, #0]
24053c38:	681b      	ldr	r3, [r3, #0]
24053c3a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
24053c3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
24053c3e:	fa93 f3a3 	rbit	r3, r3
24053c42:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
24053c44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
24053c46:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
24053c48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
24053c4a:	2b00      	cmp	r3, #0
24053c4c:	d101      	bne.n	24053c52 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
24053c4e:	2320      	movs	r3, #32
24053c50:	e003      	b.n	24053c5a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
24053c52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
24053c54:	fab3 f383 	clz	r3, r3
24053c58:	b2db      	uxtb	r3, r3
24053c5a:	f003 031f 	and.w	r3, r3, #31
24053c5e:	2201      	movs	r2, #1
24053c60:	fa02 f303 	lsl.w	r3, r2, r3
24053c64:	687a      	ldr	r2, [r7, #4]
24053c66:	6812      	ldr	r2, [r2, #0]
24053c68:	69d1      	ldr	r1, [r2, #28]
24053c6a:	687a      	ldr	r2, [r7, #4]
24053c6c:	6812      	ldr	r2, [r2, #0]
24053c6e:	430b      	orrs	r3, r1
24053c70:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
24053c72:	687b      	ldr	r3, [r7, #4]
24053c74:	6818      	ldr	r0, [r3, #0]
24053c76:	683b      	ldr	r3, [r7, #0]
24053c78:	6859      	ldr	r1, [r3, #4]
24053c7a:	683b      	ldr	r3, [r7, #0]
24053c7c:	681b      	ldr	r3, [r3, #0]
24053c7e:	461a      	mov	r2, r3
24053c80:	f7ff f91b 	bl	24052eba <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
24053c84:	687b      	ldr	r3, [r7, #4]
24053c86:	681b      	ldr	r3, [r3, #0]
24053c88:	4618      	mov	r0, r3
24053c8a:	f7ff fa4b 	bl	24053124 <LL_ADC_REG_IsConversionOngoing>
24053c8e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
24053c90:	687b      	ldr	r3, [r7, #4]
24053c92:	681b      	ldr	r3, [r3, #0]
24053c94:	4618      	mov	r0, r3
24053c96:	f7ff fa58 	bl	2405314a <LL_ADC_INJ_IsConversionOngoing>
24053c9a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
24053c9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
24053c9e:	2b00      	cmp	r3, #0
24053ca0:	f040 80a0 	bne.w	24053de4 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
24053ca4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
24053ca6:	2b00      	cmp	r3, #0
24053ca8:	f040 809c 	bne.w	24053de4 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
24053cac:	687b      	ldr	r3, [r7, #4]
24053cae:	6818      	ldr	r0, [r3, #0]
24053cb0:	683b      	ldr	r3, [r7, #0]
24053cb2:	6819      	ldr	r1, [r3, #0]
24053cb4:	683b      	ldr	r3, [r7, #0]
24053cb6:	689b      	ldr	r3, [r3, #8]
24053cb8:	461a      	mov	r2, r3
24053cba:	f7ff f93d 	bl	24052f38 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
24053cbe:	687b      	ldr	r3, [r7, #4]
24053cc0:	681b      	ldr	r3, [r3, #0]
24053cc2:	68db      	ldr	r3, [r3, #12]
24053cc4:	f003 0310 	and.w	r3, r3, #16
24053cc8:	2b00      	cmp	r3, #0
24053cca:	d10b      	bne.n	24053ce4 <HAL_ADC_ConfigChannel+0x110>
24053ccc:	683b      	ldr	r3, [r7, #0]
24053cce:	695a      	ldr	r2, [r3, #20]
24053cd0:	687b      	ldr	r3, [r7, #4]
24053cd2:	681b      	ldr	r3, [r3, #0]
24053cd4:	68db      	ldr	r3, [r3, #12]
24053cd6:	089b      	lsrs	r3, r3, #2
24053cd8:	f003 0307 	and.w	r3, r3, #7
24053cdc:	005b      	lsls	r3, r3, #1
24053cde:	fa02 f303 	lsl.w	r3, r2, r3
24053ce2:	e00a      	b.n	24053cfa <HAL_ADC_ConfigChannel+0x126>
24053ce4:	683b      	ldr	r3, [r7, #0]
24053ce6:	695a      	ldr	r2, [r3, #20]
24053ce8:	687b      	ldr	r3, [r7, #4]
24053cea:	681b      	ldr	r3, [r3, #0]
24053cec:	68db      	ldr	r3, [r3, #12]
24053cee:	089b      	lsrs	r3, r3, #2
24053cf0:	f003 0304 	and.w	r3, r3, #4
24053cf4:	005b      	lsls	r3, r3, #1
24053cf6:	fa02 f303 	lsl.w	r3, r2, r3
24053cfa:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
24053cfc:	683b      	ldr	r3, [r7, #0]
24053cfe:	691b      	ldr	r3, [r3, #16]
24053d00:	2b04      	cmp	r3, #4
24053d02:	d027      	beq.n	24053d54 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
24053d04:	687b      	ldr	r3, [r7, #4]
24053d06:	6818      	ldr	r0, [r3, #0]
24053d08:	683b      	ldr	r3, [r7, #0]
24053d0a:	6919      	ldr	r1, [r3, #16]
24053d0c:	683b      	ldr	r3, [r7, #0]
24053d0e:	681a      	ldr	r2, [r3, #0]
24053d10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
24053d12:	f7ff f86b 	bl	24052dec <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
24053d16:	687b      	ldr	r3, [r7, #4]
24053d18:	6818      	ldr	r0, [r3, #0]
24053d1a:	683b      	ldr	r3, [r7, #0]
24053d1c:	6919      	ldr	r1, [r3, #16]
24053d1e:	683b      	ldr	r3, [r7, #0]
24053d20:	7e5b      	ldrb	r3, [r3, #25]
24053d22:	2b01      	cmp	r3, #1
24053d24:	d102      	bne.n	24053d2c <HAL_ADC_ConfigChannel+0x158>
24053d26:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
24053d2a:	e000      	b.n	24053d2e <HAL_ADC_ConfigChannel+0x15a>
24053d2c:	2300      	movs	r3, #0
24053d2e:	461a      	mov	r2, r3
24053d30:	f7ff f895 	bl	24052e5e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
24053d34:	687b      	ldr	r3, [r7, #4]
24053d36:	6818      	ldr	r0, [r3, #0]
24053d38:	683b      	ldr	r3, [r7, #0]
24053d3a:	6919      	ldr	r1, [r3, #16]
24053d3c:	683b      	ldr	r3, [r7, #0]
24053d3e:	7e1b      	ldrb	r3, [r3, #24]
24053d40:	2b01      	cmp	r3, #1
24053d42:	d102      	bne.n	24053d4a <HAL_ADC_ConfigChannel+0x176>
24053d44:	f44f 6300 	mov.w	r3, #2048	; 0x800
24053d48:	e000      	b.n	24053d4c <HAL_ADC_ConfigChannel+0x178>
24053d4a:	2300      	movs	r3, #0
24053d4c:	461a      	mov	r2, r3
24053d4e:	f7ff f86d 	bl	24052e2c <LL_ADC_SetDataRightShift>
24053d52:	e047      	b.n	24053de4 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
24053d54:	687b      	ldr	r3, [r7, #4]
24053d56:	681b      	ldr	r3, [r3, #0]
24053d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24053d5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
24053d5e:	683b      	ldr	r3, [r7, #0]
24053d60:	681b      	ldr	r3, [r3, #0]
24053d62:	069b      	lsls	r3, r3, #26
24053d64:	429a      	cmp	r2, r3
24053d66:	d107      	bne.n	24053d78 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
24053d68:	687b      	ldr	r3, [r7, #4]
24053d6a:	681b      	ldr	r3, [r3, #0]
24053d6c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
24053d6e:	687b      	ldr	r3, [r7, #4]
24053d70:	681b      	ldr	r3, [r3, #0]
24053d72:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
24053d76:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
24053d78:	687b      	ldr	r3, [r7, #4]
24053d7a:	681b      	ldr	r3, [r3, #0]
24053d7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24053d7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
24053d82:	683b      	ldr	r3, [r7, #0]
24053d84:	681b      	ldr	r3, [r3, #0]
24053d86:	069b      	lsls	r3, r3, #26
24053d88:	429a      	cmp	r2, r3
24053d8a:	d107      	bne.n	24053d9c <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
24053d8c:	687b      	ldr	r3, [r7, #4]
24053d8e:	681b      	ldr	r3, [r3, #0]
24053d90:	6e5a      	ldr	r2, [r3, #100]	; 0x64
24053d92:	687b      	ldr	r3, [r7, #4]
24053d94:	681b      	ldr	r3, [r3, #0]
24053d96:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
24053d9a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
24053d9c:	687b      	ldr	r3, [r7, #4]
24053d9e:	681b      	ldr	r3, [r3, #0]
24053da0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24053da2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
24053da6:	683b      	ldr	r3, [r7, #0]
24053da8:	681b      	ldr	r3, [r3, #0]
24053daa:	069b      	lsls	r3, r3, #26
24053dac:	429a      	cmp	r2, r3
24053dae:	d107      	bne.n	24053dc0 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
24053db0:	687b      	ldr	r3, [r7, #4]
24053db2:	681b      	ldr	r3, [r3, #0]
24053db4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
24053db6:	687b      	ldr	r3, [r7, #4]
24053db8:	681b      	ldr	r3, [r3, #0]
24053dba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
24053dbe:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
24053dc0:	687b      	ldr	r3, [r7, #4]
24053dc2:	681b      	ldr	r3, [r3, #0]
24053dc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24053dc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
24053dca:	683b      	ldr	r3, [r7, #0]
24053dcc:	681b      	ldr	r3, [r3, #0]
24053dce:	069b      	lsls	r3, r3, #26
24053dd0:	429a      	cmp	r2, r3
24053dd2:	d107      	bne.n	24053de4 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
24053dd4:	687b      	ldr	r3, [r7, #4]
24053dd6:	681b      	ldr	r3, [r3, #0]
24053dd8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
24053dda:	687b      	ldr	r3, [r7, #4]
24053ddc:	681b      	ldr	r3, [r3, #0]
24053dde:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
24053de2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
24053de4:	687b      	ldr	r3, [r7, #4]
24053de6:	681b      	ldr	r3, [r3, #0]
24053de8:	4618      	mov	r0, r3
24053dea:	f7ff f973 	bl	240530d4 <LL_ADC_IsEnabled>
24053dee:	4603      	mov	r3, r0
24053df0:	2b00      	cmp	r3, #0
24053df2:	f040 81bb 	bne.w	2405416c <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
24053df6:	687b      	ldr	r3, [r7, #4]
24053df8:	6818      	ldr	r0, [r3, #0]
24053dfa:	683b      	ldr	r3, [r7, #0]
24053dfc:	6819      	ldr	r1, [r3, #0]
24053dfe:	683b      	ldr	r3, [r7, #0]
24053e00:	68db      	ldr	r3, [r3, #12]
24053e02:	461a      	mov	r2, r3
24053e04:	f7ff f8c4 	bl	24052f90 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
24053e08:	683b      	ldr	r3, [r7, #0]
24053e0a:	68db      	ldr	r3, [r3, #12]
24053e0c:	4a12      	ldr	r2, [pc, #72]	; (24053e58 <HAL_ADC_ConfigChannel+0x284>)
24053e0e:	4293      	cmp	r3, r2
24053e10:	f040 8130 	bne.w	24054074 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
24053e14:	687b      	ldr	r3, [r7, #4]
24053e16:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
24053e18:	683b      	ldr	r3, [r7, #0]
24053e1a:	681b      	ldr	r3, [r3, #0]
24053e1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
24053e20:	2b00      	cmp	r3, #0
24053e22:	d10b      	bne.n	24053e3c <HAL_ADC_ConfigChannel+0x268>
24053e24:	683b      	ldr	r3, [r7, #0]
24053e26:	681b      	ldr	r3, [r3, #0]
24053e28:	0e9b      	lsrs	r3, r3, #26
24053e2a:	3301      	adds	r3, #1
24053e2c:	f003 031f 	and.w	r3, r3, #31
24053e30:	2b09      	cmp	r3, #9
24053e32:	bf94      	ite	ls
24053e34:	2301      	movls	r3, #1
24053e36:	2300      	movhi	r3, #0
24053e38:	b2db      	uxtb	r3, r3
24053e3a:	e01b      	b.n	24053e74 <HAL_ADC_ConfigChannel+0x2a0>
24053e3c:	683b      	ldr	r3, [r7, #0]
24053e3e:	681b      	ldr	r3, [r3, #0]
24053e40:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
24053e42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
24053e44:	fa93 f3a3 	rbit	r3, r3
24053e48:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
24053e4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
24053e4c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
24053e4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
24053e50:	2b00      	cmp	r3, #0
24053e52:	d103      	bne.n	24053e5c <HAL_ADC_ConfigChannel+0x288>
    return 32U;
24053e54:	2320      	movs	r3, #32
24053e56:	e005      	b.n	24053e64 <HAL_ADC_ConfigChannel+0x290>
24053e58:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
24053e5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
24053e5e:	fab3 f383 	clz	r3, r3
24053e62:	b2db      	uxtb	r3, r3
24053e64:	3301      	adds	r3, #1
24053e66:	f003 031f 	and.w	r3, r3, #31
24053e6a:	2b09      	cmp	r3, #9
24053e6c:	bf94      	ite	ls
24053e6e:	2301      	movls	r3, #1
24053e70:	2300      	movhi	r3, #0
24053e72:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
24053e74:	2b00      	cmp	r3, #0
24053e76:	d079      	beq.n	24053f6c <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
24053e78:	683b      	ldr	r3, [r7, #0]
24053e7a:	681b      	ldr	r3, [r3, #0]
24053e7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
24053e80:	2b00      	cmp	r3, #0
24053e82:	d107      	bne.n	24053e94 <HAL_ADC_ConfigChannel+0x2c0>
24053e84:	683b      	ldr	r3, [r7, #0]
24053e86:	681b      	ldr	r3, [r3, #0]
24053e88:	0e9b      	lsrs	r3, r3, #26
24053e8a:	3301      	adds	r3, #1
24053e8c:	069b      	lsls	r3, r3, #26
24053e8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
24053e92:	e015      	b.n	24053ec0 <HAL_ADC_ConfigChannel+0x2ec>
24053e94:	683b      	ldr	r3, [r7, #0]
24053e96:	681b      	ldr	r3, [r3, #0]
24053e98:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
24053e9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
24053e9c:	fa93 f3a3 	rbit	r3, r3
24053ea0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
24053ea2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
24053ea4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
24053ea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
24053ea8:	2b00      	cmp	r3, #0
24053eaa:	d101      	bne.n	24053eb0 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
24053eac:	2320      	movs	r3, #32
24053eae:	e003      	b.n	24053eb8 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
24053eb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
24053eb2:	fab3 f383 	clz	r3, r3
24053eb6:	b2db      	uxtb	r3, r3
24053eb8:	3301      	adds	r3, #1
24053eba:	069b      	lsls	r3, r3, #26
24053ebc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
24053ec0:	683b      	ldr	r3, [r7, #0]
24053ec2:	681b      	ldr	r3, [r3, #0]
24053ec4:	f3c3 0313 	ubfx	r3, r3, #0, #20
24053ec8:	2b00      	cmp	r3, #0
24053eca:	d109      	bne.n	24053ee0 <HAL_ADC_ConfigChannel+0x30c>
24053ecc:	683b      	ldr	r3, [r7, #0]
24053ece:	681b      	ldr	r3, [r3, #0]
24053ed0:	0e9b      	lsrs	r3, r3, #26
24053ed2:	3301      	adds	r3, #1
24053ed4:	f003 031f 	and.w	r3, r3, #31
24053ed8:	2101      	movs	r1, #1
24053eda:	fa01 f303 	lsl.w	r3, r1, r3
24053ede:	e017      	b.n	24053f10 <HAL_ADC_ConfigChannel+0x33c>
24053ee0:	683b      	ldr	r3, [r7, #0]
24053ee2:	681b      	ldr	r3, [r3, #0]
24053ee4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
24053ee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
24053ee8:	fa93 f3a3 	rbit	r3, r3
24053eec:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
24053eee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
24053ef0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
24053ef2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
24053ef4:	2b00      	cmp	r3, #0
24053ef6:	d101      	bne.n	24053efc <HAL_ADC_ConfigChannel+0x328>
    return 32U;
24053ef8:	2320      	movs	r3, #32
24053efa:	e003      	b.n	24053f04 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
24053efc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
24053efe:	fab3 f383 	clz	r3, r3
24053f02:	b2db      	uxtb	r3, r3
24053f04:	3301      	adds	r3, #1
24053f06:	f003 031f 	and.w	r3, r3, #31
24053f0a:	2101      	movs	r1, #1
24053f0c:	fa01 f303 	lsl.w	r3, r1, r3
24053f10:	ea42 0103 	orr.w	r1, r2, r3
24053f14:	683b      	ldr	r3, [r7, #0]
24053f16:	681b      	ldr	r3, [r3, #0]
24053f18:	f3c3 0313 	ubfx	r3, r3, #0, #20
24053f1c:	2b00      	cmp	r3, #0
24053f1e:	d10a      	bne.n	24053f36 <HAL_ADC_ConfigChannel+0x362>
24053f20:	683b      	ldr	r3, [r7, #0]
24053f22:	681b      	ldr	r3, [r3, #0]
24053f24:	0e9b      	lsrs	r3, r3, #26
24053f26:	3301      	adds	r3, #1
24053f28:	f003 021f 	and.w	r2, r3, #31
24053f2c:	4613      	mov	r3, r2
24053f2e:	005b      	lsls	r3, r3, #1
24053f30:	4413      	add	r3, r2
24053f32:	051b      	lsls	r3, r3, #20
24053f34:	e018      	b.n	24053f68 <HAL_ADC_ConfigChannel+0x394>
24053f36:	683b      	ldr	r3, [r7, #0]
24053f38:	681b      	ldr	r3, [r3, #0]
24053f3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
24053f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24053f3e:	fa93 f3a3 	rbit	r3, r3
24053f42:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
24053f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24053f46:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
24053f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24053f4a:	2b00      	cmp	r3, #0
24053f4c:	d101      	bne.n	24053f52 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
24053f4e:	2320      	movs	r3, #32
24053f50:	e003      	b.n	24053f5a <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
24053f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24053f54:	fab3 f383 	clz	r3, r3
24053f58:	b2db      	uxtb	r3, r3
24053f5a:	3301      	adds	r3, #1
24053f5c:	f003 021f 	and.w	r2, r3, #31
24053f60:	4613      	mov	r3, r2
24053f62:	005b      	lsls	r3, r3, #1
24053f64:	4413      	add	r3, r2
24053f66:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
24053f68:	430b      	orrs	r3, r1
24053f6a:	e07e      	b.n	2405406a <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
24053f6c:	683b      	ldr	r3, [r7, #0]
24053f6e:	681b      	ldr	r3, [r3, #0]
24053f70:	f3c3 0313 	ubfx	r3, r3, #0, #20
24053f74:	2b00      	cmp	r3, #0
24053f76:	d107      	bne.n	24053f88 <HAL_ADC_ConfigChannel+0x3b4>
24053f78:	683b      	ldr	r3, [r7, #0]
24053f7a:	681b      	ldr	r3, [r3, #0]
24053f7c:	0e9b      	lsrs	r3, r3, #26
24053f7e:	3301      	adds	r3, #1
24053f80:	069b      	lsls	r3, r3, #26
24053f82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
24053f86:	e015      	b.n	24053fb4 <HAL_ADC_ConfigChannel+0x3e0>
24053f88:	683b      	ldr	r3, [r7, #0]
24053f8a:	681b      	ldr	r3, [r3, #0]
24053f8c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
24053f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
24053f90:	fa93 f3a3 	rbit	r3, r3
24053f94:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
24053f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24053f98:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
24053f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
24053f9c:	2b00      	cmp	r3, #0
24053f9e:	d101      	bne.n	24053fa4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
24053fa0:	2320      	movs	r3, #32
24053fa2:	e003      	b.n	24053fac <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
24053fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
24053fa6:	fab3 f383 	clz	r3, r3
24053faa:	b2db      	uxtb	r3, r3
24053fac:	3301      	adds	r3, #1
24053fae:	069b      	lsls	r3, r3, #26
24053fb0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
24053fb4:	683b      	ldr	r3, [r7, #0]
24053fb6:	681b      	ldr	r3, [r3, #0]
24053fb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
24053fbc:	2b00      	cmp	r3, #0
24053fbe:	d109      	bne.n	24053fd4 <HAL_ADC_ConfigChannel+0x400>
24053fc0:	683b      	ldr	r3, [r7, #0]
24053fc2:	681b      	ldr	r3, [r3, #0]
24053fc4:	0e9b      	lsrs	r3, r3, #26
24053fc6:	3301      	adds	r3, #1
24053fc8:	f003 031f 	and.w	r3, r3, #31
24053fcc:	2101      	movs	r1, #1
24053fce:	fa01 f303 	lsl.w	r3, r1, r3
24053fd2:	e017      	b.n	24054004 <HAL_ADC_ConfigChannel+0x430>
24053fd4:	683b      	ldr	r3, [r7, #0]
24053fd6:	681b      	ldr	r3, [r3, #0]
24053fd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
24053fda:	69fb      	ldr	r3, [r7, #28]
24053fdc:	fa93 f3a3 	rbit	r3, r3
24053fe0:	61bb      	str	r3, [r7, #24]
  return result;
24053fe2:	69bb      	ldr	r3, [r7, #24]
24053fe4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
24053fe6:	6a3b      	ldr	r3, [r7, #32]
24053fe8:	2b00      	cmp	r3, #0
24053fea:	d101      	bne.n	24053ff0 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
24053fec:	2320      	movs	r3, #32
24053fee:	e003      	b.n	24053ff8 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
24053ff0:	6a3b      	ldr	r3, [r7, #32]
24053ff2:	fab3 f383 	clz	r3, r3
24053ff6:	b2db      	uxtb	r3, r3
24053ff8:	3301      	adds	r3, #1
24053ffa:	f003 031f 	and.w	r3, r3, #31
24053ffe:	2101      	movs	r1, #1
24054000:	fa01 f303 	lsl.w	r3, r1, r3
24054004:	ea42 0103 	orr.w	r1, r2, r3
24054008:	683b      	ldr	r3, [r7, #0]
2405400a:	681b      	ldr	r3, [r3, #0]
2405400c:	f3c3 0313 	ubfx	r3, r3, #0, #20
24054010:	2b00      	cmp	r3, #0
24054012:	d10d      	bne.n	24054030 <HAL_ADC_ConfigChannel+0x45c>
24054014:	683b      	ldr	r3, [r7, #0]
24054016:	681b      	ldr	r3, [r3, #0]
24054018:	0e9b      	lsrs	r3, r3, #26
2405401a:	3301      	adds	r3, #1
2405401c:	f003 021f 	and.w	r2, r3, #31
24054020:	4613      	mov	r3, r2
24054022:	005b      	lsls	r3, r3, #1
24054024:	4413      	add	r3, r2
24054026:	3b1e      	subs	r3, #30
24054028:	051b      	lsls	r3, r3, #20
2405402a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
2405402e:	e01b      	b.n	24054068 <HAL_ADC_ConfigChannel+0x494>
24054030:	683b      	ldr	r3, [r7, #0]
24054032:	681b      	ldr	r3, [r3, #0]
24054034:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
24054036:	693b      	ldr	r3, [r7, #16]
24054038:	fa93 f3a3 	rbit	r3, r3
2405403c:	60fb      	str	r3, [r7, #12]
  return result;
2405403e:	68fb      	ldr	r3, [r7, #12]
24054040:	617b      	str	r3, [r7, #20]
  if (value == 0U)
24054042:	697b      	ldr	r3, [r7, #20]
24054044:	2b00      	cmp	r3, #0
24054046:	d101      	bne.n	2405404c <HAL_ADC_ConfigChannel+0x478>
    return 32U;
24054048:	2320      	movs	r3, #32
2405404a:	e003      	b.n	24054054 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
2405404c:	697b      	ldr	r3, [r7, #20]
2405404e:	fab3 f383 	clz	r3, r3
24054052:	b2db      	uxtb	r3, r3
24054054:	3301      	adds	r3, #1
24054056:	f003 021f 	and.w	r2, r3, #31
2405405a:	4613      	mov	r3, r2
2405405c:	005b      	lsls	r3, r3, #1
2405405e:	4413      	add	r3, r2
24054060:	3b1e      	subs	r3, #30
24054062:	051b      	lsls	r3, r3, #20
24054064:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
24054068:	430b      	orrs	r3, r1
2405406a:	683a      	ldr	r2, [r7, #0]
2405406c:	6892      	ldr	r2, [r2, #8]
2405406e:	4619      	mov	r1, r3
24054070:	f7fe ff62 	bl	24052f38 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
24054074:	683b      	ldr	r3, [r7, #0]
24054076:	681b      	ldr	r3, [r3, #0]
24054078:	2b00      	cmp	r3, #0
2405407a:	da77      	bge.n	2405416c <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
2405407c:	4840      	ldr	r0, [pc, #256]	; (24054180 <HAL_ADC_ConfigChannel+0x5ac>)
2405407e:	f7fe fea7 	bl	24052dd0 <LL_ADC_GetCommonPathInternalCh>
24054082:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
24054084:	483f      	ldr	r0, [pc, #252]	; (24054184 <HAL_ADC_ConfigChannel+0x5b0>)
24054086:	f7ff f825 	bl	240530d4 <LL_ADC_IsEnabled>
2405408a:	4604      	mov	r4, r0
2405408c:	483e      	ldr	r0, [pc, #248]	; (24054188 <HAL_ADC_ConfigChannel+0x5b4>)
2405408e:	f7ff f821 	bl	240530d4 <LL_ADC_IsEnabled>
24054092:	4603      	mov	r3, r0
24054094:	4323      	orrs	r3, r4
24054096:	2b00      	cmp	r3, #0
24054098:	d155      	bne.n	24054146 <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
2405409a:	683b      	ldr	r3, [r7, #0]
2405409c:	681b      	ldr	r3, [r3, #0]
2405409e:	4a3b      	ldr	r2, [pc, #236]	; (2405418c <HAL_ADC_ConfigChannel+0x5b8>)
240540a0:	4293      	cmp	r3, r2
240540a2:	d122      	bne.n	240540ea <HAL_ADC_ConfigChannel+0x516>
240540a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
240540a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
240540aa:	2b00      	cmp	r3, #0
240540ac:	d11d      	bne.n	240540ea <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
240540ae:	687b      	ldr	r3, [r7, #4]
240540b0:	681b      	ldr	r3, [r3, #0]
240540b2:	4a35      	ldr	r2, [pc, #212]	; (24054188 <HAL_ADC_ConfigChannel+0x5b4>)
240540b4:	4293      	cmp	r3, r2
240540b6:	d159      	bne.n	2405416c <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
240540b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
240540ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
240540be:	4619      	mov	r1, r3
240540c0:	482f      	ldr	r0, [pc, #188]	; (24054180 <HAL_ADC_ConfigChannel+0x5ac>)
240540c2:	f7fe fe72 	bl	24052daa <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
240540c6:	4b32      	ldr	r3, [pc, #200]	; (24054190 <HAL_ADC_ConfigChannel+0x5bc>)
240540c8:	681b      	ldr	r3, [r3, #0]
240540ca:	099b      	lsrs	r3, r3, #6
240540cc:	4a31      	ldr	r2, [pc, #196]	; (24054194 <HAL_ADC_ConfigChannel+0x5c0>)
240540ce:	fba2 2303 	umull	r2, r3, r2, r3
240540d2:	099b      	lsrs	r3, r3, #6
240540d4:	3301      	adds	r3, #1
240540d6:	005b      	lsls	r3, r3, #1
240540d8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
240540da:	e002      	b.n	240540e2 <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
240540dc:	68bb      	ldr	r3, [r7, #8]
240540de:	3b01      	subs	r3, #1
240540e0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
240540e2:	68bb      	ldr	r3, [r7, #8]
240540e4:	2b00      	cmp	r3, #0
240540e6:	d1f9      	bne.n	240540dc <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
240540e8:	e040      	b.n	2405416c <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
240540ea:	683b      	ldr	r3, [r7, #0]
240540ec:	681b      	ldr	r3, [r3, #0]
240540ee:	4a2a      	ldr	r2, [pc, #168]	; (24054198 <HAL_ADC_ConfigChannel+0x5c4>)
240540f0:	4293      	cmp	r3, r2
240540f2:	d111      	bne.n	24054118 <HAL_ADC_ConfigChannel+0x544>
240540f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
240540f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
240540fa:	2b00      	cmp	r3, #0
240540fc:	d10c      	bne.n	24054118 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
240540fe:	687b      	ldr	r3, [r7, #4]
24054100:	681b      	ldr	r3, [r3, #0]
24054102:	4a21      	ldr	r2, [pc, #132]	; (24054188 <HAL_ADC_ConfigChannel+0x5b4>)
24054104:	4293      	cmp	r3, r2
24054106:	d131      	bne.n	2405416c <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
24054108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
2405410a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
2405410e:	4619      	mov	r1, r3
24054110:	481b      	ldr	r0, [pc, #108]	; (24054180 <HAL_ADC_ConfigChannel+0x5ac>)
24054112:	f7fe fe4a 	bl	24052daa <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
24054116:	e029      	b.n	2405416c <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
24054118:	683b      	ldr	r3, [r7, #0]
2405411a:	681b      	ldr	r3, [r3, #0]
2405411c:	4a1f      	ldr	r2, [pc, #124]	; (2405419c <HAL_ADC_ConfigChannel+0x5c8>)
2405411e:	4293      	cmp	r3, r2
24054120:	d124      	bne.n	2405416c <HAL_ADC_ConfigChannel+0x598>
24054122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
24054124:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
24054128:	2b00      	cmp	r3, #0
2405412a:	d11f      	bne.n	2405416c <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
2405412c:	687b      	ldr	r3, [r7, #4]
2405412e:	681b      	ldr	r3, [r3, #0]
24054130:	4a15      	ldr	r2, [pc, #84]	; (24054188 <HAL_ADC_ConfigChannel+0x5b4>)
24054132:	4293      	cmp	r3, r2
24054134:	d11a      	bne.n	2405416c <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
24054136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
24054138:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
2405413c:	4619      	mov	r1, r3
2405413e:	4810      	ldr	r0, [pc, #64]	; (24054180 <HAL_ADC_ConfigChannel+0x5ac>)
24054140:	f7fe fe33 	bl	24052daa <LL_ADC_SetCommonPathInternalCh>
24054144:	e012      	b.n	2405416c <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
24054146:	687b      	ldr	r3, [r7, #4]
24054148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405414a:	f043 0220 	orr.w	r2, r3, #32
2405414e:	687b      	ldr	r3, [r7, #4]
24054150:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
24054152:	2301      	movs	r3, #1
24054154:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
24054158:	e008      	b.n	2405416c <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
2405415a:	687b      	ldr	r3, [r7, #4]
2405415c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405415e:	f043 0220 	orr.w	r2, r3, #32
24054162:	687b      	ldr	r3, [r7, #4]
24054164:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
24054166:	2301      	movs	r3, #1
24054168:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
2405416c:	687b      	ldr	r3, [r7, #4]
2405416e:	2200      	movs	r2, #0
24054170:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
24054174:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
24054178:	4618      	mov	r0, r3
2405417a:	3784      	adds	r7, #132	; 0x84
2405417c:	46bd      	mov	sp, r7
2405417e:	bd90      	pop	{r4, r7, pc}
24054180:	40022300 	.word	0x40022300
24054184:	40022000 	.word	0x40022000
24054188:	40022100 	.word	0x40022100
2405418c:	cb840000 	.word	0xcb840000
24054190:	20000030 	.word	0x20000030
24054194:	053e2d63 	.word	0x053e2d63
24054198:	bac04000 	.word	0xbac04000
2405419c:	cfb80000 	.word	0xcfb80000

240541a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
240541a0:	b580      	push	{r7, lr}
240541a2:	b084      	sub	sp, #16
240541a4:	af00      	add	r7, sp, #0
240541a6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
240541a8:	687b      	ldr	r3, [r7, #4]
240541aa:	681b      	ldr	r3, [r3, #0]
240541ac:	4618      	mov	r0, r3
240541ae:	f7fe ff91 	bl	240530d4 <LL_ADC_IsEnabled>
240541b2:	4603      	mov	r3, r0
240541b4:	2b00      	cmp	r3, #0
240541b6:	d161      	bne.n	2405427c <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
240541b8:	687b      	ldr	r3, [r7, #4]
240541ba:	681b      	ldr	r3, [r3, #0]
240541bc:	689a      	ldr	r2, [r3, #8]
240541be:	4b32      	ldr	r3, [pc, #200]	; (24054288 <ADC_Enable+0xe8>)
240541c0:	4013      	ands	r3, r2
240541c2:	2b00      	cmp	r3, #0
240541c4:	d00d      	beq.n	240541e2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
240541c6:	687b      	ldr	r3, [r7, #4]
240541c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240541ca:	f043 0210 	orr.w	r2, r3, #16
240541ce:	687b      	ldr	r3, [r7, #4]
240541d0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
240541d2:	687b      	ldr	r3, [r7, #4]
240541d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240541d6:	f043 0201 	orr.w	r2, r3, #1
240541da:	687b      	ldr	r3, [r7, #4]
240541dc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
240541de:	2301      	movs	r3, #1
240541e0:	e04d      	b.n	2405427e <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
240541e2:	687b      	ldr	r3, [r7, #4]
240541e4:	681b      	ldr	r3, [r3, #0]
240541e6:	4618      	mov	r0, r3
240541e8:	f7fe ff60 	bl	240530ac <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
240541ec:	f7fe fd9a 	bl	24052d24 <HAL_GetTick>
240541f0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
240541f2:	4826      	ldr	r0, [pc, #152]	; (2405428c <ADC_Enable+0xec>)
240541f4:	f7fe fef0 	bl	24052fd8 <LL_ADC_GetMultimode>
240541f8:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
240541fa:	687b      	ldr	r3, [r7, #4]
240541fc:	681b      	ldr	r3, [r3, #0]
240541fe:	4a24      	ldr	r2, [pc, #144]	; (24054290 <ADC_Enable+0xf0>)
24054200:	4293      	cmp	r3, r2
24054202:	d002      	beq.n	2405420a <ADC_Enable+0x6a>
24054204:	687b      	ldr	r3, [r7, #4]
24054206:	681b      	ldr	r3, [r3, #0]
24054208:	e000      	b.n	2405420c <ADC_Enable+0x6c>
2405420a:	4b22      	ldr	r3, [pc, #136]	; (24054294 <ADC_Enable+0xf4>)
2405420c:	687a      	ldr	r2, [r7, #4]
2405420e:	6812      	ldr	r2, [r2, #0]
24054210:	4293      	cmp	r3, r2
24054212:	d02c      	beq.n	2405426e <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
24054214:	68bb      	ldr	r3, [r7, #8]
24054216:	2b00      	cmp	r3, #0
24054218:	d130      	bne.n	2405427c <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
2405421a:	e028      	b.n	2405426e <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
2405421c:	687b      	ldr	r3, [r7, #4]
2405421e:	681b      	ldr	r3, [r3, #0]
24054220:	4618      	mov	r0, r3
24054222:	f7fe ff57 	bl	240530d4 <LL_ADC_IsEnabled>
24054226:	4603      	mov	r3, r0
24054228:	2b00      	cmp	r3, #0
2405422a:	d104      	bne.n	24054236 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
2405422c:	687b      	ldr	r3, [r7, #4]
2405422e:	681b      	ldr	r3, [r3, #0]
24054230:	4618      	mov	r0, r3
24054232:	f7fe ff3b 	bl	240530ac <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
24054236:	f7fe fd75 	bl	24052d24 <HAL_GetTick>
2405423a:	4602      	mov	r2, r0
2405423c:	68fb      	ldr	r3, [r7, #12]
2405423e:	1ad3      	subs	r3, r2, r3
24054240:	2b02      	cmp	r3, #2
24054242:	d914      	bls.n	2405426e <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
24054244:	687b      	ldr	r3, [r7, #4]
24054246:	681b      	ldr	r3, [r3, #0]
24054248:	681b      	ldr	r3, [r3, #0]
2405424a:	f003 0301 	and.w	r3, r3, #1
2405424e:	2b01      	cmp	r3, #1
24054250:	d00d      	beq.n	2405426e <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
24054252:	687b      	ldr	r3, [r7, #4]
24054254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24054256:	f043 0210 	orr.w	r2, r3, #16
2405425a:	687b      	ldr	r3, [r7, #4]
2405425c:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2405425e:	687b      	ldr	r3, [r7, #4]
24054260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24054262:	f043 0201 	orr.w	r2, r3, #1
24054266:	687b      	ldr	r3, [r7, #4]
24054268:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
2405426a:	2301      	movs	r3, #1
2405426c:	e007      	b.n	2405427e <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
2405426e:	687b      	ldr	r3, [r7, #4]
24054270:	681b      	ldr	r3, [r3, #0]
24054272:	681b      	ldr	r3, [r3, #0]
24054274:	f003 0301 	and.w	r3, r3, #1
24054278:	2b01      	cmp	r3, #1
2405427a:	d1cf      	bne.n	2405421c <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
2405427c:	2300      	movs	r3, #0
}
2405427e:	4618      	mov	r0, r3
24054280:	3710      	adds	r7, #16
24054282:	46bd      	mov	sp, r7
24054284:	bd80      	pop	{r7, pc}
24054286:	bf00      	nop
24054288:	8000003f 	.word	0x8000003f
2405428c:	40022300 	.word	0x40022300
24054290:	40022100 	.word	0x40022100
24054294:	40022000 	.word	0x40022000

24054298 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
24054298:	b580      	push	{r7, lr}
2405429a:	b084      	sub	sp, #16
2405429c:	af00      	add	r7, sp, #0
2405429e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
240542a0:	4b5f      	ldr	r3, [pc, #380]	; (24054420 <ADC_ConfigureBoostMode+0x188>)
240542a2:	689b      	ldr	r3, [r3, #8]
240542a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
240542a8:	2b00      	cmp	r3, #0
240542aa:	d01c      	beq.n	240542e6 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
240542ac:	f006 fc3c 	bl	2405ab28 <HAL_RCC_GetHCLKFreq>
240542b0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
240542b2:	687b      	ldr	r3, [r7, #4]
240542b4:	685b      	ldr	r3, [r3, #4]
240542b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
240542ba:	d010      	beq.n	240542de <ADC_ConfigureBoostMode+0x46>
240542bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
240542c0:	d871      	bhi.n	240543a6 <ADC_ConfigureBoostMode+0x10e>
240542c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
240542c6:	d002      	beq.n	240542ce <ADC_ConfigureBoostMode+0x36>
240542c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
240542cc:	d16b      	bne.n	240543a6 <ADC_ConfigureBoostMode+0x10e>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
240542ce:	687b      	ldr	r3, [r7, #4]
240542d0:	685b      	ldr	r3, [r3, #4]
240542d2:	0c1b      	lsrs	r3, r3, #16
240542d4:	68fa      	ldr	r2, [r7, #12]
240542d6:	fbb2 f3f3 	udiv	r3, r2, r3
240542da:	60fb      	str	r3, [r7, #12]
        break;
240542dc:	e066      	b.n	240543ac <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
240542de:	68fb      	ldr	r3, [r7, #12]
240542e0:	089b      	lsrs	r3, r3, #2
240542e2:	60fb      	str	r3, [r7, #12]
        break;
240542e4:	e062      	b.n	240543ac <ADC_ConfigureBoostMode+0x114>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
240542e6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
240542ea:	f007 fb59 	bl	2405b9a0 <HAL_RCCEx_GetPeriphCLKFreq>
240542ee:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
240542f0:	687b      	ldr	r3, [r7, #4]
240542f2:	685b      	ldr	r3, [r3, #4]
240542f4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
240542f8:	d051      	beq.n	2405439e <ADC_ConfigureBoostMode+0x106>
240542fa:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
240542fe:	d854      	bhi.n	240543aa <ADC_ConfigureBoostMode+0x112>
24054300:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
24054304:	d047      	beq.n	24054396 <ADC_ConfigureBoostMode+0xfe>
24054306:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
2405430a:	d84e      	bhi.n	240543aa <ADC_ConfigureBoostMode+0x112>
2405430c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
24054310:	d03d      	beq.n	2405438e <ADC_ConfigureBoostMode+0xf6>
24054312:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
24054316:	d848      	bhi.n	240543aa <ADC_ConfigureBoostMode+0x112>
24054318:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
2405431c:	d033      	beq.n	24054386 <ADC_ConfigureBoostMode+0xee>
2405431e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
24054322:	d842      	bhi.n	240543aa <ADC_ConfigureBoostMode+0x112>
24054324:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
24054328:	d029      	beq.n	2405437e <ADC_ConfigureBoostMode+0xe6>
2405432a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
2405432e:	d83c      	bhi.n	240543aa <ADC_ConfigureBoostMode+0x112>
24054330:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
24054334:	d01a      	beq.n	2405436c <ADC_ConfigureBoostMode+0xd4>
24054336:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
2405433a:	d836      	bhi.n	240543aa <ADC_ConfigureBoostMode+0x112>
2405433c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
24054340:	d014      	beq.n	2405436c <ADC_ConfigureBoostMode+0xd4>
24054342:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
24054346:	d830      	bhi.n	240543aa <ADC_ConfigureBoostMode+0x112>
24054348:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
2405434c:	d00e      	beq.n	2405436c <ADC_ConfigureBoostMode+0xd4>
2405434e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
24054352:	d82a      	bhi.n	240543aa <ADC_ConfigureBoostMode+0x112>
24054354:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
24054358:	d008      	beq.n	2405436c <ADC_ConfigureBoostMode+0xd4>
2405435a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
2405435e:	d824      	bhi.n	240543aa <ADC_ConfigureBoostMode+0x112>
24054360:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
24054364:	d002      	beq.n	2405436c <ADC_ConfigureBoostMode+0xd4>
24054366:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
2405436a:	d11e      	bne.n	240543aa <ADC_ConfigureBoostMode+0x112>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
2405436c:	687b      	ldr	r3, [r7, #4]
2405436e:	685b      	ldr	r3, [r3, #4]
24054370:	0c9b      	lsrs	r3, r3, #18
24054372:	005b      	lsls	r3, r3, #1
24054374:	68fa      	ldr	r2, [r7, #12]
24054376:	fbb2 f3f3 	udiv	r3, r2, r3
2405437a:	60fb      	str	r3, [r7, #12]
        break;
2405437c:	e016      	b.n	240543ac <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
2405437e:	68fb      	ldr	r3, [r7, #12]
24054380:	091b      	lsrs	r3, r3, #4
24054382:	60fb      	str	r3, [r7, #12]
        break;
24054384:	e012      	b.n	240543ac <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
24054386:	68fb      	ldr	r3, [r7, #12]
24054388:	095b      	lsrs	r3, r3, #5
2405438a:	60fb      	str	r3, [r7, #12]
        break;
2405438c:	e00e      	b.n	240543ac <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
2405438e:	68fb      	ldr	r3, [r7, #12]
24054390:	099b      	lsrs	r3, r3, #6
24054392:	60fb      	str	r3, [r7, #12]
        break;
24054394:	e00a      	b.n	240543ac <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
24054396:	68fb      	ldr	r3, [r7, #12]
24054398:	09db      	lsrs	r3, r3, #7
2405439a:	60fb      	str	r3, [r7, #12]
        break;
2405439c:	e006      	b.n	240543ac <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
2405439e:	68fb      	ldr	r3, [r7, #12]
240543a0:	0a1b      	lsrs	r3, r3, #8
240543a2:	60fb      	str	r3, [r7, #12]
        break;
240543a4:	e002      	b.n	240543ac <ADC_ConfigureBoostMode+0x114>
        break;
240543a6:	bf00      	nop
240543a8:	e000      	b.n	240543ac <ADC_ConfigureBoostMode+0x114>
      default:
        break;
240543aa:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
240543ac:	68fb      	ldr	r3, [r7, #12]
240543ae:	085b      	lsrs	r3, r3, #1
240543b0:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
240543b2:	68fb      	ldr	r3, [r7, #12]
240543b4:	4a1b      	ldr	r2, [pc, #108]	; (24054424 <ADC_ConfigureBoostMode+0x18c>)
240543b6:	4293      	cmp	r3, r2
240543b8:	d808      	bhi.n	240543cc <ADC_ConfigureBoostMode+0x134>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
240543ba:	687b      	ldr	r3, [r7, #4]
240543bc:	681b      	ldr	r3, [r3, #0]
240543be:	689a      	ldr	r2, [r3, #8]
240543c0:	687b      	ldr	r3, [r7, #4]
240543c2:	681b      	ldr	r3, [r3, #0]
240543c4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
240543c8:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
240543ca:	e025      	b.n	24054418 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 12500000UL)
240543cc:	68fb      	ldr	r3, [r7, #12]
240543ce:	4a16      	ldr	r2, [pc, #88]	; (24054428 <ADC_ConfigureBoostMode+0x190>)
240543d0:	4293      	cmp	r3, r2
240543d2:	d80a      	bhi.n	240543ea <ADC_ConfigureBoostMode+0x152>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
240543d4:	687b      	ldr	r3, [r7, #4]
240543d6:	681b      	ldr	r3, [r3, #0]
240543d8:	689b      	ldr	r3, [r3, #8]
240543da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
240543de:	687b      	ldr	r3, [r7, #4]
240543e0:	681b      	ldr	r3, [r3, #0]
240543e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
240543e6:	609a      	str	r2, [r3, #8]
}
240543e8:	e016      	b.n	24054418 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 25000000UL)
240543ea:	68fb      	ldr	r3, [r7, #12]
240543ec:	4a0f      	ldr	r2, [pc, #60]	; (2405442c <ADC_ConfigureBoostMode+0x194>)
240543ee:	4293      	cmp	r3, r2
240543f0:	d80a      	bhi.n	24054408 <ADC_ConfigureBoostMode+0x170>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
240543f2:	687b      	ldr	r3, [r7, #4]
240543f4:	681b      	ldr	r3, [r3, #0]
240543f6:	689b      	ldr	r3, [r3, #8]
240543f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
240543fc:	687b      	ldr	r3, [r7, #4]
240543fe:	681b      	ldr	r3, [r3, #0]
24054400:	f442 7200 	orr.w	r2, r2, #512	; 0x200
24054404:	609a      	str	r2, [r3, #8]
}
24054406:	e007      	b.n	24054418 <ADC_ConfigureBoostMode+0x180>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
24054408:	687b      	ldr	r3, [r7, #4]
2405440a:	681b      	ldr	r3, [r3, #0]
2405440c:	689a      	ldr	r2, [r3, #8]
2405440e:	687b      	ldr	r3, [r7, #4]
24054410:	681b      	ldr	r3, [r3, #0]
24054412:	f442 7240 	orr.w	r2, r2, #768	; 0x300
24054416:	609a      	str	r2, [r3, #8]
}
24054418:	bf00      	nop
2405441a:	3710      	adds	r7, #16
2405441c:	46bd      	mov	sp, r7
2405441e:	bd80      	pop	{r7, pc}
24054420:	40022300 	.word	0x40022300
24054424:	005f5e10 	.word	0x005f5e10
24054428:	00bebc20 	.word	0x00bebc20
2405442c:	017d7840 	.word	0x017d7840

24054430 <LL_ADC_IsEnabled>:
{
24054430:	b480      	push	{r7}
24054432:	b083      	sub	sp, #12
24054434:	af00      	add	r7, sp, #0
24054436:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
24054438:	687b      	ldr	r3, [r7, #4]
2405443a:	689b      	ldr	r3, [r3, #8]
2405443c:	f003 0301 	and.w	r3, r3, #1
24054440:	2b01      	cmp	r3, #1
24054442:	d101      	bne.n	24054448 <LL_ADC_IsEnabled+0x18>
24054444:	2301      	movs	r3, #1
24054446:	e000      	b.n	2405444a <LL_ADC_IsEnabled+0x1a>
24054448:	2300      	movs	r3, #0
}
2405444a:	4618      	mov	r0, r3
2405444c:	370c      	adds	r7, #12
2405444e:	46bd      	mov	sp, r7
24054450:	f85d 7b04 	ldr.w	r7, [sp], #4
24054454:	4770      	bx	lr

24054456 <LL_ADC_REG_IsConversionOngoing>:
{
24054456:	b480      	push	{r7}
24054458:	b083      	sub	sp, #12
2405445a:	af00      	add	r7, sp, #0
2405445c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
2405445e:	687b      	ldr	r3, [r7, #4]
24054460:	689b      	ldr	r3, [r3, #8]
24054462:	f003 0304 	and.w	r3, r3, #4
24054466:	2b04      	cmp	r3, #4
24054468:	d101      	bne.n	2405446e <LL_ADC_REG_IsConversionOngoing+0x18>
2405446a:	2301      	movs	r3, #1
2405446c:	e000      	b.n	24054470 <LL_ADC_REG_IsConversionOngoing+0x1a>
2405446e:	2300      	movs	r3, #0
}
24054470:	4618      	mov	r0, r3
24054472:	370c      	adds	r7, #12
24054474:	46bd      	mov	sp, r7
24054476:	f85d 7b04 	ldr.w	r7, [sp], #4
2405447a:	4770      	bx	lr

2405447c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
2405447c:	b480      	push	{r7}
2405447e:	b083      	sub	sp, #12
24054480:	af00      	add	r7, sp, #0
24054482:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
24054484:	bf00      	nop
24054486:	370c      	adds	r7, #12
24054488:	46bd      	mov	sp, r7
2405448a:	f85d 7b04 	ldr.w	r7, [sp], #4
2405448e:	4770      	bx	lr

24054490 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
24054490:	b480      	push	{r7}
24054492:	b083      	sub	sp, #12
24054494:	af00      	add	r7, sp, #0
24054496:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
24054498:	bf00      	nop
2405449a:	370c      	adds	r7, #12
2405449c:	46bd      	mov	sp, r7
2405449e:	f85d 7b04 	ldr.w	r7, [sp], #4
240544a2:	4770      	bx	lr

240544a4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
240544a4:	b480      	push	{r7}
240544a6:	b083      	sub	sp, #12
240544a8:	af00      	add	r7, sp, #0
240544aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
240544ac:	bf00      	nop
240544ae:	370c      	adds	r7, #12
240544b0:	46bd      	mov	sp, r7
240544b2:	f85d 7b04 	ldr.w	r7, [sp], #4
240544b6:	4770      	bx	lr

240544b8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
240544b8:	b480      	push	{r7}
240544ba:	b083      	sub	sp, #12
240544bc:	af00      	add	r7, sp, #0
240544be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
240544c0:	bf00      	nop
240544c2:	370c      	adds	r7, #12
240544c4:	46bd      	mov	sp, r7
240544c6:	f85d 7b04 	ldr.w	r7, [sp], #4
240544ca:	4770      	bx	lr

240544cc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
240544cc:	b480      	push	{r7}
240544ce:	b083      	sub	sp, #12
240544d0:	af00      	add	r7, sp, #0
240544d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
240544d4:	bf00      	nop
240544d6:	370c      	adds	r7, #12
240544d8:	46bd      	mov	sp, r7
240544da:	f85d 7b04 	ldr.w	r7, [sp], #4
240544de:	4770      	bx	lr

240544e0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
240544e0:	b590      	push	{r4, r7, lr}
240544e2:	b09f      	sub	sp, #124	; 0x7c
240544e4:	af00      	add	r7, sp, #0
240544e6:	6078      	str	r0, [r7, #4]
240544e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
240544ea:	2300      	movs	r3, #0
240544ec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
240544f0:	687b      	ldr	r3, [r7, #4]
240544f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
240544f6:	2b01      	cmp	r3, #1
240544f8:	d101      	bne.n	240544fe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
240544fa:	2302      	movs	r3, #2
240544fc:	e080      	b.n	24054600 <HAL_ADCEx_MultiModeConfigChannel+0x120>
240544fe:	687b      	ldr	r3, [r7, #4]
24054500:	2201      	movs	r2, #1
24054502:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
24054506:	2300      	movs	r3, #0
24054508:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
2405450a:	2300      	movs	r3, #0
2405450c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
2405450e:	687b      	ldr	r3, [r7, #4]
24054510:	681b      	ldr	r3, [r3, #0]
24054512:	4a3d      	ldr	r2, [pc, #244]	; (24054608 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
24054514:	4293      	cmp	r3, r2
24054516:	d102      	bne.n	2405451e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
24054518:	4b3c      	ldr	r3, [pc, #240]	; (2405460c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
2405451a:	60bb      	str	r3, [r7, #8]
2405451c:	e001      	b.n	24054522 <HAL_ADCEx_MultiModeConfigChannel+0x42>
2405451e:	2300      	movs	r3, #0
24054520:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
24054522:	68bb      	ldr	r3, [r7, #8]
24054524:	2b00      	cmp	r3, #0
24054526:	d10b      	bne.n	24054540 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
24054528:	687b      	ldr	r3, [r7, #4]
2405452a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405452c:	f043 0220 	orr.w	r2, r3, #32
24054530:	687b      	ldr	r3, [r7, #4]
24054532:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
24054534:	687b      	ldr	r3, [r7, #4]
24054536:	2200      	movs	r2, #0
24054538:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
2405453c:	2301      	movs	r3, #1
2405453e:	e05f      	b.n	24054600 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
24054540:	68bb      	ldr	r3, [r7, #8]
24054542:	4618      	mov	r0, r3
24054544:	f7ff ff87 	bl	24054456 <LL_ADC_REG_IsConversionOngoing>
24054548:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
2405454a:	687b      	ldr	r3, [r7, #4]
2405454c:	681b      	ldr	r3, [r3, #0]
2405454e:	4618      	mov	r0, r3
24054550:	f7ff ff81 	bl	24054456 <LL_ADC_REG_IsConversionOngoing>
24054554:	4603      	mov	r3, r0
24054556:	2b00      	cmp	r3, #0
24054558:	d141      	bne.n	240545de <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
2405455a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
2405455c:	2b00      	cmp	r3, #0
2405455e:	d13e      	bne.n	240545de <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
24054560:	4b2b      	ldr	r3, [pc, #172]	; (24054610 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
24054562:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
24054564:	683b      	ldr	r3, [r7, #0]
24054566:	681b      	ldr	r3, [r3, #0]
24054568:	2b00      	cmp	r3, #0
2405456a:	d020      	beq.n	240545ae <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
2405456c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
2405456e:	689b      	ldr	r3, [r3, #8]
24054570:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
24054574:	683b      	ldr	r3, [r7, #0]
24054576:	685b      	ldr	r3, [r3, #4]
24054578:	431a      	orrs	r2, r3
2405457a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
2405457c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
2405457e:	4822      	ldr	r0, [pc, #136]	; (24054608 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
24054580:	f7ff ff56 	bl	24054430 <LL_ADC_IsEnabled>
24054584:	4604      	mov	r4, r0
24054586:	4821      	ldr	r0, [pc, #132]	; (2405460c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
24054588:	f7ff ff52 	bl	24054430 <LL_ADC_IsEnabled>
2405458c:	4603      	mov	r3, r0
2405458e:	4323      	orrs	r3, r4
24054590:	2b00      	cmp	r3, #0
24054592:	d12e      	bne.n	240545f2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
24054594:	6efb      	ldr	r3, [r7, #108]	; 0x6c
24054596:	689a      	ldr	r2, [r3, #8]
24054598:	4b1e      	ldr	r3, [pc, #120]	; (24054614 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
2405459a:	4013      	ands	r3, r2
2405459c:	683a      	ldr	r2, [r7, #0]
2405459e:	6811      	ldr	r1, [r2, #0]
240545a0:	683a      	ldr	r2, [r7, #0]
240545a2:	6892      	ldr	r2, [r2, #8]
240545a4:	430a      	orrs	r2, r1
240545a6:	431a      	orrs	r2, r3
240545a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
240545aa:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
240545ac:	e021      	b.n	240545f2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
240545ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
240545b0:	689b      	ldr	r3, [r3, #8]
240545b2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
240545b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
240545b8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
240545ba:	4813      	ldr	r0, [pc, #76]	; (24054608 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
240545bc:	f7ff ff38 	bl	24054430 <LL_ADC_IsEnabled>
240545c0:	4604      	mov	r4, r0
240545c2:	4812      	ldr	r0, [pc, #72]	; (2405460c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
240545c4:	f7ff ff34 	bl	24054430 <LL_ADC_IsEnabled>
240545c8:	4603      	mov	r3, r0
240545ca:	4323      	orrs	r3, r4
240545cc:	2b00      	cmp	r3, #0
240545ce:	d110      	bne.n	240545f2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
240545d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
240545d2:	689a      	ldr	r2, [r3, #8]
240545d4:	4b0f      	ldr	r3, [pc, #60]	; (24054614 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
240545d6:	4013      	ands	r3, r2
240545d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
240545da:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
240545dc:	e009      	b.n	240545f2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
240545de:	687b      	ldr	r3, [r7, #4]
240545e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240545e2:	f043 0220 	orr.w	r2, r3, #32
240545e6:	687b      	ldr	r3, [r7, #4]
240545e8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
240545ea:	2301      	movs	r3, #1
240545ec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
240545f0:	e000      	b.n	240545f4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
240545f2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
240545f4:	687b      	ldr	r3, [r7, #4]
240545f6:	2200      	movs	r2, #0
240545f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
240545fc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
24054600:	4618      	mov	r0, r3
24054602:	377c      	adds	r7, #124	; 0x7c
24054604:	46bd      	mov	sp, r7
24054606:	bd90      	pop	{r4, r7, pc}
24054608:	40022000 	.word	0x40022000
2405460c:	40022100 	.word	0x40022100
24054610:	40022300 	.word	0x40022300
24054614:	fffff0e0 	.word	0xfffff0e0

24054618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
24054618:	b480      	push	{r7}
2405461a:	b085      	sub	sp, #20
2405461c:	af00      	add	r7, sp, #0
2405461e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
24054620:	687b      	ldr	r3, [r7, #4]
24054622:	f003 0307 	and.w	r3, r3, #7
24054626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
24054628:	4b0b      	ldr	r3, [pc, #44]	; (24054658 <__NVIC_SetPriorityGrouping+0x40>)
2405462a:	68db      	ldr	r3, [r3, #12]
2405462c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
2405462e:	68ba      	ldr	r2, [r7, #8]
24054630:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
24054634:	4013      	ands	r3, r2
24054636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
24054638:	68fb      	ldr	r3, [r7, #12]
2405463a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
2405463c:	68bb      	ldr	r3, [r7, #8]
2405463e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
24054640:	4b06      	ldr	r3, [pc, #24]	; (2405465c <__NVIC_SetPriorityGrouping+0x44>)
24054642:	4313      	orrs	r3, r2
24054644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
24054646:	4a04      	ldr	r2, [pc, #16]	; (24054658 <__NVIC_SetPriorityGrouping+0x40>)
24054648:	68bb      	ldr	r3, [r7, #8]
2405464a:	60d3      	str	r3, [r2, #12]
}
2405464c:	bf00      	nop
2405464e:	3714      	adds	r7, #20
24054650:	46bd      	mov	sp, r7
24054652:	f85d 7b04 	ldr.w	r7, [sp], #4
24054656:	4770      	bx	lr
24054658:	e000ed00 	.word	0xe000ed00
2405465c:	05fa0000 	.word	0x05fa0000

24054660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
24054660:	b480      	push	{r7}
24054662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
24054664:	4b04      	ldr	r3, [pc, #16]	; (24054678 <__NVIC_GetPriorityGrouping+0x18>)
24054666:	68db      	ldr	r3, [r3, #12]
24054668:	0a1b      	lsrs	r3, r3, #8
2405466a:	f003 0307 	and.w	r3, r3, #7
}
2405466e:	4618      	mov	r0, r3
24054670:	46bd      	mov	sp, r7
24054672:	f85d 7b04 	ldr.w	r7, [sp], #4
24054676:	4770      	bx	lr
24054678:	e000ed00 	.word	0xe000ed00

2405467c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
2405467c:	b480      	push	{r7}
2405467e:	b083      	sub	sp, #12
24054680:	af00      	add	r7, sp, #0
24054682:	4603      	mov	r3, r0
24054684:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
24054686:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
2405468a:	2b00      	cmp	r3, #0
2405468c:	db0b      	blt.n	240546a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
2405468e:	88fb      	ldrh	r3, [r7, #6]
24054690:	f003 021f 	and.w	r2, r3, #31
24054694:	4907      	ldr	r1, [pc, #28]	; (240546b4 <__NVIC_EnableIRQ+0x38>)
24054696:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
2405469a:	095b      	lsrs	r3, r3, #5
2405469c:	2001      	movs	r0, #1
2405469e:	fa00 f202 	lsl.w	r2, r0, r2
240546a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
240546a6:	bf00      	nop
240546a8:	370c      	adds	r7, #12
240546aa:	46bd      	mov	sp, r7
240546ac:	f85d 7b04 	ldr.w	r7, [sp], #4
240546b0:	4770      	bx	lr
240546b2:	bf00      	nop
240546b4:	e000e100 	.word	0xe000e100

240546b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
240546b8:	b480      	push	{r7}
240546ba:	b083      	sub	sp, #12
240546bc:	af00      	add	r7, sp, #0
240546be:	4603      	mov	r3, r0
240546c0:	6039      	str	r1, [r7, #0]
240546c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
240546c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
240546c8:	2b00      	cmp	r3, #0
240546ca:	db0a      	blt.n	240546e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
240546cc:	683b      	ldr	r3, [r7, #0]
240546ce:	b2da      	uxtb	r2, r3
240546d0:	490c      	ldr	r1, [pc, #48]	; (24054704 <__NVIC_SetPriority+0x4c>)
240546d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
240546d6:	0112      	lsls	r2, r2, #4
240546d8:	b2d2      	uxtb	r2, r2
240546da:	440b      	add	r3, r1
240546dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
240546e0:	e00a      	b.n	240546f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
240546e2:	683b      	ldr	r3, [r7, #0]
240546e4:	b2da      	uxtb	r2, r3
240546e6:	4908      	ldr	r1, [pc, #32]	; (24054708 <__NVIC_SetPriority+0x50>)
240546e8:	88fb      	ldrh	r3, [r7, #6]
240546ea:	f003 030f 	and.w	r3, r3, #15
240546ee:	3b04      	subs	r3, #4
240546f0:	0112      	lsls	r2, r2, #4
240546f2:	b2d2      	uxtb	r2, r2
240546f4:	440b      	add	r3, r1
240546f6:	761a      	strb	r2, [r3, #24]
}
240546f8:	bf00      	nop
240546fa:	370c      	adds	r7, #12
240546fc:	46bd      	mov	sp, r7
240546fe:	f85d 7b04 	ldr.w	r7, [sp], #4
24054702:	4770      	bx	lr
24054704:	e000e100 	.word	0xe000e100
24054708:	e000ed00 	.word	0xe000ed00

2405470c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
2405470c:	b480      	push	{r7}
2405470e:	b089      	sub	sp, #36	; 0x24
24054710:	af00      	add	r7, sp, #0
24054712:	60f8      	str	r0, [r7, #12]
24054714:	60b9      	str	r1, [r7, #8]
24054716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
24054718:	68fb      	ldr	r3, [r7, #12]
2405471a:	f003 0307 	and.w	r3, r3, #7
2405471e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
24054720:	69fb      	ldr	r3, [r7, #28]
24054722:	f1c3 0307 	rsb	r3, r3, #7
24054726:	2b04      	cmp	r3, #4
24054728:	bf28      	it	cs
2405472a:	2304      	movcs	r3, #4
2405472c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
2405472e:	69fb      	ldr	r3, [r7, #28]
24054730:	3304      	adds	r3, #4
24054732:	2b06      	cmp	r3, #6
24054734:	d902      	bls.n	2405473c <NVIC_EncodePriority+0x30>
24054736:	69fb      	ldr	r3, [r7, #28]
24054738:	3b03      	subs	r3, #3
2405473a:	e000      	b.n	2405473e <NVIC_EncodePriority+0x32>
2405473c:	2300      	movs	r3, #0
2405473e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
24054740:	f04f 32ff 	mov.w	r2, #4294967295
24054744:	69bb      	ldr	r3, [r7, #24]
24054746:	fa02 f303 	lsl.w	r3, r2, r3
2405474a:	43da      	mvns	r2, r3
2405474c:	68bb      	ldr	r3, [r7, #8]
2405474e:	401a      	ands	r2, r3
24054750:	697b      	ldr	r3, [r7, #20]
24054752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
24054754:	f04f 31ff 	mov.w	r1, #4294967295
24054758:	697b      	ldr	r3, [r7, #20]
2405475a:	fa01 f303 	lsl.w	r3, r1, r3
2405475e:	43d9      	mvns	r1, r3
24054760:	687b      	ldr	r3, [r7, #4]
24054762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
24054764:	4313      	orrs	r3, r2
         );
}
24054766:	4618      	mov	r0, r3
24054768:	3724      	adds	r7, #36	; 0x24
2405476a:	46bd      	mov	sp, r7
2405476c:	f85d 7b04 	ldr.w	r7, [sp], #4
24054770:	4770      	bx	lr
	...

24054774 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
24054774:	b480      	push	{r7}
24054776:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
24054778:	f3bf 8f4f 	dsb	sy
}
2405477c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
2405477e:	4b06      	ldr	r3, [pc, #24]	; (24054798 <__NVIC_SystemReset+0x24>)
24054780:	68db      	ldr	r3, [r3, #12]
24054782:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
24054786:	4904      	ldr	r1, [pc, #16]	; (24054798 <__NVIC_SystemReset+0x24>)
24054788:	4b04      	ldr	r3, [pc, #16]	; (2405479c <__NVIC_SystemReset+0x28>)
2405478a:	4313      	orrs	r3, r2
2405478c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
2405478e:	f3bf 8f4f 	dsb	sy
}
24054792:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
24054794:	bf00      	nop
24054796:	e7fd      	b.n	24054794 <__NVIC_SystemReset+0x20>
24054798:	e000ed00 	.word	0xe000ed00
2405479c:	05fa0004 	.word	0x05fa0004

240547a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
240547a0:	b580      	push	{r7, lr}
240547a2:	b082      	sub	sp, #8
240547a4:	af00      	add	r7, sp, #0
240547a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
240547a8:	687b      	ldr	r3, [r7, #4]
240547aa:	3b01      	subs	r3, #1
240547ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
240547b0:	d301      	bcc.n	240547b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
240547b2:	2301      	movs	r3, #1
240547b4:	e00f      	b.n	240547d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
240547b6:	4a0a      	ldr	r2, [pc, #40]	; (240547e0 <SysTick_Config+0x40>)
240547b8:	687b      	ldr	r3, [r7, #4]
240547ba:	3b01      	subs	r3, #1
240547bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
240547be:	210f      	movs	r1, #15
240547c0:	f04f 30ff 	mov.w	r0, #4294967295
240547c4:	f7ff ff78 	bl	240546b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
240547c8:	4b05      	ldr	r3, [pc, #20]	; (240547e0 <SysTick_Config+0x40>)
240547ca:	2200      	movs	r2, #0
240547cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
240547ce:	4b04      	ldr	r3, [pc, #16]	; (240547e0 <SysTick_Config+0x40>)
240547d0:	2207      	movs	r2, #7
240547d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
240547d4:	2300      	movs	r3, #0
}
240547d6:	4618      	mov	r0, r3
240547d8:	3708      	adds	r7, #8
240547da:	46bd      	mov	sp, r7
240547dc:	bd80      	pop	{r7, pc}
240547de:	bf00      	nop
240547e0:	e000e010 	.word	0xe000e010

240547e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
240547e4:	b580      	push	{r7, lr}
240547e6:	b082      	sub	sp, #8
240547e8:	af00      	add	r7, sp, #0
240547ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
240547ec:	6878      	ldr	r0, [r7, #4]
240547ee:	f7ff ff13 	bl	24054618 <__NVIC_SetPriorityGrouping>
}
240547f2:	bf00      	nop
240547f4:	3708      	adds	r7, #8
240547f6:	46bd      	mov	sp, r7
240547f8:	bd80      	pop	{r7, pc}

240547fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
240547fa:	b580      	push	{r7, lr}
240547fc:	b086      	sub	sp, #24
240547fe:	af00      	add	r7, sp, #0
24054800:	4603      	mov	r3, r0
24054802:	60b9      	str	r1, [r7, #8]
24054804:	607a      	str	r2, [r7, #4]
24054806:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
24054808:	f7ff ff2a 	bl	24054660 <__NVIC_GetPriorityGrouping>
2405480c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
2405480e:	687a      	ldr	r2, [r7, #4]
24054810:	68b9      	ldr	r1, [r7, #8]
24054812:	6978      	ldr	r0, [r7, #20]
24054814:	f7ff ff7a 	bl	2405470c <NVIC_EncodePriority>
24054818:	4602      	mov	r2, r0
2405481a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
2405481e:	4611      	mov	r1, r2
24054820:	4618      	mov	r0, r3
24054822:	f7ff ff49 	bl	240546b8 <__NVIC_SetPriority>
}
24054826:	bf00      	nop
24054828:	3718      	adds	r7, #24
2405482a:	46bd      	mov	sp, r7
2405482c:	bd80      	pop	{r7, pc}

2405482e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
2405482e:	b580      	push	{r7, lr}
24054830:	b082      	sub	sp, #8
24054832:	af00      	add	r7, sp, #0
24054834:	4603      	mov	r3, r0
24054836:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
24054838:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
2405483c:	4618      	mov	r0, r3
2405483e:	f7ff ff1d 	bl	2405467c <__NVIC_EnableIRQ>
}
24054842:	bf00      	nop
24054844:	3708      	adds	r7, #8
24054846:	46bd      	mov	sp, r7
24054848:	bd80      	pop	{r7, pc}

2405484a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
2405484a:	b580      	push	{r7, lr}
2405484c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
2405484e:	f7ff ff91 	bl	24054774 <__NVIC_SystemReset>

24054852 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
24054852:	b580      	push	{r7, lr}
24054854:	b082      	sub	sp, #8
24054856:	af00      	add	r7, sp, #0
24054858:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
2405485a:	6878      	ldr	r0, [r7, #4]
2405485c:	f7ff ffa0 	bl	240547a0 <SysTick_Config>
24054860:	4603      	mov	r3, r0
}
24054862:	4618      	mov	r0, r3
24054864:	3708      	adds	r7, #8
24054866:	46bd      	mov	sp, r7
24054868:	bd80      	pop	{r7, pc}

2405486a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
2405486a:	b580      	push	{r7, lr}
2405486c:	b082      	sub	sp, #8
2405486e:	af00      	add	r7, sp, #0
24054870:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
24054872:	687b      	ldr	r3, [r7, #4]
24054874:	2b00      	cmp	r3, #0
24054876:	d101      	bne.n	2405487c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
24054878:	2301      	movs	r3, #1
2405487a:	e014      	b.n	240548a6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
2405487c:	687b      	ldr	r3, [r7, #4]
2405487e:	791b      	ldrb	r3, [r3, #4]
24054880:	b2db      	uxtb	r3, r3
24054882:	2b00      	cmp	r3, #0
24054884:	d105      	bne.n	24054892 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
24054886:	687b      	ldr	r3, [r7, #4]
24054888:	2200      	movs	r2, #0
2405488a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
2405488c:	6878      	ldr	r0, [r7, #4]
2405488e:	f7fd fb9d 	bl	24051fcc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
24054892:	687b      	ldr	r3, [r7, #4]
24054894:	2202      	movs	r2, #2
24054896:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
24054898:	687b      	ldr	r3, [r7, #4]
2405489a:	2200      	movs	r2, #0
2405489c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
2405489e:	687b      	ldr	r3, [r7, #4]
240548a0:	2201      	movs	r2, #1
240548a2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
240548a4:	2300      	movs	r3, #0
}
240548a6:	4618      	mov	r0, r3
240548a8:	3708      	adds	r7, #8
240548aa:	46bd      	mov	sp, r7
240548ac:	bd80      	pop	{r7, pc}

240548ae <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
240548ae:	b480      	push	{r7}
240548b0:	b083      	sub	sp, #12
240548b2:	af00      	add	r7, sp, #0
240548b4:	6078      	str	r0, [r7, #4]
240548b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
240548b8:	687b      	ldr	r3, [r7, #4]
240548ba:	795b      	ldrb	r3, [r3, #5]
240548bc:	2b01      	cmp	r3, #1
240548be:	d101      	bne.n	240548c4 <HAL_DAC_Start+0x16>
240548c0:	2302      	movs	r3, #2
240548c2:	e040      	b.n	24054946 <HAL_DAC_Start+0x98>
240548c4:	687b      	ldr	r3, [r7, #4]
240548c6:	2201      	movs	r2, #1
240548c8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
240548ca:	687b      	ldr	r3, [r7, #4]
240548cc:	2202      	movs	r2, #2
240548ce:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
240548d0:	687b      	ldr	r3, [r7, #4]
240548d2:	681b      	ldr	r3, [r3, #0]
240548d4:	6819      	ldr	r1, [r3, #0]
240548d6:	683b      	ldr	r3, [r7, #0]
240548d8:	f003 0310 	and.w	r3, r3, #16
240548dc:	2201      	movs	r2, #1
240548de:	409a      	lsls	r2, r3
240548e0:	687b      	ldr	r3, [r7, #4]
240548e2:	681b      	ldr	r3, [r3, #0]
240548e4:	430a      	orrs	r2, r1
240548e6:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
240548e8:	683b      	ldr	r3, [r7, #0]
240548ea:	2b00      	cmp	r3, #0
240548ec:	d10f      	bne.n	2405490e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
240548ee:	687b      	ldr	r3, [r7, #4]
240548f0:	681b      	ldr	r3, [r3, #0]
240548f2:	681b      	ldr	r3, [r3, #0]
240548f4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
240548f8:	2b02      	cmp	r3, #2
240548fa:	d11d      	bne.n	24054938 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
240548fc:	687b      	ldr	r3, [r7, #4]
240548fe:	681b      	ldr	r3, [r3, #0]
24054900:	685a      	ldr	r2, [r3, #4]
24054902:	687b      	ldr	r3, [r7, #4]
24054904:	681b      	ldr	r3, [r3, #0]
24054906:	f042 0201 	orr.w	r2, r2, #1
2405490a:	605a      	str	r2, [r3, #4]
2405490c:	e014      	b.n	24054938 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
2405490e:	687b      	ldr	r3, [r7, #4]
24054910:	681b      	ldr	r3, [r3, #0]
24054912:	681b      	ldr	r3, [r3, #0]
24054914:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
24054918:	683b      	ldr	r3, [r7, #0]
2405491a:	f003 0310 	and.w	r3, r3, #16
2405491e:	2102      	movs	r1, #2
24054920:	fa01 f303 	lsl.w	r3, r1, r3
24054924:	429a      	cmp	r2, r3
24054926:	d107      	bne.n	24054938 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
24054928:	687b      	ldr	r3, [r7, #4]
2405492a:	681b      	ldr	r3, [r3, #0]
2405492c:	685a      	ldr	r2, [r3, #4]
2405492e:	687b      	ldr	r3, [r7, #4]
24054930:	681b      	ldr	r3, [r3, #0]
24054932:	f042 0202 	orr.w	r2, r2, #2
24054936:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
24054938:	687b      	ldr	r3, [r7, #4]
2405493a:	2201      	movs	r2, #1
2405493c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
2405493e:	687b      	ldr	r3, [r7, #4]
24054940:	2200      	movs	r2, #0
24054942:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
24054944:	2300      	movs	r3, #0
}
24054946:	4618      	mov	r0, r3
24054948:	370c      	adds	r7, #12
2405494a:	46bd      	mov	sp, r7
2405494c:	f85d 7b04 	ldr.w	r7, [sp], #4
24054950:	4770      	bx	lr

24054952 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
24054952:	b480      	push	{r7}
24054954:	b087      	sub	sp, #28
24054956:	af00      	add	r7, sp, #0
24054958:	60f8      	str	r0, [r7, #12]
2405495a:	60b9      	str	r1, [r7, #8]
2405495c:	607a      	str	r2, [r7, #4]
2405495e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
24054960:	2300      	movs	r3, #0
24054962:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
24054964:	68fb      	ldr	r3, [r7, #12]
24054966:	681b      	ldr	r3, [r3, #0]
24054968:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
2405496a:	68bb      	ldr	r3, [r7, #8]
2405496c:	2b00      	cmp	r3, #0
2405496e:	d105      	bne.n	2405497c <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
24054970:	697a      	ldr	r2, [r7, #20]
24054972:	687b      	ldr	r3, [r7, #4]
24054974:	4413      	add	r3, r2
24054976:	3308      	adds	r3, #8
24054978:	617b      	str	r3, [r7, #20]
2405497a:	e004      	b.n	24054986 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
2405497c:	697a      	ldr	r2, [r7, #20]
2405497e:	687b      	ldr	r3, [r7, #4]
24054980:	4413      	add	r3, r2
24054982:	3314      	adds	r3, #20
24054984:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
24054986:	697b      	ldr	r3, [r7, #20]
24054988:	461a      	mov	r2, r3
2405498a:	683b      	ldr	r3, [r7, #0]
2405498c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
2405498e:	2300      	movs	r3, #0
}
24054990:	4618      	mov	r0, r3
24054992:	371c      	adds	r7, #28
24054994:	46bd      	mov	sp, r7
24054996:	f85d 7b04 	ldr.w	r7, [sp], #4
2405499a:	4770      	bx	lr

2405499c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
2405499c:	b580      	push	{r7, lr}
2405499e:	b088      	sub	sp, #32
240549a0:	af00      	add	r7, sp, #0
240549a2:	60f8      	str	r0, [r7, #12]
240549a4:	60b9      	str	r1, [r7, #8]
240549a6:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
240549a8:	68fb      	ldr	r3, [r7, #12]
240549aa:	795b      	ldrb	r3, [r3, #5]
240549ac:	2b01      	cmp	r3, #1
240549ae:	d101      	bne.n	240549b4 <HAL_DAC_ConfigChannel+0x18>
240549b0:	2302      	movs	r3, #2
240549b2:	e11d      	b.n	24054bf0 <HAL_DAC_ConfigChannel+0x254>
240549b4:	68fb      	ldr	r3, [r7, #12]
240549b6:	2201      	movs	r2, #1
240549b8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
240549ba:	68fb      	ldr	r3, [r7, #12]
240549bc:	2202      	movs	r2, #2
240549be:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
240549c0:	68bb      	ldr	r3, [r7, #8]
240549c2:	681b      	ldr	r3, [r3, #0]
240549c4:	2b04      	cmp	r3, #4
240549c6:	d174      	bne.n	24054ab2 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
240549c8:	f7fe f9ac 	bl	24052d24 <HAL_GetTick>
240549cc:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
240549ce:	687b      	ldr	r3, [r7, #4]
240549d0:	2b00      	cmp	r3, #0
240549d2:	d134      	bne.n	24054a3e <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
240549d4:	e011      	b.n	240549fa <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
240549d6:	f7fe f9a5 	bl	24052d24 <HAL_GetTick>
240549da:	4602      	mov	r2, r0
240549dc:	69bb      	ldr	r3, [r7, #24]
240549de:	1ad3      	subs	r3, r2, r3
240549e0:	2b01      	cmp	r3, #1
240549e2:	d90a      	bls.n	240549fa <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
240549e4:	68fb      	ldr	r3, [r7, #12]
240549e6:	691b      	ldr	r3, [r3, #16]
240549e8:	f043 0208 	orr.w	r2, r3, #8
240549ec:	68fb      	ldr	r3, [r7, #12]
240549ee:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
240549f0:	68fb      	ldr	r3, [r7, #12]
240549f2:	2203      	movs	r2, #3
240549f4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
240549f6:	2303      	movs	r3, #3
240549f8:	e0fa      	b.n	24054bf0 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
240549fa:	68fb      	ldr	r3, [r7, #12]
240549fc:	681b      	ldr	r3, [r3, #0]
240549fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
24054a00:	4b7d      	ldr	r3, [pc, #500]	; (24054bf8 <HAL_DAC_ConfigChannel+0x25c>)
24054a02:	4013      	ands	r3, r2
24054a04:	2b00      	cmp	r3, #0
24054a06:	d1e6      	bne.n	240549d6 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
24054a08:	2001      	movs	r0, #1
24054a0a:	f7fe f997 	bl	24052d3c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
24054a0e:	68fb      	ldr	r3, [r7, #12]
24054a10:	681b      	ldr	r3, [r3, #0]
24054a12:	68ba      	ldr	r2, [r7, #8]
24054a14:	6992      	ldr	r2, [r2, #24]
24054a16:	641a      	str	r2, [r3, #64]	; 0x40
24054a18:	e01e      	b.n	24054a58 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
24054a1a:	f7fe f983 	bl	24052d24 <HAL_GetTick>
24054a1e:	4602      	mov	r2, r0
24054a20:	69bb      	ldr	r3, [r7, #24]
24054a22:	1ad3      	subs	r3, r2, r3
24054a24:	2b01      	cmp	r3, #1
24054a26:	d90a      	bls.n	24054a3e <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
24054a28:	68fb      	ldr	r3, [r7, #12]
24054a2a:	691b      	ldr	r3, [r3, #16]
24054a2c:	f043 0208 	orr.w	r2, r3, #8
24054a30:	68fb      	ldr	r3, [r7, #12]
24054a32:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
24054a34:	68fb      	ldr	r3, [r7, #12]
24054a36:	2203      	movs	r2, #3
24054a38:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
24054a3a:	2303      	movs	r3, #3
24054a3c:	e0d8      	b.n	24054bf0 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
24054a3e:	68fb      	ldr	r3, [r7, #12]
24054a40:	681b      	ldr	r3, [r3, #0]
24054a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24054a44:	2b00      	cmp	r3, #0
24054a46:	dbe8      	blt.n	24054a1a <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
24054a48:	2001      	movs	r0, #1
24054a4a:	f7fe f977 	bl	24052d3c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
24054a4e:	68fb      	ldr	r3, [r7, #12]
24054a50:	681b      	ldr	r3, [r3, #0]
24054a52:	68ba      	ldr	r2, [r7, #8]
24054a54:	6992      	ldr	r2, [r2, #24]
24054a56:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
24054a58:	68fb      	ldr	r3, [r7, #12]
24054a5a:	681b      	ldr	r3, [r3, #0]
24054a5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
24054a5e:	687b      	ldr	r3, [r7, #4]
24054a60:	f003 0310 	and.w	r3, r3, #16
24054a64:	f240 31ff 	movw	r1, #1023	; 0x3ff
24054a68:	fa01 f303 	lsl.w	r3, r1, r3
24054a6c:	43db      	mvns	r3, r3
24054a6e:	ea02 0103 	and.w	r1, r2, r3
24054a72:	68bb      	ldr	r3, [r7, #8]
24054a74:	69da      	ldr	r2, [r3, #28]
24054a76:	687b      	ldr	r3, [r7, #4]
24054a78:	f003 0310 	and.w	r3, r3, #16
24054a7c:	409a      	lsls	r2, r3
24054a7e:	68fb      	ldr	r3, [r7, #12]
24054a80:	681b      	ldr	r3, [r3, #0]
24054a82:	430a      	orrs	r2, r1
24054a84:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
24054a86:	68fb      	ldr	r3, [r7, #12]
24054a88:	681b      	ldr	r3, [r3, #0]
24054a8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
24054a8c:	687b      	ldr	r3, [r7, #4]
24054a8e:	f003 0310 	and.w	r3, r3, #16
24054a92:	21ff      	movs	r1, #255	; 0xff
24054a94:	fa01 f303 	lsl.w	r3, r1, r3
24054a98:	43db      	mvns	r3, r3
24054a9a:	ea02 0103 	and.w	r1, r2, r3
24054a9e:	68bb      	ldr	r3, [r7, #8]
24054aa0:	6a1a      	ldr	r2, [r3, #32]
24054aa2:	687b      	ldr	r3, [r7, #4]
24054aa4:	f003 0310 	and.w	r3, r3, #16
24054aa8:	409a      	lsls	r2, r3
24054aaa:	68fb      	ldr	r3, [r7, #12]
24054aac:	681b      	ldr	r3, [r3, #0]
24054aae:	430a      	orrs	r2, r1
24054ab0:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
24054ab2:	68bb      	ldr	r3, [r7, #8]
24054ab4:	691b      	ldr	r3, [r3, #16]
24054ab6:	2b01      	cmp	r3, #1
24054ab8:	d11d      	bne.n	24054af6 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
24054aba:	68fb      	ldr	r3, [r7, #12]
24054abc:	681b      	ldr	r3, [r3, #0]
24054abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24054ac0:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
24054ac2:	687b      	ldr	r3, [r7, #4]
24054ac4:	f003 0310 	and.w	r3, r3, #16
24054ac8:	221f      	movs	r2, #31
24054aca:	fa02 f303 	lsl.w	r3, r2, r3
24054ace:	43db      	mvns	r3, r3
24054ad0:	697a      	ldr	r2, [r7, #20]
24054ad2:	4013      	ands	r3, r2
24054ad4:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
24054ad6:	68bb      	ldr	r3, [r7, #8]
24054ad8:	695b      	ldr	r3, [r3, #20]
24054ada:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
24054adc:	687b      	ldr	r3, [r7, #4]
24054ade:	f003 0310 	and.w	r3, r3, #16
24054ae2:	693a      	ldr	r2, [r7, #16]
24054ae4:	fa02 f303 	lsl.w	r3, r2, r3
24054ae8:	697a      	ldr	r2, [r7, #20]
24054aea:	4313      	orrs	r3, r2
24054aec:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
24054aee:	68fb      	ldr	r3, [r7, #12]
24054af0:	681b      	ldr	r3, [r3, #0]
24054af2:	697a      	ldr	r2, [r7, #20]
24054af4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
24054af6:	68fb      	ldr	r3, [r7, #12]
24054af8:	681b      	ldr	r3, [r3, #0]
24054afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24054afc:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
24054afe:	687b      	ldr	r3, [r7, #4]
24054b00:	f003 0310 	and.w	r3, r3, #16
24054b04:	2207      	movs	r2, #7
24054b06:	fa02 f303 	lsl.w	r3, r2, r3
24054b0a:	43db      	mvns	r3, r3
24054b0c:	697a      	ldr	r2, [r7, #20]
24054b0e:	4013      	ands	r3, r2
24054b10:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
24054b12:	68bb      	ldr	r3, [r7, #8]
24054b14:	68db      	ldr	r3, [r3, #12]
24054b16:	2b01      	cmp	r3, #1
24054b18:	d102      	bne.n	24054b20 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
24054b1a:	2300      	movs	r3, #0
24054b1c:	61fb      	str	r3, [r7, #28]
24054b1e:	e00f      	b.n	24054b40 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
24054b20:	68bb      	ldr	r3, [r7, #8]
24054b22:	68db      	ldr	r3, [r3, #12]
24054b24:	2b02      	cmp	r3, #2
24054b26:	d102      	bne.n	24054b2e <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
24054b28:	2301      	movs	r3, #1
24054b2a:	61fb      	str	r3, [r7, #28]
24054b2c:	e008      	b.n	24054b40 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
24054b2e:	68bb      	ldr	r3, [r7, #8]
24054b30:	689b      	ldr	r3, [r3, #8]
24054b32:	2b00      	cmp	r3, #0
24054b34:	d102      	bne.n	24054b3c <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
24054b36:	2301      	movs	r3, #1
24054b38:	61fb      	str	r3, [r7, #28]
24054b3a:	e001      	b.n	24054b40 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
24054b3c:	2300      	movs	r3, #0
24054b3e:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
24054b40:	68bb      	ldr	r3, [r7, #8]
24054b42:	681a      	ldr	r2, [r3, #0]
24054b44:	68bb      	ldr	r3, [r7, #8]
24054b46:	689b      	ldr	r3, [r3, #8]
24054b48:	4313      	orrs	r3, r2
24054b4a:	69fa      	ldr	r2, [r7, #28]
24054b4c:	4313      	orrs	r3, r2
24054b4e:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
24054b50:	687b      	ldr	r3, [r7, #4]
24054b52:	f003 0310 	and.w	r3, r3, #16
24054b56:	693a      	ldr	r2, [r7, #16]
24054b58:	fa02 f303 	lsl.w	r3, r2, r3
24054b5c:	697a      	ldr	r2, [r7, #20]
24054b5e:	4313      	orrs	r3, r2
24054b60:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
24054b62:	68fb      	ldr	r3, [r7, #12]
24054b64:	681b      	ldr	r3, [r3, #0]
24054b66:	697a      	ldr	r2, [r7, #20]
24054b68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
24054b6a:	68fb      	ldr	r3, [r7, #12]
24054b6c:	681b      	ldr	r3, [r3, #0]
24054b6e:	6819      	ldr	r1, [r3, #0]
24054b70:	687b      	ldr	r3, [r7, #4]
24054b72:	f003 0310 	and.w	r3, r3, #16
24054b76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
24054b7a:	fa02 f303 	lsl.w	r3, r2, r3
24054b7e:	43da      	mvns	r2, r3
24054b80:	68fb      	ldr	r3, [r7, #12]
24054b82:	681b      	ldr	r3, [r3, #0]
24054b84:	400a      	ands	r2, r1
24054b86:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
24054b88:	68fb      	ldr	r3, [r7, #12]
24054b8a:	681b      	ldr	r3, [r3, #0]
24054b8c:	681b      	ldr	r3, [r3, #0]
24054b8e:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
24054b90:	687b      	ldr	r3, [r7, #4]
24054b92:	f003 0310 	and.w	r3, r3, #16
24054b96:	f640 72fe 	movw	r2, #4094	; 0xffe
24054b9a:	fa02 f303 	lsl.w	r3, r2, r3
24054b9e:	43db      	mvns	r3, r3
24054ba0:	697a      	ldr	r2, [r7, #20]
24054ba2:	4013      	ands	r3, r2
24054ba4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
24054ba6:	68bb      	ldr	r3, [r7, #8]
24054ba8:	685b      	ldr	r3, [r3, #4]
24054baa:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
24054bac:	687b      	ldr	r3, [r7, #4]
24054bae:	f003 0310 	and.w	r3, r3, #16
24054bb2:	693a      	ldr	r2, [r7, #16]
24054bb4:	fa02 f303 	lsl.w	r3, r2, r3
24054bb8:	697a      	ldr	r2, [r7, #20]
24054bba:	4313      	orrs	r3, r2
24054bbc:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
24054bbe:	68fb      	ldr	r3, [r7, #12]
24054bc0:	681b      	ldr	r3, [r3, #0]
24054bc2:	697a      	ldr	r2, [r7, #20]
24054bc4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
24054bc6:	68fb      	ldr	r3, [r7, #12]
24054bc8:	681b      	ldr	r3, [r3, #0]
24054bca:	6819      	ldr	r1, [r3, #0]
24054bcc:	687b      	ldr	r3, [r7, #4]
24054bce:	f003 0310 	and.w	r3, r3, #16
24054bd2:	22c0      	movs	r2, #192	; 0xc0
24054bd4:	fa02 f303 	lsl.w	r3, r2, r3
24054bd8:	43da      	mvns	r2, r3
24054bda:	68fb      	ldr	r3, [r7, #12]
24054bdc:	681b      	ldr	r3, [r3, #0]
24054bde:	400a      	ands	r2, r1
24054be0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
24054be2:	68fb      	ldr	r3, [r7, #12]
24054be4:	2201      	movs	r2, #1
24054be6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
24054be8:	68fb      	ldr	r3, [r7, #12]
24054bea:	2200      	movs	r2, #0
24054bec:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
24054bee:	2300      	movs	r3, #0
}
24054bf0:	4618      	mov	r0, r3
24054bf2:	3720      	adds	r7, #32
24054bf4:	46bd      	mov	sp, r7
24054bf6:	bd80      	pop	{r7, pc}
24054bf8:	20008000 	.word	0x20008000

24054bfc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
24054bfc:	b580      	push	{r7, lr}
24054bfe:	b086      	sub	sp, #24
24054c00:	af00      	add	r7, sp, #0
24054c02:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
24054c04:	f7fe f88e 	bl	24052d24 <HAL_GetTick>
24054c08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
24054c0a:	687b      	ldr	r3, [r7, #4]
24054c0c:	2b00      	cmp	r3, #0
24054c0e:	d101      	bne.n	24054c14 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
24054c10:	2301      	movs	r3, #1
24054c12:	e37f      	b.n	24055314 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24054c14:	687b      	ldr	r3, [r7, #4]
24054c16:	681b      	ldr	r3, [r3, #0]
24054c18:	4a66      	ldr	r2, [pc, #408]	; (24054db4 <HAL_DMA_Init+0x1b8>)
24054c1a:	4293      	cmp	r3, r2
24054c1c:	d04a      	beq.n	24054cb4 <HAL_DMA_Init+0xb8>
24054c1e:	687b      	ldr	r3, [r7, #4]
24054c20:	681b      	ldr	r3, [r3, #0]
24054c22:	4a65      	ldr	r2, [pc, #404]	; (24054db8 <HAL_DMA_Init+0x1bc>)
24054c24:	4293      	cmp	r3, r2
24054c26:	d045      	beq.n	24054cb4 <HAL_DMA_Init+0xb8>
24054c28:	687b      	ldr	r3, [r7, #4]
24054c2a:	681b      	ldr	r3, [r3, #0]
24054c2c:	4a63      	ldr	r2, [pc, #396]	; (24054dbc <HAL_DMA_Init+0x1c0>)
24054c2e:	4293      	cmp	r3, r2
24054c30:	d040      	beq.n	24054cb4 <HAL_DMA_Init+0xb8>
24054c32:	687b      	ldr	r3, [r7, #4]
24054c34:	681b      	ldr	r3, [r3, #0]
24054c36:	4a62      	ldr	r2, [pc, #392]	; (24054dc0 <HAL_DMA_Init+0x1c4>)
24054c38:	4293      	cmp	r3, r2
24054c3a:	d03b      	beq.n	24054cb4 <HAL_DMA_Init+0xb8>
24054c3c:	687b      	ldr	r3, [r7, #4]
24054c3e:	681b      	ldr	r3, [r3, #0]
24054c40:	4a60      	ldr	r2, [pc, #384]	; (24054dc4 <HAL_DMA_Init+0x1c8>)
24054c42:	4293      	cmp	r3, r2
24054c44:	d036      	beq.n	24054cb4 <HAL_DMA_Init+0xb8>
24054c46:	687b      	ldr	r3, [r7, #4]
24054c48:	681b      	ldr	r3, [r3, #0]
24054c4a:	4a5f      	ldr	r2, [pc, #380]	; (24054dc8 <HAL_DMA_Init+0x1cc>)
24054c4c:	4293      	cmp	r3, r2
24054c4e:	d031      	beq.n	24054cb4 <HAL_DMA_Init+0xb8>
24054c50:	687b      	ldr	r3, [r7, #4]
24054c52:	681b      	ldr	r3, [r3, #0]
24054c54:	4a5d      	ldr	r2, [pc, #372]	; (24054dcc <HAL_DMA_Init+0x1d0>)
24054c56:	4293      	cmp	r3, r2
24054c58:	d02c      	beq.n	24054cb4 <HAL_DMA_Init+0xb8>
24054c5a:	687b      	ldr	r3, [r7, #4]
24054c5c:	681b      	ldr	r3, [r3, #0]
24054c5e:	4a5c      	ldr	r2, [pc, #368]	; (24054dd0 <HAL_DMA_Init+0x1d4>)
24054c60:	4293      	cmp	r3, r2
24054c62:	d027      	beq.n	24054cb4 <HAL_DMA_Init+0xb8>
24054c64:	687b      	ldr	r3, [r7, #4]
24054c66:	681b      	ldr	r3, [r3, #0]
24054c68:	4a5a      	ldr	r2, [pc, #360]	; (24054dd4 <HAL_DMA_Init+0x1d8>)
24054c6a:	4293      	cmp	r3, r2
24054c6c:	d022      	beq.n	24054cb4 <HAL_DMA_Init+0xb8>
24054c6e:	687b      	ldr	r3, [r7, #4]
24054c70:	681b      	ldr	r3, [r3, #0]
24054c72:	4a59      	ldr	r2, [pc, #356]	; (24054dd8 <HAL_DMA_Init+0x1dc>)
24054c74:	4293      	cmp	r3, r2
24054c76:	d01d      	beq.n	24054cb4 <HAL_DMA_Init+0xb8>
24054c78:	687b      	ldr	r3, [r7, #4]
24054c7a:	681b      	ldr	r3, [r3, #0]
24054c7c:	4a57      	ldr	r2, [pc, #348]	; (24054ddc <HAL_DMA_Init+0x1e0>)
24054c7e:	4293      	cmp	r3, r2
24054c80:	d018      	beq.n	24054cb4 <HAL_DMA_Init+0xb8>
24054c82:	687b      	ldr	r3, [r7, #4]
24054c84:	681b      	ldr	r3, [r3, #0]
24054c86:	4a56      	ldr	r2, [pc, #344]	; (24054de0 <HAL_DMA_Init+0x1e4>)
24054c88:	4293      	cmp	r3, r2
24054c8a:	d013      	beq.n	24054cb4 <HAL_DMA_Init+0xb8>
24054c8c:	687b      	ldr	r3, [r7, #4]
24054c8e:	681b      	ldr	r3, [r3, #0]
24054c90:	4a54      	ldr	r2, [pc, #336]	; (24054de4 <HAL_DMA_Init+0x1e8>)
24054c92:	4293      	cmp	r3, r2
24054c94:	d00e      	beq.n	24054cb4 <HAL_DMA_Init+0xb8>
24054c96:	687b      	ldr	r3, [r7, #4]
24054c98:	681b      	ldr	r3, [r3, #0]
24054c9a:	4a53      	ldr	r2, [pc, #332]	; (24054de8 <HAL_DMA_Init+0x1ec>)
24054c9c:	4293      	cmp	r3, r2
24054c9e:	d009      	beq.n	24054cb4 <HAL_DMA_Init+0xb8>
24054ca0:	687b      	ldr	r3, [r7, #4]
24054ca2:	681b      	ldr	r3, [r3, #0]
24054ca4:	4a51      	ldr	r2, [pc, #324]	; (24054dec <HAL_DMA_Init+0x1f0>)
24054ca6:	4293      	cmp	r3, r2
24054ca8:	d004      	beq.n	24054cb4 <HAL_DMA_Init+0xb8>
24054caa:	687b      	ldr	r3, [r7, #4]
24054cac:	681b      	ldr	r3, [r3, #0]
24054cae:	4a50      	ldr	r2, [pc, #320]	; (24054df0 <HAL_DMA_Init+0x1f4>)
24054cb0:	4293      	cmp	r3, r2
24054cb2:	d101      	bne.n	24054cb8 <HAL_DMA_Init+0xbc>
24054cb4:	2301      	movs	r3, #1
24054cb6:	e000      	b.n	24054cba <HAL_DMA_Init+0xbe>
24054cb8:	2300      	movs	r3, #0
24054cba:	2b00      	cmp	r3, #0
24054cbc:	f000 813c 	beq.w	24054f38 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
24054cc0:	687b      	ldr	r3, [r7, #4]
24054cc2:	2202      	movs	r2, #2
24054cc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
24054cc8:	687b      	ldr	r3, [r7, #4]
24054cca:	2200      	movs	r2, #0
24054ccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
24054cd0:	687b      	ldr	r3, [r7, #4]
24054cd2:	681b      	ldr	r3, [r3, #0]
24054cd4:	4a37      	ldr	r2, [pc, #220]	; (24054db4 <HAL_DMA_Init+0x1b8>)
24054cd6:	4293      	cmp	r3, r2
24054cd8:	d04a      	beq.n	24054d70 <HAL_DMA_Init+0x174>
24054cda:	687b      	ldr	r3, [r7, #4]
24054cdc:	681b      	ldr	r3, [r3, #0]
24054cde:	4a36      	ldr	r2, [pc, #216]	; (24054db8 <HAL_DMA_Init+0x1bc>)
24054ce0:	4293      	cmp	r3, r2
24054ce2:	d045      	beq.n	24054d70 <HAL_DMA_Init+0x174>
24054ce4:	687b      	ldr	r3, [r7, #4]
24054ce6:	681b      	ldr	r3, [r3, #0]
24054ce8:	4a34      	ldr	r2, [pc, #208]	; (24054dbc <HAL_DMA_Init+0x1c0>)
24054cea:	4293      	cmp	r3, r2
24054cec:	d040      	beq.n	24054d70 <HAL_DMA_Init+0x174>
24054cee:	687b      	ldr	r3, [r7, #4]
24054cf0:	681b      	ldr	r3, [r3, #0]
24054cf2:	4a33      	ldr	r2, [pc, #204]	; (24054dc0 <HAL_DMA_Init+0x1c4>)
24054cf4:	4293      	cmp	r3, r2
24054cf6:	d03b      	beq.n	24054d70 <HAL_DMA_Init+0x174>
24054cf8:	687b      	ldr	r3, [r7, #4]
24054cfa:	681b      	ldr	r3, [r3, #0]
24054cfc:	4a31      	ldr	r2, [pc, #196]	; (24054dc4 <HAL_DMA_Init+0x1c8>)
24054cfe:	4293      	cmp	r3, r2
24054d00:	d036      	beq.n	24054d70 <HAL_DMA_Init+0x174>
24054d02:	687b      	ldr	r3, [r7, #4]
24054d04:	681b      	ldr	r3, [r3, #0]
24054d06:	4a30      	ldr	r2, [pc, #192]	; (24054dc8 <HAL_DMA_Init+0x1cc>)
24054d08:	4293      	cmp	r3, r2
24054d0a:	d031      	beq.n	24054d70 <HAL_DMA_Init+0x174>
24054d0c:	687b      	ldr	r3, [r7, #4]
24054d0e:	681b      	ldr	r3, [r3, #0]
24054d10:	4a2e      	ldr	r2, [pc, #184]	; (24054dcc <HAL_DMA_Init+0x1d0>)
24054d12:	4293      	cmp	r3, r2
24054d14:	d02c      	beq.n	24054d70 <HAL_DMA_Init+0x174>
24054d16:	687b      	ldr	r3, [r7, #4]
24054d18:	681b      	ldr	r3, [r3, #0]
24054d1a:	4a2d      	ldr	r2, [pc, #180]	; (24054dd0 <HAL_DMA_Init+0x1d4>)
24054d1c:	4293      	cmp	r3, r2
24054d1e:	d027      	beq.n	24054d70 <HAL_DMA_Init+0x174>
24054d20:	687b      	ldr	r3, [r7, #4]
24054d22:	681b      	ldr	r3, [r3, #0]
24054d24:	4a2b      	ldr	r2, [pc, #172]	; (24054dd4 <HAL_DMA_Init+0x1d8>)
24054d26:	4293      	cmp	r3, r2
24054d28:	d022      	beq.n	24054d70 <HAL_DMA_Init+0x174>
24054d2a:	687b      	ldr	r3, [r7, #4]
24054d2c:	681b      	ldr	r3, [r3, #0]
24054d2e:	4a2a      	ldr	r2, [pc, #168]	; (24054dd8 <HAL_DMA_Init+0x1dc>)
24054d30:	4293      	cmp	r3, r2
24054d32:	d01d      	beq.n	24054d70 <HAL_DMA_Init+0x174>
24054d34:	687b      	ldr	r3, [r7, #4]
24054d36:	681b      	ldr	r3, [r3, #0]
24054d38:	4a28      	ldr	r2, [pc, #160]	; (24054ddc <HAL_DMA_Init+0x1e0>)
24054d3a:	4293      	cmp	r3, r2
24054d3c:	d018      	beq.n	24054d70 <HAL_DMA_Init+0x174>
24054d3e:	687b      	ldr	r3, [r7, #4]
24054d40:	681b      	ldr	r3, [r3, #0]
24054d42:	4a27      	ldr	r2, [pc, #156]	; (24054de0 <HAL_DMA_Init+0x1e4>)
24054d44:	4293      	cmp	r3, r2
24054d46:	d013      	beq.n	24054d70 <HAL_DMA_Init+0x174>
24054d48:	687b      	ldr	r3, [r7, #4]
24054d4a:	681b      	ldr	r3, [r3, #0]
24054d4c:	4a25      	ldr	r2, [pc, #148]	; (24054de4 <HAL_DMA_Init+0x1e8>)
24054d4e:	4293      	cmp	r3, r2
24054d50:	d00e      	beq.n	24054d70 <HAL_DMA_Init+0x174>
24054d52:	687b      	ldr	r3, [r7, #4]
24054d54:	681b      	ldr	r3, [r3, #0]
24054d56:	4a24      	ldr	r2, [pc, #144]	; (24054de8 <HAL_DMA_Init+0x1ec>)
24054d58:	4293      	cmp	r3, r2
24054d5a:	d009      	beq.n	24054d70 <HAL_DMA_Init+0x174>
24054d5c:	687b      	ldr	r3, [r7, #4]
24054d5e:	681b      	ldr	r3, [r3, #0]
24054d60:	4a22      	ldr	r2, [pc, #136]	; (24054dec <HAL_DMA_Init+0x1f0>)
24054d62:	4293      	cmp	r3, r2
24054d64:	d004      	beq.n	24054d70 <HAL_DMA_Init+0x174>
24054d66:	687b      	ldr	r3, [r7, #4]
24054d68:	681b      	ldr	r3, [r3, #0]
24054d6a:	4a21      	ldr	r2, [pc, #132]	; (24054df0 <HAL_DMA_Init+0x1f4>)
24054d6c:	4293      	cmp	r3, r2
24054d6e:	d108      	bne.n	24054d82 <HAL_DMA_Init+0x186>
24054d70:	687b      	ldr	r3, [r7, #4]
24054d72:	681b      	ldr	r3, [r3, #0]
24054d74:	681a      	ldr	r2, [r3, #0]
24054d76:	687b      	ldr	r3, [r7, #4]
24054d78:	681b      	ldr	r3, [r3, #0]
24054d7a:	f022 0201 	bic.w	r2, r2, #1
24054d7e:	601a      	str	r2, [r3, #0]
24054d80:	e007      	b.n	24054d92 <HAL_DMA_Init+0x196>
24054d82:	687b      	ldr	r3, [r7, #4]
24054d84:	681b      	ldr	r3, [r3, #0]
24054d86:	681a      	ldr	r2, [r3, #0]
24054d88:	687b      	ldr	r3, [r7, #4]
24054d8a:	681b      	ldr	r3, [r3, #0]
24054d8c:	f022 0201 	bic.w	r2, r2, #1
24054d90:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
24054d92:	e02f      	b.n	24054df4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
24054d94:	f7fd ffc6 	bl	24052d24 <HAL_GetTick>
24054d98:	4602      	mov	r2, r0
24054d9a:	693b      	ldr	r3, [r7, #16]
24054d9c:	1ad3      	subs	r3, r2, r3
24054d9e:	2b05      	cmp	r3, #5
24054da0:	d928      	bls.n	24054df4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
24054da2:	687b      	ldr	r3, [r7, #4]
24054da4:	2220      	movs	r2, #32
24054da6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
24054da8:	687b      	ldr	r3, [r7, #4]
24054daa:	2203      	movs	r2, #3
24054dac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
24054db0:	2301      	movs	r3, #1
24054db2:	e2af      	b.n	24055314 <HAL_DMA_Init+0x718>
24054db4:	40020010 	.word	0x40020010
24054db8:	40020028 	.word	0x40020028
24054dbc:	40020040 	.word	0x40020040
24054dc0:	40020058 	.word	0x40020058
24054dc4:	40020070 	.word	0x40020070
24054dc8:	40020088 	.word	0x40020088
24054dcc:	400200a0 	.word	0x400200a0
24054dd0:	400200b8 	.word	0x400200b8
24054dd4:	40020410 	.word	0x40020410
24054dd8:	40020428 	.word	0x40020428
24054ddc:	40020440 	.word	0x40020440
24054de0:	40020458 	.word	0x40020458
24054de4:	40020470 	.word	0x40020470
24054de8:	40020488 	.word	0x40020488
24054dec:	400204a0 	.word	0x400204a0
24054df0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
24054df4:	687b      	ldr	r3, [r7, #4]
24054df6:	681b      	ldr	r3, [r3, #0]
24054df8:	681b      	ldr	r3, [r3, #0]
24054dfa:	f003 0301 	and.w	r3, r3, #1
24054dfe:	2b00      	cmp	r3, #0
24054e00:	d1c8      	bne.n	24054d94 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
24054e02:	687b      	ldr	r3, [r7, #4]
24054e04:	681b      	ldr	r3, [r3, #0]
24054e06:	681b      	ldr	r3, [r3, #0]
24054e08:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
24054e0a:	697a      	ldr	r2, [r7, #20]
24054e0c:	4b73      	ldr	r3, [pc, #460]	; (24054fdc <HAL_DMA_Init+0x3e0>)
24054e0e:	4013      	ands	r3, r2
24054e10:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
24054e12:	687b      	ldr	r3, [r7, #4]
24054e14:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
24054e16:	687b      	ldr	r3, [r7, #4]
24054e18:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
24054e1a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
24054e1c:	687b      	ldr	r3, [r7, #4]
24054e1e:	691b      	ldr	r3, [r3, #16]
24054e20:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
24054e22:	687b      	ldr	r3, [r7, #4]
24054e24:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
24054e26:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
24054e28:	687b      	ldr	r3, [r7, #4]
24054e2a:	699b      	ldr	r3, [r3, #24]
24054e2c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
24054e2e:	687b      	ldr	r3, [r7, #4]
24054e30:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
24054e32:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
24054e34:	687b      	ldr	r3, [r7, #4]
24054e36:	6a1b      	ldr	r3, [r3, #32]
24054e38:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
24054e3a:	697a      	ldr	r2, [r7, #20]
24054e3c:	4313      	orrs	r3, r2
24054e3e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
24054e40:	687b      	ldr	r3, [r7, #4]
24054e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24054e44:	2b04      	cmp	r3, #4
24054e46:	d107      	bne.n	24054e58 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
24054e48:	687b      	ldr	r3, [r7, #4]
24054e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24054e4c:	687b      	ldr	r3, [r7, #4]
24054e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24054e50:	4313      	orrs	r3, r2
24054e52:	697a      	ldr	r2, [r7, #20]
24054e54:	4313      	orrs	r3, r2
24054e56:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
24054e58:	687b      	ldr	r3, [r7, #4]
24054e5a:	685b      	ldr	r3, [r3, #4]
24054e5c:	2b28      	cmp	r3, #40	; 0x28
24054e5e:	d903      	bls.n	24054e68 <HAL_DMA_Init+0x26c>
24054e60:	687b      	ldr	r3, [r7, #4]
24054e62:	685b      	ldr	r3, [r3, #4]
24054e64:	2b2e      	cmp	r3, #46	; 0x2e
24054e66:	d91f      	bls.n	24054ea8 <HAL_DMA_Init+0x2ac>
24054e68:	687b      	ldr	r3, [r7, #4]
24054e6a:	685b      	ldr	r3, [r3, #4]
24054e6c:	2b3e      	cmp	r3, #62	; 0x3e
24054e6e:	d903      	bls.n	24054e78 <HAL_DMA_Init+0x27c>
24054e70:	687b      	ldr	r3, [r7, #4]
24054e72:	685b      	ldr	r3, [r3, #4]
24054e74:	2b42      	cmp	r3, #66	; 0x42
24054e76:	d917      	bls.n	24054ea8 <HAL_DMA_Init+0x2ac>
24054e78:	687b      	ldr	r3, [r7, #4]
24054e7a:	685b      	ldr	r3, [r3, #4]
24054e7c:	2b46      	cmp	r3, #70	; 0x46
24054e7e:	d903      	bls.n	24054e88 <HAL_DMA_Init+0x28c>
24054e80:	687b      	ldr	r3, [r7, #4]
24054e82:	685b      	ldr	r3, [r3, #4]
24054e84:	2b48      	cmp	r3, #72	; 0x48
24054e86:	d90f      	bls.n	24054ea8 <HAL_DMA_Init+0x2ac>
24054e88:	687b      	ldr	r3, [r7, #4]
24054e8a:	685b      	ldr	r3, [r3, #4]
24054e8c:	2b4e      	cmp	r3, #78	; 0x4e
24054e8e:	d903      	bls.n	24054e98 <HAL_DMA_Init+0x29c>
24054e90:	687b      	ldr	r3, [r7, #4]
24054e92:	685b      	ldr	r3, [r3, #4]
24054e94:	2b52      	cmp	r3, #82	; 0x52
24054e96:	d907      	bls.n	24054ea8 <HAL_DMA_Init+0x2ac>
24054e98:	687b      	ldr	r3, [r7, #4]
24054e9a:	685b      	ldr	r3, [r3, #4]
24054e9c:	2b73      	cmp	r3, #115	; 0x73
24054e9e:	d905      	bls.n	24054eac <HAL_DMA_Init+0x2b0>
24054ea0:	687b      	ldr	r3, [r7, #4]
24054ea2:	685b      	ldr	r3, [r3, #4]
24054ea4:	2b77      	cmp	r3, #119	; 0x77
24054ea6:	d801      	bhi.n	24054eac <HAL_DMA_Init+0x2b0>
24054ea8:	2301      	movs	r3, #1
24054eaa:	e000      	b.n	24054eae <HAL_DMA_Init+0x2b2>
24054eac:	2300      	movs	r3, #0
24054eae:	2b00      	cmp	r3, #0
24054eb0:	d003      	beq.n	24054eba <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
24054eb2:	697b      	ldr	r3, [r7, #20]
24054eb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
24054eb8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
24054eba:	687b      	ldr	r3, [r7, #4]
24054ebc:	681b      	ldr	r3, [r3, #0]
24054ebe:	697a      	ldr	r2, [r7, #20]
24054ec0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
24054ec2:	687b      	ldr	r3, [r7, #4]
24054ec4:	681b      	ldr	r3, [r3, #0]
24054ec6:	695b      	ldr	r3, [r3, #20]
24054ec8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
24054eca:	697b      	ldr	r3, [r7, #20]
24054ecc:	f023 0307 	bic.w	r3, r3, #7
24054ed0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
24054ed2:	687b      	ldr	r3, [r7, #4]
24054ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24054ed6:	697a      	ldr	r2, [r7, #20]
24054ed8:	4313      	orrs	r3, r2
24054eda:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
24054edc:	687b      	ldr	r3, [r7, #4]
24054ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24054ee0:	2b04      	cmp	r3, #4
24054ee2:	d117      	bne.n	24054f14 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
24054ee4:	687b      	ldr	r3, [r7, #4]
24054ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24054ee8:	697a      	ldr	r2, [r7, #20]
24054eea:	4313      	orrs	r3, r2
24054eec:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
24054eee:	687b      	ldr	r3, [r7, #4]
24054ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24054ef2:	2b00      	cmp	r3, #0
24054ef4:	d00e      	beq.n	24054f14 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
24054ef6:	6878      	ldr	r0, [r7, #4]
24054ef8:	f002 fbe0 	bl	240576bc <DMA_CheckFifoParam>
24054efc:	4603      	mov	r3, r0
24054efe:	2b00      	cmp	r3, #0
24054f00:	d008      	beq.n	24054f14 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
24054f02:	687b      	ldr	r3, [r7, #4]
24054f04:	2240      	movs	r2, #64	; 0x40
24054f06:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
24054f08:	687b      	ldr	r3, [r7, #4]
24054f0a:	2201      	movs	r2, #1
24054f0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
24054f10:	2301      	movs	r3, #1
24054f12:	e1ff      	b.n	24055314 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
24054f14:	687b      	ldr	r3, [r7, #4]
24054f16:	681b      	ldr	r3, [r3, #0]
24054f18:	697a      	ldr	r2, [r7, #20]
24054f1a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
24054f1c:	6878      	ldr	r0, [r7, #4]
24054f1e:	f002 fb1b 	bl	24057558 <DMA_CalcBaseAndBitshift>
24054f22:	4603      	mov	r3, r0
24054f24:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24054f26:	687b      	ldr	r3, [r7, #4]
24054f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24054f2a:	f003 031f 	and.w	r3, r3, #31
24054f2e:	223f      	movs	r2, #63	; 0x3f
24054f30:	409a      	lsls	r2, r3
24054f32:	68bb      	ldr	r3, [r7, #8]
24054f34:	609a      	str	r2, [r3, #8]
24054f36:	e0fe      	b.n	24055136 <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
24054f38:	687b      	ldr	r3, [r7, #4]
24054f3a:	681b      	ldr	r3, [r3, #0]
24054f3c:	4a28      	ldr	r2, [pc, #160]	; (24054fe0 <HAL_DMA_Init+0x3e4>)
24054f3e:	4293      	cmp	r3, r2
24054f40:	d04a      	beq.n	24054fd8 <HAL_DMA_Init+0x3dc>
24054f42:	687b      	ldr	r3, [r7, #4]
24054f44:	681b      	ldr	r3, [r3, #0]
24054f46:	4a27      	ldr	r2, [pc, #156]	; (24054fe4 <HAL_DMA_Init+0x3e8>)
24054f48:	4293      	cmp	r3, r2
24054f4a:	d045      	beq.n	24054fd8 <HAL_DMA_Init+0x3dc>
24054f4c:	687b      	ldr	r3, [r7, #4]
24054f4e:	681b      	ldr	r3, [r3, #0]
24054f50:	4a25      	ldr	r2, [pc, #148]	; (24054fe8 <HAL_DMA_Init+0x3ec>)
24054f52:	4293      	cmp	r3, r2
24054f54:	d040      	beq.n	24054fd8 <HAL_DMA_Init+0x3dc>
24054f56:	687b      	ldr	r3, [r7, #4]
24054f58:	681b      	ldr	r3, [r3, #0]
24054f5a:	4a24      	ldr	r2, [pc, #144]	; (24054fec <HAL_DMA_Init+0x3f0>)
24054f5c:	4293      	cmp	r3, r2
24054f5e:	d03b      	beq.n	24054fd8 <HAL_DMA_Init+0x3dc>
24054f60:	687b      	ldr	r3, [r7, #4]
24054f62:	681b      	ldr	r3, [r3, #0]
24054f64:	4a22      	ldr	r2, [pc, #136]	; (24054ff0 <HAL_DMA_Init+0x3f4>)
24054f66:	4293      	cmp	r3, r2
24054f68:	d036      	beq.n	24054fd8 <HAL_DMA_Init+0x3dc>
24054f6a:	687b      	ldr	r3, [r7, #4]
24054f6c:	681b      	ldr	r3, [r3, #0]
24054f6e:	4a21      	ldr	r2, [pc, #132]	; (24054ff4 <HAL_DMA_Init+0x3f8>)
24054f70:	4293      	cmp	r3, r2
24054f72:	d031      	beq.n	24054fd8 <HAL_DMA_Init+0x3dc>
24054f74:	687b      	ldr	r3, [r7, #4]
24054f76:	681b      	ldr	r3, [r3, #0]
24054f78:	4a1f      	ldr	r2, [pc, #124]	; (24054ff8 <HAL_DMA_Init+0x3fc>)
24054f7a:	4293      	cmp	r3, r2
24054f7c:	d02c      	beq.n	24054fd8 <HAL_DMA_Init+0x3dc>
24054f7e:	687b      	ldr	r3, [r7, #4]
24054f80:	681b      	ldr	r3, [r3, #0]
24054f82:	4a1e      	ldr	r2, [pc, #120]	; (24054ffc <HAL_DMA_Init+0x400>)
24054f84:	4293      	cmp	r3, r2
24054f86:	d027      	beq.n	24054fd8 <HAL_DMA_Init+0x3dc>
24054f88:	687b      	ldr	r3, [r7, #4]
24054f8a:	681b      	ldr	r3, [r3, #0]
24054f8c:	4a1c      	ldr	r2, [pc, #112]	; (24055000 <HAL_DMA_Init+0x404>)
24054f8e:	4293      	cmp	r3, r2
24054f90:	d022      	beq.n	24054fd8 <HAL_DMA_Init+0x3dc>
24054f92:	687b      	ldr	r3, [r7, #4]
24054f94:	681b      	ldr	r3, [r3, #0]
24054f96:	4a1b      	ldr	r2, [pc, #108]	; (24055004 <HAL_DMA_Init+0x408>)
24054f98:	4293      	cmp	r3, r2
24054f9a:	d01d      	beq.n	24054fd8 <HAL_DMA_Init+0x3dc>
24054f9c:	687b      	ldr	r3, [r7, #4]
24054f9e:	681b      	ldr	r3, [r3, #0]
24054fa0:	4a19      	ldr	r2, [pc, #100]	; (24055008 <HAL_DMA_Init+0x40c>)
24054fa2:	4293      	cmp	r3, r2
24054fa4:	d018      	beq.n	24054fd8 <HAL_DMA_Init+0x3dc>
24054fa6:	687b      	ldr	r3, [r7, #4]
24054fa8:	681b      	ldr	r3, [r3, #0]
24054faa:	4a18      	ldr	r2, [pc, #96]	; (2405500c <HAL_DMA_Init+0x410>)
24054fac:	4293      	cmp	r3, r2
24054fae:	d013      	beq.n	24054fd8 <HAL_DMA_Init+0x3dc>
24054fb0:	687b      	ldr	r3, [r7, #4]
24054fb2:	681b      	ldr	r3, [r3, #0]
24054fb4:	4a16      	ldr	r2, [pc, #88]	; (24055010 <HAL_DMA_Init+0x414>)
24054fb6:	4293      	cmp	r3, r2
24054fb8:	d00e      	beq.n	24054fd8 <HAL_DMA_Init+0x3dc>
24054fba:	687b      	ldr	r3, [r7, #4]
24054fbc:	681b      	ldr	r3, [r3, #0]
24054fbe:	4a15      	ldr	r2, [pc, #84]	; (24055014 <HAL_DMA_Init+0x418>)
24054fc0:	4293      	cmp	r3, r2
24054fc2:	d009      	beq.n	24054fd8 <HAL_DMA_Init+0x3dc>
24054fc4:	687b      	ldr	r3, [r7, #4]
24054fc6:	681b      	ldr	r3, [r3, #0]
24054fc8:	4a13      	ldr	r2, [pc, #76]	; (24055018 <HAL_DMA_Init+0x41c>)
24054fca:	4293      	cmp	r3, r2
24054fcc:	d004      	beq.n	24054fd8 <HAL_DMA_Init+0x3dc>
24054fce:	687b      	ldr	r3, [r7, #4]
24054fd0:	681b      	ldr	r3, [r3, #0]
24054fd2:	4a12      	ldr	r2, [pc, #72]	; (2405501c <HAL_DMA_Init+0x420>)
24054fd4:	4293      	cmp	r3, r2
24054fd6:	d123      	bne.n	24055020 <HAL_DMA_Init+0x424>
24054fd8:	2301      	movs	r3, #1
24054fda:	e022      	b.n	24055022 <HAL_DMA_Init+0x426>
24054fdc:	fe10803f 	.word	0xfe10803f
24054fe0:	48022c08 	.word	0x48022c08
24054fe4:	48022c1c 	.word	0x48022c1c
24054fe8:	48022c30 	.word	0x48022c30
24054fec:	48022c44 	.word	0x48022c44
24054ff0:	48022c58 	.word	0x48022c58
24054ff4:	48022c6c 	.word	0x48022c6c
24054ff8:	48022c80 	.word	0x48022c80
24054ffc:	48022c94 	.word	0x48022c94
24055000:	58025408 	.word	0x58025408
24055004:	5802541c 	.word	0x5802541c
24055008:	58025430 	.word	0x58025430
2405500c:	58025444 	.word	0x58025444
24055010:	58025458 	.word	0x58025458
24055014:	5802546c 	.word	0x5802546c
24055018:	58025480 	.word	0x58025480
2405501c:	58025494 	.word	0x58025494
24055020:	2300      	movs	r3, #0
24055022:	2b00      	cmp	r3, #0
24055024:	d07e      	beq.n	24055124 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
24055026:	687b      	ldr	r3, [r7, #4]
24055028:	681b      	ldr	r3, [r3, #0]
2405502a:	4a80      	ldr	r2, [pc, #512]	; (2405522c <HAL_DMA_Init+0x630>)
2405502c:	4293      	cmp	r3, r2
2405502e:	d021      	beq.n	24055074 <HAL_DMA_Init+0x478>
24055030:	687b      	ldr	r3, [r7, #4]
24055032:	681b      	ldr	r3, [r3, #0]
24055034:	4a7e      	ldr	r2, [pc, #504]	; (24055230 <HAL_DMA_Init+0x634>)
24055036:	4293      	cmp	r3, r2
24055038:	d01c      	beq.n	24055074 <HAL_DMA_Init+0x478>
2405503a:	687b      	ldr	r3, [r7, #4]
2405503c:	681b      	ldr	r3, [r3, #0]
2405503e:	4a7d      	ldr	r2, [pc, #500]	; (24055234 <HAL_DMA_Init+0x638>)
24055040:	4293      	cmp	r3, r2
24055042:	d017      	beq.n	24055074 <HAL_DMA_Init+0x478>
24055044:	687b      	ldr	r3, [r7, #4]
24055046:	681b      	ldr	r3, [r3, #0]
24055048:	4a7b      	ldr	r2, [pc, #492]	; (24055238 <HAL_DMA_Init+0x63c>)
2405504a:	4293      	cmp	r3, r2
2405504c:	d012      	beq.n	24055074 <HAL_DMA_Init+0x478>
2405504e:	687b      	ldr	r3, [r7, #4]
24055050:	681b      	ldr	r3, [r3, #0]
24055052:	4a7a      	ldr	r2, [pc, #488]	; (2405523c <HAL_DMA_Init+0x640>)
24055054:	4293      	cmp	r3, r2
24055056:	d00d      	beq.n	24055074 <HAL_DMA_Init+0x478>
24055058:	687b      	ldr	r3, [r7, #4]
2405505a:	681b      	ldr	r3, [r3, #0]
2405505c:	4a78      	ldr	r2, [pc, #480]	; (24055240 <HAL_DMA_Init+0x644>)
2405505e:	4293      	cmp	r3, r2
24055060:	d008      	beq.n	24055074 <HAL_DMA_Init+0x478>
24055062:	687b      	ldr	r3, [r7, #4]
24055064:	681b      	ldr	r3, [r3, #0]
24055066:	4a77      	ldr	r2, [pc, #476]	; (24055244 <HAL_DMA_Init+0x648>)
24055068:	4293      	cmp	r3, r2
2405506a:	d003      	beq.n	24055074 <HAL_DMA_Init+0x478>
2405506c:	687b      	ldr	r3, [r7, #4]
2405506e:	681b      	ldr	r3, [r3, #0]
24055070:	4a75      	ldr	r2, [pc, #468]	; (24055248 <HAL_DMA_Init+0x64c>)
24055072:	4293      	cmp	r3, r2
24055074:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
24055076:	687b      	ldr	r3, [r7, #4]
24055078:	2202      	movs	r2, #2
2405507a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
2405507e:	687b      	ldr	r3, [r7, #4]
24055080:	2200      	movs	r2, #0
24055082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
24055086:	687b      	ldr	r3, [r7, #4]
24055088:	681b      	ldr	r3, [r3, #0]
2405508a:	681b      	ldr	r3, [r3, #0]
2405508c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
2405508e:	697a      	ldr	r2, [r7, #20]
24055090:	4b6e      	ldr	r3, [pc, #440]	; (2405524c <HAL_DMA_Init+0x650>)
24055092:	4013      	ands	r3, r2
24055094:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
24055096:	687b      	ldr	r3, [r7, #4]
24055098:	689b      	ldr	r3, [r3, #8]
2405509a:	2b40      	cmp	r3, #64	; 0x40
2405509c:	d008      	beq.n	240550b0 <HAL_DMA_Init+0x4b4>
2405509e:	687b      	ldr	r3, [r7, #4]
240550a0:	689b      	ldr	r3, [r3, #8]
240550a2:	2b80      	cmp	r3, #128	; 0x80
240550a4:	d102      	bne.n	240550ac <HAL_DMA_Init+0x4b0>
240550a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
240550aa:	e002      	b.n	240550b2 <HAL_DMA_Init+0x4b6>
240550ac:	2300      	movs	r3, #0
240550ae:	e000      	b.n	240550b2 <HAL_DMA_Init+0x4b6>
240550b0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
240550b2:	687a      	ldr	r2, [r7, #4]
240550b4:	68d2      	ldr	r2, [r2, #12]
240550b6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
240550b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
240550ba:	687b      	ldr	r3, [r7, #4]
240550bc:	691b      	ldr	r3, [r3, #16]
240550be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
240550c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
240550c2:	687b      	ldr	r3, [r7, #4]
240550c4:	695b      	ldr	r3, [r3, #20]
240550c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
240550c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
240550ca:	687b      	ldr	r3, [r7, #4]
240550cc:	699b      	ldr	r3, [r3, #24]
240550ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
240550d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
240550d2:	687b      	ldr	r3, [r7, #4]
240550d4:	69db      	ldr	r3, [r3, #28]
240550d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
240550d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
240550da:	687b      	ldr	r3, [r7, #4]
240550dc:	6a1b      	ldr	r3, [r3, #32]
240550de:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
240550e0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
240550e2:	697a      	ldr	r2, [r7, #20]
240550e4:	4313      	orrs	r3, r2
240550e6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
240550e8:	687b      	ldr	r3, [r7, #4]
240550ea:	681b      	ldr	r3, [r3, #0]
240550ec:	697a      	ldr	r2, [r7, #20]
240550ee:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
240550f0:	687b      	ldr	r3, [r7, #4]
240550f2:	681b      	ldr	r3, [r3, #0]
240550f4:	461a      	mov	r2, r3
240550f6:	4b56      	ldr	r3, [pc, #344]	; (24055250 <HAL_DMA_Init+0x654>)
240550f8:	4413      	add	r3, r2
240550fa:	4a56      	ldr	r2, [pc, #344]	; (24055254 <HAL_DMA_Init+0x658>)
240550fc:	fba2 2303 	umull	r2, r3, r2, r3
24055100:	091b      	lsrs	r3, r3, #4
24055102:	009a      	lsls	r2, r3, #2
24055104:	687b      	ldr	r3, [r7, #4]
24055106:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
24055108:	6878      	ldr	r0, [r7, #4]
2405510a:	f002 fa25 	bl	24057558 <DMA_CalcBaseAndBitshift>
2405510e:	4603      	mov	r3, r0
24055110:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24055112:	687b      	ldr	r3, [r7, #4]
24055114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24055116:	f003 031f 	and.w	r3, r3, #31
2405511a:	2201      	movs	r2, #1
2405511c:	409a      	lsls	r2, r3
2405511e:	68fb      	ldr	r3, [r7, #12]
24055120:	605a      	str	r2, [r3, #4]
24055122:	e008      	b.n	24055136 <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
24055124:	687b      	ldr	r3, [r7, #4]
24055126:	2240      	movs	r2, #64	; 0x40
24055128:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
2405512a:	687b      	ldr	r3, [r7, #4]
2405512c:	2203      	movs	r2, #3
2405512e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
24055132:	2301      	movs	r3, #1
24055134:	e0ee      	b.n	24055314 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24055136:	687b      	ldr	r3, [r7, #4]
24055138:	681b      	ldr	r3, [r3, #0]
2405513a:	4a47      	ldr	r2, [pc, #284]	; (24055258 <HAL_DMA_Init+0x65c>)
2405513c:	4293      	cmp	r3, r2
2405513e:	d072      	beq.n	24055226 <HAL_DMA_Init+0x62a>
24055140:	687b      	ldr	r3, [r7, #4]
24055142:	681b      	ldr	r3, [r3, #0]
24055144:	4a45      	ldr	r2, [pc, #276]	; (2405525c <HAL_DMA_Init+0x660>)
24055146:	4293      	cmp	r3, r2
24055148:	d06d      	beq.n	24055226 <HAL_DMA_Init+0x62a>
2405514a:	687b      	ldr	r3, [r7, #4]
2405514c:	681b      	ldr	r3, [r3, #0]
2405514e:	4a44      	ldr	r2, [pc, #272]	; (24055260 <HAL_DMA_Init+0x664>)
24055150:	4293      	cmp	r3, r2
24055152:	d068      	beq.n	24055226 <HAL_DMA_Init+0x62a>
24055154:	687b      	ldr	r3, [r7, #4]
24055156:	681b      	ldr	r3, [r3, #0]
24055158:	4a42      	ldr	r2, [pc, #264]	; (24055264 <HAL_DMA_Init+0x668>)
2405515a:	4293      	cmp	r3, r2
2405515c:	d063      	beq.n	24055226 <HAL_DMA_Init+0x62a>
2405515e:	687b      	ldr	r3, [r7, #4]
24055160:	681b      	ldr	r3, [r3, #0]
24055162:	4a41      	ldr	r2, [pc, #260]	; (24055268 <HAL_DMA_Init+0x66c>)
24055164:	4293      	cmp	r3, r2
24055166:	d05e      	beq.n	24055226 <HAL_DMA_Init+0x62a>
24055168:	687b      	ldr	r3, [r7, #4]
2405516a:	681b      	ldr	r3, [r3, #0]
2405516c:	4a3f      	ldr	r2, [pc, #252]	; (2405526c <HAL_DMA_Init+0x670>)
2405516e:	4293      	cmp	r3, r2
24055170:	d059      	beq.n	24055226 <HAL_DMA_Init+0x62a>
24055172:	687b      	ldr	r3, [r7, #4]
24055174:	681b      	ldr	r3, [r3, #0]
24055176:	4a3e      	ldr	r2, [pc, #248]	; (24055270 <HAL_DMA_Init+0x674>)
24055178:	4293      	cmp	r3, r2
2405517a:	d054      	beq.n	24055226 <HAL_DMA_Init+0x62a>
2405517c:	687b      	ldr	r3, [r7, #4]
2405517e:	681b      	ldr	r3, [r3, #0]
24055180:	4a3c      	ldr	r2, [pc, #240]	; (24055274 <HAL_DMA_Init+0x678>)
24055182:	4293      	cmp	r3, r2
24055184:	d04f      	beq.n	24055226 <HAL_DMA_Init+0x62a>
24055186:	687b      	ldr	r3, [r7, #4]
24055188:	681b      	ldr	r3, [r3, #0]
2405518a:	4a3b      	ldr	r2, [pc, #236]	; (24055278 <HAL_DMA_Init+0x67c>)
2405518c:	4293      	cmp	r3, r2
2405518e:	d04a      	beq.n	24055226 <HAL_DMA_Init+0x62a>
24055190:	687b      	ldr	r3, [r7, #4]
24055192:	681b      	ldr	r3, [r3, #0]
24055194:	4a39      	ldr	r2, [pc, #228]	; (2405527c <HAL_DMA_Init+0x680>)
24055196:	4293      	cmp	r3, r2
24055198:	d045      	beq.n	24055226 <HAL_DMA_Init+0x62a>
2405519a:	687b      	ldr	r3, [r7, #4]
2405519c:	681b      	ldr	r3, [r3, #0]
2405519e:	4a38      	ldr	r2, [pc, #224]	; (24055280 <HAL_DMA_Init+0x684>)
240551a0:	4293      	cmp	r3, r2
240551a2:	d040      	beq.n	24055226 <HAL_DMA_Init+0x62a>
240551a4:	687b      	ldr	r3, [r7, #4]
240551a6:	681b      	ldr	r3, [r3, #0]
240551a8:	4a36      	ldr	r2, [pc, #216]	; (24055284 <HAL_DMA_Init+0x688>)
240551aa:	4293      	cmp	r3, r2
240551ac:	d03b      	beq.n	24055226 <HAL_DMA_Init+0x62a>
240551ae:	687b      	ldr	r3, [r7, #4]
240551b0:	681b      	ldr	r3, [r3, #0]
240551b2:	4a35      	ldr	r2, [pc, #212]	; (24055288 <HAL_DMA_Init+0x68c>)
240551b4:	4293      	cmp	r3, r2
240551b6:	d036      	beq.n	24055226 <HAL_DMA_Init+0x62a>
240551b8:	687b      	ldr	r3, [r7, #4]
240551ba:	681b      	ldr	r3, [r3, #0]
240551bc:	4a33      	ldr	r2, [pc, #204]	; (2405528c <HAL_DMA_Init+0x690>)
240551be:	4293      	cmp	r3, r2
240551c0:	d031      	beq.n	24055226 <HAL_DMA_Init+0x62a>
240551c2:	687b      	ldr	r3, [r7, #4]
240551c4:	681b      	ldr	r3, [r3, #0]
240551c6:	4a32      	ldr	r2, [pc, #200]	; (24055290 <HAL_DMA_Init+0x694>)
240551c8:	4293      	cmp	r3, r2
240551ca:	d02c      	beq.n	24055226 <HAL_DMA_Init+0x62a>
240551cc:	687b      	ldr	r3, [r7, #4]
240551ce:	681b      	ldr	r3, [r3, #0]
240551d0:	4a30      	ldr	r2, [pc, #192]	; (24055294 <HAL_DMA_Init+0x698>)
240551d2:	4293      	cmp	r3, r2
240551d4:	d027      	beq.n	24055226 <HAL_DMA_Init+0x62a>
240551d6:	687b      	ldr	r3, [r7, #4]
240551d8:	681b      	ldr	r3, [r3, #0]
240551da:	4a14      	ldr	r2, [pc, #80]	; (2405522c <HAL_DMA_Init+0x630>)
240551dc:	4293      	cmp	r3, r2
240551de:	d022      	beq.n	24055226 <HAL_DMA_Init+0x62a>
240551e0:	687b      	ldr	r3, [r7, #4]
240551e2:	681b      	ldr	r3, [r3, #0]
240551e4:	4a12      	ldr	r2, [pc, #72]	; (24055230 <HAL_DMA_Init+0x634>)
240551e6:	4293      	cmp	r3, r2
240551e8:	d01d      	beq.n	24055226 <HAL_DMA_Init+0x62a>
240551ea:	687b      	ldr	r3, [r7, #4]
240551ec:	681b      	ldr	r3, [r3, #0]
240551ee:	4a11      	ldr	r2, [pc, #68]	; (24055234 <HAL_DMA_Init+0x638>)
240551f0:	4293      	cmp	r3, r2
240551f2:	d018      	beq.n	24055226 <HAL_DMA_Init+0x62a>
240551f4:	687b      	ldr	r3, [r7, #4]
240551f6:	681b      	ldr	r3, [r3, #0]
240551f8:	4a0f      	ldr	r2, [pc, #60]	; (24055238 <HAL_DMA_Init+0x63c>)
240551fa:	4293      	cmp	r3, r2
240551fc:	d013      	beq.n	24055226 <HAL_DMA_Init+0x62a>
240551fe:	687b      	ldr	r3, [r7, #4]
24055200:	681b      	ldr	r3, [r3, #0]
24055202:	4a0e      	ldr	r2, [pc, #56]	; (2405523c <HAL_DMA_Init+0x640>)
24055204:	4293      	cmp	r3, r2
24055206:	d00e      	beq.n	24055226 <HAL_DMA_Init+0x62a>
24055208:	687b      	ldr	r3, [r7, #4]
2405520a:	681b      	ldr	r3, [r3, #0]
2405520c:	4a0c      	ldr	r2, [pc, #48]	; (24055240 <HAL_DMA_Init+0x644>)
2405520e:	4293      	cmp	r3, r2
24055210:	d009      	beq.n	24055226 <HAL_DMA_Init+0x62a>
24055212:	687b      	ldr	r3, [r7, #4]
24055214:	681b      	ldr	r3, [r3, #0]
24055216:	4a0b      	ldr	r2, [pc, #44]	; (24055244 <HAL_DMA_Init+0x648>)
24055218:	4293      	cmp	r3, r2
2405521a:	d004      	beq.n	24055226 <HAL_DMA_Init+0x62a>
2405521c:	687b      	ldr	r3, [r7, #4]
2405521e:	681b      	ldr	r3, [r3, #0]
24055220:	4a09      	ldr	r2, [pc, #36]	; (24055248 <HAL_DMA_Init+0x64c>)
24055222:	4293      	cmp	r3, r2
24055224:	d138      	bne.n	24055298 <HAL_DMA_Init+0x69c>
24055226:	2301      	movs	r3, #1
24055228:	e037      	b.n	2405529a <HAL_DMA_Init+0x69e>
2405522a:	bf00      	nop
2405522c:	58025408 	.word	0x58025408
24055230:	5802541c 	.word	0x5802541c
24055234:	58025430 	.word	0x58025430
24055238:	58025444 	.word	0x58025444
2405523c:	58025458 	.word	0x58025458
24055240:	5802546c 	.word	0x5802546c
24055244:	58025480 	.word	0x58025480
24055248:	58025494 	.word	0x58025494
2405524c:	fffe000f 	.word	0xfffe000f
24055250:	a7fdabf8 	.word	0xa7fdabf8
24055254:	cccccccd 	.word	0xcccccccd
24055258:	40020010 	.word	0x40020010
2405525c:	40020028 	.word	0x40020028
24055260:	40020040 	.word	0x40020040
24055264:	40020058 	.word	0x40020058
24055268:	40020070 	.word	0x40020070
2405526c:	40020088 	.word	0x40020088
24055270:	400200a0 	.word	0x400200a0
24055274:	400200b8 	.word	0x400200b8
24055278:	40020410 	.word	0x40020410
2405527c:	40020428 	.word	0x40020428
24055280:	40020440 	.word	0x40020440
24055284:	40020458 	.word	0x40020458
24055288:	40020470 	.word	0x40020470
2405528c:	40020488 	.word	0x40020488
24055290:	400204a0 	.word	0x400204a0
24055294:	400204b8 	.word	0x400204b8
24055298:	2300      	movs	r3, #0
2405529a:	2b00      	cmp	r3, #0
2405529c:	d032      	beq.n	24055304 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
2405529e:	6878      	ldr	r0, [r7, #4]
240552a0:	f002 fa88 	bl	240577b4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
240552a4:	687b      	ldr	r3, [r7, #4]
240552a6:	689b      	ldr	r3, [r3, #8]
240552a8:	2b80      	cmp	r3, #128	; 0x80
240552aa:	d102      	bne.n	240552b2 <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
240552ac:	687b      	ldr	r3, [r7, #4]
240552ae:	2200      	movs	r2, #0
240552b0:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
240552b2:	687b      	ldr	r3, [r7, #4]
240552b4:	685a      	ldr	r2, [r3, #4]
240552b6:	687b      	ldr	r3, [r7, #4]
240552b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
240552ba:	b2d2      	uxtb	r2, r2
240552bc:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
240552be:	687b      	ldr	r3, [r7, #4]
240552c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
240552c2:	687a      	ldr	r2, [r7, #4]
240552c4:	6e92      	ldr	r2, [r2, #104]	; 0x68
240552c6:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
240552c8:	687b      	ldr	r3, [r7, #4]
240552ca:	685b      	ldr	r3, [r3, #4]
240552cc:	2b00      	cmp	r3, #0
240552ce:	d010      	beq.n	240552f2 <HAL_DMA_Init+0x6f6>
240552d0:	687b      	ldr	r3, [r7, #4]
240552d2:	685b      	ldr	r3, [r3, #4]
240552d4:	2b08      	cmp	r3, #8
240552d6:	d80c      	bhi.n	240552f2 <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
240552d8:	6878      	ldr	r0, [r7, #4]
240552da:	f002 fb05 	bl	240578e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
240552de:	687b      	ldr	r3, [r7, #4]
240552e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240552e2:	2200      	movs	r2, #0
240552e4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
240552e6:	687b      	ldr	r3, [r7, #4]
240552e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
240552ea:	687a      	ldr	r2, [r7, #4]
240552ec:	6f52      	ldr	r2, [r2, #116]	; 0x74
240552ee:	605a      	str	r2, [r3, #4]
240552f0:	e008      	b.n	24055304 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
240552f2:	687b      	ldr	r3, [r7, #4]
240552f4:	2200      	movs	r2, #0
240552f6:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
240552f8:	687b      	ldr	r3, [r7, #4]
240552fa:	2200      	movs	r2, #0
240552fc:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
240552fe:	687b      	ldr	r3, [r7, #4]
24055300:	2200      	movs	r2, #0
24055302:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24055304:	687b      	ldr	r3, [r7, #4]
24055306:	2200      	movs	r2, #0
24055308:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
2405530a:	687b      	ldr	r3, [r7, #4]
2405530c:	2201      	movs	r2, #1
2405530e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
24055312:	2300      	movs	r3, #0
}
24055314:	4618      	mov	r0, r3
24055316:	3718      	adds	r7, #24
24055318:	46bd      	mov	sp, r7
2405531a:	bd80      	pop	{r7, pc}

2405531c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
2405531c:	b580      	push	{r7, lr}
2405531e:	b086      	sub	sp, #24
24055320:	af00      	add	r7, sp, #0
24055322:	60f8      	str	r0, [r7, #12]
24055324:	60b9      	str	r1, [r7, #8]
24055326:	607a      	str	r2, [r7, #4]
24055328:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
2405532a:	2300      	movs	r3, #0
2405532c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
2405532e:	68fb      	ldr	r3, [r7, #12]
24055330:	2b00      	cmp	r3, #0
24055332:	d101      	bne.n	24055338 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
24055334:	2301      	movs	r3, #1
24055336:	e226      	b.n	24055786 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
24055338:	68fb      	ldr	r3, [r7, #12]
2405533a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
2405533e:	2b01      	cmp	r3, #1
24055340:	d101      	bne.n	24055346 <HAL_DMA_Start_IT+0x2a>
24055342:	2302      	movs	r3, #2
24055344:	e21f      	b.n	24055786 <HAL_DMA_Start_IT+0x46a>
24055346:	68fb      	ldr	r3, [r7, #12]
24055348:	2201      	movs	r2, #1
2405534a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
2405534e:	68fb      	ldr	r3, [r7, #12]
24055350:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
24055354:	b2db      	uxtb	r3, r3
24055356:	2b01      	cmp	r3, #1
24055358:	f040 820a 	bne.w	24055770 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
2405535c:	68fb      	ldr	r3, [r7, #12]
2405535e:	2202      	movs	r2, #2
24055360:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24055364:	68fb      	ldr	r3, [r7, #12]
24055366:	2200      	movs	r2, #0
24055368:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
2405536a:	68fb      	ldr	r3, [r7, #12]
2405536c:	681b      	ldr	r3, [r3, #0]
2405536e:	4a68      	ldr	r2, [pc, #416]	; (24055510 <HAL_DMA_Start_IT+0x1f4>)
24055370:	4293      	cmp	r3, r2
24055372:	d04a      	beq.n	2405540a <HAL_DMA_Start_IT+0xee>
24055374:	68fb      	ldr	r3, [r7, #12]
24055376:	681b      	ldr	r3, [r3, #0]
24055378:	4a66      	ldr	r2, [pc, #408]	; (24055514 <HAL_DMA_Start_IT+0x1f8>)
2405537a:	4293      	cmp	r3, r2
2405537c:	d045      	beq.n	2405540a <HAL_DMA_Start_IT+0xee>
2405537e:	68fb      	ldr	r3, [r7, #12]
24055380:	681b      	ldr	r3, [r3, #0]
24055382:	4a65      	ldr	r2, [pc, #404]	; (24055518 <HAL_DMA_Start_IT+0x1fc>)
24055384:	4293      	cmp	r3, r2
24055386:	d040      	beq.n	2405540a <HAL_DMA_Start_IT+0xee>
24055388:	68fb      	ldr	r3, [r7, #12]
2405538a:	681b      	ldr	r3, [r3, #0]
2405538c:	4a63      	ldr	r2, [pc, #396]	; (2405551c <HAL_DMA_Start_IT+0x200>)
2405538e:	4293      	cmp	r3, r2
24055390:	d03b      	beq.n	2405540a <HAL_DMA_Start_IT+0xee>
24055392:	68fb      	ldr	r3, [r7, #12]
24055394:	681b      	ldr	r3, [r3, #0]
24055396:	4a62      	ldr	r2, [pc, #392]	; (24055520 <HAL_DMA_Start_IT+0x204>)
24055398:	4293      	cmp	r3, r2
2405539a:	d036      	beq.n	2405540a <HAL_DMA_Start_IT+0xee>
2405539c:	68fb      	ldr	r3, [r7, #12]
2405539e:	681b      	ldr	r3, [r3, #0]
240553a0:	4a60      	ldr	r2, [pc, #384]	; (24055524 <HAL_DMA_Start_IT+0x208>)
240553a2:	4293      	cmp	r3, r2
240553a4:	d031      	beq.n	2405540a <HAL_DMA_Start_IT+0xee>
240553a6:	68fb      	ldr	r3, [r7, #12]
240553a8:	681b      	ldr	r3, [r3, #0]
240553aa:	4a5f      	ldr	r2, [pc, #380]	; (24055528 <HAL_DMA_Start_IT+0x20c>)
240553ac:	4293      	cmp	r3, r2
240553ae:	d02c      	beq.n	2405540a <HAL_DMA_Start_IT+0xee>
240553b0:	68fb      	ldr	r3, [r7, #12]
240553b2:	681b      	ldr	r3, [r3, #0]
240553b4:	4a5d      	ldr	r2, [pc, #372]	; (2405552c <HAL_DMA_Start_IT+0x210>)
240553b6:	4293      	cmp	r3, r2
240553b8:	d027      	beq.n	2405540a <HAL_DMA_Start_IT+0xee>
240553ba:	68fb      	ldr	r3, [r7, #12]
240553bc:	681b      	ldr	r3, [r3, #0]
240553be:	4a5c      	ldr	r2, [pc, #368]	; (24055530 <HAL_DMA_Start_IT+0x214>)
240553c0:	4293      	cmp	r3, r2
240553c2:	d022      	beq.n	2405540a <HAL_DMA_Start_IT+0xee>
240553c4:	68fb      	ldr	r3, [r7, #12]
240553c6:	681b      	ldr	r3, [r3, #0]
240553c8:	4a5a      	ldr	r2, [pc, #360]	; (24055534 <HAL_DMA_Start_IT+0x218>)
240553ca:	4293      	cmp	r3, r2
240553cc:	d01d      	beq.n	2405540a <HAL_DMA_Start_IT+0xee>
240553ce:	68fb      	ldr	r3, [r7, #12]
240553d0:	681b      	ldr	r3, [r3, #0]
240553d2:	4a59      	ldr	r2, [pc, #356]	; (24055538 <HAL_DMA_Start_IT+0x21c>)
240553d4:	4293      	cmp	r3, r2
240553d6:	d018      	beq.n	2405540a <HAL_DMA_Start_IT+0xee>
240553d8:	68fb      	ldr	r3, [r7, #12]
240553da:	681b      	ldr	r3, [r3, #0]
240553dc:	4a57      	ldr	r2, [pc, #348]	; (2405553c <HAL_DMA_Start_IT+0x220>)
240553de:	4293      	cmp	r3, r2
240553e0:	d013      	beq.n	2405540a <HAL_DMA_Start_IT+0xee>
240553e2:	68fb      	ldr	r3, [r7, #12]
240553e4:	681b      	ldr	r3, [r3, #0]
240553e6:	4a56      	ldr	r2, [pc, #344]	; (24055540 <HAL_DMA_Start_IT+0x224>)
240553e8:	4293      	cmp	r3, r2
240553ea:	d00e      	beq.n	2405540a <HAL_DMA_Start_IT+0xee>
240553ec:	68fb      	ldr	r3, [r7, #12]
240553ee:	681b      	ldr	r3, [r3, #0]
240553f0:	4a54      	ldr	r2, [pc, #336]	; (24055544 <HAL_DMA_Start_IT+0x228>)
240553f2:	4293      	cmp	r3, r2
240553f4:	d009      	beq.n	2405540a <HAL_DMA_Start_IT+0xee>
240553f6:	68fb      	ldr	r3, [r7, #12]
240553f8:	681b      	ldr	r3, [r3, #0]
240553fa:	4a53      	ldr	r2, [pc, #332]	; (24055548 <HAL_DMA_Start_IT+0x22c>)
240553fc:	4293      	cmp	r3, r2
240553fe:	d004      	beq.n	2405540a <HAL_DMA_Start_IT+0xee>
24055400:	68fb      	ldr	r3, [r7, #12]
24055402:	681b      	ldr	r3, [r3, #0]
24055404:	4a51      	ldr	r2, [pc, #324]	; (2405554c <HAL_DMA_Start_IT+0x230>)
24055406:	4293      	cmp	r3, r2
24055408:	d108      	bne.n	2405541c <HAL_DMA_Start_IT+0x100>
2405540a:	68fb      	ldr	r3, [r7, #12]
2405540c:	681b      	ldr	r3, [r3, #0]
2405540e:	681a      	ldr	r2, [r3, #0]
24055410:	68fb      	ldr	r3, [r7, #12]
24055412:	681b      	ldr	r3, [r3, #0]
24055414:	f022 0201 	bic.w	r2, r2, #1
24055418:	601a      	str	r2, [r3, #0]
2405541a:	e007      	b.n	2405542c <HAL_DMA_Start_IT+0x110>
2405541c:	68fb      	ldr	r3, [r7, #12]
2405541e:	681b      	ldr	r3, [r3, #0]
24055420:	681a      	ldr	r2, [r3, #0]
24055422:	68fb      	ldr	r3, [r7, #12]
24055424:	681b      	ldr	r3, [r3, #0]
24055426:	f022 0201 	bic.w	r2, r2, #1
2405542a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
2405542c:	683b      	ldr	r3, [r7, #0]
2405542e:	687a      	ldr	r2, [r7, #4]
24055430:	68b9      	ldr	r1, [r7, #8]
24055432:	68f8      	ldr	r0, [r7, #12]
24055434:	f001 feac 	bl	24057190 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24055438:	68fb      	ldr	r3, [r7, #12]
2405543a:	681b      	ldr	r3, [r3, #0]
2405543c:	4a34      	ldr	r2, [pc, #208]	; (24055510 <HAL_DMA_Start_IT+0x1f4>)
2405543e:	4293      	cmp	r3, r2
24055440:	d04a      	beq.n	240554d8 <HAL_DMA_Start_IT+0x1bc>
24055442:	68fb      	ldr	r3, [r7, #12]
24055444:	681b      	ldr	r3, [r3, #0]
24055446:	4a33      	ldr	r2, [pc, #204]	; (24055514 <HAL_DMA_Start_IT+0x1f8>)
24055448:	4293      	cmp	r3, r2
2405544a:	d045      	beq.n	240554d8 <HAL_DMA_Start_IT+0x1bc>
2405544c:	68fb      	ldr	r3, [r7, #12]
2405544e:	681b      	ldr	r3, [r3, #0]
24055450:	4a31      	ldr	r2, [pc, #196]	; (24055518 <HAL_DMA_Start_IT+0x1fc>)
24055452:	4293      	cmp	r3, r2
24055454:	d040      	beq.n	240554d8 <HAL_DMA_Start_IT+0x1bc>
24055456:	68fb      	ldr	r3, [r7, #12]
24055458:	681b      	ldr	r3, [r3, #0]
2405545a:	4a30      	ldr	r2, [pc, #192]	; (2405551c <HAL_DMA_Start_IT+0x200>)
2405545c:	4293      	cmp	r3, r2
2405545e:	d03b      	beq.n	240554d8 <HAL_DMA_Start_IT+0x1bc>
24055460:	68fb      	ldr	r3, [r7, #12]
24055462:	681b      	ldr	r3, [r3, #0]
24055464:	4a2e      	ldr	r2, [pc, #184]	; (24055520 <HAL_DMA_Start_IT+0x204>)
24055466:	4293      	cmp	r3, r2
24055468:	d036      	beq.n	240554d8 <HAL_DMA_Start_IT+0x1bc>
2405546a:	68fb      	ldr	r3, [r7, #12]
2405546c:	681b      	ldr	r3, [r3, #0]
2405546e:	4a2d      	ldr	r2, [pc, #180]	; (24055524 <HAL_DMA_Start_IT+0x208>)
24055470:	4293      	cmp	r3, r2
24055472:	d031      	beq.n	240554d8 <HAL_DMA_Start_IT+0x1bc>
24055474:	68fb      	ldr	r3, [r7, #12]
24055476:	681b      	ldr	r3, [r3, #0]
24055478:	4a2b      	ldr	r2, [pc, #172]	; (24055528 <HAL_DMA_Start_IT+0x20c>)
2405547a:	4293      	cmp	r3, r2
2405547c:	d02c      	beq.n	240554d8 <HAL_DMA_Start_IT+0x1bc>
2405547e:	68fb      	ldr	r3, [r7, #12]
24055480:	681b      	ldr	r3, [r3, #0]
24055482:	4a2a      	ldr	r2, [pc, #168]	; (2405552c <HAL_DMA_Start_IT+0x210>)
24055484:	4293      	cmp	r3, r2
24055486:	d027      	beq.n	240554d8 <HAL_DMA_Start_IT+0x1bc>
24055488:	68fb      	ldr	r3, [r7, #12]
2405548a:	681b      	ldr	r3, [r3, #0]
2405548c:	4a28      	ldr	r2, [pc, #160]	; (24055530 <HAL_DMA_Start_IT+0x214>)
2405548e:	4293      	cmp	r3, r2
24055490:	d022      	beq.n	240554d8 <HAL_DMA_Start_IT+0x1bc>
24055492:	68fb      	ldr	r3, [r7, #12]
24055494:	681b      	ldr	r3, [r3, #0]
24055496:	4a27      	ldr	r2, [pc, #156]	; (24055534 <HAL_DMA_Start_IT+0x218>)
24055498:	4293      	cmp	r3, r2
2405549a:	d01d      	beq.n	240554d8 <HAL_DMA_Start_IT+0x1bc>
2405549c:	68fb      	ldr	r3, [r7, #12]
2405549e:	681b      	ldr	r3, [r3, #0]
240554a0:	4a25      	ldr	r2, [pc, #148]	; (24055538 <HAL_DMA_Start_IT+0x21c>)
240554a2:	4293      	cmp	r3, r2
240554a4:	d018      	beq.n	240554d8 <HAL_DMA_Start_IT+0x1bc>
240554a6:	68fb      	ldr	r3, [r7, #12]
240554a8:	681b      	ldr	r3, [r3, #0]
240554aa:	4a24      	ldr	r2, [pc, #144]	; (2405553c <HAL_DMA_Start_IT+0x220>)
240554ac:	4293      	cmp	r3, r2
240554ae:	d013      	beq.n	240554d8 <HAL_DMA_Start_IT+0x1bc>
240554b0:	68fb      	ldr	r3, [r7, #12]
240554b2:	681b      	ldr	r3, [r3, #0]
240554b4:	4a22      	ldr	r2, [pc, #136]	; (24055540 <HAL_DMA_Start_IT+0x224>)
240554b6:	4293      	cmp	r3, r2
240554b8:	d00e      	beq.n	240554d8 <HAL_DMA_Start_IT+0x1bc>
240554ba:	68fb      	ldr	r3, [r7, #12]
240554bc:	681b      	ldr	r3, [r3, #0]
240554be:	4a21      	ldr	r2, [pc, #132]	; (24055544 <HAL_DMA_Start_IT+0x228>)
240554c0:	4293      	cmp	r3, r2
240554c2:	d009      	beq.n	240554d8 <HAL_DMA_Start_IT+0x1bc>
240554c4:	68fb      	ldr	r3, [r7, #12]
240554c6:	681b      	ldr	r3, [r3, #0]
240554c8:	4a1f      	ldr	r2, [pc, #124]	; (24055548 <HAL_DMA_Start_IT+0x22c>)
240554ca:	4293      	cmp	r3, r2
240554cc:	d004      	beq.n	240554d8 <HAL_DMA_Start_IT+0x1bc>
240554ce:	68fb      	ldr	r3, [r7, #12]
240554d0:	681b      	ldr	r3, [r3, #0]
240554d2:	4a1e      	ldr	r2, [pc, #120]	; (2405554c <HAL_DMA_Start_IT+0x230>)
240554d4:	4293      	cmp	r3, r2
240554d6:	d101      	bne.n	240554dc <HAL_DMA_Start_IT+0x1c0>
240554d8:	2301      	movs	r3, #1
240554da:	e000      	b.n	240554de <HAL_DMA_Start_IT+0x1c2>
240554dc:	2300      	movs	r3, #0
240554de:	2b00      	cmp	r3, #0
240554e0:	d036      	beq.n	24055550 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
240554e2:	68fb      	ldr	r3, [r7, #12]
240554e4:	681b      	ldr	r3, [r3, #0]
240554e6:	681b      	ldr	r3, [r3, #0]
240554e8:	f023 021e 	bic.w	r2, r3, #30
240554ec:	68fb      	ldr	r3, [r7, #12]
240554ee:	681b      	ldr	r3, [r3, #0]
240554f0:	f042 0216 	orr.w	r2, r2, #22
240554f4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
240554f6:	68fb      	ldr	r3, [r7, #12]
240554f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240554fa:	2b00      	cmp	r3, #0
240554fc:	d03e      	beq.n	2405557c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
240554fe:	68fb      	ldr	r3, [r7, #12]
24055500:	681b      	ldr	r3, [r3, #0]
24055502:	681a      	ldr	r2, [r3, #0]
24055504:	68fb      	ldr	r3, [r7, #12]
24055506:	681b      	ldr	r3, [r3, #0]
24055508:	f042 0208 	orr.w	r2, r2, #8
2405550c:	601a      	str	r2, [r3, #0]
2405550e:	e035      	b.n	2405557c <HAL_DMA_Start_IT+0x260>
24055510:	40020010 	.word	0x40020010
24055514:	40020028 	.word	0x40020028
24055518:	40020040 	.word	0x40020040
2405551c:	40020058 	.word	0x40020058
24055520:	40020070 	.word	0x40020070
24055524:	40020088 	.word	0x40020088
24055528:	400200a0 	.word	0x400200a0
2405552c:	400200b8 	.word	0x400200b8
24055530:	40020410 	.word	0x40020410
24055534:	40020428 	.word	0x40020428
24055538:	40020440 	.word	0x40020440
2405553c:	40020458 	.word	0x40020458
24055540:	40020470 	.word	0x40020470
24055544:	40020488 	.word	0x40020488
24055548:	400204a0 	.word	0x400204a0
2405554c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
24055550:	68fb      	ldr	r3, [r7, #12]
24055552:	681b      	ldr	r3, [r3, #0]
24055554:	681b      	ldr	r3, [r3, #0]
24055556:	f023 020e 	bic.w	r2, r3, #14
2405555a:	68fb      	ldr	r3, [r7, #12]
2405555c:	681b      	ldr	r3, [r3, #0]
2405555e:	f042 020a 	orr.w	r2, r2, #10
24055562:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
24055564:	68fb      	ldr	r3, [r7, #12]
24055566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24055568:	2b00      	cmp	r3, #0
2405556a:	d007      	beq.n	2405557c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
2405556c:	68fb      	ldr	r3, [r7, #12]
2405556e:	681b      	ldr	r3, [r3, #0]
24055570:	681a      	ldr	r2, [r3, #0]
24055572:	68fb      	ldr	r3, [r7, #12]
24055574:	681b      	ldr	r3, [r3, #0]
24055576:	f042 0204 	orr.w	r2, r2, #4
2405557a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
2405557c:	68fb      	ldr	r3, [r7, #12]
2405557e:	681b      	ldr	r3, [r3, #0]
24055580:	4a83      	ldr	r2, [pc, #524]	; (24055790 <HAL_DMA_Start_IT+0x474>)
24055582:	4293      	cmp	r3, r2
24055584:	d072      	beq.n	2405566c <HAL_DMA_Start_IT+0x350>
24055586:	68fb      	ldr	r3, [r7, #12]
24055588:	681b      	ldr	r3, [r3, #0]
2405558a:	4a82      	ldr	r2, [pc, #520]	; (24055794 <HAL_DMA_Start_IT+0x478>)
2405558c:	4293      	cmp	r3, r2
2405558e:	d06d      	beq.n	2405566c <HAL_DMA_Start_IT+0x350>
24055590:	68fb      	ldr	r3, [r7, #12]
24055592:	681b      	ldr	r3, [r3, #0]
24055594:	4a80      	ldr	r2, [pc, #512]	; (24055798 <HAL_DMA_Start_IT+0x47c>)
24055596:	4293      	cmp	r3, r2
24055598:	d068      	beq.n	2405566c <HAL_DMA_Start_IT+0x350>
2405559a:	68fb      	ldr	r3, [r7, #12]
2405559c:	681b      	ldr	r3, [r3, #0]
2405559e:	4a7f      	ldr	r2, [pc, #508]	; (2405579c <HAL_DMA_Start_IT+0x480>)
240555a0:	4293      	cmp	r3, r2
240555a2:	d063      	beq.n	2405566c <HAL_DMA_Start_IT+0x350>
240555a4:	68fb      	ldr	r3, [r7, #12]
240555a6:	681b      	ldr	r3, [r3, #0]
240555a8:	4a7d      	ldr	r2, [pc, #500]	; (240557a0 <HAL_DMA_Start_IT+0x484>)
240555aa:	4293      	cmp	r3, r2
240555ac:	d05e      	beq.n	2405566c <HAL_DMA_Start_IT+0x350>
240555ae:	68fb      	ldr	r3, [r7, #12]
240555b0:	681b      	ldr	r3, [r3, #0]
240555b2:	4a7c      	ldr	r2, [pc, #496]	; (240557a4 <HAL_DMA_Start_IT+0x488>)
240555b4:	4293      	cmp	r3, r2
240555b6:	d059      	beq.n	2405566c <HAL_DMA_Start_IT+0x350>
240555b8:	68fb      	ldr	r3, [r7, #12]
240555ba:	681b      	ldr	r3, [r3, #0]
240555bc:	4a7a      	ldr	r2, [pc, #488]	; (240557a8 <HAL_DMA_Start_IT+0x48c>)
240555be:	4293      	cmp	r3, r2
240555c0:	d054      	beq.n	2405566c <HAL_DMA_Start_IT+0x350>
240555c2:	68fb      	ldr	r3, [r7, #12]
240555c4:	681b      	ldr	r3, [r3, #0]
240555c6:	4a79      	ldr	r2, [pc, #484]	; (240557ac <HAL_DMA_Start_IT+0x490>)
240555c8:	4293      	cmp	r3, r2
240555ca:	d04f      	beq.n	2405566c <HAL_DMA_Start_IT+0x350>
240555cc:	68fb      	ldr	r3, [r7, #12]
240555ce:	681b      	ldr	r3, [r3, #0]
240555d0:	4a77      	ldr	r2, [pc, #476]	; (240557b0 <HAL_DMA_Start_IT+0x494>)
240555d2:	4293      	cmp	r3, r2
240555d4:	d04a      	beq.n	2405566c <HAL_DMA_Start_IT+0x350>
240555d6:	68fb      	ldr	r3, [r7, #12]
240555d8:	681b      	ldr	r3, [r3, #0]
240555da:	4a76      	ldr	r2, [pc, #472]	; (240557b4 <HAL_DMA_Start_IT+0x498>)
240555dc:	4293      	cmp	r3, r2
240555de:	d045      	beq.n	2405566c <HAL_DMA_Start_IT+0x350>
240555e0:	68fb      	ldr	r3, [r7, #12]
240555e2:	681b      	ldr	r3, [r3, #0]
240555e4:	4a74      	ldr	r2, [pc, #464]	; (240557b8 <HAL_DMA_Start_IT+0x49c>)
240555e6:	4293      	cmp	r3, r2
240555e8:	d040      	beq.n	2405566c <HAL_DMA_Start_IT+0x350>
240555ea:	68fb      	ldr	r3, [r7, #12]
240555ec:	681b      	ldr	r3, [r3, #0]
240555ee:	4a73      	ldr	r2, [pc, #460]	; (240557bc <HAL_DMA_Start_IT+0x4a0>)
240555f0:	4293      	cmp	r3, r2
240555f2:	d03b      	beq.n	2405566c <HAL_DMA_Start_IT+0x350>
240555f4:	68fb      	ldr	r3, [r7, #12]
240555f6:	681b      	ldr	r3, [r3, #0]
240555f8:	4a71      	ldr	r2, [pc, #452]	; (240557c0 <HAL_DMA_Start_IT+0x4a4>)
240555fa:	4293      	cmp	r3, r2
240555fc:	d036      	beq.n	2405566c <HAL_DMA_Start_IT+0x350>
240555fe:	68fb      	ldr	r3, [r7, #12]
24055600:	681b      	ldr	r3, [r3, #0]
24055602:	4a70      	ldr	r2, [pc, #448]	; (240557c4 <HAL_DMA_Start_IT+0x4a8>)
24055604:	4293      	cmp	r3, r2
24055606:	d031      	beq.n	2405566c <HAL_DMA_Start_IT+0x350>
24055608:	68fb      	ldr	r3, [r7, #12]
2405560a:	681b      	ldr	r3, [r3, #0]
2405560c:	4a6e      	ldr	r2, [pc, #440]	; (240557c8 <HAL_DMA_Start_IT+0x4ac>)
2405560e:	4293      	cmp	r3, r2
24055610:	d02c      	beq.n	2405566c <HAL_DMA_Start_IT+0x350>
24055612:	68fb      	ldr	r3, [r7, #12]
24055614:	681b      	ldr	r3, [r3, #0]
24055616:	4a6d      	ldr	r2, [pc, #436]	; (240557cc <HAL_DMA_Start_IT+0x4b0>)
24055618:	4293      	cmp	r3, r2
2405561a:	d027      	beq.n	2405566c <HAL_DMA_Start_IT+0x350>
2405561c:	68fb      	ldr	r3, [r7, #12]
2405561e:	681b      	ldr	r3, [r3, #0]
24055620:	4a6b      	ldr	r2, [pc, #428]	; (240557d0 <HAL_DMA_Start_IT+0x4b4>)
24055622:	4293      	cmp	r3, r2
24055624:	d022      	beq.n	2405566c <HAL_DMA_Start_IT+0x350>
24055626:	68fb      	ldr	r3, [r7, #12]
24055628:	681b      	ldr	r3, [r3, #0]
2405562a:	4a6a      	ldr	r2, [pc, #424]	; (240557d4 <HAL_DMA_Start_IT+0x4b8>)
2405562c:	4293      	cmp	r3, r2
2405562e:	d01d      	beq.n	2405566c <HAL_DMA_Start_IT+0x350>
24055630:	68fb      	ldr	r3, [r7, #12]
24055632:	681b      	ldr	r3, [r3, #0]
24055634:	4a68      	ldr	r2, [pc, #416]	; (240557d8 <HAL_DMA_Start_IT+0x4bc>)
24055636:	4293      	cmp	r3, r2
24055638:	d018      	beq.n	2405566c <HAL_DMA_Start_IT+0x350>
2405563a:	68fb      	ldr	r3, [r7, #12]
2405563c:	681b      	ldr	r3, [r3, #0]
2405563e:	4a67      	ldr	r2, [pc, #412]	; (240557dc <HAL_DMA_Start_IT+0x4c0>)
24055640:	4293      	cmp	r3, r2
24055642:	d013      	beq.n	2405566c <HAL_DMA_Start_IT+0x350>
24055644:	68fb      	ldr	r3, [r7, #12]
24055646:	681b      	ldr	r3, [r3, #0]
24055648:	4a65      	ldr	r2, [pc, #404]	; (240557e0 <HAL_DMA_Start_IT+0x4c4>)
2405564a:	4293      	cmp	r3, r2
2405564c:	d00e      	beq.n	2405566c <HAL_DMA_Start_IT+0x350>
2405564e:	68fb      	ldr	r3, [r7, #12]
24055650:	681b      	ldr	r3, [r3, #0]
24055652:	4a64      	ldr	r2, [pc, #400]	; (240557e4 <HAL_DMA_Start_IT+0x4c8>)
24055654:	4293      	cmp	r3, r2
24055656:	d009      	beq.n	2405566c <HAL_DMA_Start_IT+0x350>
24055658:	68fb      	ldr	r3, [r7, #12]
2405565a:	681b      	ldr	r3, [r3, #0]
2405565c:	4a62      	ldr	r2, [pc, #392]	; (240557e8 <HAL_DMA_Start_IT+0x4cc>)
2405565e:	4293      	cmp	r3, r2
24055660:	d004      	beq.n	2405566c <HAL_DMA_Start_IT+0x350>
24055662:	68fb      	ldr	r3, [r7, #12]
24055664:	681b      	ldr	r3, [r3, #0]
24055666:	4a61      	ldr	r2, [pc, #388]	; (240557ec <HAL_DMA_Start_IT+0x4d0>)
24055668:	4293      	cmp	r3, r2
2405566a:	d101      	bne.n	24055670 <HAL_DMA_Start_IT+0x354>
2405566c:	2301      	movs	r3, #1
2405566e:	e000      	b.n	24055672 <HAL_DMA_Start_IT+0x356>
24055670:	2300      	movs	r3, #0
24055672:	2b00      	cmp	r3, #0
24055674:	d01a      	beq.n	240556ac <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
24055676:	68fb      	ldr	r3, [r7, #12]
24055678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2405567a:	681b      	ldr	r3, [r3, #0]
2405567c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24055680:	2b00      	cmp	r3, #0
24055682:	d007      	beq.n	24055694 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
24055684:	68fb      	ldr	r3, [r7, #12]
24055686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24055688:	681a      	ldr	r2, [r3, #0]
2405568a:	68fb      	ldr	r3, [r7, #12]
2405568c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2405568e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
24055692:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
24055694:	68fb      	ldr	r3, [r7, #12]
24055696:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24055698:	2b00      	cmp	r3, #0
2405569a:	d007      	beq.n	240556ac <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
2405569c:	68fb      	ldr	r3, [r7, #12]
2405569e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240556a0:	681a      	ldr	r2, [r3, #0]
240556a2:	68fb      	ldr	r3, [r7, #12]
240556a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240556a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
240556aa:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
240556ac:	68fb      	ldr	r3, [r7, #12]
240556ae:	681b      	ldr	r3, [r3, #0]
240556b0:	4a37      	ldr	r2, [pc, #220]	; (24055790 <HAL_DMA_Start_IT+0x474>)
240556b2:	4293      	cmp	r3, r2
240556b4:	d04a      	beq.n	2405574c <HAL_DMA_Start_IT+0x430>
240556b6:	68fb      	ldr	r3, [r7, #12]
240556b8:	681b      	ldr	r3, [r3, #0]
240556ba:	4a36      	ldr	r2, [pc, #216]	; (24055794 <HAL_DMA_Start_IT+0x478>)
240556bc:	4293      	cmp	r3, r2
240556be:	d045      	beq.n	2405574c <HAL_DMA_Start_IT+0x430>
240556c0:	68fb      	ldr	r3, [r7, #12]
240556c2:	681b      	ldr	r3, [r3, #0]
240556c4:	4a34      	ldr	r2, [pc, #208]	; (24055798 <HAL_DMA_Start_IT+0x47c>)
240556c6:	4293      	cmp	r3, r2
240556c8:	d040      	beq.n	2405574c <HAL_DMA_Start_IT+0x430>
240556ca:	68fb      	ldr	r3, [r7, #12]
240556cc:	681b      	ldr	r3, [r3, #0]
240556ce:	4a33      	ldr	r2, [pc, #204]	; (2405579c <HAL_DMA_Start_IT+0x480>)
240556d0:	4293      	cmp	r3, r2
240556d2:	d03b      	beq.n	2405574c <HAL_DMA_Start_IT+0x430>
240556d4:	68fb      	ldr	r3, [r7, #12]
240556d6:	681b      	ldr	r3, [r3, #0]
240556d8:	4a31      	ldr	r2, [pc, #196]	; (240557a0 <HAL_DMA_Start_IT+0x484>)
240556da:	4293      	cmp	r3, r2
240556dc:	d036      	beq.n	2405574c <HAL_DMA_Start_IT+0x430>
240556de:	68fb      	ldr	r3, [r7, #12]
240556e0:	681b      	ldr	r3, [r3, #0]
240556e2:	4a30      	ldr	r2, [pc, #192]	; (240557a4 <HAL_DMA_Start_IT+0x488>)
240556e4:	4293      	cmp	r3, r2
240556e6:	d031      	beq.n	2405574c <HAL_DMA_Start_IT+0x430>
240556e8:	68fb      	ldr	r3, [r7, #12]
240556ea:	681b      	ldr	r3, [r3, #0]
240556ec:	4a2e      	ldr	r2, [pc, #184]	; (240557a8 <HAL_DMA_Start_IT+0x48c>)
240556ee:	4293      	cmp	r3, r2
240556f0:	d02c      	beq.n	2405574c <HAL_DMA_Start_IT+0x430>
240556f2:	68fb      	ldr	r3, [r7, #12]
240556f4:	681b      	ldr	r3, [r3, #0]
240556f6:	4a2d      	ldr	r2, [pc, #180]	; (240557ac <HAL_DMA_Start_IT+0x490>)
240556f8:	4293      	cmp	r3, r2
240556fa:	d027      	beq.n	2405574c <HAL_DMA_Start_IT+0x430>
240556fc:	68fb      	ldr	r3, [r7, #12]
240556fe:	681b      	ldr	r3, [r3, #0]
24055700:	4a2b      	ldr	r2, [pc, #172]	; (240557b0 <HAL_DMA_Start_IT+0x494>)
24055702:	4293      	cmp	r3, r2
24055704:	d022      	beq.n	2405574c <HAL_DMA_Start_IT+0x430>
24055706:	68fb      	ldr	r3, [r7, #12]
24055708:	681b      	ldr	r3, [r3, #0]
2405570a:	4a2a      	ldr	r2, [pc, #168]	; (240557b4 <HAL_DMA_Start_IT+0x498>)
2405570c:	4293      	cmp	r3, r2
2405570e:	d01d      	beq.n	2405574c <HAL_DMA_Start_IT+0x430>
24055710:	68fb      	ldr	r3, [r7, #12]
24055712:	681b      	ldr	r3, [r3, #0]
24055714:	4a28      	ldr	r2, [pc, #160]	; (240557b8 <HAL_DMA_Start_IT+0x49c>)
24055716:	4293      	cmp	r3, r2
24055718:	d018      	beq.n	2405574c <HAL_DMA_Start_IT+0x430>
2405571a:	68fb      	ldr	r3, [r7, #12]
2405571c:	681b      	ldr	r3, [r3, #0]
2405571e:	4a27      	ldr	r2, [pc, #156]	; (240557bc <HAL_DMA_Start_IT+0x4a0>)
24055720:	4293      	cmp	r3, r2
24055722:	d013      	beq.n	2405574c <HAL_DMA_Start_IT+0x430>
24055724:	68fb      	ldr	r3, [r7, #12]
24055726:	681b      	ldr	r3, [r3, #0]
24055728:	4a25      	ldr	r2, [pc, #148]	; (240557c0 <HAL_DMA_Start_IT+0x4a4>)
2405572a:	4293      	cmp	r3, r2
2405572c:	d00e      	beq.n	2405574c <HAL_DMA_Start_IT+0x430>
2405572e:	68fb      	ldr	r3, [r7, #12]
24055730:	681b      	ldr	r3, [r3, #0]
24055732:	4a24      	ldr	r2, [pc, #144]	; (240557c4 <HAL_DMA_Start_IT+0x4a8>)
24055734:	4293      	cmp	r3, r2
24055736:	d009      	beq.n	2405574c <HAL_DMA_Start_IT+0x430>
24055738:	68fb      	ldr	r3, [r7, #12]
2405573a:	681b      	ldr	r3, [r3, #0]
2405573c:	4a22      	ldr	r2, [pc, #136]	; (240557c8 <HAL_DMA_Start_IT+0x4ac>)
2405573e:	4293      	cmp	r3, r2
24055740:	d004      	beq.n	2405574c <HAL_DMA_Start_IT+0x430>
24055742:	68fb      	ldr	r3, [r7, #12]
24055744:	681b      	ldr	r3, [r3, #0]
24055746:	4a21      	ldr	r2, [pc, #132]	; (240557cc <HAL_DMA_Start_IT+0x4b0>)
24055748:	4293      	cmp	r3, r2
2405574a:	d108      	bne.n	2405575e <HAL_DMA_Start_IT+0x442>
2405574c:	68fb      	ldr	r3, [r7, #12]
2405574e:	681b      	ldr	r3, [r3, #0]
24055750:	681a      	ldr	r2, [r3, #0]
24055752:	68fb      	ldr	r3, [r7, #12]
24055754:	681b      	ldr	r3, [r3, #0]
24055756:	f042 0201 	orr.w	r2, r2, #1
2405575a:	601a      	str	r2, [r3, #0]
2405575c:	e012      	b.n	24055784 <HAL_DMA_Start_IT+0x468>
2405575e:	68fb      	ldr	r3, [r7, #12]
24055760:	681b      	ldr	r3, [r3, #0]
24055762:	681a      	ldr	r2, [r3, #0]
24055764:	68fb      	ldr	r3, [r7, #12]
24055766:	681b      	ldr	r3, [r3, #0]
24055768:	f042 0201 	orr.w	r2, r2, #1
2405576c:	601a      	str	r2, [r3, #0]
2405576e:	e009      	b.n	24055784 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
24055770:	68fb      	ldr	r3, [r7, #12]
24055772:	f44f 6200 	mov.w	r2, #2048	; 0x800
24055776:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
24055778:	68fb      	ldr	r3, [r7, #12]
2405577a:	2200      	movs	r2, #0
2405577c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
24055780:	2301      	movs	r3, #1
24055782:	75fb      	strb	r3, [r7, #23]
  }

  return status;
24055784:	7dfb      	ldrb	r3, [r7, #23]
}
24055786:	4618      	mov	r0, r3
24055788:	3718      	adds	r7, #24
2405578a:	46bd      	mov	sp, r7
2405578c:	bd80      	pop	{r7, pc}
2405578e:	bf00      	nop
24055790:	40020010 	.word	0x40020010
24055794:	40020028 	.word	0x40020028
24055798:	40020040 	.word	0x40020040
2405579c:	40020058 	.word	0x40020058
240557a0:	40020070 	.word	0x40020070
240557a4:	40020088 	.word	0x40020088
240557a8:	400200a0 	.word	0x400200a0
240557ac:	400200b8 	.word	0x400200b8
240557b0:	40020410 	.word	0x40020410
240557b4:	40020428 	.word	0x40020428
240557b8:	40020440 	.word	0x40020440
240557bc:	40020458 	.word	0x40020458
240557c0:	40020470 	.word	0x40020470
240557c4:	40020488 	.word	0x40020488
240557c8:	400204a0 	.word	0x400204a0
240557cc:	400204b8 	.word	0x400204b8
240557d0:	58025408 	.word	0x58025408
240557d4:	5802541c 	.word	0x5802541c
240557d8:	58025430 	.word	0x58025430
240557dc:	58025444 	.word	0x58025444
240557e0:	58025458 	.word	0x58025458
240557e4:	5802546c 	.word	0x5802546c
240557e8:	58025480 	.word	0x58025480
240557ec:	58025494 	.word	0x58025494

240557f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
240557f0:	b580      	push	{r7, lr}
240557f2:	b086      	sub	sp, #24
240557f4:	af00      	add	r7, sp, #0
240557f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
240557f8:	f7fd fa94 	bl	24052d24 <HAL_GetTick>
240557fc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
240557fe:	687b      	ldr	r3, [r7, #4]
24055800:	2b00      	cmp	r3, #0
24055802:	d101      	bne.n	24055808 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
24055804:	2301      	movs	r3, #1
24055806:	e2dc      	b.n	24055dc2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
24055808:	687b      	ldr	r3, [r7, #4]
2405580a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
2405580e:	b2db      	uxtb	r3, r3
24055810:	2b02      	cmp	r3, #2
24055812:	d008      	beq.n	24055826 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
24055814:	687b      	ldr	r3, [r7, #4]
24055816:	2280      	movs	r2, #128	; 0x80
24055818:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
2405581a:	687b      	ldr	r3, [r7, #4]
2405581c:	2200      	movs	r2, #0
2405581e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
24055822:	2301      	movs	r3, #1
24055824:	e2cd      	b.n	24055dc2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24055826:	687b      	ldr	r3, [r7, #4]
24055828:	681b      	ldr	r3, [r3, #0]
2405582a:	4a76      	ldr	r2, [pc, #472]	; (24055a04 <HAL_DMA_Abort+0x214>)
2405582c:	4293      	cmp	r3, r2
2405582e:	d04a      	beq.n	240558c6 <HAL_DMA_Abort+0xd6>
24055830:	687b      	ldr	r3, [r7, #4]
24055832:	681b      	ldr	r3, [r3, #0]
24055834:	4a74      	ldr	r2, [pc, #464]	; (24055a08 <HAL_DMA_Abort+0x218>)
24055836:	4293      	cmp	r3, r2
24055838:	d045      	beq.n	240558c6 <HAL_DMA_Abort+0xd6>
2405583a:	687b      	ldr	r3, [r7, #4]
2405583c:	681b      	ldr	r3, [r3, #0]
2405583e:	4a73      	ldr	r2, [pc, #460]	; (24055a0c <HAL_DMA_Abort+0x21c>)
24055840:	4293      	cmp	r3, r2
24055842:	d040      	beq.n	240558c6 <HAL_DMA_Abort+0xd6>
24055844:	687b      	ldr	r3, [r7, #4]
24055846:	681b      	ldr	r3, [r3, #0]
24055848:	4a71      	ldr	r2, [pc, #452]	; (24055a10 <HAL_DMA_Abort+0x220>)
2405584a:	4293      	cmp	r3, r2
2405584c:	d03b      	beq.n	240558c6 <HAL_DMA_Abort+0xd6>
2405584e:	687b      	ldr	r3, [r7, #4]
24055850:	681b      	ldr	r3, [r3, #0]
24055852:	4a70      	ldr	r2, [pc, #448]	; (24055a14 <HAL_DMA_Abort+0x224>)
24055854:	4293      	cmp	r3, r2
24055856:	d036      	beq.n	240558c6 <HAL_DMA_Abort+0xd6>
24055858:	687b      	ldr	r3, [r7, #4]
2405585a:	681b      	ldr	r3, [r3, #0]
2405585c:	4a6e      	ldr	r2, [pc, #440]	; (24055a18 <HAL_DMA_Abort+0x228>)
2405585e:	4293      	cmp	r3, r2
24055860:	d031      	beq.n	240558c6 <HAL_DMA_Abort+0xd6>
24055862:	687b      	ldr	r3, [r7, #4]
24055864:	681b      	ldr	r3, [r3, #0]
24055866:	4a6d      	ldr	r2, [pc, #436]	; (24055a1c <HAL_DMA_Abort+0x22c>)
24055868:	4293      	cmp	r3, r2
2405586a:	d02c      	beq.n	240558c6 <HAL_DMA_Abort+0xd6>
2405586c:	687b      	ldr	r3, [r7, #4]
2405586e:	681b      	ldr	r3, [r3, #0]
24055870:	4a6b      	ldr	r2, [pc, #428]	; (24055a20 <HAL_DMA_Abort+0x230>)
24055872:	4293      	cmp	r3, r2
24055874:	d027      	beq.n	240558c6 <HAL_DMA_Abort+0xd6>
24055876:	687b      	ldr	r3, [r7, #4]
24055878:	681b      	ldr	r3, [r3, #0]
2405587a:	4a6a      	ldr	r2, [pc, #424]	; (24055a24 <HAL_DMA_Abort+0x234>)
2405587c:	4293      	cmp	r3, r2
2405587e:	d022      	beq.n	240558c6 <HAL_DMA_Abort+0xd6>
24055880:	687b      	ldr	r3, [r7, #4]
24055882:	681b      	ldr	r3, [r3, #0]
24055884:	4a68      	ldr	r2, [pc, #416]	; (24055a28 <HAL_DMA_Abort+0x238>)
24055886:	4293      	cmp	r3, r2
24055888:	d01d      	beq.n	240558c6 <HAL_DMA_Abort+0xd6>
2405588a:	687b      	ldr	r3, [r7, #4]
2405588c:	681b      	ldr	r3, [r3, #0]
2405588e:	4a67      	ldr	r2, [pc, #412]	; (24055a2c <HAL_DMA_Abort+0x23c>)
24055890:	4293      	cmp	r3, r2
24055892:	d018      	beq.n	240558c6 <HAL_DMA_Abort+0xd6>
24055894:	687b      	ldr	r3, [r7, #4]
24055896:	681b      	ldr	r3, [r3, #0]
24055898:	4a65      	ldr	r2, [pc, #404]	; (24055a30 <HAL_DMA_Abort+0x240>)
2405589a:	4293      	cmp	r3, r2
2405589c:	d013      	beq.n	240558c6 <HAL_DMA_Abort+0xd6>
2405589e:	687b      	ldr	r3, [r7, #4]
240558a0:	681b      	ldr	r3, [r3, #0]
240558a2:	4a64      	ldr	r2, [pc, #400]	; (24055a34 <HAL_DMA_Abort+0x244>)
240558a4:	4293      	cmp	r3, r2
240558a6:	d00e      	beq.n	240558c6 <HAL_DMA_Abort+0xd6>
240558a8:	687b      	ldr	r3, [r7, #4]
240558aa:	681b      	ldr	r3, [r3, #0]
240558ac:	4a62      	ldr	r2, [pc, #392]	; (24055a38 <HAL_DMA_Abort+0x248>)
240558ae:	4293      	cmp	r3, r2
240558b0:	d009      	beq.n	240558c6 <HAL_DMA_Abort+0xd6>
240558b2:	687b      	ldr	r3, [r7, #4]
240558b4:	681b      	ldr	r3, [r3, #0]
240558b6:	4a61      	ldr	r2, [pc, #388]	; (24055a3c <HAL_DMA_Abort+0x24c>)
240558b8:	4293      	cmp	r3, r2
240558ba:	d004      	beq.n	240558c6 <HAL_DMA_Abort+0xd6>
240558bc:	687b      	ldr	r3, [r7, #4]
240558be:	681b      	ldr	r3, [r3, #0]
240558c0:	4a5f      	ldr	r2, [pc, #380]	; (24055a40 <HAL_DMA_Abort+0x250>)
240558c2:	4293      	cmp	r3, r2
240558c4:	d101      	bne.n	240558ca <HAL_DMA_Abort+0xda>
240558c6:	2301      	movs	r3, #1
240558c8:	e000      	b.n	240558cc <HAL_DMA_Abort+0xdc>
240558ca:	2300      	movs	r3, #0
240558cc:	2b00      	cmp	r3, #0
240558ce:	d013      	beq.n	240558f8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
240558d0:	687b      	ldr	r3, [r7, #4]
240558d2:	681b      	ldr	r3, [r3, #0]
240558d4:	681a      	ldr	r2, [r3, #0]
240558d6:	687b      	ldr	r3, [r7, #4]
240558d8:	681b      	ldr	r3, [r3, #0]
240558da:	f022 021e 	bic.w	r2, r2, #30
240558de:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
240558e0:	687b      	ldr	r3, [r7, #4]
240558e2:	681b      	ldr	r3, [r3, #0]
240558e4:	695a      	ldr	r2, [r3, #20]
240558e6:	687b      	ldr	r3, [r7, #4]
240558e8:	681b      	ldr	r3, [r3, #0]
240558ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
240558ee:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
240558f0:	687b      	ldr	r3, [r7, #4]
240558f2:	681b      	ldr	r3, [r3, #0]
240558f4:	617b      	str	r3, [r7, #20]
240558f6:	e00a      	b.n	2405590e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
240558f8:	687b      	ldr	r3, [r7, #4]
240558fa:	681b      	ldr	r3, [r3, #0]
240558fc:	681a      	ldr	r2, [r3, #0]
240558fe:	687b      	ldr	r3, [r7, #4]
24055900:	681b      	ldr	r3, [r3, #0]
24055902:	f022 020e 	bic.w	r2, r2, #14
24055906:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
24055908:	687b      	ldr	r3, [r7, #4]
2405590a:	681b      	ldr	r3, [r3, #0]
2405590c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
2405590e:	687b      	ldr	r3, [r7, #4]
24055910:	681b      	ldr	r3, [r3, #0]
24055912:	4a3c      	ldr	r2, [pc, #240]	; (24055a04 <HAL_DMA_Abort+0x214>)
24055914:	4293      	cmp	r3, r2
24055916:	d072      	beq.n	240559fe <HAL_DMA_Abort+0x20e>
24055918:	687b      	ldr	r3, [r7, #4]
2405591a:	681b      	ldr	r3, [r3, #0]
2405591c:	4a3a      	ldr	r2, [pc, #232]	; (24055a08 <HAL_DMA_Abort+0x218>)
2405591e:	4293      	cmp	r3, r2
24055920:	d06d      	beq.n	240559fe <HAL_DMA_Abort+0x20e>
24055922:	687b      	ldr	r3, [r7, #4]
24055924:	681b      	ldr	r3, [r3, #0]
24055926:	4a39      	ldr	r2, [pc, #228]	; (24055a0c <HAL_DMA_Abort+0x21c>)
24055928:	4293      	cmp	r3, r2
2405592a:	d068      	beq.n	240559fe <HAL_DMA_Abort+0x20e>
2405592c:	687b      	ldr	r3, [r7, #4]
2405592e:	681b      	ldr	r3, [r3, #0]
24055930:	4a37      	ldr	r2, [pc, #220]	; (24055a10 <HAL_DMA_Abort+0x220>)
24055932:	4293      	cmp	r3, r2
24055934:	d063      	beq.n	240559fe <HAL_DMA_Abort+0x20e>
24055936:	687b      	ldr	r3, [r7, #4]
24055938:	681b      	ldr	r3, [r3, #0]
2405593a:	4a36      	ldr	r2, [pc, #216]	; (24055a14 <HAL_DMA_Abort+0x224>)
2405593c:	4293      	cmp	r3, r2
2405593e:	d05e      	beq.n	240559fe <HAL_DMA_Abort+0x20e>
24055940:	687b      	ldr	r3, [r7, #4]
24055942:	681b      	ldr	r3, [r3, #0]
24055944:	4a34      	ldr	r2, [pc, #208]	; (24055a18 <HAL_DMA_Abort+0x228>)
24055946:	4293      	cmp	r3, r2
24055948:	d059      	beq.n	240559fe <HAL_DMA_Abort+0x20e>
2405594a:	687b      	ldr	r3, [r7, #4]
2405594c:	681b      	ldr	r3, [r3, #0]
2405594e:	4a33      	ldr	r2, [pc, #204]	; (24055a1c <HAL_DMA_Abort+0x22c>)
24055950:	4293      	cmp	r3, r2
24055952:	d054      	beq.n	240559fe <HAL_DMA_Abort+0x20e>
24055954:	687b      	ldr	r3, [r7, #4]
24055956:	681b      	ldr	r3, [r3, #0]
24055958:	4a31      	ldr	r2, [pc, #196]	; (24055a20 <HAL_DMA_Abort+0x230>)
2405595a:	4293      	cmp	r3, r2
2405595c:	d04f      	beq.n	240559fe <HAL_DMA_Abort+0x20e>
2405595e:	687b      	ldr	r3, [r7, #4]
24055960:	681b      	ldr	r3, [r3, #0]
24055962:	4a30      	ldr	r2, [pc, #192]	; (24055a24 <HAL_DMA_Abort+0x234>)
24055964:	4293      	cmp	r3, r2
24055966:	d04a      	beq.n	240559fe <HAL_DMA_Abort+0x20e>
24055968:	687b      	ldr	r3, [r7, #4]
2405596a:	681b      	ldr	r3, [r3, #0]
2405596c:	4a2e      	ldr	r2, [pc, #184]	; (24055a28 <HAL_DMA_Abort+0x238>)
2405596e:	4293      	cmp	r3, r2
24055970:	d045      	beq.n	240559fe <HAL_DMA_Abort+0x20e>
24055972:	687b      	ldr	r3, [r7, #4]
24055974:	681b      	ldr	r3, [r3, #0]
24055976:	4a2d      	ldr	r2, [pc, #180]	; (24055a2c <HAL_DMA_Abort+0x23c>)
24055978:	4293      	cmp	r3, r2
2405597a:	d040      	beq.n	240559fe <HAL_DMA_Abort+0x20e>
2405597c:	687b      	ldr	r3, [r7, #4]
2405597e:	681b      	ldr	r3, [r3, #0]
24055980:	4a2b      	ldr	r2, [pc, #172]	; (24055a30 <HAL_DMA_Abort+0x240>)
24055982:	4293      	cmp	r3, r2
24055984:	d03b      	beq.n	240559fe <HAL_DMA_Abort+0x20e>
24055986:	687b      	ldr	r3, [r7, #4]
24055988:	681b      	ldr	r3, [r3, #0]
2405598a:	4a2a      	ldr	r2, [pc, #168]	; (24055a34 <HAL_DMA_Abort+0x244>)
2405598c:	4293      	cmp	r3, r2
2405598e:	d036      	beq.n	240559fe <HAL_DMA_Abort+0x20e>
24055990:	687b      	ldr	r3, [r7, #4]
24055992:	681b      	ldr	r3, [r3, #0]
24055994:	4a28      	ldr	r2, [pc, #160]	; (24055a38 <HAL_DMA_Abort+0x248>)
24055996:	4293      	cmp	r3, r2
24055998:	d031      	beq.n	240559fe <HAL_DMA_Abort+0x20e>
2405599a:	687b      	ldr	r3, [r7, #4]
2405599c:	681b      	ldr	r3, [r3, #0]
2405599e:	4a27      	ldr	r2, [pc, #156]	; (24055a3c <HAL_DMA_Abort+0x24c>)
240559a0:	4293      	cmp	r3, r2
240559a2:	d02c      	beq.n	240559fe <HAL_DMA_Abort+0x20e>
240559a4:	687b      	ldr	r3, [r7, #4]
240559a6:	681b      	ldr	r3, [r3, #0]
240559a8:	4a25      	ldr	r2, [pc, #148]	; (24055a40 <HAL_DMA_Abort+0x250>)
240559aa:	4293      	cmp	r3, r2
240559ac:	d027      	beq.n	240559fe <HAL_DMA_Abort+0x20e>
240559ae:	687b      	ldr	r3, [r7, #4]
240559b0:	681b      	ldr	r3, [r3, #0]
240559b2:	4a24      	ldr	r2, [pc, #144]	; (24055a44 <HAL_DMA_Abort+0x254>)
240559b4:	4293      	cmp	r3, r2
240559b6:	d022      	beq.n	240559fe <HAL_DMA_Abort+0x20e>
240559b8:	687b      	ldr	r3, [r7, #4]
240559ba:	681b      	ldr	r3, [r3, #0]
240559bc:	4a22      	ldr	r2, [pc, #136]	; (24055a48 <HAL_DMA_Abort+0x258>)
240559be:	4293      	cmp	r3, r2
240559c0:	d01d      	beq.n	240559fe <HAL_DMA_Abort+0x20e>
240559c2:	687b      	ldr	r3, [r7, #4]
240559c4:	681b      	ldr	r3, [r3, #0]
240559c6:	4a21      	ldr	r2, [pc, #132]	; (24055a4c <HAL_DMA_Abort+0x25c>)
240559c8:	4293      	cmp	r3, r2
240559ca:	d018      	beq.n	240559fe <HAL_DMA_Abort+0x20e>
240559cc:	687b      	ldr	r3, [r7, #4]
240559ce:	681b      	ldr	r3, [r3, #0]
240559d0:	4a1f      	ldr	r2, [pc, #124]	; (24055a50 <HAL_DMA_Abort+0x260>)
240559d2:	4293      	cmp	r3, r2
240559d4:	d013      	beq.n	240559fe <HAL_DMA_Abort+0x20e>
240559d6:	687b      	ldr	r3, [r7, #4]
240559d8:	681b      	ldr	r3, [r3, #0]
240559da:	4a1e      	ldr	r2, [pc, #120]	; (24055a54 <HAL_DMA_Abort+0x264>)
240559dc:	4293      	cmp	r3, r2
240559de:	d00e      	beq.n	240559fe <HAL_DMA_Abort+0x20e>
240559e0:	687b      	ldr	r3, [r7, #4]
240559e2:	681b      	ldr	r3, [r3, #0]
240559e4:	4a1c      	ldr	r2, [pc, #112]	; (24055a58 <HAL_DMA_Abort+0x268>)
240559e6:	4293      	cmp	r3, r2
240559e8:	d009      	beq.n	240559fe <HAL_DMA_Abort+0x20e>
240559ea:	687b      	ldr	r3, [r7, #4]
240559ec:	681b      	ldr	r3, [r3, #0]
240559ee:	4a1b      	ldr	r2, [pc, #108]	; (24055a5c <HAL_DMA_Abort+0x26c>)
240559f0:	4293      	cmp	r3, r2
240559f2:	d004      	beq.n	240559fe <HAL_DMA_Abort+0x20e>
240559f4:	687b      	ldr	r3, [r7, #4]
240559f6:	681b      	ldr	r3, [r3, #0]
240559f8:	4a19      	ldr	r2, [pc, #100]	; (24055a60 <HAL_DMA_Abort+0x270>)
240559fa:	4293      	cmp	r3, r2
240559fc:	d132      	bne.n	24055a64 <HAL_DMA_Abort+0x274>
240559fe:	2301      	movs	r3, #1
24055a00:	e031      	b.n	24055a66 <HAL_DMA_Abort+0x276>
24055a02:	bf00      	nop
24055a04:	40020010 	.word	0x40020010
24055a08:	40020028 	.word	0x40020028
24055a0c:	40020040 	.word	0x40020040
24055a10:	40020058 	.word	0x40020058
24055a14:	40020070 	.word	0x40020070
24055a18:	40020088 	.word	0x40020088
24055a1c:	400200a0 	.word	0x400200a0
24055a20:	400200b8 	.word	0x400200b8
24055a24:	40020410 	.word	0x40020410
24055a28:	40020428 	.word	0x40020428
24055a2c:	40020440 	.word	0x40020440
24055a30:	40020458 	.word	0x40020458
24055a34:	40020470 	.word	0x40020470
24055a38:	40020488 	.word	0x40020488
24055a3c:	400204a0 	.word	0x400204a0
24055a40:	400204b8 	.word	0x400204b8
24055a44:	58025408 	.word	0x58025408
24055a48:	5802541c 	.word	0x5802541c
24055a4c:	58025430 	.word	0x58025430
24055a50:	58025444 	.word	0x58025444
24055a54:	58025458 	.word	0x58025458
24055a58:	5802546c 	.word	0x5802546c
24055a5c:	58025480 	.word	0x58025480
24055a60:	58025494 	.word	0x58025494
24055a64:	2300      	movs	r3, #0
24055a66:	2b00      	cmp	r3, #0
24055a68:	d007      	beq.n	24055a7a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
24055a6a:	687b      	ldr	r3, [r7, #4]
24055a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24055a6e:	681a      	ldr	r2, [r3, #0]
24055a70:	687b      	ldr	r3, [r7, #4]
24055a72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24055a74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
24055a78:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
24055a7a:	687b      	ldr	r3, [r7, #4]
24055a7c:	681b      	ldr	r3, [r3, #0]
24055a7e:	4a6d      	ldr	r2, [pc, #436]	; (24055c34 <HAL_DMA_Abort+0x444>)
24055a80:	4293      	cmp	r3, r2
24055a82:	d04a      	beq.n	24055b1a <HAL_DMA_Abort+0x32a>
24055a84:	687b      	ldr	r3, [r7, #4]
24055a86:	681b      	ldr	r3, [r3, #0]
24055a88:	4a6b      	ldr	r2, [pc, #428]	; (24055c38 <HAL_DMA_Abort+0x448>)
24055a8a:	4293      	cmp	r3, r2
24055a8c:	d045      	beq.n	24055b1a <HAL_DMA_Abort+0x32a>
24055a8e:	687b      	ldr	r3, [r7, #4]
24055a90:	681b      	ldr	r3, [r3, #0]
24055a92:	4a6a      	ldr	r2, [pc, #424]	; (24055c3c <HAL_DMA_Abort+0x44c>)
24055a94:	4293      	cmp	r3, r2
24055a96:	d040      	beq.n	24055b1a <HAL_DMA_Abort+0x32a>
24055a98:	687b      	ldr	r3, [r7, #4]
24055a9a:	681b      	ldr	r3, [r3, #0]
24055a9c:	4a68      	ldr	r2, [pc, #416]	; (24055c40 <HAL_DMA_Abort+0x450>)
24055a9e:	4293      	cmp	r3, r2
24055aa0:	d03b      	beq.n	24055b1a <HAL_DMA_Abort+0x32a>
24055aa2:	687b      	ldr	r3, [r7, #4]
24055aa4:	681b      	ldr	r3, [r3, #0]
24055aa6:	4a67      	ldr	r2, [pc, #412]	; (24055c44 <HAL_DMA_Abort+0x454>)
24055aa8:	4293      	cmp	r3, r2
24055aaa:	d036      	beq.n	24055b1a <HAL_DMA_Abort+0x32a>
24055aac:	687b      	ldr	r3, [r7, #4]
24055aae:	681b      	ldr	r3, [r3, #0]
24055ab0:	4a65      	ldr	r2, [pc, #404]	; (24055c48 <HAL_DMA_Abort+0x458>)
24055ab2:	4293      	cmp	r3, r2
24055ab4:	d031      	beq.n	24055b1a <HAL_DMA_Abort+0x32a>
24055ab6:	687b      	ldr	r3, [r7, #4]
24055ab8:	681b      	ldr	r3, [r3, #0]
24055aba:	4a64      	ldr	r2, [pc, #400]	; (24055c4c <HAL_DMA_Abort+0x45c>)
24055abc:	4293      	cmp	r3, r2
24055abe:	d02c      	beq.n	24055b1a <HAL_DMA_Abort+0x32a>
24055ac0:	687b      	ldr	r3, [r7, #4]
24055ac2:	681b      	ldr	r3, [r3, #0]
24055ac4:	4a62      	ldr	r2, [pc, #392]	; (24055c50 <HAL_DMA_Abort+0x460>)
24055ac6:	4293      	cmp	r3, r2
24055ac8:	d027      	beq.n	24055b1a <HAL_DMA_Abort+0x32a>
24055aca:	687b      	ldr	r3, [r7, #4]
24055acc:	681b      	ldr	r3, [r3, #0]
24055ace:	4a61      	ldr	r2, [pc, #388]	; (24055c54 <HAL_DMA_Abort+0x464>)
24055ad0:	4293      	cmp	r3, r2
24055ad2:	d022      	beq.n	24055b1a <HAL_DMA_Abort+0x32a>
24055ad4:	687b      	ldr	r3, [r7, #4]
24055ad6:	681b      	ldr	r3, [r3, #0]
24055ad8:	4a5f      	ldr	r2, [pc, #380]	; (24055c58 <HAL_DMA_Abort+0x468>)
24055ada:	4293      	cmp	r3, r2
24055adc:	d01d      	beq.n	24055b1a <HAL_DMA_Abort+0x32a>
24055ade:	687b      	ldr	r3, [r7, #4]
24055ae0:	681b      	ldr	r3, [r3, #0]
24055ae2:	4a5e      	ldr	r2, [pc, #376]	; (24055c5c <HAL_DMA_Abort+0x46c>)
24055ae4:	4293      	cmp	r3, r2
24055ae6:	d018      	beq.n	24055b1a <HAL_DMA_Abort+0x32a>
24055ae8:	687b      	ldr	r3, [r7, #4]
24055aea:	681b      	ldr	r3, [r3, #0]
24055aec:	4a5c      	ldr	r2, [pc, #368]	; (24055c60 <HAL_DMA_Abort+0x470>)
24055aee:	4293      	cmp	r3, r2
24055af0:	d013      	beq.n	24055b1a <HAL_DMA_Abort+0x32a>
24055af2:	687b      	ldr	r3, [r7, #4]
24055af4:	681b      	ldr	r3, [r3, #0]
24055af6:	4a5b      	ldr	r2, [pc, #364]	; (24055c64 <HAL_DMA_Abort+0x474>)
24055af8:	4293      	cmp	r3, r2
24055afa:	d00e      	beq.n	24055b1a <HAL_DMA_Abort+0x32a>
24055afc:	687b      	ldr	r3, [r7, #4]
24055afe:	681b      	ldr	r3, [r3, #0]
24055b00:	4a59      	ldr	r2, [pc, #356]	; (24055c68 <HAL_DMA_Abort+0x478>)
24055b02:	4293      	cmp	r3, r2
24055b04:	d009      	beq.n	24055b1a <HAL_DMA_Abort+0x32a>
24055b06:	687b      	ldr	r3, [r7, #4]
24055b08:	681b      	ldr	r3, [r3, #0]
24055b0a:	4a58      	ldr	r2, [pc, #352]	; (24055c6c <HAL_DMA_Abort+0x47c>)
24055b0c:	4293      	cmp	r3, r2
24055b0e:	d004      	beq.n	24055b1a <HAL_DMA_Abort+0x32a>
24055b10:	687b      	ldr	r3, [r7, #4]
24055b12:	681b      	ldr	r3, [r3, #0]
24055b14:	4a56      	ldr	r2, [pc, #344]	; (24055c70 <HAL_DMA_Abort+0x480>)
24055b16:	4293      	cmp	r3, r2
24055b18:	d108      	bne.n	24055b2c <HAL_DMA_Abort+0x33c>
24055b1a:	687b      	ldr	r3, [r7, #4]
24055b1c:	681b      	ldr	r3, [r3, #0]
24055b1e:	681a      	ldr	r2, [r3, #0]
24055b20:	687b      	ldr	r3, [r7, #4]
24055b22:	681b      	ldr	r3, [r3, #0]
24055b24:	f022 0201 	bic.w	r2, r2, #1
24055b28:	601a      	str	r2, [r3, #0]
24055b2a:	e007      	b.n	24055b3c <HAL_DMA_Abort+0x34c>
24055b2c:	687b      	ldr	r3, [r7, #4]
24055b2e:	681b      	ldr	r3, [r3, #0]
24055b30:	681a      	ldr	r2, [r3, #0]
24055b32:	687b      	ldr	r3, [r7, #4]
24055b34:	681b      	ldr	r3, [r3, #0]
24055b36:	f022 0201 	bic.w	r2, r2, #1
24055b3a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
24055b3c:	e013      	b.n	24055b66 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
24055b3e:	f7fd f8f1 	bl	24052d24 <HAL_GetTick>
24055b42:	4602      	mov	r2, r0
24055b44:	693b      	ldr	r3, [r7, #16]
24055b46:	1ad3      	subs	r3, r2, r3
24055b48:	2b05      	cmp	r3, #5
24055b4a:	d90c      	bls.n	24055b66 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
24055b4c:	687b      	ldr	r3, [r7, #4]
24055b4e:	2220      	movs	r2, #32
24055b50:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
24055b52:	687b      	ldr	r3, [r7, #4]
24055b54:	2203      	movs	r2, #3
24055b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
24055b5a:	687b      	ldr	r3, [r7, #4]
24055b5c:	2200      	movs	r2, #0
24055b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
24055b62:	2301      	movs	r3, #1
24055b64:	e12d      	b.n	24055dc2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
24055b66:	697b      	ldr	r3, [r7, #20]
24055b68:	681b      	ldr	r3, [r3, #0]
24055b6a:	f003 0301 	and.w	r3, r3, #1
24055b6e:	2b00      	cmp	r3, #0
24055b70:	d1e5      	bne.n	24055b3e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24055b72:	687b      	ldr	r3, [r7, #4]
24055b74:	681b      	ldr	r3, [r3, #0]
24055b76:	4a2f      	ldr	r2, [pc, #188]	; (24055c34 <HAL_DMA_Abort+0x444>)
24055b78:	4293      	cmp	r3, r2
24055b7a:	d04a      	beq.n	24055c12 <HAL_DMA_Abort+0x422>
24055b7c:	687b      	ldr	r3, [r7, #4]
24055b7e:	681b      	ldr	r3, [r3, #0]
24055b80:	4a2d      	ldr	r2, [pc, #180]	; (24055c38 <HAL_DMA_Abort+0x448>)
24055b82:	4293      	cmp	r3, r2
24055b84:	d045      	beq.n	24055c12 <HAL_DMA_Abort+0x422>
24055b86:	687b      	ldr	r3, [r7, #4]
24055b88:	681b      	ldr	r3, [r3, #0]
24055b8a:	4a2c      	ldr	r2, [pc, #176]	; (24055c3c <HAL_DMA_Abort+0x44c>)
24055b8c:	4293      	cmp	r3, r2
24055b8e:	d040      	beq.n	24055c12 <HAL_DMA_Abort+0x422>
24055b90:	687b      	ldr	r3, [r7, #4]
24055b92:	681b      	ldr	r3, [r3, #0]
24055b94:	4a2a      	ldr	r2, [pc, #168]	; (24055c40 <HAL_DMA_Abort+0x450>)
24055b96:	4293      	cmp	r3, r2
24055b98:	d03b      	beq.n	24055c12 <HAL_DMA_Abort+0x422>
24055b9a:	687b      	ldr	r3, [r7, #4]
24055b9c:	681b      	ldr	r3, [r3, #0]
24055b9e:	4a29      	ldr	r2, [pc, #164]	; (24055c44 <HAL_DMA_Abort+0x454>)
24055ba0:	4293      	cmp	r3, r2
24055ba2:	d036      	beq.n	24055c12 <HAL_DMA_Abort+0x422>
24055ba4:	687b      	ldr	r3, [r7, #4]
24055ba6:	681b      	ldr	r3, [r3, #0]
24055ba8:	4a27      	ldr	r2, [pc, #156]	; (24055c48 <HAL_DMA_Abort+0x458>)
24055baa:	4293      	cmp	r3, r2
24055bac:	d031      	beq.n	24055c12 <HAL_DMA_Abort+0x422>
24055bae:	687b      	ldr	r3, [r7, #4]
24055bb0:	681b      	ldr	r3, [r3, #0]
24055bb2:	4a26      	ldr	r2, [pc, #152]	; (24055c4c <HAL_DMA_Abort+0x45c>)
24055bb4:	4293      	cmp	r3, r2
24055bb6:	d02c      	beq.n	24055c12 <HAL_DMA_Abort+0x422>
24055bb8:	687b      	ldr	r3, [r7, #4]
24055bba:	681b      	ldr	r3, [r3, #0]
24055bbc:	4a24      	ldr	r2, [pc, #144]	; (24055c50 <HAL_DMA_Abort+0x460>)
24055bbe:	4293      	cmp	r3, r2
24055bc0:	d027      	beq.n	24055c12 <HAL_DMA_Abort+0x422>
24055bc2:	687b      	ldr	r3, [r7, #4]
24055bc4:	681b      	ldr	r3, [r3, #0]
24055bc6:	4a23      	ldr	r2, [pc, #140]	; (24055c54 <HAL_DMA_Abort+0x464>)
24055bc8:	4293      	cmp	r3, r2
24055bca:	d022      	beq.n	24055c12 <HAL_DMA_Abort+0x422>
24055bcc:	687b      	ldr	r3, [r7, #4]
24055bce:	681b      	ldr	r3, [r3, #0]
24055bd0:	4a21      	ldr	r2, [pc, #132]	; (24055c58 <HAL_DMA_Abort+0x468>)
24055bd2:	4293      	cmp	r3, r2
24055bd4:	d01d      	beq.n	24055c12 <HAL_DMA_Abort+0x422>
24055bd6:	687b      	ldr	r3, [r7, #4]
24055bd8:	681b      	ldr	r3, [r3, #0]
24055bda:	4a20      	ldr	r2, [pc, #128]	; (24055c5c <HAL_DMA_Abort+0x46c>)
24055bdc:	4293      	cmp	r3, r2
24055bde:	d018      	beq.n	24055c12 <HAL_DMA_Abort+0x422>
24055be0:	687b      	ldr	r3, [r7, #4]
24055be2:	681b      	ldr	r3, [r3, #0]
24055be4:	4a1e      	ldr	r2, [pc, #120]	; (24055c60 <HAL_DMA_Abort+0x470>)
24055be6:	4293      	cmp	r3, r2
24055be8:	d013      	beq.n	24055c12 <HAL_DMA_Abort+0x422>
24055bea:	687b      	ldr	r3, [r7, #4]
24055bec:	681b      	ldr	r3, [r3, #0]
24055bee:	4a1d      	ldr	r2, [pc, #116]	; (24055c64 <HAL_DMA_Abort+0x474>)
24055bf0:	4293      	cmp	r3, r2
24055bf2:	d00e      	beq.n	24055c12 <HAL_DMA_Abort+0x422>
24055bf4:	687b      	ldr	r3, [r7, #4]
24055bf6:	681b      	ldr	r3, [r3, #0]
24055bf8:	4a1b      	ldr	r2, [pc, #108]	; (24055c68 <HAL_DMA_Abort+0x478>)
24055bfa:	4293      	cmp	r3, r2
24055bfc:	d009      	beq.n	24055c12 <HAL_DMA_Abort+0x422>
24055bfe:	687b      	ldr	r3, [r7, #4]
24055c00:	681b      	ldr	r3, [r3, #0]
24055c02:	4a1a      	ldr	r2, [pc, #104]	; (24055c6c <HAL_DMA_Abort+0x47c>)
24055c04:	4293      	cmp	r3, r2
24055c06:	d004      	beq.n	24055c12 <HAL_DMA_Abort+0x422>
24055c08:	687b      	ldr	r3, [r7, #4]
24055c0a:	681b      	ldr	r3, [r3, #0]
24055c0c:	4a18      	ldr	r2, [pc, #96]	; (24055c70 <HAL_DMA_Abort+0x480>)
24055c0e:	4293      	cmp	r3, r2
24055c10:	d101      	bne.n	24055c16 <HAL_DMA_Abort+0x426>
24055c12:	2301      	movs	r3, #1
24055c14:	e000      	b.n	24055c18 <HAL_DMA_Abort+0x428>
24055c16:	2300      	movs	r3, #0
24055c18:	2b00      	cmp	r3, #0
24055c1a:	d02b      	beq.n	24055c74 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
24055c1c:	687b      	ldr	r3, [r7, #4]
24055c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24055c20:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24055c22:	687b      	ldr	r3, [r7, #4]
24055c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24055c26:	f003 031f 	and.w	r3, r3, #31
24055c2a:	223f      	movs	r2, #63	; 0x3f
24055c2c:	409a      	lsls	r2, r3
24055c2e:	68bb      	ldr	r3, [r7, #8]
24055c30:	609a      	str	r2, [r3, #8]
24055c32:	e02a      	b.n	24055c8a <HAL_DMA_Abort+0x49a>
24055c34:	40020010 	.word	0x40020010
24055c38:	40020028 	.word	0x40020028
24055c3c:	40020040 	.word	0x40020040
24055c40:	40020058 	.word	0x40020058
24055c44:	40020070 	.word	0x40020070
24055c48:	40020088 	.word	0x40020088
24055c4c:	400200a0 	.word	0x400200a0
24055c50:	400200b8 	.word	0x400200b8
24055c54:	40020410 	.word	0x40020410
24055c58:	40020428 	.word	0x40020428
24055c5c:	40020440 	.word	0x40020440
24055c60:	40020458 	.word	0x40020458
24055c64:	40020470 	.word	0x40020470
24055c68:	40020488 	.word	0x40020488
24055c6c:	400204a0 	.word	0x400204a0
24055c70:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
24055c74:	687b      	ldr	r3, [r7, #4]
24055c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24055c78:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24055c7a:	687b      	ldr	r3, [r7, #4]
24055c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24055c7e:	f003 031f 	and.w	r3, r3, #31
24055c82:	2201      	movs	r2, #1
24055c84:	409a      	lsls	r2, r3
24055c86:	68fb      	ldr	r3, [r7, #12]
24055c88:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24055c8a:	687b      	ldr	r3, [r7, #4]
24055c8c:	681b      	ldr	r3, [r3, #0]
24055c8e:	4a4f      	ldr	r2, [pc, #316]	; (24055dcc <HAL_DMA_Abort+0x5dc>)
24055c90:	4293      	cmp	r3, r2
24055c92:	d072      	beq.n	24055d7a <HAL_DMA_Abort+0x58a>
24055c94:	687b      	ldr	r3, [r7, #4]
24055c96:	681b      	ldr	r3, [r3, #0]
24055c98:	4a4d      	ldr	r2, [pc, #308]	; (24055dd0 <HAL_DMA_Abort+0x5e0>)
24055c9a:	4293      	cmp	r3, r2
24055c9c:	d06d      	beq.n	24055d7a <HAL_DMA_Abort+0x58a>
24055c9e:	687b      	ldr	r3, [r7, #4]
24055ca0:	681b      	ldr	r3, [r3, #0]
24055ca2:	4a4c      	ldr	r2, [pc, #304]	; (24055dd4 <HAL_DMA_Abort+0x5e4>)
24055ca4:	4293      	cmp	r3, r2
24055ca6:	d068      	beq.n	24055d7a <HAL_DMA_Abort+0x58a>
24055ca8:	687b      	ldr	r3, [r7, #4]
24055caa:	681b      	ldr	r3, [r3, #0]
24055cac:	4a4a      	ldr	r2, [pc, #296]	; (24055dd8 <HAL_DMA_Abort+0x5e8>)
24055cae:	4293      	cmp	r3, r2
24055cb0:	d063      	beq.n	24055d7a <HAL_DMA_Abort+0x58a>
24055cb2:	687b      	ldr	r3, [r7, #4]
24055cb4:	681b      	ldr	r3, [r3, #0]
24055cb6:	4a49      	ldr	r2, [pc, #292]	; (24055ddc <HAL_DMA_Abort+0x5ec>)
24055cb8:	4293      	cmp	r3, r2
24055cba:	d05e      	beq.n	24055d7a <HAL_DMA_Abort+0x58a>
24055cbc:	687b      	ldr	r3, [r7, #4]
24055cbe:	681b      	ldr	r3, [r3, #0]
24055cc0:	4a47      	ldr	r2, [pc, #284]	; (24055de0 <HAL_DMA_Abort+0x5f0>)
24055cc2:	4293      	cmp	r3, r2
24055cc4:	d059      	beq.n	24055d7a <HAL_DMA_Abort+0x58a>
24055cc6:	687b      	ldr	r3, [r7, #4]
24055cc8:	681b      	ldr	r3, [r3, #0]
24055cca:	4a46      	ldr	r2, [pc, #280]	; (24055de4 <HAL_DMA_Abort+0x5f4>)
24055ccc:	4293      	cmp	r3, r2
24055cce:	d054      	beq.n	24055d7a <HAL_DMA_Abort+0x58a>
24055cd0:	687b      	ldr	r3, [r7, #4]
24055cd2:	681b      	ldr	r3, [r3, #0]
24055cd4:	4a44      	ldr	r2, [pc, #272]	; (24055de8 <HAL_DMA_Abort+0x5f8>)
24055cd6:	4293      	cmp	r3, r2
24055cd8:	d04f      	beq.n	24055d7a <HAL_DMA_Abort+0x58a>
24055cda:	687b      	ldr	r3, [r7, #4]
24055cdc:	681b      	ldr	r3, [r3, #0]
24055cde:	4a43      	ldr	r2, [pc, #268]	; (24055dec <HAL_DMA_Abort+0x5fc>)
24055ce0:	4293      	cmp	r3, r2
24055ce2:	d04a      	beq.n	24055d7a <HAL_DMA_Abort+0x58a>
24055ce4:	687b      	ldr	r3, [r7, #4]
24055ce6:	681b      	ldr	r3, [r3, #0]
24055ce8:	4a41      	ldr	r2, [pc, #260]	; (24055df0 <HAL_DMA_Abort+0x600>)
24055cea:	4293      	cmp	r3, r2
24055cec:	d045      	beq.n	24055d7a <HAL_DMA_Abort+0x58a>
24055cee:	687b      	ldr	r3, [r7, #4]
24055cf0:	681b      	ldr	r3, [r3, #0]
24055cf2:	4a40      	ldr	r2, [pc, #256]	; (24055df4 <HAL_DMA_Abort+0x604>)
24055cf4:	4293      	cmp	r3, r2
24055cf6:	d040      	beq.n	24055d7a <HAL_DMA_Abort+0x58a>
24055cf8:	687b      	ldr	r3, [r7, #4]
24055cfa:	681b      	ldr	r3, [r3, #0]
24055cfc:	4a3e      	ldr	r2, [pc, #248]	; (24055df8 <HAL_DMA_Abort+0x608>)
24055cfe:	4293      	cmp	r3, r2
24055d00:	d03b      	beq.n	24055d7a <HAL_DMA_Abort+0x58a>
24055d02:	687b      	ldr	r3, [r7, #4]
24055d04:	681b      	ldr	r3, [r3, #0]
24055d06:	4a3d      	ldr	r2, [pc, #244]	; (24055dfc <HAL_DMA_Abort+0x60c>)
24055d08:	4293      	cmp	r3, r2
24055d0a:	d036      	beq.n	24055d7a <HAL_DMA_Abort+0x58a>
24055d0c:	687b      	ldr	r3, [r7, #4]
24055d0e:	681b      	ldr	r3, [r3, #0]
24055d10:	4a3b      	ldr	r2, [pc, #236]	; (24055e00 <HAL_DMA_Abort+0x610>)
24055d12:	4293      	cmp	r3, r2
24055d14:	d031      	beq.n	24055d7a <HAL_DMA_Abort+0x58a>
24055d16:	687b      	ldr	r3, [r7, #4]
24055d18:	681b      	ldr	r3, [r3, #0]
24055d1a:	4a3a      	ldr	r2, [pc, #232]	; (24055e04 <HAL_DMA_Abort+0x614>)
24055d1c:	4293      	cmp	r3, r2
24055d1e:	d02c      	beq.n	24055d7a <HAL_DMA_Abort+0x58a>
24055d20:	687b      	ldr	r3, [r7, #4]
24055d22:	681b      	ldr	r3, [r3, #0]
24055d24:	4a38      	ldr	r2, [pc, #224]	; (24055e08 <HAL_DMA_Abort+0x618>)
24055d26:	4293      	cmp	r3, r2
24055d28:	d027      	beq.n	24055d7a <HAL_DMA_Abort+0x58a>
24055d2a:	687b      	ldr	r3, [r7, #4]
24055d2c:	681b      	ldr	r3, [r3, #0]
24055d2e:	4a37      	ldr	r2, [pc, #220]	; (24055e0c <HAL_DMA_Abort+0x61c>)
24055d30:	4293      	cmp	r3, r2
24055d32:	d022      	beq.n	24055d7a <HAL_DMA_Abort+0x58a>
24055d34:	687b      	ldr	r3, [r7, #4]
24055d36:	681b      	ldr	r3, [r3, #0]
24055d38:	4a35      	ldr	r2, [pc, #212]	; (24055e10 <HAL_DMA_Abort+0x620>)
24055d3a:	4293      	cmp	r3, r2
24055d3c:	d01d      	beq.n	24055d7a <HAL_DMA_Abort+0x58a>
24055d3e:	687b      	ldr	r3, [r7, #4]
24055d40:	681b      	ldr	r3, [r3, #0]
24055d42:	4a34      	ldr	r2, [pc, #208]	; (24055e14 <HAL_DMA_Abort+0x624>)
24055d44:	4293      	cmp	r3, r2
24055d46:	d018      	beq.n	24055d7a <HAL_DMA_Abort+0x58a>
24055d48:	687b      	ldr	r3, [r7, #4]
24055d4a:	681b      	ldr	r3, [r3, #0]
24055d4c:	4a32      	ldr	r2, [pc, #200]	; (24055e18 <HAL_DMA_Abort+0x628>)
24055d4e:	4293      	cmp	r3, r2
24055d50:	d013      	beq.n	24055d7a <HAL_DMA_Abort+0x58a>
24055d52:	687b      	ldr	r3, [r7, #4]
24055d54:	681b      	ldr	r3, [r3, #0]
24055d56:	4a31      	ldr	r2, [pc, #196]	; (24055e1c <HAL_DMA_Abort+0x62c>)
24055d58:	4293      	cmp	r3, r2
24055d5a:	d00e      	beq.n	24055d7a <HAL_DMA_Abort+0x58a>
24055d5c:	687b      	ldr	r3, [r7, #4]
24055d5e:	681b      	ldr	r3, [r3, #0]
24055d60:	4a2f      	ldr	r2, [pc, #188]	; (24055e20 <HAL_DMA_Abort+0x630>)
24055d62:	4293      	cmp	r3, r2
24055d64:	d009      	beq.n	24055d7a <HAL_DMA_Abort+0x58a>
24055d66:	687b      	ldr	r3, [r7, #4]
24055d68:	681b      	ldr	r3, [r3, #0]
24055d6a:	4a2e      	ldr	r2, [pc, #184]	; (24055e24 <HAL_DMA_Abort+0x634>)
24055d6c:	4293      	cmp	r3, r2
24055d6e:	d004      	beq.n	24055d7a <HAL_DMA_Abort+0x58a>
24055d70:	687b      	ldr	r3, [r7, #4]
24055d72:	681b      	ldr	r3, [r3, #0]
24055d74:	4a2c      	ldr	r2, [pc, #176]	; (24055e28 <HAL_DMA_Abort+0x638>)
24055d76:	4293      	cmp	r3, r2
24055d78:	d101      	bne.n	24055d7e <HAL_DMA_Abort+0x58e>
24055d7a:	2301      	movs	r3, #1
24055d7c:	e000      	b.n	24055d80 <HAL_DMA_Abort+0x590>
24055d7e:	2300      	movs	r3, #0
24055d80:	2b00      	cmp	r3, #0
24055d82:	d015      	beq.n	24055db0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24055d84:	687b      	ldr	r3, [r7, #4]
24055d86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24055d88:	687a      	ldr	r2, [r7, #4]
24055d8a:	6e92      	ldr	r2, [r2, #104]	; 0x68
24055d8c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
24055d8e:	687b      	ldr	r3, [r7, #4]
24055d90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24055d92:	2b00      	cmp	r3, #0
24055d94:	d00c      	beq.n	24055db0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
24055d96:	687b      	ldr	r3, [r7, #4]
24055d98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24055d9a:	681a      	ldr	r2, [r3, #0]
24055d9c:	687b      	ldr	r3, [r7, #4]
24055d9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24055da0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
24055da4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24055da6:	687b      	ldr	r3, [r7, #4]
24055da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24055daa:	687a      	ldr	r2, [r7, #4]
24055dac:	6f52      	ldr	r2, [r2, #116]	; 0x74
24055dae:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
24055db0:	687b      	ldr	r3, [r7, #4]
24055db2:	2201      	movs	r2, #1
24055db4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
24055db8:	687b      	ldr	r3, [r7, #4]
24055dba:	2200      	movs	r2, #0
24055dbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
24055dc0:	2300      	movs	r3, #0
}
24055dc2:	4618      	mov	r0, r3
24055dc4:	3718      	adds	r7, #24
24055dc6:	46bd      	mov	sp, r7
24055dc8:	bd80      	pop	{r7, pc}
24055dca:	bf00      	nop
24055dcc:	40020010 	.word	0x40020010
24055dd0:	40020028 	.word	0x40020028
24055dd4:	40020040 	.word	0x40020040
24055dd8:	40020058 	.word	0x40020058
24055ddc:	40020070 	.word	0x40020070
24055de0:	40020088 	.word	0x40020088
24055de4:	400200a0 	.word	0x400200a0
24055de8:	400200b8 	.word	0x400200b8
24055dec:	40020410 	.word	0x40020410
24055df0:	40020428 	.word	0x40020428
24055df4:	40020440 	.word	0x40020440
24055df8:	40020458 	.word	0x40020458
24055dfc:	40020470 	.word	0x40020470
24055e00:	40020488 	.word	0x40020488
24055e04:	400204a0 	.word	0x400204a0
24055e08:	400204b8 	.word	0x400204b8
24055e0c:	58025408 	.word	0x58025408
24055e10:	5802541c 	.word	0x5802541c
24055e14:	58025430 	.word	0x58025430
24055e18:	58025444 	.word	0x58025444
24055e1c:	58025458 	.word	0x58025458
24055e20:	5802546c 	.word	0x5802546c
24055e24:	58025480 	.word	0x58025480
24055e28:	58025494 	.word	0x58025494

24055e2c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
24055e2c:	b580      	push	{r7, lr}
24055e2e:	b084      	sub	sp, #16
24055e30:	af00      	add	r7, sp, #0
24055e32:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
24055e34:	687b      	ldr	r3, [r7, #4]
24055e36:	2b00      	cmp	r3, #0
24055e38:	d101      	bne.n	24055e3e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
24055e3a:	2301      	movs	r3, #1
24055e3c:	e205      	b.n	2405624a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
24055e3e:	687b      	ldr	r3, [r7, #4]
24055e40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
24055e44:	b2db      	uxtb	r3, r3
24055e46:	2b02      	cmp	r3, #2
24055e48:	d004      	beq.n	24055e54 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
24055e4a:	687b      	ldr	r3, [r7, #4]
24055e4c:	2280      	movs	r2, #128	; 0x80
24055e4e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
24055e50:	2301      	movs	r3, #1
24055e52:	e1fa      	b.n	2405624a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24055e54:	687b      	ldr	r3, [r7, #4]
24055e56:	681b      	ldr	r3, [r3, #0]
24055e58:	4a8c      	ldr	r2, [pc, #560]	; (2405608c <HAL_DMA_Abort_IT+0x260>)
24055e5a:	4293      	cmp	r3, r2
24055e5c:	d04a      	beq.n	24055ef4 <HAL_DMA_Abort_IT+0xc8>
24055e5e:	687b      	ldr	r3, [r7, #4]
24055e60:	681b      	ldr	r3, [r3, #0]
24055e62:	4a8b      	ldr	r2, [pc, #556]	; (24056090 <HAL_DMA_Abort_IT+0x264>)
24055e64:	4293      	cmp	r3, r2
24055e66:	d045      	beq.n	24055ef4 <HAL_DMA_Abort_IT+0xc8>
24055e68:	687b      	ldr	r3, [r7, #4]
24055e6a:	681b      	ldr	r3, [r3, #0]
24055e6c:	4a89      	ldr	r2, [pc, #548]	; (24056094 <HAL_DMA_Abort_IT+0x268>)
24055e6e:	4293      	cmp	r3, r2
24055e70:	d040      	beq.n	24055ef4 <HAL_DMA_Abort_IT+0xc8>
24055e72:	687b      	ldr	r3, [r7, #4]
24055e74:	681b      	ldr	r3, [r3, #0]
24055e76:	4a88      	ldr	r2, [pc, #544]	; (24056098 <HAL_DMA_Abort_IT+0x26c>)
24055e78:	4293      	cmp	r3, r2
24055e7a:	d03b      	beq.n	24055ef4 <HAL_DMA_Abort_IT+0xc8>
24055e7c:	687b      	ldr	r3, [r7, #4]
24055e7e:	681b      	ldr	r3, [r3, #0]
24055e80:	4a86      	ldr	r2, [pc, #536]	; (2405609c <HAL_DMA_Abort_IT+0x270>)
24055e82:	4293      	cmp	r3, r2
24055e84:	d036      	beq.n	24055ef4 <HAL_DMA_Abort_IT+0xc8>
24055e86:	687b      	ldr	r3, [r7, #4]
24055e88:	681b      	ldr	r3, [r3, #0]
24055e8a:	4a85      	ldr	r2, [pc, #532]	; (240560a0 <HAL_DMA_Abort_IT+0x274>)
24055e8c:	4293      	cmp	r3, r2
24055e8e:	d031      	beq.n	24055ef4 <HAL_DMA_Abort_IT+0xc8>
24055e90:	687b      	ldr	r3, [r7, #4]
24055e92:	681b      	ldr	r3, [r3, #0]
24055e94:	4a83      	ldr	r2, [pc, #524]	; (240560a4 <HAL_DMA_Abort_IT+0x278>)
24055e96:	4293      	cmp	r3, r2
24055e98:	d02c      	beq.n	24055ef4 <HAL_DMA_Abort_IT+0xc8>
24055e9a:	687b      	ldr	r3, [r7, #4]
24055e9c:	681b      	ldr	r3, [r3, #0]
24055e9e:	4a82      	ldr	r2, [pc, #520]	; (240560a8 <HAL_DMA_Abort_IT+0x27c>)
24055ea0:	4293      	cmp	r3, r2
24055ea2:	d027      	beq.n	24055ef4 <HAL_DMA_Abort_IT+0xc8>
24055ea4:	687b      	ldr	r3, [r7, #4]
24055ea6:	681b      	ldr	r3, [r3, #0]
24055ea8:	4a80      	ldr	r2, [pc, #512]	; (240560ac <HAL_DMA_Abort_IT+0x280>)
24055eaa:	4293      	cmp	r3, r2
24055eac:	d022      	beq.n	24055ef4 <HAL_DMA_Abort_IT+0xc8>
24055eae:	687b      	ldr	r3, [r7, #4]
24055eb0:	681b      	ldr	r3, [r3, #0]
24055eb2:	4a7f      	ldr	r2, [pc, #508]	; (240560b0 <HAL_DMA_Abort_IT+0x284>)
24055eb4:	4293      	cmp	r3, r2
24055eb6:	d01d      	beq.n	24055ef4 <HAL_DMA_Abort_IT+0xc8>
24055eb8:	687b      	ldr	r3, [r7, #4]
24055eba:	681b      	ldr	r3, [r3, #0]
24055ebc:	4a7d      	ldr	r2, [pc, #500]	; (240560b4 <HAL_DMA_Abort_IT+0x288>)
24055ebe:	4293      	cmp	r3, r2
24055ec0:	d018      	beq.n	24055ef4 <HAL_DMA_Abort_IT+0xc8>
24055ec2:	687b      	ldr	r3, [r7, #4]
24055ec4:	681b      	ldr	r3, [r3, #0]
24055ec6:	4a7c      	ldr	r2, [pc, #496]	; (240560b8 <HAL_DMA_Abort_IT+0x28c>)
24055ec8:	4293      	cmp	r3, r2
24055eca:	d013      	beq.n	24055ef4 <HAL_DMA_Abort_IT+0xc8>
24055ecc:	687b      	ldr	r3, [r7, #4]
24055ece:	681b      	ldr	r3, [r3, #0]
24055ed0:	4a7a      	ldr	r2, [pc, #488]	; (240560bc <HAL_DMA_Abort_IT+0x290>)
24055ed2:	4293      	cmp	r3, r2
24055ed4:	d00e      	beq.n	24055ef4 <HAL_DMA_Abort_IT+0xc8>
24055ed6:	687b      	ldr	r3, [r7, #4]
24055ed8:	681b      	ldr	r3, [r3, #0]
24055eda:	4a79      	ldr	r2, [pc, #484]	; (240560c0 <HAL_DMA_Abort_IT+0x294>)
24055edc:	4293      	cmp	r3, r2
24055ede:	d009      	beq.n	24055ef4 <HAL_DMA_Abort_IT+0xc8>
24055ee0:	687b      	ldr	r3, [r7, #4]
24055ee2:	681b      	ldr	r3, [r3, #0]
24055ee4:	4a77      	ldr	r2, [pc, #476]	; (240560c4 <HAL_DMA_Abort_IT+0x298>)
24055ee6:	4293      	cmp	r3, r2
24055ee8:	d004      	beq.n	24055ef4 <HAL_DMA_Abort_IT+0xc8>
24055eea:	687b      	ldr	r3, [r7, #4]
24055eec:	681b      	ldr	r3, [r3, #0]
24055eee:	4a76      	ldr	r2, [pc, #472]	; (240560c8 <HAL_DMA_Abort_IT+0x29c>)
24055ef0:	4293      	cmp	r3, r2
24055ef2:	d101      	bne.n	24055ef8 <HAL_DMA_Abort_IT+0xcc>
24055ef4:	2301      	movs	r3, #1
24055ef6:	e000      	b.n	24055efa <HAL_DMA_Abort_IT+0xce>
24055ef8:	2300      	movs	r3, #0
24055efa:	2b00      	cmp	r3, #0
24055efc:	d065      	beq.n	24055fca <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
24055efe:	687b      	ldr	r3, [r7, #4]
24055f00:	2204      	movs	r2, #4
24055f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
24055f06:	687b      	ldr	r3, [r7, #4]
24055f08:	681b      	ldr	r3, [r3, #0]
24055f0a:	4a60      	ldr	r2, [pc, #384]	; (2405608c <HAL_DMA_Abort_IT+0x260>)
24055f0c:	4293      	cmp	r3, r2
24055f0e:	d04a      	beq.n	24055fa6 <HAL_DMA_Abort_IT+0x17a>
24055f10:	687b      	ldr	r3, [r7, #4]
24055f12:	681b      	ldr	r3, [r3, #0]
24055f14:	4a5e      	ldr	r2, [pc, #376]	; (24056090 <HAL_DMA_Abort_IT+0x264>)
24055f16:	4293      	cmp	r3, r2
24055f18:	d045      	beq.n	24055fa6 <HAL_DMA_Abort_IT+0x17a>
24055f1a:	687b      	ldr	r3, [r7, #4]
24055f1c:	681b      	ldr	r3, [r3, #0]
24055f1e:	4a5d      	ldr	r2, [pc, #372]	; (24056094 <HAL_DMA_Abort_IT+0x268>)
24055f20:	4293      	cmp	r3, r2
24055f22:	d040      	beq.n	24055fa6 <HAL_DMA_Abort_IT+0x17a>
24055f24:	687b      	ldr	r3, [r7, #4]
24055f26:	681b      	ldr	r3, [r3, #0]
24055f28:	4a5b      	ldr	r2, [pc, #364]	; (24056098 <HAL_DMA_Abort_IT+0x26c>)
24055f2a:	4293      	cmp	r3, r2
24055f2c:	d03b      	beq.n	24055fa6 <HAL_DMA_Abort_IT+0x17a>
24055f2e:	687b      	ldr	r3, [r7, #4]
24055f30:	681b      	ldr	r3, [r3, #0]
24055f32:	4a5a      	ldr	r2, [pc, #360]	; (2405609c <HAL_DMA_Abort_IT+0x270>)
24055f34:	4293      	cmp	r3, r2
24055f36:	d036      	beq.n	24055fa6 <HAL_DMA_Abort_IT+0x17a>
24055f38:	687b      	ldr	r3, [r7, #4]
24055f3a:	681b      	ldr	r3, [r3, #0]
24055f3c:	4a58      	ldr	r2, [pc, #352]	; (240560a0 <HAL_DMA_Abort_IT+0x274>)
24055f3e:	4293      	cmp	r3, r2
24055f40:	d031      	beq.n	24055fa6 <HAL_DMA_Abort_IT+0x17a>
24055f42:	687b      	ldr	r3, [r7, #4]
24055f44:	681b      	ldr	r3, [r3, #0]
24055f46:	4a57      	ldr	r2, [pc, #348]	; (240560a4 <HAL_DMA_Abort_IT+0x278>)
24055f48:	4293      	cmp	r3, r2
24055f4a:	d02c      	beq.n	24055fa6 <HAL_DMA_Abort_IT+0x17a>
24055f4c:	687b      	ldr	r3, [r7, #4]
24055f4e:	681b      	ldr	r3, [r3, #0]
24055f50:	4a55      	ldr	r2, [pc, #340]	; (240560a8 <HAL_DMA_Abort_IT+0x27c>)
24055f52:	4293      	cmp	r3, r2
24055f54:	d027      	beq.n	24055fa6 <HAL_DMA_Abort_IT+0x17a>
24055f56:	687b      	ldr	r3, [r7, #4]
24055f58:	681b      	ldr	r3, [r3, #0]
24055f5a:	4a54      	ldr	r2, [pc, #336]	; (240560ac <HAL_DMA_Abort_IT+0x280>)
24055f5c:	4293      	cmp	r3, r2
24055f5e:	d022      	beq.n	24055fa6 <HAL_DMA_Abort_IT+0x17a>
24055f60:	687b      	ldr	r3, [r7, #4]
24055f62:	681b      	ldr	r3, [r3, #0]
24055f64:	4a52      	ldr	r2, [pc, #328]	; (240560b0 <HAL_DMA_Abort_IT+0x284>)
24055f66:	4293      	cmp	r3, r2
24055f68:	d01d      	beq.n	24055fa6 <HAL_DMA_Abort_IT+0x17a>
24055f6a:	687b      	ldr	r3, [r7, #4]
24055f6c:	681b      	ldr	r3, [r3, #0]
24055f6e:	4a51      	ldr	r2, [pc, #324]	; (240560b4 <HAL_DMA_Abort_IT+0x288>)
24055f70:	4293      	cmp	r3, r2
24055f72:	d018      	beq.n	24055fa6 <HAL_DMA_Abort_IT+0x17a>
24055f74:	687b      	ldr	r3, [r7, #4]
24055f76:	681b      	ldr	r3, [r3, #0]
24055f78:	4a4f      	ldr	r2, [pc, #316]	; (240560b8 <HAL_DMA_Abort_IT+0x28c>)
24055f7a:	4293      	cmp	r3, r2
24055f7c:	d013      	beq.n	24055fa6 <HAL_DMA_Abort_IT+0x17a>
24055f7e:	687b      	ldr	r3, [r7, #4]
24055f80:	681b      	ldr	r3, [r3, #0]
24055f82:	4a4e      	ldr	r2, [pc, #312]	; (240560bc <HAL_DMA_Abort_IT+0x290>)
24055f84:	4293      	cmp	r3, r2
24055f86:	d00e      	beq.n	24055fa6 <HAL_DMA_Abort_IT+0x17a>
24055f88:	687b      	ldr	r3, [r7, #4]
24055f8a:	681b      	ldr	r3, [r3, #0]
24055f8c:	4a4c      	ldr	r2, [pc, #304]	; (240560c0 <HAL_DMA_Abort_IT+0x294>)
24055f8e:	4293      	cmp	r3, r2
24055f90:	d009      	beq.n	24055fa6 <HAL_DMA_Abort_IT+0x17a>
24055f92:	687b      	ldr	r3, [r7, #4]
24055f94:	681b      	ldr	r3, [r3, #0]
24055f96:	4a4b      	ldr	r2, [pc, #300]	; (240560c4 <HAL_DMA_Abort_IT+0x298>)
24055f98:	4293      	cmp	r3, r2
24055f9a:	d004      	beq.n	24055fa6 <HAL_DMA_Abort_IT+0x17a>
24055f9c:	687b      	ldr	r3, [r7, #4]
24055f9e:	681b      	ldr	r3, [r3, #0]
24055fa0:	4a49      	ldr	r2, [pc, #292]	; (240560c8 <HAL_DMA_Abort_IT+0x29c>)
24055fa2:	4293      	cmp	r3, r2
24055fa4:	d108      	bne.n	24055fb8 <HAL_DMA_Abort_IT+0x18c>
24055fa6:	687b      	ldr	r3, [r7, #4]
24055fa8:	681b      	ldr	r3, [r3, #0]
24055faa:	681a      	ldr	r2, [r3, #0]
24055fac:	687b      	ldr	r3, [r7, #4]
24055fae:	681b      	ldr	r3, [r3, #0]
24055fb0:	f022 0201 	bic.w	r2, r2, #1
24055fb4:	601a      	str	r2, [r3, #0]
24055fb6:	e147      	b.n	24056248 <HAL_DMA_Abort_IT+0x41c>
24055fb8:	687b      	ldr	r3, [r7, #4]
24055fba:	681b      	ldr	r3, [r3, #0]
24055fbc:	681a      	ldr	r2, [r3, #0]
24055fbe:	687b      	ldr	r3, [r7, #4]
24055fc0:	681b      	ldr	r3, [r3, #0]
24055fc2:	f022 0201 	bic.w	r2, r2, #1
24055fc6:	601a      	str	r2, [r3, #0]
24055fc8:	e13e      	b.n	24056248 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
24055fca:	687b      	ldr	r3, [r7, #4]
24055fcc:	681b      	ldr	r3, [r3, #0]
24055fce:	681a      	ldr	r2, [r3, #0]
24055fd0:	687b      	ldr	r3, [r7, #4]
24055fd2:	681b      	ldr	r3, [r3, #0]
24055fd4:	f022 020e 	bic.w	r2, r2, #14
24055fd8:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
24055fda:	687b      	ldr	r3, [r7, #4]
24055fdc:	681b      	ldr	r3, [r3, #0]
24055fde:	4a2b      	ldr	r2, [pc, #172]	; (2405608c <HAL_DMA_Abort_IT+0x260>)
24055fe0:	4293      	cmp	r3, r2
24055fe2:	d04a      	beq.n	2405607a <HAL_DMA_Abort_IT+0x24e>
24055fe4:	687b      	ldr	r3, [r7, #4]
24055fe6:	681b      	ldr	r3, [r3, #0]
24055fe8:	4a29      	ldr	r2, [pc, #164]	; (24056090 <HAL_DMA_Abort_IT+0x264>)
24055fea:	4293      	cmp	r3, r2
24055fec:	d045      	beq.n	2405607a <HAL_DMA_Abort_IT+0x24e>
24055fee:	687b      	ldr	r3, [r7, #4]
24055ff0:	681b      	ldr	r3, [r3, #0]
24055ff2:	4a28      	ldr	r2, [pc, #160]	; (24056094 <HAL_DMA_Abort_IT+0x268>)
24055ff4:	4293      	cmp	r3, r2
24055ff6:	d040      	beq.n	2405607a <HAL_DMA_Abort_IT+0x24e>
24055ff8:	687b      	ldr	r3, [r7, #4]
24055ffa:	681b      	ldr	r3, [r3, #0]
24055ffc:	4a26      	ldr	r2, [pc, #152]	; (24056098 <HAL_DMA_Abort_IT+0x26c>)
24055ffe:	4293      	cmp	r3, r2
24056000:	d03b      	beq.n	2405607a <HAL_DMA_Abort_IT+0x24e>
24056002:	687b      	ldr	r3, [r7, #4]
24056004:	681b      	ldr	r3, [r3, #0]
24056006:	4a25      	ldr	r2, [pc, #148]	; (2405609c <HAL_DMA_Abort_IT+0x270>)
24056008:	4293      	cmp	r3, r2
2405600a:	d036      	beq.n	2405607a <HAL_DMA_Abort_IT+0x24e>
2405600c:	687b      	ldr	r3, [r7, #4]
2405600e:	681b      	ldr	r3, [r3, #0]
24056010:	4a23      	ldr	r2, [pc, #140]	; (240560a0 <HAL_DMA_Abort_IT+0x274>)
24056012:	4293      	cmp	r3, r2
24056014:	d031      	beq.n	2405607a <HAL_DMA_Abort_IT+0x24e>
24056016:	687b      	ldr	r3, [r7, #4]
24056018:	681b      	ldr	r3, [r3, #0]
2405601a:	4a22      	ldr	r2, [pc, #136]	; (240560a4 <HAL_DMA_Abort_IT+0x278>)
2405601c:	4293      	cmp	r3, r2
2405601e:	d02c      	beq.n	2405607a <HAL_DMA_Abort_IT+0x24e>
24056020:	687b      	ldr	r3, [r7, #4]
24056022:	681b      	ldr	r3, [r3, #0]
24056024:	4a20      	ldr	r2, [pc, #128]	; (240560a8 <HAL_DMA_Abort_IT+0x27c>)
24056026:	4293      	cmp	r3, r2
24056028:	d027      	beq.n	2405607a <HAL_DMA_Abort_IT+0x24e>
2405602a:	687b      	ldr	r3, [r7, #4]
2405602c:	681b      	ldr	r3, [r3, #0]
2405602e:	4a1f      	ldr	r2, [pc, #124]	; (240560ac <HAL_DMA_Abort_IT+0x280>)
24056030:	4293      	cmp	r3, r2
24056032:	d022      	beq.n	2405607a <HAL_DMA_Abort_IT+0x24e>
24056034:	687b      	ldr	r3, [r7, #4]
24056036:	681b      	ldr	r3, [r3, #0]
24056038:	4a1d      	ldr	r2, [pc, #116]	; (240560b0 <HAL_DMA_Abort_IT+0x284>)
2405603a:	4293      	cmp	r3, r2
2405603c:	d01d      	beq.n	2405607a <HAL_DMA_Abort_IT+0x24e>
2405603e:	687b      	ldr	r3, [r7, #4]
24056040:	681b      	ldr	r3, [r3, #0]
24056042:	4a1c      	ldr	r2, [pc, #112]	; (240560b4 <HAL_DMA_Abort_IT+0x288>)
24056044:	4293      	cmp	r3, r2
24056046:	d018      	beq.n	2405607a <HAL_DMA_Abort_IT+0x24e>
24056048:	687b      	ldr	r3, [r7, #4]
2405604a:	681b      	ldr	r3, [r3, #0]
2405604c:	4a1a      	ldr	r2, [pc, #104]	; (240560b8 <HAL_DMA_Abort_IT+0x28c>)
2405604e:	4293      	cmp	r3, r2
24056050:	d013      	beq.n	2405607a <HAL_DMA_Abort_IT+0x24e>
24056052:	687b      	ldr	r3, [r7, #4]
24056054:	681b      	ldr	r3, [r3, #0]
24056056:	4a19      	ldr	r2, [pc, #100]	; (240560bc <HAL_DMA_Abort_IT+0x290>)
24056058:	4293      	cmp	r3, r2
2405605a:	d00e      	beq.n	2405607a <HAL_DMA_Abort_IT+0x24e>
2405605c:	687b      	ldr	r3, [r7, #4]
2405605e:	681b      	ldr	r3, [r3, #0]
24056060:	4a17      	ldr	r2, [pc, #92]	; (240560c0 <HAL_DMA_Abort_IT+0x294>)
24056062:	4293      	cmp	r3, r2
24056064:	d009      	beq.n	2405607a <HAL_DMA_Abort_IT+0x24e>
24056066:	687b      	ldr	r3, [r7, #4]
24056068:	681b      	ldr	r3, [r3, #0]
2405606a:	4a16      	ldr	r2, [pc, #88]	; (240560c4 <HAL_DMA_Abort_IT+0x298>)
2405606c:	4293      	cmp	r3, r2
2405606e:	d004      	beq.n	2405607a <HAL_DMA_Abort_IT+0x24e>
24056070:	687b      	ldr	r3, [r7, #4]
24056072:	681b      	ldr	r3, [r3, #0]
24056074:	4a14      	ldr	r2, [pc, #80]	; (240560c8 <HAL_DMA_Abort_IT+0x29c>)
24056076:	4293      	cmp	r3, r2
24056078:	d128      	bne.n	240560cc <HAL_DMA_Abort_IT+0x2a0>
2405607a:	687b      	ldr	r3, [r7, #4]
2405607c:	681b      	ldr	r3, [r3, #0]
2405607e:	681a      	ldr	r2, [r3, #0]
24056080:	687b      	ldr	r3, [r7, #4]
24056082:	681b      	ldr	r3, [r3, #0]
24056084:	f022 0201 	bic.w	r2, r2, #1
24056088:	601a      	str	r2, [r3, #0]
2405608a:	e027      	b.n	240560dc <HAL_DMA_Abort_IT+0x2b0>
2405608c:	40020010 	.word	0x40020010
24056090:	40020028 	.word	0x40020028
24056094:	40020040 	.word	0x40020040
24056098:	40020058 	.word	0x40020058
2405609c:	40020070 	.word	0x40020070
240560a0:	40020088 	.word	0x40020088
240560a4:	400200a0 	.word	0x400200a0
240560a8:	400200b8 	.word	0x400200b8
240560ac:	40020410 	.word	0x40020410
240560b0:	40020428 	.word	0x40020428
240560b4:	40020440 	.word	0x40020440
240560b8:	40020458 	.word	0x40020458
240560bc:	40020470 	.word	0x40020470
240560c0:	40020488 	.word	0x40020488
240560c4:	400204a0 	.word	0x400204a0
240560c8:	400204b8 	.word	0x400204b8
240560cc:	687b      	ldr	r3, [r7, #4]
240560ce:	681b      	ldr	r3, [r3, #0]
240560d0:	681a      	ldr	r2, [r3, #0]
240560d2:	687b      	ldr	r3, [r7, #4]
240560d4:	681b      	ldr	r3, [r3, #0]
240560d6:	f022 0201 	bic.w	r2, r2, #1
240560da:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240560dc:	687b      	ldr	r3, [r7, #4]
240560de:	681b      	ldr	r3, [r3, #0]
240560e0:	4a5c      	ldr	r2, [pc, #368]	; (24056254 <HAL_DMA_Abort_IT+0x428>)
240560e2:	4293      	cmp	r3, r2
240560e4:	d072      	beq.n	240561cc <HAL_DMA_Abort_IT+0x3a0>
240560e6:	687b      	ldr	r3, [r7, #4]
240560e8:	681b      	ldr	r3, [r3, #0]
240560ea:	4a5b      	ldr	r2, [pc, #364]	; (24056258 <HAL_DMA_Abort_IT+0x42c>)
240560ec:	4293      	cmp	r3, r2
240560ee:	d06d      	beq.n	240561cc <HAL_DMA_Abort_IT+0x3a0>
240560f0:	687b      	ldr	r3, [r7, #4]
240560f2:	681b      	ldr	r3, [r3, #0]
240560f4:	4a59      	ldr	r2, [pc, #356]	; (2405625c <HAL_DMA_Abort_IT+0x430>)
240560f6:	4293      	cmp	r3, r2
240560f8:	d068      	beq.n	240561cc <HAL_DMA_Abort_IT+0x3a0>
240560fa:	687b      	ldr	r3, [r7, #4]
240560fc:	681b      	ldr	r3, [r3, #0]
240560fe:	4a58      	ldr	r2, [pc, #352]	; (24056260 <HAL_DMA_Abort_IT+0x434>)
24056100:	4293      	cmp	r3, r2
24056102:	d063      	beq.n	240561cc <HAL_DMA_Abort_IT+0x3a0>
24056104:	687b      	ldr	r3, [r7, #4]
24056106:	681b      	ldr	r3, [r3, #0]
24056108:	4a56      	ldr	r2, [pc, #344]	; (24056264 <HAL_DMA_Abort_IT+0x438>)
2405610a:	4293      	cmp	r3, r2
2405610c:	d05e      	beq.n	240561cc <HAL_DMA_Abort_IT+0x3a0>
2405610e:	687b      	ldr	r3, [r7, #4]
24056110:	681b      	ldr	r3, [r3, #0]
24056112:	4a55      	ldr	r2, [pc, #340]	; (24056268 <HAL_DMA_Abort_IT+0x43c>)
24056114:	4293      	cmp	r3, r2
24056116:	d059      	beq.n	240561cc <HAL_DMA_Abort_IT+0x3a0>
24056118:	687b      	ldr	r3, [r7, #4]
2405611a:	681b      	ldr	r3, [r3, #0]
2405611c:	4a53      	ldr	r2, [pc, #332]	; (2405626c <HAL_DMA_Abort_IT+0x440>)
2405611e:	4293      	cmp	r3, r2
24056120:	d054      	beq.n	240561cc <HAL_DMA_Abort_IT+0x3a0>
24056122:	687b      	ldr	r3, [r7, #4]
24056124:	681b      	ldr	r3, [r3, #0]
24056126:	4a52      	ldr	r2, [pc, #328]	; (24056270 <HAL_DMA_Abort_IT+0x444>)
24056128:	4293      	cmp	r3, r2
2405612a:	d04f      	beq.n	240561cc <HAL_DMA_Abort_IT+0x3a0>
2405612c:	687b      	ldr	r3, [r7, #4]
2405612e:	681b      	ldr	r3, [r3, #0]
24056130:	4a50      	ldr	r2, [pc, #320]	; (24056274 <HAL_DMA_Abort_IT+0x448>)
24056132:	4293      	cmp	r3, r2
24056134:	d04a      	beq.n	240561cc <HAL_DMA_Abort_IT+0x3a0>
24056136:	687b      	ldr	r3, [r7, #4]
24056138:	681b      	ldr	r3, [r3, #0]
2405613a:	4a4f      	ldr	r2, [pc, #316]	; (24056278 <HAL_DMA_Abort_IT+0x44c>)
2405613c:	4293      	cmp	r3, r2
2405613e:	d045      	beq.n	240561cc <HAL_DMA_Abort_IT+0x3a0>
24056140:	687b      	ldr	r3, [r7, #4]
24056142:	681b      	ldr	r3, [r3, #0]
24056144:	4a4d      	ldr	r2, [pc, #308]	; (2405627c <HAL_DMA_Abort_IT+0x450>)
24056146:	4293      	cmp	r3, r2
24056148:	d040      	beq.n	240561cc <HAL_DMA_Abort_IT+0x3a0>
2405614a:	687b      	ldr	r3, [r7, #4]
2405614c:	681b      	ldr	r3, [r3, #0]
2405614e:	4a4c      	ldr	r2, [pc, #304]	; (24056280 <HAL_DMA_Abort_IT+0x454>)
24056150:	4293      	cmp	r3, r2
24056152:	d03b      	beq.n	240561cc <HAL_DMA_Abort_IT+0x3a0>
24056154:	687b      	ldr	r3, [r7, #4]
24056156:	681b      	ldr	r3, [r3, #0]
24056158:	4a4a      	ldr	r2, [pc, #296]	; (24056284 <HAL_DMA_Abort_IT+0x458>)
2405615a:	4293      	cmp	r3, r2
2405615c:	d036      	beq.n	240561cc <HAL_DMA_Abort_IT+0x3a0>
2405615e:	687b      	ldr	r3, [r7, #4]
24056160:	681b      	ldr	r3, [r3, #0]
24056162:	4a49      	ldr	r2, [pc, #292]	; (24056288 <HAL_DMA_Abort_IT+0x45c>)
24056164:	4293      	cmp	r3, r2
24056166:	d031      	beq.n	240561cc <HAL_DMA_Abort_IT+0x3a0>
24056168:	687b      	ldr	r3, [r7, #4]
2405616a:	681b      	ldr	r3, [r3, #0]
2405616c:	4a47      	ldr	r2, [pc, #284]	; (2405628c <HAL_DMA_Abort_IT+0x460>)
2405616e:	4293      	cmp	r3, r2
24056170:	d02c      	beq.n	240561cc <HAL_DMA_Abort_IT+0x3a0>
24056172:	687b      	ldr	r3, [r7, #4]
24056174:	681b      	ldr	r3, [r3, #0]
24056176:	4a46      	ldr	r2, [pc, #280]	; (24056290 <HAL_DMA_Abort_IT+0x464>)
24056178:	4293      	cmp	r3, r2
2405617a:	d027      	beq.n	240561cc <HAL_DMA_Abort_IT+0x3a0>
2405617c:	687b      	ldr	r3, [r7, #4]
2405617e:	681b      	ldr	r3, [r3, #0]
24056180:	4a44      	ldr	r2, [pc, #272]	; (24056294 <HAL_DMA_Abort_IT+0x468>)
24056182:	4293      	cmp	r3, r2
24056184:	d022      	beq.n	240561cc <HAL_DMA_Abort_IT+0x3a0>
24056186:	687b      	ldr	r3, [r7, #4]
24056188:	681b      	ldr	r3, [r3, #0]
2405618a:	4a43      	ldr	r2, [pc, #268]	; (24056298 <HAL_DMA_Abort_IT+0x46c>)
2405618c:	4293      	cmp	r3, r2
2405618e:	d01d      	beq.n	240561cc <HAL_DMA_Abort_IT+0x3a0>
24056190:	687b      	ldr	r3, [r7, #4]
24056192:	681b      	ldr	r3, [r3, #0]
24056194:	4a41      	ldr	r2, [pc, #260]	; (2405629c <HAL_DMA_Abort_IT+0x470>)
24056196:	4293      	cmp	r3, r2
24056198:	d018      	beq.n	240561cc <HAL_DMA_Abort_IT+0x3a0>
2405619a:	687b      	ldr	r3, [r7, #4]
2405619c:	681b      	ldr	r3, [r3, #0]
2405619e:	4a40      	ldr	r2, [pc, #256]	; (240562a0 <HAL_DMA_Abort_IT+0x474>)
240561a0:	4293      	cmp	r3, r2
240561a2:	d013      	beq.n	240561cc <HAL_DMA_Abort_IT+0x3a0>
240561a4:	687b      	ldr	r3, [r7, #4]
240561a6:	681b      	ldr	r3, [r3, #0]
240561a8:	4a3e      	ldr	r2, [pc, #248]	; (240562a4 <HAL_DMA_Abort_IT+0x478>)
240561aa:	4293      	cmp	r3, r2
240561ac:	d00e      	beq.n	240561cc <HAL_DMA_Abort_IT+0x3a0>
240561ae:	687b      	ldr	r3, [r7, #4]
240561b0:	681b      	ldr	r3, [r3, #0]
240561b2:	4a3d      	ldr	r2, [pc, #244]	; (240562a8 <HAL_DMA_Abort_IT+0x47c>)
240561b4:	4293      	cmp	r3, r2
240561b6:	d009      	beq.n	240561cc <HAL_DMA_Abort_IT+0x3a0>
240561b8:	687b      	ldr	r3, [r7, #4]
240561ba:	681b      	ldr	r3, [r3, #0]
240561bc:	4a3b      	ldr	r2, [pc, #236]	; (240562ac <HAL_DMA_Abort_IT+0x480>)
240561be:	4293      	cmp	r3, r2
240561c0:	d004      	beq.n	240561cc <HAL_DMA_Abort_IT+0x3a0>
240561c2:	687b      	ldr	r3, [r7, #4]
240561c4:	681b      	ldr	r3, [r3, #0]
240561c6:	4a3a      	ldr	r2, [pc, #232]	; (240562b0 <HAL_DMA_Abort_IT+0x484>)
240561c8:	4293      	cmp	r3, r2
240561ca:	d101      	bne.n	240561d0 <HAL_DMA_Abort_IT+0x3a4>
240561cc:	2301      	movs	r3, #1
240561ce:	e000      	b.n	240561d2 <HAL_DMA_Abort_IT+0x3a6>
240561d0:	2300      	movs	r3, #0
240561d2:	2b00      	cmp	r3, #0
240561d4:	d028      	beq.n	24056228 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
240561d6:	687b      	ldr	r3, [r7, #4]
240561d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
240561da:	681a      	ldr	r2, [r3, #0]
240561dc:	687b      	ldr	r3, [r7, #4]
240561de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
240561e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
240561e4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
240561e6:	687b      	ldr	r3, [r7, #4]
240561e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240561ea:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
240561ec:	687b      	ldr	r3, [r7, #4]
240561ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240561f0:	f003 031f 	and.w	r3, r3, #31
240561f4:	2201      	movs	r2, #1
240561f6:	409a      	lsls	r2, r3
240561f8:	68fb      	ldr	r3, [r7, #12]
240561fa:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
240561fc:	687b      	ldr	r3, [r7, #4]
240561fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24056200:	687a      	ldr	r2, [r7, #4]
24056202:	6e92      	ldr	r2, [r2, #104]	; 0x68
24056204:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
24056206:	687b      	ldr	r3, [r7, #4]
24056208:	6edb      	ldr	r3, [r3, #108]	; 0x6c
2405620a:	2b00      	cmp	r3, #0
2405620c:	d00c      	beq.n	24056228 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
2405620e:	687b      	ldr	r3, [r7, #4]
24056210:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24056212:	681a      	ldr	r2, [r3, #0]
24056214:	687b      	ldr	r3, [r7, #4]
24056216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24056218:	f422 7280 	bic.w	r2, r2, #256	; 0x100
2405621c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
2405621e:	687b      	ldr	r3, [r7, #4]
24056220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24056222:	687a      	ldr	r2, [r7, #4]
24056224:	6f52      	ldr	r2, [r2, #116]	; 0x74
24056226:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
24056228:	687b      	ldr	r3, [r7, #4]
2405622a:	2201      	movs	r2, #1
2405622c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
24056230:	687b      	ldr	r3, [r7, #4]
24056232:	2200      	movs	r2, #0
24056234:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
24056238:	687b      	ldr	r3, [r7, #4]
2405623a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405623c:	2b00      	cmp	r3, #0
2405623e:	d003      	beq.n	24056248 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
24056240:	687b      	ldr	r3, [r7, #4]
24056242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24056244:	6878      	ldr	r0, [r7, #4]
24056246:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
24056248:	2300      	movs	r3, #0
}
2405624a:	4618      	mov	r0, r3
2405624c:	3710      	adds	r7, #16
2405624e:	46bd      	mov	sp, r7
24056250:	bd80      	pop	{r7, pc}
24056252:	bf00      	nop
24056254:	40020010 	.word	0x40020010
24056258:	40020028 	.word	0x40020028
2405625c:	40020040 	.word	0x40020040
24056260:	40020058 	.word	0x40020058
24056264:	40020070 	.word	0x40020070
24056268:	40020088 	.word	0x40020088
2405626c:	400200a0 	.word	0x400200a0
24056270:	400200b8 	.word	0x400200b8
24056274:	40020410 	.word	0x40020410
24056278:	40020428 	.word	0x40020428
2405627c:	40020440 	.word	0x40020440
24056280:	40020458 	.word	0x40020458
24056284:	40020470 	.word	0x40020470
24056288:	40020488 	.word	0x40020488
2405628c:	400204a0 	.word	0x400204a0
24056290:	400204b8 	.word	0x400204b8
24056294:	58025408 	.word	0x58025408
24056298:	5802541c 	.word	0x5802541c
2405629c:	58025430 	.word	0x58025430
240562a0:	58025444 	.word	0x58025444
240562a4:	58025458 	.word	0x58025458
240562a8:	5802546c 	.word	0x5802546c
240562ac:	58025480 	.word	0x58025480
240562b0:	58025494 	.word	0x58025494

240562b4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
240562b4:	b580      	push	{r7, lr}
240562b6:	b08a      	sub	sp, #40	; 0x28
240562b8:	af00      	add	r7, sp, #0
240562ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
240562bc:	2300      	movs	r3, #0
240562be:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
240562c0:	4b67      	ldr	r3, [pc, #412]	; (24056460 <HAL_DMA_IRQHandler+0x1ac>)
240562c2:	681b      	ldr	r3, [r3, #0]
240562c4:	4a67      	ldr	r2, [pc, #412]	; (24056464 <HAL_DMA_IRQHandler+0x1b0>)
240562c6:	fba2 2303 	umull	r2, r3, r2, r3
240562ca:	0a9b      	lsrs	r3, r3, #10
240562cc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
240562ce:	687b      	ldr	r3, [r7, #4]
240562d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240562d2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
240562d4:	687b      	ldr	r3, [r7, #4]
240562d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240562d8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
240562da:	6a3b      	ldr	r3, [r7, #32]
240562dc:	681b      	ldr	r3, [r3, #0]
240562de:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
240562e0:	69fb      	ldr	r3, [r7, #28]
240562e2:	681b      	ldr	r3, [r3, #0]
240562e4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
240562e6:	687b      	ldr	r3, [r7, #4]
240562e8:	681b      	ldr	r3, [r3, #0]
240562ea:	4a5f      	ldr	r2, [pc, #380]	; (24056468 <HAL_DMA_IRQHandler+0x1b4>)
240562ec:	4293      	cmp	r3, r2
240562ee:	d04a      	beq.n	24056386 <HAL_DMA_IRQHandler+0xd2>
240562f0:	687b      	ldr	r3, [r7, #4]
240562f2:	681b      	ldr	r3, [r3, #0]
240562f4:	4a5d      	ldr	r2, [pc, #372]	; (2405646c <HAL_DMA_IRQHandler+0x1b8>)
240562f6:	4293      	cmp	r3, r2
240562f8:	d045      	beq.n	24056386 <HAL_DMA_IRQHandler+0xd2>
240562fa:	687b      	ldr	r3, [r7, #4]
240562fc:	681b      	ldr	r3, [r3, #0]
240562fe:	4a5c      	ldr	r2, [pc, #368]	; (24056470 <HAL_DMA_IRQHandler+0x1bc>)
24056300:	4293      	cmp	r3, r2
24056302:	d040      	beq.n	24056386 <HAL_DMA_IRQHandler+0xd2>
24056304:	687b      	ldr	r3, [r7, #4]
24056306:	681b      	ldr	r3, [r3, #0]
24056308:	4a5a      	ldr	r2, [pc, #360]	; (24056474 <HAL_DMA_IRQHandler+0x1c0>)
2405630a:	4293      	cmp	r3, r2
2405630c:	d03b      	beq.n	24056386 <HAL_DMA_IRQHandler+0xd2>
2405630e:	687b      	ldr	r3, [r7, #4]
24056310:	681b      	ldr	r3, [r3, #0]
24056312:	4a59      	ldr	r2, [pc, #356]	; (24056478 <HAL_DMA_IRQHandler+0x1c4>)
24056314:	4293      	cmp	r3, r2
24056316:	d036      	beq.n	24056386 <HAL_DMA_IRQHandler+0xd2>
24056318:	687b      	ldr	r3, [r7, #4]
2405631a:	681b      	ldr	r3, [r3, #0]
2405631c:	4a57      	ldr	r2, [pc, #348]	; (2405647c <HAL_DMA_IRQHandler+0x1c8>)
2405631e:	4293      	cmp	r3, r2
24056320:	d031      	beq.n	24056386 <HAL_DMA_IRQHandler+0xd2>
24056322:	687b      	ldr	r3, [r7, #4]
24056324:	681b      	ldr	r3, [r3, #0]
24056326:	4a56      	ldr	r2, [pc, #344]	; (24056480 <HAL_DMA_IRQHandler+0x1cc>)
24056328:	4293      	cmp	r3, r2
2405632a:	d02c      	beq.n	24056386 <HAL_DMA_IRQHandler+0xd2>
2405632c:	687b      	ldr	r3, [r7, #4]
2405632e:	681b      	ldr	r3, [r3, #0]
24056330:	4a54      	ldr	r2, [pc, #336]	; (24056484 <HAL_DMA_IRQHandler+0x1d0>)
24056332:	4293      	cmp	r3, r2
24056334:	d027      	beq.n	24056386 <HAL_DMA_IRQHandler+0xd2>
24056336:	687b      	ldr	r3, [r7, #4]
24056338:	681b      	ldr	r3, [r3, #0]
2405633a:	4a53      	ldr	r2, [pc, #332]	; (24056488 <HAL_DMA_IRQHandler+0x1d4>)
2405633c:	4293      	cmp	r3, r2
2405633e:	d022      	beq.n	24056386 <HAL_DMA_IRQHandler+0xd2>
24056340:	687b      	ldr	r3, [r7, #4]
24056342:	681b      	ldr	r3, [r3, #0]
24056344:	4a51      	ldr	r2, [pc, #324]	; (2405648c <HAL_DMA_IRQHandler+0x1d8>)
24056346:	4293      	cmp	r3, r2
24056348:	d01d      	beq.n	24056386 <HAL_DMA_IRQHandler+0xd2>
2405634a:	687b      	ldr	r3, [r7, #4]
2405634c:	681b      	ldr	r3, [r3, #0]
2405634e:	4a50      	ldr	r2, [pc, #320]	; (24056490 <HAL_DMA_IRQHandler+0x1dc>)
24056350:	4293      	cmp	r3, r2
24056352:	d018      	beq.n	24056386 <HAL_DMA_IRQHandler+0xd2>
24056354:	687b      	ldr	r3, [r7, #4]
24056356:	681b      	ldr	r3, [r3, #0]
24056358:	4a4e      	ldr	r2, [pc, #312]	; (24056494 <HAL_DMA_IRQHandler+0x1e0>)
2405635a:	4293      	cmp	r3, r2
2405635c:	d013      	beq.n	24056386 <HAL_DMA_IRQHandler+0xd2>
2405635e:	687b      	ldr	r3, [r7, #4]
24056360:	681b      	ldr	r3, [r3, #0]
24056362:	4a4d      	ldr	r2, [pc, #308]	; (24056498 <HAL_DMA_IRQHandler+0x1e4>)
24056364:	4293      	cmp	r3, r2
24056366:	d00e      	beq.n	24056386 <HAL_DMA_IRQHandler+0xd2>
24056368:	687b      	ldr	r3, [r7, #4]
2405636a:	681b      	ldr	r3, [r3, #0]
2405636c:	4a4b      	ldr	r2, [pc, #300]	; (2405649c <HAL_DMA_IRQHandler+0x1e8>)
2405636e:	4293      	cmp	r3, r2
24056370:	d009      	beq.n	24056386 <HAL_DMA_IRQHandler+0xd2>
24056372:	687b      	ldr	r3, [r7, #4]
24056374:	681b      	ldr	r3, [r3, #0]
24056376:	4a4a      	ldr	r2, [pc, #296]	; (240564a0 <HAL_DMA_IRQHandler+0x1ec>)
24056378:	4293      	cmp	r3, r2
2405637a:	d004      	beq.n	24056386 <HAL_DMA_IRQHandler+0xd2>
2405637c:	687b      	ldr	r3, [r7, #4]
2405637e:	681b      	ldr	r3, [r3, #0]
24056380:	4a48      	ldr	r2, [pc, #288]	; (240564a4 <HAL_DMA_IRQHandler+0x1f0>)
24056382:	4293      	cmp	r3, r2
24056384:	d101      	bne.n	2405638a <HAL_DMA_IRQHandler+0xd6>
24056386:	2301      	movs	r3, #1
24056388:	e000      	b.n	2405638c <HAL_DMA_IRQHandler+0xd8>
2405638a:	2300      	movs	r3, #0
2405638c:	2b00      	cmp	r3, #0
2405638e:	f000 842b 	beq.w	24056be8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24056392:	687b      	ldr	r3, [r7, #4]
24056394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24056396:	f003 031f 	and.w	r3, r3, #31
2405639a:	2208      	movs	r2, #8
2405639c:	409a      	lsls	r2, r3
2405639e:	69bb      	ldr	r3, [r7, #24]
240563a0:	4013      	ands	r3, r2
240563a2:	2b00      	cmp	r3, #0
240563a4:	f000 80a2 	beq.w	240564ec <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
240563a8:	687b      	ldr	r3, [r7, #4]
240563aa:	681b      	ldr	r3, [r3, #0]
240563ac:	4a2e      	ldr	r2, [pc, #184]	; (24056468 <HAL_DMA_IRQHandler+0x1b4>)
240563ae:	4293      	cmp	r3, r2
240563b0:	d04a      	beq.n	24056448 <HAL_DMA_IRQHandler+0x194>
240563b2:	687b      	ldr	r3, [r7, #4]
240563b4:	681b      	ldr	r3, [r3, #0]
240563b6:	4a2d      	ldr	r2, [pc, #180]	; (2405646c <HAL_DMA_IRQHandler+0x1b8>)
240563b8:	4293      	cmp	r3, r2
240563ba:	d045      	beq.n	24056448 <HAL_DMA_IRQHandler+0x194>
240563bc:	687b      	ldr	r3, [r7, #4]
240563be:	681b      	ldr	r3, [r3, #0]
240563c0:	4a2b      	ldr	r2, [pc, #172]	; (24056470 <HAL_DMA_IRQHandler+0x1bc>)
240563c2:	4293      	cmp	r3, r2
240563c4:	d040      	beq.n	24056448 <HAL_DMA_IRQHandler+0x194>
240563c6:	687b      	ldr	r3, [r7, #4]
240563c8:	681b      	ldr	r3, [r3, #0]
240563ca:	4a2a      	ldr	r2, [pc, #168]	; (24056474 <HAL_DMA_IRQHandler+0x1c0>)
240563cc:	4293      	cmp	r3, r2
240563ce:	d03b      	beq.n	24056448 <HAL_DMA_IRQHandler+0x194>
240563d0:	687b      	ldr	r3, [r7, #4]
240563d2:	681b      	ldr	r3, [r3, #0]
240563d4:	4a28      	ldr	r2, [pc, #160]	; (24056478 <HAL_DMA_IRQHandler+0x1c4>)
240563d6:	4293      	cmp	r3, r2
240563d8:	d036      	beq.n	24056448 <HAL_DMA_IRQHandler+0x194>
240563da:	687b      	ldr	r3, [r7, #4]
240563dc:	681b      	ldr	r3, [r3, #0]
240563de:	4a27      	ldr	r2, [pc, #156]	; (2405647c <HAL_DMA_IRQHandler+0x1c8>)
240563e0:	4293      	cmp	r3, r2
240563e2:	d031      	beq.n	24056448 <HAL_DMA_IRQHandler+0x194>
240563e4:	687b      	ldr	r3, [r7, #4]
240563e6:	681b      	ldr	r3, [r3, #0]
240563e8:	4a25      	ldr	r2, [pc, #148]	; (24056480 <HAL_DMA_IRQHandler+0x1cc>)
240563ea:	4293      	cmp	r3, r2
240563ec:	d02c      	beq.n	24056448 <HAL_DMA_IRQHandler+0x194>
240563ee:	687b      	ldr	r3, [r7, #4]
240563f0:	681b      	ldr	r3, [r3, #0]
240563f2:	4a24      	ldr	r2, [pc, #144]	; (24056484 <HAL_DMA_IRQHandler+0x1d0>)
240563f4:	4293      	cmp	r3, r2
240563f6:	d027      	beq.n	24056448 <HAL_DMA_IRQHandler+0x194>
240563f8:	687b      	ldr	r3, [r7, #4]
240563fa:	681b      	ldr	r3, [r3, #0]
240563fc:	4a22      	ldr	r2, [pc, #136]	; (24056488 <HAL_DMA_IRQHandler+0x1d4>)
240563fe:	4293      	cmp	r3, r2
24056400:	d022      	beq.n	24056448 <HAL_DMA_IRQHandler+0x194>
24056402:	687b      	ldr	r3, [r7, #4]
24056404:	681b      	ldr	r3, [r3, #0]
24056406:	4a21      	ldr	r2, [pc, #132]	; (2405648c <HAL_DMA_IRQHandler+0x1d8>)
24056408:	4293      	cmp	r3, r2
2405640a:	d01d      	beq.n	24056448 <HAL_DMA_IRQHandler+0x194>
2405640c:	687b      	ldr	r3, [r7, #4]
2405640e:	681b      	ldr	r3, [r3, #0]
24056410:	4a1f      	ldr	r2, [pc, #124]	; (24056490 <HAL_DMA_IRQHandler+0x1dc>)
24056412:	4293      	cmp	r3, r2
24056414:	d018      	beq.n	24056448 <HAL_DMA_IRQHandler+0x194>
24056416:	687b      	ldr	r3, [r7, #4]
24056418:	681b      	ldr	r3, [r3, #0]
2405641a:	4a1e      	ldr	r2, [pc, #120]	; (24056494 <HAL_DMA_IRQHandler+0x1e0>)
2405641c:	4293      	cmp	r3, r2
2405641e:	d013      	beq.n	24056448 <HAL_DMA_IRQHandler+0x194>
24056420:	687b      	ldr	r3, [r7, #4]
24056422:	681b      	ldr	r3, [r3, #0]
24056424:	4a1c      	ldr	r2, [pc, #112]	; (24056498 <HAL_DMA_IRQHandler+0x1e4>)
24056426:	4293      	cmp	r3, r2
24056428:	d00e      	beq.n	24056448 <HAL_DMA_IRQHandler+0x194>
2405642a:	687b      	ldr	r3, [r7, #4]
2405642c:	681b      	ldr	r3, [r3, #0]
2405642e:	4a1b      	ldr	r2, [pc, #108]	; (2405649c <HAL_DMA_IRQHandler+0x1e8>)
24056430:	4293      	cmp	r3, r2
24056432:	d009      	beq.n	24056448 <HAL_DMA_IRQHandler+0x194>
24056434:	687b      	ldr	r3, [r7, #4]
24056436:	681b      	ldr	r3, [r3, #0]
24056438:	4a19      	ldr	r2, [pc, #100]	; (240564a0 <HAL_DMA_IRQHandler+0x1ec>)
2405643a:	4293      	cmp	r3, r2
2405643c:	d004      	beq.n	24056448 <HAL_DMA_IRQHandler+0x194>
2405643e:	687b      	ldr	r3, [r7, #4]
24056440:	681b      	ldr	r3, [r3, #0]
24056442:	4a18      	ldr	r2, [pc, #96]	; (240564a4 <HAL_DMA_IRQHandler+0x1f0>)
24056444:	4293      	cmp	r3, r2
24056446:	d12f      	bne.n	240564a8 <HAL_DMA_IRQHandler+0x1f4>
24056448:	687b      	ldr	r3, [r7, #4]
2405644a:	681b      	ldr	r3, [r3, #0]
2405644c:	681b      	ldr	r3, [r3, #0]
2405644e:	f003 0304 	and.w	r3, r3, #4
24056452:	2b00      	cmp	r3, #0
24056454:	bf14      	ite	ne
24056456:	2301      	movne	r3, #1
24056458:	2300      	moveq	r3, #0
2405645a:	b2db      	uxtb	r3, r3
2405645c:	e02e      	b.n	240564bc <HAL_DMA_IRQHandler+0x208>
2405645e:	bf00      	nop
24056460:	20000030 	.word	0x20000030
24056464:	1b4e81b5 	.word	0x1b4e81b5
24056468:	40020010 	.word	0x40020010
2405646c:	40020028 	.word	0x40020028
24056470:	40020040 	.word	0x40020040
24056474:	40020058 	.word	0x40020058
24056478:	40020070 	.word	0x40020070
2405647c:	40020088 	.word	0x40020088
24056480:	400200a0 	.word	0x400200a0
24056484:	400200b8 	.word	0x400200b8
24056488:	40020410 	.word	0x40020410
2405648c:	40020428 	.word	0x40020428
24056490:	40020440 	.word	0x40020440
24056494:	40020458 	.word	0x40020458
24056498:	40020470 	.word	0x40020470
2405649c:	40020488 	.word	0x40020488
240564a0:	400204a0 	.word	0x400204a0
240564a4:	400204b8 	.word	0x400204b8
240564a8:	687b      	ldr	r3, [r7, #4]
240564aa:	681b      	ldr	r3, [r3, #0]
240564ac:	681b      	ldr	r3, [r3, #0]
240564ae:	f003 0308 	and.w	r3, r3, #8
240564b2:	2b00      	cmp	r3, #0
240564b4:	bf14      	ite	ne
240564b6:	2301      	movne	r3, #1
240564b8:	2300      	moveq	r3, #0
240564ba:	b2db      	uxtb	r3, r3
240564bc:	2b00      	cmp	r3, #0
240564be:	d015      	beq.n	240564ec <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
240564c0:	687b      	ldr	r3, [r7, #4]
240564c2:	681b      	ldr	r3, [r3, #0]
240564c4:	681a      	ldr	r2, [r3, #0]
240564c6:	687b      	ldr	r3, [r7, #4]
240564c8:	681b      	ldr	r3, [r3, #0]
240564ca:	f022 0204 	bic.w	r2, r2, #4
240564ce:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
240564d0:	687b      	ldr	r3, [r7, #4]
240564d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240564d4:	f003 031f 	and.w	r3, r3, #31
240564d8:	2208      	movs	r2, #8
240564da:	409a      	lsls	r2, r3
240564dc:	6a3b      	ldr	r3, [r7, #32]
240564de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
240564e0:	687b      	ldr	r3, [r7, #4]
240564e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240564e4:	f043 0201 	orr.w	r2, r3, #1
240564e8:	687b      	ldr	r3, [r7, #4]
240564ea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240564ec:	687b      	ldr	r3, [r7, #4]
240564ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240564f0:	f003 031f 	and.w	r3, r3, #31
240564f4:	69ba      	ldr	r2, [r7, #24]
240564f6:	fa22 f303 	lsr.w	r3, r2, r3
240564fa:	f003 0301 	and.w	r3, r3, #1
240564fe:	2b00      	cmp	r3, #0
24056500:	d06e      	beq.n	240565e0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
24056502:	687b      	ldr	r3, [r7, #4]
24056504:	681b      	ldr	r3, [r3, #0]
24056506:	4a69      	ldr	r2, [pc, #420]	; (240566ac <HAL_DMA_IRQHandler+0x3f8>)
24056508:	4293      	cmp	r3, r2
2405650a:	d04a      	beq.n	240565a2 <HAL_DMA_IRQHandler+0x2ee>
2405650c:	687b      	ldr	r3, [r7, #4]
2405650e:	681b      	ldr	r3, [r3, #0]
24056510:	4a67      	ldr	r2, [pc, #412]	; (240566b0 <HAL_DMA_IRQHandler+0x3fc>)
24056512:	4293      	cmp	r3, r2
24056514:	d045      	beq.n	240565a2 <HAL_DMA_IRQHandler+0x2ee>
24056516:	687b      	ldr	r3, [r7, #4]
24056518:	681b      	ldr	r3, [r3, #0]
2405651a:	4a66      	ldr	r2, [pc, #408]	; (240566b4 <HAL_DMA_IRQHandler+0x400>)
2405651c:	4293      	cmp	r3, r2
2405651e:	d040      	beq.n	240565a2 <HAL_DMA_IRQHandler+0x2ee>
24056520:	687b      	ldr	r3, [r7, #4]
24056522:	681b      	ldr	r3, [r3, #0]
24056524:	4a64      	ldr	r2, [pc, #400]	; (240566b8 <HAL_DMA_IRQHandler+0x404>)
24056526:	4293      	cmp	r3, r2
24056528:	d03b      	beq.n	240565a2 <HAL_DMA_IRQHandler+0x2ee>
2405652a:	687b      	ldr	r3, [r7, #4]
2405652c:	681b      	ldr	r3, [r3, #0]
2405652e:	4a63      	ldr	r2, [pc, #396]	; (240566bc <HAL_DMA_IRQHandler+0x408>)
24056530:	4293      	cmp	r3, r2
24056532:	d036      	beq.n	240565a2 <HAL_DMA_IRQHandler+0x2ee>
24056534:	687b      	ldr	r3, [r7, #4]
24056536:	681b      	ldr	r3, [r3, #0]
24056538:	4a61      	ldr	r2, [pc, #388]	; (240566c0 <HAL_DMA_IRQHandler+0x40c>)
2405653a:	4293      	cmp	r3, r2
2405653c:	d031      	beq.n	240565a2 <HAL_DMA_IRQHandler+0x2ee>
2405653e:	687b      	ldr	r3, [r7, #4]
24056540:	681b      	ldr	r3, [r3, #0]
24056542:	4a60      	ldr	r2, [pc, #384]	; (240566c4 <HAL_DMA_IRQHandler+0x410>)
24056544:	4293      	cmp	r3, r2
24056546:	d02c      	beq.n	240565a2 <HAL_DMA_IRQHandler+0x2ee>
24056548:	687b      	ldr	r3, [r7, #4]
2405654a:	681b      	ldr	r3, [r3, #0]
2405654c:	4a5e      	ldr	r2, [pc, #376]	; (240566c8 <HAL_DMA_IRQHandler+0x414>)
2405654e:	4293      	cmp	r3, r2
24056550:	d027      	beq.n	240565a2 <HAL_DMA_IRQHandler+0x2ee>
24056552:	687b      	ldr	r3, [r7, #4]
24056554:	681b      	ldr	r3, [r3, #0]
24056556:	4a5d      	ldr	r2, [pc, #372]	; (240566cc <HAL_DMA_IRQHandler+0x418>)
24056558:	4293      	cmp	r3, r2
2405655a:	d022      	beq.n	240565a2 <HAL_DMA_IRQHandler+0x2ee>
2405655c:	687b      	ldr	r3, [r7, #4]
2405655e:	681b      	ldr	r3, [r3, #0]
24056560:	4a5b      	ldr	r2, [pc, #364]	; (240566d0 <HAL_DMA_IRQHandler+0x41c>)
24056562:	4293      	cmp	r3, r2
24056564:	d01d      	beq.n	240565a2 <HAL_DMA_IRQHandler+0x2ee>
24056566:	687b      	ldr	r3, [r7, #4]
24056568:	681b      	ldr	r3, [r3, #0]
2405656a:	4a5a      	ldr	r2, [pc, #360]	; (240566d4 <HAL_DMA_IRQHandler+0x420>)
2405656c:	4293      	cmp	r3, r2
2405656e:	d018      	beq.n	240565a2 <HAL_DMA_IRQHandler+0x2ee>
24056570:	687b      	ldr	r3, [r7, #4]
24056572:	681b      	ldr	r3, [r3, #0]
24056574:	4a58      	ldr	r2, [pc, #352]	; (240566d8 <HAL_DMA_IRQHandler+0x424>)
24056576:	4293      	cmp	r3, r2
24056578:	d013      	beq.n	240565a2 <HAL_DMA_IRQHandler+0x2ee>
2405657a:	687b      	ldr	r3, [r7, #4]
2405657c:	681b      	ldr	r3, [r3, #0]
2405657e:	4a57      	ldr	r2, [pc, #348]	; (240566dc <HAL_DMA_IRQHandler+0x428>)
24056580:	4293      	cmp	r3, r2
24056582:	d00e      	beq.n	240565a2 <HAL_DMA_IRQHandler+0x2ee>
24056584:	687b      	ldr	r3, [r7, #4]
24056586:	681b      	ldr	r3, [r3, #0]
24056588:	4a55      	ldr	r2, [pc, #340]	; (240566e0 <HAL_DMA_IRQHandler+0x42c>)
2405658a:	4293      	cmp	r3, r2
2405658c:	d009      	beq.n	240565a2 <HAL_DMA_IRQHandler+0x2ee>
2405658e:	687b      	ldr	r3, [r7, #4]
24056590:	681b      	ldr	r3, [r3, #0]
24056592:	4a54      	ldr	r2, [pc, #336]	; (240566e4 <HAL_DMA_IRQHandler+0x430>)
24056594:	4293      	cmp	r3, r2
24056596:	d004      	beq.n	240565a2 <HAL_DMA_IRQHandler+0x2ee>
24056598:	687b      	ldr	r3, [r7, #4]
2405659a:	681b      	ldr	r3, [r3, #0]
2405659c:	4a52      	ldr	r2, [pc, #328]	; (240566e8 <HAL_DMA_IRQHandler+0x434>)
2405659e:	4293      	cmp	r3, r2
240565a0:	d10a      	bne.n	240565b8 <HAL_DMA_IRQHandler+0x304>
240565a2:	687b      	ldr	r3, [r7, #4]
240565a4:	681b      	ldr	r3, [r3, #0]
240565a6:	695b      	ldr	r3, [r3, #20]
240565a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
240565ac:	2b00      	cmp	r3, #0
240565ae:	bf14      	ite	ne
240565b0:	2301      	movne	r3, #1
240565b2:	2300      	moveq	r3, #0
240565b4:	b2db      	uxtb	r3, r3
240565b6:	e003      	b.n	240565c0 <HAL_DMA_IRQHandler+0x30c>
240565b8:	687b      	ldr	r3, [r7, #4]
240565ba:	681b      	ldr	r3, [r3, #0]
240565bc:	681b      	ldr	r3, [r3, #0]
240565be:	2300      	movs	r3, #0
240565c0:	2b00      	cmp	r3, #0
240565c2:	d00d      	beq.n	240565e0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
240565c4:	687b      	ldr	r3, [r7, #4]
240565c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240565c8:	f003 031f 	and.w	r3, r3, #31
240565cc:	2201      	movs	r2, #1
240565ce:	409a      	lsls	r2, r3
240565d0:	6a3b      	ldr	r3, [r7, #32]
240565d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
240565d4:	687b      	ldr	r3, [r7, #4]
240565d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240565d8:	f043 0202 	orr.w	r2, r3, #2
240565dc:	687b      	ldr	r3, [r7, #4]
240565de:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240565e0:	687b      	ldr	r3, [r7, #4]
240565e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240565e4:	f003 031f 	and.w	r3, r3, #31
240565e8:	2204      	movs	r2, #4
240565ea:	409a      	lsls	r2, r3
240565ec:	69bb      	ldr	r3, [r7, #24]
240565ee:	4013      	ands	r3, r2
240565f0:	2b00      	cmp	r3, #0
240565f2:	f000 808f 	beq.w	24056714 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
240565f6:	687b      	ldr	r3, [r7, #4]
240565f8:	681b      	ldr	r3, [r3, #0]
240565fa:	4a2c      	ldr	r2, [pc, #176]	; (240566ac <HAL_DMA_IRQHandler+0x3f8>)
240565fc:	4293      	cmp	r3, r2
240565fe:	d04a      	beq.n	24056696 <HAL_DMA_IRQHandler+0x3e2>
24056600:	687b      	ldr	r3, [r7, #4]
24056602:	681b      	ldr	r3, [r3, #0]
24056604:	4a2a      	ldr	r2, [pc, #168]	; (240566b0 <HAL_DMA_IRQHandler+0x3fc>)
24056606:	4293      	cmp	r3, r2
24056608:	d045      	beq.n	24056696 <HAL_DMA_IRQHandler+0x3e2>
2405660a:	687b      	ldr	r3, [r7, #4]
2405660c:	681b      	ldr	r3, [r3, #0]
2405660e:	4a29      	ldr	r2, [pc, #164]	; (240566b4 <HAL_DMA_IRQHandler+0x400>)
24056610:	4293      	cmp	r3, r2
24056612:	d040      	beq.n	24056696 <HAL_DMA_IRQHandler+0x3e2>
24056614:	687b      	ldr	r3, [r7, #4]
24056616:	681b      	ldr	r3, [r3, #0]
24056618:	4a27      	ldr	r2, [pc, #156]	; (240566b8 <HAL_DMA_IRQHandler+0x404>)
2405661a:	4293      	cmp	r3, r2
2405661c:	d03b      	beq.n	24056696 <HAL_DMA_IRQHandler+0x3e2>
2405661e:	687b      	ldr	r3, [r7, #4]
24056620:	681b      	ldr	r3, [r3, #0]
24056622:	4a26      	ldr	r2, [pc, #152]	; (240566bc <HAL_DMA_IRQHandler+0x408>)
24056624:	4293      	cmp	r3, r2
24056626:	d036      	beq.n	24056696 <HAL_DMA_IRQHandler+0x3e2>
24056628:	687b      	ldr	r3, [r7, #4]
2405662a:	681b      	ldr	r3, [r3, #0]
2405662c:	4a24      	ldr	r2, [pc, #144]	; (240566c0 <HAL_DMA_IRQHandler+0x40c>)
2405662e:	4293      	cmp	r3, r2
24056630:	d031      	beq.n	24056696 <HAL_DMA_IRQHandler+0x3e2>
24056632:	687b      	ldr	r3, [r7, #4]
24056634:	681b      	ldr	r3, [r3, #0]
24056636:	4a23      	ldr	r2, [pc, #140]	; (240566c4 <HAL_DMA_IRQHandler+0x410>)
24056638:	4293      	cmp	r3, r2
2405663a:	d02c      	beq.n	24056696 <HAL_DMA_IRQHandler+0x3e2>
2405663c:	687b      	ldr	r3, [r7, #4]
2405663e:	681b      	ldr	r3, [r3, #0]
24056640:	4a21      	ldr	r2, [pc, #132]	; (240566c8 <HAL_DMA_IRQHandler+0x414>)
24056642:	4293      	cmp	r3, r2
24056644:	d027      	beq.n	24056696 <HAL_DMA_IRQHandler+0x3e2>
24056646:	687b      	ldr	r3, [r7, #4]
24056648:	681b      	ldr	r3, [r3, #0]
2405664a:	4a20      	ldr	r2, [pc, #128]	; (240566cc <HAL_DMA_IRQHandler+0x418>)
2405664c:	4293      	cmp	r3, r2
2405664e:	d022      	beq.n	24056696 <HAL_DMA_IRQHandler+0x3e2>
24056650:	687b      	ldr	r3, [r7, #4]
24056652:	681b      	ldr	r3, [r3, #0]
24056654:	4a1e      	ldr	r2, [pc, #120]	; (240566d0 <HAL_DMA_IRQHandler+0x41c>)
24056656:	4293      	cmp	r3, r2
24056658:	d01d      	beq.n	24056696 <HAL_DMA_IRQHandler+0x3e2>
2405665a:	687b      	ldr	r3, [r7, #4]
2405665c:	681b      	ldr	r3, [r3, #0]
2405665e:	4a1d      	ldr	r2, [pc, #116]	; (240566d4 <HAL_DMA_IRQHandler+0x420>)
24056660:	4293      	cmp	r3, r2
24056662:	d018      	beq.n	24056696 <HAL_DMA_IRQHandler+0x3e2>
24056664:	687b      	ldr	r3, [r7, #4]
24056666:	681b      	ldr	r3, [r3, #0]
24056668:	4a1b      	ldr	r2, [pc, #108]	; (240566d8 <HAL_DMA_IRQHandler+0x424>)
2405666a:	4293      	cmp	r3, r2
2405666c:	d013      	beq.n	24056696 <HAL_DMA_IRQHandler+0x3e2>
2405666e:	687b      	ldr	r3, [r7, #4]
24056670:	681b      	ldr	r3, [r3, #0]
24056672:	4a1a      	ldr	r2, [pc, #104]	; (240566dc <HAL_DMA_IRQHandler+0x428>)
24056674:	4293      	cmp	r3, r2
24056676:	d00e      	beq.n	24056696 <HAL_DMA_IRQHandler+0x3e2>
24056678:	687b      	ldr	r3, [r7, #4]
2405667a:	681b      	ldr	r3, [r3, #0]
2405667c:	4a18      	ldr	r2, [pc, #96]	; (240566e0 <HAL_DMA_IRQHandler+0x42c>)
2405667e:	4293      	cmp	r3, r2
24056680:	d009      	beq.n	24056696 <HAL_DMA_IRQHandler+0x3e2>
24056682:	687b      	ldr	r3, [r7, #4]
24056684:	681b      	ldr	r3, [r3, #0]
24056686:	4a17      	ldr	r2, [pc, #92]	; (240566e4 <HAL_DMA_IRQHandler+0x430>)
24056688:	4293      	cmp	r3, r2
2405668a:	d004      	beq.n	24056696 <HAL_DMA_IRQHandler+0x3e2>
2405668c:	687b      	ldr	r3, [r7, #4]
2405668e:	681b      	ldr	r3, [r3, #0]
24056690:	4a15      	ldr	r2, [pc, #84]	; (240566e8 <HAL_DMA_IRQHandler+0x434>)
24056692:	4293      	cmp	r3, r2
24056694:	d12a      	bne.n	240566ec <HAL_DMA_IRQHandler+0x438>
24056696:	687b      	ldr	r3, [r7, #4]
24056698:	681b      	ldr	r3, [r3, #0]
2405669a:	681b      	ldr	r3, [r3, #0]
2405669c:	f003 0302 	and.w	r3, r3, #2
240566a0:	2b00      	cmp	r3, #0
240566a2:	bf14      	ite	ne
240566a4:	2301      	movne	r3, #1
240566a6:	2300      	moveq	r3, #0
240566a8:	b2db      	uxtb	r3, r3
240566aa:	e023      	b.n	240566f4 <HAL_DMA_IRQHandler+0x440>
240566ac:	40020010 	.word	0x40020010
240566b0:	40020028 	.word	0x40020028
240566b4:	40020040 	.word	0x40020040
240566b8:	40020058 	.word	0x40020058
240566bc:	40020070 	.word	0x40020070
240566c0:	40020088 	.word	0x40020088
240566c4:	400200a0 	.word	0x400200a0
240566c8:	400200b8 	.word	0x400200b8
240566cc:	40020410 	.word	0x40020410
240566d0:	40020428 	.word	0x40020428
240566d4:	40020440 	.word	0x40020440
240566d8:	40020458 	.word	0x40020458
240566dc:	40020470 	.word	0x40020470
240566e0:	40020488 	.word	0x40020488
240566e4:	400204a0 	.word	0x400204a0
240566e8:	400204b8 	.word	0x400204b8
240566ec:	687b      	ldr	r3, [r7, #4]
240566ee:	681b      	ldr	r3, [r3, #0]
240566f0:	681b      	ldr	r3, [r3, #0]
240566f2:	2300      	movs	r3, #0
240566f4:	2b00      	cmp	r3, #0
240566f6:	d00d      	beq.n	24056714 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
240566f8:	687b      	ldr	r3, [r7, #4]
240566fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240566fc:	f003 031f 	and.w	r3, r3, #31
24056700:	2204      	movs	r2, #4
24056702:	409a      	lsls	r2, r3
24056704:	6a3b      	ldr	r3, [r7, #32]
24056706:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
24056708:	687b      	ldr	r3, [r7, #4]
2405670a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405670c:	f043 0204 	orr.w	r2, r3, #4
24056710:	687b      	ldr	r3, [r7, #4]
24056712:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24056714:	687b      	ldr	r3, [r7, #4]
24056716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24056718:	f003 031f 	and.w	r3, r3, #31
2405671c:	2210      	movs	r2, #16
2405671e:	409a      	lsls	r2, r3
24056720:	69bb      	ldr	r3, [r7, #24]
24056722:	4013      	ands	r3, r2
24056724:	2b00      	cmp	r3, #0
24056726:	f000 80a6 	beq.w	24056876 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
2405672a:	687b      	ldr	r3, [r7, #4]
2405672c:	681b      	ldr	r3, [r3, #0]
2405672e:	4a85      	ldr	r2, [pc, #532]	; (24056944 <HAL_DMA_IRQHandler+0x690>)
24056730:	4293      	cmp	r3, r2
24056732:	d04a      	beq.n	240567ca <HAL_DMA_IRQHandler+0x516>
24056734:	687b      	ldr	r3, [r7, #4]
24056736:	681b      	ldr	r3, [r3, #0]
24056738:	4a83      	ldr	r2, [pc, #524]	; (24056948 <HAL_DMA_IRQHandler+0x694>)
2405673a:	4293      	cmp	r3, r2
2405673c:	d045      	beq.n	240567ca <HAL_DMA_IRQHandler+0x516>
2405673e:	687b      	ldr	r3, [r7, #4]
24056740:	681b      	ldr	r3, [r3, #0]
24056742:	4a82      	ldr	r2, [pc, #520]	; (2405694c <HAL_DMA_IRQHandler+0x698>)
24056744:	4293      	cmp	r3, r2
24056746:	d040      	beq.n	240567ca <HAL_DMA_IRQHandler+0x516>
24056748:	687b      	ldr	r3, [r7, #4]
2405674a:	681b      	ldr	r3, [r3, #0]
2405674c:	4a80      	ldr	r2, [pc, #512]	; (24056950 <HAL_DMA_IRQHandler+0x69c>)
2405674e:	4293      	cmp	r3, r2
24056750:	d03b      	beq.n	240567ca <HAL_DMA_IRQHandler+0x516>
24056752:	687b      	ldr	r3, [r7, #4]
24056754:	681b      	ldr	r3, [r3, #0]
24056756:	4a7f      	ldr	r2, [pc, #508]	; (24056954 <HAL_DMA_IRQHandler+0x6a0>)
24056758:	4293      	cmp	r3, r2
2405675a:	d036      	beq.n	240567ca <HAL_DMA_IRQHandler+0x516>
2405675c:	687b      	ldr	r3, [r7, #4]
2405675e:	681b      	ldr	r3, [r3, #0]
24056760:	4a7d      	ldr	r2, [pc, #500]	; (24056958 <HAL_DMA_IRQHandler+0x6a4>)
24056762:	4293      	cmp	r3, r2
24056764:	d031      	beq.n	240567ca <HAL_DMA_IRQHandler+0x516>
24056766:	687b      	ldr	r3, [r7, #4]
24056768:	681b      	ldr	r3, [r3, #0]
2405676a:	4a7c      	ldr	r2, [pc, #496]	; (2405695c <HAL_DMA_IRQHandler+0x6a8>)
2405676c:	4293      	cmp	r3, r2
2405676e:	d02c      	beq.n	240567ca <HAL_DMA_IRQHandler+0x516>
24056770:	687b      	ldr	r3, [r7, #4]
24056772:	681b      	ldr	r3, [r3, #0]
24056774:	4a7a      	ldr	r2, [pc, #488]	; (24056960 <HAL_DMA_IRQHandler+0x6ac>)
24056776:	4293      	cmp	r3, r2
24056778:	d027      	beq.n	240567ca <HAL_DMA_IRQHandler+0x516>
2405677a:	687b      	ldr	r3, [r7, #4]
2405677c:	681b      	ldr	r3, [r3, #0]
2405677e:	4a79      	ldr	r2, [pc, #484]	; (24056964 <HAL_DMA_IRQHandler+0x6b0>)
24056780:	4293      	cmp	r3, r2
24056782:	d022      	beq.n	240567ca <HAL_DMA_IRQHandler+0x516>
24056784:	687b      	ldr	r3, [r7, #4]
24056786:	681b      	ldr	r3, [r3, #0]
24056788:	4a77      	ldr	r2, [pc, #476]	; (24056968 <HAL_DMA_IRQHandler+0x6b4>)
2405678a:	4293      	cmp	r3, r2
2405678c:	d01d      	beq.n	240567ca <HAL_DMA_IRQHandler+0x516>
2405678e:	687b      	ldr	r3, [r7, #4]
24056790:	681b      	ldr	r3, [r3, #0]
24056792:	4a76      	ldr	r2, [pc, #472]	; (2405696c <HAL_DMA_IRQHandler+0x6b8>)
24056794:	4293      	cmp	r3, r2
24056796:	d018      	beq.n	240567ca <HAL_DMA_IRQHandler+0x516>
24056798:	687b      	ldr	r3, [r7, #4]
2405679a:	681b      	ldr	r3, [r3, #0]
2405679c:	4a74      	ldr	r2, [pc, #464]	; (24056970 <HAL_DMA_IRQHandler+0x6bc>)
2405679e:	4293      	cmp	r3, r2
240567a0:	d013      	beq.n	240567ca <HAL_DMA_IRQHandler+0x516>
240567a2:	687b      	ldr	r3, [r7, #4]
240567a4:	681b      	ldr	r3, [r3, #0]
240567a6:	4a73      	ldr	r2, [pc, #460]	; (24056974 <HAL_DMA_IRQHandler+0x6c0>)
240567a8:	4293      	cmp	r3, r2
240567aa:	d00e      	beq.n	240567ca <HAL_DMA_IRQHandler+0x516>
240567ac:	687b      	ldr	r3, [r7, #4]
240567ae:	681b      	ldr	r3, [r3, #0]
240567b0:	4a71      	ldr	r2, [pc, #452]	; (24056978 <HAL_DMA_IRQHandler+0x6c4>)
240567b2:	4293      	cmp	r3, r2
240567b4:	d009      	beq.n	240567ca <HAL_DMA_IRQHandler+0x516>
240567b6:	687b      	ldr	r3, [r7, #4]
240567b8:	681b      	ldr	r3, [r3, #0]
240567ba:	4a70      	ldr	r2, [pc, #448]	; (2405697c <HAL_DMA_IRQHandler+0x6c8>)
240567bc:	4293      	cmp	r3, r2
240567be:	d004      	beq.n	240567ca <HAL_DMA_IRQHandler+0x516>
240567c0:	687b      	ldr	r3, [r7, #4]
240567c2:	681b      	ldr	r3, [r3, #0]
240567c4:	4a6e      	ldr	r2, [pc, #440]	; (24056980 <HAL_DMA_IRQHandler+0x6cc>)
240567c6:	4293      	cmp	r3, r2
240567c8:	d10a      	bne.n	240567e0 <HAL_DMA_IRQHandler+0x52c>
240567ca:	687b      	ldr	r3, [r7, #4]
240567cc:	681b      	ldr	r3, [r3, #0]
240567ce:	681b      	ldr	r3, [r3, #0]
240567d0:	f003 0308 	and.w	r3, r3, #8
240567d4:	2b00      	cmp	r3, #0
240567d6:	bf14      	ite	ne
240567d8:	2301      	movne	r3, #1
240567da:	2300      	moveq	r3, #0
240567dc:	b2db      	uxtb	r3, r3
240567de:	e009      	b.n	240567f4 <HAL_DMA_IRQHandler+0x540>
240567e0:	687b      	ldr	r3, [r7, #4]
240567e2:	681b      	ldr	r3, [r3, #0]
240567e4:	681b      	ldr	r3, [r3, #0]
240567e6:	f003 0304 	and.w	r3, r3, #4
240567ea:	2b00      	cmp	r3, #0
240567ec:	bf14      	ite	ne
240567ee:	2301      	movne	r3, #1
240567f0:	2300      	moveq	r3, #0
240567f2:	b2db      	uxtb	r3, r3
240567f4:	2b00      	cmp	r3, #0
240567f6:	d03e      	beq.n	24056876 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
240567f8:	687b      	ldr	r3, [r7, #4]
240567fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240567fc:	f003 031f 	and.w	r3, r3, #31
24056800:	2210      	movs	r2, #16
24056802:	409a      	lsls	r2, r3
24056804:	6a3b      	ldr	r3, [r7, #32]
24056806:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
24056808:	687b      	ldr	r3, [r7, #4]
2405680a:	681b      	ldr	r3, [r3, #0]
2405680c:	681b      	ldr	r3, [r3, #0]
2405680e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
24056812:	2b00      	cmp	r3, #0
24056814:	d018      	beq.n	24056848 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
24056816:	687b      	ldr	r3, [r7, #4]
24056818:	681b      	ldr	r3, [r3, #0]
2405681a:	681b      	ldr	r3, [r3, #0]
2405681c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
24056820:	2b00      	cmp	r3, #0
24056822:	d108      	bne.n	24056836 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
24056824:	687b      	ldr	r3, [r7, #4]
24056826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24056828:	2b00      	cmp	r3, #0
2405682a:	d024      	beq.n	24056876 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
2405682c:	687b      	ldr	r3, [r7, #4]
2405682e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24056830:	6878      	ldr	r0, [r7, #4]
24056832:	4798      	blx	r3
24056834:	e01f      	b.n	24056876 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
24056836:	687b      	ldr	r3, [r7, #4]
24056838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2405683a:	2b00      	cmp	r3, #0
2405683c:	d01b      	beq.n	24056876 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
2405683e:	687b      	ldr	r3, [r7, #4]
24056840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24056842:	6878      	ldr	r0, [r7, #4]
24056844:	4798      	blx	r3
24056846:	e016      	b.n	24056876 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
24056848:	687b      	ldr	r3, [r7, #4]
2405684a:	681b      	ldr	r3, [r3, #0]
2405684c:	681b      	ldr	r3, [r3, #0]
2405684e:	f403 7380 	and.w	r3, r3, #256	; 0x100
24056852:	2b00      	cmp	r3, #0
24056854:	d107      	bne.n	24056866 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
24056856:	687b      	ldr	r3, [r7, #4]
24056858:	681b      	ldr	r3, [r3, #0]
2405685a:	681a      	ldr	r2, [r3, #0]
2405685c:	687b      	ldr	r3, [r7, #4]
2405685e:	681b      	ldr	r3, [r3, #0]
24056860:	f022 0208 	bic.w	r2, r2, #8
24056864:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
24056866:	687b      	ldr	r3, [r7, #4]
24056868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405686a:	2b00      	cmp	r3, #0
2405686c:	d003      	beq.n	24056876 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
2405686e:	687b      	ldr	r3, [r7, #4]
24056870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24056872:	6878      	ldr	r0, [r7, #4]
24056874:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24056876:	687b      	ldr	r3, [r7, #4]
24056878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2405687a:	f003 031f 	and.w	r3, r3, #31
2405687e:	2220      	movs	r2, #32
24056880:	409a      	lsls	r2, r3
24056882:	69bb      	ldr	r3, [r7, #24]
24056884:	4013      	ands	r3, r2
24056886:	2b00      	cmp	r3, #0
24056888:	f000 8110 	beq.w	24056aac <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
2405688c:	687b      	ldr	r3, [r7, #4]
2405688e:	681b      	ldr	r3, [r3, #0]
24056890:	4a2c      	ldr	r2, [pc, #176]	; (24056944 <HAL_DMA_IRQHandler+0x690>)
24056892:	4293      	cmp	r3, r2
24056894:	d04a      	beq.n	2405692c <HAL_DMA_IRQHandler+0x678>
24056896:	687b      	ldr	r3, [r7, #4]
24056898:	681b      	ldr	r3, [r3, #0]
2405689a:	4a2b      	ldr	r2, [pc, #172]	; (24056948 <HAL_DMA_IRQHandler+0x694>)
2405689c:	4293      	cmp	r3, r2
2405689e:	d045      	beq.n	2405692c <HAL_DMA_IRQHandler+0x678>
240568a0:	687b      	ldr	r3, [r7, #4]
240568a2:	681b      	ldr	r3, [r3, #0]
240568a4:	4a29      	ldr	r2, [pc, #164]	; (2405694c <HAL_DMA_IRQHandler+0x698>)
240568a6:	4293      	cmp	r3, r2
240568a8:	d040      	beq.n	2405692c <HAL_DMA_IRQHandler+0x678>
240568aa:	687b      	ldr	r3, [r7, #4]
240568ac:	681b      	ldr	r3, [r3, #0]
240568ae:	4a28      	ldr	r2, [pc, #160]	; (24056950 <HAL_DMA_IRQHandler+0x69c>)
240568b0:	4293      	cmp	r3, r2
240568b2:	d03b      	beq.n	2405692c <HAL_DMA_IRQHandler+0x678>
240568b4:	687b      	ldr	r3, [r7, #4]
240568b6:	681b      	ldr	r3, [r3, #0]
240568b8:	4a26      	ldr	r2, [pc, #152]	; (24056954 <HAL_DMA_IRQHandler+0x6a0>)
240568ba:	4293      	cmp	r3, r2
240568bc:	d036      	beq.n	2405692c <HAL_DMA_IRQHandler+0x678>
240568be:	687b      	ldr	r3, [r7, #4]
240568c0:	681b      	ldr	r3, [r3, #0]
240568c2:	4a25      	ldr	r2, [pc, #148]	; (24056958 <HAL_DMA_IRQHandler+0x6a4>)
240568c4:	4293      	cmp	r3, r2
240568c6:	d031      	beq.n	2405692c <HAL_DMA_IRQHandler+0x678>
240568c8:	687b      	ldr	r3, [r7, #4]
240568ca:	681b      	ldr	r3, [r3, #0]
240568cc:	4a23      	ldr	r2, [pc, #140]	; (2405695c <HAL_DMA_IRQHandler+0x6a8>)
240568ce:	4293      	cmp	r3, r2
240568d0:	d02c      	beq.n	2405692c <HAL_DMA_IRQHandler+0x678>
240568d2:	687b      	ldr	r3, [r7, #4]
240568d4:	681b      	ldr	r3, [r3, #0]
240568d6:	4a22      	ldr	r2, [pc, #136]	; (24056960 <HAL_DMA_IRQHandler+0x6ac>)
240568d8:	4293      	cmp	r3, r2
240568da:	d027      	beq.n	2405692c <HAL_DMA_IRQHandler+0x678>
240568dc:	687b      	ldr	r3, [r7, #4]
240568de:	681b      	ldr	r3, [r3, #0]
240568e0:	4a20      	ldr	r2, [pc, #128]	; (24056964 <HAL_DMA_IRQHandler+0x6b0>)
240568e2:	4293      	cmp	r3, r2
240568e4:	d022      	beq.n	2405692c <HAL_DMA_IRQHandler+0x678>
240568e6:	687b      	ldr	r3, [r7, #4]
240568e8:	681b      	ldr	r3, [r3, #0]
240568ea:	4a1f      	ldr	r2, [pc, #124]	; (24056968 <HAL_DMA_IRQHandler+0x6b4>)
240568ec:	4293      	cmp	r3, r2
240568ee:	d01d      	beq.n	2405692c <HAL_DMA_IRQHandler+0x678>
240568f0:	687b      	ldr	r3, [r7, #4]
240568f2:	681b      	ldr	r3, [r3, #0]
240568f4:	4a1d      	ldr	r2, [pc, #116]	; (2405696c <HAL_DMA_IRQHandler+0x6b8>)
240568f6:	4293      	cmp	r3, r2
240568f8:	d018      	beq.n	2405692c <HAL_DMA_IRQHandler+0x678>
240568fa:	687b      	ldr	r3, [r7, #4]
240568fc:	681b      	ldr	r3, [r3, #0]
240568fe:	4a1c      	ldr	r2, [pc, #112]	; (24056970 <HAL_DMA_IRQHandler+0x6bc>)
24056900:	4293      	cmp	r3, r2
24056902:	d013      	beq.n	2405692c <HAL_DMA_IRQHandler+0x678>
24056904:	687b      	ldr	r3, [r7, #4]
24056906:	681b      	ldr	r3, [r3, #0]
24056908:	4a1a      	ldr	r2, [pc, #104]	; (24056974 <HAL_DMA_IRQHandler+0x6c0>)
2405690a:	4293      	cmp	r3, r2
2405690c:	d00e      	beq.n	2405692c <HAL_DMA_IRQHandler+0x678>
2405690e:	687b      	ldr	r3, [r7, #4]
24056910:	681b      	ldr	r3, [r3, #0]
24056912:	4a19      	ldr	r2, [pc, #100]	; (24056978 <HAL_DMA_IRQHandler+0x6c4>)
24056914:	4293      	cmp	r3, r2
24056916:	d009      	beq.n	2405692c <HAL_DMA_IRQHandler+0x678>
24056918:	687b      	ldr	r3, [r7, #4]
2405691a:	681b      	ldr	r3, [r3, #0]
2405691c:	4a17      	ldr	r2, [pc, #92]	; (2405697c <HAL_DMA_IRQHandler+0x6c8>)
2405691e:	4293      	cmp	r3, r2
24056920:	d004      	beq.n	2405692c <HAL_DMA_IRQHandler+0x678>
24056922:	687b      	ldr	r3, [r7, #4]
24056924:	681b      	ldr	r3, [r3, #0]
24056926:	4a16      	ldr	r2, [pc, #88]	; (24056980 <HAL_DMA_IRQHandler+0x6cc>)
24056928:	4293      	cmp	r3, r2
2405692a:	d12b      	bne.n	24056984 <HAL_DMA_IRQHandler+0x6d0>
2405692c:	687b      	ldr	r3, [r7, #4]
2405692e:	681b      	ldr	r3, [r3, #0]
24056930:	681b      	ldr	r3, [r3, #0]
24056932:	f003 0310 	and.w	r3, r3, #16
24056936:	2b00      	cmp	r3, #0
24056938:	bf14      	ite	ne
2405693a:	2301      	movne	r3, #1
2405693c:	2300      	moveq	r3, #0
2405693e:	b2db      	uxtb	r3, r3
24056940:	e02a      	b.n	24056998 <HAL_DMA_IRQHandler+0x6e4>
24056942:	bf00      	nop
24056944:	40020010 	.word	0x40020010
24056948:	40020028 	.word	0x40020028
2405694c:	40020040 	.word	0x40020040
24056950:	40020058 	.word	0x40020058
24056954:	40020070 	.word	0x40020070
24056958:	40020088 	.word	0x40020088
2405695c:	400200a0 	.word	0x400200a0
24056960:	400200b8 	.word	0x400200b8
24056964:	40020410 	.word	0x40020410
24056968:	40020428 	.word	0x40020428
2405696c:	40020440 	.word	0x40020440
24056970:	40020458 	.word	0x40020458
24056974:	40020470 	.word	0x40020470
24056978:	40020488 	.word	0x40020488
2405697c:	400204a0 	.word	0x400204a0
24056980:	400204b8 	.word	0x400204b8
24056984:	687b      	ldr	r3, [r7, #4]
24056986:	681b      	ldr	r3, [r3, #0]
24056988:	681b      	ldr	r3, [r3, #0]
2405698a:	f003 0302 	and.w	r3, r3, #2
2405698e:	2b00      	cmp	r3, #0
24056990:	bf14      	ite	ne
24056992:	2301      	movne	r3, #1
24056994:	2300      	moveq	r3, #0
24056996:	b2db      	uxtb	r3, r3
24056998:	2b00      	cmp	r3, #0
2405699a:	f000 8087 	beq.w	24056aac <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
2405699e:	687b      	ldr	r3, [r7, #4]
240569a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240569a2:	f003 031f 	and.w	r3, r3, #31
240569a6:	2220      	movs	r2, #32
240569a8:	409a      	lsls	r2, r3
240569aa:	6a3b      	ldr	r3, [r7, #32]
240569ac:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
240569ae:	687b      	ldr	r3, [r7, #4]
240569b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
240569b4:	b2db      	uxtb	r3, r3
240569b6:	2b04      	cmp	r3, #4
240569b8:	d139      	bne.n	24056a2e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
240569ba:	687b      	ldr	r3, [r7, #4]
240569bc:	681b      	ldr	r3, [r3, #0]
240569be:	681a      	ldr	r2, [r3, #0]
240569c0:	687b      	ldr	r3, [r7, #4]
240569c2:	681b      	ldr	r3, [r3, #0]
240569c4:	f022 0216 	bic.w	r2, r2, #22
240569c8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
240569ca:	687b      	ldr	r3, [r7, #4]
240569cc:	681b      	ldr	r3, [r3, #0]
240569ce:	695a      	ldr	r2, [r3, #20]
240569d0:	687b      	ldr	r3, [r7, #4]
240569d2:	681b      	ldr	r3, [r3, #0]
240569d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
240569d8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
240569da:	687b      	ldr	r3, [r7, #4]
240569dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240569de:	2b00      	cmp	r3, #0
240569e0:	d103      	bne.n	240569ea <HAL_DMA_IRQHandler+0x736>
240569e2:	687b      	ldr	r3, [r7, #4]
240569e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
240569e6:	2b00      	cmp	r3, #0
240569e8:	d007      	beq.n	240569fa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
240569ea:	687b      	ldr	r3, [r7, #4]
240569ec:	681b      	ldr	r3, [r3, #0]
240569ee:	681a      	ldr	r2, [r3, #0]
240569f0:	687b      	ldr	r3, [r7, #4]
240569f2:	681b      	ldr	r3, [r3, #0]
240569f4:	f022 0208 	bic.w	r2, r2, #8
240569f8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
240569fa:	687b      	ldr	r3, [r7, #4]
240569fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240569fe:	f003 031f 	and.w	r3, r3, #31
24056a02:	223f      	movs	r2, #63	; 0x3f
24056a04:	409a      	lsls	r2, r3
24056a06:	6a3b      	ldr	r3, [r7, #32]
24056a08:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
24056a0a:	687b      	ldr	r3, [r7, #4]
24056a0c:	2201      	movs	r2, #1
24056a0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
24056a12:	687b      	ldr	r3, [r7, #4]
24056a14:	2200      	movs	r2, #0
24056a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
24056a1a:	687b      	ldr	r3, [r7, #4]
24056a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24056a1e:	2b00      	cmp	r3, #0
24056a20:	f000 8382 	beq.w	24057128 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
24056a24:	687b      	ldr	r3, [r7, #4]
24056a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24056a28:	6878      	ldr	r0, [r7, #4]
24056a2a:	4798      	blx	r3
          }
          return;
24056a2c:	e37c      	b.n	24057128 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
24056a2e:	687b      	ldr	r3, [r7, #4]
24056a30:	681b      	ldr	r3, [r3, #0]
24056a32:	681b      	ldr	r3, [r3, #0]
24056a34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
24056a38:	2b00      	cmp	r3, #0
24056a3a:	d018      	beq.n	24056a6e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
24056a3c:	687b      	ldr	r3, [r7, #4]
24056a3e:	681b      	ldr	r3, [r3, #0]
24056a40:	681b      	ldr	r3, [r3, #0]
24056a42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
24056a46:	2b00      	cmp	r3, #0
24056a48:	d108      	bne.n	24056a5c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
24056a4a:	687b      	ldr	r3, [r7, #4]
24056a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24056a4e:	2b00      	cmp	r3, #0
24056a50:	d02c      	beq.n	24056aac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
24056a52:	687b      	ldr	r3, [r7, #4]
24056a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24056a56:	6878      	ldr	r0, [r7, #4]
24056a58:	4798      	blx	r3
24056a5a:	e027      	b.n	24056aac <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
24056a5c:	687b      	ldr	r3, [r7, #4]
24056a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24056a60:	2b00      	cmp	r3, #0
24056a62:	d023      	beq.n	24056aac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
24056a64:	687b      	ldr	r3, [r7, #4]
24056a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24056a68:	6878      	ldr	r0, [r7, #4]
24056a6a:	4798      	blx	r3
24056a6c:	e01e      	b.n	24056aac <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
24056a6e:	687b      	ldr	r3, [r7, #4]
24056a70:	681b      	ldr	r3, [r3, #0]
24056a72:	681b      	ldr	r3, [r3, #0]
24056a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
24056a78:	2b00      	cmp	r3, #0
24056a7a:	d10f      	bne.n	24056a9c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
24056a7c:	687b      	ldr	r3, [r7, #4]
24056a7e:	681b      	ldr	r3, [r3, #0]
24056a80:	681a      	ldr	r2, [r3, #0]
24056a82:	687b      	ldr	r3, [r7, #4]
24056a84:	681b      	ldr	r3, [r3, #0]
24056a86:	f022 0210 	bic.w	r2, r2, #16
24056a8a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
24056a8c:	687b      	ldr	r3, [r7, #4]
24056a8e:	2201      	movs	r2, #1
24056a90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
24056a94:	687b      	ldr	r3, [r7, #4]
24056a96:	2200      	movs	r2, #0
24056a98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
24056a9c:	687b      	ldr	r3, [r7, #4]
24056a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24056aa0:	2b00      	cmp	r3, #0
24056aa2:	d003      	beq.n	24056aac <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
24056aa4:	687b      	ldr	r3, [r7, #4]
24056aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24056aa8:	6878      	ldr	r0, [r7, #4]
24056aaa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
24056aac:	687b      	ldr	r3, [r7, #4]
24056aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24056ab0:	2b00      	cmp	r3, #0
24056ab2:	f000 833e 	beq.w	24057132 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
24056ab6:	687b      	ldr	r3, [r7, #4]
24056ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24056aba:	f003 0301 	and.w	r3, r3, #1
24056abe:	2b00      	cmp	r3, #0
24056ac0:	f000 8088 	beq.w	24056bd4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
24056ac4:	687b      	ldr	r3, [r7, #4]
24056ac6:	2204      	movs	r2, #4
24056ac8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
24056acc:	687b      	ldr	r3, [r7, #4]
24056ace:	681b      	ldr	r3, [r3, #0]
24056ad0:	4a8e      	ldr	r2, [pc, #568]	; (24056d0c <HAL_DMA_IRQHandler+0xa58>)
24056ad2:	4293      	cmp	r3, r2
24056ad4:	d04a      	beq.n	24056b6c <HAL_DMA_IRQHandler+0x8b8>
24056ad6:	687b      	ldr	r3, [r7, #4]
24056ad8:	681b      	ldr	r3, [r3, #0]
24056ada:	4a8d      	ldr	r2, [pc, #564]	; (24056d10 <HAL_DMA_IRQHandler+0xa5c>)
24056adc:	4293      	cmp	r3, r2
24056ade:	d045      	beq.n	24056b6c <HAL_DMA_IRQHandler+0x8b8>
24056ae0:	687b      	ldr	r3, [r7, #4]
24056ae2:	681b      	ldr	r3, [r3, #0]
24056ae4:	4a8b      	ldr	r2, [pc, #556]	; (24056d14 <HAL_DMA_IRQHandler+0xa60>)
24056ae6:	4293      	cmp	r3, r2
24056ae8:	d040      	beq.n	24056b6c <HAL_DMA_IRQHandler+0x8b8>
24056aea:	687b      	ldr	r3, [r7, #4]
24056aec:	681b      	ldr	r3, [r3, #0]
24056aee:	4a8a      	ldr	r2, [pc, #552]	; (24056d18 <HAL_DMA_IRQHandler+0xa64>)
24056af0:	4293      	cmp	r3, r2
24056af2:	d03b      	beq.n	24056b6c <HAL_DMA_IRQHandler+0x8b8>
24056af4:	687b      	ldr	r3, [r7, #4]
24056af6:	681b      	ldr	r3, [r3, #0]
24056af8:	4a88      	ldr	r2, [pc, #544]	; (24056d1c <HAL_DMA_IRQHandler+0xa68>)
24056afa:	4293      	cmp	r3, r2
24056afc:	d036      	beq.n	24056b6c <HAL_DMA_IRQHandler+0x8b8>
24056afe:	687b      	ldr	r3, [r7, #4]
24056b00:	681b      	ldr	r3, [r3, #0]
24056b02:	4a87      	ldr	r2, [pc, #540]	; (24056d20 <HAL_DMA_IRQHandler+0xa6c>)
24056b04:	4293      	cmp	r3, r2
24056b06:	d031      	beq.n	24056b6c <HAL_DMA_IRQHandler+0x8b8>
24056b08:	687b      	ldr	r3, [r7, #4]
24056b0a:	681b      	ldr	r3, [r3, #0]
24056b0c:	4a85      	ldr	r2, [pc, #532]	; (24056d24 <HAL_DMA_IRQHandler+0xa70>)
24056b0e:	4293      	cmp	r3, r2
24056b10:	d02c      	beq.n	24056b6c <HAL_DMA_IRQHandler+0x8b8>
24056b12:	687b      	ldr	r3, [r7, #4]
24056b14:	681b      	ldr	r3, [r3, #0]
24056b16:	4a84      	ldr	r2, [pc, #528]	; (24056d28 <HAL_DMA_IRQHandler+0xa74>)
24056b18:	4293      	cmp	r3, r2
24056b1a:	d027      	beq.n	24056b6c <HAL_DMA_IRQHandler+0x8b8>
24056b1c:	687b      	ldr	r3, [r7, #4]
24056b1e:	681b      	ldr	r3, [r3, #0]
24056b20:	4a82      	ldr	r2, [pc, #520]	; (24056d2c <HAL_DMA_IRQHandler+0xa78>)
24056b22:	4293      	cmp	r3, r2
24056b24:	d022      	beq.n	24056b6c <HAL_DMA_IRQHandler+0x8b8>
24056b26:	687b      	ldr	r3, [r7, #4]
24056b28:	681b      	ldr	r3, [r3, #0]
24056b2a:	4a81      	ldr	r2, [pc, #516]	; (24056d30 <HAL_DMA_IRQHandler+0xa7c>)
24056b2c:	4293      	cmp	r3, r2
24056b2e:	d01d      	beq.n	24056b6c <HAL_DMA_IRQHandler+0x8b8>
24056b30:	687b      	ldr	r3, [r7, #4]
24056b32:	681b      	ldr	r3, [r3, #0]
24056b34:	4a7f      	ldr	r2, [pc, #508]	; (24056d34 <HAL_DMA_IRQHandler+0xa80>)
24056b36:	4293      	cmp	r3, r2
24056b38:	d018      	beq.n	24056b6c <HAL_DMA_IRQHandler+0x8b8>
24056b3a:	687b      	ldr	r3, [r7, #4]
24056b3c:	681b      	ldr	r3, [r3, #0]
24056b3e:	4a7e      	ldr	r2, [pc, #504]	; (24056d38 <HAL_DMA_IRQHandler+0xa84>)
24056b40:	4293      	cmp	r3, r2
24056b42:	d013      	beq.n	24056b6c <HAL_DMA_IRQHandler+0x8b8>
24056b44:	687b      	ldr	r3, [r7, #4]
24056b46:	681b      	ldr	r3, [r3, #0]
24056b48:	4a7c      	ldr	r2, [pc, #496]	; (24056d3c <HAL_DMA_IRQHandler+0xa88>)
24056b4a:	4293      	cmp	r3, r2
24056b4c:	d00e      	beq.n	24056b6c <HAL_DMA_IRQHandler+0x8b8>
24056b4e:	687b      	ldr	r3, [r7, #4]
24056b50:	681b      	ldr	r3, [r3, #0]
24056b52:	4a7b      	ldr	r2, [pc, #492]	; (24056d40 <HAL_DMA_IRQHandler+0xa8c>)
24056b54:	4293      	cmp	r3, r2
24056b56:	d009      	beq.n	24056b6c <HAL_DMA_IRQHandler+0x8b8>
24056b58:	687b      	ldr	r3, [r7, #4]
24056b5a:	681b      	ldr	r3, [r3, #0]
24056b5c:	4a79      	ldr	r2, [pc, #484]	; (24056d44 <HAL_DMA_IRQHandler+0xa90>)
24056b5e:	4293      	cmp	r3, r2
24056b60:	d004      	beq.n	24056b6c <HAL_DMA_IRQHandler+0x8b8>
24056b62:	687b      	ldr	r3, [r7, #4]
24056b64:	681b      	ldr	r3, [r3, #0]
24056b66:	4a78      	ldr	r2, [pc, #480]	; (24056d48 <HAL_DMA_IRQHandler+0xa94>)
24056b68:	4293      	cmp	r3, r2
24056b6a:	d108      	bne.n	24056b7e <HAL_DMA_IRQHandler+0x8ca>
24056b6c:	687b      	ldr	r3, [r7, #4]
24056b6e:	681b      	ldr	r3, [r3, #0]
24056b70:	681a      	ldr	r2, [r3, #0]
24056b72:	687b      	ldr	r3, [r7, #4]
24056b74:	681b      	ldr	r3, [r3, #0]
24056b76:	f022 0201 	bic.w	r2, r2, #1
24056b7a:	601a      	str	r2, [r3, #0]
24056b7c:	e007      	b.n	24056b8e <HAL_DMA_IRQHandler+0x8da>
24056b7e:	687b      	ldr	r3, [r7, #4]
24056b80:	681b      	ldr	r3, [r3, #0]
24056b82:	681a      	ldr	r2, [r3, #0]
24056b84:	687b      	ldr	r3, [r7, #4]
24056b86:	681b      	ldr	r3, [r3, #0]
24056b88:	f022 0201 	bic.w	r2, r2, #1
24056b8c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
24056b8e:	68fb      	ldr	r3, [r7, #12]
24056b90:	3301      	adds	r3, #1
24056b92:	60fb      	str	r3, [r7, #12]
24056b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
24056b96:	429a      	cmp	r2, r3
24056b98:	d307      	bcc.n	24056baa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
24056b9a:	687b      	ldr	r3, [r7, #4]
24056b9c:	681b      	ldr	r3, [r3, #0]
24056b9e:	681b      	ldr	r3, [r3, #0]
24056ba0:	f003 0301 	and.w	r3, r3, #1
24056ba4:	2b00      	cmp	r3, #0
24056ba6:	d1f2      	bne.n	24056b8e <HAL_DMA_IRQHandler+0x8da>
24056ba8:	e000      	b.n	24056bac <HAL_DMA_IRQHandler+0x8f8>
            break;
24056baa:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
24056bac:	687b      	ldr	r3, [r7, #4]
24056bae:	681b      	ldr	r3, [r3, #0]
24056bb0:	681b      	ldr	r3, [r3, #0]
24056bb2:	f003 0301 	and.w	r3, r3, #1
24056bb6:	2b00      	cmp	r3, #0
24056bb8:	d004      	beq.n	24056bc4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
24056bba:	687b      	ldr	r3, [r7, #4]
24056bbc:	2203      	movs	r2, #3
24056bbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
24056bc2:	e003      	b.n	24056bcc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
24056bc4:	687b      	ldr	r3, [r7, #4]
24056bc6:	2201      	movs	r2, #1
24056bc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
24056bcc:	687b      	ldr	r3, [r7, #4]
24056bce:	2200      	movs	r2, #0
24056bd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
24056bd4:	687b      	ldr	r3, [r7, #4]
24056bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24056bd8:	2b00      	cmp	r3, #0
24056bda:	f000 82aa 	beq.w	24057132 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
24056bde:	687b      	ldr	r3, [r7, #4]
24056be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24056be2:	6878      	ldr	r0, [r7, #4]
24056be4:	4798      	blx	r3
24056be6:	e2a4      	b.n	24057132 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
24056be8:	687b      	ldr	r3, [r7, #4]
24056bea:	681b      	ldr	r3, [r3, #0]
24056bec:	4a57      	ldr	r2, [pc, #348]	; (24056d4c <HAL_DMA_IRQHandler+0xa98>)
24056bee:	4293      	cmp	r3, r2
24056bf0:	d04a      	beq.n	24056c88 <HAL_DMA_IRQHandler+0x9d4>
24056bf2:	687b      	ldr	r3, [r7, #4]
24056bf4:	681b      	ldr	r3, [r3, #0]
24056bf6:	4a56      	ldr	r2, [pc, #344]	; (24056d50 <HAL_DMA_IRQHandler+0xa9c>)
24056bf8:	4293      	cmp	r3, r2
24056bfa:	d045      	beq.n	24056c88 <HAL_DMA_IRQHandler+0x9d4>
24056bfc:	687b      	ldr	r3, [r7, #4]
24056bfe:	681b      	ldr	r3, [r3, #0]
24056c00:	4a54      	ldr	r2, [pc, #336]	; (24056d54 <HAL_DMA_IRQHandler+0xaa0>)
24056c02:	4293      	cmp	r3, r2
24056c04:	d040      	beq.n	24056c88 <HAL_DMA_IRQHandler+0x9d4>
24056c06:	687b      	ldr	r3, [r7, #4]
24056c08:	681b      	ldr	r3, [r3, #0]
24056c0a:	4a53      	ldr	r2, [pc, #332]	; (24056d58 <HAL_DMA_IRQHandler+0xaa4>)
24056c0c:	4293      	cmp	r3, r2
24056c0e:	d03b      	beq.n	24056c88 <HAL_DMA_IRQHandler+0x9d4>
24056c10:	687b      	ldr	r3, [r7, #4]
24056c12:	681b      	ldr	r3, [r3, #0]
24056c14:	4a51      	ldr	r2, [pc, #324]	; (24056d5c <HAL_DMA_IRQHandler+0xaa8>)
24056c16:	4293      	cmp	r3, r2
24056c18:	d036      	beq.n	24056c88 <HAL_DMA_IRQHandler+0x9d4>
24056c1a:	687b      	ldr	r3, [r7, #4]
24056c1c:	681b      	ldr	r3, [r3, #0]
24056c1e:	4a50      	ldr	r2, [pc, #320]	; (24056d60 <HAL_DMA_IRQHandler+0xaac>)
24056c20:	4293      	cmp	r3, r2
24056c22:	d031      	beq.n	24056c88 <HAL_DMA_IRQHandler+0x9d4>
24056c24:	687b      	ldr	r3, [r7, #4]
24056c26:	681b      	ldr	r3, [r3, #0]
24056c28:	4a4e      	ldr	r2, [pc, #312]	; (24056d64 <HAL_DMA_IRQHandler+0xab0>)
24056c2a:	4293      	cmp	r3, r2
24056c2c:	d02c      	beq.n	24056c88 <HAL_DMA_IRQHandler+0x9d4>
24056c2e:	687b      	ldr	r3, [r7, #4]
24056c30:	681b      	ldr	r3, [r3, #0]
24056c32:	4a4d      	ldr	r2, [pc, #308]	; (24056d68 <HAL_DMA_IRQHandler+0xab4>)
24056c34:	4293      	cmp	r3, r2
24056c36:	d027      	beq.n	24056c88 <HAL_DMA_IRQHandler+0x9d4>
24056c38:	687b      	ldr	r3, [r7, #4]
24056c3a:	681b      	ldr	r3, [r3, #0]
24056c3c:	4a4b      	ldr	r2, [pc, #300]	; (24056d6c <HAL_DMA_IRQHandler+0xab8>)
24056c3e:	4293      	cmp	r3, r2
24056c40:	d022      	beq.n	24056c88 <HAL_DMA_IRQHandler+0x9d4>
24056c42:	687b      	ldr	r3, [r7, #4]
24056c44:	681b      	ldr	r3, [r3, #0]
24056c46:	4a4a      	ldr	r2, [pc, #296]	; (24056d70 <HAL_DMA_IRQHandler+0xabc>)
24056c48:	4293      	cmp	r3, r2
24056c4a:	d01d      	beq.n	24056c88 <HAL_DMA_IRQHandler+0x9d4>
24056c4c:	687b      	ldr	r3, [r7, #4]
24056c4e:	681b      	ldr	r3, [r3, #0]
24056c50:	4a48      	ldr	r2, [pc, #288]	; (24056d74 <HAL_DMA_IRQHandler+0xac0>)
24056c52:	4293      	cmp	r3, r2
24056c54:	d018      	beq.n	24056c88 <HAL_DMA_IRQHandler+0x9d4>
24056c56:	687b      	ldr	r3, [r7, #4]
24056c58:	681b      	ldr	r3, [r3, #0]
24056c5a:	4a47      	ldr	r2, [pc, #284]	; (24056d78 <HAL_DMA_IRQHandler+0xac4>)
24056c5c:	4293      	cmp	r3, r2
24056c5e:	d013      	beq.n	24056c88 <HAL_DMA_IRQHandler+0x9d4>
24056c60:	687b      	ldr	r3, [r7, #4]
24056c62:	681b      	ldr	r3, [r3, #0]
24056c64:	4a45      	ldr	r2, [pc, #276]	; (24056d7c <HAL_DMA_IRQHandler+0xac8>)
24056c66:	4293      	cmp	r3, r2
24056c68:	d00e      	beq.n	24056c88 <HAL_DMA_IRQHandler+0x9d4>
24056c6a:	687b      	ldr	r3, [r7, #4]
24056c6c:	681b      	ldr	r3, [r3, #0]
24056c6e:	4a44      	ldr	r2, [pc, #272]	; (24056d80 <HAL_DMA_IRQHandler+0xacc>)
24056c70:	4293      	cmp	r3, r2
24056c72:	d009      	beq.n	24056c88 <HAL_DMA_IRQHandler+0x9d4>
24056c74:	687b      	ldr	r3, [r7, #4]
24056c76:	681b      	ldr	r3, [r3, #0]
24056c78:	4a42      	ldr	r2, [pc, #264]	; (24056d84 <HAL_DMA_IRQHandler+0xad0>)
24056c7a:	4293      	cmp	r3, r2
24056c7c:	d004      	beq.n	24056c88 <HAL_DMA_IRQHandler+0x9d4>
24056c7e:	687b      	ldr	r3, [r7, #4]
24056c80:	681b      	ldr	r3, [r3, #0]
24056c82:	4a41      	ldr	r2, [pc, #260]	; (24056d88 <HAL_DMA_IRQHandler+0xad4>)
24056c84:	4293      	cmp	r3, r2
24056c86:	d101      	bne.n	24056c8c <HAL_DMA_IRQHandler+0x9d8>
24056c88:	2301      	movs	r3, #1
24056c8a:	e000      	b.n	24056c8e <HAL_DMA_IRQHandler+0x9da>
24056c8c:	2300      	movs	r3, #0
24056c8e:	2b00      	cmp	r3, #0
24056c90:	f000 824f 	beq.w	24057132 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
24056c94:	687b      	ldr	r3, [r7, #4]
24056c96:	681b      	ldr	r3, [r3, #0]
24056c98:	681b      	ldr	r3, [r3, #0]
24056c9a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
24056c9c:	687b      	ldr	r3, [r7, #4]
24056c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24056ca0:	f003 031f 	and.w	r3, r3, #31
24056ca4:	2204      	movs	r2, #4
24056ca6:	409a      	lsls	r2, r3
24056ca8:	697b      	ldr	r3, [r7, #20]
24056caa:	4013      	ands	r3, r2
24056cac:	2b00      	cmp	r3, #0
24056cae:	f000 80dd 	beq.w	24056e6c <HAL_DMA_IRQHandler+0xbb8>
24056cb2:	693b      	ldr	r3, [r7, #16]
24056cb4:	f003 0304 	and.w	r3, r3, #4
24056cb8:	2b00      	cmp	r3, #0
24056cba:	f000 80d7 	beq.w	24056e6c <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
24056cbe:	687b      	ldr	r3, [r7, #4]
24056cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24056cc2:	f003 031f 	and.w	r3, r3, #31
24056cc6:	2204      	movs	r2, #4
24056cc8:	409a      	lsls	r2, r3
24056cca:	69fb      	ldr	r3, [r7, #28]
24056ccc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24056cce:	693b      	ldr	r3, [r7, #16]
24056cd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
24056cd4:	2b00      	cmp	r3, #0
24056cd6:	d059      	beq.n	24056d8c <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
24056cd8:	693b      	ldr	r3, [r7, #16]
24056cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24056cde:	2b00      	cmp	r3, #0
24056ce0:	d109      	bne.n	24056cf6 <HAL_DMA_IRQHandler+0xa42>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
24056ce2:	687b      	ldr	r3, [r7, #4]
24056ce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24056ce6:	2b00      	cmp	r3, #0
24056ce8:	f000 8220 	beq.w	2405712c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
24056cec:	687b      	ldr	r3, [r7, #4]
24056cee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24056cf0:	6878      	ldr	r0, [r7, #4]
24056cf2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24056cf4:	e21a      	b.n	2405712c <HAL_DMA_IRQHandler+0xe78>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
24056cf6:	687b      	ldr	r3, [r7, #4]
24056cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24056cfa:	2b00      	cmp	r3, #0
24056cfc:	f000 8216 	beq.w	2405712c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
24056d00:	687b      	ldr	r3, [r7, #4]
24056d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24056d04:	6878      	ldr	r0, [r7, #4]
24056d06:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24056d08:	e210      	b.n	2405712c <HAL_DMA_IRQHandler+0xe78>
24056d0a:	bf00      	nop
24056d0c:	40020010 	.word	0x40020010
24056d10:	40020028 	.word	0x40020028
24056d14:	40020040 	.word	0x40020040
24056d18:	40020058 	.word	0x40020058
24056d1c:	40020070 	.word	0x40020070
24056d20:	40020088 	.word	0x40020088
24056d24:	400200a0 	.word	0x400200a0
24056d28:	400200b8 	.word	0x400200b8
24056d2c:	40020410 	.word	0x40020410
24056d30:	40020428 	.word	0x40020428
24056d34:	40020440 	.word	0x40020440
24056d38:	40020458 	.word	0x40020458
24056d3c:	40020470 	.word	0x40020470
24056d40:	40020488 	.word	0x40020488
24056d44:	400204a0 	.word	0x400204a0
24056d48:	400204b8 	.word	0x400204b8
24056d4c:	48022c08 	.word	0x48022c08
24056d50:	48022c1c 	.word	0x48022c1c
24056d54:	48022c30 	.word	0x48022c30
24056d58:	48022c44 	.word	0x48022c44
24056d5c:	48022c58 	.word	0x48022c58
24056d60:	48022c6c 	.word	0x48022c6c
24056d64:	48022c80 	.word	0x48022c80
24056d68:	48022c94 	.word	0x48022c94
24056d6c:	58025408 	.word	0x58025408
24056d70:	5802541c 	.word	0x5802541c
24056d74:	58025430 	.word	0x58025430
24056d78:	58025444 	.word	0x58025444
24056d7c:	58025458 	.word	0x58025458
24056d80:	5802546c 	.word	0x5802546c
24056d84:	58025480 	.word	0x58025480
24056d88:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
24056d8c:	693b      	ldr	r3, [r7, #16]
24056d8e:	f003 0320 	and.w	r3, r3, #32
24056d92:	2b00      	cmp	r3, #0
24056d94:	d160      	bne.n	24056e58 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
24056d96:	687b      	ldr	r3, [r7, #4]
24056d98:	681b      	ldr	r3, [r3, #0]
24056d9a:	4a8c      	ldr	r2, [pc, #560]	; (24056fcc <HAL_DMA_IRQHandler+0xd18>)
24056d9c:	4293      	cmp	r3, r2
24056d9e:	d04a      	beq.n	24056e36 <HAL_DMA_IRQHandler+0xb82>
24056da0:	687b      	ldr	r3, [r7, #4]
24056da2:	681b      	ldr	r3, [r3, #0]
24056da4:	4a8a      	ldr	r2, [pc, #552]	; (24056fd0 <HAL_DMA_IRQHandler+0xd1c>)
24056da6:	4293      	cmp	r3, r2
24056da8:	d045      	beq.n	24056e36 <HAL_DMA_IRQHandler+0xb82>
24056daa:	687b      	ldr	r3, [r7, #4]
24056dac:	681b      	ldr	r3, [r3, #0]
24056dae:	4a89      	ldr	r2, [pc, #548]	; (24056fd4 <HAL_DMA_IRQHandler+0xd20>)
24056db0:	4293      	cmp	r3, r2
24056db2:	d040      	beq.n	24056e36 <HAL_DMA_IRQHandler+0xb82>
24056db4:	687b      	ldr	r3, [r7, #4]
24056db6:	681b      	ldr	r3, [r3, #0]
24056db8:	4a87      	ldr	r2, [pc, #540]	; (24056fd8 <HAL_DMA_IRQHandler+0xd24>)
24056dba:	4293      	cmp	r3, r2
24056dbc:	d03b      	beq.n	24056e36 <HAL_DMA_IRQHandler+0xb82>
24056dbe:	687b      	ldr	r3, [r7, #4]
24056dc0:	681b      	ldr	r3, [r3, #0]
24056dc2:	4a86      	ldr	r2, [pc, #536]	; (24056fdc <HAL_DMA_IRQHandler+0xd28>)
24056dc4:	4293      	cmp	r3, r2
24056dc6:	d036      	beq.n	24056e36 <HAL_DMA_IRQHandler+0xb82>
24056dc8:	687b      	ldr	r3, [r7, #4]
24056dca:	681b      	ldr	r3, [r3, #0]
24056dcc:	4a84      	ldr	r2, [pc, #528]	; (24056fe0 <HAL_DMA_IRQHandler+0xd2c>)
24056dce:	4293      	cmp	r3, r2
24056dd0:	d031      	beq.n	24056e36 <HAL_DMA_IRQHandler+0xb82>
24056dd2:	687b      	ldr	r3, [r7, #4]
24056dd4:	681b      	ldr	r3, [r3, #0]
24056dd6:	4a83      	ldr	r2, [pc, #524]	; (24056fe4 <HAL_DMA_IRQHandler+0xd30>)
24056dd8:	4293      	cmp	r3, r2
24056dda:	d02c      	beq.n	24056e36 <HAL_DMA_IRQHandler+0xb82>
24056ddc:	687b      	ldr	r3, [r7, #4]
24056dde:	681b      	ldr	r3, [r3, #0]
24056de0:	4a81      	ldr	r2, [pc, #516]	; (24056fe8 <HAL_DMA_IRQHandler+0xd34>)
24056de2:	4293      	cmp	r3, r2
24056de4:	d027      	beq.n	24056e36 <HAL_DMA_IRQHandler+0xb82>
24056de6:	687b      	ldr	r3, [r7, #4]
24056de8:	681b      	ldr	r3, [r3, #0]
24056dea:	4a80      	ldr	r2, [pc, #512]	; (24056fec <HAL_DMA_IRQHandler+0xd38>)
24056dec:	4293      	cmp	r3, r2
24056dee:	d022      	beq.n	24056e36 <HAL_DMA_IRQHandler+0xb82>
24056df0:	687b      	ldr	r3, [r7, #4]
24056df2:	681b      	ldr	r3, [r3, #0]
24056df4:	4a7e      	ldr	r2, [pc, #504]	; (24056ff0 <HAL_DMA_IRQHandler+0xd3c>)
24056df6:	4293      	cmp	r3, r2
24056df8:	d01d      	beq.n	24056e36 <HAL_DMA_IRQHandler+0xb82>
24056dfa:	687b      	ldr	r3, [r7, #4]
24056dfc:	681b      	ldr	r3, [r3, #0]
24056dfe:	4a7d      	ldr	r2, [pc, #500]	; (24056ff4 <HAL_DMA_IRQHandler+0xd40>)
24056e00:	4293      	cmp	r3, r2
24056e02:	d018      	beq.n	24056e36 <HAL_DMA_IRQHandler+0xb82>
24056e04:	687b      	ldr	r3, [r7, #4]
24056e06:	681b      	ldr	r3, [r3, #0]
24056e08:	4a7b      	ldr	r2, [pc, #492]	; (24056ff8 <HAL_DMA_IRQHandler+0xd44>)
24056e0a:	4293      	cmp	r3, r2
24056e0c:	d013      	beq.n	24056e36 <HAL_DMA_IRQHandler+0xb82>
24056e0e:	687b      	ldr	r3, [r7, #4]
24056e10:	681b      	ldr	r3, [r3, #0]
24056e12:	4a7a      	ldr	r2, [pc, #488]	; (24056ffc <HAL_DMA_IRQHandler+0xd48>)
24056e14:	4293      	cmp	r3, r2
24056e16:	d00e      	beq.n	24056e36 <HAL_DMA_IRQHandler+0xb82>
24056e18:	687b      	ldr	r3, [r7, #4]
24056e1a:	681b      	ldr	r3, [r3, #0]
24056e1c:	4a78      	ldr	r2, [pc, #480]	; (24057000 <HAL_DMA_IRQHandler+0xd4c>)
24056e1e:	4293      	cmp	r3, r2
24056e20:	d009      	beq.n	24056e36 <HAL_DMA_IRQHandler+0xb82>
24056e22:	687b      	ldr	r3, [r7, #4]
24056e24:	681b      	ldr	r3, [r3, #0]
24056e26:	4a77      	ldr	r2, [pc, #476]	; (24057004 <HAL_DMA_IRQHandler+0xd50>)
24056e28:	4293      	cmp	r3, r2
24056e2a:	d004      	beq.n	24056e36 <HAL_DMA_IRQHandler+0xb82>
24056e2c:	687b      	ldr	r3, [r7, #4]
24056e2e:	681b      	ldr	r3, [r3, #0]
24056e30:	4a75      	ldr	r2, [pc, #468]	; (24057008 <HAL_DMA_IRQHandler+0xd54>)
24056e32:	4293      	cmp	r3, r2
24056e34:	d108      	bne.n	24056e48 <HAL_DMA_IRQHandler+0xb94>
24056e36:	687b      	ldr	r3, [r7, #4]
24056e38:	681b      	ldr	r3, [r3, #0]
24056e3a:	681a      	ldr	r2, [r3, #0]
24056e3c:	687b      	ldr	r3, [r7, #4]
24056e3e:	681b      	ldr	r3, [r3, #0]
24056e40:	f022 0208 	bic.w	r2, r2, #8
24056e44:	601a      	str	r2, [r3, #0]
24056e46:	e007      	b.n	24056e58 <HAL_DMA_IRQHandler+0xba4>
24056e48:	687b      	ldr	r3, [r7, #4]
24056e4a:	681b      	ldr	r3, [r3, #0]
24056e4c:	681a      	ldr	r2, [r3, #0]
24056e4e:	687b      	ldr	r3, [r7, #4]
24056e50:	681b      	ldr	r3, [r3, #0]
24056e52:	f022 0204 	bic.w	r2, r2, #4
24056e56:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
24056e58:	687b      	ldr	r3, [r7, #4]
24056e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24056e5c:	2b00      	cmp	r3, #0
24056e5e:	f000 8165 	beq.w	2405712c <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
24056e62:	687b      	ldr	r3, [r7, #4]
24056e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24056e66:	6878      	ldr	r0, [r7, #4]
24056e68:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24056e6a:	e15f      	b.n	2405712c <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
24056e6c:	687b      	ldr	r3, [r7, #4]
24056e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24056e70:	f003 031f 	and.w	r3, r3, #31
24056e74:	2202      	movs	r2, #2
24056e76:	409a      	lsls	r2, r3
24056e78:	697b      	ldr	r3, [r7, #20]
24056e7a:	4013      	ands	r3, r2
24056e7c:	2b00      	cmp	r3, #0
24056e7e:	f000 80c5 	beq.w	2405700c <HAL_DMA_IRQHandler+0xd58>
24056e82:	693b      	ldr	r3, [r7, #16]
24056e84:	f003 0302 	and.w	r3, r3, #2
24056e88:	2b00      	cmp	r3, #0
24056e8a:	f000 80bf 	beq.w	2405700c <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
24056e8e:	687b      	ldr	r3, [r7, #4]
24056e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24056e92:	f003 031f 	and.w	r3, r3, #31
24056e96:	2202      	movs	r2, #2
24056e98:	409a      	lsls	r2, r3
24056e9a:	69fb      	ldr	r3, [r7, #28]
24056e9c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24056e9e:	693b      	ldr	r3, [r7, #16]
24056ea0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
24056ea4:	2b00      	cmp	r3, #0
24056ea6:	d018      	beq.n	24056eda <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
24056ea8:	693b      	ldr	r3, [r7, #16]
24056eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24056eae:	2b00      	cmp	r3, #0
24056eb0:	d109      	bne.n	24056ec6 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
24056eb2:	687b      	ldr	r3, [r7, #4]
24056eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24056eb6:	2b00      	cmp	r3, #0
24056eb8:	f000 813a 	beq.w	24057130 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
24056ebc:	687b      	ldr	r3, [r7, #4]
24056ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24056ec0:	6878      	ldr	r0, [r7, #4]
24056ec2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24056ec4:	e134      	b.n	24057130 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
24056ec6:	687b      	ldr	r3, [r7, #4]
24056ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24056eca:	2b00      	cmp	r3, #0
24056ecc:	f000 8130 	beq.w	24057130 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
24056ed0:	687b      	ldr	r3, [r7, #4]
24056ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24056ed4:	6878      	ldr	r0, [r7, #4]
24056ed6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24056ed8:	e12a      	b.n	24057130 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
24056eda:	693b      	ldr	r3, [r7, #16]
24056edc:	f003 0320 	and.w	r3, r3, #32
24056ee0:	2b00      	cmp	r3, #0
24056ee2:	d168      	bne.n	24056fb6 <HAL_DMA_IRQHandler+0xd02>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
24056ee4:	687b      	ldr	r3, [r7, #4]
24056ee6:	681b      	ldr	r3, [r3, #0]
24056ee8:	4a38      	ldr	r2, [pc, #224]	; (24056fcc <HAL_DMA_IRQHandler+0xd18>)
24056eea:	4293      	cmp	r3, r2
24056eec:	d04a      	beq.n	24056f84 <HAL_DMA_IRQHandler+0xcd0>
24056eee:	687b      	ldr	r3, [r7, #4]
24056ef0:	681b      	ldr	r3, [r3, #0]
24056ef2:	4a37      	ldr	r2, [pc, #220]	; (24056fd0 <HAL_DMA_IRQHandler+0xd1c>)
24056ef4:	4293      	cmp	r3, r2
24056ef6:	d045      	beq.n	24056f84 <HAL_DMA_IRQHandler+0xcd0>
24056ef8:	687b      	ldr	r3, [r7, #4]
24056efa:	681b      	ldr	r3, [r3, #0]
24056efc:	4a35      	ldr	r2, [pc, #212]	; (24056fd4 <HAL_DMA_IRQHandler+0xd20>)
24056efe:	4293      	cmp	r3, r2
24056f00:	d040      	beq.n	24056f84 <HAL_DMA_IRQHandler+0xcd0>
24056f02:	687b      	ldr	r3, [r7, #4]
24056f04:	681b      	ldr	r3, [r3, #0]
24056f06:	4a34      	ldr	r2, [pc, #208]	; (24056fd8 <HAL_DMA_IRQHandler+0xd24>)
24056f08:	4293      	cmp	r3, r2
24056f0a:	d03b      	beq.n	24056f84 <HAL_DMA_IRQHandler+0xcd0>
24056f0c:	687b      	ldr	r3, [r7, #4]
24056f0e:	681b      	ldr	r3, [r3, #0]
24056f10:	4a32      	ldr	r2, [pc, #200]	; (24056fdc <HAL_DMA_IRQHandler+0xd28>)
24056f12:	4293      	cmp	r3, r2
24056f14:	d036      	beq.n	24056f84 <HAL_DMA_IRQHandler+0xcd0>
24056f16:	687b      	ldr	r3, [r7, #4]
24056f18:	681b      	ldr	r3, [r3, #0]
24056f1a:	4a31      	ldr	r2, [pc, #196]	; (24056fe0 <HAL_DMA_IRQHandler+0xd2c>)
24056f1c:	4293      	cmp	r3, r2
24056f1e:	d031      	beq.n	24056f84 <HAL_DMA_IRQHandler+0xcd0>
24056f20:	687b      	ldr	r3, [r7, #4]
24056f22:	681b      	ldr	r3, [r3, #0]
24056f24:	4a2f      	ldr	r2, [pc, #188]	; (24056fe4 <HAL_DMA_IRQHandler+0xd30>)
24056f26:	4293      	cmp	r3, r2
24056f28:	d02c      	beq.n	24056f84 <HAL_DMA_IRQHandler+0xcd0>
24056f2a:	687b      	ldr	r3, [r7, #4]
24056f2c:	681b      	ldr	r3, [r3, #0]
24056f2e:	4a2e      	ldr	r2, [pc, #184]	; (24056fe8 <HAL_DMA_IRQHandler+0xd34>)
24056f30:	4293      	cmp	r3, r2
24056f32:	d027      	beq.n	24056f84 <HAL_DMA_IRQHandler+0xcd0>
24056f34:	687b      	ldr	r3, [r7, #4]
24056f36:	681b      	ldr	r3, [r3, #0]
24056f38:	4a2c      	ldr	r2, [pc, #176]	; (24056fec <HAL_DMA_IRQHandler+0xd38>)
24056f3a:	4293      	cmp	r3, r2
24056f3c:	d022      	beq.n	24056f84 <HAL_DMA_IRQHandler+0xcd0>
24056f3e:	687b      	ldr	r3, [r7, #4]
24056f40:	681b      	ldr	r3, [r3, #0]
24056f42:	4a2b      	ldr	r2, [pc, #172]	; (24056ff0 <HAL_DMA_IRQHandler+0xd3c>)
24056f44:	4293      	cmp	r3, r2
24056f46:	d01d      	beq.n	24056f84 <HAL_DMA_IRQHandler+0xcd0>
24056f48:	687b      	ldr	r3, [r7, #4]
24056f4a:	681b      	ldr	r3, [r3, #0]
24056f4c:	4a29      	ldr	r2, [pc, #164]	; (24056ff4 <HAL_DMA_IRQHandler+0xd40>)
24056f4e:	4293      	cmp	r3, r2
24056f50:	d018      	beq.n	24056f84 <HAL_DMA_IRQHandler+0xcd0>
24056f52:	687b      	ldr	r3, [r7, #4]
24056f54:	681b      	ldr	r3, [r3, #0]
24056f56:	4a28      	ldr	r2, [pc, #160]	; (24056ff8 <HAL_DMA_IRQHandler+0xd44>)
24056f58:	4293      	cmp	r3, r2
24056f5a:	d013      	beq.n	24056f84 <HAL_DMA_IRQHandler+0xcd0>
24056f5c:	687b      	ldr	r3, [r7, #4]
24056f5e:	681b      	ldr	r3, [r3, #0]
24056f60:	4a26      	ldr	r2, [pc, #152]	; (24056ffc <HAL_DMA_IRQHandler+0xd48>)
24056f62:	4293      	cmp	r3, r2
24056f64:	d00e      	beq.n	24056f84 <HAL_DMA_IRQHandler+0xcd0>
24056f66:	687b      	ldr	r3, [r7, #4]
24056f68:	681b      	ldr	r3, [r3, #0]
24056f6a:	4a25      	ldr	r2, [pc, #148]	; (24057000 <HAL_DMA_IRQHandler+0xd4c>)
24056f6c:	4293      	cmp	r3, r2
24056f6e:	d009      	beq.n	24056f84 <HAL_DMA_IRQHandler+0xcd0>
24056f70:	687b      	ldr	r3, [r7, #4]
24056f72:	681b      	ldr	r3, [r3, #0]
24056f74:	4a23      	ldr	r2, [pc, #140]	; (24057004 <HAL_DMA_IRQHandler+0xd50>)
24056f76:	4293      	cmp	r3, r2
24056f78:	d004      	beq.n	24056f84 <HAL_DMA_IRQHandler+0xcd0>
24056f7a:	687b      	ldr	r3, [r7, #4]
24056f7c:	681b      	ldr	r3, [r3, #0]
24056f7e:	4a22      	ldr	r2, [pc, #136]	; (24057008 <HAL_DMA_IRQHandler+0xd54>)
24056f80:	4293      	cmp	r3, r2
24056f82:	d108      	bne.n	24056f96 <HAL_DMA_IRQHandler+0xce2>
24056f84:	687b      	ldr	r3, [r7, #4]
24056f86:	681b      	ldr	r3, [r3, #0]
24056f88:	681a      	ldr	r2, [r3, #0]
24056f8a:	687b      	ldr	r3, [r7, #4]
24056f8c:	681b      	ldr	r3, [r3, #0]
24056f8e:	f022 0214 	bic.w	r2, r2, #20
24056f92:	601a      	str	r2, [r3, #0]
24056f94:	e007      	b.n	24056fa6 <HAL_DMA_IRQHandler+0xcf2>
24056f96:	687b      	ldr	r3, [r7, #4]
24056f98:	681b      	ldr	r3, [r3, #0]
24056f9a:	681a      	ldr	r2, [r3, #0]
24056f9c:	687b      	ldr	r3, [r7, #4]
24056f9e:	681b      	ldr	r3, [r3, #0]
24056fa0:	f022 020a 	bic.w	r2, r2, #10
24056fa4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
24056fa6:	687b      	ldr	r3, [r7, #4]
24056fa8:	2201      	movs	r2, #1
24056faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
24056fae:	687b      	ldr	r3, [r7, #4]
24056fb0:	2200      	movs	r2, #0
24056fb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
24056fb6:	687b      	ldr	r3, [r7, #4]
24056fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24056fba:	2b00      	cmp	r3, #0
24056fbc:	f000 80b8 	beq.w	24057130 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
24056fc0:	687b      	ldr	r3, [r7, #4]
24056fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24056fc4:	6878      	ldr	r0, [r7, #4]
24056fc6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24056fc8:	e0b2      	b.n	24057130 <HAL_DMA_IRQHandler+0xe7c>
24056fca:	bf00      	nop
24056fcc:	40020010 	.word	0x40020010
24056fd0:	40020028 	.word	0x40020028
24056fd4:	40020040 	.word	0x40020040
24056fd8:	40020058 	.word	0x40020058
24056fdc:	40020070 	.word	0x40020070
24056fe0:	40020088 	.word	0x40020088
24056fe4:	400200a0 	.word	0x400200a0
24056fe8:	400200b8 	.word	0x400200b8
24056fec:	40020410 	.word	0x40020410
24056ff0:	40020428 	.word	0x40020428
24056ff4:	40020440 	.word	0x40020440
24056ff8:	40020458 	.word	0x40020458
24056ffc:	40020470 	.word	0x40020470
24057000:	40020488 	.word	0x40020488
24057004:	400204a0 	.word	0x400204a0
24057008:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
2405700c:	687b      	ldr	r3, [r7, #4]
2405700e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24057010:	f003 031f 	and.w	r3, r3, #31
24057014:	2208      	movs	r2, #8
24057016:	409a      	lsls	r2, r3
24057018:	697b      	ldr	r3, [r7, #20]
2405701a:	4013      	ands	r3, r2
2405701c:	2b00      	cmp	r3, #0
2405701e:	f000 8088 	beq.w	24057132 <HAL_DMA_IRQHandler+0xe7e>
24057022:	693b      	ldr	r3, [r7, #16]
24057024:	f003 0308 	and.w	r3, r3, #8
24057028:	2b00      	cmp	r3, #0
2405702a:	f000 8082 	beq.w	24057132 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
2405702e:	687b      	ldr	r3, [r7, #4]
24057030:	681b      	ldr	r3, [r3, #0]
24057032:	4a41      	ldr	r2, [pc, #260]	; (24057138 <HAL_DMA_IRQHandler+0xe84>)
24057034:	4293      	cmp	r3, r2
24057036:	d04a      	beq.n	240570ce <HAL_DMA_IRQHandler+0xe1a>
24057038:	687b      	ldr	r3, [r7, #4]
2405703a:	681b      	ldr	r3, [r3, #0]
2405703c:	4a3f      	ldr	r2, [pc, #252]	; (2405713c <HAL_DMA_IRQHandler+0xe88>)
2405703e:	4293      	cmp	r3, r2
24057040:	d045      	beq.n	240570ce <HAL_DMA_IRQHandler+0xe1a>
24057042:	687b      	ldr	r3, [r7, #4]
24057044:	681b      	ldr	r3, [r3, #0]
24057046:	4a3e      	ldr	r2, [pc, #248]	; (24057140 <HAL_DMA_IRQHandler+0xe8c>)
24057048:	4293      	cmp	r3, r2
2405704a:	d040      	beq.n	240570ce <HAL_DMA_IRQHandler+0xe1a>
2405704c:	687b      	ldr	r3, [r7, #4]
2405704e:	681b      	ldr	r3, [r3, #0]
24057050:	4a3c      	ldr	r2, [pc, #240]	; (24057144 <HAL_DMA_IRQHandler+0xe90>)
24057052:	4293      	cmp	r3, r2
24057054:	d03b      	beq.n	240570ce <HAL_DMA_IRQHandler+0xe1a>
24057056:	687b      	ldr	r3, [r7, #4]
24057058:	681b      	ldr	r3, [r3, #0]
2405705a:	4a3b      	ldr	r2, [pc, #236]	; (24057148 <HAL_DMA_IRQHandler+0xe94>)
2405705c:	4293      	cmp	r3, r2
2405705e:	d036      	beq.n	240570ce <HAL_DMA_IRQHandler+0xe1a>
24057060:	687b      	ldr	r3, [r7, #4]
24057062:	681b      	ldr	r3, [r3, #0]
24057064:	4a39      	ldr	r2, [pc, #228]	; (2405714c <HAL_DMA_IRQHandler+0xe98>)
24057066:	4293      	cmp	r3, r2
24057068:	d031      	beq.n	240570ce <HAL_DMA_IRQHandler+0xe1a>
2405706a:	687b      	ldr	r3, [r7, #4]
2405706c:	681b      	ldr	r3, [r3, #0]
2405706e:	4a38      	ldr	r2, [pc, #224]	; (24057150 <HAL_DMA_IRQHandler+0xe9c>)
24057070:	4293      	cmp	r3, r2
24057072:	d02c      	beq.n	240570ce <HAL_DMA_IRQHandler+0xe1a>
24057074:	687b      	ldr	r3, [r7, #4]
24057076:	681b      	ldr	r3, [r3, #0]
24057078:	4a36      	ldr	r2, [pc, #216]	; (24057154 <HAL_DMA_IRQHandler+0xea0>)
2405707a:	4293      	cmp	r3, r2
2405707c:	d027      	beq.n	240570ce <HAL_DMA_IRQHandler+0xe1a>
2405707e:	687b      	ldr	r3, [r7, #4]
24057080:	681b      	ldr	r3, [r3, #0]
24057082:	4a35      	ldr	r2, [pc, #212]	; (24057158 <HAL_DMA_IRQHandler+0xea4>)
24057084:	4293      	cmp	r3, r2
24057086:	d022      	beq.n	240570ce <HAL_DMA_IRQHandler+0xe1a>
24057088:	687b      	ldr	r3, [r7, #4]
2405708a:	681b      	ldr	r3, [r3, #0]
2405708c:	4a33      	ldr	r2, [pc, #204]	; (2405715c <HAL_DMA_IRQHandler+0xea8>)
2405708e:	4293      	cmp	r3, r2
24057090:	d01d      	beq.n	240570ce <HAL_DMA_IRQHandler+0xe1a>
24057092:	687b      	ldr	r3, [r7, #4]
24057094:	681b      	ldr	r3, [r3, #0]
24057096:	4a32      	ldr	r2, [pc, #200]	; (24057160 <HAL_DMA_IRQHandler+0xeac>)
24057098:	4293      	cmp	r3, r2
2405709a:	d018      	beq.n	240570ce <HAL_DMA_IRQHandler+0xe1a>
2405709c:	687b      	ldr	r3, [r7, #4]
2405709e:	681b      	ldr	r3, [r3, #0]
240570a0:	4a30      	ldr	r2, [pc, #192]	; (24057164 <HAL_DMA_IRQHandler+0xeb0>)
240570a2:	4293      	cmp	r3, r2
240570a4:	d013      	beq.n	240570ce <HAL_DMA_IRQHandler+0xe1a>
240570a6:	687b      	ldr	r3, [r7, #4]
240570a8:	681b      	ldr	r3, [r3, #0]
240570aa:	4a2f      	ldr	r2, [pc, #188]	; (24057168 <HAL_DMA_IRQHandler+0xeb4>)
240570ac:	4293      	cmp	r3, r2
240570ae:	d00e      	beq.n	240570ce <HAL_DMA_IRQHandler+0xe1a>
240570b0:	687b      	ldr	r3, [r7, #4]
240570b2:	681b      	ldr	r3, [r3, #0]
240570b4:	4a2d      	ldr	r2, [pc, #180]	; (2405716c <HAL_DMA_IRQHandler+0xeb8>)
240570b6:	4293      	cmp	r3, r2
240570b8:	d009      	beq.n	240570ce <HAL_DMA_IRQHandler+0xe1a>
240570ba:	687b      	ldr	r3, [r7, #4]
240570bc:	681b      	ldr	r3, [r3, #0]
240570be:	4a2c      	ldr	r2, [pc, #176]	; (24057170 <HAL_DMA_IRQHandler+0xebc>)
240570c0:	4293      	cmp	r3, r2
240570c2:	d004      	beq.n	240570ce <HAL_DMA_IRQHandler+0xe1a>
240570c4:	687b      	ldr	r3, [r7, #4]
240570c6:	681b      	ldr	r3, [r3, #0]
240570c8:	4a2a      	ldr	r2, [pc, #168]	; (24057174 <HAL_DMA_IRQHandler+0xec0>)
240570ca:	4293      	cmp	r3, r2
240570cc:	d108      	bne.n	240570e0 <HAL_DMA_IRQHandler+0xe2c>
240570ce:	687b      	ldr	r3, [r7, #4]
240570d0:	681b      	ldr	r3, [r3, #0]
240570d2:	681a      	ldr	r2, [r3, #0]
240570d4:	687b      	ldr	r3, [r7, #4]
240570d6:	681b      	ldr	r3, [r3, #0]
240570d8:	f022 021c 	bic.w	r2, r2, #28
240570dc:	601a      	str	r2, [r3, #0]
240570de:	e007      	b.n	240570f0 <HAL_DMA_IRQHandler+0xe3c>
240570e0:	687b      	ldr	r3, [r7, #4]
240570e2:	681b      	ldr	r3, [r3, #0]
240570e4:	681a      	ldr	r2, [r3, #0]
240570e6:	687b      	ldr	r3, [r7, #4]
240570e8:	681b      	ldr	r3, [r3, #0]
240570ea:	f022 020e 	bic.w	r2, r2, #14
240570ee:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
240570f0:	687b      	ldr	r3, [r7, #4]
240570f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240570f4:	f003 031f 	and.w	r3, r3, #31
240570f8:	2201      	movs	r2, #1
240570fa:	409a      	lsls	r2, r3
240570fc:	69fb      	ldr	r3, [r7, #28]
240570fe:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
24057100:	687b      	ldr	r3, [r7, #4]
24057102:	2201      	movs	r2, #1
24057104:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
24057106:	687b      	ldr	r3, [r7, #4]
24057108:	2201      	movs	r2, #1
2405710a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
2405710e:	687b      	ldr	r3, [r7, #4]
24057110:	2200      	movs	r2, #0
24057112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
24057116:	687b      	ldr	r3, [r7, #4]
24057118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405711a:	2b00      	cmp	r3, #0
2405711c:	d009      	beq.n	24057132 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
2405711e:	687b      	ldr	r3, [r7, #4]
24057120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24057122:	6878      	ldr	r0, [r7, #4]
24057124:	4798      	blx	r3
24057126:	e004      	b.n	24057132 <HAL_DMA_IRQHandler+0xe7e>
          return;
24057128:	bf00      	nop
2405712a:	e002      	b.n	24057132 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
2405712c:	bf00      	nop
2405712e:	e000      	b.n	24057132 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24057130:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
24057132:	3728      	adds	r7, #40	; 0x28
24057134:	46bd      	mov	sp, r7
24057136:	bd80      	pop	{r7, pc}
24057138:	40020010 	.word	0x40020010
2405713c:	40020028 	.word	0x40020028
24057140:	40020040 	.word	0x40020040
24057144:	40020058 	.word	0x40020058
24057148:	40020070 	.word	0x40020070
2405714c:	40020088 	.word	0x40020088
24057150:	400200a0 	.word	0x400200a0
24057154:	400200b8 	.word	0x400200b8
24057158:	40020410 	.word	0x40020410
2405715c:	40020428 	.word	0x40020428
24057160:	40020440 	.word	0x40020440
24057164:	40020458 	.word	0x40020458
24057168:	40020470 	.word	0x40020470
2405716c:	40020488 	.word	0x40020488
24057170:	400204a0 	.word	0x400204a0
24057174:	400204b8 	.word	0x400204b8

24057178 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
24057178:	b480      	push	{r7}
2405717a:	b083      	sub	sp, #12
2405717c:	af00      	add	r7, sp, #0
2405717e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
24057180:	687b      	ldr	r3, [r7, #4]
24057182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
24057184:	4618      	mov	r0, r3
24057186:	370c      	adds	r7, #12
24057188:	46bd      	mov	sp, r7
2405718a:	f85d 7b04 	ldr.w	r7, [sp], #4
2405718e:	4770      	bx	lr

24057190 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
24057190:	b480      	push	{r7}
24057192:	b087      	sub	sp, #28
24057194:	af00      	add	r7, sp, #0
24057196:	60f8      	str	r0, [r7, #12]
24057198:	60b9      	str	r1, [r7, #8]
2405719a:	607a      	str	r2, [r7, #4]
2405719c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
2405719e:	68fb      	ldr	r3, [r7, #12]
240571a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240571a2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
240571a4:	68fb      	ldr	r3, [r7, #12]
240571a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240571a8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240571aa:	68fb      	ldr	r3, [r7, #12]
240571ac:	681b      	ldr	r3, [r3, #0]
240571ae:	4a84      	ldr	r2, [pc, #528]	; (240573c0 <DMA_SetConfig+0x230>)
240571b0:	4293      	cmp	r3, r2
240571b2:	d072      	beq.n	2405729a <DMA_SetConfig+0x10a>
240571b4:	68fb      	ldr	r3, [r7, #12]
240571b6:	681b      	ldr	r3, [r3, #0]
240571b8:	4a82      	ldr	r2, [pc, #520]	; (240573c4 <DMA_SetConfig+0x234>)
240571ba:	4293      	cmp	r3, r2
240571bc:	d06d      	beq.n	2405729a <DMA_SetConfig+0x10a>
240571be:	68fb      	ldr	r3, [r7, #12]
240571c0:	681b      	ldr	r3, [r3, #0]
240571c2:	4a81      	ldr	r2, [pc, #516]	; (240573c8 <DMA_SetConfig+0x238>)
240571c4:	4293      	cmp	r3, r2
240571c6:	d068      	beq.n	2405729a <DMA_SetConfig+0x10a>
240571c8:	68fb      	ldr	r3, [r7, #12]
240571ca:	681b      	ldr	r3, [r3, #0]
240571cc:	4a7f      	ldr	r2, [pc, #508]	; (240573cc <DMA_SetConfig+0x23c>)
240571ce:	4293      	cmp	r3, r2
240571d0:	d063      	beq.n	2405729a <DMA_SetConfig+0x10a>
240571d2:	68fb      	ldr	r3, [r7, #12]
240571d4:	681b      	ldr	r3, [r3, #0]
240571d6:	4a7e      	ldr	r2, [pc, #504]	; (240573d0 <DMA_SetConfig+0x240>)
240571d8:	4293      	cmp	r3, r2
240571da:	d05e      	beq.n	2405729a <DMA_SetConfig+0x10a>
240571dc:	68fb      	ldr	r3, [r7, #12]
240571de:	681b      	ldr	r3, [r3, #0]
240571e0:	4a7c      	ldr	r2, [pc, #496]	; (240573d4 <DMA_SetConfig+0x244>)
240571e2:	4293      	cmp	r3, r2
240571e4:	d059      	beq.n	2405729a <DMA_SetConfig+0x10a>
240571e6:	68fb      	ldr	r3, [r7, #12]
240571e8:	681b      	ldr	r3, [r3, #0]
240571ea:	4a7b      	ldr	r2, [pc, #492]	; (240573d8 <DMA_SetConfig+0x248>)
240571ec:	4293      	cmp	r3, r2
240571ee:	d054      	beq.n	2405729a <DMA_SetConfig+0x10a>
240571f0:	68fb      	ldr	r3, [r7, #12]
240571f2:	681b      	ldr	r3, [r3, #0]
240571f4:	4a79      	ldr	r2, [pc, #484]	; (240573dc <DMA_SetConfig+0x24c>)
240571f6:	4293      	cmp	r3, r2
240571f8:	d04f      	beq.n	2405729a <DMA_SetConfig+0x10a>
240571fa:	68fb      	ldr	r3, [r7, #12]
240571fc:	681b      	ldr	r3, [r3, #0]
240571fe:	4a78      	ldr	r2, [pc, #480]	; (240573e0 <DMA_SetConfig+0x250>)
24057200:	4293      	cmp	r3, r2
24057202:	d04a      	beq.n	2405729a <DMA_SetConfig+0x10a>
24057204:	68fb      	ldr	r3, [r7, #12]
24057206:	681b      	ldr	r3, [r3, #0]
24057208:	4a76      	ldr	r2, [pc, #472]	; (240573e4 <DMA_SetConfig+0x254>)
2405720a:	4293      	cmp	r3, r2
2405720c:	d045      	beq.n	2405729a <DMA_SetConfig+0x10a>
2405720e:	68fb      	ldr	r3, [r7, #12]
24057210:	681b      	ldr	r3, [r3, #0]
24057212:	4a75      	ldr	r2, [pc, #468]	; (240573e8 <DMA_SetConfig+0x258>)
24057214:	4293      	cmp	r3, r2
24057216:	d040      	beq.n	2405729a <DMA_SetConfig+0x10a>
24057218:	68fb      	ldr	r3, [r7, #12]
2405721a:	681b      	ldr	r3, [r3, #0]
2405721c:	4a73      	ldr	r2, [pc, #460]	; (240573ec <DMA_SetConfig+0x25c>)
2405721e:	4293      	cmp	r3, r2
24057220:	d03b      	beq.n	2405729a <DMA_SetConfig+0x10a>
24057222:	68fb      	ldr	r3, [r7, #12]
24057224:	681b      	ldr	r3, [r3, #0]
24057226:	4a72      	ldr	r2, [pc, #456]	; (240573f0 <DMA_SetConfig+0x260>)
24057228:	4293      	cmp	r3, r2
2405722a:	d036      	beq.n	2405729a <DMA_SetConfig+0x10a>
2405722c:	68fb      	ldr	r3, [r7, #12]
2405722e:	681b      	ldr	r3, [r3, #0]
24057230:	4a70      	ldr	r2, [pc, #448]	; (240573f4 <DMA_SetConfig+0x264>)
24057232:	4293      	cmp	r3, r2
24057234:	d031      	beq.n	2405729a <DMA_SetConfig+0x10a>
24057236:	68fb      	ldr	r3, [r7, #12]
24057238:	681b      	ldr	r3, [r3, #0]
2405723a:	4a6f      	ldr	r2, [pc, #444]	; (240573f8 <DMA_SetConfig+0x268>)
2405723c:	4293      	cmp	r3, r2
2405723e:	d02c      	beq.n	2405729a <DMA_SetConfig+0x10a>
24057240:	68fb      	ldr	r3, [r7, #12]
24057242:	681b      	ldr	r3, [r3, #0]
24057244:	4a6d      	ldr	r2, [pc, #436]	; (240573fc <DMA_SetConfig+0x26c>)
24057246:	4293      	cmp	r3, r2
24057248:	d027      	beq.n	2405729a <DMA_SetConfig+0x10a>
2405724a:	68fb      	ldr	r3, [r7, #12]
2405724c:	681b      	ldr	r3, [r3, #0]
2405724e:	4a6c      	ldr	r2, [pc, #432]	; (24057400 <DMA_SetConfig+0x270>)
24057250:	4293      	cmp	r3, r2
24057252:	d022      	beq.n	2405729a <DMA_SetConfig+0x10a>
24057254:	68fb      	ldr	r3, [r7, #12]
24057256:	681b      	ldr	r3, [r3, #0]
24057258:	4a6a      	ldr	r2, [pc, #424]	; (24057404 <DMA_SetConfig+0x274>)
2405725a:	4293      	cmp	r3, r2
2405725c:	d01d      	beq.n	2405729a <DMA_SetConfig+0x10a>
2405725e:	68fb      	ldr	r3, [r7, #12]
24057260:	681b      	ldr	r3, [r3, #0]
24057262:	4a69      	ldr	r2, [pc, #420]	; (24057408 <DMA_SetConfig+0x278>)
24057264:	4293      	cmp	r3, r2
24057266:	d018      	beq.n	2405729a <DMA_SetConfig+0x10a>
24057268:	68fb      	ldr	r3, [r7, #12]
2405726a:	681b      	ldr	r3, [r3, #0]
2405726c:	4a67      	ldr	r2, [pc, #412]	; (2405740c <DMA_SetConfig+0x27c>)
2405726e:	4293      	cmp	r3, r2
24057270:	d013      	beq.n	2405729a <DMA_SetConfig+0x10a>
24057272:	68fb      	ldr	r3, [r7, #12]
24057274:	681b      	ldr	r3, [r3, #0]
24057276:	4a66      	ldr	r2, [pc, #408]	; (24057410 <DMA_SetConfig+0x280>)
24057278:	4293      	cmp	r3, r2
2405727a:	d00e      	beq.n	2405729a <DMA_SetConfig+0x10a>
2405727c:	68fb      	ldr	r3, [r7, #12]
2405727e:	681b      	ldr	r3, [r3, #0]
24057280:	4a64      	ldr	r2, [pc, #400]	; (24057414 <DMA_SetConfig+0x284>)
24057282:	4293      	cmp	r3, r2
24057284:	d009      	beq.n	2405729a <DMA_SetConfig+0x10a>
24057286:	68fb      	ldr	r3, [r7, #12]
24057288:	681b      	ldr	r3, [r3, #0]
2405728a:	4a63      	ldr	r2, [pc, #396]	; (24057418 <DMA_SetConfig+0x288>)
2405728c:	4293      	cmp	r3, r2
2405728e:	d004      	beq.n	2405729a <DMA_SetConfig+0x10a>
24057290:	68fb      	ldr	r3, [r7, #12]
24057292:	681b      	ldr	r3, [r3, #0]
24057294:	4a61      	ldr	r2, [pc, #388]	; (2405741c <DMA_SetConfig+0x28c>)
24057296:	4293      	cmp	r3, r2
24057298:	d101      	bne.n	2405729e <DMA_SetConfig+0x10e>
2405729a:	2301      	movs	r3, #1
2405729c:	e000      	b.n	240572a0 <DMA_SetConfig+0x110>
2405729e:	2300      	movs	r3, #0
240572a0:	2b00      	cmp	r3, #0
240572a2:	d00d      	beq.n	240572c0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
240572a4:	68fb      	ldr	r3, [r7, #12]
240572a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
240572a8:	68fa      	ldr	r2, [r7, #12]
240572aa:	6e92      	ldr	r2, [r2, #104]	; 0x68
240572ac:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
240572ae:	68fb      	ldr	r3, [r7, #12]
240572b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
240572b2:	2b00      	cmp	r3, #0
240572b4:	d004      	beq.n	240572c0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
240572b6:	68fb      	ldr	r3, [r7, #12]
240572b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
240572ba:	68fa      	ldr	r2, [r7, #12]
240572bc:	6f52      	ldr	r2, [r2, #116]	; 0x74
240572be:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
240572c0:	68fb      	ldr	r3, [r7, #12]
240572c2:	681b      	ldr	r3, [r3, #0]
240572c4:	4a3e      	ldr	r2, [pc, #248]	; (240573c0 <DMA_SetConfig+0x230>)
240572c6:	4293      	cmp	r3, r2
240572c8:	d04a      	beq.n	24057360 <DMA_SetConfig+0x1d0>
240572ca:	68fb      	ldr	r3, [r7, #12]
240572cc:	681b      	ldr	r3, [r3, #0]
240572ce:	4a3d      	ldr	r2, [pc, #244]	; (240573c4 <DMA_SetConfig+0x234>)
240572d0:	4293      	cmp	r3, r2
240572d2:	d045      	beq.n	24057360 <DMA_SetConfig+0x1d0>
240572d4:	68fb      	ldr	r3, [r7, #12]
240572d6:	681b      	ldr	r3, [r3, #0]
240572d8:	4a3b      	ldr	r2, [pc, #236]	; (240573c8 <DMA_SetConfig+0x238>)
240572da:	4293      	cmp	r3, r2
240572dc:	d040      	beq.n	24057360 <DMA_SetConfig+0x1d0>
240572de:	68fb      	ldr	r3, [r7, #12]
240572e0:	681b      	ldr	r3, [r3, #0]
240572e2:	4a3a      	ldr	r2, [pc, #232]	; (240573cc <DMA_SetConfig+0x23c>)
240572e4:	4293      	cmp	r3, r2
240572e6:	d03b      	beq.n	24057360 <DMA_SetConfig+0x1d0>
240572e8:	68fb      	ldr	r3, [r7, #12]
240572ea:	681b      	ldr	r3, [r3, #0]
240572ec:	4a38      	ldr	r2, [pc, #224]	; (240573d0 <DMA_SetConfig+0x240>)
240572ee:	4293      	cmp	r3, r2
240572f0:	d036      	beq.n	24057360 <DMA_SetConfig+0x1d0>
240572f2:	68fb      	ldr	r3, [r7, #12]
240572f4:	681b      	ldr	r3, [r3, #0]
240572f6:	4a37      	ldr	r2, [pc, #220]	; (240573d4 <DMA_SetConfig+0x244>)
240572f8:	4293      	cmp	r3, r2
240572fa:	d031      	beq.n	24057360 <DMA_SetConfig+0x1d0>
240572fc:	68fb      	ldr	r3, [r7, #12]
240572fe:	681b      	ldr	r3, [r3, #0]
24057300:	4a35      	ldr	r2, [pc, #212]	; (240573d8 <DMA_SetConfig+0x248>)
24057302:	4293      	cmp	r3, r2
24057304:	d02c      	beq.n	24057360 <DMA_SetConfig+0x1d0>
24057306:	68fb      	ldr	r3, [r7, #12]
24057308:	681b      	ldr	r3, [r3, #0]
2405730a:	4a34      	ldr	r2, [pc, #208]	; (240573dc <DMA_SetConfig+0x24c>)
2405730c:	4293      	cmp	r3, r2
2405730e:	d027      	beq.n	24057360 <DMA_SetConfig+0x1d0>
24057310:	68fb      	ldr	r3, [r7, #12]
24057312:	681b      	ldr	r3, [r3, #0]
24057314:	4a32      	ldr	r2, [pc, #200]	; (240573e0 <DMA_SetConfig+0x250>)
24057316:	4293      	cmp	r3, r2
24057318:	d022      	beq.n	24057360 <DMA_SetConfig+0x1d0>
2405731a:	68fb      	ldr	r3, [r7, #12]
2405731c:	681b      	ldr	r3, [r3, #0]
2405731e:	4a31      	ldr	r2, [pc, #196]	; (240573e4 <DMA_SetConfig+0x254>)
24057320:	4293      	cmp	r3, r2
24057322:	d01d      	beq.n	24057360 <DMA_SetConfig+0x1d0>
24057324:	68fb      	ldr	r3, [r7, #12]
24057326:	681b      	ldr	r3, [r3, #0]
24057328:	4a2f      	ldr	r2, [pc, #188]	; (240573e8 <DMA_SetConfig+0x258>)
2405732a:	4293      	cmp	r3, r2
2405732c:	d018      	beq.n	24057360 <DMA_SetConfig+0x1d0>
2405732e:	68fb      	ldr	r3, [r7, #12]
24057330:	681b      	ldr	r3, [r3, #0]
24057332:	4a2e      	ldr	r2, [pc, #184]	; (240573ec <DMA_SetConfig+0x25c>)
24057334:	4293      	cmp	r3, r2
24057336:	d013      	beq.n	24057360 <DMA_SetConfig+0x1d0>
24057338:	68fb      	ldr	r3, [r7, #12]
2405733a:	681b      	ldr	r3, [r3, #0]
2405733c:	4a2c      	ldr	r2, [pc, #176]	; (240573f0 <DMA_SetConfig+0x260>)
2405733e:	4293      	cmp	r3, r2
24057340:	d00e      	beq.n	24057360 <DMA_SetConfig+0x1d0>
24057342:	68fb      	ldr	r3, [r7, #12]
24057344:	681b      	ldr	r3, [r3, #0]
24057346:	4a2b      	ldr	r2, [pc, #172]	; (240573f4 <DMA_SetConfig+0x264>)
24057348:	4293      	cmp	r3, r2
2405734a:	d009      	beq.n	24057360 <DMA_SetConfig+0x1d0>
2405734c:	68fb      	ldr	r3, [r7, #12]
2405734e:	681b      	ldr	r3, [r3, #0]
24057350:	4a29      	ldr	r2, [pc, #164]	; (240573f8 <DMA_SetConfig+0x268>)
24057352:	4293      	cmp	r3, r2
24057354:	d004      	beq.n	24057360 <DMA_SetConfig+0x1d0>
24057356:	68fb      	ldr	r3, [r7, #12]
24057358:	681b      	ldr	r3, [r3, #0]
2405735a:	4a28      	ldr	r2, [pc, #160]	; (240573fc <DMA_SetConfig+0x26c>)
2405735c:	4293      	cmp	r3, r2
2405735e:	d101      	bne.n	24057364 <DMA_SetConfig+0x1d4>
24057360:	2301      	movs	r3, #1
24057362:	e000      	b.n	24057366 <DMA_SetConfig+0x1d6>
24057364:	2300      	movs	r3, #0
24057366:	2b00      	cmp	r3, #0
24057368:	d05a      	beq.n	24057420 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
2405736a:	68fb      	ldr	r3, [r7, #12]
2405736c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2405736e:	f003 031f 	and.w	r3, r3, #31
24057372:	223f      	movs	r2, #63	; 0x3f
24057374:	409a      	lsls	r2, r3
24057376:	697b      	ldr	r3, [r7, #20]
24057378:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
2405737a:	68fb      	ldr	r3, [r7, #12]
2405737c:	681b      	ldr	r3, [r3, #0]
2405737e:	681a      	ldr	r2, [r3, #0]
24057380:	68fb      	ldr	r3, [r7, #12]
24057382:	681b      	ldr	r3, [r3, #0]
24057384:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
24057388:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
2405738a:	68fb      	ldr	r3, [r7, #12]
2405738c:	681b      	ldr	r3, [r3, #0]
2405738e:	683a      	ldr	r2, [r7, #0]
24057390:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
24057392:	68fb      	ldr	r3, [r7, #12]
24057394:	689b      	ldr	r3, [r3, #8]
24057396:	2b40      	cmp	r3, #64	; 0x40
24057398:	d108      	bne.n	240573ac <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
2405739a:	68fb      	ldr	r3, [r7, #12]
2405739c:	681b      	ldr	r3, [r3, #0]
2405739e:	687a      	ldr	r2, [r7, #4]
240573a0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
240573a2:	68fb      	ldr	r3, [r7, #12]
240573a4:	681b      	ldr	r3, [r3, #0]
240573a6:	68ba      	ldr	r2, [r7, #8]
240573a8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
240573aa:	e0af      	b.n	2405750c <DMA_SetConfig+0x37c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
240573ac:	68fb      	ldr	r3, [r7, #12]
240573ae:	681b      	ldr	r3, [r3, #0]
240573b0:	68ba      	ldr	r2, [r7, #8]
240573b2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
240573b4:	68fb      	ldr	r3, [r7, #12]
240573b6:	681b      	ldr	r3, [r3, #0]
240573b8:	687a      	ldr	r2, [r7, #4]
240573ba:	60da      	str	r2, [r3, #12]
}
240573bc:	e0a6      	b.n	2405750c <DMA_SetConfig+0x37c>
240573be:	bf00      	nop
240573c0:	40020010 	.word	0x40020010
240573c4:	40020028 	.word	0x40020028
240573c8:	40020040 	.word	0x40020040
240573cc:	40020058 	.word	0x40020058
240573d0:	40020070 	.word	0x40020070
240573d4:	40020088 	.word	0x40020088
240573d8:	400200a0 	.word	0x400200a0
240573dc:	400200b8 	.word	0x400200b8
240573e0:	40020410 	.word	0x40020410
240573e4:	40020428 	.word	0x40020428
240573e8:	40020440 	.word	0x40020440
240573ec:	40020458 	.word	0x40020458
240573f0:	40020470 	.word	0x40020470
240573f4:	40020488 	.word	0x40020488
240573f8:	400204a0 	.word	0x400204a0
240573fc:	400204b8 	.word	0x400204b8
24057400:	58025408 	.word	0x58025408
24057404:	5802541c 	.word	0x5802541c
24057408:	58025430 	.word	0x58025430
2405740c:	58025444 	.word	0x58025444
24057410:	58025458 	.word	0x58025458
24057414:	5802546c 	.word	0x5802546c
24057418:	58025480 	.word	0x58025480
2405741c:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
24057420:	68fb      	ldr	r3, [r7, #12]
24057422:	681b      	ldr	r3, [r3, #0]
24057424:	4a3c      	ldr	r2, [pc, #240]	; (24057518 <DMA_SetConfig+0x388>)
24057426:	4293      	cmp	r3, r2
24057428:	d04a      	beq.n	240574c0 <DMA_SetConfig+0x330>
2405742a:	68fb      	ldr	r3, [r7, #12]
2405742c:	681b      	ldr	r3, [r3, #0]
2405742e:	4a3b      	ldr	r2, [pc, #236]	; (2405751c <DMA_SetConfig+0x38c>)
24057430:	4293      	cmp	r3, r2
24057432:	d045      	beq.n	240574c0 <DMA_SetConfig+0x330>
24057434:	68fb      	ldr	r3, [r7, #12]
24057436:	681b      	ldr	r3, [r3, #0]
24057438:	4a39      	ldr	r2, [pc, #228]	; (24057520 <DMA_SetConfig+0x390>)
2405743a:	4293      	cmp	r3, r2
2405743c:	d040      	beq.n	240574c0 <DMA_SetConfig+0x330>
2405743e:	68fb      	ldr	r3, [r7, #12]
24057440:	681b      	ldr	r3, [r3, #0]
24057442:	4a38      	ldr	r2, [pc, #224]	; (24057524 <DMA_SetConfig+0x394>)
24057444:	4293      	cmp	r3, r2
24057446:	d03b      	beq.n	240574c0 <DMA_SetConfig+0x330>
24057448:	68fb      	ldr	r3, [r7, #12]
2405744a:	681b      	ldr	r3, [r3, #0]
2405744c:	4a36      	ldr	r2, [pc, #216]	; (24057528 <DMA_SetConfig+0x398>)
2405744e:	4293      	cmp	r3, r2
24057450:	d036      	beq.n	240574c0 <DMA_SetConfig+0x330>
24057452:	68fb      	ldr	r3, [r7, #12]
24057454:	681b      	ldr	r3, [r3, #0]
24057456:	4a35      	ldr	r2, [pc, #212]	; (2405752c <DMA_SetConfig+0x39c>)
24057458:	4293      	cmp	r3, r2
2405745a:	d031      	beq.n	240574c0 <DMA_SetConfig+0x330>
2405745c:	68fb      	ldr	r3, [r7, #12]
2405745e:	681b      	ldr	r3, [r3, #0]
24057460:	4a33      	ldr	r2, [pc, #204]	; (24057530 <DMA_SetConfig+0x3a0>)
24057462:	4293      	cmp	r3, r2
24057464:	d02c      	beq.n	240574c0 <DMA_SetConfig+0x330>
24057466:	68fb      	ldr	r3, [r7, #12]
24057468:	681b      	ldr	r3, [r3, #0]
2405746a:	4a32      	ldr	r2, [pc, #200]	; (24057534 <DMA_SetConfig+0x3a4>)
2405746c:	4293      	cmp	r3, r2
2405746e:	d027      	beq.n	240574c0 <DMA_SetConfig+0x330>
24057470:	68fb      	ldr	r3, [r7, #12]
24057472:	681b      	ldr	r3, [r3, #0]
24057474:	4a30      	ldr	r2, [pc, #192]	; (24057538 <DMA_SetConfig+0x3a8>)
24057476:	4293      	cmp	r3, r2
24057478:	d022      	beq.n	240574c0 <DMA_SetConfig+0x330>
2405747a:	68fb      	ldr	r3, [r7, #12]
2405747c:	681b      	ldr	r3, [r3, #0]
2405747e:	4a2f      	ldr	r2, [pc, #188]	; (2405753c <DMA_SetConfig+0x3ac>)
24057480:	4293      	cmp	r3, r2
24057482:	d01d      	beq.n	240574c0 <DMA_SetConfig+0x330>
24057484:	68fb      	ldr	r3, [r7, #12]
24057486:	681b      	ldr	r3, [r3, #0]
24057488:	4a2d      	ldr	r2, [pc, #180]	; (24057540 <DMA_SetConfig+0x3b0>)
2405748a:	4293      	cmp	r3, r2
2405748c:	d018      	beq.n	240574c0 <DMA_SetConfig+0x330>
2405748e:	68fb      	ldr	r3, [r7, #12]
24057490:	681b      	ldr	r3, [r3, #0]
24057492:	4a2c      	ldr	r2, [pc, #176]	; (24057544 <DMA_SetConfig+0x3b4>)
24057494:	4293      	cmp	r3, r2
24057496:	d013      	beq.n	240574c0 <DMA_SetConfig+0x330>
24057498:	68fb      	ldr	r3, [r7, #12]
2405749a:	681b      	ldr	r3, [r3, #0]
2405749c:	4a2a      	ldr	r2, [pc, #168]	; (24057548 <DMA_SetConfig+0x3b8>)
2405749e:	4293      	cmp	r3, r2
240574a0:	d00e      	beq.n	240574c0 <DMA_SetConfig+0x330>
240574a2:	68fb      	ldr	r3, [r7, #12]
240574a4:	681b      	ldr	r3, [r3, #0]
240574a6:	4a29      	ldr	r2, [pc, #164]	; (2405754c <DMA_SetConfig+0x3bc>)
240574a8:	4293      	cmp	r3, r2
240574aa:	d009      	beq.n	240574c0 <DMA_SetConfig+0x330>
240574ac:	68fb      	ldr	r3, [r7, #12]
240574ae:	681b      	ldr	r3, [r3, #0]
240574b0:	4a27      	ldr	r2, [pc, #156]	; (24057550 <DMA_SetConfig+0x3c0>)
240574b2:	4293      	cmp	r3, r2
240574b4:	d004      	beq.n	240574c0 <DMA_SetConfig+0x330>
240574b6:	68fb      	ldr	r3, [r7, #12]
240574b8:	681b      	ldr	r3, [r3, #0]
240574ba:	4a26      	ldr	r2, [pc, #152]	; (24057554 <DMA_SetConfig+0x3c4>)
240574bc:	4293      	cmp	r3, r2
240574be:	d101      	bne.n	240574c4 <DMA_SetConfig+0x334>
240574c0:	2301      	movs	r3, #1
240574c2:	e000      	b.n	240574c6 <DMA_SetConfig+0x336>
240574c4:	2300      	movs	r3, #0
240574c6:	2b00      	cmp	r3, #0
240574c8:	d020      	beq.n	2405750c <DMA_SetConfig+0x37c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
240574ca:	68fb      	ldr	r3, [r7, #12]
240574cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240574ce:	f003 031f 	and.w	r3, r3, #31
240574d2:	2201      	movs	r2, #1
240574d4:	409a      	lsls	r2, r3
240574d6:	693b      	ldr	r3, [r7, #16]
240574d8:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
240574da:	68fb      	ldr	r3, [r7, #12]
240574dc:	681b      	ldr	r3, [r3, #0]
240574de:	683a      	ldr	r2, [r7, #0]
240574e0:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
240574e2:	68fb      	ldr	r3, [r7, #12]
240574e4:	689b      	ldr	r3, [r3, #8]
240574e6:	2b40      	cmp	r3, #64	; 0x40
240574e8:	d108      	bne.n	240574fc <DMA_SetConfig+0x36c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
240574ea:	68fb      	ldr	r3, [r7, #12]
240574ec:	681b      	ldr	r3, [r3, #0]
240574ee:	687a      	ldr	r2, [r7, #4]
240574f0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
240574f2:	68fb      	ldr	r3, [r7, #12]
240574f4:	681b      	ldr	r3, [r3, #0]
240574f6:	68ba      	ldr	r2, [r7, #8]
240574f8:	60da      	str	r2, [r3, #12]
}
240574fa:	e007      	b.n	2405750c <DMA_SetConfig+0x37c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
240574fc:	68fb      	ldr	r3, [r7, #12]
240574fe:	681b      	ldr	r3, [r3, #0]
24057500:	68ba      	ldr	r2, [r7, #8]
24057502:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
24057504:	68fb      	ldr	r3, [r7, #12]
24057506:	681b      	ldr	r3, [r3, #0]
24057508:	687a      	ldr	r2, [r7, #4]
2405750a:	60da      	str	r2, [r3, #12]
}
2405750c:	bf00      	nop
2405750e:	371c      	adds	r7, #28
24057510:	46bd      	mov	sp, r7
24057512:	f85d 7b04 	ldr.w	r7, [sp], #4
24057516:	4770      	bx	lr
24057518:	48022c08 	.word	0x48022c08
2405751c:	48022c1c 	.word	0x48022c1c
24057520:	48022c30 	.word	0x48022c30
24057524:	48022c44 	.word	0x48022c44
24057528:	48022c58 	.word	0x48022c58
2405752c:	48022c6c 	.word	0x48022c6c
24057530:	48022c80 	.word	0x48022c80
24057534:	48022c94 	.word	0x48022c94
24057538:	58025408 	.word	0x58025408
2405753c:	5802541c 	.word	0x5802541c
24057540:	58025430 	.word	0x58025430
24057544:	58025444 	.word	0x58025444
24057548:	58025458 	.word	0x58025458
2405754c:	5802546c 	.word	0x5802546c
24057550:	58025480 	.word	0x58025480
24057554:	58025494 	.word	0x58025494

24057558 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
24057558:	b480      	push	{r7}
2405755a:	b085      	sub	sp, #20
2405755c:	af00      	add	r7, sp, #0
2405755e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24057560:	687b      	ldr	r3, [r7, #4]
24057562:	681b      	ldr	r3, [r3, #0]
24057564:	4a42      	ldr	r2, [pc, #264]	; (24057670 <DMA_CalcBaseAndBitshift+0x118>)
24057566:	4293      	cmp	r3, r2
24057568:	d04a      	beq.n	24057600 <DMA_CalcBaseAndBitshift+0xa8>
2405756a:	687b      	ldr	r3, [r7, #4]
2405756c:	681b      	ldr	r3, [r3, #0]
2405756e:	4a41      	ldr	r2, [pc, #260]	; (24057674 <DMA_CalcBaseAndBitshift+0x11c>)
24057570:	4293      	cmp	r3, r2
24057572:	d045      	beq.n	24057600 <DMA_CalcBaseAndBitshift+0xa8>
24057574:	687b      	ldr	r3, [r7, #4]
24057576:	681b      	ldr	r3, [r3, #0]
24057578:	4a3f      	ldr	r2, [pc, #252]	; (24057678 <DMA_CalcBaseAndBitshift+0x120>)
2405757a:	4293      	cmp	r3, r2
2405757c:	d040      	beq.n	24057600 <DMA_CalcBaseAndBitshift+0xa8>
2405757e:	687b      	ldr	r3, [r7, #4]
24057580:	681b      	ldr	r3, [r3, #0]
24057582:	4a3e      	ldr	r2, [pc, #248]	; (2405767c <DMA_CalcBaseAndBitshift+0x124>)
24057584:	4293      	cmp	r3, r2
24057586:	d03b      	beq.n	24057600 <DMA_CalcBaseAndBitshift+0xa8>
24057588:	687b      	ldr	r3, [r7, #4]
2405758a:	681b      	ldr	r3, [r3, #0]
2405758c:	4a3c      	ldr	r2, [pc, #240]	; (24057680 <DMA_CalcBaseAndBitshift+0x128>)
2405758e:	4293      	cmp	r3, r2
24057590:	d036      	beq.n	24057600 <DMA_CalcBaseAndBitshift+0xa8>
24057592:	687b      	ldr	r3, [r7, #4]
24057594:	681b      	ldr	r3, [r3, #0]
24057596:	4a3b      	ldr	r2, [pc, #236]	; (24057684 <DMA_CalcBaseAndBitshift+0x12c>)
24057598:	4293      	cmp	r3, r2
2405759a:	d031      	beq.n	24057600 <DMA_CalcBaseAndBitshift+0xa8>
2405759c:	687b      	ldr	r3, [r7, #4]
2405759e:	681b      	ldr	r3, [r3, #0]
240575a0:	4a39      	ldr	r2, [pc, #228]	; (24057688 <DMA_CalcBaseAndBitshift+0x130>)
240575a2:	4293      	cmp	r3, r2
240575a4:	d02c      	beq.n	24057600 <DMA_CalcBaseAndBitshift+0xa8>
240575a6:	687b      	ldr	r3, [r7, #4]
240575a8:	681b      	ldr	r3, [r3, #0]
240575aa:	4a38      	ldr	r2, [pc, #224]	; (2405768c <DMA_CalcBaseAndBitshift+0x134>)
240575ac:	4293      	cmp	r3, r2
240575ae:	d027      	beq.n	24057600 <DMA_CalcBaseAndBitshift+0xa8>
240575b0:	687b      	ldr	r3, [r7, #4]
240575b2:	681b      	ldr	r3, [r3, #0]
240575b4:	4a36      	ldr	r2, [pc, #216]	; (24057690 <DMA_CalcBaseAndBitshift+0x138>)
240575b6:	4293      	cmp	r3, r2
240575b8:	d022      	beq.n	24057600 <DMA_CalcBaseAndBitshift+0xa8>
240575ba:	687b      	ldr	r3, [r7, #4]
240575bc:	681b      	ldr	r3, [r3, #0]
240575be:	4a35      	ldr	r2, [pc, #212]	; (24057694 <DMA_CalcBaseAndBitshift+0x13c>)
240575c0:	4293      	cmp	r3, r2
240575c2:	d01d      	beq.n	24057600 <DMA_CalcBaseAndBitshift+0xa8>
240575c4:	687b      	ldr	r3, [r7, #4]
240575c6:	681b      	ldr	r3, [r3, #0]
240575c8:	4a33      	ldr	r2, [pc, #204]	; (24057698 <DMA_CalcBaseAndBitshift+0x140>)
240575ca:	4293      	cmp	r3, r2
240575cc:	d018      	beq.n	24057600 <DMA_CalcBaseAndBitshift+0xa8>
240575ce:	687b      	ldr	r3, [r7, #4]
240575d0:	681b      	ldr	r3, [r3, #0]
240575d2:	4a32      	ldr	r2, [pc, #200]	; (2405769c <DMA_CalcBaseAndBitshift+0x144>)
240575d4:	4293      	cmp	r3, r2
240575d6:	d013      	beq.n	24057600 <DMA_CalcBaseAndBitshift+0xa8>
240575d8:	687b      	ldr	r3, [r7, #4]
240575da:	681b      	ldr	r3, [r3, #0]
240575dc:	4a30      	ldr	r2, [pc, #192]	; (240576a0 <DMA_CalcBaseAndBitshift+0x148>)
240575de:	4293      	cmp	r3, r2
240575e0:	d00e      	beq.n	24057600 <DMA_CalcBaseAndBitshift+0xa8>
240575e2:	687b      	ldr	r3, [r7, #4]
240575e4:	681b      	ldr	r3, [r3, #0]
240575e6:	4a2f      	ldr	r2, [pc, #188]	; (240576a4 <DMA_CalcBaseAndBitshift+0x14c>)
240575e8:	4293      	cmp	r3, r2
240575ea:	d009      	beq.n	24057600 <DMA_CalcBaseAndBitshift+0xa8>
240575ec:	687b      	ldr	r3, [r7, #4]
240575ee:	681b      	ldr	r3, [r3, #0]
240575f0:	4a2d      	ldr	r2, [pc, #180]	; (240576a8 <DMA_CalcBaseAndBitshift+0x150>)
240575f2:	4293      	cmp	r3, r2
240575f4:	d004      	beq.n	24057600 <DMA_CalcBaseAndBitshift+0xa8>
240575f6:	687b      	ldr	r3, [r7, #4]
240575f8:	681b      	ldr	r3, [r3, #0]
240575fa:	4a2c      	ldr	r2, [pc, #176]	; (240576ac <DMA_CalcBaseAndBitshift+0x154>)
240575fc:	4293      	cmp	r3, r2
240575fe:	d101      	bne.n	24057604 <DMA_CalcBaseAndBitshift+0xac>
24057600:	2301      	movs	r3, #1
24057602:	e000      	b.n	24057606 <DMA_CalcBaseAndBitshift+0xae>
24057604:	2300      	movs	r3, #0
24057606:	2b00      	cmp	r3, #0
24057608:	d024      	beq.n	24057654 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
2405760a:	687b      	ldr	r3, [r7, #4]
2405760c:	681b      	ldr	r3, [r3, #0]
2405760e:	b2db      	uxtb	r3, r3
24057610:	3b10      	subs	r3, #16
24057612:	4a27      	ldr	r2, [pc, #156]	; (240576b0 <DMA_CalcBaseAndBitshift+0x158>)
24057614:	fba2 2303 	umull	r2, r3, r2, r3
24057618:	091b      	lsrs	r3, r3, #4
2405761a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
2405761c:	68fb      	ldr	r3, [r7, #12]
2405761e:	f003 0307 	and.w	r3, r3, #7
24057622:	4a24      	ldr	r2, [pc, #144]	; (240576b4 <DMA_CalcBaseAndBitshift+0x15c>)
24057624:	5cd3      	ldrb	r3, [r2, r3]
24057626:	461a      	mov	r2, r3
24057628:	687b      	ldr	r3, [r7, #4]
2405762a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
2405762c:	68fb      	ldr	r3, [r7, #12]
2405762e:	2b03      	cmp	r3, #3
24057630:	d908      	bls.n	24057644 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
24057632:	687b      	ldr	r3, [r7, #4]
24057634:	681b      	ldr	r3, [r3, #0]
24057636:	461a      	mov	r2, r3
24057638:	4b1f      	ldr	r3, [pc, #124]	; (240576b8 <DMA_CalcBaseAndBitshift+0x160>)
2405763a:	4013      	ands	r3, r2
2405763c:	1d1a      	adds	r2, r3, #4
2405763e:	687b      	ldr	r3, [r7, #4]
24057640:	659a      	str	r2, [r3, #88]	; 0x58
24057642:	e00d      	b.n	24057660 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
24057644:	687b      	ldr	r3, [r7, #4]
24057646:	681b      	ldr	r3, [r3, #0]
24057648:	461a      	mov	r2, r3
2405764a:	4b1b      	ldr	r3, [pc, #108]	; (240576b8 <DMA_CalcBaseAndBitshift+0x160>)
2405764c:	4013      	ands	r3, r2
2405764e:	687a      	ldr	r2, [r7, #4]
24057650:	6593      	str	r3, [r2, #88]	; 0x58
24057652:	e005      	b.n	24057660 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
24057654:	687b      	ldr	r3, [r7, #4]
24057656:	681b      	ldr	r3, [r3, #0]
24057658:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
2405765c:	687b      	ldr	r3, [r7, #4]
2405765e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
24057660:	687b      	ldr	r3, [r7, #4]
24057662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
24057664:	4618      	mov	r0, r3
24057666:	3714      	adds	r7, #20
24057668:	46bd      	mov	sp, r7
2405766a:	f85d 7b04 	ldr.w	r7, [sp], #4
2405766e:	4770      	bx	lr
24057670:	40020010 	.word	0x40020010
24057674:	40020028 	.word	0x40020028
24057678:	40020040 	.word	0x40020040
2405767c:	40020058 	.word	0x40020058
24057680:	40020070 	.word	0x40020070
24057684:	40020088 	.word	0x40020088
24057688:	400200a0 	.word	0x400200a0
2405768c:	400200b8 	.word	0x400200b8
24057690:	40020410 	.word	0x40020410
24057694:	40020428 	.word	0x40020428
24057698:	40020440 	.word	0x40020440
2405769c:	40020458 	.word	0x40020458
240576a0:	40020470 	.word	0x40020470
240576a4:	40020488 	.word	0x40020488
240576a8:	400204a0 	.word	0x400204a0
240576ac:	400204b8 	.word	0x400204b8
240576b0:	aaaaaaab 	.word	0xaaaaaaab
240576b4:	24060f2c 	.word	0x24060f2c
240576b8:	fffffc00 	.word	0xfffffc00

240576bc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
240576bc:	b480      	push	{r7}
240576be:	b085      	sub	sp, #20
240576c0:	af00      	add	r7, sp, #0
240576c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
240576c4:	2300      	movs	r3, #0
240576c6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
240576c8:	687b      	ldr	r3, [r7, #4]
240576ca:	699b      	ldr	r3, [r3, #24]
240576cc:	2b00      	cmp	r3, #0
240576ce:	d120      	bne.n	24057712 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
240576d0:	687b      	ldr	r3, [r7, #4]
240576d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
240576d4:	2b03      	cmp	r3, #3
240576d6:	d858      	bhi.n	2405778a <DMA_CheckFifoParam+0xce>
240576d8:	a201      	add	r2, pc, #4	; (adr r2, 240576e0 <DMA_CheckFifoParam+0x24>)
240576da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
240576de:	bf00      	nop
240576e0:	240576f1 	.word	0x240576f1
240576e4:	24057703 	.word	0x24057703
240576e8:	240576f1 	.word	0x240576f1
240576ec:	2405778b 	.word	0x2405778b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
240576f0:	687b      	ldr	r3, [r7, #4]
240576f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240576f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
240576f8:	2b00      	cmp	r3, #0
240576fa:	d048      	beq.n	2405778e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
240576fc:	2301      	movs	r3, #1
240576fe:	73fb      	strb	r3, [r7, #15]
        }
        break;
24057700:	e045      	b.n	2405778e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
24057702:	687b      	ldr	r3, [r7, #4]
24057704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24057706:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
2405770a:	d142      	bne.n	24057792 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
2405770c:	2301      	movs	r3, #1
2405770e:	73fb      	strb	r3, [r7, #15]
        }
        break;
24057710:	e03f      	b.n	24057792 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
24057712:	687b      	ldr	r3, [r7, #4]
24057714:	699b      	ldr	r3, [r3, #24]
24057716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2405771a:	d123      	bne.n	24057764 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
2405771c:	687b      	ldr	r3, [r7, #4]
2405771e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24057720:	2b03      	cmp	r3, #3
24057722:	d838      	bhi.n	24057796 <DMA_CheckFifoParam+0xda>
24057724:	a201      	add	r2, pc, #4	; (adr r2, 2405772c <DMA_CheckFifoParam+0x70>)
24057726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2405772a:	bf00      	nop
2405772c:	2405773d 	.word	0x2405773d
24057730:	24057743 	.word	0x24057743
24057734:	2405773d 	.word	0x2405773d
24057738:	24057755 	.word	0x24057755
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
2405773c:	2301      	movs	r3, #1
2405773e:	73fb      	strb	r3, [r7, #15]
        break;
24057740:	e030      	b.n	240577a4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
24057742:	687b      	ldr	r3, [r7, #4]
24057744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24057746:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
2405774a:	2b00      	cmp	r3, #0
2405774c:	d025      	beq.n	2405779a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
2405774e:	2301      	movs	r3, #1
24057750:	73fb      	strb	r3, [r7, #15]
        }
        break;
24057752:	e022      	b.n	2405779a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
24057754:	687b      	ldr	r3, [r7, #4]
24057756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24057758:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
2405775c:	d11f      	bne.n	2405779e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
2405775e:	2301      	movs	r3, #1
24057760:	73fb      	strb	r3, [r7, #15]
        }
        break;
24057762:	e01c      	b.n	2405779e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
24057764:	687b      	ldr	r3, [r7, #4]
24057766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24057768:	2b02      	cmp	r3, #2
2405776a:	d902      	bls.n	24057772 <DMA_CheckFifoParam+0xb6>
2405776c:	2b03      	cmp	r3, #3
2405776e:	d003      	beq.n	24057778 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
24057770:	e018      	b.n	240577a4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
24057772:	2301      	movs	r3, #1
24057774:	73fb      	strb	r3, [r7, #15]
        break;
24057776:	e015      	b.n	240577a4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
24057778:	687b      	ldr	r3, [r7, #4]
2405777a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405777c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
24057780:	2b00      	cmp	r3, #0
24057782:	d00e      	beq.n	240577a2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
24057784:	2301      	movs	r3, #1
24057786:	73fb      	strb	r3, [r7, #15]
    break;
24057788:	e00b      	b.n	240577a2 <DMA_CheckFifoParam+0xe6>
        break;
2405778a:	bf00      	nop
2405778c:	e00a      	b.n	240577a4 <DMA_CheckFifoParam+0xe8>
        break;
2405778e:	bf00      	nop
24057790:	e008      	b.n	240577a4 <DMA_CheckFifoParam+0xe8>
        break;
24057792:	bf00      	nop
24057794:	e006      	b.n	240577a4 <DMA_CheckFifoParam+0xe8>
        break;
24057796:	bf00      	nop
24057798:	e004      	b.n	240577a4 <DMA_CheckFifoParam+0xe8>
        break;
2405779a:	bf00      	nop
2405779c:	e002      	b.n	240577a4 <DMA_CheckFifoParam+0xe8>
        break;
2405779e:	bf00      	nop
240577a0:	e000      	b.n	240577a4 <DMA_CheckFifoParam+0xe8>
    break;
240577a2:	bf00      	nop
    }
  }

  return status;
240577a4:	7bfb      	ldrb	r3, [r7, #15]
}
240577a6:	4618      	mov	r0, r3
240577a8:	3714      	adds	r7, #20
240577aa:	46bd      	mov	sp, r7
240577ac:	f85d 7b04 	ldr.w	r7, [sp], #4
240577b0:	4770      	bx	lr
240577b2:	bf00      	nop

240577b4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
240577b4:	b480      	push	{r7}
240577b6:	b085      	sub	sp, #20
240577b8:	af00      	add	r7, sp, #0
240577ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
240577bc:	687b      	ldr	r3, [r7, #4]
240577be:	681b      	ldr	r3, [r3, #0]
240577c0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
240577c2:	687b      	ldr	r3, [r7, #4]
240577c4:	681b      	ldr	r3, [r3, #0]
240577c6:	4a38      	ldr	r2, [pc, #224]	; (240578a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
240577c8:	4293      	cmp	r3, r2
240577ca:	d022      	beq.n	24057812 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
240577cc:	687b      	ldr	r3, [r7, #4]
240577ce:	681b      	ldr	r3, [r3, #0]
240577d0:	4a36      	ldr	r2, [pc, #216]	; (240578ac <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
240577d2:	4293      	cmp	r3, r2
240577d4:	d01d      	beq.n	24057812 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
240577d6:	687b      	ldr	r3, [r7, #4]
240577d8:	681b      	ldr	r3, [r3, #0]
240577da:	4a35      	ldr	r2, [pc, #212]	; (240578b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
240577dc:	4293      	cmp	r3, r2
240577de:	d018      	beq.n	24057812 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
240577e0:	687b      	ldr	r3, [r7, #4]
240577e2:	681b      	ldr	r3, [r3, #0]
240577e4:	4a33      	ldr	r2, [pc, #204]	; (240578b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
240577e6:	4293      	cmp	r3, r2
240577e8:	d013      	beq.n	24057812 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
240577ea:	687b      	ldr	r3, [r7, #4]
240577ec:	681b      	ldr	r3, [r3, #0]
240577ee:	4a32      	ldr	r2, [pc, #200]	; (240578b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
240577f0:	4293      	cmp	r3, r2
240577f2:	d00e      	beq.n	24057812 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
240577f4:	687b      	ldr	r3, [r7, #4]
240577f6:	681b      	ldr	r3, [r3, #0]
240577f8:	4a30      	ldr	r2, [pc, #192]	; (240578bc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
240577fa:	4293      	cmp	r3, r2
240577fc:	d009      	beq.n	24057812 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
240577fe:	687b      	ldr	r3, [r7, #4]
24057800:	681b      	ldr	r3, [r3, #0]
24057802:	4a2f      	ldr	r2, [pc, #188]	; (240578c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
24057804:	4293      	cmp	r3, r2
24057806:	d004      	beq.n	24057812 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
24057808:	687b      	ldr	r3, [r7, #4]
2405780a:	681b      	ldr	r3, [r3, #0]
2405780c:	4a2d      	ldr	r2, [pc, #180]	; (240578c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
2405780e:	4293      	cmp	r3, r2
24057810:	d101      	bne.n	24057816 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
24057812:	2301      	movs	r3, #1
24057814:	e000      	b.n	24057818 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
24057816:	2300      	movs	r3, #0
24057818:	2b00      	cmp	r3, #0
2405781a:	d01a      	beq.n	24057852 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
2405781c:	687b      	ldr	r3, [r7, #4]
2405781e:	681b      	ldr	r3, [r3, #0]
24057820:	b2db      	uxtb	r3, r3
24057822:	3b08      	subs	r3, #8
24057824:	4a28      	ldr	r2, [pc, #160]	; (240578c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
24057826:	fba2 2303 	umull	r2, r3, r2, r3
2405782a:	091b      	lsrs	r3, r3, #4
2405782c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
2405782e:	68fa      	ldr	r2, [r7, #12]
24057830:	4b26      	ldr	r3, [pc, #152]	; (240578cc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
24057832:	4413      	add	r3, r2
24057834:	009b      	lsls	r3, r3, #2
24057836:	461a      	mov	r2, r3
24057838:	687b      	ldr	r3, [r7, #4]
2405783a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
2405783c:	687b      	ldr	r3, [r7, #4]
2405783e:	4a24      	ldr	r2, [pc, #144]	; (240578d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
24057840:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24057842:	68fb      	ldr	r3, [r7, #12]
24057844:	f003 031f 	and.w	r3, r3, #31
24057848:	2201      	movs	r2, #1
2405784a:	409a      	lsls	r2, r3
2405784c:	687b      	ldr	r3, [r7, #4]
2405784e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
24057850:	e024      	b.n	2405789c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24057852:	687b      	ldr	r3, [r7, #4]
24057854:	681b      	ldr	r3, [r3, #0]
24057856:	b2db      	uxtb	r3, r3
24057858:	3b10      	subs	r3, #16
2405785a:	4a1e      	ldr	r2, [pc, #120]	; (240578d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
2405785c:	fba2 2303 	umull	r2, r3, r2, r3
24057860:	091b      	lsrs	r3, r3, #4
24057862:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
24057864:	68bb      	ldr	r3, [r7, #8]
24057866:	4a1c      	ldr	r2, [pc, #112]	; (240578d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
24057868:	4293      	cmp	r3, r2
2405786a:	d806      	bhi.n	2405787a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
2405786c:	68bb      	ldr	r3, [r7, #8]
2405786e:	4a1b      	ldr	r2, [pc, #108]	; (240578dc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
24057870:	4293      	cmp	r3, r2
24057872:	d902      	bls.n	2405787a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
24057874:	68fb      	ldr	r3, [r7, #12]
24057876:	3308      	adds	r3, #8
24057878:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
2405787a:	68fa      	ldr	r2, [r7, #12]
2405787c:	4b18      	ldr	r3, [pc, #96]	; (240578e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
2405787e:	4413      	add	r3, r2
24057880:	009b      	lsls	r3, r3, #2
24057882:	461a      	mov	r2, r3
24057884:	687b      	ldr	r3, [r7, #4]
24057886:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
24057888:	687b      	ldr	r3, [r7, #4]
2405788a:	4a16      	ldr	r2, [pc, #88]	; (240578e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
2405788c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
2405788e:	68fb      	ldr	r3, [r7, #12]
24057890:	f003 031f 	and.w	r3, r3, #31
24057894:	2201      	movs	r2, #1
24057896:	409a      	lsls	r2, r3
24057898:	687b      	ldr	r3, [r7, #4]
2405789a:	669a      	str	r2, [r3, #104]	; 0x68
}
2405789c:	bf00      	nop
2405789e:	3714      	adds	r7, #20
240578a0:	46bd      	mov	sp, r7
240578a2:	f85d 7b04 	ldr.w	r7, [sp], #4
240578a6:	4770      	bx	lr
240578a8:	58025408 	.word	0x58025408
240578ac:	5802541c 	.word	0x5802541c
240578b0:	58025430 	.word	0x58025430
240578b4:	58025444 	.word	0x58025444
240578b8:	58025458 	.word	0x58025458
240578bc:	5802546c 	.word	0x5802546c
240578c0:	58025480 	.word	0x58025480
240578c4:	58025494 	.word	0x58025494
240578c8:	cccccccd 	.word	0xcccccccd
240578cc:	16009600 	.word	0x16009600
240578d0:	58025880 	.word	0x58025880
240578d4:	aaaaaaab 	.word	0xaaaaaaab
240578d8:	400204b8 	.word	0x400204b8
240578dc:	4002040f 	.word	0x4002040f
240578e0:	10008200 	.word	0x10008200
240578e4:	40020880 	.word	0x40020880

240578e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
240578e8:	b480      	push	{r7}
240578ea:	b085      	sub	sp, #20
240578ec:	af00      	add	r7, sp, #0
240578ee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
240578f0:	687b      	ldr	r3, [r7, #4]
240578f2:	685b      	ldr	r3, [r3, #4]
240578f4:	b2db      	uxtb	r3, r3
240578f6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
240578f8:	68fb      	ldr	r3, [r7, #12]
240578fa:	2b00      	cmp	r3, #0
240578fc:	d04a      	beq.n	24057994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
240578fe:	68fb      	ldr	r3, [r7, #12]
24057900:	2b08      	cmp	r3, #8
24057902:	d847      	bhi.n	24057994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
24057904:	687b      	ldr	r3, [r7, #4]
24057906:	681b      	ldr	r3, [r3, #0]
24057908:	4a25      	ldr	r2, [pc, #148]	; (240579a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
2405790a:	4293      	cmp	r3, r2
2405790c:	d022      	beq.n	24057954 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
2405790e:	687b      	ldr	r3, [r7, #4]
24057910:	681b      	ldr	r3, [r3, #0]
24057912:	4a24      	ldr	r2, [pc, #144]	; (240579a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
24057914:	4293      	cmp	r3, r2
24057916:	d01d      	beq.n	24057954 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
24057918:	687b      	ldr	r3, [r7, #4]
2405791a:	681b      	ldr	r3, [r3, #0]
2405791c:	4a22      	ldr	r2, [pc, #136]	; (240579a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
2405791e:	4293      	cmp	r3, r2
24057920:	d018      	beq.n	24057954 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
24057922:	687b      	ldr	r3, [r7, #4]
24057924:	681b      	ldr	r3, [r3, #0]
24057926:	4a21      	ldr	r2, [pc, #132]	; (240579ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
24057928:	4293      	cmp	r3, r2
2405792a:	d013      	beq.n	24057954 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
2405792c:	687b      	ldr	r3, [r7, #4]
2405792e:	681b      	ldr	r3, [r3, #0]
24057930:	4a1f      	ldr	r2, [pc, #124]	; (240579b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
24057932:	4293      	cmp	r3, r2
24057934:	d00e      	beq.n	24057954 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
24057936:	687b      	ldr	r3, [r7, #4]
24057938:	681b      	ldr	r3, [r3, #0]
2405793a:	4a1e      	ldr	r2, [pc, #120]	; (240579b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
2405793c:	4293      	cmp	r3, r2
2405793e:	d009      	beq.n	24057954 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
24057940:	687b      	ldr	r3, [r7, #4]
24057942:	681b      	ldr	r3, [r3, #0]
24057944:	4a1c      	ldr	r2, [pc, #112]	; (240579b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
24057946:	4293      	cmp	r3, r2
24057948:	d004      	beq.n	24057954 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
2405794a:	687b      	ldr	r3, [r7, #4]
2405794c:	681b      	ldr	r3, [r3, #0]
2405794e:	4a1b      	ldr	r2, [pc, #108]	; (240579bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
24057950:	4293      	cmp	r3, r2
24057952:	d101      	bne.n	24057958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
24057954:	2301      	movs	r3, #1
24057956:	e000      	b.n	2405795a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
24057958:	2300      	movs	r3, #0
2405795a:	2b00      	cmp	r3, #0
2405795c:	d00a      	beq.n	24057974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
2405795e:	68fa      	ldr	r2, [r7, #12]
24057960:	4b17      	ldr	r3, [pc, #92]	; (240579c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
24057962:	4413      	add	r3, r2
24057964:	009b      	lsls	r3, r3, #2
24057966:	461a      	mov	r2, r3
24057968:	687b      	ldr	r3, [r7, #4]
2405796a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
2405796c:	687b      	ldr	r3, [r7, #4]
2405796e:	4a15      	ldr	r2, [pc, #84]	; (240579c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
24057970:	671a      	str	r2, [r3, #112]	; 0x70
24057972:	e009      	b.n	24057988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
24057974:	68fa      	ldr	r2, [r7, #12]
24057976:	4b14      	ldr	r3, [pc, #80]	; (240579c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
24057978:	4413      	add	r3, r2
2405797a:	009b      	lsls	r3, r3, #2
2405797c:	461a      	mov	r2, r3
2405797e:	687b      	ldr	r3, [r7, #4]
24057980:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
24057982:	687b      	ldr	r3, [r7, #4]
24057984:	4a11      	ldr	r2, [pc, #68]	; (240579cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
24057986:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
24057988:	68fb      	ldr	r3, [r7, #12]
2405798a:	3b01      	subs	r3, #1
2405798c:	2201      	movs	r2, #1
2405798e:	409a      	lsls	r2, r3
24057990:	687b      	ldr	r3, [r7, #4]
24057992:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
24057994:	bf00      	nop
24057996:	3714      	adds	r7, #20
24057998:	46bd      	mov	sp, r7
2405799a:	f85d 7b04 	ldr.w	r7, [sp], #4
2405799e:	4770      	bx	lr
240579a0:	58025408 	.word	0x58025408
240579a4:	5802541c 	.word	0x5802541c
240579a8:	58025430 	.word	0x58025430
240579ac:	58025444 	.word	0x58025444
240579b0:	58025458 	.word	0x58025458
240579b4:	5802546c 	.word	0x5802546c
240579b8:	58025480 	.word	0x58025480
240579bc:	58025494 	.word	0x58025494
240579c0:	1600963f 	.word	0x1600963f
240579c4:	58025940 	.word	0x58025940
240579c8:	1000823f 	.word	0x1000823f
240579cc:	40020940 	.word	0x40020940

240579d0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
240579d0:	b580      	push	{r7, lr}
240579d2:	b082      	sub	sp, #8
240579d4:	af00      	add	r7, sp, #0
240579d6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
240579d8:	687b      	ldr	r3, [r7, #4]
240579da:	2b00      	cmp	r3, #0
240579dc:	d101      	bne.n	240579e2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
240579de:	2301      	movs	r3, #1
240579e0:	e04f      	b.n	24057a82 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
240579e2:	687b      	ldr	r3, [r7, #4]
240579e4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
240579e8:	b2db      	uxtb	r3, r3
240579ea:	2b00      	cmp	r3, #0
240579ec:	d106      	bne.n	240579fc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
240579ee:	687b      	ldr	r3, [r7, #4]
240579f0:	2200      	movs	r2, #0
240579f2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
240579f6:	6878      	ldr	r0, [r7, #4]
240579f8:	f7fa fb60 	bl	240520bc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
240579fc:	687b      	ldr	r3, [r7, #4]
240579fe:	2202      	movs	r2, #2
24057a00:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
24057a04:	687b      	ldr	r3, [r7, #4]
24057a06:	681b      	ldr	r3, [r3, #0]
24057a08:	681a      	ldr	r2, [r3, #0]
24057a0a:	4b20      	ldr	r3, [pc, #128]	; (24057a8c <HAL_DMA2D_Init+0xbc>)
24057a0c:	4013      	ands	r3, r2
24057a0e:	687a      	ldr	r2, [r7, #4]
24057a10:	6851      	ldr	r1, [r2, #4]
24057a12:	687a      	ldr	r2, [r7, #4]
24057a14:	69d2      	ldr	r2, [r2, #28]
24057a16:	4311      	orrs	r1, r2
24057a18:	687a      	ldr	r2, [r7, #4]
24057a1a:	6812      	ldr	r2, [r2, #0]
24057a1c:	430b      	orrs	r3, r1
24057a1e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
24057a20:	687b      	ldr	r3, [r7, #4]
24057a22:	681b      	ldr	r3, [r3, #0]
24057a24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
24057a26:	4b1a      	ldr	r3, [pc, #104]	; (24057a90 <HAL_DMA2D_Init+0xc0>)
24057a28:	4013      	ands	r3, r2
24057a2a:	687a      	ldr	r2, [r7, #4]
24057a2c:	6891      	ldr	r1, [r2, #8]
24057a2e:	687a      	ldr	r2, [r7, #4]
24057a30:	6992      	ldr	r2, [r2, #24]
24057a32:	4311      	orrs	r1, r2
24057a34:	687a      	ldr	r2, [r7, #4]
24057a36:	6812      	ldr	r2, [r2, #0]
24057a38:	430b      	orrs	r3, r1
24057a3a:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
24057a3c:	687b      	ldr	r3, [r7, #4]
24057a3e:	681b      	ldr	r3, [r3, #0]
24057a40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
24057a42:	4b14      	ldr	r3, [pc, #80]	; (24057a94 <HAL_DMA2D_Init+0xc4>)
24057a44:	4013      	ands	r3, r2
24057a46:	687a      	ldr	r2, [r7, #4]
24057a48:	68d1      	ldr	r1, [r2, #12]
24057a4a:	687a      	ldr	r2, [r7, #4]
24057a4c:	6812      	ldr	r2, [r2, #0]
24057a4e:	430b      	orrs	r3, r1
24057a50:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
24057a52:	687b      	ldr	r3, [r7, #4]
24057a54:	681b      	ldr	r3, [r3, #0]
24057a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24057a58:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
24057a5c:	687b      	ldr	r3, [r7, #4]
24057a5e:	691b      	ldr	r3, [r3, #16]
24057a60:	051a      	lsls	r2, r3, #20
24057a62:	687b      	ldr	r3, [r7, #4]
24057a64:	695b      	ldr	r3, [r3, #20]
24057a66:	055b      	lsls	r3, r3, #21
24057a68:	431a      	orrs	r2, r3
24057a6a:	687b      	ldr	r3, [r7, #4]
24057a6c:	681b      	ldr	r3, [r3, #0]
24057a6e:	430a      	orrs	r2, r1
24057a70:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
24057a72:	687b      	ldr	r3, [r7, #4]
24057a74:	2200      	movs	r2, #0
24057a76:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
24057a78:	687b      	ldr	r3, [r7, #4]
24057a7a:	2201      	movs	r2, #1
24057a7c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
24057a80:	2300      	movs	r3, #0
}
24057a82:	4618      	mov	r0, r3
24057a84:	3708      	adds	r7, #8
24057a86:	46bd      	mov	sp, r7
24057a88:	bd80      	pop	{r7, pc}
24057a8a:	bf00      	nop
24057a8c:	fff8ffbf 	.word	0xfff8ffbf
24057a90:	fffffef8 	.word	0xfffffef8
24057a94:	ffff0000 	.word	0xffff0000

24057a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
24057a98:	b480      	push	{r7}
24057a9a:	b089      	sub	sp, #36	; 0x24
24057a9c:	af00      	add	r7, sp, #0
24057a9e:	6078      	str	r0, [r7, #4]
24057aa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
24057aa2:	2300      	movs	r3, #0
24057aa4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
24057aa6:	4b89      	ldr	r3, [pc, #548]	; (24057ccc <HAL_GPIO_Init+0x234>)
24057aa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
24057aaa:	e194      	b.n	24057dd6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
24057aac:	683b      	ldr	r3, [r7, #0]
24057aae:	681a      	ldr	r2, [r3, #0]
24057ab0:	2101      	movs	r1, #1
24057ab2:	69fb      	ldr	r3, [r7, #28]
24057ab4:	fa01 f303 	lsl.w	r3, r1, r3
24057ab8:	4013      	ands	r3, r2
24057aba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
24057abc:	693b      	ldr	r3, [r7, #16]
24057abe:	2b00      	cmp	r3, #0
24057ac0:	f000 8186 	beq.w	24057dd0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
24057ac4:	683b      	ldr	r3, [r7, #0]
24057ac6:	685b      	ldr	r3, [r3, #4]
24057ac8:	f003 0303 	and.w	r3, r3, #3
24057acc:	2b01      	cmp	r3, #1
24057ace:	d005      	beq.n	24057adc <HAL_GPIO_Init+0x44>
24057ad0:	683b      	ldr	r3, [r7, #0]
24057ad2:	685b      	ldr	r3, [r3, #4]
24057ad4:	f003 0303 	and.w	r3, r3, #3
24057ad8:	2b02      	cmp	r3, #2
24057ada:	d130      	bne.n	24057b3e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
24057adc:	687b      	ldr	r3, [r7, #4]
24057ade:	689b      	ldr	r3, [r3, #8]
24057ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
24057ae2:	69fb      	ldr	r3, [r7, #28]
24057ae4:	005b      	lsls	r3, r3, #1
24057ae6:	2203      	movs	r2, #3
24057ae8:	fa02 f303 	lsl.w	r3, r2, r3
24057aec:	43db      	mvns	r3, r3
24057aee:	69ba      	ldr	r2, [r7, #24]
24057af0:	4013      	ands	r3, r2
24057af2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
24057af4:	683b      	ldr	r3, [r7, #0]
24057af6:	68da      	ldr	r2, [r3, #12]
24057af8:	69fb      	ldr	r3, [r7, #28]
24057afa:	005b      	lsls	r3, r3, #1
24057afc:	fa02 f303 	lsl.w	r3, r2, r3
24057b00:	69ba      	ldr	r2, [r7, #24]
24057b02:	4313      	orrs	r3, r2
24057b04:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
24057b06:	687b      	ldr	r3, [r7, #4]
24057b08:	69ba      	ldr	r2, [r7, #24]
24057b0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
24057b0c:	687b      	ldr	r3, [r7, #4]
24057b0e:	685b      	ldr	r3, [r3, #4]
24057b10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
24057b12:	2201      	movs	r2, #1
24057b14:	69fb      	ldr	r3, [r7, #28]
24057b16:	fa02 f303 	lsl.w	r3, r2, r3
24057b1a:	43db      	mvns	r3, r3
24057b1c:	69ba      	ldr	r2, [r7, #24]
24057b1e:	4013      	ands	r3, r2
24057b20:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
24057b22:	683b      	ldr	r3, [r7, #0]
24057b24:	685b      	ldr	r3, [r3, #4]
24057b26:	091b      	lsrs	r3, r3, #4
24057b28:	f003 0201 	and.w	r2, r3, #1
24057b2c:	69fb      	ldr	r3, [r7, #28]
24057b2e:	fa02 f303 	lsl.w	r3, r2, r3
24057b32:	69ba      	ldr	r2, [r7, #24]
24057b34:	4313      	orrs	r3, r2
24057b36:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
24057b38:	687b      	ldr	r3, [r7, #4]
24057b3a:	69ba      	ldr	r2, [r7, #24]
24057b3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
24057b3e:	683b      	ldr	r3, [r7, #0]
24057b40:	685b      	ldr	r3, [r3, #4]
24057b42:	f003 0303 	and.w	r3, r3, #3
24057b46:	2b03      	cmp	r3, #3
24057b48:	d017      	beq.n	24057b7a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
24057b4a:	687b      	ldr	r3, [r7, #4]
24057b4c:	68db      	ldr	r3, [r3, #12]
24057b4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
24057b50:	69fb      	ldr	r3, [r7, #28]
24057b52:	005b      	lsls	r3, r3, #1
24057b54:	2203      	movs	r2, #3
24057b56:	fa02 f303 	lsl.w	r3, r2, r3
24057b5a:	43db      	mvns	r3, r3
24057b5c:	69ba      	ldr	r2, [r7, #24]
24057b5e:	4013      	ands	r3, r2
24057b60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
24057b62:	683b      	ldr	r3, [r7, #0]
24057b64:	689a      	ldr	r2, [r3, #8]
24057b66:	69fb      	ldr	r3, [r7, #28]
24057b68:	005b      	lsls	r3, r3, #1
24057b6a:	fa02 f303 	lsl.w	r3, r2, r3
24057b6e:	69ba      	ldr	r2, [r7, #24]
24057b70:	4313      	orrs	r3, r2
24057b72:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
24057b74:	687b      	ldr	r3, [r7, #4]
24057b76:	69ba      	ldr	r2, [r7, #24]
24057b78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
24057b7a:	683b      	ldr	r3, [r7, #0]
24057b7c:	685b      	ldr	r3, [r3, #4]
24057b7e:	f003 0303 	and.w	r3, r3, #3
24057b82:	2b02      	cmp	r3, #2
24057b84:	d123      	bne.n	24057bce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
24057b86:	69fb      	ldr	r3, [r7, #28]
24057b88:	08da      	lsrs	r2, r3, #3
24057b8a:	687b      	ldr	r3, [r7, #4]
24057b8c:	3208      	adds	r2, #8
24057b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
24057b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
24057b94:	69fb      	ldr	r3, [r7, #28]
24057b96:	f003 0307 	and.w	r3, r3, #7
24057b9a:	009b      	lsls	r3, r3, #2
24057b9c:	220f      	movs	r2, #15
24057b9e:	fa02 f303 	lsl.w	r3, r2, r3
24057ba2:	43db      	mvns	r3, r3
24057ba4:	69ba      	ldr	r2, [r7, #24]
24057ba6:	4013      	ands	r3, r2
24057ba8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
24057baa:	683b      	ldr	r3, [r7, #0]
24057bac:	691a      	ldr	r2, [r3, #16]
24057bae:	69fb      	ldr	r3, [r7, #28]
24057bb0:	f003 0307 	and.w	r3, r3, #7
24057bb4:	009b      	lsls	r3, r3, #2
24057bb6:	fa02 f303 	lsl.w	r3, r2, r3
24057bba:	69ba      	ldr	r2, [r7, #24]
24057bbc:	4313      	orrs	r3, r2
24057bbe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
24057bc0:	69fb      	ldr	r3, [r7, #28]
24057bc2:	08da      	lsrs	r2, r3, #3
24057bc4:	687b      	ldr	r3, [r7, #4]
24057bc6:	3208      	adds	r2, #8
24057bc8:	69b9      	ldr	r1, [r7, #24]
24057bca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
24057bce:	687b      	ldr	r3, [r7, #4]
24057bd0:	681b      	ldr	r3, [r3, #0]
24057bd2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
24057bd4:	69fb      	ldr	r3, [r7, #28]
24057bd6:	005b      	lsls	r3, r3, #1
24057bd8:	2203      	movs	r2, #3
24057bda:	fa02 f303 	lsl.w	r3, r2, r3
24057bde:	43db      	mvns	r3, r3
24057be0:	69ba      	ldr	r2, [r7, #24]
24057be2:	4013      	ands	r3, r2
24057be4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
24057be6:	683b      	ldr	r3, [r7, #0]
24057be8:	685b      	ldr	r3, [r3, #4]
24057bea:	f003 0203 	and.w	r2, r3, #3
24057bee:	69fb      	ldr	r3, [r7, #28]
24057bf0:	005b      	lsls	r3, r3, #1
24057bf2:	fa02 f303 	lsl.w	r3, r2, r3
24057bf6:	69ba      	ldr	r2, [r7, #24]
24057bf8:	4313      	orrs	r3, r2
24057bfa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
24057bfc:	687b      	ldr	r3, [r7, #4]
24057bfe:	69ba      	ldr	r2, [r7, #24]
24057c00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
24057c02:	683b      	ldr	r3, [r7, #0]
24057c04:	685b      	ldr	r3, [r3, #4]
24057c06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
24057c0a:	2b00      	cmp	r3, #0
24057c0c:	f000 80e0 	beq.w	24057dd0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
24057c10:	4b2f      	ldr	r3, [pc, #188]	; (24057cd0 <HAL_GPIO_Init+0x238>)
24057c12:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
24057c16:	4a2e      	ldr	r2, [pc, #184]	; (24057cd0 <HAL_GPIO_Init+0x238>)
24057c18:	f043 0302 	orr.w	r3, r3, #2
24057c1c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
24057c20:	4b2b      	ldr	r3, [pc, #172]	; (24057cd0 <HAL_GPIO_Init+0x238>)
24057c22:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
24057c26:	f003 0302 	and.w	r3, r3, #2
24057c2a:	60fb      	str	r3, [r7, #12]
24057c2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
24057c2e:	4a29      	ldr	r2, [pc, #164]	; (24057cd4 <HAL_GPIO_Init+0x23c>)
24057c30:	69fb      	ldr	r3, [r7, #28]
24057c32:	089b      	lsrs	r3, r3, #2
24057c34:	3302      	adds	r3, #2
24057c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
24057c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
24057c3c:	69fb      	ldr	r3, [r7, #28]
24057c3e:	f003 0303 	and.w	r3, r3, #3
24057c42:	009b      	lsls	r3, r3, #2
24057c44:	220f      	movs	r2, #15
24057c46:	fa02 f303 	lsl.w	r3, r2, r3
24057c4a:	43db      	mvns	r3, r3
24057c4c:	69ba      	ldr	r2, [r7, #24]
24057c4e:	4013      	ands	r3, r2
24057c50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
24057c52:	687b      	ldr	r3, [r7, #4]
24057c54:	4a20      	ldr	r2, [pc, #128]	; (24057cd8 <HAL_GPIO_Init+0x240>)
24057c56:	4293      	cmp	r3, r2
24057c58:	d052      	beq.n	24057d00 <HAL_GPIO_Init+0x268>
24057c5a:	687b      	ldr	r3, [r7, #4]
24057c5c:	4a1f      	ldr	r2, [pc, #124]	; (24057cdc <HAL_GPIO_Init+0x244>)
24057c5e:	4293      	cmp	r3, r2
24057c60:	d031      	beq.n	24057cc6 <HAL_GPIO_Init+0x22e>
24057c62:	687b      	ldr	r3, [r7, #4]
24057c64:	4a1e      	ldr	r2, [pc, #120]	; (24057ce0 <HAL_GPIO_Init+0x248>)
24057c66:	4293      	cmp	r3, r2
24057c68:	d02b      	beq.n	24057cc2 <HAL_GPIO_Init+0x22a>
24057c6a:	687b      	ldr	r3, [r7, #4]
24057c6c:	4a1d      	ldr	r2, [pc, #116]	; (24057ce4 <HAL_GPIO_Init+0x24c>)
24057c6e:	4293      	cmp	r3, r2
24057c70:	d025      	beq.n	24057cbe <HAL_GPIO_Init+0x226>
24057c72:	687b      	ldr	r3, [r7, #4]
24057c74:	4a1c      	ldr	r2, [pc, #112]	; (24057ce8 <HAL_GPIO_Init+0x250>)
24057c76:	4293      	cmp	r3, r2
24057c78:	d01f      	beq.n	24057cba <HAL_GPIO_Init+0x222>
24057c7a:	687b      	ldr	r3, [r7, #4]
24057c7c:	4a1b      	ldr	r2, [pc, #108]	; (24057cec <HAL_GPIO_Init+0x254>)
24057c7e:	4293      	cmp	r3, r2
24057c80:	d019      	beq.n	24057cb6 <HAL_GPIO_Init+0x21e>
24057c82:	687b      	ldr	r3, [r7, #4]
24057c84:	4a1a      	ldr	r2, [pc, #104]	; (24057cf0 <HAL_GPIO_Init+0x258>)
24057c86:	4293      	cmp	r3, r2
24057c88:	d013      	beq.n	24057cb2 <HAL_GPIO_Init+0x21a>
24057c8a:	687b      	ldr	r3, [r7, #4]
24057c8c:	4a19      	ldr	r2, [pc, #100]	; (24057cf4 <HAL_GPIO_Init+0x25c>)
24057c8e:	4293      	cmp	r3, r2
24057c90:	d00d      	beq.n	24057cae <HAL_GPIO_Init+0x216>
24057c92:	687b      	ldr	r3, [r7, #4]
24057c94:	4a18      	ldr	r2, [pc, #96]	; (24057cf8 <HAL_GPIO_Init+0x260>)
24057c96:	4293      	cmp	r3, r2
24057c98:	d007      	beq.n	24057caa <HAL_GPIO_Init+0x212>
24057c9a:	687b      	ldr	r3, [r7, #4]
24057c9c:	4a17      	ldr	r2, [pc, #92]	; (24057cfc <HAL_GPIO_Init+0x264>)
24057c9e:	4293      	cmp	r3, r2
24057ca0:	d101      	bne.n	24057ca6 <HAL_GPIO_Init+0x20e>
24057ca2:	2309      	movs	r3, #9
24057ca4:	e02d      	b.n	24057d02 <HAL_GPIO_Init+0x26a>
24057ca6:	230a      	movs	r3, #10
24057ca8:	e02b      	b.n	24057d02 <HAL_GPIO_Init+0x26a>
24057caa:	2308      	movs	r3, #8
24057cac:	e029      	b.n	24057d02 <HAL_GPIO_Init+0x26a>
24057cae:	2307      	movs	r3, #7
24057cb0:	e027      	b.n	24057d02 <HAL_GPIO_Init+0x26a>
24057cb2:	2306      	movs	r3, #6
24057cb4:	e025      	b.n	24057d02 <HAL_GPIO_Init+0x26a>
24057cb6:	2305      	movs	r3, #5
24057cb8:	e023      	b.n	24057d02 <HAL_GPIO_Init+0x26a>
24057cba:	2304      	movs	r3, #4
24057cbc:	e021      	b.n	24057d02 <HAL_GPIO_Init+0x26a>
24057cbe:	2303      	movs	r3, #3
24057cc0:	e01f      	b.n	24057d02 <HAL_GPIO_Init+0x26a>
24057cc2:	2302      	movs	r3, #2
24057cc4:	e01d      	b.n	24057d02 <HAL_GPIO_Init+0x26a>
24057cc6:	2301      	movs	r3, #1
24057cc8:	e01b      	b.n	24057d02 <HAL_GPIO_Init+0x26a>
24057cca:	bf00      	nop
24057ccc:	58000080 	.word	0x58000080
24057cd0:	58024400 	.word	0x58024400
24057cd4:	58000400 	.word	0x58000400
24057cd8:	58020000 	.word	0x58020000
24057cdc:	58020400 	.word	0x58020400
24057ce0:	58020800 	.word	0x58020800
24057ce4:	58020c00 	.word	0x58020c00
24057ce8:	58021000 	.word	0x58021000
24057cec:	58021400 	.word	0x58021400
24057cf0:	58021800 	.word	0x58021800
24057cf4:	58021c00 	.word	0x58021c00
24057cf8:	58022000 	.word	0x58022000
24057cfc:	58022400 	.word	0x58022400
24057d00:	2300      	movs	r3, #0
24057d02:	69fa      	ldr	r2, [r7, #28]
24057d04:	f002 0203 	and.w	r2, r2, #3
24057d08:	0092      	lsls	r2, r2, #2
24057d0a:	4093      	lsls	r3, r2
24057d0c:	69ba      	ldr	r2, [r7, #24]
24057d0e:	4313      	orrs	r3, r2
24057d10:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
24057d12:	4938      	ldr	r1, [pc, #224]	; (24057df4 <HAL_GPIO_Init+0x35c>)
24057d14:	69fb      	ldr	r3, [r7, #28]
24057d16:	089b      	lsrs	r3, r3, #2
24057d18:	3302      	adds	r3, #2
24057d1a:	69ba      	ldr	r2, [r7, #24]
24057d1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
24057d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24057d24:	681b      	ldr	r3, [r3, #0]
24057d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
24057d28:	693b      	ldr	r3, [r7, #16]
24057d2a:	43db      	mvns	r3, r3
24057d2c:	69ba      	ldr	r2, [r7, #24]
24057d2e:	4013      	ands	r3, r2
24057d30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
24057d32:	683b      	ldr	r3, [r7, #0]
24057d34:	685b      	ldr	r3, [r3, #4]
24057d36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
24057d3a:	2b00      	cmp	r3, #0
24057d3c:	d003      	beq.n	24057d46 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
24057d3e:	69ba      	ldr	r2, [r7, #24]
24057d40:	693b      	ldr	r3, [r7, #16]
24057d42:	4313      	orrs	r3, r2
24057d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
24057d46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24057d4a:	69bb      	ldr	r3, [r7, #24]
24057d4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
24057d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24057d52:	685b      	ldr	r3, [r3, #4]
24057d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
24057d56:	693b      	ldr	r3, [r7, #16]
24057d58:	43db      	mvns	r3, r3
24057d5a:	69ba      	ldr	r2, [r7, #24]
24057d5c:	4013      	ands	r3, r2
24057d5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
24057d60:	683b      	ldr	r3, [r7, #0]
24057d62:	685b      	ldr	r3, [r3, #4]
24057d64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
24057d68:	2b00      	cmp	r3, #0
24057d6a:	d003      	beq.n	24057d74 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
24057d6c:	69ba      	ldr	r2, [r7, #24]
24057d6e:	693b      	ldr	r3, [r7, #16]
24057d70:	4313      	orrs	r3, r2
24057d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
24057d74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24057d78:	69bb      	ldr	r3, [r7, #24]
24057d7a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
24057d7c:	697b      	ldr	r3, [r7, #20]
24057d7e:	685b      	ldr	r3, [r3, #4]
24057d80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
24057d82:	693b      	ldr	r3, [r7, #16]
24057d84:	43db      	mvns	r3, r3
24057d86:	69ba      	ldr	r2, [r7, #24]
24057d88:	4013      	ands	r3, r2
24057d8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
24057d8c:	683b      	ldr	r3, [r7, #0]
24057d8e:	685b      	ldr	r3, [r3, #4]
24057d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24057d94:	2b00      	cmp	r3, #0
24057d96:	d003      	beq.n	24057da0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
24057d98:	69ba      	ldr	r2, [r7, #24]
24057d9a:	693b      	ldr	r3, [r7, #16]
24057d9c:	4313      	orrs	r3, r2
24057d9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
24057da0:	697b      	ldr	r3, [r7, #20]
24057da2:	69ba      	ldr	r2, [r7, #24]
24057da4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
24057da6:	697b      	ldr	r3, [r7, #20]
24057da8:	681b      	ldr	r3, [r3, #0]
24057daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
24057dac:	693b      	ldr	r3, [r7, #16]
24057dae:	43db      	mvns	r3, r3
24057db0:	69ba      	ldr	r2, [r7, #24]
24057db2:	4013      	ands	r3, r2
24057db4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
24057db6:	683b      	ldr	r3, [r7, #0]
24057db8:	685b      	ldr	r3, [r3, #4]
24057dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24057dbe:	2b00      	cmp	r3, #0
24057dc0:	d003      	beq.n	24057dca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
24057dc2:	69ba      	ldr	r2, [r7, #24]
24057dc4:	693b      	ldr	r3, [r7, #16]
24057dc6:	4313      	orrs	r3, r2
24057dc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
24057dca:	697b      	ldr	r3, [r7, #20]
24057dcc:	69ba      	ldr	r2, [r7, #24]
24057dce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
24057dd0:	69fb      	ldr	r3, [r7, #28]
24057dd2:	3301      	adds	r3, #1
24057dd4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
24057dd6:	683b      	ldr	r3, [r7, #0]
24057dd8:	681a      	ldr	r2, [r3, #0]
24057dda:	69fb      	ldr	r3, [r7, #28]
24057ddc:	fa22 f303 	lsr.w	r3, r2, r3
24057de0:	2b00      	cmp	r3, #0
24057de2:	f47f ae63 	bne.w	24057aac <HAL_GPIO_Init+0x14>
  }
}
24057de6:	bf00      	nop
24057de8:	bf00      	nop
24057dea:	3724      	adds	r7, #36	; 0x24
24057dec:	46bd      	mov	sp, r7
24057dee:	f85d 7b04 	ldr.w	r7, [sp], #4
24057df2:	4770      	bx	lr
24057df4:	58000400 	.word	0x58000400

24057df8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
24057df8:	b480      	push	{r7}
24057dfa:	b085      	sub	sp, #20
24057dfc:	af00      	add	r7, sp, #0
24057dfe:	6078      	str	r0, [r7, #4]
24057e00:	460b      	mov	r3, r1
24057e02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
24057e04:	687b      	ldr	r3, [r7, #4]
24057e06:	691a      	ldr	r2, [r3, #16]
24057e08:	887b      	ldrh	r3, [r7, #2]
24057e0a:	4013      	ands	r3, r2
24057e0c:	2b00      	cmp	r3, #0
24057e0e:	d002      	beq.n	24057e16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
24057e10:	2301      	movs	r3, #1
24057e12:	73fb      	strb	r3, [r7, #15]
24057e14:	e001      	b.n	24057e1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
24057e16:	2300      	movs	r3, #0
24057e18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
24057e1a:	7bfb      	ldrb	r3, [r7, #15]
}
24057e1c:	4618      	mov	r0, r3
24057e1e:	3714      	adds	r7, #20
24057e20:	46bd      	mov	sp, r7
24057e22:	f85d 7b04 	ldr.w	r7, [sp], #4
24057e26:	4770      	bx	lr

24057e28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
24057e28:	b480      	push	{r7}
24057e2a:	b083      	sub	sp, #12
24057e2c:	af00      	add	r7, sp, #0
24057e2e:	6078      	str	r0, [r7, #4]
24057e30:	460b      	mov	r3, r1
24057e32:	807b      	strh	r3, [r7, #2]
24057e34:	4613      	mov	r3, r2
24057e36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
24057e38:	787b      	ldrb	r3, [r7, #1]
24057e3a:	2b00      	cmp	r3, #0
24057e3c:	d003      	beq.n	24057e46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
24057e3e:	887a      	ldrh	r2, [r7, #2]
24057e40:	687b      	ldr	r3, [r7, #4]
24057e42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
24057e44:	e003      	b.n	24057e4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
24057e46:	887b      	ldrh	r3, [r7, #2]
24057e48:	041a      	lsls	r2, r3, #16
24057e4a:	687b      	ldr	r3, [r7, #4]
24057e4c:	619a      	str	r2, [r3, #24]
}
24057e4e:	bf00      	nop
24057e50:	370c      	adds	r7, #12
24057e52:	46bd      	mov	sp, r7
24057e54:	f85d 7b04 	ldr.w	r7, [sp], #4
24057e58:	4770      	bx	lr
	...

24057e5c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
24057e5c:	b580      	push	{r7, lr}
24057e5e:	b084      	sub	sp, #16
24057e60:	af00      	add	r7, sp, #0
24057e62:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
24057e64:	687b      	ldr	r3, [r7, #4]
24057e66:	2b00      	cmp	r3, #0
24057e68:	d101      	bne.n	24057e6e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
24057e6a:	2301      	movs	r3, #1
24057e6c:	e0bf      	b.n	24057fee <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
24057e6e:	687b      	ldr	r3, [r7, #4]
24057e70:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
24057e74:	b2db      	uxtb	r3, r3
24057e76:	2b00      	cmp	r3, #0
24057e78:	d106      	bne.n	24057e88 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
24057e7a:	687b      	ldr	r3, [r7, #4]
24057e7c:	2200      	movs	r2, #0
24057e7e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
24057e82:	6878      	ldr	r0, [r7, #4]
24057e84:	f7fa f93c 	bl	24052100 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
24057e88:	687b      	ldr	r3, [r7, #4]
24057e8a:	2202      	movs	r2, #2
24057e8c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
24057e90:	687b      	ldr	r3, [r7, #4]
24057e92:	681b      	ldr	r3, [r3, #0]
24057e94:	699a      	ldr	r2, [r3, #24]
24057e96:	687b      	ldr	r3, [r7, #4]
24057e98:	681b      	ldr	r3, [r3, #0]
24057e9a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
24057e9e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
24057ea0:	687b      	ldr	r3, [r7, #4]
24057ea2:	681b      	ldr	r3, [r3, #0]
24057ea4:	6999      	ldr	r1, [r3, #24]
24057ea6:	687b      	ldr	r3, [r7, #4]
24057ea8:	685a      	ldr	r2, [r3, #4]
24057eaa:	687b      	ldr	r3, [r7, #4]
24057eac:	689b      	ldr	r3, [r3, #8]
24057eae:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
24057eb0:	687b      	ldr	r3, [r7, #4]
24057eb2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
24057eb4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
24057eb6:	687b      	ldr	r3, [r7, #4]
24057eb8:	691b      	ldr	r3, [r3, #16]
24057eba:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
24057ebc:	687b      	ldr	r3, [r7, #4]
24057ebe:	681b      	ldr	r3, [r3, #0]
24057ec0:	430a      	orrs	r2, r1
24057ec2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
24057ec4:	687b      	ldr	r3, [r7, #4]
24057ec6:	681b      	ldr	r3, [r3, #0]
24057ec8:	6899      	ldr	r1, [r3, #8]
24057eca:	687b      	ldr	r3, [r7, #4]
24057ecc:	681a      	ldr	r2, [r3, #0]
24057ece:	4b4a      	ldr	r3, [pc, #296]	; (24057ff8 <HAL_LTDC_Init+0x19c>)
24057ed0:	400b      	ands	r3, r1
24057ed2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
24057ed4:	687b      	ldr	r3, [r7, #4]
24057ed6:	695b      	ldr	r3, [r3, #20]
24057ed8:	041b      	lsls	r3, r3, #16
24057eda:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
24057edc:	687b      	ldr	r3, [r7, #4]
24057ede:	681b      	ldr	r3, [r3, #0]
24057ee0:	6899      	ldr	r1, [r3, #8]
24057ee2:	687b      	ldr	r3, [r7, #4]
24057ee4:	699a      	ldr	r2, [r3, #24]
24057ee6:	68fb      	ldr	r3, [r7, #12]
24057ee8:	431a      	orrs	r2, r3
24057eea:	687b      	ldr	r3, [r7, #4]
24057eec:	681b      	ldr	r3, [r3, #0]
24057eee:	430a      	orrs	r2, r1
24057ef0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
24057ef2:	687b      	ldr	r3, [r7, #4]
24057ef4:	681b      	ldr	r3, [r3, #0]
24057ef6:	68d9      	ldr	r1, [r3, #12]
24057ef8:	687b      	ldr	r3, [r7, #4]
24057efa:	681a      	ldr	r2, [r3, #0]
24057efc:	4b3e      	ldr	r3, [pc, #248]	; (24057ff8 <HAL_LTDC_Init+0x19c>)
24057efe:	400b      	ands	r3, r1
24057f00:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
24057f02:	687b      	ldr	r3, [r7, #4]
24057f04:	69db      	ldr	r3, [r3, #28]
24057f06:	041b      	lsls	r3, r3, #16
24057f08:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
24057f0a:	687b      	ldr	r3, [r7, #4]
24057f0c:	681b      	ldr	r3, [r3, #0]
24057f0e:	68d9      	ldr	r1, [r3, #12]
24057f10:	687b      	ldr	r3, [r7, #4]
24057f12:	6a1a      	ldr	r2, [r3, #32]
24057f14:	68fb      	ldr	r3, [r7, #12]
24057f16:	431a      	orrs	r2, r3
24057f18:	687b      	ldr	r3, [r7, #4]
24057f1a:	681b      	ldr	r3, [r3, #0]
24057f1c:	430a      	orrs	r2, r1
24057f1e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
24057f20:	687b      	ldr	r3, [r7, #4]
24057f22:	681b      	ldr	r3, [r3, #0]
24057f24:	6919      	ldr	r1, [r3, #16]
24057f26:	687b      	ldr	r3, [r7, #4]
24057f28:	681a      	ldr	r2, [r3, #0]
24057f2a:	4b33      	ldr	r3, [pc, #204]	; (24057ff8 <HAL_LTDC_Init+0x19c>)
24057f2c:	400b      	ands	r3, r1
24057f2e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
24057f30:	687b      	ldr	r3, [r7, #4]
24057f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24057f34:	041b      	lsls	r3, r3, #16
24057f36:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
24057f38:	687b      	ldr	r3, [r7, #4]
24057f3a:	681b      	ldr	r3, [r3, #0]
24057f3c:	6919      	ldr	r1, [r3, #16]
24057f3e:	687b      	ldr	r3, [r7, #4]
24057f40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
24057f42:	68fb      	ldr	r3, [r7, #12]
24057f44:	431a      	orrs	r2, r3
24057f46:	687b      	ldr	r3, [r7, #4]
24057f48:	681b      	ldr	r3, [r3, #0]
24057f4a:	430a      	orrs	r2, r1
24057f4c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
24057f4e:	687b      	ldr	r3, [r7, #4]
24057f50:	681b      	ldr	r3, [r3, #0]
24057f52:	6959      	ldr	r1, [r3, #20]
24057f54:	687b      	ldr	r3, [r7, #4]
24057f56:	681a      	ldr	r2, [r3, #0]
24057f58:	4b27      	ldr	r3, [pc, #156]	; (24057ff8 <HAL_LTDC_Init+0x19c>)
24057f5a:	400b      	ands	r3, r1
24057f5c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
24057f5e:	687b      	ldr	r3, [r7, #4]
24057f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24057f62:	041b      	lsls	r3, r3, #16
24057f64:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
24057f66:	687b      	ldr	r3, [r7, #4]
24057f68:	681b      	ldr	r3, [r3, #0]
24057f6a:	6959      	ldr	r1, [r3, #20]
24057f6c:	687b      	ldr	r3, [r7, #4]
24057f6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
24057f70:	68fb      	ldr	r3, [r7, #12]
24057f72:	431a      	orrs	r2, r3
24057f74:	687b      	ldr	r3, [r7, #4]
24057f76:	681b      	ldr	r3, [r3, #0]
24057f78:	430a      	orrs	r2, r1
24057f7a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
24057f7c:	687b      	ldr	r3, [r7, #4]
24057f7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
24057f82:	021b      	lsls	r3, r3, #8
24057f84:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
24057f86:	687b      	ldr	r3, [r7, #4]
24057f88:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
24057f8c:	041b      	lsls	r3, r3, #16
24057f8e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
24057f90:	687b      	ldr	r3, [r7, #4]
24057f92:	681b      	ldr	r3, [r3, #0]
24057f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24057f96:	687b      	ldr	r3, [r7, #4]
24057f98:	681b      	ldr	r3, [r3, #0]
24057f9a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
24057f9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
24057fa0:	687b      	ldr	r3, [r7, #4]
24057fa2:	681b      	ldr	r3, [r3, #0]
24057fa4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
24057fa6:	68ba      	ldr	r2, [r7, #8]
24057fa8:	68fb      	ldr	r3, [r7, #12]
24057faa:	4313      	orrs	r3, r2
24057fac:	687a      	ldr	r2, [r7, #4]
24057fae:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
24057fb2:	431a      	orrs	r2, r3
24057fb4:	687b      	ldr	r3, [r7, #4]
24057fb6:	681b      	ldr	r3, [r3, #0]
24057fb8:	430a      	orrs	r2, r1
24057fba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
24057fbc:	687b      	ldr	r3, [r7, #4]
24057fbe:	681b      	ldr	r3, [r3, #0]
24057fc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
24057fc2:	687b      	ldr	r3, [r7, #4]
24057fc4:	681b      	ldr	r3, [r3, #0]
24057fc6:	f042 0206 	orr.w	r2, r2, #6
24057fca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
24057fcc:	687b      	ldr	r3, [r7, #4]
24057fce:	681b      	ldr	r3, [r3, #0]
24057fd0:	699a      	ldr	r2, [r3, #24]
24057fd2:	687b      	ldr	r3, [r7, #4]
24057fd4:	681b      	ldr	r3, [r3, #0]
24057fd6:	f042 0201 	orr.w	r2, r2, #1
24057fda:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
24057fdc:	687b      	ldr	r3, [r7, #4]
24057fde:	2200      	movs	r2, #0
24057fe0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
24057fe4:	687b      	ldr	r3, [r7, #4]
24057fe6:	2201      	movs	r2, #1
24057fe8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
24057fec:	2300      	movs	r3, #0
}
24057fee:	4618      	mov	r0, r3
24057ff0:	3710      	adds	r7, #16
24057ff2:	46bd      	mov	sp, r7
24057ff4:	bd80      	pop	{r7, pc}
24057ff6:	bf00      	nop
24057ff8:	f000f800 	.word	0xf000f800

24057ffc <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
24057ffc:	b580      	push	{r7, lr}
24057ffe:	b084      	sub	sp, #16
24058000:	af00      	add	r7, sp, #0
24058002:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
24058004:	687b      	ldr	r3, [r7, #4]
24058006:	681b      	ldr	r3, [r3, #0]
24058008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405800a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
2405800c:	687b      	ldr	r3, [r7, #4]
2405800e:	681b      	ldr	r3, [r3, #0]
24058010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24058012:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
24058014:	68fb      	ldr	r3, [r7, #12]
24058016:	f003 0304 	and.w	r3, r3, #4
2405801a:	2b00      	cmp	r3, #0
2405801c:	d023      	beq.n	24058066 <HAL_LTDC_IRQHandler+0x6a>
2405801e:	68bb      	ldr	r3, [r7, #8]
24058020:	f003 0304 	and.w	r3, r3, #4
24058024:	2b00      	cmp	r3, #0
24058026:	d01e      	beq.n	24058066 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
24058028:	687b      	ldr	r3, [r7, #4]
2405802a:	681b      	ldr	r3, [r3, #0]
2405802c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
2405802e:	687b      	ldr	r3, [r7, #4]
24058030:	681b      	ldr	r3, [r3, #0]
24058032:	f022 0204 	bic.w	r2, r2, #4
24058036:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
24058038:	687b      	ldr	r3, [r7, #4]
2405803a:	681b      	ldr	r3, [r3, #0]
2405803c:	2204      	movs	r2, #4
2405803e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
24058040:	687b      	ldr	r3, [r7, #4]
24058042:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
24058046:	f043 0201 	orr.w	r2, r3, #1
2405804a:	687b      	ldr	r3, [r7, #4]
2405804c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
24058050:	687b      	ldr	r3, [r7, #4]
24058052:	2204      	movs	r2, #4
24058054:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
24058058:	687b      	ldr	r3, [r7, #4]
2405805a:	2200      	movs	r2, #0
2405805c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
24058060:	6878      	ldr	r0, [r7, #4]
24058062:	f000 f86f 	bl	24058144 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
24058066:	68fb      	ldr	r3, [r7, #12]
24058068:	f003 0302 	and.w	r3, r3, #2
2405806c:	2b00      	cmp	r3, #0
2405806e:	d023      	beq.n	240580b8 <HAL_LTDC_IRQHandler+0xbc>
24058070:	68bb      	ldr	r3, [r7, #8]
24058072:	f003 0302 	and.w	r3, r3, #2
24058076:	2b00      	cmp	r3, #0
24058078:	d01e      	beq.n	240580b8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
2405807a:	687b      	ldr	r3, [r7, #4]
2405807c:	681b      	ldr	r3, [r3, #0]
2405807e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
24058080:	687b      	ldr	r3, [r7, #4]
24058082:	681b      	ldr	r3, [r3, #0]
24058084:	f022 0202 	bic.w	r2, r2, #2
24058088:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
2405808a:	687b      	ldr	r3, [r7, #4]
2405808c:	681b      	ldr	r3, [r3, #0]
2405808e:	2202      	movs	r2, #2
24058090:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
24058092:	687b      	ldr	r3, [r7, #4]
24058094:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
24058098:	f043 0202 	orr.w	r2, r3, #2
2405809c:	687b      	ldr	r3, [r7, #4]
2405809e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
240580a2:	687b      	ldr	r3, [r7, #4]
240580a4:	2204      	movs	r2, #4
240580a6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
240580aa:	687b      	ldr	r3, [r7, #4]
240580ac:	2200      	movs	r2, #0
240580ae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
240580b2:	6878      	ldr	r0, [r7, #4]
240580b4:	f000 f846 	bl	24058144 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
240580b8:	68fb      	ldr	r3, [r7, #12]
240580ba:	f003 0301 	and.w	r3, r3, #1
240580be:	2b00      	cmp	r3, #0
240580c0:	d01b      	beq.n	240580fa <HAL_LTDC_IRQHandler+0xfe>
240580c2:	68bb      	ldr	r3, [r7, #8]
240580c4:	f003 0301 	and.w	r3, r3, #1
240580c8:	2b00      	cmp	r3, #0
240580ca:	d016      	beq.n	240580fa <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
240580cc:	687b      	ldr	r3, [r7, #4]
240580ce:	681b      	ldr	r3, [r3, #0]
240580d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
240580d2:	687b      	ldr	r3, [r7, #4]
240580d4:	681b      	ldr	r3, [r3, #0]
240580d6:	f022 0201 	bic.w	r2, r2, #1
240580da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
240580dc:	687b      	ldr	r3, [r7, #4]
240580de:	681b      	ldr	r3, [r3, #0]
240580e0:	2201      	movs	r2, #1
240580e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
240580e4:	687b      	ldr	r3, [r7, #4]
240580e6:	2201      	movs	r2, #1
240580e8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
240580ec:	687b      	ldr	r3, [r7, #4]
240580ee:	2200      	movs	r2, #0
240580f0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
240580f4:	6878      	ldr	r0, [r7, #4]
240580f6:	f000 f82f 	bl	24058158 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
240580fa:	68fb      	ldr	r3, [r7, #12]
240580fc:	f003 0308 	and.w	r3, r3, #8
24058100:	2b00      	cmp	r3, #0
24058102:	d01b      	beq.n	2405813c <HAL_LTDC_IRQHandler+0x140>
24058104:	68bb      	ldr	r3, [r7, #8]
24058106:	f003 0308 	and.w	r3, r3, #8
2405810a:	2b00      	cmp	r3, #0
2405810c:	d016      	beq.n	2405813c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
2405810e:	687b      	ldr	r3, [r7, #4]
24058110:	681b      	ldr	r3, [r3, #0]
24058112:	6b5a      	ldr	r2, [r3, #52]	; 0x34
24058114:	687b      	ldr	r3, [r7, #4]
24058116:	681b      	ldr	r3, [r3, #0]
24058118:	f022 0208 	bic.w	r2, r2, #8
2405811c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
2405811e:	687b      	ldr	r3, [r7, #4]
24058120:	681b      	ldr	r3, [r3, #0]
24058122:	2208      	movs	r2, #8
24058124:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
24058126:	687b      	ldr	r3, [r7, #4]
24058128:	2201      	movs	r2, #1
2405812a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
2405812e:	687b      	ldr	r3, [r7, #4]
24058130:	2200      	movs	r2, #0
24058132:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
24058136:	6878      	ldr	r0, [r7, #4]
24058138:	f7f9 f948 	bl	240513cc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
2405813c:	bf00      	nop
2405813e:	3710      	adds	r7, #16
24058140:	46bd      	mov	sp, r7
24058142:	bd80      	pop	{r7, pc}

24058144 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
24058144:	b480      	push	{r7}
24058146:	b083      	sub	sp, #12
24058148:	af00      	add	r7, sp, #0
2405814a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
2405814c:	bf00      	nop
2405814e:	370c      	adds	r7, #12
24058150:	46bd      	mov	sp, r7
24058152:	f85d 7b04 	ldr.w	r7, [sp], #4
24058156:	4770      	bx	lr

24058158 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
24058158:	b480      	push	{r7}
2405815a:	b083      	sub	sp, #12
2405815c:	af00      	add	r7, sp, #0
2405815e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
24058160:	bf00      	nop
24058162:	370c      	adds	r7, #12
24058164:	46bd      	mov	sp, r7
24058166:	f85d 7b04 	ldr.w	r7, [sp], #4
2405816a:	4770      	bx	lr

2405816c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
2405816c:	b5b0      	push	{r4, r5, r7, lr}
2405816e:	b084      	sub	sp, #16
24058170:	af00      	add	r7, sp, #0
24058172:	60f8      	str	r0, [r7, #12]
24058174:	60b9      	str	r1, [r7, #8]
24058176:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
24058178:	68fb      	ldr	r3, [r7, #12]
2405817a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
2405817e:	2b01      	cmp	r3, #1
24058180:	d101      	bne.n	24058186 <HAL_LTDC_ConfigLayer+0x1a>
24058182:	2302      	movs	r3, #2
24058184:	e02c      	b.n	240581e0 <HAL_LTDC_ConfigLayer+0x74>
24058186:	68fb      	ldr	r3, [r7, #12]
24058188:	2201      	movs	r2, #1
2405818a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
2405818e:	68fb      	ldr	r3, [r7, #12]
24058190:	2202      	movs	r2, #2
24058192:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
24058196:	68fa      	ldr	r2, [r7, #12]
24058198:	687b      	ldr	r3, [r7, #4]
2405819a:	2134      	movs	r1, #52	; 0x34
2405819c:	fb01 f303 	mul.w	r3, r1, r3
240581a0:	4413      	add	r3, r2
240581a2:	f103 0238 	add.w	r2, r3, #56	; 0x38
240581a6:	68bb      	ldr	r3, [r7, #8]
240581a8:	4614      	mov	r4, r2
240581aa:	461d      	mov	r5, r3
240581ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
240581ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
240581b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
240581b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
240581b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
240581b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
240581b8:	682b      	ldr	r3, [r5, #0]
240581ba:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
240581bc:	687a      	ldr	r2, [r7, #4]
240581be:	68b9      	ldr	r1, [r7, #8]
240581c0:	68f8      	ldr	r0, [r7, #12]
240581c2:	f000 f877 	bl	240582b4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
240581c6:	68fb      	ldr	r3, [r7, #12]
240581c8:	681b      	ldr	r3, [r3, #0]
240581ca:	2201      	movs	r2, #1
240581cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
240581ce:	68fb      	ldr	r3, [r7, #12]
240581d0:	2201      	movs	r2, #1
240581d2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
240581d6:	68fb      	ldr	r3, [r7, #12]
240581d8:	2200      	movs	r2, #0
240581da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
240581de:	2300      	movs	r3, #0
}
240581e0:	4618      	mov	r0, r3
240581e2:	3710      	adds	r7, #16
240581e4:	46bd      	mov	sp, r7
240581e6:	bdb0      	pop	{r4, r5, r7, pc}

240581e8 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
240581e8:	b580      	push	{r7, lr}
240581ea:	b086      	sub	sp, #24
240581ec:	af00      	add	r7, sp, #0
240581ee:	60f8      	str	r0, [r7, #12]
240581f0:	60b9      	str	r1, [r7, #8]
240581f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
240581f4:	68fb      	ldr	r3, [r7, #12]
240581f6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
240581fa:	2b01      	cmp	r3, #1
240581fc:	d101      	bne.n	24058202 <HAL_LTDC_SetAddress+0x1a>
240581fe:	2302      	movs	r3, #2
24058200:	e024      	b.n	2405824c <HAL_LTDC_SetAddress+0x64>
24058202:	68fb      	ldr	r3, [r7, #12]
24058204:	2201      	movs	r2, #1
24058206:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
2405820a:	68fb      	ldr	r3, [r7, #12]
2405820c:	2202      	movs	r2, #2
2405820e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
24058212:	687b      	ldr	r3, [r7, #4]
24058214:	2234      	movs	r2, #52	; 0x34
24058216:	fb02 f303 	mul.w	r3, r2, r3
2405821a:	3338      	adds	r3, #56	; 0x38
2405821c:	68fa      	ldr	r2, [r7, #12]
2405821e:	4413      	add	r3, r2
24058220:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
24058222:	697b      	ldr	r3, [r7, #20]
24058224:	68ba      	ldr	r2, [r7, #8]
24058226:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
24058228:	687a      	ldr	r2, [r7, #4]
2405822a:	6979      	ldr	r1, [r7, #20]
2405822c:	68f8      	ldr	r0, [r7, #12]
2405822e:	f000 f841 	bl	240582b4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
24058232:	68fb      	ldr	r3, [r7, #12]
24058234:	681b      	ldr	r3, [r3, #0]
24058236:	2201      	movs	r2, #1
24058238:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
2405823a:	68fb      	ldr	r3, [r7, #12]
2405823c:	2201      	movs	r2, #1
2405823e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
24058242:	68fb      	ldr	r3, [r7, #12]
24058244:	2200      	movs	r2, #0
24058246:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
2405824a:	2300      	movs	r3, #0
}
2405824c:	4618      	mov	r0, r3
2405824e:	3718      	adds	r7, #24
24058250:	46bd      	mov	sp, r7
24058252:	bd80      	pop	{r7, pc}

24058254 <HAL_LTDC_Reload>:
  *                      LTDC_RELOAD_VERTICAL_BLANKING  : Reload in the next Vertical Blanking
  * @note   User application may resort to HAL_LTDC_ReloadEventCallback() at reload interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef  HAL_LTDC_Reload(LTDC_HandleTypeDef *hltdc, uint32_t ReloadType)
{
24058254:	b480      	push	{r7}
24058256:	b083      	sub	sp, #12
24058258:	af00      	add	r7, sp, #0
2405825a:	6078      	str	r0, [r7, #4]
2405825c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_RELOAD(ReloadType));

  /* Process locked */
  __HAL_LOCK(hltdc);
2405825e:	687b      	ldr	r3, [r7, #4]
24058260:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
24058264:	2b01      	cmp	r3, #1
24058266:	d101      	bne.n	2405826c <HAL_LTDC_Reload+0x18>
24058268:	2302      	movs	r3, #2
2405826a:	e01c      	b.n	240582a6 <HAL_LTDC_Reload+0x52>
2405826c:	687b      	ldr	r3, [r7, #4]
2405826e:	2201      	movs	r2, #1
24058270:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
24058274:	687b      	ldr	r3, [r7, #4]
24058276:	2202      	movs	r2, #2
24058278:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable the Reload interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
2405827c:	687b      	ldr	r3, [r7, #4]
2405827e:	681b      	ldr	r3, [r3, #0]
24058280:	6b5a      	ldr	r2, [r3, #52]	; 0x34
24058282:	687b      	ldr	r3, [r7, #4]
24058284:	681b      	ldr	r3, [r3, #0]
24058286:	f042 0208 	orr.w	r2, r2, #8
2405828a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Apply Reload type */
  hltdc->Instance->SRCR = ReloadType;
2405828c:	687b      	ldr	r3, [r7, #4]
2405828e:	681b      	ldr	r3, [r3, #0]
24058290:	683a      	ldr	r2, [r7, #0]
24058292:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
24058294:	687b      	ldr	r3, [r7, #4]
24058296:	2201      	movs	r2, #1
24058298:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
2405829c:	687b      	ldr	r3, [r7, #4]
2405829e:	2200      	movs	r2, #0
240582a0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
240582a4:	2300      	movs	r3, #0
}
240582a6:	4618      	mov	r0, r3
240582a8:	370c      	adds	r7, #12
240582aa:	46bd      	mov	sp, r7
240582ac:	f85d 7b04 	ldr.w	r7, [sp], #4
240582b0:	4770      	bx	lr
	...

240582b4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
240582b4:	b480      	push	{r7}
240582b6:	b089      	sub	sp, #36	; 0x24
240582b8:	af00      	add	r7, sp, #0
240582ba:	60f8      	str	r0, [r7, #12]
240582bc:	60b9      	str	r1, [r7, #8]
240582be:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
240582c0:	68bb      	ldr	r3, [r7, #8]
240582c2:	685a      	ldr	r2, [r3, #4]
240582c4:	68fb      	ldr	r3, [r7, #12]
240582c6:	681b      	ldr	r3, [r3, #0]
240582c8:	68db      	ldr	r3, [r3, #12]
240582ca:	0c1b      	lsrs	r3, r3, #16
240582cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
240582d0:	4413      	add	r3, r2
240582d2:	041b      	lsls	r3, r3, #16
240582d4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
240582d6:	68fb      	ldr	r3, [r7, #12]
240582d8:	681b      	ldr	r3, [r3, #0]
240582da:	461a      	mov	r2, r3
240582dc:	687b      	ldr	r3, [r7, #4]
240582de:	01db      	lsls	r3, r3, #7
240582e0:	4413      	add	r3, r2
240582e2:	3384      	adds	r3, #132	; 0x84
240582e4:	685b      	ldr	r3, [r3, #4]
240582e6:	68fa      	ldr	r2, [r7, #12]
240582e8:	6812      	ldr	r2, [r2, #0]
240582ea:	4611      	mov	r1, r2
240582ec:	687a      	ldr	r2, [r7, #4]
240582ee:	01d2      	lsls	r2, r2, #7
240582f0:	440a      	add	r2, r1
240582f2:	3284      	adds	r2, #132	; 0x84
240582f4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
240582f8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
240582fa:	68bb      	ldr	r3, [r7, #8]
240582fc:	681a      	ldr	r2, [r3, #0]
240582fe:	68fb      	ldr	r3, [r7, #12]
24058300:	681b      	ldr	r3, [r3, #0]
24058302:	68db      	ldr	r3, [r3, #12]
24058304:	0c1b      	lsrs	r3, r3, #16
24058306:	f3c3 030b 	ubfx	r3, r3, #0, #12
2405830a:	4413      	add	r3, r2
2405830c:	1c5a      	adds	r2, r3, #1
2405830e:	68fb      	ldr	r3, [r7, #12]
24058310:	681b      	ldr	r3, [r3, #0]
24058312:	4619      	mov	r1, r3
24058314:	687b      	ldr	r3, [r7, #4]
24058316:	01db      	lsls	r3, r3, #7
24058318:	440b      	add	r3, r1
2405831a:	3384      	adds	r3, #132	; 0x84
2405831c:	4619      	mov	r1, r3
2405831e:	69fb      	ldr	r3, [r7, #28]
24058320:	4313      	orrs	r3, r2
24058322:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
24058324:	68bb      	ldr	r3, [r7, #8]
24058326:	68da      	ldr	r2, [r3, #12]
24058328:	68fb      	ldr	r3, [r7, #12]
2405832a:	681b      	ldr	r3, [r3, #0]
2405832c:	68db      	ldr	r3, [r3, #12]
2405832e:	f3c3 030a 	ubfx	r3, r3, #0, #11
24058332:	4413      	add	r3, r2
24058334:	041b      	lsls	r3, r3, #16
24058336:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
24058338:	68fb      	ldr	r3, [r7, #12]
2405833a:	681b      	ldr	r3, [r3, #0]
2405833c:	461a      	mov	r2, r3
2405833e:	687b      	ldr	r3, [r7, #4]
24058340:	01db      	lsls	r3, r3, #7
24058342:	4413      	add	r3, r2
24058344:	3384      	adds	r3, #132	; 0x84
24058346:	689b      	ldr	r3, [r3, #8]
24058348:	68fa      	ldr	r2, [r7, #12]
2405834a:	6812      	ldr	r2, [r2, #0]
2405834c:	4611      	mov	r1, r2
2405834e:	687a      	ldr	r2, [r7, #4]
24058350:	01d2      	lsls	r2, r2, #7
24058352:	440a      	add	r2, r1
24058354:	3284      	adds	r2, #132	; 0x84
24058356:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
2405835a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
2405835c:	68bb      	ldr	r3, [r7, #8]
2405835e:	689a      	ldr	r2, [r3, #8]
24058360:	68fb      	ldr	r3, [r7, #12]
24058362:	681b      	ldr	r3, [r3, #0]
24058364:	68db      	ldr	r3, [r3, #12]
24058366:	f3c3 030a 	ubfx	r3, r3, #0, #11
2405836a:	4413      	add	r3, r2
2405836c:	1c5a      	adds	r2, r3, #1
2405836e:	68fb      	ldr	r3, [r7, #12]
24058370:	681b      	ldr	r3, [r3, #0]
24058372:	4619      	mov	r1, r3
24058374:	687b      	ldr	r3, [r7, #4]
24058376:	01db      	lsls	r3, r3, #7
24058378:	440b      	add	r3, r1
2405837a:	3384      	adds	r3, #132	; 0x84
2405837c:	4619      	mov	r1, r3
2405837e:	69fb      	ldr	r3, [r7, #28]
24058380:	4313      	orrs	r3, r2
24058382:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
24058384:	68fb      	ldr	r3, [r7, #12]
24058386:	681b      	ldr	r3, [r3, #0]
24058388:	461a      	mov	r2, r3
2405838a:	687b      	ldr	r3, [r7, #4]
2405838c:	01db      	lsls	r3, r3, #7
2405838e:	4413      	add	r3, r2
24058390:	3384      	adds	r3, #132	; 0x84
24058392:	691b      	ldr	r3, [r3, #16]
24058394:	68fa      	ldr	r2, [r7, #12]
24058396:	6812      	ldr	r2, [r2, #0]
24058398:	4611      	mov	r1, r2
2405839a:	687a      	ldr	r2, [r7, #4]
2405839c:	01d2      	lsls	r2, r2, #7
2405839e:	440a      	add	r2, r1
240583a0:	3284      	adds	r2, #132	; 0x84
240583a2:	f023 0307 	bic.w	r3, r3, #7
240583a6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
240583a8:	68fb      	ldr	r3, [r7, #12]
240583aa:	681b      	ldr	r3, [r3, #0]
240583ac:	461a      	mov	r2, r3
240583ae:	687b      	ldr	r3, [r7, #4]
240583b0:	01db      	lsls	r3, r3, #7
240583b2:	4413      	add	r3, r2
240583b4:	3384      	adds	r3, #132	; 0x84
240583b6:	461a      	mov	r2, r3
240583b8:	68bb      	ldr	r3, [r7, #8]
240583ba:	691b      	ldr	r3, [r3, #16]
240583bc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
240583be:	68bb      	ldr	r3, [r7, #8]
240583c0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
240583c4:	021b      	lsls	r3, r3, #8
240583c6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
240583c8:	68bb      	ldr	r3, [r7, #8]
240583ca:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
240583ce:	041b      	lsls	r3, r3, #16
240583d0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
240583d2:	68bb      	ldr	r3, [r7, #8]
240583d4:	699b      	ldr	r3, [r3, #24]
240583d6:	061b      	lsls	r3, r3, #24
240583d8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
240583da:	68fb      	ldr	r3, [r7, #12]
240583dc:	681b      	ldr	r3, [r3, #0]
240583de:	461a      	mov	r2, r3
240583e0:	687b      	ldr	r3, [r7, #4]
240583e2:	01db      	lsls	r3, r3, #7
240583e4:	4413      	add	r3, r2
240583e6:	3384      	adds	r3, #132	; 0x84
240583e8:	699b      	ldr	r3, [r3, #24]
240583ea:	68fb      	ldr	r3, [r7, #12]
240583ec:	681b      	ldr	r3, [r3, #0]
240583ee:	461a      	mov	r2, r3
240583f0:	687b      	ldr	r3, [r7, #4]
240583f2:	01db      	lsls	r3, r3, #7
240583f4:	4413      	add	r3, r2
240583f6:	3384      	adds	r3, #132	; 0x84
240583f8:	461a      	mov	r2, r3
240583fa:	2300      	movs	r3, #0
240583fc:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
240583fe:	68bb      	ldr	r3, [r7, #8]
24058400:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
24058404:	461a      	mov	r2, r3
24058406:	69fb      	ldr	r3, [r7, #28]
24058408:	431a      	orrs	r2, r3
2405840a:	69bb      	ldr	r3, [r7, #24]
2405840c:	431a      	orrs	r2, r3
2405840e:	68fb      	ldr	r3, [r7, #12]
24058410:	681b      	ldr	r3, [r3, #0]
24058412:	4619      	mov	r1, r3
24058414:	687b      	ldr	r3, [r7, #4]
24058416:	01db      	lsls	r3, r3, #7
24058418:	440b      	add	r3, r1
2405841a:	3384      	adds	r3, #132	; 0x84
2405841c:	4619      	mov	r1, r3
2405841e:	697b      	ldr	r3, [r7, #20]
24058420:	4313      	orrs	r3, r2
24058422:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
24058424:	68fb      	ldr	r3, [r7, #12]
24058426:	681b      	ldr	r3, [r3, #0]
24058428:	461a      	mov	r2, r3
2405842a:	687b      	ldr	r3, [r7, #4]
2405842c:	01db      	lsls	r3, r3, #7
2405842e:	4413      	add	r3, r2
24058430:	3384      	adds	r3, #132	; 0x84
24058432:	695b      	ldr	r3, [r3, #20]
24058434:	68fa      	ldr	r2, [r7, #12]
24058436:	6812      	ldr	r2, [r2, #0]
24058438:	4611      	mov	r1, r2
2405843a:	687a      	ldr	r2, [r7, #4]
2405843c:	01d2      	lsls	r2, r2, #7
2405843e:	440a      	add	r2, r1
24058440:	3284      	adds	r2, #132	; 0x84
24058442:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
24058446:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
24058448:	68fb      	ldr	r3, [r7, #12]
2405844a:	681b      	ldr	r3, [r3, #0]
2405844c:	461a      	mov	r2, r3
2405844e:	687b      	ldr	r3, [r7, #4]
24058450:	01db      	lsls	r3, r3, #7
24058452:	4413      	add	r3, r2
24058454:	3384      	adds	r3, #132	; 0x84
24058456:	461a      	mov	r2, r3
24058458:	68bb      	ldr	r3, [r7, #8]
2405845a:	695b      	ldr	r3, [r3, #20]
2405845c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
2405845e:	68fb      	ldr	r3, [r7, #12]
24058460:	681b      	ldr	r3, [r3, #0]
24058462:	461a      	mov	r2, r3
24058464:	687b      	ldr	r3, [r7, #4]
24058466:	01db      	lsls	r3, r3, #7
24058468:	4413      	add	r3, r2
2405846a:	3384      	adds	r3, #132	; 0x84
2405846c:	69da      	ldr	r2, [r3, #28]
2405846e:	68fb      	ldr	r3, [r7, #12]
24058470:	681b      	ldr	r3, [r3, #0]
24058472:	4619      	mov	r1, r3
24058474:	687b      	ldr	r3, [r7, #4]
24058476:	01db      	lsls	r3, r3, #7
24058478:	440b      	add	r3, r1
2405847a:	3384      	adds	r3, #132	; 0x84
2405847c:	4619      	mov	r1, r3
2405847e:	4b58      	ldr	r3, [pc, #352]	; (240585e0 <LTDC_SetConfig+0x32c>)
24058480:	4013      	ands	r3, r2
24058482:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
24058484:	68bb      	ldr	r3, [r7, #8]
24058486:	69da      	ldr	r2, [r3, #28]
24058488:	68bb      	ldr	r3, [r7, #8]
2405848a:	6a1b      	ldr	r3, [r3, #32]
2405848c:	68f9      	ldr	r1, [r7, #12]
2405848e:	6809      	ldr	r1, [r1, #0]
24058490:	4608      	mov	r0, r1
24058492:	6879      	ldr	r1, [r7, #4]
24058494:	01c9      	lsls	r1, r1, #7
24058496:	4401      	add	r1, r0
24058498:	3184      	adds	r1, #132	; 0x84
2405849a:	4313      	orrs	r3, r2
2405849c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
2405849e:	68fb      	ldr	r3, [r7, #12]
240584a0:	681b      	ldr	r3, [r3, #0]
240584a2:	461a      	mov	r2, r3
240584a4:	687b      	ldr	r3, [r7, #4]
240584a6:	01db      	lsls	r3, r3, #7
240584a8:	4413      	add	r3, r2
240584aa:	3384      	adds	r3, #132	; 0x84
240584ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
240584ae:	68fb      	ldr	r3, [r7, #12]
240584b0:	681b      	ldr	r3, [r3, #0]
240584b2:	461a      	mov	r2, r3
240584b4:	687b      	ldr	r3, [r7, #4]
240584b6:	01db      	lsls	r3, r3, #7
240584b8:	4413      	add	r3, r2
240584ba:	3384      	adds	r3, #132	; 0x84
240584bc:	461a      	mov	r2, r3
240584be:	2300      	movs	r3, #0
240584c0:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
240584c2:	68fb      	ldr	r3, [r7, #12]
240584c4:	681b      	ldr	r3, [r3, #0]
240584c6:	461a      	mov	r2, r3
240584c8:	687b      	ldr	r3, [r7, #4]
240584ca:	01db      	lsls	r3, r3, #7
240584cc:	4413      	add	r3, r2
240584ce:	3384      	adds	r3, #132	; 0x84
240584d0:	461a      	mov	r2, r3
240584d2:	68bb      	ldr	r3, [r7, #8]
240584d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
240584d6:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
240584d8:	68bb      	ldr	r3, [r7, #8]
240584da:	691b      	ldr	r3, [r3, #16]
240584dc:	2b00      	cmp	r3, #0
240584de:	d102      	bne.n	240584e6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
240584e0:	2304      	movs	r3, #4
240584e2:	61fb      	str	r3, [r7, #28]
240584e4:	e01b      	b.n	2405851e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
240584e6:	68bb      	ldr	r3, [r7, #8]
240584e8:	691b      	ldr	r3, [r3, #16]
240584ea:	2b01      	cmp	r3, #1
240584ec:	d102      	bne.n	240584f4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
240584ee:	2303      	movs	r3, #3
240584f0:	61fb      	str	r3, [r7, #28]
240584f2:	e014      	b.n	2405851e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
240584f4:	68bb      	ldr	r3, [r7, #8]
240584f6:	691b      	ldr	r3, [r3, #16]
240584f8:	2b04      	cmp	r3, #4
240584fa:	d00b      	beq.n	24058514 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
240584fc:	68bb      	ldr	r3, [r7, #8]
240584fe:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
24058500:	2b02      	cmp	r3, #2
24058502:	d007      	beq.n	24058514 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
24058504:	68bb      	ldr	r3, [r7, #8]
24058506:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
24058508:	2b03      	cmp	r3, #3
2405850a:	d003      	beq.n	24058514 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
2405850c:	68bb      	ldr	r3, [r7, #8]
2405850e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
24058510:	2b07      	cmp	r3, #7
24058512:	d102      	bne.n	2405851a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
24058514:	2302      	movs	r3, #2
24058516:	61fb      	str	r3, [r7, #28]
24058518:	e001      	b.n	2405851e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
2405851a:	2301      	movs	r3, #1
2405851c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
2405851e:	68fb      	ldr	r3, [r7, #12]
24058520:	681b      	ldr	r3, [r3, #0]
24058522:	461a      	mov	r2, r3
24058524:	687b      	ldr	r3, [r7, #4]
24058526:	01db      	lsls	r3, r3, #7
24058528:	4413      	add	r3, r2
2405852a:	3384      	adds	r3, #132	; 0x84
2405852c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405852e:	68fa      	ldr	r2, [r7, #12]
24058530:	6812      	ldr	r2, [r2, #0]
24058532:	4611      	mov	r1, r2
24058534:	687a      	ldr	r2, [r7, #4]
24058536:	01d2      	lsls	r2, r2, #7
24058538:	440a      	add	r2, r1
2405853a:	3284      	adds	r2, #132	; 0x84
2405853c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
24058540:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
24058542:	68bb      	ldr	r3, [r7, #8]
24058544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24058546:	69fa      	ldr	r2, [r7, #28]
24058548:	fb02 f303 	mul.w	r3, r2, r3
2405854c:	041a      	lsls	r2, r3, #16
2405854e:	68bb      	ldr	r3, [r7, #8]
24058550:	6859      	ldr	r1, [r3, #4]
24058552:	68bb      	ldr	r3, [r7, #8]
24058554:	681b      	ldr	r3, [r3, #0]
24058556:	1acb      	subs	r3, r1, r3
24058558:	69f9      	ldr	r1, [r7, #28]
2405855a:	fb01 f303 	mul.w	r3, r1, r3
2405855e:	3307      	adds	r3, #7
24058560:	68f9      	ldr	r1, [r7, #12]
24058562:	6809      	ldr	r1, [r1, #0]
24058564:	4608      	mov	r0, r1
24058566:	6879      	ldr	r1, [r7, #4]
24058568:	01c9      	lsls	r1, r1, #7
2405856a:	4401      	add	r1, r0
2405856c:	3184      	adds	r1, #132	; 0x84
2405856e:	4313      	orrs	r3, r2
24058570:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
24058572:	68fb      	ldr	r3, [r7, #12]
24058574:	681b      	ldr	r3, [r3, #0]
24058576:	461a      	mov	r2, r3
24058578:	687b      	ldr	r3, [r7, #4]
2405857a:	01db      	lsls	r3, r3, #7
2405857c:	4413      	add	r3, r2
2405857e:	3384      	adds	r3, #132	; 0x84
24058580:	6b1a      	ldr	r2, [r3, #48]	; 0x30
24058582:	68fb      	ldr	r3, [r7, #12]
24058584:	681b      	ldr	r3, [r3, #0]
24058586:	4619      	mov	r1, r3
24058588:	687b      	ldr	r3, [r7, #4]
2405858a:	01db      	lsls	r3, r3, #7
2405858c:	440b      	add	r3, r1
2405858e:	3384      	adds	r3, #132	; 0x84
24058590:	4619      	mov	r1, r3
24058592:	4b14      	ldr	r3, [pc, #80]	; (240585e4 <LTDC_SetConfig+0x330>)
24058594:	4013      	ands	r3, r2
24058596:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
24058598:	68fb      	ldr	r3, [r7, #12]
2405859a:	681b      	ldr	r3, [r3, #0]
2405859c:	461a      	mov	r2, r3
2405859e:	687b      	ldr	r3, [r7, #4]
240585a0:	01db      	lsls	r3, r3, #7
240585a2:	4413      	add	r3, r2
240585a4:	3384      	adds	r3, #132	; 0x84
240585a6:	461a      	mov	r2, r3
240585a8:	68bb      	ldr	r3, [r7, #8]
240585aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240585ac:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
240585ae:	68fb      	ldr	r3, [r7, #12]
240585b0:	681b      	ldr	r3, [r3, #0]
240585b2:	461a      	mov	r2, r3
240585b4:	687b      	ldr	r3, [r7, #4]
240585b6:	01db      	lsls	r3, r3, #7
240585b8:	4413      	add	r3, r2
240585ba:	3384      	adds	r3, #132	; 0x84
240585bc:	681b      	ldr	r3, [r3, #0]
240585be:	68fa      	ldr	r2, [r7, #12]
240585c0:	6812      	ldr	r2, [r2, #0]
240585c2:	4611      	mov	r1, r2
240585c4:	687a      	ldr	r2, [r7, #4]
240585c6:	01d2      	lsls	r2, r2, #7
240585c8:	440a      	add	r2, r1
240585ca:	3284      	adds	r2, #132	; 0x84
240585cc:	f043 0301 	orr.w	r3, r3, #1
240585d0:	6013      	str	r3, [r2, #0]
}
240585d2:	bf00      	nop
240585d4:	3724      	adds	r7, #36	; 0x24
240585d6:	46bd      	mov	sp, r7
240585d8:	f85d 7b04 	ldr.w	r7, [sp], #4
240585dc:	4770      	bx	lr
240585de:	bf00      	nop
240585e0:	fffff8f8 	.word	0xfffff8f8
240585e4:	fffff800 	.word	0xfffff800

240585e8 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
240585e8:	b480      	push	{r7}
240585ea:	b083      	sub	sp, #12
240585ec:	af00      	add	r7, sp, #0
240585ee:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
240585f0:	687b      	ldr	r3, [r7, #4]
240585f2:	2b00      	cmp	r3, #0
240585f4:	d101      	bne.n	240585fa <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
240585f6:	2301      	movs	r3, #1
240585f8:	e017      	b.n	2405862a <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
240585fa:	687b      	ldr	r3, [r7, #4]
240585fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
24058600:	b2db      	uxtb	r3, r3
24058602:	2b02      	cmp	r3, #2
24058604:	d004      	beq.n	24058610 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
24058606:	687b      	ldr	r3, [r7, #4]
24058608:	2280      	movs	r2, #128	; 0x80
2405860a:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
2405860c:	2301      	movs	r3, #1
2405860e:	e00c      	b.n	2405862a <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
24058610:	687b      	ldr	r3, [r7, #4]
24058612:	2204      	movs	r2, #4
24058614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
24058618:	687b      	ldr	r3, [r7, #4]
2405861a:	681b      	ldr	r3, [r3, #0]
2405861c:	68da      	ldr	r2, [r3, #12]
2405861e:	687b      	ldr	r3, [r7, #4]
24058620:	681b      	ldr	r3, [r3, #0]
24058622:	f022 0201 	bic.w	r2, r2, #1
24058626:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
24058628:	2300      	movs	r3, #0
}
2405862a:	4618      	mov	r0, r3
2405862c:	370c      	adds	r7, #12
2405862e:	46bd      	mov	sp, r7
24058630:	f85d 7b04 	ldr.w	r7, [sp], #4
24058634:	4770      	bx	lr
	...

24058638 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
24058638:	b580      	push	{r7, lr}
2405863a:	b086      	sub	sp, #24
2405863c:	af02      	add	r7, sp, #8
2405863e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
24058640:	2300      	movs	r3, #0
24058642:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
24058644:	f7fa fb6e 	bl	24052d24 <HAL_GetTick>
24058648:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
2405864a:	687b      	ldr	r3, [r7, #4]
2405864c:	2b00      	cmp	r3, #0
2405864e:	d102      	bne.n	24058656 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
24058650:	2301      	movs	r3, #1
24058652:	73fb      	strb	r3, [r7, #15]
24058654:	e0a6      	b.n	240587a4 <HAL_OSPI_Init+0x16c>
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_CKCSHT         (hospi->Init.ClkChipSelectHighTime));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
24058656:	687b      	ldr	r3, [r7, #4]
24058658:	2200      	movs	r2, #0
2405865a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
2405865c:	687b      	ldr	r3, [r7, #4]
2405865e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24058660:	2b00      	cmp	r3, #0
24058662:	f040 809f 	bne.w	240587a4 <HAL_OSPI_Init+0x16c>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
24058666:	6878      	ldr	r0, [r7, #4]
24058668:	f7f9 fee4 	bl	24052434 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
2405866c:	f241 3188 	movw	r1, #5000	; 0x1388
24058670:	6878      	ldr	r0, [r7, #4]
24058672:	f000 fb0d 	bl	24058c90 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, clocked chip select high time, free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
24058676:	687b      	ldr	r3, [r7, #4]
24058678:	681b      	ldr	r3, [r3, #0]
2405867a:	689a      	ldr	r2, [r3, #8]
2405867c:	4b4c      	ldr	r3, [pc, #304]	; (240587b0 <HAL_OSPI_Init+0x178>)
2405867e:	4013      	ands	r3, r2
24058680:	687a      	ldr	r2, [r7, #4]
24058682:	68d1      	ldr	r1, [r2, #12]
24058684:	687a      	ldr	r2, [r7, #4]
24058686:	6912      	ldr	r2, [r2, #16]
24058688:	3a01      	subs	r2, #1
2405868a:	0412      	lsls	r2, r2, #16
2405868c:	4311      	orrs	r1, r2
2405868e:	687a      	ldr	r2, [r7, #4]
24058690:	6952      	ldr	r2, [r2, #20]
24058692:	3a01      	subs	r2, #1
24058694:	0212      	lsls	r2, r2, #8
24058696:	4311      	orrs	r1, r2
24058698:	687a      	ldr	r2, [r7, #4]
2405869a:	6b52      	ldr	r2, [r2, #52]	; 0x34
2405869c:	0112      	lsls	r2, r2, #4
2405869e:	4311      	orrs	r1, r2
240586a0:	687a      	ldr	r2, [r7, #4]
240586a2:	69d2      	ldr	r2, [r2, #28]
240586a4:	4311      	orrs	r1, r2
240586a6:	687a      	ldr	r2, [r7, #4]
240586a8:	6812      	ldr	r2, [r2, #0]
240586aa:	430b      	orrs	r3, r1
240586ac:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  (hospi->Init.ClkChipSelectHighTime << OCTOSPI_DCR1_CKCSHT_Pos) | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
240586ae:	687b      	ldr	r3, [r7, #4]
240586b0:	681b      	ldr	r3, [r3, #0]
240586b2:	68db      	ldr	r3, [r3, #12]
240586b4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
240586b8:	687b      	ldr	r3, [r7, #4]
240586ba:	6a1a      	ldr	r2, [r3, #32]
240586bc:	687b      	ldr	r3, [r7, #4]
240586be:	681b      	ldr	r3, [r3, #0]
240586c0:	430a      	orrs	r2, r1
240586c2:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
240586c4:	687b      	ldr	r3, [r7, #4]
240586c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240586c8:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
240586ca:	687b      	ldr	r3, [r7, #4]
240586cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
240586ce:	687b      	ldr	r3, [r7, #4]
240586d0:	681b      	ldr	r3, [r3, #0]
240586d2:	430a      	orrs	r2, r1
240586d4:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
240586d6:	687b      	ldr	r3, [r7, #4]
240586d8:	681b      	ldr	r3, [r3, #0]
240586da:	687a      	ldr	r2, [r7, #4]
240586dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
240586de:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
240586e0:	687b      	ldr	r3, [r7, #4]
240586e2:	681b      	ldr	r3, [r3, #0]
240586e4:	681b      	ldr	r3, [r3, #0]
240586e6:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
240586ea:	687b      	ldr	r3, [r7, #4]
240586ec:	685b      	ldr	r3, [r3, #4]
240586ee:	3b01      	subs	r3, #1
240586f0:	021a      	lsls	r2, r3, #8
240586f2:	687b      	ldr	r3, [r7, #4]
240586f4:	681b      	ldr	r3, [r3, #0]
240586f6:	430a      	orrs	r2, r1
240586f8:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
240586fa:	687b      	ldr	r3, [r7, #4]
240586fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240586fe:	9300      	str	r3, [sp, #0]
24058700:	68bb      	ldr	r3, [r7, #8]
24058702:	2200      	movs	r2, #0
24058704:	2120      	movs	r1, #32
24058706:	6878      	ldr	r0, [r7, #4]
24058708:	f001 f824 	bl	24059754 <OSPI_WaitFlagStateUntilTimeout>
2405870c:	4603      	mov	r3, r0
2405870e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
24058710:	7bfb      	ldrb	r3, [r7, #15]
24058712:	2b00      	cmp	r3, #0
24058714:	d146      	bne.n	240587a4 <HAL_OSPI_Init+0x16c>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
24058716:	687b      	ldr	r3, [r7, #4]
24058718:	681b      	ldr	r3, [r3, #0]
2405871a:	68db      	ldr	r3, [r3, #12]
2405871c:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
24058720:	687b      	ldr	r3, [r7, #4]
24058722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24058724:	1e5a      	subs	r2, r3, #1
24058726:	687b      	ldr	r3, [r7, #4]
24058728:	681b      	ldr	r3, [r3, #0]
2405872a:	430a      	orrs	r2, r1
2405872c:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
2405872e:	687b      	ldr	r3, [r7, #4]
24058730:	681b      	ldr	r3, [r3, #0]
24058732:	681b      	ldr	r3, [r3, #0]
24058734:	f023 0140 	bic.w	r1, r3, #64	; 0x40
24058738:	687b      	ldr	r3, [r7, #4]
2405873a:	689a      	ldr	r2, [r3, #8]
2405873c:	687b      	ldr	r3, [r7, #4]
2405873e:	681b      	ldr	r3, [r3, #0]
24058740:	430a      	orrs	r2, r1
24058742:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
24058744:	687b      	ldr	r3, [r7, #4]
24058746:	681b      	ldr	r3, [r3, #0]
24058748:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
2405874c:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
24058750:	687b      	ldr	r3, [r7, #4]
24058752:	6a9a      	ldr	r2, [r3, #40]	; 0x28
24058754:	687b      	ldr	r3, [r7, #4]
24058756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24058758:	431a      	orrs	r2, r3
2405875a:	687b      	ldr	r3, [r7, #4]
2405875c:	681b      	ldr	r3, [r3, #0]
2405875e:	430a      	orrs	r2, r1
24058760:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
24058764:	687b      	ldr	r3, [r7, #4]
24058766:	681b      	ldr	r3, [r3, #0]
24058768:	681a      	ldr	r2, [r3, #0]
2405876a:	687b      	ldr	r3, [r7, #4]
2405876c:	681b      	ldr	r3, [r3, #0]
2405876e:	f042 0201 	orr.w	r2, r2, #1
24058772:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
24058774:	687b      	ldr	r3, [r7, #4]
24058776:	699b      	ldr	r3, [r3, #24]
24058778:	2b02      	cmp	r3, #2
2405877a:	d107      	bne.n	2405878c <HAL_OSPI_Init+0x154>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
2405877c:	687b      	ldr	r3, [r7, #4]
2405877e:	681b      	ldr	r3, [r3, #0]
24058780:	689a      	ldr	r2, [r3, #8]
24058782:	687b      	ldr	r3, [r7, #4]
24058784:	681b      	ldr	r3, [r3, #0]
24058786:	f042 0202 	orr.w	r2, r2, #2
2405878a:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
2405878c:	687b      	ldr	r3, [r7, #4]
2405878e:	68db      	ldr	r3, [r3, #12]
24058790:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
24058794:	d103      	bne.n	2405879e <HAL_OSPI_Init+0x166>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
24058796:	687b      	ldr	r3, [r7, #4]
24058798:	2201      	movs	r2, #1
2405879a:	655a      	str	r2, [r3, #84]	; 0x54
2405879c:	e002      	b.n	240587a4 <HAL_OSPI_Init+0x16c>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
2405879e:	687b      	ldr	r3, [r7, #4]
240587a0:	2202      	movs	r2, #2
240587a2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
  }

  /* Return function status */
  return status;
240587a4:	7bfb      	ldrb	r3, [r7, #15]
}
240587a6:	4618      	mov	r0, r3
240587a8:	3710      	adds	r7, #16
240587aa:	46bd      	mov	sp, r7
240587ac:	bd80      	pop	{r7, pc}
240587ae:	bf00      	nop
240587b0:	f8e0f88c 	.word	0xf8e0f88c

240587b4 <HAL_OSPI_IRQHandler>:
  * @brief  Handle OSPI interrupt request.
  * @param  hospi : OSPI handle
  * @retval None
  */
void HAL_OSPI_IRQHandler(OSPI_HandleTypeDef *hospi)
{
240587b4:	b580      	push	{r7, lr}
240587b6:	b086      	sub	sp, #24
240587b8:	af00      	add	r7, sp, #0
240587ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
240587bc:	687b      	ldr	r3, [r7, #4]
240587be:	681b      	ldr	r3, [r3, #0]
240587c0:	3350      	adds	r3, #80	; 0x50
240587c2:	617b      	str	r3, [r7, #20]
  uint32_t flag           = hospi->Instance->SR;
240587c4:	687b      	ldr	r3, [r7, #4]
240587c6:	681b      	ldr	r3, [r3, #0]
240587c8:	6a1b      	ldr	r3, [r3, #32]
240587ca:	613b      	str	r3, [r7, #16]
  uint32_t itsource       = hospi->Instance->CR;
240587cc:	687b      	ldr	r3, [r7, #4]
240587ce:	681b      	ldr	r3, [r3, #0]
240587d0:	681b      	ldr	r3, [r3, #0]
240587d2:	60fb      	str	r3, [r7, #12]
  uint32_t currentstate   = hospi->State;
240587d4:	687b      	ldr	r3, [r7, #4]
240587d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240587d8:	60bb      	str	r3, [r7, #8]

  /* OctoSPI fifo threshold interrupt occurred -------------------------------*/
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
240587da:	693b      	ldr	r3, [r7, #16]
240587dc:	f003 0304 	and.w	r3, r3, #4
240587e0:	2b00      	cmp	r3, #0
240587e2:	d03a      	beq.n	2405885a <HAL_OSPI_IRQHandler+0xa6>
240587e4:	68fb      	ldr	r3, [r7, #12]
240587e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
240587ea:	2b00      	cmp	r3, #0
240587ec:	d035      	beq.n	2405885a <HAL_OSPI_IRQHandler+0xa6>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
240587ee:	68bb      	ldr	r3, [r7, #8]
240587f0:	2b18      	cmp	r3, #24
240587f2:	d10f      	bne.n	24058814 <HAL_OSPI_IRQHandler+0x60>
    {
      /* Write a data in the fifo */
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
240587f4:	687b      	ldr	r3, [r7, #4]
240587f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
240587f8:	781a      	ldrb	r2, [r3, #0]
240587fa:	697b      	ldr	r3, [r7, #20]
240587fc:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
240587fe:	687b      	ldr	r3, [r7, #4]
24058800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24058802:	1c5a      	adds	r2, r3, #1
24058804:	687b      	ldr	r3, [r7, #4]
24058806:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->XferCount--;
24058808:	687b      	ldr	r3, [r7, #4]
2405880a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405880c:	1e5a      	subs	r2, r3, #1
2405880e:	687b      	ldr	r3, [r7, #4]
24058810:	64da      	str	r2, [r3, #76]	; 0x4c
24058812:	e012      	b.n	2405883a <HAL_OSPI_IRQHandler+0x86>
    }
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
24058814:	68bb      	ldr	r3, [r7, #8]
24058816:	2b28      	cmp	r3, #40	; 0x28
24058818:	d10f      	bne.n	2405883a <HAL_OSPI_IRQHandler+0x86>
    {
      /* Read a data from the fifo */
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
2405881a:	687b      	ldr	r3, [r7, #4]
2405881c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2405881e:	697a      	ldr	r2, [r7, #20]
24058820:	7812      	ldrb	r2, [r2, #0]
24058822:	b2d2      	uxtb	r2, r2
24058824:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
24058826:	687b      	ldr	r3, [r7, #4]
24058828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2405882a:	1c5a      	adds	r2, r3, #1
2405882c:	687b      	ldr	r3, [r7, #4]
2405882e:	645a      	str	r2, [r3, #68]	; 0x44
      hospi->XferCount--;
24058830:	687b      	ldr	r3, [r7, #4]
24058832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24058834:	1e5a      	subs	r2, r3, #1
24058836:	687b      	ldr	r3, [r7, #4]
24058838:	64da      	str	r2, [r3, #76]	; 0x4c
    else
    {
      /* Nothing to do */
    }

    if (hospi->XferCount == 0U)
2405883a:	687b      	ldr	r3, [r7, #4]
2405883c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405883e:	2b00      	cmp	r3, #0
24058840:	d107      	bne.n	24058852 <HAL_OSPI_IRQHandler+0x9e>
    {
      /* All data have been received or transmitted for the transfer */
      /* Disable fifo threshold interrupt */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
24058842:	687b      	ldr	r3, [r7, #4]
24058844:	681b      	ldr	r3, [r3, #0]
24058846:	681a      	ldr	r2, [r3, #0]
24058848:	687b      	ldr	r3, [r7, #4]
2405884a:	681b      	ldr	r3, [r3, #0]
2405884c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
24058850:	601a      	str	r2, [r3, #0]

    /* Fifo threshold callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->FifoThresholdCallback(hospi);
#else
    HAL_OSPI_FifoThresholdCallback(hospi);
24058852:	6878      	ldr	r0, [r7, #4]
24058854:	f000 f9e0 	bl	24058c18 <HAL_OSPI_FifoThresholdCallback>
24058858:	e0e7      	b.n	24058a2a <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
  /* OctoSPI transfer complete interrupt occurred ----------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
2405885a:	693b      	ldr	r3, [r7, #16]
2405885c:	f003 0302 	and.w	r3, r3, #2
24058860:	2b00      	cmp	r3, #0
24058862:	d067      	beq.n	24058934 <HAL_OSPI_IRQHandler+0x180>
24058864:	68fb      	ldr	r3, [r7, #12]
24058866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405886a:	2b00      	cmp	r3, #0
2405886c:	d062      	beq.n	24058934 <HAL_OSPI_IRQHandler+0x180>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
2405886e:	68bb      	ldr	r3, [r7, #8]
24058870:	2b28      	cmp	r3, #40	; 0x28
24058872:	d131      	bne.n	240588d8 <HAL_OSPI_IRQHandler+0x124>
    {
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
24058874:	687b      	ldr	r3, [r7, #4]
24058876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24058878:	2b00      	cmp	r3, #0
2405887a:	d015      	beq.n	240588a8 <HAL_OSPI_IRQHandler+0xf4>
2405887c:	693b      	ldr	r3, [r7, #16]
2405887e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
24058882:	2b00      	cmp	r3, #0
24058884:	d010      	beq.n	240588a8 <HAL_OSPI_IRQHandler+0xf4>
      {
        /* Read the last data received in the fifo */
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
24058886:	687b      	ldr	r3, [r7, #4]
24058888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2405888a:	697a      	ldr	r2, [r7, #20]
2405888c:	7812      	ldrb	r2, [r2, #0]
2405888e:	b2d2      	uxtb	r2, r2
24058890:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
24058892:	687b      	ldr	r3, [r7, #4]
24058894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24058896:	1c5a      	adds	r2, r3, #1
24058898:	687b      	ldr	r3, [r7, #4]
2405889a:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->XferCount--;
2405889c:	687b      	ldr	r3, [r7, #4]
2405889e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
240588a0:	1e5a      	subs	r2, r3, #1
240588a2:	687b      	ldr	r3, [r7, #4]
240588a4:	64da      	str	r2, [r3, #76]	; 0x4c
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
240588a6:	e0bd      	b.n	24058a24 <HAL_OSPI_IRQHandler+0x270>
      }
      else if(hospi->XferCount == 0U)
240588a8:	687b      	ldr	r3, [r7, #4]
240588aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
240588ac:	2b00      	cmp	r3, #0
240588ae:	f040 80b9 	bne.w	24058a24 <HAL_OSPI_IRQHandler+0x270>
      {
        /* Clear flag */
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
240588b2:	687b      	ldr	r3, [r7, #4]
240588b4:	681b      	ldr	r3, [r3, #0]
240588b6:	2202      	movs	r2, #2
240588b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Disable the interrupts */
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
240588ba:	687b      	ldr	r3, [r7, #4]
240588bc:	681b      	ldr	r3, [r3, #0]
240588be:	681a      	ldr	r2, [r3, #0]
240588c0:	687b      	ldr	r3, [r7, #4]
240588c2:	681b      	ldr	r3, [r3, #0]
240588c4:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
240588c8:	601a      	str	r2, [r3, #0]

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
240588ca:	687b      	ldr	r3, [r7, #4]
240588cc:	2202      	movs	r2, #2
240588ce:	655a      	str	r2, [r3, #84]	; 0x54

        /* RX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->RxCpltCallback(hospi);
#else
        HAL_OSPI_RxCpltCallback(hospi);
240588d0:	6878      	ldr	r0, [r7, #4]
240588d2:	f000 f9b5 	bl	24058c40 <HAL_OSPI_RxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
240588d6:	e0a5      	b.n	24058a24 <HAL_OSPI_IRQHandler+0x270>
      }
    }
    else
    {
      /* Clear flag */
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
240588d8:	687b      	ldr	r3, [r7, #4]
240588da:	681b      	ldr	r3, [r3, #0]
240588dc:	2202      	movs	r2, #2
240588de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
240588e0:	687b      	ldr	r3, [r7, #4]
240588e2:	681b      	ldr	r3, [r3, #0]
240588e4:	681a      	ldr	r2, [r3, #0]
240588e6:	687b      	ldr	r3, [r7, #4]
240588e8:	681b      	ldr	r3, [r3, #0]
240588ea:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
240588ee:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
240588f0:	687b      	ldr	r3, [r7, #4]
240588f2:	2202      	movs	r2, #2
240588f4:	655a      	str	r2, [r3, #84]	; 0x54

      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
240588f6:	68bb      	ldr	r3, [r7, #8]
240588f8:	2b18      	cmp	r3, #24
240588fa:	d103      	bne.n	24058904 <HAL_OSPI_IRQHandler+0x150>
      {
        /* TX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->TxCpltCallback(hospi);
#else
        HAL_OSPI_TxCpltCallback(hospi);
240588fc:	6878      	ldr	r0, [r7, #4]
240588fe:	f000 f9a9 	bl	24058c54 <HAL_OSPI_TxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
24058902:	e08f      	b.n	24058a24 <HAL_OSPI_IRQHandler+0x270>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
24058904:	68bb      	ldr	r3, [r7, #8]
24058906:	2b08      	cmp	r3, #8
24058908:	d103      	bne.n	24058912 <HAL_OSPI_IRQHandler+0x15e>
      {
        /* Command complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->CmdCpltCallback(hospi);
#else
        HAL_OSPI_CmdCpltCallback(hospi);
2405890a:	6878      	ldr	r0, [r7, #4]
2405890c:	f000 f98e 	bl	24058c2c <HAL_OSPI_CmdCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
24058910:	e088      	b.n	24058a24 <HAL_OSPI_IRQHandler+0x270>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_ABORT)
24058912:	68bb      	ldr	r3, [r7, #8]
24058914:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24058918:	f040 8084 	bne.w	24058a24 <HAL_OSPI_IRQHandler+0x270>
      {
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
2405891c:	687b      	ldr	r3, [r7, #4]
2405891e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24058920:	2b00      	cmp	r3, #0
24058922:	d103      	bne.n	2405892c <HAL_OSPI_IRQHandler+0x178>
          /* Abort called by the user */
          /* Abort complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->AbortCpltCallback(hospi);
#else
          HAL_OSPI_AbortCpltCallback(hospi);
24058924:	6878      	ldr	r0, [r7, #4]
24058926:	f000 f96d 	bl	24058c04 <HAL_OSPI_AbortCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
2405892a:	e07b      	b.n	24058a24 <HAL_OSPI_IRQHandler+0x270>
          /* Abort due to an error (eg : DMA error) */
          /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->ErrorCallback(hospi);
#else
          HAL_OSPI_ErrorCallback(hospi);
2405892c:	6878      	ldr	r0, [r7, #4]
2405892e:	f000 f95f 	bl	24058bf0 <HAL_OSPI_ErrorCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
24058932:	e077      	b.n	24058a24 <HAL_OSPI_IRQHandler+0x270>
        /* Nothing to do */
      }
    }
  }
  /* OctoSPI status match interrupt occurred ---------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
24058934:	693b      	ldr	r3, [r7, #16]
24058936:	f003 0308 	and.w	r3, r3, #8
2405893a:	2b00      	cmp	r3, #0
2405893c:	d01e      	beq.n	2405897c <HAL_OSPI_IRQHandler+0x1c8>
2405893e:	68fb      	ldr	r3, [r7, #12]
24058940:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
24058944:	2b00      	cmp	r3, #0
24058946:	d019      	beq.n	2405897c <HAL_OSPI_IRQHandler+0x1c8>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
24058948:	687b      	ldr	r3, [r7, #4]
2405894a:	681b      	ldr	r3, [r3, #0]
2405894c:	2208      	movs	r2, #8
2405894e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Check if automatic poll mode stop is activated */
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
24058950:	687b      	ldr	r3, [r7, #4]
24058952:	681b      	ldr	r3, [r3, #0]
24058954:	681b      	ldr	r3, [r3, #0]
24058956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2405895a:	2b00      	cmp	r3, #0
2405895c:	d00a      	beq.n	24058974 <HAL_OSPI_IRQHandler+0x1c0>
    {
      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
2405895e:	687b      	ldr	r3, [r7, #4]
24058960:	681b      	ldr	r3, [r3, #0]
24058962:	681a      	ldr	r2, [r3, #0]
24058964:	687b      	ldr	r3, [r7, #4]
24058966:	681b      	ldr	r3, [r3, #0]
24058968:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
2405896c:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
2405896e:	687b      	ldr	r3, [r7, #4]
24058970:	2202      	movs	r2, #2
24058972:	655a      	str	r2, [r3, #84]	; 0x54

    /* Status match callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->StatusMatchCallback(hospi);
#else
    HAL_OSPI_StatusMatchCallback(hospi);
24058974:	6878      	ldr	r0, [r7, #4]
24058976:	f000 f977 	bl	24058c68 <HAL_OSPI_StatusMatchCallback>
2405897a:	e056      	b.n	24058a2a <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* OctoSPI transfer error interrupt occurred -------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
2405897c:	693b      	ldr	r3, [r7, #16]
2405897e:	f003 0301 	and.w	r3, r3, #1
24058982:	2b00      	cmp	r3, #0
24058984:	d03c      	beq.n	24058a00 <HAL_OSPI_IRQHandler+0x24c>
24058986:	68fb      	ldr	r3, [r7, #12]
24058988:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2405898c:	2b00      	cmp	r3, #0
2405898e:	d037      	beq.n	24058a00 <HAL_OSPI_IRQHandler+0x24c>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
24058990:	687b      	ldr	r3, [r7, #4]
24058992:	681b      	ldr	r3, [r3, #0]
24058994:	2201      	movs	r2, #1
24058996:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable all interrupts */
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
24058998:	687b      	ldr	r3, [r7, #4]
2405899a:	681b      	ldr	r3, [r3, #0]
2405899c:	681a      	ldr	r2, [r3, #0]
2405899e:	687b      	ldr	r3, [r7, #4]
240589a0:	681b      	ldr	r3, [r3, #0]
240589a2:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
240589a6:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
240589a8:	687b      	ldr	r3, [r7, #4]
240589aa:	2202      	movs	r2, #2
240589ac:	659a      	str	r2, [r3, #88]	; 0x58

    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
240589ae:	687b      	ldr	r3, [r7, #4]
240589b0:	681b      	ldr	r3, [r3, #0]
240589b2:	681b      	ldr	r3, [r3, #0]
240589b4:	f003 0304 	and.w	r3, r3, #4
240589b8:	2b00      	cmp	r3, #0
240589ba:	d01a      	beq.n	240589f2 <HAL_OSPI_IRQHandler+0x23e>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
240589bc:	687b      	ldr	r3, [r7, #4]
240589be:	681b      	ldr	r3, [r3, #0]
240589c0:	681a      	ldr	r2, [r3, #0]
240589c2:	687b      	ldr	r3, [r7, #4]
240589c4:	681b      	ldr	r3, [r3, #0]
240589c6:	f022 0204 	bic.w	r2, r2, #4
240589ca:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      hospi->hmdma->XferAbortCallback = OSPI_DMAAbortCplt;
240589cc:	687b      	ldr	r3, [r7, #4]
240589ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
240589d0:	4a18      	ldr	r2, [pc, #96]	; (24058a34 <HAL_OSPI_IRQHandler+0x280>)
240589d2:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hospi->hmdma) != HAL_OK)
240589d4:	687b      	ldr	r3, [r7, #4]
240589d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
240589d8:	4618      	mov	r0, r3
240589da:	f7ff fe05 	bl	240585e8 <HAL_MDMA_Abort_IT>
240589de:	4603      	mov	r3, r0
240589e0:	2b00      	cmp	r3, #0
240589e2:	d021      	beq.n	24058a28 <HAL_OSPI_IRQHandler+0x274>
      {
        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
240589e4:	687b      	ldr	r3, [r7, #4]
240589e6:	2202      	movs	r2, #2
240589e8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->ErrorCallback(hospi);
#else
        HAL_OSPI_ErrorCallback(hospi);
240589ea:	6878      	ldr	r0, [r7, #4]
240589ec:	f000 f900 	bl	24058bf0 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
240589f0:	e01a      	b.n	24058a28 <HAL_OSPI_IRQHandler+0x274>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
240589f2:	687b      	ldr	r3, [r7, #4]
240589f4:	2202      	movs	r2, #2
240589f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
      hospi->ErrorCallback(hospi);
#else
      HAL_OSPI_ErrorCallback(hospi);
240589f8:	6878      	ldr	r0, [r7, #4]
240589fa:	f000 f8f9 	bl	24058bf0 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
240589fe:	e013      	b.n	24058a28 <HAL_OSPI_IRQHandler+0x274>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
    }
  }
  /* OctoSPI timeout interrupt occurred --------------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
24058a00:	693b      	ldr	r3, [r7, #16]
24058a02:	f003 0310 	and.w	r3, r3, #16
24058a06:	2b00      	cmp	r3, #0
24058a08:	d00f      	beq.n	24058a2a <HAL_OSPI_IRQHandler+0x276>
24058a0a:	68fb      	ldr	r3, [r7, #12]
24058a0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
24058a10:	2b00      	cmp	r3, #0
24058a12:	d00a      	beq.n	24058a2a <HAL_OSPI_IRQHandler+0x276>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
24058a14:	687b      	ldr	r3, [r7, #4]
24058a16:	681b      	ldr	r3, [r3, #0]
24058a18:	2210      	movs	r2, #16
24058a1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Timeout callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->TimeOutCallback(hospi);
#else
    HAL_OSPI_TimeOutCallback(hospi);
24058a1c:	6878      	ldr	r0, [r7, #4]
24058a1e:	f000 f92d 	bl	24058c7c <HAL_OSPI_TimeOutCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
24058a22:	e002      	b.n	24058a2a <HAL_OSPI_IRQHandler+0x276>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
24058a24:	bf00      	nop
24058a26:	e000      	b.n	24058a2a <HAL_OSPI_IRQHandler+0x276>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
24058a28:	bf00      	nop
}
24058a2a:	bf00      	nop
24058a2c:	3718      	adds	r7, #24
24058a2e:	46bd      	mov	sp, r7
24058a30:	bd80      	pop	{r7, pc}
24058a32:	bf00      	nop
24058a34:	240596dd 	.word	0x240596dd

24058a38 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
24058a38:	b580      	push	{r7, lr}
24058a3a:	b08a      	sub	sp, #40	; 0x28
24058a3c:	af02      	add	r7, sp, #8
24058a3e:	60f8      	str	r0, [r7, #12]
24058a40:	60b9      	str	r1, [r7, #8]
24058a42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
24058a44:	f7fa f96e 	bl	24052d24 <HAL_GetTick>
24058a48:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
24058a4a:	68bb      	ldr	r3, [r7, #8]
24058a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24058a4e:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
24058a50:	68fb      	ldr	r3, [r7, #12]
24058a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24058a54:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
24058a56:	697b      	ldr	r3, [r7, #20]
24058a58:	2b02      	cmp	r3, #2
24058a5a:	d104      	bne.n	24058a66 <HAL_OSPI_Command+0x2e>
24058a5c:	68fb      	ldr	r3, [r7, #12]
24058a5e:	68db      	ldr	r3, [r3, #12]
24058a60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
24058a64:	d115      	bne.n	24058a92 <HAL_OSPI_Command+0x5a>
24058a66:	697b      	ldr	r3, [r7, #20]
24058a68:	2b14      	cmp	r3, #20
24058a6a:	d107      	bne.n	24058a7c <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
24058a6c:	68bb      	ldr	r3, [r7, #8]
24058a6e:	681b      	ldr	r3, [r3, #0]
24058a70:	2b02      	cmp	r3, #2
24058a72:	d00e      	beq.n	24058a92 <HAL_OSPI_Command+0x5a>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
24058a74:	68bb      	ldr	r3, [r7, #8]
24058a76:	681b      	ldr	r3, [r3, #0]
24058a78:	2b03      	cmp	r3, #3
24058a7a:	d00a      	beq.n	24058a92 <HAL_OSPI_Command+0x5a>
24058a7c:	697b      	ldr	r3, [r7, #20]
24058a7e:	2b24      	cmp	r3, #36	; 0x24
24058a80:	d15b      	bne.n	24058b3a <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
24058a82:	68bb      	ldr	r3, [r7, #8]
24058a84:	681b      	ldr	r3, [r3, #0]
24058a86:	2b01      	cmp	r3, #1
24058a88:	d003      	beq.n	24058a92 <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
24058a8a:	68bb      	ldr	r3, [r7, #8]
24058a8c:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
24058a8e:	2b03      	cmp	r3, #3
24058a90:	d153      	bne.n	24058b3a <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
24058a92:	687b      	ldr	r3, [r7, #4]
24058a94:	9300      	str	r3, [sp, #0]
24058a96:	69bb      	ldr	r3, [r7, #24]
24058a98:	2200      	movs	r2, #0
24058a9a:	2120      	movs	r1, #32
24058a9c:	68f8      	ldr	r0, [r7, #12]
24058a9e:	f000 fe59 	bl	24059754 <OSPI_WaitFlagStateUntilTimeout>
24058aa2:	4603      	mov	r3, r0
24058aa4:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
24058aa6:	7ffb      	ldrb	r3, [r7, #31]
24058aa8:	2b00      	cmp	r3, #0
24058aaa:	d14c      	bne.n	24058b46 <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
24058aac:	68fb      	ldr	r3, [r7, #12]
24058aae:	2200      	movs	r2, #0
24058ab0:	659a      	str	r2, [r3, #88]	; 0x58

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
24058ab2:	68b9      	ldr	r1, [r7, #8]
24058ab4:	68f8      	ldr	r0, [r7, #12]
24058ab6:	f000 fe85 	bl	240597c4 <OSPI_ConfigCmd>
24058aba:	4603      	mov	r3, r0
24058abc:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
24058abe:	7ffb      	ldrb	r3, [r7, #31]
24058ac0:	2b00      	cmp	r3, #0
24058ac2:	d140      	bne.n	24058b46 <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
24058ac4:	68bb      	ldr	r3, [r7, #8]
24058ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24058ac8:	2b00      	cmp	r3, #0
24058aca:	d10e      	bne.n	24058aea <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
24058acc:	687b      	ldr	r3, [r7, #4]
24058ace:	9300      	str	r3, [sp, #0]
24058ad0:	69bb      	ldr	r3, [r7, #24]
24058ad2:	2201      	movs	r2, #1
24058ad4:	2102      	movs	r1, #2
24058ad6:	68f8      	ldr	r0, [r7, #12]
24058ad8:	f000 fe3c 	bl	24059754 <OSPI_WaitFlagStateUntilTimeout>
24058adc:	4603      	mov	r3, r0
24058ade:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
24058ae0:	68fb      	ldr	r3, [r7, #12]
24058ae2:	681b      	ldr	r3, [r3, #0]
24058ae4:	2202      	movs	r2, #2
24058ae6:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
24058ae8:	e02d      	b.n	24058b46 <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
24058aea:	68bb      	ldr	r3, [r7, #8]
24058aec:	681b      	ldr	r3, [r3, #0]
24058aee:	2b00      	cmp	r3, #0
24058af0:	d103      	bne.n	24058afa <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
24058af2:	68fb      	ldr	r3, [r7, #12]
24058af4:	2204      	movs	r2, #4
24058af6:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
24058af8:	e025      	b.n	24058b46 <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
24058afa:	68bb      	ldr	r3, [r7, #8]
24058afc:	681b      	ldr	r3, [r3, #0]
24058afe:	2b01      	cmp	r3, #1
24058b00:	d10b      	bne.n	24058b1a <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
24058b02:	68fb      	ldr	r3, [r7, #12]
24058b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24058b06:	2b24      	cmp	r3, #36	; 0x24
24058b08:	d103      	bne.n	24058b12 <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
24058b0a:	68fb      	ldr	r3, [r7, #12]
24058b0c:	2204      	movs	r2, #4
24058b0e:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
24058b10:	e019      	b.n	24058b46 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
24058b12:	68fb      	ldr	r3, [r7, #12]
24058b14:	2214      	movs	r2, #20
24058b16:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
24058b18:	e015      	b.n	24058b46 <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
24058b1a:	68bb      	ldr	r3, [r7, #8]
24058b1c:	681b      	ldr	r3, [r3, #0]
24058b1e:	2b02      	cmp	r3, #2
24058b20:	d111      	bne.n	24058b46 <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
24058b22:	68fb      	ldr	r3, [r7, #12]
24058b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24058b26:	2b14      	cmp	r3, #20
24058b28:	d103      	bne.n	24058b32 <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
24058b2a:	68fb      	ldr	r3, [r7, #12]
24058b2c:	2204      	movs	r2, #4
24058b2e:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
24058b30:	e009      	b.n	24058b46 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
24058b32:	68fb      	ldr	r3, [r7, #12]
24058b34:	2224      	movs	r2, #36	; 0x24
24058b36:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
24058b38:	e005      	b.n	24058b46 <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
24058b3a:	2301      	movs	r3, #1
24058b3c:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
24058b3e:	68fb      	ldr	r3, [r7, #12]
24058b40:	2210      	movs	r2, #16
24058b42:	659a      	str	r2, [r3, #88]	; 0x58
24058b44:	e000      	b.n	24058b48 <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
24058b46:	bf00      	nop
  }

  /* Return function status */
  return status;
24058b48:	7ffb      	ldrb	r3, [r7, #31]
}
24058b4a:	4618      	mov	r0, r3
24058b4c:	3720      	adds	r7, #32
24058b4e:	46bd      	mov	sp, r7
24058b50:	bd80      	pop	{r7, pc}
	...

24058b54 <HAL_OSPI_MemoryMapped>:
  * @param  cfg   : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_MemoryMapped(OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg)
{
24058b54:	b580      	push	{r7, lr}
24058b56:	b086      	sub	sp, #24
24058b58:	af02      	add	r7, sp, #8
24058b5a:	6078      	str	r0, [r7, #4]
24058b5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
24058b5e:	f7fa f8e1 	bl	24052d24 <HAL_GetTick>
24058b62:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_OSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
24058b64:	687b      	ldr	r3, [r7, #4]
24058b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24058b68:	2b04      	cmp	r3, #4
24058b6a:	d134      	bne.n	24058bd6 <HAL_OSPI_MemoryMapped+0x82>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
24058b6c:	687b      	ldr	r3, [r7, #4]
24058b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24058b70:	9300      	str	r3, [sp, #0]
24058b72:	68bb      	ldr	r3, [r7, #8]
24058b74:	2200      	movs	r2, #0
24058b76:	2120      	movs	r1, #32
24058b78:	6878      	ldr	r0, [r7, #4]
24058b7a:	f000 fdeb 	bl	24059754 <OSPI_WaitFlagStateUntilTimeout>
24058b7e:	4603      	mov	r3, r0
24058b80:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
24058b82:	7bfb      	ldrb	r3, [r7, #15]
24058b84:	2b00      	cmp	r3, #0
24058b86:	d12b      	bne.n	24058be0 <HAL_OSPI_MemoryMapped+0x8c>
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
24058b88:	687b      	ldr	r3, [r7, #4]
24058b8a:	2288      	movs	r2, #136	; 0x88
24058b8c:	655a      	str	r2, [r3, #84]	; 0x54

      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
24058b8e:	683b      	ldr	r3, [r7, #0]
24058b90:	681b      	ldr	r3, [r3, #0]
24058b92:	2b08      	cmp	r3, #8
24058b94:	d111      	bne.n	24058bba <HAL_OSPI_MemoryMapped+0x66>
      {
        assert_param(IS_OSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure register */
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
24058b96:	687b      	ldr	r3, [r7, #4]
24058b98:	681b      	ldr	r3, [r3, #0]
24058b9a:	683a      	ldr	r2, [r7, #0]
24058b9c:	6852      	ldr	r2, [r2, #4]
24058b9e:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
24058ba2:	687b      	ldr	r3, [r7, #4]
24058ba4:	681b      	ldr	r3, [r3, #0]
24058ba6:	2210      	movs	r2, #16
24058ba8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Enable the timeout interrupt */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
24058baa:	687b      	ldr	r3, [r7, #4]
24058bac:	681b      	ldr	r3, [r3, #0]
24058bae:	681a      	ldr	r2, [r3, #0]
24058bb0:	687b      	ldr	r3, [r7, #4]
24058bb2:	681b      	ldr	r3, [r3, #0]
24058bb4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
24058bb8:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
24058bba:	687b      	ldr	r3, [r7, #4]
24058bbc:	681b      	ldr	r3, [r3, #0]
24058bbe:	681a      	ldr	r2, [r3, #0]
24058bc0:	4b0a      	ldr	r3, [pc, #40]	; (24058bec <HAL_OSPI_MemoryMapped+0x98>)
24058bc2:	4013      	ands	r3, r2
24058bc4:	683a      	ldr	r2, [r7, #0]
24058bc6:	6812      	ldr	r2, [r2, #0]
24058bc8:	431a      	orrs	r2, r3
24058bca:	687b      	ldr	r3, [r7, #4]
24058bcc:	681b      	ldr	r3, [r3, #0]
24058bce:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
24058bd2:	601a      	str	r2, [r3, #0]
24058bd4:	e004      	b.n	24058be0 <HAL_OSPI_MemoryMapped+0x8c>
                 (cfg->TimeOutActivation | OSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
24058bd6:	2301      	movs	r3, #1
24058bd8:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
24058bda:	687b      	ldr	r3, [r7, #4]
24058bdc:	2210      	movs	r2, #16
24058bde:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Return function status */
  return status;
24058be0:	7bfb      	ldrb	r3, [r7, #15]
}
24058be2:	4618      	mov	r0, r3
24058be4:	3710      	adds	r7, #16
24058be6:	46bd      	mov	sp, r7
24058be8:	bd80      	pop	{r7, pc}
24058bea:	bf00      	nop
24058bec:	cffffff7 	.word	0xcffffff7

24058bf0 <HAL_OSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_ErrorCallback(OSPI_HandleTypeDef *hospi)
{
24058bf0:	b480      	push	{r7}
24058bf2:	b083      	sub	sp, #12
24058bf4:	af00      	add	r7, sp, #0
24058bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_ErrorCallback could be implemented in the user file
   */
}
24058bf8:	bf00      	nop
24058bfa:	370c      	adds	r7, #12
24058bfc:	46bd      	mov	sp, r7
24058bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
24058c02:	4770      	bx	lr

24058c04 <HAL_OSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_AbortCpltCallback(OSPI_HandleTypeDef *hospi)
{
24058c04:	b480      	push	{r7}
24058c06:	b083      	sub	sp, #12
24058c08:	af00      	add	r7, sp, #0
24058c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_AbortCpltCallback could be implemented in the user file
   */
}
24058c0c:	bf00      	nop
24058c0e:	370c      	adds	r7, #12
24058c10:	46bd      	mov	sp, r7
24058c12:	f85d 7b04 	ldr.w	r7, [sp], #4
24058c16:	4770      	bx	lr

24058c18 <HAL_OSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_FifoThresholdCallback(OSPI_HandleTypeDef *hospi)
{
24058c18:	b480      	push	{r7}
24058c1a:	b083      	sub	sp, #12
24058c1c:	af00      	add	r7, sp, #0
24058c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
24058c20:	bf00      	nop
24058c22:	370c      	adds	r7, #12
24058c24:	46bd      	mov	sp, r7
24058c26:	f85d 7b04 	ldr.w	r7, [sp], #4
24058c2a:	4770      	bx	lr

24058c2c <HAL_OSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_CmdCpltCallback(OSPI_HandleTypeDef *hospi)
{
24058c2c:	b480      	push	{r7}
24058c2e:	b083      	sub	sp, #12
24058c30:	af00      	add	r7, sp, #0
24058c32:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_CmdCpltCallback could be implemented in the user file
   */
}
24058c34:	bf00      	nop
24058c36:	370c      	adds	r7, #12
24058c38:	46bd      	mov	sp, r7
24058c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
24058c3e:	4770      	bx	lr

24058c40 <HAL_OSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_RxCpltCallback(OSPI_HandleTypeDef *hospi)
{
24058c40:	b480      	push	{r7}
24058c42:	b083      	sub	sp, #12
24058c44:	af00      	add	r7, sp, #0
24058c46:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_RxCpltCallback could be implemented in the user file
   */
}
24058c48:	bf00      	nop
24058c4a:	370c      	adds	r7, #12
24058c4c:	46bd      	mov	sp, r7
24058c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
24058c52:	4770      	bx	lr

24058c54 <HAL_OSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
 __weak void HAL_OSPI_TxCpltCallback(OSPI_HandleTypeDef *hospi)
{
24058c54:	b480      	push	{r7}
24058c56:	b083      	sub	sp, #12
24058c58:	af00      	add	r7, sp, #0
24058c5a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_TxCpltCallback could be implemented in the user file
   */
}
24058c5c:	bf00      	nop
24058c5e:	370c      	adds	r7, #12
24058c60:	46bd      	mov	sp, r7
24058c62:	f85d 7b04 	ldr.w	r7, [sp], #4
24058c66:	4770      	bx	lr

24058c68 <HAL_OSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_StatusMatchCallback(OSPI_HandleTypeDef *hospi)
{
24058c68:	b480      	push	{r7}
24058c6a:	b083      	sub	sp, #12
24058c6c:	af00      	add	r7, sp, #0
24058c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_StatusMatchCallback could be implemented in the user file
   */
}
24058c70:	bf00      	nop
24058c72:	370c      	adds	r7, #12
24058c74:	46bd      	mov	sp, r7
24058c76:	f85d 7b04 	ldr.w	r7, [sp], #4
24058c7a:	4770      	bx	lr

24058c7c <HAL_OSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TimeOutCallback(OSPI_HandleTypeDef *hospi)
{
24058c7c:	b480      	push	{r7}
24058c7e:	b083      	sub	sp, #12
24058c80:	af00      	add	r7, sp, #0
24058c82:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_TimeOutCallback could be implemented in the user file
   */
}
24058c84:	bf00      	nop
24058c86:	370c      	adds	r7, #12
24058c88:	46bd      	mov	sp, r7
24058c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
24058c8e:	4770      	bx	lr

24058c90 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
24058c90:	b480      	push	{r7}
24058c92:	b083      	sub	sp, #12
24058c94:	af00      	add	r7, sp, #0
24058c96:	6078      	str	r0, [r7, #4]
24058c98:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
24058c9a:	687b      	ldr	r3, [r7, #4]
24058c9c:	683a      	ldr	r2, [r7, #0]
24058c9e:	65da      	str	r2, [r3, #92]	; 0x5c
  return HAL_OK;
24058ca0:	2300      	movs	r3, #0
}
24058ca2:	4618      	mov	r0, r3
24058ca4:	370c      	adds	r7, #12
24058ca6:	46bd      	mov	sp, r7
24058ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
24058cac:	4770      	bx	lr
	...

24058cb0 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
24058cb0:	b580      	push	{r7, lr}
24058cb2:	b094      	sub	sp, #80	; 0x50
24058cb4:	af00      	add	r7, sp, #0
24058cb6:	60f8      	str	r0, [r7, #12]
24058cb8:	60b9      	str	r1, [r7, #8]
24058cba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
24058cbc:	2300      	movs	r3, #0
24058cbe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
24058cc2:	2300      	movs	r3, #0
24058cc4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
24058cc8:	68fb      	ldr	r3, [r7, #12]
24058cca:	681b      	ldr	r3, [r3, #0]
24058ccc:	4aa3      	ldr	r2, [pc, #652]	; (24058f5c <HAL_OSPIM_Config+0x2ac>)
24058cce:	4293      	cmp	r3, r2
24058cd0:	d105      	bne.n	24058cde <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
24058cd2:	2300      	movs	r3, #0
24058cd4:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
24058cd6:	2301      	movs	r3, #1
24058cd8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
24058cdc:	e004      	b.n	24058ce8 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
24058cde:	2301      	movs	r3, #1
24058ce0:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
24058ce2:	2300      	movs	r3, #0
24058ce4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
24058ce8:	2300      	movs	r3, #0
24058cea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
24058cee:	e01d      	b.n	24058d2c <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
24058cf0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
24058cf4:	3301      	adds	r3, #1
24058cf6:	b2d8      	uxtb	r0, r3
24058cf8:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
24058cfc:	f107 0114 	add.w	r1, r7, #20
24058d00:	4613      	mov	r3, r2
24058d02:	005b      	lsls	r3, r3, #1
24058d04:	4413      	add	r3, r2
24058d06:	00db      	lsls	r3, r3, #3
24058d08:	440b      	add	r3, r1
24058d0a:	4619      	mov	r1, r3
24058d0c:	f000 fed4 	bl	24059ab8 <OSPIM_GetConfig>
24058d10:	4603      	mov	r3, r0
24058d12:	2b00      	cmp	r3, #0
24058d14:	d005      	beq.n	24058d22 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
24058d16:	2301      	movs	r3, #1
24058d18:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
24058d1c:	68fb      	ldr	r3, [r7, #12]
24058d1e:	2208      	movs	r2, #8
24058d20:	659a      	str	r2, [r3, #88]	; 0x58
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
24058d22:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
24058d26:	3301      	adds	r3, #1
24058d28:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
24058d2c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
24058d30:	2b01      	cmp	r3, #1
24058d32:	d9dd      	bls.n	24058cf0 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
24058d34:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
24058d38:	2b00      	cmp	r3, #0
24058d3a:	f040 84c3 	bne.w	240596c4 <HAL_OSPIM_Config+0xa14>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
24058d3e:	4b87      	ldr	r3, [pc, #540]	; (24058f5c <HAL_OSPIM_Config+0x2ac>)
24058d40:	681b      	ldr	r3, [r3, #0]
24058d42:	f003 0301 	and.w	r3, r3, #1
24058d46:	2b00      	cmp	r3, #0
24058d48:	d00b      	beq.n	24058d62 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
24058d4a:	4b84      	ldr	r3, [pc, #528]	; (24058f5c <HAL_OSPIM_Config+0x2ac>)
24058d4c:	681b      	ldr	r3, [r3, #0]
24058d4e:	4a83      	ldr	r2, [pc, #524]	; (24058f5c <HAL_OSPIM_Config+0x2ac>)
24058d50:	f023 0301 	bic.w	r3, r3, #1
24058d54:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
24058d56:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
24058d5a:	f043 0301 	orr.w	r3, r3, #1
24058d5e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
24058d62:	4b7f      	ldr	r3, [pc, #508]	; (24058f60 <HAL_OSPIM_Config+0x2b0>)
24058d64:	681b      	ldr	r3, [r3, #0]
24058d66:	f003 0301 	and.w	r3, r3, #1
24058d6a:	2b00      	cmp	r3, #0
24058d6c:	d00b      	beq.n	24058d86 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
24058d6e:	4b7c      	ldr	r3, [pc, #496]	; (24058f60 <HAL_OSPIM_Config+0x2b0>)
24058d70:	681b      	ldr	r3, [r3, #0]
24058d72:	4a7b      	ldr	r2, [pc, #492]	; (24058f60 <HAL_OSPIM_Config+0x2b0>)
24058d74:	f023 0301 	bic.w	r3, r3, #1
24058d78:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
24058d7a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
24058d7e:	f043 0302 	orr.w	r3, r3, #2
24058d82:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
24058d86:	4977      	ldr	r1, [pc, #476]	; (24058f64 <HAL_OSPIM_Config+0x2b4>)
24058d88:	6cba      	ldr	r2, [r7, #72]	; 0x48
24058d8a:	4613      	mov	r3, r2
24058d8c:	005b      	lsls	r3, r3, #1
24058d8e:	4413      	add	r3, r2
24058d90:	00db      	lsls	r3, r3, #3
24058d92:	f107 0250 	add.w	r2, r7, #80	; 0x50
24058d96:	4413      	add	r3, r2
24058d98:	3b34      	subs	r3, #52	; 0x34
24058d9a:	681b      	ldr	r3, [r3, #0]
24058d9c:	3b01      	subs	r3, #1
24058d9e:	009b      	lsls	r3, r3, #2
24058da0:	440b      	add	r3, r1
24058da2:	6859      	ldr	r1, [r3, #4]
24058da4:	486f      	ldr	r0, [pc, #444]	; (24058f64 <HAL_OSPIM_Config+0x2b4>)
24058da6:	6cba      	ldr	r2, [r7, #72]	; 0x48
24058da8:	4613      	mov	r3, r2
24058daa:	005b      	lsls	r3, r3, #1
24058dac:	4413      	add	r3, r2
24058dae:	00db      	lsls	r3, r3, #3
24058db0:	f107 0250 	add.w	r2, r7, #80	; 0x50
24058db4:	4413      	add	r3, r2
24058db6:	3b34      	subs	r3, #52	; 0x34
24058db8:	681b      	ldr	r3, [r3, #0]
24058dba:	3b01      	subs	r3, #1
24058dbc:	f421 7280 	bic.w	r2, r1, #256	; 0x100
24058dc0:	009b      	lsls	r3, r3, #2
24058dc2:	4403      	add	r3, r0
24058dc4:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
24058dc6:	4b67      	ldr	r3, [pc, #412]	; (24058f64 <HAL_OSPIM_Config+0x2b4>)
24058dc8:	681b      	ldr	r3, [r3, #0]
24058dca:	f003 0301 	and.w	r3, r3, #1
24058dce:	2b00      	cmp	r3, #0
24058dd0:	f000 80ca 	beq.w	24058f68 <HAL_OSPIM_Config+0x2b8>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
24058dd4:	4b63      	ldr	r3, [pc, #396]	; (24058f64 <HAL_OSPIM_Config+0x2b4>)
24058dd6:	681b      	ldr	r3, [r3, #0]
24058dd8:	4a62      	ldr	r2, [pc, #392]	; (24058f64 <HAL_OSPIM_Config+0x2b4>)
24058dda:	f023 0301 	bic.w	r3, r3, #1
24058dde:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
24058de0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
24058de4:	2b01      	cmp	r3, #1
24058de6:	f040 8178 	bne.w	240590da <HAL_OSPIM_Config+0x42a>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKSRC);
24058dea:	495e      	ldr	r1, [pc, #376]	; (24058f64 <HAL_OSPIM_Config+0x2b4>)
24058dec:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
24058df0:	4613      	mov	r3, r2
24058df2:	005b      	lsls	r3, r3, #1
24058df4:	4413      	add	r3, r2
24058df6:	00db      	lsls	r3, r3, #3
24058df8:	f107 0250 	add.w	r2, r7, #80	; 0x50
24058dfc:	4413      	add	r3, r2
24058dfe:	3b3c      	subs	r3, #60	; 0x3c
24058e00:	681b      	ldr	r3, [r3, #0]
24058e02:	3b01      	subs	r3, #1
24058e04:	009b      	lsls	r3, r3, #2
24058e06:	440b      	add	r3, r1
24058e08:	6859      	ldr	r1, [r3, #4]
24058e0a:	4856      	ldr	r0, [pc, #344]	; (24058f64 <HAL_OSPIM_Config+0x2b4>)
24058e0c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
24058e10:	4613      	mov	r3, r2
24058e12:	005b      	lsls	r3, r3, #1
24058e14:	4413      	add	r3, r2
24058e16:	00db      	lsls	r3, r3, #3
24058e18:	f107 0250 	add.w	r2, r7, #80	; 0x50
24058e1c:	4413      	add	r3, r2
24058e1e:	3b3c      	subs	r3, #60	; 0x3c
24058e20:	681b      	ldr	r3, [r3, #0]
24058e22:	3b01      	subs	r3, #1
24058e24:	f041 0202 	orr.w	r2, r1, #2
24058e28:	009b      	lsls	r3, r3, #2
24058e2a:	4403      	add	r3, r0
24058e2c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
24058e2e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
24058e32:	4613      	mov	r3, r2
24058e34:	005b      	lsls	r3, r3, #1
24058e36:	4413      	add	r3, r2
24058e38:	00db      	lsls	r3, r3, #3
24058e3a:	f107 0250 	add.w	r2, r7, #80	; 0x50
24058e3e:	4413      	add	r3, r2
24058e40:	3b38      	subs	r3, #56	; 0x38
24058e42:	681b      	ldr	r3, [r3, #0]
24058e44:	2b00      	cmp	r3, #0
24058e46:	d021      	beq.n	24058e8c <HAL_OSPIM_Config+0x1dc>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSSRC);
24058e48:	4946      	ldr	r1, [pc, #280]	; (24058f64 <HAL_OSPIM_Config+0x2b4>)
24058e4a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
24058e4e:	4613      	mov	r3, r2
24058e50:	005b      	lsls	r3, r3, #1
24058e52:	4413      	add	r3, r2
24058e54:	00db      	lsls	r3, r3, #3
24058e56:	f107 0250 	add.w	r2, r7, #80	; 0x50
24058e5a:	4413      	add	r3, r2
24058e5c:	3b38      	subs	r3, #56	; 0x38
24058e5e:	681b      	ldr	r3, [r3, #0]
24058e60:	3b01      	subs	r3, #1
24058e62:	009b      	lsls	r3, r3, #2
24058e64:	440b      	add	r3, r1
24058e66:	6859      	ldr	r1, [r3, #4]
24058e68:	483e      	ldr	r0, [pc, #248]	; (24058f64 <HAL_OSPIM_Config+0x2b4>)
24058e6a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
24058e6e:	4613      	mov	r3, r2
24058e70:	005b      	lsls	r3, r3, #1
24058e72:	4413      	add	r3, r2
24058e74:	00db      	lsls	r3, r3, #3
24058e76:	f107 0250 	add.w	r2, r7, #80	; 0x50
24058e7a:	4413      	add	r3, r2
24058e7c:	3b38      	subs	r3, #56	; 0x38
24058e7e:	681b      	ldr	r3, [r3, #0]
24058e80:	3b01      	subs	r3, #1
24058e82:	f041 0220 	orr.w	r2, r1, #32
24058e86:	009b      	lsls	r3, r3, #2
24058e88:	4403      	add	r3, r0
24058e8a:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
24058e8c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
24058e90:	4613      	mov	r3, r2
24058e92:	005b      	lsls	r3, r3, #1
24058e94:	4413      	add	r3, r2
24058e96:	00db      	lsls	r3, r3, #3
24058e98:	f107 0250 	add.w	r2, r7, #80	; 0x50
24058e9c:	4413      	add	r3, r2
24058e9e:	3b30      	subs	r3, #48	; 0x30
24058ea0:	681b      	ldr	r3, [r3, #0]
24058ea2:	2b00      	cmp	r3, #0
24058ea4:	d025      	beq.n	24058ef2 <HAL_OSPIM_Config+0x242>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLSRC_1);
24058ea6:	492f      	ldr	r1, [pc, #188]	; (24058f64 <HAL_OSPIM_Config+0x2b4>)
24058ea8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
24058eac:	4613      	mov	r3, r2
24058eae:	005b      	lsls	r3, r3, #1
24058eb0:	4413      	add	r3, r2
24058eb2:	00db      	lsls	r3, r3, #3
24058eb4:	f107 0250 	add.w	r2, r7, #80	; 0x50
24058eb8:	4413      	add	r3, r2
24058eba:	3b30      	subs	r3, #48	; 0x30
24058ebc:	681b      	ldr	r3, [r3, #0]
24058ebe:	3b01      	subs	r3, #1
24058ec0:	f003 0301 	and.w	r3, r3, #1
24058ec4:	009b      	lsls	r3, r3, #2
24058ec6:	440b      	add	r3, r1
24058ec8:	6859      	ldr	r1, [r3, #4]
24058eca:	4826      	ldr	r0, [pc, #152]	; (24058f64 <HAL_OSPIM_Config+0x2b4>)
24058ecc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
24058ed0:	4613      	mov	r3, r2
24058ed2:	005b      	lsls	r3, r3, #1
24058ed4:	4413      	add	r3, r2
24058ed6:	00db      	lsls	r3, r3, #3
24058ed8:	f107 0250 	add.w	r2, r7, #80	; 0x50
24058edc:	4413      	add	r3, r2
24058ede:	3b30      	subs	r3, #48	; 0x30
24058ee0:	681b      	ldr	r3, [r3, #0]
24058ee2:	3b01      	subs	r3, #1
24058ee4:	f003 0301 	and.w	r3, r3, #1
24058ee8:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
24058eec:	009b      	lsls	r3, r3, #2
24058eee:	4403      	add	r3, r0
24058ef0:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
24058ef2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
24058ef6:	4613      	mov	r3, r2
24058ef8:	005b      	lsls	r3, r3, #1
24058efa:	4413      	add	r3, r2
24058efc:	00db      	lsls	r3, r3, #3
24058efe:	f107 0250 	add.w	r2, r7, #80	; 0x50
24058f02:	4413      	add	r3, r2
24058f04:	3b2c      	subs	r3, #44	; 0x2c
24058f06:	681b      	ldr	r3, [r3, #0]
24058f08:	2b00      	cmp	r3, #0
24058f0a:	f000 80e6 	beq.w	240590da <HAL_OSPIM_Config+0x42a>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHSRC_1);
24058f0e:	4915      	ldr	r1, [pc, #84]	; (24058f64 <HAL_OSPIM_Config+0x2b4>)
24058f10:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
24058f14:	4613      	mov	r3, r2
24058f16:	005b      	lsls	r3, r3, #1
24058f18:	4413      	add	r3, r2
24058f1a:	00db      	lsls	r3, r3, #3
24058f1c:	f107 0250 	add.w	r2, r7, #80	; 0x50
24058f20:	4413      	add	r3, r2
24058f22:	3b2c      	subs	r3, #44	; 0x2c
24058f24:	681b      	ldr	r3, [r3, #0]
24058f26:	3b01      	subs	r3, #1
24058f28:	f003 0301 	and.w	r3, r3, #1
24058f2c:	009b      	lsls	r3, r3, #2
24058f2e:	440b      	add	r3, r1
24058f30:	6859      	ldr	r1, [r3, #4]
24058f32:	480c      	ldr	r0, [pc, #48]	; (24058f64 <HAL_OSPIM_Config+0x2b4>)
24058f34:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
24058f38:	4613      	mov	r3, r2
24058f3a:	005b      	lsls	r3, r3, #1
24058f3c:	4413      	add	r3, r2
24058f3e:	00db      	lsls	r3, r3, #3
24058f40:	f107 0250 	add.w	r2, r7, #80	; 0x50
24058f44:	4413      	add	r3, r2
24058f46:	3b2c      	subs	r3, #44	; 0x2c
24058f48:	681b      	ldr	r3, [r3, #0]
24058f4a:	3b01      	subs	r3, #1
24058f4c:	f003 0301 	and.w	r3, r3, #1
24058f50:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
24058f54:	009b      	lsls	r3, r3, #2
24058f56:	4403      	add	r3, r0
24058f58:	605a      	str	r2, [r3, #4]
24058f5a:	e0be      	b.n	240590da <HAL_OSPIM_Config+0x42a>
24058f5c:	52005000 	.word	0x52005000
24058f60:	5200a000 	.word	0x5200a000
24058f64:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
24058f68:	6cba      	ldr	r2, [r7, #72]	; 0x48
24058f6a:	4613      	mov	r3, r2
24058f6c:	005b      	lsls	r3, r3, #1
24058f6e:	4413      	add	r3, r2
24058f70:	00db      	lsls	r3, r3, #3
24058f72:	f107 0250 	add.w	r2, r7, #80	; 0x50
24058f76:	4413      	add	r3, r2
24058f78:	3b3c      	subs	r3, #60	; 0x3c
24058f7a:	681b      	ldr	r3, [r3, #0]
24058f7c:	2b00      	cmp	r3, #0
24058f7e:	f000 80ac 	beq.w	240590da <HAL_OSPIM_Config+0x42a>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
24058f82:	499d      	ldr	r1, [pc, #628]	; (240591f8 <HAL_OSPIM_Config+0x548>)
24058f84:	6cba      	ldr	r2, [r7, #72]	; 0x48
24058f86:	4613      	mov	r3, r2
24058f88:	005b      	lsls	r3, r3, #1
24058f8a:	4413      	add	r3, r2
24058f8c:	00db      	lsls	r3, r3, #3
24058f8e:	f107 0250 	add.w	r2, r7, #80	; 0x50
24058f92:	4413      	add	r3, r2
24058f94:	3b3c      	subs	r3, #60	; 0x3c
24058f96:	681b      	ldr	r3, [r3, #0]
24058f98:	3b01      	subs	r3, #1
24058f9a:	009b      	lsls	r3, r3, #2
24058f9c:	440b      	add	r3, r1
24058f9e:	6859      	ldr	r1, [r3, #4]
24058fa0:	4895      	ldr	r0, [pc, #596]	; (240591f8 <HAL_OSPIM_Config+0x548>)
24058fa2:	6cba      	ldr	r2, [r7, #72]	; 0x48
24058fa4:	4613      	mov	r3, r2
24058fa6:	005b      	lsls	r3, r3, #1
24058fa8:	4413      	add	r3, r2
24058faa:	00db      	lsls	r3, r3, #3
24058fac:	f107 0250 	add.w	r2, r7, #80	; 0x50
24058fb0:	4413      	add	r3, r2
24058fb2:	3b3c      	subs	r3, #60	; 0x3c
24058fb4:	681b      	ldr	r3, [r3, #0]
24058fb6:	3b01      	subs	r3, #1
24058fb8:	f021 0201 	bic.w	r2, r1, #1
24058fbc:	009b      	lsls	r3, r3, #2
24058fbe:	4403      	add	r3, r0
24058fc0:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
24058fc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
24058fc4:	4613      	mov	r3, r2
24058fc6:	005b      	lsls	r3, r3, #1
24058fc8:	4413      	add	r3, r2
24058fca:	00db      	lsls	r3, r3, #3
24058fcc:	f107 0250 	add.w	r2, r7, #80	; 0x50
24058fd0:	4413      	add	r3, r2
24058fd2:	3b38      	subs	r3, #56	; 0x38
24058fd4:	681b      	ldr	r3, [r3, #0]
24058fd6:	2b00      	cmp	r3, #0
24058fd8:	d01f      	beq.n	2405901a <HAL_OSPIM_Config+0x36a>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
24058fda:	4987      	ldr	r1, [pc, #540]	; (240591f8 <HAL_OSPIM_Config+0x548>)
24058fdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
24058fde:	4613      	mov	r3, r2
24058fe0:	005b      	lsls	r3, r3, #1
24058fe2:	4413      	add	r3, r2
24058fe4:	00db      	lsls	r3, r3, #3
24058fe6:	f107 0250 	add.w	r2, r7, #80	; 0x50
24058fea:	4413      	add	r3, r2
24058fec:	3b38      	subs	r3, #56	; 0x38
24058fee:	681b      	ldr	r3, [r3, #0]
24058ff0:	3b01      	subs	r3, #1
24058ff2:	009b      	lsls	r3, r3, #2
24058ff4:	440b      	add	r3, r1
24058ff6:	6859      	ldr	r1, [r3, #4]
24058ff8:	487f      	ldr	r0, [pc, #508]	; (240591f8 <HAL_OSPIM_Config+0x548>)
24058ffa:	6cba      	ldr	r2, [r7, #72]	; 0x48
24058ffc:	4613      	mov	r3, r2
24058ffe:	005b      	lsls	r3, r3, #1
24059000:	4413      	add	r3, r2
24059002:	00db      	lsls	r3, r3, #3
24059004:	f107 0250 	add.w	r2, r7, #80	; 0x50
24059008:	4413      	add	r3, r2
2405900a:	3b38      	subs	r3, #56	; 0x38
2405900c:	681b      	ldr	r3, [r3, #0]
2405900e:	3b01      	subs	r3, #1
24059010:	f021 0210 	bic.w	r2, r1, #16
24059014:	009b      	lsls	r3, r3, #2
24059016:	4403      	add	r3, r0
24059018:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
2405901a:	6cba      	ldr	r2, [r7, #72]	; 0x48
2405901c:	4613      	mov	r3, r2
2405901e:	005b      	lsls	r3, r3, #1
24059020:	4413      	add	r3, r2
24059022:	00db      	lsls	r3, r3, #3
24059024:	f107 0250 	add.w	r2, r7, #80	; 0x50
24059028:	4413      	add	r3, r2
2405902a:	3b30      	subs	r3, #48	; 0x30
2405902c:	681b      	ldr	r3, [r3, #0]
2405902e:	2b00      	cmp	r3, #0
24059030:	d023      	beq.n	2405907a <HAL_OSPIM_Config+0x3ca>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
24059032:	4971      	ldr	r1, [pc, #452]	; (240591f8 <HAL_OSPIM_Config+0x548>)
24059034:	6cba      	ldr	r2, [r7, #72]	; 0x48
24059036:	4613      	mov	r3, r2
24059038:	005b      	lsls	r3, r3, #1
2405903a:	4413      	add	r3, r2
2405903c:	00db      	lsls	r3, r3, #3
2405903e:	f107 0250 	add.w	r2, r7, #80	; 0x50
24059042:	4413      	add	r3, r2
24059044:	3b30      	subs	r3, #48	; 0x30
24059046:	681b      	ldr	r3, [r3, #0]
24059048:	3b01      	subs	r3, #1
2405904a:	f003 0301 	and.w	r3, r3, #1
2405904e:	009b      	lsls	r3, r3, #2
24059050:	440b      	add	r3, r1
24059052:	6859      	ldr	r1, [r3, #4]
24059054:	4868      	ldr	r0, [pc, #416]	; (240591f8 <HAL_OSPIM_Config+0x548>)
24059056:	6cba      	ldr	r2, [r7, #72]	; 0x48
24059058:	4613      	mov	r3, r2
2405905a:	005b      	lsls	r3, r3, #1
2405905c:	4413      	add	r3, r2
2405905e:	00db      	lsls	r3, r3, #3
24059060:	f107 0250 	add.w	r2, r7, #80	; 0x50
24059064:	4413      	add	r3, r2
24059066:	3b30      	subs	r3, #48	; 0x30
24059068:	681b      	ldr	r3, [r3, #0]
2405906a:	3b01      	subs	r3, #1
2405906c:	f003 0301 	and.w	r3, r3, #1
24059070:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
24059074:	009b      	lsls	r3, r3, #2
24059076:	4403      	add	r3, r0
24059078:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
2405907a:	6cba      	ldr	r2, [r7, #72]	; 0x48
2405907c:	4613      	mov	r3, r2
2405907e:	005b      	lsls	r3, r3, #1
24059080:	4413      	add	r3, r2
24059082:	00db      	lsls	r3, r3, #3
24059084:	f107 0250 	add.w	r2, r7, #80	; 0x50
24059088:	4413      	add	r3, r2
2405908a:	3b2c      	subs	r3, #44	; 0x2c
2405908c:	681b      	ldr	r3, [r3, #0]
2405908e:	2b00      	cmp	r3, #0
24059090:	d023      	beq.n	240590da <HAL_OSPIM_Config+0x42a>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
24059092:	4959      	ldr	r1, [pc, #356]	; (240591f8 <HAL_OSPIM_Config+0x548>)
24059094:	6cba      	ldr	r2, [r7, #72]	; 0x48
24059096:	4613      	mov	r3, r2
24059098:	005b      	lsls	r3, r3, #1
2405909a:	4413      	add	r3, r2
2405909c:	00db      	lsls	r3, r3, #3
2405909e:	f107 0250 	add.w	r2, r7, #80	; 0x50
240590a2:	4413      	add	r3, r2
240590a4:	3b2c      	subs	r3, #44	; 0x2c
240590a6:	681b      	ldr	r3, [r3, #0]
240590a8:	3b01      	subs	r3, #1
240590aa:	f003 0301 	and.w	r3, r3, #1
240590ae:	009b      	lsls	r3, r3, #2
240590b0:	440b      	add	r3, r1
240590b2:	6859      	ldr	r1, [r3, #4]
240590b4:	4850      	ldr	r0, [pc, #320]	; (240591f8 <HAL_OSPIM_Config+0x548>)
240590b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
240590b8:	4613      	mov	r3, r2
240590ba:	005b      	lsls	r3, r3, #1
240590bc:	4413      	add	r3, r2
240590be:	00db      	lsls	r3, r3, #3
240590c0:	f107 0250 	add.w	r2, r7, #80	; 0x50
240590c4:	4413      	add	r3, r2
240590c6:	3b2c      	subs	r3, #44	; 0x2c
240590c8:	681b      	ldr	r3, [r3, #0]
240590ca:	3b01      	subs	r3, #1
240590cc:	f003 0301 	and.w	r3, r3, #1
240590d0:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
240590d4:	009b      	lsls	r3, r3, #2
240590d6:	4403      	add	r3, r0
240590d8:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
240590da:	68bb      	ldr	r3, [r7, #8]
240590dc:	6819      	ldr	r1, [r3, #0]
240590de:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
240590e2:	4613      	mov	r3, r2
240590e4:	005b      	lsls	r3, r3, #1
240590e6:	4413      	add	r3, r2
240590e8:	00db      	lsls	r3, r3, #3
240590ea:	f107 0250 	add.w	r2, r7, #80	; 0x50
240590ee:	4413      	add	r3, r2
240590f0:	3b3c      	subs	r3, #60	; 0x3c
240590f2:	681b      	ldr	r3, [r3, #0]
240590f4:	4299      	cmp	r1, r3
240590f6:	d03c      	beq.n	24059172 <HAL_OSPIM_Config+0x4c2>
240590f8:	68bb      	ldr	r3, [r7, #8]
240590fa:	6859      	ldr	r1, [r3, #4]
240590fc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
24059100:	4613      	mov	r3, r2
24059102:	005b      	lsls	r3, r3, #1
24059104:	4413      	add	r3, r2
24059106:	00db      	lsls	r3, r3, #3
24059108:	f107 0250 	add.w	r2, r7, #80	; 0x50
2405910c:	4413      	add	r3, r2
2405910e:	3b38      	subs	r3, #56	; 0x38
24059110:	681b      	ldr	r3, [r3, #0]
24059112:	4299      	cmp	r1, r3
24059114:	d02d      	beq.n	24059172 <HAL_OSPIM_Config+0x4c2>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
24059116:	68bb      	ldr	r3, [r7, #8]
24059118:	6899      	ldr	r1, [r3, #8]
2405911a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405911e:	4613      	mov	r3, r2
24059120:	005b      	lsls	r3, r3, #1
24059122:	4413      	add	r3, r2
24059124:	00db      	lsls	r3, r3, #3
24059126:	f107 0250 	add.w	r2, r7, #80	; 0x50
2405912a:	4413      	add	r3, r2
2405912c:	3b34      	subs	r3, #52	; 0x34
2405912e:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
24059130:	4299      	cmp	r1, r3
24059132:	d01e      	beq.n	24059172 <HAL_OSPIM_Config+0x4c2>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
24059134:	68bb      	ldr	r3, [r7, #8]
24059136:	68d9      	ldr	r1, [r3, #12]
24059138:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405913c:	4613      	mov	r3, r2
2405913e:	005b      	lsls	r3, r3, #1
24059140:	4413      	add	r3, r2
24059142:	00db      	lsls	r3, r3, #3
24059144:	f107 0250 	add.w	r2, r7, #80	; 0x50
24059148:	4413      	add	r3, r2
2405914a:	3b30      	subs	r3, #48	; 0x30
2405914c:	681b      	ldr	r3, [r3, #0]
2405914e:	4299      	cmp	r1, r3
24059150:	d00f      	beq.n	24059172 <HAL_OSPIM_Config+0x4c2>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
24059152:	68bb      	ldr	r3, [r7, #8]
24059154:	6919      	ldr	r1, [r3, #16]
24059156:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405915a:	4613      	mov	r3, r2
2405915c:	005b      	lsls	r3, r3, #1
2405915e:	4413      	add	r3, r2
24059160:	00db      	lsls	r3, r3, #3
24059162:	f107 0250 	add.w	r2, r7, #80	; 0x50
24059166:	4413      	add	r3, r2
24059168:	3b2c      	subs	r3, #44	; 0x2c
2405916a:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
2405916c:	4299      	cmp	r1, r3
2405916e:	f040 811e 	bne.w	240593ae <HAL_OSPIM_Config+0x6fe>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
24059172:	68bb      	ldr	r3, [r7, #8]
24059174:	6819      	ldr	r1, [r3, #0]
24059176:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405917a:	4613      	mov	r3, r2
2405917c:	005b      	lsls	r3, r3, #1
2405917e:	4413      	add	r3, r2
24059180:	00db      	lsls	r3, r3, #3
24059182:	f107 0250 	add.w	r2, r7, #80	; 0x50
24059186:	4413      	add	r3, r2
24059188:	3b3c      	subs	r3, #60	; 0x3c
2405918a:	681b      	ldr	r3, [r3, #0]
2405918c:	4299      	cmp	r1, r3
2405918e:	d135      	bne.n	240591fc <HAL_OSPIM_Config+0x54c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
24059190:	68bb      	ldr	r3, [r7, #8]
24059192:	6859      	ldr	r1, [r3, #4]
24059194:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
24059198:	4613      	mov	r3, r2
2405919a:	005b      	lsls	r3, r3, #1
2405919c:	4413      	add	r3, r2
2405919e:	00db      	lsls	r3, r3, #3
240591a0:	f107 0250 	add.w	r2, r7, #80	; 0x50
240591a4:	4413      	add	r3, r2
240591a6:	3b38      	subs	r3, #56	; 0x38
240591a8:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
240591aa:	4299      	cmp	r1, r3
240591ac:	d126      	bne.n	240591fc <HAL_OSPIM_Config+0x54c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
240591ae:	68bb      	ldr	r3, [r7, #8]
240591b0:	68d9      	ldr	r1, [r3, #12]
240591b2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
240591b6:	4613      	mov	r3, r2
240591b8:	005b      	lsls	r3, r3, #1
240591ba:	4413      	add	r3, r2
240591bc:	00db      	lsls	r3, r3, #3
240591be:	f107 0250 	add.w	r2, r7, #80	; 0x50
240591c2:	4413      	add	r3, r2
240591c4:	3b30      	subs	r3, #48	; 0x30
240591c6:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
240591c8:	4299      	cmp	r1, r3
240591ca:	d117      	bne.n	240591fc <HAL_OSPIM_Config+0x54c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
240591cc:	68bb      	ldr	r3, [r7, #8]
240591ce:	6919      	ldr	r1, [r3, #16]
240591d0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
240591d4:	4613      	mov	r3, r2
240591d6:	005b      	lsls	r3, r3, #1
240591d8:	4413      	add	r3, r2
240591da:	00db      	lsls	r3, r3, #3
240591dc:	f107 0250 	add.w	r2, r7, #80	; 0x50
240591e0:	4413      	add	r3, r2
240591e2:	3b2c      	subs	r3, #44	; 0x2c
240591e4:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
240591e6:	4299      	cmp	r1, r3
240591e8:	d108      	bne.n	240591fc <HAL_OSPIM_Config+0x54c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
240591ea:	4b03      	ldr	r3, [pc, #12]	; (240591f8 <HAL_OSPIM_Config+0x548>)
240591ec:	681b      	ldr	r3, [r3, #0]
240591ee:	4a02      	ldr	r2, [pc, #8]	; (240591f8 <HAL_OSPIM_Config+0x548>)
240591f0:	f043 0301 	orr.w	r3, r3, #1
240591f4:	6013      	str	r3, [r2, #0]
240591f6:	e0da      	b.n	240593ae <HAL_OSPIM_Config+0x6fe>
240591f8:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
240591fc:	49c2      	ldr	r1, [pc, #776]	; (24059508 <HAL_OSPIM_Config+0x858>)
240591fe:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
24059202:	4613      	mov	r3, r2
24059204:	005b      	lsls	r3, r3, #1
24059206:	4413      	add	r3, r2
24059208:	00db      	lsls	r3, r3, #3
2405920a:	f107 0250 	add.w	r2, r7, #80	; 0x50
2405920e:	4413      	add	r3, r2
24059210:	3b3c      	subs	r3, #60	; 0x3c
24059212:	681b      	ldr	r3, [r3, #0]
24059214:	3b01      	subs	r3, #1
24059216:	009b      	lsls	r3, r3, #2
24059218:	440b      	add	r3, r1
2405921a:	6859      	ldr	r1, [r3, #4]
2405921c:	48ba      	ldr	r0, [pc, #744]	; (24059508 <HAL_OSPIM_Config+0x858>)
2405921e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
24059222:	4613      	mov	r3, r2
24059224:	005b      	lsls	r3, r3, #1
24059226:	4413      	add	r3, r2
24059228:	00db      	lsls	r3, r3, #3
2405922a:	f107 0250 	add.w	r2, r7, #80	; 0x50
2405922e:	4413      	add	r3, r2
24059230:	3b3c      	subs	r3, #60	; 0x3c
24059232:	681b      	ldr	r3, [r3, #0]
24059234:	3b01      	subs	r3, #1
24059236:	f021 0201 	bic.w	r2, r1, #1
2405923a:	009b      	lsls	r3, r3, #2
2405923c:	4403      	add	r3, r0
2405923e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
24059240:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
24059244:	4613      	mov	r3, r2
24059246:	005b      	lsls	r3, r3, #1
24059248:	4413      	add	r3, r2
2405924a:	00db      	lsls	r3, r3, #3
2405924c:	f107 0250 	add.w	r2, r7, #80	; 0x50
24059250:	4413      	add	r3, r2
24059252:	3b38      	subs	r3, #56	; 0x38
24059254:	681b      	ldr	r3, [r3, #0]
24059256:	2b00      	cmp	r3, #0
24059258:	d021      	beq.n	2405929e <HAL_OSPIM_Config+0x5ee>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
2405925a:	49ab      	ldr	r1, [pc, #684]	; (24059508 <HAL_OSPIM_Config+0x858>)
2405925c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
24059260:	4613      	mov	r3, r2
24059262:	005b      	lsls	r3, r3, #1
24059264:	4413      	add	r3, r2
24059266:	00db      	lsls	r3, r3, #3
24059268:	f107 0250 	add.w	r2, r7, #80	; 0x50
2405926c:	4413      	add	r3, r2
2405926e:	3b38      	subs	r3, #56	; 0x38
24059270:	681b      	ldr	r3, [r3, #0]
24059272:	3b01      	subs	r3, #1
24059274:	009b      	lsls	r3, r3, #2
24059276:	440b      	add	r3, r1
24059278:	6859      	ldr	r1, [r3, #4]
2405927a:	48a3      	ldr	r0, [pc, #652]	; (24059508 <HAL_OSPIM_Config+0x858>)
2405927c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
24059280:	4613      	mov	r3, r2
24059282:	005b      	lsls	r3, r3, #1
24059284:	4413      	add	r3, r2
24059286:	00db      	lsls	r3, r3, #3
24059288:	f107 0250 	add.w	r2, r7, #80	; 0x50
2405928c:	4413      	add	r3, r2
2405928e:	3b38      	subs	r3, #56	; 0x38
24059290:	681b      	ldr	r3, [r3, #0]
24059292:	3b01      	subs	r3, #1
24059294:	f021 0210 	bic.w	r2, r1, #16
24059298:	009b      	lsls	r3, r3, #2
2405929a:	4403      	add	r3, r0
2405929c:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
2405929e:	499a      	ldr	r1, [pc, #616]	; (24059508 <HAL_OSPIM_Config+0x858>)
240592a0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
240592a4:	4613      	mov	r3, r2
240592a6:	005b      	lsls	r3, r3, #1
240592a8:	4413      	add	r3, r2
240592aa:	00db      	lsls	r3, r3, #3
240592ac:	f107 0250 	add.w	r2, r7, #80	; 0x50
240592b0:	4413      	add	r3, r2
240592b2:	3b34      	subs	r3, #52	; 0x34
240592b4:	681b      	ldr	r3, [r3, #0]
240592b6:	3b01      	subs	r3, #1
240592b8:	009b      	lsls	r3, r3, #2
240592ba:	440b      	add	r3, r1
240592bc:	6859      	ldr	r1, [r3, #4]
240592be:	4892      	ldr	r0, [pc, #584]	; (24059508 <HAL_OSPIM_Config+0x858>)
240592c0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
240592c4:	4613      	mov	r3, r2
240592c6:	005b      	lsls	r3, r3, #1
240592c8:	4413      	add	r3, r2
240592ca:	00db      	lsls	r3, r3, #3
240592cc:	f107 0250 	add.w	r2, r7, #80	; 0x50
240592d0:	4413      	add	r3, r2
240592d2:	3b34      	subs	r3, #52	; 0x34
240592d4:	681b      	ldr	r3, [r3, #0]
240592d6:	3b01      	subs	r3, #1
240592d8:	f421 7280 	bic.w	r2, r1, #256	; 0x100
240592dc:	009b      	lsls	r3, r3, #2
240592de:	4403      	add	r3, r0
240592e0:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
240592e2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
240592e6:	4613      	mov	r3, r2
240592e8:	005b      	lsls	r3, r3, #1
240592ea:	4413      	add	r3, r2
240592ec:	00db      	lsls	r3, r3, #3
240592ee:	f107 0250 	add.w	r2, r7, #80	; 0x50
240592f2:	4413      	add	r3, r2
240592f4:	3b30      	subs	r3, #48	; 0x30
240592f6:	681b      	ldr	r3, [r3, #0]
240592f8:	2b00      	cmp	r3, #0
240592fa:	d025      	beq.n	24059348 <HAL_OSPIM_Config+0x698>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
240592fc:	4982      	ldr	r1, [pc, #520]	; (24059508 <HAL_OSPIM_Config+0x858>)
240592fe:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
24059302:	4613      	mov	r3, r2
24059304:	005b      	lsls	r3, r3, #1
24059306:	4413      	add	r3, r2
24059308:	00db      	lsls	r3, r3, #3
2405930a:	f107 0250 	add.w	r2, r7, #80	; 0x50
2405930e:	4413      	add	r3, r2
24059310:	3b30      	subs	r3, #48	; 0x30
24059312:	681b      	ldr	r3, [r3, #0]
24059314:	3b01      	subs	r3, #1
24059316:	f003 0301 	and.w	r3, r3, #1
2405931a:	009b      	lsls	r3, r3, #2
2405931c:	440b      	add	r3, r1
2405931e:	6859      	ldr	r1, [r3, #4]
24059320:	4879      	ldr	r0, [pc, #484]	; (24059508 <HAL_OSPIM_Config+0x858>)
24059322:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
24059326:	4613      	mov	r3, r2
24059328:	005b      	lsls	r3, r3, #1
2405932a:	4413      	add	r3, r2
2405932c:	00db      	lsls	r3, r3, #3
2405932e:	f107 0250 	add.w	r2, r7, #80	; 0x50
24059332:	4413      	add	r3, r2
24059334:	3b30      	subs	r3, #48	; 0x30
24059336:	681b      	ldr	r3, [r3, #0]
24059338:	3b01      	subs	r3, #1
2405933a:	f003 0301 	and.w	r3, r3, #1
2405933e:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
24059342:	009b      	lsls	r3, r3, #2
24059344:	4403      	add	r3, r0
24059346:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
24059348:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405934c:	4613      	mov	r3, r2
2405934e:	005b      	lsls	r3, r3, #1
24059350:	4413      	add	r3, r2
24059352:	00db      	lsls	r3, r3, #3
24059354:	f107 0250 	add.w	r2, r7, #80	; 0x50
24059358:	4413      	add	r3, r2
2405935a:	3b2c      	subs	r3, #44	; 0x2c
2405935c:	681b      	ldr	r3, [r3, #0]
2405935e:	2b00      	cmp	r3, #0
24059360:	d025      	beq.n	240593ae <HAL_OSPIM_Config+0x6fe>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
24059362:	4969      	ldr	r1, [pc, #420]	; (24059508 <HAL_OSPIM_Config+0x858>)
24059364:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
24059368:	4613      	mov	r3, r2
2405936a:	005b      	lsls	r3, r3, #1
2405936c:	4413      	add	r3, r2
2405936e:	00db      	lsls	r3, r3, #3
24059370:	f107 0250 	add.w	r2, r7, #80	; 0x50
24059374:	4413      	add	r3, r2
24059376:	3b2c      	subs	r3, #44	; 0x2c
24059378:	681b      	ldr	r3, [r3, #0]
2405937a:	3b01      	subs	r3, #1
2405937c:	f003 0301 	and.w	r3, r3, #1
24059380:	009b      	lsls	r3, r3, #2
24059382:	440b      	add	r3, r1
24059384:	6859      	ldr	r1, [r3, #4]
24059386:	4860      	ldr	r0, [pc, #384]	; (24059508 <HAL_OSPIM_Config+0x858>)
24059388:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
2405938c:	4613      	mov	r3, r2
2405938e:	005b      	lsls	r3, r3, #1
24059390:	4413      	add	r3, r2
24059392:	00db      	lsls	r3, r3, #3
24059394:	f107 0250 	add.w	r2, r7, #80	; 0x50
24059398:	4413      	add	r3, r2
2405939a:	3b2c      	subs	r3, #44	; 0x2c
2405939c:	681b      	ldr	r3, [r3, #0]
2405939e:	3b01      	subs	r3, #1
240593a0:	f003 0301 	and.w	r3, r3, #1
240593a4:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
240593a8:	009b      	lsls	r3, r3, #2
240593aa:	4403      	add	r3, r0
240593ac:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
240593ae:	4a56      	ldr	r2, [pc, #344]	; (24059508 <HAL_OSPIM_Config+0x858>)
240593b0:	68bb      	ldr	r3, [r7, #8]
240593b2:	689b      	ldr	r3, [r3, #8]
240593b4:	3b01      	subs	r3, #1
240593b6:	009b      	lsls	r3, r3, #2
240593b8:	4413      	add	r3, r2
240593ba:	685b      	ldr	r3, [r3, #4]
240593bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
240593c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
240593c2:	025b      	lsls	r3, r3, #9
240593c4:	431a      	orrs	r2, r3
240593c6:	4950      	ldr	r1, [pc, #320]	; (24059508 <HAL_OSPIM_Config+0x858>)
240593c8:	68bb      	ldr	r3, [r7, #8]
240593ca:	689b      	ldr	r3, [r3, #8]
240593cc:	3b01      	subs	r3, #1
240593ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
240593d2:	009b      	lsls	r3, r3, #2
240593d4:	440b      	add	r3, r1
240593d6:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
240593d8:	68bb      	ldr	r3, [r7, #8]
240593da:	695b      	ldr	r3, [r3, #20]
240593dc:	1e5a      	subs	r2, r3, #1
240593de:	4b4a      	ldr	r3, [pc, #296]	; (24059508 <HAL_OSPIM_Config+0x858>)
240593e0:	681b      	ldr	r3, [r3, #0]
240593e2:	0c1b      	lsrs	r3, r3, #16
240593e4:	b2db      	uxtb	r3, r3
240593e6:	429a      	cmp	r2, r3
240593e8:	d90a      	bls.n	24059400 <HAL_OSPIM_Config+0x750>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
240593ea:	4b47      	ldr	r3, [pc, #284]	; (24059508 <HAL_OSPIM_Config+0x858>)
240593ec:	681b      	ldr	r3, [r3, #0]
240593ee:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
240593f2:	68bb      	ldr	r3, [r7, #8]
240593f4:	695b      	ldr	r3, [r3, #20]
240593f6:	3b01      	subs	r3, #1
240593f8:	041b      	lsls	r3, r3, #16
240593fa:	4943      	ldr	r1, [pc, #268]	; (24059508 <HAL_OSPIM_Config+0x858>)
240593fc:	4313      	orrs	r3, r2
240593fe:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
24059400:	4b41      	ldr	r3, [pc, #260]	; (24059508 <HAL_OSPIM_Config+0x858>)
24059402:	681b      	ldr	r3, [r3, #0]
24059404:	f003 0301 	and.w	r3, r3, #1
24059408:	2b00      	cmp	r3, #0
2405940a:	f000 809b 	beq.w	24059544 <HAL_OSPIM_Config+0x894>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
2405940e:	4a3e      	ldr	r2, [pc, #248]	; (24059508 <HAL_OSPIM_Config+0x858>)
24059410:	68bb      	ldr	r3, [r7, #8]
24059412:	681b      	ldr	r3, [r3, #0]
24059414:	3b01      	subs	r3, #1
24059416:	009b      	lsls	r3, r3, #2
24059418:	4413      	add	r3, r2
2405941a:	685b      	ldr	r3, [r3, #4]
2405941c:	f023 0203 	bic.w	r2, r3, #3
24059420:	4939      	ldr	r1, [pc, #228]	; (24059508 <HAL_OSPIM_Config+0x858>)
24059422:	68bb      	ldr	r3, [r7, #8]
24059424:	681b      	ldr	r3, [r3, #0]
24059426:	3b01      	subs	r3, #1
24059428:	f042 0201 	orr.w	r2, r2, #1
2405942c:	009b      	lsls	r3, r3, #2
2405942e:	440b      	add	r3, r1
24059430:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
24059432:	68bb      	ldr	r3, [r7, #8]
24059434:	685b      	ldr	r3, [r3, #4]
24059436:	2b00      	cmp	r3, #0
24059438:	d011      	beq.n	2405945e <HAL_OSPIM_Config+0x7ae>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
2405943a:	4a33      	ldr	r2, [pc, #204]	; (24059508 <HAL_OSPIM_Config+0x858>)
2405943c:	68bb      	ldr	r3, [r7, #8]
2405943e:	685b      	ldr	r3, [r3, #4]
24059440:	3b01      	subs	r3, #1
24059442:	009b      	lsls	r3, r3, #2
24059444:	4413      	add	r3, r2
24059446:	685b      	ldr	r3, [r3, #4]
24059448:	f023 0230 	bic.w	r2, r3, #48	; 0x30
2405944c:	492e      	ldr	r1, [pc, #184]	; (24059508 <HAL_OSPIM_Config+0x858>)
2405944e:	68bb      	ldr	r3, [r7, #8]
24059450:	685b      	ldr	r3, [r3, #4]
24059452:	3b01      	subs	r3, #1
24059454:	f042 0210 	orr.w	r2, r2, #16
24059458:	009b      	lsls	r3, r3, #2
2405945a:	440b      	add	r3, r1
2405945c:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
2405945e:	68bb      	ldr	r3, [r7, #8]
24059460:	68db      	ldr	r3, [r3, #12]
24059462:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24059466:	2b00      	cmp	r3, #0
24059468:	d016      	beq.n	24059498 <HAL_OSPIM_Config+0x7e8>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
2405946a:	4a27      	ldr	r2, [pc, #156]	; (24059508 <HAL_OSPIM_Config+0x858>)
2405946c:	68bb      	ldr	r3, [r7, #8]
2405946e:	68db      	ldr	r3, [r3, #12]
24059470:	3b01      	subs	r3, #1
24059472:	f003 0301 	and.w	r3, r3, #1
24059476:	009b      	lsls	r3, r3, #2
24059478:	4413      	add	r3, r2
2405947a:	685b      	ldr	r3, [r3, #4]
2405947c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
24059480:	4921      	ldr	r1, [pc, #132]	; (24059508 <HAL_OSPIM_Config+0x858>)
24059482:	68bb      	ldr	r3, [r7, #8]
24059484:	68db      	ldr	r3, [r3, #12]
24059486:	3b01      	subs	r3, #1
24059488:	f003 0301 	and.w	r3, r3, #1
2405948c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
24059490:	009b      	lsls	r3, r3, #2
24059492:	440b      	add	r3, r1
24059494:	605a      	str	r2, [r3, #4]
24059496:	e019      	b.n	240594cc <HAL_OSPIM_Config+0x81c>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
24059498:	68bb      	ldr	r3, [r7, #8]
2405949a:	68db      	ldr	r3, [r3, #12]
2405949c:	2b00      	cmp	r3, #0
2405949e:	d015      	beq.n	240594cc <HAL_OSPIM_Config+0x81c>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
240594a0:	4a19      	ldr	r2, [pc, #100]	; (24059508 <HAL_OSPIM_Config+0x858>)
240594a2:	68bb      	ldr	r3, [r7, #8]
240594a4:	68db      	ldr	r3, [r3, #12]
240594a6:	3b01      	subs	r3, #1
240594a8:	f003 0301 	and.w	r3, r3, #1
240594ac:	009b      	lsls	r3, r3, #2
240594ae:	4413      	add	r3, r2
240594b0:	685b      	ldr	r3, [r3, #4]
240594b2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
240594b6:	4914      	ldr	r1, [pc, #80]	; (24059508 <HAL_OSPIM_Config+0x858>)
240594b8:	68bb      	ldr	r3, [r7, #8]
240594ba:	68db      	ldr	r3, [r3, #12]
240594bc:	3b01      	subs	r3, #1
240594be:	f003 0301 	and.w	r3, r3, #1
240594c2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
240594c6:	009b      	lsls	r3, r3, #2
240594c8:	440b      	add	r3, r1
240594ca:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
240594cc:	68bb      	ldr	r3, [r7, #8]
240594ce:	691b      	ldr	r3, [r3, #16]
240594d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
240594d4:	2b00      	cmp	r3, #0
240594d6:	d019      	beq.n	2405950c <HAL_OSPIM_Config+0x85c>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
240594d8:	4a0b      	ldr	r2, [pc, #44]	; (24059508 <HAL_OSPIM_Config+0x858>)
240594da:	68bb      	ldr	r3, [r7, #8]
240594dc:	691b      	ldr	r3, [r3, #16]
240594de:	3b01      	subs	r3, #1
240594e0:	f003 0301 	and.w	r3, r3, #1
240594e4:	009b      	lsls	r3, r3, #2
240594e6:	4413      	add	r3, r2
240594e8:	685b      	ldr	r3, [r3, #4]
240594ea:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
240594ee:	4906      	ldr	r1, [pc, #24]	; (24059508 <HAL_OSPIM_Config+0x858>)
240594f0:	68bb      	ldr	r3, [r7, #8]
240594f2:	691b      	ldr	r3, [r3, #16]
240594f4:	3b01      	subs	r3, #1
240594f6:	f003 0301 	and.w	r3, r3, #1
240594fa:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
240594fe:	009b      	lsls	r3, r3, #2
24059500:	440b      	add	r3, r1
24059502:	605a      	str	r2, [r3, #4]
24059504:	e0c6      	b.n	24059694 <HAL_OSPIM_Config+0x9e4>
24059506:	bf00      	nop
24059508:	5200b400 	.word	0x5200b400
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
2405950c:	68bb      	ldr	r3, [r7, #8]
2405950e:	691b      	ldr	r3, [r3, #16]
24059510:	2b00      	cmp	r3, #0
24059512:	f000 80bf 	beq.w	24059694 <HAL_OSPIM_Config+0x9e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
24059516:	4a6e      	ldr	r2, [pc, #440]	; (240596d0 <HAL_OSPIM_Config+0xa20>)
24059518:	68bb      	ldr	r3, [r7, #8]
2405951a:	691b      	ldr	r3, [r3, #16]
2405951c:	3b01      	subs	r3, #1
2405951e:	f003 0301 	and.w	r3, r3, #1
24059522:	009b      	lsls	r3, r3, #2
24059524:	4413      	add	r3, r2
24059526:	685b      	ldr	r3, [r3, #4]
24059528:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
2405952c:	4968      	ldr	r1, [pc, #416]	; (240596d0 <HAL_OSPIM_Config+0xa20>)
2405952e:	68bb      	ldr	r3, [r7, #8]
24059530:	691b      	ldr	r3, [r3, #16]
24059532:	3b01      	subs	r3, #1
24059534:	f003 0301 	and.w	r3, r3, #1
24059538:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
2405953c:	009b      	lsls	r3, r3, #2
2405953e:	440b      	add	r3, r1
24059540:	605a      	str	r2, [r3, #4]
24059542:	e0a7      	b.n	24059694 <HAL_OSPIM_Config+0x9e4>
         /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
24059544:	4a62      	ldr	r2, [pc, #392]	; (240596d0 <HAL_OSPIM_Config+0xa20>)
24059546:	68bb      	ldr	r3, [r7, #8]
24059548:	681b      	ldr	r3, [r3, #0]
2405954a:	3b01      	subs	r3, #1
2405954c:	009b      	lsls	r3, r3, #2
2405954e:	4413      	add	r3, r2
24059550:	685b      	ldr	r3, [r3, #4]
24059552:	f023 0203 	bic.w	r2, r3, #3
24059556:	6cbb      	ldr	r3, [r7, #72]	; 0x48
24059558:	005b      	lsls	r3, r3, #1
2405955a:	431a      	orrs	r2, r3
2405955c:	495c      	ldr	r1, [pc, #368]	; (240596d0 <HAL_OSPIM_Config+0xa20>)
2405955e:	68bb      	ldr	r3, [r7, #8]
24059560:	681b      	ldr	r3, [r3, #0]
24059562:	3b01      	subs	r3, #1
24059564:	f042 0201 	orr.w	r2, r2, #1
24059568:	009b      	lsls	r3, r3, #2
2405956a:	440b      	add	r3, r1
2405956c:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
2405956e:	68bb      	ldr	r3, [r7, #8]
24059570:	685b      	ldr	r3, [r3, #4]
24059572:	2b00      	cmp	r3, #0
24059574:	d014      	beq.n	240595a0 <HAL_OSPIM_Config+0x8f0>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
24059576:	4a56      	ldr	r2, [pc, #344]	; (240596d0 <HAL_OSPIM_Config+0xa20>)
24059578:	68bb      	ldr	r3, [r7, #8]
2405957a:	685b      	ldr	r3, [r3, #4]
2405957c:	3b01      	subs	r3, #1
2405957e:	009b      	lsls	r3, r3, #2
24059580:	4413      	add	r3, r2
24059582:	685b      	ldr	r3, [r3, #4]
24059584:	f023 0230 	bic.w	r2, r3, #48	; 0x30
24059588:	6cbb      	ldr	r3, [r7, #72]	; 0x48
2405958a:	015b      	lsls	r3, r3, #5
2405958c:	431a      	orrs	r2, r3
2405958e:	4950      	ldr	r1, [pc, #320]	; (240596d0 <HAL_OSPIM_Config+0xa20>)
24059590:	68bb      	ldr	r3, [r7, #8]
24059592:	685b      	ldr	r3, [r3, #4]
24059594:	3b01      	subs	r3, #1
24059596:	f042 0210 	orr.w	r2, r2, #16
2405959a:	009b      	lsls	r3, r3, #2
2405959c:	440b      	add	r3, r1
2405959e:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
240595a0:	68bb      	ldr	r3, [r7, #8]
240595a2:	68db      	ldr	r3, [r3, #12]
240595a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
240595a8:	2b00      	cmp	r3, #0
240595aa:	d019      	beq.n	240595e0 <HAL_OSPIM_Config+0x930>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
240595ac:	4a48      	ldr	r2, [pc, #288]	; (240596d0 <HAL_OSPIM_Config+0xa20>)
240595ae:	68bb      	ldr	r3, [r7, #8]
240595b0:	68db      	ldr	r3, [r3, #12]
240595b2:	3b01      	subs	r3, #1
240595b4:	f003 0301 	and.w	r3, r3, #1
240595b8:	009b      	lsls	r3, r3, #2
240595ba:	4413      	add	r3, r2
240595bc:	685b      	ldr	r3, [r3, #4]
240595be:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
240595c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
240595c4:	049b      	lsls	r3, r3, #18
240595c6:	431a      	orrs	r2, r3
240595c8:	4941      	ldr	r1, [pc, #260]	; (240596d0 <HAL_OSPIM_Config+0xa20>)
240595ca:	68bb      	ldr	r3, [r7, #8]
240595cc:	68db      	ldr	r3, [r3, #12]
240595ce:	3b01      	subs	r3, #1
240595d0:	f003 0301 	and.w	r3, r3, #1
240595d4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
240595d8:	009b      	lsls	r3, r3, #2
240595da:	440b      	add	r3, r1
240595dc:	605a      	str	r2, [r3, #4]
240595de:	e01c      	b.n	2405961a <HAL_OSPIM_Config+0x96a>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
240595e0:	68bb      	ldr	r3, [r7, #8]
240595e2:	68db      	ldr	r3, [r3, #12]
240595e4:	2b00      	cmp	r3, #0
240595e6:	d018      	beq.n	2405961a <HAL_OSPIM_Config+0x96a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
240595e8:	4a39      	ldr	r2, [pc, #228]	; (240596d0 <HAL_OSPIM_Config+0xa20>)
240595ea:	68bb      	ldr	r3, [r7, #8]
240595ec:	68db      	ldr	r3, [r3, #12]
240595ee:	3b01      	subs	r3, #1
240595f0:	f003 0301 	and.w	r3, r3, #1
240595f4:	009b      	lsls	r3, r3, #2
240595f6:	4413      	add	r3, r2
240595f8:	685b      	ldr	r3, [r3, #4]
240595fa:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
240595fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
24059600:	069b      	lsls	r3, r3, #26
24059602:	431a      	orrs	r2, r3
24059604:	4932      	ldr	r1, [pc, #200]	; (240596d0 <HAL_OSPIM_Config+0xa20>)
24059606:	68bb      	ldr	r3, [r7, #8]
24059608:	68db      	ldr	r3, [r3, #12]
2405960a:	3b01      	subs	r3, #1
2405960c:	f003 0301 	and.w	r3, r3, #1
24059610:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
24059614:	009b      	lsls	r3, r3, #2
24059616:	440b      	add	r3, r1
24059618:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
2405961a:	68bb      	ldr	r3, [r7, #8]
2405961c:	691b      	ldr	r3, [r3, #16]
2405961e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24059622:	2b00      	cmp	r3, #0
24059624:	d019      	beq.n	2405965a <HAL_OSPIM_Config+0x9aa>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
24059626:	4a2a      	ldr	r2, [pc, #168]	; (240596d0 <HAL_OSPIM_Config+0xa20>)
24059628:	68bb      	ldr	r3, [r7, #8]
2405962a:	691b      	ldr	r3, [r3, #16]
2405962c:	3b01      	subs	r3, #1
2405962e:	f003 0301 	and.w	r3, r3, #1
24059632:	009b      	lsls	r3, r3, #2
24059634:	4413      	add	r3, r2
24059636:	685b      	ldr	r3, [r3, #4]
24059638:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
2405963c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
2405963e:	049b      	lsls	r3, r3, #18
24059640:	431a      	orrs	r2, r3
24059642:	4923      	ldr	r1, [pc, #140]	; (240596d0 <HAL_OSPIM_Config+0xa20>)
24059644:	68bb      	ldr	r3, [r7, #8]
24059646:	691b      	ldr	r3, [r3, #16]
24059648:	3b01      	subs	r3, #1
2405964a:	f003 0301 	and.w	r3, r3, #1
2405964e:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
24059652:	009b      	lsls	r3, r3, #2
24059654:	440b      	add	r3, r1
24059656:	605a      	str	r2, [r3, #4]
24059658:	e01c      	b.n	24059694 <HAL_OSPIM_Config+0x9e4>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
2405965a:	68bb      	ldr	r3, [r7, #8]
2405965c:	691b      	ldr	r3, [r3, #16]
2405965e:	2b00      	cmp	r3, #0
24059660:	d018      	beq.n	24059694 <HAL_OSPIM_Config+0x9e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
24059662:	4a1b      	ldr	r2, [pc, #108]	; (240596d0 <HAL_OSPIM_Config+0xa20>)
24059664:	68bb      	ldr	r3, [r7, #8]
24059666:	691b      	ldr	r3, [r3, #16]
24059668:	3b01      	subs	r3, #1
2405966a:	f003 0301 	and.w	r3, r3, #1
2405966e:	009b      	lsls	r3, r3, #2
24059670:	4413      	add	r3, r2
24059672:	685b      	ldr	r3, [r3, #4]
24059674:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
24059678:	6cbb      	ldr	r3, [r7, #72]	; 0x48
2405967a:	069b      	lsls	r3, r3, #26
2405967c:	431a      	orrs	r2, r3
2405967e:	4914      	ldr	r1, [pc, #80]	; (240596d0 <HAL_OSPIM_Config+0xa20>)
24059680:	68bb      	ldr	r3, [r7, #8]
24059682:	691b      	ldr	r3, [r3, #16]
24059684:	3b01      	subs	r3, #1
24059686:	f003 0301 	and.w	r3, r3, #1
2405968a:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
2405968e:	009b      	lsls	r3, r3, #2
24059690:	440b      	add	r3, r1
24059692:	605a      	str	r2, [r3, #4]
         /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
24059694:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
24059698:	f003 0301 	and.w	r3, r3, #1
2405969c:	2b00      	cmp	r3, #0
2405969e:	d005      	beq.n	240596ac <HAL_OSPIM_Config+0x9fc>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
240596a0:	4b0c      	ldr	r3, [pc, #48]	; (240596d4 <HAL_OSPIM_Config+0xa24>)
240596a2:	681b      	ldr	r3, [r3, #0]
240596a4:	4a0b      	ldr	r2, [pc, #44]	; (240596d4 <HAL_OSPIM_Config+0xa24>)
240596a6:	f043 0301 	orr.w	r3, r3, #1
240596aa:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
240596ac:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
240596b0:	f003 0302 	and.w	r3, r3, #2
240596b4:	2b00      	cmp	r3, #0
240596b6:	d005      	beq.n	240596c4 <HAL_OSPIM_Config+0xa14>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
240596b8:	4b07      	ldr	r3, [pc, #28]	; (240596d8 <HAL_OSPIM_Config+0xa28>)
240596ba:	681b      	ldr	r3, [r3, #0]
240596bc:	4a06      	ldr	r2, [pc, #24]	; (240596d8 <HAL_OSPIM_Config+0xa28>)
240596be:	f043 0301 	orr.w	r3, r3, #1
240596c2:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
240596c4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
240596c8:	4618      	mov	r0, r3
240596ca:	3750      	adds	r7, #80	; 0x50
240596cc:	46bd      	mov	sp, r7
240596ce:	bd80      	pop	{r7, pc}
240596d0:	5200b400 	.word	0x5200b400
240596d4:	52005000 	.word	0x52005000
240596d8:	5200a000 	.word	0x5200a000

240596dc <OSPI_DMAAbortCplt>:
  * @brief  DMA OSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void OSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
240596dc:	b580      	push	{r7, lr}
240596de:	b084      	sub	sp, #16
240596e0:	af00      	add	r7, sp, #0
240596e2:	6078      	str	r0, [r7, #4]
  OSPI_HandleTypeDef* hospi = ( OSPI_HandleTypeDef* )(hmdma->Parent);
240596e4:	687b      	ldr	r3, [r7, #4]
240596e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240596e8:	60fb      	str	r3, [r7, #12]
  hospi->XferCount = 0;
240596ea:	68fb      	ldr	r3, [r7, #12]
240596ec:	2200      	movs	r2, #0
240596ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_ABORT)
240596f0:	68fb      	ldr	r3, [r7, #12]
240596f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240596f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
240596f8:	d122      	bne.n	24059740 <OSPI_DMAAbortCplt+0x64>
  {
    /* DMA abort called by OctoSPI abort */
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
240596fa:	68fb      	ldr	r3, [r7, #12]
240596fc:	681b      	ldr	r3, [r3, #0]
240596fe:	6a1b      	ldr	r3, [r3, #32]
24059700:	f003 0320 	and.w	r3, r3, #32
24059704:	2b00      	cmp	r3, #0
24059706:	d014      	beq.n	24059732 <OSPI_DMAAbortCplt+0x56>
    {
      /* Clear transfer complete flag */
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
24059708:	68fb      	ldr	r3, [r7, #12]
2405970a:	681b      	ldr	r3, [r3, #0]
2405970c:	2202      	movs	r2, #2
2405970e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enable the transfer complete interrupts */
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
24059710:	68fb      	ldr	r3, [r7, #12]
24059712:	681b      	ldr	r3, [r3, #0]
24059714:	681a      	ldr	r2, [r3, #0]
24059716:	68fb      	ldr	r3, [r7, #12]
24059718:	681b      	ldr	r3, [r3, #0]
2405971a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
2405971e:	601a      	str	r2, [r3, #0]

      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
24059720:	68fb      	ldr	r3, [r7, #12]
24059722:	681b      	ldr	r3, [r3, #0]
24059724:	681a      	ldr	r2, [r3, #0]
24059726:	68fb      	ldr	r3, [r7, #12]
24059728:	681b      	ldr	r3, [r3, #0]
2405972a:	f042 0202 	orr.w	r2, r2, #2
2405972e:	601a      	str	r2, [r3, #0]
    hospi->ErrorCallback(hospi);
#else
    HAL_OSPI_ErrorCallback(hospi);
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
}
24059730:	e00c      	b.n	2405974c <OSPI_DMAAbortCplt+0x70>
      hospi->State = HAL_OSPI_STATE_READY;
24059732:	68fb      	ldr	r3, [r7, #12]
24059734:	2202      	movs	r2, #2
24059736:	655a      	str	r2, [r3, #84]	; 0x54
      HAL_OSPI_AbortCpltCallback(hospi);
24059738:	68f8      	ldr	r0, [r7, #12]
2405973a:	f7ff fa63 	bl	24058c04 <HAL_OSPI_AbortCpltCallback>
}
2405973e:	e005      	b.n	2405974c <OSPI_DMAAbortCplt+0x70>
    hospi->State = HAL_OSPI_STATE_READY;
24059740:	68fb      	ldr	r3, [r7, #12]
24059742:	2202      	movs	r2, #2
24059744:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_OSPI_ErrorCallback(hospi);
24059746:	68f8      	ldr	r0, [r7, #12]
24059748:	f7ff fa52 	bl	24058bf0 <HAL_OSPI_ErrorCallback>
}
2405974c:	bf00      	nop
2405974e:	3710      	adds	r7, #16
24059750:	46bd      	mov	sp, r7
24059752:	bd80      	pop	{r7, pc}

24059754 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
24059754:	b580      	push	{r7, lr}
24059756:	b084      	sub	sp, #16
24059758:	af00      	add	r7, sp, #0
2405975a:	60f8      	str	r0, [r7, #12]
2405975c:	60b9      	str	r1, [r7, #8]
2405975e:	603b      	str	r3, [r7, #0]
24059760:	4613      	mov	r3, r2
24059762:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
24059764:	e01a      	b.n	2405979c <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
24059766:	69bb      	ldr	r3, [r7, #24]
24059768:	f1b3 3fff 	cmp.w	r3, #4294967295
2405976c:	d016      	beq.n	2405979c <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2405976e:	f7f9 fad9 	bl	24052d24 <HAL_GetTick>
24059772:	4602      	mov	r2, r0
24059774:	683b      	ldr	r3, [r7, #0]
24059776:	1ad3      	subs	r3, r2, r3
24059778:	69ba      	ldr	r2, [r7, #24]
2405977a:	429a      	cmp	r2, r3
2405977c:	d302      	bcc.n	24059784 <OSPI_WaitFlagStateUntilTimeout+0x30>
2405977e:	69bb      	ldr	r3, [r7, #24]
24059780:	2b00      	cmp	r3, #0
24059782:	d10b      	bne.n	2405979c <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
24059784:	68fb      	ldr	r3, [r7, #12]
24059786:	f44f 7200 	mov.w	r2, #512	; 0x200
2405978a:	655a      	str	r2, [r3, #84]	; 0x54
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
2405978c:	68fb      	ldr	r3, [r7, #12]
2405978e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24059790:	f043 0201 	orr.w	r2, r3, #1
24059794:	68fb      	ldr	r3, [r7, #12]
24059796:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
24059798:	2301      	movs	r3, #1
2405979a:	e00e      	b.n	240597ba <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
2405979c:	68fb      	ldr	r3, [r7, #12]
2405979e:	681b      	ldr	r3, [r3, #0]
240597a0:	6a1a      	ldr	r2, [r3, #32]
240597a2:	68bb      	ldr	r3, [r7, #8]
240597a4:	4013      	ands	r3, r2
240597a6:	2b00      	cmp	r3, #0
240597a8:	bf14      	ite	ne
240597aa:	2301      	movne	r3, #1
240597ac:	2300      	moveq	r3, #0
240597ae:	b2db      	uxtb	r3, r3
240597b0:	461a      	mov	r2, r3
240597b2:	79fb      	ldrb	r3, [r7, #7]
240597b4:	429a      	cmp	r2, r3
240597b6:	d1d6      	bne.n	24059766 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
240597b8:	2300      	movs	r3, #0
}
240597ba:	4618      	mov	r0, r3
240597bc:	3710      	adds	r7, #16
240597be:	46bd      	mov	sp, r7
240597c0:	bd80      	pop	{r7, pc}
	...

240597c4 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
240597c4:	b480      	push	{r7}
240597c6:	b089      	sub	sp, #36	; 0x24
240597c8:	af00      	add	r7, sp, #0
240597ca:	6078      	str	r0, [r7, #4]
240597cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
240597ce:	2300      	movs	r3, #0
240597d0:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
240597d2:	687b      	ldr	r3, [r7, #4]
240597d4:	681b      	ldr	r3, [r3, #0]
240597d6:	681a      	ldr	r2, [r3, #0]
240597d8:	687b      	ldr	r3, [r7, #4]
240597da:	681b      	ldr	r3, [r3, #0]
240597dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
240597e0:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
240597e2:	687b      	ldr	r3, [r7, #4]
240597e4:	689b      	ldr	r3, [r3, #8]
240597e6:	2b00      	cmp	r3, #0
240597e8:	d10a      	bne.n	24059800 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
240597ea:	687b      	ldr	r3, [r7, #4]
240597ec:	681b      	ldr	r3, [r3, #0]
240597ee:	681b      	ldr	r3, [r3, #0]
240597f0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
240597f4:	683b      	ldr	r3, [r7, #0]
240597f6:	685a      	ldr	r2, [r3, #4]
240597f8:	687b      	ldr	r3, [r7, #4]
240597fa:	681b      	ldr	r3, [r3, #0]
240597fc:	430a      	orrs	r2, r1
240597fe:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
24059800:	683b      	ldr	r3, [r7, #0]
24059802:	681b      	ldr	r3, [r3, #0]
24059804:	2b02      	cmp	r3, #2
24059806:	d114      	bne.n	24059832 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
24059808:	687b      	ldr	r3, [r7, #4]
2405980a:	681b      	ldr	r3, [r3, #0]
2405980c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
24059810:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
24059812:	687b      	ldr	r3, [r7, #4]
24059814:	681b      	ldr	r3, [r3, #0]
24059816:	f503 73c4 	add.w	r3, r3, #392	; 0x188
2405981a:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
2405981c:	687b      	ldr	r3, [r7, #4]
2405981e:	681b      	ldr	r3, [r3, #0]
24059820:	f503 73c8 	add.w	r3, r3, #400	; 0x190
24059824:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
24059826:	687b      	ldr	r3, [r7, #4]
24059828:	681b      	ldr	r3, [r3, #0]
2405982a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
2405982e:	60fb      	str	r3, [r7, #12]
24059830:	e02c      	b.n	2405988c <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
24059832:	683b      	ldr	r3, [r7, #0]
24059834:	681b      	ldr	r3, [r3, #0]
24059836:	2b03      	cmp	r3, #3
24059838:	d114      	bne.n	24059864 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
2405983a:	687b      	ldr	r3, [r7, #4]
2405983c:	681b      	ldr	r3, [r3, #0]
2405983e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
24059842:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
24059844:	687b      	ldr	r3, [r7, #4]
24059846:	681b      	ldr	r3, [r3, #0]
24059848:	f503 73a4 	add.w	r3, r3, #328	; 0x148
2405984c:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
2405984e:	687b      	ldr	r3, [r7, #4]
24059850:	681b      	ldr	r3, [r3, #0]
24059852:	f503 73a8 	add.w	r3, r3, #336	; 0x150
24059856:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
24059858:	687b      	ldr	r3, [r7, #4]
2405985a:	681b      	ldr	r3, [r3, #0]
2405985c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
24059860:	60fb      	str	r3, [r7, #12]
24059862:	e013      	b.n	2405988c <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
24059864:	687b      	ldr	r3, [r7, #4]
24059866:	681b      	ldr	r3, [r3, #0]
24059868:	f503 7380 	add.w	r3, r3, #256	; 0x100
2405986c:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
2405986e:	687b      	ldr	r3, [r7, #4]
24059870:	681b      	ldr	r3, [r3, #0]
24059872:	f503 7384 	add.w	r3, r3, #264	; 0x108
24059876:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
24059878:	687b      	ldr	r3, [r7, #4]
2405987a:	681b      	ldr	r3, [r3, #0]
2405987c:	f503 7388 	add.w	r3, r3, #272	; 0x110
24059880:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
24059882:	687b      	ldr	r3, [r7, #4]
24059884:	681b      	ldr	r3, [r3, #0]
24059886:	f503 7390 	add.w	r3, r3, #288	; 0x120
2405988a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
2405988c:	683b      	ldr	r3, [r7, #0]
2405988e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
24059890:	683b      	ldr	r3, [r7, #0]
24059892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24059894:	431a      	orrs	r2, r3
24059896:	69bb      	ldr	r3, [r7, #24]
24059898:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
2405989a:	683b      	ldr	r3, [r7, #0]
2405989c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405989e:	2b00      	cmp	r3, #0
240598a0:	d012      	beq.n	240598c8 <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
240598a2:	683b      	ldr	r3, [r7, #0]
240598a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
240598a6:	68fb      	ldr	r3, [r7, #12]
240598a8:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
240598aa:	69bb      	ldr	r3, [r7, #24]
240598ac:	681b      	ldr	r3, [r3, #0]
240598ae:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
240598b2:	683b      	ldr	r3, [r7, #0]
240598b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
240598b6:	683b      	ldr	r3, [r7, #0]
240598b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
240598ba:	4319      	orrs	r1, r3
240598bc:	683b      	ldr	r3, [r7, #0]
240598be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240598c0:	430b      	orrs	r3, r1
240598c2:	431a      	orrs	r2, r3
240598c4:	69bb      	ldr	r3, [r7, #24]
240598c6:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
240598c8:	697b      	ldr	r3, [r7, #20]
240598ca:	681b      	ldr	r3, [r3, #0]
240598cc:	f023 021f 	bic.w	r2, r3, #31
240598d0:	683b      	ldr	r3, [r7, #0]
240598d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
240598d4:	431a      	orrs	r2, r3
240598d6:	697b      	ldr	r3, [r7, #20]
240598d8:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
240598da:	683b      	ldr	r3, [r7, #0]
240598dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240598de:	2b00      	cmp	r3, #0
240598e0:	d009      	beq.n	240598f6 <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
240598e2:	683b      	ldr	r3, [r7, #0]
240598e4:	681b      	ldr	r3, [r3, #0]
240598e6:	2b00      	cmp	r3, #0
240598e8:	d105      	bne.n	240598f6 <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
240598ea:	683b      	ldr	r3, [r7, #0]
240598ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
240598ee:	687b      	ldr	r3, [r7, #4]
240598f0:	681b      	ldr	r3, [r3, #0]
240598f2:	3a01      	subs	r2, #1
240598f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
240598f6:	683b      	ldr	r3, [r7, #0]
240598f8:	68db      	ldr	r3, [r3, #12]
240598fa:	2b00      	cmp	r3, #0
240598fc:	f000 8095 	beq.w	24059a2a <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
24059900:	683b      	ldr	r3, [r7, #0]
24059902:	69db      	ldr	r3, [r3, #28]
24059904:	2b00      	cmp	r3, #0
24059906:	d053      	beq.n	240599b0 <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
24059908:	683b      	ldr	r3, [r7, #0]
2405990a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405990c:	2b00      	cmp	r3, #0
2405990e:	d01e      	beq.n	2405994e <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
24059910:	69bb      	ldr	r3, [r7, #24]
24059912:	681a      	ldr	r2, [r3, #0]
24059914:	4b64      	ldr	r3, [pc, #400]	; (24059aa8 <OSPI_ConfigCmd+0x2e4>)
24059916:	4013      	ands	r3, r2
24059918:	683a      	ldr	r2, [r7, #0]
2405991a:	68d1      	ldr	r1, [r2, #12]
2405991c:	683a      	ldr	r2, [r7, #0]
2405991e:	6952      	ldr	r2, [r2, #20]
24059920:	4311      	orrs	r1, r2
24059922:	683a      	ldr	r2, [r7, #0]
24059924:	6912      	ldr	r2, [r2, #16]
24059926:	4311      	orrs	r1, r2
24059928:	683a      	ldr	r2, [r7, #0]
2405992a:	69d2      	ldr	r2, [r2, #28]
2405992c:	4311      	orrs	r1, r2
2405992e:	683a      	ldr	r2, [r7, #0]
24059930:	6a52      	ldr	r2, [r2, #36]	; 0x24
24059932:	4311      	orrs	r1, r2
24059934:	683a      	ldr	r2, [r7, #0]
24059936:	6a12      	ldr	r2, [r2, #32]
24059938:	4311      	orrs	r1, r2
2405993a:	683a      	ldr	r2, [r7, #0]
2405993c:	6b92      	ldr	r2, [r2, #56]	; 0x38
2405993e:	4311      	orrs	r1, r2
24059940:	683a      	ldr	r2, [r7, #0]
24059942:	6c12      	ldr	r2, [r2, #64]	; 0x40
24059944:	430a      	orrs	r2, r1
24059946:	431a      	orrs	r2, r3
24059948:	69bb      	ldr	r3, [r7, #24]
2405994a:	601a      	str	r2, [r3, #0]
2405994c:	e026      	b.n	2405999c <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
2405994e:	69bb      	ldr	r3, [r7, #24]
24059950:	681a      	ldr	r2, [r3, #0]
24059952:	4b56      	ldr	r3, [pc, #344]	; (24059aac <OSPI_ConfigCmd+0x2e8>)
24059954:	4013      	ands	r3, r2
24059956:	683a      	ldr	r2, [r7, #0]
24059958:	68d1      	ldr	r1, [r2, #12]
2405995a:	683a      	ldr	r2, [r7, #0]
2405995c:	6952      	ldr	r2, [r2, #20]
2405995e:	4311      	orrs	r1, r2
24059960:	683a      	ldr	r2, [r7, #0]
24059962:	6912      	ldr	r2, [r2, #16]
24059964:	4311      	orrs	r1, r2
24059966:	683a      	ldr	r2, [r7, #0]
24059968:	69d2      	ldr	r2, [r2, #28]
2405996a:	4311      	orrs	r1, r2
2405996c:	683a      	ldr	r2, [r7, #0]
2405996e:	6a52      	ldr	r2, [r2, #36]	; 0x24
24059970:	4311      	orrs	r1, r2
24059972:	683a      	ldr	r2, [r7, #0]
24059974:	6a12      	ldr	r2, [r2, #32]
24059976:	430a      	orrs	r2, r1
24059978:	431a      	orrs	r2, r3
2405997a:	69bb      	ldr	r3, [r7, #24]
2405997c:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
2405997e:	687b      	ldr	r3, [r7, #4]
24059980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24059982:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24059986:	d109      	bne.n	2405999c <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
24059988:	683b      	ldr	r3, [r7, #0]
2405998a:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
2405998c:	2b08      	cmp	r3, #8
2405998e:	d105      	bne.n	2405999c <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
24059990:	69bb      	ldr	r3, [r7, #24]
24059992:	681b      	ldr	r3, [r3, #0]
24059994:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
24059998:	69bb      	ldr	r3, [r7, #24]
2405999a:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
2405999c:	683b      	ldr	r3, [r7, #0]
2405999e:	689a      	ldr	r2, [r3, #8]
240599a0:	693b      	ldr	r3, [r7, #16]
240599a2:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
240599a4:	687b      	ldr	r3, [r7, #4]
240599a6:	681b      	ldr	r3, [r3, #0]
240599a8:	683a      	ldr	r2, [r7, #0]
240599aa:	6992      	ldr	r2, [r2, #24]
240599ac:	649a      	str	r2, [r3, #72]	; 0x48
240599ae:	e074      	b.n	24059a9a <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
240599b0:	683b      	ldr	r3, [r7, #0]
240599b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240599b4:	2b00      	cmp	r3, #0
240599b6:	d015      	beq.n	240599e4 <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
240599b8:	69bb      	ldr	r3, [r7, #24]
240599ba:	681a      	ldr	r2, [r3, #0]
240599bc:	4b3c      	ldr	r3, [pc, #240]	; (24059ab0 <OSPI_ConfigCmd+0x2ec>)
240599be:	4013      	ands	r3, r2
240599c0:	683a      	ldr	r2, [r7, #0]
240599c2:	68d1      	ldr	r1, [r2, #12]
240599c4:	683a      	ldr	r2, [r7, #0]
240599c6:	6952      	ldr	r2, [r2, #20]
240599c8:	4311      	orrs	r1, r2
240599ca:	683a      	ldr	r2, [r7, #0]
240599cc:	6912      	ldr	r2, [r2, #16]
240599ce:	4311      	orrs	r1, r2
240599d0:	683a      	ldr	r2, [r7, #0]
240599d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
240599d4:	4311      	orrs	r1, r2
240599d6:	683a      	ldr	r2, [r7, #0]
240599d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
240599da:	430a      	orrs	r2, r1
240599dc:	431a      	orrs	r2, r3
240599de:	69bb      	ldr	r3, [r7, #24]
240599e0:	601a      	str	r2, [r3, #0]
240599e2:	e01d      	b.n	24059a20 <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
240599e4:	69bb      	ldr	r3, [r7, #24]
240599e6:	681b      	ldr	r3, [r3, #0]
240599e8:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
240599ec:	683b      	ldr	r3, [r7, #0]
240599ee:	68d9      	ldr	r1, [r3, #12]
240599f0:	683b      	ldr	r3, [r7, #0]
240599f2:	695b      	ldr	r3, [r3, #20]
240599f4:	4319      	orrs	r1, r3
240599f6:	683b      	ldr	r3, [r7, #0]
240599f8:	691b      	ldr	r3, [r3, #16]
240599fa:	430b      	orrs	r3, r1
240599fc:	431a      	orrs	r2, r3
240599fe:	69bb      	ldr	r3, [r7, #24]
24059a00:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
24059a02:	687b      	ldr	r3, [r7, #4]
24059a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24059a06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24059a0a:	d109      	bne.n	24059a20 <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
24059a0c:	683b      	ldr	r3, [r7, #0]
24059a0e:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
24059a10:	2b08      	cmp	r3, #8
24059a12:	d105      	bne.n	24059a20 <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
24059a14:	69bb      	ldr	r3, [r7, #24]
24059a16:	681b      	ldr	r3, [r3, #0]
24059a18:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
24059a1c:	69bb      	ldr	r3, [r7, #24]
24059a1e:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
24059a20:	683b      	ldr	r3, [r7, #0]
24059a22:	689a      	ldr	r2, [r3, #8]
24059a24:	693b      	ldr	r3, [r7, #16]
24059a26:	601a      	str	r2, [r3, #0]
24059a28:	e037      	b.n	24059a9a <OSPI_ConfigCmd+0x2d6>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
24059a2a:	683b      	ldr	r3, [r7, #0]
24059a2c:	69db      	ldr	r3, [r3, #28]
24059a2e:	2b00      	cmp	r3, #0
24059a30:	d02e      	beq.n	24059a90 <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
24059a32:	683b      	ldr	r3, [r7, #0]
24059a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24059a36:	2b00      	cmp	r3, #0
24059a38:	d015      	beq.n	24059a66 <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
24059a3a:	69bb      	ldr	r3, [r7, #24]
24059a3c:	681a      	ldr	r2, [r3, #0]
24059a3e:	4b1d      	ldr	r3, [pc, #116]	; (24059ab4 <OSPI_ConfigCmd+0x2f0>)
24059a40:	4013      	ands	r3, r2
24059a42:	683a      	ldr	r2, [r7, #0]
24059a44:	69d1      	ldr	r1, [r2, #28]
24059a46:	683a      	ldr	r2, [r7, #0]
24059a48:	6a52      	ldr	r2, [r2, #36]	; 0x24
24059a4a:	4311      	orrs	r1, r2
24059a4c:	683a      	ldr	r2, [r7, #0]
24059a4e:	6a12      	ldr	r2, [r2, #32]
24059a50:	4311      	orrs	r1, r2
24059a52:	683a      	ldr	r2, [r7, #0]
24059a54:	6b92      	ldr	r2, [r2, #56]	; 0x38
24059a56:	4311      	orrs	r1, r2
24059a58:	683a      	ldr	r2, [r7, #0]
24059a5a:	6c12      	ldr	r2, [r2, #64]	; 0x40
24059a5c:	430a      	orrs	r2, r1
24059a5e:	431a      	orrs	r2, r3
24059a60:	69bb      	ldr	r3, [r7, #24]
24059a62:	601a      	str	r2, [r3, #0]
24059a64:	e00e      	b.n	24059a84 <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
24059a66:	69bb      	ldr	r3, [r7, #24]
24059a68:	681b      	ldr	r3, [r3, #0]
24059a6a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
24059a6e:	683b      	ldr	r3, [r7, #0]
24059a70:	69d9      	ldr	r1, [r3, #28]
24059a72:	683b      	ldr	r3, [r7, #0]
24059a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24059a76:	4319      	orrs	r1, r3
24059a78:	683b      	ldr	r3, [r7, #0]
24059a7a:	6a1b      	ldr	r3, [r3, #32]
24059a7c:	430b      	orrs	r3, r1
24059a7e:	431a      	orrs	r2, r3
24059a80:	69bb      	ldr	r3, [r7, #24]
24059a82:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
24059a84:	687b      	ldr	r3, [r7, #4]
24059a86:	681b      	ldr	r3, [r3, #0]
24059a88:	683a      	ldr	r2, [r7, #0]
24059a8a:	6992      	ldr	r2, [r2, #24]
24059a8c:	649a      	str	r2, [r3, #72]	; 0x48
24059a8e:	e004      	b.n	24059a9a <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
24059a90:	2301      	movs	r3, #1
24059a92:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
24059a94:	687b      	ldr	r3, [r7, #4]
24059a96:	2208      	movs	r2, #8
24059a98:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Return function status */
  return status;
24059a9a:	7ffb      	ldrb	r3, [r7, #31]
}
24059a9c:	4618      	mov	r0, r3
24059a9e:	3724      	adds	r7, #36	; 0x24
24059aa0:	46bd      	mov	sp, r7
24059aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
24059aa6:	4770      	bx	lr
24059aa8:	f0ffc0c0 	.word	0xf0ffc0c0
24059aac:	ffffc0c0 	.word	0xffffc0c0
24059ab0:	f0ffffc0 	.word	0xf0ffffc0
24059ab4:	f0ffc0ff 	.word	0xf0ffc0ff

24059ab8 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
24059ab8:	b480      	push	{r7}
24059aba:	b087      	sub	sp, #28
24059abc:	af00      	add	r7, sp, #0
24059abe:	4603      	mov	r3, r0
24059ac0:	6039      	str	r1, [r7, #0]
24059ac2:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
24059ac4:	2300      	movs	r3, #0
24059ac6:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
24059ac8:	2300      	movs	r3, #0
24059aca:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
24059acc:	79fb      	ldrb	r3, [r7, #7]
24059ace:	2b00      	cmp	r3, #0
24059ad0:	d005      	beq.n	24059ade <OSPIM_GetConfig+0x26>
24059ad2:	79fb      	ldrb	r3, [r7, #7]
24059ad4:	2b02      	cmp	r3, #2
24059ad6:	d802      	bhi.n	24059ade <OSPIM_GetConfig+0x26>
24059ad8:	683b      	ldr	r3, [r7, #0]
24059ada:	2b00      	cmp	r3, #0
24059adc:	d102      	bne.n	24059ae4 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
24059ade:	2301      	movs	r3, #1
24059ae0:	75fb      	strb	r3, [r7, #23]
24059ae2:	e098      	b.n	24059c16 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
24059ae4:	683b      	ldr	r3, [r7, #0]
24059ae6:	2200      	movs	r2, #0
24059ae8:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
24059aea:	683b      	ldr	r3, [r7, #0]
24059aec:	2200      	movs	r2, #0
24059aee:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
24059af0:	683b      	ldr	r3, [r7, #0]
24059af2:	2200      	movs	r2, #0
24059af4:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
24059af6:	683b      	ldr	r3, [r7, #0]
24059af8:	2200      	movs	r2, #0
24059afa:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
24059afc:	683b      	ldr	r3, [r7, #0]
24059afe:	2200      	movs	r2, #0
24059b00:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
24059b02:	79fb      	ldrb	r3, [r7, #7]
24059b04:	2b02      	cmp	r3, #2
24059b06:	d10b      	bne.n	24059b20 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
24059b08:	4b46      	ldr	r3, [pc, #280]	; (24059c24 <OSPIM_GetConfig+0x16c>)
24059b0a:	681b      	ldr	r3, [r3, #0]
24059b0c:	f003 0301 	and.w	r3, r3, #1
24059b10:	2b00      	cmp	r3, #0
24059b12:	d102      	bne.n	24059b1a <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
24059b14:	4b44      	ldr	r3, [pc, #272]	; (24059c28 <OSPIM_GetConfig+0x170>)
24059b16:	613b      	str	r3, [r7, #16]
24059b18:	e002      	b.n	24059b20 <OSPIM_GetConfig+0x68>
               | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
24059b1a:	f44f 7300 	mov.w	r3, #512	; 0x200
24059b1e:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
24059b20:	2300      	movs	r3, #0
24059b22:	60fb      	str	r3, [r7, #12]
24059b24:	e074      	b.n	24059c10 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
24059b26:	4a3f      	ldr	r2, [pc, #252]	; (24059c24 <OSPIM_GetConfig+0x16c>)
24059b28:	68fb      	ldr	r3, [r7, #12]
24059b2a:	009b      	lsls	r3, r3, #2
24059b2c:	4413      	add	r3, r2
24059b2e:	685b      	ldr	r3, [r3, #4]
24059b30:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
24059b32:	68bb      	ldr	r3, [r7, #8]
24059b34:	f003 0301 	and.w	r3, r3, #1
24059b38:	2b00      	cmp	r3, #0
24059b3a:	d00a      	beq.n	24059b52 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
24059b3c:	68ba      	ldr	r2, [r7, #8]
24059b3e:	693b      	ldr	r3, [r7, #16]
24059b40:	4053      	eors	r3, r2
24059b42:	f003 0302 	and.w	r3, r3, #2
24059b46:	2b00      	cmp	r3, #0
24059b48:	d103      	bne.n	24059b52 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
24059b4a:	68fb      	ldr	r3, [r7, #12]
24059b4c:	1c5a      	adds	r2, r3, #1
24059b4e:	683b      	ldr	r3, [r7, #0]
24059b50:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
24059b52:	68bb      	ldr	r3, [r7, #8]
24059b54:	f003 0310 	and.w	r3, r3, #16
24059b58:	2b00      	cmp	r3, #0
24059b5a:	d00a      	beq.n	24059b72 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
24059b5c:	68ba      	ldr	r2, [r7, #8]
24059b5e:	693b      	ldr	r3, [r7, #16]
24059b60:	4053      	eors	r3, r2
24059b62:	f003 0320 	and.w	r3, r3, #32
24059b66:	2b00      	cmp	r3, #0
24059b68:	d103      	bne.n	24059b72 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
24059b6a:	68fb      	ldr	r3, [r7, #12]
24059b6c:	1c5a      	adds	r2, r3, #1
24059b6e:	683b      	ldr	r3, [r7, #0]
24059b70:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
24059b72:	68bb      	ldr	r3, [r7, #8]
24059b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
24059b78:	2b00      	cmp	r3, #0
24059b7a:	d00a      	beq.n	24059b92 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
24059b7c:	68ba      	ldr	r2, [r7, #8]
24059b7e:	693b      	ldr	r3, [r7, #16]
24059b80:	4053      	eors	r3, r2
24059b82:	f403 7300 	and.w	r3, r3, #512	; 0x200
24059b86:	2b00      	cmp	r3, #0
24059b88:	d103      	bne.n	24059b92 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
24059b8a:	68fb      	ldr	r3, [r7, #12]
24059b8c:	1c5a      	adds	r2, r3, #1
24059b8e:	683b      	ldr	r3, [r7, #0]
24059b90:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
24059b92:	68bb      	ldr	r3, [r7, #8]
24059b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24059b98:	2b00      	cmp	r3, #0
24059b9a:	d018      	beq.n	24059bce <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
24059b9c:	68ba      	ldr	r2, [r7, #8]
24059b9e:	693b      	ldr	r3, [r7, #16]
24059ba0:	4053      	eors	r3, r2
24059ba2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
24059ba6:	2b00      	cmp	r3, #0
24059ba8:	d111      	bne.n	24059bce <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
24059baa:	68bb      	ldr	r3, [r7, #8]
24059bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24059bb0:	2b00      	cmp	r3, #0
24059bb2:	d106      	bne.n	24059bc2 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
24059bb4:	68fb      	ldr	r3, [r7, #12]
24059bb6:	3301      	adds	r3, #1
24059bb8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
24059bbc:	683b      	ldr	r3, [r7, #0]
24059bbe:	60da      	str	r2, [r3, #12]
24059bc0:	e005      	b.n	24059bce <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
24059bc2:	68fb      	ldr	r3, [r7, #12]
24059bc4:	3301      	adds	r3, #1
24059bc6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
24059bca:	683b      	ldr	r3, [r7, #0]
24059bcc:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
24059bce:	68bb      	ldr	r3, [r7, #8]
24059bd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
24059bd4:	2b00      	cmp	r3, #0
24059bd6:	d018      	beq.n	24059c0a <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
24059bd8:	68ba      	ldr	r2, [r7, #8]
24059bda:	693b      	ldr	r3, [r7, #16]
24059bdc:	4053      	eors	r3, r2
24059bde:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
24059be2:	2b00      	cmp	r3, #0
24059be4:	d111      	bne.n	24059c0a <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
24059be6:	68bb      	ldr	r3, [r7, #8]
24059be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24059bec:	2b00      	cmp	r3, #0
24059bee:	d106      	bne.n	24059bfe <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
24059bf0:	68fb      	ldr	r3, [r7, #12]
24059bf2:	3301      	adds	r3, #1
24059bf4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
24059bf8:	683b      	ldr	r3, [r7, #0]
24059bfa:	611a      	str	r2, [r3, #16]
24059bfc:	e005      	b.n	24059c0a <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
24059bfe:	68fb      	ldr	r3, [r7, #12]
24059c00:	3301      	adds	r3, #1
24059c02:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
24059c06:	683b      	ldr	r3, [r7, #0]
24059c08:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
24059c0a:	68fb      	ldr	r3, [r7, #12]
24059c0c:	3301      	adds	r3, #1
24059c0e:	60fb      	str	r3, [r7, #12]
24059c10:	68fb      	ldr	r3, [r7, #12]
24059c12:	2b01      	cmp	r3, #1
24059c14:	d987      	bls.n	24059b26 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
24059c16:	7dfb      	ldrb	r3, [r7, #23]
}
24059c18:	4618      	mov	r0, r3
24059c1a:	371c      	adds	r7, #28
24059c1c:	46bd      	mov	sp, r7
24059c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
24059c22:	4770      	bx	lr
24059c24:	5200b400 	.word	0x5200b400
24059c28:	04040222 	.word	0x04040222

24059c2c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
24059c2c:	b480      	push	{r7}
24059c2e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
24059c30:	4b05      	ldr	r3, [pc, #20]	; (24059c48 <HAL_PWR_EnableBkUpAccess+0x1c>)
24059c32:	681b      	ldr	r3, [r3, #0]
24059c34:	4a04      	ldr	r2, [pc, #16]	; (24059c48 <HAL_PWR_EnableBkUpAccess+0x1c>)
24059c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24059c3a:	6013      	str	r3, [r2, #0]
}
24059c3c:	bf00      	nop
24059c3e:	46bd      	mov	sp, r7
24059c40:	f85d 7b04 	ldr.w	r7, [sp], #4
24059c44:	4770      	bx	lr
24059c46:	bf00      	nop
24059c48:	58024800 	.word	0x58024800

24059c4c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
24059c4c:	b580      	push	{r7, lr}
24059c4e:	b084      	sub	sp, #16
24059c50:	af00      	add	r7, sp, #0
24059c52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
24059c54:	4b19      	ldr	r3, [pc, #100]	; (24059cbc <HAL_PWREx_ConfigSupply+0x70>)
24059c56:	68db      	ldr	r3, [r3, #12]
24059c58:	f003 0304 	and.w	r3, r3, #4
24059c5c:	2b04      	cmp	r3, #4
24059c5e:	d00a      	beq.n	24059c76 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
24059c60:	4b16      	ldr	r3, [pc, #88]	; (24059cbc <HAL_PWREx_ConfigSupply+0x70>)
24059c62:	68db      	ldr	r3, [r3, #12]
24059c64:	f003 0307 	and.w	r3, r3, #7
24059c68:	687a      	ldr	r2, [r7, #4]
24059c6a:	429a      	cmp	r2, r3
24059c6c:	d001      	beq.n	24059c72 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
24059c6e:	2301      	movs	r3, #1
24059c70:	e01f      	b.n	24059cb2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
24059c72:	2300      	movs	r3, #0
24059c74:	e01d      	b.n	24059cb2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
24059c76:	4b11      	ldr	r3, [pc, #68]	; (24059cbc <HAL_PWREx_ConfigSupply+0x70>)
24059c78:	68db      	ldr	r3, [r3, #12]
24059c7a:	f023 0207 	bic.w	r2, r3, #7
24059c7e:	490f      	ldr	r1, [pc, #60]	; (24059cbc <HAL_PWREx_ConfigSupply+0x70>)
24059c80:	687b      	ldr	r3, [r7, #4]
24059c82:	4313      	orrs	r3, r2
24059c84:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
24059c86:	f7f9 f84d 	bl	24052d24 <HAL_GetTick>
24059c8a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
24059c8c:	e009      	b.n	24059ca2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
24059c8e:	f7f9 f849 	bl	24052d24 <HAL_GetTick>
24059c92:	4602      	mov	r2, r0
24059c94:	68fb      	ldr	r3, [r7, #12]
24059c96:	1ad3      	subs	r3, r2, r3
24059c98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
24059c9c:	d901      	bls.n	24059ca2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
24059c9e:	2301      	movs	r3, #1
24059ca0:	e007      	b.n	24059cb2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
24059ca2:	4b06      	ldr	r3, [pc, #24]	; (24059cbc <HAL_PWREx_ConfigSupply+0x70>)
24059ca4:	685b      	ldr	r3, [r3, #4]
24059ca6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
24059caa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24059cae:	d1ee      	bne.n	24059c8e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
24059cb0:	2300      	movs	r3, #0
}
24059cb2:	4618      	mov	r0, r3
24059cb4:	3710      	adds	r7, #16
24059cb6:	46bd      	mov	sp, r7
24059cb8:	bd80      	pop	{r7, pc}
24059cba:	bf00      	nop
24059cbc:	58024800 	.word	0x58024800

24059cc0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
24059cc0:	b580      	push	{r7, lr}
24059cc2:	b08c      	sub	sp, #48	; 0x30
24059cc4:	af00      	add	r7, sp, #0
24059cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
24059cc8:	687b      	ldr	r3, [r7, #4]
24059cca:	2b00      	cmp	r3, #0
24059ccc:	d101      	bne.n	24059cd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
24059cce:	2301      	movs	r3, #1
24059cd0:	e3f3      	b.n	2405a4ba <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
24059cd2:	687b      	ldr	r3, [r7, #4]
24059cd4:	681b      	ldr	r3, [r3, #0]
24059cd6:	f003 0301 	and.w	r3, r3, #1
24059cda:	2b00      	cmp	r3, #0
24059cdc:	f000 80b3 	beq.w	24059e46 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24059ce0:	4b9e      	ldr	r3, [pc, #632]	; (24059f5c <HAL_RCC_OscConfig+0x29c>)
24059ce2:	691b      	ldr	r3, [r3, #16]
24059ce4:	f003 0338 	and.w	r3, r3, #56	; 0x38
24059ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
24059cea:	4b9c      	ldr	r3, [pc, #624]	; (24059f5c <HAL_RCC_OscConfig+0x29c>)
24059cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24059cee:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
24059cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
24059cf2:	2b10      	cmp	r3, #16
24059cf4:	d007      	beq.n	24059d06 <HAL_RCC_OscConfig+0x46>
24059cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
24059cf8:	2b18      	cmp	r3, #24
24059cfa:	d112      	bne.n	24059d22 <HAL_RCC_OscConfig+0x62>
24059cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
24059cfe:	f003 0303 	and.w	r3, r3, #3
24059d02:	2b02      	cmp	r3, #2
24059d04:	d10d      	bne.n	24059d22 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
24059d06:	4b95      	ldr	r3, [pc, #596]	; (24059f5c <HAL_RCC_OscConfig+0x29c>)
24059d08:	681b      	ldr	r3, [r3, #0]
24059d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24059d0e:	2b00      	cmp	r3, #0
24059d10:	f000 8098 	beq.w	24059e44 <HAL_RCC_OscConfig+0x184>
24059d14:	687b      	ldr	r3, [r7, #4]
24059d16:	685b      	ldr	r3, [r3, #4]
24059d18:	2b00      	cmp	r3, #0
24059d1a:	f040 8093 	bne.w	24059e44 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
24059d1e:	2301      	movs	r3, #1
24059d20:	e3cb      	b.n	2405a4ba <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
24059d22:	687b      	ldr	r3, [r7, #4]
24059d24:	685b      	ldr	r3, [r3, #4]
24059d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24059d2a:	d106      	bne.n	24059d3a <HAL_RCC_OscConfig+0x7a>
24059d2c:	4b8b      	ldr	r3, [pc, #556]	; (24059f5c <HAL_RCC_OscConfig+0x29c>)
24059d2e:	681b      	ldr	r3, [r3, #0]
24059d30:	4a8a      	ldr	r2, [pc, #552]	; (24059f5c <HAL_RCC_OscConfig+0x29c>)
24059d32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24059d36:	6013      	str	r3, [r2, #0]
24059d38:	e058      	b.n	24059dec <HAL_RCC_OscConfig+0x12c>
24059d3a:	687b      	ldr	r3, [r7, #4]
24059d3c:	685b      	ldr	r3, [r3, #4]
24059d3e:	2b00      	cmp	r3, #0
24059d40:	d112      	bne.n	24059d68 <HAL_RCC_OscConfig+0xa8>
24059d42:	4b86      	ldr	r3, [pc, #536]	; (24059f5c <HAL_RCC_OscConfig+0x29c>)
24059d44:	681b      	ldr	r3, [r3, #0]
24059d46:	4a85      	ldr	r2, [pc, #532]	; (24059f5c <HAL_RCC_OscConfig+0x29c>)
24059d48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
24059d4c:	6013      	str	r3, [r2, #0]
24059d4e:	4b83      	ldr	r3, [pc, #524]	; (24059f5c <HAL_RCC_OscConfig+0x29c>)
24059d50:	681b      	ldr	r3, [r3, #0]
24059d52:	4a82      	ldr	r2, [pc, #520]	; (24059f5c <HAL_RCC_OscConfig+0x29c>)
24059d54:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
24059d58:	6013      	str	r3, [r2, #0]
24059d5a:	4b80      	ldr	r3, [pc, #512]	; (24059f5c <HAL_RCC_OscConfig+0x29c>)
24059d5c:	681b      	ldr	r3, [r3, #0]
24059d5e:	4a7f      	ldr	r2, [pc, #508]	; (24059f5c <HAL_RCC_OscConfig+0x29c>)
24059d60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
24059d64:	6013      	str	r3, [r2, #0]
24059d66:	e041      	b.n	24059dec <HAL_RCC_OscConfig+0x12c>
24059d68:	687b      	ldr	r3, [r7, #4]
24059d6a:	685b      	ldr	r3, [r3, #4]
24059d6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
24059d70:	d112      	bne.n	24059d98 <HAL_RCC_OscConfig+0xd8>
24059d72:	4b7a      	ldr	r3, [pc, #488]	; (24059f5c <HAL_RCC_OscConfig+0x29c>)
24059d74:	681b      	ldr	r3, [r3, #0]
24059d76:	4a79      	ldr	r2, [pc, #484]	; (24059f5c <HAL_RCC_OscConfig+0x29c>)
24059d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
24059d7c:	6013      	str	r3, [r2, #0]
24059d7e:	4b77      	ldr	r3, [pc, #476]	; (24059f5c <HAL_RCC_OscConfig+0x29c>)
24059d80:	681b      	ldr	r3, [r3, #0]
24059d82:	4a76      	ldr	r2, [pc, #472]	; (24059f5c <HAL_RCC_OscConfig+0x29c>)
24059d84:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
24059d88:	6013      	str	r3, [r2, #0]
24059d8a:	4b74      	ldr	r3, [pc, #464]	; (24059f5c <HAL_RCC_OscConfig+0x29c>)
24059d8c:	681b      	ldr	r3, [r3, #0]
24059d8e:	4a73      	ldr	r2, [pc, #460]	; (24059f5c <HAL_RCC_OscConfig+0x29c>)
24059d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24059d94:	6013      	str	r3, [r2, #0]
24059d96:	e029      	b.n	24059dec <HAL_RCC_OscConfig+0x12c>
24059d98:	687b      	ldr	r3, [r7, #4]
24059d9a:	685b      	ldr	r3, [r3, #4]
24059d9c:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
24059da0:	d112      	bne.n	24059dc8 <HAL_RCC_OscConfig+0x108>
24059da2:	4b6e      	ldr	r3, [pc, #440]	; (24059f5c <HAL_RCC_OscConfig+0x29c>)
24059da4:	681b      	ldr	r3, [r3, #0]
24059da6:	4a6d      	ldr	r2, [pc, #436]	; (24059f5c <HAL_RCC_OscConfig+0x29c>)
24059da8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
24059dac:	6013      	str	r3, [r2, #0]
24059dae:	4b6b      	ldr	r3, [pc, #428]	; (24059f5c <HAL_RCC_OscConfig+0x29c>)
24059db0:	681b      	ldr	r3, [r3, #0]
24059db2:	4a6a      	ldr	r2, [pc, #424]	; (24059f5c <HAL_RCC_OscConfig+0x29c>)
24059db4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
24059db8:	6013      	str	r3, [r2, #0]
24059dba:	4b68      	ldr	r3, [pc, #416]	; (24059f5c <HAL_RCC_OscConfig+0x29c>)
24059dbc:	681b      	ldr	r3, [r3, #0]
24059dbe:	4a67      	ldr	r2, [pc, #412]	; (24059f5c <HAL_RCC_OscConfig+0x29c>)
24059dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24059dc4:	6013      	str	r3, [r2, #0]
24059dc6:	e011      	b.n	24059dec <HAL_RCC_OscConfig+0x12c>
24059dc8:	4b64      	ldr	r3, [pc, #400]	; (24059f5c <HAL_RCC_OscConfig+0x29c>)
24059dca:	681b      	ldr	r3, [r3, #0]
24059dcc:	4a63      	ldr	r2, [pc, #396]	; (24059f5c <HAL_RCC_OscConfig+0x29c>)
24059dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
24059dd2:	6013      	str	r3, [r2, #0]
24059dd4:	4b61      	ldr	r3, [pc, #388]	; (24059f5c <HAL_RCC_OscConfig+0x29c>)
24059dd6:	681b      	ldr	r3, [r3, #0]
24059dd8:	4a60      	ldr	r2, [pc, #384]	; (24059f5c <HAL_RCC_OscConfig+0x29c>)
24059dda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
24059dde:	6013      	str	r3, [r2, #0]
24059de0:	4b5e      	ldr	r3, [pc, #376]	; (24059f5c <HAL_RCC_OscConfig+0x29c>)
24059de2:	681b      	ldr	r3, [r3, #0]
24059de4:	4a5d      	ldr	r2, [pc, #372]	; (24059f5c <HAL_RCC_OscConfig+0x29c>)
24059de6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
24059dea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
24059dec:	687b      	ldr	r3, [r7, #4]
24059dee:	685b      	ldr	r3, [r3, #4]
24059df0:	2b00      	cmp	r3, #0
24059df2:	d013      	beq.n	24059e1c <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24059df4:	f7f8 ff96 	bl	24052d24 <HAL_GetTick>
24059df8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24059dfa:	e008      	b.n	24059e0e <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
24059dfc:	f7f8 ff92 	bl	24052d24 <HAL_GetTick>
24059e00:	4602      	mov	r2, r0
24059e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24059e04:	1ad3      	subs	r3, r2, r3
24059e06:	2b64      	cmp	r3, #100	; 0x64
24059e08:	d901      	bls.n	24059e0e <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
24059e0a:	2303      	movs	r3, #3
24059e0c:	e355      	b.n	2405a4ba <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24059e0e:	4b53      	ldr	r3, [pc, #332]	; (24059f5c <HAL_RCC_OscConfig+0x29c>)
24059e10:	681b      	ldr	r3, [r3, #0]
24059e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24059e16:	2b00      	cmp	r3, #0
24059e18:	d0f0      	beq.n	24059dfc <HAL_RCC_OscConfig+0x13c>
24059e1a:	e014      	b.n	24059e46 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24059e1c:	f7f8 ff82 	bl	24052d24 <HAL_GetTick>
24059e20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
24059e22:	e008      	b.n	24059e36 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
24059e24:	f7f8 ff7e 	bl	24052d24 <HAL_GetTick>
24059e28:	4602      	mov	r2, r0
24059e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24059e2c:	1ad3      	subs	r3, r2, r3
24059e2e:	2b64      	cmp	r3, #100	; 0x64
24059e30:	d901      	bls.n	24059e36 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
24059e32:	2303      	movs	r3, #3
24059e34:	e341      	b.n	2405a4ba <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
24059e36:	4b49      	ldr	r3, [pc, #292]	; (24059f5c <HAL_RCC_OscConfig+0x29c>)
24059e38:	681b      	ldr	r3, [r3, #0]
24059e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24059e3e:	2b00      	cmp	r3, #0
24059e40:	d1f0      	bne.n	24059e24 <HAL_RCC_OscConfig+0x164>
24059e42:	e000      	b.n	24059e46 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
24059e44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
24059e46:	687b      	ldr	r3, [r7, #4]
24059e48:	681b      	ldr	r3, [r3, #0]
24059e4a:	f003 0302 	and.w	r3, r3, #2
24059e4e:	2b00      	cmp	r3, #0
24059e50:	f000 808c 	beq.w	24059f6c <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24059e54:	4b41      	ldr	r3, [pc, #260]	; (24059f5c <HAL_RCC_OscConfig+0x29c>)
24059e56:	691b      	ldr	r3, [r3, #16]
24059e58:	f003 0338 	and.w	r3, r3, #56	; 0x38
24059e5c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
24059e5e:	4b3f      	ldr	r3, [pc, #252]	; (24059f5c <HAL_RCC_OscConfig+0x29c>)
24059e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24059e62:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
24059e64:	6a3b      	ldr	r3, [r7, #32]
24059e66:	2b00      	cmp	r3, #0
24059e68:	d007      	beq.n	24059e7a <HAL_RCC_OscConfig+0x1ba>
24059e6a:	6a3b      	ldr	r3, [r7, #32]
24059e6c:	2b18      	cmp	r3, #24
24059e6e:	d137      	bne.n	24059ee0 <HAL_RCC_OscConfig+0x220>
24059e70:	69fb      	ldr	r3, [r7, #28]
24059e72:	f003 0303 	and.w	r3, r3, #3
24059e76:	2b00      	cmp	r3, #0
24059e78:	d132      	bne.n	24059ee0 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
24059e7a:	4b38      	ldr	r3, [pc, #224]	; (24059f5c <HAL_RCC_OscConfig+0x29c>)
24059e7c:	681b      	ldr	r3, [r3, #0]
24059e7e:	f003 0304 	and.w	r3, r3, #4
24059e82:	2b00      	cmp	r3, #0
24059e84:	d005      	beq.n	24059e92 <HAL_RCC_OscConfig+0x1d2>
24059e86:	687b      	ldr	r3, [r7, #4]
24059e88:	68db      	ldr	r3, [r3, #12]
24059e8a:	2b00      	cmp	r3, #0
24059e8c:	d101      	bne.n	24059e92 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
24059e8e:	2301      	movs	r3, #1
24059e90:	e313      	b.n	2405a4ba <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
24059e92:	4b32      	ldr	r3, [pc, #200]	; (24059f5c <HAL_RCC_OscConfig+0x29c>)
24059e94:	681b      	ldr	r3, [r3, #0]
24059e96:	f023 0219 	bic.w	r2, r3, #25
24059e9a:	687b      	ldr	r3, [r7, #4]
24059e9c:	68db      	ldr	r3, [r3, #12]
24059e9e:	492f      	ldr	r1, [pc, #188]	; (24059f5c <HAL_RCC_OscConfig+0x29c>)
24059ea0:	4313      	orrs	r3, r2
24059ea2:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
24059ea4:	f7f8 ff3e 	bl	24052d24 <HAL_GetTick>
24059ea8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24059eaa:	e008      	b.n	24059ebe <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
24059eac:	f7f8 ff3a 	bl	24052d24 <HAL_GetTick>
24059eb0:	4602      	mov	r2, r0
24059eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24059eb4:	1ad3      	subs	r3, r2, r3
24059eb6:	2b02      	cmp	r3, #2
24059eb8:	d901      	bls.n	24059ebe <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
24059eba:	2303      	movs	r3, #3
24059ebc:	e2fd      	b.n	2405a4ba <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24059ebe:	4b27      	ldr	r3, [pc, #156]	; (24059f5c <HAL_RCC_OscConfig+0x29c>)
24059ec0:	681b      	ldr	r3, [r3, #0]
24059ec2:	f003 0304 	and.w	r3, r3, #4
24059ec6:	2b00      	cmp	r3, #0
24059ec8:	d0f0      	beq.n	24059eac <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
24059eca:	4b24      	ldr	r3, [pc, #144]	; (24059f5c <HAL_RCC_OscConfig+0x29c>)
24059ecc:	685b      	ldr	r3, [r3, #4]
24059ece:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
24059ed2:	687b      	ldr	r3, [r7, #4]
24059ed4:	691b      	ldr	r3, [r3, #16]
24059ed6:	061b      	lsls	r3, r3, #24
24059ed8:	4920      	ldr	r1, [pc, #128]	; (24059f5c <HAL_RCC_OscConfig+0x29c>)
24059eda:	4313      	orrs	r3, r2
24059edc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
24059ede:	e045      	b.n	24059f6c <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
24059ee0:	687b      	ldr	r3, [r7, #4]
24059ee2:	68db      	ldr	r3, [r3, #12]
24059ee4:	2b00      	cmp	r3, #0
24059ee6:	d026      	beq.n	24059f36 <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
24059ee8:	4b1c      	ldr	r3, [pc, #112]	; (24059f5c <HAL_RCC_OscConfig+0x29c>)
24059eea:	681b      	ldr	r3, [r3, #0]
24059eec:	f023 0219 	bic.w	r2, r3, #25
24059ef0:	687b      	ldr	r3, [r7, #4]
24059ef2:	68db      	ldr	r3, [r3, #12]
24059ef4:	4919      	ldr	r1, [pc, #100]	; (24059f5c <HAL_RCC_OscConfig+0x29c>)
24059ef6:	4313      	orrs	r3, r2
24059ef8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24059efa:	f7f8 ff13 	bl	24052d24 <HAL_GetTick>
24059efe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24059f00:	e008      	b.n	24059f14 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
24059f02:	f7f8 ff0f 	bl	24052d24 <HAL_GetTick>
24059f06:	4602      	mov	r2, r0
24059f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24059f0a:	1ad3      	subs	r3, r2, r3
24059f0c:	2b02      	cmp	r3, #2
24059f0e:	d901      	bls.n	24059f14 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
24059f10:	2303      	movs	r3, #3
24059f12:	e2d2      	b.n	2405a4ba <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24059f14:	4b11      	ldr	r3, [pc, #68]	; (24059f5c <HAL_RCC_OscConfig+0x29c>)
24059f16:	681b      	ldr	r3, [r3, #0]
24059f18:	f003 0304 	and.w	r3, r3, #4
24059f1c:	2b00      	cmp	r3, #0
24059f1e:	d0f0      	beq.n	24059f02 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
24059f20:	4b0e      	ldr	r3, [pc, #56]	; (24059f5c <HAL_RCC_OscConfig+0x29c>)
24059f22:	685b      	ldr	r3, [r3, #4]
24059f24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
24059f28:	687b      	ldr	r3, [r7, #4]
24059f2a:	691b      	ldr	r3, [r3, #16]
24059f2c:	061b      	lsls	r3, r3, #24
24059f2e:	490b      	ldr	r1, [pc, #44]	; (24059f5c <HAL_RCC_OscConfig+0x29c>)
24059f30:	4313      	orrs	r3, r2
24059f32:	604b      	str	r3, [r1, #4]
24059f34:	e01a      	b.n	24059f6c <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
24059f36:	4b09      	ldr	r3, [pc, #36]	; (24059f5c <HAL_RCC_OscConfig+0x29c>)
24059f38:	681b      	ldr	r3, [r3, #0]
24059f3a:	4a08      	ldr	r2, [pc, #32]	; (24059f5c <HAL_RCC_OscConfig+0x29c>)
24059f3c:	f023 0301 	bic.w	r3, r3, #1
24059f40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24059f42:	f7f8 feef 	bl	24052d24 <HAL_GetTick>
24059f46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
24059f48:	e00a      	b.n	24059f60 <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
24059f4a:	f7f8 feeb 	bl	24052d24 <HAL_GetTick>
24059f4e:	4602      	mov	r2, r0
24059f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24059f52:	1ad3      	subs	r3, r2, r3
24059f54:	2b02      	cmp	r3, #2
24059f56:	d903      	bls.n	24059f60 <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
24059f58:	2303      	movs	r3, #3
24059f5a:	e2ae      	b.n	2405a4ba <HAL_RCC_OscConfig+0x7fa>
24059f5c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
24059f60:	4b99      	ldr	r3, [pc, #612]	; (2405a1c8 <HAL_RCC_OscConfig+0x508>)
24059f62:	681b      	ldr	r3, [r3, #0]
24059f64:	f003 0304 	and.w	r3, r3, #4
24059f68:	2b00      	cmp	r3, #0
24059f6a:	d1ee      	bne.n	24059f4a <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
24059f6c:	687b      	ldr	r3, [r7, #4]
24059f6e:	681b      	ldr	r3, [r3, #0]
24059f70:	f003 0310 	and.w	r3, r3, #16
24059f74:	2b00      	cmp	r3, #0
24059f76:	d06a      	beq.n	2405a04e <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24059f78:	4b93      	ldr	r3, [pc, #588]	; (2405a1c8 <HAL_RCC_OscConfig+0x508>)
24059f7a:	691b      	ldr	r3, [r3, #16]
24059f7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
24059f80:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
24059f82:	4b91      	ldr	r3, [pc, #580]	; (2405a1c8 <HAL_RCC_OscConfig+0x508>)
24059f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24059f86:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
24059f88:	69bb      	ldr	r3, [r7, #24]
24059f8a:	2b08      	cmp	r3, #8
24059f8c:	d007      	beq.n	24059f9e <HAL_RCC_OscConfig+0x2de>
24059f8e:	69bb      	ldr	r3, [r7, #24]
24059f90:	2b18      	cmp	r3, #24
24059f92:	d11b      	bne.n	24059fcc <HAL_RCC_OscConfig+0x30c>
24059f94:	697b      	ldr	r3, [r7, #20]
24059f96:	f003 0303 	and.w	r3, r3, #3
24059f9a:	2b01      	cmp	r3, #1
24059f9c:	d116      	bne.n	24059fcc <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
24059f9e:	4b8a      	ldr	r3, [pc, #552]	; (2405a1c8 <HAL_RCC_OscConfig+0x508>)
24059fa0:	681b      	ldr	r3, [r3, #0]
24059fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
24059fa6:	2b00      	cmp	r3, #0
24059fa8:	d005      	beq.n	24059fb6 <HAL_RCC_OscConfig+0x2f6>
24059faa:	687b      	ldr	r3, [r7, #4]
24059fac:	69db      	ldr	r3, [r3, #28]
24059fae:	2b80      	cmp	r3, #128	; 0x80
24059fb0:	d001      	beq.n	24059fb6 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
24059fb2:	2301      	movs	r3, #1
24059fb4:	e281      	b.n	2405a4ba <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24059fb6:	4b84      	ldr	r3, [pc, #528]	; (2405a1c8 <HAL_RCC_OscConfig+0x508>)
24059fb8:	68db      	ldr	r3, [r3, #12]
24059fba:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
24059fbe:	687b      	ldr	r3, [r7, #4]
24059fc0:	6a1b      	ldr	r3, [r3, #32]
24059fc2:	061b      	lsls	r3, r3, #24
24059fc4:	4980      	ldr	r1, [pc, #512]	; (2405a1c8 <HAL_RCC_OscConfig+0x508>)
24059fc6:	4313      	orrs	r3, r2
24059fc8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
24059fca:	e040      	b.n	2405a04e <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
24059fcc:	687b      	ldr	r3, [r7, #4]
24059fce:	69db      	ldr	r3, [r3, #28]
24059fd0:	2b00      	cmp	r3, #0
24059fd2:	d023      	beq.n	2405a01c <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
24059fd4:	4b7c      	ldr	r3, [pc, #496]	; (2405a1c8 <HAL_RCC_OscConfig+0x508>)
24059fd6:	681b      	ldr	r3, [r3, #0]
24059fd8:	4a7b      	ldr	r2, [pc, #492]	; (2405a1c8 <HAL_RCC_OscConfig+0x508>)
24059fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
24059fde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24059fe0:	f7f8 fea0 	bl	24052d24 <HAL_GetTick>
24059fe4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
24059fe6:	e008      	b.n	24059ffa <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
24059fe8:	f7f8 fe9c 	bl	24052d24 <HAL_GetTick>
24059fec:	4602      	mov	r2, r0
24059fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24059ff0:	1ad3      	subs	r3, r2, r3
24059ff2:	2b02      	cmp	r3, #2
24059ff4:	d901      	bls.n	24059ffa <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
24059ff6:	2303      	movs	r3, #3
24059ff8:	e25f      	b.n	2405a4ba <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
24059ffa:	4b73      	ldr	r3, [pc, #460]	; (2405a1c8 <HAL_RCC_OscConfig+0x508>)
24059ffc:	681b      	ldr	r3, [r3, #0]
24059ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405a002:	2b00      	cmp	r3, #0
2405a004:	d0f0      	beq.n	24059fe8 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
2405a006:	4b70      	ldr	r3, [pc, #448]	; (2405a1c8 <HAL_RCC_OscConfig+0x508>)
2405a008:	68db      	ldr	r3, [r3, #12]
2405a00a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
2405a00e:	687b      	ldr	r3, [r7, #4]
2405a010:	6a1b      	ldr	r3, [r3, #32]
2405a012:	061b      	lsls	r3, r3, #24
2405a014:	496c      	ldr	r1, [pc, #432]	; (2405a1c8 <HAL_RCC_OscConfig+0x508>)
2405a016:	4313      	orrs	r3, r2
2405a018:	60cb      	str	r3, [r1, #12]
2405a01a:	e018      	b.n	2405a04e <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
2405a01c:	4b6a      	ldr	r3, [pc, #424]	; (2405a1c8 <HAL_RCC_OscConfig+0x508>)
2405a01e:	681b      	ldr	r3, [r3, #0]
2405a020:	4a69      	ldr	r2, [pc, #420]	; (2405a1c8 <HAL_RCC_OscConfig+0x508>)
2405a022:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2405a026:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2405a028:	f7f8 fe7c 	bl	24052d24 <HAL_GetTick>
2405a02c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
2405a02e:	e008      	b.n	2405a042 <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
2405a030:	f7f8 fe78 	bl	24052d24 <HAL_GetTick>
2405a034:	4602      	mov	r2, r0
2405a036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405a038:	1ad3      	subs	r3, r2, r3
2405a03a:	2b02      	cmp	r3, #2
2405a03c:	d901      	bls.n	2405a042 <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
2405a03e:	2303      	movs	r3, #3
2405a040:	e23b      	b.n	2405a4ba <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
2405a042:	4b61      	ldr	r3, [pc, #388]	; (2405a1c8 <HAL_RCC_OscConfig+0x508>)
2405a044:	681b      	ldr	r3, [r3, #0]
2405a046:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405a04a:	2b00      	cmp	r3, #0
2405a04c:	d1f0      	bne.n	2405a030 <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
2405a04e:	687b      	ldr	r3, [r7, #4]
2405a050:	681b      	ldr	r3, [r3, #0]
2405a052:	f003 0308 	and.w	r3, r3, #8
2405a056:	2b00      	cmp	r3, #0
2405a058:	d036      	beq.n	2405a0c8 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
2405a05a:	687b      	ldr	r3, [r7, #4]
2405a05c:	695b      	ldr	r3, [r3, #20]
2405a05e:	2b00      	cmp	r3, #0
2405a060:	d019      	beq.n	2405a096 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
2405a062:	4b59      	ldr	r3, [pc, #356]	; (2405a1c8 <HAL_RCC_OscConfig+0x508>)
2405a064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2405a066:	4a58      	ldr	r2, [pc, #352]	; (2405a1c8 <HAL_RCC_OscConfig+0x508>)
2405a068:	f043 0301 	orr.w	r3, r3, #1
2405a06c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2405a06e:	f7f8 fe59 	bl	24052d24 <HAL_GetTick>
2405a072:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
2405a074:	e008      	b.n	2405a088 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
2405a076:	f7f8 fe55 	bl	24052d24 <HAL_GetTick>
2405a07a:	4602      	mov	r2, r0
2405a07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405a07e:	1ad3      	subs	r3, r2, r3
2405a080:	2b02      	cmp	r3, #2
2405a082:	d901      	bls.n	2405a088 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
2405a084:	2303      	movs	r3, #3
2405a086:	e218      	b.n	2405a4ba <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
2405a088:	4b4f      	ldr	r3, [pc, #316]	; (2405a1c8 <HAL_RCC_OscConfig+0x508>)
2405a08a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2405a08c:	f003 0302 	and.w	r3, r3, #2
2405a090:	2b00      	cmp	r3, #0
2405a092:	d0f0      	beq.n	2405a076 <HAL_RCC_OscConfig+0x3b6>
2405a094:	e018      	b.n	2405a0c8 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
2405a096:	4b4c      	ldr	r3, [pc, #304]	; (2405a1c8 <HAL_RCC_OscConfig+0x508>)
2405a098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2405a09a:	4a4b      	ldr	r2, [pc, #300]	; (2405a1c8 <HAL_RCC_OscConfig+0x508>)
2405a09c:	f023 0301 	bic.w	r3, r3, #1
2405a0a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2405a0a2:	f7f8 fe3f 	bl	24052d24 <HAL_GetTick>
2405a0a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
2405a0a8:	e008      	b.n	2405a0bc <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
2405a0aa:	f7f8 fe3b 	bl	24052d24 <HAL_GetTick>
2405a0ae:	4602      	mov	r2, r0
2405a0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405a0b2:	1ad3      	subs	r3, r2, r3
2405a0b4:	2b02      	cmp	r3, #2
2405a0b6:	d901      	bls.n	2405a0bc <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
2405a0b8:	2303      	movs	r3, #3
2405a0ba:	e1fe      	b.n	2405a4ba <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
2405a0bc:	4b42      	ldr	r3, [pc, #264]	; (2405a1c8 <HAL_RCC_OscConfig+0x508>)
2405a0be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2405a0c0:	f003 0302 	and.w	r3, r3, #2
2405a0c4:	2b00      	cmp	r3, #0
2405a0c6:	d1f0      	bne.n	2405a0aa <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
2405a0c8:	687b      	ldr	r3, [r7, #4]
2405a0ca:	681b      	ldr	r3, [r3, #0]
2405a0cc:	f003 0320 	and.w	r3, r3, #32
2405a0d0:	2b00      	cmp	r3, #0
2405a0d2:	d036      	beq.n	2405a142 <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
2405a0d4:	687b      	ldr	r3, [r7, #4]
2405a0d6:	699b      	ldr	r3, [r3, #24]
2405a0d8:	2b00      	cmp	r3, #0
2405a0da:	d019      	beq.n	2405a110 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
2405a0dc:	4b3a      	ldr	r3, [pc, #232]	; (2405a1c8 <HAL_RCC_OscConfig+0x508>)
2405a0de:	681b      	ldr	r3, [r3, #0]
2405a0e0:	4a39      	ldr	r2, [pc, #228]	; (2405a1c8 <HAL_RCC_OscConfig+0x508>)
2405a0e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
2405a0e6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
2405a0e8:	f7f8 fe1c 	bl	24052d24 <HAL_GetTick>
2405a0ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
2405a0ee:	e008      	b.n	2405a102 <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
2405a0f0:	f7f8 fe18 	bl	24052d24 <HAL_GetTick>
2405a0f4:	4602      	mov	r2, r0
2405a0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405a0f8:	1ad3      	subs	r3, r2, r3
2405a0fa:	2b02      	cmp	r3, #2
2405a0fc:	d901      	bls.n	2405a102 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
2405a0fe:	2303      	movs	r3, #3
2405a100:	e1db      	b.n	2405a4ba <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
2405a102:	4b31      	ldr	r3, [pc, #196]	; (2405a1c8 <HAL_RCC_OscConfig+0x508>)
2405a104:	681b      	ldr	r3, [r3, #0]
2405a106:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
2405a10a:	2b00      	cmp	r3, #0
2405a10c:	d0f0      	beq.n	2405a0f0 <HAL_RCC_OscConfig+0x430>
2405a10e:	e018      	b.n	2405a142 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
2405a110:	4b2d      	ldr	r3, [pc, #180]	; (2405a1c8 <HAL_RCC_OscConfig+0x508>)
2405a112:	681b      	ldr	r3, [r3, #0]
2405a114:	4a2c      	ldr	r2, [pc, #176]	; (2405a1c8 <HAL_RCC_OscConfig+0x508>)
2405a116:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
2405a11a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
2405a11c:	f7f8 fe02 	bl	24052d24 <HAL_GetTick>
2405a120:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
2405a122:	e008      	b.n	2405a136 <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
2405a124:	f7f8 fdfe 	bl	24052d24 <HAL_GetTick>
2405a128:	4602      	mov	r2, r0
2405a12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405a12c:	1ad3      	subs	r3, r2, r3
2405a12e:	2b02      	cmp	r3, #2
2405a130:	d901      	bls.n	2405a136 <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
2405a132:	2303      	movs	r3, #3
2405a134:	e1c1      	b.n	2405a4ba <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
2405a136:	4b24      	ldr	r3, [pc, #144]	; (2405a1c8 <HAL_RCC_OscConfig+0x508>)
2405a138:	681b      	ldr	r3, [r3, #0]
2405a13a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
2405a13e:	2b00      	cmp	r3, #0
2405a140:	d1f0      	bne.n	2405a124 <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
2405a142:	687b      	ldr	r3, [r7, #4]
2405a144:	681b      	ldr	r3, [r3, #0]
2405a146:	f003 0304 	and.w	r3, r3, #4
2405a14a:	2b00      	cmp	r3, #0
2405a14c:	f000 80af 	beq.w	2405a2ae <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
2405a150:	4b1e      	ldr	r3, [pc, #120]	; (2405a1cc <HAL_RCC_OscConfig+0x50c>)
2405a152:	681b      	ldr	r3, [r3, #0]
2405a154:	4a1d      	ldr	r2, [pc, #116]	; (2405a1cc <HAL_RCC_OscConfig+0x50c>)
2405a156:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2405a15a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
2405a15c:	f7f8 fde2 	bl	24052d24 <HAL_GetTick>
2405a160:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
2405a162:	e008      	b.n	2405a176 <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
2405a164:	f7f8 fdde 	bl	24052d24 <HAL_GetTick>
2405a168:	4602      	mov	r2, r0
2405a16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405a16c:	1ad3      	subs	r3, r2, r3
2405a16e:	2b64      	cmp	r3, #100	; 0x64
2405a170:	d901      	bls.n	2405a176 <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
2405a172:	2303      	movs	r3, #3
2405a174:	e1a1      	b.n	2405a4ba <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
2405a176:	4b15      	ldr	r3, [pc, #84]	; (2405a1cc <HAL_RCC_OscConfig+0x50c>)
2405a178:	681b      	ldr	r3, [r3, #0]
2405a17a:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405a17e:	2b00      	cmp	r3, #0
2405a180:	d0f0      	beq.n	2405a164 <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
2405a182:	687b      	ldr	r3, [r7, #4]
2405a184:	689b      	ldr	r3, [r3, #8]
2405a186:	2b01      	cmp	r3, #1
2405a188:	d106      	bne.n	2405a198 <HAL_RCC_OscConfig+0x4d8>
2405a18a:	4b0f      	ldr	r3, [pc, #60]	; (2405a1c8 <HAL_RCC_OscConfig+0x508>)
2405a18c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405a18e:	4a0e      	ldr	r2, [pc, #56]	; (2405a1c8 <HAL_RCC_OscConfig+0x508>)
2405a190:	f043 0301 	orr.w	r3, r3, #1
2405a194:	6713      	str	r3, [r2, #112]	; 0x70
2405a196:	e05b      	b.n	2405a250 <HAL_RCC_OscConfig+0x590>
2405a198:	687b      	ldr	r3, [r7, #4]
2405a19a:	689b      	ldr	r3, [r3, #8]
2405a19c:	2b00      	cmp	r3, #0
2405a19e:	d117      	bne.n	2405a1d0 <HAL_RCC_OscConfig+0x510>
2405a1a0:	4b09      	ldr	r3, [pc, #36]	; (2405a1c8 <HAL_RCC_OscConfig+0x508>)
2405a1a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405a1a4:	4a08      	ldr	r2, [pc, #32]	; (2405a1c8 <HAL_RCC_OscConfig+0x508>)
2405a1a6:	f023 0301 	bic.w	r3, r3, #1
2405a1aa:	6713      	str	r3, [r2, #112]	; 0x70
2405a1ac:	4b06      	ldr	r3, [pc, #24]	; (2405a1c8 <HAL_RCC_OscConfig+0x508>)
2405a1ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405a1b0:	4a05      	ldr	r2, [pc, #20]	; (2405a1c8 <HAL_RCC_OscConfig+0x508>)
2405a1b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2405a1b6:	6713      	str	r3, [r2, #112]	; 0x70
2405a1b8:	4b03      	ldr	r3, [pc, #12]	; (2405a1c8 <HAL_RCC_OscConfig+0x508>)
2405a1ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405a1bc:	4a02      	ldr	r2, [pc, #8]	; (2405a1c8 <HAL_RCC_OscConfig+0x508>)
2405a1be:	f023 0304 	bic.w	r3, r3, #4
2405a1c2:	6713      	str	r3, [r2, #112]	; 0x70
2405a1c4:	e044      	b.n	2405a250 <HAL_RCC_OscConfig+0x590>
2405a1c6:	bf00      	nop
2405a1c8:	58024400 	.word	0x58024400
2405a1cc:	58024800 	.word	0x58024800
2405a1d0:	687b      	ldr	r3, [r7, #4]
2405a1d2:	689b      	ldr	r3, [r3, #8]
2405a1d4:	2b05      	cmp	r3, #5
2405a1d6:	d112      	bne.n	2405a1fe <HAL_RCC_OscConfig+0x53e>
2405a1d8:	4b95      	ldr	r3, [pc, #596]	; (2405a430 <HAL_RCC_OscConfig+0x770>)
2405a1da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405a1dc:	4a94      	ldr	r2, [pc, #592]	; (2405a430 <HAL_RCC_OscConfig+0x770>)
2405a1de:	f043 0304 	orr.w	r3, r3, #4
2405a1e2:	6713      	str	r3, [r2, #112]	; 0x70
2405a1e4:	4b92      	ldr	r3, [pc, #584]	; (2405a430 <HAL_RCC_OscConfig+0x770>)
2405a1e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405a1e8:	4a91      	ldr	r2, [pc, #580]	; (2405a430 <HAL_RCC_OscConfig+0x770>)
2405a1ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2405a1ee:	6713      	str	r3, [r2, #112]	; 0x70
2405a1f0:	4b8f      	ldr	r3, [pc, #572]	; (2405a430 <HAL_RCC_OscConfig+0x770>)
2405a1f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405a1f4:	4a8e      	ldr	r2, [pc, #568]	; (2405a430 <HAL_RCC_OscConfig+0x770>)
2405a1f6:	f043 0301 	orr.w	r3, r3, #1
2405a1fa:	6713      	str	r3, [r2, #112]	; 0x70
2405a1fc:	e028      	b.n	2405a250 <HAL_RCC_OscConfig+0x590>
2405a1fe:	687b      	ldr	r3, [r7, #4]
2405a200:	689b      	ldr	r3, [r3, #8]
2405a202:	2b85      	cmp	r3, #133	; 0x85
2405a204:	d112      	bne.n	2405a22c <HAL_RCC_OscConfig+0x56c>
2405a206:	4b8a      	ldr	r3, [pc, #552]	; (2405a430 <HAL_RCC_OscConfig+0x770>)
2405a208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405a20a:	4a89      	ldr	r2, [pc, #548]	; (2405a430 <HAL_RCC_OscConfig+0x770>)
2405a20c:	f043 0304 	orr.w	r3, r3, #4
2405a210:	6713      	str	r3, [r2, #112]	; 0x70
2405a212:	4b87      	ldr	r3, [pc, #540]	; (2405a430 <HAL_RCC_OscConfig+0x770>)
2405a214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405a216:	4a86      	ldr	r2, [pc, #536]	; (2405a430 <HAL_RCC_OscConfig+0x770>)
2405a218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2405a21c:	6713      	str	r3, [r2, #112]	; 0x70
2405a21e:	4b84      	ldr	r3, [pc, #528]	; (2405a430 <HAL_RCC_OscConfig+0x770>)
2405a220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405a222:	4a83      	ldr	r2, [pc, #524]	; (2405a430 <HAL_RCC_OscConfig+0x770>)
2405a224:	f043 0301 	orr.w	r3, r3, #1
2405a228:	6713      	str	r3, [r2, #112]	; 0x70
2405a22a:	e011      	b.n	2405a250 <HAL_RCC_OscConfig+0x590>
2405a22c:	4b80      	ldr	r3, [pc, #512]	; (2405a430 <HAL_RCC_OscConfig+0x770>)
2405a22e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405a230:	4a7f      	ldr	r2, [pc, #508]	; (2405a430 <HAL_RCC_OscConfig+0x770>)
2405a232:	f023 0301 	bic.w	r3, r3, #1
2405a236:	6713      	str	r3, [r2, #112]	; 0x70
2405a238:	4b7d      	ldr	r3, [pc, #500]	; (2405a430 <HAL_RCC_OscConfig+0x770>)
2405a23a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405a23c:	4a7c      	ldr	r2, [pc, #496]	; (2405a430 <HAL_RCC_OscConfig+0x770>)
2405a23e:	f023 0304 	bic.w	r3, r3, #4
2405a242:	6713      	str	r3, [r2, #112]	; 0x70
2405a244:	4b7a      	ldr	r3, [pc, #488]	; (2405a430 <HAL_RCC_OscConfig+0x770>)
2405a246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405a248:	4a79      	ldr	r2, [pc, #484]	; (2405a430 <HAL_RCC_OscConfig+0x770>)
2405a24a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2405a24e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
2405a250:	687b      	ldr	r3, [r7, #4]
2405a252:	689b      	ldr	r3, [r3, #8]
2405a254:	2b00      	cmp	r3, #0
2405a256:	d015      	beq.n	2405a284 <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2405a258:	f7f8 fd64 	bl	24052d24 <HAL_GetTick>
2405a25c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
2405a25e:	e00a      	b.n	2405a276 <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
2405a260:	f7f8 fd60 	bl	24052d24 <HAL_GetTick>
2405a264:	4602      	mov	r2, r0
2405a266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405a268:	1ad3      	subs	r3, r2, r3
2405a26a:	f241 3288 	movw	r2, #5000	; 0x1388
2405a26e:	4293      	cmp	r3, r2
2405a270:	d901      	bls.n	2405a276 <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
2405a272:	2303      	movs	r3, #3
2405a274:	e121      	b.n	2405a4ba <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
2405a276:	4b6e      	ldr	r3, [pc, #440]	; (2405a430 <HAL_RCC_OscConfig+0x770>)
2405a278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405a27a:	f003 0302 	and.w	r3, r3, #2
2405a27e:	2b00      	cmp	r3, #0
2405a280:	d0ee      	beq.n	2405a260 <HAL_RCC_OscConfig+0x5a0>
2405a282:	e014      	b.n	2405a2ae <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2405a284:	f7f8 fd4e 	bl	24052d24 <HAL_GetTick>
2405a288:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
2405a28a:	e00a      	b.n	2405a2a2 <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
2405a28c:	f7f8 fd4a 	bl	24052d24 <HAL_GetTick>
2405a290:	4602      	mov	r2, r0
2405a292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405a294:	1ad3      	subs	r3, r2, r3
2405a296:	f241 3288 	movw	r2, #5000	; 0x1388
2405a29a:	4293      	cmp	r3, r2
2405a29c:	d901      	bls.n	2405a2a2 <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
2405a29e:	2303      	movs	r3, #3
2405a2a0:	e10b      	b.n	2405a4ba <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
2405a2a2:	4b63      	ldr	r3, [pc, #396]	; (2405a430 <HAL_RCC_OscConfig+0x770>)
2405a2a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405a2a6:	f003 0302 	and.w	r3, r3, #2
2405a2aa:	2b00      	cmp	r3, #0
2405a2ac:	d1ee      	bne.n	2405a28c <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
2405a2ae:	687b      	ldr	r3, [r7, #4]
2405a2b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2405a2b2:	2b00      	cmp	r3, #0
2405a2b4:	f000 8100 	beq.w	2405a4b8 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
2405a2b8:	4b5d      	ldr	r3, [pc, #372]	; (2405a430 <HAL_RCC_OscConfig+0x770>)
2405a2ba:	691b      	ldr	r3, [r3, #16]
2405a2bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
2405a2c0:	2b18      	cmp	r3, #24
2405a2c2:	f000 80bb 	beq.w	2405a43c <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
2405a2c6:	687b      	ldr	r3, [r7, #4]
2405a2c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2405a2ca:	2b02      	cmp	r3, #2
2405a2cc:	f040 8095 	bne.w	2405a3fa <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
2405a2d0:	4b57      	ldr	r3, [pc, #348]	; (2405a430 <HAL_RCC_OscConfig+0x770>)
2405a2d2:	681b      	ldr	r3, [r3, #0]
2405a2d4:	4a56      	ldr	r2, [pc, #344]	; (2405a430 <HAL_RCC_OscConfig+0x770>)
2405a2d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
2405a2da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2405a2dc:	f7f8 fd22 	bl	24052d24 <HAL_GetTick>
2405a2e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
2405a2e2:	e008      	b.n	2405a2f6 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
2405a2e4:	f7f8 fd1e 	bl	24052d24 <HAL_GetTick>
2405a2e8:	4602      	mov	r2, r0
2405a2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405a2ec:	1ad3      	subs	r3, r2, r3
2405a2ee:	2b02      	cmp	r3, #2
2405a2f0:	d901      	bls.n	2405a2f6 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
2405a2f2:	2303      	movs	r3, #3
2405a2f4:	e0e1      	b.n	2405a4ba <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
2405a2f6:	4b4e      	ldr	r3, [pc, #312]	; (2405a430 <HAL_RCC_OscConfig+0x770>)
2405a2f8:	681b      	ldr	r3, [r3, #0]
2405a2fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2405a2fe:	2b00      	cmp	r3, #0
2405a300:	d1f0      	bne.n	2405a2e4 <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
2405a302:	4b4b      	ldr	r3, [pc, #300]	; (2405a430 <HAL_RCC_OscConfig+0x770>)
2405a304:	6a9a      	ldr	r2, [r3, #40]	; 0x28
2405a306:	4b4b      	ldr	r3, [pc, #300]	; (2405a434 <HAL_RCC_OscConfig+0x774>)
2405a308:	4013      	ands	r3, r2
2405a30a:	687a      	ldr	r2, [r7, #4]
2405a30c:	6a91      	ldr	r1, [r2, #40]	; 0x28
2405a30e:	687a      	ldr	r2, [r7, #4]
2405a310:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
2405a312:	0112      	lsls	r2, r2, #4
2405a314:	430a      	orrs	r2, r1
2405a316:	4946      	ldr	r1, [pc, #280]	; (2405a430 <HAL_RCC_OscConfig+0x770>)
2405a318:	4313      	orrs	r3, r2
2405a31a:	628b      	str	r3, [r1, #40]	; 0x28
2405a31c:	687b      	ldr	r3, [r7, #4]
2405a31e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405a320:	3b01      	subs	r3, #1
2405a322:	f3c3 0208 	ubfx	r2, r3, #0, #9
2405a326:	687b      	ldr	r3, [r7, #4]
2405a328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2405a32a:	3b01      	subs	r3, #1
2405a32c:	025b      	lsls	r3, r3, #9
2405a32e:	b29b      	uxth	r3, r3
2405a330:	431a      	orrs	r2, r3
2405a332:	687b      	ldr	r3, [r7, #4]
2405a334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405a336:	3b01      	subs	r3, #1
2405a338:	041b      	lsls	r3, r3, #16
2405a33a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
2405a33e:	431a      	orrs	r2, r3
2405a340:	687b      	ldr	r3, [r7, #4]
2405a342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2405a344:	3b01      	subs	r3, #1
2405a346:	061b      	lsls	r3, r3, #24
2405a348:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
2405a34c:	4938      	ldr	r1, [pc, #224]	; (2405a430 <HAL_RCC_OscConfig+0x770>)
2405a34e:	4313      	orrs	r3, r2
2405a350:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
2405a352:	4b37      	ldr	r3, [pc, #220]	; (2405a430 <HAL_RCC_OscConfig+0x770>)
2405a354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405a356:	4a36      	ldr	r2, [pc, #216]	; (2405a430 <HAL_RCC_OscConfig+0x770>)
2405a358:	f023 0301 	bic.w	r3, r3, #1
2405a35c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
2405a35e:	4b34      	ldr	r3, [pc, #208]	; (2405a430 <HAL_RCC_OscConfig+0x770>)
2405a360:	6b5a      	ldr	r2, [r3, #52]	; 0x34
2405a362:	4b35      	ldr	r3, [pc, #212]	; (2405a438 <HAL_RCC_OscConfig+0x778>)
2405a364:	4013      	ands	r3, r2
2405a366:	687a      	ldr	r2, [r7, #4]
2405a368:	6c92      	ldr	r2, [r2, #72]	; 0x48
2405a36a:	00d2      	lsls	r2, r2, #3
2405a36c:	4930      	ldr	r1, [pc, #192]	; (2405a430 <HAL_RCC_OscConfig+0x770>)
2405a36e:	4313      	orrs	r3, r2
2405a370:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
2405a372:	4b2f      	ldr	r3, [pc, #188]	; (2405a430 <HAL_RCC_OscConfig+0x770>)
2405a374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405a376:	f023 020c 	bic.w	r2, r3, #12
2405a37a:	687b      	ldr	r3, [r7, #4]
2405a37c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405a37e:	492c      	ldr	r1, [pc, #176]	; (2405a430 <HAL_RCC_OscConfig+0x770>)
2405a380:	4313      	orrs	r3, r2
2405a382:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
2405a384:	4b2a      	ldr	r3, [pc, #168]	; (2405a430 <HAL_RCC_OscConfig+0x770>)
2405a386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405a388:	f023 0202 	bic.w	r2, r3, #2
2405a38c:	687b      	ldr	r3, [r7, #4]
2405a38e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2405a390:	4927      	ldr	r1, [pc, #156]	; (2405a430 <HAL_RCC_OscConfig+0x770>)
2405a392:	4313      	orrs	r3, r2
2405a394:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
2405a396:	4b26      	ldr	r3, [pc, #152]	; (2405a430 <HAL_RCC_OscConfig+0x770>)
2405a398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405a39a:	4a25      	ldr	r2, [pc, #148]	; (2405a430 <HAL_RCC_OscConfig+0x770>)
2405a39c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2405a3a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405a3a2:	4b23      	ldr	r3, [pc, #140]	; (2405a430 <HAL_RCC_OscConfig+0x770>)
2405a3a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405a3a6:	4a22      	ldr	r2, [pc, #136]	; (2405a430 <HAL_RCC_OscConfig+0x770>)
2405a3a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2405a3ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
2405a3ae:	4b20      	ldr	r3, [pc, #128]	; (2405a430 <HAL_RCC_OscConfig+0x770>)
2405a3b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405a3b2:	4a1f      	ldr	r2, [pc, #124]	; (2405a430 <HAL_RCC_OscConfig+0x770>)
2405a3b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
2405a3b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
2405a3ba:	4b1d      	ldr	r3, [pc, #116]	; (2405a430 <HAL_RCC_OscConfig+0x770>)
2405a3bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405a3be:	4a1c      	ldr	r2, [pc, #112]	; (2405a430 <HAL_RCC_OscConfig+0x770>)
2405a3c0:	f043 0301 	orr.w	r3, r3, #1
2405a3c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
2405a3c6:	4b1a      	ldr	r3, [pc, #104]	; (2405a430 <HAL_RCC_OscConfig+0x770>)
2405a3c8:	681b      	ldr	r3, [r3, #0]
2405a3ca:	4a19      	ldr	r2, [pc, #100]	; (2405a430 <HAL_RCC_OscConfig+0x770>)
2405a3cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
2405a3d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2405a3d2:	f7f8 fca7 	bl	24052d24 <HAL_GetTick>
2405a3d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
2405a3d8:	e008      	b.n	2405a3ec <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
2405a3da:	f7f8 fca3 	bl	24052d24 <HAL_GetTick>
2405a3de:	4602      	mov	r2, r0
2405a3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405a3e2:	1ad3      	subs	r3, r2, r3
2405a3e4:	2b02      	cmp	r3, #2
2405a3e6:	d901      	bls.n	2405a3ec <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
2405a3e8:	2303      	movs	r3, #3
2405a3ea:	e066      	b.n	2405a4ba <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
2405a3ec:	4b10      	ldr	r3, [pc, #64]	; (2405a430 <HAL_RCC_OscConfig+0x770>)
2405a3ee:	681b      	ldr	r3, [r3, #0]
2405a3f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2405a3f4:	2b00      	cmp	r3, #0
2405a3f6:	d0f0      	beq.n	2405a3da <HAL_RCC_OscConfig+0x71a>
2405a3f8:	e05e      	b.n	2405a4b8 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
2405a3fa:	4b0d      	ldr	r3, [pc, #52]	; (2405a430 <HAL_RCC_OscConfig+0x770>)
2405a3fc:	681b      	ldr	r3, [r3, #0]
2405a3fe:	4a0c      	ldr	r2, [pc, #48]	; (2405a430 <HAL_RCC_OscConfig+0x770>)
2405a400:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
2405a404:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2405a406:	f7f8 fc8d 	bl	24052d24 <HAL_GetTick>
2405a40a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
2405a40c:	e008      	b.n	2405a420 <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
2405a40e:	f7f8 fc89 	bl	24052d24 <HAL_GetTick>
2405a412:	4602      	mov	r2, r0
2405a414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405a416:	1ad3      	subs	r3, r2, r3
2405a418:	2b02      	cmp	r3, #2
2405a41a:	d901      	bls.n	2405a420 <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
2405a41c:	2303      	movs	r3, #3
2405a41e:	e04c      	b.n	2405a4ba <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
2405a420:	4b03      	ldr	r3, [pc, #12]	; (2405a430 <HAL_RCC_OscConfig+0x770>)
2405a422:	681b      	ldr	r3, [r3, #0]
2405a424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2405a428:	2b00      	cmp	r3, #0
2405a42a:	d1f0      	bne.n	2405a40e <HAL_RCC_OscConfig+0x74e>
2405a42c:	e044      	b.n	2405a4b8 <HAL_RCC_OscConfig+0x7f8>
2405a42e:	bf00      	nop
2405a430:	58024400 	.word	0x58024400
2405a434:	fffffc0c 	.word	0xfffffc0c
2405a438:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
2405a43c:	4b21      	ldr	r3, [pc, #132]	; (2405a4c4 <HAL_RCC_OscConfig+0x804>)
2405a43e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405a440:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
2405a442:	4b20      	ldr	r3, [pc, #128]	; (2405a4c4 <HAL_RCC_OscConfig+0x804>)
2405a444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405a446:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
2405a448:	687b      	ldr	r3, [r7, #4]
2405a44a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2405a44c:	2b01      	cmp	r3, #1
2405a44e:	d031      	beq.n	2405a4b4 <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
2405a450:	693b      	ldr	r3, [r7, #16]
2405a452:	f003 0203 	and.w	r2, r3, #3
2405a456:	687b      	ldr	r3, [r7, #4]
2405a458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
2405a45a:	429a      	cmp	r2, r3
2405a45c:	d12a      	bne.n	2405a4b4 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
2405a45e:	693b      	ldr	r3, [r7, #16]
2405a460:	091b      	lsrs	r3, r3, #4
2405a462:	f003 023f 	and.w	r2, r3, #63	; 0x3f
2405a466:	687b      	ldr	r3, [r7, #4]
2405a468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
2405a46a:	429a      	cmp	r2, r3
2405a46c:	d122      	bne.n	2405a4b4 <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
2405a46e:	68fb      	ldr	r3, [r7, #12]
2405a470:	f3c3 0208 	ubfx	r2, r3, #0, #9
2405a474:	687b      	ldr	r3, [r7, #4]
2405a476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405a478:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
2405a47a:	429a      	cmp	r2, r3
2405a47c:	d11a      	bne.n	2405a4b4 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
2405a47e:	68fb      	ldr	r3, [r7, #12]
2405a480:	0a5b      	lsrs	r3, r3, #9
2405a482:	f003 027f 	and.w	r2, r3, #127	; 0x7f
2405a486:	687b      	ldr	r3, [r7, #4]
2405a488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2405a48a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
2405a48c:	429a      	cmp	r2, r3
2405a48e:	d111      	bne.n	2405a4b4 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
2405a490:	68fb      	ldr	r3, [r7, #12]
2405a492:	0c1b      	lsrs	r3, r3, #16
2405a494:	f003 027f 	and.w	r2, r3, #127	; 0x7f
2405a498:	687b      	ldr	r3, [r7, #4]
2405a49a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405a49c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
2405a49e:	429a      	cmp	r2, r3
2405a4a0:	d108      	bne.n	2405a4b4 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
2405a4a2:	68fb      	ldr	r3, [r7, #12]
2405a4a4:	0e1b      	lsrs	r3, r3, #24
2405a4a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
2405a4aa:	687b      	ldr	r3, [r7, #4]
2405a4ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2405a4ae:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
2405a4b0:	429a      	cmp	r2, r3
2405a4b2:	d001      	beq.n	2405a4b8 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
2405a4b4:	2301      	movs	r3, #1
2405a4b6:	e000      	b.n	2405a4ba <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
2405a4b8:	2300      	movs	r3, #0
}
2405a4ba:	4618      	mov	r0, r3
2405a4bc:	3730      	adds	r7, #48	; 0x30
2405a4be:	46bd      	mov	sp, r7
2405a4c0:	bd80      	pop	{r7, pc}
2405a4c2:	bf00      	nop
2405a4c4:	58024400 	.word	0x58024400

2405a4c8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
2405a4c8:	b580      	push	{r7, lr}
2405a4ca:	b086      	sub	sp, #24
2405a4cc:	af00      	add	r7, sp, #0
2405a4ce:	6078      	str	r0, [r7, #4]
2405a4d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
2405a4d2:	687b      	ldr	r3, [r7, #4]
2405a4d4:	2b00      	cmp	r3, #0
2405a4d6:	d101      	bne.n	2405a4dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
2405a4d8:	2301      	movs	r3, #1
2405a4da:	e19c      	b.n	2405a816 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
2405a4dc:	4b8a      	ldr	r3, [pc, #552]	; (2405a708 <HAL_RCC_ClockConfig+0x240>)
2405a4de:	681b      	ldr	r3, [r3, #0]
2405a4e0:	f003 030f 	and.w	r3, r3, #15
2405a4e4:	683a      	ldr	r2, [r7, #0]
2405a4e6:	429a      	cmp	r2, r3
2405a4e8:	d910      	bls.n	2405a50c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
2405a4ea:	4b87      	ldr	r3, [pc, #540]	; (2405a708 <HAL_RCC_ClockConfig+0x240>)
2405a4ec:	681b      	ldr	r3, [r3, #0]
2405a4ee:	f023 020f 	bic.w	r2, r3, #15
2405a4f2:	4985      	ldr	r1, [pc, #532]	; (2405a708 <HAL_RCC_ClockConfig+0x240>)
2405a4f4:	683b      	ldr	r3, [r7, #0]
2405a4f6:	4313      	orrs	r3, r2
2405a4f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
2405a4fa:	4b83      	ldr	r3, [pc, #524]	; (2405a708 <HAL_RCC_ClockConfig+0x240>)
2405a4fc:	681b      	ldr	r3, [r3, #0]
2405a4fe:	f003 030f 	and.w	r3, r3, #15
2405a502:	683a      	ldr	r2, [r7, #0]
2405a504:	429a      	cmp	r2, r3
2405a506:	d001      	beq.n	2405a50c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
2405a508:	2301      	movs	r3, #1
2405a50a:	e184      	b.n	2405a816 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
2405a50c:	687b      	ldr	r3, [r7, #4]
2405a50e:	681b      	ldr	r3, [r3, #0]
2405a510:	f003 0304 	and.w	r3, r3, #4
2405a514:	2b00      	cmp	r3, #0
2405a516:	d010      	beq.n	2405a53a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
2405a518:	687b      	ldr	r3, [r7, #4]
2405a51a:	691a      	ldr	r2, [r3, #16]
2405a51c:	4b7b      	ldr	r3, [pc, #492]	; (2405a70c <HAL_RCC_ClockConfig+0x244>)
2405a51e:	699b      	ldr	r3, [r3, #24]
2405a520:	f003 0370 	and.w	r3, r3, #112	; 0x70
2405a524:	429a      	cmp	r2, r3
2405a526:	d908      	bls.n	2405a53a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
2405a528:	4b78      	ldr	r3, [pc, #480]	; (2405a70c <HAL_RCC_ClockConfig+0x244>)
2405a52a:	699b      	ldr	r3, [r3, #24]
2405a52c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
2405a530:	687b      	ldr	r3, [r7, #4]
2405a532:	691b      	ldr	r3, [r3, #16]
2405a534:	4975      	ldr	r1, [pc, #468]	; (2405a70c <HAL_RCC_ClockConfig+0x244>)
2405a536:	4313      	orrs	r3, r2
2405a538:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
2405a53a:	687b      	ldr	r3, [r7, #4]
2405a53c:	681b      	ldr	r3, [r3, #0]
2405a53e:	f003 0308 	and.w	r3, r3, #8
2405a542:	2b00      	cmp	r3, #0
2405a544:	d010      	beq.n	2405a568 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
2405a546:	687b      	ldr	r3, [r7, #4]
2405a548:	695a      	ldr	r2, [r3, #20]
2405a54a:	4b70      	ldr	r3, [pc, #448]	; (2405a70c <HAL_RCC_ClockConfig+0x244>)
2405a54c:	69db      	ldr	r3, [r3, #28]
2405a54e:	f003 0370 	and.w	r3, r3, #112	; 0x70
2405a552:	429a      	cmp	r2, r3
2405a554:	d908      	bls.n	2405a568 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
2405a556:	4b6d      	ldr	r3, [pc, #436]	; (2405a70c <HAL_RCC_ClockConfig+0x244>)
2405a558:	69db      	ldr	r3, [r3, #28]
2405a55a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
2405a55e:	687b      	ldr	r3, [r7, #4]
2405a560:	695b      	ldr	r3, [r3, #20]
2405a562:	496a      	ldr	r1, [pc, #424]	; (2405a70c <HAL_RCC_ClockConfig+0x244>)
2405a564:	4313      	orrs	r3, r2
2405a566:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
2405a568:	687b      	ldr	r3, [r7, #4]
2405a56a:	681b      	ldr	r3, [r3, #0]
2405a56c:	f003 0310 	and.w	r3, r3, #16
2405a570:	2b00      	cmp	r3, #0
2405a572:	d010      	beq.n	2405a596 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
2405a574:	687b      	ldr	r3, [r7, #4]
2405a576:	699a      	ldr	r2, [r3, #24]
2405a578:	4b64      	ldr	r3, [pc, #400]	; (2405a70c <HAL_RCC_ClockConfig+0x244>)
2405a57a:	69db      	ldr	r3, [r3, #28]
2405a57c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
2405a580:	429a      	cmp	r2, r3
2405a582:	d908      	bls.n	2405a596 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
2405a584:	4b61      	ldr	r3, [pc, #388]	; (2405a70c <HAL_RCC_ClockConfig+0x244>)
2405a586:	69db      	ldr	r3, [r3, #28]
2405a588:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
2405a58c:	687b      	ldr	r3, [r7, #4]
2405a58e:	699b      	ldr	r3, [r3, #24]
2405a590:	495e      	ldr	r1, [pc, #376]	; (2405a70c <HAL_RCC_ClockConfig+0x244>)
2405a592:	4313      	orrs	r3, r2
2405a594:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
2405a596:	687b      	ldr	r3, [r7, #4]
2405a598:	681b      	ldr	r3, [r3, #0]
2405a59a:	f003 0320 	and.w	r3, r3, #32
2405a59e:	2b00      	cmp	r3, #0
2405a5a0:	d010      	beq.n	2405a5c4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
2405a5a2:	687b      	ldr	r3, [r7, #4]
2405a5a4:	69da      	ldr	r2, [r3, #28]
2405a5a6:	4b59      	ldr	r3, [pc, #356]	; (2405a70c <HAL_RCC_ClockConfig+0x244>)
2405a5a8:	6a1b      	ldr	r3, [r3, #32]
2405a5aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
2405a5ae:	429a      	cmp	r2, r3
2405a5b0:	d908      	bls.n	2405a5c4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
2405a5b2:	4b56      	ldr	r3, [pc, #344]	; (2405a70c <HAL_RCC_ClockConfig+0x244>)
2405a5b4:	6a1b      	ldr	r3, [r3, #32]
2405a5b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
2405a5ba:	687b      	ldr	r3, [r7, #4]
2405a5bc:	69db      	ldr	r3, [r3, #28]
2405a5be:	4953      	ldr	r1, [pc, #332]	; (2405a70c <HAL_RCC_ClockConfig+0x244>)
2405a5c0:	4313      	orrs	r3, r2
2405a5c2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
2405a5c4:	687b      	ldr	r3, [r7, #4]
2405a5c6:	681b      	ldr	r3, [r3, #0]
2405a5c8:	f003 0302 	and.w	r3, r3, #2
2405a5cc:	2b00      	cmp	r3, #0
2405a5ce:	d010      	beq.n	2405a5f2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
2405a5d0:	687b      	ldr	r3, [r7, #4]
2405a5d2:	68da      	ldr	r2, [r3, #12]
2405a5d4:	4b4d      	ldr	r3, [pc, #308]	; (2405a70c <HAL_RCC_ClockConfig+0x244>)
2405a5d6:	699b      	ldr	r3, [r3, #24]
2405a5d8:	f003 030f 	and.w	r3, r3, #15
2405a5dc:	429a      	cmp	r2, r3
2405a5de:	d908      	bls.n	2405a5f2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
2405a5e0:	4b4a      	ldr	r3, [pc, #296]	; (2405a70c <HAL_RCC_ClockConfig+0x244>)
2405a5e2:	699b      	ldr	r3, [r3, #24]
2405a5e4:	f023 020f 	bic.w	r2, r3, #15
2405a5e8:	687b      	ldr	r3, [r7, #4]
2405a5ea:	68db      	ldr	r3, [r3, #12]
2405a5ec:	4947      	ldr	r1, [pc, #284]	; (2405a70c <HAL_RCC_ClockConfig+0x244>)
2405a5ee:	4313      	orrs	r3, r2
2405a5f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
2405a5f2:	687b      	ldr	r3, [r7, #4]
2405a5f4:	681b      	ldr	r3, [r3, #0]
2405a5f6:	f003 0301 	and.w	r3, r3, #1
2405a5fa:	2b00      	cmp	r3, #0
2405a5fc:	d055      	beq.n	2405a6aa <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
2405a5fe:	4b43      	ldr	r3, [pc, #268]	; (2405a70c <HAL_RCC_ClockConfig+0x244>)
2405a600:	699b      	ldr	r3, [r3, #24]
2405a602:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
2405a606:	687b      	ldr	r3, [r7, #4]
2405a608:	689b      	ldr	r3, [r3, #8]
2405a60a:	4940      	ldr	r1, [pc, #256]	; (2405a70c <HAL_RCC_ClockConfig+0x244>)
2405a60c:	4313      	orrs	r3, r2
2405a60e:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
2405a610:	687b      	ldr	r3, [r7, #4]
2405a612:	685b      	ldr	r3, [r3, #4]
2405a614:	2b02      	cmp	r3, #2
2405a616:	d107      	bne.n	2405a628 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
2405a618:	4b3c      	ldr	r3, [pc, #240]	; (2405a70c <HAL_RCC_ClockConfig+0x244>)
2405a61a:	681b      	ldr	r3, [r3, #0]
2405a61c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405a620:	2b00      	cmp	r3, #0
2405a622:	d121      	bne.n	2405a668 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
2405a624:	2301      	movs	r3, #1
2405a626:	e0f6      	b.n	2405a816 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
2405a628:	687b      	ldr	r3, [r7, #4]
2405a62a:	685b      	ldr	r3, [r3, #4]
2405a62c:	2b03      	cmp	r3, #3
2405a62e:	d107      	bne.n	2405a640 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
2405a630:	4b36      	ldr	r3, [pc, #216]	; (2405a70c <HAL_RCC_ClockConfig+0x244>)
2405a632:	681b      	ldr	r3, [r3, #0]
2405a634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2405a638:	2b00      	cmp	r3, #0
2405a63a:	d115      	bne.n	2405a668 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
2405a63c:	2301      	movs	r3, #1
2405a63e:	e0ea      	b.n	2405a816 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
2405a640:	687b      	ldr	r3, [r7, #4]
2405a642:	685b      	ldr	r3, [r3, #4]
2405a644:	2b01      	cmp	r3, #1
2405a646:	d107      	bne.n	2405a658 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
2405a648:	4b30      	ldr	r3, [pc, #192]	; (2405a70c <HAL_RCC_ClockConfig+0x244>)
2405a64a:	681b      	ldr	r3, [r3, #0]
2405a64c:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405a650:	2b00      	cmp	r3, #0
2405a652:	d109      	bne.n	2405a668 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
2405a654:	2301      	movs	r3, #1
2405a656:	e0de      	b.n	2405a816 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
2405a658:	4b2c      	ldr	r3, [pc, #176]	; (2405a70c <HAL_RCC_ClockConfig+0x244>)
2405a65a:	681b      	ldr	r3, [r3, #0]
2405a65c:	f003 0304 	and.w	r3, r3, #4
2405a660:	2b00      	cmp	r3, #0
2405a662:	d101      	bne.n	2405a668 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
2405a664:	2301      	movs	r3, #1
2405a666:	e0d6      	b.n	2405a816 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
2405a668:	4b28      	ldr	r3, [pc, #160]	; (2405a70c <HAL_RCC_ClockConfig+0x244>)
2405a66a:	691b      	ldr	r3, [r3, #16]
2405a66c:	f023 0207 	bic.w	r2, r3, #7
2405a670:	687b      	ldr	r3, [r7, #4]
2405a672:	685b      	ldr	r3, [r3, #4]
2405a674:	4925      	ldr	r1, [pc, #148]	; (2405a70c <HAL_RCC_ClockConfig+0x244>)
2405a676:	4313      	orrs	r3, r2
2405a678:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2405a67a:	f7f8 fb53 	bl	24052d24 <HAL_GetTick>
2405a67e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
2405a680:	e00a      	b.n	2405a698 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
2405a682:	f7f8 fb4f 	bl	24052d24 <HAL_GetTick>
2405a686:	4602      	mov	r2, r0
2405a688:	697b      	ldr	r3, [r7, #20]
2405a68a:	1ad3      	subs	r3, r2, r3
2405a68c:	f241 3288 	movw	r2, #5000	; 0x1388
2405a690:	4293      	cmp	r3, r2
2405a692:	d901      	bls.n	2405a698 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
2405a694:	2303      	movs	r3, #3
2405a696:	e0be      	b.n	2405a816 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
2405a698:	4b1c      	ldr	r3, [pc, #112]	; (2405a70c <HAL_RCC_ClockConfig+0x244>)
2405a69a:	691b      	ldr	r3, [r3, #16]
2405a69c:	f003 0238 	and.w	r2, r3, #56	; 0x38
2405a6a0:	687b      	ldr	r3, [r7, #4]
2405a6a2:	685b      	ldr	r3, [r3, #4]
2405a6a4:	00db      	lsls	r3, r3, #3
2405a6a6:	429a      	cmp	r2, r3
2405a6a8:	d1eb      	bne.n	2405a682 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
2405a6aa:	687b      	ldr	r3, [r7, #4]
2405a6ac:	681b      	ldr	r3, [r3, #0]
2405a6ae:	f003 0302 	and.w	r3, r3, #2
2405a6b2:	2b00      	cmp	r3, #0
2405a6b4:	d010      	beq.n	2405a6d8 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
2405a6b6:	687b      	ldr	r3, [r7, #4]
2405a6b8:	68da      	ldr	r2, [r3, #12]
2405a6ba:	4b14      	ldr	r3, [pc, #80]	; (2405a70c <HAL_RCC_ClockConfig+0x244>)
2405a6bc:	699b      	ldr	r3, [r3, #24]
2405a6be:	f003 030f 	and.w	r3, r3, #15
2405a6c2:	429a      	cmp	r2, r3
2405a6c4:	d208      	bcs.n	2405a6d8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
2405a6c6:	4b11      	ldr	r3, [pc, #68]	; (2405a70c <HAL_RCC_ClockConfig+0x244>)
2405a6c8:	699b      	ldr	r3, [r3, #24]
2405a6ca:	f023 020f 	bic.w	r2, r3, #15
2405a6ce:	687b      	ldr	r3, [r7, #4]
2405a6d0:	68db      	ldr	r3, [r3, #12]
2405a6d2:	490e      	ldr	r1, [pc, #56]	; (2405a70c <HAL_RCC_ClockConfig+0x244>)
2405a6d4:	4313      	orrs	r3, r2
2405a6d6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
2405a6d8:	4b0b      	ldr	r3, [pc, #44]	; (2405a708 <HAL_RCC_ClockConfig+0x240>)
2405a6da:	681b      	ldr	r3, [r3, #0]
2405a6dc:	f003 030f 	and.w	r3, r3, #15
2405a6e0:	683a      	ldr	r2, [r7, #0]
2405a6e2:	429a      	cmp	r2, r3
2405a6e4:	d214      	bcs.n	2405a710 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
2405a6e6:	4b08      	ldr	r3, [pc, #32]	; (2405a708 <HAL_RCC_ClockConfig+0x240>)
2405a6e8:	681b      	ldr	r3, [r3, #0]
2405a6ea:	f023 020f 	bic.w	r2, r3, #15
2405a6ee:	4906      	ldr	r1, [pc, #24]	; (2405a708 <HAL_RCC_ClockConfig+0x240>)
2405a6f0:	683b      	ldr	r3, [r7, #0]
2405a6f2:	4313      	orrs	r3, r2
2405a6f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
2405a6f6:	4b04      	ldr	r3, [pc, #16]	; (2405a708 <HAL_RCC_ClockConfig+0x240>)
2405a6f8:	681b      	ldr	r3, [r3, #0]
2405a6fa:	f003 030f 	and.w	r3, r3, #15
2405a6fe:	683a      	ldr	r2, [r7, #0]
2405a700:	429a      	cmp	r2, r3
2405a702:	d005      	beq.n	2405a710 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
2405a704:	2301      	movs	r3, #1
2405a706:	e086      	b.n	2405a816 <HAL_RCC_ClockConfig+0x34e>
2405a708:	52002000 	.word	0x52002000
2405a70c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
2405a710:	687b      	ldr	r3, [r7, #4]
2405a712:	681b      	ldr	r3, [r3, #0]
2405a714:	f003 0304 	and.w	r3, r3, #4
2405a718:	2b00      	cmp	r3, #0
2405a71a:	d010      	beq.n	2405a73e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
2405a71c:	687b      	ldr	r3, [r7, #4]
2405a71e:	691a      	ldr	r2, [r3, #16]
2405a720:	4b3f      	ldr	r3, [pc, #252]	; (2405a820 <HAL_RCC_ClockConfig+0x358>)
2405a722:	699b      	ldr	r3, [r3, #24]
2405a724:	f003 0370 	and.w	r3, r3, #112	; 0x70
2405a728:	429a      	cmp	r2, r3
2405a72a:	d208      	bcs.n	2405a73e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
2405a72c:	4b3c      	ldr	r3, [pc, #240]	; (2405a820 <HAL_RCC_ClockConfig+0x358>)
2405a72e:	699b      	ldr	r3, [r3, #24]
2405a730:	f023 0270 	bic.w	r2, r3, #112	; 0x70
2405a734:	687b      	ldr	r3, [r7, #4]
2405a736:	691b      	ldr	r3, [r3, #16]
2405a738:	4939      	ldr	r1, [pc, #228]	; (2405a820 <HAL_RCC_ClockConfig+0x358>)
2405a73a:	4313      	orrs	r3, r2
2405a73c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
2405a73e:	687b      	ldr	r3, [r7, #4]
2405a740:	681b      	ldr	r3, [r3, #0]
2405a742:	f003 0308 	and.w	r3, r3, #8
2405a746:	2b00      	cmp	r3, #0
2405a748:	d010      	beq.n	2405a76c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
2405a74a:	687b      	ldr	r3, [r7, #4]
2405a74c:	695a      	ldr	r2, [r3, #20]
2405a74e:	4b34      	ldr	r3, [pc, #208]	; (2405a820 <HAL_RCC_ClockConfig+0x358>)
2405a750:	69db      	ldr	r3, [r3, #28]
2405a752:	f003 0370 	and.w	r3, r3, #112	; 0x70
2405a756:	429a      	cmp	r2, r3
2405a758:	d208      	bcs.n	2405a76c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
2405a75a:	4b31      	ldr	r3, [pc, #196]	; (2405a820 <HAL_RCC_ClockConfig+0x358>)
2405a75c:	69db      	ldr	r3, [r3, #28]
2405a75e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
2405a762:	687b      	ldr	r3, [r7, #4]
2405a764:	695b      	ldr	r3, [r3, #20]
2405a766:	492e      	ldr	r1, [pc, #184]	; (2405a820 <HAL_RCC_ClockConfig+0x358>)
2405a768:	4313      	orrs	r3, r2
2405a76a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
2405a76c:	687b      	ldr	r3, [r7, #4]
2405a76e:	681b      	ldr	r3, [r3, #0]
2405a770:	f003 0310 	and.w	r3, r3, #16
2405a774:	2b00      	cmp	r3, #0
2405a776:	d010      	beq.n	2405a79a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
2405a778:	687b      	ldr	r3, [r7, #4]
2405a77a:	699a      	ldr	r2, [r3, #24]
2405a77c:	4b28      	ldr	r3, [pc, #160]	; (2405a820 <HAL_RCC_ClockConfig+0x358>)
2405a77e:	69db      	ldr	r3, [r3, #28]
2405a780:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
2405a784:	429a      	cmp	r2, r3
2405a786:	d208      	bcs.n	2405a79a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
2405a788:	4b25      	ldr	r3, [pc, #148]	; (2405a820 <HAL_RCC_ClockConfig+0x358>)
2405a78a:	69db      	ldr	r3, [r3, #28]
2405a78c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
2405a790:	687b      	ldr	r3, [r7, #4]
2405a792:	699b      	ldr	r3, [r3, #24]
2405a794:	4922      	ldr	r1, [pc, #136]	; (2405a820 <HAL_RCC_ClockConfig+0x358>)
2405a796:	4313      	orrs	r3, r2
2405a798:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
2405a79a:	687b      	ldr	r3, [r7, #4]
2405a79c:	681b      	ldr	r3, [r3, #0]
2405a79e:	f003 0320 	and.w	r3, r3, #32
2405a7a2:	2b00      	cmp	r3, #0
2405a7a4:	d010      	beq.n	2405a7c8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
2405a7a6:	687b      	ldr	r3, [r7, #4]
2405a7a8:	69da      	ldr	r2, [r3, #28]
2405a7aa:	4b1d      	ldr	r3, [pc, #116]	; (2405a820 <HAL_RCC_ClockConfig+0x358>)
2405a7ac:	6a1b      	ldr	r3, [r3, #32]
2405a7ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
2405a7b2:	429a      	cmp	r2, r3
2405a7b4:	d208      	bcs.n	2405a7c8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
2405a7b6:	4b1a      	ldr	r3, [pc, #104]	; (2405a820 <HAL_RCC_ClockConfig+0x358>)
2405a7b8:	6a1b      	ldr	r3, [r3, #32]
2405a7ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
2405a7be:	687b      	ldr	r3, [r7, #4]
2405a7c0:	69db      	ldr	r3, [r3, #28]
2405a7c2:	4917      	ldr	r1, [pc, #92]	; (2405a820 <HAL_RCC_ClockConfig+0x358>)
2405a7c4:	4313      	orrs	r3, r2
2405a7c6:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
2405a7c8:	f000 f834 	bl	2405a834 <HAL_RCC_GetSysClockFreq>
2405a7cc:	4602      	mov	r2, r0
2405a7ce:	4b14      	ldr	r3, [pc, #80]	; (2405a820 <HAL_RCC_ClockConfig+0x358>)
2405a7d0:	699b      	ldr	r3, [r3, #24]
2405a7d2:	0a1b      	lsrs	r3, r3, #8
2405a7d4:	f003 030f 	and.w	r3, r3, #15
2405a7d8:	4912      	ldr	r1, [pc, #72]	; (2405a824 <HAL_RCC_ClockConfig+0x35c>)
2405a7da:	5ccb      	ldrb	r3, [r1, r3]
2405a7dc:	f003 031f 	and.w	r3, r3, #31
2405a7e0:	fa22 f303 	lsr.w	r3, r2, r3
2405a7e4:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
2405a7e6:	4b0e      	ldr	r3, [pc, #56]	; (2405a820 <HAL_RCC_ClockConfig+0x358>)
2405a7e8:	699b      	ldr	r3, [r3, #24]
2405a7ea:	f003 030f 	and.w	r3, r3, #15
2405a7ee:	4a0d      	ldr	r2, [pc, #52]	; (2405a824 <HAL_RCC_ClockConfig+0x35c>)
2405a7f0:	5cd3      	ldrb	r3, [r2, r3]
2405a7f2:	f003 031f 	and.w	r3, r3, #31
2405a7f6:	693a      	ldr	r2, [r7, #16]
2405a7f8:	fa22 f303 	lsr.w	r3, r2, r3
2405a7fc:	4a0a      	ldr	r2, [pc, #40]	; (2405a828 <HAL_RCC_ClockConfig+0x360>)
2405a7fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
2405a800:	4a0a      	ldr	r2, [pc, #40]	; (2405a82c <HAL_RCC_ClockConfig+0x364>)
2405a802:	693b      	ldr	r3, [r7, #16]
2405a804:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
2405a806:	4b0a      	ldr	r3, [pc, #40]	; (2405a830 <HAL_RCC_ClockConfig+0x368>)
2405a808:	681b      	ldr	r3, [r3, #0]
2405a80a:	4618      	mov	r0, r3
2405a80c:	f7f8 fa40 	bl	24052c90 <HAL_InitTick>
2405a810:	4603      	mov	r3, r0
2405a812:	73fb      	strb	r3, [r7, #15]

  return halstatus;
2405a814:	7bfb      	ldrb	r3, [r7, #15]
}
2405a816:	4618      	mov	r0, r3
2405a818:	3718      	adds	r7, #24
2405a81a:	46bd      	mov	sp, r7
2405a81c:	bd80      	pop	{r7, pc}
2405a81e:	bf00      	nop
2405a820:	58024400 	.word	0x58024400
2405a824:	24060f1c 	.word	0x24060f1c
2405a828:	20000034 	.word	0x20000034
2405a82c:	20000030 	.word	0x20000030
2405a830:	20000038 	.word	0x20000038

2405a834 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
2405a834:	b480      	push	{r7}
2405a836:	b089      	sub	sp, #36	; 0x24
2405a838:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
2405a83a:	4bb3      	ldr	r3, [pc, #716]	; (2405ab08 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405a83c:	691b      	ldr	r3, [r3, #16]
2405a83e:	f003 0338 	and.w	r3, r3, #56	; 0x38
2405a842:	2b18      	cmp	r3, #24
2405a844:	f200 8155 	bhi.w	2405aaf2 <HAL_RCC_GetSysClockFreq+0x2be>
2405a848:	a201      	add	r2, pc, #4	; (adr r2, 2405a850 <HAL_RCC_GetSysClockFreq+0x1c>)
2405a84a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2405a84e:	bf00      	nop
2405a850:	2405a8b5 	.word	0x2405a8b5
2405a854:	2405aaf3 	.word	0x2405aaf3
2405a858:	2405aaf3 	.word	0x2405aaf3
2405a85c:	2405aaf3 	.word	0x2405aaf3
2405a860:	2405aaf3 	.word	0x2405aaf3
2405a864:	2405aaf3 	.word	0x2405aaf3
2405a868:	2405aaf3 	.word	0x2405aaf3
2405a86c:	2405aaf3 	.word	0x2405aaf3
2405a870:	2405a8db 	.word	0x2405a8db
2405a874:	2405aaf3 	.word	0x2405aaf3
2405a878:	2405aaf3 	.word	0x2405aaf3
2405a87c:	2405aaf3 	.word	0x2405aaf3
2405a880:	2405aaf3 	.word	0x2405aaf3
2405a884:	2405aaf3 	.word	0x2405aaf3
2405a888:	2405aaf3 	.word	0x2405aaf3
2405a88c:	2405aaf3 	.word	0x2405aaf3
2405a890:	2405a8e1 	.word	0x2405a8e1
2405a894:	2405aaf3 	.word	0x2405aaf3
2405a898:	2405aaf3 	.word	0x2405aaf3
2405a89c:	2405aaf3 	.word	0x2405aaf3
2405a8a0:	2405aaf3 	.word	0x2405aaf3
2405a8a4:	2405aaf3 	.word	0x2405aaf3
2405a8a8:	2405aaf3 	.word	0x2405aaf3
2405a8ac:	2405aaf3 	.word	0x2405aaf3
2405a8b0:	2405a8e7 	.word	0x2405a8e7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2405a8b4:	4b94      	ldr	r3, [pc, #592]	; (2405ab08 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405a8b6:	681b      	ldr	r3, [r3, #0]
2405a8b8:	f003 0320 	and.w	r3, r3, #32
2405a8bc:	2b00      	cmp	r3, #0
2405a8be:	d009      	beq.n	2405a8d4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
2405a8c0:	4b91      	ldr	r3, [pc, #580]	; (2405ab08 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405a8c2:	681b      	ldr	r3, [r3, #0]
2405a8c4:	08db      	lsrs	r3, r3, #3
2405a8c6:	f003 0303 	and.w	r3, r3, #3
2405a8ca:	4a90      	ldr	r2, [pc, #576]	; (2405ab0c <HAL_RCC_GetSysClockFreq+0x2d8>)
2405a8cc:	fa22 f303 	lsr.w	r3, r2, r3
2405a8d0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
2405a8d2:	e111      	b.n	2405aaf8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
2405a8d4:	4b8d      	ldr	r3, [pc, #564]	; (2405ab0c <HAL_RCC_GetSysClockFreq+0x2d8>)
2405a8d6:	61bb      	str	r3, [r7, #24]
    break;
2405a8d8:	e10e      	b.n	2405aaf8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
2405a8da:	4b8d      	ldr	r3, [pc, #564]	; (2405ab10 <HAL_RCC_GetSysClockFreq+0x2dc>)
2405a8dc:	61bb      	str	r3, [r7, #24]
    break;
2405a8de:	e10b      	b.n	2405aaf8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
2405a8e0:	4b8c      	ldr	r3, [pc, #560]	; (2405ab14 <HAL_RCC_GetSysClockFreq+0x2e0>)
2405a8e2:	61bb      	str	r3, [r7, #24]
    break;
2405a8e4:	e108      	b.n	2405aaf8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2405a8e6:	4b88      	ldr	r3, [pc, #544]	; (2405ab08 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405a8e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405a8ea:	f003 0303 	and.w	r3, r3, #3
2405a8ee:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
2405a8f0:	4b85      	ldr	r3, [pc, #532]	; (2405ab08 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405a8f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405a8f4:	091b      	lsrs	r3, r3, #4
2405a8f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2405a8fa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
2405a8fc:	4b82      	ldr	r3, [pc, #520]	; (2405ab08 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405a8fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405a900:	f003 0301 	and.w	r3, r3, #1
2405a904:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
2405a906:	4b80      	ldr	r3, [pc, #512]	; (2405ab08 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405a908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2405a90a:	08db      	lsrs	r3, r3, #3
2405a90c:	f3c3 030c 	ubfx	r3, r3, #0, #13
2405a910:	68fa      	ldr	r2, [r7, #12]
2405a912:	fb02 f303 	mul.w	r3, r2, r3
2405a916:	ee07 3a90 	vmov	s15, r3
2405a91a:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405a91e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
2405a922:	693b      	ldr	r3, [r7, #16]
2405a924:	2b00      	cmp	r3, #0
2405a926:	f000 80e1 	beq.w	2405aaec <HAL_RCC_GetSysClockFreq+0x2b8>
2405a92a:	697b      	ldr	r3, [r7, #20]
2405a92c:	2b02      	cmp	r3, #2
2405a92e:	f000 8083 	beq.w	2405aa38 <HAL_RCC_GetSysClockFreq+0x204>
2405a932:	697b      	ldr	r3, [r7, #20]
2405a934:	2b02      	cmp	r3, #2
2405a936:	f200 80a1 	bhi.w	2405aa7c <HAL_RCC_GetSysClockFreq+0x248>
2405a93a:	697b      	ldr	r3, [r7, #20]
2405a93c:	2b00      	cmp	r3, #0
2405a93e:	d003      	beq.n	2405a948 <HAL_RCC_GetSysClockFreq+0x114>
2405a940:	697b      	ldr	r3, [r7, #20]
2405a942:	2b01      	cmp	r3, #1
2405a944:	d056      	beq.n	2405a9f4 <HAL_RCC_GetSysClockFreq+0x1c0>
2405a946:	e099      	b.n	2405aa7c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2405a948:	4b6f      	ldr	r3, [pc, #444]	; (2405ab08 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405a94a:	681b      	ldr	r3, [r3, #0]
2405a94c:	f003 0320 	and.w	r3, r3, #32
2405a950:	2b00      	cmp	r3, #0
2405a952:	d02d      	beq.n	2405a9b0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
2405a954:	4b6c      	ldr	r3, [pc, #432]	; (2405ab08 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405a956:	681b      	ldr	r3, [r3, #0]
2405a958:	08db      	lsrs	r3, r3, #3
2405a95a:	f003 0303 	and.w	r3, r3, #3
2405a95e:	4a6b      	ldr	r2, [pc, #428]	; (2405ab0c <HAL_RCC_GetSysClockFreq+0x2d8>)
2405a960:	fa22 f303 	lsr.w	r3, r2, r3
2405a964:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
2405a966:	687b      	ldr	r3, [r7, #4]
2405a968:	ee07 3a90 	vmov	s15, r3
2405a96c:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405a970:	693b      	ldr	r3, [r7, #16]
2405a972:	ee07 3a90 	vmov	s15, r3
2405a976:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405a97a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405a97e:	4b62      	ldr	r3, [pc, #392]	; (2405ab08 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405a980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405a982:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405a986:	ee07 3a90 	vmov	s15, r3
2405a98a:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405a98e:	ed97 6a02 	vldr	s12, [r7, #8]
2405a992:	eddf 5a61 	vldr	s11, [pc, #388]	; 2405ab18 <HAL_RCC_GetSysClockFreq+0x2e4>
2405a996:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405a99a:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405a99e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405a9a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405a9a6:	ee67 7a27 	vmul.f32	s15, s14, s15
2405a9aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
2405a9ae:	e087      	b.n	2405aac0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
2405a9b0:	693b      	ldr	r3, [r7, #16]
2405a9b2:	ee07 3a90 	vmov	s15, r3
2405a9b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405a9ba:	eddf 6a58 	vldr	s13, [pc, #352]	; 2405ab1c <HAL_RCC_GetSysClockFreq+0x2e8>
2405a9be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405a9c2:	4b51      	ldr	r3, [pc, #324]	; (2405ab08 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405a9c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405a9c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405a9ca:	ee07 3a90 	vmov	s15, r3
2405a9ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405a9d2:	ed97 6a02 	vldr	s12, [r7, #8]
2405a9d6:	eddf 5a50 	vldr	s11, [pc, #320]	; 2405ab18 <HAL_RCC_GetSysClockFreq+0x2e4>
2405a9da:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405a9de:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405a9e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405a9e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405a9ea:	ee67 7a27 	vmul.f32	s15, s14, s15
2405a9ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2405a9f2:	e065      	b.n	2405aac0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
2405a9f4:	693b      	ldr	r3, [r7, #16]
2405a9f6:	ee07 3a90 	vmov	s15, r3
2405a9fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405a9fe:	eddf 6a48 	vldr	s13, [pc, #288]	; 2405ab20 <HAL_RCC_GetSysClockFreq+0x2ec>
2405aa02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405aa06:	4b40      	ldr	r3, [pc, #256]	; (2405ab08 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405aa08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405aa0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405aa0e:	ee07 3a90 	vmov	s15, r3
2405aa12:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405aa16:	ed97 6a02 	vldr	s12, [r7, #8]
2405aa1a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 2405ab18 <HAL_RCC_GetSysClockFreq+0x2e4>
2405aa1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405aa22:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405aa26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405aa2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405aa2e:	ee67 7a27 	vmul.f32	s15, s14, s15
2405aa32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2405aa36:	e043      	b.n	2405aac0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
2405aa38:	693b      	ldr	r3, [r7, #16]
2405aa3a:	ee07 3a90 	vmov	s15, r3
2405aa3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405aa42:	eddf 6a38 	vldr	s13, [pc, #224]	; 2405ab24 <HAL_RCC_GetSysClockFreq+0x2f0>
2405aa46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405aa4a:	4b2f      	ldr	r3, [pc, #188]	; (2405ab08 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405aa4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405aa4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405aa52:	ee07 3a90 	vmov	s15, r3
2405aa56:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405aa5a:	ed97 6a02 	vldr	s12, [r7, #8]
2405aa5e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 2405ab18 <HAL_RCC_GetSysClockFreq+0x2e4>
2405aa62:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405aa66:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405aa6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405aa6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405aa72:	ee67 7a27 	vmul.f32	s15, s14, s15
2405aa76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2405aa7a:	e021      	b.n	2405aac0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
2405aa7c:	693b      	ldr	r3, [r7, #16]
2405aa7e:	ee07 3a90 	vmov	s15, r3
2405aa82:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405aa86:	eddf 6a26 	vldr	s13, [pc, #152]	; 2405ab20 <HAL_RCC_GetSysClockFreq+0x2ec>
2405aa8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405aa8e:	4b1e      	ldr	r3, [pc, #120]	; (2405ab08 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405aa90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405aa92:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405aa96:	ee07 3a90 	vmov	s15, r3
2405aa9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405aa9e:	ed97 6a02 	vldr	s12, [r7, #8]
2405aaa2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 2405ab18 <HAL_RCC_GetSysClockFreq+0x2e4>
2405aaa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405aaaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405aaae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405aab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405aab6:	ee67 7a27 	vmul.f32	s15, s14, s15
2405aaba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
2405aabe:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
2405aac0:	4b11      	ldr	r3, [pc, #68]	; (2405ab08 <HAL_RCC_GetSysClockFreq+0x2d4>)
2405aac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405aac4:	0a5b      	lsrs	r3, r3, #9
2405aac6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2405aaca:	3301      	adds	r3, #1
2405aacc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
2405aace:	683b      	ldr	r3, [r7, #0]
2405aad0:	ee07 3a90 	vmov	s15, r3
2405aad4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
2405aad8:	edd7 6a07 	vldr	s13, [r7, #28]
2405aadc:	eec6 7a87 	vdiv.f32	s15, s13, s14
2405aae0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2405aae4:	ee17 3a90 	vmov	r3, s15
2405aae8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
2405aaea:	e005      	b.n	2405aaf8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
2405aaec:	2300      	movs	r3, #0
2405aaee:	61bb      	str	r3, [r7, #24]
    break;
2405aaf0:	e002      	b.n	2405aaf8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
2405aaf2:	4b07      	ldr	r3, [pc, #28]	; (2405ab10 <HAL_RCC_GetSysClockFreq+0x2dc>)
2405aaf4:	61bb      	str	r3, [r7, #24]
    break;
2405aaf6:	bf00      	nop
  }

  return sysclockfreq;
2405aaf8:	69bb      	ldr	r3, [r7, #24]
}
2405aafa:	4618      	mov	r0, r3
2405aafc:	3724      	adds	r7, #36	; 0x24
2405aafe:	46bd      	mov	sp, r7
2405ab00:	f85d 7b04 	ldr.w	r7, [sp], #4
2405ab04:	4770      	bx	lr
2405ab06:	bf00      	nop
2405ab08:	58024400 	.word	0x58024400
2405ab0c:	03d09000 	.word	0x03d09000
2405ab10:	003d0900 	.word	0x003d0900
2405ab14:	016e3600 	.word	0x016e3600
2405ab18:	46000000 	.word	0x46000000
2405ab1c:	4c742400 	.word	0x4c742400
2405ab20:	4a742400 	.word	0x4a742400
2405ab24:	4bb71b00 	.word	0x4bb71b00

2405ab28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
2405ab28:	b580      	push	{r7, lr}
2405ab2a:	b082      	sub	sp, #8
2405ab2c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
2405ab2e:	f7ff fe81 	bl	2405a834 <HAL_RCC_GetSysClockFreq>
2405ab32:	4602      	mov	r2, r0
2405ab34:	4b10      	ldr	r3, [pc, #64]	; (2405ab78 <HAL_RCC_GetHCLKFreq+0x50>)
2405ab36:	699b      	ldr	r3, [r3, #24]
2405ab38:	0a1b      	lsrs	r3, r3, #8
2405ab3a:	f003 030f 	and.w	r3, r3, #15
2405ab3e:	490f      	ldr	r1, [pc, #60]	; (2405ab7c <HAL_RCC_GetHCLKFreq+0x54>)
2405ab40:	5ccb      	ldrb	r3, [r1, r3]
2405ab42:	f003 031f 	and.w	r3, r3, #31
2405ab46:	fa22 f303 	lsr.w	r3, r2, r3
2405ab4a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
2405ab4c:	4b0a      	ldr	r3, [pc, #40]	; (2405ab78 <HAL_RCC_GetHCLKFreq+0x50>)
2405ab4e:	699b      	ldr	r3, [r3, #24]
2405ab50:	f003 030f 	and.w	r3, r3, #15
2405ab54:	4a09      	ldr	r2, [pc, #36]	; (2405ab7c <HAL_RCC_GetHCLKFreq+0x54>)
2405ab56:	5cd3      	ldrb	r3, [r2, r3]
2405ab58:	f003 031f 	and.w	r3, r3, #31
2405ab5c:	687a      	ldr	r2, [r7, #4]
2405ab5e:	fa22 f303 	lsr.w	r3, r2, r3
2405ab62:	4a07      	ldr	r2, [pc, #28]	; (2405ab80 <HAL_RCC_GetHCLKFreq+0x58>)
2405ab64:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
2405ab66:	4a07      	ldr	r2, [pc, #28]	; (2405ab84 <HAL_RCC_GetHCLKFreq+0x5c>)
2405ab68:	687b      	ldr	r3, [r7, #4]
2405ab6a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
2405ab6c:	4b04      	ldr	r3, [pc, #16]	; (2405ab80 <HAL_RCC_GetHCLKFreq+0x58>)
2405ab6e:	681b      	ldr	r3, [r3, #0]
}
2405ab70:	4618      	mov	r0, r3
2405ab72:	3708      	adds	r7, #8
2405ab74:	46bd      	mov	sp, r7
2405ab76:	bd80      	pop	{r7, pc}
2405ab78:	58024400 	.word	0x58024400
2405ab7c:	24060f1c 	.word	0x24060f1c
2405ab80:	20000034 	.word	0x20000034
2405ab84:	20000030 	.word	0x20000030

2405ab88 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
2405ab88:	b580      	push	{r7, lr}
2405ab8a:	b086      	sub	sp, #24
2405ab8c:	af00      	add	r7, sp, #0
2405ab8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
2405ab90:	2300      	movs	r3, #0
2405ab92:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
2405ab94:	2300      	movs	r3, #0
2405ab96:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
2405ab98:	687b      	ldr	r3, [r7, #4]
2405ab9a:	681b      	ldr	r3, [r3, #0]
2405ab9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2405aba0:	2b00      	cmp	r3, #0
2405aba2:	d03f      	beq.n	2405ac24 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
2405aba4:	687b      	ldr	r3, [r7, #4]
2405aba6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2405aba8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
2405abac:	d02a      	beq.n	2405ac04 <HAL_RCCEx_PeriphCLKConfig+0x7c>
2405abae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
2405abb2:	d824      	bhi.n	2405abfe <HAL_RCCEx_PeriphCLKConfig+0x76>
2405abb4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
2405abb8:	d018      	beq.n	2405abec <HAL_RCCEx_PeriphCLKConfig+0x64>
2405abba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
2405abbe:	d81e      	bhi.n	2405abfe <HAL_RCCEx_PeriphCLKConfig+0x76>
2405abc0:	2b00      	cmp	r3, #0
2405abc2:	d003      	beq.n	2405abcc <HAL_RCCEx_PeriphCLKConfig+0x44>
2405abc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
2405abc8:	d007      	beq.n	2405abda <HAL_RCCEx_PeriphCLKConfig+0x52>
2405abca:	e018      	b.n	2405abfe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405abcc:	4ba6      	ldr	r3, [pc, #664]	; (2405ae68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
2405abce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405abd0:	4aa5      	ldr	r2, [pc, #660]	; (2405ae68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
2405abd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2405abd6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
2405abd8:	e015      	b.n	2405ac06 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
2405abda:	687b      	ldr	r3, [r7, #4]
2405abdc:	3304      	adds	r3, #4
2405abde:	2102      	movs	r1, #2
2405abe0:	4618      	mov	r0, r3
2405abe2:	f001 ff17 	bl	2405ca14 <RCCEx_PLL2_Config>
2405abe6:	4603      	mov	r3, r0
2405abe8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
2405abea:	e00c      	b.n	2405ac06 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
2405abec:	687b      	ldr	r3, [r7, #4]
2405abee:	3324      	adds	r3, #36	; 0x24
2405abf0:	2102      	movs	r1, #2
2405abf2:	4618      	mov	r0, r3
2405abf4:	f001 ffc0 	bl	2405cb78 <RCCEx_PLL3_Config>
2405abf8:	4603      	mov	r3, r0
2405abfa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
2405abfc:	e003      	b.n	2405ac06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
2405abfe:	2301      	movs	r3, #1
2405ac00:	75fb      	strb	r3, [r7, #23]
      break;
2405ac02:	e000      	b.n	2405ac06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
2405ac04:	bf00      	nop
    }

    if(ret == HAL_OK)
2405ac06:	7dfb      	ldrb	r3, [r7, #23]
2405ac08:	2b00      	cmp	r3, #0
2405ac0a:	d109      	bne.n	2405ac20 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
2405ac0c:	4b96      	ldr	r3, [pc, #600]	; (2405ae68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
2405ac0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405ac10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
2405ac14:	687b      	ldr	r3, [r7, #4]
2405ac16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2405ac18:	4993      	ldr	r1, [pc, #588]	; (2405ae68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
2405ac1a:	4313      	orrs	r3, r2
2405ac1c:	650b      	str	r3, [r1, #80]	; 0x50
2405ac1e:	e001      	b.n	2405ac24 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405ac20:	7dfb      	ldrb	r3, [r7, #23]
2405ac22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
2405ac24:	687b      	ldr	r3, [r7, #4]
2405ac26:	681b      	ldr	r3, [r3, #0]
2405ac28:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405ac2c:	2b00      	cmp	r3, #0
2405ac2e:	d03d      	beq.n	2405acac <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
2405ac30:	687b      	ldr	r3, [r7, #4]
2405ac32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405ac34:	2b04      	cmp	r3, #4
2405ac36:	d826      	bhi.n	2405ac86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
2405ac38:	a201      	add	r2, pc, #4	; (adr r2, 2405ac40 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
2405ac3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2405ac3e:	bf00      	nop
2405ac40:	2405ac55 	.word	0x2405ac55
2405ac44:	2405ac63 	.word	0x2405ac63
2405ac48:	2405ac75 	.word	0x2405ac75
2405ac4c:	2405ac8d 	.word	0x2405ac8d
2405ac50:	2405ac8d 	.word	0x2405ac8d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405ac54:	4b84      	ldr	r3, [pc, #528]	; (2405ae68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
2405ac56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405ac58:	4a83      	ldr	r2, [pc, #524]	; (2405ae68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
2405ac5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2405ac5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
2405ac60:	e015      	b.n	2405ac8e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
2405ac62:	687b      	ldr	r3, [r7, #4]
2405ac64:	3304      	adds	r3, #4
2405ac66:	2100      	movs	r1, #0
2405ac68:	4618      	mov	r0, r3
2405ac6a:	f001 fed3 	bl	2405ca14 <RCCEx_PLL2_Config>
2405ac6e:	4603      	mov	r3, r0
2405ac70:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
2405ac72:	e00c      	b.n	2405ac8e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
2405ac74:	687b      	ldr	r3, [r7, #4]
2405ac76:	3324      	adds	r3, #36	; 0x24
2405ac78:	2100      	movs	r1, #0
2405ac7a:	4618      	mov	r0, r3
2405ac7c:	f001 ff7c 	bl	2405cb78 <RCCEx_PLL3_Config>
2405ac80:	4603      	mov	r3, r0
2405ac82:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
2405ac84:	e003      	b.n	2405ac8e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
2405ac86:	2301      	movs	r3, #1
2405ac88:	75fb      	strb	r3, [r7, #23]
      break;
2405ac8a:	e000      	b.n	2405ac8e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
2405ac8c:	bf00      	nop
    }

    if(ret == HAL_OK)
2405ac8e:	7dfb      	ldrb	r3, [r7, #23]
2405ac90:	2b00      	cmp	r3, #0
2405ac92:	d109      	bne.n	2405aca8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
2405ac94:	4b74      	ldr	r3, [pc, #464]	; (2405ae68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
2405ac96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405ac98:	f023 0207 	bic.w	r2, r3, #7
2405ac9c:	687b      	ldr	r3, [r7, #4]
2405ac9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405aca0:	4971      	ldr	r1, [pc, #452]	; (2405ae68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
2405aca2:	4313      	orrs	r3, r2
2405aca4:	650b      	str	r3, [r1, #80]	; 0x50
2405aca6:	e001      	b.n	2405acac <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405aca8:	7dfb      	ldrb	r3, [r7, #23]
2405acaa:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
2405acac:	687b      	ldr	r3, [r7, #4]
2405acae:	681b      	ldr	r3, [r3, #0]
2405acb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
2405acb4:	2b00      	cmp	r3, #0
2405acb6:	d04a      	beq.n	2405ad4e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
2405acb8:	687b      	ldr	r3, [r7, #4]
2405acba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405acbc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
2405acc0:	d031      	beq.n	2405ad26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
2405acc2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
2405acc6:	d82b      	bhi.n	2405ad20 <HAL_RCCEx_PeriphCLKConfig+0x198>
2405acc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405accc:	d02d      	beq.n	2405ad2a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
2405acce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405acd2:	d825      	bhi.n	2405ad20 <HAL_RCCEx_PeriphCLKConfig+0x198>
2405acd4:	2bc0      	cmp	r3, #192	; 0xc0
2405acd6:	d02a      	beq.n	2405ad2e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
2405acd8:	2bc0      	cmp	r3, #192	; 0xc0
2405acda:	d821      	bhi.n	2405ad20 <HAL_RCCEx_PeriphCLKConfig+0x198>
2405acdc:	2b80      	cmp	r3, #128	; 0x80
2405acde:	d016      	beq.n	2405ad0e <HAL_RCCEx_PeriphCLKConfig+0x186>
2405ace0:	2b80      	cmp	r3, #128	; 0x80
2405ace2:	d81d      	bhi.n	2405ad20 <HAL_RCCEx_PeriphCLKConfig+0x198>
2405ace4:	2b00      	cmp	r3, #0
2405ace6:	d002      	beq.n	2405acee <HAL_RCCEx_PeriphCLKConfig+0x166>
2405ace8:	2b40      	cmp	r3, #64	; 0x40
2405acea:	d007      	beq.n	2405acfc <HAL_RCCEx_PeriphCLKConfig+0x174>
2405acec:	e018      	b.n	2405ad20 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405acee:	4b5e      	ldr	r3, [pc, #376]	; (2405ae68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
2405acf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405acf2:	4a5d      	ldr	r2, [pc, #372]	; (2405ae68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
2405acf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2405acf8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
2405acfa:	e019      	b.n	2405ad30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
2405acfc:	687b      	ldr	r3, [r7, #4]
2405acfe:	3304      	adds	r3, #4
2405ad00:	2100      	movs	r1, #0
2405ad02:	4618      	mov	r0, r3
2405ad04:	f001 fe86 	bl	2405ca14 <RCCEx_PLL2_Config>
2405ad08:	4603      	mov	r3, r0
2405ad0a:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
2405ad0c:	e010      	b.n	2405ad30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
2405ad0e:	687b      	ldr	r3, [r7, #4]
2405ad10:	3324      	adds	r3, #36	; 0x24
2405ad12:	2100      	movs	r1, #0
2405ad14:	4618      	mov	r0, r3
2405ad16:	f001 ff2f 	bl	2405cb78 <RCCEx_PLL3_Config>
2405ad1a:	4603      	mov	r3, r0
2405ad1c:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
2405ad1e:	e007      	b.n	2405ad30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
2405ad20:	2301      	movs	r3, #1
2405ad22:	75fb      	strb	r3, [r7, #23]
      break;
2405ad24:	e004      	b.n	2405ad30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
2405ad26:	bf00      	nop
2405ad28:	e002      	b.n	2405ad30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
2405ad2a:	bf00      	nop
2405ad2c:	e000      	b.n	2405ad30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
2405ad2e:	bf00      	nop
    }

    if(ret == HAL_OK)
2405ad30:	7dfb      	ldrb	r3, [r7, #23]
2405ad32:	2b00      	cmp	r3, #0
2405ad34:	d109      	bne.n	2405ad4a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
2405ad36:	4b4c      	ldr	r3, [pc, #304]	; (2405ae68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
2405ad38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405ad3a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
2405ad3e:	687b      	ldr	r3, [r7, #4]
2405ad40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405ad42:	4949      	ldr	r1, [pc, #292]	; (2405ae68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
2405ad44:	4313      	orrs	r3, r2
2405ad46:	650b      	str	r3, [r1, #80]	; 0x50
2405ad48:	e001      	b.n	2405ad4e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405ad4a:	7dfb      	ldrb	r3, [r7, #23]
2405ad4c:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
2405ad4e:	687b      	ldr	r3, [r7, #4]
2405ad50:	681b      	ldr	r3, [r3, #0]
2405ad52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
2405ad56:	2b00      	cmp	r3, #0
2405ad58:	d04f      	beq.n	2405adfa <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
2405ad5a:	687b      	ldr	r3, [r7, #4]
2405ad5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2405ad5e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
2405ad62:	d036      	beq.n	2405add2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
2405ad64:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
2405ad68:	d830      	bhi.n	2405adcc <HAL_RCCEx_PeriphCLKConfig+0x244>
2405ad6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
2405ad6e:	d032      	beq.n	2405add6 <HAL_RCCEx_PeriphCLKConfig+0x24e>
2405ad70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
2405ad74:	d82a      	bhi.n	2405adcc <HAL_RCCEx_PeriphCLKConfig+0x244>
2405ad76:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
2405ad7a:	d02e      	beq.n	2405adda <HAL_RCCEx_PeriphCLKConfig+0x252>
2405ad7c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
2405ad80:	d824      	bhi.n	2405adcc <HAL_RCCEx_PeriphCLKConfig+0x244>
2405ad82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
2405ad86:	d018      	beq.n	2405adba <HAL_RCCEx_PeriphCLKConfig+0x232>
2405ad88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
2405ad8c:	d81e      	bhi.n	2405adcc <HAL_RCCEx_PeriphCLKConfig+0x244>
2405ad8e:	2b00      	cmp	r3, #0
2405ad90:	d003      	beq.n	2405ad9a <HAL_RCCEx_PeriphCLKConfig+0x212>
2405ad92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
2405ad96:	d007      	beq.n	2405ada8 <HAL_RCCEx_PeriphCLKConfig+0x220>
2405ad98:	e018      	b.n	2405adcc <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405ad9a:	4b33      	ldr	r3, [pc, #204]	; (2405ae68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
2405ad9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405ad9e:	4a32      	ldr	r2, [pc, #200]	; (2405ae68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
2405ada0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2405ada4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
2405ada6:	e019      	b.n	2405addc <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
2405ada8:	687b      	ldr	r3, [r7, #4]
2405adaa:	3304      	adds	r3, #4
2405adac:	2100      	movs	r1, #0
2405adae:	4618      	mov	r0, r3
2405adb0:	f001 fe30 	bl	2405ca14 <RCCEx_PLL2_Config>
2405adb4:	4603      	mov	r3, r0
2405adb6:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
2405adb8:	e010      	b.n	2405addc <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
2405adba:	687b      	ldr	r3, [r7, #4]
2405adbc:	3324      	adds	r3, #36	; 0x24
2405adbe:	2100      	movs	r1, #0
2405adc0:	4618      	mov	r0, r3
2405adc2:	f001 fed9 	bl	2405cb78 <RCCEx_PLL3_Config>
2405adc6:	4603      	mov	r3, r0
2405adc8:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
2405adca:	e007      	b.n	2405addc <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
2405adcc:	2301      	movs	r3, #1
2405adce:	75fb      	strb	r3, [r7, #23]
      break;
2405add0:	e004      	b.n	2405addc <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
2405add2:	bf00      	nop
2405add4:	e002      	b.n	2405addc <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
2405add6:	bf00      	nop
2405add8:	e000      	b.n	2405addc <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
2405adda:	bf00      	nop
    }

    if(ret == HAL_OK)
2405addc:	7dfb      	ldrb	r3, [r7, #23]
2405adde:	2b00      	cmp	r3, #0
2405ade0:	d109      	bne.n	2405adf6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
2405ade2:	4b21      	ldr	r3, [pc, #132]	; (2405ae68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
2405ade4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405ade6:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
2405adea:	687b      	ldr	r3, [r7, #4]
2405adec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2405adee:	491e      	ldr	r1, [pc, #120]	; (2405ae68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
2405adf0:	4313      	orrs	r3, r2
2405adf2:	650b      	str	r3, [r1, #80]	; 0x50
2405adf4:	e001      	b.n	2405adfa <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405adf6:	7dfb      	ldrb	r3, [r7, #23]
2405adf8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
2405adfa:	687b      	ldr	r3, [r7, #4]
2405adfc:	681b      	ldr	r3, [r3, #0]
2405adfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2405ae02:	2b00      	cmp	r3, #0
2405ae04:	d034      	beq.n	2405ae70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
2405ae06:	687b      	ldr	r3, [r7, #4]
2405ae08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2405ae0a:	2b30      	cmp	r3, #48	; 0x30
2405ae0c:	d01c      	beq.n	2405ae48 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
2405ae0e:	2b30      	cmp	r3, #48	; 0x30
2405ae10:	d817      	bhi.n	2405ae42 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
2405ae12:	2b20      	cmp	r3, #32
2405ae14:	d00c      	beq.n	2405ae30 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
2405ae16:	2b20      	cmp	r3, #32
2405ae18:	d813      	bhi.n	2405ae42 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
2405ae1a:	2b00      	cmp	r3, #0
2405ae1c:	d016      	beq.n	2405ae4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
2405ae1e:	2b10      	cmp	r3, #16
2405ae20:	d10f      	bne.n	2405ae42 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405ae22:	4b11      	ldr	r3, [pc, #68]	; (2405ae68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
2405ae24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405ae26:	4a10      	ldr	r2, [pc, #64]	; (2405ae68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
2405ae28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2405ae2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
2405ae2e:	e00e      	b.n	2405ae4e <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
2405ae30:	687b      	ldr	r3, [r7, #4]
2405ae32:	3304      	adds	r3, #4
2405ae34:	2102      	movs	r1, #2
2405ae36:	4618      	mov	r0, r3
2405ae38:	f001 fdec 	bl	2405ca14 <RCCEx_PLL2_Config>
2405ae3c:	4603      	mov	r3, r0
2405ae3e:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
2405ae40:	e005      	b.n	2405ae4e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
2405ae42:	2301      	movs	r3, #1
2405ae44:	75fb      	strb	r3, [r7, #23]
      break;
2405ae46:	e002      	b.n	2405ae4e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
2405ae48:	bf00      	nop
2405ae4a:	e000      	b.n	2405ae4e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
2405ae4c:	bf00      	nop
    }

    if(ret == HAL_OK)
2405ae4e:	7dfb      	ldrb	r3, [r7, #23]
2405ae50:	2b00      	cmp	r3, #0
2405ae52:	d10b      	bne.n	2405ae6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
2405ae54:	4b04      	ldr	r3, [pc, #16]	; (2405ae68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
2405ae56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405ae58:	f023 0230 	bic.w	r2, r3, #48	; 0x30
2405ae5c:	687b      	ldr	r3, [r7, #4]
2405ae5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2405ae60:	4901      	ldr	r1, [pc, #4]	; (2405ae68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
2405ae62:	4313      	orrs	r3, r2
2405ae64:	64cb      	str	r3, [r1, #76]	; 0x4c
2405ae66:	e003      	b.n	2405ae70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
2405ae68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
2405ae6c:	7dfb      	ldrb	r3, [r7, #23]
2405ae6e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
2405ae70:	687b      	ldr	r3, [r7, #4]
2405ae72:	681b      	ldr	r3, [r3, #0]
2405ae74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
2405ae78:	2b00      	cmp	r3, #0
2405ae7a:	d047      	beq.n	2405af0c <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
2405ae7c:	687b      	ldr	r3, [r7, #4]
2405ae7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2405ae80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2405ae84:	d030      	beq.n	2405aee8 <HAL_RCCEx_PeriphCLKConfig+0x360>
2405ae86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2405ae8a:	d82a      	bhi.n	2405aee2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
2405ae8c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
2405ae90:	d02c      	beq.n	2405aeec <HAL_RCCEx_PeriphCLKConfig+0x364>
2405ae92:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
2405ae96:	d824      	bhi.n	2405aee2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
2405ae98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2405ae9c:	d018      	beq.n	2405aed0 <HAL_RCCEx_PeriphCLKConfig+0x348>
2405ae9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2405aea2:	d81e      	bhi.n	2405aee2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
2405aea4:	2b00      	cmp	r3, #0
2405aea6:	d003      	beq.n	2405aeb0 <HAL_RCCEx_PeriphCLKConfig+0x328>
2405aea8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
2405aeac:	d007      	beq.n	2405aebe <HAL_RCCEx_PeriphCLKConfig+0x336>
2405aeae:	e018      	b.n	2405aee2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405aeb0:	4bb0      	ldr	r3, [pc, #704]	; (2405b174 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
2405aeb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405aeb4:	4aaf      	ldr	r2, [pc, #700]	; (2405b174 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
2405aeb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2405aeba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
2405aebc:	e017      	b.n	2405aeee <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
2405aebe:	687b      	ldr	r3, [r7, #4]
2405aec0:	3304      	adds	r3, #4
2405aec2:	2100      	movs	r1, #0
2405aec4:	4618      	mov	r0, r3
2405aec6:	f001 fda5 	bl	2405ca14 <RCCEx_PLL2_Config>
2405aeca:	4603      	mov	r3, r0
2405aecc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
2405aece:	e00e      	b.n	2405aeee <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
2405aed0:	687b      	ldr	r3, [r7, #4]
2405aed2:	3324      	adds	r3, #36	; 0x24
2405aed4:	2100      	movs	r1, #0
2405aed6:	4618      	mov	r0, r3
2405aed8:	f001 fe4e 	bl	2405cb78 <RCCEx_PLL3_Config>
2405aedc:	4603      	mov	r3, r0
2405aede:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
2405aee0:	e005      	b.n	2405aeee <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
2405aee2:	2301      	movs	r3, #1
2405aee4:	75fb      	strb	r3, [r7, #23]
      break;
2405aee6:	e002      	b.n	2405aeee <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
2405aee8:	bf00      	nop
2405aeea:	e000      	b.n	2405aeee <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
2405aeec:	bf00      	nop
    }

    if(ret == HAL_OK)
2405aeee:	7dfb      	ldrb	r3, [r7, #23]
2405aef0:	2b00      	cmp	r3, #0
2405aef2:	d109      	bne.n	2405af08 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
2405aef4:	4b9f      	ldr	r3, [pc, #636]	; (2405b174 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
2405aef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405aef8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
2405aefc:	687b      	ldr	r3, [r7, #4]
2405aefe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2405af00:	499c      	ldr	r1, [pc, #624]	; (2405b174 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
2405af02:	4313      	orrs	r3, r2
2405af04:	650b      	str	r3, [r1, #80]	; 0x50
2405af06:	e001      	b.n	2405af0c <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405af08:	7dfb      	ldrb	r3, [r7, #23]
2405af0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
2405af0c:	687b      	ldr	r3, [r7, #4]
2405af0e:	681b      	ldr	r3, [r3, #0]
2405af10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
2405af14:	2b00      	cmp	r3, #0
2405af16:	d049      	beq.n	2405afac <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
2405af18:	687b      	ldr	r3, [r7, #4]
2405af1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
2405af1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
2405af20:	d02e      	beq.n	2405af80 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
2405af22:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
2405af26:	d828      	bhi.n	2405af7a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
2405af28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
2405af2c:	d02a      	beq.n	2405af84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
2405af2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
2405af32:	d822      	bhi.n	2405af7a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
2405af34:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
2405af38:	d026      	beq.n	2405af88 <HAL_RCCEx_PeriphCLKConfig+0x400>
2405af3a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
2405af3e:	d81c      	bhi.n	2405af7a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
2405af40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405af44:	d010      	beq.n	2405af68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
2405af46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405af4a:	d816      	bhi.n	2405af7a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
2405af4c:	2b00      	cmp	r3, #0
2405af4e:	d01d      	beq.n	2405af8c <HAL_RCCEx_PeriphCLKConfig+0x404>
2405af50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2405af54:	d111      	bne.n	2405af7a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
2405af56:	687b      	ldr	r3, [r7, #4]
2405af58:	3304      	adds	r3, #4
2405af5a:	2101      	movs	r1, #1
2405af5c:	4618      	mov	r0, r3
2405af5e:	f001 fd59 	bl	2405ca14 <RCCEx_PLL2_Config>
2405af62:	4603      	mov	r3, r0
2405af64:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
2405af66:	e012      	b.n	2405af8e <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
2405af68:	687b      	ldr	r3, [r7, #4]
2405af6a:	3324      	adds	r3, #36	; 0x24
2405af6c:	2101      	movs	r1, #1
2405af6e:	4618      	mov	r0, r3
2405af70:	f001 fe02 	bl	2405cb78 <RCCEx_PLL3_Config>
2405af74:	4603      	mov	r3, r0
2405af76:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
2405af78:	e009      	b.n	2405af8e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
2405af7a:	2301      	movs	r3, #1
2405af7c:	75fb      	strb	r3, [r7, #23]
      break;
2405af7e:	e006      	b.n	2405af8e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
2405af80:	bf00      	nop
2405af82:	e004      	b.n	2405af8e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
2405af84:	bf00      	nop
2405af86:	e002      	b.n	2405af8e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
2405af88:	bf00      	nop
2405af8a:	e000      	b.n	2405af8e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
2405af8c:	bf00      	nop
    }

    if(ret == HAL_OK)
2405af8e:	7dfb      	ldrb	r3, [r7, #23]
2405af90:	2b00      	cmp	r3, #0
2405af92:	d109      	bne.n	2405afa8 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
2405af94:	4b77      	ldr	r3, [pc, #476]	; (2405b174 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
2405af96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405af98:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
2405af9c:	687b      	ldr	r3, [r7, #4]
2405af9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
2405afa0:	4974      	ldr	r1, [pc, #464]	; (2405b174 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
2405afa2:	4313      	orrs	r3, r2
2405afa4:	650b      	str	r3, [r1, #80]	; 0x50
2405afa6:	e001      	b.n	2405afac <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405afa8:	7dfb      	ldrb	r3, [r7, #23]
2405afaa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
2405afac:	687b      	ldr	r3, [r7, #4]
2405afae:	681b      	ldr	r3, [r3, #0]
2405afb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2405afb4:	2b00      	cmp	r3, #0
2405afb6:	d053      	beq.n	2405b060 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
2405afb8:	687b      	ldr	r3, [r7, #4]
2405afba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
2405afbe:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
2405afc2:	d034      	beq.n	2405b02e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
2405afc4:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
2405afc8:	d82e      	bhi.n	2405b028 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
2405afca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
2405afce:	d030      	beq.n	2405b032 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
2405afd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
2405afd4:	d828      	bhi.n	2405b028 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
2405afd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2405afda:	d02c      	beq.n	2405b036 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
2405afdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2405afe0:	d822      	bhi.n	2405b028 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
2405afe2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
2405afe6:	d028      	beq.n	2405b03a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
2405afe8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
2405afec:	d81c      	bhi.n	2405b028 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
2405afee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405aff2:	d010      	beq.n	2405b016 <HAL_RCCEx_PeriphCLKConfig+0x48e>
2405aff4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405aff8:	d816      	bhi.n	2405b028 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
2405affa:	2b00      	cmp	r3, #0
2405affc:	d01f      	beq.n	2405b03e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
2405affe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2405b002:	d111      	bne.n	2405b028 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
2405b004:	687b      	ldr	r3, [r7, #4]
2405b006:	3304      	adds	r3, #4
2405b008:	2101      	movs	r1, #1
2405b00a:	4618      	mov	r0, r3
2405b00c:	f001 fd02 	bl	2405ca14 <RCCEx_PLL2_Config>
2405b010:	4603      	mov	r3, r0
2405b012:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
2405b014:	e014      	b.n	2405b040 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
2405b016:	687b      	ldr	r3, [r7, #4]
2405b018:	3324      	adds	r3, #36	; 0x24
2405b01a:	2101      	movs	r1, #1
2405b01c:	4618      	mov	r0, r3
2405b01e:	f001 fdab 	bl	2405cb78 <RCCEx_PLL3_Config>
2405b022:	4603      	mov	r3, r0
2405b024:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
2405b026:	e00b      	b.n	2405b040 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
2405b028:	2301      	movs	r3, #1
2405b02a:	75fb      	strb	r3, [r7, #23]
      break;
2405b02c:	e008      	b.n	2405b040 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
2405b02e:	bf00      	nop
2405b030:	e006      	b.n	2405b040 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
2405b032:	bf00      	nop
2405b034:	e004      	b.n	2405b040 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
2405b036:	bf00      	nop
2405b038:	e002      	b.n	2405b040 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
2405b03a:	bf00      	nop
2405b03c:	e000      	b.n	2405b040 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
2405b03e:	bf00      	nop
    }

    if(ret == HAL_OK)
2405b040:	7dfb      	ldrb	r3, [r7, #23]
2405b042:	2b00      	cmp	r3, #0
2405b044:	d10a      	bne.n	2405b05c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
2405b046:	4b4b      	ldr	r3, [pc, #300]	; (2405b174 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
2405b048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405b04a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
2405b04e:	687b      	ldr	r3, [r7, #4]
2405b050:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
2405b054:	4947      	ldr	r1, [pc, #284]	; (2405b174 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
2405b056:	4313      	orrs	r3, r2
2405b058:	658b      	str	r3, [r1, #88]	; 0x58
2405b05a:	e001      	b.n	2405b060 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405b05c:	7dfb      	ldrb	r3, [r7, #23]
2405b05e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
2405b060:	687b      	ldr	r3, [r7, #4]
2405b062:	681b      	ldr	r3, [r3, #0]
2405b064:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
2405b068:	2b00      	cmp	r3, #0
2405b06a:	d02f      	beq.n	2405b0cc <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
2405b06c:	687b      	ldr	r3, [r7, #4]
2405b06e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2405b070:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405b074:	d00e      	beq.n	2405b094 <HAL_RCCEx_PeriphCLKConfig+0x50c>
2405b076:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405b07a:	d814      	bhi.n	2405b0a6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
2405b07c:	2b00      	cmp	r3, #0
2405b07e:	d015      	beq.n	2405b0ac <HAL_RCCEx_PeriphCLKConfig+0x524>
2405b080:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2405b084:	d10f      	bne.n	2405b0a6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405b086:	4b3b      	ldr	r3, [pc, #236]	; (2405b174 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
2405b088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405b08a:	4a3a      	ldr	r2, [pc, #232]	; (2405b174 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
2405b08c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2405b090:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
2405b092:	e00c      	b.n	2405b0ae <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
2405b094:	687b      	ldr	r3, [r7, #4]
2405b096:	3304      	adds	r3, #4
2405b098:	2101      	movs	r1, #1
2405b09a:	4618      	mov	r0, r3
2405b09c:	f001 fcba 	bl	2405ca14 <RCCEx_PLL2_Config>
2405b0a0:	4603      	mov	r3, r0
2405b0a2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
2405b0a4:	e003      	b.n	2405b0ae <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
2405b0a6:	2301      	movs	r3, #1
2405b0a8:	75fb      	strb	r3, [r7, #23]
      break;
2405b0aa:	e000      	b.n	2405b0ae <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
2405b0ac:	bf00      	nop
    }

    if(ret == HAL_OK)
2405b0ae:	7dfb      	ldrb	r3, [r7, #23]
2405b0b0:	2b00      	cmp	r3, #0
2405b0b2:	d109      	bne.n	2405b0c8 <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
2405b0b4:	4b2f      	ldr	r3, [pc, #188]	; (2405b174 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
2405b0b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405b0b8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
2405b0bc:	687b      	ldr	r3, [r7, #4]
2405b0be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2405b0c0:	492c      	ldr	r1, [pc, #176]	; (2405b174 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
2405b0c2:	4313      	orrs	r3, r2
2405b0c4:	650b      	str	r3, [r1, #80]	; 0x50
2405b0c6:	e001      	b.n	2405b0cc <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405b0c8:	7dfb      	ldrb	r3, [r7, #23]
2405b0ca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
2405b0cc:	687b      	ldr	r3, [r7, #4]
2405b0ce:	681b      	ldr	r3, [r3, #0]
2405b0d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
2405b0d4:	2b00      	cmp	r3, #0
2405b0d6:	d032      	beq.n	2405b13e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
2405b0d8:	687b      	ldr	r3, [r7, #4]
2405b0da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2405b0dc:	2b03      	cmp	r3, #3
2405b0de:	d81b      	bhi.n	2405b118 <HAL_RCCEx_PeriphCLKConfig+0x590>
2405b0e0:	a201      	add	r2, pc, #4	; (adr r2, 2405b0e8 <HAL_RCCEx_PeriphCLKConfig+0x560>)
2405b0e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2405b0e6:	bf00      	nop
2405b0e8:	2405b11f 	.word	0x2405b11f
2405b0ec:	2405b0f9 	.word	0x2405b0f9
2405b0f0:	2405b107 	.word	0x2405b107
2405b0f4:	2405b11f 	.word	0x2405b11f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405b0f8:	4b1e      	ldr	r3, [pc, #120]	; (2405b174 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
2405b0fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405b0fc:	4a1d      	ldr	r2, [pc, #116]	; (2405b174 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
2405b0fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2405b102:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
2405b104:	e00c      	b.n	2405b120 <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
2405b106:	687b      	ldr	r3, [r7, #4]
2405b108:	3304      	adds	r3, #4
2405b10a:	2102      	movs	r1, #2
2405b10c:	4618      	mov	r0, r3
2405b10e:	f001 fc81 	bl	2405ca14 <RCCEx_PLL2_Config>
2405b112:	4603      	mov	r3, r0
2405b114:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
2405b116:	e003      	b.n	2405b120 <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
2405b118:	2301      	movs	r3, #1
2405b11a:	75fb      	strb	r3, [r7, #23]
      break;
2405b11c:	e000      	b.n	2405b120 <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
2405b11e:	bf00      	nop
    }

    if(ret == HAL_OK)
2405b120:	7dfb      	ldrb	r3, [r7, #23]
2405b122:	2b00      	cmp	r3, #0
2405b124:	d109      	bne.n	2405b13a <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
2405b126:	4b13      	ldr	r3, [pc, #76]	; (2405b174 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
2405b128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405b12a:	f023 0203 	bic.w	r2, r3, #3
2405b12e:	687b      	ldr	r3, [r7, #4]
2405b130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2405b132:	4910      	ldr	r1, [pc, #64]	; (2405b174 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
2405b134:	4313      	orrs	r3, r2
2405b136:	64cb      	str	r3, [r1, #76]	; 0x4c
2405b138:	e001      	b.n	2405b13e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405b13a:	7dfb      	ldrb	r3, [r7, #23]
2405b13c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
2405b13e:	687b      	ldr	r3, [r7, #4]
2405b140:	681b      	ldr	r3, [r3, #0]
2405b142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2405b146:	2b00      	cmp	r3, #0
2405b148:	f000 808a 	beq.w	2405b260 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
2405b14c:	4b0a      	ldr	r3, [pc, #40]	; (2405b178 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
2405b14e:	681b      	ldr	r3, [r3, #0]
2405b150:	4a09      	ldr	r2, [pc, #36]	; (2405b178 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
2405b152:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2405b156:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
2405b158:	f7f7 fde4 	bl	24052d24 <HAL_GetTick>
2405b15c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
2405b15e:	e00d      	b.n	2405b17c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
2405b160:	f7f7 fde0 	bl	24052d24 <HAL_GetTick>
2405b164:	4602      	mov	r2, r0
2405b166:	693b      	ldr	r3, [r7, #16]
2405b168:	1ad3      	subs	r3, r2, r3
2405b16a:	2b64      	cmp	r3, #100	; 0x64
2405b16c:	d906      	bls.n	2405b17c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
2405b16e:	2303      	movs	r3, #3
2405b170:	75fb      	strb	r3, [r7, #23]
        break;
2405b172:	e009      	b.n	2405b188 <HAL_RCCEx_PeriphCLKConfig+0x600>
2405b174:	58024400 	.word	0x58024400
2405b178:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
2405b17c:	4bba      	ldr	r3, [pc, #744]	; (2405b468 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
2405b17e:	681b      	ldr	r3, [r3, #0]
2405b180:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405b184:	2b00      	cmp	r3, #0
2405b186:	d0eb      	beq.n	2405b160 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
2405b188:	7dfb      	ldrb	r3, [r7, #23]
2405b18a:	2b00      	cmp	r3, #0
2405b18c:	d166      	bne.n	2405b25c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
2405b18e:	4bb7      	ldr	r3, [pc, #732]	; (2405b46c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
2405b190:	6f1a      	ldr	r2, [r3, #112]	; 0x70
2405b192:	687b      	ldr	r3, [r7, #4]
2405b194:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
2405b198:	4053      	eors	r3, r2
2405b19a:	f403 7340 	and.w	r3, r3, #768	; 0x300
2405b19e:	2b00      	cmp	r3, #0
2405b1a0:	d013      	beq.n	2405b1ca <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
2405b1a2:	4bb2      	ldr	r3, [pc, #712]	; (2405b46c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
2405b1a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405b1a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
2405b1aa:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
2405b1ac:	4baf      	ldr	r3, [pc, #700]	; (2405b46c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
2405b1ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405b1b0:	4aae      	ldr	r2, [pc, #696]	; (2405b46c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
2405b1b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2405b1b6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
2405b1b8:	4bac      	ldr	r3, [pc, #688]	; (2405b46c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
2405b1ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405b1bc:	4aab      	ldr	r2, [pc, #684]	; (2405b46c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
2405b1be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2405b1c2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
2405b1c4:	4aa9      	ldr	r2, [pc, #676]	; (2405b46c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
2405b1c6:	68fb      	ldr	r3, [r7, #12]
2405b1c8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
2405b1ca:	687b      	ldr	r3, [r7, #4]
2405b1cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
2405b1d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405b1d4:	d115      	bne.n	2405b202 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2405b1d6:	f7f7 fda5 	bl	24052d24 <HAL_GetTick>
2405b1da:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
2405b1dc:	e00b      	b.n	2405b1f6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
2405b1de:	f7f7 fda1 	bl	24052d24 <HAL_GetTick>
2405b1e2:	4602      	mov	r2, r0
2405b1e4:	693b      	ldr	r3, [r7, #16]
2405b1e6:	1ad3      	subs	r3, r2, r3
2405b1e8:	f241 3288 	movw	r2, #5000	; 0x1388
2405b1ec:	4293      	cmp	r3, r2
2405b1ee:	d902      	bls.n	2405b1f6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
2405b1f0:	2303      	movs	r3, #3
2405b1f2:	75fb      	strb	r3, [r7, #23]
            break;
2405b1f4:	e005      	b.n	2405b202 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
2405b1f6:	4b9d      	ldr	r3, [pc, #628]	; (2405b46c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
2405b1f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405b1fa:	f003 0302 	and.w	r3, r3, #2
2405b1fe:	2b00      	cmp	r3, #0
2405b200:	d0ed      	beq.n	2405b1de <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
2405b202:	7dfb      	ldrb	r3, [r7, #23]
2405b204:	2b00      	cmp	r3, #0
2405b206:	d126      	bne.n	2405b256 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
2405b208:	687b      	ldr	r3, [r7, #4]
2405b20a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
2405b20e:	f403 7340 	and.w	r3, r3, #768	; 0x300
2405b212:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
2405b216:	d10d      	bne.n	2405b234 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
2405b218:	4b94      	ldr	r3, [pc, #592]	; (2405b46c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
2405b21a:	691b      	ldr	r3, [r3, #16]
2405b21c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
2405b220:	687b      	ldr	r3, [r7, #4]
2405b222:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
2405b226:	0919      	lsrs	r1, r3, #4
2405b228:	4b91      	ldr	r3, [pc, #580]	; (2405b470 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
2405b22a:	400b      	ands	r3, r1
2405b22c:	498f      	ldr	r1, [pc, #572]	; (2405b46c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
2405b22e:	4313      	orrs	r3, r2
2405b230:	610b      	str	r3, [r1, #16]
2405b232:	e005      	b.n	2405b240 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
2405b234:	4b8d      	ldr	r3, [pc, #564]	; (2405b46c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
2405b236:	691b      	ldr	r3, [r3, #16]
2405b238:	4a8c      	ldr	r2, [pc, #560]	; (2405b46c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
2405b23a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
2405b23e:	6113      	str	r3, [r2, #16]
2405b240:	4b8a      	ldr	r3, [pc, #552]	; (2405b46c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
2405b242:	6f1a      	ldr	r2, [r3, #112]	; 0x70
2405b244:	687b      	ldr	r3, [r7, #4]
2405b246:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
2405b24a:	f3c3 030b 	ubfx	r3, r3, #0, #12
2405b24e:	4987      	ldr	r1, [pc, #540]	; (2405b46c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
2405b250:	4313      	orrs	r3, r2
2405b252:	670b      	str	r3, [r1, #112]	; 0x70
2405b254:	e004      	b.n	2405b260 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
2405b256:	7dfb      	ldrb	r3, [r7, #23]
2405b258:	75bb      	strb	r3, [r7, #22]
2405b25a:	e001      	b.n	2405b260 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
2405b25c:	7dfb      	ldrb	r3, [r7, #23]
2405b25e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
2405b260:	687b      	ldr	r3, [r7, #4]
2405b262:	681b      	ldr	r3, [r3, #0]
2405b264:	f003 0301 	and.w	r3, r3, #1
2405b268:	2b00      	cmp	r3, #0
2405b26a:	d07f      	beq.n	2405b36c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
2405b26c:	687b      	ldr	r3, [r7, #4]
2405b26e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405b272:	2b28      	cmp	r3, #40	; 0x28
2405b274:	d866      	bhi.n	2405b344 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
2405b276:	a201      	add	r2, pc, #4	; (adr r2, 2405b27c <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
2405b278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2405b27c:	2405b34b 	.word	0x2405b34b
2405b280:	2405b345 	.word	0x2405b345
2405b284:	2405b345 	.word	0x2405b345
2405b288:	2405b345 	.word	0x2405b345
2405b28c:	2405b345 	.word	0x2405b345
2405b290:	2405b345 	.word	0x2405b345
2405b294:	2405b345 	.word	0x2405b345
2405b298:	2405b345 	.word	0x2405b345
2405b29c:	2405b321 	.word	0x2405b321
2405b2a0:	2405b345 	.word	0x2405b345
2405b2a4:	2405b345 	.word	0x2405b345
2405b2a8:	2405b345 	.word	0x2405b345
2405b2ac:	2405b345 	.word	0x2405b345
2405b2b0:	2405b345 	.word	0x2405b345
2405b2b4:	2405b345 	.word	0x2405b345
2405b2b8:	2405b345 	.word	0x2405b345
2405b2bc:	2405b333 	.word	0x2405b333
2405b2c0:	2405b345 	.word	0x2405b345
2405b2c4:	2405b345 	.word	0x2405b345
2405b2c8:	2405b345 	.word	0x2405b345
2405b2cc:	2405b345 	.word	0x2405b345
2405b2d0:	2405b345 	.word	0x2405b345
2405b2d4:	2405b345 	.word	0x2405b345
2405b2d8:	2405b345 	.word	0x2405b345
2405b2dc:	2405b34b 	.word	0x2405b34b
2405b2e0:	2405b345 	.word	0x2405b345
2405b2e4:	2405b345 	.word	0x2405b345
2405b2e8:	2405b345 	.word	0x2405b345
2405b2ec:	2405b345 	.word	0x2405b345
2405b2f0:	2405b345 	.word	0x2405b345
2405b2f4:	2405b345 	.word	0x2405b345
2405b2f8:	2405b345 	.word	0x2405b345
2405b2fc:	2405b34b 	.word	0x2405b34b
2405b300:	2405b345 	.word	0x2405b345
2405b304:	2405b345 	.word	0x2405b345
2405b308:	2405b345 	.word	0x2405b345
2405b30c:	2405b345 	.word	0x2405b345
2405b310:	2405b345 	.word	0x2405b345
2405b314:	2405b345 	.word	0x2405b345
2405b318:	2405b345 	.word	0x2405b345
2405b31c:	2405b34b 	.word	0x2405b34b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
2405b320:	687b      	ldr	r3, [r7, #4]
2405b322:	3304      	adds	r3, #4
2405b324:	2101      	movs	r1, #1
2405b326:	4618      	mov	r0, r3
2405b328:	f001 fb74 	bl	2405ca14 <RCCEx_PLL2_Config>
2405b32c:	4603      	mov	r3, r0
2405b32e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
2405b330:	e00c      	b.n	2405b34c <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
2405b332:	687b      	ldr	r3, [r7, #4]
2405b334:	3324      	adds	r3, #36	; 0x24
2405b336:	2101      	movs	r1, #1
2405b338:	4618      	mov	r0, r3
2405b33a:	f001 fc1d 	bl	2405cb78 <RCCEx_PLL3_Config>
2405b33e:	4603      	mov	r3, r0
2405b340:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
2405b342:	e003      	b.n	2405b34c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
2405b344:	2301      	movs	r3, #1
2405b346:	75fb      	strb	r3, [r7, #23]
      break;
2405b348:	e000      	b.n	2405b34c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
2405b34a:	bf00      	nop
    }

    if(ret == HAL_OK)
2405b34c:	7dfb      	ldrb	r3, [r7, #23]
2405b34e:	2b00      	cmp	r3, #0
2405b350:	d10a      	bne.n	2405b368 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
2405b352:	4b46      	ldr	r3, [pc, #280]	; (2405b46c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
2405b354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405b356:	f023 0238 	bic.w	r2, r3, #56	; 0x38
2405b35a:	687b      	ldr	r3, [r7, #4]
2405b35c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405b360:	4942      	ldr	r1, [pc, #264]	; (2405b46c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
2405b362:	4313      	orrs	r3, r2
2405b364:	654b      	str	r3, [r1, #84]	; 0x54
2405b366:	e001      	b.n	2405b36c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405b368:	7dfb      	ldrb	r3, [r7, #23]
2405b36a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
2405b36c:	687b      	ldr	r3, [r7, #4]
2405b36e:	681b      	ldr	r3, [r3, #0]
2405b370:	f003 0302 	and.w	r3, r3, #2
2405b374:	2b00      	cmp	r3, #0
2405b376:	d038      	beq.n	2405b3ea <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
2405b378:	687b      	ldr	r3, [r7, #4]
2405b37a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
2405b37c:	2b05      	cmp	r3, #5
2405b37e:	d821      	bhi.n	2405b3c4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
2405b380:	a201      	add	r2, pc, #4	; (adr r2, 2405b388 <HAL_RCCEx_PeriphCLKConfig+0x800>)
2405b382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2405b386:	bf00      	nop
2405b388:	2405b3cb 	.word	0x2405b3cb
2405b38c:	2405b3a1 	.word	0x2405b3a1
2405b390:	2405b3b3 	.word	0x2405b3b3
2405b394:	2405b3cb 	.word	0x2405b3cb
2405b398:	2405b3cb 	.word	0x2405b3cb
2405b39c:	2405b3cb 	.word	0x2405b3cb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
2405b3a0:	687b      	ldr	r3, [r7, #4]
2405b3a2:	3304      	adds	r3, #4
2405b3a4:	2101      	movs	r1, #1
2405b3a6:	4618      	mov	r0, r3
2405b3a8:	f001 fb34 	bl	2405ca14 <RCCEx_PLL2_Config>
2405b3ac:	4603      	mov	r3, r0
2405b3ae:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
2405b3b0:	e00c      	b.n	2405b3cc <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
2405b3b2:	687b      	ldr	r3, [r7, #4]
2405b3b4:	3324      	adds	r3, #36	; 0x24
2405b3b6:	2101      	movs	r1, #1
2405b3b8:	4618      	mov	r0, r3
2405b3ba:	f001 fbdd 	bl	2405cb78 <RCCEx_PLL3_Config>
2405b3be:	4603      	mov	r3, r0
2405b3c0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
2405b3c2:	e003      	b.n	2405b3cc <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
2405b3c4:	2301      	movs	r3, #1
2405b3c6:	75fb      	strb	r3, [r7, #23]
      break;
2405b3c8:	e000      	b.n	2405b3cc <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
2405b3ca:	bf00      	nop
    }

    if(ret == HAL_OK)
2405b3cc:	7dfb      	ldrb	r3, [r7, #23]
2405b3ce:	2b00      	cmp	r3, #0
2405b3d0:	d109      	bne.n	2405b3e6 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
2405b3d2:	4b26      	ldr	r3, [pc, #152]	; (2405b46c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
2405b3d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405b3d6:	f023 0207 	bic.w	r2, r3, #7
2405b3da:	687b      	ldr	r3, [r7, #4]
2405b3dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
2405b3de:	4923      	ldr	r1, [pc, #140]	; (2405b46c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
2405b3e0:	4313      	orrs	r3, r2
2405b3e2:	654b      	str	r3, [r1, #84]	; 0x54
2405b3e4:	e001      	b.n	2405b3ea <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405b3e6:	7dfb      	ldrb	r3, [r7, #23]
2405b3e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
2405b3ea:	687b      	ldr	r3, [r7, #4]
2405b3ec:	681b      	ldr	r3, [r3, #0]
2405b3ee:	f003 0304 	and.w	r3, r3, #4
2405b3f2:	2b00      	cmp	r3, #0
2405b3f4:	d040      	beq.n	2405b478 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
2405b3f6:	687b      	ldr	r3, [r7, #4]
2405b3f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
2405b3fc:	2b05      	cmp	r3, #5
2405b3fe:	d821      	bhi.n	2405b444 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
2405b400:	a201      	add	r2, pc, #4	; (adr r2, 2405b408 <HAL_RCCEx_PeriphCLKConfig+0x880>)
2405b402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2405b406:	bf00      	nop
2405b408:	2405b44b 	.word	0x2405b44b
2405b40c:	2405b421 	.word	0x2405b421
2405b410:	2405b433 	.word	0x2405b433
2405b414:	2405b44b 	.word	0x2405b44b
2405b418:	2405b44b 	.word	0x2405b44b
2405b41c:	2405b44b 	.word	0x2405b44b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
2405b420:	687b      	ldr	r3, [r7, #4]
2405b422:	3304      	adds	r3, #4
2405b424:	2101      	movs	r1, #1
2405b426:	4618      	mov	r0, r3
2405b428:	f001 faf4 	bl	2405ca14 <RCCEx_PLL2_Config>
2405b42c:	4603      	mov	r3, r0
2405b42e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
2405b430:	e00c      	b.n	2405b44c <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
2405b432:	687b      	ldr	r3, [r7, #4]
2405b434:	3324      	adds	r3, #36	; 0x24
2405b436:	2101      	movs	r1, #1
2405b438:	4618      	mov	r0, r3
2405b43a:	f001 fb9d 	bl	2405cb78 <RCCEx_PLL3_Config>
2405b43e:	4603      	mov	r3, r0
2405b440:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
2405b442:	e003      	b.n	2405b44c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
2405b444:	2301      	movs	r3, #1
2405b446:	75fb      	strb	r3, [r7, #23]
      break;
2405b448:	e000      	b.n	2405b44c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
2405b44a:	bf00      	nop
    }

    if(ret == HAL_OK)
2405b44c:	7dfb      	ldrb	r3, [r7, #23]
2405b44e:	2b00      	cmp	r3, #0
2405b450:	d110      	bne.n	2405b474 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
2405b452:	4b06      	ldr	r3, [pc, #24]	; (2405b46c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
2405b454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405b456:	f023 0207 	bic.w	r2, r3, #7
2405b45a:	687b      	ldr	r3, [r7, #4]
2405b45c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
2405b460:	4902      	ldr	r1, [pc, #8]	; (2405b46c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
2405b462:	4313      	orrs	r3, r2
2405b464:	658b      	str	r3, [r1, #88]	; 0x58
2405b466:	e007      	b.n	2405b478 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
2405b468:	58024800 	.word	0x58024800
2405b46c:	58024400 	.word	0x58024400
2405b470:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
2405b474:	7dfb      	ldrb	r3, [r7, #23]
2405b476:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
2405b478:	687b      	ldr	r3, [r7, #4]
2405b47a:	681b      	ldr	r3, [r3, #0]
2405b47c:	f003 0320 	and.w	r3, r3, #32
2405b480:	2b00      	cmp	r3, #0
2405b482:	d04b      	beq.n	2405b51c <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
2405b484:	687b      	ldr	r3, [r7, #4]
2405b486:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405b48a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
2405b48e:	d02e      	beq.n	2405b4ee <HAL_RCCEx_PeriphCLKConfig+0x966>
2405b490:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
2405b494:	d828      	bhi.n	2405b4e8 <HAL_RCCEx_PeriphCLKConfig+0x960>
2405b496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2405b49a:	d02a      	beq.n	2405b4f2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
2405b49c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2405b4a0:	d822      	bhi.n	2405b4e8 <HAL_RCCEx_PeriphCLKConfig+0x960>
2405b4a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
2405b4a6:	d026      	beq.n	2405b4f6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
2405b4a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
2405b4ac:	d81c      	bhi.n	2405b4e8 <HAL_RCCEx_PeriphCLKConfig+0x960>
2405b4ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405b4b2:	d010      	beq.n	2405b4d6 <HAL_RCCEx_PeriphCLKConfig+0x94e>
2405b4b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405b4b8:	d816      	bhi.n	2405b4e8 <HAL_RCCEx_PeriphCLKConfig+0x960>
2405b4ba:	2b00      	cmp	r3, #0
2405b4bc:	d01d      	beq.n	2405b4fa <HAL_RCCEx_PeriphCLKConfig+0x972>
2405b4be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2405b4c2:	d111      	bne.n	2405b4e8 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
2405b4c4:	687b      	ldr	r3, [r7, #4]
2405b4c6:	3304      	adds	r3, #4
2405b4c8:	2100      	movs	r1, #0
2405b4ca:	4618      	mov	r0, r3
2405b4cc:	f001 faa2 	bl	2405ca14 <RCCEx_PLL2_Config>
2405b4d0:	4603      	mov	r3, r0
2405b4d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
2405b4d4:	e012      	b.n	2405b4fc <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
2405b4d6:	687b      	ldr	r3, [r7, #4]
2405b4d8:	3324      	adds	r3, #36	; 0x24
2405b4da:	2102      	movs	r1, #2
2405b4dc:	4618      	mov	r0, r3
2405b4de:	f001 fb4b 	bl	2405cb78 <RCCEx_PLL3_Config>
2405b4e2:	4603      	mov	r3, r0
2405b4e4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
2405b4e6:	e009      	b.n	2405b4fc <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
2405b4e8:	2301      	movs	r3, #1
2405b4ea:	75fb      	strb	r3, [r7, #23]
      break;
2405b4ec:	e006      	b.n	2405b4fc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
2405b4ee:	bf00      	nop
2405b4f0:	e004      	b.n	2405b4fc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
2405b4f2:	bf00      	nop
2405b4f4:	e002      	b.n	2405b4fc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
2405b4f6:	bf00      	nop
2405b4f8:	e000      	b.n	2405b4fc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
2405b4fa:	bf00      	nop
    }

    if(ret == HAL_OK)
2405b4fc:	7dfb      	ldrb	r3, [r7, #23]
2405b4fe:	2b00      	cmp	r3, #0
2405b500:	d10a      	bne.n	2405b518 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
2405b502:	4bb3      	ldr	r3, [pc, #716]	; (2405b7d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
2405b504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405b506:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
2405b50a:	687b      	ldr	r3, [r7, #4]
2405b50c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405b510:	49af      	ldr	r1, [pc, #700]	; (2405b7d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
2405b512:	4313      	orrs	r3, r2
2405b514:	654b      	str	r3, [r1, #84]	; 0x54
2405b516:	e001      	b.n	2405b51c <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405b518:	7dfb      	ldrb	r3, [r7, #23]
2405b51a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
2405b51c:	687b      	ldr	r3, [r7, #4]
2405b51e:	681b      	ldr	r3, [r3, #0]
2405b520:	f003 0340 	and.w	r3, r3, #64	; 0x40
2405b524:	2b00      	cmp	r3, #0
2405b526:	d04b      	beq.n	2405b5c0 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
2405b528:	687b      	ldr	r3, [r7, #4]
2405b52a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
2405b52e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
2405b532:	d02e      	beq.n	2405b592 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
2405b534:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
2405b538:	d828      	bhi.n	2405b58c <HAL_RCCEx_PeriphCLKConfig+0xa04>
2405b53a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
2405b53e:	d02a      	beq.n	2405b596 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
2405b540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
2405b544:	d822      	bhi.n	2405b58c <HAL_RCCEx_PeriphCLKConfig+0xa04>
2405b546:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
2405b54a:	d026      	beq.n	2405b59a <HAL_RCCEx_PeriphCLKConfig+0xa12>
2405b54c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
2405b550:	d81c      	bhi.n	2405b58c <HAL_RCCEx_PeriphCLKConfig+0xa04>
2405b552:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
2405b556:	d010      	beq.n	2405b57a <HAL_RCCEx_PeriphCLKConfig+0x9f2>
2405b558:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
2405b55c:	d816      	bhi.n	2405b58c <HAL_RCCEx_PeriphCLKConfig+0xa04>
2405b55e:	2b00      	cmp	r3, #0
2405b560:	d01d      	beq.n	2405b59e <HAL_RCCEx_PeriphCLKConfig+0xa16>
2405b562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
2405b566:	d111      	bne.n	2405b58c <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
2405b568:	687b      	ldr	r3, [r7, #4]
2405b56a:	3304      	adds	r3, #4
2405b56c:	2100      	movs	r1, #0
2405b56e:	4618      	mov	r0, r3
2405b570:	f001 fa50 	bl	2405ca14 <RCCEx_PLL2_Config>
2405b574:	4603      	mov	r3, r0
2405b576:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
2405b578:	e012      	b.n	2405b5a0 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
2405b57a:	687b      	ldr	r3, [r7, #4]
2405b57c:	3324      	adds	r3, #36	; 0x24
2405b57e:	2102      	movs	r1, #2
2405b580:	4618      	mov	r0, r3
2405b582:	f001 faf9 	bl	2405cb78 <RCCEx_PLL3_Config>
2405b586:	4603      	mov	r3, r0
2405b588:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
2405b58a:	e009      	b.n	2405b5a0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
2405b58c:	2301      	movs	r3, #1
2405b58e:	75fb      	strb	r3, [r7, #23]
      break;
2405b590:	e006      	b.n	2405b5a0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
2405b592:	bf00      	nop
2405b594:	e004      	b.n	2405b5a0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
2405b596:	bf00      	nop
2405b598:	e002      	b.n	2405b5a0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
2405b59a:	bf00      	nop
2405b59c:	e000      	b.n	2405b5a0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
2405b59e:	bf00      	nop
    }

    if(ret == HAL_OK)
2405b5a0:	7dfb      	ldrb	r3, [r7, #23]
2405b5a2:	2b00      	cmp	r3, #0
2405b5a4:	d10a      	bne.n	2405b5bc <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
2405b5a6:	4b8a      	ldr	r3, [pc, #552]	; (2405b7d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
2405b5a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405b5aa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
2405b5ae:	687b      	ldr	r3, [r7, #4]
2405b5b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
2405b5b4:	4986      	ldr	r1, [pc, #536]	; (2405b7d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
2405b5b6:	4313      	orrs	r3, r2
2405b5b8:	658b      	str	r3, [r1, #88]	; 0x58
2405b5ba:	e001      	b.n	2405b5c0 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405b5bc:	7dfb      	ldrb	r3, [r7, #23]
2405b5be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
2405b5c0:	687b      	ldr	r3, [r7, #4]
2405b5c2:	681b      	ldr	r3, [r3, #0]
2405b5c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
2405b5c8:	2b00      	cmp	r3, #0
2405b5ca:	d04b      	beq.n	2405b664 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
2405b5cc:	687b      	ldr	r3, [r7, #4]
2405b5ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
2405b5d2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
2405b5d6:	d02e      	beq.n	2405b636 <HAL_RCCEx_PeriphCLKConfig+0xaae>
2405b5d8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
2405b5dc:	d828      	bhi.n	2405b630 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
2405b5de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2405b5e2:	d02a      	beq.n	2405b63a <HAL_RCCEx_PeriphCLKConfig+0xab2>
2405b5e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2405b5e8:	d822      	bhi.n	2405b630 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
2405b5ea:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
2405b5ee:	d026      	beq.n	2405b63e <HAL_RCCEx_PeriphCLKConfig+0xab6>
2405b5f0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
2405b5f4:	d81c      	bhi.n	2405b630 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
2405b5f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2405b5fa:	d010      	beq.n	2405b61e <HAL_RCCEx_PeriphCLKConfig+0xa96>
2405b5fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2405b600:	d816      	bhi.n	2405b630 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
2405b602:	2b00      	cmp	r3, #0
2405b604:	d01d      	beq.n	2405b642 <HAL_RCCEx_PeriphCLKConfig+0xaba>
2405b606:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2405b60a:	d111      	bne.n	2405b630 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
2405b60c:	687b      	ldr	r3, [r7, #4]
2405b60e:	3304      	adds	r3, #4
2405b610:	2100      	movs	r1, #0
2405b612:	4618      	mov	r0, r3
2405b614:	f001 f9fe 	bl	2405ca14 <RCCEx_PLL2_Config>
2405b618:	4603      	mov	r3, r0
2405b61a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
2405b61c:	e012      	b.n	2405b644 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
2405b61e:	687b      	ldr	r3, [r7, #4]
2405b620:	3324      	adds	r3, #36	; 0x24
2405b622:	2102      	movs	r1, #2
2405b624:	4618      	mov	r0, r3
2405b626:	f001 faa7 	bl	2405cb78 <RCCEx_PLL3_Config>
2405b62a:	4603      	mov	r3, r0
2405b62c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
2405b62e:	e009      	b.n	2405b644 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
2405b630:	2301      	movs	r3, #1
2405b632:	75fb      	strb	r3, [r7, #23]
      break;
2405b634:	e006      	b.n	2405b644 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
2405b636:	bf00      	nop
2405b638:	e004      	b.n	2405b644 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
2405b63a:	bf00      	nop
2405b63c:	e002      	b.n	2405b644 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
2405b63e:	bf00      	nop
2405b640:	e000      	b.n	2405b644 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
2405b642:	bf00      	nop
    }

    if(ret == HAL_OK)
2405b644:	7dfb      	ldrb	r3, [r7, #23]
2405b646:	2b00      	cmp	r3, #0
2405b648:	d10a      	bne.n	2405b660 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
2405b64a:	4b61      	ldr	r3, [pc, #388]	; (2405b7d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
2405b64c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405b64e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
2405b652:	687b      	ldr	r3, [r7, #4]
2405b654:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
2405b658:	495d      	ldr	r1, [pc, #372]	; (2405b7d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
2405b65a:	4313      	orrs	r3, r2
2405b65c:	658b      	str	r3, [r1, #88]	; 0x58
2405b65e:	e001      	b.n	2405b664 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405b660:	7dfb      	ldrb	r3, [r7, #23]
2405b662:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
2405b664:	687b      	ldr	r3, [r7, #4]
2405b666:	681b      	ldr	r3, [r3, #0]
2405b668:	f003 0308 	and.w	r3, r3, #8
2405b66c:	2b00      	cmp	r3, #0
2405b66e:	d01a      	beq.n	2405b6a6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
2405b670:	687b      	ldr	r3, [r7, #4]
2405b672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
2405b676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
2405b67a:	d10a      	bne.n	2405b692 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
2405b67c:	687b      	ldr	r3, [r7, #4]
2405b67e:	3324      	adds	r3, #36	; 0x24
2405b680:	2102      	movs	r1, #2
2405b682:	4618      	mov	r0, r3
2405b684:	f001 fa78 	bl	2405cb78 <RCCEx_PLL3_Config>
2405b688:	4603      	mov	r3, r0
2405b68a:	2b00      	cmp	r3, #0
2405b68c:	d001      	beq.n	2405b692 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
2405b68e:	2301      	movs	r3, #1
2405b690:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
2405b692:	4b4f      	ldr	r3, [pc, #316]	; (2405b7d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
2405b694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405b696:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
2405b69a:	687b      	ldr	r3, [r7, #4]
2405b69c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
2405b6a0:	494b      	ldr	r1, [pc, #300]	; (2405b7d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
2405b6a2:	4313      	orrs	r3, r2
2405b6a4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
2405b6a6:	687b      	ldr	r3, [r7, #4]
2405b6a8:	681b      	ldr	r3, [r3, #0]
2405b6aa:	f003 0310 	and.w	r3, r3, #16
2405b6ae:	2b00      	cmp	r3, #0
2405b6b0:	d01a      	beq.n	2405b6e8 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
2405b6b2:	687b      	ldr	r3, [r7, #4]
2405b6b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
2405b6b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405b6bc:	d10a      	bne.n	2405b6d4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
2405b6be:	687b      	ldr	r3, [r7, #4]
2405b6c0:	3324      	adds	r3, #36	; 0x24
2405b6c2:	2102      	movs	r1, #2
2405b6c4:	4618      	mov	r0, r3
2405b6c6:	f001 fa57 	bl	2405cb78 <RCCEx_PLL3_Config>
2405b6ca:	4603      	mov	r3, r0
2405b6cc:	2b00      	cmp	r3, #0
2405b6ce:	d001      	beq.n	2405b6d4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
2405b6d0:	2301      	movs	r3, #1
2405b6d2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
2405b6d4:	4b3e      	ldr	r3, [pc, #248]	; (2405b7d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
2405b6d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405b6d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
2405b6dc:	687b      	ldr	r3, [r7, #4]
2405b6de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
2405b6e2:	493b      	ldr	r1, [pc, #236]	; (2405b7d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
2405b6e4:	4313      	orrs	r3, r2
2405b6e6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
2405b6e8:	687b      	ldr	r3, [r7, #4]
2405b6ea:	681b      	ldr	r3, [r3, #0]
2405b6ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
2405b6f0:	2b00      	cmp	r3, #0
2405b6f2:	d034      	beq.n	2405b75e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
2405b6f4:	687b      	ldr	r3, [r7, #4]
2405b6f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
2405b6fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405b6fe:	d01d      	beq.n	2405b73c <HAL_RCCEx_PeriphCLKConfig+0xbb4>
2405b700:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405b704:	d817      	bhi.n	2405b736 <HAL_RCCEx_PeriphCLKConfig+0xbae>
2405b706:	2b00      	cmp	r3, #0
2405b708:	d003      	beq.n	2405b712 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
2405b70a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2405b70e:	d009      	beq.n	2405b724 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
2405b710:	e011      	b.n	2405b736 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
2405b712:	687b      	ldr	r3, [r7, #4]
2405b714:	3304      	adds	r3, #4
2405b716:	2100      	movs	r1, #0
2405b718:	4618      	mov	r0, r3
2405b71a:	f001 f97b 	bl	2405ca14 <RCCEx_PLL2_Config>
2405b71e:	4603      	mov	r3, r0
2405b720:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
2405b722:	e00c      	b.n	2405b73e <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
2405b724:	687b      	ldr	r3, [r7, #4]
2405b726:	3324      	adds	r3, #36	; 0x24
2405b728:	2102      	movs	r1, #2
2405b72a:	4618      	mov	r0, r3
2405b72c:	f001 fa24 	bl	2405cb78 <RCCEx_PLL3_Config>
2405b730:	4603      	mov	r3, r0
2405b732:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
2405b734:	e003      	b.n	2405b73e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
2405b736:	2301      	movs	r3, #1
2405b738:	75fb      	strb	r3, [r7, #23]
      break;
2405b73a:	e000      	b.n	2405b73e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
2405b73c:	bf00      	nop
    }

    if(ret == HAL_OK)
2405b73e:	7dfb      	ldrb	r3, [r7, #23]
2405b740:	2b00      	cmp	r3, #0
2405b742:	d10a      	bne.n	2405b75a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
2405b744:	4b22      	ldr	r3, [pc, #136]	; (2405b7d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
2405b746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405b748:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
2405b74c:	687b      	ldr	r3, [r7, #4]
2405b74e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
2405b752:	491f      	ldr	r1, [pc, #124]	; (2405b7d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
2405b754:	4313      	orrs	r3, r2
2405b756:	658b      	str	r3, [r1, #88]	; 0x58
2405b758:	e001      	b.n	2405b75e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405b75a:	7dfb      	ldrb	r3, [r7, #23]
2405b75c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
2405b75e:	687b      	ldr	r3, [r7, #4]
2405b760:	681b      	ldr	r3, [r3, #0]
2405b762:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
2405b766:	2b00      	cmp	r3, #0
2405b768:	d036      	beq.n	2405b7d8 <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
2405b76a:	687b      	ldr	r3, [r7, #4]
2405b76c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
2405b770:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
2405b774:	d01c      	beq.n	2405b7b0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
2405b776:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
2405b77a:	d816      	bhi.n	2405b7aa <HAL_RCCEx_PeriphCLKConfig+0xc22>
2405b77c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
2405b780:	d003      	beq.n	2405b78a <HAL_RCCEx_PeriphCLKConfig+0xc02>
2405b782:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
2405b786:	d007      	beq.n	2405b798 <HAL_RCCEx_PeriphCLKConfig+0xc10>
2405b788:	e00f      	b.n	2405b7aa <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405b78a:	4b11      	ldr	r3, [pc, #68]	; (2405b7d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
2405b78c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405b78e:	4a10      	ldr	r2, [pc, #64]	; (2405b7d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
2405b790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2405b794:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
2405b796:	e00c      	b.n	2405b7b2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
2405b798:	687b      	ldr	r3, [r7, #4]
2405b79a:	3324      	adds	r3, #36	; 0x24
2405b79c:	2101      	movs	r1, #1
2405b79e:	4618      	mov	r0, r3
2405b7a0:	f001 f9ea 	bl	2405cb78 <RCCEx_PLL3_Config>
2405b7a4:	4603      	mov	r3, r0
2405b7a6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
2405b7a8:	e003      	b.n	2405b7b2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
2405b7aa:	2301      	movs	r3, #1
2405b7ac:	75fb      	strb	r3, [r7, #23]
      break;
2405b7ae:	e000      	b.n	2405b7b2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
2405b7b0:	bf00      	nop
    }

    if(ret == HAL_OK)
2405b7b2:	7dfb      	ldrb	r3, [r7, #23]
2405b7b4:	2b00      	cmp	r3, #0
2405b7b6:	d10d      	bne.n	2405b7d4 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
2405b7b8:	4b05      	ldr	r3, [pc, #20]	; (2405b7d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
2405b7ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405b7bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
2405b7c0:	687b      	ldr	r3, [r7, #4]
2405b7c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
2405b7c6:	4902      	ldr	r1, [pc, #8]	; (2405b7d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
2405b7c8:	4313      	orrs	r3, r2
2405b7ca:	654b      	str	r3, [r1, #84]	; 0x54
2405b7cc:	e004      	b.n	2405b7d8 <HAL_RCCEx_PeriphCLKConfig+0xc50>
2405b7ce:	bf00      	nop
2405b7d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
2405b7d4:	7dfb      	ldrb	r3, [r7, #23]
2405b7d6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
2405b7d8:	687b      	ldr	r3, [r7, #4]
2405b7da:	681b      	ldr	r3, [r3, #0]
2405b7dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2405b7e0:	2b00      	cmp	r3, #0
2405b7e2:	d029      	beq.n	2405b838 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
2405b7e4:	687b      	ldr	r3, [r7, #4]
2405b7e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405b7e8:	2b00      	cmp	r3, #0
2405b7ea:	d003      	beq.n	2405b7f4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
2405b7ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2405b7f0:	d007      	beq.n	2405b802 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
2405b7f2:	e00f      	b.n	2405b814 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405b7f4:	4b69      	ldr	r3, [pc, #420]	; (2405b99c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
2405b7f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405b7f8:	4a68      	ldr	r2, [pc, #416]	; (2405b99c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
2405b7fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2405b7fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
2405b800:	e00b      	b.n	2405b81a <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
2405b802:	687b      	ldr	r3, [r7, #4]
2405b804:	3304      	adds	r3, #4
2405b806:	2102      	movs	r1, #2
2405b808:	4618      	mov	r0, r3
2405b80a:	f001 f903 	bl	2405ca14 <RCCEx_PLL2_Config>
2405b80e:	4603      	mov	r3, r0
2405b810:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
2405b812:	e002      	b.n	2405b81a <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
2405b814:	2301      	movs	r3, #1
2405b816:	75fb      	strb	r3, [r7, #23]
      break;
2405b818:	bf00      	nop
    }

    if(ret == HAL_OK)
2405b81a:	7dfb      	ldrb	r3, [r7, #23]
2405b81c:	2b00      	cmp	r3, #0
2405b81e:	d109      	bne.n	2405b834 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
2405b820:	4b5e      	ldr	r3, [pc, #376]	; (2405b99c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
2405b822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405b824:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
2405b828:	687b      	ldr	r3, [r7, #4]
2405b82a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405b82c:	495b      	ldr	r1, [pc, #364]	; (2405b99c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
2405b82e:	4313      	orrs	r3, r2
2405b830:	64cb      	str	r3, [r1, #76]	; 0x4c
2405b832:	e001      	b.n	2405b838 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405b834:	7dfb      	ldrb	r3, [r7, #23]
2405b836:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
2405b838:	687b      	ldr	r3, [r7, #4]
2405b83a:	681b      	ldr	r3, [r3, #0]
2405b83c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2405b840:	2b00      	cmp	r3, #0
2405b842:	d00a      	beq.n	2405b85a <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
2405b844:	687b      	ldr	r3, [r7, #4]
2405b846:	3324      	adds	r3, #36	; 0x24
2405b848:	2102      	movs	r1, #2
2405b84a:	4618      	mov	r0, r3
2405b84c:	f001 f994 	bl	2405cb78 <RCCEx_PLL3_Config>
2405b850:	4603      	mov	r3, r0
2405b852:	2b00      	cmp	r3, #0
2405b854:	d001      	beq.n	2405b85a <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
2405b856:	2301      	movs	r3, #1
2405b858:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
2405b85a:	687b      	ldr	r3, [r7, #4]
2405b85c:	681b      	ldr	r3, [r3, #0]
2405b85e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405b862:	2b00      	cmp	r3, #0
2405b864:	d032      	beq.n	2405b8cc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
2405b866:	687b      	ldr	r3, [r7, #4]
2405b868:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405b86c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
2405b870:	d017      	beq.n	2405b8a2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
2405b872:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
2405b876:	d811      	bhi.n	2405b89c <HAL_RCCEx_PeriphCLKConfig+0xd14>
2405b878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
2405b87c:	d013      	beq.n	2405b8a6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
2405b87e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
2405b882:	d80b      	bhi.n	2405b89c <HAL_RCCEx_PeriphCLKConfig+0xd14>
2405b884:	2b00      	cmp	r3, #0
2405b886:	d010      	beq.n	2405b8aa <HAL_RCCEx_PeriphCLKConfig+0xd22>
2405b888:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405b88c:	d106      	bne.n	2405b89c <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2405b88e:	4b43      	ldr	r3, [pc, #268]	; (2405b99c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
2405b890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405b892:	4a42      	ldr	r2, [pc, #264]	; (2405b99c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
2405b894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2405b898:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
2405b89a:	e007      	b.n	2405b8ac <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
2405b89c:	2301      	movs	r3, #1
2405b89e:	75fb      	strb	r3, [r7, #23]
      break;
2405b8a0:	e004      	b.n	2405b8ac <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
2405b8a2:	bf00      	nop
2405b8a4:	e002      	b.n	2405b8ac <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
2405b8a6:	bf00      	nop
2405b8a8:	e000      	b.n	2405b8ac <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
2405b8aa:	bf00      	nop
    }

    if(ret == HAL_OK)
2405b8ac:	7dfb      	ldrb	r3, [r7, #23]
2405b8ae:	2b00      	cmp	r3, #0
2405b8b0:	d10a      	bne.n	2405b8c8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
2405b8b2:	4b3a      	ldr	r3, [pc, #232]	; (2405b99c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
2405b8b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405b8b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
2405b8ba:	687b      	ldr	r3, [r7, #4]
2405b8bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405b8c0:	4936      	ldr	r1, [pc, #216]	; (2405b99c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
2405b8c2:	4313      	orrs	r3, r2
2405b8c4:	654b      	str	r3, [r1, #84]	; 0x54
2405b8c6:	e001      	b.n	2405b8cc <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
2405b8c8:	7dfb      	ldrb	r3, [r7, #23]
2405b8ca:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
2405b8cc:	687b      	ldr	r3, [r7, #4]
2405b8ce:	681b      	ldr	r3, [r3, #0]
2405b8d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
2405b8d4:	2b00      	cmp	r3, #0
2405b8d6:	d008      	beq.n	2405b8ea <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
2405b8d8:	4b30      	ldr	r3, [pc, #192]	; (2405b99c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
2405b8da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405b8dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
2405b8e0:	687b      	ldr	r3, [r7, #4]
2405b8e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
2405b8e4:	492d      	ldr	r1, [pc, #180]	; (2405b99c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
2405b8e6:	4313      	orrs	r3, r2
2405b8e8:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
2405b8ea:	687b      	ldr	r3, [r7, #4]
2405b8ec:	681b      	ldr	r3, [r3, #0]
2405b8ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
2405b8f2:	2b00      	cmp	r3, #0
2405b8f4:	d008      	beq.n	2405b908 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
2405b8f6:	4b29      	ldr	r3, [pc, #164]	; (2405b99c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
2405b8f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405b8fa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
2405b8fe:	687b      	ldr	r3, [r7, #4]
2405b900:	6edb      	ldr	r3, [r3, #108]	; 0x6c
2405b902:	4926      	ldr	r1, [pc, #152]	; (2405b99c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
2405b904:	4313      	orrs	r3, r2
2405b906:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
2405b908:	687b      	ldr	r3, [r7, #4]
2405b90a:	681b      	ldr	r3, [r3, #0]
2405b90c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
2405b910:	2b00      	cmp	r3, #0
2405b912:	d008      	beq.n	2405b926 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
2405b914:	4b21      	ldr	r3, [pc, #132]	; (2405b99c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
2405b916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405b918:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
2405b91c:	687b      	ldr	r3, [r7, #4]
2405b91e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405b920:	491e      	ldr	r1, [pc, #120]	; (2405b99c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
2405b922:	4313      	orrs	r3, r2
2405b924:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
2405b926:	687b      	ldr	r3, [r7, #4]
2405b928:	681b      	ldr	r3, [r3, #0]
2405b92a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
2405b92e:	2b00      	cmp	r3, #0
2405b930:	d00d      	beq.n	2405b94e <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
2405b932:	4b1a      	ldr	r3, [pc, #104]	; (2405b99c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
2405b934:	691b      	ldr	r3, [r3, #16]
2405b936:	4a19      	ldr	r2, [pc, #100]	; (2405b99c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
2405b938:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
2405b93c:	6113      	str	r3, [r2, #16]
2405b93e:	4b17      	ldr	r3, [pc, #92]	; (2405b99c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
2405b940:	691a      	ldr	r2, [r3, #16]
2405b942:	687b      	ldr	r3, [r7, #4]
2405b944:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
2405b948:	4914      	ldr	r1, [pc, #80]	; (2405b99c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
2405b94a:	4313      	orrs	r3, r2
2405b94c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
2405b94e:	687b      	ldr	r3, [r7, #4]
2405b950:	681b      	ldr	r3, [r3, #0]
2405b952:	2b00      	cmp	r3, #0
2405b954:	da08      	bge.n	2405b968 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
2405b956:	4b11      	ldr	r3, [pc, #68]	; (2405b99c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
2405b958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405b95a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
2405b95e:	687b      	ldr	r3, [r7, #4]
2405b960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405b962:	490e      	ldr	r1, [pc, #56]	; (2405b99c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
2405b964:	4313      	orrs	r3, r2
2405b966:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
2405b968:	687b      	ldr	r3, [r7, #4]
2405b96a:	681b      	ldr	r3, [r3, #0]
2405b96c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
2405b970:	2b00      	cmp	r3, #0
2405b972:	d009      	beq.n	2405b988 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
2405b974:	4b09      	ldr	r3, [pc, #36]	; (2405b99c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
2405b976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405b978:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
2405b97c:	687b      	ldr	r3, [r7, #4]
2405b97e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
2405b982:	4906      	ldr	r1, [pc, #24]	; (2405b99c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
2405b984:	4313      	orrs	r3, r2
2405b986:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
2405b988:	7dbb      	ldrb	r3, [r7, #22]
2405b98a:	2b00      	cmp	r3, #0
2405b98c:	d101      	bne.n	2405b992 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
2405b98e:	2300      	movs	r3, #0
2405b990:	e000      	b.n	2405b994 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
2405b992:	2301      	movs	r3, #1
}
2405b994:	4618      	mov	r0, r3
2405b996:	3718      	adds	r7, #24
2405b998:	46bd      	mov	sp, r7
2405b99a:	bd80      	pop	{r7, pc}
2405b99c:	58024400 	.word	0x58024400

2405b9a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
2405b9a0:	b580      	push	{r7, lr}
2405b9a2:	b090      	sub	sp, #64	; 0x40
2405b9a4:	af00      	add	r7, sp, #0
2405b9a6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
2405b9a8:	687b      	ldr	r3, [r7, #4]
2405b9aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405b9ae:	f040 8089 	bne.w	2405bac4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
2405b9b2:	4ba8      	ldr	r3, [pc, #672]	; (2405bc54 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
2405b9b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405b9b6:	f003 0307 	and.w	r3, r3, #7
2405b9ba:	633b      	str	r3, [r7, #48]	; 0x30
2405b9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405b9be:	2b04      	cmp	r3, #4
2405b9c0:	d87d      	bhi.n	2405babe <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
2405b9c2:	a201      	add	r2, pc, #4	; (adr r2, 2405b9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
2405b9c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2405b9c8:	2405b9dd 	.word	0x2405b9dd
2405b9cc:	2405ba01 	.word	0x2405ba01
2405b9d0:	2405ba25 	.word	0x2405ba25
2405b9d4:	2405bab9 	.word	0x2405bab9
2405b9d8:	2405ba49 	.word	0x2405ba49

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
2405b9dc:	4b9d      	ldr	r3, [pc, #628]	; (2405bc54 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
2405b9de:	681b      	ldr	r3, [r3, #0]
2405b9e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2405b9e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2405b9e8:	d107      	bne.n	2405b9fa <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
2405b9ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
2405b9ee:	4618      	mov	r0, r3
2405b9f0:	f000 febe 	bl	2405c770 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
2405b9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
2405b9f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
2405b9f8:	e3f5      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
2405b9fa:	2300      	movs	r3, #0
2405b9fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2405b9fe:	e3f2      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2405ba00:	4b94      	ldr	r3, [pc, #592]	; (2405bc54 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
2405ba02:	681b      	ldr	r3, [r3, #0]
2405ba04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2405ba08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
2405ba0c:	d107      	bne.n	2405ba1e <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2405ba0e:	f107 0318 	add.w	r3, r7, #24
2405ba12:	4618      	mov	r0, r3
2405ba14:	f000 fc04 	bl	2405c220 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
2405ba18:	69bb      	ldr	r3, [r7, #24]
2405ba1a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
2405ba1c:	e3e3      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
2405ba1e:	2300      	movs	r3, #0
2405ba20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2405ba22:	e3e0      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2405ba24:	4b8b      	ldr	r3, [pc, #556]	; (2405bc54 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
2405ba26:	681b      	ldr	r3, [r3, #0]
2405ba28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2405ba2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405ba30:	d107      	bne.n	2405ba42 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2405ba32:	f107 030c 	add.w	r3, r7, #12
2405ba36:	4618      	mov	r0, r3
2405ba38:	f000 fd46 	bl	2405c4c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
2405ba3c:	68fb      	ldr	r3, [r7, #12]
2405ba3e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
2405ba40:	e3d1      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
2405ba42:	2300      	movs	r3, #0
2405ba44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2405ba46:	e3ce      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
2405ba48:	4b82      	ldr	r3, [pc, #520]	; (2405bc54 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
2405ba4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405ba4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
2405ba50:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
2405ba52:	4b80      	ldr	r3, [pc, #512]	; (2405bc54 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
2405ba54:	681b      	ldr	r3, [r3, #0]
2405ba56:	f003 0304 	and.w	r3, r3, #4
2405ba5a:	2b04      	cmp	r3, #4
2405ba5c:	d10c      	bne.n	2405ba78 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
2405ba5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405ba60:	2b00      	cmp	r3, #0
2405ba62:	d109      	bne.n	2405ba78 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
2405ba64:	4b7b      	ldr	r3, [pc, #492]	; (2405bc54 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
2405ba66:	681b      	ldr	r3, [r3, #0]
2405ba68:	08db      	lsrs	r3, r3, #3
2405ba6a:	f003 0303 	and.w	r3, r3, #3
2405ba6e:	4a7a      	ldr	r2, [pc, #488]	; (2405bc58 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
2405ba70:	fa22 f303 	lsr.w	r3, r2, r3
2405ba74:	63fb      	str	r3, [r7, #60]	; 0x3c
2405ba76:	e01e      	b.n	2405bab6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
2405ba78:	4b76      	ldr	r3, [pc, #472]	; (2405bc54 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
2405ba7a:	681b      	ldr	r3, [r3, #0]
2405ba7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405ba80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405ba84:	d106      	bne.n	2405ba94 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
2405ba86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405ba88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2405ba8c:	d102      	bne.n	2405ba94 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
2405ba8e:	4b73      	ldr	r3, [pc, #460]	; (2405bc5c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
2405ba90:	63fb      	str	r3, [r7, #60]	; 0x3c
2405ba92:	e010      	b.n	2405bab6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
2405ba94:	4b6f      	ldr	r3, [pc, #444]	; (2405bc54 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
2405ba96:	681b      	ldr	r3, [r3, #0]
2405ba98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405ba9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405baa0:	d106      	bne.n	2405bab0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
2405baa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405baa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405baa8:	d102      	bne.n	2405bab0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
2405baaa:	4b6d      	ldr	r3, [pc, #436]	; (2405bc60 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
2405baac:	63fb      	str	r3, [r7, #60]	; 0x3c
2405baae:	e002      	b.n	2405bab6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
2405bab0:	2300      	movs	r3, #0
2405bab2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
2405bab4:	e397      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
2405bab6:	e396      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
2405bab8:	4b6a      	ldr	r3, [pc, #424]	; (2405bc64 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
2405baba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2405babc:	e393      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
2405babe:	2300      	movs	r3, #0
2405bac0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2405bac2:	e390      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
2405bac4:	687b      	ldr	r3, [r7, #4]
2405bac6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
2405baca:	f040 8095 	bne.w	2405bbf8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
2405bace:	4b61      	ldr	r3, [pc, #388]	; (2405bc54 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
2405bad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405bad2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
2405bad6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
2405bad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405bada:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405bade:	d04d      	beq.n	2405bb7c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
2405bae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405bae2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405bae6:	f200 8084 	bhi.w	2405bbf2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
2405baea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405baec:	2bc0      	cmp	r3, #192	; 0xc0
2405baee:	d07d      	beq.n	2405bbec <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
2405baf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405baf2:	2bc0      	cmp	r3, #192	; 0xc0
2405baf4:	d87d      	bhi.n	2405bbf2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
2405baf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405baf8:	2b80      	cmp	r3, #128	; 0x80
2405bafa:	d02d      	beq.n	2405bb58 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
2405bafc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405bafe:	2b80      	cmp	r3, #128	; 0x80
2405bb00:	d877      	bhi.n	2405bbf2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
2405bb02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405bb04:	2b00      	cmp	r3, #0
2405bb06:	d003      	beq.n	2405bb10 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
2405bb08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405bb0a:	2b40      	cmp	r3, #64	; 0x40
2405bb0c:	d012      	beq.n	2405bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
2405bb0e:	e070      	b.n	2405bbf2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
2405bb10:	4b50      	ldr	r3, [pc, #320]	; (2405bc54 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
2405bb12:	681b      	ldr	r3, [r3, #0]
2405bb14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2405bb18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2405bb1c:	d107      	bne.n	2405bb2e <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
2405bb1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
2405bb22:	4618      	mov	r0, r3
2405bb24:	f000 fe24 	bl	2405c770 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
2405bb28:	6abb      	ldr	r3, [r7, #40]	; 0x28
2405bb2a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
2405bb2c:	e35b      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
2405bb2e:	2300      	movs	r3, #0
2405bb30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2405bb32:	e358      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2405bb34:	4b47      	ldr	r3, [pc, #284]	; (2405bc54 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
2405bb36:	681b      	ldr	r3, [r3, #0]
2405bb38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2405bb3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
2405bb40:	d107      	bne.n	2405bb52 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2405bb42:	f107 0318 	add.w	r3, r7, #24
2405bb46:	4618      	mov	r0, r3
2405bb48:	f000 fb6a 	bl	2405c220 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
2405bb4c:	69bb      	ldr	r3, [r7, #24]
2405bb4e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
2405bb50:	e349      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
2405bb52:	2300      	movs	r3, #0
2405bb54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2405bb56:	e346      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2405bb58:	4b3e      	ldr	r3, [pc, #248]	; (2405bc54 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
2405bb5a:	681b      	ldr	r3, [r3, #0]
2405bb5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2405bb60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405bb64:	d107      	bne.n	2405bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2405bb66:	f107 030c 	add.w	r3, r7, #12
2405bb6a:	4618      	mov	r0, r3
2405bb6c:	f000 fcac 	bl	2405c4c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
2405bb70:	68fb      	ldr	r3, [r7, #12]
2405bb72:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
2405bb74:	e337      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
2405bb76:	2300      	movs	r3, #0
2405bb78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2405bb7a:	e334      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
2405bb7c:	4b35      	ldr	r3, [pc, #212]	; (2405bc54 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
2405bb7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405bb80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
2405bb84:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
2405bb86:	4b33      	ldr	r3, [pc, #204]	; (2405bc54 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
2405bb88:	681b      	ldr	r3, [r3, #0]
2405bb8a:	f003 0304 	and.w	r3, r3, #4
2405bb8e:	2b04      	cmp	r3, #4
2405bb90:	d10c      	bne.n	2405bbac <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
2405bb92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405bb94:	2b00      	cmp	r3, #0
2405bb96:	d109      	bne.n	2405bbac <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
2405bb98:	4b2e      	ldr	r3, [pc, #184]	; (2405bc54 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
2405bb9a:	681b      	ldr	r3, [r3, #0]
2405bb9c:	08db      	lsrs	r3, r3, #3
2405bb9e:	f003 0303 	and.w	r3, r3, #3
2405bba2:	4a2d      	ldr	r2, [pc, #180]	; (2405bc58 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
2405bba4:	fa22 f303 	lsr.w	r3, r2, r3
2405bba8:	63fb      	str	r3, [r7, #60]	; 0x3c
2405bbaa:	e01e      	b.n	2405bbea <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
2405bbac:	4b29      	ldr	r3, [pc, #164]	; (2405bc54 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
2405bbae:	681b      	ldr	r3, [r3, #0]
2405bbb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405bbb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405bbb8:	d106      	bne.n	2405bbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
2405bbba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405bbbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2405bbc0:	d102      	bne.n	2405bbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
2405bbc2:	4b26      	ldr	r3, [pc, #152]	; (2405bc5c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
2405bbc4:	63fb      	str	r3, [r7, #60]	; 0x3c
2405bbc6:	e010      	b.n	2405bbea <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
2405bbc8:	4b22      	ldr	r3, [pc, #136]	; (2405bc54 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
2405bbca:	681b      	ldr	r3, [r3, #0]
2405bbcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405bbd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405bbd4:	d106      	bne.n	2405bbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
2405bbd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405bbd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405bbdc:	d102      	bne.n	2405bbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
2405bbde:	4b20      	ldr	r3, [pc, #128]	; (2405bc60 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
2405bbe0:	63fb      	str	r3, [r7, #60]	; 0x3c
2405bbe2:	e002      	b.n	2405bbea <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
2405bbe4:	2300      	movs	r3, #0
2405bbe6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
2405bbe8:	e2fd      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
2405bbea:	e2fc      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
2405bbec:	4b1d      	ldr	r3, [pc, #116]	; (2405bc64 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
2405bbee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2405bbf0:	e2f9      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
2405bbf2:	2300      	movs	r3, #0
2405bbf4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2405bbf6:	e2f6      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
2405bbf8:	687b      	ldr	r3, [r7, #4]
2405bbfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
2405bbfe:	f040 80a7 	bne.w	2405bd50 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
2405bc02:	4b14      	ldr	r3, [pc, #80]	; (2405bc54 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
2405bc04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405bc06:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
2405bc0a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
2405bc0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405bc0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
2405bc12:	d05f      	beq.n	2405bcd4 <HAL_RCCEx_GetPeriphCLKFreq+0x334>
2405bc14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405bc16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
2405bc1a:	f200 8096 	bhi.w	2405bd4a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
2405bc1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405bc20:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
2405bc24:	f000 808e 	beq.w	2405bd44 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
2405bc28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405bc2a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
2405bc2e:	f200 808c 	bhi.w	2405bd4a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
2405bc32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405bc34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
2405bc38:	d03a      	beq.n	2405bcb0 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
2405bc3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405bc3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
2405bc40:	f200 8083 	bhi.w	2405bd4a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
2405bc44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405bc46:	2b00      	cmp	r3, #0
2405bc48:	d00e      	beq.n	2405bc68 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
2405bc4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2405bc4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
2405bc50:	d01c      	beq.n	2405bc8c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
2405bc52:	e07a      	b.n	2405bd4a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
2405bc54:	58024400 	.word	0x58024400
2405bc58:	03d09000 	.word	0x03d09000
2405bc5c:	003d0900 	.word	0x003d0900
2405bc60:	016e3600 	.word	0x016e3600
2405bc64:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
2405bc68:	4ba8      	ldr	r3, [pc, #672]	; (2405bf0c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
2405bc6a:	681b      	ldr	r3, [r3, #0]
2405bc6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2405bc70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2405bc74:	d107      	bne.n	2405bc86 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
2405bc76:	f107 0324 	add.w	r3, r7, #36	; 0x24
2405bc7a:	4618      	mov	r0, r3
2405bc7c:	f000 fd78 	bl	2405c770 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
2405bc80:	6abb      	ldr	r3, [r7, #40]	; 0x28
2405bc82:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
2405bc84:	e2af      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
2405bc86:	2300      	movs	r3, #0
2405bc88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2405bc8a:	e2ac      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2405bc8c:	4b9f      	ldr	r3, [pc, #636]	; (2405bf0c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
2405bc8e:	681b      	ldr	r3, [r3, #0]
2405bc90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2405bc94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
2405bc98:	d107      	bne.n	2405bcaa <HAL_RCCEx_GetPeriphCLKFreq+0x30a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2405bc9a:	f107 0318 	add.w	r3, r7, #24
2405bc9e:	4618      	mov	r0, r3
2405bca0:	f000 fabe 	bl	2405c220 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
2405bca4:	69bb      	ldr	r3, [r7, #24]
2405bca6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
2405bca8:	e29d      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
2405bcaa:	2300      	movs	r3, #0
2405bcac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2405bcae:	e29a      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2405bcb0:	4b96      	ldr	r3, [pc, #600]	; (2405bf0c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
2405bcb2:	681b      	ldr	r3, [r3, #0]
2405bcb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2405bcb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405bcbc:	d107      	bne.n	2405bcce <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2405bcbe:	f107 030c 	add.w	r3, r7, #12
2405bcc2:	4618      	mov	r0, r3
2405bcc4:	f000 fc00 	bl	2405c4c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
2405bcc8:	68fb      	ldr	r3, [r7, #12]
2405bcca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
2405bccc:	e28b      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
2405bcce:	2300      	movs	r3, #0
2405bcd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2405bcd2:	e288      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
2405bcd4:	4b8d      	ldr	r3, [pc, #564]	; (2405bf0c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
2405bcd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405bcd8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
2405bcdc:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
2405bcde:	4b8b      	ldr	r3, [pc, #556]	; (2405bf0c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
2405bce0:	681b      	ldr	r3, [r3, #0]
2405bce2:	f003 0304 	and.w	r3, r3, #4
2405bce6:	2b04      	cmp	r3, #4
2405bce8:	d10c      	bne.n	2405bd04 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
2405bcea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405bcec:	2b00      	cmp	r3, #0
2405bcee:	d109      	bne.n	2405bd04 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
2405bcf0:	4b86      	ldr	r3, [pc, #536]	; (2405bf0c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
2405bcf2:	681b      	ldr	r3, [r3, #0]
2405bcf4:	08db      	lsrs	r3, r3, #3
2405bcf6:	f003 0303 	and.w	r3, r3, #3
2405bcfa:	4a85      	ldr	r2, [pc, #532]	; (2405bf10 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
2405bcfc:	fa22 f303 	lsr.w	r3, r2, r3
2405bd00:	63fb      	str	r3, [r7, #60]	; 0x3c
2405bd02:	e01e      	b.n	2405bd42 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
2405bd04:	4b81      	ldr	r3, [pc, #516]	; (2405bf0c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
2405bd06:	681b      	ldr	r3, [r3, #0]
2405bd08:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405bd0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405bd10:	d106      	bne.n	2405bd20 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
2405bd12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405bd14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2405bd18:	d102      	bne.n	2405bd20 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
2405bd1a:	4b7e      	ldr	r3, [pc, #504]	; (2405bf14 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
2405bd1c:	63fb      	str	r3, [r7, #60]	; 0x3c
2405bd1e:	e010      	b.n	2405bd42 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
2405bd20:	4b7a      	ldr	r3, [pc, #488]	; (2405bf0c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
2405bd22:	681b      	ldr	r3, [r3, #0]
2405bd24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405bd28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405bd2c:	d106      	bne.n	2405bd3c <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
2405bd2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405bd30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405bd34:	d102      	bne.n	2405bd3c <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
2405bd36:	4b78      	ldr	r3, [pc, #480]	; (2405bf18 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
2405bd38:	63fb      	str	r3, [r7, #60]	; 0x3c
2405bd3a:	e002      	b.n	2405bd42 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
2405bd3c:	2300      	movs	r3, #0
2405bd3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
2405bd40:	e251      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
2405bd42:	e250      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
2405bd44:	4b75      	ldr	r3, [pc, #468]	; (2405bf1c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
2405bd46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2405bd48:	e24d      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
2405bd4a:	2300      	movs	r3, #0
2405bd4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2405bd4e:	e24a      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
2405bd50:	687b      	ldr	r3, [r7, #4]
2405bd52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
2405bd56:	f040 809c 	bne.w	2405be92 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
2405bd5a:	4b6c      	ldr	r3, [pc, #432]	; (2405bf0c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
2405bd5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405bd5e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
2405bd62:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
2405bd64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405bd66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2405bd6a:	d054      	beq.n	2405be16 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
2405bd6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405bd6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2405bd72:	f200 808b 	bhi.w	2405be8c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
2405bd76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405bd78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
2405bd7c:	f000 8083 	beq.w	2405be86 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
2405bd80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405bd82:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
2405bd86:	f200 8081 	bhi.w	2405be8c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
2405bd8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405bd8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2405bd90:	d02f      	beq.n	2405bdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
2405bd92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405bd94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2405bd98:	d878      	bhi.n	2405be8c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
2405bd9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405bd9c:	2b00      	cmp	r3, #0
2405bd9e:	d004      	beq.n	2405bdaa <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
2405bda0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405bda2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
2405bda6:	d012      	beq.n	2405bdce <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
2405bda8:	e070      	b.n	2405be8c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
2405bdaa:	4b58      	ldr	r3, [pc, #352]	; (2405bf0c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
2405bdac:	681b      	ldr	r3, [r3, #0]
2405bdae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2405bdb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2405bdb6:	d107      	bne.n	2405bdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
2405bdb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
2405bdbc:	4618      	mov	r0, r3
2405bdbe:	f000 fcd7 	bl	2405c770 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
2405bdc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
2405bdc4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
2405bdc6:	e20e      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
2405bdc8:	2300      	movs	r3, #0
2405bdca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2405bdcc:	e20b      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2405bdce:	4b4f      	ldr	r3, [pc, #316]	; (2405bf0c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
2405bdd0:	681b      	ldr	r3, [r3, #0]
2405bdd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2405bdd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
2405bdda:	d107      	bne.n	2405bdec <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2405bddc:	f107 0318 	add.w	r3, r7, #24
2405bde0:	4618      	mov	r0, r3
2405bde2:	f000 fa1d 	bl	2405c220 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
2405bde6:	69bb      	ldr	r3, [r7, #24]
2405bde8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
2405bdea:	e1fc      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
2405bdec:	2300      	movs	r3, #0
2405bdee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2405bdf0:	e1f9      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2405bdf2:	4b46      	ldr	r3, [pc, #280]	; (2405bf0c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
2405bdf4:	681b      	ldr	r3, [r3, #0]
2405bdf6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2405bdfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405bdfe:	d107      	bne.n	2405be10 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2405be00:	f107 030c 	add.w	r3, r7, #12
2405be04:	4618      	mov	r0, r3
2405be06:	f000 fb5f 	bl	2405c4c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
2405be0a:	68fb      	ldr	r3, [r7, #12]
2405be0c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
2405be0e:	e1ea      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
2405be10:	2300      	movs	r3, #0
2405be12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2405be14:	e1e7      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
2405be16:	4b3d      	ldr	r3, [pc, #244]	; (2405bf0c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
2405be18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405be1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
2405be1e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
2405be20:	4b3a      	ldr	r3, [pc, #232]	; (2405bf0c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
2405be22:	681b      	ldr	r3, [r3, #0]
2405be24:	f003 0304 	and.w	r3, r3, #4
2405be28:	2b04      	cmp	r3, #4
2405be2a:	d10c      	bne.n	2405be46 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
2405be2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405be2e:	2b00      	cmp	r3, #0
2405be30:	d109      	bne.n	2405be46 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
2405be32:	4b36      	ldr	r3, [pc, #216]	; (2405bf0c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
2405be34:	681b      	ldr	r3, [r3, #0]
2405be36:	08db      	lsrs	r3, r3, #3
2405be38:	f003 0303 	and.w	r3, r3, #3
2405be3c:	4a34      	ldr	r2, [pc, #208]	; (2405bf10 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
2405be3e:	fa22 f303 	lsr.w	r3, r2, r3
2405be42:	63fb      	str	r3, [r7, #60]	; 0x3c
2405be44:	e01e      	b.n	2405be84 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
2405be46:	4b31      	ldr	r3, [pc, #196]	; (2405bf0c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
2405be48:	681b      	ldr	r3, [r3, #0]
2405be4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405be4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405be52:	d106      	bne.n	2405be62 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
2405be54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405be56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2405be5a:	d102      	bne.n	2405be62 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
2405be5c:	4b2d      	ldr	r3, [pc, #180]	; (2405bf14 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
2405be5e:	63fb      	str	r3, [r7, #60]	; 0x3c
2405be60:	e010      	b.n	2405be84 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
2405be62:	4b2a      	ldr	r3, [pc, #168]	; (2405bf0c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
2405be64:	681b      	ldr	r3, [r3, #0]
2405be66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405be6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405be6e:	d106      	bne.n	2405be7e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
2405be70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405be72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405be76:	d102      	bne.n	2405be7e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
2405be78:	4b27      	ldr	r3, [pc, #156]	; (2405bf18 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
2405be7a:	63fb      	str	r3, [r7, #60]	; 0x3c
2405be7c:	e002      	b.n	2405be84 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
2405be7e:	2300      	movs	r3, #0
2405be80:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
2405be82:	e1b0      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
2405be84:	e1af      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
2405be86:	4b25      	ldr	r3, [pc, #148]	; (2405bf1c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
2405be88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2405be8a:	e1ac      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
2405be8c:	2300      	movs	r3, #0
2405be8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2405be90:	e1a9      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
2405be92:	687b      	ldr	r3, [r7, #4]
2405be94:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
2405be98:	d17d      	bne.n	2405bf96 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
2405be9a:	4b1c      	ldr	r3, [pc, #112]	; (2405bf0c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
2405be9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405be9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
2405bea2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
2405bea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405bea6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405beaa:	d039      	beq.n	2405bf20 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
2405beac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405beae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405beb2:	d86d      	bhi.n	2405bf90 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
2405beb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405beb6:	2b00      	cmp	r3, #0
2405beb8:	d004      	beq.n	2405bec4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
2405beba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405bebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2405bec0:	d012      	beq.n	2405bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
2405bec2:	e065      	b.n	2405bf90 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2405bec4:	4b11      	ldr	r3, [pc, #68]	; (2405bf0c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
2405bec6:	681b      	ldr	r3, [r3, #0]
2405bec8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2405becc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
2405bed0:	d107      	bne.n	2405bee2 <HAL_RCCEx_GetPeriphCLKFreq+0x542>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2405bed2:	f107 0318 	add.w	r3, r7, #24
2405bed6:	4618      	mov	r0, r3
2405bed8:	f000 f9a2 	bl	2405c220 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
2405bedc:	69bb      	ldr	r3, [r7, #24]
2405bede:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
2405bee0:	e181      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
2405bee2:	2300      	movs	r3, #0
2405bee4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2405bee6:	e17e      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2405bee8:	4b08      	ldr	r3, [pc, #32]	; (2405bf0c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
2405beea:	681b      	ldr	r3, [r3, #0]
2405beec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2405bef0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405bef4:	d107      	bne.n	2405bf06 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2405bef6:	f107 030c 	add.w	r3, r7, #12
2405befa:	4618      	mov	r0, r3
2405befc:	f000 fae4 	bl	2405c4c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
2405bf00:	697b      	ldr	r3, [r7, #20]
2405bf02:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
2405bf04:	e16f      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
2405bf06:	2300      	movs	r3, #0
2405bf08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2405bf0a:	e16c      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
2405bf0c:	58024400 	.word	0x58024400
2405bf10:	03d09000 	.word	0x03d09000
2405bf14:	003d0900 	.word	0x003d0900
2405bf18:	016e3600 	.word	0x016e3600
2405bf1c:	00bb8000 	.word	0x00bb8000
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
2405bf20:	4ba0      	ldr	r3, [pc, #640]	; (2405c1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
2405bf22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405bf24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
2405bf28:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
2405bf2a:	4b9e      	ldr	r3, [pc, #632]	; (2405c1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
2405bf2c:	681b      	ldr	r3, [r3, #0]
2405bf2e:	f003 0304 	and.w	r3, r3, #4
2405bf32:	2b04      	cmp	r3, #4
2405bf34:	d10c      	bne.n	2405bf50 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
2405bf36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405bf38:	2b00      	cmp	r3, #0
2405bf3a:	d109      	bne.n	2405bf50 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
2405bf3c:	4b99      	ldr	r3, [pc, #612]	; (2405c1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
2405bf3e:	681b      	ldr	r3, [r3, #0]
2405bf40:	08db      	lsrs	r3, r3, #3
2405bf42:	f003 0303 	and.w	r3, r3, #3
2405bf46:	4a98      	ldr	r2, [pc, #608]	; (2405c1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
2405bf48:	fa22 f303 	lsr.w	r3, r2, r3
2405bf4c:	63fb      	str	r3, [r7, #60]	; 0x3c
2405bf4e:	e01e      	b.n	2405bf8e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
2405bf50:	4b94      	ldr	r3, [pc, #592]	; (2405c1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
2405bf52:	681b      	ldr	r3, [r3, #0]
2405bf54:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405bf58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405bf5c:	d106      	bne.n	2405bf6c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
2405bf5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405bf60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2405bf64:	d102      	bne.n	2405bf6c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
2405bf66:	4b91      	ldr	r3, [pc, #580]	; (2405c1ac <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
2405bf68:	63fb      	str	r3, [r7, #60]	; 0x3c
2405bf6a:	e010      	b.n	2405bf8e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
2405bf6c:	4b8d      	ldr	r3, [pc, #564]	; (2405c1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
2405bf6e:	681b      	ldr	r3, [r3, #0]
2405bf70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405bf74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405bf78:	d106      	bne.n	2405bf88 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
2405bf7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2405bf7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405bf80:	d102      	bne.n	2405bf88 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
2405bf82:	4b8b      	ldr	r3, [pc, #556]	; (2405c1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
2405bf84:	63fb      	str	r3, [r7, #60]	; 0x3c
2405bf86:	e002      	b.n	2405bf8e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
2405bf88:	2300      	movs	r3, #0
2405bf8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
2405bf8c:	e12b      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
2405bf8e:	e12a      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
2405bf90:	2300      	movs	r3, #0
2405bf92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2405bf94:	e127      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
2405bf96:	687b      	ldr	r3, [r7, #4]
2405bf98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2405bf9c:	d133      	bne.n	2405c006 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
2405bf9e:	4b81      	ldr	r3, [pc, #516]	; (2405c1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
2405bfa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405bfa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2405bfa6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
2405bfa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405bfaa:	2b00      	cmp	r3, #0
2405bfac:	d004      	beq.n	2405bfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
2405bfae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405bfb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2405bfb4:	d012      	beq.n	2405bfdc <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
2405bfb6:	e023      	b.n	2405c000 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
2405bfb8:	4b7a      	ldr	r3, [pc, #488]	; (2405c1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
2405bfba:	681b      	ldr	r3, [r3, #0]
2405bfbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2405bfc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2405bfc4:	d107      	bne.n	2405bfd6 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
2405bfc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
2405bfca:	4618      	mov	r0, r3
2405bfcc:	f000 fbd0 	bl	2405c770 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
2405bfd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
2405bfd2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
2405bfd4:	e107      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
2405bfd6:	2300      	movs	r3, #0
2405bfd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2405bfda:	e104      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2405bfdc:	4b71      	ldr	r3, [pc, #452]	; (2405c1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
2405bfde:	681b      	ldr	r3, [r3, #0]
2405bfe0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2405bfe4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
2405bfe8:	d107      	bne.n	2405bffa <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2405bfea:	f107 0318 	add.w	r3, r7, #24
2405bfee:	4618      	mov	r0, r3
2405bff0:	f000 f916 	bl	2405c220 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
2405bff4:	6a3b      	ldr	r3, [r7, #32]
2405bff6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
2405bff8:	e0f5      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
2405bffa:	2300      	movs	r3, #0
2405bffc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2405bffe:	e0f2      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
2405c000:	2300      	movs	r3, #0
2405c002:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2405c004:	e0ef      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
2405c006:	687b      	ldr	r3, [r7, #4]
2405c008:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2405c00c:	f040 8091 	bne.w	2405c132 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
2405c010:	4b64      	ldr	r3, [pc, #400]	; (2405c1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
2405c012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405c014:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
2405c018:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
2405c01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c01c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
2405c020:	f000 8081 	beq.w	2405c126 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
2405c024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c026:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
2405c02a:	d87f      	bhi.n	2405c12c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
2405c02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c02e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
2405c032:	d06b      	beq.n	2405c10c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
2405c034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c036:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
2405c03a:	d877      	bhi.n	2405c12c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
2405c03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c03e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2405c042:	d056      	beq.n	2405c0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
2405c044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2405c04a:	d86f      	bhi.n	2405c12c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
2405c04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c04e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
2405c052:	d03b      	beq.n	2405c0cc <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
2405c054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c056:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
2405c05a:	d867      	bhi.n	2405c12c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
2405c05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c05e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405c062:	d021      	beq.n	2405c0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x708>
2405c064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c066:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405c06a:	d85f      	bhi.n	2405c12c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
2405c06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c06e:	2b00      	cmp	r3, #0
2405c070:	d004      	beq.n	2405c07c <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
2405c072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c074:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2405c078:	d004      	beq.n	2405c084 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
2405c07a:	e057      	b.n	2405c12c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
2405c07c:	f000 f8ba 	bl	2405c1f4 <HAL_RCCEx_GetD3PCLK1Freq>
2405c080:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
2405c082:	e0b0      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2405c084:	4b47      	ldr	r3, [pc, #284]	; (2405c1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
2405c086:	681b      	ldr	r3, [r3, #0]
2405c088:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2405c08c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
2405c090:	d107      	bne.n	2405c0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2405c092:	f107 0318 	add.w	r3, r7, #24
2405c096:	4618      	mov	r0, r3
2405c098:	f000 f8c2 	bl	2405c220 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
2405c09c:	69fb      	ldr	r3, [r7, #28]
2405c09e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
2405c0a0:	e0a1      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
2405c0a2:	2300      	movs	r3, #0
2405c0a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2405c0a6:	e09e      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2405c0a8:	4b3e      	ldr	r3, [pc, #248]	; (2405c1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
2405c0aa:	681b      	ldr	r3, [r3, #0]
2405c0ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2405c0b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405c0b4:	d107      	bne.n	2405c0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2405c0b6:	f107 030c 	add.w	r3, r7, #12
2405c0ba:	4618      	mov	r0, r3
2405c0bc:	f000 fa04 	bl	2405c4c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
2405c0c0:	693b      	ldr	r3, [r7, #16]
2405c0c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
2405c0c4:	e08f      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
2405c0c6:	2300      	movs	r3, #0
2405c0c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2405c0ca:	e08c      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
2405c0cc:	4b35      	ldr	r3, [pc, #212]	; (2405c1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
2405c0ce:	681b      	ldr	r3, [r3, #0]
2405c0d0:	f003 0304 	and.w	r3, r3, #4
2405c0d4:	2b04      	cmp	r3, #4
2405c0d6:	d109      	bne.n	2405c0ec <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
2405c0d8:	4b32      	ldr	r3, [pc, #200]	; (2405c1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
2405c0da:	681b      	ldr	r3, [r3, #0]
2405c0dc:	08db      	lsrs	r3, r3, #3
2405c0de:	f003 0303 	and.w	r3, r3, #3
2405c0e2:	4a31      	ldr	r2, [pc, #196]	; (2405c1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
2405c0e4:	fa22 f303 	lsr.w	r3, r2, r3
2405c0e8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
2405c0ea:	e07c      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
2405c0ec:	2300      	movs	r3, #0
2405c0ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2405c0f0:	e079      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
2405c0f2:	4b2c      	ldr	r3, [pc, #176]	; (2405c1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
2405c0f4:	681b      	ldr	r3, [r3, #0]
2405c0f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405c0fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405c0fe:	d102      	bne.n	2405c106 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
         {
          frequency = CSI_VALUE;
2405c100:	4b2a      	ldr	r3, [pc, #168]	; (2405c1ac <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
2405c102:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
2405c104:	e06f      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
2405c106:	2300      	movs	r3, #0
2405c108:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2405c10a:	e06c      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
2405c10c:	4b25      	ldr	r3, [pc, #148]	; (2405c1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
2405c10e:	681b      	ldr	r3, [r3, #0]
2405c110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405c114:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405c118:	d102      	bne.n	2405c120 <HAL_RCCEx_GetPeriphCLKFreq+0x780>
         {
          frequency = HSE_VALUE;
2405c11a:	4b25      	ldr	r3, [pc, #148]	; (2405c1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
2405c11c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
2405c11e:	e062      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
2405c120:	2300      	movs	r3, #0
2405c122:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2405c124:	e05f      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
2405c126:	4b23      	ldr	r3, [pc, #140]	; (2405c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
2405c128:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2405c12a:	e05c      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
2405c12c:	2300      	movs	r3, #0
2405c12e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2405c130:	e059      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
2405c132:	687b      	ldr	r3, [r7, #4]
2405c134:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2405c138:	d153      	bne.n	2405c1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
2405c13a:	4b1a      	ldr	r3, [pc, #104]	; (2405c1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
2405c13c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405c13e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
2405c142:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
2405c144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c146:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405c14a:	d035      	beq.n	2405c1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>
2405c14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c14e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2405c152:	d843      	bhi.n	2405c1dc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
2405c154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c156:	2b00      	cmp	r3, #0
2405c158:	d004      	beq.n	2405c164 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
2405c15a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2405c15c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2405c160:	d00d      	beq.n	2405c17e <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
2405c162:	e03b      	b.n	2405c1dc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
2405c164:	4b0f      	ldr	r3, [pc, #60]	; (2405c1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
2405c166:	681b      	ldr	r3, [r3, #0]
2405c168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405c16c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405c170:	d102      	bne.n	2405c178 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
         {
          frequency = HSE_VALUE;
2405c172:	4b0f      	ldr	r3, [pc, #60]	; (2405c1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
2405c174:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
2405c176:	e036      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
2405c178:	2300      	movs	r3, #0
2405c17a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2405c17c:	e033      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
2405c17e:	4b09      	ldr	r3, [pc, #36]	; (2405c1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
2405c180:	681b      	ldr	r3, [r3, #0]
2405c182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2405c186:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2405c18a:	d107      	bne.n	2405c19c <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
2405c18c:	f107 0324 	add.w	r3, r7, #36	; 0x24
2405c190:	4618      	mov	r0, r3
2405c192:	f000 faed 	bl	2405c770 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
2405c196:	6abb      	ldr	r3, [r7, #40]	; 0x28
2405c198:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
2405c19a:	e024      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
2405c19c:	2300      	movs	r3, #0
2405c19e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2405c1a0:	e021      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
2405c1a2:	bf00      	nop
2405c1a4:	58024400 	.word	0x58024400
2405c1a8:	03d09000 	.word	0x03d09000
2405c1ac:	003d0900 	.word	0x003d0900
2405c1b0:	016e3600 	.word	0x016e3600
2405c1b4:	00bb8000 	.word	0x00bb8000
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2405c1b8:	4b0d      	ldr	r3, [pc, #52]	; (2405c1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
2405c1ba:	681b      	ldr	r3, [r3, #0]
2405c1bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2405c1c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
2405c1c4:	d107      	bne.n	2405c1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2405c1c6:	f107 0318 	add.w	r3, r7, #24
2405c1ca:	4618      	mov	r0, r3
2405c1cc:	f000 f828 	bl	2405c220 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
2405c1d0:	69fb      	ldr	r3, [r7, #28]
2405c1d2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
2405c1d4:	e007      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
2405c1d6:	2300      	movs	r3, #0
2405c1d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2405c1da:	e004      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
2405c1dc:	2300      	movs	r3, #0
2405c1de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2405c1e0:	e001      	b.n	2405c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else
    {
      frequency = 0;
2405c1e2:	2300      	movs	r3, #0
2405c1e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
2405c1e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
2405c1e8:	4618      	mov	r0, r3
2405c1ea:	3740      	adds	r7, #64	; 0x40
2405c1ec:	46bd      	mov	sp, r7
2405c1ee:	bd80      	pop	{r7, pc}
2405c1f0:	58024400 	.word	0x58024400

2405c1f4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
2405c1f4:	b580      	push	{r7, lr}
2405c1f6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
2405c1f8:	f7fe fc96 	bl	2405ab28 <HAL_RCC_GetHCLKFreq>
2405c1fc:	4602      	mov	r2, r0
2405c1fe:	4b06      	ldr	r3, [pc, #24]	; (2405c218 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
2405c200:	6a1b      	ldr	r3, [r3, #32]
2405c202:	091b      	lsrs	r3, r3, #4
2405c204:	f003 0307 	and.w	r3, r3, #7
2405c208:	4904      	ldr	r1, [pc, #16]	; (2405c21c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
2405c20a:	5ccb      	ldrb	r3, [r1, r3]
2405c20c:	f003 031f 	and.w	r3, r3, #31
2405c210:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
2405c214:	4618      	mov	r0, r3
2405c216:	bd80      	pop	{r7, pc}
2405c218:	58024400 	.word	0x58024400
2405c21c:	24060f1c 	.word	0x24060f1c

2405c220 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
2405c220:	b480      	push	{r7}
2405c222:	b089      	sub	sp, #36	; 0x24
2405c224:	af00      	add	r7, sp, #0
2405c226:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2405c228:	4ba1      	ldr	r3, [pc, #644]	; (2405c4b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405c22a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405c22c:	f003 0303 	and.w	r3, r3, #3
2405c230:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
2405c232:	4b9f      	ldr	r3, [pc, #636]	; (2405c4b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405c234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405c236:	0b1b      	lsrs	r3, r3, #12
2405c238:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2405c23c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
2405c23e:	4b9c      	ldr	r3, [pc, #624]	; (2405c4b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405c240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405c242:	091b      	lsrs	r3, r3, #4
2405c244:	f003 0301 	and.w	r3, r3, #1
2405c248:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
2405c24a:	4b99      	ldr	r3, [pc, #612]	; (2405c4b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405c24c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2405c24e:	08db      	lsrs	r3, r3, #3
2405c250:	f3c3 030c 	ubfx	r3, r3, #0, #13
2405c254:	693a      	ldr	r2, [r7, #16]
2405c256:	fb02 f303 	mul.w	r3, r2, r3
2405c25a:	ee07 3a90 	vmov	s15, r3
2405c25e:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405c262:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
2405c266:	697b      	ldr	r3, [r7, #20]
2405c268:	2b00      	cmp	r3, #0
2405c26a:	f000 8111 	beq.w	2405c490 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
2405c26e:	69bb      	ldr	r3, [r7, #24]
2405c270:	2b02      	cmp	r3, #2
2405c272:	f000 8083 	beq.w	2405c37c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
2405c276:	69bb      	ldr	r3, [r7, #24]
2405c278:	2b02      	cmp	r3, #2
2405c27a:	f200 80a1 	bhi.w	2405c3c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
2405c27e:	69bb      	ldr	r3, [r7, #24]
2405c280:	2b00      	cmp	r3, #0
2405c282:	d003      	beq.n	2405c28c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
2405c284:	69bb      	ldr	r3, [r7, #24]
2405c286:	2b01      	cmp	r3, #1
2405c288:	d056      	beq.n	2405c338 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
2405c28a:	e099      	b.n	2405c3c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2405c28c:	4b88      	ldr	r3, [pc, #544]	; (2405c4b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405c28e:	681b      	ldr	r3, [r3, #0]
2405c290:	f003 0320 	and.w	r3, r3, #32
2405c294:	2b00      	cmp	r3, #0
2405c296:	d02d      	beq.n	2405c2f4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
2405c298:	4b85      	ldr	r3, [pc, #532]	; (2405c4b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405c29a:	681b      	ldr	r3, [r3, #0]
2405c29c:	08db      	lsrs	r3, r3, #3
2405c29e:	f003 0303 	and.w	r3, r3, #3
2405c2a2:	4a84      	ldr	r2, [pc, #528]	; (2405c4b4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
2405c2a4:	fa22 f303 	lsr.w	r3, r2, r3
2405c2a8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
2405c2aa:	68bb      	ldr	r3, [r7, #8]
2405c2ac:	ee07 3a90 	vmov	s15, r3
2405c2b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405c2b4:	697b      	ldr	r3, [r7, #20]
2405c2b6:	ee07 3a90 	vmov	s15, r3
2405c2ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405c2be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405c2c2:	4b7b      	ldr	r3, [pc, #492]	; (2405c4b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405c2c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405c2c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405c2ca:	ee07 3a90 	vmov	s15, r3
2405c2ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405c2d2:	ed97 6a03 	vldr	s12, [r7, #12]
2405c2d6:	eddf 5a78 	vldr	s11, [pc, #480]	; 2405c4b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
2405c2da:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405c2de:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405c2e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405c2e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405c2ea:	ee67 7a27 	vmul.f32	s15, s14, s15
2405c2ee:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
2405c2f2:	e087      	b.n	2405c404 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
2405c2f4:	697b      	ldr	r3, [r7, #20]
2405c2f6:	ee07 3a90 	vmov	s15, r3
2405c2fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405c2fe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 2405c4bc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
2405c302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405c306:	4b6a      	ldr	r3, [pc, #424]	; (2405c4b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405c308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405c30a:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405c30e:	ee07 3a90 	vmov	s15, r3
2405c312:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405c316:	ed97 6a03 	vldr	s12, [r7, #12]
2405c31a:	eddf 5a67 	vldr	s11, [pc, #412]	; 2405c4b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
2405c31e:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405c322:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405c326:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405c32a:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405c32e:	ee67 7a27 	vmul.f32	s15, s14, s15
2405c332:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
2405c336:	e065      	b.n	2405c404 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
2405c338:	697b      	ldr	r3, [r7, #20]
2405c33a:	ee07 3a90 	vmov	s15, r3
2405c33e:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405c342:	eddf 6a5f 	vldr	s13, [pc, #380]	; 2405c4c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
2405c346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405c34a:	4b59      	ldr	r3, [pc, #356]	; (2405c4b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405c34c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405c34e:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405c352:	ee07 3a90 	vmov	s15, r3
2405c356:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405c35a:	ed97 6a03 	vldr	s12, [r7, #12]
2405c35e:	eddf 5a56 	vldr	s11, [pc, #344]	; 2405c4b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
2405c362:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405c366:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405c36a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405c36e:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405c372:	ee67 7a27 	vmul.f32	s15, s14, s15
2405c376:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
2405c37a:	e043      	b.n	2405c404 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
2405c37c:	697b      	ldr	r3, [r7, #20]
2405c37e:	ee07 3a90 	vmov	s15, r3
2405c382:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405c386:	eddf 6a4f 	vldr	s13, [pc, #316]	; 2405c4c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
2405c38a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405c38e:	4b48      	ldr	r3, [pc, #288]	; (2405c4b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405c390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405c392:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405c396:	ee07 3a90 	vmov	s15, r3
2405c39a:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405c39e:	ed97 6a03 	vldr	s12, [r7, #12]
2405c3a2:	eddf 5a45 	vldr	s11, [pc, #276]	; 2405c4b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
2405c3a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405c3aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405c3ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405c3b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405c3b6:	ee67 7a27 	vmul.f32	s15, s14, s15
2405c3ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
2405c3be:	e021      	b.n	2405c404 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
2405c3c0:	697b      	ldr	r3, [r7, #20]
2405c3c2:	ee07 3a90 	vmov	s15, r3
2405c3c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405c3ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 2405c4c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
2405c3ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405c3d2:	4b37      	ldr	r3, [pc, #220]	; (2405c4b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405c3d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405c3d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405c3da:	ee07 3a90 	vmov	s15, r3
2405c3de:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405c3e2:	ed97 6a03 	vldr	s12, [r7, #12]
2405c3e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 2405c4b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
2405c3ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405c3ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405c3f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405c3f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405c3fa:	ee67 7a27 	vmul.f32	s15, s14, s15
2405c3fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
2405c402:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
2405c404:	4b2a      	ldr	r3, [pc, #168]	; (2405c4b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405c406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405c408:	0a5b      	lsrs	r3, r3, #9
2405c40a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2405c40e:	ee07 3a90 	vmov	s15, r3
2405c412:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405c416:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2405c41a:	ee37 7a87 	vadd.f32	s14, s15, s14
2405c41e:	edd7 6a07 	vldr	s13, [r7, #28]
2405c422:	eec6 7a87 	vdiv.f32	s15, s13, s14
2405c426:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2405c42a:	ee17 2a90 	vmov	r2, s15
2405c42e:	687b      	ldr	r3, [r7, #4]
2405c430:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
2405c432:	4b1f      	ldr	r3, [pc, #124]	; (2405c4b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405c434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405c436:	0c1b      	lsrs	r3, r3, #16
2405c438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2405c43c:	ee07 3a90 	vmov	s15, r3
2405c440:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405c444:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2405c448:	ee37 7a87 	vadd.f32	s14, s15, s14
2405c44c:	edd7 6a07 	vldr	s13, [r7, #28]
2405c450:	eec6 7a87 	vdiv.f32	s15, s13, s14
2405c454:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2405c458:	ee17 2a90 	vmov	r2, s15
2405c45c:	687b      	ldr	r3, [r7, #4]
2405c45e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
2405c460:	4b13      	ldr	r3, [pc, #76]	; (2405c4b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
2405c462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405c464:	0e1b      	lsrs	r3, r3, #24
2405c466:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2405c46a:	ee07 3a90 	vmov	s15, r3
2405c46e:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405c472:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2405c476:	ee37 7a87 	vadd.f32	s14, s15, s14
2405c47a:	edd7 6a07 	vldr	s13, [r7, #28]
2405c47e:	eec6 7a87 	vdiv.f32	s15, s13, s14
2405c482:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2405c486:	ee17 2a90 	vmov	r2, s15
2405c48a:	687b      	ldr	r3, [r7, #4]
2405c48c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
2405c48e:	e008      	b.n	2405c4a2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
2405c490:	687b      	ldr	r3, [r7, #4]
2405c492:	2200      	movs	r2, #0
2405c494:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
2405c496:	687b      	ldr	r3, [r7, #4]
2405c498:	2200      	movs	r2, #0
2405c49a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
2405c49c:	687b      	ldr	r3, [r7, #4]
2405c49e:	2200      	movs	r2, #0
2405c4a0:	609a      	str	r2, [r3, #8]
}
2405c4a2:	bf00      	nop
2405c4a4:	3724      	adds	r7, #36	; 0x24
2405c4a6:	46bd      	mov	sp, r7
2405c4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
2405c4ac:	4770      	bx	lr
2405c4ae:	bf00      	nop
2405c4b0:	58024400 	.word	0x58024400
2405c4b4:	03d09000 	.word	0x03d09000
2405c4b8:	46000000 	.word	0x46000000
2405c4bc:	4c742400 	.word	0x4c742400
2405c4c0:	4a742400 	.word	0x4a742400
2405c4c4:	4bb71b00 	.word	0x4bb71b00

2405c4c8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
2405c4c8:	b480      	push	{r7}
2405c4ca:	b089      	sub	sp, #36	; 0x24
2405c4cc:	af00      	add	r7, sp, #0
2405c4ce:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2405c4d0:	4ba1      	ldr	r3, [pc, #644]	; (2405c758 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405c4d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405c4d4:	f003 0303 	and.w	r3, r3, #3
2405c4d8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
2405c4da:	4b9f      	ldr	r3, [pc, #636]	; (2405c758 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405c4dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405c4de:	0d1b      	lsrs	r3, r3, #20
2405c4e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2405c4e4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
2405c4e6:	4b9c      	ldr	r3, [pc, #624]	; (2405c758 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405c4e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405c4ea:	0a1b      	lsrs	r3, r3, #8
2405c4ec:	f003 0301 	and.w	r3, r3, #1
2405c4f0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
2405c4f2:	4b99      	ldr	r3, [pc, #612]	; (2405c758 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405c4f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2405c4f6:	08db      	lsrs	r3, r3, #3
2405c4f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
2405c4fc:	693a      	ldr	r2, [r7, #16]
2405c4fe:	fb02 f303 	mul.w	r3, r2, r3
2405c502:	ee07 3a90 	vmov	s15, r3
2405c506:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405c50a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
2405c50e:	697b      	ldr	r3, [r7, #20]
2405c510:	2b00      	cmp	r3, #0
2405c512:	f000 8111 	beq.w	2405c738 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
2405c516:	69bb      	ldr	r3, [r7, #24]
2405c518:	2b02      	cmp	r3, #2
2405c51a:	f000 8083 	beq.w	2405c624 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
2405c51e:	69bb      	ldr	r3, [r7, #24]
2405c520:	2b02      	cmp	r3, #2
2405c522:	f200 80a1 	bhi.w	2405c668 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
2405c526:	69bb      	ldr	r3, [r7, #24]
2405c528:	2b00      	cmp	r3, #0
2405c52a:	d003      	beq.n	2405c534 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
2405c52c:	69bb      	ldr	r3, [r7, #24]
2405c52e:	2b01      	cmp	r3, #1
2405c530:	d056      	beq.n	2405c5e0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
2405c532:	e099      	b.n	2405c668 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2405c534:	4b88      	ldr	r3, [pc, #544]	; (2405c758 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405c536:	681b      	ldr	r3, [r3, #0]
2405c538:	f003 0320 	and.w	r3, r3, #32
2405c53c:	2b00      	cmp	r3, #0
2405c53e:	d02d      	beq.n	2405c59c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
2405c540:	4b85      	ldr	r3, [pc, #532]	; (2405c758 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405c542:	681b      	ldr	r3, [r3, #0]
2405c544:	08db      	lsrs	r3, r3, #3
2405c546:	f003 0303 	and.w	r3, r3, #3
2405c54a:	4a84      	ldr	r2, [pc, #528]	; (2405c75c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
2405c54c:	fa22 f303 	lsr.w	r3, r2, r3
2405c550:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
2405c552:	68bb      	ldr	r3, [r7, #8]
2405c554:	ee07 3a90 	vmov	s15, r3
2405c558:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405c55c:	697b      	ldr	r3, [r7, #20]
2405c55e:	ee07 3a90 	vmov	s15, r3
2405c562:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405c566:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405c56a:	4b7b      	ldr	r3, [pc, #492]	; (2405c758 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405c56c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405c56e:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405c572:	ee07 3a90 	vmov	s15, r3
2405c576:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405c57a:	ed97 6a03 	vldr	s12, [r7, #12]
2405c57e:	eddf 5a78 	vldr	s11, [pc, #480]	; 2405c760 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
2405c582:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405c586:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405c58a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405c58e:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405c592:	ee67 7a27 	vmul.f32	s15, s14, s15
2405c596:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
2405c59a:	e087      	b.n	2405c6ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
2405c59c:	697b      	ldr	r3, [r7, #20]
2405c59e:	ee07 3a90 	vmov	s15, r3
2405c5a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405c5a6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 2405c764 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
2405c5aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405c5ae:	4b6a      	ldr	r3, [pc, #424]	; (2405c758 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405c5b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405c5b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405c5b6:	ee07 3a90 	vmov	s15, r3
2405c5ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405c5be:	ed97 6a03 	vldr	s12, [r7, #12]
2405c5c2:	eddf 5a67 	vldr	s11, [pc, #412]	; 2405c760 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
2405c5c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405c5ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405c5ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405c5d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405c5d6:	ee67 7a27 	vmul.f32	s15, s14, s15
2405c5da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
2405c5de:	e065      	b.n	2405c6ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
2405c5e0:	697b      	ldr	r3, [r7, #20]
2405c5e2:	ee07 3a90 	vmov	s15, r3
2405c5e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405c5ea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 2405c768 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
2405c5ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405c5f2:	4b59      	ldr	r3, [pc, #356]	; (2405c758 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405c5f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405c5f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405c5fa:	ee07 3a90 	vmov	s15, r3
2405c5fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405c602:	ed97 6a03 	vldr	s12, [r7, #12]
2405c606:	eddf 5a56 	vldr	s11, [pc, #344]	; 2405c760 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
2405c60a:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405c60e:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405c612:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405c616:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405c61a:	ee67 7a27 	vmul.f32	s15, s14, s15
2405c61e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
2405c622:	e043      	b.n	2405c6ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
2405c624:	697b      	ldr	r3, [r7, #20]
2405c626:	ee07 3a90 	vmov	s15, r3
2405c62a:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405c62e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 2405c76c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
2405c632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405c636:	4b48      	ldr	r3, [pc, #288]	; (2405c758 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405c638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405c63a:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405c63e:	ee07 3a90 	vmov	s15, r3
2405c642:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405c646:	ed97 6a03 	vldr	s12, [r7, #12]
2405c64a:	eddf 5a45 	vldr	s11, [pc, #276]	; 2405c760 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
2405c64e:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405c652:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405c656:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405c65a:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405c65e:	ee67 7a27 	vmul.f32	s15, s14, s15
2405c662:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
2405c666:	e021      	b.n	2405c6ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
2405c668:	697b      	ldr	r3, [r7, #20]
2405c66a:	ee07 3a90 	vmov	s15, r3
2405c66e:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405c672:	eddf 6a3d 	vldr	s13, [pc, #244]	; 2405c768 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
2405c676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405c67a:	4b37      	ldr	r3, [pc, #220]	; (2405c758 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405c67c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405c67e:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405c682:	ee07 3a90 	vmov	s15, r3
2405c686:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405c68a:	ed97 6a03 	vldr	s12, [r7, #12]
2405c68e:	eddf 5a34 	vldr	s11, [pc, #208]	; 2405c760 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
2405c692:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405c696:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405c69a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405c69e:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405c6a2:	ee67 7a27 	vmul.f32	s15, s14, s15
2405c6a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
2405c6aa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
2405c6ac:	4b2a      	ldr	r3, [pc, #168]	; (2405c758 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405c6ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405c6b0:	0a5b      	lsrs	r3, r3, #9
2405c6b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2405c6b6:	ee07 3a90 	vmov	s15, r3
2405c6ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405c6be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2405c6c2:	ee37 7a87 	vadd.f32	s14, s15, s14
2405c6c6:	edd7 6a07 	vldr	s13, [r7, #28]
2405c6ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
2405c6ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2405c6d2:	ee17 2a90 	vmov	r2, s15
2405c6d6:	687b      	ldr	r3, [r7, #4]
2405c6d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
2405c6da:	4b1f      	ldr	r3, [pc, #124]	; (2405c758 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405c6dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405c6de:	0c1b      	lsrs	r3, r3, #16
2405c6e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2405c6e4:	ee07 3a90 	vmov	s15, r3
2405c6e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405c6ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2405c6f0:	ee37 7a87 	vadd.f32	s14, s15, s14
2405c6f4:	edd7 6a07 	vldr	s13, [r7, #28]
2405c6f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
2405c6fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2405c700:	ee17 2a90 	vmov	r2, s15
2405c704:	687b      	ldr	r3, [r7, #4]
2405c706:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
2405c708:	4b13      	ldr	r3, [pc, #76]	; (2405c758 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
2405c70a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2405c70c:	0e1b      	lsrs	r3, r3, #24
2405c70e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2405c712:	ee07 3a90 	vmov	s15, r3
2405c716:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405c71a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2405c71e:	ee37 7a87 	vadd.f32	s14, s15, s14
2405c722:	edd7 6a07 	vldr	s13, [r7, #28]
2405c726:	eec6 7a87 	vdiv.f32	s15, s13, s14
2405c72a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2405c72e:	ee17 2a90 	vmov	r2, s15
2405c732:	687b      	ldr	r3, [r7, #4]
2405c734:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
2405c736:	e008      	b.n	2405c74a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
2405c738:	687b      	ldr	r3, [r7, #4]
2405c73a:	2200      	movs	r2, #0
2405c73c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
2405c73e:	687b      	ldr	r3, [r7, #4]
2405c740:	2200      	movs	r2, #0
2405c742:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
2405c744:	687b      	ldr	r3, [r7, #4]
2405c746:	2200      	movs	r2, #0
2405c748:	609a      	str	r2, [r3, #8]
}
2405c74a:	bf00      	nop
2405c74c:	3724      	adds	r7, #36	; 0x24
2405c74e:	46bd      	mov	sp, r7
2405c750:	f85d 7b04 	ldr.w	r7, [sp], #4
2405c754:	4770      	bx	lr
2405c756:	bf00      	nop
2405c758:	58024400 	.word	0x58024400
2405c75c:	03d09000 	.word	0x03d09000
2405c760:	46000000 	.word	0x46000000
2405c764:	4c742400 	.word	0x4c742400
2405c768:	4a742400 	.word	0x4a742400
2405c76c:	4bb71b00 	.word	0x4bb71b00

2405c770 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
2405c770:	b480      	push	{r7}
2405c772:	b089      	sub	sp, #36	; 0x24
2405c774:	af00      	add	r7, sp, #0
2405c776:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2405c778:	4ba0      	ldr	r3, [pc, #640]	; (2405c9fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405c77a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405c77c:	f003 0303 	and.w	r3, r3, #3
2405c780:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
2405c782:	4b9e      	ldr	r3, [pc, #632]	; (2405c9fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405c784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405c786:	091b      	lsrs	r3, r3, #4
2405c788:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2405c78c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
2405c78e:	4b9b      	ldr	r3, [pc, #620]	; (2405c9fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405c790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405c792:	f003 0301 	and.w	r3, r3, #1
2405c796:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
2405c798:	4b98      	ldr	r3, [pc, #608]	; (2405c9fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405c79a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2405c79c:	08db      	lsrs	r3, r3, #3
2405c79e:	f3c3 030c 	ubfx	r3, r3, #0, #13
2405c7a2:	693a      	ldr	r2, [r7, #16]
2405c7a4:	fb02 f303 	mul.w	r3, r2, r3
2405c7a8:	ee07 3a90 	vmov	s15, r3
2405c7ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405c7b0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
2405c7b4:	697b      	ldr	r3, [r7, #20]
2405c7b6:	2b00      	cmp	r3, #0
2405c7b8:	f000 8111 	beq.w	2405c9de <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
2405c7bc:	69bb      	ldr	r3, [r7, #24]
2405c7be:	2b02      	cmp	r3, #2
2405c7c0:	f000 8083 	beq.w	2405c8ca <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
2405c7c4:	69bb      	ldr	r3, [r7, #24]
2405c7c6:	2b02      	cmp	r3, #2
2405c7c8:	f200 80a1 	bhi.w	2405c90e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
2405c7cc:	69bb      	ldr	r3, [r7, #24]
2405c7ce:	2b00      	cmp	r3, #0
2405c7d0:	d003      	beq.n	2405c7da <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
2405c7d2:	69bb      	ldr	r3, [r7, #24]
2405c7d4:	2b01      	cmp	r3, #1
2405c7d6:	d056      	beq.n	2405c886 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
2405c7d8:	e099      	b.n	2405c90e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2405c7da:	4b88      	ldr	r3, [pc, #544]	; (2405c9fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405c7dc:	681b      	ldr	r3, [r3, #0]
2405c7de:	f003 0320 	and.w	r3, r3, #32
2405c7e2:	2b00      	cmp	r3, #0
2405c7e4:	d02d      	beq.n	2405c842 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
2405c7e6:	4b85      	ldr	r3, [pc, #532]	; (2405c9fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405c7e8:	681b      	ldr	r3, [r3, #0]
2405c7ea:	08db      	lsrs	r3, r3, #3
2405c7ec:	f003 0303 	and.w	r3, r3, #3
2405c7f0:	4a83      	ldr	r2, [pc, #524]	; (2405ca00 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
2405c7f2:	fa22 f303 	lsr.w	r3, r2, r3
2405c7f6:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
2405c7f8:	68bb      	ldr	r3, [r7, #8]
2405c7fa:	ee07 3a90 	vmov	s15, r3
2405c7fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405c802:	697b      	ldr	r3, [r7, #20]
2405c804:	ee07 3a90 	vmov	s15, r3
2405c808:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405c80c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405c810:	4b7a      	ldr	r3, [pc, #488]	; (2405c9fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405c812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405c814:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405c818:	ee07 3a90 	vmov	s15, r3
2405c81c:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405c820:	ed97 6a03 	vldr	s12, [r7, #12]
2405c824:	eddf 5a77 	vldr	s11, [pc, #476]	; 2405ca04 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
2405c828:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405c82c:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405c830:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405c834:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405c838:	ee67 7a27 	vmul.f32	s15, s14, s15
2405c83c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
2405c840:	e087      	b.n	2405c952 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
2405c842:	697b      	ldr	r3, [r7, #20]
2405c844:	ee07 3a90 	vmov	s15, r3
2405c848:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405c84c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 2405ca08 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
2405c850:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405c854:	4b69      	ldr	r3, [pc, #420]	; (2405c9fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405c856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405c858:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405c85c:	ee07 3a90 	vmov	s15, r3
2405c860:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405c864:	ed97 6a03 	vldr	s12, [r7, #12]
2405c868:	eddf 5a66 	vldr	s11, [pc, #408]	; 2405ca04 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
2405c86c:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405c870:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405c874:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405c878:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405c87c:	ee67 7a27 	vmul.f32	s15, s14, s15
2405c880:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
2405c884:	e065      	b.n	2405c952 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
2405c886:	697b      	ldr	r3, [r7, #20]
2405c888:	ee07 3a90 	vmov	s15, r3
2405c88c:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405c890:	eddf 6a5e 	vldr	s13, [pc, #376]	; 2405ca0c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
2405c894:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405c898:	4b58      	ldr	r3, [pc, #352]	; (2405c9fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405c89a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405c89c:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405c8a0:	ee07 3a90 	vmov	s15, r3
2405c8a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405c8a8:	ed97 6a03 	vldr	s12, [r7, #12]
2405c8ac:	eddf 5a55 	vldr	s11, [pc, #340]	; 2405ca04 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
2405c8b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405c8b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405c8b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405c8bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405c8c0:	ee67 7a27 	vmul.f32	s15, s14, s15
2405c8c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
2405c8c8:	e043      	b.n	2405c952 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
2405c8ca:	697b      	ldr	r3, [r7, #20]
2405c8cc:	ee07 3a90 	vmov	s15, r3
2405c8d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405c8d4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 2405ca10 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
2405c8d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405c8dc:	4b47      	ldr	r3, [pc, #284]	; (2405c9fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405c8de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405c8e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405c8e4:	ee07 3a90 	vmov	s15, r3
2405c8e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405c8ec:	ed97 6a03 	vldr	s12, [r7, #12]
2405c8f0:	eddf 5a44 	vldr	s11, [pc, #272]	; 2405ca04 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
2405c8f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405c8f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405c8fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405c900:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405c904:	ee67 7a27 	vmul.f32	s15, s14, s15
2405c908:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
2405c90c:	e021      	b.n	2405c952 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
2405c90e:	697b      	ldr	r3, [r7, #20]
2405c910:	ee07 3a90 	vmov	s15, r3
2405c914:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405c918:	eddf 6a3b 	vldr	s13, [pc, #236]	; 2405ca08 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
2405c91c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2405c920:	4b36      	ldr	r3, [pc, #216]	; (2405c9fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405c922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405c924:	f3c3 0308 	ubfx	r3, r3, #0, #9
2405c928:	ee07 3a90 	vmov	s15, r3
2405c92c:	eef8 6a67 	vcvt.f32.u32	s13, s15
2405c930:	ed97 6a03 	vldr	s12, [r7, #12]
2405c934:	eddf 5a33 	vldr	s11, [pc, #204]	; 2405ca04 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
2405c938:	eec6 7a25 	vdiv.f32	s15, s12, s11
2405c93c:	ee76 7aa7 	vadd.f32	s15, s13, s15
2405c940:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2405c944:	ee77 7aa6 	vadd.f32	s15, s15, s13
2405c948:	ee67 7a27 	vmul.f32	s15, s14, s15
2405c94c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
2405c950:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
2405c952:	4b2a      	ldr	r3, [pc, #168]	; (2405c9fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405c954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405c956:	0a5b      	lsrs	r3, r3, #9
2405c958:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2405c95c:	ee07 3a90 	vmov	s15, r3
2405c960:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405c964:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2405c968:	ee37 7a87 	vadd.f32	s14, s15, s14
2405c96c:	edd7 6a07 	vldr	s13, [r7, #28]
2405c970:	eec6 7a87 	vdiv.f32	s15, s13, s14
2405c974:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2405c978:	ee17 2a90 	vmov	r2, s15
2405c97c:	687b      	ldr	r3, [r7, #4]
2405c97e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
2405c980:	4b1e      	ldr	r3, [pc, #120]	; (2405c9fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405c982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405c984:	0c1b      	lsrs	r3, r3, #16
2405c986:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2405c98a:	ee07 3a90 	vmov	s15, r3
2405c98e:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405c992:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2405c996:	ee37 7a87 	vadd.f32	s14, s15, s14
2405c99a:	edd7 6a07 	vldr	s13, [r7, #28]
2405c99e:	eec6 7a87 	vdiv.f32	s15, s13, s14
2405c9a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2405c9a6:	ee17 2a90 	vmov	r2, s15
2405c9aa:	687b      	ldr	r3, [r7, #4]
2405c9ac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
2405c9ae:	4b13      	ldr	r3, [pc, #76]	; (2405c9fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
2405c9b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405c9b2:	0e1b      	lsrs	r3, r3, #24
2405c9b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2405c9b8:	ee07 3a90 	vmov	s15, r3
2405c9bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
2405c9c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2405c9c4:	ee37 7a87 	vadd.f32	s14, s15, s14
2405c9c8:	edd7 6a07 	vldr	s13, [r7, #28]
2405c9cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
2405c9d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2405c9d4:	ee17 2a90 	vmov	r2, s15
2405c9d8:	687b      	ldr	r3, [r7, #4]
2405c9da:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
2405c9dc:	e008      	b.n	2405c9f0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
2405c9de:	687b      	ldr	r3, [r7, #4]
2405c9e0:	2200      	movs	r2, #0
2405c9e2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
2405c9e4:	687b      	ldr	r3, [r7, #4]
2405c9e6:	2200      	movs	r2, #0
2405c9e8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
2405c9ea:	687b      	ldr	r3, [r7, #4]
2405c9ec:	2200      	movs	r2, #0
2405c9ee:	609a      	str	r2, [r3, #8]
}
2405c9f0:	bf00      	nop
2405c9f2:	3724      	adds	r7, #36	; 0x24
2405c9f4:	46bd      	mov	sp, r7
2405c9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
2405c9fa:	4770      	bx	lr
2405c9fc:	58024400 	.word	0x58024400
2405ca00:	03d09000 	.word	0x03d09000
2405ca04:	46000000 	.word	0x46000000
2405ca08:	4c742400 	.word	0x4c742400
2405ca0c:	4a742400 	.word	0x4a742400
2405ca10:	4bb71b00 	.word	0x4bb71b00

2405ca14 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
2405ca14:	b580      	push	{r7, lr}
2405ca16:	b084      	sub	sp, #16
2405ca18:	af00      	add	r7, sp, #0
2405ca1a:	6078      	str	r0, [r7, #4]
2405ca1c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
2405ca1e:	2300      	movs	r3, #0
2405ca20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
2405ca22:	4b53      	ldr	r3, [pc, #332]	; (2405cb70 <RCCEx_PLL2_Config+0x15c>)
2405ca24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405ca26:	f003 0303 	and.w	r3, r3, #3
2405ca2a:	2b03      	cmp	r3, #3
2405ca2c:	d101      	bne.n	2405ca32 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
2405ca2e:	2301      	movs	r3, #1
2405ca30:	e099      	b.n	2405cb66 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
2405ca32:	4b4f      	ldr	r3, [pc, #316]	; (2405cb70 <RCCEx_PLL2_Config+0x15c>)
2405ca34:	681b      	ldr	r3, [r3, #0]
2405ca36:	4a4e      	ldr	r2, [pc, #312]	; (2405cb70 <RCCEx_PLL2_Config+0x15c>)
2405ca38:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
2405ca3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
2405ca3e:	f7f6 f971 	bl	24052d24 <HAL_GetTick>
2405ca42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
2405ca44:	e008      	b.n	2405ca58 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
2405ca46:	f7f6 f96d 	bl	24052d24 <HAL_GetTick>
2405ca4a:	4602      	mov	r2, r0
2405ca4c:	68bb      	ldr	r3, [r7, #8]
2405ca4e:	1ad3      	subs	r3, r2, r3
2405ca50:	2b02      	cmp	r3, #2
2405ca52:	d901      	bls.n	2405ca58 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
2405ca54:	2303      	movs	r3, #3
2405ca56:	e086      	b.n	2405cb66 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
2405ca58:	4b45      	ldr	r3, [pc, #276]	; (2405cb70 <RCCEx_PLL2_Config+0x15c>)
2405ca5a:	681b      	ldr	r3, [r3, #0]
2405ca5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2405ca60:	2b00      	cmp	r3, #0
2405ca62:	d1f0      	bne.n	2405ca46 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
2405ca64:	4b42      	ldr	r3, [pc, #264]	; (2405cb70 <RCCEx_PLL2_Config+0x15c>)
2405ca66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405ca68:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
2405ca6c:	687b      	ldr	r3, [r7, #4]
2405ca6e:	681b      	ldr	r3, [r3, #0]
2405ca70:	031b      	lsls	r3, r3, #12
2405ca72:	493f      	ldr	r1, [pc, #252]	; (2405cb70 <RCCEx_PLL2_Config+0x15c>)
2405ca74:	4313      	orrs	r3, r2
2405ca76:	628b      	str	r3, [r1, #40]	; 0x28
2405ca78:	687b      	ldr	r3, [r7, #4]
2405ca7a:	685b      	ldr	r3, [r3, #4]
2405ca7c:	3b01      	subs	r3, #1
2405ca7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
2405ca82:	687b      	ldr	r3, [r7, #4]
2405ca84:	689b      	ldr	r3, [r3, #8]
2405ca86:	3b01      	subs	r3, #1
2405ca88:	025b      	lsls	r3, r3, #9
2405ca8a:	b29b      	uxth	r3, r3
2405ca8c:	431a      	orrs	r2, r3
2405ca8e:	687b      	ldr	r3, [r7, #4]
2405ca90:	68db      	ldr	r3, [r3, #12]
2405ca92:	3b01      	subs	r3, #1
2405ca94:	041b      	lsls	r3, r3, #16
2405ca96:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
2405ca9a:	431a      	orrs	r2, r3
2405ca9c:	687b      	ldr	r3, [r7, #4]
2405ca9e:	691b      	ldr	r3, [r3, #16]
2405caa0:	3b01      	subs	r3, #1
2405caa2:	061b      	lsls	r3, r3, #24
2405caa4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
2405caa8:	4931      	ldr	r1, [pc, #196]	; (2405cb70 <RCCEx_PLL2_Config+0x15c>)
2405caaa:	4313      	orrs	r3, r2
2405caac:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
2405caae:	4b30      	ldr	r3, [pc, #192]	; (2405cb70 <RCCEx_PLL2_Config+0x15c>)
2405cab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405cab2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
2405cab6:	687b      	ldr	r3, [r7, #4]
2405cab8:	695b      	ldr	r3, [r3, #20]
2405caba:	492d      	ldr	r1, [pc, #180]	; (2405cb70 <RCCEx_PLL2_Config+0x15c>)
2405cabc:	4313      	orrs	r3, r2
2405cabe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
2405cac0:	4b2b      	ldr	r3, [pc, #172]	; (2405cb70 <RCCEx_PLL2_Config+0x15c>)
2405cac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405cac4:	f023 0220 	bic.w	r2, r3, #32
2405cac8:	687b      	ldr	r3, [r7, #4]
2405caca:	699b      	ldr	r3, [r3, #24]
2405cacc:	4928      	ldr	r1, [pc, #160]	; (2405cb70 <RCCEx_PLL2_Config+0x15c>)
2405cace:	4313      	orrs	r3, r2
2405cad0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
2405cad2:	4b27      	ldr	r3, [pc, #156]	; (2405cb70 <RCCEx_PLL2_Config+0x15c>)
2405cad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405cad6:	4a26      	ldr	r2, [pc, #152]	; (2405cb70 <RCCEx_PLL2_Config+0x15c>)
2405cad8:	f023 0310 	bic.w	r3, r3, #16
2405cadc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
2405cade:	4b24      	ldr	r3, [pc, #144]	; (2405cb70 <RCCEx_PLL2_Config+0x15c>)
2405cae0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
2405cae2:	4b24      	ldr	r3, [pc, #144]	; (2405cb74 <RCCEx_PLL2_Config+0x160>)
2405cae4:	4013      	ands	r3, r2
2405cae6:	687a      	ldr	r2, [r7, #4]
2405cae8:	69d2      	ldr	r2, [r2, #28]
2405caea:	00d2      	lsls	r2, r2, #3
2405caec:	4920      	ldr	r1, [pc, #128]	; (2405cb70 <RCCEx_PLL2_Config+0x15c>)
2405caee:	4313      	orrs	r3, r2
2405caf0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
2405caf2:	4b1f      	ldr	r3, [pc, #124]	; (2405cb70 <RCCEx_PLL2_Config+0x15c>)
2405caf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405caf6:	4a1e      	ldr	r2, [pc, #120]	; (2405cb70 <RCCEx_PLL2_Config+0x15c>)
2405caf8:	f043 0310 	orr.w	r3, r3, #16
2405cafc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
2405cafe:	683b      	ldr	r3, [r7, #0]
2405cb00:	2b00      	cmp	r3, #0
2405cb02:	d106      	bne.n	2405cb12 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
2405cb04:	4b1a      	ldr	r3, [pc, #104]	; (2405cb70 <RCCEx_PLL2_Config+0x15c>)
2405cb06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405cb08:	4a19      	ldr	r2, [pc, #100]	; (2405cb70 <RCCEx_PLL2_Config+0x15c>)
2405cb0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
2405cb0e:	62d3      	str	r3, [r2, #44]	; 0x2c
2405cb10:	e00f      	b.n	2405cb32 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
2405cb12:	683b      	ldr	r3, [r7, #0]
2405cb14:	2b01      	cmp	r3, #1
2405cb16:	d106      	bne.n	2405cb26 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
2405cb18:	4b15      	ldr	r3, [pc, #84]	; (2405cb70 <RCCEx_PLL2_Config+0x15c>)
2405cb1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405cb1c:	4a14      	ldr	r2, [pc, #80]	; (2405cb70 <RCCEx_PLL2_Config+0x15c>)
2405cb1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
2405cb22:	62d3      	str	r3, [r2, #44]	; 0x2c
2405cb24:	e005      	b.n	2405cb32 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
2405cb26:	4b12      	ldr	r3, [pc, #72]	; (2405cb70 <RCCEx_PLL2_Config+0x15c>)
2405cb28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405cb2a:	4a11      	ldr	r2, [pc, #68]	; (2405cb70 <RCCEx_PLL2_Config+0x15c>)
2405cb2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
2405cb30:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
2405cb32:	4b0f      	ldr	r3, [pc, #60]	; (2405cb70 <RCCEx_PLL2_Config+0x15c>)
2405cb34:	681b      	ldr	r3, [r3, #0]
2405cb36:	4a0e      	ldr	r2, [pc, #56]	; (2405cb70 <RCCEx_PLL2_Config+0x15c>)
2405cb38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
2405cb3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
2405cb3e:	f7f6 f8f1 	bl	24052d24 <HAL_GetTick>
2405cb42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
2405cb44:	e008      	b.n	2405cb58 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
2405cb46:	f7f6 f8ed 	bl	24052d24 <HAL_GetTick>
2405cb4a:	4602      	mov	r2, r0
2405cb4c:	68bb      	ldr	r3, [r7, #8]
2405cb4e:	1ad3      	subs	r3, r2, r3
2405cb50:	2b02      	cmp	r3, #2
2405cb52:	d901      	bls.n	2405cb58 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
2405cb54:	2303      	movs	r3, #3
2405cb56:	e006      	b.n	2405cb66 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
2405cb58:	4b05      	ldr	r3, [pc, #20]	; (2405cb70 <RCCEx_PLL2_Config+0x15c>)
2405cb5a:	681b      	ldr	r3, [r3, #0]
2405cb5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2405cb60:	2b00      	cmp	r3, #0
2405cb62:	d0f0      	beq.n	2405cb46 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
2405cb64:	7bfb      	ldrb	r3, [r7, #15]
}
2405cb66:	4618      	mov	r0, r3
2405cb68:	3710      	adds	r7, #16
2405cb6a:	46bd      	mov	sp, r7
2405cb6c:	bd80      	pop	{r7, pc}
2405cb6e:	bf00      	nop
2405cb70:	58024400 	.word	0x58024400
2405cb74:	ffff0007 	.word	0xffff0007

2405cb78 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
2405cb78:	b580      	push	{r7, lr}
2405cb7a:	b084      	sub	sp, #16
2405cb7c:	af00      	add	r7, sp, #0
2405cb7e:	6078      	str	r0, [r7, #4]
2405cb80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
2405cb82:	2300      	movs	r3, #0
2405cb84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
2405cb86:	4b53      	ldr	r3, [pc, #332]	; (2405ccd4 <RCCEx_PLL3_Config+0x15c>)
2405cb88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405cb8a:	f003 0303 	and.w	r3, r3, #3
2405cb8e:	2b03      	cmp	r3, #3
2405cb90:	d101      	bne.n	2405cb96 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
2405cb92:	2301      	movs	r3, #1
2405cb94:	e099      	b.n	2405ccca <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
2405cb96:	4b4f      	ldr	r3, [pc, #316]	; (2405ccd4 <RCCEx_PLL3_Config+0x15c>)
2405cb98:	681b      	ldr	r3, [r3, #0]
2405cb9a:	4a4e      	ldr	r2, [pc, #312]	; (2405ccd4 <RCCEx_PLL3_Config+0x15c>)
2405cb9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
2405cba0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
2405cba2:	f7f6 f8bf 	bl	24052d24 <HAL_GetTick>
2405cba6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
2405cba8:	e008      	b.n	2405cbbc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
2405cbaa:	f7f6 f8bb 	bl	24052d24 <HAL_GetTick>
2405cbae:	4602      	mov	r2, r0
2405cbb0:	68bb      	ldr	r3, [r7, #8]
2405cbb2:	1ad3      	subs	r3, r2, r3
2405cbb4:	2b02      	cmp	r3, #2
2405cbb6:	d901      	bls.n	2405cbbc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
2405cbb8:	2303      	movs	r3, #3
2405cbba:	e086      	b.n	2405ccca <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
2405cbbc:	4b45      	ldr	r3, [pc, #276]	; (2405ccd4 <RCCEx_PLL3_Config+0x15c>)
2405cbbe:	681b      	ldr	r3, [r3, #0]
2405cbc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2405cbc4:	2b00      	cmp	r3, #0
2405cbc6:	d1f0      	bne.n	2405cbaa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
2405cbc8:	4b42      	ldr	r3, [pc, #264]	; (2405ccd4 <RCCEx_PLL3_Config+0x15c>)
2405cbca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405cbcc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
2405cbd0:	687b      	ldr	r3, [r7, #4]
2405cbd2:	681b      	ldr	r3, [r3, #0]
2405cbd4:	051b      	lsls	r3, r3, #20
2405cbd6:	493f      	ldr	r1, [pc, #252]	; (2405ccd4 <RCCEx_PLL3_Config+0x15c>)
2405cbd8:	4313      	orrs	r3, r2
2405cbda:	628b      	str	r3, [r1, #40]	; 0x28
2405cbdc:	687b      	ldr	r3, [r7, #4]
2405cbde:	685b      	ldr	r3, [r3, #4]
2405cbe0:	3b01      	subs	r3, #1
2405cbe2:	f3c3 0208 	ubfx	r2, r3, #0, #9
2405cbe6:	687b      	ldr	r3, [r7, #4]
2405cbe8:	689b      	ldr	r3, [r3, #8]
2405cbea:	3b01      	subs	r3, #1
2405cbec:	025b      	lsls	r3, r3, #9
2405cbee:	b29b      	uxth	r3, r3
2405cbf0:	431a      	orrs	r2, r3
2405cbf2:	687b      	ldr	r3, [r7, #4]
2405cbf4:	68db      	ldr	r3, [r3, #12]
2405cbf6:	3b01      	subs	r3, #1
2405cbf8:	041b      	lsls	r3, r3, #16
2405cbfa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
2405cbfe:	431a      	orrs	r2, r3
2405cc00:	687b      	ldr	r3, [r7, #4]
2405cc02:	691b      	ldr	r3, [r3, #16]
2405cc04:	3b01      	subs	r3, #1
2405cc06:	061b      	lsls	r3, r3, #24
2405cc08:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
2405cc0c:	4931      	ldr	r1, [pc, #196]	; (2405ccd4 <RCCEx_PLL3_Config+0x15c>)
2405cc0e:	4313      	orrs	r3, r2
2405cc10:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
2405cc12:	4b30      	ldr	r3, [pc, #192]	; (2405ccd4 <RCCEx_PLL3_Config+0x15c>)
2405cc14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405cc16:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
2405cc1a:	687b      	ldr	r3, [r7, #4]
2405cc1c:	695b      	ldr	r3, [r3, #20]
2405cc1e:	492d      	ldr	r1, [pc, #180]	; (2405ccd4 <RCCEx_PLL3_Config+0x15c>)
2405cc20:	4313      	orrs	r3, r2
2405cc22:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
2405cc24:	4b2b      	ldr	r3, [pc, #172]	; (2405ccd4 <RCCEx_PLL3_Config+0x15c>)
2405cc26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405cc28:	f423 7200 	bic.w	r2, r3, #512	; 0x200
2405cc2c:	687b      	ldr	r3, [r7, #4]
2405cc2e:	699b      	ldr	r3, [r3, #24]
2405cc30:	4928      	ldr	r1, [pc, #160]	; (2405ccd4 <RCCEx_PLL3_Config+0x15c>)
2405cc32:	4313      	orrs	r3, r2
2405cc34:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
2405cc36:	4b27      	ldr	r3, [pc, #156]	; (2405ccd4 <RCCEx_PLL3_Config+0x15c>)
2405cc38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405cc3a:	4a26      	ldr	r2, [pc, #152]	; (2405ccd4 <RCCEx_PLL3_Config+0x15c>)
2405cc3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
2405cc40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
2405cc42:	4b24      	ldr	r3, [pc, #144]	; (2405ccd4 <RCCEx_PLL3_Config+0x15c>)
2405cc44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
2405cc46:	4b24      	ldr	r3, [pc, #144]	; (2405ccd8 <RCCEx_PLL3_Config+0x160>)
2405cc48:	4013      	ands	r3, r2
2405cc4a:	687a      	ldr	r2, [r7, #4]
2405cc4c:	69d2      	ldr	r2, [r2, #28]
2405cc4e:	00d2      	lsls	r2, r2, #3
2405cc50:	4920      	ldr	r1, [pc, #128]	; (2405ccd4 <RCCEx_PLL3_Config+0x15c>)
2405cc52:	4313      	orrs	r3, r2
2405cc54:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
2405cc56:	4b1f      	ldr	r3, [pc, #124]	; (2405ccd4 <RCCEx_PLL3_Config+0x15c>)
2405cc58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405cc5a:	4a1e      	ldr	r2, [pc, #120]	; (2405ccd4 <RCCEx_PLL3_Config+0x15c>)
2405cc5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2405cc60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
2405cc62:	683b      	ldr	r3, [r7, #0]
2405cc64:	2b00      	cmp	r3, #0
2405cc66:	d106      	bne.n	2405cc76 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
2405cc68:	4b1a      	ldr	r3, [pc, #104]	; (2405ccd4 <RCCEx_PLL3_Config+0x15c>)
2405cc6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405cc6c:	4a19      	ldr	r2, [pc, #100]	; (2405ccd4 <RCCEx_PLL3_Config+0x15c>)
2405cc6e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
2405cc72:	62d3      	str	r3, [r2, #44]	; 0x2c
2405cc74:	e00f      	b.n	2405cc96 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
2405cc76:	683b      	ldr	r3, [r7, #0]
2405cc78:	2b01      	cmp	r3, #1
2405cc7a:	d106      	bne.n	2405cc8a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
2405cc7c:	4b15      	ldr	r3, [pc, #84]	; (2405ccd4 <RCCEx_PLL3_Config+0x15c>)
2405cc7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405cc80:	4a14      	ldr	r2, [pc, #80]	; (2405ccd4 <RCCEx_PLL3_Config+0x15c>)
2405cc82:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
2405cc86:	62d3      	str	r3, [r2, #44]	; 0x2c
2405cc88:	e005      	b.n	2405cc96 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
2405cc8a:	4b12      	ldr	r3, [pc, #72]	; (2405ccd4 <RCCEx_PLL3_Config+0x15c>)
2405cc8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2405cc8e:	4a11      	ldr	r2, [pc, #68]	; (2405ccd4 <RCCEx_PLL3_Config+0x15c>)
2405cc90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
2405cc94:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
2405cc96:	4b0f      	ldr	r3, [pc, #60]	; (2405ccd4 <RCCEx_PLL3_Config+0x15c>)
2405cc98:	681b      	ldr	r3, [r3, #0]
2405cc9a:	4a0e      	ldr	r2, [pc, #56]	; (2405ccd4 <RCCEx_PLL3_Config+0x15c>)
2405cc9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2405cca0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
2405cca2:	f7f6 f83f 	bl	24052d24 <HAL_GetTick>
2405cca6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
2405cca8:	e008      	b.n	2405ccbc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
2405ccaa:	f7f6 f83b 	bl	24052d24 <HAL_GetTick>
2405ccae:	4602      	mov	r2, r0
2405ccb0:	68bb      	ldr	r3, [r7, #8]
2405ccb2:	1ad3      	subs	r3, r2, r3
2405ccb4:	2b02      	cmp	r3, #2
2405ccb6:	d901      	bls.n	2405ccbc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
2405ccb8:	2303      	movs	r3, #3
2405ccba:	e006      	b.n	2405ccca <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
2405ccbc:	4b05      	ldr	r3, [pc, #20]	; (2405ccd4 <RCCEx_PLL3_Config+0x15c>)
2405ccbe:	681b      	ldr	r3, [r3, #0]
2405ccc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2405ccc4:	2b00      	cmp	r3, #0
2405ccc6:	d0f0      	beq.n	2405ccaa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
2405ccc8:	7bfb      	ldrb	r3, [r7, #15]
}
2405ccca:	4618      	mov	r0, r3
2405cccc:	3710      	adds	r7, #16
2405ccce:	46bd      	mov	sp, r7
2405ccd0:	bd80      	pop	{r7, pc}
2405ccd2:	bf00      	nop
2405ccd4:	58024400 	.word	0x58024400
2405ccd8:	ffff0007 	.word	0xffff0007

2405ccdc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
2405ccdc:	b580      	push	{r7, lr}
2405ccde:	b084      	sub	sp, #16
2405cce0:	af00      	add	r7, sp, #0
2405cce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
2405cce4:	2301      	movs	r3, #1
2405cce6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
2405cce8:	687b      	ldr	r3, [r7, #4]
2405ccea:	2b00      	cmp	r3, #0
2405ccec:	d06a      	beq.n	2405cdc4 <HAL_RTC_Init+0xe8>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
2405ccee:	687b      	ldr	r3, [r7, #4]
2405ccf0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
2405ccf4:	b2db      	uxtb	r3, r3
2405ccf6:	2b00      	cmp	r3, #0
2405ccf8:	d106      	bne.n	2405cd08 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
2405ccfa:	687b      	ldr	r3, [r7, #4]
2405ccfc:	2200      	movs	r2, #0
2405ccfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
2405cd02:	6878      	ldr	r0, [r7, #4]
2405cd04:	f7f5 fca8 	bl	24052658 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
2405cd08:	687b      	ldr	r3, [r7, #4]
2405cd0a:	2202      	movs	r2, #2
2405cd0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
2405cd10:	687b      	ldr	r3, [r7, #4]
2405cd12:	681b      	ldr	r3, [r3, #0]
2405cd14:	22ca      	movs	r2, #202	; 0xca
2405cd16:	625a      	str	r2, [r3, #36]	; 0x24
2405cd18:	687b      	ldr	r3, [r7, #4]
2405cd1a:	681b      	ldr	r3, [r3, #0]
2405cd1c:	2253      	movs	r2, #83	; 0x53
2405cd1e:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
2405cd20:	6878      	ldr	r0, [r7, #4]
2405cd22:	f000 fa4d 	bl	2405d1c0 <RTC_EnterInitMode>
2405cd26:	4603      	mov	r3, r0
2405cd28:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
2405cd2a:	7bfb      	ldrb	r3, [r7, #15]
2405cd2c:	2b00      	cmp	r3, #0
2405cd2e:	d13e      	bne.n	2405cdae <HAL_RTC_Init+0xd2>
    {
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
2405cd30:	687b      	ldr	r3, [r7, #4]
2405cd32:	681b      	ldr	r3, [r3, #0]
2405cd34:	6999      	ldr	r1, [r3, #24]
2405cd36:	687b      	ldr	r3, [r7, #4]
2405cd38:	681a      	ldr	r2, [r3, #0]
2405cd3a:	4b25      	ldr	r3, [pc, #148]	; (2405cdd0 <HAL_RTC_Init+0xf4>)
2405cd3c:	400b      	ands	r3, r1
2405cd3e:	6193      	str	r3, [r2, #24]
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
2405cd40:	687b      	ldr	r3, [r7, #4]
2405cd42:	681b      	ldr	r3, [r3, #0]
2405cd44:	6999      	ldr	r1, [r3, #24]
2405cd46:	687b      	ldr	r3, [r7, #4]
2405cd48:	685a      	ldr	r2, [r3, #4]
2405cd4a:	687b      	ldr	r3, [r7, #4]
2405cd4c:	691b      	ldr	r3, [r3, #16]
2405cd4e:	431a      	orrs	r2, r3
2405cd50:	687b      	ldr	r3, [r7, #4]
2405cd52:	699b      	ldr	r3, [r3, #24]
2405cd54:	431a      	orrs	r2, r3
2405cd56:	687b      	ldr	r3, [r7, #4]
2405cd58:	681b      	ldr	r3, [r3, #0]
2405cd5a:	430a      	orrs	r2, r1
2405cd5c:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
2405cd5e:	687b      	ldr	r3, [r7, #4]
2405cd60:	689b      	ldr	r3, [r3, #8]
2405cd62:	0419      	lsls	r1, r3, #16
2405cd64:	687b      	ldr	r3, [r7, #4]
2405cd66:	68da      	ldr	r2, [r3, #12]
2405cd68:	687b      	ldr	r3, [r7, #4]
2405cd6a:	681b      	ldr	r3, [r3, #0]
2405cd6c:	430a      	orrs	r2, r1
2405cd6e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
2405cd70:	6878      	ldr	r0, [r7, #4]
2405cd72:	f000 fa5b 	bl	2405d22c <RTC_ExitInitMode>
2405cd76:	4603      	mov	r3, r0
2405cd78:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
2405cd7a:	7bfb      	ldrb	r3, [r7, #15]
2405cd7c:	2b00      	cmp	r3, #0
2405cd7e:	d116      	bne.n	2405cdae <HAL_RTC_Init+0xd2>
      {
#if defined(RTC_CR_TAMPALRM_PU) && defined(RTC_CR_TAMPALRM_TYPE) && defined(RTC_CR_OUT2EN)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
2405cd80:	687b      	ldr	r3, [r7, #4]
2405cd82:	681b      	ldr	r3, [r3, #0]
2405cd84:	699a      	ldr	r2, [r3, #24]
2405cd86:	687b      	ldr	r3, [r7, #4]
2405cd88:	681b      	ldr	r3, [r3, #0]
2405cd8a:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
2405cd8e:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
2405cd90:	687b      	ldr	r3, [r7, #4]
2405cd92:	681b      	ldr	r3, [r3, #0]
2405cd94:	6999      	ldr	r1, [r3, #24]
2405cd96:	687b      	ldr	r3, [r7, #4]
2405cd98:	6a1a      	ldr	r2, [r3, #32]
2405cd9a:	687b      	ldr	r3, [r7, #4]
2405cd9c:	69db      	ldr	r3, [r3, #28]
2405cd9e:	431a      	orrs	r2, r3
2405cda0:	687b      	ldr	r3, [r7, #4]
2405cda2:	695b      	ldr	r3, [r3, #20]
2405cda4:	431a      	orrs	r2, r3
2405cda6:	687b      	ldr	r3, [r7, #4]
2405cda8:	681b      	ldr	r3, [r3, #0]
2405cdaa:	430a      	orrs	r2, r1
2405cdac:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
2405cdae:	687b      	ldr	r3, [r7, #4]
2405cdb0:	681b      	ldr	r3, [r3, #0]
2405cdb2:	22ff      	movs	r2, #255	; 0xff
2405cdb4:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
2405cdb6:	7bfb      	ldrb	r3, [r7, #15]
2405cdb8:	2b00      	cmp	r3, #0
2405cdba:	d103      	bne.n	2405cdc4 <HAL_RTC_Init+0xe8>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
2405cdbc:	687b      	ldr	r3, [r7, #4]
2405cdbe:	2201      	movs	r2, #1
2405cdc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  /* return status */
  return status;
2405cdc4:	7bfb      	ldrb	r3, [r7, #15]
}
2405cdc6:	4618      	mov	r0, r3
2405cdc8:	3710      	adds	r7, #16
2405cdca:	46bd      	mov	sp, r7
2405cdcc:	bd80      	pop	{r7, pc}
2405cdce:	bf00      	nop
2405cdd0:	fb8fffbf 	.word	0xfb8fffbf

2405cdd4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
2405cdd4:	b590      	push	{r4, r7, lr}
2405cdd6:	b087      	sub	sp, #28
2405cdd8:	af00      	add	r7, sp, #0
2405cdda:	60f8      	str	r0, [r7, #12]
2405cddc:	60b9      	str	r1, [r7, #8]
2405cdde:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
2405cde0:	68fb      	ldr	r3, [r7, #12]
2405cde2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
2405cde6:	2b01      	cmp	r3, #1
2405cde8:	d101      	bne.n	2405cdee <HAL_RTC_SetTime+0x1a>
2405cdea:	2302      	movs	r3, #2
2405cdec:	e089      	b.n	2405cf02 <HAL_RTC_SetTime+0x12e>
2405cdee:	68fb      	ldr	r3, [r7, #12]
2405cdf0:	2201      	movs	r2, #1
2405cdf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
2405cdf6:	68fb      	ldr	r3, [r7, #12]
2405cdf8:	2202      	movs	r2, #2
2405cdfa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
2405cdfe:	68fb      	ldr	r3, [r7, #12]
2405ce00:	681b      	ldr	r3, [r3, #0]
2405ce02:	22ca      	movs	r2, #202	; 0xca
2405ce04:	625a      	str	r2, [r3, #36]	; 0x24
2405ce06:	68fb      	ldr	r3, [r7, #12]
2405ce08:	681b      	ldr	r3, [r3, #0]
2405ce0a:	2253      	movs	r2, #83	; 0x53
2405ce0c:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
2405ce0e:	68f8      	ldr	r0, [r7, #12]
2405ce10:	f000 f9d6 	bl	2405d1c0 <RTC_EnterInitMode>
2405ce14:	4603      	mov	r3, r0
2405ce16:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
2405ce18:	7cfb      	ldrb	r3, [r7, #19]
2405ce1a:	2b00      	cmp	r3, #0
2405ce1c:	d161      	bne.n	2405cee2 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
2405ce1e:	687b      	ldr	r3, [r7, #4]
2405ce20:	2b00      	cmp	r3, #0
2405ce22:	d126      	bne.n	2405ce72 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
2405ce24:	68fb      	ldr	r3, [r7, #12]
2405ce26:	681b      	ldr	r3, [r3, #0]
2405ce28:	699b      	ldr	r3, [r3, #24]
2405ce2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
2405ce2e:	2b00      	cmp	r3, #0
2405ce30:	d102      	bne.n	2405ce38 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
2405ce32:	68bb      	ldr	r3, [r7, #8]
2405ce34:	2200      	movs	r2, #0
2405ce36:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
2405ce38:	68bb      	ldr	r3, [r7, #8]
2405ce3a:	781b      	ldrb	r3, [r3, #0]
2405ce3c:	4618      	mov	r0, r3
2405ce3e:	f000 fa33 	bl	2405d2a8 <RTC_ByteToBcd2>
2405ce42:	4603      	mov	r3, r0
2405ce44:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
2405ce46:	68bb      	ldr	r3, [r7, #8]
2405ce48:	785b      	ldrb	r3, [r3, #1]
2405ce4a:	4618      	mov	r0, r3
2405ce4c:	f000 fa2c 	bl	2405d2a8 <RTC_ByteToBcd2>
2405ce50:	4603      	mov	r3, r0
2405ce52:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
2405ce54:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
2405ce56:	68bb      	ldr	r3, [r7, #8]
2405ce58:	789b      	ldrb	r3, [r3, #2]
2405ce5a:	4618      	mov	r0, r3
2405ce5c:	f000 fa24 	bl	2405d2a8 <RTC_ByteToBcd2>
2405ce60:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
2405ce62:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
2405ce66:	68bb      	ldr	r3, [r7, #8]
2405ce68:	78db      	ldrb	r3, [r3, #3]
2405ce6a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
2405ce6c:	4313      	orrs	r3, r2
2405ce6e:	617b      	str	r3, [r7, #20]
2405ce70:	e018      	b.n	2405cea4 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
2405ce72:	68fb      	ldr	r3, [r7, #12]
2405ce74:	681b      	ldr	r3, [r3, #0]
2405ce76:	699b      	ldr	r3, [r3, #24]
2405ce78:	f003 0340 	and.w	r3, r3, #64	; 0x40
2405ce7c:	2b00      	cmp	r3, #0
2405ce7e:	d102      	bne.n	2405ce86 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
2405ce80:	68bb      	ldr	r3, [r7, #8]
2405ce82:	2200      	movs	r2, #0
2405ce84:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
2405ce86:	68bb      	ldr	r3, [r7, #8]
2405ce88:	781b      	ldrb	r3, [r3, #0]
2405ce8a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
2405ce8c:	68bb      	ldr	r3, [r7, #8]
2405ce8e:	785b      	ldrb	r3, [r3, #1]
2405ce90:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
2405ce92:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
2405ce94:	68ba      	ldr	r2, [r7, #8]
2405ce96:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
2405ce98:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
2405ce9a:	68bb      	ldr	r3, [r7, #8]
2405ce9c:	78db      	ldrb	r3, [r3, #3]
2405ce9e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
2405cea0:	4313      	orrs	r3, r2
2405cea2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
2405cea4:	68fb      	ldr	r3, [r7, #12]
2405cea6:	681a      	ldr	r2, [r3, #0]
2405cea8:	6979      	ldr	r1, [r7, #20]
2405ceaa:	4b18      	ldr	r3, [pc, #96]	; (2405cf0c <HAL_RTC_SetTime+0x138>)
2405ceac:	400b      	ands	r3, r1
2405ceae:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
2405ceb0:	68fb      	ldr	r3, [r7, #12]
2405ceb2:	681b      	ldr	r3, [r3, #0]
2405ceb4:	699a      	ldr	r2, [r3, #24]
2405ceb6:	68fb      	ldr	r3, [r7, #12]
2405ceb8:	681b      	ldr	r3, [r3, #0]
2405ceba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
2405cebe:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
2405cec0:	68fb      	ldr	r3, [r7, #12]
2405cec2:	681b      	ldr	r3, [r3, #0]
2405cec4:	6999      	ldr	r1, [r3, #24]
2405cec6:	68bb      	ldr	r3, [r7, #8]
2405cec8:	68da      	ldr	r2, [r3, #12]
2405ceca:	68bb      	ldr	r3, [r7, #8]
2405cecc:	691b      	ldr	r3, [r3, #16]
2405cece:	431a      	orrs	r2, r3
2405ced0:	68fb      	ldr	r3, [r7, #12]
2405ced2:	681b      	ldr	r3, [r3, #0]
2405ced4:	430a      	orrs	r2, r1
2405ced6:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
2405ced8:	68f8      	ldr	r0, [r7, #12]
2405ceda:	f000 f9a7 	bl	2405d22c <RTC_ExitInitMode>
2405cede:	4603      	mov	r3, r0
2405cee0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
2405cee2:	68fb      	ldr	r3, [r7, #12]
2405cee4:	681b      	ldr	r3, [r3, #0]
2405cee6:	22ff      	movs	r2, #255	; 0xff
2405cee8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
2405ceea:	7cfb      	ldrb	r3, [r7, #19]
2405ceec:	2b00      	cmp	r3, #0
2405ceee:	d103      	bne.n	2405cef8 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
2405cef0:	68fb      	ldr	r3, [r7, #12]
2405cef2:	2201      	movs	r2, #1
2405cef4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
2405cef8:	68fb      	ldr	r3, [r7, #12]
2405cefa:	2200      	movs	r2, #0
2405cefc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
2405cf00:	7cfb      	ldrb	r3, [r7, #19]
}
2405cf02:	4618      	mov	r0, r3
2405cf04:	371c      	adds	r7, #28
2405cf06:	46bd      	mov	sp, r7
2405cf08:	bd90      	pop	{r4, r7, pc}
2405cf0a:	bf00      	nop
2405cf0c:	007f7f7f 	.word	0x007f7f7f

2405cf10 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
2405cf10:	b580      	push	{r7, lr}
2405cf12:	b086      	sub	sp, #24
2405cf14:	af00      	add	r7, sp, #0
2405cf16:	60f8      	str	r0, [r7, #12]
2405cf18:	60b9      	str	r1, [r7, #8]
2405cf1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
2405cf1c:	68fb      	ldr	r3, [r7, #12]
2405cf1e:	681b      	ldr	r3, [r3, #0]
2405cf20:	689a      	ldr	r2, [r3, #8]
2405cf22:	68bb      	ldr	r3, [r7, #8]
2405cf24:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
2405cf26:	68fb      	ldr	r3, [r7, #12]
2405cf28:	681b      	ldr	r3, [r3, #0]
2405cf2a:	691b      	ldr	r3, [r3, #16]
2405cf2c:	f3c3 020e 	ubfx	r2, r3, #0, #15
2405cf30:	68bb      	ldr	r3, [r7, #8]
2405cf32:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
2405cf34:	68fb      	ldr	r3, [r7, #12]
2405cf36:	681b      	ldr	r3, [r3, #0]
2405cf38:	681a      	ldr	r2, [r3, #0]
2405cf3a:	4b22      	ldr	r3, [pc, #136]	; (2405cfc4 <HAL_RTC_GetTime+0xb4>)
2405cf3c:	4013      	ands	r3, r2
2405cf3e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
2405cf40:	697b      	ldr	r3, [r7, #20]
2405cf42:	0c1b      	lsrs	r3, r3, #16
2405cf44:	b2db      	uxtb	r3, r3
2405cf46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2405cf4a:	b2da      	uxtb	r2, r3
2405cf4c:	68bb      	ldr	r3, [r7, #8]
2405cf4e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
2405cf50:	697b      	ldr	r3, [r7, #20]
2405cf52:	0a1b      	lsrs	r3, r3, #8
2405cf54:	b2db      	uxtb	r3, r3
2405cf56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2405cf5a:	b2da      	uxtb	r2, r3
2405cf5c:	68bb      	ldr	r3, [r7, #8]
2405cf5e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
2405cf60:	697b      	ldr	r3, [r7, #20]
2405cf62:	b2db      	uxtb	r3, r3
2405cf64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2405cf68:	b2da      	uxtb	r2, r3
2405cf6a:	68bb      	ldr	r3, [r7, #8]
2405cf6c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
2405cf6e:	697b      	ldr	r3, [r7, #20]
2405cf70:	0d9b      	lsrs	r3, r3, #22
2405cf72:	b2db      	uxtb	r3, r3
2405cf74:	f003 0301 	and.w	r3, r3, #1
2405cf78:	b2da      	uxtb	r2, r3
2405cf7a:	68bb      	ldr	r3, [r7, #8]
2405cf7c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
2405cf7e:	687b      	ldr	r3, [r7, #4]
2405cf80:	2b00      	cmp	r3, #0
2405cf82:	d11a      	bne.n	2405cfba <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
2405cf84:	68bb      	ldr	r3, [r7, #8]
2405cf86:	781b      	ldrb	r3, [r3, #0]
2405cf88:	4618      	mov	r0, r3
2405cf8a:	f000 f9ad 	bl	2405d2e8 <RTC_Bcd2ToByte>
2405cf8e:	4603      	mov	r3, r0
2405cf90:	461a      	mov	r2, r3
2405cf92:	68bb      	ldr	r3, [r7, #8]
2405cf94:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
2405cf96:	68bb      	ldr	r3, [r7, #8]
2405cf98:	785b      	ldrb	r3, [r3, #1]
2405cf9a:	4618      	mov	r0, r3
2405cf9c:	f000 f9a4 	bl	2405d2e8 <RTC_Bcd2ToByte>
2405cfa0:	4603      	mov	r3, r0
2405cfa2:	461a      	mov	r2, r3
2405cfa4:	68bb      	ldr	r3, [r7, #8]
2405cfa6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
2405cfa8:	68bb      	ldr	r3, [r7, #8]
2405cfaa:	789b      	ldrb	r3, [r3, #2]
2405cfac:	4618      	mov	r0, r3
2405cfae:	f000 f99b 	bl	2405d2e8 <RTC_Bcd2ToByte>
2405cfb2:	4603      	mov	r3, r0
2405cfb4:	461a      	mov	r2, r3
2405cfb6:	68bb      	ldr	r3, [r7, #8]
2405cfb8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
2405cfba:	2300      	movs	r3, #0
}
2405cfbc:	4618      	mov	r0, r3
2405cfbe:	3718      	adds	r7, #24
2405cfc0:	46bd      	mov	sp, r7
2405cfc2:	bd80      	pop	{r7, pc}
2405cfc4:	007f7f7f 	.word	0x007f7f7f

2405cfc8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
2405cfc8:	b590      	push	{r4, r7, lr}
2405cfca:	b087      	sub	sp, #28
2405cfcc:	af00      	add	r7, sp, #0
2405cfce:	60f8      	str	r0, [r7, #12]
2405cfd0:	60b9      	str	r1, [r7, #8]
2405cfd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
2405cfd4:	68fb      	ldr	r3, [r7, #12]
2405cfd6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
2405cfda:	2b01      	cmp	r3, #1
2405cfdc:	d101      	bne.n	2405cfe2 <HAL_RTC_SetDate+0x1a>
2405cfde:	2302      	movs	r3, #2
2405cfe0:	e073      	b.n	2405d0ca <HAL_RTC_SetDate+0x102>
2405cfe2:	68fb      	ldr	r3, [r7, #12]
2405cfe4:	2201      	movs	r2, #1
2405cfe6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
2405cfea:	68fb      	ldr	r3, [r7, #12]
2405cfec:	2202      	movs	r2, #2
2405cfee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
2405cff2:	687b      	ldr	r3, [r7, #4]
2405cff4:	2b00      	cmp	r3, #0
2405cff6:	d10e      	bne.n	2405d016 <HAL_RTC_SetDate+0x4e>
2405cff8:	68bb      	ldr	r3, [r7, #8]
2405cffa:	785b      	ldrb	r3, [r3, #1]
2405cffc:	f003 0310 	and.w	r3, r3, #16
2405d000:	2b00      	cmp	r3, #0
2405d002:	d008      	beq.n	2405d016 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
2405d004:	68bb      	ldr	r3, [r7, #8]
2405d006:	785b      	ldrb	r3, [r3, #1]
2405d008:	f023 0310 	bic.w	r3, r3, #16
2405d00c:	b2db      	uxtb	r3, r3
2405d00e:	330a      	adds	r3, #10
2405d010:	b2da      	uxtb	r2, r3
2405d012:	68bb      	ldr	r3, [r7, #8]
2405d014:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
2405d016:	687b      	ldr	r3, [r7, #4]
2405d018:	2b00      	cmp	r3, #0
2405d01a:	d11c      	bne.n	2405d056 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
2405d01c:	68bb      	ldr	r3, [r7, #8]
2405d01e:	78db      	ldrb	r3, [r3, #3]
2405d020:	4618      	mov	r0, r3
2405d022:	f000 f941 	bl	2405d2a8 <RTC_ByteToBcd2>
2405d026:	4603      	mov	r3, r0
2405d028:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
2405d02a:	68bb      	ldr	r3, [r7, #8]
2405d02c:	785b      	ldrb	r3, [r3, #1]
2405d02e:	4618      	mov	r0, r3
2405d030:	f000 f93a 	bl	2405d2a8 <RTC_ByteToBcd2>
2405d034:	4603      	mov	r3, r0
2405d036:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
2405d038:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
2405d03a:	68bb      	ldr	r3, [r7, #8]
2405d03c:	789b      	ldrb	r3, [r3, #2]
2405d03e:	4618      	mov	r0, r3
2405d040:	f000 f932 	bl	2405d2a8 <RTC_ByteToBcd2>
2405d044:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
2405d046:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
2405d04a:	68bb      	ldr	r3, [r7, #8]
2405d04c:	781b      	ldrb	r3, [r3, #0]
2405d04e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
2405d050:	4313      	orrs	r3, r2
2405d052:	617b      	str	r3, [r7, #20]
2405d054:	e00e      	b.n	2405d074 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
2405d056:	68bb      	ldr	r3, [r7, #8]
2405d058:	78db      	ldrb	r3, [r3, #3]
2405d05a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
2405d05c:	68bb      	ldr	r3, [r7, #8]
2405d05e:	785b      	ldrb	r3, [r3, #1]
2405d060:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
2405d062:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
2405d064:	68ba      	ldr	r2, [r7, #8]
2405d066:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
2405d068:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
2405d06a:	68bb      	ldr	r3, [r7, #8]
2405d06c:	781b      	ldrb	r3, [r3, #0]
2405d06e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
2405d070:	4313      	orrs	r3, r2
2405d072:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
2405d074:	68fb      	ldr	r3, [r7, #12]
2405d076:	681b      	ldr	r3, [r3, #0]
2405d078:	22ca      	movs	r2, #202	; 0xca
2405d07a:	625a      	str	r2, [r3, #36]	; 0x24
2405d07c:	68fb      	ldr	r3, [r7, #12]
2405d07e:	681b      	ldr	r3, [r3, #0]
2405d080:	2253      	movs	r2, #83	; 0x53
2405d082:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
2405d084:	68f8      	ldr	r0, [r7, #12]
2405d086:	f000 f89b 	bl	2405d1c0 <RTC_EnterInitMode>
2405d08a:	4603      	mov	r3, r0
2405d08c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
2405d08e:	7cfb      	ldrb	r3, [r7, #19]
2405d090:	2b00      	cmp	r3, #0
2405d092:	d10a      	bne.n	2405d0aa <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
2405d094:	68fb      	ldr	r3, [r7, #12]
2405d096:	681a      	ldr	r2, [r3, #0]
2405d098:	6979      	ldr	r1, [r7, #20]
2405d09a:	4b0e      	ldr	r3, [pc, #56]	; (2405d0d4 <HAL_RTC_SetDate+0x10c>)
2405d09c:	400b      	ands	r3, r1
2405d09e:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
2405d0a0:	68f8      	ldr	r0, [r7, #12]
2405d0a2:	f000 f8c3 	bl	2405d22c <RTC_ExitInitMode>
2405d0a6:	4603      	mov	r3, r0
2405d0a8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
2405d0aa:	68fb      	ldr	r3, [r7, #12]
2405d0ac:	681b      	ldr	r3, [r3, #0]
2405d0ae:	22ff      	movs	r2, #255	; 0xff
2405d0b0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
2405d0b2:	7cfb      	ldrb	r3, [r7, #19]
2405d0b4:	2b00      	cmp	r3, #0
2405d0b6:	d103      	bne.n	2405d0c0 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
2405d0b8:	68fb      	ldr	r3, [r7, #12]
2405d0ba:	2201      	movs	r2, #1
2405d0bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
2405d0c0:	68fb      	ldr	r3, [r7, #12]
2405d0c2:	2200      	movs	r2, #0
2405d0c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
2405d0c8:	7cfb      	ldrb	r3, [r7, #19]


}
2405d0ca:	4618      	mov	r0, r3
2405d0cc:	371c      	adds	r7, #28
2405d0ce:	46bd      	mov	sp, r7
2405d0d0:	bd90      	pop	{r4, r7, pc}
2405d0d2:	bf00      	nop
2405d0d4:	00ffff3f 	.word	0x00ffff3f

2405d0d8 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
2405d0d8:	b580      	push	{r7, lr}
2405d0da:	b086      	sub	sp, #24
2405d0dc:	af00      	add	r7, sp, #0
2405d0de:	60f8      	str	r0, [r7, #12]
2405d0e0:	60b9      	str	r1, [r7, #8]
2405d0e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
2405d0e4:	68fb      	ldr	r3, [r7, #12]
2405d0e6:	681b      	ldr	r3, [r3, #0]
2405d0e8:	685a      	ldr	r2, [r3, #4]
2405d0ea:	4b21      	ldr	r3, [pc, #132]	; (2405d170 <HAL_RTC_GetDate+0x98>)
2405d0ec:	4013      	ands	r3, r2
2405d0ee:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
2405d0f0:	697b      	ldr	r3, [r7, #20]
2405d0f2:	0c1b      	lsrs	r3, r3, #16
2405d0f4:	b2da      	uxtb	r2, r3
2405d0f6:	68bb      	ldr	r3, [r7, #8]
2405d0f8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
2405d0fa:	697b      	ldr	r3, [r7, #20]
2405d0fc:	0a1b      	lsrs	r3, r3, #8
2405d0fe:	b2db      	uxtb	r3, r3
2405d100:	f003 031f 	and.w	r3, r3, #31
2405d104:	b2da      	uxtb	r2, r3
2405d106:	68bb      	ldr	r3, [r7, #8]
2405d108:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
2405d10a:	697b      	ldr	r3, [r7, #20]
2405d10c:	b2db      	uxtb	r3, r3
2405d10e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2405d112:	b2da      	uxtb	r2, r3
2405d114:	68bb      	ldr	r3, [r7, #8]
2405d116:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
2405d118:	697b      	ldr	r3, [r7, #20]
2405d11a:	0b5b      	lsrs	r3, r3, #13
2405d11c:	b2db      	uxtb	r3, r3
2405d11e:	f003 0307 	and.w	r3, r3, #7
2405d122:	b2da      	uxtb	r2, r3
2405d124:	68bb      	ldr	r3, [r7, #8]
2405d126:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
2405d128:	687b      	ldr	r3, [r7, #4]
2405d12a:	2b00      	cmp	r3, #0
2405d12c:	d11a      	bne.n	2405d164 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
2405d12e:	68bb      	ldr	r3, [r7, #8]
2405d130:	78db      	ldrb	r3, [r3, #3]
2405d132:	4618      	mov	r0, r3
2405d134:	f000 f8d8 	bl	2405d2e8 <RTC_Bcd2ToByte>
2405d138:	4603      	mov	r3, r0
2405d13a:	461a      	mov	r2, r3
2405d13c:	68bb      	ldr	r3, [r7, #8]
2405d13e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
2405d140:	68bb      	ldr	r3, [r7, #8]
2405d142:	785b      	ldrb	r3, [r3, #1]
2405d144:	4618      	mov	r0, r3
2405d146:	f000 f8cf 	bl	2405d2e8 <RTC_Bcd2ToByte>
2405d14a:	4603      	mov	r3, r0
2405d14c:	461a      	mov	r2, r3
2405d14e:	68bb      	ldr	r3, [r7, #8]
2405d150:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
2405d152:	68bb      	ldr	r3, [r7, #8]
2405d154:	789b      	ldrb	r3, [r3, #2]
2405d156:	4618      	mov	r0, r3
2405d158:	f000 f8c6 	bl	2405d2e8 <RTC_Bcd2ToByte>
2405d15c:	4603      	mov	r3, r0
2405d15e:	461a      	mov	r2, r3
2405d160:	68bb      	ldr	r3, [r7, #8]
2405d162:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
2405d164:	2300      	movs	r3, #0
}
2405d166:	4618      	mov	r0, r3
2405d168:	3718      	adds	r7, #24
2405d16a:	46bd      	mov	sp, r7
2405d16c:	bd80      	pop	{r7, pc}
2405d16e:	bf00      	nop
2405d170:	00ffff3f 	.word	0x00ffff3f

2405d174 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
2405d174:	b580      	push	{r7, lr}
2405d176:	b084      	sub	sp, #16
2405d178:	af00      	add	r7, sp, #0
2405d17a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
2405d17c:	687b      	ldr	r3, [r7, #4]
2405d17e:	681b      	ldr	r3, [r3, #0]
2405d180:	68da      	ldr	r2, [r3, #12]
2405d182:	687b      	ldr	r3, [r7, #4]
2405d184:	681b      	ldr	r3, [r3, #0]
2405d186:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
2405d18a:	60da      	str	r2, [r3, #12]
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
2405d18c:	f7f5 fdca 	bl	24052d24 <HAL_GetTick>
2405d190:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
2405d192:	e009      	b.n	2405d1a8 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
2405d194:	f7f5 fdc6 	bl	24052d24 <HAL_GetTick>
2405d198:	4602      	mov	r2, r0
2405d19a:	68fb      	ldr	r3, [r7, #12]
2405d19c:	1ad3      	subs	r3, r2, r3
2405d19e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
2405d1a2:	d901      	bls.n	2405d1a8 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
2405d1a4:	2303      	movs	r3, #3
2405d1a6:	e007      	b.n	2405d1b8 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
2405d1a8:	687b      	ldr	r3, [r7, #4]
2405d1aa:	681b      	ldr	r3, [r3, #0]
2405d1ac:	68db      	ldr	r3, [r3, #12]
2405d1ae:	f003 0320 	and.w	r3, r3, #32
2405d1b2:	2b00      	cmp	r3, #0
2405d1b4:	d0ee      	beq.n	2405d194 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
2405d1b6:	2300      	movs	r3, #0
}
2405d1b8:	4618      	mov	r0, r3
2405d1ba:	3710      	adds	r7, #16
2405d1bc:	46bd      	mov	sp, r7
2405d1be:	bd80      	pop	{r7, pc}

2405d1c0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
2405d1c0:	b580      	push	{r7, lr}
2405d1c2:	b084      	sub	sp, #16
2405d1c4:	af00      	add	r7, sp, #0
2405d1c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
2405d1c8:	2300      	movs	r3, #0
2405d1ca:	73fb      	strb	r3, [r7, #15]
  /* Check if the Initialization mode is set */
#if defined(RTC_ICSR_INITF)
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
2405d1cc:	687b      	ldr	r3, [r7, #4]
2405d1ce:	681b      	ldr	r3, [r3, #0]
2405d1d0:	68db      	ldr	r3, [r3, #12]
2405d1d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
2405d1d6:	2b00      	cmp	r3, #0
2405d1d8:	d123      	bne.n	2405d222 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
2405d1da:	687b      	ldr	r3, [r7, #4]
2405d1dc:	681b      	ldr	r3, [r3, #0]
2405d1de:	68da      	ldr	r2, [r3, #12]
2405d1e0:	687b      	ldr	r3, [r7, #4]
2405d1e2:	681b      	ldr	r3, [r3, #0]
2405d1e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
2405d1e8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
2405d1ea:	f7f5 fd9b 	bl	24052d24 <HAL_GetTick>
2405d1ee:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
2405d1f0:	e00d      	b.n	2405d20e <RTC_EnterInitMode+0x4e>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
2405d1f2:	f7f5 fd97 	bl	24052d24 <HAL_GetTick>
2405d1f6:	4602      	mov	r2, r0
2405d1f8:	68bb      	ldr	r3, [r7, #8]
2405d1fa:	1ad3      	subs	r3, r2, r3
2405d1fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
2405d200:	d905      	bls.n	2405d20e <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
2405d202:	2303      	movs	r3, #3
2405d204:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
2405d206:	687b      	ldr	r3, [r7, #4]
2405d208:	2203      	movs	r2, #3
2405d20a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
2405d20e:	687b      	ldr	r3, [r7, #4]
2405d210:	681b      	ldr	r3, [r3, #0]
2405d212:	68db      	ldr	r3, [r3, #12]
2405d214:	f003 0340 	and.w	r3, r3, #64	; 0x40
2405d218:	2b00      	cmp	r3, #0
2405d21a:	d102      	bne.n	2405d222 <RTC_EnterInitMode+0x62>
2405d21c:	7bfb      	ldrb	r3, [r7, #15]
2405d21e:	2b03      	cmp	r3, #3
2405d220:	d1e7      	bne.n	2405d1f2 <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
2405d222:	7bfb      	ldrb	r3, [r7, #15]
}
2405d224:	4618      	mov	r0, r3
2405d226:	3710      	adds	r7, #16
2405d228:	46bd      	mov	sp, r7
2405d22a:	bd80      	pop	{r7, pc}

2405d22c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
2405d22c:	b580      	push	{r7, lr}
2405d22e:	b084      	sub	sp, #16
2405d230:	af00      	add	r7, sp, #0
2405d232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
2405d234:	2300      	movs	r3, #0
2405d236:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(RTC_ICSR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
2405d238:	4b1a      	ldr	r3, [pc, #104]	; (2405d2a4 <RTC_ExitInitMode+0x78>)
2405d23a:	68db      	ldr	r3, [r3, #12]
2405d23c:	4a19      	ldr	r2, [pc, #100]	; (2405d2a4 <RTC_ExitInitMode+0x78>)
2405d23e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2405d242:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
2405d244:	4b17      	ldr	r3, [pc, #92]	; (2405d2a4 <RTC_ExitInitMode+0x78>)
2405d246:	699b      	ldr	r3, [r3, #24]
2405d248:	f003 0320 	and.w	r3, r3, #32
2405d24c:	2b00      	cmp	r3, #0
2405d24e:	d10c      	bne.n	2405d26a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
2405d250:	6878      	ldr	r0, [r7, #4]
2405d252:	f7ff ff8f 	bl	2405d174 <HAL_RTC_WaitForSynchro>
2405d256:	4603      	mov	r3, r0
2405d258:	2b00      	cmp	r3, #0
2405d25a:	d01e      	beq.n	2405d29a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
2405d25c:	687b      	ldr	r3, [r7, #4]
2405d25e:	2203      	movs	r2, #3
2405d260:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
2405d264:	2303      	movs	r3, #3
2405d266:	73fb      	strb	r3, [r7, #15]
2405d268:	e017      	b.n	2405d29a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
2405d26a:	4b0e      	ldr	r3, [pc, #56]	; (2405d2a4 <RTC_ExitInitMode+0x78>)
2405d26c:	699b      	ldr	r3, [r3, #24]
2405d26e:	4a0d      	ldr	r2, [pc, #52]	; (2405d2a4 <RTC_ExitInitMode+0x78>)
2405d270:	f023 0320 	bic.w	r3, r3, #32
2405d274:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
2405d276:	6878      	ldr	r0, [r7, #4]
2405d278:	f7ff ff7c 	bl	2405d174 <HAL_RTC_WaitForSynchro>
2405d27c:	4603      	mov	r3, r0
2405d27e:	2b00      	cmp	r3, #0
2405d280:	d005      	beq.n	2405d28e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
2405d282:	687b      	ldr	r3, [r7, #4]
2405d284:	2203      	movs	r2, #3
2405d286:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
2405d28a:	2303      	movs	r3, #3
2405d28c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
2405d28e:	4b05      	ldr	r3, [pc, #20]	; (2405d2a4 <RTC_ExitInitMode+0x78>)
2405d290:	699b      	ldr	r3, [r3, #24]
2405d292:	4a04      	ldr	r2, [pc, #16]	; (2405d2a4 <RTC_ExitInitMode+0x78>)
2405d294:	f043 0320 	orr.w	r3, r3, #32
2405d298:	6193      	str	r3, [r2, #24]
  }

  return status;
2405d29a:	7bfb      	ldrb	r3, [r7, #15]
}
2405d29c:	4618      	mov	r0, r3
2405d29e:	3710      	adds	r7, #16
2405d2a0:	46bd      	mov	sp, r7
2405d2a2:	bd80      	pop	{r7, pc}
2405d2a4:	58004000 	.word	0x58004000

2405d2a8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
2405d2a8:	b480      	push	{r7}
2405d2aa:	b085      	sub	sp, #20
2405d2ac:	af00      	add	r7, sp, #0
2405d2ae:	4603      	mov	r3, r0
2405d2b0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
2405d2b2:	2300      	movs	r3, #0
2405d2b4:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
2405d2b6:	79fb      	ldrb	r3, [r7, #7]
2405d2b8:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
2405d2ba:	e005      	b.n	2405d2c8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
2405d2bc:	68fb      	ldr	r3, [r7, #12]
2405d2be:	3301      	adds	r3, #1
2405d2c0:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
2405d2c2:	7afb      	ldrb	r3, [r7, #11]
2405d2c4:	3b0a      	subs	r3, #10
2405d2c6:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
2405d2c8:	7afb      	ldrb	r3, [r7, #11]
2405d2ca:	2b09      	cmp	r3, #9
2405d2cc:	d8f6      	bhi.n	2405d2bc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
2405d2ce:	68fb      	ldr	r3, [r7, #12]
2405d2d0:	b2db      	uxtb	r3, r3
2405d2d2:	011b      	lsls	r3, r3, #4
2405d2d4:	b2da      	uxtb	r2, r3
2405d2d6:	7afb      	ldrb	r3, [r7, #11]
2405d2d8:	4313      	orrs	r3, r2
2405d2da:	b2db      	uxtb	r3, r3
}
2405d2dc:	4618      	mov	r0, r3
2405d2de:	3714      	adds	r7, #20
2405d2e0:	46bd      	mov	sp, r7
2405d2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
2405d2e6:	4770      	bx	lr

2405d2e8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
2405d2e8:	b480      	push	{r7}
2405d2ea:	b085      	sub	sp, #20
2405d2ec:	af00      	add	r7, sp, #0
2405d2ee:	4603      	mov	r3, r0
2405d2f0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
2405d2f2:	79fb      	ldrb	r3, [r7, #7]
2405d2f4:	091b      	lsrs	r3, r3, #4
2405d2f6:	b2db      	uxtb	r3, r3
2405d2f8:	461a      	mov	r2, r3
2405d2fa:	0092      	lsls	r2, r2, #2
2405d2fc:	4413      	add	r3, r2
2405d2fe:	005b      	lsls	r3, r3, #1
2405d300:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
2405d302:	79fb      	ldrb	r3, [r7, #7]
2405d304:	f003 030f 	and.w	r3, r3, #15
2405d308:	b2da      	uxtb	r2, r3
2405d30a:	7bfb      	ldrb	r3, [r7, #15]
2405d30c:	4413      	add	r3, r2
2405d30e:	b2db      	uxtb	r3, r3
}
2405d310:	4618      	mov	r0, r3
2405d312:	3714      	adds	r7, #20
2405d314:	46bd      	mov	sp, r7
2405d316:	f85d 7b04 	ldr.w	r7, [sp], #4
2405d31a:	4770      	bx	lr

2405d31c <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
2405d31c:	b580      	push	{r7, lr}
2405d31e:	b086      	sub	sp, #24
2405d320:	af00      	add	r7, sp, #0
2405d322:	60f8      	str	r0, [r7, #12]
2405d324:	60b9      	str	r1, [r7, #8]
2405d326:	607a      	str	r2, [r7, #4]
2405d328:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
2405d32a:	68bb      	ldr	r3, [r7, #8]
2405d32c:	2b02      	cmp	r3, #2
2405d32e:	d904      	bls.n	2405d33a <HAL_SAI_InitProtocol+0x1e>
2405d330:	68bb      	ldr	r3, [r7, #8]
2405d332:	3b03      	subs	r3, #3
2405d334:	2b01      	cmp	r3, #1
2405d336:	d812      	bhi.n	2405d35e <HAL_SAI_InitProtocol+0x42>
2405d338:	e008      	b.n	2405d34c <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
2405d33a:	683b      	ldr	r3, [r7, #0]
2405d33c:	687a      	ldr	r2, [r7, #4]
2405d33e:	68b9      	ldr	r1, [r7, #8]
2405d340:	68f8      	ldr	r0, [r7, #12]
2405d342:	f000 fd3b 	bl	2405ddbc <SAI_InitI2S>
2405d346:	4603      	mov	r3, r0
2405d348:	75fb      	strb	r3, [r7, #23]
      break;
2405d34a:	e00b      	b.n	2405d364 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
2405d34c:	683b      	ldr	r3, [r7, #0]
2405d34e:	687a      	ldr	r2, [r7, #4]
2405d350:	68b9      	ldr	r1, [r7, #8]
2405d352:	68f8      	ldr	r0, [r7, #12]
2405d354:	f000 fde4 	bl	2405df20 <SAI_InitPCM>
2405d358:	4603      	mov	r3, r0
2405d35a:	75fb      	strb	r3, [r7, #23]
      break;
2405d35c:	e002      	b.n	2405d364 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
2405d35e:	2301      	movs	r3, #1
2405d360:	75fb      	strb	r3, [r7, #23]
      break;
2405d362:	bf00      	nop
  }

  if (status == HAL_OK)
2405d364:	7dfb      	ldrb	r3, [r7, #23]
2405d366:	2b00      	cmp	r3, #0
2405d368:	d104      	bne.n	2405d374 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
2405d36a:	68f8      	ldr	r0, [r7, #12]
2405d36c:	f000 f808 	bl	2405d380 <HAL_SAI_Init>
2405d370:	4603      	mov	r3, r0
2405d372:	75fb      	strb	r3, [r7, #23]
  }

  return status;
2405d374:	7dfb      	ldrb	r3, [r7, #23]
}
2405d376:	4618      	mov	r0, r3
2405d378:	3718      	adds	r7, #24
2405d37a:	46bd      	mov	sp, r7
2405d37c:	bd80      	pop	{r7, pc}
	...

2405d380 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
2405d380:	b580      	push	{r7, lr}
2405d382:	b08a      	sub	sp, #40	; 0x28
2405d384:	af00      	add	r7, sp, #0
2405d386:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
2405d388:	687b      	ldr	r3, [r7, #4]
2405d38a:	2b00      	cmp	r3, #0
2405d38c:	d101      	bne.n	2405d392 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
2405d38e:	2301      	movs	r3, #1
2405d390:	e1ec      	b.n	2405d76c <HAL_SAI_Init+0x3ec>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
2405d392:	687b      	ldr	r3, [r7, #4]
2405d394:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
2405d398:	2b01      	cmp	r3, #1
2405d39a:	d10e      	bne.n	2405d3ba <HAL_SAI_Init+0x3a>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
    {
      return HAL_ERROR;
    }
#else
    if ((hsai->Instance != SAI1_Block_A) ||
2405d39c:	687b      	ldr	r3, [r7, #4]
2405d39e:	681b      	ldr	r3, [r3, #0]
2405d3a0:	4a91      	ldr	r2, [pc, #580]	; (2405d5e8 <HAL_SAI_Init+0x268>)
2405d3a2:	4293      	cmp	r3, r2
2405d3a4:	d107      	bne.n	2405d3b6 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
2405d3a6:	687b      	ldr	r3, [r7, #4]
2405d3a8:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
2405d3aa:	2b01      	cmp	r3, #1
2405d3ac:	d103      	bne.n	2405d3b6 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
2405d3ae:	687b      	ldr	r3, [r7, #4]
2405d3b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
2405d3b2:	2b00      	cmp	r3, #0
2405d3b4:	d001      	beq.n	2405d3ba <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
2405d3b6:	2301      	movs	r3, #1
2405d3b8:	e1d8      	b.n	2405d76c <HAL_SAI_Init+0x3ec>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
2405d3ba:	687b      	ldr	r3, [r7, #4]
2405d3bc:	681b      	ldr	r3, [r3, #0]
2405d3be:	4a8a      	ldr	r2, [pc, #552]	; (2405d5e8 <HAL_SAI_Init+0x268>)
2405d3c0:	4293      	cmp	r3, r2
2405d3c2:	d004      	beq.n	2405d3ce <HAL_SAI_Init+0x4e>
2405d3c4:	687b      	ldr	r3, [r7, #4]
2405d3c6:	681b      	ldr	r3, [r3, #0]
2405d3c8:	4a88      	ldr	r2, [pc, #544]	; (2405d5ec <HAL_SAI_Init+0x26c>)
2405d3ca:	4293      	cmp	r3, r2
2405d3cc:	d102      	bne.n	2405d3d4 <HAL_SAI_Init+0x54>
  {
    SaiBaseAddress = SAI1;
2405d3ce:	4b88      	ldr	r3, [pc, #544]	; (2405d5f0 <HAL_SAI_Init+0x270>)
2405d3d0:	61bb      	str	r3, [r7, #24]
2405d3d2:	e00e      	b.n	2405d3f2 <HAL_SAI_Init+0x72>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
2405d3d4:	687b      	ldr	r3, [r7, #4]
2405d3d6:	681b      	ldr	r3, [r3, #0]
2405d3d8:	4a86      	ldr	r2, [pc, #536]	; (2405d5f4 <HAL_SAI_Init+0x274>)
2405d3da:	4293      	cmp	r3, r2
2405d3dc:	d004      	beq.n	2405d3e8 <HAL_SAI_Init+0x68>
2405d3de:	687b      	ldr	r3, [r7, #4]
2405d3e0:	681b      	ldr	r3, [r3, #0]
2405d3e2:	4a85      	ldr	r2, [pc, #532]	; (2405d5f8 <HAL_SAI_Init+0x278>)
2405d3e4:	4293      	cmp	r3, r2
2405d3e6:	d102      	bne.n	2405d3ee <HAL_SAI_Init+0x6e>
  {
    SaiBaseAddress = SAI2;
2405d3e8:	4b84      	ldr	r3, [pc, #528]	; (2405d5fc <HAL_SAI_Init+0x27c>)
2405d3ea:	61bb      	str	r3, [r7, #24]
2405d3ec:	e001      	b.n	2405d3f2 <HAL_SAI_Init+0x72>
    SaiBaseAddress = SAI4;
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
2405d3ee:	2301      	movs	r3, #1
2405d3f0:	e1bc      	b.n	2405d76c <HAL_SAI_Init+0x3ec>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
2405d3f2:	687b      	ldr	r3, [r7, #4]
2405d3f4:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
2405d3f8:	b2db      	uxtb	r3, r3
2405d3fa:	2b00      	cmp	r3, #0
2405d3fc:	d106      	bne.n	2405d40c <HAL_SAI_Init+0x8c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
2405d3fe:	687b      	ldr	r3, [r7, #4]
2405d400:	2200      	movs	r2, #0
2405d402:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
2405d406:	6878      	ldr	r0, [r7, #4]
2405d408:	f7f5 f9bc 	bl	24052784 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
2405d40c:	6878      	ldr	r0, [r7, #4]
2405d40e:	f000 fe41 	bl	2405e094 <SAI_Disable>
2405d412:	4603      	mov	r3, r0
2405d414:	2b00      	cmp	r3, #0
2405d416:	d001      	beq.n	2405d41c <HAL_SAI_Init+0x9c>
  {
    return HAL_ERROR;
2405d418:	2301      	movs	r3, #1
2405d41a:	e1a7      	b.n	2405d76c <HAL_SAI_Init+0x3ec>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
2405d41c:	687b      	ldr	r3, [r7, #4]
2405d41e:	2202      	movs	r2, #2
2405d420:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
2405d424:	687b      	ldr	r3, [r7, #4]
2405d426:	68db      	ldr	r3, [r3, #12]
2405d428:	2b02      	cmp	r3, #2
2405d42a:	d00c      	beq.n	2405d446 <HAL_SAI_Init+0xc6>
2405d42c:	2b02      	cmp	r3, #2
2405d42e:	d80d      	bhi.n	2405d44c <HAL_SAI_Init+0xcc>
2405d430:	2b00      	cmp	r3, #0
2405d432:	d002      	beq.n	2405d43a <HAL_SAI_Init+0xba>
2405d434:	2b01      	cmp	r3, #1
2405d436:	d003      	beq.n	2405d440 <HAL_SAI_Init+0xc0>
2405d438:	e008      	b.n	2405d44c <HAL_SAI_Init+0xcc>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
2405d43a:	2300      	movs	r3, #0
2405d43c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
2405d43e:	e008      	b.n	2405d452 <HAL_SAI_Init+0xd2>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
2405d440:	2310      	movs	r3, #16
2405d442:	627b      	str	r3, [r7, #36]	; 0x24
      break;
2405d444:	e005      	b.n	2405d452 <HAL_SAI_Init+0xd2>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
2405d446:	2320      	movs	r3, #32
2405d448:	627b      	str	r3, [r7, #36]	; 0x24
      break;
2405d44a:	e002      	b.n	2405d452 <HAL_SAI_Init+0xd2>
    default:
      tmpregisterGCR = 0;
2405d44c:	2300      	movs	r3, #0
2405d44e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
2405d450:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
2405d452:	687b      	ldr	r3, [r7, #4]
2405d454:	689b      	ldr	r3, [r3, #8]
2405d456:	2b03      	cmp	r3, #3
2405d458:	d81d      	bhi.n	2405d496 <HAL_SAI_Init+0x116>
2405d45a:	a201      	add	r2, pc, #4	; (adr r2, 2405d460 <HAL_SAI_Init+0xe0>)
2405d45c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2405d460:	2405d471 	.word	0x2405d471
2405d464:	2405d477 	.word	0x2405d477
2405d468:	2405d47f 	.word	0x2405d47f
2405d46c:	2405d487 	.word	0x2405d487
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
2405d470:	2300      	movs	r3, #0
2405d472:	61fb      	str	r3, [r7, #28]
      break;
2405d474:	e012      	b.n	2405d49c <HAL_SAI_Init+0x11c>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
2405d476:	f44f 6380 	mov.w	r3, #1024	; 0x400
2405d47a:	61fb      	str	r3, [r7, #28]
      break;
2405d47c:	e00e      	b.n	2405d49c <HAL_SAI_Init+0x11c>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
2405d47e:	f44f 6300 	mov.w	r3, #2048	; 0x800
2405d482:	61fb      	str	r3, [r7, #28]
      break;
2405d484:	e00a      	b.n	2405d49c <HAL_SAI_Init+0x11c>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
2405d486:	f44f 6300 	mov.w	r3, #2048	; 0x800
2405d48a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
2405d48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2405d48e:	f043 0301 	orr.w	r3, r3, #1
2405d492:	627b      	str	r3, [r7, #36]	; 0x24
      break;
2405d494:	e002      	b.n	2405d49c <HAL_SAI_Init+0x11c>
      syncen_bits = SAI_xCR1_SYNCEN_1;
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
      break;
#endif /* SAI4 */
    default:
      syncen_bits = 0;
2405d496:	2300      	movs	r3, #0
2405d498:	61fb      	str	r3, [r7, #28]
      break;
2405d49a:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
2405d49c:	69bb      	ldr	r3, [r7, #24]
2405d49e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2405d4a0:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
2405d4a2:	687b      	ldr	r3, [r7, #4]
2405d4a4:	6a1b      	ldr	r3, [r3, #32]
2405d4a6:	2b00      	cmp	r3, #0
2405d4a8:	f000 8084 	beq.w	2405d5b4 <HAL_SAI_Init+0x234>
  {
    uint32_t freq = 0;
2405d4ac:	2300      	movs	r3, #0
2405d4ae:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
2405d4b0:	687b      	ldr	r3, [r7, #4]
2405d4b2:	681b      	ldr	r3, [r3, #0]
2405d4b4:	4a4c      	ldr	r2, [pc, #304]	; (2405d5e8 <HAL_SAI_Init+0x268>)
2405d4b6:	4293      	cmp	r3, r2
2405d4b8:	d004      	beq.n	2405d4c4 <HAL_SAI_Init+0x144>
2405d4ba:	687b      	ldr	r3, [r7, #4]
2405d4bc:	681b      	ldr	r3, [r3, #0]
2405d4be:	4a4b      	ldr	r2, [pc, #300]	; (2405d5ec <HAL_SAI_Init+0x26c>)
2405d4c0:	4293      	cmp	r3, r2
2405d4c2:	d104      	bne.n	2405d4ce <HAL_SAI_Init+0x14e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
2405d4c4:	f44f 7080 	mov.w	r0, #256	; 0x100
2405d4c8:	f7fe fa6a 	bl	2405b9a0 <HAL_RCCEx_GetPeriphCLKFreq>
2405d4cc:	6178      	str	r0, [r7, #20]
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
    }
#else
    if (hsai->Instance == SAI2_Block_A)
2405d4ce:	687b      	ldr	r3, [r7, #4]
2405d4d0:	681b      	ldr	r3, [r3, #0]
2405d4d2:	4a48      	ldr	r2, [pc, #288]	; (2405d5f4 <HAL_SAI_Init+0x274>)
2405d4d4:	4293      	cmp	r3, r2
2405d4d6:	d104      	bne.n	2405d4e2 <HAL_SAI_Init+0x162>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2A);
2405d4d8:	f44f 7000 	mov.w	r0, #512	; 0x200
2405d4dc:	f7fe fa60 	bl	2405b9a0 <HAL_RCCEx_GetPeriphCLKFreq>
2405d4e0:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI2_Block_B)
2405d4e2:	687b      	ldr	r3, [r7, #4]
2405d4e4:	681b      	ldr	r3, [r3, #0]
2405d4e6:	4a44      	ldr	r2, [pc, #272]	; (2405d5f8 <HAL_SAI_Init+0x278>)
2405d4e8:	4293      	cmp	r3, r2
2405d4ea:	d104      	bne.n	2405d4f6 <HAL_SAI_Init+0x176>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2B);
2405d4ec:	f44f 6080 	mov.w	r0, #1024	; 0x400
2405d4f0:	f7fe fa56 	bl	2405b9a0 <HAL_RCCEx_GetPeriphCLKFreq>
2405d4f4:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
2405d4f6:	687b      	ldr	r3, [r7, #4]
2405d4f8:	699b      	ldr	r3, [r3, #24]
2405d4fa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
2405d4fe:	d120      	bne.n	2405d542 <HAL_SAI_Init+0x1c2>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
2405d500:	687b      	ldr	r3, [r7, #4]
2405d502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2405d504:	2b04      	cmp	r3, #4
2405d506:	d102      	bne.n	2405d50e <HAL_SAI_Init+0x18e>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
2405d508:	2340      	movs	r3, #64	; 0x40
2405d50a:	60fb      	str	r3, [r7, #12]
2405d50c:	e00a      	b.n	2405d524 <HAL_SAI_Init+0x1a4>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
2405d50e:	687b      	ldr	r3, [r7, #4]
2405d510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2405d512:	2b08      	cmp	r3, #8
2405d514:	d103      	bne.n	2405d51e <HAL_SAI_Init+0x19e>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
2405d516:	f44f 7380 	mov.w	r3, #256	; 0x100
2405d51a:	60fb      	str	r3, [r7, #12]
2405d51c:	e002      	b.n	2405d524 <HAL_SAI_Init+0x1a4>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
2405d51e:	687b      	ldr	r3, [r7, #4]
2405d520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405d522:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
2405d524:	697a      	ldr	r2, [r7, #20]
2405d526:	4613      	mov	r3, r2
2405d528:	009b      	lsls	r3, r3, #2
2405d52a:	4413      	add	r3, r2
2405d52c:	005b      	lsls	r3, r3, #1
2405d52e:	4619      	mov	r1, r3
2405d530:	687b      	ldr	r3, [r7, #4]
2405d532:	6a1b      	ldr	r3, [r3, #32]
2405d534:	68fa      	ldr	r2, [r7, #12]
2405d536:	fb02 f303 	mul.w	r3, r2, r3
2405d53a:	fbb1 f3f3 	udiv	r3, r1, r3
2405d53e:	613b      	str	r3, [r7, #16]
2405d540:	e017      	b.n	2405d572 <HAL_SAI_Init+0x1f2>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
2405d542:	687b      	ldr	r3, [r7, #4]
2405d544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405d546:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
2405d54a:	d101      	bne.n	2405d550 <HAL_SAI_Init+0x1d0>
2405d54c:	2302      	movs	r3, #2
2405d54e:	e000      	b.n	2405d552 <HAL_SAI_Init+0x1d2>
2405d550:	2301      	movs	r3, #1
2405d552:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
2405d554:	697a      	ldr	r2, [r7, #20]
2405d556:	4613      	mov	r3, r2
2405d558:	009b      	lsls	r3, r3, #2
2405d55a:	4413      	add	r3, r2
2405d55c:	005b      	lsls	r3, r3, #1
2405d55e:	4619      	mov	r1, r3
2405d560:	687b      	ldr	r3, [r7, #4]
2405d562:	6a1b      	ldr	r3, [r3, #32]
2405d564:	68ba      	ldr	r2, [r7, #8]
2405d566:	fb02 f303 	mul.w	r3, r2, r3
2405d56a:	021b      	lsls	r3, r3, #8
2405d56c:	fbb1 f3f3 	udiv	r3, r1, r3
2405d570:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
2405d572:	693b      	ldr	r3, [r7, #16]
2405d574:	4a22      	ldr	r2, [pc, #136]	; (2405d600 <HAL_SAI_Init+0x280>)
2405d576:	fba2 2303 	umull	r2, r3, r2, r3
2405d57a:	08da      	lsrs	r2, r3, #3
2405d57c:	687b      	ldr	r3, [r7, #4]
2405d57e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
2405d580:	6939      	ldr	r1, [r7, #16]
2405d582:	4b1f      	ldr	r3, [pc, #124]	; (2405d600 <HAL_SAI_Init+0x280>)
2405d584:	fba3 2301 	umull	r2, r3, r3, r1
2405d588:	08da      	lsrs	r2, r3, #3
2405d58a:	4613      	mov	r3, r2
2405d58c:	009b      	lsls	r3, r3, #2
2405d58e:	4413      	add	r3, r2
2405d590:	005b      	lsls	r3, r3, #1
2405d592:	1aca      	subs	r2, r1, r3
2405d594:	2a08      	cmp	r2, #8
2405d596:	d904      	bls.n	2405d5a2 <HAL_SAI_Init+0x222>
    {
      hsai->Init.Mckdiv += 1U;
2405d598:	687b      	ldr	r3, [r7, #4]
2405d59a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2405d59c:	1c5a      	adds	r2, r3, #1
2405d59e:	687b      	ldr	r3, [r7, #4]
2405d5a0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
2405d5a2:	687b      	ldr	r3, [r7, #4]
2405d5a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2405d5a6:	2b04      	cmp	r3, #4
2405d5a8:	d104      	bne.n	2405d5b4 <HAL_SAI_Init+0x234>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
2405d5aa:	687b      	ldr	r3, [r7, #4]
2405d5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2405d5ae:	085a      	lsrs	r2, r3, #1
2405d5b0:	687b      	ldr	r3, [r7, #4]
2405d5b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2405d5b4:	687b      	ldr	r3, [r7, #4]
2405d5b6:	685b      	ldr	r3, [r3, #4]
2405d5b8:	2b00      	cmp	r3, #0
2405d5ba:	d003      	beq.n	2405d5c4 <HAL_SAI_Init+0x244>
2405d5bc:	687b      	ldr	r3, [r7, #4]
2405d5be:	685b      	ldr	r3, [r3, #4]
2405d5c0:	2b02      	cmp	r3, #2
2405d5c2:	d109      	bne.n	2405d5d8 <HAL_SAI_Init+0x258>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
2405d5c4:	687b      	ldr	r3, [r7, #4]
2405d5c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405d5c8:	2b01      	cmp	r3, #1
2405d5ca:	d101      	bne.n	2405d5d0 <HAL_SAI_Init+0x250>
2405d5cc:	2300      	movs	r3, #0
2405d5ce:	e001      	b.n	2405d5d4 <HAL_SAI_Init+0x254>
2405d5d0:	f44f 7300 	mov.w	r3, #512	; 0x200
2405d5d4:	623b      	str	r3, [r7, #32]
2405d5d6:	e017      	b.n	2405d608 <HAL_SAI_Init+0x288>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
2405d5d8:	687b      	ldr	r3, [r7, #4]
2405d5da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2405d5dc:	2b01      	cmp	r3, #1
2405d5de:	d111      	bne.n	2405d604 <HAL_SAI_Init+0x284>
2405d5e0:	f44f 7300 	mov.w	r3, #512	; 0x200
2405d5e4:	e00f      	b.n	2405d606 <HAL_SAI_Init+0x286>
2405d5e6:	bf00      	nop
2405d5e8:	40015804 	.word	0x40015804
2405d5ec:	40015824 	.word	0x40015824
2405d5f0:	40015800 	.word	0x40015800
2405d5f4:	40015c04 	.word	0x40015c04
2405d5f8:	40015c24 	.word	0x40015c24
2405d5fc:	40015c00 	.word	0x40015c00
2405d600:	cccccccd 	.word	0xcccccccd
2405d604:	2300      	movs	r3, #0
2405d606:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
2405d608:	687b      	ldr	r3, [r7, #4]
2405d60a:	681b      	ldr	r3, [r3, #0]
2405d60c:	6819      	ldr	r1, [r3, #0]
2405d60e:	687b      	ldr	r3, [r7, #4]
2405d610:	681a      	ldr	r2, [r3, #0]
2405d612:	4b58      	ldr	r3, [pc, #352]	; (2405d774 <HAL_SAI_Init+0x3f4>)
2405d614:	400b      	ands	r3, r1
2405d616:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
2405d618:	687b      	ldr	r3, [r7, #4]
2405d61a:	681b      	ldr	r3, [r3, #0]
2405d61c:	6819      	ldr	r1, [r3, #0]
2405d61e:	687b      	ldr	r3, [r7, #4]
2405d620:	685a      	ldr	r2, [r3, #4]
2405d622:	687b      	ldr	r3, [r7, #4]
2405d624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2405d626:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
2405d628:	687b      	ldr	r3, [r7, #4]
2405d62a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
2405d62c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
2405d62e:	687b      	ldr	r3, [r7, #4]
2405d630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405d632:	431a      	orrs	r2, r3
2405d634:	6a3b      	ldr	r3, [r7, #32]
2405d636:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
2405d638:	69fb      	ldr	r3, [r7, #28]
2405d63a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
2405d63c:	687b      	ldr	r3, [r7, #4]
2405d63e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
2405d640:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
2405d642:	687b      	ldr	r3, [r7, #4]
2405d644:	695b      	ldr	r3, [r3, #20]
2405d646:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
2405d648:	687b      	ldr	r3, [r7, #4]
2405d64a:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
2405d64c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
2405d64e:	687b      	ldr	r3, [r7, #4]
2405d650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2405d652:	051b      	lsls	r3, r3, #20
2405d654:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
2405d656:	687b      	ldr	r3, [r7, #4]
2405d658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
2405d65a:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
2405d65c:	687b      	ldr	r3, [r7, #4]
2405d65e:	691b      	ldr	r3, [r3, #16]
2405d660:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
2405d662:	687b      	ldr	r3, [r7, #4]
2405d664:	681b      	ldr	r3, [r3, #0]
2405d666:	430a      	orrs	r2, r1
2405d668:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
2405d66a:	687b      	ldr	r3, [r7, #4]
2405d66c:	681b      	ldr	r3, [r3, #0]
2405d66e:	6859      	ldr	r1, [r3, #4]
2405d670:	687b      	ldr	r3, [r7, #4]
2405d672:	681a      	ldr	r2, [r3, #0]
2405d674:	4b40      	ldr	r3, [pc, #256]	; (2405d778 <HAL_SAI_Init+0x3f8>)
2405d676:	400b      	ands	r3, r1
2405d678:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
2405d67a:	687b      	ldr	r3, [r7, #4]
2405d67c:	681b      	ldr	r3, [r3, #0]
2405d67e:	6859      	ldr	r1, [r3, #4]
2405d680:	687b      	ldr	r3, [r7, #4]
2405d682:	69da      	ldr	r2, [r3, #28]
2405d684:	687b      	ldr	r3, [r7, #4]
2405d686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2405d688:	431a      	orrs	r2, r3
2405d68a:	687b      	ldr	r3, [r7, #4]
2405d68c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2405d68e:	431a      	orrs	r2, r3
2405d690:	687b      	ldr	r3, [r7, #4]
2405d692:	681b      	ldr	r3, [r3, #0]
2405d694:	430a      	orrs	r2, r1
2405d696:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
2405d698:	687b      	ldr	r3, [r7, #4]
2405d69a:	681b      	ldr	r3, [r3, #0]
2405d69c:	6899      	ldr	r1, [r3, #8]
2405d69e:	687b      	ldr	r3, [r7, #4]
2405d6a0:	681a      	ldr	r2, [r3, #0]
2405d6a2:	4b36      	ldr	r3, [pc, #216]	; (2405d77c <HAL_SAI_Init+0x3fc>)
2405d6a4:	400b      	ands	r3, r1
2405d6a6:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
2405d6a8:	687b      	ldr	r3, [r7, #4]
2405d6aa:	681b      	ldr	r3, [r3, #0]
2405d6ac:	6899      	ldr	r1, [r3, #8]
2405d6ae:	687b      	ldr	r3, [r7, #4]
2405d6b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405d6b2:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
2405d6b4:	687b      	ldr	r3, [r7, #4]
2405d6b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
2405d6b8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
2405d6ba:	687b      	ldr	r3, [r7, #4]
2405d6bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
2405d6be:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
2405d6c0:	687b      	ldr	r3, [r7, #4]
2405d6c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
2405d6c4:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
2405d6c6:	687b      	ldr	r3, [r7, #4]
2405d6c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2405d6ca:	3b01      	subs	r3, #1
2405d6cc:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
2405d6ce:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
2405d6d0:	687b      	ldr	r3, [r7, #4]
2405d6d2:	681b      	ldr	r3, [r3, #0]
2405d6d4:	430a      	orrs	r2, r1
2405d6d6:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
2405d6d8:	687b      	ldr	r3, [r7, #4]
2405d6da:	681b      	ldr	r3, [r3, #0]
2405d6dc:	68d9      	ldr	r1, [r3, #12]
2405d6de:	687b      	ldr	r3, [r7, #4]
2405d6e0:	681a      	ldr	r2, [r3, #0]
2405d6e2:	f24f 0320 	movw	r3, #61472	; 0xf020
2405d6e6:	400b      	ands	r3, r1
2405d6e8:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
2405d6ea:	687b      	ldr	r3, [r7, #4]
2405d6ec:	681b      	ldr	r3, [r3, #0]
2405d6ee:	68d9      	ldr	r1, [r3, #12]
2405d6f0:	687b      	ldr	r3, [r7, #4]
2405d6f2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2405d6f4:	687b      	ldr	r3, [r7, #4]
2405d6f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
2405d6f8:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
2405d6fa:	687b      	ldr	r3, [r7, #4]
2405d6fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2405d6fe:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
2405d700:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
2405d702:	687b      	ldr	r3, [r7, #4]
2405d704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2405d706:	3b01      	subs	r3, #1
2405d708:	021b      	lsls	r3, r3, #8
2405d70a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
2405d70c:	687b      	ldr	r3, [r7, #4]
2405d70e:	681b      	ldr	r3, [r3, #0]
2405d710:	430a      	orrs	r2, r1
2405d712:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
#else
  if (hsai->Instance == SAI1_Block_A)
2405d714:	687b      	ldr	r3, [r7, #4]
2405d716:	681b      	ldr	r3, [r3, #0]
2405d718:	4a19      	ldr	r2, [pc, #100]	; (2405d780 <HAL_SAI_Init+0x400>)
2405d71a:	4293      	cmp	r3, r2
2405d71c:	d119      	bne.n	2405d752 <HAL_SAI_Init+0x3d2>
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
2405d71e:	69bb      	ldr	r3, [r7, #24]
2405d720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2405d722:	f023 0201 	bic.w	r2, r3, #1
2405d726:	69bb      	ldr	r3, [r7, #24]
2405d728:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
2405d72a:	687b      	ldr	r3, [r7, #4]
2405d72c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
2405d730:	2b01      	cmp	r3, #1
2405d732:	d10e      	bne.n	2405d752 <HAL_SAI_Init+0x3d2>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
2405d734:	687b      	ldr	r3, [r7, #4]
2405d736:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
2405d738:	687b      	ldr	r3, [r7, #4]
2405d73a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2405d73c:	3b01      	subs	r3, #1
2405d73e:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
2405d740:	431a      	orrs	r2, r3
2405d742:	69bb      	ldr	r3, [r7, #24]
2405d744:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
2405d746:	69bb      	ldr	r3, [r7, #24]
2405d748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2405d74a:	f043 0201 	orr.w	r2, r3, #1
2405d74e:	69bb      	ldr	r3, [r7, #24]
2405d750:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
2405d752:	687b      	ldr	r3, [r7, #4]
2405d754:	2200      	movs	r2, #0
2405d756:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
2405d75a:	687b      	ldr	r3, [r7, #4]
2405d75c:	2201      	movs	r2, #1
2405d75e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
2405d762:	687b      	ldr	r3, [r7, #4]
2405d764:	2200      	movs	r2, #0
2405d766:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
2405d76a:	2300      	movs	r3, #0
}
2405d76c:	4618      	mov	r0, r3
2405d76e:	3728      	adds	r7, #40	; 0x28
2405d770:	46bd      	mov	sp, r7
2405d772:	bd80      	pop	{r7, pc}
2405d774:	f005c010 	.word	0xf005c010
2405d778:	ffff1ff0 	.word	0xffff1ff0
2405d77c:	fff88000 	.word	0xfff88000
2405d780:	40015804 	.word	0x40015804

2405d784 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
2405d784:	b580      	push	{r7, lr}
2405d786:	b084      	sub	sp, #16
2405d788:	af00      	add	r7, sp, #0
2405d78a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
2405d78c:	2300      	movs	r3, #0
2405d78e:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
2405d790:	687b      	ldr	r3, [r7, #4]
2405d792:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
2405d796:	2b01      	cmp	r3, #1
2405d798:	d101      	bne.n	2405d79e <HAL_SAI_Abort+0x1a>
2405d79a:	2302      	movs	r3, #2
2405d79c:	e07d      	b.n	2405d89a <HAL_SAI_Abort+0x116>
2405d79e:	687b      	ldr	r3, [r7, #4]
2405d7a0:	2201      	movs	r2, #1
2405d7a2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405d7a6:	687b      	ldr	r3, [r7, #4]
2405d7a8:	681b      	ldr	r3, [r3, #0]
2405d7aa:	681b      	ldr	r3, [r3, #0]
2405d7ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405d7b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2405d7b4:	d14f      	bne.n	2405d856 <HAL_SAI_Abort+0xd2>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
2405d7b6:	687b      	ldr	r3, [r7, #4]
2405d7b8:	681b      	ldr	r3, [r3, #0]
2405d7ba:	681a      	ldr	r2, [r3, #0]
2405d7bc:	687b      	ldr	r3, [r7, #4]
2405d7be:	681b      	ldr	r3, [r3, #0]
2405d7c0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
2405d7c4:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX)&& (hsai->hdmatx != NULL))
2405d7c6:	687b      	ldr	r3, [r7, #4]
2405d7c8:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
2405d7cc:	b2db      	uxtb	r3, r3
2405d7ce:	2b12      	cmp	r3, #18
2405d7d0:	d11d      	bne.n	2405d80e <HAL_SAI_Abort+0x8a>
2405d7d2:	687b      	ldr	r3, [r7, #4]
2405d7d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405d7d8:	2b00      	cmp	r3, #0
2405d7da:	d018      	beq.n	2405d80e <HAL_SAI_Abort+0x8a>
    {
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
2405d7dc:	687b      	ldr	r3, [r7, #4]
2405d7de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405d7e2:	4618      	mov	r0, r3
2405d7e4:	f7f8 f804 	bl	240557f0 <HAL_DMA_Abort>
2405d7e8:	4603      	mov	r3, r0
2405d7ea:	2b00      	cmp	r3, #0
2405d7ec:	d00f      	beq.n	2405d80e <HAL_SAI_Abort+0x8a>
      {
        /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
2405d7ee:	687b      	ldr	r3, [r7, #4]
2405d7f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405d7f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405d7f6:	2b80      	cmp	r3, #128	; 0x80
2405d7f8:	d009      	beq.n	2405d80e <HAL_SAI_Abort+0x8a>
        {
          status = HAL_ERROR;
2405d7fa:	2301      	movs	r3, #1
2405d7fc:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2405d7fe:	687b      	ldr	r3, [r7, #4]
2405d800:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405d804:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2405d808:	687b      	ldr	r3, [r7, #4]
2405d80a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        }
      }
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
2405d80e:	687b      	ldr	r3, [r7, #4]
2405d810:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
2405d814:	b2db      	uxtb	r3, r3
2405d816:	2b22      	cmp	r3, #34	; 0x22
2405d818:	d11d      	bne.n	2405d856 <HAL_SAI_Abort+0xd2>
2405d81a:	687b      	ldr	r3, [r7, #4]
2405d81c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405d820:	2b00      	cmp	r3, #0
2405d822:	d018      	beq.n	2405d856 <HAL_SAI_Abort+0xd2>
    {
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
2405d824:	687b      	ldr	r3, [r7, #4]
2405d826:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405d82a:	4618      	mov	r0, r3
2405d82c:	f7f7 ffe0 	bl	240557f0 <HAL_DMA_Abort>
2405d830:	4603      	mov	r3, r0
2405d832:	2b00      	cmp	r3, #0
2405d834:	d00f      	beq.n	2405d856 <HAL_SAI_Abort+0xd2>
      {
        /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
2405d836:	687b      	ldr	r3, [r7, #4]
2405d838:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405d83c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2405d83e:	2b80      	cmp	r3, #128	; 0x80
2405d840:	d009      	beq.n	2405d856 <HAL_SAI_Abort+0xd2>
        {
          status = HAL_ERROR;
2405d842:	2301      	movs	r3, #1
2405d844:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2405d846:	687b      	ldr	r3, [r7, #4]
2405d848:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405d84c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2405d850:	687b      	ldr	r3, [r7, #4]
2405d852:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      }
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
2405d856:	687b      	ldr	r3, [r7, #4]
2405d858:	681b      	ldr	r3, [r3, #0]
2405d85a:	2200      	movs	r2, #0
2405d85c:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
2405d85e:	687b      	ldr	r3, [r7, #4]
2405d860:	681b      	ldr	r3, [r3, #0]
2405d862:	f04f 32ff 	mov.w	r2, #4294967295
2405d866:	619a      	str	r2, [r3, #24]

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
2405d868:	6878      	ldr	r0, [r7, #4]
2405d86a:	f000 fc13 	bl	2405e094 <SAI_Disable>
2405d86e:	4603      	mov	r3, r0
2405d870:	2b00      	cmp	r3, #0
2405d872:	d001      	beq.n	2405d878 <HAL_SAI_Abort+0xf4>
  {
    status = HAL_ERROR;
2405d874:	2301      	movs	r3, #1
2405d876:	73fb      	strb	r3, [r7, #15]
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
2405d878:	687b      	ldr	r3, [r7, #4]
2405d87a:	681b      	ldr	r3, [r3, #0]
2405d87c:	685a      	ldr	r2, [r3, #4]
2405d87e:	687b      	ldr	r3, [r7, #4]
2405d880:	681b      	ldr	r3, [r3, #0]
2405d882:	f042 0208 	orr.w	r2, r2, #8
2405d886:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
2405d888:	687b      	ldr	r3, [r7, #4]
2405d88a:	2201      	movs	r2, #1
2405d88c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
2405d890:	687b      	ldr	r3, [r7, #4]
2405d892:	2200      	movs	r2, #0
2405d894:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return status;
2405d898:	7bfb      	ldrb	r3, [r7, #15]
}
2405d89a:	4618      	mov	r0, r3
2405d89c:	3710      	adds	r7, #16
2405d89e:	46bd      	mov	sp, r7
2405d8a0:	bd80      	pop	{r7, pc}
	...

2405d8a4 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
2405d8a4:	b580      	push	{r7, lr}
2405d8a6:	b086      	sub	sp, #24
2405d8a8:	af00      	add	r7, sp, #0
2405d8aa:	60f8      	str	r0, [r7, #12]
2405d8ac:	60b9      	str	r1, [r7, #8]
2405d8ae:	4613      	mov	r3, r2
2405d8b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
2405d8b2:	f7f5 fa37 	bl	24052d24 <HAL_GetTick>
2405d8b6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
2405d8b8:	68bb      	ldr	r3, [r7, #8]
2405d8ba:	2b00      	cmp	r3, #0
2405d8bc:	d002      	beq.n	2405d8c4 <HAL_SAI_Transmit_DMA+0x20>
2405d8be:	88fb      	ldrh	r3, [r7, #6]
2405d8c0:	2b00      	cmp	r3, #0
2405d8c2:	d101      	bne.n	2405d8c8 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
2405d8c4:	2301      	movs	r3, #1
2405d8c6:	e098      	b.n	2405d9fa <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
2405d8c8:	68fb      	ldr	r3, [r7, #12]
2405d8ca:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
2405d8ce:	b2db      	uxtb	r3, r3
2405d8d0:	2b01      	cmp	r3, #1
2405d8d2:	f040 8091 	bne.w	2405d9f8 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
2405d8d6:	68fb      	ldr	r3, [r7, #12]
2405d8d8:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
2405d8dc:	2b01      	cmp	r3, #1
2405d8de:	d101      	bne.n	2405d8e4 <HAL_SAI_Transmit_DMA+0x40>
2405d8e0:	2302      	movs	r3, #2
2405d8e2:	e08a      	b.n	2405d9fa <HAL_SAI_Transmit_DMA+0x156>
2405d8e4:	68fb      	ldr	r3, [r7, #12]
2405d8e6:	2201      	movs	r2, #1
2405d8e8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
2405d8ec:	68fb      	ldr	r3, [r7, #12]
2405d8ee:	68ba      	ldr	r2, [r7, #8]
2405d8f0:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
2405d8f2:	68fb      	ldr	r3, [r7, #12]
2405d8f4:	88fa      	ldrh	r2, [r7, #6]
2405d8f6:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
2405d8fa:	68fb      	ldr	r3, [r7, #12]
2405d8fc:	88fa      	ldrh	r2, [r7, #6]
2405d8fe:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
2405d902:	68fb      	ldr	r3, [r7, #12]
2405d904:	2200      	movs	r2, #0
2405d906:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
2405d90a:	68fb      	ldr	r3, [r7, #12]
2405d90c:	2212      	movs	r2, #18
2405d90e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
2405d912:	68fb      	ldr	r3, [r7, #12]
2405d914:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405d918:	4a3a      	ldr	r2, [pc, #232]	; (2405da04 <HAL_SAI_Transmit_DMA+0x160>)
2405d91a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
2405d91c:	68fb      	ldr	r3, [r7, #12]
2405d91e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405d922:	4a39      	ldr	r2, [pc, #228]	; (2405da08 <HAL_SAI_Transmit_DMA+0x164>)
2405d924:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
2405d926:	68fb      	ldr	r3, [r7, #12]
2405d928:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405d92c:	4a37      	ldr	r2, [pc, #220]	; (2405da0c <HAL_SAI_Transmit_DMA+0x168>)
2405d92e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
2405d930:	68fb      	ldr	r3, [r7, #12]
2405d932:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405d936:	2200      	movs	r2, #0
2405d938:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
2405d93a:	68fb      	ldr	r3, [r7, #12]
2405d93c:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
2405d940:	68fb      	ldr	r3, [r7, #12]
2405d942:	6f9b      	ldr	r3, [r3, #120]	; 0x78
2405d944:	4619      	mov	r1, r3
2405d946:	68fb      	ldr	r3, [r7, #12]
2405d948:	681b      	ldr	r3, [r3, #0]
2405d94a:	331c      	adds	r3, #28
2405d94c:	461a      	mov	r2, r3
2405d94e:	68fb      	ldr	r3, [r7, #12]
2405d950:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
2405d954:	f7f7 fce2 	bl	2405531c <HAL_DMA_Start_IT>
2405d958:	4603      	mov	r3, r0
2405d95a:	2b00      	cmp	r3, #0
2405d95c:	d005      	beq.n	2405d96a <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
2405d95e:	68fb      	ldr	r3, [r7, #12]
2405d960:	2200      	movs	r2, #0
2405d962:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
2405d966:	2301      	movs	r3, #1
2405d968:	e047      	b.n	2405d9fa <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2405d96a:	2100      	movs	r1, #0
2405d96c:	68f8      	ldr	r0, [r7, #12]
2405d96e:	f000 fb59 	bl	2405e024 <SAI_InterruptFlag>
2405d972:	4601      	mov	r1, r0
2405d974:	68fb      	ldr	r3, [r7, #12]
2405d976:	681b      	ldr	r3, [r3, #0]
2405d978:	691a      	ldr	r2, [r3, #16]
2405d97a:	68fb      	ldr	r3, [r7, #12]
2405d97c:	681b      	ldr	r3, [r3, #0]
2405d97e:	430a      	orrs	r2, r1
2405d980:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
2405d982:	68fb      	ldr	r3, [r7, #12]
2405d984:	681b      	ldr	r3, [r3, #0]
2405d986:	681a      	ldr	r2, [r3, #0]
2405d988:	68fb      	ldr	r3, [r7, #12]
2405d98a:	681b      	ldr	r3, [r3, #0]
2405d98c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
2405d990:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
2405d992:	e015      	b.n	2405d9c0 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
2405d994:	f7f5 f9c6 	bl	24052d24 <HAL_GetTick>
2405d998:	4602      	mov	r2, r0
2405d99a:	697b      	ldr	r3, [r7, #20]
2405d99c:	1ad3      	subs	r3, r2, r3
2405d99e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
2405d9a2:	d90d      	bls.n	2405d9c0 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
2405d9a4:	68fb      	ldr	r3, [r7, #12]
2405d9a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405d9aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
2405d9ae:	68fb      	ldr	r3, [r7, #12]
2405d9b0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
2405d9b4:	68fb      	ldr	r3, [r7, #12]
2405d9b6:	2200      	movs	r2, #0
2405d9b8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
2405d9bc:	2303      	movs	r3, #3
2405d9be:	e01c      	b.n	2405d9fa <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
2405d9c0:	68fb      	ldr	r3, [r7, #12]
2405d9c2:	681b      	ldr	r3, [r3, #0]
2405d9c4:	695b      	ldr	r3, [r3, #20]
2405d9c6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
2405d9ca:	2b00      	cmp	r3, #0
2405d9cc:	d0e2      	beq.n	2405d994 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
2405d9ce:	68fb      	ldr	r3, [r7, #12]
2405d9d0:	681b      	ldr	r3, [r3, #0]
2405d9d2:	681b      	ldr	r3, [r3, #0]
2405d9d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2405d9d8:	2b00      	cmp	r3, #0
2405d9da:	d107      	bne.n	2405d9ec <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
2405d9dc:	68fb      	ldr	r3, [r7, #12]
2405d9de:	681b      	ldr	r3, [r3, #0]
2405d9e0:	681a      	ldr	r2, [r3, #0]
2405d9e2:	68fb      	ldr	r3, [r7, #12]
2405d9e4:	681b      	ldr	r3, [r3, #0]
2405d9e6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
2405d9ea:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
2405d9ec:	68fb      	ldr	r3, [r7, #12]
2405d9ee:	2200      	movs	r2, #0
2405d9f0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
2405d9f4:	2300      	movs	r3, #0
2405d9f6:	e000      	b.n	2405d9fa <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
2405d9f8:	2302      	movs	r3, #2
  }
}
2405d9fa:	4618      	mov	r0, r3
2405d9fc:	3718      	adds	r7, #24
2405d9fe:	46bd      	mov	sp, r7
2405da00:	bd80      	pop	{r7, pc}
2405da02:	bf00      	nop
2405da04:	2405e169 	.word	0x2405e169
2405da08:	2405e109 	.word	0x2405e109
2405da0c:	2405e185 	.word	0x2405e185

2405da10 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
2405da10:	b580      	push	{r7, lr}
2405da12:	b086      	sub	sp, #24
2405da14:	af00      	add	r7, sp, #0
2405da16:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
2405da18:	687b      	ldr	r3, [r7, #4]
2405da1a:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
2405da1e:	b2db      	uxtb	r3, r3
2405da20:	2b00      	cmp	r3, #0
2405da22:	f000 81a7 	beq.w	2405dd74 <HAL_SAI_IRQHandler+0x364>
  {
    uint32_t itflags = hsai->Instance->SR;
2405da26:	687b      	ldr	r3, [r7, #4]
2405da28:	681b      	ldr	r3, [r3, #0]
2405da2a:	695b      	ldr	r3, [r3, #20]
2405da2c:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
2405da2e:	687b      	ldr	r3, [r7, #4]
2405da30:	681b      	ldr	r3, [r3, #0]
2405da32:	691b      	ldr	r3, [r3, #16]
2405da34:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
2405da36:	687b      	ldr	r3, [r7, #4]
2405da38:	681b      	ldr	r3, [r3, #0]
2405da3a:	681b      	ldr	r3, [r3, #0]
2405da3c:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred ------------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
2405da3e:	697b      	ldr	r3, [r7, #20]
2405da40:	f003 0308 	and.w	r3, r3, #8
2405da44:	2b00      	cmp	r3, #0
2405da46:	d00a      	beq.n	2405da5e <HAL_SAI_IRQHandler+0x4e>
2405da48:	693b      	ldr	r3, [r7, #16]
2405da4a:	f003 0308 	and.w	r3, r3, #8
2405da4e:	2b00      	cmp	r3, #0
2405da50:	d005      	beq.n	2405da5e <HAL_SAI_IRQHandler+0x4e>
    {
      hsai->InterruptServiceRoutine(hsai);
2405da52:	687b      	ldr	r3, [r7, #4]
2405da54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
2405da58:	6878      	ldr	r0, [r7, #4]
2405da5a:	4798      	blx	r3
2405da5c:	e18a      	b.n	2405dd74 <HAL_SAI_IRQHandler+0x364>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
2405da5e:	697b      	ldr	r3, [r7, #20]
2405da60:	f003 0301 	and.w	r3, r3, #1
2405da64:	2b00      	cmp	r3, #0
2405da66:	d01e      	beq.n	2405daa6 <HAL_SAI_IRQHandler+0x96>
2405da68:	693b      	ldr	r3, [r7, #16]
2405da6a:	f003 0301 	and.w	r3, r3, #1
2405da6e:	2b00      	cmp	r3, #0
2405da70:	d019      	beq.n	2405daa6 <HAL_SAI_IRQHandler+0x96>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
2405da72:	687b      	ldr	r3, [r7, #4]
2405da74:	681b      	ldr	r3, [r3, #0]
2405da76:	2201      	movs	r2, #1
2405da78:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
2405da7a:	687b      	ldr	r3, [r7, #4]
2405da7c:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
2405da80:	b2db      	uxtb	r3, r3
2405da82:	2b22      	cmp	r3, #34	; 0x22
2405da84:	d101      	bne.n	2405da8a <HAL_SAI_IRQHandler+0x7a>
2405da86:	2301      	movs	r3, #1
2405da88:	e000      	b.n	2405da8c <HAL_SAI_IRQHandler+0x7c>
2405da8a:	2302      	movs	r3, #2
2405da8c:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
2405da8e:	687b      	ldr	r3, [r7, #4]
2405da90:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
2405da94:	68bb      	ldr	r3, [r7, #8]
2405da96:	431a      	orrs	r2, r3
2405da98:	687b      	ldr	r3, [r7, #4]
2405da9a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
2405da9e:	6878      	ldr	r0, [r7, #4]
2405daa0:	f000 f982 	bl	2405dda8 <HAL_SAI_ErrorCallback>
2405daa4:	e166      	b.n	2405dd74 <HAL_SAI_IRQHandler+0x364>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
2405daa6:	697b      	ldr	r3, [r7, #20]
2405daa8:	f003 0302 	and.w	r3, r3, #2
2405daac:	2b00      	cmp	r3, #0
2405daae:	d013      	beq.n	2405dad8 <HAL_SAI_IRQHandler+0xc8>
2405dab0:	693b      	ldr	r3, [r7, #16]
2405dab2:	f003 0302 	and.w	r3, r3, #2
2405dab6:	2b00      	cmp	r3, #0
2405dab8:	d00e      	beq.n	2405dad8 <HAL_SAI_IRQHandler+0xc8>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
2405daba:	687b      	ldr	r3, [r7, #4]
2405dabc:	681b      	ldr	r3, [r3, #0]
2405dabe:	2202      	movs	r2, #2
2405dac0:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
2405dac2:	687b      	ldr	r3, [r7, #4]
2405dac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
2405dac8:	2b00      	cmp	r3, #0
2405daca:	f000 8153 	beq.w	2405dd74 <HAL_SAI_IRQHandler+0x364>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
2405dace:	687b      	ldr	r3, [r7, #4]
2405dad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
2405dad4:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
2405dad6:	e14d      	b.n	2405dd74 <HAL_SAI_IRQHandler+0x364>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
2405dad8:	697b      	ldr	r3, [r7, #20]
2405dada:	f003 0320 	and.w	r3, r3, #32
2405dade:	2b00      	cmp	r3, #0
2405dae0:	d05b      	beq.n	2405db9a <HAL_SAI_IRQHandler+0x18a>
2405dae2:	693b      	ldr	r3, [r7, #16]
2405dae4:	f003 0320 	and.w	r3, r3, #32
2405dae8:	2b00      	cmp	r3, #0
2405daea:	d056      	beq.n	2405db9a <HAL_SAI_IRQHandler+0x18a>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
2405daec:	687b      	ldr	r3, [r7, #4]
2405daee:	681b      	ldr	r3, [r3, #0]
2405daf0:	2220      	movs	r2, #32
2405daf2:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
2405daf4:	687b      	ldr	r3, [r7, #4]
2405daf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405dafa:	f043 0204 	orr.w	r2, r3, #4
2405dafe:	687b      	ldr	r3, [r7, #4]
2405db00:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405db04:	68fb      	ldr	r3, [r7, #12]
2405db06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405db0a:	2b00      	cmp	r3, #0
2405db0c:	d03e      	beq.n	2405db8c <HAL_SAI_IRQHandler+0x17c>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
2405db0e:	687b      	ldr	r3, [r7, #4]
2405db10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405db14:	2b00      	cmp	r3, #0
2405db16:	d018      	beq.n	2405db4a <HAL_SAI_IRQHandler+0x13a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
2405db18:	687b      	ldr	r3, [r7, #4]
2405db1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405db1e:	4a97      	ldr	r2, [pc, #604]	; (2405dd7c <HAL_SAI_IRQHandler+0x36c>)
2405db20:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
2405db22:	687b      	ldr	r3, [r7, #4]
2405db24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405db28:	4618      	mov	r0, r3
2405db2a:	f7f8 f97f 	bl	24055e2c <HAL_DMA_Abort_IT>
2405db2e:	4603      	mov	r3, r0
2405db30:	2b00      	cmp	r3, #0
2405db32:	d00a      	beq.n	2405db4a <HAL_SAI_IRQHandler+0x13a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2405db34:	687b      	ldr	r3, [r7, #4]
2405db36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405db3a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2405db3e:	687b      	ldr	r3, [r7, #4]
2405db40:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
2405db44:	6878      	ldr	r0, [r7, #4]
2405db46:	f000 f92f 	bl	2405dda8 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
2405db4a:	687b      	ldr	r3, [r7, #4]
2405db4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405db50:	2b00      	cmp	r3, #0
2405db52:	f000 810a 	beq.w	2405dd6a <HAL_SAI_IRQHandler+0x35a>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
2405db56:	687b      	ldr	r3, [r7, #4]
2405db58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405db5c:	4a87      	ldr	r2, [pc, #540]	; (2405dd7c <HAL_SAI_IRQHandler+0x36c>)
2405db5e:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
2405db60:	687b      	ldr	r3, [r7, #4]
2405db62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405db66:	4618      	mov	r0, r3
2405db68:	f7f8 f960 	bl	24055e2c <HAL_DMA_Abort_IT>
2405db6c:	4603      	mov	r3, r0
2405db6e:	2b00      	cmp	r3, #0
2405db70:	f000 80fb 	beq.w	2405dd6a <HAL_SAI_IRQHandler+0x35a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2405db74:	687b      	ldr	r3, [r7, #4]
2405db76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405db7a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2405db7e:	687b      	ldr	r3, [r7, #4]
2405db80:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
2405db84:	6878      	ldr	r0, [r7, #4]
2405db86:	f000 f90f 	bl	2405dda8 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405db8a:	e0ee      	b.n	2405dd6a <HAL_SAI_IRQHandler+0x35a>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
2405db8c:	6878      	ldr	r0, [r7, #4]
2405db8e:	f7ff fdf9 	bl	2405d784 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
2405db92:	6878      	ldr	r0, [r7, #4]
2405db94:	f000 f908 	bl	2405dda8 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405db98:	e0e7      	b.n	2405dd6a <HAL_SAI_IRQHandler+0x35a>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
2405db9a:	697b      	ldr	r3, [r7, #20]
2405db9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
2405dba0:	2b00      	cmp	r3, #0
2405dba2:	d05b      	beq.n	2405dc5c <HAL_SAI_IRQHandler+0x24c>
2405dba4:	693b      	ldr	r3, [r7, #16]
2405dba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
2405dbaa:	2b00      	cmp	r3, #0
2405dbac:	d056      	beq.n	2405dc5c <HAL_SAI_IRQHandler+0x24c>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
2405dbae:	687b      	ldr	r3, [r7, #4]
2405dbb0:	681b      	ldr	r3, [r3, #0]
2405dbb2:	2240      	movs	r2, #64	; 0x40
2405dbb4:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
2405dbb6:	687b      	ldr	r3, [r7, #4]
2405dbb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405dbbc:	f043 0208 	orr.w	r2, r3, #8
2405dbc0:	687b      	ldr	r3, [r7, #4]
2405dbc2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405dbc6:	68fb      	ldr	r3, [r7, #12]
2405dbc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405dbcc:	2b00      	cmp	r3, #0
2405dbce:	d03e      	beq.n	2405dc4e <HAL_SAI_IRQHandler+0x23e>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
2405dbd0:	687b      	ldr	r3, [r7, #4]
2405dbd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405dbd6:	2b00      	cmp	r3, #0
2405dbd8:	d018      	beq.n	2405dc0c <HAL_SAI_IRQHandler+0x1fc>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
2405dbda:	687b      	ldr	r3, [r7, #4]
2405dbdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405dbe0:	4a66      	ldr	r2, [pc, #408]	; (2405dd7c <HAL_SAI_IRQHandler+0x36c>)
2405dbe2:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
2405dbe4:	687b      	ldr	r3, [r7, #4]
2405dbe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405dbea:	4618      	mov	r0, r3
2405dbec:	f7f8 f91e 	bl	24055e2c <HAL_DMA_Abort_IT>
2405dbf0:	4603      	mov	r3, r0
2405dbf2:	2b00      	cmp	r3, #0
2405dbf4:	d00a      	beq.n	2405dc0c <HAL_SAI_IRQHandler+0x1fc>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2405dbf6:	687b      	ldr	r3, [r7, #4]
2405dbf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405dbfc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2405dc00:	687b      	ldr	r3, [r7, #4]
2405dc02:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
2405dc06:	6878      	ldr	r0, [r7, #4]
2405dc08:	f000 f8ce 	bl	2405dda8 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
2405dc0c:	687b      	ldr	r3, [r7, #4]
2405dc0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405dc12:	2b00      	cmp	r3, #0
2405dc14:	f000 80ab 	beq.w	2405dd6e <HAL_SAI_IRQHandler+0x35e>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
2405dc18:	687b      	ldr	r3, [r7, #4]
2405dc1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405dc1e:	4a57      	ldr	r2, [pc, #348]	; (2405dd7c <HAL_SAI_IRQHandler+0x36c>)
2405dc20:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
2405dc22:	687b      	ldr	r3, [r7, #4]
2405dc24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405dc28:	4618      	mov	r0, r3
2405dc2a:	f7f8 f8ff 	bl	24055e2c <HAL_DMA_Abort_IT>
2405dc2e:	4603      	mov	r3, r0
2405dc30:	2b00      	cmp	r3, #0
2405dc32:	f000 809c 	beq.w	2405dd6e <HAL_SAI_IRQHandler+0x35e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2405dc36:	687b      	ldr	r3, [r7, #4]
2405dc38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405dc3c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2405dc40:	687b      	ldr	r3, [r7, #4]
2405dc42:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
2405dc46:	6878      	ldr	r0, [r7, #4]
2405dc48:	f000 f8ae 	bl	2405dda8 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405dc4c:	e08f      	b.n	2405dd6e <HAL_SAI_IRQHandler+0x35e>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
2405dc4e:	6878      	ldr	r0, [r7, #4]
2405dc50:	f7ff fd98 	bl	2405d784 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
2405dc54:	6878      	ldr	r0, [r7, #4]
2405dc56:	f000 f8a7 	bl	2405dda8 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405dc5a:	e088      	b.n	2405dd6e <HAL_SAI_IRQHandler+0x35e>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
2405dc5c:	697b      	ldr	r3, [r7, #20]
2405dc5e:	f003 0304 	and.w	r3, r3, #4
2405dc62:	2b00      	cmp	r3, #0
2405dc64:	d067      	beq.n	2405dd36 <HAL_SAI_IRQHandler+0x326>
2405dc66:	693b      	ldr	r3, [r7, #16]
2405dc68:	f003 0304 	and.w	r3, r3, #4
2405dc6c:	2b00      	cmp	r3, #0
2405dc6e:	d062      	beq.n	2405dd36 <HAL_SAI_IRQHandler+0x326>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
2405dc70:	687b      	ldr	r3, [r7, #4]
2405dc72:	681b      	ldr	r3, [r3, #0]
2405dc74:	2204      	movs	r2, #4
2405dc76:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
2405dc78:	687b      	ldr	r3, [r7, #4]
2405dc7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405dc7e:	f043 0220 	orr.w	r2, r3, #32
2405dc82:	687b      	ldr	r3, [r7, #4]
2405dc84:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405dc88:	68fb      	ldr	r3, [r7, #12]
2405dc8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2405dc8e:	2b00      	cmp	r3, #0
2405dc90:	d03c      	beq.n	2405dd0c <HAL_SAI_IRQHandler+0x2fc>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
2405dc92:	687b      	ldr	r3, [r7, #4]
2405dc94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405dc98:	2b00      	cmp	r3, #0
2405dc9a:	d018      	beq.n	2405dcce <HAL_SAI_IRQHandler+0x2be>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
2405dc9c:	687b      	ldr	r3, [r7, #4]
2405dc9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405dca2:	4a36      	ldr	r2, [pc, #216]	; (2405dd7c <HAL_SAI_IRQHandler+0x36c>)
2405dca4:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
2405dca6:	687b      	ldr	r3, [r7, #4]
2405dca8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2405dcac:	4618      	mov	r0, r3
2405dcae:	f7f8 f8bd 	bl	24055e2c <HAL_DMA_Abort_IT>
2405dcb2:	4603      	mov	r3, r0
2405dcb4:	2b00      	cmp	r3, #0
2405dcb6:	d00a      	beq.n	2405dcce <HAL_SAI_IRQHandler+0x2be>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2405dcb8:	687b      	ldr	r3, [r7, #4]
2405dcba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405dcbe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2405dcc2:	687b      	ldr	r3, [r7, #4]
2405dcc4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
2405dcc8:	6878      	ldr	r0, [r7, #4]
2405dcca:	f000 f86d 	bl	2405dda8 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
2405dcce:	687b      	ldr	r3, [r7, #4]
2405dcd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405dcd4:	2b00      	cmp	r3, #0
2405dcd6:	d04c      	beq.n	2405dd72 <HAL_SAI_IRQHandler+0x362>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
2405dcd8:	687b      	ldr	r3, [r7, #4]
2405dcda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405dcde:	4a27      	ldr	r2, [pc, #156]	; (2405dd7c <HAL_SAI_IRQHandler+0x36c>)
2405dce0:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
2405dce2:	687b      	ldr	r3, [r7, #4]
2405dce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405dce8:	4618      	mov	r0, r3
2405dcea:	f7f8 f89f 	bl	24055e2c <HAL_DMA_Abort_IT>
2405dcee:	4603      	mov	r3, r0
2405dcf0:	2b00      	cmp	r3, #0
2405dcf2:	d03e      	beq.n	2405dd72 <HAL_SAI_IRQHandler+0x362>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2405dcf4:	687b      	ldr	r3, [r7, #4]
2405dcf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405dcfa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2405dcfe:	687b      	ldr	r3, [r7, #4]
2405dd00:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
2405dd04:	6878      	ldr	r0, [r7, #4]
2405dd06:	f000 f84f 	bl	2405dda8 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405dd0a:	e032      	b.n	2405dd72 <HAL_SAI_IRQHandler+0x362>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
2405dd0c:	687b      	ldr	r3, [r7, #4]
2405dd0e:	681b      	ldr	r3, [r3, #0]
2405dd10:	2200      	movs	r2, #0
2405dd12:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
2405dd14:	687b      	ldr	r3, [r7, #4]
2405dd16:	681b      	ldr	r3, [r3, #0]
2405dd18:	f04f 32ff 	mov.w	r2, #4294967295
2405dd1c:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
2405dd1e:	687b      	ldr	r3, [r7, #4]
2405dd20:	2201      	movs	r2, #1
2405dd22:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

        /* Initialize XferCount */
        hsai->XferCount = 0U;
2405dd26:	687b      	ldr	r3, [r7, #4]
2405dd28:	2200      	movs	r2, #0
2405dd2a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
2405dd2e:	6878      	ldr	r0, [r7, #4]
2405dd30:	f000 f83a 	bl	2405dda8 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405dd34:	e01d      	b.n	2405dd72 <HAL_SAI_IRQHandler+0x362>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
2405dd36:	697b      	ldr	r3, [r7, #20]
2405dd38:	f003 0310 	and.w	r3, r3, #16
2405dd3c:	2b00      	cmp	r3, #0
2405dd3e:	d019      	beq.n	2405dd74 <HAL_SAI_IRQHandler+0x364>
2405dd40:	693b      	ldr	r3, [r7, #16]
2405dd42:	f003 0310 	and.w	r3, r3, #16
2405dd46:	2b00      	cmp	r3, #0
2405dd48:	d014      	beq.n	2405dd74 <HAL_SAI_IRQHandler+0x364>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
2405dd4a:	687b      	ldr	r3, [r7, #4]
2405dd4c:	681b      	ldr	r3, [r3, #0]
2405dd4e:	2210      	movs	r2, #16
2405dd50:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
2405dd52:	687b      	ldr	r3, [r7, #4]
2405dd54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405dd58:	f043 0210 	orr.w	r2, r3, #16
2405dd5c:	687b      	ldr	r3, [r7, #4]
2405dd5e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
2405dd62:	6878      	ldr	r0, [r7, #4]
2405dd64:	f000 f820 	bl	2405dda8 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
2405dd68:	e004      	b.n	2405dd74 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405dd6a:	bf00      	nop
2405dd6c:	e002      	b.n	2405dd74 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405dd6e:	bf00      	nop
2405dd70:	e000      	b.n	2405dd74 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
2405dd72:	bf00      	nop
}
2405dd74:	bf00      	nop
2405dd76:	3718      	adds	r7, #24
2405dd78:	46bd      	mov	sp, r7
2405dd7a:	bd80      	pop	{r7, pc}
2405dd7c:	2405e1e3 	.word	0x2405e1e3

2405dd80 <HAL_SAI_TxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
2405dd80:	b480      	push	{r7}
2405dd82:	b083      	sub	sp, #12
2405dd84:	af00      	add	r7, sp, #0
2405dd86:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
2405dd88:	bf00      	nop
2405dd8a:	370c      	adds	r7, #12
2405dd8c:	46bd      	mov	sp, r7
2405dd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
2405dd92:	4770      	bx	lr

2405dd94 <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
2405dd94:	b480      	push	{r7}
2405dd96:	b083      	sub	sp, #12
2405dd98:	af00      	add	r7, sp, #0
2405dd9a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
2405dd9c:	bf00      	nop
2405dd9e:	370c      	adds	r7, #12
2405dda0:	46bd      	mov	sp, r7
2405dda2:	f85d 7b04 	ldr.w	r7, [sp], #4
2405dda6:	4770      	bx	lr

2405dda8 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
2405dda8:	b480      	push	{r7}
2405ddaa:	b083      	sub	sp, #12
2405ddac:	af00      	add	r7, sp, #0
2405ddae:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
2405ddb0:	bf00      	nop
2405ddb2:	370c      	adds	r7, #12
2405ddb4:	46bd      	mov	sp, r7
2405ddb6:	f85d 7b04 	ldr.w	r7, [sp], #4
2405ddba:	4770      	bx	lr

2405ddbc <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
2405ddbc:	b480      	push	{r7}
2405ddbe:	b087      	sub	sp, #28
2405ddc0:	af00      	add	r7, sp, #0
2405ddc2:	60f8      	str	r0, [r7, #12]
2405ddc4:	60b9      	str	r1, [r7, #8]
2405ddc6:	607a      	str	r2, [r7, #4]
2405ddc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
2405ddca:	2300      	movs	r3, #0
2405ddcc:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
2405ddce:	68fb      	ldr	r3, [r7, #12]
2405ddd0:	2200      	movs	r2, #0
2405ddd2:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
2405ddd4:	68fb      	ldr	r3, [r7, #12]
2405ddd6:	2200      	movs	r2, #0
2405ddd8:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2405ddda:	68fb      	ldr	r3, [r7, #12]
2405dddc:	685b      	ldr	r3, [r3, #4]
2405ddde:	2b00      	cmp	r3, #0
2405dde0:	d003      	beq.n	2405ddea <SAI_InitI2S+0x2e>
2405dde2:	68fb      	ldr	r3, [r7, #12]
2405dde4:	685b      	ldr	r3, [r3, #4]
2405dde6:	2b02      	cmp	r3, #2
2405dde8:	d103      	bne.n	2405ddf2 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
2405ddea:	68fb      	ldr	r3, [r7, #12]
2405ddec:	2200      	movs	r2, #0
2405ddee:	651a      	str	r2, [r3, #80]	; 0x50
2405ddf0:	e002      	b.n	2405ddf8 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
2405ddf2:	68fb      	ldr	r3, [r7, #12]
2405ddf4:	2201      	movs	r2, #1
2405ddf6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
2405ddf8:	68fb      	ldr	r3, [r7, #12]
2405ddfa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
2405ddfe:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
2405de00:	68fb      	ldr	r3, [r7, #12]
2405de02:	f64f 72ff 	movw	r2, #65535	; 0xffff
2405de06:	675a      	str	r2, [r3, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
2405de08:	68fb      	ldr	r3, [r7, #12]
2405de0a:	2200      	movs	r2, #0
2405de0c:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
2405de0e:	68fb      	ldr	r3, [r7, #12]
2405de10:	683a      	ldr	r2, [r7, #0]
2405de12:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
2405de14:	683b      	ldr	r3, [r7, #0]
2405de16:	f003 0301 	and.w	r3, r3, #1
2405de1a:	2b00      	cmp	r3, #0
2405de1c:	d001      	beq.n	2405de22 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
2405de1e:	2301      	movs	r3, #1
2405de20:	e077      	b.n	2405df12 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
2405de22:	68bb      	ldr	r3, [r7, #8]
2405de24:	2b00      	cmp	r3, #0
2405de26:	d107      	bne.n	2405de38 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
2405de28:	68fb      	ldr	r3, [r7, #12]
2405de2a:	2200      	movs	r2, #0
2405de2c:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
2405de2e:	68fb      	ldr	r3, [r7, #12]
2405de30:	f44f 2280 	mov.w	r2, #262144	; 0x40000
2405de34:	665a      	str	r2, [r3, #100]	; 0x64
2405de36:	e006      	b.n	2405de46 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
2405de38:	68fb      	ldr	r3, [r7, #12]
2405de3a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
2405de3e:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
2405de40:	68fb      	ldr	r3, [r7, #12]
2405de42:	2200      	movs	r2, #0
2405de44:	665a      	str	r2, [r3, #100]	; 0x64
2405de46:	687b      	ldr	r3, [r7, #4]
2405de48:	2b03      	cmp	r3, #3
2405de4a:	d84f      	bhi.n	2405deec <SAI_InitI2S+0x130>
2405de4c:	a201      	add	r2, pc, #4	; (adr r2, 2405de54 <SAI_InitI2S+0x98>)
2405de4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2405de52:	bf00      	nop
2405de54:	2405de65 	.word	0x2405de65
2405de58:	2405de87 	.word	0x2405de87
2405de5c:	2405dea9 	.word	0x2405dea9
2405de60:	2405decb 	.word	0x2405decb

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
2405de64:	68fb      	ldr	r3, [r7, #12]
2405de66:	2280      	movs	r2, #128	; 0x80
2405de68:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
2405de6a:	683b      	ldr	r3, [r7, #0]
2405de6c:	085b      	lsrs	r3, r3, #1
2405de6e:	015a      	lsls	r2, r3, #5
2405de70:	68fb      	ldr	r3, [r7, #12]
2405de72:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
2405de74:	683b      	ldr	r3, [r7, #0]
2405de76:	085b      	lsrs	r3, r3, #1
2405de78:	011a      	lsls	r2, r3, #4
2405de7a:	68fb      	ldr	r3, [r7, #12]
2405de7c:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
2405de7e:	68fb      	ldr	r3, [r7, #12]
2405de80:	2240      	movs	r2, #64	; 0x40
2405de82:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
2405de84:	e035      	b.n	2405def2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
2405de86:	68fb      	ldr	r3, [r7, #12]
2405de88:	2280      	movs	r2, #128	; 0x80
2405de8a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2405de8c:	683b      	ldr	r3, [r7, #0]
2405de8e:	085b      	lsrs	r3, r3, #1
2405de90:	019a      	lsls	r2, r3, #6
2405de92:	68fb      	ldr	r3, [r7, #12]
2405de94:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
2405de96:	683b      	ldr	r3, [r7, #0]
2405de98:	085b      	lsrs	r3, r3, #1
2405de9a:	015a      	lsls	r2, r3, #5
2405de9c:	68fb      	ldr	r3, [r7, #12]
2405de9e:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2405dea0:	68fb      	ldr	r3, [r7, #12]
2405dea2:	2280      	movs	r2, #128	; 0x80
2405dea4:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
2405dea6:	e024      	b.n	2405def2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
2405dea8:	68fb      	ldr	r3, [r7, #12]
2405deaa:	22c0      	movs	r2, #192	; 0xc0
2405deac:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2405deae:	683b      	ldr	r3, [r7, #0]
2405deb0:	085b      	lsrs	r3, r3, #1
2405deb2:	019a      	lsls	r2, r3, #6
2405deb4:	68fb      	ldr	r3, [r7, #12]
2405deb6:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
2405deb8:	683b      	ldr	r3, [r7, #0]
2405deba:	085b      	lsrs	r3, r3, #1
2405debc:	015a      	lsls	r2, r3, #5
2405debe:	68fb      	ldr	r3, [r7, #12]
2405dec0:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2405dec2:	68fb      	ldr	r3, [r7, #12]
2405dec4:	2280      	movs	r2, #128	; 0x80
2405dec6:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
2405dec8:	e013      	b.n	2405def2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
2405deca:	68fb      	ldr	r3, [r7, #12]
2405decc:	22e0      	movs	r2, #224	; 0xe0
2405dece:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2405ded0:	683b      	ldr	r3, [r7, #0]
2405ded2:	085b      	lsrs	r3, r3, #1
2405ded4:	019a      	lsls	r2, r3, #6
2405ded6:	68fb      	ldr	r3, [r7, #12]
2405ded8:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
2405deda:	683b      	ldr	r3, [r7, #0]
2405dedc:	085b      	lsrs	r3, r3, #1
2405dede:	015a      	lsls	r2, r3, #5
2405dee0:	68fb      	ldr	r3, [r7, #12]
2405dee2:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2405dee4:	68fb      	ldr	r3, [r7, #12]
2405dee6:	2280      	movs	r2, #128	; 0x80
2405dee8:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
2405deea:	e002      	b.n	2405def2 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
2405deec:	2301      	movs	r3, #1
2405deee:	75fb      	strb	r3, [r7, #23]
      break;
2405def0:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
2405def2:	68bb      	ldr	r3, [r7, #8]
2405def4:	2b02      	cmp	r3, #2
2405def6:	d10b      	bne.n	2405df10 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
2405def8:	687b      	ldr	r3, [r7, #4]
2405defa:	2b01      	cmp	r3, #1
2405defc:	d102      	bne.n	2405df04 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
2405defe:	68fb      	ldr	r3, [r7, #12]
2405df00:	2210      	movs	r2, #16
2405df02:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
2405df04:	687b      	ldr	r3, [r7, #4]
2405df06:	2b02      	cmp	r3, #2
2405df08:	d102      	bne.n	2405df10 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
2405df0a:	68fb      	ldr	r3, [r7, #12]
2405df0c:	2208      	movs	r2, #8
2405df0e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
2405df10:	7dfb      	ldrb	r3, [r7, #23]
}
2405df12:	4618      	mov	r0, r3
2405df14:	371c      	adds	r7, #28
2405df16:	46bd      	mov	sp, r7
2405df18:	f85d 7b04 	ldr.w	r7, [sp], #4
2405df1c:	4770      	bx	lr
2405df1e:	bf00      	nop

2405df20 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
2405df20:	b480      	push	{r7}
2405df22:	b087      	sub	sp, #28
2405df24:	af00      	add	r7, sp, #0
2405df26:	60f8      	str	r0, [r7, #12]
2405df28:	60b9      	str	r1, [r7, #8]
2405df2a:	607a      	str	r2, [r7, #4]
2405df2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
2405df2e:	2300      	movs	r3, #0
2405df30:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
2405df32:	68fb      	ldr	r3, [r7, #12]
2405df34:	2200      	movs	r2, #0
2405df36:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
2405df38:	68fb      	ldr	r3, [r7, #12]
2405df3a:	2200      	movs	r2, #0
2405df3c:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2405df3e:	68fb      	ldr	r3, [r7, #12]
2405df40:	685b      	ldr	r3, [r3, #4]
2405df42:	2b00      	cmp	r3, #0
2405df44:	d003      	beq.n	2405df4e <SAI_InitPCM+0x2e>
2405df46:	68fb      	ldr	r3, [r7, #12]
2405df48:	685b      	ldr	r3, [r3, #4]
2405df4a:	2b02      	cmp	r3, #2
2405df4c:	d103      	bne.n	2405df56 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
2405df4e:	68fb      	ldr	r3, [r7, #12]
2405df50:	2201      	movs	r2, #1
2405df52:	651a      	str	r2, [r3, #80]	; 0x50
2405df54:	e002      	b.n	2405df5c <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
2405df56:	68fb      	ldr	r3, [r7, #12]
2405df58:	2200      	movs	r2, #0
2405df5a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
2405df5c:	68fb      	ldr	r3, [r7, #12]
2405df5e:	2200      	movs	r2, #0
2405df60:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
2405df62:	68fb      	ldr	r3, [r7, #12]
2405df64:	f44f 3200 	mov.w	r2, #131072	; 0x20000
2405df68:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
2405df6a:	68fb      	ldr	r3, [r7, #12]
2405df6c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
2405df70:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
2405df72:	68fb      	ldr	r3, [r7, #12]
2405df74:	2200      	movs	r2, #0
2405df76:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
2405df78:	68fb      	ldr	r3, [r7, #12]
2405df7a:	683a      	ldr	r2, [r7, #0]
2405df7c:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
2405df7e:	68fb      	ldr	r3, [r7, #12]
2405df80:	f64f 72ff 	movw	r2, #65535	; 0xffff
2405df84:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
2405df86:	68bb      	ldr	r3, [r7, #8]
2405df88:	2b04      	cmp	r3, #4
2405df8a:	d103      	bne.n	2405df94 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
2405df8c:	68fb      	ldr	r3, [r7, #12]
2405df8e:	2201      	movs	r2, #1
2405df90:	659a      	str	r2, [r3, #88]	; 0x58
2405df92:	e002      	b.n	2405df9a <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
2405df94:	68fb      	ldr	r3, [r7, #12]
2405df96:	220d      	movs	r2, #13
2405df98:	659a      	str	r2, [r3, #88]	; 0x58
2405df9a:	687b      	ldr	r3, [r7, #4]
2405df9c:	2b03      	cmp	r3, #3
2405df9e:	d837      	bhi.n	2405e010 <SAI_InitPCM+0xf0>
2405dfa0:	a201      	add	r2, pc, #4	; (adr r2, 2405dfa8 <SAI_InitPCM+0x88>)
2405dfa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2405dfa6:	bf00      	nop
2405dfa8:	2405dfb9 	.word	0x2405dfb9
2405dfac:	2405dfcf 	.word	0x2405dfcf
2405dfb0:	2405dfe5 	.word	0x2405dfe5
2405dfb4:	2405dffb 	.word	0x2405dffb
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
2405dfb8:	68fb      	ldr	r3, [r7, #12]
2405dfba:	2280      	movs	r2, #128	; 0x80
2405dfbc:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
2405dfbe:	683b      	ldr	r3, [r7, #0]
2405dfc0:	011a      	lsls	r2, r3, #4
2405dfc2:	68fb      	ldr	r3, [r7, #12]
2405dfc4:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
2405dfc6:	68fb      	ldr	r3, [r7, #12]
2405dfc8:	2240      	movs	r2, #64	; 0x40
2405dfca:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
2405dfcc:	e023      	b.n	2405e016 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
2405dfce:	68fb      	ldr	r3, [r7, #12]
2405dfd0:	2280      	movs	r2, #128	; 0x80
2405dfd2:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
2405dfd4:	683b      	ldr	r3, [r7, #0]
2405dfd6:	015a      	lsls	r2, r3, #5
2405dfd8:	68fb      	ldr	r3, [r7, #12]
2405dfda:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2405dfdc:	68fb      	ldr	r3, [r7, #12]
2405dfde:	2280      	movs	r2, #128	; 0x80
2405dfe0:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
2405dfe2:	e018      	b.n	2405e016 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
2405dfe4:	68fb      	ldr	r3, [r7, #12]
2405dfe6:	22c0      	movs	r2, #192	; 0xc0
2405dfe8:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
2405dfea:	683b      	ldr	r3, [r7, #0]
2405dfec:	015a      	lsls	r2, r3, #5
2405dfee:	68fb      	ldr	r3, [r7, #12]
2405dff0:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2405dff2:	68fb      	ldr	r3, [r7, #12]
2405dff4:	2280      	movs	r2, #128	; 0x80
2405dff6:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
2405dff8:	e00d      	b.n	2405e016 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
2405dffa:	68fb      	ldr	r3, [r7, #12]
2405dffc:	22e0      	movs	r2, #224	; 0xe0
2405dffe:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
2405e000:	683b      	ldr	r3, [r7, #0]
2405e002:	015a      	lsls	r2, r3, #5
2405e004:	68fb      	ldr	r3, [r7, #12]
2405e006:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2405e008:	68fb      	ldr	r3, [r7, #12]
2405e00a:	2280      	movs	r2, #128	; 0x80
2405e00c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
2405e00e:	e002      	b.n	2405e016 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
2405e010:	2301      	movs	r3, #1
2405e012:	75fb      	strb	r3, [r7, #23]
      break;
2405e014:	bf00      	nop
  }

  return status;
2405e016:	7dfb      	ldrb	r3, [r7, #23]
}
2405e018:	4618      	mov	r0, r3
2405e01a:	371c      	adds	r7, #28
2405e01c:	46bd      	mov	sp, r7
2405e01e:	f85d 7b04 	ldr.w	r7, [sp], #4
2405e022:	4770      	bx	lr

2405e024 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
2405e024:	b480      	push	{r7}
2405e026:	b085      	sub	sp, #20
2405e028:	af00      	add	r7, sp, #0
2405e02a:	6078      	str	r0, [r7, #4]
2405e02c:	460b      	mov	r3, r1
2405e02e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
2405e030:	2301      	movs	r3, #1
2405e032:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
2405e034:	78fb      	ldrb	r3, [r7, #3]
2405e036:	2b01      	cmp	r3, #1
2405e038:	d103      	bne.n	2405e042 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
2405e03a:	68fb      	ldr	r3, [r7, #12]
2405e03c:	f043 0308 	orr.w	r3, r3, #8
2405e040:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2405e042:	687b      	ldr	r3, [r7, #4]
2405e044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2405e046:	2b08      	cmp	r3, #8
2405e048:	d10b      	bne.n	2405e062 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2405e04a:	687b      	ldr	r3, [r7, #4]
2405e04c:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2405e04e:	2b03      	cmp	r3, #3
2405e050:	d003      	beq.n	2405e05a <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2405e052:	687b      	ldr	r3, [r7, #4]
2405e054:	685b      	ldr	r3, [r3, #4]
2405e056:	2b01      	cmp	r3, #1
2405e058:	d103      	bne.n	2405e062 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
2405e05a:	68fb      	ldr	r3, [r7, #12]
2405e05c:	f043 0310 	orr.w	r3, r3, #16
2405e060:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2405e062:	687b      	ldr	r3, [r7, #4]
2405e064:	685b      	ldr	r3, [r3, #4]
2405e066:	2b03      	cmp	r3, #3
2405e068:	d003      	beq.n	2405e072 <SAI_InterruptFlag+0x4e>
2405e06a:	687b      	ldr	r3, [r7, #4]
2405e06c:	685b      	ldr	r3, [r3, #4]
2405e06e:	2b02      	cmp	r3, #2
2405e070:	d104      	bne.n	2405e07c <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
2405e072:	68fb      	ldr	r3, [r7, #12]
2405e074:	f043 0360 	orr.w	r3, r3, #96	; 0x60
2405e078:	60fb      	str	r3, [r7, #12]
2405e07a:	e003      	b.n	2405e084 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
2405e07c:	68fb      	ldr	r3, [r7, #12]
2405e07e:	f043 0304 	orr.w	r3, r3, #4
2405e082:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
2405e084:	68fb      	ldr	r3, [r7, #12]
}
2405e086:	4618      	mov	r0, r3
2405e088:	3714      	adds	r7, #20
2405e08a:	46bd      	mov	sp, r7
2405e08c:	f85d 7b04 	ldr.w	r7, [sp], #4
2405e090:	4770      	bx	lr
	...

2405e094 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
2405e094:	b480      	push	{r7}
2405e096:	b085      	sub	sp, #20
2405e098:	af00      	add	r7, sp, #0
2405e09a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2405e09c:	4b18      	ldr	r3, [pc, #96]	; (2405e100 <SAI_Disable+0x6c>)
2405e09e:	681b      	ldr	r3, [r3, #0]
2405e0a0:	4a18      	ldr	r2, [pc, #96]	; (2405e104 <SAI_Disable+0x70>)
2405e0a2:	fba2 2303 	umull	r2, r3, r2, r3
2405e0a6:	0b1b      	lsrs	r3, r3, #12
2405e0a8:	009b      	lsls	r3, r3, #2
2405e0aa:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
2405e0ac:	2300      	movs	r3, #0
2405e0ae:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
2405e0b0:	687b      	ldr	r3, [r7, #4]
2405e0b2:	681b      	ldr	r3, [r3, #0]
2405e0b4:	681a      	ldr	r2, [r3, #0]
2405e0b6:	687b      	ldr	r3, [r7, #4]
2405e0b8:	681b      	ldr	r3, [r3, #0]
2405e0ba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
2405e0be:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
2405e0c0:	68fb      	ldr	r3, [r7, #12]
2405e0c2:	2b00      	cmp	r3, #0
2405e0c4:	d10a      	bne.n	2405e0dc <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
2405e0c6:	687b      	ldr	r3, [r7, #4]
2405e0c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405e0cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
2405e0d0:	687b      	ldr	r3, [r7, #4]
2405e0d2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
2405e0d6:	2303      	movs	r3, #3
2405e0d8:	72fb      	strb	r3, [r7, #11]
      break;
2405e0da:	e009      	b.n	2405e0f0 <SAI_Disable+0x5c>
    }
    count--;
2405e0dc:	68fb      	ldr	r3, [r7, #12]
2405e0de:	3b01      	subs	r3, #1
2405e0e0:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
2405e0e2:	687b      	ldr	r3, [r7, #4]
2405e0e4:	681b      	ldr	r3, [r3, #0]
2405e0e6:	681b      	ldr	r3, [r3, #0]
2405e0e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2405e0ec:	2b00      	cmp	r3, #0
2405e0ee:	d1e7      	bne.n	2405e0c0 <SAI_Disable+0x2c>

  return status;
2405e0f0:	7afb      	ldrb	r3, [r7, #11]
}
2405e0f2:	4618      	mov	r0, r3
2405e0f4:	3714      	adds	r7, #20
2405e0f6:	46bd      	mov	sp, r7
2405e0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
2405e0fc:	4770      	bx	lr
2405e0fe:	bf00      	nop
2405e100:	20000030 	.word	0x20000030
2405e104:	95cbec1b 	.word	0x95cbec1b

2405e108 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
2405e108:	b580      	push	{r7, lr}
2405e10a:	b084      	sub	sp, #16
2405e10c:	af00      	add	r7, sp, #0
2405e10e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2405e110:	687b      	ldr	r3, [r7, #4]
2405e112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405e114:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
2405e116:	687b      	ldr	r3, [r7, #4]
2405e118:	69db      	ldr	r3, [r3, #28]
2405e11a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2405e11e:	d01c      	beq.n	2405e15a <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
2405e120:	68fb      	ldr	r3, [r7, #12]
2405e122:	2200      	movs	r2, #0
2405e124:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
2405e128:	68fb      	ldr	r3, [r7, #12]
2405e12a:	681b      	ldr	r3, [r3, #0]
2405e12c:	681a      	ldr	r2, [r3, #0]
2405e12e:	68fb      	ldr	r3, [r7, #12]
2405e130:	681b      	ldr	r3, [r3, #0]
2405e132:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
2405e136:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2405e138:	2100      	movs	r1, #0
2405e13a:	68f8      	ldr	r0, [r7, #12]
2405e13c:	f7ff ff72 	bl	2405e024 <SAI_InterruptFlag>
2405e140:	4603      	mov	r3, r0
2405e142:	43d9      	mvns	r1, r3
2405e144:	68fb      	ldr	r3, [r7, #12]
2405e146:	681b      	ldr	r3, [r3, #0]
2405e148:	691a      	ldr	r2, [r3, #16]
2405e14a:	68fb      	ldr	r3, [r7, #12]
2405e14c:	681b      	ldr	r3, [r3, #0]
2405e14e:	400a      	ands	r2, r1
2405e150:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
2405e152:	68fb      	ldr	r3, [r7, #12]
2405e154:	2201      	movs	r2, #1
2405e156:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
2405e15a:	68f8      	ldr	r0, [r7, #12]
2405e15c:	f7ff fe10 	bl	2405dd80 <HAL_SAI_TxCpltCallback>
#endif
}
2405e160:	bf00      	nop
2405e162:	3710      	adds	r7, #16
2405e164:	46bd      	mov	sp, r7
2405e166:	bd80      	pop	{r7, pc}

2405e168 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
2405e168:	b580      	push	{r7, lr}
2405e16a:	b084      	sub	sp, #16
2405e16c:	af00      	add	r7, sp, #0
2405e16e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2405e170:	687b      	ldr	r3, [r7, #4]
2405e172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405e174:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
2405e176:	68f8      	ldr	r0, [r7, #12]
2405e178:	f7ff fe0c 	bl	2405dd94 <HAL_SAI_TxHalfCpltCallback>
#endif
}
2405e17c:	bf00      	nop
2405e17e:	3710      	adds	r7, #16
2405e180:	46bd      	mov	sp, r7
2405e182:	bd80      	pop	{r7, pc}

2405e184 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
2405e184:	b580      	push	{r7, lr}
2405e186:	b084      	sub	sp, #16
2405e188:	af00      	add	r7, sp, #0
2405e18a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2405e18c:	687b      	ldr	r3, [r7, #4]
2405e18e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405e190:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
2405e192:	6878      	ldr	r0, [r7, #4]
2405e194:	f7f8 fff0 	bl	24057178 <HAL_DMA_GetError>
2405e198:	4603      	mov	r3, r0
2405e19a:	2b02      	cmp	r3, #2
2405e19c:	d01d      	beq.n	2405e1da <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2405e19e:	68fb      	ldr	r3, [r7, #12]
2405e1a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405e1a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2405e1a8:	68fb      	ldr	r3, [r7, #12]
2405e1aa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
2405e1ae:	68fb      	ldr	r3, [r7, #12]
2405e1b0:	681b      	ldr	r3, [r3, #0]
2405e1b2:	681a      	ldr	r2, [r3, #0]
2405e1b4:	68fb      	ldr	r3, [r7, #12]
2405e1b6:	681b      	ldr	r3, [r3, #0]
2405e1b8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
2405e1bc:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
2405e1be:	68f8      	ldr	r0, [r7, #12]
2405e1c0:	f7ff ff68 	bl	2405e094 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
2405e1c4:	68fb      	ldr	r3, [r7, #12]
2405e1c6:	2201      	movs	r2, #1
2405e1c8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
2405e1cc:	68fb      	ldr	r3, [r7, #12]
2405e1ce:	2200      	movs	r2, #0
2405e1d0:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
2405e1d4:	68f8      	ldr	r0, [r7, #12]
2405e1d6:	f7ff fde7 	bl	2405dda8 <HAL_SAI_ErrorCallback>
#endif
  }
}
2405e1da:	bf00      	nop
2405e1dc:	3710      	adds	r7, #16
2405e1de:	46bd      	mov	sp, r7
2405e1e0:	bd80      	pop	{r7, pc}

2405e1e2 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
2405e1e2:	b580      	push	{r7, lr}
2405e1e4:	b084      	sub	sp, #16
2405e1e6:	af00      	add	r7, sp, #0
2405e1e8:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2405e1ea:	687b      	ldr	r3, [r7, #4]
2405e1ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405e1ee:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
2405e1f0:	68fb      	ldr	r3, [r7, #12]
2405e1f2:	681b      	ldr	r3, [r3, #0]
2405e1f4:	681a      	ldr	r2, [r3, #0]
2405e1f6:	68fb      	ldr	r3, [r7, #12]
2405e1f8:	681b      	ldr	r3, [r3, #0]
2405e1fa:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
2405e1fe:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
2405e200:	68fb      	ldr	r3, [r7, #12]
2405e202:	681b      	ldr	r3, [r3, #0]
2405e204:	2200      	movs	r2, #0
2405e206:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
2405e208:	68fb      	ldr	r3, [r7, #12]
2405e20a:	681b      	ldr	r3, [r3, #0]
2405e20c:	f04f 32ff 	mov.w	r2, #4294967295
2405e210:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
2405e212:	68fb      	ldr	r3, [r7, #12]
2405e214:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2405e218:	2b20      	cmp	r3, #32
2405e21a:	d00a      	beq.n	2405e232 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
2405e21c:	68f8      	ldr	r0, [r7, #12]
2405e21e:	f7ff ff39 	bl	2405e094 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
2405e222:	68fb      	ldr	r3, [r7, #12]
2405e224:	681b      	ldr	r3, [r3, #0]
2405e226:	685a      	ldr	r2, [r3, #4]
2405e228:	68fb      	ldr	r3, [r7, #12]
2405e22a:	681b      	ldr	r3, [r3, #0]
2405e22c:	f042 0208 	orr.w	r2, r2, #8
2405e230:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
2405e232:	68fb      	ldr	r3, [r7, #12]
2405e234:	2201      	movs	r2, #1
2405e236:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
2405e23a:	68fb      	ldr	r3, [r7, #12]
2405e23c:	2200      	movs	r2, #0
2405e23e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
2405e242:	68f8      	ldr	r0, [r7, #12]
2405e244:	f7ff fdb0 	bl	2405dda8 <HAL_SAI_ErrorCallback>
#endif
}
2405e248:	bf00      	nop
2405e24a:	3710      	adds	r7, #16
2405e24c:	46bd      	mov	sp, r7
2405e24e:	bd80      	pop	{r7, pc}

2405e250 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
2405e250:	b580      	push	{r7, lr}
2405e252:	b084      	sub	sp, #16
2405e254:	af00      	add	r7, sp, #0
2405e256:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
2405e258:	687b      	ldr	r3, [r7, #4]
2405e25a:	2b00      	cmp	r3, #0
2405e25c:	d101      	bne.n	2405e262 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
2405e25e:	2301      	movs	r3, #1
2405e260:	e0f1      	b.n	2405e446 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
2405e262:	687b      	ldr	r3, [r7, #4]
2405e264:	2200      	movs	r2, #0
2405e266:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
2405e268:	687b      	ldr	r3, [r7, #4]
2405e26a:	681b      	ldr	r3, [r3, #0]
2405e26c:	4a78      	ldr	r2, [pc, #480]	; (2405e450 <HAL_SPI_Init+0x200>)
2405e26e:	4293      	cmp	r3, r2
2405e270:	d00f      	beq.n	2405e292 <HAL_SPI_Init+0x42>
2405e272:	687b      	ldr	r3, [r7, #4]
2405e274:	681b      	ldr	r3, [r3, #0]
2405e276:	4a77      	ldr	r2, [pc, #476]	; (2405e454 <HAL_SPI_Init+0x204>)
2405e278:	4293      	cmp	r3, r2
2405e27a:	d00a      	beq.n	2405e292 <HAL_SPI_Init+0x42>
2405e27c:	687b      	ldr	r3, [r7, #4]
2405e27e:	681b      	ldr	r3, [r3, #0]
2405e280:	4a75      	ldr	r2, [pc, #468]	; (2405e458 <HAL_SPI_Init+0x208>)
2405e282:	4293      	cmp	r3, r2
2405e284:	d005      	beq.n	2405e292 <HAL_SPI_Init+0x42>
2405e286:	687b      	ldr	r3, [r7, #4]
2405e288:	68db      	ldr	r3, [r3, #12]
2405e28a:	2b0f      	cmp	r3, #15
2405e28c:	d901      	bls.n	2405e292 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
2405e28e:	2301      	movs	r3, #1
2405e290:	e0d9      	b.n	2405e446 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
2405e292:	6878      	ldr	r0, [r7, #4]
2405e294:	f000 fba2 	bl	2405e9dc <SPI_GetPacketSize>
2405e298:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
2405e29a:	687b      	ldr	r3, [r7, #4]
2405e29c:	681b      	ldr	r3, [r3, #0]
2405e29e:	4a6c      	ldr	r2, [pc, #432]	; (2405e450 <HAL_SPI_Init+0x200>)
2405e2a0:	4293      	cmp	r3, r2
2405e2a2:	d00c      	beq.n	2405e2be <HAL_SPI_Init+0x6e>
2405e2a4:	687b      	ldr	r3, [r7, #4]
2405e2a6:	681b      	ldr	r3, [r3, #0]
2405e2a8:	4a6a      	ldr	r2, [pc, #424]	; (2405e454 <HAL_SPI_Init+0x204>)
2405e2aa:	4293      	cmp	r3, r2
2405e2ac:	d007      	beq.n	2405e2be <HAL_SPI_Init+0x6e>
2405e2ae:	687b      	ldr	r3, [r7, #4]
2405e2b0:	681b      	ldr	r3, [r3, #0]
2405e2b2:	4a69      	ldr	r2, [pc, #420]	; (2405e458 <HAL_SPI_Init+0x208>)
2405e2b4:	4293      	cmp	r3, r2
2405e2b6:	d002      	beq.n	2405e2be <HAL_SPI_Init+0x6e>
2405e2b8:	68fb      	ldr	r3, [r7, #12]
2405e2ba:	2b08      	cmp	r3, #8
2405e2bc:	d811      	bhi.n	2405e2e2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
2405e2be:	687b      	ldr	r3, [r7, #4]
2405e2c0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
2405e2c2:	4a63      	ldr	r2, [pc, #396]	; (2405e450 <HAL_SPI_Init+0x200>)
2405e2c4:	4293      	cmp	r3, r2
2405e2c6:	d009      	beq.n	2405e2dc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
2405e2c8:	687b      	ldr	r3, [r7, #4]
2405e2ca:	681b      	ldr	r3, [r3, #0]
2405e2cc:	4a61      	ldr	r2, [pc, #388]	; (2405e454 <HAL_SPI_Init+0x204>)
2405e2ce:	4293      	cmp	r3, r2
2405e2d0:	d004      	beq.n	2405e2dc <HAL_SPI_Init+0x8c>
2405e2d2:	687b      	ldr	r3, [r7, #4]
2405e2d4:	681b      	ldr	r3, [r3, #0]
2405e2d6:	4a60      	ldr	r2, [pc, #384]	; (2405e458 <HAL_SPI_Init+0x208>)
2405e2d8:	4293      	cmp	r3, r2
2405e2da:	d104      	bne.n	2405e2e6 <HAL_SPI_Init+0x96>
2405e2dc:	68fb      	ldr	r3, [r7, #12]
2405e2de:	2b10      	cmp	r3, #16
2405e2e0:	d901      	bls.n	2405e2e6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
2405e2e2:	2301      	movs	r3, #1
2405e2e4:	e0af      	b.n	2405e446 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
2405e2e6:	687b      	ldr	r3, [r7, #4]
2405e2e8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
2405e2ec:	b2db      	uxtb	r3, r3
2405e2ee:	2b00      	cmp	r3, #0
2405e2f0:	d106      	bne.n	2405e300 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
2405e2f2:	687b      	ldr	r3, [r7, #4]
2405e2f4:	2200      	movs	r2, #0
2405e2f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
2405e2fa:	6878      	ldr	r0, [r7, #4]
2405e2fc:	f7f4 f9dc 	bl	240526b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
2405e300:	687b      	ldr	r3, [r7, #4]
2405e302:	2202      	movs	r2, #2
2405e304:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
2405e308:	687b      	ldr	r3, [r7, #4]
2405e30a:	681b      	ldr	r3, [r3, #0]
2405e30c:	681a      	ldr	r2, [r3, #0]
2405e30e:	687b      	ldr	r3, [r7, #4]
2405e310:	681b      	ldr	r3, [r3, #0]
2405e312:	f022 0201 	bic.w	r2, r2, #1
2405e316:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
2405e318:	687b      	ldr	r3, [r7, #4]
2405e31a:	681b      	ldr	r3, [r3, #0]
2405e31c:	689b      	ldr	r3, [r3, #8]
2405e31e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
2405e322:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2405e324:	687b      	ldr	r3, [r7, #4]
2405e326:	699b      	ldr	r3, [r3, #24]
2405e328:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
2405e32c:	d119      	bne.n	2405e362 <HAL_SPI_Init+0x112>
2405e32e:	687b      	ldr	r3, [r7, #4]
2405e330:	685b      	ldr	r3, [r3, #4]
2405e332:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
2405e336:	d103      	bne.n	2405e340 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
2405e338:	687b      	ldr	r3, [r7, #4]
2405e33a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2405e33c:	2b00      	cmp	r3, #0
2405e33e:	d008      	beq.n	2405e352 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
2405e340:	687b      	ldr	r3, [r7, #4]
2405e342:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
2405e344:	2b00      	cmp	r3, #0
2405e346:	d10c      	bne.n	2405e362 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
2405e348:	687b      	ldr	r3, [r7, #4]
2405e34a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
2405e34c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
2405e350:	d107      	bne.n	2405e362 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
2405e352:	687b      	ldr	r3, [r7, #4]
2405e354:	681b      	ldr	r3, [r3, #0]
2405e356:	681a      	ldr	r2, [r3, #0]
2405e358:	687b      	ldr	r3, [r7, #4]
2405e35a:	681b      	ldr	r3, [r3, #0]
2405e35c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
2405e360:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
2405e362:	687b      	ldr	r3, [r7, #4]
2405e364:	69da      	ldr	r2, [r3, #28]
2405e366:	687b      	ldr	r3, [r7, #4]
2405e368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2405e36a:	431a      	orrs	r2, r3
2405e36c:	68bb      	ldr	r3, [r7, #8]
2405e36e:	431a      	orrs	r2, r3
2405e370:	687b      	ldr	r3, [r7, #4]
2405e372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2405e374:	ea42 0103 	orr.w	r1, r2, r3
2405e378:	687b      	ldr	r3, [r7, #4]
2405e37a:	68da      	ldr	r2, [r3, #12]
2405e37c:	687b      	ldr	r3, [r7, #4]
2405e37e:	681b      	ldr	r3, [r3, #0]
2405e380:	430a      	orrs	r2, r1
2405e382:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
2405e384:	687b      	ldr	r3, [r7, #4]
2405e386:	6b5a      	ldr	r2, [r3, #52]	; 0x34
2405e388:	687b      	ldr	r3, [r7, #4]
2405e38a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2405e38c:	431a      	orrs	r2, r3
2405e38e:	687b      	ldr	r3, [r7, #4]
2405e390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2405e392:	431a      	orrs	r2, r3
2405e394:	687b      	ldr	r3, [r7, #4]
2405e396:	699b      	ldr	r3, [r3, #24]
2405e398:	431a      	orrs	r2, r3
2405e39a:	687b      	ldr	r3, [r7, #4]
2405e39c:	691b      	ldr	r3, [r3, #16]
2405e39e:	431a      	orrs	r2, r3
2405e3a0:	687b      	ldr	r3, [r7, #4]
2405e3a2:	695b      	ldr	r3, [r3, #20]
2405e3a4:	431a      	orrs	r2, r3
2405e3a6:	687b      	ldr	r3, [r7, #4]
2405e3a8:	6a1b      	ldr	r3, [r3, #32]
2405e3aa:	431a      	orrs	r2, r3
2405e3ac:	687b      	ldr	r3, [r7, #4]
2405e3ae:	685b      	ldr	r3, [r3, #4]
2405e3b0:	431a      	orrs	r2, r3
2405e3b2:	687b      	ldr	r3, [r7, #4]
2405e3b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2405e3b6:	431a      	orrs	r2, r3
2405e3b8:	687b      	ldr	r3, [r7, #4]
2405e3ba:	689b      	ldr	r3, [r3, #8]
2405e3bc:	431a      	orrs	r2, r3
2405e3be:	687b      	ldr	r3, [r7, #4]
2405e3c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2405e3c2:	ea42 0103 	orr.w	r1, r2, r3
2405e3c6:	687b      	ldr	r3, [r7, #4]
2405e3c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
2405e3ca:	687b      	ldr	r3, [r7, #4]
2405e3cc:	681b      	ldr	r3, [r3, #0]
2405e3ce:	430a      	orrs	r2, r1
2405e3d0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
2405e3d2:	687b      	ldr	r3, [r7, #4]
2405e3d4:	685b      	ldr	r3, [r3, #4]
2405e3d6:	2b00      	cmp	r3, #0
2405e3d8:	d113      	bne.n	2405e402 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
2405e3da:	687b      	ldr	r3, [r7, #4]
2405e3dc:	681b      	ldr	r3, [r3, #0]
2405e3de:	689b      	ldr	r3, [r3, #8]
2405e3e0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
2405e3e4:	687b      	ldr	r3, [r7, #4]
2405e3e6:	681b      	ldr	r3, [r3, #0]
2405e3e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
2405e3ec:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
2405e3ee:	687b      	ldr	r3, [r7, #4]
2405e3f0:	681b      	ldr	r3, [r3, #0]
2405e3f2:	689b      	ldr	r3, [r3, #8]
2405e3f4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
2405e3f8:	687b      	ldr	r3, [r7, #4]
2405e3fa:	681b      	ldr	r3, [r3, #0]
2405e3fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
2405e400:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
2405e402:	687b      	ldr	r3, [r7, #4]
2405e404:	681b      	ldr	r3, [r3, #0]
2405e406:	6d1a      	ldr	r2, [r3, #80]	; 0x50
2405e408:	687b      	ldr	r3, [r7, #4]
2405e40a:	681b      	ldr	r3, [r3, #0]
2405e40c:	f022 0201 	bic.w	r2, r2, #1
2405e410:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
2405e412:	687b      	ldr	r3, [r7, #4]
2405e414:	685b      	ldr	r3, [r3, #4]
2405e416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2405e41a:	2b00      	cmp	r3, #0
2405e41c:	d00a      	beq.n	2405e434 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
2405e41e:	687b      	ldr	r3, [r7, #4]
2405e420:	681b      	ldr	r3, [r3, #0]
2405e422:	68db      	ldr	r3, [r3, #12]
2405e424:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
2405e428:	687b      	ldr	r3, [r7, #4]
2405e42a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
2405e42c:	687b      	ldr	r3, [r7, #4]
2405e42e:	681b      	ldr	r3, [r3, #0]
2405e430:	430a      	orrs	r2, r1
2405e432:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
2405e434:	687b      	ldr	r3, [r7, #4]
2405e436:	2200      	movs	r2, #0
2405e438:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
2405e43c:	687b      	ldr	r3, [r7, #4]
2405e43e:	2201      	movs	r2, #1
2405e440:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
2405e444:	2300      	movs	r3, #0
}
2405e446:	4618      	mov	r0, r3
2405e448:	3710      	adds	r7, #16
2405e44a:	46bd      	mov	sp, r7
2405e44c:	bd80      	pop	{r7, pc}
2405e44e:	bf00      	nop
2405e450:	40013000 	.word	0x40013000
2405e454:	40003800 	.word	0x40003800
2405e458:	40003c00 	.word	0x40003c00

2405e45c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
2405e45c:	b580      	push	{r7, lr}
2405e45e:	b08a      	sub	sp, #40	; 0x28
2405e460:	af02      	add	r7, sp, #8
2405e462:	60f8      	str	r0, [r7, #12]
2405e464:	60b9      	str	r1, [r7, #8]
2405e466:	603b      	str	r3, [r7, #0]
2405e468:	4613      	mov	r3, r2
2405e46a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
2405e46c:	68fb      	ldr	r3, [r7, #12]
2405e46e:	681b      	ldr	r3, [r3, #0]
2405e470:	3320      	adds	r3, #32
2405e472:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
2405e474:	2300      	movs	r3, #0
2405e476:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
2405e478:	68fb      	ldr	r3, [r7, #12]
2405e47a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
2405e47e:	2b01      	cmp	r3, #1
2405e480:	d101      	bne.n	2405e486 <HAL_SPI_Transmit+0x2a>
2405e482:	2302      	movs	r3, #2
2405e484:	e1d7      	b.n	2405e836 <HAL_SPI_Transmit+0x3da>
2405e486:	68fb      	ldr	r3, [r7, #12]
2405e488:	2201      	movs	r2, #1
2405e48a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
2405e48e:	f7f4 fc49 	bl	24052d24 <HAL_GetTick>
2405e492:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
2405e494:	68fb      	ldr	r3, [r7, #12]
2405e496:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
2405e49a:	b2db      	uxtb	r3, r3
2405e49c:	2b01      	cmp	r3, #1
2405e49e:	d007      	beq.n	2405e4b0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
2405e4a0:	2302      	movs	r3, #2
2405e4a2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
2405e4a4:	68fb      	ldr	r3, [r7, #12]
2405e4a6:	2200      	movs	r2, #0
2405e4a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
2405e4ac:	7efb      	ldrb	r3, [r7, #27]
2405e4ae:	e1c2      	b.n	2405e836 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
2405e4b0:	68bb      	ldr	r3, [r7, #8]
2405e4b2:	2b00      	cmp	r3, #0
2405e4b4:	d002      	beq.n	2405e4bc <HAL_SPI_Transmit+0x60>
2405e4b6:	88fb      	ldrh	r3, [r7, #6]
2405e4b8:	2b00      	cmp	r3, #0
2405e4ba:	d107      	bne.n	2405e4cc <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
2405e4bc:	2301      	movs	r3, #1
2405e4be:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
2405e4c0:	68fb      	ldr	r3, [r7, #12]
2405e4c2:	2200      	movs	r2, #0
2405e4c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
2405e4c8:	7efb      	ldrb	r3, [r7, #27]
2405e4ca:	e1b4      	b.n	2405e836 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
2405e4cc:	68fb      	ldr	r3, [r7, #12]
2405e4ce:	2203      	movs	r2, #3
2405e4d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
2405e4d4:	68fb      	ldr	r3, [r7, #12]
2405e4d6:	2200      	movs	r2, #0
2405e4d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
2405e4dc:	68fb      	ldr	r3, [r7, #12]
2405e4de:	68ba      	ldr	r2, [r7, #8]
2405e4e0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
2405e4e2:	68fb      	ldr	r3, [r7, #12]
2405e4e4:	88fa      	ldrh	r2, [r7, #6]
2405e4e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
2405e4ea:	68fb      	ldr	r3, [r7, #12]
2405e4ec:	88fa      	ldrh	r2, [r7, #6]
2405e4ee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
2405e4f2:	68fb      	ldr	r3, [r7, #12]
2405e4f4:	2200      	movs	r2, #0
2405e4f6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
2405e4f8:	68fb      	ldr	r3, [r7, #12]
2405e4fa:	2200      	movs	r2, #0
2405e4fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
2405e500:	68fb      	ldr	r3, [r7, #12]
2405e502:	2200      	movs	r2, #0
2405e504:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
2405e508:	68fb      	ldr	r3, [r7, #12]
2405e50a:	2200      	movs	r2, #0
2405e50c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
2405e50e:	68fb      	ldr	r3, [r7, #12]
2405e510:	2200      	movs	r2, #0
2405e512:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
2405e514:	68fb      	ldr	r3, [r7, #12]
2405e516:	689b      	ldr	r3, [r3, #8]
2405e518:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
2405e51c:	d107      	bne.n	2405e52e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
2405e51e:	68fb      	ldr	r3, [r7, #12]
2405e520:	681b      	ldr	r3, [r3, #0]
2405e522:	681a      	ldr	r2, [r3, #0]
2405e524:	68fb      	ldr	r3, [r7, #12]
2405e526:	681b      	ldr	r3, [r3, #0]
2405e528:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
2405e52c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
2405e52e:	68fb      	ldr	r3, [r7, #12]
2405e530:	681b      	ldr	r3, [r3, #0]
2405e532:	685a      	ldr	r2, [r3, #4]
2405e534:	4b96      	ldr	r3, [pc, #600]	; (2405e790 <HAL_SPI_Transmit+0x334>)
2405e536:	4013      	ands	r3, r2
2405e538:	88f9      	ldrh	r1, [r7, #6]
2405e53a:	68fa      	ldr	r2, [r7, #12]
2405e53c:	6812      	ldr	r2, [r2, #0]
2405e53e:	430b      	orrs	r3, r1
2405e540:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
2405e542:	68fb      	ldr	r3, [r7, #12]
2405e544:	681b      	ldr	r3, [r3, #0]
2405e546:	681a      	ldr	r2, [r3, #0]
2405e548:	68fb      	ldr	r3, [r7, #12]
2405e54a:	681b      	ldr	r3, [r3, #0]
2405e54c:	f042 0201 	orr.w	r2, r2, #1
2405e550:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
2405e552:	68fb      	ldr	r3, [r7, #12]
2405e554:	685b      	ldr	r3, [r3, #4]
2405e556:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
2405e55a:	d107      	bne.n	2405e56c <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
2405e55c:	68fb      	ldr	r3, [r7, #12]
2405e55e:	681b      	ldr	r3, [r3, #0]
2405e560:	681a      	ldr	r2, [r3, #0]
2405e562:	68fb      	ldr	r3, [r7, #12]
2405e564:	681b      	ldr	r3, [r3, #0]
2405e566:	f442 7200 	orr.w	r2, r2, #512	; 0x200
2405e56a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
2405e56c:	68fb      	ldr	r3, [r7, #12]
2405e56e:	68db      	ldr	r3, [r3, #12]
2405e570:	2b0f      	cmp	r3, #15
2405e572:	d947      	bls.n	2405e604 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
2405e574:	e03f      	b.n	2405e5f6 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
2405e576:	68fb      	ldr	r3, [r7, #12]
2405e578:	681b      	ldr	r3, [r3, #0]
2405e57a:	695b      	ldr	r3, [r3, #20]
2405e57c:	f003 0302 	and.w	r3, r3, #2
2405e580:	2b02      	cmp	r3, #2
2405e582:	d114      	bne.n	2405e5ae <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
2405e584:	68fb      	ldr	r3, [r7, #12]
2405e586:	6dda      	ldr	r2, [r3, #92]	; 0x5c
2405e588:	68fb      	ldr	r3, [r7, #12]
2405e58a:	681b      	ldr	r3, [r3, #0]
2405e58c:	6812      	ldr	r2, [r2, #0]
2405e58e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
2405e590:	68fb      	ldr	r3, [r7, #12]
2405e592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2405e594:	1d1a      	adds	r2, r3, #4
2405e596:	68fb      	ldr	r3, [r7, #12]
2405e598:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
2405e59a:	68fb      	ldr	r3, [r7, #12]
2405e59c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
2405e5a0:	b29b      	uxth	r3, r3
2405e5a2:	3b01      	subs	r3, #1
2405e5a4:	b29a      	uxth	r2, r3
2405e5a6:	68fb      	ldr	r3, [r7, #12]
2405e5a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
2405e5ac:	e023      	b.n	2405e5f6 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
2405e5ae:	f7f4 fbb9 	bl	24052d24 <HAL_GetTick>
2405e5b2:	4602      	mov	r2, r0
2405e5b4:	697b      	ldr	r3, [r7, #20]
2405e5b6:	1ad3      	subs	r3, r2, r3
2405e5b8:	683a      	ldr	r2, [r7, #0]
2405e5ba:	429a      	cmp	r2, r3
2405e5bc:	d803      	bhi.n	2405e5c6 <HAL_SPI_Transmit+0x16a>
2405e5be:	683b      	ldr	r3, [r7, #0]
2405e5c0:	f1b3 3fff 	cmp.w	r3, #4294967295
2405e5c4:	d102      	bne.n	2405e5cc <HAL_SPI_Transmit+0x170>
2405e5c6:	683b      	ldr	r3, [r7, #0]
2405e5c8:	2b00      	cmp	r3, #0
2405e5ca:	d114      	bne.n	2405e5f6 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
2405e5cc:	68f8      	ldr	r0, [r7, #12]
2405e5ce:	f000 f937 	bl	2405e840 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
2405e5d2:	68fb      	ldr	r3, [r7, #12]
2405e5d4:	2200      	movs	r2, #0
2405e5d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
2405e5da:	68fb      	ldr	r3, [r7, #12]
2405e5dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405e5e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
2405e5e4:	68fb      	ldr	r3, [r7, #12]
2405e5e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
2405e5ea:	68fb      	ldr	r3, [r7, #12]
2405e5ec:	2201      	movs	r2, #1
2405e5ee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
2405e5f2:	2303      	movs	r3, #3
2405e5f4:	e11f      	b.n	2405e836 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
2405e5f6:	68fb      	ldr	r3, [r7, #12]
2405e5f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
2405e5fc:	b29b      	uxth	r3, r3
2405e5fe:	2b00      	cmp	r3, #0
2405e600:	d1b9      	bne.n	2405e576 <HAL_SPI_Transmit+0x11a>
2405e602:	e0f2      	b.n	2405e7ea <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
2405e604:	68fb      	ldr	r3, [r7, #12]
2405e606:	68db      	ldr	r3, [r3, #12]
2405e608:	2b07      	cmp	r3, #7
2405e60a:	f240 80e7 	bls.w	2405e7dc <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
2405e60e:	e05d      	b.n	2405e6cc <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
2405e610:	68fb      	ldr	r3, [r7, #12]
2405e612:	681b      	ldr	r3, [r3, #0]
2405e614:	695b      	ldr	r3, [r3, #20]
2405e616:	f003 0302 	and.w	r3, r3, #2
2405e61a:	2b02      	cmp	r3, #2
2405e61c:	d132      	bne.n	2405e684 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
2405e61e:	68fb      	ldr	r3, [r7, #12]
2405e620:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
2405e624:	b29b      	uxth	r3, r3
2405e626:	2b01      	cmp	r3, #1
2405e628:	d918      	bls.n	2405e65c <HAL_SPI_Transmit+0x200>
2405e62a:	68fb      	ldr	r3, [r7, #12]
2405e62c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2405e62e:	2b00      	cmp	r3, #0
2405e630:	d014      	beq.n	2405e65c <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
2405e632:	68fb      	ldr	r3, [r7, #12]
2405e634:	6dda      	ldr	r2, [r3, #92]	; 0x5c
2405e636:	68fb      	ldr	r3, [r7, #12]
2405e638:	681b      	ldr	r3, [r3, #0]
2405e63a:	6812      	ldr	r2, [r2, #0]
2405e63c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
2405e63e:	68fb      	ldr	r3, [r7, #12]
2405e640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2405e642:	1d1a      	adds	r2, r3, #4
2405e644:	68fb      	ldr	r3, [r7, #12]
2405e646:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
2405e648:	68fb      	ldr	r3, [r7, #12]
2405e64a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
2405e64e:	b29b      	uxth	r3, r3
2405e650:	3b02      	subs	r3, #2
2405e652:	b29a      	uxth	r2, r3
2405e654:	68fb      	ldr	r3, [r7, #12]
2405e656:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
2405e65a:	e037      	b.n	2405e6cc <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
2405e65c:	68fb      	ldr	r3, [r7, #12]
2405e65e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2405e660:	881a      	ldrh	r2, [r3, #0]
2405e662:	69fb      	ldr	r3, [r7, #28]
2405e664:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
2405e666:	68fb      	ldr	r3, [r7, #12]
2405e668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2405e66a:	1c9a      	adds	r2, r3, #2
2405e66c:	68fb      	ldr	r3, [r7, #12]
2405e66e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
2405e670:	68fb      	ldr	r3, [r7, #12]
2405e672:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
2405e676:	b29b      	uxth	r3, r3
2405e678:	3b01      	subs	r3, #1
2405e67a:	b29a      	uxth	r2, r3
2405e67c:	68fb      	ldr	r3, [r7, #12]
2405e67e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
2405e682:	e023      	b.n	2405e6cc <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
2405e684:	f7f4 fb4e 	bl	24052d24 <HAL_GetTick>
2405e688:	4602      	mov	r2, r0
2405e68a:	697b      	ldr	r3, [r7, #20]
2405e68c:	1ad3      	subs	r3, r2, r3
2405e68e:	683a      	ldr	r2, [r7, #0]
2405e690:	429a      	cmp	r2, r3
2405e692:	d803      	bhi.n	2405e69c <HAL_SPI_Transmit+0x240>
2405e694:	683b      	ldr	r3, [r7, #0]
2405e696:	f1b3 3fff 	cmp.w	r3, #4294967295
2405e69a:	d102      	bne.n	2405e6a2 <HAL_SPI_Transmit+0x246>
2405e69c:	683b      	ldr	r3, [r7, #0]
2405e69e:	2b00      	cmp	r3, #0
2405e6a0:	d114      	bne.n	2405e6cc <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
2405e6a2:	68f8      	ldr	r0, [r7, #12]
2405e6a4:	f000 f8cc 	bl	2405e840 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
2405e6a8:	68fb      	ldr	r3, [r7, #12]
2405e6aa:	2200      	movs	r2, #0
2405e6ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
2405e6b0:	68fb      	ldr	r3, [r7, #12]
2405e6b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405e6b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
2405e6ba:	68fb      	ldr	r3, [r7, #12]
2405e6bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
2405e6c0:	68fb      	ldr	r3, [r7, #12]
2405e6c2:	2201      	movs	r2, #1
2405e6c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
2405e6c8:	2303      	movs	r3, #3
2405e6ca:	e0b4      	b.n	2405e836 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
2405e6cc:	68fb      	ldr	r3, [r7, #12]
2405e6ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
2405e6d2:	b29b      	uxth	r3, r3
2405e6d4:	2b00      	cmp	r3, #0
2405e6d6:	d19b      	bne.n	2405e610 <HAL_SPI_Transmit+0x1b4>
2405e6d8:	e087      	b.n	2405e7ea <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
2405e6da:	68fb      	ldr	r3, [r7, #12]
2405e6dc:	681b      	ldr	r3, [r3, #0]
2405e6de:	695b      	ldr	r3, [r3, #20]
2405e6e0:	f003 0302 	and.w	r3, r3, #2
2405e6e4:	2b02      	cmp	r3, #2
2405e6e6:	d155      	bne.n	2405e794 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
2405e6e8:	68fb      	ldr	r3, [r7, #12]
2405e6ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
2405e6ee:	b29b      	uxth	r3, r3
2405e6f0:	2b03      	cmp	r3, #3
2405e6f2:	d918      	bls.n	2405e726 <HAL_SPI_Transmit+0x2ca>
2405e6f4:	68fb      	ldr	r3, [r7, #12]
2405e6f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2405e6f8:	2b40      	cmp	r3, #64	; 0x40
2405e6fa:	d914      	bls.n	2405e726 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
2405e6fc:	68fb      	ldr	r3, [r7, #12]
2405e6fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
2405e700:	68fb      	ldr	r3, [r7, #12]
2405e702:	681b      	ldr	r3, [r3, #0]
2405e704:	6812      	ldr	r2, [r2, #0]
2405e706:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
2405e708:	68fb      	ldr	r3, [r7, #12]
2405e70a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2405e70c:	1d1a      	adds	r2, r3, #4
2405e70e:	68fb      	ldr	r3, [r7, #12]
2405e710:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
2405e712:	68fb      	ldr	r3, [r7, #12]
2405e714:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
2405e718:	b29b      	uxth	r3, r3
2405e71a:	3b04      	subs	r3, #4
2405e71c:	b29a      	uxth	r2, r3
2405e71e:	68fb      	ldr	r3, [r7, #12]
2405e720:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
2405e724:	e05a      	b.n	2405e7dc <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
2405e726:	68fb      	ldr	r3, [r7, #12]
2405e728:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
2405e72c:	b29b      	uxth	r3, r3
2405e72e:	2b01      	cmp	r3, #1
2405e730:	d917      	bls.n	2405e762 <HAL_SPI_Transmit+0x306>
2405e732:	68fb      	ldr	r3, [r7, #12]
2405e734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2405e736:	2b00      	cmp	r3, #0
2405e738:	d013      	beq.n	2405e762 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
2405e73a:	68fb      	ldr	r3, [r7, #12]
2405e73c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2405e73e:	881a      	ldrh	r2, [r3, #0]
2405e740:	69fb      	ldr	r3, [r7, #28]
2405e742:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
2405e744:	68fb      	ldr	r3, [r7, #12]
2405e746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2405e748:	1c9a      	adds	r2, r3, #2
2405e74a:	68fb      	ldr	r3, [r7, #12]
2405e74c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
2405e74e:	68fb      	ldr	r3, [r7, #12]
2405e750:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
2405e754:	b29b      	uxth	r3, r3
2405e756:	3b02      	subs	r3, #2
2405e758:	b29a      	uxth	r2, r3
2405e75a:	68fb      	ldr	r3, [r7, #12]
2405e75c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
2405e760:	e03c      	b.n	2405e7dc <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
2405e762:	68fb      	ldr	r3, [r7, #12]
2405e764:	6dda      	ldr	r2, [r3, #92]	; 0x5c
2405e766:	68fb      	ldr	r3, [r7, #12]
2405e768:	681b      	ldr	r3, [r3, #0]
2405e76a:	3320      	adds	r3, #32
2405e76c:	7812      	ldrb	r2, [r2, #0]
2405e76e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
2405e770:	68fb      	ldr	r3, [r7, #12]
2405e772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2405e774:	1c5a      	adds	r2, r3, #1
2405e776:	68fb      	ldr	r3, [r7, #12]
2405e778:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
2405e77a:	68fb      	ldr	r3, [r7, #12]
2405e77c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
2405e780:	b29b      	uxth	r3, r3
2405e782:	3b01      	subs	r3, #1
2405e784:	b29a      	uxth	r2, r3
2405e786:	68fb      	ldr	r3, [r7, #12]
2405e788:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
2405e78c:	e026      	b.n	2405e7dc <HAL_SPI_Transmit+0x380>
2405e78e:	bf00      	nop
2405e790:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
2405e794:	f7f4 fac6 	bl	24052d24 <HAL_GetTick>
2405e798:	4602      	mov	r2, r0
2405e79a:	697b      	ldr	r3, [r7, #20]
2405e79c:	1ad3      	subs	r3, r2, r3
2405e79e:	683a      	ldr	r2, [r7, #0]
2405e7a0:	429a      	cmp	r2, r3
2405e7a2:	d803      	bhi.n	2405e7ac <HAL_SPI_Transmit+0x350>
2405e7a4:	683b      	ldr	r3, [r7, #0]
2405e7a6:	f1b3 3fff 	cmp.w	r3, #4294967295
2405e7aa:	d102      	bne.n	2405e7b2 <HAL_SPI_Transmit+0x356>
2405e7ac:	683b      	ldr	r3, [r7, #0]
2405e7ae:	2b00      	cmp	r3, #0
2405e7b0:	d114      	bne.n	2405e7dc <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
2405e7b2:	68f8      	ldr	r0, [r7, #12]
2405e7b4:	f000 f844 	bl	2405e840 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
2405e7b8:	68fb      	ldr	r3, [r7, #12]
2405e7ba:	2200      	movs	r2, #0
2405e7bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
2405e7c0:	68fb      	ldr	r3, [r7, #12]
2405e7c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405e7c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
2405e7ca:	68fb      	ldr	r3, [r7, #12]
2405e7cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
2405e7d0:	68fb      	ldr	r3, [r7, #12]
2405e7d2:	2201      	movs	r2, #1
2405e7d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
2405e7d8:	2303      	movs	r3, #3
2405e7da:	e02c      	b.n	2405e836 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
2405e7dc:	68fb      	ldr	r3, [r7, #12]
2405e7de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
2405e7e2:	b29b      	uxth	r3, r3
2405e7e4:	2b00      	cmp	r3, #0
2405e7e6:	f47f af78 	bne.w	2405e6da <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
2405e7ea:	683b      	ldr	r3, [r7, #0]
2405e7ec:	9300      	str	r3, [sp, #0]
2405e7ee:	697b      	ldr	r3, [r7, #20]
2405e7f0:	2200      	movs	r2, #0
2405e7f2:	2108      	movs	r1, #8
2405e7f4:	68f8      	ldr	r0, [r7, #12]
2405e7f6:	f000 f8c3 	bl	2405e980 <SPI_WaitOnFlagUntilTimeout>
2405e7fa:	4603      	mov	r3, r0
2405e7fc:	2b00      	cmp	r3, #0
2405e7fe:	d007      	beq.n	2405e810 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
2405e800:	68fb      	ldr	r3, [r7, #12]
2405e802:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405e806:	f043 0220 	orr.w	r2, r3, #32
2405e80a:	68fb      	ldr	r3, [r7, #12]
2405e80c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
2405e810:	68f8      	ldr	r0, [r7, #12]
2405e812:	f000 f815 	bl	2405e840 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
2405e816:	68fb      	ldr	r3, [r7, #12]
2405e818:	2200      	movs	r2, #0
2405e81a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
2405e81e:	68fb      	ldr	r3, [r7, #12]
2405e820:	2201      	movs	r2, #1
2405e822:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
2405e826:	68fb      	ldr	r3, [r7, #12]
2405e828:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405e82c:	2b00      	cmp	r3, #0
2405e82e:	d001      	beq.n	2405e834 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
2405e830:	2301      	movs	r3, #1
2405e832:	e000      	b.n	2405e836 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
2405e834:	7efb      	ldrb	r3, [r7, #27]
}
2405e836:	4618      	mov	r0, r3
2405e838:	3720      	adds	r7, #32
2405e83a:	46bd      	mov	sp, r7
2405e83c:	bd80      	pop	{r7, pc}
2405e83e:	bf00      	nop

2405e840 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
2405e840:	b480      	push	{r7}
2405e842:	b085      	sub	sp, #20
2405e844:	af00      	add	r7, sp, #0
2405e846:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
2405e848:	687b      	ldr	r3, [r7, #4]
2405e84a:	681b      	ldr	r3, [r3, #0]
2405e84c:	695b      	ldr	r3, [r3, #20]
2405e84e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
2405e850:	687b      	ldr	r3, [r7, #4]
2405e852:	681b      	ldr	r3, [r3, #0]
2405e854:	699a      	ldr	r2, [r3, #24]
2405e856:	687b      	ldr	r3, [r7, #4]
2405e858:	681b      	ldr	r3, [r3, #0]
2405e85a:	f042 0208 	orr.w	r2, r2, #8
2405e85e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
2405e860:	687b      	ldr	r3, [r7, #4]
2405e862:	681b      	ldr	r3, [r3, #0]
2405e864:	699a      	ldr	r2, [r3, #24]
2405e866:	687b      	ldr	r3, [r7, #4]
2405e868:	681b      	ldr	r3, [r3, #0]
2405e86a:	f042 0210 	orr.w	r2, r2, #16
2405e86e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
2405e870:	687b      	ldr	r3, [r7, #4]
2405e872:	681b      	ldr	r3, [r3, #0]
2405e874:	681a      	ldr	r2, [r3, #0]
2405e876:	687b      	ldr	r3, [r7, #4]
2405e878:	681b      	ldr	r3, [r3, #0]
2405e87a:	f022 0201 	bic.w	r2, r2, #1
2405e87e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
2405e880:	687b      	ldr	r3, [r7, #4]
2405e882:	681b      	ldr	r3, [r3, #0]
2405e884:	6919      	ldr	r1, [r3, #16]
2405e886:	687b      	ldr	r3, [r7, #4]
2405e888:	681a      	ldr	r2, [r3, #0]
2405e88a:	4b3c      	ldr	r3, [pc, #240]	; (2405e97c <SPI_CloseTransfer+0x13c>)
2405e88c:	400b      	ands	r3, r1
2405e88e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2405e890:	687b      	ldr	r3, [r7, #4]
2405e892:	681b      	ldr	r3, [r3, #0]
2405e894:	689a      	ldr	r2, [r3, #8]
2405e896:	687b      	ldr	r3, [r7, #4]
2405e898:	681b      	ldr	r3, [r3, #0]
2405e89a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
2405e89e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
2405e8a0:	687b      	ldr	r3, [r7, #4]
2405e8a2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
2405e8a6:	b2db      	uxtb	r3, r3
2405e8a8:	2b04      	cmp	r3, #4
2405e8aa:	d014      	beq.n	2405e8d6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
2405e8ac:	68fb      	ldr	r3, [r7, #12]
2405e8ae:	f003 0320 	and.w	r3, r3, #32
2405e8b2:	2b00      	cmp	r3, #0
2405e8b4:	d00f      	beq.n	2405e8d6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2405e8b6:	687b      	ldr	r3, [r7, #4]
2405e8b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405e8bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
2405e8c0:	687b      	ldr	r3, [r7, #4]
2405e8c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2405e8c6:	687b      	ldr	r3, [r7, #4]
2405e8c8:	681b      	ldr	r3, [r3, #0]
2405e8ca:	699a      	ldr	r2, [r3, #24]
2405e8cc:	687b      	ldr	r3, [r7, #4]
2405e8ce:	681b      	ldr	r3, [r3, #0]
2405e8d0:	f042 0220 	orr.w	r2, r2, #32
2405e8d4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
2405e8d6:	687b      	ldr	r3, [r7, #4]
2405e8d8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
2405e8dc:	b2db      	uxtb	r3, r3
2405e8de:	2b03      	cmp	r3, #3
2405e8e0:	d014      	beq.n	2405e90c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
2405e8e2:	68fb      	ldr	r3, [r7, #12]
2405e8e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
2405e8e8:	2b00      	cmp	r3, #0
2405e8ea:	d00f      	beq.n	2405e90c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2405e8ec:	687b      	ldr	r3, [r7, #4]
2405e8ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405e8f2:	f043 0204 	orr.w	r2, r3, #4
2405e8f6:	687b      	ldr	r3, [r7, #4]
2405e8f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2405e8fc:	687b      	ldr	r3, [r7, #4]
2405e8fe:	681b      	ldr	r3, [r3, #0]
2405e900:	699a      	ldr	r2, [r3, #24]
2405e902:	687b      	ldr	r3, [r7, #4]
2405e904:	681b      	ldr	r3, [r3, #0]
2405e906:	f042 0240 	orr.w	r2, r2, #64	; 0x40
2405e90a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
2405e90c:	68fb      	ldr	r3, [r7, #12]
2405e90e:	f403 7300 	and.w	r3, r3, #512	; 0x200
2405e912:	2b00      	cmp	r3, #0
2405e914:	d00f      	beq.n	2405e936 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2405e916:	687b      	ldr	r3, [r7, #4]
2405e918:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405e91c:	f043 0201 	orr.w	r2, r3, #1
2405e920:	687b      	ldr	r3, [r7, #4]
2405e922:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
2405e926:	687b      	ldr	r3, [r7, #4]
2405e928:	681b      	ldr	r3, [r3, #0]
2405e92a:	699a      	ldr	r2, [r3, #24]
2405e92c:	687b      	ldr	r3, [r7, #4]
2405e92e:	681b      	ldr	r3, [r3, #0]
2405e930:	f442 7200 	orr.w	r2, r2, #512	; 0x200
2405e934:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
2405e936:	68fb      	ldr	r3, [r7, #12]
2405e938:	f403 7380 	and.w	r3, r3, #256	; 0x100
2405e93c:	2b00      	cmp	r3, #0
2405e93e:	d00f      	beq.n	2405e960 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2405e940:	687b      	ldr	r3, [r7, #4]
2405e942:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2405e946:	f043 0208 	orr.w	r2, r3, #8
2405e94a:	687b      	ldr	r3, [r7, #4]
2405e94c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
2405e950:	687b      	ldr	r3, [r7, #4]
2405e952:	681b      	ldr	r3, [r3, #0]
2405e954:	699a      	ldr	r2, [r3, #24]
2405e956:	687b      	ldr	r3, [r7, #4]
2405e958:	681b      	ldr	r3, [r3, #0]
2405e95a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
2405e95e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
2405e960:	687b      	ldr	r3, [r7, #4]
2405e962:	2200      	movs	r2, #0
2405e964:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
2405e968:	687b      	ldr	r3, [r7, #4]
2405e96a:	2200      	movs	r2, #0
2405e96c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
2405e970:	bf00      	nop
2405e972:	3714      	adds	r7, #20
2405e974:	46bd      	mov	sp, r7
2405e976:	f85d 7b04 	ldr.w	r7, [sp], #4
2405e97a:	4770      	bx	lr
2405e97c:	fffffc90 	.word	0xfffffc90

2405e980 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
2405e980:	b580      	push	{r7, lr}
2405e982:	b084      	sub	sp, #16
2405e984:	af00      	add	r7, sp, #0
2405e986:	60f8      	str	r0, [r7, #12]
2405e988:	60b9      	str	r1, [r7, #8]
2405e98a:	603b      	str	r3, [r7, #0]
2405e98c:	4613      	mov	r3, r2
2405e98e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
2405e990:	e010      	b.n	2405e9b4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
2405e992:	f7f4 f9c7 	bl	24052d24 <HAL_GetTick>
2405e996:	4602      	mov	r2, r0
2405e998:	683b      	ldr	r3, [r7, #0]
2405e99a:	1ad3      	subs	r3, r2, r3
2405e99c:	69ba      	ldr	r2, [r7, #24]
2405e99e:	429a      	cmp	r2, r3
2405e9a0:	d803      	bhi.n	2405e9aa <SPI_WaitOnFlagUntilTimeout+0x2a>
2405e9a2:	69bb      	ldr	r3, [r7, #24]
2405e9a4:	f1b3 3fff 	cmp.w	r3, #4294967295
2405e9a8:	d102      	bne.n	2405e9b0 <SPI_WaitOnFlagUntilTimeout+0x30>
2405e9aa:	69bb      	ldr	r3, [r7, #24]
2405e9ac:	2b00      	cmp	r3, #0
2405e9ae:	d101      	bne.n	2405e9b4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
2405e9b0:	2303      	movs	r3, #3
2405e9b2:	e00f      	b.n	2405e9d4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
2405e9b4:	68fb      	ldr	r3, [r7, #12]
2405e9b6:	681b      	ldr	r3, [r3, #0]
2405e9b8:	695a      	ldr	r2, [r3, #20]
2405e9ba:	68bb      	ldr	r3, [r7, #8]
2405e9bc:	4013      	ands	r3, r2
2405e9be:	68ba      	ldr	r2, [r7, #8]
2405e9c0:	429a      	cmp	r2, r3
2405e9c2:	bf0c      	ite	eq
2405e9c4:	2301      	moveq	r3, #1
2405e9c6:	2300      	movne	r3, #0
2405e9c8:	b2db      	uxtb	r3, r3
2405e9ca:	461a      	mov	r2, r3
2405e9cc:	79fb      	ldrb	r3, [r7, #7]
2405e9ce:	429a      	cmp	r2, r3
2405e9d0:	d0df      	beq.n	2405e992 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
2405e9d2:	2300      	movs	r3, #0
}
2405e9d4:	4618      	mov	r0, r3
2405e9d6:	3710      	adds	r7, #16
2405e9d8:	46bd      	mov	sp, r7
2405e9da:	bd80      	pop	{r7, pc}

2405e9dc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
2405e9dc:	b480      	push	{r7}
2405e9de:	b085      	sub	sp, #20
2405e9e0:	af00      	add	r7, sp, #0
2405e9e2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2405e9e4:	687b      	ldr	r3, [r7, #4]
2405e9e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2405e9e8:	095b      	lsrs	r3, r3, #5
2405e9ea:	3301      	adds	r3, #1
2405e9ec:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
2405e9ee:	687b      	ldr	r3, [r7, #4]
2405e9f0:	68db      	ldr	r3, [r3, #12]
2405e9f2:	3301      	adds	r3, #1
2405e9f4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
2405e9f6:	68bb      	ldr	r3, [r7, #8]
2405e9f8:	3307      	adds	r3, #7
2405e9fa:	08db      	lsrs	r3, r3, #3
2405e9fc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
2405e9fe:	68bb      	ldr	r3, [r7, #8]
2405ea00:	68fa      	ldr	r2, [r7, #12]
2405ea02:	fb02 f303 	mul.w	r3, r2, r3
}
2405ea06:	4618      	mov	r0, r3
2405ea08:	3714      	adds	r7, #20
2405ea0a:	46bd      	mov	sp, r7
2405ea0c:	f85d 7b04 	ldr.w	r7, [sp], #4
2405ea10:	4770      	bx	lr
	...

2405ea14 <__errno>:
2405ea14:	4b01      	ldr	r3, [pc, #4]	; (2405ea1c <__errno+0x8>)
2405ea16:	6818      	ldr	r0, [r3, #0]
2405ea18:	4770      	bx	lr
2405ea1a:	bf00      	nop
2405ea1c:	20000040 	.word	0x20000040

2405ea20 <__libc_init_array>:
2405ea20:	b570      	push	{r4, r5, r6, lr}
2405ea22:	4d0d      	ldr	r5, [pc, #52]	; (2405ea58 <__libc_init_array+0x38>)
2405ea24:	4c0d      	ldr	r4, [pc, #52]	; (2405ea5c <__libc_init_array+0x3c>)
2405ea26:	1b64      	subs	r4, r4, r5
2405ea28:	10a4      	asrs	r4, r4, #2
2405ea2a:	2600      	movs	r6, #0
2405ea2c:	42a6      	cmp	r6, r4
2405ea2e:	d109      	bne.n	2405ea44 <__libc_init_array+0x24>
2405ea30:	4d0b      	ldr	r5, [pc, #44]	; (2405ea60 <__libc_init_array+0x40>)
2405ea32:	4c0c      	ldr	r4, [pc, #48]	; (2405ea64 <__libc_init_array+0x44>)
2405ea34:	f001 fa22 	bl	2405fe7c <_init>
2405ea38:	1b64      	subs	r4, r4, r5
2405ea3a:	10a4      	asrs	r4, r4, #2
2405ea3c:	2600      	movs	r6, #0
2405ea3e:	42a6      	cmp	r6, r4
2405ea40:	d105      	bne.n	2405ea4e <__libc_init_array+0x2e>
2405ea42:	bd70      	pop	{r4, r5, r6, pc}
2405ea44:	f855 3b04 	ldr.w	r3, [r5], #4
2405ea48:	4798      	blx	r3
2405ea4a:	3601      	adds	r6, #1
2405ea4c:	e7ee      	b.n	2405ea2c <__libc_init_array+0xc>
2405ea4e:	f855 3b04 	ldr.w	r3, [r5], #4
2405ea52:	4798      	blx	r3
2405ea54:	3601      	adds	r6, #1
2405ea56:	e7f2      	b.n	2405ea3e <__libc_init_array+0x1e>
2405ea58:	24061080 	.word	0x24061080
2405ea5c:	24061080 	.word	0x24061080
2405ea60:	24061080 	.word	0x24061080
2405ea64:	24061084 	.word	0x24061084

2405ea68 <memcpy>:
2405ea68:	440a      	add	r2, r1
2405ea6a:	4291      	cmp	r1, r2
2405ea6c:	f100 33ff 	add.w	r3, r0, #4294967295
2405ea70:	d100      	bne.n	2405ea74 <memcpy+0xc>
2405ea72:	4770      	bx	lr
2405ea74:	b510      	push	{r4, lr}
2405ea76:	f811 4b01 	ldrb.w	r4, [r1], #1
2405ea7a:	f803 4f01 	strb.w	r4, [r3, #1]!
2405ea7e:	4291      	cmp	r1, r2
2405ea80:	d1f9      	bne.n	2405ea76 <memcpy+0xe>
2405ea82:	bd10      	pop	{r4, pc}

2405ea84 <memset>:
2405ea84:	4402      	add	r2, r0
2405ea86:	4603      	mov	r3, r0
2405ea88:	4293      	cmp	r3, r2
2405ea8a:	d100      	bne.n	2405ea8e <memset+0xa>
2405ea8c:	4770      	bx	lr
2405ea8e:	f803 1b01 	strb.w	r1, [r3], #1
2405ea92:	e7f9      	b.n	2405ea88 <memset+0x4>

2405ea94 <srand>:
2405ea94:	b538      	push	{r3, r4, r5, lr}
2405ea96:	4b10      	ldr	r3, [pc, #64]	; (2405ead8 <srand+0x44>)
2405ea98:	681d      	ldr	r5, [r3, #0]
2405ea9a:	6bab      	ldr	r3, [r5, #56]	; 0x38
2405ea9c:	4604      	mov	r4, r0
2405ea9e:	b9b3      	cbnz	r3, 2405eace <srand+0x3a>
2405eaa0:	2018      	movs	r0, #24
2405eaa2:	f000 f8b5 	bl	2405ec10 <malloc>
2405eaa6:	4602      	mov	r2, r0
2405eaa8:	63a8      	str	r0, [r5, #56]	; 0x38
2405eaaa:	b920      	cbnz	r0, 2405eab6 <srand+0x22>
2405eaac:	4b0b      	ldr	r3, [pc, #44]	; (2405eadc <srand+0x48>)
2405eaae:	480c      	ldr	r0, [pc, #48]	; (2405eae0 <srand+0x4c>)
2405eab0:	2142      	movs	r1, #66	; 0x42
2405eab2:	f000 f87d 	bl	2405ebb0 <__assert_func>
2405eab6:	490b      	ldr	r1, [pc, #44]	; (2405eae4 <srand+0x50>)
2405eab8:	4b0b      	ldr	r3, [pc, #44]	; (2405eae8 <srand+0x54>)
2405eaba:	e9c0 1300 	strd	r1, r3, [r0]
2405eabe:	4b0b      	ldr	r3, [pc, #44]	; (2405eaec <srand+0x58>)
2405eac0:	6083      	str	r3, [r0, #8]
2405eac2:	230b      	movs	r3, #11
2405eac4:	8183      	strh	r3, [r0, #12]
2405eac6:	2100      	movs	r1, #0
2405eac8:	2001      	movs	r0, #1
2405eaca:	e9c2 0104 	strd	r0, r1, [r2, #16]
2405eace:	6bab      	ldr	r3, [r5, #56]	; 0x38
2405ead0:	2200      	movs	r2, #0
2405ead2:	611c      	str	r4, [r3, #16]
2405ead4:	615a      	str	r2, [r3, #20]
2405ead6:	bd38      	pop	{r3, r4, r5, pc}
2405ead8:	20000040 	.word	0x20000040
2405eadc:	24060f38 	.word	0x24060f38
2405eae0:	24060f4f 	.word	0x24060f4f
2405eae4:	abcd330e 	.word	0xabcd330e
2405eae8:	e66d1234 	.word	0xe66d1234
2405eaec:	0005deec 	.word	0x0005deec

2405eaf0 <rand>:
2405eaf0:	4b17      	ldr	r3, [pc, #92]	; (2405eb50 <rand+0x60>)
2405eaf2:	b510      	push	{r4, lr}
2405eaf4:	681c      	ldr	r4, [r3, #0]
2405eaf6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
2405eaf8:	b9b3      	cbnz	r3, 2405eb28 <rand+0x38>
2405eafa:	2018      	movs	r0, #24
2405eafc:	f000 f888 	bl	2405ec10 <malloc>
2405eb00:	63a0      	str	r0, [r4, #56]	; 0x38
2405eb02:	b928      	cbnz	r0, 2405eb10 <rand+0x20>
2405eb04:	4602      	mov	r2, r0
2405eb06:	4b13      	ldr	r3, [pc, #76]	; (2405eb54 <rand+0x64>)
2405eb08:	4813      	ldr	r0, [pc, #76]	; (2405eb58 <rand+0x68>)
2405eb0a:	214e      	movs	r1, #78	; 0x4e
2405eb0c:	f000 f850 	bl	2405ebb0 <__assert_func>
2405eb10:	4a12      	ldr	r2, [pc, #72]	; (2405eb5c <rand+0x6c>)
2405eb12:	4b13      	ldr	r3, [pc, #76]	; (2405eb60 <rand+0x70>)
2405eb14:	e9c0 2300 	strd	r2, r3, [r0]
2405eb18:	4b12      	ldr	r3, [pc, #72]	; (2405eb64 <rand+0x74>)
2405eb1a:	6083      	str	r3, [r0, #8]
2405eb1c:	230b      	movs	r3, #11
2405eb1e:	8183      	strh	r3, [r0, #12]
2405eb20:	2201      	movs	r2, #1
2405eb22:	2300      	movs	r3, #0
2405eb24:	e9c0 2304 	strd	r2, r3, [r0, #16]
2405eb28:	6ba1      	ldr	r1, [r4, #56]	; 0x38
2405eb2a:	480f      	ldr	r0, [pc, #60]	; (2405eb68 <rand+0x78>)
2405eb2c:	690a      	ldr	r2, [r1, #16]
2405eb2e:	694b      	ldr	r3, [r1, #20]
2405eb30:	4c0e      	ldr	r4, [pc, #56]	; (2405eb6c <rand+0x7c>)
2405eb32:	4350      	muls	r0, r2
2405eb34:	fb04 0003 	mla	r0, r4, r3, r0
2405eb38:	fba2 3404 	umull	r3, r4, r2, r4
2405eb3c:	1c5a      	adds	r2, r3, #1
2405eb3e:	4404      	add	r4, r0
2405eb40:	f144 0000 	adc.w	r0, r4, #0
2405eb44:	e9c1 2004 	strd	r2, r0, [r1, #16]
2405eb48:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
2405eb4c:	bd10      	pop	{r4, pc}
2405eb4e:	bf00      	nop
2405eb50:	20000040 	.word	0x20000040
2405eb54:	24060f38 	.word	0x24060f38
2405eb58:	24060f4f 	.word	0x24060f4f
2405eb5c:	abcd330e 	.word	0xabcd330e
2405eb60:	e66d1234 	.word	0xe66d1234
2405eb64:	0005deec 	.word	0x0005deec
2405eb68:	5851f42d 	.word	0x5851f42d
2405eb6c:	4c957f2d 	.word	0x4c957f2d

2405eb70 <siprintf>:
2405eb70:	b40e      	push	{r1, r2, r3}
2405eb72:	b500      	push	{lr}
2405eb74:	b09c      	sub	sp, #112	; 0x70
2405eb76:	ab1d      	add	r3, sp, #116	; 0x74
2405eb78:	9002      	str	r0, [sp, #8]
2405eb7a:	9006      	str	r0, [sp, #24]
2405eb7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
2405eb80:	4809      	ldr	r0, [pc, #36]	; (2405eba8 <siprintf+0x38>)
2405eb82:	9107      	str	r1, [sp, #28]
2405eb84:	9104      	str	r1, [sp, #16]
2405eb86:	4909      	ldr	r1, [pc, #36]	; (2405ebac <siprintf+0x3c>)
2405eb88:	f853 2b04 	ldr.w	r2, [r3], #4
2405eb8c:	9105      	str	r1, [sp, #20]
2405eb8e:	6800      	ldr	r0, [r0, #0]
2405eb90:	9301      	str	r3, [sp, #4]
2405eb92:	a902      	add	r1, sp, #8
2405eb94:	f000 f94a 	bl	2405ee2c <_svfiprintf_r>
2405eb98:	9b02      	ldr	r3, [sp, #8]
2405eb9a:	2200      	movs	r2, #0
2405eb9c:	701a      	strb	r2, [r3, #0]
2405eb9e:	b01c      	add	sp, #112	; 0x70
2405eba0:	f85d eb04 	ldr.w	lr, [sp], #4
2405eba4:	b003      	add	sp, #12
2405eba6:	4770      	bx	lr
2405eba8:	20000040 	.word	0x20000040
2405ebac:	ffff0208 	.word	0xffff0208

2405ebb0 <__assert_func>:
2405ebb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
2405ebb2:	4614      	mov	r4, r2
2405ebb4:	461a      	mov	r2, r3
2405ebb6:	4b09      	ldr	r3, [pc, #36]	; (2405ebdc <__assert_func+0x2c>)
2405ebb8:	681b      	ldr	r3, [r3, #0]
2405ebba:	4605      	mov	r5, r0
2405ebbc:	68d8      	ldr	r0, [r3, #12]
2405ebbe:	b14c      	cbz	r4, 2405ebd4 <__assert_func+0x24>
2405ebc0:	4b07      	ldr	r3, [pc, #28]	; (2405ebe0 <__assert_func+0x30>)
2405ebc2:	9100      	str	r1, [sp, #0]
2405ebc4:	e9cd 3401 	strd	r3, r4, [sp, #4]
2405ebc8:	4906      	ldr	r1, [pc, #24]	; (2405ebe4 <__assert_func+0x34>)
2405ebca:	462b      	mov	r3, r5
2405ebcc:	f000 f80e 	bl	2405ebec <fiprintf>
2405ebd0:	f000 fdea 	bl	2405f7a8 <abort>
2405ebd4:	4b04      	ldr	r3, [pc, #16]	; (2405ebe8 <__assert_func+0x38>)
2405ebd6:	461c      	mov	r4, r3
2405ebd8:	e7f3      	b.n	2405ebc2 <__assert_func+0x12>
2405ebda:	bf00      	nop
2405ebdc:	20000040 	.word	0x20000040
2405ebe0:	24060fae 	.word	0x24060fae
2405ebe4:	24060fbb 	.word	0x24060fbb
2405ebe8:	24060fe9 	.word	0x24060fe9

2405ebec <fiprintf>:
2405ebec:	b40e      	push	{r1, r2, r3}
2405ebee:	b503      	push	{r0, r1, lr}
2405ebf0:	4601      	mov	r1, r0
2405ebf2:	ab03      	add	r3, sp, #12
2405ebf4:	4805      	ldr	r0, [pc, #20]	; (2405ec0c <fiprintf+0x20>)
2405ebf6:	f853 2b04 	ldr.w	r2, [r3], #4
2405ebfa:	6800      	ldr	r0, [r0, #0]
2405ebfc:	9301      	str	r3, [sp, #4]
2405ebfe:	f000 fa3f 	bl	2405f080 <_vfiprintf_r>
2405ec02:	b002      	add	sp, #8
2405ec04:	f85d eb04 	ldr.w	lr, [sp], #4
2405ec08:	b003      	add	sp, #12
2405ec0a:	4770      	bx	lr
2405ec0c:	20000040 	.word	0x20000040

2405ec10 <malloc>:
2405ec10:	4b02      	ldr	r3, [pc, #8]	; (2405ec1c <malloc+0xc>)
2405ec12:	4601      	mov	r1, r0
2405ec14:	6818      	ldr	r0, [r3, #0]
2405ec16:	f000 b853 	b.w	2405ecc0 <_malloc_r>
2405ec1a:	bf00      	nop
2405ec1c:	20000040 	.word	0x20000040

2405ec20 <_free_r>:
2405ec20:	b537      	push	{r0, r1, r2, r4, r5, lr}
2405ec22:	2900      	cmp	r1, #0
2405ec24:	d048      	beq.n	2405ecb8 <_free_r+0x98>
2405ec26:	f851 3c04 	ldr.w	r3, [r1, #-4]
2405ec2a:	9001      	str	r0, [sp, #4]
2405ec2c:	2b00      	cmp	r3, #0
2405ec2e:	f1a1 0404 	sub.w	r4, r1, #4
2405ec32:	bfb8      	it	lt
2405ec34:	18e4      	addlt	r4, r4, r3
2405ec36:	f000 fff7 	bl	2405fc28 <__malloc_lock>
2405ec3a:	4a20      	ldr	r2, [pc, #128]	; (2405ecbc <_free_r+0x9c>)
2405ec3c:	9801      	ldr	r0, [sp, #4]
2405ec3e:	6813      	ldr	r3, [r2, #0]
2405ec40:	4615      	mov	r5, r2
2405ec42:	b933      	cbnz	r3, 2405ec52 <_free_r+0x32>
2405ec44:	6063      	str	r3, [r4, #4]
2405ec46:	6014      	str	r4, [r2, #0]
2405ec48:	b003      	add	sp, #12
2405ec4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
2405ec4e:	f000 bff1 	b.w	2405fc34 <__malloc_unlock>
2405ec52:	42a3      	cmp	r3, r4
2405ec54:	d90b      	bls.n	2405ec6e <_free_r+0x4e>
2405ec56:	6821      	ldr	r1, [r4, #0]
2405ec58:	1862      	adds	r2, r4, r1
2405ec5a:	4293      	cmp	r3, r2
2405ec5c:	bf04      	itt	eq
2405ec5e:	681a      	ldreq	r2, [r3, #0]
2405ec60:	685b      	ldreq	r3, [r3, #4]
2405ec62:	6063      	str	r3, [r4, #4]
2405ec64:	bf04      	itt	eq
2405ec66:	1852      	addeq	r2, r2, r1
2405ec68:	6022      	streq	r2, [r4, #0]
2405ec6a:	602c      	str	r4, [r5, #0]
2405ec6c:	e7ec      	b.n	2405ec48 <_free_r+0x28>
2405ec6e:	461a      	mov	r2, r3
2405ec70:	685b      	ldr	r3, [r3, #4]
2405ec72:	b10b      	cbz	r3, 2405ec78 <_free_r+0x58>
2405ec74:	42a3      	cmp	r3, r4
2405ec76:	d9fa      	bls.n	2405ec6e <_free_r+0x4e>
2405ec78:	6811      	ldr	r1, [r2, #0]
2405ec7a:	1855      	adds	r5, r2, r1
2405ec7c:	42a5      	cmp	r5, r4
2405ec7e:	d10b      	bne.n	2405ec98 <_free_r+0x78>
2405ec80:	6824      	ldr	r4, [r4, #0]
2405ec82:	4421      	add	r1, r4
2405ec84:	1854      	adds	r4, r2, r1
2405ec86:	42a3      	cmp	r3, r4
2405ec88:	6011      	str	r1, [r2, #0]
2405ec8a:	d1dd      	bne.n	2405ec48 <_free_r+0x28>
2405ec8c:	681c      	ldr	r4, [r3, #0]
2405ec8e:	685b      	ldr	r3, [r3, #4]
2405ec90:	6053      	str	r3, [r2, #4]
2405ec92:	4421      	add	r1, r4
2405ec94:	6011      	str	r1, [r2, #0]
2405ec96:	e7d7      	b.n	2405ec48 <_free_r+0x28>
2405ec98:	d902      	bls.n	2405eca0 <_free_r+0x80>
2405ec9a:	230c      	movs	r3, #12
2405ec9c:	6003      	str	r3, [r0, #0]
2405ec9e:	e7d3      	b.n	2405ec48 <_free_r+0x28>
2405eca0:	6825      	ldr	r5, [r4, #0]
2405eca2:	1961      	adds	r1, r4, r5
2405eca4:	428b      	cmp	r3, r1
2405eca6:	bf04      	itt	eq
2405eca8:	6819      	ldreq	r1, [r3, #0]
2405ecaa:	685b      	ldreq	r3, [r3, #4]
2405ecac:	6063      	str	r3, [r4, #4]
2405ecae:	bf04      	itt	eq
2405ecb0:	1949      	addeq	r1, r1, r5
2405ecb2:	6021      	streq	r1, [r4, #0]
2405ecb4:	6054      	str	r4, [r2, #4]
2405ecb6:	e7c7      	b.n	2405ec48 <_free_r+0x28>
2405ecb8:	b003      	add	sp, #12
2405ecba:	bd30      	pop	{r4, r5, pc}
2405ecbc:	200000ec 	.word	0x200000ec

2405ecc0 <_malloc_r>:
2405ecc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2405ecc2:	1ccd      	adds	r5, r1, #3
2405ecc4:	f025 0503 	bic.w	r5, r5, #3
2405ecc8:	3508      	adds	r5, #8
2405ecca:	2d0c      	cmp	r5, #12
2405eccc:	bf38      	it	cc
2405ecce:	250c      	movcc	r5, #12
2405ecd0:	2d00      	cmp	r5, #0
2405ecd2:	4606      	mov	r6, r0
2405ecd4:	db01      	blt.n	2405ecda <_malloc_r+0x1a>
2405ecd6:	42a9      	cmp	r1, r5
2405ecd8:	d903      	bls.n	2405ece2 <_malloc_r+0x22>
2405ecda:	230c      	movs	r3, #12
2405ecdc:	6033      	str	r3, [r6, #0]
2405ecde:	2000      	movs	r0, #0
2405ece0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2405ece2:	f000 ffa1 	bl	2405fc28 <__malloc_lock>
2405ece6:	4921      	ldr	r1, [pc, #132]	; (2405ed6c <_malloc_r+0xac>)
2405ece8:	680a      	ldr	r2, [r1, #0]
2405ecea:	4614      	mov	r4, r2
2405ecec:	b99c      	cbnz	r4, 2405ed16 <_malloc_r+0x56>
2405ecee:	4f20      	ldr	r7, [pc, #128]	; (2405ed70 <_malloc_r+0xb0>)
2405ecf0:	683b      	ldr	r3, [r7, #0]
2405ecf2:	b923      	cbnz	r3, 2405ecfe <_malloc_r+0x3e>
2405ecf4:	4621      	mov	r1, r4
2405ecf6:	4630      	mov	r0, r6
2405ecf8:	f000 fc86 	bl	2405f608 <_sbrk_r>
2405ecfc:	6038      	str	r0, [r7, #0]
2405ecfe:	4629      	mov	r1, r5
2405ed00:	4630      	mov	r0, r6
2405ed02:	f000 fc81 	bl	2405f608 <_sbrk_r>
2405ed06:	1c43      	adds	r3, r0, #1
2405ed08:	d123      	bne.n	2405ed52 <_malloc_r+0x92>
2405ed0a:	230c      	movs	r3, #12
2405ed0c:	6033      	str	r3, [r6, #0]
2405ed0e:	4630      	mov	r0, r6
2405ed10:	f000 ff90 	bl	2405fc34 <__malloc_unlock>
2405ed14:	e7e3      	b.n	2405ecde <_malloc_r+0x1e>
2405ed16:	6823      	ldr	r3, [r4, #0]
2405ed18:	1b5b      	subs	r3, r3, r5
2405ed1a:	d417      	bmi.n	2405ed4c <_malloc_r+0x8c>
2405ed1c:	2b0b      	cmp	r3, #11
2405ed1e:	d903      	bls.n	2405ed28 <_malloc_r+0x68>
2405ed20:	6023      	str	r3, [r4, #0]
2405ed22:	441c      	add	r4, r3
2405ed24:	6025      	str	r5, [r4, #0]
2405ed26:	e004      	b.n	2405ed32 <_malloc_r+0x72>
2405ed28:	6863      	ldr	r3, [r4, #4]
2405ed2a:	42a2      	cmp	r2, r4
2405ed2c:	bf0c      	ite	eq
2405ed2e:	600b      	streq	r3, [r1, #0]
2405ed30:	6053      	strne	r3, [r2, #4]
2405ed32:	4630      	mov	r0, r6
2405ed34:	f000 ff7e 	bl	2405fc34 <__malloc_unlock>
2405ed38:	f104 000b 	add.w	r0, r4, #11
2405ed3c:	1d23      	adds	r3, r4, #4
2405ed3e:	f020 0007 	bic.w	r0, r0, #7
2405ed42:	1ac2      	subs	r2, r0, r3
2405ed44:	d0cc      	beq.n	2405ece0 <_malloc_r+0x20>
2405ed46:	1a1b      	subs	r3, r3, r0
2405ed48:	50a3      	str	r3, [r4, r2]
2405ed4a:	e7c9      	b.n	2405ece0 <_malloc_r+0x20>
2405ed4c:	4622      	mov	r2, r4
2405ed4e:	6864      	ldr	r4, [r4, #4]
2405ed50:	e7cc      	b.n	2405ecec <_malloc_r+0x2c>
2405ed52:	1cc4      	adds	r4, r0, #3
2405ed54:	f024 0403 	bic.w	r4, r4, #3
2405ed58:	42a0      	cmp	r0, r4
2405ed5a:	d0e3      	beq.n	2405ed24 <_malloc_r+0x64>
2405ed5c:	1a21      	subs	r1, r4, r0
2405ed5e:	4630      	mov	r0, r6
2405ed60:	f000 fc52 	bl	2405f608 <_sbrk_r>
2405ed64:	3001      	adds	r0, #1
2405ed66:	d1dd      	bne.n	2405ed24 <_malloc_r+0x64>
2405ed68:	e7cf      	b.n	2405ed0a <_malloc_r+0x4a>
2405ed6a:	bf00      	nop
2405ed6c:	200000ec 	.word	0x200000ec
2405ed70:	200000f0 	.word	0x200000f0

2405ed74 <__ssputs_r>:
2405ed74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2405ed78:	688e      	ldr	r6, [r1, #8]
2405ed7a:	429e      	cmp	r6, r3
2405ed7c:	4682      	mov	sl, r0
2405ed7e:	460c      	mov	r4, r1
2405ed80:	4690      	mov	r8, r2
2405ed82:	461f      	mov	r7, r3
2405ed84:	d838      	bhi.n	2405edf8 <__ssputs_r+0x84>
2405ed86:	898a      	ldrh	r2, [r1, #12]
2405ed88:	f412 6f90 	tst.w	r2, #1152	; 0x480
2405ed8c:	d032      	beq.n	2405edf4 <__ssputs_r+0x80>
2405ed8e:	6825      	ldr	r5, [r4, #0]
2405ed90:	6909      	ldr	r1, [r1, #16]
2405ed92:	eba5 0901 	sub.w	r9, r5, r1
2405ed96:	6965      	ldr	r5, [r4, #20]
2405ed98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
2405ed9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
2405eda0:	3301      	adds	r3, #1
2405eda2:	444b      	add	r3, r9
2405eda4:	106d      	asrs	r5, r5, #1
2405eda6:	429d      	cmp	r5, r3
2405eda8:	bf38      	it	cc
2405edaa:	461d      	movcc	r5, r3
2405edac:	0553      	lsls	r3, r2, #21
2405edae:	d531      	bpl.n	2405ee14 <__ssputs_r+0xa0>
2405edb0:	4629      	mov	r1, r5
2405edb2:	f7ff ff85 	bl	2405ecc0 <_malloc_r>
2405edb6:	4606      	mov	r6, r0
2405edb8:	b950      	cbnz	r0, 2405edd0 <__ssputs_r+0x5c>
2405edba:	230c      	movs	r3, #12
2405edbc:	f8ca 3000 	str.w	r3, [sl]
2405edc0:	89a3      	ldrh	r3, [r4, #12]
2405edc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2405edc6:	81a3      	strh	r3, [r4, #12]
2405edc8:	f04f 30ff 	mov.w	r0, #4294967295
2405edcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2405edd0:	6921      	ldr	r1, [r4, #16]
2405edd2:	464a      	mov	r2, r9
2405edd4:	f7ff fe48 	bl	2405ea68 <memcpy>
2405edd8:	89a3      	ldrh	r3, [r4, #12]
2405edda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
2405edde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2405ede2:	81a3      	strh	r3, [r4, #12]
2405ede4:	6126      	str	r6, [r4, #16]
2405ede6:	6165      	str	r5, [r4, #20]
2405ede8:	444e      	add	r6, r9
2405edea:	eba5 0509 	sub.w	r5, r5, r9
2405edee:	6026      	str	r6, [r4, #0]
2405edf0:	60a5      	str	r5, [r4, #8]
2405edf2:	463e      	mov	r6, r7
2405edf4:	42be      	cmp	r6, r7
2405edf6:	d900      	bls.n	2405edfa <__ssputs_r+0x86>
2405edf8:	463e      	mov	r6, r7
2405edfa:	4632      	mov	r2, r6
2405edfc:	6820      	ldr	r0, [r4, #0]
2405edfe:	4641      	mov	r1, r8
2405ee00:	f000 fef8 	bl	2405fbf4 <memmove>
2405ee04:	68a3      	ldr	r3, [r4, #8]
2405ee06:	6822      	ldr	r2, [r4, #0]
2405ee08:	1b9b      	subs	r3, r3, r6
2405ee0a:	4432      	add	r2, r6
2405ee0c:	60a3      	str	r3, [r4, #8]
2405ee0e:	6022      	str	r2, [r4, #0]
2405ee10:	2000      	movs	r0, #0
2405ee12:	e7db      	b.n	2405edcc <__ssputs_r+0x58>
2405ee14:	462a      	mov	r2, r5
2405ee16:	f000 ff13 	bl	2405fc40 <_realloc_r>
2405ee1a:	4606      	mov	r6, r0
2405ee1c:	2800      	cmp	r0, #0
2405ee1e:	d1e1      	bne.n	2405ede4 <__ssputs_r+0x70>
2405ee20:	6921      	ldr	r1, [r4, #16]
2405ee22:	4650      	mov	r0, sl
2405ee24:	f7ff fefc 	bl	2405ec20 <_free_r>
2405ee28:	e7c7      	b.n	2405edba <__ssputs_r+0x46>
	...

2405ee2c <_svfiprintf_r>:
2405ee2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2405ee30:	4698      	mov	r8, r3
2405ee32:	898b      	ldrh	r3, [r1, #12]
2405ee34:	061b      	lsls	r3, r3, #24
2405ee36:	b09d      	sub	sp, #116	; 0x74
2405ee38:	4607      	mov	r7, r0
2405ee3a:	460d      	mov	r5, r1
2405ee3c:	4614      	mov	r4, r2
2405ee3e:	d50e      	bpl.n	2405ee5e <_svfiprintf_r+0x32>
2405ee40:	690b      	ldr	r3, [r1, #16]
2405ee42:	b963      	cbnz	r3, 2405ee5e <_svfiprintf_r+0x32>
2405ee44:	2140      	movs	r1, #64	; 0x40
2405ee46:	f7ff ff3b 	bl	2405ecc0 <_malloc_r>
2405ee4a:	6028      	str	r0, [r5, #0]
2405ee4c:	6128      	str	r0, [r5, #16]
2405ee4e:	b920      	cbnz	r0, 2405ee5a <_svfiprintf_r+0x2e>
2405ee50:	230c      	movs	r3, #12
2405ee52:	603b      	str	r3, [r7, #0]
2405ee54:	f04f 30ff 	mov.w	r0, #4294967295
2405ee58:	e0d1      	b.n	2405effe <_svfiprintf_r+0x1d2>
2405ee5a:	2340      	movs	r3, #64	; 0x40
2405ee5c:	616b      	str	r3, [r5, #20]
2405ee5e:	2300      	movs	r3, #0
2405ee60:	9309      	str	r3, [sp, #36]	; 0x24
2405ee62:	2320      	movs	r3, #32
2405ee64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
2405ee68:	f8cd 800c 	str.w	r8, [sp, #12]
2405ee6c:	2330      	movs	r3, #48	; 0x30
2405ee6e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 2405f018 <_svfiprintf_r+0x1ec>
2405ee72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
2405ee76:	f04f 0901 	mov.w	r9, #1
2405ee7a:	4623      	mov	r3, r4
2405ee7c:	469a      	mov	sl, r3
2405ee7e:	f813 2b01 	ldrb.w	r2, [r3], #1
2405ee82:	b10a      	cbz	r2, 2405ee88 <_svfiprintf_r+0x5c>
2405ee84:	2a25      	cmp	r2, #37	; 0x25
2405ee86:	d1f9      	bne.n	2405ee7c <_svfiprintf_r+0x50>
2405ee88:	ebba 0b04 	subs.w	fp, sl, r4
2405ee8c:	d00b      	beq.n	2405eea6 <_svfiprintf_r+0x7a>
2405ee8e:	465b      	mov	r3, fp
2405ee90:	4622      	mov	r2, r4
2405ee92:	4629      	mov	r1, r5
2405ee94:	4638      	mov	r0, r7
2405ee96:	f7ff ff6d 	bl	2405ed74 <__ssputs_r>
2405ee9a:	3001      	adds	r0, #1
2405ee9c:	f000 80aa 	beq.w	2405eff4 <_svfiprintf_r+0x1c8>
2405eea0:	9a09      	ldr	r2, [sp, #36]	; 0x24
2405eea2:	445a      	add	r2, fp
2405eea4:	9209      	str	r2, [sp, #36]	; 0x24
2405eea6:	f89a 3000 	ldrb.w	r3, [sl]
2405eeaa:	2b00      	cmp	r3, #0
2405eeac:	f000 80a2 	beq.w	2405eff4 <_svfiprintf_r+0x1c8>
2405eeb0:	2300      	movs	r3, #0
2405eeb2:	f04f 32ff 	mov.w	r2, #4294967295
2405eeb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
2405eeba:	f10a 0a01 	add.w	sl, sl, #1
2405eebe:	9304      	str	r3, [sp, #16]
2405eec0:	9307      	str	r3, [sp, #28]
2405eec2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
2405eec6:	931a      	str	r3, [sp, #104]	; 0x68
2405eec8:	4654      	mov	r4, sl
2405eeca:	2205      	movs	r2, #5
2405eecc:	f814 1b01 	ldrb.w	r1, [r4], #1
2405eed0:	4851      	ldr	r0, [pc, #324]	; (2405f018 <_svfiprintf_r+0x1ec>)
2405eed2:	f7f1 f8b5 	bl	24050040 <memchr>
2405eed6:	9a04      	ldr	r2, [sp, #16]
2405eed8:	b9d8      	cbnz	r0, 2405ef12 <_svfiprintf_r+0xe6>
2405eeda:	06d0      	lsls	r0, r2, #27
2405eedc:	bf44      	itt	mi
2405eede:	2320      	movmi	r3, #32
2405eee0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
2405eee4:	0711      	lsls	r1, r2, #28
2405eee6:	bf44      	itt	mi
2405eee8:	232b      	movmi	r3, #43	; 0x2b
2405eeea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
2405eeee:	f89a 3000 	ldrb.w	r3, [sl]
2405eef2:	2b2a      	cmp	r3, #42	; 0x2a
2405eef4:	d015      	beq.n	2405ef22 <_svfiprintf_r+0xf6>
2405eef6:	9a07      	ldr	r2, [sp, #28]
2405eef8:	4654      	mov	r4, sl
2405eefa:	2000      	movs	r0, #0
2405eefc:	f04f 0c0a 	mov.w	ip, #10
2405ef00:	4621      	mov	r1, r4
2405ef02:	f811 3b01 	ldrb.w	r3, [r1], #1
2405ef06:	3b30      	subs	r3, #48	; 0x30
2405ef08:	2b09      	cmp	r3, #9
2405ef0a:	d94e      	bls.n	2405efaa <_svfiprintf_r+0x17e>
2405ef0c:	b1b0      	cbz	r0, 2405ef3c <_svfiprintf_r+0x110>
2405ef0e:	9207      	str	r2, [sp, #28]
2405ef10:	e014      	b.n	2405ef3c <_svfiprintf_r+0x110>
2405ef12:	eba0 0308 	sub.w	r3, r0, r8
2405ef16:	fa09 f303 	lsl.w	r3, r9, r3
2405ef1a:	4313      	orrs	r3, r2
2405ef1c:	9304      	str	r3, [sp, #16]
2405ef1e:	46a2      	mov	sl, r4
2405ef20:	e7d2      	b.n	2405eec8 <_svfiprintf_r+0x9c>
2405ef22:	9b03      	ldr	r3, [sp, #12]
2405ef24:	1d19      	adds	r1, r3, #4
2405ef26:	681b      	ldr	r3, [r3, #0]
2405ef28:	9103      	str	r1, [sp, #12]
2405ef2a:	2b00      	cmp	r3, #0
2405ef2c:	bfbb      	ittet	lt
2405ef2e:	425b      	neglt	r3, r3
2405ef30:	f042 0202 	orrlt.w	r2, r2, #2
2405ef34:	9307      	strge	r3, [sp, #28]
2405ef36:	9307      	strlt	r3, [sp, #28]
2405ef38:	bfb8      	it	lt
2405ef3a:	9204      	strlt	r2, [sp, #16]
2405ef3c:	7823      	ldrb	r3, [r4, #0]
2405ef3e:	2b2e      	cmp	r3, #46	; 0x2e
2405ef40:	d10c      	bne.n	2405ef5c <_svfiprintf_r+0x130>
2405ef42:	7863      	ldrb	r3, [r4, #1]
2405ef44:	2b2a      	cmp	r3, #42	; 0x2a
2405ef46:	d135      	bne.n	2405efb4 <_svfiprintf_r+0x188>
2405ef48:	9b03      	ldr	r3, [sp, #12]
2405ef4a:	1d1a      	adds	r2, r3, #4
2405ef4c:	681b      	ldr	r3, [r3, #0]
2405ef4e:	9203      	str	r2, [sp, #12]
2405ef50:	2b00      	cmp	r3, #0
2405ef52:	bfb8      	it	lt
2405ef54:	f04f 33ff 	movlt.w	r3, #4294967295
2405ef58:	3402      	adds	r4, #2
2405ef5a:	9305      	str	r3, [sp, #20]
2405ef5c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 2405f028 <_svfiprintf_r+0x1fc>
2405ef60:	7821      	ldrb	r1, [r4, #0]
2405ef62:	2203      	movs	r2, #3
2405ef64:	4650      	mov	r0, sl
2405ef66:	f7f1 f86b 	bl	24050040 <memchr>
2405ef6a:	b140      	cbz	r0, 2405ef7e <_svfiprintf_r+0x152>
2405ef6c:	2340      	movs	r3, #64	; 0x40
2405ef6e:	eba0 000a 	sub.w	r0, r0, sl
2405ef72:	fa03 f000 	lsl.w	r0, r3, r0
2405ef76:	9b04      	ldr	r3, [sp, #16]
2405ef78:	4303      	orrs	r3, r0
2405ef7a:	3401      	adds	r4, #1
2405ef7c:	9304      	str	r3, [sp, #16]
2405ef7e:	f814 1b01 	ldrb.w	r1, [r4], #1
2405ef82:	4826      	ldr	r0, [pc, #152]	; (2405f01c <_svfiprintf_r+0x1f0>)
2405ef84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
2405ef88:	2206      	movs	r2, #6
2405ef8a:	f7f1 f859 	bl	24050040 <memchr>
2405ef8e:	2800      	cmp	r0, #0
2405ef90:	d038      	beq.n	2405f004 <_svfiprintf_r+0x1d8>
2405ef92:	4b23      	ldr	r3, [pc, #140]	; (2405f020 <_svfiprintf_r+0x1f4>)
2405ef94:	bb1b      	cbnz	r3, 2405efde <_svfiprintf_r+0x1b2>
2405ef96:	9b03      	ldr	r3, [sp, #12]
2405ef98:	3307      	adds	r3, #7
2405ef9a:	f023 0307 	bic.w	r3, r3, #7
2405ef9e:	3308      	adds	r3, #8
2405efa0:	9303      	str	r3, [sp, #12]
2405efa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
2405efa4:	4433      	add	r3, r6
2405efa6:	9309      	str	r3, [sp, #36]	; 0x24
2405efa8:	e767      	b.n	2405ee7a <_svfiprintf_r+0x4e>
2405efaa:	fb0c 3202 	mla	r2, ip, r2, r3
2405efae:	460c      	mov	r4, r1
2405efb0:	2001      	movs	r0, #1
2405efb2:	e7a5      	b.n	2405ef00 <_svfiprintf_r+0xd4>
2405efb4:	2300      	movs	r3, #0
2405efb6:	3401      	adds	r4, #1
2405efb8:	9305      	str	r3, [sp, #20]
2405efba:	4619      	mov	r1, r3
2405efbc:	f04f 0c0a 	mov.w	ip, #10
2405efc0:	4620      	mov	r0, r4
2405efc2:	f810 2b01 	ldrb.w	r2, [r0], #1
2405efc6:	3a30      	subs	r2, #48	; 0x30
2405efc8:	2a09      	cmp	r2, #9
2405efca:	d903      	bls.n	2405efd4 <_svfiprintf_r+0x1a8>
2405efcc:	2b00      	cmp	r3, #0
2405efce:	d0c5      	beq.n	2405ef5c <_svfiprintf_r+0x130>
2405efd0:	9105      	str	r1, [sp, #20]
2405efd2:	e7c3      	b.n	2405ef5c <_svfiprintf_r+0x130>
2405efd4:	fb0c 2101 	mla	r1, ip, r1, r2
2405efd8:	4604      	mov	r4, r0
2405efda:	2301      	movs	r3, #1
2405efdc:	e7f0      	b.n	2405efc0 <_svfiprintf_r+0x194>
2405efde:	ab03      	add	r3, sp, #12
2405efe0:	9300      	str	r3, [sp, #0]
2405efe2:	462a      	mov	r2, r5
2405efe4:	4b0f      	ldr	r3, [pc, #60]	; (2405f024 <_svfiprintf_r+0x1f8>)
2405efe6:	a904      	add	r1, sp, #16
2405efe8:	4638      	mov	r0, r7
2405efea:	f3af 8000 	nop.w
2405efee:	1c42      	adds	r2, r0, #1
2405eff0:	4606      	mov	r6, r0
2405eff2:	d1d6      	bne.n	2405efa2 <_svfiprintf_r+0x176>
2405eff4:	89ab      	ldrh	r3, [r5, #12]
2405eff6:	065b      	lsls	r3, r3, #25
2405eff8:	f53f af2c 	bmi.w	2405ee54 <_svfiprintf_r+0x28>
2405effc:	9809      	ldr	r0, [sp, #36]	; 0x24
2405effe:	b01d      	add	sp, #116	; 0x74
2405f000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2405f004:	ab03      	add	r3, sp, #12
2405f006:	9300      	str	r3, [sp, #0]
2405f008:	462a      	mov	r2, r5
2405f00a:	4b06      	ldr	r3, [pc, #24]	; (2405f024 <_svfiprintf_r+0x1f8>)
2405f00c:	a904      	add	r1, sp, #16
2405f00e:	4638      	mov	r0, r7
2405f010:	f000 f9d4 	bl	2405f3bc <_printf_i>
2405f014:	e7eb      	b.n	2405efee <_svfiprintf_r+0x1c2>
2405f016:	bf00      	nop
2405f018:	24060fea 	.word	0x24060fea
2405f01c:	24060ff4 	.word	0x24060ff4
2405f020:	00000000 	.word	0x00000000
2405f024:	2405ed75 	.word	0x2405ed75
2405f028:	24060ff0 	.word	0x24060ff0

2405f02c <__sfputc_r>:
2405f02c:	6893      	ldr	r3, [r2, #8]
2405f02e:	3b01      	subs	r3, #1
2405f030:	2b00      	cmp	r3, #0
2405f032:	b410      	push	{r4}
2405f034:	6093      	str	r3, [r2, #8]
2405f036:	da08      	bge.n	2405f04a <__sfputc_r+0x1e>
2405f038:	6994      	ldr	r4, [r2, #24]
2405f03a:	42a3      	cmp	r3, r4
2405f03c:	db01      	blt.n	2405f042 <__sfputc_r+0x16>
2405f03e:	290a      	cmp	r1, #10
2405f040:	d103      	bne.n	2405f04a <__sfputc_r+0x1e>
2405f042:	f85d 4b04 	ldr.w	r4, [sp], #4
2405f046:	f000 baef 	b.w	2405f628 <__swbuf_r>
2405f04a:	6813      	ldr	r3, [r2, #0]
2405f04c:	1c58      	adds	r0, r3, #1
2405f04e:	6010      	str	r0, [r2, #0]
2405f050:	7019      	strb	r1, [r3, #0]
2405f052:	4608      	mov	r0, r1
2405f054:	f85d 4b04 	ldr.w	r4, [sp], #4
2405f058:	4770      	bx	lr

2405f05a <__sfputs_r>:
2405f05a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2405f05c:	4606      	mov	r6, r0
2405f05e:	460f      	mov	r7, r1
2405f060:	4614      	mov	r4, r2
2405f062:	18d5      	adds	r5, r2, r3
2405f064:	42ac      	cmp	r4, r5
2405f066:	d101      	bne.n	2405f06c <__sfputs_r+0x12>
2405f068:	2000      	movs	r0, #0
2405f06a:	e007      	b.n	2405f07c <__sfputs_r+0x22>
2405f06c:	f814 1b01 	ldrb.w	r1, [r4], #1
2405f070:	463a      	mov	r2, r7
2405f072:	4630      	mov	r0, r6
2405f074:	f7ff ffda 	bl	2405f02c <__sfputc_r>
2405f078:	1c43      	adds	r3, r0, #1
2405f07a:	d1f3      	bne.n	2405f064 <__sfputs_r+0xa>
2405f07c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

2405f080 <_vfiprintf_r>:
2405f080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2405f084:	460d      	mov	r5, r1
2405f086:	b09d      	sub	sp, #116	; 0x74
2405f088:	4614      	mov	r4, r2
2405f08a:	4698      	mov	r8, r3
2405f08c:	4606      	mov	r6, r0
2405f08e:	b118      	cbz	r0, 2405f098 <_vfiprintf_r+0x18>
2405f090:	6983      	ldr	r3, [r0, #24]
2405f092:	b90b      	cbnz	r3, 2405f098 <_vfiprintf_r+0x18>
2405f094:	f000 fcaa 	bl	2405f9ec <__sinit>
2405f098:	4b89      	ldr	r3, [pc, #548]	; (2405f2c0 <_vfiprintf_r+0x240>)
2405f09a:	429d      	cmp	r5, r3
2405f09c:	d11b      	bne.n	2405f0d6 <_vfiprintf_r+0x56>
2405f09e:	6875      	ldr	r5, [r6, #4]
2405f0a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
2405f0a2:	07d9      	lsls	r1, r3, #31
2405f0a4:	d405      	bmi.n	2405f0b2 <_vfiprintf_r+0x32>
2405f0a6:	89ab      	ldrh	r3, [r5, #12]
2405f0a8:	059a      	lsls	r2, r3, #22
2405f0aa:	d402      	bmi.n	2405f0b2 <_vfiprintf_r+0x32>
2405f0ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
2405f0ae:	f000 fd3b 	bl	2405fb28 <__retarget_lock_acquire_recursive>
2405f0b2:	89ab      	ldrh	r3, [r5, #12]
2405f0b4:	071b      	lsls	r3, r3, #28
2405f0b6:	d501      	bpl.n	2405f0bc <_vfiprintf_r+0x3c>
2405f0b8:	692b      	ldr	r3, [r5, #16]
2405f0ba:	b9eb      	cbnz	r3, 2405f0f8 <_vfiprintf_r+0x78>
2405f0bc:	4629      	mov	r1, r5
2405f0be:	4630      	mov	r0, r6
2405f0c0:	f000 fb04 	bl	2405f6cc <__swsetup_r>
2405f0c4:	b1c0      	cbz	r0, 2405f0f8 <_vfiprintf_r+0x78>
2405f0c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
2405f0c8:	07dc      	lsls	r4, r3, #31
2405f0ca:	d50e      	bpl.n	2405f0ea <_vfiprintf_r+0x6a>
2405f0cc:	f04f 30ff 	mov.w	r0, #4294967295
2405f0d0:	b01d      	add	sp, #116	; 0x74
2405f0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2405f0d6:	4b7b      	ldr	r3, [pc, #492]	; (2405f2c4 <_vfiprintf_r+0x244>)
2405f0d8:	429d      	cmp	r5, r3
2405f0da:	d101      	bne.n	2405f0e0 <_vfiprintf_r+0x60>
2405f0dc:	68b5      	ldr	r5, [r6, #8]
2405f0de:	e7df      	b.n	2405f0a0 <_vfiprintf_r+0x20>
2405f0e0:	4b79      	ldr	r3, [pc, #484]	; (2405f2c8 <_vfiprintf_r+0x248>)
2405f0e2:	429d      	cmp	r5, r3
2405f0e4:	bf08      	it	eq
2405f0e6:	68f5      	ldreq	r5, [r6, #12]
2405f0e8:	e7da      	b.n	2405f0a0 <_vfiprintf_r+0x20>
2405f0ea:	89ab      	ldrh	r3, [r5, #12]
2405f0ec:	0598      	lsls	r0, r3, #22
2405f0ee:	d4ed      	bmi.n	2405f0cc <_vfiprintf_r+0x4c>
2405f0f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
2405f0f2:	f000 fd1a 	bl	2405fb2a <__retarget_lock_release_recursive>
2405f0f6:	e7e9      	b.n	2405f0cc <_vfiprintf_r+0x4c>
2405f0f8:	2300      	movs	r3, #0
2405f0fa:	9309      	str	r3, [sp, #36]	; 0x24
2405f0fc:	2320      	movs	r3, #32
2405f0fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
2405f102:	f8cd 800c 	str.w	r8, [sp, #12]
2405f106:	2330      	movs	r3, #48	; 0x30
2405f108:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 2405f2cc <_vfiprintf_r+0x24c>
2405f10c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
2405f110:	f04f 0901 	mov.w	r9, #1
2405f114:	4623      	mov	r3, r4
2405f116:	469a      	mov	sl, r3
2405f118:	f813 2b01 	ldrb.w	r2, [r3], #1
2405f11c:	b10a      	cbz	r2, 2405f122 <_vfiprintf_r+0xa2>
2405f11e:	2a25      	cmp	r2, #37	; 0x25
2405f120:	d1f9      	bne.n	2405f116 <_vfiprintf_r+0x96>
2405f122:	ebba 0b04 	subs.w	fp, sl, r4
2405f126:	d00b      	beq.n	2405f140 <_vfiprintf_r+0xc0>
2405f128:	465b      	mov	r3, fp
2405f12a:	4622      	mov	r2, r4
2405f12c:	4629      	mov	r1, r5
2405f12e:	4630      	mov	r0, r6
2405f130:	f7ff ff93 	bl	2405f05a <__sfputs_r>
2405f134:	3001      	adds	r0, #1
2405f136:	f000 80aa 	beq.w	2405f28e <_vfiprintf_r+0x20e>
2405f13a:	9a09      	ldr	r2, [sp, #36]	; 0x24
2405f13c:	445a      	add	r2, fp
2405f13e:	9209      	str	r2, [sp, #36]	; 0x24
2405f140:	f89a 3000 	ldrb.w	r3, [sl]
2405f144:	2b00      	cmp	r3, #0
2405f146:	f000 80a2 	beq.w	2405f28e <_vfiprintf_r+0x20e>
2405f14a:	2300      	movs	r3, #0
2405f14c:	f04f 32ff 	mov.w	r2, #4294967295
2405f150:	e9cd 2305 	strd	r2, r3, [sp, #20]
2405f154:	f10a 0a01 	add.w	sl, sl, #1
2405f158:	9304      	str	r3, [sp, #16]
2405f15a:	9307      	str	r3, [sp, #28]
2405f15c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
2405f160:	931a      	str	r3, [sp, #104]	; 0x68
2405f162:	4654      	mov	r4, sl
2405f164:	2205      	movs	r2, #5
2405f166:	f814 1b01 	ldrb.w	r1, [r4], #1
2405f16a:	4858      	ldr	r0, [pc, #352]	; (2405f2cc <_vfiprintf_r+0x24c>)
2405f16c:	f7f0 ff68 	bl	24050040 <memchr>
2405f170:	9a04      	ldr	r2, [sp, #16]
2405f172:	b9d8      	cbnz	r0, 2405f1ac <_vfiprintf_r+0x12c>
2405f174:	06d1      	lsls	r1, r2, #27
2405f176:	bf44      	itt	mi
2405f178:	2320      	movmi	r3, #32
2405f17a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
2405f17e:	0713      	lsls	r3, r2, #28
2405f180:	bf44      	itt	mi
2405f182:	232b      	movmi	r3, #43	; 0x2b
2405f184:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
2405f188:	f89a 3000 	ldrb.w	r3, [sl]
2405f18c:	2b2a      	cmp	r3, #42	; 0x2a
2405f18e:	d015      	beq.n	2405f1bc <_vfiprintf_r+0x13c>
2405f190:	9a07      	ldr	r2, [sp, #28]
2405f192:	4654      	mov	r4, sl
2405f194:	2000      	movs	r0, #0
2405f196:	f04f 0c0a 	mov.w	ip, #10
2405f19a:	4621      	mov	r1, r4
2405f19c:	f811 3b01 	ldrb.w	r3, [r1], #1
2405f1a0:	3b30      	subs	r3, #48	; 0x30
2405f1a2:	2b09      	cmp	r3, #9
2405f1a4:	d94e      	bls.n	2405f244 <_vfiprintf_r+0x1c4>
2405f1a6:	b1b0      	cbz	r0, 2405f1d6 <_vfiprintf_r+0x156>
2405f1a8:	9207      	str	r2, [sp, #28]
2405f1aa:	e014      	b.n	2405f1d6 <_vfiprintf_r+0x156>
2405f1ac:	eba0 0308 	sub.w	r3, r0, r8
2405f1b0:	fa09 f303 	lsl.w	r3, r9, r3
2405f1b4:	4313      	orrs	r3, r2
2405f1b6:	9304      	str	r3, [sp, #16]
2405f1b8:	46a2      	mov	sl, r4
2405f1ba:	e7d2      	b.n	2405f162 <_vfiprintf_r+0xe2>
2405f1bc:	9b03      	ldr	r3, [sp, #12]
2405f1be:	1d19      	adds	r1, r3, #4
2405f1c0:	681b      	ldr	r3, [r3, #0]
2405f1c2:	9103      	str	r1, [sp, #12]
2405f1c4:	2b00      	cmp	r3, #0
2405f1c6:	bfbb      	ittet	lt
2405f1c8:	425b      	neglt	r3, r3
2405f1ca:	f042 0202 	orrlt.w	r2, r2, #2
2405f1ce:	9307      	strge	r3, [sp, #28]
2405f1d0:	9307      	strlt	r3, [sp, #28]
2405f1d2:	bfb8      	it	lt
2405f1d4:	9204      	strlt	r2, [sp, #16]
2405f1d6:	7823      	ldrb	r3, [r4, #0]
2405f1d8:	2b2e      	cmp	r3, #46	; 0x2e
2405f1da:	d10c      	bne.n	2405f1f6 <_vfiprintf_r+0x176>
2405f1dc:	7863      	ldrb	r3, [r4, #1]
2405f1de:	2b2a      	cmp	r3, #42	; 0x2a
2405f1e0:	d135      	bne.n	2405f24e <_vfiprintf_r+0x1ce>
2405f1e2:	9b03      	ldr	r3, [sp, #12]
2405f1e4:	1d1a      	adds	r2, r3, #4
2405f1e6:	681b      	ldr	r3, [r3, #0]
2405f1e8:	9203      	str	r2, [sp, #12]
2405f1ea:	2b00      	cmp	r3, #0
2405f1ec:	bfb8      	it	lt
2405f1ee:	f04f 33ff 	movlt.w	r3, #4294967295
2405f1f2:	3402      	adds	r4, #2
2405f1f4:	9305      	str	r3, [sp, #20]
2405f1f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 2405f2dc <_vfiprintf_r+0x25c>
2405f1fa:	7821      	ldrb	r1, [r4, #0]
2405f1fc:	2203      	movs	r2, #3
2405f1fe:	4650      	mov	r0, sl
2405f200:	f7f0 ff1e 	bl	24050040 <memchr>
2405f204:	b140      	cbz	r0, 2405f218 <_vfiprintf_r+0x198>
2405f206:	2340      	movs	r3, #64	; 0x40
2405f208:	eba0 000a 	sub.w	r0, r0, sl
2405f20c:	fa03 f000 	lsl.w	r0, r3, r0
2405f210:	9b04      	ldr	r3, [sp, #16]
2405f212:	4303      	orrs	r3, r0
2405f214:	3401      	adds	r4, #1
2405f216:	9304      	str	r3, [sp, #16]
2405f218:	f814 1b01 	ldrb.w	r1, [r4], #1
2405f21c:	482c      	ldr	r0, [pc, #176]	; (2405f2d0 <_vfiprintf_r+0x250>)
2405f21e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
2405f222:	2206      	movs	r2, #6
2405f224:	f7f0 ff0c 	bl	24050040 <memchr>
2405f228:	2800      	cmp	r0, #0
2405f22a:	d03f      	beq.n	2405f2ac <_vfiprintf_r+0x22c>
2405f22c:	4b29      	ldr	r3, [pc, #164]	; (2405f2d4 <_vfiprintf_r+0x254>)
2405f22e:	bb1b      	cbnz	r3, 2405f278 <_vfiprintf_r+0x1f8>
2405f230:	9b03      	ldr	r3, [sp, #12]
2405f232:	3307      	adds	r3, #7
2405f234:	f023 0307 	bic.w	r3, r3, #7
2405f238:	3308      	adds	r3, #8
2405f23a:	9303      	str	r3, [sp, #12]
2405f23c:	9b09      	ldr	r3, [sp, #36]	; 0x24
2405f23e:	443b      	add	r3, r7
2405f240:	9309      	str	r3, [sp, #36]	; 0x24
2405f242:	e767      	b.n	2405f114 <_vfiprintf_r+0x94>
2405f244:	fb0c 3202 	mla	r2, ip, r2, r3
2405f248:	460c      	mov	r4, r1
2405f24a:	2001      	movs	r0, #1
2405f24c:	e7a5      	b.n	2405f19a <_vfiprintf_r+0x11a>
2405f24e:	2300      	movs	r3, #0
2405f250:	3401      	adds	r4, #1
2405f252:	9305      	str	r3, [sp, #20]
2405f254:	4619      	mov	r1, r3
2405f256:	f04f 0c0a 	mov.w	ip, #10
2405f25a:	4620      	mov	r0, r4
2405f25c:	f810 2b01 	ldrb.w	r2, [r0], #1
2405f260:	3a30      	subs	r2, #48	; 0x30
2405f262:	2a09      	cmp	r2, #9
2405f264:	d903      	bls.n	2405f26e <_vfiprintf_r+0x1ee>
2405f266:	2b00      	cmp	r3, #0
2405f268:	d0c5      	beq.n	2405f1f6 <_vfiprintf_r+0x176>
2405f26a:	9105      	str	r1, [sp, #20]
2405f26c:	e7c3      	b.n	2405f1f6 <_vfiprintf_r+0x176>
2405f26e:	fb0c 2101 	mla	r1, ip, r1, r2
2405f272:	4604      	mov	r4, r0
2405f274:	2301      	movs	r3, #1
2405f276:	e7f0      	b.n	2405f25a <_vfiprintf_r+0x1da>
2405f278:	ab03      	add	r3, sp, #12
2405f27a:	9300      	str	r3, [sp, #0]
2405f27c:	462a      	mov	r2, r5
2405f27e:	4b16      	ldr	r3, [pc, #88]	; (2405f2d8 <_vfiprintf_r+0x258>)
2405f280:	a904      	add	r1, sp, #16
2405f282:	4630      	mov	r0, r6
2405f284:	f3af 8000 	nop.w
2405f288:	4607      	mov	r7, r0
2405f28a:	1c78      	adds	r0, r7, #1
2405f28c:	d1d6      	bne.n	2405f23c <_vfiprintf_r+0x1bc>
2405f28e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
2405f290:	07d9      	lsls	r1, r3, #31
2405f292:	d405      	bmi.n	2405f2a0 <_vfiprintf_r+0x220>
2405f294:	89ab      	ldrh	r3, [r5, #12]
2405f296:	059a      	lsls	r2, r3, #22
2405f298:	d402      	bmi.n	2405f2a0 <_vfiprintf_r+0x220>
2405f29a:	6da8      	ldr	r0, [r5, #88]	; 0x58
2405f29c:	f000 fc45 	bl	2405fb2a <__retarget_lock_release_recursive>
2405f2a0:	89ab      	ldrh	r3, [r5, #12]
2405f2a2:	065b      	lsls	r3, r3, #25
2405f2a4:	f53f af12 	bmi.w	2405f0cc <_vfiprintf_r+0x4c>
2405f2a8:	9809      	ldr	r0, [sp, #36]	; 0x24
2405f2aa:	e711      	b.n	2405f0d0 <_vfiprintf_r+0x50>
2405f2ac:	ab03      	add	r3, sp, #12
2405f2ae:	9300      	str	r3, [sp, #0]
2405f2b0:	462a      	mov	r2, r5
2405f2b2:	4b09      	ldr	r3, [pc, #36]	; (2405f2d8 <_vfiprintf_r+0x258>)
2405f2b4:	a904      	add	r1, sp, #16
2405f2b6:	4630      	mov	r0, r6
2405f2b8:	f000 f880 	bl	2405f3bc <_printf_i>
2405f2bc:	e7e4      	b.n	2405f288 <_vfiprintf_r+0x208>
2405f2be:	bf00      	nop
2405f2c0:	24061040 	.word	0x24061040
2405f2c4:	24061060 	.word	0x24061060
2405f2c8:	24061020 	.word	0x24061020
2405f2cc:	24060fea 	.word	0x24060fea
2405f2d0:	24060ff4 	.word	0x24060ff4
2405f2d4:	00000000 	.word	0x00000000
2405f2d8:	2405f05b 	.word	0x2405f05b
2405f2dc:	24060ff0 	.word	0x24060ff0

2405f2e0 <_printf_common>:
2405f2e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2405f2e4:	4616      	mov	r6, r2
2405f2e6:	4699      	mov	r9, r3
2405f2e8:	688a      	ldr	r2, [r1, #8]
2405f2ea:	690b      	ldr	r3, [r1, #16]
2405f2ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
2405f2f0:	4293      	cmp	r3, r2
2405f2f2:	bfb8      	it	lt
2405f2f4:	4613      	movlt	r3, r2
2405f2f6:	6033      	str	r3, [r6, #0]
2405f2f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
2405f2fc:	4607      	mov	r7, r0
2405f2fe:	460c      	mov	r4, r1
2405f300:	b10a      	cbz	r2, 2405f306 <_printf_common+0x26>
2405f302:	3301      	adds	r3, #1
2405f304:	6033      	str	r3, [r6, #0]
2405f306:	6823      	ldr	r3, [r4, #0]
2405f308:	0699      	lsls	r1, r3, #26
2405f30a:	bf42      	ittt	mi
2405f30c:	6833      	ldrmi	r3, [r6, #0]
2405f30e:	3302      	addmi	r3, #2
2405f310:	6033      	strmi	r3, [r6, #0]
2405f312:	6825      	ldr	r5, [r4, #0]
2405f314:	f015 0506 	ands.w	r5, r5, #6
2405f318:	d106      	bne.n	2405f328 <_printf_common+0x48>
2405f31a:	f104 0a19 	add.w	sl, r4, #25
2405f31e:	68e3      	ldr	r3, [r4, #12]
2405f320:	6832      	ldr	r2, [r6, #0]
2405f322:	1a9b      	subs	r3, r3, r2
2405f324:	42ab      	cmp	r3, r5
2405f326:	dc26      	bgt.n	2405f376 <_printf_common+0x96>
2405f328:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
2405f32c:	1e13      	subs	r3, r2, #0
2405f32e:	6822      	ldr	r2, [r4, #0]
2405f330:	bf18      	it	ne
2405f332:	2301      	movne	r3, #1
2405f334:	0692      	lsls	r2, r2, #26
2405f336:	d42b      	bmi.n	2405f390 <_printf_common+0xb0>
2405f338:	f104 0243 	add.w	r2, r4, #67	; 0x43
2405f33c:	4649      	mov	r1, r9
2405f33e:	4638      	mov	r0, r7
2405f340:	47c0      	blx	r8
2405f342:	3001      	adds	r0, #1
2405f344:	d01e      	beq.n	2405f384 <_printf_common+0xa4>
2405f346:	6823      	ldr	r3, [r4, #0]
2405f348:	68e5      	ldr	r5, [r4, #12]
2405f34a:	6832      	ldr	r2, [r6, #0]
2405f34c:	f003 0306 	and.w	r3, r3, #6
2405f350:	2b04      	cmp	r3, #4
2405f352:	bf08      	it	eq
2405f354:	1aad      	subeq	r5, r5, r2
2405f356:	68a3      	ldr	r3, [r4, #8]
2405f358:	6922      	ldr	r2, [r4, #16]
2405f35a:	bf0c      	ite	eq
2405f35c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
2405f360:	2500      	movne	r5, #0
2405f362:	4293      	cmp	r3, r2
2405f364:	bfc4      	itt	gt
2405f366:	1a9b      	subgt	r3, r3, r2
2405f368:	18ed      	addgt	r5, r5, r3
2405f36a:	2600      	movs	r6, #0
2405f36c:	341a      	adds	r4, #26
2405f36e:	42b5      	cmp	r5, r6
2405f370:	d11a      	bne.n	2405f3a8 <_printf_common+0xc8>
2405f372:	2000      	movs	r0, #0
2405f374:	e008      	b.n	2405f388 <_printf_common+0xa8>
2405f376:	2301      	movs	r3, #1
2405f378:	4652      	mov	r2, sl
2405f37a:	4649      	mov	r1, r9
2405f37c:	4638      	mov	r0, r7
2405f37e:	47c0      	blx	r8
2405f380:	3001      	adds	r0, #1
2405f382:	d103      	bne.n	2405f38c <_printf_common+0xac>
2405f384:	f04f 30ff 	mov.w	r0, #4294967295
2405f388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2405f38c:	3501      	adds	r5, #1
2405f38e:	e7c6      	b.n	2405f31e <_printf_common+0x3e>
2405f390:	18e1      	adds	r1, r4, r3
2405f392:	1c5a      	adds	r2, r3, #1
2405f394:	2030      	movs	r0, #48	; 0x30
2405f396:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
2405f39a:	4422      	add	r2, r4
2405f39c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
2405f3a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
2405f3a4:	3302      	adds	r3, #2
2405f3a6:	e7c7      	b.n	2405f338 <_printf_common+0x58>
2405f3a8:	2301      	movs	r3, #1
2405f3aa:	4622      	mov	r2, r4
2405f3ac:	4649      	mov	r1, r9
2405f3ae:	4638      	mov	r0, r7
2405f3b0:	47c0      	blx	r8
2405f3b2:	3001      	adds	r0, #1
2405f3b4:	d0e6      	beq.n	2405f384 <_printf_common+0xa4>
2405f3b6:	3601      	adds	r6, #1
2405f3b8:	e7d9      	b.n	2405f36e <_printf_common+0x8e>
	...

2405f3bc <_printf_i>:
2405f3bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
2405f3c0:	460c      	mov	r4, r1
2405f3c2:	4691      	mov	r9, r2
2405f3c4:	7e27      	ldrb	r7, [r4, #24]
2405f3c6:	990c      	ldr	r1, [sp, #48]	; 0x30
2405f3c8:	2f78      	cmp	r7, #120	; 0x78
2405f3ca:	4680      	mov	r8, r0
2405f3cc:	469a      	mov	sl, r3
2405f3ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
2405f3d2:	d807      	bhi.n	2405f3e4 <_printf_i+0x28>
2405f3d4:	2f62      	cmp	r7, #98	; 0x62
2405f3d6:	d80a      	bhi.n	2405f3ee <_printf_i+0x32>
2405f3d8:	2f00      	cmp	r7, #0
2405f3da:	f000 80d8 	beq.w	2405f58e <_printf_i+0x1d2>
2405f3de:	2f58      	cmp	r7, #88	; 0x58
2405f3e0:	f000 80a3 	beq.w	2405f52a <_printf_i+0x16e>
2405f3e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
2405f3e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
2405f3ec:	e03a      	b.n	2405f464 <_printf_i+0xa8>
2405f3ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
2405f3f2:	2b15      	cmp	r3, #21
2405f3f4:	d8f6      	bhi.n	2405f3e4 <_printf_i+0x28>
2405f3f6:	a001      	add	r0, pc, #4	; (adr r0, 2405f3fc <_printf_i+0x40>)
2405f3f8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
2405f3fc:	2405f455 	.word	0x2405f455
2405f400:	2405f469 	.word	0x2405f469
2405f404:	2405f3e5 	.word	0x2405f3e5
2405f408:	2405f3e5 	.word	0x2405f3e5
2405f40c:	2405f3e5 	.word	0x2405f3e5
2405f410:	2405f3e5 	.word	0x2405f3e5
2405f414:	2405f469 	.word	0x2405f469
2405f418:	2405f3e5 	.word	0x2405f3e5
2405f41c:	2405f3e5 	.word	0x2405f3e5
2405f420:	2405f3e5 	.word	0x2405f3e5
2405f424:	2405f3e5 	.word	0x2405f3e5
2405f428:	2405f575 	.word	0x2405f575
2405f42c:	2405f499 	.word	0x2405f499
2405f430:	2405f557 	.word	0x2405f557
2405f434:	2405f3e5 	.word	0x2405f3e5
2405f438:	2405f3e5 	.word	0x2405f3e5
2405f43c:	2405f597 	.word	0x2405f597
2405f440:	2405f3e5 	.word	0x2405f3e5
2405f444:	2405f499 	.word	0x2405f499
2405f448:	2405f3e5 	.word	0x2405f3e5
2405f44c:	2405f3e5 	.word	0x2405f3e5
2405f450:	2405f55f 	.word	0x2405f55f
2405f454:	680b      	ldr	r3, [r1, #0]
2405f456:	1d1a      	adds	r2, r3, #4
2405f458:	681b      	ldr	r3, [r3, #0]
2405f45a:	600a      	str	r2, [r1, #0]
2405f45c:	f104 0642 	add.w	r6, r4, #66	; 0x42
2405f460:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
2405f464:	2301      	movs	r3, #1
2405f466:	e0a3      	b.n	2405f5b0 <_printf_i+0x1f4>
2405f468:	6825      	ldr	r5, [r4, #0]
2405f46a:	6808      	ldr	r0, [r1, #0]
2405f46c:	062e      	lsls	r6, r5, #24
2405f46e:	f100 0304 	add.w	r3, r0, #4
2405f472:	d50a      	bpl.n	2405f48a <_printf_i+0xce>
2405f474:	6805      	ldr	r5, [r0, #0]
2405f476:	600b      	str	r3, [r1, #0]
2405f478:	2d00      	cmp	r5, #0
2405f47a:	da03      	bge.n	2405f484 <_printf_i+0xc8>
2405f47c:	232d      	movs	r3, #45	; 0x2d
2405f47e:	426d      	negs	r5, r5
2405f480:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
2405f484:	485e      	ldr	r0, [pc, #376]	; (2405f600 <_printf_i+0x244>)
2405f486:	230a      	movs	r3, #10
2405f488:	e019      	b.n	2405f4be <_printf_i+0x102>
2405f48a:	f015 0f40 	tst.w	r5, #64	; 0x40
2405f48e:	6805      	ldr	r5, [r0, #0]
2405f490:	600b      	str	r3, [r1, #0]
2405f492:	bf18      	it	ne
2405f494:	b22d      	sxthne	r5, r5
2405f496:	e7ef      	b.n	2405f478 <_printf_i+0xbc>
2405f498:	680b      	ldr	r3, [r1, #0]
2405f49a:	6825      	ldr	r5, [r4, #0]
2405f49c:	1d18      	adds	r0, r3, #4
2405f49e:	6008      	str	r0, [r1, #0]
2405f4a0:	0628      	lsls	r0, r5, #24
2405f4a2:	d501      	bpl.n	2405f4a8 <_printf_i+0xec>
2405f4a4:	681d      	ldr	r5, [r3, #0]
2405f4a6:	e002      	b.n	2405f4ae <_printf_i+0xf2>
2405f4a8:	0669      	lsls	r1, r5, #25
2405f4aa:	d5fb      	bpl.n	2405f4a4 <_printf_i+0xe8>
2405f4ac:	881d      	ldrh	r5, [r3, #0]
2405f4ae:	4854      	ldr	r0, [pc, #336]	; (2405f600 <_printf_i+0x244>)
2405f4b0:	2f6f      	cmp	r7, #111	; 0x6f
2405f4b2:	bf0c      	ite	eq
2405f4b4:	2308      	moveq	r3, #8
2405f4b6:	230a      	movne	r3, #10
2405f4b8:	2100      	movs	r1, #0
2405f4ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
2405f4be:	6866      	ldr	r6, [r4, #4]
2405f4c0:	60a6      	str	r6, [r4, #8]
2405f4c2:	2e00      	cmp	r6, #0
2405f4c4:	bfa2      	ittt	ge
2405f4c6:	6821      	ldrge	r1, [r4, #0]
2405f4c8:	f021 0104 	bicge.w	r1, r1, #4
2405f4cc:	6021      	strge	r1, [r4, #0]
2405f4ce:	b90d      	cbnz	r5, 2405f4d4 <_printf_i+0x118>
2405f4d0:	2e00      	cmp	r6, #0
2405f4d2:	d04d      	beq.n	2405f570 <_printf_i+0x1b4>
2405f4d4:	4616      	mov	r6, r2
2405f4d6:	fbb5 f1f3 	udiv	r1, r5, r3
2405f4da:	fb03 5711 	mls	r7, r3, r1, r5
2405f4de:	5dc7      	ldrb	r7, [r0, r7]
2405f4e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
2405f4e4:	462f      	mov	r7, r5
2405f4e6:	42bb      	cmp	r3, r7
2405f4e8:	460d      	mov	r5, r1
2405f4ea:	d9f4      	bls.n	2405f4d6 <_printf_i+0x11a>
2405f4ec:	2b08      	cmp	r3, #8
2405f4ee:	d10b      	bne.n	2405f508 <_printf_i+0x14c>
2405f4f0:	6823      	ldr	r3, [r4, #0]
2405f4f2:	07df      	lsls	r7, r3, #31
2405f4f4:	d508      	bpl.n	2405f508 <_printf_i+0x14c>
2405f4f6:	6923      	ldr	r3, [r4, #16]
2405f4f8:	6861      	ldr	r1, [r4, #4]
2405f4fa:	4299      	cmp	r1, r3
2405f4fc:	bfde      	ittt	le
2405f4fe:	2330      	movle	r3, #48	; 0x30
2405f500:	f806 3c01 	strble.w	r3, [r6, #-1]
2405f504:	f106 36ff 	addle.w	r6, r6, #4294967295
2405f508:	1b92      	subs	r2, r2, r6
2405f50a:	6122      	str	r2, [r4, #16]
2405f50c:	f8cd a000 	str.w	sl, [sp]
2405f510:	464b      	mov	r3, r9
2405f512:	aa03      	add	r2, sp, #12
2405f514:	4621      	mov	r1, r4
2405f516:	4640      	mov	r0, r8
2405f518:	f7ff fee2 	bl	2405f2e0 <_printf_common>
2405f51c:	3001      	adds	r0, #1
2405f51e:	d14c      	bne.n	2405f5ba <_printf_i+0x1fe>
2405f520:	f04f 30ff 	mov.w	r0, #4294967295
2405f524:	b004      	add	sp, #16
2405f526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2405f52a:	4835      	ldr	r0, [pc, #212]	; (2405f600 <_printf_i+0x244>)
2405f52c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
2405f530:	6823      	ldr	r3, [r4, #0]
2405f532:	680e      	ldr	r6, [r1, #0]
2405f534:	061f      	lsls	r7, r3, #24
2405f536:	f856 5b04 	ldr.w	r5, [r6], #4
2405f53a:	600e      	str	r6, [r1, #0]
2405f53c:	d514      	bpl.n	2405f568 <_printf_i+0x1ac>
2405f53e:	07d9      	lsls	r1, r3, #31
2405f540:	bf44      	itt	mi
2405f542:	f043 0320 	orrmi.w	r3, r3, #32
2405f546:	6023      	strmi	r3, [r4, #0]
2405f548:	b91d      	cbnz	r5, 2405f552 <_printf_i+0x196>
2405f54a:	6823      	ldr	r3, [r4, #0]
2405f54c:	f023 0320 	bic.w	r3, r3, #32
2405f550:	6023      	str	r3, [r4, #0]
2405f552:	2310      	movs	r3, #16
2405f554:	e7b0      	b.n	2405f4b8 <_printf_i+0xfc>
2405f556:	6823      	ldr	r3, [r4, #0]
2405f558:	f043 0320 	orr.w	r3, r3, #32
2405f55c:	6023      	str	r3, [r4, #0]
2405f55e:	2378      	movs	r3, #120	; 0x78
2405f560:	4828      	ldr	r0, [pc, #160]	; (2405f604 <_printf_i+0x248>)
2405f562:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
2405f566:	e7e3      	b.n	2405f530 <_printf_i+0x174>
2405f568:	065e      	lsls	r6, r3, #25
2405f56a:	bf48      	it	mi
2405f56c:	b2ad      	uxthmi	r5, r5
2405f56e:	e7e6      	b.n	2405f53e <_printf_i+0x182>
2405f570:	4616      	mov	r6, r2
2405f572:	e7bb      	b.n	2405f4ec <_printf_i+0x130>
2405f574:	680b      	ldr	r3, [r1, #0]
2405f576:	6826      	ldr	r6, [r4, #0]
2405f578:	6960      	ldr	r0, [r4, #20]
2405f57a:	1d1d      	adds	r5, r3, #4
2405f57c:	600d      	str	r5, [r1, #0]
2405f57e:	0635      	lsls	r5, r6, #24
2405f580:	681b      	ldr	r3, [r3, #0]
2405f582:	d501      	bpl.n	2405f588 <_printf_i+0x1cc>
2405f584:	6018      	str	r0, [r3, #0]
2405f586:	e002      	b.n	2405f58e <_printf_i+0x1d2>
2405f588:	0671      	lsls	r1, r6, #25
2405f58a:	d5fb      	bpl.n	2405f584 <_printf_i+0x1c8>
2405f58c:	8018      	strh	r0, [r3, #0]
2405f58e:	2300      	movs	r3, #0
2405f590:	6123      	str	r3, [r4, #16]
2405f592:	4616      	mov	r6, r2
2405f594:	e7ba      	b.n	2405f50c <_printf_i+0x150>
2405f596:	680b      	ldr	r3, [r1, #0]
2405f598:	1d1a      	adds	r2, r3, #4
2405f59a:	600a      	str	r2, [r1, #0]
2405f59c:	681e      	ldr	r6, [r3, #0]
2405f59e:	6862      	ldr	r2, [r4, #4]
2405f5a0:	2100      	movs	r1, #0
2405f5a2:	4630      	mov	r0, r6
2405f5a4:	f7f0 fd4c 	bl	24050040 <memchr>
2405f5a8:	b108      	cbz	r0, 2405f5ae <_printf_i+0x1f2>
2405f5aa:	1b80      	subs	r0, r0, r6
2405f5ac:	6060      	str	r0, [r4, #4]
2405f5ae:	6863      	ldr	r3, [r4, #4]
2405f5b0:	6123      	str	r3, [r4, #16]
2405f5b2:	2300      	movs	r3, #0
2405f5b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
2405f5b8:	e7a8      	b.n	2405f50c <_printf_i+0x150>
2405f5ba:	6923      	ldr	r3, [r4, #16]
2405f5bc:	4632      	mov	r2, r6
2405f5be:	4649      	mov	r1, r9
2405f5c0:	4640      	mov	r0, r8
2405f5c2:	47d0      	blx	sl
2405f5c4:	3001      	adds	r0, #1
2405f5c6:	d0ab      	beq.n	2405f520 <_printf_i+0x164>
2405f5c8:	6823      	ldr	r3, [r4, #0]
2405f5ca:	079b      	lsls	r3, r3, #30
2405f5cc:	d413      	bmi.n	2405f5f6 <_printf_i+0x23a>
2405f5ce:	68e0      	ldr	r0, [r4, #12]
2405f5d0:	9b03      	ldr	r3, [sp, #12]
2405f5d2:	4298      	cmp	r0, r3
2405f5d4:	bfb8      	it	lt
2405f5d6:	4618      	movlt	r0, r3
2405f5d8:	e7a4      	b.n	2405f524 <_printf_i+0x168>
2405f5da:	2301      	movs	r3, #1
2405f5dc:	4632      	mov	r2, r6
2405f5de:	4649      	mov	r1, r9
2405f5e0:	4640      	mov	r0, r8
2405f5e2:	47d0      	blx	sl
2405f5e4:	3001      	adds	r0, #1
2405f5e6:	d09b      	beq.n	2405f520 <_printf_i+0x164>
2405f5e8:	3501      	adds	r5, #1
2405f5ea:	68e3      	ldr	r3, [r4, #12]
2405f5ec:	9903      	ldr	r1, [sp, #12]
2405f5ee:	1a5b      	subs	r3, r3, r1
2405f5f0:	42ab      	cmp	r3, r5
2405f5f2:	dcf2      	bgt.n	2405f5da <_printf_i+0x21e>
2405f5f4:	e7eb      	b.n	2405f5ce <_printf_i+0x212>
2405f5f6:	2500      	movs	r5, #0
2405f5f8:	f104 0619 	add.w	r6, r4, #25
2405f5fc:	e7f5      	b.n	2405f5ea <_printf_i+0x22e>
2405f5fe:	bf00      	nop
2405f600:	24060ffb 	.word	0x24060ffb
2405f604:	2406100c 	.word	0x2406100c

2405f608 <_sbrk_r>:
2405f608:	b538      	push	{r3, r4, r5, lr}
2405f60a:	4d06      	ldr	r5, [pc, #24]	; (2405f624 <_sbrk_r+0x1c>)
2405f60c:	2300      	movs	r3, #0
2405f60e:	4604      	mov	r4, r0
2405f610:	4608      	mov	r0, r1
2405f612:	602b      	str	r3, [r5, #0]
2405f614:	f7f3 fa24 	bl	24052a60 <_sbrk>
2405f618:	1c43      	adds	r3, r0, #1
2405f61a:	d102      	bne.n	2405f622 <_sbrk_r+0x1a>
2405f61c:	682b      	ldr	r3, [r5, #0]
2405f61e:	b103      	cbz	r3, 2405f622 <_sbrk_r+0x1a>
2405f620:	6023      	str	r3, [r4, #0]
2405f622:	bd38      	pop	{r3, r4, r5, pc}
2405f624:	200005e8 	.word	0x200005e8

2405f628 <__swbuf_r>:
2405f628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2405f62a:	460e      	mov	r6, r1
2405f62c:	4614      	mov	r4, r2
2405f62e:	4605      	mov	r5, r0
2405f630:	b118      	cbz	r0, 2405f63a <__swbuf_r+0x12>
2405f632:	6983      	ldr	r3, [r0, #24]
2405f634:	b90b      	cbnz	r3, 2405f63a <__swbuf_r+0x12>
2405f636:	f000 f9d9 	bl	2405f9ec <__sinit>
2405f63a:	4b21      	ldr	r3, [pc, #132]	; (2405f6c0 <__swbuf_r+0x98>)
2405f63c:	429c      	cmp	r4, r3
2405f63e:	d12b      	bne.n	2405f698 <__swbuf_r+0x70>
2405f640:	686c      	ldr	r4, [r5, #4]
2405f642:	69a3      	ldr	r3, [r4, #24]
2405f644:	60a3      	str	r3, [r4, #8]
2405f646:	89a3      	ldrh	r3, [r4, #12]
2405f648:	071a      	lsls	r2, r3, #28
2405f64a:	d52f      	bpl.n	2405f6ac <__swbuf_r+0x84>
2405f64c:	6923      	ldr	r3, [r4, #16]
2405f64e:	b36b      	cbz	r3, 2405f6ac <__swbuf_r+0x84>
2405f650:	6923      	ldr	r3, [r4, #16]
2405f652:	6820      	ldr	r0, [r4, #0]
2405f654:	1ac0      	subs	r0, r0, r3
2405f656:	6963      	ldr	r3, [r4, #20]
2405f658:	b2f6      	uxtb	r6, r6
2405f65a:	4283      	cmp	r3, r0
2405f65c:	4637      	mov	r7, r6
2405f65e:	dc04      	bgt.n	2405f66a <__swbuf_r+0x42>
2405f660:	4621      	mov	r1, r4
2405f662:	4628      	mov	r0, r5
2405f664:	f000 f92e 	bl	2405f8c4 <_fflush_r>
2405f668:	bb30      	cbnz	r0, 2405f6b8 <__swbuf_r+0x90>
2405f66a:	68a3      	ldr	r3, [r4, #8]
2405f66c:	3b01      	subs	r3, #1
2405f66e:	60a3      	str	r3, [r4, #8]
2405f670:	6823      	ldr	r3, [r4, #0]
2405f672:	1c5a      	adds	r2, r3, #1
2405f674:	6022      	str	r2, [r4, #0]
2405f676:	701e      	strb	r6, [r3, #0]
2405f678:	6963      	ldr	r3, [r4, #20]
2405f67a:	3001      	adds	r0, #1
2405f67c:	4283      	cmp	r3, r0
2405f67e:	d004      	beq.n	2405f68a <__swbuf_r+0x62>
2405f680:	89a3      	ldrh	r3, [r4, #12]
2405f682:	07db      	lsls	r3, r3, #31
2405f684:	d506      	bpl.n	2405f694 <__swbuf_r+0x6c>
2405f686:	2e0a      	cmp	r6, #10
2405f688:	d104      	bne.n	2405f694 <__swbuf_r+0x6c>
2405f68a:	4621      	mov	r1, r4
2405f68c:	4628      	mov	r0, r5
2405f68e:	f000 f919 	bl	2405f8c4 <_fflush_r>
2405f692:	b988      	cbnz	r0, 2405f6b8 <__swbuf_r+0x90>
2405f694:	4638      	mov	r0, r7
2405f696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2405f698:	4b0a      	ldr	r3, [pc, #40]	; (2405f6c4 <__swbuf_r+0x9c>)
2405f69a:	429c      	cmp	r4, r3
2405f69c:	d101      	bne.n	2405f6a2 <__swbuf_r+0x7a>
2405f69e:	68ac      	ldr	r4, [r5, #8]
2405f6a0:	e7cf      	b.n	2405f642 <__swbuf_r+0x1a>
2405f6a2:	4b09      	ldr	r3, [pc, #36]	; (2405f6c8 <__swbuf_r+0xa0>)
2405f6a4:	429c      	cmp	r4, r3
2405f6a6:	bf08      	it	eq
2405f6a8:	68ec      	ldreq	r4, [r5, #12]
2405f6aa:	e7ca      	b.n	2405f642 <__swbuf_r+0x1a>
2405f6ac:	4621      	mov	r1, r4
2405f6ae:	4628      	mov	r0, r5
2405f6b0:	f000 f80c 	bl	2405f6cc <__swsetup_r>
2405f6b4:	2800      	cmp	r0, #0
2405f6b6:	d0cb      	beq.n	2405f650 <__swbuf_r+0x28>
2405f6b8:	f04f 37ff 	mov.w	r7, #4294967295
2405f6bc:	e7ea      	b.n	2405f694 <__swbuf_r+0x6c>
2405f6be:	bf00      	nop
2405f6c0:	24061040 	.word	0x24061040
2405f6c4:	24061060 	.word	0x24061060
2405f6c8:	24061020 	.word	0x24061020

2405f6cc <__swsetup_r>:
2405f6cc:	4b32      	ldr	r3, [pc, #200]	; (2405f798 <__swsetup_r+0xcc>)
2405f6ce:	b570      	push	{r4, r5, r6, lr}
2405f6d0:	681d      	ldr	r5, [r3, #0]
2405f6d2:	4606      	mov	r6, r0
2405f6d4:	460c      	mov	r4, r1
2405f6d6:	b125      	cbz	r5, 2405f6e2 <__swsetup_r+0x16>
2405f6d8:	69ab      	ldr	r3, [r5, #24]
2405f6da:	b913      	cbnz	r3, 2405f6e2 <__swsetup_r+0x16>
2405f6dc:	4628      	mov	r0, r5
2405f6de:	f000 f985 	bl	2405f9ec <__sinit>
2405f6e2:	4b2e      	ldr	r3, [pc, #184]	; (2405f79c <__swsetup_r+0xd0>)
2405f6e4:	429c      	cmp	r4, r3
2405f6e6:	d10f      	bne.n	2405f708 <__swsetup_r+0x3c>
2405f6e8:	686c      	ldr	r4, [r5, #4]
2405f6ea:	89a3      	ldrh	r3, [r4, #12]
2405f6ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
2405f6f0:	0719      	lsls	r1, r3, #28
2405f6f2:	d42c      	bmi.n	2405f74e <__swsetup_r+0x82>
2405f6f4:	06dd      	lsls	r5, r3, #27
2405f6f6:	d411      	bmi.n	2405f71c <__swsetup_r+0x50>
2405f6f8:	2309      	movs	r3, #9
2405f6fa:	6033      	str	r3, [r6, #0]
2405f6fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
2405f700:	81a3      	strh	r3, [r4, #12]
2405f702:	f04f 30ff 	mov.w	r0, #4294967295
2405f706:	e03e      	b.n	2405f786 <__swsetup_r+0xba>
2405f708:	4b25      	ldr	r3, [pc, #148]	; (2405f7a0 <__swsetup_r+0xd4>)
2405f70a:	429c      	cmp	r4, r3
2405f70c:	d101      	bne.n	2405f712 <__swsetup_r+0x46>
2405f70e:	68ac      	ldr	r4, [r5, #8]
2405f710:	e7eb      	b.n	2405f6ea <__swsetup_r+0x1e>
2405f712:	4b24      	ldr	r3, [pc, #144]	; (2405f7a4 <__swsetup_r+0xd8>)
2405f714:	429c      	cmp	r4, r3
2405f716:	bf08      	it	eq
2405f718:	68ec      	ldreq	r4, [r5, #12]
2405f71a:	e7e6      	b.n	2405f6ea <__swsetup_r+0x1e>
2405f71c:	0758      	lsls	r0, r3, #29
2405f71e:	d512      	bpl.n	2405f746 <__swsetup_r+0x7a>
2405f720:	6b61      	ldr	r1, [r4, #52]	; 0x34
2405f722:	b141      	cbz	r1, 2405f736 <__swsetup_r+0x6a>
2405f724:	f104 0344 	add.w	r3, r4, #68	; 0x44
2405f728:	4299      	cmp	r1, r3
2405f72a:	d002      	beq.n	2405f732 <__swsetup_r+0x66>
2405f72c:	4630      	mov	r0, r6
2405f72e:	f7ff fa77 	bl	2405ec20 <_free_r>
2405f732:	2300      	movs	r3, #0
2405f734:	6363      	str	r3, [r4, #52]	; 0x34
2405f736:	89a3      	ldrh	r3, [r4, #12]
2405f738:	f023 0324 	bic.w	r3, r3, #36	; 0x24
2405f73c:	81a3      	strh	r3, [r4, #12]
2405f73e:	2300      	movs	r3, #0
2405f740:	6063      	str	r3, [r4, #4]
2405f742:	6923      	ldr	r3, [r4, #16]
2405f744:	6023      	str	r3, [r4, #0]
2405f746:	89a3      	ldrh	r3, [r4, #12]
2405f748:	f043 0308 	orr.w	r3, r3, #8
2405f74c:	81a3      	strh	r3, [r4, #12]
2405f74e:	6923      	ldr	r3, [r4, #16]
2405f750:	b94b      	cbnz	r3, 2405f766 <__swsetup_r+0x9a>
2405f752:	89a3      	ldrh	r3, [r4, #12]
2405f754:	f403 7320 	and.w	r3, r3, #640	; 0x280
2405f758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
2405f75c:	d003      	beq.n	2405f766 <__swsetup_r+0x9a>
2405f75e:	4621      	mov	r1, r4
2405f760:	4630      	mov	r0, r6
2405f762:	f000 fa07 	bl	2405fb74 <__smakebuf_r>
2405f766:	89a0      	ldrh	r0, [r4, #12]
2405f768:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
2405f76c:	f010 0301 	ands.w	r3, r0, #1
2405f770:	d00a      	beq.n	2405f788 <__swsetup_r+0xbc>
2405f772:	2300      	movs	r3, #0
2405f774:	60a3      	str	r3, [r4, #8]
2405f776:	6963      	ldr	r3, [r4, #20]
2405f778:	425b      	negs	r3, r3
2405f77a:	61a3      	str	r3, [r4, #24]
2405f77c:	6923      	ldr	r3, [r4, #16]
2405f77e:	b943      	cbnz	r3, 2405f792 <__swsetup_r+0xc6>
2405f780:	f010 0080 	ands.w	r0, r0, #128	; 0x80
2405f784:	d1ba      	bne.n	2405f6fc <__swsetup_r+0x30>
2405f786:	bd70      	pop	{r4, r5, r6, pc}
2405f788:	0781      	lsls	r1, r0, #30
2405f78a:	bf58      	it	pl
2405f78c:	6963      	ldrpl	r3, [r4, #20]
2405f78e:	60a3      	str	r3, [r4, #8]
2405f790:	e7f4      	b.n	2405f77c <__swsetup_r+0xb0>
2405f792:	2000      	movs	r0, #0
2405f794:	e7f7      	b.n	2405f786 <__swsetup_r+0xba>
2405f796:	bf00      	nop
2405f798:	20000040 	.word	0x20000040
2405f79c:	24061040 	.word	0x24061040
2405f7a0:	24061060 	.word	0x24061060
2405f7a4:	24061020 	.word	0x24061020

2405f7a8 <abort>:
2405f7a8:	b508      	push	{r3, lr}
2405f7aa:	2006      	movs	r0, #6
2405f7ac:	f000 fa96 	bl	2405fcdc <raise>
2405f7b0:	2001      	movs	r0, #1
2405f7b2:	f7f3 f8dd 	bl	24052970 <_exit>
	...

2405f7b8 <__sflush_r>:
2405f7b8:	898a      	ldrh	r2, [r1, #12]
2405f7ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2405f7be:	4605      	mov	r5, r0
2405f7c0:	0710      	lsls	r0, r2, #28
2405f7c2:	460c      	mov	r4, r1
2405f7c4:	d458      	bmi.n	2405f878 <__sflush_r+0xc0>
2405f7c6:	684b      	ldr	r3, [r1, #4]
2405f7c8:	2b00      	cmp	r3, #0
2405f7ca:	dc05      	bgt.n	2405f7d8 <__sflush_r+0x20>
2405f7cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
2405f7ce:	2b00      	cmp	r3, #0
2405f7d0:	dc02      	bgt.n	2405f7d8 <__sflush_r+0x20>
2405f7d2:	2000      	movs	r0, #0
2405f7d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
2405f7d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
2405f7da:	2e00      	cmp	r6, #0
2405f7dc:	d0f9      	beq.n	2405f7d2 <__sflush_r+0x1a>
2405f7de:	2300      	movs	r3, #0
2405f7e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
2405f7e4:	682f      	ldr	r7, [r5, #0]
2405f7e6:	602b      	str	r3, [r5, #0]
2405f7e8:	d032      	beq.n	2405f850 <__sflush_r+0x98>
2405f7ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
2405f7ec:	89a3      	ldrh	r3, [r4, #12]
2405f7ee:	075a      	lsls	r2, r3, #29
2405f7f0:	d505      	bpl.n	2405f7fe <__sflush_r+0x46>
2405f7f2:	6863      	ldr	r3, [r4, #4]
2405f7f4:	1ac0      	subs	r0, r0, r3
2405f7f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
2405f7f8:	b10b      	cbz	r3, 2405f7fe <__sflush_r+0x46>
2405f7fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
2405f7fc:	1ac0      	subs	r0, r0, r3
2405f7fe:	2300      	movs	r3, #0
2405f800:	4602      	mov	r2, r0
2405f802:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
2405f804:	6a21      	ldr	r1, [r4, #32]
2405f806:	4628      	mov	r0, r5
2405f808:	47b0      	blx	r6
2405f80a:	1c43      	adds	r3, r0, #1
2405f80c:	89a3      	ldrh	r3, [r4, #12]
2405f80e:	d106      	bne.n	2405f81e <__sflush_r+0x66>
2405f810:	6829      	ldr	r1, [r5, #0]
2405f812:	291d      	cmp	r1, #29
2405f814:	d82c      	bhi.n	2405f870 <__sflush_r+0xb8>
2405f816:	4a2a      	ldr	r2, [pc, #168]	; (2405f8c0 <__sflush_r+0x108>)
2405f818:	40ca      	lsrs	r2, r1
2405f81a:	07d6      	lsls	r6, r2, #31
2405f81c:	d528      	bpl.n	2405f870 <__sflush_r+0xb8>
2405f81e:	2200      	movs	r2, #0
2405f820:	6062      	str	r2, [r4, #4]
2405f822:	04d9      	lsls	r1, r3, #19
2405f824:	6922      	ldr	r2, [r4, #16]
2405f826:	6022      	str	r2, [r4, #0]
2405f828:	d504      	bpl.n	2405f834 <__sflush_r+0x7c>
2405f82a:	1c42      	adds	r2, r0, #1
2405f82c:	d101      	bne.n	2405f832 <__sflush_r+0x7a>
2405f82e:	682b      	ldr	r3, [r5, #0]
2405f830:	b903      	cbnz	r3, 2405f834 <__sflush_r+0x7c>
2405f832:	6560      	str	r0, [r4, #84]	; 0x54
2405f834:	6b61      	ldr	r1, [r4, #52]	; 0x34
2405f836:	602f      	str	r7, [r5, #0]
2405f838:	2900      	cmp	r1, #0
2405f83a:	d0ca      	beq.n	2405f7d2 <__sflush_r+0x1a>
2405f83c:	f104 0344 	add.w	r3, r4, #68	; 0x44
2405f840:	4299      	cmp	r1, r3
2405f842:	d002      	beq.n	2405f84a <__sflush_r+0x92>
2405f844:	4628      	mov	r0, r5
2405f846:	f7ff f9eb 	bl	2405ec20 <_free_r>
2405f84a:	2000      	movs	r0, #0
2405f84c:	6360      	str	r0, [r4, #52]	; 0x34
2405f84e:	e7c1      	b.n	2405f7d4 <__sflush_r+0x1c>
2405f850:	6a21      	ldr	r1, [r4, #32]
2405f852:	2301      	movs	r3, #1
2405f854:	4628      	mov	r0, r5
2405f856:	47b0      	blx	r6
2405f858:	1c41      	adds	r1, r0, #1
2405f85a:	d1c7      	bne.n	2405f7ec <__sflush_r+0x34>
2405f85c:	682b      	ldr	r3, [r5, #0]
2405f85e:	2b00      	cmp	r3, #0
2405f860:	d0c4      	beq.n	2405f7ec <__sflush_r+0x34>
2405f862:	2b1d      	cmp	r3, #29
2405f864:	d001      	beq.n	2405f86a <__sflush_r+0xb2>
2405f866:	2b16      	cmp	r3, #22
2405f868:	d101      	bne.n	2405f86e <__sflush_r+0xb6>
2405f86a:	602f      	str	r7, [r5, #0]
2405f86c:	e7b1      	b.n	2405f7d2 <__sflush_r+0x1a>
2405f86e:	89a3      	ldrh	r3, [r4, #12]
2405f870:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2405f874:	81a3      	strh	r3, [r4, #12]
2405f876:	e7ad      	b.n	2405f7d4 <__sflush_r+0x1c>
2405f878:	690f      	ldr	r7, [r1, #16]
2405f87a:	2f00      	cmp	r7, #0
2405f87c:	d0a9      	beq.n	2405f7d2 <__sflush_r+0x1a>
2405f87e:	0793      	lsls	r3, r2, #30
2405f880:	680e      	ldr	r6, [r1, #0]
2405f882:	bf08      	it	eq
2405f884:	694b      	ldreq	r3, [r1, #20]
2405f886:	600f      	str	r7, [r1, #0]
2405f888:	bf18      	it	ne
2405f88a:	2300      	movne	r3, #0
2405f88c:	eba6 0807 	sub.w	r8, r6, r7
2405f890:	608b      	str	r3, [r1, #8]
2405f892:	f1b8 0f00 	cmp.w	r8, #0
2405f896:	dd9c      	ble.n	2405f7d2 <__sflush_r+0x1a>
2405f898:	6a21      	ldr	r1, [r4, #32]
2405f89a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
2405f89c:	4643      	mov	r3, r8
2405f89e:	463a      	mov	r2, r7
2405f8a0:	4628      	mov	r0, r5
2405f8a2:	47b0      	blx	r6
2405f8a4:	2800      	cmp	r0, #0
2405f8a6:	dc06      	bgt.n	2405f8b6 <__sflush_r+0xfe>
2405f8a8:	89a3      	ldrh	r3, [r4, #12]
2405f8aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2405f8ae:	81a3      	strh	r3, [r4, #12]
2405f8b0:	f04f 30ff 	mov.w	r0, #4294967295
2405f8b4:	e78e      	b.n	2405f7d4 <__sflush_r+0x1c>
2405f8b6:	4407      	add	r7, r0
2405f8b8:	eba8 0800 	sub.w	r8, r8, r0
2405f8bc:	e7e9      	b.n	2405f892 <__sflush_r+0xda>
2405f8be:	bf00      	nop
2405f8c0:	20400001 	.word	0x20400001

2405f8c4 <_fflush_r>:
2405f8c4:	b538      	push	{r3, r4, r5, lr}
2405f8c6:	690b      	ldr	r3, [r1, #16]
2405f8c8:	4605      	mov	r5, r0
2405f8ca:	460c      	mov	r4, r1
2405f8cc:	b913      	cbnz	r3, 2405f8d4 <_fflush_r+0x10>
2405f8ce:	2500      	movs	r5, #0
2405f8d0:	4628      	mov	r0, r5
2405f8d2:	bd38      	pop	{r3, r4, r5, pc}
2405f8d4:	b118      	cbz	r0, 2405f8de <_fflush_r+0x1a>
2405f8d6:	6983      	ldr	r3, [r0, #24]
2405f8d8:	b90b      	cbnz	r3, 2405f8de <_fflush_r+0x1a>
2405f8da:	f000 f887 	bl	2405f9ec <__sinit>
2405f8de:	4b14      	ldr	r3, [pc, #80]	; (2405f930 <_fflush_r+0x6c>)
2405f8e0:	429c      	cmp	r4, r3
2405f8e2:	d11b      	bne.n	2405f91c <_fflush_r+0x58>
2405f8e4:	686c      	ldr	r4, [r5, #4]
2405f8e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
2405f8ea:	2b00      	cmp	r3, #0
2405f8ec:	d0ef      	beq.n	2405f8ce <_fflush_r+0xa>
2405f8ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
2405f8f0:	07d0      	lsls	r0, r2, #31
2405f8f2:	d404      	bmi.n	2405f8fe <_fflush_r+0x3a>
2405f8f4:	0599      	lsls	r1, r3, #22
2405f8f6:	d402      	bmi.n	2405f8fe <_fflush_r+0x3a>
2405f8f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
2405f8fa:	f000 f915 	bl	2405fb28 <__retarget_lock_acquire_recursive>
2405f8fe:	4628      	mov	r0, r5
2405f900:	4621      	mov	r1, r4
2405f902:	f7ff ff59 	bl	2405f7b8 <__sflush_r>
2405f906:	6e63      	ldr	r3, [r4, #100]	; 0x64
2405f908:	07da      	lsls	r2, r3, #31
2405f90a:	4605      	mov	r5, r0
2405f90c:	d4e0      	bmi.n	2405f8d0 <_fflush_r+0xc>
2405f90e:	89a3      	ldrh	r3, [r4, #12]
2405f910:	059b      	lsls	r3, r3, #22
2405f912:	d4dd      	bmi.n	2405f8d0 <_fflush_r+0xc>
2405f914:	6da0      	ldr	r0, [r4, #88]	; 0x58
2405f916:	f000 f908 	bl	2405fb2a <__retarget_lock_release_recursive>
2405f91a:	e7d9      	b.n	2405f8d0 <_fflush_r+0xc>
2405f91c:	4b05      	ldr	r3, [pc, #20]	; (2405f934 <_fflush_r+0x70>)
2405f91e:	429c      	cmp	r4, r3
2405f920:	d101      	bne.n	2405f926 <_fflush_r+0x62>
2405f922:	68ac      	ldr	r4, [r5, #8]
2405f924:	e7df      	b.n	2405f8e6 <_fflush_r+0x22>
2405f926:	4b04      	ldr	r3, [pc, #16]	; (2405f938 <_fflush_r+0x74>)
2405f928:	429c      	cmp	r4, r3
2405f92a:	bf08      	it	eq
2405f92c:	68ec      	ldreq	r4, [r5, #12]
2405f92e:	e7da      	b.n	2405f8e6 <_fflush_r+0x22>
2405f930:	24061040 	.word	0x24061040
2405f934:	24061060 	.word	0x24061060
2405f938:	24061020 	.word	0x24061020

2405f93c <std>:
2405f93c:	2300      	movs	r3, #0
2405f93e:	b510      	push	{r4, lr}
2405f940:	4604      	mov	r4, r0
2405f942:	e9c0 3300 	strd	r3, r3, [r0]
2405f946:	e9c0 3304 	strd	r3, r3, [r0, #16]
2405f94a:	6083      	str	r3, [r0, #8]
2405f94c:	8181      	strh	r1, [r0, #12]
2405f94e:	6643      	str	r3, [r0, #100]	; 0x64
2405f950:	81c2      	strh	r2, [r0, #14]
2405f952:	6183      	str	r3, [r0, #24]
2405f954:	4619      	mov	r1, r3
2405f956:	2208      	movs	r2, #8
2405f958:	305c      	adds	r0, #92	; 0x5c
2405f95a:	f7ff f893 	bl	2405ea84 <memset>
2405f95e:	4b05      	ldr	r3, [pc, #20]	; (2405f974 <std+0x38>)
2405f960:	6263      	str	r3, [r4, #36]	; 0x24
2405f962:	4b05      	ldr	r3, [pc, #20]	; (2405f978 <std+0x3c>)
2405f964:	62a3      	str	r3, [r4, #40]	; 0x28
2405f966:	4b05      	ldr	r3, [pc, #20]	; (2405f97c <std+0x40>)
2405f968:	62e3      	str	r3, [r4, #44]	; 0x2c
2405f96a:	4b05      	ldr	r3, [pc, #20]	; (2405f980 <std+0x44>)
2405f96c:	6224      	str	r4, [r4, #32]
2405f96e:	6323      	str	r3, [r4, #48]	; 0x30
2405f970:	bd10      	pop	{r4, pc}
2405f972:	bf00      	nop
2405f974:	2405fd15 	.word	0x2405fd15
2405f978:	2405fd37 	.word	0x2405fd37
2405f97c:	2405fd6f 	.word	0x2405fd6f
2405f980:	2405fd93 	.word	0x2405fd93

2405f984 <_cleanup_r>:
2405f984:	4901      	ldr	r1, [pc, #4]	; (2405f98c <_cleanup_r+0x8>)
2405f986:	f000 b8af 	b.w	2405fae8 <_fwalk_reent>
2405f98a:	bf00      	nop
2405f98c:	2405f8c5 	.word	0x2405f8c5

2405f990 <__sfmoreglue>:
2405f990:	b570      	push	{r4, r5, r6, lr}
2405f992:	1e4a      	subs	r2, r1, #1
2405f994:	2568      	movs	r5, #104	; 0x68
2405f996:	4355      	muls	r5, r2
2405f998:	460e      	mov	r6, r1
2405f99a:	f105 0174 	add.w	r1, r5, #116	; 0x74
2405f99e:	f7ff f98f 	bl	2405ecc0 <_malloc_r>
2405f9a2:	4604      	mov	r4, r0
2405f9a4:	b140      	cbz	r0, 2405f9b8 <__sfmoreglue+0x28>
2405f9a6:	2100      	movs	r1, #0
2405f9a8:	e9c0 1600 	strd	r1, r6, [r0]
2405f9ac:	300c      	adds	r0, #12
2405f9ae:	60a0      	str	r0, [r4, #8]
2405f9b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
2405f9b4:	f7ff f866 	bl	2405ea84 <memset>
2405f9b8:	4620      	mov	r0, r4
2405f9ba:	bd70      	pop	{r4, r5, r6, pc}

2405f9bc <__sfp_lock_acquire>:
2405f9bc:	4801      	ldr	r0, [pc, #4]	; (2405f9c4 <__sfp_lock_acquire+0x8>)
2405f9be:	f000 b8b3 	b.w	2405fb28 <__retarget_lock_acquire_recursive>
2405f9c2:	bf00      	nop
2405f9c4:	200005e4 	.word	0x200005e4

2405f9c8 <__sfp_lock_release>:
2405f9c8:	4801      	ldr	r0, [pc, #4]	; (2405f9d0 <__sfp_lock_release+0x8>)
2405f9ca:	f000 b8ae 	b.w	2405fb2a <__retarget_lock_release_recursive>
2405f9ce:	bf00      	nop
2405f9d0:	200005e4 	.word	0x200005e4

2405f9d4 <__sinit_lock_acquire>:
2405f9d4:	4801      	ldr	r0, [pc, #4]	; (2405f9dc <__sinit_lock_acquire+0x8>)
2405f9d6:	f000 b8a7 	b.w	2405fb28 <__retarget_lock_acquire_recursive>
2405f9da:	bf00      	nop
2405f9dc:	200005df 	.word	0x200005df

2405f9e0 <__sinit_lock_release>:
2405f9e0:	4801      	ldr	r0, [pc, #4]	; (2405f9e8 <__sinit_lock_release+0x8>)
2405f9e2:	f000 b8a2 	b.w	2405fb2a <__retarget_lock_release_recursive>
2405f9e6:	bf00      	nop
2405f9e8:	200005df 	.word	0x200005df

2405f9ec <__sinit>:
2405f9ec:	b510      	push	{r4, lr}
2405f9ee:	4604      	mov	r4, r0
2405f9f0:	f7ff fff0 	bl	2405f9d4 <__sinit_lock_acquire>
2405f9f4:	69a3      	ldr	r3, [r4, #24]
2405f9f6:	b11b      	cbz	r3, 2405fa00 <__sinit+0x14>
2405f9f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
2405f9fc:	f7ff bff0 	b.w	2405f9e0 <__sinit_lock_release>
2405fa00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
2405fa04:	6523      	str	r3, [r4, #80]	; 0x50
2405fa06:	4b13      	ldr	r3, [pc, #76]	; (2405fa54 <__sinit+0x68>)
2405fa08:	4a13      	ldr	r2, [pc, #76]	; (2405fa58 <__sinit+0x6c>)
2405fa0a:	681b      	ldr	r3, [r3, #0]
2405fa0c:	62a2      	str	r2, [r4, #40]	; 0x28
2405fa0e:	42a3      	cmp	r3, r4
2405fa10:	bf04      	itt	eq
2405fa12:	2301      	moveq	r3, #1
2405fa14:	61a3      	streq	r3, [r4, #24]
2405fa16:	4620      	mov	r0, r4
2405fa18:	f000 f820 	bl	2405fa5c <__sfp>
2405fa1c:	6060      	str	r0, [r4, #4]
2405fa1e:	4620      	mov	r0, r4
2405fa20:	f000 f81c 	bl	2405fa5c <__sfp>
2405fa24:	60a0      	str	r0, [r4, #8]
2405fa26:	4620      	mov	r0, r4
2405fa28:	f000 f818 	bl	2405fa5c <__sfp>
2405fa2c:	2200      	movs	r2, #0
2405fa2e:	60e0      	str	r0, [r4, #12]
2405fa30:	2104      	movs	r1, #4
2405fa32:	6860      	ldr	r0, [r4, #4]
2405fa34:	f7ff ff82 	bl	2405f93c <std>
2405fa38:	68a0      	ldr	r0, [r4, #8]
2405fa3a:	2201      	movs	r2, #1
2405fa3c:	2109      	movs	r1, #9
2405fa3e:	f7ff ff7d 	bl	2405f93c <std>
2405fa42:	68e0      	ldr	r0, [r4, #12]
2405fa44:	2202      	movs	r2, #2
2405fa46:	2112      	movs	r1, #18
2405fa48:	f7ff ff78 	bl	2405f93c <std>
2405fa4c:	2301      	movs	r3, #1
2405fa4e:	61a3      	str	r3, [r4, #24]
2405fa50:	e7d2      	b.n	2405f9f8 <__sinit+0xc>
2405fa52:	bf00      	nop
2405fa54:	24060f34 	.word	0x24060f34
2405fa58:	2405f985 	.word	0x2405f985

2405fa5c <__sfp>:
2405fa5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2405fa5e:	4607      	mov	r7, r0
2405fa60:	f7ff ffac 	bl	2405f9bc <__sfp_lock_acquire>
2405fa64:	4b1e      	ldr	r3, [pc, #120]	; (2405fae0 <__sfp+0x84>)
2405fa66:	681e      	ldr	r6, [r3, #0]
2405fa68:	69b3      	ldr	r3, [r6, #24]
2405fa6a:	b913      	cbnz	r3, 2405fa72 <__sfp+0x16>
2405fa6c:	4630      	mov	r0, r6
2405fa6e:	f7ff ffbd 	bl	2405f9ec <__sinit>
2405fa72:	3648      	adds	r6, #72	; 0x48
2405fa74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
2405fa78:	3b01      	subs	r3, #1
2405fa7a:	d503      	bpl.n	2405fa84 <__sfp+0x28>
2405fa7c:	6833      	ldr	r3, [r6, #0]
2405fa7e:	b30b      	cbz	r3, 2405fac4 <__sfp+0x68>
2405fa80:	6836      	ldr	r6, [r6, #0]
2405fa82:	e7f7      	b.n	2405fa74 <__sfp+0x18>
2405fa84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
2405fa88:	b9d5      	cbnz	r5, 2405fac0 <__sfp+0x64>
2405fa8a:	4b16      	ldr	r3, [pc, #88]	; (2405fae4 <__sfp+0x88>)
2405fa8c:	60e3      	str	r3, [r4, #12]
2405fa8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
2405fa92:	6665      	str	r5, [r4, #100]	; 0x64
2405fa94:	f000 f847 	bl	2405fb26 <__retarget_lock_init_recursive>
2405fa98:	f7ff ff96 	bl	2405f9c8 <__sfp_lock_release>
2405fa9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
2405faa0:	e9c4 5504 	strd	r5, r5, [r4, #16]
2405faa4:	6025      	str	r5, [r4, #0]
2405faa6:	61a5      	str	r5, [r4, #24]
2405faa8:	2208      	movs	r2, #8
2405faaa:	4629      	mov	r1, r5
2405faac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
2405fab0:	f7fe ffe8 	bl	2405ea84 <memset>
2405fab4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
2405fab8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
2405fabc:	4620      	mov	r0, r4
2405fabe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2405fac0:	3468      	adds	r4, #104	; 0x68
2405fac2:	e7d9      	b.n	2405fa78 <__sfp+0x1c>
2405fac4:	2104      	movs	r1, #4
2405fac6:	4638      	mov	r0, r7
2405fac8:	f7ff ff62 	bl	2405f990 <__sfmoreglue>
2405facc:	4604      	mov	r4, r0
2405face:	6030      	str	r0, [r6, #0]
2405fad0:	2800      	cmp	r0, #0
2405fad2:	d1d5      	bne.n	2405fa80 <__sfp+0x24>
2405fad4:	f7ff ff78 	bl	2405f9c8 <__sfp_lock_release>
2405fad8:	230c      	movs	r3, #12
2405fada:	603b      	str	r3, [r7, #0]
2405fadc:	e7ee      	b.n	2405fabc <__sfp+0x60>
2405fade:	bf00      	nop
2405fae0:	24060f34 	.word	0x24060f34
2405fae4:	ffff0001 	.word	0xffff0001

2405fae8 <_fwalk_reent>:
2405fae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2405faec:	4606      	mov	r6, r0
2405faee:	4688      	mov	r8, r1
2405faf0:	f100 0448 	add.w	r4, r0, #72	; 0x48
2405faf4:	2700      	movs	r7, #0
2405faf6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
2405fafa:	f1b9 0901 	subs.w	r9, r9, #1
2405fafe:	d505      	bpl.n	2405fb0c <_fwalk_reent+0x24>
2405fb00:	6824      	ldr	r4, [r4, #0]
2405fb02:	2c00      	cmp	r4, #0
2405fb04:	d1f7      	bne.n	2405faf6 <_fwalk_reent+0xe>
2405fb06:	4638      	mov	r0, r7
2405fb08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
2405fb0c:	89ab      	ldrh	r3, [r5, #12]
2405fb0e:	2b01      	cmp	r3, #1
2405fb10:	d907      	bls.n	2405fb22 <_fwalk_reent+0x3a>
2405fb12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
2405fb16:	3301      	adds	r3, #1
2405fb18:	d003      	beq.n	2405fb22 <_fwalk_reent+0x3a>
2405fb1a:	4629      	mov	r1, r5
2405fb1c:	4630      	mov	r0, r6
2405fb1e:	47c0      	blx	r8
2405fb20:	4307      	orrs	r7, r0
2405fb22:	3568      	adds	r5, #104	; 0x68
2405fb24:	e7e9      	b.n	2405fafa <_fwalk_reent+0x12>

2405fb26 <__retarget_lock_init_recursive>:
2405fb26:	4770      	bx	lr

2405fb28 <__retarget_lock_acquire_recursive>:
2405fb28:	4770      	bx	lr

2405fb2a <__retarget_lock_release_recursive>:
2405fb2a:	4770      	bx	lr

2405fb2c <__swhatbuf_r>:
2405fb2c:	b570      	push	{r4, r5, r6, lr}
2405fb2e:	460e      	mov	r6, r1
2405fb30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
2405fb34:	2900      	cmp	r1, #0
2405fb36:	b096      	sub	sp, #88	; 0x58
2405fb38:	4614      	mov	r4, r2
2405fb3a:	461d      	mov	r5, r3
2405fb3c:	da07      	bge.n	2405fb4e <__swhatbuf_r+0x22>
2405fb3e:	2300      	movs	r3, #0
2405fb40:	602b      	str	r3, [r5, #0]
2405fb42:	89b3      	ldrh	r3, [r6, #12]
2405fb44:	061a      	lsls	r2, r3, #24
2405fb46:	d410      	bmi.n	2405fb6a <__swhatbuf_r+0x3e>
2405fb48:	f44f 6380 	mov.w	r3, #1024	; 0x400
2405fb4c:	e00e      	b.n	2405fb6c <__swhatbuf_r+0x40>
2405fb4e:	466a      	mov	r2, sp
2405fb50:	f000 f946 	bl	2405fde0 <_fstat_r>
2405fb54:	2800      	cmp	r0, #0
2405fb56:	dbf2      	blt.n	2405fb3e <__swhatbuf_r+0x12>
2405fb58:	9a01      	ldr	r2, [sp, #4]
2405fb5a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
2405fb5e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
2405fb62:	425a      	negs	r2, r3
2405fb64:	415a      	adcs	r2, r3
2405fb66:	602a      	str	r2, [r5, #0]
2405fb68:	e7ee      	b.n	2405fb48 <__swhatbuf_r+0x1c>
2405fb6a:	2340      	movs	r3, #64	; 0x40
2405fb6c:	2000      	movs	r0, #0
2405fb6e:	6023      	str	r3, [r4, #0]
2405fb70:	b016      	add	sp, #88	; 0x58
2405fb72:	bd70      	pop	{r4, r5, r6, pc}

2405fb74 <__smakebuf_r>:
2405fb74:	898b      	ldrh	r3, [r1, #12]
2405fb76:	b573      	push	{r0, r1, r4, r5, r6, lr}
2405fb78:	079d      	lsls	r5, r3, #30
2405fb7a:	4606      	mov	r6, r0
2405fb7c:	460c      	mov	r4, r1
2405fb7e:	d507      	bpl.n	2405fb90 <__smakebuf_r+0x1c>
2405fb80:	f104 0347 	add.w	r3, r4, #71	; 0x47
2405fb84:	6023      	str	r3, [r4, #0]
2405fb86:	6123      	str	r3, [r4, #16]
2405fb88:	2301      	movs	r3, #1
2405fb8a:	6163      	str	r3, [r4, #20]
2405fb8c:	b002      	add	sp, #8
2405fb8e:	bd70      	pop	{r4, r5, r6, pc}
2405fb90:	ab01      	add	r3, sp, #4
2405fb92:	466a      	mov	r2, sp
2405fb94:	f7ff ffca 	bl	2405fb2c <__swhatbuf_r>
2405fb98:	9900      	ldr	r1, [sp, #0]
2405fb9a:	4605      	mov	r5, r0
2405fb9c:	4630      	mov	r0, r6
2405fb9e:	f7ff f88f 	bl	2405ecc0 <_malloc_r>
2405fba2:	b948      	cbnz	r0, 2405fbb8 <__smakebuf_r+0x44>
2405fba4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
2405fba8:	059a      	lsls	r2, r3, #22
2405fbaa:	d4ef      	bmi.n	2405fb8c <__smakebuf_r+0x18>
2405fbac:	f023 0303 	bic.w	r3, r3, #3
2405fbb0:	f043 0302 	orr.w	r3, r3, #2
2405fbb4:	81a3      	strh	r3, [r4, #12]
2405fbb6:	e7e3      	b.n	2405fb80 <__smakebuf_r+0xc>
2405fbb8:	4b0d      	ldr	r3, [pc, #52]	; (2405fbf0 <__smakebuf_r+0x7c>)
2405fbba:	62b3      	str	r3, [r6, #40]	; 0x28
2405fbbc:	89a3      	ldrh	r3, [r4, #12]
2405fbbe:	6020      	str	r0, [r4, #0]
2405fbc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2405fbc4:	81a3      	strh	r3, [r4, #12]
2405fbc6:	9b00      	ldr	r3, [sp, #0]
2405fbc8:	6163      	str	r3, [r4, #20]
2405fbca:	9b01      	ldr	r3, [sp, #4]
2405fbcc:	6120      	str	r0, [r4, #16]
2405fbce:	b15b      	cbz	r3, 2405fbe8 <__smakebuf_r+0x74>
2405fbd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
2405fbd4:	4630      	mov	r0, r6
2405fbd6:	f000 f915 	bl	2405fe04 <_isatty_r>
2405fbda:	b128      	cbz	r0, 2405fbe8 <__smakebuf_r+0x74>
2405fbdc:	89a3      	ldrh	r3, [r4, #12]
2405fbde:	f023 0303 	bic.w	r3, r3, #3
2405fbe2:	f043 0301 	orr.w	r3, r3, #1
2405fbe6:	81a3      	strh	r3, [r4, #12]
2405fbe8:	89a0      	ldrh	r0, [r4, #12]
2405fbea:	4305      	orrs	r5, r0
2405fbec:	81a5      	strh	r5, [r4, #12]
2405fbee:	e7cd      	b.n	2405fb8c <__smakebuf_r+0x18>
2405fbf0:	2405f985 	.word	0x2405f985

2405fbf4 <memmove>:
2405fbf4:	4288      	cmp	r0, r1
2405fbf6:	b510      	push	{r4, lr}
2405fbf8:	eb01 0402 	add.w	r4, r1, r2
2405fbfc:	d902      	bls.n	2405fc04 <memmove+0x10>
2405fbfe:	4284      	cmp	r4, r0
2405fc00:	4623      	mov	r3, r4
2405fc02:	d807      	bhi.n	2405fc14 <memmove+0x20>
2405fc04:	1e43      	subs	r3, r0, #1
2405fc06:	42a1      	cmp	r1, r4
2405fc08:	d008      	beq.n	2405fc1c <memmove+0x28>
2405fc0a:	f811 2b01 	ldrb.w	r2, [r1], #1
2405fc0e:	f803 2f01 	strb.w	r2, [r3, #1]!
2405fc12:	e7f8      	b.n	2405fc06 <memmove+0x12>
2405fc14:	4402      	add	r2, r0
2405fc16:	4601      	mov	r1, r0
2405fc18:	428a      	cmp	r2, r1
2405fc1a:	d100      	bne.n	2405fc1e <memmove+0x2a>
2405fc1c:	bd10      	pop	{r4, pc}
2405fc1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
2405fc22:	f802 4d01 	strb.w	r4, [r2, #-1]!
2405fc26:	e7f7      	b.n	2405fc18 <memmove+0x24>

2405fc28 <__malloc_lock>:
2405fc28:	4801      	ldr	r0, [pc, #4]	; (2405fc30 <__malloc_lock+0x8>)
2405fc2a:	f7ff bf7d 	b.w	2405fb28 <__retarget_lock_acquire_recursive>
2405fc2e:	bf00      	nop
2405fc30:	200005e0 	.word	0x200005e0

2405fc34 <__malloc_unlock>:
2405fc34:	4801      	ldr	r0, [pc, #4]	; (2405fc3c <__malloc_unlock+0x8>)
2405fc36:	f7ff bf78 	b.w	2405fb2a <__retarget_lock_release_recursive>
2405fc3a:	bf00      	nop
2405fc3c:	200005e0 	.word	0x200005e0

2405fc40 <_realloc_r>:
2405fc40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2405fc42:	4607      	mov	r7, r0
2405fc44:	4614      	mov	r4, r2
2405fc46:	460e      	mov	r6, r1
2405fc48:	b921      	cbnz	r1, 2405fc54 <_realloc_r+0x14>
2405fc4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
2405fc4e:	4611      	mov	r1, r2
2405fc50:	f7ff b836 	b.w	2405ecc0 <_malloc_r>
2405fc54:	b922      	cbnz	r2, 2405fc60 <_realloc_r+0x20>
2405fc56:	f7fe ffe3 	bl	2405ec20 <_free_r>
2405fc5a:	4625      	mov	r5, r4
2405fc5c:	4628      	mov	r0, r5
2405fc5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2405fc60:	f000 f8f2 	bl	2405fe48 <_malloc_usable_size_r>
2405fc64:	42a0      	cmp	r0, r4
2405fc66:	d20f      	bcs.n	2405fc88 <_realloc_r+0x48>
2405fc68:	4621      	mov	r1, r4
2405fc6a:	4638      	mov	r0, r7
2405fc6c:	f7ff f828 	bl	2405ecc0 <_malloc_r>
2405fc70:	4605      	mov	r5, r0
2405fc72:	2800      	cmp	r0, #0
2405fc74:	d0f2      	beq.n	2405fc5c <_realloc_r+0x1c>
2405fc76:	4631      	mov	r1, r6
2405fc78:	4622      	mov	r2, r4
2405fc7a:	f7fe fef5 	bl	2405ea68 <memcpy>
2405fc7e:	4631      	mov	r1, r6
2405fc80:	4638      	mov	r0, r7
2405fc82:	f7fe ffcd 	bl	2405ec20 <_free_r>
2405fc86:	e7e9      	b.n	2405fc5c <_realloc_r+0x1c>
2405fc88:	4635      	mov	r5, r6
2405fc8a:	e7e7      	b.n	2405fc5c <_realloc_r+0x1c>

2405fc8c <_raise_r>:
2405fc8c:	291f      	cmp	r1, #31
2405fc8e:	b538      	push	{r3, r4, r5, lr}
2405fc90:	4604      	mov	r4, r0
2405fc92:	460d      	mov	r5, r1
2405fc94:	d904      	bls.n	2405fca0 <_raise_r+0x14>
2405fc96:	2316      	movs	r3, #22
2405fc98:	6003      	str	r3, [r0, #0]
2405fc9a:	f04f 30ff 	mov.w	r0, #4294967295
2405fc9e:	bd38      	pop	{r3, r4, r5, pc}
2405fca0:	6c42      	ldr	r2, [r0, #68]	; 0x44
2405fca2:	b112      	cbz	r2, 2405fcaa <_raise_r+0x1e>
2405fca4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
2405fca8:	b94b      	cbnz	r3, 2405fcbe <_raise_r+0x32>
2405fcaa:	4620      	mov	r0, r4
2405fcac:	f000 f830 	bl	2405fd10 <_getpid_r>
2405fcb0:	462a      	mov	r2, r5
2405fcb2:	4601      	mov	r1, r0
2405fcb4:	4620      	mov	r0, r4
2405fcb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
2405fcba:	f000 b817 	b.w	2405fcec <_kill_r>
2405fcbe:	2b01      	cmp	r3, #1
2405fcc0:	d00a      	beq.n	2405fcd8 <_raise_r+0x4c>
2405fcc2:	1c59      	adds	r1, r3, #1
2405fcc4:	d103      	bne.n	2405fcce <_raise_r+0x42>
2405fcc6:	2316      	movs	r3, #22
2405fcc8:	6003      	str	r3, [r0, #0]
2405fcca:	2001      	movs	r0, #1
2405fccc:	e7e7      	b.n	2405fc9e <_raise_r+0x12>
2405fcce:	2400      	movs	r4, #0
2405fcd0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
2405fcd4:	4628      	mov	r0, r5
2405fcd6:	4798      	blx	r3
2405fcd8:	2000      	movs	r0, #0
2405fcda:	e7e0      	b.n	2405fc9e <_raise_r+0x12>

2405fcdc <raise>:
2405fcdc:	4b02      	ldr	r3, [pc, #8]	; (2405fce8 <raise+0xc>)
2405fcde:	4601      	mov	r1, r0
2405fce0:	6818      	ldr	r0, [r3, #0]
2405fce2:	f7ff bfd3 	b.w	2405fc8c <_raise_r>
2405fce6:	bf00      	nop
2405fce8:	20000040 	.word	0x20000040

2405fcec <_kill_r>:
2405fcec:	b538      	push	{r3, r4, r5, lr}
2405fcee:	4d07      	ldr	r5, [pc, #28]	; (2405fd0c <_kill_r+0x20>)
2405fcf0:	2300      	movs	r3, #0
2405fcf2:	4604      	mov	r4, r0
2405fcf4:	4608      	mov	r0, r1
2405fcf6:	4611      	mov	r1, r2
2405fcf8:	602b      	str	r3, [r5, #0]
2405fcfa:	f7f2 fe29 	bl	24052950 <_kill>
2405fcfe:	1c43      	adds	r3, r0, #1
2405fd00:	d102      	bne.n	2405fd08 <_kill_r+0x1c>
2405fd02:	682b      	ldr	r3, [r5, #0]
2405fd04:	b103      	cbz	r3, 2405fd08 <_kill_r+0x1c>
2405fd06:	6023      	str	r3, [r4, #0]
2405fd08:	bd38      	pop	{r3, r4, r5, pc}
2405fd0a:	bf00      	nop
2405fd0c:	200005e8 	.word	0x200005e8

2405fd10 <_getpid_r>:
2405fd10:	f7f2 be16 	b.w	24052940 <_getpid>

2405fd14 <__sread>:
2405fd14:	b510      	push	{r4, lr}
2405fd16:	460c      	mov	r4, r1
2405fd18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
2405fd1c:	f000 f89c 	bl	2405fe58 <_read_r>
2405fd20:	2800      	cmp	r0, #0
2405fd22:	bfab      	itete	ge
2405fd24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
2405fd26:	89a3      	ldrhlt	r3, [r4, #12]
2405fd28:	181b      	addge	r3, r3, r0
2405fd2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
2405fd2e:	bfac      	ite	ge
2405fd30:	6563      	strge	r3, [r4, #84]	; 0x54
2405fd32:	81a3      	strhlt	r3, [r4, #12]
2405fd34:	bd10      	pop	{r4, pc}

2405fd36 <__swrite>:
2405fd36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2405fd3a:	461f      	mov	r7, r3
2405fd3c:	898b      	ldrh	r3, [r1, #12]
2405fd3e:	05db      	lsls	r3, r3, #23
2405fd40:	4605      	mov	r5, r0
2405fd42:	460c      	mov	r4, r1
2405fd44:	4616      	mov	r6, r2
2405fd46:	d505      	bpl.n	2405fd54 <__swrite+0x1e>
2405fd48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
2405fd4c:	2302      	movs	r3, #2
2405fd4e:	2200      	movs	r2, #0
2405fd50:	f000 f868 	bl	2405fe24 <_lseek_r>
2405fd54:	89a3      	ldrh	r3, [r4, #12]
2405fd56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
2405fd5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
2405fd5e:	81a3      	strh	r3, [r4, #12]
2405fd60:	4632      	mov	r2, r6
2405fd62:	463b      	mov	r3, r7
2405fd64:	4628      	mov	r0, r5
2405fd66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
2405fd6a:	f000 b817 	b.w	2405fd9c <_write_r>

2405fd6e <__sseek>:
2405fd6e:	b510      	push	{r4, lr}
2405fd70:	460c      	mov	r4, r1
2405fd72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
2405fd76:	f000 f855 	bl	2405fe24 <_lseek_r>
2405fd7a:	1c43      	adds	r3, r0, #1
2405fd7c:	89a3      	ldrh	r3, [r4, #12]
2405fd7e:	bf15      	itete	ne
2405fd80:	6560      	strne	r0, [r4, #84]	; 0x54
2405fd82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
2405fd86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
2405fd8a:	81a3      	strheq	r3, [r4, #12]
2405fd8c:	bf18      	it	ne
2405fd8e:	81a3      	strhne	r3, [r4, #12]
2405fd90:	bd10      	pop	{r4, pc}

2405fd92 <__sclose>:
2405fd92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
2405fd96:	f000 b813 	b.w	2405fdc0 <_close_r>
	...

2405fd9c <_write_r>:
2405fd9c:	b538      	push	{r3, r4, r5, lr}
2405fd9e:	4d07      	ldr	r5, [pc, #28]	; (2405fdbc <_write_r+0x20>)
2405fda0:	4604      	mov	r4, r0
2405fda2:	4608      	mov	r0, r1
2405fda4:	4611      	mov	r1, r2
2405fda6:	2200      	movs	r2, #0
2405fda8:	602a      	str	r2, [r5, #0]
2405fdaa:	461a      	mov	r2, r3
2405fdac:	f7f2 fe07 	bl	240529be <_write>
2405fdb0:	1c43      	adds	r3, r0, #1
2405fdb2:	d102      	bne.n	2405fdba <_write_r+0x1e>
2405fdb4:	682b      	ldr	r3, [r5, #0]
2405fdb6:	b103      	cbz	r3, 2405fdba <_write_r+0x1e>
2405fdb8:	6023      	str	r3, [r4, #0]
2405fdba:	bd38      	pop	{r3, r4, r5, pc}
2405fdbc:	200005e8 	.word	0x200005e8

2405fdc0 <_close_r>:
2405fdc0:	b538      	push	{r3, r4, r5, lr}
2405fdc2:	4d06      	ldr	r5, [pc, #24]	; (2405fddc <_close_r+0x1c>)
2405fdc4:	2300      	movs	r3, #0
2405fdc6:	4604      	mov	r4, r0
2405fdc8:	4608      	mov	r0, r1
2405fdca:	602b      	str	r3, [r5, #0]
2405fdcc:	f7f2 fe13 	bl	240529f6 <_close>
2405fdd0:	1c43      	adds	r3, r0, #1
2405fdd2:	d102      	bne.n	2405fdda <_close_r+0x1a>
2405fdd4:	682b      	ldr	r3, [r5, #0]
2405fdd6:	b103      	cbz	r3, 2405fdda <_close_r+0x1a>
2405fdd8:	6023      	str	r3, [r4, #0]
2405fdda:	bd38      	pop	{r3, r4, r5, pc}
2405fddc:	200005e8 	.word	0x200005e8

2405fde0 <_fstat_r>:
2405fde0:	b538      	push	{r3, r4, r5, lr}
2405fde2:	4d07      	ldr	r5, [pc, #28]	; (2405fe00 <_fstat_r+0x20>)
2405fde4:	2300      	movs	r3, #0
2405fde6:	4604      	mov	r4, r0
2405fde8:	4608      	mov	r0, r1
2405fdea:	4611      	mov	r1, r2
2405fdec:	602b      	str	r3, [r5, #0]
2405fdee:	f7f2 fe0e 	bl	24052a0e <_fstat>
2405fdf2:	1c43      	adds	r3, r0, #1
2405fdf4:	d102      	bne.n	2405fdfc <_fstat_r+0x1c>
2405fdf6:	682b      	ldr	r3, [r5, #0]
2405fdf8:	b103      	cbz	r3, 2405fdfc <_fstat_r+0x1c>
2405fdfa:	6023      	str	r3, [r4, #0]
2405fdfc:	bd38      	pop	{r3, r4, r5, pc}
2405fdfe:	bf00      	nop
2405fe00:	200005e8 	.word	0x200005e8

2405fe04 <_isatty_r>:
2405fe04:	b538      	push	{r3, r4, r5, lr}
2405fe06:	4d06      	ldr	r5, [pc, #24]	; (2405fe20 <_isatty_r+0x1c>)
2405fe08:	2300      	movs	r3, #0
2405fe0a:	4604      	mov	r4, r0
2405fe0c:	4608      	mov	r0, r1
2405fe0e:	602b      	str	r3, [r5, #0]
2405fe10:	f7f2 fe0d 	bl	24052a2e <_isatty>
2405fe14:	1c43      	adds	r3, r0, #1
2405fe16:	d102      	bne.n	2405fe1e <_isatty_r+0x1a>
2405fe18:	682b      	ldr	r3, [r5, #0]
2405fe1a:	b103      	cbz	r3, 2405fe1e <_isatty_r+0x1a>
2405fe1c:	6023      	str	r3, [r4, #0]
2405fe1e:	bd38      	pop	{r3, r4, r5, pc}
2405fe20:	200005e8 	.word	0x200005e8

2405fe24 <_lseek_r>:
2405fe24:	b538      	push	{r3, r4, r5, lr}
2405fe26:	4d07      	ldr	r5, [pc, #28]	; (2405fe44 <_lseek_r+0x20>)
2405fe28:	4604      	mov	r4, r0
2405fe2a:	4608      	mov	r0, r1
2405fe2c:	4611      	mov	r1, r2
2405fe2e:	2200      	movs	r2, #0
2405fe30:	602a      	str	r2, [r5, #0]
2405fe32:	461a      	mov	r2, r3
2405fe34:	f7f2 fe06 	bl	24052a44 <_lseek>
2405fe38:	1c43      	adds	r3, r0, #1
2405fe3a:	d102      	bne.n	2405fe42 <_lseek_r+0x1e>
2405fe3c:	682b      	ldr	r3, [r5, #0]
2405fe3e:	b103      	cbz	r3, 2405fe42 <_lseek_r+0x1e>
2405fe40:	6023      	str	r3, [r4, #0]
2405fe42:	bd38      	pop	{r3, r4, r5, pc}
2405fe44:	200005e8 	.word	0x200005e8

2405fe48 <_malloc_usable_size_r>:
2405fe48:	f851 3c04 	ldr.w	r3, [r1, #-4]
2405fe4c:	1f18      	subs	r0, r3, #4
2405fe4e:	2b00      	cmp	r3, #0
2405fe50:	bfbc      	itt	lt
2405fe52:	580b      	ldrlt	r3, [r1, r0]
2405fe54:	18c0      	addlt	r0, r0, r3
2405fe56:	4770      	bx	lr

2405fe58 <_read_r>:
2405fe58:	b538      	push	{r3, r4, r5, lr}
2405fe5a:	4d07      	ldr	r5, [pc, #28]	; (2405fe78 <_read_r+0x20>)
2405fe5c:	4604      	mov	r4, r0
2405fe5e:	4608      	mov	r0, r1
2405fe60:	4611      	mov	r1, r2
2405fe62:	2200      	movs	r2, #0
2405fe64:	602a      	str	r2, [r5, #0]
2405fe66:	461a      	mov	r2, r3
2405fe68:	f7f2 fd8c 	bl	24052984 <_read>
2405fe6c:	1c43      	adds	r3, r0, #1
2405fe6e:	d102      	bne.n	2405fe76 <_read_r+0x1e>
2405fe70:	682b      	ldr	r3, [r5, #0]
2405fe72:	b103      	cbz	r3, 2405fe76 <_read_r+0x1e>
2405fe74:	6023      	str	r3, [r4, #0]
2405fe76:	bd38      	pop	{r3, r4, r5, pc}
2405fe78:	200005e8 	.word	0x200005e8

2405fe7c <_init>:
2405fe7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2405fe7e:	bf00      	nop
2405fe80:	bcf8      	pop	{r3, r4, r5, r6, r7}
2405fe82:	bc08      	pop	{r3}
2405fe84:	469e      	mov	lr, r3
2405fe86:	4770      	bx	lr

2405fe88 <_fini>:
2405fe88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2405fe8a:	bf00      	nop
2405fe8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
2405fe8e:	bc08      	pop	{r3}
2405fe90:	469e      	mov	lr, r3
2405fe92:	4770      	bx	lr
